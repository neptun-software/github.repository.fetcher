{
  "metadata": {
    "timestamp": 1736708890908,
    "page": 114,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/guice",
      "stars": 12539,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.201171875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Known text files\n*.java text\n*.xml text\n*.yml text\n*.md text\n*.properties text\n*.sh text\n\n# Known binary files\n*.jar binary\n*.gif binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1123046875,
          "content": "/build/\nbazel-*\ntarget/\nbin/\n.project\n.classpath\n.settings/\n*~\n*.orig\n*.new\n.idea/\n*.iml\n*.ipr\nextensions/**/build/"
        },
        {
          "name": "BUILD",
          "type": "blob",
          "size": 3.96484375,
          "content": "load(\"@google_bazel_common//tools/javadoc:javadoc.bzl\", \"javadoc_library\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\npackage_group(\n    name = \"src\",\n    packages = [\"//...\"],\n)\n\nexports_files([\n    \"pom-template.xml\",\n])\n\njavadoc_library(\n    name = \"javadoc\",\n    testonly = 1,  # some dependencies are testonly,\n    srcs = [\n        \"//core/src/com/google/inject:javadoc-srcs\",\n        \"//extensions/assistedinject/src/com/google/inject/assistedinject:javadoc-srcs\",\n        \"//extensions/dagger-adapter/src/com/google/inject/daggeradapter:javadoc-srcs\",\n        \"//extensions/grapher/src/com/google/inject/grapher:javadoc-srcs\",\n        \"//extensions/jmx/src/com/google/inject/tools/jmx:javadoc-srcs\",\n        \"//extensions/jndi/src/com/google/inject/jndi:javadoc-srcs\",\n        \"//extensions/persist/src/com/google/inject/persist:javadoc-srcs\",\n        \"//extensions/servlet/src/com/google/inject/servlet:javadoc-srcs\",\n        \"//extensions/spring/src/com/google/inject/spring:javadoc-srcs\",\n        # struts2 doesn't work with jakarta.servlet, so we don't include it.\n        # We leave the commented out line as a bread-crumb for the future.\n        # \"//extensions/struts2/src/com/google/inject/struts2:javadoc-srcs\",\n        \"//extensions/testlib/src/com/google/inject/testing/fieldbinder:javadoc-srcs\",\n        \"//extensions/testlib/src/com/google/inject/testing/throwingproviders:javadoc-srcs\",\n        \"//extensions/throwingproviders/src/com/google/inject/throwingproviders:javadoc-srcs\",\n    ],\n    doctitle = \"Guice Dependency Injection API\",\n    external_javadoc_links = [\n        \"https://docs.oracle.com/javase/8/docs/api/\",\n        \"https://guava.dev/releases/snapshot-jre/api/docs/\",\n        \"https://google.github.io/truth/api/latest/\",\n        \"http://errorprone.info/api/latest/\",\n        \"https://tomcat.apache.org/tomcat-5.5-doc/servletapi/\",\n        \"http://aopalliance.sourceforge.net/doc/\",\n    ],\n    groups = {\n        \"Guice Core\": [\n            \"com.google.inject\",\n            \"com.google.inject.util\",\n            \"com.google.inject.spi\",\n            \"com.google.inject.name\",\n            \"com.google.inject.matcher\",\n            \"com.google.inject.binder\",\n            \"com.google.inject.multibindings\",\n        ],\n        \"AssistedInject Extension\": [\"com.google.inject.assistedinject\"],\n        \"Dagger Adapter\": [\"com.google.inject.daggeradapter\"],\n        \"Grapher Extension\": [\n            \"com.google.inject.grapher\",\n            \"com.google.inject.grapher.*\",\n        ],\n        \"JNDI Extension\": [\"com.google.inject.jndi\"],\n        \"JMX Extension\": [\"com.google.inject.tools.jmx\"],\n        \"Persist Extension\": [\n            \"com.google.inject.persist\",\n            \"com.google.inject.persist.*\",\n        ],\n        \"Servlet Extension\": [\"com.google.inject.servlet\"],\n        \"Spring Extension\": [\"com.google.inject.spring\"],\n        # \"Struts2 Extension\": [\"com.google.inject.struts2\"],\n        \"Test Libraries Extension\": [\"com.google.inject.testing.*\"],\n        \"ThrowingProviders Extension\": [\"com.google.inject.throwingproviders\"],\n    },\n    tags = [\"manual\"],  # Only do this when explicitly requested, not on test //...\n    deps = [\n        \"//core/src/com/google/inject\",\n        \"//extensions/assistedinject/src/com/google/inject/assistedinject\",\n        \"//extensions/dagger-adapter/src/com/google/inject/daggeradapter\",\n        \"//extensions/grapher/src/com/google/inject/grapher\",\n        \"//extensions/jmx/src/com/google/inject/tools/jmx\",\n        \"//extensions/jndi/src/com/google/inject/jndi\",\n        \"//extensions/persist/src/com/google/inject/persist\",\n        \"//extensions/servlet/src/com/google/inject/servlet\",\n        \"//extensions/spring/src/com/google/inject/spring\",\n        # \"//extensions/struts2/src/com/google/inject/struts2\",\n        \"//extensions/testlib/src/com/google/inject/testing/fieldbinder\",\n        \"//extensions/testlib/src/com/google/inject/testing/throwingproviders\",\n        \"//extensions/throwingproviders/src/com/google/inject/throwingproviders\",\n    ],\n)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.669921875,
          "content": "# How to contribute #\n\nWe'd love to accept your patches and contributions to this project.  There are\na just a few small guidelines you need to follow.\n\n\n## Contributor License Agreement ##\n\nContributions to any Google project must be accompanied by a Contributor\nLicense Agreement.  This is not a copyright **assignment**, it simply gives\nGoogle permission to use and redistribute your contributions as part of the\nproject.\n\n  * If you are an individual writing original source code and you're sure you\n    own the intellectual property, then you'll need to sign an [individual\n    CLA][].\n\n  * If you work for a company that wants to allow you to contribute your work,\n    then you'll need to sign a [corporate CLA][].\n\nYou generally only need to submit a CLA once, so if you've already submitted\none (even if it was for a different project), you probably don't need to do it\nagain.\n\n[individual CLA]: https://developers.google.com/open-source/cla/individual\n[corporate CLA]: https://developers.google.com/open-source/cla/corporate\n\n\n## Submitting a patch ##\n\n  1. It's generally best to start by opening a new issue describing the bug or\n     feature you're intending to fix.  Even if you think it's relatively minor,\n     it's helpful to know what people are working on.  Mention in the initial\n     issue that you are planning to work on that bug or feature so that it can\n     be assigned to you.\n\n  1. Follow the normal process of [forking][] the project, and setup a new\n     branch to work in.  It's important that each group of changes be done in\n     separate branches in order to ensure that a pull request only includes the\n     commits related to that bug or feature.\n\n  1. Any significant changes should almost always be accompanied by tests.  The\n     project already has good test coverage, so look at some of the existing\n     tests if you're unsure how to go about it.\n     \n  1. All contributions must be licensed Apache 2.0 and all files must have\n     a copy of the boilerplate licence comment (can be copied from an existing\n     file.  Files should be formatted according to Google's [java style guide][].\n\n  1. Do your best to have [well-formed commit messages][] for each change.\n     This provides consistency throughout the project, and ensures that commit\n     messages are able to be formatted properly by various git tools.\n\n  1. Finally, push the commits to your fork and submit a [pull request][].\n\n[forking]: https://help.github.com/articles/fork-a-repo\n[java style guide]: https://google.github.io/styleguide/javaguide.html\n[well-formed commit messages]: http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\n[pull request]: https://help.github.com/articles/creating-a-pull-request\n\n\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.6875,
          "content": "Guice\n====\n\n-   **Latest releases:**\n    * **[6.0.0](https://github.com/google/guice/wiki/Guice600) (supports `javax.{inject,servlet,persistence}`, [mostly supports](https://github.com/google/guice/wiki/Guice600#jee-jakarta-transition) `jakarta.inject`)**\n    * **[7.0.0](https://github.com/google/guice/wiki/Guice700) (supports `jakarta.{inject,servlet,persistence}`)**\n    * (6.0.0 & 7.0.0 are equivalent except for their javax/jakarta support.)\n-   **Documentation:**\n    * [User Guide](https://github.com/google/guice/wiki/Motivation),\n    * [6.0.0 javadocs](https://google.github.io/guice/api-docs/6.0.0/javadoc/index.html)\n    * [7.0.0 javadocs](https://google.github.io/guice/api-docs/7.0.0/javadoc/index.html)\n    * [Latest Snapshot javadocs](https://google.github.io/guice/api-docs/latest/javadoc/index.html)\n-   **Continuous Integration:**\n    [![Build Status](https://github.com/google/guice/workflows/continuous-integration/badge.svg)](https://github.com/google/guice/actions)\n-   **Mailing Lists:** [User Mailing List](http://groups.google.com/group/google-guice) <br/>\n-   **License:** [Apache 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\nOverview\n====\n\nPut simply, Guice alleviates the need for factories and the use of new in your Java code. Think of Guice's @Inject as the new new. You will still need to write factories in some cases, but your code will not depend directly on them. Your code will be easier to change, unit test and reuse in other contexts.\n\nGuice embraces Java's type safe nature. You might think of Guice as filling in missing features for core Java. Ideally, the language itself would provide most of the same features, but until such a language comes along, we have Guice.\n\nGuice helps you design better APIs, and the Guice API itself sets a good example. Guice is not a kitchen sink. We justify each feature with at least three use cases. When in doubt, we leave it out. We build general functionality which enables you to extend Guice rather than adding every feature to the core framework.\n\nGuice aims to make development and debugging easier and faster, not harder and slower. In that vein, Guice steers clear of surprises and magic. You should be able to understand code with or without tools, though tools can make things even easier. When errors do occur, Guice goes the extra mile to generate helpful messages.\n\nFor an introduction to Guice and a comparison to new and the factory pattern, see [Bob Lee's video presentation](https://www.youtube.com/watch?v=hBVJbzAagfs). After that, check out our [user's guide](https://github.com/google/guice/wiki/Motivation).\n\nWe've been running Guice in mission critical applications since 2006, and now you can, too. We hope you enjoy it as much as we do.\n\n\nInstallation Instructions\n====\nGuice Core (Maven)\n```xml\n<dependency>\n  <groupId>com.google.inject</groupId>\n  <artifactId>guice</artifactId>\n  <!-- {version} can be 6.0.0, 7.0.0, etc. -->\n  <version>{version}</version>\n</dependency>\n```\n\nGuice Extension (Maven)\n```xml\n<dependency>\n  <groupId>com.google.inject.extensions</groupId>\n  <!-- {extension-name} can be one of: assistedinject, dagger-adapter,\n       grapher, jmx, jndi, persist, spring, testlib or throwingproviders -->\n  <artifactId>guice-{extension-name}</artifactId>\n  <!-- {version} must match the guice core version. -->\n  <version>{version}</version>\n</dependency>\n```\n\nSee [Maven Central](https://central.sonatype.com/artifact/com.google.inject/guice/) for more details, including snippets for other build systems such as Gradle, Ivy, sbt, and more.\n\n---\n[![jolt award](https://user-images.githubusercontent.com/1885701/52603534-0d620380-2e1c-11e9-8cd5-95f0e141fcb0.png)](http://www.drdobbs.com/tools/winners-of-the-18th-jolt-product-excelle/207600666?pgno=6)\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 3.6083984375,
          "content": "load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nRULES_JVM_EXTERNAL_TAG = \"4.2\"\n\nRULES_JVM_EXTERNAL_SHA = \"cd1a77b7b02e8e008439ca76fd34f5b07aecb8c752961f9640dea15e9e5ba1ca\"\n\nhttp_archive(\n    name = \"rules_jvm_external\",\n    sha256 = RULES_JVM_EXTERNAL_SHA,\n    strip_prefix = \"rules_jvm_external-%s\" % RULES_JVM_EXTERNAL_TAG,\n    url = \"https://github.com/bazelbuild/rules_jvm_external/archive/%s.zip\" % RULES_JVM_EXTERNAL_TAG,\n)\n\nload(\"@rules_jvm_external//:defs.bzl\", \"maven_install\")\nload(\"@rules_jvm_external//:specs.bzl\", \"maven\")\n\nhttp_archive(\n    name = \"google_bazel_common\",\n    sha256 = \"cba2aff0fb5e64dae880c8e1ead1b8d414a12b8e924315fac1a067de78a65e81\",\n    strip_prefix = \"bazel-common-d59d067c04e973f3c4aa34f6628bed97d6664c3c\",\n    urls = [\"https://github.com/google/bazel-common/archive/d59d067c04e973f3c4aa34f6628bed97d6664c3c.zip\"],\n)\n\nload(\"@google_bazel_common//:workspace_defs.bzl\", \"google_common_workspace_rules\")\n\ngoogle_common_workspace_rules()\n\nmaven_install(\n    artifacts = [\n        \"aopalliance:aopalliance:1.0\",\n        \"com.google.auto.value:auto-value:1.6.3\",\n        \"com.google.code.findbugs:jsr305:3.0.1\",\n        \"com.google.dagger:dagger:2.22.1\",\n        \"com.google.dagger:dagger-producers:2.22.1\",\n        \"com.google.errorprone:error_prone_annotations:2.18.0\",\n        \"com.google.guava:guava:33.0.0-jre\",\n        \"commons-logging:commons-logging:1.2\",\n        \"jakarta.inject:jakarta.inject-api:2.0.1\",\n        \"jakarta.persistence:jakarta.persistence-api:3.0.0\",\n        \"jakarta.servlet:jakarta.servlet-api:5.0.0\",\n        \"org.apache.struts:struts2-core:2.5.31\",\n        \"org.apache.struts.xwork:xwork-core:2.3.37\",\n        \"org.ow2.asm:asm:9.5\",\n        \"org.springframework:spring-core:5.3.18\",\n        \"org.springframework:spring-beans:5.3.18\",\n        \"biz.aQute.bnd:bndlib:2.4.0\",\n        \"info.picocli:picocli:4.6.3\",\n        maven.artifact(\n            \"biz.aQute\",\n            \"bnd\",\n            \"0.0.384\",\n            testonly = True,\n        ),\n        maven.artifact(\n            \"com.google.guava\",\n            \"guava-testlib\",\n            \"33.0.0-jre\",\n            testonly = True,\n        ),\n        maven.artifact(\n            \"com.google.truth\",\n            \"truth\",\n            \"1.4.0\",\n            testonly = True,\n        ),\n        maven.artifact(\n            \"com.google.truth.extensions\",\n            \"truth-java8-extension\",\n            \"1.4.0\",\n            testonly = True,\n        ),\n        maven.artifact(\n            \"jakarta.inject\",\n            \"jakarta.inject-tck\",\n            \"2.0.1\",\n            testonly = True,\n        ),\n        maven.artifact(\n            \"junit\",\n            \"junit\",\n            \"4.13.2\",\n            testonly = True,\n        ),\n        maven.artifact(\n            \"org.apache.felix\",\n            \"org.apache.felix.framework\",\n            \"3.0.5\",\n            testonly = True,\n        ),\n        maven.artifact(\n            \"org.easymock\",\n            \"easymock\",\n            \"3.1\",\n            testonly = True,\n        ),\n        maven.artifact(\n            \"org.hamcrest\",\n            \"hamcrest\",\n            \"2.2\",\n            testonly = True,\n        ),\n        maven.artifact(\n            \"org.hibernate\",\n            \"hibernate-core-jakarta\",\n            \"5.6.15.Final\",\n            testonly = True,\n        ),\n        maven.artifact(\n            \"org.hsqldb\",\n            \"hsqldb-j5\",\n            \"2.0.0\",\n            testonly = True,\n        ),\n        maven.artifact(\n            \"org.mockito\",\n            \"mockito-core\",\n            \"4.2.0\",\n            testonly = True,\n        ),\n    ],\n    repositories = [\n        \"https://repo1.maven.org/maven2\",\n    ],\n)\n"
        },
        {
          "name": "bom",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.properties",
          "type": "blob",
          "size": 0.052734375,
          "content": "module=com.google.inject\nimports=!org.objectweb.asm.*\n"
        },
        {
          "name": "build_defs.bzl",
          "type": "blob",
          "size": 0.75390625,
          "content": "\"\"\"This file defines constants used across the Guice build\"\"\"\n# Copyright (C) 2022 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nJAVAC_OPTS = [\n    \"-Xdoclint:html,syntax\",\n    \"-source\",\n    \"1.8\",\n    \"-target\",\n    \"1.8\",\n]\n\nPOM_VERSION = \"${project.version}\"\n"
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "mvn.bzl",
          "type": "blob",
          "size": 6.5234375,
          "content": "# Copyright (C) 2022 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"starlark macros to generate maven files.\"\"\"\n\nload(\"@google_bazel_common//tools/jarjar:jarjar.bzl\", \"jarjar_library\")\nload(\"@google_bazel_common//tools/javadoc:javadoc.bzl\", \"javadoc_library\")\nload(\"@google_bazel_common//tools/maven:pom_file.bzl\", \"pom_file\")\n\nExportInfo = provider(\n    \"Export information\",\n    fields = {\n        \"exports\": \"A depset containing the transitive exports from the target\",\n    },\n)\n\n# @unused target is unused but required because it's part of the aspect API\ndef _collect_exports_aspect_impl(target, ctx):\n    exports = getattr(ctx.rule.attr, \"exports\", [])\n    transitive = [target[ExportInfo].exports for target in exports if ExportInfo in target]\n    return [ExportInfo(exports = depset(exports, transitive = transitive))]\n\n_collect_exports_aspect = aspect(\n    implementation = _collect_exports_aspect_impl,\n    attr_aspects = [\"exports\"],\n)\n\ndef _validate_target_libs_rule_impl(ctx):\n    \"\"\"Validates the transitive exports of the maven artifacts.\n\n    If the main maven artifact target exports other targets, those exported targets need to be\n    included in the artifact_target_libs, so that they get packaged into the final deployable\n    artifact.\n    \"\"\"\n    target = ctx.attr.target\n    expected = [lib.label for lib in target[ExportInfo].exports.to_list() if str(lib.label) not in ctx.attr.optional_target_libs]\n    actual = [lib.label for lib in ctx.attr.actual_target_libs if lib.label not in ctx.attr.optional_target_libs]\n    missing = sorted(['\"{}\"'.format(x) for x in expected if x not in actual])\n    extra = sorted(['\"{}\"'.format(x) for x in actual if x not in expected])\n    if missing or extra:\n        expected_formatted = \"\\n\\t\\t\".join(sorted(['\"{}\"'.format(x) for x in expected]))\n        actual_formatted = \"\\n\\t\\t\".join(sorted(['\"{}\"'.format(x) for x in actual]))\n        fail(\"\\t[Error]: missing or extra target in artifact_target_libs: \" +\n             \"\\n\\t expected = [\" + expected_formatted + \"]\" +\n             \"\\n\\t actual = [\" + actual_formatted + \"]\")\n\n# This rule exists to perform an assertion during the Starlark analysis phase, causing any macro or\n# BUILD file instantiating it to fail to generate.\n_validate_target_libs_binary = rule(\n    implementation = _validate_target_libs_rule_impl,\n    attrs = {\n        \"target\": attr.label(aspects = [_collect_exports_aspect]),\n        \"actual_target_libs\": attr.label_list(),\n\n        # This is a string_list instead of label_list to allow exluding\n        # transitive exports for which the caller lacks visibility.\n        \"optional_target_libs\": attr.string_list(),\n    },\n)\n\ndef gen_maven_artifact(\n        name,\n        artifact_name,\n        artifact_id,\n        artifact_target,\n        javadoc_srcs,\n        packaging = \"jar\",\n        artifact_target_libs = [],\n        optional_artifact_target_libs = [],\n        is_extension = False):\n    \"\"\"Generates files required for a maven artifact.\n\n    Args:\n        name: The name associated with various output\n        artifact_name: The name of the generated artifcat in maven, e.g. \"Google Guice Core Library\".\n        artifact_id: The id of the generated artifact in maven, e.g. \"guice\".\n        artifact_target: The target containing the actual maven target.\n        artifact_target_libs: The list of dependencies that should be packaged together with artifact_target,\n            corresponding to the list of targets exported by artifact_target.\n        optional_artifact_target_libs: The list of labels that are allowed to be\n            omitted from artifact_target_libs. Other than these exceptions, all\n            transitive exports of artifact_target must be included in\n            artifact_target_libs.\n        javadoc_srcs: Source files used to generate the Javadoc maven artifact.\n        packaging: The packaging used for the artifact, default is \"jar\".\n        is_extension: Whether the maven artifact is a Guice extension or not.\n    \"\"\"\n\n    _validate_target_libs_binary(\n        name = name + \"_validate_target_libs\",\n        target = artifact_target,\n        actual_target_libs = artifact_target_libs,\n        optional_target_libs = optional_artifact_target_libs,\n    )\n\n    group_id = \"com.google.inject\"\n    if is_extension:\n        group_id = \"com.google.inject.extensions\"\n\n    # Ideally we would get artifact_target_libs from bazel and remove the need\n    # to pass this in explictly. However, this doesn't seem possible in Starlark.\n    # A more significant refactoring of how we instantiate the rules here, or\n    # extensions to the rule implementation(s), may be necessary.\n    artifact_targets = [artifact_target] + artifact_target_libs\n\n    pom_file(\n        name = \"pom\",\n        # pom_file already scans the transitive deps and exports\n        # so passing artifact_targets instead of artifact_target seems to be\n        # redundant.\n        targets = artifact_targets,\n        preferred_group_ids = [\n            \"com.google.inject\",\n            \"com.google\",\n        ],\n        template_file = \"//:pom-template.xml\",\n        substitutions = {\n            \"{artifact_name}\": artifact_name,\n            \"{artifact_id}\": artifact_id,\n            \"{artifact_group_id}\": group_id,\n            \"{packaging}\": packaging,\n        },\n    )\n\n    if packaging == \"jar\":\n        jarjar_library(\n            name = artifact_id,\n            jars = artifact_targets,\n        )\n\n        jarjar_library(\n            name = artifact_id + \"-src\",\n            jars = [_src_jar(dep) for dep in artifact_targets],\n        )\n\n    if javadoc_srcs:\n        javadoc_library(\n            name = artifact_id + \"-javadoc\",\n            srcs = javadoc_srcs,\n            testonly = 1,\n            # javadoc_library already collects the transitive deps\n            # so passing artifact_targets instead of artifact_target appears to\n            # be redundant\n            deps = artifact_targets,\n        )\n\ndef _src_jar(target):\n    if target.startswith(\":\"):\n        target = Label(\"//\" + native.package_name() + target)\n    else:\n        target = Label(target)\n    return \"//%s:lib%s-src.jar\" % (target.package, target.name)\n"
        },
        {
          "name": "osgi.bzl",
          "type": "blob",
          "size": 1.78515625,
          "content": "\"\"\" Custom rule to generate OSGi Manifest \"\"\"\n\nload(\"@rules_java//java:defs.bzl\", \"JavaInfo\")\n\ndef _osgi_jar_impl(ctx):\n    output = ctx.outputs.osgi_jar.path\n    pom_version = ctx.var.get(\"pom_version\", \"LOCAL-SNAPSHOT\")\n    input_jar = ctx.attr.target[JavaInfo].outputs.jars[0].class_jar\n    classpath_jars = ctx.attr.target[JavaInfo].compilation_info.compilation_classpath\n\n    args = ctx.actions.args()\n    args.add_joined(\"--classpath\", classpath_jars, join_with = \":\")\n    args.add(\"--output_jar\", output)\n    args.add(\"--bundle_version\", pom_version)\n    args.add(\"--bundle_name\", ctx.attr.bundle_name)\n    args.add(\"--symbolic_name\", ctx.attr.symbolic_name)\n    if ctx.attr.fragment:\n        args.add(\"--fragment\")\n    args.add_joined(\"--import_package\", ctx.attr.import_package, join_with = \",\")\n    args.add_joined(\"--export_package\", ctx.attr.export_package, join_with = \",\")\n    args.add(\"--input_jar\", input_jar.path)\n\n    ctx.actions.run(\n        inputs = [input_jar] + classpath_jars.to_list(),\n        executable = ctx.executable._osgi_wrapper_exe,\n        arguments = [args],\n        outputs = [ctx.outputs.osgi_jar],\n        progress_message = \"Generating OSGi bundle Manifest for %s\" % ctx.attr.target.label,\n    )\n\nosgi_jar = rule(\n    attrs = {\n        \"target\": attr.label(),\n        \"export_package\": attr.string_list(),\n        \"import_package\": attr.string_list(),\n        \"bundle_name\": attr.string(),\n        \"fragment\": attr.bool(),\n        \"symbolic_name\": attr.string(),\n        \"_osgi_wrapper_exe\": attr.label(\n            executable = True,\n            cfg = \"exec\",\n            allow_files = True,\n            default = Label(\"//tools:osgi_wrapper\"),\n        ),\n    },\n    fragments = [\"java\"],\n    outputs = {\n        \"osgi_jar\": \"lib%{name}.jar\",\n    },\n    implementation = _osgi_jar_impl,\n)\n"
        },
        {
          "name": "pom-template.xml",
          "type": "blob",
          "size": 2.9638671875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\nCopyright (c) 2022 Google, Inc. All rights reserved.\n\nThis program is licensed to you under the Apache License Version 2.0,\nand you may not use this file except in compliance with the Apache License Version 2.0.\nYou may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the Apache License Version 2.0 is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the Apache License Version 2.0 for the specific language governing permissions and limitations there under.\n-->\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\n  <modelVersion>4.0.0</modelVersion>\n\n  <parent>\n    <groupId>org.sonatype.oss</groupId>\n    <artifactId>oss-parent</artifactId>\n    <version>7</version>\n  </parent>\n\n  <name>{artifact_name}</name>\n  <groupId>{artifact_group_id}</groupId>\n  <artifactId>{artifact_id}</artifactId>\n  <version>{pom_version}</version>\n  <packaging>{packaging}</packaging>\n\n\n  <description>\n    Guice is a lightweight dependency injection framework for Java 8 and above\n  </description>\n\n  <url>https://github.com/google/guice</url>\n  <inceptionYear>2006</inceptionYear>\n\n  <organization>\n    <name>Google, Inc.</name>\n    <url>http://www.google.com</url>\n  </organization>\n\n  <mailingLists>\n    <mailingList>\n      <name>Guice Users List</name>\n      <archive>http://groups.google.com/group/google-guice/topics</archive>\n      <subscribe>http://groups.google.com/group/google-guice/subscribe</subscribe>\n      <unsubscribe>http://groups.google.com/group/google-guice/subscribe</unsubscribe>\n      <post>http://groups.google.com/group/google-guice/post</post>\n    </mailingList>\n    <mailingList>\n      <name>Guice Developers List</name>\n      <archive>http://groups.google.com/group/google-guice-dev/topics</archive>\n      <subscribe>http://groups.google.com/group/google-guice-dev/subscribe</subscribe>\n      <unsubscribe>http://groups.google.com/group/google-guice-dev/subscribe</unsubscribe>\n      <post>http://groups.google.com/group/google-guice-dev/post</post>\n    </mailingList>\n  </mailingLists>\n\n  <scm>\n    <connection>scm:git:git://github.com/google/guice.git</connection>\n    <developerConnection>scm:git:ssh://git@github.com/google/guice.git</developerConnection>\n    <url>https://github.com/google/guice</url>\n  </scm>\n\n  <issueManagement>\n    <system>Github</system>\n    <url>https://github.com/google/guice/issues/</url>\n  </issueManagement>\n\n  <licenses>\n    <license>\n      <name>The Apache Software License, Version 2.0</name>\n      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n      <distribution>repo</distribution>\n    </license>\n  </licenses>\n  <dependencies>\n    {generated_bzl_deps}\n  </dependencies>\n</project>"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 16.7685546875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\nCopyright (c) 2006 Google, Inc. All rights reserved.\n\nThis program is licensed to you under the Apache License Version 2.0,\nand you may not use this file except in compliance with the Apache License Version 2.0.\nYou may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the Apache License Version 2.0 is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the Apache License Version 2.0 for the specific language governing permissions and limitations there under.\n-->\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\n  <modelVersion>4.0.0</modelVersion>\n\n  <parent>\n    <groupId>com.google</groupId>\n    <artifactId>google</artifactId>\n    <version>5</version>\n  </parent>\n\n  <packaging>pom</packaging>\n\n  <groupId>com.google.inject</groupId>\n  <artifactId>guice-parent</artifactId>\n  <version>7.0.1-SNAPSHOT</version>\n\n  <name>Google Guice</name>\n\n  <description>\n    Guice is a lightweight dependency injection framework for Java 11 and above\n  </description>\n\n  <url>https://github.com/google/guice</url>\n  <inceptionYear>2006</inceptionYear>\n\n  <organization>\n    <name>Google, Inc.</name>\n    <url>http://www.google.com</url>\n  </organization>\n\n  <mailingLists>\n    <mailingList>\n      <name>Guice Users List</name>\n      <archive>http://groups.google.com/group/google-guice/topics</archive>\n      <subscribe>http://groups.google.com/group/google-guice/subscribe</subscribe>\n      <unsubscribe>http://groups.google.com/group/google-guice/subscribe</unsubscribe>\n      <post>http://groups.google.com/group/google-guice/post</post>\n    </mailingList>\n  </mailingLists>\n\n  <scm>\n    <connection>scm:git:git://github.com/google/guice.git</connection>\n    <developerConnection>scm:git:ssh://git@github.com/google/guice.git</developerConnection>\n    <url>https://github.com/google/guice</url>\n  </scm>\n\n  <issueManagement>\n    <system>Github</system>\n    <url>https://github.com/google/guice/issues/</url>\n  </issueManagement>\n\n  <ciManagement>\n    <system>GitHub Actions</system>\n    <url>https://github.com/google/guice/actions</url>\n  </ciManagement>\n\n  <licenses>\n    <license>\n      <name>The Apache Software License, Version 2.0</name>\n      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n      <distribution>repo</distribution>\n    </license>\n  </licenses>\n\n  <distributionManagement>\n    <!-- override the parent's directory to point to the canonical place, and use https. -->\n    <repository>\n      <id>google-releases</id>\n      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n    </repository>\n    <snapshotRepository>\n      <id>google-snapshots</id>\n      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n    </snapshotRepository>\n  </distributionManagement>\n\n  <modules>\n    <module>bom</module>\n    <module>core</module>\n    <module>extensions</module>\n  </modules>\n\n  <prerequisites>\n    <maven>3.0</maven>\n  </prerequisites>\n\n  <properties>\n    <!--\n     | The spec version of the public Guice API\n    -->\n    <guice.api.version>1.4</guice.api.version>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <!--\n     | Use \"-Dguice.with.jarjar=false\" to build without jarjar\n    -->\n    <guice.with.jarjar>true</guice.with.jarjar>\n    <!--\n     | The last stable release version id, used for generating API diffs between released versions\n    -->\n    <guice.lastStableRelease>7.0.0</guice.lastStableRelease>\n    <guice.skipTests>false</guice.skipTests>\n    <gpg.skip>true</gpg.skip>\n  </properties>\n\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>jakarta.inject</groupId>\n        <artifactId>jakarta.inject-api</artifactId>\n        <version>2.0.1</version>\n      </dependency>\n      <dependency>\n        <groupId>jakarta.inject</groupId>\n        <artifactId>jakarta.inject-tck</artifactId>\n        <version>2.0.1</version>\n      </dependency>\n      <dependency>\n        <groupId>aopalliance</groupId>\n        <artifactId>aopalliance</artifactId>\n        <version>1.0</version>\n      </dependency>\n      <dependency>\n        <groupId>com.google.errorprone</groupId>\n        <artifactId>error_prone_annotations</artifactId>\n        <version>2.18.0</version>\n      </dependency>\n      <dependency>\n        <groupId>com.google.guava</groupId>\n        <artifactId>guava</artifactId>\n        <version>33.0.0-jre</version>\n      </dependency>\n      <dependency>\n        <groupId>com.google.guava</groupId>\n        <artifactId>guava-testlib</artifactId>\n        <version>33.0.0-jre</version>\n      </dependency>\n      <dependency>\n        <groupId>org.ow2.asm</groupId>\n        <artifactId>asm</artifactId>\n        <version>9.5</version>\n      </dependency>\n      <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.13.2</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>com.google.truth</groupId>\n        <artifactId>truth</artifactId>\n        <version>1.4.0</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>com.google.truth.extensions</groupId>\n        <artifactId>truth-java8-extension</artifactId>\n        <version>1.4.0</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>com.google.code.findbugs</groupId>\n        <artifactId>jsr305</artifactId>\n        <version>3.0.1</version>\n        <optional>true</optional>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n    </dependency>\n  </dependencies>\n\n  <build>\n    <!--\n     | Ant-style directories\n    -->\n    <sourceDirectory>${project.basedir}/src</sourceDirectory>\n    <resources>\n      <resource>\n        <filtering>false</filtering>\n        <directory>${project.basedir}/src</directory>\n        <excludes>\n          <exclude>**/*.java</exclude>\n        </excludes>\n      </resource>\n    </resources>\n    <testSourceDirectory>${project.basedir}/test</testSourceDirectory>\n    <testResources>\n      <testResource>\n        <filtering>false</filtering>\n        <directory>${project.basedir}/test</directory>\n        <excludes>\n          <exclude>**/*.java</exclude>\n        </excludes>\n      </testResource>\n    </testResources>\n    <pluginManagement>\n      <plugins>\n        <!--\n         | Use 'mvn license:format -N' at top of project to add missing headers\n        -->\n        <plugin>\n          <groupId>com.mycila</groupId>\n          <artifactId>license-maven-plugin</artifactId>\n          <version>2.6</version>\n          <configuration>\n            <encoding>UTF-8</encoding>\n            <header>${project.basedir}/lib/build/header.txt</header>\n            <headerDefinitions>\n              <headerDefinition>${project.basedir}/lib/build/header-definitions.xml</headerDefinition>\n            </headerDefinitions>\n            <skipExistingHeaders>true</skipExistingHeaders>\n            <aggregate>true</aggregate>\n            <includes>\n              <include>**/*.java</include>\n            </includes>\n            <excludes>\n              <!-- avoid touching munged/lib/test/example code -->\n              <exclude>**/build/**</exclude>\n              <exclude>**/target/**</exclude>\n              <exclude>**/lib/**</exclude>\n              <exclude>**/test/**</exclude>\n              <exclude>**/example*/**</exclude>\n            </excludes>\n            <mapping>\n              <java>JAVADOC_STYLE</java>\n            </mapping>\n          </configuration>\n        </plugin>\n        <!--\n         | Standard LICENSE and NOTICE files\n        -->\n        <plugin>\n          <artifactId>maven-remote-resources-plugin</artifactId>\n          <version>1.5</version>\n          <executions>\n            <execution>\n              <goals>\n                <goal>process</goal>\n              </goals>\n              <configuration>\n                <resourceBundles>\n                  <resourceBundle>org.apache:apache-jar-resource-bundle:1.4</resourceBundle>\n                </resourceBundles>\n              </configuration>\n            </execution>\n          </executions>\n        </plugin>\n        <!--\n         | Make sure we only use Java11 methods\n        -->\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>3.11.0</version>\n          <configuration>\n            <release>11</release>\n            <compilerArgs>\n              <arg>-parameters</arg>\n            </compilerArgs>\n            <testCompilerArgument>-parameters</testCompilerArgument>\n          </configuration>\n        </plugin>\n        <plugin>\n          <artifactId>maven-surefire-plugin</artifactId>\n          <version>2.19.1</version>\n          <configuration>\n            <skipTests>${guice.skipTests}</skipTests>\n            <redirectTestOutputToFile>true</redirectTestOutputToFile>\n            <!--<argLine>-Dguice_include_stack_traces=OFF</argLine>-->\n            <trimStackTrace>false</trimStackTrace>\n          </configuration>\n          <executions>\n            <execution>\n              <id>stack-traces-off</id>\n              <phase>test</phase>\n              <goals><goal>test</goal></goals>\n              <configuration>\n                <argLine>-Dguice_include_stack_traces=OFF</argLine>\n              </configuration>\n            </execution>\n            <execution>\n              <id>default-test</id>\n              <phase>test</phase>\n              <goals><goal>test</goal></goals>\n              <configuration>\n                <argLine>-Dguice_include_stack_traces=ONLY_FOR_DECLARING_SOURCE</argLine>\n              </configuration>\n            </execution>\n          </executions>\n        </plugin>\n        <!--\n         | Shared OSGi manifest configuration\n        -->\n        <plugin>\n          <groupId>org.apache.felix</groupId>\n          <artifactId>maven-bundle-plugin</artifactId>\n          <version>5.1.8</version>\n          <configuration>\n            <instructions>\n              <module>com.google.inject</module>\n              <_include>-${project.basedir}/build.properties</_include>\n              <Bundle-Copyright>Copyright (C) 2006 Google Inc.</Bundle-Copyright>\n              <Bundle-DocURL>https://github.com/google/guice</Bundle-DocURL>\n              <Bundle-Name>${project.artifactId}</Bundle-Name>\n              <Bundle-SymbolicName>$(module)</Bundle-SymbolicName>\n              <Bundle-RequiredExecutionEnvironment>JavaSE-11</Bundle-RequiredExecutionEnvironment>\n              <Import-Package>!com.google.inject.*,!javax.annotation,*</Import-Package>\n              <_exportcontents>!*.internal.*,$(module).*;version=${guice.api.version}</_exportcontents>\n              <_consumer-policy>$(version;==;$(@))</_consumer-policy>\n              <_nouses>true</_nouses>\n              <_removeheaders>\n                Embed-Dependency,Embed-Transitive,\n                Built-By,Tool,Created-By,Build-Jdk,\n                Originally-Created-By,Archiver-Version,\n                Include-Resource,Private-Package,\n                Ignore-Package,Bnd-LastModified\n              </_removeheaders>\n            </instructions>\n          </configuration>\n          <executions>\n            <execution>\n              <phase>prepare-package</phase>\n              <goals>\n                <goal>manifest</goal>\n              </goals>\n            </execution>\n          </executions>\n        </plugin>\n        <!--\n         | Package OSGi manifest in final JAR, also create a JAR of the test classes\n        -->\n        <plugin>\n          <artifactId>maven-jar-plugin</artifactId>\n          <version>2.3.1</version>\n          <configuration>\n            <archive>\n              <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>\n              <!--  Exclude to mirror ant build -->\n          <addMavenDescriptor>false</addMavenDescriptor>\n            </archive>\n          </configuration>\n          <executions>\n            <execution>\n              <phase>package</phase>\n              <goals>\n                <goal>test-jar</goal>\n              </goals>\n            </execution>\n          </executions>\n        </plugin>\n        <plugin>\n          <artifactId>maven-javadoc-plugin</artifactId>\n          <version>3.2.0</version>\n          <configuration>\n            <doclint>html,syntax</doclint>\n            <source>11</source>\n            <author>false</author>\n            <protected>true</protected>\n            <links>\n              <link>http://aopalliance.sourceforge.net/doc/</link>\n              <link>https://guava.dev/releases/snapshot-jre/api/docs/</link>\n              <link>https://tomcat.apache.org/tomcat-5.5-doc/servletapi/</link>\n            </links>\n            <excludePackageNames>com.google.inject.internal:com.google.inject.internal.*</excludePackageNames>\n            <groups>\n              <group>\n                <title>Guice Core</title>\n                <packages>com.google.inject:com.google.inject.util:com.google.inject.spi:com.google.inject.name:com.google.inject.matcher:com.google.inject.binder:com.google.inject.multibindings</packages>\n              </group>\n              <group>\n                <title>Servlet Extension</title>\n                <packages>com.google.inject.servlet</packages>\n              </group>\n              <group>\n                <title>AssistedInject Extension</title>\n                <packages>com.google.inject.assistedinject</packages>\n              </group>\n              <group><title>Dagger Adapter</title>\n                <packages>com.google.inject.daggeradapter</packages>\n              </group>\n              <group><title>ThrowingProviders Extension</title>\n                <packages>com.google.inject.throwingproviders</packages>\n              </group>\n              <group><title>Test Libraries Extension</title>\n                <packages>com.google.inject.testing.*</packages>\n              </group>\n              <group><title>Grapher Extension</title>\n                <packages>com.google.inject.grapher:com.google.inject.grapher.*</packages>\n              </group>\n              <group><title>Persist Extension</title>\n                <packages>com.google.inject.persist:com.google.inject.persist.*</packages>\n              </group>\n              <group><title>Spring Extension</title>\n                <packages>com.google.inject.spring</packages>\n              </group>\n              <!-- struts2 doesn't support jakarta.servlet yet, so we can't release it\n              <group><title>Struts2 Extension</title>\n                <packages>com.google.inject.struts2</packages>\n              </group>\n              -->\n              <group><title>JNDI Extension</title>\n                <packages>com.google.inject.jndi</packages>\n              </group>\n              <group><title>JMX Extension</title>\n                <packages>com.google.inject.tools.jmx</packages>\n              </group>\n            </groups>\n          </configuration>\n          <executions>\n            <execution>\n              <phase>package</phase>\n              <goals>\n                <goal>jar</goal>\n              </goals>\n            </execution>\n          </executions>\n        </plugin>\n        <plugin>\n          <artifactId>maven-source-plugin</artifactId>\n          <version>2.1.2</version>\n          <executions>\n            <execution>\n              <phase>package</phase>\n              <goals>\n                <goal>jar</goal>\n                <goal>test-jar</goal>\n              </goals>\n            </execution>\n          </executions>\n        </plugin>\n        <plugin>\n          <artifactId>maven-release-plugin</artifactId>\n          <version>2.1</version>\n          <configuration>\n            <autoVersionSubmodules>true</autoVersionSubmodules>\n          </configuration>\n        </plugin>\n        <plugin>\n          <artifactId>maven-deploy-plugin</artifactId>\n          <version>2.5</version>\n        </plugin>\n        <plugin>\n          <groupId>org.spf4j</groupId>\n          <artifactId>spf4j-jdiff-maven-plugin</artifactId>\n          <version>8.8.5</version>\n          <configuration>\n            <destDir>${project.reporting.outputDirectory}/api-diffs/${project.artifactId}</destDir>\n            <versionRange>[${guice.lastStableRelease}],[${project.version}]</versionRange>\n          </configuration>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n    <plugins>\n      <!--\n       | Sign artifacts.\n      -->\n      <plugin>\n        <artifactId>maven-gpg-plugin</artifactId>\n        <version>1.4</version>\n        <executions>\n          <execution>\n            <id>sign-artifacts</id>\n            <phase>verify</phase>\n            <goals><goal>sign</goal></goals>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n"
        },
        {
          "name": "test_defs.bzl",
          "type": "blob",
          "size": 3.3203125,
          "content": "# Copyright (C) 2022 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"starlark marcors to generate test suites.\"\"\"\n\nload(\"@rules_java//java:defs.bzl\", \"java_test\")\n\n_TEMPLATE = \"\"\"package {VAR_PACKAGE};\nimport org.junit.runners.Suite;\nimport org.junit.runner.RunWith;\n\n@RunWith(Suite.class)\n@Suite.SuiteClasses({{{VAR_CLASSES}}})\npublic class {VAR_NAME} {{}}\n\"\"\"\n\ndef _impl(ctx):\n    classes = \",\".join(sorted(ctx.attr.test_classes))\n\n    ctx.actions.write(\n        output = ctx.outputs.out,\n        content = _TEMPLATE.format(\n            VAR_PACKAGE = ctx.attr.package_name,\n            VAR_CLASSES = classes,\n            VAR_NAME = ctx.attr.name,\n        ),\n    )\n\n_gen_suite = rule(\n    attrs = {\n        \"test_classes\": attr.string_list(),\n        \"package_name\": attr.string(),\n    },\n    outputs = {\"out\": \"%{name}.java\"},\n    implementation = _impl,\n)\n\ndef guice_test_suites(name, deps, srcs = None, args = [], suffix = \"\", sizes = None, jvm_flags = []):\n    \"\"\"\n    Generates tests for test file in srcs ending in \"Test.java\"\n\n    Args:\n      name: name of the test suite to generate\n      srcs: list of test source files, uses 'glob([\"**/*Test.java\"])' if not specified\n      deps: list of runtime dependencies requried to run the test\n      args: list of flags to pass to the test\n      jvm_flags: list of JVM flags to pass to the test\n      suffix: suffix to apend to the generated test name\n      sizes: not used, exists only so that the opensource guice_test_suites mirror exactly the internal one\n    \"\"\"\n\n    flags = []\n    flags.extend(jvm_flags)\n\n    # transform flags to JVM options used externally\n    for arg in args:\n        if arg.startswith(\"--\"):\n            flags.append(arg.replace(\"--\", \"-D\"))\n        else:\n            flags.append(arg)\n\n    package_name = native.package_name()\n\n    # strip the path prefix from package name so that we get the correct test class name\n    # \"core/test/com/google/inject\" becomes \"com/google/inject\"\n    # \"extensions/service/test/com/google/inject/service\" becomes \"com/google/inject/service\"\n    if package_name.startswith(\"core/test/\") or package_name.startswith(\"extensions/\"):\n        package_name = package_name.rpartition(\"/test/\")[2]\n\n    test_files = srcs or native.glob([\"**/*Test.java\"])\n    test_classes = []\n    for src in test_files:\n        test_name = src.replace(\".java\", \"\")\n        test_classes.append((package_name + \"/\" + test_name + \".class\").replace(\"/\", \".\"))\n\n    suite_name = name + suffix\n    _gen_suite(\n        name = suite_name,\n        test_classes = test_classes,\n        package_name = package_name.replace(\"/\", \".\"),\n    )\n    java_test(\n        name = \"AllTestsSuite\" + suffix,\n        test_class = (package_name + \"/\" + suite_name).replace(\"/\", \".\"),\n        jvm_flags = flags,\n        srcs = [\":\" + suite_name],\n        deps = deps + [\n            \"//third_party/java/junit\",\n        ],\n    )\n"
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}