{
  "metadata": {
    "timestamp": 1736708898483,
    "page": 132,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "amitshekhariitbhu/android-interview-questions",
      "stars": 11558,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.009765625,
          "content": ".DS_Store\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 60.083984375,
          "content": "<p align=\"center\">\n    <img alt=\"Android Interview Questions\" src=\"https://raw.githubusercontent.com/amitshekhariitbhu/android-interview-questions/master/assets/banner-android-interview-questions.jpg\">\n</p>\n\n# Android Interview Questions and Answers\n\n> Android Interview Questions and Answers - Your Cheat Sheet For Android Interview\n\n### Prepared and maintained by [Amit Shekhar](https://github.com/amitshekhariitbhu) - Coder | Teacher | Mentor | Open Source | IIT 2010-14\n\n## About me\n\nHi, I am Amit Shekhar, Co-Founder @ [Outcome School](https://outcomeschool.com) • IIT 2010-14 • I have taught and mentored many developers, and their efforts landed them high-paying tech jobs, helped many tech companies in solving their unique problems, and created many open-source libraries being used by top companies. I am passionate about sharing knowledge through open-source, blogs, and videos.\n\nYou can connect with me on:\n\n- [Twitter](https://twitter.com/amitiitbhu)\n- [YouTube](https://www.youtube.com/@amitshekhar)\n- [LinkedIn](https://www.linkedin.com/in/amit-shekhar-iitbhu)\n- [GitHub](https://github.com/amitshekhariitbhu)\n\n## **Join Outcome School and get high paying tech job: [Outcome School](https://outcomeschool.com)**\n\n## Contents - Android Interview Questions\n\n* [Android Interview Questions and Answers Playlist](#android-interview-questions-and-answers-playlist)\n* [Kotlin Coroutines](#kotlin-coroutines)\n* [Kotlin Flow API](#kotlin-flow-api)\n* [Kotlin](#kotlin)\n* [Android](#android)\n* [Android Libraries](#android-libraries)\n* [Android Architecture](#android-architecture)\n* [Design Pattern](#design-pattern)\n* [Android System Design](#android-system-design) and check [Android System Design Interviews](https://outcomeschool.com/blog/android-system-design-interviews) \n* [Android Unit Testing](#android-unit-testing)\n* [Android Tools And Technologies](#android-tools-and-technologies)\n* [Java](#java)\n* [Jetpack Compose](#jetpack-compose)\n* [Other Topics](#other-topics)\n* [Data Structures and Algorithms](#data-structures-and-algorithms) \n\n### Android Interview Questions and Answers Playlist\n\n- **Question**: What is an inline function in Kotlin?\n    - **Answer**: [What is an inline function in Kotlin?](https://www.youtube.com/watch?v=GLLI8h67ryo)\n- **Question**: What is the advantage of using const in Kotlin?\n    - **Answer**: [What is the advantage of using const in Kotlin?](https://www.youtube.com/watch?v=3G49ivVxfkU)\n- **Question**: What is a reified keyword in Kotlin?\n    - **Answer**: [What is a reified keyword in Kotlin?](https://www.youtube.com/watch?v=kD2T84FnTck)\n- **Question**: Suspending vs Blocking in Kotlin Coroutines\n    - **Answer**: [Suspending vs Blocking in Kotlin Coroutines](https://www.youtube.com/watch?v=V2lL_aJp17I)\n- **Question**: Launch vs Async in Kotlin Coroutines\n    - **Answer**: [Launch vs Async in Kotlin Coroutines](https://www.youtube.com/watch?v=B4AfTPpCU5o)\n- **Question**: internal visibility modifier in Kotlin\n    - **Answer**: [internal visibility modifier in Kotlin](https://www.youtube.com/watch?v=wOHpuf74-cI)\n- **Question**: open keyword in Kotlin\n    - **Answer**: [open keyword in Kotlin](https://www.youtube.com/watch?v=bfpNDWNE6I0)\n- **Question**: lateinit vs lazy in Kotlin\n    - **Answer**: [lateinit vs lazy in Kotlin](https://www.youtube.com/watch?v=IU2ZktdM-fo)\n- **Question**: What is Multidex in Android?\n    - **Answer**: [What is Multidex in Android?](https://www.youtube.com/watch?v=R0zd8lmHnmE)\n- **Question**: How does the Android Push Notification system work?\n    - **Answer**: [How does the Android Push Notification system work?](https://www.youtube.com/watch?v=810IFG2sWlc)\n- **Question**: How does the Kotlin Multiplatform work?\n    - **Answer**: [How does the Kotlin Multiplatform work?](https://www.youtube.com/watch?v=nwfNh6Kd5hI)\n- **Question**: What is a ViewModel and how is it useful?\n    - **Answer**: [What is a ViewModel and how is it useful?](https://www.youtube.com/watch?v=ORtieK5f_zg)\n- **Question**: Is it possible to force the Garbage Collection in Android?\n    - **Answer**: [Is it possible to force Garbage Collection in Android?](https://www.youtube.com/watch?v=fPEjpFKo1-Q)\n- **Question**: What is a JvmStatic Annotation in Kotlin?\n    - **Answer**: [What is a JvmStatic Annotation in Kotlin?](https://www.youtube.com/watch?v=qBBbOhY_pv4)\n- **Question**: init block in Kotlin\n    - **Answer**: [init block in Kotlin](https://www.youtube.com/watch?v=cb3jOFozJns)\n- **Question**: JvmField Annotation in Kotlin\n    - **Answer**: [JvmField Annotation in Kotlin](https://www.youtube.com/watch?v=bx8OZcMbeUE)\n- **Question**: singleTask launchMode in Android\n    - **Answer**: [singleTask launchMode in Android](https://www.youtube.com/watch?v=WYkQEnm4jeI)\n- **Question**: Difference between == and === in Kotlin\n    - **Answer**: [Difference between == and === in Kotlin](https://www.youtube.com/watch?v=lJtgxT2OIgQ)\n- **Question**: JvmOverloads Annotation in Kotlin\n    - **Answer**: [JvmOverloads Annotation in Kotlin](https://www.youtube.com/watch?v=fHGsBV9Za8M)\n- **Question**: Why is it recommended to use only the default constructor to create a Fragment?\n    - **Answer**: [Why is it recommended to use only the default constructor to create a Fragment?](https://www.youtube.com/watch?v=CitBt0FZFIc)\n- **Question**: Why do we need to call setContentView() in onCreate() of Activity class?\n    - **Answer**: [Why do we need to call setContentView() in onCreate() of Activity class?](https://www.youtube.com/watch?v=U1aHAt7XC5I)\n- **Question**: When only onDestroy is called for an activity without onPause() and onStop()?\n    - **Answer**: [When only onDestroy is called for an activity without onPause() and onStop()?](https://www.youtube.com/watch?v=B2kY_ckZa-g)\n\n### Kotlin Coroutines\n\nTopics you should know in **Kotlin Coroutines** for Android Interview:\n\n* coroutines\n* suspend\n* launch, async-await, withContext\n* dispatchers\n* scope, context, job\n* lifecycleScope, viewModelScope, GlobalScope\n* suspendCoroutine, suspendCancellableCoroutine\n* coroutineScope, supervisorScope\n\nLearn the above-mentioned from the following links:\n\n- [Master Kotlin Coroutines](https://outcomeschool.com/blog/kotlin-coroutines)\n- [Suspending vs Blocking in Kotlin Coroutines](https://www.youtube.com/watch?v=V2lL_aJp17I)\n- [Launch vs Async in Kotlin Coroutines](https://www.youtube.com/watch?v=B4AfTPpCU5o)\n- [Dispatchers in Kotlin Coroutines](https://outcomeschool.com/blog/dispatchers-in-kotlin-coroutines)\n- [coroutineScope vs supervisorScope](https://outcomeschool.com/blog/coroutinescope-vs-supervisorscope)\n- [suspend function in Kotlin Coroutines](https://outcomeschool.com/blog/suspend-function-in-kotlin-coroutines)\n- [Kotlin withContext vs Async-await](https://outcomeschool.com/blog/kotlin-withcontext-vs-async-await)\n- [CoroutineContext in Kotlin](https://outcomeschool.com/blog/coroutinecontext-in-kotlin)\n- [Callback to Coroutines in Kotlin](https://outcomeschool.com/blog/callback-to-coroutines-in-kotlin)\n- [Retrofit with Kotlin Coroutines](https://outcomeschool.com/blog/retrofit-with-kotlin-coroutines)\n- [Parallel Multiple Network Calls Using Kotlin Coroutines](https://outcomeschool.com/blog/parallel-multiple-network-calls-using-kotlin-coroutines)\n- [Room Database with Kotlin Coroutines](https://outcomeschool.com/blog/room-database-with-kotlin-coroutines)\n- [Unit Testing ViewModel with Kotlin Coroutines and LiveData](https://outcomeschool.com/blog/unit-testing-viewmodel-with-kotlin-coroutines-and-livedata)\n\n### Kotlin Flow API\n\nTopics you should know in **Kotlin Flow API** for Android Interview:\n\n* Flow Builder, Operator, Collector\n* flowOn, dispatchers\n* Operators such as filter, map, zip, flatMapConcat, retry, debounce, distinctUntilChanged, flatMapLatest\n* Terminal operators\n* Cold Flow vs Hot Flow\n* StateFlow, SharedFlow, callbackFlow, channelFlow\n\nLearn the above-mentioned from the following links:\n\n- [Mastering Flow API in Kotlin](https://outcomeschool.com/blog/flow-api-in-kotlin)\n- [Creating Flow Using Flow Builder in Kotlin](https://outcomeschool.com/blog/creating-flow-using-flow-builder-in-kotlin)\n- [Terminal Operators in Kotlin Flow](https://outcomeschool.com/blog/terminal-operators-in-kotlin-flow)\n- [Cold Flow vs Hot Flow](https://outcomeschool.com/blog/cold-flow-vs-hot-flow)\n- [StateFlow and SharedFlow](https://outcomeschool.com/blog/stateflow-and-sharedflow)\n- [Long-running tasks in parallel with Kotlin Flow](https://outcomeschool.com/blog/long-running-tasks-in-parallel-with-kotlin-flow)\n- [Retry Operator in Kotlin Flow](https://outcomeschool.com/blog/retry-operator-in-kotlin-flow)\n- [Retrofit with Kotlin Flow](https://outcomeschool.com/blog/retrofit-with-kotlin-flow)\n- [Room Database with Kotlin Flow](https://outcomeschool.com/blog/room-database-with-kotlin-flow)\n- [Kotlin Flow Zip Operator for Parallel Multiple Network Calls](https://outcomeschool.com/blog/kotlin-flow-zip-operator-parallel-multiple-network-calls)\n- [Instant Search Using Kotlin Flow Operators](https://outcomeschool.com/blog/instant-search-using-kotlin-flow-operators)\n- [callbackFlow - Callback to Flow API in Kotlin](https://outcomeschool.com/blog/callback-to-flow-api-in-kotlin)\n- [Exception Handling in Kotlin Flow](https://outcomeschool.com/blog/exception-handling-in-kotlin-flow)\n- [Unit Testing ViewModel with Kotlin Flow and StateFlow](https://outcomeschool.com/blog/unit-testing-viewmodel-with-kotlin-flow-and-stateflow)\n\n### Kotlin\n\nAndroid Interview Questions and Answers:\n\n* **What is the advantage of using const in Kotlin?** - [Video](https://www.youtube.com/watch?v=3G49ivVxfkU) and [Blog](https://outcomeschool.com/blog/const-in-kotlin)\n\n* **When to use lateinit keyword used in Kotlin?** - [Learn from here](https://outcomeschool.com/blog/lateinit-vs-lazy-in-kotlin)\n\n* **What is inline function in Kotlin?** - [Video](https://www.youtube.com/watch?v=GLLI8h67ryo) and [Blog](https://outcomeschool.com/blog/inline-function-in-kotlin)\n\n* **What are `companion objects` in Kotlin?** - [Learn from here](https://outcomeschool.com/blog/companion-object-in-kotlin)\n\n* **Extension functions** - [Learn from here](https://outcomeschool.com/blog/extension-function-in-kotlin)\n\n* **What is a data class in Kotlin?** - [Learn from here](https://outcomeschool.com/blog/data-class-in-kotlin)\n\n* **Remove duplicates from an array in Kotlin** - [Learn from here](https://outcomeschool.com/blog/remove-duplicates-from-an-array-in-kotlin)\n\n* **What is a JvmStatic Annotation in Kotlin?** - [Video](https://www.youtube.com/watch?v=qBBbOhY_pv4) and [Blog](https://outcomeschool.com/blog/jvmstatic-annotation-in-kotlin)\n\n* **What is a JvmField Annotation in Kotlin?** - [Video](https://www.youtube.com/watch?v=bx8OZcMbeUE) and [Blog](https://outcomeschool.com/blog/jvmfield-annotation-in-kotlin)\n\n* **What is a JvmOverloads Annotation in Kotlin?** - [Video](https://www.youtube.com/watch?v=fHGsBV9Za8M) and [Blog](https://outcomeschool.com/blog/jvmoverloads-annotation-in-kotlin)\n\n* **noinline in Kotlin** - [Learn from here](https://outcomeschool.com/blog/noinline-in-kotlin)\n\n* **crossinline in Kotlin** - [Learn from here](https://outcomeschool.com/blog/crossinline-in-kotlin)\n\n* **scope functions in Kotlin** - [Learn from here](https://kotlinlang.org/docs/scope-functions.html)\n\n* **What is a reified keyword in Kotlin?** - [Learn from here](https://www.youtube.com/watch?v=kD2T84FnTck)\n\n* **lateinit vs lazy in Kotlin** - [Learn from here](https://outcomeschool.com/blog/lateinit-vs-lazy-in-kotlin)\n\n* **What is an `init` block in Kotlin?** - [Video](https://www.youtube.com/watch?v=cb3jOFozJns) and [Blog](https://outcomeschool.com/blog/init-block-in-kotlin)\n\n* **Difference between == and === in Kotlin** - [Video](https://www.youtube.com/watch?v=lJtgxT2OIgQ) and [Blog](https://outcomeschool.com/blog/structural-and-referential-equality-in-kotlin)\n\n* **Advantage of using const in Kotlin** - [Learn from here](https://www.youtube.com/watch?v=3G49ivVxfkU)\n\n* **What are higher-order functions in Kotlin?** - Learn from here: [Higher-Order Functions and Lambdas in Kotlin](https://outcomeschool.com/blog/higher-order-functions-and-lambdas-in-kotlin)\n\n* **Write a function(Higher-Order Function) that returns a function.** - [Check solution here](https://x.com/amitiitbhu/status/1862721662208155800)\n\n* **What are Lambdas in Kotlin** - Learn from here: [Higher-Order Functions and Lambdas in Kotlin](https://outcomeschool.com/blog/higher-order-functions-and-lambdas-in-kotlin)\n\n* **AssociateBy - List to Map in Kotlin** - [Learn from here](https://outcomeschool.com/blog/associateby-list-to-map-in-kotlin)\n\n* **Open keyword in Kotlin** - [Learn from here](https://outcomeschool.com/blog/open-keyword-in-kotlin)\n\n* **Companion object in Kotlin** - [Learn from here](https://outcomeschool.com/blog/companion-object-in-kotlin)\n\n* **internal visibility modifier in Kotlin** - [Learn from here](https://youtu.be/wOHpuf74-cI)\n\n* **partition - filtering function in Kotlin** - [Learn from here](https://outcomeschool.com/blog/partition-filtering-function-in-kotlin)\n\n* **Infix notation in Kotlin** - [Learn from here](https://outcomeschool.com/blog/infix-notation-in-kotlin)\n\n* **How does the Kotlin Multiplatform work?** - [Learn from here](https://youtu.be/nwfNh6Kd5hI)\n\n* **Suspending vs Blocking in Kotlin Coroutines** - [Learn from here](https://www.youtube.com/watch?v=V2lL_aJp17I)\n\n* **What is runBlocking in Coroutines?** - [Learn from here](https://x.com/outcome_school/status/1861455930061156797)\n\n* **What is the meaning of structured concurrency in Kotlin Coroutines?** - [Learn from here](https://www.linkedin.com/posts/outcomeschool_softwareengineer-androiddev-android-activity-7267476661967683584-wDCh/)\n\n* **String vs StringBuffer vs StringBuilder** - [Learn from here](https://outcomeschool.com/blog/string-vs-stringbuffer-vs-stringbuilder)\n\n* **What is the difference between `val` and `var`?** - [Learn from here](https://stackoverflow.com/questions/44200075/val-and-var-in-kotlin)\n\n* **How to check if a `lateinit` variable has been initialized?** - [Learn from here](https://outcomeschool.com/blog/lateinit-vs-lazy-in-kotlin)\n\n* **How to do lazy initialization of variables in Kotlin?** - [Learn from here](https://outcomeschool.com/blog/lateinit-vs-lazy-in-kotlin)\n\n* **What are the visibility modifiers in Kotlin?** - [Learn from here](https://kotlinlang.org/docs/visibility-modifiers.html)\n\n* **What is the equivalent of Java static methods in Kotlin?** - [Learn from here](https://stackoverflow.com/questions/40352684/what-is-the-equivalent-of-java-static-methods-in-kotlin)\n\n* **How to create a Singleton class in Kotlin?** - [Learn from here](https://stackoverflow.com/questions/51834996/singleton-class-in-kotlin)\n\n* **What is the difference between `open` and `public` in Kotlin?** - [Learn from here](https://outcomeschool.com/blog/open-keyword-in-kotlin)\n\n* **Explain the use-case of `let`, `run`, `with`, `also`, `apply` in Kotlin.** - Learn from [here](https://kotlinlang.org/docs/scope-functions.html) and [here](https://stackoverflow.com/questions/45977011/example-of-when-should-we-use-run-let-apply-also-and-with-on-kotlin)\n\n* **How to choose between `apply` and `with`?** - Learn from [here](https://kotlinlang.org/docs/scope-functions.html) and [here](https://stackoverflow.com/questions/45977011/example-of-when-should-we-use-run-let-apply-also-and-with-on-kotlin)\n\n* **Difference between List and Array types in Kotlin** - [Learn from here](https://stackoverflow.com/questions/36262305/difference-between-list-and-array-types-in-kotlin)\n\n* **What are `Labels` in Kotlin?** - [Learn from here](https://kotlinlang.org/docs/returns.html)\n\n* **What are Coroutines in Kotlin?** - [Learn from here](https://outcomeschool.com/blog/kotlin-coroutines)\n\n* **What is Coroutine Scope?** - [Learn from here](https://outcomeschool.com/blog/kotlin-coroutines)\n\n* **Scopes in Kotlin Coroutines Used in Android** - [Learn from here](https://www.linkedin.com/posts/amit-shekhar-iitbhu_softwareengineer-androiddev-android-activity-7278639980053217280-8eZO)\n\n* **What is Coroutine Context?** - [Learn from here](https://outcomeschool.com/blog/coroutinecontext-in-kotlin)\n\n* **Launch vs Async in Kotlin Coroutines** - [Learn from here](https://outcomeschool.com/blog/launch-vs-async-in-kotlin-coroutines)\n\n* **Thread.sleep() vs delay() in Kotlin** - [Learn from here](https://x.com/amitiitbhu/status/1812806101944946962)\n\n* **Explain inline classes in Kotlin** - [Learn from here](https://www.linkedin.com/posts/amit-shekhar-iitbhu_outcomeschool-softwareengineering-tech-activity-7251812269804724224-TR6Y)\n\n* **When to use Kotlin sealed classes?** - [Learn from here](https://kotlinlang.org/docs/sealed-classes.html)\n\n* **Tell about the Collections in Kotlin** - [Learn from here](https://kotlinlang.org/docs/collections-overview.html)\n\n* **What does ?: do in Kotlin? (Elvis Operator)** - [Learn from here](https://www.linkedin.com/posts/amit-shekhar-iitbhu_softwareengineer-androiddev-android-activity-7269313270669295618-g6kJ)\n\n* **timeouts in Kotlin Coroutines** - [Learn from here](https://www.linkedin.com/posts/outcomeschool_softwareengineer-androiddev-android-activity-7265684677770846208-Ug0Y)\n\n* **How do you combine multiple coroutine results?** - [Learn from here](https://www.linkedin.com/posts/outcomeschool_softwareengineer-androiddev-android-activity-7267827335393873920-v6t3)\n\n* **What is a Job in Coroutines?** - [Learn from here](https://www.linkedin.com/posts/amit-shekhar-iitbhu_softwareengineer-androiddev-android-activity-7268842850140721153-vw9E)\n\n### Android\n\nAndroid Interview Questions and Answers:\n\n#### Base\n\n* **Why does an Android App lag?** - [Learn from here](https://outcomeschool.com/blog/android-app-lag)\n\n* **What is `Context`? How is it used?** - [Context In Android Application](https://outcomeschool.com/blog/context-in-android-application)\n\n* **Tell all the Android application components.** - [Learn from here](https://developer.android.com/guide/components/fundamentals.html#Components)\n\n* **What is the project structure of an Android Application?** - [Learn from here](https://developer.android.com/studio/projects)\n\n* **What is `AndroidManifest.xml`?** - [Learn from here](https://developer.android.com/guide/topics/manifest/manifest-intro)\n\n* **What is the `Application` class?**\n    - The Application class in Android is the base class within an Android app that contains all other components such as activities and services. The Application class, or any subclass of the Application class, is instantiated before any other class when the process for your application/package is created.\n\n#### Activity and Fragment\n\n* **Why is it recommended to use only the default constructor to create a `Fragment`?** - Learn from [video](https://www.youtube.com/watch?v=CitBt0FZFIc) and [blog](https://outcomeschool.com/blog/default-constructor-to-create-a-fragment)\n\n* **What is `Activity` and its lifecycle?** - [Learn from here](https://developer.android.com/guide/components/activities/activity-lifecycle)\n\n* **What is the difference between onCreate() and onStart()** - [Learn from here](https://developer.android.com/guide/components/activities/activity-lifecycle)\n\n* **When only onDestroy is called for an activity without onPause() and onStop()?** - [Learn from here](https://www.youtube.com/watch?v=B2kY_ckZa-g)\n\n* **Why do we need to call setContentView() in onCreate() of Activity class?** - [Learn from here](https://www.youtube.com/watch?v=U1aHAt7XC5I)\n\n* **What is onSaveInstanceState() and onRestoreInstanceState() in activity?**\n    - onSaveInstanceState() - This method is used to store data before pausing the activity.\n    - onRestoreInstanceState() - This method is used to recover the saved state of an activity when the activity is recreated after destruction. So, the onRestoreInstanceState() receives the bundle that contains the instance state information.\n\n* **What is `Fragment` and its lifecycle?** - [Learn from here](https://developer.android.com/guide/fragments/lifecycle)\n\n* **What are \"launchMode\"?** - [Learn from here](https://outcomeschool.com/blog/singletask-launchmode-in-android) and [singleTask launchMode in Android](https://youtu.be/WYkQEnm4jeI)\n\n* **What is the difference between a `Fragment` and an `Activity`? Explain the relationship between the two.** - [Learn from here](https://stackoverflow.com/questions/10478233/why-fragments-and-when-to-use-fragments-instead-of-activities)\n\n* **When should you use a Fragment rather than an Activity?**\n    - When you have some UI components to be used across various activities\n    - When multiple views can be displayed side by side just like ViewPager\n\n* **What is the difference between FragmentPagerAdapter vs FragmentStatePagerAdapter?**\n    - FragmentPagerAdapter: Each fragment visited by the user will be stored in the memory but the view will be destroyed. When the page is revisited, then the view will be created not the instance of the fragment.\n    - FragmentStatePagerAdapter: Here, the fragment instance will be destroyed when it is not visible to the user, except the saved state of the fragment.\n\n* **What is the difference between adding/replacing fragment in backstack?** - [Learn from here](https://stackoverflow.com/questions/24466302/basic-difference-between-add-and-replace-method-of-fragment/24466345)\n\n* **How would you communicate between two Fragments?**\n\n* **What is retained `Fragment`?** - [Learn from here](https://www.linkedin.com/posts/outcomeschool_softwareengineer-androiddev-android-activity-7265620144289193984-hlpH)\n\n* **What is the purpose of `addToBackStack()` while commiting fragment transaction?**\n    - By calling addToBackStack(), the replace transaction is saved to the back stack so the user can reverse the transaction and bring back the previous fragment by pressing the Back button. For more [Learn from here](https://stackoverflow.com/questions/22984950/what-is-the-meaning-of-addtobackstack-with-null-parameter)\n\n#### Views and ViewGroups\n\n* **Optimizing layouts in Android** - [Learn from here](https://www.linkedin.com/posts/amit-shekhar-iitbhu_softwareengineer-androiddev-android-activity-7269208182390951936-dAg3)\n\n* **What is `View` in Android?**\n\n* **Difference between `View.GONE` and `View.INVISIBLE`?** - [Learn from here](https://stackoverflow.com/questions/11556607/android-difference-between-invisible-and-gone)\n\n* **Can you a create custom view? How?**\n\n* **What are ViewGroups and how they are different from the Views?**\n    - View: View objects are the basic building blocks of User Interface(UI) elements in Android. View is a simple rectangle box which responds to the user’s actions. Examples are EditText, Button, CheckBox etc. View refers to the android.view.View class, which is the base class of all UI classes.\n    - ViewGroup: ViewGroup is the invisible container. It holds View and ViewGroup. For example, LinearLayout is the ViewGroup that contains Button(View), and other Layouts also. ViewGroup is the base class for Layouts.\n\n* **What is a Canvas?**\n\n* **What is a `SurfaceView`?** - [Learn from here](https://developer.android.com/reference/android/view/SurfaceView)\n\n* **Relative Layout vs Linear Layout.**\n\n* **Tell about Constraint Layout**\n\n* **Do you know what is the view tree? How can you optimize its depth?** - [Learn from here](https://developer.android.com/reference/android/view/ViewTreeObserver)\n\n#### Displaying Lists of Content\n\n* **What is the difference between `ListView` and `RecyclerView`?** - [Learn from here](https://stackoverflow.com/questions/26728651/recyclerview-vs-listview)\n\n* **How does the RecyclerView work?** - [Learn from here](https://www.linkedin.com/posts/outcomeschool_softwareengineer-androiddev-android-activity-7268187299811606528-u2_w)\n\n* **RecyclerView Optimization - Scrolling Performance Improvement** - [Learn from here](https://outcomeschool.com/blog/recyclerview-optimization)\n\n* **Optimizing Nested RecyclerView** - [Learn from here](https://outcomeschool.com/blog/setrecycledviewpool-for-optimizing-nested-recyclerview)\n\n* **How does RecyclerView improve performance over ListView?**\n\n* **What are the components of a RecyclerView?**\n\n* **Explain the role of RecyclerView.Adapter and RecyclerView.ViewHolder** - [Learn from here](https://www.linkedin.com/posts/outcomeschool_softwareengineer-androiddev-android-activity-7274733205927182337-hvTG)\n\n* **What is a LayoutManager in RecyclerView?**\n\n* **How do you handle multiple view types in a single RecyclerView?**\n\n* **What is DiffUtil and how does it improve RecyclerView performance?** - [Learn from here](https://www.linkedin.com/posts/amit-shekhar-iitbhu_softwareengineer-androiddev-android-activity-7279435764973686785-pfiQ)\n\n* **What is the purpose of RecyclerView.setHasFixedSize(true)?** - [Learn from here](https://www.linkedin.com/posts/amit-shekhar-iitbhu_softwareengineer-androiddev-android-activity-7282252857637007361-thzv/)\n\n* **How do you update a specific item in RecyclerView?**\n\n* **What is `SnapHelper`?** - Learn from here: [SnapHelper](https://outcomeschool.com/blog/snaphelper)\n\n#### Dialogs and Toasts\n\n* **What is `Dialog` in Android?** - [Learn from here](https://developer.android.com/guide/topics/ui/dialogs)\n\n* **What is `Toast` in Android?** - [Learn from here](https://developer.android.com/guide/topics/ui/notifiers/toasts)\n\n* **What the difference between `Dialog` and `Dialog Fragment`?** - [Learn from here](https://stackoverflow.com/questions/7977392/android-dialogfragment-vs-dialog)\n\n#### Intents and Broadcasting\n\n* **What is `Intent`?** - [Learn from here](https://developer.android.com/guide/components/intents-filters)\n\n* **What is an Implicit `Intent`?** - [Learn from here](https://developer.android.com/guide/components/intents-filters)\n        \n* **What is an Explicit `Intent`?** - [Learn from here](https://developer.android.com/guide/components/intents-filters)\n\n* **What is a `BroadcastReceiver`?** - [Learn from here](https://developer.android.com/guide/components/broadcasts)\n\n* **What is a Sticky `Intent`?**\n    - Sticky Intents allows communication between a function and a service. sendStickyBroadcast() performs a sendBroadcast(Intent) known as sticky, i.e. the Intent you are sending stays around after the broadcast is complete, so that others can quickly retrieve that data through the return value of registerReceiver(BroadcastReceiver, IntentFilter). For example, if you take an intent for ACTION_BATTERY_CHANGED to get battery change events: When you call registerReceiver() for that action — even with a null BroadcastReceiver — you get the Intent that was last Broadcast for that action. Hence, you can use this to find the state of the battery without necessarily registering for all future state changes in the battery.\n\n* **Describe how broadcasts and intents work to be able to pass messages around your app?** - [Learn from here](https://stackoverflow.com/questions/7276537/using-a-broadcast-intent-broadcast-receiver-to-send-messages-from-a-service-to-a)\n\n* **What is a `PendingIntent`?**\n    - If you want someone to perform any Intent operation at future point of time on behalf of you, then we will use Pending Intent.\n\n* **What are the different types of Broadcasts?** - [Learn from here](https://developer.android.com/guide/components/broadcasts)\n\n#### Services\n\n* **Explain Android Service Lifecycle** - [Learn from here](https://www.linkedin.com/posts/amit-shekhar-iitbhu_softwareengineer-androiddev-android-activity-7265212180570992640-CJn_)\n\n* **What is Service?** - [Learn from here](https://developer.android.com/guide/components/services)\n\n* **On which thread does a Service run in Android?** - [Learn from here](https://www.linkedin.com/posts/amit-shekhar-iitbhu_softwareengineer-androiddev-android-activity-7283717741130215424-Vn39)\n\n* **Service vs IntentService** - [Learn from here](https://stackoverflow.com/questions/15524280/service-vs-intentservice-in-the-android-platform)\n\n* **What is a Foreground Service?** - [Learn from here](https://developer.android.com/develop/background-work/services/foreground-services)\n\n* **What is a `JobScheduler`?** - [Learn from here](https://developer.android.com/reference/android/app/job/JobScheduler)\n\n#### Inter-process Communication\n\n* **How can two distinct Android apps interact?** - [Learn from here](https://developer.android.com/training/basics/intents)\n\n* **Is it possible to run an Android app in multiple processes? How?** - [Learn from here](https://stackoverflow.com/questions/6567768/how-can-an-android-application-have-more-than-one-process)\n\n* **What is AIDL? Enumerate the steps in creating a bounded service through AIDL.** - [Learn from here](https://developer.android.com/guide/components/aidl)\n\n* **What can you use for background processing in Android?** - [Learn from here](https://developer.android.com/guide/background)\n\n* **What is a `ContentProvider` and what is it typically used for?** - [Learn from here](https://www.linkedin.com/posts/outcomeschool_softwareengineer-androiddev-android-activity-7268117553040764931-64fI)\n\n#### Long-running Operations\n\n* **How to run parallel tasks and get a callback when all are complete?** - [Long-running tasks in parallel with Kotlin Flow](https://outcomeschool.com/blog/long-running-tasks-in-parallel-with-kotlin-flow)\n\n* **What is ANR? How can the ANR be prevented?** - [Learn from here](https://developer.android.com/topic/performance/vitals/anr.html)\n\n* **What is an `AsyncTask`(Deprecated in API level 30) ?**\n\n* **What are the problems in AsyncTask?**\n\n* **Daemon Threads vs. User Threads** - [Learn from here](https://x.com/amitiitbhu/status/1817783254885478872)\n\n* **Explain `Looper`, `Handler`, and `HandlerThread`.**\n\n* **Android Memory Leak and Garbage Collection**\n\n* **Can you explain the difference between a Runnable and a Thread in Android?** - [Learn from here](https://www.linkedin.com/posts/outcomeschool_softwareengineer-androiddev-android-activity-7279784055284420609-Xa8b)\n\n#### Working With Multimedia Content\n\n* **How do you handle bitmaps in Android as it takes too much memory?** - [Learn from here](https://developer.android.com/topic/performance/graphics/load-bitmap) and [here](https://developer.android.com/topic/performance/graphics/manage-memory)\n\n* **Tell about the `Bitmap` pool.** - [Learn from here](https://outcomeschool.com/blog/bitmap-pool)\n\n#### Data Saving\n\n* **Jetpack DataStore Preferences** - [Learn from here](https://outcomeschool.com/blog/jetpack-datastore-preferences)\n\n* **How to persist data in an Android app?**\n\n* **What is ORM? How does it work?**\n\n* **How would you preserve the `Activity` state during a screen rotation?** - [Learn from here](https://www.youtube.com/watch?v=ORtieK5f_zg)\n\n* **What are different ways to store data in your Android app?**\n\n* **Explain Scoped Storage in Android.**\n\n* **How to encrypt data in Android?**\n\n* **What is commit() and apply() in SharedPreferences?**\n    - commit() returns a boolean value of success or failure immediately by writing data synchronously.\n    - apply() is asynchronous and it won't return any boolean response. If you have an apply() outstanding and you are performing commit(), then the commit() will be blocked until the apply() is not completed.\n\n#### Look and Feel\n\n* **What is a `Spannable`?**\n\n* **What is a `SpannableString`?**\n   - A SpannableString has immutable text, but its span information is mutable. Use a SpannableString when your text doesn't need to be changed but the styling does. Spans are ranges over the text that include styling information like color, heighliting, italics, links, etc\n\n* **What are the best practices for using text in Android?**\n\n* **How to implement Dark mode in any application?**\n\n#### Memory Optimizations\n\n* **What is the `onTrimMemory()` method?** - [Learn from here](https://www.linkedin.com/posts/amit-shekhar-iitbhu_softwareengineer-androiddev-android-activity-7267752779727679488--kk4)\n\n* **How to identify and fix OutOfMemory issues?**\n\n* **How do you find memory leaks in Android applications?**\n\n#### Battery Life Optimizations\n\n* **How to reduce battery usage in an android application?**\n\n* **What is Doze? What about App Standby?** - [Learn from here](https://developer.android.com/training/monitoring-device-state/doze-standby)\n\n* **What is `overdraw`?** - [Learn from here](https://developer.android.com/topic/performance/rendering/overdraw.html)\n\n#### Supporting Different Screen Sizes\n\n* **How do you support different types of resolutions?** - [Learn from here](https://developer.android.com/training/multiscreen/screensizes)\n\n#### Permissions\n\n* **What are the different protection levels in permission?**\n\n#### Native Programming\n\n* **What is the NDK and why is it useful?** - Learn from here: [Android NDK and RenderScript](https://outcomeschool.com/blog/ndk-and-renderscript)\n\n* **What is renderscript?** - Learn from here: [Android NDK and RenderScript](https://outcomeschool.com/blog/ndk-and-renderscript)\n\n#### Android System Internal\n\n* **What is Android Runtime?** - [Android Runtime](https://outcomeschool.com/blog/dalvik-art-jit-aot)\n\n* **Dalvik, ART, JIT, and AOT in Android** - [Dalvik, ART, JIT, and AOT](https://outcomeschool.com/blog/dalvik-art-jit-aot)\n\n* **What are the differences between Dalvik and ART?** - [Difference between Dalvik and ART](https://outcomeschool.com/blog/dalvik-art-jit-aot)\n\n* **What is DEX?** - [Learn from here](https://developer.android.com/reference/dalvik/system/DexFile)\n\n* **What is Multidex in Android?** - [Learn from here](https://www.youtube.com/watch?v=R0zd8lmHnmE)\n\n* **Can you manually call the Garbage collector?** - [Is it possible to force Garbage Collection in Android?](https://www.youtube.com/watch?v=fPEjpFKo1-Q)\n\n#### Android Jetpack\n\n* **What is Android Jetpack and why to use this?**\n\n* **What is a ViewModel and how is it useful?** Learn: [What is a ViewModel and how is it useful?](https://youtu.be/ORtieK5f_zg)\n\n* **SharedViewModel in Android** Learn: [SharedViewModel in Android](https://www.linkedin.com/posts/outcomeschool_outcomeschool-softwareengineering-tech-activity-7262328327531577344-fwSE)\n\n* **What are Android Architecture Components?**\n\n* **What is LiveData in Android?**\n\n* **How LiveData is different from ObservableField?**\n\n* **What is the difference between setValue and postValue in LiveData?** Learn: [setValue() vs postValue() in LiveData](https://www.linkedin.com/posts/outcomeschool_softwareengineer-androiddev-android-activity-7274283452563107840-SXXl)\n\n* **How to share ViewModel between Fragments in Android?** Learn: [SharedViewModel in Android](https://www.linkedin.com/posts/outcomeschool_outcomeschool-softwareengineering-tech-activity-7262328327531577344-fwSE)\n\n* **Explain WorkManager and its use cases.**\n\n* **How does ViewModel work internally?**\n\n#### Others\n\n* **What is the difference between Serializable and Parcelable? Which is the best approach in Android?** - [Learn from here](https://outcomeschool.com/blog/parcelable-vs-serializable)\n\n* **Why Bundle class is used for data passing and why cannot we use simple Map data structure?** - [Learn from here](https://developer.android.com/guide/components/activities/parcelables-and-bundles)\n\n* **How do you troubleshoot a crashing application?** - [Learn from here](https://developer.android.com/topic/performance/vitals/crash)\n\n* **Explain the Android push notification system?** Learn from here: [How does the Android push notification system work?](https://youtu.be/810IFG2sWlc)\n\n* **What is AAPT?** - [Learn from here](https://developer.android.com/studio/command-line/aapt2)\n\n* **FlatBuffers vs JSON.**\n\n* **`HashMap`, `ArrayMap` and `SparseArray`** - [Learn from here](https://outcomeschool.com/blog/optimization-using-arraymap-and-sparsearray)\n\n* **What are Annotations?** - [Learn from here](https://outcomeschool.com/blog/creating-custom-annotations)\n\n* **How to create custom Annotation?** - [Learn from here](https://outcomeschool.com/blog/creating-custom-annotations)\n\n* **What is the Android Support Library? Why was it introduced?** - [Learn from here](https://www.linkedin.com/posts/outcomeschool_androiddev-activity-7275725268680392705-waUi)\n\n* **What is Android Data Binding?**\n\n### Android Libraries\n\nAndroid Interview Questions and Answers:\n\n* **Explain OkHttp Interceptor** - [Learn from here](https://outcomeschool.com/blog/okhttp-interceptor)\n\n* **OkHttp - HTTP Caching** - [Learn from here](https://outcomeschool.com/blog/caching-with-okhttp-interceptor-and-retrofit)\n\n* **How to enable logging in OkHttp?** - [Learn from here](https://www.linkedin.com/posts/outcomeschool_softwareengineer-androiddev-android-activity-7274652524433850368-qC4D)\n\n* **Why do we use the Dependency Injection Framework like Dagger in Android?** - [Learn from here](https://www.linkedin.com/posts/amit-shekhar-iitbhu_androiddev-activity-7038019147737276417-tH4s)\n\n* **How does the Dagger work?**\n\n* **How will you choose between Dagger 2 and Dagger-Hilt?**\n\n* **What is a Component in Dagger?**\n\n* **What is Module in Dagger?**\n\n* **How does the custom scope work in Dagger?**\n\n* **When to call dispose and clear on CompositeDisposable in RxJava?** - [Learn from here](https://outcomeschool.com/blog/dispose-vs-clear-compositedisposable-rxjava)\n\n* **What is Multipart Request in Networking?**\n\n* **What is Flow in Kotlin?** - [Learn from here](https://outcomeschool.com/blog/flow-api-in-kotlin)\n\n* **App Startup Library** - [Learn from here](https://outcomeschool.com/blog/app-startup-library)\n\n* **Tell me something about RxJava.**\n\n* **How will you handle error in RxJava?**\n\n* **FlatMap Vs Map Operator** - [Learn from here](https://outcomeschool.com/blog/rxjava-map-vs-flatmap)\n    \n* **When to use `Create` operator and when to use `fromCallable` operator of RxJava?** - Learn from here: [RxJava Create and fromCallable Operator](https://outcomeschool.com/blog/rxjava-create-and-fromcallable-operator)\n    \n* **When to use `defer` operator of RxJava?** - Learn from here: [RxJava Defer Operator](https://outcomeschool.com/blog/rxjava-defer-operator)\n    \n* **How are Timer, Delay, and Interval operators used in RxJava?** - [Learn from here](https://outcomeschool.com/blog/rxjava-interval-operator)\n\n* **How to make two network calls in parallel using RxJava?** - [RxJava Zip Operator](https://outcomeschool.com/blog/rxjava-zip-operator)\n    \n* **Tell the difference between Concat and Merge.** - [Learn from here](https://outcomeschool.com/blog/rxjava-concat-operator) and [here](https://outcomeschool.com/blog/rxjava-merge-operator)\n\n* **Explain Subject in RxJava?** - [Learn from here](https://outcomeschool.com/blog/rxjava-subject-publish-replay-behavior-async)\n\n* **What are the types of Observables in RxJava?** - Learn from here: [Types Of Observables In RxJava](https://outcomeschool.com/blog/types-of-observables-in-rxjava)\n\n* **How to implement search feature using RxJava in your application?** - Learn from here: [Instant Search Using RxJava Operators](https://outcomeschool.com/blog/instant-search-using-rxjava-operators)\n\n* **Pagination In RecyclerView Using RxJava Operators** - [Learn from here](https://outcomeschool.com/blog/pagination-in-recyclerview-using-rxjava-operators)\n\n* **How The Android Image Loading Library Glide and Fresco Works?** - [Learn from here](https://outcomeschool.com/blog/android-image-loading-library-optimize-memory-usage), [here](https://outcomeschool.com/blog/android-image-loading-library-use-bitmap-pool-for-responsive-ui) and [here](https://outcomeschool.com/blog/android-image-loading-library-solve-the-slow-loading-issue)\n\n* **Difference between Schedulers.io() and Schedulers.computation() in RxJava.**\n\n### Android Architecture\n\nAndroid Interview Questions and Answers:\n\n* **Describe the architecture of your last app.**\n\n* **Describe MVVM.** - [MVVM Architecture](https://outcomeschool.com/blog/mvvm-architecture-android)\n\n* **MVC vs MVP vs MVVM architecture.**\n\n* **Clean Architecture**\n\n* **MVI**\n\n* **Software Architecture vs Software Design** - [Learn from here](https://www.linkedin.com/posts/outcomeschool_outcomeschool-softwareengineering-tech-activity-7230434583584858112-mMEG)\n\n### Design Pattern\n\nAndroid Interview Questions and Answers\n\n* **Builder**\n* **Singleton**\n* **Factory**\n* **Observer**\n* **Repository**\n* **Adapter**\n* **Facade**\n* **Dependency Injection**\n* **Kotlin Optional Parameters vs Builder Pattern** - [Learn from here](https://www.linkedin.com/posts/amit-shekhar-iitbhu_softwareengineer-androiddev-android-activity-7270656113845370881-LDW8)\n\n### Android System Design\n\nAndroid Interview Questions and Answers:\n\nRefer to this blog: [**Android System Design Interviews**](https://outcomeschool.com/blog/android-system-design-interviews) \n\n* **Design an Image Loading Library** - [Learn from here](https://outcomeschool.com/blog/android-image-loading-library-optimize-memory-usage), [here](https://outcomeschool.com/blog/android-image-loading-library-use-bitmap-pool-for-responsive-ui) and [here](https://outcomeschool.com/blog/android-image-loading-library-solve-the-slow-loading-issue)\n\n* **Design File Downloader Library** - [Learn from here](https://github.com/amitshekhariitbhu/PRDownloader)\n\n* **Design WhatsApp**\n\n* **Design Instagram Stories**\n\n* **Design Networking Library**\n\n* **Design Facebook Near-By Friends App**\n\n* **Design Caching Library.**\n\n* **Design problems based on location-based app**\n\n* **How to build an offline-first app? Explain the architecture**\n\n* **Design LRU Cache**\n\n* **Design Analytics Library**\n\n* **HTTP Request vs HTTP Long-Polling vs WebSockets** - [Learn from blog](https://outcomeschool.com/blog/http-request-long-polling-websocket-sse) and [Video - HTTP Request vs HTTP Long-Polling vs WebSocket vs Server-Sent Events](https://www.youtube.com/watch?v=8ksWRX4xV-s)\n\n* **How do Voice And Video Call Work?** - [Learn from here](https://outcomeschool.com/blog/voice-and-video-call)\n\n* **Design Uber App** - [Learn from here](https://github.com/amitshekhariitbhu/ridesharing-uber-lyft-app)\n\n* **Database Normalization vs Denormalization** - [Database Normalization vs Denormalization](https://outcomeschool.com/blog/database-normalization-vs-denormalization)\n\n* **Hash vs Encrypt vs Encode** - [Learn from here](https://www.linkedin.com/posts/pallavi-shekhar_outcomeschool-softwareengineering-activity-7227173077665660929--KD8)\n\n* **Webhook vs Polling** - [Learn from here](https://www.linkedin.com/posts/outcomeschool_softwareengineer-activity-7265962230553223168-fsPx)\n\n### Android Unit Testing\n\nAndroid Interview Questions and Answers:\n\n* **Unit Testing ViewModel with Kotlin Coroutines and LiveData** - [Learn from here](https://outcomeschool.com/blog/unit-testing-viewmodel-with-kotlin-coroutines-and-livedata)\n\n* **Unit Testing ViewModel with Kotlin Flow and StateFlow** - [Learn from here](https://outcomeschool.com/blog/unit-testing-viewmodel-with-kotlin-flow-and-stateflow)\n\n* **What is Espresso?** - [Learn from here](https://developer.android.com/training/testing/espresso/basics)\n\n* **What is Robolectric?** - [Learn from here](http://robolectric.org/)\n\n* **What are the disadvantages of using Robolectric?** - [Learn from here](https://stackoverflow.com/questions/18271474/robolectric-vs-android-test-framework) \n\n* **What is UI-Automator?** - [Learn from here](https://developer.android.com/training/testing/ui-testing/uiautomator-testing.html)\n\n* **Explain the unit test.** - [Learn from here](https://developer.android.com/training/testing/unit-testing/local-unit-tests)\n\n* **Explain instrumented test.** - [Learn from here](https://developer.android.com/training/testing/unit-testing/instrumented-unit-tests)\n\n* **Why Mockito is used?** - [Learn from here](http://site.mockito.org/)\n\n* **Describe code coverage.**\n\n### Android Tools And Technologies\n\nAndroid Interview Questions and Answers:\n\n* **What is ADB?** - [Learn from here](https://developer.android.com/studio/command-line/adb)\n\n* **What is the StrictMode?** - Learn from here: [StrictMode](https://outcomeschool.com/blog/strictmode-in-android-development)\n\n* **What is Lint? What is it used for?**\n\n* **Android App Release Checklist For The Production Launch** - Learn from here: [Android App Release Checklist For The Production Launch](https://www.linkedin.com/posts/amit-shekhar-iitbhu_androiddev-android-activity-7275029928692080640-HIhx)\n\n* **Git.**\n\n* **Firebase.** - [Learn from here](https://firebase.google.com/)\n\n* **How to measure method execution time in Android?**\n\n* **Can you access your database of SQLite Database for debugging?** - [Learn from here](https://github.com/amitshekhariitbhu/Android-Debug-Database)\n\n* **What are things that we need to take care while using Proguard?**\n\n* **How to use Android Studio Memory Profiler?**\n\n* **What is Kotlin DSL for Gradle?** - [Learn from here](https://www.linkedin.com/posts/amit-shekhar-iitbhu_softwareengineer-androiddev-android-activity-7282624364695404546-BvbS)\n\n* **What is Gradle?**\n\n* **How do you create a custom task in Gradle?** - [Learn from here](https://www.linkedin.com/posts/amit-shekhar-iitbhu_softwareengineer-androiddev-android-activity-7282991795133685760-uUxE/)\n\n* **APK Size Reduction.**\n\n* **How can you speed up the Gradle build?**\n\n* **About gradle build system.**\n\n* **About multiple apk for android application.**\n\n* **What is ProGuard used for?** - [Learn from here](https://www.linkedin.com/posts/amit-shekhar-iitbhu_outcomeschool-activity-7218840466283220993-afVr)\n\n* **What is obfuscation? What is it used for? What about minification?**\n\n* **How to change some parameters in an app without app update?**\n\n* **What is Write-Ahead Logging (WAL) and why it is used internally in databases?** - [Learn from here](https://outcomeschool.com/blog/write-ahead-logging)\n\n### Java\n\nAndroid Interview Questions and Answers:\n\n#### OOP\n\n* **Explain OOP Concepts.**\n\n* **Differences between abstract classes and interfaces?** \n    - An abstract class, is a class that contains both concrete and abstract methods \n    (methods without implementations). An abstract method must be implemented by the abstract class\n     sub-classes. Abstract classes cannot be instantiated and need to be extended to be used.\n    - An interface is like a blueprint/contract of a class (or it may be thought of as a class with methods, but without their implementation). It contains empty methods that \n    represent, what all of its subclasses should have in common. The subclasses provide the \n    implementation for each of these methods. Interfaces are implemented.\n\n* **Difference between method overloading and overriding.**\n\n* **What are the access modifiers you know? What does each one do?**\n   - There are four access modifiers in Java language (from strictest to the most lenient):\n        1. `private` *variables*, *methods*, *constructors* or *inner classes* are only visible to its' containing class and its' methods. This modifier is most commonly used, for example, to allow variable access only through getters and setters or to hide underlying implementation of classes that should not be used by user and therefore maintain encapsulation. Singleton constructor is also marked `private` to avoid unwanted instantiation from outside.\n        2. `Default` (no keyword is used) this modifier can be applied to *classes*, *variables*, *constructors* and *methods* and allows access from classes and methods inside the same package.\n        3. `protected` can be used on *variables*, *methods* and *constructors* therefore allowing access only to subclasses and classes that are inside the same package as protected members' class.\n        4. `public` modifier is widely-used on *classes*, *variables*, *constructors* and *methods* to grant access from any class and method anywhere. It should not be used everywhere as it implies that data marked with `public` is not sensitive and can not be used to harm the program.\n\n* **Can an Interface implement another Interface?**\n  - Yes, an interface can implement another interface (and more than one), but it needs to use `extends`, rather than `implements` keyword. And while you can not remove methods from parent interface, you can add new ones freely to your sub-interface.\n\n* **What is Polymorphism? What about Inheritance?**\n\n#### Collections and Generics\n\n* **Arrays Vs ArrayLists** - [Learn from here](https://stackoverflow.com/questions/32020000/what-is-the-difference-between-an-array-arraylist-and-a-list/32020072)\n\n* **HashSet Vs TreeSet** - [Learn from here](https://stackoverflow.com/questions/25602382/java-hashset-vs-treeset-when-should-i-use-over-other)\n\n* **HashMap Vs Set** - [Learn from here](https://stackoverflow.com/questions/2773824/difference-between-hashset-and-hashmap)\n\n* **Explain Generics in Java?**\n\n#### Objects and Primitives\n\n* **How is `String` class implemented? Why was it made immutable?**\n  - There is no primitive variant of `String` class in Java language - all strings are just wrappers around underlying array of characters, which is declared `final`. This means that, once a `String` object is instantiated, it cannot be changed through normal tools of the language (Reflection still can mess things up horribly, because in Java no object is truly immutable). This is why `String` variables in classes are the first candidates to be used, when you want to override `hashCode()` and `equals()` of your class - you can be sure, that all their required contracts will be satisfied.\n    > Note: The String class is immutable, so that once it is created a String object cannot be changed. The String class  has a number of methods, some of which will be discussed below, that appear to modify strings. Since strings are  immutable, what these methods really do is create and return a new string that contains the result of the operation. ([Official Java Documentation](https://docs.oracle.com/javase/tutorial/java/data/strings.html))\n\n    This class is also unique in a sense, that, when you create an instance like this:\n    ```java\n    String helloWorld = \"Hello, World!\";\n    ```\n    `\"Hello, World!\"` is called a *literal* and compiler creates a `String` object with its' value. So\n    ```java\n    String capital = \"Hello, World!\".toUpperCase();\n    ```\n    is a valid statement, that, firstly, will create an object with literal value \"Hello, World!\" and then will create and return another object with value \"HELLO, WORLD!\"\n  - `String` was made immutable to prevent malicious manipulation of data, when, for example, user login or other sensitive data is being send to a server.\n\n* **What does it means to say that a `String` is immutable?**\n    - It means that once created, `String` object's `char[]` (its' containing value) is declared `final` and, therefore, it can not be changed during runtime.\n\n* **Can you list 8 primitive types in java?**\n    - `byte`\n    - `short`\n    - `int`\n    - `long`\n    - `float`\n    - `double`\n    - `char`\n    - `boolean`\n\n* **What is the difference between an Integer and int?**\n  - `int` is a primitive data type (with `boolean`, `byte`, `char`, `short`, `long`, `float` and `double`), while `Integer` (with `Boolean`, `Byte`, `Character`, `Short`,`Long`, `Float` and `Double`) is a [wrapper](https://docs.oracle.com/javase/tutorial/java/data/numberclasses.html) class that encapsulates primitive data type, while providing useful methods to perform different tasks with it.\n\n* **Do objects get passed by reference or value in Java? Elaborate on that.**\n\n#### Java Memory Model and Garbage Collector\n\n* **What is garbage collector? How does it work?**\n  - All objects are allocated on the heap area managed by the JVM.\n  As long as an object is being referenced, the JVM considers it alive.\n  Once an object is no longer referenced and therefore is not reachable by the application code,\n  the garbage collector removes it and reclaims the unused memory.\n\n#### Concurrency\n\n* **What does the keyword `synchronized` mean?**\n\n* **What is a `ThreadPoolExecutor`?** - [ThreadPoolExecutor in Android](https://outcomeschool.com/blog/threadpoolexecutor-in-android)\n\n* **What is `volatile` modifier?**\n\n* **Object Level Lock vs Class Level Lock in Java** - [Learn from here](https://x.com/amitiitbhu/status/1818156936413778332)\n\n* **Concurrency vs Parallelism** - [Learn from here](https://www.linkedin.com/posts/pallavi-shekhar_outcomeschool-softwareengineering-activity-7226208648115404801-u8uu)\n\n* **The classes in the atomic package expose a common set of methods: `get`, `set,`, `lazyset`, `compareAndSet`, and `weakCompareAndSet`. Please describe them.**\n\n#### Exceptions\n\n* **How does the `try{}`, `catch{}`, `finally` works?**\n\n* **What is the difference between a `Checked Exception` and an `Un-Checked Exception`?**\n\n#### Others\n\n* **Shallow vs. Deep Copy in Java** - [Learn from here](https://www.linkedin.com/posts/amit-shekhar-iitbhu_outcomeschool-softwareengineering-activity-7224635014641016834-j8X1)\n\n* **Explain Serialization and Deserialization** - [Learn from here](https://www.linkedin.com/posts/pallavi-shekhar_outcomeschool-softwareengineering-tech-activity-7228977637916823552-Bo2N)\n\n* **What is serialization? How do you implement it?**\n\n* **What is `transient` modifier?**\n\n* **What are anonymous classes?**\n\n* **What is the difference between using `==` and `.equals` on an object?**\n\n* **What is the `hashCode()` and `equals()` used for?**\n\n* **When would you make an object value `final`?**\n\n* **What are these `final`, `finally` and `finalize` keywords?**\n\n* **What is the difference between \"throw\" and \"throws\" keyword in Java?**\n    - `throws` is just used to indicated which exception is to be thrown. But the `throw` keyword is used to throw some exception from any static block or any method.\n\n* **What does the `static` word mean in Java?**\n    - In case of `static` variable it means that this variable (its' value or the object it references) spans across all instances of enclosing class (changing it in one instance affects all others), while in case of `static` methods it means that these methods can be invoked without an instance of their enclosing class. It is useful, for example, when you create util classes that need not be instantiated every time you want to use them.\n\n* **Can a `static` method be overridden in Java?**\n    - While child class can override a static method with another static method with the same signature (return type can be down-casted), it is not truly overridden - it becomes \"hidden\", but both methods can still be accessed under right circumstances (see question about overloading/overriding above).\n\n* **When is a `static` block run?**\n    - Code inside static block is executed only once: the first time you make an object of that class or the first time you access a static member of that class (even if you never make an object of that class).\n\n* **Explain Reflection in Java** - [Learn from here](https://x.com/amitiitbhu/status/1819234916812341567)\n\n* **What is Dependency Injection?**\n\n* **Difference between `StringBuffer` and `StringBuilder`?** - [Learn from here](https://outcomeschool.com/blog/string-vs-stringbuffer-vs-stringbuilder)\n\n* **What is the difference between fail-fast and fail-safe iterators in Java?**\n\n* **Monitor and Synchronization**\n\n### Jetpack Compose\n\nTopics you should know in **Jetpack Compose** for Android Interview:\n\n* Compose\n* State: remember, rememberSaveable, MutableState\n* Recomposition\n* State hoisting\n* Side-effects\n* Modifier\n* Theme\n* Layout, List\n* Gestures, Animation\n* CompositionLocal\n\nLearn the above-mentioned from the following links:\n\n- [Getting Started with Compose](https://developer.android.com/jetpack/compose/tutorial)\n- [Thinking in Compose](https://developer.android.com/jetpack/compose/mental-model)\n- [State](https://developer.android.com/jetpack/compose/state)\n- [remember vs rememberSaveable](https://outcomeschool.com/blog/remember-vs-remembersaveable)\n- [Lifecycle](https://developer.android.com/jetpack/compose/lifecycle)\n- [Modifiers](https://developer.android.com/jetpack/compose/modifiers)\n- [Side-effects](https://developer.android.com/jetpack/compose/side-effects)\n- [Phases](https://developer.android.com/jetpack/compose/phases)\n- [Semantics](https://developer.android.com/jetpack/compose/semantics)\n- [CompositionLocal](https://developer.android.com/jetpack/compose/compositionlocal)\n- [Can we use traditional Android Views and Compose together?](https://www.linkedin.com/posts/amit-shekhar-iitbhu_outcomeschool-softwareengineering-tech-activity-7235142707138961408-40hQ)\n\nQuestions\n\n* **Jetpack Compose vs Android View System**\n  \n* **Explain the concept of declarative UI in Jetpack Compose.**\n  \n* **Declarative UI vs Imperative UI**\n  \n* **What are Composable functions?**\n  \n* **What is Recomposition?**\n  \n* **What is State in Compose?**\n  \n* **How does state management work in Jetpack Compose?**\n  \n* **Stateful composable vs Stateless composable**\n  \n* **What are the side effects?**\n  \n* **Difference between LaunchedEffect and DisposableEffect**.\n  \n* **What is rememberCoroutineScope and its use cases?**\n  \n* **How to observe Flows, and LiveData states in Compose UI?**\n  \n* **How can we handle asynchronous operations in Jetpack Compose?**\n  \n* **How can we convert a non-compose state into a Compose state?**\n  \n* **Explain derivedStateOf.**\n  \n* **Explain rememberUpdatedState.**\n  \n* **Difference between remember and rememberSaveable.**\n  \n* **Explain the Lifecycle of a Composable in Jetpack Compose.**\n  \n* **How do you handle lifecycle events in Compose functions?**\n  \n* **What are the best practices for performance optimization in Jetpack Compose?**\n  \n* **Can we use both Jetpack Compose and Android View in a Single App?**\n  \n* **What is State Hoisting?**\n  \n* **Explain CompositionLocal**\n  \n* **Explain Jetpack Compose Phases.**\n  \n* **What is the role of the Modifier in Jetpack Compose?**\n  \n* **What are Semantics?**\n  \n* **How can you handle user input and events in Jetpack Compose?**\n  \n* **How do you handle navigation in Jetpack Compose?**\n  \n* **How do you handle orientation changes in Jetpack Compose?**\n  \n* **Explain the concept of unidirectional data flow in Jetpack Compose.**\n  \n* **How to create Custom Layouts in Compose?**\n\n### Other Topics\n\nAndroid Interview Questions and Answers:\n\n* **Describe SQLite.**\n\n* **Have you used Room-Database?**\n\n* **Can we identify the users who have uninstalled our application?**\n\n* **Android Development Best Practices.** - Learn from here: [Android Development Best Practices](https://outcomeschool.com/blog/android-development-best-practices)\n\n* **React Native vs Flutter** - Learn from here: [React Native vs Flutter](https://outcomeschool.com/blog/react-native-vs-flutter)\n\n* **What are the metrics that you should measure continuously while android application development?** - Learn from here: [Android App Performance Metrics](https://outcomeschool.com/blog/android-app-performance-metrics)\n\n* **How to avoid API keys from check-in into VCS?**\n\n* **How does the Kotlin Multiplatform work?** - [Blog](https://outcomeschool.com/blog/how-does-the-kotlin-multiplatform-work)\n\n* **How to use Memory Heap Dumps data?**\n\n* **How to implement Dark Theme in your app?**\n\n* **How to secure the API keys used in an Android App?**\n\n* **What is Cleartext traffic?** Learn from here: [What is Cleartext traffic?](https://www.linkedin.com/posts/amit-shekhar-iitbhu_softwareengineer-androiddev-android-activity-7281879316601126913-x1az)\n\n* **Tell something about memory usage in Android.**\n\n* **Explain Annotation processing.**\n\n* **How does the Android Push Notification system work?** Learn from here: [How does the Android Push Notification system work?](https://youtu.be/810IFG2sWlc)\n\n* **Android Push Notification Flow using FCM.** Learn from here: [Android Push Notification Flow using FCM](https://www.linkedin.com/posts/pallavi-shekhar_backend-android-activity-7280513305733971968-1WO9/)\n\n* **How to show local Notification at an exact time?**\n\n### Data Structures and Algorithms\n\n* **Android Developer should know these Data Structures for Next Interview** - [Check here](https://outcomeschool.com/blog/android-developer-should-know-these-data-structures-for-next-interview)\n\n### High-quality videos to prepare for Android Interview - [Amit Shekhar YouTube Channel](https://www.youtube.com/@amitshekhar)\n\n### High-quality blogs to prepare for Android Interview - [Check here - Outcome School Blog](https://outcomeschool.com/blog)\n\n### Found this project useful :heart:\n\n* Support by clicking the :star: button on the upper right of this page. :v:\n\nYou can connect with me on:\n\n- [Twitter](https://twitter.com/amitiitbhu)\n- [YouTube](https://www.youtube.com/@amitshekhar)\n- [LinkedIn](https://www.linkedin.com/in/amit-shekhar-iitbhu)\n- [GitHub](https://github.com/amitshekhariitbhu)\n\n### License\n```\n   Copyright (C) 2024 Amit Shekhar\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n"
        },
        {
          "name": "Success.java",
          "type": "blob",
          "size": 0.140625,
          "content": "public class Success{\n\n     public static void main(String []args){\n        System.out.println(\"Interviews are tough, so are you :)\");\n     }\n}\n"
        },
        {
          "name": "Success.kt",
          "type": "blob",
          "size": 0.115234375,
          "content": "object Success {\n  @JvmStatic fun main(args:Array<String>) {\n    println(\"Interviews are tough, so are you :)\")\n  }\n}\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}