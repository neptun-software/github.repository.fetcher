{
  "metadata": {
    "timestamp": 1736708848948,
    "page": 48,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebook/fresco",
      "stars": 17087,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2021484375,
          "content": ".gradle\n.DS_Store\n.idea\nbuild/\nlocal.properties\nlocalhost/\nobj/\n*.iml\nGemfile.lock\n_site/\n\n# Kotlin 2.0\n# https://kotlinlang.org/docs/whatsnew20.html#new-directory-for-kotlin-data-in-gradle-projects\n.kotlin\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.27734375,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at <opensource-conduct@fb.com>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.8173828125,
          "content": "# Contributing to Fresco\n\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Security bugs\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe disclosure of security bugs. In those cases, please go through the process outlined on that page and do not file a GitHub issue.\n\n## Pull Requests\n\nWe welcome pull requests.\n\n1. Fork the repo and create your branch from `main`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation. \n4. Make sure the test suite passes.\n5. Make sure your code passes lint.\n6. If you haven't already, complete the [Contributor License Agreement](https://code.facebook.com/cla) (\"CLA\").\n\n## Getting started\n\nIn Android Studio, choose `File > Open..`. and select the `fresco` folder.\n\n### Specify a path to the NDK\n\nFresco uses native code for a few features. To build Fresco you'll need to specify the path to the NDK.\n\nIn Android Studio, go to `File > Project Structure` and in the dialog set the `Android NDK location`. Android Studio stores the NDK location in to your `local.properties` file.\n\n### Run a sample app\n\nSelect the **Showcase** app and click run:\n\n![Running a sample Fresco app](https://cloud.githubusercontent.com/assets/346214/24415877/d48d894c-13da-11e7-8601-09627661de67.png)\n\nYou can use the drawer to select one of the demos:\n\n<img width=\"364\" alt=\"Fresco showcase app\" src=\"https://cloud.githubusercontent.com/assets/346214/24416135/a9a4a07a-13db-11e7-9d19-25ae9cbc83d3.png\">\n\nNow you can change any code in Fresco and see the changes in the app.\n\nHave fun hacking on Fresco! ðŸ˜Ž\n\n## Testing your changes\n\nYou can check your code compiles using:\n\n```\ncd fresco\n./gradlew assembleDebug\n```\n\nYou can run tests locally using:\n\n```\ncd fresco\n./gradlew test\n```\n\nCircle CI will run the same tests and report on your pull request.\n\n## Contributor License Agreement (\"CLA\")\n\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>.\n\n## Our Development Process\n\nEach pull request is first submitted into Facebook's internal repositories by a\nFacebook team member. Once the commit has successfully passed Facebook's internal\ntest suite, it will be exported back out from Facebook's repository. We endeavour\nto do this as soon as possible for all commits.\n\n## Coding Style  \n\n* 2 spaces for indentation rather than tabs\n* 100 character line length\n* Although officially archived, we still follow the practice of Oracle's \n[Coding Conventions for the Java Programming Language](http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html).\n\n## License\n\nBy contributing to Fresco, you agree that your contributions will be licensed\nunder its MIT license.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0625,
          "content": "MIT License\n\nCopyright (c) Meta Platforms, Inc. and affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.3427734375,
          "content": "# Fresco\n\n<img alt=\"Fresco Logo\" align=\"right\" src=\"docs/static/sample-images/fresco_logo.svg\" width=\"15%\" />\n\n[![Build Status](https://github.com/facebook/fresco/actions/workflows/build.yml/badge.svg?event=push)](https://github.com/facebook/fresco/actions/workflows/build.yml?query=event%3Apush)\n[![License](https://img.shields.io/badge/license-MIT-brightgreen)](https://github.com/facebook/fresco/blob/main/LICENSE)\n\nFresco is a powerful system for displaying images in Android applications.\n\nFresco takes care of image loading and display, so you don't have to. It will load images from the network, local storage, or local resources, and display a placeholder until the image has arrived. It has two levels of cache; one in memory and another in internal storage.\n\nIn Android 4.x and lower, Fresco puts images in a special region of Android memory. This lets your application run faster - and suffer the dreaded `OutOfMemoryError` much less often.\n\nFresco also supports:\n\n* streaming of progressive JPEGs\n* display of animated GIFs and WebPs\n* extensive customization of image loading and display\n* and much more!\n\nFind out more at our [website](http://frescolib.org/index.html).\n\n## Requirements\n\nFresco can be included in any Android application.\n\nFresco supports Android 2.3 (Gingerbread) and later.\n\n## Using Fresco in your application\n\nIf you are building with Gradle, simply add the following line to the `dependencies` section of your `build.gradle` file:\n\n```groovy\nimplementation 'com.facebook.fresco:fresco:3.6.0'\n```\n\nFor full details, visit the documentation on our web site, available in English and Chinese:\n\n<a href=\"http://frescolib.org/docs/index.html\"><img src=\"http://frescolib.org/static/GetStarted-en.png\" width=\"150\" height=\"42\"/></a>\n\n<a href=\"http://fresco-cn.org/docs/index.html\"><img src=\"http://frescolib.org/static/GetStarted-zh.png\" width=\"104\" height=\"42\"/></a>\n\n## Join the Fresco community\n\nPlease use our [issues page](https://github.com/facebook/fresco/issues) to let us know of any problems.\n\nFor pull requests, please see the [CONTRIBUTING](https://github.com/facebook/fresco/blob/main/CONTRIBUTING.md) file for information on how to help out. See our [documentation](http://frescolib.org/docs/building-from-source.html) for information on how to build from source.\n\n\n## License\nFresco is [MIT-licensed](https://github.com/facebook/fresco/blob/main/LICENSE).\n"
        },
        {
          "name": "animated-base",
          "type": "tree",
          "content": null
        },
        {
          "name": "animated-drawable",
          "type": "tree",
          "content": null
        },
        {
          "name": "animated-gif-lite",
          "type": "tree",
          "content": null
        },
        {
          "name": "animated-gif",
          "type": "tree",
          "content": null
        },
        {
          "name": "animated-webp",
          "type": "tree",
          "content": null
        },
        {
          "name": "bots",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 11.0830078125,
          "content": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport de.undercouch.gradle.tasks.download.Download\nimport org.apache.tools.ant.taskdefs.condition.Os\nimport com.facebook.fresco.buildsrc.Deps\nimport com.facebook.fresco.buildsrc.GradleDeps\n\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        google()\n        mavenCentral()\n    }\n    dependencies {\n        classpath GradleDeps.Android.gradlePlugin\n        classpath GradleDeps.Kotlin.gradlePlugin\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nplugins {\n    id \"de.undercouch.download\" version \"5.3.1\"\n    id \"com.vanniktech.maven.publish\" version \"0.25.3\"\n}\n\n// Make sure to add trailing slash to the absolute paths\nLinkedHashMap<String, String> commonNdkLocations = [\n        \"macOS-internal\":\"/opt/android_sdk/ndk/\",\n        \"linux-ubuntu\":\"/usr/local/lib/android/sdk/ndk/\",\n]\n\nsubprojects {\n\n    repositories {\n        google()\n        mavenCentral()\n    }\n\n    // FIXME: This picks up non-Java files by default, failing to parse them.\n    // Need to configure this more carefully.\n    tasks.withType(Javadoc).all {\n        enabled = false\n    }\n\n    tasks.withType(com.android.build.gradle.tasks.JavaDocGenerationTask).all {\n        enabled = false\n    }\n\n\n    if (System.getenv(\"SANDCASTLE\") == \"1\") {\n        tasks.withType(Test).all {\n            systemProperty(\"robolectric.dependency.repo.id\", \"central\")\n            systemProperty(\"robolectric.dependency.repo.url\", \"https://maven.thefacebook.com/nexus/content/repositories/central/\")\n            systemProperty(\"robolectric.logging\", \"stdout\")\n            systemProperty(\"robolectric.logging.enabled\", \"true\")\n            systemProperty(\"java.net.preferIPv6Addresses\", \"true\")\n            systemProperty(\"java.net.preferIPv4Stack\", \"false\")\n            systemProperty(\"jdk.attach.allowAttachSelf\", \"true\")\n            jvmArgs '-XX:+StartAttachListener'\n        }\n    }\n\n    configurations.all {\n        resolutionStrategy.force Deps.jsr305\n    }\n\n    task allclean {\n    }\n\n    // Sets the ndkPath for each module when running on CI\n    if (System.getenv(\"SANDCASTLE\") == \"1\") {\n        String ndkDir = System.getenv(\"ANDROID_NDK_HOME\")\n        project.plugins.whenPluginAdded { plugin ->\n            if (\"com.android.build.gradle.AppPlugin\" == plugin.class.name) {\n                project.android.ndkPath = ndkDir\n            } else if (\"com.android.build.gradle.LibraryPlugin\" == plugin.class.name) {\n                project.android.ndkPath = ndkDir\n            }\n        }\n    }\n\n    apply plugin: 'de.undercouch.download'\n\n    ext.makeNdkTasks = { name, deps ->\n        task \"ndk_build_${name}\"(dependsOn: deps, type: Exec) {\n            inputs.files(\"src/main/jni/${name}\")\n            outputs.dir(\"$buildDir/${name}\")\n            commandLine getNdkBuildFullPath(project),\n                    'NDK_PROJECT_PATH=null',\n                    'NDK_APPLICATION_MK=../Application.mk',\n                    'NDK_OUT=' + temporaryDir,\n                    \"NDK_LIBS_OUT=$buildDir/${name}\",\n                    '-C', file(\"src/main/jni/${name}\").absolutePath,\n                    '--jobs', Runtime.getRuntime().availableProcessors()\n        }\n\n        task \"ndk_clean_$name\"(type: Exec) {\n            ignoreExitValue true\n            commandLine getNdkBuildFullPath(project),\n                    'NDK_PROJECT_PATH=null',\n                    'NDK_APPLICATION_MK=../Application.mk',\n                    'NDK_OUT=' + temporaryDir,\n                    \"NDK_LIBS_OUT=$buildDir/${name}\",\n                    '-C', file(\"src/main/jni/${name}\").absolutePath,\n                    'clean'\n        }\n\n        tasks.withType(JavaCompile) {\n            compileTask -> compileTask.dependsOn \"ndk_build_$name\"\n        }\n        clean.dependsOn \"ndk_clean_$name\"\n    }\n\n    ext.getNdkBuildName =  {\n        if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n            return \"ndk-build.cmd\"\n        } else {\n            return \"ndk-build\"\n        }\n    }\n\n    ext.discoverNdkPathFromCommonLocations = { String ndkVersion ->\n        String foundNdkLocation = null\n        for (entry in commonNdkLocations) {\n            String variant = entry.key\n            String location = entry.value\n\n            String ndkDir = location + ndkVersion\n            File ndkFolder = new File(ndkDir)\n            if (ndkFolder.exists()) {\n                println(\"NDK Path found using: common $variant location\")\n                foundNdkLocation = ndkDir\n                break\n            }\n        }\n\n        return foundNdkLocation\n    }\n\n    ext.getNdkBuildFullPath = { Project project ->\n        String path = null\n\n        // Latest method using the common NDK version used throughout the project and using the standard NDK SxS location on macOS\n        if (path == null) {\n            path = discoverNdkPathFromCommonLocations(GradleDeps.Native.version)\n        }\n\n        // Fallback method for CI\n        if (path == null) {\n            String ndkDir = System.getenv(\"ANDROID_NDK_HOME\")\n            if (ndkDir != null) {\n                File ndkFolder = new File(ndkDir)\n                if (ndkFolder.exists()) {\n                    path = ndkDir\n                    println(\"NDK Path found using: ANDROID_NDK_HOME\")\n                }\n            }\n        }\n\n        // Legacy methods of finding NDK path\n        if (path == null) {\n            File propFile = project.rootProject.file('local.properties')\n            if (!propFile.exists()) {\n                println(\"NDK Path found using: local.props missing, just the command name\")\n                return getNdkBuildName()\n            }\n            Properties properties = new Properties()\n            properties.load(propFile.newDataInputStream())\n            def ndkCommand = properties.getProperty('ndk.command')\n            if (ndkCommand != null) {\n                println(\"NDK Path found using: ndk.command\")\n                return ndkCommand\n            }\n            def ndkPath = properties.getProperty('ndk.path')\n            if (ndkPath != null) {\n                println(\"NDK Path found using: ndk.path\")\n                path = ndkPath\n            } else {\n                def ndkDir = properties.getProperty('ndk.dir')\n                if (ndkDir != null) {\n                    println(\"NDK Path found using: ndk.dir\")\n                    path = ndkDir\n                }\n            }\n        }\n\n        if (path != null) {\n            if (!path.endsWith(File.separator)) {\n                path += File.separator\n            }\n            return path + getNdkBuildName()\n        } else {\n            // if none of above is provided, we assume ndk-build is already in $PATH\n            return getNdkBuildName()\n        }\n    }\n\n    ext.nativeDepsDir = new File(\"${projectDir}/nativedeps\")\n    ext.downloadsDir = new File(\"${nativeDepsDir}/downloads\")\n    ext.mergeDir = new File(\"${nativeDepsDir}/merge\")\n\n    task removeNativeDeps(type: Delete) {\n        delete nativeDepsDir\n    }\n    allclean.dependsOn removeNativeDeps\n\n    task createNativeDepsDirectories {\n        nativeDepsDir.mkdirs()\n        downloadsDir.mkdirs()\n        mergeDir.mkdirs()\n    }\n\n    ext.createNativeLibrariesTasks = {name, libraryUrl, libraryFileName, libraryDestinationDir, sourceDir, includePaths, destinationDir ->\n        // We create the DownloadTask\n        tasks.create(\"download${name}\", Download) {\n            src libraryUrl\n            onlyIfNewer true\n            overwrite false\n            dest \"${downloadsDir}/${libraryFileName}\"\n            dependsOn createNativeDepsDirectories\n        }\n        // The unpack task\n        tasks.create(\"unpack${name}\", Copy) {\n            String filePath = \"${downloadsDir}/${libraryFileName}\"\n            ReadableResource resource\n            if (filePath.endsWith(\"gz\")) {\n                resource = resources.gzip(filePath)\n            } else if (filePath.endsWith(\"bz2\")) {\n                resource = resources.bzip2(filePath)\n            } else {\n                throw new GradleException(\"Could not unpack library \" + filePath)\n            }\n            from tarTree(resource)\n            into \"${downloadsDir}/${libraryDestinationDir}\"\n            dependsOn \"download${name}\"\n        }\n        // The copy task\n        Task unpackTask = tasks.getByName(\"unpack${name}\")\n        tasks.create(\"copy${name}\", Copy) {\n            from \"${unpackTask.destinationDir}/${sourceDir}\"\n            from \"src/main/jni/third-party/${destinationDir}\"\n            // Allows for overriding when duplicates are encountered.\n            duplicatesStrategy DuplicatesStrategy.INCLUDE\n            include(includePaths)\n            into \"${mergeDir}/${destinationDir}\"\n            dependsOn \"unpack${name}\"\n        }\n\n    }\n\n    // Libjpeg-turbo\n    createNativeLibrariesTasks(\n            'Libjpeg',      // Name for the tasks\n            \"https://github.com/libjpeg-turbo/libjpeg-turbo/archive/${LIBJPEG_TURBO_VERSION}.tar.gz\", // The Url for download\n            \"${LIBJPEG_TURBO_VERSION}.tar.gz\", // The downloaded file\n            'libjpeg', // The folder where the file is downloaded\n            \"libjpeg-turbo-${LIBJPEG_TURBO_VERSION}\", // The first dir where we have put our customisation\n            ['**/*.c', '**/*.h','**/*.S', '**/*.asm', '**/*.inc', '*.mk'], // Files to compile\n            \"libjpeg-turbo-${LIBJPEG_TURBO_VERSION}\" // Final destination dir\n    )\n\n    // Libpng\n    createNativeLibrariesTasks(\n            'Libpng',      // Name for the tasks\n            \"https://github.com/glennrp/libpng/archive/v${LIBPNG_VERSION}.tar.gz\", // The Url for download\n            \"v${LIBPNG_VERSION}.tar.gz\", // The downloaded file\n            'libpng', // The folder where the file is downloaded\n            \"libpng-${LIBPNG_VERSION}\", // The first dir where we have put our customisation\n            ['**/*.c', '**/*.h', '**/*.S', '*.mk'], // Files to compile\n            \"libpng-${LIBPNG_VERSION}\" // Final destination dir\n    )\n\n    // Gif\n    createNativeLibrariesTasks(\n            'Giflib',      // Name for the tasks\n            \"https://sourceforge.net/projects/giflib/files/giflib-${GIFLIB_VERSION}.tar.gz/download\", // The Url for download\n            \"giflib-${GIFLIB_VERSION}.tar.gz\", // The downloaded file\n            'giflib', // The folder where the file is downloaded\n            \"giflib-${GIFLIB_VERSION}\", // The first dir where we have put our customisation\n            ['*.c', '*.h', '*.mk'], // Files to compile\n            \"giflib\" // Final destination dir\n    )\n\n    // Webp\n    createNativeLibrariesTasks(\n            'Libwebp',      // Name for the tasks\n            \"https://github.com/webmproject/libwebp/archive/v${LIBWEBP_VERSION}.tar.gz\", // The Url for download\n            \"v${LIBWEBP_VERSION}.tar.gz\", // The downloaded file\n            'libwebp', // The folder where the file is downloaded\n            \"libwebp-${LIBWEBP_VERSION}\", // The first dir where we have put our customisation\n            ['**/*.c', '**/*.h', '*.mk'], // Files to compile\n            \"libwebp-${LIBWEBP_VERSION}\" // Final destination dir\n    )\n}\n"
        },
        {
          "name": "buildSrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "drawee-backends",
          "type": "tree",
          "content": null
        },
        {
          "name": "drawee-span",
          "type": "tree",
          "content": null
        },
        {
          "name": "drawee",
          "type": "tree",
          "content": null
        },
        {
          "name": "fbcore",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 1.8359375,
          "content": "# Project-wide Gradle settings.\n\n# IDE (e.g. Android Studio) users:\n# Gradle settings configured through the IDE *will override*\n# any settings specified in this file.\n\n# For more details on how to configure your build environment visit\n# http://www.gradle.org/docs/current/userguide/build_environment.html\n\n# Specifies the JVM arguments used for the daemon process.\n# The setting is particularly useful for tweaking memory settings.\n# Default value: -Xmx10248m\n# org.gradle.jvmargs=-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\norg.gradle.jvmargs=-Xmx2048m\n\n# When configured, Gradle will run in incubating parallel mode.\n# This option should only be used with decoupled projects. More details, visit\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\n# org.gradle.parallel=true\n\nVERSION_NAME=3.6.0\nGROUP=com.facebook.fresco\nSONATYPE_STAGING_PROFILE=comfacebook\nPOM_URL=https://github.com/facebook/fresco\nPOM_SCM_URL=https://github.com/facebook/fresco.git\nPOM_SCM_CONNECTION=scm:git:https://github.com/facebook/fresco.git\nPOM_SCM_DEV_CONNECTION=scm:git:git@github.com:facebook/fresco.git\nPOM_LICENCE_NAME=MIT\nPOM_LICENCE_URL=https://github.com/facebook/fresco/blob/main/LICENSE\nPOM_LICENCE_DIST=repo\nPOM_DEVELOPER_ID=facebook\nPOM_DEVELOPER_NAME=facebook\nPOM_ISSUES_URL=https://github.com/facebook/fresco/issues/\n\n# AndroidX support\nandroid.useAndroidX=true\nandroid.enableJetifier=true\n\n# Deps for native libraries\nLIBJPEG_TURBO_VERSION=2.1.5.1\n# When updating this also change the version in static-webp/src/main/jni/static-webp/Android.mk\nLIBPNG_VERSION=1.6.37\nGIFLIB_VERSION=5.2.1\n# When updating this also change the version in static-webp/src/main/jni/static-webp/Android.mk\nLIBWEBP_VERSION=1.3.2\n\nSONATYPE_HOST=DEFAULT\nRELEASE_SIGNING_ENABLED=true\n\n# AGP 8.0 feature(s)\nandroid.enableBuildConfigAsBytecode=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 5.62890625,
          "content": "#!/usr/bin/env sh\n\n#\n# Copyright 2015 the original author or authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif [ \"$cygwin\" = \"true\" -o \"$msys\" = \"true\" ] ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=`expr $i + 1`\n    done\n    case $i in\n        0) set -- ;;\n        1) set -- \"$args0\" ;;\n        2) set -- \"$args0\" \"$args1\" ;;\n        3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=`save \"$@\"`\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.873046875,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n\r\n@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windows variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "imagepipeline-backends",
          "type": "tree",
          "content": null
        },
        {
          "name": "imagepipeline-base-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "imagepipeline-base",
          "type": "tree",
          "content": null
        },
        {
          "name": "imagepipeline-native",
          "type": "tree",
          "content": null
        },
        {
          "name": "imagepipeline-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "imagepipeline",
          "type": "tree",
          "content": null
        },
        {
          "name": "memory-types",
          "type": "tree",
          "content": null
        },
        {
          "name": "middleware",
          "type": "tree",
          "content": null
        },
        {
          "name": "mockito-config",
          "type": "tree",
          "content": null
        },
        {
          "name": "native-filters",
          "type": "tree",
          "content": null
        },
        {
          "name": "native-imagetranscoder",
          "type": "tree",
          "content": null
        },
        {
          "name": "run_comparison.py",
          "type": "blob",
          "size": 9.8583984375,
          "content": "#!/usr/bin/env python3\n# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\n\"\"\"\nThis script builds and runs the comparison app, switching from one library to the next,\ntaking measurements as it goes, and outputs the results neatly.\n\nDue to a bug, you must specify the CPU when running the script.\nUse -c armeabi-v7a for most phones. Use -c arm64 for 64-bit ARM devices.\nSome emulators and tablets will need -c x86.\n\nTo select a subset of the libraries, use the -s option with a\nspace-separated list. Available options are fresco, fresco-okhttp,\nglide, volley, drawee-volley, uil, picasso, and aquery.\n\nTo see the comparison for only network or local images, use -d network or -d local.\n\nNote that Volley does not support local images, and fresco and fresco-okhttp\nare identical for local images.\n\nResults will vary based on the the device, the network conditions and the mix of images available.\n\nExample: to run a local-only comparison of fresco and picasso on an ARM v7 device:\n./run_comparison.py -s fresco picasso -d local -c armeabi-v7a\n\n\"\"\"\n\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nimport argparse\nimport glob\nimport os\nimport re\nimport tempfile\nfrom collections import namedtuple\nfrom subprocess import check_call, PIPE, Popen\n\n\"\"\" List of tested libraries \"\"\"\nTESTS = (\n    \"fresco\",\n    \"fresco-okhttp\",\n    \"glide\",\n    \"picasso\",\n    \"uil\",\n    \"volley\",\n    \"drawee-volley\",\n    \"aquery\",\n)\n\nTEST_SOURCES = (\"network\", \"local\")\n\nABIS = (\"arm64-v8a\", \"armeabi-v7a\", \"x86\", \"x86_64\")\n\n\n\"\"\" Appends test class name to method name \"\"\"\nTEST_PATTERN = \"test{}{}\"\n\n\"\"\" Named tuple containing relevant numbers reported by a test \"\"\"\nStats = namedtuple(\n    \"Stats\",\n    [\n        \"success_wait_times\",\n        \"failure_wait_times\",\n        \"cancellation_wait_times\",\n        \"java_heap_sizes\",\n        \"native_heap_sizes\",\n        \"skipped_frames\",\n    ],\n)\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        description=\"Runs comparison test and processes results\"\n    )\n    parser.add_argument(\"-s\", \"--scenarios\", choices=TESTS, nargs=\"+\")\n    parser.add_argument(\"-d\", \"--sources\", choices=TEST_SOURCES, nargs=\"+\")\n    parser.add_argument(\"-c\", \"--cpu\", choices=ABIS, required=True)\n    return parser.parse_args()\n\n\ndef start_subprocess(command, **kwargs):\n    \"\"\"Starts subprocess after printing command to stdout.\"\"\"\n    return Popen(command.split(), **kwargs)\n\n\ndef run_command(command):\n    \"\"\"Runs given command and waits for it to terminate.\n    Prints the command to stdout and redirects its output to /dev/null.\"\"\"\n    with open(\"/dev/null\", \"w\") as devnull:\n        check_call(command.split(), stdout=devnull, stderr=devnull)\n\n\ndef gradle(*tasks):\n    \"\"\"Runs given gradle tasks\"\"\"\n    if tasks:\n        run_command(\"./gradlew {}\".format(\" \".join(tasks)))\n\n\ndef adb(command):\n    \"\"\"Runs adb command - arguments are given as single string\"\"\"\n    run_command(\"adb {}\".format(command))\n\n\ndef install_apks(abi):\n    \"\"\"Installs comparison app and test apks\"\"\"\n    print(\"Installing comparison app...\")\n    gradle(\n        \":samples:comparison:assembleDebug\",\n        \":samples:comparison:assembleDebugAndroidTest\",\n    )\n    adb(\"uninstall com.facebook.samples.comparison\")\n    adb(\"uninstall com.facebook.samples.comparison.test\")\n    cmd = (\n        \"install -r samples/comparison/build/outputs/apk/comparison-\"\n        \"{}-debug.apk\".format(abi)\n    )\n    adb(cmd)\n    adb(\n        \"install -r samples/comparison/build/outputs/apk/\"\n        \"comparison-debug-androidTest-unaligned.apk\"\n    )\n\n\nclass ComparisonTest:\n    \"\"\"Comparison test case\"\"\"\n\n    def __init__(\n        self,\n        method_name,\n        class_name=\"com.facebook.samples.comparison.test.ScrollTest\",\n        test_package=\"com.facebook.samples.comparison.test\",\n        test_runner=\"android.test.InstrumentationTestRunner\",\n    ):\n        self.method_name = method_name\n        self.class_name = class_name\n        self.test_package = test_package\n        self.test_runner = test_runner\n\n    def __call__(self):\n        \"\"\"Executes test case and captures logcat output\"\"\"\n        adb(\"logcat -c\")\n        with tempfile.TemporaryFile() as logcat_file:\n            logcat_reader = start_subprocess(\"adb logcat\", stdout=logcat_file)\n            adb(\n                \"shell am instrument -w -e class {}#{} {}/{}\".format(\n                    self.class_name,\n                    self.method_name,\n                    self.test_package,\n                    self.test_runner,\n                )\n            )\n            logcat_reader.terminate()\n            logcat_reader.wait()\n\n            logcat_file.seek(0)\n            self.logcat = logcat_file.readlines()\n\n\ndef get_float_from_logs(regex, logs):\n    pattern = re.compile(regex)\n    return [float(match.group(1)) for match in map(pattern.search, logs) if match]\n\n\ndef get_int_from_logs(regex, logs):\n    pattern = re.compile(regex)\n    return [int(match.group(1)) for match in map(pattern.search, logs) if match]\n\n\ndef get_stats(logs):\n    pattern = re.compile(\"\"\"]: loaded after (\\d+) ms\"\"\")\n    success_wait_times = [\n        int(match.group(1)) for match in map(pattern.search, logs) if match\n    ]\n\n    pattern = re.compile(\"\"\"]: failed after (\\d+) ms\"\"\")\n    failure_wait_times = [\n        int(match.group(1)) for match in map(pattern.search, logs) if match\n    ]\n\n    pattern = re.compile(\"\"\"]: cancelled after (\\d+) ms\"\"\")\n    cancellation_wait_times = [\n        int(match.group(1)) for match in map(pattern.search, logs) if match\n    ]\n\n    pattern = re.compile(\"\"\"\\s+(\\d+.\\d+) MB Java\"\"\")\n    java_heap_sizes = [\n        float(match.group(1)) for match in map(pattern.search, logs) if match\n    ]\n\n    pattern = re.compile(\"\"\"\\s+(\\d+.\\d+) MB native\"\"\")\n    native_heap_sizes = [\n        float(match.group(1)) for match in map(pattern.search, logs) if match\n    ]\n\n    pattern = re.compile(\"\"\"Skipped (\\d+) frames!  The application may be\"\"\")\n    skipped_frames = [\n        int(match.group(1)) for match in map(pattern.search, logs) if match\n    ]\n\n    return Stats(\n        success_wait_times,\n        failure_wait_times,\n        cancellation_wait_times,\n        java_heap_sizes,\n        native_heap_sizes,\n        skipped_frames,\n    )\n\n\ndef print_stats(stats):\n    successes = len(stats.success_wait_times)\n    cancellations = len(stats.cancellation_wait_times)\n    failures = len(stats.failure_wait_times)\n    total_count = successes + cancellations + failures\n\n    if total_count == 0:\n        print(\"Unable to read logs.\")\n        return\n\n    total_wait_time = (\n        sum(stats.success_wait_times)\n        + sum(stats.cancellation_wait_times)\n        + sum(stats.failure_wait_times)\n    )\n\n    avg_wait_time = float(total_wait_time) / total_count\n\n    max_java_heap = max(stats.java_heap_sizes)\n    max_native_heap = max(stats.native_heap_sizes)\n\n    total_skipped_frames = sum(stats.skipped_frames)\n\n    print(\"Average wait time    = {0:.1f}\".format(avg_wait_time))\n    print(\"Successful requests  = {}\".format(successes))\n    print(\"Failures             = {}\".format(failures))\n    print(\"Cancellations        = {}\".format(cancellations))\n    print(\"Max java heap        = {0:.1f}\".format(max_java_heap))\n    print(\"Max native heap      = {0:.1f}\".format(max_native_heap))\n    print(\"Total skipped frames = {}\".format(total_skipped_frames))\n\n\ndef get_test_name(option_name, source_name):\n    return TEST_PATTERN.format(\n        \"\".join(word.capitalize() for word in option_name.split(\"-\")),\n        source_name.capitalize(),\n    )\n\n\ndef valid_scenario(scenario_name, source_name):\n    return source_name != \"local\" or (\n        scenario_name != \"volley\" and scenario_name != \"drawee-volley\"\n    )\n\n\ndef list_producers():\n    sdir = os.path.dirname(os.path.abspath(__file__))\n    producer_path = (\n        \"%s/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/*Producer.java\"\n        % sdir\n    )\n    files = glob.glob(producer_path)\n    return [f.split(\".\")[0].split(\"/\")[-1] for f in files]\n\n\ndef print_fresco_perf_line(margin, name, times):\n    length = len(times)\n    if length == 0:\n        return\n    print(\n        \"%s: %d requests, avg %d\"\n        % (name.rjust(margin), length, float(sum(times)) / length)\n    )\n\n\ndef print_fresco_perf(logs):\n    producers = list_producers()\n    margin = max([len(p) for p in producers])\n    requests = get_int_from_logs(\n        \"\"\".*RequestLoggingListener.*onRequestSuccess.*elapsedTime:\\s(\\d+).*\"\"\", logs\n    )\n    print_fresco_perf_line(margin, \"Total\", requests)\n    for producer in producers:\n        queue = get_int_from_logs(\n            \".*onProducerFinishWithSuccess.*producer:\\s%s.*queueTime=(\\d+).*\"\n            % producer,\n            logs,\n        )\n        print_fresco_perf_line(margin, \"%s queue\" % producer, queue)\n        times = get_int_from_logs(\n            \".*onProducerFinishWithSuccess.*producer:\\s%s.*elapsedTime:\\s(\\d+).*\"\n            % producer,\n            logs,\n        )\n        print_fresco_perf_line(margin, producer, times)\n\n\ndef main():\n    args = parse_args()\n    scenarios = []\n    sources = []\n    if args.scenarios:\n        scenarios = args.scenarios\n    else:\n        scenarios = TESTS\n\n    if args.sources:\n        sources = args.sources\n    else:\n        sources = TEST_SOURCES\n\n    install_apks(args.cpu)\n\n    for source_name in sources:\n        for scenario_name in scenarios:\n            if valid_scenario(scenario_name, source_name):\n                print()\n                print(\"Testing {} {}\".format(scenario_name, source_name))\n                print(get_test_name(scenario_name, source_name))\n                test = ComparisonTest(get_test_name(scenario_name, source_name))\n                test()\n                stats = get_stats(test.logcat)\n                print_stats(stats)\n                if scenario_name[:6] == \"fresco\":\n                    print()\n                    print_fresco_perf(test.logcat)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 1.7314453125,
          "content": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\ninclude ':animated-base'\ninclude ':animated-drawable'\ninclude ':animated-gif'\ninclude ':animated-gif-lite'\ninclude ':animated-webp'\ninclude ':drawee'\ninclude ':drawee-backends:drawee-pipeline'\ninclude ':drawee-span'\ninclude ':fbcore'\ninclude ':imagepipeline'\ninclude ':imagepipeline-backends:imagepipeline-okhttp3'\ninclude ':imagepipeline-backends:imagepipeline-volley'\ninclude ':imagepipeline-base'\ninclude ':imagepipeline-base-test'\ninclude ':imagepipeline-native'\ninclude ':imagepipeline-test'\ninclude ':memory-types:ashmem'\ninclude ':memory-types:nativememory'\ninclude ':memory-types:simple'\ninclude ':middleware'\ninclude ':mockito-config'\ninclude ':native-filters'\ninclude ':native-imagetranscoder'\ninclude ':samples:animation2'\ninclude ':samples:comparison'\ninclude ':samples:gestures'\ninclude ':samples:scrollperf'\ninclude ':samples:showcase'\ninclude ':samples:zoomable'\ninclude ':samples:zoomableapp'\ninclude ':soloader'\ninclude ':static-webp'\ninclude ':tools:flipper'\ninclude ':tools:flipper-fresco-plugin'\ninclude ':tools:stetho'\ninclude ':ui-common'\ninclude ':ui-core'\ninclude ':urimod'\ninclude ':viewport'\ninclude ':vito:core'\ninclude ':vito:core-common-impl'\ninclude ':vito:core-impl'\ninclude ':vito:core-java-impl'\ninclude ':vito:compose'\ninclude ':vito:drawee-support'\ninclude ':vito:init'\ninclude ':vito:ktx'\ninclude ':vito:litho'\ninclude ':vito:litho-slideshow'\ninclude ':vito:nativecode'\ninclude ':vito:options'\ninclude ':vito:provider'\ninclude ':vito:renderer'\ninclude ':vito:source'\ninclude ':vito:textspan'\ninclude ':vito:tools:liveeditor'\ninclude ':vito:view'\n"
        },
        {
          "name": "soloader",
          "type": "tree",
          "content": null
        },
        {
          "name": "static-webp",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "ui-common",
          "type": "tree",
          "content": null
        },
        {
          "name": "ui-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "urimod",
          "type": "tree",
          "content": null
        },
        {
          "name": "viewport",
          "type": "tree",
          "content": null
        },
        {
          "name": "vito",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}