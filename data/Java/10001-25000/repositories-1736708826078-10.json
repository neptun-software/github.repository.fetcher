{
  "metadata": {
    "timestamp": 1736708826078,
    "page": 10,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/gson",
      "stars": 23476,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.1796875,
          "content": "# Ignore commit which reformatted code\n2c94c757a6a9426cc2fe47bc1c63f69e7c73b7b4\n\n# Ignore commit which changed line endings consistently to LF\nc2a0e4634a2100494159add78db2ee06f5eb9be6\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1962890625,
          "content": ".classpath\n.project\n.settings\neclipsebin\ntarget\n*/target\npom.xml.*\nrelease.properties\n\n.idea\n*.iml\n*.ipr\n*.iws\nclasses\n\n.gradle\nlocal.properties\nbuild\n\n.DS_Store\n\nexamples/android-proguard-example/gen\n"
        },
        {
          "name": ".mvn",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 23.0517578125,
          "content": "Change Log\n==========\n\nThe change log for versions newer than 2.10 is available only on the [GitHub Releases page](https://github.com/google/gson/releases).\n\n## Version 2.10\n\n* Support for serializing and deserializing Java records, on Java â‰¥ 16. (https://github.com/google/gson/pull/2201)\n* Add `JsonArray.asList` and `JsonObject.asMap` view methods (https://github.com/google/gson/pull/2225)\n* Fix `TypeAdapterRuntimeTypeWrapper` not detecting reflective `TreeTypeAdapter` and `FutureTypeAdapter` (https://github.com/google/gson/pull/1787)\n* Improve `JsonReader.skipValue()` (https://github.com/google/gson/pull/2062)\n* Perform numeric conversion for primitive numeric type adapters (https://github.com/google/gson/pull/2158)\n* Add `Gson.fromJson(..., TypeToken)` overloads (https://github.com/google/gson/pull/1700)\n* Fix changes to `GsonBuilder` affecting existing `Gson` instances (https://github.com/google/gson/pull/1815)\n* Make `JsonElement` conversion methods more consistent and fix javadoc (https://github.com/google/gson/pull/2178)\n* Throw `UnsupportedOperationException` when `JsonWriter.jsonValue` is not supported (https://github.com/google/gson/pull/1651)\n* Disallow `JsonObject` `Entry.setValue(null)` (https://github.com/google/gson/pull/2167)\n* Fix `TypeAdapter.toJson` throwing AssertionError for custom IOException (https://github.com/google/gson/pull/2172)\n* Convert null to JsonNull for `JsonArray.set` (https://github.com/google/gson/pull/2170)\n* Fixed nullSafe usage. (https://github.com/google/gson/pull/1555)\n* Validate `TypeToken.getParameterized` arguments (https://github.com/google/gson/pull/2166)\n* Fix #1702: Gson.toJson creates CharSequence which does not implement toString (https://github.com/google/gson/pull/1703)\n* Prefer existing adapter for concurrent `Gson.getAdapter` calls (https://github.com/google/gson/pull/2153)\n* Improve `ArrayTypeAdapter` for `Object[]` (https://github.com/google/gson/pull/1716)\n* Improve `AppendableWriter` performance (https://github.com/google/gson/pull/1706)\n\n## Version 2.9.1\n\n* Make `Object` and `JsonElement` deserialization iterative rather than\n  recursive (https://github.com/google/gson/pull/1912)\n* Added parsing support for enum that has overridden toString() method (https://github.com/google/gson/pull/1950)\n* Removed support for building Gson with Gradle (https://github.com/google/gson/pull/2081)\n* Removed obsolete `codegen` hierarchy (https://github.com/google/gson/pull/2099)\n* Add support for reflection access filter (https://github.com/google/gson/pull/1905)\n* Improve `TypeToken` creation validation (https://github.com/google/gson/pull/2072)\n* Add explicit support for `float` in `JsonWriter` (https://github.com/google/gson/pull/2130, https://github.com/google/gson/pull/2132)\n* Fail when parsing invalid local date (https://github.com/google/gson/pull/2134)\n\nAlso many small improvements to javadoc.\n\n## Version 2.9.0\n\n**The minimum supported Java version changes from 6 to 7.**\n\n* Change target Java version to 7 (https://github.com/google/gson/pull/2043)\n* Put `module-info.class` into Multi-Release JAR folder (https://github.com/google/gson/pull/2013)\n* Improve error message when abstract class cannot be constructed (https://github.com/google/gson/pull/1814)\n* Support EnumMap deserialization (https://github.com/google/gson/pull/2071)\n* Add LazilyParsedNumber default adapter (https://github.com/google/gson/pull/2060)\n* Fix JsonReader.hasNext() returning true at end of document (https://github.com/google/gson/pull/2061)\n* Remove Gradle build support. Build script was outdated and not actively\n  maintained anymore (https://github.com/google/gson/pull/2063)\n* Add `GsonBuilder.disableJdkUnsafe()` (https://github.com/google/gson/pull/1904)\n* Add `UPPER_CASE_WITH_UNDERSCORES` in FieldNamingPolicy (https://github.com/google/gson/pull/2024)\n* Fix failing to serialize Collection or Map with inaccessible constructor (https://github.com/google/gson/pull/1902)\n* Improve TreeTypeAdapter thread-safety (https://github.com/google/gson/pull/1976)\n* Fix `Gson.newJsonWriter` ignoring lenient and HTML-safe setting (https://github.com/google/gson/pull/1989)\n* Delete unused LinkedHashTreeMap (https://github.com/google/gson/pull/1992)\n* Make default adapters stricter; improve exception messages (https://github.com/google/gson/pull/2000)\n* Fix `FieldNamingPolicy.upperCaseFirstLetter` uppercasing non-letter (https://github.com/google/gson/pull/2004)\n\n## Version 2.8.9\n\n* Make OSGi bundle's dependency on `sun.misc` optional (https://github.com/google/gson/pull/1993).\n* Deprecate `Gson.excluder()` exposing internal `Excluder` class (https://github.com/google/gson/pull/1986).\n* Prevent Java deserialization of internal classes (https://github.com/google/gson/pull/1991).\n* Improve number strategy implementation (https://github.com/google/gson/pull/1987).\n* Fix LongSerializationPolicy null handling being inconsistent with Gson (https://github.com/google/gson/pull/1990).\n* Support arbitrary Number implementation for Object and Number deserialization (https://github.com/google/gson/pull/1290).\n* Bump proguard-maven-plugin from 2.4.0 to 2.5.1 (https://github.com/google/gson/pull/1980).\n* Don't exclude static local classes (https://github.com/google/gson/pull/1969).\n* Fix `RuntimeTypeAdapterFactory` depending on internal `Streams` class (https://github.com/google/gson/pull/1959).\n* Improve Maven build (https://github.com/google/gson/pull/1964).\n* Make dependency on `java.sql` optional (https://github.com/google/gson/pull/1707).\n\n## Version 2.8.8\n\n* Fixed issue with recursive types (https://github.com/google/gson/issues/1390).\n* Better behaviour with Java 9+ and `Unsafe` if there is a security manager (https://github.com/google/gson/pull/1712).\n* `EnumTypeAdapter` now works better when ProGuard has obfuscated enum fields (https://github.com/google/gson/pull/1495).\n\n## Version 2.8.7\n\n* Fixed `ISO8601UtilsTest` failing on systems with UTC+X.\n* Improved javadoc for `JsonStreamParser`.\n* Updated proguard.cfg (https://github.com/google/gson/pull/1693).\n* Fixed `IllegalStateException` in `JsonTreeWriter` (https://github.com/google/gson/issues/1592).\n* Added `JsonArray.isEmpty()` (https://github.com/google/gson/pull/1640).\n* Added new test cases (https://github.com/google/gson/pull/1638).\n* Fixed OSGi metadata generation to work on JavaSE < 9 (https://github.com/google/gson/pull/1603).\n\n## Version 2.8.6\n_2019-10-04_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.5...gson-parent-2.8.6)\n * Added static methods `JsonParser.parseString` and `JsonParser.parseReader` and deprecated instance method `JsonParser.parse`\n * Java 9 module-info support\n\n## Version 2.8.5\n_2018-05-21_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.4...gson-parent-2.8.5)\n * Print Gson version while throwing AssertionError and IllegalArgumentException\n * Moved `utils.VersionUtils` class to `internal.JavaVersion`. This is a potential backward incompatible change from 2.8.4\n * Fixed issue https://github.com/google/gson/issues/1310 by supporting Debian Java 9\n\n## Version 2.8.4\n_2018-05-01_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.3...gson-parent-2.8.4)\n * Added a new FieldNamingPolicy, `LOWER_CASE_WITH_DOTS` that mapps JSON name `someFieldName` to `some.field.name`\n * Fixed issue https://github.com/google/gson/issues/1305 by removing compile/runtime dependency on `sun.misc.Unsafe`\n\n## Version 2.8.3\n_2018-04-27_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.2...gson-parent-2.8.3)\n * Added a new API, `GsonBuilder.newBuilder()` that clones the current builder\n * Preserving DateFormatter behavior on JDK 9\n * Numerous other bugfixes\n\n## Version 2.8.2\n_2017-09-19_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.1...gson-parent-2.8.2)\n * Introduced a new API, `JsonElement.deepCopy()`\n * Numerous other bugfixes\n\n## Version 2.8.1\n_2017-05-30_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.8.0...gson-parent-2.8.1)\n * New: `JsonObject.keySet()`\n * `@JsonAdapter` annotation can now use `JsonSerializer` and `JsonDeserializer` as well.\n\n## Version 2.8\n_2016-10-26_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.7...gson-parent-2.8.0)\n * New: `TypeToken.getParameterized()` and `TypeToken.getArray()` make it easier to\n   register or look up a `TypeAdapter`.\n * New: `@JsonAdapter(nullSafe=true)` to specify that a custom type adapter handles null.\n\n## Version 2.7\n_2016-06-14_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.6.2...gson-parent-2.7)\n * Added support for JsonSerializer/JsonDeserializer in @JsonAdapter annotation\n * Exposing Gson properties excluder(), fieldNamingStrategy(), serializeNulls(), htmlSafe()\n * Added JsonObject.size() method\n * Added JsonWriter.value(Boolean value) method\n * Using ArrayDeque, ConcurrentHashMap, and other JDK 1.6 features\n * Better error reporting\n * Plenty of other bug fixes\n\n## Version 2.6.2\n_2016-02-26_  [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.6.1...gson-parent-2.6.2)\n * Fixed an NPE bug with @JsonAdapter annotation\n * Added back OSGI manifest\n * Some documentation typo fixes\n\n## Version 2.6.1\n\n_2016-02-11_ [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.6...gson-parent-2.6.1)\n\n * Fix: The 2.6 release targeted Java 1.7, but we intend to target Java 1.6. The\n   2.6.1 release is identical to 2.6, but it targets Java 1.6.\n\n\n## Version 2.6\n\n_2016-02-11_ [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.5...gson-parent-2.6)\n\n * Permit timezones without minutes in the default date adapter.\n * Update reader and writer for RFC 7159. This means that strings, numbers,\n   booleans and null may be top-level values in JSON documents, even if the\n   reader is strict.\n * New `setLenient()` method on `GsonBuilder`. This setting impacts the new\n   factory method `Gson.newJsonReader()`.\n * Adapters discovered with `@JsonAdapter` are now null safe by default.\n\n\n## Version 2.5\n\n_2015-11-24_ [GitHub Diff](https://github.com/google/gson/compare/gson-parent-2.4...gson-parent-2.5)\n\n * Updated minimum JDK version to 1.6\n * Improved Date Deserialization by accepting many date formats\n * Added support for `java.util.Currency`, `AtomicLong`, `AtomicLongArray`, `AtomicInteger`, `AtomicIntegerArray`, `AtomicBoolean`. This change is backward-incompatible because the earlier version of Gson used the default serialization which wasn't intuitive. We hope that these classes are not used enough to actually cause problems in the field.\n * Improved debugging information when some exceptions are thrown\n\n\n## Version 2.4\n\n_2015-10-04_\n\n * **Drop `IOException` from `TypeAdapter.toJson()`.** This is a binary-compatible change, but may\n   cause compiler errors where `IOExceptions` are being caught but no longer thrown. The correct fix\n   for this problem is to remove the unnecessary `catch` clause.\n * New: `Gson.newJsonWriter` method returns configured `JsonWriter` instances.\n * New: `@SerializedName` now works with [AutoValueâ€™s][autovalue] abstract property methods.\n * New: `@SerializedName` permits alternate names when deserializing.\n * New: `JsonWriter#jsonValue` writes raw JSON values.\n * New: APIs to add primitives directly to `JsonArray` instances.\n * New: ISO 8601 date type adapter. Find this in _extras_.\n * Fix: `FieldNamingPolicy` now works properly when running on a device with a Turkish locale.\n  [autovalue]: https://github.com/google/auto/tree/main/value\n\n\n## Version 2.3.1\n\n_2014-11-20_\n\n * Added support to serialize objects with self-referential fields. The self-referential field is set to null in JSON. Previous version of Gson threw a StackOverflowException on encountering any self-referential fields.\n   * The most visible impact of this is that Gson can now serialize Throwable (Exception and Error)\n * Added support for @JsonAdapter annotation on enums which are user defined types\n * Fixed bug in getPath() with array of objects and arrays of arrays\n * Other smaller bug fixes\n\n\n## Version 2.3\n\n_2014-08-11_\n\n * The new @JsonAdapter annotation to specify a Json TypeAdapter for a class field\n * JsonPath support: JsonReader.getPath() method returns the JsonPath expression\n * New public methods in JsonArray (similar to the java.util.List): `contains(JsonElement), remove(JsonElement), remove(int index), set(int index, JsonElement element)`\n * Many other smaller bug fixes\n\n\n## Version 2.2.4\n\n_2013-05-13_\n\n * Fix internal map (LinkedHashTreeMap) hashing bug.\n * Bug fix (Issue 511)\n\n\n## Version 2.2.3\n\n_2013-04-12_\n\n * Fixes for possible DoS attack due to poor String hashing\n\n\n## Version 2.2.2\n\n_2012-07-02_\n\n * Gson now allows a user to override default type adapters for Primitives and Strings. This behavior was allowed in earlier versions of Gson but was prohibited started Gson 2.0. We decided to allow it again: This enables a user to parse 1/0 as boolean values for compatibility with iOS JSON libraries.\n * (Incompatible behavior change in `JsonParser`): In the past, if `JsonParser` encountered a stream that terminated prematurely, it returned `JsonNull`. This behavior wasn't correct because the stream had invalid JSON, not a null. `JsonParser` is now changed to throw `JsonSyntaxException` in this case. Note that if JsonParser (or Gson) encounter an empty stream, they still return `JsonNull`.\n\n\n## Version 2.2.1\n\n_2012-05-05_\n\n * Very minor fixes\n\n\n## Version 2.2\n\n_2012-05-05_\n\n * Added getDelegateAdapter in Gson class\n * Fixed a security bug related to denial of service attack with Java HashMap String collisions.\n\n\n## Version 2.1\n\n_2011-12-30_ (Targeted Dec 31, 2011)\n\n * Support for user-defined streaming type adapters\n * continued performance enhancements\n * Dropped support for type hierarchy instance creators. We don't expect this to be a problem. We'll also detect fewer errors where multiple type adapters can serialize the same type. With APIs like getNextTypeAdapter, this might actually be an improvement!\n\n\n## Version 2.0\n\n_2011-11-13_\n\n#### Faster\n\n * Previous versions first parsed complete document into a DOM-style model (JsonObject or JsonArray) and then bound data against that. Gson 2 does data binding directly from the stream parser.\n\n#### More Predictable\n\n * Objects are serialized and deserialized in the same way, regardless of where they occur in the object graph.\n\n#### Changes to watch out for\n\n  * Gson 1.7 would serialize top-level nulls as \"\". 2.0 serializes them as \"null\".\n    ```\n    String json = gson.toJson(null, Foo.class);\n    1.7: json == \"\"\n    2.0: json == \"null\"\n    ```\n\n  * Gson 1.7 permitted duplicate map keys. 2.0 forbids them.\n    ```\n    String json = \"{'a':1,'a':2}\";\n    Map<String, Integer> map = gson.fromJson(json, mapType);\n    1.7: map == {a=2}\n    2.0: JsonSyntaxException thrown\n    ```\n\n  * Gson 1.7 wonâ€™t serialize subclass fields in collection elements. 2.0 adds this extra information.\n    ```\n    List<Point2d> points = new ArrayList<Point2d>();\n    points.add(new Point3d(1, 2, 3));\n    String json = gson.toJson(points,\n        new TypeToken<List<Point2d>>() {}.getType());\n    1.7: json == \"[{'x':1,'y':2}]\"\n    2.0: json == \"[{'x':1,'y':2,'z':3}]\"\n    ```\n\n  * Gson 1.7 binds single-element arrays as their contents. 2.0 doesnâ€™t.\n    ```\n    Integer i = gson.fromJson(\"[42]\", Integer.class);\n    1.7: i == 42\n    2.0: JsonSyntaxException thrown\n    ```\n\n#### Other changes to be aware of\n * Gson 2.0 doesnâ€™t support type adapters for primitive types.\n * Gson 1.7 uses arbitrary precision for primitive type conversion (so -122.08e-2132 != 0). Gson 2.0 uses double precision (so -122.08e-2132 == 0).\n * Gson 1.7 sets subclass fields when an InstanceCreator returns a subclass when the value is a field of another object. Gson 2.0 sets fields of the requested type only.\n * Gson 1.7 versioning never skips the top-level object. Gson 2.0 versioning applies to all objects.\n * Gson 1.7 truncates oversized large integers. Gson 2.0 fails on them.\n * Gson 2.0 permits integers to have .0 fractions like \"1.0\".\n * Gson 1.7 throws IllegalStateException on circular references. Gson 2.0 lets the runtime throw a StackOverflowError.\n\n\n## Version 1.7.2\n\n_2011-09-30_ (Unplanned release)\n * Fixed a threading issue in FieldAttributes (Issue 354)\n\n\n## Version 1.7.1\n\n_2011-04-13_ (Unplanned release)\n\n * Fixed Gson jars in Maven Central repository\n * Removed assembly-descriptor.xml and maven pom.xml/pom.properties files from Gson binary jar. This also ensures that jarjar can be run correctly on Gson.\n\n\n## Version 1.7\n\n_2011-04-12_ (Targeted: Jan 2011)\n\n * No need to define no-args constructors for classes serialized with Gson\n * Ability to register a hierarchical type adapter\n * Support for serialization and deserialization of maps with complex keys\n * Serialization and deserialization specific exclusion strategies\n * Allow concrete data structure fields without type adapters\n * Fixes \"type\" management (i.e. Wildcards, etc.)\n * Major performance enhancements by reducing the need for Java reflection\nSee detailed announcement at this thread in the Gson Google Group.\n\n\n## Version 1.6\n\n_2010-11-24_ (Targeted: Oct, 2010)\n\n * New stream parser APIs\n * New parser that improves parsing performance significantly\n\n\n## Version 1.5\n\n_2010-08-19_ (Target Date: Aug 18, 2010)\n\n * Added `UPPER_CAMEL_CASE_WITH_SPACES` naming policy\n * Added SQL date and time support\n * A number of performance improvements: Using caching of field annotations for speeding up reflection, replacing recursive calls in the parser with a for loop.\n\n\n## Version 1.4 BETA\n\n_2009_10_09_\n\n * JsonStreamParser: A streaming parser API class to deserialize multiple JSON objects on a stream (such as a pipelined HTTP response)\n * Raised the deserialization limit for byte and object arrays and collection to over 11MB from 80KB. See issue 96.\n * While serializing, Gson now uses the actual type of a field. This allows serialization of base-class references holding sub-classes to the JSON for the sub-class. It also allows serialization of raw collections. See Issue 155, 156.\n * Added a `Gson.toJsonTree()` method that serializes a Java object to a tree of JsonElements. See issue 110.\n * Added a `Gson.fromJson(JsonElement)` method that deserializes from a Json parse tree.\n * Updated `Expose` annotation to contain parameters serialize and deserialize to control whether a field gets serialized or deserialized. See issue 146.\n * Added a new naming policy `LOWER_CASE_WITH_DASHES`\n * Default date type adapter is now thread-safe. See Issue 162.\n * `JsonElement.toString()` now outputs valid JSON after escaping characters properly. See issue 154.\n * `JsonPrimitive.equals()` now returns true for two numbers if their values are equal. All integral types (long, int, short, byte, BigDecimal, Long, Integer, Short, Byte) are treated equivalent for comparison. Similarly, floating point types (double, float, BigDecimal, Double, Float) are treated equivalent as well. See issue 147.\n * Fixed bugs in pretty printing. See issue 153.\n * If a field causes circular reference error, Gson lists the field name instead of the object value. See issue 118.\n * Gson now serializes a list with null elements correctly. See issue 117.\n * Fixed issue 121, 123, 126.\n * Support user defined exclusion strategies (Feature Request 138).\n\n\n## Version 1.3\n\n_2009-04-01_\n\n * Fix security token to remove the `<data>` element.\n * Changed JsonParser.parse method to be non-static\n * Throw JsonParseExceptions instead of ClassCastExceptions and UnsupportedOperationExceptions\n\n\n## Version 1.3 beta3\n\n_2009-03-17_\n\n * Supported custom mapping of field names by making `FieldNamingStrategy` public and allowing `FieldNamingStrategy` to be set in GsonBuilder. See issue 104.\n * Added a new GsonBuilder setting `generateNonExecutableJson()` that prefixes the generated JSON with some text to make the output non-executable Javascript. Gson now recognizes this text from input while deserializing and filters it out. This feature is meant to prevent script sourcing attacks. See Issue 42.\n * Supported deserialization of sets with elements that do not implement Comparable. See Issue 100\n * Supported deserialization of floating point numbers without a sign after E. See Issue 94\n\n\n## Version 1.3 beta2\n\n_2009-02-05_\n\n * Added a new Parser API. See issue 65\n * Supported deserialization of java.util.Properties. See Issue 87\n * Fixed the pretty printing of maps. See Issue 93\n * Supported automatic conversion of strings into numeric and boolean types if possible. See Issue 89\n * Supported deserialization of longs into strings. See Issue 82\n\n\n## Version 1.3 beta1\n\n_2009_01_ (Target Date Friday, Dec 15, 2008)\n\n * Made JSON parser lenient by allowing unquoted member names while parsing. See Issue 41\n * Better precision handling for floating points. See Issue 71, 72\n * Support for deserialization of special double values: NaN, infinity and negative infinity. See Issue 81\n * Backward compatibility issue found with serialization of `Collection<Object>` type.  See Issue 73 and 83.\n * Able to serialize null keys and/or values within a Map.  See Issue 77\n * Deserializing non-String value keys for Maps.  See Issue 85.\n\n * Support for clashing field name.  See Issue 76.\n * Removed the need to invoke instance creator if a deserializer is registered. See issues 37 and 69.\n * Added default support for java.util.UUID. See Issue 79\n * Changed `Gson.toJson()` methods to use `Appendable` instead of `Writer`. Issue 52. This requires that clients recompile their source code that uses Gson.\n\n\n## Version 1.2.3\n\n_2008-11-15_ (Target Date Friday, Oct 31, 2008)\n\n * Added support to serialize raw maps. See issue 45\n * Made Gson thread-safe by fixing Issue 63\n * Fixed Issue 68 to allow default type adapters for primitive types to be replaced by custom type adapters.\n * Relaxed the JSON parser to accept escaped slash (\\/) as a valid character in the string. See Issue 66\n\n\n## Version 1.2.2\n\n_2008-10-14_ (Target Date: None, Unplanned)\n\n * This version was released to fix Issue 58 which caused a regression bug in version 1.2.1. It includes the contents from the release 1.2.1\n\n\n## Version 1.2.1\n\n_2008-10-13_ (Target Date Friday, Oct 7, 2008)\n\n**Note:** This release was abandoned since it caused a regression (Issue 58) bug.\n\n * Includes updated parser for JSON that supports much larger strings. For example, Gson 1.2 failed at parsing a 100k string, Gson 1.2.1 has successfully parsed strings of size 15-20MB. The parser also is faster and consumes less memory since it uses a token match instead of a recursion-based Grammar production match. See Issue 47.\n * Gson now supports field names with single quotes ' in addition to double quotes \". See Issue 55.\n * Includes bug fixes for issue 46, 49, 51, 53, 54, and 56.\n\n\n## Version 1.2\n\n_2008-08-29_ (Target Date Tuesday Aug 26, 2008)\n\n * Includes support for feature requests 21, 24, 29\n * Includes bug fixes for Issue 22, Issue 23, Issue 25, Issue 26, Issue 32 , Issue 34, Issue 35, Issue 36, Issue 37, Issue 38, Issue 39\n * Performance enhancements (see r137)\n * Documentation updates\n\n\n## Version 1.1.1\n\n_2008-07-18_ (Target Date Friday, Aug 1, 2008)\n\n * Includes fixes for Issue 19, Partial fix for Issue 20\n\n\n## Version 1.1\n\n_2008-07-01_ (Target Date Thursday, July 3, 2008)\n\n * Includes fixes for Issue 9, Issue 16, Issue 18\n\n\n## Version 1.0.1\n\n_2008-06-17_ (Target Date Friday,  Jun 13, 2008)\n\n * Includes fixes for Issue 15, Issue 14, Issue 3, Issue 8\n * Javadoc improvements\n"
        },
        {
          "name": "GsonDesignDocument.md",
          "type": "blob",
          "size": 6.75,
          "content": "# Gson Design Document\n\nThis document presents issues that we faced while designing Gson. It is meant for advanced users or developers working on Gson. If you are interested in learning how to use Gson, see its user guide.\n\nSome information in this document is outdated and does not reflect the current state of Gson. This information can however still be relevant for understanding the history of Gson.\n\n## Navigating the Json tree or the target Type Tree while deserializing\n\nWhen you are deserializing a Json string into an object of desired type, you can either navigate the tree of the input, or the type tree of the desired type. Gson uses the latter approach of navigating the type of the target object. This keeps you in tight control of instantiating only the type of objects that you are expecting (essentially validating the input against the expected \"schema\"). By doing this, you also ignore any extra fields that the Json input has but were not expected.\n\nAs part of Gson, we wrote a general purpose ObjectNavigator that can take any object and navigate through its fields calling a visitor of your choice.\n\n## Supporting richer serialization semantics than deserialization semantics\n\nGson supports serialization of arbitrary collections, but can only deserialize genericized collections. this means that Gson can, in some cases, fail to deserialize Json that it wrote. This is primarily a limitation of the Java type system since when you encounter a Json array of arbitrary types there is no way to detect the types of individual elements. We could have chosen to restrict the serialization to support only generic collections, but chose not to. This is because often the user of the library are concerned with either serialization or deserialization, but not both. In such cases, there is no need to artificially restrict the serialization capabilities.\n\n## Supporting serialization and deserialization of classes that are not under your control and hence can not be modified\n\nSome Json libraries use annotations on fields or methods to indicate which fields should be used for Json serialization. That approach essentially precludes the use of classes from JDK or third-party libraries. We solved this problem by defining the notion of custom serializers and deserializers. This approach is not new, and was used by the JAX-RPC technology to solve essentially the same problem.\n\n## Using Checked vs Unchecked exceptions to indicate a parsing error\n\nWe chose to use unchecked exceptions to indicate a parsing failure. This is primarily done because usually the client can not recover from bad input, and hence forcing them to catch a checked exception results in sloppy code in the `catch()` block.\n\n## Creating class instances for deserialization\n\nGson needs to create a dummy class instance before it can deserialize Json data into its fields. We could have used Guice to get such an instance, but that would have resulted in a dependency on Guice. Moreover, it probably would have done the wrong thing since Guice is expected to return a valid instance, whereas we need to create a dummy one. Worse, Gson would overwrite the fields of that instance with the incoming data thereby modifying the instance for all subsequent Guice injections. This is clearly not a desired behavior. Hence, we create class instances by invoking the parameterless constructor. We also handle the primitive types, enums, collections, sets, maps and trees as a special case.\n\nTo solve the problem of supporting unmodifiable types, we use custom instance creators. So, if you want to use a library type that does not define a default constructor (for example, `Money` class), then you can register an instance creator that returns a dummy instance when asked.\n\n## Using fields vs getters to indicate Json elements\n\nSome Json libraries use the getters of a type to deduce the Json elements. We chose to use all fields (up the inheritance hierarchy) that are not transient, static, or synthetic. We did this because not all classes are written with suitably named getters. Moreover, `getXXX` or `isXXX` might be semantic rather than indicating properties.\n\nHowever, there are good arguments to support properties as well. We intend to enhance Gson in a later version to support properties as an alternate mapping for indicating Json fields. For now, Gson is fields-based.\n\n## Why are most classes in Gson marked as final?\n\nWhile Gson provides a fairly extensible architecture by providing pluggable serializers and deserializers, Gson classes were not specifically designed to be extensible. Providing non-final classes would have allowed a user to legitimately extend Gson classes, and then expect that behavior to work in all subsequent revisions. We chose to limit such use-cases by marking classes as final, and waiting until a good use-case emerges to allow extensibility. Marking a class final also has a minor benefit of providing additional optimization opportunities to Java compiler and virtual machine.\n\n## Why are inner interfaces and classes used heavily in Gson?\n\nGson uses inner classes substantially. Many of the public interfaces are inner interfaces too (see `JsonSerializer.Context` or `JsonDeserializer.Context` as an example). These are primarily done as a matter of style. For example, we could have moved `JsonSerializer.Context` to be a top-level class `JsonSerializerContext`, but chose not to do so. However, if you can give us good reasons to rename it alternately, we are open to changing this philosophy.\n\n## Why do you provide two ways of constructing Gson?\n\nGson can be constructed in two ways: by invoking `new Gson()` or by using a `GsonBuilder`. We chose to provide a simple no-args constructor to handle simple use-cases for Gson where you want to use default options, and quickly want to get going with writing code. For all other situations, where you need to configure Gson with options such as formatters, version controls etc., we use a builder pattern. The builder pattern allows a user to specify multiple optional settings for what essentially become constructor parameters for Gson.\n\n## Comparing Gson with alternate approaches\n\nNote that these comparisons were done while developing Gson so these date back to mid to late 2007.\n\n### Comparing Gson with org.json library\n\norg.json is a much lower-level library that can be used to write a `toJson()` method in a class. If you can not use Gson directly (maybe because of platform restrictions regarding reflection), you could use org.json to hand-code a `toJson` method in each object.\n\n### Comparing Gson with org.json.simple library\n\norg.json.simple library is very similar to org.json library and hence fairly low level. The key issue with this library is that it does not handle exceptions very well. In some cases it appeared to just eat the exception while in other cases it throws an \"Error\" rather than an exception.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.060546875,
          "content": "# Gson\n\nGson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object.\nGson can work with arbitrary Java objects including pre-existing objects that you do not have source-code of.\n\nThere are a few open-source projects that can convert Java objects to JSON. However, most of them require that you place Java annotations in your classes; something that you can not do if you do not have access to the source-code. Most also do not fully support the use of Java Generics. Gson considers both of these as very important design goals.\n\n> [!NOTE]\\\n> Gson is currently in maintenance mode; existing bugs will be fixed, but large new features will likely not be added. If you want to add a new feature, please first search for existing GitHub issues, or create a new one to discuss the feature and get feedback.\n\n> [!IMPORTANT]\\\n> Gson's main focus is on Java. Using it with other JVM languages such as Kotlin or Scala might work fine in many cases, but language-specific features such as Kotlin's non-`null` types or constructors with default arguments are not supported. This can lead to confusing and incorrect behavior.\\\n> When using languages other than Java, prefer a JSON library with explicit support for that language.\n\n### Goals\n  * Provide simple `toJson()` and `fromJson()` methods to convert Java objects to JSON and vice-versa\n  * Allow pre-existing unmodifiable objects to be converted to and from JSON\n  * Extensive support of Java Generics\n  * Allow custom representations for objects\n  * Support arbitrarily complex objects (with deep inheritance hierarchies and extensive use of generic types)\n\n### Download\n\nGradle:\n```gradle\ndependencies {\n  implementation 'com.google.code.gson:gson:2.11.0'\n}\n```\n\nMaven:\n```xml\n<dependency>\n  <groupId>com.google.code.gson</groupId>\n  <artifactId>gson</artifactId>\n  <version>2.11.0</version>\n</dependency>\n```\n\n[Gson jar downloads](https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson) are available from Maven Central.\n\n![Build Status](https://github.com/google/gson/actions/workflows/build.yml/badge.svg)\n\n### Requirements\n#### Minimum Java version\n- Gson 2.12.0 and newer: Java 8\n- Gson 2.9.0 to 2.11.0: Java 7\n- Gson 2.8.9 and older: Java 6\n\nDespite supporting older Java versions, Gson also provides a JPMS module descriptor (module name `com.google.gson`) for users of Java 9 or newer.\n\n#### JPMS dependencies (Java 9+)\nThese are the optional Java Platform Module System (JPMS) JDK modules which Gson depends on.\nThis only applies when running Java 9 or newer.\n\n- `java.sql` (optional since Gson 2.8.9)\\\nWhen this module is present, Gson provides default adapters for some SQL date and time classes.\n\n- `jdk.unsupported`, respectively class `sun.misc.Unsafe` (optional)\\\nWhen this module is present, Gson can use the `Unsafe` class to create instances of classes without no-args constructor.\nHowever, care should be taken when relying on this. `Unsafe` is not available in all environments and its usage has some pitfalls,\nsee [`GsonBuilder.disableJdkUnsafe()`](https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/GsonBuilder.html#disableJdkUnsafe()).\n\n#### Minimum Android API level\n\n- Gson 2.11.0 and newer: API level 21\n- Gson 2.10.1 and older: API level 19\n\nOlder Gson versions may also support lower API levels, however this has not been verified.\n\n### Documentation\n  * [API Javadoc](https://www.javadoc.io/doc/com.google.code.gson/gson): Documentation for the current release\n  * [User guide](UserGuide.md): This guide contains examples on how to use Gson in your code\n  * [Troubleshooting guide](Troubleshooting.md): Describes how to solve common issues when using Gson\n  * [Releases and change log](https://github.com/google/gson/releases): Latest releases and changes in these versions; for older releases see [`CHANGELOG.md`](CHANGELOG.md)\n  * [Design document](GsonDesignDocument.md): This document discusses issues we faced while designing Gson. It also includes a comparison of Gson with other Java libraries that can be used for Json conversion\n\nPlease use the ['gson' tag on StackOverflow](https://stackoverflow.com/questions/tagged/gson), [GitHub Discussions](https://github.com/google/gson/discussions) or the [google-gson Google group](https://groups.google.com/group/google-gson) to discuss Gson or to post questions.\n\n### Related Content Created by Third Parties\n  * [Gson Tutorial](https://www.studytrails.com/java/json/java-google-json-introduction/) by `StudyTrails`\n  * [Gson Tutorial Series](https://futurestud.io/tutorials/gson-getting-started-with-java-json-serialization-deserialization) by `Future Studio`\n  * [Gson API Report](https://abi-laboratory.pro/java/tracker/timeline/gson/)\n\n### Building\n\nGson uses Maven to build the project:\n```\nmvn clean verify\n```\n\nJDK 11 or newer is required for building, JDK 17 or 21 is recommended. Newer JDKs are currently not supported for building (but are supported when _using_ Gson).\n\n### Contributing\n\nSee the [contributing guide](https://github.com/google/.github/blob/master/CONTRIBUTING.md).\\\nPlease perform a quick search to check if there are already existing issues or pull requests related to your contribution.\n\nKeep in mind that Gson is in maintenance mode. If you want to add a new feature, please first search for existing GitHub issues, or create a new one to discuss the feature and get feedback.\n\n### License\n\nGson is released under the [Apache 2.0 license](LICENSE).\n\n```\nCopyright 2008 Google Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n### Disclaimer\n\nThis is not an officially supported Google product.\n"
        },
        {
          "name": "ReleaseProcess.md",
          "type": "blob",
          "size": 6.7939453125,
          "content": "# Gson Release Process\n\nThe following is a step-by-step procedure for releasing a new version of Google-Gson.\n\n1. Go through all open bugs and identify which will be fixed in this release. Mark all others with an appropriate release tag. Identify duplicates, and close the bugs that will never be fixed. Fix all bugs for the release, and mark them fixed.\n1. Ensure all changelists are code-reviewed and have +1\n1. `cd gson` to the parent directory; ensure there are no open files and all changes are committed.\n1. Run `mvn release:clean`\n1. Start the release: `mvn release:prepare`\n    - Answer questions: usually the defaults are fine. Try to follow [Semantic Versioning](https://semver.org/) when choosing the release version number.\n    - This will do a full build, change version from `-SNAPSHOT` to the released version, commit and create the tags. It will then change the version to `-SNAPSHOT` for the next release.\n1. Complete the release: `mvn release:perform`\n1. [Log in to Nexus repository manager](https://oss.sonatype.org/index.html#welcome) at Sonatype and close the staging repository for Gson.\n1. Download and sanity check all downloads. Do not skip this step! Once you release the staging repository, there is no going back. It will get synced with Maven Central and you will not be able to update or delete anything. Your only recourse will be to release a new version of Gson and hope that no one uses the old one.\n1. Release the staging repository for Gson. Gson will now get synced to Maven Central with-in the next hour. For issues consult [Sonatype Guide](https://central.sonatype.org/publish/release/).\n1. Create a [GitHub release](https://github.com/google/gson/releases) for the new version. You can let GitHub [automatically generate the description for the release](https://docs.github.com/en/repositories/releasing-projects-on-github/automatically-generated-release-notes), but you should edit it manually to point out the most important changes and potentially incompatible changes.\n1. Update version references in (version might be referenced multiple times):\n    - [`README.md`](README.md)\n    - [`UserGuide.md`](UserGuide.md)\n\n    Note: When using the Maven Release Plugin as described above, these version references should have been replaced automatically, but verify this manually nonetheless to be on the safe side.\n1. Optional: Create a post on the [Gson Discussion Forum](https://groups.google.com/group/google-gson).\n1. Optional: Update the release version in [Wikipedia](https://en.wikipedia.org/wiki/Gson) and update the current \"stable\" release.\n\nImportant: When aborting a release / rolling back release preparations, make sure to also revert all changes to files which were done during the release (e.g. automatic replacement of version references).\n\n## Configuring a machine for deployment to Sonatype Repository\n\nThis section was borrowed heavily from [Doclava release process](https://code.google.com/archive/p/doclava/wikis/ProcessRelease.wiki).\n\n1. Install/Configure GPG following this [guide](https://blog.sonatype.com/2010/01/how-to-generate-pgp-signatures-with-maven/).\n1. [Create encrypted passwords](https://maven.apache.org/guides/mini/guide-encryption.html).\n1. Create `~/.m2/settings.xml` similar to as described in [Doclava release process](https://code.google.com/p/doclava/wiki/ProcessRelease).\n1. Now for deploying a snapshot repository, use `mvn deploy`.\n\n## Getting Maven Publishing Privileges\n\nSee [OSSRH Publish Guide](https://central.sonatype.org/publish/publish-guide/).\n\n## Testing Maven release workflow locally\n\nThe following describes how to perform the steps of the release locally to verify that they work as desired.\n\n**Warning:** Be careful with this, these steps might be outdated or incomplete. Doublecheck that you are working on a copy of your local Gson Git repository and make sure you have followed all steps. To be safe you can also temporarily turn off your internet connection to avoid accidentally pushing changes to the real remote Git or Maven repository.\\\nAs an alternative to the steps described below you can instead [perform a dry run](https://maven.apache.org/maven-release/maven-release-plugin/usage.html#do-a-dry-run), though this might not behave identical to a real release.\n\n1. Make a copy of your local Gson Git repository and only work with that copy\n2. Make sure you are on the `main` branch\n3. Create a temp directory outside the Gson directory\\\n   In the following steps this will be called `#gson-remote-temp#`; replace this with the actual absolute file path of the directory, using only forward slashes. For example under Windows `C:\\my-dir` becomes `C:/my-dir`.\n4. Create the directory `#gson-remote-temp#/git-repo`\n5. In that directory run\n\n    ```sh\n    git init --bare --initial-branch=main .\n    ```\n\n6. Create the directory `#gson-remote-temp#/maven-repo`\n7. Edit the root `pom.xml` of Gson\n    1. Change the `<developerConnection>` to\n\n       ```txt\n       scm:git:file:///#gson-remote-temp#/git-repo\n       ```\n\n    2. Change the `<url>` of the `<distributionManagement>` to\n\n       ```txt\n       file:///#gson-remote-temp#/maven-repo\n       ```\n\n    3. If you don't want to use GPG, remove the `maven-gpg-plugin` entry from the 'release' profile.\\\n       There is also an entry under `<pluginManagement>`; you can remove that as well.\n8. Commit the changes using Git\n9. Change the remote repository of the Git project\n\n    <!-- Uses `txt` instead of `sh` to avoid the `#` being highlighted in some way -->\n    ```txt\n    git remote set-url origin file:///#gson-remote-temp#/git-repo\n    ```\n\n10. Push the changes\n\n    ```sh\n    git push origin main\n    ```\n\nNow you can perform the steps of the release:\n\n1. ```sh\n   mvn release:clean\n   ```\n\n2. ```sh\n   mvn release:prepare\n   ```\n\n3. ```sh\n   mvn release:perform\n   ```\n\n4. Verify that `#gson-remote-temp#/git-repo` and `#gson-remote-temp#/maven-repo` contain all the desired changes\n5. Afterwards delete all Gson files under `${user.home}/.m2/repository/com/google/code/gson` which have been installed in your local Maven repository during the release.\\\n   Otherwise Maven might not download the real Gson artifacts with these version numbers, once they are released.\n\n## Running Benchmarks or Tests on Android\n\n* Download vogar\n* Put `adb` on your `$PATH` and run:\n\n  ```bash\n  vogar --benchmark --classpath gson.jar path/to/Benchmark.java\n  ```\n\nFor example, here is how to run the [CollectionsDeserializationBenchmark](gson/src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java):\n\n```bash\nexport ANDROID_HOME=~/apps/android-sdk-mac_x86\nexport PATH=$PATH:$ANDROID_HOME/platform-tools/:$ANDROID_HOME/android-sdk-mac_x86/tools/\n$VOGAR_HOME/bin/vogar \\\n    --benchmark \\\n    --sourcepath ../gson/src/main/java/ \\\n    src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java \\\n    -- \\\n    --vm \"app_process -Xgc:noconcurrent,app_process\"\n```\n"
        },
        {
          "name": "Troubleshooting.md",
          "type": "blob",
          "size": 32.4794921875,
          "content": "# Troubleshooting Guide\n\nThis guide describes how to troubleshoot common issues when using Gson.\n\n<!-- The '<a id=\"...\"></a>' anchors below are used to create stable links; don't remove or rename them -->\n<!-- Use only lowercase IDs, GitHub seems to not support uppercase IDs, see also https://github.com/orgs/community/discussions/50962 -->\n\n## <a id=\"class-cast-exception\"></a> `ClassCastException` when using deserialized object\n\n**Symptom:** `ClassCastException` is thrown when accessing an object deserialized by Gson\n\n**Reason:**\n\n- Your code is most likely not type-safe\n- Or, you have not configured code shrinking tools such as ProGuard or R8 correctly\n\n**Solution:** Make sure your code adheres to the following:\n\n- Avoid raw types: Instead of calling `fromJson(..., List.class)`, create for example a `TypeToken<List<MyClass>>`.\n  See the [user guide](UserGuide.md#collections-examples) for more information.\n- When using `TypeToken` prefer the `Gson.fromJson` overloads with `TypeToken` parameter such as [`fromJson(Reader, TypeToken)`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/Gson.html#fromJson(java.io.Reader,com.google.gson.reflect.TypeToken)).\n  The overloads with `Type` parameter do not provide any type-safety guarantees.\n- When using `TypeToken` make sure you don't capture a type variable. For example avoid something like `new TypeToken<List<T>>()` (where `T` is a type variable). Due to Java [type erasure](https://dev.java/learn/generics/type-erasure/) the actual type of `T` is not available at runtime. Refactor your code to pass around `TypeToken` instances or use [`TypeToken.getParameterized(...)`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/reflect/TypeToken.html#getParameterized(java.lang.reflect.Type,java.lang.reflect.Type...)), for example `TypeToken.getParameterized(List.class, elementType)` where `elementType` is a type you have to provide separately.\n\nIf you are using a code shrinking tool such as ProGuard or R8 (for example when building an Android app), make sure it is correctly configured to keep generic signatures and to keep Gson's `TypeToken` class. See the [Android example](examples/android-proguard-example/README.md) for more information.\n\n## <a id=\"reflection-inaccessible\"></a> `InaccessibleObjectException`: 'module ... does not \"opens ...\" to unnamed module'\n\n**Symptom:** An exception with a message in the form 'module ... does not \"opens ...\" to unnamed module' is thrown\n\n**Reason:** You use Gson by accident to access internal fields of third-party classes\n\n**Solution:** Write custom Gson [`TypeAdapter`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/TypeAdapter.html) implementations for the affected classes or change the type of your data.\nIf you already wrote a custom adapter, but it is not used, see [this troubleshooting point](#custom-adapter-not-used).\\\nIf this occurs for a field in one of your classes which you did not actually want to serialize or deserialize in the first place, you can exclude that field, see the [user guide](UserGuide.md#excluding-fields-from-serialization-and-deserialization).\n\n**Explanation:**\n\nWhen no built-in adapter for a type exists and no custom adapter has been registered, Gson falls back to using reflection to access the fields of a class (including `private` ones). Most likely you are seeing this error because you (by accident) rely on the reflection-based adapter for third-party classes. That should be avoided because you make yourself dependent on the implementation details of these classes which could change at any point. For the JDK it is also not possible anymore to access internal fields using reflection starting with JDK 17, see [JEP 403](https://openjdk.org/jeps/403).\n\nIf you want to prevent using reflection on third-party classes in the future you can write your own [`ReflectionAccessFilter`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/ReflectionAccessFilter.html) or use one of the predefined ones, such as `ReflectionAccessFilter.BLOCK_ALL_PLATFORM`.\n\n## <a id=\"reflection-inaccessible-to-module-gson\"></a> `InaccessibleObjectException`: 'module ... does not \"opens ...\" to module com.google.gson'\n\n**Symptom:** An exception with a message in the form 'module ... does not \"opens ...\" to module com.google.gson' is thrown\n\n**Reason:**\n\n- If the reported package is your own package then you have not configured the module declaration of your project to allow Gson to use reflection on your classes.\n- If the reported package is from a third party library or the JDK see [this troubleshooting point](#inaccessibleobjectexception-module--does-not-opens--to-unnamed-module).\n\n**Solution:** Make sure the `module-info.java` file of your project allows Gson to use reflection on your classes, for example:\n\n```java\nmodule mymodule {\n    requires com.google.gson;\n\n    opens mypackage to com.google.gson;\n}\n```\n\nOr in case this occurs for a field in one of your classes which you did not actually want to serialize or deserialize in the first place, you can exclude that field, see the [user guide](UserGuide.md#excluding-fields-from-serialization-and-deserialization).\n\n## <a id=\"android-app-random-names\"></a> Android app not working in Release mode; random property names\n\n**Symptom:** Your Android app is working fine in Debug mode but fails in Release mode and the JSON properties have seemingly random names such as `a`, `b`, ...\n\n**Reason:** You probably have not configured ProGuard / R8 correctly\n\n**Solution:** Make sure you have configured ProGuard / R8 correctly to preserve the names of your fields. See the [Android example](examples/android-proguard-example/README.md) for more information.\n\n## <a id=\"android-app-broken-after-app-update\"></a> Android app unable to parse JSON after app update\n\n**Symptom:** You released a new version of your Android app and it fails to parse JSON data created by the previous version of your app\n\n**Reason:** You probably have not configured ProGuard / R8 correctly; probably the field names are being obfuscated and their naming changed between the versions of your app\n\n**Solution:** Make sure you have configured ProGuard / R8 correctly to preserve the names of your fields. See the [Android example](examples/android-proguard-example/README.md) for more information.\n\nIf you want to preserve backward compatibility for you app you can use [`@SerializedName`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/annotations/SerializedName.html) on the fields to specify the obfuscated name as alternate, for example: `@SerializedName(value = \"myprop\", alternate = \"a\")`\n\nNormally ProGuard and R8 produce a mapping file, this makes it easier to find out the obfuscated field names instead of having to find them out through trial and error or other means. See the [Android Studio user guide](https://developer.android.com/studio/build/shrink-code.html#retracing) for more information.\n\n## <a id=\"default-field-values-missing\"></a> Default field values not present after deserialization\n\n**Symptom:** You have assign default values to fields but after deserialization the fields have their standard value (such as `null` or `0`)\n\n**Reason:** Gson cannot invoke the constructor of your class and falls back to JDK `Unsafe` (or similar means)\n\n**Solution:** Make sure that the class:\n\n- is `static` (explicitly or implicitly when it is a top-level class)\n- has a no-args constructor\n\nOtherwise Gson will by default try to use JDK `Unsafe` or similar means to create an instance of your class without invoking the constructor and without running any initializers. You can also disable that behavior through [`GsonBuilder.disableJdkUnsafe()`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/GsonBuilder.html#disableJdkUnsafe()) to notice such issues early on.\n\n## <a id=\"anonymous-local-null\"></a> `null` values for anonymous and local classes\n\n**Symptom:** Objects of a class are always serialized as JSON `null` / always deserialized as Java `null`\n\n**Reason:** The class you are serializing or deserializing is an anonymous or a local class (or you have specified a custom `ExclusionStrategy`)\n\n**Solution:** Convert the class to a `static` nested class. If the class is already `static` make sure you have not specified a Gson `ExclusionStrategy` which might exclude the class.\n\nNotes:\n\n- \"double brace-initialization\" also creates anonymous classes\n- Local record classes (feature added in Java 16) are supported by Gson and are not affected by this\n\n## <a id=\"map-key-wrong-json\"></a> Map keys having unexpected format in JSON\n\n**Symptom:** JSON output for `Map` keys is unexpected / cannot be deserialized again\n\n**Reason:** The `Map` key type is 'complex' and you have not configured the `GsonBuilder` properly\n\n**Solution:** Use [`GsonBuilder.enableComplexMapKeySerialization()`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/GsonBuilder.html#enableComplexMapKeySerialization()). See also the [user guide](UserGuide.md#maps-examples) for more information.\n\n## <a id=\"malformed-json\"></a> Parsing JSON fails with `MalformedJsonException`\n\n**Symptom:** JSON parsing fails with `MalformedJsonException`\n\n**Reason:** The JSON data is actually malformed\n\n**Solution:** During debugging, log the JSON data right before calling Gson methods or set a breakpoint to inspect the data and make sure it has the expected format. Sometimes APIs might return HTML error pages (instead of JSON data) when reaching rate limits or when other errors occur. Also read the location information of the `MalformedJsonException` exception message, it indicates where exactly in the document the malformed data was detected, including the [JSONPath](https://goessner.net/articles/JsonPath/).\n\nFor example, let's assume you want to deserialize the following JSON data:\n\n```json\n{\n  \"languages\": [\n    \"English\",\n    \"French\",\n  ]\n}\n```\n\nThis will fail with an exception similar to this one: `MalformedJsonException: Use JsonReader.setStrictness(Strictness.LENIENT) to accept malformed JSON at line 5 column 4 path $.languages[2]`\\\nThe problem here is the trailing comma (`,`) after `\"French\"`, trailing commas are not allowed by the JSON specification. The location information \"line 5 column 4\" points to the `]` in the JSON data (with some slight inaccuracies) because Gson expected another value after `,` instead of the closing `]`. The JSONPath `$.languages[2]` in the exception message also points there: `$.` refers to the root object, `languages` refers to its member of that name and `[2]` refers to the (missing) third value in the JSON array value of that member (numbering starts at 0, so it is `[2]` instead of `[3]`).\\\nThe proper solution here is to fix the malformed JSON data.\n\nTo spot syntax errors in the JSON data easily you can open it in an editor with support for JSON, for example Visual Studio Code. It will highlight within the JSON data the error location and show why the JSON data is considered invalid.\n\n## <a id=\"number-parsed-as-double\"></a> Integral JSON number is parsed as `double`\n\n**Symptom:** JSON data contains an integral number such as `45` but Gson returns it as `double`\n\n**Reason:** When parsing a JSON number as `Object`, Gson will by default always return a `double`\n\n**Solution:** Use [`GsonBuilder.setObjectToNumberStrategy`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/GsonBuilder.html#setObjectToNumberStrategy(com.google.gson.ToNumberStrategy)) to specify what type of number should be returned\n\n## <a id=\"default-lenient\"></a> Malformed JSON not rejected\n\n**Symptom:** Gson parses malformed JSON without throwing any exceptions\n\n**Reason:** Due to legacy reasons Gson performs parsing by default in lenient mode\n\n**Solution:** If you are using Gson 2.11.0 or newer, call [`GsonBuilder.setStrictness`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/GsonBuilder.html#setStrictness(com.google.gson.Strictness)),\n[`JsonReader.setStrictness`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/stream/JsonReader.html#setStrictness(com.google.gson.Strictness))\nand [`JsonWriter.setStrictness`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/stream/JsonWriter.html#setStrictness(com.google.gson.Strictness))\nwith `Strictness.STRICT` to overwrite the default lenient behavior of `Gson` and make these classes strictly adhere to the JSON specification.\nOtherwise if you are using an older Gson version, see the [`Gson` class documentation](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/Gson.html#default-lenient)\nsection \"JSON Strictness handling\" for alternative solutions.\n\n## <a id=\"unexpected-json-structure\"></a> `IllegalStateException`: \"Expected ... but was ...\"\n\n**Symptom:** An `IllegalStateException` with a message in the form \"Expected ... but was ...\" is thrown\n\n**Reason:**\n\n- The JSON data does not have the correct format\n- Or, Gson has no built-in adapter for a type and tries to deserialize it as JSON object\n\n**Solution:** Make sure that your classes correctly model the JSON data. Also during debugging log the JSON data right before calling Gson methods or set a breakpoint to inspect the data and make sure it has the expected format. Read the location information of the exception message, it indicates where exactly in the document the error occurred, including the [JSONPath](https://goessner.net/articles/JsonPath/).\n\nFor example, let's assume you have the following Java class:\n\n```java\nclass WebPage {\n    String languages;\n}\n```\n\nAnd you want to deserialize the following JSON data:\n\n```json\n{\n  \"languages\": [\"English\", \"French\"]\n}\n```\n\nThis will fail with an exception similar to this one: `IllegalStateException: Expected a string but was BEGIN_ARRAY at line 2 column 17 path $.languages`\\\nThis means Gson expected a JSON string value but found the beginning of a JSON array (`[`). The location information \"line 2 column 17\" points to the `[` in the JSON data (with some slight inaccuracies), so does the JSONPath `$.languages` in the exception message. It refers to the `languages` member of the root object (`$.`).\\\nThe solution here is to change in the `WebPage` class the field `String languages` to `List<String> languages`.\n\nIf you are sure that the JSON data is correct and the exception message is \"Expected BEGIN_OBJECT but was ...\", then this might indicate that Gson has no built-in adapter for the type.\nGson then tries to use reflection and expects that the data is a JSON object (hence the error message \"Expected BEGIN_OBJECT ...\"). In that case you have to write a custom [`TypeAdapter`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/TypeAdapter.html) for that type. If you already wrote a custom adapter, but it is not used, see [this troubleshooting point](#custom-adapter-not-used).\n\n## <a id=\"adapter-not-null-safe\"></a> `IllegalStateException`: \"Expected ... but was NULL\"\n\n**Symptom:** An `IllegalStateException` with a message in the form \"Expected ... but was NULL\" is thrown\n\n**Reason:**\n\n- A built-in adapter does not support JSON null values\n- Or, you have written a custom `TypeAdapter` which does not properly handle JSON null values\n\n**Solution:** If this occurs for a custom adapter you wrote, add code similar to the following at the beginning of its `read` method:\n\n```java\n@Override\npublic MyClass read(JsonReader in) throws IOException {\n    if (in.peek() == JsonToken.NULL) {\n        in.nextNull();\n        return null;\n    }\n\n    ...\n}\n```\n\nAlternatively you can call [`nullSafe()`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/TypeAdapter.html#nullSafe()) on the adapter instance you created.\n\n## <a id=\"serialize-nulls\"></a> Properties missing in JSON\n\n**Symptom:** Properties are missing in the JSON output\n\n**Reason:** Gson by default omits JSON null from the output (or: ProGuard / R8 is not configured correctly and removed unused fields)\n\n**Solution:** Use [`GsonBuilder.serializeNulls()`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/GsonBuilder.html#serializeNulls())\n\nNote: Gson does not support anonymous and local classes and will serialize them as JSON null, see the [related troubleshooting point](#null-values-for-anonymous-and-local-classes).\n\n## <a id=\"android-internal-fields\"></a> JSON output changes for newer Android versions\n\n**Symptom:** The JSON output differs when running on newer Android versions\n\n**Reason:** You use Gson by accident to access internal fields of Android classes\n\n**Solution:** Write custom Gson [`TypeAdapter`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/TypeAdapter.html) implementations for the affected classes or change the type of your data\n\n**Explanation:**\n\nWhen no built-in adapter for a type exists and no custom adapter has been registered, Gson falls back to using reflection to access the fields of a class (including `private` ones). Most likely you are experiencing this issue because you (by accident) rely on the reflection-based adapter for Android classes. That should be avoided because you make yourself dependent on the implementation details of these classes which could change at any point.\n\nIf you want to prevent using reflection on third-party classes in the future you can write your own [`ReflectionAccessFilter`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/ReflectionAccessFilter.html) or use one of the predefined ones, such as `ReflectionAccessFilter.BLOCK_ALL_PLATFORM`.\n\n## <a id=\"json-static-fields\"></a> JSON output contains values of `static` fields\n\n**Symptom:** The JSON output contains values of `static` fields\n\n**Reason:** You used `GsonBuilder.excludeFieldsWithModifiers` to overwrite the default excluded modifiers\n\n**Solution:** When calling `GsonBuilder.excludeFieldsWithModifiers` you overwrite the default excluded modifiers. Therefore, you have to explicitly exclude `static` fields if desired. This can be done by adding `Modifier.STATIC` as additional argument to the `excludeFieldsWithModifiers` call.\n\n## <a id=\"no-such-method-error\"></a> `NoSuchMethodError` when calling Gson methods\n\n**Symptom:** A `java.lang.NoSuchMethodError` is thrown when trying to call certain Gson methods\n\n**Reason:**\n\n- You have multiple versions of Gson on your classpath\n- Or, the Gson version you compiled against is different from the one on your classpath\n- Or, you are using a code shrinking tool such as ProGuard or R8 which removed methods from Gson\n\n**Solution:** First disable any code shrinking tools such as ProGuard or R8 and check if the issue persists. If not, you have to tweak the configuration of that tool to not modify Gson classes. Otherwise verify that the Gson JAR on your classpath is the same you are compiling against, and that there is only one Gson JAR on your classpath. See [this Stack Overflow question](https://stackoverflow.com/q/227486) to find out where a class is loaded from. For example, for debugging you could include the following code:\n\n```java\nSystem.out.println(Gson.class.getProtectionDomain().getCodeSource().getLocation());\n```\n\nIf that fails with a `NullPointerException` you have to try one of the other ways to find out where a class is loaded from.\n\n## <a id=\"duplicate-fields\"></a> `IllegalArgumentException`: 'Class ... declares multiple JSON fields named '...''\n\n**Symptom:** An exception with the message 'Class ... declares multiple JSON fields named '...'' is thrown\n\n**Reason:**\n\n- The name you have specified with a [`@SerializedName`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/annotations/SerializedName.html) annotation for a field collides with the name of another field\n- Or, the [`FieldNamingStrategy`](https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/FieldNamingStrategy.html) you have specified produces conflicting field names\n- Or, a field of your class has the same name as the field of a superclass\n- Or, you are using an obfuscation tool such as ProGuard or R8 and it has renamed the fields; in that case see [this troubleshooting point](#android-app-random-names)\n\nGson prevents multiple fields with the same name because during deserialization it would be ambiguous for which field the JSON data should be deserialized. For serialization it would cause the same field to appear multiple times in JSON. While the JSON specification permits this, it is likely that the application parsing the JSON data will not handle it correctly.\n\n**Solution:** First identify the fields with conflicting names based on the exception message. Then decide if you want to rename one of them using the [`@SerializedName`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/annotations/SerializedName.html) annotation, or if you want to [exclude](UserGuide.md#excluding-fields-from-serialization-and-deserialization) one of them. When excluding one of the fields you have to apply the exclusion for both serialization and deserialization (even if your application only performs one of these actions) because the duplicate field check cannot differentiate between these actions.\n\n## <a id=\"java-lang-class-unsupported\"></a> `UnsupportedOperationException` when serializing or deserializing `java.lang.Class`\n\n**Symptom:** An `UnsupportedOperationException` is thrown when trying to serialize or deserialize `java.lang.Class`\n\n**Reason:** Gson intentionally does not permit serializing and deserializing `java.lang.Class` for security reasons. Otherwise a malicious user could make your application load an arbitrary class from the classpath and, depending on what your application does with the `Class`, in the worst case perform a remote code execution attack.\n\n**Solution:** First check if you really need to serialize or deserialize a `Class`. Often it is possible to use string aliases and then map them to the known `Class`; you could write a custom [`TypeAdapter`](https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/TypeAdapter.html) to do this. If the `Class` values are not known in advance, try to introduce a common base class or interface for all these classes and then verify that the deserialized class is a subclass. For example assuming the base class is called `MyBaseClass`, your custom `TypeAdapter` should load the class like this:\n\n```java\nClass.forName(jsonString, false, getClass().getClassLoader()).asSubclass(MyBaseClass.class)\n```\n\nThis will not initialize arbitrary classes, and it will throw a `ClassCastException` if the loaded class is not the same as or a subclass of `MyBaseClass`.\n\n## <a id=\"custom-adapter-not-used\"></a> Custom type adapter is not used\n\n**Symptom:** You have registered a custom `TypeAdapter` (or `JsonSerializer` or `JsonDeserializer`) on a `GsonBuilder`, but Gson is not using your adapter\n\n**Reason:**\n\n- You registered the adapter for the wrong type\n- Or, you are serializing or deserializing a subclass\n- Or, your custom `Gson` instance is not actually used\n\n**Solution:**\n\n- Debug your code and verify that the custom `Gson` instance on which you have registered the adapter is actually used. Possibly parts of your application are using a different `Gson` instance, or you are using a framework such as Spring which is using a different `Gson` instance with default configuration (in that case have a look at the framework-specific configuration options).\n- Verify that you are registering the adapter for the correct type. `GsonBuilder.registerTypeAdapter(...)` takes the adapter as `Object` argument, so you will not see a compilation error when you provide the wrong type.\n  For example when you want to register an adapter for `MyClass`, you should call `registerTypeAdapter(MyClass.class, new MyClassAdapter())`.\\\n  Also pay close attention to the package name, there are classes with the same name in different packages, such as `java.util.Date` and `java.sql.Date`.\n- `registerTypeAdapter` only registers an adapter for the specified class, _but not for subclasses_. Use [`registerTypeHierarchyAdapter`](https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/GsonBuilder.html#registerTypeHierarchyAdapter(java.lang.Class,java.lang.Object))\n  to also handle subclasses.\n- Be careful with parameterized types for `registerTypeAdapter` because Gson only uses the adapter if there is an exact match for the types.\n  For example if you register an adapter for `List<Number>` it won't be used for `List` (raw type), `List<Integer>` or `ArrayList<Number>`.\n  You can solve this by writing a [`TypeAdapterFactory`](https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/TypeAdapterFactory.html) instead, which manually checks if the type matches.\n- If you want to register an adapter for a primitive type such as `boolean`, you might also want to register it for the wrapper type `java.lang.Boolean`, and the other way around.\n- The built-in adapters for `JsonElement` (and subclasses) and for `Object` cannot be overwritten. However, as workaround for a field of those types you can use the [`@JsonAdapter` annotation](https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/annotations/JsonAdapter.html) to specify a custom adapter.\n\n## <a id=\"type-token-raw\"></a> `IllegalStateException`: 'TypeToken must be created with a type argument' <br> `RuntimeException`: 'Missing type parameter'\n\n**Symptom:** An `IllegalStateException` with the message 'TypeToken must be created with a type argument' is thrown.\\\nFor older Gson versions a `RuntimeException` with message 'Missing type parameter' is thrown.\n\n**Reason:**\n\n- You created a `TypeToken` without type argument, for example `new TypeToken() {}` (note the missing `<...>`). You always have to provide the type argument, for example like this: `new TypeToken<List<String>>() {}`. Normally the compiler will also emit a 'raw types' warning when you forget the `<...>`.\n- Or, you are using a code shrinking tool such as ProGuard or R8 (Android app builds normally have this enabled by default) but have not configured it correctly for usage with Gson.\n\n**Solution:** When you are using a code shrinking tool such as ProGuard or R8 you have to adjust your configuration to include the following rules:\n\n```\n# Keep generic signatures; needed for correct type resolution\n-keepattributes Signature\n\n# Keep class TypeToken (respectively its generic signature)\n-keep class com.google.gson.reflect.TypeToken { *; }\n\n# Keep any (anonymous) classes extending TypeToken\n-keep class * extends com.google.gson.reflect.TypeToken\n```\n\nSee also the [Android example](examples/android-proguard-example/README.md) for more information.\n\nNote: For newer Gson versions these rules might be applied automatically; make sure you are using the latest Gson version and the latest version of the code shrinking tool.\n\n## <a id=\"r8-abstract-class\"></a> `JsonIOException`: 'Abstract classes can't be instantiated!' (R8)\n\n**Symptom:** A `JsonIOException` with the message 'Abstract classes can't be instantiated!' is thrown; the class mentioned in the exception message is not actually `abstract` in your source code, and you are using the code shrinking tool R8 (Android app builds normally have this configured by default).\n\nNote: If the class which you are trying to deserialize is actually abstract, then this exception is probably unrelated to R8 and you will have to implement a custom [`InstanceCreator`](https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/InstanceCreator.html) or [`TypeAdapter`](https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/TypeAdapter.html) which creates an instance of a non-abstract subclass of the class. If you already wrote a custom adapter, but it is not used, see [this troubleshooting point](#custom-adapter-not-used).\n\n**Reason:** The code shrinking tool R8 performs optimizations where it removes the no-args constructor from a class and makes the class `abstract`. Due to this Gson cannot create an instance of the class.\n\n**Solution:** Make sure the class has a no-args constructor, then adjust your R8 configuration file to keep the constructor of the class. For example:\n\n```\n# Keep the no-args constructor of the deserialized class\n-keepclassmembers class com.example.MyClass {\n  <init>();\n}\n```\n\nYou can also use `<init>(...);` to keep all constructors of that class, but then you might actually rely on `sun.misc.Unsafe` on both JDK and Android to create classes without no-args constructor, see [`GsonBuilder.disableJdkUnsafe()`](https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/GsonBuilder.html#disableJdkUnsafe()) for more information.\n\nFor Android you can add this rule to the `proguard-rules.pro` file, see also the [Android documentation](https://developer.android.com/build/shrink-code#keep-code). In case the class name in the exception message is obfuscated, see the Android documentation about [retracing](https://developer.android.com/build/shrink-code#retracing).\n\nFor Android you can alternatively use the [`@Keep` annotation](https://developer.android.com/studio/write/annotations#keep) on the class or constructor you want to keep. That might be easier than having to maintain a custom R8 configuration.\n\nNote that the latest Gson versions (> 2.10.1) specify a default R8 configuration. If your class is a top-level class or is `static`, has a no-args constructor and its fields are annotated with Gson's [`@SerializedName`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/annotations/SerializedName.html), you might not have to perform any additional R8 configuration.\n\n## <a id=\"typetoken-type-variable\"></a> `IllegalArgumentException`: 'TypeToken type argument must not contain a type variable'\n\n**Symptom:** An exception with the message 'TypeToken type argument must not contain a type variable' is thrown\n\n**Reason:** This exception is thrown when you create an anonymous `TypeToken` subclass which captures a type variable, for example `new TypeToken<List<T>>() {}` (where `T` is a type variable). At compile time such code looks safe and you can use the type `List<T>` without any warnings. However, this code is not actually type-safe because at runtime due to [type erasure](https://dev.java/learn/generics/type-erasure/) only the upper bound of the type variable is available. For the previous example that would be `List<Object>`. When using such a `TypeToken` with any Gson methods performing deserialization this would lead to confusing and difficult to debug `ClassCastException`s. For serialization it can in some cases also lead to undesired results.\n\nNote: Earlier version of Gson unfortunately did not prevent capturing type variables, which caused many users to unwittingly write type-unsafe code.\n\n**Solution:**\n\n- Use [`TypeToken.getParameterized(...)`](https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/reflect/TypeToken.html#getParameterized(java.lang.reflect.Type,java.lang.reflect.Type...)), for example `TypeToken.getParameterized(List.class, elementType)` where `elementType` is a type you have to provide separately.\n- For Kotlin users: Use [`reified` type parameters](https://kotlinlang.org/docs/inline-functions.html#reified-type-parameters), that means change `<T>` to `<reified T>`, if possible. If you have a chain of functions with type parameters you will probably have to make all of them `reified`.\n- If you don't actually use Gson's `TypeToken` for any Gson method, use a general purpose 'type token' implementation provided by a different library instead, for example Guava's [`com.google.common.reflect.TypeToken`](https://javadoc.io/doc/com.google.guava/guava/latest/com/google/common/reflect/TypeToken.html).\n\nFor backward compatibility it is possible to restore Gson's old behavior of allowing `TypeToken` to capture type variables by setting the [system property](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/System.html#setProperty(java.lang.String,java.lang.String)) `gson.allowCapturingTypeVariables` to `\"true\"`, **however**:\n\n- This does not solve any of the type-safety problems mentioned above; in the long term you should prefer one of the other solutions listed above. This system property might be removed in future Gson versions.\n- You should only ever set the property to `\"true\"`, but never to any other value or manually clear it. Otherwise this might counteract any libraries you are using which might have deliberately set the system property because they rely on its behavior.\n"
        },
        {
          "name": "UserGuide.md",
          "type": "blob",
          "size": 33.12890625,
          "content": "# Gson User Guide\n\n1. [Overview](#overview)\n2. [Goals for Gson](#goals-for-gson)\n3. [Gson Performance and Scalability](#gson-performance-and-scalability)\n4. [Gson Users](#gson-users)\n5. [Using Gson](#using-gson)\n   * [Using Gson with Gradle/Android](#using-gson-with-gradleandroid)\n   * [Using Gson with Maven](#using-gson-with-maven)\n   * [Primitives Examples](#primitives-examples)\n   * [Object Examples](#object-examples)\n   * [Finer Points with Objects](#finer-points-with-objects)\n   * [Nested Classes (including Inner Classes)](#nested-classes-including-inner-classes)\n   * [Array Examples](#array-examples)\n   * [Collections Examples](#collections-examples)\n     * [Collections Limitations](#collections-limitations)\n   * [Maps Examples](#maps-examples)\n   * [Serializing and Deserializing Generic Types](#serializing-and-deserializing-generic-types)\n   * [Serializing and Deserializing Collection with Objects of Arbitrary Types](#serializing-and-deserializing-collection-with-objects-of-arbitrary-types)\n   * [Built-in Serializers and Deserializers](#built-in-serializers-and-deserializers)\n   * [Custom Serialization and Deserialization](#custom-serialization-and-deserialization)\n     * [Writing a Serializer](#writing-a-serializer)\n     * [Writing a Deserializer](#writing-a-deserializer)\n   * [Writing an Instance Creator](#writing-an-instance-creator)\n     * [InstanceCreator for a Parameterized Type](#instancecreator-for-a-parameterized-type)\n   * [Compact Vs. Pretty Printing for JSON Output Format](#compact-vs-pretty-printing-for-json-output-format)\n   * [Null Object Support](#null-object-support)\n   * [Versioning Support](#versioning-support)\n   * [Excluding Fields From Serialization and Deserialization](#excluding-fields-from-serialization-and-deserialization)\n     * [Java Modifier Exclusion](#java-modifier-exclusion)\n     * [Gson's `@Expose`](#gsons-expose)\n     * [User Defined Exclusion Strategies](#user-defined-exclusion-strategies)\n   * [JSON Field Naming Support](#json-field-naming-support)\n   * [Sharing State Across Custom Serializers and Deserializers](#sharing-state-across-custom-serializers-and-deserializers)\n   * [Streaming](#streaming)\n6. [Issues in Designing Gson](#issues-in-designing-gson)\n7. [Future Enhancements to Gson](#future-enhancements-to-gson)\n\n## Overview\n\nGson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object.\n\nGson can work with arbitrary Java objects including pre-existing objects that you do not have source code of.\n\n## Goals for Gson\n\n* Provide easy to use mechanisms like `toString()` and constructor (factory method) to convert Java to JSON and vice-versa\n* Allow pre-existing unmodifiable objects to be converted to and from JSON\n* Allow custom representations for objects\n* Support arbitrarily complex objects\n* Generate compact and readable JSON output\n\n## Gson Performance and Scalability\n\nHere are some metrics that we obtained on a desktop (dual opteron, 8GB RAM, 64-bit Ubuntu) running lots of other things along-with the tests. You can rerun these tests by using the class [`PerformanceTest`](gson/src/test/java/com/google/gson/metrics/PerformanceTest.java).\n\n* Strings: Deserialized strings of over 25MB without any problems (see `disabled_testStringDeserializationPerformance` method in `PerformanceTest`)\n* Large collections:\n  * Serialized a collection of 1.4 million objects (see `disabled_testLargeCollectionSerialization` method in `PerformanceTest`)\n  * Deserialized a collection of 87,000 objects (see `disabled_testLargeCollectionDeserialization` in `PerformanceTest`)\n* Gson 1.4 raised the deserialization limit for byte arrays and collection to over 11MB from 80KB.\n\nNote: Delete the `disabled_` prefix to run these tests. We use this prefix to prevent running these tests every time we run JUnit tests.\n\n## Gson Users\n\nGson was originally created for use inside Google where it is currently used in a number of projects. It is now used by a number of public projects and companies.\n\n## Using Gson\n\nThe primary class to use is [`Gson`](gson/src/main/java/com/google/gson/Gson.java) which you can just create by calling `new Gson()`. There is also a class [`GsonBuilder`](gson/src/main/java/com/google/gson/GsonBuilder.java) available that can be used to create a Gson instance with various settings like version control and so on.\n\nThe Gson instance does not maintain any state while invoking JSON operations. So, you are free to reuse the same object for multiple JSON serialization and deserialization operations.\n\n## Using Gson with Gradle/Android\n\n```gradle\ndependencies {\n    implementation 'com.google.code.gson:gson:2.11.0'\n}\n```\n\n## Using Gson with Maven\n\nTo use Gson with Maven2/3, you can use the Gson version available in Maven Central by adding the following dependency:\n\n```xml\n<dependencies>\n    <!--  Gson: Java to JSON conversion -->\n    <dependency>\n      <groupId>com.google.code.gson</groupId>\n      <artifactId>gson</artifactId>\n      <version>2.11.0</version>\n      <scope>compile</scope>\n    </dependency>\n</dependencies>\n```\n\nThat is it, now your Maven project is Gson enabled.\n\n### Primitives Examples\n\n```java\n// Serialization\nGson gson = new Gson();\ngson.toJson(1);            // ==> 1\ngson.toJson(\"abcd\");       // ==> \"abcd\"\ngson.toJson(new Long(10)); // ==> 10\nint[] values = { 1 };\ngson.toJson(values);       // ==> [1]\n\n// Deserialization\nint i = gson.fromJson(\"1\", int.class);\nInteger intObj = gson.fromJson(\"1\", Integer.class);\nLong longObj = gson.fromJson(\"1\", Long.class);\nBoolean boolObj = gson.fromJson(\"false\", Boolean.class);\nString str = gson.fromJson(\"\\\"abc\\\"\", String.class);\nString[] strArray = gson.fromJson(\"[\\\"abc\\\"]\", String[].class);\n```\n\n### Object Examples\n\n```java\nclass BagOfPrimitives {\n  private int value1 = 1;\n  private String value2 = \"abc\";\n  private transient int value3 = 3;\n  BagOfPrimitives() {\n    // no-args constructor\n  }\n}\n\n// Serialization\nBagOfPrimitives obj = new BagOfPrimitives();\nGson gson = new Gson();\nString json = gson.toJson(obj);\n\n// ==> {\"value1\":1,\"value2\":\"abc\"}\n```\n\nNote that you can not serialize objects with circular references since that will result in infinite recursion.\n\n```java\n// Deserialization\nBagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);\n// ==> obj2 is just like obj\n```\n\n#### **Finer Points with Objects**\n\n* It is perfectly fine (and recommended) to use private fields.\n* There is no need to use any annotations to indicate a field is to be included for serialization and deserialization. All fields in the current class (and from all super classes) are included by default.\n* If a field is marked transient, (by default) it is ignored and not included in the JSON serialization or deserialization.\n* This implementation handles nulls correctly.\n  * While serializing, a null field is omitted from the output.\n  * While deserializing, a missing entry in JSON results in setting the corresponding field in the object to its default value: null for object types, zero for numeric types, and false for booleans.\n* If a field is _synthetic_, it is ignored and not included in JSON serialization or deserialization.\n* Fields corresponding to the outer classes in inner classes are ignored and not included in serialization or deserialization.\n* Anonymous and local classes are excluded. They will be serialized as JSON `null` and when deserialized their JSON value is ignored and `null` is returned. Convert the classes to `static` nested classes to enable serialization and deserialization for them.\n\n### Nested Classes (including Inner Classes)\n\nGson can serialize static nested classes quite easily.\n\nGson can also deserialize static nested classes. However, Gson can **not** automatically deserialize the **pure inner classes since their no-args constructor also need a reference to the containing Object** which is not available at the time of deserialization. You can address this problem by either making the inner class static or by providing a custom InstanceCreator for it. Here is an example:\n\n```java\npublic class A {\n  public String a;\n\n  class B {\n\n    public String b;\n\n    public B() {\n      // No args constructor for B\n    }\n  }\n}\n```\n\n**NOTE**: The above class B can not (by default) be serialized with Gson.\n\nGson can not deserialize `{\"b\":\"abc\"}` into an instance of B since the class B is an inner class. If it was defined as static class B then Gson would have been able to deserialize the string. Another solution is to write a custom instance creator for B.\n\n```java\npublic class InstanceCreatorForB implements InstanceCreator<A.B> {\n  private final A a;\n  public InstanceCreatorForB(A a)  {\n    this.a = a;\n  }\n  public A.B createInstance(Type type) {\n    return a.new B();\n  }\n}\n```\n\nThe above is possible, but not recommended.\n\n### Array Examples\n\n```java\nGson gson = new Gson();\nint[] ints = {1, 2, 3, 4, 5};\nString[] strings = {\"abc\", \"def\", \"ghi\"};\n\n// Serialization\ngson.toJson(ints);     // ==> [1,2,3,4,5]\ngson.toJson(strings);  // ==> [\"abc\", \"def\", \"ghi\"]\n\n// Deserialization\nint[] ints2 = gson.fromJson(\"[1,2,3,4,5]\", int[].class);\n// ==> ints2 will be same as ints\n```\n\nWe also support multi-dimensional arrays, with arbitrarily complex element types.\n\n### Collections Examples\n\n```java\nGson gson = new Gson();\nCollection<Integer> ints = Arrays.asList(1,2,3,4,5);\n\n// Serialization\nString json = gson.toJson(ints);  // ==> [1,2,3,4,5]\n\n// Deserialization\nTypeToken<Collection<Integer>> collectionType = new TypeToken<Collection<Integer>>(){};\n// Note: For older Gson versions it is necessary to use `collectionType.getType()` as argument below,\n// this is however not type-safe and care must be taken to specify the correct type for the local variable\nCollection<Integer> ints2 = gson.fromJson(json, collectionType);\n// ==> ints2 is same as ints\n```\n\nFairly hideous: note how we define the type of collection.\nUnfortunately, there is no way to get around this in Java.\n\n#### Collections Limitations\n\nGson can serialize collection of arbitrary objects but can not deserialize from it, because there is no way for the user to indicate the type of the resulting object. Instead, while deserializing, the Collection must be of a specific, generic type.\nThis makes sense, and is rarely a problem when following good Java coding practices.\n\n### Maps Examples\n\nGson by default serializes any `java.util.Map` implementation as a JSON object. Because JSON objects only support strings as member names, Gson converts the Map keys to strings by calling `toString()` on them, and using `\"null\"` for `null` keys:\n\n```java\nGson gson = new Gson();\nMap<String, String> stringMap = new LinkedHashMap<>();\nstringMap.put(\"key\", \"value\");\nstringMap.put(null, \"null-entry\");\n\n// Serialization\nString json = gson.toJson(stringMap); // ==> {\"key\":\"value\",\"null\":\"null-entry\"}\n\nMap<Integer, Integer> intMap = new LinkedHashMap<>();\nintMap.put(2, 4);\nintMap.put(3, 6);\n\n// Serialization\nString json = gson.toJson(intMap); // ==> {\"2\":4,\"3\":6}\n```\n\nFor deserialization Gson uses the `read` method of the `TypeAdapter` registered for the Map key type. Similar to the Collection example shown above, for deserialization a `TypeToken` has to be used to tell Gson what types the Map keys and values have:\n\n```java\nGson gson = new Gson();\nTypeToken<Map<String, String>> mapType = new TypeToken<Map<String, String>>(){};\nString json = \"{\\\"key\\\": \\\"value\\\"}\";\n\n// Deserialization\n// Note: For older Gson versions it is necessary to use `mapType.getType()` as argument below,\n// this is however not type-safe and care must be taken to specify the correct type for the local variable\nMap<String, String> stringMap = gson.fromJson(json, mapType);\n// ==> stringMap is {key=value}\n```\n\nGson also supports using complex types as Map keys. This feature can be enabled with [`GsonBuilder.enableComplexMapKeySerialization()`](https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/GsonBuilder.html#enableComplexMapKeySerialization()). If enabled, Gson uses the `write` method of the `TypeAdapter` registered for the Map key type to serialize the keys, instead of using `toString()`. When any of the keys is serialized by the adapter as JSON array or JSON object, Gson will serialize the complete Map as JSON array, consisting of key-value pairs (encoded as JSON array). Otherwise, if none of the keys is serialized as a JSON array or JSON object, Gson will use a JSON object to encode the Map:\n\n```java\nclass PersonName {\n  String firstName;\n  String lastName;\n\n  PersonName(String firstName, String lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n\n  // ... equals and hashCode\n}\n\nGson gson = new GsonBuilder().enableComplexMapKeySerialization().create();\nMap<PersonName, Integer> complexMap = new LinkedHashMap<>();\ncomplexMap.put(new PersonName(\"John\", \"Doe\"), 30);\ncomplexMap.put(new PersonName(\"Jane\", \"Doe\"), 35);\n\n// Serialization; complex map is serialized as a JSON array containing key-value pairs (as JSON arrays)\nString json = gson.toJson(complexMap);\n// ==> [[{\"firstName\":\"John\",\"lastName\":\"Doe\"},30],[{\"firstName\":\"Jane\",\"lastName\":\"Doe\"},35]]\n\nMap<String, String> stringMap = new LinkedHashMap<>();\nstringMap.put(\"key\", \"value\");\n// Serialization; non-complex map is serialized as a regular JSON object\nString json = gson.toJson(stringMap); // ==> {\"key\":\"value\"}\n```\n\n**Important:** Because Gson by default uses `toString()` to serialize Map keys, this can lead to malformed encoded keys or can cause mismatch between serialization and deserialization of the keys, for example when `toString()` is not properly implemented. A workaround for this can be to use `enableComplexMapKeySerialization()` to make sure the `TypeAdapter` registered for the Map key type is used for deserialization _and_ serialization. As shown in the example above, when none of the keys are serialized by the adapter as JSON array or JSON object, the Map is serialized as a regular JSON object, as desired.\n\nNote that when deserializing enums as Map keys, if Gson is unable to find an enum constant with a matching `name()` value respectively `@SerializedName` annotation, it falls back to looking up the enum constant by its `toString()` value. This is to work around the issue described above, but only applies to enum constants.\n\n### Serializing and Deserializing Generic Types\n\nWhen you call `toJson(obj)`, Gson calls `obj.getClass()` to get information on the fields to serialize. Similarly, you can typically pass `MyClass.class` object in the `fromJson(json, MyClass.class)` method. This works fine if the object is a non-generic type. However, if the object is of a generic type, then the Generic type information is lost because of Java Type Erasure. Here is an example illustrating the point:\n\n```java\nclass Foo<T> {\n  T value;\n}\nGson gson = new Gson();\nFoo<Bar> foo = new Foo<Bar>();\ngson.toJson(foo); // May not serialize foo.value correctly\n\ngson.fromJson(json, foo.getClass()); // Fails to deserialize foo.value as Bar\n```\n\nThe above code fails to interpret value as type Bar because Gson invokes `foo.getClass()` to get its class information, but this method returns a raw class, `Foo.class`. This means that Gson has no way of knowing that this is an object of type `Foo<Bar>`, and not just plain `Foo`.\n\nYou can solve this problem by specifying the correct parameterized type for your generic type. You can do this by using the [`TypeToken`](https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/reflect/TypeToken.html) class.\n\n```java\nType fooType = new TypeToken<Foo<Bar>>() {}.getType();\ngson.toJson(foo, fooType);\n\ngson.fromJson(json, fooType);\n```\n\nThe idiom used to get `fooType` actually defines an anonymous local inner class containing a method `getType()` that returns the fully parameterized type.\n\n### Serializing and Deserializing Collection with Objects of Arbitrary Types\n\nSometimes you are dealing with JSON array that contains mixed types. For example:\n`['hello',5,{name:'GREETINGS',source:'guest'}]`\n\nThe equivalent `Collection` containing this is:\n\n```java\nCollection collection = new ArrayList();\ncollection.add(\"hello\");\ncollection.add(5);\ncollection.add(new Event(\"GREETINGS\", \"guest\"));\n```\n\nwhere the `Event` class is defined as:\n\n```java\nclass Event {\n  private String name;\n  private String source;\n  private Event(String name, String source) {\n    this.name = name;\n    this.source = source;\n  }\n}\n```\n\nYou can serialize the collection with Gson without doing anything specific: `toJson(collection)` would write out the desired output.\n\nHowever, deserialization with `fromJson(json, Collection.class)` will not work since Gson has no way of knowing how to map the input to the types. Gson requires that you provide a genericized version of the collection type in `fromJson()`. So, you have three options:\n\n1. Use Gson's parser API (low-level streaming parser or the DOM parser JsonParser) to parse the array elements and then use `Gson.fromJson()` on each of the array elements.This is the preferred approach. [Here is an example](extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java) that demonstrates how to do this.\n\n2. Register a type adapter for `Collection.class` that looks at each of the array members and maps them to appropriate objects. The disadvantage of this approach is that it will screw up deserialization of other collection types in Gson.\n\n3. Register a type adapter for `MyCollectionMemberType` and use `fromJson()` with `Collection<MyCollectionMemberType>`.\n\nThis approach is practical only if the array appears as a top-level element or if you can change the field type holding the collection to be of type `Collection<MyCollectionMemberType>`.\n\n### Built-in Serializers and Deserializers\n\nGson has built-in serializers and deserializers for commonly used classes whose default representation may be inappropriate, for instance\n\n* `java.net.URL` to match it with strings like `\"https://github.com/google/gson/\"`\n* `java.net.URI` to match it with strings like `\"/google/gson/\"`\n\nFor many more, see the internal class [`TypeAdapters`](gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java).\n\nYou can also find source code for some commonly used classes such as JodaTime at [this page](https://sites.google.com/site/gson/gson-type-adapters-for-common-classes-1).\n\n### Custom Serialization and Deserialization\n\nSometimes the default representation is not what you want. This is often the case when dealing with library classes (DateTime, etc.).\nGson allows you to register your own custom serializers and deserializers. This is done by defining two parts:\n\n* JSON Serializers: Need to define custom serialization for an object\n* JSON Deserializers: Needed to define custom deserialization for a type\n\n* Instance Creators: Not needed if no-args constructor is available or a deserializer is registered\n\n```java\nGsonBuilder gson = new GsonBuilder();\ngson.registerTypeAdapter(MyType2.class, new MyTypeAdapter());\ngson.registerTypeAdapter(MyType.class, new MySerializer());\ngson.registerTypeAdapter(MyType.class, new MyDeserializer());\ngson.registerTypeAdapter(MyType.class, new MyInstanceCreator());\n```\n\n`registerTypeAdapter` call checks\n1. if the type adapter implements more than one of these interfaces, in that case it registers the adapter for all of them.\n2. if the type adapter is for the Object class or JsonElement or any of its subclasses, in that case it throws IllegalArgumentException because overriding the built-in adapters for these types is not supported.\n\n#### Writing a Serializer\n\nHere is an example of how to write a custom serializer for JodaTime `DateTime` class.\n\n```java\nprivate class DateTimeSerializer implements JsonSerializer<DateTime> {\n  public JsonElement serialize(DateTime src, Type typeOfSrc, JsonSerializationContext context) {\n    return new JsonPrimitive(src.toString());\n  }\n}\n```\n\nGson calls `serialize()` when it runs into a `DateTime` object during serialization.\n\n#### Writing a Deserializer\n\nHere is an example of how to write a custom deserializer for JodaTime DateTime class.\n\n```java\nprivate class DateTimeDeserializer implements JsonDeserializer<DateTime> {\n  public DateTime deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n      throws JsonParseException {\n    return new DateTime(json.getAsJsonPrimitive().getAsString());\n  }\n}\n```\n\nGson calls `deserialize` when it needs to deserialize a JSON string fragment into a DateTime object\n\n**Finer points with Serializers and Deserializers**\n\nOften you want to register a single handler for all generic types corresponding to a raw type\n\n* For example, suppose you have an `Id` class for id representation/translation (i.e. an internal vs. external representation).\n* `Id<T>` type that has same serialization for all generic types\n  * Essentially write out the id value\n* Deserialization is very similar but not exactly the same\n  * Need to call `new Id(Class<T>, String)` which returns an instance of `Id<T>`\n\nGson supports registering a single handler for this. You can also register a specific handler for a specific generic type (say `Id<RequiresSpecialHandling>` needed special handling).\nThe `Type` parameter for the `toJson()` and `fromJson()` contains the generic type information to help you write a single handler for all generic types corresponding to the same raw type.\n\n### Writing an Instance Creator\n\nWhile deserializing an Object, Gson needs to create a default instance of the class.\nWell-behaved classes that are meant for serialization and deserialization should have a no-argument constructor.\n\n* Doesn't matter whether public or private\n\nTypically, Instance Creators are needed when you are dealing with a library class that does NOT define a no-argument constructor\n\n**Instance Creator Example**\n\n```java\nprivate class MoneyInstanceCreator implements InstanceCreator<Money> {\n  public Money createInstance(Type type) {\n    return new Money(\"1000000\", CurrencyCode.USD);\n  }\n}\n```\n\nType could be of a corresponding generic type\n\n* Very useful to invoke constructors which need specific generic type information\n* For example, if the `Id` class stores the class for which the Id is being created\n\n#### InstanceCreator for a Parameterized Type\n\nSometimes the type that you are trying to instantiate is a parameterized type. Generally, this is not a problem since the actual instance is of raw type. Here is an example:\n\n```java\nclass MyList<T> extends ArrayList<T> {\n}\n\nclass MyListInstanceCreator implements InstanceCreator<MyList<?>> {\n  @SuppressWarnings(\"unchecked\")\n  public MyList<?> createInstance(Type type) {\n    // No need to use a parameterized list since the actual instance will have the raw type anyway.\n    return new MyList();\n  }\n}\n```\n\nHowever, sometimes you do need to create instance based on the actual parameterized type. In this case, you can use the type parameter being passed to the `createInstance` method. Here is an example:\n\n```java\npublic class Id<T> {\n  private final Class<T> classOfId;\n  private final long value;\n  public Id(Class<T> classOfId, long value) {\n    this.classOfId = classOfId;\n    this.value = value;\n  }\n}\n\nclass IdInstanceCreator implements InstanceCreator<Id<?>> {\n  public Id<?> createInstance(Type type) {\n    Type[] typeParameters = ((ParameterizedType)type).getActualTypeArguments();\n    Type idType = typeParameters[0]; // Id has only one parameterized type T\n    return new Id((Class)idType, 0L);\n  }\n}\n```\n\nIn the above example, an instance of the Id class can not be created without actually passing in the actual type for the parameterized type. We solve this problem by using the passed method parameter, `type`. The `type` object in this case is the Java parameterized type representation of `Id<Foo>` where the actual instance should be bound to `Id<Foo>`. Since `Id` class has just one parameterized type parameter, `T`, we use the zeroth element of the type array returned by `getActualTypeArgument()` which will hold `Foo.class` in this case.\n\n### Compact Vs. Pretty Printing for JSON Output Format\n\nThe default JSON output that is provided by Gson is a compact JSON format. This means that there will not be any whitespace in the output JSON structure. Therefore, there will be no whitespace between field names and its value, object fields, and objects within arrays in the JSON output. As well, \"null\" fields will be ignored in the output (NOTE: null values will still be included in collections/arrays of objects). See the [Null Object Support](#null-object-support) section for information on configure Gson to output all null values.\n\nIf you would like to use the Pretty Print feature, you must configure your `Gson` instance using the `GsonBuilder`. The `JsonFormatter` is not exposed through our public API, so the client is unable to configure the default print settings/margins for the JSON output. For now, we only provide a default `JsonPrintFormatter` that has default line length of 80 character, 2 character indentation, and 4 character right margin.\n\nThe following is an example shows how to configure a `Gson` instance to use the default `JsonPrintFormatter` instead of the `JsonCompactFormatter`:\n\n```java\nGson gson = new GsonBuilder().setPrettyPrinting().create();\nString jsonOutput = gson.toJson(someObject);\n```\n\n### Null Object Support\n\nThe default behaviour that is implemented in Gson is that `null` object fields are ignored. This allows for a more compact output format; however, the client must define a default value for these fields as the JSON format is converted back into its Java form.\n\nHere's how you would configure a `Gson` instance to output null:\n\n```java\nGson gson = new GsonBuilder().serializeNulls().create();\n```\n\nNOTE: when serializing `null`s with Gson, it will add a `JsonNull` element to the `JsonElement` structure. Therefore, this object can be used in custom serialization/deserialization.\n\nHere's an example:\n\n```java\npublic class Foo {\n  private final String s;\n  private final int i;\n\n  public Foo() {\n    this(null, 5);\n  }\n\n  public Foo(String s, int i) {\n    this.s = s;\n    this.i = i;\n  }\n}\n\nGson gson = new GsonBuilder().serializeNulls().create();\nFoo foo = new Foo();\nString json = gson.toJson(foo);\nSystem.out.println(json);\n\njson = gson.toJson(null);\nSystem.out.println(json);\n```\n\nThe output is:\n\n```json\n{\"s\":null,\"i\":5}\nnull\n```\n\n### Versioning Support\n\nMultiple versions of the same object can be maintained by using [@Since](gson/src/main/java/com/google/gson/annotations/Since.java) annotation. This annotation can be used on Classes, Fields and, in a future release, Methods. In order to leverage this feature, you must configure your `Gson` instance to ignore any field/object that is greater than some version number. If no version is set on the `Gson` instance then it will serialize and deserialize all fields and classes regardless of the version.\n\n```java\npublic class VersionedClass {\n  @Since(1.1) private final String newerField;\n  @Since(1.0) private final String newField;\n  private final String field;\n\n  public VersionedClass() {\n    this.newerField = \"newer\";\n    this.newField = \"new\";\n    this.field = \"old\";\n  }\n}\n\nVersionedClass versionedObject = new VersionedClass();\nGson gson = new GsonBuilder().setVersion(1.0).create();\nString jsonOutput = gson.toJson(versionedObject);\nSystem.out.println(jsonOutput);\nSystem.out.println();\n\ngson = new Gson();\njsonOutput = gson.toJson(versionedObject);\nSystem.out.println(jsonOutput);\n```\n\nThe output is:\n\n```json\n{\"newField\":\"new\",\"field\":\"old\"}\n\n{\"newerField\":\"newer\",\"newField\":\"new\",\"field\":\"old\"}\n```\n\n### Excluding Fields From Serialization and Deserialization\n\nGson supports numerous mechanisms for excluding top-level classes, fields and field types. Below are pluggable mechanisms that allow field and class exclusion. If none of the below mechanisms satisfy your needs then you can always use [custom serializers and deserializers](#custom-serialization-and-deserialization).\n\n#### Java Modifier Exclusion\n\nBy default, if you mark a field as `transient`, it will be excluded. As well, if a field is marked as `static` then by default it will be excluded. If you want to include some transient fields then you can do the following:\n\n```java\nimport java.lang.reflect.Modifier;\nGson gson = new GsonBuilder()\n    .excludeFieldsWithModifiers(Modifier.STATIC)\n    .create();\n```\n\nNOTE: you can give any number of the `Modifier` constants to the `excludeFieldsWithModifiers` method. For example:\n\n```java\nGson gson = new GsonBuilder()\n    .excludeFieldsWithModifiers(Modifier.STATIC, Modifier.TRANSIENT, Modifier.VOLATILE)\n    .create();\n```\n\n#### Gson's `@Expose`\n\nThis feature provides a way where you can mark certain fields of your objects to be excluded for consideration for serialization and deserialization to JSON. To use this annotation, you must create Gson by using `new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()`. The Gson instance created will exclude all fields in a class that are not marked with `@Expose` annotation.\n\n#### User Defined Exclusion Strategies\n\nIf the above mechanisms for excluding fields and class type do not work for you then you can always write your own exclusion strategy and plug it into Gson. See the [`ExclusionStrategy`](https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/ExclusionStrategy.html) JavaDoc for more information.\n\nThe following example shows how to exclude fields marked with a specific `@Foo` annotation and excludes top-level types (or declared field type) of class `String`.\n\n```java\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.FIELD})\npublic @interface Foo {\n  // Field tag only annotation\n}\n\npublic class SampleObjectForTest {\n  @Foo private final int annotatedField;\n  private final String stringField;\n  private final long longField;\n\n  public SampleObjectForTest() {\n    annotatedField = 5;\n    stringField = \"someDefaultValue\";\n    longField = 1234;\n  }\n}\n\npublic class MyExclusionStrategy implements ExclusionStrategy {\n  private final Class<?> typeToSkip;\n\n  private MyExclusionStrategy(Class<?> typeToSkip) {\n    this.typeToSkip = typeToSkip;\n  }\n\n  public boolean shouldSkipClass(Class<?> clazz) {\n    return (clazz == typeToSkip);\n  }\n\n  public boolean shouldSkipField(FieldAttributes f) {\n    return f.getAnnotation(Foo.class) != null;\n  }\n}\n\npublic static void main(String[] args) {\n  Gson gson = new GsonBuilder()\n      .setExclusionStrategies(new MyExclusionStrategy(String.class))\n      .serializeNulls()\n      .create();\n  SampleObjectForTest src = new SampleObjectForTest();\n  String json = gson.toJson(src);\n  System.out.println(json);\n}\n```\n\nThe output is:\n\n```json\n{\"longField\":1234}\n```\n\n### JSON Field Naming Support\n\nGson supports some pre-defined field naming policies to convert the standard Java field names (i.e., camel cased names starting with lower case --- `sampleFieldNameInJava`) to a JSON field name (i.e., `sample_field_name_in_java` or `SampleFieldNameInJava`). See the [FieldNamingPolicy](https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/FieldNamingPolicy.html) class for information on the pre-defined naming policies.\n\nIt also has an annotation based strategy to allows clients to define custom names on a per field basis. Note, that the annotation based strategy has field name validation which will raise \"Runtime\" exceptions if an invalid field name is provided as the annotation value.\n\nThe following is an example of how to use both Gson naming policy features:\n\n```java\nprivate class SomeObject {\n  @SerializedName(\"custom_naming\") private final String someField;\n  private final String someOtherField;\n\n  public SomeObject(String a, String b) {\n    this.someField = a;\n    this.someOtherField = b;\n  }\n}\n\nSomeObject someObject = new SomeObject(\"first\", \"second\");\nGson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();\nString jsonRepresentation = gson.toJson(someObject);\nSystem.out.println(jsonRepresentation);\n```\n\nThe output is:\n\n```json\n{\"custom_naming\":\"first\",\"SomeOtherField\":\"second\"}\n```\n\nIf you have a need for custom naming policy ([see this discussion](https://groups.google.com/group/google-gson/browse_thread/thread/cb441a2d717f6892)), you can use the [@SerializedName](https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/annotations/SerializedName.html) annotation.\n\n### Sharing State Across Custom Serializers and Deserializers\n\nSometimes you need to share state across custom serializers/deserializers ([see this discussion](https://groups.google.com/group/google-gson/browse_thread/thread/2850010691ea09fb)). You can use the following three strategies to accomplish this:\n\n1. Store shared state in static fields\n2. Declare the serializer/deserializer as inner classes of a parent type, and use the instance fields of parent type to store shared state\n3. Use Java `ThreadLocal`\n\n1 and 2 are not thread-safe options, but 3 is.\n\n### Streaming\n\nIn addition Gson's object model and data binding, you can use Gson to read from and write to a [stream](https://sites.google.com/site/gson/streaming). You can also combine streaming and object model access to get the best of both approaches.\n\n## Issues in Designing Gson\n\nSee the [Gson design document](GsonDesignDocument.md \"Gson design document\") for a discussion of issues we faced while designing Gson. It also includes a comparison of Gson with other Java libraries that can be used for JSON conversion.\n\n## Future Enhancements to Gson\n\nFor the latest list of proposed enhancements or if you'd like to suggest new ones, see the [Issues section](https://github.com/google/gson/issues) under the project website.\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "gson",
          "type": "tree",
          "content": null
        },
        {
          "name": "metrics",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 26.02734375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n  Copyright 2015 Google LLC\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n-->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\" child.project.url.inherit.append.path=\"false\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.google.code.gson</groupId>\n  <artifactId>gson-parent</artifactId>\n  <version>2.11.1-SNAPSHOT</version>\n  <packaging>pom</packaging>\n\n  <name>Gson Parent</name>\n  <description>Gson JSON library</description>\n  <url>https://github.com/google/gson</url>\n\n  <modules>\n    <module>gson</module>\n    <module>test-jpms</module>\n    <module>test-graal-native-image</module>\n    <module>test-shrinker</module>\n    <module>extras</module>\n    <module>metrics</module>\n    <module>proto</module>\n  </modules>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <maven.compiler.release>8</maven.compiler.release>\n    <maven.compiler.testRelease>11</maven.compiler.testRelease>\n\n    <!-- Make the build reproducible, see https://maven.apache.org/guides/mini/guide-reproducible-builds.html -->\n    <!-- Automatically updated by Maven Release Plugin -->\n    <project.build.outputTimestamp>2024-05-19T18:54:10Z</project.build.outputTimestamp>\n\n    <!-- These properties are to be overwritten by the Maven modules -->\n    <!-- Whether this module is an integration test module -->\n    <gson.isTestModule>false</gson.isTestModule>\n    <!-- Whether this module is internal and currently not deployed -->\n    <gson.isInternalModule>${gson.isTestModule}</gson.isInternalModule>\n  </properties>\n\n  <!-- These attributes specify that the URLs should be inherited by the modules as is, to avoid constructing\n    invalid URLs, see also https://maven.apache.org/ref/3.9.1/maven-model-builder/index.html#inheritance-assembly -->\n  <scm child.scm.url.inherit.append.path=\"false\" child.scm.connection.inherit.append.path=\"false\" child.scm.developerConnection.inherit.append.path=\"false\">\n    <url>https://github.com/google/gson/</url>\n    <connection>scm:git:https://github.com/google/gson.git</connection>\n    <developerConnection>scm:git:git@github.com:google/gson.git</developerConnection>\n    <tag>HEAD</tag>\n  </scm>\n\n  <developers>\n    <developer>\n      <id>google</id>\n      <organization>Google</organization>\n      <organizationUrl>https://www.google.com</organizationUrl>\n    </developer>\n  </developers>\n\n  <issueManagement>\n    <system>GitHub Issues</system>\n    <url>https://github.com/google/gson/issues</url>\n  </issueManagement>\n\n  <licenses>\n    <license>\n      <name>Apache-2.0</name>\n      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>\n    </license>\n  </licenses>\n\n  <distributionManagement>\n    <repository>\n      <id>sonatype-nexus-staging</id>\n      <name>Nexus Release Repository</name>\n      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n    </repository>\n  </distributionManagement>\n\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.13.2</version>\n      </dependency>\n\n      <dependency>\n        <groupId>com.google.truth</groupId>\n        <artifactId>truth</artifactId>\n        <version>1.4.4</version>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-enforcer-plugin</artifactId>\n        <version>3.5.0</version>\n        <executions>\n          <execution>\n            <id>enforce-versions</id>\n            <goals>\n              <goal>enforce</goal>\n            </goals>\n            <configuration>\n              <rules>\n                <requireMavenVersion>\n                  <!-- Usage of `.mvn/jvm.config` for Error Prone requires at least Maven 3.3.1 -->\n                  <version>[3.3.1,)</version>\n                </requireMavenVersion>\n\n                <!-- Enforce that correct JDK version is used to avoid cryptic build errors -->\n                <requireJavaVersion>\n                  <!-- Other plugins of this build require at least JDK 11 -->\n                  <!-- Disallow newer JDK versions; they might introduce new lints, drop support for\n                    older compiler Java target versions or cause issues for some Maven plugins -->\n                  <version>[11,22)</version>\n                </requireJavaVersion>\n              </rules>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n\n      <!-- Spotless plugin: keeps the code formatted following the google-java-styleguide -->\n      <plugin>\n        <groupId>com.diffplug.spotless</groupId>\n        <artifactId>spotless-maven-plugin</artifactId>\n        <version>2.43.0</version>\n        <executions>\n          <execution>\n            <goals>\n              <goal>check</goal>\n            </goals>\n          </execution>\n        </executions>\n        <!-- Note: The configuration here is not specific to the `<execution>` above to allow users to run\n          `mvn spotless:apply` from the command line, using the same configuration -->\n        <configuration>\n          <!-- Perform some basic formatting for non-Java code -->\n          <formats>\n            <format>\n              <includes>\n                <include>*.md</include>\n                <include>*.xml</include>\n                <include>.github/**/*.yml</include>\n                <include>.gitignore</include>\n              </includes>\n              <!-- For Markdown files removing trailing whitespace causes issues for hard line breaks,\n                which use two trailing spaces. However, the trailing spaces are difficult to notice anyway;\n                prefer a trailing `\\` instead of two spaces. -->\n              <trimTrailingWhitespace />\n              <endWithNewline />\n              <indent>\n                <spaces>true</spaces>\n                <!-- This seems to mostly (or only?) affect the suggested fix in case code contains tabs -->\n                <spacesPerTab>2</spacesPerTab>\n              </indent>\n            </format>\n          </formats>\n\n          <java>\n            <excludes>\n              <!-- Exclude classes which need Java 17 for compilation; Google Java Format internally relies on javac,\n                so formatting will fail if build is executed with JDK 11 -->\n              <exclude>src/test/java/com/google/gson/functional/Java17RecordTest.java</exclude>\n              <exclude>src/test/java/com/google/gson/native_test/Java17RecordReflectionTest.java</exclude>\n            </excludes>\n            <googleJavaFormat>\n              <style>GOOGLE</style>\n              <reflowLongStrings>true</reflowLongStrings>\n              <reorderImports>true</reorderImports>\n              <formatJavadoc>true</formatJavadoc>\n            </googleJavaFormat>\n            <formatAnnotations />     <!-- Puts type annotations immediately before types. -->\n          </java>\n        </configuration>\n      </plugin>\n\n      <!-- Attaches a `.buildinfo` file which contains information for reproducing the build,\n        such as OS, JDK version, ...\n        Since this is a multi-module Maven project, only one aggregated file will be created for\n        the last module, see the note on https://maven.apache.org/plugins/maven-artifact-plugin/usage.html#recording-buildinfo-file -->\n      <!-- The other goals of this plugin are run by the GitHub workflow to verify that\n        the build is reproducible (see `artifact:...` usage in the workflow) -->\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-artifact-plugin</artifactId>\n        <version>3.5.3</version>\n        <executions>\n          <execution>\n            <goals>\n              <!-- This logs a warning about `source.scm.tag=HEAD`, but this can be ignored;\n                during release Maven Release Plugin temporarily changes the `source.scm.tag`\n                value to the actual Git tag, which will then not cause a warning -->\n              <goal>buildinfo</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>3.13.0</version>\n          <configuration>\n            <showWarnings>true</showWarnings>\n            <showDeprecation>true</showDeprecation>\n            <failOnWarning>true</failOnWarning>\n            <compilerArgs>\n              <!-- Args related to Error Prone, see: https://errorprone.info/docs/installation#maven -->\n              <arg>-XDcompilePolicy=simple</arg>\n              <arg>--should-stop=ifError=FLOW</arg>\n              <arg>-Xplugin:ErrorProne\n                -XepExcludedPaths:.*/generated-test-sources/protobuf/.*\n                -Xep:NotJavadoc:OFF <!-- Triggered by local class. -->\n                <!-- Increase severity from 'suggestion' to 'warning' so that the user has to fix\n                  found issues, and they are not overlooked\n                  TODO: Does not work properly yet, see https://github.com/google/error-prone/issues/4206,\n                        so for now have to manually set them to `:WARN` -->\n                -XepAllSuggestionsAsWarnings\n                <!-- Enable some experimental checks which are disabled by default\n                  In case they cause issues or are unreliable turn them off by adding `:OFF`,\n                  and add a comment mentioning why they were disabled -->\n                -Xep:AnnotationPosition <!-- required by style guide -->\n                -Xep:AssertFalse\n                -Xep:ClassName <!-- required by style guide -->\n                -Xep:ClassNamedLikeTypeParameter:WARN\n                -Xep:ComparisonContractViolated\n                -Xep:ConstantField:WARN <!-- required by style guide -->\n                -Xep:DepAnn\n                -Xep:DifferentNameButSame\n                -Xep:EmptyIf\n                -Xep:EqualsBrokenForNull\n                -Xep:ForEachIterable:WARN\n                -Xep:FunctionalInterfaceClash\n                -Xep:InitializeInline\n                -Xep:InterfaceWithOnlyStatics\n                -Xep:LambdaFunctionalInterface:WARN <!-- only relevant for test code at the moment, which uses Java 11 -->\n                -Xep:LongLiteralLowerCaseSuffix <!-- required by style guide -->\n                -Xep:MemberName <!-- required by style guide -->\n                -Xep:MissingBraces:WARN\n                -Xep:MissingDefault <!-- required by style guide -->\n                -Xep:MixedArrayDimensions:WARN <!-- required by style guide -->\n                -Xep:MultiVariableDeclaration:WARN <!-- required by style guide -->\n                -Xep:MultipleTopLevelClasses:WARN <!-- required by style guide -->\n                -Xep:NonCanonicalStaticMemberImport\n                -Xep:NonFinalStaticField\n                -Xep:PackageLocation:WARN\n                -Xep:PrimitiveArrayPassedToVarargsMethod\n                -Xep:PrivateConstructorForUtilityClass:WARN\n                -Xep:RemoveUnusedImports:WARN\n                -Xep:StatementSwitchToExpressionSwitch:OFF <!-- disabled: requires Java 14 -->\n                -Xep:StaticQualifiedUsingExpression <!-- required by style guide -->\n                -Xep:SwitchDefault:WARN\n                -Xep:SystemExitOutsideMain\n                -Xep:SystemOut\n                -Xep:TestExceptionChecker\n                -Xep:ThrowSpecificExceptions:OFF <!-- disabled: Gson has no proper exception hierarchy yet, see https://github.com/google/gson/issues/2359 -->\n                -Xep:TryFailRefactoring:OFF <!-- disabled: there are too many tests which violate this -->\n                -Xep:TypeParameterNaming:WARN <!-- required by style guide -->\n                -Xep:UnescapedEntity\n                -Xep:UngroupedOverloads:WARN <!-- required by style guide -->\n                -Xep:UnnecessarilyFullyQualified\n                -Xep:UnnecessarilyUsedValue\n                -Xep:UnnecessaryBoxedVariable:WARN\n                -Xep:UnnecessaryDefaultInEnumSwitch\n                -Xep:UnnecessaryFinal\n                -Xep:UnnecessaryStaticImport:WARN <!-- required by style guide -->\n                -Xep:UnusedException\n                -Xep:UrlInSee\n                -Xep:UseCorrectAssertInTests\n                -Xep:UseEnumSwitch:WARN\n                -Xep:WildcardImport:WARN <!-- required by style guide -->\n                -Xep:YodaCondition\n              </arg>\n              <!-- Enable all warnings, except for ones which cause issues when building with newer JDKs, see also\n                https://docs.oracle.com/en/java/javase/11/tools/javac.html -->\n              <compilerArg>-Xlint:all,-options</compilerArg>\n            </compilerArgs>\n            <annotationProcessorPaths>\n              <path>\n                <groupId>com.google.errorprone</groupId>\n                <artifactId>error_prone_core</artifactId>\n                <version>2.36.0</version>\n              </path>\n            </annotationProcessorPaths>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-javadoc-plugin</artifactId>\n          <version>3.11.2</version>\n          <configuration>\n            <skip>${gson.isTestModule}</skip>\n\n            <!-- Specify newer JDK as target to allow linking to newer Java API, and to generate\n              module overview in Javadoc for Gson's module descriptor -->\n            <release>11</release>\n            <!-- Exclude `missing` group because some tags have been omitted when they are redundant -->\n            <doclint>all,-missing</doclint>\n            <!-- Link against newer Java API Javadoc because most users likely\n              use a newer Java version than the one used for building this project -->\n            <detectJavaApiLink>false</detectJavaApiLink>\n            <links>\n              <link>https://docs.oracle.com/en/java/javase/11/docs/api/</link>\n              <link>https://errorprone.info/api/latest/</link>\n            </links>\n            <!-- Disable detection of offline links between Maven modules:\n              (1) Only `gson` module is published, so for other modules Javadoc links don't\n              matter much at the moment; (2) The derived URL for the modules is based on\n              the project URL (= Gson GitHub repo) which is incorrect because it is not\n              hosting the Javadoc (3) It might fail due to https://bugs.openjdk.java.net/browse/JDK-8212233 -->\n            <detectOfflineLinks>false</detectOfflineLinks>\n            <!-- Only show warnings and errors -->\n            <quiet>true</quiet>\n            <failOnWarnings>true</failOnWarnings>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-surefire-plugin</artifactId>\n          <version>3.5.2</version>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-failsafe-plugin</artifactId>\n          <version>3.5.2</version>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-jar-plugin</artifactId>\n          <version>3.4.2</version>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-install-plugin</artifactId>\n          <version>3.1.3</version>\n          <configuration>\n            <skip>${gson.isTestModule}</skip>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-source-plugin</artifactId>\n          <version>3.3.1</version>\n          <configuration>\n            <skipSource>${gson.isTestModule}</skipSource>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-gpg-plugin</artifactId>\n          <version>3.2.7</version>\n          <configuration>\n            <skip>${gson.isTestModule}</skip>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-deploy-plugin</artifactId>\n          <version>3.1.3</version>\n          <configuration>\n            <skip>${gson.isInternalModule}</skip>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-release-plugin</artifactId>\n          <version>3.1.1</version>\n          <configuration>\n            <autoVersionSubmodules>true</autoVersionSubmodules>\n            <!-- Disable Maven Super POM release profile and instead use own one -->\n            <useReleaseProfile>false</useReleaseProfile>\n            <releaseProfiles>release</releaseProfiles>\n            <!-- Run custom goals to replace version references, see plugin configuration below -->\n            <!-- Also run `verify` to make sure tests still pass with new version number;\n              also seems to be necessary because without `package`, goals fail for modules depending\n              on each other; possibly same issue as https://issues.apache.org/jira/browse/MRELEASE-271 -->\n            <preparationGoals>\n              clean verify\n              antrun:run@replace-version-placeholders\n              antrun:run@replace-old-version-references\n              antrun:run@git-add-changed\n            </preparationGoals>\n          </configuration>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-antrun-plugin</artifactId>\n          <version>3.1.0</version>\n          <executions>\n            <!-- Replaces version placeholders with the current version; this is mainly useful for\n              Javadoc where this allows writing `@since $next-version$` -->\n            <execution>\n              <id>replace-version-placeholders</id>\n              <goals>\n                <goal>run</goal>\n              </goals>\n              <configuration>\n                <target>\n                  <replace token=\"$next-version$\" value=\"${project.version}\" encoding=\"${project.build.sourceEncoding}\">\n                    <!-- erroronmissingdir=false for gson-parent which does not have source directory -->\n                    <fileset dir=\"${project.build.sourceDirectory}\" includes=\"**\" erroronmissingdir=\"false\" />\n                  </replace>\n                </target>\n              </configuration>\n            </execution>\n            <!-- Replaces references to the old version in the documentation -->\n            <execution>\n              <id>replace-old-version-references</id>\n              <goals>\n                <goal>run</goal>\n              </goals>\n              <configuration>\n                <target>\n                  <!-- Replace Maven and Gradle version references; uses regex lookbehind and lookahead -->\n                  <replaceregexp match=\"(?&lt;=&lt;version&gt;).*(?=&lt;/version&gt;)|(?&lt;='com\\.google\\.code\\.gson:gson:).*(?=')\" flags=\"g\" replace=\"${project.version}\" encoding=\"${project.build.sourceEncoding}\">\n                    <fileset dir=\"${project.basedir}\">\n                      <include name=\"README.md\" />\n                      <include name=\"UserGuide.md\" />\n                    </fileset>\n                  </replaceregexp>\n                </target>\n              </configuration>\n              <!-- Only has to be executed for parent project; don't inherit this to modules -->\n              <!-- This might be a bit hacky; execution with this ID seems to be missing for modules and Maven just executes default\n                configuration which does not have any targets configured. (not sure if this behavior is guaranteed) -->\n              <inherited>false</inherited>\n            </execution>\n            <!-- Adds changed files to the Git index; workaround because Maven Release Plugin does not support committing\n              additional files yet (https://issues.apache.org/jira/browse/MRELEASE-798), and for workarounds with\n              Maven SCM Plugin it is apparently necessary to know modified files in advance -->\n            <!-- Maven Release Plugin then just happens to include these changed files in its Git commit;\n              not sure if this behavior is guaranteed or if this relies on implementation details -->\n            <execution>\n              <id>git-add-changed</id>\n              <goals>\n                <goal>run</goal>\n              </goals>\n              <configuration>\n                <target>\n                  <exec executable=\"git\" dir=\"${project.basedir}\" failonerror=\"true\">\n                    <arg value=\"add\" />\n                    <!-- Don't add (unrelated) not yet tracked files -->\n                    <arg value=\"--update\" />\n                    <arg value=\".\" />\n                  </exec>\n                </target>\n              </configuration>\n            </execution>\n          </executions>\n        </plugin>\n\n        <!-- Plugin for checking source and binary compatibility; used by GitHub workflow -->\n        <plugin>\n          <groupId>com.github.siom79.japicmp</groupId>\n          <artifactId>japicmp-maven-plugin</artifactId>\n          <version>0.23.0</version>\n          <configuration>\n            <skip>${gson.isTestModule}</skip>\n\n            <oldVersion>\n              <dependency>\n                <groupId>${project.groupId}</groupId>\n                <artifactId>${project.artifactId}</artifactId>\n                <!-- This is set by the GitHub workflow -->\n                <version>0.0.0-JAPICMP-OLD</version>\n              </dependency>\n            </oldVersion>\n\n            <!-- 'new version' is automatically the version currently being build -->\n\n            <parameter>\n              <breakBuildOnSourceIncompatibleModifications>true</breakBuildOnSourceIncompatibleModifications>\n              <breakBuildOnBinaryIncompatibleModifications>true</breakBuildOnBinaryIncompatibleModifications>\n              <excludes>\n                <exclude>com.google.gson.internal</exclude>\n              </excludes>\n              <onlyModified>true</onlyModified>\n              <skipXmlReport>true</skipXmlReport>\n              <reportOnlyFilename>true</reportOnlyFilename>\n            </parameter>\n          </configuration>\n        </plugin>\n\n        <!-- Plugin for checking compatibility with Android API -->\n        <!-- Note: For now this is not part of a normal Maven build but instead executed only by a\n          GitHub workflow because the Animal Sniffer signature files use Java Serialization, so they\n          could in theory contain malicious data (in case we don't fully trust the author) -->\n        <plugin>\n          <groupId>org.codehaus.mojo</groupId>\n          <artifactId>animal-sniffer-maven-plugin</artifactId>\n          <version>1.24</version>\n          <executions>\n            <execution>\n              <id>check-android-compatibility</id>\n              <goals>\n                <goal>check</goal>\n              </goals>\n              <configuration>\n                <skip>${gson.isTestModule}</skip>\n\n                <signature>\n                  <!-- Note: In case Android compatibility impedes Gson development too much in the\n                    future, could consider switching to https://github.com/open-toast/gummy-bears\n                    which accounts for Android desugaring and might allow usage of more Java classes -->\n                  <groupId>net.sf.androidscents.signature</groupId>\n                  <artifactId>android-api-level-21</artifactId>\n                  <version>5.0.1_r2</version>\n                </signature>\n              </configuration>\n            </execution>\n          </executions>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n  </build>\n\n  <profiles>\n    <!-- Disable Error Prone before Java 17 -->\n    <profile>\n      <id>disable-error-prone</id>\n      <activation>\n        <jdk>[,17)</jdk>\n      </activation>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <configuration>\n              <compilerArgs combine.self=\"override\">\n                <compilerArg>-Xlint:all,-options</compilerArg>\n              </compilerArgs>\n            </configuration>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n\n    <!-- Profile defining additional plugins to be executed for release -->\n    <profile>\n      <id>release</id>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-source-plugin</artifactId>\n            <executions>\n              <execution>\n                <id>attach-sources</id>\n                <goals>\n                  <goal>jar-no-fork</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-javadoc-plugin</artifactId>\n            <executions>\n              <execution>\n                <id>attach-javadocs</id>\n                <goals>\n                  <goal>jar</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-gpg-plugin</artifactId>\n            <executions>\n              <execution>\n                <id>sign-artifacts</id>\n                <phase>verify</phase>\n                <goals>\n                  <goal>sign</goal>\n                </goals>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n</project>\n"
        },
        {
          "name": "proto",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-graal-native-image",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-jpms",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-shrinker",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}