{
  "metadata": {
    "timestamp": 1736708873482,
    "page": 84,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "quarkusio/quarkus",
      "stars": 13990,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".forbiddenapis",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.197265625,
          "content": "# ./mvnw fails on Windows in git bash if -Xmx in that file has a trailing CRLF\n.mvn/jvm.config\t\ttext eol=lf\nmvnw\ttext eol=lf\n*.xml\ttext eol=lf\n*.java\ttext diff=java eol=lf\n*.kt\ttext diff=kotlin eol=lf\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5439453125,
          "content": ".DS_Store\ntarget\n*.iml\n.idea\n!.idea/runConfigurations\n.settings\n.project\n.classpath\n.vscode/\n*~\nlocal-test\nout\nlib\nbin\n!devtools/cli/distribution/java-binary/bin\ndependency-reduced-pom.xml\nderby.log\nhotspot.log\n.directory\n.java-version\n.graal-install\nhs_err_pid*.log\ndumps\n*.orig\n*.rej\n.factorypath\ngraph-output.dot\n*.swp\n*.swo\nObjectStore\n.gradle\ndocker/distroless/bazel-*\n/.apt_generated_tests/\nquarkus.log\nquarkus.log*\nreplay_*.logÃŸ\nnbactions.xml\nnb-configuration.xml\n.cache\n/lsp/\n.envrc\n.jekyll-cache\n.mvn/.develocity\n.mvn/.gradle-enterprise/\n.quarkus\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.265625,
          "content": "image:\n  file: .gitpod/Dockerfile\n  \ntasks:\n  - init: ./mvnw -Dquickly\n  - name: Quarkus command\n    openMode: split-right\n\nvscode:\n  extensions:\n    - \"redhat.java\"\n    - \"vscjava.vscode-java-dependency\"\n    - \"vscjava.vscode-java-debug\"\n    - \"vscjava.vscode-java-pack\"\n"
        },
        {
          "name": ".gitpod",
          "type": "tree",
          "content": null
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".jbang",
          "type": "tree",
          "content": null
        },
        {
          "name": ".justfile",
          "type": "blob",
          "size": 0.8974609375,
          "content": "\nmvncmd := env_var_or_default(\"QMVNCMD\", \"./mvnw -T0.8C\")\n\n# build main project quickly\nbuild:\n   {{mvncmd}} -Dquickly\n\n# build main project fast - skip docs, tests, ITs, invoker, extension validation, gradle tests, truststore\nbuild-fast:\n    {{mvncmd}} -e -DskipDocs -DskipTests -DskipITs -Dinvoker.skip -DskipExtensionValidation -Dskip.gradle.tests -Dtruststore.skip clean install\n\n# build docs (including config doc for all modules), skipping as much unnecessary as possible. \nbuild-docs:\n    {{mvncmd}} -e -DskipTests -DskipITs -Dinvoker.skip -DskipExtensionValidation -Dskip.gradle.tests -Dtruststore.skip -Dno-test-modules -Dasciidoctor.fail-if=DEBUG clean install\n\n# format code according to Quarkus coding conventions\nformat:\n    {{mvncmd}} process-sources -Denforcer.skip -Dprotoc.skip\n\n# run Quarkus CLI from locally built snapshot\nqss:\n    java -jar ./devtools/cli/target/quarkus-cli-999-SNAPSHOT-runner.jar\n"
        },
        {
          "name": ".mvn",
          "type": "tree",
          "content": null
        },
        {
          "name": ".sdkmanrc",
          "type": "blob",
          "size": 0.12109375,
          "content": "# Enable auto-env through the sdkman_auto_env config\n# Add key=value pairs of SDKs to use below\njava=17.0.12-tem\nmvnd=1.0.2\n"
        },
        {
          "name": "ACTIONS.md",
          "type": "blob",
          "size": 5.291015625,
          "content": "# GitHub Actions setup\n\nQuarkus is built using GitHub Actions, with a mix of hosted and self-hosted runners.\n\n## Setting up a new self-hosted runner on Mac M1\n\n### Non-root user\n\nGitHub Actions should not run with administrator privileges, so will need to be run in a dedicated account.\nMake an account for the actions runner. The steps below assume the account has the name `githubactions`.\nIt's usually easiest to do account creation in the GUI, via a VNC connection. Users are managed in\nthe **Users and Groups** section of the Settings app.\n\n*Grant administrator privileges to the account* (we will remove them later).\n\n### System utilities\n\nAs administrator, install homebrew.\n\n```shell\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nInstall build and container utilities:\n\n```bash\nbrew install mvn\nbrew install gradle\nbrew install podman\n```\n\n### Podman setup\n\nPodman needs some [extra configuration](https://quarkus.io/guides/podman) to work with test containers and dev services.\n\nNow log in to the account you created to run the actions.\nAs the `githubactions` user (but with administrator privileges)\n\n```bash\nPODMAN_VERSION=`podman -v | sed 's/[a-zA-Z ]*//'`\nsudo /opt/homebrew/Cellar/podman/$PODMAN_VERSION/bin/podman-mac-helper install\n```\n\nThe podman helper install seems to be per-user, but it needs to be done with administrator privileges.\n\nAgain as the `githubactions` user, edit ~/.testcontainers.properties and add the following line: `ryuk.container.privileged=true`\n\n```bash\necho \"ryuk.container.privileged=true\" >> ~/.testcontainers.properties\n```\n\n```bash\npodman machine set --rootful\npodman machine start\n```\n\nFinally, on ARM, an [extra step](https://edofic.com/posts/2021-09-12-podman-m1-amd64) is required to make AMD64 images work:\n\n```bash\npodman machine ssh\nsudo -i\nrpm-ostree install qemu-user-static\nsystemctl reboot\n```\n\nNow remove administrator privileges from the `githubactions` user.\nAs with the user creation, it's usually easiest to do this in the GUI.\n\n### Rosetta\n\nA fresh install of macOS will not have Rosetta installed, so Intel binaries cannot run. Fix this by running:\n\n```bash\nsoftwareupdate --install-rosetta --agree-to-license\n```\n\n### Stand up the actions runner\n\n#### Download the runner scripts\n\nGitHub provides an installation package of customized runner scripts for each repository.\nFollow [the instructions](https://docs.github.com/en/actions/hosting-your-own-runners/adding-self-hosted-runners)\nto install the scripts for the repository to be built.\n\nChoose the default group, a descriptive name, and the default work folder. Add a label `macos-arm64-latest`.\nIf you forget the label, it will need to be added [through the UI](https://docs.github.com/en/actions/hosting-your-own-runners/using-labels-with-self-hosted-runners).\n\n#### Cleanup and setup logic\n\nSelf-hosted runners do not run on ephemeral hardware, and so workflow runs may need to clean up.\nWe also need to start a podman machine before the job if one is not already running.\n\nTo create cleanup and setup scripts and hooks, run:\n\n```bash\necho \"rm -rf /Users/githubactions/actions-runner/_work\" > /Users/githubactions/runner-cleanup.sh\necho \"podman machine info | grep Running || podman machine start\" >> /Users/githubactions/podman-start.sh\nchmod a+x /Users/githubactions/runner-cleanup.sh\necho ACTIONS_RUNNER_HOOK_JOB_COMPLETED=/Users/githubactions/runner-cleanup.sh >> .env\necho ACTIONS_RUNNER_HOOK_JOB_STARTED=/Users/githubactions/podman-start.sh >> .env\n```\n\nIn the same script, we also ensure that the podman machine is running before jobs execute.\n\n#### Start the runner\n\nTo test the runner, run\n\n`run.sh`\n\nOnce you're happy the runner is processing builds correctly, it's time to create it as a daemon.\n\n### Start the service on reboot\n\nNote that GitHub have scripts for this, but theirs run as LaunchAgents, not LaunchDaemons.\nLaunchAgents run when a user logs in, and LaunchDaemons run on boot, so the daemon option seems preferable.\n\nAs administrator, `sudo vi /Library/LaunchDaemons/actions.runner.quarkusio-quarkus.macstadium-m1.plist`.\n\nThen add the following:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>Label</key>\n    <string>actions.runner.quarkusio-quarkus.macstadium-m1</string>\n\n    <key>RunAtLoad</key>\n    <true/>\n\n    <key>KeepAlive</key>\n    <true/>\n  \n    <key>UserName</key>\n    <string>githubactions</string>\n\n    <key>ProgramArguments</key>\n    <array>\n     <string>/Users/githubactions/actions-runner/runsvc.sh</string>\n    </array>\n\n    <key>WorkingDirectory</key>\n    <string>/Users/githubactions/actions-runner</string>\n\n    <key>StandardOutPath</key>\n    <string>/tmp/github.runner.plist.stdout</string>\n    <key>StandardErrorPath</key>\n    <string>/tmp/github.runner.plist.stderr</string>\n\n    <key>EnvironmentVariables</key>\n    <dict>\n      <key>ACTIONS_RUNNER_SVC</key>\n      <string>1</string>\n    </dict>\n    <key>ProcessType</key>\n    <string>Interactive</string>\n    <key>SessionCreate</key>\n    <true/>\n  </dict>\n</plist>\n```\n\nFinally, run\n\n```shell\nsudo launchctl load -w /Library/LaunchDaemons/actions.runner.quarkusio-quarkus.macstadium-m1.plist\n```\n\nYou can check the logs in `/tmp/github.runner.plist.stdout` to confirm everything is working.\n"
        },
        {
          "name": "ADOPTERS.md",
          "type": "blob",
          "size": 2.9609375,
          "content": "ADOPTERS\n========\n\nPUBLIC REFERENCES\n-----------------\n\nThis document lists the organizations that use Quarkus based on public information available in blog posts and videos.\nIf any organization would like to get added or removed please make a pull request by following these guidelines:\n\n* Please don't include your organization's logo or other trademarked material\n* Add a reference (link to a public blog post, video, slides, etc) mentioning that Quarkus is used\n\n| Organization          | Reference                                                                           |\n|-----------------------|-------------------------------------------------------------------------------------|\n|Abraxas Informatik AG  | <https://quarkus.io/blog/abraxas-customer-story/>                                   |\n|Artes                  | <https://horvie.github.io/adopt-quarkus/>                                           |\n|B<>com                 | <https://5g.labs.b-com.com/>                                                        |\n|Carrefour              | <https://horizons.carrefour.com/efficient-java-in-the-cloud-with-quarkus>           |\n|Cytech                 | <https://quarkus.io/blog/cytech-customer-story/>                                    |\n|DataCater              | <https://quarkus.io/blog/datacater-uses-quarkus-to-make-data-streaming-accessible/> |\n|Decathlon              | <https://quarkus.io/blog/decathlon-user-story/>                                     |\n|Ennovative Solutions   | <https://quarkus.io/blog/ennovativesolutions-uses-quarkus-with-aws-lambda/>         |\n|GoWithFlow             | <https://quarkus.io/blog/gowithflow-chooses-quarkus-to-deliver-fast-to-production/> |\n|Lufthansa Technik      | <https://quarkus.io/blog/aviatar-experiences-significant-savings/>                  |\n|Logicdrop              | <https://quarkus.io/blog/logicdrop-customer-story/>                                 |\n|[Microcks](https://landscape.cncf.io/?selected=microcks)               | <https://itnext.io/mocking-and-contract-testing-in-your-inner-loop-with-microcks-part-3-quarkus-devservice-ftw-a14b807737be>            |\n|Payair                 | <https://quarkus.io/blog/why-did-payair-technologies-switch-to-quarkus/>            |\n|Sedona                 | <https://quarkus.io/blog/sedona-rewrites-insurance-premium/>                        |\n|Stargate               | <https://quarkus.io/blog/stargate-selects-quarkus-for-its-v2-implementation/>       |\n|Suomen Asiakastieto Oy | <https://quarkus.io/blog/asiakastieto-chooses-quarkus-for-microservices/>           |\n|Talkdesk               | <https://quarkus.io/blog/talkdesk-chooses-quarkus-for-fast-innovation/>             |\n|UTN Faculty CÃ³rdoba    | <https://www.frc.utn.edu.ar/computos/tech/>                                         |\n|Vodafone Greece        | <https://quarkus.io/blog/vodafone-greece-replaces-spring-boot/>                     |\n|Wipro                  | <https://quarkus.io/blog/wipro-customer-story/>                                     |\n"
        },
        {
          "name": "COMMITTERS.adoc",
          "type": "blob",
          "size": 9.904296875,
          "content": "= Information for Quarkus Committers\n\nThis document contains useful information for Quarkus committers.\n\n[NOTE]\n====\nIt is a work in progress, so if you think information is missing/unclear/inadequate,\nplease reach out to us on the `quarkus-dev` mailing-list.\n====\n\nThis document has a lot of information.\nIt is not a set of strict rules, it is here to guide you.\nIf you forget to do something, miss something, don't worry, it happens.\n\nDo your best and that will already be a lot :).\n\n== Merging Pull Requests\n\nThe first thing is that, while being a committer,\nyou can't really commit directly to the main repository:\nyou need at least one review by your peers.\n\nThus, the need for a pull request.\n\nSo you are more like a merger than a committer\nand you might merge more PRs from others than your own work.\n\nWhile not absolute, here is some advice:\n\n* If you really want a review from a specific person, make it a named reviewer via GitHub's \"Reviewers\" feature\n* If someone asked for a specific reviewer, better give some time to this person to review the PR.\n  If not reviewed in a reasonable amount of time, better ping them again to have some information\n  or ask the original author if we should go ahead.\n* If in doubt (on a specific part or because you're not comfortable reviewing documentation or any other reason),\n  ask for help.\n* Except if it's a total no-brainer (typically a typo fix), let the PR bake a few hours so some other people can have a\n  look if interested.\n  If the PR is very large or is a new extension, better let it\n  bake for a few days.\n* A pull request may not contain _merge commits_ (it makes backporting a lot harder) or `fixup!` commits.\n* We merge pull requests with _merge commits_ so please ask the author to properly squash the commits before merging (when it makes sense).\n  The idea is to have proper semantic commits. Several commits are not a problem as long as they have a proper semantic.\n  If the author is not familiar with Git or not available, you can also (carefully)\n  https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/committing-changes-to-a-pull-request-branch-created-from-a-fork[do it for them]\n  as long as you both agreed on it.\n* Make sure the commit comments are meaningful.\n* As a new committer, you can start by giving your approval and not merging and see how things evolve.\n  This should give you some hints on important things to check in the future.\n* Only merge pull requests that target `main`.\n  **Dealing with older branches is a separate process.**\n* If you are sure a PR should go in and is just waiting for CI,\n  just use the `triage/waiting-for-ci` label.\n  It is a good hint for other committers.\n* If you think a pull request is an essential part of a given milestone (and can realistically be a part of it),\n  you should affect this milestone to it so that we can be sure it stays on the radar.\n  Otherwise, better not do it and let the Quarkus bot do it for you.\n* If you think a pull request is worth mentioning in the release notes and/or\n  the announcement blog post, add the `release/noteworthy-feature` label.\n* If you think a pull request introduces some breaking changes,\n  add the `release/breaking-change` label, see <<backward-compatibility,Backward Compatibility>> for more details.\n* Do NOT affect a PR to an old branch, see the <<backporting-process,backporting process>> for more details.\n\nObviously, each situation is different so use your own judgement,\nand if in doubt, just ask for advice, the other committers are here to help.\n\n[[release-schedule]]\n== Release Schedule\n\nThe release schedule is posted here: https://github.com/quarkusio/quarkus/wiki/Release-Planning .\n\nThere are a few things you can do to help us be on schedule:\n\n* Anything that goes in a release should have been **merged** the day before the release.\n  That means:\n+\n  ** Your PR needs to be created, obviously.\n  ** It should have been reviewed by someone familiar with this area.\n  ** You have to take this feedback into account.\n  ** And once approved, the PR can be merged.\n  ** Also, keep in mind that we have a 3 hours CI cycle and CI needs to be green before any inclusion.\n+\nIn short, posting a large PR the day before the release won't work.\n\n* In the case of a significant change, the release considered for inclusion shouldn't be\n  the `.Final` but the `.CR1.`.\n  Thus, your PR has to be merged the day before the release of `.CR1`.\n\n* If, for some reason, a PR really needs to be part of a given release, better coordinate with\n  the release manager and the potential reviewers so that everyone is aware something big is coming.\n  Potential reviewers might also have their own agenda and work to be included in the release,\n  thus not always having the cycles to review last minute.\n\n== Dependency Upgrades\n\nQuarkus depends on a lot of third party dependencies that we try to keep up to date.\n\nWe partially rely on Dependabot for https://github.com/quarkusio/quarkus/blob/main/.github/dependabot.yml[a curated list of dependencies].\n\nSome dependencies are critical for Quarkus and quite complex.\nGood examples would be Netty, Vert.x or Hibernate ORM.\n\nIt is good practice to update these core dependencies at the beginning of a given\nrelease cycle to let them time to bake in the main branch before being released.\nAnd, in any case, we should avoid upgrading these dependencies after the CR1 when we can.\n\n[[backward-compatibility]]\n== Backward Compatibility\n\nQuarkus evolves very fast, and we decided we could break backward compatibility as long as:\n\n* It is worth it.\n* We try to support the previous behavior for a while - if it doesn't have a prohibitive cost,\n  be it in terms of development time or added complexity.\n\nUsually, it is a good idea to have the opinion of people involved in the development of this area.\nAnd for widely used extensions or core changes, sending an email to the `quarkus-dev` mailing list\nshould be considered.\n\nWhen deprecating things, make sure to keep the deprecations for 12 months,\nexcept you have a very good reason not doing so (and in this case, let's discuss it on quarkus-dev).\n\nBreaking changes should be marked with the `release/breaking-change` label and,\nif they need to be included in the release notes and/or announcement blog post,\nthey should also be labelled with `release/noteworthy-feature`.\n\nThey must be documented in the migration guide of the appropriate version:\nhttps://github.com/quarkusio/quarkus/wiki/Migration-Guides.\n\n== Pull Request Title\n\nThe title should be in English, should not contain an issue number.\nIt should also not contain ellipsis.\n\nIf your commit message was too long and GitHub automatically cut\nthe title, it is helpful if you can take the time to move the cut\npart where it belongs to have a full title.\n\nTitles are included in the Release notes, so they are important.\n\nA good title would look like: `Fix off by one issue in Quartz extension` or\n`Introduce Hibernate Reactive extension`.\n\nA bad title would look like: `fix(#444)`.\n\n== Issues Fixed\n\nWhen a PR fixes some issues, it's good practice to add it in the description (and not in the title!).\n\nOne issue per line with something like:\n\n[source,asciidoc]\n----\n* Fix #444\n* Fix #555\n----\n\nGiven GitHub automatically extracts the commit information to fill in the PR fields,\njust make your commit comment look like:\n\n[source]\n----\nFix off by one issue in Quartz extension\n\n* Fix #444\n* Fix #555\n----\n\n[TIP]\n====\nGitHub supports a variety of keywords here: `fix`, `fixes`, `fixed`,\n`resolve`, `resolves`, `resolved`, `close`, `closes`, `closed`\nall do the same thing.\n====\n\n[WARNING]\n====\nGitHub won't detect issues properly if you do something like\n`Fix #444 #555`.\n====\n\n== Affecting Labels and Milestones\n\nAffecting labels and milestones is very important in our process.\nThe Quarkus Bot does it in most cases.\n\nIn some cases, you might have to add some manually though:\n\n* If you close an issue that has not been closed automatically, either affect a milestone if it has been fixed\n  or one of the `triage/invalid`, `triage/out-of-date`, `triage/wontfix` labels if not.\n* Some issues are created as `kind/bug` but are more support questions:\n  in this case, remove the `kind/bug` label and add the `kind/question` label\n  or even better redirect them to the Discussions section.\n\n[[backporting-process]]\n== Backporting Process\n\nWhen we release a new version of Quarkus, we usually do a bugfix\nrelease a couple of weeks after.\n\nEvery time we do a major release (e.g. `2.7.0.Final`), we create a release branch (e.g. `2.7`) to host\nthe commits for these bugfix releases.\n\nAll the pull requests are merged in the `main` branch, so they are applied to the new feature\nrelease of Quarkus.\nThey won't be integrated in the previous version branch.\n\nSome pull requests however may qualify for being backported to this\nbugfix branch.\n\nGood examples of that might be:\n\n* bugfixes\n* documentation fixes\n* usability fixes\n\nObviously, the barrier is higher for large pull requests as\nthey might be more risky to backport.\nBut sometimes, we just have to backport them anyway.\n\nIf you think your pull request or the pull request you are reviewing, might be a good backport candidate,\nplease add the `triage/backport?` label.\n\nThe question mark is important:\nit is not automatic and we carefully review each pull request before backporting.\n\nThus, if not entirely clear, don't hesitate to add a comment to the pull request\nwhen adding the label.\n\nAnd don't be surprised if we come to you with some questions about it\nwhen we prepare the next bugfix release.\n\n== Good First Issues\n\nWe need to find the right balance between fixing the issues right away\nand trying to onboard new contributors.\n\nIt's not always easy to find one, but if you think an issue is appropriate,\naffecting the `good first issue` label to it for some time might be a good thing.\n\nObviously, critical bugs are not good candidates :).\n\n== I Did Something Wrong, What Should I Do?\n\nTake a deep breath and don't worry, it happens.\n\nJust ping `@quarkusio/committerhelp` on GitHub or `@committerhelp` on Zulip,\nand we will find a solution.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 41.3974609375,
          "content": "# Contributing guide\n\n**Want to contribute? Great!**\nWe try to make it easy, and all contributions, even the smaller ones, are more than welcome. This includes bug reports,\nfixes, documentation, examples... But first, read this page (including the small print at the end).\n\n<!-- toc -->\n\n- [Legal](#legal)\n- [Reporting an issue](#reporting-an-issue)\n- [Checking an issue is fixed in main](#checking-an-issue-is-fixed-in-main)\n  * [Using snapshots](#using-snapshots)\n  * [Building main](#building-main)\n  * [Updating the version](#updating-the-version)\n- [Before you contribute](#before-you-contribute)\n  * [Code reviews](#code-reviews)\n  * [Coding Guidelines](#coding-guidelines)\n  * [Continuous Integration](#continuous-integration)\n  * [Tests and documentation are not optional](#tests-and-documentation-are-not-optional)\n- [Setup](#setup)\n  * [IDE Config and Code Style](#ide-config-and-code-style)\n    + [Eclipse Setup](#eclipse-setup)\n    + [IDEA Setup](#idea-setup)\n      - [How to work](#how-to-work)\n      - [`OutOfMemoryError` while importing](#outofmemoryerror-while-importing)\n      - [`package sun.misc does not exist` while building](#package-sunmisc-does-not-exist-while-building)\n      - [Formatting](#formatting)\n  * [Gitpod](#gitpod)\n- [Build](#build)\n  * [Workflow tips](#workflow-tips)\n    + [Building all modules of an extension](#building-all-modules-of-an-extension)\n    + [Building a single module of an extension](#building-a-single-module-of-an-extension)\n    + [Building with relocations](#building-with-relocations)\n    + [Running a single test](#running-a-single-test)\n      - [Maven Invoker tests](#maven-invoker-tests)\n  * [Build with multiple threads](#build-with-multiple-threads)\n  * [Don't build any test modules](#dont-build-any-test-modules)\n    + [Automatic incremental build](#automatic-incremental-build)\n      - [Special case `bom-descriptor-json`](#special-case-bom-descriptor-json)\n      - [Usage by CI](#usage-by-ci)\n      - [Develocity build cache](#develocity-build-cache)\n        * [Getting set up](#getting-set-up)\n        * [-Dquickly](#-dquickly)\n        * [Benchmarking the build](#benchmarking-the-build)\n- [Release your own version](#release-your-own-version)\n- [Documentation](#documentation)\n  * [Building the documentation](#building-the-documentation)\n  * [Referencing a new guide in the index](#referencing-a-new-guide-in-the-index)\n- [Usage](#usage)\n    + [With Maven](#with-maven)\n    + [With Gradle](#with-gradle)\n  * [MicroProfile TCK's](#microprofile-tcks)\n  * [Test Coverage](#test-coverage)\n- [Extensions](#extensions)\n  * [Descriptions](#descriptions)\n  * [Update dependencies to extensions](#update-dependencies-to-extensions)\n  * [Check security vulnerabilities](#check-security-vulnerabilities)\n- [The small print](#the-small-print)\n- [Frequently Asked Questions](#frequently-asked-questions)\n\n<!-- tocstop -->\n<small><i><a href='https://github.com/jonschlinkert/markdown-toc'>Table of contents generated with markdown-toc</a></i></small>\n\n## Legal\n\nAll original contributions to Quarkus are licensed under the\n[ASL - Apache License](https://www.apache.org/licenses/LICENSE-2.0), version 2.0 or later, or, if another license is\nspecified as governing the file or directory being modified, such other license.\n\nAll contributions are subject to the [Developer Certificate of Origin (DCO)](https://developercertificate.org/). The DCO\ntext is also included verbatim in the [dco.txt](dco.txt) file in the root directory of the repository.\n\n## Reporting an issue\n\nThis project uses GitHub issues to manage the issues. Open an issue directly in GitHub.\n\nIf you believe you found a bug, and it's likely possible, please indicate a way to reproduce it, what you are seeing and\nwhat you would expect to see. Don't forget to indicate your Quarkus, Java, Maven/Gradle and GraalVM version.\n\n## Checking an issue is fixed in main\n\nSometimes a bug has been fixed in the `main` branch of Quarkus and you want to confirm it is fixed for your own\napplication. There are two simple options for testing the `main` branch:\n\n* either use the snapshots we publish daily on <https://s01.oss.sonatype.org/content/repositories/snapshots>\n* or build Quarkus locally\n\nThe following is a quick summary aimed at allowing you to quickly test `main`. If you are interested in learning more details, refer to\nthe [Build section](#build) and the [Usage section](#usage).\n\n### Using snapshots\n\nSnapshots are published daily with version `999-SNAPSHOT`, so you will have to wait for a snapshot containing the commits you are interested in.\n\nThen just add <https://s01.oss.sonatype.org/content/repositories/snapshots> as a Maven repository **and** a plugin\nrepository in your settings xml:\n\n```xml\n\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n    <profiles>\n        <profile>\n            <id>quarkus-snapshots</id>\n            <repositories>\n                <repository>\n                    <id>quarkus-snapshots-repository</id>\n                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>\n                    <releases>\n                        <enabled>false</enabled>\n                    </releases>\n                    <snapshots>\n                        <enabled>true</enabled>\n                    </snapshots>\n                </repository>\n            </repositories>\n            <pluginRepositories>\n                <pluginRepository>\n                    <id>quarkus-snapshots-plugin-repository</id>\n                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>\n                    <releases>\n                        <enabled>false</enabled>\n                    </releases>\n                    <snapshots>\n                        <enabled>true</enabled>\n                    </snapshots>\n                </pluginRepository>\n            </pluginRepositories>\n        </profile>\n    </profiles>\n    <activeProfiles>\n        <activeProfile>quarkus-snapshots</activeProfile>\n    </activeProfiles>\n</settings>\n```\n\nYou can check the last publication date here: <https://s01.oss.sonatype.org/content/repositories/snapshots/io/quarkus/>.\n\n### Building main\n\nJust do the following:\n\n```sh\ngit clone git@github.com:quarkusio/quarkus.git\ncd quarkus\nMAVEN_OPTS=\"-Xmx4g\" ./mvnw -Dquickly\n```\n\nBuilding can take a few minutes depending on the hardware being used.\n\n**Note** For Apple Silicon computer, Rosetta must be installed. It can be done using `softwareupdate --install-rosetta`\n\n### Updating the version\n\nWhen using the `main` branch, you need to use the group id `io.quarkus` instead of `io.quarkus.platform` for both the\nQuarkus BOM and the Quarkus Maven Plugin.\n\nIn a standard Quarkus pom.xml set the `quarkus.platform.group-id` property to `io.quarkus` and\nthe `quarkus.platform.version` property to `999-SNAPSHOT` to build your application against the locally installed main\nbranch.\n\nYou can now test your application.\n\n## Before you contribute\n\nTo contribute, use GitHub Pull Requests, from your **own** fork.\n\nAlso, make sure you have set up your Git authorship correctly:\n\n```sh\ngit config --global user.name \"Your Full Name\"\ngit config --global user.email your.email@example.com\n```\n\nIf you use different computers to contribute, please make sure the name is the same on all your computers.\n\nWe use this information to acknowledge your contributions in release announcements.\n\nWe also recommend enabling the `pull.rebase` Git option (either globally or specifically for your Quarkus local clone):\n\n```sh\ngit config --global pull.rebase true\n```\n\nIt will make it easier for you to rebase your pull request against the latest `main` branch using the `git pull upstream main` command.\nMake sure to register the remote `upstream` Quarkus repository beforehand with `git remote add upstream https://github.com/quarkusio/quarkus`.\n\n### Code reviews\n\nAll submissions, including submissions by project members, need to be reviewed by at least one Quarkus committer before\nbeing merged.\n\n[GitHub Pull Request Review Process](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews)\nis followed for every pull request.\n\n> [!TIP]\n> We try to review and merge PRs promptly, and we have automation set up to catch stalled PRs.\n> Even so, occasionally things fall through the cracks.\n> In this situation, a good first step is to comment on the PR.\n> If that doesn't work, asking on [the `dev` channel in zulip](https://quarkusio.zulipchat.com/#narrow/channel/187038-dev) is a good next step.\n\n### Coding Guidelines\n\n* We decided to disallow `@author` tags in the Javadoc: they are hard to maintain, especially in a very active project,\n  and we use the Git history to track authorship. GitHub also\n  has [this nice page with your contributions](https://github.com/quarkusio/quarkus/graphs/contributors). For each major\n  Quarkus release, we also publish the list of contributors in the announcement post.\n* Commits should be atomic and semantic. Please properly squash your pull requests before submitting them. Fixup commits\n  can be used temporarily during the review process but things should be squashed at the end to have meaningful commits.\n  We use merge commits so the GitHub Merge button cannot do that for us. If you don't know how to do that, just ask in\n  your pull request, we will be happy to help!\n* Please limit the use of lambdas and streams as much as possible in code that executes at runtime, in order to minimize runtime footprint.\n\n### Continuous Integration\n\nBecause we are all humans, and to ensure Quarkus is stable for everyone, all changes must go through Quarkus continuous\nintegration. Quarkus CI is based on GitHub Actions, which means that everyone has the ability to automatically execute\nCI in their forks as part of the process of making changes. We ask that all non-trivial changes go through this process,\nso that the contributor gets immediate feedback, while at the same time keeping our CI fast and healthy for everyone.\n\nThe process requires only one additional step to enable Actions on your fork (clicking the green button in the actions\ntab). [See the full video walkthrough](https://youtu.be/egqbx-Q-Cbg) for more details on how to do this.\n\nTo keep the caching of non-Quarkus artifacts efficient (speeding up CI), you should occasionally sync the `main` branch\nof your fork with `main` of this repo (e.g. monthly).\n\n### Tests and documentation are not optional\n\nDon't forget to include tests in your pull requests. Also don't forget the documentation (reference documentation,\njavadoc...).\n\nBe sure to test your pull request in:\n\n1. Java mode\n2. Native mode\n\nAlso, make sure that any native tests you add will actually get executed on CI.\nIn the interest of speeding up CI, the native build job `native-tests` have been split into multiple categories which\nare run in parallel. This means that each new integration test module needs to be configured explicitly\nin [`native-tests.json`](.github/native-tests.json) to have its integration tests run in native mode.\n\n## Setup\n\nIf you have not done so on this machine, you need to:\n\n* Make sure you have a case-sensitive filesystem. Java development on a case-insensitive filesystem can cause headaches.\n    * Linux: You're good to go.\n    * macOS: Use the `Disk Utility.app` to check. It also allows you to create a case-sensitive volume to store your code projects. See this [blog entry](https://karnsonline.com/case-sensitive-apfs/) for more.\n    * Windows: [Enable case sensitive file names per directory](https://learn.microsoft.com/en-us/windows/wsl/case-sensitivity)\n* Install Git and configure your GitHub access\n  * Windows:\n    * enable longpaths: `git config --global core.longpaths true`\n    * avoid CRLF breaks: `git config --global core.autocrlf false`\n* Install Java SDK 17+ (OpenJDK recommended)\n* Install [GraalVM](https://quarkus.io/guides/building-native-image)\n* Install platform C developer tools:\n    * Linux\n        * Make sure headers are available on your system (you'll hit 'Basic header file missing (<zlib.h>)' error if\n          they aren't).\n            * On Fedora `sudo dnf install zlib-devel`\n            * Otherwise `sudo apt-get install libz-dev`\n    * macOS\n        * `xcode-select --install`\n* Set `GRAALVM_HOME` to your GraalVM Home directory e.g. `/opt/graalvm` on Linux\n  or `$location/JDK/GraalVM/Contents/Home` on macOS\n\nA container engine (such as [Docker](https://www.docker.com/) or [Podman](https://podman.io/)) is not strictly\nnecessary: it is used to run the container-based tests which are not enabled by default.\n\nIt is a recommended install though when working on any extension that relies on dev services or container-based tests (\nHibernate ORM, MongoDB, ...):\n\n* For Docker, check [the installation guide](https://docs.docker.com/install/),\n  and [the macOS installation guide](https://docs.docker.com/docker-for-mac/install/). If you just install docker, be\n  sure that your current user can run a container (no root required). On Linux,\n  check [the post-installation guide](https://docs.docker.com/install/linux/linux-postinstall/).\n* For Podman, some extra configuration will be required to get testcontainers working. See\n  the [Quarkus and Podman guide](https://quarkus.io/guides/podman) for setup instructions.\n\n### IDE Config and Code Style\n\nQuarkus has a strictly enforced code style. Code formatting is done by the Eclipse code formatter, using the config\nfiles found in the `independent-projects/ide-config` directory. By default, when you run `./mvnw install`, the code will\nbe formatted automatically. When submitting a pull request the CI build will fail if running the formatter results in\nany code changes, so it is recommended that you always run a full Maven build before submitting a pull request.\n\nIf you want to run the formatting without doing a full build, you can run `./mvnw process-sources`.\n\n#### Eclipse Setup\n\nOpen the *Preferences* window, and then navigate to _Java_ -> _Code Style_ -> _Formatter_. Click _Import_ and then\nselect the `eclipse-format.xml` file in the `independent-projects/ide-config` directory.\n\nNext navigate to _Java_ -> _Code Style_ -> _Organize Imports_. Click _Import_ and select the `eclipse.importorder` file.\n\n#### IDEA Setup\n\n##### How to work\n\nQuarkus is a large project and IDEA will have a hard time compiling the whole of it. Before you start coding, make sure\nto build the project using Maven from the commandline with `./mvnw -Dquickly`.\n\n##### `OutOfMemoryError` while importing\n\nAfter creating an IDEA project, the first import might fail with an `OutOfMemory` error, as the size of the project\nrequires more memory than the IDEA default settings allow.\n\n**Note** In some IDEA versions the `OutOfMemory` error goes unreported. So if no error is reported but IDEA is still\nfailing to find symbols or the dependencies are wrong in the imported project, then importing might have failed due to\nan unreported `OutOfMemory` exception. One can further investigate this by inspecting\nthe `org.jetbrains.idea.maven.server.RemoteMavenServer36` process (or processes) using `JConsole`.\n\nTo fix that, open the _Preferences_ window (or _Settings_ depending on your edition), then navigate to _Build,\nExecution, Deployment_ > _Build Tools_ > _Maven_ > _Importing_. In _VM options for importer_, raise the heap to at least\n2 GB; some people reported needing more, e.g. `-Xmx8g`.\n\nIn recent IDEA versions (e.g. 2020.3) this might not work because _VM options for importer_ get ignored\nwhen `.mvn/jdk.config` is present (see [IDEA-250160](https://youtrack.jetbrains.com/issue/IDEA-250160))\nit disregards the _VM options for importer_ settings. An alternative solution is to go to _Help_ > _Edit Custom\nProperties..._ and add the following line:\n\n`idea.maven.embedder.xmx=8g`\n\nAfter these configurations, you might need to run  _File_ -> _Invalidate Caches and Restart_\nand then trigger a `Reload all Maven projects`.\n\n##### `package sun.misc does not exist` while building\n\nYou may get an error like this during the build:\n\n```\nError:(46, 56) java: package sun.misc does not exist\n```\n\nTo fix this go to _Settings_ > _Build, Execution, Deployment_ > _Compiler_ > _Java Compiler_\nand disable _Use '--release' option for cross compilation (java 9 and later)_.\n\n##### Formatting\n\nOpen the _Preferences_ window (or _Settings_ depending on your edition), navigate to _Plugins_ and install\nthe [Adapter for Eclipse Code Formatter](https://plugins.jetbrains.com/plugin/6546-eclipse-code-formatter) from the\nMarketplace.\n\nRestart your IDE, open the *Preferences* (or *Settings*) window again and navigate to _Adapter for Eclipse Code\nFormatter_ section on the left pane.\n\nSelect _Use Eclipse's Code Formatter_, then change the _Eclipse workspace/project folder or config file_ to point to the\n`eclipse-format.xml` file in the `independent-projects/ide-config/src/main/resources` directory. Make sure the _Optimize Imports_ box is\nticked. Then, select _Import Order from file_ and make it point to the `eclipse.importorder` file in the `independent-projects/ide-config/src/main/resources` directory.\n\nNext, disable wildcard imports:\nnavigate to _Editor_ -> _Code Style_ -> _Java_ -> _Imports_\nand set _Class count to use import with '\\*'_ to `999`. Do the same with _Names count to use static import with '\\*'_.\n\n### Gitpod\n\nYou can also use [Gitpod](https://gitpod.io) to contribute without installing anything on your computer.\nClick [here](https://gitpod.io/#https://github.com/quarkusio/quarkus/-/tree/main/) to start a workspace.\n\n## Build\n\n* Clone the repository: `git clone https://github.com/quarkusio/quarkus.git`\n* Navigate to the directory: `cd quarkus`\n* Set Maven heap to 4GB `export MAVEN_OPTS=\"-Xmx4g\"`\n* Invoke `./mvnw -Dquickly` from the root directory\n* _Note: On Windows, it may be necessary to run the build from an elevated shell. If you experience a failed build with\n  the error `\"A required privilege is not held by the client\"`, this should fix it._\n\n```bash\ngit clone https://github.com/quarkusio/quarkus.git\ncd quarkus\nexport MAVEN_OPTS=\"-Xmx4g\"\n./mvnw -Dquickly\n# Wait... success!\n```\n\nThis build skipped all the tests, native-image builds, documentation generation etc. and used the Maven\ngoals `clean install` by default. For more details about `-Dquickly` have a look at the `quick-build` profile\nin `quarkus-parent` (root `pom.xml`).\n\nWhen contributing to Quarkus, it is recommended to respect the following rules.\n\n> **Note:** The `impsort-maven-plugin` uses the `.cache` directory on each module to speed up the build.\n> Because we have configured the plugin to store in a versioned directory, you may notice over time that the `.cache` directory grows in size. You can safely delete the `.cache` directory in each module to reclaim the space.\n> Running `./mvnw clean -Dclean-cache` automatically deletes that directory for you.\n\n**Contributing to an extension**\n\nWhen you contribute to an extension, after having applied your changes, run:\n\n* `./mvnw -Dquickly` from the root directory to make sure you haven't broken anything obvious\n* `./mvnw -f extensions/<your-extension> clean install` to run a full build of your extension including the tests\n* `./mvnw -f integration-tests/<your-extension-its> clean install` to make sure ITs are still passing\n* `./mvnw -f integration-tests/<your-extension-its> clean install -Dnative` to test the native build (for small changes,\n  it might not be useful, use your own judgement)\n\n**Contributing to a core artifact**\n\nObviously, when you contribute to a core artifact of Quarkus, a change may impact any part of Quarkus. So the rule of\nthumb would be to run the full test suite locally but this is clearly impractical as it takes a lot of time/resources.\n\nThus, it is recommended to use the following approach:\n\n* run `./mvnw -Dquickly` from the root directory to make sure you haven't broken anything obvious\n* run any build that might be useful to test the behavior you changed actually fixes the issue you had (might be an\n  extension build, an integration test build...)\n* push your work to your own fork of Quarkus to trigger CI there\n* you can create a draft pull request to keep track of your work\n* wait until the build is green in your fork (use your own judgement if it's not fully green) before marking your pull\n  request as ready for review (which will trigger Quarkus CI)\n\n### Workflow tips\n\nDue to Quarkus being a large repository, having to rebuild the entire project every time a change is made isn't very\nproductive. The following Maven tips can vastly speed up development when working on a specific extension.\n\n#### Using mvnd\n\n[mvnd](https://github.com/apache/maven-mvnd) is a daemon for Maven providing faster builds.\nIt parallelizes your builds by default and makes sure the output is consistent even for a parallelized build.\n\nYou can https://github.com/apache/maven-mvnd?tab=readme-ov-file#how-to-install-mvnd[install mvnd] with SDKMAN!, Homebrew...\n\nmvnd is a good companion for your Quarkus builds.\n\nMake sure you install the latest mvnd 1.0.x which embeds Maven 3.x as Quarkus does not support Maven 4 yet.\nOnce it is installed, you can use `mvnd` in your Maven command lines instead of the typical `mvn` or `./mvnw`.\n\nIf anything goes wrong, you can stop the daemon and start fresh with `mvnd --stop`.\n\n#### Using aliases\n\nWhile building with `-Dquickly` or `-DquicklyDocs` is practical when contributing your first patches,\nif you contribute to Quarkus often, it is recommended to have your own aliases - for instance to make sure your build is parallelized.\n\nHere are a couple of useful aliases that are good starting points - and that you will need to adapt to your environment:\n\n- `build-fast`: build the Quarkus artifacts and install them\n- `build-docs`: run from the root of the project, build the documentation\n- `format`: format the source code following our coding conventions\n- `qss`: run the Quarkus CLI from a snapshot (make sure you build the artifacts first)\n\n- If using mvnd\n\n```sh\nalias build-fast=\"mvnd -e -DskipDocs -DskipTests -DskipITs -Dinvoker.skip -DskipExtensionValidation -Dskip.gradle.tests -Dtruststore.skip clean install\"\nalias build-docs=\"mvnd -e -DskipTests -DskipITs -Dinvoker.skip -DskipExtensionValidation -Dskip.gradle.tests -Dtruststore.skip -Dno-test-modules -Dasciidoctor.fail-if=DEBUG clean install\"\nalias format=\"mvnd process-sources -Denforcer.skip -Dprotoc.skip\"\nalias qss=\"java -jar ${HOME}/git/quarkus/devtools/cli/target/quarkus-cli-999-SNAPSHOT-runner.jar\"\n```\n\n- If using plain Maven\n\n```sh\nalias build-fast=\"mvn -T0.8C -e -DskipDocs -DskipTests -DskipITs -Dinvoker.skip -DskipExtensionValidation -Dskip.gradle.tests -Dtruststore.skip clean install\"\nalias build-docs=\"mvn -T0.8C -e -DskipTests -DskipITs -Dinvoker.skip -DskipExtensionValidation -Dskip.gradle.tests -Dtruststore.skip -Dno-test-modules -Dasciidoctor.fail-if=DEBUG clean install\"\nalias format=\"mvn -T0.8C process-sources -Denforcer.skip -Dprotoc.skip\"\nalias qss=\"java -jar ${HOME}/git/quarkus/devtools/cli/target/quarkus-cli-999-SNAPSHOT-runner.jar\"\n```\n\nUsing `./mvnw` is often not practical in this case as you might want to call these aliases from a nested directory.\n[gum](https://andresalmiray.com/gum-the-gradle-maven-wrapper/) might be useful in this case.\n\n##### Justfile\n\nAs a convenience, we have a [justfile](.justfile)) that provides the suggested set of aliases to use to build Quarkus using [just](https://just.systems/).\n\nRun `just -l` to see the list of aliases.\n\nBy default it uses `./mvnw`. If you use `mvnd` you can set the `QMVNCMD` environment variable to `mvnd` to use it instead.\n\n#### Building all modules of an extension\n\nLet's say you want to make changes to the `Jackson` extension. This extension contains the `deployment`, `runtime`\nand `spi` modules which can all be built by executing following command:\n\n```shell\n./mvnw install -f extensions/jackson/\n```\n\nThis command uses the path of the extension on the filesystem to identify it. Moreover, Maven will automatically build\nall modules in that path recursively.\n\n#### Building a single module of an extension\n\nLet's say you want to make changes to the `deployment` module of the Jackson extension. There are two ways to accomplish\nthis task as shown by the following commands:\n\n```shell\n./mvnw install -f extensions/jackson/deployment\n```\n\nor\n\n```shell\n./mvnw install --projects 'io.quarkus:quarkus-jackson-deployment'\n```\n\nIn this command we use the groupId and artifactId of the module to identify it.\n\n#### Building with relocations\n\nLet's say you want to make changes to an extension and try it with an existing application that uses older Quarkus with\nextensions that got renamed or moved recently.\nQuarkus maintains compatibility as much as possible and for most renamed or moved artifact, it provides a relocation artifact,\nallowing the build to be redirected to the new artifact.\nHowever, relocations are not built by default, and to build and install them, you need to enable the `relocations` Maven profile as follows:\n\n```shell\n./mvnw -Dquickly -Prelocations\n```\n\nRelocations are published with every Quarkus release, thus this is needed only when working with Quarkus main.\n\n#### Running a single test\n\nOften you need to run a single test from some Maven module. Say for example you want to run the `GreetingResourceTest`\nof the `resteasy-jackson` Quarkus integration test (which can be\nfound [here](https://github.com/quarkusio/quarkus/blob/main/integration-tests/resteasy-jackson)). One way to accomplish\nthis is by executing the following command:\n\n```shell\n./mvnw test -f integration-tests/resteasy-jackson/ -Dtest=GreetingResourceTest\n```\n\n##### Maven Invoker tests\n\nFor testing some scenarios, Quarkus uses the [Maven Invoker](https://maven.apache.org/shared/maven-invoker/) to run\ntests. For these cases, to run a single test, one needs to use the `invoker.test` property along with the name of the\ndirectory which houses the test project.\n\nFor example, in order to only run the MySQL test project of the container-image tests, the Maven command would be:\n\n```shell\n./mvnw verify -f integration-tests/container-image/maven-invoker-way -Dinvoker.test=container-build-jib-with-mysql\n```\n\nNote that we use the `verify` goal instead of the `test` goal because the Maven Invoker is usually bound to the\nintegration-test phase. Furthermore, depending on the actual test being invoked, more options maybe needed (for the\nspecific integration test mentioned above, `-Dstart-containers` and `-Dtest-containers` are needed).\n\n### Build with multiple threads\n\nThe following standard Maven option can be used to build with multiple threads to speed things up (here 0.5 threads per\nCPU core):\n\n```shell\n./mvnw install -T0.5C\n```\n\nPlease note that running tests in parallel is not supported at the moment!\n\n### Don't build any test modules\n\nTo omit building currently way over 100 pure test modules, run:\n\n```shell\n./mvnw install -Dno-test-modules\n```\n\nThis can come in handy when you are only interested in the actual \"productive\" artifacts, e.g. when bisecting.\n\n#### Automatic incremental build\n\n:information_source: This feature is currently in testing mode. You're invited to give it a go and please reach out\nvia [Zulip](https://quarkusio.zulipchat.com/#narrow/stream/187038-dev) or GitHub in case something doesn't work as\nexpected or you have ideas to improve things.\n\nInstead of _manually_ specifying the modules to build as in the previous examples, you can\ntell [gitflow-incremental-builder (GIB)](https://github.com/gitflow-incremental-builder/gitflow-incremental-builder) to\nonly build the modules that have been changed or depend on modules that have been changed (downstream). E.g.:\n\n```shell\n./mvnw install -Dincremental\n```\n\nThis will build all modules (and their downstream modules) that have been changed compared to your _local_ `main`,\nincluding untracked and uncommitted changes.\n\nIf you just want to build the changes since the last commit on the current branch, you can switch off the branch\ncomparison via `-Dgib.disableBranchComparison` (or short: `-Dgib.dbc`).\n\nThere are many more configuration options in GIB you can use to customize its\nbehaviour: <https://github.com/gitflow-incremental-builder/gitflow-incremental-builder#configuration>\n\nParallel builds (`-T...`) should work without problems but parallel test execution is not yet supported (in general, not\na GIB limitation).\n\n##### Special case `bom-descriptor-json`\n\nWithout going too much into details (`devtools/bom-descriptor-json/pom.xml` has more info), you should build this\nmodule _without_ `-Dincremental` _if you changed any extension \"metadata\"_:\n\n* Addition/renaming/removal of an extension\n* Any other changes to any `quarkus-extension.yaml`\n\n##### Usage by CI\n\nThe GitHub Actions based Quarkus CI is using GIB to reduce the average build time of pull request builds and builds of\nbranches in your fork.\n\nCI is using a slightly different GIB config than locally:\n\n* [Special handling of \"Explicitly selected projects\"](https://github.com/gitflow-incremental-builder/gitflow-incremental-builder#explicitly-selected-projects)\n  is deactivated\n* Untracked/uncommitted changes are not considered\n* Branch comparison is more complex due to distributed GitHub forks\n* Certain \"critical\" branches like `main` are not built incrementally\n\nFor more details see the `Get GIB arguments` step in `.github/workflows/ci-actions-incremental.yml`.\n\n##### Develocity build cache\n\n###### Getting set up\n\nQuarkus has a Develocity instance set up at <https://ge.quarkus.io> that can be used to analyze the build performance of the Quarkus project and also provides build cache services.\n\nIf you have an account on <https://ge.quarkus.io>, this can speed up your local builds significantly.\n\nIf you have a need or interest to share your build scans and use the build cache, you will need to get an account for the Develocity instance.\nIt is only relevant for members of the Quarkus team and you should contact either Guillaume Smet or Max Andersen to set up your account.\n\nWhen you have the account set up, from the root of your local Quarkus workspace, run:\n\n```shell\n./mvnw develocity:provision-access-key\n```\n\nand log in in the browser window it will open (if not already logged in).\nYour access key will be stored in the `~/.m2/.develocity/keys.properties` file.\nFrom then your build scans will be sent to the Develocity instance and you will be able to benefit from the build cache.\n\nYou can alternatively also generate an API key from the Develocity UI and then use an environment variable like this:\n\n```shell\nexport DEVELOCITY_ACCESS_KEY=ge.quarkus.io=a_secret_key\n```\n\nWhen debugging a test (and especially flaky tests), you might want to temporarily disable the build cache.\nYou can easily do it by adding `-Dno-build-cache` to your Maven command.\n\nThe remote cache is stored on the Develocity server and is populated by CI.\nTo be able to benefit from the remote cache, you need to use a Java version tested on CI (at the moment, either 17 or 21) and the same Maven version (thus why it is recommended to use the Maven wrapper aka `./mvnw`).\nNote that the local cache alone should bring you a significant speedup.\n\nThe local cache is stored in the `~/.m2/.develocity/build-cache/` directory.\nIf you have problems with your local cache, you can delete this directory.\n\n###### -Dquickly\n\nWhen using `-Dquickly` with no goals, Develocity is unable to detect that the `clean` goal is present.\nWe worked around it but you will get the following warnings at the beginning of your build output:\n\n```\n[WARNING] Build cache entries produced by this build may be incorrect since the clean lifecycle is not part of the build invocation.\n[WARNING] You must only invoke the build without the clean lifecycle if the build is started from a clean working directory.\n```\n\nYou can safely ignore them.\n\n###### Benchmarking the build\n\nDuring the experiment phase, there might be a need to benchmark the build in a reliable manner.\n\nFor this, we can use the [Gradle Profiler](https://github.com/gradle/gradle-profiler).\nIt can be installed with SDKMAN! (`sdk install gradleprofiler`) or Homebrew (`brew install gradle-profiler`).\n\nThen we can run the following commands at the root of the Quarkus project:\n\n```\n# Without cache\ngradle-profiler --maven --benchmark --scenario-file build.scenario clean_install_no_cache\n\n# With cache\ngradle-profiler --maven --benchmark --scenario-file build.scenario clean_install\n```\n\nSimple HTML reports will be published in the `profile_out*` directories.\n\n## Release your own version\n\nYou might want to release your own patched version of Quarkus to an internal repository.\n\nTo do so, you will first need to update the version in the source code:\n\n```shell\n./update-version.sh \"x.y.z-yourcompany\"\n```\n\nWe use a shell script as we also need to update the version in various descriptors and test files.\nThe shell script calls `./mvnw versions:set` under the hood, among other things.\n\nCommit the changes, then run:\n\n```shell\n./mvnw --settings your-maven-settings.xml \\\n    clean deploy \\\n    -DskipTests -DskipITs \\\n    -DperformRelease=true \\\n    -Prelease \\\n    -Ddokka \\\n    -Dgpg.skip\n```\n\nIf your Maven settings are in your global Maven settings file located in the `.m2/` directory, you can drop the `--settings your-maven-settings.xml` part.\n\n## Documentation\n\nThe documentation is hosted in the [`docs` module](https://github.com/quarkusio/quarkus/tree/main/docs) of the main\nQuarkus repository and is synced to the [Quarkus.io website](https://quarkus.io/guides/) at release time. The Asciidoc\nfiles can be found in\nthe [`src/main/asciidoc` directory](https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc).\n\nFor more information, see the [Contribute to Quarkus Documentation](https://quarkus.io/guides/doc-contribute-docs-howto) guide.\n\n### Building the documentation\n\nWhen contributing a significant documentation change, it is highly recommended to run the build and check the output.\n\nFirst build the whole Quarkus repository with the documentation build enabled:\n\n```shell\n./mvnw -DquicklyDocs\n```\n\nThis will generate the configuration properties documentation includes in the root `target/asciidoc/generated/config/`\ndirectory and will avoid a lot of warnings when building the documentation module.\n\nThen you can build the `docs` module specifically:\n\n```shell\n./mvnw -f docs clean install\n```\n\nYou can check the output of the build in the `docs/target/generated-docs/` directory.\n\nYou can build the documentation this way as many times as needed, just avoid doing a `./mvnw clean` at the root level\nbecause you would lose the configuration properties documentation includes.\n\n## Usage\n\nAfter the build was successful, the artifacts are available in your local Maven repository.\n\nTo include them into your project a few things have to be changed.\n\n#### With Maven\n\n*pom.xml*\n\n```xml\n<properties>\n    <quarkus-plugin.version>999-SNAPSHOT</quarkus-plugin.version>\n    <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\n    <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>\n    <quarkus.platform.version>999-SNAPSHOT</quarkus.platform.version>\n    .\n    .\n    .\n</properties>\n```\n\n#### With Gradle\n\n*gradle.properties*\n\n```ini\nquarkusPlatformArtifactId=quarkus-bom\nquarkusPluginVersion=999-SNAPSHOT\nquarkusPlatformVersion=999-SNAPSHOT\nquarkusPlatformGroupId=io.quarkus\n```\n\n*settings.gradle*\n\n```gradle\npluginManagement {\n    repositories {\n        mavenLocal() // add mavenLocal() to first position\n        mavenCentral()\n        gradlePluginPortal()\n    }\n    .\n    .\n    .\n}\n```\n\n*build.gradle*\n\n```gradle\nrepositories {\n    mavenLocal() // add mavenLocal() to first position\n    mavenCentral()\n}\n```\n\n### MicroProfile TCK's\n\nQuarkus has a TCK module in `tcks` where all the MicroProfile TCK's are set up for you to run if you wish. These include\ntests to areas like Config, JWT Authentication, Fault Tolerance, Health Checks, Metrics, OpenAPI, Telemetry, REST\nClient, Reactive Messaging and Context Propagation.\n\nThe TCK module is not part of the main Maven reactor build, but you can enable it and run the TCK tests by activating\nthe Maven Profile `-Ptcks`. If your work is related to any of these areas, running the TCK's is highly recommended to\nmake sure you are not breaking the project. The TCK's will also run on any Pull Request.\n\nYou can either run all the TCK's or just a subset by executing `mvn verify` in the `tcks` module root or each of the\nsubmodules. If you wish to run a particular test, you can use Maven `-Dtest=` property with the fully qualified name of\nthe test class and optionally the method name by using\n`mvn verify -Dtest=fully.qualified.test.class.name#methodName`.\n\n### Test Coverage\n\nQuarkus uses Jacoco to generate test coverage. If you would like to generate the report\nrun `mvn install -Ptest-coverage`, then change into the `coverage-report` directory and run `mvn package`. The code\ncoverage report will be generated in\n`target/site/jacoco/`.\n\nThis currently does not work on Windows as it uses a shell script to copy all the classes and files into the code\ncoverage module.\n\nIf you just need a report for a single module, run `mvn install jacoco:report -Ptest-coverage` in that module (or\nwith `-f ...`).\n\n## Extensions\n\n### Descriptions\n\nExtensions descriptions (in the `runtime/pom.xml` description or in the YAML `quarkus-extension.yaml`)\nare used to describe the extension and are visible in <https://code.quarkus.io> and <https://extensions.quarkus.io>. Try and pay attention to it. Here are a\nfew recommendation guidelines:\n\n- keep it relatively short so that no hover is required to read it\n- describe the function over the technology\n- use an action / verb to start the sentence\n- do not conjugate the action verb (`Connect foo`, not `Connects foo` nor `Connecting foo`)\n- connectors (JDBC / reactive) etc. tend to start with Connect\n- do not mention `Quarkus`\n- do not mention `extension`\n- avoid repeating the extension name\n\nBad examples and the corresponding good example:\n\n- \"AWS Lambda\" (use \"Write AWS Lambda functions\")\n- \"Extension for building container images with Docker\" (use \"Build container images with Docker\")\n- \"PostgreSQL database connector\" (use \"Connect to the PostgreSQL database via JDBC\")\n- \"Asynchronous messaging for Reactive Streams\" (use \"Produce and consume messages and implement event driven and data\n  streaming applications\")\n\n### Update dependencies to extensions\n\nWhen adding a new extension you should run `update-extension-dependencies.sh` so that special modules\nlike `devtools/bom-descriptor-json`\nthat are consuming this extension are built *after* the respective extension. Simply add to your commit the files that\nwere changed by the script.\n\nWhen removing an extension make sure to also remove all dependencies to it from all `pom.xml`. It's easy to miss this as\nlong as the extension artifact is still present in your local Maven repository.\n\n### Check security vulnerabilities\n\nWhen adding a new extension or updating the dependencies of an existing one,\nit is recommended to run in the extension directory the [OWASP Dependency Check](https://jeremylong.github.io/DependencyCheck) with `mvn -Dowasp-check`\nso that known security vulnerabilities in the extension dependencies can be detected early.\n\n## The small print\n\nThis project is an open source project, please act responsibly, be nice, polite and enjoy!\n\n## Frequently Asked Questions\n\n* The Maven build fails with `OutOfMemoryException`\n\n  Set Maven options to use more memory: `export MAVEN_OPTS=\"-Xmx4g\"`.\n\n* IntelliJ fails to import Quarkus Maven project with `java.lang.OutOfMemoryError: GC overhead limit exceeded`\n\n  In IntelliJ IDEA if you see problems in the Maven view\n  claiming `java.lang.OutOfMemoryError: GC overhead limit exceeded` that means the project import failed.\n\n  See section `IDEA Setup` as there are different possible solutions described.\n\n* IntelliJ does not recognize the project as a Java 17 project\n\n  In the Maven pane, uncheck the `include-jdk-misc` and `compile-java8-release-flag` profiles\n\n* Build hangs with DevMojoIT running infinitely\n\n  ```shell\n  ./mvnw clean install\n  # Wait...\n  [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.192 s - in io.quarkus.maven.it.GenerateConfigIT\n  [INFO] Running io.quarkus.maven.it.DevMojoIT\n  ```\n\n  DevMojoIT require a few minutes to run but anything more than that is not expected. Make sure that nothing is running\n  on 8080.\n\n* The native integration test for my extension didn't run in the CI\n\n  In the interest of speeding up CI, the native build job `native-tests` have been split into multiple categories which\n  are run in parallel. This means that each new integration test module needs to be configured explicitly\n  in [`native-tests.json`](.github/native-tests.json) to have its integration tests run in native mode.\n\n* Build aborts complaining about missing (or superfluous) `minimal *-deployment dependencies`\n  or `illegal runtime dependencies`\n\n  To ensure a consistent build order, even when building in parallel (`./mvnw -T...`) or building\n  incrementally/partially (`./mvnw -pl...`), the build enforces the presence of certain dependencies. If those\n  dependencies are not present, your local build will most likely use possibly outdated artifacts from you local repo\n  and CI build might even fail not finding certain artifacts.\n\n  Just do what the failing enforcer rule is telling you, and you should be fine.\n\n* Build fails with multiple `This project has been banned from the build due to previous failures` messages\n\n  Just scroll up, there should be an error or warning somewhere. Failing enforcer rules are known to cause such effects\n  and in this case there'll be something like:\n\n  ```\n  [WARNING] Rule 0: ... failed with message:\n  ...\n  ```\n\n* Tests fail with `Caused by: io.quarkus.runtime.QuarkusBindException: Port(s) already bound: 8080: Address already in use`\n\n    Check that you do not have other Quarkus dev environments, apps or other web servers running on this default 8080 port.\n"
        },
        {
          "name": "DECISIONS.adoc",
          "type": "blob",
          "size": 3.0947265625,
          "content": "= Decision-Making Framework\n\n== Proposal\n\nDesign and process decision proposals should be made to the `quarkus-dev`\nGoogle group (https://groups.google.com/forum/#!forum/quarkus-dev[on the web]\nor mailto:quarkus-dev@groups.google.com[over e-mail]).\n\n== Bake time\n\nAny significant design or process decision should \"bake\"\nfor a minimum of 2 regular working days before becoming policy.\nIf this time elapses with no discussion, this should be considered\nto be assent - with a few caveats.  This allows things to move along\nwithout new ideas being stuck in an idle \"limbo\" for weeks and weeks waiting for\nan OK.\n\n== Notification\n\nWhen proposing a design decision, it is important to ensure that the\nmaintainer(s) and contributor(s) of any impacted areas are aware of\nthe decision.  If a design proposal impacts a system and the\nmaintainer has not responded (even just to say \"OK\"), then it is the\nresponsibility of the proposer to ensure that they are not on PTO\n(vacation) or anything of that nature.  The proposer should make a\nreasonable effort to contact the maintainer(s) and significant contributor(s)\nof the given area and ensure that they've at least _seen_ the proposal.\nTo streamline this, it's a good idea for such maintainers to give their\nquick OK to a proposal on a timely basis.\n\nIn cases where it is unclear to the proposer who is responsible for a\ngiven area, this should be stated in the proposal so that the responsible\nperson or people can be found.\n\nFor a process decision, the same rules apply, except that the\n\"maintainers\" of this \"system\" should be considered to be the project\nlead(s).  Again silence means assent - but only if they've _seen_ the\nproposal.\n\nIt is the responsibility of all maintainers to stay on top of design\nproposals, even if just to respond and say \"I need time to think about\nit\" before the 48 hours expire.\n\nNotification may take place over the Google group or e-mail list, or\nover https://quarkusio.zulipchat.com/#[the online Zulip chat].\n\n== Issues and pull requests on GitHub\n\nIf a https://github.com/quarkusio/quarkus/issues[GitHub issue] or\nhttps://github.com/quarkusio/quarkus/pulls[pull request] is created which\nproposes a design change, then it should be labelled `triage/needs-decision`, and the\ncorresponding discussion should then be held on the Google group as explained\nabove.  A link to the discussion should be placed in a comment of the issue.\nSuch pull requests should not be merged, nor issues resolved, until the design\ndecision is resolved according to this process.\n\n== Disputes\n\nBecause good ideas can come from anywhere, anyone may propose a design\nchange; likewise, anyone may dispute a proposal.  It is the responsibility\nof all parties to participate fairly and respectfully.\n\nIn the case of unresolvable disputes, the final decision rests with\nthe project lead(s); it is their responsibility to\nensure that they are informed on the details of the decision before\nruling.  The project leads are encouraged to facilitate resolution\namong the disputing parties before resorting to an executive ruling,\nbut at the end of the day the project needs to move forward and so\nthis should be kept in mind.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.09375,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MAINTAINERS.adoc",
          "type": "blob",
          "size": 8.953125,
          "content": "Below is the list of maintainers for each Quarkus extension hosted in the main repository.\n\nIf you think some information is outdated, either provide a pull request or email the `quarkus-dev` mailing list.\n\n[cols=2*,options=\"header\"]\n|===\n|Extension\n|Maintainers\n\n|Agroal\n|https://github.com/gsmet[Guillaume Smet], https://github.com/barreiro[Luis Barreiro]\n\n|Amazon Alexa\n|https://github.com/oztimpower[Timothy Power]\n\n|Amazon Lambda\n|https://github.com/patriot1burke[Bill Burke]\n\n|ArC\n|https://github.com/mkouba[Martin Kouba], https://github.com/manovotn[MatÄ›j NovotnÃ½]\n\n|Artemis (Core and JMS)\n|https://github.com/middagj[Jacob Middag]\n\n|Avro\n|https://github.com/cescoffier[ClÃ©ment Escoffier]\n\n|Azure Functions HTTP\n|https://github.com/patriot1burke[Bill Burke]\n\n|Cache\n|https://github.com/gwenneg[Gwenneg Lepage]\n\n|Caffeine\n|https://github.com/galderz[Galder ZamarreÃ±o], https://github.com/wburns[William Burns]\n\n|https://github.com/apache/camel-quarkus[Camel]\n|https://github.com/jamesnetherton[James Netherton], https://github.com/ppalaga[Peter Palaga]\n\n|Cassandra-Quarkus\n|https://github.com/adutra[Alexandre Dutra], https://github.com/tomekl007[Tomasz Lelek], https://github.com/absurdfarce[Bret McGuire], https://github.com/emerkle826[Erik Merkle], https://github.com/olim7t[Olivier Michallat]\n\n|Container Image Jib\n|https://github.com/geoand[Georgios Andrianakis]\n\n|Container Image Docker\n|https://github.com/geoand[Georgios Andrianakis]\n\n|Elasticsearch REST Client Common\n|https://github.com/gsmet[Guillaume Smet], https://github.com/yrodiere[Yoann RodiÃ¨re], https://github.com/loicmathieu[LoÃ¯c Mathieu]\n\n|Elasticsearch REST Client\n|https://github.com/loicmathieu[LoÃ¯c Mathieu], https://github.com/gsmet[Guillaume Smet]\n\n|Elasticsearch REST High Level Client\n|https://github.com/loicmathieu[LoÃ¯c Mathieu], https://github.com/gsmet[Guillaume Smet]\n\n|Elytron Security\n|https://github.com/sberyozkin[Sergey Beryozkin]\n\n|Elytron Security - OAuth2\n|https://github.com/loicmathieu[LoÃ¯c Mathieu]\n\n|Elytron Security - JDBC\n|https://github.com/stuartwdouglas[Stuart Douglas], https://github.com/danielpetisme[Daniel PÃ©tisme]\n\n|Elytron Security - Properties files\n|https://github.com/stuartwdouglas[Stuart Douglas]\n\n|Flyway\n|https://github.com/cristhiank[Cristhian Lopez], https://github.com/gastaldi[George Gastaldi], https://github.com/geoand[Georgios Andrianakis]\n\n|Funqy\n|https://github.com/patriot1burke[Bill Burke]\n\n|Google Cloud Functions\n|https://github.com/loicmathieu[LoÃ¯c Mathieu]\n\n|gRPC\n|https://github.com/cescoffier[ClÃ©ment Escoffier], https://github.com/alesj[AleÅ¡ Justin]\n\n|Hibernate ORM\n|https://github.com/yrodiere[Yoann RodiÃ¨re], https://github.com/gsmet[Guillaume Smet]\n\n|Hibernate ORM with Panache\n|https://github.com/FroMage[StÃ©phane Ã‰pardaud]\n\n|Hibernate ORM with Panache for Kotlin\n|\n\n|Hibernate Search\n|https://github.com/yrodiere[Yoann RodiÃ¨re], https://github.com/gsmet[Guillaume Smet]\n\n|Hibernate Validator\n|https://github.com/gsmet[Guillaume Smet]\n\n|Infinispan Client\n|https://github.com/wburns[William Burns], https://github.com/karesti[Katia Aresti]\n\n|Jackson\n|https://github.com/geoand[Georgios Andrianakis], https://github.com/gsmet[Guillaume Smet]\n\n|JAXB\n|https://github.com/gsmet[Guillaume Smet]\n\n|JDBC - H2\n|https://github.com/Sanne[Sanne Grinovero]\n\n|JDBC - MariaDB\n|https://github.com/Sanne[Sanne Grinovero], https://github.com/gsmet[Guillaume Smet]\n\n|JDBC - MySQL\n|https://github.com/machi1990[Manyanda Chitimbo], https://github.com/gsmet[Guillaume Smet]\n\n|JDBC - PostgreSQL\n|https://github.com/Sanne[Sanne Grinovero], https://github.com/gsmet[Guillaume Smet]\n\n|JDBC - SQL Server\n|https://github.com/Sanne[Sanne Grinovero]\n\n|JSON-B\n|https://github.com/geoand[Georgios Andrianakis], https://github.com/gsmet[Guillaume Smet]\n\n|JSON-P\n|https://github.com/gsmet[Guillaume Smet]\n\n|Kafka Client\n|https://github.com/cescoffier[ClÃ©ment Escoffier]\n\n|Kafka Streams\n|https://github.com/gunnarmorling[Gunnar Morling]\n\n|Kogito\n|https://github.com/mariofusco[Mario Fusco], https://github.com/cristianonicolai[Cristiano Nicolai]\n\n|Kotlin\n|https://github.com/geoand[Georgios Andrianakis]\n\n|Kubernetes\n|https://github.com/Sgitario[ Jose Carvajal], https://github.com/iocanel[Ioannis Canellos]\n\n|Kubernetes Client\n|https://github.com/geoand[Georgios Andrianakis], https://github.com/gastaldi[George Gastaldi]\n\n|Liquibase\n|https://github.com/andrejpetras[Andrej Petras], https://github.com/geoand[Georgios Andrianakis]\n\n|Mailer\n|https://github.com/cescoffier[ClÃ©ment Escoffier]\n\n|Minikube\n|https://github.com/geoand[Georgios Andrianakis], https://github.com/iocanel[Ioannis Canellos]\n\n|MongoDB client\n|https://github.com/cescoffier[ClÃ©ment Escoffier]\n\n|MongoDB with Panache\n|https://github.com/loicmathieu[LoÃ¯c Mathieu]\n\n|Narayana JTA\n|https://github.com/mmusgrov[Michael Musgrove], https://github.com/gsmet[Guillaume Smet]\n\n|Narayana STM\n|https://github.com/mmusgrov[Michael Musgrove]\n\n|Neo4j\n|https://github.com/michael-simons[Michael Simons]\n\n|Netty\n|https://github.com/stuartwdouglas[Stuart Douglas], https://github.com/cescoffier[ClÃ©ment Escoffier]\n\n|OIDC (OpenID Connect)\n|https://github.com/sberyozkin[Sergey Beryozkin], https://github.com/stuartwdouglas[Stuart Douglas], https://github.com/pedroigor[Pedro Igor]\n\n|OpenShift\n|https://github.com/iocanel[Ioannis Canellos], https://github.com/geoand[Georgios Andrianakis]\n\n|OptaPlanner\n|https://github.com/ge0ffrey[Geoffrey De Smet], https://github.com/triceo[LukÃ¡Å¡ PetrovickÃ½]\n\n|Quartz\n|https://github.com/mkouba[Martin Kouba], https://github.com/machi1990[Manyanda Chitimbo]\n\n|Qute (Templates)\n|https://github.com/mkouba[Martin Kouba]\n\n|Reactive Messaging\n|https://github.com/cescoffier[ClÃ©ment Escoffier]\n\n|Reactive MySQL Client\n|https://github.com/tsegismont[Thomas SÃ©gismont]\n\n|Reactive PG Client\n|https://github.com/tsegismont[Thomas SÃ©gismont]\n\n|Reactive Streams Operators\n|https://github.com/cescoffier[ClÃ©ment Escoffier]\n\n|Redis Client\n|https://github.com/machi1990[Manyanda Chitimbo], https://github.com/cescoffier[ClÃ©ment Escoffier], https://github.com/gsmet[Guillaume Smet]\n\n|REST Client\n|https://github.com/asoldano[Alessio Soldano], https://github.com/ronsigal[Ron Sigal]\n\n|RESTEasy\n|https://github.com/patriot1burke[Bill Burke]\n\n|RESTEasy - Common\n|https://github.com/patriot1burke[Bill Burke], https://github.com/gsmet[Guillaume Smet]\n\n|RESTEasy - JAXB\n|https://github.com/gsmet[Guillaume Smet]\n\n|RESTEasy - Jackson\n|https://github.com/geoand[Georgios Andrianakis], https://github.com/gsmet[Guillaume Smet]\n\n|RESTEasy - JSON-B\n|https://github.com/geoand[Georgios Andrianakis], https://github.com/gsmet[Guillaume Smet]\n\n|Scala\n|TODO\n\n|Scheduler\n|https://github.com/mkouba[Martin Kouba]\n\n|SmallRye Config\n|https://github.com/radcortez[Roberto Cortez]\n\n|SmallRye Context Propagation\n|https://github.com/FroMage[StÃ©phane Ã‰pardaud], https://github.com/manovotn[MatÄ›j NovotnÃ½]\n\n|SmallRye Fault Tolerance\n|https://github.com/Ladicek[Ladislav Thon]\n\n|SmallRye Health\n|https://github.com/antoinesd[Antoine Sabot-Durand], https://github.com/jmartisk[Jan Martiska]\n\n|SmallRye JWT\n|https://github.com/sberyozkin[Sergey Beryozkin], https://github.com/radcortez[Roberto Cortez]\n\n|SmallRye Metrics\n|https://github.com/jmartisk[Jan Martiska]\n\n|SmallRye OpenAPI\n|https://github.com/phillip-kruger[Phillip Kruger], https://github.com/radcortez[Roberto Cortez], https://github.com/EricWittmann[Eric Wittmann]\n\n|SmallRye GraphQL\n|https://github.com/phillip-kruger[Phillip Kruger], https://github.com/jmartisk[Jan Martiska]\n\n|SmallRye GraphQL Client\n|https://github.com/jmartisk[Jan Martiska], https://github.com/phillip-kruger[Phillip Kruger]\n\n|SmallRye Reactive Messaging\n|https://github.com/cescoffier[ClÃ©ment Escoffier]\n\n|SmallRye Reactive Messaging - AMQP\n|https://github.com/cescoffier[ClÃ©ment Escoffier]\n\n|SmallRye Reactive Messaging - Kafka\n|https://github.com/cescoffier[ClÃ©ment Escoffier], https://github.com/ozangunalp[Ozan Gunalp]\n\n|SmallRye Reactive Messaging - MQTT\n|https://github.com/cescoffier[ClÃ©ment Escoffier]\n\n|Spring Boot Properties\n|https://github.com/gytis[Gytis Trikleris]\n\n|Spring Cache\n|https://github.com/geoand[Georgios Andrianakis]\n\n|Spring Cloud Config Client\n|https://github.com/geoand[Georgios Andrianakis]\n\n|Spring DI\n|https://github.com/geoand[Georgios Andrianakis]\n\n|Spring Data JPA\n|https://github.com/geoand[Georgios Andrianakis]\n\n|Spring Scheduled\n|https://github.com/aureamunoz[Aurea Munoz]\n\n|Spring Web\n|https://github.com/geoand[Georgios Andrianakis]\n\n|Swagger UI\n|https://github.com/phillip-kruger[Phillip Kruger]\n\n|Tika\n|https://github.com/sberyozkin[Sergey Beryozkin]\n\n|Undertow\n|https://github.com/stuartwdouglas[Stuart Douglas]\n\n|Undertow Websockets\n|https://github.com/stuartwdouglas[Stuart Douglas]\n\n|Vault\n|https://github.com/vsevel[Vincent Sevel]\n\n|Vert.x Core\n|https://github.com/stuartwdouglas[Stuart Douglas], https://github.com/cescoffier[ClÃ©ment Escoffier]\n\n|Vert.x HTTP\n|https://github.com/stuartwdouglas[Stuart Douglas], https://github.com/cescoffier[ClÃ©ment Escoffier]\n\n|Vert.x\n|https://github.com/cescoffier[ClÃ©ment Escoffier]\n\n|Vert.x Web\n|https://github.com/cescoffier[ClÃ©ment Escoffier]\n|===\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.390625,
          "content": "[![Quarkus](https://design.jboss.org/quarkus/logo/final/PNG/quarkus_logo_horizontal_rgb_1280px_default.png#gh-light-mode-only)](https://quarkus.io/#gh-light-mode-only)\n[![Quarkus](https://design.jboss.org/quarkus/logo/final/PNG/quarkus_logo_horizontal_rgb_1280px_reverse.png#gh-dark-mode-only)](https://quarkus.io/#gh-dark-mode-only)\n\n[![Version](https://img.shields.io/maven-central/v/io.quarkus/quarkus-bom?logo=apache-maven&style=for-the-badge)](https://search.maven.org/artifact/io.quarkus/quarkus-bom)\n[![GitHub Actions Status](<https://img.shields.io/github/actions/workflow/status/QuarkusIO/quarkus/ci-actions-incremental.yml?branch=main&logo=GitHub&style=for-the-badge>)](https://github.com/quarkusio/quarkus/actions?query=workflow%3A%22Quarkus+CI%22)\n[![Commits](https://img.shields.io/github/commit-activity/m/quarkusio/quarkus.svg?label=commits&style=for-the-badge&logo=git&logoColor=white)](https://github.com/quarkusio/quarkus/pulse)\n[![License](https://img.shields.io/github/license/quarkusio/quarkus?style=for-the-badge&logo=apache)](https://www.apache.org/licenses/LICENSE-2.0)\n[![Project Chat](https://img.shields.io/badge/zulip-join_chat-brightgreen.svg?style=for-the-badge&logo=zulip)](https://quarkusio.zulipchat.com/)\n[![Gitpod Ready-to-Code](https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?style=for-the-badge&logo=gitpod&logoColor=white)](https://gitpod.io/#https://github.com/quarkusio/quarkus/-/tree/main/)\n[![Supported JVM Versions](https://img.shields.io/badge/JVM-17--21-brightgreen.svg?style=for-the-badge&logo=openjdk)](https://github.com/quarkusio/quarkus/actions/runs/113853915/)\n[![Develocity](https://img.shields.io/badge/Revved%20up%20by-Develocity-007EC5?style=for-the-badge&logo=gradle)](https://ge.quarkus.io/scans)\n[![GitHub Repo stars](https://img.shields.io/github/stars/quarkusio/quarkus?style=for-the-badge)](https://github.com/quarkusio/quarkus/stargazers)\n[![Gurubase](https://img.shields.io/badge/Gurubase-Ask%20Quarkus%20Guru-007EC5?style=for-the-badge)](https://gurubase.io/g/quarkus)\n\n# Quarkus - Supersonic Subatomic Java\n\nQuarkus is a Cloud Native, (Linux) Container First framework for writing Java applications.\n\n* **Container First**:\nMinimal footprint Java applications optimal for running in containers.\n* **Cloud Native**:\nEmbraces [12 factor architecture](https://12factor.net) in environments like Kubernetes.\n* **Unify imperative and reactive**:\nBrings under one programming model non-blocking and imperative styles of development.\n* **Standards-based**:\nBased on the standards and frameworks you love and use (RESTEasy and JAX-RS, Hibernate ORM and JPA, Netty, Eclipse Vert.x, Eclipse MicroProfile, Apache Camel...).\n* **Microservice First**:\nBrings lightning fast startup time and code turnaround to Java apps.\n* **Developer Joy**:\nDevelopment centric experience without compromise to bring your amazing apps to life in no time.\n\n_All under ONE framework._\n\n## Getting Started\n\n* [Documentation](https://quarkus.io)\n* [Wiki](https://github.com/quarkusio/quarkus/wiki)\n\n## Migration Guides\n\nWe collect all the migration notes in our [migration guides](https://github.com/quarkusio/quarkus/wiki/Migration-Guides).\n\n## Release Planning\n\nInterested in when the next release is coming? Check our [release planning](https://github.com/quarkusio/quarkus/wiki/Release-Planning) document for details.\n\n## How to build Quarkus\n\nThe build instructions are available in the [contribution guide](CONTRIBUTING.md).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.716796875,
          "content": "<!-- content also visible in quarkusio/security\n     copy changes there too -->\n\nThe canonical version of this document is hosted on the Quarkus website at [Quarkus security](https://quarkus.io/security/).\n\n# Security policy\n\nThe Quarkus team and community take all security bugs very seriously.\nYou can find our guidelines here regarding our policy and security disclosure.\n\n## Reporting security issues\n\n:warning: Do NOT report security issues in our public bug tracker.\n\nPlease report any security issues you find in Quarkus to:\n\n    security at quarkus.io\n\nAnyone can post to this list. The subscribers are only trusted individuals from the Quarkus community who will handle the resolution of any reported security issues in confidence. In your report, please note how you would like to be credited for discovering the issue and the details of any embargo you would like to impose. Currently, the security response teams for the following distributions are subscribed to this list and will respond to your report:\n\n* [Red Hat](https://access.redhat.com/security/team/contact/)\n\n### Ecosystem\n\nQuarkus is an ecosystem made from many extensions and many libraries (like Eclipse Vert.x, Hibernate, Apache Camel and more), most of them not under the direct responsibility of the Quarkus team.\nIf you find a security bug possibly rooted in one of these libraries, you can either disclose to them directly or disclose them to the Quarkus team (following this process) and we will responsibly disclose the issue to the respective extension or library maintainer.\n\n### Why follow this process\n\nDue to the sensitive nature of security bugs, the disclosure process is more constrained than a regular bug.\nWe appreciate you following these industry accepted guidelines, which gives time for a proper fix and limit the time window of attack.\n\n## Supported Versions\n\nThe community will fix security bugs for the latest major.minor version published at <https://quarkus.io/get-started/>.\n\n| Version      | Supported          |\n| ------------ | ------------------ |\n| Latest 3.x   | :white_check_mark: |\n| 3.15 LTS     | :white_check_mark: |\n| 3.8 LTS      | :white_check_mark: |\n| Older 3.x    | :x:                |\n| < 3          | :x:                |\n\nWe may fix the vulnerability to older versions depending on the severity of the issue and the age of the release, but we are only committing to the versions documented above.\n\n## Handling security issues\n\nIf you represent a Quarkus extension or a Quarkus platform, you are welcome to subscribe to the security at quarkus.io mailing list. Your subscription will only be approved if you can demonstrate that you will handle issues in confidence and properly credit reporters for discovering issues (e.g. experience with embargo process).\n"
        },
        {
          "name": "TROUBLESHOOTING.md",
          "type": "blob",
          "size": 10.88671875,
          "content": "# Troubleshooting performance issues\n\nPerformance is at the heart of Quarkus.\n\nIf you are facing performance issues (runtime or startup issues), and would like to discuss them with the Quarkus Team,\nyou are more than welcome on our [mailing list](https://groups.google.com/d/forum/quarkus-dev),\n[Zulip chat](https://quarkusio.zulipchat.com) or [GitHub issue tracker](https://github.com/quarkusio/quarkus/issues).\n\nTo help us troubleshoot your issues, we will need some performance insights from your application.\n\nOn Linux or macOS, one of the best way to gather performance insights would be to generate CPU and allocation [FlameGraphs](https://github.com/brendangregg/FlameGraph)\nvia [Async Profiler](https://github.com/jvm-profiling-tools/async-profiler).\n\nIf you want a deeper introduction to Async Profiler, do checkout [this article](https://hackernoon.com/profiling-java-applications-with-async-profiler-049s2790).\n\n## Installing Async Profiler\n\nTo install Async Profiler, go to the [release page](https://github.com/jvm-profiling-tools/async-profiler/releases) and download the latest release.\n\nAsync Profiler depends on `perf_events`.\nTo allow capturing kernel call stacks using `perf_events` from a non-root process,\nyou must first apply a couple OS configuration options.\n\nFor your terminal session:\n\n```shell script\necho 1 | sudo tee /proc/sys/kernel/perf_event_paranoid\necho 0 | sudo tee /proc/sys/kernel/kptr_restrict\n```\n\nOr permanently using `sysctl`:\n\n```shell script\nsudo sysctl -w kernel.perf_event_paranoid=1\nsudo sysctl -w kernel.kptr_restrict=0\n```\n\nFor allocation profiling, you also need to install HotSpot debug symbol (unless you use Oracle JDK that embeds them already).\n\nDepending on your Linux and Java distribution this can be done via:\n\n```shell script\n# Ubuntu/Debian - Java 17\napt install openjdk-17-dbg\n\n# Ubuntu/Debian - Java 21\n apt install openjdk-21-dbg\n\n# On CentOS, RHEL and some other RPM-based distributions - Java 17\ndebuginfo-install java-17-openjdk\n```\n\nYou can also use a __fastdebug__ build of OpenJdk, this kind of build is not for production use (JVM as assertions are enabled), but it includes debug symbols\n\nIf needed, see [this](https://github.com/jvm-profiling-tools/async-profiler#allocation-profiling) section in the Async Profiler site for details.\n\n## Profiling application runtime with Async Profiler\n\nAsync Profiler comes with a Java agent, and a command line.\n\nTo profile application while it is running, it is recommended to use the command line as you can choose when to start the profiler and prevent your profile data from being bloated with startup events.\nThis can be important as any application performs a lot of bootstrapping operation upon startup that won't occur at any other during the application lifecycle.\nBy starting the profiling on demand, you prevent these bootstrap instructions from being part of the profile data.\n\nWhen you use the command line, it is advised to use `-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints` JVM flags to have more accurate results.\n\nIt is usually advised to profile an application under load,\nand to start profiling only after some warmup time to allow Java's Just In Time compiler to optimize your application code (not to mention giving the opportunity for database caches to warmup, etc...).\nSuch load could be created by a load generator tool ([ab](https://httpd.apache.org/docs/2.4/programs/ab.html), [wrk2](https://github.com/giltene/wrk2), [Gatling](https://gatling.io/), [Apache JMeter](https://jmeter.apache.org/), ...).\n\n### CPU profiling\n\nTo start CPU profiling, execute the following command:\n\n```shell script\n/path/to/async-profiler/profiler.sh start -b 4000000 <pid>\n```\n\n`-b 4000000` is used to increase the frame buffer size as the default is often too small.\n\nTo end profiling and gather the results you can launch the same command with the `stop` subcommand, this will tell you if the buffer frame was too small.\nThe output is a text file that is not really usable, so let's use our preferred performance representation: the  flame graph.\n\n```shell script\n/path/to/async-profiler/profiler.sh stop -f /tmp/cpu-profile.html <pid>\n```\n\nIt will create an HTML flame graph (Async Profiler automatically detect that you ask for a  flame graph thanks to the `html` file extension)\nthat you can open in your browser (and even zoom inside it by clicking on a frame).\n\nOne very useful option is `-s` (or `--simple`) that results in simple class names being used instead of fully qualified class names,\nthus making the  flame graph more readable (at cost of not showing the package names of classes).\nYou can also limit the profiling duration by using `-d` (or `--duration`) followed by the duration in seconds.\nIf you use the `--duration` option, the output file will be created automatically at the end of the duration period. You do not need to explicitly start and stop the profiler.\n\n### Allocation profiling\n\nTo start allocation profiling, execute the following command:\n\n```shell script\n/path/to/async-profiler/profiler.sh start -b 4000000 -e alloc <pid>\n```\n\n`-e` (or `--event`) allow to specify the type of event to profile. The default profile type is CPU, but in this case as we are interested in allocation profiling, we specify `alloc` as the `-e` value.\n\nStopping allocation profiling is done in the same way as for the previously shown CPU profiling.\n\n```shell script\n/path/to/async-profiler/profiler.sh stop -f /tmp/alloc-profile.html <pid>\n```\n\n## Profiling application startup with Async Profiler\n\nWhen you want to profile application startup, you cannot use the command line tool as you need a way to start the profiler with your application.\n\nFor this case, the Java agent is the best tool.\nIt will start profiling when you start the application, then record the profiling data when the application exits.\n\nSome example usages are:\n\n```shell script\nPATH_TO_ASYNC_PROFILER=...\n\n# profile CPU startup\njava -agentpath:${PATH_TO_ASYNC_PROFILER}/lib/libasyncProfiler.so=start,event=cpu,file=startup-cpu-profile.html,interval=1000000,simple\\\n    -jar target/quarkus-app/quarkus-run.jar\n\n# profile allocation startup\njava -agentpath:${PATH_TO_ASYNC_PROFILER}/lib/libasyncProfiler.so=start,alloc=1,total,event=alloc,file=startup-alloc-profile.jfr -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:-UseTLAB -Xmx1G -Xms1G -XX:+AlwaysPreTouch -jar target/quarkus-app/quarkus-run.jar\n```\n\nStop the application with `CTRL+C` once you have gathered what you want (e.g. just after startup, after the first request).\nIt will dump the profiling information.\nThe name of the file is in the `file=` parameter.\n\nFor the allocation case, you obtain a JFR file, you can convert it to your typical Async Profiler flamegraph HTML output with:\n\n```shell script\njava -cp ${PATH_TO_ASYNC_PROFILER}/lib/converter.jar jfr2flame startup-alloc-profile.jfr --alloc --total startup-alloc-profile.html\n```\n\n> [!TIP]  \n> You can avoid needing to stop the application manually by writing a custom main that stops the application once it boots up\n> \n> ```java\n> import io.quarkus.runtime.Quarkus;\n> import io.quarkus.runtime.QuarkusApplication;\n> import io.quarkus.runtime.annotations.QuarkusMain;\n>\n> @QuarkusMain\n> public class Main {\n>\n>     public static void main(String... args) {\n>         Quarkus.run(MyApp.class, args);\n>     }\n> \n>     public static class MyApp implements QuarkusApplication {\n> \n>         @Override\n>         public int run(String... args) throws Exception {\n>             return 0;\n>         }\n>     }\n> }\n> ```\n\nNote that short options are not supported inside the agent, you need to use their long versions.\n\nBy default, Async Profiler sample events every 10ms.\nWhen it comes to profiling / debugging a Quarkus startup issue, this value is often too high as Quarkus starts very fast.\nFor that reason, it is not uncommon to configure the profiling interval to 1000000ns (i.e. 1ms).\n\n## Profiling application dev mode with Async Profiler\n\nFor profiling Quarkus dev mode, the Java agent is again necessary.\nIt can be used in the same way as for the production application with the exception that `agentpath` option needs to be set via the `jvm.args` system property.\n\n```shell script\nPATH_TO_ASYNC_PROFILER=...\n\n# profile CPU startup\nmvn quarkus:dev -Djvm.args=\"-agentpath:${PATH_TO_ASYNC_PROFILER}/lib/libasyncProfiler.so=start,event=cpu,file=startup-cpu-profile.html,interval=1000000,simple\"\n\n# profile allocation startup\nmvn quarkus:dev -Djvm.args=\"-agentpath:${PATH_TO_ASYNC_PROFILER}/lib/libasyncProfiler.so=start,alloc=1,total,event=alloc,file=startup-alloc-profile.jfr -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -XX:-UseTLAB -Xmx1G -Xms1G -XX:+AlwaysPreTouch\"\n```\n\nStop the application with `CTRL+C` once you have gathered what you want (e.g. just after startup, after the first request).\nIt will dump the profiling information.\nThe name of the file is in the `file=` parameter.\n\nFor the allocation case, you obtain a JFR file, you can convert it to your typical Async Profiler flamegraph HTML output with:\n\n```shell script\njava -cp ${PATH_TO_ASYNC_PROFILER}/lib/converter.jar jfr2flame startup-alloc-profile.jfr --alloc --total startup-alloc-profile.html\n```\n\nYou can also configure the `jvm.args` system property directly inside the `quarkus-maven-plugin` section of your `pom.xml`.\n\n## Analysing build steps execution time\n\nWhen trying to debug startup performance, it is convenient to log build steps execution time.\nThis can be achieved by adding the following system property: `-Dquarkus.debug.print-startup-times=true` in dev mode or when launching the JAR.\n\nThere is also a nice visualization of build steps available in the Dev UI located here: <http://localhost:8080/q/dev/build-steps>.\n\nIf you want to have the same visualization of build steps processing when building your application, you can use the `quarkus.debug.dump-build-metrics=true` property.\nFor example using `mvn package -Dquarkus.debug.dump-build-metrics=true`, will generate a `build-metrics.json` in your `target` repository that you can process via the quarkus-build-report application available here <https://github.com/mkouba/quarkus-build-report>.\nThis application will generate a `report.html` that you can open in your browser.\n\n## What about Windows?\n\nIf you are on Windows, you can still get useful performance insights using JFR - Java Flight Recorder.\n\nThe following Java options will enable JFR to record profiling data inside a `myrecording.jfr` file that can then be used by JMC - Java Mission Control for analysis.\n\n```shell script\n-XX:StartFlightRecording=filename=myrecording.jfr,settings=profile -XX:FlightRecorderOptions=stackdepth=64\n```\n\nHere we configure JFR with a deeper stack depth as the default is usually not enough.\n\n## What about native executables?\n\nIf you are having performance issues with native builds of your application first make sure that these issues only manifest in native mode.\nIf so, please consult the [native reference guide](https://quarkus.io/guides/native-reference) and more specifically the [profiling section](https://quarkus.io/guides/native-reference#profiling).\n"
        },
        {
          "name": "adr",
          "type": "tree",
          "content": null
        },
        {
          "name": "bom",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-parent",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.scenario",
          "type": "blob",
          "size": 0.998046875,
          "content": "clean_install {\n    tasks = [\"clean\",\"install\",\"-Dquickly\", \"-T6\"]\n    cleanup-tasks = [\"clean\"]\n    maven {\n        targets = [\"clean\",\"install\",\"-Dquickly\", \"-T6\"]\n    }\n    warm-ups = 1\n    iterations = 3\n}\n\nclean_install_no_scan {\n    tasks = [\"clean\",\"install\",\"-Dquickly\", \"-T6\", \"-Dscan=false\"]\n    cleanup-tasks = [\"clean\"]\n    maven {\n        targets = [\"clean\",\"install\",\"-Dquickly\", \"-T6\", \"-Dscan=false\"]\n    }\n    warm-ups = 1\n    iterations = 3\n}\n\nclean_install_no_cache {\n    tasks = [\"clean\",\"install\",\"-Dquickly\", \"-T6\", \"-Dno-build-cache\"]\n    cleanup-tasks = [\"clean\"]\n    maven {\n        targets = [\"clean\",\"install\",\"-Dquickly\", \"-T6\", \"-Dno-build-cache\"]\n    }\n    warm-ups = 1\n    iterations = 3\n}\n\nclean_install_no_cache_no_scan {\n    tasks = [\"clean\",\"install\",\"-Dquickly\", \"-T6\", \"-Dno-build-cache\", \"-Dscan=false\"]\n    cleanup-tasks = [\"clean\"]\n    maven {\n        targets = [\"clean\",\"install\",\"-Dquickly\", \"-T6\", \"-Dno-build-cache\", \"-Dscan=false\"]\n    }\n    warm-ups = 1\n    iterations = 3\n}\n\n"
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "coverage-report",
          "type": "tree",
          "content": null
        },
        {
          "name": "dco.txt",
          "type": "blob",
          "size": 1.3876953125,
          "content": "Developer Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n"
        },
        {
          "name": "devtools",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "extensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "independent-projects",
          "type": "tree",
          "content": null
        },
        {
          "name": "integration-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "mvnw",
          "type": "blob",
          "size": 10.91015625,
          "content": "#!/bin/sh\n# ----------------------------------------------------------------------------\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# Apache Maven Wrapper startup batch script, version 3.3.2\n#\n# Required ENV vars:\n# ------------------\n#   JAVA_HOME - location of a JDK home dir\n#\n# Optional ENV vars\n# -----------------\n#   MAVEN_OPTS - parameters passed to the Java VM when running Maven\n#     e.g. to debug Maven itself, use\n#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n# ----------------------------------------------------------------------------\n\nif [ -z \"$MAVEN_SKIP_RC\" ]; then\n\n  if [ -f /usr/local/etc/mavenrc ]; then\n    . /usr/local/etc/mavenrc\n  fi\n\n  if [ -f /etc/mavenrc ]; then\n    . /etc/mavenrc\n  fi\n\n  if [ -f \"$HOME/.mavenrc\" ]; then\n    . \"$HOME/.mavenrc\"\n  fi\n\nfi\n\n# OS specific support.  $var _must_ be set to either true or false.\ncygwin=false\ndarwin=false\nmingw=false\ncase \"$(uname)\" in\nCYGWIN*) cygwin=true ;;\nMINGW*) mingw=true ;;\nDarwin*)\n  darwin=true\n  # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home\n  # See https://developer.apple.com/library/mac/qa/qa1170/_index.html\n  if [ -z \"$JAVA_HOME\" ]; then\n    if [ -x \"/usr/libexec/java_home\" ]; then\n      JAVA_HOME=\"$(/usr/libexec/java_home)\"\n      export JAVA_HOME\n    else\n      JAVA_HOME=\"/Library/Java/Home\"\n      export JAVA_HOME\n    fi\n  fi\n  ;;\nesac\n\nif [ -z \"$JAVA_HOME\" ]; then\n  if [ -r /etc/gentoo-release ]; then\n    JAVA_HOME=$(java-config --jre-home)\n  fi\nfi\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched\nif $cygwin; then\n  [ -n \"$JAVA_HOME\" ] \\\n    && JAVA_HOME=$(cygpath --unix \"$JAVA_HOME\")\n  [ -n \"$CLASSPATH\" ] \\\n    && CLASSPATH=$(cygpath --path --unix \"$CLASSPATH\")\nfi\n\n# For Mingw, ensure paths are in UNIX format before anything is touched\nif $mingw; then\n  [ -n \"$JAVA_HOME\" ] && [ -d \"$JAVA_HOME\" ] \\\n    && JAVA_HOME=\"$(\n      cd \"$JAVA_HOME\" || (\n        echo \"cannot cd into $JAVA_HOME.\" >&2\n        exit 1\n      )\n      pwd\n    )\"\nfi\n\nif [ -z \"$JAVA_HOME\" ]; then\n  javaExecutable=\"$(which javac)\"\n  if [ -n \"$javaExecutable\" ] && ! [ \"$(expr \"$javaExecutable\" : '\\([^ ]*\\)')\" = \"no\" ]; then\n    # readlink(1) is not available as standard on Solaris 10.\n    readLink=$(which readlink)\n    if [ ! \"$(expr \"$readLink\" : '\\([^ ]*\\)')\" = \"no\" ]; then\n      if $darwin; then\n        javaHome=\"$(dirname \"$javaExecutable\")\"\n        javaExecutable=\"$(cd \"$javaHome\" && pwd -P)/javac\"\n      else\n        javaExecutable=\"$(readlink -f \"$javaExecutable\")\"\n      fi\n      javaHome=\"$(dirname \"$javaExecutable\")\"\n      javaHome=$(expr \"$javaHome\" : '\\(.*\\)/bin')\n      JAVA_HOME=\"$javaHome\"\n      export JAVA_HOME\n    fi\n  fi\nfi\n\nif [ -z \"$JAVACMD\" ]; then\n  if [ -n \"$JAVA_HOME\" ]; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ]; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n  else\n    JAVACMD=\"$(\n      \\unset -f command 2>/dev/null\n      \\command -v java\n    )\"\n  fi\nfi\n\nif [ ! -x \"$JAVACMD\" ]; then\n  echo \"Error: JAVA_HOME is not defined correctly.\" >&2\n  echo \"  We cannot execute $JAVACMD\" >&2\n  exit 1\nfi\n\nif [ -z \"$JAVA_HOME\" ]; then\n  echo \"Warning: JAVA_HOME environment variable is not set.\" >&2\nfi\n\n# traverses directory structure from process work directory to filesystem root\n# first directory with .mvn subdirectory is considered project base directory\nfind_maven_basedir() {\n  if [ -z \"$1\" ]; then\n    echo \"Path not specified to find_maven_basedir\" >&2\n    return 1\n  fi\n\n  basedir=\"$1\"\n  wdir=\"$1\"\n  while [ \"$wdir\" != '/' ]; do\n    if [ -d \"$wdir\"/.mvn ]; then\n      basedir=$wdir\n      break\n    fi\n    # workaround for JBEAP-8937 (on Solaris 10/Sparc)\n    if [ -d \"${wdir}\" ]; then\n      wdir=$(\n        cd \"$wdir/..\" || exit 1\n        pwd\n      )\n    fi\n    # end of workaround\n  done\n  printf '%s' \"$(\n    cd \"$basedir\" || exit 1\n    pwd\n  )\"\n}\n\n# concatenates all lines of a file\nconcat_lines() {\n  if [ -f \"$1\" ]; then\n    # Remove \\r in case we run on Windows within Git Bash\n    # and check out the repository with auto CRLF management\n    # enabled. Otherwise, we may read lines that are delimited with\n    # \\r\\n and produce $'-Xarg\\r' rather than -Xarg due to word\n    # splitting rules.\n    tr -s '\\r\\n' ' ' <\"$1\"\n  fi\n}\n\nlog() {\n  if [ \"$MVNW_VERBOSE\" = true ]; then\n    printf '%s\\n' \"$1\"\n  fi\n}\n\nBASE_DIR=$(find_maven_basedir \"$(dirname \"$0\")\")\nif [ -z \"$BASE_DIR\" ]; then\n  exit 1\nfi\n\nMAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-\"$BASE_DIR\"}\nexport MAVEN_PROJECTBASEDIR\nlog \"$MAVEN_PROJECTBASEDIR\"\n\n##########################################################################################\n# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n# This allows using the maven wrapper in projects that prohibit checking in binary data.\n##########################################################################################\nwrapperJarPath=\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\"\nif [ -r \"$wrapperJarPath\" ]; then\n  log \"Found $wrapperJarPath\"\nelse\n  log \"Couldn't find $wrapperJarPath, downloading it ...\"\n\n  if [ -n \"$MVNW_REPOURL\" ]; then\n    wrapperUrl=\"$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\"\n  else\n    wrapperUrl=\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\"\n  fi\n  while IFS=\"=\" read -r key value; do\n    # Remove '\\r' from value to allow usage on windows as IFS does not consider '\\r' as a separator ( considers space, tab, new line ('\\n'), and custom '=' )\n    safeValue=$(echo \"$value\" | tr -d '\\r')\n    case \"$key\" in wrapperUrl)\n      wrapperUrl=\"$safeValue\"\n      break\n      ;;\n    esac\n  done <\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties\"\n  log \"Downloading from: $wrapperUrl\"\n\n  if $cygwin; then\n    wrapperJarPath=$(cygpath --path --windows \"$wrapperJarPath\")\n  fi\n\n  if command -v wget >/dev/null; then\n    log \"Found wget ... using wget\"\n    [ \"$MVNW_VERBOSE\" = true ] && QUIET=\"\" || QUIET=\"--quiet\"\n    if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n      wget $QUIET \"$wrapperUrl\" -O \"$wrapperJarPath\" || rm -f \"$wrapperJarPath\"\n    else\n      wget $QUIET --http-user=\"$MVNW_USERNAME\" --http-password=\"$MVNW_PASSWORD\" \"$wrapperUrl\" -O \"$wrapperJarPath\" || rm -f \"$wrapperJarPath\"\n    fi\n  elif command -v curl >/dev/null; then\n    log \"Found curl ... using curl\"\n    [ \"$MVNW_VERBOSE\" = true ] && QUIET=\"\" || QUIET=\"--silent\"\n    if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n      curl $QUIET -o \"$wrapperJarPath\" \"$wrapperUrl\" -f -L || rm -f \"$wrapperJarPath\"\n    else\n      curl $QUIET --user \"$MVNW_USERNAME:$MVNW_PASSWORD\" -o \"$wrapperJarPath\" \"$wrapperUrl\" -f -L || rm -f \"$wrapperJarPath\"\n    fi\n  else\n    log \"Falling back to using Java to download\"\n    javaSource=\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.java\"\n    javaClass=\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/MavenWrapperDownloader.class\"\n    # For Cygwin, switch paths to Windows format before running javac\n    if $cygwin; then\n      javaSource=$(cygpath --path --windows \"$javaSource\")\n      javaClass=$(cygpath --path --windows \"$javaClass\")\n    fi\n    if [ -e \"$javaSource\" ]; then\n      if [ ! -e \"$javaClass\" ]; then\n        log \" - Compiling MavenWrapperDownloader.java ...\"\n        (\"$JAVA_HOME/bin/javac\" \"$javaSource\")\n      fi\n      if [ -e \"$javaClass\" ]; then\n        log \" - Running MavenWrapperDownloader.java ...\"\n        (\"$JAVA_HOME/bin/java\" -cp .mvn/wrapper MavenWrapperDownloader \"$wrapperUrl\" \"$wrapperJarPath\") || rm -f \"$wrapperJarPath\"\n      fi\n    fi\n  fi\nfi\n##########################################################################################\n# End of extension\n##########################################################################################\n\n# If specified, validate the SHA-256 sum of the Maven wrapper jar file\nwrapperSha256Sum=\"\"\nwhile IFS=\"=\" read -r key value; do\n  case \"$key\" in wrapperSha256Sum)\n    wrapperSha256Sum=$value\n    break\n    ;;\n  esac\ndone <\"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties\"\nif [ -n \"$wrapperSha256Sum\" ]; then\n  wrapperSha256Result=false\n  if command -v sha256sum >/dev/null; then\n    if echo \"$wrapperSha256Sum  $wrapperJarPath\" | sha256sum -c >/dev/null 2>&1; then\n      wrapperSha256Result=true\n    fi\n  elif command -v shasum >/dev/null; then\n    if echo \"$wrapperSha256Sum  $wrapperJarPath\" | shasum -a 256 -c >/dev/null 2>&1; then\n      wrapperSha256Result=true\n    fi\n  else\n    echo \"Checksum validation was requested but neither 'sha256sum' or 'shasum' are available.\" >&2\n    echo \"Please install either command, or disable validation by removing 'wrapperSha256Sum' from your maven-wrapper.properties.\" >&2\n    exit 1\n  fi\n  if [ $wrapperSha256Result = false ]; then\n    echo \"Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.\" >&2\n    echo \"Investigate or delete $wrapperJarPath to attempt a clean download.\" >&2\n    echo \"If you updated your Maven version, you need to update the specified wrapperSha256Sum property.\" >&2\n    exit 1\n  fi\nfi\n\nMAVEN_OPTS=\"$(concat_lines \"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\") $MAVEN_OPTS\"\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin; then\n  [ -n \"$JAVA_HOME\" ] \\\n    && JAVA_HOME=$(cygpath --path --windows \"$JAVA_HOME\")\n  [ -n \"$CLASSPATH\" ] \\\n    && CLASSPATH=$(cygpath --path --windows \"$CLASSPATH\")\n  [ -n \"$MAVEN_PROJECTBASEDIR\" ] \\\n    && MAVEN_PROJECTBASEDIR=$(cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\")\nfi\n\n# Provide a \"standardized\" way to retrieve the CLI args that will\n# work with both Windows and non-Windows executions.\nMAVEN_CMD_LINE_ARGS=\"$MAVEN_CONFIG $*\"\nexport MAVEN_CMD_LINE_ARGS\n\nWRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n\n# shellcheck disable=SC2086 # safe args\nexec \"$JAVACMD\" \\\n  $MAVEN_OPTS \\\n  $MAVEN_DEBUG_OPTS \\\n  -classpath \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\" \\\n  \"-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}\" \\\n  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG \"$@\"\n"
        },
        {
          "name": "mvnw.cmd",
          "type": "blob",
          "size": 7.7177734375,
          "content": "@REM ----------------------------------------------------------------------------\r\n@REM Licensed to the Apache Software Foundation (ASF) under one\r\n@REM or more contributor license agreements.  See the NOTICE file\r\n@REM distributed with this work for additional information\r\n@REM regarding copyright ownership.  The ASF licenses this file\r\n@REM to you under the Apache License, Version 2.0 (the\r\n@REM \"License\"); you may not use this file except in compliance\r\n@REM with the License.  You may obtain a copy of the License at\r\n@REM\r\n@REM    http://www.apache.org/licenses/LICENSE-2.0\r\n@REM\r\n@REM Unless required by applicable law or agreed to in writing,\r\n@REM software distributed under the License is distributed on an\r\n@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n@REM KIND, either express or implied.  See the License for the\r\n@REM specific language governing permissions and limitations\r\n@REM under the License.\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@REM ----------------------------------------------------------------------------\r\n@REM Apache Maven Wrapper startup batch script, version 3.3.2\r\n@REM\r\n@REM Required ENV vars:\r\n@REM JAVA_HOME - location of a JDK home dir\r\n@REM\r\n@REM Optional ENV vars\r\n@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands\r\n@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending\r\n@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven\r\n@REM     e.g. to debug Maven itself, use\r\n@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\r\n@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'\r\n@echo off\r\n@REM set title of command window\r\ntitle %0\r\n@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'\r\n@if \"%MAVEN_BATCH_ECHO%\" == \"on\"  echo %MAVEN_BATCH_ECHO%\r\n\r\n@REM set %HOME% to equivalent of $HOME\r\nif \"%HOME%\" == \"\" (set \"HOME=%HOMEDRIVE%%HOMEPATH%\")\r\n\r\n@REM Execute a user defined script before this one\r\nif not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPre\r\n@REM check for pre script, once with legacy .bat ending and once with .cmd ending\r\nif exist \"%USERPROFILE%\\mavenrc_pre.bat\" call \"%USERPROFILE%\\mavenrc_pre.bat\" %*\r\nif exist \"%USERPROFILE%\\mavenrc_pre.cmd\" call \"%USERPROFILE%\\mavenrc_pre.cmd\" %*\r\n:skipRcPre\r\n\r\n@setlocal\r\n\r\nset ERROR_CODE=0\r\n\r\n@REM To isolate internal variables from possible post scripts, we use another setlocal\r\n@setlocal\r\n\r\n@REM ==== START VALIDATION ====\r\nif not \"%JAVA_HOME%\" == \"\" goto OkJHome\r\n\r\necho. >&2\r\necho Error: JAVA_HOME not found in your environment. >&2\r\necho Please set the JAVA_HOME variable in your environment to match the >&2\r\necho location of your Java installation. >&2\r\necho. >&2\r\ngoto error\r\n\r\n:OkJHome\r\nif exist \"%JAVA_HOME%\\bin\\java.exe\" goto init\r\n\r\necho. >&2\r\necho Error: JAVA_HOME is set to an invalid directory. >&2\r\necho JAVA_HOME = \"%JAVA_HOME%\" >&2\r\necho Please set the JAVA_HOME variable in your environment to match the >&2\r\necho location of your Java installation. >&2\r\necho. >&2\r\ngoto error\r\n\r\n@REM ==== END VALIDATION ====\r\n\r\n:init\r\n\r\n@REM Find the project base dir, i.e. the directory that contains the folder \".mvn\".\r\n@REM Fallback to current working directory if not found.\r\n\r\nset MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%\r\nIF NOT \"%MAVEN_PROJECTBASEDIR%\"==\"\" goto endDetectBaseDir\r\n\r\nset EXEC_DIR=%CD%\r\nset WDIR=%EXEC_DIR%\r\n:findBaseDir\r\nIF EXIST \"%WDIR%\"\\.mvn goto baseDirFound\r\ncd ..\r\nIF \"%WDIR%\"==\"%CD%\" goto baseDirNotFound\r\nset WDIR=%CD%\r\ngoto findBaseDir\r\n\r\n:baseDirFound\r\nset MAVEN_PROJECTBASEDIR=%WDIR%\r\ncd \"%EXEC_DIR%\"\r\ngoto endDetectBaseDir\r\n\r\n:baseDirNotFound\r\nset MAVEN_PROJECTBASEDIR=%EXEC_DIR%\r\ncd \"%EXEC_DIR%\"\r\n\r\n:endDetectBaseDir\r\n\r\nIF NOT EXIST \"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\" goto endReadAdditionalConfig\r\n\r\n@setlocal EnableExtensions EnableDelayedExpansion\r\nfor /F \"usebackq delims=\" %%a in (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a\r\n@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%\r\n\r\n:endReadAdditionalConfig\r\n\r\nSET MAVEN_JAVA_EXE=\"%JAVA_HOME%\\bin\\java.exe\"\r\nset WRAPPER_JAR=\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.jar\"\r\nset WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\r\n\r\nset WRAPPER_URL=\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\"\r\n\r\nFOR /F \"usebackq tokens=1,2 delims==\" %%A IN (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties\") DO (\r\n    IF \"%%A\"==\"wrapperUrl\" SET WRAPPER_URL=%%B\r\n)\r\n\r\n@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\r\n@REM This allows using the maven wrapper in projects that prohibit checking in binary data.\r\nif exist %WRAPPER_JAR% (\r\n    if \"%MVNW_VERBOSE%\" == \"true\" (\r\n        echo Found %WRAPPER_JAR%\r\n    )\r\n) else (\r\n    if not \"%MVNW_REPOURL%\" == \"\" (\r\n        SET WRAPPER_URL=\"%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.3.2/maven-wrapper-3.3.2.jar\"\r\n    )\r\n    if \"%MVNW_VERBOSE%\" == \"true\" (\r\n        echo Couldn't find %WRAPPER_JAR%, downloading it ...\r\n        echo Downloading from: %WRAPPER_URL%\r\n    )\r\n\r\n    powershell -Command \"&{\"^\r\n\t\t\"$webclient = new-object System.Net.WebClient;\"^\r\n\t\t\"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {\"^\r\n\t\t\"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');\"^\r\n\t\t\"}\"^\r\n\t\t\"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%WRAPPER_URL%', '%WRAPPER_JAR%')\"^\r\n\t\t\"}\"\r\n    if \"%MVNW_VERBOSE%\" == \"true\" (\r\n        echo Finished downloading %WRAPPER_JAR%\r\n    )\r\n)\r\n@REM End of extension\r\n\r\n@REM If specified, validate the SHA-256 sum of the Maven wrapper jar file\r\nSET WRAPPER_SHA_256_SUM=\"\"\r\nFOR /F \"usebackq tokens=1,2 delims==\" %%A IN (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties\") DO (\r\n    IF \"%%A\"==\"wrapperSha256Sum\" SET WRAPPER_SHA_256_SUM=%%B\r\n)\r\nIF NOT %WRAPPER_SHA_256_SUM%==\"\" (\r\n    powershell -Command \"&{\"^\r\n       \"Import-Module $PSHOME\\Modules\\Microsoft.PowerShell.Utility -Function Get-FileHash;\"^\r\n       \"$hash = (Get-FileHash \\\"%WRAPPER_JAR%\\\" -Algorithm SHA256).Hash.ToLower();\"^\r\n       \"If('%WRAPPER_SHA_256_SUM%' -ne $hash){\"^\r\n       \"  Write-Error 'Error: Failed to validate Maven wrapper SHA-256, your Maven wrapper might be compromised.';\"^\r\n       \"  Write-Error 'Investigate or delete %WRAPPER_JAR% to attempt a clean download.';\"^\r\n       \"  Write-Error 'If you updated your Maven version, you need to update the specified wrapperSha256Sum property.';\"^\r\n       \"  exit 1;\"^\r\n       \"}\"^\r\n       \"}\"\r\n    if ERRORLEVEL 1 goto error\r\n)\r\n\r\n@REM Provide a \"standardized\" way to retrieve the CLI args that will\r\n@REM work with both Windows and non-Windows executions.\r\nset MAVEN_CMD_LINE_ARGS=%*\r\n\r\n%MAVEN_JAVA_EXE% ^\r\n  %JVM_CONFIG_MAVEN_PROPS% ^\r\n  %MAVEN_OPTS% ^\r\n  %MAVEN_DEBUG_OPTS% ^\r\n  -classpath %WRAPPER_JAR% ^\r\n  \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" ^\r\n  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*\r\nif ERRORLEVEL 1 goto error\r\ngoto end\r\n\r\n:error\r\nset ERROR_CODE=1\r\n\r\n:end\r\n@endlocal & set ERROR_CODE=%ERROR_CODE%\r\n\r\nif not \"%MAVEN_SKIP_RC%\"==\"\" goto skipRcPost\r\n@REM check for post script, once with legacy .bat ending and once with .cmd ending\r\nif exist \"%USERPROFILE%\\mavenrc_post.bat\" call \"%USERPROFILE%\\mavenrc_post.bat\"\r\nif exist \"%USERPROFILE%\\mavenrc_post.cmd\" call \"%USERPROFILE%\\mavenrc_post.cmd\"\r\n:skipRcPost\r\n\r\n@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'\r\nif \"%MAVEN_BATCH_PAUSE%\"==\"on\" pause\r\n\r\nif \"%MAVEN_TERMINATE_CMD%\"==\"on\" exit %ERROR_CODE%\r\n\r\ncmd /C exit /B %ERROR_CODE%\r\n"
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 15.109375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"\n         child.project.url.inherit.append.path=\"false\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>io.quarkus</groupId>\n        <artifactId>quarkus-parent</artifactId>\n        <version>999-SNAPSHOT</version>\n        <relativePath>independent-projects/parent/pom.xml</relativePath>\n    </parent>\n\n    <artifactId>quarkus-project</artifactId>\n    <name>Quarkus - Project pom</name>\n    <version>999-SNAPSHOT</version>\n    <packaging>pom</packaging>\n\n    <description>Quarkus - Kubernetes Native Java stack tailored for OpenJDK HotSpot and GraalVM</description>\n    <url>https://github.com/quarkusio/quarkus</url>\n\n    <developers>\n        <developer>\n            <id>quarkus</id>\n            <name>Quarkus Community</name>\n            <organization>Quarkus</organization>\n            <organizationUrl>https://quarkus.io</organizationUrl>\n        </developer>\n    </developers>\n\n    <licenses>\n        <license>\n            <name>The Apache Software License, Version 2.0</name>\n            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>\n            <distribution>repo</distribution>\n        </license>\n    </licenses>\n\n    <scm child.scm.connection.inherit.append.path=\"false\"\n         child.scm.developerConnection.inherit.append.path=\"false\"\n         child.scm.url.inherit.append.path=\"false\">\n        <url>https://github.com/quarkusio/quarkus</url>\n        <connection>scm:git:git@github.com:quarkusio/quarkus.git</connection>\n        <developerConnection>scm:git:git@github.com:quarkusio/quarkus.git</developerConnection>\n        <tag>HEAD</tag>\n    </scm>\n\n    <issueManagement>\n        <system>GitHub</system>\n        <url>https://github.com/quarkusio/quarkus/issues/</url>\n    </issueManagement>\n\n    <properties>\n        <graalvmHome>${env.GRAALVM_HOME}</graalvmHome>\n        <postgres.url>jdbc:postgresql:hibernate_orm_test</postgres.url>\n\n        <gitflow-incremental-builder.version>4.5.4</gitflow-incremental-builder.version>\n        <quarkus-platform-bom-plugin.version>0.0.118</quarkus-platform-bom-plugin.version>\n\n        <skipDocs>false</skipDocs>\n        <skip.gradle.tests>false</skip.gradle.tests>\n\n        <maven-enforcer-plugin.phase>validate</maven-enforcer-plugin.phase>\n        <forbiddenapis-maven-plugin.phase>verify</forbiddenapis-maven-plugin.phase>\n\n        <owasp-dependency-check-plugin.version>11.1.0</owasp-dependency-check-plugin.version>\n\n        <!-- Dependency versions -->\n        <!-- Properties below are set in this file because they are used\n             in the BOM as well as other POMs (build-parent/pom.xml, docs/pom.xml, ...) -->\n        <jacoco.version>0.8.12</jacoco.version>\n        <kubernetes-client.version>7.0.1</kubernetes-client.version> <!-- Please check with Java Operator SDK team before updating -->\n        <rest-assured.version>5.5.0</rest-assured.version>\n        <hibernate-orm.version>6.6.4.Final</hibernate-orm.version> <!-- WARNING when updating, also align the versions below -->\n        <antlr.version>4.13.0</antlr.version> <!-- version controlled by Hibernate ORM's needs -->\n        <bytebuddy.version>1.14.18</bytebuddy.version> <!-- version controlled by Hibernate ORM's needs -->\n        <hibernate-commons-annotations.version>7.0.3.Final</hibernate-commons-annotations.version> <!-- version controlled by Hibernate ORM's needs -->\n        <hibernate-reactive.version>2.4.3.Final</hibernate-reactive.version> <!-- highly sensitive to Hibernate ORM upgrades -->\n        <hibernate-validator.version>8.0.2.Final</hibernate-validator.version>\n        <hibernate-search.version>7.2.2.Final</hibernate-search.version>\n\n        <!-- Make sure to check compatibility between these 2 gRPC components before upgrade -->\n        <grpc.version>1.69.0</grpc.version> <!-- when updating, verify if com.google.auth should not be updated too -->\n        <grpc-jprotoc.version>1.2.2</grpc-jprotoc.version>\n        <protoc.version>3.25.5</protoc.version>\n        <protobuf-java.version>${protoc.version}</protobuf-java.version>\n        <proto-google-common-protos.version>2.46.0</proto-google-common-protos.version>\n\n        <!-- Used in the build parent and test BOM (for the junit 5 plugin) and in the BOM (for the API) -->\n        <smallrye-certificate-generator.version>0.9.2</smallrye-certificate-generator.version>\n\n        <!-- TestNG version: we don't enforce it in the BOM as it is mostly used in the MP TCKs and we need to use the version from the TCKs -->\n        <testng.version>7.8.0</testng.version>\n    </properties>\n\n    <modules>\n\n        <!-- External projects -->\n        <module>independent-projects/parent</module>\n        <module>independent-projects/ide-config</module>\n        <module>independent-projects/revapi</module>\n        <module>independent-projects/arc</module>\n        <module>independent-projects/bootstrap</module>\n        <module>independent-projects/qute</module>\n        <module>independent-projects/tools</module>\n        <module>independent-projects/enforcer-rules</module>\n        <module>independent-projects/vertx-utils</module>\n        <module>independent-projects/resteasy-reactive</module>\n        <module>independent-projects/extension-maven-plugin</module>\n        <module>independent-projects/junit5-virtual-threads</module>\n\n        <!-- BOMs and parent POM -->\n        <module>bom/application</module>\n        <module>bom/test</module>\n        <module>bom/dev-ui</module>\n        <module>build-parent</module>\n\n        <!-- Core components -->\n        <module>core</module>\n        <module>test-framework</module>\n\n        <!-- Extensions -->\n        <module>extensions</module>\n\n        <!-- Devtools (Maven, cli, gradle) -->\n        <!-- MUST BE BUILT AFTER EXTENSIONS BUT BEFORE IT -->\n        <!-- the tools are generating the JSON descriptor for the BOM -->\n        <!-- relying on the fact that the extension descriptor, generated as part of an extension build, is available -->\n        <module>devtools</module>\n\n        <!-- Integration Tests -->\n        <module>integration-tests</module>\n\n        <!-- Misc. -->\n        <module>docs</module>\n    </modules>\n\n    <repositories>\n        <repository>\n            <id>central</id>\n            <name>Maven Repository Switchboard</name>\n            <url>https://repo.maven.apache.org/maven2</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n    </repositories>\n\n    <distributionManagement>\n        <snapshotRepository>\n            <id>sonatype-nexus-snapshots</id>\n            <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>\n        </snapshotRepository>\n        <repository>\n            <id>sonatype-nexus-release</id>\n            <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n        </repository>\n    </distributionManagement>\n\n    <build>\n        <pluginManagement>\n            <plugins>\n                <plugin>\n                    <groupId>io.quarkus</groupId>\n                    <artifactId>quarkus-platform-bom-maven-plugin</artifactId>\n                    <version>${quarkus-platform-bom-plugin.version}</version>\n                </plugin>\n                <plugin>\n                    <groupId>org.owasp</groupId>\n                    <artifactId>dependency-check-maven</artifactId>\n                    <version>${owasp-dependency-check-plugin.version}</version>\n                    <configuration>\n                        <assemblyAnalyzerEnabled>false</assemblyAnalyzerEnabled>\n                        <nugetconfAnalyzerEnabled>false</nugetconfAnalyzerEnabled>\n                        <nuspecAnalyzerEnabled>false</nuspecAnalyzerEnabled>\n                        <retireJsAnalyzerEnabled>false</retireJsAnalyzerEnabled>\n                        <nodeAnalyzerEnabled>false</nodeAnalyzerEnabled>\n                    </configuration>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n        <extensions>\n            <extension>\n                <groupId>io.quarkus.bot</groupId>\n                <artifactId>build-reporter-maven-extension</artifactId>\n                <version>3.9.6</version>\n            </extension>\n        </extensions>\n    </build>\n\n    <profiles>\n        <profile>\n            <id>quick-build</id>\n            <activation>\n                <property>\n                    <name>quickly</name>\n                </property>\n            </activation>\n            <properties>\n                <!-- please check quick-build-ci as well when modifying these properties -->\n                <skipTests>true</skipTests>\n                <skipITs>true</skipITs>\n                <skipDocs>true</skipDocs>\n                <enforcer.skip>true</enforcer.skip>\n                <maven-enforcer-plugin.phase>none</maven-enforcer-plugin.phase>\n                <skipExtensionValidation>true</skipExtensionValidation>\n                <skip.gradle.tests>true</skip.gradle.tests>\n                <invoker.skip>true</invoker.skip>   <!-- maven-invoker-plugin -->\n                <jbang.skip>true</jbang.skip> <!-- jbang-maven-plugin -->\n                <forbiddenapis.skip>true</forbiddenapis.skip> <!-- forbidden-apis maven plugin -->\n                <forbiddenapis-maven-plugin.phase>none</forbiddenapis-maven-plugin.phase>\n                <skipCodestartValidation>true</skipCodestartValidation>\n                <truststore.skip>true</truststore.skip>\n            </properties>\n            <build>\n                <defaultGoal>clean install</defaultGoal>\n            </build>\n        </profile>\n        <profile>\n            <id>quick-build-docs</id>\n            <activation>\n                <property>\n                    <name>quicklyDocs</name>\n                </property>\n            </activation>\n            <properties>\n                <skipTests>true</skipTests>\n                <skipITs>true</skipITs>\n                <enforcer.skip>true</enforcer.skip>\n                <skipExtensionValidation>true</skipExtensionValidation>\n                <skip.gradle.tests>true</skip.gradle.tests>\n                <invoker.skip>true</invoker.skip>   <!-- maven-invoker-plugin -->\n                <forbiddenapis.skip>true</forbiddenapis.skip> <!-- forbidden-apis maven plugin -->\n                <skipCodestartValidation>true</skipCodestartValidation>\n                <truststore.skip>true</truststore.skip>\n            </properties>\n            <build>\n                <defaultGoal>clean install</defaultGoal>\n            </build>\n        </profile>\n        <profile>\n            <!-- separate \"quickly\" profile for CI to keep local \"quickly\" demands separated from CI demands -->\n            <id>quick-build-ci</id>\n            <activation>\n                <property>\n                    <name>quickly-ci</name>\n                </property>\n            </activation>\n            <properties>\n                <skipTests>true</skipTests>\n                <skipITs>true</skipITs>\n                <skipDocs>true</skipDocs>\n                <enforcer.skip>true</enforcer.skip>\n                <format.skip>true</format.skip>\n                <skipExtensionValidation>true</skipExtensionValidation>\n                <skip.gradle.tests>true</skip.gradle.tests>\n                <invoker.skip>true</invoker.skip>   <!-- maven-invoker-plugin -->\n                <jbang.skip>true</jbang.skip> <!-- jbang-maven-plugin -->\n                <forbiddenapis.skip>true</forbiddenapis.skip> <!-- forbidden-apis maven plugin -->\n                <truststore.skip>true</truststore.skip>\n            </properties>\n        </profile>\n        <profile>\n            <id>relocations</id>\n            <modules>\n                <module>relocations</module>\n            </modules>\n        </profile>\n        <profile>\n            <id>release</id>\n            <modules>\n                <module>relocations</module>\n            </modules>\n        </profile>\n        <profile>\n            <id>tcks</id>\n            <activation>\n                <property>\n                    <name>tcks</name>\n                </property>\n            </activation>\n            <modules>\n                <module>tcks</module>\n            </modules>\n        </profile>\n        <profile>\n            <id>incremental</id>\n            <activation>\n                <property>\n                    <name>incremental</name>\n                </property>\n            </activation>\n            <properties>\n                <!-- the *local* main, not refs/remotes/... -->\n                <gib.referenceBranch>main</gib.referenceBranch>\n            </properties>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>io.github.gitflow-incremental-builder</groupId>\n                        <artifactId>gitflow-incremental-builder</artifactId>\n                        <version>${gitflow-incremental-builder.version}</version>\n                        <extensions>true</extensions>\n                        <!-- https://github.com/gitflow-incremental-builder/gitflow-incremental-builder#configuration\n                             General recap: Anything that is directly set in <configuration> cannot be redefined via '-D...'!\n                             See also: https://github.com/gitflow-incremental-builder/gitflow-incremental-builder/issues/213 -->\n                        <configuration>\n                            <!-- these metadata file can't affect the build -->\n                            <excludePathsMatching>\\.sdkmanrc|.gitpod.yml|\\.gitpod[/\\\\].*</excludePathsMatching>\n                            <!-- pointless to attempt incremental build if something like mvnw was changed\n                                 (and also potentially wrong, given that independent-projects might not be built) -->\n                            <skipIfPathMatches>\\.github[/\\\\].*|\\.mvn[/\\\\].*|mvnw.*</skipIfPathMatches>\n                            <!-- Note: *Upstream* is only relevant in case of:\n                                 -am or\n                                 -Dgib.buildUpstream=always|true or\n                                 -Dgib.buildAll=true or\n                                 -Dgib.forceBuildModules=... -->\n                            <skipTestsForUpstreamModules>true</skipTestsForUpstreamModules>\n                            <argsForUpstreamModules>skipITs invoker.skip no-format</argsForUpstreamModules>\n                        </configuration>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n        <profile>\n            <id>owasp-check</id>\n            <activation>\n                <property>\n                    <name>owasp-check</name>\n                </property>\n            </activation>\n            <build>\n                <defaultGoal>org.owasp:dependency-check-maven:check</defaultGoal>\n            </build>\n        </profile>\n        <profile>\n            <id>owasp-report</id>\n            <activation>\n                <property>\n                    <name>owasp-report</name>\n                </property>\n            </activation>\n            <build>\n                <defaultGoal>org.owasp:dependency-check-maven:aggregate</defaultGoal>\n            </build>\n        </profile>\n    </profiles>\n</project>\n"
        },
        {
          "name": "relocations",
          "type": "tree",
          "content": null
        },
        {
          "name": "tcks",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-framework",
          "type": "tree",
          "content": null
        },
        {
          "name": "update-extension-dependencies.sh",
          "type": "blob",
          "size": 4.9892578125,
          "content": "#!/bin/bash\n\n# Purpose: Updates pom.xml files with minimal dependencies to extensions to enforce a consistent build order.\n\nset -e -u -o pipefail\nshopt -s failglob\n\n# path of this shell script (note: readlink -f does not work on Mac)\nPRG_PATH=$( cd \"$(dirname \"$0\")\" ; pwd -P )\n\n# CI env var => https://docs.github.com/en/actions/reference/environment-variables#default-environment-variables\nif [ \"${CI:-}\" == true ]\nthen\n  echo ''\n  echo 'Building bom-descriptor-json...'\n  echo ''\n  ./mvnw -q -e -Dscan=false clean package -Dno-build-cache -f \"${PRG_PATH}/devtools/bom-descriptor-json\" -Denforcer.skip $*\nelse\n  read -n1 -p 'Build the entire project with relocations? [y/n] ' ANSWER\n  echo ''\n  if [ \"${ANSWER}\" == y ]\n  then\n    echo ''\n    echo 'Building entire project with relocations...'\n    echo ''\n    ./mvnw -q -e -Dscan=false -Dquickly -Dno-build-cache -Dno-test-modules -Prelocations -T0.8C -f \"${PRG_PATH}\" $*\n  else\n    echo ''\n    echo 'Aborted!'\n    echo ''\n    exit 1\n  fi\nfi\n\n# note: OFFSET is replaced later on with an individual amount of spaces\nDEP_TEMPLATE='OFFSET<dependency>\nOFFSET    <groupId>io.quarkus</groupId>\nOFFSET    <artifactId>XXX</artifactId>\nOFFSET    <version>\\${project.version}</version>\nOFFSET    <type>pom</type>\nOFFSET    <scope>test</scope>\nOFFSET    <exclusions>\nOFFSET        <exclusion>\nOFFSET            <groupId>*</groupId>\nOFFSET            <artifactId>*</artifactId>\nOFFSET        </exclusion>\nOFFSET    </exclusions>\nOFFSET</dependency>'\n\necho ''\necho 'Building dependencies list from bom-descriptor-json...'\necho ''\n\n# get all \"artifact-id\" values from the generated json file\n# pipefail is switched off briefly so that a better error can be logged when nothing is found\nset +o pipefail\n\n# make sure ordering is not locale-dependent\nexport LANG=\"C\"\n\n# note: quarkus-amazon-common was removed from this repo without a relocation\nARTIFACT_IDS=$(cd \"${PRG_PATH}\" && grep '^    \"artifact\"' devtools/bom-descriptor-json/target/quarkus-bom-quarkus-platform-descriptor-*.json \\\n    | grep -Eo 'quarkus-[a-z0-9-]+' | grep -v quarkus-amazon-common | sort -u)\nset -o pipefail\n\nif [ -z \"${ARTIFACT_IDS}\" ]\nthen\n  echo -e '\\033[0;31mError:\\033[0m Could not find any artifact-ids. Please check the grep command. ' 1>&2\n  exit 1\nfi\n\n# note: that bulky last sed in the following commands replaces newlines with \\n so that the final sed calls accept ${DEPS_*} as input\n# see also: https://stackoverflow.com/a/1252191/9529981\n\nDEPS_RUNTIME=$(echo \"${ARTIFACT_IDS}\" \\\n  | while read AID; do echo \"${DEP_TEMPLATE/XXX/${AID}}\"; done \\\n  | sed -e ':a' -e 'N' -e '$!ba' -e 's/\\n/\\\\\\n/g')\n\nDEPS_DEPLOYMENT=$(echo \"${ARTIFACT_IDS}\" \\\n  | while read AID; do echo \"${DEP_TEMPLATE/XXX/${AID}-deployment}\"; done \\\n  | sed -e ':a' -e 'N' -e '$!ba' -e 's/\\n/\\\\\\n/g')\n\nMARK_START='<!-- START update-extension-dependencies.sh -->'\nMARK_END='<!-- END update-extension-dependencies.sh -->'\n# https://superuser.com/a/307486\nLF=$'\\n'\n# note: line breaks after c command are required for MacOS compatibility: https://unix.stackexchange.com/a/52141\nSED_EXPR_DEPS_RUNTIME=\"/${MARK_START}/,/${MARK_END}/c\\\\\nOFFSET${MARK_START}\\\\${LF}${DEPS_RUNTIME}\\\\${LF}OFFSET${MARK_END}\"\nSED_EXPR_DEPS_DEPLOYMENT=\"/${MARK_START}/,/${MARK_END}/c\\\\\nOFFSET${MARK_START}\\\\${LF}${DEPS_DEPLOYMENT}\\\\${LF}OFFSET${MARK_END}\"\n# BSD sed (on MacOS) consumes one line break too much which will be fixed by the following additional expression:\nSED_EXPR_BSD_FIXUP=\"s/${MARK_END}([ ]*)<\\/dependencies>/${MARK_END}\\\\${LF}\\1<\\/dependencies>/\"\n\n# note: the following sed commands do not use -i because behavior on MacOS is different than on Linux\n\necho ''\necho 'Updating devtools/bom-descriptor-json/pom.xml...'\necho ''\nsed \"${SED_EXPR_DEPS_RUNTIME}\" \"${PRG_PATH}/devtools/bom-descriptor-json/pom.xml\" > /tmp/bom-descriptor-json-pom.xml\n# note: more indentation here since bom-descriptor-json has a profile for the deps\nsed -r -e 's/OFFSET/                /' -e \"${SED_EXPR_BSD_FIXUP}\" /tmp/bom-descriptor-json-pom.xml > \"${PRG_PATH}/devtools/bom-descriptor-json/pom.xml\"\nrm -f /tmp/bom-descriptor-json-pom.xml\n\necho ''\necho 'Updating docs/pom.xml...'\necho ''\nsed \"${SED_EXPR_DEPS_DEPLOYMENT}\" \"${PRG_PATH}/docs/pom.xml\" > /tmp/docs-pom.xml\nsed -r -e 's/OFFSET/        /' -e \"${SED_EXPR_BSD_FIXUP}\" /tmp/docs-pom.xml > \"${PRG_PATH}/docs/pom.xml\"\nrm -f /tmp/docs-pom.xml\n\necho ''\necho 'Sanity check...'\necho ''\n# sanity check; make sure nothing stupid was added like non-existing deps\n./mvnw -Dscan=false dependency:resolve validate -Dsilent -q -f \"${PRG_PATH}\" -pl devtools/bom-descriptor-json,docs $*\n\n# CI only: verify that no pom.xml was touched (if changes are found, committer forgot to run script or to add changes)\nif [ \"${CI:-}\" == true ] && [ $(git status -s -u no '*pom.xml' | wc -l) -ne 0 ]\nthen\n  echo -e '\\033[0;31mError:\\033[0m Dependencies to extension artifacts are outdated!' 1>&2\n  echo -e '\\033[0;31mError:\\033[0m Run ./update-extension-dependencies.sh and add the modified pom.xml files to your commit.' 1>&2\n  echo -e '\\033[0;31mError:\\033[0m Diff is:' 1>&2\n  git --no-pager diff '*pom.xml' 1>&2\n  exit 1\nfi\n"
        },
        {
          "name": "update-version.sh",
          "type": "blob",
          "size": 5.005859375,
          "content": "#!/bin/bash\n\nset -e -u -o pipefail\nshopt -s failglob\n\nif [ $# -eq 0 ]; then\n    echo \"Release version required\"\n    exit 1\nfi\nVERSION=$1\n\n./mvnw -e -B -Dscan=false -Dgradle.cache.local.enabled=false versions:set -Dtcks -DnewVersion=\"${VERSION}\" -DgenerateBackupPoms=false -DprocessAllModules -Prelocations -DupdateBuildOutputTimestampPolicy=always\n\nif [ -f independent-projects/enforcer-rules/src/it/smoketest/pom.xml ]; then\n    # update the parent version only using indentation\n    sed -i -r \"s@        <version>[^<]+</version>@        <version>${VERSION}</version>@\" independent-projects/enforcer-rules/src/it/smoketest/pom.xml\nfi\n\nif [ -f devtools/gradle/gradle.properties ]; then\n    sed -i -r \"s/^version( ?= ?).*$/version\\1${VERSION}/\" devtools/gradle/gradle.properties\nfi\n\nif [ -f integration-tests/gradle/gradle.properties ]; then\n    sed -i -r \"s/^version( ?= ?).*$/version\\1${VERSION}/\" integration-tests/gradle/gradle.properties\nfi\n\nsed -r -i \"s@<quarkus.version>[^<]+</quarkus.version>@<quarkus.version>${VERSION}</quarkus.version>@\" independent-projects/tools/pom.xml\n\nif [ -f extensions/azure-functions-http/maven-archetype/src/main/resources/archetype-resources/pom.xml ]; then\n    sed -r -i \"s@<quarkus.version>[^<]+</quarkus.version>@<quarkus.version>${VERSION}</quarkus.version>@\" extensions/azure-functions-http/maven-archetype/src/main/resources/archetype-resources/pom.xml\n    sed -r -i \"s@<quarkus-plugin.version>[^<]+</quarkus-plugin.version>@<quarkus-plugin.version>${VERSION}</quarkus-plugin.version>@\" extensions/azure-functions-http/maven-archetype/src/main/resources/archetype-resources/pom.xml\n    sed -r -i \"s@<quarkus.platform.version>[^<]+</quarkus.platform.version>@<quarkus.platform.version>${VERSION}</quarkus.platform.version>@\" extensions/azure-functions-http/maven-archetype/src/main/resources/archetype-resources/pom.xml\nfi\n\nif [ -f extensions/amazon-lambda/maven-archetype/src/main/resources/archetype-resources/pom.xml ]; then\n    sed -r -i \"s@<quarkus.version>[^<]+</quarkus.version>@<quarkus.version>${VERSION}</quarkus.version>@\" extensions/amazon-lambda/maven-archetype/src/main/resources/archetype-resources/pom.xml\n    sed -r -i \"s@<quarkus-plugin.version>[^<]+</quarkus-plugin.version>@<quarkus-plugin.version>${VERSION}</quarkus-plugin.version>@\" extensions/amazon-lambda/maven-archetype/src/main/resources/archetype-resources/pom.xml\n    sed -r -i \"s@<quarkus.platform.version>[^<]+</quarkus.platform.version>@<quarkus.platform.version>${VERSION}</quarkus.platform.version>@\" extensions/amazon-lambda/maven-archetype/src/main/resources/archetype-resources/pom.xml\nfi\n\nif [ -f extensions/amazon-lambda-http/maven-archetype/src/main/resources/archetype-resources/pom.xml ]; then\n    sed -r -i \"s@<quarkus.version>[^<]+</quarkus.version>@<quarkus.version>${VERSION}</quarkus.version>@\" extensions/amazon-lambda-http/maven-archetype/src/main/resources/archetype-resources/pom.xml\n    sed -r -i \"s@<quarkus-plugin.version>[^<]+</quarkus-plugin.version>@<quarkus-plugin.version>${VERSION}</quarkus-plugin.version>@\" extensions/amazon-lambda-http/maven-archetype/src/main/resources/archetype-resources/pom.xml\n    sed -r -i \"s@<quarkus.platform.version>[^<]+</quarkus.platform.version>@<quarkus.platform.version>${VERSION}</quarkus.platform.version>@\" extensions/amazon-lambda-http/maven-archetype/src/main/resources/archetype-resources/pom.xml\nfi\n\nif [ -f extensions/funqy/funqy-amazon-lambda/maven-archetype/src/main/resources/archetype-resources/pom.xml ]; then\n    sed -r -i \"s@<quarkus.version>[^<]+</quarkus.version>@<quarkus.version>${VERSION}</quarkus.version>@\" extensions/funqy/funqy-amazon-lambda/maven-archetype/src/main/resources/archetype-resources/pom.xml\n    sed -r -i \"s@<quarkus-plugin.version>[^<]+</quarkus-plugin.version>@<quarkus-plugin.version>${VERSION}</quarkus-plugin.version>@\" extensions/funqy/funqy-amazon-lambda/maven-archetype/src/main/resources/archetype-resources/pom.xml\n    sed -r -i \"s@<quarkus.platform.version>[^<]+</quarkus.platform.version>@<quarkus.platform.version>${VERSION}</quarkus.platform.version>@\" extensions/funqy/funqy-amazon-lambda/maven-archetype/src/main/resources/archetype-resources/pom.xml\nfi\nif [ -f extensions/amazon-lambda-rest/maven-archetype/src/main/resources/archetype-resources/pom.xml ]; then\n    sed -r -i \"s@<quarkus.version>[^<]+</quarkus.version>@<quarkus.version>${VERSION}</quarkus.version>@\" extensions/amazon-lambda-rest/maven-archetype/src/main/resources/archetype-resources/pom.xml\n    sed -r -i \"s@<quarkus-plugin.version>[^<]+</quarkus-plugin.version>@<quarkus-plugin.version>${VERSION}</quarkus-plugin.version>@\" extensions/amazon-lambda-rest/maven-archetype/src/main/resources/archetype-resources/pom.xml\n    sed -r -i \"s@<quarkus.platform.version>[^<]+</quarkus.platform.version>@<quarkus.platform.version>${VERSION}</quarkus.platform.version>@\" extensions/amazon-lambda-rest/maven-archetype/src/main/resources/archetype-resources/pom.xml\nfi\nif [ -f coverage-report/pom.xml ]; then\n    sed -r -i \"s@^        <version>[^<]+</version>@        <version>${VERSION}</version>@\" coverage-report/pom.xml\nfi\n"
        }
      ]
    }
  ]
}