{
  "metadata": {
    "timestamp": 1736708911381,
    "page": 157,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "android-async-http/android-async-http",
      "stars": 10628,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2763671875,
          "content": "# Custom\n_site\n\n# Ant\nMANIFEST.MF\n./*.jar\nbuild.num\nbuild\n\n# ADT\n.classpath\n.project\n.settings\nlocal.properties\nbin\ngen\n_layouts\nproguard.cfg\n\n# OSX\n.DS_Store\n\n# Github\ngh-pages\n\n# Gradle\n.gradle\nbuild\n\n# IDEA\n*.iml\n*.ipr\n*.iws\nout\n.idea\n\n# Maven\ntarget\nrelease.properties\npom.xml.*\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.279296875,
          "content": "language: android\nsudo: false\ndist: trusty\njdk: openjdk8\nandroid:\n  components:\n    - platform-tools\n    - tools\n    - build-tools-28.0.3\n    - android-28\n    - extra-android-m2repository\n    - extra-google-m2repository\n  licenses:\n    - '.+'\nscript:\n  - ./gradlew clean assemble check\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 11.7275390625,
          "content": "# CHANGELOG\n\n## 1.4.11\n\n  - fix SNI issue on lower android device with Conscrypt\n\n## 1.4.10\n\n  - Fixed IP/name resolution errors #998\n  - Fixed SNI compatibility\n  - Upgraded library HttpClient 4.5.8 from 4.3.6\n\n## 1.4.9 (released 19. 9. 2015)\n\nComplete list of commits included is here [https://github.com/loopj/android-async-http/commits/1.4.9](https://github.com/loopj/android-async-http/commits/1.4.9)  \nList of closed issues is here [https://github.com/loopj/android-async-http/issues?milestone=8&state=closed](https://github.com/loopj/android-async-http/issues?milestone=8&state=closed)\n\n  - **IMPORTANT**, We've switched library from using `org.apache.http` to use `cz.msebera.android.httpclient`, you have to update all your code\n  - Library is from now on using upstream version of HttpClient libraries, provided by repackaging project https://github.com/smarek/httpclient-android/\n  - Achieved API23 Compatibility, see #830 for more info\n  - Added HeadSample into sample application, to verify Head request works as it should\n  - FileAsyncHttpResponseHandler now has constructor with `usePoolThread` param, which causes callbacks to be fired from ThreadPool instead of main looper\n\n## 1.4.8 (released 17. 7. 2015)\n\nComplete list of commits included is here [https://github.com/loopj/android-async-http/commits/1.4.8](https://github.com/loopj/android-async-http/commits/1.4.8)  \nList of closed issues is here [https://github.com/loopj/android-async-http/issues?milestone=7&state=closed](https://github.com/loopj/android-async-http/issues?milestone=7&state=closed)\n\n  - New constructor for BinaryHttpResponseHandler which takes Looper as argument (thanks to @ScottFrank)\n  - SaxAsyncHttpResponseHandler can be now provided with custom charset, instead of just using default one\n  - Library LogCat tags now use shorter form (forced through Lint checks), appendix \"ResponseHandler\" shortened to \"RH\"\n  - Updated documentation on `RequestHandle.cancel(boolean)` and returning correct response according to handle state\n  - SaxAsyncHttpResponseHandler onFailure(int, Header[], byte[], Throwable) used wrong fallback to onSuccess(int, Header[], T), fixed to onFailure(int, Header[], T), where T extends SAX DefaultHandler\n  - Regression fix on onProgress(int,int) documentation\n  - Sample application now can be built with LeakCanary, use i.e. `gradle :sample:installWithLeakCanaryDebug` to use it\n  - Updated RequestParams documentation on handling arrays, sets and maps, along with new RequestParamsDebug sample\n  - Added BlackholeHttpResponseHandler implementation, which discards all response contents and silents all various log messages (see #416)\n  - Added LogInterface, it's default implementation and interface option to disable/enable logging library-wide and set logging verbosity\n  - Added option to TAG RequestHandle and cancel all requests matching specified TAG through `AsyncHttpClient.cancelRequestsByTAG(Object TAG)`\n  - Removed deprecated `getTimeout()` replaced by `getConnectTimeout()` and `getResponseTimeout()` respectively\n  - Removed deprecated `clearBasicAuth()` replaced by `clearCredentialsProvider()`\n\n## 1.4.7 (released 9. 5. 2015)\n\nComplete list of commits included is here [https://github.com/loopj/android-async-http/commits/1.4.7](https://github.com/loopj/android-async-http/commits/1.4.7)  \nList of closed issues is here [https://github.com/loopj/android-async-http/issues?milestone=6&state=closed](https://github.com/loopj/android-async-http/issues?milestone=6&state=closed)\n\n  - Fixed crash when canceling through RequestHandle from UI Thread (NetworkOnMainThreadException)\n  - Fixed URL encoding feature, that was breaking whole URL, not just path and query parts\n  - FileAsyncHttpResponseHandler now checks that target file path is available or can be created\n  - DataAsyncHttpResponseHandler was sending cancel notification instead of progress notification, fixed\n  - Added support for HTTP PATCH requests\n  - Fixed Assert exception when mkdirs in FileAsyncHttpResponseHandler tries to create dirs that already exists\n  - Provided option to easily override ClientConnectionManager provision in AsyncHttpClient\n  - Changed onProgress from (int,int) to (long,long) for dealing with large transfers\n  - Renamed typo of `preemtive` to `preemptive` (preemptive basic auth)\n  - Added option to put File array in RequestParams\n  - RequestParams now support forcing Content-Type into `multipart/form-data` even if there are no files/streams to be multiparted\n  - Gradle added support for installing to local maven repository, through `gradle installArchives` task\n  - Added support for Json RFC5179 in JsonHttpResponseHandler\n\n## 1.4.6 (released 7. 9. 2014)\n\nComplete list of commits included is here [https://github.com/loopj/android-async-http/commits/1.4.6](https://github.com/loopj/android-async-http/commits/1.4.6)  \nList of closed issues is here [https://github.com/loopj/android-async-http/issues?milestone=4&state=closed](https://github.com/loopj/android-async-http/issues?milestone=2&state=closed)\n\n  - Fixed missing boundary when passing content-type as call param along with HttpEntity\n  - Added warnings for not overriden calls in JsonHttpResponseHandler (and others)\n  - RequestParams now implement Serializable, to support storing them and passing them along\n  - Added option to add File part with custom file name (overriding the real file name)\n  - Fixed not-escaped contents in JsonStreamEntity\n  - Separated connect and response timeout settings\n  - Allowed to pass Looper into *HttpResponseHandler classes\n  - Fixed reporting progress on GZIP compressed down-streams\n  - Added more samples (eg. AsyncBackgroundThreadSample.java, ContentTypeForHttpEntitySample.java, PrePostProcessingSample.java)\n  - Added option to pre- and post- process data in AsyncHttpRequest.java via subclass (see PrePostProcessingSample.java)\n  - Fixed ConcurrentModificationException on AsyncHttpClient.cancelRequests\n  - Fixed handling BOM in decoding response in TextHttpResponseHandler and JsonHttpResponseHandler\n\n## 1.4.5 (released 22. 6. 2014)\n\nComplete list of commits included is here [https://github.com/loopj/android-async-http/commits/1.4.5](https://github.com/loopj/android-async-http/commits/1.4.5)  \nList of closed issues is here [https://github.com/loopj/android-async-http/issues?milestone=2&state=closed](https://github.com/loopj/android-async-http/issues?milestone=2&state=closed)\n\n  - Support for circular and relative redirects\n  - Added support for SAX parsing, see `SaxAsyncHttpResponseHandler`\n  - Fixed Threading issue when used in Service or non-UI Thread context\n  - Fixed GZIPInputStream issue when running in StrictMode\n  - Removed unnecessary (ambiguous) callback methods (were deprecated in 1.4.4)\n  - Added JsonStreamerEntity to allow up streaming JSON data\n  - Added possibility to modify blacklisted/whitelisted exceptions (see `RetryHandler`)\n  - Using `newCachedThreadPool()` as default ExecutorService in library, with option to change it via main interface\n  - Added `ResponseHandlerInterface` to support completely custom implementations of response handlers\n  - Added `onProgress(int,int)` callback, which is used for upstream progress logging (eg. Progressbar dialogs)\n  - Fixed \"division by zero\" in default response handler\n  - Added DataAsyncHttpResponseHandler, which has extra callback method which receives partially received data\n  - Fixed problem with uploading more than 2 files (changes in SimpleMultipartEntity)\n  - Fixed problem where on GarbageCollectors activity there was no callback received\n  - Added warning for cases, where headers overwrite each other (between common headers and per-request headers)\n  - Safely closing IO streams (both upstream and downstream)\n  - Fixed PersistentCookieStore issue, where non-persistent cookies were stored and added option to delete stored cookie\n  - Fixed networkOnMainThreadException when canceling requests (`AsyncHttpClient#cancel(boolean)`)\n  - Removed default User-Agent definition from library\n  - Fixed handling null URLs in default interface calls\n  - Allowed to subclass AsyncHttpClient and simply provide custom AsyncHttpRequest object (`AsyncHttpClient#newAsyncHttpRequest`)\n  - Changed project structure to be default Intellij IDEA structure (eg. library/src/main/java)\n  - Catching UnsupportedEncodingException default Async and Text response handlers\n  - Added strict Lint checking for both Library and Sample application\n  - Added example implementations in Sample application\n    - Requests threading (ThreadPool usage, 6 seconds delay on response)\n    - Synchronous request (from Activity and IntentService)\n    - SAX Parsing the response\n    - Retry request sample\n    - Handling 302 redirects\n    - RangeResponse (working with partially received data)\n    - Basic usage of GET, POST, PUT, DELETE\n    - JSON response parsing\n    - GZIP compressed communication\n    - Binary handler (receives `byte[]` without parsing/converting)\n    - File response handler (saving response directly into given File)\n    - Self-signed CA sample (how to pin SSL certificate or add custom trust-chain for requests)\n    - Persistent cookies store (persisting cookies between requests)\n    - Post multi-part encoded Files (SimpleMultipartEntity)\n    - Jackson JSON integration\n\n## 1.4.4 (released 28. 10. 2013)\n\nComplete list of commits included is here [https://github.com/loopj/android-async-http/commits/1.4.4](https://github.com/loopj/android-async-http/commits/1.4.4)  \nList of closed issues is here [https://github.com/loopj/android-async-http/issues?milestone=1&state=closed](https://github.com/loopj/android-async-http/issues?milestone=1&state=closed)\n\n  - Added FileAsyncHttpResponseHandler for direct saving response into File instead of device memory\n  - JsonHttpResponseHandler now parsing JSON in separate thread\n  - Interface method to allow/deny handling of http redirects\n  - Added method to delete previously set header (AsyncHttpClient.java)\n  - Not creating new Thread if call initiated outside of UI Thread (broken, fixed in 1.4.5)\n  - Support for changing response Charset (default still UTF-8)\n  - Allow setting maximum retries count (AsyncHttpClient.java)\n  - SimpleMultipartEntity now allows repeated usage (`HttpEntity.isRepeatable()`)\n  - Added custom SSLSocketFactory to allow certificate pinning and accepting self-signed or untrusted SSL certificates\n  - Callbacks to return HTTP status code and response Headers\n  - Added support for unsetting Basic Auth params\n  - Added support for non-standard HTTP and HTTPS ports (new constructors of `AsyncHttpClient`)\n  - Allowed to change dynamically allowed content-types for BinaryHttpResponseHandler per-response-handler (was static previously)\n  - Added support for setting proxy, optionally with authentication\n    - `AsyncHttpClient#setProxy(String hostname, int port, String username, String password)`\n  - Support for passing Maps, Sets and Lists via RequestParams\n  - Properly chaining callback methods (onSuccess, onFailure, ...) in descendant order by number of function params\n  - Fixed incorrect handling of URLs with spaces after redirect\n    - now sanitizes spaces within URL both on-request and on-redirect\n  - Added RequestHandle which can be used to cancel and/or check request status\n    - Is returned for each call (`.post(...)`, `.get(...)`, `.head(...)`, `.put(...)`, etc..)\n  - Added BaseJsonHttpResponseHandler to simplify integration with Jackson JSON, Gson and other JSON parsing libraries\n  - Added Sample application to demonstrate functions and usage\n    - Using [https://httpbin.org/](https://httpbin.org/) to test methods\n  - Enforcing INTERNET permission\n  - Support for Gradle buildscript\n  - Support for Travis CI (Continuous Integration) testing\n  - Dropped support for Eclipse ADT usage (obsolete)\n  - Added HTTP HEAD method support\n  - Releasing both AAR and JAR (+javadoc and sources) into Maven Central repository\n  - Added tons of mising Javadoc for both classes and methods\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.318359375,
          "content": "CONTRIBUTING\n============\nAsyncHttpClient is an open-source project made by developers for developers!\n\nIf you would like to contribute to the project, it's really great. You can contribute in a variety of ways:\n\n  * Help us with test cases and examples for the Wiki (and kindly follow our [Coding Standards](#coding-standards))\n  * If you have a good idea/patch for the project, create a [pull request](#pull-requests)\n  * Found a bug? You're more than welcome to [submit an issue](#issues)\n  * Help other fellow developers solve their problems, you're welcome to do so in issues\n\nWe do require certain guidelines to be followed so that the quality of the project remains top-notch:\n\nPULL requests\n-------------\nWhen you submit a patch or a new functionality for the project, you must open a pull request. We will get to the pull request as soon as possible, investigate what functionality or bug fixes have been added and decide whether to include it in the library or not -- for the benefit of everyone.\n\n**You agree that all contributions that you make to the library will be distributed further under the same license as the library itself (Apache V2).**\n\nDon't be discouraged if your pull request is rejected. This is not a deadline and sometimes with a proper explanation on your side, we are persuaded to merge in the request. Just remember that this is a library for everyone and as such must meet certain, generic rules that we would like to believe are following.  \n\nISSUES\n---------\n\n![Read the ISSUES?](https://i.imgur.com/LPWyLe7.jpg \"Read the ISSUES?\")\n\nThe issues system is the place to report bugs and not for submitting patches or new functionality. As helpful as we would like to be, we cannot replace the developer and we certainly do not see what you're seeing. So when you come to report an issue, follow these simple rules:  \n\n  * Report bugs in the English language only\n  * Use Markdown to format your issue in a fashionable way (easier to read): [Familiarize yourself](https://help.github.com/articles/github-flavored-markdown)\n  * If the issue is due to a crash, include the stack trace -- `throwable.printStackTrace()` -- and any other detail that will shed light on the problem\n  * We need to see the source code (minus certain details that you think are confidential) that caused the problem in the first place, so include it too\n\nOpening issues without providing us with the information necessary to debug and fix it is useless; so we will close such issues within 7 days period  \n\nCODING STANDARDS\n----------------\nWe need you to follow certain rules when sending source code contributions. These are the basic principles that we ourselves abide to and we require that you do so as well:\n\n  * Do not use the Tab character (it's in first place for a reason)\n  * Indentation is 4 spaces\n  * Include the copyright info (as in other files) at the top of the class file\n  * You must provide proper Javadoc, including description, in English for both public and protected methods, classes and properties\n  * Group packages that belong to the same top-level package together, followed by an empty line\n  * Add an empty line after and before class/interface declarations, methods and constructors\n  * Add an empty line before and after a group of properties\n  * Do not catch generic Exception/Throwable errors, but always catch the most specific type of the exception/error\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "NOTICE.txt",
          "type": "blob",
          "size": 0.27734375,
          "content": "Android Async Http Client library\nCopyright (c) 2011-2015 James Smith <james@loopj.com>\nhttps://loopj.com\n\nCopyright (c) 2015-2019 Marek Sebera <marek@msebera.cz>\nhtts://msebera.cz\n\nThis product includes software developed by\nThe Apache Software Foundation (https://www.apache.org/).\n"
        },
        {
          "name": "PUBLISHING.md",
          "type": "blob",
          "size": 1.7216796875,
          "content": "# Publish to oss.sonatype.org staging repository\n\n```\ngradle clean\n# edit build.gradle to update allprojects.version\n# edit gradle.properties to update VERSION_NAME and VERSION_CODE\n# edit CHANGELOG.md and add changes for published version\n# edit sample/src/main/AndroidManifest.xml and update both versionCode and versionName attributes\n# edit README.md and update paths, latest version, repository links and sample codes\ngradle check\n# fix all possible errors and warnings before publishing\ncd library\n# publishing only library, so following tasks are run in \"library\" sub-folder\ngradle generateJavadocJar\n# this will create javadoc archive check the contents via following cmd (use different name and/or path if needed)\n# jar -tf ./library/build/libs/android-async-http-null-Release-1.4.11-javadoc.jar\ngradle publish\n```\n\n# Publish to maven central\n\n*For Nexus Repository Manager 2.14+*\n\n - Login into https://oss.sonatype.org/\n - Navigation, choose Build Promotion > Staging Repositories\n - Explore if repo was automatically created and if contents do match expectations\n - Select repository and use \"Close\" action, to run pre-publishing checks\n - Wait a bit\n - Refresh the panel with repositories\n - Select repository and use \"Release\" action, if not available, there are issues, that need to be fixed before publishing\n\n# In GIT\n\n\n**example code using 1.4.11 as released version**\n```\ngit tag 1.4.11\ngit push origin --tags\n```\n\n# Github\n\nin *releases* https://github.com/android-async-http/android-async-http/releases\n\n - Create new release from appropriate tag (see GIT above)\n - Describe in similar terms as in CHANGELOG.md what is being done\n - Upload JAR (library, sources and javadoc) and AAR (library) along with the release\n - Publish by saving form\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.1845703125,
          "content": "Asynchronous Http Client for Android\n====================================\n[![Build Status](https://travis-ci.org/android-async-http/android-async-http.png?branch=master)](https://travis-ci.org/android-async-http/android-async-http)\n\nAn asynchronous, callback-based Http client for Android built on top of Apache's [HttpClient](https://hc.apache.org/httpcomponents-client-ga/) libraries.\n\nChangelog\n---------\n\nSee what is new in version 1.4.11 released on 29th June 2020\n\nhttps://github.com/android-async-http/android-async-http/blob/1.4.11/CHANGELOG.md\n\nJavadoc\n-------\n\nLatest Javadoc for 1.4.11 release are available here (also included in Maven repository):\n\nhttps://android-async-http.github.io/android-async-http/doc/\n\nFeatures\n--------\n- Make **asynchronous** HTTP requests, handle responses in **anonymous callbacks**\n- HTTP requests happen **outside the UI thread**\n- Requests use a **threadpool** to cap concurrent resource usage\n- GET/POST **params builder** (RequestParams)\n- **Multipart file uploads** with no additional third party libraries\n- Tiny size overhead to your application, only **60kb** for everything\n- Automatic smart **request retries** optimized for spotty mobile connections\n- Automatic **gzip** response decoding support for super-fast requests\n- Optional built-in response parsing into **JSON** (JsonHttpResponseHandler)\n- Optional **persistent cookie store**, saves cookies into your app's SharedPreferences\n- Support sni with Conscrypt on older android device ([wiki](https://github.com/android-async-http/android-async-http/wiki/Support-SNI-on-lower-android-device))\n\nExamples\n--------\n\nFor inspiration and testing on device we've provided Sample Application.  \nSee individual samples [here on Github](https://github.com/android-async-http/android-async-http/tree/1.4.11/sample/src/main/java/com/loopj/android/http/sample)  \nTo run Sample application, simply clone the repository and run this command, to install it on connected device  \n\n```java\ngradle :sample:installDebug\n```\n\nMaven\n-----\nYou can now integrate this library in your project via Maven. There are available two kind of builds.\n\n**releases, maven central**\n\nhttps://repo1.maven.org/maven2/com/loopj/android/android-async-http/\n```\nMaven URL: https://repo1.maven.org/maven2/\nGroupId: com.loopj.android\nArtifactId: android-async-http\nVersion: 1.4.11\nPackaging: JAR or AAR\n```\nGradle\n```groovy\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  implementation 'com.loopj.android:android-async-http:1.4.11'\n}\n```\n\n**development snapshots**\nsnapshot might not be published yet\n\nhttps://oss.sonatype.org/content/repositories/snapshots/com/loopj/android/android-async-http/\n```\nMaven URL: https://oss.sonatype.org/content/repositories/snapshots/\nGroupId: com.loopj.android\nArtifactId: android-async-http\nVersion: 1.4.12-SNAPSHOT\nPackaging: JAR or AAR\n```\nGradle\n```groovy\nrepositories {\n  maven {\n    url 'https://oss.sonatype.org/content/repositories/snapshots/'\n  }\n}\ndependencies {\n  implementation 'com.loopj.android:android-async-http:1.4.11-SNAPSHOT'\n}\n```\n\nDocumentation, Features and Examples\n------------------------------------\nFull details and documentation can be found on the project page here:\n\nhttps://android-async-http.github.io/android-async-http/\n\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 1.0126953125,
          "content": "buildscript {\n    repositories {\n        jcenter()\n        google()\n        maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" }\n        maven { url \"https://plugins.gradle.org/m2/\" }\n    }\n\n    dependencies {\n        classpath 'com.android.tools.build:gradle:4.0.0'\n        classpath 'com.vanniktech:gradle-android-javadoc-plugin:0.4.0-SNAPSHOT'\n        classpath 'digital.wup:android-maven-publish:3.6.2'\n        classpath \"gradle.plugin.com.dorongold.plugins:task-tree:1.4\"\n    }\n}\n\ndef isReleaseBuild() {\n    return version.contains(\"SNAPSHOT\") == false\n}\n\nallprojects {\n    group = 'com.loopj.android'\n    version = '1.4.11'\n\n    repositories {\n        google()\n        jcenter()\n        mavenCentral()\n    }\n\n    tasks.withType(JavaCompile) {\n        options.encoding = \"UTF-8\"\n        options.compilerArgs << \"-Xlint:unchecked\"\n        options.compilerArgs << \"-Xlint:deprecation\"\n    }\n}\n\napply plugin: 'android-reporting'\napply plugin: 'com.vanniktech.android.javadoc'\napply plugin: 'com.dorongold.task-tree'\n"
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.6083984375,
          "content": "VERSION_NAME=1.4.11\nVERSION_CODE=1411\nGROUP=com.loopj.android\n\nPOM_DESCRIPTION=An Asynchronous HTTP Library for Android\nPOM_URL=https://android-async-http.github.io/android-async-http/\nPOM_SCM_URL=https://github.com/android-async-http/android-async-http\nPOM_SCM_CONNECTION=scm:git@github.com:android-async-http/android-async-http.git\nPOM_SCM_DEV_CONNECTION=scm:git@github.com:android-async-http/android-async-http.git\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=https://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\n\nPOM_DEVELOPER_ID=jamessmith\nPOM_DEVELOPER_NAME=James Smith\n\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 4.9609375,
          "content": "#!/usr/bin/env bash\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS=\"\"\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn ( ) {\n    echo \"$*\"\n}\n\ndie ( ) {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\nesac\n\n# For Cygwin, ensure paths are in UNIX format before anything is touched.\nif $cygwin ; then\n    [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\nfi\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >&-\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >&-\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules\nfunction splitJvmOpts() {\n    JVM_OPTS=(\"$@\")\n}\neval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\nJVM_OPTS[${#JVM_OPTS[*]}]=\"-Dorg.gradle.appname=$APP_BASE_NAME\"\n\nexec \"$JAVACMD\" \"${JVM_OPTS[@]}\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.34765625,
          "content": "@if \"%DEBUG%\" == \"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif \"%ERRORLEVEL%\" == \"0\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto init\r\n\r\necho.\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\r\necho.\r\necho Please set the JAVA_HOME variable in your environment to match the\r\necho location of your Java installation.\r\n\r\ngoto fail\r\n\r\n:init\r\n@rem Get command-line arguments, handling Windowz variants\r\n\r\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\r\nif \"%@eval[2+2]\" == \"4\" goto 4NT_args\r\n\r\n:win9xME_args\r\n@rem Slurp the command line arguments.\r\nset CMD_LINE_ARGS=\r\nset _SKIP=2\r\n\r\n:win9xME_args_slurp\r\nif \"x%~1\" == \"x\" goto execute\r\n\r\nset CMD_LINE_ARGS=%*\r\ngoto execute\r\n\r\n:4NT_args\r\n@rem Get arguments from the 4NT Shell from JP Software\r\nset CMD_LINE_ARGS=%$\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\nexit /b 1\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "maven_push.gradle",
          "type": "blob",
          "size": 4.0048828125,
          "content": "/*\n * Copyright 2013 Chris Banes\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\napply plugin: 'maven'\napply plugin: 'signing'\n\ndef isReleaseBuild() {\n    return VERSION_NAME.contains(\"SNAPSHOT\") == false\n}\n\ndef getReleaseRepositoryUrl() {\n    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL\n            : \"https://oss.sonatype.org/service/local/staging/deploy/maven2/\"\n}\n\ndef getSnapshotRepositoryUrl() {\n    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL\n            : \"https://oss.sonatype.org/content/repositories/snapshots/\"\n}\n\ndef getRepositoryUsername() {\n    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : \"\"\n}\n\ndef getRepositoryPassword() {\n    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : \"\"\n}\n\nafterEvaluate { project ->\n    uploadArchives {\n        repositories {\n            mavenDeployer {\n                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }\n\n                pom.groupId = GROUP\n                pom.artifactId = POM_ARTIFACT_ID\n                pom.version = VERSION_NAME\n\n                repository(url: getReleaseRepositoryUrl()) {\n                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())\n                }\n                snapshotRepository(url: getSnapshotRepositoryUrl()) {\n                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())\n                }\n\n                pom.project {\n                    name POM_NAME\n                    packaging POM_PACKAGING\n                    description POM_DESCRIPTION\n                    url POM_URL\n\n                    scm {\n                        url POM_SCM_URL\n                        connection POM_SCM_CONNECTION\n                        developerConnection POM_SCM_DEV_CONNECTION\n                    }\n\n                    licenses {\n                        license {\n                            name POM_LICENCE_NAME\n                            url POM_LICENCE_URL\n                            distribution POM_LICENCE_DIST\n                        }\n                    }\n\n                    developers {\n                        developer {\n                            id POM_DEVELOPER_ID\n                            name POM_DEVELOPER_NAME\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    task installArchives(type: Upload) {\n        description \"Installs the artifacts to the local Maven repository.\"\n        configuration = configurations['archives']\n        repositories {\n            mavenDeployer {\n                pom.groupId = GROUP\n                pom.artifactId = POM_ARTIFACT_ID\n                pom.version = VERSION_NAME\n\n                repository url: \"file://${System.properties['user.home']}/.m2/repository\"\n            }\n        }\n    }\n\n    signing {\n        required { isReleaseBuild() && gradle.taskGraph.hasTask(\"uploadArchives\") }\n        sign configurations.archives\n    }\n\n    task androidJavadocs(type: Javadoc) {\n        source = android.sourceSets.main.java.srcDirs\n        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))\n    }\n\n    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {\n        classifier = 'javadoc'\n        from androidJavadocs.destinationDir\n    }\n\n    task androidSourcesJar(type: Jar) {\n        classifier = 'sources'\n        from android.sourceSets.main.java.srcDirs\n    }\n\n    artifacts {\n        archives androidSourcesJar\n        archives androidJavadocsJar\n    }\n}\n"
        },
        {
          "name": "releases",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.18359375,
          "content": "include ':library'\ninclude ':sample'\n\nrootProject.name = 'android-async-http-project'\nproject(':library').name = 'android-async-http'\nproject(':sample').name = 'android-async-http-sample'\n"
        }
      ]
    }
  ]
}