{
  "metadata": {
    "timestamp": 1736708922039,
    "page": 2,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ReactiveX/RxJava",
      "stars": 47963,
      "defaultBranch": "3.x",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.357421875,
          "content": "# Set default behaviour, in case users don't have core.autocrlf set.\n* text=auto\n\n# Explicitly declare text files we want to always be normalized and converted \n# to native line endings on checkout.\n*.java text\n*.groovy text\n*.scala text\n*.clj text\n*.txt text\n*.md text\n\n# Denote all files that are truly binary and should not be modified.\n*.png binary\n*.jpg binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.9619140625,
          "content": "# Compiled source #\n###################\n*.com\n*.class\n*.dll\n*.exe\n*.o\n*.so\n\n# Packages #\n############\n# it's better to unpack these files and commit the raw source\n# git has its own built in compression methods\n*.7z\n*.dmg\n*.gz\n*.iso\n*.jar\n*.rar\n*.tar\n*.zip\n\n# Logs and databases #\n######################\n*.log\n\n# OS generated files #\n######################\n.DS_Store*\nehthumbs.db\nIcon?\nThumbs.db\n\n# Editor Files #\n################\n*~\n*.swp\n\n# Gradle Files #\n################\n.gradle\n.gradletasknamecache\n.m2\n\n# Build output directies\ntarget/\nbuild/\n\n# IntelliJ specific files/directories\nout\n.idea\n*.ipr\n*.iws\n*.iml\natlassian-ide-plugin.xml\n\n# Eclipse specific files/directories\n.classpath\n.project\n.settings\n.metadata\nbin/\n\n# NetBeans specific files/directories\n.nbattrs\n/.nb-gradle/profiles/private/\n.nb-gradle-properties\n\n# Scala build\n*.cache\n/.nb-gradle/private/\n\n# PMD files\n.pmd\n.ruleset\ntest-output/\n\n# Checkstyle local config\n.checkstyle\n\n# Some editor's config\n.editorconfig\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 5.6123046875,
          "content": "## Learn more about this file at 'https://www.gitpod.io/docs/references/gitpod-yml'\n##\n## This '.gitpod.yml' file when placed at the root of a project instructs\n## Gitpod how to prepare & build the project, start development environments\n## and configure continuous prebuilds. Prebuilds when enabled builds a project\n## like a CI server so you can start coding right away - no more waiting for\n## dependencies to download and builds to finish when reviewing pull-requests\n## or hacking on something new.\n##\n## With Gitpod you can develop software from any device (even iPads) via \n## desktop or browser based versions of VS Code or any JetBrains IDE and\n## customise it to your individual needs - from themes to extensions, you\n## have full control.\n##\n## The easiest way to try out Gitpod is install the browser extenion:\n## 'https://www.gitpod.io/docs/browser-extension' or by prefixing\n## 'https://gitpod.io#' to the source control URL of any project.\n##\n## For example: 'https://gitpod.io#https://github.com/gitpod-io/gitpod'\n\n\n## The 'image' section defines which Docker image Gitpod should use. \n## By default, Gitpod uses a standard Docker Image called 'workspace-full'\n## which can be found at 'https://github.com/gitpod-io/workspace-images'\n##\n## Workspaces started based on this default image come pre-installed with\n## Docker, Go, Java, Node.js, C/C++, Python, Ruby, Rust, PHP as well as\n## tools such as Homebrew, Tailscale, Nginx and several more.\n##\n## If this image does not include the tools needed for your project then\n## a public Docker image or your own Docker file can be configured.\n## \n## Learn more about images at 'https://www.gitpod.io/docs/config-docker'\n\n#image: node:buster                        # use 'https://hub.docker.com/_/node'\n#\n#image:                                    # leave image undefined if using a Dockerfile\n#  file: .gitpod.Dockerfile                # relative path to the Dockerfile from the\n#                                          # root of the project\n\n## The 'tasks' section defines how Gitpod prepares and builds this project\n## or how Gitpod can start development servers. With Gitpod, there are three\n## types of tasks:\n##\n## - before: Use this for tasks that need to run before init and before command. \n## - init: Use this to configure prebuilds of heavy-lifting tasks such as\n##         downloading dependencies or compiling source code.\n## - command: Use this to start your database or application when the workspace starts.\n##\n## Learn more about these tasks at 'https://www.gitpod.io/docs/config-start-tasks'\n\n#tasks:\n#  - before: |\n#      # commands to execute...\n#\n#  - init: |\n#      # sudo apt-get install python3     # can be used to install operating system \n#                                         # dependencies but these are not kept after the\n#                                         # prebuild completes thus Gitpod recommends moving\n#                                         # operating system dependency installation steps\n#                                         # to a custom Dockerfile to make prebuilds faster\n#                                         # and to keep your codebase DRY.  \n#                                         # 'https://www.gitpod.io/docs/config-docker'\n#\n#      # pip install -r requirements.txt  # install codebase dependencies\n#      # cmake                            # precompile codebase\n#\n#  - name: Web Server\n#    openMode: split-left\n#    env:\n#      WEBSERVER_PORT: 8080\n#    command: |\n#     python3 -m http.server $WEBSERVER_PORT\n#\n#  - name: Web Browser\n#    openMode: split-right\n#    env:\n#      WEBSERVER_PORT: 8080\n#    command: |\n#     gp await-port $WEBSERVER_PORT\n#     lynx `gp url`\n\ntasks:\n  - command: ./gradlew build\n\n## The 'ports' section defines various ports your may listen on are \n## configured in Gitpod on an authenticated URL. By default, all ports\n## are in private visibility state.\n##\n## Learn more about ports at 'https://www.gitpod.io/docs/config-ports'\n\n#ports:\n#  - port: 8080 # alternatively configure entire ranges via '8080-8090'\n#    visibility: private # either 'public' or 'private' (default)\n#    onOpen: open-browser # either 'open-browser', 'open-preview' or 'ignore'\n\n\n## The 'vscode' section defines a list of Visual Studio Code extensions from\n## the OpenVSX.org registry to be installed upon workspace startup. OpenVSX\n## is an open alternative to the proprietary Visual Studio Code Marketplace\n## and extensions can be added by sending a pull-request with the extension\n## identifier to https://github.com/open-vsx/publish-extensions\n##\n## The identifier of an extension is always ${publisher}.${name}.\n##\n## For example: 'vscodevim.vim'\n##\n## Learn more at 'https://www.gitpod.io/docs/ides-and-editors/vscode'\n\n#vscode:\n#  extensions: \n#    - vscodevim.vim\n#    - esbenp.prettier-vscode@9.5.0\n#    - https://example.com/abc/releases/extension-0.26.0.vsix\n\n\n## The 'github' section defines configuration of continuous prebuilds\n## for GitHub repositories when the GitHub application\n## 'https://github.com/apps/gitpod-io' is installed in GitHub and granted\n## permissions to access the repository.\n##\n## Learn more at 'https://www.gitpod.io/docs/prebuilds'\n\ngithub: \n  prebuilds:\n    # enable for the default branch\n    master: true\n    # enable for all branches in this repo\n    branches: true\n    # enable for pull requests coming from this repo\n    pullRequests: true\n    # enable for pull requests coming from forks\n    pullRequestsFromForks: true\n    # add a check to pull requests\n    addCheck: true\n    # add a \"Review in Gitpod\" button as a comment to pull requests\n    addComment: false\n    # add a \"Review in Gitpod\" button to the pull request's description\n    addBadge: true\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.1826171875,
          "content": "# Contributing to RxJava 3.x\n\nIf you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request targeting the branch `3.x`.\n\nWhen submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible.\n\n## License\n\nBy contributing your code, you agree to license your contribution under the terms of the APLv2: https://github.com/ReactiveX/RxJava/blob/3.x/LICENSE\n\nAll files are released with the Apache 2.0 license.\n\nIf you are adding a new file it should have a header like this:\n\n```\n/*\n * Copyright (c) 2016-present, RxJava Contributors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See\n * the License for the specific language governing permissions and limitations under the License.\n */\n ```\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 0.5556640625,
          "content": "Copyright (c) 2016-present, RxJava Contributors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
        },
        {
          "name": "DESIGN.md",
          "type": "blob",
          "size": 25.0341796875,
          "content": "## RxJava v3 Design\n\nThis document explains the terminology, principles, contracts, and other aspects of the design of RxJava v3.\nIts intended audience is the implementers of the library.\n\n### Terminology & Definitions\n\n##### Interactive\n\nProducer obeys consumer-driven flow control.\nConsumer manages capacity by requesting data.\n\n\n##### Reactive\n\nProducer is in charge. Consumer has to do whatever it needs to keep up.\n\n\n##### Hot\n\nWhen used to refer to a data source (such as an `Observable`), it means it does not have side-effects when subscribed to.\n\nFor example, an `Observable` of mouse events. Subscribing to that `Observable` does not cause the mouse events, but starts receiving them.\n\n(Note: Yes, there are *some* side-effects of adding a listener, but they are inconsequential as far as the 'hot' usage is concerned).\n\n\n##### Cold\n\nWhen used to refer to a data source (such as an `Observable`), it means it has side-effects when subscribed to.\n\nFor example, an `Observable` of data from a remote API (such as an RPC call). Each time that `Observable` is subscribed to causes a new network call to occur.\n\n\n##### Reactive/Push\n\nProducer is in charge. Consumer has to do whatever it needs to keep up.\n\nExamples:\n\n- `Observable` (RxJS, Rx.Net, RxJava v1.x without backpressure, RxJava v2).\n- Callbacks (the producer calls the function at its convenience).\n- IRQ, mouse events, IO interrupts.\n- 3.x `Flowable` (with `request(n)` credit always granted faster or in larger quantity than producer).\n- Reactive Streams `Publisher` (with `request(n)` credit always granted faster or in larger quantity than producer).\n- Java 9 `Flow.Publisher` (with `request(n)` credit always granted faster than or in larger quantity than producer).\n\n\n##### Synchronous Interactive/Pull\n\nConsumer is in charge. Producer has to do whatever it needs to keep up.\n\nExamples:\n\n- `Iterable`.\n- 3.x/1.x `Observable` (without concurrency, producer and consumer on the same thread).\n- 3.x `Flowable` (without concurrency, producer and consumer on the same thread).\n- Reactive Streams `Publisher` (without concurrency, producer and consumer on the same thread).\n- Java 9 `Flow.Publisher` (without concurrency, producer and consumer on the same thread).\n\n\n##### Async Pull (Async Interactive)\n\nConsumer requests data when it wishes, and the data is then pushed when the producer wishes to.\n\nExamples:\n\n- `Future` & `Promise`.\n- `Single` (lazy `Future`).\n- 3.x `Flowable`.\n- Reactive Streams `Publisher`.\n- Java 9 `Flow.Publisher`.\n- 1.x `Observable` (with backpressure).\n- `AsyncEnumerable`/`AsyncIterable`.\n\nThere is an overhead (performance and mental) for achieving this, which is why we also have the 3.x `Observable` without backpressure.\n\n\n##### Flow Control\n\nFlow control is any mitigation strategy that a consumer applies to reduce the flow of data.\n\nExamples:\n\n- Controlling the production of data, such as with `Iterator.next` or `Subscription.request(n)`.\n- Preventing the delivery of data, such as buffer, drop, sample/throttle, and debounce.\n\n\n##### Eager\n\nContaining object immediately start work when it is created.\n\nExamples:\n\n- A `Future` once created has work being performed and represents the eventual value of that work. It can not be deferred once created.\n\n\n##### Lazy\n\nContaining object does nothing until it is subscribed to or otherwise started.\n\nExamples:\n\n- `Observable.create` does not start any work until `Observable.subscribe` starts the work.\n\n\n### RxJava & Related Types\n\n##### Observable\n\nStream that supports async and synchronous push. It does *not* support interactive flow control (`request(n)`).\n\nUsable for:\n\n- Sync or async.\n- Push.\n- 0, 1, many or infinite items.\n\nFlow control support:\n\n- Buffering, sampling, throttling, windowing, dropping, etc.\n- Temporal and count-based strategies.\n\n*Type Signature*\n\n```java\nclass Observable<T> {\n  void subscribe(Observer<T> observer);\n\n  interface Observer<T> {\n    void onNext(T t);\n    void onError(Throwable t);\n    void onComplete();\n    void onSubscribe(Disposable d);\n  }\n}\n```\n\nThe rule for using this type signature is:\n\n> onSubscribe onNext* (onError | onComplete)?\n\n\n##### Flowable\n\nStream that supports async and synchronous push and pull. It supports interactive flow control (`request(n)`).\n\nUsable for:\n\n- Pull sources.\n- Push Observables with backpressure strategy (i.e. `Observable.toFlowable(onBackpressureStrategy)`).\n- Sync or async.\n- 0, 1, many or infinite items.\n\nFlow control support:\n\n- Buffering, sampling, throttling, windowing, dropping, etc.\n- Temporal and count-based strategies.\n- `request(n)` consumer demand signal:\n\t- For pull-based sources, this allows batched \"async pull\".\n\t- For push-based sources, this allows backpressure signals to conditionally apply strategies (i.e. drop, first, buffer, sample, fail, etc.).\n\nYou get a `Flowable` from:\n\n- Converting a Observable with a backpressure strategy.\n- Create from sync/async `onSubscribe` API (which participate in backpressure semantics).\n\n*Type Signature*\n\n```java\nclass Flowable<T> implements Flow.Publisher<T>, io.reactivestreams.Publisher<T> {\n  void subscribe(Subscriber<T> subscriber);\n\n  interface Subscription implements Flow.Subscription, io.reactivestreams.Subscription {\n    void cancel();\n    void request(long n);\n  }\n}\n```\n\n*NOTE: To support `Flow.Publisher` in Java 9+ without breaking Java 7+ compatibility, we want to use the [multi-release jar file support](http://openjdk.java.net/jeps/238).*\n\nThe rule for using this type signature is:\n\n> onSubscribe onNext* (onError | onComplete)?\n\n\n##### Single\n\nLazy representation of a single response (lazy equivalent of `Future`/`Promise`).\n\nUsable for:\n\n- Pull sources.\n- Push sources being windowed or flow controlled (such as `window(1)` or `take(1)`).\n- Sync or async.\n- 1 item.\n\nFlow control:\n\n- Not applicable (don't subscribe if the single response is not wanted).\n\n*Type Signature*\n\n```java\nclass Single<T> {\n  void subscribe(Single.Subscriber<T> subscriber);\n}\n\ninterface SingleSubscriber<T> {\n  void onSuccess(T t);\n  void onError(Throwable t);\n  void onSubscribe(Disposable d);\n}\n```\n\n> onSubscribe (onError | onSuccess)?\n\n\n##### Completable\n\nLazy representation of a unit of work that can complete or fail.\n\n- Semantic equivalent of `Observable.empty().doOnSubscribe()`.\n- Alternative for scenarios often represented with types such as `Single<Void>` or `Observable<Void>`.\n\nUsable for:\n\n- Sync or async.\n- 0 items.\n\n*Type Signature*\n\n```java\nclass Completable {\n  void subscribe(Completable.Subscriber subscriber);\n}\n\ninterface CompletableSubscriber {\n  void onComplete();\n  void onError(Throwable t);\n  void onSubscribe(Disposable d);\n}\n```\n\n> onSubscribe (onError | onComplete)?\n\n##### Observer\n\nReactive consumer of events (without consumer-driven flow control). Involved in subscription lifecycle to allow unsubscription.\n\n##### Publisher\n\nInteractive producer of events (with flow control). Implemented by `Flowable`.\n\n[Reactive Streams producer](https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.0/README.md#1-publisher-code) of data.\n\n##### Subscriber\n\nInteractive consumer of events (with consumer-driven flow control). Involved in subscription lifecycle to allow unsubscription.\n\n[Reactive Streams consumer](https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.0/README.md#2-subscriber-code) of data.\n\n##### Subscription\n\n[Reactive Streams state](https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.0/README.md#3-subscription-code) of subscription supporting flow control and cancellation.\n\n`Disposable` is a similar type used for lifecycle management on the `Observable` type without interactive flow control.\n\n##### Processor\n\n[Reactive Streams operator](https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.0/README.md#4processor-code) for defining behavior between `Publisher` and `Subscriber`. It must obey the contracts of `Publisher` and `Subscriber`, meaning it is sequential, serialized, and must obey `request(n)` flow control.\n\n##### Subject\n\nA \"hot\", push-based data source that allows a producer to emit events to it and consumers to subscribe to events in a multicast manner. It is \"hot\" because consumers subscribing to it does not cause side-effects, or affect the data flow in any way. It is push-based and reactive because the producer is fully in charge.\n\nA `Subject` is used to decouple unsubscription. Termination is fully in the control of the producer. `onError` and `onComplete` are still terminal events.\n`Subject`s are stateful and retain their terminal state (for replaying to all/future subscribers).\n\nRelation to Reactive Streams:\n\n- It can not implement Reactive Streams `Publisher` unless it is created with a default consumer-driven flow control strategy.\n- It can not implement `Processor` since a `Processor` must compose `request(n)` which can not be done with multicasting or push.\n\nHere is an approach to converting from a `Subject` to Reactive Streams types by adding a default flow control strategy:\n\n```java\nSubject s = PublishSubject.create();\n// convert to Publisher with backpressure strategy\nPublisher p = s.toPublisher(onBackpressureStrategy);\n\n// now the request(n) semantics are handled by default\np.subscribe(subscriber1);\np.subscribe(subscriber2);\n```\n\nIn this example, `subscriber1` and `subscriber2` can consume at different rates, `request(n)` will propagate to the provided  `onBackpressureStrategy`, not the original `Subject` which can't propagate `request(n)` upstream.\n\n\n##### Disposable\n\nA type representing work or resource that can be cancelled or disposed.\n\nExamples:\n\n- An `Observable.subscribe` passes a `Disposable` to the `Observable.onSubscribe` to allow the `Observer` to dispose of the subscription.\n- A `Scheduler` returns a `Disposable` that you use for disposing of the `Scheduler`.\n\n`Subscription` is a similar type used for lifecycle management on the `Flowable` type with interactive flow control.\n\n##### Operator\n\nAn operator follows a specific lifecycle (union of the producer/consumer contract).\n\n- It must propagate the `subscribe` event upstream (to the producer).\n- It must obey the RxJava contract (serialize all events, `onError`/`onComplete` are terminal).\n- If it has resources to cleanup it is responsible for watching `onError`, `onComplete`, and `cancel/dispose`, and doing the necessary cleanup.\n- It must propagate the `cancel/dispose` upstream.\n\nIn the addition of the previous rules, an operator for `Flowable`:\n\n- It must propagate/negotiate the `request(n)` event.\n\n\n### Creation\n\nUnlike RxJava 1.x, 3.x base classes are to be abstract, stateless and generally no longer wrap an `onSubscribe` callback - this saves allocation in assembly time without limiting the expressiveness. Operator methods and standard factories still live as final on the base classes.\n\nInstead of the indirection of an `onSubscribe` and `lift`, operators are to be implemented by extending the base classes. For example, the `map`\noperator will look like this:\n\n```java\npublic final class FlowableMap<T, R> extends Flowable<R> {\n    \n    final Flowable<? extends T> source;\n    \n    final Function<? super T, ? extends R> mapper;\n    \n    public FlowableMap(Flowable<? extends T> source, Function<? super T, ? extends R> mapper) {\n        this.source = source;\n        this.mapper = mapper;\n    }\n    \n    @Override\n    protected void subscribeActual(Subscriber<? super R> subscriber) {\n        source.subscribe(new FlowableMapSubscriber<T, R>(subscriber, mapper));\n    }\n    \n    static final class FlowableMapSubscriber<T, R> implements Subscriber<T>, Subscription {\n        // ...\n    }\n}\n``` \n\nSince Java still doesn't have extension methods, \"adding\" more operators can only happen through helper methods such as `lift(C -> C)` and `compose(R -> P)` where `C` is the default consumer type (i.e. `rs.Subscriber`), `R` is the base type (i.e. `Flowable`) and `P` is the base interface (i.e. `rs.Publisher`). As before, the library itself may gain or lose standard operators and/or overloads through the same community process.\n\nIn concert, `create(onSubscribe)` will not be available; standard operators extend the base types directly. The conversion of other RS-based libraries will happen through the `Flowable.wrap(Publisher<T>)` static method. \n\n(*The unfortunate effect of `create` in 1.x was the ignorance of the Observable contract and beginner's first choice as an entry point. We can't eliminate this path since `rs.Publisher` is a single method functional interface that can be implemented just as badly.*)\n\nTherefore, new standard factory methods will try to address the common entry point requirements. \n\nThe `Flowable` will contain the following `create` methods:\n\n   - `create(SyncGenerator<T, S>)`: safe, synchronous generation of signals, one-by-one.\n   - `create(AsyncOnSubscribe<T, S>)`: batch-create signals based on request patterns.\n   - `create(Consumer<? super FlowEmitter<T>>)`: relay multiple values or error from multi-valued reactive-sources (i.e. button-clicks) while also give flow control options right there (buffer, drop, error, etc.).\n   - `createSingle(Consumer<? super SingleEmitter<T>>)`: relay a single value or error from other reactive sources (i.e. addListener callbacks).\n   - `createEmpty(Consumer<? super CompletionEmitter>)`: signal a completion or error from valueless reactive sources.\n   \nThe `Observable` will contain the following `create` methods:\n\n   - `create(SyncGenerator<T, S>)`: safe, synchronous generation of signals, one-by-one.\n   - `create(Consumer<? super FlowEmitter<T>>)`: relay multiple values or error from multi-valued reactive-sources (i.e. button-clicks) while also give flow control options right there (buffer, drop, error, etc.).\n   - `createSingle(Consumer<? super SingleEmitter<T>>)`: relay a single value or error from other reactive sources (i.e. addListener callbacks).\n   - `createEmpty(Consumer<? super CompletionEmitter>)`: signal a completion or error from valueless reactive sources.\n\nThe `Single` will contain the following `create` method:\n\n   - `create(Consumer<? super SingleEmitter<T>>)`: relay a single value or error from other reactive sources (i.e. addListener callbacks).\n   \nThe `Completable` will contain the following `create` method:\n\n   - `create(Consumer<? super CompletionEmitter>)`: signal a completion or error from valueless reactive sources.\n\n\nThe first two `create` methods take an implementation of an interface which provides state and the generator methods:\n\n```java\ninterface SyncGenerator<T, S> {\n\n    S createState();\n    \n    S generate(S state, Observer<T> output);\n    \n    void disposeState(S state);\n}\n\ninterface AsyncGenerator<T, S> {\n\n    S createState();\n    \n    S generate(S state, long requested, Observer<Observable<T>> output);\n    \n    void disposeState(S state);\n}\n```\n\nThese latter three `create` methods will provide the following interaction interfaces to the `java.util.function.Consumer`:\n\n```java\ninterface SingleEmitter<T> {\n\n    complete(T value);\n    \n    fail(Throwable error);\n    \n    stop();\n    \n    setDisposable(Disposable d);\n    \n}\n\ninterface FlowEmitter<T> {\n\n    void next(T value);\n   \n    void fail(Throwable error);\n   \n    void complete();\n   \n    void stop();\n\n    setDisposable(Disposable d);\n\n    enum BackpressureHandling {\n        IGNORE,\n        ERROR,\n        DROP,\n        LATEST,\n        BUFFER\n    }\n\n    void setBackpressureHandling(BackpressureHandling mode);\n    \n}\n\ninterface CompletableEmitter<T> {\n\n    complete();\n    \n    fail(Throwable error);\n    \n    stop();\n    \n    setDisposable(Disposable d);\n    \n}\n\n```\n\nBy extending the base classes, operator implementations would loose the tracking/wrapping features of 1.x. To avoid this, the methods `subscribe(C)` will be final and operators have to implement a protected `subscribeActual` (or any other reasonable name).\n\n```java\n@Override\npublic final void subscribe(Subscriber<? super T> s) {\n   subscribeActual(hook.onSubscribe(s));\n} \n\nprotected abstract void subscribeActual(Subscriber<? super T> s);\n```\n\nAssembly-time hooks will be moved into the individual standard methods on the base types:\n\n```java\npublic final Flowable<R> map(Function<? super T, ? extends R> mapper) {\n    return hook.onAssembly(new FlowableMap<T, R>(this, mapper));\n}\n```\n\n### Terminal behavior\n\nA producer can terminate a stream by emitting `onComplete` or `onError`. A consumer can terminate a stream by calling `cancel`/`dispose`.\n\nAny resource cleanup of the source or operators must account for any of these three termination events. In other words, if an operator needs cleanup, then it should register the cleanup callback with `cancel`/`dispose`, `onError` and `onComplete`.\n\nThe final `subscribe` will *not* invoke `cancel`/`dispose` after receiving an `onComplete` or `onError`.\n\n### JVM target and source compatibility\n\nThe 3.x version will target JDK6+ to let Android users consume the new version of RxJava.\n\n### Future work\n\nThis section contains current design work which needs more discussion and elaboration before it is merged into this document as a stated goal for 3.x.\n\n#### Custom Observable, Single, Completable, or Flowable\n\nWe are investigate a base interface (similar to `Publisher`) for the `Observable`, `Single`, and `Completable` (currently referred to as `Consumable` or `ConsumableObservable`). This would empower library owners and api developers to implement their own type of `Observable`, `Single`, or `Completable` without extending the class. This would result in a change the type signatures of `subscribe` as well as any operator that operates over an `Observable`, `Single`, or `Completable` to accept a more generic type (i.e. `ConsumableObservable`). For more information see the proof of concept project [Consumable](https://github.com/stealthcode/Consumable).\n\n#### Fusion\n\nOperator fusion exploits the declarative nature of building flows; the developer specifies the \"what\", \"where\" and \"when\", the library then tries to optimize the \"how\".\n\nThere are two main levels of operator fusion: *macro* and *micro*.\n\n##### Macro-fusion\n\nMacro fusion deals with the higher level view of the operators, their identity and their combination (mostly in the form of subsequence). This is partially an internal affair of the operators, triggered by the downstream operator and may work with several cases. Given an operator application pair `a().b()` where `a` could be a source or an intermediate operator itself, when the application of `b` happens in assembly time, the following can happen:\n\n  - `b` identifies `a` and decides to not apply itself. Example: `empty().flatMap()` is functionally a no-op.\n  - `b` identifies `a` and decides to apply a different, conventional operator. Example: `just().subscribeOn()` is turned into `just().observeOn()`.\n  - `b` decides to apply a new custom operator, combining and inlining existing behavior. Example: `just().subscribeOn()` internally goes to `ScalarScheduledPublisher`.\n  - `a` is `b` and the two operator's parameter set can be combined into a single application. Example: `filter(p1).filter(p2)` combined into `filter(p1 && p2)`.\n\nParticipating in the macro-fusion externally is possible by implementing a marker interface when extending `Flowable`. Two kinds of interfaces are available: \n\n  - `java.util.Callable`: the Java standard, throwing interface, indicating the single value has to be extracted in subscription time (or later).\n  - `ScalarCallable`: to indicate the single value can be safely extracted during assembly time and used/inlined in other operators:\n\n```java\ninterface ScalarCallable<T> extends java.util.Callable<T> {\n    @Override\n    T call();\n}\n```\n\n`ScalarCallable` is also `Callable` and thus its value can be extracted practically anytime. For convenience (and for sense), `ScalarCallable` overrides and hides the superclass' `throws Exception` clause - throwing during assembly time is likely unreasonable for scalars.\n\nSince Reactive-Streams doesn't allow `null`s in the value flow, we have the opportunity to define `ScalarCallable`s and `Callable`s returning `null` should be considered as an empty source - allowing operators to dispatch on the type `Callable` first then branch on the nullness of `call()`.\n\nInteroperating with other libraries, at this level is possible. Reactor-Core uses the same pattern and the two libraries can work with each other's `Publisher+Callable` types. Unfortunately, this means subscription-time only fusion as `ScalarCallable`s live locally in each library.\n\n##### Micro-fusion\n\nMicro-fusion goes a step deeper and tries to reuse internal structures, mostly queues, in operator pairs, saving on allocation and sometimes on atomic operations. It's property is that, in a way, subverts the standard Reactive-Streams protocol between subsequent operators that both support fusion. However, from the outside world's view, they still work according to the RS protocol.\n\nCurrently, two main kinds of micro-fusion opportunities are available.\n\n###### 1) Conditional Subscriber\n\nThis extends the RS `Subscriber`interface with an extra method: `boolean tryOnNext(T value)` and can help avoiding small request amounts in case an operator didn't forward but dropped the value. The canonical use is for the `filter()` operator where if the predicate returns false, the operator has to request 1 from upstream (since the downstream doesn't know there was a value dropped and thus not request itself). Operators wanting to participate in this fusion have to implement and subscribe with an extended `Subscriber` interface:\n\n```java\ninterface ConditionalSubscriber<T> {\n   boolean tryOnNext(T value);\n}\n\n//...\n@Override\nprotected void subscribeActual(Subscriber<? super T> s) {\n    if (s instanceof ConditionalSubscriber) {\n        source.subscribe(new FilterConditionalSubscriber<>(s, predicate));\n    } else {\n        source.subscribe(new FilterRegularSubscriber<>(s, predicate));\n    }\n}\n```\n\n(Note that this may lead to extra case-implementations in operators that have some kind of queue-drain emission model.)\n\n###### 2) Queue-fusion\n\nThe second category is when two (or more) operators share the same underlying queue and each append activity at the exit point (i.e. `poll()`) of the queue. This can work in two modes: synchronous and asynchronous.\n\nIn synchronous mode, the elements of the sequence is already available (i.e. a fixed `range()` or `fromArray()`, or can be synchronously calculated in a pull fashion in `fromIterable`. In this mode, the requesting and regular onError-path is bypassed and is forbidden. Sources have to return null from `pull()` and false from `isEmpty()` if they have no more values and throw from these methods if they want to indicate an exceptional case.\n\nIn asynchronous mode, elements may become available at any time, therefore, `pull` returning null, as with regular queue-drain, is just the indication of temporary lack of source values. Completion and error still has to go through `onComplete` and `onError` as usual, requesting still happens as usual but when a value is available in the shared queue, it is indicated by an `onNext(null)` call. This can trigger a chain of `drain` calls without moving values in or out of different queues.\n\nIn both modes, `cancel` works and behaves as usual.\n\nSince this fusion mode is an optional extension, the mode switch has to be negotiated and the shared queue interface established. Operators already working with internal queues then can, mostly, keep their current `drain()` algorithm. Queue-fusion has its own interface and protocol built on top of the existing `onSubscribe`-`Subscription` rail:\n\n```java\ninterface QueueSubscription<T> implements Queue<T>, Subscription {\n    int NONE = 0;\n    int SYNC = 1;\n    int ASYNC = 2;\n    int ANY = SYNC | ASYNC;\n    int BOUNDARY = 4;\n\n    int requestFusion(int mode);\n}\n```\n\nFor performance, the mode is an integer bitflags setup, called early during subscription time, and allows negotiating the fusion mode. Usually, producers can do only one mode and consumers can do both mode. Because fused, intermediate operators attach logic (which is many times user-callback) to the exit point of the queue interface (poll()), it may change the computation location of those callbacks in an unwanted way. The flag `BOUNDARY` is added by consumers indicating that they will consume the queue over an async boundary. Intermediate operators, such as `map` and `filter` then can reject the fusion in such sequences.\n\nSince RxJava 3.x is still JDK 6 compatible, the `QueueSubscription` can't itself default unnecessary methods and implementations are required to throw `UnsupportedOperationException` for `Queue` methods other than the following:\n\n  - `poll()`.\n  - `isEmpty()`.\n  - `clear()`.\n  - `size()`.\n\nEven though other modern libraries also define this interface, they live in local packages and thus non-reusable without dragging in the whole library. Therefore, until externalized and standardized, cross-library micro-fusion won't happen.\n\nA consequence of the extension of the `onSubscribe`-`Subscription` rail is that intermediate operators are no longer allowed to pass an upstream `Subscription` directly to its downstream `Subscriber.onSubscribe`. Doing so is likely to have the fused sequence skip the operator completely, losing behavior or causing runtime exceptions. Since RS `Subscriber` is an interface, operators can simply implement both `Subscriber` and `Subscription` on themselves, delegating the `request` and `cancel` calls to the upstream and calling `child.onSubscribe(this)`.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 31.390625,
          "content": "# RxJava: Reactive Extensions for the JVM\n\n<a href='https://github.com/ReactiveX/RxJava/actions?query=workflow%3ASnapshot'><img src='https://github.com/ReactiveX/RxJava/workflows/Snapshot/badge.svg'></a>\n[![codecov.io](http://codecov.io/github/ReactiveX/RxJava/coverage.svg?branch=3.x)](https://codecov.io/gh/ReactiveX/RxJava/branch/3.x)\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/io.reactivex.rxjava3/rxjava/badge.svg)](https://maven-badges.herokuapp.com/maven-central/io.reactivex.rxjava3/rxjava)\n[![Contribute with Gitpod](https://img.shields.io/badge/Contribute%20with-Gitpod-908a85?logo=gitpod)](https://gitpod.io/#https://github.com/ReactiveX/RxJava)\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/ReactiveX/RxJava/badge)](https://securityscorecards.dev/viewer/?uri=github.com/ReactiveX/RxJava)\n\nRxJava is a Java VM implementation of [Reactive Extensions](http://reactivex.io): a library for composing asynchronous and event-based programs by using observable sequences.\n\nIt extends the [observer pattern](http://en.wikipedia.org/wiki/Observer_pattern) to support sequences of data/events and adds operators that allow you to compose sequences together declaratively while abstracting away concerns about things like low-level threading, synchronization, thread-safety and concurrent data structures.\n\n#### Version 3.x ([Javadoc](http://reactivex.io/RxJava/3.x/javadoc/))\n\n- Single dependency: [Reactive-Streams](https://github.com/reactive-streams/reactive-streams-jvm).\n- Java 8+ or Android API 21+ required.\n- Java 8 lambda-friendly API.\n- [Android](https://github.com/ReactiveX/RxAndroid) desugar friendly.\n- Fixed API mistakes and many limits of RxJava 2.\n- Intended to be a replacement for RxJava 2 with relatively few binary incompatible changes.\n- Non-opinionated about the source of concurrency (threads, pools, event loops, fibers, actors, etc.).\n- Async or synchronous execution.\n- Virtual time and schedulers for parameterized concurrency.\n- Test and diagnostic support via test schedulers, test consumers and plugin hooks.\n- Interop with newer JDK versions via 3rd party libraries, such as\n  - [Java 9 Flow API](https://github.com/akarnokd/RxJavaJdk9Interop#rxjavajdk9interop)\n  - [Java 21 Virtual Threads](https://github.com/akarnokd/RxJavaFiberInterop#rxjavafiberinterop)\n\nLearn more about RxJava in general on the <a href=\"https://github.com/ReactiveX/RxJava/wiki\">Wiki Home</a>.\n\n:information_source: Please read the [What's different in 3.0](https://github.com/ReactiveX/RxJava/wiki/What's-different-in-3.0) for details on the changes and migration information when upgrading from 2.x.\n\n#### Version 2.x\n\nThe [2.x version](https://github.com/ReactiveX/RxJava/tree/2.x) is end-of-life as of **February 28, 2021**. No further development, support, maintenance, PRs and updates will happen. The [Javadoc]([Javadoc](http://reactivex.io/RxJava/2.x/javadoc/)) of the very last version, **2.2.21**, will remain accessible.\n\n#### Version 1.x\n\nThe [1.x version](https://github.com/ReactiveX/RxJava/tree/1.x) is end-of-life as of **March 31, 2018**. No further development, support, maintenance, PRs and updates will happen. The [Javadoc]([Javadoc](http://reactivex.io/RxJava/1.x/javadoc/)) of the very last version, **1.3.8**, will remain accessible.\n\n## Getting started\n\n### Setting up the dependency\n\nThe first step is to include RxJava 3 into your project, for example, as a Gradle compile dependency:\n\n```groovy\nimplementation \"io.reactivex.rxjava3:rxjava:3.x.y\"\n```\n\n(Please replace `x` and `y` with the latest version numbers: [![Maven Central](https://maven-badges.herokuapp.com/maven-central/io.reactivex.rxjava3/rxjava/badge.svg)](https://maven-badges.herokuapp.com/maven-central/io.reactivex.rxjava3/rxjava)\n)\n\n### Hello World\n\nThe second is to write the **Hello World** program:\n\n```java\npackage rxjava.examples;\n\nimport io.reactivex.rxjava3.core.*;\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        Flowable.just(\"Hello world\").subscribe(System.out::println);\n    }\n}\n```\n\nNote that RxJava 3 components now live under `io.reactivex.rxjava3` and the base classes and interfaces live under `io.reactivex.rxjava3.core`.\n\n### Base classes\n\nRxJava 3 features several base classes you can discover operators on:\n\n  - [`io.reactivex.rxjava3.core.Flowable`](http://reactivex.io/RxJava/3.x/javadoc/io/reactivex/rxjava3/core/Flowable.html): 0..N flows, supporting Reactive-Streams and backpressure\n  - [`io.reactivex.rxjava3.core.Observable`](http://reactivex.io/RxJava/3.x/javadoc/io/reactivex/rxjava3/core/Observable.html): 0..N flows, no backpressure,\n  - [`io.reactivex.rxjava3.core.Single`](http://reactivex.io/RxJava/3.x/javadoc/io/reactivex/rxjava3/core/Single.html): a flow of exactly 1 item or an error,\n  - [`io.reactivex.rxjava3.core.Completable`](http://reactivex.io/RxJava/3.x/javadoc/io/reactivex/rxjava3/core/Completable.html): a flow without items but only a completion or error signal,\n  - [`io.reactivex.rxjava3.core.Maybe`](http://reactivex.io/RxJava/3.x/javadoc/io/reactivex/rxjava3/core/Maybe.html): a flow with no items, exactly one item or an error.\n\n### Some terminology\n\n#### Upstream, downstream\n\nThe dataflows in RxJava consist of a source, zero or more intermediate steps followed by a data consumer or combinator step (where the step is responsible to consume the dataflow by some means):\n\n```java\nsource.operator1().operator2().operator3().subscribe(consumer);\n\nsource.flatMap(value -> source.operator1().operator2().operator3());\n```\n\nHere, if we imagine ourselves on `operator2`, looking to the left towards the source is called the **upstream**. Looking to the right towards the subscriber/consumer is called the **downstream**. This is often more apparent when each element is written on a separate line:\n\n```java\nsource\n  .operator1()\n  .operator2()\n  .operator3()\n  .subscribe(consumer)\n```\n\n#### Objects in motion\n\nIn RxJava's documentation, **emission**, **emits**, **item**, **event**, **signal**, **data** and **message** are considered synonyms and represent the object traveling along the dataflow.\n\n#### Backpressure\n\nWhen the dataflow runs through asynchronous steps, each step may perform different things with different speed. To avoid overwhelming such steps, which usually would manifest itself as increased memory usage due to temporary buffering or the need for skipping/dropping data, so-called backpressure is applied, which is a form of flow control where the steps can express how many items are they ready to process. This allows constraining the memory usage of the dataflows in situations where there is generally no way for a step to know how many items the upstream will send to it.\n\nIn RxJava, the dedicated `Flowable` class is designated to support backpressure and `Observable` is dedicated to the non-backpressured operations (short sequences, GUI interactions, etc.). The other types, `Single`, `Maybe` and `Completable` don't support backpressure nor should they; there is always room to store one item temporarily.\n\n#### Assembly time\n\nThe preparation of dataflows by applying various intermediate operators happens in the so-called **assembly time**:\n\n```java\nFlowable<Integer> flow = Flowable.range(1, 5)\n.map(v -> v * v)\n.filter(v -> v % 3 == 0)\n;\n```\n\nAt this point, the data is not flowing yet and no side-effects are happening.\n\n#### Subscription time\n\nThis is a temporary state when `subscribe()` is called on a flow that establishes the chain of processing steps internally:\n\n```java\nflow.subscribe(System.out::println)\n````\n\nThis is when the **subscription side-effects** are triggered (see `doOnSubscribe`). Some sources block or start emitting items right away in this state.\n\n#### Runtime\n\nThis is the state when the flows are actively emitting items, errors or completion signals:\n\n```java\n\nObservable.create(emitter -> {\n     while (!emitter.isDisposed()) {\n         long time = System.currentTimeMillis();\n         emitter.onNext(time);\n         if (time % 2 != 0) {\n             emitter.onError(new IllegalStateException(\"Odd millisecond!\"));\n             break;\n         }\n     }\n})\n.subscribe(System.out::println, Throwable::printStackTrace);\n```\n\nPractically, this is when the body of the given example above executes.\n\n### Simple background computation\n\nOne of the common use cases for RxJava is to run some computation, network request on a background thread and show the results (or error) on the UI thread:\n\n```java\nimport io.reactivex.rxjava3.schedulers.Schedulers;\n\nFlowable.fromCallable(() -> {\n    Thread.sleep(1000); //  imitate expensive computation\n    return \"Done\";\n})\n  .subscribeOn(Schedulers.io())\n  .observeOn(Schedulers.single())\n  .subscribe(System.out::println, Throwable::printStackTrace);\n\nThread.sleep(2000); // <--- wait for the flow to finish\n```\n\nThis style of chaining methods is called a **fluent API** which resembles the **builder pattern**. However, RxJava's reactive types are immutable; each of the method calls returns a new `Flowable` with added behavior. To illustrate, the example can be rewritten as follows:\n\n```java\nFlowable<String> source = Flowable.fromCallable(() -> {\n    Thread.sleep(1000); //  imitate expensive computation\n    return \"Done\";\n});\n\nFlowable<String> runBackground = source.subscribeOn(Schedulers.io());\n\nFlowable<String> showForeground = runBackground.observeOn(Schedulers.single());\n\nshowForeground.subscribe(System.out::println, Throwable::printStackTrace);\n\nThread.sleep(2000);\n```\n\nTypically, you can move computations or blocking IO to some other thread via `subscribeOn`. Once the data is ready, you can make sure they get processed on the foreground or GUI thread via `observeOn`. \n\n### Schedulers\n\nRxJava operators don't work with `Thread`s or `ExecutorService`s directly but with so-called `Scheduler`s that abstract away sources of concurrency behind a uniform API. RxJava 3 features several standard schedulers accessible via `Schedulers` utility class. \n\n- `Schedulers.computation()`: Run computation intensive work on a fixed number of dedicated threads in the background. Most asynchronous operators use this as their default `Scheduler`.\n- `Schedulers.io()`: Run I/O-like or blocking operations on a dynamically changing set of threads.\n- `Schedulers.single()`: Run work on a single thread in a sequential and FIFO manner.\n- `Schedulers.trampoline()`: Run work in a sequential and FIFO manner in one of the participating threads, usually for testing purposes.\n\nThese are available on all JVM platforms but some specific platforms, such as Android, have their own typical `Scheduler`s defined: `AndroidSchedulers.mainThread()`, `SwingScheduler.instance()` or `JavaFXScheduler.platform()`.\n\nIn addition, there is an option to wrap an existing `Executor` (and its subtypes such as `ExecutorService`) into a `Scheduler` via `Schedulers.from(Executor)`. This can be used, for example, to have a larger but still fixed pool of threads (unlike `computation()` and `io()` respectively).\n\nThe `Thread.sleep(2000);` at the end is no accident. In RxJava the default `Scheduler`s run on daemon threads, which means once the Java main thread exits, they all get stopped and background computations may never happen. Sleeping for some time in this example situations lets you see the output of the flow on the console with time to spare.\n\n### Concurrency within a flow\n\nFlows in RxJava are sequential in nature split into processing stages that may run **concurrently** with each other:\n\n```java\nFlowable.range(1, 10)\n  .observeOn(Schedulers.computation())\n  .map(v -> v * v)\n  .blockingSubscribe(System.out::println);\n```\n\nThis example flow squares the numbers from 1 to 10 on the **computation** `Scheduler` and consumes the results on the \"main\" thread (more precisely, the caller thread of `blockingSubscribe`). However, the lambda `v -> v * v` doesn't run in parallel for this flow; it receives the values 1 to 10 on the same computation thread one after the other.\n\n### Parallel processing\n\nProcessing the numbers 1 to 10 in parallel is a bit more involved:\n\n```java\nFlowable.range(1, 10)\n  .flatMap(v ->\n      Flowable.just(v)\n        .subscribeOn(Schedulers.computation())\n        .map(w -> w * w)\n  )\n  .blockingSubscribe(System.out::println);\n```\n\nPractically, parallelism in RxJava means running independent flows and merging their results back into a single flow. The operator `flatMap` does this by first mapping each number from 1 to 10 into its own individual `Flowable`, runs them and merges the computed squares.\n\nNote, however, that `flatMap` doesn't guarantee any order and the items from the inner flows may end up interleaved. There are alternative operators:\n\n  - `concatMap` that maps and runs one inner flow at a time and\n  - `concatMapEager` which runs all inner flows \"at once\" but the output flow will be in the order those inner flows were created.\n\nAlternatively, the `Flowable.parallel()` operator and the `ParallelFlowable` type help achieve the same parallel processing pattern:\n\n```java\nFlowable.range(1, 10)\n  .parallel()\n  .runOn(Schedulers.computation())\n  .map(v -> v * v)\n  .sequential()\n  .blockingSubscribe(System.out::println);\n```\n\n### Dependent sub-flows\n\n`flatMap` is a powerful operator and helps in a lot of situations. For example, given a service that returns a `Flowable`, we'd like to call another service with values emitted by the first service:\n\n```java\nFlowable<Inventory> inventorySource = warehouse.getInventoryAsync();\n\ninventorySource\n    .flatMap(inventoryItem -> erp.getDemandAsync(inventoryItem.getId())\n            .map(demand -> \"Item \" + inventoryItem.getName() + \" has demand \" + demand))\n    .subscribe(System.out::println);\n```\n\n### Continuations\n\nSometimes, when an item has become available, one would like to perform some dependent computations on it. This is sometimes called **continuations** and, depending on what should happen and what types are involved, may involve various operators to accomplish.\n\n#### Dependent\n\nThe most typical scenario is to given a value, invoke another service, await and continue with its result:\n\n```java\nservice.apiCall()\n.flatMap(value -> service.anotherApiCall(value))\n.flatMap(next -> service.finalCall(next))\n```\n\nIt is often the case also that later sequences would require values from earlier mappings. This can be achieved by moving the outer `flatMap` into the inner parts of the previous `flatMap` for example:\n\n```java\nservice.apiCall()\n.flatMap(value ->\n    service.anotherApiCall(value)\n    .flatMap(next -> service.finalCallBoth(value, next))\n)\n```\n\nHere, the original `value` will be available inside the inner `flatMap`, courtesy of lambda variable capture.\n\n#### Non-dependent\n\nIn other scenarios, the result(s) of the first source/dataflow is irrelevant and one would like to continue with a quasi independent another source. Here, `flatMap` works as well:\n\n```java\nObservable continued = sourceObservable.flatMapSingle(ignored -> someSingleSource)\ncontinued.map(v -> v.toString())\n  .subscribe(System.out::println, Throwable::printStackTrace);\n```\n\nhowever, the continuation in this case stays `Observable` instead of the likely more appropriate `Single`. (This is understandable because\nfrom the perspective of `flatMapSingle`, `sourceObservable` is a multi-valued source and thus the mapping may result in multiple values as well).\n\nOften though there is a way that is somewhat more expressive (and also lower overhead) by using `Completable` as the mediator and its operator `andThen` to resume with something else:\n\n```java\nsourceObservable\n  .ignoreElements()           // returns Completable\n  .andThen(someSingleSource)\n  .map(v -> v.toString())\n```\n\nThe only dependency between the `sourceObservable` and the `someSingleSource` is that the former should complete normally in order for the latter to be consumed.\n\n#### Deferred-dependent\n\nSometimes, there is an implicit data dependency between the previous sequence and the new sequence that, for some reason, was not flowing through the \"regular channels\". One would be inclined to write such continuations as follows:\n\n```java\nAtomicInteger count = new AtomicInteger();\n\nObservable.range(1, 10)\n  .doOnNext(ignored -> count.incrementAndGet())\n  .ignoreElements()\n  .andThen(Single.just(count.get()))\n  .subscribe(System.out::println);\n```\n\nUnfortunately, this prints `0` because `Single.just(count.get())` is evaluated at **assembly time** when the dataflow hasn't even run yet. We need something that defers the evaluation of this `Single` source until **runtime** when the main source completes:\n\n```java\nAtomicInteger count = new AtomicInteger();\n\nObservable.range(1, 10)\n  .doOnNext(ignored -> count.incrementAndGet())\n  .ignoreElements()\n  .andThen(Single.defer(() -> Single.just(count.get())))\n  .subscribe(System.out::println);\n```\n\nor\n\n```java\nAtomicInteger count = new AtomicInteger();\n\nObservable.range(1, 10)\n  .doOnNext(ignored -> count.incrementAndGet())\n  .ignoreElements()\n  .andThen(Single.fromCallable(() -> count.get()))\n  .subscribe(System.out::println);\n```\n\n\n### Type conversions\n\nSometimes, a source or service returns a different type than the flow that is supposed to work with it. For example, in the inventory example above, `getDemandAsync` could return a `Single<DemandRecord>`. If the code example is left unchanged, this will result in a compile-time error (however, often with a misleading error message about lack of overload).\n\nIn such situations, there are usually two options to fix the transformation: 1) convert to the desired type or 2) find and use an overload of the specific operator supporting the different type.\n\n#### Converting to the desired type\n\nEach reactive base class features operators that can perform such conversions, including the protocol conversions, to match some other type. The following matrix shows the available conversion options:\n\n|          | Flowable | Observable | Single | Maybe | Completable |\n|----------|----------|------------|--------|-------|-------------|\n|**Flowable**  |          | `toObservable` | `first`, `firstOrError`, `single`, `singleOrError`, `last`, `lastOrError`<sup>1</sup> | `firstElement`, `singleElement`, `lastElement` | `ignoreElements` |\n|**Observable**| `toFlowable`<sup>2</sup> |  | `first`, `firstOrError`, `single`, `singleOrError`, `last`, `lastOrError`<sup>1</sup> | `firstElement`, `singleElement`, `lastElement` | `ignoreElements` |\n|**Single** | `toFlowable`<sup>3</sup> | `toObservable` |  | `toMaybe` | `ignoreElement` |\n|**Maybe** | `toFlowable`<sup>3</sup> | `toObservable` | `toSingle` |  | `ignoreElement` |\n|**Completable** | `toFlowable` | `toObservable` | `toSingle` | `toMaybe` |  |\n\n<sup>1</sup>: When turning a multi-valued source into a single-valued source, one should decide which of the many source values should be considered as the result.\n\n<sup>2</sup>: Turning an `Observable` into `Flowable` requires an additional decision: what to do with the potential unconstrained flow\nof the source `Observable`? There are several strategies available (such as buffering, dropping, keeping the latest) via the `BackpressureStrategy` parameter or via standard `Flowable` operators such as `onBackpressureBuffer`, `onBackpressureDrop`, `onBackpressureLatest` which also\nallow further customization of the backpressure behavior.\n\n<sup>3</sup>: When there is only (at most) one source item, there is no problem with backpressure as it can be always stored until the downstream is ready to consume.\n\n\n#### Using an overload with the desired type\n\nMany frequently used operator has overloads that can deal with the other types. These are usually named with the suffix of the target type:\n\n| Operator | Overloads |\n|----------|-----------|\n| `flatMap` | `flatMapSingle`, `flatMapMaybe`, `flatMapCompletable`, `flatMapIterable` |\n| `concatMap` | `concatMapSingle`, `concatMapMaybe`, `concatMapCompletable`, `concatMapIterable` |\n| `switchMap` | `switchMapSingle`, `switchMapMaybe`, `switchMapCompletable` |\n\nThe reason these operators have a suffix instead of simply having the same name with different signature is type erasure. Java doesn't consider signatures such as `operator(Function<T, Single<R>>)` and `operator(Function<T, Maybe<R>>)` different (unlike C#) and due to erasure, the two `operator`s would end up as duplicate methods with the same signature.\n\n### Operator naming conventions\n\nNaming in programming is one of the hardest things as names are expected to be not long, expressive, capturing and easily memorable. Unfortunately, the target language (and pre-existing conventions) may not give too much help in this regard (unusable keywords, type erasure, type ambiguities, etc.).\n\n#### Unusable keywords\n\nIn the original Rx.NET, the operator that emits a single item and then completes is called `Return(T)`. Since the Java convention is to have a lowercase letter start a method name, this would have been `return(T)` which is a keyword in Java and thus not available. Therefore, RxJava chose to name this operator `just(T)`. The same limitation exists for the operator `Switch`, which had to be named `switchOnNext`. Yet another example is `Catch` which was named `onErrorResumeNext`.\n\n#### Type erasure\n\nMany operators that expect the user to provide some function returning a reactive type can't be overloaded because the type erasure around a `Function<T, X>` turns such method signatures into duplicates. RxJava chose to name such operators by appending the type as suffix as well:\n\n```java\nFlowable<R> flatMap(Function<? super T, ? extends Publisher<? extends R>> mapper)\n\nFlowable<R> flatMapMaybe(Function<? super T, ? extends MaybeSource<? extends R>> mapper)\n```\n\n#### Type ambiguities\n\nEven though certain operators have no problems from type erasure, their signature may turn up being ambiguous, especially if one uses Java 8 and lambdas. For example, there are several overloads of `concatWith` taking the various other reactive base types as arguments (for providing convenience and performance benefits in the underlying implementation):\n\n```java\nFlowable<T> concatWith(Publisher<? extends T> other);\n\nFlowable<T> concatWith(SingleSource<? extends T> other);\n```\n\nBoth `Publisher` and `SingleSource` appear as functional interfaces (types with one abstract method) and may encourage users to try to provide a lambda expression:\n\n```java\nsomeSource.concatWith(s -> Single.just(2))\n.subscribe(System.out::println, Throwable::printStackTrace);\n```\n\nUnfortunately, this approach doesn't work and the example does not print `2` at all. In fact, since version 2.1.10, it doesn't\neven compile because at least 4 `concatWith` overloads exist and the compiler finds the code above ambiguous.\n\nThe user in such situations probably wanted to defer some computation until the `someSource` has completed, thus the correct\nunambiguous operator should have been `defer`:\n\n```java\nsomeSource.concatWith(Single.defer(() -> Single.just(2)))\n.subscribe(System.out::println, Throwable::printStackTrace);\n```\n\nSometimes, a suffix is added to avoid logical ambiguities that may compile but produce the wrong type in a flow:\n\n```java\nFlowable<T> merge(Publisher<? extends Publisher<? extends T>> sources);\n\nFlowable<T> mergeArray(Publisher<? extends T>... sources);\n```\n\nThis can get also ambiguous when functional interface types get involved as the type argument `T`.\n\n#### Error handling\n\nDataflows can fail, at which point the error is emitted to the consumer(s). Sometimes though, multiple sources may fail at which point there is a choice whether or not wait for all of them to complete or fail. To indicate this opportunity, many operator names are suffixed with the `DelayError` words (while others feature a `delayError` or `delayErrors` boolean flag in one of their overloads):\n\n```java\nFlowable<T> concat(Publisher<? extends Publisher<? extends T>> sources);\n\nFlowable<T> concatDelayError(Publisher<? extends Publisher<? extends T>> sources);\n```\n\nOf course, suffixes of various kinds may appear together:\n\n```java\nFlowable<T> concatArrayEagerDelayError(Publisher<? extends T>... sources);\n```\n\n#### Base class vs base type\n\nThe base classes can be considered heavy due to the sheer number of static and instance methods on them. RxJava 3's design was heavily influenced by the [Reactive Streams](https://github.com/reactive-streams/reactive-streams-jvm#reactive-streams) specification, therefore, the library features a class and an interface per each reactive type:\n\n| Type | Class | Interface | Consumer |\n|------|-------|-----------|----------|\n| 0..N backpressured | `Flowable` | `Publisher`<sup>1</sup> | `Subscriber` |\n| 0..N unbounded | `Observable` | `ObservableSource`<sup>2</sup> | `Observer` |\n| 1 element or error | `Single` | `SingleSource` | `SingleObserver` |\n| 0..1 element or error | `Maybe` | `MaybeSource` | `MaybeObserver` |\n| 0 element or error | `Completable` | `CompletableSource` | `CompletableObserver` |\n\n<sup>1</sup>The `org.reactivestreams.Publisher` is part of the external Reactive Streams library. It is the main type to interact with other reactive libraries through a standardized mechanism governed by the [Reactive Streams specification](https://github.com/reactive-streams/reactive-streams-jvm#specification).\n\n<sup>2</sup>The naming convention of the interface was to append `Source` to the semi-traditional class name. There is no `FlowableSource` since `Publisher` is provided by the Reactive Streams library (and subtyping it wouldn't have helped with interoperation either). These interfaces are, however, not standard in the sense of the Reactive Streams specification and are currently RxJava specific only.\n\n### R8 and ProGuard settings\n\nBy default, RxJava itself doesn't require any ProGuard/R8 settings and should work without problems. Unfortunately, the Reactive Streams dependency since version 1.0.3 has embedded Java 9 class files in its JAR that can cause warnings with the plain ProGuard:\n\n```\nWarning: org.reactivestreams.FlowAdapters$FlowPublisherFromReactive: can't find superclass or interface java.util.concurrent.Flow$Publisher\nWarning: org.reactivestreams.FlowAdapters$FlowToReactiveProcessor: can't find superclass or interface java.util.concurrent.Flow$Processor\nWarning: org.reactivestreams.FlowAdapters$FlowToReactiveSubscriber: can't find superclass or interface java.util.concurrent.Flow$Subscriber\nWarning: org.reactivestreams.FlowAdapters$FlowToReactiveSubscription: can't find superclass or interface java.util.concurrent.Flow$Subscription\nWarning: org.reactivestreams.FlowAdapters: can't find referenced class java.util.concurrent.Flow$Publisher\n```\n\nIt is recommended one sets up the following `-dontwarn` entry in the application's `proguard-ruleset` file:\n\n```\n-dontwarn java.util.concurrent.Flow*\n```\n\nFor R8, the RxJava jar includes the `META-INF/proguard/rxjava3.pro` with the same no-warning clause and should apply automatically.\n\n### Further reading\n\nFor further details, consult the [wiki](https://github.com/ReactiveX/RxJava/wiki).\n\n## Communication\n\n- Google Group: [RxJava](http://groups.google.com/d/forum/rxjava)\n- Twitter: [@RxJava](http://twitter.com/RxJava)\n- [GitHub Issues](https://github.com/ReactiveX/RxJava/issues)\n- StackOverflow: [rx-java](http://stackoverflow.com/questions/tagged/rx-java) and [rx-java2](http://stackoverflow.com/questions/tagged/rx-java2)\n- [Gitter.im](https://gitter.im/ReactiveX/RxJava)\n\n## Versioning\n\nVersion 3.x is in development. Bugfixes will be applied to both 2.x and 3.x branches, but new features will only be added to 3.x.\n\nMinor 3.x increments (such as 3.1, 3.2, etc) will occur when non-trivial new functionality is added or significant enhancements or bug fixes occur that may have behavioral changes that may affect some edge cases (such as dependence on behavior resulting from a bug). An example of an enhancement that would classify as this is adding reactive pull backpressure support to an operator that previously did not support it. This should be backwards compatible but does behave differently.\n\nPatch 3.x.y increments (such as 3.0.0 -> 3.0.1, 3.3.1 -> 3.3.2, etc) will occur for bug fixes and trivial functionality (like adding a method overload). New functionality marked with an [`@Beta`][beta source link] or [`@Experimental`][experimental source link] annotation can also be added in the patch releases to allow rapid exploration and iteration of unstable new functionality. \n\n#### @Beta\n\nAPIs marked with the [`@Beta`][beta source link] annotation at the class or method level are subject to change. They can be modified in any way, or even removed, at any time. If your code is a library itself (i.e. it is used on the CLASSPATH of users outside your control), you should not use beta APIs, unless you repackage them (e.g. using ProGuard, shading, etc).\n\n#### @Experimental\n\nAPIs marked with the [`@Experimental`][experimental source link] annotation at the class or method level will almost certainly change. They can be modified in any way, or even removed, at any time. You should not use or rely on them in any production code. They are purely to allow broad testing and feedback. \n\n#### @Deprecated\n\nAPIs marked with the `@Deprecated` annotation at the class or method level will remain supported until the next major release, but it is recommended to stop using them. \n\n#### io.reactivex.rxjava3.internal.*\n\nAll code inside the `io.reactivex.rxjava3.internal.*` packages are considered private API and should not be relied upon at all. It can change at any time. \n\n## Full Documentation\n\n- [Wiki](https://github.com/ReactiveX/RxJava/wiki)\n- [Javadoc](http://reactivex.io/RxJava/3.x/javadoc/)\n- [Latest snaphot Javadoc](http://reactivex.io/RxJava/3.x/javadoc/snapshot/)\n- Javadoc of a specific [release version](https://github.com/ReactiveX/RxJava/tags): `http://reactivex.io/RxJava/3.x/javadoc/3.x.y/`\n\n## Binaries\n\nBinaries and dependency information for Maven, Ivy, Gradle and others can be found at [http://search.maven.org](http://search.maven.org/#search%7Cga%7C1%7Cio.reactivex.rxjava3).\n\nExample for Gradle:\n\n```groovy\nimplementation 'io.reactivex.rxjava3:rxjava:x.y.z'\n```\n\nand for Maven:\n\n```xml\n<dependency>\n    <groupId>io.reactivex.rxjava3</groupId>\n    <artifactId>rxjava</artifactId>\n    <version>x.y.z</version>\n</dependency>\n```\nand for Ivy:\n\n```xml\n<dependency org=\"io.reactivex.rxjava3\" name=\"rxjava\" rev=\"x.y.z\" />\n```\n\n### Snapshots\n\nSnapshots after May 1st, 2021 are available via https://oss.sonatype.org/content/repositories/snapshots/io/reactivex/rxjava3/rxjava/\n\n```groovy\nrepositories {\n  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }\n}\n\ndependencies {\n  implementation 'io.reactivex.rxjava3:rxjava:3.0.0-SNAPSHOT'\n}\n```\n\nJavaDoc snapshots are available at http://reactivex.io/RxJava/3.x/javadoc/snapshot\n\n## Build\n\nTo build:\n\n```\n$ git clone git@github.com:ReactiveX/RxJava.git\n$ cd RxJava/\n$ ./gradlew build\n```\n\nFurther details on building can be found on the [Getting Started](https://github.com/ReactiveX/RxJava/wiki/Getting-Started) page of the wiki.\n\n## Bugs and Feedback\n\nFor bugs, questions and discussions please use the [Github Issues](https://github.com/ReactiveX/RxJava/issues).\n\n \n## LICENSE\n\n    Copyright (c) 2016-present, RxJava Contributors.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n[beta source link]: https://github.com/ReactiveX/RxJava/blob/3.x/src/main/java/io/reactivex/rxjava3/annotations/Beta.java\n[experimental source link]: https://github.com/ReactiveX/RxJava/blob/3.x/src/main/java/io/reactivex/rxjava3/annotations/Experimental.java\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.564453125,
          "content": "# Security Policy\n\nIf you have discovered a security vulnerability in this project, please report it privately. **Do not disclose it as a public issue.** This gives us time to work with you to fix the issue before public exposure, reducing the chance that the exploit will be used before a patch is released.\n\nPlease disclose it at [security advisory](https://github.com/ReactiveX/RxJava/security/advisories/new).\n\nThis project is maintained by a team of volunteers on a reasonable-effort basis. As such, please give us at least 90 days to work on a fix before public exposure.\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 5.9130859375,
          "content": "plugins {\n    id(\"java-library\")\n    id(\"checkstyle\")\n    id(\"eclipse\")\n    id(\"jacoco\")\n    id(\"maven-publish\")\n    id(\"ru.vyarus.animalsniffer\") version \"1.7.2\"\n    id(\"me.champeau.gradle.jmh\") version \"0.5.3\"\n    id(\"com.github.hierynomus.license\") version \"0.16.1\"\n    id(\"biz.aQute.bnd.builder\") version \"6.4.0\"\n    id(\"com.vanniktech.maven.publish\") version \"0.19.0\"\n    id(\"org.beryx.jar\") version \"1.2.0\"\n}\n\next {\n    reactiveStreamsVersion = \"1.0.4\"\n    junitVersion = \"4.13.2\"\n    testNgVersion = \"7.5\"\n    mockitoVersion = \"4.11.0\"\n    jmhLibVersion = \"1.21\"\n    guavaVersion = \"33.4.0-jre\"\n}\n\ndef releaseTag = System.getenv(\"BUILD_TAG\")\nif (releaseTag != null && !releaseTag.isEmpty()) {\n    if (releaseTag.startsWith(\"v\")) {\n        releaseTag = releaseTag.substring(1)\n    }\n    project.version = releaseTag\n\n    logger.lifecycle(\"Releasing with version: \" + project.version)\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    signature \"org.codehaus.mojo.signature:java18:1.0@signature\"\n\n    api \"org.reactivestreams:reactive-streams:$reactiveStreamsVersion\"\n    jmh \"org.reactivestreams:reactive-streams:$reactiveStreamsVersion\"\n\n    testImplementation \"junit:junit:$junitVersion\"\n    testImplementation \"org.mockito:mockito-core:$mockitoVersion\"\n\n    testImplementation \"org.reactivestreams:reactive-streams-tck:$reactiveStreamsVersion\"\n    testImplementation \"org.testng:testng:$testNgVersion\"\n    testImplementation \"com.google.guava:guava:$guavaVersion\"\n}\n\njava {\n    sourceCompatibility = JavaVersion.VERSION_1_8\n    targetCompatibility = JavaVersion.VERSION_1_8\n}\n\ntasks.withType(JavaCompile) {\n    options.compilerArgs << \"-parameters\"\n}\n\napply from: file(\"gradle/javadoc_cleanup.gradle\")\n\njavadoc {\n    exclude \"**/internal/**\"\n    exclude \"**/test/**\"\n    exclude \"**/perf/**\"\n    exclude \"**/jmh/**\"\n    options {\n        windowTitle = \"RxJava Javadoc ${project.version}\"\n    }\n    // Clear the following options to make the docs consistent with the old format\n    options.addStringOption(\"top\").value = \"\"\n    options.addStringOption(\"doctitle\").value = \"\"\n    options.addStringOption(\"header\").value = \"\"\n    options.stylesheetFile = project.file(\"gradle/stylesheet.css\")\n\n    options.links(\n            \"https://docs.oracle.com/javase/8/docs/api/\",\n            \"https://reactivex.io/RxJava/org.reactivestreams.javadoc/${reactiveStreamsVersion}/\"\n    )\n\n    finalizedBy javadocCleanup\n}\n\nanimalsniffer {\n    annotation = \"io.reactivex.rxjava3.internal.util.SuppressAnimalSniffer\"\n}\n\njar {\n    from('.') {\n        include 'LICENSE'\n        include 'COPYRIGHT'\n        into('META-INF/')\n    }\n\n    // Cover for bnd still not supporting MR Jars: https://github.com/bndtools/bnd/issues/2227\n    bnd('-fixupmessages': '^Classes found in the wrong directory: \\\\\\\\{META-INF/versions/9/module-info\\\\\\\\.class=module-info}$')\n    bnd(\n            \"Bundle-Name\": \"rxjava\",\n            \"Bundle-Vendor\": \"RxJava Contributors\",\n            \"Bundle-Description\": \"Reactive Extensions for the JVM - a library for composing asynchronous and event-based programs using observable sequences for the Java VM.\",\n            \"Import-Package\": \"!org.junit,!junit.framework,!org.mockito.*,!org.testng.*,*\",\n            \"Bundle-DocURL\": \"https://github.com/ReactiveX/RxJava\",\n            \"Eclipse-ExtensibleAPI\": \"true\",\n            \"Export-Package\": \"!io.reactivex.rxjava3.internal.*, io.reactivex.rxjava3.*\",\n            \"Bundle-SymbolicName\": \"io.reactivex.rxjava3.rxjava\",\n            \"Multi-Release\": \"true\"\n    )\n\n    moduleInfoPath = 'src/main/module/module-info.java'\n}\n\nlicense {\n    header project.file(\"config/license/HEADER\")\n    ext.year = Calendar.getInstance().get(Calendar.YEAR)\n    skipExistingHeaders true\n    ignoreFailures true\n    excludes([\"**/*.md\", \"**/*.txt\"])\n}\n\njmh {\n    jmhVersion = jmhLibVersion\n    humanOutputFile = null\n    includeTests = false\n    jvmArgs = [\"-Djmh.ignoreLock=true\"]\n    jvmArgsAppend = [\"-Djmh.separateClasspathJAR=true\"]\n\n    if (project.hasProperty(\"jmh\")) {\n        include = [\".*\" + project.jmh + \".*\"]\n        logger.info(\"JMH: {}\", include)\n    }\n}\n\ntest {\n    maxHeapSize = \"1200m\"\n}\n\ntask testNG(type: Test) {\n    useTestNG()\n}\n\ncheck.dependsOn testNG\n\ntasks.withType(Test) {\n    testLogging {\n        events = [\"skipped\", \"failed\"]\n        exceptionFormat = \"full\"\n\n        debug.events = [\"skipped\", \"failed\"]\n        debug.exceptionFormat = \"full\"\n\n        info.events = [\"failed\", \"skipped\"]\n        info.exceptionFormat = \"full\"\n\n        warn.events = [\"failed\", \"skipped\"]\n        warn.exceptionFormat = \"full\"\n    }\n\n    if (System.getenv(\"CI\") == null) {\n        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1\n    }\n}\n\njacocoTestReport {\n    dependsOn test\n    dependsOn testNG\n\n    reports {\n        xml.enabled = true\n        html.enabled = true\n    }\n}\n\ncheck.dependsOn jacocoTestReport\n\ncheckstyle {\n    configFile = project.file(\"config/checkstyle/checkstyle.xml\")\n    configProperties = [\n            \"checkstyle.suppressions.file\": project.file(\"config/checkstyle/suppressions.xml\"),\n            \"checkstyle.header.file\"      : project.file(\"config/license/HEADER_JAVA\")\n    ]\n}\n\nif (project.hasProperty(\"releaseMode\")) {\n    logger.lifecycle(\"ReleaseMode: {}\", project.releaseMode)\n\n  /*\n  if (\"branch\" == project.releaseMode) {\n\n    if (version.endsWith(\"-SNAPSHOT\")) {\n      publishing {\n        repositories {\n          maven {\n             url = \"https://s01.oss.sonatype.org/content/repositories/snapshots/\"\n          }\n        }\n      }\n\n      mavenPublish {\n        nexus {\n          stagingProfile = \"io.reactivex\"\n        }\n      }\n    }\n  }\n  */\n\n  if (\"full\" == project.releaseMode) {\n    signing {\n      if (project.hasProperty(\"SIGNING_PRIVATE_KEY\") && project.hasProperty(\"SIGNING_PASSWORD\")) {\n         useInMemoryPgpKeys(project.getProperty(\"SIGNING_PRIVATE_KEY\"), project.getProperty(\"SIGNING_PASSWORD\"))\n      }\n    }\n    /*\n    mavenPublish {\n      nexus {\n        stagingProfile = \"io.reactivex\"\n      }\n    }\n    */\n  }\n}\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.17578125,
          "content": "coverage:\n  status:\n    project: \n      default:\n        target: 95%\n        threshold: 1%\n\n    patch: \n      default:\n        target: 95%\n        threshold: 1%\n  \n    changes: no\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.8408203125,
          "content": "group=io.reactivex.rxjava3\nversion=3.0.0-SNAPSHOT\ndescription=RxJava: Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM.\n\nPOM_ARTIFACT_ID=rxjava\nPOM_NAME=RxJava\nPOM_PACKAGING=jar\n\nPOM_DESCRIPTION=Reactive Extensions for Java\nPOM_INCEPTION_YEAR=2013\n\nPOM_URL=https://github.com/ReactiveX/RxJava\nPOM_SCM_URL=https://github.com/ReactiveX/RxJava\nPOM_SCM_CONNECTION=scm:git:git://github.com/ReactiveX/RxJava.git\nPOM_SCM_DEV_CONNECTION=scm:git:ssh://git@github.com/ReactiveX/RxJava.git\n\nPOM_LICENCE_NAME=The Apache Software License, Version 2.0\nPOM_LICENCE_URL=https://www.apache.org/licenses/LICENSE-2.0.txt\nPOM_LICENCE_DIST=repo\n\nPOM_DEVELOPER_ID=akarnokd\nPOM_DEVELOPER_NAME=David Karnok\nPOM_DEVELOPER_URL=https://github.com/akarnokd/\nPOM_DEVELOPER_EMAIL=akarnokd@gmail.com\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.2978515625,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\nAPP_HOME=$( cd \"${APP_HOME:-./}\" && pwd -P ) || exit\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC3045 \n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC3045 \n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n# Collect all arguments for the java command;\n#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of\n#     shell script including quotes and variable substitutions, so put them in\n#     double quotes to make sure that they get re-expanded; and\n#   * put everything else in single quotes, so that it's not re-expanded.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.7109375,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "pmd.xml",
          "type": "blob",
          "size": 14.7509765625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ruleset xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         name=\"pmd\"\n         xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd\">\n   <description>RxJava PMD ruleset</description>\n   <rule ref=\"rulesets/java/design.xml/AbstractClassWithoutAbstractMethod\"/>\n   <rule ref=\"rulesets/java/design.xml/AbstractClassWithoutAnyMethod\"/>\n   <rule ref=\"rulesets/java/design.xml/AccessorClassGeneration\"/>\n   <rule ref=\"rulesets/java/optimizations.xml/AddEmptyString\"/>\n   <rule ref=\"rulesets/java/strings.xml/AppendCharacterWithChar\"/>\n   <rule ref=\"rulesets/java/design.xml/AssignmentToNonFinalStatic\"/>\n   <rule ref=\"rulesets/java/controversial.xml/AvoidAccessibilityAlteration\"/>\n   <rule ref=\"rulesets/java/optimizations.xml/AvoidArrayLoops\"/>\n   <rule ref=\"rulesets/java/migrating.xml/AvoidAssertAsIdentifier\"/>\n   <rule ref=\"rulesets/java/basic.xml/AvoidBranchingStatementAsLastInLoop\"/>\n   <rule ref=\"rulesets/java/finalizers.xml/AvoidCallingFinalize\"/>\n   <rule ref=\"rulesets/java/strictexception.xml/AvoidCatchingGenericException\"/>\n   <rule ref=\"rulesets/java/strictexception.xml/AvoidCatchingNPE\"/>\n   <rule ref=\"rulesets/java/design.xml/AvoidConstantsInterface\"/>\n   <rule ref=\"rulesets/java/basic.xml/AvoidDecimalLiteralsInBigDecimalConstructor\"/>\n   <rule ref=\"rulesets/java/naming.xml/AvoidDollarSigns\"/>\n   <rule ref=\"rulesets/java/migrating.xml/AvoidEnumAsIdentifier\"/>\n   <rule ref=\"rulesets/java/controversial.xml/AvoidFinalLocalVariable\"/>\n   <rule ref=\"rulesets/java/design.xml/AvoidInstanceofChecksInCatchClause\"/>\n   <rule ref=\"rulesets/java/strictexception.xml/AvoidLosingExceptionInformation\"/>\n   <rule ref=\"rulesets/java/basic.xml/AvoidMultipleUnaryOperators\"/>\n   <rule ref=\"rulesets/java/controversial.xml/AvoidPrefixingMethodParameters\"/>\n   <rule ref=\"rulesets/java/logging-java.xml/AvoidPrintStackTrace\"/>\n   <rule ref=\"rulesets/java/design.xml/AvoidProtectedFieldInFinalClass\"/>\n   <rule ref=\"rulesets/java/design.xml/AvoidProtectedMethodInFinalClassNotExtending\"/>\n   <rule ref=\"rulesets/java/strictexception.xml/AvoidRethrowingException\"/>\n   <rule ref=\"rulesets/java/strings.xml/AvoidStringBufferField\"/>\n   <rule ref=\"rulesets/java/design.xml/AvoidSynchronizedAtMethodLevel\"/>\n   <rule ref=\"rulesets/java/basic.xml/AvoidThreadGroup\"/>\n   <rule ref=\"rulesets/java/strictexception.xml/AvoidThrowingNewInstanceOfSameException\"/>\n   <rule ref=\"rulesets/java/strictexception.xml/AvoidThrowingRawExceptionTypes\"/>\n   <rule ref=\"rulesets/java/basic.xml/AvoidUsingHardCodedIP\"/>\n   <rule ref=\"rulesets/java/controversial.xml/AvoidUsingNativeCode\"/>\n   <rule ref=\"rulesets/java/basic.xml/AvoidUsingOctalValues\"/>\n   <rule ref=\"rulesets/java/controversial.xml/AvoidUsingShortType\"/>\n   <rule ref=\"rulesets/java/design.xml/BadComparison\"/>\n   <rule ref=\"rulesets/java/basic.xml/BigIntegerInstantiation\"/>\n   <rule ref=\"rulesets/java/naming.xml/BooleanGetMethodName\"/>\n   <rule ref=\"rulesets/java/basic.xml/BooleanInstantiation\"/>\n   <rule ref=\"rulesets/java/basic.xml/BrokenNullCheck\"/>\n   <rule ref=\"rulesets/java/migrating.xml/ByteInstantiation\"/>\n   <rule ref=\"rulesets/java/android.xml/CallSuperFirst\"/>\n   <rule ref=\"rulesets/java/android.xml/CallSuperLast\"/>\n   <rule ref=\"rulesets/java/basic.xml/CheckResultSet\"/>\n   <rule ref=\"rulesets/java/basic.xml/CheckSkipResult\"/>\n   <rule ref=\"rulesets/java/basic.xml/ClassCastExceptionWithToArray\"/>\n   <rule ref=\"rulesets/java/naming.xml/ClassNamingConventions\"/>\n   <rule ref=\"rulesets/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal\"/>\n   <rule ref=\"rulesets/java/clone.xml/CloneMethodMustImplementCloneable\"/>\n   <rule ref=\"rulesets/java/clone.xml/CloneThrowsCloneNotSupportedException\"/>\n   <rule ref=\"rulesets/java/design.xml/CloseResource\"/>\n   <rule ref=\"rulesets/java/comments.xml/CommentContent\"/>\n   <rule ref=\"rulesets/java/strings.xml/ConsecutiveAppendsShouldReuse\"/>\n   <rule ref=\"rulesets/java/strings.xml/ConsecutiveLiteralAppends\"/>\n   <rule ref=\"rulesets/java/design.xml/ConstructorCallsOverridableMethod\"/>\n   <rule ref=\"rulesets/java/coupling.xml/CouplingBetweenObjects\"/>\n   <rule ref=\"rulesets/java/design.xml/DefaultLabelNotLastInSwitchStmt\"/>\n   <rule ref=\"rulesets/java/controversial.xml/DoNotCallGarbageCollectionExplicitly\"/>\n   <rule ref=\"rulesets/java/j2ee.xml/DoNotCallSystemExit\"/>\n   <rule ref=\"rulesets/java/strictexception.xml/DoNotExtendJavaLangError\"/>\n   <rule ref=\"rulesets/java/android.xml/DoNotHardCodeSDCard\"/>\n   <rule ref=\"rulesets/java/strictexception.xml/DoNotThrowExceptionInFinally\"/>\n   <rule ref=\"rulesets/java/basic.xml/DontCallThreadRun\"/>\n   <rule ref=\"rulesets/java/imports.xml/DontImportJavaLang\"/>\n   <rule ref=\"rulesets/java/basic.xml/DontUseFloatTypeForLoopIndices\"/>\n   <rule ref=\"rulesets/java/basic.xml/DoubleCheckedLocking\"/>\n   <rule ref=\"rulesets/java/imports.xml/DuplicateImports\"/>\n   <rule ref=\"rulesets/java/finalizers.xml/EmptyFinalizer\"/>\n   <rule ref=\"rulesets/java/empty.xml/EmptyFinallyBlock\"/>\n   <rule ref=\"rulesets/java/empty.xml/EmptyInitializer\"/>\n   <rule ref=\"rulesets/java/empty.xml/EmptyStatementBlock\"/>\n   <rule ref=\"rulesets/java/empty.xml/EmptyStatementNotInLoop\"/>\n   <rule ref=\"rulesets/java/empty.xml/EmptyStaticInitializer\"/>\n   <rule ref=\"rulesets/java/empty.xml/EmptySwitchStatements\"/>\n   <rule ref=\"rulesets/java/empty.xml/EmptySynchronizedBlock\"/>\n   <rule ref=\"rulesets/java/empty.xml/EmptyTryBlock\"/>\n   <rule ref=\"rulesets/java/empty.xml/EmptyWhileStmt\"/>\n   <rule ref=\"rulesets/java/design.xml/EqualsNull\"/>\n   <rule ref=\"rulesets/java/strictexception.xml/ExceptionAsFlowControl\"/>\n   <rule ref=\"rulesets/java/coupling.xml/ExcessiveImports\"/>\n   <rule ref=\"rulesets/java/basic.xml/ExtendsObject\"/>\n   <rule ref=\"rulesets/java/design.xml/FieldDeclarationsShouldBeAtStartOfClass\"/>\n   <rule ref=\"rulesets/java/design.xml/FinalFieldCouldBeStatic\"/>\n   <rule ref=\"rulesets/java/finalizers.xml/FinalizeDoesNotCallSuperFinalize\"/>\n   <rule ref=\"rulesets/java/finalizers.xml/FinalizeOnlyCallsSuperFinalize\"/>\n   <rule ref=\"rulesets/java/finalizers.xml/FinalizeOverloaded\"/>\n   <rule ref=\"rulesets/java/finalizers.xml/FinalizeShouldBeProtected\"/>\n   <rule ref=\"rulesets/java/basic.xml/ForLoopShouldBeWhileLoop\"/>\n   <rule ref=\"rulesets/java/braces.xml/ForLoopsMustUseBraces\"/>\n   <rule ref=\"rulesets/java/logging-jakarta-commons.xml/GuardDebugLogging\"/>\n   <rule ref=\"rulesets/java/logging-jakarta-commons.xml/GuardLogStatement\"/>\n   <rule ref=\"rulesets/java/logging-java.xml/GuardLogStatementJavaUtil\"/>\n   <rule ref=\"rulesets/java/design.xml/IdempotentOperations\"/>\n   <rule ref=\"rulesets/java/braces.xml/IfElseStmtsMustUseBraces\"/>\n   <rule ref=\"rulesets/java/braces.xml/IfStmtsMustUseBraces\"/>\n   <rule ref=\"rulesets/java/design.xml/ImmutableField\"/>\n   <rule ref=\"rulesets/java/imports.xml/ImportFromSamePackage\"/>\n   <rule ref=\"rulesets/java/strings.xml/InefficientEmptyStringCheck\"/>\n   <rule ref=\"rulesets/java/strings.xml/InefficientStringBuffering\"/>\n   <rule ref=\"rulesets/java/design.xml/InstantiationToGetClass\"/>\n   <rule ref=\"rulesets/java/strings.xml/InsufficientStringBufferDeclaration\"/>\n   <rule ref=\"rulesets/java/migrating.xml/IntegerInstantiation\"/>\n   <rule ref=\"rulesets/java/migrating.xml/JUnit4SuitesShouldUseSuiteAnnotation\"/>\n   <rule ref=\"rulesets/java/migrating.xml/JUnit4TestShouldUseAfterAnnotation\"/>\n   <rule ref=\"rulesets/java/migrating.xml/JUnit4TestShouldUseBeforeAnnotation\"/>\n   <rule ref=\"rulesets/java/junit.xml/JUnitAssertionsShouldIncludeMessage\"/>\n   <rule ref=\"rulesets/java/junit.xml/JUnitSpelling\"/>\n   <rule ref=\"rulesets/java/junit.xml/JUnitStaticSuite\"/>\n   <rule ref=\"rulesets/java/junit.xml/JUnitTestContainsTooManyAsserts\"/>\n   <rule ref=\"rulesets/java/junit.xml/JUnitTestsShouldIncludeAssert\"/>\n   <rule ref=\"rulesets/java/migrating.xml/JUnitUseExpected\"/>\n   <rule ref=\"rulesets/java/basic.xml/JumbledIncrementer\"/>\n   <rule ref=\"rulesets/java/j2ee.xml/LocalHomeNamingConvention\"/>\n   <rule ref=\"rulesets/java/j2ee.xml/LocalInterfaceSessionNamingConvention\"/>\n   <rule ref=\"rulesets/java/logging-java.xml/LoggerIsNotStaticFinal\"/>\n   <rule ref=\"rulesets/java/design.xml/LogicInversion\"/>\n   <rule ref=\"rulesets/java/migrating.xml/LongInstantiation\"/>\n   <rule ref=\"rulesets/java/coupling.xml/LooseCoupling\"/>\n   <rule ref=\"rulesets/java/j2ee.xml/MDBAndSessionBeanNamingConvention\"/>\n   <rule ref=\"rulesets/java/naming.xml/MethodNamingConventions\"/>\n   <rule ref=\"rulesets/java/sunsecure.xml/MethodReturnsInternalArray\"/>\n   <rule ref=\"rulesets/java/naming.xml/MethodWithSameNameAsEnclosingClass\"/>\n   <rule ref=\"rulesets/java/naming.xml/MisleadingVariableName\"/>\n   <rule ref=\"rulesets/java/basic.xml/MisplacedNullCheck\"/>\n   <rule ref=\"rulesets/java/design.xml/MissingBreakInSwitch\"/>\n   <rule ref=\"rulesets/java/javabeans.xml/MissingSerialVersionUID\"/>\n   <rule ref=\"rulesets/java/design.xml/MissingStaticMethodInNonInstantiatableClass\"/>\n   <rule ref=\"rulesets/java/logging-java.xml/MoreThanOneLogger\"/>\n   <rule ref=\"rulesets/java/naming.xml/NoPackage\"/>\n   <rule ref=\"rulesets/java/design.xml/NonCaseLabelInSwitchStatement\"/>\n   <rule ref=\"rulesets/java/design.xml/NonStaticInitializer\"/>\n   <rule ref=\"rulesets/java/design.xml/NonThreadSafeSingleton\"/>\n   <rule ref=\"rulesets/java/controversial.xml/OneDeclarationPerLine\"/>\n   <rule ref=\"rulesets/java/design.xml/OptimizableToArrayCall\"/>\n   <rule ref=\"rulesets/java/basic.xml/OverrideBothEqualsAndHashcode\"/>\n   <rule ref=\"rulesets/java/naming.xml/PackageCase\"/>\n   <rule ref=\"rulesets/java/design.xml/PositionLiteralsFirstInCaseInsensitiveComparisons\"/>\n   <rule ref=\"rulesets/java/design.xml/PositionLiteralsFirstInComparisons\"/>\n   <rule ref=\"rulesets/java/optimizations.xml/PrematureDeclaration\"/>\n   <rule ref=\"rulesets/java/design.xml/PreserveStackTrace\"/>\n   <rule ref=\"rulesets/java/clone.xml/ProperCloneImplementation\"/>\n   <rule ref=\"rulesets/java/logging-jakarta-commons.xml/ProperLogger\"/>\n   <rule ref=\"rulesets/java/optimizations.xml/RedundantFieldInitializer\"/>\n   <rule ref=\"rulesets/java/j2ee.xml/RemoteInterfaceNamingConvention\"/>\n   <rule ref=\"rulesets/java/j2ee.xml/RemoteSessionInterfaceNamingConvention\"/>\n   <rule ref=\"rulesets/java/migrating.xml/ReplaceEnumerationWithIterator\"/>\n   <rule ref=\"rulesets/java/migrating.xml/ReplaceHashtableWithMap\"/>\n   <rule ref=\"rulesets/java/migrating.xml/ReplaceVectorWithList\"/>\n   <rule ref=\"rulesets/java/design.xml/ReturnEmptyArrayRatherThanNull\"/>\n   <rule ref=\"rulesets/java/basic.xml/ReturnFromFinallyBlock\"/>\n   <rule ref=\"rulesets/java/migrating.xml/ShortInstantiation\"/>\n   <rule ref=\"rulesets/java/strictexception.xml/SignatureDeclareThrowsException\"/>\n   <rule ref=\"rulesets/java/design.xml/SimpleDateFormatNeedsLocale\"/>\n   <rule ref=\"rulesets/java/junit.xml/SimplifyBooleanAssertion\"/>\n   <rule ref=\"rulesets/java/design.xml/SimplifyBooleanExpressions\"/>\n   <rule ref=\"rulesets/java/design.xml/SimplifyBooleanReturns\"/>\n   <rule ref=\"rulesets/java/design.xml/SimplifyConditional\"/>\n   <rule ref=\"rulesets/java/optimizations.xml/SimplifyStartsWith\"/>\n   <rule ref=\"rulesets/java/design.xml/SingularField\"/>\n   <rule ref=\"rulesets/java/j2ee.xml/StaticEJBFieldShouldBeFinal\"/>\n   <rule ref=\"rulesets/java/strings.xml/StringBufferInstantiationWithChar\"/>\n   <rule ref=\"rulesets/java/strings.xml/StringInstantiation\"/>\n   <rule ref=\"rulesets/java/strings.xml/StringToString\"/>\n   <rule ref=\"rulesets/java/naming.xml/SuspiciousConstantFieldName\"/>\n   <rule ref=\"rulesets/java/naming.xml/SuspiciousEqualsMethodName\"/>\n   <rule ref=\"rulesets/java/naming.xml/SuspiciousHashcodeMethodName\"/>\n   <rule ref=\"rulesets/java/controversial.xml/SuspiciousOctalEscape\"/>\n   <rule ref=\"rulesets/java/design.xml/SwitchDensity\"/>\n   <rule ref=\"rulesets/java/design.xml/SwitchStmtsShouldHaveDefault\"/>\n   <rule ref=\"rulesets/java/logging-java.xml/SystemPrintln\"/>\n   <rule ref=\"rulesets/java/junit.xml/TestClassWithoutTestCases\"/>\n   <rule ref=\"rulesets/java/design.xml/TooFewBranchesForASwitchStatement\"/>\n   <rule ref=\"rulesets/java/imports.xml/TooManyStaticImports\"/>\n   <rule ref=\"rulesets/java/basic.xml/UnconditionalIfStatement\"/>\n   <rule ref=\"rulesets/java/junit.xml/UnnecessaryBooleanAssertion\"/>\n   <rule ref=\"rulesets/java/strings.xml/UnnecessaryCaseChange\"/>\n   <rule ref=\"rulesets/java/controversial.xml/UnnecessaryConstructor\"/>\n   <rule ref=\"rulesets/java/unnecessary.xml/UnnecessaryConversionTemporary\"/>\n   <rule ref=\"rulesets/java/unnecessary.xml/UnnecessaryFinalModifier\"/>\n   <rule ref=\"rulesets/java/imports.xml/UnnecessaryFullyQualifiedName\"/>\n   <rule ref=\"rulesets/java/design.xml/UnnecessaryLocalBeforeReturn\"/>\n   <rule ref=\"rulesets/java/controversial.xml/UnnecessaryParentheses\"/>\n   <rule ref=\"rulesets/java/unnecessary.xml/UnnecessaryReturn\"/>\n   <rule ref=\"rulesets/java/optimizations.xml/UnnecessaryWrapperObjectCreation\"/>\n   <rule ref=\"rulesets/java/design.xml/UnsynchronizedStaticDateFormatter\"/>\n   <rule ref=\"rulesets/java/unusedcode.xml/UnusedFormalParameter\"/>\n   <rule ref=\"rulesets/java/imports.xml/UnusedImports\"/>\n   <rule ref=\"rulesets/java/unusedcode.xml/UnusedLocalVariable\"/>\n   <rule ref=\"rulesets/java/unusedcode.xml/UnusedModifier\"/>\n   <rule ref=\"rulesets/java/unnecessary.xml/UnusedNullCheckInEquals\"/>\n   <rule ref=\"rulesets/java/unusedcode.xml/UnusedPrivateField\"/>\n   <rule ref=\"rulesets/java/unusedcode.xml/UnusedPrivateMethod\"/>\n   <rule ref=\"rulesets/java/optimizations.xml/UseArrayListInsteadOfVector\"/>\n   <rule ref=\"rulesets/java/optimizations.xml/UseArraysAsList\"/>\n   <rule ref=\"rulesets/java/junit.xml/UseAssertEqualsInsteadOfAssertTrue\"/>\n   <rule ref=\"rulesets/java/junit.xml/UseAssertNullInsteadOfAssertTrue\"/>\n   <rule ref=\"rulesets/java/junit.xml/UseAssertSameInsteadOfAssertTrue\"/>\n   <rule ref=\"rulesets/java/junit.xml/UseAssertTrueInsteadOfAssertEquals\"/>\n   <rule ref=\"rulesets/java/design.xml/UseCollectionIsEmpty\"/>\n   <rule ref=\"rulesets/java/controversial.xml/UseConcurrentHashMap\"/>\n   <rule ref=\"rulesets/java/logging-jakarta-commons.xml/UseCorrectExceptionLogging\"/>\n   <rule ref=\"rulesets/java/strings.xml/UseEqualsToCompareStrings\"/>\n   <rule ref=\"rulesets/java/strings.xml/UseIndexOfChar\"/>\n   <rule ref=\"rulesets/java/design.xml/UseLocaleWithCaseConversions\"/>\n   <rule ref=\"rulesets/java/design.xml/UseNotifyAllInsteadOfNotify\"/>\n   <rule ref=\"rulesets/java/controversial.xml/UseObjectForClearerAPI\"/>\n   <rule ref=\"rulesets/java/j2ee.xml/UseProperClassLoader\"/>\n   <rule ref=\"rulesets/java/optimizations.xml/UseStringBufferForStringAppends\"/>\n   <rule ref=\"rulesets/java/strings.xml/UseStringBufferLength\"/>\n   <rule ref=\"rulesets/java/design.xml/UseUtilityClass\"/>\n   <rule ref=\"rulesets/java/unnecessary.xml/UselessOperationOnImmutable\"/>\n   <rule ref=\"rulesets/java/unnecessary.xml/UselessOverridingMethod\"/>\n   <rule ref=\"rulesets/java/strings.xml/UselessStringValueOf\"/>\n   <rule ref=\"rulesets/java/naming.xml/VariableNamingConventions\"/>\n   <rule ref=\"rulesets/java/braces.xml/WhileLoopsMustUseBraces\"/>\n</ruleset>"
        },
        {
          "name": "push_javadoc.sh",
          "type": "blob",
          "size": 3.07421875,
          "content": "#!/bin/bash\n# ----------------------------------------------------------\n# Automatically push back the generated JavaDocs to gh-pages\n# ----------------------------------------------------------\n# based on https://gist.github.com/willprice/e07efd73fb7f13f917ea\n\n# specify the common address for the repository\ntargetRepo=github.com/ReactiveX/RxJava.git\n# =======================================================================\n\n# get the current build tag if any\nbuildTag=\"$BUILD_TAG\"\necho -e \"Build tag: '$buildTag'\"\n\nif [ \"$buildTag\" == \"\" ]; then\n   buildTag=\"snapshot\"\nelse\n   buildTag=\"${buildTag:1}\"\nfi\n\necho -e \"JavaDocs pushback for tag: $buildTag\"\n\n# check if the token is actually there\nif [ \"$JAVADOCS_TOKEN\" == \"\" ]; then\n\techo -e \"No access to GitHub, skipping JavaDocs pushback.\"\n\texit 0\nfi\n\n# prepare the git information\ngit config --global user.email \"akarnokd+ci@gmail.com\"\ngit config --global user.name \"akarnokd+ci\"\n\n# setup the remote\necho -e \"Adding the target repository to git\"\ngit remote add origin-pages https://${JAVADOCS_TOKEN}@${targetRepo} > /dev/null 2>&1\n\n# stash changes due to chmod\necho -e \"Stashing any local non-ignored changes\"\ngit stash\n\n# get the gh-pages\necho -e \"Update branches and checking out gh-pages\"\ngit fetch --all\ngit branch -a\ngit checkout -b gh-pages origin-pages/gh-pages\n\n# releases should update 2 extra locations\nif [ \"$buildTag\" != \"snapshot\" ]; then\n\t# for releases, add a new directory with the new version\n\t# and carefully replace the others\n\t\n\t# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    # enable once 3.x is mainstream\n    # vvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n    \n\t# 1.) main javadoc\n\t# ----------------\n\t# remove the io subdir\n    #echo -e \"Removing javadoc/io\" \n\t#rm -r javadoc/io\n\n\t# remove the html files\n    #echo -e \"Removing javadoc/*.html\" \n\t#rm javadoc/*.html\n\n\t# copy the new doc\n    #echo -e \"Copying to javadoc/\" \n\t#yes | cp -rf ./build/docs/javadoc/ .\n\n    # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    # enable once 3.x is mainstream\n    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\n\t# 2.) 3.x javadoc\n\t# remove the io subdir\n    echo -e \"Removing 3.x/javadoc/io\" \n\trm -r 3.x/javadoc/io\n\n\t# remove the html files\n    echo -e \"Removing 3.x/javadoc/*.html\" \n\trm 3.x/javadoc/*.html\n\n\t# copy the new doc\n    echo -e \"Copying to 3.x/javadoc/\" \n\tyes | cp -rf ./build/docs/javadoc/ 3.x/\nfi\n\n# 3.) create a version/snapshot specific copy of the docs\n# clear the existing tag\necho -e \"Removing to 3.x/javadoc/${buildTag}\" \nrm -r 3.x/javadoc/${buildTag}\n\n# copy the new doc\necho -e \"Copying to 3.x/javadoc/${buildTag}\" \nyes | cp -rf ./build/docs/javadoc/ 3.x/javadoc/${buildTag}/\n\n\n# stage all changed and new files\necho -e \"Staging new files\" \ngit add *.html\ngit add *.css\ngit add *.js\ngit add *package-list*\n\n# remove tracked but deleted files\necho -e \"Removing deleted files\"\ngit add -u\n\n# commit all\necho -e \"commit CI build: $CI_BUILD_NUMBER for $buildTag\"\ngit commit --message \"CI build: $CI_BUILD_NUMBER for $buildTag\"\n\n# debug file list\n#find -name \"*.html\"\n\n# push it\necho -e \"Pushing back changes.\"\ngit push --quiet --set-upstream origin-pages gh-pages\n\n\n# we are done\necho -e \"JavaDocs pushback complete.\""
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.025390625,
          "content": "rootProject.name='rxjava'\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}