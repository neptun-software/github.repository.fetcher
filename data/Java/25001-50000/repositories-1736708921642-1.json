{
  "metadata": {
    "timestamp": 1736708921642,
    "page": 1,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Stirling-Tools/Stirling-PDF",
      "stars": 48792,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.111328125,
          "content": "# Formatting\n5f771b785130154ed47952635b7acef371ffe0ec\n\n# Normalize files\n55d4fda01b2f39f5b7d7b4fda5214bd7ff0fd5dd\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4677734375,
          "content": "* text=auto eol=lf\n\n# Ignore all JavaScript files in a directory\nsrc/main/resources/static/pdfjs/* linguist-vendored\nsrc/main/resources/static/pdfjs/** linguist-vendored\nsrc/main/resources/static/pdfjs-legacy/* linguist-vendored\nsrc/main/resources/static/pdfjs-legacy/** linguist-vendored\nsrc/main/resources/static/css/bootstrap-icons.css linguist-vendored\nsrc/main/resources/static/css/bootstrap.min.css linguist-vendored\nsrc/main/resources/static/css/fonts/* linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.3173828125,
          "content": "### Eclipse ###\n.metadata\nbin/\ntmp/\n*.tmp\n*.bak\n*.exe\n*.swp\n*~.nib\nlocal.properties\n.settings/\n.loadpath\n.recommenders\n.classpath\n.project\nversion.properties\n\n#### Stirling-PDF Files ###\npipeline/watchedFolders/\npipeline/finishedFolders/\ncustomFiles/\nconfigs/\nwatchedFolders/\n!cucumber/\n!cucumber/exampleFiles/\n!cucumber/exampleFiles/example_html.zip\n\n# Gradle\n.gradle\n.lock\n\n# External tool builders\n.externalToolBuilders/\n\n# Locally stored \"Eclipse launch configurations\"\n*.launch\n\n# PyDev specific (Python IDE for Eclipse)\n*.pydevproject\n\n# CDT-specific (C/C++ Development Tooling)\n.cproject\n\n# CDT- autotools\n.autotools\n\n# Java annotation processor (APT)\n.factorypath\n\n# PDT-specific (PHP Development Tools)\n.buildpath\n\n# sbteclipse plugin\n.target\n\n# Tern plugin\n.tern-project\n\n# TeXlipse plugin\n.texlipse\n\n# STS (Spring Tool Suite)\n.springBeans\n\n# Code Recommenders\n.recommenders/\n\n# Annotation Processing\n.apt_generated/\n.apt_generated_test/\n\n# Scala IDE specific (Scala & Java development for Eclipse)\n.cache-main\n.scala_dependencies\n.worksheet\n\n# Uncomment this line if you wish to ignore the project description file.\n# Typically, this file would be tracked if it contains build/dependency configurations:\n#.project\n\n### Eclipse Patch ###\n# Spring Boot Tooling\n.sts4-cache/\n\n### Git ###\n# Created by git for backups. To disable backups in Git:\n# $ git config --global mergetool.keepBackup false\n*.orig\n\n# Created by git when using merge tools for conflicts\n*.BACKUP.*\n*.BASE.*\n*.LOCAL.*\n*.REMOTE.*\n*_BACKUP_*.txt\n*_BASE_*.txt\n*_LOCAL_*.txt\n*_REMOTE_*.txt\n\n### Java ###\n# Compiled class file\n*.class\n\n# Log file\n*.log\n\n# BlueJ files\n*.ctxt\n\n# Mobile Tools for Java (J2ME)\n.mtj.tmp/\n\n# Package Files #\n*.jar\n*.war\n*.nar\n*.ear\n*.zip\n*.tar.gz\n*.rar\n*.db\n/build\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*.pyo\n\n# Virtual environments\n.env*\n.venv*\nenv*/\nvenv*/\nENV/\nenv.bak/\nvenv.bak/\n\n# VS Code\n/.vscode/**/*\n!/.vscode/settings.json\n\n# IntelliJ IDEA\n.idea/\n*.iml\nout/\n\n# Ignore Mac DS_Store files\n.DS_Store\n**/.DS_Store\n\n# cucumber\n/cucumber/reports/**\n\n# Certs and Security Files\n*.p12\n*.pk8\n*.pem\n*.crt\n*.cer\n*.cert\n*.der\n*.key\n*.csr\n*.kdbx\n*.jks\n*.asc\n\n# SSH Keys\n*.pub\n*.priv\nid_rsa\nid_rsa.pub\nid_ecdsa\nid_ecdsa.pub\nid_ed25519\nid_ed25519.pub\n.ssh/\n*ssh\n\n# cache\n.cache\n.ruff_cache\n.mypy_cache\n.pytest_cache\n.ipynb_checkpoints\n\n**/jcef-bundle/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 2.0068359375,
          "content": "repos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.4\n    hooks:\n      - id: ruff\n        args:\n          - --fix\n          - --line-length=127\n        files: ^((.github/scripts|scripts)/.+)?[^/]+\\.py$\n        exclude: (split_photos.py)\n      - id: ruff-format\n        files: ^((.github/scripts|scripts)/.+)?[^/]+\\.py$\n        exclude: (split_photos.py)\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.3.0\n    hooks:\n      - id: codespell\n        args:\n          - --ignore-words-list=\n          - --skip=\"./.*,*.csv,*.json,*.ambr\"\n          - --quiet-level=2\n        files: \\.(properties|html|css|js|py|md)$\n        exclude: (.vscode|.devcontainer|src/main/resources|Dockerfile|.*/pdfjs.*|.*/thirdParty.*|bootstrap.*|.*\\.min\\..*|.*diff\\.js)\n  - repo: https://github.com/gitleaks/gitleaks\n    rev: v8.22.0\n    hooks:\n      - id: gitleaks\n  - repo: https://github.com/jumanjihouse/pre-commit-hooks\n    rev: 3.0.0\n    hooks:\n      - id: shellcheck\n        files: ^.*(\\.bash|\\.sh|\\.ksh|\\.zsh)$\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: end-of-file-fixer\n        files: ^.*(\\.js|\\.java|\\.py|\\.yml)$\n        exclude: ^(.*/pdfjs.*|.*/thirdParty.*|bootstrap.*|.*\\.min\\..*|.*diff\\.js$)\n      - id: trailing-whitespace\n        files: ^.*(\\.js|\\.java|\\.py|\\.yml)$\n        exclude: ^(.*/pdfjs.*|.*/thirdParty.*|bootstrap.*|.*\\.min\\..*|.*diff\\.js$)\n\n  - repo: local\n    hooks:\n      - id: check-duplicate-properties-keys\n        name: Check Duplicate Properties Keys\n        entry: python .github/scripts/check_duplicates.py\n        language: python\n        files: ^(src)/.+\\.properties$\n      - id: check-html-tabs\n        name: Check HTML for tabs\n        description: Ensures HTML/CSS/JS files do not contain tab characters\n        # args: [\"--replace_with=  \"]\n        entry: python .github/scripts/check_tabulator.py\n        language: python\n        exclude: ^(.*/pdfjs.*|.*/thirdParty.*|bootstrap.*|.*\\.min\\..*|.*diff\\.js$)\n        files: ^.*(\\.html|\\.css|\\.js)$"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.4990234375,
          "content": "# Contributing to Stirling-PDF\n\nThank you for your interest in contributing to Stirling-PDF! There are many ways to contribute other than writing code. For example, reporting bugs, creating suggestions, and adding or modifying translations.\n\n## Issue Guidelines\n\nIssues can be used to report bugs, request features, or ask questions. If you have a question, you could also ask us in our [Discord](https://discord.gg/FJUSXUSYec).\n\nBefore opening an issue, please check to make sure someone hasn't already opened an issue about it.\n\n## Pull Requests\n\nBefore you start working on an issue, please comment on (or create) the issue and wait for it to be assigned to you. If someone has already been assigned but didn't have the time to work on it lately, please communicate with them and ask if they're still working on it. This is to avoid multiple people working on the same issue.\n\nOnce you have been assigned an issue, you can start working on it. When you are ready to submit your changes, open a pull request.\nFor a detailed pull request tutorial, see [this guide](https://www.digitalocean.com/community/tutorials/how-to-create-a-pull-request-on-github).\n\nPlease make sure your Pull Request adheres to the following guidelines:\n\n- Use the PR template provided.\n- Keep your Pull Request title succinct, detailed, and to the point.\n- Keep commits atomic. One commit should contain one change. If you want to make multiple changes, submit multiple Pull Requests.\n- Commits should be clear, concise, and easy to understand.\n- References to the Issue number in the Pull Request and/or Commit message.\n\n## Translations\n\nIf you would like to add or modify a translation, please see [How to add new languages to Stirling-PDF](HowToAddNewLanguage.md). Also, please create a Pull Request so others can use it!\n\n## Docs\n\nDocumentation for Stirling-PDF is handled in a separate repository. Please see [Docs repository](https://github.com/Stirling-Tools/Stirling-Tools.github.io) or use the \"edit this page\"-button at the bottom of each page at [https://docs.stirlingpdf.com/](https://docs.stirlingpdf.com/).\n\n## Fixing Bugs or Adding a New Feature\n\nFirst, make sure you've read the section [Pull Requests](#pull-requests).\n\nIf, at any point in time, you have a question, please feel free to ask in the same issue thread or in our [Discord](https://discord.gg/FJUSXUSYec).\n\nDevelopers should review our [Developer Guide](DeveloperGuide.md)\n\n## License\n\nBy contributing to this project, you agree that your contributions will be licensed under the [MIT License](LICENSE).\n"
        },
        {
          "name": "DATABASE.md",
          "type": "blob",
          "size": 2.1181640625,
          "content": "# New Database Backup and Import Functionality\n\n## Functionality Overview\n\nThe newly introduced feature enhances the application with robust database backup and import capabilities. This feature is designed to ensure data integrity and provide a straightforward way to manage database backups. Here's how it works:\n\n1. Automatic Backup Creation\n   - The system automatically creates a database backup every day at midnight. This ensures that there is always a recent backup available, minimizing the risk of data loss.\n2. Manual Backup Export\n   - Admin actions that modify the user database trigger a manual export of the database. This keeps the backup up-to-date with the latest changes and provides an extra layer of data security.\n3. Importing Database Backups\n   - Admin users can import a database backup either via the web interface or API endpoints. This allows for easy restoration of the database to a previous state in case of data corruption or other issues.\n   - The import process ensures that the database structure and data are correctly restored, maintaining the integrity of the application.\n4. Managing Backup Files\n   - Admins can view a list of all existing backup files, along with their creation dates and sizes. This helps in managing storage and identifying the most recent or relevant backups.\n   - Backup files can be downloaded for offline storage or transferred to other environments, providing flexibility in database management.\n   - Unnecessary backup files can be deleted through the interface to free up storage space and maintain an organized backup directory.\n\n## User Interface\n\n### Web Interface\n\n1. Upload SQL files to import database backups.\n2. View details of existing backups, such as file names, creation dates, and sizes.\n3. Download backup files for offline storage.\n4. Delete outdated or unnecessary backup files.\n\n### API Endpoints\n\n1. Import database backups by uploading SQL files.\n2. Download backup files.\n3. Delete backup files.\n\nThis new functionality streamlines database management, ensuring that backups are always available and easy to manage, thus improving the reliability and resilience of the application.\n"
        },
        {
          "name": "DeveloperGuide.md",
          "type": "blob",
          "size": 21.2119140625,
          "content": "# Stirling-PDF Developer Guide\n\n## 1. Introduction\n\nStirling-PDF is a robust, locally hosted, web-based PDF manipulation tool. This guide focuses on Docker-based development and testing, which is the recommended approach for working with the full version of Stirling-PDF.\n\n## 2. Project Overview\n\nStirling-PDF is built using:\n\n- Spring Boot + Thymeleaf\n- PDFBox\n- LibreOffice\n- qpdf\n- HTML, CSS, JavaScript\n- Docker\n- PDF.js\n- PDF-LIB.js\n- Lombok\n\n## 3. Development Environment Setup\n\n### Prerequisites\n\n- Docker\n- Git\n- Java JDK 17 or later\n- Gradle 7.0 or later (Included within the repo)\n\n### Setup Steps\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/Stirling-Tools/Stirling-PDF.git\n   cd Stirling-PDF\n   ```\n\n2. Install Docker and JDK17 if not already installed.\n\n3. Install a recommended Java IDE such as Eclipse, IntelliJ, or VSCode\n\n4. Lombok Setup\nStirling-PDF uses Lombok to reduce boilerplate code. Some IDEs, like Eclipse, don't support Lombok out of the box. To set up Lombok in your development environment:\nVisit the [Lombok website](https://projectlombok.org/setup/) for installation instructions specific to your IDE.\n\n5. Add environment variable\nFor local testing, you should generally be testing the full 'Security' version of Stirling-PDF. To do this, you must add the environment flag DOCKER_ENABLE_SECURITY=true to your system and/or IDE build/run step.\n\n## 4. Project Structure\n\n```bash\nStirling-PDF/\n├── .github/               # GitHub-specific files (workflows, issue templates)\n├── configs/               # Configuration files used by stirling at runtime (generated at runtime)\n├── cucumber/              # Cucumber test files\n│   ├── features/\n├── customFiles/           # Custom static files and templates (generated at runtime used to replace existing files)\n├── docs/                  # Documentation files\n├── exampleYmlFiles/       # Example YAML configuration files\n├── images/                # Image assets\n├── pipeline/              # Pipeline-related files (generated at runtime)\n├── scripts/               # Utility scripts\n├── src/                   # Source code\n│   ├── main/\n│   │   ├── java/\n│   │   │   └── stirling/\n│   │   │       └── software/\n│   │   │           └── SPDF/\n│   │   │               ├── config/\n│   │   │               ├── controller/\n│   │   │               ├── model/\n│   │   │               ├── repository/\n│   │   │               ├── service/\n│   │   │               └── utils/\n│   │   └── resources/\n│   │       ├── static/\n│   │       │   ├── css/\n│   │       │   ├── js/\n│   │       │   └── pdfjs/\n│   │       └── templates/\n│   └── test/\n│       └── java/\n│           └── stirling/\n│               └── software/\n│                   └── SPDF/\n├── build.gradle           # Gradle build configuration\n├── Dockerfile             # Main Dockerfile\n├── Dockerfile.ultra-lite  # Dockerfile for ultra-lite version\n├── Dockerfile.fat         # Dockerfile for fat version\n├── docker-compose.yml     # Docker Compose configuration\n└── test.sh                # Test script to deploy all docker versions and run cuke tests\n```\n\n## 5. Docker-based Development\n\nStirling-PDF offers several Docker versions:\n\n- Full: All features included\n- Ultra-Lite: Basic PDF operations only\n- Fat: Includes additional libraries and fonts predownloaded\n\n### Example Docker Compose Files\n\nStirling-PDF provides several example Docker Compose files in the `exampleYmlFiles` directory, such as:\n\n- `docker-compose-latest.yml`: Latest version without security features\n- `docker-compose-latest-security.yml`: Latest version with security features enabled\n- `docker-compose-latest-fat-security.yml`: Fat version with security features enabled\n\nThese files provide pre-configured setups for different scenarios. For example, here's a snippet from `docker-compose-latest-security.yml`:\n\n```yaml\nservices:\n  stirling-pdf:\n    container_name: Stirling-PDF-Security\n    image: stirlingtools/stirling-pdf:latest\n    deploy:\n      resources:\n        limits:\n          memory: 4G\n    healthcheck:\n      test: [\"CMD-SHELL\", \"curl -f http://localhost:8080/api/v1/info/status | grep -q 'UP' && curl -fL http://localhost:8080/ | grep -q 'Please sign in'\"]\n      interval: 5s\n      timeout: 10s\n      retries: 16\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - /stirling/latest/data:/usr/share/tessdata:rw\n      - /stirling/latest/config:/configs:rw\n      - /stirling/latest/logs:/logs:rw\n    environment:\n      DOCKER_ENABLE_SECURITY: \"true\"\n      SECURITY_ENABLELOGIN: \"true\"\n      PUID: 1002\n      PGID: 1002\n      UMASK: \"022\"\n      SYSTEM_DEFAULTLOCALE: en-US\n      UI_APPNAME: Stirling-PDF\n      UI_HOMEDESCRIPTION: Demo site for Stirling-PDF Latest with Security\n      UI_APPNAMENAVBAR: Stirling-PDF Latest\n      SYSTEM_MAXFILESIZE: \"100\"\n      METRICS_ENABLED: \"true\"\n      SYSTEM_GOOGLEVISIBILITY: \"true\"\n    restart: on-failure:5\n```\n\nTo use these example files, copy the desired file to your project root and rename it to `docker-compose.yml`, or specify the file explicitly when running Docker Compose:\n\n```bash\ndocker-compose -f exampleYmlFiles/docker-compose-latest-security.yml up\n```\n\n### Building Docker Images\n\nStirling-PDF uses different Docker images for various configurations. The build process is controlled by environment variables and uses specific Dockerfile variants. Here's how to build the Docker images:\n\n1. Set the security environment variable:\n\n   ```bash\n   export DOCKER_ENABLE_SECURITY=false  # or true for security-enabled builds\n   ```\n\n2. Build the project with Gradle:\n\n   ```bash\n   ./gradlew clean build\n   ```\n\n3. Build the Docker images:\n\n   For the latest version:\n\n   ```bash\n   docker build --no-cache --pull --build-arg VERSION_TAG=alpha -t stirlingtools/stirling-pdf:latest -f ./Dockerfile .\n   ```\n\n   For the ultra-lite version:\n\n   ```bash\n   docker build --no-cache --pull --build-arg VERSION_TAG=alpha -t stirlingtools/stirling-pdf:latest-ultra-lite -f ./Dockerfile.ultra-lite .\n   ```\n\n   For the fat version (with security enabled):\n\n   ```bash\n   export DOCKER_ENABLE_SECURITY=true\n   docker build --no-cache --pull --build-arg VERSION_TAG=alpha -t stirlingtools/stirling-pdf:latest-fat -f ./Dockerfile.fat .\n   ```\n\nNote: The `--no-cache` and `--pull` flags ensure that the build process uses the latest base images and doesn't use cached layers, which is useful for testing and ensuring reproducible builds. however to improve build times these can often be removed depending on your usecase\n\n## 6. Testing\n\n### Comprehensive Testing Script\n\nStirling-PDF provides a `test.sh` script in the root directory. This script builds all versions of Stirling-PDF, checks that each version works, and runs Cucumber tests. It's recommended to run this script before submitting a final pull request.\n\nTo run the test script:\n\n```bash\n./test.sh\n```\n\nThis script performs the following actions:\n\n1. Builds all Docker images (full, ultra-lite, fat).\n2. Runs each version to ensure it starts correctly.\n3. Executes Cucumber tests against the main version and ensures feature compatibility. In the event these tests fail, your PR will not be merged.\n\nNote: The `test.sh` script will run automatically when you raise a PR. However, it's recommended to run it locally first to save resources and catch any issues early.\n\n### Full Testing with Docker\n\n1. Build and run the Docker container per the above instructions:\n\n2. Access the application at `http://localhost:8080` and manually test all features developed.\n\n### Local Testing (Java and UI Components)\n\nFor quick iterations and development of Java backend, JavaScript, and UI components, you can run and test Stirling-PDF locally without Docker. This approach allows you to work on and verify changes to:\n\n- Java backend logic\n- RESTful API endpoints\n- JavaScript functionality\n- User interface components and styling\n- Thymeleaf templates\n\nTo run Stirling-PDF locally:\n\n1. Compile and run the project using built-in IDE methods or by running:\n\n   ```bash\n   ./gradlew bootRun\n   ```\n\n2. Access the application at `http://localhost:8080` in your web browser.\n\n3. Manually test the features you're working on through the UI.\n\n4. For API changes, use tools like Postman or curl to test endpoints directly.\n\nImportant notes:\n\n- Local testing doesn't include features that depend on external tools like qpdf, LibreOffice, or Python scripts.\n- There are currently no automated unit tests. All testing is done manually through the UI or API calls. (You are welcome to add JUnits!)\n- Always verify your changes in the full Docker environment before submitting pull requests, as some integrations and features will only work in the complete setup.\n\n## 7. Contributing\n\n1. Fork the repository on GitHub.\n2. Create a new branch for your feature or bug fix.\n3. Make your changes and commit them with clear, descriptive messages and ensure any documentation is updated related to your changes.\n4. Test your changes thoroughly in the Docker environment.\n5. Run the `test.sh` script to ensure all versions build correctly and pass the Cucumber tests:\n\n   ```bash\n   ./test.sh\n   ```\n\n6. Push your changes to your fork.\n7. Submit a pull request to the main repository.\n8. See additional [contributing guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md).\n\nWhen you raise a PR:\n\n- The `test.sh` script will run automatically against your PR.\n- The PR checks will verify versioning and dependency updates.\n- Documentation will be automatically updated for dependency changes.\n- Security issues will be checked using Snyk and PixeeBot.\n\nAddress any issues that arise from these checks before finalizing your pull request.\n\n## 8. API Documentation\n\nAPI documentation is available at `/swagger-ui/index.html` when running the application. You can also view the latest API documentation [here](https://app.swaggerhub.com/apis-docs/Stirling-Tools/Stirling-PDF/).\n\n## 9. Customization\n\nStirling-PDF can be customized through environment variables or a `settings.yml` file. Key customization options include:\n\n- Application name and branding\n- Security settings\n- UI customization\n- Endpoint management\n\nWhen using Docker, pass environment variables using the `-e` flag or in your `docker-compose.yml` file.\n\nExample:\n\n```bash\ndocker run -p 8080:8080 -e APP_NAME=\"My PDF Tool\" stirling-pdf:full\n```\n\nRefer to the main README for a full list of customization options.\n\n## 10. Language Translations\n\nFor managing language translations that affect multiple files, Stirling-PDF provides a helper script:\n\n```bash\n/scripts/replace_translation_line.sh\n```\n\nThis script helps you make consistent replacements across language files.\n\nWhen contributing translations:\n\n1. Use the helper script for multi-file changes.\n2. Ensure all language files are updated consistently.\n3. The PR checks will verify consistency in language file updates.\n\nRemember to test your changes thoroughly to ensure they don't break any existing functionality.\n\n## Code examples\n\n### Overview of Thymeleaf\n\nThymeleaf is a server-side Java HTML template engine. It is used in Stirling-PDF to render dynamic web pages. Thymeleaf integrates heavily with Spring Boot.\n\n### Thymeleaf overview\n\nIn Stirling-PDF, Thymeleaf is used to create HTML templates that are rendered on the server side. These templates are located in the `src/main/resources/templates` directory. Thymeleaf templates use a combination of HTML and special Thymeleaf attributes to dynamically generate content.\n\nSome examples of this are:\n\n```html\n<th:block th:insert=\"~{fragments/navbar.html :: navbar}\"></th:block>\n```\nor\n```html\n<th:block th:insert=\"~{fragments/footer.html :: footer}\"></th:block>\n```\n\nWhere it uses the `th:block`, `th:` indicating it's a special Thymeleaf element to be used server-side in generating the HTML, and block being the actual element type.\nIn this case, we are inserting the `navbar` entry within the `fragments/navbar.html` fragment into the `th:block` element.\n\nThey can be more complex, such as:\n\n```html\n<th:block th:insert=\"~{fragments/common :: head(title=#{pageExtracter.title}, header=#{pageExtracter.header})}\"></th:block>\n```\n\nWhich is the same as above but passes the parameters title and header into the fragment `common.html` to be used in its HTML generation.\n\nThymeleaf can also be used to loop through objects or pass things from the Java side into the HTML side.\n\n```java\n @GetMapping\n       public String newFeaturePage(Model model) {\n           model.addAttribute(\"exampleData\", exampleData);\n           return \"new-feature\";\n       }\n```\n\nIn the above example, if exampleData is a list of plain java objects of class Person and within it, you had id, name, age, etc. You can reference it like so\n\n```html\n<tbody>\n   <!-- Use th:each to iterate over the list -->\n   <tr th:each=\"person : ${exampleData}\">\n       <td th:text=\"${person.id}\"></td>\n       <td th:text=\"${person.name}\"></td>\n       <td th:text=\"${person.age}\"></td>\n       <td th:text=\"${person.email}\"></td>\n   </tr>\n</tbody>\n```\n\nThis would generate n entries of tr for each person in exampleData\n\n### Adding a New Feature to the Backend (API)\n\n1. **Create a New Controller:**\n   - Create a new Java class in the `src/main/java/stirling/software/SPDF/controller/api` directory.\n   - Annotate the class with `@RestController` and `@RequestMapping` to define the API endpoint.\n   - Ensure to add API documentation annotations like `@Tag(name = \"General\", description = \"General APIs\")` and `@Operation(summary = \"Crops a PDF document\", description = \"This operation takes an input PDF file and crops it according to the given coordinates. Input:PDF Output:PDF Type:SISO\")`.\n\n   ```java\n   package stirling.software.SPDF.controller.api;\n\n   import org.springframework.web.bind.annotation.GetMapping;\n   import org.springframework.web.bind.annotation.RequestMapping;\n   import org.springframework.web.bind.annotation.RestController;\n   import io.swagger.v3.oas.annotations.Operation;\n   import io.swagger.v3.oas.annotations.tags.Tag;\n\n   @RestController\n   @RequestMapping(\"/api/v1/new-feature\")\n   @Tag(name = \"General\", description = \"General APIs\")\n   public class NewFeatureController {\n\n       @GetMapping\n       @Operation(summary = \"New Feature\", description = \"This is a new feature endpoint.\")\n       public String newFeature() {\n           return \"NewFeatureResponse\"; // This refers to the NewFeatureResponse.html template presenting the user with the generated html from that file when they navigate to /api/v1/new-feature\n       }\n   }\n   ```\n\n2. **Define the Service Layer:** (Not required but often useful)\n   - Create a new service class in the `src/main/java/stirling/software/SPDF/service` directory.\n   - Implement the business logic for the new feature.\n\n   ```java\n   package stirling.software.SPDF.service;\n\n   import org.springframework.stereotype.Service;\n\n   @Service\n   public class NewFeatureService {\n\n       public String getNewFeatureData() {\n           // Implement business logic here\n           return \"New Feature Data\";\n       }\n   }\n   ```\n\n2b. **Integrate the Service with the Controller:**\n\n- Autowire the service class in the controller and use it to handle the API request.\n\n  ```java\n  package stirling.software.SPDF.controller.api;\n\n  import org.springframework.beans.factory.annotation.Autowired;\n  import org.springframework.web.bind.annotation.GetMapping;\n  import org.springframework.web.bind.annotation.RequestMapping;\n  import org.springframework.web.bind.annotation.RestController;\n  import stirling.software.SPDF.service.NewFeatureService;\n  import io.swagger.v3.oas.annotations.Operation;\n  import io.swagger.v3.oas.annotations.tags.Tag;\n\n  @RestController\n  @RequestMapping(\"/api/v1/new-feature\")\n  @Tag(name = \"General\", description = \"General APIs\")\n  public class NewFeatureController {\n\n      @Autowired\n      private NewFeatureService newFeatureService;\n\n      @GetMapping\n      @Operation(summary = \"New Feature\", description = \"This is a new feature endpoint.\")\n      public String newFeature() {\n          return newFeatureService.getNewFeatureData();\n      }\n  }\n  ```\n\n### Adding a New Feature to the Frontend (UI)\n\n1. **Create a New Thymeleaf Template:**\n   - Create a new HTML file in the `src/main/resources/templates` directory.\n   - Use Thymeleaf attributes to dynamically generate content.\n   - Use `extract-page.html` as a base example for the HTML template, which is useful to ensure importing of the general layout, navbar, and footer.\n\n   ```html\n   <!DOCTYPE html>\n   <html th:lang=\"${#locale.language}\" th:dir=\"#{language.direction}\" th:data-language=\"${#locale.toString()}\" xmlns:th=\"https://www.thymeleaf.org\">\n     <head>\n     <th:block th:insert=\"~{fragments/common :: head(title=#{newFeature.title}, header=#{newFeature.header})}\"></th:block>\n     </head>\n\n     <body>\n       <div id=\"page-container\">\n         <div id=\"content-wrap\">\n           <th:block th:insert=\"~{fragments/navbar.html :: navbar}\"></th:block>\n           <br><br>\n           <div class=\"container\">\n             <div class=\"row justify-content-center\">\n               <div class=\"col-md-6 bg-card\">\n                 <div class=\"tool-header\">\n                   <span class=\"material-symbols-rounded tool-header-icon organize\">upload</span>\n                   <span class=\"tool-header-text\" th:text=\"#{newFeature.header}\"></span>\n                 </div>\n                 <form th:action=\"@{'/api/v1/new-feature'}\" method=\"post\" enctype=\"multipart/form-data\">\n                   <div th:replace=\"~{fragments/common :: fileSelector(name='fileInput', multipleInputsForSingleRequest=false, accept='application/pdf')}\"></div>\n                   <input type=\"hidden\" id=\"customMode\" name=\"customMode\" value=\"\">\n                   <div class=\"mb-3\">\n                     <label for=\"featureInput\" th:text=\"#{newFeature.prompt}\"></label>\n                     <input type=\"text\" class=\"form-control\" id=\"featureInput\" name=\"featureInput\" th:placeholder=\"#{newFeature.placeholder}\" required>\n                   </div>\n\n                   <button type=\"submit\" id=\"submitBtn\" class=\"btn btn-primary\" th:text=\"#{newFeature.submit}\"></button>\n                 </form>\n               </div>\n             </div>\n           </div>\n         </div>\n         <th:block th:insert=\"~{fragments/footer.html :: footer}\"></th:block>\n       </div>\n     </body>\n   </html>\n   ```\n\n2. **Create a New Controller for the UI:**\n   - Create a new Java class in the `src/main/java/stirling/software/SPDF/controller/ui` directory.\n   - Annotate the class with `@Controller` and `@RequestMapping` to define the UI endpoint.\n\n   ```java\n   package stirling.software.SPDF.controller.ui;\n\n   import org.springframework.beans.factory.annotation.Autowired;\n   import org.springframework.stereotype.Controller;\n   import org.springframework.ui.Model;\n   import org.springframework.web.bind.annotation.GetMapping;\n   import org.springframework.web.bind.annotation.RequestMapping;\n   import stirling.software.SPDF.service.NewFeatureService;\n\n   @Controller\n   @RequestMapping(\"/new-feature\")\n   public class NewFeatureUIController {\n\n       @Autowired\n       private NewFeatureService newFeatureService;\n\n       @GetMapping\n       public String newFeaturePage(Model model) {\n           model.addAttribute(\"newFeatureData\", newFeatureService.getNewFeatureData());\n           return \"new-feature\";\n       }\n   }\n   ```\n\n3. **Update the Navigation Bar:**\n   - Add a link to the new feature page in the navigation bar.\n   - Update the `src/main/resources/templates/fragments/navbar.html` file.\n\n   ```html\n   <li class=\"nav-item\">\n       <a class=\"nav-link\" th:href=\"@{/new-feature}\">New Feature</a>\n   </li>\n   ```\n\n## Adding New Translations to Existing Language Files in Stirling-PDF\n\nWhen adding a new feature or modifying existing ones in Stirling-PDF, you'll need to add new translation entries to the existing language files. Here's a step-by-step guide:\n\n### 1. Locate Existing Language Files\n\nFind the existing `messages.properties` files in the `src/main/resources` directory. You'll see files like:\n\n- `messages.properties` (default, usually English)\n- `messages_en_GB.properties`\n- `messages_fr_FR.properties`\n- `messages_de_DE.properties`\n- etc.\n\n### 2. Add New Translation Entries\n\nOpen each of these files and add your new translation entries. For example, if you're adding a new feature called \"PDF Splitter\",\nUse descriptive, hierarchical keys (e.g., `feature.element.description`)\nyou might add:\n\n```properties\npdfSplitter.title=PDF Splitter\npdfSplitter.description=Split your PDF into multiple documents\npdfSplitter.button.split=Split PDF\npdfSplitter.input.pages=Enter page numbers to split\n```\n\nAdd these entries to the default GB language file and any others you wish, translating the values as appropriate for each language.\n\n### 3. Use Translations in Thymeleaf Templates\n\nIn your Thymeleaf templates, use the `#{key}` syntax to reference the new translations:\n\n```html\n<h1 th:text=\"#{pdfSplitter.title}\">PDF Splitter</h1>\n<p th:text=\"#{pdfSplitter.description}\">Split your PDF into multiple documents</p>\n<input type=\"text\" th:placeholder=\"#{pdfSplitter.input.pages}\">\n<button th:text=\"#{pdfSplitter.button.split}\">Split PDF</button>\n```\n\nRemember, never hard-code text in your templates or Java code. Always use translation keys to ensure proper localization.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 3.0341796875,
          "content": "# Main stage\nFROM alpine:3.21.2@sha256:56fa17d2a7e7f168a043a2712e63aed1f8543aeafdcee47c58dcffe38ed51099\n\n# Copy necessary files\nCOPY scripts /scripts\nCOPY pipeline /pipeline\nCOPY src/main/resources/static/fonts/*.ttf /usr/share/fonts/opentype/noto/\n#COPY src/main/resources/static/fonts/*.otf /usr/share/fonts/opentype/noto/\nCOPY build/libs/*.jar app.jar\n\nARG VERSION_TAG\n\nLABEL org.opencontainers.image.title=\"Stirling-PDF\"\nLABEL org.opencontainers.image.description=\"A powerful locally hosted web-based PDF manipulation tool supporting 50+ operations including merging, splitting, conversion, OCR, watermarking, and more.\"\nLABEL org.opencontainers.image.source=\"https://github.com/Stirling-Tools/Stirling-PDF\"\nLABEL org.opencontainers.image.licenses=\"MIT\"\nLABEL org.opencontainers.image.vendor=\"Stirling-Tools\"\nLABEL org.opencontainers.image.url=\"https://www.stirlingpdf.com\"\nLABEL org.opencontainers.image.documentation=\"https://docs.stirlingpdf.com\"\nLABEL maintainer=\"Stirling-Tools\"\nLABEL org.opencontainers.image.authors=\"Stirling-Tools\"\nLABEL org.opencontainers.image.version=\"${VERSION_TAG}\"\nLABEL org.opencontainers.image.keywords=\"PDF, manipulation, merge, split, convert, OCR, watermark\"\n\n# Set Environment Variables\nENV DOCKER_ENABLE_SECURITY=false \\\n    VERSION_TAG=$VERSION_TAG \\\n    JAVA_TOOL_OPTIONS=\"$JAVA_TOOL_OPTIONS -XX:MaxRAMPercentage=75\" \\\n    HOME=/home/stirlingpdfuser \\\n    PUID=1000 \\\n    PGID=1000 \\\n    UMASK=022\n\n\n# JDK for app\nRUN echo \"@testing https://dl-cdn.alpinelinux.org/alpine/edge/main\" | tee -a /etc/apk/repositories && \\\n    echo \"@testing https://dl-cdn.alpinelinux.org/alpine/edge/community\" | tee -a /etc/apk/repositories && \\\n    echo \"@testing https://dl-cdn.alpinelinux.org/alpine/edge/testing\" | tee -a /etc/apk/repositories && \\\n    apk upgrade --no-cache -a && \\\n    apk add --no-cache \\\n        ca-certificates \\\n        tzdata \\\n        tini \\\n        bash \\\n        curl \\\n        qpdf \\\n        shadow \\\n        su-exec \\\n        openssl \\\n        openssl-dev \\\n        openjdk21-jre \\\n# Doc conversion\n        libreoffice \\\n# pdftohtml\n        poppler-utils \\\n# OCR MY PDF (unpaper for descew and other advanced features)\n        tesseract-ocr-data-eng \\\n# CV\n        py3-opencv \\\n# python3/pip\n        python3 \\\n        py3-pip && \\\n# uno unoconv and HTML\n    pip install --break-system-packages --no-cache-dir --upgrade unoconv WeasyPrint pdf2image pillow && \\\n    mv /usr/share/tessdata /usr/share/tessdata-original && \\\n    mkdir -p $HOME /configs /logs /customFiles /pipeline/watchedFolders /pipeline/finishedFolders && \\\n    fc-cache -f -v && \\\n    chmod +x /scripts/* && \\\n    chmod +x /scripts/init.sh && \\\n# User permissions\n    addgroup -S stirlingpdfgroup && adduser -S stirlingpdfuser -G stirlingpdfgroup && \\\n    chown -R stirlingpdfuser:stirlingpdfgroup $HOME /scripts /usr/share/fonts/opentype/noto /configs /customFiles /pipeline && \\\n    chown stirlingpdfuser:stirlingpdfgroup /app.jar\n\nEXPOSE 8080/tcp\n\n# Set user and run command\nENTRYPOINT [\"tini\", \"--\", \"/scripts/init.sh\"]\nCMD [\"java\", \"-Dfile.encoding=UTF-8\", \"-jar\", \"/app.jar\"]\n"
        },
        {
          "name": "Dockerfile.fat",
          "type": "blob",
          "size": 2.587890625,
          "content": "# Build the application\nFROM gradle:8.12-jdk17 AS build\n\n# Set the working directory\nWORKDIR /app\n\n# Copy the entire project to the working directory\nCOPY . .\n\n# Build the application with DOCKER_ENABLE_SECURITY=false\nRUN DOCKER_ENABLE_SECURITY=true \\\n./gradlew clean build\n\n# Main stage\nFROM alpine:3.21.2@sha256:56fa17d2a7e7f168a043a2712e63aed1f8543aeafdcee47c58dcffe38ed51099\n\n# Copy necessary files\nCOPY scripts /scripts\nCOPY pipeline /pipeline\nCOPY src/main/resources/static/fonts/*.ttf /usr/share/fonts/opentype/noto/\nCOPY --from=build /app/build/libs/*.jar app.jar\n\nARG VERSION_TAG\n\n# Set Environment Variables\nENV DOCKER_ENABLE_SECURITY=false \\\n    VERSION_TAG=$VERSION_TAG \\\n    JAVA_TOOL_OPTIONS=\"$JAVA_TOOL_OPTIONS -XX:MaxRAMPercentage=75\" \\\n    HOME=/home/stirlingpdfuser \\\n    PUID=1000 \\\n    PGID=1000 \\\n    UMASK=022 \\\n    FAT_DOCKER=true \\\n    INSTALL_BOOK_AND_ADVANCED_HTML_OPS=false\n\n\n# JDK for app\nRUN echo \"@testing https://dl-cdn.alpinelinux.org/alpine/edge/main\" | tee -a /etc/apk/repositories && \\\n    echo \"@testing https://dl-cdn.alpinelinux.org/alpine/edge/community\" | tee -a /etc/apk/repositories && \\\n    echo \"@testing https://dl-cdn.alpinelinux.org/alpine/edge/testing\" | tee -a /etc/apk/repositories && \\\n    apk upgrade --no-cache -a && \\\n    apk add --no-cache \\\n        ca-certificates \\\n        tzdata \\\n        tini \\\n        bash \\\n        curl \\\n        shadow \\\n        su-exec \\\n        openssl \\\n        openssl-dev \\\n        openjdk21-jre \\\n# Doc conversion\n        libreoffice \\\n# pdftohtml\n        poppler-utils \\\n# OCR MY PDF (unpaper for descew and other advanced featues)\n        qpdf \\\n        tesseract-ocr-data-eng \\\n        font-terminus font-dejavu font-noto font-noto-cjk font-awesome font-noto-extra \\\n# CV\n        py3-opencv \\\n# python3/pip\n        python3 \\\n    py3-pip && \\\n# uno unoconv and HTML\n    pip install --break-system-packages --no-cache-dir --upgrade unoconv WeasyPrint pdf2image pillow && \\\n    mv /usr/share/tessdata /usr/share/tessdata-original && \\\n    mkdir -p $HOME /configs /logs /customFiles /pipeline/watchedFolders /pipeline/finishedFolders && \\\n    fc-cache -f -v && \\\n    chmod +x /scripts/* && \\\n    chmod +x /scripts/init.sh && \\\n# User permissions\n    addgroup -S stirlingpdfgroup && adduser -S stirlingpdfuser -G stirlingpdfgroup && \\\n    chown -R stirlingpdfuser:stirlingpdfgroup $HOME /scripts /usr/share/fonts/opentype/noto /configs /customFiles /pipeline && \\\n    chown stirlingpdfuser:stirlingpdfgroup /app.jar\n\nEXPOSE 8080/tcp\n\n# Set user and run command\nENTRYPOINT [\"tini\", \"--\", \"/scripts/init.sh\"]\nCMD [\"java\", \"-Dfile.encoding=UTF-8\", \"-jar\", \"/app.jar\"]\n"
        },
        {
          "name": "Dockerfile.ultra-lite",
          "type": "blob",
          "size": 1.7568359375,
          "content": "# use alpine\nFROM alpine:3.21.2@sha256:56fa17d2a7e7f168a043a2712e63aed1f8543aeafdcee47c58dcffe38ed51099\n\nARG VERSION_TAG\n\n# Set Environment Variables\nENV DOCKER_ENABLE_SECURITY=false \\\n    HOME=/home/stirlingpdfuser \\\n    VERSION_TAG=$VERSION_TAG \\\n    JAVA_TOOL_OPTIONS=\"$JAVA_TOOL_OPTIONS -XX:MaxRAMPercentage=75\" \\\n    PUID=1000 \\\n    PGID=1000 \\\n    UMASK=022\n\n# Copy necessary files\nCOPY scripts/download-security-jar.sh /scripts/download-security-jar.sh\nCOPY scripts/init-without-ocr.sh /scripts/init-without-ocr.sh\nCOPY scripts/installFonts.sh /scripts/installFonts.sh\nCOPY pipeline /pipeline\nCOPY build/libs/*.jar app.jar\n\n# Set up necessary directories and permissions\nRUN echo \"@testing https://dl-cdn.alpinelinux.org/alpine/edge/main\" | tee -a /etc/apk/repositories && \\\n    echo \"@testing https://dl-cdn.alpinelinux.org/alpine/edge/community\" | tee -a /etc/apk/repositories && \\\n    echo \"@testing https://dl-cdn.alpinelinux.org/alpine/edge/testing\" | tee -a /etc/apk/repositories && \\\n    apk upgrade --no-cache -a && \\\n    apk add --no-cache \\\n        ca-certificates \\\n        tzdata \\\n        tini \\\n        bash \\\n        curl \\\n        shadow \\\n        su-exec \\\n        openjdk21-jre && \\\n    # User permissions\n    mkdir -p /configs /logs /customFiles /usr/share/fonts/opentype/noto && \\\n    chmod +x /scripts/*.sh && \\\n    addgroup -S stirlingpdfgroup && adduser -S stirlingpdfuser -G stirlingpdfgroup && \\\n    chown -R stirlingpdfuser:stirlingpdfgroup $HOME /scripts  /configs /customFiles /pipeline && \\\n    chown stirlingpdfuser:stirlingpdfgroup /app.jar\n\n# Set environment variables\nENV ENDPOINTS_GROUPS_TO_REMOVE=CLI\n\nEXPOSE 8080/tcp\n\n# Run the application\nENTRYPOINT [\"tini\", \"--\", \"/scripts/init-without-ocr.sh\"]\nCMD [\"java\", \"-Dfile.encoding=UTF-8\", \"-jar\", \"/app.jar\"]\n"
        },
        {
          "name": "HowToAddNewLanguage.md",
          "type": "blob",
          "size": 3.220703125,
          "content": "<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/Stirling-Tools/Stirling-PDF/main/docs/stirling.png\" width=\"80\">\n  <br>\n  <h1 align=\"center\">Stirling-PDF</h1>\n</p>\n\n# How to add new languages to Stirling-PDF\n\nFork Stirling-PDF and create a new branch out of `main`.\n\nThen add a reference to the language in the navbar by adding a new language entry to the dropdown:\n\n- Edit the file: [languages.html](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/src/main/resources/templates/fragments/languages.html)\n- Add a flag SVG file to: [flags directory](https://github.com/Stirling-Tools/Stirling-PDF/tree/main/src/main/resources/static/images/flags)\n\nAny SVG flags are fine; most of the current ones were sourced from [here](https://flagicons.lipis.dev/). If your language isn't represented by a flag, choose a similar one, such as Saudi Arabia's flag for Arabic.\n\nFor example, to add Polish, you would add:\n\n```html\n<a class=\"dropdown-item lang_dropdown-item\" href=\"\" data-bs-language-code=\"pl_PL\">\n    <img src=\"images/flags/pl.svg\" alt=\"icon\" width=\"20\" height=\"15\"> Polski\n</a>\n```\n\nThe `data-bs-language-code` is the code used to reference the file in the next step.\n\n### Add Language Property File\n\nStart by copying the existing English property file:\n\n- [messages_en_GB.properties](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/src/main/resources/messages_en_GB.properties)\n\nCopy and rename it to `messages_{your data-bs-language-code here}.properties`. In the Polish example, you would set the name to `messages_pl_PL.properties`.\n\nThen simply translate all property entries within that file and make a Pull Request (PR) into `main` for others to use!\n\nIf you do not have a Java IDE, I am happy to verify that the changes work once you raise the PR (but I won't be able to verify the translations themselves).\n\n## Handling Untranslatable Strings\n\nSometimes, certain strings in the properties file may not require translation because they are the same in the target language or are universal (like names of protocols, certain terminologies, etc.). To ensure accurate statistics for language progress, these strings should be added to the `ignore_translation.toml` file located in the `scripts` directory. This will exclude them from the translation progress calculations.\n\nFor example, if the English string `error=Error` does not need translation in Polish, add it to the `ignore_translation.toml` under the Polish section:\n\n```toml\n[pl_PL]\nignore = [\n    \"language.direction\",  # Existing entries\n    \"error\"                # Add new entries here\n]\n```\n\n## Add New Translation Tags\n\n> [!IMPORTANT]\n> If you add any new translation tags, they must first be added to the `messages_en_GB.properties` file. This ensures consistency across all language files.\n\n- New translation tags **must be added** to the `messages_en_GB.properties` file to maintain a reference for other languages.\n- After adding the new tags to `messages_en_GB.properties`, add and translate them in the respective language file (e.g., `messages_pl_PL.properties`).\n\nMake sure to place the entry under the correct language section. This helps maintain the accuracy of translation progress statistics and ensures that the translation tool or scripts do not misinterpret the completion rate.\n"
        },
        {
          "name": "HowToUseOCR.md",
          "type": "blob",
          "size": 3.24609375,
          "content": "# OCR Language Packs and Setup\n\nThis document provides instructions on how to add additional language packs for the OCR tab in Stirling-PDF, both inside and outside of Docker.\n\n## My OCR used to work and now doesn't!\n\nThe paths have changed for the tessdata locations on new Docker images. Please use `/usr/share/tessdata` (Others should still work for backward compatibility but might not).\n\n## How does the OCR Work\n\nStirling-PDF uses Tesseract for its text recognition. All credit goes to them for this awesome work!\n\n## Language Packs\n\nTesseract OCR supports a variety of languages. You can find additional language packs in the Tesseract GitHub repositories:\n\n- [tessdata_fast](https://github.com/tesseract-ocr/tessdata_fast): These language packs are smaller and faster to load but may provide lower recognition accuracy.\n- [tessdata](https://github.com/tesseract-ocr/tessdata): These language packs are larger and provide better recognition accuracy, but may take longer to load.\n\nDepending on your requirements, you can choose the appropriate language pack for your use case. By default, Stirling-PDF uses `tessdata_fast` for English, but this can be replaced.\n\n### Installing Language Packs\n\n1. Download the desired language pack(s) by selecting the `.traineddata` file(s) for the language(s) you need.\n2. Place the `.traineddata` files in the Tesseract tessdata directory: `/usr/share/tessdata`\n\n**DO NOT REMOVE EXISTING `eng.traineddata`, IT'S REQUIRED.**\n\n### Docker Setup\n\nIf you are using Docker, you need to expose the Tesseract tessdata directory as a volume in order to use the additional language packs.\n\n#### Docker Compose\n\nModify your `docker-compose.yml` file to include the following volume configuration:\n\n```yaml\nservices:\n  your_service_name:\n    image: your_docker_image_name\n    volumes:\n      - /location/of/trainingData:/usr/share/tessdata\n```\n\n#### Docker Run\n\nAdd the following to your existing Docker run command:\n\n```bash\n-v /location/of/trainingData:/usr/share/tessdata\n```\n\n### Non-Docker Setup\n\nFor Debian-based systems, install languages with this command:\n\n```bash\nsudo apt update &&\\\n# All languages\n# sudo apt install -y 'tesseract-ocr-*'\n\n# Find languages:\napt search tesseract-ocr-\n\n# View installed languages:\ndpkg-query -W tesseract-ocr- | sed 's/tesseract-ocr-//g'\n```\n\nFor Fedora:\n\n```bash\n# All languages\n# sudo dnf install -y tesseract-langpack-*\n\n# Find languages:\ndnf search -C tesseract-langpack-\n\n# View installed languages:\nrpm -qa | grep tesseract-langpack | sed 's/tesseract-langpack-//g'\n```\n\nFor Windows:\n\nYou must ensure tesseract is installed\n\nAdditional languages must be downloaded manually:\nDownload desired .traineddata files from tessdata or tessdata_fast\nPlace them in the tessdata folder within your Tesseract installation directory\n(e.g., C:\\Program Files\\Tesseract-OCR\\tessdata)\n\nVerify installation:\n``tesseract --list-langs``\n\nYou must then edit your ``/configs/settings.yml`` and change the system.tessdataDir to match the directory containing lang files\n\n```\nsystem:\n tessdataDir: C:/Program Files/Tesseract-OCR/tessdata # path to the directory containing the Tessdata files. This setting is relevant for Windows systems. For Windows users, this path should be adjusted to point to the appropriate directory where the Tessdata files are stored.\n```\n  "
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2024 Stirling Tools\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.466796875,
          "content": "<p align=\"center\"><img src=\"https://raw.githubusercontent.com/Stirling-Tools/Stirling-PDF/main/docs/stirling.png\" width=\"80\"></p>\n<h1 align=\"center\">Stirling-PDF</h1>\n\n[![Docker Pulls](https://img.shields.io/docker/pulls/frooodle/s-pdf)](https://hub.docker.com/r/frooodle/s-pdf)\n[![Discord](https://img.shields.io/discord/1068636748814483718?label=Discord)](https://discord.gg/HYmhKj45pU)\n[![Docker Image Version (tag latest semver)](https://img.shields.io/docker/v/frooodle/s-pdf/latest)](https://github.com/Stirling-Tools/Stirling-PDF/)\n[![OpenSSF Scorecard](https://api.scorecard.dev/projects/github.com/Stirling-Tools/Stirling-PDF/badge)](https://scorecard.dev/viewer/?uri=github.com/Stirling-Tools/Stirling-PDF)\n[![GitHub Repo stars](https://img.shields.io/github/stars/stirling-tools/stirling-pdf?style=social)](https://github.com/Stirling-Tools/stirling-pdf)\n\n<a href=\"https://www.producthunt.com/posts/stirling-pdf?embed=true&utm_source=badge-featured&utm_medium=badge&utm_souce=badge-stirling&#0045;pdf\" target=\"_blank\"><img src=\"https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=641239&theme=light\" alt=\"Stirling&#0032;PDF - Open&#0032;source&#0032;locally&#0032;hosted&#0032;web&#0032;PDF&#0032;editor | Product Hunt\" style=\"width: 250px; height: 54px;\" width=\"250\" height=\"54\" /></a>\n[![Deploy to DO](https://www.deploytodo.com/do-btn-blue.svg)](https://cloud.digitalocean.com/apps/new?repo=https://github.com/Stirling-Tools/Stirling-PDF/tree/digitalOcean&refcode=c3210994b1af)\n\n[Stirling-PDF](https://www.stirlingpdf.com) is a robust, locally hosted web-based PDF manipulation tool using Docker. It enables you to carry out various operations on PDF files, including splitting, merging, converting, reorganizing, adding images, rotating, compressing, and more. This locally hosted web application has evolved to encompass a comprehensive set of features, addressing all your PDF requirements.\n\nAll files and PDFs exist either exclusively on the client side, reside in server memory only during task execution, or temporarily reside in a file solely for the execution of the task. Any file downloaded by the user will have been deleted from the server by that point.\n\nHomepage: [https://stirlingpdf.com](https://stirlingpdf.com)\n\nAll documentation available at [https://docs.stirlingpdf.com/](https://docs.stirlingpdf.com/)\n\n![stirling-home](images/stirling-home.jpg)\n\n## Features\n\n- 50+ PDF Operations\n- Parallel file processing and downloads\n- Dark mode support\n- Custom download options\n- Custom 'Pipelines' to run multiple features in a automated queue\n- API for integration with external scripts\n- Optional Login and Authentication support (see [here](https://docs.stirlingpdf.com/Advanced%20Configuration/System%20and%20Security) for documentation)\n- Database Backup and Import (see [here](https://docs.stirlingpdf.com/Advanced%20Configuration/DATABASE) for documentation)\n- Enterprise features like SSO see [here](https://docs.stirlingpdf.com/Enterprise%20Edition)\n\n## PDF Features\n\n### Page Operations\n\n- View and modify PDFs - View multi-page PDFs with custom viewing, sorting, and searching. Plus, on-page edit features like annotating, drawing, and adding text and images. (Using PDF.js with Joxit and Liberation fonts)\n- Full interactive GUI for merging/splitting/rotating/moving PDFs and their pages\n- Merge multiple PDFs into a single resultant file\n- Split PDFs into multiple files at specified page numbers or extract all pages as individual files\n- Reorganize PDF pages into different orders\n- Rotate PDFs in 90-degree increments\n- Remove pages\n- Multi-page layout (format PDFs into a multi-paged page)\n- Scale page contents size by set percentage\n- Adjust contrast\n- Crop PDF\n- Auto-split PDF (with physically scanned page dividers)\n- Extract page(s)\n- Convert PDF to a single page\n- Overlay PDFs on top of each other\n- PDF to a single page\n- Split PDF by sections\n\n### Conversion Operations\n\n- Convert PDFs to and from images\n- Convert any common file to PDF (using LibreOffice)\n- Convert PDF to Word/PowerPoint/others (using LibreOffice)\n- Convert HTML to PDF\n- Convert PDF to XML\n- Convert PDF to CSV\n- URL to PDF\n- Markdown to PDF\n\n### Security & Permissions\n\n- Add and remove passwords\n- Change/set PDF permissions\n- Add watermark(s)\n- Certify/sign PDFs\n- Sanitize PDFs\n- Auto-redact text\n\n### Other Operations\n\n- Add/generate/write signatures\n- Split by Size or PDF\n- Repair PDFs\n- Detect and remove blank pages\n- Compare two PDFs and show differences in text\n- Add images to PDFs\n- Compress PDFs to decrease their filesize (using qpdf)\n- Extract images from PDF\n- Remove images from PDF\n- Extract images from scans\n- Remove annotations\n- Add page numbers\n- Auto-rename files by detecting PDF header text\n- OCR on PDF (using Tesseract OCR)\n- PDF/A conversion (using LibreOffice)\n- Edit metadata\n- Flatten PDFs\n- Get all information on a PDF to view or export as JSON\n- Show/detect embedded JavaScript\n\n\n\n\n# 📖 Get Started\n\nVisit our comprehensive documentation at [docs.stirlingpdf.com](https://docs.stirlingpdf.com) for:\n\n- Installation guides for all platforms\n- Configuration options\n- Feature documentation\n- API reference\n- Security setup\n- Enterprise features\n\n\n## Supported Languages\n\nStirling-PDF currently supports 38 languages!\n\n| Language                                     | Progress                               |\n| -------------------------------------------- | -------------------------------------- |\n| Arabic (العربية) (ar_AR)                        | ![91%](https://geps.dev/progress/91)   |\n| Azerbaijani (Azərbaycan Dili) (az_AZ)        | ![89%](https://geps.dev/progress/89)   |\n| Basque (Euskara) (eu_ES)                     | ![51%](https://geps.dev/progress/51)   |\n| Bulgarian (Български) (bg_BG)                | ![87%](https://geps.dev/progress/87)   |\n| Catalan (Català) (ca_CA)                     | ![81%](https://geps.dev/progress/81)   |\n| Croatian (Hrvatski) (hr_HR)                  | ![88%](https://geps.dev/progress/88)   |\n| Czech (Česky) (cs_CZ)                        | ![88%](https://geps.dev/progress/88)   |\n| Danish (Dansk) (da_DK)                       | ![87%](https://geps.dev/progress/87)   |\n| Dutch (Nederlands) (nl_NL)                   | ![86%](https://geps.dev/progress/86)   |\n| English (English) (en_GB)                    | ![100%](https://geps.dev/progress/100) |\n| English (US) (en_US)                         | ![100%](https://geps.dev/progress/100) |\n| French (Français) (fr_FR)                    | ![93%](https://geps.dev/progress/93)   |\n| German (Deutsch) (de_DE)                     | ![96%](https://geps.dev/progress/96)   |\n| Greek (Ελληνικά) (el_GR)                     | ![87%](https://geps.dev/progress/87)   |\n| Hindi (हिंदी) (hi_IN)                          | ![85%](https://geps.dev/progress/85)   |\n| Hungarian (Magyar) (hu_HU)                   | ![97%](https://geps.dev/progress/97)   |\n| Indonesian (Bahasa Indonesia) (id_ID)        | ![88%](https://geps.dev/progress/88)   |\n| Irish (Gaeilge) (ga_IE)                      | ![80%](https://geps.dev/progress/80)   |\n| Italian (Italiano) (it_IT)                   | ![99%](https://geps.dev/progress/99)   |\n| Japanese (日本語) (ja_JP)                    | ![90%](https://geps.dev/progress/90)   |\n| Korean (한국어) (ko_KR)                      | ![86%](https://geps.dev/progress/86)   |\n| Norwegian (Norsk) (no_NB)                    | ![80%](https://geps.dev/progress/80)   |\n| Persian (فارسی) (fa_IR)                      | ![95%](https://geps.dev/progress/95)   |\n| Polish (Polski) (pl_PL)                      | ![87%](https://geps.dev/progress/87)   |\n| Portuguese (Português) (pt_PT)               | ![87%](https://geps.dev/progress/87)   |\n| Portuguese Brazilian (Português) (pt_BR)     | ![98%](https://geps.dev/progress/98)   |\n| Romanian (Română) (ro_RO)                    | ![82%](https://geps.dev/progress/82)   |\n| Russian (Русский) (ru_RU)                    | ![87%](https://geps.dev/progress/87)   |\n| Serbian Latin alphabet (Srpski) (sr_LATN_RS) | ![64%](https://geps.dev/progress/64)   |\n| Simplified Chinese (简体中文) (zh_CN)         | ![90%](https://geps.dev/progress/90)   |\n| Slovakian (Slovensky) (sk_SK)                | ![75%](https://geps.dev/progress/75)   |\n| Spanish (Español) (es_ES)                    | ![88%](https://geps.dev/progress/88)   |\n| Swedish (Svenska) (sv_SE)                    | ![88%](https://geps.dev/progress/88)   |\n| Thai (ไทย) (th_TH)                           | ![87%](https://geps.dev/progress/87)   |\n| Tibetan (བོད་ཡིག་) (zh_BO)                     | ![96%](https://geps.dev/progress/96) |\n| Traditional Chinese (繁體中文) (zh_TW)        | ![99%](https://geps.dev/progress/99)   |\n| Turkish (Türkçe) (tr_TR)                     | ![83%](https://geps.dev/progress/83)   |\n| Ukrainian (Українська) (uk_UA)               | ![73%](https://geps.dev/progress/73)   |\n| Vietnamese (Tiếng Việt) (vi_VN)              | ![80%](https://geps.dev/progress/80)   |\n\n\n## Stirling PDF Enterprise\n\nStirling PDF offers an Enterprise edition of its software. This is the same great software but with added features, support and comforts.\nCheck out our [Enterprise docs](https://docs.stirlingpdf.com/Enterprise%20Edition)\n\n\n## 🤝 Looking to contribute?\n\nJoin our community:\n- [Contribution Guidelines](CONTRIBUTING.md)\n- [Translation Guide (How to add custom languages)](HowToAddNewLanguage.md)\n- [Issue Tracker](https://github.com/Stirling-Tools/Stirling-PDF/issues)\n- [Discord Community](https://discord.gg/HYmhKj45pU)\n- [Developer Guide](DeveloperGuide.md)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.158203125,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nThe Stirling-PDF team takes security vulnerabilities seriously. We appreciate your efforts to responsibly disclose your findings.\n\n### How to Report\n\nYou can report security vulnerabilities through two channels:\n\n1. **GitHub Security Advisory**:\n   - Navigate to the [Security tab](https://github.com/Stirling-Tools/Stirling-PDF/security) in our repository\n   - Click on \"Report a vulnerability\"\n   - Provide a detailed description of the vulnerability\n\n2. **Direct Email**:\n   - Send your report to security@stirlingpdf.com\n   - Please include as much information as possible about the vulnerability\n\n### What to Include\n\nWhen reporting a vulnerability, please provide:\n\n- A clear description of the vulnerability\n- Steps to reproduce the issue\n- Any potential impact\n- If possible, suggestions for addressing the vulnerability\n- Your contact information for follow-up questions\n\n### Response Time\n\nWe aim to acknowledge receipt of your vulnerability report within 48 hours\n\n### Process\n\n1. Submit your report through one of the channels above\n2. Receive an acknowledgment from our team\n3. Our team will investigate and validate the issue\n4. We will work on a fix and keep you updated on our progress\n5. Once resolved, we will publish the fix and acknowledge your contribution (if desired)\n\n### Bug Bounty\n\nAt this time, we do not offer a bug bounty program. However, we greatly appreciate your efforts in making Stirling-PDF more secure and will acknowledge your contribution in our release notes (unless you prefer to remain anonymous).\n\n## Supported Versions\n\nOnly the latest version of Stirling-PDF is supported for security updates. We do not backport security fixes to older versions.\n\n| Version | Supported          |\n| ------- | ------------------ |\n| Latest  | :white_check_mark: |\n| Older   | :x:               |\n\n**Please note:** Before reporting a security issue, ensure you are using the latest version of Stirling-PDF. Security reports for older versions will not be accepted.\n\n## Security Best Practices\n\nWhen deploying Stirling-PDF:\n\n1. Always use the latest version\n2. Follow our deployment guidelines\n3. Regularly check for and apply updates\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 16.3076171875,
          "content": "plugins {\n    id \"java\"\n    id \"org.springframework.boot\" version \"3.4.1\"\n    id \"io.spring.dependency-management\" version \"1.1.7\"\n    id \"org.springdoc.openapi-gradle-plugin\" version \"1.8.0\"\n    id \"io.swagger.swaggerhub\" version \"1.3.2\"\n    id \"edu.sc.seis.launch4j\" version \"3.0.6\"\n    id \"com.diffplug.spotless\" version \"7.0.1\"\n    id \"com.github.jk1.dependency-license-report\" version \"2.9\"\n\t//id \"nebula.lint\" version \"19.0.3\"\n\tid(\"org.panteleyev.jpackageplugin\") version \"1.6.0\"\n}\n\n\n\nimport com.github.jk1.license.render.*\n\next {\n    springBootVersion = \"3.4.1\"\n    pdfboxVersion = \"3.0.3\"\n    logbackVersion = \"1.5.7\"\n    imageioVersion = \"3.12.0\"\n    lombokVersion = \"1.18.36\"\n    bouncycastleVersion = \"1.79\"\n    springSecuritySamlVersion = \"6.4.2\"\n    openSamlVersion = \"4.3.2\"\n}\n\ngroup = \"stirling.software\"\nversion = \"0.37.0\"\n\n\njava {\n    // 17 is lowest but we support and recommend 21\n    sourceCompatibility = JavaVersion.VERSION_17\n}\n\nrepositories {\n    mavenCentral()\n    maven { url \"https://jitpack.io\" }\n    maven { url \"https://build.shibboleth.net/maven/releases\" }\n    maven { url \"https://maven.pkg.github.com/jcefmaven/jcefmaven\" }\n\n}\n\nlicenseReport {\n    renderers = [new JsonReportRenderer()]\n}\n\nsourceSets {\n    main {\n        java {\n            if (System.getenv(\"DOCKER_ENABLE_SECURITY\") == \"false\") {\n                exclude \"stirling/software/SPDF/config/security/**\"\n                exclude \"stirling/software/SPDF/controller/api/DatabaseController.java\"\n                exclude \"stirling/software/SPDF/controller/api/UserController.java\"\n                exclude \"stirling/software/SPDF/controller/api/H2SQLCondition.java\"\n                exclude \"stirling/software/SPDF/controller/web/AccountWebController.java\"\n                exclude \"stirling/software/SPDF/controller/web/DatabaseWebController.java\"\n                exclude \"stirling/software/SPDF/model/ApiKeyAuthenticationToken.java\"\n                exclude \"stirling/software/SPDF/model/AttemptCounter.java\"\n                exclude \"stirling/software/SPDF/model/Authority.java\"\n                exclude \"stirling/software/SPDF/model/BackupNotFoundException.java\"\n                exclude \"stirling/software/SPDF/model/PersistentLogin.java\"\n                exclude \"stirling/software/SPDF/model/SessionEntity.java\"\n                exclude \"stirling/software/SPDF/model/User.java\"\n                exclude \"stirling/software/SPDF/repository/**\"\n            }\n\n            if (System.getenv(\"STIRLING_PDF_DESKTOP_UI\") == \"false\") {\n            \texclude \"stirling/software/SPDF/UI/impl/**\"\n            }\n\n        }\n    }\n\n    test {\n        java {\n            if (System.getenv(\"DOCKER_ENABLE_SECURITY\") == \"false\") {\n                exclude \"stirling/software/SPDF/config/security/**\"\n                exclude \"stirling/software/SPDF/controller/api/UserControllerTest.java\"\n                exclude \"stirling/software/SPDF/controller/api/DatabaseControllerTest.java\"\n                exclude \"stirling/software/SPDF/controller/web/AccountWebControllerTest.java\"\n                exclude \"stirling/software/SPDF/controller/web/DatabaseWebControllerTest.java\"\n                exclude \"stirling/software/SPDF/model/ApiKeyAuthenticationTokenTest.java\"\n                exclude \"stirling/software/SPDF/model/AttemptCounterTest.java\"\n                exclude \"stirling/software/SPDF/model/AuthorityTest.java\"\n                exclude \"stirling/software/SPDF/model/PersistentLoginTest.java\"\n                exclude \"stirling/software/SPDF/model/SessionEntityTest.java\"\n                exclude \"stirling/software/SPDF/model/UserTest.java\"\n                exclude \"stirling/software/SPDF/repository/**\"\n            }\n\n            if (System.getenv(\"STIRLING_PDF_DESKTOP_UI\") == \"false\") {\n                exclude \"stirling/software/SPDF/UI/impl/**\"\n            }\n        }\n    }\n}\n\nopenApi {\n    apiDocsUrl = \"http://localhost:8080/v1/api-docs\"\n    outputDir = file(\"$projectDir\")\n    outputFileName = \"SwaggerDoc.json\"\n}\n\n//0.11.5 to 2024.11.5\ndef getMacVersion(String version) {\n    def currentYear = java.time.Year.now().getValue()\n    def versionParts = version.split(\"\\\\.\", 2)\n    return \"${currentYear}.${versionParts.length > 1 ? versionParts[1] : versionParts[0]}\"\n}\n\njpackage {\n    input = \"build/libs\"\n\n    appName = \"Stirling-PDF\"\n    appVersion = project.version\n    vendor = \"Stirling-Software\"\n\tappDescription = \"Stirling PDF - Your Local PDF Editor\"\n\n    mainJar = \"Stirling-PDF-${project.version}.jar\"\n    mainClass = \"org.springframework.boot.loader.launch.JarLauncher\"\n\n    icon = \"src/main/resources/static/favicon.ico\"\n\n\n\n    // JVM Options\n    javaOptions = [\n        \"-DBROWSER_OPEN=true\",\n        \"-DSTIRLING_PDF_DESKTOP_UI=true\",\n        \"-Djava.awt.headless=false\",\n        \"-Dapple.awt.UIElement=true\",\n        \"--add-opens\", \"java.base/java.lang=ALL-UNNAMED\",\n        \"--add-opens\", \"java.desktop/java.awt.event=ALL-UNNAMED\",\n        \"--add-opens\", \"java.desktop/sun.awt=ALL-UNNAMED\"\n\n    ]\n\n\n    verbose = true\n\n    destination = \"${projectDir}/build/jpackage\"\n\n    // Windows-specific configuration\n    windows {\n    \tlauncherAsService = false\n    \tappVersion = project.version\n\n    \twinConsole = false\n        winMenu = true  // Creates start menu entry\n        winShortcut = true  // Creates desktop shortcut\n        winShortcutPrompt = true  // Lets user choose whether to create shortcuts\n        winDirChooser = true  // Allows users to choose installation directory\n        winPerUserInstall = false\n        winMenuGroup = \"Stirling Software\"\n        winUpgradeUuid = \"2a43ed0c-b8c2-40cf-89e1-751129b87641\" // Unique identifier for updates\n        winHelpUrl = \"https://github.com/Stirling-Tools/Stirling-PDF\"\n        winUpdateUrl = \"https://github.com/Stirling-Tools/Stirling-PDF/releases\"\n        type = \"exe\"\n        installDir = \"C:/Program Files/Stirling-PDF\"\n    }\n\n    // macOS-specific configuration\n    mac {\n    \tappVersion = getMacVersion(project.version.toString())\n        icon = \"src/main/resources/static/favicon.icns\"\n        type = \"dmg\"\n        macPackageIdentifier = \"com.stirling.software.pdf\"\n        macPackageName = \"Stirling-PDF\"\n        macAppCategory = \"public.app-category.productivity\"\n        macSign = false // Enable signing\n        macAppStore = false // Not targeting App Store initially\n\n        //installDir = \"Applications\"\n\n        // Add license and other documentation to DMG\n        /*macDmgContent = [\n            \"README.md\",\n            \"LICENSE\",\n            \"CHANGELOG.md\"\n        ]*/\n\n        // Enable Mac-specific entitlements\n        //macEntitlements = \"entitlements.plist\" // You'll need to create this file\n    }\n\n    // Linux-specific configuration\n    linux {\n    \tappVersion = project.version\n        icon = \"src/main/resources/static/favicon.png\"\n        type = \"deb\" // Can also use \"rpm\" for Red Hat-based systems\n\n        // Debian package configuration\n        //linuxPackageName = \"stirlingpdf\"\n        linuxDebMaintainer = \"support@stirlingpdf.com\"\n        linuxMenuGroup = \"Office;PDF;Productivity\"\n        linuxAppCategory = \"Office\"\n        linuxAppRelease = \"1\"\n        linuxPackageDeps = true\n\n        installDir = \"/opt/Stirling-PDF\"\n\n        // RPM-specific settings\n        //linuxRpmLicenseType = \"MIT\"\n    }\n\n    // Common additional options\n    //jLinkOptions = [\n    //    \"--strip-debug\",\n    //    \"--compress=2\",\n    //    \"--no-header-files\",\n    //    \"--no-man-pages\"\n    //]\n\n    // Add any additional modules required\n    /*addModules = [\n        \"java.base\",\n        \"java.desktop\",\n        \"java.logging\",\n        \"java.sql\",\n        \"java.xml\",\n        \"jdk.crypto.ec\"\n    ]*/\n\n    // Add copyright and license information\n    copyright = \"Copyright © 2024 Stirling Software\"\n    licenseFile = \"LICENSE\"\n}\n\n\nlaunch4j {\n    icon = \"${projectDir}/src/main/resources/static/favicon.ico\"\n\n    outfile=\"Stirling-PDF.exe\"\n\n    if(System.getenv(\"STIRLING_PDF_DESKTOP_UI\") == 'true') {\n    \theaderType = \"gui\"\n    } else {\n    \theaderType = \"console\"\n    }\n    jarTask = tasks.bootJar\n\n    errTitle=\"Encountered error, Do you have Java 21?\"\n    downloadUrl=\"https://download.oracle.com/java/21/latest/jdk-21_windows-x64_bin.exe\"\n\n    if(System.getenv(\"STIRLING_PDF_DESKTOP_UI\") == 'true') {\n    \tvariables=[\"BROWSER_OPEN=true\", \"STIRLING_PDF_DESKTOP_UI=true\"]\n    } else {\n    \tvariables=[\"BROWSER_OPEN=true\"]\n    }\n\n\n\n    jreMinVersion=\"17\"\n\n    mutexName=\"Stirling-PDF\"\n    windowTitle=\"Stirling-PDF\"\n\n    messagesStartupError=\"An error occurred while starting Stirling-PDF\"\n    // messagesJreNotFoundError=\"This application requires a Java Runtime Environment, Please download Java 17.\"\n    messagesJreVersionError=\"You are running the wrong version of Java, Please download Java 21.\"\n    messagesLauncherError=\"Java is corrupted. Please uninstall and then install  Java 21.\"\n    messagesInstanceAlreadyExists=\"Stirling-PDF is already running.\"\n}\n\nspotless {\n    java {\n        target project.fileTree('src/main/java')\n\n        googleJavaFormat(\"1.25.2\").aosp().reorderImports(false)\n\n        importOrder(\"java\", \"javax\", \"org\", \"com\", \"net\", \"io\")\n        toggleOffOn()\n        trimTrailingWhitespace()\n        indentWithSpaces()\n        endWithNewline()\n    }\n}\n\n//gradleLint {\n//        rules=['unused-dependency']\n//    }\ntasks.wrapper {\n    gradleVersion = \"8.12\"\n}\n//tasks.withType(JavaCompile) {\n//    options.compilerArgs << \"-Xlint:deprecation\"\n//}\nconfigurations.all {\n    exclude group: \"org.springframework.boot\", module: \"spring-boot-starter-tomcat\"\n}\ndependencies {\n\n\tif (System.getenv(\"STIRLING_PDF_DESKTOP_UI\") != \"false\") {\n\t\timplementation \"me.friwi:jcefmaven:127.3.1\"\n\t    implementation \"org.openjfx:javafx-controls:21\"\n\t    implementation \"org.openjfx:javafx-swing:21\"\n    }\n\n    //security updates\n    implementation \"org.springframework:spring-webmvc:6.2.1\"\n\n    implementation(\"io.github.pixee:java-security-toolkit:1.2.1\")\n\n    // implementation \"org.yaml:snakeyaml:2.2\"\n    implementation 'com.github.Carleslc.Simple-YAML:Simple-Yaml:1.8.4'\n\n    // Exclude Tomcat and include Jetty\n    implementation(\"org.springframework.boot:spring-boot-starter-web:$springBootVersion\")\n    implementation \"org.springframework.boot:spring-boot-starter-jetty:$springBootVersion\"\n\n    implementation \"org.springframework.boot:spring-boot-starter-thymeleaf:$springBootVersion\"\n    implementation 'com.posthog.java:posthog:1.1.1'\n    implementation 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20240325.1'\n\n\n    if (System.getenv(\"DOCKER_ENABLE_SECURITY\") != \"false\") {\n        implementation \"org.springframework.boot:spring-boot-starter-security:$springBootVersion\"\n        implementation \"org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.1.3.RELEASE\"\n        implementation \"org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion\"\n        implementation \"org.springframework.boot:spring-boot-starter-oauth2-client:$springBootVersion\"\n\n\t\timplementation \"org.springframework.session:spring-session-core:$springBootVersion\"\n        implementation \"org.springframework:spring-jdbc:6.2.1\"\n\n\t    implementation 'com.unboundid.product.scim2:scim2-sdk-client:2.3.5'\n        // Don't upgrade h2database\n        runtimeOnly \"com.h2database:h2:2.3.232\"\n        runtimeOnly \"org.postgresql:postgresql:42.7.4\"\n        constraints {\n            implementation \"org.opensaml:opensaml-core:$openSamlVersion\"\n            implementation \"org.opensaml:opensaml-saml-api:$openSamlVersion\"\n            implementation \"org.opensaml:opensaml-saml-impl:$openSamlVersion\"\n        }\n        implementation \"org.springframework.security:spring-security-saml2-service-provider:$springSecuritySamlVersion\"\n//\t\timplementation 'org.springframework.security:spring-security-core:$springSecuritySamlVersion'\n        implementation 'com.coveo:saml-client:5.0.0'\n\n\n    }\n\n    testImplementation \"org.springframework.boot:spring-boot-starter-test:$springBootVersion\"\n\n    // Batik\n    implementation \"org.apache.xmlgraphics:batik-all:1.18\"\n\n    // TwelveMonkeys\n    runtimeOnly \"com.twelvemonkeys.imageio:imageio-batik:$imageioVersion\"\n    runtimeOnly \"com.twelvemonkeys.imageio:imageio-bmp:$imageioVersion\"\n    // runtimeOnly \"com.twelvemonkeys.imageio:imageio-hdr:$imageioVersion\"\n    // runtimeOnly \"com.twelvemonkeys.imageio:imageio-icns:$imageioVersion\"\n    // runtimeOnly \"com.twelvemonkeys.imageio:imageio-iff:$imageioVersion\"\n    runtimeOnly \"com.twelvemonkeys.imageio:imageio-jpeg:$imageioVersion\"\n    // runtimeOnly \"com.twelvemonkeys.imageio:imageio-pcx:$imageioVersion@\n    // runtimeOnly \"com.twelvemonkeys.imageio:imageio-pict:$imageioVersion\"\n    // runtimeOnly \"com.twelvemonkeys.imageio:imageio-pnm:$imageioVersion\"\n    // runtimeOnly \"com.twelvemonkeys.imageio:imageio-psd:$imageioVersion\"\n    // runtimeOnly \"com.twelvemonkeys.imageio:imageio-sgi:$imageioVersion\"\n    // runtimeOnly \"com.twelvemonkeys.imageio:imageio-tga:$imageioVersion\"\n    // runtimeOnly \"com.twelvemonkeys.imageio:imageio-thumbsdb:$imageioVersion\"\n    runtimeOnly \"com.twelvemonkeys.imageio:imageio-tiff:$imageioVersion\"\n    runtimeOnly \"com.twelvemonkeys.imageio:imageio-webp:$imageioVersion\"\n    // runtimeOnly \"com.twelvemonkeys.imageio:imageio-xwd:$imageioVersion\"\n\n    // Image metadata extractor\n    implementation \"com.drewnoakes:metadata-extractor:2.19.0\"\n\n    implementation \"commons-io:commons-io:2.18.0\"\n    implementation \"org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0\"\n    //general PDF\n\n    // https://mvnrepository.com/artifact/com.opencsv/opencsv\n    implementation (\"com.opencsv:opencsv:5.9\") {\n        exclude group: \"commons-logging\", module: \"commons-logging\"\n    }\n\n    implementation (\"org.apache.pdfbox:pdfbox:$pdfboxVersion\") {\n        exclude group: \"commons-logging\", module: \"commons-logging\"\n    }\n\n    implementation (\"org.apache.pdfbox:xmpbox:$pdfboxVersion\") {\n        exclude group: \"commons-logging\", module: \"commons-logging\"\n    }\n\n    // https://mvnrepository.com/artifact/technology.tabula/tabula\n    implementation ('technology.tabula:tabula:1.0.5')  {\n        exclude group: \"org.slf4j\", module: \"slf4j-simple\"\n        exclude group: \"org.bouncycastle\", module: \"bcprov-jdk15on\"\n        exclude group: \"com.google.code.gson\", module: \"gson\"\n    }\n\n    implementation 'org.apache.pdfbox:jbig2-imageio:3.0.4'\n\n    implementation \"org.bouncycastle:bcprov-jdk18on:$bouncycastleVersion\"\n    implementation \"org.bouncycastle:bcpkix-jdk18on:$bouncycastleVersion\"\n    implementation \"org.springframework.boot:spring-boot-starter-actuator:$springBootVersion\"\n    implementation \"io.micrometer:micrometer-core:1.14.2\"\n    implementation group: \"com.google.zxing\", name: \"core\", version: \"3.5.3\"\n    // https://mvnrepository.com/artifact/org.commonmark/commonmark\n    implementation \"org.commonmark:commonmark:0.24.0\"\n    implementation \"org.commonmark:commonmark-ext-gfm-tables:0.24.0\"\n    // https://mvnrepository.com/artifact/com.bucket4j/bucket4j_jdk17\n    implementation \"com.bucket4j:bucket4j_jdk17-core:8.14.0\"\n    implementation \"com.fathzer:javaluator:3.0.5\"\n\n    developmentOnly(\"org.springframework.boot:spring-boot-devtools:$springBootVersion\")\n    compileOnly \"org.projectlombok:lombok:$lombokVersion\"\n    annotationProcessor \"org.projectlombok:lombok:$lombokVersion\"\n\n    testRuntimeOnly 'org.mockito:mockito-inline:5.2.0'\n}\n\ntasks.withType(JavaCompile).configureEach {\n    options.encoding = \"UTF-8\"\n    dependsOn \"spotlessApply\"\n}\ncompileJava {\n    options.compilerArgs << \"-parameters\"\n}\n\ntask writeVersion {\n    def propsFile = file(\"src/main/resources/version.properties\")\n    def props = new Properties()\n    props.setProperty(\"version\", version)\n    props.store(propsFile.newWriter(), null)\n}\n\nswaggerhubUpload {\n    //dependsOn generateOpenApiDocs  // Depends on your task generating Swagger docs\n    api \"Stirling-PDF\"  // The name of your API on SwaggerHub\n    owner \"Frooodle\"  // Your SwaggerHub username (or organization name)\n    version project.version  // The version of your API\n    inputFile \"./SwaggerDoc.json\"  // The path to your Swagger docs\n    token  \"${System.getenv(\"SWAGGERHUB_API_KEY\")}\"  // Your SwaggerHub API key, passed as an environment variable\n    oas \"3.0.0\"  // The version of the OpenAPI Specification you\"re using\n}\n\njar {\n    enabled = false\n    manifest {\n        attributes \"Implementation-Title\": \"Stirling-PDF\",\n                   \"Implementation-Version\": project.version\n    }\n\n}\n\ntasks.named(\"test\") {\n    useJUnitPlatform()\n}\ntask printVersion {\n    doLast {\n        println project.version\n    }\n}\n\ntask printMacVersion {\n    doLast {\n        println getMacVersion(project.version.toString())\n    }\n}\n"
        },
        {
          "name": "cucumber",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "exampleYmlFiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.2421875,
          "content": "# Enables parallel execution of tasks, allowing multiple tasks to run simultaneously\norg.gradle.parallel=true\n\n# Enables build caching to reuse outputs from previous builds for faster execution\n# org.gradle.caching=true\n\norg.gradle.build-scan=true\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.5576171875,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.8046875,
          "content": "@rem\n@rem Copyright 2015 the original author or authors.\n@rem\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\n@rem you may not use this file except in compliance with the License.\n@rem You may obtain a copy of the License at\n@rem\n@rem      https://www.apache.org/licenses/LICENSE-2.0\n@rem\n@rem Unless required by applicable law or agreed to in writing, software\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@rem See the License for the specific language governing permissions and\n@rem limitations under the License.\n@rem\n@rem SPDX-License-Identifier: Apache-2.0\n@rem\n\n@if \"%DEBUG%\"==\"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\n@rem This is normally unused\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif %ERRORLEVEL% equ 0 goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto execute\n\necho. 1>&2\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\necho. 1>&2\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\necho location of your Java installation. 1>&2\n\ngoto fail\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\n\n:end\n@rem End local scope for the variables with windows NT shell\nif %ERRORLEVEL% equ 0 goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nset EXIT_CODE=%ERRORLEVEL%\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\nexit /b %EXIT_CODE%\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "lauch4jConfig.xml",
          "type": "blob",
          "size": 1.4384765625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<launch4jConfig>\n  <dontWrapJar>false</dontWrapJar>\n  <headerType>console</headerType>\n  <jar>.\\build\\libs\\S-PDF-0.10.1.jar</jar>\n  <outfile>.\\Stirling-PDF.exe</outfile>\n  <errTitle>Please download Java17</errTitle>\n  <cmdLine></cmdLine>\n  <chdir>.</chdir>\n  <priority>normal</priority>\n  <downloadUrl>https://download.oracle.com/java/17/latest/jdk-17_windows-x64_bin.exe</downloadUrl>\n  <supportUrl></supportUrl>\n  <stayAlive>false</stayAlive>\n  <restartOnCrash>false</restartOnCrash>\n  <manifest></manifest>\n  <icon>./src/main/resources/static/favicon.ico</icon>\n  <var>BROWSER_OPEN=true</var>\n  <singleInstance>\n    <mutexName>Stirling-PDF</mutexName>\n    <windowTitle>Stirling-PDF</windowTitle>\n  </singleInstance>\n  <jre>\n    <path>%JAVA_HOME%;%PATH%</path>\n    <requiresJdk>false</requiresJdk>\n    <requires64Bit>false</requires64Bit>\n    <minVersion>17</minVersion>\n    <maxVersion></maxVersion>\n  </jre>\n  <messages>\n    <startupErr>An error occurred while starting Stirling-PDF</startupErr>\n    <jreNotFoundErr>This application requires a Java Runtime Environment, Please download Java 17.</jreNotFoundErr>\n    <jreVersionErr>You are running the wrong version of Java, Please download Java 17.</jreVersionErr>\n    <launcherErr>Java is corrupted. Please uninstall and then install  Java 17.</launcherErr>\n    <instanceAlreadyExistsMsg>Stirling-PDF is already running.</instanceAlreadyExistsMsg>\n  </messages>\n</launch4jConfig>"
        },
        {
          "name": "pipeline",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 0.033203125,
          "content": "rootProject.name = 'Stirling-PDF'\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 4.6806640625,
          "content": "#!/bin/bash\n\n# Function to check the health of the service with a timeout of 80 seconds\ncheck_health() {\n    local service_name=$1\n    local compose_file=$2\n    local end=$((SECONDS+60))\n\n    echo -n \"Waiting for $service_name to become healthy...\"\n\tuntil [ \"$(docker inspect --format='{{json .State.Health.Status}}' \"$service_name\")\" == '\"healthy\"' ] || [ $SECONDS -ge $end ]; do\n\t\tsleep 3\n\t\techo -n \".\"\n\t\tif [ $SECONDS -ge $end ]; then\n\t\t\techo -e \"\\n$service_name health check timed out after 80 seconds.\"\n\t\t\techo \"Printing logs for $service_name:\"\n            docker logs \"$service_name\"\n\t\t\treturn 1\n\t\tfi\n\tdone\n\techo -e \"\\n$service_name is healthy!\"\n\techo \"Printing logs for $service_name:\"\n    docker logs \"$service_name\"\n    return 0\n}\n\n# Function to test a Docker Compose configuration\ntest_compose() {\n    local compose_file=$1\n    local service_name=$2\n    local status=0\n\n    echo \"Testing $compose_file configuration...\"\n\n    # Start up the Docker Compose service\n    docker-compose -f \"$compose_file\" up -d\n\n    # Wait for the service to become healthy\n    if check_health \"$service_name\" \"$compose_file\"; then\n        echo \"$service_name test passed.\"\n    else\n        echo \"$service_name test failed.\"\n        status=1\n    fi\n\n    return $status\n}\n\n# Keep track of which tests passed and failed\ndeclare -a passed_tests\ndeclare -a failed_tests\n\nrun_tests() {\n    local test_name=$1\n    local compose_file=$2\n\n    if test_compose \"$compose_file\" \"$test_name\"; then\n        passed_tests+=(\"$test_name\")\n    else\n        failed_tests+=(\"$test_name\")\n    fi\n}\n\n# Main testing routine\nmain() {\n\tSECONDS=0\n\n    export DOCKER_ENABLE_SECURITY=false\n    # Run the gradlew build command and check if it fails\n    if ! ./gradlew clean build; then\n        echo \"Gradle build failed with security disabled, exiting script.\"\n        exit 1\n    fi\n\n\n    # Building Docker images\n    # docker build --no-cache --pull --build-arg VERSION_TAG=alpha -t stirlingtools/stirling-pdf:latest -f ./Dockerfile .\n    docker build --no-cache --pull --build-arg VERSION_TAG=alpha -t stirlingtools/stirling-pdf:latest-ultra-lite -f ./Dockerfile.ultra-lite .\n\t\n    # Test each configuration\n    run_tests \"Stirling-PDF-Ultra-Lite\" \"./exampleYmlFiles/docker-compose-latest-ultra-lite.yml\"\n\tdocker-compose -f \"./exampleYmlFiles/docker-compose-latest-ultra-lite.yml\" down\n\t\n\n    #run_tests \"Stirling-PDF\" \"./exampleYmlFiles/docker-compose-latest.yml\"\n\t#docker-compose -f \"./exampleYmlFiles/docker-compose-latest.yml\" down\n\n    export DOCKER_ENABLE_SECURITY=true\n    # Run the gradlew build command and check if it fails\n    if ! ./gradlew clean build; then\n        echo \"Gradle build failed with security enabled, exiting script.\"\n        exit 1\n    fi\n\n\n    # Building Docker images with security enabled\n   # docker build --no-cache --pull --build-arg VERSION_TAG=alpha -t stirlingtools/stirling-pdf:latest -f ./Dockerfile .\n #   docker build --no-cache --pull --build-arg VERSION_TAG=alpha -t stirlingtools/stirling-pdf:latest-ultra-lite -f ./Dockerfile.ultra-lite .\n    docker build --no-cache --pull --build-arg VERSION_TAG=alpha -t stirlingtools/stirling-pdf:latest-fat -f ./Dockerfile.fat .\n    \n    \n    # Test each configuration with security\n  #  run_tests \"Stirling-PDF-Ultra-Lite-Security\" \"./exampleYmlFiles/docker-compose-latest-ultra-lite-security.yml\"\n\t#docker-compose -f \"./exampleYmlFiles/docker-compose-latest-ultra-lite-security.yml\" down\n  #  run_tests \"Stirling-PDF-Security\" \"./exampleYmlFiles/docker-compose-latest-security.yml\"\n#\tdocker-compose -f \"./exampleYmlFiles/docker-compose-latest-security.yml\" down\n\n\trun_tests \"Stirling-PDF-Security-Fat\" \"./exampleYmlFiles/test_cicd.yml\"\n\tif [ $? -eq 0 ]; then\n\t\tcd cucumber\n\t\tif python -m behave; then\n\t\t\tpassed_tests+=(\"Stirling-PDF-Regression\")\n\t\telse\n\t\t\tfailed_tests+=(\"Stirling-PDF-Regression\")\n\t\t\techo \"Printing docker logs of failed regression\"\n\t\t\tdocker logs \"Stirling-PDF-Security-Fat\"\n\t\t\techo \"Printed docker logs of failed regression\"\n\t\tfi\n\t\tcd ..\n\tfi\n\tdocker-compose -f \"./exampleYmlFiles/docker-compose-latest-fat-security.yml\" down\n\t\n    # Report results\n    echo \"All tests completed in $SECONDS seconds.\"\n\n\n\tif [ ${#passed_tests[@]} -ne 0 ]; then\n\t\techo \"Passed tests:\"\n\tfi\n    for test in \"${passed_tests[@]}\"; do\n        echo -e \"\\e[32m$test\\e[0m\"  # Green color for passed tests\n    done\n\n\tif [ ${#failed_tests[@]} -ne 0 ]; then\n\t\techo \"Failed tests:\"\n\tfi\n    for test in \"${failed_tests[@]}\"; do\n        echo -e \"\\e[31m$test\\e[0m\"  # Red color for failed tests\n    done\n\n\n\n    # Check if there are any failed tests and exit with an error code if so\n    if [ ${#failed_tests[@]} -ne 0 ]; then\n        echo \"Some tests failed.\"\n        exit 1\n    else\n        echo \"All tests passed successfully.\"\n        exit 0\n    fi\n\n}\n\nmain"
        },
        {
          "name": "test2.sh",
          "type": "blob",
          "size": 3.7578125,
          "content": "#!/bin/bash\n\n# Default values\nbuild_type=\"full\"\nenable_security=\"false\"\nrun_compose=\"true\"\n\n# Function to parse command line arguments\nparse_args() {\n    case \"$1\" in\n        \"\"|-lite|-ultra-lite) build_type=\"$1\";;\n    esac\n\n    case \"$2\" in\n        true|false) enable_security=\"$2\";;\n    esac\n\n    case \"$3\" in\n        true|false) run_compose=\"$3\";;\n    esac\n}\n\n# Function to check the health of the service with a timeout of 80 seconds\ncheck_health() {\n    local service_name=$1\n    local compose_file=$2\n    local end=$((SECONDS+80))  # Fixed the timeout to be 80 seconds as per the function comment\n\n    echo -n \"Waiting for $service_name to become healthy...\"\n    until [ \"$(docker inspect --format='{{json .State.Health.Status}}' \"$service_name\")\" == '\"healthy\"' ] || [ $SECONDS -ge $end ]; do\n        sleep 3\n        echo -n \".\"\n        if [ $SECONDS -ge $end ]; then\n            echo -e \"\\n$service_name health check timed out after 80 seconds.\"\n            echo \"Printing logs for $service_name:\"\n            docker logs \"$service_name\"\n            return 1\n        fi\n    done\n    echo -e \"\\n$service_name is healthy!\"\n    echo \"Printing logs for $service_name:\"\n    docker logs \"$service_name\"\n    return 0\n}\n\n# Function to build and test a Docker Compose configuration\n# Function to build and test a Docker Compose configuration\n# Function to build and test a Docker Compose configuration\nbuild_and_test() {\n    local version_tag=\"alpha\"\n    local dockerfile_name=\"./Dockerfile\"\n    local image_base=\"stirlingtools/stirling-pdf\"\n    local security_suffix=\"\"\n    local docker_compose_base=\"./exampleYmlFiles/docker-compose-latest\"\n    local compose_suffix=\".yml\"\n    local service_name_base=\"Stirling-PDF\"\n\n    if [ \"$enable_security\" == \"true\" ]; then\n        security_suffix=\"-Security\"\n        docker_compose_base+=\"-security\"  # Append to base name for Docker Compose files with security\n    fi\n\n    case \"$build_type\" in\n        full)\n            dockerfile_name=\"./Dockerfile\"\n            ;;\n        ultra-lite)\n            dockerfile_name=\"./Dockerfile.ultra-lite\"\n            ;;\n    esac\n\n    # Dynamic image tag and service name based on build type and security\n    local image_tag=\"${image_base}:latest${build_type}${security_suffix}\"\n    local service_name=\"${service_name_base}${build_type^}${security_suffix}\"\n    local compose_file=\"${docker_compose_base}${build_type}${compose_suffix}\"\n\n    # Gradle build with or without security\n    echo \"Running ./gradlew clean build with security=$enable_security...\"\n    ./gradlew clean build\n\n    if [ $? -ne 0 ]; then\n        echo \"Gradle build failed, exiting script.\"\n        exit 1\n    fi\n\n    # Building Docker image\n    echo \"Building Docker image $image_tag with Dockerfile $dockerfile_name...\"\n    docker build --build-arg VERSION_TAG=$version_tag -t $image_tag -f $dockerfile_name .\n\n    if [ \"$run_compose\" == \"true\" ]; then\n        echo \"Running Docker Compose for $build_type with security=$enable_security...\"\n        docker-compose -f \"$compose_file\" up -d\n\n        # Health check using the dynamic service name\n        if ! check_health \"$service_name\" \"$compose_file\"; then\n            echo \"$service_name health check failed.\"\n            docker-compose -f \"$compose_file\" down\n            exit 1\n        else\n\t\t\t# If the health check passes, prompt the user to press any key to tear down the service\n\t\t\tread -n 1 -s -r -p \"Health check passed. Press any key to tear down the service.\"\n\t\t\techo \"\"  # Move to a new line\n\n\t\t\t# Tear down the service\n\t\t\tdocker-compose -f \"$compose_file\" down\n\t\tfi\n\n        # Tear down the service after the health check passes\n        #docker-compose -f \"$compose_file\" down\n    fi\n}\n\n\n\n# Main function\nmain() {\n    SECONDS=0\n    parse_args \"$@\"\n    build_and_test\n    echo \"All operations completed in $SECONDS seconds.\"\n}\n\nmain \"$@\"\n"
        }
      ]
    }
  ]
}