{
  "metadata": {
    "timestamp": 1736712253300,
    "page": 998,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjEwMDA=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "JamesHeinrich/getID3",
      "stars": 1162,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1103515625,
          "content": "; top-most EditorConfig file\nroot = true\n\n; Unix-style newlines\n[*]\nend_of_line = LF\n\n[*.php]\nindent_style = tab\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.7685546875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n*.sln    merge=union\n*.csproj merge=union\n*.vbproj merge=union\n*.fsproj merge=union\n*.dbproj merge=union\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n\n.editorconfig export-ignore\n.gitattributes export-ignore\n/.github/ export-ignore\n.gitignore export-ignore\n.phpcs.xml export-ignore\nbuild/ export-ignore\ncomposer.json export-ignore\nDoxyfile export-ignore\nphpstan.neon export-ignore\nphpunit.xml.dist export-ignore\ntests/ export-ignore\ndemos/ export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.04296875,
          "content": "helperapps/*.exe\nhelperapps/*.dll\n\n\n#################\n## Eclipse\n#################\n\n*.pydevproject\n.project\n.metadata\nbin/\ntmp/\n*.tmp\n*.bak\n*.swp\n*~.nib\nlocal.properties\n.classpath\n.settings/\n.loadpath\n\n# External tool builders\n.externalToolBuilders/\n\n# Locally stored \"Eclipse launch configurations\"\n*.launch\n\n# CDT-specific\n.cproject\n\n# PDT-specific\n.buildpath\n\n\n#################\n## Visual Studio\n#################\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n[Dd]ebug/\n[Rr]elease/\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.vspscc\n.builds\n*.dotCover\n\n## TODO: If you have NuGet Package Restore enabled, uncomment this\n#packages/\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n\n# Visual Studio profiler\n*.psess\n*.vsp\n\n# ReSharper is a .NET coding add-in\n_ReSharper*\n\n# Installshield output folder\n[Ee]xpress\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish\n\n# Others\n[Bb]in\n[Oo]bj\nsql\nTestResults\n*.Cache\nClientBin\nstylecop.*\n~$*\n*.dbmdl\n\n#added for RIA/Silverlight projects\nGenerated_Code\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\n\n\n\n############\n## Windows\n############\n\n# Windows image file caches\nThumbs.db\n\n# Folder config file\nDesktop.ini\n\n\n#############\n## Python\n#############\n\n*.py[co]\n\n# Packages\n*.egg\n*.egg-info\ndist\nbuild\neggs\nparts\nbin\nvar\nsdist\ndevelop-eggs\n.installed.cfg\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\n\n#Translations\n*.mo\n\n#Mr Developer\n.mr.developer.cfg\n\n# Mac crap\n.DS_Store\ndemos/php_error.log\n\n# Composer\n/vendor\n/composer.lock\n/composer.local.json\n/composer.phar\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.8544921875,
          "content": "getID3() by James Heinrich (<info@getid3.org>)\n===\n**Available at <http://getid3.sourceforge.net> or <https://www.getid3.org>**\n\ngetID3() is released under multiple licenses. You may choose from the following licenses, and use getID3 according to the terms of the license most suitable to your project.\n\n**GNU GPL:**\n\n* [v3](https://gnu.org/licenses/gpl.html)\n\n* [v2](https://gnu.org/licenses/old-licenses/gpl-2.0.html)\n\n* [v1](https://gnu.org/licenses/old-licenses/gpl-1.0.html)\n\n**GNU LGPL:**\n\n* [v3](https://gnu.org/licenses/lgpl.html)\n\n**Mozilla MPL:**\n\n* [v2](https://www.mozilla.org/MPL/2.0/)\n\n**getID3 Commercial License:**\n\n* [gCL](https://www.getid3.org/#gCL) (no longer available, existing licenses remain valid)\n\n* * *\nCopies of each of the above licenses are included in the `licenses/`\ndirectory of the getID3 distribution.\n\nIf you want to donate, there is a link on <https://www.getid3.org> for PayPal donations.\n\n\n\nQuick Start\n===\n\n**Q:** How can I check that getID3() works on my server/files?\n\n**A:** Unzip getID3() to a directory, then access `/demos/demo.browse.php`\n\n\n\nSupport\n===\n\n**Q:** I have a question, or I found a bug. What do I do?\n\n**A:** The preferred method of support requests and/or bug reports is the forum at <http://support.getid3.org/>\n\n\n\nSourceforge Notification\n===\n\nIt's highly recommended that you sign up for notification from\nSourceforge for when new versions are released. Please visit:\n<http://sourceforge.net/project/showfiles.php?group_id=55859>\nand click the little \"monitor package\" icon/link.  If you're\npreviously signed up for the mailing list, be aware that it has\nbeen discontinued, only the automated Sourceforge notification\nwill be used from now on.\n\n\n\nWhat does getID3() do?\n===\n\nReads & parses (to varying degrees):\n\n+ tags:\n  * APE (v1 and v2)\n  * ID3v1 (& ID3v1.1)\n  * ID3v2 (v2.4, v2.3, v2.2)\n  * Lyrics3 (v1 & v2)\n\n+ audio-lossy:\n  * MP3/MP2/MP1\n  * MPC / Musepack\n  * Ogg (Vorbis, OggFLAC, Speex, Opus)\n  * AAC / MP4\n  * AC3\n  * DTS\n  * RealAudio\n  * Speex\n  * DSS\n  * VQF\n\n+ audio-lossless:\n  * AIFF\n  * AU\n  * Bonk\n  * CD-audio (*.cda)\n  * FLAC\n  * LA (Lossless Audio)\n  * LiteWave\n  * LPAC\n  * MIDI\n  * Monkey's Audio\n  * OptimFROG\n  * RKAU\n  * Shorten\n  * Tom's lossless Audio Kompressor (TAK)\n  * TTA\n  * VOC\n  * WAV (RIFF)\n  * WavPack\n\n+ audio-video:\n  * ASF: ASF, Windows Media Audio (WMA), Windows Media Video (WMV)\n  * AVI (RIFF)\n  * Flash\n  * Matroska (MKV)\n  * MPEG-1 / MPEG-2\n  * NSV (Nullsoft Streaming Video)\n  * Quicktime (including MP4)\n  * RealVideo\n\n+ still image:\n  * BMP\n  * GIF\n  * JPEG\n  * PNG\n  * TIFF\n  * SWF (Flash)\n  * PhotoCD\n\n+ data:\n  * ISO-9660 CD-ROM image (directory structure)\n  * SZIP (limited support)\n  * ZIP (directory structure)\n  * TAR\n  * CUE\n\n\n+ Writes:\n  * ID3v1 (& ID3v1.1)\n  * ID3v2 (v2.3 & v2.4)\n  * VorbisComment on OggVorbis\n  * VorbisComment on FLAC (not OggFLAC)\n  * APE v2\n  * Lyrics3 (delete only)\n\n\n\nRequirements\n===\n\n* PHP 4.2.0 up to 5.2.x for getID3() 1.7.x (and earlier)\n* PHP 5.0.5 (or higher) for getID3() 1.8.x (and up)\n* PHP 5.0.5 (or higher) for getID3() 2.0.x (and up)\n* at least 4MB memory for PHP. 8MB or more is highly recommended.\n  12MB is required with all modules loaded.\n\nInstallation\n===\nThe preferred method is via [composer](https://getcomposer.org/). Follow the installation [instructions](https://getcomposer.org/doc/00-intro.md) if you do not already have composer installed.\n\nOnce composer is installed, execute the following command in your project root to install this library:\n\n```\ncomposer require james-heinrich/getid3\n```\n\nUsage\n===\n\nSee /demos/demo.basic.php for a very basic use of getID3() with no\nfancy output, just scanning one file.\n\nSee structure.txt for the returned data structure.\n\n**For an example of a complete directory-browsing, file-scanning implementation of getID3(), please run /demos/demo.browse.php**\n\nSee /demos/demo.mysql.php for a sample recursive scanning code that\nscans every file in a given directory, and all sub-directories, stores\nthe results in a database and allows various analysis / maintenance\noperations\n\nTo analyze remote files over HTTP or FTP you need to copy the file\nlocally first before running getID3(). Your code would look something\nlike this:\n\n``` php\n<?php\n\n// Copy remote file locally to scan with getID3()\n$remotefilename = 'http://www.example.com/filename.mp3';\nif ($fp_remote = fopen($remotefilename, 'rb')) {\n    $localtempfilename = tempnam('/tmp', 'getID3');\n    if ($fp_local = fopen($localtempfilename, 'wb')) {\n        while ($buffer = fread($fp_remote, 8192)) {\n            fwrite($fp_local, $buffer);\n        }\n        fclose($fp_local);\n        // Initialize getID3 engine\n        $getID3 = new getID3;\n        $ThisFileInfo = $getID3->analyze($localtempfilename);\n        // Delete temporary file\n        unlink($localtempfilename);\n    }\n    fclose($fp_remote);\n}\n\n```\n\n\n**See /demos/demo.write.php for how to write tags.**\n\nWhat does the returned data structure look like?\n===\n\nSee structure.txt\n\nIt is recommended that you look at the output of\n/demos/demo.browse.php scanning the file(s) you're interested in to\nconfirm what data is actually returned for any particular filetype in\ngeneral, and your files in particular, as the actual data returned\nmay vary considerably depending on what information is available in\nthe file itself.\n\n\n\nNotes\n===\n\ngetID3() 1.x:\n---\nIf the format parser encounters a critical problem, it will return\nsomething in `$fileinfo['error']`, describing the encountered error. If\na less critical error or notice is generated it will appear in\n`$fileinfo['warning']`. Both keys may contain more than one warning or\nerror. If something is returned in ['error'] then the file was not\ncorrectly parsed and returned data may or may not be correct and/or\ncomplete. If something is returned in `['warning']` (and not `['error']`)\nthen the data that is returned is OK - usually getID3() is reporting\nerrors in the file that have been worked around due to known bugs in\nother programs. Some warnings may indicate that the data that is\nreturned is OK but that some data could not be extracted due to\nerrors in the file.\n\ngetID3() 2.x:\n---\nSee above except errors are thrown (so you will only get one error).\n\nDisclaimer\n===\n\ngetID3() has been tested on many systems, on many types of files,\nunder many operating systems, and is generally believe to be stable\nand safe. That being said, there is still the chance there is an\nundiscovered and/or unfixed bug that may potentially corrupt your\nfile, especially within the writing functions. By using getID3() you\nagree that it's not my fault if any of your files are corrupted.\nIn fact, I'm not liable for anything :)\n\nLicense\n===\n\nGNU General Public License - see license.txt\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\nas published by the Free Software Foundation; either version 2\nof the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to:\nFree Software Foundation, Inc.\n59 Temple Place - Suite 330\nBoston, MA  02111-1307, USA.\n\nFAQ:\n---\n**Q:** Can I use getID3() in my program? Do I need a commercial license?\n\n**A:** You're generally free to use getID3 however you see fit. The only\n   case in which you would require a commercial license is if you're\n   selling your closed-source program that integrates getID3. If you\n   sell your program including a copy of getID3, that's fine as long\n   as you include a copy of the sourcecode when you sell it.  Or you\n   can distribute your code without getID3 and say \"download it from\n   getid3.sourceforge.net\"\n\n\n\nWhy is it called \"getID3()\" if it does so much more than just that?\n===\n\nv0.1 did in fact just do that. I don't have a copy of code that old, but I\ncould essentially write it today with a one-line function:\n\n``` php\nfunction getID3($filename) { return unpack('a3TAG/a30title/a30artist/a30album/a4year/a28comment/c1track/c1genreid', substr(file_get_contents($filename), -128)); }\n\n```\n\n\nFuture Plans\n===\n<https://www.getid3.org/phpBB3/viewforum.php?f=7>\n\n* Better support for MP4 container format\n* Scan for appended ID3v2 tag at end of file per ID3v2.4 specs (Section 5.0)\n* Support for JPEG-2000 (http://www.morgan-multimedia.com/jpeg2000_overview.htm)\n* Support for MOD (mod/stm/s3m/it/xm/mtm/ult/669)\n* Support for ACE (thanks Vince)\n* Support for Ogg other than Vorbis, Speex and OggFlac (ie. Ogg+Xvid)\n* Ability to create Xing/LAME VBR header for VBR MP3s that are missing VBR header\n* Ability to \"clean\" ID3v2 padding (replace invalid padding with valid padding)\n* Warn if MP3s change version mid-stream (in full-scan mode)\n* check for corrupt/broken mid-file MP3 streams in histogram scan\n* Support for lossless-compression formats\n  (http://www.firstpr.com.au/audiocomp/lossless/#Links)\n  (http://compression.ca/act-sound.html)\n  (http://web.inter.nl.net/users/hvdh/lossless/lossless.htm)\n* Support for RIFF-INFO chunks\n  * http://lotto.st-andrews.ac.uk/~njh/tag_interchange.html\n    (thanks Nick Humfrey <njhØsurgeradio*co*uk>)\n  * http://abcavi.narod.ru/sof/abcavi/infotags.htm\n    (thanks Kibi)\n* Better support for Bink video\n* http://www.hr/josip/DSP/AudioFile2.html\n* http://www.pcisys.net/~melanson/codecs/\n* Detect mp3PRO\n* Support for PSD\n* Support for JPC\n* Support for JP2\n* Support for JPX\n* Support for JB2\n* Support for IFF\n* Support for ICO\n* Support for ANI\n* Support for EXE (comments, author, etc) (thanks p*quaedackersØplanet*nl)\n* Support for DVD-IFO (region, subtitles, aspect ratio, etc)\n  (thanks p*quaedackersØplanet*nl)\n* More complete support for SWF - parsing encapsulated MP3 and/or JPEG content\n    (thanks n8n8Øyahoo*com)\n* Support for a2b\n* Optional scan-through-frames for AVI verification\n  (thanks rockcohenØmassive-interactive*nl)\n* Support for TTF (thanks infoØbutterflyx*com)\n* Support for DSS (https://www.getid3.org/phpBB3/viewtopic.php?t=171)\n* Support for SMAF (http://smaf-yamaha.com/what/demo.html)\n  https://www.getid3.org/phpBB3/viewtopic.php?t=182\n* Support for AMR (https://www.getid3.org/phpBB3/viewtopic.php?t=195)\n* Support for 3gpp (https://www.getid3.org/phpBB3/viewtopic.php?t=195)\n* Support for ID4 (http://www.wackysoft.cjb.net grizlyY2KØhotmail*com)\n* Parse XML data returned in Ogg comments\n* Parse XML data from Quicktime SMIL metafiles (klausrathØmac*com)\n* ID3v2 genre string creator function\n* More complete parsing of JPG\n* Support for all old-style ASF packets\n* ASF/WMA/WMV tag writing\n* Parse declared T??? ID3v2 text information frames, where appropriate\n    (thanks Christian Fritz for the idea)\n* Recognize encoder:\n  http://www.guerillasoft.com/EncSpot2/index.html\n  http://ff123.net/identify.html\n  http://www.hydrogenaudio.org/?act=ST&f=16&t=9414\n  http://www.hydrogenaudio.org/?showtopic=11785\n* Support for other OS/2 bitmap structures: Bitmap Array('BA'),\n  Color Icon('CI'), Color Pointer('CP'), Icon('IC'), Pointer ('PT')\n  http://netghost.narod.ru/gff/graphics/summary/os2bmp.htm\n* Support for WavPack RAW mode\n* ASF/WMA/WMV data packet parsing\n* ID3v2FrameFlagsLookupTagAlter()\n* ID3v2FrameFlagsLookupFileAlter()\n* obey ID3v2 tag alter/preserve/discard rules\n* http://www.geocities.com/SiliconValley/Sector/9654/Softdoc/Illyrium/Aolyr.htm\n* proper checking for LINK/LNK frame validity in ID3v2 writing\n* proper checking for ASPI-TLEN frame validity in ID3v2 writing\n* proper checking for COMR frame validity in ID3v2 writing\n* http://www.geocities.co.jp/SiliconValley-Oakland/3664/index.html\n* decode GEOB ID3v2 structure as encoded by RealJukebox,\n  decode NCON ID3v2 structure as encoded by MusicMatch\n  (probably won't happen - the formats are proprietary)\n\n\n\nKnown Bugs/Issues in getID3() that may be fixed eventually\n===\n<https://www.getid3.org/phpBB3/viewtopic.php?t=25>\n\n* Cannot determine bitrate for MPEG video with VBR video data\n  (need documentation)\n* Interlace/progressive cannot be determined for MPEG video\n  (need documentation)\n* MIDI playtime is sometimes inaccurate\n* AAC-RAW mode files cannot be identified\n* WavPack-RAW mode files cannot be identified\n* mp4 files report lots of \"Unknown QuickTime atom type\"\n   (need documentation)\n* Encrypted ASF/WMA/WMV files warn about \"unhandled GUID\n  ASF_Content_Encryption_Object\"\n* Bitrate split between audio and video cannot be calculated for\n  NSV, only the total bitrate. (need documentation)\n* All Ogg formats (Vorbis, OggFLAC, Speex) are affected by the\n  problem of large VorbisComments spanning multiple Ogg pages, but\n  but only OggVorbis files can be processed with vorbiscomment.\n* The version of \"head\" supplied with Mac OS 10.2.8 (maybe other\n  versions too) does only understands a single option (-n) and\n  therefore fails. getID3 ignores this and returns wrong md5_data.\n\n\n\nKnown Bugs/Issues in getID3() that cannot be fixed\n---\n<https://www.getid3.org/phpBB3/viewtopic.php?t=25>\n\n* 32-bit PHP installations only:\n  Files larger than 2GB cannot always be parsed fully by getID3()\n  due to limitations in the 32-bit PHP filesystem functions.\n  NOTE: Since v1.7.8b3 there is partial support for larger-than-\n  2GB files, most of which will parse OK, as long as no critical\n  data is located beyond the 2GB offset.\n  Known will-work:\n  * all file formats on 64-bit PHP\n  * ZIP  (format doesn't support files >2GB)\n  * FLAC (current encoders don't support files >2GB)\n  Known will-not-work:\n  * ID3v1 tags (always located at end-of-file)\n  * Lyrics3 tags (always located at end-of-file)\n  * APE tags (always located at end-of-file)\n  Maybe-will-work:\n  * Quicktime (will work if needed metadata is before 2GB offset,\n    that is if the file has been hinted/optimized for streaming)\n  * RIFF.WAV (should work fine, but gives warnings about not being\n    able to parse all chunks)\n  * RIFF.AVI (playtime will probably be wrong, is only based on\n    \"movi\" chunk that fits in the first 2GB, should issue error\n    to show that playtime is incorrect. Other data should be mostly\n    correct, assuming that data is constant throughout the file)\n\n\n\nKnown Bugs/Issues in other programs\n---\n<https://www.getid3.org/phpBB3/viewtopic.php?t=25>\n\n* Windows Media Player (up to v11) and iTunes (up to v10+) do\n    not correctly handle ID3v2.3 tags with UTF-16BE+BOM\n    encoding (they assume the data is UTF-16LE+BOM and either\n    crash (WMP) or output Asian character set (iTunes)\n* Winamp (up to v2.80 at least) does not support ID3v2.4 tags,\n    only ID3v2.3\n    see: http://forums.winamp.com/showthread.php?postid=387524\n* Some versions of Helium2 (www.helium2.com) do not write\n    ID3v2.4-compliant Frame Sizes, even though the tag is marked\n    as ID3v2.4)  (detected by getID3())\n* MP3ext V3.3.17 places a non-compliant padding string at the end\n    of the ID3v2 header. This is supposedly fixed in v3.4b21 but\n    only if you manually add a registry key. This fix is not yet\n    confirmed.  (detected by getID3())\n* CDex v1.40 (fixed by v1.50b7) writes non-compliant Ogg comment\n    strings, supposed to be in the format \"NAME=value\" but actually\n    written just \"value\"  (detected by getID3())\n* Oggenc 0.9-rc3 flags the encoded file as ABR whether it's\n    actually ABR or VBR.\n* iTunes (versions \"X v2.0.3\", \"v3.0.1\" are known-guilty, probably\n    other versions are too) writes ID3v2.3 comment tags using a\n    frame name 'COM ' which is not valid for ID3v2.3+ (it's an\n    ID3v2.2-style frame name)  (detected by getID3())\n* MP2enc does not encode mono CBR MP2 files properly (half speed\n    sound and double playtime)\n* MP2enc does not encode mono VBR MP2 files properly (actually\n    encoded as stereo)\n* tooLAME does not encode mono VBR MP2 files properly (actually\n    encoded as stereo)\n* AACenc encodes files in VBR mode (actually ABR) even if CBR is\n   specified\n* AAC/ADIF - bitrate_mode = cbr for vbr files\n* LAME 3.90-3.92 prepends one frame of null data (space for the\n  LAME/VBR header, but it never gets written) when encoding in CBR\n  mode with the DLL\n* Ahead Nero encodes TwinVQF with a DSIZ value (which is supposed\n  to be the filesize in bytes) of \"0\" for TwinVQF v1.0 and \"1\" for\n  TwinVQF v2.0  (detected by getID3())\n* Ahead Nero encodes TwinVQF files 1 second shorter than they\n  should be\n* AAC-ADTS files are always actually encoded VBR, even if CBR mode\n  is specified (the CBR-mode switches on the encoder enable ABR\n  mode, not CBR as such, but it's not possible to tell the\n  difference between such ABR files and true VBR)\n* STREAMINFO.audio_signature in OggFLAC is always null. \"The reason\n  it's like that is because there is no seeking support in\n  libOggFLAC yet, so it has no way to go back and write the\n  computed sum after encoding. Seeking support in Ogg FLAC is the\n  #1 item for the next release.\" - Josh Coalson (FLAC developer)\n  NOTE: getID3() will calculate md5_data in a method similar to\n  other file formats, but that value cannot be compared to the\n  md5_data value from FLAC data in a FLAC file format.\n* STREAMINFO.audio_signature is not calculated in FLAC v0.3.0 &\n  v0.4.0 - getID3() will calculate md5_data in a method similar to\n  other file formats, but that value cannot be compared to the\n  md5_data value from FLAC v0.5.0+\n* RioPort (various versions including 2.0 and 3.11) tags ID3v2 with\n  a WCOM frame that has no data portion\n* Earlier versions of Coolplayer adds illegal ID3 tags to Ogg Vorbis\n  files, thus making them corrupt.\n* Meracl ID3 Tag Writer v1.3.4 (and older) incorrectly truncates the\n  last byte of data from an MP3 file when appending a new ID3v1 tag.\n  (detected by getID3())\n* Lossless-Audio files encoded with and without the -noseek switch\n  do actually differ internally and therefore cannot match md5_data\n* iTunes has been known to append a new ID3v1 tag on the end of an\n  existing ID3v1 tag when ID3v2 tag is also present\n  (detected by getID3())\n* MediaMonkey may write a blank RGAD ID3v2 frame but put actual\n  replay gain adjustments in a series of user-defined TXXX frames\n  (detected and handled by getID3() since v1.9.2)\n\n\n\n\nReference material:\n===\n\n[www.id3.org](http://www.id3.org) material now mirrored at <http://id3lib.sourceforge.net/id3/>\n\n* http://www.id3.org/id3v2.4.0-structure.txt\n* http://www.id3.org/id3v2.4.0-frames.txt\n* http://www.id3.org/id3v2.4.0-changes.txt\n* http://www.id3.org/id3v2.3.0.txt\n* http://www.id3.org/id3v2-00.txt\n* http://www.id3.org/mp3frame.html\n* http://minnie.tuhs.org/pipermail/mp3encoder/2001-January/001800.html <mathewhendry@hotmail.com>\n* http://www.dv.co.yu/mpgscript/mpeghdr.htm\n* http://www.mp3-tech.org/programmer/frame_header.html\n* http://users.belgacom.net/gc247244/extra/tag.html\n* http://gabriel.mp3-tech.org/mp3infotag.html\n* http://www.id3.org/iso4217.html\n* http://www.unicode.org/Public/MAPPINGS/ISO8859/8859-1.TXT\n* http://www.xiph.org/ogg/vorbis/doc/framing.html\n* http://www.xiph.org/ogg/vorbis/doc/v-comment.html\n* http://leknor.com/code/php/class.ogg.php.txt\n* http://www.id3.org/iso639-2.html\n* http://www.id3.org/lyrics3.html\n* http://www.id3.org/lyrics3200.html\n* http://www.psc.edu/general/software/packages/ieee/ieee.html\n* http://www.scri.fsu.edu/~jac/MAD3401/Backgrnd/ieee-expl.html\n* http://www.scri.fsu.edu/~jac/MAD3401/Backgrnd/binary.html\n* http://www.jmcgowan.com/avi.html\n* http://www.wotsit.org/\n* http://www.herdsoft.com/ti/davincie/davp3xo2.htm\n* http://www.mathdogs.com/vorbis-illuminated/bitstream-appendix.html\n* \"Standard MIDI File Format\" by Dustin Caldwell (from www.wotsit.org)\n* http://midistudio.com/Help/GMSpecs_Patches.htm\n* http://www.xiph.org/archives/vorbis/200109/0459.html\n* http://www.replaygain.org/\n* http://www.lossless-audio.com/\n* http://download.microsoft.com/download/winmediatech40/Doc/1.0/WIN98MeXP/EN-US/ASF_Specification_v.1.0.exe\n* http://mediaxw.sourceforge.net/files/doc/Active%20Streaming%20Format%20(ASF)%201.0%20Specification.pdf\n* http://www.uni-jena.de/~pfk/mpp/sv8/ (archived at http://www.hydrogenaudio.org/musepack/klemm/www.personal.uni-jena.de/~pfk/mpp/sv8/)\n* http://jfaul.de/atl/\n* http://www.uni-jena.de/~pfk/mpp/ (archived at http://www.hydrogenaudio.org/musepack/klemm/www.personal.uni-jena.de/~pfk/mpp/)\n* http://www.libpng.org/pub/png/spec/png-1.2-pdg.html\n* http://www.real.com/devzone/library/creating/rmsdk/doc/rmff.htm\n* http://www.fastgraph.com/help/bmp_os2_header_format.html\n* http://netghost.narod.ru/gff/graphics/summary/os2bmp.htm\n* http://flac.sourceforge.net/format.html\n* http://www.research.att.com/projects/mpegaudio/mpeg2.html\n* http://www.audiocoding.com/wiki/index.php?page=AAC\n* http://libmpeg.org/mpeg4/doc/w2203tfs.pdf\n* http://www.geocities.com/xhelmboyx/quicktime/formats/qtm-layout.txt\n* http://developer.apple.com/techpubs/quicktime/qtdevdocs/RM/frameset.htm\n* http://www.nullsoft.com/nsv/\n* http://www.wotsit.org/download.asp?f=iso9660\n* http://sandbox.mc.edu/~bennet/cs110/tc/tctod.html\n* http://www.cdroller.com/htm/readdata.html\n* http://www.speex.org/manual/node10.html\n* http://www.harmony-central.com/Computer/Programming/aiff-file-format.doc\n* http://www.faqs.org/rfcs/rfc2361.html\n* http://ghido.shelter.ro/\n* http://www.ebu.ch/tech_t3285.pdf\n* http://www.sr.se/utveckling/tu/bwf\n* http://ftp.aessc.org/pub/aes46-2002.pdf\n* http://cartchunk.org:8080/\n* http://www.broadcastpapers.com/radio/cartchunk01.htm\n* http://www.hr/josip/DSP/AudioFile2.html\n* http://home.attbi.com/~chris.bagwell/AudioFormats-11.html\n* http://www.pure-mac.com/extkey.html\n* http://cesnet.dl.sourceforge.net/sourceforge/bonkenc/bonk-binary-format-0.9.txt\n* http://www.headbands.com/gspot/\n* http://www.openswf.org/spec/SWFfileformat.html\n* http://j-faul.virtualave.net/\n* http://www.btinternet.com/~AnthonyJ/Atari/programming/avr_format.html\n* http://cui.unige.ch/OSG/info/AudioFormats/ap11.html\n* http://sswf.sourceforge.net/SWFalexref.html\n* http://www.geocities.com/xhelmboyx/quicktime/formats/qti-layout.txt\n* http://www-lehre.informatik.uni-osnabrueck.de/~fbstark/diplom/docs/swf/Flash_Uncovered.htm\n* http://developer.apple.com/quicktime/icefloe/dispatch012.html\n* http://www.csdn.net/Dev/Format/graphics/PCD.htm\n* http://tta.iszf.irk.ru/\n* http://www.atsc.org/standards/a_52a.pdf\n* http://www.alanwood.net/unicode/\n* http://www.freelists.org/archives/matroska-devel/07-2003/msg00010.html\n* http://www.its.msstate.edu/net/real/reports/config/tags.stats\n* http://homepages.slingshot.co.nz/~helmboy/quicktime/formats/qtm-layout.txt\n* http://brennan.young.net/Comp/LiveStage/things.html\n* http://www.multiweb.cz/twoinches/MP3inside.htm\n* http://www.geocities.co.jp/SiliconValley-Oakland/3664/alittle.html#GenreExtended\n* http://www.mactech.com/articles/mactech/Vol.06/06.01/SANENormalized/\n* http://www.unicode.org/unicode/faq/utf_bom.html\n* http://tta.corecodec.org/?menu=format\n* http://www.scvi.net/nsvformat.htm\n* http://pda.etsi.org/pda/queryform.asp\n* http://cpansearch.perl.org/src/RGIBSON/Audio-DSS-0.02/lib/Audio/DSS.pm\n* http://trac.musepack.net/trac/wiki/SV8Specification\n* http://wyday.com/cuesharp/specification.php\n* http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/Nikon.html\n* http://wiki.hydrogenaud.io/index.php?title=TAK\n"
        },
        {
          "name": "changelog.txt",
          "type": "blob",
          "size": 155.099609375,
          "content": "/////////////////////////////////////////////////////////////////\n/// getID3() by James Heinrich <info@getid3.org>               //\n//  available at http://getid3.sourceforge.net                 //\n//            or https://www.getid3.org                        //\n//          also https://github.com/JamesHeinrich/getID3       //\n/////////////////////////////////////////////////////////////////\n//                                                             //\n// changelog.txt - part of getID3()                            //\n// See readme.txt for more details                             //\n//                                                            ///\n/////////////////////////////////////////////////////////////////\n\n        »  denotes a major feature addition/change\n        ¤  denotes a change in the returned structure\n        !  denotes a cry for help from developers\n* Bugfix:  denotes a fixed bug\n\nVersion History\n===============\n\n1.9.23: [2023-10-19] James Heinrich :: 1.9.23-202310190849\n\t» add detection support for 7-zip archives\n\t* #424 RIFF Undefined index \"data\"\n\t* #421 tag.xmp remove GLOBALS\n\t* #419 Quicktime Undefined index \"time_scale\"\n\t* #418 tag.xmp zero-length fread\n\t* #414 Quicktime bitrate for mp4 audio\n\t* #413 Quicktime audio metadata\n\t* #410 MPEG-1 pixel aspect ratio\n\t* #407 PHP 8.1 compatibility\n\t* #404 guard against division by zero\n\t* #402 remove utf8_encode/utf8_decode\n\n1.9.22: [2022-09-29] James Heinrich :: 1.9.22-202207161647\n\t* bugfix #387 fails to detect h265 video codec (QuickTime)\n\t* bugfix #385 Quicktime extended atom size\n\t* bugfix #378 AAC bitrate cache warning\n\t* bugfix #376 simplexml_load_string improvments\n\t* bugfix #374 MOD improved SoundTracker support\n\t* bugfix #371 fragmented MP4 unsupported warning\n\t* bugfix #369 fix remote URLs pattern\n\t* bugfix #366 change @error-suppress to isset (quicktime)\n\t* bugfix #365 ZIP array offset on value of type int\n\t* bugfix #364 add support for ANIMEXTS1.0 in GIF files\n\t* bugfix #363 ASF improve support of Header Extension Object data\n\t* bugfix #362 version update for ramsey/composer-install\n\t* bugfix #359 MPEG-2 aspect ratio divide-by-zero\n\t* bugfix #358 free format mp3 bitrate\n\t* bugfix #355 undefined array key in ID3v2 chapters\n\t* bugfix #352 avoid false detection of Musepack format\n\t* bugfix #351 Incorrect length passed to fread on a flac file\n\t* bugfix #348 more targeted usage of clearstatcache calls\n\t* bugfix #347 fixed reported by PHPStan v0.12.99\n\t* bugfix QuickTime support 'ID32' frame (ID3v2 inside QT)\n\t* bugfix fix various PHP 8.1 issues\n\t* bugfix PDF prevent undefined index\n\n1.9.21: [2021-09-22] James Heinrich :: 1.9.21-202109171300\n\t» add support for RIFF.guan\n\t¤ add ID3v1 genres 148-191\n\t¤ torrent files easy access key\n\t* bugfix #342 demo.mysqli.php XSS\n\t* bugfix #340 default quicktime.ReturnAtomData=false\n\t* bugfix #338 improved transliterated tag merging\n\t* bugfix #337 PHP 8.1 compatibility\n\t* bugfix #335 PHP 8.1 compatibility\n\t* bugfix #330 QuicktimeContentRatingLookup 'rtng'\n\t* bugfix #328 throw exception if a resource seek fails\n\t* bugfix #326 improved temporary path detection\n\t* bugfix #325 INF/NAN constants instead of float/string\n\t* bugfix #324 Nikon-specific atoms in QuickTime\n\t* bugfix #321 prevent errors on corrupt JPEGs\n\t* bugfix #319 prevent error in ZIP contents MIME detect\n\t* bugfix #315 ID3v2 USLT check for data length\n\t* bugfix #308 silence libxml deprecation warning\n\t* bugfix #304 undefined index: comments\n\t* bugfix #299 decbin type error in PHP8\n\t* bugfix #298 error scanning WAV via file pointer\n\t* bugfix #294 replace IMG_JPG with IMAGETYPE_JPEG\n\t* bugfix #292 PDFs take long time to parse\n\t* bugfix #291 divzero QuickTime with no playable content\n\t* bugfix #290 detect ID3v1 on minimal example files\n\t* bugfix #289 avoid crash on invalid TIFF\n\t* bugfix #287 mp3 CBR detected as VBR\n\t* bugfix #286 corrupt mp3 can cause slow scanning\n\t* bugfix #284 allow \"0\" as a value in tags\n\t* bugfix #283 array offset on value of type int\n\t* bugfix #277 ID3v2 add new Turkish Lira TRY\n\t* bugfix #270 demo.mysqli.php LONGBLOB\n\t* bugfix #266 fix possible endless loop on PNG\n\t* bugfix #257 undefined variables\n\t* bugfix #207 improved LAME version string parsing\n\n1.9.20: [2020-06-30] James Heinrich :: 1.9.20-202006061653\n\t» add support for DSDIFF audio\n\t» add support for TAK lossess audio\n\t» add support for IVF video\n\t» add detection support for EPUB files\n\t» add detection support for HPK archives\n\t» add demo.mysqli.php, remove demo.mysql.php\n\t¤ QuickTime.uuid now returned as an array (may contain multiple entries)\n\t¤ improved PDF support, including page count\n\t* bugfix (G:247) array_min incorrect return value\n\t* bugfix (G:242) filepointer analysis errors\n\t* bugfix (G:238) comments_html may not match comments\n\t* bugfix (G:235) prevent disclosing paths when accessing modules directly\n\t* bugfix (G:233) Quicktime duplicate attached images\n\t* bugfix (G:229) Quicktime timestamps easy access\n\t* bugfix (G:228) master.zip did not contain demos\n\t* bugfix (G:227) Quicktime check subatoms data length\n\t* bugfix (G:226) uuid parsing based on UUID\n\t* bugfix (G:225) use comments_html content already generated by modules\n\t* bugfix (G:223) ID3v2 slashed genre names\n\t* bugfix (G:222) demo.browse filesystem character encoding\n\t* bugfix (G:221) option_tags_html=false ignored\n\t* bugfix (G:219) Quicktime.UUID now parsed more discriminately for XML and other data types\n\t* bugfix (G:218) QuickTime not copying covr to comments\n\t* bugfix (G:217) mp3 array offsets of type bool\n\t* bugfix (G:216) ID3v2.write allow WMP rating in POPM\n\t* bugfix (G:210) PHP 7.4 deprecated get_magic_quotes\n\t* bugfix: Quicktime detect null-terminated strings used where Pascal strings should be\n\t* bugfix: Quicktime GPS uninitialized array keys\n\n1.9.19: [2019-12-17] James Heinrich :: 1.9.19-201912131005\n\t» add placeholder support for WTV (Windows Recorded TV Show)\n\t* bugfix (G:210) PHP 7.4 deprecated get_magic_quotes\n\t* bugfix (G:207) improved LAME version string parsing\n\t* bugfix (G:206) inverted logic in CopyTagsToComments\n\t* bugfix (G:203) use getimagesizefromstring if available\n\t* Quicktime decode 'uuid' atom for 360fly cameras\n\n1.9.18: [2019-07-24] James Heinrich :: 1.9.18-201907240906\n\t* bugfix (G:198) use native hash functions instead of obsolete external binaries\n\t* bugfix (G:194) PHP 7.4 compatibility: fix deprecated curly brace array access\n\t* bugfix (G:191) unsupported operand types module.audio.ac3.php:763\n\t* bugfix (G:189) false UTF-16 <BOM> and no termination strings\n\t* bugfix (G:188) add support for DS2 v8\n\t* bugfix (G:187) RIFF.WAVE.scot parsing\n\t* bugfix (G:184) invalid regex pattern (ID3v1)\n\t* bugfix (G:183) reduced information for GIF files with $option_extra_info=false\n\t* bugfix (G:175) mp4 max buffer size\n\t* bugfix (G:174) TIFF parsing improvements\n\t* bugfix (G:121) trailing nulls in ID3v2 strings\n\t* standardize \"track\" -> \"track_number\"\n\n1.9.17: [2019-02-07] James Heinrich :: 1.9.17-201902071234\n\t* bugfix (G:178) HandleAllTags should skip \"picture\"\n\t* bugfix (G:177) error checking for reading more than PHP memory_limit\n\t* bugfix (G:176) improved mp3 detection in remote-file demo\n\t* bugfix (G:173) Add filepointer option to analyze/openfile function\n\t* bugfix (G:170) Add support for WXXX (URL) and APIC (attached picture) subframes inside ID3v2 chapters\n\t* bugfix: write.id3v2 year field\n\t* bugfix: mp3.APE permit optional \" dB\" in ReplayGain tags\n\t* placeholder support for .xz file format\n\n1.9.16: [2018-10-17] James Heinrich :: 1.9.16-201810171314\n\t* bugfix (G:168) Ogg FLAC not parsed\n\t* bugfix (G:163) invalid MP3 header error on VBR\n\t* bugfix (G:162) prevent writing multiple ID3v2 versions\n\t* bugfix (G:161) MP3 VBR header duration\n\t* bugfix (G:160) OggOpus duration sometimes incorrect\n\t* bugfix (G:157) quicktime GPS invalid argument\n\t* bugfix (G:148) MPEG-2 aspect ratio\n\t* bugfix (G:147) Quicktime fourcc codec name lookup\n\t* bugfix (G:147) Quicktime audio/video bitrate guessing\n\t* bugfix (G:145) incompatible variable types\n\t* bugfix (G:139) Quicktime islt subatoms >5\n\t* bugfix (G:137) ID3v2 semi-numeric genres\n\t* bugfix (G:136) ID3v2 unsynchronised typo\n\t* bugfix (#2514) FLAC zero-byte block header\n\t* bugfix (#2488) MIME types (FLAC, WAV, gzip)\n\t* bugfix (#2468) Quicktime video rotation\n\t* bugfix (#2207) metaflac + attached pictures\n\t* bugfix (#2151) improved demo UNC filename support\n\t* bugfix (#1966) fread fail when PHP memory_limit -1\n\t* bugfix (#1908) Quicktime rotation detection (using matrix values)\n\t* bugfix (#1908) Quicktime \"rcif\" and \"dscp\" atoms\n\t* bugfix (#1900) demo.joinmp3 cut from end\n\t* security: avoid disabled demo reflection\n\t* TIFF: expand list of named tags, expose as 'tag_name' key for all entries\n\t* Quicktime: parse some GoPro-specific data\n\t* helperapps (Windows): updated vorbiscomment.exe, metaflac.exe to v1.3.2\n\t* add more image formats supported by getimagesize()\n\n1.9.15: [2017-10-26] James Heinrich :: 1.9.15-201709291043\n    » (G:108) add basic APNG support\n    » (G:107) add basic WebP support\n    * return RIFF.WAV.CART comments in merged comments section\n    * add support for QuickTime 'loci' chunk\n    * bugfix: (#2124) support for Quicktime/MP4 \"chpl\" (CHaPter List) atom\n    * bugfix: (G:128) undefinied bsmod in module.ac3\n    * bugfix: (#2114) possible issue with UTF8 filenames and metaflac\n    * bugfix: (G:123) remove MySQL engine and collation from create table\n    * bugfix: (#2066) fix AAC MIME type, remove video key for audio-only files\n    * bugfix: (G:111) QuickTime stsd number_entries deadlock\n    * bugfix: (G:110) PHP memory limit with space\n    * bugfix: (G:109) improved animated GIF support\n    * bugfix: (#1966) GPS track in QuickTime\n\n1.9.14: [2017-03-27] James Heinrich\n    » Add experimental support for E-AC3\n    * bugfix (G:105): RIFF.WAVE.iXML multiple TIMESTAMP_SAMPLE_RATE\n    * bugfix (G:95): improperly initialized error/warning keys\n    * bugfix (G:94): ID3v2 write support for TXXX\n    * bugfix (G:93): all errors or warnings should pass through class method\n\n1.9.13: [2016-12-14] James Heinrich\n    * bugfix (G:89): ID3v2.4 custom genres with slashes\n    * bugfix (G:88): large QuickTime files exceed PHP memory limit\n    * bugfix (G:87): ID3v2 write GRID data not working properly\n    * bugfix (G:86): Increase autoloading definitions\n    * bugfix (G:84): ID3v2 available writable frames list\n    * bugfix (G:82): ID3v2 datetime logic\n    * bugfix (G:80): attempt to autodetect ID3v1 encoding\n    * bugfix (G:77): add partial support of DSSv6\n    * bugfix (G:76): add mysqli version of caching extension\n    * bugfix (G:75): mysql cache max key length\n    * bugfix (G:71): custom error handler to catch exif_read_data() errors\n    * bugfix (G:71): add support for mb_convert_encoding\n    * bugfix (G:70): ID3v2 POPM / UFID\n    * bugfix (G:68): workaround broken iTunes ID3v2\n    * bugfix (G:48): Quicktime set MIME to video/mp4 where applicable\n    * bugfix (#1930) fread on pipes\n    * bugfix (#1926) relax ID3v2.IsValidURL check\n\n1.9.12: [2016-03-02] James Heinrich\n    » Add support for Direct Stream Digital (DSD) /\n      DSD Storage Facility (DSF) file format\n    » Add detection (not parsing) of WebP image format\n    * bugfix (#1910): Quicktime embedded images\n\n1.9.11: [2015-12-24] James Heinrich\n    * bugfix (G:64): update constructor syntax for PHP 7\n    * bugfix (G:62): infinite loop in large PNG files\n    * bugfix (G:61): ID3v2 remove BOM from frame descriptions\n    * bugfix (G:60): missing \"break\" in module.audio-video.quicktime.php\n    * bugfix (G:59): .gitignore comments\n    * bugfix (G:58): inconsistency in relation to module.tag.id3v2.php\n    * bugfix (G:57): comparing instead of assign\n    * bugfix (G:56): unsupported MIME type \"audio/x-wave\"\n    * bugfix (G:55): readme.md variable reference\n    * bugfix (G:54): QuickTime false 1000fps\n    * bugfix (G:53): Quicktime / ID3v2 multiple genres\n    * bugfix (G:52): sys_get_temp_dir in GetDataImageSize\n    * bugfix (#1903): Quicktime meta atom not parsed\n    * demo.joinmp3.php enhancements\n    * m4b (audiobook) chapters not parsed correctly\n    * sqlite3 caching not working\n\n1.9.10: [2015-09-14] James Heinrich\n    * bugfix (G:49): Declaration of getID3_cached_sqlite3\n    * bugfix (#1892): extension.cache.mysql\n    * bugfix (#1891): duplicate default clause [Quicktime]\n    * bugfix (G:41): incorrect MP3 playtime\n    * bugfix: iconv problems on musl with //TRANSLIT\n    * Add arguments to analyze() for original filesize (and filename)\n    * ID3v2 simplify handling of multiple genres\n    * Corrected merging of multiple genres for ID3v2\n    * getid3_lib::GetDataImageSize return false on error\n\n1.9.9: [2014-12-18] James Heinrich\n    » Added basic support for OggOpus\n    » Add ID3v2 CHAP + CTOC support\n    * Add composer autoloader\n    * bugfix: removed non-printable ASCII in comment\n    * bugfix: possible memory leak in OggFLAC\n    * bugfix: sys_get_temp_dir undefined before PHP 5.2.1\n    * bugfix: improved fix for XXE security issue (CVE-2014-2053)\n      (thanks nacinØwordpress*org)\n    * bugfix: G:25 ID3v2 LINK utf8_encode not defined\n    * bugfix: G:22 ID3v2 TXXX description encoding\n    * bugfix: #1855 - copy image height/width/etc to comments\n    * bugfix: #1855 - PHP errors in badly written APE/ID3v2 tags\n    * bugfix: #1845 - Quicktime parsing with no PHP memory_limit\n    * bugfix: #1828 - ID3v2 writing unknown frame names\n\n1.9.8: [2014-05-11] James Heinrich\n    » Add support for AMR (Adaptive Multi-Rate audio codec)\n      new file: module.audio.amr.php\n    » Added composer.json, registered on packagist.org\n    * Added workaround for PHP Bug #39923 (undefined constant IMG_JPG)\n    * Bugfix: (#1813) avoid running out of memory when parsing large\n      Quicktime files\n    * Bugfix: (#1812) potential unwanted high-ASCII characters in errors\n    * Bugfix: close potential XXE security issue (CVE-2014-2053)\n    * Bugfix: (G:10) Avoid warnings from realpath() if SAFE MODE is enabled\n    * Bugfix: (G:12) If [tags] data contains an array of strings then html\n      encoding did not take place.\n    * Bugfix: (G:12) IPTC character set not specified\n    * Bugfix: possible divide by zero error in FLV module\n    * Bugfix: possible undefined key in ID3v2\n    * Bugfix: possible undefined key in MPEG video files\n    * Bugfix: demo.browse to use character set consistently\n\n1.9.7: [2013-07-05] James Heinrich\n    * Bugfix: [module.audio-video.quicktime.php] track languages set\n      with 15-bit-encoded ISO639-2 language codes not parsed correctly\n    * Bugfix: (#1717) QuickTime atom hierarchy broken\n    * Bugfix: (#1716) truncate MIDI file could cause infinite loop\n    * Bugfix: all source files converted to UTF-8\n\n1.9.6: [2013-06-03] James Heinrich\n    » getID3() is now licensed under GPL / LGPL / MozillaPL / gCL\n      See license.txt for more details.\n    * Bugfix: (#1550) Quicktime video track sample description parsed\n      incorrectly\n    * Bugfix: (#1550) Quicktime matrix U/V/W values calculated incorrectly\n    * [demo.browse] disable edit-tag and delete-file links by default\n    * Bugfix: option_max_2gb_check should issue warning not error on >2GB\n\n1.9.5: [2013-02-20] James Heinrich, Dmitry Arkhipov\n    » DTS-in-WAV now properly supported\n    ¤ DSS files return additional data in new keys, and some existing\n      keys have been renamed\n    * Bugfix: open_basedir not parsed correctly under Windows\n      (thanks yannick*jamontØgmail*com)\n    * Bugfix: [demo/demo.browse] might not display file or directory name\n      on PHP >=5.4.0 if filename not UTF-8 friendly\n    * Bugfix: [demo/demo.zip] could read more uncompressed data than\n      required; fail to read file if local data descriptor not set;\n      some wrong include files were listed; improved error message display\n    * Bugfix: [module.audio-video.riff] INFO comment chunks with null name\n      chunk not parsed correctly\n    * Bugfix: [module.archive.gz] gzip files with filename stored may have\n      filename reduplicated in [gzip][files] output\n    * Bugfix: [module.archive.zip] data_descriptor not parsed correctly\n    * Bugfix: [module.archive.zip] some newer compression methods unknown\n    * Bugfix: [module.archive.zip] not all flags parsed\n    * Bugfix: [module.archive.zip] local file header not parsed correctly\n      if file has zero values for compressed_size in Local File Header\n    * Bugfix: (#1493) better support for >2GB filesize on 32-bit Linux\n    * Bugfix: (#1474) unneccesary call to GetDataImageSize in JPEG module\n    * Bugfix: (#1470) GIF files falsely detected as TS format\n    * Bugfix: (#1431) Matroska did not parse PixelCrop* / DisplayUnit\n      (thanks jgerberØwikimedia*org)\n    * Bugfix: (#1430) split ID3v2 text values on null separator\n    * Bugfix: (#1426) MS Office 2007 file format now recognized as zip.msoffice\n    * Bugfix: (#1423) optimized CreateDeepArray function\n    * Bugfix: (#1415) add support for DS2 variant of DSS\n\n1.9.4b1: [2012-10-05] James Heinrich, Dmitry Arkhipov, Karl G. Holz\n    » New module: extension.cache.sqlite3.php (by Karl G. Holz)\n    » New demo: demos/getid3.demo.dirscan.php (by Karl G. Holz)\n    » PHP5 standards improvements (thanks phansysØgmail*com)\n    » more reliable >4GB file size parsing using COM (if available)\n      Scripting.FileSystemObject rather than parsing `dir` output\n    * added support for FLAC inside Matroska (audio bitrate cannot\n        be determined in this case)\n    * XMP module now returns all tags, not just whitelisted ones\n    * (#1297) Added detection of MPEG Transport Stream files.\n      Stub module.audio-video.ts.php incomplete\n    * (#1383) removed unneeded ?> tags (thanks daveØholyfield*info)\n    * Bugfix: XMP returns attributes array not just value strings\n    * Bugfix: (#1369) ID3v2 IPLS contents not parsed\n    * Bugfix: (#1357) demo.mysql.php mysql_table_exists() failed\n    * Bugfix: (#1355) copy Foobar2000 QuickTime tags to [comments]\n    * Bugfix: (#1351) QuickTime files with zero-sized atom boxes\n      could cause infinite loop\n    * Bugfix: (#1343) FLAC attached pictures Ogg not handled\n    * Bugfix: (#1343) ID3v2 inside WAV \"id3 \" chunk not handled\n    * Bugfix: (#1315) BMP detection was broken\n    * Bugfix: (#1309) ID3v2.2 content_group_description (TT2) did\n      not copy to same place as ID3v2.3/ID3v2.4 (TIT2)\n    * Bugfix: (#1308) [playtime_string] could show hh:mm:60\n    * Bugfix: (#1306) extension.cache.mysql.php keyword TYPE->ENGINE\n    * Bugfix: (#1295) missing video information if QuickTime file has\n      disabled tracks\n    * Bugfix: (#1275) MD5/SHA1 data hashes not working properly\n      under Windows\n\n\n1.9.3: [2011-12-13] Dmitry Arkhipov, James Heinrich\n    * Matroska module improved:\n      1. Added support for A_MS/ACM audio codec\n      2. Fixed issues in tags, cues, chapters and clusters parsing\n      3. Fixed almost all errors with track_data_offset, errors\n         still may occur with Xiph data lacing\n      4. Optimized audio/video streams population with usage of the\n         official default values for missing elements\n      5. Audio/video keys are now populated with data from the\n         default stream, not from the first one as before\n      6. Full WebM support\n    * Bugfix: demo.browse would not pop up warnings when clicked\n      if warning contains apostrophe/single-quote character\n    * Bugfix: (#1269) ID3v1 genre typo \"Trash\"->\"Thrash\" Metal\n\n\n1.9.2: [2011-12-08] James Heinrich, Dmitry Arkhipov\n\t» significant rewrite to module.audio-video.matroska.php\n    ¤ (#1256) ID3 tags in AIFF 'ID3 ' chunks now parsed\n    ¤ (#1039) iXML data in WAV files now returned and parsed into\n        [riff][WAVE][iXML][0][data] and [riff][WAVE][iXML][0][parsed]\n    ¤ [playtime_string] now returns M:SS if less than 1 hour, and\n        H:MM:SS if 1 hour or longer\n    * Bugfix: (#1266) variable tablename: extension.cache.mysql.php\n    * Bugfix: (#1265) unescaped # in regex in write.id3v2.php\n    * Bugfix: (#1252) MediaMonkey writes blank ID3v2 RGAD frames\n      and puts replay-gain values in TXXX frames\n    * Bugfix: (#1251) FLV playtime could be inaccurate for longer\n        files where meta frame is present but meta-playtime is zero\n    * Bugfix: (#1216) show hex values of unknown atom names\n    * Bugfix: (#1215) undefined variable in PrintHexBytes()\n    * Bugfix: FLV audio bitrate was returning kbps not bps\n    * Bugfix: missing ) in write.real.php::RemoveReal()\n    * Bugfix: replace $this::VERSION with getID3::VERSION in\n        extension.cache.*.php\n\n\n1.9.1: [2011-08-10] James Heinrich\n    ¤ ASF Extended Header Object data now (partially) parsed\n    * Default getID3 encoding now set to UTF-8 not ISO-8859-1\n    * Bugfix: (#1212) truncated Matroska files may result in\n        infinite loop and memory exhaustion\n    * Bugfix: (#1203) parse RIFF JUNK chunks for version strings\n    * Bugfix: (#1201) multi-byte characters strings incorrectly\n        displayed by table_var_dump() in demo.browse.php\n    * Bugfix: (#1199) prevent PHP warning on malformed ID3v2 APIC\n    * Bugfix: (#1196) typo in module.audio-video.quicktime.php\n    * Bugfix: (#1195) QuicktimeStoreFrontCodeLookup() broken\n    * Bugfix: (#1194) mp4 embedded images not handled correctly\n    * Bugfix: (#1193) [image_mime] key not set fo WM/picture data\n    * Bugfix: (#1193) ASF Extended Header Object Metadata Library\n        now parsed for embedded images and handled per usual style\n    * Bugfix: (#1190) demo.mimeonly.php was broken since v1.9.0\n    * Bugfix: ID3v2 comment is now called 'comment' not 'comments'\n    * Bugfix: AVI unknown codec fourcc would be reported as blank\n    * Bugfix: AVI zero-size JUNK chunk would give warning\n\n\n1.9.0: [2011-06-20] James Heinrich\n    » changed all module classes to have proper constructors\n      with the actual analysis code moved to function Analyze()\n    * removed unnecessary ob_* calls, replaced with appropriate\n      checks and judicious use of @ error suppression\n    ¤ GETID3_VERSION constant replaced with $getID3->version()\n    ¤ picture data is now returned only in the original source\n      location and [comments][picture], it is no longer replicated\n      in [comments_html], [tags] or [tags_html]\n    ¤ Matroska tags are now returned in [comments] as per normal\n    ¤ Matroska tags are better supported, including pictures\n    ¤ GPS data in MP4 files (e.g. iPhone) is now parsed (#1157)\n    ¤ Matroska audio/video tracks with a default flag, the default\n      stream flag is now copied to [audio|video][streams] (#1147)\n    ¤ Nikon-specific data (NCDT atom) in Quicktime videos now parsed\n    ¤ QuickTime atoms 'meta' and 'data' now (mostly) parsed\n    * Bugfix: remove false warning of junk data on WAV+ID3v1\n    * Bugfix: DolbyDigitalWAV files returned wrong audio bitrate\n    * Bugfix: large attachment data in Matroska tags were not\n      returned completely.\n    * Bugfix: wrong image_mime used for images in demo.browse.php\n    * Bugfix: broken preg_match in module.audio.dss.php\n    * Bugfix: Lyrics3 end offset was off by 1\n    * Bugfix: audio channelmode could be wrong for 2 channels\n      (e.g. joint stereo reported as stereo)\n    * Bugfix: MultiByteCharString2HTML() would return empty string\n      if passed float or int value, now casts to string first\n    * Bugfix: FLAC.picture was not returning under [data] +\n      [image_mime] per standardized format\n    * Bugfix: BigEndian2Int() could incorrectly return negative\n      signed synchsafe integer instead of casting to float\n    * Bugfix: (#1177) ID3v2.4 extended headers were broken\n    * Bugfix: (#1173) some MIDI files not completely parsed\n    * Bugfix: (#1171) change helperapps error to nonblocking warning\n    * Bugfix: (#1170) possible infinite loop in FLV module\n    * Bugfix: (#1169) $this reference in static function (ID3v2)\n    * Bugfix: (#1156) demo.mysql.php not working\n    * Bugfix: (#1153) badly-tagged files could produce invalid\n      argument errors in module.tag.xmp.php\n    * Bugfix: (#1152) add error-suppression to iconv() calls\n    * Bugfix: (#1151) AAC-ADTS files could sometimes not find sync\n    * Bugfix: (#1136) last character of unicode tags (e.g. ASF)\n      was being truncated\n    * Bugfix: (#1133) write.id3v2.php IsValidURL() was broken\n    * Bugfix: (#1126) ID3v2.POPM field was being clobbered\n    * Bugfix: (#999, #1154) ID3v2 UFID data was missing\n\n\n1.8.5: [2011-02-18] James Heinrich\n    » support >2GB files on 64-bit PHP\n      - note current unofficial 64-bit PHP builds for Windows\n        do not actually support 64-bit integers so are still\n        subject to normal 32-bit limits (2GB) for file functions\n    » PHP v5.0.5 now minimum required version.\n      Removed obsolte functions from getid3.lib.php:\n        md5_file, sha1_file, image_type_to_mime_type\n    » IDivX tags now parsed on AVI files\n    ¤ embedded image data is returned inside [comments][picture]\n      in a 2-element array (data, image_mime) for all formats\n    * $this->overwrite_tags=false is now known to be buggy and\n      has been disabled for this version until a full review\n      of tag writing can be completed. Certainly affects ID3v2,\n      the other writable tag formats may or may not be broken\n    * getID3 constructor no longer checks for (or sets) timezone\n    * demo.browse.php now shows cover art as inline images\n      rather than dumped to separate files\n    * [audio][streams][x][language] now set when known\n    * Bugfix: RIFF-AVI \"JUNK\" chunks are now parsed properly,\n      including zero-sized ones (no more false errors)\n    * Bugfix: msoffice documents now return correct error message\n    * Bugfix: demo.browse.php now encodes data according to\n      current page encoding (default=UTF-8)\n    * Bugfix: (#1120) sometimes incorrect ID3v2 genre parsing\n    * Bugfix: (#1116) possibly incorrect warnings (or lack of)\n      for RIFFs > 2GB.\n    * Bugfix: (#1115) wrong RIFFtype in RIFF files\n    * Bugfix: (#1114) wrong MIME type may be set for Matroska\n    * Bugfix: (#1113) support DSS v3 files\n    * Bugfix: (#1111) cover art in APE tags now supported\n    * Bugfix: (#1091) RemoveID3v1() unitialized variables\n    * Bugfix: (# 504) do not set Quicktime resolution if\n      'tkhd' atom is disabled\n    * Bugfix: (#  95) return [quicktime][controller] if known\n\n\n1.8.4: [2011-02-03] James Heinrich\n    * change default encoding in ID3v2 writing to UTF16-LE+BOM\n      (or ISO-8859-1 where possible) for better compatability\n      with broken versions of Windows Media Player and iTunes\n    * Bugfix: [FLV] incorrect overall bitrate in some files\n    * Bugfix: (#1102) missing parentheses in write[.id3v2].php\n    * Bugfix: (#510) undefined IsValidDottedIP() in write.id3v2.php\n\n\n1.8.3: [2011-01-18] James Heinrich\n    » magic_quotes_gpc must now be disabled to use getID3\n    » replace all error-suppressing @$variable calls with\n      isset() or empty() as appropriate for some configurations\n      where @ does not act to suppress warnings of undefined\n      variables (e.g. support forum thread #798)\n    * remove SafeStripSlashes() and FixTextFields functions\n    * [quicktime] use fourcc if codec name zero-length\n    * [quicktime] support \"iods\" atom\n    * Bugfix: (#1099) sometimes incorrect detection of safe_mode\n    * Bugfix: (#1095) more robust setting of temp dir\n    * Bugfix: (#1093) add support for ClusterSimpleBlock to\n      prevent \"Undefined index: track_data_offsets\" errors\n      in Matroska files\n    * Bugfix: [riff] prevent errors when RIFF.WAVE.BEXT chunk\n      contains null date/time  (thanks moysevichØgmail*com)\n    * Bugfix: [quicktime] prevent divide-by-zero errors if\n      time_to_sample_table has zero-sample entry\n      (thanks moysevichØgmail*com)\n\n\n1.8.2: [2010-12-06] James Heinrich\n    * include startup warning for PHP < v5\n    * magic_quotes_runtime must now be disabled to use getID3\n    ¤ MusicBrainz / AmpliFIND data more accessible in returned data\n      from Quicktime-style files (e.g. MP4/AAC)\n    * Bugfix: (#1079) wrong encoding might be used for ID3v2\n        text data, and/or garbage data prepended before text\n        data; DataLengthIndicator value was being ignored\n    * Bugfix: (#1055) clearer warnings on non-EXIF contents in\n      JPEG [APP1]\n    * Bugfix: (#999) ID3v2 UFID data was missing\n\n\n1.8.1: [2010-11-25] James Heinrich\n    * replaced calls to deprecated mysql_escape_string() with\n      mysql_real_escape_string()\n    * Bugfix: (#1072) memory limit not handled correctly if\n      in gigabytes in php.ini (e.g. \"2G\")\n    * Bugfix: (#1068) wrong encoding for Quicktime tags\n    * Bugfix: (#1040) possible infinite loop in genre parsing\n    * Bugfix: (#1036) helperapps directory not resolving 8.3\n        path names correctly\n    * Bugfix: (#1023) dbm cache extension not correctly handling\n        types other than \"db3\"\n    * Bugfix: (#1023) mysql cache extension now base64_encodes\n        data to make binary-safe. Existing cached data must be\n        purged from your database cache\n    * Bugfix: (#1007) ClosestStandardMP3Bitrate() not selecting\n        most appropriate value\n    * Bugfix: (#996) inefficient and buggy ID3v1 and ID3v2\n        genre parsing\n    * Bugfix: (#974) track number handled incorrectly in\n        demo.write.php\n    * Bugfix: (#969) tempnam() calls failing with open_basedir\n    * Bugfix: (#955) UTF-16LE text files could be falsely\n        identified as corrupt mp3 files\n    * Bugfix: (#877) detect if mbstring.func_overload is set in php.ini\n    * Bugfix: (#858) PHP safe_mode setting in php.ini incorrectly\n        handled if set to \"Off\"\n    * Bugfix: (#838) prevent warnings with assorted unhandled\n        Quicktime atoms\n\n\n1.8.0: [2010-11-23] James Heinrich\n    » Changes required for PHP v5.3+ compatability, including:\n      - change ereg* functions to preg_* equivalents\n      - declare functions static as needed\n      note: users of PHP v4.x may need to stay with getID3 v1.7.x\n    » Added CUE (cuesheet) support\n      new file: module.misc.cue.php\n      (thanks Nigel Barnes ngbarnesØhotmail*com)\n    » Added XMP (Adobe Extensible Metadata Platform) support\n      currently used with module.graphic.jpg.php\n      new file: module.tag.xmp.php\n      (thanks Nigel Barnes ngbarnesØhotmail*com)\n    ¤ [jpg][exif][GPS][computed] now exists when possible with\n      calculated values (decimal latitude, longitude, altitude, time)\n    ¤ Prevent clobbering WMA artist with albumartist value; added WMA\n      partofset tag; added WMA tag picture data to WMA comments\n      (thanks ngbarnesØhotmail*com)\n    ¤ RIFF.WAVE.SNDM (SoundMiner) metadata now parsed\n      (thanks emerrittØwbgu*bgsu*edu)\n    ¤ FLAC embedded pictures now return [data_length] key\n      (thanks darrenburnhillØhotmail*com)\n    * added support for a number of new comment atom types added in\n      iTunes v4.0-v7.0  (thanks ngbarnesØhotmail*com)\n    * demo.browse.php now shows video resolution and framerate (if no\n      artist or title info present)\n    * additional FLV details parsed, may be faster as well\n      (thanks ngbarnesØhotmail*com)\n    * Bugfix: DSS files longer than 60 seconds had wrong playtime\n    * Bugfix: possible empty array encountered in APE tags\n      (thanks csnaitsirchØweb*de)\n    * Bugfix: prevent fatal error when calling BigEndian2Int() on\n      zero-length string  (thanks taylor*fausakØgmail*com)\n    * Bugfix: prevent errors when parsing invalid Vorbis comments\n      (thanks dr*dieselØgmail*com)\n    * Bugfix: files could not be analyzed from Windows shares\n      (e.g. \\\\SERVER\\Directory\\Filename.mp3)\n    * Bugfix: RAR file opening should use 'filenamepath'\n      (thanks adrien*gibratØgmail*com)\n    * Bugfix: [asf][codec_list_object][codec_entries][x][description]\n      not containing expected comma-seperated values no longer aborts\n      (thanks larry_globusØyahoo*com)\n    * Bugfix: [id3v2] UFID was not returning data\n      (thanks joostØdecock*org)\n\n1.7.9: [2009-03-08] James Heinrich\n    » Added DSS (Digital Speech Standard) support\n      new file: module.audio.dss.php\n      (thanks luke*wilkinsØdtsam*com)\n    » Added MPC (Musepack) SV8 support\n      (thanks WaldoMonster)\n    ¤ some MPC [header] keys renamed to be the same between SV7/SV8\n    ¤ start aligning demos CSS styling with v2.x styles\n      new file: demos/getid3.css\n    ¤ JPEG now returns parsed IPTC tags in [iptc]\n    ¤ getid3_lib::GetDataImageSize now requires $imageinfo parameter\n    ¤ better support for Matroska files with AC3/DTS/MP3/OGG audio\n      (support still lacking for AAC)\n    ¤ standardize ID3v2 TCMP key to 'part_of_a_set' between reading\n      and writing  (thanks aaron_stormØyahoo*com)\n    ¤ added ID3v2 keys 'TCMP','TCP' to for writing iTunes-style tags\n      (thanks aaron_stormØyahoo*com)\n    ¤ back-ported PICTURE tag handling in FLAC tags\n      (thanks WaldoMonster)\n    ¤ added alternate method to get [video][frame_rate] from QuickTime\n    * added partial support for \"TCMP\"/\"TCP\" ID3v2 frames (iTunes\n      non-standard part-of-a-compilation tag)\n      (thanks aaron_stormØyahoo*com)\n    * slightly improved scanning through FLV files speed\n      (thanks franki)\n    * faster Matroska scanning by stopping at cluster chunks once\n      needed header chunks are found (much faster for large files)\n    * added workaround for broken tagging programs that miss terminating\n      null byte for numeric ID3v2.4 genres\n      (thanks yam655Øgmail*com)\n    * Bugfix: MultiByteCharString2HTML() did not escape common HTML\n      special characters like & and ?\n    * Bugfix: cleaned up some malformed HTML errors in demo.browse.php\n    * Bugfix: under Windows files >2GB might not be processed due to\n      \"dir\" command not finding file with double directory slashes\n    * Bugfix: \"MODule (assorted sub-formats)\" was falsely matching\n      some random files (e.g. JPEGs)  (thanks qwertywin)\n    * Bugfix: suppress PHP_notice on failed SWF-compressed\n      decompression failure  (thanks mkron)\n\n\n1.7.8b3: [2008-07-13] James Heinrich\n    » Experimental partial support for files > 2GB (gets filesize\n      from shell call to \"dir\" or \"ls\", parse files with PHP only\n      up to 2GB limit). See readme.txt for details on what formats\n      work properly and other limitations\n    » Initial support for Matroska. Has only been tested with a\n      limited number of sample files, please report any bugs\n    » Experimental support for PHP-RAR reading. Known buggy, disabled\n      by default, enable with care\n    ¤ getid3_lib::CastAsInt() now returns ints up to 2^31 (not 2^30)\n    ¤ Quicktime: [video] now returns [frame_rate] and [fourcc] for MP4\n      video files\n    * MP3: headerless VBR files now only have up to 10 blocks of 5000\n      frames each scanned by default and bitrate extrapolated from that\n      distribution for speed  (thanks glau*stuffØridiculousprods*com)\n    * Quicktime: support \"co64\" atom\n    * SWF: lower memory use when compressed SWF files processed\n      (thanks doughammondØblueyonder*co*uk)\n    * Bugfix: FLV height and width was calculated incorrectly\n      (thanks moysevichØgmail*com)\n    * Bugfix: FLV GETID3_FLV_TAG_META parsed incorrectly\n      (thanks moysevichØgmail*com)\n    * Bugfix: Quicktime: 'tkhd' matrix_v and matrix_d were switched\n      (thanks rjjmoroØhotmail*com)\n    * Bugfix: Quicktime: frame_rate was often incorrect for MP4 video\n    * Bugfix: getid3_lib::CastAsInt returned -2147483648 when passed\n      2147483648 (0x80000000)\n\n\n1.7.8b2: [2007-10-15] James Heinrich, Allan Hansen\n    * Video bitrate now calculated even if not explicitly stated in\n      file metadata, but if overall and audio bitrates are known\n    * Bugfix: 'comments_html' missing last letter in id3v2 tags.\n    * Bugfix: module objects (e.g. getid3_riff) that are instantiated\n      in other modules are explicitly disposed once no longer needed.\n    * Bugfix: some AVI files were not returning audio information\n      because \"strh\" chunk was not being read in\n    * Bugfix: asf [audio][<streamnumber>][dataformat] should be set\n      to \"wma\" but wasn't\n    * Bugfix: [mpeg][audio][bitrate_mode] should always be one of\n      (\"cbr\", \"vbr\", \"abr\") but wasn't for some values in\n      LAMEvbrMethodLookup()\n    * Bugfix: MP3 audio in AVI files could show \"cbr\" instead of\n      correct audio bitrate_mode, and audio bitrate could be slightly\n      incorrect if multiple files were scanned in a loop (scanning\n      single files produced correct values).\n    * Bugfix: remove [audio/video][bitrate] key if falsely set to zero\n    * Bugfix: PlaytimeString returned non-matching value for negative\n      playtimes (which shouldn't happen either, but now they're at\n      least shown correctly, if they happen due to other bugs)\n    * Bugfix: Several ASF header values are invalid if the broadcast\n      flag is set, getID3() now calculates these values in other\n      ways if the broadcast flag is set  (thanks fletchØpobox*com)\n    * Bugfix: lyrics3-flags-lyrics field was always false, and there\n      never was a lyrics3-flags-timestamp field present even though\n      the lyrics3-raw-IND field consisted of \"10\" (lyrics present,\n      timestamp not present).  (thanks i*f*schulzØweb*de)\n    * Bugfix: TAR.GZ files produce PHP errors when\n      option_gzip_parse_contents == true in module.archive.gzip.php\n      (thanks alan*harderØsun*com)\n\n\n1.7.8b1: [2007-01-08] Allan Hansen\n    » Major update to readme.txt\n    » PHP 4.2.0 required\n    » Tagwriter requires metaflac 1.1.1+ in order to write FLAC tags.\n    » Removed broken and non-fixable tagwriting module for real format.\n    ! Developers please help fix the above module:\n      https://www.getid3.org/phpBB3/viewtopic.php?t=677\n    » Avoided security issues with demo.browse.php, demo.write.php and\n      demo.mysql.php. These demos are now disabled by default and has\n      to be enabled in the source.\n    * Bugfix: id3v2 genre broken since 1.7.7.\n    » Added DTS module (module.audio.dts.php)\n    ¤ ASF/WMV files now return largest video stream dimensions in\n      [video][resolution_x] and [video][resolution_y]\n    * Bugfix: Minor issues with midi module (avoid PHP_NOTICE).\n    * Bugfix: Minor issues with lyrics3 (avoid PHP_NOTICE).\n    * Bugfix: PHP_NOTICE issues in MultiByteCharString2HTML()\n    * Bugfix: PHP_NOTICE issue  in BigEndian2Float()\n    * Bugfix: fread() zero bytes issue in real module.\n    * Bugfix: ASF module returned mime type video/x-ms-wma instead of\n      video/x-ms-wmv for certain FourCCs.\n    * Bugfix: PHP_NOTICE issues with broken ID3v2 tag/garbage.\n    * Bugfix: PNG module broken in regards to gIFg and gIFx chunks.\n    » Removed detection of short filenames 8dot3 under windows, as\n      it only worked for English versions of windows and has other\n      problems.\n    * Bugfix: Some CBR MP3 files detected as VBR with plenty of warnings.\n    * Bugfix: PHP_NOTICE issues in MP3 module.\n    * Bugfix: Quicktime returned incorrect frame rate.\n    * Bugfix: DivByZero on zero length FLV files.\n    * Bugfix: PHP_NOTICE one some FLV files.\n    * Bugfix: ID3v2 UTF-8/16 encoded frames terminated by \\x00\n    * Bugfix: ID3v2 LINK frames iconv error.\n    * Bugfix: ID3v2 padding length calculated incorrectly.\n    * Bugfix: ID3v2.3 extended headers non-conformance\n    » SVG file detection.\n    » Added SVG user module (user_modules/module.graphic.svg.php).\n      Thanks to Roan Horning.\n    » PAR2 file detection (no parsing)\n    * Bugfix: Wave files being detected as MP3.\n    * Bugfix: ASF padding offset bug.\n    * Bugfix: Shorten module not working for wav files with fmt\n      chunks <> 16 bytes.\n    ¤ RIFF: Zero sized chunk invokes warning instead of error.\n    ¤ FLAC: Removed some ['raw'] keys.\n    ¤ MPC: Mime type returned: audio/x-musepack\n\n1.7.7: [2006-06-25] Allan Hansen\n    * Bugfix: AAC static bitrate cache wrong result when parsing\n      several files.\n    * Bugfix: Do not return NULL video bitrate for ASF v3.\n    * Bugfix: getid3_lib::GetImageSize() broken => JPG module broken.\n    * Bugfix: Encoder options should now be returned with correct\n      \"--alt-preset n\" /  \"--alt-preset cbr n\" when scanning more files.\n    * Bugfix: Shorten module not escapeshellarg() filenames (UNIX only).\n    * Bugfix: Filenames not escapeshellarg() for md5_data and\n      sha1_data (UNIX only).\n    * Bugfix: UNIX: head and tail called with -cNNN instead of \"-c NNN\".\n    » Added detection support for PDF and MS Office documents\n      (*.doc, *.xls, *.pps, etc)  (thanks zeromassmediaØgmail*com)\n    ¤ Bugfix: ID3v2 \"TDRC\" frame now used as \"year\" in comments if TYER\n      unavailable (TYER is deprecated in ID3v2.4)\n      (thanks matthiasØpanczyk*org)\n    ¤ Removed GETID3_OS_DIRSLASH, replaced with DIRECTORY_SEPARATOR\n    * Bugfix: added LAME preset guessing for presets 410,420,440,490\n      (thanks adminØlogbud*com)\n    * Bugfix: Added escapeshellarg() call in getid3_lib::hash_data\n      (thanks towbØgmx*net)\n    » TAR module no longer reads entire file into memory\n    » FLV module no longer reads entire file into memory\n    * Bugfix: added LAME preset guessing for presets 410,420,440,490\n      (thanks adminØlogbud*com)\n    * Bugfix: Added escapeshellarg() call in getid3_lib::hash_data\n      (thanks towbØgmx*net)\n    * Bugfix: Error message when padding in FLAC files were used up.\n    * Bugfix: Shorten module not working under windows.\n    ¤ Bugfix: gmmktime() instead of mktime().\n    ¤ Using gmmktime() instead of mktime() in ISO, ZIP, PNG and RIFF\n      modules to avoid E_STRICT notices with PHP5.1+.\n    * Bugfix: ['comments_html'] and ['comments'] contains different\n      value when having multiple tags (one of them ID3v1) and the\n      long field names.\n\n1.7.6: [2006-03-12] James Heinrich\n    * Rewrote getid3_lib::GetDataImageSize() to use GetImageSize()\n      instead of using code by filØrezox*com\n    * Bugfix: incorrect dimensions from disabled Quicktime tracks\n      (thanks m-1Øgmx*net)\n    * Bugfix: ['codec'] key warning in module.audio-video.asf.php\n      (thanks niel*archerØblueyonder*co*uk)\n    * Bugfix: undefined array in write.php\n      (thanks drewishØkatherinehouse*com)\n    * Bugfix: DeleteAPEtag() incorrectly failing when no tag present\n      (thanks drewishØkatherinehouse*com)\n    * Bugfix: ID3v2 writing frames with URL fields failing when URL\n      is not in ISO-8859-1  (thanks drewishØkatherinehouse*com)\n    * Bugfix: PHP notices on bad ID3v2 frames\n      (thanks cw264701Øohiou*edu)\n    * Bugfix: audio & video bitrates sometimes wrong in ASF files\n      (thanks kris_kauperØexcite*com)\n\n1.7.5: [2005-12-29] James Heinrich\n    » Added FLV (FLash Video) support -- new file:\n      module.audio-video.flv.php\n      (thanks Seth Kaufman <seth@whirl-i-gig.com> for code)\n    » Real tags can now be written (previous Real tag writing\n      code was not supposed to be in public releases, as it\n      was not complete)\n    » GETID3_HELPERAPPSDIR now autodetected under Windows\n    ¤ ASF lyrics now returned under [comments][lyrics]\n    * Bugfix: removed \"--lowpass xxxxx\" info from guessed\n      LAME presets when source frequency <= 32kHz\n    * Bugfix: ID3v2 extended header errors\n    * Bugfix: missing ob_end_clean() in write.id3v2.php\n      (thanks rasherØgmail*com)\n\n1.7.4: [2005-05-04] James Heinrich\n    ¤ Added ['quicktime']['hinting'] key (boolean)\n      (thanks jonØwebignition*net)\n    * Bugfix: major UTF-8 to UTF-16/ISO-8859-1 conversion\n      bug (empty string returned) when using iconv_fallback\n      (thanks chrisØfmgp*com)\n    * Bugfix: Missing 'lossless' key in RIFF-WAV\n      (thanks bobbfwedØcomcast*net)\n\n1.7.3: [2005-04-22] James Heinrich\n    » Added TAR support -- new file: module.archive.tar.php\n      (thanks Mike Mozolin <teddybearØmail*ru> for code!)\n    » Added GZIP support -- new file: module.archive.gzip.php\n      (thanks Mike Mozolin <teddybearØmail*ru> for code!)\n    * Bugfix: demo.browse.php now displays embedded images\n      internally instead of passing local filename as IMG\n      SRC (should allow demo.browse.php to correctly show\n      embedded images over a network)\n      (thanks patpowermanØhotmail*com)\n    * Bugfix: minor UTF-8 display issues in demo.browse.php\n    * Bugfix: demo.browse.php now works even if the evil\n      setting magic_quotes_gpc is turned on\n      (thanks patpowermanØhotmail*com)\n    * Bugfix: incorrect MIDI playtime for some files\n      (thanks joelØoneporpoise*com)\n    * Bugfix: 'url_source' typo in module.tag.id3v2.php\n      (thanks richardlynchØusers*sourceforge*net)\n    * Bugfix: Quicktime 'mvhd' matrix values were wrong\n      (thanks webØbobbymac*net)\n    ¤ ID3v2 now returns xx/yy for ['track'] (if\n      available), with xx in ['tracknum'] and yy in\n      ['totaltracks']. Previously ['tracknum'] was not\n      available and ['track'] had only xx.\n    Bugfixes and improvements to /demo/demo.mysql.php:\n      - remix/version parsed from tags and stored in\n        database, can be used when renaming files\n      - track number can be used for renaming files\n\n\n1.7.2: [2004-10-18] Allan Hansen\n    » Added support for WavPack v4.0+\n      (thanks ahØartemis*dk)\n    » Removed code for parsing EXE files\n      (thanks ahØartemis*dk)\n      Removed file: module.misc.exe.php\n    * Bugfix: Large ID3v2 tags inside ASF not parsed\n      properly under PHP5.\n    * Bugfix: Certain Wavpack3 files failed under PHP5 due\n      to new undocumented tmpfile() limit (same problem as\n      above).\n    * Bugfix: New iTunes crashes PHP - temp fix - no tags\n      on those files.\n    * Bugfix: ['nsv']['NSVs']['framerate_index'] might be\n      wrong  (thanks ahØartemis*dk)\n    * Bugfix: transparent color was wrong from truecolor\n      PNG  (thanks ahØartemis*dk)\n    * Bugfix: Changed MPC SV7 header size from 30 to 28,\n      this will change hash values for MPC files\n      (thanks ahØartemis*dk)\n    * Bugfix: Changed MPC SV4-6 header size from 28 to 8,\n      this will change hash values for MPC files\n      (thanks ahØartemis*dk)\n    ¤ Trim/unset wavpack encoder_options to match 2.0.0b2\n      output.\n    ¤ Commented-out unknown/unused values in NSV and ISO\n      modules  (thanks ahØartemis*dk)\n\n\n1.7.1b1: [July-26-2004] James Heinrich\n    » Added support for Apple Lossless Audio Codec\n    » Added support for RealAudio Lossless\n    » Added support for TTA v3\n    » Added support for TIFF\n      New file: /getid3/module.graphic.tiff.php\n    » Modified iconv_fallback to work with UTF-8, UTF-16, UTF-16LE,\n      UTF-16BE and ISO-8859-1 even if iconv() and/or XML support is\n      not available. This means that iconv() is no longer required\n      for most users of getID3()\n      (thanks Jeremia, khleeØbitpass*com)\n    » Added support for Monkey's Audio v3.98+ (thanks ahØartemis*dk)\n    » Included new demo showing most-basic getID3() usage\n      New file: /demos/demo.basic.php\n    * Bugfix: LAME3.94+ presets cached incorrectly if multiple files\n      are scanned in one batch and first file is LAME3.93 or earlier\n      (thanks enoyandØyahoo*com)\n    * Bugfix: Added warning if compressed ID3v2 frame decompression\n      fails. (thanks Mike Billings)\n    * Bugfix: Assorted small fixes to ensure compatability with PHP5\n    * Bugfix: ID3v1 genre \"Blues\" could not be written\n      (thanks Jeremia)\n    * Bugfix: ['bitrate_mode'] typo in module.audio-video.real.php\n      (thanks asukakenjiØusers*sourceforge*net)\n    * Bugfix: ['zip']['files'] is now populated with filenames even\n      if End Of Central Directory couldn't be parsed\n    * Bugfix: ['audio']['lossless'] was incorrect for FLAC\n      (thanks WaldoMonster)\n    * Bugfix: MD5 File was incorrect in directory browse mode for\n      /demo/getid3.browse.php\n    * Bugfix: PHP v5 compatability changes (float array keys, fread()\n      calls with zero data length)\n      (thanks getid3Øjsc*pp*ru)\n    * Bugfix: was dying if on compressed ID3v2 frames if\n      gzuncompress() function was unavailable\n    * Bugfix: ['vqf']['COMM'] was always empty\n    * Bugfix: MIDI playtime was missing for single-track MIDI files\n    * Bugfix: removed &#0; characters from ['comments_html']\n      (thanks p*quaedackersØplanet*nl)\n    * Bugfix: improved MIDI playtime accuracy\n      (thanks joelØoneporpoise*com)\n    * Bugfix: BMP subtypes 4 and 5 were not being identified\n    * Bugfix: frame_rate in AVI was incorrectly truncated to integer\n    * Bugfix: FLAC cuesheet track index was incorrect\n      (thanks tetsuo*yokozukaØoperamail*com)\n    ¤ ['quicktime']['display_scale'] now contains the playback scale\n      multiplier for QuickTime movies - a movie set to playback at\n      double-size will have \"2\" here. Other values are \"1\" and \"0.5\"\n    ¤ Added LAME preset guessing for --preset medium with v3.90.3\n      (thanks phwipØfish*co*uk)\n    ¤ Added $encoding_id3v1 to allow for ID3v1 encodings other than\n      the standard ISO-8859-1\n    ¤ Default AVI video bitrate_mode is now 'vbr'\n      (thanks eltoderØpisem*net)\n    Force getID3() to abort if Shorten files have ID3 or APE tags\n      (thanks ahØartemis*dk)\n    Editable textbox for parent directory in demo.browse.php\n      (thanks eltoderØpisem*net)\n\n\n1.7.0-hotfix [2004-03-17] Allan Hansen\n    (hotfix version released by Allan Hansen)\n    * Bugfix: PHP 4.1.x compatiblity - fgets($fp) => fgets($fp, 1024)\n    * Bugfix: Added default charset to TextEncodingNameLookup() in\n      module.tag.id3v2.php\n    Ø Removed option_no_iconv\n      iconv() support is only a requirement for WMA/WMW/ASF, and for\n      destination encodings other than ISO-8859-1 and UTF-8, iconv is\n      not needed otherwise. New 'iconv_req' in GetFileFormatArray()\n      only set for WMA/WMV/ASF. analyze() now refuses to analyse\n      WMA/ASF file if iconv is not present.\n    iconv_fallback() only dies on internal errors not missing iconv()\n\n\n1.7.0: [January-19-2004] James Heinrich\n    » Added support for RIFF/CDXA files (MPEG video in RIFF container\n      format (thanks chrisØdigitekdesign*com)\n    » Added support for TTA v2  (thanks ahØartemis*dk)\n    ¤ ID3v2 unsynchronisation scheme disabled by default because most\n      tag-reading programs cannot read unsynchronised tags. Can be\n      overridden by setting id3v2_use_unsynchronisation to true.\n      (thanks mikeØdelusion*org)\n    ¤ extention.*.php renamed to extension.*.php\n      (thanks tp62Øcornell*edu)\n    ¤ /demo/demo.check.php renamed to /demo/demo.browse.php\n    ¤ Added id3v2_paddedlength configuration parameter to WriteTags()\n      and renamed tag_language to id3v2_tag_language\n    ¤ MPEG audio layers are now represented as 1, 2 or 3 instead of\n      'I', 'II', or 'III'\n    ¤ Added [audio][wformattag] and [video][fourcc] for WAV and AVI\n    ¤ Added [audio][streams] which contains one entry for each audio\n      stream present in the file (usually only one). The data is a\n      copy of what is usually found in [audio]. If there are multiple\n      audio streams then [audio] will contain a sum of the bitrates\n      of all audio streams, and the data format of the first stream\n      (if streams are of different data types)\n    ¤ Added BruteForce mode to mp3 scanning. Disabled by default as\n      it is extremely slow and only files that are broken enough to\n      not really play will gain any benefit from this.\n    ¤ Suppress '--resample xxxxx' appended to encoder options for mp3\n      with low-quality presets for default sampling frequencies\n    ¤ Enhanced LAME preset guessing for pre-3.93 with a better lookup\n      table, --resample/--lowpass guessing (thanks phwipØfish*co*uk)\n    ¤ RIFF files with non-MP3 contents no longer have\n      [audio][encoder_options] set\n    ¤ Added [audio][encoder_options] to audio formats where possible\n      (including LiteWave, LPAC, OptimFROG, TTA)\n    ¤ Moved [quantization] and [max_prediction_order] from\n      [lpac][flags] to just [lpac]\n    ¤ WavPack flags are now parsed into [wavpack][flags]\n    * Bugfix: APEtags with ReplayGain information stored with comma-\n      seperated decimal values (ie \"0,95\" instead of \"0.95\") were\n      giving wrong peak and gain values\n    * Bugfix: Filesize > 2GB not always detected correctly\n    * Bugfix: Some ID3v2 frames had data key unset incorrectly\n      (thanks chrisØdigitekdesign*com)\n    * Bugfix: Warnings on empty-strings-only comments\n    * Bugfix: ID3v2 tag writing may have had incorrect padding length\n      if padded length less than current ID3v2 tag length and\n      merge_existing_data is false  (thanks mikeØdelusion*org)\n    * Bugfix: hash_data() for SHA1 was broken under Windows\n    * Bugfix: BigEndian2Float()/LittleEndian2Float() were broken\n    * Bugfix: LAME header calculated track peaks were incorrect for\n      LAME3.94a15 and earlier\n    * Bugfix: AVIs with VBR MP3 audio data reported incorrect bitrate\n      and bitrate_mode\n    * Bugfix: AVIs sometimes had incorrect or missing video and total\n      bitrates\n    * Bugifx: AVIs sometimes had incorrect ['avdataend'] and\n      therefore also incorrect data hashes (md5_data, sha1_data)\n    * Bugfix: ID3v1 genreid no longer returned for Unknown genre\n    * Bugfix: ID3v1 SCMPX genres were broken\n    Modified LAME header parsing to correctly process peak track\n      value for LAME3.94a16+ (thanks Gabriel)\n    md5_file() and sha1_file() now work under Windows in PHP < 4.2.0\n      and 4.3.0 respectively with helper apps\n    Default md5_data() tempfile location is now system temp directory\n      instead of same directory as file (thanks towbØtiscali*de)\n    Improved list of RIFF ['INFO'] comment key translations\n    More helpful error message when GETID3_HELPERAPPSDIR has spaces\n    /demo/demo.browse.php now autogets both MD5 and SHA1 hashes for\n      files < 50MB\n    Replaced PHP_OS comparisons with GETID3_OS_ISWINDOWS define\n      (thanks necroticØusers*sourceforge*net)\n\n\n1.7.0b5: [December-29-2003] James Heinrich\n    » Windows only: Various binary files are now required for some\n      file formats, especially for tag writing, as well as md5sum\n      (and other) calculations. These binaries are now stored in the\n      directory defined as GETID3_HELPERAPPSDIR in getid3.php\n      (default is /helperapps/ parallel to /getid3/).\n      Note: This directory must not have any spaces in the pathname.\n      All neccesary files are available as a seperate download.\n      See /helperapps/readme.txt for more information\n      New file: /helperapps/readme.txt\n    » Unified tag-writing interface for all tag formats\n      New file: /getid3/write.php\n                /getid3/write.apetag.php\n                /getid3/write.id3v1.php\n                /getid3/write.id3v2.php\n                /getid3/write.lyrics3.php\n                /getid3/write.metaflac.php\n                /getid3/write.vorbiscomment.php\n    » Added support for Shorten - requires shorten binary (head.exe\n      is also required under Windows).\n      New file: /getid3/module.audio.shorten.php\n    » Added support for RKAU\n      New file: /getid3/module.audio.rkau.php\n    » Added (minimal) support for SZIP\n      New file: /getid3/module.archive.szip.php\n    » Added MySQL caching extention  (thanks ahØartemis*dk)\n      New file: /getid3/extention.cache.mysql.php\n    » Added DBM caching extention  (thanks ahØartemis*dk)\n      New file: /getid3/extention.cache.dbm.php\n    » Added sha1_data hash option  (thanks ahØartemis*dk)\n    » Added option to allow getID3() to skip ID3v2 without parsing it\n      for faster scanning when ID3v2 data is not required. If you\n      want to enable this feature delete /getid3/module.tag.id3v2.php\n      (thanks ahØartemis*dk)\n    ¤ 8-bit WAV data now calculates MD5 checksums as normal, not\n      converting to signed data as before, so stored md5_data_source\n      in FLAC files will no longer match md5_data for the equivalent\n      decoded 8-bit WAV. A warning will be generated for 8-bit FLAC\n      files\n    ¤ Added option_no_iconv option to allow getID3() to work\n      partially without iconv() support enabled in PHP\n      (thanks ahØartemis*dk)\n    ¤ All '*_ascii' keys removed for ASF/WMA/WMV files\n    ¤ All 'ascii*' keys removed for ID3v2 tags\n    ¤ Ogg filetypes now return MIME of \"application/ogg\" instead of\n      the previous \"application/x-ogg\"\n      (thanks blakewattersØusers*sourceforge*net)\n    ¤ Force contents of ['id3v2']['comments'] to UTF-8 format from\n      whatever encoding each frame may have (text encoding can vary\n      from frame to frame in ID3v2)\n    ¤ MP3Gain information from APE tags suppressed from ['tags'] and\n      parsed into ['replay_gain']\n    ¤ ReplayGain information (all formats) changed from \"Radio\" and\n      \"Audiophile\" to \"Track\" and \"Album\" respectively\n    ¤ ['volume'] and ['max_noclip_gain'] are now available in both\n      ['replay_gain']['track'] and ['replay_gain']['album'] for all\n      formats that calculate ReplayGain.\n    ¤ ['video']['total_frames'] is available for AVIs\n    ¤ All parsed ID3v2 frame data is now in ['id3v2'][XXXX][#]\n      (previously some frame types would have numeric array keys if\n      multiple instances of that frame type were allowed and other\n      frame types would not)\n    ¤ ASF/WMA \"WM/Picture\" images are now parsed in the same manner\n      as ID3v2 with the image (ex JPEG) data returned in [data]\n      rather than [value]\n    * Bugfix: Optional tag processing options were being ignored (ie\n      ID3v1 still processed even if option_tag_id3v1 == false)\n      (thanks ahØartemis*dk)\n    * Bugfix: fixed MultiByteCharString2HTML() for UTF-8\n    * Bugfix: Quicktime files not always reporting video frame_rate\n    * Bugfix: False ID3v1 synch patterns in APE or Lyrics3 tags are\n      now detected and incorrect ID3v1 data not returned\n      (thanks sebastian_maresØusers*sourceforge*net for the idea)\n    * Bugfix: WMA9 Lossless now reported as lossless\n    * Bugfix: two typos in ID3v1 genre list\n    * Bugfix: MPEG-2/2.5 ABR/VBR MP3 files had doubled playtime\n    * Bugfix: MPEG-2/2.5 LayerII (ie MP2: 24/22.05/16kHz) files were\n      not detected due to incorrect frame length calculation\n    * Bugfix: MPEG LayerI files were not detected due to incorrect\n      frame length calculation (must be multiple of slot length)\n    Added alternative md5_data via system call - twice as fast. Needs\n      \"getID3()-WindowsSupport\" to work under Windows.\n      (thanks ahØartemis*dk)\n    ID3v2.4 compressed frames are now supported\n    php_uname() calls changed to use PHP_OS constant\n    Added SCMPX extensions to ID3v1 genres (0xF0-0xFE)\n    Obfuscated contributor email address in changelog and sourcecode\n    Added memory-saving EmbeddedLookup() function for lookup tables\n      in RIFF and ID3v2 modules (thanks ahØartemis*dk)\n    Major memory patches to many modules by using\n      $var = &$INFO_ARRAY_AT_SOME_INDEX\n      in place of large multi-dimensional array declarations.\n      Memory saved:  RIFF: ~200kB;  ID3v2: ~475kB;  ASF: ~50kB  etc.\n      (thanks ahØartemis*dk)\n\n\n1.7.0b4: [November-19-2003] James Heinrich\n   » Support added for MPC files with old SV4-SV6 structure\n   » RealVideo now properly supported with resolution, framerate, etc\n     (thanks jcsston)\n   » RealAudio files with old-style file format (v2-v4) are now\n     fully supported\n   » Support added for DolbyDigital WAV files (thanks ahØartemis*dk)\n   ¤ ['RIFF'] is now ['riff'] to conform to make all root key names\n     lowercase\n   ¤ ['OFR'] is now ['ofr'] to conform to make all root key names\n     lowercase\n   ¤ ['tags_html'] is now available as a copy of ['tags'] but\n     with all text replaced with an HTML version of all characters\n     above chr(127), translated according to whatever the encoding\n     of the source tag is, in the HTML form &#1234;\n   ¤ CopyTagsToComments() is now available in getid3_lib\n   ¤ QuicktimeVR files now return a ['video']['dataformat'] of\n     'quicktimevr' instead of 'quicktime' (thanks gtsØtsu*biz)\n   ¤ Quicktime video files with DivX, Xvid, 3ivx or MPEG4 video\n     streams now return those names as ['video']['dataformat']\n   ¤ MPEG video files are now identified with ['video']['codec'] set\n     to either 'MPEG-1' or 'MPEG-2' (rather than just 'MPEG'). If you\n     see a file wrongly identified, please report it!\n     (thanks fccHandler)\n   ¤ All bitrate values in ['mpeg']['audio'] is now reported in bps\n     rather than kbps (ie 128000 instead of 128) for consistancy\n   ¤ AVIs with MP2 audio now report ['audio']['dataformat'] as 'mp2'\n     rather than 'wav'  (thanks metalbrainØnetian*com)\n   ¤ Added ['md5_data_source'] for OptimFROG\n   ¤ AC3 in RIFF-WAV now identified with ['audio']['dataformat']\n     returning 'ac3'\n   ¤ WavPack ['extra_bc'] now returned as integer\n   ¤ WavPack ['extras'] now returned as 3-element array of integers\n   ¤ MP3 ['audio']['encoder options'] now returns 'VBR' or 'CBR' only\n     (no bitrate) if no LAME preset is used, or 'VBR q??' where ?? is\n     a number 0-100 for Fraunhofer-encoded VBR MP3s\n   * Bugfix: VBR MP3s could have incorrect bitrate reported\n   * Bugfix: Quicktime files with MP4 audio were not returning\n     ['video']['dataformat'] (thanks robØmassive-interactive*nl)\n   * Bugfix: strpad vs str_pad typo in module.riff.php\n     (thanks nicojunØusers*sourceforge*net)\n   * Bugfix: ReplayGain information was often wrong for MPC files\n   * Bugfix: MD5 and other post-TAIL chunks were not being processed\n     in module.audio.optimfrog.php\n   * Bugfix: Undefined variable in table_var_dump() in demo/check.php\n   * Bugfix: QuickTime files now only return information in [audio]\n     or [video] if those exist in the file\n   * Bugfix: WavPack no longer tries to read entire compressed data\n     chunk\n   * Bugfix: Properly handle VBR MP3s with \"Info\" (rather than\n     \"Xing\") header frame. foobar2000 adds this to MP3 files when\n     \"Fix MP3 Header\" function is used (thanks ahØartemis*dk)\n   * Bugfix: Fraunhofer VBRI headers for MP3s were assuming 2-byte\n     entries for TOC rather than using stride, and were ignoring the\n     scaling value. (thanks sebastianØmaresweb*net)\n   Several QuickTime atoms have been added to an exclusion list\n     because they have been observed, but I have no idea what they\n     are supposed to do so I can't add real support for them, but\n     they should not generate warnings (robØmassive-interactive*nl)\n   Old MPC encoder (before v1.06) was return as v0.00, now returned\n     as 'Buschmann v1.7.0-v1.7.9 or Klemm v0.90-v1.05'\n     (thanks ahØartemis*dk)\n   Added check for magic_quotes_runtime and code to disable it if\n     neccesary (thanks stefan*kischkelØt-online*de)\n   Added 3ivx fourCCs to module.audio-video.quicktime.php\n   MP3 and AC3 streams are now parsed when contained inside RIFF-WAV\n     or RIFF-AVI container formats\n   Better detection of named presets in LAME 3.93/3.94\n\n\n1.7.0b3: [October-17-2003] James Heinrich\n   » AC-3 (aka Dolby Digital) is now supported.\n     New file: /getid3/module.audio.ac3.php\n   * Bugfix: ID3v2-writing function Unsynchronise() was broken, which\n     made ID3v2 tag containing binary data (typically pictures) get\n     corrupted. (thanks t*coombesØbendigo*vic*gov*au,\n     i*kuehlbornØndh*net, mikeØdelusion*org, mikeØftl*com)\n   * Bugfix: Zip comments now returned as array instead of string,\n     as they're supposed to be.\n   * Bugfix: Quicktime/MP4 files may have reported extremely low\n     bitrates (thanks spunkØdasspunk*com)\n   Improved double-ID3v1 check to prevent false detection when string\n     \"TAG\" is present in APE or Lyrics3\n   Fixed /demo/simple.php\n   Fixed /demo/joinmp3.php\n   Fixed /demo/mimeonly.php\n   Fixed /demo/write.php\n\n\n1.7.0b2: [October-15-2003] James Heinrich\n   » TTA Lossless Audio Compressor format now supported.\n     (http://tta.iszf.irk.ru)\n     New file: /getid3/module.graphic.tta.php\n   » PhotoCD (PCD) format now supported. Image data for the three\n     lowest resolutions (192x128, 384x256, 768x512) can be optionally\n     extracted.\n     New file: /getid3/module.graphic.pcd.php\n   ¤ RIFF-MP3 files now should return the same ['md5_data'] as the\n     identical MP3 file outside the RIFF container\n   ¤ Name of LAME preset used (if available, needs LAME v3.90+)\n     returned in ['mpeg']['audio']['LAME']['preset_used'] and also as\n     part of ['audio']['encoder_options']\n   ¤ VQF module now sets ['audio']['encoder_options'] to i.e. CBR96\n   ¤ MP3 module now sets ['audio']['encoder_options'] on CBR files\n     and all LAME-encoded files\n   ¤ MPC module now sets ['audio']['encoder_options']\n   ¤ Monkey module now sets ['audio']['encoder_options']\n   ¤ AAC module now sets ['audio']['encoder_options'] to profile name\n   ¤ ASF module now sets ['audio']['encoder_options']\n   ¤ Ogg module adds ['audio']['encoder_options'] -b 128 on\n     Ogg Vorbis 1.0+ ABR files\n   ¤ Ogg module adds ['audio']['encoder_options'] -q N   on\n     Ogg Vorbis 1.0+ VBR files 44k/48k sample rate/stereo files only.\n   ¤ Ogg module ['audio']['encoder_options'] \"Nominal birate: 80k\" to\n     other Ogg Vorbis files.\n   ¤ ID3v2 track number now returned as string (with leading zeros,\n     if present in data) rather than integer (thanks Plamen)\n   ¤ ASF module returns ['asf']['comments']['encoding_time_unix'] if\n     available (from WM/EncodingTime)\n   ¤ Fixed /demo/mysql.php and added some new features:\n     - encoder options\n     - ID3v2 \"Encoded By\"\n     - non-empty comments\n     - total entries in database summary (totals & averages)\n     - database version update\n   * Bugfix: 'UNICODE' iconv() charset changed to 'UTF-16LE' or\n     'UTF-16BE' as appropriate\n   * Bugfix: iconv_fallback() function created in case iconv() fails\n   * Bugfix: fixed MD5 calls in demo/check.php\n   * Bugfix: reenabled detection of APE + Lyrics3 tags in same file\n   * Bugfix: ASF module now returns ID3v1 genre as string instead of\n     number - patch from Eugene Toder.\n   * Bugfix: ASF module now reads non-standard field names,\n     i.e. \"date\" as well as WM/Year - patch from Eugene Toder.\n   * Bugfix: ASF module now returns genre as-is if it is not a\n     standard ID3v1 genre (thanks wonderboy)\n   * Bugfix: Eliminated false-synch problem in MP3 module\n   * Bugfix: Fixed missing root ['bitrate'] for most formats\n   * Bugfix: ['audio']['compression_ration'] missing for MPC\n     (thanks WaldoMonster)\n   * Bugfix: NSV module died in 1.7.0b1\n   * Bugfix: ASF module died in 1.7.0b1 when WM/Picture preset\n   * Bugfix: ASF tracknumber incorrect when specified by WM/Track\n     rather than WM/TrackNumber (thanks jgriffiniiiØhotmail*com)\n   * Bugfix: MPEG audio+video playtime should now be pretty accurate\n     (ie within 0.1% variation at most)\n     (thanks mgrimmØhealthtvchannel*org)\n   * Bugfix: ID3v2 not being copied to ['tags'] in some cases\n   * Bugfix: LAME CBR files with Info tag were being incorrectly\n     flagged as VBR (thanks Jojo)\n   * Bugfix: LAME tag not being detected for LAME 3.90 (original)\n   Changed regex pattern match for MP3 to include 3rd byte for more\n     reliable/accurate pattern matching\n   Added duplicate-ID3v1 tag checking (two ID3v1 tags, one after the\n     other) that has been known to occur with iTunes\n     (thanks towbØtiscali*de)\n   Added instructions for enabling iconv() support under Windows\n   Removed some unneccesary debugging code\n   Suppressed duplicate PHP warnings for missing include files\n   Included some missing dependencies in various files\n   /demo/audioinfo.class.php now copies ['audio']['encoder_options']\n\n\n1.7.0b1: [2003-09-28] Allan Hansen\n   This beta version was not made by James Heinrich. It was made by\n   Allan Hansen <ahØartemis*dk> - please send bug reports on this\n   beta directly to me.\n\n   James Heinrich will release 1.7.0 final, but it may take some time\n   to work out the bugs from the major rewrite.\n\n   This version could be called getID3lite. It makes a lot of checks\n   optional and makes it easy to remove support for undesired formats\n\n   It also is more library-like. Older versions of getID3() declared\n   an incredible amount of global scope functions and defined several\n   constants. 1.7.0beta1 still declares constants, but they are all\n   prepended by GETID3_. It declares no global scope functions - they\n   are all wrapped into classes.\n\n   » Made getID3() depend on iconv library: compile PHP --with-iconv\n   » Created new directory structure\n       Moved all demos to demos/\n       Moved all getID3() files to getid3/\n       Renamed most files to module.something\n       Changed header in all module.something to explain what they do\n       Simply remove all modules you don't need\n       Wrapped all modules into classes\n   * Bugfix: Implemented misc patches from Eugene Toder\n   * Bugfix: Implemented misc patches from \"six\"\n   ¤ Added root key 'encoding'\n   ¤ Added prefix GETID3_ to all defined constants.\n   ¤ Wrapped getid3.php into getid3 class\n   ¤ Wrapped getid3.functions.php into getid3_lib class\n       Removed unused functions\n       Moved several functions away from getid3.functions.php and\n         into the files where they are actually used.\n       Renamed getid3.functions.php to getid3.lib.php\n       Moved getid3.rgad.php functions into getid3_lib\n       Moved getid3.getimagesize.php funcitons ingo getid3_lib\n   ¤ Moved getid3.ogginfo.php into ogg module\n   ¤ Combined GetTagOnly() and GetAllFileInfo() in method analyze\n   ¤ Removed redundant and unuseful root keys\n       'file_modified_time' == filemtime($filename)\n       'md5_file' == md5_file($filename)\n       'exist' == file_exists($filename)\n   ¤ Changed root key ['tags'] from array of string to array of array\n     of comments.\n   Simplified code for detecting base path.\n   Removed ob_ from InitializeFilepointerArray(). That was really a\n     ugly HACK to get output from fopen. If user want the reason,\n     he should open the file himself!\n   Checking for APE tags before lyrics3 - makes Lyrics3 not depend\n     on APE tag. It seems to work on my test file.\n   Changed ['error'] and ['warning'] in multiple files to append to\n     array instead of appending to string. That simplified code in\n     getid3.php too.\n   Simplified clean-up procedure: simply remove all empty root keys\n   Setting tags in individual modules instead of main getid3.php\n   Made Bonk and ASF modules non-dependent on id3 modules - id3\n     optional.\n   Rewrote HandleAllTags() - simplified and convert comments to\n     desired encoding.\n   Replaced all calls to RoughTranslateUnicodeToASCII() in ASF module\n     with a TrimConvert() method. This uses iconv() for conversion.\n     It also converts from UNICODE instead of UTF-16BE, as the spec\n     says it should.\n   Replaced all calls to RoughTranslateUnicodeToASCII() in id3v2\n     module with iconv(). id3v2 module also reads\n     $ThisFileInfo['encoding'] and converts all comments to this\n     format. All other formats just add their comments in their\n     native charset, but every comment field in id3v2 can have a\n     different encoding, so this is needed.\n   Did same thing as above with ISO module. However - it does not\n     work. I need to find out how to specify big-endian unicode !=\n     UNICODING encoding name given to iconv().\n   Built-in assume mp3 format in getid3.php\n   Temporarily nuked root key ['comments'] and CopyCommentsToRoot()\n   Updated demo/audioinfo.class.php\n   Updated demo/check.php - some thing don't work!\n   Other demos are out of order!\n\n\n1.6.5: [October-06-2003] James Heinrich\n   » Added support for LiteWave (thanks supportØclearjump*com)\n   Ø Split out speedup info from ['OFR']['OFR']['compression'] into\n     ['OFR']['OFR']['speedup']\n   Ø If EXIF functions for JPEG not available, now warning not error\n   Ø ID3v2 track number now returned as string (with leading zeros,\n     if present in data) rather than integer (thanks Plamen)\n   * Bugfix: now correctly parses cbSize element of WAVEFORMATEX\n     structure (thanks supportØclearjump*com)\n   * Bugfix: ASF module now reads non-standard field names,\n     i.e. \"date\" as well as WM/Year - patch from Eugene Toder.\n   * Bugfix: ASF module now returns genre as-is if it is not a\n     standard ID3v1 genre (thanks wonderboy)\n   * Bugfix: ['audio']['compression_ration'] missing for MPC\n     (thanks WaldoMonster)\n   Prevent infinite loop in MP3 histogram if framelength == 0\n   Added wFormatTag values 0x00FF and 0x2001 - 0x2005\n     (thanks steveØheadbands*com)\n   Added \"twos\" and \"sowt\" FourCCs for Mac AIFC\n\n\n1.6.4: [June-30-2003] James Heinrich\n   » Added support for free-format MP3s\n     (thanks Sebastian Mares for the idea)\n   » Compressed (Flash 6+) SWF files are now handled properly\n     (thanks alan*cheungØalumni*ust*hk)\n   » Added DeleteLyrics3() to getid3.lyrics3.php\n   » Added FixID3v1Padding() to getid3.putid3.php\n   » Added new simple MP3-splicing sample file\n     (thanks tommybobØmailandnews*com for the idea)\n     New file: getid3.demo.joinmp3.php\n   » Moved all contents of getid3.putid3.php into either\n     getid3.id3v1.php or getid3.id3v2.php or getid3.functions.php as\n     appropriate\n     Removed file: getid3.putid3.php\n   ¤ ['error'] and ['warning'] keys now return as arrays, not strings\n   ¤ New root key for all files: ['file_modified_time'] (UNIX time)\n   ¤ getid3.demo.scandir.php renamed to getid3.demo.mysql.php\n   ¤ New demo file returns the MIME type only for a single file\n     (thanks adminØe-tones*co*uk for the idea)\n     New file: getid3.demo.mimeonly.php\n   ¤ Added check for valid ID3v1 padding (strings should be padded\n     with null characters but some taggers incorrectly use spaces).\n     A warning will be generated if padding is invalid. New boolean\n     key ['id3v1']['padding_valid'] indicates padding validity.\n   ¤ CleanUpGetAllMP3info() removes more useless root keys for\n     unknown-format files\n   ¤ Extended LAME information in ['mpeg']['audio']['LAME'] is now\n     only returned for LAME v3.90+\n   ¤ LAME-encoded MP3s now return\n     ['mpeg']['audio']['LAME']['long_version'] as well as\n     ['mpeg']['audio']['LAME']['short_version'] - these are identical\n     in LAME v3.90+ but older versions will report longer more\n     detailed version information if available\n   ¤ New Lyrics3 values: ['lyrics3']['raw']['offset_start'] and\n     ['lyrics3']['raw']['offset_end']\n   ¤ New optional parameter on getAPEtagFilepointer() to scan from a\n     defined offset rather than end-of-file to allow scanning of APE\n     tags before Lyrics3 tags\n   ¤ ['tag_offset_start'] and ['tag_offset_end'] are now present in\n     ['ape'], ['lyrics3'], ['id3v1'] and ['id3v2']\n   ¤ Numerous changes to the returned structure and content for La\n     files, including parsing the seektable (if applicable) and\n     parsing RIFF data occuring after the end of the compressed audio\n     data (notably RIFF comments)\n     (thanks mikeØbevin*de)\n   ¤ getSWFHeaderFilepointer() now has optional 3rd parameter\n     $ReturnAllTagData (default == false) which if set to true will\n     return data on all tags in ['swf']['tags']\n   ¤ ['swf']['bgcolor'] now returns the 6-character string\n     representing the background color in HTML hex color format\n     (thanks ubergeekØubergeek*tv)\n   ¤ ['swf']['header']['frame_delay'] is no longer returned\n   ¤ getQuicktimeHeaderFilepointer() now has two additional optional\n     parameters: $ReturnAtomData (default == true) and\n     $ParseAllPossibleAtoms (default == false). Setting\n     $ReturnAtomData to false will reduce the size of the returned\n     data array by unsetting ['quicktime']['moov'] before returning.\n     Leaving $ParseAllPossibleAtoms as false now suppresses parsing\n     of several atom types that contain very large tables of data\n     that are not typically useful. Atom type suppressed are:\n     stts, stss, stsc, stsz, and stco\n     (thanks ubergeekØubergeek*tv)\n   ¤ ['fileformat'] no longer set to 'id3' if ID3v1 or ID3v2 tag\n     detected but no other data format recognized\n   * Bugfix: La files now return the correct values for\n     ['avdataoffset'] and ['avdataend'] and therefore the correct\n     values for ['md5_data'] - note that ['md5_data'] values will not\n     match values from previous versions of getID3() - the previous\n     versions were incorrect\n     (thanks mikeØbevin*de)\n   * Bugfix: A temporary file was being created in the web server's\n     root directory (not DocumentRoot) each time ['md5_data'] was\n     calculated, and not removed due to lack of permissions. Temp\n     file is now created (as it was supposed to be) in the directory\n     of the file being examined, or the system temp directory, and\n     properly removed when done.\n   * Bugfix: Several incorrect values were being returned inside\n     ['mpeg']['audio']['LAME'] (thanks bouvigneØmp3-tech*org)\n   * Bugfix: SWF frame rates values were usually incorrect.\n     (thanks alan.cheungØalumni*ust*hk and ubergeekØubergeek*tv)\n   * Bugfix: ID3v2.2 files always flagged 4 bytes of invalid padding\n     (thanks marcaØmac*com)\n   * Bugfix: Lyrics3 without ID3v1 was not working properly\n   * Bugfix: Lyrics3, APE & ID3v1 can all now exist in the same file.\n     A warning is issued if APE comes after Lyrics3 (because Lyrics3-\n     aware taggers probably are not APE-aware and therefore won't be\n     able to find the Lyrics3 tag)  (thanks mp3gainØhotmail*com)\n   * Bugfix: WriteAPEtag() now writes the APE tag before any Lyrics3\n     tags (if present) and removes any incorrect ones that are after\n     existing Lyrics3 tags  (thanks mp3gainØhotmail*com)\n   * Bugfix: RIFF-WAVE file with incorrect NumberOfSamples values in\n     the 'fact' chunk no longer cause incorrect playtime calculation\n     (thanks stprasadØindusnetworks*com)\n   * Bugfix: getid3.demo.simple.php had undefined variables if the\n     file needed to be deep-scanned with assumeFormat\n   * Bugfix: fixed previously-incorrect ['avdataend'] values for APE\n     and Lyrics3 tags in some cases, which in some cases means that\n     ['md5_data'] is different than previously (now correct)\n   Much-improved detection of AAC-ADTS, which also means MP3\n     format detection should now be nearly twice as fast\n   Truncated AVIs and WAVs are now reported\n   Number of new features and bugfixes in getid3.demo.mysql.php\n   Quicktime 'meta' atoms now parsed, so Quicktime MP4 files can now\n     return artist, title, album, etc  (thanks spunkØdasspunk*com)\n   Consolidated all comments processing functions (processing the\n     ['comments'] and ['tags'] keys) into HandleAllTags() which now\n     also checks to ensure that APE tags are really better than ID3v2\n     before using them in ['comments']\n   Known issue with Meracl ID3 Tag Writer v1.3.4 truncating last byte\n     of MP3 file when appending new ID3v1 tag now specifically noted\n     (rather than generic Probably Truncated File message)\n   getid3.demo.mysql.php now stores last-modified time for each file\n   getid3.demo.mysql.php is now case-sensitive for filenames\n   getid3.demo.mysql.php can generate M3U playlists of any of the\n     groups of files it can select (duplicate filenames, tag types,\n     etc.)\n   getid3.demo.mysql.php can now find mismatched tag contents and\n     filenames\n   getid3.demo.check.php now shows total number of errors & warnings\n   GetFileFormatArray() now matches actual patterns for MP3 files\n     based on the first two bytes of the file, rather than just the\n     first one\n   Simplified DeleteAPEtag() and made it work properly with Lyrics3\n\n\n1.6.3: [May-17-2003] James Heinrich\n   » Added support for Bonk  (thanks ahØartemis*dk)\n     New file: getid3.bonk.php\n   » Added support for AVR  (thanks ahØartemis*dk)\n     New file: getid3.avr.php\n   ¤ Contents of getid3.id3.php moved to getid3.id3v1.php\n     Removed file: getid3.id3.php\n   ¤ Contents of getid3.frames.php moved to getid3.id3v2.php\n     Removed file: getid3.frames.php\n   ¤ Returned data structure documentation improved and updated and\n     now stored in getid3.structure.txt rather than getid3.readme.txt\n     New file: getid3.structure.txt\n   ¤ Now including the GNU General Public License in the distribution\n     as getid3.license.txt\n     New file: getid3.license.txt\n   ¤ Added new, optional, parameter to WriteAPEtag() (and also\n     GenerateAPEtag()) which must be set to TRUE if the values you\n     are passing are already UTF8-encoded, otherwise all data is\n     encoded to UTF8 by default. For all ASCII/ANSI data this value\n     should be left at the defaul value of FALSE.\n   ¤ Added third, optional, parameter to getID3v2Filepointer() -\n     $StartingOffset (default == 0) which can parse an ID3v2 tag\n     in a file at a position other than the start-of-file.\n   ¤ ['video']['pixel_aspect_ratio'] now returned when known\n   ¤ AVI files with WMA audio now return ['audio']['dataformat']\n     of 'wma' rather than 'wav'\n   ¤ ASF-WMA files now return the artist value from WM/AlbumArtist\n     in ['comments']['artist']  (thanks msibbaldØsaebauld*com)\n   ¤ ASF-WMA files now return the 'author' value from\n     ['asf']['content_description'] in ['comments']['artist']\n     instead of ['comments']['author']\n   ¤ ASF-WMA files now return the 'description' value from\n     ['asf']['content_description'] in ['comments']['comment']\n     instead of ['comments']['description']\n   * Bugfix: APE tag writing with multiple values for a tag (more\n     than one ARTIST for example) was not being correctly written\n     (thanks ahØartemis*dk)\n   * Bugfix: CreateDeepArray() was returning an empty-string key as\n     the top-level returned value - ['iso']['files'] now directly\n     contains the file listing without an empty array in between.\n   * Bugfix: ID3v2 genreid was not being returned in some cases.\n   * Bugfix: APEv1 tags would generate error messages\n   * Bugfix: APE tags would sometimes show phantom second entry for\n     each item (title, artist, etc) with no data\n   * Bugfix: APE tag writing was not UTF8-encoding the data -\n     non-ASCII characters (above chr(127)) were being incorrectly\n     stored  (thanks ahØartemis*dk)\n   * Bugfix: getid3.demo.scandir.php had undefined function error\n   * Bugfix: getid3.demo.scandir.php would not display list of files\n     with no tags\n   Added link to getid3.demo.check.php from list of specific-tags\n     files in getid3.demo.scandir.php\n\n\n1.6.2: [May-04-2003] James Heinrich\n   » New official mirror site for getID3() - https://www.getid3.org\n   » Added basic support for SWF (Flash)  (thanks n8n8Øyahoo*com)\n     New file: getid3.swf.php\n   » Added experimental support for parsing the audio portion of\n     MPEG-video files. I don't have any actual documentation for\n     this, so this part is experimental and not guaranteed accurate,\n     but it seems to be working OK as far as I have been able to test\n     it. Bug reports (or even better - documentation!) are welcome at\n     info@getid3.org\n   » Added new simple directory-scanning sample file\n     New file: getid3.demo.simple.php\n   » getid3.demo.write.php now writes APE tags as well.\n   ¤ Renamed getid3.write.php to getid3.demo.write.php\n   ¤ Renamed audioinfo.class.php to getid3.demo.audioinfo.class.php\n   ¤ getid3.php now automatically includes the getid3.functions.php\n     function library file, no need to include it seperately.\n   ¤ getLyrics3Filepointer() has been changed to be consistant with\n     all the other similar function structures - the parameters have\n     changed. The old function has been renamed to getLyrics3Data()\n   ¤ Added DeleteAPEtag() function to getid3.ape.php\n   ¤ HandleID3v1Tag() now only handles ID3v1. Lyrics3 processing is\n     now done by HandleLyrics3Tag()\n   ¤ If BitrateHistogram is enabled in getOnlyMPEGaudioInfo() it now\n     also returns ['mpeg']['audio']['version_distribution'] showing\n     the number of frames of each MPEG version (1, 2 or 2.5) - all\n     frames *should* be of the same MPEG version\n   ¤ getID3v1Filepointer() always returns TRUE now, even if it didn't\n     find a valid ID3v1 tag\n   ¤ getOnlyMPEGaudioInfo() now looks for MPEG sync in the first 128k\n     bytes rather than the first 64k bytes\n   ¤ Added dummy function GetAllMP3info() to generate warning not to\n     use that deprecated function.\n   ¤ ['video']['codec'] is now 'MPEG' for all MPEG video files (this\n     will change to 'MPEG-1' or 'MPEG-2' as soon as I figure out how\n     to determine that)  (thanks jigalØspill*nl)\n   ¤ ['mpeg']['audio']['LAME']['mp3_gain'] renamed to\n     ['mpeg']['audio']['LAME']['mp3_gain_db'] (gain in dB)\n   ¤ Added ['mpeg']['audio']['LAME']['mp3_gain_factor'] (gain as a\n     multiplication factor)\n   ¤ Added support for Preset and Surround Info bytes from LAME VBR\n     tag (http://gabriel.mp3-tech.org/mp3infotag.html)\n   * Bugfix: APE tag writing would put the string 'Array' for all\n     values rather than the actual data  (thanks ahØartemis*dk)\n   * Bugfix: Warning now generated for VBR MPEG-video files because\n     getID3() cannot determine average bitrate. If you know of\n     documentation that would tell me how to do this, please email\n     info@getid3.org\n   * Bugfix: Replay Gain values from Vorbis comments are now\n     returned in ['replay_gain'] (and not in ['comments'])\n     (thanks ahØartemis*dk)\n   * Bugfix: Replay Gain values from APE comments are now correctly\n     returned in ['replay_gain']  (thanks ahØartemis*dk)\n   * Bugfix: getid3.demo.check.php is now case-insensitive when\n     assuming a format for a corrupted file if standard detection\n     does not identify the file type.\n   * Bugfix: RIFF comments were overwriting/suppressing ID3 comments\n     for RIFF-MP3 files  (thanks wmØwofuer*com)\n   * Bugfix: RIFF-MP3 files with 'RMP3' chunks instead of 'WAVE' were\n     not being correctly identified.\n   * Bugfix: ID3v2 padding shorter than the length of an ID3v2 frame\n     header was not correctly detected\n   * Bugfix: getid3.demo.check.php now does in-depth scanning for MP2\n     and MP1 files the same as for MP3 files based on file extension\n     if a MPEG-audio structure isn't found immediately at the start\n     of the file\n   * Bugfix: removed condition where RIFF-WAV was being scanned for\n     MPEG-audio signature when it shouldn't be present (non-MP3 WAV)\n   * Bugfix: ASF files were not always showing correct audio datatype\n   * Bugfix: array_merge_clobber() and array_merge_noclobber() were\n     not being conditionally defined in getid3.functions.php\n     (thanks rich.martinØreden-anders*com)\n   * Bugfix: stream_numbers was not being correctly returned in\n     bitrate_mutual_exclusion_object chunks of ASF files\n   * Bugfix: Added support for 24kHz and 12kHz audio in ASF files\n   * Bugfix: Removed possible undefined offset error in MP3s where\n     cannot find synch before end of file\n   * Bugfix: Removed potential out-of-memory crash situation when\n     parsing Real files with chunks larger than the available memory\n     (thanks jigalØspill*nl)\n   * Bugfix: ID3v1 was incorrectly taking precedence over ID3v2 in\n     the ['comments'] array (thanks lionelflØwanadoo*fr)\n   * Bugfix: No longer calculates overall bitrate and playtime for\n     VBR MPEG video files based on the audio bitrate.\n   * Bugfix: AssumeFormat was not working properly\n   Added summary footer line to getid3.demo.check.php\n   Added '.mpeg' to the list of assume-format-from-filenames list in\n     getid3.demo.check.php\n   MPEG-video files now more reliably detected\n   A number of additional features have been added to\n     getid3.demo.scandir.php\n   Added many RIFF-AVI audio types and fourcc video types to the\n     lookup functions in getid3.riff.php\n   Now identifes files with Lyrics3 v1 tags that are of incorrect\n     length (v1 Lyrics3 is supposed to be 5100 bytes long, but\n     [unknown program] writes variable-length tags (which is illegal\n     for Lyrics3 v1)). getID3() now correctly parses these tags and\n     issues a warning.\n   Split GetFileFormat() to GetFileFormat() and GetFileFormatArray()\n   HTML colors in getid3.demo.check.php are now defined as constant\n     variables at the top of the file (if you want to change them)\n   Added support for OptimFROG v4.50x (non-alpha) (new header fields)\n     (thanks floringhidoØyahoo*com)\n   Added support for Lossless Audio v0.4 (thanks mikeØbevin*de)\n\n\n1.6.1: [March-03-2003] James Heinrich\n   » Added support for writing APE v2.\n     WriteAPEtag() in getid3.ape.php\n     NOTE: APE v1 writing support will *not* be added to future\n     versions of getID3()\n     (thanks ahØartemis*dk and adamØphysco*com for the idea)\n   » Added support for AIFF (Audio Interchange File Format) including\n     AIFF, AIFC and 8SVX  (thanks ahØartemis*dk for the idea)\n     Removed file: getid3.aiff.php\n   » Added support for OptimFROG (v4.50a and v4.2x)\n     (thanks ahØartemis*dk for the idea)\n     New file: getid3.optimfrog.php\n   » Added support for WavPack  (thanks ahØartemis*dk for the idea)\n   » Added support for LPAC  (thanks ahØartemis*dk for the idea)\n   » Added support for NeXT/Sun .au format\n     New file: getid3.au.php\n   » Added support for Creative SoundBlaster VOC format\n     New file: getid3.voc.php\n   » Added support for the BWF (Broadcast Wave File) RIFF chunks\n     \"bext\" and \"MEXT\"  (thanks Ryan and njhØsurgeradio*co*uk)\n   » Added support for the CART (Broadcast Wave File) RIFF chunks\n     (thanks Ryan)\n   » Added getid3.demo.scandir.php - a sample recursive scanning demo\n     that scans every file in a given directory, and all sub-\n     directories, and stores the resulting data in MySQL database,\n     and then displays a list of duplicate files based on md5_data\n   ¤ ['md5_data_source'] now contains the MD5 value for the original\n     uncompressed data for formats that store that information\n     (currently only FLAC v0.5+). ['md5_data'] (if chosen to be\n     calculated) will contain the calculated MD5 value for the\n     compressed file. To check if 2 files are identical in every way,\n     including all comments: compare ['md5_file']. To check if two\n     files were compressed from the same source file: compare\n     ['md5_data_source']. To check if the compressed audio/video data\n     of two files is identical, even if comments or even the\n     container file format is different (MP3 in RIFF container,\n     FLAC in Ogg container, etc): compare ['md5_data'].\n   ¤ ['md5_data'] for 8-bit WAV files is now calculated based on a\n     converted version of the data from unsigned to signed (MSB\n     inverted) to match the MD5 value calculated by FLAC\n   ¤ New optional parameter added to GetAllFileInfo() -\n     $MD5dataIfMD5SourceKnown (default: false). If false the md5_data\n     value will NOT be calculated for files (such as FLAC) that have\n     ['md5_data_source'] set, even if $MD5data == true.\n     (thanks ahØartemis*dk)\n   ¤ getid3.check.php renamed to getid3.demo.check.php\n   ¤ Added GetTagOnly() function to getid3.php - similar to\n     GetAllFileInfo() except only takes a filename as a parameter and\n     only returns ID3v2, APE, Lyrics3 and ID3v1 tag information - no\n     attempt is made to parse the data contents of the file at all.\n     (thanks Phil for the idea)\n   ¤ Added ['audio']['lossless'] and ['video']['lossless'] for all\n     formats (when known). Both are boolean values - true means the\n     data is lossless-compressed, false means the data is lossy-\n     compressed.\n   ¤ Added ['audio']['compression_ratio'] and/or\n     ['video']['compression_ratio'] for all formats. Returns a number\n     (usually) less than 1, where 1 represents no compression and 0.5\n     represents a compressed file half the size of the original file\n   ¤ Added ['video']['bits_per_sample'] to all video formats (when\n     known)\n   ¤ Added ['video']['frame_rate'] to all video formats (when known)\n   ¤ ['fileformat'] set to 'mp1' or 'mp2' instead of 'mp3' when\n     ['audio']['dataformat'] is one of those  (thanks ahØartemis*dk)\n   ¤ Added 4th parameter to md5_data(), $invertsign, which will invert\n     the MSB of each byte before MD5'ing. This is needed for 8-bit\n     WAV files because FLAC calculates the stored MD5 value on\n     signed data rather than the original byte values. ['md5_data']\n     of an 8-bit WAV will now match the ['md5_data_source'] value\n     (thanks lichvarmØphoenix*inf*upol*cz)\n   ¤ ['ape']['items']['data'] and ['ape']['items']['data_ascii'] now\n     contains an array of values, if the tag contains UTF-8 text (as\n     opposed to binary data)\n   ¤ ['mpeg']['audio']['bitratemode'] renamed to\n     ['mpeg']['audio']['bitrate_mode']\n   * Bugfix: Removed potential bug that could replace all MP3 file\n     contents with only the new ID3v2 tag in getid3.putid3.php\n   * Bugfix: md5_data values calculated for RIFF (WAV, AVI) files\n     were incorrect  (thanks ahØartemis*dk)\n   * Bugfix: MP3 data in an MP4 wrapper fileformat could not identify\n     bitrate  (thanks ahØartemis*dk)\n   * Bugfix: ['audio'] and/or ['video'] keys would sometimes get\n     removed even if not empty\n   * Bugfix: Prevented creation of null entries in\n     ['RIFF']['WAVE']['INFO'] if a comment entry was not present\n   * Bugfix: Potential infinite-loop condition in getid3.ogg.php\n     (thanks afshin.behniaØsbcglobal*net)\n   * Bugfix: Ogg files with illegal ID3v1 (and/or APE or Lyrics3)\n     tags were not finding the last Ogg page\n     (thanks afshin.behniaØsbcglobal*net)\n   * Bugfix: replay-gain values not properly set from LAME tag\n   * Bugfix: RIFF-MP3 had incorrect md5_data\n   * Bugfix: the LAME DLL CBR problem of not re-writing the LAME\n     frame at the beginning of the data is now detected for MP3s\n     with ID3v2 tags as well\n   * Bugfix: APE tags with multiple values (ie multiple entries in\n     the \"artist\" tag) are now shown properly in ['ape']['items']\n   * Bugfix: fixed condition where APE tag with no ID3v1 tag could be\n     mistaken for APE tag with ID3v1 (and incorrectly parsed)\n   * Bugfix: added warning if ID3v2 frame has zero-length data\n     (thanks cmassetØclubinternet*fr)\n   * Bugfix: getid3.frames.php looking for non-existant key in USER\n     frames\n   Improved detection of RIFF-MP3 data. [unknown program] encodes\n     RIFF-WAV data with a chunk name of 'RMP3' instead of the\n     standard 'RIFF'\n   Encoder now returned in both ['comments'] and ['audio']['encoder']\n     for RIFF-WAV files with an INFO.ISFT chunk\n   Generate a warning for FLAC files encoded with v0.3 or v0.4\n     because audio_signature is not calculated during encoding\n     (thanks ahØartemis*dk)\n   Modified getid3.check.php to display md5_data_source as well as\n     md5_file and md5_data if display-MD5 mode is selected\n   Modified getid3.check.php to assume-format based on file extension\n     in browse mode if fileformat is found to be 'id3' (formerly only\n     if the fileformat was null)\n   Changed scaling of BitrateColor() from representing 1-256kbps to\n     representing 1-768kbps for better display of high-bitrate files,\n     specifically lossless-compressed CD-audio (FLAC, LA, etc)\n\n\n1.6.0: [January-30-2003] James Heinrich\n   » Added support for OggFLAC (FLAC data stored in an Ogg container)\n     (thanks ahØartemis*dk for the idea)\n   » Added support for Speex (the data stored in an Ogg container)\n   » Comments are now available in the root 2-dimensional array\n     ['comments'] - each entry in this array will contain one or more\n     strings. For example, if there are two artists then\n     ['comments']['artist'][0] will contain the first one and\n     ['comments']['artist'][1] the other. All keys are forced\n     lowercase. Comments will be stored in the ['comments'] array in\n     this order of precedence:\n     1) Native format tags (ASF, VQF, NSV, RIFF, Quicktime, Vorbis)\n     2) APE tags\n     3) ID3v2\n     4) Lyrics3\n     5) ID3v1\n     Lower-priority tags will not overwrite or append existing values\n     of higher-priority tags (for example, 'artist' in ID3v1 will be\n     ignored if already specified in APE), but missing values will be\n     filled in (for example, if 'album' is specified in ID3v2 but not\n     in APE, it will be included in the ['comments'] array).\n     Note: Root keys (['title'], ['artist'], etc) are NOT available\n     in this or future versions of getID3().\n     (thanks ahØartemis*dk)\n   » MD5 hashes are now available for all formats for both the entire\n     file (['md5_file']) and the portion of the file containing only\n     the audio/video data, stripped of all prepended/appended tags\n     like ID3v2, ID3v1, APE, etc - ['md5_data']\n     (thanks ahØartemis*dk for alternate md5_file() function that\n     runs on UNIX system running PHP < 4.2.0)\n     NOTE: Ogg files require the use of vorbiscomment to obtain the\n     md5_data value. vorbiscomment must be downloaded from\n     http://www.vorbis.com/download.psp and placed in the getID3()\n     directory. All Ogg formats (Vorbis, OggFLAC, Speex) are affected\n     by this problem, but only OggVorbis files can be processed with\n     vorbiscomment. OggFLAC and Speex files will be processed by\n     getID3(), but this may result in an incorrect value for md5_data\n     in the event that VorbisComments are larger than 1 page (4-8kB).\n     NOTE: md5_data for Ogg will not work if PHP is running in Safe\n     Mode\n   » There is now a wrapper class available, written by Allan Hansen,\n     which should simplify extracting most common basic information\n     (such as format, bitrate, comments).\n     New file: audioinfo.class.php\n   » OggWrite() in getid3.ogginfo.php has been replaced with a new\n     version that uses vorbiscomment to write the comments, because\n     of a reported bug that can corrupt OggVorbis files such they\n     cannot be played.\n     NOTE: Ogg comment writing now requires the use of vorbiscomment\n     which must be downloaded from http://www.vorbis.com/download.psp\n     and placed in the getID3() directory.\n     NOTE: Ogg comment writing will not work if PHP is running in\n     Safe Mode\n   ¤ New root key ['tags'] is now always returned for all formats.\n     It is an array that may contain any of:\n     * Native format tags: 'vqf', 'riff', 'vorbiscomment', 'asf',\n       'nsv', 'real', 'midi', 'zip', 'quicktime'\n     * Appended data tags:  'ape', 'lyrics3', 'id3v2', 'id3v1'\n   ¤ New root key ['audio'] is an array containing any or all of:\n       codec, channels, channelmode, bitrate, bits_per_sample,\n       dataformat, bitrate_mode, sample_rate, encoder\n       Note: This replaces several root keys, including:\n         bitrate_audio, bits_per_sample, frequency, channels\n   ¤ New root key ['video'] is an array containing any or all of:\n       bitrate_mode, bitrate, codec, resolution_x,  resolution_y,\n       resolution_y, frame_rate, encoder\n       Note: This replaces several root keys, including:\n         bitrate_video, resolution_x, resolution_y, frame_rate\n   ¤ ['id3']['id3v1'] has moved to ['id3v1']\n   ¤ ['id3']['id3v2'] has moved to ['id3v2']\n   ¤ ['audiodataoffset'] and ['audiodataend'] have been renamed to\n     ['avdataoffset'] and ['avdataend'] respectively\n   ¤ GetAllMP3info() has been changed to GetAllFileInfo() with a\n     different parameter list ($allowedFormats is no longer a\n     parameter).  Check your code where you're calling\n     GetAllMP3Info() - you will need to change both the function\n     name and the parameter list if you pass more than 2 parameters\n   ¤ All formats now return ['audio']['dataformat'] and/or\n     ['video']['dataformat'] where appropriate - this goes along with\n     ['fileformat'] - ['fileformat'] will return the actual structure\n     of the file, whereas ['dataformat'] will return the format of\n     the data inside that structure. For example, an Ogg file can\n     contain Vobis data (normal), or it can contain FLAC data in the\n     Ogg container format. In that case, ['fileformat'] would be\n     'ogg', but ['dataformat'] would be 'flac'.\n     Note: this means that WAV and AVI files now return a\n     ['fileformat'] of 'riff' rather than 'wav' or 'avi'.\n   ¤ ['filesize'] is no longer returned for files larger than 2GB\n     because PHP does not support large file access. Attempting to\n     parse a file larger than 2GB will result in a message stored in\n     ['error'] and ['filesize'] not set.\n   ¤ APEtag, ID3v1, and ID3v2 are now supported on ALL multimedia\n     files - even if illegal by format. Ogg will return warning if\n     ID3/APE tags are present.  (thanks ahØartemis*dk)\n   ¤ All files: non-critical errors are now returned in the root key\n     ['warning'] rather than ['error'] (only critical errors that\n     prevent getID3() from correctly parsing the file are returned in\n     ['error']  (thanks ahØartemis*dk)\n   ¤ Renamed all references to $MP3fileInfo to $ThisFileInfo\n   ¤ Joliet now supported for ISO-9660.\n     ['iso']['supplementary_volume_descriptor'] is now returned, if\n     available, and ['iso']['files'] will contain ASCII equivalents\n     of the Unicode directory structure & filenames stored.\n   ¤ Moved Monkey's Audio code from getid3.ape.php to seperate file.\n     New file: getid3.monkey.php\n   ¤ Added new keys for ISO-9660: ['name_ascii'] for directories,\n     ['file_identifier_ascii'] for files\n   ¤ Added root key ['track'] for CD-audio files\n   ¤ Ogg/Vorbis-comment files now have comments returned inside\n     ['ogg']['comments_common'] as an array of strings, rather than\n     simple strings in ['ogg']\n   ¤ Quicktime files now have comments returned inside\n     ['quicktime']['comments'] as an array of strings, rather than\n     simple strings in ['quicktime']\n   ¤ ['mime_type'] is a new root key returned for all supported\n     formats (thanks ahØartemis*dk)\n   ¤ ['fileformat'] now returns 'mp1' instead of 'mp3' for MPEG-1\n     layer-I audio files (thanks ahØartemis*dk)\n   ¤ ['mpeg']['audio']['bitratemode'] now returns lowercase\n   ¤ MPEG-4 audio files which consist of MP3 data wrapped in a\n     Quicktime fileformat will now return the usual data in\n     ['mpeg']['audio']\n   ¤ Type-1 DV AVIs are now supported\n   ¤ DV AVIs will return 1 or 2 in ['RIFF']['video'][x]['dv_type']\n   ¤ Changed ['fileformat'] from 'mpg' to 'mpeg' for MPEG video files\n   ¤ ASF comments are now stored in ['asf']['comments'] instead of\n     ['asf']\n   ¤ RealMedia chunk data is now returned inside ['real']['chunks']\n     instead of ['real']\n   ¤ ['replay_gain'] now properly populated from APE tags\n   ¤ Added support for ASF_Old_ASF_Index_Object in ASF files\n     (thanks ahØartemis*dk)\n   ¤ AAC-ADTS files now return ['aac']['bitrate_distribution']\n   ¤ ParseVorbisComments() has been replaced with\n     ParseVorbisCommentsFilepointer() (with different parameters)\n   ¤ All references to any key ['frequency'] are now ['sample_rate']\n   ¤ Moved ID3v2 comments from ['id3v2'] into common root\n     ['comments'] structure, and now returns more values than before\n   * Bugfix: ['iso']['files'] and ['zip']['files'] could potentially\n     contain duplicate entries (in a numeric-indexed array) for files\n     if the directory structure specifies files multiple times.\n     Entries are now guaranteed unique, with the last entry for the\n     file overwriting any former ones.\n   * Bugfix: RIFF parsing had numerous issues, including:\n     - large AVIs would take a very very long time to parse\n     - chunks with odd (not even) sizes would cause the parser fail\n     - video and/or audio codecs not always identified\n     The ParseRIFF() function has been completely rewritten and fixes\n     all known issues with RIFF parsing. Users are, however,\n     encouraged to double-check output of any parsed (AVI/WAV/CDDA)\n     files.\n   * Bugfix: Modified getid3.riff.php to return correct total\n     bitrates for AVIs with multiple audio streams\n   * Bugfix: GetFileFormat() was not creating array structure\n     correctly  (thanks ahØartemis*dk)\n   * Bugfix: LAME tag for MP3s can only specify up to 255kbps, so any\n     files with actual CBR bitrate of >=256 were reported incorrectly\n   * Bugfix: Lyrics3 synched lyrics were not being correctly returned\n   * Bugfix: CreateDeepArray() was broken for non-nested cases, which\n     meant ZIP and ISO ['files'] structures were broken\n   * Bugfix: Incorrect pattern matching for ZIP files meant no zip\n     files were being detected as such\n   * Bugfix: AAC-ADIF was returning an incorrect number of channels\n     (too few) in some cases  (thanks ahØartemis*dk)\n   * Bugfix: Vorbis comments were returning an incorrect value for\n     ['dataoffset'] in some cases\n   * Bugfix: MPEG video ['marker_bit'] and ['vbv_buffer_size'] were\n     incorrect\n   * Bugfix: ['playtime_string'] could potentially have a value of\n     x minutes and 60 seconds (ie 3:60 instead of 4:00)\n   Added support for FLAC cuesheets (FLAC 1.1.0+)\n     (thanks ahØartemis*dk)\n   Improved parsing speed in MP3, MP2 and AAC  (thanks ahØartemis*dk)\n   Extra error-checking added to try and identify corrupt files for\n     most audio formats  (thanks ahØartemis*dk)\n   More accurate playtime calculation for RealMedia\n     (thanks ahØartemis*dk)\n   Changed all relevant files to use ['audiodataoffset'] and\n     ['audiodataend'] rather than ['filesize'] where appropriate\n     (thanks ahØartemis*dk)\n   Added text encoding type 255 as a duplicate of UTF-16BE but with\n     Big-Endian rather than Little-Endian byte order\n   Added many RIFF-AVI audio types and fourcc video types to the\n     lookup functions in getid3.riff.php\n   Added numerous new known GUIDs to getid3.asf.php\n   Added PoweredBygetID3() function to easily get a \"powered by\"\n     string with the current getID3() version.\n   Added \"Morgan Multimedia Motion JPEG2000\" (MJ2C), \"DivX v5\" (DX50)\n     and \"XviD\" (XVID) codecs to list of known codecs in\n     getid3.riff.php\n   Changed GETID3_INCLUDEPATH path seperators to forced /\n     (from \\ for Windows)\n   Modified getid3.check.php to only change \\ directory seperators to\n     / on Windows operating systems\n   Modified getid3.check.php to handle larger-than-2GB files (which\n     now do not return a filesize)\n   Modified getid3.check.php to handle ['dataformat_audio'] and\n     ['dataformat_video']\n   Modified getid3.check.php to show a list of present tags in one\n     column rather than one column for each of ID3v1, ID3v2, etc\n   Modified getid3.check.php to show MD5 values. Initially disabled\n     but can be enabled for a directory with a click. md5_file is\n     always calculated when displaying detailed info about a single\n     file; md5_data is calculated if the file is < 50MB\n   Modified getid3.check.php to show errors and warnings. Details are\n     visible with a mouseover or a click.\n   Changed getid3.check.php to use SafeStripSlashes instead of a\n     manual conditional directory name replacement for special\n     characters\n   Added sample recursive scanning sample code to getid3.readme.txt\n     (thanks lipisinØmail*ru for the idea)\n\n\n1.5.7: [January-10-2003] James Heinrich\n   » Added support for ISO 9660 (CD-ROM image) format. Most-useful\n     data is directory structure returned under ['iso']['files']\n     Note: Only ISO-9660 supported, not (yet) Joliet extension\n     (thanks nebula_djØsofthome*net for the idea)\n     New file: getid3.iso.php\n   ¤ ZIP files are now parsed by getID3() itself without relying on\n     built-in PHP functions and/or ZZipLib support.\n     (thanks Vince for the idea)\n   ¤ ZIP files now return a simple directory listing with filename\n     and filesize info only under ['zip']['files'].\n     Note: empty subdirectories will note appear in here, only files\n     and non-empty subdirectories. Information for all entries,\n     including empty subdirectories, is available under\n     ['zip']['central_directory'] (or under ['zip']['entries'] if the\n     Central Directory cannot be located (usually due to a trucated\n     file).\n   ¤ RIFF-WAV files with MP3 data (or MP3s with RIFF headers, if you\n     want to think of it that way) now have the MPEG audio portion\n     scanned and the usual data returned in ['mpeg']['audio'] if the\n     RIFF audio codec has wFormatTag of \"85\" (identified by getID3()\n     as \"MPEG Layer 3\")\n     (thanks ahØartemis*dk for the idea)\n   ¤ EXIF data (if present) is returned for JPEG files under\n     ['jpg']['exif']  (thanks nebula_djØsofthome*net)\n   ¤ ['filepath'] now returned for all files with the directory part\n     of the full filename.\n   ¤ ['filenamepath'] is now returned for all files (equivalent to\n     ['filepath'].'/'.['filename'])\n   * Bugfix: ['id3']['id3v2'][<framename>]['dataoffset'] was wrong\n   * Bugfix: MP3s tagged with iTunes have an invalid comment field\n     frame name ('COM ' - should be 'COMM') but the data is valid\n     otherwise; the frame is now renamed to 'COMM' and parsed\n     normally (with the error noted in ['error'])\n     (thanks kheller2Ømac*com for the sample file)\n   * Bugfix: Some ASF/WMA audio files were not being identified as\n     any format  (thanks ahØartemis*dk)\n   * Bugfix: Warning now generated and ASCII format assumed for\n     invalid text encoding values in ID3v2\n   * Bugfix: Changed ZIP detection pattern from 'PK' to 'PK\\x04\\x03'\n   * Bugfix: Ogg/FLAC files with large Vorbis comments were dying in\n     an infinite loop with lots of error messages due to missing $fd\n     parameter on ParseVorbisComments()  (thanks ahØartemis*dk)\n   * Bugfix: ['data'] and ['image_mime'] were being returned for all\n     Ogg comments even if they were not images for versions of PHP\n     that have image_type_to_mime_type() built in (ie PHP 4.3.0+)\n\n\n1.5.6: [December-31-2002] James Heinrich\n   » Added support for NSV (Nullsoft Streaming Video)\n     (www.nullsoft.com/nsv/)\n     (thanks demonØsoundplanet*com for the idea)\n     New file: getid3.nsv.php\n   » Added support for CD-audio track files (track01.cda etc)\n   ¤ Added standard ['frame_rate'] root value when known (AVI, NSV,\n     MPEG-video)\n   ¤ ASF files now report ['fileformat'] of:\n     'wmv' when Windows Media Video codec v7/v8/v9 is used;\n     'wma' when any 'Windows Media Audio' named audio codec is used\n           and no video stream is present;\n     'asf' in all other cases (audio-only, video-only, or both)\n   ¤ Removed support for ZIP functions (will be rewritten to not\n     require ZZIPlib support in future versions)\n   ¤ Added function SafeStripSlashes() as a drop-in replacement for\n     stripslashes(), but that only strips slashes if magic_quotes_gpc\n     is set\n   ¤ Removed support for remote file scanning (HTTP / FTP)\n   ¤ Added ['aac']['frames'] (number of AAC frames in file)\n   ¤ Added ['mpeg']['audio']['frame_count'] when a bitrate histogram\n     is created\n   ¤ Average bitrate for VBR MP3/MP2 is calculated from actual counts\n     of frames of various bitrates (rather than relying on the header\n     values or filesize) when a bitrate histogram is created\n   ¤ RecursiveFrameScanning() split out into seperate function\n     (getid3.mp3.php)\n   ¤ Removed old function getMP3header() from getid3.mp3.php\n   ¤ Changed default MPEG_VALID_CHECK_FRAMES (number of mp3 frames\n     scanned to ensure a valid audio sequence has been located) from\n     10 to 25. This means scanning will be slightly slower, but more\n     reliable/accurate\n   * Bugfix: ID3v2.2 - valid frame names not correctly detected\n     (thanks maeckerØweb*de for the sample file)\n   * Bugfix: ID3v2.2 - valid padding not correctly detected\n     (thanks maeckerØweb*de for the sample file)\n   * Bugfix: MIDI files with flat key signatures were not being\n     correctly reported (thanks alexleeisØshaw*ca for sample file)\n   * Bugfix: now returns message in ['error'] if file does not exist\n   * Bugfix: ['RIFF']['video'][x]['codec'] wasn't always being\n     correctly populated\n   * Bugfix: ['bitrate'] was incorrect for multi-stream RealMedia\n   * Bugfix: ['playtime_seconds'] was sometimes null or incorrect\n     for multi-stream RealMedia\n   * Bugfix: ChannelTypeID was incorrect in RVA2 ID3v2.4 frames\n   * Bugfix: Fixed potential divide-by-zero error for corrupt FLAC\n     files  (thanks ahØartemis*dk)\n   * Bugfix: AAC-ADTS was not returning ['bitrate_mode'] unless\n     $ReturnExtendedInfo was TRUE  (thanks ahØartemis*dk)\n   * Bugfix: LAME-encoded CBR MP3s now properly identified as CBR\n     with correct bitrate  (thanks ahØartemis*dk)\n   * Bugfix: VBR MP2 (or headerless MP3) is now identified as VBR\n     rather than CBR. Note: to obtain VBR bitrate for headerless\n     files, the entire file is scanned and a histogram distribution\n     of bitrates is created, and the average bitrate calculated from\n     that.  (thanks ahØartemis*dk for sample file)\n   Added support for DSIZ chunks in VQF, and checks to make sure size\n     of audio data matches DSIZ value, if present\n     (thanks ahØartemis*dk for sample file)\n   Rewrote GetAllMP3info() - removed some unneccesary code, changed\n     format-detection routine from ParseAsThisFormat() to\n     GetFileFormat() to allow for more flexible format parsing\n     (needed for ISO CD-ROM images, helpful for Quicktime and others)\n   Changed references in all files from string-cast indexes: [\"$i\"]\n     to non-cast indexes: [$i] where appropriate\n   Put a sans-serif 9pt style on all text in getid3.check.php\n   getAACADTSheaderFilepointer() now return TRUE if synch is lost\n     after the first frame has been successfully parsed (previously\n     it would return FALSE if synch was lost at any time, meaning the\n     file is most likely MP3, which was incorrect)\n     (thanks ahØartemis*dk for sample file)\n   Speed improvement code changes to getid3.mp3.php (up to 24% faster\n     in some cases)  (thanks ahØartemis*dk for the code)\n   Changed all include_once() to require_once()\n\n\n1.5.5: [November-25-2002] James Heinrich\n   » Added support for La (Lossless Audio - www.lossless-audio.com)\n     (thanks ahØartemis*dk for the idea)\n     New file: getid3.la.php\n   ¤ Moved lookup functions from getid3.lookup.php to the files where\n     they are used.\n     New file: getid3.id3.php\n     New file: getid3.rgad.php\n     Removed file: getid3.lookup.php\n   ¤ getID3v1Filepointer() returns FALSE if ID3v1 tag not found\n   ¤ Added new paramter \"ReturnExtendedInfo\" to the function\n     getAACADTSheaderFilepointer() in getid3.aac.php which now\n     defaults to FALSE - if TRUE then the data for every frame is\n     returned (containing aac_frame_length, adts_buffer_fullness and\n     num_raw_data_blocks, which aren't usually very useful). Speed\n     improvement with FALSE is about 35%.\n   ¤ Now returns fopen() errors in ['error'], for example if a remote\n     file is not accessible.\n   ¤ Changed default number of MP3 audio frames to scan to determine\n     if a valid stream has been found from 5 to 10, now also defined\n     as a constant at the top of getid3.mp3.php  This will result in\n     slightly slower MP3 parsing, but greater reliability in\n     detecting false/invalid/corrupted VBR headers.\n   ¤ fopen() errors now displayed in getid3.putid3.php\n     (thanks miguel.dieckmannØhamburg*de)\n   ¤ Added 4th parameter to decodeMPEGaudioHeader() $ScanAsCBR which\n     will force an MP3 audio frame sequence to be force-scanned in\n     CBR mode. You should never need to call this directly, it's only\n     used internally to scan for MP3 files that have an illegal VBR\n     header with CBR data. (thanks fletchØpobox*com)\n   * Bugfix: ASF_Marker_Object in getid3.asf.php was always returning\n     an error in non-existant \"reserved_1\" and failing\n   * Bugfix: VBR bitrate calculations in getid3.mp3.php only occur if\n     ['mpeg']['audio']['VBR_frames'] is defined.\n     (thanks fletchØpobox*com)\n   * Bugfix: getid3.putid3.php no longer deletes original MP3 if\n     ID3v2 tag writing fails (thanks miguel*dieckmannØhamburg*de)\n   * Bugfix: incorrect order of if-statement error messages in\n     getid3.putid3.php (thanks miguel*dieckmannØhamburg*de)\n   getid3.asf.php now notes the error and continues parsing rather\n     than failing when it encounters an error parsing a chunk\n   Now actually scan 1000 frames for AAC ADTS as reported in the\n     v1.5.4 changelog, rather than 100. (thanks ahØartemis*dk)\n   Improved scanning speed in getAACADTSheaderFilepointer() by ~30%\n     (thanks ahØartemis*dk for the fix)\n   Added FileSizeNiceDisplay() function to getid3.functions.php for\n     formatting filesize output in kB, MB, GB, etc.\n\n\n1.5.4: [October-07-2002] James Heinrich\n   » Added support for Quicktime.\n     New file: getid3.quicktime.php\n   » Added support for AAC files, both ADTS and ADIF header formats.\n     ADIF format is a pain because it's very similar to standard MP3\n     header format, and it's hard to distinguish between the two. I\n     have tried to make the detection accurate, but I have a limited\n     number of AAC test files to play with so if you have an AAC file\n     that gets detected as MP3/MP2 (or vice-versa), please send me\n     the details via email at infoØgetid3Øorg\n     ADTS format is very slow to parse because to get the bitrate of\n     VBR files the whole file has to be stepped through frame by\n     frame (getID3() scans up to the first 1000 frames and assumes\n     that to be close enough).\n     Note: I would suggest commenting out support for AAC (see top of\n     GetAllMP3info() function in getid3.php) unless you need it.\n     (thanks jfaulØgmx*de for the idea and sample Delphi source code)\n     New file: getid3.aac.php\n   » Added bitrate distribution analysis option for MP3 VBR files. A\n     new boolean parameter for getOnlyMPEGaudioInfo() enabled this\n     feature which steps through the MP3 file frame by frame and\n     counts how many frames of each bitrate exist. This information\n     is returned in ['mpeg']['audio']['bitrate_distribution']\n     Caution: this feature is very inefficient for large files and\n     takes a very long time and does lots of disk I/O. Use with care.\n   ¤ Changed layout of allowedFormats in GetAllMP3info() function in\n     getid3.php to allow easy removal of support for any of the\n     supported format. As stated above, I recommend commenting out\n     AAC unless needed.\n   ¤ Added ['flac']['compressed_audio_bytes'],\n     ['flac']['uncompressed_audio_bytes'], and\n     ['flac']['compression_ratio']\n   ¤ Replaced FXPT2DOT30toFloat() function with FixedPoint2_30()\n   * Bugfix: getid3.mpc.php was slightly miscalculating the number of\n     samples, therefore also bitrate and playtime\n     (thanks ahØartemis*dk for the fix)\n   * Bugfix: MonkeyCompressionLevelNameLookup() didn't know about\n     'insane' compression (thanks ahØartemis*dk for the fix)\n   * Bugfix: MonkeySamplesPerFrame() was incorrect for MAC v3.95+\n     (thanks ahØartemis*dk for the fix)\n   * Bugfix: getid3.check.php wasn't processing the assumeFormat\n     directive when (register_globals == off)\n   * Bugfix: detecting of synch pattern for MP3 files with invalid\n     data at the beginning wasn't always correct, also meant possible\n     incorrect bitrate/duration/etc info for such corrupt files.\n   getid3.functions.php now includes a replacement utf8_decode()\n     function for those PHP installations that are not configured\n     with the --with-xml option. (thanks stephaneØtekartists*com)\n\n\n1.5.3: [September-30-2002] James Heinrich\n   » Added support for VQF. (thanks mtØmansonthomas*com for the idea)\n     New file: getid3.vqf.php\n   » Added support for FLAC. Comments, if present, are returned under\n     ['ogg'] because they follow the Ogg Vorbis structure standard.\n     New file: getid3.flac.php\n   ¤ OS/2-format bitmaps are now correctly interpreted. The format of\n     the bitmap is now returned in ['bmp']['type_os'] and\n     ['bmp']['type_version']. OS/2 bitmaps can be v1 or v2, Windows\n     can be v1, v4 or v5\n\n\n1.5.2: [September-25-2002] James Heinrich\n   » Support for RealMedia (audio & video) added\n     Note: only tested on G2 and v5 audio and video files - if anyone\n     has older and/or newer sample files, please test it and/or send\n     me the sample files.\n     (thanks stephaneØtekartists*com for idea)\n     New file: getid3.real.php\n   » Support for BMP added. Palette and pixel data can optionally be\n     extracted as well - this is slow and generally unneccesary, but\n     the option is there if you need it. Also includes PlotBMP()\n     which will take the extracted pixel data and output it as a true\n     color PNG. This function requires GD v2.0+\n     Note: Untested on 16-bit and 32-bit BMPs because I couldn't find\n     any sample files - if you know of a program that can create such\n     files, please email infoØgetid3Øorg\n     Note: Support for RGB (uncompressed), RLE8 and RLE4 is included\n     and tested. BITFIELDS support is also included for 16- & 32-bit\n     formats, but it's untested, so if anybody has any test files\n     please send them to infoØgetid3Øorg\n     Note: Support currently only for Windows-format BMPs, and trying\n     to parse an OS/2-format bitmap leads to unpredictable/invalid\n     results.\n     New file: getid3.bmp.php\n   » PNG now fully parsed, including all information chunks\n     New file: getid3.png.php\n   ¤ Support for GIF/JPG/PNG moved to seperate files and expanded,\n     including standard ['resolution_x'] and ['resolution_y'] as well\n     as more thorough parsing of header information\n     New file: getid3.gif.php\n     New file: getid3.jpg.php\n   table_var_dump() simplified and now outputs &#123;-style character\n     entities for characters outside the normal alphanumeric range\n   CleanOggCommentName() changed to a regular expression\n     (thanks chris-getid3Øbolt*cx for rewriting the function)\n\n\n1.5.1: [September-20-2002] James Heinrich\n   » Added support for MPEGplus/Musepack SV7. ['fileformat'] is 'SV7'\n     for version 7 files (versions 4, 5 ,6 and 8 are not supported\n     yet, but will be of ['fileformat'] SV4, SV5, SV6 and SV8) when\n     they are supported (thanks Christian Fritz for the idea)\n     New file: getid3.mpc.php\n   ¤ ['bitrate_audio'], ['bitrate_video'], ['bitrate_mode'],\n     ['channels'], ['resolution_x'], and ['resolution_y'] keys added\n     for all appropriate formats\n   ¤ Ogg files with a COVERART comment now save and display the\n     attached image the same way as is done with ID3v2 APICs\n   ¤ ['ogg']['comments'][n]['data'] and\n     ['ogg']['comments'][n]['dataoffset'] is now returned for all\n     comments. ['ogg']['comments'][n]['data'] is only useful if\n     the field is supposed to contain binary data. It is a\n     base64_decode()'d version of ['value'].\n     ['ogg']['comments'][n]['dataoffset'] is the byte offset in the\n     file at which the 'COMMENTNAME=value string' starts, not the\n     start of just 'value'\n   ¤ ['ogg']['comments'][n]['image_mime'] is now returned if\n     ['ogg']['comments'][n]['data'] contains valid image data.\n   ¤ More than 3 Ogg pages may now be read in, if the comment data\n     is longer than 1 page (usually about 4kB)\n   ¤ ['fileformat'] is now 'mp2' rather than 'mp3' if it's MPEG-1,\n     Layer-II audio\n   ¤ ASF bitrates now calculated even if stream_bitrate_properties\n     object not present\n   ¤ ['asf']['stream_properties_object'] is now a numeric-key array\n     with one entry for each stream - the key being the stream number\n   ¤ ['replay_gain'] is returned for all audio formats that support\n     it (MP3-LAME, ID3v2, Ogg) (thanks Christian Fritz for the idea)\n   ¤ ['mpeg']['audio']['LAME']['RGAD']['radio_replay_gain'] is now\n     ['mpeg']['audio']['LAME']['RGAD']['radio'] (same for audiophile)\n   ¤ ASF/WMA files now use WM/Track to get track number from if\n     WM/TrackNumber is not available (thanks stephaneØtekartists*com)\n   ¤ ASF/WMV files now returns ['year'] and ['asf']['year']\n   ¤ ASV/WMV files now use ['content_description']['description'] for\n     the ['comment'] field (thanks stephaneØtekartists*com)\n   ¤ ['track'] is now always returned as an integer\n   * Bugfix: Ogg comments that are larger than one data page (usually\n     about 4kB) are now correctly parsed (thanks Christian Fritz)\n   * Bugfix: Ogg comment data is now UTF8-decoded\n   * Bugfix: Ogg comment writing now UTF8-encodes the data\n   * Bugfix: playtime for ASF files was off by <preroll> (usually\n     between 3 and 12 seconds)\n   * Bugfix: ['asf']['stream_properties_objects']['flags'] data was\n     possibly incorrect\n   * Bugfix: ASF Padding Object was overwriting\n     Stream Bitrate Properties Object data (now returned correctly in\n     ['asf']['padding_object']\n   * Bugfix: ASF Marker Object Reserved_2 field was incorrect\n   * Bugfix: ASF Bitrate Mutual Exclusion Object had incorrect stream\n     numbers\n   Warning displayed if incorrectly-formatted Ogg comment is present\n     (known to be an issue with CDex v1.40, but fixed by v1.50b7)\n     (thanks Christian Fritz)\n   Ogg comment writing now checks for valid comment names\n   Added bitrate column in getid3.check.php, and added some formatting\n     (font, colour)\n   Performance tweaks using bitwise math instead of binary string\n     operations\n\n\n1.5.0: [September-18-2002] James Heinrich\n   » Ogg comment writing support added. getid3.write.php has been\n     updated to allow for writing comment tags to both MP3 and Ogg.\n     Big thanks to Chris Bolt <chris-getid3Øbolt*cx> for writing the\n     OggWrite() function and offering it for inclusion in getID3()\n     New file: getid3.ogginfo.php\n   » Support for Monkey's Audio and APE tag added.\n     (thanks Christian Fritz for the idea)\n     New file: getid3.ape.php\n     ['fileformat'] now returns 'mac' for Monkey's Audio files, or\n     'ape' for files with an APE tag (Monkey's Audio or other format)\n   » getid3.thumbnail.php has been removed from the distribution and\n     the table_var_dump() function now outputs APICs as seperate\n     files in the same directory as the analyzed file. This should\n     make the image-displaying more reliable as well as reduce\n     complexity. The naming convention for the images is\n     filename.ext.[byte offset of APIC data].[jpg|gif|png]\n     If anybody still has any problems with corrupted images please\n     let me know at infoØgetid3Øorg\n   » Support for extended Xing/LAME tag\n     (see http://users.belgacom.net/gc247244/extra/tag.html)\n     Data is returned in ['mpeg']['audio']['LAME']\n   ¤ ['ogg']['tracknumber'] has been renamed to ['ogg']['track'] and\n     ['track'] is now returned in the root of the array\n   ¤ ['ogg']['pageheader'][n]['flag'] has been renamed to\n     ['ogg']['pageheader'][n]['flags'] and the unprocessed flag byte\n     is available in ['ogg']['pageheader'][n]['flags_raw']\n   ¤ ['frequency'] is now returned for WAVE files in the root of the\n     array (thanks danielØelectroteque*org)\n   ¤ ASF files now return codec, bitrate, resolution, etc information\n     under ['asf']['video_media'] or ['asf']['audio_media']\n   * Bugfix: RVA2 and EQU2 writing in getid3.putid3.php were\n     incorrectly writing Volume Adjustment field\n   * Bugfix: EQU2 in getid3.frames.php was reading Volume Adjustment\n     as unsigned integer instead of signed integer\n   * Bugfix: handling of remote files over HTTP & FTP was broken\n     (thanks Vince)\n   * Bugfix: incorrect handling of some ASF packets\n   ASF/Windows Media format now more fully parsed, including Index\n     Objects\n   Added several new fourCC video codecs\n\n\n1.4.3: [September-15-2002] James Heinrich\n   » Now parses ASF / WMV / WMA files\n   ¤ New file: getid3.asf.php\n   * Bugfix: RoughTranslateUnicodeToASCII() would return nothing\n     if didn't find a terminator it was expecting\n   Added FILETIMEtoUNIXtime() function (for converting 64-bit\n     Microsoft FILETIME timestamps, used in ASF files and elsewhere,\n     to UNIX Epoch timestamps)\n   Added GUIDtoBytestring() and BytestringToGUID() functions\n\n\n1.4.2: [September-12-2002] James Heinrich\n   » getID3() now requires PHP v4.1.0 or higher because it now is\n     designed to work with register_globals = off and the new auto-\n     globals ($_GET, $_SERVER, etc).\n   * Bugfix: VBR MP3 files with Fraunhofer-style VBR header were not\n     being correctly detected in most cases\n     (thanks dkushnerØoddcast*com and mikeØftl*com for sample files)\n   * Bugfix: IsValidTextEncoding() was broken\n   * Bugfix: Add stripslashes($EditorFilename) to getid3.write.php\n     (writing was broken for files with ' or \" in the filename)\n     (thanks mikeØftl*com and kthejoker)\n   * Bugfix: If there is garbage data between a valid VBR header\n     frame and a sequence of valid MPEG-audio frames the VBR data is\n     no longer discarded. (thanks to mikeØftl*com for sample\n     Fraunhofer-style VBR file produced with MusicMatch v7.2)\n   ¤ Changed variable system to work with (register_globals = off)\n   ¤ Moved relevant code into seperate PlaytimeString() function\n   ¤ Added nl2br() to table_var_dump() for cleaner output\n   ¤ Now returns the following keys from Fraunhofer-VBR files:\n     ['VBR_seek_offsets'], ['VBR_seek_offsets_stride'],\n     ['VBR_offsets_relative'] and ['VBR_offsets_absolute']\n   ¤ Added ID3v1matchesID3v2() function and implemented in\n     getid3.check.php (thanks to \"Guest\" in the forums for the idea)\n   Changed amount of data read in getid3.getimagesize.php from 10kB\n     to entire file. (thanks mikeØftl*com)\n   Wrapped function_exists() checks around function definitions in\n     getid3.functions.php\n   Fixed a lot of E_WARNING and E_NOTICE situations, especially in\n     ID3-writing code (getid3.putid3.php, etc)\n   Added checks to make sure all needed data is available for writing\n     ID3v2 tags\n\n\n1.4.1b5: [May-30-2002] James Heinrich\n   * Bugfix: Unsynchronise() was broken, now fixed\n     (thanks mikeØftl*com)\n   * Bugfix: GenerateID3v2Tag() now correctly uses non-synchsafe\n     integers for frame size descriptors in ID3v2.3 and ID3v2.2\n     (thanks mikeØftl*com)\n   ¤ Added ['artist'], ['title'], etc keys to root of returned\n     array to provide a common place to access any returned info\n     from any file type. Currently gets info from ID3v1, ID3v2,\n     Ogg, and RIFF/WAVE. Possible returned keys are:\n     title, artist, album, year, genre, comment, track\n   ¤ Modified LookupGenre() function to search for either genre based\n     on numeric ID, or now reverse lookup as well\n   ¤ Added ['artist'], ['title'], etc keys to ['RIFF'] information\n     if info tags are present\n   Added functionality to attach a picture to the ID3v2 tag in\n     getid3.write.php\n   Sorted genres into alphabetical order (special 3 at end of list)\n     in getid3.write.php\n   Changed the comment-edit field in getid3.write.php to a multi-line\n     <textarea> from a single-line <input>\n   getid3.write.php now only writes ID3v2 frames that have data\n   Added default TXXX field to getid3.write.php to put a tagger info\n     field when writing ID3v2 tags. Description is \"ID3v2-tagged by\"\n     and data is \"getID3() v[version] (www.silisoftware.com)\"\n   Changed getid3.check.php to use the new common info keys\n   Improved file-format detection in getid3.check.php - if the auto-\n     detect based on the first few bytes of the file doesn't find a\n     known format (for example if the header is corrupt), a more\n     thorough scan is done based on the file extension\n   Added 'Edit ID3' link from getid3.check.php to getid3.write.php for\n     MP3 files  (thanks maxØgutalin*com for the idea)\n   Added 'Delete file' link from getid3.check.php to getid3.write.php\n     allowing you to permanently delete a file (be careful with this!!)\n     (thanks maxØgutalin*com for the idea)\n   Added some mouse-over titles for links in getid3.check.php\n\n\n1.4.1b4: [May-15-2002] James Heinrich\n   * Bugfix: getid3.check.php wasn't parsing MP3s with invalid headers\n     or padding at the beginning of the file - added 'assumeFormat'\n     parameter and 'Parse this file as:' options to force parsing in a\n     particular format  (thanks Alcohol for the sample file)\n   * Bugfix: unset(['fileformat']) and ['error'] added in cases where\n     file cannot be parsed in the assumed or forced format\n\n\n1.4.1b3: [May-01-2002] James Heinrich\n   ¤ For Ogg files, now calculates the real average bitrate (returned\n     in ['ogg']['bitrate_average']) and so the playtime of the file is\n     calculated on actual average bitrate, not nominal bitrate, so it\n     should be accurate now  (thanks to stephaneØtekartists*com for\n     telling me it was wrong)\n   * Bugfix: ID3v2FrameIsAllowed() wasn't behaving properly if the\n     writing functions were called for more than one file, because of\n     the static array not being cleared between uses. This is an\n     updated fix because the one in 1.4.1b2 didn't work :o)\n     (thanks soulcatcherØevilsoft*org and yoyo)\n   Added rawurlencode() to the filename parameter in table_var_dump()\n     for images (wouldn't work with path/file names containing special\n     characters (#, &, \", +)  (thanks Christian Fritz)\n   getid3.check.php no longer attempts to scan all MIDI tracks in\n     directory-browse mode, since this can take a long time. Detailed\n     single-file view is still fully scanned (new third parameter for\n     getMIDIHeaderFilepointer() controls this)\n   Small improvements to MoreNaturalSort()\n\n\n1.4.1b2: [April-18-2002] James Heinrich\n   ¤ GetAllMP3Info()'s 2nd parameter has changed from boolean to string\n     (now specifying the parse-this-file-as-this format, like 'mp3',\n     but also can be FALSE to mean don't assume any format, auto-detect\n     only), and a third parameter (array containing allowed formats)\n     has been added. The assumedFormat parameter allows a file to be\n     forced to be parsed as a certain format rather than relying on the\n     auto-detection of getID3() (ex: an MP3 wrapped in a RIFF/WAV\n     header will be auto-detected as RIFF/WAV, but if forced to parse\n     as MP3 will extract the original MP3 information)\n     (thanks reel_tazØusers*sourceforge*net)\n   * Bugfix: ID3v2FrameIsAllowed() wasn't behaving properly if the\n     writing functions were called for more than one file, because of\n     the static array not being cleared between uses (thanks yoyo)\n   * Bugfix: Lyrics3 data wasn't being properly copied from the ['raw']\n     keys to the easy keys (['title'], etc.)  (thanks Christian Fritz)\n   * Bugfix: some testing code was accidentally left in\n     getid3.thumbnail.php  (thanks Christian Fritz)\n   * Bugfix: RIFF/WAVE files are now more likely to have all their\n     chunks parsed.\n   * Bugfix: RIFF/WAVE bitrate & playtime now better calculated\n   * Bugfix: MP3 scanning for synch doesn't go beyond 64k now, to stop\n     intensive scanning through large file that don't have a synch\n     (thanks soulcatcherØevilsoft*org for a weird sample file)\n   Improved performance when scanning for MP3 synch (about 600% faster\n     if the synch is never found)\n   ZIP files no longer return the contents of each compressed file, as\n     that would very easily be more data than PHP could handle.\n     (thanks davidbullockØtech-center*com)\n   getid3.check.php now displays entries in a more natural sort order:\n     case insensitive, ignores most punctuation, treats accented chars\n     the same as their unaccent equivalent  (thanks mikeØftl*com)\n   Added support for SmartSound-format RIFF files (which are regular\n     RIFF/WAVE files with the first 4 chars changed from RIFF to SDSS)\n   All instances of while(list() = each()) replaced with foreach()\n\n\n1.4.1b1: [April-11-2002] James Heinrich\n   » Parses MIDI files.\n     NOTE: very slow at parsing, much slower than any other file type\n     NOTE: playtime is generally mostly accurate, but not always 100%\n   » Parses ZIP files (if ZZIPlib available, and only in PHP 4.0.7RC1\n     and later (see http://www.php.net/manual/en/ref.zip.php)\n     NOTE: currently untested as I'm unable to find php_zip.dll for\n     PHP/Win32 - if someone has a copy of this file, please email me:\n     infoØgetid3Øorg\n   » Parses JPEG files (requires GD installed)\n   » Parses PNG files  (requires GD v1.6+ installed)\n   » Parses GIF files  (requires GD < v1.6 installed)\n   » For MP3s, once a valid synch is detected, the next 5 frames are\n     also scanned for valid synch signatures, to prevent false\n     identification of synch. For corrupt MP3 files this will be a bit\n     slower, but hopefully produce more reliable results.\n     (Thanks to mpdjØbtinternet*com for bringing this to my attention,\n     and xbhoffØpacbell*net for explaining what was happening)\n     (Thanks also to macik for helping me with MP3 frame lengths:\n     http://66.96.216.160/cgi-bin/YaBB.pl\n     ?board=c&action=display&num=1018474068)\n   » The actual image data is now displayed (for JPEG, PNG and GIF\n     images only) rather than a binary text dump in getid3.check.php\n     (specifically table_var_dump()) for APIC frames. Made possible\n     by the inclusion of (a modified version of) GetURLImageSize() by\n     Filipe Laborde-Basto (www.rezox.com). You can right-click, save-as\n     to extract the image to a file.\n     NOTE: The actual image data is still returned in ['data']\n   ¤ ['image_mime'], ['image_width'], ['image_height'], ['image_bytes']\n     are now returned for APICs\n   ¤ split parsing functions out into seperate files: lyrics3, id3v1,\n     id3v2, mp3, ogg, riff, mpeg, midi, zip\n   ¤ ['ogg']['bitrate_ave'] -> ['ogg']['bitrate_nominal'] (thanks to\n     stephaneØtekartists*com for pointing out that \"nominal\" bitrate\n     may actually differ significantly from the \"average\" bitrate)\n     The real average bitrate seems to be only extractable by parsing\n     the entire file and calculating the average bitrate. This is not\n     yet an option, but hopefully in a future version of getID3()\n   ¤ ['filename'] now returned for all files\n   ¤ ['ogg']['date'] and ['ogg']['description'] now returned when\n     available  (thanks stephaneØtekartists*com)\n   ¤ ['mpeg']['audio']['crc'] now contains the CRC (if present)\n   ¤ ['bitrate'] is now returned as a double instead of an int\n   ¤ ['dataoffset'] is now returned for all ID3v2 frames\n   * Bugfix: MP3 CRC presence ['mpeg']['audio']['protection'] was being\n     reported as opposite of what it actually should be\n   * Bugfix: MPEG videos weren't being detected (they were being\n     parsed as MP3), and even if they were, there was a typo in\n     getMPEGHeaderFilepointer()  (thanks Christian Fritz)\n   * Bugfix: getid3.functions.php wasn't being included in\n     getid3.write.php  (thanks mikeØftl*com)\n   * Bugfix: Browse:___ directory name in getid3.check.php wasn't\n     correct with directory names with ' and other strange characters\n     (thanks Christian Fritz)\n   ID3v2FrameProcessing() now checks to see if the next frame is valid\n     after it encounters an invalid FrameID, and if the next frameID\n     appears valid, it will just skip the current (invalid) frame and\n     continue processing (it would previously abort at the first sign\n     of incorrect structure)   (thanks stephaneØtekartists*com)\n   getid3.check.php now scans filetypes based on content, not filename\n     extension, and shows the filetype in the displayed output. Files\n     are only scanned as MP3 if ID3v2 or MPEG-audio signatures are at\n     the immediate beginning of the file (MP3 used to be the default\n     format), so a corrupt file may not show up as MP3 format in the\n     browse screen, but in detail it will scan in-depth\n   getid3.check.php now has columns to show the presence of ID3v1,\n     ID3v2 and Lyrics3 content\n   Helium2 (www.helium2.com) has been known to write ID3v2.4 tags with\n     non-synchsafe-integer framesizes, getID3() now checks for this and\n     will override and parse the tag as ID3v2.3 if the tag would parse\n     fine as ID3v2.3 when it's really specified as ID3v2.4  (thanks\n     Christian Fritz for the test files)\n\n\n1.4.0b9: [April-05-2002] James Heinrich\n   » Ogg files now return bitrate and playtime (playtime calculated\n     from nominal bitrate and filesize, so it's only approximately\n     accurate).  (thanks stephaneØtekartists*com for the idea)\n   * Bugfix: ID3v1 tags were not properly being parsed - track, genre\n     and comment fields were incorrect.  (thanks Christian Fritz)\n   * Bugfix: getid3.check.php would not browse directories with single\n     quotes (') or double quotes (\") in the directory name.\n     (thanks Christian Fritz)\n   * Bugfix: Improved detection of MPEG-video files (a sample MP3 file\n     had a false MPEG video signature at the beginning), and the MPEG-\n     video parsing function now only looks for the MPEG-video header\n     in the first 100k bytes of the file, to prevent needlessly\n     scanning very large files. Also will not infinitely loop if it\n     does not find what it's looking for.  (thanks Christian Fritz)\n   ['error'] now returned if MP3 synch doesn't occur at beginning of\n     file if ID3v2 not used (ie there's some kind of padding there that\n     should not be)\n   Reduced use of fread() in getMPEGHeaderFilepointer() (now faster)\n   Added \"file parsed in x.xxx seconds\" to getid3.check.php\n   Added \"browse: <directory>\" link to getid3.check.php\n   Changed default ID3v2 majorversion from 2.4 to 2.3 in\n     getid3.write.php because Winamp (and probably many other\n     ID3v2-aware tools) can only read up to ID3v2.3\n     (thanks mikeØftl*com)\n\n\n1.4.0b8: [April-04-2002] James Heinrich\n   » Lyrics3 support added  (thanks Christian Fritz for the idea)\n   ¤ check.php renamed to getid3.check.php\n   ¤ write.php renamed to getid3.write.php\n   ¤ ['id3']['id3v2']['error'] (if present) now reported in ['error']\n   ¤ ['mpeg']['audio']['error'] (if present) now reported in ['error']\n   * Bugfix: RoughTranslateUnicodeToASCII() was completely mangling\n     UTF-16/UTF-16BE encoded text\n   * Bugfix: The warning about MP3ext wasn't always showing up\n     (thanks davidbullockØtech-center*com)\n   getID3v1Filepointer() cleaned up & shortened\n   Moved the include_once() statements around so that a minimum of code\n     is included\n\n\n1.4.0b7: [April-03-2002] James Heinrich\n   » RIFFs (specifically AVIs) are now more completely parsed,\n     almost everything in the returned ['RIFF'] array has been moved\n     around and/or restructured. A lot of new data is in there too -\n     codecs, frame size, etc.\n   ¤ Better recursive parsing of RIFFs (sub-arrays are now in the right\n     place)\n   * Bugfix: the isset() idea introduced in beta 5 was incorrectly\n     implemented, such that ['asciidata'] and ['asciidescription'] were\n     never returned - this had the side effect that ID3v2 comments were\n     not copied to ['id3']['id3v2']['comment']  (thanks mikeØftl*com)\n   * Bugfix: MPEG audio synch wasn't being detected, and therefore MPEG\n     audio data not parsed, if no ID3v2 header present in an MP3\n   ID3v1 track number only returned if greater than zero\n   Removed !== FALSE (introduced in 1.4.0b6) from while(fread()) loops,\n     some users were reporting problems with that syntax.\n   Changed substr($string, 0, 1) to $string{0} syntax in most files\n   Reformatted changelog.txt to 72-column width\n\n\n1.4.0b6: [April-01-2002] James Heinrich\n   * Bugfix: 1.4.0b5 introduced a bug where any RIFF file other than\n     PCM WAVE (this includes any compressed WAV, as well as all AVIs)\n     would crash getID3()\n   Reduced use of fread() in getOggHeaderFilepointer() for increased\n     speed\n   Added constant FREAD_BUFFER_SIZE for many fread() operations\n   Added !== FALSE check to while(fread()) loops\n     (thanks davidbullockØtech-center*com)\n   Added more entries to RIFFwFormatTagLookup()\n     (still looking for a good complete list)\n   Converted use of hexdec() in getid3.lookup.php to 0x1234 notation\n\n\n1.4.0b5: [March-28-2002] James Heinrich\n   ¤ Renamed decodeheader() to decodeMPEGaudioHeader()\n   * Bugfix: Fixed infinite loop problem for RIFF/WAV files with\n     unknown chunks\n   * Bugfix: WXXX frames were incorrectly writing from ['URL'] instead\n     of ['url']\n   * Bugfix: RoughTranslateUnicodeToASCII() wasn't properly decoding\n     UTF-16/UTF-16BE\n   Changed all quoted strings from \" to ' to hopefully improve speed\n     (although benchmarks have not yet shown any significant\n     improvement in speed)  (thanks davidbullockØtech-center*com)\n   Improved code in check.php for dealing with symbolic links\n     (thanks davidbullockØtech-center*com)\n   Changed '<?' tags to '<?php'  (thanks davidbullockØtech-center*com)\n   Added processing time indicator in check.php\n     (ie 'directory scanned in 2.45 seconds')\n   Replaced all instances of feof() to prevent infinite loop conditions\n   Moved lookup portions of decodeMPEGaudioHeader() to\n     getid3.lookup.php\n   Replaced $arrayname[$index] with $arrayname[\"$index\"] to avoid PHP\n     E_NOTICEs  (thanks davidbullockØtech-center*com)\n   Wrapped isset() around many if statements, to avoid PHP E_NOTICEs,\n     hence improve speed (up to 30x speed improvement reported in some\n     cases :)\n\n\n1.4.0b4: [March-26-2002] James Heinrich\n   ¤ RIFF/WAV file format now parsed, returned under ['riff']\n   ¤ Support for Relative Gain Adjustment in RIFF/WAV files\n   ¤ ['channels'] (1 or 2) now returned for MP3 and WAV files\n   ¤ ['bitrate'] now returned (in bits-per-second) at root level for\n     MP3 and WAV files\n   Added support for RGAD (Relative Gain ADjustment) ID3v2 frames, both\n     reading & writing\n     (see http://privatewww.essex.ac.uk/~djmrob/replaygain/ for details\n     on RGAD)  (thanks Christian Fritz for the idea)\n   Removed some test data-dumping from the ID3v2 writing functions\n   Language code 'XXX' now returns descriptive string 'unknown' instead\n     of NULL\n   Seperated out comments from top of getid3.php into getid3.readme.txt\n     and changelog.txt\n   Split out non-lookup functions from getid3.lookup.php to\n     getid3.functions.php\n\n\n1.4.0b3: [March-25-2002] James Heinrich\n   ¤ ['asciidata'] for WXXX frames now returns correct information, but\n     under ['asciidescription']  (thanks Christian Fritz)\n   ¤ Added ['framenamelong'] to all returned frame data arrays with\n     text description of that frame (ie 'RVA2' would return 'Relative\n     volume adjustment (2)')  (thanks Christian Fritz)\n   ¤ ['datalength'] is now ['indexeddatalength'] in ASPI frames (was\n     confliciting with the all-frames ['datalength'] as introduced in\n     v1.4.0b1\n   ¤ ['datalength'] now returned as integer (rather than double) where\n     possible\n\n\n1.4.0b2: [March-21-2002] James Heinrich\n   ¤ ['mpeg']['audio']['bitrate'] now returned as int rather than\n     double for VBR files\n   * Bugfix: MPEG audio information wasn't being parsed on files that\n     had neither ID3v1 or ID3v2\n   * Bugfix: COMM/WXXX frames weren't returning 'asciidata' in\n     ID3v2.2, which also meant the ['id3']['id3v2']['comment'] field\n     wasn't being returned  (thanks stephaneØtekartists*com)\n   * Bugfix: file might not be found if filename actually contains\n     escaped chars or %xx-formatted characters\n     (thanks reel_tazØusers*sourceforge*net)\n   Added support for running with Register Globals turned off\n     (thanks reel_tazØusers*sourceforge*net)\n   Added urlencode() where needed in check.php\n     (thanks reel_tazØusers*sourceforge*net)\n   Fixed IE buffering/display problem in progress counter in check.php\n\n\n1.4.0b1: [March-11-2002] James Heinrich\n   » ID3v2 writing support via WriteID3v2() in putid3.php\n     RemoveID3v2() and RemoveID3v1() functions now available in\n     putid3.php  All ID3v1 and ID3v2 writing functions have been moved\n     to putid3.php and example file write.php has been added to the\n     distribution\n   ¤ MPEG audio frame information (bitrate, frequency, etc) now\n     returned inside ['mpeg']['audio'] instead of just ['mpeg']\n   ¤ MPEG video information now parsed, returned in ['mpeg']['video']\n     Note: audio portion of video system files is not yet being parsed\n   ¤ All flag bits are now returned as boolean rather than int or\n     string\n   ¤ RVA2 data now returned as an array (multiple RVA2 tags are\n     allowed)\n   ¤ RVA2/EQU2 description returned under ['description'] rather than\n     ['identification']\n   ¤ RVAD/EQUA adjustments now returned as signed integers, rather than\n     absolute values which required you to check flag bytes\n   ¤ RVRB/REV data no longer returns under ['reverb'] array\n   ¤ WXXX/W???/LINK frames now return ['url'] instead of ['URL']\n   ¤ USER now properly returns both ['language'] and ['languagename']\n   ¤ OWNE now returns ['purchasedateunix'] as a UNIX timestamp\n     (only if ['purchasedate'] is a valid date)\n   ¤ ['id3']['id3v2']['padding'] now returned with information on padding\n   ¤ ['headerlength'] now includes the initial 6 or 10 bytes of the\n     ID3v2 header\n   ¤ ['artist'], ['title'], ['album'], ['tracknumber'], ['genre'] now\n     returned for easier access for Ogg files\n   ¤ added ['datalength'] to all ID3v2 frames: length of frame data,\n     not including frame header\n   ¤ ['fileformat'] now returns 'id3' if there are ID3v1 or ID3v2 tags\n     but no audio data\n   ¤ ['fileformat'] now returns 'mpg' if it's an MPEG system (video +\n     audio) file\n   * Bugfix: RVAD was being parsed incorrectly\n   * Bugfix: ['currency'] and ['purchasedate'] now correctly returned\n     in OWNE\n   * Bugfix: Frequncies in 'EQU2' frames were incorrectly double\n   * Bugfix: ['bytedeviation'] and ['msdeviation'] now properly\n     returned as integer rather than binary string for 'MLLT' frames\n   * Bugfix: ['filename'] now properly returned for 'GEOB' frames\n   * Bugfix: ['imagetype'] now properly returned for 'PIC' frames in\n     ID3v2.2\n   * Bugfix: Genre not being written if not set in WriteID3v1()\n     (thanks reel_tazØusers*sourceforge*net)\n   * Bugfix: Changed write mode to 'r+b' from 'a+' because ID3v1 tags\n     were being appended instead of overwritten if they already existed\n     (thanks reel_tazØusers*sourceforge*net)\n   * Bugfix: open would fail on filenames containing quotes\n     (thanks javierØcrackdealer*com)\n   * Bugfix: various values were incorrectly returned (unneeded ord())\n     in these frames: COMR, USER, ENCR, GRID, PRIV, SIGN\n   * Bugfix: ASPI ['bitsperpoint'] was not correctly returned\n   * Bugfix: RoughTranslateUnicodeToASCII() was not returning the last\n     char for UTF-16\n   * Bugfix: ['audiobytes'] now correctly 0 if no synch found\n   * Bugfix: GenreLookup was incorrectly returning 'Remix' instead of\n     'Blues' for GenreID 0\n   Added sample directory browser to check.php\n   Seperated out MPEGaudio-parsing functionality into\n     getOnlyMPEGaudioInfo() which may be called directly if you don't\n     need any ID3 parsing  (thanks djpretzelØcox*rr*com for idea)\n   Reduced use of fread() for increased performance in\n     getID3v1Filepointer()\n   Added clearstatcache() before checking filesize - size after writing\n     tag now correct\n   Added hack for mp3Rage (www.chaoticsoftware.com) that puts\n     ID3v2.3-formatted MIME type instead of 3-char ID3v2.2-format image\n     type  (thanks xbhoffØpacbell*net for test file)\n\n\n1.3.2: [February-15-2002] James Heinrich\n   ¤ UFID/UFI, USLT/ULT, COMM/COM, APIC/PIC, GEOB/GEO, CRM, RVA2, EQU2,\n     POPM/POP, AENC/CRA, ENCR and GRID frame data now returned under\n     numeric array index rather than by ownerID\n   ¤ RVA2 frame data is now returned keyed by $channeltypeid instead of\n     $frame_idstring\n   ¤ WXXX/WXX frame description now returned under ['description']\n     instead of ['data']\n   Trailing null bytes now trimmed from frame (W??? & T???) text data\n     (it shouldn't be there to begin with, but a sample file encoded by\n     [unknown program] had data padded to 50 chars with null bytes,\n     which caused ParseID3v2GenreString() to freeze).\n\n\n1.3.1: [February-13-2002] James Heinrich\n   * Bugfix: ['playtime_seconds'] and ['playtime_string'] were not\n     being returned\n   * Bugfix: ['fileformat'] was incorrectly being returned as a\n     2-element array\n   * Bugfix: USLT wasn't being correctly parsed\n   Improved RoughTranslateUnicodeToASCII()\n     (thanks reel_tazØusers*sourceforge*net for Unicode test file)\n\n\n1.3.0: [February-13-2002] James Heinrich\n   » ID3v1 writing support via WriteID3v1()\n   ¤ MPEG audio frame information (bitrate, frequency, etc) now\n     returned inside ['mpeg']\n   ¤ ['mpeg']['raw'] returns the integer values of the bits for MPEG\n     audio information as returned in ['mpeg'] by decodeheader()\n     (thanks reel_tazØusers*sourceforge*net)\n   ¤ 'protection', 'padding', 'private', 'copyright' and 'original' now\n     return as boolean\n   ¤ 'bitrate' and 'frequency' now return as int (except in special\n     case of 'free')\n   Language name as well as code retured where appropriate\n     (ie 'English' and 'eng')\n   Text frames with invalid TextEncoding value are now passed through\n     anyway\n   ID3v1 data (title, artist, album, year, comment) is now trimmed\n     (no more nulls)\n   RoughTranslateUnicodeToASCII() now uses utf8_decode() for UTF-8\n\n\n1.2.5: [January-30-2002] James Heinrich\n   * Bugfix: Playtime calculations for VBR files were off slightly\n     (rounding error)\n   * Bugfix: Extended header length was incorrectly calculated\n   * Bugfix: Genre strings such as '03' weren't being handled correctly\n   More complete support for ID3v2.3 FrameIDs\n   Split out getid3.frames.php (FrameID-specific parsing function)\n   Split out getid3.lookup.php (assorted lookup-table functions)\n   Searches for what directory getid3.*.php support files are in (must\n     be same as getid3.php, but doesn't have to be same as main file -\n     for example your main file could be /index.php, but including\n     /lib/getid3/getid3.php)\n   Simplified, tweaked, changed and/or eliminated several functions.\n\n\n1.2.4: [January-26-2002] James Heinrich\n   » Basic support for reading Ogg-Vorbis comment tags\n\n\n1.2.3: [January-24-2002] James Heinrich\n   » ID3v2.2.x 3-char FrameIDs are now fully parsed\n     Note: While I've included support for 22 FrameIDs as defined in\n     the specs, I don't have test files for all of them. If anyone\n     knows of programs that generate any of the untested tags, please\n     email infoØgetid3Øorg ! Here's what's tested and not:\n       Tested: T??, COM\n     Untested: UFI, TXX, W??, WXX, IPL, MCI, ETC, MLL, STC, ULT, SLT,\n               RVA, EQU, REV, PIC, GEO, CNT, POP, BUF, CRM, CRA, LNK\n   table_var_dump() now displays boolean variables as TRUE or FALSE\n   table_var_dump() now uses htmlspecialchars() to avoid broken-table\n     problems\n\n\n1.2.2: [January-18-2002] James Heinrich\n   ¤ Parses ID3v2 genres into ['id3']['id3v2']['genreid'] and\n     ['id3']['id3v2']['genrelist'] where appropriate\n     (thanks stephaneØtekartists*com for the idea)\n   Added ID3v2 genre abbreviations 'RX' (remix) and 'CR' (cover)\n\n\n1.2.1: [January-17-2002] James Heinrich\n   * Bugfix: 'mp3' was being returned in ['format'], but 'zip' was\n     being returned in ['fileformat'], both are now returned in\n     ['fileformat']\n   ¤ Splits ['id3']['id3v2']['track'] in the format '5/12' into\n     ['track'] = '5' and ['totaltracks'] = '12'\n   ¤ Enabled ['id3']['id3v2']['title'] etc for ID3v2.2.x\n     (3-char frame names)  (thanks stephaneØtekartists*com)\n   ¤ Changed v1.?? version number format to v1.?.?\n   Scans through the file until it finds the MPEG synch (start of audio\n     frame) - some files encoded by LAME 3.91 had undocumented padding\n     after the ID3v2 header; getMP3headerFilepointer() now scans until\n     it finds synch (or EOF)  (thanks adamØtrekjapan*com)\n   Improved Unicode conversion in RoughTranslateUnicodeToASCII()\n\n\n1.20:  [January-15-2002] James Heinrich\n   » Support for variable-bitrate (VBR) files, both Xing and Fraunhofer\n     headers\n   » All 4-character FrameIDs are now fully parsed according to the\n     specs at http://www.id3.org/id3v2.4.0-frames.txt\n     ¤ This means that most no longer return ['flags'] and ['data']\n     Note: While I've included support for 30 FrameIDs as defined in\n     the specs, I don't have test files for all of them. If anyone\n     knows of programs that generate any of the untested tags, please\n     email infoØgetid3Øorg ! Here's what's tested and not:\n       Tested: UFID, T???, WXXX, USLT, SYLT, COMM, APIC, GEOB\n     Untested: TXXX, W???, MCDI, ETCO, MLLT, SYTC, RVA2, EQU2, RVRB,\n               PCNT, POPM, RBUF, AENC, USER, OWNE, COMR, ENCR, GRID,\n               PRIV, SIGN, SEEK, ASPI\n   ¤ Added 'title', 'artist', etc names to ID3v2 data (easier to access\n     than the 4-character FrameIDs of the ID3v2 standard)\n     (thanks jaksonØgmx.net)\n   * Bugfix: added fclose() at end of GetAllMP3Info()\n     (thanks stephaneØtekartists*com)\n   * Bugfix: ID3v1 wasn't being parsed if ID3v2 wasn't present\n     (thanks jaksonØgmx.net)\n   * Bugfix: several flags were being parsed incorrectly (the structure\n     had changed from ID3v2.3 to ID3v2.4) - v2.3 flags were being\n     incorrectly parsed\n   Much more compact implementation of decodeheader()\n     (thanks jaksonØgmx.net for the idea)\n   ID3v1 genres 126 through 147  (thanks jaksonØgmx.net)\n   New table_var_dump() function in check.php\n     (based partially on idea by jaksonØgmx.net)\n   Seperated ID3v1 retrieval into seperate function\n\n\n1.11:  [December-23-2001] James Heinrich\n   All functions merged into file getid3.php\n   Updated documentation to reflect new returned information\n\n\n1.10:  [December-20-2001] James Heinrich\n   * Bugfix: ID3v1 Track# was incorrectly being parsed whether it\n     existed or not\n   Changed calling procedure to recommend using\n     GetAllMP3info($filename) from getmp3header.php\n   Now includes check.php - example file\n   ¤ Checks to see if file is in ZIP or MP3 format\n     (returned in ['format'])\n     [Ed. Note: ['fileformat'] as of v1.2.1]\n\n\n1.06:  [November-05-2001] James Heinrich\n   * Bugfix: ID3v2.2.x frames weren't being parsed since they use\n     6-byte rather than 10-byte headers as v2.3+ does\n     (thanks spunkØmac*com for pointing that out)\n\n\n1.05:  [September-06-2001] James Heinrich\n   * Bugfix: ID3v2 was being parsed even if it didn't exist\n\n\n1.04:  [July-16-2001] James Heinrich\n   * Bugfix: typo in Extended Header section (strpad() should be\n     str_pad()) (thanks jurroonØyahoo*com)\n\n\n1.03:  [May-07-2001] James Heinrich\n   * Bugfix: Added missing ['id3']['id3v1']['genreid'] and\n     ['id3']['id3v1']['genre']\n\n\n1.02:  [May-05-2001] James Heinrich\n   ¤ Added ['getID3version']\n\n\n1.01:  [May-04-2001] James Heinrich\n   » Added support for frame-level de-unsynchronisation (as per\n     ID3v2.4.0 specs) in addition to ID3v2.3.x tag-level\n     de-unsynchronisation\n\n\n1.00:  [May-04-2001] James Heinrich\n   » Initial public release\n\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.34375,
          "content": "{\n    \"name\": \"james-heinrich/getid3\",\n    \"description\": \"PHP script that extracts useful information from popular multimedia file formats\",\n    \"homepage\": \"https://www.getid3.org/\",\n    \"keywords\": [\"php\",\"tags\",\"codecs\"],\n    \"type\": \"library\",\n    \"license\": [\"GPL-1.0-or-later\", \"LGPL-3.0-only\", \"MPL-2.0\"],\n    \"require\": {\n        \"php\": \">=5.3.0\"\n    },\n    \"require-dev\": {\n        \"php-parallel-lint/php-parallel-lint\": \"^1.0\"\n    },\n    \"suggest\": {\n        \"ext-com_dotnet\": \"COM extension is required when loading files larger than 2GB on Windows.\",\n        \"ext-ctype\": \"ctype extension is required when loading files larger than 2GB on 32-bit PHP (also on 64-bit PHP on Windows) or executing `getid3_lib::CopyTagsToComments`.\",\n        \"ext-dba\": \"DBA extension is required to use the DBA database as a cache storage.\",\n        \"ext-exif\": \"EXIF extension is required for graphic modules.\",\n        \"ext-iconv\": \"iconv extension is required to work with different character sets (when `ext-mbstring` is not available).\",\n        \"ext-json\": \"JSON extension is required to analyze Apple Quicktime videos.\",\n        \"ext-libxml\": \"libxml extension is required to analyze RIFF/WAV/BWF audio files.\",\n        \"ext-mbstring\": \"mbstring extension is required to work with different character sets.\",\n        \"ext-mysql\": \"MySQL extension is required to use the MySQL database as a cache storage (deprecated in PHP 5.5, removed in PHP >= 7.0, use `ext-mysqli` instead).\",\n        \"ext-mysqli\": \"MySQLi extension is required to use the MySQL database as a cache storage.\",\n        \"ext-rar\": \"RAR extension is required for RAR archive module.\",\n        \"ext-SimpleXML\": \"SimpleXML extension is required to analyze RIFF/WAV/BWF audio files (also requires `ext-libxml`).\",\n        \"ext-sqlite3\": \"SQLite3 extension is required to use the SQLite3 database as a cache storage.\",\n        \"ext-xml\": \"XML extension is required for graphic modules to analyze the XML metadata.\",\n        \"ext-zlib\": \"Zlib extension is required for archive modules and compressed metadata.\"\n    },\n    \"scripts\": {\n        \"lint\": \"parallel-lint --show-deprecated --exclude vendor --exclude .git .\",\n        \"test\": [\n            \"composer lint\"\n        ]\n    },\n    \"autoload\": {\n        \"classmap\": [\"getid3/\"]\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"1.9.x-dev\"\n        }\n    }\n}\n"
        },
        {
          "name": "demos",
          "type": "tree",
          "content": null
        },
        {
          "name": "dependencies.txt",
          "type": "blob",
          "size": 1.1552734375,
          "content": "/////////////////////////////////////////////////////////////////\n/// getID3() by James Heinrich <info@getid3.org>               //\n//  available at http://getid3.sourceforge.net                 //\n//            or https://www.getid3.org                        //\n//          also https://github.com/JamesHeinrich/getID3       //\n/////////////////////////////////////////////////////////////////\n//                                                             //\n// dependencies.txt - part of getID3()                         //\n// See readme.txt for more details                             //\n//                                                            ///\n/////////////////////////////////////////////////////////////////\n\nlyrics3     depends on   apetag (optional)\nogg         depends on   flac\nid3v2       depends on   id3v1\napetag      depends on   id3v1 (optional, writing only)\nbonk        depends on   id3v2 (optional)\nriff        depends on   mp3\nmpeg        depends on   mp3\nquicktime   depends on   mp3\nflac        depends on   ogg\noptimfrog   depends on   riff\nla          depends on   riff\nlpac        depends on   riff\nasf         depends on   riff, id3v1 (optional)\n"
        },
        {
          "name": "getid3",
          "type": "tree",
          "content": null
        },
        {
          "name": "helperapps",
          "type": "tree",
          "content": null
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 1.36328125,
          "content": "/////////////////////////////////////////////////////////////////\n/// getID3() by James Heinrich <info@getid3.org>               //\n//  available at http://getid3.sourceforge.net                 //\n//            or https://www.getid3.org                        //\n//          also https://github.com/JamesHeinrich/getID3       //\n/////////////////////////////////////////////////////////////////\n\n*****************************************************************\n*****************************************************************\n\n   getID3() is released under multiple licenses. You may choose\n   from the following licenses, and use getID3 according to the\n   terms of the license most suitable to your project.\n\nGNU GPL: https://gnu.org/licenses/gpl.html                   (v3)\n         https://gnu.org/licenses/old-licenses/gpl-2.0.html  (v2)\n         https://gnu.org/licenses/old-licenses/gpl-1.0.html  (v1)\n\nGNU LGPL: https://gnu.org/licenses/lgpl.html                 (v3)\n\nMozilla MPL: https://www.mozilla.org/MPL/2.0/                (v2)\n\ngetID3 Commercial License: https://www.getid3.org/#gCL\n(no longer available, existing licenses remain valid)\n\n*****************************************************************\n*****************************************************************\n\nCopies of each of the above licenses are included in the 'licenses'\ndirectory of the getID3 distribution.\n"
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.779296875,
          "content": "parameters:\n    level: 4\n    paths:\n        - getid3\n    excludes_analyse:\n    polluteScopeWithLoopInitialAssignments: true\n    dynamicConstantNames:\n        - GETID3_OS_ISWINDOWS\n    ignoreErrors:\n        - '#Call to an undefined method COM::GetFile\\(\\)\\.#'\n        - '#Constant GETID3_TEMP_DIR not found#'\n        - '#Constant GETID3_HELPERAPPSDIR not found#'\n        - '#Constant GETID3_ASF_(\\w+) not found#'\n        -\n            message: '#Function mysql_\\w+ not found\\.#'\n            path: getid3/extension.cache.mysql.php\n        -\n            message: '#Unreachable statement - code above always terminates#'\n            path: getid3/module.archive.szip.php\n        -\n            message: '#Unreachable statement - code above always terminates#'\n            path: getid3/module.audio.aa.php"
        },
        {
          "name": "readme.txt",
          "type": "blob",
          "size": 25.712890625,
          "content": "/////////////////////////////////////////////////////////////////\n/// getID3() by James Heinrich <info@getid3.org>               //\n//  available at http://getid3.sourceforge.net                 //\n//            or https://www.getid3.org                        //\n//          also https://github.com/JamesHeinrich/getID3       //\n/////////////////////////////////////////////////////////////////\n\n*****************************************************************\n*****************************************************************\n\n   getID3() is released under multiple licenses. You may choose\n   from the following licenses, and use getID3 according to the\n   terms of the license most suitable to your project.\n\nGNU GPL: https://gnu.org/licenses/gpl.html                   (v3)\n         https://gnu.org/licenses/old-licenses/gpl-2.0.html  (v2)\n         https://gnu.org/licenses/old-licenses/gpl-1.0.html  (v1)\n\nGNU LGPL: https://gnu.org/licenses/lgpl.html                 (v3)\n\nMozilla MPL: https://www.mozilla.org/MPL/2.0/                (v2)\n\ngetID3 Commercial License: https://www.getid3.org/#gCL\n(no longer available, existing licenses remain valid)\n\n*****************************************************************\n*****************************************************************\nCopies of each of the above licenses are included in the 'licenses'\ndirectory of the getID3 distribution.\n\n\n       +----------------------------------------------+\n       | If you want to donate, there is a link on    |\n       | https://www.getid3.org for PayPal donations. |\n       +----------------------------------------------+\n\n\nQuick Start\n===========================================================================\n\nQ: How can I check that getID3() works on my server/files?\nA: Unzip getID3() to a directory, then access /demos/demo.browse.php\n\n\n\nSupport\n===========================================================================\n\nQ: I have a question, or I found a bug. What do I do?\nA: The preferred method of support requests and/or bug reports is the\n   forum at http://support.getid3.org/\n\n\n\nSourceforge Notification\n===========================================================================\n\nIt's highly recommended that you sign up for notification from\nSourceforge for when new versions are released. Please visit:\nhttp://sourceforge.net/project/showfiles.php?group_id=55859\nand click the little \"monitor package\" icon/link.  If you're\npreviously signed up for the mailing list, be aware that it has\nbeen discontinued, only the automated Sourceforge notification\nwill be used from now on.\n\n\n\nWhat does getID3() do?\n===========================================================================\n\nReads & parses (to varying degrees):\n ¤ tags:\n  * APE (v1 and v2)\n  * ID3v1 (& ID3v1.1)\n  * ID3v2 (v2.4, v2.3, v2.2)\n  * Lyrics3 (v1 & v2)\n\n ¤ audio-lossy:\n  * MP3/MP2/MP1\n  * MPC / Musepack\n  * Ogg (Vorbis, OggFLAC, Speex, Opus)\n  * AAC / MP4\n  * AC3\n  * DTS\n  * RealAudio\n  * Speex\n  * DSS\n  * VQF\n\n ¤ audio-lossless:\n  * AIFF\n  * AU\n  * Bonk\n  * CD-audio (*.cda)\n  * FLAC\n  * LA (Lossless Audio)\n  * LiteWave\n  * LPAC\n  * MIDI\n  * Monkey's Audio\n  * OptimFROG\n  * RKAU\n  * Shorten\n  * TTA\n  * VOC\n  * WAV (RIFF)\n  * WavPack\n\n ¤ audio-video:\n  * ASF: ASF, Windows Media Audio (WMA), Windows Media Video (WMV)\n  * AVI (RIFF)\n  * Flash\n  * Matroska (MKV)\n  * MPEG-1 / MPEG-2\n  * NSV (Nullsoft Streaming Video)\n  * Quicktime (including MP4)\n  * RealVideo\n\n ¤ still image:\n  * BMP\n  * GIF\n  * JPEG\n  * PNG\n  * TIFF\n  * SWF (Flash)\n  * PhotoCD\n\n ¤ data:\n  * ISO-9660 CD-ROM image (directory structure)\n  * SZIP (limited support)\n  * ZIP (directory structure)\n  * TAR\n  * CUE\n\n\nWrites:\n  * ID3v1 (& ID3v1.1)\n  * ID3v2 (v2.3 & v2.4)\n  * VorbisComment on OggVorbis\n  * VorbisComment on FLAC (not OggFLAC)\n  * APE v2\n  * Lyrics3 (delete only)\n\n\n\nRequirements\n===========================================================================\n\n* PHP 4.2.0 up to 5.2.x for getID3() 1.7.x  (and earlier)\n* PHP 5.0.5 (or higher) for getID3() 1.8.x  (and up)\n* PHP 5.3.0 (or higher) for getID3() 1.9.17 (and up)\n* PHP 5.3.0 (or higher) for getID3() 2.0.x  (and up)\n* at least 4MB memory for PHP. 8MB or more is highly recommended.\n  12MB is required with all modules loaded.\n\n\n\nUsage\n===========================================================================\n\nSee /demos/demo.basic.php for a very basic use of getID3() with no\nfancy output, just scanning one file.\n\nSee structure.txt for the returned data structure.\n\n*>  For an example of a complete directory-browsing,       <*\n*>  file-scanning implementation of getID3(), please run   <*\n*>  /demos/demo.browse.php                                 <*\n\nSee /demos/demo.mysql.php for a sample recursive scanning code that\nscans every file in a given directory, and all sub-directories, stores\nthe results in a database and allows various analysis / maintenance\noperations\n\nTo analyze remote files over HTTP or FTP you need to copy the file\nlocally first before running getID3(). Your code would look something\nlike this:\n\n// Copy remote file locally to scan with getID3()\n$remotefilename = 'http://www.example.com/filename.mp3';\nif ($fp_remote = fopen($remotefilename, 'rb')) {\n\t$localtempfilename = tempnam('/tmp', 'getID3');\n\tif ($fp_local = fopen($localtempfilename, 'wb')) {\n\t\twhile ($buffer = fread($fp_remote, 32768)) {\n\t\t\tfwrite($fp_local, $buffer);\n\t\t}\n\t\tfclose($fp_local);\n\n\t\t$remote_headers = array_change_key_case(get_headers($remotefilename, 1), CASE_LOWER);\n\t\t$remote_filesize = (isset($remote_headers['content-length']) ? (is_array($remote_headers['content-length']) ? $remote_headers['content-length'][count($remote_headers['content-length']) - 1] : $remote_headers['content-length']) : null);\n\n\t\t// Initialize getID3 engine\n\t\t$getID3 = new getID3;\n\n\t\t$ThisFileInfo = $getID3->analyze($localtempfilename, $remote_filesize, basename($remotefilename));\n\n\t\t// Delete temporary file\n\t\tunlink($localtempfilename);\n\t}\n\tfclose($fp_remote);\n}\n\nNote: since v1.9.9-20150212 it is possible a second and third parameter\nto $getID3->analyze(), for original filesize and original filename\nrespectively. This permits you to download only a portion of a large remote\nfile but get accurate playtime estimates, assuming the format only requires\nthe beginning of the file for correct format analysis.\n\nSee /demos/demo.write.php for how to write tags.\n\n\n\nWhat does the returned data structure look like?\n===========================================================================\n\nSee structure.txt\n\nIt is recommended that you look at the output of\n/demos/demo.browse.php scanning the file(s) you're interested in to\nconfirm what data is actually returned for any particular filetype in\ngeneral, and your files in particular, as the actual data returned\nmay vary considerably depending on what information is available in\nthe file itself.\n\n\n\nNotes\n===========================================================================\n\ngetID3() 1.x:\nIf the format parser encounters a critical problem, it will return\nsomething in $fileinfo['error'], describing the encountered error. If\na less critical error or notice is generated it will appear in\n$fileinfo['warning']. Both keys may contain more than one warning or\nerror. If something is returned in ['error'] then the file was not\ncorrectly parsed and returned data may or may not be correct and/or\ncomplete. If something is returned in ['warning'] (and not ['error'])\nthen the data that is returned is OK - usually getID3() is reporting\nerrors in the file that have been worked around due to known bugs in\nother programs. Some warnings may indicate that the data that is\nreturned is OK but that some data could not be extracted due to\nerrors in the file.\n\ngetID3() 2.x:\nSee above except errors are thrown (so you will only get one error).\n\n\n\nDisclaimer\n===========================================================================\n\ngetID3() has been tested on many systems, on many types of files,\nunder many operating systems, and is generally believe to be stable\nand safe. That being said, there is still the chance there is an\nundiscovered and/or unfixed bug that may potentially corrupt your\nfile, especially within the writing functions. By using getID3() you\nagree that it's not my fault if any of your files are corrupted.\nIn fact, I'm not liable for anything :)\n\n\n\nLicense\n===========================================================================\n\nGNU General Public License - see license.txt\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\nas published by the Free Software Foundation; either version 2\nof the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to:\nFree Software Foundation, Inc.\n59 Temple Place - Suite 330\nBoston, MA  02111-1307, USA.\n\nFAQ:\nQ: Can I use getID3() in my program? Do I need a commercial license?\nA: You're generally free to use getID3 however you see fit. The only\n   case in which you would require a commercial license is if you're\n   selling your closed-source program that integrates getID3. If you\n   sell your program including a copy of getID3, that's fine as long\n   as you include a copy of the sourcecode when you sell it.  Or you\n   can distribute your code without getID3 and say \"download it from\n   getid3.sourceforge.net\"\n\n\n\nWhy is it called \"getID3()\" if it does so much more than just that?\n===========================================================================\n\nv0.1 did in fact just do that. I don't have a copy of code that old, but I\ncould essentially write it today with a one-line function:\n  function getID3($filename) { return unpack('a3TAG/a30title/a30artist/a30album/a4year/a28comment/c1track/c1genreid', substr(file_get_contents($filename), -128)); }\n\n\nFuture Plans\n===========================================================================\nhttps://www.getid3.org/phpBB3/viewforum.php?f=7\n\n* Better support for MP4 container format\n* Scan for appended ID3v2 tag at end of file per ID3v2.4 specs (Section 5.0)\n* Support for JPEG-2000 (http://www.morgan-multimedia.com/jpeg2000_overview.htm)\n* Support for MOD (mod/stm/s3m/it/xm/mtm/ult/669)\n* Support for ACE (thanks Vince)\n* Support for Ogg other than Vorbis, Speex and OggFlac (ie. Ogg+Xvid)\n* Ability to create Xing/LAME VBR header for VBR MP3s that are missing VBR header\n* Ability to \"clean\" ID3v2 padding (replace invalid padding with valid padding)\n* Warn if MP3s change version mid-stream (in full-scan mode)\n* check for corrupt/broken mid-file MP3 streams in histogram scan\n* Support for lossless-compression formats\n  (http://www.firstpr.com.au/audiocomp/lossless/#Links)\n  (http://compression.ca/act-sound.html)\n  (http://web.inter.nl.net/users/hvdh/lossless/lossless.htm)\n* Support for RIFF-INFO chunks\n  * http://lotto.st-andrews.ac.uk/~njh/tag_interchange.html\n    (thanks Nick Humfrey <njhØsurgeradio*co*uk>)\n  * http://abcavi.narod.ru/sof/abcavi/infotags.htm\n    (thanks Kibi)\n* Better support for Bink video\n* http://www.hr/josip/DSP/AudioFile2.html\n* http://www.pcisys.net/~melanson/codecs/\n* Detect mp3PRO\n* Support for PSD\n* Support for JPC\n* Support for JP2\n* Support for JPX\n* Support for JB2\n* Support for IFF\n* Support for ICO\n* Support for ANI\n* Support for EXE (comments, author, etc) (thanks p*quaedackersØplanet*nl)\n* Support for DVD-IFO (region, subtitles, aspect ratio, etc)\n  (thanks p*quaedackersØplanet*nl)\n* More complete support for SWF - parsing encapsulated MP3 and/or JPEG content\n    (thanks n8n8Øyahoo*com)\n* Support for a2b\n* Optional scan-through-frames for AVI verification\n  (thanks rockcohenØmassive-interactive*nl)\n* Support for TTF (thanks infoØbutterflyx*com)\n* Support for DSS (https://www.getid3.org/phpBB3/viewtopic.php?t=171)\n* Support for SMAF (http://smaf-yamaha.com/what/demo.html)\n  https://www.getid3.org/phpBB3/viewtopic.php?t=182\n* Support for AMR (https://www.getid3.org/phpBB3/viewtopic.php?t=195)\n* Support for 3gpp (https://www.getid3.org/phpBB3/viewtopic.php?t=195)\n* Support for ID4 (http://www.wackysoft.cjb.net grizlyY2KØhotmail*com)\n* Parse XML data returned in Ogg comments\n* Parse XML data from Quicktime SMIL metafiles (klausrathØmac*com)\n* ID3v2 genre string creator function\n* More complete parsing of JPG\n* Support for all old-style ASF packets\n* ASF/WMA/WMV tag writing\n* Parse declared T??? ID3v2 text information frames, where appropriate\n    (thanks Christian Fritz for the idea)\n* Recognize encoder:\n  http://www.guerillasoft.com/EncSpot2/index.html\n  http://ff123.net/identify.html\n  http://www.hydrogenaudio.org/?act=ST&f=16&t=9414\n  http://www.hydrogenaudio.org/?showtopic=11785\n* Support for other OS/2 bitmap structures: Bitmap Array('BA'),\n  Color Icon('CI'), Color Pointer('CP'), Icon('IC'), Pointer ('PT')\n  http://netghost.narod.ru/gff/graphics/summary/os2bmp.htm\n* Support for WavPack RAW mode\n* ASF/WMA/WMV data packet parsing\n* ID3v2FrameFlagsLookupTagAlter()\n* ID3v2FrameFlagsLookupFileAlter()\n* obey ID3v2 tag alter/preserve/discard rules\n* http://www.geocities.com/SiliconValley/Sector/9654/Softdoc/Illyrium/Aolyr.htm\n* proper checking for LINK/LNK frame validity in ID3v2 writing\n* proper checking for ASPI-TLEN frame validity in ID3v2 writing\n* proper checking for COMR frame validity in ID3v2 writing\n* http://www.geocities.co.jp/SiliconValley-Oakland/3664/index.html\n* decode GEOB ID3v2 structure as encoded by RealJukebox,\n  decode NCON ID3v2 structure as encoded by MusicMatch\n  (probably won't happen - the formats are proprietary)\n\n\n\nKnown Bugs/Issues in getID3() that may be fixed eventually\n===========================================================================\nhttps://www.getid3.org/phpBB3/viewtopic.php?t=25\n\n* Cannot determine bitrate for MPEG video with VBR video data\n  (need documentation)\n* Interlace/progressive cannot be determined for MPEG video\n  (need documentation)\n* MIDI playtime is sometimes inaccurate\n* AAC-RAW mode files cannot be identified\n* WavPack-RAW mode files cannot be identified\n* mp4 files report lots of \"Unknown QuickTime atom type\"\n   (need documentation)\n* Encrypted ASF/WMA/WMV files warn about \"unhandled GUID\n  ASF_Content_Encryption_Object\"\n* Bitrate split between audio and video cannot be calculated for\n  NSV, only the total bitrate. (need documentation)\n* All Ogg formats (Vorbis, OggFLAC, Speex) are affected by the\n  problem of large VorbisComments spanning multiple Ogg pages, but\n  but only OggVorbis files can be processed with vorbiscomment.\n* The version of \"head\" supplied with Mac OS 10.2.8 (maybe other\n  versions too) does only understands a single option (-n) and\n  therefore fails. getID3 ignores this and returns wrong md5_data.\n\n\n\nKnown Bugs/Issues in getID3() that cannot be fixed\n--------------------------------------------------\nhttps://www.getid3.org/phpBB3/viewtopic.php?t=25\n\n* 32-bit PHP installations only:\n  Files larger than 2GB cannot always be parsed fully by getID3()\n  due to limitations in the 32-bit PHP filesystem functions.\n  NOTE: Since v1.7.8b3 there is partial support for larger-than-\n  2GB files, most of which will parse OK, as long as no critical\n  data is located beyond the 2GB offset.\n  Known will-work:\n  * all file formats on 64-bit PHP\n  * ZIP  (format doesn't support files >2GB)\n  * FLAC (current encoders don't support files >2GB)\n  Known will-not-work:\n  * ID3v1 tags (always located at end-of-file)\n  * Lyrics3 tags (always located at end-of-file)\n  * APE tags (always located at end-of-file)\n  Maybe-will-work:\n  * Quicktime (will work if needed metadata is before 2GB offset,\n    that is if the file has been hinted/optimized for streaming)\n  * RIFF.WAV (should work fine, but gives warnings about not being\n    able to parse all chunks)\n  * RIFF.AVI (playtime will probably be wrong, is only based on\n    \"movi\" chunk that fits in the first 2GB, should issue error\n    to show that playtime is incorrect. Other data should be mostly\n    correct, assuming that data is constant throughout the file)\n* PHP <= v5 on Windows cannot read UTF-8 filenames\n\n\nKnown Bugs/Issues in other programs\n-----------------------------------\nhttps://www.getid3.org/phpBB3/viewtopic.php?t=25\n\n* MusicBrainz Picard (at least up to v1.3.2) writes multiple\n  ID3v2.3 genres in non-standard forward-slash separated text\n  rather than parenthesis-numeric+refinement style per the ID3v2.3\n  specs. Tags written in ID3v2.4 mode are written correctly.\n  (detected and worked around by getID3())\n* PZ TagEditor v4.53.408 has been known to insert ID3v2.3 frames\n  into an existing ID3v2.2 tag which, of course, breaks things\n* Windows Media Player (up to v11) and iTunes (up to v10+) do\n    not correctly handle ID3v2.3 tags with UTF-16BE+BOM\n    encoding (they assume the data is UTF-16LE+BOM and either\n    crash (WMP) or output Asian character set (iTunes)\n* Winamp (up to v2.80 at least) does not support ID3v2.4 tags,\n    only ID3v2.3\n    see: http://forums.winamp.com/showthread.php?postid=387524\n* Some versions of Helium2 (www.helium2.com) do not write\n    ID3v2.4-compliant Frame Sizes, even though the tag is marked\n    as ID3v2.4)  (detected by getID3())\n* MP3ext V3.3.17 places a non-compliant padding string at the end\n    of the ID3v2 header. This is supposedly fixed in v3.4b21 but\n    only if you manually add a registry key. This fix is not yet\n    confirmed.  (detected by getID3())\n* CDex v1.40 (fixed by v1.50b7) writes non-compliant Ogg comment\n    strings, supposed to be in the format \"NAME=value\" but actually\n    written just \"value\"  (detected by getID3())\n* Oggenc 0.9-rc3 flags the encoded file as ABR whether it's\n    actually ABR or VBR.\n* iTunes (versions \"v7.0.0.70\" is known-guilty, probably\n    other versions are too) writes ID3v2.3 comment tags using an\n    ID3v2.2 frame name (3-bytes) null-padded to 4 bytes which is\n    not valid for ID3v2.3+\n    (detected by getID3() since 1.9.12-201603221746)\n* iTunes (versions \"X v2.0.3\", \"v3.0.1\" are known-guilty, probably\n    other versions are too) writes ID3v2.3 comment tags using a\n    frame name 'COM ' which is not valid for ID3v2.3+ (it's an\n    ID3v2.2-style frame name)  (detected by getID3())\n* MP2enc does not encode mono CBR MP2 files properly (half speed\n    sound and double playtime)\n* MP2enc does not encode mono VBR MP2 files properly (actually\n    encoded as stereo)\n* tooLAME does not encode mono VBR MP2 files properly (actually\n    encoded as stereo)\n* AACenc encodes files in VBR mode (actually ABR) even if CBR is\n   specified\n* AAC/ADIF - bitrate_mode = cbr for vbr files\n* LAME 3.90-3.92 prepends one frame of null data (space for the\n  LAME/VBR header, but it never gets written) when encoding in CBR\n  mode with the DLL\n* Ahead Nero encodes TwinVQF with a DSIZ value (which is supposed\n  to be the filesize in bytes) of \"0\" for TwinVQF v1.0 and \"1\" for\n  TwinVQF v2.0  (detected by getID3())\n* Ahead Nero encodes TwinVQF files 1 second shorter than they\n  should be\n* AAC-ADTS files are always actually encoded VBR, even if CBR mode\n  is specified (the CBR-mode switches on the encoder enable ABR\n  mode, not CBR as such, but it's not possible to tell the\n  difference between such ABR files and true VBR)\n* STREAMINFO.audio_signature in OggFLAC is always null. \"The reason\n  it's like that is because there is no seeking support in\n  libOggFLAC yet, so it has no way to go back and write the\n  computed sum after encoding. Seeking support in Ogg FLAC is the\n  #1 item for the next release.\" - Josh Coalson (FLAC developer)\n  NOTE: getID3() will calculate md5_data in a method similar to\n  other file formats, but that value cannot be compared to the\n  md5_data value from FLAC data in a FLAC file format.\n* STREAMINFO.audio_signature is not calculated in FLAC v0.3.0 &\n  v0.4.0 - getID3() will calculate md5_data in a method similar to\n  other file formats, but that value cannot be compared to the\n  md5_data value from FLAC v0.5.0+\n* RioPort (various versions including 2.0 and 3.11) tags ID3v2 with\n  a WCOM frame that has no data portion\n* Earlier versions of Coolplayer adds illegal ID3 tags to Ogg Vorbis\n  files, thus making them corrupt.\n* Meracl ID3 Tag Writer v1.3.4 (and older) incorrectly truncates the\n  last byte of data from an MP3 file when appending a new ID3v1 tag.\n  (detected by getID3())\n* Lossless-Audio files encoded with and without the -noseek switch\n  do actually differ internally and therefore cannot match md5_data\n* iTunes has been known to append a new ID3v1 tag on the end of an\n  existing ID3v1 tag when ID3v2 tag is also present\n  (detected by getID3())\n* MediaMonkey may write a blank RGAD ID3v2 frame but put actual\n  replay gain adjustments in a series of user-defined TXXX frames\n  (detected and handled by getID3() since v1.9.2)\n\n\n\n\nReference material:\n===========================================================================\n\n[www.id3.org material now mirrored at http://id3lib.sourceforge.net/id3/]\n* http://www.id3.org/id3v2.4.0-structure.txt\n* http://www.id3.org/id3v2.4.0-frames.txt\n* http://www.id3.org/id3v2.4.0-changes.txt\n* http://www.id3.org/id3v2.3.0.txt\n* http://www.id3.org/id3v2-00.txt\n* http://www.id3.org/mp3frame.html\n* http://minnie.tuhs.org/pipermail/mp3encoder/2001-January/001800.html <mathewhendry@hotmail.com>\n* http://www.dv.co.yu/mpgscript/mpeghdr.htm\n* http://www.mp3-tech.org/programmer/frame_header.html\n* http://users.belgacom.net/gc247244/extra/tag.html\n* http://gabriel.mp3-tech.org/mp3infotag.html\n* http://www.id3.org/iso4217.html\n* http://www.unicode.org/Public/MAPPINGS/ISO8859/8859-1.TXT\n* http://www.xiph.org/ogg/vorbis/doc/framing.html\n* http://www.xiph.org/ogg/vorbis/doc/v-comment.html\n* http://leknor.com/code/php/class.ogg.php.txt\n* http://www.id3.org/iso639-2.html\n* http://www.id3.org/lyrics3.html\n* http://www.id3.org/lyrics3200.html\n* http://www.psc.edu/general/software/packages/ieee/ieee.html\n* http://www.scri.fsu.edu/~jac/MAD3401/Backgrnd/ieee-expl.html\n* http://www.scri.fsu.edu/~jac/MAD3401/Backgrnd/binary.html\n* http://www.jmcgowan.com/avi.html\n* http://www.wotsit.org/\n* http://www.herdsoft.com/ti/davincie/davp3xo2.htm\n* http://www.mathdogs.com/vorbis-illuminated/bitstream-appendix.html\n* \"Standard MIDI File Format\" by Dustin Caldwell (from www.wotsit.org)\n* http://midistudio.com/Help/GMSpecs_Patches.htm\n* http://www.xiph.org/archives/vorbis/200109/0459.html\n* http://www.replaygain.org/\n* http://www.lossless-audio.com/\n* http://download.microsoft.com/download/winmediatech40/Doc/1.0/WIN98MeXP/EN-US/ASF_Specification_v.1.0.exe\n* http://mediaxw.sourceforge.net/files/doc/Active%20Streaming%20Format%20(ASF)%201.0%20Specification.pdf\n* http://www.uni-jena.de/~pfk/mpp/sv8/ (archived at http://www.hydrogenaudio.org/musepack/klemm/www.personal.uni-jena.de/~pfk/mpp/sv8/)\n* http://jfaul.de/atl/\n* http://www.uni-jena.de/~pfk/mpp/ (archived at http://www.hydrogenaudio.org/musepack/klemm/www.personal.uni-jena.de/~pfk/mpp/)\n* http://www.libpng.org/pub/png/spec/png-1.2-pdg.html\n* http://www.real.com/devzone/library/creating/rmsdk/doc/rmff.htm\n* http://www.fastgraph.com/help/bmp_os2_header_format.html\n* http://netghost.narod.ru/gff/graphics/summary/os2bmp.htm\n* http://flac.sourceforge.net/format.html\n* http://www.research.att.com/projects/mpegaudio/mpeg2.html\n* http://www.audiocoding.com/wiki/index.php?page=AAC\n* http://libmpeg.org/mpeg4/doc/w2203tfs.pdf\n* http://www.geocities.com/xhelmboyx/quicktime/formats/qtm-layout.txt\n* http://developer.apple.com/techpubs/quicktime/qtdevdocs/RM/frameset.htm\n* http://www.nullsoft.com/nsv/\n* http://www.wotsit.org/download.asp?f=iso9660\n* http://sandbox.mc.edu/~bennet/cs110/tc/tctod.html\n* http://www.cdroller.com/htm/readdata.html\n* http://www.speex.org/manual/node10.html\n* http://www.harmony-central.com/Computer/Programming/aiff-file-format.doc\n* http://www.faqs.org/rfcs/rfc2361.html\n* http://ghido.shelter.ro/\n* http://www.ebu.ch/tech_t3285.pdf\n* http://www.sr.se/utveckling/tu/bwf\n* http://ftp.aessc.org/pub/aes46-2002.pdf\n* http://cartchunk.org:8080/\n* http://www.broadcastpapers.com/radio/cartchunk01.htm\n* http://www.hr/josip/DSP/AudioFile2.html\n* http://home.attbi.com/~chris.bagwell/AudioFormats-11.html\n* http://www.pure-mac.com/extkey.html\n* http://cesnet.dl.sourceforge.net/sourceforge/bonkenc/bonk-binary-format-0.9.txt\n* http://www.headbands.com/gspot/\n* http://www.openswf.org/spec/SWFfileformat.html\n* http://j-faul.virtualave.net/\n* http://www.btinternet.com/~AnthonyJ/Atari/programming/avr_format.html\n* http://cui.unige.ch/OSG/info/AudioFormats/ap11.html\n* http://sswf.sourceforge.net/SWFalexref.html\n* http://www.geocities.com/xhelmboyx/quicktime/formats/qti-layout.txt\n* http://www-lehre.informatik.uni-osnabrueck.de/~fbstark/diplom/docs/swf/Flash_Uncovered.htm\n* http://developer.apple.com/quicktime/icefloe/dispatch012.html\n* http://www.csdn.net/Dev/Format/graphics/PCD.htm\n* http://tta.iszf.irk.ru/\n* http://www.atsc.org/standards/a_52a.pdf\n* http://www.alanwood.net/unicode/\n* http://www.freelists.org/archives/matroska-devel/07-2003/msg00010.html\n* http://www.its.msstate.edu/net/real/reports/config/tags.stats\n* http://homepages.slingshot.co.nz/~helmboy/quicktime/formats/qtm-layout.txt\n* http://brennan.young.net/Comp/LiveStage/things.html\n* http://www.multiweb.cz/twoinches/MP3inside.htm\n* http://www.geocities.co.jp/SiliconValley-Oakland/3664/alittle.html#GenreExtended\n* http://www.mactech.com/articles/mactech/Vol.06/06.01/SANENormalized/\n* http://www.unicode.org/unicode/faq/utf_bom.html\n* http://tta.corecodec.org/?menu=format\n* http://www.scvi.net/nsvformat.htm\n* http://pda.etsi.org/pda/queryform.asp\n* http://cpansearch.perl.org/src/RGIBSON/Audio-DSS-0.02/lib/Audio/DSS.pm\n* http://trac.musepack.net/trac/wiki/SV8Specification\n* http://wyday.com/cuesharp/specification.php\n* http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/Nikon.html\n* http://www.codeproject.com/Articles/8295/MPEG-Audio-Frame-Header\n* http://dsd-guide.com/sites/default/files/white-papers/DSFFileFormatSpec_E.pdf\n* https://fileformats.fandom.com/wiki/Torrent_file"
        },
        {
          "name": "structure.txt",
          "type": "blob",
          "size": 130.0107421875,
          "content": "/////////////////////////////////////////////////////////////////\n/// getID3() by James Heinrich <info@getid3.org>               //\n//  available at http://getid3.sourceforge.net                 //\n//            or https://www.getid3.org                        //\n//          also https://github.com/JamesHeinrich/getID3       //\n/////////////////////////////////////////////////////////////////\n//                                                             //\n// changelog.txt - part of getID3()                            //\n// See readme.txt for more details                             //\n//                                                            ///\n/////////////////////////////////////////////////////////////////\n\nWhat does the returned data structure look like?\n================================================\n\nHint: If you take a look at the nicely-formatted output of\n/demos/demo.browse.php you can generally see where the data you want\nis returned.\n\nNote that what is described below is only a rough guide to what data\nis actually returned by getID3(), since the actual data returned\ndepends entirely on what data is in your file, what type of file it\nis, what kind of data is in the tags, etc. In addition, some formats\n(Quicktime for example) use a freeform recursive structure that is\nimpossible to document completely.\n\nIn the vast majority of cases, all the data you'll need is located\nin the root of the array or the special arrays described below in\nSection 1 (['audio'], ['video'], ['tags_html'], ['replay_gain']).\n\nIt is suggested that for most applications you should use tag data\nfrom the root ['tags_html'] array, as this is the only location\nwhere data is stored in a consistant format: HTML-compatible\ncharacter entities (ie &#1234;) for characters outside the 0x20-0x7F\nrange (printable ISO-8859-1 characters). This data can be used as-is\nfor output in HTML, and can be converted to whatever character set\nyou wish to use if the output is not HTML.\n\nIf you want to merge all available tags (for example, ID3v2 + ID3v1)\ninto one array, you can call\ngetid3_lib::CopyTagsToComments($ThisFileInfo)\nand you'll then have ['comments'] and ['comments_html'] which are\nidentical to ['tags'] and ['tags_html'] except the array is one\ndimension shorter (no tag type array keys). For example, artist is:\n['tags_html']['id3v1']['artist'][0] or ['comments_html']['artist'][0]\n\n\nSome commonly-used information is found in these locations:\n\nFile type:        ['fileformat']                  // ex 'mp3'\nSong length:      ['playtime_string']             // ex '3:45'    (minutes:seconds)\n                  ['playtime_seconds']            // ex 225.13    (seconds)\nOverall bitrate:  ['bitrate']                     // ex 113485.71 (bits-per-second - divide by 1000 for kbps)\nAudio frequency:  ['audio']['sample_rate']        // ex 44100     (Hertz)\nArtist name:      ['comments_html']['artist'][0]  // ex 'Elvis'   (if CopyTagsToComments() is used - see above)\n                                                  //   more than one artist may be present, you may want to use implode:\n                                                  //   implode(' & ', ['comments_html']['artist'])\n\n\n/////////////////////////////////////////////////////////////////\n\narray() {\n                                         // SECTION 1: Values that are present for most or all file types\n\n    ['getID3version']=>string()          // version of getID3() that scanned this file (ex: '1.6.2')\n    ['error']=>array()                   // if present, contains one or more fatal error messages\n    ['warning']=>array()                 // if present, contains one or more non-fatal warning messages\n    ['exist']=>boolean()                 // does this file actually exist?\n    ['fileformat']=>string()             // one of the standard filetype abbreviations ('mp3', 'riff', 'quicktime', etc)\n    ['filename']=>string()               // filename only, no path\n    ['filenamepath']=>string()           // full filename with path\n    ['filepath']=>string()               // path to file, not including filename\n    ['filesize']=>integer()              // filesize in bytes\n    ['md5_file']=>string()               // md5 hash of entire file\n    ['md5_data']=>string()               // md5 hash of portion of file excluding prepended and appeneded metainformation tags (ID3, APE, etc) - may be identical to ['md5_file']\n    ['md5_data_source']=>string()        // md5 hash of original source file before compression (currently used by FLAC, OptimFROG, WavPack v4+)\n    ['sha1_file']=>string()              // sha1 hash of entire file\n    ['sha1_data']=>string()              // sha1 hash of portion of file excluding prepended and appeneded metainformation tags (ID3, APE, etc) - may be identical to ['md5_file']\n    ['avdataoffset']=>integer()          // offset in bytes where audio/video data starts and prepended tags end\n    ['avdataend']=>integer()             // offset in bytes where audio/video data ends and appended tags start\n    ['bitrate']=>double()                // average bitrate for entire file (all audio/video streams), in bits per second\n    ['mime_type']=>string()              // if present, MIME type of scanned file\n    ['playtime_seconds']=>double()       // playing time of file, in seconds\n    ['playtime_string']=>string()        // playing time of file, formatted as <minutes>:<seconds>\n    ['tags']=>array()                    // array of all metainformation tags present in file ('id3v1', 'id3v2', 'ape', 'riff', 'asf', etc)\n    ['audio']=>array() {\n        ['bitrate']=>double()            // average bitrate for audio portion of file (all audio streams), in bits per second\n        ['bitrate_mode']=>string()       // 'cbr' (Constant Bit Rate) or 'vbr' (Variable Bit Rate)\n        ['bits_per_sample']=>integer()   //\n        ['channelmode']=>string()        // 'mono' or 'stereo'\n        ['channels']=>integer()          // number of audio channels\n        ['codec']=>string()              // name of audio compression codec\n        ['compression_ratio']=>double()  // ratio of compressed byte size of audio to uncompressed size\n        ['dataformat']=>string()         // one of the standard filetype abbreviations ('mp3', 'wma', etc)\n        ['encoder']=>string()            // name and version of encoder used to create file, if known\n        ['lossless']=>boolean()          // true = lossless compression; false = lossy compression\n        ['sample_rate']=>integer()\n    }\n    ['video']=>array() {\n        ['bitrate']=>integer()           // average bitrate for video portion of file (all video streams), in bits per second\n        ['bitrate_mode']=>string()       // 'cbr' (Constant Bit Rate) or 'vbr' (Variable Bit Rate)\n        ['bits_per_sample']=>integer()   //\n        ['codec']=>string()              // name of video compression codec\n        ['compression_ratio']=>double()  // ratio of compressed byte size of video to uncompressed size\n        ['dataformat']=>string()         // one of the standard filetype abbreviations ('avi', 'mpeg', etc)\n        ['encoder']=>string()            // name and version of encoder used to create file, if known\n        ['frame_rate']=>double()         // frames per second\n        ['lossless']=>boolean()          // true = lossless compression; false = lossy compression\n        ['resolution_x']=>integer()      // horizontal dimension of video/image in pixels\n        ['resolution_y']=>integer()      // vertical dimension of video/image in pixels\n        ['pixel_aspect_ratio']=>double() // pixel display aspect ratio\n    }\n    ['tags']=>array() {                  // array of array of strings containing best data from any available metainformation tag (APE, ID3v2, ID3v1, Lyrics3, Vorbis, ASF, RIFF, Real, etc.)\n        [<key name>]=>array()            // <key name> can be anything, usually 'artist', 'title', etc. Contains array of one or more values (eg: multiple artists are possible)\n    }\n    ['tags_html']=>array() {             // identical to ['tags'], but with all entries converted to HTML entities as appropriate from various source encodings\n        [<key name>]=>array()            //\n    }\n    ['replay_gain']=>array() {           // replay gain information combined from any source that contains this information (LAME, ID3v2, Vorbis, APE, etc)\n        ['audiophile']=>array() {\n            ['adjustment']=>double()\n            ['originator']=>string()\n            ['peak']=>double()\n        }\n        ['radio']=>array() {\n            ['adjustment']=>double()\n            ['originator']=>string()\n            ['peak']=>double()\n        }\n    }\n\n\n                                         // SECTION 2: Values that are present for specific file types only\n\n    ['aac']=>array() {                            // AAC - Advanced Audio Coding / MPEG-4\n        ['bitrate_distribution']=>array()         //\n        ['header']=>array() {                     //\n            ['channel_configuration']=>integer()  //\n            ['crc_present']=>boolean()            //\n            ['home']=>boolean()                   //\n            ['layer']=>integer()                  //\n            ['mpeg_version']=>integer()           //\n            ['original']=>boolean()               //\n            ['private']=>boolean()                //\n            ['profile_id']=>integer()             //\n            ['profile_text']=>string()            //\n            ['sample_frequency']=>integer()       //\n            ['sample_frequency_index']=>integer() //\n            ['synch']=>integer()                  //\n        }                                         //\n        ['header_type']=>string()                 //\n    }                                             //\n                                                  //\n    ['ape']=>array()                      //\n    {                                     //\n        ['comments']=>array() {           // array of array of strings containing best data from any available metainformation tag (APE, ID3v2, ID3v1, Lyrics3, Vorbis, ASF, RIFF, Real, etc.)\n            [<key name>]=>array()         // <key name> can be anything, usually 'artist', 'title', etc. Contains array of one or more values (eg: multiple artists are possible)\n        }                                 //\n        ['footer']=>array()               //\n        {                                 //\n            ['flags']=>array()            //\n            ['raw']=>array()              //\n            ['tag_version']=>integer()    //\n        }                                 //\n        ['header']=>array()               //\n        {                                 //\n            ['flags']=>array()            //\n            ['raw']=>array()              //\n            ['tag_version']=>integer()    //\n        }                                 //\n        ['items']=>array() {              // array of array of strings containing metainformation\n            [<key name>]=>array() {       // <key name> can be anything, usually 'artist', 'title', etc. Contains array of one or more values (eg: multiple artists are possible)\n                ['data']=>array() {       // array of one or more Unicode values\n                ['data_ascii']=>array() { // array of values converted approximately from Unicode to ASCII\n                ['flags']=>array()        //\n            }                             //\n        }                                 //\n        ['tag_offset_end']=>integer()     //\n        ['tag_offset_start']=>integer()   //\n    }                                     //\n\n\n    ['asf']=>array() {                               // ASF - Advanced Streaming Format (ASF, Windows Media Audio (WMA), Windows Media Video (WMV))\n        ['audio_media']=>array() {                   //\n            [<x>]=>array() {                         //\n                ['bitrate']=>integer()               //\n                ['bits_per_sample']=>integer()       //\n                ['channels']=>integer()              //\n                ['codec']=>string()                  //\n                ['codec_data']=>string()             //\n                ['codec_data_size']=>integer()       //\n                ['raw']=>array() {                   //\n                    ['nAvgBytesPerSec']=>integer()   //\n                    ['wBitsPerSample']=>integer()    //\n                    ['nBlockAlign']=>integer()       //\n                    ['nChannels']=>integer()         //\n                    ['nSamplesPerSec']=>integer()    //\n                    ['wFormatTag']=>integer()        //\n                }                                    //\n                ['sample_rate']=>integer()           //\n            }                                        //\n        }                                            //\n        ['codec_list']=>array() {                    //\n            ['codec_entries']=>array() {             //\n                [<x>]=>array() {                     //\n                    ['description']=>string()        //\n                    ['description_ascii']=>string()  //\n                    ['information']=>string()        //\n                    ['name']=>string()               //\n                    ['name_ascii']=>string()         //\n                    ['type']=>string()               //\n                    ['type_raw']=>integer()          //\n                }                                    //\n            }                                        //\n            ['codec_entries_count']=>integer()       //\n            ['objectid']=>string()                   //\n            ['objectid_guid']=>string()              //\n            ['objectsize']=>integer()                //\n            ['reserved']=>string()                   //\n            ['reserved_guid']=>string()              //\n        }                                            //\n        ['comments']=>array() {                      // array of comment values, derived from ['content_description']\n            ['album']=>string()                      //\n            ['artist']=>string()                     //\n            ['comment']=>string()                    //\n            ['copyright']=>string()                  //\n            ['genre']=>string()                      //\n            ['title']=>string()                      //\n            ['track']=>string()                      //\n            ['year']=>string()                       //\n        }                                            //\n        ['content_description']=>array() {           // raw values - should use values from ['comments'] instead\n            ['author']=>string()                     //\n            ['author_ascii']=>string()               //\n            ['author_length']=>integer()             //\n            ['copyright']=>string()                  //\n            ['copyright_ascii']=>string()            //\n            ['copyright_length']=>integer()          //\n            ['description']=>string()                //\n            ['description_ascii']=>string()          //\n            ['description_length']=>integer()        //\n            ['objectid']=>string()                   //\n            ['objectid_guid']=>string()              //\n            ['objectsize']=>integer()                //\n            ['rating']=>string()                     //\n            ['rating_ascii']=>string()               //\n            ['rating_length']=>integer()             //\n            ['title']=>string()                      //\n            ['title_ascii']=>string()                //\n            ['title_length']=>integer()              //\n        }                                            //\n        ['data_object']=>array() {                   //\n            ['fileid']=>string()                     //\n            ['fileid_guid']=>string()                //\n            ['objectid']=>string()                   //\n            ['objectid_guid']=>string()              //\n            ['objectsize']=>integer()                //\n            ['reserved']=>integer()                  //\n            ['total_data_packets']=>integer()        //\n        }                                            //\n        ['extended_content_description']=>array() {  //\n            ['content_descriptors']=>array() {       //\n                [<x>]=>array() {                     //\n                    ['name']=>string()               //\n                    ['name_ascii']=>string()         //\n                    ['name_length']=>integer()       //\n                    ['value']=>string()              //\n                    ['value_ascii']=>string()        //\n                    ['value_length']=>integer()      //\n                    ['value_type']=>integer()        //\n                }                                    //\n            }                                        //\n            ['content_descriptors_count']=>integer() //\n            ['objectid']=>string()                   //\n            ['objectid_guid']=>string()              //\n            ['objectsize']=>integer()                //\n        }                                            //\n        ['file_properties_object']=>array() {        //\n            ['creation_date']=>double()              //\n            ['creation_date_unix']=>double()         //\n            ['data_packets']=>integer()              //\n            ['fileid']=>string()                     //\n            ['fileid_guid']=>string()                //\n            ['filesize']=>integer()                  //\n            ['flags']=>array() {                     //\n                ['broadcast']=>boolean()             //\n                ['seekable']=>boolean()              //\n            }                                        //\n            ['flags_raw']=>integer()                 //\n            ['max_bitrate']=>integer()               //\n            ['max_packet_size']=>integer()           //\n            ['min_packet_size']=>integer()           //\n            ['objectid']=>string()                   //\n            ['objectid_guid']=>string()              //\n            ['objectsize']=>integer()                //\n            ['play_duration']=>double()              //\n            ['preroll']=>integer()                   //\n            ['send_duration']=>double()              //\n        }                                            //\n        ['header_extension_object']=>array() {       //\n            ['extension_data']=>integer()            //\n            ['extension_data_size']=>integer()       //\n            ['objectid']=>string()                   //\n            ['objectid_guid']=>string()              //\n            ['objectsize']=>integer()                //\n            ['reserved_1']=>string()                 //\n            ['reserved_1_guid']=>string()            //\n            ['reserved_2']=>integer()                //\n        }                                            //\n        ['header_object']=>array() {                 //\n            ['headerobjects']=>integer()             //\n            ['objectid']=>string()                   //\n            ['objectid_guid']=>string()              //\n            ['objectsize']=>integer()                //\n            ['reserved1']=>integer()                 //\n            ['reserved2']=>integer()                 //\n        }                                            //\n        ['marker_object']=>array() {                 //\n            ['markers_count']=>integer()             //\n            ['objectid']=>string()                   //\n            ['objectid_guid']=>string()              //\n            ['objectsize']=>integer()                //\n            ['reserved']=>string()                   //\n            ['reserved_2']=>integer()                //\n            ['reserved_guid']=>string()              //\n        }                                            //\n        ['stream_bitrate_properties']=>array() {     //\n            ['bitrate_records']=>array() {           //\n                [<x>]=>array() {                     //\n                    ['bitrate']=>integer()           //\n                    ['flags_raw']=>integer()         //\n                    ['flags']=>array() {             //\n                        ['stream_number']=>integer() //\n                    }                                //\n                }                                    //\n            }                                        //\n            ['bitrate_records_count']=>integer()     //\n            ['objectid']=>string()                   //\n            ['objectid_guid']=>string()              //\n            ['objectsize']=>integer()                //\n        }                                            //\n        ['stream_properties_object']=>array() {      //\n            [<x>]=>array() {                         //\n                ['error_correct_data']=>string()     //\n                ['error_correct_guid']=>string()     //\n                ['error_correct_type']=>string()     //\n                ['error_data_length']=>integer()     //\n                ['flags_raw']=>integer()             //\n                ['flags']=>array() {                 //\n                    ['encrypted']=>boolean()         //\n                }                                    //\n                ['objectid']=>string()               //\n                ['objectid_guid']=>string()          //\n                ['objectsize']=>integer()            //\n                ['stream_type']=>string()            //\n                ['stream_type_guid']=>string()       //\n                ['time_offset']=>integer()           //\n                ['type_data_length']=>integer()      //\n                ['type_specific_data']=>string()     //\n            }                                        //\n        }                                            //\n        ['video_media']=>array() {                   //\n            [<x>]=>array() {                         //\n                ['flags']=>integer()                 //\n                ['format_data']=>array() {           //\n                    ['bits_per_pixel']=>integer()    //\n                    ['codec']=>string()              //\n                    ['codec_data']=>boolean()        //\n                    ['codec_fourcc']=>string()       //\n                    ['colors_important']=>integer()  //\n                    ['colors_used']=>integer()       //\n                    ['format_data_size']=>integer()  //\n                    ['horizontal_pels']=>integer()   //\n                    ['image_height']=>integer()      //\n                    ['image_size']=>integer()        //\n                    ['image_width']=>integer()       //\n                    ['reserved']=>integer()          //\n                    ['vertical_pels']=>integer()     //\n                }                                    //\n                ['format_data_size']=>integer()      //\n                ['image_height']=>integer()          //\n                ['image_width']=>integer()           //\n            }                                        //\n        }                                            //\n    }                                                //\n\n\n    ['au']=>array() {                       // AU - Next/Sun AUdio format\n        ['bits_per_sample']=>integer()      //\n        ['channels']=>integer()             //\n        ['comment']=>string()               //\n        ['data_format']=>string()           //\n        ['data_format_id']=>integer()       //\n        ['data_size']=>integer()            //\n        ['header_length']=>integer()        //\n        ['sample_rate']=>integer()          //\n        ['used_bits_per_sample']=>integer() //\n    }                                       //\n\n\n    ['bmp']=>array() {                          // BMP - OS/2 or Windows BitMaP\n        ['header']=>array() {                   //\n            ['compression']=>string()           //\n            ['raw']=>array() {                  //\n                ['bits_per_pixel']=>integer()   //\n                ['bmp_data_size']=>integer()    //\n                ['colors_important']=>integer() //\n                ['colors_used']=>integer()      //\n                ['compression']=>integer()      //\n                ['data_offset']=>integer()      //\n                ['filesize']=>integer()         //\n                ['header_size']=>integer()      //\n                ['height']=>integer()           //\n                ['identifier']=>string()        //\n                ['planes']=>integer()           //\n                ['resolution_h']=>integer()     //\n                ['resolution_v']=>integer()     //\n                ['width']=>integer()            //\n            }                                   //\n        }                                       //\n        ['type_os']=>string()                   //\n        ['type_version']=>integer()             //\n    }                                           //\n\n\n    ['bonk']=>array() {                       // BONK - lossy/lossless audio compression (www.bonkenc.org)\n        ['BONK']=>array() {                   //\n            ['channels']=>integer()           //\n            ['downsampling_ratio']=>integer() //\n            ['joint_stereo']=>boolean()       //\n            ['lossless']=>boolean()           //\n            ['number_samples']=>integer()     //\n            ['number_taps']=>integer()        //\n            ['offset']=>integer()             //\n            ['sample_rate']=>integer()        //\n            ['samples_per_packet']=>integer() //\n            ['size']=>integer()               //\n            ['version']=>integer()            //\n        }                                     //\n        ['INFO']=>array() {                   //\n            ['size']=>integer()               //\n            ['offset']=>integer()             //\n            ['version']=>integer()            //\n            [<x>]=>array() {                  //\n                ['nextbit']=>integer()        //\n                ['offset']=>integer()         //\n            }                                 //\n        }                                     //\n        ['dataend']=>integer()                //\n        ['dataoffset']=>integer()             //\n    }                                         //\n\n\n    ['flac']=>array() {                         // FLAC - Free Lossless Audio Compressor\n        ['SEEKTABLE']=>array() {                //\n            [<x>]=>array() {                    //\n                ['offset']=>integer()           //\n                ['samples']=>integer()          //\n            }                                   //\n            ['placeholders']=>integer()         //\n            ['raw']=>array() {                  //\n                ['block_data']=>string()        //\n                ['block_length']=>integer()     //\n                ['block_type']=>integer()       //\n                ['block_type_text']=>string()   //\n                ['last_meta_block']=>boolean()  //\n                ['offset']=>integer()           //\n            }                                   //\n        }                                       //\n        ['STREAMINFO']=>array() {               //\n            ['audio_signature']=>string()       //\n            ['bits_per_sample']=>integer()      //\n            ['channels']=>integer()             //\n            ['max_block_size']=>integer()       //\n            ['max_frame_size']=>integer()       //\n            ['min_block_size']=>integer()       //\n            ['min_frame_size']=>integer()       //\n            ['raw']=>array() {                  //\n                ['block_data']=>string()        //\n                ['block_length']=>integer()     //\n                ['block_type']=>integer()       //\n                ['block_type_text']=>string()   //\n                ['last_meta_block']=>boolean()  //\n                ['offset']=>integer()           //\n            }                                   //\n            ['sample_rate']=>integer()          //\n            ['samples_stream']=>integer()       //\n        }                                       //\n        ['VORBIS_COMMENT']=>array() {           //\n            ['raw']=>array() {                  //\n                ['block_data']=>string()        //\n                ['block_length']=>integer()     //\n                ['block_type']=>integer()       //\n                ['block_type_text']=>string()   //\n                ['last_meta_block']=>boolean()  //\n                ['offset']=>integer()           //\n            }                                   //\n        }                                       //\n        ['compressed_audio_bytes']=>integer()   //\n        ['compression_ratio']=>double()         //\n        ['uncompressed_audio_bytes']=>integer() //\n    }                                           //\n\n\n    ['gif']=>array() {                             // GIF - Graphics Interchange Format\n        ['global_color_table']=>array() {          //\n            [<x>]=>integer()                       //\n        }                                          //\n        ['header']=>array() {                      //\n            ['bits_per_pixel']=>integer()          //\n            ['flags']=>array() {                   //\n                ['global_color_sorted']=>boolean() //\n                ['global_color_table']=>boolean()  //\n            }                                      //\n            ['global_color_size']=>integer()       //\n            ['raw']=>array() {                     //\n                ['aspect_ratio']=>integer()        //\n                ['bg_color_index']=>integer()      //\n                ['flags']=>integer()               //\n                ['height']=>integer()              //\n                ['identifier']=>string()           //\n                ['version']=>string()              //\n                ['width']=>integer()               //\n            }                                      //\n        }                                          //\n        ['version']=>string()                      //\n    }                                              //\n\n\n    ['id3v1']=>array() {                // ID3v1\n        ['album']=>string()             //\n        ['artist']=>string()            //\n        ['comment']=>string()           //\n        ['genre']=>string()             //\n        ['genreid']=>integer()          //\n        ['title']=>string()             //\n        ['track']=>integer()            //\n        ['year']=>string()              //\n        ['padding_valid']=>boolean()    //\n        ['comments']=>array()           //\n        ['tag_offset_start']=>integer() //\n        ['tag_offset_end']=>integer()   //\n    }                                   //\n\n\n    ['id3v2']=>array() {                                 // ID3v2 - www.id3.org\n        [<frame name>]=>array() {                        // <frame name> can be any of the 4-character (3-character in ID3v2.2) frame names allowed in the ID3v2 spec. Exact contents of returned array data varies with frame type.\n            [<x>]=>array() {                             // some frames types allow multiple values ('COMM' for example), others do not and do not have this array level\n                ['asciidata']=>boolean()                 //\n                ['asciidescription']=>string()           //\n                ['data']=>boolean()                      //\n                ['datalength']=>integer()                //\n                ['dataoffset']=>integer()                //\n                ['description']=>string()                //\n                ['encoding']=>string()                   //\n                ['encodingid']=>integer()                //\n                ['flags']=>array() {                     //\n                    ['Encryption']=>boolean()            //\n                    ['FileAlterPreservation']=>boolean() //\n                    ['GroupingIdentity']=>boolean()      //\n                    ['ReadOnly']=>boolean()              //\n                    ['TagAlterPreservation']=>boolean()  //\n                    ['compression']=>boolean()           //\n                }                                        //\n                ['framenamelong']=>string()              //\n                ['language']=>string()                   //\n                ['languagename']=>string()               //\n            }                                            //\n        }                                                //\n        ['comments']=>array() {                          // array of array of strings containing best data from any available metainformation tag (APE, ID3v2, ID3v1, Lyrics3, Vorbis, ASF, RIFF, Real, etc.)\n            [<key name>]=>array()                        // <key name> can be anything, usually 'artist', 'title', etc. Contains array of one or more values (eg: multiple artists are possible)\n        }                                                //\n        ['flags']=>array() {                             //\n            ['experim']=>string()                        //\n            ['exthead']=>string()                        //\n            ['unsynch']=>string()                        //\n        }                                                //\n        ['header']=>boolean()                            //\n        ['headerlength']=>integer()                      //\n        ['majorversion']=>integer()                      //\n        ['minorversion']=>integer()                      //\n        ['padding']=>array() {                           //\n            ['length']=>integer()                        //\n            ['start']=>integer()                         //\n            ['valid']=>boolean()                         //\n        }                                                //\n        ['tag_offset_end']=>integer()                    //\n        ['tag_offset_start']=>integer()                  //\n    }                                                    //\n\n\n    ['iso']=>array() {                                           // ISO-9660 - CD-ROM Image\n        ['directories']=>array() {                               //\n            [<x>]=>array() {                                     //\n                [<x>]=>array() {                                 //\n                    ['file_flags']=>array() {                    //\n                        ['associated']=>boolean()                //\n                        ['directory']=>boolean()                 //\n                        ['extended']=>boolean()                  //\n                        ['hidden']=>boolean()                    //\n                        ['multiple']=>boolean()                  //\n                        ['permissions']=>boolean()               //\n                    }                                            //\n                    ['file_identifier_ascii']=>string()          //\n                    ['filename']=>string()                       //\n                    ['filesize']=>integer()                      //\n                    ['offset_bytes']=>integer()                  //\n                    ['raw']=>array() {                           //\n                        ['extended_attribute_length']=>integer() //\n                        ['file_flags']=>integer()                //\n                        ['file_identifier']=>string()            //\n                        ['file_identifier_length']=>integer()    //\n                        ['file_unit_size']=>integer()            //\n                        ['filesize']=>integer()                  //\n                        ['interleave_gap_size']=>integer()       //\n                        ['length']=>integer()                    //\n                        ['offset_logical']=>integer()            //\n                        ['recording_date_time']=>string()        //\n                        ['volume_sequence_number']=>integer()    //\n                    }                                            //\n                    ['recording_timestamp']=>integer()           //\n                }                                                //\n            }                                                    //\n        }                                                        //\n        ['files']=>array() {                                     // multidimensional tree-structure array listing of all files and directories in image\n            [<directory name>]=>array()                          // entries of type array are directories (key is directory name), may contain files and/or other subdirectories\n            [<file name>]=>integer()                             // entries of type integer are files (key is file name, value is file size in bytes)\n        }                                                        //\n        ['path_table']=>array() {                                //\n            ['directories']=>array() {                           //\n                [<x>]=>array() {                                 //\n                    ['extended_length']=>integer()               //\n                    ['full_path']=>string()                      //\n                    ['length']=>integer()                        //\n                    ['location_bytes']=>integer()                //\n                    ['location_logical']=>integer()              //\n                    ['name']=>string()                           //\n                    ['name_ascii']=>string()                     //\n                    ['parent_directory']=>integer()              //\n                }                                                //\n            }                                                    //\n            ['offset']=>integer()                                //\n            ['raw']=>string()                                    //\n        }                                                        //\n        ['primary_volume_descriptor']=>array() {                 //\n            ['abstract_file_identifier']=>string()               //\n            ['application_identifier']=>string()                 //\n            ['bibliographic_file_identifier']=>string()          //\n            ['copyright_file_identifier']=>string()              //\n            ['data_preparer_identifier']=>string()               //\n            ['offset']=>integer()                                //\n            ['publisher_identifier']=>string()                   //\n            ['raw']=>array() {                                   //\n                ['abstract_file_identifier']=>string()           //\n                ['application_data']=>string()                   //\n                ['application_identifier']=>string()             //\n                ['bibliographic_file_identifier']=>string()      //\n                ['copyright_file_identifier']=>string()          //\n                ['data_preparer_identifier']=>string()           //\n                ['file_structure_version']=>integer()            //\n                ['logical_block_size']=>integer()                //\n                ['path_table_l_location']=>integer()             //\n                ['path_table_l_opt_location']=>integer()         //\n                ['path_table_m_location']=>integer()             //\n                ['path_table_m_opt_location']=>integer()         //\n                ['path_table_size']=>integer()                   //\n                ['publisher_identifier']=>string()               //\n                ['root_directory_record']=>string()              //\n                ['standard_identifier']=>string()                //\n                ['system_identifier']=>string()                  //\n                ['unused_1']=>string()                           //\n                ['unused_2']=>string()                           //\n                ['unused_3']=>string()                           //\n                ['unused_4']=>integer()                          //\n                ['volume_creation_date_time']=>string()          //\n                ['volume_descriptor_type']=>integer()            //\n                ['volume_descriptor_version']=>integer()         //\n                ['volume_effective_date_time']=>string()         //\n                ['volume_expiration_date_time']=>string()        //\n                ['volume_identifier']=>string()                  //\n                ['volume_modification_date_time']=>string()      //\n                ['volume_sequence_number']=>integer()            //\n                ['volume_set_identifier']=>string()              //\n                ['volume_set_size']=>integer()                   //\n                ['volume_space_size']=>integer()                 //\n            }                                                    //\n            ['system_identifier']=>string()                      //\n            ['volume_creation_date_time']=>integer()             //\n            ['volume_effective_date_time']=>boolean()            //\n            ['volume_expiration_date_time']=>boolean()           //\n            ['volume_identifier']=>string()                      //\n            ['volume_modification_date_time']=>integer()         //\n            ['volume_set_identifier']=>string()                  //\n        }                                                        //\n        ['supplementary_volume_descriptor']=>array() {           //\n            ['abstract_file_identifier']=>string()               //\n            ['application_identifier']=>string()                 //\n            ['bibliographic_file_identifier']=>string()          //\n            ['copyright_file_identifier']=>string()              //\n            ['data_preparer_identifier']=>string()               //\n            ['offset']=>integer()                                //\n            ['publisher_identifier']=>string()                   //\n            ['raw']=>array() {                                   //\n                ['abstract_file_identifier']=>string()           //\n                ['application_data']=>string()                   //\n                ['application_identifier']=>string()             //\n                ['bibliographic_file_identifier']=>string()      //\n                ['copyright_file_identifier']=>string()          //\n                ['data_preparer_identifier']=>string()           //\n                ['file_structure_version']=>integer()            //\n                ['logical_block_size']=>integer()                //\n                ['path_table_l_location']=>integer()             //\n                ['path_table_l_opt_location']=>integer()         //\n                ['path_table_m_location']=>integer()             //\n                ['path_table_m_opt_location']=>integer()         //\n                ['path_table_size']=>integer()                   //\n                ['publisher_identifier']=>string()               //\n                ['root_directory_record']=>string()              //\n                ['standard_identifier']=>string()                //\n                ['system_identifier']=>string()                  //\n                ['unused_1']=>string()                           //\n                ['unused_2']=>string()                           //\n                ['unused_3']=>string()                           //\n                ['unused_4']=>integer()                          //\n                ['volume_creation_date_time']=>string()          //\n                ['volume_descriptor_type']=>integer()            //\n                ['volume_descriptor_version']=>integer()         //\n                ['volume_effective_date_time']=>string()         //\n                ['volume_expiration_date_time']=>string()        //\n                ['volume_identifier']=>string()                  //\n                ['volume_modification_date_time']=>string()      //\n                ['volume_sequence_number']=>integer()            //\n                ['volume_set_identifier']=>string()              //\n                ['volume_set_size']=>integer()                   //\n                ['volume_space_size']=>integer()                 //\n            }                                                    //\n            ['system_identifier']=>string()                      //\n            ['volume_creation_date_time']=>integer()             //\n            ['volume_effective_date_time']=>boolean()            //\n            ['volume_expiration_date_time']=>boolean()           //\n            ['volume_identifier']=>string()                      //\n            ['volume_modification_date_time']=>integer()         //\n            ['volume_set_identifier']=>string()                  //\n        }                                                        //\n    }                                                            //\n\n\n    ['jpg']=>array() {    // JPEG - still image\n        ['exif']=>array() // data returned from PHP's exif_read_data() function\n    }                     //\n\n\n    ['la']=>array() {                        // LA - Lossless Audio (www.lossless-audio.com)\n        ['raw']=>array() {\n            ['format']=>integer()            //\n            ['flags']=>integer()             //\n        }                                    //\n        ['flags']=>array() {                 //\n            ['seekable']=>boolean()          //\n            ['high_compression']=>boolean()  //\n        }                                    //\n        ['bits_per_sample']=>integer()       //\n        ['bytes_per_sample']=>integer()      //\n        ['bytes_per_second']=>integer()      //\n        ['channels']=>integer()              //\n        ['compression_ratio']=>double()      //\n        ['format_size']=>integer()           //\n        ['header_size']=>integer()           //\n        ['original_crc']=>double()           //\n        ['sample_rate']=>integer()           //\n        ['samples']=>integer()               //\n        ['uncompressed_size']=>integer()     //\n        ['version']=>double()                //\n        ['version_major']=>integer()         //\n        ['version_minor']=>integer()         //\n        ['footerstart']=>double()            //\n    }\n\n\n    ['lpac']=>array() {                               // LPAC - Lossless Predictive Audio Compressor\n        ['block_length']=>integer()                   //\n        ['file_version']=>integer()                   //\n        ['flags']=>array() {                          //\n            ['16_bit']=>boolean()                     //\n            ['24_bit']=>boolean()                     //\n            ['adaptive_prediction_order']=>boolean()  //\n            ['adaptive_quantization']=>boolean()      //\n            ['fast_compress']=>boolean()              //\n            ['is_wave']=>boolean()                    //\n            ['joint_stereo']=>boolean()               //\n            ['max_prediction_order']=>integer()       //\n            ['quantization']=>integer()               //\n            ['random_access']=>boolean()              //\n            ['stereo']=>boolean()                     //\n        }                                             //\n        ['raw']=>array() {                            //\n            ['audio_type']=>integer()                 //\n            ['parameters']=>double()                  //\n        }                                             //\n        ['total_samples']=>integer()                  //\n    }                                                 //\n\n\n    ['lyrics3']=>array() {                // Lyrics3 - metainformation tags\n        ['comments']=>array() {           //\n            ['album']=>string()           //\n            ['artist']=>string()          //\n            ['author']=>string()          //\n            ['comment']=>string()         //\n            ['title']=>string()           //\n        }                                 //\n        ['flags']=>array() {              //\n            ['lyrics']=>boolean()         //\n            ['timestamps']=>boolean()     //\n        }                                 //\n        ['images']=>array() {             //\n            [<x>]=>array() {              //\n                ['description']=>string() //\n                ['filename']=>string()    //\n                ['timestamp']=>integer()  //\n            }                             //\n        }                                 //\n        ['raw']=>array() {                //\n            ['offset_start']=>integer()   //\n            ['offset_end']=>integer()     //\n            ['AUT']=>string()             //\n            ['EAL']=>string()             //\n            ['EAR']=>string()             //\n            ['ETT']=>string()             //\n            ['IMG']=>string()             //\n            ['IND']=>string()             //\n            ['INF']=>string()             //\n            ['LYR']=>string()             //\n            ['lyrics3tagsize']=>integer() //\n            ['lyrics3version']=>integer() //\n            ['unparsed']=>string()        //\n        }                                 //\n        ['synchedlyrics']=>array() {      //\n            [<x>]=>string()               //\n        }                                 //\n        ['unsynchedlyrics']=>string()     //\n    }                                     //\n\n\n    ['midi']=>array() {                         // MIDI (Musical Instrument Digital Interface) - sequenced music\n        ['comments']=>array() {                 //\n            ['comment']=>string()               //\n            ['copyright']=>string()             //\n        }                                       //\n        ['keysignature']=>array() {             //\n            [<x>]=>string()                     //\n        }                                       //\n        ['raw']=>array() {                      //\n            ['events']=>array() {               //\n                [<x>]=>array() {                //\n                    [<x>]=>array() {            //\n                        ['us_qnote']=>integer() //\n                    }                           //\n                }                               //\n            }                                   //\n            ['fileformat']=>integer()           //\n            ['headersize']=>integer()           //\n            ['ticksperqnote']=>integer()        //\n            ['track']=>array() {                //\n                [<x>]=>array() {                //\n                    ['instrument']=>string()    //\n                    ['instrumentid']=>integer() //\n                    ['name']=>string()          //\n                }                               //\n            }                                   //\n            ['tracks']=>integer()               //\n        }                                       //\n        ['timesignature']=>array() {            //\n            [<x>]=>string()                     //\n        }                                       //\n        ['totalticks']=>integer()               //\n    }                                           //\n\n\n    ['monkeys_audio']=>array() {                // Monkey's Audio - lossless audio compression\n        ['bitrate']=>double()                   //\n        ['bits_per_sample']=>integer()          //\n        ['channels']=>integer()                 //\n        ['compressed_size']=>integer()          //\n        ['compression']=>string()               //\n        ['compression_ratio']=>double()         //\n        ['flags']=>array() {                    //\n            ['24-bit']=>boolean()               //\n            ['8-bit']=>boolean()                //\n            ['crc-32']=>boolean()               //\n            ['no_wav_header']=>boolean()        //\n            ['peak_level']=>boolean()           //\n            ['seek_elements']=>boolean()        //\n        }                                       //\n        ['frames']=>integer()                   //\n        ['peak_level']=>integer()               //\n        ['peak_ratio']=>double()                //\n        ['playtime']=>double()                  //\n        ['raw']=>array() {                      //\n            ['header_tag']=>string()            //\n            ['nChannels']=>integer()            //\n            ['nCompressionLevel']=>integer()    //\n            ['nFinalFrameSamples']=>integer()   //\n            ['nFormatFlags']=>integer()         //\n            ['nPeakLevel']=>integer()           //\n            ['nSampleRate']=>integer()          //\n            ['nSeekElements']=>integer()        //\n            ['nTotalFrames']=>integer()         //\n            ['nVersion']=>integer()             //\n            ['nWAVHeaderBytes']=>integer()      //\n            ['nWAVTerminatingBytes']=>integer() //\n        }                                       //\n        ['sample_rate']=>integer()              //\n        ['samples']=>integer()                  //\n        ['samples_per_frame']=>integer()        //\n        ['uncompressed_size']=>integer()        //\n        ['version']=>double()                   //\n    }                                           //\n\n\n    ['mpc']=>array() {                          // MPC (Musepack) - lossy audio compression\n        ['header']=>array() {                   //\n            ['album_gain_db']=>integer()        //\n            ['album_peak']=>integer()           //\n            ['album_peak_db']=>boolean()        //\n            ['title_gain_db']=>integer()        //\n            ['title_peak']=>integer()           //\n            ['title_peak_db']=>boolean()        //\n            ['begin_loud']=>boolean()           //\n            ['end_loud']=>boolean()             //\n            ['encoder_version']=>string()       //\n            ['frame_count']=>integer()          //\n            ['intensity_stereo']=>boolean()     //\n            ['last_frame_length']=>integer()    //\n            ['max_level']=>integer()            //\n            ['max_subband']=>integer()          //\n            ['mid_side_stereo']=>boolean()      //\n            ['profile']=>string()               //\n            ['sample_rate']=>integer()          //\n            ['samples']=>integer()              //\n            ['size']=>integer()                 //\n            ['stream_major_version']=>integer() //\n            ['stream_minor_version']=>integer() //\n            ['true_gapless']=>boolean()         //\n            ['raw']=>array() {                  //\n                ['album_gain']=>integer()       //\n                ['album_peak']=>integer()       //\n                ['encoder_version']=>integer()  //\n                ['preamble']=>string()          //\n                ['profile']=>integer()          //\n                ['sample_rate']=>integer()      //\n                ['title_gain']=>integer()       //\n                ['title_peak']=>integer()       //\n            }                                   //\n        }                                       //\n    }                                           //\n\n\n    ['mpeg']=>array() {                                // MPEG (Motion Picture Experts Group) - MPEG video and/or MPEG audio (MP3/MP2/MP1)\n        ['audio']=>array() {                           //\n            ['LAME']=>array() {                        //\n                ['RGAD']=>array() {                    //\n                    ['peak_amplitude']=>double()       //\n                }                                      //\n                ['ath_type']=>integer()                //\n                ['audio_bytes']=>integer()             //\n                ['bitrate_min']=>integer()             //\n                ['encoder_delay']=>integer()           //\n                ['encoding_flags']=>array() {          //\n                    ['nogap_next']=>boolean()          //\n                    ['nogap_prev']=>boolean()          //\n                    ['nspsytune']=>boolean()           //\n                    ['nssafejoint']=>boolean()         //\n                }                                      //\n                ['end_padding']=>integer()             //\n                ['lame_tag_crc']=>integer()            //\n                ['lowpass_frequency']=>integer()       //\n                ['mp3_gain_db']=>double()              //\n                ['mp3_gain_factor']=>double()          //\n                ['mp3_gain_raw']=>integer()            //\n                ['music_crc']=>integer()               //\n                ['noise_shaping']=>integer()           //\n                ['noise_shaping_raw']=>integer()       //\n                ['not_optimal_quality']=>boolean()     //\n                ['not_optimal_quality_raw']=>integer() //\n                ['preset_used_id']=>integer()          //\n                ['short_version']=>string()            // ex: \"LAME 3.93\"\n                ['long_version']=>string()             // (pre-v3.90 only) ex: \"LAME 3.88 (alpha)\"\n                ['source_sample_freq']=>string()       //\n                ['source_sample_freq_raw']=>integer()  //\n                ['stereo_mode']=>string()              //\n                ['stereo_mode_raw']=>integer()         //\n                ['surround_info']=>string()            //\n                ['surround_info_id']=>integer()        //\n                ['tag_revision']=>integer()            //\n                ['vbr_method']=>string()               //\n                ['vbr_method_raw']=>integer()          //\n            }                                          //\n            ['VBR_bitrate']=>double()                  //\n            ['VBR_bytes']=>integer()                   //\n            ['VBR_frames']=>integer()                  //\n            ['VBR_method']=>string()                   //\n            ['VBR_scale']=>integer()                   //\n            ['bitrate']=>integer()                     //\n            ['bitrate_distribution']=>array() {        //\n                ['free']=>integer()                    //\n                ['8']=>integer()                       //\n                ['16']=>integer()                      //\n                ['24']=>integer()                      //\n                ['32']=>integer()                      //\n                ['40']=>integer()                      //\n                ['48']=>integer()                      //\n                ['56']=>integer()                      //\n                ['64']=>integer()                      //\n                ['80']=>integer()                      //\n                ['96']=>integer()                      //\n                ['112']=>integer()                     //\n                ['128']=>integer()                     //\n                ['144']=>integer()                     //\n                ['160']=>integer()                     //\n            }                                          //\n            ['bitrate_mode']=>string()                 //\n            ['channelmode']=>string()                  //\n            ['channels']=>integer()                    //\n            ['copyright']=>boolean()                   //\n            ['crc']=>integer()                         //\n            ['emphasis']=>string()                     //\n            ['frame_count']=>integer()                 //\n            ['framelength']=>integer()                 //\n            ['layer']=>integer()                       //\n            ['modeextension']=>string()                //\n            ['original']=>boolean()                    //\n            ['padding']=>boolean()                     //\n            ['private']=>boolean()                     //\n            ['protection']=>boolean()                  //\n            ['raw']=>array() {                         //\n                ['bitrate']=>integer()                 //\n                ['channelmode']=>integer()             //\n                ['copyright']=>integer()               //\n                ['emphasis']=>integer()                //\n                ['layer']=>integer()                   //\n                ['modeextension']=>integer()           //\n                ['original']=>integer()                //\n                ['padding']=>integer()                 //\n                ['private']=>integer()                 //\n                ['protection']=>integer()              //\n                ['sample_rate']=>integer()             //\n                ['synch']=>integer()                   //\n                ['version']=>integer()                 //\n            }                                          //\n            ['sample_rate']=>integer()                 //\n            ['stereo_distribution']=>array() {         //\n                ['dual channel']=>integer()            //\n                ['joint stereo']=>integer()            //\n                ['mono']=>integer()                    //\n                ['stereo']=>integer()                  //\n            }                                          //\n            ['toc']=>array() {                         //\n                [<x>]=>integer()                       //\n            }                                          //\n            ['version']=>string()                      //\n            ['version_distribution']=>array() {        //\n                [<x>]=>integer()                       //\n                [<x>]=>integer()                       //\n                ['2.5']=>integer()                     //\n            }                                          //\n            ['xing_flags']=>array() {                  //\n                ['bytes']=>boolean()                   //\n                ['frames']=>boolean()                  //\n                ['toc']=>boolean()                     //\n                ['vbr_scale']=>boolean()               //\n            }                                          //\n            ['xing_flags_raw']=>string()               //\n        }                                              //\n        ['video']=>array() {                           //\n            ['bitrate']=>integer()                     //\n            ['bitrate_mode']=>string()                 //\n            ['frame_rate']=>double()                   //\n            ['framesize_horizontal']=>integer()        //\n            ['framesize_vertical']=>integer()          //\n            ['pixel_aspect_ratio']=>double()           //\n            ['pixel_aspect_ratio_text']=>string()      //\n            ['raw']=>array() {                         //\n                ['bitrate']=>integer()                 //\n                ['constrained_param_flag']=>integer()  //\n                ['frame_rate']=>integer()              //\n                ['framesize_horizontal']=>integer()    //\n                ['framesize_vertical']=>integer()      //\n                ['intra_quant_flag']=>integer()        //\n                ['marker_bit']=>integer()              //\n                ['pixel_aspect_ratio']=>integer()      //\n                ['vbv_buffer_size']=>integer()         //\n            }                                          //\n        }                                              //\n    }                                                  //\n\n\n    ['nsv']=>array() {                     // NSV - Nullsoft Streaming Video\n        ['NSVf']=>array() {                //\n            ['TOC_entries_1']=>integer()   //\n            ['TOC_entries_2']=>integer()   //\n            ['file_size']=>integer()       //\n            ['header_length']=>integer()   //\n            ['identifier']=>string()       //\n            ['meta_size']=>integer()       //\n            ['metadata']=>string()         //\n            ['playtime_ms']=>integer()     //\n        }                                  //\n        ['NSVs']=>array() {                //\n            ['audio_codec']=>string()      //\n            ['frame_rate']=>double()       //\n            ['framerate_index']=>integer() //\n            ['identifier']=>string()       //\n            ['offset']=>integer()          //\n            ['resolution_x']=>integer()    //\n            ['resolution_y']=>integer()    //\n            ['unknown1b']=>integer()       //\n            ['unknown1c']=>integer()       //\n            ['unknown1d']=>integer()       //\n            ['unknown2a']=>integer()       //\n            ['unknown2b']=>integer()       //\n            ['unknown2c']=>integer()       //\n            ['unknown2d']=>integer()       //\n            ['unknown3a']=>integer()       //\n            ['unknown3b']=>integer()       //\n            ['unknown3c']=>integer()       //\n            ['unknown3d']=>integer()       //\n            ['video_codec']=>string()      //\n        }                                  //\n        ['comments']=>array() {            //\n            ['aspect']=>string()           //\n            ['title']=>string()            //\n        }                                  //\n    }                                      //\n\n\n    ['ofr']=>array() {                                   // OFR (OptimFROG) - lossless audio compression\n        ['COMP']=>array() {                              //\n            [<x>]=>array() {                             //\n                ['channel_configuration']=>string()      //\n                ['crc_32']=>boolean()                    //\n                ['encoder']=>string()                    //\n                ['offset']=>integer()                    //\n                ['raw']=>array() {                       //\n                    ['algorithm_id']=>integer()          //\n                    ['channel_configuration']=>integer() //\n                    ['encoder_id']=>integer()            //\n                    ['sample_type']=>integer()           //\n                }                                        //\n                ['sample_count']=>integer()              //\n                ['sample_type']=>string()                //\n                ['size']=>integer()                      //\n            }                                            //\n        }                                                //\n        ['HEAD']=>array() {                              //\n            ['offset']=>integer()                        //\n            ['size']=>integer()                          //\n        }                                                //\n        ['OFR ']=>array() {                              //\n            ['channel_config']=>integer()                //\n            ['channels']=>integer()                      //\n            ['compression']=>string()                    //\n            ['encoder']=>string()                        //\n            ['offset']=>integer()                        //\n            ['raw']=>array() {                           //\n                ['compression']=>integer()               //\n                ['encoder_id']=>integer()                //\n                ['sample_type']=>integer()               //\n            }                                            //\n            ['sample_rate']=>integer()                   //\n            ['sample_type']=>string()                    //\n            ['size']=>integer()                          //\n            ['total_samples']=>integer()                 //\n        }                                                //\n        ['TAIL']=>array() {                              //\n            ['offset']=>integer()                        //\n            ['size']=>integer()                          //\n        }                                                //\n    }                                                    //\n\n\n    ['ogg']=>array() {                           // OGG - container format for Ogg Vorbis, OggFLAC, Speex, etc\n        ['bitrate_average']=>double()            //\n        ['bitrate_max']=>integer()               //\n        ['bitrate_min']=>integer()               //\n        ['bitrate_nominal']=>integer()           //\n        ['bitstreamversion']=>integer()          //\n        ['blocksize_large']=>integer()           //\n        ['blocksize_small']=>integer()           //\n        ['comments']=>array() {                  // array of array of strings containing best data from any available metainformation tag (APE, ID3v2, ID3v1, Lyrics3, Vorbis, ASF, RIFF, Real, etc.)\n            [<key name>]=>array()                // <key name> can be anything, usually 'artist', 'title', etc. Contains array of one or more values (eg: multiple artists are possible)\n        }                                        //\n        ['comments_raw']=>array() {              //\n            [<x>]=>array() {                     //\n                ['dataoffset']=>integer()        //\n                ['key']=>string()                //\n                ['size']=>integer()              //\n                ['value']=>string()              //\n            }                                    //\n        }                                        //\n        ['numberofchannels']=>integer()          //\n        ['pageheader']=>array() {                //\n            [<x>]=>array() {                     //\n                ['flags']=>array() {             //\n                    ['bos']=>boolean()           //\n                    ['eos']=>boolean()           //\n                    ['fresh']=>boolean()         //\n                }                                //\n                ['flags_raw']=>integer()         //\n                ['header_end_offset']=>integer() //\n                ['packet_type']=>integer()       //\n                ['page_checksum']=>double()      //\n                ['page_end_offset']=>integer()   //\n                ['page_length']=>integer()       //\n                ['page_segments']=>integer()     //\n                ['page_seqno']=>integer()        //\n                ['page_start_offset']=>integer() //\n                ['pcm_abs_position']=>integer()  //\n                ['segment_table']=>array() {     //\n                    [<x>]=>integer()             //\n                }                                //\n                ['stream_serialno']=>integer()   //\n                ['stream_structver']=>integer()  //\n                ['stream_type']=>string()        //\n            }                                    //\n            ['eos']=>array() {                   //\n                ['flags']=>array() {             //\n                    ['bos']=>boolean()           //\n                    ['eos']=>boolean()           //\n                    ['fresh']=>boolean()         //\n                }                                //\n                ['flags_raw']=>integer()         //\n                ['header_end_offset']=>integer() //\n                ['page_checksum']=>double()      //\n                ['page_end_offset']=>integer()   //\n                ['page_length']=>integer()       //\n                ['page_segments']=>integer()     //\n                ['page_seqno']=>integer()        //\n                ['page_start_offset']=>integer() //\n                ['pcm_abs_position']=>integer()  //\n                ['segment_table']=>array() {     //\n                    [<x>]=>integer()             //\n                }                                //\n                ['stream_serialno']=>integer()   //\n                ['stream_structver']=>integer()  //\n            }                                    //\n        }                                        //\n        ['samplerate']=>integer()                //\n        ['samples']=>integer()                   //\n        ['stop_bit']=>integer()                  //\n        ['vendor']=>string()                     //\n    }                                            //\n\n\n    ['png']=>array() {                                // PNG (Portable Network Graphics) - still image\n        ['IDAT']=>array() {                           //\n            [<x>]=>array() {                          //\n                ['header']=>array() {                 //\n                    ['crc']=>integer()                //\n                    ['data_length']=>integer()        //\n                    ['flags']=>array() {              //\n                        ['ancilliary']=>boolean()     //\n                        ['private']=>boolean()        //\n                        ['reserved']=>boolean()       //\n                        ['safe_to_copy']=>boolean()   //\n                    }                                 //\n                    ['type_raw']=>double()            //\n                    ['type_text']=>string()           //\n                }                                     //\n            }                                         //\n        }                                             //\n        ['IEND']=>array() {                           //\n            ['header']=>array() {                     //\n                ['crc']=>double()                     //\n                ['data']=>string()                    //\n                ['data_length']=>integer()            //\n                ['flags']=>array() {                  //\n                    ['ancilliary']=>boolean()         //\n                    ['private']=>boolean()            //\n                    ['reserved']=>boolean()           //\n                    ['safe_to_copy']=>boolean()       //\n                }                                     //\n                ['type_raw']=>double()                //\n                ['type_text']=>string()               //\n            }                                         //\n        }                                             //\n        ['IHDR']=>array() {                           //\n            ['color_type']=>array() {                 //\n                ['alpha']=>boolean()                  //\n                ['palette']=>boolean()                //\n                ['true_color']=>boolean()             //\n            }                                         //\n            ['compression_method_text']=>string()     //\n            ['header']=>array() {                     //\n                ['crc']=>double()                     //\n                ['data']=>string()                    //\n                ['data_length']=>integer()            //\n                ['flags']=>array() {                  //\n                    ['ancilliary']=>boolean()         //\n                    ['private']=>boolean()            //\n                    ['reserved']=>boolean()           //\n                    ['safe_to_copy']=>boolean()       //\n                }                                     //\n                ['type_raw']=>double()                //\n                ['type_text']=>string()               //\n            }                                         //\n            ['height']=>integer()                     //\n            ['raw']=>array() {                        //\n                ['bit_depth']=>integer()              //\n                ['color_type']=>integer()             //\n                ['compression_method']=>integer()     //\n                ['filter_method']=>integer()          //\n                ['interlace_method']=>integer()       //\n            }                                         //\n            ['width']=>integer()                      //\n        }                                             //\n        ['PLTE']=>array() {                           //\n            ['header']=>array() {                     //\n                ['crc']=>double()                     //\n                ['data']=>string()                    //\n                ['data_length']=>integer()            //\n                ['flags']=>array() {                  //\n                    ['ancilliary']=>boolean()         //\n                    ['private']=>boolean()            //\n                    ['reserved']=>boolean()           //\n                    ['safe_to_copy']=>boolean()       //\n                }                                     //\n                ['type_raw']=>double()                //\n                ['type_text']=>string()               //\n            }                                         //\n            [<x>]=>integer()                          //\n        }                                             //\n        ['comments']=>array() {                       // array of array of strings containing best data from any available metainformation tag (APE, ID3v2, ID3v1, Lyrics3, Vorbis, ASF, RIFF, Real, etc.)\n            [<key name>]=>array()                     // <key name> can be anything, usually 'artist', 'title', etc. Contains array of one or more values (eg: multiple artists are possible)\n        }                                             //\n        ['gAMA']=>array() {                           //\n            ['gamma']=>double()                       //\n            ['header']=>array() {                     //\n                ['crc']=>integer()                    //\n                ['data']=>string()                    //\n                ['data_length']=>integer()            //\n                ['flags']=>array() {                  //\n                    ['ancilliary']=>boolean()         //\n                    ['private']=>boolean()            //\n                    ['reserved']=>boolean()           //\n                    ['safe_to_copy']=>boolean()       //\n                }                                     //\n                ['type_raw']=>double()                //\n                ['type_text']=>string()               //\n            }                                         //\n        }                                             //\n        ['oFFs']=>array() {                           //\n            ['header']=>array() {                     //\n                ['crc']=>double()                     //\n                ['data']=>string()                    //\n                ['data_length']=>integer()            //\n                ['flags']=>array() {                  //\n                    ['ancilliary']=>boolean()         //\n                    ['private']=>boolean()            //\n                    ['reserved']=>boolean()           //\n                    ['safe_to_copy']=>boolean()       //\n                }                                     //\n                ['type_raw']=>double()                //\n                ['type_text']=>string()               //\n            }                                         //\n            ['position_x']=>integer()                 //\n            ['position_y']=>integer()                 //\n            ['unit']=>string()                        //\n            ['unit_specifier']=>integer()             //\n        }                                             //\n        ['pHYs']=>array() {                           //\n            ['header']=>array() {                     //\n                ['crc']=>integer()                    //\n                ['data']=>string()                    //\n                ['data_length']=>integer()            //\n                ['flags']=>array() {                  //\n                    ['ancilliary']=>boolean()         //\n                    ['private']=>boolean()            //\n                    ['reserved']=>boolean()           //\n                    ['safe_to_copy']=>boolean()       //\n                }                                     //\n                ['type_raw']=>double()                //\n                ['type_text']=>string()               //\n            }                                         //\n            ['pixels_per_unit_x']=>integer()          //\n            ['pixels_per_unit_y']=>integer()          //\n            ['unit']=>string()                        //\n            ['unit_specifier']=>integer()             //\n        }                                             //\n        ['pcLb']=>array() {                           //\n            ['header']=>array() {                     //\n                ['crc']=>double()                     //\n                ['data']=>string()                    //\n                ['data_length']=>integer()            //\n                ['flags']=>array() {                  //\n                    ['ancilliary']=>boolean()         //\n                    ['private']=>boolean()            //\n                    ['reserved']=>boolean()           //\n                    ['safe_to_copy']=>boolean()       //\n                }                                     //\n                ['type_raw']=>double()                //\n                ['type_text']=>string()               //\n            }                                         //\n        }                                             //\n        ['tEXt']=>array() {                           //\n            ['header']=>array() {                     //\n                ['crc']=>integer()                    //\n                ['data']=>string()                    //\n                ['data_length']=>integer()            //\n                ['flags']=>array() {                  //\n                    ['ancilliary']=>boolean()         //\n                    ['private']=>boolean()            //\n                    ['reserved']=>boolean()           //\n                    ['safe_to_copy']=>boolean()       //\n                }                                     //\n                ['type_raw']=>double()                //\n                ['type_text']=>string()               //\n            }                                         //\n            ['keyword']=>string()                     //\n            ['text']=>string()                        //\n        }                                             //\n        ['tIME']=>array() {                           //\n            ['day']=>integer()                        //\n            ['header']=>array() {                     //\n                ['crc']=>integer()                    //\n                ['data']=>string()                    //\n                ['data_length']=>integer()            //\n                ['flags']=>array() {                  //\n                    ['ancilliary']=>boolean()         //\n                    ['private']=>boolean()            //\n                    ['reserved']=>boolean()           //\n                    ['safe_to_copy']=>boolean()       //\n                }                                     //\n                ['type_raw']=>double()                //\n                ['type_text']=>string()               //\n            }                                         //\n            ['hour']=>integer()                       //\n            ['minute']=>integer()                     //\n            ['month']=>integer()                      //\n            ['second']=>integer()                     //\n            ['unix']=>integer()                       //\n            ['year']=>integer()                       //\n        }                                             //\n        ['tRNS']=>array() {                           //\n            ['header']=>array() {                     //\n                ['crc']=>double()                     //\n                ['data']=>string()                    //\n                ['data_length']=>integer()            //\n                ['flags']=>array() {                  //\n                    ['ancilliary']=>boolean()         //\n                    ['private']=>boolean()            //\n                    ['reserved']=>boolean()           //\n                    ['safe_to_copy']=>boolean()       //\n                }                                     //\n                ['type_raw']=>double()                //\n                ['type_text']=>string()               //\n            }                                         //\n            ['transparent_color_blue']=>integer()     //\n            ['transparent_color_green']=>integer()    //\n            ['transparent_color_red']=>integer()      //\n        }                                             //\n        ['zTXt']=>array() {                           //\n            ['compressed_text']=>string()             //\n            ['compression_method']=>integer()         //\n            ['compression_method_text']=>string()     //\n            ['header']=>array() {                     //\n                ['crc']=>double()                     //\n                ['data']=>string()                    //\n                ['data_length']=>integer()            //\n                ['flags']=>array() {                  //\n                    ['ancilliary']=>boolean()         //\n                    ['private']=>boolean()            //\n                    ['reserved']=>boolean()           //\n                    ['safe_to_copy']=>boolean()       //\n                }                                     //\n                ['type_raw']=>double()                //\n                ['type_text']=>string()               //\n            }                                         //\n            ['keyword']=>string()                     //\n            ['text']=>string()                        //\n        }                                             //\n    }                                                 //\n\n\n    ['quicktime']=>array() {               // Quicktime - video/audio\n        ['']=>array() {                    //\n            ['name']=>boolean()            //\n            ['offset']=>integer()          //\n            ['size']=>integer()            //\n        }                                  //\n        ['audio']=>array() {               //\n            ['bit_depth']=>integer()       //\n            ['channels']=>integer()        //\n            ['codec']=>string()            //\n            ['sample_rate']=>double()      //\n        }                                  //\n        ['free']=>array() {                //\n            ['name']=>string()             //\n            ['offset']=>integer()          //\n            ['size']=>integer()            //\n        }                                  //\n        ['mdat']=>array() {                //\n            ['name']=>string()             //\n            ['offset']=>integer()          //\n            ['size']=>integer()            //\n        }                                  //\n        ['moov']=>array() {                //\n            ['hierarchy']=>string()        //\n            ['name']=>string()             //\n            ['offset']=>integer()          //\n            ['size']=>integer()            //\n            ['subatoms']=>array()          // This is an undocumentably-complex recursive array, typically containing a huge amount of seemingly disorganized data. Avoid this like the plague.\n        }                                  //\n        ['time_scale']=>integer()          //\n        ['display_scale']=>integer()       // 1 = normal; 0.5 = half; 2 = double\n        ['video']=>array() {               //\n            ['codec']=>string()            //\n            ['color_depth']=>integer()     //\n            ['color_depth_name']=>string() //\n            ['resolution_x']=>double()     //\n            ['resolution_y']=>double()     //\n        }                                  //\n        ['wide']=>array() {                //\n            ['name']=>string()             //\n            ['offset']=>integer()          //\n            ['size']=>integer()            //\n        }                                  //\n    }                                      //\n\n\n    ['real']=>array() {                           // Real (RealAudio / RealVideo) - audio/video\n        ['chunks']=>array() {                     //\n            [<x>]=>array() {                      //\n                ['file_version']=>integer()       //\n                ['headers_count']=>integer()      //\n                ['length']=>integer()             //\n                ['name']=>string()                //\n                ['object_version']=>integer()     //\n                ['offset']=>integer()             //\n            }                                     //\n            [<x>]=>array() {                      //\n                ['avg_bit_rate']=>integer()       //\n                ['avg_packet_size']=>integer()    //\n                ['data_offset']=>integer()        //\n                ['duration']=>integer()           //\n                ['flags']=>array() {              //\n                    ['live_broadcast']=>boolean() //\n                    ['perfect_play']=>boolean()   //\n                    ['save_enabled']=>boolean()   //\n                }                                 //\n                ['flags_raw']=>integer()          //\n                ['index_offset']=>integer()       //\n                ['length']=>integer()             //\n                ['max_bit_rate']=>integer()       //\n                ['max_packet_size']=>integer()    //\n                ['name']=>string()                //\n                ['num_packets']=>integer()        //\n                ['num_streams']=>integer()        //\n                ['object_version']=>integer()     //\n                ['offset']=>integer()             //\n                ['preroll']=>integer()            //\n            }                                     //\n        }                                         //\n        ['comments']=>array() {                   //\n            ['artist']=>string()                  //\n            ['comment']=>string()                 //\n            ['title']=>string()                   //\n        }                                         //\n    }                                             //\n\n\n    ['riff']=>array() {                                     // RIFF (Resource Interchange File Format) - audio/video container format (AVI, WAV, CDDA, etc)\n        ['AIFC']=>array() {                                 //\n            ['COMM']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['data']=>string()                      //\n                    ['offset']=>integer()                   //\n                    ['size']=>integer()                     //\n                }                                           //\n            }                                               //\n            ['FVER']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['data']=>string()                      //\n                    ['offset']=>integer()                   //\n                    ['size']=>integer()                     //\n                }                                           //\n            }                                               //\n            ['INST']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['data']=>string()                      //\n                    ['offset']=>integer()                   //\n                    ['size']=>integer()                     //\n                }                                           //\n            }                                               //\n            ['MARK']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['data']=>string()                      //\n                    ['offset']=>integer()                   //\n                    ['size']=>integer()                     //\n                }                                           //\n            }                                               //\n            ['SSND']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['offset']=>integer()                   //\n                    ['size']=>integer()                     //\n                }                                           //\n            }                                               //\n        }                                                   //\n        ['AIFF']=>array() {                                 //\n            ['(c) ']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['data']=>string()                      //\n                    ['offset']=>integer()                   //\n                    ['size']=>integer()                     //\n                }                                           //\n            }                                               //\n            ['COMM']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['data']=>string()                      //\n                    ['offset']=>integer()                   //\n                    ['size']=>integer()                     //\n                }                                           //\n            }                                               //\n            ['SSND']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['offset']=>integer()                   //\n                    ['size']=>integer()                     //\n                }                                           //\n            }                                               //\n        }                                                   //\n        ['AVI ']=>array() {                                 //\n            ['JUNK']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['data']=>string()                      //\n                    ['offset']=>integer()                   //\n                    ['size']=>integer()                     //\n                }                                           //\n            }                                               //\n            ['hdrl']=>array() {                             //\n                ['avih']=>array() {                         //\n                    [<x>]=>array() {                        //\n                        ['data']=>string()                  //\n                        ['offset']=>integer()               //\n                        ['size']=>integer()                 //\n                    }                                       //\n                }                                           //\n                ['odml']=>array() {                         //\n                    ['dmlh']=>array() {                     //\n                        [<x>]=>array() {                    //\n                            ['data']=>string()              //\n                            ['offset']=>integer()           //\n                            ['size']=>integer()             //\n                        }                                   //\n                    }                                       //\n                }                                           //\n                ['strl']=>array() {                         //\n                    ['JUNK']=>array() {                     //\n                        [<x>]=>array() {                    //\n                            ['offset']=>integer()           //\n                            ['size']=>integer()             //\n                        }                                   //\n                    }                                       //\n                    ['strf']=>array() {                     //\n                        [<x>]=>array() {                    //\n                            ['data']=>string()              //\n                            ['offset']=>integer()           //\n                            ['size']=>integer()             //\n                        }                                   //\n                    }                                       //\n                    ['strh']=>array() {                     //\n                        [<x>]=>array() {                    //\n                            ['data']=>string()              //\n                            ['offset']=>integer()           //\n                            ['size']=>integer()             //\n                        }                                   //\n                    }                                       //\n                    ['strn']=>array() {                     //\n                        [<x>]=>array() {                    //\n                            ['data']=>string()              //\n                            ['offset']=>integer()           //\n                            ['size']=>integer()             //\n                        }                                   //\n                    }                                       //\n                }                                           //\n            }                                               //\n            ['idx1']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['data']=>string()                      //\n                    ['offset']=>integer()                   //\n                    ['size']=>integer()                     //\n                }                                           //\n            }                                               //\n            ['movi']=>array() {                             //\n                ['offset']=>integer()                       //\n                ['size']=>integer()                         //\n            }                                               //\n        }                                                   //\n        ['CDDA']=>array() {                                 //\n            ['fmt ']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['data']=>string()                      //\n                    ['disc_id']=>integer()                  //\n                    ['offset']=>integer()                   //\n                    ['playtime_frames']=>integer()          //\n                    ['playtime_seconds']=>double()          //\n                    ['size']=>integer()                     //\n                    ['start_offset_frame']=>integer()       //\n                    ['start_offset_seconds']=>double()      //\n                    ['track_num']=>integer()                //\n                    ['unknown1']=>integer()                 //\n                    ['unknown6']=>integer()                 //\n                    ['unknown7']=>integer()                 //\n                }                                           //\n            }                                               //\n        }                                                   //\n        ['WAVE']=>array() {                                 //\n            ['DISP']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['data']=>string()                      //\n                    ['offset']=>integer()                   //\n                    ['size']=>integer()                     //\n                }                                           //\n            }                                               //\n            ['INFO']=>array() {                             //\n                ['IART']=>array() {                         //\n                    [<x>]=>array() {                        //\n                        ['data']=>string()                  //\n                        ['offset']=>integer()               //\n                        ['size']=>integer()                 //\n                    }                                       //\n                }                                           //\n                ['ICMT']=>array() {                         //\n                    [<x>]=>array() {                        //\n                        ['data']=>string()                  //\n                        ['offset']=>integer()               //\n                        ['size']=>integer()                 //\n                    }                                       //\n                }                                           //\n                ['ICOP']=>array() {                         //\n                    [<x>]=>array() {                        //\n                        ['data']=>string()                  //\n                        ['offset']=>integer()               //\n                        ['size']=>integer()                 //\n                    }                                       //\n                }                                           //\n                ['IENG']=>array() {                         //\n                    [<x>]=>array() {                        //\n                        ['data']=>string()                  //\n                        ['offset']=>integer()               //\n                        ['size']=>integer()                 //\n                    }                                       //\n                }                                           //\n                ['IGNR']=>array() {                         //\n                    [<x>]=>array() {                        //\n                        ['data']=>string()                  //\n                        ['offset']=>integer()               //\n                        ['size']=>integer()                 //\n                    }                                       //\n                }                                           //\n                ['IKEY']=>array() {                         //\n                    [<x>]=>array() {                        //\n                        ['data']=>string()                  //\n                        ['offset']=>integer()               //\n                        ['size']=>integer()                 //\n                    }                                       //\n                }                                           //\n                ['IMED']=>array() {                         //\n                    [<x>]=>array() {                        //\n                        ['data']=>string()                  //\n                        ['offset']=>integer()               //\n                        ['size']=>integer()                 //\n                    }                                       //\n                }                                           //\n                ['INAM']=>array() {                         //\n                    [<x>]=>array() {                        //\n                        ['data']=>string()                  //\n                        ['offset']=>integer()               //\n                        ['size']=>integer()                 //\n                    }                                       //\n                }                                           //\n                ['ISBJ']=>array() {                         //\n                    [<x>]=>array() {                        //\n                        ['data']=>string()                  //\n                        ['offset']=>integer()               //\n                        ['size']=>integer()                 //\n                    }                                       //\n                }                                           //\n                ['ISFT']=>array() {                         //\n                    [<x>]=>array() {                        //\n                        ['data']=>string()                  //\n                        ['offset']=>integer()               //\n                        ['size']=>integer()                 //\n                    }                                       //\n                }                                           //\n                ['ISRC']=>array() {                         //\n                    [<x>]=>array() {                        //\n                        ['data']=>string()                  //\n                        ['offset']=>integer()               //\n                        ['size']=>integer()                 //\n                    }                                       //\n                }                                           //\n                ['ISRF']=>array() {                         //\n                    [<x>]=>array() {                        //\n                        ['data']=>string()                  //\n                        ['offset']=>integer()               //\n                        ['size']=>integer()                 //\n                    }                                       //\n                }                                           //\n                ['ITCH']=>array() {                         //\n                    [<x>]=>array() {                        //\n                        ['data']=>string()                  //\n                        ['offset']=>integer()               //\n                        ['size']=>integer()                 //\n                    }                                       //\n                }                                           //\n            }                                               //\n            ['MEXT']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['anciliary_data_length']=>integer()    //\n                    ['data']=>string()                      //\n                    ['flags']=>array() {                    //\n                        ['anciliary_data_free']=>boolean()  //\n                        ['anciliary_data_left']=>boolean()  //\n                        ['anciliary_data_right']=>boolean() //\n                        ['homogenous']=>boolean()           //\n                    }                                       //\n                    ['offset']=>integer()                   //\n                    ['raw']=>array() {                      //\n                        ['anciliary_data_def']=>integer()   //\n                        ['sound_information']=>integer()    //\n                    }                                       //\n                    ['size']=>integer()                     //\n                }                                           //\n            }                                               //\n            ['bext']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['author']=>string()                    //\n                    ['bwf_version']=>integer()              //\n                    ['coding_history']=>array() {           //\n                        [<x>]=>string()                     //\n                    }                                       //\n                    ['data']=>string()                      //\n                    ['offset']=>integer()                   //\n                    ['origin_date']=>string()               //\n                    ['origin_date_unix']=>integer()         //\n                    ['origin_time']=>string()               //\n                    ['reference']=>string()                 //\n                    ['reserved']=>integer()                 //\n                    ['size']=>integer()                     //\n                    ['time_reference']=>integer()           //\n                    ['title']=>string()                     //\n                }                                           //\n            }                                               //\n            ['cart']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['artist']=>string()                    //\n                    ['category']=>string()                  //\n                    ['classification']=>string()            //\n                    ['client_id']=>string()                 //\n                    ['cut_id']=>string()                    //\n                    ['data']=>string()                      //\n                    ['end_date']=>string()                  //\n                    ['end_time']=>string()                  //\n                    ['offset']=>integer()                   //\n                    ['out_cue']=>string()                   //\n                    ['post_time']=>array() {                //\n                        [<x>]=>array() {                    //\n                            ['timer_value']=>integer()      //\n                            ['usage_fourcc']=>string()      //\n                        }                                   //\n                    }                                       //\n                    ['producer_app_id']=>string()           //\n                    ['producer_app_version']=>string()      //\n                    ['size']=>integer()                     //\n                    ['start_date']=>string()                //\n                    ['start_time']=>string()                //\n                    ['tag_text']=>array() {                 //\n                        [<x>]=>string()                     //\n                    }                                       //\n                    ['title']=>string()                     //\n                    ['url']=>string()                       //\n                    ['user_defined_text']=>string()         //\n                    ['version']=>string()                   //\n                    ['zero_db_reference']=>integer()        //\n                }                                           //\n            }                                               //\n            ['data']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['offset']=>integer()                   //\n                    ['size']=>integer()                     //\n                }                                           //\n            }                                               //\n            ['fact']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['data']=>string()                      //\n                    ['offset']=>integer()                   //\n                    ['size']=>integer()                     //\n                }                                           //\n            }                                               //\n            ['fmt ']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['data']=>string()                      //\n                    ['offset']=>integer()                   //\n                    ['size']=>integer()                     //\n                }                                           //\n            }                                               //\n            ['rgad']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['data']=>string()                      //\n                    ['offset']=>integer()                   //\n                    ['size']=>integer()                     //\n                }                                           //\n            }                                               //\n        }                                                   //\n        ['audio']=>array() {                                //\n            [<x>]=>array() {                                //\n                ['bitrate']=>integer()                      //\n                ['bits_per_sample']=>integer()              //\n                ['channels']=>integer()                     //\n                ['codec']=>string()                         //\n                ['sample_rate']=>integer()                  //\n            }                                               //\n            ['bits_per_sample']=>integer()                  //\n            ['channels']=>integer()                         //\n            ['codec_fourcc']=>string()                      //\n            ['codec_name']=>string()                        //\n            ['sample_rate']=>integer()                      //\n            ['total_samples']=>integer()                    //\n        }                                                   //\n        ['comments']=>array() {                             // array of array of strings containing best data from any available metainformation tag (APE, ID3v2, ID3v1, Lyrics3, Vorbis, ASF, RIFF, Real, etc.)\n            [<key name>]=>array()                           // <key name> can be anything, usually 'artist', 'title', etc. Contains array of one or more values (eg: multiple artists are possible)\n        }                                                   //\n        ['header_size']=>integer()                          //\n        ['raw']=>array() {                                  //\n            ['avih']=>array() {                             //\n                ['dwFlags']=>integer()                      //\n                ['dwHeight']=>integer()                     //\n                ['dwInitialFrames']=>integer()              //\n                ['dwLength']=>integer()                     //\n                ['dwMaxBytesPerSec']=>integer()             //\n                ['dwMicroSecPerFrame']=>integer()           //\n                ['dwPaddingGranularity']=>integer()         //\n                ['dwRate']=>integer()                       //\n                ['dwScale']=>integer()                      //\n                ['dwStart']=>integer()                      //\n                ['dwStreams']=>integer()                    //\n                ['dwSuggestedBufferSize']=>integer()        //\n                ['dwTotalFrames']=>integer()                //\n                ['dwWidth']=>integer()                      //\n                ['flags']=>array() {                        //\n                    ['capturedfile']=>boolean()             //\n                    ['copyrighted']=>boolean()              //\n                    ['hasindex']=>boolean()                 //\n                    ['interleaved']=>boolean()              //\n                    ['mustuseindex']=>boolean()             //\n                    ['trustcktype']=>boolean()              //\n                }                                           //\n            }                                               //\n            ['fact']=>array() {                             //\n                ['NumberOfSamples']=>integer()              //\n            }                                               //\n            ['fmt ']=>array() {                             //\n                ['nAvgBytesPerSec']=>integer()              //\n                ['wBitsPerSample']=>integer()               //\n                ['nBlockAlign']=>integer()                  //\n                ['nChannels']=>integer()                    //\n                ['nSamplesPerSec']=>integer()               //\n                ['wFormatTag']=>integer()                   //\n            }                                               //\n            ['rgad']=>array() {                             //\n                ['audiophile']=>array() {                   //\n                    ['adjustment']=>integer()               //\n                    ['name']=>integer()                     //\n                    ['originator']=>integer()               //\n                    ['signbit']=>integer()                  //\n                }                                           //\n                ['fPeakAmplitude']=>double()                //\n                ['nAudiophileRgAdjust']=>integer()          //\n                ['nRadioRgAdjust']=>integer()               //\n                ['radio']=>array() {                        //\n                    ['adjustment']=>integer()               //\n                    ['name']=>integer()                     //\n                    ['originator']=>integer()               //\n                    ['signbit']=>integer()                  //\n                }                                           //\n            }                                               //\n            ['strf']=>array() {                             //\n                ['auds']=>array() {                         //\n                    [<x>]=>array() {                        //\n                        ['nAvgBytesPerSec']=>integer()      //\n                        ['wBitsPerSample']=>integer()       //\n                        ['nBlockAlign']=>integer()          //\n                        ['nChannels']=>integer()            //\n                        ['nSamplesPerSec']=>integer()       //\n                        ['wFormatTag']=>integer()           //\n                    }                                       //\n                }                                           //\n                ['vids']=>array() {                         //\n                    [<x>]=>array() {                        //\n                        ['biBitCount']=>integer()           //\n                        ['biClrImportant']=>integer()       //\n                        ['biClrUsed']=>integer()            //\n                        ['biHeight']=>integer()             //\n                        ['biPlanes']=>integer()             //\n                        ['biSize']=>integer()               //\n                        ['biSizeImage']=>integer()          //\n                        ['biWidth']=>integer()              //\n                        ['biXPelsPerMeter']=>integer()      //\n                        ['biYPelsPerMeter']=>integer()      //\n                        ['fourcc']=>string()                //\n                    }                                       //\n                }                                           //\n            }                                               //\n            ['strh']=>array() {                             //\n                [<x>]=>array() {                            //\n                    ['dwFlags']=>integer()                  //\n                    ['dwInitialFrames']=>integer()          //\n                    ['dwLength']=>integer()                 //\n                    ['dwQuality']=>integer()                //\n                    ['dwRate']=>integer()                   //\n                    ['dwSampleSize']=>integer()             //\n                    ['dwScale']=>integer()                  //\n                    ['dwStart']=>integer()                  //\n                    ['dwSuggestedBufferSize']=>integer()    //\n                    ['fccHandler']=>string()                //\n                    ['fccType']=>string()                   //\n                    ['rcFrame']=>integer()                  //\n                    ['wLanguage']=>integer()                //\n                    ['wPriority']=>integer()                //\n                }                                           //\n            }                                               //\n        }                                                   //\n        ['rgad']=>array() {                                 //\n            ['audiophile']=>array() {                       //\n                ['adjustment']=>double()                    //\n                ['name']=>string()                          //\n                ['originator']=>string()                    //\n            }                                               //\n            ['peakamplitude']=>double()                     //\n            ['radio']=>array() {                            //\n                ['adjustment']=>double()                    //\n                ['name']=>string()                          //\n                ['originator']=>string()                    //\n            }                                               //\n        }                                                   //\n        ['video']=>array() {                                //\n            [<x>]=>array() {                                //\n                ['codec']=>string()                         //\n                ['frame_height']=>integer()                 //\n                ['frame_rate']=>double()                    //\n                ['frame_width']=>integer()                  //\n            }                                               //\n        }                                                   //\n        ['litewave']=>array() {                             // http://www.clearjump.com\n            ['raw']=>array() {                              //\n                ['compression_method']=>integer()           // 1=lossy; 2=lossless\n                ['compression_flags']=>integer()            //\n                ['m_dwScale']=>integer()                    // scalefactor for lossy compression - related to m_wQuality as: $m_wQuality = round((2000 - $m_dwScale) / 20)\n                ['m_dwBlockSize']=>integer()                // number of samples in encoded blocks\n                ['m_wQuality']=>integer()                   // quality factor (0=most compressed lossy; 99=best quality lossy; 100=lossless)\n                ['m_wMarkDistance']=>integer()              // distance between marks in bytes\n                ['m_wReserved']=>integer()                  //\n                ['m_dwOrgSize']=>integer()                  // original file size in bytes\n                ['m_bFactExists']=>integer()                // indicates if 'fact' chunk exists in the original file\n                ['m_dwRiffChunkSize']=>integer()            // riff chunk size in the original file\n            }                                               //\n            ['quality_factor']=>integer()                   // alias of ['raw']['m_wQuality']\n        }                                                   //\n    }                                                       //\n\n\n    ['shn']=>array() {             // Shorten - lossless audio compression\n        ['seektable']=>array() {   //\n            ['length']=>integer()  //\n            ['offset']=>integer()  //\n            ['present']=>boolean() //\n        }                          //\n        ['version']=>integer()     //\n    }                              //\n\n\n    ['swf']=>array() {                  // SWF - ShockWave Flash (www.openswf.org)\n        ['header']=>array() {           //\n            ['frame_count']=>integer()  //\n            ['frame_height']=>integer() //\n            ['frame_width']=>integer()  //\n            ['length']=>integer()       //\n            ['signature']=>string()     //\n            ['version']=>integer()      //\n        }                               //\n        ['bgcolor']=>string()           //\n        ['tags']=>array()               //\n    }                                   //\n\n['tak_audio']=>array() {                    // TAK - Tom's lossless Audio Kompressor format\n        ['raw']=>array() {                      //\n            ['magic']=>string()                 //\n            ['STREAMINFO']=>string()            //\n            ['MD5Data']=>string()               //\n            ['header_data']=>string()           // Original wave header data to enable perfect reconstruction\n            ['footer_data']=>string()           // --||--\n        }                                       //\n        ['channels']=>integer()                 //\n        ['bits_per_sample']=>integer()          //\n        ['sample_rate']=>integer()              //\n        ['samples']=>integer()                  //\n        ['framesize']=>string()                 //\n        ['codectype']=>string()                 //\n        ['version']=>string()                   //\n        ['profile']=>string()                   //\n        ['lastframe_pos']=>integer()            //\n        ['last_frame_size']=>integer()          //\n        ['playtime']=>integer()                 //\n        ['compressed_size']=>integer()          //\n        ['uncompressed_size']=>integer()        //\n        ['compression_ratio']=>integer()        //\n    }                                           //\n\n\n    ['voc']=>array() {                            // VOC - SoundBlaster VOC audio format\n        ['blocks']=>array() {                     //\n            [<x>]=>array() {                      //\n                ['bits_per_sample']=>integer()    //\n                ['block_offset']=>integer()       //\n                ['block_size']=>integer()         //\n                ['block_type_id']=>integer()      //\n                ['channels']=>integer()           //\n                ['compression_name']=>string()    //\n                ['compression_type']=>integer()   //\n                ['pack_method']=>integer()        //\n                ['sample_rate']=>integer()        //\n                ['sample_rate_id']=>integer()     //\n                ['stereo']=>boolean()             //\n                ['time_constant']=>integer()      //\n                ['wFormat']=>integer()            //\n            }                                     //\n        }                                         //\n        ['compressed_bits_per_sample']=>integer() //\n        ['header']=>array() {                     //\n            ['datablock_offset']=>integer()       //\n            ['major_version']=>integer()          //\n            ['minor_version']=>integer()          //\n        }                                         //\n    }                                             //\n\n\n    ['vqf']=>array() {                    // VQF - transform-domain weighted interleave Vector Quantization Format (lossy audio)\n        ['COMM']=>array() {               //\n            ['bitrate']=>integer()        //\n            ['channel_mode']=>integer()   //\n            ['sample_rate']=>integer()    //\n            ['security_level']=>integer() //\n        }                                 //\n        ['DSIZ']=>integer()               //\n        ['comments']=>array() {           // array of array of strings containing best data from any available metainformation tag (APE, ID3v2, ID3v1, Lyrics3, Vorbis, ASF, RIFF, Real, etc.)\n            [<key name>]=>array()         // <key name> can be anything, usually 'artist', 'title', etc. Contains array of one or more values (eg: multiple artists are possible)\n        }                                 //\n        ['raw']=>array() {                //\n            ['header_tag']=>string()      //\n            ['size']=>integer()           //\n            ['version']=>string()         //\n        }                                 //\n    }                                     //\n\n\n    ['wavpack']=>array() {           // WavPack - lossless audio compression\n        ['bits']=>integer()          //\n        ['crc1']=>double()           //\n        ['crc2']=>integer()          //\n        ['extension']=>string()      //\n        ['extra_bc']=>string()       //\n        ['extras']=>string()         //\n        ['flags_raw']=>integer()     //\n        ['offset']=>integer()        //\n        ['shift']=>integer()         //\n        ['size']=>integer()          //\n        ['total_samples']=>integer() //\n        ['version']=>integer()       //\n    }                                //\n\n\n    ['zip']=>array() {                                           // ZIP - lossless data compression\n        ['central_directory']=>array() {                         //\n            [<x>]=>array() {                                     //\n                ['compressed_size']=>integer()                   //\n                ['compression_method']=>string()                 //\n                ['create_version']=>string()                     //\n                ['entry_offset']=>integer()                      //\n                ['extract_version']=>string()                    //\n                ['filename']=>string()                           //\n                ['flags']=>array() {                             //\n                    ['compression_speed']=>string()              //\n                    ['data_descriptor_used']=>boolean()          //\n                    ['encrypted']=>boolean()                     //\n                }                                                //\n                ['host_os']=>string()                            //\n                ['last_modified_timestamp']=>integer()           //\n                ['offset']=>integer()                            //\n                ['raw']=>array() {                               //\n                    ['compressed_size']=>integer()               //\n                    ['compression_method']=>integer()            //\n                    ['crc_32']=>double()                         //\n                    ['create_version']=>integer()                //\n                    ['disk_number_start']=>integer()             //\n                    ['external_file_attrib']=>double()           //\n                    ['extra_field_length']=>integer()            //\n                    ['extract_version']=>integer()               //\n                    ['file_comment_length']=>integer()           //\n                    ['filename_length']=>integer()               //\n                    ['general_flags']=>integer()                 //\n                    ['internal_file_attrib']=>integer()          //\n                    ['last_mod_file_date']=>integer()            //\n                    ['last_mod_file_time']=>integer()            //\n                    ['local_header_offset']=>integer()           //\n                    ['signature']=>integer()                     //\n                    ['uncompressed_size']=>integer()             //\n                }                                                //\n                ['uncompressed_size']=>integer()                 //\n            }                                                    //\n        }                                                        //\n        ['comments']=>array() {                                  //\n            ['comment']=>string()                                //\n        }                                                        //\n        ['compressed_size']=>integer()                           //\n        ['compression_method']=>string()                         //\n        ['compression_speed']=>string()                          //\n        ['end_central_directory']=>array() {                     //\n            ['comment']=>string()                                //\n            ['comment_length']=>integer()                        //\n            ['directory_entries_this_disk']=>integer()           //\n            ['directory_entries_total']=>integer()               //\n            ['directory_offset']=>integer()                      //\n            ['directory_size']=>integer()                        //\n            ['disk_number_current']=>integer()                   //\n            ['disk_number_start_directory']=>integer()           //\n            ['offset']=>integer()                                //\n            ['signature']=>integer()                             //\n        }                                                        //\n        ['entries']=>array() {                                   //\n            [<x>]=>array() {                                     //\n                ['compressed_size']=>integer()                   //\n                ['compression_method']=>string()                 //\n                ['extract_version']=>string()                    //\n                ['filename']=>string()                           //\n                ['flags']=>array() {                             //\n                    ['compression_speed']=>string()              //\n                    ['data_descriptor_used']=>boolean()          //\n                    ['encrypted']=>boolean()                     //\n                }                                                //\n                ['host_os']=>string()                            //\n                ['last_modified_timestamp']=>integer()           //\n                ['offset']=>integer()                            //\n                ['raw']=>array() {                               //\n                    ['compressed_size']=>integer()               //\n                    ['compression_method']=>integer()            //\n                    ['crc_32']=>integer()                        //\n                    ['extra_field_length']=>integer()            //\n                    ['extract_version']=>integer()               //\n                    ['filename_length']=>integer()               //\n                    ['general_flags']=>integer()                 //\n                    ['last_mod_file_date']=>integer()            //\n                    ['last_mod_file_time']=>integer()            //\n                    ['signature']=>integer()                     //\n                    ['uncompressed_size']=>integer()             //\n                }                                                //\n                ['uncompressed_size']=>integer()                 //\n            }                                                    //\n        }                                                        //\n        ['entries_count']=>integer()                             //\n        ['files']=>array() {                                     // multidimensional tree-structure array listing of all files and directories in image\n            [<directory name>]=>array()                          // entries of type array are directories (key is directory name), may contain files and/or other subdirectories\n            [<file name>]=>integer()                             // entries of type integer are files (key is file name, value is file size in bytes)\n        }                                                        //\n        ['uncompressed_size']=>integer()                         //\n    }                                                            //\n}                                                                //\n"
        }
      ]
    }
  ]
}