{
  "metadata": {
    "timestamp": 1736711855080,
    "page": 184,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "brefphp/bref",
      "stars": 3188,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintrc.js",
          "type": "blob",
          "size": 1.1943359375,
          "content": "'use strict';\n\nmodule.exports = {\n    extends: [\n        // https://github.com/prettier/eslint-config-prettier\n        'prettier',\n    ],\n    parserOptions: {\n        ecmaVersion: 2019,\n    },\n    root: true,\n    ignorePatterns: ['src/**', 'tests/**', 'website/**', 'vendor/**'],\n    plugins: ['import', '@typescript-eslint'],\n    overrides: [\n        // Rules specific for TypeScript\n        {\n            files: ['**/*.ts'],\n            // We must use a different parser that supports TypeScript\n            parser: '@typescript-eslint/parser',\n            // Extra rules specific to TypeScript\n            extends: [\n                'plugin:import/recommended',\n                'plugin:import/typescript',\n                'plugin:@typescript-eslint/recommended',\n            ],\n            parserOptions: {\n                project: 'tsconfig.json',\n            },\n            rules: {\n                // Because I got bit by \"forgetting await\" too many times\n                '@typescript-eslint/no-floating-promises': 'error',\n                '@typescript-eslint/no-misused-promises': 'error',\n            },\n        },\n    ],\n    rules: {\n        // This pattern is used by the CDK\n        'no-new': ['off'],\n    },\n};\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.5859375,
          "content": "# Do not export those files in the Composer archive (lighter dependency)\n.github/ export-ignore\ndemo/ export-ignore\ndocs/ export-ignore\nruntime/ export-ignore\ntests/ export-ignore\nutils/ export-ignore\nwebsite/ export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\n.phpcs.xml export-ignore\ndocker-compose.yml export-ignore\nMakefile export-ignore\nphpstan.neon export-ignore\nphpunit.xml export-ignore\n.eslintrc.js export-ignore\n.prettierrc.yaml export-ignore\ntsconfig.json export-ignore\nplugin/serverless.ts export-ignore\n\n# Auto detect text files and perform LF normalization\n* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.279296875,
          "content": "/vendor\n/.idea\n/tests/Bridge/Symfony/var\n/tests/Bridge/Symfony/cache\n/tests/Bridge/Symfony/logs\n/.bref/\n/.phpcs-cache\n/composer.lock\n/.couscous/\n/website/node_modules/\n/website/template/output.css\n/.netlify/\n.DS_Store\n/.serverless/\n.phpunit.result.cache\nnode_modules/\npackage-lock.json\n"
        },
        {
          "name": ".phpcs.xml",
          "type": "blob",
          "size": 6.5615234375,
          "content": "<?xml version=\"1.0\"?>\n<ruleset>\n    <arg name=\"basepath\" value=\".\"/>\n    <arg name=\"extensions\" value=\"php\"/>\n    <arg name=\"parallel\" value=\"80\"/>\n    <arg name=\"cache\" value=\".phpcs-cache\"/>\n    <!-- Show sniff names -->\n    <arg value=\"s\"/>\n\n    <file>bref</file>\n    <file>src</file>\n    <file>tests</file>\n\n    <!-- Import the Doctrine coding standard -->\n    <rule ref=\"Doctrine\"/>\n\n    <!-- Allow long lines -->\n    <rule ref=\"Generic.Files.LineLength.TooLong\">\n        <severity>0</severity>\n    </rule>\n\n    <!-- Do not align assignments -->\n    <rule ref=\"Generic.Formatting.MultipleStatementAlignment\">\n        <severity>0</severity>\n    </rule>\n\n    <!-- Require specific order of phpDoc annotations with empty newline between specific groups -->\n    <rule ref=\"SlevomatCodingStandard.Commenting.DocCommentSpacing\">\n        <properties>\n            <property name=\"linesCountBeforeFirstContent\" value=\"0\"/>\n            <property name=\"linesCountAfterLastContent\" value=\"0\"/>\n            <property name=\"linesCountBetweenDescriptionAndAnnotations\" value=\"1\"/>\n            <property name=\"linesCountBetweenAnnotationsGroups\" value=\"1\"/>\n            <property name=\"annotationsGroups\" type=\"array\">\n                <element value=\"\n                    @ORM\\,\n                    @ODM\\,\n                \"/>\n                <element value=\"\n                    @param,\n                    @return,\n                    @throws,\n                \"/>\n                <element value=\"\n                    @internal,\n                    @deprecated,\n                    @link,\n                    @see,\n                    @uses,\n                \"/>\n            </property>\n        </properties>\n    </rule>\n\n    <!-- Do not enforce usage of early exit -->\n    <rule ref=\"SlevomatCodingStandard.ControlStructures.EarlyExit\">\n        <severity>0</severity>\n    </rule>\n\n    <!-- Require new instances without parentheses when not passing parameters -->\n    <rule ref=\"SlevomatCodingStandard.ControlStructures.NewWithParentheses\">\n        <severity>0</severity>\n    </rule>\n    <rule ref=\"PSR12.Classes.ClassInstantiation.MissingParentheses\">\n        <severity>0</severity>\n    </rule>\n    <rule ref=\"SlevomatCodingStandard.ControlStructures.NewWithoutParentheses\"/>\n\n    <!-- Do not require an empty line after if/for/etc. -->\n    <rule ref=\"SlevomatCodingStandard.ControlStructures.BlockControlStructureSpacing.IncorrectLinesCountAfterControlStructure\">\n        <severity>0</severity>\n    </rule>\n    <rule ref=\"SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing.IncorrectLinesCountBeforeControlStructure\">\n        <severity>0</severity>\n    </rule>\n\n    <!-- Do not require closures not referencing $this be static -->\n    <rule ref=\"SlevomatCodingStandard.Functions.StaticClosure\">\n        <severity>0</severity>\n    </rule>\n\n    <!-- Allow using some absolute class name references (except global ones) -->\n    <rule ref=\"SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly\">\n        <properties>\n            <property name=\"allowFallbackGlobalConstants\" value=\"true\"/>\n            <property name=\"allowFallbackGlobalFunctions\" value=\"true\"/>\n            <property name=\"allowFullyQualifiedGlobalClasses\" value=\"true\"/>\n            <property name=\"allowFullyQualifiedGlobalConstants\" value=\"true\"/>\n            <property name=\"allowFullyQualifiedGlobalFunctions\" value=\"true\"/>\n            <property name=\"allowFullyQualifiedNameForCollidingClasses\" value=\"true\"/>\n            <property name=\"allowFullyQualifiedNameForCollidingConstants\" value=\"true\"/>\n            <property name=\"allowFullyQualifiedNameForCollidingFunctions\" value=\"true\"/>\n            <property name=\"searchAnnotations\" value=\"true\"/>\n        </properties>\n    </rule>\n\n    <!-- Require presence of declare(strict_types=1) -->\n    <rule ref=\"SlevomatCodingStandard.TypeHints.DeclareStrictTypes\">\n        <properties>\n            <!-- Inline with the `<?php` opening tag -->\n            <property name=\"newlinesCountBetweenOpenTagAndDeclare\" value=\"0\"/>\n            <property name=\"spacesCountAroundEqualsSign\" value=\"0\"/>\n            <property name=\"newlinesCountAfterDeclare\" value=\"2\"/>\n        </properties>\n    </rule>\n    <!-- Declare strict type on the same line as opening tag -->\n    <rule ref=\"PSR12.Files.OpenTag.NotAlone\">\n        <severity>0</severity>\n    </rule>\n\n    <!-- Require no space before colon in return types -->\n    <rule ref=\"SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing\">\n        <properties>\n            <property name=\"spacesCountBeforeColon\" value=\"0\"/>\n        </properties>\n    </rule>\n\n    <!-- Do not force arrays with 1 item to be inline -->\n    <rule ref=\"Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed\">\n        <severity>0</severity>\n    </rule>\n\n    <!-- Do not forbid declaring functions -->\n    <rule ref=\"Squiz.Functions.GlobalFunction\">\n        <severity>0</severity>\n    </rule>\n\n    <!-- Allow using variables in double quoted strings -->\n    <rule ref=\"Squiz.Strings.DoubleQuoteUsage.ContainsVar\">\n        <severity>0</severity>\n    </rule>\n\n    <!-- Do not force to document arrays -->\n    <rule ref=\"SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingTraversableTypeHintSpecification\">\n        <severity>0</severity>\n    </rule>\n    <rule ref=\"SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingTraversableTypeHintSpecification\">\n        <severity>0</severity>\n    </rule>\n    <rule ref=\"SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingTraversableTypeHintSpecification\">\n        <severity>0</severity>\n    </rule>\n\n    <!-- Anonymous classes -->\n    <rule ref=\"PSR12.Classes.AnonClassDeclaration.SpaceAfterKeyword\">\n        <severity>0</severity>\n    </rule>\n\n    <!-- ########################-->\n    <!-- TESTS                   -->\n    <!-- ########################-->\n\n    <!-- Allow underscores and non-breakable spaces to be used in tests for readability -->\n    <rule ref=\"PSR1.Methods.CamelCapsMethodName.NotCamelCaps\">\n        <exclude-pattern type=\"relative\">tests/*</exclude-pattern>\n    </rule>\n\n    <!-- For short anonymous classes in tests -->\n    <rule ref=\"Squiz.WhiteSpace.FunctionSpacing.Before\">\n        <exclude-pattern type=\"relative\">tests/*</exclude-pattern>\n    </rule>\n\n    <!-- Do not enforce return types in tests else it crowds the test methods with `: void` -->\n    <rule ref=\"SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint\">\n        <exclude-pattern type=\"relative\">tests/*</exclude-pattern>\n    </rule>\n\n    <!-- Bref contains self-contained PHP files mixing code and functions -->\n    <rule ref=\"PSR1.Files.SideEffects.FoundWithSymbols\">\n        <severity>0</severity>\n    </rule>\n\n</ruleset>\n"
        },
        {
          "name": ".prettierrc.yaml",
          "type": "blob",
          "size": 0.0439453125,
          "content": "tabWidth: 4\nsingleQuote: true\nprintWidth: 100"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2022 Matthieu Napoli\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.46484375,
          "content": ".EXPORT_ALL_VARIABLES:\n\ntrigger_runtimes:\n\taws codepipeline start-pipeline-execution --name bref-php-binary\n\nruntime_build_status:\n\taws codepipeline get-pipeline-state --name=bref-php-binary | jq \".stageStates[1].latestExecution.status\"\n\n# Deploy the demo functions\ndemo:\n\tserverless deploy\n\nlayers.json:\n\tphp utils/layers.json/update.php\n\ntest-stack:\n\tserverless deploy -c tests/serverless.tests.yml\n\npreview:\n\tcd website && make preview\n\n.PHONY: demo layers.json test-stack\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.4775390625,
          "content": "[![Running PHP made simple. Bref provides tools and documentation to easily deploy and run serverless PHP applications. Learn more](website/public/social-card.png)](https://bref.sh/)\n\n[![Latest Version](https://img.shields.io/github/release/brefphp/bref.svg?style=flat-square)](https://packagist.org/packages/bref/bref)\n[![Monthly Downloads](https://img.shields.io/packagist/dm/bref/bref.svg)](https://packagist.org/packages/bref/bref/stats)\n\nRead more on [the website](https://bref.sh/).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.8212890625,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 2.x     | :white_check_mark: |\n| 1.x     | :x:                |\n\nVersion 1.x is no longer supported. You should upgrade to v2.\n\nIf you prefer to stay on v1 and need long term support for v1 (or need help upgrading), get in touch for enterprise support: https://bref.sh/support\n\n## Reporting a Vulnerability\n\n⚠️ PLEASE DON'T DISCLOSE SECURITY-RELATED ISSUES PUBLICLY, SEE BELOW.\n\nIf you discover a security vulnerability within this package, please send an email to security@bref.sh or open a security issue report on this page: https://github.com/brefphp/bref/security/advisories.\n\nAll security vulnerabilities will be promptly addressed. Please do not disclose security-related issues publicly until a fix has been announced.\n"
        },
        {
          "name": "bref",
          "type": "blob",
          "size": 4.08984375,
          "content": "#!/usr/bin/env php\n<?php\ndeclare(strict_types=1);\n\nif (file_exists(__DIR__ . '/vendor/autoload.php')) {\n    require_once __DIR__ . '/vendor/autoload.php';\n} elseif (file_exists(__DIR__ . '/../autoload.php')) {\n    /** @noinspection PhpIncludeInspection */\n    require_once __DIR__ . '/../autoload.php';\n} else {\n    /** @noinspection PhpIncludeInspection */\n    require_once __DIR__ . '/../../autoload.php';\n}\n\ntelemetry();\n\nswitch ($argv[1] ?? '') {\n    case 'init':\n        require_once __DIR__ . '/src/Cli/init.php';\n        init();\n        break;\n    case 'cli':\n        cliWarning();\n        error('Since Bref 2.0, the \"bref cli\" command has been moved. Read https://bref.sh/docs/runtimes/console#usage');\n    case 'layers':\n        cliWarning();\n        echo \"Bref layer ARNs can be found here: https://runtimes.bref.sh/\\n\\n\";\n        echo \"If you are using Serverless Framework, you can also run the 'serverless bref:layers' command.\\n\";\n        exit(1);\n    case 'local':\n        cliWarning();\n        error('Since Bref 2.0, the \"bref local\" command has been moved. Read https://bref.sh/docs/local-development/event-driven-functions\\n');\n    case 'dashboard':\n        cliWarning();\n        echo \"The Bref Dashboard is now available as a desktop application.\\n\\n\";\n        echo \"Check out https://dashboard.bref.sh/\\n\";\n        exit(1);\n    case '':\n        help();\n        break;\n    default:\n        error('Unknown command');\n}\n\nfunction help()\n{\n    echo \"Bref initialization command\\n\\n\";\n    echo \"Run 'bref init' to get started!\\n\";\n    exit(0);\n}\n\n/**\n * @return never-return\n */\nfunction error(string $message): void\n{\n    echo \"\\033[31m⨯ $message\\033[0m\" . PHP_EOL;\n    exit(1);\n}\n\nfunction warning(string $message): void\n{\n    echo \"\\033[33m$message\\033[0m\" . PHP_EOL;\n}\n\nfunction success(string $message): void\n{\n    echo green($message) . PHP_EOL;\n}\n\nfunction green(string $message): string\n{\n    return \"\\033[32m$message\\033[0m\";\n}\n\nfunction cliWarning(): void\n{\n    warning(\"Warning: the 'vendor/bin/bref' CLI has been removed in Bref 2.\" . PHP_EOL);\n}\n\n/**\n * Bref telemetry to estimate the number of users and which commands are most used.\n *\n * The data sent is anonymous, and sent over UDP.\n * Unlike TCP, UDP does not check that the message correctly arrived to the server.\n * It doesn't even establish a connection: the data is sent over the network and the code moves on to the next line.\n * That means that UDP is extremely fast (150 micro-seconds) and will not impact the CLI.\n * It can be disabled by setting the `SLS_TELEMETRY_DISABLED` environment variable to `1`.\n *\n * About UDP: https://en.wikipedia.org/wiki/User_Datagram_Protocol\n */\nfunction telemetry(): void\n{\n    global $argv;\n    // Respect the serverless framework env variable\n    if ($_SERVER['SLS_TELEMETRY_DISABLED'] ?? false) {\n        return;\n    }\n    // Support cases where the sockets extension is not installed\n    if (! function_exists('socket_create')) {\n        return;\n    }\n\n    // Read `~/.serverlessrc` if it exists\n    $userConfigPath = $_SERVER['HOME'] . '/.serverlessrc';\n    if (file_exists($userConfigPath)) {\n        $userConfig = json_decode(file_get_contents($userConfigPath), true, 512, JSON_THROW_ON_ERROR);\n    } else {\n        $userConfig = [];\n    }\n\n    // Check if we are running in CI\n    $ciVars = ['CI', 'CONTINUOUS_INTEGRATION', 'BUILD_NUMBER', 'CI_APP_ID', 'CI_NAME', 'RUN_ID', 'BUILD_ID'];\n    $ci = array_reduce($ciVars, function ($carry, $item) {\n        return $carry || (isset($_SERVER[$item]) && $_SERVER[$item]);\n    }, false);\n\n    $message = json_encode([\n        'cli' => 'vendor/bin/bref',\n        'v' => 2, // Bref version\n        'c' => $argv[1] ?? '',\n        'ci' => $ci,\n        // anonymous user ID created by the Serverless Framework\n        'uid' => $userConfig['frameworkId'] ?? '',\n    ], JSON_THROW_ON_ERROR);\n\n    $sock = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n    // This IP address is the Bref server.\n    // If this server is down or unreachable, there should be no difference in overhead\n    // or execution time.\n    socket_sendto($sock, $message, strlen($message), 0, '108.128.197.71', 8888);\n    socket_close($sock);\n}\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.1328125,
          "content": "{\n    \"name\": \"bref/bref\",\n    \"license\": \"MIT\",\n    \"type\": \"project\",\n    \"description\": \"Bref is a framework to write and deploy serverless PHP applications on AWS Lambda.\",\n    \"homepage\": \"https://bref.sh\",\n    \"keywords\": [\"bref\", \"serverless\", \"aws\", \"lambda\", \"faas\"],\n    \"autoload\": {\n        \"psr-4\": {\n            \"Bref\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Bref\\\\Test\\\\\": \"tests\"\n        }\n    },\n    \"bin\": [\n        \"bref\",\n        \"src/bref-local\"\n    ],\n    \"require\": {\n        \"php\": \">=8.0\",\n        \"ext-curl\": \"*\",\n        \"ext-json\": \"*\",\n        \"crwlr/query-string\": \"^1.0.3\",\n        \"hollodotme/fast-cgi-client\": \"^3.0.1\",\n        \"nyholm/psr7\": \"^1.4.1\",\n        \"psr/container\": \"^1.0|^2.0\",\n        \"psr/http-message\": \"^1.0|^2.0\",\n        \"psr/http-server-handler\": \"^1.0\",\n        \"riverline/multipart-parser\": \"^2.1.2\",\n        \"symfony/process\": \"^4.4|^5.0|^6.0|^7.0\"\n    },\n    \"require-dev\": {\n        \"async-aws/core\": \"^1.0\",\n        \"async-aws/lambda\": \"^1.0\",\n        \"aws/aws-sdk-php\": \"^3.172\",\n        \"bref/secrets-loader\": \"^1.0\",\n        \"dms/phpunit-arraysubset-asserts\": \"^0.4\",\n        \"doctrine/coding-standard\": \"^8.0\",\n        \"guzzlehttp/guzzle\": \"^7.5\",\n        \"phpstan/phpstan\": \"^1.10.26\",\n        \"phpunit/phpunit\": \"^9.6.10\",\n        \"symfony/console\": \"^4.4|^5.0|^6.0|^7.0\",\n        \"symfony/yaml\": \"^4.4|^5.0|^6.0|^7.0\"\n    },\n    \"scripts\": {\n        \"test\": [\n            \"@static-analysis\",\n            \"@unit-tests\",\n            \"@code-style\"\n        ],\n        \"code-style\": [\n            \"vendor/bin/phpcs\"\n        ],\n        \"static-analysis\": [\n            \"vendor/bin/phpstan analyse\"\n        ],\n        \"unit-tests\": [\n            \"vendor/bin/phpunit --testsuite small\"\n        ]\n    },\n    \"scripts-descriptions\": {\n        \"test\": \"Run the test suite\",\n        \"code-style\": \"Run code style checks using PHP_CodeSniffer\",\n        \"static-analysis\": \"Run static analysis using PHPStan\",\n        \"tests\": \"Run unit tests with PHPUnit\"\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"dealerdirect/phpcodesniffer-composer-installer\": true\n        }\n    }\n}\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 16.69140625,
          "content": "'use strict';\n\nconst {listLayers} = require('./plugin/layers');\nconst {runConsole} = require('./plugin/run-console');\nconst {runLocal} = require('./plugin/local');\nconst {warnIfUsingSecretsWithoutTheBrefDependency} = require('./plugin/secrets');\nconst fs = require('fs');\nconst path = require('path');\n\n// Disable `sls` promoting the Serverless Console because it's not compatible with PHP, it's tripping users up\nif (!process.env.SLS_NOTIFICATIONS_MODE) {\n    process.env.SLS_NOTIFICATIONS_MODE = 'upgrades-only';\n}\n\n/**\n * This file declares a plugin for the Serverless framework.\n *\n * This lets us define variables and helpers to simplify creating PHP applications.\n */\n\nclass ServerlessPlugin {\n    /**\n     * @param {import('./plugin/serverless').Serverless} serverless\n     * @param {import('./plugin/serverless').CliOptions} options\n     * @param {import('./plugin/serverless').ServerlessUtils} utils\n     */\n    constructor(serverless, options, utils) {\n        this.serverless = serverless;\n        this.provider = this.serverless.getProvider('aws');\n\n        if (!utils) {\n            throw new serverless.classes.Error('Bref requires Serverless Framework v3, but an older v2 version is running.\\nPlease upgrade to Serverless Framework v3.');\n        }\n        this.utils = utils;\n\n        // Automatically enable faster deployments (unless a value is already set)\n        // https://www.serverless.com/framework/docs/providers/aws/guide/deploying#deployment-method\n        if (! serverless.service.provider.deploymentMethod) {\n            serverless.service.provider.deploymentMethod = 'direct';\n        }\n\n        const filename = path.resolve(__dirname, 'layers.json');\n        /** @type {Record<string, Record<string, string>>} */\n        this.layers = JSON.parse(fs.readFileSync(filename).toString());\n\n        this.runtimes = Object.keys(this.layers)\n            .filter(name => !name.startsWith('arm-'));\n        // Console runtimes must have a PHP version provided\n        this.runtimes = this.runtimes.filter(name => name !== 'console');\n        this.runtimes.push('php-80-console', 'php-81-console', 'php-82-console', 'php-83-console', 'php-84-console');\n\n        this.checkCompatibleRuntime();\n\n        serverless.configSchemaHandler.schema.definitions.awsLambdaRuntime.enum.push(...this.runtimes);\n        serverless.configSchemaHandler.defineTopLevelProperty('bref', {\n            type: 'object',\n        });\n\n        // Declare `${bref:xxx}` variables\n        // See https://www.serverless.com/framework/docs/guides/plugins/custom-variables\n        // noinspection JSUnusedGlobalSymbols\n        /** @type {Record<string, import('./plugin/serverless').VariableResolver>} */\n        this.configurationVariablesSources = {\n            bref: {\n                resolve: async ({address, resolveConfigurationProperty, options}) => {\n                    // `address` and `params` reflect values configured with a variable: ${bref(param1, param2):address}\n\n                    // `options` is CLI options\n                    // `resolveConfigurationProperty` allows to access other configuration properties,\n                    // and guarantees to return a fully resolved form (even if property is configured with variables)\n                    /** @type {string} */\n                    // @ts-ignore\n                    const region = options.region || await resolveConfigurationProperty(['provider', 'region']);\n\n                    if (!address.startsWith('layer.')) {\n                        throw new serverless.classes.Error(`Unknown Bref variable \\${bref:${address}}, the only supported syntax right now is \\${bref:layer.XXX}`);\n                    }\n\n                    const layerName = address.substring('layer.'.length);\n                    return {\n                        value: this.getLayerArn(layerName, region),\n                    }\n                }\n            }\n        };\n\n        /** @type {import('./plugin/serverless').CommandsDefinition} */\n        this.commands = {\n            'bref:cli': {\n                usage: 'Runs a CLI command in AWS Lambda',\n                lifecycleEvents: ['run'],\n                options: {\n                    // Define the '--args' option with the '-a' shortcut\n                    args: {\n                        usage: 'Specify the arguments/options of the command to run on AWS Lambda',\n                        shortcut: 'a',\n                        type: 'string',\n                    },\n                    function: {\n                        usage: 'The name of the function to invoke (optional, auto-discovered by default)',\n                        shortcut: 'f',\n                        required: false,\n                        type: 'string',\n                    },\n                },\n            },\n            'bref:local': {\n                usage: 'Runs a PHP Lambda function locally (better alternative to \"serverless local\")',\n                lifecycleEvents: ['run'],\n                options: {\n                    function: {\n                        usage: 'The name of the function to invoke',\n                        shortcut: 'f',\n                        required: true,\n                        type: 'string',\n                    },\n                    data: {\n                        usage: 'The data (as a JSON string) to pass to the handler',\n                        shortcut: 'd',\n                        type: 'string',\n                    },\n                    path: {\n                        usage: 'Path to JSON or YAML file holding input data (use either this or --data)',\n                        shortcut: 'p',\n                        type: 'string',\n                    },\n                },\n            },\n            'bref:layers': {\n                usage: 'Displays the versions of the Bref layers',\n                lifecycleEvents: ['show'],\n            },\n        };\n\n        // noinspection JSUnusedGlobalSymbols\n        /** @type {import('./plugin/serverless').HooksDefinition} */\n        this.hooks = {\n            'initialize': () => {\n                this.processPhpRuntimes();\n                warnIfUsingSecretsWithoutTheBrefDependency(this.serverless, utils.log);\n                try {\n                    this.telemetry();\n                } catch (e) {\n                    // These errors should not stop the execution\n                    this.utils.log.verbose(`Could not send telemetry: ${e}`);\n                }\n            },\n            // Custom commands\n            'bref:cli:run': () => runConsole(this.serverless, options),\n            'bref:local:run': () => runLocal(this.serverless, options),\n            'bref:layers:show': () => listLayers(this.serverless, utils.log),\n            'before:logs:logs': () => {\n                utils.log(this.gray('View, tail, and search logs from all functions with https://dashboard.bref.sh'));\n                utils.log();\n            },\n            'before:metrics:metrics': () => {\n                utils.log(this.gray('View all your application\\'s metrics with https://dashboard.bref.sh'));\n                utils.log();\n            },\n        };\n\n        process.on('beforeExit', (code) => {\n            const command = serverless.processedInput.commands[0] || '';\n            // On successful deploy\n            if (command.startsWith('deploy') && code === 0) {\n                utils.log();\n                utils.log(this.gray('Want a better experience than the AWS console? Try out https://dashboard.bref.sh'));\n            }\n        });\n    }\n\n    /**\n     * Process the `php-xx` runtimes to turn them into `provided.al2` runtimes + Bref layers.\n     */\n    processPhpRuntimes() {\n        const includeBrefLayers = (runtime, existingLayers, isArm) => {\n            let layerName = runtime;\n            // Automatically use ARM layers if the function is deployed to an ARM architecture\n            if (isArm) {\n                layerName = 'arm-' + layerName;\n            }\n            if (layerName.endsWith('-console')) {\n                layerName = layerName.substring(0, layerName.length - '-console'.length);\n                existingLayers.unshift(this.getLayerArn('console', this.provider.getRegion()));\n                existingLayers.unshift(this.getLayerArn(layerName, this.provider.getRegion()));\n            } else {\n                existingLayers.unshift(this.getLayerArn(layerName, this.provider.getRegion()));\n            }\n            return existingLayers;\n        }\n\n        const config = this.serverless.service;\n        const isArmGlobally = config.provider.architecture === 'arm64';\n        const isBrefRuntimeGlobally = this.runtimes.includes(config.provider.runtime || '');\n\n        // Check functions config\n        for (const f of Object.values(config.functions || {})) {\n            if (\n              (f.runtime && this.runtimes.includes(f.runtime)) ||\n              (!f.runtime && isBrefRuntimeGlobally)\n            ) {\n                // The logic here is a bit custom:\n                // If there are layers on the function, we preserve them\n                let existingLayers = f.layers || []; // make sure it's an array\n                // Else, we merge with the layers defined at the root.\n                // Indeed, SF overrides the layers defined at the root with the ones defined on the function.\n                if (existingLayers.length === 0) {\n                    // for some reason it's not always an array\n                    existingLayers = Array.from(config.provider.layers || []);\n                }\n\n                f.layers = includeBrefLayers(\n                    f.runtime || config.provider.runtime,\n                    existingLayers,\n                    f.architecture === 'arm64' || (isArmGlobally && !f.architecture),\n                );\n                f.runtime = 'provided.al2';\n            }\n        }\n\n        // Check Lift constructs config\n        for (const construct of Object.values(this.serverless.configurationInput.constructs || {})) {\n            if (construct.type !== 'queue' && construct.type !== 'webhook') continue;\n            const f = construct.type === 'queue' ? construct.worker : construct.authorizer;\n            if (f && (f.runtime && this.runtimes.includes(f.runtime) || !f.runtime && isBrefRuntimeGlobally) ) {\n                f.layers = includeBrefLayers(\n                    f.runtime || config.provider.runtime,\n                    f.layers || [], // make sure it's an array\n                    f.architecture === 'arm64' || (isArmGlobally && !f.architecture),\n                );\n                f.runtime = 'provided.al2';\n            }\n        }\n    }\n\n    checkCompatibleRuntime() {\n        const errorMessage = 'Bref layers are not compatible with the \"provided\" runtime.\\nYou have to use the \"provided.al2\" runtime instead in serverless.yml.\\nMore details here: https://bref.sh/docs/news/01-bref-1.0.html#amazon-linux-2';\n        if (this.serverless.service.provider.runtime === 'provided') {\n            throw new this.serverless.classes.Error(errorMessage);\n        }\n        for (const [, f] of Object.entries(this.serverless.service.functions || {})) {\n            if (f.runtime === 'provided') {\n                throw new this.serverless.classes.Error(errorMessage);\n            }\n        }\n    }\n\n    /**\n     * @param {string} layerName\n     * @param {string} region\n     * @returns {string}\n     */\n    getLayerArn(layerName, region) {\n        if (! (layerName in this.layers)) {\n            throw new this.serverless.classes.Error(`Unknown Bref layer named \"${layerName}\".\\nIs that a typo? Check out https://bref.sh/docs/runtimes/ to see the correct name of Bref layers.`);\n        }\n        if (! (region in this.layers[layerName])) {\n            throw new this.serverless.classes.Error(`There is no Bref layer named \"${layerName}\" in region \"${region}\".\\nThat region may not be supported yet. Check out https://runtimes.bref.sh to see the list of supported regions.\\nOpen an issue to ask for that region to be supported: https://github.com/brefphp/bref/issues`);\n        }\n        const version = this.layers[layerName][region];\n        return `arn:aws:lambda:${region}:534081306603:layer:${layerName}:${version}`;\n    }\n\n    /**\n     * Bref telemetry to estimate the number of users and which commands are most used.\n     *\n     * The data sent is anonymous, and sent over UDP.\n     * Unlike TCP, UDP does not check that the message correctly arrived to the server.\n     * It doesn't even establish a connection: the data is sent over the network and the code moves on to the next line.\n     * That means that UDP is extremely fast (150 micro-seconds) and will not impact the CLI.\n     * It can be disabled by setting the `SLS_TELEMETRY_DISABLED` environment variable to `1`.\n     *\n     * About UDP: https://en.wikipedia.org/wiki/User_Datagram_Protocol\n     */\n    telemetry() {\n        // Respect the native env variable\n        if (process.env.SLS_TELEMETRY_DISABLED) {\n            return;\n        }\n\n        /** @type {{ get: (string) => string }} */\n        // @ts-ignore\n        const userConfig = require.main.require('@serverless/utils/config');\n        /** @type {typeof import('ci-info')} */\n        // @ts-ignore\n        const ci = require.main.require('ci-info');\n\n        let command = 'unknown';\n        if (this.serverless.processedInput && this.serverless.processedInput.commands) {\n            command = this.serverless.processedInput.commands.join(' ');\n        }\n\n        let timezone;\n        try {\n            timezone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n        } catch {\n            // Pass silently\n        }\n\n        const payload = {\n            cli: 'sls',\n            v: 2, // Bref version\n            c: command,\n            ci: ci.isCI,\n            install: userConfig.get('meta.created_at'),\n            uid: userConfig.get('frameworkId'), // anonymous user ID created by the Serverless Framework\n            tz: timezone,\n        };\n        const config = this.serverless.configurationInput;\n        /** @type {string[]} */\n        let plugins = [];\n        if (this.serverless.service.plugins && 'modules' in this.serverless.service.plugins) {\n            plugins = this.serverless.service.plugins.modules;\n        } else if (this.serverless.service.plugins) {\n            plugins = this.serverless.service.plugins;\n        }\n        // Lift construct types\n        if (plugins.includes('serverless-lift') && typeof config.constructs === 'object') {\n            payload.constructs = Object.values(config.constructs)\n                .map((construct) => (typeof construct === 'object' && construct.type) ? construct.type : null)\n                .filter(Boolean);\n        }\n\n        // PHP extensions\n        const extensionLayers = [];\n        const allLayers = [];\n        if (config.provider && config.provider.layers && Array.isArray(config.provider.layers)) {\n            allLayers.push(...config.provider.layers);\n        }\n        Object.values(config.functions || {}).forEach((f) => {\n            if (f.layers && Array.isArray(f.layers)) {\n                allLayers.push(...f.layers);\n            }\n        });\n        if (allLayers.length > 0) {\n            const layerRegex = /^arn:aws:lambda:[^:]+:403367587399:layer:([^:]+)-php-[^:]+:[^:]+$/;\n            /** @type {string[]} */\n            // @ts-ignore\n            const extensionLayerArns = allLayers\n                .filter((layer) => {\n                    return typeof layer === 'string'\n                        && layer.includes('403367587399');\n                });\n            for (const layer of extensionLayerArns) {\n                // Extract the layer name from the ARN.\n                // The ARN looks like this: arn:aws:lambda:us-east-2:403367587399:layer:amqp-php-81:12\n                const match = layer.match(layerRegex);\n                if (match && match[1] && ! extensionLayers.includes(match[1])) {\n                    extensionLayers.push(match[1]);\n                }\n            }\n        }\n        if (extensionLayers.length > 0) {\n            payload.ext = extensionLayers;\n        }\n\n        // Send as a UDP packet to 108.128.197.71:8888\n        const dgram = require('dgram');\n        const client = dgram.createSocket('udp4');\n        // This IP address is the Bref server.\n        // If this server is down or unreachable, there should be no difference in overhead\n        // or execution time.\n        client.send(JSON.stringify(payload), 8888, '108.128.197.71', (err) => {\n            if (err) {\n                // These errors should not stop the execution\n                this.utils.log.verbose(`Could not send telemetry: ${err.message}`);\n            }\n            try {\n                client.close();\n            } catch (e) {\n                // These errors should not stop the execution\n            }\n        });\n    }\n\n    /**\n     * @param {string} text\n     * @returns {string}\n     */\n    gray(text) {\n        const grayText = \"\\x1b[90m\";\n        const reset = \"\\x1b[0m\";\n        return `${grayText}${text}${reset}`;\n    }\n}\n\nmodule.exports = ServerlessPlugin;\n"
        },
        {
          "name": "layers.json",
          "type": "blob",
          "size": 13.482421875,
          "content": "{\n    \"php-84\": {\n        \"ca-central-1\": \"14\",\n        \"eu-central-1\": \"14\",\n        \"eu-north-1\": \"14\",\n        \"eu-west-1\": \"14\",\n        \"eu-west-2\": \"14\",\n        \"eu-west-3\": \"14\",\n        \"sa-east-1\": \"14\",\n        \"us-east-1\": \"14\",\n        \"us-east-2\": \"14\",\n        \"us-west-1\": \"14\",\n        \"us-west-2\": \"14\",\n        \"ap-east-1\": \"14\",\n        \"ap-south-1\": \"14\",\n        \"ap-northeast-1\": \"14\",\n        \"ap-northeast-2\": \"14\",\n        \"ap-northeast-3\": \"14\",\n        \"ap-southeast-1\": \"14\",\n        \"ap-southeast-2\": \"14\",\n        \"eu-south-1\": \"14\",\n        \"eu-south-2\": \"14\",\n        \"af-south-1\": \"14\",\n        \"me-south-1\": \"14\"\n    },\n    \"php-84-fpm\": {\n        \"ca-central-1\": \"14\",\n        \"eu-central-1\": \"14\",\n        \"eu-north-1\": \"14\",\n        \"eu-west-1\": \"14\",\n        \"eu-west-2\": \"14\",\n        \"eu-west-3\": \"14\",\n        \"sa-east-1\": \"14\",\n        \"us-east-1\": \"14\",\n        \"us-east-2\": \"14\",\n        \"us-west-1\": \"14\",\n        \"us-west-2\": \"14\",\n        \"ap-east-1\": \"14\",\n        \"ap-south-1\": \"14\",\n        \"ap-northeast-1\": \"14\",\n        \"ap-northeast-2\": \"14\",\n        \"ap-northeast-3\": \"14\",\n        \"ap-southeast-1\": \"14\",\n        \"ap-southeast-2\": \"14\",\n        \"eu-south-1\": \"14\",\n        \"eu-south-2\": \"14\",\n        \"af-south-1\": \"14\",\n        \"me-south-1\": \"14\"\n    },\n    \"php-83\": {\n        \"ca-central-1\": \"42\",\n        \"eu-central-1\": \"42\",\n        \"eu-north-1\": \"42\",\n        \"eu-west-1\": \"42\",\n        \"eu-west-2\": \"42\",\n        \"eu-west-3\": \"42\",\n        \"sa-east-1\": \"42\",\n        \"us-east-1\": \"42\",\n        \"us-east-2\": \"42\",\n        \"us-west-1\": \"42\",\n        \"us-west-2\": \"42\",\n        \"ap-east-1\": \"42\",\n        \"ap-south-1\": \"42\",\n        \"ap-northeast-1\": \"42\",\n        \"ap-northeast-2\": \"42\",\n        \"ap-northeast-3\": \"42\",\n        \"ap-southeast-1\": \"42\",\n        \"ap-southeast-2\": \"42\",\n        \"eu-south-1\": \"42\",\n        \"eu-south-2\": \"42\",\n        \"af-south-1\": \"42\",\n        \"me-south-1\": \"42\"\n    },\n    \"php-83-fpm\": {\n        \"ca-central-1\": \"42\",\n        \"eu-central-1\": \"42\",\n        \"eu-north-1\": \"42\",\n        \"eu-west-1\": \"42\",\n        \"eu-west-2\": \"42\",\n        \"eu-west-3\": \"42\",\n        \"sa-east-1\": \"42\",\n        \"us-east-1\": \"42\",\n        \"us-east-2\": \"42\",\n        \"us-west-1\": \"42\",\n        \"us-west-2\": \"42\",\n        \"ap-east-1\": \"42\",\n        \"ap-south-1\": \"42\",\n        \"ap-northeast-1\": \"42\",\n        \"ap-northeast-2\": \"42\",\n        \"ap-northeast-3\": \"42\",\n        \"ap-southeast-1\": \"42\",\n        \"ap-southeast-2\": \"42\",\n        \"eu-south-1\": \"42\",\n        \"eu-south-2\": \"42\",\n        \"af-south-1\": \"42\",\n        \"me-south-1\": \"42\"\n    },\n    \"php-82\": {\n        \"ca-central-1\": \"86\",\n        \"eu-central-1\": \"86\",\n        \"eu-north-1\": \"86\",\n        \"eu-west-1\": \"86\",\n        \"eu-west-2\": \"86\",\n        \"eu-west-3\": \"86\",\n        \"sa-east-1\": \"86\",\n        \"us-east-1\": \"86\",\n        \"us-east-2\": \"86\",\n        \"us-west-1\": \"86\",\n        \"us-west-2\": \"86\",\n        \"ap-east-1\": \"86\",\n        \"ap-south-1\": \"86\",\n        \"ap-northeast-1\": \"86\",\n        \"ap-northeast-2\": \"86\",\n        \"ap-northeast-3\": \"86\",\n        \"ap-southeast-1\": \"86\",\n        \"ap-southeast-2\": \"86\",\n        \"eu-south-1\": \"86\",\n        \"eu-south-2\": \"85\",\n        \"af-south-1\": \"86\",\n        \"me-south-1\": \"86\"\n    },\n    \"php-82-fpm\": {\n        \"ca-central-1\": \"86\",\n        \"eu-central-1\": \"86\",\n        \"eu-north-1\": \"86\",\n        \"eu-west-1\": \"86\",\n        \"eu-west-2\": \"86\",\n        \"eu-west-3\": \"86\",\n        \"sa-east-1\": \"86\",\n        \"us-east-1\": \"86\",\n        \"us-east-2\": \"86\",\n        \"us-west-1\": \"86\",\n        \"us-west-2\": \"86\",\n        \"ap-east-1\": \"86\",\n        \"ap-south-1\": \"86\",\n        \"ap-northeast-1\": \"86\",\n        \"ap-northeast-2\": \"86\",\n        \"ap-northeast-3\": \"86\",\n        \"ap-southeast-1\": \"86\",\n        \"ap-southeast-2\": \"86\",\n        \"eu-south-1\": \"86\",\n        \"eu-south-2\": \"85\",\n        \"af-south-1\": \"86\",\n        \"me-south-1\": \"86\"\n    },\n    \"php-81\": {\n        \"ca-central-1\": \"97\",\n        \"eu-central-1\": \"97\",\n        \"eu-north-1\": \"97\",\n        \"eu-west-1\": \"97\",\n        \"eu-west-2\": \"97\",\n        \"eu-west-3\": \"97\",\n        \"sa-east-1\": \"97\",\n        \"us-east-1\": \"97\",\n        \"us-east-2\": \"97\",\n        \"us-west-1\": \"97\",\n        \"us-west-2\": \"97\",\n        \"ap-east-1\": \"89\",\n        \"ap-south-1\": \"96\",\n        \"ap-northeast-1\": \"96\",\n        \"ap-northeast-2\": \"96\",\n        \"ap-northeast-3\": \"96\",\n        \"ap-southeast-1\": \"96\",\n        \"ap-southeast-2\": \"96\",\n        \"eu-south-1\": \"89\",\n        \"eu-south-2\": \"86\",\n        \"af-south-1\": \"89\",\n        \"me-south-1\": \"89\"\n    },\n    \"php-81-fpm\": {\n        \"ca-central-1\": \"96\",\n        \"eu-central-1\": \"96\",\n        \"eu-north-1\": \"97\",\n        \"eu-west-1\": \"97\",\n        \"eu-west-2\": \"96\",\n        \"eu-west-3\": \"96\",\n        \"sa-east-1\": \"96\",\n        \"us-east-1\": \"97\",\n        \"us-east-2\": \"96\",\n        \"us-west-1\": \"96\",\n        \"us-west-2\": \"97\",\n        \"ap-east-1\": \"89\",\n        \"ap-south-1\": \"95\",\n        \"ap-northeast-1\": \"96\",\n        \"ap-northeast-2\": \"95\",\n        \"ap-northeast-3\": \"95\",\n        \"ap-southeast-1\": \"95\",\n        \"ap-southeast-2\": \"95\",\n        \"eu-south-1\": \"88\",\n        \"eu-south-2\": \"85\",\n        \"af-south-1\": \"88\",\n        \"me-south-1\": \"88\"\n    },\n    \"php-80\": {\n        \"ca-central-1\": \"100\",\n        \"eu-central-1\": \"99\",\n        \"eu-north-1\": \"100\",\n        \"eu-west-1\": \"100\",\n        \"eu-west-2\": \"100\",\n        \"eu-west-3\": \"100\",\n        \"sa-east-1\": \"100\",\n        \"us-east-1\": \"100\",\n        \"us-east-2\": \"100\",\n        \"us-west-1\": \"100\",\n        \"us-west-2\": \"100\",\n        \"ap-east-1\": \"90\",\n        \"ap-south-1\": \"99\",\n        \"ap-northeast-1\": \"97\",\n        \"ap-northeast-2\": \"96\",\n        \"ap-northeast-3\": \"97\",\n        \"ap-southeast-1\": \"96\",\n        \"ap-southeast-2\": \"98\",\n        \"eu-south-1\": \"90\",\n        \"eu-south-2\": \"86\",\n        \"af-south-1\": \"90\",\n        \"me-south-1\": \"90\"\n    },\n    \"php-80-fpm\": {\n        \"ca-central-1\": \"97\",\n        \"eu-central-1\": \"97\",\n        \"eu-north-1\": \"97\",\n        \"eu-west-1\": \"97\",\n        \"eu-west-2\": \"97\",\n        \"eu-west-3\": \"97\",\n        \"sa-east-1\": \"97\",\n        \"us-east-1\": \"97\",\n        \"us-east-2\": \"97\",\n        \"us-west-1\": \"97\",\n        \"us-west-2\": \"97\",\n        \"ap-east-1\": \"89\",\n        \"ap-south-1\": \"96\",\n        \"ap-northeast-1\": \"96\",\n        \"ap-northeast-2\": \"96\",\n        \"ap-northeast-3\": \"96\",\n        \"ap-southeast-1\": \"96\",\n        \"ap-southeast-2\": \"96\",\n        \"eu-south-1\": \"89\",\n        \"eu-south-2\": \"86\",\n        \"af-south-1\": \"89\",\n        \"me-south-1\": \"89\"\n    },\n    \"arm-php-84\": {\n        \"ca-central-1\": \"14\",\n        \"eu-central-1\": \"14\",\n        \"eu-north-1\": \"14\",\n        \"eu-west-1\": \"14\",\n        \"eu-west-2\": \"14\",\n        \"eu-west-3\": \"14\",\n        \"sa-east-1\": \"14\",\n        \"us-east-1\": \"14\",\n        \"us-east-2\": \"14\",\n        \"us-west-1\": \"14\",\n        \"us-west-2\": \"14\",\n        \"ap-east-1\": \"14\",\n        \"ap-south-1\": \"14\",\n        \"ap-northeast-1\": \"14\",\n        \"ap-northeast-2\": \"14\",\n        \"ap-northeast-3\": \"14\",\n        \"ap-southeast-1\": \"14\",\n        \"ap-southeast-2\": \"14\",\n        \"eu-south-1\": \"14\",\n        \"eu-south-2\": \"14\",\n        \"af-south-1\": \"14\",\n        \"me-south-1\": \"14\"\n    },\n    \"arm-php-84-fpm\": {\n        \"ca-central-1\": \"14\",\n        \"eu-central-1\": \"14\",\n        \"eu-north-1\": \"14\",\n        \"eu-west-1\": \"14\",\n        \"eu-west-2\": \"14\",\n        \"eu-west-3\": \"14\",\n        \"sa-east-1\": \"14\",\n        \"us-east-1\": \"14\",\n        \"us-east-2\": \"14\",\n        \"us-west-1\": \"14\",\n        \"us-west-2\": \"14\",\n        \"ap-east-1\": \"14\",\n        \"ap-south-1\": \"14\",\n        \"ap-northeast-1\": \"14\",\n        \"ap-northeast-2\": \"14\",\n        \"ap-northeast-3\": \"14\",\n        \"ap-southeast-1\": \"14\",\n        \"ap-southeast-2\": \"14\",\n        \"eu-south-1\": \"14\",\n        \"eu-south-2\": \"14\",\n        \"af-south-1\": \"14\",\n        \"me-south-1\": \"14\"\n    },\n    \"arm-php-83\": {\n        \"ca-central-1\": \"42\",\n        \"eu-central-1\": \"42\",\n        \"eu-north-1\": \"42\",\n        \"eu-west-1\": \"42\",\n        \"eu-west-2\": \"42\",\n        \"eu-west-3\": \"42\",\n        \"sa-east-1\": \"42\",\n        \"us-east-1\": \"42\",\n        \"us-east-2\": \"42\",\n        \"us-west-1\": \"42\",\n        \"us-west-2\": \"42\",\n        \"ap-east-1\": \"42\",\n        \"ap-south-1\": \"42\",\n        \"ap-northeast-1\": \"42\",\n        \"ap-northeast-2\": \"42\",\n        \"ap-northeast-3\": \"42\",\n        \"ap-southeast-1\": \"42\",\n        \"ap-southeast-2\": \"42\",\n        \"eu-south-1\": \"42\",\n        \"eu-south-2\": \"42\",\n        \"af-south-1\": \"42\",\n        \"me-south-1\": \"42\"\n    },\n    \"arm-php-83-fpm\": {\n        \"ca-central-1\": \"41\",\n        \"eu-central-1\": \"41\",\n        \"eu-north-1\": \"41\",\n        \"eu-west-1\": \"41\",\n        \"eu-west-2\": \"41\",\n        \"eu-west-3\": \"41\",\n        \"sa-east-1\": \"41\",\n        \"us-east-1\": \"42\",\n        \"us-east-2\": \"41\",\n        \"us-west-1\": \"41\",\n        \"us-west-2\": \"41\",\n        \"ap-east-1\": \"41\",\n        \"ap-south-1\": \"41\",\n        \"ap-northeast-1\": \"41\",\n        \"ap-northeast-2\": \"41\",\n        \"ap-northeast-3\": \"41\",\n        \"ap-southeast-1\": \"41\",\n        \"ap-southeast-2\": \"41\",\n        \"eu-south-1\": \"41\",\n        \"eu-south-2\": \"41\",\n        \"af-south-1\": \"41\",\n        \"me-south-1\": \"41\"\n    },\n    \"arm-php-82\": {\n        \"ca-central-1\": \"74\",\n        \"eu-central-1\": \"74\",\n        \"eu-north-1\": \"74\",\n        \"eu-west-1\": \"74\",\n        \"eu-west-2\": \"74\",\n        \"eu-west-3\": \"74\",\n        \"sa-east-1\": \"74\",\n        \"us-east-1\": \"74\",\n        \"us-east-2\": \"74\",\n        \"us-west-1\": \"74\",\n        \"us-west-2\": \"74\",\n        \"ap-east-1\": \"74\",\n        \"ap-south-1\": \"74\",\n        \"ap-northeast-1\": \"74\",\n        \"ap-northeast-2\": \"74\",\n        \"ap-northeast-3\": \"74\",\n        \"ap-southeast-1\": \"74\",\n        \"ap-southeast-2\": \"74\",\n        \"eu-south-1\": \"74\",\n        \"eu-south-2\": \"74\",\n        \"af-south-1\": \"74\",\n        \"me-south-1\": \"74\"\n    },\n    \"arm-php-82-fpm\": {\n        \"ca-central-1\": \"74\",\n        \"eu-central-1\": \"74\",\n        \"eu-north-1\": \"74\",\n        \"eu-west-1\": \"74\",\n        \"eu-west-2\": \"74\",\n        \"eu-west-3\": \"74\",\n        \"sa-east-1\": \"74\",\n        \"us-east-1\": \"74\",\n        \"us-east-2\": \"74\",\n        \"us-west-1\": \"74\",\n        \"us-west-2\": \"74\",\n        \"ap-east-1\": \"74\",\n        \"ap-south-1\": \"74\",\n        \"ap-northeast-1\": \"74\",\n        \"ap-northeast-2\": \"74\",\n        \"ap-northeast-3\": \"74\",\n        \"ap-southeast-1\": \"74\",\n        \"ap-southeast-2\": \"74\",\n        \"eu-south-1\": \"74\",\n        \"eu-south-2\": \"74\",\n        \"af-south-1\": \"74\",\n        \"me-south-1\": \"74\"\n    },\n    \"arm-php-81\": {\n        \"ca-central-1\": \"77\",\n        \"eu-central-1\": \"77\",\n        \"eu-north-1\": \"77\",\n        \"eu-west-1\": \"77\",\n        \"eu-west-2\": \"77\",\n        \"eu-west-3\": \"77\",\n        \"sa-east-1\": \"77\",\n        \"us-east-1\": \"77\",\n        \"us-east-2\": \"77\",\n        \"us-west-1\": \"77\",\n        \"us-west-2\": \"77\",\n        \"ap-east-1\": \"77\",\n        \"ap-south-1\": \"77\",\n        \"ap-northeast-1\": \"77\",\n        \"ap-northeast-2\": \"77\",\n        \"ap-northeast-3\": \"77\",\n        \"ap-southeast-1\": \"77\",\n        \"ap-southeast-2\": \"77\",\n        \"eu-south-1\": \"77\",\n        \"eu-south-2\": \"77\",\n        \"af-south-1\": \"77\",\n        \"me-south-1\": \"77\"\n    },\n    \"arm-php-81-fpm\": {\n        \"ca-central-1\": \"77\",\n        \"eu-central-1\": \"77\",\n        \"eu-north-1\": \"77\",\n        \"eu-west-1\": \"77\",\n        \"eu-west-2\": \"77\",\n        \"eu-west-3\": \"77\",\n        \"sa-east-1\": \"77\",\n        \"us-east-1\": \"77\",\n        \"us-east-2\": \"77\",\n        \"us-west-1\": \"77\",\n        \"us-west-2\": \"77\",\n        \"ap-east-1\": \"77\",\n        \"ap-south-1\": \"77\",\n        \"ap-northeast-1\": \"77\",\n        \"ap-northeast-2\": \"77\",\n        \"ap-northeast-3\": \"77\",\n        \"ap-southeast-1\": \"77\",\n        \"ap-southeast-2\": \"77\",\n        \"eu-south-1\": \"77\",\n        \"eu-south-2\": \"77\",\n        \"af-south-1\": \"77\",\n        \"me-south-1\": \"77\"\n    },\n    \"arm-php-80\": {\n        \"ca-central-1\": \"99\",\n        \"eu-central-1\": \"98\",\n        \"eu-north-1\": \"99\",\n        \"eu-west-1\": \"99\",\n        \"eu-west-2\": \"99\",\n        \"eu-west-3\": \"99\",\n        \"sa-east-1\": \"99\",\n        \"us-east-1\": \"99\",\n        \"us-east-2\": \"99\",\n        \"us-west-1\": \"99\",\n        \"us-west-2\": \"99\",\n        \"ap-east-1\": \"91\",\n        \"ap-south-1\": \"98\",\n        \"ap-northeast-1\": \"98\",\n        \"ap-northeast-2\": \"98\",\n        \"ap-northeast-3\": \"98\",\n        \"ap-southeast-1\": \"98\",\n        \"ap-southeast-2\": \"98\",\n        \"eu-south-1\": \"91\",\n        \"eu-south-2\": \"87\",\n        \"af-south-1\": \"91\",\n        \"me-south-1\": \"91\"\n    },\n    \"arm-php-80-fpm\": {\n        \"ca-central-1\": \"98\",\n        \"eu-central-1\": \"97\",\n        \"eu-north-1\": \"98\",\n        \"eu-west-1\": \"98\",\n        \"eu-west-2\": \"97\",\n        \"eu-west-3\": \"97\",\n        \"sa-east-1\": \"97\",\n        \"us-east-1\": \"98\",\n        \"us-east-2\": \"98\",\n        \"us-west-1\": \"97\",\n        \"us-west-2\": \"98\",\n        \"ap-east-1\": \"90\",\n        \"ap-south-1\": \"96\",\n        \"ap-northeast-1\": \"97\",\n        \"ap-northeast-2\": \"96\",\n        \"ap-northeast-3\": \"96\",\n        \"ap-southeast-1\": \"96\",\n        \"ap-southeast-2\": \"96\",\n        \"eu-south-1\": \"89\",\n        \"eu-south-2\": \"86\",\n        \"af-south-1\": \"90\",\n        \"me-south-1\": \"89\"\n    },\n    \"console\": {\n        \"ca-central-1\": \"95\",\n        \"eu-central-1\": \"95\",\n        \"eu-north-1\": \"95\",\n        \"eu-west-1\": \"95\",\n        \"eu-west-2\": \"95\",\n        \"eu-west-3\": \"95\",\n        \"sa-east-1\": \"95\",\n        \"us-east-1\": \"95\",\n        \"us-east-2\": \"95\",\n        \"us-west-1\": \"95\",\n        \"us-west-2\": \"95\",\n        \"ap-east-1\": \"87\",\n        \"ap-south-1\": \"94\",\n        \"ap-northeast-1\": \"94\",\n        \"ap-northeast-2\": \"94\",\n        \"ap-northeast-3\": \"94\",\n        \"ap-southeast-1\": \"94\",\n        \"ap-southeast-2\": \"94\",\n        \"eu-south-1\": \"87\",\n        \"eu-south-2\": \"84\",\n        \"af-south-1\": \"87\",\n        \"me-south-1\": \"87\"\n    }\n}"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.6396484375,
          "content": "{\n    \"type\": \"commonjs\",\n    \"scripts\": {\n        \"lint\": \"tsc && eslint .\",\n        \"prettify\": \"prettier --write --ignore-path .gitignore \\\"**/*.{css,html,js,json,md,yaml,yml}\\\"\"\n    },\n    \"devDependencies\": {\n        \"@serverless/typescript\": \"^3.30.1\",\n        \"@types/ci-info\": \"^3.1.0\",\n        \"@types/node\": \"^20.3.1\",\n        \"@typescript-eslint/eslint-plugin\": \"^5.59.11\",\n        \"@typescript-eslint/parser\": \"^5.59.11\",\n        \"eslint\": \"^8.43.0\",\n        \"eslint-config-prettier\": \"^8.8.0\",\n        \"eslint-plugin-import\": \"^2.27.5\",\n        \"prettier\": \"^2.8.8\"\n    },\n    \"dependencies\": {\n        \"@headlessui/react\": \"^1.7.17\"\n    }\n}\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.2197265625,
          "content": "parameters:\n  level: 5\n  paths:\n    - bref\n    - src\n    - tests\n  excludePaths:\n    - %rootDir%/../../../tests/Sam/Php/*\n    - %rootDir%/../../../tests/Sam/PhpFpm/*\n    - %rootDir%/../../../tests/FpmRuntime/Functional/fpm/*\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.712890625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" colors=\"true\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\" bootstrap=\"./vendor/autoload.php\">\n  <coverage processUncoveredFiles=\"true\">\n    <include>\n      <directory suffix=\".php\">src</directory>\n    </include>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"small\">\n      <directory>./tests/</directory>\n      <exclude>./tests/Sam</exclude>\n      <exclude>./tests/Fixtures</exclude>\n    </testsuite>\n    <testsuite name=\"runtimes\">\n      <directory>./tests/Sam</directory>\n    </testsuite>\n  </testsuites>\n  <php>\n    <env name=\"AWS_REGION\" value=\"eu-west-1\" force=\"true\" />\n  </php>\n</phpunit>\n"
        },
        {
          "name": "plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "serverless.yml",
          "type": "blob",
          "size": 1.3408203125,
          "content": "service: bref-demo\n\nprovider:\n    name: aws\n    region: us-east-2\n    logRetentionInDays: 7\n    versionFunctions: false\n    apiGateway:\n        binaryMediaTypes:\n            - '*/*'\n\nplugins:\n    - ./index.js\n\npackage:\n    patterns:\n        - '!**'\n        - 'demo/**'\n        - 'src/**'\n        - 'vendor/**'\n        - '!vendor/squizlabs/**'\n        - '!vendor/slevomat/**'\n        - '!vendor/nikic/**'\n\nfunctions:\n    function:\n        handler: demo/function.php\n        runtime: php-83\n        description: 'Bref function demo'\n        environment:\n            BREF_LOOP_MAX: 100\n\n    http:\n        handler: demo/http.php\n        runtime: php-83-fpm\n        architecture: arm64\n        description: 'Bref HTTP demo'\n        timeout: 5 # in seconds (API Gateway has a timeout of 29 seconds)\n        events:\n            -   http: 'ANY /'\n            -   httpApi: '*'\n\n    psr7:\n        handler: demo/psr7.php\n        runtime: php-83\n        description: 'Bref HTTP demo with a PSR-7 handler'\n        timeout: 5 # in seconds (API Gateway has a timeout of 29 seconds)\n        url: true\n        events:\n            -   http: 'ANY /psr7'\n            -   httpApi: 'GET /psr7'\n        environment:\n            #BREF_LOOP_MAX: 100\n\n    console:\n        handler: demo/console.php\n        runtime: php-83-console\n        description: 'Bref console command demo'\n        timeout: 5\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "template",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.2998046875,
          "content": "{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"target\": \"es2019\",\n    \"esModuleInterop\": true,\n    \"noEmit\": true,\n    \"allowJs\": true,\n    \"checkJs\": true,\n    \"resolveJsonModule\": true,\n    \"strictNullChecks\": true,\n    \"skipLibCheck\": true\n  },\n  \"include\": [\n    \"index.js\",\n    \"plugin\",\n  ]\n}"
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}