{
  "metadata": {
    "timestamp": 1736712092557,
    "page": 656,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "neitanod/forceutf8",
      "stars": 1633,
      "defaultBranch": "master",
      "files": [
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.474609375,
          "content": "forceutf8\n=========\n\nPHP Class Encoding featuring popular \\ForceUTF8\\Encoding::toUTF8() function --formerly known as forceUTF8()-- that fixes mixed encoded strings.\n\nDescription\n===========\n\nIf you apply the PHP function utf8_encode() to an already-UTF8 string it will return a garbled UTF8 string.\n\nThis class addresses this issue and provides a handy static function called \\ForceUTF8\\Encoding::toUTF8().\n\nYou don't need to know what the encoding of your strings is. It can be Latin1 (ISO 8859-1), Windows-1252 or UTF8, or the string can have a mix of them. \\ForceUTF8\\Encoding::toUTF8() will convert everything to UTF8.\n\nSometimes you have to deal with services that are unreliable in terms of encoding, possibly mixing UTF8 and Latin1 in the same string.\n\nUpdate:\n\nI've included another function, \\ForceUTF8\\Encoding::fixUTF8(), which will fix the double (or multiple) encoded UTF8 string that looks garbled.\n\nUsage:\n======\n\n    use \\ForceUTF8\\Encoding;\n\n    $utf8_string = Encoding::toUTF8($utf8_or_latin1_or_mixed_string);\n\n    $latin1_string = Encoding::toLatin1($utf8_or_latin1_or_mixed_string);\n\nalso:\n\n    $utf8_string = Encoding::fixUTF8($garbled_utf8_string);\n\nExamples:\n\n    use \\ForceUTF8\\Encoding;\n\n    echo Encoding::fixUTF8(\"FÃÂ©dération Camerounaise de Football\\n\");\n    echo Encoding::fixUTF8(\"FÃ©dÃ©ration Camerounaise de Football\\n\");\n    echo Encoding::fixUTF8(\"FÃÂ©dÃÂ©ration Camerounaise de Football\\n\");\n    echo Encoding::fixUTF8(\"FÃÂÂÂÂ©dÃÂÂÂÂ©ration Camerounaise de Football\\n\");\n\nwill output:\n\n    Fédération Camerounaise de Football\n    Fédération Camerounaise de Football\n    Fédération Camerounaise de Football\n    Fédération Camerounaise de Football\n    \nOptions:\n========\nBy default, `Encoding::fixUTF8` will use the `Encoding::WITHOUT_ICONV` flag, signalling that iconv should not be used to fix garbled UTF8 strings.\n\nThis class also provides options for iconv processing, such as `Encoding::ICONV_TRANSLIT` and `Encoding::ICONV_IGNORE` to enable these flags when the iconv class is utilized. The functionality of such flags are documented in the [PHP iconv documentation](http://php.net/manual/en/function.iconv.php).\n\nExamples:\n\n    use \\ForceUTF8\\Encoding;\n    \n    $str = \"FÃÂ©dération Camerounaise—de—Football\\n\"; // Uses U+2014 which is invalid ISO8859-1 but exists in Win1252\n    echo Encoding::fixUTF8($str); // Will break U+2014\n    echo Encoding::fixUTF8($str, Encoding::ICONV_IGNORE); // Will preserve U+2014\n    echo Encoding::fixUTF8($str, Encoding::ICONV_TRANSLIT); // Will preserve U+2014\n\nwill output:\n\n    Fédération Camerounaise?de?Football\n    Fédération Camerounaise—de—Football\n    Fédération Camerounaise—de—Football\n\nwhile:\n\n    use \\ForceUTF8\\Encoding;\n\n    $str = \"čęėįšųūž\"; // Uses several characters not present in ISO8859-1 / Win1252\n    echo Encoding::fixUTF8($str); // Will break invalid characters\n    echo Encoding::fixUTF8($str, Encoding::ICONV_IGNORE); // Will remove invalid characters, keep those present in Win1252\n    echo Encoding::fixUTF8($str, Encoding::ICONV_TRANSLIT); // Will trasliterate invalid characters, keep those present in Win1252\n\nwill output:\n\n    ????????\n    šž\n    ceeišuuž\n\n\nInstall via composer:\n=====================\nEdit your composer.json file to include the following:\n\n```json\n{\n    \"require\": {\n        \"neitanod/forceutf8\": \"~2.0\"\n    }\n}\n```\n\nTips:\n=====\nYou can tip me with Bitcoin if you want. :)\n\n<img src=\"resources/wallet.jpg\" width=\"225\" alt=\"1Awfu4TZpy99H7Pyzt1mooxU1aP2mJVdHP\">\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.556640625,
          "content": "{\n    \"name\": \"neitanod/forceutf8\",\n    \"homepage\": \"https://github.com/neitanod/forceutf8\",\n    \"license\": \"BSD-3-Clause\",\n    \"type\": \"library\",\n    \"description\": \"PHP Class Encoding featuring popular Encoding::toUTF8() function --formerly known as forceUTF8()-- that fixes mixed encoded strings.\",\n    \"require\": {\n        \"php\": \">=5.3.0\"\n    },\n    \"authors\": [\n        {\n            \"name\":  \"Sebastián Grignoli\",\n            \"email\": \"grignoli@gmail.com\"\n        }\n    ],\n    \"autoload\": {\n        \"psr-0\": {\n            \"ForceUTF8\\\\\": \"src/\"\n        }\n    }\n}\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}