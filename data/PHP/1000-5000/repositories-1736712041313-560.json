{
  "metadata": {
    "timestamp": 1736712041313,
    "page": 560,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "namshi/jose",
      "stars": 1798,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveralls.yml",
          "type": "blob",
          "size": 0.0615234375,
          "content": "service_name: travis-ci\ncoverage_clover: build/logs/clover.xml\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0263671875,
          "content": "build\ncomposer.lock\nvendor\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.3330078125,
          "content": "language: php\n\nphp:\n    - 5.5\n    - 5.6\n    - 7.0\n    - 7.1\n    - 7.2\n    - hhvm\n\nsudo: false\n\ninstall: travis_retry composer install --no-interaction --prefer-source\n\nbefore_script: mkdir -p build/logs\n\nscript: php vendor/bin/phpunit -c phpunit.xml.dist --coverage-clover ./build/logs/clover.xml\n\nafter_success: php vendor/bin/coveralls -v\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.9765625,
          "content": "### 6.1.0\n\n- Dropped support for PHP 5.4\n- phpseclib ~2.0.x\n\n### 6.0.4\n\n- Added styleci config, add styleci-php-cs bridge to check formatting\n- Removed composer.lock\n- Fix #34: strlen() and substr() can misbehave with mbstring.func_overload\n- Fix: Don't cast to boolean the result of openssl_verify()\n- Enhancement: support phpseclib 1.x.x\n\n### 6.x.x - Not Backwards Compatible\n\n- Dropped support for PHP 5.3\n- Don't escape slashes when generating signin input.\n  This may render tokens generated with earlier versions of Jose incompatible.\n- **DON'T** install version 6.0.2! It's using phpseclib version 2 instead of version 1 and some classes are broken\n\n### 3.x.x to 4.x.x - Not Backwards Compatible\n\nAdded the ability to set custom properties in the header. Moved automatic inclusion of certain claims into an SimpleJWS class from the base JWS class.\n\n### 2.x.x to 3.x.x\n\nIntroduced the ability to specify an encryption engine. Added support of PHPSecLib to the existing OpenSSL implementation.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License\n\nCopyright (c) 2014 Alessandro Nadalin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.017578125,
          "content": "# NAMSHI | JOSE\n\n## Deprecation notice\n\n> Hi there,\n>\n> as much as we'd like to be able to work on all of the OSS in the world,\n> we don't actively use this library anymore\n> This means that new features / bugfixes / etc will\n> only be merged based on pull requests from external contributors, and\n> we strongly recommend you look for a long-term alternative.\n> \n> If you're looking for an actively maintained library check\n> [firebase/php-jwt](https://github.com/firebase/php-jwt) out!\n\n[![Build Status](https://travis-ci.org/namshi/jose.svg)](https://travis-ci.org/namshi/jose)\n[![Latest Stable Version](https://poser.pugx.org/namshi/jose/v/stable)](https://packagist.org/packages/namshi/jose)\n[![Total Downloads](https://poser.pugx.org/namshi/jose/downloads)](https://packagist.org/packages/namshi/jose)\n[![License](https://poser.pugx.org/namshi/jose/license)](https://packagist.org/packages/namshi/jose)\n\nThis library provides a lightweight\nimplementation of the JWS\n([JSON Web Signature](http://tools.ietf.org/html/draft-jones-json-web-signature-04)) specification.\n\n## Prerequisites\n\nThis library needs PHP 5.5+ and the library OpenSSL.\n\nIt has been tested using `PHP5.5` to `PHP7.0` and `HHVM`.\n\n\n## Installation\n\nYou can install the library directly from\ncomposer / [packagist](https://packagist.org/packages/namshi/jose):\n\n```\n\"namshi/jose\": \"7.0.*\"\n```\n\n## Usage\n\nUsing it is pretty straightforward:\nimagine that you want to offer a service\nthe ability to authenticate a user via\na cookie, and the service is built with\njavascript; what you would need to do is\nto generate a JWS (after verifying the\ncredentials once), store it as a cookie\nand then pass it from your JavaScript app\neverytime you want to authenticate that\nuser.\n\nFirst, generate the JWS:\n\n``` php\n<?php\n\nuse Namshi\\JOSE\\SimpleJWS;\n\nif ($username == 'correctUsername' && $pass == 'ok') {\n\t$user = Db::loadUserByUsername($username);\n\n\t$jws  = new SimpleJWS(array(\n\t\t'alg' => 'RS256'\n\t));\n\t$jws->setPayload(array(\n\t\t'uid' => $user->getid(),\n\t));\n\n    $privateKey = openssl_pkey_get_private(\"file://path/to/private.key\", self::SSL_KEY_PASSPHRASE);\n    $jws->sign($privateKey);\n    setcookie('identity', $jws->getTokenString());\n}\n```\n\nThen your JS app can use the available cookie to execute\nauthenticated calls, without sending passwords or credentials.\n\nOnce a request is submitted, you only have to verify that it\nis a valid call:\n\n``` php\n<?php\n\nuse Namshi\\JOSE\\SimpleJWS;\n\n$jws        = SimpleJWS::load($_COOKIE['identity']);\n$public_key = openssl_pkey_get_public(\"/path/to/public.key\");\n\n// verify that the token is valid and had the same values\n// you emitted before while setting it as a cookie\nif ($jws->isValid($public_key, 'RS256')) {\n\t$payload = $jws->getPayload();\n\n\techo sprintf(\"Hey, my JS app just did an action authenticated as user #%s\", $payload['uid']);\n}\n```\n\n> PROTIP: you can omit the second argument of the isValid() method, so jose will try to validate the token with the algorithm specified in the token's header, though this might expose you to some security issues.\n>\n> For now we recommend to always explicitely set the algorithm you want to use to validate tokens.\n\n### PHPSECLIB For RSA Verification\n\nYou may find that you need to use this library in an environment where\n[PHP's wrappers for OpenSSL](http://php.net/manual/en/ref.openssl.php)\ndo not work, or OpenSSL simply is not installed.  This library uses\nOpenSSL to encrypt by default, but you can specify that you want to use [PHPSecLib](http://phpseclib.sourceforge.net/) for a pure PHP\nimplementation of RSA encryption.\n\nIn these cases, simply add the optional `'SecLib'` parameter when\nconstructing a JWS:\n\n```php\n$jws = new JWS(array('alg' => 'RS256'), 'SecLib');\n```\n\nYou can now use the PHPSecLib implementation of RSA signing.  If you use\na password protected private key, you can still submit the private key\nto use for signing as a string, as long as you pass the password as the\nsecond parameter into the `sign` method:\n\n```php\n$jws->sign(file_get_contents(SSL_KEYS_PATH . \"private.key\"), 'tests');\n```\n\nYou may also load a JWS using the PHPSecLib implementation of RSA verification:\n\n```php\n$jws = JWS::load($tokenString, false, $encoder, 'SecLib');\n```\n\n## Under the hood\n\nIn order to [validate the JWS](https://github.com/namshi/jose/blob/master/src/Namshi/JOSE/SimpleJWS.php#L43),\nthe signature is first [verified](https://github.com/namshi/jose/blob/master/src/Namshi/JOSE/JWS.php#L113)\nwith a public key and then we will check whether the [token is expired](https://github.com/namshi/jose/blob/master/src/Namshi/JOSE/SimpleJWS.php#L55).\n\nTo give a JWS a TTL, just use the standard `exp` value in the payload:\n\n``` php\n$date    \t= new DateTime('tomorrow');\n$this->jws  = new SimpleJWS(array('alg' => 'RS256'));\n$this->jws->setPayload(array(\n\t'exp' => $date->format('U'),\n));\n```\n\n### Unsecure JWSes\n\nYou can allow [unsecure JWSes](https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40#page-12)\nby setting the `$allowUnsecure` flag while loading JWSes:\n\n``` php\nJWS::load($this->jws->getTokenString(), true);\n```\n\nThis allows tokens signed with the 'none' algorithms to go through, which is something\nyou probably don't want to do. Proceed with caution :)\n\n**Unsecure JWSes are disabled by default since version 2.2.2. You should **not**\nuse previous versions other than 2.2.2 as they have a security\nvulnerability. More info [here](http://tech.namshi.com/blog/2015/02/19/update-your-namshi-slash-jose-installations-as-a-security-vulnerability-was-found/).**\n\n## Using a custom encoder\n\nIf, for some reason, you need to encode the token in a different way, you can\ninject any implementation of `Namshi\\JOSE\\Base64\\Encoder` in a `JWS` instance.\nLikewise, `JWS::load()` accepts such an implementation as a second argument.\n\n## Implementation Specifics\n\nThe library provides a base JWT Class that implements what is needed just for JSON Web Tokens. The JWS Class then extends\nthe JWT class and adds the implementation for signing and verifying using JSON Web Signatures. The SimpleJWS class extends\nthe base JWS class and adds validation of a TTL and inclusion of automatic claims.\n\n## Major Versions\n\n### 2.x.x to 3.x.x\n\nIntroduced the ability to specify an encryption engine. Added support of PHPSecLib to the existing OpenSSL implementation.\n\n### 3.x.x to 4.x.x - Not Backwards Compatible\n\nAdded the ability to set custom properties in the header. Moved automatic inclusion of certain claims into an SimpleJWS class from the base JWS class.\n\n### 6.x.x - Not Backwards Compatible\n\n#### 6.1.x\n- Dropped support for PHP 5.4\n- phpseclib 2.0\n\n#### 6.0.x\n- Dropped support for PHP 5.3\n- Don't escape slashes when generating signin input.\n  This may render tokens generated with earlier versions of Jose incompatible.\n\n### 7.x.x\n\n#### 7.0.x\n\nMoved phpseclib and the openssl extension as suggested dependencies.\n\n## Tests\n\nTests are written using PHPUnit for this library. After doing composer install you can execute the following command to run tests:\n\n```\n./vendor/bin/phpunit\n```\n\n## Credits\n\nThis library has been inspired by the\n[initial work done by @ritou](https://github.com/ritou/php-Akita_JOSE).\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.2109375,
          "content": "{\n    \"name\": \"namshi/jose\",\n    \"description\": \"JSON Object Signing and Encryption library for PHP.\",\n    \"license\": \"MIT\",\n    \"keywords\": [\"jws\", \"jwt\", \"json\", \"json web token\", \"json web signature\", \"token\"],\n    \"authors\": [\n        {\n            \"name\": \"Alessandro Nadalin\",\n            \"email\": \"alessandro.nadalin@gmail.com\"\n        },\n        {\n          \"name\": \"Alessandro Cinelli (cirpo)\",\n          \"email\": \"alessandro.cinelli@gmail.com\"\n        }\n    ],\n    \"autoload\": {\n        \"psr-4\": {\n            \"Namshi\\\\JOSE\\\\\":  \"src/Namshi/JOSE/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Namshi\\\\JOSE\\\\Test\\\\\":  \"test/Namshi/JOSE/Test/\"\n        }\n    },\n    \"require\": {\n        \"ext-date\": \"*\",\n        \"ext-hash\": \"*\",\n        \"ext-json\": \"*\",\n        \"ext-pcre\": \"*\",\n        \"ext-spl\": \"*\",\n        \"php\": \">=5.5\",\n        \"symfony/polyfill-php56\": \"^1.0\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^4.5|^5.0\",\n        \"satooshi/php-coveralls\": \"^1.0\",\n        \"phpseclib/phpseclib\": \"^2.0\"\n    },\n    \"suggest\": {\n        \"ext-openssl\": \"Allows to use OpenSSL as crypto engine.\",\n        \"phpseclib/phpseclib\": \"Allows to use Phpseclib as crypto engine, use version ^2.0.\"\n    }\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.841796875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         beStrictAboutTestsThatDoNotTestAnything=\"true\"\n         beStrictAboutOutputDuringTests=\"true\"\n         bootstrap=\"tests/bootstrap.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnError=\"false\"\n         stopOnFailure=\"false\"\n         verbose=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"JOSE Test Suite\">\n            <directory suffix=\"Test.php\">./tests</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist processUncoveredFilesFromWhitelist=\"true\">\n            <directory suffix=\".php\">./src</directory>\n        </whitelist>\n    </filter>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}