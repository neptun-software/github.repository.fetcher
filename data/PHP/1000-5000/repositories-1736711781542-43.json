{
  "metadata": {
    "timestamp": 1736711781542,
    "page": 43,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "php-imagine/Imagine",
      "stars": 4414,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1845703125,
          "content": "/.* export-ignore\n/docs export-ignore\n/src/resources/Adobe/Profile[[:space:]]Information.md export-ignore\n/tests export-ignore\n/phpunit.xml.dist export-ignore\n/MAINTAINERS.md export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2099609375,
          "content": "/bin/\n/docs/_build/cache/\n/docs/_build/doctrees/\n/docs/_build/html/\n/docs/_build/vendor/\n/docs/_build/composer.lock\n/tests/tmp/\n/vendor/\n/composer.lock\n/.php-cs-fixer.cache\n/.php-cs-fixer.php\n/.phpunit.result.cache\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 14.9140625,
          "content": "<?php\n\n/*\n * This document has been generated with\n * https://mlocati.github.io/php-cs-fixer-configurator/#version:3.1.0|configurator\n * you can change this configuration by importing this file.\n */\nreturn (new PhpCsFixer\\Config())\n    ->setRiskyAllowed(true)\n    ->setRules(array(\n        // PHP arrays should be declared using the configured syntax.\n        'array_syntax' => array('syntax' => 'long'),\n        // Binary operators should be surrounded by space as configured.\n        'binary_operator_spaces' => array('default' => 'single_space'),\n        // There MUST be one blank line after the namespace declaration.\n        'blank_line_after_namespace' => true,\n        // Ensure there is no code on the same line as the PHP open tag and it is followed by a blank line.\n        'blank_line_after_opening_tag' => true,\n        // An empty line feed must precede any configured statement.\n        'blank_line_before_statement' => array('statements' => array('return')),\n        // The body of each structure MUST be enclosed by braces. Braces should be properly placed. Body of braces should be properly indented.\n        'braces' => array('allow_single_line_closure' => true),\n        // A single space or none should be between cast and variable.\n        'cast_spaces' => true,\n        // Class, trait and interface elements must be separated with one or none blank line.\n        'class_attributes_separation' => true,\n        // Whitespace around the keywords of a class, trait or interfaces definition should be one space.\n        'class_definition' => array('single_line' => true),\n        // Concatenation should be spaced according configuration.\n        'concat_space' => array('spacing' => 'one'),\n        // The PHP constants `true`, `false`, and `null` MUST be written using the correct casing.\n        'constant_case' => true,\n        // Equal sign in declare statement should be surrounded by spaces or not following configuration.\n        'declare_equal_normalize' => true,\n        // Replaces `dirname(__FILE__)` expression with equivalent `__DIR__` constant.\n        'dir_constant' => true,\n        // Replaces short-echo `<?=` with long format `<?php echo`/`<?php print` syntax, or vice-versa.\n        'echo_tag_syntax' => true,\n        // The keyword `elseif` should be used instead of `else if` so that all control keywords look like single words.\n        'elseif' => true,\n        // PHP code MUST use only UTF-8 without BOM (remove BOM).\n        'encoding' => true,\n        // Replace deprecated `ereg` regular expression functions with `preg`.\n        'ereg_to_preg' => true,\n        // Error control operator should be added to deprecation notices and/or removed from other cases.\n        'error_suppression' => true,\n        // PHP code must use the long `<?php` tags or short-echo `<?=` tags and not other tag variations.\n        'full_opening_tag' => true,\n        // Spaces should be properly placed in a function declaration.\n        'function_declaration' => true,\n        // Replace core functions calls returning constants with the constants.\n        'function_to_constant' => array('functions' => array('get_class', 'php_sapi_name', 'phpversion', 'pi')),\n        // Ensure single space between function's argument and its typehint.\n        'function_typehint_space' => true,\n        // Include/Require and file path should be divided with a single space. File path should not be placed under brackets.\n        'include' => true,\n        // Code MUST use configured indentation type.\n        'indentation_type' => true,\n        // Replaces `is_null($var)` expression with `null === $var`.\n        'is_null' => true,\n        // All PHP files must use same line ending.\n        'line_ending' => true,\n        // Cast should be written in lower case.\n        'lowercase_cast' => true,\n        // PHP keywords MUST be in lower case.\n        'lowercase_keywords' => true,\n        // Magic constants should be referred to using the correct casing.\n        'magic_constant_casing' => true,\n        // In method arguments and method call, there MUST NOT be a space before each comma and there MUST be one space after each comma. Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line.\n        'method_argument_space' => true,\n        // Replaces `intval`, `floatval`, `doubleval`, `strval` and `boolval` function calls with according type casting operator.\n        'modernize_types_casting' => true,\n        // Function defined by PHP should be called using the correct casing.\n        'native_function_casing' => true,\n        // All instances created with new keyword must be followed by braces.\n        'new_with_braces' => true,\n        // Master functions shall be used instead of aliases.\n        'no_alias_functions' => true,\n        // There should be no empty lines after class opening brace.\n        'no_blank_lines_after_class_opening' => true,\n        // There should not be blank lines between docblock and the documented element.\n        'no_blank_lines_after_phpdoc' => true,\n        // The closing `? >` tag MUST be omitted from files containing only PHP.\n        'no_closing_tag' => true,\n        // There should not be any empty comments.\n        'no_empty_comment' => true,\n        // There should not be empty PHPDoc blocks.\n        'no_empty_phpdoc' => true,\n        // Remove useless (semicolon) statements.\n        'no_empty_statement' => true,\n        // Removes extra blank lines and/or blank lines following configuration.\n        'no_extra_blank_lines' => true,\n        // Remove leading slashes in `use` clauses.\n        'no_leading_import_slash' => true,\n        // The namespace declaration line shouldn't contain leading whitespace.\n        'no_leading_namespace_whitespace' => true,\n        // Either language construct `print` or `echo` should be used.\n        'no_mixed_echo_print' => array('use' => 'echo'),\n        // Operator `=>` should not be surrounded by multi-line whitespaces.\n        'no_multiline_whitespace_around_double_arrow' => true,\n        // Convert PHP4-style constructors to `__construct`.\n        'no_php4_constructor' => true,\n        // Short cast `bool` using double exclamation mark should not be used.\n        'no_short_bool_cast' => true,\n        // Single-line whitespace before closing semicolon are prohibited.\n        'no_singleline_whitespace_before_semicolons' => true,\n        // When making a method or function call, there MUST NOT be a space between the method or function name and the opening parenthesis.\n        'no_spaces_after_function_name' => true,\n        // There MUST NOT be spaces around offset braces.\n        'no_spaces_around_offset' => true,\n        // There MUST NOT be a space after the opening parenthesis. There MUST NOT be a space before the closing parenthesis.\n        'no_spaces_inside_parenthesis' => true,\n        // Remove trailing commas in list function calls.\n        'no_trailing_comma_in_list_call' => true,\n        // PHP single-line arrays should not have trailing comma.\n        'no_trailing_comma_in_singleline_array' => true,\n        // Remove trailing whitespace at the end of non-blank lines.\n        'no_trailing_whitespace' => true,\n        // There MUST be no trailing spaces inside comment or PHPDoc.\n        'no_trailing_whitespace_in_comment' => true,\n        // Removes unneeded parentheses around control statements.\n        'no_unneeded_control_parentheses' => true,\n        // In function arguments there must not be arguments with default values before non-default ones.\n        'no_unreachable_default_argument_value' => true,\n        // Unused `use` statements must be removed.\n        'no_unused_imports' => true,\n        // There should not be an empty `return` statement at the end of a function.\n        'no_useless_return' => true,\n        // In array declaration, there MUST NOT be a whitespace before each comma.\n        'no_whitespace_before_comma_in_array' => true,\n        // Remove trailing whitespace at the end of blank lines.\n        'no_whitespace_in_blank_line' => true,\n        // Remove Zero-width space (ZWSP), Non-breaking space (NBSP) and other invisible unicode symbols.\n        'non_printable_character' => true,\n        // Array index should always be written by using square braces.\n        'normalize_index_brace' => true,\n        // There should not be space before or after object operators `->` and `?->`.\n        'object_operator_without_whitespace' => true,\n        // Ordering `use` statements.\n        'ordered_imports' => true,\n        // PHPUnit assertion method calls like `->assertSame(true, $foo)` should be written with dedicated method like `->assertTrue($foo)`.\n        'php_unit_construct' => true,\n        // PHPUnit assertions like `assertInternalType`, `assertFileExists`, should be used over `assertTrue`.\n        'php_unit_dedicate_assert' => true,\n        // PHPUnit annotations should be a FQCNs including a root namespace.\n        'php_unit_fqcn_annotation' => true,\n        // PHPDoc should contain `@param` for all params.\n        'phpdoc_add_missing_param_annotation' => array('only_untyped' => false),\n        // PHPDoc annotation descriptions should not be a sentence.\n        'phpdoc_annotation_without_dot' => true,\n        // Docblocks should have the same indentation as the documented subject.\n        'phpdoc_indent' => true,\n        // `@access` annotations should be omitted from PHPDoc.\n        'phpdoc_no_access' => true,\n        // No alias PHPDoc tags should be used.\n        'phpdoc_no_alias_tag' => true,\n        // We have to support `@return void` to satisfy Symfony deprecations helper.\n        // See https://github.com/stripe/stripe-php/pull/1230\n        'phpdoc_no_empty_return' => false,\n        // `@package` and `@subpackage` annotations should be omitted from PHPDoc.\n        'phpdoc_no_package' => true,\n        // Classy that does not inherit must not have `@inheritdoc` tags.\n        'phpdoc_no_useless_inheritdoc' => true,\n        // Annotations in PHPDoc should be ordered so that `@param` annotations come first, then `@throws` annotations, then `@return` annotations.\n        'phpdoc_order' => true,\n        // The type of `@return` annotations of methods returning a reference to itself must the configured one.\n        'phpdoc_return_self_reference' => true,\n        // Scalar types should always be written in the same form. `int` not `integer`, `bool` not `boolean`, `float` not `real` or `double`.\n        'phpdoc_scalar' => true,\n        // Annotations in PHPDoc should be grouped together so that annotations of the same type immediately follow each other, and annotations of a different type are separated by a single blank line.\n        'phpdoc_separation' => true,\n        // Single line `@var` PHPDoc should have proper spacing.\n        'phpdoc_single_line_var_spacing' => true,\n        // PHPDoc summary should end in either a full stop, exclamation mark, or question mark.\n        'phpdoc_summary' => true,\n        // Forces PHPDoc tags to be either regular annotations or inline.\n        'phpdoc_tag_type' => array('tags' => array('inheritdoc' => 'inline')),\n        // Docblocks should only be used on structural elements.\n        'phpdoc_to_comment' => true,\n        // PHPDoc should start and end with content, excluding the very first and last line of the docblocks.\n        'phpdoc_trim' => true,\n        // The correct case must be used for standard PHP types in PHPDoc.\n        'phpdoc_types' => true,\n        // `@var` and `@type` annotations of classy properties should not contain the name.\n        'phpdoc_var_without_name' => true,\n        // Classes must be in a path that matches their namespace, be at least one namespace deep and the class name should match the file name.\n        'psr_autoloading' => true,\n        // There should be one or no space before colon, and one space after it in return type declarations, according to configuration.\n        'return_type_declaration' => true,\n        // Cast `(boolean)` and `(integer)` should be written as `(bool)` and `(int)`, `(double)` and `(real)` as `(float)`, `(binary)` as `(string)`.\n        'short_scalar_cast' => true,\n        // A PHP file without end tag must always end with a single empty line feed.\n        'single_blank_line_at_eof' => true,\n        // There should be exactly one blank line before a namespace declaration.\n        'single_blank_line_before_namespace' => true,\n        // There MUST NOT be more than one property or constant declared per statement.\n        'single_class_element_per_statement' => true,\n        // There MUST be one use keyword per declaration.\n        'single_import_per_statement' => true,\n        // Each namespace use MUST go on its own line and there MUST be one blank line after the use statements block.\n        'single_line_after_imports' => true,\n        // Single-line comments and multi-line comments with only one line of actual content should use the `//` syntax.\n        'single_line_comment_style' => true,\n        // Convert double quotes to single quotes for simple strings.\n        'single_quote' => true,\n        // Fix whitespace after a semicolon.\n        'space_after_semicolon' => true,\n        // Replace all `<>` with `!=`.\n        'standardize_not_equals' => true,\n        // A case should be followed by a colon and not a semicolon.\n        'switch_case_semicolon_to_colon' => true,\n        // Removes extra spaces between colon and case value.\n        'switch_case_space' => true,\n        // Standardize spaces around ternary operator.\n        'ternary_operator_spaces' => true,\n        // Multi-line arrays, arguments list and parameters list must have a trailing comma.\n        'trailing_comma_in_multiline' => array('elements' => array('arrays')),\n        // Arrays should be formatted like function/method arguments, without leading or trailing single line space.\n        'trim_array_spaces' => true,\n        // Unary operators should be placed adjacent to their operands.\n        'unary_operator_spaces' => true,\n        // Visibility MUST be declared on all properties and methods; `abstract` and `final` MUST be declared before the visibility; `static` MUST be declared after the visibility.\n        'visibility_required' => array('elements' => array('property', 'method')),\n        // In array declaration, there MUST be a whitespace after each comma.\n        'whitespace_after_comma_in_array' => true,\n        // Write conditions in Yoda style (`true`), non-Yoda style (`['equal' => false, 'identical' => false, 'less_and_greater' => false]`) or ignore those conditions (`null`) based on configuration.\n        'yoda_style' => array('always_move_variable' => false, 'equal' => false, 'identical' => false, 'less_and_greater' => false),\n        // Make type definition of default null also nullable to avoid PHP 8.4 deprecations\n        'nullable_type_declaration_for_default_null_value' => true,\n    ))\n    ->setFinder(\n        PhpCsFixer\\Finder::create()\n        ->exclude('vendor')\n        ->in(array(\n            __DIR__ . '/src',\n            __DIR__ . '/tests',\n        ))\n        ->append(array(__FILE__))\n    )\n;\n"
        },
        {
          "name": ".travis",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 14.69921875,
          "content": "# CHANGELOG\n\n### NEXT (YYYY-MM-DD)\n\n\n### 1.5.0 (2024-12-03)\n- Minimum supported PHP version raised from 5.5 to 7.1 (#865, @alexander-schranz)\n- Fix PHP 8.4 deprecation warnings (#865, @alexander-schranz)\n- The GD driver now supports resolution for PHP >= 7.2 (#813, #866, @gutocf, @mlocati)\n\n### 1.4.0 (2024-11-10)\n- If a file couldn't be found, we now throw a NotFoundException exception (#853, @playmono)\n- Add support for webp_lossless to GD and GMagick (#858, @ausi)\n- Use streams in ExifMetadataReader (#861, @ausi)\n- WebP format now supports animation (#812, @Yoann-TYT)\n\n### 1.3.5 (2023-06-07)\n* Fix PHP 8.2 warnings with Point class (#847, @anovsiradj)\n\n### 1.3.4 (2023-04-17)\n* Let PHP automatically detect the preferred TLS version (#841, @radli)\n* Add @return phpdoc to ReturnTypeWillChange methods (#846, @mlocati)\n\n### 1.3.3 (2022-11-16)\n* Fix invalid format MIME type definition (#835, @xdanik)\n\n### 1.3.2 (2022-04-01)\n* Workaround for a bug in PHP 7.3+opcache that causes segmentation faults (#826, #829, #828, @ausi, @mnocon, @mlocati)\n\n### 1.3.1 (2022-03-15)\n* Fix undefined variable $engineRawVersion in Imagick/Gmagick DriverInfo (#825, @fxbt)\n\n### 1.3.0 (2022-03-15)\n* Minimum PHP supported version is now 5.5 (#820, @PowerKiKi)\n* Support AVIF, HEIC, and JXL in Imagick driver (#759, #765, @ausi)\n* Support AVIF in GD driver (#791, @mlocati)\n* Make the $filter parameter of the resize method invariant (#776, @mlocati)\n* Ability to specify the alpha-blending of the GD drawer (#790, @mlocati)\n* Add support for SINCFAST filter in Imagick driver (#823, @mlocati)\n* Fix applyMask() for GD driver (#708, @ninze)\n* Fix PHP 8.1 compatibility (#768, #791, @ausi, @mlocati)\n* Fix error handling in grayscale() for Gmagick driver (#757, @dmitry-kulikov)\n* Fix convolve() for Imagick driver (#775, @mlocati)\n* Fix array retuned by histogram() method of GD and Imagick drivers (#797, @mlocati)\n* Fix handling alpha channel in Imagick (#775, #798, @mlocati)\n* New Driver\\Info classes to inspect installed drivers (#802, #805, #806, @mlocati)\n* Fix wrong load logic in Imagick (#807, @mlocati)\n\n### 1.2.4 (2020-11-03)\n* Fix PHP 8.0 compatibility, except gmagick - see  https://bugs.php.net/bug.php?id=80106 (#740, @ausi)\n* Optimize reading EXIF metadata from local files (#741, @jorrit)\n* Fix rotation with imagick (#734, @lashus @ausi)\n* Fix saving multi-layer images (eg animated GIFs) as plain images with gmagick and imagick (#746, @alexander-schranz @mlocati)\n* Fix gmagick not resolving the correct export format in some edge cases (#750, @ausi)\n\n### 1.2.3 (2019-12-04)\n* Handle jfif extension in GD driver (#727, @sylvain-msl-talkspirit)\n* Improve detection of unsupported Exit Metadata Reader (#729, @mlocati, @ausi)\n\n### 1.2.2 (2019-07-09)\n* The GD driver can now load WebP files (#711, #718, @lashus, @ausi)\n* Avoid calling `imageantialias` if it's not available (#713, @ahukkanen)\n\n### 1.2.1 (2019-06-03)\n* Silence call to `\\Imagick::setImageOpacity()` in order to prevent deprecation error with Imagick 3.4.4 and ImageMagick 6 (#715, @samdark, @mlocati)\n\n### 1.2.0 (2018-12-07)\n* `ExifMetadataReader` now returns all the available metadata, not only EXIF and IFD0 (#701, @mlocati)\n\n### 1.1.0 (2018-10-25)\n* New `ImageInterface::THUMBNAIL_FLAG_NOCLONE` flag for `thumbnail()` to let it modify the original image instance in order to save memory (@mlocati)\n\n### 1.0.2 (2018-10-24)\n* Check that the Imagick PHP extension is not compiled using ImageMagick version 7.0.7-32 because it does not work correctly (@mlocati)\n\n### 1.0.1 (2018-09-27)\n* `Box` now rounds the width/height it receives (previously it discarded the decimal points) (@mlocati)\n\n### 1.0.0 (2018-09-25)\n* New `FontInterface` method: `wrapText` - split a text into multiple lines, so that it fits a specific width (@mlocati)  \n  **BREAKING CHANGE** if you have your own `FontInterface` implementation, it now must implement `wrapText`\n* Drawer methods can now accept a thickness of zero (@mlocati)\n* Fix drawing unfilled chords with GD driver (@mlocati)\n* Fix thickness drawing of unfilled chords with Imagick and Gmagick drivers (@mlocati)\n* Fix handling of radius in `circle` method implementations (@mlocati)\n* The `dissolve` method of `ColorInterface` normalizes the final value of alpha (@mlocati)  \n  **BREAKING CHANGE** `dissolve` doesn't throw a `Imagine\\Exception\\InvalidArgumentException` anymore\n\n### 1.0.0-alpha2 (2018-09-08)\n* The `coalesce` method of `LayerInterface` instances now returns the LayerInterface itself (@mlocati)  \n  **BREAKING CHANGE** if you have your own `LayerInterface` implementation, it now must return `$this`\n* The `__toString` method has been added to `ColorInterface` since all its implementations have it (@mlocati)  \n  **BREAKING CHANGE** if you have your own `ColorInterface` implementation, it now must implement `__toString`\n* New Imagick save option: `optimize` if set, the size of animated GIF files is optimized (@mlocati)  \n  **NOTE** Imagick requires that the image frames have the same size\n* The `paste` method now accepts images not fully included in the destination image (@mlocati)  \n  **BREAKING CHANGE** the paste method doesn't throw an OutOfBoundsException anymore\n* Fix handling of PNG compression in Imagick `save` method (@mlocati)\n* New drawer methods: `rectangle` and `circle` (@mlocati)  \n  **BREAKING CHANGE** if you have your own implementation of `DrawerInterface` you should add these two new methods\n* The `getChannelsMaxValue` method has been added to `PaletteInterface` (@mlocati)  \n  **BREAKING CHANGE** if you have your own `PaletteInterface` implementation, it now must implement this new method\n\n### 1.0.0-alpha1 (2018-08-28)\n* Imagine is now tested under Windows too (@mlocati)\n* Add support to webp image format (@chregu, @antoligy, @alexander-schranz)\n* Add `Imagine\\File\\LoaderInterface` that allows loading remote images with any imaging driver (@mlocati).\n  You can use your own `LoaderInterface` implementation so that you can for instance use curl or any other library.\n* Fix some phpdoc issues (@mlocati)\n* `flipHorizontally` and `flipVertically` methods of GD images is now much faster on PHP 5.5+ (@mlocati)\n* Fix loading of PNG indexed images with GD (@mlocati)\n* Loading indexed images with GD is now much faster on PHP 5.5+ (@mlocati)\n* Add support to grayscale images with Gmagick (@mlocati)\n* Add support to alpha channels of Gmagick images (@mlocati)\n* Fix `getColorAt` method of Gmagick images (@mlocati)\n* Add `getTransformations` to the `Autorotate` filter, so that you can get the list of transformations that should be applied to an image accordingly to the EXIF metadata (@mlocati)\n* The metadata reader now doesn't throw exceptions or warnings (@lentex, @mlocati)\n* Fix documentation (@ZhangChaoWN, @Mark-H, @mlocati)\n* Fix pixel range issue with Gmagick image (@b-viguier)\n* Fix `text` drawer method on Windows when using relative font file paths (@mlocati)\n* Fix `box` font method on Windows when using relative font file paths (@mlocati)\n* Fix crash on Windows when loading an image with Imagick (@mlocati)\n* Fix generation of API documentation (@mlocati)\n* Add `jpeg_sampling_factors` option when saving JPEG images (Gmagick/Imagick only) (@ausi)\n* Add BMP as supported image format (@mlocati)\n* Add support to new image type constants of Imagick (@ausi)\n* Check that Imagick correctly supports profiles (@ausi)\n* Add `setMetadataReader`/`getMetadataReader` to `ImagineInterface` (@mlocati)  \n  **BREAKING CHANGE** if you have your own `ImagineInterface` implementation, it now must implement those two methods\n* Fix creating Gmagick images with alpha colors when palette doesn't support alpha (@FractalizeR)\n* Fix warning about deprecated clone method in copy method of Imagick images (@mlocati)\n* Fix copy methods of Images (the original image and its new copy are now fully detached) (@mlocati)\n* It's now possible to use `clone $image` as an alternative to `$image->copy()` (@mlocati)\n* Add support to custom classes for `BoxInterface`, `MetadataReaderInterface`, `FontInterface`, `LoaderInterface`, `LayersInterface`, `ImageInterface` (@mlocati)  \n  **BREAKING CHANGE** if you have your own `ImagineInterface` implementation, it now must implement the methods of `ClassFactoryAwareInterface`\n* Add support for pasting with alpha for GD and Imagick (@AlloVince, @mlocati)\n* Downscaling a `Box` until it reaches a dimension less than 1 returns a box with dimension of 1 instead of throwing an exception (@mlocati)    \n  **BREAKING CHANGE** if you relied on `Box::scale` throwing an exception in this case\n* New filters: `BlackWhite`, `BorderDetection`, `Negation`, `Neighborhood` (@rejinka)\n* Minor optimization of filters based on `OnPixelBased` (@rejinka, @mlocati)\n* Add flag to `thumbnail` to allow upscaling images (@vlakoff)  \n   **BREAKING CHANGE** the `$mode` argument has been renamed to `$settings`, and it's now an integer (but old string values are accepted for backward compatibility). In this case the `ManipulatorInterface` constants `THUMBNAIL_INSET`, `THUMBNAIL_OUTBOUND` were changed from string values to integers.\n* New filter: `brightness` (@lenybernard, @mlocati)\n* New filter: `colvolve` available for all graphics libraries except gmagick with version prior to 2.0.1RC2 (@armatronic, @mlocati)\n* Fix bug in Imagine\\Image\\Palette\\RGB::blend() (@dmolineus, @mlocati)\n* Autoload was moved from PSR-0 to PSR-4, and code files moved from `/lib/Imagine` to `/src` (@mlocati)\n\n### 0.7.1 (2017-05-16)\n* Remove Symfony PHPUnit bridge as dependency (@craue)\n\n### 0.7.0 (2017-05-02)\n* Fix memory usage on metadata reading (@Seldaek)\n* PHP 7.1 support\n* Latest Imagemagick compatibility (@jdewit)\n\n### 0.6.3 (2015-09-19)\n* Fix wrong array_merge when calling Transformation::getFilters without filters\n* Add export-ignore git attribute (@Benoth)\n* Fix docblocks (@Sm0ke0ut and @norkunas)\n* Fix animated gif loop length options (@jygaulier)\n* Multiple tweaks for the repository and travis builds (@localheinz, @vrkansagara and @dunzun)\n* Fix metadata extraction from streams (@armatronic)\n* Fix autorotation (@tarleb)\n* Load exifmetadata reader whenever possible\n* Add metadata getter\n\n### 0.6.2 (2014-11-11)\n* Stripping image containing an invalid ICC profile fails\n* MetadataBag now implements \\Countable\n* Fix wrong array_merge in MetadataBag giving invalid results with HTTP resources (@javaguirre)\n* Fix Imagick merge strategy (@GrahamCampbell)\n* Fixed various alpha issues (@RadekDvorak)\n* Fix Image cloning on HHVM (@RdeWilde)\n* Fix exception on invalid file using GD driver (@vlakoff).\n* Fix ImageInterface::getSize on animated GIFs (@sokac)\n\n### 0.6.1 (2014-06-16)\n* Fix invalid namespace usage (#336 @csanquer).\n\n### 0.6.0 (2014-06-13)\n* BC break: Colors are now provided through the PaletteInterface. Any call\n  to previous Imagine\\Image\\Color constructor must be removed and use the\n  palette provided by Imagine\\Image\\ImageInterface::getPalette to create\n  colors.\n* BC break : Animated GIF default delay is no longer 800ms but null. This\n  avoids resettings a delay on animated image.\n* Add support for ICC profiles\n* Add support for CMYK and grayscale colorspace images.\n* Add filter argument to ImageInterface::thumbnail method.\n* Add priority to filters (@Richtermeister).\n* Add blur effect (@Nokrosis).\n* Rename \"quality\" option to \"jpeg_quality\" and apply it only to JPEG files (@vlakoff).\n* Add \"png_compression_level\" option (@vlakoff).\n* Rename \"filters\" option to \"png_compression_filter\" (@vlakoff).\n* Deprecate `quality` and `filters` ManipulatorInterface::save options, use\n  `jpeg_quality`, `png_compression_level` and `png_compression_filter` instead.\n* Add support for alpha blending in GD drawer (@salem).\n* Add width parameter to Drawer::text (@salemgolemugoo).\n* Add NotSupportedException when a driver does not support an operation (@rouffj).\n* Add support for metadata.\n* Fix #158: GD alpha detection + Color::isOpaque are broken.\n* Fix color extraction for non-RGB palettes.\n\n### 0.5.0 (2013-07-10)\n* Add `Layers::coalesce`.\n* Add filter option to `ImageInterface::resize`.\n* Add sharpen effect.\n* Add interlace support.\n* `LayersInterface` now extends `ArrayAccess`, gives support for animated gifs.\n* Remove Imagick and Gmagick flatten after composite.\n* Fix pixel opacity reading in `Gmagick::histogram`.\n* Deprecate pear channel installation.\n* Deprecate phar installation.\n\n### 0.4.1 (2012-12-13)\n* Lazy-load GD layers.\n\n### 0.4.0 (2012-12-10)\n* Add support for image Layers.\n* Add Colorize effect.\n* Add documentation for the Grayscale effect.\n* Port RelativeResize filter from JmikolaImagineBundle.\n\n### 0.3.1 (2012-11-12)\n* Add Grayscale effect.\n* `Drawer::text` position fix.\n\n### 0.3.0 (2012-07-28)\n* Add configurable border thickness to drawer interface and implementations.\n* Add `ImageInterface`::strip.\n* Add Canvas filter.\n* Add resolution option on image saving.\n* Add Grayscale filter.\n* Add sami API documentation.\n* Add compression quality to Gmagick.\n* Add effects API.\n* Add method to get pixel at point in Gmagick.\n* Ensure valid background color in rotations.\n* Fill lines with color to prevent semi-transparency issues.\n* Use `Imagick::resizeImage` instead of `Imagick::thumbnailImage` for resizing.\n* Fix PNG transparency on save ; do not flatten if not necessary.\n\n### 0.2.8 (2011-11-29)\n* Add support for Travis CI.\n\n### 0.2.7 (2011-11-17)\n* Use composer for autoloading.\n\n### 0.2.6 (2011-11-09)\n* Documentation enhancements.\n\n### 0.2.5 (2011-10-29)\n* Add PEAR support.\n* Documentation enhancements.\n\n### 0.2.4 (2011-10-17)\n* Add imagine.phar, phar and rake tasks.\n* Add `ImagineInterface::read` to read from a stream resource.\n* Documentation enhancements.\n* Fix gifs transparency issues.\n\n### 0.2.3 (2011-10-16)\n* Documentation enhancements.\n\n### 0.2.2 (2011-10-16)\n* Documentation enhancements.\n\n### 0.2.1 (2011-10-15)\n* Add `PointInterface::move`.\n* `BoxInterface::scale` can accept floats.\n* Set antialias mode for GD images.\n* Fix png compression.\n\n### 0.2.0 (2011-10-06)\n* Add `Imagine\\Fill\\Gradient\\Linear::getStart`/`getEnd`.\n* Add `Imagine\\Image\\Color::isOpaque`.\n* Add Gmagick transparency exceptions.\n* Add support for transparency for gif export.\n* Add widen/heighten methods for easy scaling to target width/height.\n* Add functionals tests to unit test thumbnails creation.\n* Add the ability to use hexadecimal notation for `Imagine\\Image\\Color` construction.\n* Implement fast linear gradient for Imagick.\n* Remove lengthy image histogram comparisons.\n* Extract `ManipulatorInterface` from `ImageInterface`.\n* Switch methods to final.\n* New method `ImageInterface::getColorAt`.\n* Introduce `ImagineAware` abstract filter class.\n\n### 0.1.5 (2011-05-18)\n* Fix bug in GD rotate.\n\n### 0.1.4 (2011-03-21)\n* Add environment check to gracefuly skip test.\n\n### 0.1.3 (2011-03-21)\n* Improve api docs.\n* Extract `FontInterface`.\n\n### 0.1.2 (2011-03-21)\n* Add check for GD.\n\n### 0.1.1 (2011-03-21)\n* Add rounding and fixed thumbnail logic.\n\n### 0.1.0 (2011-03-14)\n* First tagged version.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.310546875,
          "content": "Copyright (c) 2004-2012 Bulat Shakirzyanov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\nThis software embeds Adobe ICC Profiles, see license at\nhttp://www.adobe.com/support/downloads/iccprofiles/icc_eula_mac_dist.html .\n\nThis software also embeds ICC Profile from colormanagement.org. Please\nfind information about their license at http://colormanagement.org/ .\n"
        },
        {
          "name": "MAINTAINERS.md",
          "type": "blob",
          "size": 1.60546875,
          "content": "# Maintainers Instructions\n\nThis document contains some instructions for the repository maintainers.\n\n\n## Publishing a new Imagine release\n\nFollow these instructions when publishing a new Imagine release:\n\n1. Be sure that GitHub Action tests succesfully completed in the `develop` branch\n2. Update the `CHANGELOG.md` file:\r\n    - replace the `### NEXT (YYYY-MM-DD)` line with the release number and date  \r\n3. Set the new version in the `Imagine\\Image\\ImagineInterface::VERSION` constant:\r\n    - it's defined in the file `src/Image/ImagineInterface.php`\n4. Commit these changes and push to the `develop` branch\r\n5. Wait until TravisCI jobs complete succesfully\r\n    - one of those jobs should automatically add a new commit to the `develop` branch, updating the API docs\r\n6. Create a new release on GitHub\r\n    - Go to https://github.com/avalanche123/Imagine/releases/new and enter this data:\r\n        - Tag version: the new version (just the numbers/dots - for example `1.2.3`)\r\n        - Release title: the new version (with a leating `v` - for example `v1.2.3`)\r\n        - Release description: copy the relevant section from the `CHANGELOG.md` file\r\n    - the new release should appear on https://imagine.readthedocs.io in a short time\r\n7. Fast forward the `master` branch to this new tag (for example `1.2.3`) \r\n8. Wait until TravisCI jobs complete\r\n9. Update the `CHANGELOG.md` file:\r\n    - add a new `### NEXT (YYYY-MM-DD)` line\r\n10. Set the new development version in the `Imagine\\Image\\ImagineInterface::VERSION` constant:\r\n    - it's defined in the file `src/Image/ImagineInterface.php`\r\n11. Drink a beer to celebrate the new version\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.0693359375,
          "content": "# Imagine\n[![PHPUnit](https://github.com/php-imagine/Imagine/actions/workflows/phpunit.yml/badge.svg)](https://github.com/php-imagine/Imagine/actions/workflows/phpunit.yml)\n[![Coding Style](https://github.com/php-imagine/Imagine/actions/workflows/coding-style.yml/badge.svg)](https://github.com/php-imagine/Imagine/actions/workflows/coding-style.yml)\n\nTweet about it using the [#php_imagine](https://twitter.com/search?q=%23php_imagine) hashtag.\n\nImage manipulation library for PHP inspired by Python's PIL and other image\nlibraries.\n\n## Requirements\n\nThe Imagine library has the following requirements:\n\n - PHP 7.1+\n\nOlder version of the library support also older PHP Version:\n\n - PHP 5.5 - 7.0 use version ^1.3\n - PHP 5.3 - 5.4 use version ^1.2\n\nDepending on the chosen Image implementation, you may need one of the following PHP extensions:\n\n - GD2\n - Imagick (with ImageMagick version 6.2.9 or later, except version 7.0.7-32)\n - Gmagick\n\nTo read EXIF metadata (e.g. for autorotation), activate the PHP ``exif`` extension. This is optional: Imagine works\nwithout the PHP ``exif`` extension, but then it can't read and act on image orientation or other EXIF metadata.\n\n### Installation using composer\n`php composer.phar require imagine/imagine`\n\n## Basic Principles\n\nThe main purpose of Imagine is to provide all the necessary functionality to bring all native low level image processing libraries in PHP to the same simple and intuitive OO API.\n\nSeveral things are necessary to accomplish that:\n\n* Image manipulation tools, such as resize, crop, etc.\n* Drawing API - to create basic shapes and advanced charts, write text on the image\n* Masking functionality - ability to apply black&white or grayscale images as masks, leading to semi-transparency or absolute transparency of the image the mask is being applied to\n\nThe above tools should be the basic foundation for a more powerful set of tools that are called ``Filters`` in Imagine.\n\nSome of the ideas for upcoming filters:\n\n* Charting and graphing filters - pie and bar charts, linear graphs with annotations\n* Reflection - apple style\n* Rounded corners - web 2.0\n\n## Documentation ##\n\n - [Hosted by Read The Docs](http://imagine.readthedocs.org/)\n\n## Presentations ##\n\n - [Introduction to Imagine](http://www.slideshare.net/avalanche123/introduction-toimagine)\n - [How to Take Over the World with Lithium](http://speakerdeck.com/u/nateabele/p/how-to-take-over-the-world-with-lithium?slide=33)\n\n## Articles ##\n\n - [Image Processing with Imagine](http://www.phparch.com/2011/03/image-processing-with-imagine)\n\n## Contributing ##\n\n### Branches\n\nNew pull requests should be based on the `develop` branch.\nThe `master` branch is the stable branch: it usually matches the latest a release but in can be a bit ahead.\n\n### Test groups\n\nSome PHPUnit test is marked as skipped (for example, tests that require a driver that support multiple layers and executed with the GD driver).\nIn addition, if you don't have installed gmagick, the gmagick tests will be marked as skipped.\n\nIf you don't want to run tests that are marked as \"always skipped\" you can tell PHPUnit to exclude the `always-skipped` group.\nThe same for the tests that require a specific driver (`gd`, `imagick`, `imagick`).\n\nSo, for example, to exclude the `always-skipped` and the `gmagick` tests, you can launch phpunit with this command options:\n\n```\ncomposer run test -- --exclude-group always-skipped,gmagick\n```\n\n\n### Development environment\n\nSetting up an environment with all the required libraries may be very hard.\nIn order to run the tests locally, you can use the same [docker images](https://github.com/php-imagine/docker-builder/pkgs/container/test) used by Imagine to test the pull requests.\n\nFor example, if you have Imagine locally in the `/home/me/imagine` folder, you can run tests for PHP 8.1 with the GD and Imagick with this very simple approach:\n\n1. Launch a temporary docker container with:\n   ```sh\n   docker run --rm -it -v /home/me/imagine:/app -w /app ghcr.io/php-imagine/test:8.1-gd-imagick bash\n   ```\n2. Inside the docker container, run these commands:\n   ```sh\n   # Start a local web server: some tests require it\n   cd tests\n   php -n -S 0.0.0.0:8013 >/dev/null 2>&1 &\n   cd ..\n   # Tell the tests that the local web server is available at the port 8013\n   export IMAGINE_TEST_WEBSERVERURL=http://localhost:8013\n   # Install the composer dependencies\n   composer update\n   # Run the tests\n   composer run test -- --exclude-group always-skipped,gmagick\n   ```\n\n> Note: This approach works on Windows too: simply launch the docker container with\n> ```\n> docker run --rm -it -v C:\\Path\\To\\Imagine:/app -w /app ghcr.io/php-imagine/test:8.1-gd-imagick bash\n> ```\n\n### Built test files\n\nMany tests create temporary files (in the `tests/tmp` directory) containing built images.\nThose temporary files are compared with expected images, and then are deleted.\nIf you want to keep those temporary files (for example, to check what's being built), you can set the `IMAGINE_TEST_KEEP_TEMPFILES` environment variable.\nIf the `IMAGINE_TEST_KEEP_TEMPFILES` is configured in the GitHub Action tests, those temporary files are attached to tests as an articact.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.4072265625,
          "content": "{\n    \"name\": \"imagine/imagine\",\n    \"description\": \"Image processing for PHP\",\n    \"keywords\": [\n        \"image manipulation\",\n        \"image processing\",\n        \"drawing\",\n        \"graphics\"\n    ],\n    \"homepage\": \"http://imagine.readthedocs.org/\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Bulat Shakirzyanov\",\n            \"email\": \"mallluhuct@gmail.com\",\n            \"homepage\": \"http://avalanche123.com\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=7.1\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^4.8 || ^5.7 || ^6.5 || ^7.5 || ^8.4 || ^9.3\"\n    },\n    \"suggest\": {\n        \"ext-exif\": \"to read EXIF metadata\",\n        \"ext-gd\": \"to use the GD implementation\",\n        \"ext-imagick\": \"to use the Imagick implementation\",\n        \"ext-gmagick\": \"to use the Gmagick implementation\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Imagine\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Imagine\\\\Test\\\\\": \"tests/tests/\"\n        }\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-develop\": \"1.x-dev\"\n        }\n    },\n    \"archive\": {\n        \"exclude\": [\n            \"/.*\",\n            \"/tests\",\n            \"/vendor\",\n            \"/bin\",\n            \"docs/_build\",\n            \"Imagine-*.tgz\",\n            \"imagine-*.phar\",\n            \"composer.phar\"\n        ]\n    },\n    \"scripts\": {\n        \"test\": \"phpunit --verbose\"\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.84765625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         bootstrap=\"tests/bootstrap.php\"\n>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\" />\n    </php>\n    <testsuites>\n        <testsuite name=\"Imagine Test Suite\">\n            <directory>./tests/tests/</directory>\n        </testsuite>\n    </testsuites>\n\n    <filter>\n        <whitelist>\n            <directory>./src/</directory>\n            <exclude>\n                <directory>./tests/fixtures</directory>\n                <directory>./tests/tmp</directory>\n            </exclude>\n        </whitelist>\n    </filter>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}