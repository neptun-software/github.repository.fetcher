{
  "metadata": {
    "timestamp": 1736711854015,
    "page": 182,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "matomo-org/device-detector",
      "stars": 3191,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4189453125,
          "content": "Tests/ export-ignore\nmisc/ export-ignore\n*.md text eol=lf\n*.php text eol=lf\n*.yml text eol=lf\n.github/ export-ignore\n.coveralls.yml text eol=lf export-ignore\n.travis.yml text eol=lf export-ignore\nphpunit.xml.dist text eol=lf export-ignore\n.gitignore text eol=lf export-ignore\n.gitattributes text eol=lf export-ignore\n.phpcs.xml text eol=lf export-ignore\nphpstan.neon text eol=lf export-ignore\n.yamllint text eol=lf export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0732421875,
          "content": ".idea/*\nvendor/*\ncomposer.lock\ncomposer.phar\n.buildpath\n.project\n.settings\n"
        },
        {
          "name": ".yamllint",
          "type": "blob",
          "size": 0.1171875,
          "content": "extends: relaxed\n\nignore: |\n  vendor/**\n\nrules:\n  line-length: disable\n\n  trailing-spaces:\n    ignore: |\n      Tests/**\n"
        },
        {
          "name": "Cache",
          "type": "tree",
          "content": null
        },
        {
          "name": "ClientHints.php",
          "type": "blob",
          "size": 10.263671875,
          "content": "<?php\n\n/**\n * Device Detector - The Universal Device Detection library for parsing User Agents\n *\n * @link https://matomo.org\n *\n * @license http://www.gnu.org/licenses/lgpl.html LGPL v3 or later\n */\n\ndeclare(strict_types=1);\n\nnamespace DeviceDetector;\n\nclass ClientHints\n{\n    /**\n     * Represents `Sec-CH-UA-Arch` header field: The underlying architecture's instruction set\n     *\n     * @var string\n     */\n    protected $architecture = '';\n\n    /**\n     * Represents `Sec-CH-UA-Bitness` header field: The underlying architecture's bitness\n     *\n     * @var string\n     */\n    protected $bitness = '';\n\n    /**\n     * Represents `Sec-CH-UA-Mobile` header field: whether the user agent should receive a specifically \"mobile\" UX\n     *\n     * @var bool\n     */\n    protected $mobile = false;\n\n    /**\n     * Represents `Sec-CH-UA-Model` header field: the user agent's underlying device model\n     *\n     * @var string\n     */\n    protected $model = '';\n\n    /**\n     * Represents `Sec-CH-UA-Platform` header field: the platform's brand\n     *\n     * @var string\n     */\n    protected $platform = '';\n\n    /**\n     * Represents `Sec-CH-UA-Platform-Version` header field: the platform's major version\n     *\n     * @var string\n     */\n    protected $platformVersion = '';\n\n    /**\n     * Represents `Sec-CH-UA-Full-Version` header field: the platform's major version\n     *\n     * @var string\n     */\n    protected $uaFullVersion = '';\n\n    /**\n     * Represents `Sec-CH-UA-Full-Version-List` header field: the full version for each brand in its brand list\n     *\n     * @var array\n     */\n    protected $fullVersionList = [];\n\n    /**\n     * Represents `x-requested-with` header field: Android app id\n     * @var string\n     */\n    protected $app = '';\n\n    /**\n     * Represents `Sec-CH-UA-Form-Factors` header field: form factor device type name\n     *\n     * @var array\n     */\n    protected $formFactors = [];\n\n    /**\n     * Constructor\n     *\n     * @param string $model           `Sec-CH-UA-Model` header field\n     * @param string $platform        `Sec-CH-UA-Platform` header field\n     * @param string $platformVersion `Sec-CH-UA-Platform-Version` header field\n     * @param string $uaFullVersion   `Sec-CH-UA-Full-Version` header field\n     * @param array  $fullVersionList `Sec-CH-UA-Full-Version-List` header field\n     * @param bool   $mobile          `Sec-CH-UA-Mobile` header field\n     * @param string $architecture    `Sec-CH-UA-Arch` header field\n     * @param string $bitness         `Sec-CH-UA-Bitness`\n     * @param string $app             `HTTP_X-REQUESTED-WITH`\n     * @param array  $formFactors     `Sec-CH-UA-Form-Factors` header field\n     */\n    public function __construct(string $model = '', string $platform = '', string $platformVersion = '', string $uaFullVersion = '', array $fullVersionList = [], bool $mobile = false, string $architecture = '', string $bitness = '', string $app = '', array $formFactors = []) // phpcs:ignore Generic.Files.LineLength\n    {\n        $this->model           = $model;\n        $this->platform        = $platform;\n        $this->platformVersion = $platformVersion;\n        $this->uaFullVersion   = $uaFullVersion;\n        $this->fullVersionList = $fullVersionList;\n        $this->mobile          = $mobile;\n        $this->architecture    = $architecture;\n        $this->bitness         = $bitness;\n        $this->app             = $app;\n        $this->formFactors     = $formFactors;\n    }\n\n    /**\n     * Magic method to directly allow accessing the protected properties\n     *\n     * @param string $variable\n     *\n     * @return mixed\n     *\n     * @throws \\Exception\n     */\n    public function __get(string $variable)\n    {\n        if (\\property_exists($this, $variable)) {\n            return $this->$variable;\n        }\n\n        throw new \\Exception('Invalid ClientHint property requested.');\n    }\n\n    /**\n     * Returns if the client hints\n     *\n     * @return bool\n     */\n    public function isMobile(): bool\n    {\n        return $this->mobile;\n    }\n\n    /**\n     * Returns the Architecture\n     *\n     * @return string\n     */\n    public function getArchitecture(): string\n    {\n        return $this->architecture;\n    }\n\n    /**\n     * Returns the Bitness\n     *\n     * @return string\n     */\n    public function getBitness(): string\n    {\n        return $this->bitness;\n    }\n\n    /**\n     * Returns the device model\n     *\n     * @return string\n     */\n    public function getModel(): string\n    {\n        return $this->model;\n    }\n\n    /**\n     * Returns the Operating System\n     *\n     * @return string\n     */\n    public function getOperatingSystem(): string\n    {\n        return $this->platform;\n    }\n\n    /**\n     * Returns the Operating System version\n     *\n     * @return string\n     */\n    public function getOperatingSystemVersion(): string\n    {\n        return $this->platformVersion;\n    }\n\n    /**\n     * Returns the Browser name\n     *\n     * @return array<string, string>\n     */\n    public function getBrandList(): array\n    {\n        if (\\is_array($this->fullVersionList) && \\count($this->fullVersionList)) {\n            $brands   = \\array_column($this->fullVersionList, 'brand');\n            $versions = \\array_column($this->fullVersionList, 'version');\n\n            if (\\count($brands) === \\count($versions)) {\n                // @phpstan-ignore-next-line\n                return \\array_combine($brands, $versions);\n            }\n        }\n\n        return [];\n    }\n\n    /**\n     * Returns the Browser version\n     *\n     * @return string\n     */\n    public function getBrandVersion(): string\n    {\n        if (!empty($this->uaFullVersion)) {\n            return $this->uaFullVersion;\n        }\n\n        return '';\n    }\n\n    /**\n     * Returns the Android app id\n     *\n     * @return string\n     */\n    public function getApp(): string\n    {\n        return $this->app;\n    }\n\n    /**\n     * Returns the formFactor device type name\n     *\n     * @return array\n     */\n    public function getFormFactors(): array\n    {\n        return $this->formFactors;\n    }\n\n    /**\n     * Factory method to easily instantiate this class using an array containing all available (client hint) headers\n     *\n     * @param array $headers\n     *\n     * @return ClientHints\n     */\n    public static function factory(array $headers): ClientHints\n    {\n        $model           = $platform = $platformVersion = $uaFullVersion = $architecture = $bitness = '';\n        $app             = '';\n        $mobile          = false;\n        $fullVersionList = [];\n        $formFactors     = [];\n\n        foreach ($headers as $name => $value) {\n            if (empty($value)) {\n                continue;\n            }\n\n            switch (\\str_replace('_', '-', \\strtolower((string) $name))) {\n                case 'http-sec-ch-ua-arch':\n                case 'sec-ch-ua-arch':\n                case 'arch':\n                case 'architecture':\n                    $architecture = \\trim($value, '\"');\n\n                    break;\n                case 'http-sec-ch-ua-bitness':\n                case 'sec-ch-ua-bitness':\n                case 'bitness':\n                    $bitness = \\trim($value, '\"');\n\n                    break;\n                case 'http-sec-ch-ua-mobile':\n                case 'sec-ch-ua-mobile':\n                case 'mobile':\n                    $mobile = true === $value || '1' === $value || '?1' === $value;\n\n                    break;\n                case 'http-sec-ch-ua-model':\n                case 'sec-ch-ua-model':\n                case 'model':\n                    $model = \\trim($value, '\"');\n\n                    break;\n                case 'http-sec-ch-ua-full-version':\n                case 'sec-ch-ua-full-version':\n                case 'uafullversion':\n                    $uaFullVersion = \\trim($value, '\"');\n\n                    break;\n                case 'http-sec-ch-ua-platform':\n                case 'sec-ch-ua-platform':\n                case 'platform':\n                    $platform = \\trim($value, '\"');\n\n                    break;\n                case 'http-sec-ch-ua-platform-version':\n                case 'sec-ch-ua-platform-version':\n                case 'platformversion':\n                    $platformVersion = \\trim($value, '\"');\n\n                    break;\n                case 'brands':\n                    if (!empty($fullVersionList)) {\n                        break;\n                    }\n                    // use this only if no other header already set the list\n                case 'fullversionlist':\n                    $fullVersionList = \\is_array($value) ? $value : $fullVersionList;\n\n                    break;\n                case 'http-sec-ch-ua':\n                case 'sec-ch-ua':\n                    if (!empty($fullVersionList)) {\n                        break;\n                    }\n                    // use this only if no other header already set the list\n                case 'http-sec-ch-ua-full-version-list':\n                case 'sec-ch-ua-full-version-list':\n                    $reg  = '/^\"([^\"]+)\"; ?v=\"([^\"]+)\"(?:, )?/';\n                    $list = [];\n\n                    while (\\preg_match($reg, $value, $matches)) {\n                        $list[] = ['brand' => $matches[1], 'version' => $matches[2]];\n                        $value  = \\substr($value, \\strlen($matches[0]));\n                    }\n\n                    if (\\count($list)) {\n                        $fullVersionList = $list;\n                    }\n\n                    break;\n                case 'http-x-requested-with':\n                case 'x-requested-with':\n                    if ('xmlhttprequest' !== \\strtolower($value)) {\n                        $app = $value;\n                    }\n\n                    break;\n                case 'formfactors':\n                case 'http-sec-ch-ua-form-factors':\n                case 'sec-ch-ua-form-factors':\n                    if (\\is_array($value)) {\n                        $formFactors = \\array_map('\\strtolower', $value);\n                    } elseif (\\preg_match_all('~\"([a-z]+)\"~i', \\strtolower($value), $matches)) {\n                        $formFactors = $matches[1];\n                    }\n\n                    break;\n            }\n        }\n\n        return new self(\n            $model,\n            $platform,\n            $platformVersion,\n            $uaFullVersion,\n            $fullVersionList,\n            $mobile,\n            $architecture,\n            $bitness,\n            $app,\n            $formFactors\n        );\n    }\n}\n"
        },
        {
          "name": "DeviceDetector.php",
          "type": "blob",
          "size": 32.7626953125,
          "content": "<?php\n\n/**\n * Device Detector - The Universal Device Detection library for parsing User Agents\n *\n * @link https://matomo.org\n *\n * @license http://www.gnu.org/licenses/lgpl.html LGPL v3 or later\n */\n\ndeclare(strict_types=1);\n\nnamespace DeviceDetector;\n\nuse DeviceDetector\\Cache\\CacheInterface;\nuse DeviceDetector\\Cache\\StaticCache;\nuse DeviceDetector\\Parser\\AbstractBotParser;\nuse DeviceDetector\\Parser\\Bot;\nuse DeviceDetector\\Parser\\Client\\AbstractClientParser;\nuse DeviceDetector\\Parser\\Client\\Browser;\nuse DeviceDetector\\Parser\\Client\\FeedReader;\nuse DeviceDetector\\Parser\\Client\\Library;\nuse DeviceDetector\\Parser\\Client\\MediaPlayer;\nuse DeviceDetector\\Parser\\Client\\MobileApp;\nuse DeviceDetector\\Parser\\Client\\PIM;\nuse DeviceDetector\\Parser\\Device\\AbstractDeviceParser;\nuse DeviceDetector\\Parser\\Device\\Camera;\nuse DeviceDetector\\Parser\\Device\\CarBrowser;\nuse DeviceDetector\\Parser\\Device\\Console;\nuse DeviceDetector\\Parser\\Device\\HbbTv;\nuse DeviceDetector\\Parser\\Device\\Mobile;\nuse DeviceDetector\\Parser\\Device\\Notebook;\nuse DeviceDetector\\Parser\\Device\\PortableMediaPlayer;\nuse DeviceDetector\\Parser\\Device\\ShellTv;\nuse DeviceDetector\\Parser\\OperatingSystem;\nuse DeviceDetector\\Parser\\VendorFragment;\nuse DeviceDetector\\Yaml\\ParserInterface as YamlParser;\nuse DeviceDetector\\Yaml\\Spyc;\n\n/**\n * Class DeviceDetector\n *\n * Magic Device Type Methods:\n * @method bool isSmartphone()\n * @method bool isFeaturePhone()\n * @method bool isTablet()\n * @method bool isPhablet()\n * @method bool isConsole()\n * @method bool isPortableMediaPlayer()\n * @method bool isCarBrowser()\n * @method bool isTV()\n * @method bool isSmartDisplay()\n * @method bool isSmartSpeaker()\n * @method bool isCamera()\n * @method bool isWearable()\n * @method bool isPeripheral()\n *\n * Magic Client Type Methods:\n * @method bool isBrowser()\n * @method bool isFeedReader()\n * @method bool isMobileApp()\n * @method bool isPIM()\n * @method bool isLibrary()\n * @method bool isMediaPlayer()\n */\nclass DeviceDetector\n{\n    /**\n     * Current version number of DeviceDetector\n     */\n    public const VERSION = '6.4.2';\n\n    /**\n     * Constant used as value for unknown browser / os\n     */\n    public const UNKNOWN = 'UNK';\n\n    /**\n     * Holds all registered client types\n     * @var array\n     */\n    protected $clientTypes = [];\n\n    /**\n     * Holds the useragent that should be parsed\n     * @var string\n     */\n    protected $userAgent = '';\n\n    /**\n     * Holds the client hints that should be parsed\n     * @var ?ClientHints\n     */\n    protected $clientHints = null;\n\n    /**\n     * Holds the operating system data after parsing the UA\n     * @var ?array\n     */\n    protected $os = null;\n\n    /**\n     * Holds the client data after parsing the UA\n     * @var ?array\n     */\n    protected $client = null;\n\n    /**\n     * Holds the device type after parsing the UA\n     * @var ?int\n     */\n    protected $device = null;\n\n    /**\n     * Holds the device brand data after parsing the UA\n     * @var string\n     */\n    protected $brand = '';\n\n    /**\n     * Holds the device model data after parsing the UA\n     * @var string\n     */\n    protected $model = '';\n\n    /**\n     * Holds bot information if parsing the UA results in a bot\n     * (All other information attributes will stay empty in that case)\n     *\n     * If $discardBotInformation is set to true, this property will be set to\n     * true if parsed UA is identified as bot, additional information will be not available\n     *\n     * If $skipBotDetection is set to true, bot detection will not be performed and isBot will\n     * always be false\n     *\n     * @var array|bool|null\n     */\n    protected $bot = null;\n\n    /**\n     * @var bool\n     */\n    protected $discardBotInformation = false;\n\n    /**\n     * @var bool\n     */\n    protected $skipBotDetection = false;\n\n    /**\n     * Holds the cache class used for caching the parsed yml-Files\n     * @var CacheInterface|null\n     */\n    protected $cache = null;\n\n    /**\n     * Holds the parser class used for parsing yml-Files\n     * @var YamlParser|null\n     */\n    protected $yamlParser = null;\n\n    /**\n     * @var array<AbstractClientParser>\n     */\n    protected $clientParsers = [];\n\n    /**\n     * @var array<AbstractDeviceParser>\n     */\n    protected $deviceParsers = [];\n\n    /**\n     * @var array<AbstractBotParser>\n     */\n    public $botParsers = [];\n\n    /**\n     * @var bool\n     */\n    private $parsed = false;\n\n    /**\n     * Constructor\n     *\n     * @param string      $userAgent   UA to parse\n     * @param ClientHints $clientHints Browser client hints to parse\n     */\n    public function __construct(string $userAgent = '', ?ClientHints $clientHints = null)\n    {\n        if ('' !== $userAgent) {\n            $this->setUserAgent($userAgent);\n        }\n\n        if ($clientHints instanceof ClientHints) {\n            $this->setClientHints($clientHints);\n        }\n\n        $this->addClientParser(new FeedReader());\n        $this->addClientParser(new MobileApp());\n        $this->addClientParser(new MediaPlayer());\n        $this->addClientParser(new PIM());\n        $this->addClientParser(new Browser());\n        $this->addClientParser(new Library());\n\n        $this->addDeviceParser(new HbbTv());\n        $this->addDeviceParser(new ShellTv());\n        $this->addDeviceParser(new Notebook());\n        $this->addDeviceParser(new Console());\n        $this->addDeviceParser(new CarBrowser());\n        $this->addDeviceParser(new Camera());\n        $this->addDeviceParser(new PortableMediaPlayer());\n        $this->addDeviceParser(new Mobile());\n\n        $this->addBotParser(new Bot());\n    }\n\n    /**\n     * @param string $methodName\n     * @param array  $arguments\n     *\n     * @return bool\n     */\n    public function __call(string $methodName, array $arguments): bool\n    {\n        foreach (AbstractDeviceParser::getAvailableDeviceTypes() as $deviceName => $deviceType) {\n            if (\\strtolower($methodName) === 'is' . \\strtolower(\\str_replace(' ', '', $deviceName))) {\n                return $this->getDevice() === $deviceType;\n            }\n        }\n\n        foreach ($this->clientTypes as $client) {\n            if (\\strtolower($methodName) === 'is' . \\strtolower(\\str_replace(' ', '', $client))) {\n                return $this->getClient('type') === $client;\n            }\n        }\n\n        throw new \\BadMethodCallException(\"Method {$methodName} not found\");\n    }\n\n    /**\n     * Sets the useragent to be parsed\n     *\n     * @param string $userAgent\n     */\n    public function setUserAgent(string $userAgent): void\n    {\n        if ($this->userAgent !== $userAgent) {\n            $this->reset();\n        }\n\n        $this->userAgent = $userAgent;\n    }\n\n    /**\n     * Sets the browser client hints to be parsed\n     *\n     * @param ?ClientHints $clientHints\n     */\n    public function setClientHints(?ClientHints $clientHints = null): void\n    {\n        if ($this->clientHints !== $clientHints) {\n            $this->reset();\n        }\n\n        $this->clientHints = $clientHints;\n    }\n\n    /**\n     * @param AbstractClientParser $parser\n     *\n     * @throws \\Exception\n     */\n    public function addClientParser(AbstractClientParser $parser): void\n    {\n        $this->clientParsers[] = $parser;\n        $this->clientTypes[]   = $parser->getName();\n    }\n\n    /**\n     * @return array<AbstractClientParser>\n     */\n    public function getClientParsers(): array\n    {\n        return $this->clientParsers;\n    }\n\n    /**\n     * @param AbstractDeviceParser $parser\n     *\n     * @throws \\Exception\n     */\n    public function addDeviceParser(AbstractDeviceParser $parser): void\n    {\n        $this->deviceParsers[] = $parser;\n    }\n\n    /**\n     * @return array<AbstractDeviceParser>\n     */\n    public function getDeviceParsers(): array\n    {\n        return $this->deviceParsers;\n    }\n\n    /**\n     * @param AbstractBotParser $parser\n     */\n    public function addBotParser(AbstractBotParser $parser): void\n    {\n        $this->botParsers[] = $parser;\n    }\n\n    /**\n     * @return array<AbstractBotParser>\n     */\n    public function getBotParsers(): array\n    {\n        return $this->botParsers;\n    }\n\n    /**\n     * Sets whether to discard additional bot information\n     * If information is discarded it's only possible check whether UA was detected as bot or not.\n     * (Discarding information speeds up the detection a bit)\n     *\n     * @param bool $discard\n     */\n    public function discardBotInformation(bool $discard = true): void\n    {\n        $this->discardBotInformation = $discard;\n    }\n\n    /**\n     * Sets whether to skip bot detection.\n     * It is needed if we want bots to be processed as a simple clients. So we can detect if it is mobile client,\n     * or desktop, or enything else. By default all this information is not retrieved for the bots.\n     *\n     * @param bool $skip\n     */\n    public function skipBotDetection(bool $skip = true): void\n    {\n        $this->skipBotDetection = $skip;\n    }\n\n    /**\n     * Returns if the parsed UA was identified as a Bot\n     *\n     * @return bool\n     *\n     * @see bots.yml for a list of detected bots\n     *\n     */\n    public function isBot(): bool\n    {\n        return !empty($this->bot);\n    }\n\n    /**\n     * Returns if the parsed UA was identified as a touch enabled device\n     *\n     * Note: That only applies to windows 8 tablets\n     *\n     * @return bool\n     */\n    public function isTouchEnabled(): bool\n    {\n        $regex = 'Touch';\n\n        return !!$this->matchUserAgent($regex);\n    }\n\n    /**\n     * Returns if the parsed UA is detected as a mobile device\n     *\n     * @return bool\n     */\n    public function isMobile(): bool\n    {\n        // Client hints indicate a mobile device\n        if ($this->clientHints instanceof ClientHints && $this->clientHints->isMobile()) {\n            return true;\n        }\n\n        // Mobile device types\n        if (\\in_array($this->device, [\n            AbstractDeviceParser::DEVICE_TYPE_FEATURE_PHONE,\n            AbstractDeviceParser::DEVICE_TYPE_SMARTPHONE,\n            AbstractDeviceParser::DEVICE_TYPE_TABLET,\n            AbstractDeviceParser::DEVICE_TYPE_PHABLET,\n            AbstractDeviceParser::DEVICE_TYPE_CAMERA,\n            AbstractDeviceParser::DEVICE_TYPE_PORTABLE_MEDIA_PAYER,\n        ])\n        ) {\n            return true;\n        }\n\n        // non mobile device types\n        if (\\in_array($this->device, [\n            AbstractDeviceParser::DEVICE_TYPE_TV,\n            AbstractDeviceParser::DEVICE_TYPE_SMART_DISPLAY,\n            AbstractDeviceParser::DEVICE_TYPE_CONSOLE,\n        ])\n        ) {\n            return false;\n        }\n\n        // Check for browsers available for mobile devices only\n        if ($this->usesMobileBrowser()) {\n            return true;\n        }\n\n        $osName = $this->getOs('name');\n\n        if (empty($osName) || self::UNKNOWN === $osName) {\n            return false;\n        }\n\n        return !$this->isBot() && !$this->isDesktop();\n    }\n\n    /**\n     * Returns if the parsed UA was identified as desktop device\n     * Desktop devices are all devices with an unknown type that are running a desktop os\n     *\n     * @return bool\n     *\n     * @see OperatingSystem::$desktopOsArray\n     *\n     */\n    public function isDesktop(): bool\n    {\n        $osName = $this->getOsAttribute('name');\n\n        if (empty($osName) || self::UNKNOWN === $osName) {\n            return false;\n        }\n\n        // Check for browsers available for mobile devices only\n        if ($this->usesMobileBrowser()) {\n            return false;\n        }\n\n        return OperatingSystem::isDesktopOs($osName);\n    }\n\n    /**\n     * Returns the operating system data extracted from the parsed UA\n     *\n     * If $attr is given only that property will be returned\n     *\n     * @param string $attr property to return(optional)\n     *\n     * @return array|string|null\n     */\n    public function getOs(string $attr = '')\n    {\n        if ('' === $attr) {\n            return $this->os;\n        }\n\n        return $this->getOsAttribute($attr);\n    }\n\n    /**\n     * Returns the client data extracted from the parsed UA\n     *\n     * If $attr is given only that property will be returned\n     *\n     * @param string $attr property to return(optional)\n     *\n     * @return array|string|null\n     */\n    public function getClient(string $attr = '')\n    {\n        if ('' === $attr) {\n            return $this->client;\n        }\n\n        return $this->getClientAttribute($attr);\n    }\n\n    /**\n     * Returns the device type extracted from the parsed UA\n     *\n     * @return int|null\n     *\n     * @see AbstractDeviceParser::$deviceTypes for available device types\n     *\n     */\n    public function getDevice(): ?int\n    {\n        return $this->device;\n    }\n\n    /**\n     * Returns the device type extracted from the parsed UA\n     *\n     * @return string\n     *\n     * @see AbstractDeviceParser::$deviceTypes for available device types\n     *\n     */\n    public function getDeviceName(): string\n    {\n        if (null !== $this->getDevice()) {\n            return AbstractDeviceParser::getDeviceName($this->getDevice());\n        }\n\n        return '';\n    }\n\n    /**\n     * Returns the device brand extracted from the parsed UA\n     *\n     * @return string\n     *\n     * @see self::$deviceBrand for available device brands\n     *\n     * @deprecated since 4.0 - short codes might be removed in next major release\n     */\n    public function getBrand(): string\n    {\n        return AbstractDeviceParser::getShortCode($this->brand);\n    }\n\n    /**\n     * Returns the full device brand name extracted from the parsed UA\n     *\n     * @return string\n     *\n     * @see self::$deviceBrand for available device brands\n     *\n     */\n    public function getBrandName(): string\n    {\n        return $this->brand;\n    }\n\n    /**\n     * Returns the device model extracted from the parsed UA\n     *\n     * @return string\n     */\n    public function getModel(): string\n    {\n        return $this->model;\n    }\n\n    /**\n     * Returns the user agent that is set to be parsed\n     *\n     * @return string\n     */\n    public function getUserAgent(): string\n    {\n        return $this->userAgent;\n    }\n\n    /**\n     * Returns the client hints that is set to be parsed\n     *\n     * @return ?ClientHints\n     */\n    public function getClientHints(): ?ClientHints\n    {\n        return $this->clientHints;\n    }\n\n    /**\n     * Returns the bot extracted from the parsed UA\n     *\n     * @return array|bool|null\n     */\n    public function getBot()\n    {\n        return $this->bot;\n    }\n\n    /**\n     * Returns true, if userAgent was already parsed with parse()\n     *\n     * @return bool\n     */\n    public function isParsed(): bool\n    {\n        return $this->parsed;\n    }\n\n    /**\n     * Triggers the parsing of the current user agent\n     */\n    public function parse(): void\n    {\n        if ($this->isParsed()) {\n            return;\n        }\n\n        $this->parsed = true;\n\n        // skip parsing for empty useragents or those not containing any letter (if no client hints were provided)\n        if ((empty($this->userAgent) || !\\preg_match('/([a-z])/i', $this->userAgent))\n            && empty($this->clientHints)\n        ) {\n            return;\n        }\n\n        $this->parseBot();\n\n        if ($this->isBot()) {\n            return;\n        }\n\n        $this->parseOs();\n\n        /**\n         * Parse Clients\n         * Clients might be browsers, Feed Readers, Mobile Apps, Media Players or\n         * any other application accessing with an parseable UA\n         */\n        $this->parseClient();\n\n        $this->parseDevice();\n    }\n\n    /**\n     * Parses a useragent and returns the detected data\n     *\n     * ATTENTION: Use that method only for testing or very small applications\n     * To get fast results from DeviceDetector you need to make your own implementation,\n     * that should use one of the caching mechanisms. See README.md for more information.\n     *\n     * @param string       $ua          UserAgent to parse\n     * @param ?ClientHints $clientHints Client Hints to parse\n     *\n     * @return array\n     *\n     * @deprecated\n     *\n     * @internal\n     *\n     */\n    public static function getInfoFromUserAgent(string $ua, ?ClientHints $clientHints = null): array\n    {\n        static $deviceDetector;\n\n        if (!($deviceDetector instanceof DeviceDetector)) {\n            $deviceDetector = new DeviceDetector();\n        }\n\n        $deviceDetector->setUserAgent($ua);\n        $deviceDetector->setClientHints($clientHints);\n\n        $deviceDetector->parse();\n\n        if ($deviceDetector->isBot()) {\n            return [\n                'user_agent' => $deviceDetector->getUserAgent(),\n                'bot'        => $deviceDetector->getBot(),\n            ];\n        }\n\n        /** @var array $client */\n        $client        = $deviceDetector->getClient();\n        $browserFamily = 'Unknown';\n\n        if ($deviceDetector->isBrowser()\n            && true === \\is_array($client)\n            && true === \\array_key_exists('family', $client)\n            && null !== $client['family']\n        ) {\n            $browserFamily = $client['family'];\n        }\n\n        unset($client['short_name'], $client['family']);\n\n        /** @var array $os */\n        $os       = $deviceDetector->getOs();\n        $osFamily = $os['family'] ?? 'Unknown';\n\n        unset($os['short_name'], $os['family']);\n\n        return [\n            'user_agent'     => $deviceDetector->getUserAgent(),\n            'os'             => $os,\n            'client'         => $client,\n            'device'         => [\n                'type'  => $deviceDetector->getDeviceName(),\n                'brand' => $deviceDetector->getBrandName(),\n                'model' => $deviceDetector->getModel(),\n            ],\n            'os_family'      => $osFamily,\n            'browser_family' => $browserFamily,\n        ];\n    }\n\n    /**\n     * Sets the Cache class\n     *\n     * @param CacheInterface $cache\n     */\n    public function setCache(CacheInterface $cache): void\n    {\n        $this->cache = $cache;\n    }\n\n    /**\n     * Returns Cache object\n     *\n     * @return CacheInterface\n     */\n    public function getCache(): CacheInterface\n    {\n        if (!empty($this->cache)) {\n            return $this->cache;\n        }\n\n        return new StaticCache();\n    }\n\n    /**\n     * Sets the Yaml Parser class\n     *\n     * @param YamlParser $yamlParser\n     */\n    public function setYamlParser(YamlParser $yamlParser): void\n    {\n        $this->yamlParser = $yamlParser;\n    }\n\n    /**\n     * Returns Yaml Parser object\n     *\n     * @return YamlParser\n     */\n    public function getYamlParser(): YamlParser\n    {\n        if (!empty($this->yamlParser)) {\n            return $this->yamlParser;\n        }\n\n        return new Spyc();\n    }\n\n    /**\n     * @param string $attr\n     *\n     * @return string\n     */\n    protected function getClientAttribute(string $attr): string\n    {\n        if (!isset($this->client[$attr])) {\n            return self::UNKNOWN;\n        }\n\n        return $this->client[$attr];\n    }\n\n    /**\n     * @param string $attr\n     *\n     * @return string\n     */\n    protected function getOsAttribute(string $attr): string\n    {\n        if (!isset($this->os[$attr])) {\n            return self::UNKNOWN;\n        }\n\n        return $this->os[$attr];\n    }\n\n    /**\n     * Returns if the parsed UA contains the 'Android; Tablet;' fragment\n     *\n     * @return bool\n     */\n    protected function hasAndroidTableFragment(): bool\n    {\n        $regex = 'Android( [.0-9]+)?; Tablet;|Tablet(?! PC)|.*\\-tablet$';\n\n        return !!$this->matchUserAgent($regex);\n    }\n\n    /**\n     * Returns if the parsed UA contains the 'Android; Mobile;' fragment\n     *\n     * @return bool\n     */\n    protected function hasAndroidMobileFragment(): bool\n    {\n        $regex = 'Android( [.0-9]+)?; Mobile;|.*\\-mobile$';\n\n        return !!$this->matchUserAgent($regex);\n    }\n\n    /**\n     * Returns if the parsed UA contains the 'Android; Mobile VR;' fragment\n     *\n     * @return bool\n     */\n    protected function hasAndroidVRFragment(): bool\n    {\n        $regex = 'Android( [.0-9]+)?; Mobile VR;| VR ';\n\n        return !!$this->matchUserAgent($regex);\n    }\n\n    /**\n     * Returns if the parsed UA contains the 'Desktop;', 'Desktop x32;', 'Desktop x64;' or 'Desktop WOW64;' fragment\n     *\n     * @return bool\n     */\n    protected function hasDesktopFragment(): bool\n    {\n        $regex = 'Desktop(?: (x(?:32|64)|WOW64))?;';\n\n        return !!$this->matchUserAgent($regex);\n    }\n\n    /**\n     * Returns if the parsed UA contains usage of a mobile only browser\n     *\n     * @return bool\n     */\n    protected function usesMobileBrowser(): bool\n    {\n        return 'browser' === $this->getClient('type')\n            && Browser::isMobileOnlyBrowser($this->getClientAttribute('name'));\n    }\n\n    /**\n     * Parses the UA for bot information using the Bot parser\n     */\n    protected function parseBot(): void\n    {\n        if ($this->skipBotDetection) {\n            $this->bot = false;\n\n            return;\n        }\n\n        $parsers = $this->getBotParsers();\n\n        foreach ($parsers as $parser) {\n            $parser->setYamlParser($this->getYamlParser());\n            $parser->setCache($this->getCache());\n            $parser->setUserAgent($this->getUserAgent());\n            $parser->setClientHints($this->getClientHints());\n\n            if ($this->discardBotInformation) {\n                $parser->discardDetails();\n            }\n\n            $bot = $parser->parse();\n\n            if (!empty($bot)) {\n                $this->bot = $bot;\n\n                break;\n            }\n        }\n    }\n\n    /**\n     * Tries to detect the client (e.g. browser, mobile app, ...)\n     */\n    protected function parseClient(): void\n    {\n        $parsers = $this->getClientParsers();\n\n        foreach ($parsers as $parser) {\n            $parser->setYamlParser($this->getYamlParser());\n            $parser->setCache($this->getCache());\n            $parser->setUserAgent($this->getUserAgent());\n            $parser->setClientHints($this->getClientHints());\n            $client = $parser->parse();\n\n            if (!empty($client)) {\n                $this->client = $client;\n\n                break;\n            }\n        }\n    }\n\n    /**\n     * Tries to detect the device type, model and brand\n     */\n    protected function parseDevice(): void\n    {\n        $parsers = $this->getDeviceParsers();\n\n        foreach ($parsers as $parser) {\n            $parser->setYamlParser($this->getYamlParser());\n            $parser->setCache($this->getCache());\n            $parser->setUserAgent($this->getUserAgent());\n            $parser->setClientHints($this->getClientHints());\n\n            if ($parser->parse()) {\n                $this->device = $parser->getDeviceType();\n                $this->model  = $parser->getModel();\n                $this->brand  = $parser->getBrand();\n\n                break;\n            }\n        }\n\n        /**\n         * If no model could be parsed from useragent, we use the one from client hints if available\n         */\n        if ($this->clientHints instanceof ClientHints && empty($this->model)) {\n            $this->model = $this->clientHints->getModel();\n        }\n\n        /**\n         * If no brand has been assigned try to match by known vendor fragments\n         */\n        if (empty($this->brand)) {\n            $vendorParser = new VendorFragment($this->getUserAgent());\n            $vendorParser->setYamlParser($this->getYamlParser());\n            $vendorParser->setCache($this->getCache());\n            $this->brand = $vendorParser->parse()['brand'] ?? '';\n        }\n\n        $osName       = $this->getOsAttribute('name');\n        $osFamily     = $this->getOsAttribute('family');\n        $osVersion    = $this->getOsAttribute('version');\n        $clientName   = $this->getClientAttribute('name');\n        $appleOsNames = ['iPadOS', 'tvOS', 'watchOS', 'iOS', 'Mac'];\n\n        /**\n         * if it's fake UA then it's best not to identify it as Apple running Android OS or GNU/Linux\n         */\n        if ('Apple' === $this->brand && !\\in_array($osName, $appleOsNames)) {\n            $this->device = null;\n            $this->brand  = '';\n            $this->model  = '';\n        }\n\n        /**\n         * Assume all devices running iOS / Mac OS are from Apple\n         */\n        if (empty($this->brand) && \\in_array($osName, $appleOsNames)) {\n            $this->brand = 'Apple';\n        }\n\n        /**\n         * All devices containing VR fragment are assumed to be a wearable\n         */\n        if (null === $this->device && $this->hasAndroidVRFragment()) {\n            $this->device = AbstractDeviceParser::DEVICE_TYPE_WEARABLE;\n        }\n\n        /**\n         * Chrome on Android passes the device type based on the keyword 'Mobile'\n         * If it is present the device should be a smartphone, otherwise it's a tablet\n         * See https://developer.chrome.com/multidevice/user-agent#chrome_for_android_user_agent\n         * Note: We do not check for browser (family) here, as there might be mobile apps using Chrome, that won't have\n         *       a detected browser, but can still be detected. So we check the useragent for Chrome instead.\n         */\n        if (null === $this->device && 'Android' === $osFamily\n            && $this->matchUserAgent('Chrome/[.0-9]*')\n        ) {\n            if ($this->matchUserAgent('(?:Mobile|eliboM)')) {\n                $this->device = AbstractDeviceParser::DEVICE_TYPE_SMARTPHONE;\n            } else {\n                $this->device = AbstractDeviceParser::DEVICE_TYPE_TABLET;\n            }\n        }\n\n        /**\n         * Some UA contain the fragment 'Pad/APad', so we assume those devices as tablets\n         */\n        if (AbstractDeviceParser::DEVICE_TYPE_SMARTPHONE === $this->device && $this->matchUserAgent('Pad/APad')) {\n            $this->device = AbstractDeviceParser::DEVICE_TYPE_TABLET;\n        }\n\n        /**\n         * Some UA contain the fragment 'Android; Tablet;' or 'Opera Tablet', so we assume those devices as tablets\n         */\n        if (null === $this->device && ($this->hasAndroidTableFragment()\n            || $this->matchUserAgent('Opera Tablet'))\n        ) {\n            $this->device = AbstractDeviceParser::DEVICE_TYPE_TABLET;\n        }\n\n        /**\n         * Some user agents simply contain the fragment 'Android; Mobile;', so we assume those devices as smartphones\n         */\n        if (null === $this->device && $this->hasAndroidMobileFragment()) {\n            $this->device = AbstractDeviceParser::DEVICE_TYPE_SMARTPHONE;\n        }\n\n        /**\n         * Android up to 3.0 was designed for smartphones only. But as 3.0, which was tablet only, was published\n         * too late, there were a bunch of tablets running with 2.x\n         * With 4.0 the two trees were merged and it is for smartphones and tablets\n         *\n         * So were are expecting that all devices running Android < 2 are smartphones\n         * Devices running Android 3.X are tablets. Device type of Android 2.X and 4.X+ are unknown\n         */\n        if (null === $this->device && 'Android' === $osName && '' !== $osVersion) {\n            if (-1 === \\version_compare($osVersion, '2.0')) {\n                $this->device = AbstractDeviceParser::DEVICE_TYPE_SMARTPHONE;\n            } elseif (\\version_compare($osVersion, '3.0') >= 0\n                && -1 === \\version_compare($osVersion, '4.0')\n            ) {\n                $this->device = AbstractDeviceParser::DEVICE_TYPE_TABLET;\n            }\n        }\n\n        /**\n         * All detected feature phones running android are more likely a smartphone\n         */\n        if (AbstractDeviceParser::DEVICE_TYPE_FEATURE_PHONE === $this->device && 'Android' === $osFamily) {\n            $this->device = AbstractDeviceParser::DEVICE_TYPE_SMARTPHONE;\n        }\n\n        /**\n         * All unknown devices under running Java ME are more likely features phones\n         */\n        if ('Java ME' === $osName && null === $this->device) {\n            $this->device = AbstractDeviceParser::DEVICE_TYPE_FEATURE_PHONE;\n        }\n\n        /**\n         * All devices running KaiOS are more likely features phones\n         */\n        if ('KaiOS' === $osName) {\n            $this->device = AbstractDeviceParser::DEVICE_TYPE_FEATURE_PHONE;\n        }\n\n        /**\n         * According to http://msdn.microsoft.com/en-us/library/ie/hh920767(v=vs.85).aspx\n         * Internet Explorer 10 introduces the \"Touch\" UA string token. If this token is present at the end of the\n         * UA string, the computer has touch capability, and is running Windows 8 (or later).\n         * This UA string will be transmitted on a touch-enabled system running Windows 8 (RT)\n         *\n         * As most touch enabled devices are tablets and only a smaller part are desktops/notebooks we assume that\n         * all Windows 8 touch devices are tablets.\n         */\n\n        if (null === $this->device && ('Windows RT' === $osName || ('Windows' === $osName\n            && \\version_compare($osVersion, '8') >= 0)) && $this->isTouchEnabled()\n        ) {\n            $this->device = AbstractDeviceParser::DEVICE_TYPE_TABLET;\n        }\n\n        /**\n         * All devices running Puffin Secure Browser that contain letter 'D' are assumed to be desktops\n         */\n        if (null === $this->device && $this->matchUserAgent('Puffin/(?:\\d+[.\\d]+)[LMW]D')) {\n            $this->device = AbstractDeviceParser::DEVICE_TYPE_DESKTOP;\n        }\n\n        /**\n         * All devices running Puffin Web Browser that contain letter 'P' are assumed to be smartphones\n         */\n        if (null === $this->device && $this->matchUserAgent('Puffin/(?:\\d+[.\\d]+)[AIFLW]P')) {\n            $this->device = AbstractDeviceParser::DEVICE_TYPE_SMARTPHONE;\n        }\n\n        /**\n         * All devices running Puffin Web Browser that contain letter 'T' are assumed to be tablets\n         */\n        if (null === $this->device && $this->matchUserAgent('Puffin/(?:\\d+[.\\d]+)[AILW]T')) {\n            $this->device = AbstractDeviceParser::DEVICE_TYPE_TABLET;\n        }\n\n        /**\n         * All devices running Opera TV Store are assumed to be a tv\n         */\n        if ($this->matchUserAgent('Opera TV Store| OMI/')) {\n            $this->device = AbstractDeviceParser::DEVICE_TYPE_TV;\n        }\n\n        /**\n         * All devices that contain Andr0id in string are assumed to be a tv\n         */\n        $hasDeviceTvType = false === \\in_array($this->device, [\n            AbstractDeviceParser::DEVICE_TYPE_TV,\n            AbstractDeviceParser::DEVICE_TYPE_PERIPHERAL,\n        ]) && $this->matchUserAgent('Andr0id|(?:Android(?: UHD)?|Google) TV|\\(lite\\) TV|BRAVIA| TV$');\n\n        if ($hasDeviceTvType) {\n            $this->device = AbstractDeviceParser::DEVICE_TYPE_TV;\n        }\n\n        /**\n         * All devices running Tizen TV or SmartTV are assumed to be a tv\n         */\n        if (null === $this->device && $this->matchUserAgent('SmartTV|Tizen.+ TV .+$')) {\n            $this->device = AbstractDeviceParser::DEVICE_TYPE_TV;\n        }\n\n        /**\n         * Devices running those clients are assumed to be a TV\n         */\n        if (\\in_array($clientName, [\n            'Kylo', 'Espial TV Browser', 'LUJO TV Browser', 'LogicUI TV Browser', 'Open TV Browser', 'Seraphic Sraf',\n            'Opera Devices', 'Crow Browser', 'Vewd Browser', 'TiviMate', 'Quick Search TV', 'QJY TV Browser', 'TV Bro',\n        ])\n        ) {\n            $this->device = AbstractDeviceParser::DEVICE_TYPE_TV;\n        }\n\n        /**\n         * All devices containing TV fragment are assumed to be a tv\n         */\n        if (null === $this->device && $this->matchUserAgent('\\(TV;')) {\n            $this->device = AbstractDeviceParser::DEVICE_TYPE_TV;\n        }\n\n        /**\n         * Set device type desktop if string ua contains desktop\n         */\n        $hasDesktop = AbstractDeviceParser::DEVICE_TYPE_DESKTOP !== $this->device\n            && false !== \\strpos($this->userAgent, 'Desktop')\n            && $this->hasDesktopFragment();\n\n        if ($hasDesktop) {\n            $this->device = AbstractDeviceParser::DEVICE_TYPE_DESKTOP;\n        }\n\n        // set device type to desktop for all devices running a desktop os that were not detected as another device type\n        if (null !== $this->device || !$this->isDesktop()) {\n            return;\n        }\n\n        $this->device = AbstractDeviceParser::DEVICE_TYPE_DESKTOP;\n    }\n\n    /**\n     * Tries to detect the operating system\n     */\n    protected function parseOs(): void\n    {\n        $osParser = new OperatingSystem();\n        $osParser->setUserAgent($this->getUserAgent());\n        $osParser->setClientHints($this->getClientHints());\n        $osParser->setYamlParser($this->getYamlParser());\n        $osParser->setCache($this->getCache());\n        $this->os = $osParser->parse();\n    }\n\n    /**\n     * @param string $regex\n     *\n     * @return array|null\n     */\n    protected function matchUserAgent(string $regex): ?array\n    {\n        $regex = '/(?:^|[^A-Z_-])(?:' . \\str_replace('/', '\\/', $regex) . ')/i';\n\n        if (\\preg_match($regex, $this->userAgent, $matches)) {\n            return $matches;\n        }\n\n        return null;\n    }\n\n    /**\n     * Resets all detected data\n     */\n    protected function reset(): void\n    {\n        $this->bot    = null;\n        $this->client = null;\n        $this->device = null;\n        $this->os     = null;\n        $this->brand  = '';\n        $this->model  = '';\n        $this->parsed = false;\n    }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 7.47265625,
          "content": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "Parser",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 57.0732421875,
          "content": "DeviceDetector\n==============\n\n[![Latest Stable Version](https://poser.pugx.org/matomo/device-detector/v/stable)](https://packagist.org/packages/matomo/device-detector)\n[![Total Downloads](https://poser.pugx.org/matomo/device-detector/downloads)](https://packagist.org/packages/matomo/device-detector)\n[![License](https://poser.pugx.org/matomo/device-detector/license)](https://packagist.org/packages/matomo/device-detector)\n\n## Code Status\n\n[![PHPUnit](https://github.com/matomo-org/device-detector/actions/workflows/phpunit.yml/badge.svg?branch=master)](https://github.com/matomo-org/device-detector/actions/workflows/phpunit.yml?branch=master \"PHPUnit\")\n[![PHPStan](https://github.com/matomo-org/device-detector/actions/workflows/phpstan.yml/badge.svg?branch=master)](https://github.com/matomo-org/device-detector/actions/workflows/phpstan.yml?branch=master \"PHPStan\")\n[![PHPCS](https://github.com/matomo-org/device-detector/actions/workflows/phpcs.yml/badge.svg?branch=master)](https://github.com/matomo-org/device-detector/actions/workflows/phpcs.yml?branch=master \"PHPCS\")\n[![YAML Lint](https://github.com/matomo-org/device-detector/actions/workflows/yamllint.yml/badge.svg?branch=master)](https://github.com/matomo-org/device-detector/actions/workflows/yamllint.yml?branch=master \"YAML Lint\")\n[![Validate regular Expressions](https://github.com/matomo-org/device-detector/actions/workflows/regular_expressions.yml/badge.svg?branch=master)](https://github.com/matomo-org/device-detector/actions/workflows/regular_expressions.yml?branch=master \"Validate regular Expressions\")\n\n[![Average time to resolve an issue](https://www.isitmaintained.com/badge/resolution/matomo-org/device-detector.svg)](https://www.isitmaintained.com/project/matomo-org/device-detector \"Average time to resolve an issue\")\n[![Percentage of issues still open](https://www.isitmaintained.com/badge/open/matomo-org/device-detector.svg)](https://www.isitmaintained.com/project/matomo-org/device-detector \"Percentage of issues still open\")\n\n## Description\n\nThe Universal Device Detection library that parses User Agents and Browser Client Hints to detect devices (desktop, tablet, mobile, tv, cars, console, etc.), clients (browsers, feed readers, media players, PIMs, ...), operating systems, brands and models.\n\n## Usage\n\nUsing DeviceDetector with composer is quite easy. Just add `matomo/device-detector` to your projects requirements.\n\n```\ncomposer require matomo/device-detector\n```\n\nAnd use some code like this one:\n\n\n```php\nrequire_once 'vendor/autoload.php';\n\nuse DeviceDetector\\ClientHints;\nuse DeviceDetector\\DeviceDetector;\nuse DeviceDetector\\Parser\\Device\\AbstractDeviceParser;\n\n// OPTIONAL: Set version truncation to none, so full versions will be returned\n// By default only minor versions will be returned (e.g. X.Y)\n// for other options see VERSION_TRUNCATION_* constants in DeviceParserAbstract class\nAbstractDeviceParser::setVersionTruncation(AbstractDeviceParser::VERSION_TRUNCATION_NONE);\n\n$userAgent = $_SERVER['HTTP_USER_AGENT']; // change this to the useragent you want to parse\n\n// Client Hints are optional\n// If you want to use them your server must announce that it supports client hints, using the Accept-CH header to specify the hints that it is interested in receiving.\n// See e.g. https://developer.mozilla.org/en-US/docs/Web/HTTP/Client_hints\n$clientHints = ClientHints::factory($_SERVER);\n\n$dd = new DeviceDetector($userAgent, $clientHints);\n\n// OPTIONAL: Set caching method\n// By default static cache is used, which works best within one php process (memory array caching)\n// To cache across requests use caching in files or memcache\n// $dd->setCache(new Doctrine\\Common\\Cache\\PhpFileCache('./tmp/'));\n\n// OPTIONAL: Set custom yaml parser\n// By default Spyc will be used for parsing yaml files. You can also use another yaml parser.\n// You may need to implement the Yaml Parser facade if you want to use another parser than Spyc or [Symfony](https://github.com/symfony/yaml)\n// $dd->setYamlParser(new DeviceDetector\\Yaml\\Symfony());\n\n// OPTIONAL: If called, getBot() will only return true if a bot was detected  (speeds up detection a bit)\n// $dd->discardBotInformation();\n\n// OPTIONAL: If called, bot detection will completely be skipped (bots will be detected as regular devices then)\n// $dd->skipBotDetection();\n\n$dd->parse();\n\nif ($dd->isBot()) {\n  // handle bots,spiders,crawlers,...\n  $botInfo = $dd->getBot();\n} else {\n  $clientInfo = $dd->getClient(); // holds information about browser, feed reader, media player, ...\n  $osInfo = $dd->getOs();\n  $device = $dd->getDeviceName();\n  $brand = $dd->getBrandName();\n  $model = $dd->getModel();\n}\n```\nMethods check device type:\n```php\n$dd->isSmartphone();\n$dd->isFeaturePhone();\n$dd->isTablet();\n$dd->isPhablet();\n$dd->isConsole();\n$dd->isPortableMediaPlayer();\n$dd->isCarBrowser();\n$dd->isTV();\n$dd->isSmartDisplay();\n$dd->isSmartSpeaker();\n$dd->isCamera();\n$dd->isWearable();\n$dd->isPeripheral();\n```\nMethods check client type:\n```php\n$dd->isBrowser();\n$dd->isFeedReader();\n$dd->isMobileApp();\n$dd->isPIM();\n$dd->isLibrary();\n$dd->isMediaPlayer();\n```\nGet OS family:\n```php\nuse DeviceDetector\\Parser\\OperatingSystem;\n\n$osFamily = OperatingSystem::getOsFamily($dd->getOs('name'));\n```\nGet browser family:\n```php\nuse DeviceDetector\\Parser\\Client\\Browser;\n\n$browserFamily = Browser::getBrowserFamily($dd->getClient('name'));\n```\n\nInstead of using the full power of DeviceDetector it might in some cases be better to use only specific parsers.\nIf you aim to check if a given useragent is a bot and don't require any of the other information, you can directly use the bot parser.\n\n```php\nrequire_once 'vendor/autoload.php';\n\nuse DeviceDetector\\Parser\\Bot AS BotParser;\n\n$botParser = new BotParser();\n$botParser->setUserAgent($userAgent);\n\n// OPTIONAL: discard bot information. parse() will then return true instead of information\n$botParser->discardDetails();\n\n$result = $botParser->parse();\n\nif (!is_null($result)) {\n    // do not do anything if a bot is detected\n    return;\n}\n\n// handle non-bot requests\n\n```\n\n## Using without composer\n\nAlternatively to using composer you can also use the included `autoload.php`.\nThis script will register an autoloader to dynamically load all classes in `DeviceDetector` namespace.\n\nDevice Detector requires a YAML parser. By default `Spyc` parser is used.\nAs this library is not included you need to include it manually or use another YAML parser.\n\n```php\n<?php\n\ninclude_once 'path/to/spyc/Spyc.php';\ninclude_once 'path/to/device-detector/autoload.php';\n\nuse DeviceDetector\\ClientHints;\nuse DeviceDetector\\DeviceDetector;\nuse DeviceDetector\\Parser\\Device\\AbstractDeviceParser;\n\n// OPTIONAL: Set version truncation to none, so full versions will be returned\n// By default only minor versions will be returned (e.g. X.Y)\n// for other options see VERSION_TRUNCATION_* constants in DeviceParserAbstract class\nAbstractDeviceParser::setVersionTruncation(AbstractDeviceParser::VERSION_TRUNCATION_NONE);\n\n$userAgent = $_SERVER['HTTP_USER_AGENT']; // change this to the useragent you want to parse\n$clientHints = ClientHints::factory($_SERVER); // client hints are optional\n\n$dd = new DeviceDetector($userAgent, $clientHints);\n\n// ...\n\n```\n\n\n### Caching\n\nBy default, DeviceDetector uses a built-in array cache. To get better performance, you can use your own caching solution:\n\n* You can create a class that implement `DeviceDetector\\Cache\\CacheInterface`\n* Or if your project uses a [PSR-6](https://www.php-fig.org/psr/psr-6/) or [PSR-16](https://www.php-fig.org/psr/psr-16/) compliant caching system (like [symfony/cache](https://github.com/symfony/cache) or [matthiasmullie/scrapbook](https://github.com/matthiasmullie/scrapbook)), you can inject them the following way:\n\n```php\n// Example with PSR-6 and Symfony\n$cache = new \\Symfony\\Component\\Cache\\Adapter\\ApcuAdapter();\n$dd->setCache(\n    new \\DeviceDetector\\Cache\\PSR6Bridge($cache)\n);\n\n// Example with PSR-16 and ScrapBook\n$cache = new \\MatthiasMullie\\Scrapbook\\Psr16\\SimpleCache(\n    new \\MatthiasMullie\\Scrapbook\\Adapters\\Apc()\n);\n$dd->setCache(\n    new \\DeviceDetector\\Cache\\PSR16Bridge($cache)\n);\n\n// Example with Doctrine\n$cache = new \\Doctrine\\Common\\Cache\\ApcuCache();\n$dd->setCache(\n    new \\DeviceDetector\\Cache\\DoctrineBridge($cache)\n);\n\n// Example with Laravel\n$dd->setCache(\n    new \\DeviceDetector\\Cache\\LaravelCache()\n);\n```\n\n## Contributing\n\n### Hacking the library\n\nThis is a free/libre library under license LGPL v3 or later.\n\nYour pull requests and/or feedback is very welcome!\n\n### Listing all user agents from your logs\nSometimes it may be useful to generate the list of most used user agents on your website,\nextracting this list from your access logs using the following command:\n\n```\nzcat ~/path/to/access/logs* | awk -F'\"' '{print $6}' | sort | uniq -c | sort -rn | head -n20000 > /home/matomo/top-user-agents.txt\n```\n\n### Contributors\nCreated by the [Matomo team](https://matomo.org/team/), Stefan Giehl, Matthieu Aubry, Michał Gaździk,\nTomasz Majczak, Grzegorz Kaszuba, Piotr Banaszczyk and contributors.\n\nTogether we can build the best Device Detection library.\n\nWe are looking forward to your contributions and pull requests!\n\n## Tests\n\nSee also: [QA at Matomo](https://developer.matomo.org/guides/tests)\n\n### Running tests\n\n```\ncd /path/to/device-detector\ncurl -sS https://getcomposer.org/installer | php\nphp composer.phar install\n./vendor/bin/phpunit\n```\n\n## Device Detector for other languages\n\nThere are already a few ports of this tool to other languages:\n\n- **.NET** https://github.com/totpero/DeviceDetector.NET\n- **Ruby** https://github.com/podigee/device_detector\n- **JavaScript/TypeScript/NodeJS** https://github.com/etienne-martin/device-detector-js\n- **NodeJS** https://github.com/sanchezzzhak/node-device-detector\n- **Python 3** https://github.com/thinkwelltwd/device_detector\n- **Crystal** https://github.com/creadone/device_detector\n- **Elixir** https://github.com/elixir-inspector/ua_inspector\n- **Java** https://github.com/deevvicom/device-detector\n- **Java** https://github.com/PaniniGelato/java-device-detector\n- **Rust** https://github.com/simplecastapps/rust-device-detector\n- **Rust** https://github.com/stry-rs/device-detector\n- **Go** https://github.com/gamebtc/devicedetector\n- **Go** https://github.com/umutbasal/device-detector-go\n- **Go** https://github.com/robicode/device-detector\n\n## Icon packs\n\nIf you are looking for icons to use alongside Device Detector, these repositories can be of use:\n- Official [Matomo](https://github.com/matomo-org/matomo-icons/) pack\n- Unofficial [Simbiat](https://github.com/Simbiat/DeviceDetectorIcons) pack\n\n## What Device Detector is able to detect\n\nThe lists below are auto generated and updated from time to time. Some of them might not be complete.\n\n*Last update: 2025/01/12*\n\n### List of detected operating systems:\n\nAIX, Android, Android TV, Alpine Linux, Amazon Linux, AmigaOS, Armadillo OS, AROS, tvOS, Arch Linux, AOSC OS, ASPLinux, Azure Linux, BackTrack, Bada, Baidu Yi, BeOS, BlackBerry OS, BlackBerry Tablet OS, blackPanther OS, Bliss OS, Brew, BrightSignOS, Caixa Mágica, CentOS, CentOS Stream, Clear Linux OS, ClearOS Mobile, Chrome OS, Chromium OS, China OS, CyanogenMod, Debian, Deepin, DragonFly, DVKBuntu, ElectroBSD, EulerOS, Fedora, Fenix, Firefox OS, Fire OS, Foresight Linux, Freebox, FreeBSD, FRITZ!OS, FydeOS, Fuchsia, Gentoo, GENIX, GEOS, gNewSense, GridOS, Google TV, HP-UX, Haiku OS, iPadOS, HarmonyOS, HasCodingOS, HELIX OS, IRIX, Inferno, Java ME, Joli OS, KaiOS, Kali, Kanotix, KIN OS, Knoppix, KreaTV, Kubuntu, GNU/Linux, LeafOS, LindowsOS, Linspire, Lineage OS, Liri OS, Loongnix, Lubuntu, Lumin OS, LuneOS, VectorLinux, Mac, Maemo, Mageia, Mandriva, MeeGo, Meta Horizon, MocorDroid, moonOS, Motorola EZX, Mint, MildWild, MorphOS, NetBSD, MTK / Nucleus, MRE, NeXTSTEP, NEWS-OS, Nintendo, Nintendo Mobile, Nova, OS/2, OSF1, OpenBSD, OpenVMS, OpenVZ, OpenWrt, Opera TV, Oracle Linux, Ordissimo, Pardus, PCLinuxOS, PICO OS, Plasma Mobile, PlayStation Portable, PlayStation, Proxmox VE, Puffin OS, PureOS, Qtopia, Raspberry Pi OS, Raspbian, Red Hat, Red Star, RedOS, Revenge OS, risingOS, RISC OS, Rocky Linux, Roku OS, Rosa, RouterOS, Remix OS, Resurrection Remix OS, REX, RazoDroiD, RTOS & Next, Sabayon, SUSE, Sailfish OS, Scientific Linux, SeewoOS, SerenityOS, Sirin OS, Slackware, Solaris, Star-Blade OS, Syllable, Symbian, Symbian OS, Symbian OS Series 40, Symbian OS Series 60, Symbian^3, TencentOS, ThreadX, Tizen, TiVo OS, TmaxOS, Turbolinux, Ubuntu, ULTRIX, UOS, VIDAA, ViziOS, watchOS, Wear OS, WebTV, Whale OS, Windows, Windows CE, Windows IoT, Windows Mobile, Windows Phone, Windows RT, WoPhone, Xbox, Xubuntu, YunOS, Zenwalk, ZorinOS, iOS, palmOS, Webian, webOS\n\n### List of detected browsers:\n\nVia, Pure Mini Browser, Pure Lite Browser, Raise Fast Browser, Rabbit Private Browser, Fast Browser UC Lite, Fast Explorer, Lightning Browser, Cake Browser, IE Browser Fast, Vegas Browser, OH Browser, OH Private Browser, XBrowser Mini, Sharkee Browser, Lark Browser, Pluma, Anka Browser, Azka Browser, Dragon Browser, Easy Browser, Dark Web Browser, Dark Browser, 18+ Privacy Browser, 115 Browser, 1DM Browser, 1DM+ Browser, 2345 Browser, 360 Secure Browser, 360 Phone Browser, 7654 Browser, Avant Browser, ABrowse, Acoo Browser, AdBlock Browser, Adult Browser, Ai Browser, Airfind Secure Browser, ANT Fresco, ANTGalio, Aloha Browser, Aloha Browser Lite, ALVA, AltiBrowser, Amaya, Amaze Browser, Amerigo, Amigo, Android Browser, AOL Explorer, AOL Desktop, AOL Shield, AOL Shield Pro, Aplix, AppBrowzer, AppTec Secure Browser, APUS Browser, Arora, Arctic Fox, Amiga Voyager, Amiga Aweb, APN Browser, Arachne, Arc Search, Armorfly Browser, Arvin, Ask.com, Asus Browser, Atom, Atomic Web Browser, Atlas, Avast Secure Browser, AVG Secure Browser, Avira Secure Browser, AwoX, Awesomium, Basic Web Browser, Beaker Browser, Beamrise, BF Browser, BlackBerry Browser, Bluefy, BrowseHere, Browser Hup Pro, Baidu Browser, Baidu Spark, Bang, Bangla Browser, Basilisk, Belva Browser, Beyond Private Browser, Beonex, Berry Browser, Bitchute Browser, BizBrowser, BlackHawk, Bloket, Bunjalloo, B-Line, Black Lion Browser, Blue Browser, Bonsai, Borealis Navigator, Brave, BriskBard, BroKeep Browser, Browspeed Browser, BrowseX, Browzar, Browlser, Browser Mini, BrowsBit, Biyubi, Byffox, BXE Browser, Camino, Catalyst, Catsxp, Cave Browser, CCleaner, CG Browser, ChanjetCloud, Chedot, Cherry Browser, Centaury, Cliqz, Coc Coc, CoolBrowser, Colibri, Columbus Browser, Comodo Dragon, Coast, Charon, CM Browser, CM Mini, Chrome Frame, Headless Chrome, Chrome, Chrome Mobile iOS, Conkeror, Chrome Mobile, Chowbo, Classilla, CoolNovo, Colom Browser, CometBird, Comfort Browser, COS Browser, Cornowser, Chim Lac, ChromePlus, Chromium, Chromium GOST, Cyberfox, Cheshire, Cromite, Crow Browser, Crusta, Craving Explorer, Crazy Browser, Cunaguaro, Chrome Webview, CyBrowser, dbrowser, Peeps dBrowser, Dark Web, Dark Web Private, Debuggable Browser, Decentr, Deepnet Explorer, deg-degan, Deledao, Delta Browser, Desi Browser, DeskBrowse, Dezor, Diigo Browser, DoCoMo, Dolphin, Dolphin Zero, Dorado, Dot Browser, Dooble, Dillo, DUC Browser, DuckDuckGo Privacy Browser, East Browser, Ecosia, Edge WebView, Every Browser, Epic, Elinks, EinkBro, Element Browser, Elements Browser, Eolie, Explore Browser, eZ Browser, EudoraWeb, EUI Browser, GNOME Web, G Browser, Espial TV Browser, fGet, Falkon, Faux Browser, Fire Browser, Fiery Browser, Firefox Mobile iOS, Firebird, Fluid, Fennec, Firefox, Firefox Focus, Firefox Reality, Firefox Rocket, Firefox Klar, Float Browser, Flock, Floorp, Flow, Flow Browser, Firefox Mobile, Fireweb, Fireweb Navigator, Flash Browser, Flast, Flyperlink, FOSS Browser, FreeU, Freedom Browser, Frost, Frost+, Fulldive, Galeon, Gener8, Ghostery Privacy Browser, GinxDroid Browser, Glass Browser, Godzilla Browser, Good Browser, Google Earth, Google Earth Pro, GOG Galaxy, GoBrowser, GoKu, GO Browser, GreenBrowser, Habit Browser, Halo Browser, Harman Browser, HasBrowser, Hawk Turbo Browser, Hawk Quick Browser, Helio, Herond Browser, Hexa Web Browser, Hi Browser, hola! Browser, Holla Web Browser, HotBrowser, HotJava, HONOR Browser, HTC Browser, Huawei Browser Mobile, Huawei Browser, HUB Browser, iBrowser, iBrowser Mini, IBrowse, iDesktop PC Browser, iCab, iCab Mobile, iNet Browser, Iridium, Iron Mobile, IceCat, IceDragon, Isivioo, IVVI Browser, Iceweasel, Impervious Browser, Incognito Browser, Inspect Browser, Insta Browser, Internet Explorer, Internet Browser Secure, Internet Webbrowser, Intune Managed Browser, Indian UC Mini Browser, InBrowser, Involta Go, IE Mobile, Iron, Japan Browser, Jasmine, JavaFX, Jelly, Jig Browser, Jig Browser Plus, JioSphere, JUZI Browser, K.Browser, Keepsafe Browser, KeepSolid Browser, Kids Safe Browser, Kindle Browser, K-meleon, K-Ninja, Konqueror, Kapiko, Keyboard Browser, Kinza, Kitt, Kiwi, Kode Browser, KUN, KUTO Mini Browser, Kylo, Kazehakase, Cheetah Browser, Ladybird, Lagatos Browser, Legan Browser, Lexi Browser, Lenovo Browser, LieBaoFast, LG Browser, Light, Lightning Browser Plus, Lilo, Links, Liri Browser, LogicUI TV Browser, Lolifox, Lotus, Lovense Browser, LT Browser, LuaKit, LUJO TV Browser, Lulumi, Lunascape, Lunascape Lite, Lynx, Lynket Browser, Mandarin, Maple, MarsLab Web Browser, MaxBrowser, mCent, MicroB, NCSA Mosaic, Meizu Browser, Mercury, Me Browser, Mobile Safari, Midori, Midori Lite, MixerBox AI, Mobicip, Mi Browser, Mobile Silk, Mogok Browser, Motorola Internet Browser, Minimo, Mint Browser, Maxthon, MaxTube Browser, Maelstrom, Mises, Mmx Browser, MxNitro, Mypal, Monument Browser, MAUI WAP Browser, Naenara Browser, Navigateur Web, Naked Browser, Naked Browser Pro, NFS Browser, Ninetails, Nokia Browser, Nokia OSS Browser, Nokia Ovi Browser, Norton Private Browser, Nox Browser, NOMone VR Browser, NOOK Browser, NetSurf, NetFront, NetFront Life, NetPositive, Netscape, NextWord Browser, Ninesky, NTENT Browser, Nuanti Meta, Nuviu, Ocean Browser, Oculus Browser, Odd Browser, Opera Mini iOS, Obigo, Odin, Odin Browser, OceanHero, Odyssey Web Browser, Off By One, Office Browser, OhHai Browser, OnBrowser Lite, ONE Browser, Onion Browser, ONIONBrowser, Opera Crypto, Opera GX, Opera Neon, Opera Devices, Opera Mini, Opera Mobile, Opera, Opera Next, Opera Touch, Orbitum, Orca, Ordissimo, Oregano, Origin In-Game Overlay, Origyn Web Browser, OrNET Browser, Openwave Mobile Browser, OpenFin, Open Browser, Open Browser 4U, Open Browser fast 5G, Open Browser Lite, Open TV Browser, OmniWeb, Otter Browser, Owl Browser, OJR Browser, Palm Blazer, Pale Moon, Polypane, Prism, Oppo Browser, Opus Browser, Palm Pre, Puffin Cloud Browser, Puffin Incognito Browser, Puffin Secure Browser, Puffin Web Browser, Palm WebPro, Palmscape, Pawxy, Peach Browser, Perfect Browser, Perk, Phantom.me, Phantom Browser, Phoenix, Phoenix Browser, Photon, Pintar Browser, PirateBrowser, PICO Browser, PlayFree Browser, PocketBook Browser, Polaris, Polarity, PolyBrowser, Presearch, Privacy Browser, PrivacyWall, Privacy Explorer Fast Safe, Privacy Pioneer Browser, Private Internet Browser, Proxy Browser, Proxyium, Proxynet, ProxyFox, ProxyMax, Pi Browser, PronHub Browser, PSI Secure Browser, Reqwireless WebViewer, Roccat, Microsoft Edge, Qazweb, Qiyu, QJY TV Browser, Qmamu, Quick Search TV, QQ Browser Lite, QQ Browser Mini, QQ Browser, Quick Browser, Qutebrowser, Quark, QupZilla, Qwant Mobile, QtWeb, QtWebEngine, Rakuten Browser, Rakuten Web Search, Raspbian Chromium, RCA Tor Explorer, Realme Browser, Rekonq, RockMelt, Roku Browser, Samsung Browser, Samsung Browser Lite, Sailfish Browser, SberBrowser, Seewo Browser, SEMC-Browser, Sogou Explorer, Sogou Mobile Browser, SOTI Surf, Soul Browser, Soundy Browser, Safari, Safari Technology Preview, Safe Exam Browser, SalamWeb, Savannah Browser, SavySoda, Secure Browser, SFive, Shiira, Sidekick, SimpleBrowser, SilverMob US, Singlebox, Sizzy, Skye, Skyfire, SkyLeap, Seraphic Sraf, SiteKiosk, Sleipnir, SlimBoat, Slimjet, SP Browser, Sony Small Browser, Secure Private Browser, SecureX, Stampy Browser, 7Star, Smart Browser, Smart Search & Web Browser, Smart Lenovo Browser, Smooz, Snowshoe, Spark, Spectre Browser, Splash, Sputnik Browser, Sunrise, Sunflower Browser, SuperBird, Super Fast Browser, SuperFast Browser, Sushi Browser, surf, Surf Browser, Surfy Browser, Stargon, START Internet Browser, Stealth Browser, Steam In-Game Overlay, Streamy, Swiftfox, Swiftweasel, Seznam Browser, Sweet Browser, SX Browser, T+Browser, T-Browser, t-online.de Browser, TalkTo, Tao Browser, tararia, Thor, Tor Browser, TenFourFox, Tenta Browser, Tesla Browser, Tizen Browser, Tint Browser, TrueLocation Browser, TUC Mini Browser, TUSK, Tungsten, ToGate, Total Browser, TQ Browser, TweakStyle, TV Bro, TV-Browser Internet, U Browser, UBrowser, UC Browser, UC Browser HD, UC Browser Mini, UC Browser Turbo, Ui Browser Mini, UPhone Browser, UR Browser, Uzbl, Ume Browser, vBrowser, Vast Browser, VD Browser, Veera, Venus Browser, Vewd Browser, VibeMate, Nova Video Downloader Pro, Viasat Browser, Vivaldi, vivo Browser, Vivid Browser Mini, Vision Mobile Browser, Vertex Surf, VMware AirWatch, VMS Mosaic, Vonkeror, Vuhuv, Wear Internet Browser, Web Explorer, Web Browser & Explorer, Webian Shell, WebDiscover, WebPositive, Weltweitimnetz Browser, Wexond, Waterfox, Wave Browser, Wavebox, Whale Browser, Whale TV Browser, wOSBrowser, w3m, WeTab Browser, World Browser, Wolvic, Wukong Browser, Wyzo, YAGI, Yahoo! Japan Browser, Yandex Browser, Yandex Browser Corp, Yandex Browser Lite, Yaani Browser, Yo Browser, Yolo Browser, YouCare, YouBrowser, Yuzu Browser, xBrowser, MMBOX XBrowser, X Browser Lite, X-VPN, xBrowser Pro Super Fast, XNX Browser, XtremeCast, xStand, Xiino, XnBrowse, Xooloo Internet, Xvast, Zetakey, Zvu, Zirco Browser, Zordo Browser, ZTE Browser\n\n### List of detected browser engines:\n\nWebKit, Blink, Trident, Text-based, Dillo, iCab, Elektra, Presto, Clecko, Gecko, KHTML, NetFront, Edge, NetSurf, Servo, Goanna, EkiohFlow, Arachne, LibWeb, Maple\n\n### List of detected libraries:\n\naiohttp, Akka HTTP, Android License Verification Library, AnyEvent HTTP, Apache HTTP Client, Aria2, Artifactory, Axios, Azure Blob Storage, Azure Data Factory, Babashka HTTP Client, Boto3, Buildah, BuildKit, C++ REST SDK, CakePHP, CarrierWave, Containerd, containers, cPanel HTTP Client, cpp-httplib, cri-o, curl, Cygwin, Cypress, Dart, Deno, docker, Down, Electron Fetch, Emacs, Embarcadero URI Client, ESP32 HTTP Client, Faraday, fasthttp, ffmpeg, FFUF, FileDownloader, Free Download Manager, GeoIP Update, git-annex, go-container registry, Go-http-client, Google HTTP Java Client, got, GRequests, gRPC-Java, GStreamer, Guzzle (PHP HTTP Client), gvfs, hackney, Harbor registry client, Helm, HTML Parser, http.rb, HTTP:Tiny, HTTPie, httplib2, httprs, HTTPX, HTTP_Request2, ICAP Client, Insomnia REST Client, iOS Application, IPinfo, Jakarta Commons HttpClient, Jaunt, Java, Java HTTP Client, jsdom, KaiOS Downloader, Kiwi TCMS, Kiwi TCMS API, libdnf, libpod, libsoup, Libsyn, LUA OpenResty NGINX, Mandrill PHP, Mechanize, Mikrotik Fetch, Msray-Plus, Node Fetch, OKDownload Library, OkHttp, Open Build Service, Pa11y, Perl, Perl REST::Client, PhantomJS, PHP cURL Class, Podgrab, Postman Desktop, PRDownloader, Python Requests, Python urllib, QbHttp, quic-go, r-curl, Radio Downloader, ReactorNetty, req, request, Requests, reqwest, REST Client for Ruby, RestSharp, Resty, resty-requests, ruby, Safari View Service, ScalaJ HTTP, Skopeo, SlimerJS, Slim Framework, sqlmap, Stealer, superagent, Symfony, trafilatura, Typhoeus, uclient-fetch, Ultimate Sitemap Parser, undici, Unirest for Java, urlgrabber (yum), uTorrent, Wget, Windows HTTP, WinHttp WinHttpRequest, WWW-Mechanize, XML-RPC\n\n### List of detected media players:\n\nAlexa, Amarok, Audacious, Banshee, Boxee, Clementine, Deezer, DIGA, Downcast, FlyCast, Foobar2000, Google Podcasts, HTC Streaming Player, Hubhopper, iTunes, JHelioviewer, JRiver Media Center, Juice, Just Audio, Kasts, Kodi, MediaMonkey, Miro, MixerBox, MPlayer, mpv, MusicBee, Music Player Daemon, NexPlayer, Nightingale, QuickTime, Songbird, SONOS, Sony Media Go, Stagefright, StudioDisplay, SubStream, VLC, Winamp, Windows Media Player, XBMC, Xtream Player, YouView\n\n### List of detected mobile apps:\n\n'sodes, +Simple, 1Password, 2tch, ActionExtension, Adobe Acrobat Reader, Adobe Creative Cloud, Adobe IPM, Adobe NGL, Adobe Synchronizer, Adori, Agora, Aha Radio 2, AIDA64, Airr, Airsonic, AliExpress, Alipay, AllHitMusicRadio, All You Can Books, Amazon Fire, Amazon Music, Amazon Shopping, Ameba, Anchor, AnchorFM, AndroidDownloadManager, Anghami, AntennaPod, AntiBrowserSpy, AN WhatsApp, Anybox, Anytime Podcast Player, APK Downloader, Apollo, Apple iMessage, Apple News, Apple Podcasts, Apple Reminders, Apple TV, Arvocast, ASUS Updater, Audacy, Audials, Audible, Audio, Audiobooks, Audio Now, Autoplius.lt, Avid Link, Awasu, Background Intelligent Transfer Service, Baidu Box App, Baidu Input, Ballz, Bank Millenium, Battle.net, BB2C, BBC News, Bear, Be Focused, BetBull, BeyondPod, Bible, Bible KJV, Binance, Bitcoin Core, Bitsboard, Bitwarden, Blackboard, Blitz, Blue Proxy, BlueStacks, Bolt, BonPrix, Bookmobile, Bookshelf, Boom, Boom360, Boomplay, Bose Music, Bose SoundTouch, bPod, Breez, Bridge, Broadcast, Broadway Podcast Network, Browser-Anonymizer, Browser app, BrowserPlus, Bullhorn, BuzzVideo, CamScanner, Capital, capsule.fm, Castamatic, Castaway, CastBox, Castro, Castro 2, CCleaner, CGN, ChMate, Chrome Update, Ciisaa, Citrix Workspace, Classic FM, Client, Clipbox+, Clovia, COAF SMART Citizen, Coinbase, Cooler, Copied, Cortana, Cosmicast, Covenant Eyes, CPod, CPU-Z, CrosswalkApp, Crypto.com DeFi Wallet, CSDN, Damus, Daum, De Standaard, De Telegraaf, DevCasts, DeviantArt, DingTalk, DIRECTV, Discord, DManager, Dogecoin Core, DoggCatcher, Don't Waste My Time!, douban App, DoubleTwist CloudPlayer, Doughnut, Douyin, Downcast, Downie, Downloader, Dr. Watson, DStream Air, Edge Update, Edmodo, EMAudioPlayer, Emby Theater, Epic Games Launcher, ESET Remote Administrator, eToro, Evolve Podcast, Expedia, Expo, F-Secure SAFE, Facebook, Facebook Audience Network, Facebook Groups, Facebook Lite, Facebook Messenger, Facebook Messenger Lite, faidr, Fathom, FeedR, FeedStation, Fiddler Classic, Files, Flipboard App, Flipp, FM WhatsApp, Focus Keeper, Focus Matrix, Fountain, Freespoke, Gaana, Garmin fenix 5X, Garmin Forerunner, GBWhatsApp, GetPodcast, Git, GitHub Desktop, GlobalProtect, GoEuro, Gold, GoldenPod, GoLoud, GoNative, Goodpods, GoodReader, Google Assistant, Google Drive, Google Fiber TV, Google Go, Google Lens, Google Nest Hub, Google Photos, Google Play Newsstand, Google Plus, Google Podcasts, Google Search App, Google Tag Manager, GroupMe, Guacamole, Hago, Hammel, HandBrake, HardCast, Hark Audio, Heart, HeartFocus Education, HermesPod, HeyTapBrowser, HiCast, HideX, Hik-Connect, Himalaya, HiSearch, HisThumbnail, HistoryHound, Hotels.com, HP Smart, HTTP request maker, Huawei Mobile Services, HyperCatcher, iCatcher, iHeartRadio, IMO HD Video Calls & Chat, IMO International Calls & Chat, Instabridge, Instacast, Instagram, Instapaper, iPlayTV, IPTV, IPTV Pro, iVoox, Jam, JaneStyle, JioSaavn, Jitsi Meet, JJ2GO, Jungle Disk, Just Listen, Kajabi, KakaoTalk, Keeper Password Manager, Kids Listen, KidsPod, Kik, KKBOX, Klara, Klarna, KPN Veilig, Kwai, Kwai Pro, L.A. Times, Landis+Gyr AIM Browser, Lark, Laughable, Lazada, LBC, LG Player, Line, LinkedIn, Listen, LiSTNR, Liulo, Logi Options+, LoseIt!, Luminary, Macrium Reflect, MBolsa, Megaphone, MEmpresas, Menucast, Mercantile Bank of Michigan, MessengerX, Meta Business Suite, Metacast, MetaMask, MetaTrader, Microsoft Bing, Microsoft Copilot, Microsoft Lync, Microsoft Office, Microsoft Office Access, Microsoft Office Excel, Microsoft Office Mobile, Microsoft Office OneDrive for Business, Microsoft Office OneNote, Microsoft Office PowerPoint, Microsoft Office Project, Microsoft Office Publisher, Microsoft Office Visio, Microsoft Office Word, Microsoft OneDrive, Microsoft Power Query, Microsoft Start, Microsoft Store, Mimir, mobile.de, MobileSMS, Mojeek, MOMO, MoonFM, mowPod, Moya, MX Player, My Bentley, MyTuner, My Watch Party, My World, nate, Naver, NAVER Dictionary, NET.mede, Netflix, NewsArticle App, Newsly, Nextcloud, NPR, NRC, NRC Audio, NTV Mobil, NuMuKi Browser, Obsidian, OBS Studio, Odnoklassniki, OfferUp, Opal Travel, Opera News, Opera Updater, Orange Radio, Outcast, Overcast, Overhaul FM, Paint by Number, Palco MP3, Pandora, Papers, PeaCast, Perplexity, Petal Search, Pic Collage, Pinterest, Player FM, PLAYit, Plex Media Server, Pocket Casts, Podbay, Podbean, Podcast & Radio Addict, Podcast App, Podcast Guru, Podcastly, Podcast Player, Podcast Republic, Podcat, Podcatcher Deluxe, Podchaser, Podclipper, PodCruncher, Podeo, Podfriend, Podhero, Podimo, PodKast, Podkicker, Podkicker Classic, Podkicker Pro, PodLP, PodMe, PodMN, PodNL, Podopolo, Podplay, Pods, PodTrapper, podU, Podurama, Podverse, Podvine, Podyssey, PowerShell, Procast, PugPig Bolt, Q-municate, qBittorrent, QQ, QQMusic, QuickCast, Quicksilver, Quora, R, radio.at, radio.de, radio.dk, radio.es, radio.fr, radio.it, radio.net, radio.pl, radio.pt, radio.se, RadioApp, Radio Italiane, Radioline, Radio Next, RadioPublic, Rave Social, Razer Synapse, RDDocuments, Reddit, Redditor, rekordbox, Repod, Reuters News, Rhythmbox, RNPS Action Cards, Roblox, RoboForm, Rocket Chat, RSSDemon, RSSRadio, Rutube, SachNoi, Safari Search Helper, SafeIP, Samsung Magician, Samsung Podcasts, SearchCraft, ServeStream, Shadow, Shadowrocket, Shopee, ShowMe, Signal, Sina Weibo, Siri, SiriusXM, Skyeng, Skyeng Teachers, Skype, Skype for Business, Slack, Snapchat, Snipd, SoFi, SogouSearch App, SohuNews, Soldier, Sonnet, Sony PlayStation 5, SOOP, SoundOn, SoundWaves, SPORT1, Spotify, Spreaker, Startsiden, Stitcher, StoryShots, Streamlabs OBS, Stream Master, Strimio, Surfshark, Swinsian, Swoot, Taobao, Teams, Tencent Docs, The Crossword, The Epoch Times, The New York Times, The Wall Street Journal, Theyub, Threads, Thunder, tieba, TikTok, TikTok Lite, TIM, TiviMate, TopBuzz, TopSecret Chat, TownNews Now, TracePal, Trade Me, TradingView, Treble.fm, TRP Retail Locator, TuneIn Radio, TuneIn Radio Pro, Turtlecast, Tuya Smart Life, TVirl, twinkle, Twitch Studio, Twitter, Twitterrific, U-Cursos, Ubook Player, UCast, Uconnect LIVE, Uforia, Unibox, UnityPlayer, Viber, Victor Reader Stream 3, Victor Reader Stream New Generation, Victor Reader Stream Trek, Virgin Radio, Visha, Visual Studio Code, Vodacast, Vuhuv, Vuze, waipu.tv, Walla News, WatchFree+, Wattpad, Wayback Machine, WebDAV, WeChat, WeChat Share Extension, Whatplay, WhatsApp, WhatsApp+2, WhatsApp Business, Whisper, WH Questions, Windows Antivirus, Windows CryptoAPI, Windows Delivery Optimization, Windows Push Notification Services, Windows Update Agent, Wireshark, Wirtschafts Woche, WNYC, Word Cookies!, WPS Office, Wynk Music, Xiao Yu Zhou, XING, XShare, XSplit Broadcaster, Y8 Browser, Yahoo! Japan, Yahoo OneSearch, YakYak, Yandex, Yandex Music, Yapa, Yelp Mobile, YouTube, Youtube Music, Yo WhatsApp, Zalo, ZEIT ONLINE, Zen, ZEPETO, Zoho Chat, Zune and *mobile apps using [AFNetworking](https://github.com/AFNetworking/AFNetworking) or [Electron](https://github.com/electron/electron)*\n\n### List of detected PIMs (personal information manager):\n\nAirmail, Apple Mail, Barca, Basecamp, BathyScaphe, BlueMail, DAVdroid, eM Client, Evernote, Foxmail, Franz, Gmail, JaneView, Live5ch, Lotus Notes, mailapp, MailBar, Mailbird, Mail Master, Mailspring, Microsoft Outlook, NAVER Mail, Notion, Outlook Express, Postbox, Raindrop.io, Rambox Pro, SeaMonkey, Spicebird, The Bat!, Thunderbird, Windows Mail, Yahoo! Mail, Yahoo Mail\n\n### List of detected feed readers:\n\nAkregator, Apple PubSub, BashPodder, Breaker, castero, castget, FeedDemon, Feeddler RSS Reader, gPodder, JetBrains Omea Reader, Liferea, NetNewsWire, Newsbeuter, NewsBlur, NewsBlur Mobile App, Newsboat, Playapod, PodPuppy, PritTorrent, Pulp, QuiteRSS, ReadKit, Reeder, RSS Bandit, RSS Junkie, RSSOwl, Stringer\n\n### List of brands with detected devices:\n\n2E, 3GNET, 3GO, 3Q, 4Good, 4ife, 5IVE, 7 Mobile, 10moons, 360, 8848, A&K, A1, A95X, AAUW, Accent, Accesstyle, Ace, Aceline, Acepad, Acer, Acteck, actiMirror, Adreamer, Adronix, Advan, Advance, Advantage Air, AEEZO, AFFIX, AfriOne, AGM, AG Mobile, AIDATA, Ainol, Airis, Airness, AIRON, Airpha, Airtel, Airties, AirTouch, AIS, Aiuto, Aiwa, Ajib, Akai, AKIRA, Alba, Alcatel, Alcor, ALDI NORD, ALDI SÜD, Alfawise, Alienware, Aligator, AllCall, AllDocube, allente, ALLINmobile, All Star, Allview, Allwinner, Alps, alpsmart, Altech UEC, Altibox, Altice, Altimo, altron, Altus, AMA, Amazon, Amazon Basics, AMCV, AMGOO, Amigoo, Amino, Amoi, ANBERNIC, ANCEL, Andowl, Angelcare, AngelTech, Anker, Anry, ANS, ANXONIT, AOC, Aocos, Aocwei, AOpen, Aoro, Aoson, AOYODKG, Apple, Aquarius, Archos, Arian Space, Arival, Ark, ArmPhone, Arnova, ARRIS, Artel, Artizlee, ArtLine, Arçelik, Asano, Asanzo, Ask, Aspera, ASSE, Assistant, astro (MY), Astro (UA), Asus, AT&T, Athesi, Atlantic Electrics, Atmaca Elektronik, ATMAN, ATMPC, ATOL, Atom, Atouch, Atozee, Attila, Atvio, Audiovox, AUPO, AURIS, Autan, AUX, Avaya, Avenzo, AVH, Avvio, Awow, AWOX, AXEN, Axioo, AXXA, Axxion, AYA, AYYA, Azeyou, AZOM, Azumi Mobile, Azupik, b2m, Backcell, BAFF, BangOlufsen, Barnes & Noble, BARTEC, BASE, BAUHN, BBK, BB Mobile, BDF, BDQ, BDsharing, Beafon, Becker, Beeline, Beelink, Beetel, Beista, Beko, Bell, Bellphone, Benco, Benesse, BenQ, BenQ-Siemens, BenWee, Benzo, Beyond, Bezkam, BGH, Biegedy, Bigben, BIHEE, BilimLand, Billion, Billow, BioRugged, Bird, Bitel, Bitmore, Bittium, Bkav, Black Bear, Black Box, Black Fox, Blackpcs, Blackphone, Blackton, Blackview, Blaupunkt, Bleck, BLISS, Blloc, Blow, Blu, Bluboo, Bluebird, Bluedot, Bluegood, BlueSky, Bluewave, BluSlate, BMAX, Bmobile, BMW, BMXC, Bobarry, bogo, Bolva, Bookeen, Boost, Botech, Boway, bq, BrandCode, Brandt, BRAVE, Bravis, BrightSign, Brigmton, Brondi, BROR, BS Mobile, Bubblegum, Bundy, Bush, BuzzTV, BYD, BYJU'S, BYYBUO, C5 Mobile, CADENA, CAGI, Camfone, Canaima, Canal+, Canal Digital, Canguro, Capitel, Captiva, Carbon Mobile, Carrefour, Casio, Casper, Cat, Cavion, CCIT, Cecotec, Ceibal, Celcus, Celkon, Cell-C, Cellacom, CellAllure, Cellution, CENTEK, Centric, CEPTER, CG Mobile, CGV, Chainway, Changhong, CHCNAV, Cherry Mobile, Chico Mobile, ChiliGreen, China Mobile, China Telecom, Chuwi, C Idea, CipherLab, Citycall, CKK Mobile, Claresta, Clarmin, CLAYTON, ClearPHONE, Clementoni, Cloud, Cloudfone, Cloudpad, Clout, Clovertek, CMF, CnM, Cobalt, Coby Kyros, COLORROOM, Colors, Comio, CommScope, Compal, Compaq, COMPUMAX, ComTrade Tesla, Conceptum, Concord, ConCorde, Condor, Connectce, Connex, Conquest, Continental Edison, Contixo, COOD-E, Coolpad, Coopers, CORN, Cosmote, Covia, Cowon, COYOTE, CPDEVICE, CreNova, Crescent, Cricket, Crius Mea, Crony, Crosscall, Crown, Ctroniq, Cube, CUBOT, Cuiud, Cultraview, CVTE, Cwowdefu, CX, Cyrus, D-Link, D-Tech, Daewoo, Danew, DangcapHD, Dany, Daria, DASS, Datalogic, Datamini, Datang, Datawind, Datsun, Dazen, DbPhone, Dbtel, Dcode, DEALDIG, Dell, Denali, Denver, Desay, DeWalt, DEXP, DEYI, DF, DGTEC, DIALN, Dialog, Dicam, Digi, Digicel, DIGICOM, Digidragon, DIGIFORS, Digihome, Digiland, Digit4G, Digma, DIJITSU, DIKOM, DIMO, Dinalink, Dinax, DING DING, Diofox, DIORA, DISH, Disney, Ditecma, Diva, DiverMax, Divisat, DIXON, DL, DMM, DMOAO, DNS, DoCoMo, Doffler, Dolamee, Dom.ru, Doogee, Doopro, Doov, Dopod, Doppio, Dora, DORLAND, Doro, DPA, DRAGON, Dragon Touch, Dreamgate, DreamStar, DreamTab, Droidlogic, Droxio, DSDevices, DSIC, Dtac, DUDU AUTO, Dune HD, DUNNS Mobile, Durabook, Duubee, Dykemann, Dyon, E-Boda, E-Ceros, E-TACHI, E-tel, Eagle, EagleSoar, EAS Electric, Easypix, EBEN, EBEST, Echo Mobiles, ecom, ECON, ECOO, ECS, Edenwood, EE, EFT, EGL, EGOTEK, Ehlel, Einstein, EKINOX, EKO, Eks Mobility, EKT, ELARI, ELE-GATE, Elecson, Electroneum, ELECTRONIA, Elekta, Elektroland, Element, Elenberg, Elephone, Elevate, Elista, Elong Mobile, Eltex, Ematic, Emporia, ENACOM, Energizer, Energy Sistem, Engel, ENIE, Enot, eNOVA, Entity, Envizen, Ephone, Epic, Epik One, Epson, Equator, Ergo, Ericsson, Ericy, Erisson, Essential, Essentielb, eSTAR, ETOE, Eton, eTouch, Etuline, Eudora, Eurocase, Eurostar, Evercoss, Everest, Everex, Everfine, Everis, Evertek, Evolio, Evolveo, Evoo, EVPAD, EvroMedia, evvoli, EWIS, EXCEED, Exmart, ExMobile, EXO, Explay, Express LUCK, ExtraLink, Extrem, Eyemoo, EYU, Ezio, Ezze, F&U, F+, F2 Mobile, F150, Facebook, Facetel, Facime, Fairphone, Famoco, Famous, Fantec, FaRao Pro, Farassoo, FarEasTone, Fengxiang, Fenoti, FEONAL, Fero, FFF SmartLife, Figgers, FiGi, FiGO, FiiO, Filimo, FILIX, FinePower, Finlux, FireFly Mobile, FISE, FITCO, Fluo, Fly, FLYCAT, FLYCOAY, FMT, FNB, FNF, Fobem, Fondi, Fonos, FOODO, FORME, Formovie, Formuler, Forstar, Fortis, FortuneShip, FOSSiBOT, Fourel, Four Mobile, Foxconn, FoxxD, FPT, free, Freetel, FreeYond, Frunsi, Fuego, FUJICOM, Fujitsu, Funai, Fusion5, Future Mobile Technology, Fxtec, G-Guard, G-PLUS, G-TiDE, G-Touch, Galactic, Galaxy Innovations, Gamma, Garmin-Asus, Gateway, Gazer, GDL, Geanee, Geant, Gear Mobile, Gemini, General Mobile, Genesis, GEOFOX, Geo Phone, Geotel, Geotex, GEOZON, Getnord, GFive, Gfone, Ghia, Ghong, Ghost, Gigabyte, Gigaset, Gini, Ginzzu, Gionee, GIRASOLE, Globex, Globmall, GlocalMe, Glofiish, GLONYX, Glory Star, GLX, GN Electronics, GOCLEVER, Gocomma, GoGEN, GOLDBERG, GoldMaster, GoldStar, Gol Mobile, Goly, Gome, GoMobile, GOODTEL, Google, Goophone, Gooweel, GOtv, Gplus, Gradiente, Graetz, Grape, Great Asia, Gree, Green Lion, Green Orange, Greentel, Gresso, Gretel, GroBerwert, Grundig, Grünberg, Gtel, GTMEDIA, GTX, Guophone, GVC Pro, H96, H133, Hafury, Haier, Haipai, Haixu, Hamlet, Hammer, Handheld, HannSpree, Hanseatic, Hanson, HAOQIN, HAOVM, Hardkernel, Harper, Hartens, Hasee, Hathway, HDC, HeadWolf, HEC, Heimat, Helio, Hemilton, HERO, HexaByte, Hezire, Hi, Hi-Level, Hiberg, HiBy, High Q, Highscreen, HiGrace, HiHi, HiKing, HiMax, Hi Nova, HIPER, Hipstreet, Hiremco, Hisense, Hitachi, Hitech, HKC, HKPro, HLLO, HMD, hoco, HOFER, Hoffmann, HOLLEBERG, Homatics, Hometech, Homtom, Honeywell, HongTop, HONKUAHG, Hoozo, Hopeland, Horion, Horizon, Horizont, Hosin, Hotel, Hot Pepper, HOTREALS, Hotwav, How, HP, HTC, Huadoo, Huagan, Huavi, Huawei, Hugerock, Humanware, Humax, Hurricane, Huskee, Hyatta, Hykker, Hyrican, Hytera, Hyundai, Hyve, i-Cherry, I-INN, i-Joy, i-mate, i-mobile, I-Plus, iBall, iBerry, ibowin, iBrit, IconBIT, iData, IDC, iDino, iDroid, iFIT, iGet, iHome Life, iHunt, I KALL, Ikea, IKI Mobile, iKoMo, iKon, iKonia, IKU Mobile, iLA, iLepo, iLife, iMan, Imaq, iMars, iMI, IMO Mobile, Imose, Impression, iMuz, iNavi, INCAR, Inch, Inco, iNew, Infiniton, Infinix, InFocus, InfoKit, Infomir, InFone, Inhon, Inka, Inkti, InnJoo, Innos, Innostream, Inoi, iNo Mobile, iNOVA, inovo, INQ, Insignia, INSYS, Intek, Intel, Intex, Invens, Inverto, Invin, iOcean, IOTWE, iOutdoor, iPEGTOP, iPro, iQ&T, IQM, IRA, Irbis, iReplace, Iris, iRobot, iRola, iRulu, iSafe Mobile, iStar, iSWAG, IT, iTel, iTruck, IUNI, iVA, iView, iVooMi, ivvi, iWaylink, iXTech, iYou, iZotron, Jambo, JAY-Tech, Jedi, Jeep, Jeka, Jesy, JFone, Jiake, Jiayu, Jinga, Jin Tu, Jio, Jivi, JKL, Jolla, Joy, JoySurf, JPay, JREN, Jumper, Juniper Systems, Just5, JVC, JXD, K-Lite, K-Touch, Kaan, Kaiomy, Kalley, Kanji, Kapsys, Karbonn, Kata, KATV1, Kazam, Kazuna, KDDI, Kempler & Strauss, Kenbo, Kendo, Keneksi, KENSHI, KENWOOD, Kenxinda, Khadas, Kiano, kidiby, Kingbox, Kingstar, Kingsun, KINGZONE, Kinstone, Kiowa, Kivi, Klipad, KN Mobile, Kocaso, Kodak, Kogan, Komu, Konka, Konrow, Koobee, Koolnee, Kooper, KOPO, Korax, Koridy, Koslam, Kraft, KREZ, KRIP, KRONO, Krüger&Matz, KT-Tech, KUBO, KuGou, Kuliao, Kult, Kumai, Kurio, KVADRA, Kvant, Kydos, Kyocera, Kyowon, Kzen, KZG, L-Max, LAIQ, Land Rover, Landvo, Lanin, Lanix, Lark, Laser, Laurus, Lava, LCT, Leader Phone, Leagoo, Leben, LeBest, Lectrus, Ledstar, LeEco, Leelbox, Leff, Legend, Leke, Lemco, LEMFO, Lemhoov, Lenco, Lenovo, Leotec, Le Pan, Lephone, Lesia, Lexand, Lexibook, LG, Liberton, Lifemaxx, Lime, Lingbo, Lingwin, Linnex, Linsar, Linsay, Listo, LNMBBS, Loewe, Logic, Logic Instrument, Logicom, Logik, Logitech, LOKMAT, LongTV, Loview, Lovme, LPX-G, LT Mobile, Lumigon, Lumitel, Lumus, Luna, LUO, Luxor, Lville, LW, LYF, LYOTECH LABS, M-Horse, M-KOPA, M-Tech, M.T.T., M3 Mobile, M4tel, MAC AUDIO, Macoox, Mafe, MAG, MAGCH, Magicsee, Magnus, Majestic, Malata, Mango, Manhattan, Mann, Manta Multimedia, Mantra, Mara, Marshal, Mascom, Massgo, Masstel, Master-G, Mastertech, Matco Tools, Matrix, Maunfeld, Maxcom, Maxfone, Maximus, Maxtron, MAXVI, Maxwell, Maxwest, MAXX, Maze, Maze Speed, MBI, MBK, MBOX, MDC Store, MDTV, meanIT, Mecer, MECHEN, Mecool, Mediacom, Medion, MEEG, Megacable, MegaFon, MEGAMAX, MEGA VISION, Meitu, Meizu, Melrose, MeMobile, Memup, MEO, MESWAO, Meta, Metz, MEU, MicroMax, Microsoft, Microtech, Mightier, Minix, Mint, Mintt, Mio, Mione, mipo, Miray, Mitchell & Brown, Mito, Mitsubishi, Mitsui, MIVO, MIWANG, MIXC, MiXzo, MLAB, MLLED, MLS, MMI, Mobell, Mobicel, MobiIoT, Mobiistar, Mobile Kingdom, Mobiola, Mobistel, MobiWire, Mobo, Mobvoi, Modecom, Mode Mobile, Mofut, Moondrop, Mosimosi, Motiv, Motorola, Motorola Solutions, Movic, MOVISUN, Movitel, Moxee, mPhone, Mpman, MSI, MStar, MTC, MTN, multibox, Multilaser, MultiPOS, MwalimuPlus, MYFON, MyGica, MygPad, Mymaga, MyMobile, MyPhone (PH), myPhone (PL), Myria, Myros, Mystery, MyTab, MyWigo, N-one, Nabi, NABO, Nanho, Naomi Phone, NASCO, National, Navcity, Navitech, Navitel, Navon, NavRoad, NEC, Necnot, Nedaphone, Neffos, NEKO, Neo, neoCore, Neolix, Neomi, Neon IQ, Neoregent, NetBox, Netgear, Netmak, NETWIT, NeuImage, NeuTab, NEVIR, Newal, New Balance, New Bridge, Newgen, Newland, Newman, Newsday, NewsMy, Nexa, NEXBOX, Nexian, NEXON, NEXT, Next & NextStar, Nextbit, NextBook, NextTab, NGM, NG Optics, NGpon, Nikon, NINETEC, NINETOLOGY, Nintendo, nJoy, NOA, Noain, Nobby, Noblex, NOBUX, noDROPOUT, NOGA, Nokia, Nomi, Nomu, Noontec, Nordfrost, Nordmende, NORMANDE, NorthTech, Nos, Nothing, Nous, Novacom, Novex, Novey, NoviSea, NOVO, NTT West, NuAns, Nubia, NUU Mobile, NuVision, Nuvo, Nvidia, NYX Mobile, O+, O2, Oale, Oangcc, OASYS, Obabox, Ober, Obi, OCEANIC, Odotpad, Odys, Oilsky, OINOM, ok., Okapi, Okapia, Oking, OKSI, OKWU, Olax, Olkya, Ollee, OLTO, Olympia, OMIX, Onda, OneClick, OneLern, OnePlus, Onida, Onix, Onkyo, ONN, ONVO, ONYX BOOX, Ookee, Ooredoo, OpelMobile, Openbox, Ophone, OPPO, Opsson, Optoma, Orange, Orange Pi, Orava, Orbic, Orbita, Orbsmart, Ordissimo, Orion, OSCAL, OTTO, OUJIA, Ouki, Oukitel, OUYA, Overmax, Ovvi, Owwo, OX TAB, OYSIN, Oysters, Oyyu, OzoneHD, P-UP, Pacific Research Alliance, Packard Bell, Padpro, PAGRAER, Paladin, Palm, Panacom, Panasonic, Panavox, Pano, Panodic, Panoramic, Pantech, PAPYRE, Parrot Mobile, Partner Mobile, PCBOX, PCD, PCD Argentina, PC Smart, PEAQ, Pelitt, Pendoo, Penta, Pentagram, Perfeo, Phicomm, Philco, Philips, Phonemax, phoneOne, Pico, PINE, Pioneer, Pioneer Computers, PiPO, PIRANHA, Pixela, Pixelphone, PIXPRO, Pixus, Planet Computers, Platoon, Play Now, PLDT, Ployer, Plum, PlusStyle, Pluzz, PocketBook, POCO, Point Mobile, Point of View, Polar, PolarLine, Polaroid, Polestar, PolyPad, Polytron, Pomp, Poppox, POPTEL, Porsche, Portfolio, Positivo, Positivo BGH, PPTV, Premier, Premio, Prestigio, PRIME, Primepad, Primux, PRISM+, Pritom, Prixton, PROFiLO, Proline, Prology, ProScan, PROSONIC, Protruly, ProVision, PULID, Punos, Purism, PVBox, Q-Box, Q-Touch, Q.Bell, QFX, Qilive, QIN, QLink, QMobile, Qnet Mobile, QTECH, Qtek, Quantum, Quatro, Qubo, Quechua, Quest, Quipus, Qumo, Qware, QWATT, R-TV, R3Di, Rakuten, Ramos, Raspberry, Ravoz, Raylandz, Razer, RCA Tablets, RCT, Reach, Readboy, Realix, Realme, RED, RED-X, Redbean, Redfox, RedLine, Redway, Reeder, REGAL, RelNAT, Relndoo, Remdun, Renova, RENSO, rephone, Retroid Pocket, Revo, Revomovil, Rhino, Ricoh, Rikomagic, RIM, Ringing Bells, Rinno, Ritmix, Ritzviva, Riviera, Rivo, Rizzen, ROADMAX, Roadrover, Roam Cat, ROCH, Rocket, ROiK, Rokit, Roku, Rombica, Ross&Moor, Rover, RoverPad, Royole, RoyQueen, RTK, RT Project, RugGear, RuggeTech, Ruggex, Ruio, Runbo, Rupa, Ryte, S-Color, S-TELL, S2Tel, Saba, Safaricom, Sagem, Sagemcom, Saiet, SAILF, Salora, Samsung, Samtech, Samtron, Sanei, Sankey, Sansui, Santin, SANY, Sanyo, Savio, Sber, Schneider, Schok, Scoole, Scosmos, Seatel, SEBBE, Seeken, SEEWO, SEG, Sega, SEHMAX, Selecline, Selenga, Selevision, Selfix, SEMP TCL, Sencor, Sendo, Senkatel, SENNA, Senseit, Senwa, SERVO, Seuic, Sewoo, SFR, SGIN, Shanling, Sharp, Shift Phones, Shivaki, Shtrikh-M, Shuttle, Sico, Siemens, Sigma, Silelis, Silent Circle, Silva Schneider, Simbans, simfer, Simply, SINGER, Singtech, Siragon, Sirin Labs, Siswoo, SK Broadband, SKG, SKK Mobile, Sky, Skyline, SkyStream, Skytech, Skyworth, Smadl, Smailo, Smart, Smartab, SmartBook, SMARTEC, Smart Electronic, Smartex, Smartfren, Smartisan, Smart Kassel, Smart Tech, Smarty, Smooth Mobile, Smotreshka, SMT Telecom, SMUX, SNAMI, SobieTech, Soda, Softbank, Soho Style, Solas, SOLE, SOLO, Solone, Sonim, SONOS, Sony, Sony Ericsson, SOSH, SoulLink, Soundmax, Soyes, Spark, Sparx, SPC, Spectralink, Spectrum, Spice, Sprint, SPURT, SQOOL, SSKY, Star, Starlight, Starmobile, Starway, Starwind, STF Mobile, STG Telecom, Stilevs, STK, Stonex, Storex, StrawBerry, Stream, STRONG, Stylo, Subor, Sugar, Sumvision, Sunmax, Sunmi, Sunny, Sunstech, SunVan, Sunvell, SUNWIND, SuperBOX, Super General, Supermax, SuperSonic, SuperTab, SuperTV, Supra, Supraim, Surfans, Surge, Suzuki, Sveon, Swipe, SWISSMOBILITY, Swisstone, Switel, SWOFY, Syco, SYH, Sylvania, Symphony, Syrox, System76, T-Mobile, T96, TADAAM, TAG Tech, Taiga System, Takara, Talius, Tambo, Tanix, TAUBE, TB Touch, TCL, TCL SCBC, TD Systems, TD Tech, TeachTouch, Technicolor, Technika, TechniSat, Technopc, TECHNOSAT, TechnoTrend, TechPad, TechSmart, Techstorm, Techwood, Teclast, Tecno Mobile, TecToy, TEENO, Teknosa, Tele2, Telefunken, Telego, Telenor, Telia, Telit, Telkom, Telly, Telma, TeloSystems, Telpo, Temigereev, TENPLUS, Teracube, Tesco, Tesla, TETC, Tetratab, teXet, ThL, Thomson, Thuraya, TIANYU, Tibuta, Tigers, Time2, Timovi, TIMvision, Tinai, Tinmo, TiPhone, Tivax, TiVo, TJC, TJD, TOKYO, Tolino, Tone, TOOGO, Tooky, Top-Tech, TopDevice, TOPDON, Topelotek, Top House, Toplux, TOPSHOWS, Topsion, Topway, Torex, Torque, TOSCIDO, Toshiba, Touchmate, Touch Plus, TOX, TPS, Transpeed, TrekStor, Trevi, TriaPlay, Trident, Trifone, Trimble, Trio, Tronsmart, True, True Slim, Tsinghua Tongfang, TTEC, TTfone, TTK-TV, TuCEL, TUCSON, Tunisie Telecom, Turbo, Turbo-X, TurboKids, TurboPad, Turkcell, Tuvio, TV+, TVC, TwinMOS, TWM, Twoe, TWZ, TYD, Tymes, Türk Telekom, U-Magic, U.S. Cellular, UD, UE, UGINE, Ugoos, Uhans, Uhappy, Ulefone, Umax, UMIDIGI, Umiio, Unblock Tech, Uniden, Unihertz, Unimax, Uniqcell, Uniscope, Unistrong, Unitech, UNITED, United Group, UNIWA, Unknown, Unnecto, Unnion Technologies, UNNO, Unonu, UnoPhone, Unowhy, UOOGOU, Urovo, UTime, UTOK, UTStarcom, UZ Mobile, V-Gen, V-HOME, V-HOPE, v-mobile, VAIO, VALE, VALEM, VALTECH, VANGUARD, Vankyo, VANWIN, Vargo, Vastking, VAVA, VC, VDVD, Vega, Veidoo, Vekta, Venso, Venstar, Venturer, VEON, Verico, Verizon, Vernee, Verssed, Versus, Vertex, Vertu, Verykool, Vesta, Vestel, VETAS, Vexia, VGO TEL, ViBox, Victurio, VIDA, Videocon, Videoweb, Viendo, ViewSonic, VIIPOO, VIKUSHA, VILLAON, VIMOQ, Vinabox, Vinga, Vinsoc, Vios, Viper, Vipro, Virzo, Vision Technology, Vision Touch, Visual Land, Vitelcom, Vityaz, Viumee, Vivax, VIVIBright, VIVIMAGE, Vivo, VIWA, Vizio, Vizmo, VK Mobile, VKworld, VNPT Technology, VOCAL, Vodacom, Vodafone, VOGA, VOLIA, VOLKANO, Volla, Volt, Vonino, Vontar, Vorago, Vorcom, Vorke, Vormor, Vortex, Voto, VOX, Voxtel, Voyo, Vsmart, Vsun, VUCATIMES, Vue Micro, Vulcan, VVETIME, Völfen, W&O, WAF, Wainyok, Walker, Walton, Waltter, Wanmukang, WANSA, WE, We. by Loewe., Webfleet, Web TV, WeChip, Wecool, Weelikeit, Weiimi, Weimei, WellcoM, WELLINGTON, Western Digital, Weston, Westpoint, Wexler, White Mobile, Whoop, Wieppo, Wigor, Wiko, WildRed, Wileyfox, Winds, Wink, Winmax, Winnovo, Winstar, Wintouch, Wiseasy, WIWA, WizarPos, Wizz, Wolder, Wolfgang, Wolki, WONDER, Wonu, Woo, Wortmann, Woxter, WOZIFAN, WS, X-AGE, X-BO, X-Mobile, X-TIGI, X-View, X.Vision, X88, X96, X96Q, Xcell, XCOM, Xcruiser, XElectron, XGEM, XGIMI, Xgody, Xiaodu, Xiaolajiao, Xiaomi, Xion, Xolo, Xoro, XPPen, XREAL, Xshitou, Xsmart, Xtouch, Xtratech, Xwave, XY Auto, Yandex, Yarvik, YASIN, YELLYOUTH, YEPEN, Yes, Yestel, Yezz, Yoka TV, Yooz, Yota, YOTOPT, Youin, Youwei, Ytone, Yu, Yuandao, YU Fly, YUHO, YUMKEM, YUNDOO, Yuno, YunSong, Yusun, Yxtel, Z-Kai, Zaith, Zamolxe, Zatec, Zealot, Zeblaze, Zebra, Zeeker, Zeemi, Zen, Zenek, Zentality, Zfiner, ZH&K, Zidoo, ZIFFLER, ZIFRO, Zigo, ZIK, Zinox, Ziox, Zonda, Zonko, Zoom, ZoomSmart, Zopo, ZTE, Zuum, Zync, ZYQ, Zyrex, ZZB, öwn\n\n### List of detected bots:\n\n2GDPR, 2ip, 360 Monitoring, 360JK, 360Spider, 1001FirmsBot, Abonti, Aboundexbot, AccompanyBot, Acoon, AdAuth, Adbeat, AddThis.com, ADMantX, ADmantX Service Fetcher, Adsbot, Adscanner, AdsTxtCrawler, AdsTxtCrawlerTP, adstxtlab.com, Aegis, aHrefs Bot, AhrefsSiteAudit, aiHitBot, Alexa Crawler, Alexa Site Audit, Allloadin Favicon Bot, AlltheWeb, Amazon AdBot, Amazon Bot, Amazon ELB, Amazon Route53 Health Check, Amorank Spider, Analytics SEO Crawler, Ant, Anthropic AI, ApacheBench, Applebot, AppSignalBot, Arachni, archive.org bot, ArchiveBot, ArchiveBox, Arquivo.pt, ARSNova Filter System, Asana, Ask Jeeves, AspiegelBot, Automattic Analytics, Awario, Backlink-Check.de, BacklinkCrawler, BackupLand, Baidu Spider, Barkrowler, Barracuda Sentinel, BazQux Reader, BBC Forge URL Monitor, BBC Page Monitor, BDCbot, BDFetch, Better Uptime Bot, BingBot, Birdcrawlerbot, BitlyBot, BitSight, Blackbox Exporter, Blekkobot, BLEXBot Crawler, Bloglines, Bloglovin, Blogtrottr, BoardReader, BoardReader Blog Indexer, Botify, Bountii Bot, BrandVerity, Bravebot, BrightBot, BrightEdge, Browsershots, BUbiNG, Buck, BuiltWith, Butterfly Robot, Bytespider, CareerBot, Castopod, Castro 2, Catchpoint, CATExplorador, ccBot crawler, CensysInspect, Charlotte, Chartable, ChatGPT-User, CheckHost, CheckMark Network, Choosito, Chrome Privacy Preserving Prefetch Proxy, Cincraw, CISPA Web Analyzer, CLASSLA-web, ClaudeBot, Clickagy, Cliqzbot, CloudFlare Always Online, CloudFlare AMP Fetcher, Cloudflare Custom Hostname Verification, Cloudflare Diagnostics, Cloudflare Health Checks, Cloudflare Observatory, Cloudflare Security Insights, Cloudflare Smart Transit, Cloudflare SSL Detector, Cloudflare Traffic Manager, CloudServerMarketSpider, CMS Experiment, Cocolyzebot, Cohere AI, Collectd, colly, CommaFeed, COMODO DCV, Comscore, ContentKing, Convertify, Cookiebot, Cotoyogi, Crawldad, Crawlson, Crawly Project, CriteoBot, CrowdTangle, CSS Certificate Spider, CSSCheck, CyberFind Crawler, Cyberscan, Cốc Cốc Bot, DaspeedBot, Datadog Agent, DataForSeoBot, datagnionbot, Datanyze, Dataprovider, DataXu, Daum, Dazoobot, Deepfield Genome, deepnoc, Deep SEARCH 9, DepSpid, Detectify, Diffbot, Discobot, Discord Bot, Disqus, DNSResearchBot, DomainAppender, Domain Codex, DomainCrawler, Domain Re-Animator Bot, Domain Research Project, Domains Project, DomainStatsBot, DomCop Bot, DotBot, Dotcom Monitor, Dubbotbot, DuckAssistBot, DuckDuckBot, ducks.party, DuplexWeb-Google, DynatraceSynthetic, Easou Spider, eCairn-Grabber, EFF Do Not Track Verifier, Elastic Synthetics, EMail Exractor, EmailWolf, Embedly, Entfer, evc-batch, Everyfeed, ExaBot, ExactSeek Crawler, Example3, Exchange check, Expanse, EyeMonit, Ezgif, Ezooms, eZ Publish Link Validator, FacebookBot, Facebook Crawler, Faveeo, Feedbin, FeedBurner, Feedly, Feedspot, Feed Wrangler, Femtosearch, Fever, Findxbot, Flipboard, FontRadar, fragFINN, FreeWebMonitoring, FreshRSS, Functionize, Gaisbot, GDNP, GeedoBot, GeedoProductSearch, Generic Bot, Genieo Web filter, Ghost Inspector, Gigablast, Gigabot, GitCrawlerBot, GitHubCopilotChat, Gluten Free Crawler, Gmail Image Proxy, Gobuster, Golfe, Goo, Google-CloudVertexBot, Google-Document-Conversion, Google-Safety, Google Apps Script, Google Area 120 Privacy Policy Fetcher, Googlebot, Googlebot News, Google Cloud Scheduler, Google Docs, Google Favicon, Google PageSpeed Insights, Google Partner Monitoring, Google Search Console, Google Sheets, Google Slides, Google Stackdriver Monitoring, Google StoreBot, Google Structured Data Testing Tool, Google Transparency Report, Gowikibot, Gozle, GPTBot, Grammarly, Grapeshot, Gregarius, GTmetrix, GumGum Verity, hackermention, Hatena Bookmark, Hatena Favicon, Headline, Heart Rails Capture, Heritrix, Heureka Feed, htmlyse, HTTPMon, httpx, HuaweiWebCatBot, HubPages, HubSpot, ICC-Crawler, ichiro, IDG/IT, Iframely, IIS Site Analysis, ImageSift, Inetdex Bot, Infegy, InfoTigerBot, Inktomi Slurp, inoreader, Inspici, InsytfulBot, Intelligence X, Interactsh, InternetMeasurement, IONOS Crawler, IP-Guide Crawler, IPIP, IPS Agent, IsItWP, iTMS, JobboerseBot, JungleKeyThumbnail, K6, KadoBot, Kaspersky, KeyCDN Tools, Keys.so, Kiwi TCMS GitOps, KlarnaBot, KomodiaBot, Konturbot, Kouio, Kozmonavt, KStandBot, l9explore, l9tcpid, LAC IA Harvester, Larbin web crawler, LastMod Bot, LCC, leak.info, LeakIX, Let's Encrypt Validation, LetSearch, Lighthouse, Linespider, Linkdex Bot, LinkedIn Bot, LinkpadBot, LinkPreview, LinkWalker, LiveJournal, LTX71, Lumar, LumtelBot, Lycos, MaCoCu, MADBbot, Magpie-Crawler, MagpieRSS, Mail.Ru Bot, MakeMerryBot, Marginalia, MariaDB/MySQL Knowledge Base, masscan, masscan-ng, Mastodon Bot, Matomo, Meanpath Bot, Mediatoolkit Bot, MegaIndex, MeltwaterNews, Meta-ExternalAgent, Meta-ExternalFetcher, MetaInspector, MetaJobBot, MicroAdBot, Microsoft Preview, Miniature.io, Mixnode, Mixrank Bot, MJ12 Bot, Mnogosearch, MojeekBot, Monitor.Us, Monitor Backlinks, Monsidobot, Montastic Monitor, MoodleBot Linkchecker, Morningscore Bot, MTRobot, MuckRack, Munin, MuscatFerret, Nagios check_http, NalezenCzBot, NameProtectBot, nbertaupete95, Neevabot, Netcraft Survey Bot, netEstate, NetLyzer FastProbe, Netpeak Checker, NetResearchServer, NetSystemsResearch, NetTrack, Netvibes, NETZZAPPEN, NewsBlur, NewsGator, Newslitbot, NiceCrawler, Nimbostratus Bot, NLCrawler, Nmap, NodePing, Notify Ninja, Nutch-based Bot, Nuzzel, OAI-SearchBot, oBot, Octopus, Odin, Odnoklassniki Bot, Oh Dear, Omgili bot, OmtrBot, Onalytica, OnlineOrNot Bot, Openindex Spider, OpenLinkProfiler, OpenWebSpider, Orange Bot, OSZKbot, Outbrain, Overcast Podcast Sync, OWLer, Pageburst, Page Modified Pinger, PagePeeker, PageThing, Pandalytics, Panscient, PaperLiBot, Paqlebot, parse.ly, PATHspider, PayPal IPN, PDR Labs, Peer39, PerplexityBot, Petal Bot, Phantomas, phpMyAdmin, PHP Server Monitor, Picsearch bot, Pigafetta, PingAdmin.Ru, Pingdom Bot, Pinterest, PiplBot, Plesk Screenshot Service, Plukkie, Pocket, Podroll Analyzer, PodUptime, Pompos, Prerender, PritTorrent, Probely, Project Patchwatch, Project Resonance, Prometheus, PRTG Network Monitor, Punk Map, Quantcast, QuerySeekerSpider, Quora Bot, Quora Link Preview, Qwantbot, Rainmeter, RamblerMail Image Proxy, RavenCrawler, Reddit Bot, RedekenBot, RenovateBot, Repo Lookout, ReqBin, Research Scan, Riddler, Robozilla, RocketMonitorBot, Rogerbot, ROI Hunter, RSSRadio Bot, RuxitSynthetic, Ryowl, SabsimBot, SafeDNSBot, Sandoba//Crawler, SBIder, Scamadviser External Hit, Scooter, ScoutJet, Scraping Robot, Scrapy, Screaming Frog SEO Spider, ScreenerBot, Sectigo DCV, security.txt scanserver, Seekport, Sellers.Guide, semaltbot, Semantic Scholar Bot, SemrushBot, Semrush Reputation Management, Sensika Bot, Sentry Bot, Senuto, Seobility, SEOENGBot, SEOkicks, SEOkicks-Robot, seolyt, Seolyt Bot, Seoscanners.net, Serendeputy Bot, Serenety, serpstatbot, Server Density, Seznam Bot, Seznam Email Proxy, Seznam Zbozi.cz, sfFeedReader, ShopAlike, Shopify Partner, ShopWiki, SilverReader, SimplePie, Sirdata, SISTRIX Crawler, SISTRIX Optimizer, Site24x7 Defacement Monitor, Site24x7 Website Monitoring, SiteAuditBot, Sitebulb, SiteCheckerBotCrawler, Siteimprove, SitemapParser-VIPnytt, SiteOne Crawler, SiteScore, SiteSucker, Sixy.ch, Skype URI Preview, Slackbot, SMTBot, Snapchat Ads, Snapchat Proxy, Snap URL Preview Service, Sogou Spider, Soso Spider, Sparkler, Spawning AI, SpazioDati, Speedy, SpiderLing, Spinn3r, SplitSignalBot, Spotify, Sprinklr, Sputnik Bot, Sputnik Favicon Bot, Sputnik Image Bot, SSL Labs, start.me, Startpagina Linkchecker, Statista, StatOnline.ru, StatusCake, Steam Chat URL Lookup, Steve Bot, Stract, Sublinq, Substack Content Fetch, SuggestBot, Superfeedr Bot, SurdotlyBot, Survey Bot, Swiftbot, Swisscows Favicons, Synapse, t3versions, Taboolabot, TactiScout, Tag Inspector, Tarmot Gezgin, tchelebi, TelegramBot, Tenable.asm, TestCrawler, The British Library Legal Deposit Bot, The Knowledge AI, theoldreader, The Trade Desk Content, ThinkChaos, ThousandEyes, TigerBot, Timpibot, TinEye, TinEye Crawler, Tiny Tiny RSS, TLSProbe, TraceMyFile, Trendiction Bot, Trendsmap, Turnitin, TurnitinBot, TweetedTimes Bot, Tweetmeme Bot, Twingly Recon, Twitterbot, Twurly, UCSB Network Measurement, UkrNet Mail Proxy, uMBot, UniversalFeedParser, Uptime-Kuma, Uptimebot, UptimeRobot, Uptimia, URLAppendBot, URLinspector, URLSuMaBot, Vagabondo, ValidBot, Velen Public Web Crawler, Vercel Bot, VeryHip, Viber Url Downloader, VirusTotal Cloud, Visual Site Mapper Crawler, VK Robot, VK Share Button, vuhuvBot, VU Server Health Scanner, W3C CSS Validator, W3C I18N Checker, W3C Link Checker, W3C Markup Validation Service, W3C MobileOK Checker, W3C P3P Validator, W3C Unified Validator, Wappalyzer, WDG HTML Validator, WebbCrawler, WebCEO, WebDataStats, WebMon, Weborama, WebPageTest, WebPros, Website-info, WebSitePulse, WebThumbnail, webtru, Webwiki, WellKnownBot, WeSEE:Search, WeViKaBot, WhatCMS, WhatsMyIP.org, WhereGoes, Who.is Bot, Wibybot, WikiDo, Willow Internet Crawler, WireReaderBot, WooRank, WordPress, WordPress.com mShots, Workona, Wotbox, wp.com feedbot, XenForo, XoviBot, YaCy, Yahoo! Cache System, Yahoo! Japan, Yahoo! Japan ASR, Yahoo! Japan BRW, Yahoo! Japan WSC, Yahoo! Link Preview, Yahoo! Mail Proxy, Yahoo! Slurp, Yahoo Gemini, YaK, Yandex Bot, Yeti/Naverbot, Yottaa Site Monitor, YouBot, Youdao Bot, Yourls, Yunyun Bot, Zaldamo, Zao, Ze List, Zeno, zgrab, Zookabot, ZoomBot, ZoominfoBot, Zotero Translation Server, ZumBot\n"
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "Yaml",
          "type": "tree",
          "content": null
        },
        {
          "name": "autoload.php",
          "type": "blob",
          "size": 1.0947265625,
          "content": "<?php\n\ndeclare(strict_types=1);\n\n/**\n * PSR-4 autoloader implementation for the DeviceDetector namespace.\n * First we define the 'dd_autoload' function, and then we register\n * it with 'spl_autoload_register' so that PHP knows to use it.\n */\n\n/**\n * Automatically include the file that defines <code>class</code>.\n *\n * @param string $class\n *     the name of the class to load\n *\n * @return void\n */\nfunction dd_autoload(string $class): void\n{\n    if (false === strpos($class, 'DeviceDetector\\\\')) {\n        return;\n    }\n\n    $namespaceMap = ['DeviceDetector\\\\' => __DIR__ . '/'];\n\n    foreach ($namespaceMap as $prefix => $dir) {\n        /* First swap out the namespace prefix with a directory... */\n        $path = str_replace($prefix, $dir, $class);\n        /* replace the namespace separator with a directory separator... */\n        $path = str_replace('\\\\', '/', $path);\n        /* and finally, add the PHP file extension to the result. */\n        $path .= '.php';\n        /* $path should now contain the path to a PHP file defining $class */\n        @include $path;\n    }\n}\n\nspl_autoload_register('dd_autoload');\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.84375,
          "content": "{\n    \"name\": \"matomo/device-detector\",\n    \"type\": \"library\",\n    \"description\": \"The Universal Device Detection library, that parses User Agents and detects devices (desktop, tablet, mobile, tv, cars, console, etc.), clients (browsers, media players, mobile apps, feed readers, libraries, etc), operating systems, devices, brands and models.\",\n    \"keywords\": [\"useragent\",\"parser\",\"devicedetection\"],\n    \"homepage\": \"https://matomo.org\",\n    \"license\": \"LGPL-3.0-or-later\",\n    \"authors\": [\n        {\n            \"name\": \"The Matomo Team\",\n            \"email\": \"hello@matomo.org\",\n            \"homepage\": \"https://matomo.org/team/\"\n        }\n    ],\n    \"support\": {\n        \"forum\": \"https://forum.matomo.org/\",\n        \"issues\": \"https://github.com/matomo-org/device-detector/issues\",\n        \"wiki\": \"https://dev.matomo.org/\",\n        \"source\": \"https://github.com/matomo-org/matomo\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"DeviceDetector\\\\\": \"\" },\n        \"exclude-from-classmap\": [\"Tests/\"]\n    },\n    \"require\": {\n        \"php\": \"^7.2|^8.0\",\n        \"mustangostang/spyc\": \"*\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^8.5.8\",\n        \"psr/cache\": \"^1.0.1\",\n        \"psr/simple-cache\": \"^1.0.1\",\n        \"matthiasmullie/scrapbook\": \"^1.4.7\",\n        \"phpstan/phpstan\": \"^1.10.44\",\n        \"mayflower/mo4-coding-standard\": \"^v9.0.0\",\n        \"symfony/yaml\": \"^5.1.7\"\n    },\n    \"suggest\": {\n        \"doctrine/cache\": \"Can directly be used for caching purpose\",\n        \"ext-yaml\": \"Necessary for using the Pecl YAML parser\"\n    },\n    \"scripts\": {\n      \"php-cs-fixed\": \"php vendor/bin/phpcbf\"\n    },\n    \"archive\": {\n        \"exclude\": [\"/autoload.php\"]\n    },\n    \"replace\": {\n        \"piwik/device-detector\":\"self.version\"\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"dealerdirect/phpcodesniffer-composer-installer\": true\n        }\n    }\n}\n"
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpcs.xml",
          "type": "blob",
          "size": 4.158203125,
          "content": "<?xml version=\"1.0\"?>\n<ruleset name=\"device-detector\">\n    <description>Device Detector Coding Standard</description>\n\n    <file>.</file>\n\n    <exclude-pattern>vendor/</exclude-pattern>\n\n    <!-- use MO4 coding standard as base -->\n    <rule ref=\"MO4\">\n        <exclude name=\"SlevomatCodingStandard.Classes.ForbiddenPublicProperty.ForbiddenPublicProperty\"/>\n        <exclude name=\"SlevomatCodingStandard.Commenting.UselessInheritDocComment\"/>\n        <exclude name=\"SlevomatCodingStandard.Functions.UnusedParameter.UnusedParameter\"/>\n        <exclude name=\"Squiz.PHP.DisallowMultipleAssignments.Found\"/>\n        <exclude name=\"SlevomatCodingStandard.ControlStructures.RequireTernaryOperator\"/>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.ControlStructures.RequireTernaryOperator\">\n        <properties>\n            <property name=\"ignoreMultiLine\" value=\"true\"/>\n        </properties>\n    </rule>\n\n    <rule ref=\"Symfony.Commenting\">\n        <exclude-pattern>misc/</exclude-pattern>\n        <exclude-pattern>Tests/</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Squiz.Functions.GlobalFunction.Found\">\n        <exclude-pattern>misc/</exclude-pattern>\n        <exclude-pattern>autoload.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"PSR1.Files.SideEffects.FoundWithSymbols\">\n        <exclude-pattern>misc/</exclude-pattern>\n        <exclude-pattern>autoload.php</exclude-pattern>\n    </rule>\n\n    <!-- Disallow more than 120 chars per line -->\n    <rule ref=\"Generic.Files.LineLength\">\n        <properties>\n            <property name=\"lineLimit\" value=\"120\" />\n            <property name=\"absoluteLineLimit\" value=\"120\" />\n        </properties>\n        <exclude-pattern>misc/</exclude-pattern>\n        <exclude-pattern>Tests/</exclude-pattern>\n    </rule>\n\n    <!-- Require spaces around string concatenating -->\n    <rule ref=\"Squiz.Strings.ConcatenationSpacing\">\n        <properties>\n            <property name=\"spacing\" value=\"1\" />\n        </properties>\n    </rule>\n\n    <!-- Disallow is_null function -->\n    <rule ref=\"Generic.PHP.ForbiddenFunctions\">\n        <properties>\n            <property name=\"forbiddenFunctions\" type=\"array\" value=\"is_null=>null\"/>\n        </properties>\n    </rule>\n\n    <!-- Require empty lines around control structures -->\n    <rule ref=\"SlevomatCodingStandard.ControlStructures.BlockControlStructureSpacing\"/>\n\n    <!-- Require strict types -->\n    <rule ref=\"SlevomatCodingStandard.TypeHints.DeclareStrictTypes\">\n        <properties>\n            <property name=\"linesCountBeforeDeclare\" value=\"1\" />\n            <property name=\"spacesCountAroundEqualsSign\" value=\"0\" />\n            <property name=\"linesCountAfterDeclare\" value=\"1\" />\n        </properties>\n    </rule>\n\n    <!-- Require Yoda-Conditions -->\n    <rule ref=\"SlevomatCodingStandard.ControlStructures.RequireYodaComparison\"/>\n\n    <!-- Disallow useless semicolons -->\n    <rule ref=\"SlevomatCodingStandard.PHP.UselessSemicolon\" />\n\n    <!-- Disallow old type hints in comments (e.g. \"int[]\" should be \"array<int>\") -->\n    <rule ref=\"SlevomatCodingStandard.TypeHints.DisallowArrayTypeHintSyntax\"/>\n\n    <!-- Disallow spaces after splat operator -->\n    <rule ref=\"SlevomatCodingStandard.Operators.SpreadOperatorSpacing\"/>\n\n    <!-- Disallow empty lines around class braces -->\n    <rule ref=\"SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces\">\n        <properties>\n            <property name=\"linesCountAfterOpeningBrace\" value=\"0\" />\n            <property name=\"linesCountBeforeClosingBrace\" value=\"0\" />\n        </properties>\n    </rule>\n\n    <!-- Require empty lines around namespace definition -->\n    <rule ref=\"SlevomatCodingStandard.Namespaces.NamespaceSpacing\">\n        <properties>\n            <property name=\"linesCountBeforeNamespace\" value=\"1\" />\n            <property name=\"linesCountAfterNamespace\" value=\"1\" />\n        </properties>\n    </rule>\n\n    <!-- Require empty lines around use statements -->\n    <rule ref=\"SlevomatCodingStandard.Namespaces.UseSpacing\">\n        <properties>\n            <property name=\"linesCountBeforeFirstUse\" value=\"1\" />\n            <property name=\"linesCountBetweenUseTypes\" value=\"0\" />\n            <property name=\"linesCountAfterLastUse\" value=\"1\" />\n        </properties>\n    </rule>\n</ruleset>\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.5029296875,
          "content": "parameters:\n    level: max\n    bootstrapFiles:\n        - %rootDir%/../../autoload.php\n    paths:\n        - %rootDir%/../../../\n    excludePaths:\n        - %rootDir%/../../../vendor\n        - %rootDir%/../../../misc\n        - %rootDir%/../../../Tests\n        - %rootDir%/../../../autoload.php\n    ignoreErrors:\n        - '#.+Doctrine\\\\Common\\\\Cache\\\\CacheProvider.+#'\n        - '#.+unknown class Illuminate\\\\Support\\\\Facades\\\\Cache.+#'\n    reportUnmatchedIgnoredErrors: false\n    checkMissingIterableValueType: false"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 1.0205078125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"http://schema.phpunit.de/4.1/phpunit.xsd\"\n         backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         bootstrap=\"vendor/autoload.php\"\n>\n    <php>\n        <ini name=\"memory_limit\" value=\"512M\" />\n    </php>\n\n    <testsuites>\n        <testsuite name=\"Device Detector Test Suite\">\n            <directory>./Tests/</directory>\n        </testsuite>\n    </testsuites>\n\n    <filter>\n        <whitelist>\n            <directory>./</directory>\n            <exclude>\n                <directory>./misc</directory>\n                <directory>./vendor</directory>\n                <directory>./Tests</directory>\n            </exclude>\n        </whitelist>\n    </filter>\n</phpunit>\n"
        },
        {
          "name": "regexes",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}