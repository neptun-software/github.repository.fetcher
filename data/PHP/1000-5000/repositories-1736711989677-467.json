{
  "metadata": {
    "timestamp": 1736711989677,
    "page": 467,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "symfony/polyfill-intl-normalizer",
      "stars": 2017,
      "defaultBranch": "1.x",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (c) 2015-present Fabien Potencier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Normalizer.php",
          "type": "blob",
          "size": 9.34765625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Polyfill\\Intl\\Normalizer;\n\n/**\n * Normalizer is a PHP fallback implementation of the Normalizer class provided by the intl extension.\n *\n * It has been validated with Unicode 6.3 Normalization Conformance Test.\n * See http://www.unicode.org/reports/tr15/ for detailed info about Unicode normalizations.\n *\n * @author Nicolas Grekas <p@tchwork.com>\n *\n * @internal\n */\nclass Normalizer\n{\n    public const FORM_D = \\Normalizer::FORM_D;\n    public const FORM_KD = \\Normalizer::FORM_KD;\n    public const FORM_C = \\Normalizer::FORM_C;\n    public const FORM_KC = \\Normalizer::FORM_KC;\n    public const NFD = \\Normalizer::NFD;\n    public const NFKD = \\Normalizer::NFKD;\n    public const NFC = \\Normalizer::NFC;\n    public const NFKC = \\Normalizer::NFKC;\n\n    private static $C;\n    private static $D;\n    private static $KD;\n    private static $cC;\n    private static $ulenMask = [\"\\xC0\" => 2, \"\\xD0\" => 2, \"\\xE0\" => 3, \"\\xF0\" => 4];\n    private static $ASCII = \"\\x20\\x65\\x69\\x61\\x73\\x6E\\x74\\x72\\x6F\\x6C\\x75\\x64\\x5D\\x5B\\x63\\x6D\\x70\\x27\\x0A\\x67\\x7C\\x68\\x76\\x2E\\x66\\x62\\x2C\\x3A\\x3D\\x2D\\x71\\x31\\x30\\x43\\x32\\x2A\\x79\\x78\\x29\\x28\\x4C\\x39\\x41\\x53\\x2F\\x50\\x22\\x45\\x6A\\x4D\\x49\\x6B\\x33\\x3E\\x35\\x54\\x3C\\x44\\x34\\x7D\\x42\\x7B\\x38\\x46\\x77\\x52\\x36\\x37\\x55\\x47\\x4E\\x3B\\x4A\\x7A\\x56\\x23\\x48\\x4F\\x57\\x5F\\x26\\x21\\x4B\\x3F\\x58\\x51\\x25\\x59\\x5C\\x09\\x5A\\x2B\\x7E\\x5E\\x24\\x40\\x60\\x7F\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0B\\x0C\\x0D\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\x1C\\x1D\\x1E\\x1F\";\n\n    public static function isNormalized(string $s, int $form = self::FORM_C)\n    {\n        if (!\\in_array($form, [self::NFD, self::NFKD, self::NFC, self::NFKC])) {\n            return false;\n        }\n        if (!isset($s[strspn($s, self::$ASCII)])) {\n            return true;\n        }\n        if (self::NFC == $form && preg_match('//u', $s) && !preg_match('/[^\\x00-\\x{2FF}]/u', $s)) {\n            return true;\n        }\n\n        return self::normalize($s, $form) === $s;\n    }\n\n    public static function normalize(string $s, int $form = self::FORM_C)\n    {\n        if (!preg_match('//u', $s)) {\n            return false;\n        }\n\n        switch ($form) {\n            case self::NFC: $C = true; $K = false; break;\n            case self::NFD: $C = false; $K = false; break;\n            case self::NFKC: $C = true; $K = true; break;\n            case self::NFKD: $C = false; $K = true; break;\n            default:\n                if (\\defined('Normalizer::NONE') && \\Normalizer::NONE == $form) {\n                    return $s;\n                }\n\n                if (80000 > \\PHP_VERSION_ID) {\n                    return false;\n                }\n\n                throw new \\ValueError('normalizer_normalize(): Argument #2 ($form) must be a a valid normalization form');\n        }\n\n        if ('' === $s) {\n            return '';\n        }\n\n        if ($K && null === self::$KD) {\n            self::$KD = self::getData('compatibilityDecomposition');\n        }\n\n        if (null === self::$D) {\n            self::$D = self::getData('canonicalDecomposition');\n            self::$cC = self::getData('combiningClass');\n        }\n\n        if (null !== $mbEncoding = (2 /* MB_OVERLOAD_STRING */ & (int) \\ini_get('mbstring.func_overload')) ? mb_internal_encoding() : null) {\n            mb_internal_encoding('8bit');\n        }\n\n        $r = self::decompose($s, $K);\n\n        if ($C) {\n            if (null === self::$C) {\n                self::$C = self::getData('canonicalComposition');\n            }\n\n            $r = self::recompose($r);\n        }\n        if (null !== $mbEncoding) {\n            mb_internal_encoding($mbEncoding);\n        }\n\n        return $r;\n    }\n\n    private static function recompose($s)\n    {\n        $ASCII = self::$ASCII;\n        $compMap = self::$C;\n        $combClass = self::$cC;\n        $ulenMask = self::$ulenMask;\n\n        $result = $tail = '';\n\n        $i = $s[0] < \"\\x80\" ? 1 : $ulenMask[$s[0] & \"\\xF0\"];\n        $len = \\strlen($s);\n\n        $lastUchr = substr($s, 0, $i);\n        $lastUcls = isset($combClass[$lastUchr]) ? 256 : 0;\n\n        while ($i < $len) {\n            if ($s[$i] < \"\\x80\") {\n                // ASCII chars\n\n                if ($tail) {\n                    $lastUchr .= $tail;\n                    $tail = '';\n                }\n\n                if ($j = strspn($s, $ASCII, $i + 1)) {\n                    $lastUchr .= substr($s, $i, $j);\n                    $i += $j;\n                }\n\n                $result .= $lastUchr;\n                $lastUchr = $s[$i];\n                $lastUcls = 0;\n                ++$i;\n                continue;\n            }\n\n            $ulen = $ulenMask[$s[$i] & \"\\xF0\"];\n            $uchr = substr($s, $i, $ulen);\n\n            if ($lastUchr < \"\\xE1\\x84\\x80\" || \"\\xE1\\x84\\x92\" < $lastUchr\n                || $uchr < \"\\xE1\\x85\\xA1\" || \"\\xE1\\x85\\xB5\" < $uchr\n                || $lastUcls) {\n                // Table lookup and combining chars composition\n\n                $ucls = $combClass[$uchr] ?? 0;\n\n                if (isset($compMap[$lastUchr.$uchr]) && (!$lastUcls || $lastUcls < $ucls)) {\n                    $lastUchr = $compMap[$lastUchr.$uchr];\n                } elseif ($lastUcls = $ucls) {\n                    $tail .= $uchr;\n                } else {\n                    if ($tail) {\n                        $lastUchr .= $tail;\n                        $tail = '';\n                    }\n\n                    $result .= $lastUchr;\n                    $lastUchr = $uchr;\n                }\n            } else {\n                // Hangul chars\n\n                $L = \\ord($lastUchr[2]) - 0x80;\n                $V = \\ord($uchr[2]) - 0xA1;\n                $T = 0;\n\n                $uchr = substr($s, $i + $ulen, 3);\n\n                if (\"\\xE1\\x86\\xA7\" <= $uchr && $uchr <= \"\\xE1\\x87\\x82\") {\n                    $T = \\ord($uchr[2]) - 0xA7;\n                    0 > $T && $T += 0x40;\n                    $ulen += 3;\n                }\n\n                $L = 0xAC00 + ($L * 21 + $V) * 28 + $T;\n                $lastUchr = \\chr(0xE0 | $L >> 12).\\chr(0x80 | $L >> 6 & 0x3F).\\chr(0x80 | $L & 0x3F);\n            }\n\n            $i += $ulen;\n        }\n\n        return $result.$lastUchr.$tail;\n    }\n\n    private static function decompose($s, $c)\n    {\n        $result = '';\n\n        $ASCII = self::$ASCII;\n        $decompMap = self::$D;\n        $combClass = self::$cC;\n        $ulenMask = self::$ulenMask;\n        if ($c) {\n            $compatMap = self::$KD;\n        }\n\n        $c = [];\n        $i = 0;\n        $len = \\strlen($s);\n\n        while ($i < $len) {\n            if ($s[$i] < \"\\x80\") {\n                // ASCII chars\n\n                if ($c) {\n                    ksort($c);\n                    $result .= implode('', $c);\n                    $c = [];\n                }\n\n                $j = 1 + strspn($s, $ASCII, $i + 1);\n                $result .= substr($s, $i, $j);\n                $i += $j;\n                continue;\n            }\n\n            $ulen = $ulenMask[$s[$i] & \"\\xF0\"];\n            $uchr = substr($s, $i, $ulen);\n            $i += $ulen;\n\n            if ($uchr < \"\\xEA\\xB0\\x80\" || \"\\xED\\x9E\\xA3\" < $uchr) {\n                // Table lookup\n\n                if ($uchr !== $j = $compatMap[$uchr] ?? ($decompMap[$uchr] ?? $uchr)) {\n                    $uchr = $j;\n\n                    $j = \\strlen($uchr);\n                    $ulen = $uchr[0] < \"\\x80\" ? 1 : $ulenMask[$uchr[0] & \"\\xF0\"];\n\n                    if ($ulen != $j) {\n                        // Put trailing chars in $s\n\n                        $j -= $ulen;\n                        $i -= $j;\n\n                        if (0 > $i) {\n                            $s = str_repeat(' ', -$i).$s;\n                            $len -= $i;\n                            $i = 0;\n                        }\n\n                        while ($j--) {\n                            $s[$i + $j] = $uchr[$ulen + $j];\n                        }\n\n                        $uchr = substr($uchr, 0, $ulen);\n                    }\n                }\n                if (isset($combClass[$uchr])) {\n                    // Combining chars, for sorting\n\n                    if (!isset($c[$combClass[$uchr]])) {\n                        $c[$combClass[$uchr]] = '';\n                    }\n                    $c[$combClass[$uchr]] .= $uchr;\n                    continue;\n                }\n            } else {\n                // Hangul chars\n\n                $uchr = unpack('C*', $uchr);\n                $j = (($uchr[1] - 224) << 12) + (($uchr[2] - 128) << 6) + $uchr[3] - 0xAC80;\n\n                $uchr = \"\\xE1\\x84\".\\chr(0x80 + (int) ($j / 588))\n                       .\"\\xE1\\x85\".\\chr(0xA1 + (int) (($j % 588) / 28));\n\n                if ($j %= 28) {\n                    $uchr .= $j < 25\n                        ? (\"\\xE1\\x86\".\\chr(0xA7 + $j))\n                        : (\"\\xE1\\x87\".\\chr(0x67 + $j));\n                }\n            }\n            if ($c) {\n                ksort($c);\n                $result .= implode('', $c);\n                $c = [];\n            }\n\n            $result .= $uchr;\n        }\n\n        if ($c) {\n            ksort($c);\n            $result .= implode('', $c);\n        }\n\n        return $result;\n    }\n\n    private static function getData($file)\n    {\n        if (file_exists($file = __DIR__.'/Resources/unidata/'.$file.'.php')) {\n            return require $file;\n        }\n\n        return false;\n    }\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.421875,
          "content": "Symfony Polyfill / Intl: Normalizer\n===================================\n\nThis component provides a fallback implementation for the\n[`Normalizer`](https://php.net/Normalizer) class provided\nby the [Intl](https://php.net/intl) extension.\n\nMore information can be found in the\n[main Polyfill README](https://github.com/symfony/polyfill/blob/main/README.md).\n\nLicense\n=======\n\nThis library is released under the [MIT license](LICENSE).\n"
        },
        {
          "name": "Resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "bootstrap.php",
          "type": "blob",
          "size": 0.7080078125,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nuse Symfony\\Polyfill\\Intl\\Normalizer as p;\n\nif (\\PHP_VERSION_ID >= 80000) {\n    return require __DIR__.'/bootstrap80.php';\n}\n\nif (!function_exists('normalizer_is_normalized')) {\n    function normalizer_is_normalized($string, $form = p\\Normalizer::FORM_C) { return p\\Normalizer::isNormalized($string, $form); }\n}\nif (!function_exists('normalizer_normalize')) {\n    function normalizer_normalize($string, $form = p\\Normalizer::FORM_C) { return p\\Normalizer::normalize($string, $form); }\n}\n"
        },
        {
          "name": "bootstrap80.php",
          "type": "blob",
          "size": 0.7021484375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nuse Symfony\\Polyfill\\Intl\\Normalizer as p;\n\nif (!function_exists('normalizer_is_normalized')) {\n    function normalizer_is_normalized(?string $string, ?int $form = p\\Normalizer::FORM_C): bool { return p\\Normalizer::isNormalized((string) $string, (int) $form); }\n}\nif (!function_exists('normalizer_normalize')) {\n    function normalizer_normalize(?string $string, ?int $form = p\\Normalizer::FORM_C): string|false { return p\\Normalizer::normalize((string) $string, (int) $form); }\n}\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.9951171875,
          "content": "{\n    \"name\": \"symfony/polyfill-intl-normalizer\",\n    \"type\": \"library\",\n    \"description\": \"Symfony polyfill for intl's Normalizer class and related functions\",\n    \"keywords\": [\"polyfill\", \"shim\", \"compatibility\", \"portable\", \"intl\", \"normalizer\"],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Nicolas Grekas\",\n            \"email\": \"p@tchwork.com\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=7.2\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Symfony\\\\Polyfill\\\\Intl\\\\Normalizer\\\\\": \"\" },\n        \"files\": [ \"bootstrap.php\" ],\n        \"classmap\": [ \"Resources/stubs\" ]\n    },\n    \"suggest\": {\n        \"ext-intl\": \"For best performance\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"extra\": {\n        \"thanks\": {\n            \"name\": \"symfony/polyfill\",\n            \"url\": \"https://github.com/symfony/polyfill\"\n        }\n    }\n}\n"
        }
      ]
    }
  ]
}