{
  "metadata": {
    "timestamp": 1736712042243,
    "page": 562,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "BadApple9/speedtest-x",
      "stars": 1792,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0146484375,
          "content": "speedlogs\n.idea"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 25.904296875,
          "content": "                  GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \"Lesser\" General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\n                  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\n  6. As an exception to the Sections above, you may also combine or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                            NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n           How to Apply These Terms to Your New Libraries\n\n  If you develop a new library, and you want it to be of the greatest\npossible use to the public, we recommend making it free software that\neveryone can redistribute and change.  You can do so by permitting\nredistribution under these terms (or, alternatively, under the terms of the\nordinary General Public License).\n\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the library's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301\n    USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the library, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random\n  Hacker.\n\n  <signature of Ty Coon>, 1 April 1990\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.974609375,
          "content": "<img src='https://raw.githubusercontent.com/BadApple9/images/main/logo.png'></img>\n\n![GitHub Actions Build Status](https://img.shields.io/github/actions/workflow/status/badapple9/speedtest-x/docker-build.yml) ![GitHub last commit](https://img.shields.io/github/last-commit/badapple9/speedtest-x) ![GitHub](https://img.shields.io/github/license/badapple9/speedtest-x)\n\nThis project is an extension of [LibreSpeed](https://github.com/librespeed/speedtest), LibreSpeed is a pretty lightweight speedtest tool.\n\nspeedtest-x uses file datebase to save speedtest results from various users. Thus you can check out different results from various countries/regions.\n\n[中文文档](https://github.com/BadApple9/speedtest-x/blob/master/README_CN.md)\n\n[Join Telegram group](https://t.me/xiaozhu5)\n\n<sup>**❗ Warning**：Based on the principle of web speedtest, this program will generate garbage files for tester to download them to calculate the downstream network bandwidth from server to local. There may be abuses by malicious tester in a certain extent, after shared your speedtest website in public, please pay attention to the condition of your server traffic to avoid an traffic overload.</sup>\n\n## Features and extensions\n - Self-hosted lightweight speedtest page\n - User speedtest result datasheet\n - No MySQL, but lightweight file database\n - Use [ip.sb](https://ip.sb) to get IP info by default\n\n## Quick start\n\n#### <img src='https://img.icons8.com/fluency/512/docker.png' width=\"2%\"></img> Deploy by Docker (Supported platforms: AMD64/ARM64)\n> 1. Pull [Image](https://hub.docker.com/r/badapple9/speedtest-x) `docker pull badapple9/speedtest-x`\n> 2. Run container `docker run -d -p 9001:80 -it badapple9/speedtest-x` (💡 See more parameters [Here](https://github.com/BadApple9/speedtest-x/wiki/Docker-deploy))\n>3. Open `{your_ip}:9001`\n\n-------\n\n#### <img src='https://img.icons8.com/dusk/512/php.png' width=\"2%\"></img> General deploy (Require: PHP5.6+)\n\n>1. Download repository files and unzip to website directory, open `{your_domain_name}/index.html`.\n>2. Open `{your_domain_name}/results.html` to check out speedtest result datasheet.\n\n## Settings\n\n`backend/config.php`:\n> \n> `MAX_LOG_COUNT = 100`：Maximum results size, 100 by default\n>\n> `IP_SERVICE = 'ip.sb'`：IP info provider (Options: ip.sb / ipinfo.io), ip.sb by default\n>\n> `SAME_IP_MULTI_LOGS = false`：Whether to allow the same user IP to record multiple speedtest results, false by default.\n\n\n## Screenshots\n\n![index](https://raw.githubusercontent.com/BadApple9/images/main/indexdemo.png)\n![results](https://raw.githubusercontent.com/BadApple9/images/main/resultsdemo.png)\n\n## See also\n - [LibreSpeed](https://github.com/librespeed/speedtest)\n - [ip.sb](https://ip.sb)\n - [SleekDB](https://github.com/rakibtg/SleekDB)\n\n## Contributors\n\n<a href=\"https://github.com/badapple9/speedtest-x/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=badapple9/speedtest-x\" />\n</a>\n\n## License\n\nSee [License](https://github.com/BadApple9/speedtest-x/blob/master/LICENSE)\n"
        },
        {
          "name": "README_CN.md",
          "type": "blob",
          "size": 3.9267578125,
          "content": "<img src='https://raw.githubusercontent.com/BadApple9/images/main/logo.png'></img>\n\n![GitHub Actions Build Status](https://img.shields.io/github/workflow/status/badapple9/speedtest-x/Build%20Docker%20Image) ![GitHub last commit](https://img.shields.io/github/last-commit/badapple9/speedtest-x) ![GitHub](https://img.shields.io/github/license/badapple9/speedtest-x)\n\n本仓库为 [LibreSpeed](https://github.com/librespeed/speedtest) 的延伸项目，LibreSpeed 是一个非常轻巧的网站测速工具。\n\nspeedtest-x 使用文件数据库来保存来自不同用户的测速结果，方便您查看全国不同地域与运营商的测速效果。\n\n[English docs](https://github.com/BadApple9/speedtest-x/blob/master/README.md)\n\n[加入交流 TG 群](https://t.me/xiaozhu5)\n\n**❗ 注意**：基于网页测速的原理，程序会生成无用文件供测速者下载来计算真实下行带宽，一定程度上存在被恶意刷流量的风险，在对外分享你的测速页面后，请注意观察服务器流量使用情况，避免流量使用异常。\n\n## 扩展细节\n - 用户测速会上传测速记录并保存至网站服务器\n - 不依赖 MySQL，使用文件数据库\n - IP 库改用 [ip.sb](https://ip.sb)，运营商记录更为精确\n\n## 部署与使用\n\n#### 常规部署 (环境要求：PHP 5.6+)\n\n1、下载本仓库并解压到网站目录，访问 `{域名}/index.html` 进行测速\n\n2、打开 `{域名}/results.html` 查看测速记录 \n\n> Tips：`backend/config.php` 中可定义一些自定义配置：\n> \n> `MAX_LOG_COUNT = 100`：最大可保存多少条测速记录\n>\n> `IP_SERVICE = 'ip.sb'`：使用的 IP 运营商解析服务(ip.sb 或 ipinfo.io)\n>\n> `SAME_IP_MULTI_LOGS = false`：是否允许同一IP记录多条测速结果\n\n#### Docker 部署 (支持平台： amd64 / arm64)\n\n1、拉取 [Docker 镜像](https://hub.docker.com/r/badapple9/speedtest-x) `docker pull badapple9/speedtest-x`\n\n2、运行容器 `docker run -d -p 9001:80 -it badapple9/speedtest-x`   \n\n参数解释：\n> **-d**：以常驻进程模式启动\n>\n> **9001**: 默认容器开放端口，可改为其他端口\n>\n> 启动时可指定的环境变量：\n>\n> **-e WEBPORT=80**: 容器内使用的端口\n>\n> **-e MAX_LOG_COUNT=100**: 最大可保存多少条测速记录\n>\n> **-e IP_SERVICE=ip.sb**: 使用的 IP 运营商解析服务(ip.sb 或 ipinfo.io)\n>\n> **-e SAME_IP_MULTI_LOGS=false**: 是否允许同一IP记录多条测速结果\n\n> 如果想让 Docker 容器支持 ipv6，可编辑 `/etc/docker/daemon.json` ，加上以下内容：（如果不存在这个文件则直接创建）\n> ```\n> {\n>   \"ipv6\": true,\n>   \"fixed-cidr-v6\": \"fd00::/80\",\n>   \"experimental\": true,\n>   \"ip6tables\": true\n> }\n> ```\n\n3、访问 `{IP}:{端口}/index.html` 进行测速\n\n## 截图\n\n![index](https://raw.githubusercontent.com/BadApple9/images/main/indexdemo.png)\n![results](https://raw.githubusercontent.com/BadApple9/images/main/resultsdemo.png)\n\n## 更新记录\n\n**2022/07/25**\n\n> 静态资源 CDN 更换为 `cdn.baomitu.com`\n\n**2020/12/22**\n\n> 测速结果增加线性图表([@HuJK](https://github.com/HuJK))\n\n**2020/12/10**\n\n> 增加可配置项 `SAME_IP_MULTI_LOGS`，可设置是否允许同一IP记录多条测速结果\n\n**2020/12/01**\n\n> 增加 ipv6 支持\n>\n> 增加可配置项 `IP_SERVICE`，可选择使用的 IP 运营商解析服务，`ip.sb` 或 `ipinfo.io`\n\n**2020/11/27**\n\n> 下行测速文件默认大小与最大大小限制为 50M（源项目默认 100M，最大 1024M）\n\n**2020/11/19**\n\n> Docker 镜像上线 [https://hub.docker.com/r/badapple9/speedtest-x](https://hub.docker.com/r/badapple9/speedtest-x)\n\n**2020/11/18**\n\n> 上报速度与延迟值强制使用浮点类型，修复结果页表格按照下载速度或 ping 值排序错误的问题\n\n**2020/11/16**\n\n> 优化测速结果上报频率\n>\n> 掩去测速结果 IP D 段\n\n**2020/11/13**\n\n> Release\n\n## 鸣谢\n - [LibreSpeed](https://github.com/librespeed/speedtest)\n - [ip.sb](https://ip.sb)\n - [SleekDB](https://github.com/rakibtg/SleekDB)\n"
        },
        {
          "name": "backend",
          "type": "tree",
          "content": null
        },
        {
          "name": "chart.html",
          "type": "blob",
          "size": 6.0146484375,
          "content": "<!doctype html>\n<html>\n\n<head>\n        <title>ISP Speed Chart</title>\n    <script src=\"chartjs/Chart.min.js\"></script>\n        <script src=\"chartjs/utils.js\"></script>\n        <style>\n        canvas {\n                -moz-user-select: none;\n                -webkit-user-select: none;\n                -ms-user-select: none;\n                position: relative;\n                flex-grow: 1;\n                min-height: 0;\n                width: 100%;\n                height:100%;\n        }\n\tdiv {\n\t\twidth:100%;\n\t\theight:100%;\n\t}\n        body {\n            background: #ffffff;\n            color: #000000;\n            transition: background 0.3s, color 0.3s;\n        }\n\n        /* 深色模式适配 */\n        @media (prefers-color-scheme: dark) {\n            body {\n                background: #121212;\n                color: #e0e0e0;\n            }\n            canvas {\n                background: #1e1e1e;\n            }\n        }\n        </style>\n</head>\n\n<body>\n        <div>\n                <canvas id=\"canvas\"></canvas>\n        </div>\n        <script>\n                var color = Chart.helpers.color;\n\nasync function mainfunc() {\n    var color = Chart.helpers.color;\n    //console.log(color)\n    var datareq = await fetch('backend/results-api.php');\n    //console.log(datareq)\n    var dataraw = await datareq.text();\n    //console.log(dataraw)\n    try {\n        dataraw = JSON.parse(dataraw);\n    } catch {\n        alert(\"Can't get data\");\n        return 0;\n    }\n\n    data_sorted = {};\n    for (const data of dataraw[\"data\"]) {\n        let data_isp = data[\"isp\"].split(\" \").length > 1 ? data[\"isp\"].split(\" \")[0] + \" \" + data[\"isp\"].split(\" \")[1] : data[\"isp\"];\n        if (data_isp in data_sorted) {\n            data_sorted[data_isp] = data_sorted[data_isp].concat([data])\n        } else {\n            data_sorted[data_isp] = [data]\n        }\n    }\n    let datasets = []\n    for (const isp of Object.keys(data_sorted)) {\n        let ispdata_chart = {\n            label: isp,\n            data: []\n        }\n        for (const ispdata of data_sorted[isp]) {\n            let [t_h, t_m, t_s] = ispdata[\"created\"].split(\" \")[1].split(\":\");\n            ispdata_chart[\"data\"] = ispdata_chart[\"data\"].concat([{\n                x: t_h * 1.0 + t_m / 60 + t_s / 3600,\n                y: ispdata[\"dspeed\"],\n\t\t\t\tlabel: ispdata\n            }]);\n        }\n        datasets = datasets.concat([ispdata_chart])\n    }\n    datasets = datasets.sort((a, b) => a[\"data\"].length < b[\"data\"].length ? 1 : -1);\n    for (const [i, data] of datasets.entries()) {\n        if (i === 0) {\n            datasets[i][\"borderColor\"] = window.chartColors[\"red\"];\n\t    datasets[i][\"backgroundColor\"] = color(datasets[i][\"borderColor\"]).alpha(0.9).rgbString()\n        } else if (i === 1) {\n            datasets[i][\"borderColor\"] = \"rgb(12, 176, 42)\";\n\t    datasets[i][\"backgroundColor\"] = color(datasets[i][\"borderColor\"]).alpha(0.9).rgbString()\n        } else if (i === 2) {\n            datasets[i][\"borderColor\"] = \"rgb(2, 104, 219)\";\n\t    datasets[i][\"backgroundColor\"] = color(datasets[i][\"borderColor\"]).alpha(0.9).rgbString()\n        }\n\telse{\n            datasets[i][\"borderColor\"] = window.chartColors[\"gray\"];;\n            datasets[i][\"backgroundColor\"] = color(window.chartColors[\"gray\"]).alpha(0.1).rgbString()\n\t}\n    }\n    console.log(datasets);\n    scatterChartData = {\n        datasets: datasets\n    }\n\n    var ctx = document.getElementById('canvas').getContext('2d');\n    window.myScatter = Chart.Scatter(ctx, {\n        data: scatterChartData,\n        options: {\n            title: {\n                display: true,\n                text: 'ISP Speed Chart'\n            },\n\t\t\ttooltips: {\n\t\t\t\t\tmode: 'nearest',\n\t\t\t\t\tcallbacks: {\n\t\t\t\t\t\ttitle: function(TooltipItem, data){  \n\t\t\t\t\t\t\t// console.log(TooltipItem);\n\t\t\t\t\t\t\t// console.log(data); \n\t\t\t\t\t\t\t// console.log(data[\"datasets\"][TooltipItem[0][\"datasetIndex\"]][\"label\"])\n                                                        return data[\"datasets\"][TooltipItem[0][\"datasetIndex\"]][\"label\"]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlabel:function(TooltipItem, data){\n                                                        return data[\"datasets\"][TooltipItem[\"datasetIndex\"]][\"data\"][TooltipItem[\"index\"]][\"label\"][\"isp\"];\n                                                }, \n\t\t\t\t\t\tfooter: function(TooltipItem, data){\n\t\t\t\t\t\t\t// console.log(TooltipItem);\n\t\t\t\t\t\t\t// console.log(data); \n\t\t\t\t\t\t\tdisplaydata = data[\"datasets\"][TooltipItem[0][\"datasetIndex\"]][\"data\"][TooltipItem[0][\"index\"]][\"label\"]; \n\t\t\t\t\t\t\tshowdict = { \n\t\t\t\t\t\t\t    location:  displaydata[\"addr\"],\n\t\t\t\t\t\t\t    Download:  displaydata[\"dspeed\"],\n\t\t\t\t\t\t\t    Upload:  displaydata[\"uspeed\"],\n\t\t\t\t\t\t\t    Ping:  displaydata[\"ping\"],\n\t\t\t\t\t\t\t    Jitter:  displaydata[\"jitter\"],\n\t\t\t\t\t\t\t    IP:  displaydata[\"ip\"],\n\t\t\t\t\t\t\t    Time:  displaydata[\"created\"],\n\t\t\t\t\t\t\t    // ISP:  displaydata[\"isp\"],\n\t\t\t\t\t\t\t};\n                                                        let showtext = \"\"\n                                                        for (const k of Object.keys(showdict)){\n                                                            showtext += k + \": \" + showdict[k] + \"\\n\";\n                                                        }\n                                                        return showtext\n                                                },\n\n\t\t\t\t\t\t\n\t\t\t\t\t},\n\t\t\t\t\tfooterFontStyle: 'normal'\n\t\t\t\t},\n\t\t\tscales: {\n\t\t\t\t\tyAxes: [{\n\t\t\t\t\t\ttype: 'linear',\n\t\t\t\t\t\tposition: 'bottom',\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tuserCallback: function(tick) {\n\t\t\t\t\t\t\t\t\treturn tick.toString() + 'Mbps';\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tscaleLabel: {\n\t\t\t\t\t\t\tlabelString: 'Speed',\n\t\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\txAxes: [{\n\t\t\t\t\t\ttype: 'linear',\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tuserCallback: function(tick) {\n\t\t\t\t\t\t\t\treturn tick.toString() + ':00';\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbeginAtZero: true,\n\t\t\t\t\t\t\tstepSize: 3,\n\t\t\t\t\t\t\tmax: 24\n\t\t\t\t\t\t},\n\t\t\t\t\t\tscaleLabel: {\n\t\t\t\t\t\t\tlabelString: 'Time',\n\t\t\t\t\t\t\tdisplay: true\n\t\t\t\t\t\t}\n\t\t\t\t\t}]\n\t\t\t\t},\n\t\tresponsive: true,\n\t\tmaintainAspectRatio: false\n        }\n    });\n\n\n}\n\n\n\n                window.onload = function() {\n                        mainfunc();\n                };\n\n\n        </script>\n</body>\n\n</html>\n\n"
        },
        {
          "name": "chartjs",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 6.44140625,
          "content": "<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=no\" />\n<title>speedtest-x</title>\n<link rel=\"shortcut icon\" href=\"favicon.ico\">\n<script type=\"text/javascript\" src=\"speedtest.js\"></script>\n<script type=\"text/javascript\">\n\n//INITIALIZE SPEEDTEST\nvar s=new Speedtest(); //create speedtest object\nvar xhr=new XMLHttpRequest();\nvar url_report='./backend/report.php';\nvar milestone=0;\nvar key_prefix=Date.parse(new Date());\ns.onupdate=function(data){ //callback to update data in UI\n    I(\"ip\").textContent=data.clientIp || \"获取失败\";\n    I(\"dlText\").textContent=(data.testState==1&&data.dlStatus==0)?\"...\":data.dlStatus;\n    I(\"ulText\").textContent=(data.testState==3&&data.ulStatus==0)?\"...\":data.ulStatus;\n    I(\"pingText\").textContent=data.pingStatus;\n    I(\"jitText\").textContent=data.jitterStatus;\n    var prog=(Number(data.dlProgress)*2+Number(data.ulProgress)*2+Number(data.pingProgress))/5;\n\tI(\"progress\").style.width=(100*prog)+\"%\";\n\tvar ipIspArr = I(\"ip\").textContent.split(' - ', 3);\n\tvar ip = ipIspArr[0];\n\tvar isp = ipIspArr[1];\n\tvar addr = ipIspArr[2] === undefined? '' :ipIspArr[2];\n\tvar progress = Math.floor(100*prog);\n\tvar key = key_prefix + \"_\" + ip;\n\tif (progress > 20 && (progress % 10 == 0) && progress != milestone) {\n\t\tconsole.log(progress);\n\t\tvar params = 'key='+key+'&ip='+ip+'&isp='+isp+'&addr='+addr+'&dspeed='+I(\"dlText\").textContent+'&uspeed='+I(\"ulText\").textContent+'&ping='+I(\"pingText\").textContent\n\t\t\t\t\t\t+'&jitter='+I(\"jitText\").textContent;\n\t\txhr.timeout = 3000;\n\t\txhr.ontimeout = function (e) {\n\t\t\tconsole.log('上报超时');\n\t\t};\n\t\txhr.open('POST', url_report, true);\n\t\txhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n\t\txhr.send(params);\n\t\tmilestone = progress;\n\t}\n}\ns.onend=function(aborted){ //callback for test ended/aborted\n    I(\"startStopBtn\").className=\"\"; //show start button again\n    if(aborted){ //if the test was aborted, clear the UI and prepare for new test\n\t\tinitUI();\n    }\n}\n\nfunction startStop(){ //start/stop button pressed\n\tif(s.getState()==3){\n\t\t//speedtest is running, abort\n\t\ts.abort();\n\t}else{\n\t\t//test is not running, begin\n\t\ts.start();\n\t\tI(\"startStopBtn\").className=\"running\";\n\t}\n}\n\n//function to (re)initialize UI\nfunction initUI(){\n\tI(\"dlText\").textContent=\"\";\n\tI(\"ulText\").textContent=\"\";\n\tI(\"pingText\").textContent=\"\";\n\tI(\"jitText\").textContent=\"\";\n\tI(\"ip\").textContent=\"\";\n}\n\nfunction I(id){return document.getElementById(id);}\n</script>\n\n<style type=\"text/css\">\n\thtml,body{\n\t\tborder:none; padding:0; margin:0;\n\t\tbackground:#FFFFFF;\n\t\tcolor:#202020;\n\t}\n\tbody{\n\t\ttext-align:center;\n\t\tfont-family:\"Roboto\",sans-serif;\n\t}\n\th1{\n\t\tcolor:#404040;\n\t}\n\t#startStopBtn{\n\t\tdisplay:inline-block;\n\t\tmargin:0 auto;\n\t\tcolor:#6060AA;\n\t\tbackground-color:rgba(0,0,0,0);\n\t\tborder:0.15em solid #6060FF;\n\t\tborder-radius:0.3em;\n\t\ttransition:all 0.3s;\n\t\tbox-sizing:border-box;\n\t\twidth:8em; height:3em;\n\t\tline-height:2.7em;\n\t\tcursor:pointer;\n\t\tbox-shadow: 0 0 0 rgba(0,0,0,0.1), inset 0 0 0 rgba(0,0,0,0.1);\n\t}\n\t#startStopBtn:hover{\n\t\tbox-shadow: 0 0 2em rgba(0,0,0,0.1), inset 0 0 1em rgba(0,0,0,0.1);\n\t}\n\t#startStopBtn.running{\n\t\tbackground-color:#FF3030;\n\t\tborder-color:#FF6060;\n\t\tcolor:#FFFFFF;\n\t}\n\t#startStopBtn:before{\n\t\tcontent:\"Start\";\n\t}\n\t#startStopBtn.running:before{\n\t\tcontent:\"Abort\";\n\t}\n\t#test{\n\t\tmargin-top:2em;\n\t\tmargin-bottom:12em;\n\t}\n\tdiv.testArea{\n\t\tdisplay:inline-block;\n\t\twidth:14em;\n\t\theight:9em;\n\t\tposition:relative;\n\t\tbox-sizing:border-box;\n\t}\n\tdiv.testName{\n\t\tposition:absolute;\n\t\ttop:0.1em; left:0;\n\t\twidth:100%;\n\t\tfont-size:1.4em;\n\t\tz-index:9;\n\t}\n\tdiv.meterText{\n\t\tposition:absolute;\n\t\tbottom:1.5em; left:0;\n\t\twidth:100%;\n\t\tfont-size:2.5em;\n\t\tz-index:9;\n\t}\n\t#dlText{\n\t\tcolor:#6060AA;\n\t}\n\t#ulText{\n\t\tcolor:#309030;\n\t}\n\t#pingText,#jitText{\n\t\tcolor:#AA6060;\n\t}\n\tdiv.meterText:empty:before{\n\t\tcolor:#505050 !important;\n\t\tcontent:\"0.00\";\n\t}\n\tdiv.unit{\n\t\tposition:absolute;\n\t\tbottom:2em; left:0;\n\t\twidth:100%;\n\t\tz-index:9;\n\t}\n\tdiv.testGroup{\n\t\tdisplay:inline-block;\n\t}\n\t@media all and (max-width:65em){\n\t\tbody{\n\t\t\tfont-size:1.5vw;\n\t\t}\n\t}\n\t@media all and (max-width:40em){\n\t\tbody{\n\t\t\tfont-size:0.8em;\n\t\t}\n\t\tdiv.testGroup{\n\t\t\tdisplay:block;\n\t\t\tmargin: 0 auto;\n\t\t}\n\t}\n\t#progressBar{\n\t\twidth:90%;\n\t\theight:0.3em;\n\t\tbackground-color:#EEEEEE;\n\t\tposition:relative;\n\t\tdisplay:block;\n\t\tmargin:0 auto;\n\t\tmargin-bottom:2em;\n\t}\n\t#progress{\n\t\tposition:absolute;\n\t\ttop:0; left:0;\n\t\theight:100%;\n\t\twidth:0%;\n\t\ttransition: width 2s;\n\t\tbackground-color:#90BBFF;\n\t}\n\n\t@media (prefers-color-scheme: dark) {\n        html, body {\n            background: #181818;\n            color: #E0E0E0;\n        }\n        h1 {\n            color: #FFFFFF;\n        }\n        #startStopBtn {\n            color: #AAAAFF;\n            border-color: #AAAAFF;\n        }\n        #startStopBtn:hover {\n            box-shadow: 0 0 2em rgba(255, 255, 255, 0.1), inset 0 0 1em rgba(255, 255, 255, 0.1);\n        }\n        #startStopBtn.running {\n            background-color: #FF5050;\n            border-color: #FF8080;\n            color: #FFFFFF;\n        }\n        #progressBar {\n            background-color: #404040;\n        }\n        #progress {\n            background-color: #6060FF;\n        }\n        #dlText {\n            color: #AAAAFF;\n        }\n        #ulText {\n            color: #50C050;\n        }\n        #pingText, #jitText {\n            color: #FF8080;\n        }\n    }\n\n</style>\n</head>\n<body>\n<h1>Speedtest-X</h1>\n<div id=\"startStopBtn\" onclick=\"startStop()\"></div>\n<div id=\"test\">\n    <div id=\"progressBar\"><div id=\"progress\"></div></div>\n\t<div class=\"testGroup\">\n\t\t<div class=\"testArea\">\n\t\t\t<div class=\"testName\">下载速度</div>\n\t\t\t<div id=\"dlText\" class=\"meterText\"></div>\n\t\t\t<div class=\"unit\">Mbps</div>\n\t\t</div>\n\t\t<div class=\"testArea\">\n\t\t\t<div class=\"testName\">上传速度</div>\n\t\t\t<div id=\"ulText\" class=\"meterText\"></div>\n\t\t\t<div class=\"unit\">Mbps</div>\n\t\t</div>\n\t</div>\n\t<div class=\"testGroup\">\n\t\t<div class=\"testArea\">\n\t\t\t<div class=\"testName\">延迟</div>\n\t\t\t<div id=\"pingText\" class=\"meterText\"></div>\n\t\t\t<div class=\"unit\">ms</div>\n\t\t</div>\n\t\t<div class=\"testArea\">\n\t\t\t<div class=\"testName\">抖动</div>\n\t\t\t<div id=\"jitText\" class=\"meterText\"></div>\n\t\t\t<div class=\"unit\">ms</div>\n\t\t</div>\n\t</div>\n\t<div id=\"ipArea\">\n\t\tIP地址: <span id=\"ip\"></span>\n\t</div>\n</div>\n<p><a href=\"./results.html\" target=\"_blank\">查看测速记录</a></p>\n<p><a href=\"https://github.com/BadApple9/speedtest-x\" target=\"_blank\">speedtest-x 项目地址</a></p>\n<script type=\"text/javascript\">\n    initUI();\n</script>\n</body>\n</html>\n"
        },
        {
          "name": "results.html",
          "type": "blob",
          "size": 2.7509765625,
          "content": "<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>测速结果 | speedtest-x</title>\n  <meta name=\"renderer\" content=\"webkit\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n  <link rel=\"stylesheet\" href=\"https://lib.baomitu.com/layui/2.5.7/css/layui.css\"  media=\"all\">\n  <style>\n    .footer {line-height: 30px; text-align: center;}\n    .footer a{padding:0 6px; font-weight: 300;}\n    .footer a:hover{color: green;}\n    .header {line-height: 30px; text-align: center;height:50px;padding-top:50px;margin-bottom: 10px;}\n    .header span>a {color:white;}\n    body {background: #FFFFFF; color: #000000; transition: background 0.3s, color 0.3s;}\n    h1 {color: #000000;}\n\n    @media (prefers-color-scheme: dark) {\n      body {background: #181818; color: #E0E0E0;}\n      .footer a {color: #909090;}\n      .footer a:hover {color: #00FF00;}\n      .header span>a {color: #BBBBBB;}\n      h1 {color: #FFFFFF;}\n      .layui-table-header th, .layui-table-cell, .layui-table-view .layui-table {background: #222222; color: #E0E0E0;}\n      .layui-table-sort i {color: #E0E0E0;}\n    }\n\n  </style>\n</head>\n<body>\n<div class=\"header\">\n  <h1>speedtest-x 测速结果</h1>\n<span class=\"layui-badge layui-bg-green\"><a href=\"./chart.html\" target=\"_blank\">查看线性图表</a></span>\n  <a href=\"javascript:layer.tips('线性图表用于展示不同运营商在不同时段的速度表现，程序默认保留100条测速结果，可调大此数值以获得更准确的图表分析', '#tips', {\n  tips: [3, '#3595CC'],\n  time: 6000\n});\"><span id=\"tips\" class=\"layui-badge layui-bg-black\">?</span></a>\n</div>\n\n<table class=\"layui-hide\" id=\"test\"></table>\n\n<div class=\"footer\">\n  <a href=\"https://github.com/BadApple9/speedtest-x\" target=\"_blank\">speedtest-x 项目地址</a>\n</div>\n\n<script src=\"https://lib.baomitu.com/layui/2.5.7/layui.js\" charset=\"utf-8\"></script>\n\n<script>\n    layui.use('table', function(){\n        var table = layui.table;\n\n        table.render({\n            elem: '#test'\n            ,url:'./backend/results-api.php'\n            ,cellMinWidth: 80\n            ,cols: [[\n                {field:'ip', title: 'IP地址'}\n                ,{field:'isp', title: '运营商'}\n                ,{field:'addr', title: '城市'}\n                ,{field:'dspeed', title: '下载速度 (Mbps)', sort: true, align: 'right'}\n                ,{field:'uspeed', title: '上传速度 (Mbps)', sort: true, align: 'right'}\n                ,{field:'ping', title: 'Ping (ms)', sort: true, align: 'right'}\n                ,{field:'jitter', title: '抖动 (ms)', sort: true, align: 'right'}\n                ,{field:'created', title: '测试时间', sort: true}\n            ]]\n        });\n    });\n</script>\n\n</body>\n</html>\n"
        },
        {
          "name": "speedtest.js",
          "type": "blob",
          "size": 16.671875,
          "content": "/*\n\tLibreSpeed - Main\n\tby Federico Dossena\n\thttps://github.com/librespeed/speedtest/\n\tGNU LGPLv3 License\n*/\n\n/*\n   This is the main interface between your webpage and the speedtest.\n   It hides the speedtest web worker to the page, and provides many convenient functions to control the test.\n   \n   The best way to learn how to use this is to look at the basic example, but here's some documentation.\n  \n   To initialize the test, create a new Speedtest object:\n    var s=new Speedtest();\n   Now you can think of this as a finite state machine. These are the states (use getState() to see them):\n   - 0: here you can change the speedtest settings (such as test duration) with the setParameter(\"parameter\",value) method. From here you can either start the test using start() (goes to state 3) or you can add multiple test points using addTestPoint(server) or addTestPoints(serverList) (goes to state 1). Additionally, this is the perfect moment to set up callbacks for the onupdate(data) and onend(aborted) events.\n   - 1: here you can add test points. You only need to do this if you want to use multiple test points.\n        A server is defined as an object like this:\n        {\n            name: \"User friendly name\",\n            server:\"http://yourBackend.com/\",     <---- URL to your server. You can specify http:// or https://. If your server supports both, just write // without the protocol\n            dlURL:\"garbage.php\"    <----- path to garbage.php or its replacement on the server\n            ulURL:\"empty.php\"    <----- path to empty.php or its replacement on the server\n            pingURL:\"empty.php\"    <----- path to empty.php or its replacement on the server. This is used to ping the server by this selector\n            getIpURL:\"getIP.php\"    <----- path to getIP.php or its replacement on the server\n        }\n        While in state 1, you can only add test points, you cannot change the test settings. When you're done, use selectServer(callback) to select the test point with the lowest ping. This is asynchronous, when it's done, it will call your callback function and move to state 2. Calling setSelectedServer(server) will manually select a server and move to state 2.\n    - 2: test point selected, ready to start the test. Use start() to begin, this will move to state 3\n    - 3: test running. Here, your onupdate event calback will be called periodically, with data coming from the worker about speed and progress. A data object will be passed to your onupdate function, with the following items:\n            - dlStatus: download speed in mbps\n            - ulStatus: upload speed in mbps\n            - pingStatus: ping in ms\n            - jitterStatus: jitter in ms\n            - dlProgress: progress of the download test as a float 0-1\n            - ulProgress: progress of the upload test as a float 0-1\n            - pingProgress: progress of the ping/jitter test as a float 0-1\n            - testState: state of the test (-1=not started, 0=starting, 1=download test, 2=ping+jitter test, 3=upload test, 4=finished, 5=aborted)\n            - clientIp: IP address of the client performing the test (and optionally ISP and distance) \n        At the end of the test, the onend function will be called, with a boolean specifying whether the test was aborted or if it ended normally.\n        The test can be aborted at any time with abort().\n        At the end of the test, it will move to state 4\n    - 4: test finished. You can run it again by calling start() if you want.\n */\n\nfunction Speedtest() {\n  this._serverList = []; //when using multiple points of test, this is a list of test points\n  this._selectedServer = null; //when using multiple points of test, this is the selected server\n  this._settings = {}; //settings for the speedtest worker\n  this._state = 0; //0=adding settings, 1=adding servers, 2=server selection done, 3=test running, 4=done\n  console.log(\n    \"LibreSpeed by Federico Dossena v5.2.2 - https://github.com/librespeed/speedtest\"\n  );\n  console.log(\n      \"speedtest-x - https://github.com/BadApple9/speedtest-x\"\n  );\n}\n\nSpeedtest.prototype = {\n  constructor: Speedtest,\n  /**\n   * Returns the state of the test: 0=adding settings, 1=adding servers, 2=server selection done, 3=test running, 4=done\n   */\n  getState: function() {\n    return this._state;\n  },\n  /**\n   * Change one of the test settings from their defaults.\n   * - parameter: string with the name of the parameter that you want to set\n   * - value: new value for the parameter\n   *\n   * Invalid values or nonexistant parameters will be ignored by the speedtest worker.\n   */\n  setParameter: function(parameter, value) {\n    if (this._state != 0)\n      throw \"You cannot change the test settings after adding server or starting the test\";\n    this._settings[parameter] = value;\n    if(parameter === \"telemetry_extra\"){\n        this._originalExtra=this._settings.telemetry_extra;\n    }\n  },\n  /**\n   * Used internally to check if a server object contains all the required elements.\n   * Also fixes the server URL if needed.\n   */\n  _checkServerDefinition: function(server) {\n    try {\n      if (typeof server.name !== \"string\")\n        throw \"Name string missing from server definition (name)\";\n      if (typeof server.server !== \"string\")\n        throw \"Server address string missing from server definition (server)\";\n      if (server.server.charAt(server.server.length - 1) != \"/\")\n        server.server += \"/\";\n      if (server.server.indexOf(\"//\") == 0)\n        server.server = location.protocol + server.server;\n      if (typeof server.dlURL !== \"string\")\n        throw \"Download URL string missing from server definition (dlURL)\";\n      if (typeof server.ulURL !== \"string\")\n        throw \"Upload URL string missing from server definition (ulURL)\";\n      if (typeof server.pingURL !== \"string\")\n        throw \"Ping URL string missing from server definition (pingURL)\";\n      if (typeof server.getIpURL !== \"string\")\n        throw \"GetIP URL string missing from server definition (getIpURL)\";\n    } catch (e) {\n      throw \"Invalid server definition\";\n    }\n  },\n  /**\n   * Add a test point (multiple points of test)\n   * server: the server to be added as an object. Must contain the following elements:\n   *  {\n   *       name: \"User friendly name\",\n   *       server:\"http://yourBackend.com/\",   URL to your server. You can specify http:// or https://. If your server supports both, just write // without the protocol\n   *       dlURL:\"garbage.php\"   path to garbage.php or its replacement on the server\n   *       ulURL:\"empty.php\"   path to empty.php or its replacement on the server\n   *       pingURL:\"empty.php\"   path to empty.php or its replacement on the server. This is used to ping the server by this selector\n   *       getIpURL:\"getIP.php\"   path to getIP.php or its replacement on the server\n   *   }\n   */\n  addTestPoint: function(server) {\n    this._checkServerDefinition(server);\n    if (this._state == 0) this._state = 1;\n    if (this._state != 1) throw \"You can't add a server after server selection\";\n    this._settings.mpot = true;\n    this._serverList.push(server);\n  },\n  /**\n   * Same as addTestPoint, but you can pass an array of servers\n   */\n  addTestPoints: function(list) {\n    for (var i = 0; i < list.length; i++) this.addTestPoint(list[i]);\n  },\n  /**\n   * Load a JSON server list from URL (multiple points of test)\n   * url: the url where the server list can be fetched. Must be an array with objects containing the following elements:\n   *  {\n   *       \"name\": \"User friendly name\",\n   *       \"server\":\"http://yourBackend.com/\",   URL to your server. You can specify http:// or https://. If your server supports both, just write // without the protocol\n   *       \"dlURL\":\"garbage.php\"   path to garbage.php or its replacement on the server\n   *       \"ulURL\":\"empty.php\"   path to empty.php or its replacement on the server\n   *       \"pingURL\":\"empty.php\"   path to empty.php or its replacement on the server. This is used to ping the server by this selector\n   *       \"getIpURL\":\"getIP.php\"   path to getIP.php or its replacement on the server\n   *   }\n   * result: callback to be called when the list is loaded correctly. An array with the loaded servers will be passed to this function, or null if it failed\n   */\n  loadServerList: function(url,result) {\n    if (this._state == 0) this._state = 1;\n    if (this._state != 1) throw \"You can't add a server after server selection\";\n    this._settings.mpot = true;\n    var xhr = new XMLHttpRequest();\n    xhr.onload = function(){\n      try{\n        var servers=JSON.parse(xhr.responseText);\n        for(var i=0;i<servers.length;i++){\n          this._checkServerDefinition(servers[i]);\n        }\n        this.addTestPoints(servers);\n        result(servers);\n      }catch(e){\n        result(null);\n      }\n    }.bind(this);\n    xhr.onerror = function(){result(null);}\n    xhr.open(\"GET\",url);\n    xhr.send();\n  },\n  /**\n   * Returns the selected server (multiple points of test)\n   */\n  getSelectedServer: function() {\n    if (this._state < 2 || this._selectedServer == null)\n      throw \"No server is selected\";\n    return this._selectedServer;\n  },\n  /**\n   * Manually selects one of the test points (multiple points of test)\n   */\n  setSelectedServer: function(server) {\n    this._checkServerDefinition(server);\n    if (this._state == 3)\n      throw \"You can't select a server while the test is running\";\n    this._selectedServer = server;\n    this._state = 2;\n  },\n  /**\n   * Automatically selects a server from the list of added test points. The server with the lowest ping will be chosen. (multiple points of test)\n   * The process is asynchronous and the passed result callback function will be called when it's done, then the test can be started.\n   */\n  selectServer: function(result) {\n    if (this._state != 1) {\n      if (this._state == 0) throw \"No test points added\";\n      if (this._state == 2) throw \"Server already selected\";\n      if (this._state >= 3)\n        throw \"You can't select a server while the test is running\";\n    }\n    if (this._selectServerCalled) throw \"selectServer already called\"; else this._selectServerCalled=true;\n    /*this function goes through a list of servers. For each server, the ping is measured, then the server with the function result is called with the best server, or null if all the servers were down.\n     */\n    var select = function(serverList, result) {\n      //pings the specified URL, then calls the function result. Result will receive a parameter which is either the time it took to ping the URL, or -1 if something went wrong.\n      var PING_TIMEOUT = 2000;\n      var USE_PING_TIMEOUT = true; //will be disabled on unsupported browsers\n      if (/MSIE.(\\d+\\.\\d+)/i.test(navigator.userAgent)) {\n        //IE11 doesn't support XHR timeout\n        USE_PING_TIMEOUT = false;\n      }\n      var ping = function(url, result) {\n        url += (url.match(/\\?/) ? \"&\" : \"?\") + \"cors=true\";\n        var xhr = new XMLHttpRequest();\n        var t = new Date().getTime();\n        xhr.onload = function() {\n          if (xhr.responseText.length == 0) {\n            //we expect an empty response\n            var instspd = new Date().getTime() - t; //rough timing estimate\n            try {\n              //try to get more accurate timing using performance API\n              var p = performance.getEntriesByName(url);\n              p = p[p.length - 1];\n              var d = p.responseStart - p.requestStart;\n              if (d <= 0) d = p.duration;\n              if (d > 0 && d < instspd) instspd = d;\n            } catch (e) {}\n            result(instspd);\n          } else result(-1);\n        }.bind(this);\n        xhr.onerror = function() {\n          result(-1);\n        }.bind(this);\n        xhr.open(\"GET\", url);\n        if (USE_PING_TIMEOUT) {\n          try {\n            xhr.timeout = PING_TIMEOUT;\n            xhr.ontimeout = xhr.onerror;\n          } catch (e) {}\n        }\n        xhr.send();\n      }.bind(this);\n\n      //this function repeatedly pings a server to get a good estimate of the ping. When it's done, it calls the done function without parameters. At the end of the execution, the server will have a new parameter called pingT, which is either the best ping we got from the server or -1 if something went wrong.\n      var PINGS = 3, //up to 3 pings are performed, unless the server is down...\n        SLOW_THRESHOLD = 500; //...or one of the pings is above this threshold\n      var checkServer = function(server, done) {\n        var i = 0;\n        server.pingT = -1;\n        if (server.server.indexOf(location.protocol) == -1) done();\n        else {\n          var nextPing = function() {\n            if (i++ == PINGS) {\n              done();\n              return;\n            }\n            ping(\n              server.server + server.pingURL,\n              function(t) {\n                if (t >= 0) {\n                  if (t < server.pingT || server.pingT == -1) server.pingT = t;\n                  if (t < SLOW_THRESHOLD) nextPing();\n                  else done();\n                } else done();\n              }.bind(this)\n            );\n          }.bind(this);\n          nextPing();\n        }\n      }.bind(this);\n      //check servers in list, one by one\n      var i = 0;\n      var done = function() {\n        var bestServer = null;\n        for (var i = 0; i < serverList.length; i++) {\n          if (\n            serverList[i].pingT != -1 &&\n            (bestServer == null || serverList[i].pingT < bestServer.pingT)\n          )\n            bestServer = serverList[i];\n        }\n        result(bestServer);\n      }.bind(this);\n      var nextServer = function() {\n        if (i == serverList.length) {\n          done();\n          return;\n        }\n        checkServer(serverList[i++], nextServer);\n      }.bind(this);\n      nextServer();\n    }.bind(this);\n\n    //parallel server selection\n    var CONCURRENCY = 6;\n    var serverLists = [];\n    for (var i = 0; i < CONCURRENCY; i++) {\n      serverLists[i] = [];\n    }\n    for (var i = 0; i < this._serverList.length; i++) {\n      serverLists[i % CONCURRENCY].push(this._serverList[i]);\n    }\n    var completed = 0;\n    var bestServer = null;\n    for (var i = 0; i < CONCURRENCY; i++) {\n      select(\n        serverLists[i],\n        function(server) {\n          if (server != null) {\n            if (bestServer == null || server.pingT < bestServer.pingT)\n              bestServer = server;\n          }\n          completed++;\n          if (completed == CONCURRENCY) {\n            this._selectedServer = bestServer;\n            this._state = 2;\n            if (result) result(bestServer);\n          }\n        }.bind(this)\n      );\n    }\n  },\n  /**\n   * Starts the test.\n   * During the test, the onupdate(data) callback function will be called periodically with data from the worker.\n   * At the end of the test, the onend(aborted) function will be called with a boolean telling you if the test was aborted or if it ended normally.\n   */\n  start: function() {\n    if (this._state == 3) throw \"Test already running\";\n    this.worker = new Worker(\"speedtest_worker.js?r=\" + Math.random());\n    this.worker.onmessage = function(e) {\n      if (e.data === this._prevData) return;\n      else this._prevData = e.data;\n      var data = JSON.parse(e.data);\n      try {\n        if (this.onupdate) this.onupdate(data);\n      } catch (e) {\n        console.error(\"Speedtest onupdate event threw exception: \" + e);\n      }\n      if (data.testState >= 4) {\n\t  clearInterval(this.updater);\n        this._state = 4;\n        try {\n          if (this.onend) this.onend(data.testState == 5);\n        } catch (e) {\n          console.error(\"Speedtest onend event threw exception: \" + e);\n        }\n      }\n    }.bind(this);\n    this.updater = setInterval(\n      function() {\n        this.worker.postMessage(\"status\");\n      }.bind(this),\n      200\n    );\n    if (this._state == 1)\n        throw \"When using multiple points of test, you must call selectServer before starting the test\";\n    if (this._state == 2) {\n      this._settings.url_dl =\n        this._selectedServer.server + this._selectedServer.dlURL;\n      this._settings.url_ul =\n        this._selectedServer.server + this._selectedServer.ulURL;\n      this._settings.url_ping =\n        this._selectedServer.server + this._selectedServer.pingURL;\n      this._settings.url_getIp =\n        this._selectedServer.server + this._selectedServer.getIpURL;\n      if (typeof this._originalExtra !== \"undefined\") {\n        this._settings.telemetry_extra = JSON.stringify({\n          server: this._selectedServer.name,\n          extra: this._originalExtra\n        });\n      } else\n        this._settings.telemetry_extra = JSON.stringify({\n          server: this._selectedServer.name\n        });\n    }\n    this._state = 3;\n    this.worker.postMessage(\"start \" + JSON.stringify(this._settings));\n  },\n  /**\n   * Aborts the test while it's running.\n   */\n  abort: function() {\n    if (this._state < 3) throw \"You cannot abort a test that's not started yet\";\n    if (this._state < 4) this.worker.postMessage(\"abort\");\n  }\n};\n"
        },
        {
          "name": "speedtest_worker.js",
          "type": "blob",
          "size": 27.3447265625,
          "content": "/*\n\tLibreSpeed - Worker\n\tby Federico Dossena\n\thttps://github.com/librespeed/speedtest/\n\tGNU LGPLv3 License\n*/\n\n// data reported to main thread\nvar testState = -1; // -1=not started, 0=starting, 1=download test, 2=ping+jitter test, 3=upload test, 4=finished, 5=abort\nvar dlStatus = \"\"; // download speed in megabit/s with 2 decimal digits\nvar ulStatus = \"\"; // upload speed in megabit/s with 2 decimal digits\nvar pingStatus = \"\"; // ping in milliseconds with 2 decimal digits\nvar jitterStatus = \"\"; // jitter in milliseconds with 2 decimal digits\nvar clientIp = \"\"; // client's IP address as reported by getIP.php\nvar dlProgress = 0; //progress of download test 0-1\nvar ulProgress = 0; //progress of upload test 0-1\nvar pingProgress = 0; //progress of ping+jitter test 0-1\nvar testId = null; //test ID (sent back by telemetry if used, null otherwise)\n\nvar log = \"\"; //telemetry log\nfunction tlog(s) {\n\tif (settings.telemetry_level >= 2) {\n\t\tlog += Date.now() + \": \" + s + \"\\n\";\n\t}\n}\nfunction tverb(s) {\n\tif (settings.telemetry_level >= 3) {\n\t\tlog += Date.now() + \": \" + s + \"\\n\";\n\t}\n}\nfunction twarn(s) {\n\tif (settings.telemetry_level >= 2) {\n\t\tlog += Date.now() + \" WARN: \" + s + \"\\n\";\n\t}\n\tconsole.warn(s);\n}\n\n// test settings. can be overridden by sending specific values with the start command\nvar settings = {\n\tmpot: false, //set to true when in MPOT mode\n\ttest_order: \"IP_D_U\", //order in which tests will be performed as a string. D=Download, U=Upload, P=Ping+Jitter, I=IP, _=1 second delay\n\ttime_ul_max: 15, // max duration of upload test in seconds\n\ttime_dl_max: 15, // max duration of download test in seconds\n\ttime_auto: true, // if set to true, tests will take less time on faster connections\n\ttime_ulGraceTime: 3, //time to wait in seconds before actually measuring ul speed (wait for buffers to fill)\n\ttime_dlGraceTime: 1.5, //time to wait in seconds before actually measuring dl speed (wait for TCP window to increase)\n\tcount_ping: 10, // number of pings to perform in ping test\n\turl_dl: \"backend/garbage.php\", // path to a large file or garbage.php, used for download test. must be relative to this js file\n\turl_ul: \"backend/empty.php\", // path to an empty file, used for upload test. must be relative to this js file\n\turl_ping: \"backend/empty.php\", // path to an empty file, used for ping test. must be relative to this js file\n\turl_getIp: \"backend/getIP.php\", // path to getIP.php relative to this js file, or a similar thing that outputs the client's ip\n\tgetIp_ispInfo: true, //if set to true, the server will include ISP info with the IP address\n\tgetIp_ispInfo_distance: \"km\", //km or mi=estimate distance from server in km/mi; set to false to disable distance estimation. getIp_ispInfo must be enabled in order for this to work\n\txhr_dlMultistream: 6, // number of download streams to use (can be different if enable_quirks is active)\n\txhr_ulMultistream: 3, // number of upload streams to use (can be different if enable_quirks is active)\n\txhr_multistreamDelay: 300, //how much concurrent requests should be delayed\n\txhr_ignoreErrors: 1, // 0=fail on errors, 1=attempt to restart a stream if it fails, 2=ignore all errors\n\txhr_dlUseBlob: false, // if set to true, it reduces ram usage but uses the hard drive (useful with large garbagePhp_chunkSize and/or high xhr_dlMultistream)\n\txhr_ul_blob_megabytes: 20, //size in megabytes of the upload blobs sent in the upload test (forced to 4 on chrome mobile)\n\tgarbagePhp_chunkSize: 50, // size of chunks sent by garbage.php (can be different if enable_quirks is active)\n\tenable_quirks: true, // enable quirks for specific browsers. currently it overrides settings to optimize for specific browsers, unless they are already being overridden with the start command\n\tping_allowPerformanceApi: true, // if enabled, the ping test will attempt to calculate the ping more precisely using the Performance API. Currently works perfectly in Chrome, badly in Edge, and not at all in Firefox. If Performance API is not supported or the result is obviously wrong, a fallback is provided.\n\toverheadCompensationFactor: 1.06, //can be changed to compensatie for transport overhead. (see doc.md for some other values)\n\tuseMebibits: false, //if set to true, speed will be reported in mebibits/s instead of megabits/s\n\ttelemetry_level: 0, // 0=disabled, 1=basic (results only), 2=full (results and timing) 3=debug (results+log)\n\turl_telemetry: \"results/telemetry.php\", // path to the script that adds telemetry data to the database\n\ttelemetry_extra: \"\" //extra data that can be passed to the telemetry through the settings\n};\n\nvar xhr = null; // array of currently active xhr requests\nvar interval = null; // timer used in tests\nvar test_pointer = 0; //pointer to the next test to run inside settings.test_order\n\n/*\n  this function is used on URLs passed in the settings to determine whether we need a ? or an & as a separator\n*/\nfunction url_sep(url) {\n\treturn url.match(/\\?/) ? \"&\" : \"?\";\n}\n\n/*\n\tlistener for commands from main thread to this worker.\n\tcommands:\n\t-status: returns the current status as a JSON string containing testState, dlStatus, ulStatus, pingStatus, clientIp, jitterStatus, dlProgress, ulProgress, pingProgress\n\t-abort: aborts the current test\n\t-start: starts the test. optionally, settings can be passed as JSON.\n\t\texample: start {\"time_ul_max\":\"10\", \"time_dl_max\":\"10\", \"count_ping\":\"50\"}\n*/\nthis.addEventListener(\"message\", function(e) {\n\tvar params = e.data.split(\" \");\n\tif (params[0] === \"status\") {\n\t\t// return status\n\t\tpostMessage(\n\t\t\tJSON.stringify({\n\t\t\t\ttestState: testState,\n\t\t\t\tdlStatus: dlStatus,\n\t\t\t\tulStatus: ulStatus,\n\t\t\t\tpingStatus: pingStatus,\n\t\t\t\tclientIp: clientIp,\n\t\t\t\tjitterStatus: jitterStatus,\n\t\t\t\tdlProgress: dlProgress,\n\t\t\t\tulProgress: ulProgress,\n\t\t\t\tpingProgress: pingProgress,\n\t\t\t\ttestId: testId\n\t\t\t})\n\t\t);\n\t}\n\tif (params[0] === \"start\" && testState === -1) {\n\t\t// start new test\n\t\ttestState = 0;\n\t\ttry {\n\t\t\t// parse settings, if present\n\t\t\tvar s = {};\n\t\t\ttry {\n\t\t\t\tvar ss = e.data.substring(5);\n\t\t\t\tif (ss) s = JSON.parse(ss);\n\t\t\t} catch (e) {\n\t\t\t\ttwarn(\"Error parsing custom settings JSON. Please check your syntax\");\n\t\t\t}\n\t\t\t//copy custom settings\n\t\t\tfor (var key in s) {\n\t\t\t\tif (typeof settings[key] !== \"undefined\") settings[key] = s[key];\n\t\t\t\telse twarn(\"Unknown setting ignored: \" + key);\n\t\t\t}\n\t\t\tvar ua = navigator.userAgent;\n\t\t\t// quirks for specific browsers. apply only if not overridden. more may be added in future releases\n\t\t\tif (settings.enable_quirks || (typeof s.enable_quirks !== \"undefined\" && s.enable_quirks)) {\n\t\t\t\tif (/Firefox.(\\d+\\.\\d+)/i.test(ua)) {\n\t\t\t\t\tif (typeof s.ping_allowPerformanceApi === \"undefined\") {\n\t\t\t\t\t\t// ff performance API sucks\n\t\t\t\t\t\tsettings.ping_allowPerformanceApi = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (/Edge.(\\d+\\.\\d+)/i.test(ua)) {\n\t\t\t\t\tif (typeof s.xhr_dlMultistream === \"undefined\") {\n\t\t\t\t\t\t// edge more precise with 3 download streams\n\t\t\t\t\t\tsettings.xhr_dlMultistream = 3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (/Chrome.(\\d+)/i.test(ua) && !!self.fetch) {\n\t\t\t\t\tif (typeof s.xhr_dlMultistream === \"undefined\") {\n\t\t\t\t\t\t// chrome more precise with 5 streams\n\t\t\t\t\t\tsettings.xhr_dlMultistream = 5;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (/Edge.(\\d+\\.\\d+)/i.test(ua)) {\n\t\t\t\t//Edge 15 introduced a bug that causes onprogress events to not get fired, we have to use the \"small chunks\" workaround that reduces accuracy\n\t\t\t\tsettings.forceIE11Workaround = true;\n\t\t\t}\n\t\t\tif (/PlayStation 4.(\\d+\\.\\d+)/i.test(ua)) {\n\t\t\t\t//PS4 browser has the same bug as IE11/Edge\n\t\t\t\tsettings.forceIE11Workaround = true;\n\t\t\t}\n\t\t\tif (/Chrome.(\\d+)/i.test(ua) && /Android|iPhone|iPad|iPod|Windows Phone/i.test(ua)) {\n\t\t\t\t//cheap af\n\t\t\t\t//Chrome mobile introduced a limitation somewhere around version 65, we have to limit XHR upload size to 4 megabytes\n\t\t\t\tsettings.xhr_ul_blob_megabytes = 4;\n\t\t\t}\n\t\t\tif (/^((?!chrome|android|crios|fxios).)*safari/i.test(ua)) {\n\t\t\t\t//Safari also needs the IE11 workaround but only for the MPOT version\n\t\t\t\tsettings.forceIE11Workaround = true;\n\t\t\t}\n\t\t\t//telemetry_level has to be parsed and not just copied\n\t\t\tif (typeof s.telemetry_level !== \"undefined\") settings.telemetry_level = s.telemetry_level === \"basic\" ? 1 : s.telemetry_level === \"full\" ? 2 : s.telemetry_level === \"debug\" ? 3 : 0; // telemetry level\n\t\t\t//transform test_order to uppercase, just in case\n\t\t\tsettings.test_order = settings.test_order.toUpperCase();\n\t\t} catch (e) {\n\t\t\ttwarn(\"Possible error in custom test settings. Some settings might not have been applied. Exception: \" + e);\n\t\t}\n\t\t// run the tests\n\t\ttverb(JSON.stringify(settings));\n\t\ttest_pointer = 0;\n\t\tvar iRun = false,\n\t\t\tdRun = false,\n\t\t\tuRun = false,\n\t\t\tpRun = false;\n\t\tvar runNextTest = function() {\n\t\t\tif (testState == 5) return;\n\t\t\tif (test_pointer >= settings.test_order.length) {\n\t\t\t\t//test is finished\n\t\t\t\tif (settings.telemetry_level > 0)\n\t\t\t\t\tsendTelemetry(function(id) {\n\t\t\t\t\t\ttestState = 4;\n\t\t\t\t\t\tif (id != null) testId = id;\n\t\t\t\t\t});\n\t\t\t\telse testState = 4;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tswitch (settings.test_order.charAt(test_pointer)) {\n\t\t\t\tcase \"I\":\n\t\t\t\t\t{\n\t\t\t\t\t\ttest_pointer++;\n\t\t\t\t\t\tif (iRun) {\n\t\t\t\t\t\t\trunNextTest();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else iRun = true;\n\t\t\t\t\t\tgetIp(runNextTest);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"D\":\n\t\t\t\t\t{\n\t\t\t\t\t\ttest_pointer++;\n\t\t\t\t\t\tif (dRun) {\n\t\t\t\t\t\t\trunNextTest();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else dRun = true;\n\t\t\t\t\t\ttestState = 1;\n\t\t\t\t\t\tdlTest(runNextTest);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"U\":\n\t\t\t\t\t{\n\t\t\t\t\t\ttest_pointer++;\n\t\t\t\t\t\tif (uRun) {\n\t\t\t\t\t\t\trunNextTest();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else uRun = true;\n\t\t\t\t\t\ttestState = 3;\n\t\t\t\t\t\tulTest(runNextTest);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"P\":\n\t\t\t\t\t{\n\t\t\t\t\t\ttest_pointer++;\n\t\t\t\t\t\tif (pRun) {\n\t\t\t\t\t\t\trunNextTest();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else pRun = true;\n\t\t\t\t\t\ttestState = 2;\n\t\t\t\t\t\tpingTest(runNextTest);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"_\":\n\t\t\t\t\t{\n\t\t\t\t\t\ttest_pointer++;\n\t\t\t\t\t\tsetTimeout(runNextTest, 1000);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\ttest_pointer++;\n\t\t\t}\n\t\t};\n\t\trunNextTest();\n\t}\n\tif (params[0] === \"abort\") {\n\t\t// abort command\n        if (testState >= 4) return;\n\t\ttlog(\"manually aborted\");\n\t\tclearRequests(); // stop all xhr activity\n\t\trunNextTest = null;\n\t\tif (interval) clearInterval(interval); // clear timer if present\n\t\tif (settings.telemetry_level > 1) sendTelemetry(function() {});\n\t\ttestState = 5; //set test as aborted\n\t\tdlStatus = \"\";\n\t\tulStatus = \"\";\n\t\tpingStatus = \"\";\n\t\tjitterStatus = \"\";\n        clientIp = \"\";\n\t\tdlProgress = 0;\n\t\tulProgress = 0;\n\t\tpingProgress = 0;\n\t}\n});\n// stops all XHR activity, aggressively\nfunction clearRequests() {\n\ttverb(\"stopping pending XHRs\");\n\tif (xhr) {\n\t\tfor (var i = 0; i < xhr.length; i++) {\n\t\t\ttry {\n\t\t\t\txhr[i].onprogress = null;\n\t\t\t\txhr[i].onload = null;\n\t\t\t\txhr[i].onerror = null;\n\t\t\t} catch (e) {}\n\t\t\ttry {\n\t\t\t\txhr[i].upload.onprogress = null;\n\t\t\t\txhr[i].upload.onload = null;\n\t\t\t\txhr[i].upload.onerror = null;\n\t\t\t} catch (e) {}\n\t\t\ttry {\n\t\t\t\txhr[i].abort();\n\t\t\t} catch (e) {}\n\t\t\ttry {\n\t\t\t\tdelete xhr[i];\n\t\t\t} catch (e) {}\n\t\t}\n\t\txhr = null;\n\t}\n}\n// gets client's IP using url_getIp, then calls the done function\nvar ipCalled = false; // used to prevent multiple accidental calls to getIp\nvar ispInfo = \"\"; //used for telemetry\nfunction getIp(done) {\n\ttverb(\"getIp\");\n\tif (ipCalled) return;\n\telse ipCalled = true; // getIp already called?\n\tvar startT = new Date().getTime();\n\txhr = new XMLHttpRequest();\n\txhr.onload = function() {\n\t\ttlog(\"IP: \" + xhr.responseText + \", took \" + (new Date().getTime() - startT) + \"ms\");\n\t\ttry {\n\t\t\tvar data = JSON.parse(xhr.responseText);\n\t\t\tclientIp = data.processedString;\n\t\t\tispInfo = data.rawIspInfo;\n\t\t} catch (e) {\n\t\t\tclientIp = xhr.responseText;\n\t\t\tispInfo = \"\";\n\t\t}\n\t\tdone();\n\t};\n\txhr.onerror = function() {\n\t\ttlog(\"getIp failed, took \" + (new Date().getTime() - startT) + \"ms\");\n\t\tdone();\n\t};\n\txhr.open(\"GET\", settings.url_getIp + url_sep(settings.url_getIp) + (settings.mpot ? \"cors=true&\" : \"\") + (settings.getIp_ispInfo ? \"isp=true\" + (settings.getIp_ispInfo_distance ? \"&distance=\" + settings.getIp_ispInfo_distance + \"&\" : \"&\") : \"&\") + \"r=\" + Math.random(), true);\n\txhr.send();\n}\n// download test, calls done function when it's over\nvar dlCalled = false; // used to prevent multiple accidental calls to dlTest\nfunction dlTest(done) {\n\ttverb(\"dlTest\");\n\tif (dlCalled) return;\n\telse dlCalled = true; // dlTest already called?\n\tvar totLoaded = 0.0, // total number of loaded bytes\n\t\tstartT = new Date().getTime(), // timestamp when test was started\n\t\tbonusT = 0, //how many milliseconds the test has been shortened by (higher on faster connections)\n\t\tgraceTimeDone = false, //set to true after the grace time is past\n\t\tfailed = false; // set to true if a stream fails\n\txhr = [];\n\t// function to create a download stream. streams are slightly delayed so that they will not end at the same time\n\tvar testStream = function(i, delay) {\n\t\tsetTimeout(\n\t\t\tfunction() {\n\t\t\t\tif (testState !== 1) return; // delayed stream ended up starting after the end of the download test\n\t\t\t\ttverb(\"dl test stream started \" + i + \" \" + delay);\n\t\t\t\tvar prevLoaded = 0; // number of bytes loaded last time onprogress was called\n\t\t\t\tvar x = new XMLHttpRequest();\n\t\t\t\txhr[i] = x;\n\t\t\t\txhr[i].onprogress = function(event) {\n\t\t\t\t\ttverb(\"dl stream progress event \" + i + \" \" + event.loaded);\n\t\t\t\t\tif (testState !== 1) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tx.abort();\n\t\t\t\t\t\t} catch (e) {}\n\t\t\t\t\t} // just in case this XHR is still running after the download test\n\t\t\t\t\t// progress event, add number of new loaded bytes to totLoaded\n\t\t\t\t\tvar loadDiff = event.loaded <= 0 ? 0 : event.loaded - prevLoaded;\n\t\t\t\t\tif (isNaN(loadDiff) || !isFinite(loadDiff) || loadDiff < 0) return; // just in case\n\t\t\t\t\ttotLoaded += loadDiff;\n\t\t\t\t\tprevLoaded = event.loaded;\n\t\t\t\t}.bind(this);\n\t\t\t\txhr[i].onload = function() {\n\t\t\t\t\t// the large file has been loaded entirely, start again\n\t\t\t\t\ttverb(\"dl stream finished \" + i);\n\t\t\t\t\ttry {\n\t\t\t\t\t\txhr[i].abort();\n\t\t\t\t\t} catch (e) {} // reset the stream data to empty ram\n\t\t\t\t\ttestStream(i, 0);\n\t\t\t\t}.bind(this);\n\t\t\t\txhr[i].onerror = function() {\n\t\t\t\t\t// error\n\t\t\t\t\ttverb(\"dl stream failed \" + i);\n\t\t\t\t\tif (settings.xhr_ignoreErrors === 0) failed = true; //abort\n\t\t\t\t\ttry {\n\t\t\t\t\t\txhr[i].abort();\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t\tdelete xhr[i];\n\t\t\t\t\tif (settings.xhr_ignoreErrors === 1) testStream(i, 0); //restart stream\n\t\t\t\t}.bind(this);\n\t\t\t\t// send xhr\n\t\t\t\ttry {\n\t\t\t\t\tif (settings.xhr_dlUseBlob) xhr[i].responseType = \"blob\";\n\t\t\t\t\telse xhr[i].responseType = \"arraybuffer\";\n\t\t\t\t} catch (e) {}\n\t\t\t\txhr[i].open(\"GET\", settings.url_dl + url_sep(settings.url_dl) + (settings.mpot ? \"cors=true&\" : \"\") + \"r=\" + Math.random() + \"&ckSize=\" + settings.garbagePhp_chunkSize, true); // random string to prevent caching\n\t\t\t\txhr[i].send();\n\t\t\t}.bind(this),\n\t\t\t1 + delay\n\t\t);\n\t}.bind(this);\n\t// open streams\n\tfor (var i = 0; i < settings.xhr_dlMultistream; i++) {\n\t\ttestStream(i, settings.xhr_multistreamDelay * i);\n\t}\n\t// every 200ms, update dlStatus\n\tinterval = setInterval(\n\t\tfunction() {\n\t\t\ttverb(\"DL: \" + dlStatus + (graceTimeDone ? \"\" : \" (in grace time)\"));\n\t\t\tvar t = new Date().getTime() - startT;\n\t\t\tif (graceTimeDone) dlProgress = (t + bonusT) / (settings.time_dl_max * 1000);\n\t\t\tif (t < 200) return;\n\t\t\tif (!graceTimeDone) {\n\t\t\t\tif (t > 1000 * settings.time_dlGraceTime) {\n\t\t\t\t\tif (totLoaded > 0) {\n\t\t\t\t\t\t// if the connection is so slow that we didn't get a single chunk yet, do not reset\n\t\t\t\t\t\tstartT = new Date().getTime();\n\t\t\t\t\t\tbonusT = 0;\n\t\t\t\t\t\ttotLoaded = 0.0;\n\t\t\t\t\t}\n\t\t\t\t\tgraceTimeDone = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar speed = totLoaded / (t / 1000.0);\n\t\t\t\tif (settings.time_auto) {\n\t\t\t\t\t//decide how much to shorten the test. Every 200ms, the test is shortened by the bonusT calculated here\n\t\t\t\t\tvar bonus = (5.0 * speed) / 100000;\n\t\t\t\t\tbonusT += bonus > 400 ? 400 : bonus;\n\t\t\t\t}\n\t\t\t\t//update status\n\t\t\t\tdlStatus = ((speed * 8 * settings.overheadCompensationFactor) / (settings.useMebibits ? 1048576 : 1000000)).toFixed(2); // speed is multiplied by 8 to go from bytes to bits, overhead compensation is applied, then everything is divided by 1048576 or 1000000 to go to megabits/mebibits\n\t\t\t\tif ((t + bonusT) / 1000.0 > settings.time_dl_max || failed) {\n\t\t\t\t\t// test is over, stop streams and timer\n\t\t\t\t\tif (failed || isNaN(dlStatus)) dlStatus = \"Fail\";\n\t\t\t\t\tclearRequests();\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdlProgress = 1;\n\t\t\t\t\ttlog(\"dlTest: \" + dlStatus + \", took \" + (new Date().getTime() - startT) + \"ms\");\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t}\n\t\t}.bind(this),\n\t\t200\n\t);\n}\n// upload test, calls done function whent it's over\nvar ulCalled = false; // used to prevent multiple accidental calls to ulTest\nfunction ulTest(done) {\n\ttverb(\"ulTest\");\n\tif (ulCalled) return;\n\telse ulCalled = true; // ulTest already called?\n\t// garbage data for upload test\n\tvar r = new ArrayBuffer(1048576);\n\tvar maxInt = Math.pow(2, 32) - 1;\n\ttry {\n\t\tr = new Uint32Array(r);\n\t\tfor (var i = 0; i < r.length; i++) r[i] = Math.random() * maxInt;\n\t} catch (e) {}\n\tvar req = [];\n\tvar reqsmall = [];\n\tfor (var i = 0; i < settings.xhr_ul_blob_megabytes; i++) req.push(r);\n\treq = new Blob(req);\n\tr = new ArrayBuffer(262144);\n\ttry {\n\t\tr = new Uint32Array(r);\n\t\tfor (var i = 0; i < r.length; i++) r[i] = Math.random() * maxInt;\n\t} catch (e) {}\n\treqsmall.push(r);\n\treqsmall = new Blob(reqsmall);\n\tvar testFunction = function() {\n\t\tvar totLoaded = 0.0, // total number of transmitted bytes\n\t\t\tstartT = new Date().getTime(), // timestamp when test was started\n\t\t\tbonusT = 0, //how many milliseconds the test has been shortened by (higher on faster connections)\n\t\t\tgraceTimeDone = false, //set to true after the grace time is past\n\t\t\tfailed = false; // set to true if a stream fails\n\t\txhr = [];\n\t\t// function to create an upload stream. streams are slightly delayed so that they will not end at the same time\n\t\tvar testStream = function(i, delay) {\n\t\t\tsetTimeout(\n\t\t\t\tfunction() {\n\t\t\t\t\tif (testState !== 3) return; // delayed stream ended up starting after the end of the upload test\n\t\t\t\t\ttverb(\"ul test stream started \" + i + \" \" + delay);\n\t\t\t\t\tvar prevLoaded = 0; // number of bytes transmitted last time onprogress was called\n\t\t\t\t\tvar x = new XMLHttpRequest();\n\t\t\t\t\txhr[i] = x;\n\t\t\t\t\tvar ie11workaround;\n\t\t\t\t\tif (settings.forceIE11Workaround) ie11workaround = true;\n\t\t\t\t\telse {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\txhr[i].upload.onprogress;\n\t\t\t\t\t\t\tie11workaround = false;\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tie11workaround = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (ie11workaround) {\n\t\t\t\t\t\t// IE11 workarond: xhr.upload does not work properly, therefore we send a bunch of small 256k requests and use the onload event as progress. This is not precise, especially on fast connections\n\t\t\t\t\t\txhr[i].onload = xhr[i].onerror = function() {\n\t\t\t\t\t\t\ttverb(\"ul stream progress event (ie11wa)\");\n\t\t\t\t\t\t\ttotLoaded += reqsmall.size;\n\t\t\t\t\t\t\ttestStream(i, 0);\n\t\t\t\t\t\t};\n\t\t\t\t\t\txhr[i].open(\"POST\", settings.url_ul + url_sep(settings.url_ul) + (settings.mpot ? \"cors=true&\" : \"\") + \"r=\" + Math.random(), true); // random string to prevent caching\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\txhr[i].setRequestHeader(\"Content-Encoding\", \"identity\"); // disable compression (some browsers may refuse it, but data is incompressible anyway)\n\t\t\t\t\t\t} catch (e) {}\n\t\t\t\t\t\t//No Content-Type header in MPOT branch because it triggers bugs in some browsers\n\t\t\t\t\t\txhr[i].send(reqsmall);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// REGULAR version, no workaround\n\t\t\t\t\t\txhr[i].upload.onprogress = function(event) {\n\t\t\t\t\t\t\ttverb(\"ul stream progress event \" + i + \" \" + event.loaded);\n\t\t\t\t\t\t\tif (testState !== 3) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tx.abort();\n\t\t\t\t\t\t\t\t} catch (e) {}\n\t\t\t\t\t\t\t} // just in case this XHR is still running after the upload test\n\t\t\t\t\t\t\t// progress event, add number of new loaded bytes to totLoaded\n\t\t\t\t\t\t\tvar loadDiff = event.loaded <= 0 ? 0 : event.loaded - prevLoaded;\n\t\t\t\t\t\t\tif (isNaN(loadDiff) || !isFinite(loadDiff) || loadDiff < 0) return; // just in case\n\t\t\t\t\t\t\ttotLoaded += loadDiff;\n\t\t\t\t\t\t\tprevLoaded = event.loaded;\n\t\t\t\t\t\t}.bind(this);\n\t\t\t\t\t\txhr[i].upload.onload = function() {\n\t\t\t\t\t\t\t// this stream sent all the garbage data, start again\n\t\t\t\t\t\t\ttverb(\"ul stream finished \" + i);\n\t\t\t\t\t\t\ttestStream(i, 0);\n\t\t\t\t\t\t}.bind(this);\n\t\t\t\t\t\txhr[i].upload.onerror = function() {\n\t\t\t\t\t\t\ttverb(\"ul stream failed \" + i);\n\t\t\t\t\t\t\tif (settings.xhr_ignoreErrors === 0) failed = true; //abort\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\txhr[i].abort();\n\t\t\t\t\t\t\t} catch (e) {}\n\t\t\t\t\t\t\tdelete xhr[i];\n\t\t\t\t\t\t\tif (settings.xhr_ignoreErrors === 1) testStream(i, 0); //restart stream\n\t\t\t\t\t\t}.bind(this);\n\t\t\t\t\t\t// send xhr\n\t\t\t\t\t\txhr[i].open(\"POST\", settings.url_ul + url_sep(settings.url_ul) + (settings.mpot ? \"cors=true&\" : \"\") + \"r=\" + Math.random(), true); // random string to prevent caching\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\txhr[i].setRequestHeader(\"Content-Encoding\", \"identity\"); // disable compression (some browsers may refuse it, but data is incompressible anyway)\n\t\t\t\t\t\t} catch (e) {}\n\t\t\t\t\t\t//No Content-Type header in MPOT branch because it triggers bugs in some browsers\n\t\t\t\t\t\txhr[i].send(req);\n\t\t\t\t\t}\n\t\t\t\t}.bind(this),\n\t\t\t\tdelay\n\t\t\t);\n\t\t}.bind(this);\n\t\t// open streams\n\t\tfor (var i = 0; i < settings.xhr_ulMultistream; i++) {\n\t\t\ttestStream(i, settings.xhr_multistreamDelay * i);\n\t\t}\n\t\t// every 200ms, update ulStatus\n\t\tinterval = setInterval(\n\t\t\tfunction() {\n\t\t\t\ttverb(\"UL: \" + ulStatus + (graceTimeDone ? \"\" : \" (in grace time)\"));\n\t\t\t\tvar t = new Date().getTime() - startT;\n\t\t\t\tif (graceTimeDone) ulProgress = (t + bonusT) / (settings.time_ul_max * 1000);\n\t\t\t\tif (t < 200) return;\n\t\t\t\tif (!graceTimeDone) {\n\t\t\t\t\tif (t > 1000 * settings.time_ulGraceTime) {\n\t\t\t\t\t\tif (totLoaded > 0) {\n\t\t\t\t\t\t\t// if the connection is so slow that we didn't get a single chunk yet, do not reset\n\t\t\t\t\t\t\tstartT = new Date().getTime();\n\t\t\t\t\t\t\tbonusT = 0;\n\t\t\t\t\t\t\ttotLoaded = 0.0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgraceTimeDone = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar speed = totLoaded / (t / 1000.0);\n\t\t\t\t\tif (settings.time_auto) {\n\t\t\t\t\t\t//decide how much to shorten the test. Every 200ms, the test is shortened by the bonusT calculated here\n\t\t\t\t\t\tvar bonus = (5.0 * speed) / 100000;\n\t\t\t\t\t\tbonusT += bonus > 400 ? 400 : bonus;\n\t\t\t\t\t}\n\t\t\t\t\t//update status\n\t\t\t\t\tulStatus = ((speed * 8 * settings.overheadCompensationFactor) / (settings.useMebibits ? 1048576 : 1000000)).toFixed(2); // speed is multiplied by 8 to go from bytes to bits, overhead compensation is applied, then everything is divided by 1048576 or 1000000 to go to megabits/mebibits\n\t\t\t\t\tif ((t + bonusT) / 1000.0 > settings.time_ul_max || failed) {\n\t\t\t\t\t\t// test is over, stop streams and timer\n\t\t\t\t\t\tif (failed || isNaN(ulStatus)) ulStatus = \"Fail\";\n\t\t\t\t\t\tclearRequests();\n\t\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\t\tulProgress = 1;\n\t\t\t\t\t\ttlog(\"ulTest: \" + ulStatus + \", took \" + (new Date().getTime() - startT) + \"ms\");\n\t\t\t\t\t\tdone();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.bind(this),\n\t\t\t200\n\t\t);\n\t}.bind(this);\n\tif (settings.mpot) {\n\t\ttverb(\"Sending POST request before performing upload test\");\n\t\txhr = [];\n\t\txhr[0] = new XMLHttpRequest();\n\t\txhr[0].onload = xhr[0].onerror = function() {\n\t\t\ttverb(\"POST request sent, starting upload test\");\n\t\t\ttestFunction();\n\t\t}.bind(this);\n\t\txhr[0].open(\"POST\", settings.url_ul);\n\t\txhr[0].send();\n\t} else testFunction();\n}\n// ping+jitter test, function done is called when it's over\nvar ptCalled = false; // used to prevent multiple accidental calls to pingTest\nfunction pingTest(done) {\n\ttverb(\"pingTest\");\n\tif (ptCalled) return;\n\telse ptCalled = true; // pingTest already called?\n\tvar startT = new Date().getTime(); //when the test was started\n\tvar prevT = null; // last time a pong was received\n\tvar ping = 0.0; // current ping value\n\tvar jitter = 0.0; // current jitter value\n\tvar i = 0; // counter of pongs received\n\tvar prevInstspd = 0; // last ping time, used for jitter calculation\n\txhr = [];\n\t// ping function\n\tvar doPing = function() {\n\t\ttverb(\"ping\");\n\t\tpingProgress = i / settings.count_ping;\n\t\tprevT = new Date().getTime();\n\t\txhr[0] = new XMLHttpRequest();\n\t\txhr[0].onload = function() {\n\t\t\t// pong\n\t\t\ttverb(\"pong\");\n\t\t\tif (i === 0) {\n\t\t\t\tprevT = new Date().getTime(); // first pong\n\t\t\t} else {\n\t\t\t\tvar instspd = new Date().getTime() - prevT;\n\t\t\t\tif (settings.ping_allowPerformanceApi) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t//try to get accurate performance timing using performance api\n\t\t\t\t\t\tvar p = performance.getEntries();\n\t\t\t\t\t\tp = p[p.length - 1];\n\t\t\t\t\t\tvar d = p.responseStart - p.requestStart;\n\t\t\t\t\t\tif (d <= 0) d = p.duration;\n\t\t\t\t\t\tif (d > 0 && d < instspd) instspd = d;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t//if not possible, keep the estimate\n\t\t\t\t\t\ttverb(\"Performance API not supported, using estimate\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//noticed that some browsers randomly have 0ms ping\n\t\t\t\tif (instspd < 1) instspd = prevInstspd;\n\t\t\t\tif (instspd < 1) instspd = 1;\n\t\t\t\tvar instjitter = Math.abs(instspd - prevInstspd);\n\t\t\t\tif (i === 1) ping = instspd;\n\t\t\t\t/* first ping, can't tell jitter yet*/ else {\n\t\t\t\t\tif (instspd < ping) ping = instspd; // update ping, if the instant ping is lower\n\t\t\t\t\tif (i === 2) jitter = instjitter;\n\t\t\t\t\t//discard the first jitter measurement because it might be much higher than it should be\n\t\t\t\t\telse jitter = instjitter > jitter ? jitter * 0.3 + instjitter * 0.7 : jitter * 0.8 + instjitter * 0.2; // update jitter, weighted average. spikes in ping values are given more weight.\n\t\t\t\t}\n\t\t\t\tprevInstspd = instspd;\n\t\t\t}\n\t\t\tpingStatus = ping.toFixed(2);\n\t\t\tjitterStatus = jitter.toFixed(2);\n\t\t\ti++;\n\t\t\ttverb(\"ping: \" + pingStatus + \" jitter: \" + jitterStatus);\n\t\t\tif (i < settings.count_ping) doPing();\n\t\t\telse {\n\t\t\t\t// more pings to do?\n\t\t\t\tpingProgress = 1;\n\t\t\t\ttlog(\"ping: \" + pingStatus + \" jitter: \" + jitterStatus + \", took \" + (new Date().getTime() - startT) + \"ms\");\n\t\t\t\tdone();\n\t\t\t}\n\t\t}.bind(this);\n\t\txhr[0].onerror = function() {\n\t\t\t// a ping failed, cancel test\n\t\t\ttverb(\"ping failed\");\n\t\t\tif (settings.xhr_ignoreErrors === 0) {\n\t\t\t\t//abort\n\t\t\t\tpingStatus = \"Fail\";\n\t\t\t\tjitterStatus = \"Fail\";\n\t\t\t\tclearRequests();\n\t\t\t\ttlog(\"ping test failed, took \" + (new Date().getTime() - startT) + \"ms\");\n\t\t\t\tpingProgress = 1;\n\t\t\t\tdone();\n\t\t\t}\n\t\t\tif (settings.xhr_ignoreErrors === 1) doPing(); //retry ping\n\t\t\tif (settings.xhr_ignoreErrors === 2) {\n\t\t\t\t//ignore failed ping\n\t\t\t\ti++;\n\t\t\t\tif (i < settings.count_ping) doPing();\n\t\t\t\telse {\n\t\t\t\t\t// more pings to do?\n\t\t\t\t\tpingProgress = 1;\n\t\t\t\t\ttlog(\"ping: \" + pingStatus + \" jitter: \" + jitterStatus + \", took \" + (new Date().getTime() - startT) + \"ms\");\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t}\n\t\t}.bind(this);\n\t\t// send xhr\n\t\txhr[0].open(\"GET\", settings.url_ping + url_sep(settings.url_ping) + (settings.mpot ? \"cors=true&\" : \"\") + \"r=\" + Math.random(), true); // random string to prevent caching\n\t\txhr[0].send();\n\t}.bind(this);\n\tdoPing(); // start first ping\n}\n// telemetry\nfunction sendTelemetry(done) {\n\tif (settings.telemetry_level < 1) return;\n\txhr = new XMLHttpRequest();\n\txhr.onload = function() {\n\t\ttry {\n\t\t\tvar parts = xhr.responseText.split(\" \");\n\t\t\tif (parts[0] == \"id\") {\n\t\t\t\ttry {\n\t\t\t\t\tvar id = parts[1];\n\t\t\t\t\tdone(id);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdone(null);\n\t\t\t\t}\n\t\t\t} else done(null);\n\t\t} catch (e) {\n\t\t\tdone(null);\n\t\t}\n\t};\n\txhr.onerror = function() {\n\t\tconsole.log(\"TELEMETRY ERROR \" + xhr.status);\n\t\tdone(null);\n\t};\n\txhr.open(\"POST\", settings.url_telemetry + url_sep(settings.url_telemetry) + (settings.mpot ? \"cors=true&\" : \"\") + \"r=\" + Math.random(), true);\n\tvar telemetryIspInfo = {\n\t\tprocessedString: clientIp,\n\t\trawIspInfo: typeof ispInfo === \"object\" ? ispInfo : \"\"\n\t};\n\ttry {\n\t\tvar fd = new FormData();\n\t\tfd.append(\"ispinfo\", JSON.stringify(telemetryIspInfo));\n\t\tfd.append(\"dl\", dlStatus);\n\t\tfd.append(\"ul\", ulStatus);\n\t\tfd.append(\"ping\", pingStatus);\n\t\tfd.append(\"jitter\", jitterStatus);\n\t\tfd.append(\"log\", settings.telemetry_level > 1 ? log : \"\");\n\t\tfd.append(\"extra\", settings.telemetry_extra);\n\t\txhr.send(fd);\n\t} catch (ex) {\n\t\tvar postData = \"extra=\" + encodeURIComponent(settings.telemetry_extra) + \"&ispinfo=\" + encodeURIComponent(JSON.stringify(telemetryIspInfo)) + \"&dl=\" + encodeURIComponent(dlStatus) + \"&ul=\" + encodeURIComponent(ulStatus) + \"&ping=\" + encodeURIComponent(pingStatus) + \"&jitter=\" + encodeURIComponent(jitterStatus) + \"&log=\" + encodeURIComponent(settings.telemetry_level > 1 ? log : \"\");\n\t\txhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\t\txhr.send(postData);\n\t}\n}\n"
        }
      ]
    }
  ]
}