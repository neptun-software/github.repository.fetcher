{
  "metadata": {
    "timestamp": 1736711931173,
    "page": 344,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Bubka/2FAuth",
      "stars": 2440,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1748046875,
          "content": ".git\n.github\n.dockerignore\n.editorconfig\n.env.example\n.gitattributes\n.gitignore\n.styleci.yml\n.travis.yml\nchangelog.md\ndocker/README.md\nDockerfile\nLICENSE\nREADME.md\nwebpack.mix.js\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2509765625,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.{yml,yaml}]\nindent_size = 2\n\n[docker-compose.yml]\nindent_size = 4"
        },
        {
          "name": ".env.example",
          "type": "blob",
          "size": 8.185546875,
          "content": "# You can change the name of the app\n\nAPP_NAME=2FAuth\n\n\n# You can leave this on \"local\". If you change it to production most console commands will ask for extra confirmation.\n# Never set it to \"testing\".\n\nAPP_ENV=local\n\n\n# The timezone for your application, which is used to record dates and times to database. This global setting can be\n# overridden by users via in-app settings for a personalised dates and times display.\n\n# If this setting is changed while the application is already running, existing records in the database won't be updated.\n\nAPP_TIMEZONE=UTC\n\n\n# Set to true if you want to see debug information in error screens.\n\nAPP_DEBUG=false\n\n\n# This should be your email address\n\nSITE_OWNER=mail@example.com\n\n\n# The encryption key for your database and sessions. Keep this very secure.\n# If you generate a new one all existing data must be considered LOST.\n#\n# You can leave this empty if you use `php artisan 2fauth:install`.\n# Otherwise, change it to a string of exactly 32 chars or use command\n# `php artisan key:generate` to generate it.\n\nAPP_KEY=\n\n\n# This variable must match your installation's external address.\n# Webauthn won't work otherwise.\n\nAPP_URL=http://localhost\n\n\n# If you want to serve js assets from a CDN (like https://cdn.example.com),\n# uncomment the following line and set this var with the CDN url.\n# Otherwise, let this line commented.\n\n# ASSET_URL=http://localhost\n\n\n# The domain subdirectory from which you want to serve 2FAuth.\n# This must reflect the path targeted by APP_URL.\n#\n# For example, if you set APP_URL=https://mydomain.org/2fa to access 2FAuth from the '/2fa/' subdirectory\n# you have to set APP_SUBDIRECTORY=2fa\n#\n# Leave blank if you serve 2FAuth from the domain root.\n\nAPP_SUBDIRECTORY=\n\n\n# Turn this to true if you want your app to react like a demo.\n# The Demo mode reset the app content every hours and set a generic demo user.\n\nIS_DEMO_APP=false\n\n\n# The log channel defines where your log entries go to.\n# 'daily' is the default logging mode giving you 7 daily rotated log files in /storage/logs/.\n# Also available are 'errorlog', 'syslog', 'stderr', 'papertrail', 'slack' and a 'stack' channel\n# to combine multiple channels into a single one.\n\nLOG_CHANNEL=daily\n\n\n# Log level. You can set this from least severe to most severe:\n# debug, info, notice, warning, error, critical, alert, emergency\n# If you set it to debug your logs will grow large, and fast. If you set it to emergency probably\n# nothing will get logged, ever.\n\nLOG_LEVEL=notice\n\n\n# If you're looking for performance improvements, you could install memcached.\n\nCACHE_DRIVER=file\nSESSION_DRIVER=file\n\n\n#### Database config & credentials ####\n\n# Supported values for DB_CONNECTION: mysql|pgsql|sqlsrv|sqlite\n# mysql => MySQL\n# pgsql => PostGreSQL\n# sqlsrv => SQL server\n# sqlite => SQLite\n\n# Example for a MySQL database connection\n#\n# DB_CONNECTION=mysql\n# DB_DATABASE=my_2fauth_DB_name\n# DB_HOST=127.0.0.1\n# DB_PORT=3306\n# DB_USERNAME=my_2fauth_db_user\n# DB_PASSWORD=My_d8_S3cr3t\n\n# Example for SQLite (linux)\n#\n# DB_CONNECTION=sqlite\n# DB_DATABASE=\"path/to/your/database.sqlite\"\n\n# Example for SQLite (windows)\n#\n# DB_CONNECTION=sqlite\n# DB_DATABASE=\"C:\\\\path\\\\to\\\\your\\\\database.sqlite\"\n\nDB_CONNECTION=\nDB_DATABASE=\nDB_HOST=\nDB_PORT=\nDB_USERNAME=\nDB_PASSWORD=\n\n# The absolute path to the root CA bundle if you're connecting to the MySQL database via SSL.\n\nMYSQL_ATTR_SSL_CA=\n\n\n#### Mail settings ####\n\n# Refer your email provider documentation to configure your mail settings\n# Set a value for every available setting to avoid issue\n\nMAIL_MAILER=log\nMAIL_HOST=smtp.mailtrap.io\nMAIL_PORT=2525\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\nMAIL_FROM_NAME=null\nMAIL_FROM_ADDRESS=null\n\n\n# SSL peer verification.\n# Set this to false to disable the SSL certificate validation.\n#\n# WARNING\n# Disabling peer verification can result in a major security flaw.\n# Change it only if you know what you're doing.\n\nMAIL_VERIFY_SSL_PEER=true\n\n\n#### API settings ####\n\n# The maximum number of API calls in a minute from the same IP.\n# Once reached, all requests from this IP will be rejected until the minute has elapsed.\n#\n# Set to null to disable the API throttling.\n\nTHROTTLE_API=60\n\n\n#### Authentication settings ####\n\n# The number of times per minute a user can fail to log in before being locked out.\n# Once reached, all login attempts will be rejected until the minute has elapsed.\n#\n# This setting applies to both email/password and webauthn login attemps.\n\nLOGIN_THROTTLE=5\n\n# The default authentication guard\n#\n# Supported:\n#   'web-guard' : The Laravel built-in auth system (default if nulled)\n#   'reverse-proxy-guard' : When 2FAuth is deployed behind a reverse-proxy that handle authentication\n#\n# WARNING\n# When using 'reverse-proxy-guard' 2FAuth only look for the dedicated headers and skip all other built-in\n# authentication checks. That means your proxy is fully responsible of the authentication process, 2FAuth will\n# trust him as long as headers are presents.\n\nAUTHENTICATION_GUARD=web-guard\n\n\n# Authentication log retention time, in days.\n# Log entries older than that are automatically deleted.\n\nAUTHENTICATION_LOG_RETENTION=365\n\n\n# Name of the HTTP headers sent by the reverse proxy that identifies the authenticated user at proxy level.\n# Check your proxy documentation to find out how these headers are named (i.e 'REMOTE_USER', 'REMOTE_EMAIL', etc...)\n# (only relevant when AUTHENTICATION_GUARD is set to 'reverse-proxy-guard')\n\nAUTH_PROXY_HEADER_FOR_USER=null\nAUTH_PROXY_HEADER_FOR_EMAIL=null\n\n\n# Custom logout URL to open when using an auth proxy.\n\nPROXY_LOGOUT_URL=null\n\n\n#### WebAuthn settings ####\n\n# Relying Party name, aka the name of the application.\n# If blank, defaults to APP_NAME. Do not set to null.\n\nWEBAUTHN_NAME=2FAuth\n\n\n# Relying Party ID, should equal the site domain (i.e 2fauth.example.com).\n# If null, the device will fill it internally (recommended)\n# See https://webauthn-doc.spomky-labs.com/prerequisites/the-relying-party#how-to-determine-the-relying-party-id\n\nWEBAUTHN_ID=null\n\n# [DEPRECATED]\n# Optional image data in BASE64 (128 bytes maximum) or an image url\n# See https://webauthn-doc.spomky-labs.com/prerequisites/the-relying-party#relying-party-icon\n\n# WEBAUTHN_ICON=null\n# [/DEPRECATED]\n\n\n# Use this setting to control how user verification behave during the\n# WebAuthn authentication flow.\n#\n# Most authenticators and smartphones will ask the user to actively verify\n# themselves for log in. For example, through a touch plus pin code,\n# password entry, or biometric recognition (e.g., presenting a fingerprint).\n# The intent is to distinguish one user from any other.\n#\n# Supported:\n#   'required': Will ALWAYS ask for user verification\n#   'preferred' (default) : Will ask for user verification IF POSSIBLE\n#   'discouraged' : Will NOT ask for user verification (for example, to minimize disruption to the user interaction flow)\n\nWEBAUTHN_USER_VERIFICATION=preferred\n\n\n#### SSO settings (for Socialite) ####\n\n# Uncomment and complete lines for the OAuth providers you want to enable.\n\n# OPENID_AUTHORIZE_URL=\n# OPENID_TOKEN_URL=\n# OPENID_USERINFO_URL=\n# OPENID_CLIENT_ID=\n# OPENID_CLIENT_SECRET=\n\n# GITHUB_CLIENT_ID=\n# GITHUB_CLIENT_SECRET=\n\n\n#### Proxy settings ####\n\n# Use this setting to declare trusted proxied.\n# Supported:\n#   '*': to trust any proxy\n#   A comma separated IP list: The list of proxies IP to trust\n\nTRUSTED_PROXIES=null\n\n\n# Proxy for outgoing requests like new releases detection or logo fetching.\n# You can provide a proxy URL that contains a scheme, username, and password.\n# For example, \"http://username:password@192.168.16.1:10\".\n\nPROXY_FOR_OUTGOING_REQUESTS=null\n\n\n# Set this to true to enable Content-Security-Policy (CSP).\n# CSP helps to prevent or minimize the risk of certain types of security threats.\n# This is mainly used as a defense against cross-site scripting (XSS) attacks, in which\n# an attacker is able to inject malicious code into the web app\n\nCONTENT_SECURITY_POLICY=true\n\n\n# Leave the following configuration vars as is.\n# Unless you like to tinker and know what you're doing.\n\nBROADCAST_DRIVER=log\nQUEUE_DRIVER=sync\n\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\nPUSHER_APP_ID=\nPUSHER_APP_KEY=\nPUSHER_APP_SECRET=\nPUSHER_APP_CLUSTER=mt1\n\nVITE_PUSHER_APP_KEY=\"${PUSHER_APP_KEY}\"\nVITE_PUSHER_APP_CLUSTER=\"${PUSHER_APP_CLUSTER}\"\n\nMIX_ENV=local\n"
        },
        {
          "name": ".env.testing",
          "type": "blob",
          "size": 1.0869140625,
          "content": "APP_NAME=TestApp\nAPP_ENV=testing\nAPP_KEY=base64:pdjaSqs7dDu8SdYCQzsayBAqeMC+85fmo3bpeBCCT94=\nAPP_DEBUG=true\nAPP_URL=http://localhost\n\nCACHE_STORE=array\n\nWEBAUTHN_NAME=TestApp\nWEBAUTHN_ID=null\nWEBAUTHN_USER_VERIFICATION=discouraged\n\nAUTHENTICATION_GUARD=web-guard\n\nAUTH_PROXY_HEADER_FOR_USER=REMOTE_USER\nAUTH_PROXY_HEADER_FOR_EMAIL=REMOTE_USER_EMAIL\n\nGITHUB_CLIENT_ID=testing\nGITHUB_CLIENT_SECRET=testing\n\nLOG_CHANNEL=stack\n\nDB_CONNECTION=testing\nDB_DATABASE=:memory:\n\n# DB_CONNECTION=mysql\n# DB_HOST=localhost\n# DB_PORT=3306\n# DB_DATABASE=2fauth_test\n# DB_USERNAME=travis\n# DB_PASSWORD=\n\nBCRYPT_ROUNDS=4\n\nBROADCAST_DRIVER=log\nCACHE_DRIVER=array\nQUEUE_CONNECTION=sync\nSESSION_DRIVER=array\n\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\nMAIL_MAILER=array\nMAIL_HOST=smtp.mailtrap.io\nMAIL_PORT=2525\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\n\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_DEFAULT_REGION=us-east-1\nAWS_BUCKET=\n\nPUSHER_APP_ID=\nPUSHER_APP_KEY=\nPUSHER_APP_SECRET=\nPUSHER_APP_CLUSTER=mt1\n\nVITE_PUSHER_APP_KEY=\"${PUSHER_APP_KEY}\"\nVITE_PUSHER_APP_CLUSTER=\"${PUSHER_APP_CLUSTER}\"\n"
        },
        {
          "name": ".env.travis",
          "type": "blob",
          "size": 0.2626953125,
          "content": "APP_ENV=testing\nAPP_KEY=\n\nDB_CONNECTION=testing\nDB_DATABASE=:memory:\n\nAUTH_PROXY_HEADER_FOR_USER=REMOTE_USER\nAUTH_PROXY_HEADER_FOR_EMAIL=REMOTE_USER_EMAIL\n\nBCRYPT_ROUNDS=4\n\nBROADCAST_DRIVER=log\nCACHE_DRIVER=array\nSESSION_DRIVER=array\nQUEUE_DRIVER=sync\nMAIL_MAILER=array"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.296875,
          "content": "* text=auto\n\n*.php diff=php\n*.md diff=markdown\n*.html diff=html\n*.css diff=css linguist-vendored\n*.scss linguist-vendored\n*.js linguist-vendored\n*.sh linguist-vendored\n*.blade.php linguist-vendored\nDockerfile linguist-vendored\n\n/.github export-ignore\nCHANGELOG.md export-ignore\n.styleci.yml export-ignore"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.361328125,
          "content": "/.phpunit.cache\n/node_modules\n/public/hot\n/public/storage\n/storage/*.key\n/storage/**/.env*\n/tests/Coverage\n/tests/EndToEnd/**/*.html\n/tests/EndToEnd/**/output.xml\n/tests/EndToEnd/**/*.png\n/vendor\n.env\n.env.backup\n.env.production\n.phpunit.result.cache\nHomestead.json\nHomestead.yaml\nauth.json\nnpm-debug.log\nyarn-error.log\n/.fleet\n/.idea\n/.vscode\n/resources/lang/php_*.json"
        },
        {
          "name": ".styleci.yml",
          "type": "blob",
          "size": 0.158203125,
          "content": "php:\n  preset: laravel\n  disabled:\n    - no_unused_imports\n  finder:\n    not-name:\n      - index.php\njs:\n  finder:\n    not-name:\n      - webpack.mix.js\ncss: true\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.646484375,
          "content": "dist: bionic\n\nenv:\n  - XDEBUG_MODE=coverage\n\nlanguage: php\n\nphp:\n  - 8.2\n  - 8.3\n\nservices:\n  - mysql\n\nbefore_install:\n  - mysql -e 'CREATE DATABASE 2fauth_test;'\n\nbefore_script:\n  - travis_retry composer self-update\n  - travis_retry composer install --no-interaction\n  - cp .env.travis .env\n  - php artisan key:generate\n\nscript:\n  - DATABASE=sqlite vendor/bin/phpunit --coverage-clover=coverage.xml\n  - php artisan config:clear\n  - DATABASE=mysql vendor/bin/phpunit -c phpunit-mysql.xml\n\nafter_success:\n# Submit coverage report to https://codecov.io\n- bash <(curl -s https://codecov.io/bash)\n\n# Monitor only these branches\nbranches:\n  only:\n  - master\n  # - dev"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 11.8876953125,
          "content": "ARG BUILDPLATFORM=linux/amd64\nARG TARGETPLATFORM\nARG ALPINE_VERSION=3.19\nARG PHP_VERSION=8.2-alpine${ALPINE_VERSION}\nARG COMPOSER_VERSION=2.7\nARG SUPERVISORD_VERSION=v0.7.3\n\nARG UID=1000\nARG GID=1000\n\nFROM --platform=${BUILDPLATFORM} composer:${COMPOSER_VERSION} AS build-composer\nFROM composer:${COMPOSER_VERSION} AS composer\nFROM qmcgaw/binpot:supervisord-${SUPERVISORD_VERSION} AS supervisord\n\nFROM --platform=${BUILDPLATFORM} php:${PHP_VERSION} AS vendor\nARG UID=1000\nARG GID=1000\nCOPY --from=build-composer --chown=${UID}:${GID} /usr/bin/composer /usr/bin/composer\nRUN apk add --no-cache unzip\nADD https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions /usr/local/bin/\nRUN chmod +x /usr/local/bin/install-php-extensions && \\\n    install-php-extensions gd bcmath\nWORKDIR /srv\nCOPY artisan composer.json composer.lock ./\nCOPY database ./database\nRUN composer install --prefer-dist --no-scripts --no-dev --no-autoloader\nRUN composer dump-autoload --no-scripts --no-dev --optimize\n\nFROM --platform=${BUILDPLATFORM} vendor AS test\nCOPY . .\nRUN mv .env.testing .env\nRUN composer install\nRUN php artisan key:generate\nCOPY docker/php-test.ini /usr/local/etc/php/php.ini\nENTRYPOINT [ \"/srv/vendor/bin/phpunit\" ]\n\nFROM alpine:${ALPINE_VERSION}\nARG UID=1000\nARG GID=1000\n\n# Composer 2\nCOPY --from=composer --chown=${UID}:${GID} /usr/bin/composer /usr/bin/composer\n# Supervisord from https://github.com/ochinchina/supervisord\nCOPY --from=supervisord --chown=${UID}:${GID} /bin /usr/local/bin/supervisord\n\n# Install PHP and PHP system dependencies\nRUN apk add --update --no-cache \\\n    # PHP\n    php82 \\\n    # Composer dependencies\n    php82-phar \\\n    # PHP SQLite, MySQL/MariaDB & Postgres drivers\n    php82-pdo_sqlite php82-sqlite3 php82-pdo_mysql php82-pdo_pgsql php82-pgsql \\\n    # PHP extensions\n    php82-xml php82-gd php82-mbstring php82-tokenizer php82-fileinfo php82-bcmath php82-ctype php82-dom php-redis \\\n    # Runtime dependencies\n    php82-session php82-openssl \\\n    # Nginx and PHP FPM to serve over HTTP\n    php82-fpm nginx\n\n# PHP FPM configuration\n# Change username and ownership in php-fpm pool config\nRUN sed -i '/user = nobody/d' /etc/php82/php-fpm.d/www.conf && \\\n    sed -i '/group = nobody/d' /etc/php82/php-fpm.d/www.conf && \\\n    sed -i '/listen.owner/d' /etc/php82/php-fpm.d/www.conf && \\\n    sed -i '/listen.group/d' /etc/php82/php-fpm.d/www.conf\n# Pre-create files with the correct permissions\nRUN mkdir /run/php && \\\n    chown ${UID}:${GID} /run/php /var/log/php82 && \\\n    chmod 700 /run/php /var/log/php82\n\n# NGINX\n# Clean up\nRUN rm /etc/nginx/nginx.conf && \\\n    chown -R ${UID}:${GID} /var/lib/nginx\n# configuration\nEXPOSE 8000/tcp\nRUN touch /run/nginx/nginx.pid /var/lib/nginx/logs/error.log && \\\n    chown ${UID}:${GID} /run/nginx/nginx.pid /var/lib/nginx/logs/error.log\nCOPY --chown=${UID}:${GID} docker/nginx.conf /etc/nginx/nginx.conf\nRUN nginx -t\n\n# Supervisord configuration\nCOPY --chown=${UID}:${GID} docker/supervisord.conf /etc/supervisor/supervisord.conf\n\n# Create end user directory\nRUN mkdir -p /2fauth && \\\n    chown -R ${UID}:${GID} /2fauth && \\\n    chmod 700 /2fauth\n\n# Create /srv internal directory\nWORKDIR /srv\nRUN chown -R ${UID}:${GID} /srv && \\\n    chmod 700 /srv\n\n# Run without root\nUSER ${UID}:${GID}\n\n# Dependencies\nCOPY --from=vendor --chown=${UID}:${GID} /srv/vendor /srv/vendor\n\n# Copy the rest of the code\nCOPY --chown=${UID}:${GID} . .\n# RUN composer dump-autoload --no-scripts --no-dev --optimize\n\n# Entrypoint\nENTRYPOINT [ \"/usr/local/bin/entrypoint.sh\" ]\nCOPY --chown=${UID}:${GID} docker/entrypoint.sh /usr/local/bin/entrypoint.sh\nRUN chmod 500 /usr/local/bin/entrypoint.sh\n\nENV \\\n    # You can change the name of the app\n    APP_NAME=2FAuth \\\n    # You can leave this on \"local\". If you change it to production most console commands will ask for extra confirmation.\n    # Never set it to \"testing\".\n    APP_ENV=local \\\n    # The timezone for your application, which is used to record dates and times to database. This global setting can be\n    # overridden by users via in-app settings for a personalised dates and times display.\n    # If this setting is changed while the application is already running, existing records in the database won't be updated.\n    APP_TIMEZONE=UTC \\\n    # Set to true if you want to see debug information in error screens.\n    APP_DEBUG=false \\\n    # This should be your email address\n    SITE_OWNER=mail@example.com  \\\n    # The encryption key for  our database and sessions. Keep this very secure.\n    # If you generate a new one all existing data must be considered LOST.\n    # Change it to a string of exactly 32 chars or use command `php artisan key:generate` to generate it\n    APP_KEY=SomeRandomStringOf32CharsExactly \\\n    # This variable must match your installation's external address.\n    # Webauthn won't work otherwise.\n    APP_URL=http://localhost \\\n    # If you want to serve js assets from a CDN (like https://cdn.example.com),\n    # uncomment the following line and set this var with the CDN url.\n    # Otherwise, let this line commented.\n    # ASSET_URL=http://localhost \\\n    #\n    # Turn this to true if you want your app to react like a demo.\n    # The Demo mode reset the app content every hours and set a generic demo user.\n    IS_DEMO_APP=false \\\n    # The log channel defines where your log entries go to.\n    # 'daily' is the default logging mode giving you 7 daily rotated log files in /storage/logs/.\n    # Also available are 'errorlog', 'syslog', 'stderr', 'papertrail', 'slack' and a 'stack' channel\n    # to combine multiple channels into a single one.\n    LOG_CHANNEL=daily \\\n    # Log level. You can set this from least severe to most severe:\n    # debug, info, notice, warning, error, critical, alert, emergency\n    # If you set it to debug your logs will grow large, and fast. If you set it to emergency probably\n    # nothing will get logged, ever.\n    LOG_LEVEL=notice \\\n    # Database config & credentials\n    # DB_CONNECTION can only be sqlite\n    DB_CONNECTION=sqlite \\\n    DB_DATABASE=\"/srv/database/database.sqlite\" \\\n    # If you're looking for performance improvements, you could install memcached.\n    CACHE_DRIVER=file \\\n    SESSION_DRIVER=file \\\n    # Mail settings\n    # Refer your email provider documentation to configure your mail settings\n    # Set a value for every available setting to avoid issue\n    MAIL_MAILER=log \\\n    MAIL_HOST=smtp.mailtrap.io \\\n    MAIL_PORT=2525 \\\n    MAIL_USERNAME=null \\\n    MAIL_PASSWORD=null \\\n    MAIL_ENCRYPTION=null \\\n    MAIL_FROM_NAME=null \\\n    MAIL_FROM_ADDRESS=null \\\n    # SSL peer verification.\n    # Set this to false to disable the SSL certificate validation.\n    # WARNING\n    # Disabling peer verification can result in a major security flaw.\n    # Change it only if you know what you're doing.\n    MAIL_VERIFY_SSL_PEER=true \\\n    # API settings\n    # The maximum number of API calls in a minute from the same IP.\n    # Once reached, all requests from this IP will be rejected until the minute has elapsed.\n    # Set to null to disable the API throttling.\n    THROTTLE_API=60 \\\n    # Authentication settings\n    # The number of times per minute a user can fail to log in before being locked out.\n    # Once reached, all login attempts will be rejected until the minute has elapsed.\n    # This setting applies to both email/password and webauthn login attemps.\n    LOGIN_THROTTLE=5 \\\n    # The default authentication guard\n    # Supported:\n    #   'web-guard' : The Laravel built-in auth system (default if nulled)\n    #   'reverse-proxy-guard' : When 2FAuth is deployed behind a reverse-proxy that handle authentication\n    # WARNING\n    # When using 'reverse-proxy-guard' 2FAuth only look for the dedicated headers and skip all other built-in\n    # authentication checks. That means your proxy is fully responsible of the authentication process, 2FAuth will\n    # trust him as long as headers are presents.\n    AUTHENTICATION_GUARD=web-guard \\\n    # Authentication log retention time, in days.\n    # Log entries older than that are automatically deleted.\n    AUTHENTICATION_LOG_RETENTION=365 \\\n    # Name of the HTTP headers sent by the reverse proxy that identifies the authenticated user at proxy level.\n    # Check your proxy documentation to find out how these headers are named (i.e 'REMOTE_USER', 'REMOTE_EMAIL', etc...)\n    # (only relevant when AUTHENTICATION_GUARD is set to 'reverse-proxy-guard')\n    AUTH_PROXY_HEADER_FOR_USER=null \\\n    AUTH_PROXY_HEADER_FOR_EMAIL=null \\\n    # Custom logout URL to open when using an auth proxy.\n    PROXY_LOGOUT_URL=null \\\n    # WebAuthn settings\n    # Relying Party name, aka the name of the application. If blank, defaults to APP_NAME. Do not set to null.\n    WEBAUTHN_NAME=2FAuth \\\n    # Relying Party ID, should equal the site domain (i.e 2fauth.example.com).\n    # If null, the device will fill it internally (recommended)\n    # See https://webauthn-doc.spomky-labs.com/prerequisites/the-relying-party#how-to-determine-the-relying-party-id\n    WEBAUTHN_ID=null \\\n    # Use this setting to control how user verification behave during the\n    # WebAuthn authentication flow.\n    #\n    # Most authenticators and smartphones will ask the user to actively verify\n    # themselves for log in. For example, through a touch plus pin code,\n    # password entry, or biometric recognition (e.g., presenting a fingerprint).\n    # The intent is to distinguish one user from any other.\n    #\n    # Supported:\n    #   'required': Will ALWAYS ask for user verification\n    #   'preferred' (default) : Will ask for user verification IF POSSIBLE\n    #   'discouraged' : Will NOT ask for user verification (for example, to minimize disruption to the user interaction flow)\n    WEBAUTHN_USER_VERIFICATION=preferred \\\n    #### SSO settings (for Socialite) ####\n    # Uncomment and complete lines for the OAuth providers you want to enable.\n    # OPENID_AUTHORIZE_URL= \\\n    # OPENID_TOKEN_URL= \\\n    # OPENID_USERINFO_URL= \\\n    # OPENID_CLIENT_ID= \\\n    # OPENID_CLIENT_SECRET= \\\n    # GITHUB_CLIENT_ID= \\\n    # GITHUB_CLIENT_SECRET= \\\n    # Use this setting to declare trusted proxied.\n    # Supported:\n    #   '*': to trust any proxy\n    #   A comma separated IP list: The list of proxies IP to trust\n    TRUSTED_PROXIES=null \\\n    # Proxy for outgoing requests like new releases detection or logo fetching.\n    # You can provide a proxy URL that contains a scheme, username, and password.\n    # For example, \"http://username:password@192.168.16.1:10\".\n    PROXY_FOR_OUTGOING_REQUESTS=null \\\n    # Set this to true to enable Content-Security-Policy (CSP).\n    # CSP helps to prevent or minimize the risk of certain types of security threats.\n    # This is mainly used as a defense against cross-site scripting (XSS) attacks, in which\n    # an attacker is able to inject malicious code into the web app\n    CONTENT_SECURITY_POLICY=true \\\n    # Leave the following configuration vars as is.\n    # Unless you like to tinker and know what you're doing.\n    BROADCAST_DRIVER=log \\\n    QUEUE_DRIVER=sync \\\n    SESSION_LIFETIME=120 \\\n    REDIS_HOST=127.0.0.1 \\\n    REDIS_PASSWORD=null \\\n    REDIS_PORT=6379 \\\n    PUSHER_APP_ID= \\\n    PUSHER_APP_KEY= \\\n    PUSHER_APP_SECRET= \\\n    PUSHER_APP_CLUSTER=mt1 \\\n    VITE_PUSHER_APP_KEY=\"${PUSHER_APP_KEY}\" \\\n    VITE_PUSHER_APP_CLUSTER=\"${PUSHER_APP_CLUSTER}\" \\\n    MIX_ENV=local\n\nARG VERSION=unknown\nARG CREATED=\"an unknown date\"\nARG COMMIT=unknown\nENV \\\n    VERSION=${VERSION} \\\n    CREATED=${CREATED} \\\n    COMMIT=${COMMIT}\nLABEL \\\n    org.opencontainers.image.authors=\"https://github.com/Bubka\" \\\n    org.opencontainers.image.version=$VERSION \\\n    org.opencontainers.image.created=$CREATED \\\n    org.opencontainers.image.revision=$COMMIT \\\n    org.opencontainers.image.url=\"https://github.com/Bubka/2FAuth\" \\\n    org.opencontainers.image.documentation=\"https://hub.docker.com/r/2fauth/2fauth\" \\\n    org.opencontainers.image.source=\"https://github.com/Bubka/2FAuth\" \\\n    org.opencontainers.image.title=\"2fauth\" \\\n    org.opencontainers.image.description=\"A web app to manage your Two-Factor Authentication (2FA) accounts and generate their security codes\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 33.712890625,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>."
        },
        {
          "name": "Procfile",
          "type": "blob",
          "size": 0.142578125,
          "content": "web: vendor/bin/heroku-php-nginx -C nginx.conf public/\nrelease: php artisan migrate --force && php artisan cache:clear && php artisan config:cache"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.6572265625,
          "content": "# 2FAuth\n\n![Docker build status](https://img.shields.io/github/actions/workflow/status/bubka/2fauth/ci-docker-test.yml?branch=master&style=flat-square)\n![https://codecov.io/gh/Bubka/2FAuth](https://img.shields.io/codecov/c/github/Bubka/2FAuth?style=flat-square)\n![https://github.com/Bubka/2FAuth/blob/master/LICENSE](https://img.shields.io/github/license/Bubka/2FAuth.svg?style=flat-square)\n\nA web app to manage your Two-Factor Authentication (2FA) accounts and generate their security codes\n\n![screens](https://user-images.githubusercontent.com/858858/100485897-18c21400-3102-11eb-9c72-ea0b1b46ef2e.png)\n\n[**2FAuth Demo**](https://demo.2fauth.app/)  \nCredentials (login - password) : `demo@2fauth.app` - `demo`\n\n## Purpose\n\n2FAuth is a web based self-hosted alternative to One Time Passcode (OTP) generators like Google Authenticator, designed for both mobile and desktop.\n\nIt aims to ease you perform your 2FA authentication steps whatever the device you handle, with a clean and suitable interface.\n\nI created it because :\n\n* Most of the UIs for this kind of apps show tokens for all accounts in the same time with stressful countdowns (in my opinion)\n* I wanted my 2FA accounts to be stored in a standalone database I can easily backup and restore (did you already encountered a smartphone loss with all your 2FA accounts in Google Auth? I did...)\n* I hate taking out my smartphone to get an OTP when I use a desktop computer\n* I love coding and I love self-hosted solutions\n\n## Main features\n\n* Manage your 2FA accounts and organize them using Groups\n* Scan and decode any QR code to add account in no time\n* Add custom account without QR code thanks to an advanced form\n* Edit accounts, even the imported ones\n* Generate TOTP and HOTP security codes and Steam Guard codes\n\n2FAuth is currently fully localized in English and French. See [Contributing](#contributing) if you want to help on adding more languages.\n\n## Security\n\n2FAuth provides several security mechanisms to protect your 2FA data as best as possible.\n\n### Single user app\n\nYou have to create a user account and authenticate yourself to use the app. It is not possible to create more than one user account, the app is thought for personal use.\n\n### Modern authentication\n\nYou can sign in 2FAuth using a security key like a Yubikey or a Titan key and disable the traditional login form.\n\n### Data encryption\n\nSensitive data stored in the database can be encrypted to protect them against db compromise. Encryption is provided as an option which is disabled by default. It is strongly recommended to backup the APP_KEY value of your .env file (or the whole file) when encryption is On.\n\n### Auto logout\n\n2FAuth automatically log you out after an inactivity period to prevent long life session. The auto logout can be deactivated or triggered when a security code is copied.\n\n### RFC compliance\n\n2FAuth generates OTP according to RFC 4226 (HOTP Algorithm) and RFC 6238 (TOTP Algorithm) thanks to [Spomky-Labs/OTPHP](https://github.com/Spomky-Labs/otphp) php library.\n\n## Requirements\n\n* [![Requires PHP8](https://img.shields.io/badge/php-^8.2-red.svg?style=flat-square)](https://secure.php.net/downloads.php)\n* See [Laravel server requirements](https://laravel.com/docs/installation#server-requirements)\n* Any database [supported by Laravel](https://laravel.com/docs/database)\n\n## Installation guides\n\n* [Self-hosted server](https://docs.2fauth.app/getting-started/installation/self-hosted-server/)\n\n* [Docker (cli)](https://docs.2fauth.app/getting-started/installation/docker/docker-cli/)\n\n* [Docker (compose)](https://docs.2fauth.app/getting-started/installation/docker/docker-compose/)\n\n* [Heroku](https://docs.2fauth.app/getting-started/installation/heroku/)\n\n## Upgrading\n\n* [Upgrade guide](https://docs.2fauth.app/getting-started/upgrade/)\n\n## Migration\n\n2FAuth supports importing from the following formats: 2FAuth (JSON), Google Auth (QR code), Aegis Auth (JSON, plain text), 2FAS Auth (JSON)\n\n* [Import guide](https://docs.2fauth.app/getting-started/usage/import/)\n\n## Contributing\n\nYou can contribute to 2FAuth in many ways:\n\n* By [reporting bugs](https://github.com/Bubka/2FAuth/issues/new?template=bug_report.md), or even better, by submitting a fix with a pull request on the *dev* branch.\n* By [suggesting enhancement or new feature](https://github.com/Bubka/2FAuth/issues/new?template=feature_request.md). Please have a look to the [2FAuth development project](https://github.com/users/Bubka/projects/1), maybe your idea is already there.\n* By correcting or completing translations in a language you speak, using the [Crowdin platform](https://crowdin.com/project/2fauth). Ask for your language if this one is lacking.\n\n## License\n\n[AGPL-3.0](https://www.gnu.org/licenses/agpl-3.0.html)\n"
        },
        {
          "name": "_ide_helper.php",
          "type": "blob",
          "size": 949.2890625,
          "content": "<?php\n/* @noinspection ALL */\n// @formatter:off\n// phpcs:ignoreFile\n\n/**\n * A helper file for Laravel, to provide autocomplete information to your IDE\n * Generated for Laravel 11.23.5.\n *\n * This file should not be included in your code, only analyzed by your IDE!\n *\n * @author Barry vd. Heuvel <barryvdh@gmail.com>\n * @see https://github.com/barryvdh/laravel-ide-helper\n */\n\nnamespace Illuminate\\Support\\Facades {\n            /**\n     * \n     *\n     * @see \\Illuminate\\Foundation\\Application\n     */        class App {\n                    /**\n         * Begin configuring a new Laravel application instance.\n         *\n         * @param string|null $basePath\n         * @return \\Illuminate\\Foundation\\Configuration\\ApplicationBuilder \n         * @static \n         */        public static function configure($basePath = null)\n        {\n                        return \\Illuminate\\Foundation\\Application::configure($basePath);\n        }\n                    /**\n         * Infer the application's base directory from the environment.\n         *\n         * @return string \n         * @static \n         */        public static function inferBasePath()\n        {\n                        return \\Illuminate\\Foundation\\Application::inferBasePath();\n        }\n                    /**\n         * Get the version number of the application.\n         *\n         * @return string \n         * @static \n         */        public static function version()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->version();\n        }\n                    /**\n         * Run the given array of bootstrap classes.\n         *\n         * @param string[] $bootstrappers\n         * @return void \n         * @static \n         */        public static function bootstrapWith($bootstrappers)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->bootstrapWith($bootstrappers);\n        }\n                    /**\n         * Register a callback to run after loading the environment.\n         *\n         * @param \\Closure $callback\n         * @return void \n         * @static \n         */        public static function afterLoadingEnvironment($callback)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->afterLoadingEnvironment($callback);\n        }\n                    /**\n         * Register a callback to run before a bootstrapper.\n         *\n         * @param string $bootstrapper\n         * @param \\Closure $callback\n         * @return void \n         * @static \n         */        public static function beforeBootstrapping($bootstrapper, $callback)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->beforeBootstrapping($bootstrapper, $callback);\n        }\n                    /**\n         * Register a callback to run after a bootstrapper.\n         *\n         * @param string $bootstrapper\n         * @param \\Closure $callback\n         * @return void \n         * @static \n         */        public static function afterBootstrapping($bootstrapper, $callback)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->afterBootstrapping($bootstrapper, $callback);\n        }\n                    /**\n         * Determine if the application has been bootstrapped before.\n         *\n         * @return bool \n         * @static \n         */        public static function hasBeenBootstrapped()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->hasBeenBootstrapped();\n        }\n                    /**\n         * Set the base path for the application.\n         *\n         * @param string $basePath\n         * @return \\Illuminate\\Foundation\\Application \n         * @static \n         */        public static function setBasePath($basePath)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->setBasePath($basePath);\n        }\n                    /**\n         * Get the path to the application \"app\" directory.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */        public static function path($path = '')\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->path($path);\n        }\n                    /**\n         * Set the application directory.\n         *\n         * @param string $path\n         * @return \\Illuminate\\Foundation\\Application \n         * @static \n         */        public static function useAppPath($path)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->useAppPath($path);\n        }\n                    /**\n         * Get the base path of the Laravel installation.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */        public static function basePath($path = '')\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->basePath($path);\n        }\n                    /**\n         * Get the path to the bootstrap directory.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */        public static function bootstrapPath($path = '')\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->bootstrapPath($path);\n        }\n                    /**\n         * Get the path to the service provider list in the bootstrap directory.\n         *\n         * @return string \n         * @static \n         */        public static function getBootstrapProvidersPath()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->getBootstrapProvidersPath();\n        }\n                    /**\n         * Set the bootstrap file directory.\n         *\n         * @param string $path\n         * @return \\Illuminate\\Foundation\\Application \n         * @static \n         */        public static function useBootstrapPath($path)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->useBootstrapPath($path);\n        }\n                    /**\n         * Get the path to the application configuration files.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */        public static function configPath($path = '')\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->configPath($path);\n        }\n                    /**\n         * Set the configuration directory.\n         *\n         * @param string $path\n         * @return \\Illuminate\\Foundation\\Application \n         * @static \n         */        public static function useConfigPath($path)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->useConfigPath($path);\n        }\n                    /**\n         * Get the path to the database directory.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */        public static function databasePath($path = '')\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->databasePath($path);\n        }\n                    /**\n         * Set the database directory.\n         *\n         * @param string $path\n         * @return \\Illuminate\\Foundation\\Application \n         * @static \n         */        public static function useDatabasePath($path)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->useDatabasePath($path);\n        }\n                    /**\n         * Get the path to the language files.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */        public static function langPath($path = '')\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->langPath($path);\n        }\n                    /**\n         * Set the language file directory.\n         *\n         * @param string $path\n         * @return \\Illuminate\\Foundation\\Application \n         * @static \n         */        public static function useLangPath($path)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->useLangPath($path);\n        }\n                    /**\n         * Get the path to the public / web directory.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */        public static function publicPath($path = '')\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->publicPath($path);\n        }\n                    /**\n         * Set the public / web directory.\n         *\n         * @param string $path\n         * @return \\Illuminate\\Foundation\\Application \n         * @static \n         */        public static function usePublicPath($path)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->usePublicPath($path);\n        }\n                    /**\n         * Get the path to the storage directory.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */        public static function storagePath($path = '')\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->storagePath($path);\n        }\n                    /**\n         * Set the storage directory.\n         *\n         * @param string $path\n         * @return \\Illuminate\\Foundation\\Application \n         * @static \n         */        public static function useStoragePath($path)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->useStoragePath($path);\n        }\n                    /**\n         * Get the path to the resources directory.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */        public static function resourcePath($path = '')\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->resourcePath($path);\n        }\n                    /**\n         * Get the path to the views directory.\n         * \n         * This method returns the first configured path in the array of view paths.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */        public static function viewPath($path = '')\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->viewPath($path);\n        }\n                    /**\n         * Join the given paths together.\n         *\n         * @param string $basePath\n         * @param string $path\n         * @return string \n         * @static \n         */        public static function joinPaths($basePath, $path = '')\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->joinPaths($basePath, $path);\n        }\n                    /**\n         * Get the path to the environment file directory.\n         *\n         * @return string \n         * @static \n         */        public static function environmentPath()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->environmentPath();\n        }\n                    /**\n         * Set the directory for the environment file.\n         *\n         * @param string $path\n         * @return \\Illuminate\\Foundation\\Application \n         * @static \n         */        public static function useEnvironmentPath($path)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->useEnvironmentPath($path);\n        }\n                    /**\n         * Set the environment file to be loaded during bootstrapping.\n         *\n         * @param string $file\n         * @return \\Illuminate\\Foundation\\Application \n         * @static \n         */        public static function loadEnvironmentFrom($file)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->loadEnvironmentFrom($file);\n        }\n                    /**\n         * Get the environment file the application is using.\n         *\n         * @return string \n         * @static \n         */        public static function environmentFile()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->environmentFile();\n        }\n                    /**\n         * Get the fully qualified path to the environment file.\n         *\n         * @return string \n         * @static \n         */        public static function environmentFilePath()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->environmentFilePath();\n        }\n                    /**\n         * Get or check the current application environment.\n         *\n         * @param string|array $environments\n         * @return string|bool \n         * @static \n         */        public static function environment(...$environments)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->environment(...$environments);\n        }\n                    /**\n         * Determine if the application is in the local environment.\n         *\n         * @return bool \n         * @static \n         */        public static function isLocal()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->isLocal();\n        }\n                    /**\n         * Determine if the application is in the production environment.\n         *\n         * @return bool \n         * @static \n         */        public static function isProduction()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->isProduction();\n        }\n                    /**\n         * Detect the application's current environment.\n         *\n         * @param \\Closure $callback\n         * @return string \n         * @static \n         */        public static function detectEnvironment($callback)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->detectEnvironment($callback);\n        }\n                    /**\n         * Determine if the application is running in the console.\n         *\n         * @return bool \n         * @static \n         */        public static function runningInConsole()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->runningInConsole();\n        }\n                    /**\n         * Determine if the application is running any of the given console commands.\n         *\n         * @param string|array $commands\n         * @return bool \n         * @static \n         */        public static function runningConsoleCommand(...$commands)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->runningConsoleCommand(...$commands);\n        }\n                    /**\n         * Determine if the application is running unit tests.\n         *\n         * @return bool \n         * @static \n         */        public static function runningUnitTests()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->runningUnitTests();\n        }\n                    /**\n         * Determine if the application is running with debug mode enabled.\n         *\n         * @return bool \n         * @static \n         */        public static function hasDebugModeEnabled()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->hasDebugModeEnabled();\n        }\n                    /**\n         * Register a new registered listener.\n         *\n         * @param callable $callback\n         * @return void \n         * @static \n         */        public static function registered($callback)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->registered($callback);\n        }\n                    /**\n         * Register all of the configured providers.\n         *\n         * @return void \n         * @static \n         */        public static function registerConfiguredProviders()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->registerConfiguredProviders();\n        }\n                    /**\n         * Register a service provider with the application.\n         *\n         * @param \\Illuminate\\Support\\ServiceProvider|string $provider\n         * @param bool $force\n         * @return \\Illuminate\\Support\\ServiceProvider \n         * @static \n         */        public static function register($provider, $force = false)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->register($provider, $force);\n        }\n                    /**\n         * Get the registered service provider instance if it exists.\n         *\n         * @param \\Illuminate\\Support\\ServiceProvider|string $provider\n         * @return \\Illuminate\\Support\\ServiceProvider|null \n         * @static \n         */        public static function getProvider($provider)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->getProvider($provider);\n        }\n                    /**\n         * Get the registered service provider instances if any exist.\n         *\n         * @param \\Illuminate\\Support\\ServiceProvider|string $provider\n         * @return array \n         * @static \n         */        public static function getProviders($provider)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->getProviders($provider);\n        }\n                    /**\n         * Resolve a service provider instance from the class name.\n         *\n         * @param string $provider\n         * @return \\Illuminate\\Support\\ServiceProvider \n         * @static \n         */        public static function resolveProvider($provider)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->resolveProvider($provider);\n        }\n                    /**\n         * Load and boot all of the remaining deferred providers.\n         *\n         * @return void \n         * @static \n         */        public static function loadDeferredProviders()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->loadDeferredProviders();\n        }\n                    /**\n         * Load the provider for a deferred service.\n         *\n         * @param string $service\n         * @return void \n         * @static \n         */        public static function loadDeferredProvider($service)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->loadDeferredProvider($service);\n        }\n                    /**\n         * Register a deferred provider and service.\n         *\n         * @param string $provider\n         * @param string|null $service\n         * @return void \n         * @static \n         */        public static function registerDeferredProvider($provider, $service = null)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->registerDeferredProvider($provider, $service);\n        }\n                    /**\n         * Resolve the given type from the container.\n         *\n         * @param string $abstract\n         * @param array $parameters\n         * @return mixed \n         * @throws \\Illuminate\\Contracts\\Container\\BindingResolutionException\n         * @static \n         */        public static function make($abstract, $parameters = [])\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->make($abstract, $parameters);\n        }\n                    /**\n         * Determine if the given abstract type has been bound.\n         *\n         * @param string $abstract\n         * @return bool \n         * @static \n         */        public static function bound($abstract)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->bound($abstract);\n        }\n                    /**\n         * Determine if the application has booted.\n         *\n         * @return bool \n         * @static \n         */        public static function isBooted()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->isBooted();\n        }\n                    /**\n         * Boot the application's service providers.\n         *\n         * @return void \n         * @static \n         */        public static function boot()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->boot();\n        }\n                    /**\n         * Register a new boot listener.\n         *\n         * @param callable $callback\n         * @return void \n         * @static \n         */        public static function booting($callback)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->booting($callback);\n        }\n                    /**\n         * Register a new \"booted\" listener.\n         *\n         * @param callable $callback\n         * @return void \n         * @static \n         */        public static function booted($callback)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->booted($callback);\n        }\n                    /**\n         * {@inheritdoc}\n         *\n         * @return \\Symfony\\Component\\HttpFoundation\\Response \n         * @static \n         */        public static function handle($request, $type = 1, $catch = true)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->handle($request, $type, $catch);\n        }\n                    /**\n         * Handle the incoming HTTP request and send the response to the browser.\n         *\n         * @param \\Illuminate\\Http\\Request $request\n         * @return void \n         * @static \n         */        public static function handleRequest($request)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->handleRequest($request);\n        }\n                    /**\n         * Handle the incoming Artisan command.\n         *\n         * @param \\Symfony\\Component\\Console\\Input\\InputInterface $input\n         * @return int \n         * @static \n         */        public static function handleCommand($input)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->handleCommand($input);\n        }\n                    /**\n         * Determine if the framework's base configuration should be merged.\n         *\n         * @return bool \n         * @static \n         */        public static function shouldMergeFrameworkConfiguration()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->shouldMergeFrameworkConfiguration();\n        }\n                    /**\n         * Indicate that the framework's base configuration should not be merged.\n         *\n         * @return \\Illuminate\\Foundation\\Application \n         * @static \n         */        public static function dontMergeFrameworkConfiguration()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->dontMergeFrameworkConfiguration();\n        }\n                    /**\n         * Determine if middleware has been disabled for the application.\n         *\n         * @return bool \n         * @static \n         */        public static function shouldSkipMiddleware()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->shouldSkipMiddleware();\n        }\n                    /**\n         * Get the path to the cached services.php file.\n         *\n         * @return string \n         * @static \n         */        public static function getCachedServicesPath()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->getCachedServicesPath();\n        }\n                    /**\n         * Get the path to the cached packages.php file.\n         *\n         * @return string \n         * @static \n         */        public static function getCachedPackagesPath()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->getCachedPackagesPath();\n        }\n                    /**\n         * Determine if the application configuration is cached.\n         *\n         * @return bool \n         * @static \n         */        public static function configurationIsCached()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->configurationIsCached();\n        }\n                    /**\n         * Get the path to the configuration cache file.\n         *\n         * @return string \n         * @static \n         */        public static function getCachedConfigPath()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->getCachedConfigPath();\n        }\n                    /**\n         * Determine if the application routes are cached.\n         *\n         * @return bool \n         * @static \n         */        public static function routesAreCached()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->routesAreCached();\n        }\n                    /**\n         * Get the path to the routes cache file.\n         *\n         * @return string \n         * @static \n         */        public static function getCachedRoutesPath()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->getCachedRoutesPath();\n        }\n                    /**\n         * Determine if the application events are cached.\n         *\n         * @return bool \n         * @static \n         */        public static function eventsAreCached()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->eventsAreCached();\n        }\n                    /**\n         * Get the path to the events cache file.\n         *\n         * @return string \n         * @static \n         */        public static function getCachedEventsPath()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->getCachedEventsPath();\n        }\n                    /**\n         * Add new prefix to list of absolute path prefixes.\n         *\n         * @param string $prefix\n         * @return \\Illuminate\\Foundation\\Application \n         * @static \n         */        public static function addAbsoluteCachePathPrefix($prefix)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->addAbsoluteCachePathPrefix($prefix);\n        }\n                    /**\n         * Get an instance of the maintenance mode manager implementation.\n         *\n         * @return \\Illuminate\\Contracts\\Foundation\\MaintenanceMode \n         * @static \n         */        public static function maintenanceMode()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->maintenanceMode();\n        }\n                    /**\n         * Determine if the application is currently down for maintenance.\n         *\n         * @return bool \n         * @static \n         */        public static function isDownForMaintenance()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->isDownForMaintenance();\n        }\n                    /**\n         * Throw an HttpException with the given data.\n         *\n         * @param int $code\n         * @param string $message\n         * @param array $headers\n         * @return \\Illuminate\\Foundation\\never \n         * @throws \\Symfony\\Component\\HttpKernel\\Exception\\HttpException\n         * @throws \\Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException\n         * @static \n         */        public static function abort($code, $message = '', $headers = [])\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->abort($code, $message, $headers);\n        }\n                    /**\n         * Register a terminating callback with the application.\n         *\n         * @param callable|string $callback\n         * @return \\Illuminate\\Foundation\\Application \n         * @static \n         */        public static function terminating($callback)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->terminating($callback);\n        }\n                    /**\n         * Terminate the application.\n         *\n         * @return void \n         * @static \n         */        public static function terminate()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->terminate();\n        }\n                    /**\n         * Get the service providers that have been loaded.\n         *\n         * @return array<string, boolean> \n         * @static \n         */        public static function getLoadedProviders()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->getLoadedProviders();\n        }\n                    /**\n         * Determine if the given service provider is loaded.\n         *\n         * @param string $provider\n         * @return bool \n         * @static \n         */        public static function providerIsLoaded($provider)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->providerIsLoaded($provider);\n        }\n                    /**\n         * Get the application's deferred services.\n         *\n         * @return array \n         * @static \n         */        public static function getDeferredServices()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->getDeferredServices();\n        }\n                    /**\n         * Set the application's deferred services.\n         *\n         * @param array $services\n         * @return void \n         * @static \n         */        public static function setDeferredServices($services)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->setDeferredServices($services);\n        }\n                    /**\n         * Add an array of services to the application's deferred services.\n         *\n         * @param array $services\n         * @return void \n         * @static \n         */        public static function addDeferredServices($services)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->addDeferredServices($services);\n        }\n                    /**\n         * Determine if the given service is a deferred service.\n         *\n         * @param string $service\n         * @return bool \n         * @static \n         */        public static function isDeferredService($service)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->isDeferredService($service);\n        }\n                    /**\n         * Configure the real-time facade namespace.\n         *\n         * @param string $namespace\n         * @return void \n         * @static \n         */        public static function provideFacades($namespace)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->provideFacades($namespace);\n        }\n                    /**\n         * Get the current application locale.\n         *\n         * @return string \n         * @static \n         */        public static function getLocale()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->getLocale();\n        }\n                    /**\n         * Get the current application locale.\n         *\n         * @return string \n         * @static \n         */        public static function currentLocale()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->currentLocale();\n        }\n                    /**\n         * Get the current application fallback locale.\n         *\n         * @return string \n         * @static \n         */        public static function getFallbackLocale()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->getFallbackLocale();\n        }\n                    /**\n         * Set the current application locale.\n         *\n         * @param string $locale\n         * @return void \n         * @static \n         */        public static function setLocale($locale)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->setLocale($locale);\n        }\n                    /**\n         * Set the current application fallback locale.\n         *\n         * @param string $fallbackLocale\n         * @return void \n         * @static \n         */        public static function setFallbackLocale($fallbackLocale)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->setFallbackLocale($fallbackLocale);\n        }\n                    /**\n         * Determine if the application locale is the given locale.\n         *\n         * @param string $locale\n         * @return bool \n         * @static \n         */        public static function isLocale($locale)\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->isLocale($locale);\n        }\n                    /**\n         * Register the core class aliases in the container.\n         *\n         * @return void \n         * @static \n         */        public static function registerCoreContainerAliases()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->registerCoreContainerAliases();\n        }\n                    /**\n         * Flush the container of all bindings and resolved instances.\n         *\n         * @return void \n         * @static \n         */        public static function flush()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->flush();\n        }\n                    /**\n         * Get the application namespace.\n         *\n         * @return string \n         * @throws \\RuntimeException\n         * @static \n         */        public static function getNamespace()\n        {\n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->getNamespace();\n        }\n                    /**\n         * Define a contextual binding.\n         *\n         * @param array|string $concrete\n         * @return \\Illuminate\\Contracts\\Container\\ContextualBindingBuilder \n         * @static \n         */        public static function when($concrete)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->when($concrete);\n        }\n                    /**\n         * Define a contextual binding based on an attribute.\n         *\n         * @param string $attribute\n         * @param \\Closure $handler\n         * @return void \n         * @static \n         */        public static function whenHasAttribute($attribute, $handler)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->whenHasAttribute($attribute, $handler);\n        }\n                    /**\n         * Returns true if the container can return an entry for the given identifier.\n         * \n         * Returns false otherwise.\n         * \n         * `has($id)` returning true does not mean that `get($id)` will not throw an exception.\n         * It does however mean that `get($id)` will not throw a `NotFoundExceptionInterface`.\n         *\n         * @return bool \n         * @param string $id Identifier of the entry to look for.\n         * @return bool \n         * @static \n         */        public static function has($id)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->has($id);\n        }\n                    /**\n         * Determine if the given abstract type has been resolved.\n         *\n         * @param string $abstract\n         * @return bool \n         * @static \n         */        public static function resolved($abstract)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->resolved($abstract);\n        }\n                    /**\n         * Determine if a given type is shared.\n         *\n         * @param string $abstract\n         * @return bool \n         * @static \n         */        public static function isShared($abstract)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->isShared($abstract);\n        }\n                    /**\n         * Determine if a given string is an alias.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */        public static function isAlias($name)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->isAlias($name);\n        }\n                    /**\n         * Register a binding with the container.\n         *\n         * @param string $abstract\n         * @param \\Closure|string|null $concrete\n         * @param bool $shared\n         * @return void \n         * @throws \\TypeError\n         * @static \n         */        public static function bind($abstract, $concrete = null, $shared = false)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->bind($abstract, $concrete, $shared);\n        }\n                    /**\n         * Determine if the container has a method binding.\n         *\n         * @param string $method\n         * @return bool \n         * @static \n         */        public static function hasMethodBinding($method)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->hasMethodBinding($method);\n        }\n                    /**\n         * Bind a callback to resolve with Container::call.\n         *\n         * @param array|string $method\n         * @param \\Closure $callback\n         * @return void \n         * @static \n         */        public static function bindMethod($method, $callback)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->bindMethod($method, $callback);\n        }\n                    /**\n         * Get the method binding for the given method.\n         *\n         * @param string $method\n         * @param mixed $instance\n         * @return mixed \n         * @static \n         */        public static function callMethodBinding($method, $instance)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->callMethodBinding($method, $instance);\n        }\n                    /**\n         * Add a contextual binding to the container.\n         *\n         * @param string $concrete\n         * @param string $abstract\n         * @param \\Closure|string $implementation\n         * @return void \n         * @static \n         */        public static function addContextualBinding($concrete, $abstract, $implementation)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->addContextualBinding($concrete, $abstract, $implementation);\n        }\n                    /**\n         * Register a binding if it hasn't already been registered.\n         *\n         * @param string $abstract\n         * @param \\Closure|string|null $concrete\n         * @param bool $shared\n         * @return void \n         * @static \n         */        public static function bindIf($abstract, $concrete = null, $shared = false)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->bindIf($abstract, $concrete, $shared);\n        }\n                    /**\n         * Register a shared binding in the container.\n         *\n         * @param string $abstract\n         * @param \\Closure|string|null $concrete\n         * @return void \n         * @static \n         */        public static function singleton($abstract, $concrete = null)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->singleton($abstract, $concrete);\n        }\n                    /**\n         * Register a shared binding if it hasn't already been registered.\n         *\n         * @param string $abstract\n         * @param \\Closure|string|null $concrete\n         * @return void \n         * @static \n         */        public static function singletonIf($abstract, $concrete = null)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->singletonIf($abstract, $concrete);\n        }\n                    /**\n         * Register a scoped binding in the container.\n         *\n         * @param string $abstract\n         * @param \\Closure|string|null $concrete\n         * @return void \n         * @static \n         */        public static function scoped($abstract, $concrete = null)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->scoped($abstract, $concrete);\n        }\n                    /**\n         * Register a scoped binding if it hasn't already been registered.\n         *\n         * @param string $abstract\n         * @param \\Closure|string|null $concrete\n         * @return void \n         * @static \n         */        public static function scopedIf($abstract, $concrete = null)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->scopedIf($abstract, $concrete);\n        }\n                    /**\n         * \"Extend\" an abstract type in the container.\n         *\n         * @param string $abstract\n         * @param \\Closure $closure\n         * @return void \n         * @throws \\InvalidArgumentException\n         * @static \n         */        public static function extend($abstract, $closure)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->extend($abstract, $closure);\n        }\n                    /**\n         * Register an existing instance as shared in the container.\n         *\n         * @param string $abstract\n         * @param mixed $instance\n         * @return mixed \n         * @static \n         */        public static function instance($abstract, $instance)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->instance($abstract, $instance);\n        }\n                    /**\n         * Assign a set of tags to a given binding.\n         *\n         * @param array|string $abstracts\n         * @param array|mixed $tags\n         * @return void \n         * @static \n         */        public static function tag($abstracts, $tags)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->tag($abstracts, $tags);\n        }\n                    /**\n         * Resolve all of the bindings for a given tag.\n         *\n         * @param string $tag\n         * @return \\Illuminate\\Container\\iterable \n         * @static \n         */        public static function tagged($tag)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->tagged($tag);\n        }\n                    /**\n         * Alias a type to a different name.\n         *\n         * @param string $abstract\n         * @param string $alias\n         * @return void \n         * @throws \\LogicException\n         * @static \n         */        public static function alias($abstract, $alias)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->alias($abstract, $alias);\n        }\n                    /**\n         * Bind a new callback to an abstract's rebind event.\n         *\n         * @param string $abstract\n         * @param \\Closure $callback\n         * @return mixed \n         * @static \n         */        public static function rebinding($abstract, $callback)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->rebinding($abstract, $callback);\n        }\n                    /**\n         * Refresh an instance on the given target and method.\n         *\n         * @param string $abstract\n         * @param mixed $target\n         * @param string $method\n         * @return mixed \n         * @static \n         */        public static function refresh($abstract, $target, $method)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->refresh($abstract, $target, $method);\n        }\n                    /**\n         * Wrap the given closure such that its dependencies will be injected when executed.\n         *\n         * @param \\Closure $callback\n         * @param array $parameters\n         * @return \\Closure \n         * @static \n         */        public static function wrap($callback, $parameters = [])\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->wrap($callback, $parameters);\n        }\n                    /**\n         * Call the given Closure / class@method and inject its dependencies.\n         *\n         * @param callable|string $callback\n         * @param array<string, mixed> $parameters\n         * @param string|null $defaultMethod\n         * @return mixed \n         * @throws \\InvalidArgumentException\n         * @static \n         */        public static function call($callback, $parameters = [], $defaultMethod = null)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->call($callback, $parameters, $defaultMethod);\n        }\n                    /**\n         * Get a closure to resolve the given type from the container.\n         *\n         * @param string $abstract\n         * @return \\Closure \n         * @static \n         */        public static function factory($abstract)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->factory($abstract);\n        }\n                    /**\n         * An alias function name for make().\n         *\n         * @param string|callable $abstract\n         * @param array $parameters\n         * @return mixed \n         * @throws \\Illuminate\\Contracts\\Container\\BindingResolutionException\n         * @static \n         */        public static function makeWith($abstract, $parameters = [])\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->makeWith($abstract, $parameters);\n        }\n                    /**\n         * Finds an entry of the container by its identifier and returns it.\n         *\n         * @return mixed \n         * @param string $id Identifier of the entry to look for.\n         * @throws NotFoundExceptionInterface  No entry was found for **this** identifier.\n         * @throws ContainerExceptionInterface Error while retrieving the entry.\n         * @return mixed Entry.\n         * @static \n         */        public static function get($id)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->get($id);\n        }\n                    /**\n         * Instantiate a concrete instance of the given type.\n         *\n         * @param \\Closure|string $concrete\n         * @return mixed \n         * @throws \\Illuminate\\Contracts\\Container\\BindingResolutionException\n         * @throws \\Illuminate\\Contracts\\Container\\CircularDependencyException\n         * @static \n         */        public static function build($concrete)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->build($concrete);\n        }\n                    /**\n         * Resolve a dependency based on an attribute.\n         *\n         * @param \\ReflectionAttribute $attribute\n         * @return mixed \n         * @static \n         */        public static function resolveFromAttribute($attribute)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->resolveFromAttribute($attribute);\n        }\n                    /**\n         * Register a new before resolving callback for all types.\n         *\n         * @param \\Closure|string $abstract\n         * @param \\Closure|null $callback\n         * @return void \n         * @static \n         */        public static function beforeResolving($abstract, $callback = null)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->beforeResolving($abstract, $callback);\n        }\n                    /**\n         * Register a new resolving callback.\n         *\n         * @param \\Closure|string $abstract\n         * @param \\Closure|null $callback\n         * @return void \n         * @static \n         */        public static function resolving($abstract, $callback = null)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->resolving($abstract, $callback);\n        }\n                    /**\n         * Register a new after resolving callback for all types.\n         *\n         * @param \\Closure|string $abstract\n         * @param \\Closure|null $callback\n         * @return void \n         * @static \n         */        public static function afterResolving($abstract, $callback = null)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->afterResolving($abstract, $callback);\n        }\n                    /**\n         * Register a new after resolving attribute callback for all types.\n         *\n         * @param string $attribute\n         * @param \\Closure $callback\n         * @return void \n         * @static \n         */        public static function afterResolvingAttribute($attribute, $callback)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->afterResolvingAttribute($attribute, $callback);\n        }\n                    /**\n         * Fire all of the after resolving attribute callbacks.\n         *\n         * @param \\ReflectionAttribute[] $abstract\n         * @param mixed $object\n         * @return void \n         * @static \n         */        public static function fireAfterResolvingAttributeCallbacks($attributes, $object)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->fireAfterResolvingAttributeCallbacks($attributes, $object);\n        }\n                    /**\n         * Get the container's bindings.\n         *\n         * @return array \n         * @static \n         */        public static function getBindings()\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->getBindings();\n        }\n                    /**\n         * Get the alias for an abstract if available.\n         *\n         * @param string $abstract\n         * @return string \n         * @static \n         */        public static function getAlias($abstract)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->getAlias($abstract);\n        }\n                    /**\n         * Remove all of the extender callbacks for a given type.\n         *\n         * @param string $abstract\n         * @return void \n         * @static \n         */        public static function forgetExtenders($abstract)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->forgetExtenders($abstract);\n        }\n                    /**\n         * Remove a resolved instance from the instance cache.\n         *\n         * @param string $abstract\n         * @return void \n         * @static \n         */        public static function forgetInstance($abstract)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->forgetInstance($abstract);\n        }\n                    /**\n         * Clear all of the instances from the container.\n         *\n         * @return void \n         * @static \n         */        public static function forgetInstances()\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->forgetInstances();\n        }\n                    /**\n         * Clear all of the scoped instances from the container.\n         *\n         * @return void \n         * @static \n         */        public static function forgetScopedInstances()\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->forgetScopedInstances();\n        }\n                    /**\n         * Get the globally available instance of the container.\n         *\n         * @return static \n         * @static \n         */        public static function getInstance()\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        return \\Illuminate\\Foundation\\Application::getInstance();\n        }\n                    /**\n         * Set the shared instance of the container.\n         *\n         * @param \\Illuminate\\Contracts\\Container\\Container|null $container\n         * @return \\Illuminate\\Contracts\\Container\\Container|static \n         * @static \n         */        public static function setInstance($container = null)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        return \\Illuminate\\Foundation\\Application::setInstance($container);\n        }\n                    /**\n         * Determine if a given offset exists.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */        public static function offsetExists($key)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->offsetExists($key);\n        }\n                    /**\n         * Get the value at a given offset.\n         *\n         * @param string $key\n         * @return mixed \n         * @static \n         */        public static function offsetGet($key)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        return $instance->offsetGet($key);\n        }\n                    /**\n         * Set the value at a given offset.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void \n         * @static \n         */        public static function offsetSet($key, $value)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->offsetSet($key, $value);\n        }\n                    /**\n         * Unset the value at a given offset.\n         *\n         * @param string $key\n         * @return void \n         * @static \n         */        public static function offsetUnset($key)\n        {            //Method inherited from \\Illuminate\\Container\\Container         \n                        /** @var \\Illuminate\\Foundation\\Application $instance */\n                        $instance->offsetUnset($key);\n        }\n                    /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @param-closure-this static  $macro\n         * @return void \n         * @static \n         */        public static function macro($name, $macro)\n        {\n                        \\Illuminate\\Foundation\\Application::macro($name, $macro);\n        }\n                    /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void \n         * @throws \\ReflectionException\n         * @static \n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\Illuminate\\Foundation\\Application::mixin($mixin, $replace);\n        }\n                    /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */        public static function hasMacro($name)\n        {\n                        return \\Illuminate\\Foundation\\Application::hasMacro($name);\n        }\n                    /**\n         * Flush the existing macros.\n         *\n         * @return void \n         * @static \n         */        public static function flushMacros()\n        {\n                        \\Illuminate\\Foundation\\Application::flushMacros();\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Foundation\\Console\\Kernel\n     */        class Artisan {\n                    /**\n         * Re-route the Symfony command events to their Laravel counterparts.\n         *\n         * @internal \n         * @return \\App\\Console\\Kernel \n         * @static \n         */        public static function rerouteSymfonyCommandEvents()\n        {            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel         \n                        /** @var \\App\\Console\\Kernel $instance */\n                        return $instance->rerouteSymfonyCommandEvents();\n        }\n                    /**\n         * Run the console application.\n         *\n         * @param \\Symfony\\Component\\Console\\Input\\InputInterface $input\n         * @param \\Symfony\\Component\\Console\\Output\\OutputInterface|null $output\n         * @return int \n         * @static \n         */        public static function handle($input, $output = null)\n        {            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel         \n                        /** @var \\App\\Console\\Kernel $instance */\n                        return $instance->handle($input, $output);\n        }\n                    /**\n         * Terminate the application.\n         *\n         * @param \\Symfony\\Component\\Console\\Input\\InputInterface $input\n         * @param int $status\n         * @return void \n         * @static \n         */        public static function terminate($input, $status)\n        {            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel         \n                        /** @var \\App\\Console\\Kernel $instance */\n                        $instance->terminate($input, $status);\n        }\n                    /**\n         * Register a callback to be invoked when the command lifecycle duration exceeds a given amount of time.\n         *\n         * @param \\DateTimeInterface|\\Carbon\\CarbonInterval|float|int $threshold\n         * @param callable $handler\n         * @return void \n         * @static \n         */        public static function whenCommandLifecycleIsLongerThan($threshold, $handler)\n        {            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel         \n                        /** @var \\App\\Console\\Kernel $instance */\n                        $instance->whenCommandLifecycleIsLongerThan($threshold, $handler);\n        }\n                    /**\n         * When the command being handled started.\n         *\n         * @return \\Illuminate\\Support\\Carbon|null \n         * @static \n         */        public static function commandStartedAt()\n        {            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel         \n                        /** @var \\App\\Console\\Kernel $instance */\n                        return $instance->commandStartedAt();\n        }\n                    /**\n         * Resolve a console schedule instance.\n         *\n         * @return \\Illuminate\\Console\\Scheduling\\Schedule \n         * @static \n         */        public static function resolveConsoleSchedule()\n        {            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel         \n                        /** @var \\App\\Console\\Kernel $instance */\n                        return $instance->resolveConsoleSchedule();\n        }\n                    /**\n         * Register a Closure based command with the application.\n         *\n         * @param string $signature\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Foundation\\Console\\ClosureCommand \n         * @static \n         */        public static function command($signature, $callback)\n        {            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel         \n                        /** @var \\App\\Console\\Kernel $instance */\n                        return $instance->command($signature, $callback);\n        }\n                    /**\n         * Register the given command with the console application.\n         *\n         * @param \\Symfony\\Component\\Console\\Command\\Command $command\n         * @return void \n         * @static \n         */        public static function registerCommand($command)\n        {            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel         \n                        /** @var \\App\\Console\\Kernel $instance */\n                        $instance->registerCommand($command);\n        }\n                    /**\n         * Run an Artisan console command by name.\n         *\n         * @param string $command\n         * @param array $parameters\n         * @param \\Symfony\\Component\\Console\\Output\\OutputInterface|null $outputBuffer\n         * @return int \n         * @throws \\Symfony\\Component\\Console\\Exception\\CommandNotFoundException\n         * @static \n         */        public static function call($command, $parameters = [], $outputBuffer = null)\n        {            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel         \n                        /** @var \\App\\Console\\Kernel $instance */\n                        return $instance->call($command, $parameters, $outputBuffer);\n        }\n                    /**\n         * Queue the given console command.\n         *\n         * @param string $command\n         * @param array $parameters\n         * @return \\Illuminate\\Foundation\\Bus\\PendingDispatch \n         * @static \n         */        public static function queue($command, $parameters = [])\n        {            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel         \n                        /** @var \\App\\Console\\Kernel $instance */\n                        return $instance->queue($command, $parameters);\n        }\n                    /**\n         * Get all of the commands registered with the console.\n         *\n         * @return array \n         * @static \n         */        public static function all()\n        {            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel         \n                        /** @var \\App\\Console\\Kernel $instance */\n                        return $instance->all();\n        }\n                    /**\n         * Get the output for the last run command.\n         *\n         * @return string \n         * @static \n         */        public static function output()\n        {            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel         \n                        /** @var \\App\\Console\\Kernel $instance */\n                        return $instance->output();\n        }\n                    /**\n         * Bootstrap the application for artisan commands.\n         *\n         * @return void \n         * @static \n         */        public static function bootstrap()\n        {            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel         \n                        /** @var \\App\\Console\\Kernel $instance */\n                        $instance->bootstrap();\n        }\n                    /**\n         * Bootstrap the application without booting service providers.\n         *\n         * @return void \n         * @static \n         */        public static function bootstrapWithoutBootingProviders()\n        {            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel         \n                        /** @var \\App\\Console\\Kernel $instance */\n                        $instance->bootstrapWithoutBootingProviders();\n        }\n                    /**\n         * Set the Artisan application instance.\n         *\n         * @param \\Illuminate\\Console\\Application|null $artisan\n         * @return void \n         * @static \n         */        public static function setArtisan($artisan)\n        {            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel         \n                        /** @var \\App\\Console\\Kernel $instance */\n                        $instance->setArtisan($artisan);\n        }\n                    /**\n         * Set the Artisan commands provided by the application.\n         *\n         * @param array $commands\n         * @return \\App\\Console\\Kernel \n         * @static \n         */        public static function addCommands($commands)\n        {            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel         \n                        /** @var \\App\\Console\\Kernel $instance */\n                        return $instance->addCommands($commands);\n        }\n                    /**\n         * Set the paths that should have their Artisan commands automatically discovered.\n         *\n         * @param array $paths\n         * @return \\App\\Console\\Kernel \n         * @static \n         */        public static function addCommandPaths($paths)\n        {            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel         \n                        /** @var \\App\\Console\\Kernel $instance */\n                        return $instance->addCommandPaths($paths);\n        }\n                    /**\n         * Set the paths that should have their Artisan \"routes\" automatically discovered.\n         *\n         * @param array $paths\n         * @return \\App\\Console\\Kernel \n         * @static \n         */        public static function addCommandRoutePaths($paths)\n        {            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel         \n                        /** @var \\App\\Console\\Kernel $instance */\n                        return $instance->addCommandRoutePaths($paths);\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Auth\\AuthManager\n     * @see \\Illuminate\\Auth\\SessionGuard\n     */        class Auth {\n                    /**\n         * Attempt to get the guard from the local cache.\n         *\n         * @param string|null $name\n         * @return \\Illuminate\\Contracts\\Auth\\Guard|\\Illuminate\\Contracts\\Auth\\StatefulGuard \n         * @static \n         */        public static function guard($name = null)\n        {\n                        /** @var \\Illuminate\\Auth\\AuthManager $instance */\n                        return $instance->guard($name);\n        }\n                    /**\n         * Create a session based authentication guard.\n         *\n         * @param string $name\n         * @param array $config\n         * @return \\Illuminate\\Auth\\SessionGuard \n         * @static \n         */        public static function createSessionDriver($name, $config)\n        {\n                        /** @var \\Illuminate\\Auth\\AuthManager $instance */\n                        return $instance->createSessionDriver($name, $config);\n        }\n                    /**\n         * Create a token based authentication guard.\n         *\n         * @param string $name\n         * @param array $config\n         * @return \\Illuminate\\Auth\\TokenGuard \n         * @static \n         */        public static function createTokenDriver($name, $config)\n        {\n                        /** @var \\Illuminate\\Auth\\AuthManager $instance */\n                        return $instance->createTokenDriver($name, $config);\n        }\n                    /**\n         * Get the default authentication driver name.\n         *\n         * @return string \n         * @static \n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\Illuminate\\Auth\\AuthManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n                    /**\n         * Set the default guard driver the factory should serve.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */        public static function shouldUse($name)\n        {\n                        /** @var \\Illuminate\\Auth\\AuthManager $instance */\n                        $instance->shouldUse($name);\n        }\n                    /**\n         * Set the default authentication driver name.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */        public static function setDefaultDriver($name)\n        {\n                        /** @var \\Illuminate\\Auth\\AuthManager $instance */\n                        $instance->setDefaultDriver($name);\n        }\n                    /**\n         * Register a new callback based request guard.\n         *\n         * @param string $driver\n         * @param callable $callback\n         * @return \\Illuminate\\Auth\\AuthManager \n         * @static \n         */        public static function viaRequest($driver, $callback)\n        {\n                        /** @var \\Illuminate\\Auth\\AuthManager $instance */\n                        return $instance->viaRequest($driver, $callback);\n        }\n                    /**\n         * Get the user resolver callback.\n         *\n         * @return \\Closure \n         * @static \n         */        public static function userResolver()\n        {\n                        /** @var \\Illuminate\\Auth\\AuthManager $instance */\n                        return $instance->userResolver();\n        }\n                    /**\n         * Set the callback to be used to resolve users.\n         *\n         * @param \\Closure $userResolver\n         * @return \\Illuminate\\Auth\\AuthManager \n         * @static \n         */        public static function resolveUsersUsing($userResolver)\n        {\n                        /** @var \\Illuminate\\Auth\\AuthManager $instance */\n                        return $instance->resolveUsersUsing($userResolver);\n        }\n                    /**\n         * Register a custom driver creator Closure.\n         *\n         * @param string $driver\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Auth\\AuthManager \n         * @static \n         */        public static function extend($driver, $callback)\n        {\n                        /** @var \\Illuminate\\Auth\\AuthManager $instance */\n                        return $instance->extend($driver, $callback);\n        }\n                    /**\n         * Register a custom provider creator Closure.\n         *\n         * @param string $name\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Auth\\AuthManager \n         * @static \n         */        public static function provider($name, $callback)\n        {\n                        /** @var \\Illuminate\\Auth\\AuthManager $instance */\n                        return $instance->provider($name, $callback);\n        }\n                    /**\n         * Determines if any guards have already been resolved.\n         *\n         * @return bool \n         * @static \n         */        public static function hasResolvedGuards()\n        {\n                        /** @var \\Illuminate\\Auth\\AuthManager $instance */\n                        return $instance->hasResolvedGuards();\n        }\n                    /**\n         * Forget all of the resolved guard instances.\n         *\n         * @return \\Illuminate\\Auth\\AuthManager \n         * @static \n         */        public static function forgetGuards()\n        {\n                        /** @var \\Illuminate\\Auth\\AuthManager $instance */\n                        return $instance->forgetGuards();\n        }\n                    /**\n         * Set the application instance used by the manager.\n         *\n         * @param \\Illuminate\\Contracts\\Foundation\\Application $app\n         * @return \\Illuminate\\Auth\\AuthManager \n         * @static \n         */        public static function setApplication($app)\n        {\n                        /** @var \\Illuminate\\Auth\\AuthManager $instance */\n                        return $instance->setApplication($app);\n        }\n                    /**\n         * Create the user provider implementation for the driver.\n         *\n         * @param string|null $provider\n         * @return \\Illuminate\\Contracts\\Auth\\UserProvider|null \n         * @throws \\InvalidArgumentException\n         * @static \n         */        public static function createUserProvider($provider = null)\n        {\n                        /** @var \\Illuminate\\Auth\\AuthManager $instance */\n                        return $instance->createUserProvider($provider);\n        }\n                    /**\n         * Get the default user provider name.\n         *\n         * @return string \n         * @static \n         */        public static function getDefaultUserProvider()\n        {\n                        /** @var \\Illuminate\\Auth\\AuthManager $instance */\n                        return $instance->getDefaultUserProvider();\n        }\n                    /**\n         * Get the currently authenticated user.\n         *\n         * @return \\App\\Models\\User|null \n         * @static \n         */        public static function user()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->user();\n        }\n                    /**\n         * Get the ID for the currently authenticated user.\n         *\n         * @return int|string|null \n         * @static \n         */        public static function id()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->id();\n        }\n                    /**\n         * Log a user into the application without sessions or cookies.\n         *\n         * @param array $credentials\n         * @return bool \n         * @static \n         */        public static function once($credentials = [])\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->once($credentials);\n        }\n                    /**\n         * Log the given user ID into the application without sessions or cookies.\n         *\n         * @param mixed $id\n         * @return \\App\\Models\\User|false \n         * @static \n         */        public static function onceUsingId($id)\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->onceUsingId($id);\n        }\n                    /**\n         * Validate a user's credentials.\n         *\n         * @param array $credentials\n         * @return bool \n         * @static \n         */        public static function validate($credentials = [])\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->validate($credentials);\n        }\n                    /**\n         * Attempt to authenticate using HTTP Basic Auth.\n         *\n         * @param string $field\n         * @param array $extraConditions\n         * @return \\Symfony\\Component\\HttpFoundation\\Response|null \n         * @throws \\Symfony\\Component\\HttpKernel\\Exception\\UnauthorizedHttpException\n         * @static \n         */        public static function basic($field = 'email', $extraConditions = [])\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->basic($field, $extraConditions);\n        }\n                    /**\n         * Perform a stateless HTTP Basic login attempt.\n         *\n         * @param string $field\n         * @param array $extraConditions\n         * @return \\Symfony\\Component\\HttpFoundation\\Response|null \n         * @throws \\Symfony\\Component\\HttpKernel\\Exception\\UnauthorizedHttpException\n         * @static \n         */        public static function onceBasic($field = 'email', $extraConditions = [])\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->onceBasic($field, $extraConditions);\n        }\n                    /**\n         * Attempt to authenticate a user using the given credentials.\n         *\n         * @param array $credentials\n         * @param bool $remember\n         * @return bool \n         * @static \n         */        public static function attempt($credentials = [], $remember = false)\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->attempt($credentials, $remember);\n        }\n                    /**\n         * Attempt to authenticate a user with credentials and additional callbacks.\n         *\n         * @param array $credentials\n         * @param array|callable|null $callbacks\n         * @param bool $remember\n         * @return bool \n         * @static \n         */        public static function attemptWhen($credentials = [], $callbacks = null, $remember = false)\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->attemptWhen($credentials, $callbacks, $remember);\n        }\n                    /**\n         * Log the given user ID into the application.\n         *\n         * @param mixed $id\n         * @param bool $remember\n         * @return \\App\\Models\\User|false \n         * @static \n         */        public static function loginUsingId($id, $remember = false)\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->loginUsingId($id, $remember);\n        }\n                    /**\n         * Log a user into the application.\n         *\n         * @param \\Illuminate\\Contracts\\Auth\\Authenticatable $user\n         * @param bool $remember\n         * @return void \n         * @static \n         */        public static function login($user, $remember = false)\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        $instance->login($user, $remember);\n        }\n                    /**\n         * Log the user out of the application.\n         *\n         * @return void \n         * @static \n         */        public static function logout()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        $instance->logout();\n        }\n                    /**\n         * Log the user out of the application on their current device only.\n         * \n         * This method does not cycle the \"remember\" token.\n         *\n         * @return void \n         * @static \n         */        public static function logoutCurrentDevice()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        $instance->logoutCurrentDevice();\n        }\n                    /**\n         * Invalidate other sessions for the current user.\n         * \n         * The application must be using the AuthenticateSession middleware.\n         *\n         * @param string $password\n         * @return \\App\\Models\\User|null \n         * @throws \\Illuminate\\Auth\\AuthenticationException\n         * @static \n         */        public static function logoutOtherDevices($password)\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->logoutOtherDevices($password);\n        }\n                    /**\n         * Register an authentication attempt event listener.\n         *\n         * @param mixed $callback\n         * @return void \n         * @static \n         */        public static function attempting($callback)\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        $instance->attempting($callback);\n        }\n                    /**\n         * Get the last user we attempted to authenticate.\n         *\n         * @return \\App\\Models\\User \n         * @static \n         */        public static function getLastAttempted()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->getLastAttempted();\n        }\n                    /**\n         * Get a unique identifier for the auth session value.\n         *\n         * @return string \n         * @static \n         */        public static function getName()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->getName();\n        }\n                    /**\n         * Get the name of the cookie used to store the \"recaller\".\n         *\n         * @return string \n         * @static \n         */        public static function getRecallerName()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->getRecallerName();\n        }\n                    /**\n         * Determine if the user was authenticated via \"remember me\" cookie.\n         *\n         * @return bool \n         * @static \n         */        public static function viaRemember()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->viaRemember();\n        }\n                    /**\n         * Set the number of minutes the remember me cookie should be valid for.\n         *\n         * @param int $minutes\n         * @return \\Illuminate\\Auth\\SessionGuard \n         * @static \n         */        public static function setRememberDuration($minutes)\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->setRememberDuration($minutes);\n        }\n                    /**\n         * Get the cookie creator instance used by the guard.\n         *\n         * @return \\Illuminate\\Contracts\\Cookie\\QueueingFactory \n         * @throws \\RuntimeException\n         * @static \n         */        public static function getCookieJar()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->getCookieJar();\n        }\n                    /**\n         * Set the cookie creator instance used by the guard.\n         *\n         * @param \\Illuminate\\Contracts\\Cookie\\QueueingFactory $cookie\n         * @return void \n         * @static \n         */        public static function setCookieJar($cookie)\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        $instance->setCookieJar($cookie);\n        }\n                    /**\n         * Get the event dispatcher instance.\n         *\n         * @return \\Illuminate\\Contracts\\Events\\Dispatcher \n         * @static \n         */        public static function getDispatcher()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->getDispatcher();\n        }\n                    /**\n         * Set the event dispatcher instance.\n         *\n         * @param \\Illuminate\\Contracts\\Events\\Dispatcher $events\n         * @return void \n         * @static \n         */        public static function setDispatcher($events)\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        $instance->setDispatcher($events);\n        }\n                    /**\n         * Get the session store used by the guard.\n         *\n         * @return \\Illuminate\\Contracts\\Session\\Session \n         * @static \n         */        public static function getSession()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->getSession();\n        }\n                    /**\n         * Return the currently cached user.\n         *\n         * @return \\App\\Models\\User|null \n         * @static \n         */        public static function getUser()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->getUser();\n        }\n                    /**\n         * Set the current user.\n         *\n         * @param \\Illuminate\\Contracts\\Auth\\Authenticatable $user\n         * @return \\Illuminate\\Auth\\SessionGuard \n         * @static \n         */        public static function setUser($user)\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->setUser($user);\n        }\n                    /**\n         * Get the current request instance.\n         *\n         * @return \\Symfony\\Component\\HttpFoundation\\Request \n         * @static \n         */        public static function getRequest()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->getRequest();\n        }\n                    /**\n         * Set the current request instance.\n         *\n         * @param \\Symfony\\Component\\HttpFoundation\\Request $request\n         * @return \\Illuminate\\Auth\\SessionGuard \n         * @static \n         */        public static function setRequest($request)\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->setRequest($request);\n        }\n                    /**\n         * Get the timebox instance used by the guard.\n         *\n         * @return \\Illuminate\\Support\\Timebox \n         * @static \n         */        public static function getTimebox()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->getTimebox();\n        }\n                    /**\n         * Determine if the current user is authenticated. If not, throw an exception.\n         *\n         * @return \\App\\Models\\User \n         * @throws \\Illuminate\\Auth\\AuthenticationException\n         * @static \n         */        public static function authenticate()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->authenticate();\n        }\n                    /**\n         * Determine if the guard has a user instance.\n         *\n         * @return bool \n         * @static \n         */        public static function hasUser()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->hasUser();\n        }\n                    /**\n         * Determine if the current user is authenticated.\n         *\n         * @return bool \n         * @static \n         */        public static function check()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->check();\n        }\n                    /**\n         * Determine if the current user is a guest.\n         *\n         * @return bool \n         * @static \n         */        public static function guest()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->guest();\n        }\n                    /**\n         * Forget the current user.\n         *\n         * @return \\Illuminate\\Auth\\SessionGuard \n         * @static \n         */        public static function forgetUser()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->forgetUser();\n        }\n                    /**\n         * Get the user provider used by the guard.\n         *\n         * @return \\Illuminate\\Contracts\\Auth\\UserProvider \n         * @static \n         */        public static function getProvider()\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        return $instance->getProvider();\n        }\n                    /**\n         * Set the user provider used by the guard.\n         *\n         * @param \\Illuminate\\Contracts\\Auth\\UserProvider $provider\n         * @return void \n         * @static \n         */        public static function setProvider($provider)\n        {\n                        /** @var \\Illuminate\\Auth\\SessionGuard $instance */\n                        $instance->setProvider($provider);\n        }\n                    /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @param-closure-this static  $macro\n         * @return void \n         * @static \n         */        public static function macro($name, $macro)\n        {\n                        \\Illuminate\\Auth\\SessionGuard::macro($name, $macro);\n        }\n                    /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void \n         * @throws \\ReflectionException\n         * @static \n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\Illuminate\\Auth\\SessionGuard::mixin($mixin, $replace);\n        }\n                    /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */        public static function hasMacro($name)\n        {\n                        return \\Illuminate\\Auth\\SessionGuard::hasMacro($name);\n        }\n                    /**\n         * Flush the existing macros.\n         *\n         * @return void \n         * @static \n         */        public static function flushMacros()\n        {\n                        \\Illuminate\\Auth\\SessionGuard::flushMacros();\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\View\\Compilers\\BladeCompiler\n     */        class Blade {\n                    /**\n         * Compile the view at the given path.\n         *\n         * @param string|null $path\n         * @return void \n         * @static \n         */        public static function compile($path = null)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->compile($path);\n        }\n                    /**\n         * Get the path currently being compiled.\n         *\n         * @return string \n         * @static \n         */        public static function getPath()\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        return $instance->getPath();\n        }\n                    /**\n         * Set the path currently being compiled.\n         *\n         * @param string $path\n         * @return void \n         * @static \n         */        public static function setPath($path)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->setPath($path);\n        }\n                    /**\n         * Compile the given Blade template contents.\n         *\n         * @param string $value\n         * @return string \n         * @static \n         */        public static function compileString($value)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        return $instance->compileString($value);\n        }\n                    /**\n         * Evaluate and render a Blade string to HTML.\n         *\n         * @param string $string\n         * @param array $data\n         * @param bool $deleteCachedView\n         * @return string \n         * @static \n         */        public static function render($string, $data = [], $deleteCachedView = false)\n        {\n                        return \\Illuminate\\View\\Compilers\\BladeCompiler::render($string, $data, $deleteCachedView);\n        }\n                    /**\n         * Render a component instance to HTML.\n         *\n         * @param \\Illuminate\\View\\Component $component\n         * @return string \n         * @static \n         */        public static function renderComponent($component)\n        {\n                        return \\Illuminate\\View\\Compilers\\BladeCompiler::renderComponent($component);\n        }\n                    /**\n         * Strip the parentheses from the given expression.\n         *\n         * @param string $expression\n         * @return string \n         * @static \n         */        public static function stripParentheses($expression)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        return $instance->stripParentheses($expression);\n        }\n                    /**\n         * Register a custom Blade compiler.\n         *\n         * @param callable $compiler\n         * @return void \n         * @static \n         */        public static function extend($compiler)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->extend($compiler);\n        }\n                    /**\n         * Get the extensions used by the compiler.\n         *\n         * @return array \n         * @static \n         */        public static function getExtensions()\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        return $instance->getExtensions();\n        }\n                    /**\n         * Register an \"if\" statement directive.\n         *\n         * @param string $name\n         * @param callable $callback\n         * @return void \n         * @static \n         */        public static function if($name, $callback)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->if($name, $callback);\n        }\n                    /**\n         * Check the result of a condition.\n         *\n         * @param string $name\n         * @param mixed $parameters\n         * @return bool \n         * @static \n         */        public static function check($name, ...$parameters)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        return $instance->check($name, ...$parameters);\n        }\n                    /**\n         * Register a class-based component alias directive.\n         *\n         * @param string $class\n         * @param string|null $alias\n         * @param string $prefix\n         * @return void \n         * @static \n         */        public static function component($class, $alias = null, $prefix = '')\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->component($class, $alias, $prefix);\n        }\n                    /**\n         * Register an array of class-based components.\n         *\n         * @param array $components\n         * @param string $prefix\n         * @return void \n         * @static \n         */        public static function components($components, $prefix = '')\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->components($components, $prefix);\n        }\n                    /**\n         * Get the registered class component aliases.\n         *\n         * @return array \n         * @static \n         */        public static function getClassComponentAliases()\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        return $instance->getClassComponentAliases();\n        }\n                    /**\n         * Register a new anonymous component path.\n         *\n         * @param string $path\n         * @param string|null $prefix\n         * @return void \n         * @static \n         */        public static function anonymousComponentPath($path, $prefix = null)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->anonymousComponentPath($path, $prefix);\n        }\n                    /**\n         * Register an anonymous component namespace.\n         *\n         * @param string $directory\n         * @param string|null $prefix\n         * @return void \n         * @static \n         */        public static function anonymousComponentNamespace($directory, $prefix = null)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->anonymousComponentNamespace($directory, $prefix);\n        }\n                    /**\n         * Register a class-based component namespace.\n         *\n         * @param string $namespace\n         * @param string $prefix\n         * @return void \n         * @static \n         */        public static function componentNamespace($namespace, $prefix)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->componentNamespace($namespace, $prefix);\n        }\n                    /**\n         * Get the registered anonymous component paths.\n         *\n         * @return array \n         * @static \n         */        public static function getAnonymousComponentPaths()\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        return $instance->getAnonymousComponentPaths();\n        }\n                    /**\n         * Get the registered anonymous component namespaces.\n         *\n         * @return array \n         * @static \n         */        public static function getAnonymousComponentNamespaces()\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        return $instance->getAnonymousComponentNamespaces();\n        }\n                    /**\n         * Get the registered class component namespaces.\n         *\n         * @return array \n         * @static \n         */        public static function getClassComponentNamespaces()\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        return $instance->getClassComponentNamespaces();\n        }\n                    /**\n         * Register a component alias directive.\n         *\n         * @param string $path\n         * @param string|null $alias\n         * @return void \n         * @static \n         */        public static function aliasComponent($path, $alias = null)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->aliasComponent($path, $alias);\n        }\n                    /**\n         * Register an include alias directive.\n         *\n         * @param string $path\n         * @param string|null $alias\n         * @return void \n         * @static \n         */        public static function include($path, $alias = null)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->include($path, $alias);\n        }\n                    /**\n         * Register an include alias directive.\n         *\n         * @param string $path\n         * @param string|null $alias\n         * @return void \n         * @static \n         */        public static function aliasInclude($path, $alias = null)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->aliasInclude($path, $alias);\n        }\n                    /**\n         * Register a handler for custom directives.\n         *\n         * @param string $name\n         * @param callable $handler\n         * @return void \n         * @throws \\InvalidArgumentException\n         * @static \n         */        public static function directive($name, $handler)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->directive($name, $handler);\n        }\n                    /**\n         * Get the list of custom directives.\n         *\n         * @return array \n         * @static \n         */        public static function getCustomDirectives()\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        return $instance->getCustomDirectives();\n        }\n                    /**\n         * Indicate that the following callable should be used to prepare strings for compilation.\n         *\n         * @param callable $callback\n         * @return \\Illuminate\\View\\Compilers\\BladeCompiler \n         * @static \n         */        public static function prepareStringsForCompilationUsing($callback)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        return $instance->prepareStringsForCompilationUsing($callback);\n        }\n                    /**\n         * Register a new precompiler.\n         *\n         * @param callable $precompiler\n         * @return void \n         * @static \n         */        public static function precompiler($precompiler)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->precompiler($precompiler);\n        }\n                    /**\n         * Set the echo format to be used by the compiler.\n         *\n         * @param string $format\n         * @return void \n         * @static \n         */        public static function setEchoFormat($format)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->setEchoFormat($format);\n        }\n                    /**\n         * Set the \"echo\" format to double encode entities.\n         *\n         * @return void \n         * @static \n         */        public static function withDoubleEncoding()\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->withDoubleEncoding();\n        }\n                    /**\n         * Set the \"echo\" format to not double encode entities.\n         *\n         * @return void \n         * @static \n         */        public static function withoutDoubleEncoding()\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->withoutDoubleEncoding();\n        }\n                    /**\n         * Indicate that component tags should not be compiled.\n         *\n         * @return void \n         * @static \n         */        public static function withoutComponentTags()\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->withoutComponentTags();\n        }\n                    /**\n         * Get the path to the compiled version of a view.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */        public static function getCompiledPath($path)\n        {            //Method inherited from \\Illuminate\\View\\Compilers\\Compiler         \n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        return $instance->getCompiledPath($path);\n        }\n                    /**\n         * Determine if the view at the given path is expired.\n         *\n         * @param string $path\n         * @return bool \n         * @throws \\ErrorException\n         * @static \n         */        public static function isExpired($path)\n        {            //Method inherited from \\Illuminate\\View\\Compilers\\Compiler         \n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        return $instance->isExpired($path);\n        }\n                    /**\n         * Get a new component hash for a component name.\n         *\n         * @param string $component\n         * @return string \n         * @static \n         */        public static function newComponentHash($component)\n        {\n                        return \\Illuminate\\View\\Compilers\\BladeCompiler::newComponentHash($component);\n        }\n                    /**\n         * Compile a class component opening.\n         *\n         * @param string $component\n         * @param string $alias\n         * @param string $data\n         * @param string $hash\n         * @return string \n         * @static \n         */        public static function compileClassComponentOpening($component, $alias, $data, $hash)\n        {\n                        return \\Illuminate\\View\\Compilers\\BladeCompiler::compileClassComponentOpening($component, $alias, $data, $hash);\n        }\n                    /**\n         * Compile the end-component statements into valid PHP.\n         *\n         * @return string \n         * @static \n         */        public static function compileEndComponentClass()\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        return $instance->compileEndComponentClass();\n        }\n                    /**\n         * Sanitize the given component attribute value.\n         *\n         * @param mixed $value\n         * @return mixed \n         * @static \n         */        public static function sanitizeComponentAttribute($value)\n        {\n                        return \\Illuminate\\View\\Compilers\\BladeCompiler::sanitizeComponentAttribute($value);\n        }\n                    /**\n         * Compile an end-once block into valid PHP.\n         *\n         * @return string \n         * @static \n         */        public static function compileEndOnce()\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        return $instance->compileEndOnce();\n        }\n                    /**\n         * Add a handler to be executed before echoing a given class.\n         *\n         * @param string|callable $class\n         * @param callable|null $handler\n         * @return void \n         * @static \n         */        public static function stringable($class, $handler = null)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        $instance->stringable($class, $handler);\n        }\n                    /**\n         * Compile Blade echos into valid PHP.\n         *\n         * @param string $value\n         * @return string \n         * @static \n         */        public static function compileEchos($value)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        return $instance->compileEchos($value);\n        }\n                    /**\n         * Apply the echo handler for the value if it exists.\n         *\n         * @param string $value\n         * @return string \n         * @static \n         */        public static function applyEchoHandler($value)\n        {\n                        /** @var \\Illuminate\\View\\Compilers\\BladeCompiler $instance */\n                        return $instance->applyEchoHandler($value);\n        }\n            }\n            /**\n     * \n     *\n     * @method static mixed auth(\\Illuminate\\Http\\Request $request)\n     * @method static mixed validAuthenticationResponse(\\Illuminate\\Http\\Request $request, mixed $result)\n     * @method static void broadcast(array $channels, string $event, array $payload = [])\n     * @method static array|null resolveAuthenticatedUser(\\Illuminate\\Http\\Request $request)\n     * @method static void resolveAuthenticatedUserUsing(\\Closure $callback)\n     * @method static \\Illuminate\\Broadcasting\\Broadcasters\\Broadcaster channel(\\Illuminate\\Contracts\\Broadcasting\\HasBroadcastChannel|string $channel, callable|string $callback, array $options = [])\n     * @method static \\Illuminate\\Support\\Collection getChannels()\n     * @see \\Illuminate\\Broadcasting\\BroadcastManager\n     * @see \\Illuminate\\Broadcasting\\Broadcasters\\Broadcaster\n     */        class Broadcast {\n                    /**\n         * Register the routes for handling broadcast channel authentication and sockets.\n         *\n         * @param array|null $attributes\n         * @return void \n         * @static \n         */        public static function routes($attributes = null)\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        $instance->routes($attributes);\n        }\n                    /**\n         * Register the routes for handling broadcast user authentication.\n         *\n         * @param array|null $attributes\n         * @return void \n         * @static \n         */        public static function userRoutes($attributes = null)\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        $instance->userRoutes($attributes);\n        }\n                    /**\n         * Register the routes for handling broadcast authentication and sockets.\n         * \n         * Alias of \"routes\" method.\n         *\n         * @param array|null $attributes\n         * @return void \n         * @static \n         */        public static function channelRoutes($attributes = null)\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        $instance->channelRoutes($attributes);\n        }\n                    /**\n         * Get the socket ID for the given request.\n         *\n         * @param \\Illuminate\\Http\\Request|null $request\n         * @return string|null \n         * @static \n         */        public static function socket($request = null)\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        return $instance->socket($request);\n        }\n                    /**\n         * Begin sending an anonymous broadcast to the given channels.\n         *\n         * @static \n         */        public static function on($channels)\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        return $instance->on($channels);\n        }\n                    /**\n         * Begin sending an anonymous broadcast to the given private channels.\n         *\n         * @static \n         */        public static function private($channel)\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        return $instance->private($channel);\n        }\n                    /**\n         * Begin sending an anonymous broadcast to the given presence channels.\n         *\n         * @static \n         */        public static function presence($channel)\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        return $instance->presence($channel);\n        }\n                    /**\n         * Begin broadcasting an event.\n         *\n         * @param mixed|null $event\n         * @return \\Illuminate\\Broadcasting\\PendingBroadcast \n         * @static \n         */        public static function event($event = null)\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        return $instance->event($event);\n        }\n                    /**\n         * Queue the given event for broadcast.\n         *\n         * @param mixed $event\n         * @return void \n         * @static \n         */        public static function queue($event)\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        $instance->queue($event);\n        }\n                    /**\n         * Get a driver instance.\n         *\n         * @param string|null $driver\n         * @return mixed \n         * @static \n         */        public static function connection($driver = null)\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        return $instance->connection($driver);\n        }\n                    /**\n         * Get a driver instance.\n         *\n         * @param string|null $name\n         * @return mixed \n         * @static \n         */        public static function driver($name = null)\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        return $instance->driver($name);\n        }\n                    /**\n         * Get a Pusher instance for the given configuration.\n         *\n         * @param array $config\n         * @return \\Pusher\\Pusher \n         * @static \n         */        public static function pusher($config)\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        return $instance->pusher($config);\n        }\n                    /**\n         * Get an Ably instance for the given configuration.\n         *\n         * @param array $config\n         * @return \\Ably\\AblyRest \n         * @static \n         */        public static function ably($config)\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        return $instance->ably($config);\n        }\n                    /**\n         * Get the default driver name.\n         *\n         * @return string \n         * @static \n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n                    /**\n         * Set the default driver name.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */        public static function setDefaultDriver($name)\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        $instance->setDefaultDriver($name);\n        }\n                    /**\n         * Disconnect the given disk and remove from local cache.\n         *\n         * @param string|null $name\n         * @return void \n         * @static \n         */        public static function purge($name = null)\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        $instance->purge($name);\n        }\n                    /**\n         * Register a custom driver creator Closure.\n         *\n         * @param string $driver\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Broadcasting\\BroadcastManager \n         * @static \n         */        public static function extend($driver, $callback)\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        return $instance->extend($driver, $callback);\n        }\n                    /**\n         * Get the application instance used by the manager.\n         *\n         * @return \\Illuminate\\Contracts\\Foundation\\Application \n         * @static \n         */        public static function getApplication()\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        return $instance->getApplication();\n        }\n                    /**\n         * Set the application instance used by the manager.\n         *\n         * @param \\Illuminate\\Contracts\\Foundation\\Application $app\n         * @return \\Illuminate\\Broadcasting\\BroadcastManager \n         * @static \n         */        public static function setApplication($app)\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        return $instance->setApplication($app);\n        }\n                    /**\n         * Forget all of the resolved driver instances.\n         *\n         * @return \\Illuminate\\Broadcasting\\BroadcastManager \n         * @static \n         */        public static function forgetDrivers()\n        {\n                        /** @var \\Illuminate\\Broadcasting\\BroadcastManager $instance */\n                        return $instance->forgetDrivers();\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Bus\\Dispatcher\n     * @see \\Illuminate\\Support\\Testing\\Fakes\\BusFake\n     */        class Bus {\n                    /**\n         * Dispatch a command to its appropriate handler.\n         *\n         * @param mixed $command\n         * @return mixed \n         * @static \n         */        public static function dispatch($command)\n        {\n                        /** @var \\Illuminate\\Bus\\Dispatcher $instance */\n                        return $instance->dispatch($command);\n        }\n                    /**\n         * Dispatch a command to its appropriate handler in the current process.\n         * \n         * Queueable jobs will be dispatched to the \"sync\" queue.\n         *\n         * @param mixed $command\n         * @param mixed $handler\n         * @return mixed \n         * @static \n         */        public static function dispatchSync($command, $handler = null)\n        {\n                        /** @var \\Illuminate\\Bus\\Dispatcher $instance */\n                        return $instance->dispatchSync($command, $handler);\n        }\n                    /**\n         * Dispatch a command to its appropriate handler in the current process without using the synchronous queue.\n         *\n         * @param mixed $command\n         * @param mixed $handler\n         * @return mixed \n         * @static \n         */        public static function dispatchNow($command, $handler = null)\n        {\n                        /** @var \\Illuminate\\Bus\\Dispatcher $instance */\n                        return $instance->dispatchNow($command, $handler);\n        }\n                    /**\n         * Attempt to find the batch with the given ID.\n         *\n         * @param string $batchId\n         * @return \\Illuminate\\Bus\\Batch|null \n         * @static \n         */        public static function findBatch($batchId)\n        {\n                        /** @var \\Illuminate\\Bus\\Dispatcher $instance */\n                        return $instance->findBatch($batchId);\n        }\n                    /**\n         * Create a new batch of queueable jobs.\n         *\n         * @param \\Illuminate\\Support\\Collection|array|mixed $jobs\n         * @return \\Illuminate\\Bus\\PendingBatch \n         * @static \n         */        public static function batch($jobs)\n        {\n                        /** @var \\Illuminate\\Bus\\Dispatcher $instance */\n                        return $instance->batch($jobs);\n        }\n                    /**\n         * Create a new chain of queueable jobs.\n         *\n         * @param \\Illuminate\\Support\\Collection|array $jobs\n         * @return \\Illuminate\\Foundation\\Bus\\PendingChain \n         * @static \n         */        public static function chain($jobs)\n        {\n                        /** @var \\Illuminate\\Bus\\Dispatcher $instance */\n                        return $instance->chain($jobs);\n        }\n                    /**\n         * Determine if the given command has a handler.\n         *\n         * @param mixed $command\n         * @return bool \n         * @static \n         */        public static function hasCommandHandler($command)\n        {\n                        /** @var \\Illuminate\\Bus\\Dispatcher $instance */\n                        return $instance->hasCommandHandler($command);\n        }\n                    /**\n         * Retrieve the handler for a command.\n         *\n         * @param mixed $command\n         * @return bool|mixed \n         * @static \n         */        public static function getCommandHandler($command)\n        {\n                        /** @var \\Illuminate\\Bus\\Dispatcher $instance */\n                        return $instance->getCommandHandler($command);\n        }\n                    /**\n         * Dispatch a command to its appropriate handler behind a queue.\n         *\n         * @param mixed $command\n         * @return mixed \n         * @throws \\RuntimeException\n         * @static \n         */        public static function dispatchToQueue($command)\n        {\n                        /** @var \\Illuminate\\Bus\\Dispatcher $instance */\n                        return $instance->dispatchToQueue($command);\n        }\n                    /**\n         * Dispatch a command to its appropriate handler after the current process.\n         *\n         * @param mixed $command\n         * @param mixed $handler\n         * @return void \n         * @static \n         */        public static function dispatchAfterResponse($command, $handler = null)\n        {\n                        /** @var \\Illuminate\\Bus\\Dispatcher $instance */\n                        $instance->dispatchAfterResponse($command, $handler);\n        }\n                    /**\n         * Set the pipes through which commands should be piped before dispatching.\n         *\n         * @param array $pipes\n         * @return \\Illuminate\\Bus\\Dispatcher \n         * @static \n         */        public static function pipeThrough($pipes)\n        {\n                        /** @var \\Illuminate\\Bus\\Dispatcher $instance */\n                        return $instance->pipeThrough($pipes);\n        }\n                    /**\n         * Map a command to a handler.\n         *\n         * @param array $map\n         * @return \\Illuminate\\Bus\\Dispatcher \n         * @static \n         */        public static function map($map)\n        {\n                        /** @var \\Illuminate\\Bus\\Dispatcher $instance */\n                        return $instance->map($map);\n        }\n                    /**\n         * Specify the jobs that should be dispatched instead of faked.\n         *\n         * @param array|string $jobsToDispatch\n         * @return \\Illuminate\\Support\\Testing\\Fakes\\BusFake \n         * @static \n         */        public static function except($jobsToDispatch)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        return $instance->except($jobsToDispatch);\n        }\n                    /**\n         * Assert if a job was dispatched based on a truth-test callback.\n         *\n         * @param string|\\Closure $command\n         * @param callable|int|null $callback\n         * @return void \n         * @static \n         */        public static function assertDispatched($command, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        $instance->assertDispatched($command, $callback);\n        }\n                    /**\n         * Assert if a job was pushed a number of times.\n         *\n         * @param string|\\Closure $command\n         * @param int $times\n         * @return void \n         * @static \n         */        public static function assertDispatchedTimes($command, $times = 1)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        $instance->assertDispatchedTimes($command, $times);\n        }\n                    /**\n         * Determine if a job was dispatched based on a truth-test callback.\n         *\n         * @param string|\\Closure $command\n         * @param callable|null $callback\n         * @return void \n         * @static \n         */        public static function assertNotDispatched($command, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        $instance->assertNotDispatched($command, $callback);\n        }\n                    /**\n         * Assert that no jobs were dispatched.\n         *\n         * @return void \n         * @static \n         */        public static function assertNothingDispatched()\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        $instance->assertNothingDispatched();\n        }\n                    /**\n         * Assert if a job was explicitly dispatched synchronously based on a truth-test callback.\n         *\n         * @param string|\\Closure $command\n         * @param callable|int|null $callback\n         * @return void \n         * @static \n         */        public static function assertDispatchedSync($command, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        $instance->assertDispatchedSync($command, $callback);\n        }\n                    /**\n         * Assert if a job was pushed synchronously a number of times.\n         *\n         * @param string|\\Closure $command\n         * @param int $times\n         * @return void \n         * @static \n         */        public static function assertDispatchedSyncTimes($command, $times = 1)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        $instance->assertDispatchedSyncTimes($command, $times);\n        }\n                    /**\n         * Determine if a job was dispatched based on a truth-test callback.\n         *\n         * @param string|\\Closure $command\n         * @param callable|null $callback\n         * @return void \n         * @static \n         */        public static function assertNotDispatchedSync($command, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        $instance->assertNotDispatchedSync($command, $callback);\n        }\n                    /**\n         * Assert if a job was dispatched after the response was sent based on a truth-test callback.\n         *\n         * @param string|\\Closure $command\n         * @param callable|int|null $callback\n         * @return void \n         * @static \n         */        public static function assertDispatchedAfterResponse($command, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        $instance->assertDispatchedAfterResponse($command, $callback);\n        }\n                    /**\n         * Assert if a job was pushed after the response was sent a number of times.\n         *\n         * @param string|\\Closure $command\n         * @param int $times\n         * @return void \n         * @static \n         */        public static function assertDispatchedAfterResponseTimes($command, $times = 1)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        $instance->assertDispatchedAfterResponseTimes($command, $times);\n        }\n                    /**\n         * Determine if a job was dispatched based on a truth-test callback.\n         *\n         * @param string|\\Closure $command\n         * @param callable|null $callback\n         * @return void \n         * @static \n         */        public static function assertNotDispatchedAfterResponse($command, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        $instance->assertNotDispatchedAfterResponse($command, $callback);\n        }\n                    /**\n         * Assert if a chain of jobs was dispatched.\n         *\n         * @param array $expectedChain\n         * @return void \n         * @static \n         */        public static function assertChained($expectedChain)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        $instance->assertChained($expectedChain);\n        }\n                    /**\n         * Assert if a job was dispatched with an empty chain based on a truth-test callback.\n         *\n         * @param string|\\Closure $command\n         * @param callable|null $callback\n         * @return void \n         * @static \n         */        public static function assertDispatchedWithoutChain($command, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        $instance->assertDispatchedWithoutChain($command, $callback);\n        }\n                    /**\n         * Create a new assertion about a chained batch.\n         *\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Support\\Testing\\Fakes\\ChainedBatchTruthTest \n         * @static \n         */        public static function chainedBatch($callback)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        return $instance->chainedBatch($callback);\n        }\n                    /**\n         * Assert if a batch was dispatched based on a truth-test callback.\n         *\n         * @param callable $callback\n         * @return void \n         * @static \n         */        public static function assertBatched($callback)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        $instance->assertBatched($callback);\n        }\n                    /**\n         * Assert the number of batches that have been dispatched.\n         *\n         * @param int $count\n         * @return void \n         * @static \n         */        public static function assertBatchCount($count)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        $instance->assertBatchCount($count);\n        }\n                    /**\n         * Assert that no batched jobs were dispatched.\n         *\n         * @return void \n         * @static \n         */        public static function assertNothingBatched()\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        $instance->assertNothingBatched();\n        }\n                    /**\n         * Get all of the jobs matching a truth-test callback.\n         *\n         * @param string $command\n         * @param callable|null $callback\n         * @return \\Illuminate\\Support\\Collection \n         * @static \n         */        public static function dispatched($command, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        return $instance->dispatched($command, $callback);\n        }\n                    /**\n         * Get all of the jobs dispatched synchronously matching a truth-test callback.\n         *\n         * @param string $command\n         * @param callable|null $callback\n         * @return \\Illuminate\\Support\\Collection \n         * @static \n         */        public static function dispatchedSync($command, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        return $instance->dispatchedSync($command, $callback);\n        }\n                    /**\n         * Get all of the jobs dispatched after the response was sent matching a truth-test callback.\n         *\n         * @param string $command\n         * @param callable|null $callback\n         * @return \\Illuminate\\Support\\Collection \n         * @static \n         */        public static function dispatchedAfterResponse($command, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        return $instance->dispatchedAfterResponse($command, $callback);\n        }\n                    /**\n         * Get all of the pending batches matching a truth-test callback.\n         *\n         * @param callable $callback\n         * @return \\Illuminate\\Support\\Collection \n         * @static \n         */        public static function batched($callback)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        return $instance->batched($callback);\n        }\n                    /**\n         * Determine if there are any stored commands for a given class.\n         *\n         * @param string $command\n         * @return bool \n         * @static \n         */        public static function hasDispatched($command)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        return $instance->hasDispatched($command);\n        }\n                    /**\n         * Determine if there are any stored commands for a given class.\n         *\n         * @param string $command\n         * @return bool \n         * @static \n         */        public static function hasDispatchedSync($command)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        return $instance->hasDispatchedSync($command);\n        }\n                    /**\n         * Determine if there are any stored commands for a given class.\n         *\n         * @param string $command\n         * @return bool \n         * @static \n         */        public static function hasDispatchedAfterResponse($command)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        return $instance->hasDispatchedAfterResponse($command);\n        }\n                    /**\n         * Dispatch an empty job batch for testing.\n         *\n         * @param string $name\n         * @return \\Illuminate\\Bus\\Batch \n         * @static \n         */        public static function dispatchFakeBatch($name = '')\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        return $instance->dispatchFakeBatch($name);\n        }\n                    /**\n         * Record the fake pending batch dispatch.\n         *\n         * @param \\Illuminate\\Bus\\PendingBatch $pendingBatch\n         * @return \\Illuminate\\Bus\\Batch \n         * @static \n         */        public static function recordPendingBatch($pendingBatch)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        return $instance->recordPendingBatch($pendingBatch);\n        }\n                    /**\n         * Specify if commands should be serialized and restored when being batched.\n         *\n         * @param bool $serializeAndRestore\n         * @return \\Illuminate\\Support\\Testing\\Fakes\\BusFake \n         * @static \n         */        public static function serializeAndRestore($serializeAndRestore = true)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        return $instance->serializeAndRestore($serializeAndRestore);\n        }\n                    /**\n         * Get the batches that have been dispatched.\n         *\n         * @return array \n         * @static \n         */        public static function dispatchedBatches()\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\BusFake $instance */\n                        return $instance->dispatchedBatches();\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Cache\\CacheManager\n     * @see \\Illuminate\\Cache\\Repository\n     */        class Cache {\n                    /**\n         * Get a cache store instance by name, wrapped in a repository.\n         *\n         * @param string|null $name\n         * @return \\Illuminate\\Contracts\\Cache\\Repository \n         * @static \n         */        public static function store($name = null)\n        {\n                        /** @var \\Illuminate\\Cache\\CacheManager $instance */\n                        return $instance->store($name);\n        }\n                    /**\n         * Get a cache driver instance.\n         *\n         * @param string|null $driver\n         * @return \\Illuminate\\Contracts\\Cache\\Repository \n         * @static \n         */        public static function driver($driver = null)\n        {\n                        /** @var \\Illuminate\\Cache\\CacheManager $instance */\n                        return $instance->driver($driver);\n        }\n                    /**\n         * Resolve the given store.\n         *\n         * @param string $name\n         * @return \\Illuminate\\Contracts\\Cache\\Repository \n         * @throws \\InvalidArgumentException\n         * @static \n         */        public static function resolve($name)\n        {\n                        /** @var \\Illuminate\\Cache\\CacheManager $instance */\n                        return $instance->resolve($name);\n        }\n                    /**\n         * Create a new cache repository with the given implementation.\n         *\n         * @param \\Illuminate\\Contracts\\Cache\\Store $store\n         * @param array $config\n         * @return \\Illuminate\\Cache\\Repository \n         * @static \n         */        public static function repository($store, $config = [])\n        {\n                        /** @var \\Illuminate\\Cache\\CacheManager $instance */\n                        return $instance->repository($store, $config);\n        }\n                    /**\n         * Re-set the event dispatcher on all resolved cache repositories.\n         *\n         * @return void \n         * @static \n         */        public static function refreshEventDispatcher()\n        {\n                        /** @var \\Illuminate\\Cache\\CacheManager $instance */\n                        $instance->refreshEventDispatcher();\n        }\n                    /**\n         * Get the default cache driver name.\n         *\n         * @return string \n         * @static \n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\Illuminate\\Cache\\CacheManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n                    /**\n         * Set the default cache driver name.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */        public static function setDefaultDriver($name)\n        {\n                        /** @var \\Illuminate\\Cache\\CacheManager $instance */\n                        $instance->setDefaultDriver($name);\n        }\n                    /**\n         * Unset the given driver instances.\n         *\n         * @param array|string|null $name\n         * @return \\Illuminate\\Cache\\CacheManager \n         * @static \n         */        public static function forgetDriver($name = null)\n        {\n                        /** @var \\Illuminate\\Cache\\CacheManager $instance */\n                        return $instance->forgetDriver($name);\n        }\n                    /**\n         * Disconnect the given driver and remove from local cache.\n         *\n         * @param string|null $name\n         * @return void \n         * @static \n         */        public static function purge($name = null)\n        {\n                        /** @var \\Illuminate\\Cache\\CacheManager $instance */\n                        $instance->purge($name);\n        }\n                    /**\n         * Register a custom driver creator Closure.\n         *\n         * @param string $driver\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Cache\\CacheManager \n         * @static \n         */        public static function extend($driver, $callback)\n        {\n                        /** @var \\Illuminate\\Cache\\CacheManager $instance */\n                        return $instance->extend($driver, $callback);\n        }\n                    /**\n         * Set the application instance used by the manager.\n         *\n         * @param \\Illuminate\\Contracts\\Foundation\\Application $app\n         * @return \\Illuminate\\Cache\\CacheManager \n         * @static \n         */        public static function setApplication($app)\n        {\n                        /** @var \\Illuminate\\Cache\\CacheManager $instance */\n                        return $instance->setApplication($app);\n        }\n                    /**\n         * Determine if an item exists in the cache.\n         *\n         * @param array|string $key\n         * @return bool \n         * @static \n         */        public static function has($key)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->has($key);\n        }\n                    /**\n         * Determine if an item doesn't exist in the cache.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */        public static function missing($key)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->missing($key);\n        }\n                    /**\n         * Retrieve an item from the cache by key.\n         *\n         * @template TCacheValue\n         * @param array|string $key\n         * @param \\Illuminate\\Cache\\TCacheValue|\\Illuminate\\Cache\\(\\Closure():  TCacheValue)  $default\n         * @return \\Illuminate\\Cache\\(TCacheValue is null ? mixed : TCacheValue)\n         * @static \n         */        public static function get($key, $default = null)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->get($key, $default);\n        }\n                    /**\n         * Retrieve multiple items from the cache by key.\n         * \n         * Items not found in the cache will have a null value.\n         *\n         * @param array $keys\n         * @return array \n         * @static \n         */        public static function many($keys)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->many($keys);\n        }\n                    /**\n         * Obtains multiple cache items by their unique keys.\n         *\n         * @return \\Illuminate\\Cache\\iterable \n         * @param \\Psr\\SimpleCache\\iterable<string> $keys A list of keys that can be obtained in a single operation.\n         * @param mixed $default Default value to return for keys that do not exist.\n         * @return \\Psr\\SimpleCache\\iterable<string, mixed> A list of key => value pairs. Cache keys that do not exist or are stale will have $default as value.\n         * @throws \\Psr\\SimpleCache\\InvalidArgumentException\n         *   MUST be thrown if $keys is neither an array nor a Traversable,\n         *   or if any of the $keys are not a legal value.\n         * @static \n         */        public static function getMultiple($keys, $default = null)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->getMultiple($keys, $default);\n        }\n                    /**\n         * Retrieve an item from the cache and delete it.\n         *\n         * @template TCacheValue\n         * @param array|string $key\n         * @param \\Illuminate\\Cache\\TCacheValue|\\Illuminate\\Cache\\(\\Closure():  TCacheValue)  $default\n         * @return \\Illuminate\\Cache\\(TCacheValue is null ? mixed : TCacheValue)\n         * @static \n         */        public static function pull($key, $default = null)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->pull($key, $default);\n        }\n                    /**\n         * Store an item in the cache.\n         *\n         * @param array|string $key\n         * @param mixed $value\n         * @param \\DateTimeInterface|\\DateInterval|int|null $ttl\n         * @return bool \n         * @static \n         */        public static function put($key, $value, $ttl = null)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->put($key, $value, $ttl);\n        }\n                    /**\n         * Persists data in the cache, uniquely referenced by a key with an optional expiration TTL time.\n         *\n         * @return bool \n         * @param string $key The key of the item to store.\n         * @param mixed $value The value of the item to store, must be serializable.\n         * @param null|int|\\DateInterval $ttl Optional. The TTL value of this item. If no value is sent and\n         *                                      the driver supports TTL then the library may set a default value\n         *                                      for it or let the driver take care of that.\n         * @return bool True on success and false on failure.\n         * @throws \\Psr\\SimpleCache\\InvalidArgumentException\n         *   MUST be thrown if the $key string is not a legal value.\n         * @static \n         */        public static function set($key, $value, $ttl = null)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->set($key, $value, $ttl);\n        }\n                    /**\n         * Store multiple items in the cache for a given number of seconds.\n         *\n         * @param array $values\n         * @param \\DateTimeInterface|\\DateInterval|int|null $ttl\n         * @return bool \n         * @static \n         */        public static function putMany($values, $ttl = null)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->putMany($values, $ttl);\n        }\n                    /**\n         * Persists a set of key => value pairs in the cache, with an optional TTL.\n         *\n         * @return bool \n         * @param \\Psr\\SimpleCache\\iterable $values A list of key => value pairs for a multiple-set operation.\n         * @param null|int|\\DateInterval $ttl Optional. The TTL value of this item. If no value is sent and\n         *                                       the driver supports TTL then the library may set a default value\n         *                                       for it or let the driver take care of that.\n         * @return bool True on success and false on failure.\n         * @throws \\Psr\\SimpleCache\\InvalidArgumentException\n         *   MUST be thrown if $values is neither an array nor a Traversable,\n         *   or if any of the $values are not a legal value.\n         * @static \n         */        public static function setMultiple($values, $ttl = null)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->setMultiple($values, $ttl);\n        }\n                    /**\n         * Store an item in the cache if the key does not exist.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @param \\DateTimeInterface|\\DateInterval|int|null $ttl\n         * @return bool \n         * @static \n         */        public static function add($key, $value, $ttl = null)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->add($key, $value, $ttl);\n        }\n                    /**\n         * Increment the value of an item in the cache.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return int|bool \n         * @static \n         */        public static function increment($key, $value = 1)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->increment($key, $value);\n        }\n                    /**\n         * Decrement the value of an item in the cache.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return int|bool \n         * @static \n         */        public static function decrement($key, $value = 1)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->decrement($key, $value);\n        }\n                    /**\n         * Store an item in the cache indefinitely.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return bool \n         * @static \n         */        public static function forever($key, $value)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->forever($key, $value);\n        }\n                    /**\n         * Get an item from the cache, or execute the given Closure and store the result.\n         *\n         * @template TCacheValue\n         * @param string $key\n         * @param \\Closure|\\DateTimeInterface|\\DateInterval|int|null $ttl\n         * @param \\Closure():  TCacheValue  $callback\n         * @return \\Illuminate\\Cache\\TCacheValue \n         * @static \n         */        public static function remember($key, $ttl, $callback)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->remember($key, $ttl, $callback);\n        }\n                    /**\n         * Get an item from the cache, or execute the given Closure and store the result forever.\n         *\n         * @template TCacheValue\n         * @param string $key\n         * @param \\Closure():  TCacheValue  $callback\n         * @return \\Illuminate\\Cache\\TCacheValue \n         * @static \n         */        public static function sear($key, $callback)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->sear($key, $callback);\n        }\n                    /**\n         * Get an item from the cache, or execute the given Closure and store the result forever.\n         *\n         * @template TCacheValue\n         * @param string $key\n         * @param \\Closure():  TCacheValue  $callback\n         * @return \\Illuminate\\Cache\\TCacheValue \n         * @static \n         */        public static function rememberForever($key, $callback)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->rememberForever($key, $callback);\n        }\n                    /**\n         * Retrieve an item from the cache by key, refreshing it in the background if it is stale.\n         *\n         * @template TCacheValue\n         * @param string $key\n         * @param \\Illuminate\\Cache\\array{  0: int, 1: int }  $ttl\n         * @param \\Illuminate\\Cache\\(callable():  TCacheValue)  $callback\n         * @param \\Illuminate\\Cache\\array{  seconds?: int, owner?: string }|null  $lock\n         * @return \\Illuminate\\Cache\\TCacheValue \n         * @static \n         */        public static function flexible($key, $ttl, $callback, $lock = null)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->flexible($key, $ttl, $callback, $lock);\n        }\n                    /**\n         * Remove an item from the cache.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */        public static function forget($key)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->forget($key);\n        }\n                    /**\n         * Delete an item from the cache by its unique key.\n         *\n         * @return bool \n         * @param string $key The unique cache key of the item to delete.\n         * @return bool True if the item was successfully removed. False if there was an error.\n         * @throws \\Psr\\SimpleCache\\InvalidArgumentException\n         *   MUST be thrown if the $key string is not a legal value.\n         * @static \n         */        public static function delete($key)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->delete($key);\n        }\n                    /**\n         * Deletes multiple cache items in a single operation.\n         *\n         * @return bool \n         * @param \\Psr\\SimpleCache\\iterable<string> $keys A list of string-based keys to be deleted.\n         * @return bool True if the items were successfully removed. False if there was an error.\n         * @throws \\Psr\\SimpleCache\\InvalidArgumentException\n         *   MUST be thrown if $keys is neither an array nor a Traversable,\n         *   or if any of the $keys are not a legal value.\n         * @static \n         */        public static function deleteMultiple($keys)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->deleteMultiple($keys);\n        }\n                    /**\n         * Wipes clean the entire cache's keys.\n         *\n         * @return bool \n         * @return bool True on success and false on failure.\n         * @static \n         */        public static function clear()\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->clear();\n        }\n                    /**\n         * Begin executing a new tags operation if the store supports it.\n         *\n         * @param array|mixed $names\n         * @return \\Illuminate\\Cache\\TaggedCache \n         * @throws \\BadMethodCallException\n         * @static \n         */        public static function tags($names)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->tags($names);\n        }\n                    /**\n         * Determine if the current store supports tags.\n         *\n         * @return bool \n         * @static \n         */        public static function supportsTags()\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->supportsTags();\n        }\n                    /**\n         * Get the default cache time.\n         *\n         * @return int|null \n         * @static \n         */        public static function getDefaultCacheTime()\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->getDefaultCacheTime();\n        }\n                    /**\n         * Set the default cache time in seconds.\n         *\n         * @param int|null $seconds\n         * @return \\Illuminate\\Cache\\Repository \n         * @static \n         */        public static function setDefaultCacheTime($seconds)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->setDefaultCacheTime($seconds);\n        }\n                    /**\n         * Get the cache store implementation.\n         *\n         * @return \\Illuminate\\Contracts\\Cache\\Store \n         * @static \n         */        public static function getStore()\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->getStore();\n        }\n                    /**\n         * Set the cache store implementation.\n         *\n         * @param \\Illuminate\\Contracts\\Cache\\Store $store\n         * @return static \n         * @static \n         */        public static function setStore($store)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->setStore($store);\n        }\n                    /**\n         * Get the event dispatcher instance.\n         *\n         * @return \\Illuminate\\Contracts\\Events\\Dispatcher|null \n         * @static \n         */        public static function getEventDispatcher()\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->getEventDispatcher();\n        }\n                    /**\n         * Set the event dispatcher instance.\n         *\n         * @param \\Illuminate\\Contracts\\Events\\Dispatcher $events\n         * @return void \n         * @static \n         */        public static function setEventDispatcher($events)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        $instance->setEventDispatcher($events);\n        }\n                    /**\n         * Determine if a cached value exists.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */        public static function offsetExists($key)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->offsetExists($key);\n        }\n                    /**\n         * Retrieve an item from the cache by key.\n         *\n         * @param string $key\n         * @return mixed \n         * @static \n         */        public static function offsetGet($key)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->offsetGet($key);\n        }\n                    /**\n         * Store an item in the cache for the default time.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void \n         * @static \n         */        public static function offsetSet($key, $value)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        $instance->offsetSet($key, $value);\n        }\n                    /**\n         * Remove an item from the cache.\n         *\n         * @param string $key\n         * @return void \n         * @static \n         */        public static function offsetUnset($key)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        $instance->offsetUnset($key);\n        }\n                    /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @param-closure-this static  $macro\n         * @return void \n         * @static \n         */        public static function macro($name, $macro)\n        {\n                        \\Illuminate\\Cache\\Repository::macro($name, $macro);\n        }\n                    /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void \n         * @throws \\ReflectionException\n         * @static \n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\Illuminate\\Cache\\Repository::mixin($mixin, $replace);\n        }\n                    /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */        public static function hasMacro($name)\n        {\n                        return \\Illuminate\\Cache\\Repository::hasMacro($name);\n        }\n                    /**\n         * Flush the existing macros.\n         *\n         * @return void \n         * @static \n         */        public static function flushMacros()\n        {\n                        \\Illuminate\\Cache\\Repository::flushMacros();\n        }\n                    /**\n         * Dynamically handle calls to the class.\n         *\n         * @param string $method\n         * @param array $parameters\n         * @return mixed \n         * @throws \\BadMethodCallException\n         * @static \n         */        public static function macroCall($method, $parameters)\n        {\n                        /** @var \\Illuminate\\Cache\\Repository $instance */\n                        return $instance->macroCall($method, $parameters);\n        }\n                    /**\n         * Get a lock instance.\n         *\n         * @param string $name\n         * @param int $seconds\n         * @param string|null $owner\n         * @return \\Illuminate\\Contracts\\Cache\\Lock \n         * @static \n         */        public static function lock($name, $seconds = 0, $owner = null)\n        {\n                        /** @var \\Illuminate\\Cache\\FileStore $instance */\n                        return $instance->lock($name, $seconds, $owner);\n        }\n                    /**\n         * Restore a lock instance using the owner identifier.\n         *\n         * @param string $name\n         * @param string $owner\n         * @return \\Illuminate\\Contracts\\Cache\\Lock \n         * @static \n         */        public static function restoreLock($name, $owner)\n        {\n                        /** @var \\Illuminate\\Cache\\FileStore $instance */\n                        return $instance->restoreLock($name, $owner);\n        }\n                    /**\n         * Remove all items from the cache.\n         *\n         * @return bool \n         * @static \n         */        public static function flush()\n        {\n                        /** @var \\Illuminate\\Cache\\FileStore $instance */\n                        return $instance->flush();\n        }\n                    /**\n         * Get the full path for the given cache key.\n         *\n         * @param string $key\n         * @return string \n         * @static \n         */        public static function path($key)\n        {\n                        /** @var \\Illuminate\\Cache\\FileStore $instance */\n                        return $instance->path($key);\n        }\n                    /**\n         * Get the Filesystem instance.\n         *\n         * @return \\Illuminate\\Filesystem\\Filesystem \n         * @static \n         */        public static function getFilesystem()\n        {\n                        /** @var \\Illuminate\\Cache\\FileStore $instance */\n                        return $instance->getFilesystem();\n        }\n                    /**\n         * Get the working directory of the cache.\n         *\n         * @return string \n         * @static \n         */        public static function getDirectory()\n        {\n                        /** @var \\Illuminate\\Cache\\FileStore $instance */\n                        return $instance->getDirectory();\n        }\n                    /**\n         * Set the working directory of the cache.\n         *\n         * @param string $directory\n         * @return \\Illuminate\\Cache\\FileStore \n         * @static \n         */        public static function setDirectory($directory)\n        {\n                        /** @var \\Illuminate\\Cache\\FileStore $instance */\n                        return $instance->setDirectory($directory);\n        }\n                    /**\n         * Set the cache directory where locks should be stored.\n         *\n         * @param string|null $lockDirectory\n         * @return \\Illuminate\\Cache\\FileStore \n         * @static \n         */        public static function setLockDirectory($lockDirectory)\n        {\n                        /** @var \\Illuminate\\Cache\\FileStore $instance */\n                        return $instance->setLockDirectory($lockDirectory);\n        }\n                    /**\n         * Get the cache key prefix.\n         *\n         * @return string \n         * @static \n         */        public static function getPrefix()\n        {\n                        /** @var \\Illuminate\\Cache\\FileStore $instance */\n                        return $instance->getPrefix();\n        }\n            }\n            /**\n     * \n     *\n     * @method static array run(\\Closure|array $tasks)\n     * @method static \\Illuminate\\Foundation\\Defer\\DeferredCallback defer(\\Closure|array $tasks)\n     * @see \\Illuminate\\Concurrency\\ConcurrencyManager\n     */        class Concurrency {\n                    /**\n         * Get a driver instance by name.\n         *\n         * @param string|null $name\n         * @return mixed \n         * @static \n         */        public static function driver($name = null)\n        {\n                        /** @var \\Illuminate\\Concurrency\\ConcurrencyManager $instance */\n                        return $instance->driver($name);\n        }\n                    /**\n         * Create an instance of the process concurrency driver.\n         *\n         * @param array $config\n         * @return \\Illuminate\\Concurrency\\ProcessDriver \n         * @static \n         */        public static function createProcessDriver($config)\n        {\n                        /** @var \\Illuminate\\Concurrency\\ConcurrencyManager $instance */\n                        return $instance->createProcessDriver($config);\n        }\n                    /**\n         * Create an instance of the fork concurrency driver.\n         *\n         * @param array $config\n         * @return \\Illuminate\\Concurrency\\ForkDriver \n         * @static \n         */        public static function createForkDriver($config)\n        {\n                        /** @var \\Illuminate\\Concurrency\\ConcurrencyManager $instance */\n                        return $instance->createForkDriver($config);\n        }\n                    /**\n         * Create an instance of the sync concurrency driver.\n         *\n         * @param array $config\n         * @return \\Illuminate\\Concurrency\\SyncDriver \n         * @static \n         */        public static function createSyncDriver($config)\n        {\n                        /** @var \\Illuminate\\Concurrency\\ConcurrencyManager $instance */\n                        return $instance->createSyncDriver($config);\n        }\n                    /**\n         * Get the default instance name.\n         *\n         * @return string \n         * @static \n         */        public static function getDefaultInstance()\n        {\n                        /** @var \\Illuminate\\Concurrency\\ConcurrencyManager $instance */\n                        return $instance->getDefaultInstance();\n        }\n                    /**\n         * Set the default instance name.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */        public static function setDefaultInstance($name)\n        {\n                        /** @var \\Illuminate\\Concurrency\\ConcurrencyManager $instance */\n                        $instance->setDefaultInstance($name);\n        }\n                    /**\n         * Get the instance specific configuration.\n         *\n         * @param string $name\n         * @return array \n         * @static \n         */        public static function getInstanceConfig($name)\n        {\n                        /** @var \\Illuminate\\Concurrency\\ConcurrencyManager $instance */\n                        return $instance->getInstanceConfig($name);\n        }\n                    /**\n         * Get an instance by name.\n         *\n         * @param string|null $name\n         * @return mixed \n         * @static \n         */        public static function instance($name = null)\n        {            //Method inherited from \\Illuminate\\Support\\MultipleInstanceManager         \n                        /** @var \\Illuminate\\Concurrency\\ConcurrencyManager $instance */\n                        return $instance->instance($name);\n        }\n                    /**\n         * Unset the given instances.\n         *\n         * @param array|string|null $name\n         * @return \\Illuminate\\Concurrency\\ConcurrencyManager \n         * @static \n         */        public static function forgetInstance($name = null)\n        {            //Method inherited from \\Illuminate\\Support\\MultipleInstanceManager         \n                        /** @var \\Illuminate\\Concurrency\\ConcurrencyManager $instance */\n                        return $instance->forgetInstance($name);\n        }\n                    /**\n         * Disconnect the given instance and remove from local cache.\n         *\n         * @param string|null $name\n         * @return void \n         * @static \n         */        public static function purge($name = null)\n        {            //Method inherited from \\Illuminate\\Support\\MultipleInstanceManager         \n                        /** @var \\Illuminate\\Concurrency\\ConcurrencyManager $instance */\n                        $instance->purge($name);\n        }\n                    /**\n         * Register a custom instance creator Closure.\n         *\n         * @param string $name\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Concurrency\\ConcurrencyManager \n         * @static \n         */        public static function extend($name, $callback)\n        {            //Method inherited from \\Illuminate\\Support\\MultipleInstanceManager         \n                        /** @var \\Illuminate\\Concurrency\\ConcurrencyManager $instance */\n                        return $instance->extend($name, $callback);\n        }\n                    /**\n         * Set the application instance used by the manager.\n         *\n         * @param \\Illuminate\\Contracts\\Foundation\\Application $app\n         * @return \\Illuminate\\Concurrency\\ConcurrencyManager \n         * @static \n         */        public static function setApplication($app)\n        {            //Method inherited from \\Illuminate\\Support\\MultipleInstanceManager         \n                        /** @var \\Illuminate\\Concurrency\\ConcurrencyManager $instance */\n                        return $instance->setApplication($app);\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Config\\Repository\n     */        class Config {\n                    /**\n         * Determine if the given configuration value exists.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */        public static function has($key)\n        {\n                        /** @var \\Illuminate\\Config\\Repository $instance */\n                        return $instance->has($key);\n        }\n                    /**\n         * Get the specified configuration value.\n         *\n         * @param array|string $key\n         * @param mixed $default\n         * @return mixed \n         * @static \n         */        public static function get($key, $default = null)\n        {\n                        /** @var \\Illuminate\\Config\\Repository $instance */\n                        return $instance->get($key, $default);\n        }\n                    /**\n         * Get many configuration values.\n         *\n         * @param array $keys\n         * @return array \n         * @static \n         */        public static function getMany($keys)\n        {\n                        /** @var \\Illuminate\\Config\\Repository $instance */\n                        return $instance->getMany($keys);\n        }\n                    /**\n         * Get the specified string configuration value.\n         *\n         * @param string $key\n         * @param \\Illuminate\\Config\\(\\Closure():(string|\\Illuminate\\Config\\null))|string|null $default\n         * @return string \n         * @static \n         */        public static function string($key, $default = null)\n        {\n                        /** @var \\Illuminate\\Config\\Repository $instance */\n                        return $instance->string($key, $default);\n        }\n                    /**\n         * Get the specified integer configuration value.\n         *\n         * @param string $key\n         * @param \\Illuminate\\Config\\(\\Closure():(int|\\Illuminate\\Config\\null))|int|null $default\n         * @return int \n         * @static \n         */        public static function integer($key, $default = null)\n        {\n                        /** @var \\Illuminate\\Config\\Repository $instance */\n                        return $instance->integer($key, $default);\n        }\n                    /**\n         * Get the specified float configuration value.\n         *\n         * @param string $key\n         * @param \\Illuminate\\Config\\(\\Closure():(float|\\Illuminate\\Config\\null))|float|null $default\n         * @return float \n         * @static \n         */        public static function float($key, $default = null)\n        {\n                        /** @var \\Illuminate\\Config\\Repository $instance */\n                        return $instance->float($key, $default);\n        }\n                    /**\n         * Get the specified boolean configuration value.\n         *\n         * @param string $key\n         * @param \\Illuminate\\Config\\(\\Closure():(bool|\\Illuminate\\Config\\null))|bool|null $default\n         * @return bool \n         * @static \n         */        public static function boolean($key, $default = null)\n        {\n                        /** @var \\Illuminate\\Config\\Repository $instance */\n                        return $instance->boolean($key, $default);\n        }\n                    /**\n         * Get the specified array configuration value.\n         *\n         * @param string $key\n         * @param \\Illuminate\\Config\\(\\Closure():(array<array-key, mixed>|\\Illuminate\\Config\\null))|\\Illuminate\\Config\\array<array-key,  mixed>|null  $default\n         * @return array<array-key, mixed> \n         * @static \n         */        public static function array($key, $default = null)\n        {\n                        /** @var \\Illuminate\\Config\\Repository $instance */\n                        return $instance->array($key, $default);\n        }\n                    /**\n         * Set a given configuration value.\n         *\n         * @param array|string $key\n         * @param mixed $value\n         * @return void \n         * @static \n         */        public static function set($key, $value = null)\n        {\n                        /** @var \\Illuminate\\Config\\Repository $instance */\n                        $instance->set($key, $value);\n        }\n                    /**\n         * Prepend a value onto an array configuration value.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void \n         * @static \n         */        public static function prepend($key, $value)\n        {\n                        /** @var \\Illuminate\\Config\\Repository $instance */\n                        $instance->prepend($key, $value);\n        }\n                    /**\n         * Push a value onto an array configuration value.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void \n         * @static \n         */        public static function push($key, $value)\n        {\n                        /** @var \\Illuminate\\Config\\Repository $instance */\n                        $instance->push($key, $value);\n        }\n                    /**\n         * Get all of the configuration items for the application.\n         *\n         * @return array \n         * @static \n         */        public static function all()\n        {\n                        /** @var \\Illuminate\\Config\\Repository $instance */\n                        return $instance->all();\n        }\n                    /**\n         * Determine if the given configuration option exists.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */        public static function offsetExists($key)\n        {\n                        /** @var \\Illuminate\\Config\\Repository $instance */\n                        return $instance->offsetExists($key);\n        }\n                    /**\n         * Get a configuration option.\n         *\n         * @param string $key\n         * @return mixed \n         * @static \n         */        public static function offsetGet($key)\n        {\n                        /** @var \\Illuminate\\Config\\Repository $instance */\n                        return $instance->offsetGet($key);\n        }\n                    /**\n         * Set a configuration option.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void \n         * @static \n         */        public static function offsetSet($key, $value)\n        {\n                        /** @var \\Illuminate\\Config\\Repository $instance */\n                        $instance->offsetSet($key, $value);\n        }\n                    /**\n         * Unset a configuration option.\n         *\n         * @param string $key\n         * @return void \n         * @static \n         */        public static function offsetUnset($key)\n        {\n                        /** @var \\Illuminate\\Config\\Repository $instance */\n                        $instance->offsetUnset($key);\n        }\n                    /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @param-closure-this static  $macro\n         * @return void \n         * @static \n         */        public static function macro($name, $macro)\n        {\n                        \\Illuminate\\Config\\Repository::macro($name, $macro);\n        }\n                    /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void \n         * @throws \\ReflectionException\n         * @static \n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\Illuminate\\Config\\Repository::mixin($mixin, $replace);\n        }\n                    /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */        public static function hasMacro($name)\n        {\n                        return \\Illuminate\\Config\\Repository::hasMacro($name);\n        }\n                    /**\n         * Flush the existing macros.\n         *\n         * @return void \n         * @static \n         */        public static function flushMacros()\n        {\n                        \\Illuminate\\Config\\Repository::flushMacros();\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Log\\Context\\Repository\n     */        class Context {\n                    /**\n         * Determine if the given key exists.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */        public static function has($key)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->has($key);\n        }\n                    /**\n         * Determine if the given key exists within the hidden context data.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */        public static function hasHidden($key)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->hasHidden($key);\n        }\n                    /**\n         * Retrieve all the context data.\n         *\n         * @return array<string, mixed> \n         * @static \n         */        public static function all()\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->all();\n        }\n                    /**\n         * Retrieve all the hidden context data.\n         *\n         * @return array<string, mixed> \n         * @static \n         */        public static function allHidden()\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->allHidden();\n        }\n                    /**\n         * Retrieve the given key's value.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @return mixed \n         * @static \n         */        public static function get($key, $default = null)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->get($key, $default);\n        }\n                    /**\n         * Retrieve the given key's hidden value.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @return mixed \n         * @static \n         */        public static function getHidden($key, $default = null)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->getHidden($key, $default);\n        }\n                    /**\n         * Retrieve the given key's value and then forget it.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @return mixed \n         * @static \n         */        public static function pull($key, $default = null)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->pull($key, $default);\n        }\n                    /**\n         * Retrieve the given key's hidden value and then forget it.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @return mixed \n         * @static \n         */        public static function pullHidden($key, $default = null)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->pullHidden($key, $default);\n        }\n                    /**\n         * Retrieve only the values of the given keys.\n         *\n         * @param array<int, string> $keys\n         * @return array<string, mixed> \n         * @static \n         */        public static function only($keys)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->only($keys);\n        }\n                    /**\n         * Retrieve only the hidden values of the given keys.\n         *\n         * @param array<int, string> $keys\n         * @return array<string, mixed> \n         * @static \n         */        public static function onlyHidden($keys)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->onlyHidden($keys);\n        }\n                    /**\n         * Add a context value.\n         *\n         * @param string|array<string, mixed> $key\n         * @param mixed $value\n         * @return \\Illuminate\\Log\\Context\\Repository \n         * @static \n         */        public static function add($key, $value = null)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->add($key, $value);\n        }\n                    /**\n         * Add a hidden context value.\n         *\n         * @param string|array<string, mixed> $key\n         * @param mixed $value\n         * @return \\Illuminate\\Log\\Context\\Repository \n         * @static \n         */        public static function addHidden($key, $value = null)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->addHidden($key, $value);\n        }\n                    /**\n         * Forget the given context key.\n         *\n         * @param string|array<int, string> $key\n         * @return \\Illuminate\\Log\\Context\\Repository \n         * @static \n         */        public static function forget($key)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->forget($key);\n        }\n                    /**\n         * Forget the given hidden context key.\n         *\n         * @param string|array<int, string> $key\n         * @return \\Illuminate\\Log\\Context\\Repository \n         * @static \n         */        public static function forgetHidden($key)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->forgetHidden($key);\n        }\n                    /**\n         * Add a context value if it does not exist yet.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return \\Illuminate\\Log\\Context\\Repository \n         * @static \n         */        public static function addIf($key, $value)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->addIf($key, $value);\n        }\n                    /**\n         * Add a hidden context value if it does not exist yet.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return \\Illuminate\\Log\\Context\\Repository \n         * @static \n         */        public static function addHiddenIf($key, $value)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->addHiddenIf($key, $value);\n        }\n                    /**\n         * Push the given values onto the key's stack.\n         *\n         * @param string $key\n         * @param mixed $values\n         * @return \\Illuminate\\Log\\Context\\Repository \n         * @throws \\RuntimeException\n         * @static \n         */        public static function push($key, ...$values)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->push($key, ...$values);\n        }\n                    /**\n         * Push the given hidden values onto the key's stack.\n         *\n         * @param string $key\n         * @param mixed $values\n         * @return \\Illuminate\\Log\\Context\\Repository \n         * @throws \\RuntimeException\n         * @static \n         */        public static function pushHidden($key, ...$values)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->pushHidden($key, ...$values);\n        }\n                    /**\n         * Determine if the given value is in the given stack.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @param bool $strict\n         * @return bool \n         * @throws \\RuntimeException\n         * @static \n         */        public static function stackContains($key, $value, $strict = false)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->stackContains($key, $value, $strict);\n        }\n                    /**\n         * Determine if the given value is in the given hidden stack.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @param bool $strict\n         * @return bool \n         * @throws \\RuntimeException\n         * @static \n         */        public static function hiddenStackContains($key, $value, $strict = false)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->hiddenStackContains($key, $value, $strict);\n        }\n                    /**\n         * Determine if the repository is empty.\n         *\n         * @return bool \n         * @static \n         */        public static function isEmpty()\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->isEmpty();\n        }\n                    /**\n         * Execute the given callback when context is about to be dehydrated.\n         *\n         * @param callable $callback\n         * @return \\Illuminate\\Log\\Context\\Repository \n         * @static \n         */        public static function dehydrating($callback)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->dehydrating($callback);\n        }\n                    /**\n         * Execute the given callback when context has been hydrated.\n         *\n         * @param callable $callback\n         * @return \\Illuminate\\Log\\Context\\Repository \n         * @static \n         */        public static function hydrated($callback)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->hydrated($callback);\n        }\n                    /**\n         * Handle unserialize exceptions using the given callback.\n         *\n         * @param callable|null $callback\n         * @return static \n         * @static \n         */        public static function handleUnserializeExceptionsUsing($callback)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->handleUnserializeExceptionsUsing($callback);\n        }\n                    /**\n         * Flush all context data.\n         *\n         * @return \\Illuminate\\Log\\Context\\Repository \n         * @static \n         */        public static function flush()\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->flush();\n        }\n                    /**\n         * Dehydrate the context data.\n         *\n         * @internal \n         * @return \\Illuminate\\Log\\Context\\?array \n         * @static \n         */        public static function dehydrate()\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->dehydrate();\n        }\n                    /**\n         * Hydrate the context instance.\n         *\n         * @internal \n         * @param \\Illuminate\\Log\\Context\\?array $context\n         * @return \\Illuminate\\Log\\Context\\Repository \n         * @throws \\RuntimeException\n         * @static \n         */        public static function hydrate($context)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->hydrate($context);\n        }\n                    /**\n         * Apply the callback if the given \"value\" is (or resolves to) truthy.\n         *\n         * @template TWhenParameter\n         * @template TWhenReturnType\n         * @param \\Illuminate\\Log\\Context\\(\\Closure($this):  TWhenParameter)|TWhenParameter|null  $value\n         * @param \\Illuminate\\Log\\Context\\(callable($this,  TWhenParameter): TWhenReturnType)|null  $callback\n         * @param \\Illuminate\\Log\\Context\\(callable($this,  TWhenParameter): TWhenReturnType)|null  $default\n         * @return $this|\\Illuminate\\Log\\Context\\TWhenReturnType \n         * @static \n         */        public static function when($value = null, $callback = null, $default = null)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->when($value, $callback, $default);\n        }\n                    /**\n         * Apply the callback if the given \"value\" is (or resolves to) falsy.\n         *\n         * @template TUnlessParameter\n         * @template TUnlessReturnType\n         * @param \\Illuminate\\Log\\Context\\(\\Closure($this):  TUnlessParameter)|TUnlessParameter|null  $value\n         * @param \\Illuminate\\Log\\Context\\(callable($this,  TUnlessParameter): TUnlessReturnType)|null  $callback\n         * @param \\Illuminate\\Log\\Context\\(callable($this,  TUnlessParameter): TUnlessReturnType)|null  $default\n         * @return $this|\\Illuminate\\Log\\Context\\TUnlessReturnType \n         * @static \n         */        public static function unless($value = null, $callback = null, $default = null)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->unless($value, $callback, $default);\n        }\n                    /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @param-closure-this static  $macro\n         * @return void \n         * @static \n         */        public static function macro($name, $macro)\n        {\n                        \\Illuminate\\Log\\Context\\Repository::macro($name, $macro);\n        }\n                    /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void \n         * @throws \\ReflectionException\n         * @static \n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\Illuminate\\Log\\Context\\Repository::mixin($mixin, $replace);\n        }\n                    /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */        public static function hasMacro($name)\n        {\n                        return \\Illuminate\\Log\\Context\\Repository::hasMacro($name);\n        }\n                    /**\n         * Flush the existing macros.\n         *\n         * @return void \n         * @static \n         */        public static function flushMacros()\n        {\n                        \\Illuminate\\Log\\Context\\Repository::flushMacros();\n        }\n                    /**\n         * Restore the model from the model identifier instance.\n         *\n         * @param \\Illuminate\\Contracts\\Database\\ModelIdentifier $value\n         * @return \\Illuminate\\Database\\Eloquent\\Model \n         * @static \n         */        public static function restoreModel($value)\n        {\n                        /** @var \\Illuminate\\Log\\Context\\Repository $instance */\n                        return $instance->restoreModel($value);\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Cookie\\CookieJar\n     */        class Cookie {\n                    /**\n         * Create a new cookie instance.\n         *\n         * @param string $name\n         * @param string $value\n         * @param int $minutes\n         * @param string|null $path\n         * @param string|null $domain\n         * @param bool|null $secure\n         * @param bool $httpOnly\n         * @param bool $raw\n         * @param string|null $sameSite\n         * @return \\Symfony\\Component\\HttpFoundation\\Cookie \n         * @static \n         */        public static function make($name, $value, $minutes = 0, $path = null, $domain = null, $secure = null, $httpOnly = true, $raw = false, $sameSite = null)\n        {\n                        /** @var \\Illuminate\\Cookie\\CookieJar $instance */\n                        return $instance->make($name, $value, $minutes, $path, $domain, $secure, $httpOnly, $raw, $sameSite);\n        }\n                    /**\n         * Create a cookie that lasts \"forever\" (400 days).\n         *\n         * @param string $name\n         * @param string $value\n         * @param string|null $path\n         * @param string|null $domain\n         * @param bool|null $secure\n         * @param bool $httpOnly\n         * @param bool $raw\n         * @param string|null $sameSite\n         * @return \\Symfony\\Component\\HttpFoundation\\Cookie \n         * @static \n         */        public static function forever($name, $value, $path = null, $domain = null, $secure = null, $httpOnly = true, $raw = false, $sameSite = null)\n        {\n                        /** @var \\Illuminate\\Cookie\\CookieJar $instance */\n                        return $instance->forever($name, $value, $path, $domain, $secure, $httpOnly, $raw, $sameSite);\n        }\n                    /**\n         * Expire the given cookie.\n         *\n         * @param string $name\n         * @param string|null $path\n         * @param string|null $domain\n         * @return \\Symfony\\Component\\HttpFoundation\\Cookie \n         * @static \n         */        public static function forget($name, $path = null, $domain = null)\n        {\n                        /** @var \\Illuminate\\Cookie\\CookieJar $instance */\n                        return $instance->forget($name, $path, $domain);\n        }\n                    /**\n         * Determine if a cookie has been queued.\n         *\n         * @param string $key\n         * @param string|null $path\n         * @return bool \n         * @static \n         */        public static function hasQueued($key, $path = null)\n        {\n                        /** @var \\Illuminate\\Cookie\\CookieJar $instance */\n                        return $instance->hasQueued($key, $path);\n        }\n                    /**\n         * Get a queued cookie instance.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @param string|null $path\n         * @return \\Symfony\\Component\\HttpFoundation\\Cookie|null \n         * @static \n         */        public static function queued($key, $default = null, $path = null)\n        {\n                        /** @var \\Illuminate\\Cookie\\CookieJar $instance */\n                        return $instance->queued($key, $default, $path);\n        }\n                    /**\n         * Queue a cookie to send with the next response.\n         *\n         * @param mixed $parameters\n         * @return void \n         * @static \n         */        public static function queue(...$parameters)\n        {\n                        /** @var \\Illuminate\\Cookie\\CookieJar $instance */\n                        $instance->queue(...$parameters);\n        }\n                    /**\n         * Queue a cookie to expire with the next response.\n         *\n         * @param string $name\n         * @param string|null $path\n         * @param string|null $domain\n         * @return void \n         * @static \n         */        public static function expire($name, $path = null, $domain = null)\n        {\n                        /** @var \\Illuminate\\Cookie\\CookieJar $instance */\n                        $instance->expire($name, $path, $domain);\n        }\n                    /**\n         * Remove a cookie from the queue.\n         *\n         * @param string $name\n         * @param string|null $path\n         * @return void \n         * @static \n         */        public static function unqueue($name, $path = null)\n        {\n                        /** @var \\Illuminate\\Cookie\\CookieJar $instance */\n                        $instance->unqueue($name, $path);\n        }\n                    /**\n         * Set the default path and domain for the jar.\n         *\n         * @param string $path\n         * @param string|null $domain\n         * @param bool|null $secure\n         * @param string|null $sameSite\n         * @return \\Illuminate\\Cookie\\CookieJar \n         * @static \n         */        public static function setDefaultPathAndDomain($path, $domain, $secure = false, $sameSite = null)\n        {\n                        /** @var \\Illuminate\\Cookie\\CookieJar $instance */\n                        return $instance->setDefaultPathAndDomain($path, $domain, $secure, $sameSite);\n        }\n                    /**\n         * Get the cookies which have been queued for the next request.\n         *\n         * @return \\Symfony\\Component\\HttpFoundation\\Cookie[] \n         * @static \n         */        public static function getQueuedCookies()\n        {\n                        /** @var \\Illuminate\\Cookie\\CookieJar $instance */\n                        return $instance->getQueuedCookies();\n        }\n                    /**\n         * Flush the cookies which have been queued for the next request.\n         *\n         * @return \\Illuminate\\Cookie\\CookieJar \n         * @static \n         */        public static function flushQueuedCookies()\n        {\n                        /** @var \\Illuminate\\Cookie\\CookieJar $instance */\n                        return $instance->flushQueuedCookies();\n        }\n                    /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @param-closure-this static  $macro\n         * @return void \n         * @static \n         */        public static function macro($name, $macro)\n        {\n                        \\Illuminate\\Cookie\\CookieJar::macro($name, $macro);\n        }\n                    /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void \n         * @throws \\ReflectionException\n         * @static \n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\Illuminate\\Cookie\\CookieJar::mixin($mixin, $replace);\n        }\n                    /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */        public static function hasMacro($name)\n        {\n                        return \\Illuminate\\Cookie\\CookieJar::hasMacro($name);\n        }\n                    /**\n         * Flush the existing macros.\n         *\n         * @return void \n         * @static \n         */        public static function flushMacros()\n        {\n                        \\Illuminate\\Cookie\\CookieJar::flushMacros();\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Encryption\\Encrypter\n     */        class Crypt {\n                    /**\n         * Determine if the given key and cipher combination is valid.\n         *\n         * @param string $key\n         * @param string $cipher\n         * @return bool \n         * @static \n         */        public static function supported($key, $cipher)\n        {\n                        return \\Illuminate\\Encryption\\Encrypter::supported($key, $cipher);\n        }\n                    /**\n         * Create a new encryption key for the given cipher.\n         *\n         * @param string $cipher\n         * @return string \n         * @static \n         */        public static function generateKey($cipher)\n        {\n                        return \\Illuminate\\Encryption\\Encrypter::generateKey($cipher);\n        }\n                    /**\n         * Encrypt the given value.\n         *\n         * @param mixed $value\n         * @param bool $serialize\n         * @return string \n         * @throws \\Illuminate\\Contracts\\Encryption\\EncryptException\n         * @static \n         */        public static function encrypt($value, $serialize = true)\n        {\n                        /** @var \\Illuminate\\Encryption\\Encrypter $instance */\n                        return $instance->encrypt($value, $serialize);\n        }\n                    /**\n         * Encrypt a string without serialization.\n         *\n         * @param string $value\n         * @return string \n         * @throws \\Illuminate\\Contracts\\Encryption\\EncryptException\n         * @static \n         */        public static function encryptString($value)\n        {\n                        /** @var \\Illuminate\\Encryption\\Encrypter $instance */\n                        return $instance->encryptString($value);\n        }\n                    /**\n         * Decrypt the given value.\n         *\n         * @param string $payload\n         * @param bool $unserialize\n         * @return mixed \n         * @throws \\Illuminate\\Contracts\\Encryption\\DecryptException\n         * @static \n         */        public static function decrypt($payload, $unserialize = true)\n        {\n                        /** @var \\Illuminate\\Encryption\\Encrypter $instance */\n                        return $instance->decrypt($payload, $unserialize);\n        }\n                    /**\n         * Decrypt the given string without unserialization.\n         *\n         * @param string $payload\n         * @return string \n         * @throws \\Illuminate\\Contracts\\Encryption\\DecryptException\n         * @static \n         */        public static function decryptString($payload)\n        {\n                        /** @var \\Illuminate\\Encryption\\Encrypter $instance */\n                        return $instance->decryptString($payload);\n        }\n                    /**\n         * Get the encryption key that the encrypter is currently using.\n         *\n         * @return string \n         * @static \n         */        public static function getKey()\n        {\n                        /** @var \\Illuminate\\Encryption\\Encrypter $instance */\n                        return $instance->getKey();\n        }\n                    /**\n         * Get the current encryption key and all previous encryption keys.\n         *\n         * @return array \n         * @static \n         */        public static function getAllKeys()\n        {\n                        /** @var \\Illuminate\\Encryption\\Encrypter $instance */\n                        return $instance->getAllKeys();\n        }\n                    /**\n         * Get the previous encryption keys.\n         *\n         * @return array \n         * @static \n         */        public static function getPreviousKeys()\n        {\n                        /** @var \\Illuminate\\Encryption\\Encrypter $instance */\n                        return $instance->getPreviousKeys();\n        }\n                    /**\n         * Set the previous / legacy encryption keys that should be utilized if decryption fails.\n         *\n         * @param array $keys\n         * @return \\Illuminate\\Encryption\\Encrypter \n         * @static \n         */        public static function previousKeys($keys)\n        {\n                        /** @var \\Illuminate\\Encryption\\Encrypter $instance */\n                        return $instance->previousKeys($keys);\n        }\n            }\n            /**\n     * \n     *\n     * @see https://carbon.nesbot.com/docs/\n     * @see https://github.com/briannesbitt/Carbon/blob/master/src/Carbon/Factory.php\n     * @method static \\Illuminate\\Support\\Carbon create($year = 0, $month = 1, $day = 1, $hour = 0, $minute = 0, $second = 0, $tz = null)\n     * @method static \\Illuminate\\Support\\Carbon createFromDate($year = null, $month = null, $day = null, $tz = null)\n     * @method static \\Illuminate\\Support\\Carbon|false createFromFormat($format, $time, $tz = null)\n     * @method static \\Illuminate\\Support\\Carbon createFromTime($hour = 0, $minute = 0, $second = 0, $tz = null)\n     * @method static \\Illuminate\\Support\\Carbon createFromTimeString($time, $tz = null)\n     * @method static \\Illuminate\\Support\\Carbon createFromTimestamp($timestamp, $tz = null)\n     * @method static \\Illuminate\\Support\\Carbon createFromTimestampMs($timestamp, $tz = null)\n     * @method static \\Illuminate\\Support\\Carbon createFromTimestampUTC($timestamp)\n     * @method static \\Illuminate\\Support\\Carbon createMidnightDate($year = null, $month = null, $day = null, $tz = null)\n     * @method static \\Illuminate\\Support\\Carbon|false createSafe($year = null, $month = null, $day = null, $hour = null, $minute = null, $second = null, $tz = null)\n     * @method static void disableHumanDiffOption($humanDiffOption)\n     * @method static void enableHumanDiffOption($humanDiffOption)\n     * @method static mixed executeWithLocale($locale, $func)\n     * @method static \\Illuminate\\Support\\Carbon fromSerialized($value)\n     * @method static array getAvailableLocales()\n     * @method static array getDays()\n     * @method static int getHumanDiffOptions()\n     * @method static array getIsoUnits()\n     * @method static array getLastErrors()\n     * @method static string getLocale()\n     * @method static int getMidDayAt()\n     * @method static \\Illuminate\\Support\\Carbon|null getTestNow()\n     * @method static \\Symfony\\Component\\Translation\\TranslatorInterface getTranslator()\n     * @method static int getWeekEndsAt()\n     * @method static int getWeekStartsAt()\n     * @method static array getWeekendDays()\n     * @method static bool hasFormat($date, $format)\n     * @method static bool hasMacro($name)\n     * @method static bool hasRelativeKeywords($time)\n     * @method static bool hasTestNow()\n     * @method static \\Illuminate\\Support\\Carbon instance($date)\n     * @method static bool isImmutable()\n     * @method static bool isModifiableUnit($unit)\n     * @method static bool isMutable()\n     * @method static bool isStrictModeEnabled()\n     * @method static bool localeHasDiffOneDayWords($locale)\n     * @method static bool localeHasDiffSyntax($locale)\n     * @method static bool localeHasDiffTwoDayWords($locale)\n     * @method static bool localeHasPeriodSyntax($locale)\n     * @method static bool localeHasShortUnits($locale)\n     * @method static void macro($name, $macro)\n     * @method static \\Illuminate\\Support\\Carbon|null make($var)\n     * @method static \\Illuminate\\Support\\Carbon maxValue()\n     * @method static \\Illuminate\\Support\\Carbon minValue()\n     * @method static void mixin($mixin)\n     * @method static \\Illuminate\\Support\\Carbon now($tz = null)\n     * @method static \\Illuminate\\Support\\Carbon parse($time = null, $tz = null)\n     * @method static string pluralUnit(string $unit)\n     * @method static void resetMonthsOverflow()\n     * @method static void resetToStringFormat()\n     * @method static void resetYearsOverflow()\n     * @method static void serializeUsing($callback)\n     * @method static void setHumanDiffOptions($humanDiffOptions)\n     * @method static bool setLocale($locale)\n     * @method static void setMidDayAt($hour)\n     * @method static void setTestNow($testNow = null)\n     * @method static void setToStringFormat($format)\n     * @method static void setTranslator(\\Symfony\\Component\\Translation\\TranslatorInterface $translator)\n     * @method static void setUtf8($utf8)\n     * @method static void setWeekEndsAt($day)\n     * @method static void setWeekStartsAt($day)\n     * @method static void setWeekendDays($days)\n     * @method static bool shouldOverflowMonths()\n     * @method static bool shouldOverflowYears()\n     * @method static string singularUnit(string $unit)\n     * @method static \\Illuminate\\Support\\Carbon today($tz = null)\n     * @method static \\Illuminate\\Support\\Carbon tomorrow($tz = null)\n     * @method static void useMonthsOverflow($monthsOverflow = true)\n     * @method static void useStrictMode($strictModeEnabled = true)\n     * @method static void useYearsOverflow($yearsOverflow = true)\n     * @method static \\Illuminate\\Support\\Carbon yesterday($tz = null)\n     * @see \\Illuminate\\Support\\DateFactory\n     */        class Date {\n                    /**\n         * Use the given handler when generating dates (class name, callable, or factory).\n         *\n         * @param mixed $handler\n         * @return mixed \n         * @throws \\InvalidArgumentException\n         * @static \n         */        public static function use($handler)\n        {\n                        return \\Illuminate\\Support\\DateFactory::use($handler);\n        }\n                    /**\n         * Use the default date class when generating dates.\n         *\n         * @return void \n         * @static \n         */        public static function useDefault()\n        {\n                        \\Illuminate\\Support\\DateFactory::useDefault();\n        }\n                    /**\n         * Execute the given callable on each date creation.\n         *\n         * @param callable $callable\n         * @return void \n         * @static \n         */        public static function useCallable($callable)\n        {\n                        \\Illuminate\\Support\\DateFactory::useCallable($callable);\n        }\n                    /**\n         * Use the given date type (class) when generating dates.\n         *\n         * @param string $dateClass\n         * @return void \n         * @static \n         */        public static function useClass($dateClass)\n        {\n                        \\Illuminate\\Support\\DateFactory::useClass($dateClass);\n        }\n                    /**\n         * Use the given Carbon factory when generating dates.\n         *\n         * @param object $factory\n         * @return void \n         * @static \n         */        public static function useFactory($factory)\n        {\n                        \\Illuminate\\Support\\DateFactory::useFactory($factory);\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Database\\DatabaseManager\n     */        class DB {\n                    /**\n         * Get a database connection instance.\n         *\n         * @param string|null $name\n         * @return \\Illuminate\\Database\\Connection \n         * @static \n         */        public static function connection($name = null)\n        {\n                        /** @var \\Illuminate\\Database\\DatabaseManager $instance */\n                        return $instance->connection($name);\n        }\n                    /**\n         * Get a database connection instance from the given configuration.\n         *\n         * @param string $name\n         * @param array $config\n         * @param bool $force\n         * @return \\Illuminate\\Database\\MySqlConnection \n         * @static \n         */        public static function connectUsing($name, $config, $force = false)\n        {\n                        /** @var \\Illuminate\\Database\\DatabaseManager $instance */\n                        return $instance->connectUsing($name, $config, $force);\n        }\n                    /**\n         * Disconnect from the given database and remove from local cache.\n         *\n         * @param string|null $name\n         * @return void \n         * @static \n         */        public static function purge($name = null)\n        {\n                        /** @var \\Illuminate\\Database\\DatabaseManager $instance */\n                        $instance->purge($name);\n        }\n                    /**\n         * Disconnect from the given database.\n         *\n         * @param string|null $name\n         * @return void \n         * @static \n         */        public static function disconnect($name = null)\n        {\n                        /** @var \\Illuminate\\Database\\DatabaseManager $instance */\n                        $instance->disconnect($name);\n        }\n                    /**\n         * Reconnect to the given database.\n         *\n         * @param string|null $name\n         * @return \\Illuminate\\Database\\Connection \n         * @static \n         */        public static function reconnect($name = null)\n        {\n                        /** @var \\Illuminate\\Database\\DatabaseManager $instance */\n                        return $instance->reconnect($name);\n        }\n                    /**\n         * Set the default database connection for the callback execution.\n         *\n         * @param string $name\n         * @param callable $callback\n         * @return mixed \n         * @static \n         */        public static function usingConnection($name, $callback)\n        {\n                        /** @var \\Illuminate\\Database\\DatabaseManager $instance */\n                        return $instance->usingConnection($name, $callback);\n        }\n                    /**\n         * Get the default connection name.\n         *\n         * @return string \n         * @static \n         */        public static function getDefaultConnection()\n        {\n                        /** @var \\Illuminate\\Database\\DatabaseManager $instance */\n                        return $instance->getDefaultConnection();\n        }\n                    /**\n         * Set the default connection name.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */        public static function setDefaultConnection($name)\n        {\n                        /** @var \\Illuminate\\Database\\DatabaseManager $instance */\n                        $instance->setDefaultConnection($name);\n        }\n                    /**\n         * Get all of the supported drivers.\n         *\n         * @return string[] \n         * @static \n         */        public static function supportedDrivers()\n        {\n                        /** @var \\Illuminate\\Database\\DatabaseManager $instance */\n                        return $instance->supportedDrivers();\n        }\n                    /**\n         * Get all of the drivers that are actually available.\n         *\n         * @return string[] \n         * @static \n         */        public static function availableDrivers()\n        {\n                        /** @var \\Illuminate\\Database\\DatabaseManager $instance */\n                        return $instance->availableDrivers();\n        }\n                    /**\n         * Register an extension connection resolver.\n         *\n         * @param string $name\n         * @param callable $resolver\n         * @return void \n         * @static \n         */        public static function extend($name, $resolver)\n        {\n                        /** @var \\Illuminate\\Database\\DatabaseManager $instance */\n                        $instance->extend($name, $resolver);\n        }\n                    /**\n         * Remove an extension connection resolver.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */        public static function forgetExtension($name)\n        {\n                        /** @var \\Illuminate\\Database\\DatabaseManager $instance */\n                        $instance->forgetExtension($name);\n        }\n                    /**\n         * Return all of the created connections.\n         *\n         * @return array<string, \\Illuminate\\Database\\Connection> \n         * @static \n         */        public static function getConnections()\n        {\n                        /** @var \\Illuminate\\Database\\DatabaseManager $instance */\n                        return $instance->getConnections();\n        }\n                    /**\n         * Set the database reconnector callback.\n         *\n         * @param callable $reconnector\n         * @return void \n         * @static \n         */        public static function setReconnector($reconnector)\n        {\n                        /** @var \\Illuminate\\Database\\DatabaseManager $instance */\n                        $instance->setReconnector($reconnector);\n        }\n                    /**\n         * Set the application instance used by the manager.\n         *\n         * @param \\Illuminate\\Contracts\\Foundation\\Application $app\n         * @return \\Illuminate\\Database\\DatabaseManager \n         * @static \n         */        public static function setApplication($app)\n        {\n                        /** @var \\Illuminate\\Database\\DatabaseManager $instance */\n                        return $instance->setApplication($app);\n        }\n                    /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @param-closure-this static  $macro\n         * @return void \n         * @static \n         */        public static function macro($name, $macro)\n        {\n                        \\Illuminate\\Database\\DatabaseManager::macro($name, $macro);\n        }\n                    /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void \n         * @throws \\ReflectionException\n         * @static \n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\Illuminate\\Database\\DatabaseManager::mixin($mixin, $replace);\n        }\n                    /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */        public static function hasMacro($name)\n        {\n                        return \\Illuminate\\Database\\DatabaseManager::hasMacro($name);\n        }\n                    /**\n         * Flush the existing macros.\n         *\n         * @return void \n         * @static \n         */        public static function flushMacros()\n        {\n                        \\Illuminate\\Database\\DatabaseManager::flushMacros();\n        }\n                    /**\n         * Dynamically handle calls to the class.\n         *\n         * @param string $method\n         * @param array $parameters\n         * @return mixed \n         * @throws \\BadMethodCallException\n         * @static \n         */        public static function macroCall($method, $parameters)\n        {\n                        /** @var \\Illuminate\\Database\\DatabaseManager $instance */\n                        return $instance->macroCall($method, $parameters);\n        }\n                    /**\n         * Get a human-readable name for the given connection driver.\n         *\n         * @return string \n         * @static \n         */        public static function getDriverTitle()\n        {\n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getDriverTitle();\n        }\n                    /**\n         * Run an insert statement against the database.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @param string|null $sequence\n         * @return bool \n         * @static \n         */        public static function insert($query, $bindings = [], $sequence = null)\n        {\n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->insert($query, $bindings, $sequence);\n        }\n                    /**\n         * Get the connection's last insert ID.\n         *\n         * @return string|int|null \n         * @static \n         */        public static function getLastInsertId()\n        {\n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getLastInsertId();\n        }\n                    /**\n         * Determine if the connected database is a MariaDB database.\n         *\n         * @return bool \n         * @static \n         */        public static function isMaria()\n        {\n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->isMaria();\n        }\n                    /**\n         * Get the server version for the connection.\n         *\n         * @return string \n         * @static \n         */        public static function getServerVersion()\n        {\n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getServerVersion();\n        }\n                    /**\n         * Get a schema builder instance for the connection.\n         *\n         * @return \\Illuminate\\Database\\Schema\\MySqlBuilder \n         * @static \n         */        public static function getSchemaBuilder()\n        {\n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getSchemaBuilder();\n        }\n                    /**\n         * Get the schema state for the connection.\n         *\n         * @param \\Illuminate\\Filesystem\\Filesystem|null $files\n         * @param callable|null $processFactory\n         * @return \\Illuminate\\Database\\Schema\\MySqlSchemaState \n         * @static \n         */        public static function getSchemaState($files = null, $processFactory = null)\n        {\n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getSchemaState($files, $processFactory);\n        }\n                    /**\n         * Set the query grammar to the default implementation.\n         *\n         * @return void \n         * @static \n         */        public static function useDefaultQueryGrammar()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->useDefaultQueryGrammar();\n        }\n                    /**\n         * Set the schema grammar to the default implementation.\n         *\n         * @return void \n         * @static \n         */        public static function useDefaultSchemaGrammar()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->useDefaultSchemaGrammar();\n        }\n                    /**\n         * Set the query post processor to the default implementation.\n         *\n         * @return void \n         * @static \n         */        public static function useDefaultPostProcessor()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->useDefaultPostProcessor();\n        }\n                    /**\n         * Begin a fluent query against a database table.\n         *\n         * @param \\Closure|\\Illuminate\\Database\\Query\\Builder|\\Illuminate\\Contracts\\Database\\Query\\Expression|string $table\n         * @param string|null $as\n         * @return \\Illuminate\\Database\\Query\\Builder \n         * @static \n         */        public static function table($table, $as = null)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->table($table, $as);\n        }\n                    /**\n         * Get a new query builder instance.\n         *\n         * @return \\Illuminate\\Database\\Query\\Builder \n         * @static \n         */        public static function query()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->query();\n        }\n                    /**\n         * Run a select statement and return a single result.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @param bool $useReadPdo\n         * @return mixed \n         * @static \n         */        public static function selectOne($query, $bindings = [], $useReadPdo = true)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->selectOne($query, $bindings, $useReadPdo);\n        }\n                    /**\n         * Run a select statement and return the first column of the first row.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @param bool $useReadPdo\n         * @return mixed \n         * @throws \\Illuminate\\Database\\MultipleColumnsSelectedException\n         * @static \n         */        public static function scalar($query, $bindings = [], $useReadPdo = true)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->scalar($query, $bindings, $useReadPdo);\n        }\n                    /**\n         * Run a select statement against the database.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @return array \n         * @static \n         */        public static function selectFromWriteConnection($query, $bindings = [])\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->selectFromWriteConnection($query, $bindings);\n        }\n                    /**\n         * Run a select statement against the database.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @param bool $useReadPdo\n         * @return array \n         * @static \n         */        public static function select($query, $bindings = [], $useReadPdo = true)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->select($query, $bindings, $useReadPdo);\n        }\n                    /**\n         * Run a select statement against the database and returns all of the result sets.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @param bool $useReadPdo\n         * @return array \n         * @static \n         */        public static function selectResultSets($query, $bindings = [], $useReadPdo = true)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->selectResultSets($query, $bindings, $useReadPdo);\n        }\n                    /**\n         * Run a select statement against the database and returns a generator.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @param bool $useReadPdo\n         * @return \\Generator \n         * @static \n         */        public static function cursor($query, $bindings = [], $useReadPdo = true)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->cursor($query, $bindings, $useReadPdo);\n        }\n                    /**\n         * Run an update statement against the database.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @return int \n         * @static \n         */        public static function update($query, $bindings = [])\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->update($query, $bindings);\n        }\n                    /**\n         * Run a delete statement against the database.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @return int \n         * @static \n         */        public static function delete($query, $bindings = [])\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->delete($query, $bindings);\n        }\n                    /**\n         * Execute an SQL statement and return the boolean result.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @return bool \n         * @static \n         */        public static function statement($query, $bindings = [])\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->statement($query, $bindings);\n        }\n                    /**\n         * Run an SQL statement and get the number of rows affected.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @return int \n         * @static \n         */        public static function affectingStatement($query, $bindings = [])\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->affectingStatement($query, $bindings);\n        }\n                    /**\n         * Run a raw, unprepared query against the PDO connection.\n         *\n         * @param string $query\n         * @return bool \n         * @static \n         */        public static function unprepared($query)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->unprepared($query);\n        }\n                    /**\n         * Get the number of open connections for the database.\n         *\n         * @return int|null \n         * @static \n         */        public static function threadCount()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->threadCount();\n        }\n                    /**\n         * Execute the given callback in \"dry run\" mode.\n         *\n         * @param \\Closure $callback\n         * @return array \n         * @static \n         */        public static function pretend($callback)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->pretend($callback);\n        }\n                    /**\n         * Execute the given callback without \"pretending\".\n         *\n         * @param \\Closure $callback\n         * @return mixed \n         * @static \n         */        public static function withoutPretending($callback)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->withoutPretending($callback);\n        }\n                    /**\n         * Bind values to their parameters in the given statement.\n         *\n         * @param \\PDOStatement $statement\n         * @param array $bindings\n         * @return void \n         * @static \n         */        public static function bindValues($statement, $bindings)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->bindValues($statement, $bindings);\n        }\n                    /**\n         * Prepare the query bindings for execution.\n         *\n         * @param array $bindings\n         * @return array \n         * @static \n         */        public static function prepareBindings($bindings)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->prepareBindings($bindings);\n        }\n                    /**\n         * Log a query in the connection's query log.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @param float|null $time\n         * @return void \n         * @static \n         */        public static function logQuery($query, $bindings, $time = null)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->logQuery($query, $bindings, $time);\n        }\n                    /**\n         * Register a callback to be invoked when the connection queries for longer than a given amount of time.\n         *\n         * @param \\DateTimeInterface|\\Carbon\\CarbonInterval|float|int $threshold\n         * @param callable $handler\n         * @return void \n         * @static \n         */        public static function whenQueryingForLongerThan($threshold, $handler)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->whenQueryingForLongerThan($threshold, $handler);\n        }\n                    /**\n         * Allow all the query duration handlers to run again, even if they have already run.\n         *\n         * @return void \n         * @static \n         */        public static function allowQueryDurationHandlersToRunAgain()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->allowQueryDurationHandlersToRunAgain();\n        }\n                    /**\n         * Get the duration of all run queries in milliseconds.\n         *\n         * @return float \n         * @static \n         */        public static function totalQueryDuration()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->totalQueryDuration();\n        }\n                    /**\n         * Reset the duration of all run queries.\n         *\n         * @return void \n         * @static \n         */        public static function resetTotalQueryDuration()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->resetTotalQueryDuration();\n        }\n                    /**\n         * Reconnect to the database if a PDO connection is missing.\n         *\n         * @return void \n         * @static \n         */        public static function reconnectIfMissingConnection()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->reconnectIfMissingConnection();\n        }\n                    /**\n         * Register a hook to be run just before a database transaction is started.\n         *\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Database\\MySqlConnection \n         * @static \n         */        public static function beforeStartingTransaction($callback)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->beforeStartingTransaction($callback);\n        }\n                    /**\n         * Register a hook to be run just before a database query is executed.\n         *\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Database\\MySqlConnection \n         * @static \n         */        public static function beforeExecuting($callback)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->beforeExecuting($callback);\n        }\n                    /**\n         * Register a database query listener with the connection.\n         *\n         * @param \\Closure $callback\n         * @return void \n         * @static \n         */        public static function listen($callback)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->listen($callback);\n        }\n                    /**\n         * Get a new raw query expression.\n         *\n         * @param mixed $value\n         * @return \\Illuminate\\Contracts\\Database\\Query\\Expression \n         * @static \n         */        public static function raw($value)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->raw($value);\n        }\n                    /**\n         * Escape a value for safe SQL embedding.\n         *\n         * @param string|float|int|bool|null $value\n         * @param bool $binary\n         * @return string \n         * @static \n         */        public static function escape($value, $binary = false)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->escape($value, $binary);\n        }\n                    /**\n         * Determine if the database connection has modified any database records.\n         *\n         * @return bool \n         * @static \n         */        public static function hasModifiedRecords()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->hasModifiedRecords();\n        }\n                    /**\n         * Indicate if any records have been modified.\n         *\n         * @param bool $value\n         * @return void \n         * @static \n         */        public static function recordsHaveBeenModified($value = true)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->recordsHaveBeenModified($value);\n        }\n                    /**\n         * Set the record modification state.\n         *\n         * @param bool $value\n         * @return \\Illuminate\\Database\\MySqlConnection \n         * @static \n         */        public static function setRecordModificationState($value)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->setRecordModificationState($value);\n        }\n                    /**\n         * Reset the record modification state.\n         *\n         * @return void \n         * @static \n         */        public static function forgetRecordModificationState()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->forgetRecordModificationState();\n        }\n                    /**\n         * Indicate that the connection should use the write PDO connection for reads.\n         *\n         * @param bool $value\n         * @return \\Illuminate\\Database\\MySqlConnection \n         * @static \n         */        public static function useWriteConnectionWhenReading($value = true)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->useWriteConnectionWhenReading($value);\n        }\n                    /**\n         * Get the current PDO connection.\n         *\n         * @return \\PDO \n         * @static \n         */        public static function getPdo()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getPdo();\n        }\n                    /**\n         * Get the current PDO connection parameter without executing any reconnect logic.\n         *\n         * @return \\PDO|\\Closure|null \n         * @static \n         */        public static function getRawPdo()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getRawPdo();\n        }\n                    /**\n         * Get the current PDO connection used for reading.\n         *\n         * @return \\PDO \n         * @static \n         */        public static function getReadPdo()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getReadPdo();\n        }\n                    /**\n         * Get the current read PDO connection parameter without executing any reconnect logic.\n         *\n         * @return \\PDO|\\Closure|null \n         * @static \n         */        public static function getRawReadPdo()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getRawReadPdo();\n        }\n                    /**\n         * Set the PDO connection.\n         *\n         * @param \\PDO|\\Closure|null $pdo\n         * @return \\Illuminate\\Database\\MySqlConnection \n         * @static \n         */        public static function setPdo($pdo)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->setPdo($pdo);\n        }\n                    /**\n         * Set the PDO connection used for reading.\n         *\n         * @param \\PDO|\\Closure|null $pdo\n         * @return \\Illuminate\\Database\\MySqlConnection \n         * @static \n         */        public static function setReadPdo($pdo)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->setReadPdo($pdo);\n        }\n                    /**\n         * Get the database connection name.\n         *\n         * @return string|null \n         * @static \n         */        public static function getName()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getName();\n        }\n                    /**\n         * Get the database connection full name.\n         *\n         * @return string|null \n         * @static \n         */        public static function getNameWithReadWriteType()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getNameWithReadWriteType();\n        }\n                    /**\n         * Get an option from the configuration options.\n         *\n         * @param string|null $option\n         * @return mixed \n         * @static \n         */        public static function getConfig($option = null)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getConfig($option);\n        }\n                    /**\n         * Get the PDO driver name.\n         *\n         * @return string \n         * @static \n         */        public static function getDriverName()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getDriverName();\n        }\n                    /**\n         * Get the query grammar used by the connection.\n         *\n         * @return \\Illuminate\\Database\\Query\\Grammars\\Grammar \n         * @static \n         */        public static function getQueryGrammar()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getQueryGrammar();\n        }\n                    /**\n         * Set the query grammar used by the connection.\n         *\n         * @param \\Illuminate\\Database\\Query\\Grammars\\Grammar $grammar\n         * @return \\Illuminate\\Database\\MySqlConnection \n         * @static \n         */        public static function setQueryGrammar($grammar)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->setQueryGrammar($grammar);\n        }\n                    /**\n         * Get the schema grammar used by the connection.\n         *\n         * @return \\Illuminate\\Database\\Schema\\Grammars\\Grammar \n         * @static \n         */        public static function getSchemaGrammar()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getSchemaGrammar();\n        }\n                    /**\n         * Set the schema grammar used by the connection.\n         *\n         * @param \\Illuminate\\Database\\Schema\\Grammars\\Grammar $grammar\n         * @return \\Illuminate\\Database\\MySqlConnection \n         * @static \n         */        public static function setSchemaGrammar($grammar)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->setSchemaGrammar($grammar);\n        }\n                    /**\n         * Get the query post processor used by the connection.\n         *\n         * @return \\Illuminate\\Database\\Query\\Processors\\Processor \n         * @static \n         */        public static function getPostProcessor()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getPostProcessor();\n        }\n                    /**\n         * Set the query post processor used by the connection.\n         *\n         * @param \\Illuminate\\Database\\Query\\Processors\\Processor $processor\n         * @return \\Illuminate\\Database\\MySqlConnection \n         * @static \n         */        public static function setPostProcessor($processor)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->setPostProcessor($processor);\n        }\n                    /**\n         * Get the event dispatcher used by the connection.\n         *\n         * @return \\Illuminate\\Contracts\\Events\\Dispatcher \n         * @static \n         */        public static function getEventDispatcher()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getEventDispatcher();\n        }\n                    /**\n         * Set the event dispatcher instance on the connection.\n         *\n         * @param \\Illuminate\\Contracts\\Events\\Dispatcher $events\n         * @return \\Illuminate\\Database\\MySqlConnection \n         * @static \n         */        public static function setEventDispatcher($events)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->setEventDispatcher($events);\n        }\n                    /**\n         * Unset the event dispatcher for this connection.\n         *\n         * @return void \n         * @static \n         */        public static function unsetEventDispatcher()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->unsetEventDispatcher();\n        }\n                    /**\n         * Set the transaction manager instance on the connection.\n         *\n         * @param \\Illuminate\\Database\\DatabaseTransactionsManager $manager\n         * @return \\Illuminate\\Database\\MySqlConnection \n         * @static \n         */        public static function setTransactionManager($manager)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->setTransactionManager($manager);\n        }\n                    /**\n         * Unset the transaction manager for this connection.\n         *\n         * @return void \n         * @static \n         */        public static function unsetTransactionManager()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->unsetTransactionManager();\n        }\n                    /**\n         * Determine if the connection is in a \"dry run\".\n         *\n         * @return bool \n         * @static \n         */        public static function pretending()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->pretending();\n        }\n                    /**\n         * Get the connection query log.\n         *\n         * @return array \n         * @static \n         */        public static function getQueryLog()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getQueryLog();\n        }\n                    /**\n         * Get the connection query log with embedded bindings.\n         *\n         * @return array \n         * @static \n         */        public static function getRawQueryLog()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getRawQueryLog();\n        }\n                    /**\n         * Clear the query log.\n         *\n         * @return void \n         * @static \n         */        public static function flushQueryLog()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->flushQueryLog();\n        }\n                    /**\n         * Enable the query log on the connection.\n         *\n         * @return void \n         * @static \n         */        public static function enableQueryLog()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->enableQueryLog();\n        }\n                    /**\n         * Disable the query log on the connection.\n         *\n         * @return void \n         * @static \n         */        public static function disableQueryLog()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->disableQueryLog();\n        }\n                    /**\n         * Determine whether we're logging queries.\n         *\n         * @return bool \n         * @static \n         */        public static function logging()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->logging();\n        }\n                    /**\n         * Get the name of the connected database.\n         *\n         * @return string \n         * @static \n         */        public static function getDatabaseName()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getDatabaseName();\n        }\n                    /**\n         * Set the name of the connected database.\n         *\n         * @param string $database\n         * @return \\Illuminate\\Database\\MySqlConnection \n         * @static \n         */        public static function setDatabaseName($database)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->setDatabaseName($database);\n        }\n                    /**\n         * Set the read / write type of the connection.\n         *\n         * @param string|null $readWriteType\n         * @return \\Illuminate\\Database\\MySqlConnection \n         * @static \n         */        public static function setReadWriteType($readWriteType)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->setReadWriteType($readWriteType);\n        }\n                    /**\n         * Get the table prefix for the connection.\n         *\n         * @return string \n         * @static \n         */        public static function getTablePrefix()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->getTablePrefix();\n        }\n                    /**\n         * Set the table prefix in use by the connection.\n         *\n         * @param string $prefix\n         * @return \\Illuminate\\Database\\MySqlConnection \n         * @static \n         */        public static function setTablePrefix($prefix)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->setTablePrefix($prefix);\n        }\n                    /**\n         * Set the table prefix and return the grammar.\n         *\n         * @param \\Illuminate\\Database\\Grammar $grammar\n         * @return \\Illuminate\\Database\\Grammar \n         * @static \n         */        public static function withTablePrefix($grammar)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->withTablePrefix($grammar);\n        }\n                    /**\n         * Register a connection resolver.\n         *\n         * @param string $driver\n         * @param \\Closure $callback\n         * @return void \n         * @static \n         */        public static function resolverFor($driver, $callback)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        \\Illuminate\\Database\\MySqlConnection::resolverFor($driver, $callback);\n        }\n                    /**\n         * Get the connection resolver for the given driver.\n         *\n         * @param string $driver\n         * @return mixed \n         * @static \n         */        public static function getResolver($driver)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        return \\Illuminate\\Database\\MySqlConnection::getResolver($driver);\n        }\n                    /**\n         * Execute a Closure within a transaction.\n         *\n         * @param \\Closure $callback\n         * @param int $attempts\n         * @return mixed \n         * @throws \\Throwable\n         * @static \n         */        public static function transaction($callback, $attempts = 1)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->transaction($callback, $attempts);\n        }\n                    /**\n         * Start a new database transaction.\n         *\n         * @return void \n         * @throws \\Throwable\n         * @static \n         */        public static function beginTransaction()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->beginTransaction();\n        }\n                    /**\n         * Commit the active database transaction.\n         *\n         * @return void \n         * @throws \\Throwable\n         * @static \n         */        public static function commit()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->commit();\n        }\n                    /**\n         * Rollback the active database transaction.\n         *\n         * @param int|null $toLevel\n         * @return void \n         * @throws \\Throwable\n         * @static \n         */        public static function rollBack($toLevel = null)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->rollBack($toLevel);\n        }\n                    /**\n         * Get the number of active transactions.\n         *\n         * @return int \n         * @static \n         */        public static function transactionLevel()\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        return $instance->transactionLevel();\n        }\n                    /**\n         * Execute the callback after a transaction commits.\n         *\n         * @param callable $callback\n         * @return void \n         * @throws \\RuntimeException\n         * @static \n         */        public static function afterCommit($callback)\n        {            //Method inherited from \\Illuminate\\Database\\Connection         \n                        /** @var \\Illuminate\\Database\\MySqlConnection $instance */\n                        $instance->afterCommit($callback);\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Events\\Dispatcher\n     * @see \\Illuminate\\Support\\Testing\\Fakes\\EventFake\n     */        class Event {\n                    /**\n         * Register an event listener with the dispatcher.\n         *\n         * @param \\Illuminate\\Events\\Queued\\Closure|\\Closure|string|array $events\n         * @param \\Illuminate\\Events\\Queued\\Closure|\\Closure|string|array|null $listener\n         * @return void \n         * @static \n         */        public static function listen($events, $listener = null)\n        {\n                        /** @var \\Illuminate\\Events\\Dispatcher $instance */\n                        $instance->listen($events, $listener);\n        }\n                    /**\n         * Determine if a given event has listeners.\n         *\n         * @param string $eventName\n         * @return bool \n         * @static \n         */        public static function hasListeners($eventName)\n        {\n                        /** @var \\Illuminate\\Events\\Dispatcher $instance */\n                        return $instance->hasListeners($eventName);\n        }\n                    /**\n         * Determine if the given event has any wildcard listeners.\n         *\n         * @param string $eventName\n         * @return bool \n         * @static \n         */        public static function hasWildcardListeners($eventName)\n        {\n                        /** @var \\Illuminate\\Events\\Dispatcher $instance */\n                        return $instance->hasWildcardListeners($eventName);\n        }\n                    /**\n         * Register an event and payload to be fired later.\n         *\n         * @param string $event\n         * @param object|array $payload\n         * @return void \n         * @static \n         */        public static function push($event, $payload = [])\n        {\n                        /** @var \\Illuminate\\Events\\Dispatcher $instance */\n                        $instance->push($event, $payload);\n        }\n                    /**\n         * Flush a set of pushed events.\n         *\n         * @param string $event\n         * @return void \n         * @static \n         */        public static function flush($event)\n        {\n                        /** @var \\Illuminate\\Events\\Dispatcher $instance */\n                        $instance->flush($event);\n        }\n                    /**\n         * Register an event subscriber with the dispatcher.\n         *\n         * @param object|string $subscriber\n         * @return void \n         * @static \n         */        public static function subscribe($subscriber)\n        {\n                        /** @var \\Illuminate\\Events\\Dispatcher $instance */\n                        $instance->subscribe($subscriber);\n        }\n                    /**\n         * Fire an event until the first non-null response is returned.\n         *\n         * @param string|object $event\n         * @param mixed $payload\n         * @return mixed \n         * @static \n         */        public static function until($event, $payload = [])\n        {\n                        /** @var \\Illuminate\\Events\\Dispatcher $instance */\n                        return $instance->until($event, $payload);\n        }\n                    /**\n         * Fire an event and call the listeners.\n         *\n         * @param string|object $event\n         * @param mixed $payload\n         * @param bool $halt\n         * @return array|null \n         * @static \n         */        public static function dispatch($event, $payload = [], $halt = false)\n        {\n                        /** @var \\Illuminate\\Events\\Dispatcher $instance */\n                        return $instance->dispatch($event, $payload, $halt);\n        }\n                    /**\n         * Get all of the listeners for a given event name.\n         *\n         * @param string $eventName\n         * @return array \n         * @static \n         */        public static function getListeners($eventName)\n        {\n                        /** @var \\Illuminate\\Events\\Dispatcher $instance */\n                        return $instance->getListeners($eventName);\n        }\n                    /**\n         * Register an event listener with the dispatcher.\n         *\n         * @param \\Closure|string|array $listener\n         * @param bool $wildcard\n         * @return \\Closure \n         * @static \n         */        public static function makeListener($listener, $wildcard = false)\n        {\n                        /** @var \\Illuminate\\Events\\Dispatcher $instance */\n                        return $instance->makeListener($listener, $wildcard);\n        }\n                    /**\n         * Create a class based listener using the IoC container.\n         *\n         * @param string $listener\n         * @param bool $wildcard\n         * @return \\Closure \n         * @static \n         */        public static function createClassListener($listener, $wildcard = false)\n        {\n                        /** @var \\Illuminate\\Events\\Dispatcher $instance */\n                        return $instance->createClassListener($listener, $wildcard);\n        }\n                    /**\n         * Remove a set of listeners from the dispatcher.\n         *\n         * @param string $event\n         * @return void \n         * @static \n         */        public static function forget($event)\n        {\n                        /** @var \\Illuminate\\Events\\Dispatcher $instance */\n                        $instance->forget($event);\n        }\n                    /**\n         * Forget all of the pushed listeners.\n         *\n         * @return void \n         * @static \n         */        public static function forgetPushed()\n        {\n                        /** @var \\Illuminate\\Events\\Dispatcher $instance */\n                        $instance->forgetPushed();\n        }\n                    /**\n         * Set the queue resolver implementation.\n         *\n         * @param callable $resolver\n         * @return \\Illuminate\\Events\\Dispatcher \n         * @static \n         */        public static function setQueueResolver($resolver)\n        {\n                        /** @var \\Illuminate\\Events\\Dispatcher $instance */\n                        return $instance->setQueueResolver($resolver);\n        }\n                    /**\n         * Set the database transaction manager resolver implementation.\n         *\n         * @param callable $resolver\n         * @return \\Illuminate\\Events\\Dispatcher \n         * @static \n         */        public static function setTransactionManagerResolver($resolver)\n        {\n                        /** @var \\Illuminate\\Events\\Dispatcher $instance */\n                        return $instance->setTransactionManagerResolver($resolver);\n        }\n                    /**\n         * Gets the raw, unprepared listeners.\n         *\n         * @return array \n         * @static \n         */        public static function getRawListeners()\n        {\n                        /** @var \\Illuminate\\Events\\Dispatcher $instance */\n                        return $instance->getRawListeners();\n        }\n                    /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @param-closure-this static  $macro\n         * @return void \n         * @static \n         */        public static function macro($name, $macro)\n        {\n                        \\Illuminate\\Events\\Dispatcher::macro($name, $macro);\n        }\n                    /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void \n         * @throws \\ReflectionException\n         * @static \n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\Illuminate\\Events\\Dispatcher::mixin($mixin, $replace);\n        }\n                    /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */        public static function hasMacro($name)\n        {\n                        return \\Illuminate\\Events\\Dispatcher::hasMacro($name);\n        }\n                    /**\n         * Flush the existing macros.\n         *\n         * @return void \n         * @static \n         */        public static function flushMacros()\n        {\n                        \\Illuminate\\Events\\Dispatcher::flushMacros();\n        }\n                    /**\n         * Specify the events that should be dispatched instead of faked.\n         *\n         * @param array|string $eventsToDispatch\n         * @return \\Illuminate\\Support\\Testing\\Fakes\\EventFake \n         * @static \n         */        public static function except($eventsToDispatch)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\EventFake $instance */\n                        return $instance->except($eventsToDispatch);\n        }\n                    /**\n         * Assert if an event has a listener attached to it.\n         *\n         * @param string $expectedEvent\n         * @param string|array $expectedListener\n         * @return void \n         * @static \n         */        public static function assertListening($expectedEvent, $expectedListener)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\EventFake $instance */\n                        $instance->assertListening($expectedEvent, $expectedListener);\n        }\n                    /**\n         * Assert if an event was dispatched based on a truth-test callback.\n         *\n         * @param string|\\Closure $event\n         * @param callable|int|null $callback\n         * @return void \n         * @static \n         */        public static function assertDispatched($event, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\EventFake $instance */\n                        $instance->assertDispatched($event, $callback);\n        }\n                    /**\n         * Assert if an event was dispatched a number of times.\n         *\n         * @param string $event\n         * @param int $times\n         * @return void \n         * @static \n         */        public static function assertDispatchedTimes($event, $times = 1)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\EventFake $instance */\n                        $instance->assertDispatchedTimes($event, $times);\n        }\n                    /**\n         * Determine if an event was dispatched based on a truth-test callback.\n         *\n         * @param string|\\Closure $event\n         * @param callable|null $callback\n         * @return void \n         * @static \n         */        public static function assertNotDispatched($event, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\EventFake $instance */\n                        $instance->assertNotDispatched($event, $callback);\n        }\n                    /**\n         * Assert that no events were dispatched.\n         *\n         * @return void \n         * @static \n         */        public static function assertNothingDispatched()\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\EventFake $instance */\n                        $instance->assertNothingDispatched();\n        }\n                    /**\n         * Get all of the events matching a truth-test callback.\n         *\n         * @param string $event\n         * @param callable|null $callback\n         * @return \\Illuminate\\Support\\Collection \n         * @static \n         */        public static function dispatched($event, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\EventFake $instance */\n                        return $instance->dispatched($event, $callback);\n        }\n                    /**\n         * Determine if the given event has been dispatched.\n         *\n         * @param string $event\n         * @return bool \n         * @static \n         */        public static function hasDispatched($event)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\EventFake $instance */\n                        return $instance->hasDispatched($event);\n        }\n                    /**\n         * Get the events that have been dispatched.\n         *\n         * @return array \n         * @static \n         */        public static function dispatchedEvents()\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\EventFake $instance */\n                        return $instance->dispatchedEvents();\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Filesystem\\Filesystem\n     */        class File {\n                    /**\n         * Determine if a file or directory exists.\n         *\n         * @param string $path\n         * @return bool \n         * @static \n         */        public static function exists($path)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->exists($path);\n        }\n                    /**\n         * Determine if a file or directory is missing.\n         *\n         * @param string $path\n         * @return bool \n         * @static \n         */        public static function missing($path)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->missing($path);\n        }\n                    /**\n         * Get the contents of a file.\n         *\n         * @param string $path\n         * @param bool $lock\n         * @return string \n         * @throws \\Illuminate\\Contracts\\Filesystem\\FileNotFoundException\n         * @static \n         */        public static function get($path, $lock = false)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->get($path, $lock);\n        }\n                    /**\n         * Get the contents of a file as decoded JSON.\n         *\n         * @param string $path\n         * @param int $flags\n         * @param bool $lock\n         * @return array \n         * @throws \\Illuminate\\Contracts\\Filesystem\\FileNotFoundException\n         * @static \n         */        public static function json($path, $flags = 0, $lock = false)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->json($path, $flags, $lock);\n        }\n                    /**\n         * Get contents of a file with shared access.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */        public static function sharedGet($path)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->sharedGet($path);\n        }\n                    /**\n         * Get the returned value of a file.\n         *\n         * @param string $path\n         * @param array $data\n         * @return mixed \n         * @throws \\Illuminate\\Contracts\\Filesystem\\FileNotFoundException\n         * @static \n         */        public static function getRequire($path, $data = [])\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->getRequire($path, $data);\n        }\n                    /**\n         * Require the given file once.\n         *\n         * @param string $path\n         * @param array $data\n         * @return mixed \n         * @throws \\Illuminate\\Contracts\\Filesystem\\FileNotFoundException\n         * @static \n         */        public static function requireOnce($path, $data = [])\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->requireOnce($path, $data);\n        }\n                    /**\n         * Get the contents of a file one line at a time.\n         *\n         * @param string $path\n         * @return \\Illuminate\\Support\\LazyCollection \n         * @throws \\Illuminate\\Contracts\\Filesystem\\FileNotFoundException\n         * @static \n         */        public static function lines($path)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->lines($path);\n        }\n                    /**\n         * Get the hash of the file at the given path.\n         *\n         * @param string $path\n         * @param string $algorithm\n         * @return string|false \n         * @static \n         */        public static function hash($path, $algorithm = 'md5')\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->hash($path, $algorithm);\n        }\n                    /**\n         * Write the contents of a file.\n         *\n         * @param string $path\n         * @param string $contents\n         * @param bool $lock\n         * @return int|bool \n         * @static \n         */        public static function put($path, $contents, $lock = false)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->put($path, $contents, $lock);\n        }\n                    /**\n         * Write the contents of a file, replacing it atomically if it already exists.\n         *\n         * @param string $path\n         * @param string $content\n         * @param int|null $mode\n         * @return void \n         * @static \n         */        public static function replace($path, $content, $mode = null)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        $instance->replace($path, $content, $mode);\n        }\n                    /**\n         * Replace a given string within a given file.\n         *\n         * @param array|string $search\n         * @param array|string $replace\n         * @param string $path\n         * @return void \n         * @static \n         */        public static function replaceInFile($search, $replace, $path)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        $instance->replaceInFile($search, $replace, $path);\n        }\n                    /**\n         * Prepend to a file.\n         *\n         * @param string $path\n         * @param string $data\n         * @return int \n         * @static \n         */        public static function prepend($path, $data)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->prepend($path, $data);\n        }\n                    /**\n         * Append to a file.\n         *\n         * @param string $path\n         * @param string $data\n         * @param bool $lock\n         * @return int \n         * @static \n         */        public static function append($path, $data, $lock = false)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->append($path, $data, $lock);\n        }\n                    /**\n         * Get or set UNIX mode of a file or directory.\n         *\n         * @param string $path\n         * @param int|null $mode\n         * @return mixed \n         * @static \n         */        public static function chmod($path, $mode = null)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->chmod($path, $mode);\n        }\n                    /**\n         * Delete the file at a given path.\n         *\n         * @param string|array $paths\n         * @return bool \n         * @static \n         */        public static function delete($paths)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->delete($paths);\n        }\n                    /**\n         * Move a file to a new location.\n         *\n         * @param string $path\n         * @param string $target\n         * @return bool \n         * @static \n         */        public static function move($path, $target)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->move($path, $target);\n        }\n                    /**\n         * Copy a file to a new location.\n         *\n         * @param string $path\n         * @param string $target\n         * @return bool \n         * @static \n         */        public static function copy($path, $target)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->copy($path, $target);\n        }\n                    /**\n         * Create a symlink to the target file or directory. On Windows, a hard link is created if the target is a file.\n         *\n         * @param string $target\n         * @param string $link\n         * @return bool|null \n         * @static \n         */        public static function link($target, $link)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->link($target, $link);\n        }\n                    /**\n         * Create a relative symlink to the target file or directory.\n         *\n         * @param string $target\n         * @param string $link\n         * @return void \n         * @throws \\RuntimeException\n         * @static \n         */        public static function relativeLink($target, $link)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        $instance->relativeLink($target, $link);\n        }\n                    /**\n         * Extract the file name from a file path.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */        public static function name($path)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->name($path);\n        }\n                    /**\n         * Extract the trailing name component from a file path.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */        public static function basename($path)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->basename($path);\n        }\n                    /**\n         * Extract the parent directory from a file path.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */        public static function dirname($path)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->dirname($path);\n        }\n                    /**\n         * Extract the file extension from a file path.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */        public static function extension($path)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->extension($path);\n        }\n                    /**\n         * Guess the file extension from the mime-type of a given file.\n         *\n         * @param string $path\n         * @return string|null \n         * @throws \\RuntimeException\n         * @static \n         */        public static function guessExtension($path)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->guessExtension($path);\n        }\n                    /**\n         * Get the file type of a given file.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */        public static function type($path)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->type($path);\n        }\n                    /**\n         * Get the mime-type of a given file.\n         *\n         * @param string $path\n         * @return string|false \n         * @static \n         */        public static function mimeType($path)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->mimeType($path);\n        }\n                    /**\n         * Get the file size of a given file.\n         *\n         * @param string $path\n         * @return int \n         * @static \n         */        public static function size($path)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->size($path);\n        }\n                    /**\n         * Get the file's last modification time.\n         *\n         * @param string $path\n         * @return int \n         * @static \n         */        public static function lastModified($path)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->lastModified($path);\n        }\n                    /**\n         * Determine if the given path is a directory.\n         *\n         * @param string $directory\n         * @return bool \n         * @static \n         */        public static function isDirectory($directory)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->isDirectory($directory);\n        }\n                    /**\n         * Determine if the given path is a directory that does not contain any other files or directories.\n         *\n         * @param string $directory\n         * @param bool $ignoreDotFiles\n         * @return bool \n         * @static \n         */        public static function isEmptyDirectory($directory, $ignoreDotFiles = false)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->isEmptyDirectory($directory, $ignoreDotFiles);\n        }\n                    /**\n         * Determine if the given path is readable.\n         *\n         * @param string $path\n         * @return bool \n         * @static \n         */        public static function isReadable($path)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->isReadable($path);\n        }\n                    /**\n         * Determine if the given path is writable.\n         *\n         * @param string $path\n         * @return bool \n         * @static \n         */        public static function isWritable($path)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->isWritable($path);\n        }\n                    /**\n         * Determine if two files are the same by comparing their hashes.\n         *\n         * @param string $firstFile\n         * @param string $secondFile\n         * @return bool \n         * @static \n         */        public static function hasSameHash($firstFile, $secondFile)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->hasSameHash($firstFile, $secondFile);\n        }\n                    /**\n         * Determine if the given path is a file.\n         *\n         * @param string $file\n         * @return bool \n         * @static \n         */        public static function isFile($file)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->isFile($file);\n        }\n                    /**\n         * Find path names matching a given pattern.\n         *\n         * @param string $pattern\n         * @param int $flags\n         * @return array \n         * @static \n         */        public static function glob($pattern, $flags = 0)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->glob($pattern, $flags);\n        }\n                    /**\n         * Get an array of all files in a directory.\n         *\n         * @param string $directory\n         * @param bool $hidden\n         * @return \\Symfony\\Component\\Finder\\SplFileInfo[] \n         * @static \n         */        public static function files($directory, $hidden = false)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->files($directory, $hidden);\n        }\n                    /**\n         * Get all of the files from the given directory (recursive).\n         *\n         * @param string $directory\n         * @param bool $hidden\n         * @return \\Symfony\\Component\\Finder\\SplFileInfo[] \n         * @static \n         */        public static function allFiles($directory, $hidden = false)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->allFiles($directory, $hidden);\n        }\n                    /**\n         * Get all of the directories within a given directory.\n         *\n         * @param string $directory\n         * @return array \n         * @static \n         */        public static function directories($directory)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->directories($directory);\n        }\n                    /**\n         * Ensure a directory exists.\n         *\n         * @param string $path\n         * @param int $mode\n         * @param bool $recursive\n         * @return void \n         * @static \n         */        public static function ensureDirectoryExists($path, $mode = 493, $recursive = true)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        $instance->ensureDirectoryExists($path, $mode, $recursive);\n        }\n                    /**\n         * Create a directory.\n         *\n         * @param string $path\n         * @param int $mode\n         * @param bool $recursive\n         * @param bool $force\n         * @return bool \n         * @static \n         */        public static function makeDirectory($path, $mode = 493, $recursive = false, $force = false)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->makeDirectory($path, $mode, $recursive, $force);\n        }\n                    /**\n         * Move a directory.\n         *\n         * @param string $from\n         * @param string $to\n         * @param bool $overwrite\n         * @return bool \n         * @static \n         */        public static function moveDirectory($from, $to, $overwrite = false)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->moveDirectory($from, $to, $overwrite);\n        }\n                    /**\n         * Copy a directory from one location to another.\n         *\n         * @param string $directory\n         * @param string $destination\n         * @param int|null $options\n         * @return bool \n         * @static \n         */        public static function copyDirectory($directory, $destination, $options = null)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->copyDirectory($directory, $destination, $options);\n        }\n                    /**\n         * Recursively delete a directory.\n         * \n         * The directory itself may be optionally preserved.\n         *\n         * @param string $directory\n         * @param bool $preserve\n         * @return bool \n         * @static \n         */        public static function deleteDirectory($directory, $preserve = false)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->deleteDirectory($directory, $preserve);\n        }\n                    /**\n         * Remove all of the directories within a given directory.\n         *\n         * @param string $directory\n         * @return bool \n         * @static \n         */        public static function deleteDirectories($directory)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->deleteDirectories($directory);\n        }\n                    /**\n         * Empty the specified directory of all files and folders.\n         *\n         * @param string $directory\n         * @return bool \n         * @static \n         */        public static function cleanDirectory($directory)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->cleanDirectory($directory);\n        }\n                    /**\n         * Apply the callback if the given \"value\" is (or resolves to) truthy.\n         *\n         * @template TWhenParameter\n         * @template TWhenReturnType\n         * @param \\Illuminate\\Filesystem\\(\\Closure($this):  TWhenParameter)|TWhenParameter|null  $value\n         * @param \\Illuminate\\Filesystem\\(callable($this,  TWhenParameter): TWhenReturnType)|null  $callback\n         * @param \\Illuminate\\Filesystem\\(callable($this,  TWhenParameter): TWhenReturnType)|null  $default\n         * @return $this|\\Illuminate\\Filesystem\\TWhenReturnType \n         * @static \n         */        public static function when($value = null, $callback = null, $default = null)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->when($value, $callback, $default);\n        }\n                    /**\n         * Apply the callback if the given \"value\" is (or resolves to) falsy.\n         *\n         * @template TUnlessParameter\n         * @template TUnlessReturnType\n         * @param \\Illuminate\\Filesystem\\(\\Closure($this):  TUnlessParameter)|TUnlessParameter|null  $value\n         * @param \\Illuminate\\Filesystem\\(callable($this,  TUnlessParameter): TUnlessReturnType)|null  $callback\n         * @param \\Illuminate\\Filesystem\\(callable($this,  TUnlessParameter): TUnlessReturnType)|null  $default\n         * @return $this|\\Illuminate\\Filesystem\\TUnlessReturnType \n         * @static \n         */        public static function unless($value = null, $callback = null, $default = null)\n        {\n                        /** @var \\Illuminate\\Filesystem\\Filesystem $instance */\n                        return $instance->unless($value, $callback, $default);\n        }\n                    /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @param-closure-this static  $macro\n         * @return void \n         * @static \n         */        public static function macro($name, $macro)\n        {\n                        \\Illuminate\\Filesystem\\Filesystem::macro($name, $macro);\n        }\n                    /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void \n         * @throws \\ReflectionException\n         * @static \n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\Illuminate\\Filesystem\\Filesystem::mixin($mixin, $replace);\n        }\n                    /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */        public static function hasMacro($name)\n        {\n                        return \\Illuminate\\Filesystem\\Filesystem::hasMacro($name);\n        }\n                    /**\n         * Flush the existing macros.\n         *\n         * @return void \n         * @static \n         */        public static function flushMacros()\n        {\n                        \\Illuminate\\Filesystem\\Filesystem::flushMacros();\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Auth\\Access\\Gate\n     */        class Gate {\n                    /**\n         * Determine if a given ability has been defined.\n         *\n         * @param string|array $ability\n         * @return bool \n         * @static \n         */        public static function has($ability)\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->has($ability);\n        }\n                    /**\n         * Perform an on-demand authorization check. Throw an authorization exception if the condition or callback is false.\n         *\n         * @param \\Illuminate\\Auth\\Access\\Response|\\Closure|bool $condition\n         * @param string|null $message\n         * @param string|null $code\n         * @return \\Illuminate\\Auth\\Access\\Response \n         * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n         * @static \n         */        public static function allowIf($condition, $message = null, $code = null)\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->allowIf($condition, $message, $code);\n        }\n                    /**\n         * Perform an on-demand authorization check. Throw an authorization exception if the condition or callback is true.\n         *\n         * @param \\Illuminate\\Auth\\Access\\Response|\\Closure|bool $condition\n         * @param string|null $message\n         * @param string|null $code\n         * @return \\Illuminate\\Auth\\Access\\Response \n         * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n         * @static \n         */        public static function denyIf($condition, $message = null, $code = null)\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->denyIf($condition, $message, $code);\n        }\n                    /**\n         * Define a new ability.\n         *\n         * @param \\BackedEnum|string $ability\n         * @param callable|array|string $callback\n         * @return \\Illuminate\\Auth\\Access\\Gate \n         * @throws \\InvalidArgumentException\n         * @static \n         */        public static function define($ability, $callback)\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->define($ability, $callback);\n        }\n                    /**\n         * Define abilities for a resource.\n         *\n         * @param string $name\n         * @param string $class\n         * @param array|null $abilities\n         * @return \\Illuminate\\Auth\\Access\\Gate \n         * @static \n         */        public static function resource($name, $class, $abilities = null)\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->resource($name, $class, $abilities);\n        }\n                    /**\n         * Define a policy class for a given class type.\n         *\n         * @param string $class\n         * @param string $policy\n         * @return \\Illuminate\\Auth\\Access\\Gate \n         * @static \n         */        public static function policy($class, $policy)\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->policy($class, $policy);\n        }\n                    /**\n         * Register a callback to run before all Gate checks.\n         *\n         * @param callable $callback\n         * @return \\Illuminate\\Auth\\Access\\Gate \n         * @static \n         */        public static function before($callback)\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->before($callback);\n        }\n                    /**\n         * Register a callback to run after all Gate checks.\n         *\n         * @param callable $callback\n         * @return \\Illuminate\\Auth\\Access\\Gate \n         * @static \n         */        public static function after($callback)\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->after($callback);\n        }\n                    /**\n         * Determine if all of the given abilities should be granted for the current user.\n         *\n         * @param \\Illuminate\\Auth\\Access\\iterable|\\BackedEnum|string $ability\n         * @param array|mixed $arguments\n         * @return bool \n         * @static \n         */        public static function allows($ability, $arguments = [])\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->allows($ability, $arguments);\n        }\n                    /**\n         * Determine if any of the given abilities should be denied for the current user.\n         *\n         * @param \\Illuminate\\Auth\\Access\\iterable|\\BackedEnum|string $ability\n         * @param array|mixed $arguments\n         * @return bool \n         * @static \n         */        public static function denies($ability, $arguments = [])\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->denies($ability, $arguments);\n        }\n                    /**\n         * Determine if all of the given abilities should be granted for the current user.\n         *\n         * @param \\Illuminate\\Auth\\Access\\iterable|\\BackedEnum|string $abilities\n         * @param array|mixed $arguments\n         * @return bool \n         * @static \n         */        public static function check($abilities, $arguments = [])\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->check($abilities, $arguments);\n        }\n                    /**\n         * Determine if any one of the given abilities should be granted for the current user.\n         *\n         * @param \\Illuminate\\Auth\\Access\\iterable|\\BackedEnum|string $abilities\n         * @param array|mixed $arguments\n         * @return bool \n         * @static \n         */        public static function any($abilities, $arguments = [])\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->any($abilities, $arguments);\n        }\n                    /**\n         * Determine if all of the given abilities should be denied for the current user.\n         *\n         * @param \\Illuminate\\Auth\\Access\\iterable|\\BackedEnum|string $abilities\n         * @param array|mixed $arguments\n         * @return bool \n         * @static \n         */        public static function none($abilities, $arguments = [])\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->none($abilities, $arguments);\n        }\n                    /**\n         * Determine if the given ability should be granted for the current user.\n         *\n         * @param \\BackedEnum|string $ability\n         * @param array|mixed $arguments\n         * @return \\Illuminate\\Auth\\Access\\Response \n         * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n         * @static \n         */        public static function authorize($ability, $arguments = [])\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->authorize($ability, $arguments);\n        }\n                    /**\n         * Inspect the user for the given ability.\n         *\n         * @param \\BackedEnum|string $ability\n         * @param array|mixed $arguments\n         * @return \\Illuminate\\Auth\\Access\\Response \n         * @static \n         */        public static function inspect($ability, $arguments = [])\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->inspect($ability, $arguments);\n        }\n                    /**\n         * Get the raw result from the authorization callback.\n         *\n         * @param string $ability\n         * @param array|mixed $arguments\n         * @return mixed \n         * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n         * @static \n         */        public static function raw($ability, $arguments = [])\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->raw($ability, $arguments);\n        }\n                    /**\n         * Get a policy instance for a given class.\n         *\n         * @param object|string $class\n         * @return mixed \n         * @static \n         */        public static function getPolicyFor($class)\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->getPolicyFor($class);\n        }\n                    /**\n         * Specify a callback to be used to guess policy names.\n         *\n         * @param callable $callback\n         * @return \\Illuminate\\Auth\\Access\\Gate \n         * @static \n         */        public static function guessPolicyNamesUsing($callback)\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->guessPolicyNamesUsing($callback);\n        }\n                    /**\n         * Build a policy class instance of the given type.\n         *\n         * @param object|string $class\n         * @return mixed \n         * @throws \\Illuminate\\Contracts\\Container\\BindingResolutionException\n         * @static \n         */        public static function resolvePolicy($class)\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->resolvePolicy($class);\n        }\n                    /**\n         * Get a gate instance for the given user.\n         *\n         * @param \\Illuminate\\Contracts\\Auth\\Authenticatable|mixed $user\n         * @return static \n         * @static \n         */        public static function forUser($user)\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->forUser($user);\n        }\n                    /**\n         * Get all of the defined abilities.\n         *\n         * @return array \n         * @static \n         */        public static function abilities()\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->abilities();\n        }\n                    /**\n         * Get all of the defined policies.\n         *\n         * @return array \n         * @static \n         */        public static function policies()\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->policies();\n        }\n                    /**\n         * Set the default denial response for gates and policies.\n         *\n         * @param \\Illuminate\\Auth\\Access\\Response $response\n         * @return \\Illuminate\\Auth\\Access\\Gate \n         * @static \n         */        public static function defaultDenialResponse($response)\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->defaultDenialResponse($response);\n        }\n                    /**\n         * Set the container instance used by the gate.\n         *\n         * @param \\Illuminate\\Contracts\\Container\\Container $container\n         * @return \\Illuminate\\Auth\\Access\\Gate \n         * @static \n         */        public static function setContainer($container)\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->setContainer($container);\n        }\n                    /**\n         * Deny with a HTTP status code.\n         *\n         * @param int $status\n         * @param string|null $message\n         * @param int|null $code\n         * @return \\Illuminate\\Auth\\Access\\Response \n         * @static \n         */        public static function denyWithStatus($status, $message = null, $code = null)\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->denyWithStatus($status, $message, $code);\n        }\n                    /**\n         * Deny with a 404 HTTP status code.\n         *\n         * @param string|null $message\n         * @param int|null $code\n         * @return \\Illuminate\\Auth\\Access\\Response \n         * @static \n         */        public static function denyAsNotFound($message = null, $code = null)\n        {\n                        /** @var \\Illuminate\\Auth\\Access\\Gate $instance */\n                        return $instance->denyAsNotFound($message, $code);\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Hashing\\HashManager\n     * @see \\Illuminate\\Hashing\\AbstractHasher\n     */        class Hash {\n                    /**\n         * Create an instance of the Bcrypt hash Driver.\n         *\n         * @return \\Illuminate\\Hashing\\BcryptHasher \n         * @static \n         */        public static function createBcryptDriver()\n        {\n                        /** @var \\Illuminate\\Hashing\\HashManager $instance */\n                        return $instance->createBcryptDriver();\n        }\n                    /**\n         * Create an instance of the Argon2i hash Driver.\n         *\n         * @return \\Illuminate\\Hashing\\ArgonHasher \n         * @static \n         */        public static function createArgonDriver()\n        {\n                        /** @var \\Illuminate\\Hashing\\HashManager $instance */\n                        return $instance->createArgonDriver();\n        }\n                    /**\n         * Create an instance of the Argon2id hash Driver.\n         *\n         * @return \\Illuminate\\Hashing\\Argon2IdHasher \n         * @static \n         */        public static function createArgon2idDriver()\n        {\n                        /** @var \\Illuminate\\Hashing\\HashManager $instance */\n                        return $instance->createArgon2idDriver();\n        }\n                    /**\n         * Get information about the given hashed value.\n         *\n         * @param string $hashedValue\n         * @return array \n         * @static \n         */        public static function info($hashedValue)\n        {\n                        /** @var \\Illuminate\\Hashing\\HashManager $instance */\n                        return $instance->info($hashedValue);\n        }\n                    /**\n         * Hash the given value.\n         *\n         * @param string $value\n         * @param array $options\n         * @return string \n         * @static \n         */        public static function make($value, $options = [])\n        {\n                        /** @var \\Illuminate\\Hashing\\HashManager $instance */\n                        return $instance->make($value, $options);\n        }\n                    /**\n         * Check the given plain value against a hash.\n         *\n         * @param string $value\n         * @param string $hashedValue\n         * @param array $options\n         * @return bool \n         * @static \n         */        public static function check($value, $hashedValue, $options = [])\n        {\n                        /** @var \\Illuminate\\Hashing\\HashManager $instance */\n                        return $instance->check($value, $hashedValue, $options);\n        }\n                    /**\n         * Check if the given hash has been hashed using the given options.\n         *\n         * @param string $hashedValue\n         * @param array $options\n         * @return bool \n         * @static \n         */        public static function needsRehash($hashedValue, $options = [])\n        {\n                        /** @var \\Illuminate\\Hashing\\HashManager $instance */\n                        return $instance->needsRehash($hashedValue, $options);\n        }\n                    /**\n         * Determine if a given string is already hashed.\n         *\n         * @param string $value\n         * @return bool \n         * @static \n         */        public static function isHashed($value)\n        {\n                        /** @var \\Illuminate\\Hashing\\HashManager $instance */\n                        return $instance->isHashed($value);\n        }\n                    /**\n         * Get the default driver name.\n         *\n         * @return string \n         * @static \n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\Illuminate\\Hashing\\HashManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n                    /**\n         * Verifies that the configuration is less than or equal to what is configured.\n         *\n         * @param array $value\n         * @return bool \n         * @internal \n         * @static \n         */        public static function verifyConfiguration($value)\n        {\n                        /** @var \\Illuminate\\Hashing\\HashManager $instance */\n                        return $instance->verifyConfiguration($value);\n        }\n                    /**\n         * Get a driver instance.\n         *\n         * @param string|null $driver\n         * @return mixed \n         * @throws \\InvalidArgumentException\n         * @static \n         */        public static function driver($driver = null)\n        {            //Method inherited from \\Illuminate\\Support\\Manager         \n                        /** @var \\Illuminate\\Hashing\\HashManager $instance */\n                        return $instance->driver($driver);\n        }\n                    /**\n         * Register a custom driver creator Closure.\n         *\n         * @param string $driver\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Hashing\\HashManager \n         * @static \n         */        public static function extend($driver, $callback)\n        {            //Method inherited from \\Illuminate\\Support\\Manager         \n                        /** @var \\Illuminate\\Hashing\\HashManager $instance */\n                        return $instance->extend($driver, $callback);\n        }\n                    /**\n         * Get all of the created \"drivers\".\n         *\n         * @return array \n         * @static \n         */        public static function getDrivers()\n        {            //Method inherited from \\Illuminate\\Support\\Manager         \n                        /** @var \\Illuminate\\Hashing\\HashManager $instance */\n                        return $instance->getDrivers();\n        }\n                    /**\n         * Get the container instance used by the manager.\n         *\n         * @return \\Illuminate\\Contracts\\Container\\Container \n         * @static \n         */        public static function getContainer()\n        {            //Method inherited from \\Illuminate\\Support\\Manager         \n                        /** @var \\Illuminate\\Hashing\\HashManager $instance */\n                        return $instance->getContainer();\n        }\n                    /**\n         * Set the container instance used by the manager.\n         *\n         * @param \\Illuminate\\Contracts\\Container\\Container $container\n         * @return \\Illuminate\\Hashing\\HashManager \n         * @static \n         */        public static function setContainer($container)\n        {            //Method inherited from \\Illuminate\\Support\\Manager         \n                        /** @var \\Illuminate\\Hashing\\HashManager $instance */\n                        return $instance->setContainer($container);\n        }\n                    /**\n         * Forget all of the resolved driver instances.\n         *\n         * @return \\Illuminate\\Hashing\\HashManager \n         * @static \n         */        public static function forgetDrivers()\n        {            //Method inherited from \\Illuminate\\Support\\Manager         \n                        /** @var \\Illuminate\\Hashing\\HashManager $instance */\n                        return $instance->forgetDrivers();\n        }\n            }\n            /**\n     * \n     *\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest baseUrl(string $url)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest withBody(\\Psr\\Http\\Message\\StreamInterface|string $content, string $contentType = 'application/json')\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest asJson()\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest asForm()\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest attach(string|array $name, string|resource $contents = '', string|null $filename = null, array $headers = [])\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest asMultipart()\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest bodyFormat(string $format)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest withQueryParameters(array $parameters)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest contentType(string $contentType)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest acceptJson()\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest accept(string $contentType)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest withHeaders(array $headers)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest withHeader(string $name, mixed $value)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest replaceHeaders(array $headers)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest withBasicAuth(string $username, string $password)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest withDigestAuth(string $username, string $password)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest withToken(string $token, string $type = 'Bearer')\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest withUserAgent(string|bool $userAgent)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest withUrlParameters(array $parameters = [])\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest withCookies(array $cookies, string $domain)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest maxRedirects(int $max)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest withoutRedirecting()\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest withoutVerifying()\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest sink(string|resource $to)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest timeout(int $seconds)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest connectTimeout(int $seconds)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest retry(array|int $times, \\Closure|int $sleepMilliseconds = 0, callable|null $when = null, bool $throw = true)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest withOptions(array $options)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest withMiddleware(callable $middleware)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest withRequestMiddleware(callable $middleware)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest withResponseMiddleware(callable $middleware)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest beforeSending(callable $callback)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest throw(callable|null $callback = null)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest throwIf(callable|bool $condition)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest throwUnless(callable|bool $condition)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest dump()\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest dd()\n     * @method static \\Illuminate\\Http\\Client\\Response get(string $url, array|string|null $query = null)\n     * @method static \\Illuminate\\Http\\Client\\Response head(string $url, array|string|null $query = null)\n     * @method static \\Illuminate\\Http\\Client\\Response post(string $url, array $data = [])\n     * @method static \\Illuminate\\Http\\Client\\Response patch(string $url, array $data = [])\n     * @method static \\Illuminate\\Http\\Client\\Response put(string $url, array $data = [])\n     * @method static \\Illuminate\\Http\\Client\\Response delete(string $url, array $data = [])\n     * @method static array pool(callable $callback)\n     * @method static \\Illuminate\\Http\\Client\\Response send(string $method, string $url, array $options = [])\n     * @method static \\GuzzleHttp\\Client buildClient()\n     * @method static \\GuzzleHttp\\Client createClient(\\GuzzleHttp\\HandlerStack $handlerStack)\n     * @method static \\GuzzleHttp\\HandlerStack buildHandlerStack()\n     * @method static \\GuzzleHttp\\HandlerStack pushHandlers(\\GuzzleHttp\\HandlerStack $handlerStack)\n     * @method static \\Closure buildBeforeSendingHandler()\n     * @method static \\Closure buildRecorderHandler()\n     * @method static \\Closure buildStubHandler()\n     * @method static \\GuzzleHttp\\Psr7\\RequestInterface runBeforeSendingCallbacks(\\GuzzleHttp\\Psr7\\RequestInterface $request, array $options)\n     * @method static array mergeOptions(array ...$options)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest stub(callable $callback)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest async(bool $async = true)\n     * @method static \\GuzzleHttp\\Promise\\PromiseInterface|null getPromise()\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest setClient(\\GuzzleHttp\\Client $client)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest setHandler(callable $handler)\n     * @method static array getOptions()\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest|mixed when(\\Closure|mixed|null $value = null, callable|null $callback = null, callable|null $default = null)\n     * @method static \\Illuminate\\Http\\Client\\PendingRequest|mixed unless(\\Closure|mixed|null $value = null, callable|null $callback = null, callable|null $default = null)\n     * @see \\Illuminate\\Http\\Client\\Factory\n     */        class Http {\n                    /**\n         * Add middleware to apply to every request.\n         *\n         * @param callable $middleware\n         * @return \\Illuminate\\Http\\Client\\Factory \n         * @static \n         */        public static function globalMiddleware($middleware)\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        return $instance->globalMiddleware($middleware);\n        }\n                    /**\n         * Add request middleware to apply to every request.\n         *\n         * @param callable $middleware\n         * @return \\Illuminate\\Http\\Client\\Factory \n         * @static \n         */        public static function globalRequestMiddleware($middleware)\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        return $instance->globalRequestMiddleware($middleware);\n        }\n                    /**\n         * Add response middleware to apply to every request.\n         *\n         * @param callable $middleware\n         * @return \\Illuminate\\Http\\Client\\Factory \n         * @static \n         */        public static function globalResponseMiddleware($middleware)\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        return $instance->globalResponseMiddleware($middleware);\n        }\n                    /**\n         * Set the options to apply to every request.\n         *\n         * @param \\Closure|array $options\n         * @return \\Illuminate\\Http\\Client\\Factory \n         * @static \n         */        public static function globalOptions($options)\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        return $instance->globalOptions($options);\n        }\n                    /**\n         * Create a new response instance for use during stubbing.\n         *\n         * @param array|string|null $body\n         * @param int $status\n         * @param array $headers\n         * @return \\GuzzleHttp\\Promise\\PromiseInterface \n         * @static \n         */        public static function response($body = null, $status = 200, $headers = [])\n        {\n                        return \\Illuminate\\Http\\Client\\Factory::response($body, $status, $headers);\n        }\n                    /**\n         * Get an invokable object that returns a sequence of responses in order for use during stubbing.\n         *\n         * @param array $responses\n         * @return \\Illuminate\\Http\\Client\\ResponseSequence \n         * @static \n         */        public static function sequence($responses = [])\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        return $instance->sequence($responses);\n        }\n                    /**\n         * Register a stub callable that will intercept requests and be able to return stub responses.\n         *\n         * @param callable|array|null $callback\n         * @return \\Illuminate\\Http\\Client\\Factory \n         * @static \n         */        public static function fake($callback = null)\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        return $instance->fake($callback);\n        }\n                    /**\n         * Register a response sequence for the given URL pattern.\n         *\n         * @param string $url\n         * @return \\Illuminate\\Http\\Client\\ResponseSequence \n         * @static \n         */        public static function fakeSequence($url = '*')\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        return $instance->fakeSequence($url);\n        }\n                    /**\n         * Stub the given URL using the given callback.\n         *\n         * @param string $url\n         * @param \\Illuminate\\Http\\Client\\Response|\\GuzzleHttp\\Promise\\PromiseInterface|callable $callback\n         * @return \\Illuminate\\Http\\Client\\Factory \n         * @static \n         */        public static function stubUrl($url, $callback)\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        return $instance->stubUrl($url, $callback);\n        }\n                    /**\n         * Indicate that an exception should be thrown if any request is not faked.\n         *\n         * @param bool $prevent\n         * @return \\Illuminate\\Http\\Client\\Factory \n         * @static \n         */        public static function preventStrayRequests($prevent = true)\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        return $instance->preventStrayRequests($prevent);\n        }\n                    /**\n         * Indicate that an exception should not be thrown if any request is not faked.\n         *\n         * @return \\Illuminate\\Http\\Client\\Factory \n         * @static \n         */        public static function allowStrayRequests()\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        return $instance->allowStrayRequests();\n        }\n                    /**\n         * Record a request response pair.\n         *\n         * @param \\Illuminate\\Http\\Client\\Request $request\n         * @param \\Illuminate\\Http\\Client\\Response $response\n         * @return void \n         * @static \n         */        public static function recordRequestResponsePair($request, $response)\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        $instance->recordRequestResponsePair($request, $response);\n        }\n                    /**\n         * Assert that a request / response pair was recorded matching a given truth test.\n         *\n         * @param callable $callback\n         * @return void \n         * @static \n         */        public static function assertSent($callback)\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        $instance->assertSent($callback);\n        }\n                    /**\n         * Assert that the given request was sent in the given order.\n         *\n         * @param array $callbacks\n         * @return void \n         * @static \n         */        public static function assertSentInOrder($callbacks)\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        $instance->assertSentInOrder($callbacks);\n        }\n                    /**\n         * Assert that a request / response pair was not recorded matching a given truth test.\n         *\n         * @param callable $callback\n         * @return void \n         * @static \n         */        public static function assertNotSent($callback)\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        $instance->assertNotSent($callback);\n        }\n                    /**\n         * Assert that no request / response pair was recorded.\n         *\n         * @return void \n         * @static \n         */        public static function assertNothingSent()\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        $instance->assertNothingSent();\n        }\n                    /**\n         * Assert how many requests have been recorded.\n         *\n         * @param int $count\n         * @return void \n         * @static \n         */        public static function assertSentCount($count)\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        $instance->assertSentCount($count);\n        }\n                    /**\n         * Assert that every created response sequence is empty.\n         *\n         * @return void \n         * @static \n         */        public static function assertSequencesAreEmpty()\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        $instance->assertSequencesAreEmpty();\n        }\n                    /**\n         * Get a collection of the request / response pairs matching the given truth test.\n         *\n         * @param callable $callback\n         * @return \\Illuminate\\Support\\Collection \n         * @static \n         */        public static function recorded($callback = null)\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        return $instance->recorded($callback);\n        }\n                    /**\n         * Create a new pending request instance for this factory.\n         *\n         * @return \\Illuminate\\Http\\Client\\PendingRequest \n         * @static \n         */        public static function createPendingRequest()\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        return $instance->createPendingRequest();\n        }\n                    /**\n         * Get the current event dispatcher implementation.\n         *\n         * @return \\Illuminate\\Contracts\\Events\\Dispatcher|null \n         * @static \n         */        public static function getDispatcher()\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        return $instance->getDispatcher();\n        }\n                    /**\n         * Get the array of global middleware.\n         *\n         * @return array \n         * @static \n         */        public static function getGlobalMiddleware()\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        return $instance->getGlobalMiddleware();\n        }\n                    /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @param-closure-this static  $macro\n         * @return void \n         * @static \n         */        public static function macro($name, $macro)\n        {\n                        \\Illuminate\\Http\\Client\\Factory::macro($name, $macro);\n        }\n                    /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void \n         * @throws \\ReflectionException\n         * @static \n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\Illuminate\\Http\\Client\\Factory::mixin($mixin, $replace);\n        }\n                    /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */        public static function hasMacro($name)\n        {\n                        return \\Illuminate\\Http\\Client\\Factory::hasMacro($name);\n        }\n                    /**\n         * Flush the existing macros.\n         *\n         * @return void \n         * @static \n         */        public static function flushMacros()\n        {\n                        \\Illuminate\\Http\\Client\\Factory::flushMacros();\n        }\n                    /**\n         * Dynamically handle calls to the class.\n         *\n         * @param string $method\n         * @param array $parameters\n         * @return mixed \n         * @throws \\BadMethodCallException\n         * @static \n         */        public static function macroCall($method, $parameters)\n        {\n                        /** @var \\Illuminate\\Http\\Client\\Factory $instance */\n                        return $instance->macroCall($method, $parameters);\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Translation\\Translator\n     */        class Lang {\n                    /**\n         * Determine if a translation exists for a given locale.\n         *\n         * @param string $key\n         * @param string|null $locale\n         * @return bool \n         * @static \n         */        public static function hasForLocale($key, $locale = null)\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        return $instance->hasForLocale($key, $locale);\n        }\n                    /**\n         * Determine if a translation exists.\n         *\n         * @param string $key\n         * @param string|null $locale\n         * @param bool $fallback\n         * @return bool \n         * @static \n         */        public static function has($key, $locale = null, $fallback = true)\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        return $instance->has($key, $locale, $fallback);\n        }\n                    /**\n         * Get the translation for the given key.\n         *\n         * @param string $key\n         * @param array $replace\n         * @param string|null $locale\n         * @param bool $fallback\n         * @return string|array \n         * @static \n         */        public static function get($key, $replace = [], $locale = null, $fallback = true)\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        return $instance->get($key, $replace, $locale, $fallback);\n        }\n                    /**\n         * Get a translation according to an integer value.\n         *\n         * @param string $key\n         * @param \\Countable|int|float|array $number\n         * @param array $replace\n         * @param string|null $locale\n         * @return string \n         * @static \n         */        public static function choice($key, $number, $replace = [], $locale = null)\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        return $instance->choice($key, $number, $replace, $locale);\n        }\n                    /**\n         * Add translation lines to the given locale.\n         *\n         * @param array $lines\n         * @param string $locale\n         * @param string $namespace\n         * @return void \n         * @static \n         */        public static function addLines($lines, $locale, $namespace = '*')\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        $instance->addLines($lines, $locale, $namespace);\n        }\n                    /**\n         * Load the specified language group.\n         *\n         * @param string $namespace\n         * @param string $group\n         * @param string $locale\n         * @return void \n         * @static \n         */        public static function load($namespace, $group, $locale)\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        $instance->load($namespace, $group, $locale);\n        }\n                    /**\n         * Register a callback that is responsible for handling missing translation keys.\n         *\n         * @param callable|null $callback\n         * @return static \n         * @static \n         */        public static function handleMissingKeysUsing($callback)\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        return $instance->handleMissingKeysUsing($callback);\n        }\n                    /**\n         * Add a new namespace to the loader.\n         *\n         * @param string $namespace\n         * @param string $hint\n         * @return void \n         * @static \n         */        public static function addNamespace($namespace, $hint)\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        $instance->addNamespace($namespace, $hint);\n        }\n                    /**\n         * Add a new JSON path to the loader.\n         *\n         * @param string $path\n         * @return void \n         * @static \n         */        public static function addJsonPath($path)\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        $instance->addJsonPath($path);\n        }\n                    /**\n         * Parse a key into namespace, group, and item.\n         *\n         * @param string $key\n         * @return array \n         * @static \n         */        public static function parseKey($key)\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        return $instance->parseKey($key);\n        }\n                    /**\n         * Specify a callback that should be invoked to determined the applicable locale array.\n         *\n         * @param callable $callback\n         * @return void \n         * @static \n         */        public static function determineLocalesUsing($callback)\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        $instance->determineLocalesUsing($callback);\n        }\n                    /**\n         * Get the message selector instance.\n         *\n         * @return \\Illuminate\\Translation\\MessageSelector \n         * @static \n         */        public static function getSelector()\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        return $instance->getSelector();\n        }\n                    /**\n         * Set the message selector instance.\n         *\n         * @param \\Illuminate\\Translation\\MessageSelector $selector\n         * @return void \n         * @static \n         */        public static function setSelector($selector)\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        $instance->setSelector($selector);\n        }\n                    /**\n         * Get the language line loader implementation.\n         *\n         * @return \\Illuminate\\Contracts\\Translation\\Loader \n         * @static \n         */        public static function getLoader()\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        return $instance->getLoader();\n        }\n                    /**\n         * Get the default locale being used.\n         *\n         * @return string \n         * @static \n         */        public static function locale()\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        return $instance->locale();\n        }\n                    /**\n         * Get the default locale being used.\n         *\n         * @return string \n         * @static \n         */        public static function getLocale()\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        return $instance->getLocale();\n        }\n                    /**\n         * Set the default locale.\n         *\n         * @param string $locale\n         * @return void \n         * @throws \\InvalidArgumentException\n         * @static \n         */        public static function setLocale($locale)\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        $instance->setLocale($locale);\n        }\n                    /**\n         * Get the fallback locale being used.\n         *\n         * @return string \n         * @static \n         */        public static function getFallback()\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        return $instance->getFallback();\n        }\n                    /**\n         * Set the fallback locale being used.\n         *\n         * @param string $fallback\n         * @return void \n         * @static \n         */        public static function setFallback($fallback)\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        $instance->setFallback($fallback);\n        }\n                    /**\n         * Set the loaded translation groups.\n         *\n         * @param array $loaded\n         * @return void \n         * @static \n         */        public static function setLoaded($loaded)\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        $instance->setLoaded($loaded);\n        }\n                    /**\n         * Add a handler to be executed in order to format a given class to a string during translation replacements.\n         *\n         * @param callable|string $class\n         * @param callable|null $handler\n         * @return void \n         * @static \n         */        public static function stringable($class, $handler = null)\n        {\n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        $instance->stringable($class, $handler);\n        }\n                    /**\n         * Set the parsed value of a key.\n         *\n         * @param string $key\n         * @param array $parsed\n         * @return void \n         * @static \n         */        public static function setParsedKey($key, $parsed)\n        {            //Method inherited from \\Illuminate\\Support\\NamespacedItemResolver         \n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        $instance->setParsedKey($key, $parsed);\n        }\n                    /**\n         * Flush the cache of parsed keys.\n         *\n         * @return void \n         * @static \n         */        public static function flushParsedKeys()\n        {            //Method inherited from \\Illuminate\\Support\\NamespacedItemResolver         \n                        /** @var \\Illuminate\\Translation\\Translator $instance */\n                        $instance->flushParsedKeys();\n        }\n                    /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @param-closure-this static  $macro\n         * @return void \n         * @static \n         */        public static function macro($name, $macro)\n        {\n                        \\Illuminate\\Translation\\Translator::macro($name, $macro);\n        }\n                    /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void \n         * @throws \\ReflectionException\n         * @static \n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\Illuminate\\Translation\\Translator::mixin($mixin, $replace);\n        }\n                    /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */        public static function hasMacro($name)\n        {\n                        return \\Illuminate\\Translation\\Translator::hasMacro($name);\n        }\n                    /**\n         * Flush the existing macros.\n         *\n         * @return void \n         * @static \n         */        public static function flushMacros()\n        {\n                        \\Illuminate\\Translation\\Translator::flushMacros();\n        }\n            }\n            /**\n     * \n     *\n     * @method static void write(string $level, \\Illuminate\\Contracts\\Support\\Arrayable|\\Illuminate\\Contracts\\Support\\Jsonable|\\Illuminate\\Support\\Stringable|array|string $message, array $context = [])\n     * @method static \\Illuminate\\Log\\Logger withContext(array $context = [])\n     * @method static void listen(\\Closure $callback)\n     * @method static \\Psr\\Log\\LoggerInterface getLogger()\n     * @method static \\Illuminate\\Contracts\\Events\\Dispatcher getEventDispatcher()\n     * @method static void setEventDispatcher(\\Illuminate\\Contracts\\Events\\Dispatcher $dispatcher)\n     * @method static \\Illuminate\\Log\\Logger|mixed when(\\Closure|mixed|null $value = null, callable|null $callback = null, callable|null $default = null)\n     * @method static \\Illuminate\\Log\\Logger|mixed unless(\\Closure|mixed|null $value = null, callable|null $callback = null, callable|null $default = null)\n     * @see \\Illuminate\\Log\\LogManager\n     */        class Log {\n                    /**\n         * Build an on-demand log channel.\n         *\n         * @param array $config\n         * @return \\Psr\\Log\\LoggerInterface \n         * @static \n         */        public static function build($config)\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        return $instance->build($config);\n        }\n                    /**\n         * Create a new, on-demand aggregate logger instance.\n         *\n         * @param array $channels\n         * @param string|null $channel\n         * @return \\Psr\\Log\\LoggerInterface \n         * @static \n         */        public static function stack($channels, $channel = null)\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        return $instance->stack($channels, $channel);\n        }\n                    /**\n         * Get a log channel instance.\n         *\n         * @param string|null $channel\n         * @return \\Psr\\Log\\LoggerInterface \n         * @static \n         */        public static function channel($channel = null)\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        return $instance->channel($channel);\n        }\n                    /**\n         * Get a log driver instance.\n         *\n         * @param string|null $driver\n         * @return \\Psr\\Log\\LoggerInterface \n         * @static \n         */        public static function driver($driver = null)\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        return $instance->driver($driver);\n        }\n                    /**\n         * Share context across channels and stacks.\n         *\n         * @param array $context\n         * @return \\Illuminate\\Log\\LogManager \n         * @static \n         */        public static function shareContext($context)\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        return $instance->shareContext($context);\n        }\n                    /**\n         * The context shared across channels and stacks.\n         *\n         * @return array \n         * @static \n         */        public static function sharedContext()\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        return $instance->sharedContext();\n        }\n                    /**\n         * Flush the log context on all currently resolved channels.\n         *\n         * @return \\Illuminate\\Log\\LogManager \n         * @static \n         */        public static function withoutContext()\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        return $instance->withoutContext();\n        }\n                    /**\n         * Flush the shared context.\n         *\n         * @return \\Illuminate\\Log\\LogManager \n         * @static \n         */        public static function flushSharedContext()\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        return $instance->flushSharedContext();\n        }\n                    /**\n         * Get the default log driver name.\n         *\n         * @return string|null \n         * @static \n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n                    /**\n         * Set the default log driver name.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */        public static function setDefaultDriver($name)\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        $instance->setDefaultDriver($name);\n        }\n                    /**\n         * Register a custom driver creator Closure.\n         *\n         * @param string $driver\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Log\\LogManager \n         * @static \n         */        public static function extend($driver, $callback)\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        return $instance->extend($driver, $callback);\n        }\n                    /**\n         * Unset the given channel instance.\n         *\n         * @param string|null $driver\n         * @return void \n         * @static \n         */        public static function forgetChannel($driver = null)\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        $instance->forgetChannel($driver);\n        }\n                    /**\n         * Get all of the resolved log channels.\n         *\n         * @return array \n         * @static \n         */        public static function getChannels()\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        return $instance->getChannels();\n        }\n                    /**\n         * System is unusable.\n         *\n         * @param string|\\Stringable $message\n         * @param array $context\n         * @return void \n         * @static \n         */        public static function emergency($message, $context = [])\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        $instance->emergency($message, $context);\n        }\n                    /**\n         * Action must be taken immediately.\n         * \n         * Example: Entire website down, database unavailable, etc. This should\n         * trigger the SMS alerts and wake you up.\n         *\n         * @param string|\\Stringable $message\n         * @param array $context\n         * @return void \n         * @static \n         */        public static function alert($message, $context = [])\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        $instance->alert($message, $context);\n        }\n                    /**\n         * Critical conditions.\n         * \n         * Example: Application component unavailable, unexpected exception.\n         *\n         * @param string|\\Stringable $message\n         * @param array $context\n         * @return void \n         * @static \n         */        public static function critical($message, $context = [])\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        $instance->critical($message, $context);\n        }\n                    /**\n         * Runtime errors that do not require immediate action but should typically\n         * be logged and monitored.\n         *\n         * @param string|\\Stringable $message\n         * @param array $context\n         * @return void \n         * @static \n         */        public static function error($message, $context = [])\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        $instance->error($message, $context);\n        }\n                    /**\n         * Exceptional occurrences that are not errors.\n         * \n         * Example: Use of deprecated APIs, poor use of an API, undesirable things\n         * that are not necessarily wrong.\n         *\n         * @param string|\\Stringable $message\n         * @param array $context\n         * @return void \n         * @static \n         */        public static function warning($message, $context = [])\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        $instance->warning($message, $context);\n        }\n                    /**\n         * Normal but significant events.\n         *\n         * @param string|\\Stringable $message\n         * @param array $context\n         * @return void \n         * @static \n         */        public static function notice($message, $context = [])\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        $instance->notice($message, $context);\n        }\n                    /**\n         * Interesting events.\n         * \n         * Example: User logs in, SQL logs.\n         *\n         * @param string|\\Stringable $message\n         * @param array $context\n         * @return void \n         * @static \n         */        public static function info($message, $context = [])\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        $instance->info($message, $context);\n        }\n                    /**\n         * Detailed debug information.\n         *\n         * @param string|\\Stringable $message\n         * @param array $context\n         * @return void \n         * @static \n         */        public static function debug($message, $context = [])\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        $instance->debug($message, $context);\n        }\n                    /**\n         * Logs with an arbitrary level.\n         *\n         * @param mixed $level\n         * @param string|\\Stringable $message\n         * @param array $context\n         * @return void \n         * @static \n         */        public static function log($level, $message, $context = [])\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        $instance->log($level, $message, $context);\n        }\n                    /**\n         * Set the application instance used by the manager.\n         *\n         * @param \\Illuminate\\Contracts\\Foundation\\Application $app\n         * @return \\Illuminate\\Log\\LogManager \n         * @static \n         */        public static function setApplication($app)\n        {\n                        /** @var \\Illuminate\\Log\\LogManager $instance */\n                        return $instance->setApplication($app);\n        }\n            }\n            /**\n     * \n     *\n     * @method static void alwaysFrom(string $address, string|null $name = null)\n     * @method static void alwaysReplyTo(string $address, string|null $name = null)\n     * @method static void alwaysReturnPath(string $address)\n     * @method static void alwaysTo(string $address, string|null $name = null)\n     * @method static \\Illuminate\\Mail\\SentMessage|null html(string $html, mixed $callback)\n     * @method static \\Illuminate\\Mail\\SentMessage|null plain(string $view, array $data, mixed $callback)\n     * @method static string render(string|array $view, array $data = [])\n     * @method static mixed onQueue(string $queue, \\Illuminate\\Contracts\\Mail\\Mailable $view)\n     * @method static mixed queueOn(string $queue, \\Illuminate\\Contracts\\Mail\\Mailable $view)\n     * @method static mixed laterOn(string $queue, \\DateTimeInterface|\\DateInterval|int $delay, \\Illuminate\\Contracts\\Mail\\Mailable $view)\n     * @method static \\Symfony\\Component\\Mailer\\Transport\\TransportInterface getSymfonyTransport()\n     * @method static \\Illuminate\\Contracts\\View\\Factory getViewFactory()\n     * @method static void setSymfonyTransport(\\Symfony\\Component\\Mailer\\Transport\\TransportInterface $transport)\n     * @method static \\Illuminate\\Mail\\Mailer setQueue(\\Illuminate\\Contracts\\Queue\\Factory $queue)\n     * @method static void macro(string $name, object|callable $macro)\n     * @method static void mixin(object $mixin, bool $replace = true)\n     * @method static bool hasMacro(string $name)\n     * @method static void flushMacros()\n     * @see \\Illuminate\\Mail\\MailManager\n     * @see \\Illuminate\\Support\\Testing\\Fakes\\MailFake\n     */        class Mail {\n                    /**\n         * Get a mailer instance by name.\n         *\n         * @param string|null $name\n         * @return \\Illuminate\\Contracts\\Mail\\Mailer \n         * @static \n         */        public static function mailer($name = null)\n        {\n                        /** @var \\Illuminate\\Mail\\MailManager $instance */\n                        return $instance->mailer($name);\n        }\n                    /**\n         * Get a mailer driver instance.\n         *\n         * @param string|null $driver\n         * @return \\Illuminate\\Mail\\Mailer \n         * @static \n         */        public static function driver($driver = null)\n        {\n                        /** @var \\Illuminate\\Mail\\MailManager $instance */\n                        return $instance->driver($driver);\n        }\n                    /**\n         * Create a new transport instance.\n         *\n         * @param array $config\n         * @return \\Symfony\\Component\\Mailer\\Transport\\TransportInterface \n         * @throws \\InvalidArgumentException\n         * @static \n         */        public static function createSymfonyTransport($config)\n        {\n                        /** @var \\Illuminate\\Mail\\MailManager $instance */\n                        return $instance->createSymfonyTransport($config);\n        }\n                    /**\n         * Get the default mail driver name.\n         *\n         * @return string \n         * @static \n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\Illuminate\\Mail\\MailManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n                    /**\n         * Set the default mail driver name.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */        public static function setDefaultDriver($name)\n        {\n                        /** @var \\Illuminate\\Mail\\MailManager $instance */\n                        $instance->setDefaultDriver($name);\n        }\n                    /**\n         * Disconnect the given mailer and remove from local cache.\n         *\n         * @param string|null $name\n         * @return void \n         * @static \n         */        public static function purge($name = null)\n        {\n                        /** @var \\Illuminate\\Mail\\MailManager $instance */\n                        $instance->purge($name);\n        }\n                    /**\n         * Register a custom transport creator Closure.\n         *\n         * @param string $driver\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Mail\\MailManager \n         * @static \n         */        public static function extend($driver, $callback)\n        {\n                        /** @var \\Illuminate\\Mail\\MailManager $instance */\n                        return $instance->extend($driver, $callback);\n        }\n                    /**\n         * Get the application instance used by the manager.\n         *\n         * @return \\Illuminate\\Contracts\\Foundation\\Application \n         * @static \n         */        public static function getApplication()\n        {\n                        /** @var \\Illuminate\\Mail\\MailManager $instance */\n                        return $instance->getApplication();\n        }\n                    /**\n         * Set the application instance used by the manager.\n         *\n         * @param \\Illuminate\\Contracts\\Foundation\\Application $app\n         * @return \\Illuminate\\Mail\\MailManager \n         * @static \n         */        public static function setApplication($app)\n        {\n                        /** @var \\Illuminate\\Mail\\MailManager $instance */\n                        return $instance->setApplication($app);\n        }\n                    /**\n         * Forget all of the resolved mailer instances.\n         *\n         * @return \\Illuminate\\Mail\\MailManager \n         * @static \n         */        public static function forgetMailers()\n        {\n                        /** @var \\Illuminate\\Mail\\MailManager $instance */\n                        return $instance->forgetMailers();\n        }\n                    /**\n         * Assert if a mailable was sent based on a truth-test callback.\n         *\n         * @param string|\\Closure $mailable\n         * @param callable|array|string|int|null $callback\n         * @return void \n         * @static \n         */        public static function assertSent($mailable, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        $instance->assertSent($mailable, $callback);\n        }\n                    /**\n         * Determine if a mailable was not sent or queued to be sent based on a truth-test callback.\n         *\n         * @param string|\\Closure $mailable\n         * @param callable|null $callback\n         * @return void \n         * @static \n         */        public static function assertNotOutgoing($mailable, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        $instance->assertNotOutgoing($mailable, $callback);\n        }\n                    /**\n         * Determine if a mailable was not sent based on a truth-test callback.\n         *\n         * @param string|\\Closure $mailable\n         * @param callable|array|string|null $callback\n         * @return void \n         * @static \n         */        public static function assertNotSent($mailable, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        $instance->assertNotSent($mailable, $callback);\n        }\n                    /**\n         * Assert that no mailables were sent or queued to be sent.\n         *\n         * @return void \n         * @static \n         */        public static function assertNothingOutgoing()\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        $instance->assertNothingOutgoing();\n        }\n                    /**\n         * Assert that no mailables were sent.\n         *\n         * @return void \n         * @static \n         */        public static function assertNothingSent()\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        $instance->assertNothingSent();\n        }\n                    /**\n         * Assert if a mailable was queued based on a truth-test callback.\n         *\n         * @param string|\\Closure $mailable\n         * @param callable|array|string|int|null $callback\n         * @return void \n         * @static \n         */        public static function assertQueued($mailable, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        $instance->assertQueued($mailable, $callback);\n        }\n                    /**\n         * Determine if a mailable was not queued based on a truth-test callback.\n         *\n         * @param string|\\Closure $mailable\n         * @param callable|array|string|null $callback\n         * @return void \n         * @static \n         */        public static function assertNotQueued($mailable, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        $instance->assertNotQueued($mailable, $callback);\n        }\n                    /**\n         * Assert that no mailables were queued.\n         *\n         * @return void \n         * @static \n         */        public static function assertNothingQueued()\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        $instance->assertNothingQueued();\n        }\n                    /**\n         * Assert the total number of mailables that were sent.\n         *\n         * @param int $count\n         * @return void \n         * @static \n         */        public static function assertSentCount($count)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        $instance->assertSentCount($count);\n        }\n                    /**\n         * Assert the total number of mailables that were queued.\n         *\n         * @param int $count\n         * @return void \n         * @static \n         */        public static function assertQueuedCount($count)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        $instance->assertQueuedCount($count);\n        }\n                    /**\n         * Assert the total number of mailables that were sent or queued.\n         *\n         * @param int $count\n         * @return void \n         * @static \n         */        public static function assertOutgoingCount($count)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        $instance->assertOutgoingCount($count);\n        }\n                    /**\n         * Get all of the mailables matching a truth-test callback.\n         *\n         * @param string|\\Closure $mailable\n         * @param callable|null $callback\n         * @return \\Illuminate\\Support\\Collection \n         * @static \n         */        public static function sent($mailable, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        return $instance->sent($mailable, $callback);\n        }\n                    /**\n         * Determine if the given mailable has been sent.\n         *\n         * @param string $mailable\n         * @return bool \n         * @static \n         */        public static function hasSent($mailable)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        return $instance->hasSent($mailable);\n        }\n                    /**\n         * Get all of the queued mailables matching a truth-test callback.\n         *\n         * @param string|\\Closure $mailable\n         * @param callable|null $callback\n         * @return \\Illuminate\\Support\\Collection \n         * @static \n         */        public static function queued($mailable, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        return $instance->queued($mailable, $callback);\n        }\n                    /**\n         * Determine if the given mailable has been queued.\n         *\n         * @param string $mailable\n         * @return bool \n         * @static \n         */        public static function hasQueued($mailable)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        return $instance->hasQueued($mailable);\n        }\n                    /**\n         * Begin the process of mailing a mailable class instance.\n         *\n         * @param mixed $users\n         * @return \\Illuminate\\Mail\\PendingMail \n         * @static \n         */        public static function to($users)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        return $instance->to($users);\n        }\n                    /**\n         * Begin the process of mailing a mailable class instance.\n         *\n         * @param mixed $users\n         * @return \\Illuminate\\Mail\\PendingMail \n         * @static \n         */        public static function cc($users)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        return $instance->cc($users);\n        }\n                    /**\n         * Begin the process of mailing a mailable class instance.\n         *\n         * @param mixed $users\n         * @return \\Illuminate\\Mail\\PendingMail \n         * @static \n         */        public static function bcc($users)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        return $instance->bcc($users);\n        }\n                    /**\n         * Send a new message with only a raw text part.\n         *\n         * @param string $text\n         * @param \\Closure|string $callback\n         * @return void \n         * @static \n         */        public static function raw($text, $callback)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        $instance->raw($text, $callback);\n        }\n                    /**\n         * Send a new message using a view.\n         *\n         * @param \\Illuminate\\Contracts\\Mail\\Mailable|string|array $view\n         * @param array $data\n         * @param \\Closure|string|null $callback\n         * @return mixed|void \n         * @static \n         */        public static function send($view, $data = [], $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        return $instance->send($view, $data, $callback);\n        }\n                    /**\n         * Send a new message synchronously using a view.\n         *\n         * @param \\Illuminate\\Contracts\\Mail\\Mailable|string|array $mailable\n         * @param array $data\n         * @param \\Closure|string|null $callback\n         * @return void \n         * @static \n         */        public static function sendNow($mailable, $data = [], $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        $instance->sendNow($mailable, $data, $callback);\n        }\n                    /**\n         * Queue a new message for sending.\n         *\n         * @param \\Illuminate\\Contracts\\Mail\\Mailable|string|array $view\n         * @param string|null $queue\n         * @return mixed \n         * @static \n         */        public static function queue($view, $queue = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        return $instance->queue($view, $queue);\n        }\n                    /**\n         * Queue a new e-mail message for sending after (n) seconds.\n         *\n         * @param \\DateTimeInterface|\\DateInterval|int $delay\n         * @param \\Illuminate\\Contracts\\Mail\\Mailable|string|array $view\n         * @param string|null $queue\n         * @return mixed \n         * @static \n         */        public static function later($delay, $view, $queue = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\MailFake $instance */\n                        return $instance->later($delay, $view, $queue);\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Notifications\\ChannelManager\n     * @see \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake\n     */        class Notification {\n                    /**\n         * Send the given notification to the given notifiable entities.\n         *\n         * @param \\Illuminate\\Support\\Collection|array|mixed $notifiables\n         * @param mixed $notification\n         * @return void \n         * @static \n         */        public static function send($notifiables, $notification)\n        {\n                        /** @var \\Illuminate\\Notifications\\ChannelManager $instance */\n                        $instance->send($notifiables, $notification);\n        }\n                    /**\n         * Send the given notification immediately.\n         *\n         * @param \\Illuminate\\Support\\Collection|array|mixed $notifiables\n         * @param mixed $notification\n         * @param array|null $channels\n         * @return void \n         * @static \n         */        public static function sendNow($notifiables, $notification, $channels = null)\n        {\n                        /** @var \\Illuminate\\Notifications\\ChannelManager $instance */\n                        $instance->sendNow($notifiables, $notification, $channels);\n        }\n                    /**\n         * Get a channel instance.\n         *\n         * @param string|null $name\n         * @return mixed \n         * @static \n         */        public static function channel($name = null)\n        {\n                        /** @var \\Illuminate\\Notifications\\ChannelManager $instance */\n                        return $instance->channel($name);\n        }\n                    /**\n         * Get the default channel driver name.\n         *\n         * @return string \n         * @static \n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\Illuminate\\Notifications\\ChannelManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n                    /**\n         * Get the default channel driver name.\n         *\n         * @return string \n         * @static \n         */        public static function deliversVia()\n        {\n                        /** @var \\Illuminate\\Notifications\\ChannelManager $instance */\n                        return $instance->deliversVia();\n        }\n                    /**\n         * Set the default channel driver name.\n         *\n         * @param string $channel\n         * @return void \n         * @static \n         */        public static function deliverVia($channel)\n        {\n                        /** @var \\Illuminate\\Notifications\\ChannelManager $instance */\n                        $instance->deliverVia($channel);\n        }\n                    /**\n         * Set the locale of notifications.\n         *\n         * @param string $locale\n         * @return \\Illuminate\\Notifications\\ChannelManager \n         * @static \n         */        public static function locale($locale)\n        {\n                        /** @var \\Illuminate\\Notifications\\ChannelManager $instance */\n                        return $instance->locale($locale);\n        }\n                    /**\n         * Get a driver instance.\n         *\n         * @param string|null $driver\n         * @return mixed \n         * @throws \\InvalidArgumentException\n         * @static \n         */        public static function driver($driver = null)\n        {            //Method inherited from \\Illuminate\\Support\\Manager         \n                        /** @var \\Illuminate\\Notifications\\ChannelManager $instance */\n                        return $instance->driver($driver);\n        }\n                    /**\n         * Register a custom driver creator Closure.\n         *\n         * @param string $driver\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Notifications\\ChannelManager \n         * @static \n         */        public static function extend($driver, $callback)\n        {            //Method inherited from \\Illuminate\\Support\\Manager         \n                        /** @var \\Illuminate\\Notifications\\ChannelManager $instance */\n                        return $instance->extend($driver, $callback);\n        }\n                    /**\n         * Get all of the created \"drivers\".\n         *\n         * @return array \n         * @static \n         */        public static function getDrivers()\n        {            //Method inherited from \\Illuminate\\Support\\Manager         \n                        /** @var \\Illuminate\\Notifications\\ChannelManager $instance */\n                        return $instance->getDrivers();\n        }\n                    /**\n         * Get the container instance used by the manager.\n         *\n         * @return \\Illuminate\\Contracts\\Container\\Container \n         * @static \n         */        public static function getContainer()\n        {            //Method inherited from \\Illuminate\\Support\\Manager         \n                        /** @var \\Illuminate\\Notifications\\ChannelManager $instance */\n                        return $instance->getContainer();\n        }\n                    /**\n         * Set the container instance used by the manager.\n         *\n         * @param \\Illuminate\\Contracts\\Container\\Container $container\n         * @return \\Illuminate\\Notifications\\ChannelManager \n         * @static \n         */        public static function setContainer($container)\n        {            //Method inherited from \\Illuminate\\Support\\Manager         \n                        /** @var \\Illuminate\\Notifications\\ChannelManager $instance */\n                        return $instance->setContainer($container);\n        }\n                    /**\n         * Forget all of the resolved driver instances.\n         *\n         * @return \\Illuminate\\Notifications\\ChannelManager \n         * @static \n         */        public static function forgetDrivers()\n        {            //Method inherited from \\Illuminate\\Support\\Manager         \n                        /** @var \\Illuminate\\Notifications\\ChannelManager $instance */\n                        return $instance->forgetDrivers();\n        }\n                    /**\n         * Assert if a notification was sent on-demand based on a truth-test callback.\n         *\n         * @param string|\\Closure $notification\n         * @param callable|null $callback\n         * @return void \n         * @throws \\Exception\n         * @static \n         */        public static function assertSentOnDemand($notification, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake $instance */\n                        $instance->assertSentOnDemand($notification, $callback);\n        }\n                    /**\n         * Assert if a notification was sent based on a truth-test callback.\n         *\n         * @param mixed $notifiable\n         * @param string|\\Closure $notification\n         * @param callable|null $callback\n         * @return void \n         * @throws \\Exception\n         * @static \n         */        public static function assertSentTo($notifiable, $notification, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake $instance */\n                        $instance->assertSentTo($notifiable, $notification, $callback);\n        }\n                    /**\n         * Assert if a notification was sent on-demand a number of times.\n         *\n         * @param string $notification\n         * @param int $times\n         * @return void \n         * @static \n         */        public static function assertSentOnDemandTimes($notification, $times = 1)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake $instance */\n                        $instance->assertSentOnDemandTimes($notification, $times);\n        }\n                    /**\n         * Assert if a notification was sent a number of times.\n         *\n         * @param mixed $notifiable\n         * @param string $notification\n         * @param int $times\n         * @return void \n         * @static \n         */        public static function assertSentToTimes($notifiable, $notification, $times = 1)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake $instance */\n                        $instance->assertSentToTimes($notifiable, $notification, $times);\n        }\n                    /**\n         * Determine if a notification was sent based on a truth-test callback.\n         *\n         * @param mixed $notifiable\n         * @param string|\\Closure $notification\n         * @param callable|null $callback\n         * @return void \n         * @throws \\Exception\n         * @static \n         */        public static function assertNotSentTo($notifiable, $notification, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake $instance */\n                        $instance->assertNotSentTo($notifiable, $notification, $callback);\n        }\n                    /**\n         * Assert that no notifications were sent.\n         *\n         * @return void \n         * @static \n         */        public static function assertNothingSent()\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake $instance */\n                        $instance->assertNothingSent();\n        }\n                    /**\n         * Assert that no notifications were sent to the given notifiable.\n         *\n         * @param mixed $notifiable\n         * @return void \n         * @throws \\Exception\n         * @static \n         */        public static function assertNothingSentTo($notifiable)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake $instance */\n                        $instance->assertNothingSentTo($notifiable);\n        }\n                    /**\n         * Assert the total amount of times a notification was sent.\n         *\n         * @param string $notification\n         * @param int $expectedCount\n         * @return void \n         * @static \n         */        public static function assertSentTimes($notification, $expectedCount)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake $instance */\n                        $instance->assertSentTimes($notification, $expectedCount);\n        }\n                    /**\n         * Assert the total count of notification that were sent.\n         *\n         * @param int $expectedCount\n         * @return void \n         * @static \n         */        public static function assertCount($expectedCount)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake $instance */\n                        $instance->assertCount($expectedCount);\n        }\n                    /**\n         * Get all of the notifications matching a truth-test callback.\n         *\n         * @param mixed $notifiable\n         * @param string $notification\n         * @param callable|null $callback\n         * @return \\Illuminate\\Support\\Collection \n         * @static \n         */        public static function sent($notifiable, $notification, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake $instance */\n                        return $instance->sent($notifiable, $notification, $callback);\n        }\n                    /**\n         * Determine if there are more notifications left to inspect.\n         *\n         * @param mixed $notifiable\n         * @param string $notification\n         * @return bool \n         * @static \n         */        public static function hasSent($notifiable, $notification)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake $instance */\n                        return $instance->hasSent($notifiable, $notification);\n        }\n                    /**\n         * Specify if notification should be serialized and restored when being \"pushed\" to the queue.\n         *\n         * @param bool $serializeAndRestore\n         * @return \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake \n         * @static \n         */        public static function serializeAndRestore($serializeAndRestore = true)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake $instance */\n                        return $instance->serializeAndRestore($serializeAndRestore);\n        }\n                    /**\n         * Get the notifications that have been sent.\n         *\n         * @return array \n         * @static \n         */        public static function sentNotifications()\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake $instance */\n                        return $instance->sentNotifications();\n        }\n                    /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @param-closure-this static  $macro\n         * @return void \n         * @static \n         */        public static function macro($name, $macro)\n        {\n                        \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake::macro($name, $macro);\n        }\n                    /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void \n         * @throws \\ReflectionException\n         * @static \n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake::mixin($mixin, $replace);\n        }\n                    /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */        public static function hasMacro($name)\n        {\n                        return \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake::hasMacro($name);\n        }\n                    /**\n         * Flush the existing macros.\n         *\n         * @return void \n         * @static \n         */        public static function flushMacros()\n        {\n                        \\Illuminate\\Support\\Testing\\Fakes\\NotificationFake::flushMacros();\n        }\n            }\n            /**\n     * \n     *\n     * @method static string sendResetLink(array $credentials, \\Closure|null $callback = null)\n     * @method static mixed reset(array $credentials, \\Closure $callback)\n     * @method static \\Illuminate\\Contracts\\Auth\\CanResetPassword|null getUser(array $credentials)\n     * @method static string createToken(\\Illuminate\\Contracts\\Auth\\CanResetPassword $user)\n     * @method static void deleteToken(\\Illuminate\\Contracts\\Auth\\CanResetPassword $user)\n     * @method static bool tokenExists(\\Illuminate\\Contracts\\Auth\\CanResetPassword $user, string $token)\n     * @method static \\Illuminate\\Auth\\Passwords\\TokenRepositoryInterface getRepository()\n     * @see \\Illuminate\\Auth\\Passwords\\PasswordBrokerManager\n     * @see \\Illuminate\\Auth\\Passwords\\PasswordBroker\n     */        class Password {\n                    /**\n         * Attempt to get the broker from the local cache.\n         *\n         * @param string|null $name\n         * @return \\Illuminate\\Contracts\\Auth\\PasswordBroker \n         * @static \n         */        public static function broker($name = null)\n        {\n                        /** @var \\Illuminate\\Auth\\Passwords\\PasswordBrokerManager $instance */\n                        return $instance->broker($name);\n        }\n                    /**\n         * Get the default password broker name.\n         *\n         * @return string \n         * @static \n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\Illuminate\\Auth\\Passwords\\PasswordBrokerManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n                    /**\n         * Set the default password broker name.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */        public static function setDefaultDriver($name)\n        {\n                        /** @var \\Illuminate\\Auth\\Passwords\\PasswordBrokerManager $instance */\n                        $instance->setDefaultDriver($name);\n        }\n            }\n            /**\n     * \n     *\n     * @method static \\Illuminate\\Process\\PendingProcess command(array|string $command)\n     * @method static \\Illuminate\\Process\\PendingProcess path(string $path)\n     * @method static \\Illuminate\\Process\\PendingProcess timeout(int $timeout)\n     * @method static \\Illuminate\\Process\\PendingProcess idleTimeout(int $timeout)\n     * @method static \\Illuminate\\Process\\PendingProcess forever()\n     * @method static \\Illuminate\\Process\\PendingProcess env(array $environment)\n     * @method static \\Illuminate\\Process\\PendingProcess input(\\Traversable|resource|string|int|float|bool|null $input)\n     * @method static \\Illuminate\\Process\\PendingProcess quietly()\n     * @method static \\Illuminate\\Process\\PendingProcess tty(bool $tty = true)\n     * @method static \\Illuminate\\Process\\PendingProcess options(array $options)\n     * @method static \\Illuminate\\Contracts\\Process\\ProcessResult run(array|string|null $command = null, callable|null $output = null)\n     * @method static \\Illuminate\\Process\\InvokedProcess start(array|string|null $command = null, callable|null $output = null)\n     * @method static \\Illuminate\\Process\\PendingProcess withFakeHandlers(array $fakeHandlers)\n     * @method static \\Illuminate\\Process\\PendingProcess|mixed when(\\Closure|mixed|null $value = null, callable|null $callback = null, callable|null $default = null)\n     * @method static \\Illuminate\\Process\\PendingProcess|mixed unless(\\Closure|mixed|null $value = null, callable|null $callback = null, callable|null $default = null)\n     * @see \\Illuminate\\Process\\PendingProcess\n     * @see \\Illuminate\\Process\\Factory\n     */        class Process {\n                    /**\n         * Create a new fake process response for testing purposes.\n         *\n         * @param array|string $output\n         * @param array|string $errorOutput\n         * @param int $exitCode\n         * @return \\Illuminate\\Process\\FakeProcessResult \n         * @static \n         */        public static function result($output = '', $errorOutput = '', $exitCode = 0)\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->result($output, $errorOutput, $exitCode);\n        }\n                    /**\n         * Begin describing a fake process lifecycle.\n         *\n         * @return \\Illuminate\\Process\\FakeProcessDescription \n         * @static \n         */        public static function describe()\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->describe();\n        }\n                    /**\n         * Begin describing a fake process sequence.\n         *\n         * @param array $processes\n         * @return \\Illuminate\\Process\\FakeProcessSequence \n         * @static \n         */        public static function sequence($processes = [])\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->sequence($processes);\n        }\n                    /**\n         * Indicate that the process factory should fake processes.\n         *\n         * @param \\Closure|array|null $callback\n         * @return \\Illuminate\\Process\\Factory \n         * @static \n         */        public static function fake($callback = null)\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->fake($callback);\n        }\n                    /**\n         * Determine if the process factory has fake process handlers and is recording processes.\n         *\n         * @return bool \n         * @static \n         */        public static function isRecording()\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->isRecording();\n        }\n                    /**\n         * Record the given process if processes should be recorded.\n         *\n         * @param \\Illuminate\\Process\\PendingProcess $process\n         * @param \\Illuminate\\Contracts\\Process\\ProcessResult $result\n         * @return \\Illuminate\\Process\\Factory \n         * @static \n         */        public static function recordIfRecording($process, $result)\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->recordIfRecording($process, $result);\n        }\n                    /**\n         * Record the given process.\n         *\n         * @param \\Illuminate\\Process\\PendingProcess $process\n         * @param \\Illuminate\\Contracts\\Process\\ProcessResult $result\n         * @return \\Illuminate\\Process\\Factory \n         * @static \n         */        public static function record($process, $result)\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->record($process, $result);\n        }\n                    /**\n         * Indicate that an exception should be thrown if any process is not faked.\n         *\n         * @param bool $prevent\n         * @return \\Illuminate\\Process\\Factory \n         * @static \n         */        public static function preventStrayProcesses($prevent = true)\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->preventStrayProcesses($prevent);\n        }\n                    /**\n         * Determine if stray processes are being prevented.\n         *\n         * @return bool \n         * @static \n         */        public static function preventingStrayProcesses()\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->preventingStrayProcesses();\n        }\n                    /**\n         * Assert that a process was recorded matching a given truth test.\n         *\n         * @param \\Closure|string $callback\n         * @return \\Illuminate\\Process\\Factory \n         * @static \n         */        public static function assertRan($callback)\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->assertRan($callback);\n        }\n                    /**\n         * Assert that a process was recorded a given number of times matching a given truth test.\n         *\n         * @param \\Closure|string $callback\n         * @param int $times\n         * @return \\Illuminate\\Process\\Factory \n         * @static \n         */        public static function assertRanTimes($callback, $times = 1)\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->assertRanTimes($callback, $times);\n        }\n                    /**\n         * Assert that a process was not recorded matching a given truth test.\n         *\n         * @param \\Closure|string $callback\n         * @return \\Illuminate\\Process\\Factory \n         * @static \n         */        public static function assertNotRan($callback)\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->assertNotRan($callback);\n        }\n                    /**\n         * Assert that a process was not recorded matching a given truth test.\n         *\n         * @param \\Closure|string $callback\n         * @return \\Illuminate\\Process\\Factory \n         * @static \n         */        public static function assertDidntRun($callback)\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->assertDidntRun($callback);\n        }\n                    /**\n         * Assert that no processes were recorded.\n         *\n         * @return \\Illuminate\\Process\\Factory \n         * @static \n         */        public static function assertNothingRan()\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->assertNothingRan();\n        }\n                    /**\n         * Start defining a pool of processes.\n         *\n         * @param callable $callback\n         * @return \\Illuminate\\Process\\Pool \n         * @static \n         */        public static function pool($callback)\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->pool($callback);\n        }\n                    /**\n         * Start defining a series of piped processes.\n         *\n         * @param callable|array $callback\n         * @return \\Illuminate\\Contracts\\Process\\ProcessResult \n         * @static \n         */        public static function pipe($callback, $output = null)\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->pipe($callback, $output);\n        }\n                    /**\n         * Run a pool of processes and wait for them to finish executing.\n         *\n         * @param callable $callback\n         * @param callable|null $output\n         * @return \\Illuminate\\Process\\ProcessPoolResults \n         * @static \n         */        public static function concurrently($callback, $output = null)\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->concurrently($callback, $output);\n        }\n                    /**\n         * Create a new pending process associated with this factory.\n         *\n         * @return \\Illuminate\\Process\\PendingProcess \n         * @static \n         */        public static function newPendingProcess()\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->newPendingProcess();\n        }\n                    /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @param-closure-this static  $macro\n         * @return void \n         * @static \n         */        public static function macro($name, $macro)\n        {\n                        \\Illuminate\\Process\\Factory::macro($name, $macro);\n        }\n                    /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void \n         * @throws \\ReflectionException\n         * @static \n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\Illuminate\\Process\\Factory::mixin($mixin, $replace);\n        }\n                    /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */        public static function hasMacro($name)\n        {\n                        return \\Illuminate\\Process\\Factory::hasMacro($name);\n        }\n                    /**\n         * Flush the existing macros.\n         *\n         * @return void \n         * @static \n         */        public static function flushMacros()\n        {\n                        \\Illuminate\\Process\\Factory::flushMacros();\n        }\n                    /**\n         * Dynamically handle calls to the class.\n         *\n         * @param string $method\n         * @param array $parameters\n         * @return mixed \n         * @throws \\BadMethodCallException\n         * @static \n         */        public static function macroCall($method, $parameters)\n        {\n                        /** @var \\Illuminate\\Process\\Factory $instance */\n                        return $instance->macroCall($method, $parameters);\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Queue\\QueueManager\n     * @see \\Illuminate\\Queue\\Queue\n     * @see \\Illuminate\\Support\\Testing\\Fakes\\QueueFake\n     */        class Queue {\n                    /**\n         * Register an event listener for the before job event.\n         *\n         * @param mixed $callback\n         * @return void \n         * @static \n         */        public static function before($callback)\n        {\n                        /** @var \\Illuminate\\Queue\\QueueManager $instance */\n                        $instance->before($callback);\n        }\n                    /**\n         * Register an event listener for the after job event.\n         *\n         * @param mixed $callback\n         * @return void \n         * @static \n         */        public static function after($callback)\n        {\n                        /** @var \\Illuminate\\Queue\\QueueManager $instance */\n                        $instance->after($callback);\n        }\n                    /**\n         * Register an event listener for the exception occurred job event.\n         *\n         * @param mixed $callback\n         * @return void \n         * @static \n         */        public static function exceptionOccurred($callback)\n        {\n                        /** @var \\Illuminate\\Queue\\QueueManager $instance */\n                        $instance->exceptionOccurred($callback);\n        }\n                    /**\n         * Register an event listener for the daemon queue loop.\n         *\n         * @param mixed $callback\n         * @return void \n         * @static \n         */        public static function looping($callback)\n        {\n                        /** @var \\Illuminate\\Queue\\QueueManager $instance */\n                        $instance->looping($callback);\n        }\n                    /**\n         * Register an event listener for the failed job event.\n         *\n         * @param mixed $callback\n         * @return void \n         * @static \n         */        public static function failing($callback)\n        {\n                        /** @var \\Illuminate\\Queue\\QueueManager $instance */\n                        $instance->failing($callback);\n        }\n                    /**\n         * Register an event listener for the daemon queue stopping.\n         *\n         * @param mixed $callback\n         * @return void \n         * @static \n         */        public static function stopping($callback)\n        {\n                        /** @var \\Illuminate\\Queue\\QueueManager $instance */\n                        $instance->stopping($callback);\n        }\n                    /**\n         * Determine if the driver is connected.\n         *\n         * @param string|null $name\n         * @return bool \n         * @static \n         */        public static function connected($name = null)\n        {\n                        /** @var \\Illuminate\\Queue\\QueueManager $instance */\n                        return $instance->connected($name);\n        }\n                    /**\n         * Resolve a queue connection instance.\n         *\n         * @param string|null $name\n         * @return \\Illuminate\\Contracts\\Queue\\Queue \n         * @static \n         */        public static function connection($name = null)\n        {\n                        /** @var \\Illuminate\\Queue\\QueueManager $instance */\n                        return $instance->connection($name);\n        }\n                    /**\n         * Add a queue connection resolver.\n         *\n         * @param string $driver\n         * @param \\Closure $resolver\n         * @return void \n         * @static \n         */        public static function extend($driver, $resolver)\n        {\n                        /** @var \\Illuminate\\Queue\\QueueManager $instance */\n                        $instance->extend($driver, $resolver);\n        }\n                    /**\n         * Add a queue connection resolver.\n         *\n         * @param string $driver\n         * @param \\Closure $resolver\n         * @return void \n         * @static \n         */        public static function addConnector($driver, $resolver)\n        {\n                        /** @var \\Illuminate\\Queue\\QueueManager $instance */\n                        $instance->addConnector($driver, $resolver);\n        }\n                    /**\n         * Get the name of the default queue connection.\n         *\n         * @return string \n         * @static \n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\Illuminate\\Queue\\QueueManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n                    /**\n         * Set the name of the default queue connection.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */        public static function setDefaultDriver($name)\n        {\n                        /** @var \\Illuminate\\Queue\\QueueManager $instance */\n                        $instance->setDefaultDriver($name);\n        }\n                    /**\n         * Get the full name for the given connection.\n         *\n         * @param string|null $connection\n         * @return string \n         * @static \n         */        public static function getName($connection = null)\n        {\n                        /** @var \\Illuminate\\Queue\\QueueManager $instance */\n                        return $instance->getName($connection);\n        }\n                    /**\n         * Get the application instance used by the manager.\n         *\n         * @return \\Illuminate\\Contracts\\Foundation\\Application \n         * @static \n         */        public static function getApplication()\n        {\n                        /** @var \\Illuminate\\Queue\\QueueManager $instance */\n                        return $instance->getApplication();\n        }\n                    /**\n         * Set the application instance used by the manager.\n         *\n         * @param \\Illuminate\\Contracts\\Foundation\\Application $app\n         * @return \\Illuminate\\Queue\\QueueManager \n         * @static \n         */        public static function setApplication($app)\n        {\n                        /** @var \\Illuminate\\Queue\\QueueManager $instance */\n                        return $instance->setApplication($app);\n        }\n                    /**\n         * Specify the jobs that should be queued instead of faked.\n         *\n         * @param array|string $jobsToBeQueued\n         * @return \\Illuminate\\Support\\Testing\\Fakes\\QueueFake \n         * @static \n         */        public static function except($jobsToBeQueued)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        return $instance->except($jobsToBeQueued);\n        }\n                    /**\n         * Assert if a job was pushed based on a truth-test callback.\n         *\n         * @param string|\\Closure $job\n         * @param callable|int|null $callback\n         * @return void \n         * @static \n         */        public static function assertPushed($job, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        $instance->assertPushed($job, $callback);\n        }\n                    /**\n         * Assert if a job was pushed based on a truth-test callback.\n         *\n         * @param string $queue\n         * @param string|\\Closure $job\n         * @param callable|null $callback\n         * @return void \n         * @static \n         */        public static function assertPushedOn($queue, $job, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        $instance->assertPushedOn($queue, $job, $callback);\n        }\n                    /**\n         * Assert if a job was pushed with chained jobs based on a truth-test callback.\n         *\n         * @param string $job\n         * @param array $expectedChain\n         * @param callable|null $callback\n         * @return void \n         * @static \n         */        public static function assertPushedWithChain($job, $expectedChain = [], $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        $instance->assertPushedWithChain($job, $expectedChain, $callback);\n        }\n                    /**\n         * Assert if a job was pushed with an empty chain based on a truth-test callback.\n         *\n         * @param string $job\n         * @param callable|null $callback\n         * @return void \n         * @static \n         */        public static function assertPushedWithoutChain($job, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        $instance->assertPushedWithoutChain($job, $callback);\n        }\n                    /**\n         * Assert if a closure was pushed based on a truth-test callback.\n         *\n         * @param callable|int|null $callback\n         * @return void \n         * @static \n         */        public static function assertClosurePushed($callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        $instance->assertClosurePushed($callback);\n        }\n                    /**\n         * Assert that a closure was not pushed based on a truth-test callback.\n         *\n         * @param callable|null $callback\n         * @return void \n         * @static \n         */        public static function assertClosureNotPushed($callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        $instance->assertClosureNotPushed($callback);\n        }\n                    /**\n         * Determine if a job was pushed based on a truth-test callback.\n         *\n         * @param string|\\Closure $job\n         * @param callable|null $callback\n         * @return void \n         * @static \n         */        public static function assertNotPushed($job, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        $instance->assertNotPushed($job, $callback);\n        }\n                    /**\n         * Assert the total count of jobs that were pushed.\n         *\n         * @param int $expectedCount\n         * @return void \n         * @static \n         */        public static function assertCount($expectedCount)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        $instance->assertCount($expectedCount);\n        }\n                    /**\n         * Assert that no jobs were pushed.\n         *\n         * @return void \n         * @static \n         */        public static function assertNothingPushed()\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        $instance->assertNothingPushed();\n        }\n                    /**\n         * Get all of the jobs matching a truth-test callback.\n         *\n         * @param string $job\n         * @param callable|null $callback\n         * @return \\Illuminate\\Support\\Collection \n         * @static \n         */        public static function pushed($job, $callback = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        return $instance->pushed($job, $callback);\n        }\n                    /**\n         * Determine if there are any stored jobs for a given class.\n         *\n         * @param string $job\n         * @return bool \n         * @static \n         */        public static function hasPushed($job)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        return $instance->hasPushed($job);\n        }\n                    /**\n         * Get the size of the queue.\n         *\n         * @param string|null $queue\n         * @return int \n         * @static \n         */        public static function size($queue = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        return $instance->size($queue);\n        }\n                    /**\n         * Push a new job onto the queue.\n         *\n         * @param string|object $job\n         * @param mixed $data\n         * @param string|null $queue\n         * @return mixed \n         * @static \n         */        public static function push($job, $data = '', $queue = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        return $instance->push($job, $data, $queue);\n        }\n                    /**\n         * Determine if a job should be faked or actually dispatched.\n         *\n         * @param object $job\n         * @return bool \n         * @static \n         */        public static function shouldFakeJob($job)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        return $instance->shouldFakeJob($job);\n        }\n                    /**\n         * Push a raw payload onto the queue.\n         *\n         * @param string $payload\n         * @param string|null $queue\n         * @param array $options\n         * @return mixed \n         * @static \n         */        public static function pushRaw($payload, $queue = null, $options = [])\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        return $instance->pushRaw($payload, $queue, $options);\n        }\n                    /**\n         * Push a new job onto the queue after (n) seconds.\n         *\n         * @param \\DateTimeInterface|\\DateInterval|int $delay\n         * @param string|object $job\n         * @param mixed $data\n         * @param string|null $queue\n         * @return mixed \n         * @static \n         */        public static function later($delay, $job, $data = '', $queue = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        return $instance->later($delay, $job, $data, $queue);\n        }\n                    /**\n         * Push a new job onto the queue.\n         *\n         * @param string $queue\n         * @param string|object $job\n         * @param mixed $data\n         * @return mixed \n         * @static \n         */        public static function pushOn($queue, $job, $data = '')\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        return $instance->pushOn($queue, $job, $data);\n        }\n                    /**\n         * Push a new job onto a specific queue after (n) seconds.\n         *\n         * @param string $queue\n         * @param \\DateTimeInterface|\\DateInterval|int $delay\n         * @param string|object $job\n         * @param mixed $data\n         * @return mixed \n         * @static \n         */        public static function laterOn($queue, $delay, $job, $data = '')\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        return $instance->laterOn($queue, $delay, $job, $data);\n        }\n                    /**\n         * Pop the next job off of the queue.\n         *\n         * @param string|null $queue\n         * @return \\Illuminate\\Contracts\\Queue\\Job|null \n         * @static \n         */        public static function pop($queue = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        return $instance->pop($queue);\n        }\n                    /**\n         * Push an array of jobs onto the queue.\n         *\n         * @param array $jobs\n         * @param mixed $data\n         * @param string|null $queue\n         * @return mixed \n         * @static \n         */        public static function bulk($jobs, $data = '', $queue = null)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        return $instance->bulk($jobs, $data, $queue);\n        }\n                    /**\n         * Get the jobs that have been pushed.\n         *\n         * @return array \n         * @static \n         */        public static function pushedJobs()\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        return $instance->pushedJobs();\n        }\n                    /**\n         * Specify if jobs should be serialized and restored when being \"pushed\" to the queue.\n         *\n         * @param bool $serializeAndRestore\n         * @return \\Illuminate\\Support\\Testing\\Fakes\\QueueFake \n         * @static \n         */        public static function serializeAndRestore($serializeAndRestore = true)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        return $instance->serializeAndRestore($serializeAndRestore);\n        }\n                    /**\n         * Get the connection name for the queue.\n         *\n         * @return string \n         * @static \n         */        public static function getConnectionName()\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        return $instance->getConnectionName();\n        }\n                    /**\n         * Set the connection name for the queue.\n         *\n         * @param string $name\n         * @return \\Illuminate\\Support\\Testing\\Fakes\\QueueFake \n         * @static \n         */        public static function setConnectionName($name)\n        {\n                        /** @var \\Illuminate\\Support\\Testing\\Fakes\\QueueFake $instance */\n                        return $instance->setConnectionName($name);\n        }\n                    /**\n         * Release a reserved job back onto the queue after (n) seconds.\n         *\n         * @param string $queue\n         * @param \\Illuminate\\Queue\\Jobs\\DatabaseJobRecord $job\n         * @param int $delay\n         * @return mixed \n         * @static \n         */        public static function release($queue, $job, $delay)\n        {\n                        /** @var \\Illuminate\\Queue\\DatabaseQueue $instance */\n                        return $instance->release($queue, $job, $delay);\n        }\n                    /**\n         * Delete a reserved job from the queue.\n         *\n         * @param string $queue\n         * @param string $id\n         * @return void \n         * @throws \\Throwable\n         * @static \n         */        public static function deleteReserved($queue, $id)\n        {\n                        /** @var \\Illuminate\\Queue\\DatabaseQueue $instance */\n                        $instance->deleteReserved($queue, $id);\n        }\n                    /**\n         * Delete a reserved job from the reserved queue and release it.\n         *\n         * @param string $queue\n         * @param \\Illuminate\\Queue\\Jobs\\DatabaseJob $job\n         * @param int $delay\n         * @return void \n         * @static \n         */        public static function deleteAndRelease($queue, $job, $delay)\n        {\n                        /** @var \\Illuminate\\Queue\\DatabaseQueue $instance */\n                        $instance->deleteAndRelease($queue, $job, $delay);\n        }\n                    /**\n         * Delete all of the jobs from the queue.\n         *\n         * @param string $queue\n         * @return int \n         * @static \n         */        public static function clear($queue)\n        {\n                        /** @var \\Illuminate\\Queue\\DatabaseQueue $instance */\n                        return $instance->clear($queue);\n        }\n                    /**\n         * Get the queue or return the default.\n         *\n         * @param string|null $queue\n         * @return string \n         * @static \n         */        public static function getQueue($queue)\n        {\n                        /** @var \\Illuminate\\Queue\\DatabaseQueue $instance */\n                        return $instance->getQueue($queue);\n        }\n                    /**\n         * Get the underlying database instance.\n         *\n         * @return \\Illuminate\\Database\\Connection \n         * @static \n         */        public static function getDatabase()\n        {\n                        /** @var \\Illuminate\\Queue\\DatabaseQueue $instance */\n                        return $instance->getDatabase();\n        }\n                    /**\n         * Get the maximum number of attempts for an object-based queue handler.\n         *\n         * @param mixed $job\n         * @return mixed \n         * @static \n         */        public static function getJobTries($job)\n        {            //Method inherited from \\Illuminate\\Queue\\Queue         \n                        /** @var \\Illuminate\\Queue\\DatabaseQueue $instance */\n                        return $instance->getJobTries($job);\n        }\n                    /**\n         * Get the backoff for an object-based queue handler.\n         *\n         * @param mixed $job\n         * @return mixed \n         * @static \n         */        public static function getJobBackoff($job)\n        {            //Method inherited from \\Illuminate\\Queue\\Queue         \n                        /** @var \\Illuminate\\Queue\\DatabaseQueue $instance */\n                        return $instance->getJobBackoff($job);\n        }\n                    /**\n         * Get the expiration timestamp for an object-based queue handler.\n         *\n         * @param mixed $job\n         * @return mixed \n         * @static \n         */        public static function getJobExpiration($job)\n        {            //Method inherited from \\Illuminate\\Queue\\Queue         \n                        /** @var \\Illuminate\\Queue\\DatabaseQueue $instance */\n                        return $instance->getJobExpiration($job);\n        }\n                    /**\n         * Register a callback to be executed when creating job payloads.\n         *\n         * @param callable|null $callback\n         * @return void \n         * @static \n         */        public static function createPayloadUsing($callback)\n        {            //Method inherited from \\Illuminate\\Queue\\Queue         \n                        \\Illuminate\\Queue\\DatabaseQueue::createPayloadUsing($callback);\n        }\n                    /**\n         * Get the container instance being used by the connection.\n         *\n         * @return \\Illuminate\\Container\\Container \n         * @static \n         */        public static function getContainer()\n        {            //Method inherited from \\Illuminate\\Queue\\Queue         \n                        /** @var \\Illuminate\\Queue\\DatabaseQueue $instance */\n                        return $instance->getContainer();\n        }\n                    /**\n         * Set the IoC container instance.\n         *\n         * @param \\Illuminate\\Container\\Container $container\n         * @return void \n         * @static \n         */        public static function setContainer($container)\n        {            //Method inherited from \\Illuminate\\Queue\\Queue         \n                        /** @var \\Illuminate\\Queue\\DatabaseQueue $instance */\n                        $instance->setContainer($container);\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Cache\\RateLimiter\n     */        class RateLimiter {\n                    /**\n         * Register a named limiter configuration.\n         *\n         * @param string $name\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Cache\\RateLimiter \n         * @static \n         */        public static function for($name, $callback)\n        {\n                        /** @var \\Illuminate\\Cache\\RateLimiter $instance */\n                        return $instance->for($name, $callback);\n        }\n                    /**\n         * Get the given named rate limiter.\n         *\n         * @param string $name\n         * @return \\Closure|null \n         * @static \n         */        public static function limiter($name)\n        {\n                        /** @var \\Illuminate\\Cache\\RateLimiter $instance */\n                        return $instance->limiter($name);\n        }\n                    /**\n         * Attempts to execute a callback if it's not limited.\n         *\n         * @param string $key\n         * @param int $maxAttempts\n         * @param \\Closure $callback\n         * @param int $decaySeconds\n         * @return mixed \n         * @static \n         */        public static function attempt($key, $maxAttempts, $callback, $decaySeconds = 60)\n        {\n                        /** @var \\Illuminate\\Cache\\RateLimiter $instance */\n                        return $instance->attempt($key, $maxAttempts, $callback, $decaySeconds);\n        }\n                    /**\n         * Determine if the given key has been \"accessed\" too many times.\n         *\n         * @param string $key\n         * @param int $maxAttempts\n         * @return bool \n         * @static \n         */        public static function tooManyAttempts($key, $maxAttempts)\n        {\n                        /** @var \\Illuminate\\Cache\\RateLimiter $instance */\n                        return $instance->tooManyAttempts($key, $maxAttempts);\n        }\n                    /**\n         * Increment (by 1) the counter for a given key for a given decay time.\n         *\n         * @param string $key\n         * @param int $decaySeconds\n         * @return int \n         * @static \n         */        public static function hit($key, $decaySeconds = 60)\n        {\n                        /** @var \\Illuminate\\Cache\\RateLimiter $instance */\n                        return $instance->hit($key, $decaySeconds);\n        }\n                    /**\n         * Increment the counter for a given key for a given decay time by a given amount.\n         *\n         * @param string $key\n         * @param int $decaySeconds\n         * @param int $amount\n         * @return int \n         * @static \n         */        public static function increment($key, $decaySeconds = 60, $amount = 1)\n        {\n                        /** @var \\Illuminate\\Cache\\RateLimiter $instance */\n                        return $instance->increment($key, $decaySeconds, $amount);\n        }\n                    /**\n         * Decrement the counter for a given key for a given decay time by a given amount.\n         *\n         * @param string $key\n         * @param int $decaySeconds\n         * @param int $amount\n         * @return int \n         * @static \n         */        public static function decrement($key, $decaySeconds = 60, $amount = 1)\n        {\n                        /** @var \\Illuminate\\Cache\\RateLimiter $instance */\n                        return $instance->decrement($key, $decaySeconds, $amount);\n        }\n                    /**\n         * Get the number of attempts for the given key.\n         *\n         * @param string $key\n         * @return mixed \n         * @static \n         */        public static function attempts($key)\n        {\n                        /** @var \\Illuminate\\Cache\\RateLimiter $instance */\n                        return $instance->attempts($key);\n        }\n                    /**\n         * Reset the number of attempts for the given key.\n         *\n         * @param string $key\n         * @return mixed \n         * @static \n         */        public static function resetAttempts($key)\n        {\n                        /** @var \\Illuminate\\Cache\\RateLimiter $instance */\n                        return $instance->resetAttempts($key);\n        }\n                    /**\n         * Get the number of retries left for the given key.\n         *\n         * @param string $key\n         * @param int $maxAttempts\n         * @return int \n         * @static \n         */        public static function remaining($key, $maxAttempts)\n        {\n                        /** @var \\Illuminate\\Cache\\RateLimiter $instance */\n                        return $instance->remaining($key, $maxAttempts);\n        }\n                    /**\n         * Get the number of retries left for the given key.\n         *\n         * @param string $key\n         * @param int $maxAttempts\n         * @return int \n         * @static \n         */        public static function retriesLeft($key, $maxAttempts)\n        {\n                        /** @var \\Illuminate\\Cache\\RateLimiter $instance */\n                        return $instance->retriesLeft($key, $maxAttempts);\n        }\n                    /**\n         * Clear the hits and lockout timer for the given key.\n         *\n         * @param string $key\n         * @return void \n         * @static \n         */        public static function clear($key)\n        {\n                        /** @var \\Illuminate\\Cache\\RateLimiter $instance */\n                        $instance->clear($key);\n        }\n                    /**\n         * Get the number of seconds until the \"key\" is accessible again.\n         *\n         * @param string $key\n         * @return int \n         * @static \n         */        public static function availableIn($key)\n        {\n                        /** @var \\Illuminate\\Cache\\RateLimiter $instance */\n                        return $instance->availableIn($key);\n        }\n                    /**\n         * Clean the rate limiter key from unicode characters.\n         *\n         * @param string $key\n         * @return string \n         * @static \n         */        public static function cleanRateLimiterKey($key)\n        {\n                        /** @var \\Illuminate\\Cache\\RateLimiter $instance */\n                        return $instance->cleanRateLimiterKey($key);\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Routing\\Redirector\n     */        class Redirect {\n                    /**\n         * Create a new redirect response to the previous location.\n         *\n         * @param int $status\n         * @param array $headers\n         * @param mixed $fallback\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */        public static function back($status = 302, $headers = [], $fallback = false)\n        {\n                        /** @var \\Illuminate\\Routing\\Redirector $instance */\n                        return $instance->back($status, $headers, $fallback);\n        }\n                    /**\n         * Create a new redirect response to the current URI.\n         *\n         * @param int $status\n         * @param array $headers\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */        public static function refresh($status = 302, $headers = [])\n        {\n                        /** @var \\Illuminate\\Routing\\Redirector $instance */\n                        return $instance->refresh($status, $headers);\n        }\n                    /**\n         * Create a new redirect response, while putting the current URL in the session.\n         *\n         * @param string $path\n         * @param int $status\n         * @param array $headers\n         * @param bool|null $secure\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */        public static function guest($path, $status = 302, $headers = [], $secure = null)\n        {\n                        /** @var \\Illuminate\\Routing\\Redirector $instance */\n                        return $instance->guest($path, $status, $headers, $secure);\n        }\n                    /**\n         * Create a new redirect response to the previously intended location.\n         *\n         * @param mixed $default\n         * @param int $status\n         * @param array $headers\n         * @param bool|null $secure\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */        public static function intended($default = '/', $status = 302, $headers = [], $secure = null)\n        {\n                        /** @var \\Illuminate\\Routing\\Redirector $instance */\n                        return $instance->intended($default, $status, $headers, $secure);\n        }\n                    /**\n         * Create a new redirect response to the given path.\n         *\n         * @param string $path\n         * @param int $status\n         * @param array $headers\n         * @param bool|null $secure\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */        public static function to($path, $status = 302, $headers = [], $secure = null)\n        {\n                        /** @var \\Illuminate\\Routing\\Redirector $instance */\n                        return $instance->to($path, $status, $headers, $secure);\n        }\n                    /**\n         * Create a new redirect response to an external URL (no validation).\n         *\n         * @param string $path\n         * @param int $status\n         * @param array $headers\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */        public static function away($path, $status = 302, $headers = [])\n        {\n                        /** @var \\Illuminate\\Routing\\Redirector $instance */\n                        return $instance->away($path, $status, $headers);\n        }\n                    /**\n         * Create a new redirect response to the given HTTPS path.\n         *\n         * @param string $path\n         * @param int $status\n         * @param array $headers\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */        public static function secure($path, $status = 302, $headers = [])\n        {\n                        /** @var \\Illuminate\\Routing\\Redirector $instance */\n                        return $instance->secure($path, $status, $headers);\n        }\n                    /**\n         * Create a new redirect response to a named route.\n         *\n         * @param \\BackedEnum|string $route\n         * @param mixed $parameters\n         * @param int $status\n         * @param array $headers\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */        public static function route($route, $parameters = [], $status = 302, $headers = [])\n        {\n                        /** @var \\Illuminate\\Routing\\Redirector $instance */\n                        return $instance->route($route, $parameters, $status, $headers);\n        }\n                    /**\n         * Create a new redirect response to a signed named route.\n         *\n         * @param \\BackedEnum|string $route\n         * @param mixed $parameters\n         * @param \\DateTimeInterface|\\DateInterval|int|null $expiration\n         * @param int $status\n         * @param array $headers\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */        public static function signedRoute($route, $parameters = [], $expiration = null, $status = 302, $headers = [])\n        {\n                        /** @var \\Illuminate\\Routing\\Redirector $instance */\n                        return $instance->signedRoute($route, $parameters, $expiration, $status, $headers);\n        }\n                    /**\n         * Create a new redirect response to a signed named route.\n         *\n         * @param \\BackedEnum|string $route\n         * @param \\DateTimeInterface|\\DateInterval|int|null $expiration\n         * @param mixed $parameters\n         * @param int $status\n         * @param array $headers\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */        public static function temporarySignedRoute($route, $expiration, $parameters = [], $status = 302, $headers = [])\n        {\n                        /** @var \\Illuminate\\Routing\\Redirector $instance */\n                        return $instance->temporarySignedRoute($route, $expiration, $parameters, $status, $headers);\n        }\n                    /**\n         * Create a new redirect response to a controller action.\n         *\n         * @param string|array $action\n         * @param mixed $parameters\n         * @param int $status\n         * @param array $headers\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */        public static function action($action, $parameters = [], $status = 302, $headers = [])\n        {\n                        /** @var \\Illuminate\\Routing\\Redirector $instance */\n                        return $instance->action($action, $parameters, $status, $headers);\n        }\n                    /**\n         * Get the URL generator instance.\n         *\n         * @return \\Illuminate\\Routing\\UrlGenerator \n         * @static \n         */        public static function getUrlGenerator()\n        {\n                        /** @var \\Illuminate\\Routing\\Redirector $instance */\n                        return $instance->getUrlGenerator();\n        }\n                    /**\n         * Set the active session store.\n         *\n         * @param \\Illuminate\\Session\\Store $session\n         * @return void \n         * @static \n         */        public static function setSession($session)\n        {\n                        /** @var \\Illuminate\\Routing\\Redirector $instance */\n                        $instance->setSession($session);\n        }\n                    /**\n         * Get the \"intended\" URL from the session.\n         *\n         * @return string|null \n         * @static \n         */        public static function getIntendedUrl()\n        {\n                        /** @var \\Illuminate\\Routing\\Redirector $instance */\n                        return $instance->getIntendedUrl();\n        }\n                    /**\n         * Set the \"intended\" URL in the session.\n         *\n         * @param string $url\n         * @return \\Illuminate\\Routing\\Redirector \n         * @static \n         */        public static function setIntendedUrl($url)\n        {\n                        /** @var \\Illuminate\\Routing\\Redirector $instance */\n                        return $instance->setIntendedUrl($url);\n        }\n                    /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @param-closure-this static  $macro\n         * @return void \n         * @static \n         */        public static function macro($name, $macro)\n        {\n                        \\Illuminate\\Routing\\Redirector::macro($name, $macro);\n        }\n                    /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void \n         * @throws \\ReflectionException\n         * @static \n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\Illuminate\\Routing\\Redirector::mixin($mixin, $replace);\n        }\n                    /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */        public static function hasMacro($name)\n        {\n                        return \\Illuminate\\Routing\\Redirector::hasMacro($name);\n        }\n                    /**\n         * Flush the existing macros.\n         *\n         * @return void \n         * @static \n         */        public static function flushMacros()\n        {\n                        \\Illuminate\\Routing\\Redirector::flushMacros();\n        }\n            }\n            /**\n     * \n     *\n     * @see \\Illuminate\\Http\\Request\n     */        class Request {\n                    /**\n         * Create a new Illuminate HTTP request from server variables.\n         *\n         * @return static \n         * @static \n         */        public static function capture()\n        {\n                        return \\Illuminate\\Http\\Request::capture();\n        }\n                    /**\n         * Return the Request instance.\n         *\n         * @return \\Illuminate\\Http\\Request \n         * @static \n         */        public static function instance()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->instance();\n        }\n                    /**\n         * Get the request method.\n         *\n         * @return string \n         * @static \n         */        public static function method()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->method();\n        }\n                    /**\n         * Get the root URL for the application.\n         *\n         * @return string \n         * @static \n         */        public static function root()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->root();\n        }\n                    /**\n         * Get the URL (no query string) for the request.\n         *\n         * @return string \n         * @static \n         */        public static function url()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->url();\n        }\n                    /**\n         * Get the full URL for the request.\n         *\n         * @return string \n         * @static \n         */        public static function fullUrl()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->fullUrl();\n        }\n                    /**\n         * Get the full URL for the request with the added query string parameters.\n         *\n         * @param array $query\n         * @return string \n         * @static \n         */        public static function fullUrlWithQuery($query)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->fullUrlWithQuery($query);\n        }\n                    /**\n         * Get the full URL for the request without the given query string parameters.\n         *\n         * @param array|string $keys\n         * @return string \n         * @static \n         */        public static function fullUrlWithoutQuery($keys)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->fullUrlWithoutQuery($keys);\n        }\n                    /**\n         * Get the current path info for the request.\n         *\n         * @return string \n         * @static \n         */        public static function path()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->path();\n        }\n                    /**\n         * Get the current decoded path info for the request.\n         *\n         * @return string \n         * @static \n         */        public static function decodedPath()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->decodedPath();\n        }\n                    /**\n         * Get a segment from the URI (1 based index).\n         *\n         * @param int $index\n         * @param string|null $default\n         * @return string|null \n         * @static \n         */        public static function segment($index, $default = null)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->segment($index, $default);\n        }\n                    /**\n         * Get all of the segments for the request path.\n         *\n         * @return array \n         * @static \n         */        public static function segments()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->segments();\n        }\n                    /**\n         * Determine if the current request URI matches a pattern.\n         *\n         * @param mixed $patterns\n         * @return bool \n         * @static \n         */        public static function is(...$patterns)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->is(...$patterns);\n        }\n                    /**\n         * Determine if the route name matches a given pattern.\n         *\n         * @param mixed $patterns\n         * @return bool \n         * @static \n         */        public static function routeIs(...$patterns)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->routeIs(...$patterns);\n        }\n                    /**\n         * Determine if the current request URL and query string match a pattern.\n         *\n         * @param mixed $patterns\n         * @return bool \n         * @static \n         */        public static function fullUrlIs(...$patterns)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->fullUrlIs(...$patterns);\n        }\n                    /**\n         * Get the host name.\n         *\n         * @return string \n         * @static \n         */        public static function host()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->host();\n        }\n                    /**\n         * Get the HTTP host being requested.\n         *\n         * @return string \n         * @static \n         */        public static function httpHost()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->httpHost();\n        }\n                    /**\n         * Get the scheme and HTTP host.\n         *\n         * @return string \n         * @static \n         */        public static function schemeAndHttpHost()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->schemeAndHttpHost();\n        }\n                    /**\n         * Determine if the request is the result of an AJAX call.\n         *\n         * @return bool \n         * @static \n         */        public static function ajax()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->ajax();\n        }\n                    /**\n         * Determine if the request is the result of a PJAX call.\n         *\n         * @return bool \n         * @static \n         */        public static function pjax()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->pjax();\n        }\n                    /**\n         * Determine if the request is the result of a prefetch call.\n         *\n         * @return bool \n         * @static \n         */        public static function prefetch()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->prefetch();\n        }\n                    /**\n         * Determine if the request is over HTTPS.\n         *\n         * @return bool \n         * @static \n         */        public static function secure()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->secure();\n        }\n                    /**\n         * Get the client IP address.\n         *\n         * @return string|null \n         * @static \n         */        public static function ip()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->ip();\n        }\n                    /**\n         * Get the client IP addresses.\n         *\n         * @return array \n         * @static \n         */        public static function ips()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->ips();\n        }\n                    /**\n         * Get the client user agent.\n         *\n         * @return string|null \n         * @static \n         */        public static function userAgent()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->userAgent();\n        }\n                    /**\n         * Merge new input into the current request's input array.\n         *\n         * @param array $input\n         * @return \\Illuminate\\Http\\Request \n         * @static \n         */        public static function merge($input)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->merge($input);\n        }\n                    /**\n         * Merge new input into the request's input, but only when that key is missing from the request.\n         *\n         * @param array $input\n         * @return \\Illuminate\\Http\\Request \n         * @static \n         */        public static function mergeIfMissing($input)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->mergeIfMissing($input);\n        }\n                    /**\n         * Replace the input values for the current request.\n         *\n         * @param array $input\n         * @return \\Illuminate\\Http\\Request \n         * @static \n         */        public static function replace($input)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->replace($input);\n        }\n                    /**\n         * This method belongs to Symfony HttpFoundation and is not usually needed when using Laravel.\n         * \n         * Instead, you may use the \"input\" method.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @return mixed \n         * @static \n         */        public static function get($key, $default = null)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->get($key, $default);\n        }\n                    /**\n         * Get the JSON payload for the request.\n         *\n         * @param string|null $key\n         * @param mixed $default\n         * @return \\Symfony\\Component\\HttpFoundation\\InputBag|mixed \n         * @static \n         */        public static function json($key = null, $default = null)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->json($key, $default);\n        }\n                    /**\n         * Create a new request instance from the given Laravel request.\n         *\n         * @param \\Illuminate\\Http\\Request $from\n         * @param \\Illuminate\\Http\\Request|null $to\n         * @return static \n         * @static \n         */        public static function createFrom($from, $to = null)\n        {\n                        return \\Illuminate\\Http\\Request::createFrom($from, $to);\n        }\n                    /**\n         * Create an Illuminate request from a Symfony instance.\n         *\n         * @param \\Symfony\\Component\\HttpFoundation\\Request $request\n         * @return static \n         * @static \n         */        public static function createFromBase($request)\n        {\n                        return \\Illuminate\\Http\\Request::createFromBase($request);\n        }\n                    /**\n         * Clones a request and overrides some of its parameters.\n         *\n         * @return static \n         * @param array|null $query The GET parameters\n         * @param array|null $request The POST parameters\n         * @param array|null $attributes The request attributes (parameters parsed from the PATH_INFO, ...)\n         * @param array|null $cookies The COOKIE parameters\n         * @param array|null $files The FILES parameters\n         * @param array|null $server The SERVER parameters\n         * @static \n         */        public static function duplicate($query = null, $request = null, $attributes = null, $cookies = null, $files = null, $server = null)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->duplicate($query, $request, $attributes, $cookies, $files, $server);\n        }\n                    /**\n         * Whether the request contains a Session object.\n         * \n         * This method does not give any information about the state of the session object,\n         * like whether the session is started or not. It is just a way to check if this Request\n         * is associated with a Session instance.\n         *\n         * @param bool $skipIfUninitialized When true, ignores factories injected by `setSessionFactory`\n         * @static \n         */        public static function hasSession($skipIfUninitialized = false)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->hasSession($skipIfUninitialized);\n        }\n                    /**\n         * Gets the Session.\n         *\n         * @throws SessionNotFoundException When session is not set properly\n         * @static \n         */        public static function getSession()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getSession();\n        }\n                    /**\n         * Get the session associated with the request.\n         *\n         * @return \\Illuminate\\Contracts\\Session\\Session \n         * @throws \\RuntimeException\n         * @static \n         */        public static function session()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->session();\n        }\n                    /**\n         * Set the session instance on the request.\n         *\n         * @param \\Illuminate\\Contracts\\Session\\Session $session\n         * @return void \n         * @static \n         */        public static function setLaravelSession($session)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        $instance->setLaravelSession($session);\n        }\n                    /**\n         * Set the locale for the request instance.\n         *\n         * @param string $locale\n         * @return void \n         * @static \n         */        public static function setRequestLocale($locale)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        $instance->setRequestLocale($locale);\n        }\n                    /**\n         * Set the default locale for the request instance.\n         *\n         * @param string $locale\n         * @return void \n         * @static \n         */        public static function setDefaultRequestLocale($locale)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        $instance->setDefaultRequestLocale($locale);\n        }\n                    /**\n         * Get the user making the request.\n         *\n         * @param string|null $guard\n         * @return mixed \n         * @static \n         */        public static function user($guard = null)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->user($guard);\n        }\n                    /**\n         * Get the route handling the request.\n         *\n         * @param string|null $param\n         * @param mixed $default\n         * @return \\Illuminate\\Routing\\Route|object|string|null \n         * @static \n         */        public static function route($param = null, $default = null)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->route($param, $default);\n        }\n                    /**\n         * Get a unique fingerprint for the request / route / IP address.\n         *\n         * @return string \n         * @throws \\RuntimeException\n         * @static \n         */        public static function fingerprint()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->fingerprint();\n        }\n                    /**\n         * Set the JSON payload for the request.\n         *\n         * @param \\Symfony\\Component\\HttpFoundation\\InputBag $json\n         * @return \\Illuminate\\Http\\Request \n         * @static \n         */        public static function setJson($json)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->setJson($json);\n        }\n                    /**\n         * Get the user resolver callback.\n         *\n         * @return \\Closure \n         * @static \n         */        public static function getUserResolver()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getUserResolver();\n        }\n                    /**\n         * Set the user resolver callback.\n         *\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Http\\Request \n         * @static \n         */        public static function setUserResolver($callback)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->setUserResolver($callback);\n        }\n                    /**\n         * Get the route resolver callback.\n         *\n         * @return \\Closure \n         * @static \n         */        public static function getRouteResolver()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getRouteResolver();\n        }\n                    /**\n         * Set the route resolver callback.\n         *\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Http\\Request \n         * @static \n         */        public static function setRouteResolver($callback)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->setRouteResolver($callback);\n        }\n                    /**\n         * Get all of the input and files for the request.\n         *\n         * @return array \n         * @static \n         */        public static function toArray()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->toArray();\n        }\n                    /**\n         * Determine if the given offset exists.\n         *\n         * @param string $offset\n         * @return bool \n         * @static \n         */        public static function offsetExists($offset)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->offsetExists($offset);\n        }\n                    /**\n         * Get the value at the given offset.\n         *\n         * @param string $offset\n         * @return mixed \n         * @static \n         */        public static function offsetGet($offset)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->offsetGet($offset);\n        }\n                    /**\n         * Set the value at the given offset.\n         *\n         * @param string $offset\n         * @param mixed $value\n         * @return void \n         * @static \n         */        public static function offsetSet($offset, $value)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        $instance->offsetSet($offset, $value);\n        }\n                    /**\n         * Remove the value at the given offset.\n         *\n         * @param string $offset\n         * @return void \n         * @static \n         */        public static function offsetUnset($offset)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        $instance->offsetUnset($offset);\n        }\n                    /**\n         * Sets the parameters for this request.\n         * \n         * This method also re-initializes all properties.\n         *\n         * @param array $query The GET parameters\n         * @param array $request The POST parameters\n         * @param array $attributes The request attributes (parameters parsed from the PATH_INFO, ...)\n         * @param array $cookies The COOKIE parameters\n         * @param array $files The FILES parameters\n         * @param array $server The SERVER parameters\n         * @param string|resource|null $content The raw body data\n         * @static \n         */        public static function initialize($query = [], $request = [], $attributes = [], $cookies = [], $files = [], $server = [], $content = null)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->initialize($query, $request, $attributes, $cookies, $files, $server, $content);\n        }\n                    /**\n         * Creates a new request with values from PHP's super globals.\n         *\n         * @static \n         */        public static function createFromGlobals()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        return \\Illuminate\\Http\\Request::createFromGlobals();\n        }\n                    /**\n         * Creates a Request based on a given URI and configuration.\n         * \n         * The information contained in the URI always take precedence\n         * over the other information (server and parameters).\n         *\n         * @param string $uri The URI\n         * @param string $method The HTTP method\n         * @param array $parameters The query (GET) or request (POST) parameters\n         * @param array $cookies The request cookies ($_COOKIE)\n         * @param array $files The request files ($_FILES)\n         * @param array $server The server parameters ($_SERVER)\n         * @param string|resource|null $content The raw body data\n         * @static \n         */        public static function create($uri, $method = 'GET', $parameters = [], $cookies = [], $files = [], $server = [], $content = null)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        return \\Illuminate\\Http\\Request::create($uri, $method, $parameters, $cookies, $files, $server, $content);\n        }\n                    /**\n         * Sets a callable able to create a Request instance.\n         * \n         * This is mainly useful when you need to override the Request class\n         * to keep BC with an existing system. It should not be used for any\n         * other purpose.\n         *\n         * @static \n         */        public static function setFactory($callable)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        return \\Illuminate\\Http\\Request::setFactory($callable);\n        }\n                    /**\n         * Overrides the PHP global variables according to this request instance.\n         * \n         * It overrides $_GET, $_POST, $_REQUEST, $_SERVER, $_COOKIE.\n         * $_FILES is never overridden, see rfc1867\n         *\n         * @static \n         */        public static function overrideGlobals()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->overrideGlobals();\n        }\n                    /**\n         * Sets a list of trusted proxies.\n         * \n         * You should only list the reverse proxies that you manage directly.\n         *\n         * @param array $proxies A list of trusted proxies, the string 'REMOTE_ADDR' will be replaced with $_SERVER['REMOTE_ADDR']\n         * @param int $trustedHeaderSet A bit field of Request::HEADER_*, to set which headers to trust from your proxies\n         * @static \n         */        public static function setTrustedProxies($proxies, $trustedHeaderSet)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        return \\Illuminate\\Http\\Request::setTrustedProxies($proxies, $trustedHeaderSet);\n        }\n                    /**\n         * Gets the list of trusted proxies.\n         *\n         * @return string[] \n         * @static \n         */        public static function getTrustedProxies()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        return \\Illuminate\\Http\\Request::getTrustedProxies();\n        }\n                    /**\n         * Gets the set of trusted headers from trusted proxies.\n         *\n         * @return int A bit field of Request::HEADER_* that defines which headers are trusted from your proxies\n         * @static \n         */        public static function getTrustedHeaderSet()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        return \\Illuminate\\Http\\Request::getTrustedHeaderSet();\n        }\n                    /**\n         * Sets a list of trusted host patterns.\n         * \n         * You should only list the hosts you manage using regexs.\n         *\n         * @param array $hostPatterns A list of trusted host patterns\n         * @static \n         */        public static function setTrustedHosts($hostPatterns)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        return \\Illuminate\\Http\\Request::setTrustedHosts($hostPatterns);\n        }\n                    /**\n         * Gets the list of trusted host patterns.\n         *\n         * @return string[] \n         * @static \n         */        public static function getTrustedHosts()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        return \\Illuminate\\Http\\Request::getTrustedHosts();\n        }\n                    /**\n         * Normalizes a query string.\n         * \n         * It builds a normalized query string, where keys/value pairs are alphabetized,\n         * have consistent escaping and unneeded delimiters are removed.\n         *\n         * @static \n         */        public static function normalizeQueryString($qs)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        return \\Illuminate\\Http\\Request::normalizeQueryString($qs);\n        }\n                    /**\n         * Enables support for the _method request parameter to determine the intended HTTP method.\n         * \n         * Be warned that enabling this feature might lead to CSRF issues in your code.\n         * Check that you are using CSRF tokens when required.\n         * If the HTTP method parameter override is enabled, an html-form with method \"POST\" can be altered\n         * and used to send a \"PUT\" or \"DELETE\" request via the _method request parameter.\n         * If these methods are not protected against CSRF, this presents a possible vulnerability.\n         * \n         * The HTTP method can only be overridden when the real HTTP method is POST.\n         *\n         * @static \n         */        public static function enableHttpMethodParameterOverride()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        return \\Illuminate\\Http\\Request::enableHttpMethodParameterOverride();\n        }\n                    /**\n         * Checks whether support for the _method request parameter is enabled.\n         *\n         * @static \n         */        public static function getHttpMethodParameterOverride()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        return \\Illuminate\\Http\\Request::getHttpMethodParameterOverride();\n        }\n                    /**\n         * Whether the request contains a Session which was started in one of the\n         * previous requests.\n         *\n         * @static \n         */        public static function hasPreviousSession()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->hasPreviousSession();\n        }\n                    /**\n         * \n         *\n         * @static \n         */        public static function setSession($session)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->setSession($session);\n        }\n                    /**\n         * \n         *\n         * @internal \n         * @param \\Symfony\\Component\\HttpFoundation\\callable():  SessionInterface $factory\n         * @static \n         */        public static function setSessionFactory($factory)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->setSessionFactory($factory);\n        }\n                    /**\n         * Returns the client IP addresses.\n         * \n         * In the returned array the most trusted IP address is first, and the\n         * least trusted one last. The \"real\" client IP address is the last one,\n         * but this is also the least trusted one. Trusted proxies are stripped.\n         * \n         * Use this method carefully; you should use getClientIp() instead.\n         *\n         * @see getClientIp()\n         * @static \n         */        public static function getClientIps()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getClientIps();\n        }\n                    /**\n         * Returns the client IP address.\n         * \n         * This method can read the client IP address from the \"X-Forwarded-For\" header\n         * when trusted proxies were set via \"setTrustedProxies()\". The \"X-Forwarded-For\"\n         * header value is a comma+space separated list of IP addresses, the left-most\n         * being the original client, and each successive proxy that passed the request\n         * adding the IP address where it received the request from.\n         * \n         * If your reverse proxy uses a different header name than \"X-Forwarded-For\",\n         * (\"Client-Ip\" for instance), configure it via the $trustedHeaderSet\n         * argument of the Request::setTrustedProxies() method instead.\n         *\n         * @see getClientIps()\n         * @see https://wikipedia.org/wiki/X-Forwarded-For\n         * @static \n         */        public static function getClientIp()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getClientIp();\n        }\n                    /**\n         * Returns current script name.\n         *\n         * @static \n         */        public static function getScriptName()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getScriptName();\n        }\n                    /**\n         * Returns the path being requested relative to the executed script.\n         * \n         * The path info always starts with a /.\n         * \n         * Suppose this request is instantiated from /mysite on localhost:\n         * \n         *  * http://localhost/mysite              returns an empty string\n         *  * http://localhost/mysite/about        returns '/about'\n         *  * http://localhost/mysite/enco%20ded   returns '/enco%20ded'\n         *  * http://localhost/mysite/about?var=1  returns '/about'\n         *\n         * @return string The raw path (i.e. not urldecoded)\n         * @static \n         */        public static function getPathInfo()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getPathInfo();\n        }\n                    /**\n         * Returns the root path from which this request is executed.\n         * \n         * Suppose that an index.php file instantiates this request object:\n         * \n         *  * http://localhost/index.php         returns an empty string\n         *  * http://localhost/index.php/page    returns an empty string\n         *  * http://localhost/web/index.php     returns '/web'\n         *  * http://localhost/we%20b/index.php  returns '/we%20b'\n         *\n         * @return string The raw path (i.e. not urldecoded)\n         * @static \n         */        public static function getBasePath()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getBasePath();\n        }\n                    /**\n         * Returns the root URL from which this request is executed.\n         * \n         * The base URL never ends with a /.\n         * \n         * This is similar to getBasePath(), except that it also includes the\n         * script filename (e.g. index.php) if one exists.\n         *\n         * @return string The raw URL (i.e. not urldecoded)\n         * @static \n         */        public static function getBaseUrl()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getBaseUrl();\n        }\n                    /**\n         * Gets the request's scheme.\n         *\n         * @static \n         */        public static function getScheme()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getScheme();\n        }\n                    /**\n         * Returns the port on which the request is made.\n         * \n         * This method can read the client port from the \"X-Forwarded-Port\" header\n         * when trusted proxies were set via \"setTrustedProxies()\".\n         * \n         * The \"X-Forwarded-Port\" header must contain the client port.\n         *\n         * @return int|string|null Can be a string if fetched from the server bag\n         * @static \n         */        public static function getPort()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getPort();\n        }\n                    /**\n         * Returns the user.\n         *\n         * @static \n         */        public static function getUser()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getUser();\n        }\n                    /**\n         * Returns the password.\n         *\n         * @static \n         */        public static function getPassword()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getPassword();\n        }\n                    /**\n         * Gets the user info.\n         *\n         * @return string|null A user name if any and, optionally, scheme-specific information about how to gain authorization to access the server\n         * @static \n         */        public static function getUserInfo()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getUserInfo();\n        }\n                    /**\n         * Returns the HTTP host being requested.\n         * \n         * The port name will be appended to the host if it's non-standard.\n         *\n         * @static \n         */        public static function getHttpHost()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getHttpHost();\n        }\n                    /**\n         * Returns the requested URI (path and query string).\n         *\n         * @return string The raw URI (i.e. not URI decoded)\n         * @static \n         */        public static function getRequestUri()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getRequestUri();\n        }\n                    /**\n         * Gets the scheme and HTTP host.\n         * \n         * If the URL was called with basic authentication, the user\n         * and the password are not added to the generated string.\n         *\n         * @static \n         */        public static function getSchemeAndHttpHost()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getSchemeAndHttpHost();\n        }\n                    /**\n         * Generates a normalized URI (URL) for the Request.\n         *\n         * @see getQueryString()\n         * @static \n         */        public static function getUri()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getUri();\n        }\n                    /**\n         * Generates a normalized URI for the given path.\n         *\n         * @param string $path A path to use instead of the current one\n         * @static \n         */        public static function getUriForPath($path)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getUriForPath($path);\n        }\n                    /**\n         * Returns the path as relative reference from the current Request path.\n         * \n         * Only the URIs path component (no schema, host etc.) is relevant and must be given.\n         * Both paths must be absolute and not contain relative parts.\n         * Relative URLs from one resource to another are useful when generating self-contained downloadable document archives.\n         * Furthermore, they can be used to reduce the link size in documents.\n         * \n         * Example target paths, given a base path of \"/a/b/c/d\":\n         * - \"/a/b/c/d\"     -> \"\"\n         * - \"/a/b/c/\"      -> \"./\"\n         * - \"/a/b/\"        -> \"../\"\n         * - \"/a/b/c/other\" -> \"other\"\n         * - \"/a/x/y\"       -> \"../../x/y\"\n         *\n         * @static \n         */        public static function getRelativeUriForPath($path)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getRelativeUriForPath($path);\n        }\n                    /**\n         * Generates the normalized query string for the Request.\n         * \n         * It builds a normalized query string, where keys/value pairs are alphabetized\n         * and have consistent escaping.\n         *\n         * @static \n         */        public static function getQueryString()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getQueryString();\n        }\n                    /**\n         * Checks whether the request is secure or not.\n         * \n         * This method can read the client protocol from the \"X-Forwarded-Proto\" header\n         * when trusted proxies were set via \"setTrustedProxies()\".\n         * \n         * The \"X-Forwarded-Proto\" header must contain the protocol: \"https\" or \"http\".\n         *\n         * @static \n         */        public static function isSecure()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->isSecure();\n        }\n                    /**\n         * Returns the host name.\n         * \n         * This method can read the client host name from the \"X-Forwarded-Host\" header\n         * when trusted proxies were set via \"setTrustedProxies()\".\n         * \n         * The \"X-Forwarded-Host\" header must contain the client host name.\n         *\n         * @throws SuspiciousOperationException when the host name is invalid or not trusted\n         * @static \n         */        public static function getHost()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getHost();\n        }\n                    /**\n         * Sets the request method.\n         *\n         * @static \n         */        public static function setMethod($method)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->setMethod($method);\n        }\n                    /**\n         * Gets the request \"intended\" method.\n         * \n         * If the X-HTTP-Method-Override header is set, and if the method is a POST,\n         * then it is used to determine the \"real\" intended HTTP method.\n         * \n         * The _method request parameter can also be used to determine the HTTP method,\n         * but only if enableHttpMethodParameterOverride() has been called.\n         * \n         * The method is always an uppercased string.\n         *\n         * @see getRealMethod()\n         * @static \n         */        public static function getMethod()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getMethod();\n        }\n                    /**\n         * Gets the \"real\" request method.\n         *\n         * @see getMethod()\n         * @static \n         */        public static function getRealMethod()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getRealMethod();\n        }\n                    /**\n         * Gets the mime type associated with the format.\n         *\n         * @static \n         */        public static function getMimeType($format)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getMimeType($format);\n        }\n                    /**\n         * Gets the mime types associated with the format.\n         *\n         * @return string[] \n         * @static \n         */        public static function getMimeTypes($format)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        return \\Illuminate\\Http\\Request::getMimeTypes($format);\n        }\n                    /**\n         * Gets the format associated with the mime type.\n         *\n         * @static \n         */        public static function getFormat($mimeType)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getFormat($mimeType);\n        }\n                    /**\n         * Associates a format with mime types.\n         *\n         * @param string|string[] $mimeTypes The associated mime types (the preferred one must be the first as it will be used as the content type)\n         * @static \n         */        public static function setFormat($format, $mimeTypes)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->setFormat($format, $mimeTypes);\n        }\n                    /**\n         * Gets the request format.\n         * \n         * Here is the process to determine the format:\n         * \n         *  * format defined by the user (with setRequestFormat())\n         *  * _format request attribute\n         *  * $default\n         *\n         * @see getPreferredFormat\n         * @static \n         */        public static function getRequestFormat($default = 'html')\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getRequestFormat($default);\n        }\n                    /**\n         * Sets the request format.\n         *\n         * @static \n         */        public static function setRequestFormat($format)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->setRequestFormat($format);\n        }\n                    /**\n         * Gets the usual name of the format associated with the request's media type (provided in the Content-Type header).\n         *\n         * @see Request::$formats\n         * @static \n         */        public static function getContentTypeFormat()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getContentTypeFormat();\n        }\n                    /**\n         * Sets the default locale.\n         *\n         * @static \n         */        public static function setDefaultLocale($locale)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->setDefaultLocale($locale);\n        }\n                    /**\n         * Get the default locale.\n         *\n         * @static \n         */        public static function getDefaultLocale()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getDefaultLocale();\n        }\n                    /**\n         * Sets the locale.\n         *\n         * @static \n         */        public static function setLocale($locale)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->setLocale($locale);\n        }\n                    /**\n         * Get the locale.\n         *\n         * @static \n         */        public static function getLocale()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getLocale();\n        }\n                    /**\n         * Checks if the request method is of specified type.\n         *\n         * @param string $method Uppercase request method (GET, POST etc)\n         * @static \n         */        public static function isMethod($method)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->isMethod($method);\n        }\n                    /**\n         * Checks whether or not the method is safe.\n         *\n         * @see https://tools.ietf.org/html/rfc7231#section-4.2.1\n         * @static \n         */        public static function isMethodSafe()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->isMethodSafe();\n        }\n                    /**\n         * Checks whether or not the method is idempotent.\n         *\n         * @static \n         */        public static function isMethodIdempotent()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->isMethodIdempotent();\n        }\n                    /**\n         * Checks whether the method is cacheable or not.\n         *\n         * @see https://tools.ietf.org/html/rfc7231#section-4.2.3\n         * @static \n         */        public static function isMethodCacheable()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->isMethodCacheable();\n        }\n                    /**\n         * Returns the protocol version.\n         * \n         * If the application is behind a proxy, the protocol version used in the\n         * requests between the client and the proxy and between the proxy and the\n         * server might be different. This returns the former (from the \"Via\" header)\n         * if the proxy is trusted (see \"setTrustedProxies()\"), otherwise it returns\n         * the latter (from the \"SERVER_PROTOCOL\" server parameter).\n         *\n         * @static \n         */        public static function getProtocolVersion()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getProtocolVersion();\n        }\n                    /**\n         * Returns the request body content.\n         *\n         * @param bool $asResource If true, a resource will be returned\n         * @return string|resource \n         * @psalm-return ($asResource is true ? resource : string)\n         * @static \n         */        public static function getContent($asResource = false)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getContent($asResource);\n        }\n                    /**\n         * Gets the decoded form or json request body.\n         *\n         * @throws JsonException When the body cannot be decoded to an array\n         * @static \n         */        public static function getPayload()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getPayload();\n        }\n                    /**\n         * Gets the Etags.\n         *\n         * @static \n         */        public static function getETags()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getETags();\n        }\n                    /**\n         * \n         *\n         * @static \n         */        public static function isNoCache()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->isNoCache();\n        }\n                    /**\n         * Gets the preferred format for the response by inspecting, in the following order:\n         *   * the request format set using setRequestFormat;\n         *   * the values of the Accept HTTP header.\n         * \n         * Note that if you use this method, you should send the \"Vary: Accept\" header\n         * in the response to prevent any issues with intermediary HTTP caches.\n         *\n         * @static \n         */        public static function getPreferredFormat($default = 'html')\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getPreferredFormat($default);\n        }\n                    /**\n         * Returns the preferred language.\n         *\n         * @param string[] $locales An array of ordered available locales\n         * @static \n         */        public static function getPreferredLanguage($locales = null)\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getPreferredLanguage($locales);\n        }\n                    /**\n         * Gets a list of languages acceptable by the client browser ordered in the user browser preferences.\n         *\n         * @return string[] \n         * @static \n         */        public static function getLanguages()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getLanguages();\n        }\n                    /**\n         * Gets a list of charsets acceptable by the client browser in preferable order.\n         *\n         * @return string[] \n         * @static \n         */        public static function getCharsets()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getCharsets();\n        }\n                    /**\n         * Gets a list of encodings acceptable by the client browser in preferable order.\n         *\n         * @return string[] \n         * @static \n         */        public static function getEncodings()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getEncodings();\n        }\n                    /**\n         * Gets a list of content types acceptable by the client browser in preferable order.\n         *\n         * @return string[] \n         * @static \n         */        public static function getAcceptableContentTypes()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->getAcceptableContentTypes();\n        }\n                    /**\n         * Returns true if the request is an XMLHttpRequest.\n         * \n         * It works if your JavaScript library sets an X-Requested-With HTTP header.\n         * It is known to work with common JavaScript frameworks:\n         *\n         * @see https://wikipedia.org/wiki/List_of_Ajax_frameworks#JavaScript\n         * @static \n         */        public static function isXmlHttpRequest()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->isXmlHttpRequest();\n        }\n                    /**\n         * Checks whether the client browser prefers safe content or not according to RFC8674.\n         *\n         * @see https://tools.ietf.org/html/rfc8674\n         * @static \n         */        public static function preferSafeContent()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->preferSafeContent();\n        }\n                    /**\n         * Indicates whether this request originated from a trusted proxy.\n         * \n         * This can be useful to determine whether or not to trust the\n         * contents of a proxy-specific header.\n         *\n         * @static \n         */        public static function isFromTrustedProxy()\n        {            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request         \n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->isFromTrustedProxy();\n        }\n                    /**\n         * Filter the given array of rules into an array of rules that are included in precognitive headers.\n         *\n         * @param array $rules\n         * @return array \n         * @static \n         */        public static function filterPrecognitiveRules($rules)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->filterPrecognitiveRules($rules);\n        }\n                    /**\n         * Determine if the request is attempting to be precognitive.\n         *\n         * @return bool \n         * @static \n         */        public static function isAttemptingPrecognition()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->isAttemptingPrecognition();\n        }\n                    /**\n         * Determine if the request is precognitive.\n         *\n         * @return bool \n         * @static \n         */        public static function isPrecognitive()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->isPrecognitive();\n        }\n                    /**\n         * Determine if the request is sending JSON.\n         *\n         * @return bool \n         * @static \n         */        public static function isJson()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->isJson();\n        }\n                    /**\n         * Determine if the current request probably expects a JSON response.\n         *\n         * @return bool \n         * @static \n         */        public static function expectsJson()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->expectsJson();\n        }\n                    /**\n         * Determine if the current request is asking for JSON.\n         *\n         * @return bool \n         * @static \n         */        public static function wantsJson()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->wantsJson();\n        }\n                    /**\n         * Determines whether the current requests accepts a given content type.\n         *\n         * @param string|array $contentTypes\n         * @return bool \n         * @static \n         */        public static function accepts($contentTypes)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->accepts($contentTypes);\n        }\n                    /**\n         * Return the most suitable content type from the given array based on content negotiation.\n         *\n         * @param string|array $contentTypes\n         * @return string|null \n         * @static \n         */        public static function prefers($contentTypes)\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->prefers($contentTypes);\n        }\n                    /**\n         * Determine if the current request accepts any content type.\n         *\n         * @return bool \n         * @static \n         */        public static function acceptsAnyContentType()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->acceptsAnyContentType();\n        }\n                    /**\n         * Determines whether a request accepts JSON.\n         *\n         * @return bool \n         * @static \n         */        public static function acceptsJson()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->acceptsJson();\n        }\n                    /**\n         * Determines whether a request accepts HTML.\n         *\n         * @return bool \n         * @static \n         */        public static function acceptsHtml()\n        {\n                        /** @var \\Illuminate\\Http\\Request $instance */\n                        return $instance->acceptsHtml();\n        }\n                    /**\n         * Determine if the given content types match.\n         *\n         * @param string $actual\n         * @param string $type\n         * @return bool \n         * @static \n         */   "
        },
        {
          "name": "app.json",
          "type": "blob",
          "size": 1.857421875,
          "content": "{\n    \"name\": \"2FAuth\",\n    \"description\": \"A Web app to manage your Two-Factor Authentication (2FA) accounts and generate their security codes\",\n    \"keywords\": [\n      \"2fauth\",\n      \"2fa\",\n      \"2factor\",\n      \"Two-factor\",\n      \"Two-factor-authentication\",\n      \"otp\",\n      \"totp\",\n      \"hotp\"\n    ],\n    \"website\": \"https://docs.2fauth.app\",\n    \"repository\": \"https://github.com/Bubka/2FAuth\",\n    \"success_url\": \"/register\",\n    \"scripts\": {\n      \"postdeploy\": \"php artisan passport:install --no-interaction;php artisan storage:link\"\n    },\n    \"env\": {\n        \"APP_KEY\": {\n            \"generator\": \"secret\"\n        },\n        \"APP_NAME\": \"2FAuth\",\n        \"APP_ENV\": \"review\",\n        \"APP_DEBUG\": \"false\",\n        \"LOG_CHANNEL\": \"stderr\",\n        \"DB_CONNECTION\": \"pgsql\",\n        \"TRUSTED_PROXIES\": \"*\",\n        \"PASSPORT_PRIVATE_KEY\": {\n            \"description\": \"The RSA private key used to generate OAUTH security token\",\n            \"value\": \"\"\n        },\n        \"PASSPORT_PUBLIC_KEY\": {\n            \"description\": \"The public key derivated from your private key\",\n            \"value\": \"\"\n        },\n        \"MAIL_HOST\": {\n          \"value\": \"\",\n          \"required\": false\n        },\n        \"MAIL_PORT\": {\n          \"value\": \"\",\n          \"required\": false\n        },\n        \"MAIL_USERNAME\": {\n          \"value\": \"\",\n          \"required\": false\n        },\n        \"MAIL_PASSWORD\": {\n          \"value\": \"\",\n          \"required\": false\n        },\n        \"MAIL_ENCRYPTION\": {\n          \"value\": \"\",\n          \"required\": false\n        },\n        \"MAIL_FROM_NAME\": {\n          \"value\": \"2FAuth\",\n          \"required\": false\n        },\n        \"MAIL_FROM_ADDRESS\": {\n          \"value\": \"no-reply@heroku.com\",\n          \"required\": false\n        }\n    },\n    \"addons\": [\n        \"heroku-postgresql\"\n    ],\n    \"buildpacks\": [\n      {\n        \"url\": \"heroku/php\"\n      }\n    ]\n  }"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "artisan",
          "type": "blob",
          "size": 1.646484375,
          "content": "#!/usr/bin/env php\n<?php\n\ndefine('LARAVEL_START', microtime(true));\n\n/*\n|--------------------------------------------------------------------------\n| Register The Auto Loader\n|--------------------------------------------------------------------------\n|\n| Composer provides a convenient, automatically generated class loader\n| for our application. We just need to utilize it! We'll require it\n| into the script here so that we do not have to worry about the\n| loading of any of our classes manually. It's great to relax.\n|\n*/\n\nrequire __DIR__.'/vendor/autoload.php';\n\n$app = require_once __DIR__.'/bootstrap/app.php';\n\n/*\n|--------------------------------------------------------------------------\n| Run The Artisan Application\n|--------------------------------------------------------------------------\n|\n| When we run the console application, the current CLI command will be\n| executed in this console and the response sent back to a terminal\n| or another output device for the developers. Here goes nothing!\n|\n*/\n\n$kernel = $app->make(Illuminate\\Contracts\\Console\\Kernel::class);\n\n$status = $kernel->handle(\n    $input = new Symfony\\Component\\Console\\Input\\ArgvInput,\n    new Symfony\\Component\\Console\\Output\\ConsoleOutput\n);\n\n/*\n|--------------------------------------------------------------------------\n| Shutdown The Application\n|--------------------------------------------------------------------------\n|\n| Once Artisan has finished running, we will fire off the shutdown events\n| so that any final work may be done by the application before we shut\n| down the process. This is the last thing to happen to the request.\n|\n*/\n\n$kernel->terminate($input, $status);\n\nexit($status);\n"
        },
        {
          "name": "bootstrap",
          "type": "tree",
          "content": null
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 34.380859375,
          "content": "# Change log\n\n## [5.4.3] - 2024-11-27\n\n### Fixed\n\n- [issue #408](https://github.com/Bubka/2FAuth/issues/408) Deleted icon is back after saving from the advanced form\n- [issue #417](https://github.com/Bubka/2FAuth/issues/417) Login page does not load after v5.4.1 update\n- [issue #418](https://github.com/Bubka/2FAuth/issues/418) Opening of the footer menu submits the advanced form\n- [issue #420](https://github.com/Bubka/2FAuth/issues/420) QR codes are cropped on small screens\n- [issue #421](https://github.com/Bubka/2FAuth/issues/421) Freeze when switching to Manage mode\n- [issue #423](https://github.com/Bubka/2FAuth/issues/423) Icon for accounts without an icon doesn't exist\n\n### Changed\n\n- CSS styles are no longer loaded from tailwindcss.com in the `/up` view\n\n## [5.4.2] - 2024-11-18\n\n### Changed\n\n- CSP has been turned off (for now) since it breaks the app under Google Chrome. ([#417](https://github.com/Bubka/2FAuth/issues/417))\n\n## [5.4.1] - 2024-11-17\n\n### Security release\n\n- Fix XSS & SSRF vulnerabilities (thx to the XBOW team).\n- Content Security Policy is now available and enable by default. CSP helps to prevent or minimize the risk of certain types of security threats.  \n  If CSP is already enable on your server, you can set the `CONTENT_SECURITY_POLICY` environment variable to `false` to disable it at 2FAuth level.\n\n## [5.4.0] - 2024-11-08\n\n### Changed\n\n- The links in the footer (Settings, [Admin,] Sign out) have been replaced by the email address of the logged in user. Clicking on this email shows a navigation menu containing the links that were previously visible in the footer. The former display is still available if you don't like the new one, just uncheck the new _Show email in footer_ user option in Settings. ([#404](https://github.com/Bubka/2FAuth/issues/404))\n\n### Added\n\n- Administrators can now configure 2FAuth to register 2FA icons in the database (see the new _Store icons to database_ setting in the admin panel). When enabled, existing icons in the local file system are automatically registered in the database. These files are retained and then used for caching purposes only. 2FAuth will automatically re-create cache files if they are missing, so you only have to consider the database when backing up your instance. When disabled, 2FAuth will check that all registered icons in the database have a corresponding local file before flushing out the db icons table. ([#364](https://github.com/Bubka/2FAuth/issues/364)).\n- The ability to export 2FA accounts as a list of otpauth URIs ([#386](https://github.com/Bubka/2FAuth/issues/386)).\n\n### Fixed\n\n- Part of the content of some pages (such as the error page) could be hidden by the footer on small screens.\n\n### API [1.6.0]\n\n- New `otpauth` query parameter for the GET operation of path `/api/v1/twofaccounts/export` to force data export as otpauth URIs instead of the 2FAuth json format.\n\n## [5.3.2] - 2024-10-26\n\n### Fixed\n\n- [issue #402](https://github.com/Bubka/2FAuth/issues/402) Error asking me to log out when using multiple devices, pressing back logs me in anyway\n\n## [5.3.1] - 2024-10-12\n\n### Fixed\n\n- [issue #396](https://github.com/Bubka/2FAuth/issues/396) PROXY_HEADER_FOR_IP not working as intended\n- [issue #397](https://github.com/Bubka/2FAuth/issues/397) Base table or view not found: 1146 Table '2fauth.jobs' doesn't exist\n- [issue #399](https://github.com/Bubka/2FAuth/issues/399) Cannot set CACHE_DRIVER and SESSION_DRIVER to database\n\n## [5.3.0] - 2024-09-27\n\n### Added\n\n- The `/up` endpoint for health checks ([#271](https://github.com/Bubka/2FAuth/issues/271)).\n- A user preference to close the on-screen OTP after a predefined delay\n- A user preference to automatically register a 2FA account immediately after a QR code scan. When enabled, there is no need to click the Save button anymore to save the account to the database.\n- An admin setting to make SSO the only authentication method available (does not apply to admins). ([#368](https://github.com/Bubka/2FAuth/issues/368)).\n- The ability to assign a 2FA account to a specific group directly from the advanced form ([#372](https://github.com/Bubka/2FAuth/issues/372)).\n- A new _Auth_ tab in the admin panel to gather settings related to authentication\n- Proxy support for the OpenID connector (using `PROXY_FOR_OUTGOING_REQUESTS`), thanks to [@rstefko](https://github.com/rstefko) ([PR #367](https://github.com/Bubka/2FAuth/pull/367))\n\n#### New env vars\n\nA lot of new environment variables are available thanks to the Laravel 11 upgrade. They give more control over various features of the application:\n\n- `ARGON_THREADS`: Number of threads that Argon2 will use to compute a hash.\n- `ARGON_TIME`: Maximum amount of time it may take to compute an Argon2 hash.\n- `ARGON_MEMORY`: Maximum memory (in kibibytes) that may be used to compute an Argon2 hash.\n- `DB_CHARSET`: The character set of the database.\n- `DB_COLLATION`: The collation of the database.\n- `HASH_DRIVER`: The hash algorithm used to hash user passwords.\n- `LOG_STACK`: The stack of log channels used when the log channel is set to `stack`.\n- `LOG_DAILY_DAYS`: Number of log files to generate/rotate when using the `daily` log channel.\n- `LOG_SLACK_USERNAME`: The name of the user sending the log messages when using the `slack` log channel.\n- `LOG_SLACK_EMOJI`: The Emoji code of the emoji used to illustrate log messages when using the `slack` log channel.\n- `LOG_SYSLOG_FACILITY`: The syslog facility that provides a rough clue of where in a system the message originated.\n- `SESSION_TABLE`: Name of the table to be used to store sessions when using the database `session` driver.\n- `SESSION_ENCRYPT`: Whether or not session data are encrypted before it is stored.\n\nPlease refer to the [Configuration doc](https://docs.2fauth.app/getting-started/configuration/) to find out when and how to use them.\n\n### Changed\n\n- The Service data field is now encrypted in the database ([#365](https://github.com/Bubka/2FAuth/issues/365)).\n- Upgrade to Laravel 11\n\n### Fixed\n\n- [issue #347](https://github.com/Bubka/2FAuth/issues/347) Sort with ignore case\n- [issue #349](https://github.com/Bubka/2FAuth/issues/349) \"Show QR Code\" feature returns wrong QR code\n- [issue #360](https://github.com/Bubka/2FAuth/issues/360) Can’t import QR Codes from Confluence 2FA\n- [issue #362](https://github.com/Bubka/2FAuth/issues/362) Cannot use SSO if app runs in subdirectory\n\n### API [1.5.0]\n\n- New `group_id` property for POST and PUT operations of the `/api/v1/twofaccounts` path\n\n## [5.2.0] - 2024-05-29\n\n2FAuth v5.2 offers a new notification feature. Each user can now decide whether they want to receive an email after a successful login from a new device, or after a failed login.\n\nFor now, both notifications are __disabled__ by default. Why this choice when this feature increases security? Because if the email configuration of your 2FAuth instance is not set up correctly, such login attempts will take a while (until all email sending attempts have failed).\n\nIf you never set up email sending on your instance, do it. It is the only way to recover your account, whether you use a password or a passkey to authenticate. To help you in this task, all required environment variables are described [here](https://docs.2fauth.app/getting-started/configuration/#email-setting). Since v5.1, administrators also have access to a test email button to validate the email configuration from the UI.\n\nNotifications will be enabled by default in a future version.\n\nLast but not least :\n\n⚠️ This version drops PHP 8.1 support ⚠️\n\n### Added\n\n- When [installed](https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Guides/Installing), 2FAuth now offers shortcuts to common actions.\n- User authentication logs (See user management pages in the admin area).\n- Two user preferences to control the notifications sent when authentication events occur.\n- A user preference to set the timezone applied to dates and times displayed in the app.\n\n#### New env vars\n\n- `APP_TIMEZONE`: The timezone applied to dates and times recorded to database ([doc](https://docs.2fauth.app/getting-started/configuration/#app_timezone)).\n- `AUTHENTICATION_LOG_RETENTION`: The authentication log retention time, in days ([doc](https://docs.2fauth.app/getting-started/configuration/#authentication_log_retention)).\n- `PROXY_HEADER_FOR_IP`: Name of the HTTP header sent by a reverse proxy to pass the original visitor IP address. ([doc](https://docs.2fauth.app/getting-started/configuration/#proxy_header_for_ip)).\n\n### Changed\n\n- `MAIL_DRIVER` env var renamed to `MAIL_MAILER`.  \n  This is not a breaking change as the former name is still supported. This is just to stick to Laravel defaults.\n- NGINX server now also listens to ipv6 in Docker image ([#336](https://github.com/Bubka/2FAuth/issues/336)).\n\n### Fixed\n\n- [issue #192](https://github.com/Bubka/2FAuth/issues/192) `DB_DATABASE` path not respected by entrypoint script\n- [issue #244](https://github.com/Bubka/2FAuth/issues/244) gauth qr code can't be imported\n- [issue #255](https://github.com/Bubka/2FAuth/issues/255) Only one Webauthn Device functioning\n- [issue #295](https://github.com/Bubka/2FAuth/issues/295) Add support for PHP 8.3\n- [issue #331](https://github.com/Bubka/2FAuth/issues/311) Last admin can demote to user, leaving the instance administratorless\n\n### API [1.4.0]\n\n- `/api/v1/users/{id}/authentications` GET path added ([doc](https://docs.2fauth.app/resources/rapidoc.html#get-/api/v1/users/-id-/authentications)).\n\n## [5.1.1] - 2024-03-21\n\n### Fixed\n\n- [issue #326](https://github.com/Bubka/2FAuth/issues/326) Admin panel not working when using security device\n- [issue #327](https://github.com/Bubka/2FAuth/issues/327) \"Keep SSO registration enabled\" is not saved\n\n## [5.1.0] - 2024-03-08\n\nHey Administrators, this release is for you, a brand new Admin Panel has arrived.\n\nWith this dedicated space, you will be able to manage admin settings previously located in the User Options view (like encryption, version check, registration). Some new settings are available to better control registration (email restrictions and self-ruling SSO) and two new features are coming: Email Configuration Testing and Cache Clearing.\n\nBut the real newness is the user management. All registered accounts are now searchable, the administrator role can be granted to any user, user access (password, personal token, security key/passphrase) can be revoked and you may also delete existing users or even create new ones.\n\nNote that the 2FAuth API has been updated with the new paths related to user management.\n\n### Added\n\n- A user preference to clear search results after copying a code ([#300](https://github.com/Bubka/2FAuth/issues/300)).\n- A user preference to return to default group after copying a code ([#300](https://github.com/Bubka/2FAuth/issues/300)).\n- The ability to submit a migration text directly in the Import view besides TXT files & QR codes loading ([#288](https://github.com/Bubka/2FAuth/issues/288)).\n- An administrator setting to restrict registration to a limited range of email addresses ([#250](https://github.com/Bubka/2FAuth/issues/250)).\n- An administrator setting to keep user registration via SSO enabled ([#317](https://github.com/Bubka/2FAuth/issues/317)).\n- A test email feature to ensure email sending works as expected ([#307](https://github.com/Bubka/2FAuth/issues/307)).\n- A Clear cache feature to... clear the cache, but from the browser ([#316](https://github.com/Bubka/2FAuth/issues/316)).\n- Hindi translation, thanks to [@saxenas](https://crowdin.com/profile/saxenas)\n\n### Changed\n\n- User preferences & Environment variables have been moved from the About view to the new Administration panel ([#303](https://github.com/Bubka/2FAuth/issues/303)).\n- Spaces are now removed from the Secret when filling out the Advanced form ([#311](https://github.com/Bubka/2FAuth/issues/311)).\n\n### Fixed\n\n- [issue #303](https://github.com/Bubka/2FAuth/issues/303) \"Already authenticated\" error message\n- [issue #305](https://github.com/Bubka/2FAuth/issues/305) 403 Forbidden {message: \"unauthorized\"}\n- [issue #315](https://github.com/Bubka/2FAuth/issues/315) \"Check now\" button is untranslatable\n- [issue #320](https://github.com/Bubka/2FAuth/issues/320) app/Policies/OwnershipTrait contains a bug, i think\n\n### API [1.3.0]\n\n- `/api/v1/users` paths added to manage registered users\n- `oauth_provider` property to the response body of `/api/v1/user` GET path\n\n## [5.0.4] - 2024-02-23\n\n### Added\n\n- Japanese translation, thanks to [@yheuhtozr](https://crowdin.com/profile/yheuhtozr)\n\n### Fixed\n\n- [issue #284](https://github.com/Bubka/2FAuth/issues/284) Blank screen with version 5.0.3\n- [issue #296](https://github.com/Bubka/2FAuth/issues/296) WARN Command cancelled (env=production breaks docker entrypoint)\n- [issue #298](https://github.com/Bubka/2FAuth/issues/298) WebAuthn account recovery and password recovery doesn't work. Email template broken\n- [issue #299](https://github.com/Bubka/2FAuth/issues/299) OID redirect behind reverse proxy\n\n## [5.0.3] - 2024-01-19\n\n⚠️ For everyone experiencing a blank screen after updating to v5.*, please set the `ASSET_URL` env variable to the same value as `APP_URL`.\n\n### Added\n\n- The `ASSET_URL` now appears in the .env.example variables next to `APP_URL`\n\n### Fixed\n\n- [issue #273](https://github.com/Bubka/2FAuth/issues/273) Unable to automatically paste email and password in login page\n- [issue #276](https://github.com/Bubka/2FAuth/issues/276) Camera does not work\n- [issue #277](https://github.com/Bubka/2FAuth/issues/277) Import 2FAS\n- [issue #279](https://github.com/Bubka/2FAuth/issues/279) Cannot use stdout LOG_CHANNEL anymore\n\n## [5.0.2] - 2023-12-29\n\n### Fixed\n\n- [issue #265](https://github.com/Bubka/2FAuth/issues/265) Version 5.0.1 doesn't display colored countdown segments\n\n## [5.0.1] - 2023-12-29\n\n### Fixed\n\n- [issue #262](https://github.com/Bubka/2FAuth/issues/262) Missing custom base url support\n\n## [5.0.0] - 2023-12-15\n\n### 2FAuth v5, the not-so-major release\n\nWhy? Because most of the changes are internal and come from the Vue 3 migration. I choose the long way, the one where all components had to be rewritten to adopt the new Vue Composition API and where the whole architecture has been rethought. Thus, despite all that work, almost nothing has changed on the surface.\n\nBut it was a necessary step, especially because Vue 2 will reach End Of Life on the end of 2023. Now 2FAuth is also better prepared for futur enhancements.\n\nOk, so is there anything new?  \nYes, SSO.\n\nNot so bad, right ?\n\nThe feature, bootstrapped by [@indyKoning](https://github.com/indykoning) with an OpenID provider, has been completed and now provides a Github provider as well. I plan to add more providers, tell me in the discussion which ones you would like to see. If you need help, the [docs site](https://docs.2fauth.app/security/authentication/sso/) has been updated to guide you through the setup process.\n\nv5 also comes with the following.\n\n### Added\n\n- Single Sign-On (SSO) is now available as an authentication method, with OpenID & Github. Contributed by [@indyKoning](https://github.com/indykoning) ([PR #243](https://github.com/Bubka/2FAuth/pull/243))\n- The ability to reveal passwords obscured with dots. See the Options tab in Settings ([#208](https://github.com/Bubka/2FAuth/issues/208)).\n- An env var to set a proxy for outgoing requests ([#252](https://github.com/Bubka/2FAuth/issues/252)).\n\n### Changed\n\n- Automatic signed out user now lands on the Login view instead of the Autolock view ([#138](https://github.com/Bubka/2FAuth/issues/138))\n- User preferences that depend on another now appear indented\n- Letters with diacritic marks are allowed in Group name ([#241](https://github.com/Bubka/2FAuth/issues/241))\n- Request body threshold increased to 10Mo in the Docker image to allow importing large file ([#239](https://github.com/Bubka/2FAuth/issues/239))\n\n### Removed\n\n- [PR #247](https://github.com/Bubka/2FAuth/pull/247), [PR #248](https://github.com/Bubka/2FAuth/pull/248), [PR #249](https://github.com/Bubka/2FAuth/pull/249) Useless env var, thanks to [@rouilj](https://github.com/rouilj)\n\n### Fixed\n\n- [issue #253](https://github.com/Bubka/2FAuth/issues/253) 2FAs exports cannot be imported\n\n### API [1.2.0]\n\n- `/api/v1/user` GET path added\n- `ids` and `withOtp` query parameters added to the `/api/v1/twofaccounts` GET path\n\n---\n\n__Full Changelog__: [v4.2.4...v5.0.0](https://github.com/Bubka/2FAuth/compare/v4.2.4...v5.0.0)\n\n## [4.2.4] - 2023-11-21\n\n### Changed\n\n- [PR #242](https://github.com/Bubka/2FAuth/pull/242) The Docker image now embed the PostgreSQL PHP extensions, thanks to [@stavros-k](https://github.com/stavros-k)\n\n### Fixed\n\n- [PR #235](https://github.com/Bubka/2FAuth/pull/235) Fix build badge broken, thanks to [@sy-records](https://github.com/sy-records)\n\n## [4.2.3] - 2023-09-26\n\n### Fixed\n\n- [issue #232](https://github.com/Bubka/2FAuth/issues/232) Vendor.js throws error making frontend unusable\n- [issue #233](https://github.com/Bubka/2FAuth/issues/233) The Close button of the 404 error page loops the page on itself\n\n## [4.2.2] - 2023-09-17\n\n### Fixed\n\n- [issue #232](https://github.com/Bubka/2FAuth/issues/232) Vendor.js throws error making frontend unusable\n\n## [4.2.1] - 2023-09-14\n\n### Fixed\n\n- [issue #227](https://github.com/Bubka/2FAuth/issues/227) PAT and Webauthn registration broken\n\n## [4.2.0] - 2023-09-13\n\n### Added\n\n- An Only for the brave feature: ctrl + click a TOTP account from the main view automatically generates a password and copies it to the clipboard without displaying it at all. Will the password be valid at the time you paste it? Nobody knows 💀\n- The `MAIL_VERIFY_SSL_PEER` environment variable to disable SSL peers verification ([#219](https://github.com/Bubka/2FAuth/issues/219)).\n- Russian translation, but partial. Want to help complete this translation? ➡️ [2FAuth project on Crowdin](https://crowdin.com/project/2fauth).\n\n### Changed\n\n- Navigation with the __Back__ and __Close__ buttons is now fully consistent with their labeling, even when browsing back through successive views using those buttons.\n- The length of the email submitted during registration is now limited to 191 characters ([#214](https://github.com/Bubka/2FAuth/issues/214)).\n- Upgrade to Laravel 10\n\n### Fixed\n\n- [issue #213](https://github.com/Bubka/2FAuth/issues/213) `checkForUpdate` value is missing in the About view\n- Inconsistent page titles\n\n---\n\n__Full Changelog__: [v4.1.0...v4.2.0](https://github.com/Bubka/2FAuth/compare/v4.1.0...v4.2.0)\n\n## [4.1.0] - 2023-07-07\n\nThis new version introduces a very common feature in the 2FA app world, the automatic generation and display of passwords.\n\nSince the very beginning, 2FAuth offers an _Open, Click & Get one password_ behavior, this is one of the main reasons why I created it. But this can be very troublesome or frustrating for users migrating from other 2FA apps as almost all of them work with an _Open & Get passwords_ behavior, which is much more straightforward.\n\nSo this is now only a user choice as 2FAuth offers both behaviors via a user preference. Obvisouly, the _Open, Click & Get one password_ behavior remains the default one.\n\n### Added\n\n- A user preference to generate and show 2FA passwords on the main view without user interaction ([#153](https://github.com/Bubka/2FAuth/issues/153))\n- An administrator setting to disable user registration ([#170](https://github.com/Bubka/2FAuth/issues/170))\n- A `2fauth:install` Artisan command to ease both initial and upgrade installation.\n- A spinner, during 2FA password loading - By [@josh-gaby](https://github.com/josh-gaby).\n- Russian translation, but partial. Want to help complete this translation? ➡️ [2FAuth project on Crowdin](https://crowdin.com/project/2fauth).\n\n### Changed\n\n- Aegis migrations with empty `name` properties are no longer rejected. The `issuer` property is then used as a fallback value.\n- The Docker image now embed the MySQL/MariaDB PHP extension, so it may be ready to work with.\n\n### Fixed\n\n- [issue #180](https://github.com/Bubka/2FAuth/issues/180) OTP does not rotate while _Close after copy_ and _Copy on display_ is activated - By [@josh-gaby](https://github.com/josh-gaby)\n- [issue #194](https://github.com/Bubka/2FAuth/issues/194) Container keeps trying to make connection to 172.67.161.186\n- [issue #134](https://github.com/Bubka/2FAuth/issues/134), [#143](https://github.com/Bubka/2FAuth/issues/143), [#147](https://github.com/Bubka/2FAuth/issues/147) Issue with some Microsoft 2FA\n- [issue #196](https://github.com/Bubka/2FAuth/issues/196) ERROR The [public/storage] link already exists\n\n## [4.0.3] - 2023-06-30\n\n### Security release\n\n- Fix possible SQL injection in validation rule (thx [@YouGina](https://github.com/YouGina))\n- Fix various possible XSS injections (thx [@quirinziessler](https://github.com/quirinziessler))\n\n## [4.0.2] - 2023-04-19\n\n### Fixed\n\n- [issue #176](https://github.com/Bubka/2FAuth/issues/176) Lost keys when upgrading to 4.x whilst using proxy header authentication\n\n## [4.0.1] - 2023-04-16\n\n### Fixed\n\n- [issue #174](https://github.com/Bubka/2FAuth/issues/174) PHP Fatal error after latest Update\n\n## [4.0.0] - 2023-04-14\n\nTime for multi-user has arrived, here comes v4.0!\n\nThis is a first step mainly dedicated to internal changes, so the feature has been integrated gently. For now, almost nothing has changed around user management, except that registrations are opened to new users and some options are only available to the administrator.\n\nThis version also comes with nice additions. A light theme, an export feature or the support of custom base url just to name a few.\n\n⚠️ This release drops PHP 8.0 support ⚠️\n\n### Added\n\n- An Export feature (accessible via the _Manage_ view) that lets you download your 2FA data in a JSON migration file\n- The Import feature accepts the 2FAuth JSON file generated by the Export feature\n- Support of custom base URL. You can now install 2FAuth in a domain sub-directory, e.g `https://mydomain/2fauth/` (see [Docs](https://docs.2fauth.app/getting-started/installation/self-hosted-server//#subdirectory))\n- ctrl+F keyboard shortcut to focus on Search on the main view\n- A light theme\n- IP addresses of failed login attempts are now logged\n\n### Changed\n\n⚠️ 2FAuth uses a new component to operate the WebAuthn authentication that cannot use existing registrations of your security devices. As a consequence, all your security devices will be revoked and the \"Use Webauthn only\" option will be disabled during the upgrade to avoid any issue and/or lockout. You will have to sign in using your email and password to re-register you security devices.\n\n- The _Manage_ view layout has been rearranged: The search bar remains and the action buttons now stand in the page footer\n- Password formatting is now a user option available with 3 formats: Grouping digits by pair, by trio or by half\n- Failed login throttling and API calls throttling can be configured in the .env file\n- Logs give more information\n- Upgrade to Laravel 9.0\n\n### Removed\n\n- The ability to set a Secret in a plain text format (in the advanced form). This was confusing and without any benefit.\n\n### Fixed\n\n- [issue #166](https://github.com/Bubka/2FAuth/issues/166) Unable to register Nitrokey\n\n## [3.4.2] - 2023-01-25\n\n### Fixed\n\n- [issue #160](https://github.com/Bubka/2FAuth/issues/160) Steam otpauth URI from Aegis are rejected by the Import feature\n\n## [3.4.1] - 2022-11-25\n\n### Fixed\n\n- [issue #140](https://github.com/Bubka/2FAuth/issues/140) Bad regex for Period field (advanced form)\n- [issue #141](https://github.com/Bubka/2FAuth/issues/141) Digits field is missing in advanced form\n\n## [3.4.0] - 2022-10-20\n\nThis release is a big step towards more accessibility. Keyboard navigation is now fully supported, with clean and consistent focus, and several UI components have received relevant ARIA properties to support assistive technologies.\n\nIt also provides a rewritten Import feature that supports new export formats (Aegis and 2FAS Authenticators) and more to come.\n\n⚠️ This release should be the last that supports PHP 8.0\n\n### Added\n\n- An option to check for new release on Github ([#127](https://github.com/Bubka/2FAuth/issues/127))\n- An option to automatically copy One-Time Passwords when they are displayed ([#125](https://github.com/Bubka/2FAuth/issues/125))\n- [Aegis](https://github.com/beemdevelopment/Aegis) and [2FAS](https://2fas.com/) export formats are now supported by the Import feature ([#128](https://github.com/Bubka/2FAuth/issues/128))\n- (Partial) Spanish and Chinese (simplified) localizations\n\n### Changed\n\n- Password fields can reveal the password and inform about the password strength ([#124](https://github.com/Bubka/2FAuth/issues/124))\n\n### Fixed\n\n- [issue #126](https://github.com/Bubka/2FAuth/issues/126) HOTP counters are not updated after OTP generation\n- Autolock setup ignored when session lifetime was shorter, causing CSRF token mismatch errors\n\n## [3.3.3] - 2022-08-16\n\n### Fixed\n\n- [issue #110](https://github.com/Bubka/2FAuth/issues/110) Can't sign in with login/password after the removal of the last webauthn device\n- [issue #111](https://github.com/Bubka/2FAuth/issues/111) Inappropriate notification about existing user during registration\n- [issue #113](https://github.com/Bubka/2FAuth/issues/113) Password reset does not work\n- [issue #115](https://github.com/Bubka/2FAuth/issues/115) WEBAUTHN_NAME .env variable set as null generates server error\n\n## [3.3.1-3.3.2] - 2022-08-02\n\n### Fixed\n\n- [issue #109](https://github.com/Bubka/2FAuth/issues/109) Timeout right after login\n\n## [3.3] - 2022-08-01\n\n⚠️ This release drops PHP 7.4 support ⚠️\n\nThe [docker image](https://hub.docker.com/r/2fauth/2fauth) has been upgraded as well.\n\n### Added\n\n- An option to fetch icons automatically from [2factorauth/twofactorauth](https://github.com/2factorauth/twofactorauth) ([#99](https://github.com/Bubka/2FAuth/issues/99))\n- An _About_ page, accessible from the footer ([#91](https://github.com/Bubka/2FAuth/issues/91))\n- Alphabetical sorting feature ([#95](https://github.com/Bubka/2FAuth/issues/95))\n\n### Changed\n\n- The footer is now visible everywhere to ease access to the _About_ page\n\n### Fixed\n\n- [issue #89](https://github.com/Bubka/2FAuth/issues/89) Deploy to Heroku fails without `composer.lock`\n- [issue #102](https://github.com/Bubka/2FAuth/issues/102) OTP generation from the Create/Edit form with invalid data should display errors\n- [issue #103](https://github.com/Bubka/2FAuth/issues/103) Google Authenticator import error: \"Label contains a colon\"\n- [issue #109](https://github.com/Bubka/2FAuth/issues/109) Account creation/import fails when encryption is On\n\n### Removed\n\n- PHP 7.4 support\n\n## [3.2] - 2022-07-18\n\n### Added\n\n- Support of Google Authenticator migration data: QR codes generated by the G-Auth export feature can be flashed/uploaded to import their data into 2FAuth. ([Import doc](https://docs.2fauth.app/usage/import), [#74](https://github.com/Bubka/2FAuth/issues/74))\n- Partial support of STEAM TOTP. See the [Steam Guard doc](https://docs.2fauth.app/usage/steam-guard) for detailed informations about this support ([#30](https://github.com/Bubka/2FAuth/issues/30))\n\n### Changed\n\n- Pages now have a unique title\n- Signing in while already authenticated no longer display the \"_Already authenticated_\" error message ([#88](https://github.com/Bubka/2FAuth/issues/88))\n- The Auto lock feature now forwards to a dedicated page to ensure proper logout and prevent CSRF token mismatch error (see [issue #73](https://github.com/Bubka/2FAuth/issues/73)) that still occurred in certain situation\n\n### Fixed\n\n- [issue #90](https://github.com/Bubka/2FAuth/issues/90) Empty page after deletion of all accounts\n- [issue #97](https://github.com/Bubka/2FAuth/issues/97) Secret's format selector should not clear the locked field in edit form\n\n## [3.1.1] - 2022-05-31\n\n### Fixed\n\n- [issue #85](https://github.com/Bubka/2FAuth/issues/57), [issue #86](https://github.com/Bubka/2FAuth/issues/86) Invalid OTP generated after the 2FA account has been saved to db\n\n## [3.1.0] - 2022-05-20\n\n### Added\n\n- `PROXY_LOGOUT_URL` environment variable to specify a custom logout url when using an auth proxy\n- Locked/Unlocked state for the _Secret_ field in the 2FA account Edit form to prevent undesirable edit.\n\n### Fixed\n\n- Fix OAuth setting view returning an error when auth is handled by a proxy\n- [issue #57](https://github.com/Bubka/2FAuth/issues/57) Can't save icons or upload QR codes - Docker installation\n- [issue #81](https://github.com/Bubka/2FAuth/issues/81) Unable to create configured logger. Using emergency logger\n- [issue #82](https://github.com/Bubka/2FAuth/issues/82) Autolock feature should be disabled while auth is handled by a proxy\n- [issue #84](https://github.com/Bubka/2FAuth/issues/84) Reverse-proxy-guard authenticates request without valid headers configuration\n\n## [3.0.2] - 2022-05-14\n\n### Added\n\n- Mail settings section in the docker readme by [@aronmal](https://github.com/aronmal)\n\n### Fixed\n\n- [issue #72](https://github.com/Bubka/2FAuth/issues/72) 2FA secret passed as plain text rejected by form validation\n- [issue #73](https://github.com/Bubka/2FAuth/issues/73) CSRF token mismatch\n- [issue #78](https://github.com/Bubka/2FAuth/issues/78) Add tags other then latest when pushing images to dockerhub\n\n## [3.0.1] - 2022-05-11\n\n### Fixed\n\n- [issue #68](https://github.com/Bubka/2FAuth/issues/68) 2fauth not run after update\n- [issue #71](https://github.com/Bubka/2FAuth/issues/71) Cannot view old TOTP entries on latest Docker Image\n- Missing login information on the demo website\n\n## [3.0.0] - 2022-05-09\n\nFinally, here is version 3.0!\n\nThis is a milestone in the 2FAuth development that greatly enhances 2FAuth under the hoods and comes with a [brand new documentation](https://docs.2fauth.app/).\n\n### New\n\n- 2FAuth now exposes a REST API following the OpenAPI 3.1 specification that allows connexion with third parties (see the [API doc](https://docs.2fauth.app/api/))\n- Support of the _Web Authentication_ standard, aka WebAuthn, to login using a security device like a Yubikey or FaceID\n- Support of authentication proxy to bypass the 2FAuth auth login\n- Heroku setup to deploy 2FAuth using the _Deploy to Heroku_ button\n\n#### Also added\n\n- Ability to delete the user account and reset 2FAuth\n- The content of any non-2FA QR code can be copied or followed (in case of an HTTP link)\n- PHP 8.0 support\n\n### Changed\n\n- 2Fauth now uses the browser language preference by default.\n- The current group is now clickable in the group selector\n- Upgrade to Laravel 8\n\n### Fixed\n\n- [issue #45](https://github.com/Bubka/2FAuth/issues/45) Account or Service field containing colon breaks the Test feature in the advanced form\n- [issue #47](https://github.com/Bubka/2FAuth/issues/47) Account creation fails when otpauth service parameter is missing\n- [issue #50](https://github.com/Bubka/2FAuth/issues/50) Email password reset does not work\n- [issue #51](https://github.com/Bubka/2FAuth/issues/51) Cannot delete a group with accounts (MySQL only)\n- [issue #52](https://github.com/Bubka/2FAuth/issues/52) null \"Default group\" setting after group delete\n- [issue #57](https://github.com/Bubka/2FAuth/issues/57) Can't save icons or upload QR codes - Docker installation\n\n### Removed\n\n- PHP 7.3 support\n\n## [2.1.0] - 2021-03-04\n\n### Added\n\n- German translation, thanks to [@chenmichael](https://crowdin.com/profile/chenmichael)\n\n## [2.0.2] - 2020-12-04\n\n### Fixed\n\n- [issue #20](https://github.com/Bubka/2FAuth/issues/20) Issues using 'Protect sensible data'\n\n## [2.0.1] - 2020-12-03\n\n### Fixed\n\n- [issue #18](https://github.com/Bubka/2FAuth/issues/18) Install using MySQL causes exception\n- [issue #17](https://github.com/Bubka/2FAuth/issues/17) Capitalization of email address during login should not matter\n- [issue #15](https://github.com/Bubka/2FAuth/issues/15) Applied group filter is not removed if the group is deleted\n- [issue #14](https://github.com/Bubka/2FAuth/issues/14) Cache is not refreshed automatically after group changes\n- Missing footer links at first start\n- Missing redirection after registration\n\n## [2.0.0] - 2020-11-29\n\n2FAuth goes to v2.0!\n\nThis release comes with multiple improvements and a lot of changes under the hood.\nDon't forget to backup your database before you upgrade. Have fun :)\n\n### Added\n\n- Add Groups to enhance accounts management\n- New advanced form to define fully customized accounts without QR code\n- New user option to skip the submitting page\n- New DB protection option to encrypt sensitive 2FA data\n- QR code generation of recorded accounts\n- Support of the OTP `image` parameter when a QR code is imported\n\n### Changed\n\n- Performance improvement thanks to data caching\n- Show Register/Login forms and their links only when relevant\n- Let the user choose between all available submitting methods (livescan, qrcode upload, advanced form)\n- Translations are now managed on [Crowdin.com/2fauth](https://crowdin.com/project/2fauth). You master some foreign languages? Why not help translate 2FAuth, your help would be welcome.\n\n### Fixed\n\n- [issue #13](https://github.com/Bubka/2FAuth/issues/13) Long Service name push content out of viewport\n- [issue #11](https://github.com/Bubka/2FAuth/issues/11) Token generation do not loop if TOTP period is different from 30s\n- [issue #9](https://github.com/Bubka/2FAuth/issues/9) Upload QR code in standard form return a 422 missing uri field\n\n## [1.3.1] - 2020-10-12\n\n### Changed\n\n- Upgrade to Laravel 7.0\n- Drop PHP 7.2 support\n- Enable the Request reset password form in Demo mode but inactivated\n\n### Fixed\n\n- Fix missing notifications in Auth views\n\n## [1.3.0] - 2020-10-09\n\n### Added\n\n- Application lock on security code copy or after a fixed period of inactivity\n- Notify user that https is required in order to use camera streaming to flash QR code\n- Notify user that the security code has been copied to clipboard when user click it\n- Show selected accounts count in Manage view\n- New option to show/hide icons in accounts list\n\n### Changed\n\n- More mobile friendly Close button for modal\n- More advanced notification component\n- Fixed header to keep Search field and Delete button always visible\n- Switches replaced by checkboxes in Settings\n\n### Fixed\n\n- Hide context around iPhone X+ notch\n- Unwanted access to restricted pages as guest\n\n## [1.2.0] - 2020-09-18\n\n### Added\n\n- QR Code scan using live stream when a camera is detected. Previous QR Code scanner remains available as fallback method or can be forced in Settings.\n- New alternative layouts: List or Grid\n- Accounts can be reordered\n\n### Changed\n\n- Notification banner (when saving settings) now has a fixed position\n\n## [1.1.0] - 2020-03-23\n\n### Added\n\n- Demonstration mode with restricted features and ability to reset content with an artisan command\n- Option to close token popup when the code is pasted (by clicking/taping on it)\n\n### Changed\n\n- Options default values can now be set in config/app\n- Generated assets are now part of the repo to ease deployement\n\n### Fixed\n\n- Option labels attached to wrong checkboxes\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 3.794921875,
          "content": "{\n    \"name\": \"bubka/2fauth\",\n    \"type\": \"project\",\n    \"description\": \"Two-Factor authentication generator\",\n    \"keywords\": [\n        \"2fauth\",\n        \"two-factor authentication\"\n    ],\n    \"license\": \"MIT\",\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/Bubka/Laravel-Dotenv-Editor.git\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.2\",\n        \"ext-bcmath\": \"*\",\n        \"ext-ctype\": \"*\",\n        \"ext-dom\": \"*\",\n        \"ext-fileinfo\": \"*\",\n        \"ext-gd\": \"*\",\n        \"ext-json\": \"*\",\n        \"ext-mbstring\": \"*\",\n        \"ext-openssl\": \"*\",\n        \"ext-session\": \"*\",\n        \"ext-tokenizer\": \"*\",\n        \"ext-xml\": \"*\",\n        \"chillerlan/php-qrcode\": \"^5.0\",\n        \"doctormckay/steam-totp\": \"^1.0\",\n        \"enshrined/svg-sanitize\": \"^0.20.0\",\n        \"google/protobuf\": \"^4.26\",\n        \"jackiedo/dotenv-editor\": \"dev-master\",\n        \"jenssegers/agent\": \"^2.6\",\n        \"khanamiryan/qrcode-detector-decoder\": \"^2.0.2\",\n        \"laragear/webauthn\": \"^2.0\",\n        \"laravel/framework\": \"^11.9\",\n        \"laravel/passport\": \"^12.0\",\n        \"laravel/socialite\": \"^5.10\",\n        \"laravel/tinker\": \"^2.9\",\n        \"laravel/ui\": \"^4.2\",\n        \"paragonie/constant_time_encoding\": \"^2.6\",\n        \"socialiteproviders/manager\": \"^4.4\",\n        \"spatie/eloquent-sortable\": \"^4.0.1\",\n        \"spomky-labs/otphp\": \"^11.0\"\n    },\n    \"require-dev\": {\n        \"barryvdh/laravel-ide-helper\": \"^3.0\",\n        \"brianium/paratest\": \"^7.5\",\n        \"fakerphp/faker\": \"^1.21\",\n        \"larastan/larastan\": \"^2.9\",\n        \"laravel/pint\": \"^1.16\",\n        \"mockery/mockery\": \"^1.6\",\n        \"nunomaduro/collision\": \"^8.1\",\n        \"phpstan/phpstan\": \"^1.10\",\n        \"phpunit/phpunit\": \"^11.0.10\"\n    },\n    \"config\": {\n        \"optimize-autoloader\": true,\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true,\n        \"allow-plugins\": {\n            \"pestphp/pest-plugin\": true,\n            \"php-http/discovery\": true\n        }\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"dont-discover\": []\n        }\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"app/\",\n            \"Database\\\\Factories\\\\\": \"database/factories/\",\n            \"Database\\\\Seeders\\\\\": \"database/seeders/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests/\"\n        }\n    },\n    \"minimum-stability\": \"stable\",\n    \"prefer-stable\": true,\n    \"scripts\": {\n        \"post-autoload-dump\": [\n            \"Illuminate\\\\Foundation\\\\ComposerScripts::postAutoloadDump\",\n            \"@php artisan package:discover --ansi\"\n        ],\n        \"post-update-cmd\": [\n            \"@php artisan vendor:publish --tag=laravel-assets --ansi --force\"\n        ],\n        \"post-root-package-install\": [\n            \"@php -r \\\"file_exists('.env') || copy('.env.example', '.env');\\\"\"\n        ],\n        \"post-create-project-cmd\": [\n            \"@php artisan key:generate --ansi\"\n        ],\n        \"test\": [\n            \"php artisan config:clear\",\n            \"vendor/bin/phpunit\",\n            \"php artisan config:clear\"\n        ],\n        \"test-para\": [\n            \"php artisan config:clear\",\n            \"php artisan test --parallel\",\n            \"php artisan config:clear\"\n        ],\n        \"test-mysql\": [\n            \"php artisan config:clear\",\n            \"vendor/bin/phpunit -c phpunit-mysql.xml\",\n            \"php artisan config:clear\"\n        ],\n        \"test-coverage-html\": [\n            \"@putenv XDEBUG_MODE=coverage\",\n            \"php artisan config:clear\",\n            \"vendor/bin/phpunit --coverage-html tests/Coverage/\",\n            \"php artisan config:clear\"\n        ],\n        \"ide-helper\": [\n            \"php artisan config:clear\",\n            \"php artisan clear-compiled\",\n            \"php artisan ide-helper:generate\",\n            \"php artisan ide-helper:models\"\n        ]\n    }\n}\n"
        },
        {
          "name": "composer.lock",
          "type": "blob",
          "size": 394.9296875,
          "content": "{\n    \"_readme\": [\n        \"This file locks the dependencies of your project to a known state\",\n        \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies\",\n        \"This file is @generated automatically\"\n    ],\n    \"content-hash\": \"da7b7e586a5f017685b05bf7189d8c5e\",\n    \"packages\": [\n        {\n            \"name\": \"brick/math\",\n            \"version\": \"0.12.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/brick/math.git\",\n                \"reference\": \"f510c0a40911935b77b86859eb5223d58d660df1\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/brick/math/zipball/f510c0a40911935b77b86859eb5223d58d660df1\",\n                \"reference\": \"f510c0a40911935b77b86859eb5223d58d660df1\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^8.1\"\n            },\n            \"require-dev\": {\n                \"php-coveralls/php-coveralls\": \"^2.2\",\n                \"phpunit/phpunit\": \"^10.1\",\n                \"vimeo/psalm\": \"5.16.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Brick\\\\Math\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"description\": \"Arbitrary-precision arithmetic library\",\n            \"keywords\": [\n                \"Arbitrary-precision\",\n                \"BigInteger\",\n                \"BigRational\",\n                \"arithmetic\",\n                \"bigdecimal\",\n                \"bignum\",\n                \"bignumber\",\n                \"brick\",\n                \"decimal\",\n                \"integer\",\n                \"math\",\n                \"mathematics\",\n                \"rational\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/brick/math/issues\",\n                \"source\": \"https://github.com/brick/math/tree/0.12.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/BenMorel\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2023-11-29T23:19:16+00:00\"\n        },\n        {\n            \"name\": \"carbonphp/carbon-doctrine-types\",\n            \"version\": \"3.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/CarbonPHP/carbon-doctrine-types.git\",\n                \"reference\": \"18ba5ddfec8976260ead6e866180bd5d2f71aa1d\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/CarbonPHP/carbon-doctrine-types/zipball/18ba5ddfec8976260ead6e866180bd5d2f71aa1d\",\n                \"reference\": \"18ba5ddfec8976260ead6e866180bd5d2f71aa1d\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^8.1\"\n            },\n            \"conflict\": {\n                \"doctrine/dbal\": \"<4.0.0 || >=5.0.0\"\n            },\n            \"require-dev\": {\n                \"doctrine/dbal\": \"^4.0.0\",\n                \"nesbot/carbon\": \"^2.71.0 || ^3.0.0\",\n                \"phpunit/phpunit\": \"^10.3\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Carbon\\\\Doctrine\\\\\": \"src/Carbon/Doctrine/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"KyleKatarn\",\n                    \"email\": \"kylekatarnls@gmail.com\"\n                }\n            ],\n            \"description\": \"Types to use Carbon in Doctrine\",\n            \"keywords\": [\n                \"carbon\",\n                \"date\",\n                \"datetime\",\n                \"doctrine\",\n                \"time\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/CarbonPHP/carbon-doctrine-types/issues\",\n                \"source\": \"https://github.com/CarbonPHP/carbon-doctrine-types/tree/3.2.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/kylekatarnls\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://opencollective.com/Carbon\",\n                    \"type\": \"open_collective\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/nesbot/carbon\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-02-09T16:56:22+00:00\"\n        },\n        {\n            \"name\": \"chillerlan/php-qrcode\",\n            \"version\": \"5.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/chillerlan/php-qrcode.git\",\n                \"reference\": \"da5bdb82c8755f54de112b271b402aaa8df53269\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/chillerlan/php-qrcode/zipball/da5bdb82c8755f54de112b271b402aaa8df53269\",\n                \"reference\": \"da5bdb82c8755f54de112b271b402aaa8df53269\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"chillerlan/php-settings-container\": \"^2.1.4 || ^3.1\",\n                \"ext-mbstring\": \"*\",\n                \"php\": \"^7.4 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"chillerlan/php-authenticator\": \"^4.1 || ^5.1\",\n                \"phan/phan\": \"^5.4\",\n                \"phpmd/phpmd\": \"^2.15\",\n                \"phpunit/phpunit\": \"^9.6\",\n                \"setasign/fpdf\": \"^1.8.2\",\n                \"squizlabs/php_codesniffer\": \"^3.8\"\n            },\n            \"suggest\": {\n                \"chillerlan/php-authenticator\": \"Yet another Google authenticator! Also creates URIs for mobile apps.\",\n                \"setasign/fpdf\": \"Required to use the QR FPDF output.\",\n                \"simple-icons/simple-icons\": \"SVG icons that you can use to embed as logos in the QR Code\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"chillerlan\\\\QRCode\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\",\n                \"Apache-2.0\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Kazuhiko Arase\",\n                    \"homepage\": \"https://github.com/kazuhikoarase/qrcode-generator\"\n                },\n                {\n                    \"name\": \"ZXing Authors\",\n                    \"homepage\": \"https://github.com/zxing/zxing\"\n                },\n                {\n                    \"name\": \"Ashot Khanamiryan\",\n                    \"homepage\": \"https://github.com/khanamiryan/php-qrcode-detector-decoder\"\n                },\n                {\n                    \"name\": \"Smiley\",\n                    \"email\": \"smiley@chillerlan.net\",\n                    \"homepage\": \"https://github.com/codemasher\"\n                },\n                {\n                    \"name\": \"Contributors\",\n                    \"homepage\": \"https://github.com/chillerlan/php-qrcode/graphs/contributors\"\n                }\n            ],\n            \"description\": \"A QR code generator and reader with a user friendly API. PHP 7.4+\",\n            \"homepage\": \"https://github.com/chillerlan/php-qrcode\",\n            \"keywords\": [\n                \"phpqrcode\",\n                \"qr\",\n                \"qr code\",\n                \"qr-reader\",\n                \"qrcode\",\n                \"qrcode-generator\",\n                \"qrcode-reader\"\n            ],\n            \"support\": {\n                \"docs\": \"https://php-qrcode.readthedocs.io\",\n                \"issues\": \"https://github.com/chillerlan/php-qrcode/issues\",\n                \"source\": \"https://github.com/chillerlan/php-qrcode\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://www.paypal.com/donate?hosted_button_id=WLYUNAT9ZTJZ4\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://ko-fi.com/codemasher\",\n                    \"type\": \"ko_fi\"\n                }\n            ],\n            \"time\": \"2024-02-27T14:37:26+00:00\"\n        },\n        {\n            \"name\": \"chillerlan/php-settings-container\",\n            \"version\": \"3.2.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/chillerlan/php-settings-container.git\",\n                \"reference\": \"95ed3e9676a1d47cab2e3174d19b43f5dbf52681\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/chillerlan/php-settings-container/zipball/95ed3e9676a1d47cab2e3174d19b43f5dbf52681\",\n                \"reference\": \"95ed3e9676a1d47cab2e3174d19b43f5dbf52681\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-json\": \"*\",\n                \"php\": \"^8.1\"\n            },\n            \"require-dev\": {\n                \"phpmd/phpmd\": \"^2.15\",\n                \"phpstan/phpstan\": \"^1.11\",\n                \"phpstan/phpstan-deprecation-rules\": \"^1.2\",\n                \"phpunit/phpunit\": \"^10.5\",\n                \"squizlabs/php_codesniffer\": \"^3.10\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"chillerlan\\\\Settings\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Smiley\",\n                    \"email\": \"smiley@chillerlan.net\",\n                    \"homepage\": \"https://github.com/codemasher\"\n                }\n            ],\n            \"description\": \"A container class for immutable settings objects. Not a DI container.\",\n            \"homepage\": \"https://github.com/chillerlan/php-settings-container\",\n            \"keywords\": [\n                \"Settings\",\n                \"configuration\",\n                \"container\",\n                \"helper\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/chillerlan/php-settings-container/issues\",\n                \"source\": \"https://github.com/chillerlan/php-settings-container\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://www.paypal.com/donate?hosted_button_id=WLYUNAT9ZTJZ4\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://ko-fi.com/codemasher\",\n                    \"type\": \"ko_fi\"\n                }\n            ],\n            \"time\": \"2024-07-16T11:13:48+00:00\"\n        },\n        {\n            \"name\": \"defuse/php-encryption\",\n            \"version\": \"v2.4.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/defuse/php-encryption.git\",\n                \"reference\": \"f53396c2d34225064647a05ca76c1da9d99e5828\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/defuse/php-encryption/zipball/f53396c2d34225064647a05ca76c1da9d99e5828\",\n                \"reference\": \"f53396c2d34225064647a05ca76c1da9d99e5828\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-openssl\": \"*\",\n                \"paragonie/random_compat\": \">= 2\",\n                \"php\": \">=5.6.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^5|^6|^7|^8|^9|^10\",\n                \"yoast/phpunit-polyfills\": \"^2.0.0\"\n            },\n            \"bin\": [\n                \"bin/generate-defuse-key\"\n            ],\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Defuse\\\\Crypto\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Taylor Hornby\",\n                    \"email\": \"taylor@defuse.ca\",\n                    \"homepage\": \"https://defuse.ca/\"\n                },\n                {\n                    \"name\": \"Scott Arciszewski\",\n                    \"email\": \"info@paragonie.com\",\n                    \"homepage\": \"https://paragonie.com\"\n                }\n            ],\n            \"description\": \"Secure PHP Encryption Library\",\n            \"keywords\": [\n                \"aes\",\n                \"authenticated encryption\",\n                \"cipher\",\n                \"crypto\",\n                \"cryptography\",\n                \"encrypt\",\n                \"encryption\",\n                \"openssl\",\n                \"security\",\n                \"symmetric key cryptography\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/defuse/php-encryption/issues\",\n                \"source\": \"https://github.com/defuse/php-encryption/tree/v2.4.0\"\n            },\n            \"time\": \"2023-06-19T06:10:36+00:00\"\n        },\n        {\n            \"name\": \"dflydev/dot-access-data\",\n            \"version\": \"v3.0.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/dflydev/dflydev-dot-access-data.git\",\n                \"reference\": \"a23a2bf4f31d3518f3ecb38660c95715dfead60f\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/dflydev/dflydev-dot-access-data/zipball/a23a2bf4f31d3518f3ecb38660c95715dfead60f\",\n                \"reference\": \"a23a2bf4f31d3518f3ecb38660c95715dfead60f\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.1 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"phpstan/phpstan\": \"^0.12.42\",\n                \"phpunit/phpunit\": \"^7.5 || ^8.5 || ^9.3\",\n                \"scrutinizer/ocular\": \"1.6.0\",\n                \"squizlabs/php_codesniffer\": \"^3.5\",\n                \"vimeo/psalm\": \"^4.0.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"3.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Dflydev\\\\DotAccessData\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Dragonfly Development Inc.\",\n                    \"email\": \"info@dflydev.com\",\n                    \"homepage\": \"http://dflydev.com\"\n                },\n                {\n                    \"name\": \"Beau Simensen\",\n                    \"email\": \"beau@dflydev.com\",\n                    \"homepage\": \"http://beausimensen.com\"\n                },\n                {\n                    \"name\": \"Carlos Frutos\",\n                    \"email\": \"carlos@kiwing.it\",\n                    \"homepage\": \"https://github.com/cfrutos\"\n                },\n                {\n                    \"name\": \"Colin O'Dell\",\n                    \"email\": \"colinodell@gmail.com\",\n                    \"homepage\": \"https://www.colinodell.com\"\n                }\n            ],\n            \"description\": \"Given a deep data structure, access data by dot notation.\",\n            \"homepage\": \"https://github.com/dflydev/dflydev-dot-access-data\",\n            \"keywords\": [\n                \"access\",\n                \"data\",\n                \"dot\",\n                \"notation\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/dflydev/dflydev-dot-access-data/issues\",\n                \"source\": \"https://github.com/dflydev/dflydev-dot-access-data/tree/v3.0.3\"\n            },\n            \"time\": \"2024-07-08T12:26:09+00:00\"\n        },\n        {\n            \"name\": \"doctormckay/steam-totp\",\n            \"version\": \"v1.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/DoctorMcKay/php-steam-totp.git\",\n                \"reference\": \"1497d06a7a74a499ff42f5a2921b2ce731638449\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/DoctorMcKay/php-steam-totp/zipball/1497d06a7a74a499ff42f5a2921b2ce731638449\",\n                \"reference\": \"1497d06a7a74a499ff42f5a2921b2ce731638449\",\n                \"shasum\": \"\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"SteamTotp\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Alexander Corn\",\n                    \"email\": \"mckay@doctormckay.com\"\n                }\n            ],\n            \"description\": \"PHP library to deal with Steam's proprietary TOTP algorithm\",\n            \"support\": {\n                \"issues\": \"https://github.com/DoctorMcKay/php-steam-totp/issues\",\n                \"source\": \"https://github.com/DoctorMcKay/php-steam-totp/tree/v1.0.1\"\n            },\n            \"time\": \"2016-09-13T12:59:10+00:00\"\n        },\n        {\n            \"name\": \"doctrine/inflector\",\n            \"version\": \"2.0.10\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/doctrine/inflector.git\",\n                \"reference\": \"5817d0659c5b50c9b950feb9af7b9668e2c436bc\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/doctrine/inflector/zipball/5817d0659c5b50c9b950feb9af7b9668e2c436bc\",\n                \"reference\": \"5817d0659c5b50c9b950feb9af7b9668e2c436bc\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"doctrine/coding-standard\": \"^11.0\",\n                \"phpstan/phpstan\": \"^1.8\",\n                \"phpstan/phpstan-phpunit\": \"^1.1\",\n                \"phpstan/phpstan-strict-rules\": \"^1.3\",\n                \"phpunit/phpunit\": \"^8.5 || ^9.5\",\n                \"vimeo/psalm\": \"^4.25 || ^5.4\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Doctrine\\\\Inflector\\\\\": \"lib/Doctrine/Inflector\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Guilherme Blanco\",\n                    \"email\": \"guilhermeblanco@gmail.com\"\n                },\n                {\n                    \"name\": \"Roman Borschel\",\n                    \"email\": \"roman@code-factory.org\"\n                },\n                {\n                    \"name\": \"Benjamin Eberlei\",\n                    \"email\": \"kontakt@beberlei.de\"\n                },\n                {\n                    \"name\": \"Jonathan Wage\",\n                    \"email\": \"jonwage@gmail.com\"\n                },\n                {\n                    \"name\": \"Johannes Schmitt\",\n                    \"email\": \"schmittjoh@gmail.com\"\n                }\n            ],\n            \"description\": \"PHP Doctrine Inflector is a small library that can perform string manipulations with regard to upper/lowercase and singular/plural forms of words.\",\n            \"homepage\": \"https://www.doctrine-project.org/projects/inflector.html\",\n            \"keywords\": [\n                \"inflection\",\n                \"inflector\",\n                \"lowercase\",\n                \"manipulation\",\n                \"php\",\n                \"plural\",\n                \"singular\",\n                \"strings\",\n                \"uppercase\",\n                \"words\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/doctrine/inflector/issues\",\n                \"source\": \"https://github.com/doctrine/inflector/tree/2.0.10\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://www.doctrine-project.org/sponsorship.html\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://www.patreon.com/phpdoctrine\",\n                    \"type\": \"patreon\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/doctrine%2Finflector\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-02-18T20:23:39+00:00\"\n        },\n        {\n            \"name\": \"doctrine/lexer\",\n            \"version\": \"3.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/doctrine/lexer.git\",\n                \"reference\": \"31ad66abc0fc9e1a1f2d9bc6a42668d2fbbcd6dd\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/doctrine/lexer/zipball/31ad66abc0fc9e1a1f2d9bc6a42668d2fbbcd6dd\",\n                \"reference\": \"31ad66abc0fc9e1a1f2d9bc6a42668d2fbbcd6dd\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^8.1\"\n            },\n            \"require-dev\": {\n                \"doctrine/coding-standard\": \"^12\",\n                \"phpstan/phpstan\": \"^1.10\",\n                \"phpunit/phpunit\": \"^10.5\",\n                \"psalm/plugin-phpunit\": \"^0.18.3\",\n                \"vimeo/psalm\": \"^5.21\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Doctrine\\\\Common\\\\Lexer\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Guilherme Blanco\",\n                    \"email\": \"guilhermeblanco@gmail.com\"\n                },\n                {\n                    \"name\": \"Roman Borschel\",\n                    \"email\": \"roman@code-factory.org\"\n                },\n                {\n                    \"name\": \"Johannes Schmitt\",\n                    \"email\": \"schmittjoh@gmail.com\"\n                }\n            ],\n            \"description\": \"PHP Doctrine Lexer parser library that can be used in Top-Down, Recursive Descent Parsers.\",\n            \"homepage\": \"https://www.doctrine-project.org/projects/lexer.html\",\n            \"keywords\": [\n                \"annotations\",\n                \"docblock\",\n                \"lexer\",\n                \"parser\",\n                \"php\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/doctrine/lexer/issues\",\n                \"source\": \"https://github.com/doctrine/lexer/tree/3.0.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://www.doctrine-project.org/sponsorship.html\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://www.patreon.com/phpdoctrine\",\n                    \"type\": \"patreon\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/doctrine%2Flexer\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-02-05T11:56:58+00:00\"\n        },\n        {\n            \"name\": \"dragonmantank/cron-expression\",\n            \"version\": \"v3.4.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/dragonmantank/cron-expression.git\",\n                \"reference\": \"8c784d071debd117328803d86b2097615b457500\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/dragonmantank/cron-expression/zipball/8c784d071debd117328803d86b2097615b457500\",\n                \"reference\": \"8c784d071debd117328803d86b2097615b457500\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2|^8.0\",\n                \"webmozart/assert\": \"^1.0\"\n            },\n            \"replace\": {\n                \"mtdowling/cron-expression\": \"^1.0\"\n            },\n            \"require-dev\": {\n                \"phpstan/extension-installer\": \"^1.0\",\n                \"phpstan/phpstan\": \"^1.0\",\n                \"phpunit/phpunit\": \"^7.0|^8.0|^9.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Cron\\\\\": \"src/Cron/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Chris Tankersley\",\n                    \"email\": \"chris@ctankersley.com\",\n                    \"homepage\": \"https://github.com/dragonmantank\"\n                }\n            ],\n            \"description\": \"CRON for PHP: Calculate the next or previous run date and determine if a CRON expression is due\",\n            \"keywords\": [\n                \"cron\",\n                \"schedule\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/dragonmantank/cron-expression/issues\",\n                \"source\": \"https://github.com/dragonmantank/cron-expression/tree/v3.4.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/dragonmantank\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-10-09T13:47:03+00:00\"\n        },\n        {\n            \"name\": \"egulias/email-validator\",\n            \"version\": \"4.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/egulias/EmailValidator.git\",\n                \"reference\": \"ebaaf5be6c0286928352e054f2d5125608e5405e\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/egulias/EmailValidator/zipball/ebaaf5be6c0286928352e054f2d5125608e5405e\",\n                \"reference\": \"ebaaf5be6c0286928352e054f2d5125608e5405e\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"doctrine/lexer\": \"^2.0 || ^3.0\",\n                \"php\": \">=8.1\",\n                \"symfony/polyfill-intl-idn\": \"^1.26\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^10.2\",\n                \"vimeo/psalm\": \"^5.12\"\n            },\n            \"suggest\": {\n                \"ext-intl\": \"PHP Internationalization Libraries are required to use the SpoofChecking validation\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"4.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Egulias\\\\EmailValidator\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Eduardo Gulias Davis\"\n                }\n            ],\n            \"description\": \"A library for validating emails against several RFCs\",\n            \"homepage\": \"https://github.com/egulias/EmailValidator\",\n            \"keywords\": [\n                \"email\",\n                \"emailvalidation\",\n                \"emailvalidator\",\n                \"validation\",\n                \"validator\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/egulias/EmailValidator/issues\",\n                \"source\": \"https://github.com/egulias/EmailValidator/tree/4.0.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/egulias\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2023-10-06T06:47:41+00:00\"\n        },\n        {\n            \"name\": \"enshrined/svg-sanitize\",\n            \"version\": \"0.20.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/darylldoyle/svg-sanitizer.git\",\n                \"reference\": \"068d9fcf912c88a0471d101d95a2caa87c50aee7\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/darylldoyle/svg-sanitizer/zipball/068d9fcf912c88a0471d101d95a2caa87c50aee7\",\n                \"reference\": \"068d9fcf912c88a0471d101d95a2caa87c50aee7\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-libxml\": \"*\",\n                \"php\": \"^7.1 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^6.5 || ^8.5\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"enshrined\\\\svgSanitize\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"GPL-2.0-or-later\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Daryll Doyle\",\n                    \"email\": \"daryll@enshrined.co.uk\"\n                }\n            ],\n            \"description\": \"An SVG sanitizer for PHP\",\n            \"support\": {\n                \"issues\": \"https://github.com/darylldoyle/svg-sanitizer/issues\",\n                \"source\": \"https://github.com/darylldoyle/svg-sanitizer/tree/0.20.0\"\n            },\n            \"time\": \"2024-09-05T10:18:12+00:00\"\n        },\n        {\n            \"name\": \"firebase/php-jwt\",\n            \"version\": \"v6.10.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/firebase/php-jwt.git\",\n                \"reference\": \"500501c2ce893c824c801da135d02661199f60c5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/firebase/php-jwt/zipball/500501c2ce893c824c801da135d02661199f60c5\",\n                \"reference\": \"500501c2ce893c824c801da135d02661199f60c5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^8.0\"\n            },\n            \"require-dev\": {\n                \"guzzlehttp/guzzle\": \"^7.4\",\n                \"phpspec/prophecy-phpunit\": \"^2.0\",\n                \"phpunit/phpunit\": \"^9.5\",\n                \"psr/cache\": \"^2.0||^3.0\",\n                \"psr/http-client\": \"^1.0\",\n                \"psr/http-factory\": \"^1.0\"\n            },\n            \"suggest\": {\n                \"ext-sodium\": \"Support EdDSA (Ed25519) signatures\",\n                \"paragonie/sodium_compat\": \"Support EdDSA (Ed25519) signatures when libsodium is not present\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Firebase\\\\JWT\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Neuman Vong\",\n                    \"email\": \"neuman+pear@twilio.com\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Anant Narayanan\",\n                    \"email\": \"anant@php.net\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"A simple library to encode and decode JSON Web Tokens (JWT) in PHP. Should conform to the current spec.\",\n            \"homepage\": \"https://github.com/firebase/php-jwt\",\n            \"keywords\": [\n                \"jwt\",\n                \"php\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/firebase/php-jwt/issues\",\n                \"source\": \"https://github.com/firebase/php-jwt/tree/v6.10.1\"\n            },\n            \"time\": \"2024-05-18T18:05:11+00:00\"\n        },\n        {\n            \"name\": \"fruitcake/php-cors\",\n            \"version\": \"v1.3.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/fruitcake/php-cors.git\",\n                \"reference\": \"3d158f36e7875e2f040f37bc0573956240a5a38b\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/fruitcake/php-cors/zipball/3d158f36e7875e2f040f37bc0573956240a5a38b\",\n                \"reference\": \"3d158f36e7875e2f040f37bc0573956240a5a38b\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.4|^8.0\",\n                \"symfony/http-foundation\": \"^4.4|^5.4|^6|^7\"\n            },\n            \"require-dev\": {\n                \"phpstan/phpstan\": \"^1.4\",\n                \"phpunit/phpunit\": \"^9\",\n                \"squizlabs/php_codesniffer\": \"^3.5\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.2-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Fruitcake\\\\Cors\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fruitcake\",\n                    \"homepage\": \"https://fruitcake.nl\"\n                },\n                {\n                    \"name\": \"Barryvdh\",\n                    \"email\": \"barryvdh@gmail.com\"\n                }\n            ],\n            \"description\": \"Cross-origin resource sharing library for the Symfony HttpFoundation\",\n            \"homepage\": \"https://github.com/fruitcake/php-cors\",\n            \"keywords\": [\n                \"cors\",\n                \"laravel\",\n                \"symfony\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/fruitcake/php-cors/issues\",\n                \"source\": \"https://github.com/fruitcake/php-cors/tree/v1.3.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://fruitcake.nl\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/barryvdh\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2023-10-12T05:21:21+00:00\"\n        },\n        {\n            \"name\": \"google/protobuf\",\n            \"version\": \"v4.28.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/protocolbuffers/protobuf-php.git\",\n                \"reference\": \"c5c311e0f3d89928251ac5a2f0e3db283612c100\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/protocolbuffers/protobuf-php/zipball/c5c311e0f3d89928251ac5a2f0e3db283612c100\",\n                \"reference\": \"c5c311e0f3d89928251ac5a2f0e3db283612c100\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.0.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \">=5.0.0\"\n            },\n            \"suggest\": {\n                \"ext-bcmath\": \"Need to support JSON deserialization\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Google\\\\Protobuf\\\\\": \"src/Google/Protobuf\",\n                    \"GPBMetadata\\\\Google\\\\Protobuf\\\\\": \"src/GPBMetadata/Google/Protobuf\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"description\": \"proto library for PHP\",\n            \"homepage\": \"https://developers.google.com/protocol-buffers/\",\n            \"keywords\": [\n                \"proto\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/protocolbuffers/protobuf-php/tree/v4.28.3\"\n            },\n            \"time\": \"2024-10-22T22:27:17+00:00\"\n        },\n        {\n            \"name\": \"graham-campbell/result-type\",\n            \"version\": \"v1.1.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/GrahamCampbell/Result-Type.git\",\n                \"reference\": \"3ba905c11371512af9d9bdd27d99b782216b6945\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/GrahamCampbell/Result-Type/zipball/3ba905c11371512af9d9bdd27d99b782216b6945\",\n                \"reference\": \"3ba905c11371512af9d9bdd27d99b782216b6945\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2.5 || ^8.0\",\n                \"phpoption/phpoption\": \"^1.9.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^8.5.39 || ^9.6.20 || ^10.5.28\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"GrahamCampbell\\\\ResultType\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Graham Campbell\",\n                    \"email\": \"hello@gjcampbell.co.uk\",\n                    \"homepage\": \"https://github.com/GrahamCampbell\"\n                }\n            ],\n            \"description\": \"An Implementation Of The Result Type\",\n            \"keywords\": [\n                \"Graham Campbell\",\n                \"GrahamCampbell\",\n                \"Result Type\",\n                \"Result-Type\",\n                \"result\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/GrahamCampbell/Result-Type/issues\",\n                \"source\": \"https://github.com/GrahamCampbell/Result-Type/tree/v1.1.3\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/GrahamCampbell\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/graham-campbell/result-type\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-07-20T21:45:45+00:00\"\n        },\n        {\n            \"name\": \"guzzlehttp/guzzle\",\n            \"version\": \"7.9.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/guzzle/guzzle.git\",\n                \"reference\": \"d281ed313b989f213357e3be1a179f02196ac99b\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/guzzle/guzzle/zipball/d281ed313b989f213357e3be1a179f02196ac99b\",\n                \"reference\": \"d281ed313b989f213357e3be1a179f02196ac99b\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-json\": \"*\",\n                \"guzzlehttp/promises\": \"^1.5.3 || ^2.0.3\",\n                \"guzzlehttp/psr7\": \"^2.7.0\",\n                \"php\": \"^7.2.5 || ^8.0\",\n                \"psr/http-client\": \"^1.0\",\n                \"symfony/deprecation-contracts\": \"^2.2 || ^3.0\"\n            },\n            \"provide\": {\n                \"psr/http-client-implementation\": \"1.0\"\n            },\n            \"require-dev\": {\n                \"bamarni/composer-bin-plugin\": \"^1.8.2\",\n                \"ext-curl\": \"*\",\n                \"guzzle/client-integration-tests\": \"3.0.2\",\n                \"php-http/message-factory\": \"^1.1\",\n                \"phpunit/phpunit\": \"^8.5.39 || ^9.6.20\",\n                \"psr/log\": \"^1.1 || ^2.0 || ^3.0\"\n            },\n            \"suggest\": {\n                \"ext-curl\": \"Required for CURL handler support\",\n                \"ext-intl\": \"Required for Internationalized Domain Name (IDN) support\",\n                \"psr/log\": \"Required for using the Log middleware\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"bamarni-bin\": {\n                    \"bin-links\": true,\n                    \"forward-command\": false\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"src/functions_include.php\"\n                ],\n                \"psr-4\": {\n                    \"GuzzleHttp\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Graham Campbell\",\n                    \"email\": \"hello@gjcampbell.co.uk\",\n                    \"homepage\": \"https://github.com/GrahamCampbell\"\n                },\n                {\n                    \"name\": \"Michael Dowling\",\n                    \"email\": \"mtdowling@gmail.com\",\n                    \"homepage\": \"https://github.com/mtdowling\"\n                },\n                {\n                    \"name\": \"Jeremy Lindblom\",\n                    \"email\": \"jeremeamia@gmail.com\",\n                    \"homepage\": \"https://github.com/jeremeamia\"\n                },\n                {\n                    \"name\": \"George Mponos\",\n                    \"email\": \"gmponos@gmail.com\",\n                    \"homepage\": \"https://github.com/gmponos\"\n                },\n                {\n                    \"name\": \"Tobias Nyholm\",\n                    \"email\": \"tobias.nyholm@gmail.com\",\n                    \"homepage\": \"https://github.com/Nyholm\"\n                },\n                {\n                    \"name\": \"Márk Sági-Kazár\",\n                    \"email\": \"mark.sagikazar@gmail.com\",\n                    \"homepage\": \"https://github.com/sagikazarmark\"\n                },\n                {\n                    \"name\": \"Tobias Schultze\",\n                    \"email\": \"webmaster@tubo-world.de\",\n                    \"homepage\": \"https://github.com/Tobion\"\n                }\n            ],\n            \"description\": \"Guzzle is a PHP HTTP client library\",\n            \"keywords\": [\n                \"client\",\n                \"curl\",\n                \"framework\",\n                \"http\",\n                \"http client\",\n                \"psr-18\",\n                \"psr-7\",\n                \"rest\",\n                \"web service\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/guzzle/guzzle/issues\",\n                \"source\": \"https://github.com/guzzle/guzzle/tree/7.9.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/GrahamCampbell\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://github.com/Nyholm\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/guzzlehttp/guzzle\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-07-24T11:22:20+00:00\"\n        },\n        {\n            \"name\": \"guzzlehttp/promises\",\n            \"version\": \"2.0.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/guzzle/promises.git\",\n                \"reference\": \"f9c436286ab2892c7db7be8c8da4ef61ccf7b455\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/guzzle/promises/zipball/f9c436286ab2892c7db7be8c8da4ef61ccf7b455\",\n                \"reference\": \"f9c436286ab2892c7db7be8c8da4ef61ccf7b455\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2.5 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"bamarni/composer-bin-plugin\": \"^1.8.2\",\n                \"phpunit/phpunit\": \"^8.5.39 || ^9.6.20\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"bamarni-bin\": {\n                    \"bin-links\": true,\n                    \"forward-command\": false\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"GuzzleHttp\\\\Promise\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Graham Campbell\",\n                    \"email\": \"hello@gjcampbell.co.uk\",\n                    \"homepage\": \"https://github.com/GrahamCampbell\"\n                },\n                {\n                    \"name\": \"Michael Dowling\",\n                    \"email\": \"mtdowling@gmail.com\",\n                    \"homepage\": \"https://github.com/mtdowling\"\n                },\n                {\n                    \"name\": \"Tobias Nyholm\",\n                    \"email\": \"tobias.nyholm@gmail.com\",\n                    \"homepage\": \"https://github.com/Nyholm\"\n                },\n                {\n                    \"name\": \"Tobias Schultze\",\n                    \"email\": \"webmaster@tubo-world.de\",\n                    \"homepage\": \"https://github.com/Tobion\"\n                }\n            ],\n            \"description\": \"Guzzle promises library\",\n            \"keywords\": [\n                \"promise\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/guzzle/promises/issues\",\n                \"source\": \"https://github.com/guzzle/promises/tree/2.0.4\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/GrahamCampbell\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://github.com/Nyholm\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/guzzlehttp/promises\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-10-17T10:06:22+00:00\"\n        },\n        {\n            \"name\": \"guzzlehttp/psr7\",\n            \"version\": \"2.7.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/guzzle/psr7.git\",\n                \"reference\": \"a70f5c95fb43bc83f07c9c948baa0dc1829bf201\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/guzzle/psr7/zipball/a70f5c95fb43bc83f07c9c948baa0dc1829bf201\",\n                \"reference\": \"a70f5c95fb43bc83f07c9c948baa0dc1829bf201\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2.5 || ^8.0\",\n                \"psr/http-factory\": \"^1.0\",\n                \"psr/http-message\": \"^1.1 || ^2.0\",\n                \"ralouphie/getallheaders\": \"^3.0\"\n            },\n            \"provide\": {\n                \"psr/http-factory-implementation\": \"1.0\",\n                \"psr/http-message-implementation\": \"1.0\"\n            },\n            \"require-dev\": {\n                \"bamarni/composer-bin-plugin\": \"^1.8.2\",\n                \"http-interop/http-factory-tests\": \"0.9.0\",\n                \"phpunit/phpunit\": \"^8.5.39 || ^9.6.20\"\n            },\n            \"suggest\": {\n                \"laminas/laminas-httphandlerrunner\": \"Emit PSR-7 responses\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"bamarni-bin\": {\n                    \"bin-links\": true,\n                    \"forward-command\": false\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"GuzzleHttp\\\\Psr7\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Graham Campbell\",\n                    \"email\": \"hello@gjcampbell.co.uk\",\n                    \"homepage\": \"https://github.com/GrahamCampbell\"\n                },\n                {\n                    \"name\": \"Michael Dowling\",\n                    \"email\": \"mtdowling@gmail.com\",\n                    \"homepage\": \"https://github.com/mtdowling\"\n                },\n                {\n                    \"name\": \"George Mponos\",\n                    \"email\": \"gmponos@gmail.com\",\n                    \"homepage\": \"https://github.com/gmponos\"\n                },\n                {\n                    \"name\": \"Tobias Nyholm\",\n                    \"email\": \"tobias.nyholm@gmail.com\",\n                    \"homepage\": \"https://github.com/Nyholm\"\n                },\n                {\n                    \"name\": \"Márk Sági-Kazár\",\n                    \"email\": \"mark.sagikazar@gmail.com\",\n                    \"homepage\": \"https://github.com/sagikazarmark\"\n                },\n                {\n                    \"name\": \"Tobias Schultze\",\n                    \"email\": \"webmaster@tubo-world.de\",\n                    \"homepage\": \"https://github.com/Tobion\"\n                },\n                {\n                    \"name\": \"Márk Sági-Kazár\",\n                    \"email\": \"mark.sagikazar@gmail.com\",\n                    \"homepage\": \"https://sagikazarmark.hu\"\n                }\n            ],\n            \"description\": \"PSR-7 message implementation that also provides common utility methods\",\n            \"keywords\": [\n                \"http\",\n                \"message\",\n                \"psr-7\",\n                \"request\",\n                \"response\",\n                \"stream\",\n                \"uri\",\n                \"url\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/guzzle/psr7/issues\",\n                \"source\": \"https://github.com/guzzle/psr7/tree/2.7.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/GrahamCampbell\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://github.com/Nyholm\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/guzzlehttp/psr7\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-07-18T11:15:46+00:00\"\n        },\n        {\n            \"name\": \"guzzlehttp/uri-template\",\n            \"version\": \"v1.0.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/guzzle/uri-template.git\",\n                \"reference\": \"ecea8feef63bd4fef1f037ecb288386999ecc11c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/guzzle/uri-template/zipball/ecea8feef63bd4fef1f037ecb288386999ecc11c\",\n                \"reference\": \"ecea8feef63bd4fef1f037ecb288386999ecc11c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2.5 || ^8.0\",\n                \"symfony/polyfill-php80\": \"^1.24\"\n            },\n            \"require-dev\": {\n                \"bamarni/composer-bin-plugin\": \"^1.8.2\",\n                \"phpunit/phpunit\": \"^8.5.36 || ^9.6.15\",\n                \"uri-template/tests\": \"1.0.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"bamarni-bin\": {\n                    \"bin-links\": true,\n                    \"forward-command\": false\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"GuzzleHttp\\\\UriTemplate\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Graham Campbell\",\n                    \"email\": \"hello@gjcampbell.co.uk\",\n                    \"homepage\": \"https://github.com/GrahamCampbell\"\n                },\n                {\n                    \"name\": \"Michael Dowling\",\n                    \"email\": \"mtdowling@gmail.com\",\n                    \"homepage\": \"https://github.com/mtdowling\"\n                },\n                {\n                    \"name\": \"George Mponos\",\n                    \"email\": \"gmponos@gmail.com\",\n                    \"homepage\": \"https://github.com/gmponos\"\n                },\n                {\n                    \"name\": \"Tobias Nyholm\",\n                    \"email\": \"tobias.nyholm@gmail.com\",\n                    \"homepage\": \"https://github.com/Nyholm\"\n                }\n            ],\n            \"description\": \"A polyfill class for uri_template of PHP\",\n            \"keywords\": [\n                \"guzzlehttp\",\n                \"uri-template\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/guzzle/uri-template/issues\",\n                \"source\": \"https://github.com/guzzle/uri-template/tree/v1.0.3\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/GrahamCampbell\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://github.com/Nyholm\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/guzzlehttp/uri-template\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2023-12-03T19:50:20+00:00\"\n        },\n        {\n            \"name\": \"jackiedo/dotenv-editor\",\n            \"version\": \"dev-master\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/Bubka/Laravel-Dotenv-Editor.git\",\n                \"reference\": \"e8743b310e3f1d48c0461eab7546c2433604513f\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/Bubka/Laravel-Dotenv-Editor/zipball/e8743b310e3f1d48c0461eab7546c2433604513f\",\n                \"reference\": \"e8743b310e3f1d48c0461eab7546c2433604513f\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"illuminate/console\": \"^11.0|^10.0|^9.0|^8.0|^7.0|^6.0|^5.8\",\n                \"illuminate/contracts\": \"^11.0|^10.0|^9.0|^8.0|^7.0|^6.0|^5.8\",\n                \"illuminate/support\": \"^11.0|^10.0|^9.0|^8.0|^7.0|^6.0|^5.8\",\n                \"jackiedo/path-helper\": \"^1.0\"\n            },\n            \"default-branch\": true,\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.x-dev\"\n                },\n                \"laravel\": {\n                    \"providers\": [\n                        \"Jackiedo\\\\DotenvEditor\\\\DotenvEditorServiceProvider\"\n                    ],\n                    \"aliases\": {\n                        \"DotenvEditor\": \"Jackiedo\\\\DotenvEditor\\\\Facades\\\\DotenvEditor\"\n                    }\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Jackiedo\\\\DotenvEditor\\\\\": \"src\"\n                }\n            },\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Bubka\"\n                }\n            ],\n            \"description\": \"The .env file editor tool for Laravel 5.8+\",\n            \"keywords\": [\n                \"dotenv\",\n                \"dotenv-editor\",\n                \"laravel\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/Bubka/Laravel-Dotenv-Editor/tree/master\"\n            },\n            \"time\": \"2024-06-24T07:25:23+00:00\"\n        },\n        {\n            \"name\": \"jackiedo/path-helper\",\n            \"version\": \"v1.0.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/JackieDo/Path-Helper.git\",\n                \"reference\": \"43179cfa17d01f94f4889f286430c2cec1071fb2\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/JackieDo/Path-Helper/zipball/43179cfa17d01f94f4889f286430c2cec1071fb2\",\n                \"reference\": \"43179cfa17d01f94f4889f286430c2cec1071fb2\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.4.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"src/helpers.php\"\n                ],\n                \"psr-4\": {\n                    \"Jackiedo\\\\PathHelper\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jackie Do\",\n                    \"email\": \"anhvudo@gmail.com\"\n                }\n            ],\n            \"description\": \"Helper class for working with local paths in PHP\",\n            \"homepage\": \"https://github.com/JackieDo/path-helper\",\n            \"keywords\": [\n                \"helper\",\n                \"helpers\",\n                \"library\",\n                \"path\",\n                \"paths\",\n                \"php\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/JackieDo/Path-Helper/issues\",\n                \"source\": \"https://github.com/JackieDo/Path-Helper/tree/v1.0.0\"\n            },\n            \"time\": \"2022-03-07T20:28:08+00:00\"\n        },\n        {\n            \"name\": \"jaybizzle/crawler-detect\",\n            \"version\": \"v1.2.121\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/JayBizzle/Crawler-Detect.git\",\n                \"reference\": \"40ecda6322d4163fe2c6e1dd47c574f580b8487f\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/JayBizzle/Crawler-Detect/zipball/40ecda6322d4163fe2c6e1dd47c574f580b8487f\",\n                \"reference\": \"40ecda6322d4163fe2c6e1dd47c574f580b8487f\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^4.8|^5.5|^6.5|^9.4\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Jaybizzle\\\\CrawlerDetect\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Mark Beech\",\n                    \"email\": \"m@rkbee.ch\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"CrawlerDetect is a PHP class for detecting bots/crawlers/spiders via the user agent\",\n            \"homepage\": \"https://github.com/JayBizzle/Crawler-Detect/\",\n            \"keywords\": [\n                \"crawler\",\n                \"crawler detect\",\n                \"crawler detector\",\n                \"crawlerdetect\",\n                \"php crawler detect\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/JayBizzle/Crawler-Detect/issues\",\n                \"source\": \"https://github.com/JayBizzle/Crawler-Detect/tree/v1.2.121\"\n            },\n            \"time\": \"2024-10-20T21:42:39+00:00\"\n        },\n        {\n            \"name\": \"jenssegers/agent\",\n            \"version\": \"v2.6.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/jenssegers/agent.git\",\n                \"reference\": \"daa11c43729510b3700bc34d414664966b03bffe\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/jenssegers/agent/zipball/daa11c43729510b3700bc34d414664966b03bffe\",\n                \"reference\": \"daa11c43729510b3700bc34d414664966b03bffe\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"jaybizzle/crawler-detect\": \"^1.2\",\n                \"mobiledetect/mobiledetectlib\": \"^2.7.6\",\n                \"php\": \">=5.6\"\n            },\n            \"require-dev\": {\n                \"php-coveralls/php-coveralls\": \"^2.1\",\n                \"phpunit/phpunit\": \"^5.0|^6.0|^7.0\"\n            },\n            \"suggest\": {\n                \"illuminate/support\": \"Required for laravel service providers\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                },\n                \"laravel\": {\n                    \"providers\": [\n                        \"Jenssegers\\\\Agent\\\\AgentServiceProvider\"\n                    ],\n                    \"aliases\": {\n                        \"Agent\": \"Jenssegers\\\\Agent\\\\Facades\\\\Agent\"\n                    }\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Jenssegers\\\\Agent\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jens Segers\",\n                    \"homepage\": \"https://jenssegers.com\"\n                }\n            ],\n            \"description\": \"Desktop/mobile user agent parser with support for Laravel, based on Mobiledetect\",\n            \"homepage\": \"https://github.com/jenssegers/agent\",\n            \"keywords\": [\n                \"Agent\",\n                \"browser\",\n                \"desktop\",\n                \"laravel\",\n                \"mobile\",\n                \"platform\",\n                \"user agent\",\n                \"useragent\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/jenssegers/agent/issues\",\n                \"source\": \"https://github.com/jenssegers/agent/tree/v2.6.4\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/jenssegers\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/jenssegers/agent\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2020-06-13T08:05:20+00:00\"\n        },\n        {\n            \"name\": \"khanamiryan/qrcode-detector-decoder\",\n            \"version\": \"2.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/khanamiryan/php-qrcode-detector-decoder.git\",\n                \"reference\": \"8d53cbecaa32f1e56a3be58bb3055ac31774ecd0\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/khanamiryan/php-qrcode-detector-decoder/zipball/8d53cbecaa32f1e56a3be58bb3055ac31774ecd0\",\n                \"reference\": \"8d53cbecaa32f1e56a3be58bb3055ac31774ecd0\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.1\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^7.5 | ^8.0 | ^9.0\",\n                \"rector/rector\": \"^0.13.6\",\n                \"symplify/easy-coding-standard\": \"^11.0\",\n                \"vimeo/psalm\": \"^4.24\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"lib/Common/customFunctions.php\"\n                ],\n                \"psr-4\": {\n                    \"Zxing\\\\\": \"lib/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\",\n                \"Apache-2.0\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Ashot Khanamiryan\",\n                    \"email\": \"a.khanamiryan@gmail.com\",\n                    \"homepage\": \"https://github.com/khanamiryan\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"QR code decoder / reader\",\n            \"homepage\": \"https://github.com/khanamiryan/php-qrcode-detector-decoder/\",\n            \"keywords\": [\n                \"barcode\",\n                \"qr\",\n                \"zxing\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/khanamiryan/php-qrcode-detector-decoder/issues\",\n                \"source\": \"https://github.com/khanamiryan/php-qrcode-detector-decoder/tree/2.0.2\"\n            },\n            \"time\": \"2022-11-17T10:54:53+00:00\"\n        },\n        {\n            \"name\": \"laragear/meta-model\",\n            \"version\": \"v1.1.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/Laragear/MetaModel.git\",\n                \"reference\": \"86aa8bbd0e1b9d03467a0257f0cd5815b6836a34\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/Laragear/MetaModel/zipball/86aa8bbd0e1b9d03467a0257f0cd5815b6836a34\",\n                \"reference\": \"86aa8bbd0e1b9d03467a0257f0cd5815b6836a34\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"illuminate/database\": \"10.*|11.*\",\n                \"php\": \"^8.1\"\n            },\n            \"require-dev\": {\n                \"mockery/mockery\": \"^1.6\",\n                \"phpunit/phpunit\": \"^10.5|11.*\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Laragear\\\\MetaModel\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Italo Israel Baeza Cabrera\",\n                    \"email\": \"DarkGhostHunter@Gmail.com\",\n                    \"homepage\": \"https://github.com/sponsors/DarkGhostHunter\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"Let other developers customize your package model and migrations\",\n            \"keywords\": [\n                \"database\",\n                \"eloquent\",\n                \"laravel\",\n                \"model\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/Laragear/MetaModel/issues\",\n                \"source\": \"https://github.com/Laragear/MetaModel\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sponsors/DarkGhostHunter\",\n                    \"type\": \"Github Sponsorship\"\n                },\n                {\n                    \"url\": \"https://paypal.me/darkghosthunter\",\n                    \"type\": \"Paypal\"\n                }\n            ],\n            \"time\": \"2024-03-15T23:27:56+00:00\"\n        },\n        {\n            \"name\": \"laragear/webauthn\",\n            \"version\": \"v2.0.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/Laragear/WebAuthn.git\",\n                \"reference\": \"15b29db0edb0a12c0fa45c404e57b0d5f1789465\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/Laragear/WebAuthn/zipball/15b29db0edb0a12c0fa45c404e57b0d5f1789465\",\n                \"reference\": \"15b29db0edb0a12c0fa45c404e57b0d5f1789465\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-json\": \"*\",\n                \"ext-openssl\": \"*\",\n                \"illuminate/auth\": \"10.*|11.*\",\n                \"illuminate/config\": \"10.*|11.*\",\n                \"illuminate/database\": \"10.*|11.*\",\n                \"illuminate/encryption\": \"10.*|11.*\",\n                \"illuminate/http\": \"10.*|11.*\",\n                \"illuminate/session\": \"10.*|11.*\",\n                \"illuminate/support\": \"10.*|11.*\",\n                \"laragear/meta-model\": \"^1.1\",\n                \"php\": \"^8.1\"\n            },\n            \"require-dev\": {\n                \"ext-sodium\": \"*\",\n                \"orchestra/testbench\": \"8.*|9.*\"\n            },\n            \"suggest\": {\n                \"paragonie/sodium_compat\": \"To enable EdDSA 25519 keys from authenticators, if `ext-sodium` is unavailable.\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"laravel\": {\n                    \"providers\": [\n                        \"Laragear\\\\WebAuthn\\\\WebAuthnServiceProvider\"\n                    ]\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Laragear\\\\WebAuthn\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Lukas Buchs\",\n                    \"role\": \"Original developer\"\n                },\n                {\n                    \"name\": \"Italo Israel Baeza Cabrera\",\n                    \"email\": \"DarkGhostHunter@Gmail.com\",\n                    \"homepage\": \"https://github.com/sponsors/DarkGhostHunter\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"Authenticate users with Passkeys: fingerprints, patterns and biometric data.\",\n            \"homepage\": \"https://github.com/laragear/webauthn\",\n            \"keywords\": [\n                \"Authentication\",\n                \"faceid\",\n                \"laravel\",\n                \"passkeys\",\n                \"touchid\",\n                \"webauthn\",\n                \"windows hello\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/Laragear/WebAuthn/issues\",\n                \"source\": \"https://github.com/Laragear/WebAuthn\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sponsors/DarkGhostHunter\",\n                    \"type\": \"Github Sponsorship\"\n                },\n                {\n                    \"url\": \"https://paypal.me/darkghosthunter\",\n                    \"type\": \"Paypal\"\n                }\n            ],\n            \"time\": \"2024-03-18T22:38:29+00:00\"\n        },\n        {\n            \"name\": \"laravel/framework\",\n            \"version\": \"v11.31.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/laravel/framework.git\",\n                \"reference\": \"365090ed2c68244e3141cdb5e247cdf3dfba2c40\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/laravel/framework/zipball/365090ed2c68244e3141cdb5e247cdf3dfba2c40\",\n                \"reference\": \"365090ed2c68244e3141cdb5e247cdf3dfba2c40\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"brick/math\": \"^0.9.3|^0.10.2|^0.11|^0.12\",\n                \"composer-runtime-api\": \"^2.2\",\n                \"doctrine/inflector\": \"^2.0.5\",\n                \"dragonmantank/cron-expression\": \"^3.3.2\",\n                \"egulias/email-validator\": \"^3.2.1|^4.0\",\n                \"ext-ctype\": \"*\",\n                \"ext-filter\": \"*\",\n                \"ext-hash\": \"*\",\n                \"ext-mbstring\": \"*\",\n                \"ext-openssl\": \"*\",\n                \"ext-session\": \"*\",\n                \"ext-tokenizer\": \"*\",\n                \"fruitcake/php-cors\": \"^1.3\",\n                \"guzzlehttp/guzzle\": \"^7.8\",\n                \"guzzlehttp/uri-template\": \"^1.0\",\n                \"laravel/prompts\": \"^0.1.18|^0.2.0|^0.3.0\",\n                \"laravel/serializable-closure\": \"^1.3\",\n                \"league/commonmark\": \"^2.2.1\",\n                \"league/flysystem\": \"^3.8.0\",\n                \"monolog/monolog\": \"^3.0\",\n                \"nesbot/carbon\": \"^2.72.2|^3.0\",\n                \"nunomaduro/termwind\": \"^2.0\",\n                \"php\": \"^8.2\",\n                \"psr/container\": \"^1.1.1|^2.0.1\",\n                \"psr/log\": \"^1.0|^2.0|^3.0\",\n                \"psr/simple-cache\": \"^1.0|^2.0|^3.0\",\n                \"ramsey/uuid\": \"^4.7\",\n                \"symfony/console\": \"^7.0\",\n                \"symfony/error-handler\": \"^7.0\",\n                \"symfony/finder\": \"^7.0\",\n                \"symfony/http-foundation\": \"^7.0\",\n                \"symfony/http-kernel\": \"^7.0\",\n                \"symfony/mailer\": \"^7.0\",\n                \"symfony/mime\": \"^7.0\",\n                \"symfony/polyfill-php83\": \"^1.28\",\n                \"symfony/process\": \"^7.0\",\n                \"symfony/routing\": \"^7.0\",\n                \"symfony/uid\": \"^7.0\",\n                \"symfony/var-dumper\": \"^7.0\",\n                \"tijsverkoyen/css-to-inline-styles\": \"^2.2.5\",\n                \"vlucas/phpdotenv\": \"^5.4.1\",\n                \"voku/portable-ascii\": \"^2.0\"\n            },\n            \"conflict\": {\n                \"mockery/mockery\": \"1.6.8\",\n                \"tightenco/collect\": \"<5.5.33\"\n            },\n            \"provide\": {\n                \"psr/container-implementation\": \"1.1|2.0\",\n                \"psr/log-implementation\": \"1.0|2.0|3.0\",\n                \"psr/simple-cache-implementation\": \"1.0|2.0|3.0\"\n            },\n            \"replace\": {\n                \"illuminate/auth\": \"self.version\",\n                \"illuminate/broadcasting\": \"self.version\",\n                \"illuminate/bus\": \"self.version\",\n                \"illuminate/cache\": \"self.version\",\n                \"illuminate/collections\": \"self.version\",\n                \"illuminate/concurrency\": \"self.version\",\n                \"illuminate/conditionable\": \"self.version\",\n                \"illuminate/config\": \"self.version\",\n                \"illuminate/console\": \"self.version\",\n                \"illuminate/container\": \"self.version\",\n                \"illuminate/contracts\": \"self.version\",\n                \"illuminate/cookie\": \"self.version\",\n                \"illuminate/database\": \"self.version\",\n                \"illuminate/encryption\": \"self.version\",\n                \"illuminate/events\": \"self.version\",\n                \"illuminate/filesystem\": \"self.version\",\n                \"illuminate/hashing\": \"self.version\",\n                \"illuminate/http\": \"self.version\",\n                \"illuminate/log\": \"self.version\",\n                \"illuminate/macroable\": \"self.version\",\n                \"illuminate/mail\": \"self.version\",\n                \"illuminate/notifications\": \"self.version\",\n                \"illuminate/pagination\": \"self.version\",\n                \"illuminate/pipeline\": \"self.version\",\n                \"illuminate/process\": \"self.version\",\n                \"illuminate/queue\": \"self.version\",\n                \"illuminate/redis\": \"self.version\",\n                \"illuminate/routing\": \"self.version\",\n                \"illuminate/session\": \"self.version\",\n                \"illuminate/support\": \"self.version\",\n                \"illuminate/testing\": \"self.version\",\n                \"illuminate/translation\": \"self.version\",\n                \"illuminate/validation\": \"self.version\",\n                \"illuminate/view\": \"self.version\",\n                \"spatie/once\": \"*\"\n            },\n            \"require-dev\": {\n                \"ably/ably-php\": \"^1.0\",\n                \"aws/aws-sdk-php\": \"^3.235.5\",\n                \"ext-gmp\": \"*\",\n                \"fakerphp/faker\": \"^1.23\",\n                \"league/flysystem-aws-s3-v3\": \"^3.0\",\n                \"league/flysystem-ftp\": \"^3.0\",\n                \"league/flysystem-path-prefixing\": \"^3.3\",\n                \"league/flysystem-read-only\": \"^3.3\",\n                \"league/flysystem-sftp-v3\": \"^3.0\",\n                \"mockery/mockery\": \"^1.6\",\n                \"nyholm/psr7\": \"^1.2\",\n                \"orchestra/testbench-core\": \"^9.5\",\n                \"pda/pheanstalk\": \"^5.0\",\n                \"phpstan/phpstan\": \"^1.11.5\",\n                \"phpunit/phpunit\": \"^10.5|^11.0\",\n                \"predis/predis\": \"^2.0.2\",\n                \"resend/resend-php\": \"^0.10.0\",\n                \"symfony/cache\": \"^7.0\",\n                \"symfony/http-client\": \"^7.0\",\n                \"symfony/psr-http-message-bridge\": \"^7.0\"\n            },\n            \"suggest\": {\n                \"ably/ably-php\": \"Required to use the Ably broadcast driver (^1.0).\",\n                \"aws/aws-sdk-php\": \"Required to use the SQS queue driver, DynamoDb failed job storage, and SES mail driver (^3.235.5).\",\n                \"brianium/paratest\": \"Required to run tests in parallel (^7.0|^8.0).\",\n                \"ext-apcu\": \"Required to use the APC cache driver.\",\n                \"ext-fileinfo\": \"Required to use the Filesystem class.\",\n                \"ext-ftp\": \"Required to use the Flysystem FTP driver.\",\n                \"ext-gd\": \"Required to use Illuminate\\\\Http\\\\Testing\\\\FileFactory::image().\",\n                \"ext-memcached\": \"Required to use the memcache cache driver.\",\n                \"ext-pcntl\": \"Required to use all features of the queue worker and console signal trapping.\",\n                \"ext-pdo\": \"Required to use all database features.\",\n                \"ext-posix\": \"Required to use all features of the queue worker.\",\n                \"ext-redis\": \"Required to use the Redis cache and queue drivers (^4.0|^5.0|^6.0).\",\n                \"fakerphp/faker\": \"Required to use the eloquent factory builder (^1.9.1).\",\n                \"filp/whoops\": \"Required for friendly error pages in development (^2.14.3).\",\n                \"laravel/tinker\": \"Required to use the tinker console command (^2.0).\",\n                \"league/flysystem-aws-s3-v3\": \"Required to use the Flysystem S3 driver (^3.0).\",\n                \"league/flysystem-ftp\": \"Required to use the Flysystem FTP driver (^3.0).\",\n                \"league/flysystem-path-prefixing\": \"Required to use the scoped driver (^3.3).\",\n                \"league/flysystem-read-only\": \"Required to use read-only disks (^3.3)\",\n                \"league/flysystem-sftp-v3\": \"Required to use the Flysystem SFTP driver (^3.0).\",\n                \"mockery/mockery\": \"Required to use mocking (^1.6).\",\n                \"nyholm/psr7\": \"Required to use PSR-7 bridging features (^1.2).\",\n                \"pda/pheanstalk\": \"Required to use the beanstalk queue driver (^5.0).\",\n                \"phpunit/phpunit\": \"Required to use assertions and run tests (^10.5|^11.0).\",\n                \"predis/predis\": \"Required to use the predis connector (^2.0.2).\",\n                \"psr/http-message\": \"Required to allow Storage::put to accept a StreamInterface (^1.0).\",\n                \"pusher/pusher-php-server\": \"Required to use the Pusher broadcast driver (^6.0|^7.0).\",\n                \"resend/resend-php\": \"Required to enable support for the Resend mail transport (^0.10.0).\",\n                \"symfony/cache\": \"Required to PSR-6 cache bridge (^7.0).\",\n                \"symfony/filesystem\": \"Required to enable support for relative symbolic links (^7.0).\",\n                \"symfony/http-client\": \"Required to enable support for the Symfony API mail transports (^7.0).\",\n                \"symfony/mailgun-mailer\": \"Required to enable support for the Mailgun mail transport (^7.0).\",\n                \"symfony/postmark-mailer\": \"Required to enable support for the Postmark mail transport (^7.0).\",\n                \"symfony/psr-http-message-bridge\": \"Required to use PSR-7 bridging features (^7.0).\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"11.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"src/Illuminate/Collections/helpers.php\",\n                    \"src/Illuminate/Events/functions.php\",\n                    \"src/Illuminate/Filesystem/functions.php\",\n                    \"src/Illuminate/Foundation/helpers.php\",\n                    \"src/Illuminate/Log/functions.php\",\n                    \"src/Illuminate/Support/functions.php\",\n                    \"src/Illuminate/Support/helpers.php\"\n                ],\n                \"psr-4\": {\n                    \"Illuminate\\\\\": \"src/Illuminate/\",\n                    \"Illuminate\\\\Support\\\\\": [\n                        \"src/Illuminate/Macroable/\",\n                        \"src/Illuminate/Collections/\",\n                        \"src/Illuminate/Conditionable/\"\n                    ]\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Taylor Otwell\",\n                    \"email\": \"taylor@laravel.com\"\n                }\n            ],\n            \"description\": \"The Laravel Framework.\",\n            \"homepage\": \"https://laravel.com\",\n            \"keywords\": [\n                \"framework\",\n                \"laravel\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/laravel/framework/issues\",\n                \"source\": \"https://github.com/laravel/framework\"\n            },\n            \"time\": \"2024-11-12T15:36:15+00:00\"\n        },\n        {\n            \"name\": \"laravel/passport\",\n            \"version\": \"v12.3.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/laravel/passport.git\",\n                \"reference\": \"0d95ca9cc9c80bdf64d04dcf04542720e3d5d55c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/laravel/passport/zipball/0d95ca9cc9c80bdf64d04dcf04542720e3d5d55c\",\n                \"reference\": \"0d95ca9cc9c80bdf64d04dcf04542720e3d5d55c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-json\": \"*\",\n                \"firebase/php-jwt\": \"^6.4\",\n                \"illuminate/auth\": \"^9.21|^10.0|^11.0\",\n                \"illuminate/console\": \"^9.21|^10.0|^11.0\",\n                \"illuminate/container\": \"^9.21|^10.0|^11.0\",\n                \"illuminate/contracts\": \"^9.21|^10.0|^11.0\",\n                \"illuminate/cookie\": \"^9.21|^10.0|^11.0\",\n                \"illuminate/database\": \"^9.21|^10.0|^11.0\",\n                \"illuminate/encryption\": \"^9.21|^10.0|^11.0\",\n                \"illuminate/http\": \"^9.21|^10.0|^11.0\",\n                \"illuminate/support\": \"^9.21|^10.0|^11.0\",\n                \"lcobucci/jwt\": \"^4.3|^5.0\",\n                \"league/oauth2-server\": \"^8.5.3\",\n                \"nyholm/psr7\": \"^1.5\",\n                \"php\": \"^8.0\",\n                \"phpseclib/phpseclib\": \"^2.0|^3.0\",\n                \"symfony/console\": \"^6.0|^7.0\",\n                \"symfony/psr-http-message-bridge\": \"^2.1|^6.0|^7.0\"\n            },\n            \"require-dev\": {\n                \"mockery/mockery\": \"^1.0\",\n                \"orchestra/testbench\": \"^7.35|^8.14|^9.0\",\n                \"phpstan/phpstan\": \"^1.10\",\n                \"phpunit/phpunit\": \"^9.3|^10.5\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"laravel\": {\n                    \"providers\": [\n                        \"Laravel\\\\Passport\\\\PassportServiceProvider\"\n                    ]\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Laravel\\\\Passport\\\\\": \"src/\",\n                    \"Laravel\\\\Passport\\\\Database\\\\Factories\\\\\": \"database/factories/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Taylor Otwell\",\n                    \"email\": \"taylor@laravel.com\"\n                }\n            ],\n            \"description\": \"Laravel Passport provides OAuth2 server support to Laravel.\",\n            \"keywords\": [\n                \"laravel\",\n                \"oauth\",\n                \"passport\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/laravel/passport/issues\",\n                \"source\": \"https://github.com/laravel/passport\"\n            },\n            \"time\": \"2024-11-11T20:15:28+00:00\"\n        },\n        {\n            \"name\": \"laravel/prompts\",\n            \"version\": \"v0.3.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/laravel/prompts.git\",\n                \"reference\": \"0e0535747c6b8d6d10adca8b68293cf4517abb0f\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/laravel/prompts/zipball/0e0535747c6b8d6d10adca8b68293cf4517abb0f\",\n                \"reference\": \"0e0535747c6b8d6d10adca8b68293cf4517abb0f\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"composer-runtime-api\": \"^2.2\",\n                \"ext-mbstring\": \"*\",\n                \"php\": \"^8.1\",\n                \"symfony/console\": \"^6.2|^7.0\"\n            },\n            \"conflict\": {\n                \"illuminate/console\": \">=10.17.0 <10.25.0\",\n                \"laravel/framework\": \">=10.17.0 <10.25.0\"\n            },\n            \"require-dev\": {\n                \"illuminate/collections\": \"^10.0|^11.0\",\n                \"mockery/mockery\": \"^1.5\",\n                \"pestphp/pest\": \"^2.3|^3.4\",\n                \"phpstan/phpstan\": \"^1.11\",\n                \"phpstan/phpstan-mockery\": \"^1.1\"\n            },\n            \"suggest\": {\n                \"ext-pcntl\": \"Required for the spinner to be animated.\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"0.3.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"src/helpers.php\"\n                ],\n                \"psr-4\": {\n                    \"Laravel\\\\Prompts\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"description\": \"Add beautiful and user-friendly forms to your command-line applications.\",\n            \"support\": {\n                \"issues\": \"https://github.com/laravel/prompts/issues\",\n                \"source\": \"https://github.com/laravel/prompts/tree/v0.3.2\"\n            },\n            \"time\": \"2024-11-12T14:59:47+00:00\"\n        },\n        {\n            \"name\": \"laravel/serializable-closure\",\n            \"version\": \"v1.3.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/laravel/serializable-closure.git\",\n                \"reference\": \"f865a58ea3a0107c336b7045104c75243fa59d96\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/laravel/serializable-closure/zipball/f865a58ea3a0107c336b7045104c75243fa59d96\",\n                \"reference\": \"f865a58ea3a0107c336b7045104c75243fa59d96\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.3|^8.0\"\n            },\n            \"require-dev\": {\n                \"illuminate/support\": \"^8.0|^9.0|^10.0|^11.0\",\n                \"nesbot/carbon\": \"^2.61|^3.0\",\n                \"pestphp/pest\": \"^1.21.3\",\n                \"phpstan/phpstan\": \"^1.8.2\",\n                \"symfony/var-dumper\": \"^5.4.11|^6.2.0|^7.0.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Laravel\\\\SerializableClosure\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Taylor Otwell\",\n                    \"email\": \"taylor@laravel.com\"\n                },\n                {\n                    \"name\": \"Nuno Maduro\",\n                    \"email\": \"nuno@laravel.com\"\n                }\n            ],\n            \"description\": \"Laravel Serializable Closure provides an easy and secure way to serialize closures in PHP.\",\n            \"keywords\": [\n                \"closure\",\n                \"laravel\",\n                \"serializable\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/laravel/serializable-closure/issues\",\n                \"source\": \"https://github.com/laravel/serializable-closure\"\n            },\n            \"time\": \"2024-11-11T17:06:04+00:00\"\n        },\n        {\n            \"name\": \"laravel/socialite\",\n            \"version\": \"v5.16.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/laravel/socialite.git\",\n                \"reference\": \"40a2dc98c53d9dc6d55eadb0d490d3d72b73f1bf\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/laravel/socialite/zipball/40a2dc98c53d9dc6d55eadb0d490d3d72b73f1bf\",\n                \"reference\": \"40a2dc98c53d9dc6d55eadb0d490d3d72b73f1bf\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-json\": \"*\",\n                \"firebase/php-jwt\": \"^6.4\",\n                \"guzzlehttp/guzzle\": \"^6.0|^7.0\",\n                \"illuminate/contracts\": \"^6.0|^7.0|^8.0|^9.0|^10.0|^11.0\",\n                \"illuminate/http\": \"^6.0|^7.0|^8.0|^9.0|^10.0|^11.0\",\n                \"illuminate/support\": \"^6.0|^7.0|^8.0|^9.0|^10.0|^11.0\",\n                \"league/oauth1-client\": \"^1.10.1\",\n                \"php\": \"^7.2|^8.0\",\n                \"phpseclib/phpseclib\": \"^3.0\"\n            },\n            \"require-dev\": {\n                \"mockery/mockery\": \"^1.0\",\n                \"orchestra/testbench\": \"^4.0|^5.0|^6.0|^7.0|^8.0|^9.0\",\n                \"phpstan/phpstan\": \"^1.10\",\n                \"phpunit/phpunit\": \"^8.0|^9.3|^10.4\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"5.x-dev\"\n                },\n                \"laravel\": {\n                    \"providers\": [\n                        \"Laravel\\\\Socialite\\\\SocialiteServiceProvider\"\n                    ],\n                    \"aliases\": {\n                        \"Socialite\": \"Laravel\\\\Socialite\\\\Facades\\\\Socialite\"\n                    }\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Laravel\\\\Socialite\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Taylor Otwell\",\n                    \"email\": \"taylor@laravel.com\"\n                }\n            ],\n            \"description\": \"Laravel wrapper around OAuth 1 & OAuth 2 libraries.\",\n            \"homepage\": \"https://laravel.com\",\n            \"keywords\": [\n                \"laravel\",\n                \"oauth\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/laravel/socialite/issues\",\n                \"source\": \"https://github.com/laravel/socialite\"\n            },\n            \"time\": \"2024-09-03T09:46:57+00:00\"\n        },\n        {\n            \"name\": \"laravel/tinker\",\n            \"version\": \"v2.10.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/laravel/tinker.git\",\n                \"reference\": \"ba4d51eb56de7711b3a37d63aa0643e99a339ae5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/laravel/tinker/zipball/ba4d51eb56de7711b3a37d63aa0643e99a339ae5\",\n                \"reference\": \"ba4d51eb56de7711b3a37d63aa0643e99a339ae5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"illuminate/console\": \"^6.0|^7.0|^8.0|^9.0|^10.0|^11.0\",\n                \"illuminate/contracts\": \"^6.0|^7.0|^8.0|^9.0|^10.0|^11.0\",\n                \"illuminate/support\": \"^6.0|^7.0|^8.0|^9.0|^10.0|^11.0\",\n                \"php\": \"^7.2.5|^8.0\",\n                \"psy/psysh\": \"^0.11.1|^0.12.0\",\n                \"symfony/var-dumper\": \"^4.3.4|^5.0|^6.0|^7.0\"\n            },\n            \"require-dev\": {\n                \"mockery/mockery\": \"~1.3.3|^1.4.2\",\n                \"phpstan/phpstan\": \"^1.10\",\n                \"phpunit/phpunit\": \"^8.5.8|^9.3.3\"\n            },\n            \"suggest\": {\n                \"illuminate/database\": \"The Illuminate Database package (^6.0|^7.0|^8.0|^9.0|^10.0|^11.0).\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"laravel\": {\n                    \"providers\": [\n                        \"Laravel\\\\Tinker\\\\TinkerServiceProvider\"\n                    ]\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Laravel\\\\Tinker\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Taylor Otwell\",\n                    \"email\": \"taylor@laravel.com\"\n                }\n            ],\n            \"description\": \"Powerful REPL for the Laravel framework.\",\n            \"keywords\": [\n                \"REPL\",\n                \"Tinker\",\n                \"laravel\",\n                \"psysh\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/laravel/tinker/issues\",\n                \"source\": \"https://github.com/laravel/tinker/tree/v2.10.0\"\n            },\n            \"time\": \"2024-09-23T13:32:56+00:00\"\n        },\n        {\n            \"name\": \"laravel/ui\",\n            \"version\": \"v4.5.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/laravel/ui.git\",\n                \"reference\": \"c75396f63268c95b053c8e4814eb70e0875e9628\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/laravel/ui/zipball/c75396f63268c95b053c8e4814eb70e0875e9628\",\n                \"reference\": \"c75396f63268c95b053c8e4814eb70e0875e9628\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"illuminate/console\": \"^9.21|^10.0|^11.0\",\n                \"illuminate/filesystem\": \"^9.21|^10.0|^11.0\",\n                \"illuminate/support\": \"^9.21|^10.0|^11.0\",\n                \"illuminate/validation\": \"^9.21|^10.0|^11.0\",\n                \"php\": \"^8.0\",\n                \"symfony/console\": \"^6.0|^7.0\"\n            },\n            \"require-dev\": {\n                \"orchestra/testbench\": \"^7.35|^8.15|^9.0\",\n                \"phpunit/phpunit\": \"^9.3|^10.4|^11.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"4.x-dev\"\n                },\n                \"laravel\": {\n                    \"providers\": [\n                        \"Laravel\\\\Ui\\\\UiServiceProvider\"\n                    ]\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Laravel\\\\Ui\\\\\": \"src/\",\n                    \"Illuminate\\\\Foundation\\\\Auth\\\\\": \"auth-backend/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Taylor Otwell\",\n                    \"email\": \"taylor@laravel.com\"\n                }\n            ],\n            \"description\": \"Laravel UI utilities and presets.\",\n            \"keywords\": [\n                \"laravel\",\n                \"ui\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/laravel/ui/tree/v4.5.2\"\n            },\n            \"time\": \"2024-05-08T18:07:10+00:00\"\n        },\n        {\n            \"name\": \"lcobucci/clock\",\n            \"version\": \"3.3.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/lcobucci/clock.git\",\n                \"reference\": \"db3713a61addfffd615b79bf0bc22f0ccc61b86b\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/lcobucci/clock/zipball/db3713a61addfffd615b79bf0bc22f0ccc61b86b\",\n                \"reference\": \"db3713a61addfffd615b79bf0bc22f0ccc61b86b\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"~8.2.0 || ~8.3.0 || ~8.4.0\",\n                \"psr/clock\": \"^1.0\"\n            },\n            \"provide\": {\n                \"psr/clock-implementation\": \"1.0\"\n            },\n            \"require-dev\": {\n                \"infection/infection\": \"^0.29\",\n                \"lcobucci/coding-standard\": \"^11.1.0\",\n                \"phpstan/extension-installer\": \"^1.3.1\",\n                \"phpstan/phpstan\": \"^1.10.25\",\n                \"phpstan/phpstan-deprecation-rules\": \"^1.1.3\",\n                \"phpstan/phpstan-phpunit\": \"^1.3.13\",\n                \"phpstan/phpstan-strict-rules\": \"^1.5.1\",\n                \"phpunit/phpunit\": \"^11.3.6\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Lcobucci\\\\Clock\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Luís Cobucci\",\n                    \"email\": \"lcobucci@gmail.com\"\n                }\n            ],\n            \"description\": \"Yet another clock abstraction\",\n            \"support\": {\n                \"issues\": \"https://github.com/lcobucci/clock/issues\",\n                \"source\": \"https://github.com/lcobucci/clock/tree/3.3.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/lcobucci\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://www.patreon.com/lcobucci\",\n                    \"type\": \"patreon\"\n                }\n            ],\n            \"time\": \"2024-09-24T20:45:14+00:00\"\n        },\n        {\n            \"name\": \"lcobucci/jwt\",\n            \"version\": \"5.4.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/lcobucci/jwt.git\",\n                \"reference\": \"ea1ce71cbf9741e445a5914e2f67cdbb484ff712\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/lcobucci/jwt/zipball/ea1ce71cbf9741e445a5914e2f67cdbb484ff712\",\n                \"reference\": \"ea1ce71cbf9741e445a5914e2f67cdbb484ff712\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-openssl\": \"*\",\n                \"ext-sodium\": \"*\",\n                \"php\": \"~8.2.0 || ~8.3.0 || ~8.4.0\",\n                \"psr/clock\": \"^1.0\"\n            },\n            \"require-dev\": {\n                \"infection/infection\": \"^0.29\",\n                \"lcobucci/clock\": \"^3.2\",\n                \"lcobucci/coding-standard\": \"^11.0\",\n                \"phpbench/phpbench\": \"^1.2\",\n                \"phpstan/extension-installer\": \"^1.2\",\n                \"phpstan/phpstan\": \"^1.10.7\",\n                \"phpstan/phpstan-deprecation-rules\": \"^1.1.3\",\n                \"phpstan/phpstan-phpunit\": \"^1.3.10\",\n                \"phpstan/phpstan-strict-rules\": \"^1.5.0\",\n                \"phpunit/phpunit\": \"^11.1\"\n            },\n            \"suggest\": {\n                \"lcobucci/clock\": \">= 3.2\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Lcobucci\\\\JWT\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Luís Cobucci\",\n                    \"email\": \"lcobucci@gmail.com\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"A simple library to work with JSON Web Token and JSON Web Signature\",\n            \"keywords\": [\n                \"JWS\",\n                \"jwt\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/lcobucci/jwt/issues\",\n                \"source\": \"https://github.com/lcobucci/jwt/tree/5.4.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/lcobucci\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://www.patreon.com/lcobucci\",\n                    \"type\": \"patreon\"\n                }\n            ],\n            \"time\": \"2024-11-07T12:54:35+00:00\"\n        },\n        {\n            \"name\": \"league/commonmark\",\n            \"version\": \"2.5.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/thephpleague/commonmark.git\",\n                \"reference\": \"b650144166dfa7703e62a22e493b853b58d874b0\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/thephpleague/commonmark/zipball/b650144166dfa7703e62a22e493b853b58d874b0\",\n                \"reference\": \"b650144166dfa7703e62a22e493b853b58d874b0\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-mbstring\": \"*\",\n                \"league/config\": \"^1.1.1\",\n                \"php\": \"^7.4 || ^8.0\",\n                \"psr/event-dispatcher\": \"^1.0\",\n                \"symfony/deprecation-contracts\": \"^2.1 || ^3.0\",\n                \"symfony/polyfill-php80\": \"^1.16\"\n            },\n            \"require-dev\": {\n                \"cebe/markdown\": \"^1.0\",\n                \"commonmark/cmark\": \"0.31.1\",\n                \"commonmark/commonmark.js\": \"0.31.1\",\n                \"composer/package-versions-deprecated\": \"^1.8\",\n                \"embed/embed\": \"^4.4\",\n                \"erusev/parsedown\": \"^1.0\",\n                \"ext-json\": \"*\",\n                \"github/gfm\": \"0.29.0\",\n                \"michelf/php-markdown\": \"^1.4 || ^2.0\",\n                \"nyholm/psr7\": \"^1.5\",\n                \"phpstan/phpstan\": \"^1.8.2\",\n                \"phpunit/phpunit\": \"^9.5.21 || ^10.5.9 || ^11.0.0\",\n                \"scrutinizer/ocular\": \"^1.8.1\",\n                \"symfony/finder\": \"^5.3 | ^6.0 || ^7.0\",\n                \"symfony/yaml\": \"^2.3 | ^3.0 | ^4.0 | ^5.0 | ^6.0 || ^7.0\",\n                \"unleashedtech/php-coding-standard\": \"^3.1.1\",\n                \"vimeo/psalm\": \"^4.24.0 || ^5.0.0\"\n            },\n            \"suggest\": {\n                \"symfony/yaml\": \"v2.3+ required if using the Front Matter extension\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"2.6-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"League\\\\CommonMark\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Colin O'Dell\",\n                    \"email\": \"colinodell@gmail.com\",\n                    \"homepage\": \"https://www.colinodell.com\",\n                    \"role\": \"Lead Developer\"\n                }\n            ],\n            \"description\": \"Highly-extensible PHP Markdown parser which fully supports the CommonMark spec and GitHub-Flavored Markdown (GFM)\",\n            \"homepage\": \"https://commonmark.thephpleague.com\",\n            \"keywords\": [\n                \"commonmark\",\n                \"flavored\",\n                \"gfm\",\n                \"github\",\n                \"github-flavored\",\n                \"markdown\",\n                \"md\",\n                \"parser\"\n            ],\n            \"support\": {\n                \"docs\": \"https://commonmark.thephpleague.com/\",\n                \"forum\": \"https://github.com/thephpleague/commonmark/discussions\",\n                \"issues\": \"https://github.com/thephpleague/commonmark/issues\",\n                \"rss\": \"https://github.com/thephpleague/commonmark/releases.atom\",\n                \"source\": \"https://github.com/thephpleague/commonmark\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://www.colinodell.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://www.paypal.me/colinpodell/10.00\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/colinodell\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/league/commonmark\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-08-16T11:46:16+00:00\"\n        },\n        {\n            \"name\": \"league/config\",\n            \"version\": \"v1.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/thephpleague/config.git\",\n                \"reference\": \"754b3604fb2984c71f4af4a9cbe7b57f346ec1f3\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/thephpleague/config/zipball/754b3604fb2984c71f4af4a9cbe7b57f346ec1f3\",\n                \"reference\": \"754b3604fb2984c71f4af4a9cbe7b57f346ec1f3\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"dflydev/dot-access-data\": \"^3.0.1\",\n                \"nette/schema\": \"^1.2\",\n                \"php\": \"^7.4 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"phpstan/phpstan\": \"^1.8.2\",\n                \"phpunit/phpunit\": \"^9.5.5\",\n                \"scrutinizer/ocular\": \"^1.8.1\",\n                \"unleashedtech/php-coding-standard\": \"^3.1\",\n                \"vimeo/psalm\": \"^4.7.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"1.2-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"League\\\\Config\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Colin O'Dell\",\n                    \"email\": \"colinodell@gmail.com\",\n                    \"homepage\": \"https://www.colinodell.com\",\n                    \"role\": \"Lead Developer\"\n                }\n            ],\n            \"description\": \"Define configuration arrays with strict schemas and access values with dot notation\",\n            \"homepage\": \"https://config.thephpleague.com\",\n            \"keywords\": [\n                \"array\",\n                \"config\",\n                \"configuration\",\n                \"dot\",\n                \"dot-access\",\n                \"nested\",\n                \"schema\"\n            ],\n            \"support\": {\n                \"docs\": \"https://config.thephpleague.com/\",\n                \"issues\": \"https://github.com/thephpleague/config/issues\",\n                \"rss\": \"https://github.com/thephpleague/config/releases.atom\",\n                \"source\": \"https://github.com/thephpleague/config\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://www.colinodell.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://www.paypal.me/colinpodell/10.00\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/colinodell\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2022-12-11T20:36:23+00:00\"\n        },\n        {\n            \"name\": \"league/event\",\n            \"version\": \"2.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/thephpleague/event.git\",\n                \"reference\": \"d2cc124cf9a3fab2bb4ff963307f60361ce4d119\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/thephpleague/event/zipball/d2cc124cf9a3fab2bb4ff963307f60361ce4d119\",\n                \"reference\": \"d2cc124cf9a3fab2bb4ff963307f60361ce4d119\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.4.0\"\n            },\n            \"require-dev\": {\n                \"henrikbjorn/phpspec-code-coverage\": \"~1.0.1\",\n                \"phpspec/phpspec\": \"^2.2\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.2-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"League\\\\Event\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Frank de Jonge\",\n                    \"email\": \"info@frenky.net\"\n                }\n            ],\n            \"description\": \"Event package\",\n            \"keywords\": [\n                \"emitter\",\n                \"event\",\n                \"listener\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/thephpleague/event/issues\",\n                \"source\": \"https://github.com/thephpleague/event/tree/master\"\n            },\n            \"time\": \"2018-11-26T11:52:41+00:00\"\n        },\n        {\n            \"name\": \"league/flysystem\",\n            \"version\": \"3.29.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/thephpleague/flysystem.git\",\n                \"reference\": \"edc1bb7c86fab0776c3287dbd19b5fa278347319\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/thephpleague/flysystem/zipball/edc1bb7c86fab0776c3287dbd19b5fa278347319\",\n                \"reference\": \"edc1bb7c86fab0776c3287dbd19b5fa278347319\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"league/flysystem-local\": \"^3.0.0\",\n                \"league/mime-type-detection\": \"^1.0.0\",\n                \"php\": \"^8.0.2\"\n            },\n            \"conflict\": {\n                \"async-aws/core\": \"<1.19.0\",\n                \"async-aws/s3\": \"<1.14.0\",\n                \"aws/aws-sdk-php\": \"3.209.31 || 3.210.0\",\n                \"guzzlehttp/guzzle\": \"<7.0\",\n                \"guzzlehttp/ringphp\": \"<1.1.1\",\n                \"phpseclib/phpseclib\": \"3.0.15\",\n                \"symfony/http-client\": \"<5.2\"\n            },\n            \"require-dev\": {\n                \"async-aws/s3\": \"^1.5 || ^2.0\",\n                \"async-aws/simple-s3\": \"^1.1 || ^2.0\",\n                \"aws/aws-sdk-php\": \"^3.295.10\",\n                \"composer/semver\": \"^3.0\",\n                \"ext-fileinfo\": \"*\",\n                \"ext-ftp\": \"*\",\n                \"ext-mongodb\": \"^1.3\",\n                \"ext-zip\": \"*\",\n                \"friendsofphp/php-cs-fixer\": \"^3.5\",\n                \"google/cloud-storage\": \"^1.23\",\n                \"guzzlehttp/psr7\": \"^2.6\",\n                \"microsoft/azure-storage-blob\": \"^1.1\",\n                \"mongodb/mongodb\": \"^1.2\",\n                \"phpseclib/phpseclib\": \"^3.0.36\",\n                \"phpstan/phpstan\": \"^1.10\",\n                \"phpunit/phpunit\": \"^9.5.11|^10.0\",\n                \"sabre/dav\": \"^4.6.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"League\\\\Flysystem\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Frank de Jonge\",\n                    \"email\": \"info@frankdejonge.nl\"\n                }\n            ],\n            \"description\": \"File storage abstraction for PHP\",\n            \"keywords\": [\n                \"WebDAV\",\n                \"aws\",\n                \"cloud\",\n                \"file\",\n                \"files\",\n                \"filesystem\",\n                \"filesystems\",\n                \"ftp\",\n                \"s3\",\n                \"sftp\",\n                \"storage\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/thephpleague/flysystem/issues\",\n                \"source\": \"https://github.com/thephpleague/flysystem/tree/3.29.1\"\n            },\n            \"time\": \"2024-10-08T08:58:34+00:00\"\n        },\n        {\n            \"name\": \"league/flysystem-local\",\n            \"version\": \"3.29.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/thephpleague/flysystem-local.git\",\n                \"reference\": \"e0e8d52ce4b2ed154148453d321e97c8e931bd27\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/thephpleague/flysystem-local/zipball/e0e8d52ce4b2ed154148453d321e97c8e931bd27\",\n                \"reference\": \"e0e8d52ce4b2ed154148453d321e97c8e931bd27\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-fileinfo\": \"*\",\n                \"league/flysystem\": \"^3.0.0\",\n                \"league/mime-type-detection\": \"^1.0.0\",\n                \"php\": \"^8.0.2\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"League\\\\Flysystem\\\\Local\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Frank de Jonge\",\n                    \"email\": \"info@frankdejonge.nl\"\n                }\n            ],\n            \"description\": \"Local filesystem adapter for Flysystem.\",\n            \"keywords\": [\n                \"Flysystem\",\n                \"file\",\n                \"files\",\n                \"filesystem\",\n                \"local\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/thephpleague/flysystem-local/tree/3.29.0\"\n            },\n            \"time\": \"2024-08-09T21:24:39+00:00\"\n        },\n        {\n            \"name\": \"league/mime-type-detection\",\n            \"version\": \"1.16.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/thephpleague/mime-type-detection.git\",\n                \"reference\": \"2d6702ff215bf922936ccc1ad31007edc76451b9\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/thephpleague/mime-type-detection/zipball/2d6702ff215bf922936ccc1ad31007edc76451b9\",\n                \"reference\": \"2d6702ff215bf922936ccc1ad31007edc76451b9\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-fileinfo\": \"*\",\n                \"php\": \"^7.4 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"friendsofphp/php-cs-fixer\": \"^3.2\",\n                \"phpstan/phpstan\": \"^0.12.68\",\n                \"phpunit/phpunit\": \"^8.5.8 || ^9.3 || ^10.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"League\\\\MimeTypeDetection\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Frank de Jonge\",\n                    \"email\": \"info@frankdejonge.nl\"\n                }\n            ],\n            \"description\": \"Mime-type detection for Flysystem\",\n            \"support\": {\n                \"issues\": \"https://github.com/thephpleague/mime-type-detection/issues\",\n                \"source\": \"https://github.com/thephpleague/mime-type-detection/tree/1.16.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/frankdejonge\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/league/flysystem\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-21T08:32:55+00:00\"\n        },\n        {\n            \"name\": \"league/oauth1-client\",\n            \"version\": \"v1.10.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/thephpleague/oauth1-client.git\",\n                \"reference\": \"d6365b901b5c287dd41f143033315e2f777e1167\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/thephpleague/oauth1-client/zipball/d6365b901b5c287dd41f143033315e2f777e1167\",\n                \"reference\": \"d6365b901b5c287dd41f143033315e2f777e1167\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-json\": \"*\",\n                \"ext-openssl\": \"*\",\n                \"guzzlehttp/guzzle\": \"^6.0|^7.0\",\n                \"guzzlehttp/psr7\": \"^1.7|^2.0\",\n                \"php\": \">=7.1||>=8.0\"\n            },\n            \"require-dev\": {\n                \"ext-simplexml\": \"*\",\n                \"friendsofphp/php-cs-fixer\": \"^2.17\",\n                \"mockery/mockery\": \"^1.3.3\",\n                \"phpstan/phpstan\": \"^0.12.42\",\n                \"phpunit/phpunit\": \"^7.5||9.5\"\n            },\n            \"suggest\": {\n                \"ext-simplexml\": \"For decoding XML-based responses.\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0-dev\",\n                    \"dev-develop\": \"2.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"League\\\\OAuth1\\\\Client\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Ben Corlett\",\n                    \"email\": \"bencorlett@me.com\",\n                    \"homepage\": \"http://www.webcomm.com.au\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"OAuth 1.0 Client Library\",\n            \"keywords\": [\n                \"Authentication\",\n                \"SSO\",\n                \"authorization\",\n                \"bitbucket\",\n                \"identity\",\n                \"idp\",\n                \"oauth\",\n                \"oauth1\",\n                \"single sign on\",\n                \"trello\",\n                \"tumblr\",\n                \"twitter\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/thephpleague/oauth1-client/issues\",\n                \"source\": \"https://github.com/thephpleague/oauth1-client/tree/v1.10.1\"\n            },\n            \"time\": \"2022-04-15T14:02:14+00:00\"\n        },\n        {\n            \"name\": \"league/oauth2-server\",\n            \"version\": \"8.5.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/thephpleague/oauth2-server.git\",\n                \"reference\": \"ab7714d073844497fd222d5d0a217629089936bc\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/thephpleague/oauth2-server/zipball/ab7714d073844497fd222d5d0a217629089936bc\",\n                \"reference\": \"ab7714d073844497fd222d5d0a217629089936bc\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"defuse/php-encryption\": \"^2.3\",\n                \"ext-openssl\": \"*\",\n                \"lcobucci/clock\": \"^2.2 || ^3.0\",\n                \"lcobucci/jwt\": \"^4.3 || ^5.0\",\n                \"league/event\": \"^2.2\",\n                \"league/uri\": \"^6.7 || ^7.0\",\n                \"php\": \"^8.0\",\n                \"psr/http-message\": \"^1.0.1 || ^2.0\"\n            },\n            \"replace\": {\n                \"league/oauth2server\": \"*\",\n                \"lncd/oauth2\": \"*\"\n            },\n            \"require-dev\": {\n                \"laminas/laminas-diactoros\": \"^3.0.0\",\n                \"phpstan/phpstan\": \"^0.12.57\",\n                \"phpstan/phpstan-phpunit\": \"^0.12.16\",\n                \"phpunit/phpunit\": \"^9.6.6\",\n                \"roave/security-advisories\": \"dev-master\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"League\\\\OAuth2\\\\Server\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Alex Bilbie\",\n                    \"email\": \"hello@alexbilbie.com\",\n                    \"homepage\": \"http://www.alexbilbie.com\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Andy Millington\",\n                    \"email\": \"andrew@noexceptions.io\",\n                    \"homepage\": \"https://www.noexceptions.io\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"A lightweight and powerful OAuth 2.0 authorization and resource server library with support for all the core specification grants. This library will allow you to secure your API with OAuth and allow your applications users to approve apps that want to access their data from your API.\",\n            \"homepage\": \"https://oauth2.thephpleague.com/\",\n            \"keywords\": [\n                \"Authentication\",\n                \"api\",\n                \"auth\",\n                \"authorisation\",\n                \"authorization\",\n                \"oauth\",\n                \"oauth 2\",\n                \"oauth 2.0\",\n                \"oauth2\",\n                \"protect\",\n                \"resource\",\n                \"secure\",\n                \"server\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/thephpleague/oauth2-server/issues\",\n                \"source\": \"https://github.com/thephpleague/oauth2-server/tree/8.5.4\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sephster\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2023-08-25T22:35:12+00:00\"\n        },\n        {\n            \"name\": \"league/uri\",\n            \"version\": \"7.4.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/thephpleague/uri.git\",\n                \"reference\": \"bedb6e55eff0c933668addaa7efa1e1f2c417cc4\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/thephpleague/uri/zipball/bedb6e55eff0c933668addaa7efa1e1f2c417cc4\",\n                \"reference\": \"bedb6e55eff0c933668addaa7efa1e1f2c417cc4\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"league/uri-interfaces\": \"^7.3\",\n                \"php\": \"^8.1\"\n            },\n            \"conflict\": {\n                \"league/uri-schemes\": \"^1.0\"\n            },\n            \"suggest\": {\n                \"ext-bcmath\": \"to improve IPV4 host parsing\",\n                \"ext-fileinfo\": \"to create Data URI from file contennts\",\n                \"ext-gmp\": \"to improve IPV4 host parsing\",\n                \"ext-intl\": \"to handle IDN host with the best performance\",\n                \"jeremykendall/php-domain-parser\": \"to resolve Public Suffix and Top Level Domain\",\n                \"league/uri-components\": \"Needed to easily manipulate URI objects components\",\n                \"php-64bit\": \"to improve IPV4 host parsing\",\n                \"symfony/polyfill-intl-idn\": \"to handle IDN host via the Symfony polyfill if ext-intl is not present\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"7.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"League\\\\Uri\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Ignace Nyamagana Butera\",\n                    \"email\": \"nyamsprod@gmail.com\",\n                    \"homepage\": \"https://nyamsprod.com\"\n                }\n            ],\n            \"description\": \"URI manipulation library\",\n            \"homepage\": \"https://uri.thephpleague.com\",\n            \"keywords\": [\n                \"data-uri\",\n                \"file-uri\",\n                \"ftp\",\n                \"hostname\",\n                \"http\",\n                \"https\",\n                \"middleware\",\n                \"parse_str\",\n                \"parse_url\",\n                \"psr-7\",\n                \"query-string\",\n                \"querystring\",\n                \"rfc3986\",\n                \"rfc3987\",\n                \"rfc6570\",\n                \"uri\",\n                \"uri-template\",\n                \"url\",\n                \"ws\"\n            ],\n            \"support\": {\n                \"docs\": \"https://uri.thephpleague.com\",\n                \"forum\": \"https://thephpleague.slack.com\",\n                \"issues\": \"https://github.com/thephpleague/uri-src/issues\",\n                \"source\": \"https://github.com/thephpleague/uri/tree/7.4.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sponsors/nyamsprod\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-03-23T07:42:40+00:00\"\n        },\n        {\n            \"name\": \"league/uri-interfaces\",\n            \"version\": \"7.4.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/thephpleague/uri-interfaces.git\",\n                \"reference\": \"8d43ef5c841032c87e2de015972c06f3865ef718\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/thephpleague/uri-interfaces/zipball/8d43ef5c841032c87e2de015972c06f3865ef718\",\n                \"reference\": \"8d43ef5c841032c87e2de015972c06f3865ef718\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-filter\": \"*\",\n                \"php\": \"^8.1\",\n                \"psr/http-factory\": \"^1\",\n                \"psr/http-message\": \"^1.1 || ^2.0\"\n            },\n            \"suggest\": {\n                \"ext-bcmath\": \"to improve IPV4 host parsing\",\n                \"ext-gmp\": \"to improve IPV4 host parsing\",\n                \"ext-intl\": \"to handle IDN host with the best performance\",\n                \"php-64bit\": \"to improve IPV4 host parsing\",\n                \"symfony/polyfill-intl-idn\": \"to handle IDN host via the Symfony polyfill if ext-intl is not present\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"7.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"League\\\\Uri\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Ignace Nyamagana Butera\",\n                    \"email\": \"nyamsprod@gmail.com\",\n                    \"homepage\": \"https://nyamsprod.com\"\n                }\n            ],\n            \"description\": \"Common interfaces and classes for URI representation and interaction\",\n            \"homepage\": \"https://uri.thephpleague.com\",\n            \"keywords\": [\n                \"data-uri\",\n                \"file-uri\",\n                \"ftp\",\n                \"hostname\",\n                \"http\",\n                \"https\",\n                \"parse_str\",\n                \"parse_url\",\n                \"psr-7\",\n                \"query-string\",\n                \"querystring\",\n                \"rfc3986\",\n                \"rfc3987\",\n                \"rfc6570\",\n                \"uri\",\n                \"url\",\n                \"ws\"\n            ],\n            \"support\": {\n                \"docs\": \"https://uri.thephpleague.com\",\n                \"forum\": \"https://thephpleague.slack.com\",\n                \"issues\": \"https://github.com/thephpleague/uri-src/issues\",\n                \"source\": \"https://github.com/thephpleague/uri-interfaces/tree/7.4.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sponsors/nyamsprod\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-03-23T07:42:40+00:00\"\n        },\n        {\n            \"name\": \"mobiledetect/mobiledetectlib\",\n            \"version\": \"2.8.45\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/serbanghita/Mobile-Detect.git\",\n                \"reference\": \"96aaebcf4f50d3d2692ab81d2c5132e425bca266\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/serbanghita/Mobile-Detect/zipball/96aaebcf4f50d3d2692ab81d2c5132e425bca266\",\n                \"reference\": \"96aaebcf4f50d3d2692ab81d2c5132e425bca266\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.0.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.8.36\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Detection\": \"namespaced/\"\n                },\n                \"classmap\": [\n                    \"Mobile_Detect.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Serban Ghita\",\n                    \"email\": \"serbanghita@gmail.com\",\n                    \"homepage\": \"http://mobiledetect.net\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"Mobile_Detect is a lightweight PHP class for detecting mobile devices. It uses the User-Agent string combined with specific HTTP headers to detect the mobile environment.\",\n            \"homepage\": \"https://github.com/serbanghita/Mobile-Detect\",\n            \"keywords\": [\n                \"detect mobile devices\",\n                \"mobile\",\n                \"mobile detect\",\n                \"mobile detector\",\n                \"php mobile detect\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/serbanghita/Mobile-Detect/issues\",\n                \"source\": \"https://github.com/serbanghita/Mobile-Detect/tree/2.8.45\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/serbanghita\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2023-11-07T21:57:25+00:00\"\n        },\n        {\n            \"name\": \"monolog/monolog\",\n            \"version\": \"3.8.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/Seldaek/monolog.git\",\n                \"reference\": \"32e515fdc02cdafbe4593e30a9350d486b125b67\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/Seldaek/monolog/zipball/32e515fdc02cdafbe4593e30a9350d486b125b67\",\n                \"reference\": \"32e515fdc02cdafbe4593e30a9350d486b125b67\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.1\",\n                \"psr/log\": \"^2.0 || ^3.0\"\n            },\n            \"provide\": {\n                \"psr/log-implementation\": \"3.0.0\"\n            },\n            \"require-dev\": {\n                \"aws/aws-sdk-php\": \"^3.0\",\n                \"doctrine/couchdb\": \"~1.0@dev\",\n                \"elasticsearch/elasticsearch\": \"^7 || ^8\",\n                \"ext-json\": \"*\",\n                \"graylog2/gelf-php\": \"^1.4.2 || ^2.0\",\n                \"guzzlehttp/guzzle\": \"^7.4.5\",\n                \"guzzlehttp/psr7\": \"^2.2\",\n                \"mongodb/mongodb\": \"^1.8\",\n                \"php-amqplib/php-amqplib\": \"~2.4 || ^3\",\n                \"php-console/php-console\": \"^3.1.8\",\n                \"phpstan/phpstan\": \"^2\",\n                \"phpstan/phpstan-deprecation-rules\": \"^2\",\n                \"phpstan/phpstan-strict-rules\": \"^2\",\n                \"phpunit/phpunit\": \"^10.5.17 || ^11.0.7\",\n                \"predis/predis\": \"^1.1 || ^2\",\n                \"rollbar/rollbar\": \"^4.0\",\n                \"ruflin/elastica\": \"^7 || ^8\",\n                \"symfony/mailer\": \"^5.4 || ^6\",\n                \"symfony/mime\": \"^5.4 || ^6\"\n            },\n            \"suggest\": {\n                \"aws/aws-sdk-php\": \"Allow sending log messages to AWS services like DynamoDB\",\n                \"doctrine/couchdb\": \"Allow sending log messages to a CouchDB server\",\n                \"elasticsearch/elasticsearch\": \"Allow sending log messages to an Elasticsearch server via official client\",\n                \"ext-amqp\": \"Allow sending log messages to an AMQP server (1.0+ required)\",\n                \"ext-curl\": \"Required to send log messages using the IFTTTHandler, the LogglyHandler, the SendGridHandler, the SlackWebhookHandler or the TelegramBotHandler\",\n                \"ext-mbstring\": \"Allow to work properly with unicode symbols\",\n                \"ext-mongodb\": \"Allow sending log messages to a MongoDB server (via driver)\",\n                \"ext-openssl\": \"Required to send log messages using SSL\",\n                \"ext-sockets\": \"Allow sending log messages to a Syslog server (via UDP driver)\",\n                \"graylog2/gelf-php\": \"Allow sending log messages to a GrayLog2 server\",\n                \"mongodb/mongodb\": \"Allow sending log messages to a MongoDB server (via library)\",\n                \"php-amqplib/php-amqplib\": \"Allow sending log messages to an AMQP server using php-amqplib\",\n                \"rollbar/rollbar\": \"Allow sending log messages to Rollbar\",\n                \"ruflin/elastica\": \"Allow sending log messages to an Elastic Search server\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"3.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Monolog\\\\\": \"src/Monolog\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jordi Boggiano\",\n                    \"email\": \"j.boggiano@seld.be\",\n                    \"homepage\": \"https://seld.be\"\n                }\n            ],\n            \"description\": \"Sends your logs to files, sockets, inboxes, databases and various web services\",\n            \"homepage\": \"https://github.com/Seldaek/monolog\",\n            \"keywords\": [\n                \"log\",\n                \"logging\",\n                \"psr-3\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/Seldaek/monolog/issues\",\n                \"source\": \"https://github.com/Seldaek/monolog/tree/3.8.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/Seldaek\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/monolog/monolog\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-11-12T13:57:08+00:00\"\n        },\n        {\n            \"name\": \"nesbot/carbon\",\n            \"version\": \"3.8.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/briannesbitt/Carbon.git\",\n                \"reference\": \"e1268cdbc486d97ce23fef2c666dc3c6b6de9947\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/briannesbitt/Carbon/zipball/e1268cdbc486d97ce23fef2c666dc3c6b6de9947\",\n                \"reference\": \"e1268cdbc486d97ce23fef2c666dc3c6b6de9947\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"carbonphp/carbon-doctrine-types\": \"<100.0\",\n                \"ext-json\": \"*\",\n                \"php\": \"^8.1\",\n                \"psr/clock\": \"^1.0\",\n                \"symfony/clock\": \"^6.3 || ^7.0\",\n                \"symfony/polyfill-mbstring\": \"^1.0\",\n                \"symfony/translation\": \"^4.4.18 || ^5.2.1|| ^6.0 || ^7.0\"\n            },\n            \"provide\": {\n                \"psr/clock-implementation\": \"1.0\"\n            },\n            \"require-dev\": {\n                \"doctrine/dbal\": \"^3.6.3 || ^4.0\",\n                \"doctrine/orm\": \"^2.15.2 || ^3.0\",\n                \"friendsofphp/php-cs-fixer\": \"^3.57.2\",\n                \"kylekatarnls/multi-tester\": \"^2.5.3\",\n                \"ondrejmirtes/better-reflection\": \"^6.25.0.4\",\n                \"phpmd/phpmd\": \"^2.15.0\",\n                \"phpstan/extension-installer\": \"^1.3.1\",\n                \"phpstan/phpstan\": \"^1.11.2\",\n                \"phpunit/phpunit\": \"^10.5.20\",\n                \"squizlabs/php_codesniffer\": \"^3.9.0\"\n            },\n            \"bin\": [\n                \"bin/carbon\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.x-dev\",\n                    \"dev-2.x\": \"2.x-dev\"\n                },\n                \"laravel\": {\n                    \"providers\": [\n                        \"Carbon\\\\Laravel\\\\ServiceProvider\"\n                    ]\n                },\n                \"phpstan\": {\n                    \"includes\": [\n                        \"extension.neon\"\n                    ]\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Carbon\\\\\": \"src/Carbon/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Brian Nesbitt\",\n                    \"email\": \"brian@nesbot.com\",\n                    \"homepage\": \"https://markido.com\"\n                },\n                {\n                    \"name\": \"kylekatarnls\",\n                    \"homepage\": \"https://github.com/kylekatarnls\"\n                }\n            ],\n            \"description\": \"An API extension for DateTime that supports 281 different languages.\",\n            \"homepage\": \"https://carbon.nesbot.com\",\n            \"keywords\": [\n                \"date\",\n                \"datetime\",\n                \"time\"\n            ],\n            \"support\": {\n                \"docs\": \"https://carbon.nesbot.com/docs\",\n                \"issues\": \"https://github.com/briannesbitt/Carbon/issues\",\n                \"source\": \"https://github.com/briannesbitt/Carbon\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sponsors/kylekatarnls\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://opencollective.com/Carbon#sponsor\",\n                    \"type\": \"opencollective\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/subscription/pkg/packagist-nesbot-carbon?utm_source=packagist-nesbot-carbon&utm_medium=referral&utm_campaign=readme\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-11-07T17:46:48+00:00\"\n        },\n        {\n            \"name\": \"nette/schema\",\n            \"version\": \"v1.3.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/nette/schema.git\",\n                \"reference\": \"da801d52f0354f70a638673c4a0f04e16529431d\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/nette/schema/zipball/da801d52f0354f70a638673c4a0f04e16529431d\",\n                \"reference\": \"da801d52f0354f70a638673c4a0f04e16529431d\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"nette/utils\": \"^4.0\",\n                \"php\": \"8.1 - 8.4\"\n            },\n            \"require-dev\": {\n                \"nette/tester\": \"^2.5.2\",\n                \"phpstan/phpstan-nette\": \"^1.0\",\n                \"tracy/tracy\": \"^2.8\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\",\n                \"GPL-2.0-only\",\n                \"GPL-3.0-only\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"David Grudl\",\n                    \"homepage\": \"https://davidgrudl.com\"\n                },\n                {\n                    \"name\": \"Nette Community\",\n                    \"homepage\": \"https://nette.org/contributors\"\n                }\n            ],\n            \"description\": \"📐 Nette Schema: validating data structures against a given Schema.\",\n            \"homepage\": \"https://nette.org\",\n            \"keywords\": [\n                \"config\",\n                \"nette\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/nette/schema/issues\",\n                \"source\": \"https://github.com/nette/schema/tree/v1.3.2\"\n            },\n            \"time\": \"2024-10-06T23:10:23+00:00\"\n        },\n        {\n            \"name\": \"nette/utils\",\n            \"version\": \"v4.0.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/nette/utils.git\",\n                \"reference\": \"736c567e257dbe0fcf6ce81b4d6dbe05c6899f96\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/nette/utils/zipball/736c567e257dbe0fcf6ce81b4d6dbe05c6899f96\",\n                \"reference\": \"736c567e257dbe0fcf6ce81b4d6dbe05c6899f96\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"8.0 - 8.4\"\n            },\n            \"conflict\": {\n                \"nette/finder\": \"<3\",\n                \"nette/schema\": \"<1.2.2\"\n            },\n            \"require-dev\": {\n                \"jetbrains/phpstorm-attributes\": \"dev-master\",\n                \"nette/tester\": \"^2.5\",\n                \"phpstan/phpstan\": \"^1.0\",\n                \"tracy/tracy\": \"^2.9\"\n            },\n            \"suggest\": {\n                \"ext-gd\": \"to use Image\",\n                \"ext-iconv\": \"to use Strings::webalize(), toAscii(), chr() and reverse()\",\n                \"ext-intl\": \"to use Strings::webalize(), toAscii(), normalize() and compare()\",\n                \"ext-json\": \"to use Nette\\\\Utils\\\\Json\",\n                \"ext-mbstring\": \"to use Strings::lower() etc...\",\n                \"ext-tokenizer\": \"to use Nette\\\\Utils\\\\Reflection::getUseStatements()\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"4.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\",\n                \"GPL-2.0-only\",\n                \"GPL-3.0-only\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"David Grudl\",\n                    \"homepage\": \"https://davidgrudl.com\"\n                },\n                {\n                    \"name\": \"Nette Community\",\n                    \"homepage\": \"https://nette.org/contributors\"\n                }\n            ],\n            \"description\": \"🛠  Nette Utils: lightweight utilities for string & array manipulation, image handling, safe JSON encoding/decoding, validation, slug or strong password generating etc.\",\n            \"homepage\": \"https://nette.org\",\n            \"keywords\": [\n                \"array\",\n                \"core\",\n                \"datetime\",\n                \"images\",\n                \"json\",\n                \"nette\",\n                \"paginator\",\n                \"password\",\n                \"slugify\",\n                \"string\",\n                \"unicode\",\n                \"utf-8\",\n                \"utility\",\n                \"validation\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/nette/utils/issues\",\n                \"source\": \"https://github.com/nette/utils/tree/v4.0.5\"\n            },\n            \"time\": \"2024-08-07T15:39:19+00:00\"\n        },\n        {\n            \"name\": \"nikic/php-parser\",\n            \"version\": \"v5.3.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/nikic/PHP-Parser.git\",\n                \"reference\": \"8eea230464783aa9671db8eea6f8c6ac5285794b\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/nikic/PHP-Parser/zipball/8eea230464783aa9671db8eea6f8c6ac5285794b\",\n                \"reference\": \"8eea230464783aa9671db8eea6f8c6ac5285794b\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-ctype\": \"*\",\n                \"ext-json\": \"*\",\n                \"ext-tokenizer\": \"*\",\n                \"php\": \">=7.4\"\n            },\n            \"require-dev\": {\n                \"ircmaxell/php-yacc\": \"^0.0.7\",\n                \"phpunit/phpunit\": \"^9.0\"\n            },\n            \"bin\": [\n                \"bin/php-parse\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"5.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"PhpParser\\\\\": \"lib/PhpParser\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nikita Popov\"\n                }\n            ],\n            \"description\": \"A PHP parser written in PHP\",\n            \"keywords\": [\n                \"parser\",\n                \"php\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/nikic/PHP-Parser/issues\",\n                \"source\": \"https://github.com/nikic/PHP-Parser/tree/v5.3.1\"\n            },\n            \"time\": \"2024-10-08T18:51:32+00:00\"\n        },\n        {\n            \"name\": \"nunomaduro/termwind\",\n            \"version\": \"v2.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/nunomaduro/termwind.git\",\n                \"reference\": \"42c84e4e8090766bbd6445d06cd6e57650626ea3\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/nunomaduro/termwind/zipball/42c84e4e8090766bbd6445d06cd6e57650626ea3\",\n                \"reference\": \"42c84e4e8090766bbd6445d06cd6e57650626ea3\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-mbstring\": \"*\",\n                \"php\": \"^8.2\",\n                \"symfony/console\": \"^7.1.5\"\n            },\n            \"require-dev\": {\n                \"illuminate/console\": \"^11.28.0\",\n                \"laravel/pint\": \"^1.18.1\",\n                \"mockery/mockery\": \"^1.6.12\",\n                \"pestphp/pest\": \"^2.36.0\",\n                \"phpstan/phpstan\": \"^1.12.6\",\n                \"phpstan/phpstan-strict-rules\": \"^1.6.1\",\n                \"symfony/var-dumper\": \"^7.1.5\",\n                \"thecodingmachine/phpstan-strict-rules\": \"^1.0.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"laravel\": {\n                    \"providers\": [\n                        \"Termwind\\\\Laravel\\\\TermwindServiceProvider\"\n                    ]\n                },\n                \"branch-alias\": {\n                    \"dev-2.x\": \"2.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"src/Functions.php\"\n                ],\n                \"psr-4\": {\n                    \"Termwind\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nuno Maduro\",\n                    \"email\": \"enunomaduro@gmail.com\"\n                }\n            ],\n            \"description\": \"Its like Tailwind CSS, but for the console.\",\n            \"keywords\": [\n                \"cli\",\n                \"console\",\n                \"css\",\n                \"package\",\n                \"php\",\n                \"style\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/nunomaduro/termwind/issues\",\n                \"source\": \"https://github.com/nunomaduro/termwind/tree/v2.2.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://www.paypal.com/paypalme/enunomaduro\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/nunomaduro\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://github.com/xiCO2k\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-10-15T16:15:16+00:00\"\n        },\n        {\n            \"name\": \"nyholm/psr7\",\n            \"version\": \"1.8.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/Nyholm/psr7.git\",\n                \"reference\": \"a71f2b11690f4b24d099d6b16690a90ae14fc6f3\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/Nyholm/psr7/zipball/a71f2b11690f4b24d099d6b16690a90ae14fc6f3\",\n                \"reference\": \"a71f2b11690f4b24d099d6b16690a90ae14fc6f3\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2\",\n                \"psr/http-factory\": \"^1.0\",\n                \"psr/http-message\": \"^1.1 || ^2.0\"\n            },\n            \"provide\": {\n                \"php-http/message-factory-implementation\": \"1.0\",\n                \"psr/http-factory-implementation\": \"1.0\",\n                \"psr/http-message-implementation\": \"1.0\"\n            },\n            \"require-dev\": {\n                \"http-interop/http-factory-tests\": \"^0.9\",\n                \"php-http/message-factory\": \"^1.0\",\n                \"php-http/psr7-integration-tests\": \"^1.0\",\n                \"phpunit/phpunit\": \"^7.5 || ^8.5 || ^9.4\",\n                \"symfony/error-handler\": \"^4.4\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.8-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Nyholm\\\\Psr7\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Tobias Nyholm\",\n                    \"email\": \"tobias.nyholm@gmail.com\"\n                },\n                {\n                    \"name\": \"Martijn van der Ven\",\n                    \"email\": \"martijn@vanderven.se\"\n                }\n            ],\n            \"description\": \"A fast PHP7 implementation of PSR-7\",\n            \"homepage\": \"https://tnyholm.se\",\n            \"keywords\": [\n                \"psr-17\",\n                \"psr-7\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/Nyholm/psr7/issues\",\n                \"source\": \"https://github.com/Nyholm/psr7/tree/1.8.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/Zegnat\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://github.com/nyholm\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-09-09T07:06:30+00:00\"\n        },\n        {\n            \"name\": \"paragonie/constant_time_encoding\",\n            \"version\": \"v2.7.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/paragonie/constant_time_encoding.git\",\n                \"reference\": \"52a0d99e69f56b9ec27ace92ba56897fe6993105\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/paragonie/constant_time_encoding/zipball/52a0d99e69f56b9ec27ace92ba56897fe6993105\",\n                \"reference\": \"52a0d99e69f56b9ec27ace92ba56897fe6993105\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7|^8\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^6|^7|^8|^9\",\n                \"vimeo/psalm\": \"^1|^2|^3|^4\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"ParagonIE\\\\ConstantTime\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Paragon Initiative Enterprises\",\n                    \"email\": \"security@paragonie.com\",\n                    \"homepage\": \"https://paragonie.com\",\n                    \"role\": \"Maintainer\"\n                },\n                {\n                    \"name\": \"Steve 'Sc00bz' Thomas\",\n                    \"email\": \"steve@tobtu.com\",\n                    \"homepage\": \"https://www.tobtu.com\",\n                    \"role\": \"Original Developer\"\n                }\n            ],\n            \"description\": \"Constant-time Implementations of RFC 4648 Encoding (Base-64, Base-32, Base-16)\",\n            \"keywords\": [\n                \"base16\",\n                \"base32\",\n                \"base32_decode\",\n                \"base32_encode\",\n                \"base64\",\n                \"base64_decode\",\n                \"base64_encode\",\n                \"bin2hex\",\n                \"encoding\",\n                \"hex\",\n                \"hex2bin\",\n                \"rfc4648\"\n            ],\n            \"support\": {\n                \"email\": \"info@paragonie.com\",\n                \"issues\": \"https://github.com/paragonie/constant_time_encoding/issues\",\n                \"source\": \"https://github.com/paragonie/constant_time_encoding\"\n            },\n            \"time\": \"2024-05-08T12:18:48+00:00\"\n        },\n        {\n            \"name\": \"paragonie/random_compat\",\n            \"version\": \"v9.99.100\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/paragonie/random_compat.git\",\n                \"reference\": \"996434e5492cb4c3edcb9168db6fbb1359ef965a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/paragonie/random_compat/zipball/996434e5492cb4c3edcb9168db6fbb1359ef965a\",\n                \"reference\": \"996434e5492cb4c3edcb9168db6fbb1359ef965a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">= 7\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"4.*|5.*\",\n                \"vimeo/psalm\": \"^1\"\n            },\n            \"suggest\": {\n                \"ext-libsodium\": \"Provides a modern crypto API that can be used to generate random bytes.\"\n            },\n            \"type\": \"library\",\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Paragon Initiative Enterprises\",\n                    \"email\": \"security@paragonie.com\",\n                    \"homepage\": \"https://paragonie.com\"\n                }\n            ],\n            \"description\": \"PHP 5.x polyfill for random_bytes() and random_int() from PHP 7\",\n            \"keywords\": [\n                \"csprng\",\n                \"polyfill\",\n                \"pseudorandom\",\n                \"random\"\n            ],\n            \"support\": {\n                \"email\": \"info@paragonie.com\",\n                \"issues\": \"https://github.com/paragonie/random_compat/issues\",\n                \"source\": \"https://github.com/paragonie/random_compat\"\n            },\n            \"time\": \"2020-10-15T08:29:30+00:00\"\n        },\n        {\n            \"name\": \"phpoption/phpoption\",\n            \"version\": \"1.9.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/schmittjoh/php-option.git\",\n                \"reference\": \"e3fac8b24f56113f7cb96af14958c0dd16330f54\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/schmittjoh/php-option/zipball/e3fac8b24f56113f7cb96af14958c0dd16330f54\",\n                \"reference\": \"e3fac8b24f56113f7cb96af14958c0dd16330f54\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2.5 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"bamarni/composer-bin-plugin\": \"^1.8.2\",\n                \"phpunit/phpunit\": \"^8.5.39 || ^9.6.20 || ^10.5.28\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"bamarni-bin\": {\n                    \"bin-links\": true,\n                    \"forward-command\": false\n                },\n                \"branch-alias\": {\n                    \"dev-master\": \"1.9-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"PhpOption\\\\\": \"src/PhpOption/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"Apache-2.0\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Johannes M. Schmitt\",\n                    \"email\": \"schmittjoh@gmail.com\",\n                    \"homepage\": \"https://github.com/schmittjoh\"\n                },\n                {\n                    \"name\": \"Graham Campbell\",\n                    \"email\": \"hello@gjcampbell.co.uk\",\n                    \"homepage\": \"https://github.com/GrahamCampbell\"\n                }\n            ],\n            \"description\": \"Option Type for PHP\",\n            \"keywords\": [\n                \"language\",\n                \"option\",\n                \"php\",\n                \"type\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/schmittjoh/php-option/issues\",\n                \"source\": \"https://github.com/schmittjoh/php-option/tree/1.9.3\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/GrahamCampbell\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/phpoption/phpoption\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-07-20T21:41:07+00:00\"\n        },\n        {\n            \"name\": \"phpseclib/phpseclib\",\n            \"version\": \"3.0.42\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phpseclib/phpseclib.git\",\n                \"reference\": \"db92f1b1987b12b13f248fe76c3a52cadb67bb98\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phpseclib/phpseclib/zipball/db92f1b1987b12b13f248fe76c3a52cadb67bb98\",\n                \"reference\": \"db92f1b1987b12b13f248fe76c3a52cadb67bb98\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"paragonie/constant_time_encoding\": \"^1|^2|^3\",\n                \"paragonie/random_compat\": \"^1.4|^2.0|^9.99.99\",\n                \"php\": \">=5.6.1\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"*\"\n            },\n            \"suggest\": {\n                \"ext-dom\": \"Install the DOM extension to load XML formatted public keys.\",\n                \"ext-gmp\": \"Install the GMP (GNU Multiple Precision) extension in order to speed up arbitrary precision integer arithmetic operations.\",\n                \"ext-libsodium\": \"SSH2/SFTP can make use of some algorithms provided by the libsodium-php extension.\",\n                \"ext-mcrypt\": \"Install the Mcrypt extension in order to speed up a few other cryptographic operations.\",\n                \"ext-openssl\": \"Install the OpenSSL extension in order to speed up a wide variety of cryptographic operations.\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"phpseclib/bootstrap.php\"\n                ],\n                \"psr-4\": {\n                    \"phpseclib3\\\\\": \"phpseclib/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jim Wigginton\",\n                    \"email\": \"terrafrost@php.net\",\n                    \"role\": \"Lead Developer\"\n                },\n                {\n                    \"name\": \"Patrick Monnerat\",\n                    \"email\": \"pm@datasphere.ch\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Andreas Fischer\",\n                    \"email\": \"bantu@phpbb.com\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Hans-Jürgen Petrich\",\n                    \"email\": \"petrich@tronic-media.com\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Graham Campbell\",\n                    \"email\": \"graham@alt-three.com\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"PHP Secure Communications Library - Pure-PHP implementations of RSA, AES, SSH2, SFTP, X.509 etc.\",\n            \"homepage\": \"http://phpseclib.sourceforge.net\",\n            \"keywords\": [\n                \"BigInteger\",\n                \"aes\",\n                \"asn.1\",\n                \"asn1\",\n                \"blowfish\",\n                \"crypto\",\n                \"cryptography\",\n                \"encryption\",\n                \"rsa\",\n                \"security\",\n                \"sftp\",\n                \"signature\",\n                \"signing\",\n                \"ssh\",\n                \"twofish\",\n                \"x.509\",\n                \"x509\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/phpseclib/phpseclib/issues\",\n                \"source\": \"https://github.com/phpseclib/phpseclib/tree/3.0.42\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/terrafrost\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://www.patreon.com/phpseclib\",\n                    \"type\": \"patreon\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/phpseclib/phpseclib\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-16T03:06:04+00:00\"\n        },\n        {\n            \"name\": \"psr/clock\",\n            \"version\": \"1.0.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/clock.git\",\n                \"reference\": \"e41a24703d4560fd0acb709162f73b8adfc3aa0d\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/clock/zipball/e41a24703d4560fd0acb709162f73b8adfc3aa0d\",\n                \"reference\": \"e41a24703d4560fd0acb709162f73b8adfc3aa0d\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.0 || ^8.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Psr\\\\Clock\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"https://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"Common interface for reading the clock.\",\n            \"homepage\": \"https://github.com/php-fig/clock\",\n            \"keywords\": [\n                \"clock\",\n                \"now\",\n                \"psr\",\n                \"psr-20\",\n                \"time\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/php-fig/clock/issues\",\n                \"source\": \"https://github.com/php-fig/clock/tree/1.0.0\"\n            },\n            \"time\": \"2022-11-25T14:36:26+00:00\"\n        },\n        {\n            \"name\": \"psr/container\",\n            \"version\": \"2.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/container.git\",\n                \"reference\": \"c71ecc56dfe541dbd90c5360474fbc405f8d5963\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/container/zipball/c71ecc56dfe541dbd90c5360474fbc405f8d5963\",\n                \"reference\": \"c71ecc56dfe541dbd90c5360474fbc405f8d5963\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.4.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Psr\\\\Container\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"https://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"Common Container Interface (PHP FIG PSR-11)\",\n            \"homepage\": \"https://github.com/php-fig/container\",\n            \"keywords\": [\n                \"PSR-11\",\n                \"container\",\n                \"container-interface\",\n                \"container-interop\",\n                \"psr\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/php-fig/container/issues\",\n                \"source\": \"https://github.com/php-fig/container/tree/2.0.2\"\n            },\n            \"time\": \"2021-11-05T16:47:00+00:00\"\n        },\n        {\n            \"name\": \"psr/event-dispatcher\",\n            \"version\": \"1.0.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/event-dispatcher.git\",\n                \"reference\": \"dbefd12671e8a14ec7f180cab83036ed26714bb0\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/event-dispatcher/zipball/dbefd12671e8a14ec7f180cab83036ed26714bb0\",\n                \"reference\": \"dbefd12671e8a14ec7f180cab83036ed26714bb0\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Psr\\\\EventDispatcher\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"http://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"Standard interfaces for event handling.\",\n            \"keywords\": [\n                \"events\",\n                \"psr\",\n                \"psr-14\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/php-fig/event-dispatcher/issues\",\n                \"source\": \"https://github.com/php-fig/event-dispatcher/tree/1.0.0\"\n            },\n            \"time\": \"2019-01-08T18:20:26+00:00\"\n        },\n        {\n            \"name\": \"psr/http-client\",\n            \"version\": \"1.0.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/http-client.git\",\n                \"reference\": \"bb5906edc1c324c9a05aa0873d40117941e5fa90\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/http-client/zipball/bb5906edc1c324c9a05aa0873d40117941e5fa90\",\n                \"reference\": \"bb5906edc1c324c9a05aa0873d40117941e5fa90\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.0 || ^8.0\",\n                \"psr/http-message\": \"^1.0 || ^2.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Psr\\\\Http\\\\Client\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"https://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"Common interface for HTTP clients\",\n            \"homepage\": \"https://github.com/php-fig/http-client\",\n            \"keywords\": [\n                \"http\",\n                \"http-client\",\n                \"psr\",\n                \"psr-18\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/php-fig/http-client\"\n            },\n            \"time\": \"2023-09-23T14:17:50+00:00\"\n        },\n        {\n            \"name\": \"psr/http-factory\",\n            \"version\": \"1.1.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/http-factory.git\",\n                \"reference\": \"2b4765fddfe3b508ac62f829e852b1501d3f6e8a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/http-factory/zipball/2b4765fddfe3b508ac62f829e852b1501d3f6e8a\",\n                \"reference\": \"2b4765fddfe3b508ac62f829e852b1501d3f6e8a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.1\",\n                \"psr/http-message\": \"^1.0 || ^2.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Psr\\\\Http\\\\Message\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"https://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"PSR-17: Common interfaces for PSR-7 HTTP message factories\",\n            \"keywords\": [\n                \"factory\",\n                \"http\",\n                \"message\",\n                \"psr\",\n                \"psr-17\",\n                \"psr-7\",\n                \"request\",\n                \"response\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/php-fig/http-factory\"\n            },\n            \"time\": \"2024-04-15T12:06:14+00:00\"\n        },\n        {\n            \"name\": \"psr/http-message\",\n            \"version\": \"2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/http-message.git\",\n                \"reference\": \"402d35bcb92c70c026d1a6a9883f06b2ead23d71\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/http-message/zipball/402d35bcb92c70c026d1a6a9883f06b2ead23d71\",\n                \"reference\": \"402d35bcb92c70c026d1a6a9883f06b2ead23d71\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Psr\\\\Http\\\\Message\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"https://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"Common interface for HTTP messages\",\n            \"homepage\": \"https://github.com/php-fig/http-message\",\n            \"keywords\": [\n                \"http\",\n                \"http-message\",\n                \"psr\",\n                \"psr-7\",\n                \"request\",\n                \"response\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/php-fig/http-message/tree/2.0\"\n            },\n            \"time\": \"2023-04-04T09:54:51+00:00\"\n        },\n        {\n            \"name\": \"psr/log\",\n            \"version\": \"3.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/log.git\",\n                \"reference\": \"f16e1d5863e37f8d8c2a01719f5b34baa2b714d3\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/log/zipball/f16e1d5863e37f8d8c2a01719f5b34baa2b714d3\",\n                \"reference\": \"f16e1d5863e37f8d8c2a01719f5b34baa2b714d3\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.0.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Psr\\\\Log\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"https://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"Common interface for logging libraries\",\n            \"homepage\": \"https://github.com/php-fig/log\",\n            \"keywords\": [\n                \"log\",\n                \"psr\",\n                \"psr-3\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/php-fig/log/tree/3.0.2\"\n            },\n            \"time\": \"2024-09-11T13:17:53+00:00\"\n        },\n        {\n            \"name\": \"psr/simple-cache\",\n            \"version\": \"3.0.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/simple-cache.git\",\n                \"reference\": \"764e0b3939f5ca87cb904f570ef9be2d78a07865\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/simple-cache/zipball/764e0b3939f5ca87cb904f570ef9be2d78a07865\",\n                \"reference\": \"764e0b3939f5ca87cb904f570ef9be2d78a07865\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.0.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Psr\\\\SimpleCache\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"https://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"Common interfaces for simple caching\",\n            \"keywords\": [\n                \"cache\",\n                \"caching\",\n                \"psr\",\n                \"psr-16\",\n                \"simple-cache\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/php-fig/simple-cache/tree/3.0.0\"\n            },\n            \"time\": \"2021-10-29T13:26:27+00:00\"\n        },\n        {\n            \"name\": \"psy/psysh\",\n            \"version\": \"v0.12.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/bobthecow/psysh.git\",\n                \"reference\": \"2fd717afa05341b4f8152547f142cd2f130f6818\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/bobthecow/psysh/zipball/2fd717afa05341b4f8152547f142cd2f130f6818\",\n                \"reference\": \"2fd717afa05341b4f8152547f142cd2f130f6818\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-json\": \"*\",\n                \"ext-tokenizer\": \"*\",\n                \"nikic/php-parser\": \"^5.0 || ^4.0\",\n                \"php\": \"^8.0 || ^7.4\",\n                \"symfony/console\": \"^7.0 || ^6.0 || ^5.0 || ^4.0 || ^3.4\",\n                \"symfony/var-dumper\": \"^7.0 || ^6.0 || ^5.0 || ^4.0 || ^3.4\"\n            },\n            \"conflict\": {\n                \"symfony/console\": \"4.4.37 || 5.3.14 || 5.3.15 || 5.4.3 || 5.4.4 || 6.0.3 || 6.0.4\"\n            },\n            \"require-dev\": {\n                \"bamarni/composer-bin-plugin\": \"^1.2\"\n            },\n            \"suggest\": {\n                \"ext-pcntl\": \"Enabling the PCNTL extension makes PsySH a lot happier :)\",\n                \"ext-pdo-sqlite\": \"The doc command requires SQLite to work.\",\n                \"ext-posix\": \"If you have PCNTL, you'll want the POSIX extension as well.\"\n            },\n            \"bin\": [\n                \"bin/psysh\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"0.12.x-dev\"\n                },\n                \"bamarni-bin\": {\n                    \"bin-links\": false,\n                    \"forward-command\": false\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"src/functions.php\"\n                ],\n                \"psr-4\": {\n                    \"Psy\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Justin Hileman\",\n                    \"email\": \"justin@justinhileman.info\",\n                    \"homepage\": \"http://justinhileman.com\"\n                }\n            ],\n            \"description\": \"An interactive shell for modern PHP.\",\n            \"homepage\": \"http://psysh.org\",\n            \"keywords\": [\n                \"REPL\",\n                \"console\",\n                \"interactive\",\n                \"shell\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/bobthecow/psysh/issues\",\n                \"source\": \"https://github.com/bobthecow/psysh/tree/v0.12.4\"\n            },\n            \"time\": \"2024-06-10T01:18:23+00:00\"\n        },\n        {\n            \"name\": \"ralouphie/getallheaders\",\n            \"version\": \"3.0.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/ralouphie/getallheaders.git\",\n                \"reference\": \"120b605dfeb996808c31b6477290a714d356e822\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/ralouphie/getallheaders/zipball/120b605dfeb996808c31b6477290a714d356e822\",\n                \"reference\": \"120b605dfeb996808c31b6477290a714d356e822\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.6\"\n            },\n            \"require-dev\": {\n                \"php-coveralls/php-coveralls\": \"^2.1\",\n                \"phpunit/phpunit\": \"^5 || ^6.5\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"src/getallheaders.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Ralph Khattar\",\n                    \"email\": \"ralph.khattar@gmail.com\"\n                }\n            ],\n            \"description\": \"A polyfill for getallheaders.\",\n            \"support\": {\n                \"issues\": \"https://github.com/ralouphie/getallheaders/issues\",\n                \"source\": \"https://github.com/ralouphie/getallheaders/tree/develop\"\n            },\n            \"time\": \"2019-03-08T08:55:37+00:00\"\n        },\n        {\n            \"name\": \"ramsey/collection\",\n            \"version\": \"2.0.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/ramsey/collection.git\",\n                \"reference\": \"a4b48764bfbb8f3a6a4d1aeb1a35bb5e9ecac4a5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/ramsey/collection/zipball/a4b48764bfbb8f3a6a4d1aeb1a35bb5e9ecac4a5\",\n                \"reference\": \"a4b48764bfbb8f3a6a4d1aeb1a35bb5e9ecac4a5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^8.1\"\n            },\n            \"require-dev\": {\n                \"captainhook/plugin-composer\": \"^5.3\",\n                \"ergebnis/composer-normalize\": \"^2.28.3\",\n                \"fakerphp/faker\": \"^1.21\",\n                \"hamcrest/hamcrest-php\": \"^2.0\",\n                \"jangregor/phpstan-prophecy\": \"^1.0\",\n                \"mockery/mockery\": \"^1.5\",\n                \"php-parallel-lint/php-console-highlighter\": \"^1.0\",\n                \"php-parallel-lint/php-parallel-lint\": \"^1.3\",\n                \"phpcsstandards/phpcsutils\": \"^1.0.0-rc1\",\n                \"phpspec/prophecy-phpunit\": \"^2.0\",\n                \"phpstan/extension-installer\": \"^1.2\",\n                \"phpstan/phpstan\": \"^1.9\",\n                \"phpstan/phpstan-mockery\": \"^1.1\",\n                \"phpstan/phpstan-phpunit\": \"^1.3\",\n                \"phpunit/phpunit\": \"^9.5\",\n                \"psalm/plugin-mockery\": \"^1.1\",\n                \"psalm/plugin-phpunit\": \"^0.18.4\",\n                \"ramsey/coding-standard\": \"^2.0.3\",\n                \"ramsey/conventional-commits\": \"^1.3\",\n                \"vimeo/psalm\": \"^5.4\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"captainhook\": {\n                    \"force-install\": true\n                },\n                \"ramsey/conventional-commits\": {\n                    \"configFile\": \"conventional-commits.json\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Ramsey\\\\Collection\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Ben Ramsey\",\n                    \"email\": \"ben@benramsey.com\",\n                    \"homepage\": \"https://benramsey.com\"\n                }\n            ],\n            \"description\": \"A PHP library for representing and manipulating collections.\",\n            \"keywords\": [\n                \"array\",\n                \"collection\",\n                \"hash\",\n                \"map\",\n                \"queue\",\n                \"set\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/ramsey/collection/issues\",\n                \"source\": \"https://github.com/ramsey/collection/tree/2.0.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/ramsey\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/ramsey/collection\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2022-12-31T21:50:55+00:00\"\n        },\n        {\n            \"name\": \"ramsey/uuid\",\n            \"version\": \"4.7.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/ramsey/uuid.git\",\n                \"reference\": \"91039bc1faa45ba123c4328958e620d382ec7088\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/ramsey/uuid/zipball/91039bc1faa45ba123c4328958e620d382ec7088\",\n                \"reference\": \"91039bc1faa45ba123c4328958e620d382ec7088\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"brick/math\": \"^0.8.8 || ^0.9 || ^0.10 || ^0.11 || ^0.12\",\n                \"ext-json\": \"*\",\n                \"php\": \"^8.0\",\n                \"ramsey/collection\": \"^1.2 || ^2.0\"\n            },\n            \"replace\": {\n                \"rhumsaa/uuid\": \"self.version\"\n            },\n            \"require-dev\": {\n                \"captainhook/captainhook\": \"^5.10\",\n                \"captainhook/plugin-composer\": \"^5.3\",\n                \"dealerdirect/phpcodesniffer-composer-installer\": \"^0.7.0\",\n                \"doctrine/annotations\": \"^1.8\",\n                \"ergebnis/composer-normalize\": \"^2.15\",\n                \"mockery/mockery\": \"^1.3\",\n                \"paragonie/random-lib\": \"^2\",\n                \"php-mock/php-mock\": \"^2.2\",\n                \"php-mock/php-mock-mockery\": \"^1.3\",\n                \"php-parallel-lint/php-parallel-lint\": \"^1.1\",\n                \"phpbench/phpbench\": \"^1.0\",\n                \"phpstan/extension-installer\": \"^1.1\",\n                \"phpstan/phpstan\": \"^1.8\",\n                \"phpstan/phpstan-mockery\": \"^1.1\",\n                \"phpstan/phpstan-phpunit\": \"^1.1\",\n                \"phpunit/phpunit\": \"^8.5 || ^9\",\n                \"ramsey/composer-repl\": \"^1.4\",\n                \"slevomat/coding-standard\": \"^8.4\",\n                \"squizlabs/php_codesniffer\": \"^3.5\",\n                \"vimeo/psalm\": \"^4.9\"\n            },\n            \"suggest\": {\n                \"ext-bcmath\": \"Enables faster math with arbitrary-precision integers using BCMath.\",\n                \"ext-gmp\": \"Enables faster math with arbitrary-precision integers using GMP.\",\n                \"ext-uuid\": \"Enables the use of PeclUuidTimeGenerator and PeclUuidRandomGenerator.\",\n                \"paragonie/random-lib\": \"Provides RandomLib for use with the RandomLibAdapter\",\n                \"ramsey/uuid-doctrine\": \"Allows the use of Ramsey\\\\Uuid\\\\Uuid as Doctrine field type.\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"captainhook\": {\n                    \"force-install\": true\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"src/functions.php\"\n                ],\n                \"psr-4\": {\n                    \"Ramsey\\\\Uuid\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"description\": \"A PHP library for generating and working with universally unique identifiers (UUIDs).\",\n            \"keywords\": [\n                \"guid\",\n                \"identifier\",\n                \"uuid\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/ramsey/uuid/issues\",\n                \"source\": \"https://github.com/ramsey/uuid/tree/4.7.6\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/ramsey\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/ramsey/uuid\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-04-27T21:32:50+00:00\"\n        },\n        {\n            \"name\": \"socialiteproviders/manager\",\n            \"version\": \"v4.7.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/SocialiteProviders/Manager.git\",\n                \"reference\": \"ab0691b82cec77efd90154c78f1854903455c82f\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/SocialiteProviders/Manager/zipball/ab0691b82cec77efd90154c78f1854903455c82f\",\n                \"reference\": \"ab0691b82cec77efd90154c78f1854903455c82f\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"illuminate/support\": \"^8.0 || ^9.0 || ^10.0 || ^11.0\",\n                \"laravel/socialite\": \"^5.5\",\n                \"php\": \"^8.0\"\n            },\n            \"require-dev\": {\n                \"mockery/mockery\": \"^1.2\",\n                \"phpunit/phpunit\": \"^9.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"laravel\": {\n                    \"providers\": [\n                        \"SocialiteProviders\\\\Manager\\\\ServiceProvider\"\n                    ]\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"SocialiteProviders\\\\Manager\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Andy Wendt\",\n                    \"email\": \"andy@awendt.com\"\n                },\n                {\n                    \"name\": \"Anton Komarev\",\n                    \"email\": \"a.komarev@cybercog.su\"\n                },\n                {\n                    \"name\": \"Miguel Piedrafita\",\n                    \"email\": \"soy@miguelpiedrafita.com\"\n                },\n                {\n                    \"name\": \"atymic\",\n                    \"email\": \"atymicq@gmail.com\",\n                    \"homepage\": \"https://atymic.dev\"\n                }\n            ],\n            \"description\": \"Easily add new or override built-in providers in Laravel Socialite.\",\n            \"homepage\": \"https://socialiteproviders.com\",\n            \"keywords\": [\n                \"laravel\",\n                \"manager\",\n                \"oauth\",\n                \"providers\",\n                \"socialite\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/socialiteproviders/manager/issues\",\n                \"source\": \"https://github.com/socialiteproviders/manager\"\n            },\n            \"time\": \"2024-11-10T01:56:18+00:00\"\n        },\n        {\n            \"name\": \"spatie/eloquent-sortable\",\n            \"version\": \"4.4.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/spatie/eloquent-sortable.git\",\n                \"reference\": \"7a460c775d29741f42744bac52f993cb5b84be0f\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/spatie/eloquent-sortable/zipball/7a460c775d29741f42744bac52f993cb5b84be0f\",\n                \"reference\": \"7a460c775d29741f42744bac52f993cb5b84be0f\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"illuminate/database\": \"^9.31|^10.0|^11.0\",\n                \"illuminate/support\": \"^9.31|^10.0|^11.0\",\n                \"nesbot/carbon\": \"^2.63|^3.0\",\n                \"php\": \"^8.1\",\n                \"spatie/laravel-package-tools\": \"^1.9\"\n            },\n            \"require-dev\": {\n                \"orchestra/testbench\": \"^7.0|^8.0|^9.0\",\n                \"phpunit/phpunit\": \"^9.5|^10.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"laravel\": {\n                    \"providers\": [\n                        \"Spatie\\\\EloquentSortable\\\\EloquentSortableServiceProvider\"\n                    ]\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Spatie\\\\EloquentSortable\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Freek Van der Herten\",\n                    \"email\": \"freek@spatie.be\"\n                }\n            ],\n            \"description\": \"Sortable behaviour for eloquent models\",\n            \"homepage\": \"https://github.com/spatie/eloquent-sortable\",\n            \"keywords\": [\n                \"behaviour\",\n                \"eloquent\",\n                \"laravel\",\n                \"model\",\n                \"sort\",\n                \"sortable\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/spatie/eloquent-sortable/issues\",\n                \"source\": \"https://github.com/spatie/eloquent-sortable/tree/4.4.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://spatie.be/open-source/support-us\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/spatie\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-06-04T11:09:54+00:00\"\n        },\n        {\n            \"name\": \"spatie/laravel-package-tools\",\n            \"version\": \"1.16.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/spatie/laravel-package-tools.git\",\n                \"reference\": \"c7413972cf22ffdff97b68499c22baa04eddb6a2\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/spatie/laravel-package-tools/zipball/c7413972cf22ffdff97b68499c22baa04eddb6a2\",\n                \"reference\": \"c7413972cf22ffdff97b68499c22baa04eddb6a2\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"illuminate/contracts\": \"^9.28|^10.0|^11.0\",\n                \"php\": \"^8.0\"\n            },\n            \"require-dev\": {\n                \"mockery/mockery\": \"^1.5\",\n                \"orchestra/testbench\": \"^7.7|^8.0\",\n                \"pestphp/pest\": \"^1.22\",\n                \"phpunit/phpunit\": \"^9.5.24\",\n                \"spatie/pest-plugin-test-time\": \"^1.1\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Spatie\\\\LaravelPackageTools\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Freek Van der Herten\",\n                    \"email\": \"freek@spatie.be\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"Tools for creating Laravel packages\",\n            \"homepage\": \"https://github.com/spatie/laravel-package-tools\",\n            \"keywords\": [\n                \"laravel-package-tools\",\n                \"spatie\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/spatie/laravel-package-tools/issues\",\n                \"source\": \"https://github.com/spatie/laravel-package-tools/tree/1.16.5\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/spatie\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-08-27T18:56:10+00:00\"\n        },\n        {\n            \"name\": \"spomky-labs/otphp\",\n            \"version\": \"11.3.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/Spomky-Labs/otphp.git\",\n                \"reference\": \"2d8ccb5fc992b9cc65ef321fa4f00fefdb3f4b33\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/Spomky-Labs/otphp/zipball/2d8ccb5fc992b9cc65ef321fa4f00fefdb3f4b33\",\n                \"reference\": \"2d8ccb5fc992b9cc65ef321fa4f00fefdb3f4b33\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-mbstring\": \"*\",\n                \"paragonie/constant_time_encoding\": \"^2.0 || ^3.0\",\n                \"php\": \">=8.1\",\n                \"psr/clock\": \"^1.0\",\n                \"symfony/deprecation-contracts\": \"^3.2\"\n            },\n            \"require-dev\": {\n                \"ekino/phpstan-banned-code\": \"^1.0\",\n                \"infection/infection\": \"^0.26|^0.27|^0.28|^0.29\",\n                \"php-parallel-lint/php-parallel-lint\": \"^1.3\",\n                \"phpstan/phpstan\": \"^1.0\",\n                \"phpstan/phpstan-deprecation-rules\": \"^1.0\",\n                \"phpstan/phpstan-phpunit\": \"^1.0\",\n                \"phpstan/phpstan-strict-rules\": \"^1.0\",\n                \"phpunit/phpunit\": \"^9.5.26|^10.0|^11.0\",\n                \"qossmic/deptrac-shim\": \"^1.0\",\n                \"rector/rector\": \"^1.0\",\n                \"symfony/phpunit-bridge\": \"^6.1|^7.0\",\n                \"symplify/easy-coding-standard\": \"^12.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"OTPHP\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Florent Morselli\",\n                    \"homepage\": \"https://github.com/Spomky\"\n                },\n                {\n                    \"name\": \"All contributors\",\n                    \"homepage\": \"https://github.com/Spomky-Labs/otphp/contributors\"\n                }\n            ],\n            \"description\": \"A PHP library for generating one time passwords according to RFC 4226 (HOTP Algorithm) and the RFC 6238 (TOTP Algorithm) and compatible with Google Authenticator\",\n            \"homepage\": \"https://github.com/Spomky-Labs/otphp\",\n            \"keywords\": [\n                \"FreeOTP\",\n                \"RFC 4226\",\n                \"RFC 6238\",\n                \"google authenticator\",\n                \"hotp\",\n                \"otp\",\n                \"totp\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/Spomky-Labs/otphp/issues\",\n                \"source\": \"https://github.com/Spomky-Labs/otphp/tree/11.3.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/Spomky\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://www.patreon.com/FlorentMorselli\",\n                    \"type\": \"patreon\"\n                }\n            ],\n            \"time\": \"2024-06-12T11:22:32+00:00\"\n        },\n        {\n            \"name\": \"symfony/clock\",\n            \"version\": \"v7.1.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/clock.git\",\n                \"reference\": \"97bebc53548684c17ed696bc8af016880f0f098d\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/clock/zipball/97bebc53548684c17ed696bc8af016880f0f098d\",\n                \"reference\": \"97bebc53548684c17ed696bc8af016880f0f098d\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\",\n                \"psr/clock\": \"^1.0\",\n                \"symfony/polyfill-php83\": \"^1.28\"\n            },\n            \"provide\": {\n                \"psr/clock-implementation\": \"1.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"Resources/now.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Clock\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Decouples applications from the system clock\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"clock\",\n                \"psr20\",\n                \"time\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/clock/tree/v7.1.6\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-25T14:20:29+00:00\"\n        },\n        {\n            \"name\": \"symfony/console\",\n            \"version\": \"v7.1.8\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/console.git\",\n                \"reference\": \"ff04e5b5ba043d2badfb308197b9e6b42883fcd5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/console/zipball/ff04e5b5ba043d2badfb308197b9e6b42883fcd5\",\n                \"reference\": \"ff04e5b5ba043d2badfb308197b9e6b42883fcd5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\",\n                \"symfony/polyfill-mbstring\": \"~1.0\",\n                \"symfony/service-contracts\": \"^2.5|^3\",\n                \"symfony/string\": \"^6.4|^7.0\"\n            },\n            \"conflict\": {\n                \"symfony/dependency-injection\": \"<6.4\",\n                \"symfony/dotenv\": \"<6.4\",\n                \"symfony/event-dispatcher\": \"<6.4\",\n                \"symfony/lock\": \"<6.4\",\n                \"symfony/process\": \"<6.4\"\n            },\n            \"provide\": {\n                \"psr/log-implementation\": \"1.0|2.0|3.0\"\n            },\n            \"require-dev\": {\n                \"psr/log\": \"^1|^2|^3\",\n                \"symfony/config\": \"^6.4|^7.0\",\n                \"symfony/dependency-injection\": \"^6.4|^7.0\",\n                \"symfony/event-dispatcher\": \"^6.4|^7.0\",\n                \"symfony/http-foundation\": \"^6.4|^7.0\",\n                \"symfony/http-kernel\": \"^6.4|^7.0\",\n                \"symfony/lock\": \"^6.4|^7.0\",\n                \"symfony/messenger\": \"^6.4|^7.0\",\n                \"symfony/process\": \"^6.4|^7.0\",\n                \"symfony/stopwatch\": \"^6.4|^7.0\",\n                \"symfony/var-dumper\": \"^6.4|^7.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Console\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Eases the creation of beautiful and testable command line interfaces\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"cli\",\n                \"command-line\",\n                \"console\",\n                \"terminal\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/console/tree/v7.1.8\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-11-06T14:23:19+00:00\"\n        },\n        {\n            \"name\": \"symfony/css-selector\",\n            \"version\": \"v7.1.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/css-selector.git\",\n                \"reference\": \"4aa4f6b3d6749c14d3aa815eef8226632e7bbc66\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/css-selector/zipball/4aa4f6b3d6749c14d3aa815eef8226632e7bbc66\",\n                \"reference\": \"4aa4f6b3d6749c14d3aa815eef8226632e7bbc66\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\CssSelector\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Jean-François Simon\",\n                    \"email\": \"jeanfrancois.simon@sensiolabs.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Converts CSS selectors to XPath expressions\",\n            \"homepage\": \"https://symfony.com\",\n            \"support\": {\n                \"source\": \"https://github.com/symfony/css-selector/tree/v7.1.6\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-25T14:20:29+00:00\"\n        },\n        {\n            \"name\": \"symfony/deprecation-contracts\",\n            \"version\": \"v3.5.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/deprecation-contracts.git\",\n                \"reference\": \"0e0d29ce1f20deffb4ab1b016a7257c4f1e789a1\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/deprecation-contracts/zipball/0e0d29ce1f20deffb4ab1b016a7257c4f1e789a1\",\n                \"reference\": \"0e0d29ce1f20deffb4ab1b016a7257c4f1e789a1\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.1\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"3.5-dev\"\n                },\n                \"thanks\": {\n                    \"name\": \"symfony/contracts\",\n                    \"url\": \"https://github.com/symfony/contracts\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"function.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"A generic function and convention to trigger deprecation notices\",\n            \"homepage\": \"https://symfony.com\",\n            \"support\": {\n                \"source\": \"https://github.com/symfony/deprecation-contracts/tree/v3.5.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-04-18T09:32:20+00:00\"\n        },\n        {\n            \"name\": \"symfony/error-handler\",\n            \"version\": \"v7.1.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/error-handler.git\",\n                \"reference\": \"010e44661f4c6babaf8c4862fe68c24a53903342\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/error-handler/zipball/010e44661f4c6babaf8c4862fe68c24a53903342\",\n                \"reference\": \"010e44661f4c6babaf8c4862fe68c24a53903342\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\",\n                \"psr/log\": \"^1|^2|^3\",\n                \"symfony/var-dumper\": \"^6.4|^7.0\"\n            },\n            \"conflict\": {\n                \"symfony/deprecation-contracts\": \"<2.5\",\n                \"symfony/http-kernel\": \"<6.4\"\n            },\n            \"require-dev\": {\n                \"symfony/deprecation-contracts\": \"^2.5|^3\",\n                \"symfony/http-kernel\": \"^6.4|^7.0\",\n                \"symfony/serializer\": \"^6.4|^7.0\"\n            },\n            \"bin\": [\n                \"Resources/bin/patch-type-declarations\"\n            ],\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\ErrorHandler\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Provides tools to manage errors and ease debugging PHP code\",\n            \"homepage\": \"https://symfony.com\",\n            \"support\": {\n                \"source\": \"https://github.com/symfony/error-handler/tree/v7.1.7\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-11-05T15:34:55+00:00\"\n        },\n        {\n            \"name\": \"symfony/event-dispatcher\",\n            \"version\": \"v7.1.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/event-dispatcher.git\",\n                \"reference\": \"87254c78dd50721cfd015b62277a8281c5589702\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/event-dispatcher/zipball/87254c78dd50721cfd015b62277a8281c5589702\",\n                \"reference\": \"87254c78dd50721cfd015b62277a8281c5589702\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\",\n                \"symfony/event-dispatcher-contracts\": \"^2.5|^3\"\n            },\n            \"conflict\": {\n                \"symfony/dependency-injection\": \"<6.4\",\n                \"symfony/service-contracts\": \"<2.5\"\n            },\n            \"provide\": {\n                \"psr/event-dispatcher-implementation\": \"1.0\",\n                \"symfony/event-dispatcher-implementation\": \"2.0|3.0\"\n            },\n            \"require-dev\": {\n                \"psr/log\": \"^1|^2|^3\",\n                \"symfony/config\": \"^6.4|^7.0\",\n                \"symfony/dependency-injection\": \"^6.4|^7.0\",\n                \"symfony/error-handler\": \"^6.4|^7.0\",\n                \"symfony/expression-language\": \"^6.4|^7.0\",\n                \"symfony/http-foundation\": \"^6.4|^7.0\",\n                \"symfony/service-contracts\": \"^2.5|^3\",\n                \"symfony/stopwatch\": \"^6.4|^7.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\EventDispatcher\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Provides tools that allow your application components to communicate with each other by dispatching events and listening to them\",\n            \"homepage\": \"https://symfony.com\",\n            \"support\": {\n                \"source\": \"https://github.com/symfony/event-dispatcher/tree/v7.1.6\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-25T14:20:29+00:00\"\n        },\n        {\n            \"name\": \"symfony/event-dispatcher-contracts\",\n            \"version\": \"v3.5.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/event-dispatcher-contracts.git\",\n                \"reference\": \"8f93aec25d41b72493c6ddff14e916177c9efc50\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/event-dispatcher-contracts/zipball/8f93aec25d41b72493c6ddff14e916177c9efc50\",\n                \"reference\": \"8f93aec25d41b72493c6ddff14e916177c9efc50\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.1\",\n                \"psr/event-dispatcher\": \"^1\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"3.5-dev\"\n                },\n                \"thanks\": {\n                    \"name\": \"symfony/contracts\",\n                    \"url\": \"https://github.com/symfony/contracts\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Contracts\\\\EventDispatcher\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Generic abstractions related to dispatching event\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"abstractions\",\n                \"contracts\",\n                \"decoupling\",\n                \"interfaces\",\n                \"interoperability\",\n                \"standards\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/event-dispatcher-contracts/tree/v3.5.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-04-18T09:32:20+00:00\"\n        },\n        {\n            \"name\": \"symfony/finder\",\n            \"version\": \"v7.1.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/finder.git\",\n                \"reference\": \"2cb89664897be33f78c65d3d2845954c8d7a43b8\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/finder/zipball/2cb89664897be33f78c65d3d2845954c8d7a43b8\",\n                \"reference\": \"2cb89664897be33f78c65d3d2845954c8d7a43b8\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\"\n            },\n            \"require-dev\": {\n                \"symfony/filesystem\": \"^6.4|^7.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Finder\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Finds files and directories via an intuitive fluent interface\",\n            \"homepage\": \"https://symfony.com\",\n            \"support\": {\n                \"source\": \"https://github.com/symfony/finder/tree/v7.1.6\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-10-01T08:31:23+00:00\"\n        },\n        {\n            \"name\": \"symfony/http-foundation\",\n            \"version\": \"v7.1.8\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/http-foundation.git\",\n                \"reference\": \"f4419ec69ccfc3f725a4de7c20e4e57626d10112\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/http-foundation/zipball/f4419ec69ccfc3f725a4de7c20e4e57626d10112\",\n                \"reference\": \"f4419ec69ccfc3f725a4de7c20e4e57626d10112\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\",\n                \"symfony/polyfill-mbstring\": \"~1.1\",\n                \"symfony/polyfill-php83\": \"^1.27\"\n            },\n            \"conflict\": {\n                \"doctrine/dbal\": \"<3.6\",\n                \"symfony/cache\": \"<6.4.12|>=7.0,<7.1.5\"\n            },\n            \"require-dev\": {\n                \"doctrine/dbal\": \"^3.6|^4\",\n                \"predis/predis\": \"^1.1|^2.0\",\n                \"symfony/cache\": \"^6.4.12|^7.1.5\",\n                \"symfony/dependency-injection\": \"^6.4|^7.0\",\n                \"symfony/expression-language\": \"^6.4|^7.0\",\n                \"symfony/http-kernel\": \"^6.4|^7.0\",\n                \"symfony/mime\": \"^6.4|^7.0\",\n                \"symfony/rate-limiter\": \"^6.4|^7.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\HttpFoundation\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Defines an object-oriented layer for the HTTP specification\",\n            \"homepage\": \"https://symfony.com\",\n            \"support\": {\n                \"source\": \"https://github.com/symfony/http-foundation/tree/v7.1.8\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-11-09T09:16:45+00:00\"\n        },\n        {\n            \"name\": \"symfony/http-kernel\",\n            \"version\": \"v7.1.8\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/http-kernel.git\",\n                \"reference\": \"33fef24e3dc79d6d30bf4936531f2f4bd2ca189e\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/http-kernel/zipball/33fef24e3dc79d6d30bf4936531f2f4bd2ca189e\",\n                \"reference\": \"33fef24e3dc79d6d30bf4936531f2f4bd2ca189e\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\",\n                \"psr/log\": \"^1|^2|^3\",\n                \"symfony/deprecation-contracts\": \"^2.5|^3\",\n                \"symfony/error-handler\": \"^6.4|^7.0\",\n                \"symfony/event-dispatcher\": \"^6.4|^7.0\",\n                \"symfony/http-foundation\": \"^6.4|^7.0\",\n                \"symfony/polyfill-ctype\": \"^1.8\"\n            },\n            \"conflict\": {\n                \"symfony/browser-kit\": \"<6.4\",\n                \"symfony/cache\": \"<6.4\",\n                \"symfony/config\": \"<6.4\",\n                \"symfony/console\": \"<6.4\",\n                \"symfony/dependency-injection\": \"<6.4\",\n                \"symfony/doctrine-bridge\": \"<6.4\",\n                \"symfony/form\": \"<6.4\",\n                \"symfony/http-client\": \"<6.4\",\n                \"symfony/http-client-contracts\": \"<2.5\",\n                \"symfony/mailer\": \"<6.4\",\n                \"symfony/messenger\": \"<6.4\",\n                \"symfony/translation\": \"<6.4\",\n                \"symfony/translation-contracts\": \"<2.5\",\n                \"symfony/twig-bridge\": \"<6.4\",\n                \"symfony/validator\": \"<6.4\",\n                \"symfony/var-dumper\": \"<6.4\",\n                \"twig/twig\": \"<3.0.4\"\n            },\n            \"provide\": {\n                \"psr/log-implementation\": \"1.0|2.0|3.0\"\n            },\n            \"require-dev\": {\n                \"psr/cache\": \"^1.0|^2.0|^3.0\",\n                \"symfony/browser-kit\": \"^6.4|^7.0\",\n                \"symfony/clock\": \"^6.4|^7.0\",\n                \"symfony/config\": \"^6.4|^7.0\",\n                \"symfony/console\": \"^6.4|^7.0\",\n                \"symfony/css-selector\": \"^6.4|^7.0\",\n                \"symfony/dependency-injection\": \"^6.4|^7.0\",\n                \"symfony/dom-crawler\": \"^6.4|^7.0\",\n                \"symfony/expression-language\": \"^6.4|^7.0\",\n                \"symfony/finder\": \"^6.4|^7.0\",\n                \"symfony/http-client-contracts\": \"^2.5|^3\",\n                \"symfony/process\": \"^6.4|^7.0\",\n                \"symfony/property-access\": \"^7.1\",\n                \"symfony/routing\": \"^6.4|^7.0\",\n                \"symfony/serializer\": \"^7.1\",\n                \"symfony/stopwatch\": \"^6.4|^7.0\",\n                \"symfony/translation\": \"^6.4|^7.0\",\n                \"symfony/translation-contracts\": \"^2.5|^3\",\n                \"symfony/uid\": \"^6.4|^7.0\",\n                \"symfony/validator\": \"^6.4|^7.0\",\n                \"symfony/var-dumper\": \"^6.4|^7.0\",\n                \"symfony/var-exporter\": \"^6.4|^7.0\",\n                \"twig/twig\": \"^3.0.4\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\HttpKernel\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Provides a structured process for converting a Request into a Response\",\n            \"homepage\": \"https://symfony.com\",\n            \"support\": {\n                \"source\": \"https://github.com/symfony/http-kernel/tree/v7.1.8\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-11-13T14:25:32+00:00\"\n        },\n        {\n            \"name\": \"symfony/mailer\",\n            \"version\": \"v7.1.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/mailer.git\",\n                \"reference\": \"69c9948451fb3a6a4d47dc8261d1794734e76cdd\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/mailer/zipball/69c9948451fb3a6a4d47dc8261d1794734e76cdd\",\n                \"reference\": \"69c9948451fb3a6a4d47dc8261d1794734e76cdd\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"egulias/email-validator\": \"^2.1.10|^3|^4\",\n                \"php\": \">=8.2\",\n                \"psr/event-dispatcher\": \"^1\",\n                \"psr/log\": \"^1|^2|^3\",\n                \"symfony/event-dispatcher\": \"^6.4|^7.0\",\n                \"symfony/mime\": \"^6.4|^7.0\",\n                \"symfony/service-contracts\": \"^2.5|^3\"\n            },\n            \"conflict\": {\n                \"symfony/http-client-contracts\": \"<2.5\",\n                \"symfony/http-kernel\": \"<6.4\",\n                \"symfony/messenger\": \"<6.4\",\n                \"symfony/mime\": \"<6.4\",\n                \"symfony/twig-bridge\": \"<6.4\"\n            },\n            \"require-dev\": {\n                \"symfony/console\": \"^6.4|^7.0\",\n                \"symfony/http-client\": \"^6.4|^7.0\",\n                \"symfony/messenger\": \"^6.4|^7.0\",\n                \"symfony/twig-bridge\": \"^6.4|^7.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Mailer\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Helps sending emails\",\n            \"homepage\": \"https://symfony.com\",\n            \"support\": {\n                \"source\": \"https://github.com/symfony/mailer/tree/v7.1.6\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-25T14:20:29+00:00\"\n        },\n        {\n            \"name\": \"symfony/mime\",\n            \"version\": \"v7.1.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/mime.git\",\n                \"reference\": \"caa1e521edb2650b8470918dfe51708c237f0598\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/mime/zipball/caa1e521edb2650b8470918dfe51708c237f0598\",\n                \"reference\": \"caa1e521edb2650b8470918dfe51708c237f0598\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\",\n                \"symfony/polyfill-intl-idn\": \"^1.10\",\n                \"symfony/polyfill-mbstring\": \"^1.0\"\n            },\n            \"conflict\": {\n                \"egulias/email-validator\": \"~3.0.0\",\n                \"phpdocumentor/reflection-docblock\": \"<3.2.2\",\n                \"phpdocumentor/type-resolver\": \"<1.4.0\",\n                \"symfony/mailer\": \"<6.4\",\n                \"symfony/serializer\": \"<6.4.3|>7.0,<7.0.3\"\n            },\n            \"require-dev\": {\n                \"egulias/email-validator\": \"^2.1.10|^3.1|^4\",\n                \"league/html-to-markdown\": \"^5.0\",\n                \"phpdocumentor/reflection-docblock\": \"^3.0|^4.0|^5.0\",\n                \"symfony/dependency-injection\": \"^6.4|^7.0\",\n                \"symfony/process\": \"^6.4|^7.0\",\n                \"symfony/property-access\": \"^6.4|^7.0\",\n                \"symfony/property-info\": \"^6.4|^7.0\",\n                \"symfony/serializer\": \"^6.4.3|^7.0.3\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Mime\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Allows manipulating MIME messages\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"mime\",\n                \"mime-type\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/mime/tree/v7.1.6\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-10-25T15:11:02+00:00\"\n        },\n        {\n            \"name\": \"symfony/polyfill-ctype\",\n            \"version\": \"v1.31.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/polyfill-ctype.git\",\n                \"reference\": \"a3cc8b044a6ea513310cbd48ef7333b384945638\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-ctype/zipball/a3cc8b044a6ea513310cbd48ef7333b384945638\",\n                \"reference\": \"a3cc8b044a6ea513310cbd48ef7333b384945638\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2\"\n            },\n            \"provide\": {\n                \"ext-ctype\": \"*\"\n            },\n            \"suggest\": {\n                \"ext-ctype\": \"For best performance\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"thanks\": {\n                    \"name\": \"symfony/polyfill\",\n                    \"url\": \"https://github.com/symfony/polyfill\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"bootstrap.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Polyfill\\\\Ctype\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Gert de Pagter\",\n                    \"email\": \"BackEndTea@gmail.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony polyfill for ctype functions\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"compatibility\",\n                \"ctype\",\n                \"polyfill\",\n                \"portable\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/polyfill-ctype/tree/v1.31.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-09T11:45:10+00:00\"\n        },\n        {\n            \"name\": \"symfony/polyfill-intl-grapheme\",\n            \"version\": \"v1.31.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/polyfill-intl-grapheme.git\",\n                \"reference\": \"b9123926e3b7bc2f98c02ad54f6a4b02b91a8abe\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-intl-grapheme/zipball/b9123926e3b7bc2f98c02ad54f6a4b02b91a8abe\",\n                \"reference\": \"b9123926e3b7bc2f98c02ad54f6a4b02b91a8abe\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2\"\n            },\n            \"suggest\": {\n                \"ext-intl\": \"For best performance\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"thanks\": {\n                    \"name\": \"symfony/polyfill\",\n                    \"url\": \"https://github.com/symfony/polyfill\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"bootstrap.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Polyfill\\\\Intl\\\\Grapheme\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony polyfill for intl's grapheme_* functions\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"compatibility\",\n                \"grapheme\",\n                \"intl\",\n                \"polyfill\",\n                \"portable\",\n                \"shim\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/polyfill-intl-grapheme/tree/v1.31.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-09T11:45:10+00:00\"\n        },\n        {\n            \"name\": \"symfony/polyfill-intl-idn\",\n            \"version\": \"v1.31.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/polyfill-intl-idn.git\",\n                \"reference\": \"c36586dcf89a12315939e00ec9b4474adcb1d773\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-intl-idn/zipball/c36586dcf89a12315939e00ec9b4474adcb1d773\",\n                \"reference\": \"c36586dcf89a12315939e00ec9b4474adcb1d773\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2\",\n                \"symfony/polyfill-intl-normalizer\": \"^1.10\"\n            },\n            \"suggest\": {\n                \"ext-intl\": \"For best performance\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"thanks\": {\n                    \"name\": \"symfony/polyfill\",\n                    \"url\": \"https://github.com/symfony/polyfill\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"bootstrap.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Polyfill\\\\Intl\\\\Idn\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Laurent Bassin\",\n                    \"email\": \"laurent@bassin.info\"\n                },\n                {\n                    \"name\": \"Trevor Rowbotham\",\n                    \"email\": \"trevor.rowbotham@pm.me\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony polyfill for intl's idn_to_ascii and idn_to_utf8 functions\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"compatibility\",\n                \"idn\",\n                \"intl\",\n                \"polyfill\",\n                \"portable\",\n                \"shim\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/polyfill-intl-idn/tree/v1.31.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-09T11:45:10+00:00\"\n        },\n        {\n            \"name\": \"symfony/polyfill-intl-normalizer\",\n            \"version\": \"v1.31.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/polyfill-intl-normalizer.git\",\n                \"reference\": \"3833d7255cc303546435cb650316bff708a1c75c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-intl-normalizer/zipball/3833d7255cc303546435cb650316bff708a1c75c\",\n                \"reference\": \"3833d7255cc303546435cb650316bff708a1c75c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2\"\n            },\n            \"suggest\": {\n                \"ext-intl\": \"For best performance\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"thanks\": {\n                    \"name\": \"symfony/polyfill\",\n                    \"url\": \"https://github.com/symfony/polyfill\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"bootstrap.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Polyfill\\\\Intl\\\\Normalizer\\\\\": \"\"\n                },\n                \"classmap\": [\n                    \"Resources/stubs\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony polyfill for intl's Normalizer class and related functions\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"compatibility\",\n                \"intl\",\n                \"normalizer\",\n                \"polyfill\",\n                \"portable\",\n                \"shim\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/polyfill-intl-normalizer/tree/v1.31.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-09T11:45:10+00:00\"\n        },\n        {\n            \"name\": \"symfony/polyfill-mbstring\",\n            \"version\": \"v1.31.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/polyfill-mbstring.git\",\n                \"reference\": \"85181ba99b2345b0ef10ce42ecac37612d9fd341\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-mbstring/zipball/85181ba99b2345b0ef10ce42ecac37612d9fd341\",\n                \"reference\": \"85181ba99b2345b0ef10ce42ecac37612d9fd341\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2\"\n            },\n            \"provide\": {\n                \"ext-mbstring\": \"*\"\n            },\n            \"suggest\": {\n                \"ext-mbstring\": \"For best performance\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"thanks\": {\n                    \"name\": \"symfony/polyfill\",\n                    \"url\": \"https://github.com/symfony/polyfill\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"bootstrap.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Polyfill\\\\Mbstring\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony polyfill for the Mbstring extension\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"compatibility\",\n                \"mbstring\",\n                \"polyfill\",\n                \"portable\",\n                \"shim\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/polyfill-mbstring/tree/v1.31.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-09T11:45:10+00:00\"\n        },\n        {\n            \"name\": \"symfony/polyfill-php80\",\n            \"version\": \"v1.31.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/polyfill-php80.git\",\n                \"reference\": \"60328e362d4c2c802a54fcbf04f9d3fb892b4cf8\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-php80/zipball/60328e362d4c2c802a54fcbf04f9d3fb892b4cf8\",\n                \"reference\": \"60328e362d4c2c802a54fcbf04f9d3fb892b4cf8\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"thanks\": {\n                    \"name\": \"symfony/polyfill\",\n                    \"url\": \"https://github.com/symfony/polyfill\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"bootstrap.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Polyfill\\\\Php80\\\\\": \"\"\n                },\n                \"classmap\": [\n                    \"Resources/stubs\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Ion Bazan\",\n                    \"email\": \"ion.bazan@gmail.com\"\n                },\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony polyfill backporting some PHP 8.0+ features to lower PHP versions\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"compatibility\",\n                \"polyfill\",\n                \"portable\",\n                \"shim\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/polyfill-php80/tree/v1.31.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-09T11:45:10+00:00\"\n        },\n        {\n            \"name\": \"symfony/polyfill-php83\",\n            \"version\": \"v1.31.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/polyfill-php83.git\",\n                \"reference\": \"2fb86d65e2d424369ad2905e83b236a8805ba491\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-php83/zipball/2fb86d65e2d424369ad2905e83b236a8805ba491\",\n                \"reference\": \"2fb86d65e2d424369ad2905e83b236a8805ba491\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"thanks\": {\n                    \"name\": \"symfony/polyfill\",\n                    \"url\": \"https://github.com/symfony/polyfill\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"bootstrap.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Polyfill\\\\Php83\\\\\": \"\"\n                },\n                \"classmap\": [\n                    \"Resources/stubs\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony polyfill backporting some PHP 8.3+ features to lower PHP versions\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"compatibility\",\n                \"polyfill\",\n                \"portable\",\n                \"shim\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/polyfill-php83/tree/v1.31.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-09T11:45:10+00:00\"\n        },\n        {\n            \"name\": \"symfony/polyfill-uuid\",\n            \"version\": \"v1.31.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/polyfill-uuid.git\",\n                \"reference\": \"21533be36c24be3f4b1669c4725c7d1d2bab4ae2\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-uuid/zipball/21533be36c24be3f4b1669c4725c7d1d2bab4ae2\",\n                \"reference\": \"21533be36c24be3f4b1669c4725c7d1d2bab4ae2\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2\"\n            },\n            \"provide\": {\n                \"ext-uuid\": \"*\"\n            },\n            \"suggest\": {\n                \"ext-uuid\": \"For best performance\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"thanks\": {\n                    \"name\": \"symfony/polyfill\",\n                    \"url\": \"https://github.com/symfony/polyfill\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"bootstrap.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Polyfill\\\\Uuid\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Grégoire Pineau\",\n                    \"email\": \"lyrixx@lyrixx.info\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony polyfill for uuid functions\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"compatibility\",\n                \"polyfill\",\n                \"portable\",\n                \"uuid\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/polyfill-uuid/tree/v1.31.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-09T11:45:10+00:00\"\n        },\n        {\n            \"name\": \"symfony/process\",\n            \"version\": \"v7.1.8\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/process.git\",\n                \"reference\": \"42783370fda6e538771f7c7a36e9fa2ee3a84892\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/process/zipball/42783370fda6e538771f7c7a36e9fa2ee3a84892\",\n                \"reference\": \"42783370fda6e538771f7c7a36e9fa2ee3a84892\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Process\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Executes commands in sub-processes\",\n            \"homepage\": \"https://symfony.com\",\n            \"support\": {\n                \"source\": \"https://github.com/symfony/process/tree/v7.1.8\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-11-06T14:23:19+00:00\"\n        },\n        {\n            \"name\": \"symfony/psr-http-message-bridge\",\n            \"version\": \"v7.1.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/psr-http-message-bridge.git\",\n                \"reference\": \"f16471bb19f6685b9ccf0a2c03c213840ae68cd6\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/psr-http-message-bridge/zipball/f16471bb19f6685b9ccf0a2c03c213840ae68cd6\",\n                \"reference\": \"f16471bb19f6685b9ccf0a2c03c213840ae68cd6\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\",\n                \"psr/http-message\": \"^1.0|^2.0\",\n                \"symfony/http-foundation\": \"^6.4|^7.0\"\n            },\n            \"conflict\": {\n                \"php-http/discovery\": \"<1.15\",\n                \"symfony/http-kernel\": \"<6.4\"\n            },\n            \"require-dev\": {\n                \"nyholm/psr7\": \"^1.1\",\n                \"php-http/discovery\": \"^1.15\",\n                \"psr/log\": \"^1.1.4|^2|^3\",\n                \"symfony/browser-kit\": \"^6.4|^7.0\",\n                \"symfony/config\": \"^6.4|^7.0\",\n                \"symfony/event-dispatcher\": \"^6.4|^7.0\",\n                \"symfony/framework-bundle\": \"^6.4|^7.0\",\n                \"symfony/http-kernel\": \"^6.4|^7.0\"\n            },\n            \"type\": \"symfony-bridge\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Bridge\\\\PsrHttpMessage\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"PSR HTTP message bridge\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"http\",\n                \"http-message\",\n                \"psr-17\",\n                \"psr-7\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/psr-http-message-bridge/tree/v7.1.6\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-25T14:20:29+00:00\"\n        },\n        {\n            \"name\": \"symfony/routing\",\n            \"version\": \"v7.1.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/routing.git\",\n                \"reference\": \"66a2c469f6c22d08603235c46a20007c0701ea0a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/routing/zipball/66a2c469f6c22d08603235c46a20007c0701ea0a\",\n                \"reference\": \"66a2c469f6c22d08603235c46a20007c0701ea0a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\",\n                \"symfony/deprecation-contracts\": \"^2.5|^3\"\n            },\n            \"conflict\": {\n                \"symfony/config\": \"<6.4\",\n                \"symfony/dependency-injection\": \"<6.4\",\n                \"symfony/yaml\": \"<6.4\"\n            },\n            \"require-dev\": {\n                \"psr/log\": \"^1|^2|^3\",\n                \"symfony/config\": \"^6.4|^7.0\",\n                \"symfony/dependency-injection\": \"^6.4|^7.0\",\n                \"symfony/expression-language\": \"^6.4|^7.0\",\n                \"symfony/http-foundation\": \"^6.4|^7.0\",\n                \"symfony/yaml\": \"^6.4|^7.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Routing\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Maps an HTTP request to a set of configuration variables\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"router\",\n                \"routing\",\n                \"uri\",\n                \"url\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/routing/tree/v7.1.6\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-10-01T08:31:23+00:00\"\n        },\n        {\n            \"name\": \"symfony/service-contracts\",\n            \"version\": \"v3.5.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/service-contracts.git\",\n                \"reference\": \"bd1d9e59a81d8fa4acdcea3f617c581f7475a80f\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/service-contracts/zipball/bd1d9e59a81d8fa4acdcea3f617c581f7475a80f\",\n                \"reference\": \"bd1d9e59a81d8fa4acdcea3f617c581f7475a80f\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.1\",\n                \"psr/container\": \"^1.1|^2.0\",\n                \"symfony/deprecation-contracts\": \"^2.5|^3\"\n            },\n            \"conflict\": {\n                \"ext-psr\": \"<1.1|>=2\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"3.5-dev\"\n                },\n                \"thanks\": {\n                    \"name\": \"symfony/contracts\",\n                    \"url\": \"https://github.com/symfony/contracts\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Contracts\\\\Service\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Test/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Generic abstractions related to writing services\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"abstractions\",\n                \"contracts\",\n                \"decoupling\",\n                \"interfaces\",\n                \"interoperability\",\n                \"standards\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/service-contracts/tree/v3.5.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-04-18T09:32:20+00:00\"\n        },\n        {\n            \"name\": \"symfony/string\",\n            \"version\": \"v7.1.8\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/string.git\",\n                \"reference\": \"591ebd41565f356fcd8b090fe64dbb5878f50281\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/string/zipball/591ebd41565f356fcd8b090fe64dbb5878f50281\",\n                \"reference\": \"591ebd41565f356fcd8b090fe64dbb5878f50281\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\",\n                \"symfony/polyfill-ctype\": \"~1.8\",\n                \"symfony/polyfill-intl-grapheme\": \"~1.0\",\n                \"symfony/polyfill-intl-normalizer\": \"~1.0\",\n                \"symfony/polyfill-mbstring\": \"~1.0\"\n            },\n            \"conflict\": {\n                \"symfony/translation-contracts\": \"<2.5\"\n            },\n            \"require-dev\": {\n                \"symfony/emoji\": \"^7.1\",\n                \"symfony/error-handler\": \"^6.4|^7.0\",\n                \"symfony/http-client\": \"^6.4|^7.0\",\n                \"symfony/intl\": \"^6.4|^7.0\",\n                \"symfony/translation-contracts\": \"^2.5|^3.0\",\n                \"symfony/var-exporter\": \"^6.4|^7.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"Resources/functions.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\String\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Provides an object-oriented API to strings and deals with bytes, UTF-8 code points and grapheme clusters in a unified way\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"grapheme\",\n                \"i18n\",\n                \"string\",\n                \"unicode\",\n                \"utf-8\",\n                \"utf8\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/string/tree/v7.1.8\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-11-13T13:31:21+00:00\"\n        },\n        {\n            \"name\": \"symfony/translation\",\n            \"version\": \"v7.1.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/translation.git\",\n                \"reference\": \"b9f72ab14efdb6b772f85041fa12f820dee8d55f\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/translation/zipball/b9f72ab14efdb6b772f85041fa12f820dee8d55f\",\n                \"reference\": \"b9f72ab14efdb6b772f85041fa12f820dee8d55f\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\",\n                \"symfony/polyfill-mbstring\": \"~1.0\",\n                \"symfony/translation-contracts\": \"^2.5|^3.0\"\n            },\n            \"conflict\": {\n                \"symfony/config\": \"<6.4\",\n                \"symfony/console\": \"<6.4\",\n                \"symfony/dependency-injection\": \"<6.4\",\n                \"symfony/http-client-contracts\": \"<2.5\",\n                \"symfony/http-kernel\": \"<6.4\",\n                \"symfony/service-contracts\": \"<2.5\",\n                \"symfony/twig-bundle\": \"<6.4\",\n                \"symfony/yaml\": \"<6.4\"\n            },\n            \"provide\": {\n                \"symfony/translation-implementation\": \"2.3|3.0\"\n            },\n            \"require-dev\": {\n                \"nikic/php-parser\": \"^4.18|^5.0\",\n                \"psr/log\": \"^1|^2|^3\",\n                \"symfony/config\": \"^6.4|^7.0\",\n                \"symfony/console\": \"^6.4|^7.0\",\n                \"symfony/dependency-injection\": \"^6.4|^7.0\",\n                \"symfony/finder\": \"^6.4|^7.0\",\n                \"symfony/http-client-contracts\": \"^2.5|^3.0\",\n                \"symfony/http-kernel\": \"^6.4|^7.0\",\n                \"symfony/intl\": \"^6.4|^7.0\",\n                \"symfony/polyfill-intl-icu\": \"^1.21\",\n                \"symfony/routing\": \"^6.4|^7.0\",\n                \"symfony/service-contracts\": \"^2.5|^3\",\n                \"symfony/yaml\": \"^6.4|^7.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"Resources/functions.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Translation\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Provides tools to internationalize your application\",\n            \"homepage\": \"https://symfony.com\",\n            \"support\": {\n                \"source\": \"https://github.com/symfony/translation/tree/v7.1.6\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-28T12:35:13+00:00\"\n        },\n        {\n            \"name\": \"symfony/translation-contracts\",\n            \"version\": \"v3.5.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/translation-contracts.git\",\n                \"reference\": \"b9d2189887bb6b2e0367a9fc7136c5239ab9b05a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/translation-contracts/zipball/b9d2189887bb6b2e0367a9fc7136c5239ab9b05a\",\n                \"reference\": \"b9d2189887bb6b2e0367a9fc7136c5239ab9b05a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.1\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"3.5-dev\"\n                },\n                \"thanks\": {\n                    \"name\": \"symfony/contracts\",\n                    \"url\": \"https://github.com/symfony/contracts\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Contracts\\\\Translation\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Test/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Generic abstractions related to translation\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"abstractions\",\n                \"contracts\",\n                \"decoupling\",\n                \"interfaces\",\n                \"interoperability\",\n                \"standards\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/translation-contracts/tree/v3.5.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-04-18T09:32:20+00:00\"\n        },\n        {\n            \"name\": \"symfony/uid\",\n            \"version\": \"v7.1.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/uid.git\",\n                \"reference\": \"65befb3bb2d503bbffbd08c815aa38b472999917\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/uid/zipball/65befb3bb2d503bbffbd08c815aa38b472999917\",\n                \"reference\": \"65befb3bb2d503bbffbd08c815aa38b472999917\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\",\n                \"symfony/polyfill-uuid\": \"^1.15\"\n            },\n            \"require-dev\": {\n                \"symfony/console\": \"^6.4|^7.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Uid\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Grégoire Pineau\",\n                    \"email\": \"lyrixx@lyrixx.info\"\n                },\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Provides an object-oriented API to generate and represent UIDs\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"UID\",\n                \"ulid\",\n                \"uuid\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/uid/tree/v7.1.6\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-25T14:20:29+00:00\"\n        },\n        {\n            \"name\": \"symfony/var-dumper\",\n            \"version\": \"v7.1.8\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/var-dumper.git\",\n                \"reference\": \"7bb01a47b1b00428d32b5e7b4d3b2d1aa58d3db8\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/var-dumper/zipball/7bb01a47b1b00428d32b5e7b4d3b2d1aa58d3db8\",\n                \"reference\": \"7bb01a47b1b00428d32b5e7b4d3b2d1aa58d3db8\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\",\n                \"symfony/polyfill-mbstring\": \"~1.0\"\n            },\n            \"conflict\": {\n                \"symfony/console\": \"<6.4\"\n            },\n            \"require-dev\": {\n                \"ext-iconv\": \"*\",\n                \"symfony/console\": \"^6.4|^7.0\",\n                \"symfony/http-kernel\": \"^6.4|^7.0\",\n                \"symfony/process\": \"^6.4|^7.0\",\n                \"symfony/uid\": \"^6.4|^7.0\",\n                \"twig/twig\": \"^3.0.4\"\n            },\n            \"bin\": [\n                \"Resources/bin/var-dump-server\"\n            ],\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"Resources/functions/dump.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\VarDumper\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Provides mechanisms for walking through any arbitrary PHP variable\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"debug\",\n                \"dump\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/var-dumper/tree/v7.1.8\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-11-08T15:46:42+00:00\"\n        },\n        {\n            \"name\": \"tijsverkoyen/css-to-inline-styles\",\n            \"version\": \"v2.2.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/tijsverkoyen/CssToInlineStyles.git\",\n                \"reference\": \"83ee6f38df0a63106a9e4536e3060458b74ccedb\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/tijsverkoyen/CssToInlineStyles/zipball/83ee6f38df0a63106a9e4536e3060458b74ccedb\",\n                \"reference\": \"83ee6f38df0a63106a9e4536e3060458b74ccedb\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-libxml\": \"*\",\n                \"php\": \"^5.5 || ^7.0 || ^8.0\",\n                \"symfony/css-selector\": \"^2.7 || ^3.0 || ^4.0 || ^5.0 || ^6.0 || ^7.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^4.8.35 || ^5.7 || ^6.0 || ^7.5 || ^8.5.21 || ^9.5.10\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.2.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"TijsVerkoyen\\\\CssToInlineStyles\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Tijs Verkoyen\",\n                    \"email\": \"css_to_inline_styles@verkoyen.eu\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"CssToInlineStyles is a class that enables you to convert HTML-pages/files into HTML-pages/files with inline styles. This is very useful when you're sending emails.\",\n            \"homepage\": \"https://github.com/tijsverkoyen/CssToInlineStyles\",\n            \"support\": {\n                \"issues\": \"https://github.com/tijsverkoyen/CssToInlineStyles/issues\",\n                \"source\": \"https://github.com/tijsverkoyen/CssToInlineStyles/tree/v2.2.7\"\n            },\n            \"time\": \"2023-12-08T13:03:43+00:00\"\n        },\n        {\n            \"name\": \"vlucas/phpdotenv\",\n            \"version\": \"v5.6.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/vlucas/phpdotenv.git\",\n                \"reference\": \"a59a13791077fe3d44f90e7133eb68e7d22eaff2\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/vlucas/phpdotenv/zipball/a59a13791077fe3d44f90e7133eb68e7d22eaff2\",\n                \"reference\": \"a59a13791077fe3d44f90e7133eb68e7d22eaff2\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-pcre\": \"*\",\n                \"graham-campbell/result-type\": \"^1.1.3\",\n                \"php\": \"^7.2.5 || ^8.0\",\n                \"phpoption/phpoption\": \"^1.9.3\",\n                \"symfony/polyfill-ctype\": \"^1.24\",\n                \"symfony/polyfill-mbstring\": \"^1.24\",\n                \"symfony/polyfill-php80\": \"^1.24\"\n            },\n            \"require-dev\": {\n                \"bamarni/composer-bin-plugin\": \"^1.8.2\",\n                \"ext-filter\": \"*\",\n                \"phpunit/phpunit\": \"^8.5.34 || ^9.6.13 || ^10.4.2\"\n            },\n            \"suggest\": {\n                \"ext-filter\": \"Required to use the boolean validator.\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"bamarni-bin\": {\n                    \"bin-links\": true,\n                    \"forward-command\": false\n                },\n                \"branch-alias\": {\n                    \"dev-master\": \"5.6-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Dotenv\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Graham Campbell\",\n                    \"email\": \"hello@gjcampbell.co.uk\",\n                    \"homepage\": \"https://github.com/GrahamCampbell\"\n                },\n                {\n                    \"name\": \"Vance Lucas\",\n                    \"email\": \"vance@vancelucas.com\",\n                    \"homepage\": \"https://github.com/vlucas\"\n                }\n            ],\n            \"description\": \"Loads environment variables from `.env` to `getenv()`, `$_ENV` and `$_SERVER` automagically.\",\n            \"keywords\": [\n                \"dotenv\",\n                \"env\",\n                \"environment\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/vlucas/phpdotenv/issues\",\n                \"source\": \"https://github.com/vlucas/phpdotenv/tree/v5.6.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/GrahamCampbell\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/vlucas/phpdotenv\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-07-20T21:52:34+00:00\"\n        },\n        {\n            \"name\": \"voku/portable-ascii\",\n            \"version\": \"2.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/voku/portable-ascii.git\",\n                \"reference\": \"b56450eed252f6801410d810c8e1727224ae0743\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/voku/portable-ascii/zipball/b56450eed252f6801410d810c8e1727224ae0743\",\n                \"reference\": \"b56450eed252f6801410d810c8e1727224ae0743\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.0.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~6.0 || ~7.0 || ~9.0\"\n            },\n            \"suggest\": {\n                \"ext-intl\": \"Use Intl for transliterator_transliterate() support\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"voku\\\\\": \"src/voku/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Lars Moelleken\",\n                    \"homepage\": \"http://www.moelleken.org/\"\n                }\n            ],\n            \"description\": \"Portable ASCII library - performance optimized (ascii) string functions for php.\",\n            \"homepage\": \"https://github.com/voku/portable-ascii\",\n            \"keywords\": [\n                \"ascii\",\n                \"clean\",\n                \"php\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/voku/portable-ascii/issues\",\n                \"source\": \"https://github.com/voku/portable-ascii/tree/2.0.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://www.paypal.me/moelleken\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/voku\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://opencollective.com/portable-ascii\",\n                    \"type\": \"open_collective\"\n                },\n                {\n                    \"url\": \"https://www.patreon.com/voku\",\n                    \"type\": \"patreon\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/voku/portable-ascii\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2022-03-08T17:03:00+00:00\"\n        },\n        {\n            \"name\": \"webmozart/assert\",\n            \"version\": \"1.11.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/webmozarts/assert.git\",\n                \"reference\": \"11cb2199493b2f8a3b53e7f19068fc6aac760991\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/webmozarts/assert/zipball/11cb2199493b2f8a3b53e7f19068fc6aac760991\",\n                \"reference\": \"11cb2199493b2f8a3b53e7f19068fc6aac760991\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-ctype\": \"*\",\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"conflict\": {\n                \"phpstan/phpstan\": \"<0.12.20\",\n                \"vimeo/psalm\": \"<4.6.1 || 4.6.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^8.5.13\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.10-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Webmozart\\\\Assert\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Bernhard Schussek\",\n                    \"email\": \"bschussek@gmail.com\"\n                }\n            ],\n            \"description\": \"Assertions to validate method input/output with nice error messages.\",\n            \"keywords\": [\n                \"assert\",\n                \"check\",\n                \"validate\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/webmozarts/assert/issues\",\n                \"source\": \"https://github.com/webmozarts/assert/tree/1.11.0\"\n            },\n            \"time\": \"2022-06-03T18:03:27+00:00\"\n        }\n    ],\n    \"packages-dev\": [\n        {\n            \"name\": \"barryvdh/laravel-ide-helper\",\n            \"version\": \"v3.2.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/barryvdh/laravel-ide-helper.git\",\n                \"reference\": \"07e3bd8796f3d1414801a03d3783f9d3ec9efc08\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/barryvdh/laravel-ide-helper/zipball/07e3bd8796f3d1414801a03d3783f9d3ec9efc08\",\n                \"reference\": \"07e3bd8796f3d1414801a03d3783f9d3ec9efc08\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"barryvdh/reflection-docblock\": \"^2.1.2\",\n                \"composer/class-map-generator\": \"^1.0\",\n                \"ext-json\": \"*\",\n                \"illuminate/console\": \"^11.15\",\n                \"illuminate/database\": \"^11.15\",\n                \"illuminate/filesystem\": \"^11.15\",\n                \"illuminate/support\": \"^11.15\",\n                \"nikic/php-parser\": \"^4.18 || ^5\",\n                \"php\": \"^8.2\",\n                \"phpdocumentor/type-resolver\": \"^1.1.0\"\n            },\n            \"require-dev\": {\n                \"ext-pdo_sqlite\": \"*\",\n                \"friendsofphp/php-cs-fixer\": \"^3\",\n                \"illuminate/config\": \"^11.15\",\n                \"illuminate/view\": \"^11.15\",\n                \"mockery/mockery\": \"^1.4\",\n                \"orchestra/testbench\": \"^9.2\",\n                \"phpunit/phpunit\": \"^10.5\",\n                \"spatie/phpunit-snapshot-assertions\": \"^4 || ^5\",\n                \"vimeo/psalm\": \"^5.4\"\n            },\n            \"suggest\": {\n                \"illuminate/events\": \"Required for automatic helper generation (^6|^7|^8|^9|^10|^11).\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.2-dev\"\n                },\n                \"laravel\": {\n                    \"providers\": [\n                        \"Barryvdh\\\\LaravelIdeHelper\\\\IdeHelperServiceProvider\"\n                    ]\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Barryvdh\\\\LaravelIdeHelper\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Barry vd. Heuvel\",\n                    \"email\": \"barryvdh@gmail.com\"\n                }\n            ],\n            \"description\": \"Laravel IDE Helper, generates correct PHPDocs for all Facade classes, to improve auto-completion.\",\n            \"keywords\": [\n                \"autocomplete\",\n                \"codeintel\",\n                \"helper\",\n                \"ide\",\n                \"laravel\",\n                \"netbeans\",\n                \"phpdoc\",\n                \"phpstorm\",\n                \"sublime\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/barryvdh/laravel-ide-helper/issues\",\n                \"source\": \"https://github.com/barryvdh/laravel-ide-helper/tree/v3.2.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://fruitcake.nl\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/barryvdh\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-10-29T14:00:16+00:00\"\n        },\n        {\n            \"name\": \"barryvdh/reflection-docblock\",\n            \"version\": \"v2.1.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/barryvdh/ReflectionDocBlock.git\",\n                \"reference\": \"c6fad15f7c878be21650c51e1f841bca7e49752e\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/barryvdh/ReflectionDocBlock/zipball/c6fad15f7c878be21650c51e1f841bca7e49752e\",\n                \"reference\": \"c6fad15f7c878be21650c51e1f841bca7e49752e\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^8.5.14|^9\"\n            },\n            \"suggest\": {\n                \"dflydev/markdown\": \"~1.0\",\n                \"erusev/parsedown\": \"~1.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Barryvdh\": [\n                        \"src/\"\n                    ]\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Mike van Riel\",\n                    \"email\": \"mike.vanriel@naenius.com\"\n                }\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/barryvdh/ReflectionDocBlock/tree/v2.1.3\"\n            },\n            \"time\": \"2024-10-23T11:41:03+00:00\"\n        },\n        {\n            \"name\": \"brianium/paratest\",\n            \"version\": \"v7.6.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/paratestphp/paratest.git\",\n                \"reference\": \"68ff89a8de47d086588e391a516d2a5b5fde6254\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/paratestphp/paratest/zipball/68ff89a8de47d086588e391a516d2a5b5fde6254\",\n                \"reference\": \"68ff89a8de47d086588e391a516d2a5b5fde6254\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-pcre\": \"*\",\n                \"ext-reflection\": \"*\",\n                \"ext-simplexml\": \"*\",\n                \"fidry/cpu-core-counter\": \"^1.2.0\",\n                \"jean85/pretty-package-versions\": \"^2.0.6\",\n                \"php\": \"~8.2.0 || ~8.3.0 || ~8.4.0\",\n                \"phpunit/php-code-coverage\": \"^11.0.7\",\n                \"phpunit/php-file-iterator\": \"^5.1.0\",\n                \"phpunit/php-timer\": \"^7.0.1\",\n                \"phpunit/phpunit\": \"^11.4.1\",\n                \"sebastian/environment\": \"^7.2.0\",\n                \"symfony/console\": \"^6.4.11 || ^7.1.5\",\n                \"symfony/process\": \"^6.4.8 || ^7.1.5\"\n            },\n            \"require-dev\": {\n                \"doctrine/coding-standard\": \"^12.0.0\",\n                \"ext-pcov\": \"*\",\n                \"ext-posix\": \"*\",\n                \"phpstan/phpstan\": \"^1.12.6\",\n                \"phpstan/phpstan-deprecation-rules\": \"^1.2.1\",\n                \"phpstan/phpstan-phpunit\": \"^1.4.0\",\n                \"phpstan/phpstan-strict-rules\": \"^1.6.1\",\n                \"squizlabs/php_codesniffer\": \"^3.10.3\",\n                \"symfony/filesystem\": \"^6.4.9 || ^7.1.5\"\n            },\n            \"bin\": [\n                \"bin/paratest\",\n                \"bin/paratest_for_phpstorm\"\n            ],\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"ParaTest\\\\\": [\n                        \"src/\"\n                    ]\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Brian Scaturro\",\n                    \"email\": \"scaturrob@gmail.com\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Filippo Tessarotto\",\n                    \"email\": \"zoeslam@gmail.com\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"Parallel testing for PHP\",\n            \"homepage\": \"https://github.com/paratestphp/paratest\",\n            \"keywords\": [\n                \"concurrent\",\n                \"parallel\",\n                \"phpunit\",\n                \"testing\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/paratestphp/paratest/issues\",\n                \"source\": \"https://github.com/paratestphp/paratest/tree/v7.6.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sponsors/Slamdunk\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://paypal.me/filippotessarotto\",\n                    \"type\": \"paypal\"\n                }\n            ],\n            \"time\": \"2024-10-15T12:38:31+00:00\"\n        },\n        {\n            \"name\": \"composer/class-map-generator\",\n            \"version\": \"1.4.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/composer/class-map-generator.git\",\n                \"reference\": \"98bbf6780e56e0fd2404fe4b82eb665a0f93b783\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/composer/class-map-generator/zipball/98bbf6780e56e0fd2404fe4b82eb665a0f93b783\",\n                \"reference\": \"98bbf6780e56e0fd2404fe4b82eb665a0f93b783\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"composer/pcre\": \"^2.1 || ^3.1\",\n                \"php\": \"^7.2 || ^8.0\",\n                \"symfony/finder\": \"^4.4 || ^5.3 || ^6 || ^7\"\n            },\n            \"require-dev\": {\n                \"phpstan/phpstan\": \"^1.6\",\n                \"phpstan/phpstan-deprecation-rules\": \"^1\",\n                \"phpstan/phpstan-phpunit\": \"^1\",\n                \"phpstan/phpstan-strict-rules\": \"^1.1\",\n                \"phpunit/phpunit\": \"^8\",\n                \"symfony/filesystem\": \"^5.4 || ^6\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"1.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Composer\\\\ClassMapGenerator\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jordi Boggiano\",\n                    \"email\": \"j.boggiano@seld.be\",\n                    \"homepage\": \"https://seld.be\"\n                }\n            ],\n            \"description\": \"Utilities to scan PHP code and generate class maps.\",\n            \"keywords\": [\n                \"classmap\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/composer/class-map-generator/issues\",\n                \"source\": \"https://github.com/composer/class-map-generator/tree/1.4.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://packagist.com\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/composer\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/composer/composer\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-10-03T18:14:00+00:00\"\n        },\n        {\n            \"name\": \"composer/pcre\",\n            \"version\": \"3.3.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/composer/pcre.git\",\n                \"reference\": \"b2bed4734f0cc156ee1fe9c0da2550420d99a21e\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/composer/pcre/zipball/b2bed4734f0cc156ee1fe9c0da2550420d99a21e\",\n                \"reference\": \"b2bed4734f0cc156ee1fe9c0da2550420d99a21e\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.4 || ^8.0\"\n            },\n            \"conflict\": {\n                \"phpstan/phpstan\": \"<1.11.10\"\n            },\n            \"require-dev\": {\n                \"phpstan/phpstan\": \"^1.12 || ^2\",\n                \"phpstan/phpstan-strict-rules\": \"^1 || ^2\",\n                \"phpunit/phpunit\": \"^8 || ^9\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"3.x-dev\"\n                },\n                \"phpstan\": {\n                    \"includes\": [\n                        \"extension.neon\"\n                    ]\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Composer\\\\Pcre\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jordi Boggiano\",\n                    \"email\": \"j.boggiano@seld.be\",\n                    \"homepage\": \"http://seld.be\"\n                }\n            ],\n            \"description\": \"PCRE wrapping library that offers type-safe preg_* replacements.\",\n            \"keywords\": [\n                \"PCRE\",\n                \"preg\",\n                \"regex\",\n                \"regular expression\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/composer/pcre/issues\",\n                \"source\": \"https://github.com/composer/pcre/tree/3.3.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://packagist.com\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/composer\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/composer/composer\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-11-12T16:29:46+00:00\"\n        },\n        {\n            \"name\": \"doctrine/deprecations\",\n            \"version\": \"1.1.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/doctrine/deprecations.git\",\n                \"reference\": \"dfbaa3c2d2e9a9df1118213f3b8b0c597bb99fab\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/doctrine/deprecations/zipball/dfbaa3c2d2e9a9df1118213f3b8b0c597bb99fab\",\n                \"reference\": \"dfbaa3c2d2e9a9df1118213f3b8b0c597bb99fab\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.1 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"doctrine/coding-standard\": \"^9\",\n                \"phpstan/phpstan\": \"1.4.10 || 1.10.15\",\n                \"phpstan/phpstan-phpunit\": \"^1.0\",\n                \"phpunit/phpunit\": \"^7.5 || ^8.5 || ^9.5\",\n                \"psalm/plugin-phpunit\": \"0.18.4\",\n                \"psr/log\": \"^1 || ^2 || ^3\",\n                \"vimeo/psalm\": \"4.30.0 || 5.12.0\"\n            },\n            \"suggest\": {\n                \"psr/log\": \"Allows logging deprecations via PSR-3 logger implementation\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Doctrine\\\\Deprecations\\\\\": \"lib/Doctrine/Deprecations\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"description\": \"A small layer on top of trigger_error(E_USER_DEPRECATED) or PSR-3 logging with options to disable all deprecations or selectively for packages.\",\n            \"homepage\": \"https://www.doctrine-project.org/\",\n            \"support\": {\n                \"issues\": \"https://github.com/doctrine/deprecations/issues\",\n                \"source\": \"https://github.com/doctrine/deprecations/tree/1.1.3\"\n            },\n            \"time\": \"2024-01-30T19:34:25+00:00\"\n        },\n        {\n            \"name\": \"fakerphp/faker\",\n            \"version\": \"v1.24.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/FakerPHP/Faker.git\",\n                \"reference\": \"a136842a532bac9ecd8a1c723852b09915d7db50\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/FakerPHP/Faker/zipball/a136842a532bac9ecd8a1c723852b09915d7db50\",\n                \"reference\": \"a136842a532bac9ecd8a1c723852b09915d7db50\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.4 || ^8.0\",\n                \"psr/container\": \"^1.0 || ^2.0\",\n                \"symfony/deprecation-contracts\": \"^2.2 || ^3.0\"\n            },\n            \"conflict\": {\n                \"fzaninotto/faker\": \"*\"\n            },\n            \"require-dev\": {\n                \"bamarni/composer-bin-plugin\": \"^1.4.1\",\n                \"doctrine/persistence\": \"^1.3 || ^2.0\",\n                \"ext-intl\": \"*\",\n                \"phpunit/phpunit\": \"^9.5.26\",\n                \"symfony/phpunit-bridge\": \"^5.4.16\"\n            },\n            \"suggest\": {\n                \"doctrine/orm\": \"Required to use Faker\\\\ORM\\\\Doctrine\",\n                \"ext-curl\": \"Required by Faker\\\\Provider\\\\Image to download images.\",\n                \"ext-dom\": \"Required by Faker\\\\Provider\\\\HtmlLorem for generating random HTML.\",\n                \"ext-iconv\": \"Required by Faker\\\\Provider\\\\ru_RU\\\\Text::realText() for generating real Russian text.\",\n                \"ext-mbstring\": \"Required for multibyte Unicode string functionality.\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Faker\\\\\": \"src/Faker/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"François Zaninotto\"\n                }\n            ],\n            \"description\": \"Faker is a PHP library that generates fake data for you.\",\n            \"keywords\": [\n                \"data\",\n                \"faker\",\n                \"fixtures\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/FakerPHP/Faker/issues\",\n                \"source\": \"https://github.com/FakerPHP/Faker/tree/v1.24.0\"\n            },\n            \"time\": \"2024-11-07T15:11:20+00:00\"\n        },\n        {\n            \"name\": \"fidry/cpu-core-counter\",\n            \"version\": \"1.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/theofidry/cpu-core-counter.git\",\n                \"reference\": \"8520451a140d3f46ac33042715115e290cf5785f\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/theofidry/cpu-core-counter/zipball/8520451a140d3f46ac33042715115e290cf5785f\",\n                \"reference\": \"8520451a140d3f46ac33042715115e290cf5785f\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"fidry/makefile\": \"^0.2.0\",\n                \"fidry/php-cs-fixer-config\": \"^1.1.2\",\n                \"phpstan/extension-installer\": \"^1.2.0\",\n                \"phpstan/phpstan\": \"^1.9.2\",\n                \"phpstan/phpstan-deprecation-rules\": \"^1.0.0\",\n                \"phpstan/phpstan-phpunit\": \"^1.2.2\",\n                \"phpstan/phpstan-strict-rules\": \"^1.4.4\",\n                \"phpunit/phpunit\": \"^8.5.31 || ^9.5.26\",\n                \"webmozarts/strict-phpunit\": \"^7.5\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Fidry\\\\CpuCoreCounter\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Théo FIDRY\",\n                    \"email\": \"theo.fidry@gmail.com\"\n                }\n            ],\n            \"description\": \"Tiny utility to get the number of CPU cores.\",\n            \"keywords\": [\n                \"CPU\",\n                \"core\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/theofidry/cpu-core-counter/issues\",\n                \"source\": \"https://github.com/theofidry/cpu-core-counter/tree/1.2.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/theofidry\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-08-06T10:04:20+00:00\"\n        },\n        {\n            \"name\": \"filp/whoops\",\n            \"version\": \"2.16.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/filp/whoops.git\",\n                \"reference\": \"befcdc0e5dce67252aa6322d82424be928214fa2\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/filp/whoops/zipball/befcdc0e5dce67252aa6322d82424be928214fa2\",\n                \"reference\": \"befcdc0e5dce67252aa6322d82424be928214fa2\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.1 || ^8.0\",\n                \"psr/log\": \"^1.0.1 || ^2.0 || ^3.0\"\n            },\n            \"require-dev\": {\n                \"mockery/mockery\": \"^1.0\",\n                \"phpunit/phpunit\": \"^7.5.20 || ^8.5.8 || ^9.3.3\",\n                \"symfony/var-dumper\": \"^4.0 || ^5.0\"\n            },\n            \"suggest\": {\n                \"symfony/var-dumper\": \"Pretty print complex values better with var-dumper available\",\n                \"whoops/soap\": \"Formats errors as SOAP responses\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.7-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Whoops\\\\\": \"src/Whoops/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Filipe Dobreira\",\n                    \"homepage\": \"https://github.com/filp\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"php error handling for cool kids\",\n            \"homepage\": \"https://filp.github.io/whoops/\",\n            \"keywords\": [\n                \"error\",\n                \"exception\",\n                \"handling\",\n                \"library\",\n                \"throwable\",\n                \"whoops\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/filp/whoops/issues\",\n                \"source\": \"https://github.com/filp/whoops/tree/2.16.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/denis-sokolov\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-09-25T12:00:00+00:00\"\n        },\n        {\n            \"name\": \"hamcrest/hamcrest-php\",\n            \"version\": \"v2.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/hamcrest/hamcrest-php.git\",\n                \"reference\": \"8c3d0a3f6af734494ad8f6fbbee0ba92422859f3\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/hamcrest/hamcrest-php/zipball/8c3d0a3f6af734494ad8f6fbbee0ba92422859f3\",\n                \"reference\": \"8c3d0a3f6af734494ad8f6fbbee0ba92422859f3\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^5.3|^7.0|^8.0\"\n            },\n            \"replace\": {\n                \"cordoval/hamcrest-php\": \"*\",\n                \"davedevelopment/hamcrest-php\": \"*\",\n                \"kodova/hamcrest-php\": \"*\"\n            },\n            \"require-dev\": {\n                \"phpunit/php-file-iterator\": \"^1.4 || ^2.0\",\n                \"phpunit/phpunit\": \"^4.8.36 || ^5.7 || ^6.5 || ^7.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.1-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"hamcrest\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"description\": \"This is the PHP port of Hamcrest Matchers\",\n            \"keywords\": [\n                \"test\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/hamcrest/hamcrest-php/issues\",\n                \"source\": \"https://github.com/hamcrest/hamcrest-php/tree/v2.0.1\"\n            },\n            \"time\": \"2020-07-09T08:09:16+00:00\"\n        },\n        {\n            \"name\": \"jean85/pretty-package-versions\",\n            \"version\": \"2.0.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/Jean85/pretty-package-versions.git\",\n                \"reference\": \"f9fdd29ad8e6d024f52678b570e5593759b550b4\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/Jean85/pretty-package-versions/zipball/f9fdd29ad8e6d024f52678b570e5593759b550b4\",\n                \"reference\": \"f9fdd29ad8e6d024f52678b570e5593759b550b4\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"composer-runtime-api\": \"^2.0.0\",\n                \"php\": \"^7.1|^8.0\"\n            },\n            \"require-dev\": {\n                \"friendsofphp/php-cs-fixer\": \"^3.2\",\n                \"jean85/composer-provided-replaced-stub-package\": \"^1.0\",\n                \"phpstan/phpstan\": \"^1.4\",\n                \"phpunit/phpunit\": \"^7.5|^8.5|^9.4\",\n                \"vimeo/psalm\": \"^4.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Jean85\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Alessandro Lai\",\n                    \"email\": \"alessandro.lai85@gmail.com\"\n                }\n            ],\n            \"description\": \"A library to get pretty versions strings of installed dependencies\",\n            \"keywords\": [\n                \"composer\",\n                \"package\",\n                \"release\",\n                \"versions\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/Jean85/pretty-package-versions/issues\",\n                \"source\": \"https://github.com/Jean85/pretty-package-versions/tree/2.0.6\"\n            },\n            \"time\": \"2024-03-08T09:58:59+00:00\"\n        },\n        {\n            \"name\": \"larastan/larastan\",\n            \"version\": \"v2.9.11\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/larastan/larastan.git\",\n                \"reference\": \"54eccd35d1732b9ee4392c25aec606a6a9c521e7\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/larastan/larastan/zipball/54eccd35d1732b9ee4392c25aec606a6a9c521e7\",\n                \"reference\": \"54eccd35d1732b9ee4392c25aec606a6a9c521e7\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-json\": \"*\",\n                \"illuminate/console\": \"^9.52.16 || ^10.28.0 || ^11.16\",\n                \"illuminate/container\": \"^9.52.16 || ^10.28.0 || ^11.16\",\n                \"illuminate/contracts\": \"^9.52.16 || ^10.28.0 || ^11.16\",\n                \"illuminate/database\": \"^9.52.16 || ^10.28.0 || ^11.16\",\n                \"illuminate/http\": \"^9.52.16 || ^10.28.0 || ^11.16\",\n                \"illuminate/pipeline\": \"^9.52.16 || ^10.28.0 || ^11.16\",\n                \"illuminate/support\": \"^9.52.16 || ^10.28.0 || ^11.16\",\n                \"php\": \"^8.0.2\",\n                \"phpmyadmin/sql-parser\": \"^5.9.0\",\n                \"phpstan/phpstan\": \"^1.12.5\"\n            },\n            \"require-dev\": {\n                \"doctrine/coding-standard\": \"^12.0\",\n                \"laravel/framework\": \"^9.52.16 || ^10.28.0 || ^11.16\",\n                \"mockery/mockery\": \"^1.5.1\",\n                \"nikic/php-parser\": \"^4.19.1\",\n                \"orchestra/canvas\": \"^7.11.1 || ^8.11.0 || ^9.0.2\",\n                \"orchestra/testbench-core\": \"^7.33.0 || ^8.13.0 || ^9.0.9\",\n                \"phpstan/phpstan-deprecation-rules\": \"^1.2\",\n                \"phpunit/phpunit\": \"^9.6.13 || ^10.5.16\"\n            },\n            \"suggest\": {\n                \"orchestra/testbench\": \"Using Larastan for analysing a package needs Testbench\"\n            },\n            \"type\": \"phpstan-extension\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0-dev\"\n                },\n                \"phpstan\": {\n                    \"includes\": [\n                        \"extension.neon\"\n                    ]\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Larastan\\\\Larastan\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Can Vural\",\n                    \"email\": \"can9119@gmail.com\"\n                },\n                {\n                    \"name\": \"Nuno Maduro\",\n                    \"email\": \"enunomaduro@gmail.com\"\n                }\n            ],\n            \"description\": \"Larastan - Discover bugs in your code without running it. A phpstan/phpstan wrapper for Laravel\",\n            \"keywords\": [\n                \"PHPStan\",\n                \"code analyse\",\n                \"code analysis\",\n                \"larastan\",\n                \"laravel\",\n                \"package\",\n                \"php\",\n                \"static analysis\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/larastan/larastan/issues\",\n                \"source\": \"https://github.com/larastan/larastan/tree/v2.9.11\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://www.paypal.com/paypalme/enunomaduro\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/canvural\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://github.com/nunomaduro\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://www.patreon.com/nunomaduro\",\n                    \"type\": \"patreon\"\n                }\n            ],\n            \"time\": \"2024-11-11T23:11:00+00:00\"\n        },\n        {\n            \"name\": \"laravel/pint\",\n            \"version\": \"v1.18.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/laravel/pint.git\",\n                \"reference\": \"35c00c05ec43e6b46d295efc0f4386ceb30d50d9\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/laravel/pint/zipball/35c00c05ec43e6b46d295efc0f4386ceb30d50d9\",\n                \"reference\": \"35c00c05ec43e6b46d295efc0f4386ceb30d50d9\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-json\": \"*\",\n                \"ext-mbstring\": \"*\",\n                \"ext-tokenizer\": \"*\",\n                \"ext-xml\": \"*\",\n                \"php\": \"^8.1.0\"\n            },\n            \"require-dev\": {\n                \"friendsofphp/php-cs-fixer\": \"^3.64.0\",\n                \"illuminate/view\": \"^10.48.20\",\n                \"larastan/larastan\": \"^2.9.8\",\n                \"laravel-zero/framework\": \"^10.4.0\",\n                \"mockery/mockery\": \"^1.6.12\",\n                \"nunomaduro/termwind\": \"^1.15.1\",\n                \"pestphp/pest\": \"^2.35.1\"\n            },\n            \"bin\": [\n                \"builds/pint\"\n            ],\n            \"type\": \"project\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"App\\\\\": \"app/\",\n                    \"Database\\\\Seeders\\\\\": \"database/seeders/\",\n                    \"Database\\\\Factories\\\\\": \"database/factories/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nuno Maduro\",\n                    \"email\": \"enunomaduro@gmail.com\"\n                }\n            ],\n            \"description\": \"An opinionated code formatter for PHP.\",\n            \"homepage\": \"https://laravel.com\",\n            \"keywords\": [\n                \"format\",\n                \"formatter\",\n                \"lint\",\n                \"linter\",\n                \"php\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/laravel/pint/issues\",\n                \"source\": \"https://github.com/laravel/pint\"\n            },\n            \"time\": \"2024-09-24T17:22:50+00:00\"\n        },\n        {\n            \"name\": \"mockery/mockery\",\n            \"version\": \"1.6.12\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/mockery/mockery.git\",\n                \"reference\": \"1f4efdd7d3beafe9807b08156dfcb176d18f1699\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/mockery/mockery/zipball/1f4efdd7d3beafe9807b08156dfcb176d18f1699\",\n                \"reference\": \"1f4efdd7d3beafe9807b08156dfcb176d18f1699\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"hamcrest/hamcrest-php\": \"^2.0.1\",\n                \"lib-pcre\": \">=7.0\",\n                \"php\": \">=7.3\"\n            },\n            \"conflict\": {\n                \"phpunit/phpunit\": \"<8.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^8.5 || ^9.6.17\",\n                \"symplify/easy-coding-standard\": \"^12.1.14\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"library/helpers.php\",\n                    \"library/Mockery.php\"\n                ],\n                \"psr-4\": {\n                    \"Mockery\\\\\": \"library/Mockery\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Pádraic Brady\",\n                    \"email\": \"padraic.brady@gmail.com\",\n                    \"homepage\": \"https://github.com/padraic\",\n                    \"role\": \"Author\"\n                },\n                {\n                    \"name\": \"Dave Marshall\",\n                    \"email\": \"dave.marshall@atstsolutions.co.uk\",\n                    \"homepage\": \"https://davedevelopment.co.uk\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Nathanael Esayeas\",\n                    \"email\": \"nathanael.esayeas@protonmail.com\",\n                    \"homepage\": \"https://github.com/ghostwriter\",\n                    \"role\": \"Lead Developer\"\n                }\n            ],\n            \"description\": \"Mockery is a simple yet flexible PHP mock object framework\",\n            \"homepage\": \"https://github.com/mockery/mockery\",\n            \"keywords\": [\n                \"BDD\",\n                \"TDD\",\n                \"library\",\n                \"mock\",\n                \"mock objects\",\n                \"mockery\",\n                \"stub\",\n                \"test\",\n                \"test double\",\n                \"testing\"\n            ],\n            \"support\": {\n                \"docs\": \"https://docs.mockery.io/\",\n                \"issues\": \"https://github.com/mockery/mockery/issues\",\n                \"rss\": \"https://github.com/mockery/mockery/releases.atom\",\n                \"security\": \"https://github.com/mockery/mockery/security/advisories\",\n                \"source\": \"https://github.com/mockery/mockery\"\n            },\n            \"time\": \"2024-05-16T03:13:13+00:00\"\n        },\n        {\n            \"name\": \"myclabs/deep-copy\",\n            \"version\": \"1.12.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/myclabs/DeepCopy.git\",\n                \"reference\": \"123267b2c49fbf30d78a7b2d333f6be754b94845\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/myclabs/DeepCopy/zipball/123267b2c49fbf30d78a7b2d333f6be754b94845\",\n                \"reference\": \"123267b2c49fbf30d78a7b2d333f6be754b94845\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.1 || ^8.0\"\n            },\n            \"conflict\": {\n                \"doctrine/collections\": \"<1.6.8\",\n                \"doctrine/common\": \"<2.13.3 || >=3 <3.2.2\"\n            },\n            \"require-dev\": {\n                \"doctrine/collections\": \"^1.6.8\",\n                \"doctrine/common\": \"^2.13.3 || ^3.2.2\",\n                \"phpspec/prophecy\": \"^1.10\",\n                \"phpunit/phpunit\": \"^7.5.20 || ^8.5.23 || ^9.5.13\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"src/DeepCopy/deep_copy.php\"\n                ],\n                \"psr-4\": {\n                    \"DeepCopy\\\\\": \"src/DeepCopy/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"description\": \"Create deep copies (clones) of your objects\",\n            \"keywords\": [\n                \"clone\",\n                \"copy\",\n                \"duplicate\",\n                \"object\",\n                \"object graph\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/myclabs/DeepCopy/issues\",\n                \"source\": \"https://github.com/myclabs/DeepCopy/tree/1.12.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/myclabs/deep-copy\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-11-08T17:47:46+00:00\"\n        },\n        {\n            \"name\": \"nunomaduro/collision\",\n            \"version\": \"v8.5.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/nunomaduro/collision.git\",\n                \"reference\": \"f5c101b929c958e849a633283adff296ed5f38f5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/nunomaduro/collision/zipball/f5c101b929c958e849a633283adff296ed5f38f5\",\n                \"reference\": \"f5c101b929c958e849a633283adff296ed5f38f5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"filp/whoops\": \"^2.16.0\",\n                \"nunomaduro/termwind\": \"^2.1.0\",\n                \"php\": \"^8.2.0\",\n                \"symfony/console\": \"^7.1.5\"\n            },\n            \"conflict\": {\n                \"laravel/framework\": \"<11.0.0 || >=12.0.0\",\n                \"phpunit/phpunit\": \"<10.5.1 || >=12.0.0\"\n            },\n            \"require-dev\": {\n                \"larastan/larastan\": \"^2.9.8\",\n                \"laravel/framework\": \"^11.28.0\",\n                \"laravel/pint\": \"^1.18.1\",\n                \"laravel/sail\": \"^1.36.0\",\n                \"laravel/sanctum\": \"^4.0.3\",\n                \"laravel/tinker\": \"^2.10.0\",\n                \"orchestra/testbench-core\": \"^9.5.3\",\n                \"pestphp/pest\": \"^2.36.0 || ^3.4.0\",\n                \"sebastian/environment\": \"^6.1.0 || ^7.2.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"laravel\": {\n                    \"providers\": [\n                        \"NunoMaduro\\\\Collision\\\\Adapters\\\\Laravel\\\\CollisionServiceProvider\"\n                    ]\n                },\n                \"branch-alias\": {\n                    \"dev-8.x\": \"8.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"./src/Adapters/Phpunit/Autoload.php\"\n                ],\n                \"psr-4\": {\n                    \"NunoMaduro\\\\Collision\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nuno Maduro\",\n                    \"email\": \"enunomaduro@gmail.com\"\n                }\n            ],\n            \"description\": \"Cli error handling for console/command-line PHP applications.\",\n            \"keywords\": [\n                \"artisan\",\n                \"cli\",\n                \"command-line\",\n                \"console\",\n                \"error\",\n                \"handling\",\n                \"laravel\",\n                \"laravel-zero\",\n                \"php\",\n                \"symfony\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/nunomaduro/collision/issues\",\n                \"source\": \"https://github.com/nunomaduro/collision\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://www.paypal.com/paypalme/enunomaduro\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/nunomaduro\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://www.patreon.com/nunomaduro\",\n                    \"type\": \"patreon\"\n                }\n            ],\n            \"time\": \"2024-10-15T16:06:32+00:00\"\n        },\n        {\n            \"name\": \"phar-io/manifest\",\n            \"version\": \"2.0.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phar-io/manifest.git\",\n                \"reference\": \"54750ef60c58e43759730615a392c31c80e23176\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phar-io/manifest/zipball/54750ef60c58e43759730615a392c31c80e23176\",\n                \"reference\": \"54750ef60c58e43759730615a392c31c80e23176\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-libxml\": \"*\",\n                \"ext-phar\": \"*\",\n                \"ext-xmlwriter\": \"*\",\n                \"phar-io/version\": \"^3.0.1\",\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Arne Blankerts\",\n                    \"email\": \"arne@blankerts.de\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Sebastian Heuer\",\n                    \"email\": \"sebastian@phpeople.de\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"Component for reading phar.io manifest information from a PHP Archive (PHAR)\",\n            \"support\": {\n                \"issues\": \"https://github.com/phar-io/manifest/issues\",\n                \"source\": \"https://github.com/phar-io/manifest/tree/2.0.4\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/theseer\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-03-03T12:33:53+00:00\"\n        },\n        {\n            \"name\": \"phar-io/version\",\n            \"version\": \"3.2.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phar-io/version.git\",\n                \"reference\": \"4f7fd7836c6f332bb2933569e566a0d6c4cbed74\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phar-io/version/zipball/4f7fd7836c6f332bb2933569e566a0d6c4cbed74\",\n                \"reference\": \"4f7fd7836c6f332bb2933569e566a0d6c4cbed74\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Arne Blankerts\",\n                    \"email\": \"arne@blankerts.de\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Sebastian Heuer\",\n                    \"email\": \"sebastian@phpeople.de\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"Library for handling version information and constraints\",\n            \"support\": {\n                \"issues\": \"https://github.com/phar-io/version/issues\",\n                \"source\": \"https://github.com/phar-io/version/tree/3.2.1\"\n            },\n            \"time\": \"2022-02-21T01:04:05+00:00\"\n        },\n        {\n            \"name\": \"phpdocumentor/reflection-common\",\n            \"version\": \"2.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phpDocumentor/ReflectionCommon.git\",\n                \"reference\": \"1d01c49d4ed62f25aa84a747ad35d5a16924662b\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phpDocumentor/ReflectionCommon/zipball/1d01c49d4ed62f25aa84a747ad35d5a16924662b\",\n                \"reference\": \"1d01c49d4ed62f25aa84a747ad35d5a16924662b\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-2.x\": \"2.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"phpDocumentor\\\\Reflection\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jaap van Otterdijk\",\n                    \"email\": \"opensource@ijaap.nl\"\n                }\n            ],\n            \"description\": \"Common reflection classes used by phpdocumentor to reflect the code structure\",\n            \"homepage\": \"http://www.phpdoc.org\",\n            \"keywords\": [\n                \"FQSEN\",\n                \"phpDocumentor\",\n                \"phpdoc\",\n                \"reflection\",\n                \"static analysis\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/phpDocumentor/ReflectionCommon/issues\",\n                \"source\": \"https://github.com/phpDocumentor/ReflectionCommon/tree/2.x\"\n            },\n            \"time\": \"2020-06-27T09:03:43+00:00\"\n        },\n        {\n            \"name\": \"phpdocumentor/type-resolver\",\n            \"version\": \"1.10.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phpDocumentor/TypeResolver.git\",\n                \"reference\": \"679e3ce485b99e84c775d28e2e96fade9a7fb50a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phpDocumentor/TypeResolver/zipball/679e3ce485b99e84c775d28e2e96fade9a7fb50a\",\n                \"reference\": \"679e3ce485b99e84c775d28e2e96fade9a7fb50a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"doctrine/deprecations\": \"^1.0\",\n                \"php\": \"^7.3 || ^8.0\",\n                \"phpdocumentor/reflection-common\": \"^2.0\",\n                \"phpstan/phpdoc-parser\": \"^1.18|^2.0\"\n            },\n            \"require-dev\": {\n                \"ext-tokenizer\": \"*\",\n                \"phpbench/phpbench\": \"^1.2\",\n                \"phpstan/extension-installer\": \"^1.1\",\n                \"phpstan/phpstan\": \"^1.8\",\n                \"phpstan/phpstan-phpunit\": \"^1.1\",\n                \"phpunit/phpunit\": \"^9.5\",\n                \"rector/rector\": \"^0.13.9\",\n                \"vimeo/psalm\": \"^4.25\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-1.x\": \"1.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"phpDocumentor\\\\Reflection\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Mike van Riel\",\n                    \"email\": \"me@mikevanriel.com\"\n                }\n            ],\n            \"description\": \"A PSR-5 based resolver of Class names, Types and Structural Element Names\",\n            \"support\": {\n                \"issues\": \"https://github.com/phpDocumentor/TypeResolver/issues\",\n                \"source\": \"https://github.com/phpDocumentor/TypeResolver/tree/1.10.0\"\n            },\n            \"time\": \"2024-11-09T15:12:26+00:00\"\n        },\n        {\n            \"name\": \"phpmyadmin/sql-parser\",\n            \"version\": \"5.10.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phpmyadmin/sql-parser.git\",\n                \"reference\": \"b14fd66496a22d8dd7f7e2791edd9e8674422f17\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phpmyadmin/sql-parser/zipball/b14fd66496a22d8dd7f7e2791edd9e8674422f17\",\n                \"reference\": \"b14fd66496a22d8dd7f7e2791edd9e8674422f17\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2 || ^8.0\",\n                \"symfony/polyfill-mbstring\": \"^1.3\",\n                \"symfony/polyfill-php80\": \"^1.16\"\n            },\n            \"conflict\": {\n                \"phpmyadmin/motranslator\": \"<3.0\"\n            },\n            \"require-dev\": {\n                \"phpbench/phpbench\": \"^1.1\",\n                \"phpmyadmin/coding-standard\": \"^3.0\",\n                \"phpmyadmin/motranslator\": \"^4.0 || ^5.0\",\n                \"phpstan/extension-installer\": \"^1.1\",\n                \"phpstan/phpstan\": \"^1.9.12\",\n                \"phpstan/phpstan-phpunit\": \"^1.3.3\",\n                \"phpunit/phpunit\": \"^8.5 || ^9.6\",\n                \"psalm/plugin-phpunit\": \"^0.16.1\",\n                \"vimeo/psalm\": \"^4.11\",\n                \"zumba/json-serializer\": \"~3.0.2\"\n            },\n            \"suggest\": {\n                \"ext-mbstring\": \"For best performance\",\n                \"phpmyadmin/motranslator\": \"Translate messages to your favorite locale\"\n            },\n            \"bin\": [\n                \"bin/highlight-query\",\n                \"bin/lint-query\",\n                \"bin/sql-parser\",\n                \"bin/tokenize-query\"\n            ],\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"PhpMyAdmin\\\\SqlParser\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"GPL-2.0-or-later\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"The phpMyAdmin Team\",\n                    \"email\": \"developers@phpmyadmin.net\",\n                    \"homepage\": \"https://www.phpmyadmin.net/team/\"\n                }\n            ],\n            \"description\": \"A validating SQL lexer and parser with a focus on MySQL dialect.\",\n            \"homepage\": \"https://github.com/phpmyadmin/sql-parser\",\n            \"keywords\": [\n                \"analysis\",\n                \"lexer\",\n                \"parser\",\n                \"query linter\",\n                \"sql\",\n                \"sql lexer\",\n                \"sql linter\",\n                \"sql parser\",\n                \"sql syntax highlighter\",\n                \"sql tokenizer\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/phpmyadmin/sql-parser/issues\",\n                \"source\": \"https://github.com/phpmyadmin/sql-parser\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://www.phpmyadmin.net/donate/\",\n                    \"type\": \"other\"\n                }\n            ],\n            \"time\": \"2024-11-10T04:10:31+00:00\"\n        },\n        {\n            \"name\": \"phpstan/phpdoc-parser\",\n            \"version\": \"2.0.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phpstan/phpdoc-parser.git\",\n                \"reference\": \"c00d78fb6b29658347f9d37ebe104bffadf36299\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phpstan/phpdoc-parser/zipball/c00d78fb6b29658347f9d37ebe104bffadf36299\",\n                \"reference\": \"c00d78fb6b29658347f9d37ebe104bffadf36299\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.4 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"doctrine/annotations\": \"^2.0\",\n                \"nikic/php-parser\": \"^5.3.0\",\n                \"php-parallel-lint/php-parallel-lint\": \"^1.2\",\n                \"phpstan/extension-installer\": \"^1.0\",\n                \"phpstan/phpstan\": \"^2.0\",\n                \"phpstan/phpstan-phpunit\": \"^2.0\",\n                \"phpstan/phpstan-strict-rules\": \"^2.0\",\n                \"phpunit/phpunit\": \"^9.6\",\n                \"symfony/process\": \"^5.2\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"PHPStan\\\\PhpDocParser\\\\\": [\n                        \"src/\"\n                    ]\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"description\": \"PHPDoc parser with support for nullable, intersection and generic types\",\n            \"support\": {\n                \"issues\": \"https://github.com/phpstan/phpdoc-parser/issues\",\n                \"source\": \"https://github.com/phpstan/phpdoc-parser/tree/2.0.0\"\n            },\n            \"time\": \"2024-10-13T11:29:49+00:00\"\n        },\n        {\n            \"name\": \"phpstan/phpstan\",\n            \"version\": \"1.12.10\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phpstan/phpstan.git\",\n                \"reference\": \"fc463b5d0fe906dcf19689be692c65c50406a071\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phpstan/phpstan/zipball/fc463b5d0fe906dcf19689be692c65c50406a071\",\n                \"reference\": \"fc463b5d0fe906dcf19689be692c65c50406a071\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2|^8.0\"\n            },\n            \"conflict\": {\n                \"phpstan/phpstan-shim\": \"*\"\n            },\n            \"bin\": [\n                \"phpstan\",\n                \"phpstan.phar\"\n            ],\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"bootstrap.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"description\": \"PHPStan - PHP Static Analysis Tool\",\n            \"keywords\": [\n                \"dev\",\n                \"static analysis\"\n            ],\n            \"support\": {\n                \"docs\": \"https://phpstan.org/user-guide/getting-started\",\n                \"forum\": \"https://github.com/phpstan/phpstan/discussions\",\n                \"issues\": \"https://github.com/phpstan/phpstan/issues\",\n                \"security\": \"https://github.com/phpstan/phpstan/security/policy\",\n                \"source\": \"https://github.com/phpstan/phpstan-src\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/ondrejmirtes\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://github.com/phpstan\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-11-11T15:37:09+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-code-coverage\",\n            \"version\": \"11.0.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-code-coverage.git\",\n                \"reference\": \"f7f08030e8811582cc459871d28d6f5a1a4d35ca\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/f7f08030e8811582cc459871d28d6f5a1a4d35ca\",\n                \"reference\": \"f7f08030e8811582cc459871d28d6f5a1a4d35ca\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-libxml\": \"*\",\n                \"ext-xmlwriter\": \"*\",\n                \"nikic/php-parser\": \"^5.3.1\",\n                \"php\": \">=8.2\",\n                \"phpunit/php-file-iterator\": \"^5.1.0\",\n                \"phpunit/php-text-template\": \"^4.0.1\",\n                \"sebastian/code-unit-reverse-lookup\": \"^4.0.1\",\n                \"sebastian/complexity\": \"^4.0.1\",\n                \"sebastian/environment\": \"^7.2.0\",\n                \"sebastian/lines-of-code\": \"^3.0.1\",\n                \"sebastian/version\": \"^5.0.2\",\n                \"theseer/tokenizer\": \"^1.2.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^11.4.1\"\n            },\n            \"suggest\": {\n                \"ext-pcov\": \"PHP extension that provides line coverage\",\n                \"ext-xdebug\": \"PHP extension that provides line coverage as well as branch and path coverage\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"11.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library that provides collection, processing, and rendering functionality for PHP code coverage information.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-code-coverage\",\n            \"keywords\": [\n                \"coverage\",\n                \"testing\",\n                \"xunit\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/php-code-coverage/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/php-code-coverage/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/php-code-coverage/tree/11.0.7\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-10-09T06:21:38+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-file-iterator\",\n            \"version\": \"5.1.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-file-iterator.git\",\n                \"reference\": \"118cfaaa8bc5aef3287bf315b6060b1174754af6\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/118cfaaa8bc5aef3287bf315b6060b1174754af6\",\n                \"reference\": \"118cfaaa8bc5aef3287bf315b6060b1174754af6\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^11.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"5.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"FilterIterator implementation that filters files based on a list of suffixes.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-file-iterator/\",\n            \"keywords\": [\n                \"filesystem\",\n                \"iterator\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/php-file-iterator/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/php-file-iterator/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/php-file-iterator/tree/5.1.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-08-27T05:02:59+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-invoker\",\n            \"version\": \"5.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-invoker.git\",\n                \"reference\": \"c1ca3814734c07492b3d4c5f794f4b0995333da2\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-invoker/zipball/c1ca3814734c07492b3d4c5f794f4b0995333da2\",\n                \"reference\": \"c1ca3814734c07492b3d4c5f794f4b0995333da2\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\"\n            },\n            \"require-dev\": {\n                \"ext-pcntl\": \"*\",\n                \"phpunit/phpunit\": \"^11.0\"\n            },\n            \"suggest\": {\n                \"ext-pcntl\": \"*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"5.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Invoke callables with a timeout\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-invoker/\",\n            \"keywords\": [\n                \"process\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/php-invoker/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/php-invoker/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/php-invoker/tree/5.0.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-07-03T05:07:44+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-text-template\",\n            \"version\": \"4.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-text-template.git\",\n                \"reference\": \"3e0404dc6b300e6bf56415467ebcb3fe4f33e964\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/3e0404dc6b300e6bf56415467ebcb3fe4f33e964\",\n                \"reference\": \"3e0404dc6b300e6bf56415467ebcb3fe4f33e964\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^11.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"4.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Simple template engine.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-text-template/\",\n            \"keywords\": [\n                \"template\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/php-text-template/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/php-text-template/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/php-text-template/tree/4.0.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-07-03T05:08:43+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-timer\",\n            \"version\": \"7.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-timer.git\",\n                \"reference\": \"3b415def83fbcb41f991d9ebf16ae4ad8b7837b3\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-timer/zipball/3b415def83fbcb41f991d9ebf16ae4ad8b7837b3\",\n                \"reference\": \"3b415def83fbcb41f991d9ebf16ae4ad8b7837b3\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^11.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"7.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Utility class for timing\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-timer/\",\n            \"keywords\": [\n                \"timer\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/php-timer/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/php-timer/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/php-timer/tree/7.0.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-07-03T05:09:35+00:00\"\n        },\n        {\n            \"name\": \"phpunit/phpunit\",\n            \"version\": \"11.4.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/phpunit.git\",\n                \"reference\": \"e8e8ed1854de5d36c088ec1833beae40d2dedd76\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/phpunit/zipball/e8e8ed1854de5d36c088ec1833beae40d2dedd76\",\n                \"reference\": \"e8e8ed1854de5d36c088ec1833beae40d2dedd76\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-json\": \"*\",\n                \"ext-libxml\": \"*\",\n                \"ext-mbstring\": \"*\",\n                \"ext-xml\": \"*\",\n                \"ext-xmlwriter\": \"*\",\n                \"myclabs/deep-copy\": \"^1.12.0\",\n                \"phar-io/manifest\": \"^2.0.4\",\n                \"phar-io/version\": \"^3.2.1\",\n                \"php\": \">=8.2\",\n                \"phpunit/php-code-coverage\": \"^11.0.7\",\n                \"phpunit/php-file-iterator\": \"^5.1.0\",\n                \"phpunit/php-invoker\": \"^5.0.1\",\n                \"phpunit/php-text-template\": \"^4.0.1\",\n                \"phpunit/php-timer\": \"^7.0.1\",\n                \"sebastian/cli-parser\": \"^3.0.2\",\n                \"sebastian/code-unit\": \"^3.0.1\",\n                \"sebastian/comparator\": \"^6.1.1\",\n                \"sebastian/diff\": \"^6.0.2\",\n                \"sebastian/environment\": \"^7.2.0\",\n                \"sebastian/exporter\": \"^6.1.3\",\n                \"sebastian/global-state\": \"^7.0.2\",\n                \"sebastian/object-enumerator\": \"^6.0.1\",\n                \"sebastian/type\": \"^5.1.0\",\n                \"sebastian/version\": \"^5.0.2\"\n            },\n            \"suggest\": {\n                \"ext-soap\": \"To be able to generate mocks based on WSDL files\"\n            },\n            \"bin\": [\n                \"phpunit\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"11.4-dev\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"src/Framework/Assert/Functions.php\"\n                ],\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"The PHP Unit Testing framework.\",\n            \"homepage\": \"https://phpunit.de/\",\n            \"keywords\": [\n                \"phpunit\",\n                \"testing\",\n                \"xunit\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/phpunit/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/phpunit/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/phpunit/tree/11.4.3\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://phpunit.de/sponsors.html\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/phpunit/phpunit\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-10-28T13:07:50+00:00\"\n        },\n        {\n            \"name\": \"sebastian/cli-parser\",\n            \"version\": \"3.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/cli-parser.git\",\n                \"reference\": \"15c5dd40dc4f38794d383bb95465193f5e0ae180\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/cli-parser/zipball/15c5dd40dc4f38794d383bb95465193f5e0ae180\",\n                \"reference\": \"15c5dd40dc4f38794d383bb95465193f5e0ae180\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^11.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library for parsing CLI options\",\n            \"homepage\": \"https://github.com/sebastianbergmann/cli-parser\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/cli-parser/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/cli-parser/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/cli-parser/tree/3.0.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-07-03T04:41:36+00:00\"\n        },\n        {\n            \"name\": \"sebastian/code-unit\",\n            \"version\": \"3.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/code-unit.git\",\n                \"reference\": \"6bb7d09d6623567178cf54126afa9c2310114268\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/code-unit/zipball/6bb7d09d6623567178cf54126afa9c2310114268\",\n                \"reference\": \"6bb7d09d6623567178cf54126afa9c2310114268\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^11.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Collection of value objects that represent the PHP code units\",\n            \"homepage\": \"https://github.com/sebastianbergmann/code-unit\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/code-unit/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/code-unit/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/code-unit/tree/3.0.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-07-03T04:44:28+00:00\"\n        },\n        {\n            \"name\": \"sebastian/code-unit-reverse-lookup\",\n            \"version\": \"4.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup.git\",\n                \"reference\": \"183a9b2632194febd219bb9246eee421dad8d45e\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/183a9b2632194febd219bb9246eee421dad8d45e\",\n                \"reference\": \"183a9b2632194febd219bb9246eee421dad8d45e\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^11.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"4.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Looks up which function or method a line of code belongs to\",\n            \"homepage\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup/\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup/tree/4.0.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-07-03T04:45:54+00:00\"\n        },\n        {\n            \"name\": \"sebastian/comparator\",\n            \"version\": \"6.2.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/comparator.git\",\n                \"reference\": \"43d129d6a0f81c78bee378b46688293eb7ea3739\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/comparator/zipball/43d129d6a0f81c78bee378b46688293eb7ea3739\",\n                \"reference\": \"43d129d6a0f81c78bee378b46688293eb7ea3739\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-mbstring\": \"*\",\n                \"php\": \">=8.2\",\n                \"sebastian/diff\": \"^6.0\",\n                \"sebastian/exporter\": \"^6.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^11.4\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"6.2-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                },\n                {\n                    \"name\": \"Jeff Welch\",\n                    \"email\": \"whatthejeff@gmail.com\"\n                },\n                {\n                    \"name\": \"Volker Dusch\",\n                    \"email\": \"github@wallbash.com\"\n                },\n                {\n                    \"name\": \"Bernhard Schussek\",\n                    \"email\": \"bschussek@2bepublished.at\"\n                }\n            ],\n            \"description\": \"Provides the functionality to compare PHP values for equality\",\n            \"homepage\": \"https://github.com/sebastianbergmann/comparator\",\n            \"keywords\": [\n                \"comparator\",\n                \"compare\",\n                \"equality\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/comparator/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/comparator/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/comparator/tree/6.2.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-10-31T05:30:08+00:00\"\n        },\n        {\n            \"name\": \"sebastian/complexity\",\n            \"version\": \"4.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/complexity.git\",\n                \"reference\": \"ee41d384ab1906c68852636b6de493846e13e5a0\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/complexity/zipball/ee41d384ab1906c68852636b6de493846e13e5a0\",\n                \"reference\": \"ee41d384ab1906c68852636b6de493846e13e5a0\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"nikic/php-parser\": \"^5.0\",\n                \"php\": \">=8.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^11.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"4.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library for calculating the complexity of PHP code units\",\n            \"homepage\": \"https://github.com/sebastianbergmann/complexity\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/complexity/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/complexity/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/complexity/tree/4.0.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-07-03T04:49:50+00:00\"\n        },\n        {\n            \"name\": \"sebastian/diff\",\n            \"version\": \"6.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/diff.git\",\n                \"reference\": \"b4ccd857127db5d41a5b676f24b51371d76d8544\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/diff/zipball/b4ccd857127db5d41a5b676f24b51371d76d8544\",\n                \"reference\": \"b4ccd857127db5d41a5b676f24b51371d76d8544\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^11.0\",\n                \"symfony/process\": \"^4.2 || ^5\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"6.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                },\n                {\n                    \"name\": \"Kore Nordmann\",\n                    \"email\": \"mail@kore-nordmann.de\"\n                }\n            ],\n            \"description\": \"Diff implementation\",\n            \"homepage\": \"https://github.com/sebastianbergmann/diff\",\n            \"keywords\": [\n                \"diff\",\n                \"udiff\",\n                \"unidiff\",\n                \"unified diff\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/diff/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/diff/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/diff/tree/6.0.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-07-03T04:53:05+00:00\"\n        },\n        {\n            \"name\": \"sebastian/environment\",\n            \"version\": \"7.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/environment.git\",\n                \"reference\": \"855f3ae0ab316bbafe1ba4e16e9f3c078d24a0c5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/environment/zipball/855f3ae0ab316bbafe1ba4e16e9f3c078d24a0c5\",\n                \"reference\": \"855f3ae0ab316bbafe1ba4e16e9f3c078d24a0c5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^11.0\"\n            },\n            \"suggest\": {\n                \"ext-posix\": \"*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"7.2-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Provides functionality to handle HHVM/PHP environments\",\n            \"homepage\": \"https://github.com/sebastianbergmann/environment\",\n            \"keywords\": [\n                \"Xdebug\",\n                \"environment\",\n                \"hhvm\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/environment/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/environment/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/environment/tree/7.2.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-07-03T04:54:44+00:00\"\n        },\n        {\n            \"name\": \"sebastian/exporter\",\n            \"version\": \"6.1.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/exporter.git\",\n                \"reference\": \"c414673eee9a8f9d51bbf8d61fc9e3ef1e85b20e\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/exporter/zipball/c414673eee9a8f9d51bbf8d61fc9e3ef1e85b20e\",\n                \"reference\": \"c414673eee9a8f9d51bbf8d61fc9e3ef1e85b20e\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-mbstring\": \"*\",\n                \"php\": \">=8.2\",\n                \"sebastian/recursion-context\": \"^6.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^11.2\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"6.1-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                },\n                {\n                    \"name\": \"Jeff Welch\",\n                    \"email\": \"whatthejeff@gmail.com\"\n                },\n                {\n                    \"name\": \"Volker Dusch\",\n                    \"email\": \"github@wallbash.com\"\n                },\n                {\n                    \"name\": \"Adam Harvey\",\n                    \"email\": \"aharvey@php.net\"\n                },\n                {\n                    \"name\": \"Bernhard Schussek\",\n                    \"email\": \"bschussek@gmail.com\"\n                }\n            ],\n            \"description\": \"Provides the functionality to export PHP variables for visualization\",\n            \"homepage\": \"https://www.github.com/sebastianbergmann/exporter\",\n            \"keywords\": [\n                \"export\",\n                \"exporter\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/exporter/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/exporter/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/exporter/tree/6.1.3\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-07-03T04:56:19+00:00\"\n        },\n        {\n            \"name\": \"sebastian/global-state\",\n            \"version\": \"7.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/global-state.git\",\n                \"reference\": \"3be331570a721f9a4b5917f4209773de17f747d7\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/global-state/zipball/3be331570a721f9a4b5917f4209773de17f747d7\",\n                \"reference\": \"3be331570a721f9a4b5917f4209773de17f747d7\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\",\n                \"sebastian/object-reflector\": \"^4.0\",\n                \"sebastian/recursion-context\": \"^6.0\"\n            },\n            \"require-dev\": {\n                \"ext-dom\": \"*\",\n                \"phpunit/phpunit\": \"^11.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"7.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Snapshotting of global state\",\n            \"homepage\": \"https://www.github.com/sebastianbergmann/global-state\",\n            \"keywords\": [\n                \"global state\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/global-state/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/global-state/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/global-state/tree/7.0.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-07-03T04:57:36+00:00\"\n        },\n        {\n            \"name\": \"sebastian/lines-of-code\",\n            \"version\": \"3.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/lines-of-code.git\",\n                \"reference\": \"d36ad0d782e5756913e42ad87cb2890f4ffe467a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/lines-of-code/zipball/d36ad0d782e5756913e42ad87cb2890f4ffe467a\",\n                \"reference\": \"d36ad0d782e5756913e42ad87cb2890f4ffe467a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"nikic/php-parser\": \"^5.0\",\n                \"php\": \">=8.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^11.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library for counting the lines of code in PHP source code\",\n            \"homepage\": \"https://github.com/sebastianbergmann/lines-of-code\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/lines-of-code/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/lines-of-code/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/lines-of-code/tree/3.0.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-07-03T04:58:38+00:00\"\n        },\n        {\n            \"name\": \"sebastian/object-enumerator\",\n            \"version\": \"6.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/object-enumerator.git\",\n                \"reference\": \"f5b498e631a74204185071eb41f33f38d64608aa\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/f5b498e631a74204185071eb41f33f38d64608aa\",\n                \"reference\": \"f5b498e631a74204185071eb41f33f38d64608aa\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\",\n                \"sebastian/object-reflector\": \"^4.0\",\n                \"sebastian/recursion-context\": \"^6.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^11.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"6.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Traverses array structures and object graphs to enumerate all referenced objects\",\n            \"homepage\": \"https://github.com/sebastianbergmann/object-enumerator/\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/object-enumerator/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/object-enumerator/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/object-enumerator/tree/6.0.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-07-03T05:00:13+00:00\"\n        },\n        {\n            \"name\": \"sebastian/object-reflector\",\n            \"version\": \"4.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/object-reflector.git\",\n                \"reference\": \"6e1a43b411b2ad34146dee7524cb13a068bb35f9\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/6e1a43b411b2ad34146dee7524cb13a068bb35f9\",\n                \"reference\": \"6e1a43b411b2ad34146dee7524cb13a068bb35f9\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^11.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"4.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Allows reflection of object attributes, including inherited and non-public ones\",\n            \"homepage\": \"https://github.com/sebastianbergmann/object-reflector/\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/object-reflector/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/object-reflector/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/object-reflector/tree/4.0.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-07-03T05:01:32+00:00\"\n        },\n        {\n            \"name\": \"sebastian/recursion-context\",\n            \"version\": \"6.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/recursion-context.git\",\n                \"reference\": \"694d156164372abbd149a4b85ccda2e4670c0e16\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/694d156164372abbd149a4b85ccda2e4670c0e16\",\n                \"reference\": \"694d156164372abbd149a4b85ccda2e4670c0e16\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^11.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"6.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                },\n                {\n                    \"name\": \"Jeff Welch\",\n                    \"email\": \"whatthejeff@gmail.com\"\n                },\n                {\n                    \"name\": \"Adam Harvey\",\n                    \"email\": \"aharvey@php.net\"\n                }\n            ],\n            \"description\": \"Provides functionality to recursively process PHP variables\",\n            \"homepage\": \"https://github.com/sebastianbergmann/recursion-context\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/recursion-context/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/recursion-context/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/recursion-context/tree/6.0.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-07-03T05:10:34+00:00\"\n        },\n        {\n            \"name\": \"sebastian/type\",\n            \"version\": \"5.1.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/type.git\",\n                \"reference\": \"461b9c5da241511a2a0e8f240814fb23ce5c0aac\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/type/zipball/461b9c5da241511a2a0e8f240814fb23ce5c0aac\",\n                \"reference\": \"461b9c5da241511a2a0e8f240814fb23ce5c0aac\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^11.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"5.1-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Collection of value objects that represent the types of the PHP type system\",\n            \"homepage\": \"https://github.com/sebastianbergmann/type\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/type/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/type/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/type/tree/5.1.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-09-17T13:12:04+00:00\"\n        },\n        {\n            \"name\": \"sebastian/version\",\n            \"version\": \"5.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/version.git\",\n                \"reference\": \"c687e3387b99f5b03b6caa64c74b63e2936ff874\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/version/zipball/c687e3387b99f5b03b6caa64c74b63e2936ff874\",\n                \"reference\": \"c687e3387b99f5b03b6caa64c74b63e2936ff874\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.2\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"5.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library that helps with managing the version number of Git-hosted PHP projects\",\n            \"homepage\": \"https://github.com/sebastianbergmann/version\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/version/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/version/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/version/tree/5.0.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-10-09T05:16:32+00:00\"\n        },\n        {\n            \"name\": \"theseer/tokenizer\",\n            \"version\": \"1.2.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/theseer/tokenizer.git\",\n                \"reference\": \"737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/theseer/tokenizer/zipball/737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2\",\n                \"reference\": \"737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-tokenizer\": \"*\",\n                \"ext-xmlwriter\": \"*\",\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Arne Blankerts\",\n                    \"email\": \"arne@blankerts.de\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"A small library for converting tokenized PHP source code into XML and potentially other formats\",\n            \"support\": {\n                \"issues\": \"https://github.com/theseer/tokenizer/issues\",\n                \"source\": \"https://github.com/theseer/tokenizer/tree/1.2.3\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/theseer\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-03-03T12:36:25+00:00\"\n        }\n    ],\n    \"aliases\": [],\n    \"minimum-stability\": \"stable\",\n    \"stability-flags\": {\n        \"jackiedo/dotenv-editor\": 20\n    },\n    \"prefer-stable\": true,\n    \"prefer-lowest\": false,\n    \"platform\": {\n        \"php\": \"^8.2\",\n        \"ext-bcmath\": \"*\",\n        \"ext-ctype\": \"*\",\n        \"ext-dom\": \"*\",\n        \"ext-fileinfo\": \"*\",\n        \"ext-gd\": \"*\",\n        \"ext-json\": \"*\",\n        \"ext-mbstring\": \"*\",\n        \"ext-openssl\": \"*\",\n        \"ext-session\": \"*\",\n        \"ext-tokenizer\": \"*\",\n        \"ext-xml\": \"*\"\n    },\n    \"platform-dev\": [],\n    \"plugin-api-version\": \"2.3.0\"\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "crowdin.yml",
          "type": "blob",
          "size": 2.9794921875,
          "content": "#\n# Your Crowdin credentials\n#\n\"base_path\" : \".\"\n\"base_url\" : \"https://api.crowdin.com\"\n\n#\n# Choose file structure in Crowdin\n# e.g. true or false\n#\n\"preserve_hierarchy\": false\n\n#\n# Files configuration\n#\nfiles: [\n {\n  #\n  # Source files filter\n  # e.g. \"/resources/en/*.json\"\n  #\n  \"source\" : \"/resources/lang/en/*.php\",\n\n  #\n  # Where translations will be placed\n  # e.g. \"/resources/%two_letters_code%/%original_file_name%\"\n  #\n  \"translation\" : \"/resources/lang/%two_letters_code%/%original_file_name%\",\n\n  #\n  # Files or directories for ignore\n  # e.g. [\"/**/?.txt\", \"/**/[0-9].txt\", \"/**/*\\?*.txt\"]\n  #\n  #\"ignore\" : [],\n\n  #\n  # The dest allows you to specify a file name in Crowdin\n  # e.g. \"/messages.json\"\n  #\n  #\"dest\" : \"\",\n\n  #\n  # File type\n  # e.g. \"json\"\n  #\n  #\"type\" : \"\",\n\n  #\n  # The parameter \"update_option\" is optional. If it is not set, after the files update the translations for changed strings will be removed. Use to fix typos and for minor changes in the source strings\n  # e.g. \"update_as_unapproved\" or \"update_without_changes\"\n  #\n  #\"update_option\" : \"\",\n\n  #\n  # Start block (for XML only)\n  #\n\n  #\n  # Defines whether to translate tags attributes.\n  # e.g. 0 or 1  (Default is 1)\n  #\n  # \"translate_attributes\" : 1,\n\n  #\n  # Defines whether to translate texts placed inside the tags.\n  # e.g. 0 or 1 (Default is 1)\n  #\n  # \"translate_content\" : 1,\n\n  #\n  # This is an array of strings, where each item is the XPaths to DOM element that should be imported\n  # e.g. [\"/content/text\", \"/content/text[@value]\"]\n  #\n  # \"translatable_elements\" : [],\n\n  #\n  # Defines whether to split long texts into smaller text segments\n  # e.g. 0 or 1 (Default is 1)\n  #\n  # \"content_segmentation\" : 1,\n\n  #\n  # End block (for XML only)\n  #\n\n  #\n  # Start .properties block\n  #\n\n  #\n  # Defines whether single quote should be escaped by another single quote or backslash in exported translations\n  # e.g. 0 or 1 or 2 or 3 (Default is 3)\n  # 0 - do not escape single quote;\n  # 1 - escape single quote by another single quote;\n  # 2 - escape single quote by backslash;\n  # 3 - escape single quote by another single quote only in strings containing variables ( {0} ).\n  #\n  # \"escape_quotes\" : 3,\n\n  #\n  # Defines whether any special characters (=, :, ! and #) should be escaped by backslash in exported translations.\n  # e.g. 0 or 1 (Default is 0)\n  # 0 - do not escape special characters\n  # 1 - escape special characters by a backslash\n  #\n  # \"escape_special_characters\": 0\n  #\n\n  #\n  # End .properties block\n  #\n\n  #\n  # Often software projects have custom names for the directories where translations are placed. crowdin-cli allows you to map your own languages to be understandable by Crowdin.\n  #\n  #\"languages_mapping\" : {\n  #  \"two_letters_code\" : {\n  #    \"crowdin_language_code\" : \"local_name\"\n  #   }\n  #},\n\n  #\n  # Does the first line contain header?\n  # e.g. true or false\n  #\n  #\"first_line_contains_header\" : true,\n\n  #\n  # for spreadsheets\n  # e.g. \"identifier,source_phrase,context,uk,ru,fr\"\n  #\n  # \"scheme\" : \"\",\n }\n]"
        },
        {
          "name": "database",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "jsconfig.json",
          "type": "blob",
          "size": 0.0439453125,
          "content": "{\n  \"include\": [\n    \"./resources/js/*\"\n  ]\n}"
        },
        {
          "name": "nginx.conf",
          "type": "blob",
          "size": 0.201171875,
          "content": "if ($http_x_forwarded_proto != 'https') {\n    rewrite ^ https://$host$request_uri? permanent;\n}\n\nlocation / {\n    try_files $uri @rewriteapp;\n}\nlocation @rewriteapp {\n    rewrite ^(.*)$ /index.php$1 last;\n}"
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 91.1650390625,
          "content": "{\n    \"name\": \"2FAuth\",\n    \"lockfileVersion\": 3,\n    \"requires\": true,\n    \"packages\": {\n        \"\": {\n            \"devDependencies\": {\n                \"@fortawesome/fontawesome-svg-core\": \"^6.4.2\",\n                \"@fortawesome/free-brands-svg-icons\": \"^6.4.2\",\n                \"@fortawesome/free-regular-svg-icons\": \"^6.4.2\",\n                \"@fortawesome/free-solid-svg-icons\": \"^6.4.2\",\n                \"@fortawesome/vue-fontawesome\": \"^3.0.3\",\n                \"@kyvg/vue3-notification\": \"^3.0.2\",\n                \"@vitejs/plugin-vue\": \"^5.0.4\",\n                \"@vueuse/components\": \"^10.4.1\",\n                \"@vueuse/core\": \"^10.4.1\",\n                \"@vueuse/integrations\": \"^10.6.1\",\n                \"axios\": \"^1.1.2\",\n                \"bulma\": \"^0.9.4\",\n                \"bulma-checkradio\": \"^2.1.3\",\n                \"file-saver\": \"^2.0.5\",\n                \"laravel-vite-plugin\": \"^1.0.2\",\n                \"laravel-vue-i18n\": \"^2.7.1\",\n                \"php-parser\": \"^3.1.5\",\n                \"pinia\": \"^2.1.6\",\n                \"sass\": \"^1.67.0\",\n                \"sortablejs\": \"^1.15.0\",\n                \"unplugin-auto-import\": \"^0.16.6\",\n                \"vite\": \"^5.2.7\",\n                \"vue\": \"^3.3.4\",\n                \"vue-qrcode-reader\": \"^5.4.0\",\n                \"vue-router\": \"^4.2.4\"\n            }\n        },\n        \"node_modules/@antfu/utils\": {\n            \"version\": \"0.7.7\",\n            \"resolved\": \"https://registry.npmjs.org/@antfu/utils/-/utils-0.7.7.tgz\",\n            \"integrity\": \"sha512-gFPqTG7otEJ8uP6wrhDv6mqwGWYZKNvAcCq6u9hOj0c+IKCEsY4L1oC9trPq2SaWIzAfHvqfBDxF591JkMf+kg==\",\n            \"dev\": true,\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/antfu\"\n            }\n        },\n        \"node_modules/@babel/helper-string-parser\": {\n            \"version\": \"7.25.9\",\n            \"resolved\": \"https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.25.9.tgz\",\n            \"integrity\": \"sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==\",\n            \"dev\": true,\n            \"engines\": {\n                \"node\": \">=6.9.0\"\n            }\n        },\n        \"node_modules/@babel/helper-validator-identifier\": {\n            \"version\": \"7.25.9\",\n            \"resolved\": \"https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.9.tgz\",\n            \"integrity\": \"sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==\",\n            \"dev\": true,\n            \"engines\": {\n                \"node\": \">=6.9.0\"\n            }\n        },\n        \"node_modules/@babel/parser\": {\n            \"version\": \"7.26.2\",\n            \"resolved\": \"https://registry.npmjs.org/@babel/parser/-/parser-7.26.2.tgz\",\n            \"integrity\": \"sha512-DWMCZH9WA4Maitz2q21SRKHo9QXZxkDsbNZoVD62gusNtNBBqDg9i7uOhASfTfIGNzW+O+r7+jAlM8dwphcJKQ==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@babel/types\": \"^7.26.0\"\n            },\n            \"bin\": {\n                \"parser\": \"bin/babel-parser.js\"\n            },\n            \"engines\": {\n                \"node\": \">=6.0.0\"\n            }\n        },\n        \"node_modules/@babel/types\": {\n            \"version\": \"7.26.0\",\n            \"resolved\": \"https://registry.npmjs.org/@babel/types/-/types-7.26.0.tgz\",\n            \"integrity\": \"sha512-Z/yiTPj+lDVnF7lWeKCIJzaIkI0vYO87dMpZ4bg4TDrFe4XXLFWL1TbXU27gBP3QccxV9mZICCrnjnYlJjXHOA==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@babel/helper-string-parser\": \"^7.25.9\",\n                \"@babel/helper-validator-identifier\": \"^7.25.9\"\n            },\n            \"engines\": {\n                \"node\": \">=6.9.0\"\n            }\n        },\n        \"node_modules/@esbuild/aix-ppc64\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz\",\n            \"integrity\": \"sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==\",\n            \"cpu\": [\n                \"ppc64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"aix\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/android-arm\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz\",\n            \"integrity\": \"sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==\",\n            \"cpu\": [\n                \"arm\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"android\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/android-arm64\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz\",\n            \"integrity\": \"sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==\",\n            \"cpu\": [\n                \"arm64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"android\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/android-x64\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz\",\n            \"integrity\": \"sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==\",\n            \"cpu\": [\n                \"x64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"android\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/darwin-arm64\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz\",\n            \"integrity\": \"sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==\",\n            \"cpu\": [\n                \"arm64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"darwin\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/darwin-x64\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz\",\n            \"integrity\": \"sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==\",\n            \"cpu\": [\n                \"x64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"darwin\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/freebsd-arm64\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz\",\n            \"integrity\": \"sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==\",\n            \"cpu\": [\n                \"arm64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"freebsd\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/freebsd-x64\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz\",\n            \"integrity\": \"sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==\",\n            \"cpu\": [\n                \"x64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"freebsd\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/linux-arm\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz\",\n            \"integrity\": \"sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==\",\n            \"cpu\": [\n                \"arm\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"linux\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/linux-arm64\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz\",\n            \"integrity\": \"sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==\",\n            \"cpu\": [\n                \"arm64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"linux\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/linux-ia32\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz\",\n            \"integrity\": \"sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==\",\n            \"cpu\": [\n                \"ia32\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"linux\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/linux-loong64\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz\",\n            \"integrity\": \"sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==\",\n            \"cpu\": [\n                \"loong64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"linux\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/linux-mips64el\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz\",\n            \"integrity\": \"sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==\",\n            \"cpu\": [\n                \"mips64el\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"linux\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/linux-ppc64\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz\",\n            \"integrity\": \"sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==\",\n            \"cpu\": [\n                \"ppc64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"linux\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/linux-riscv64\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz\",\n            \"integrity\": \"sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==\",\n            \"cpu\": [\n                \"riscv64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"linux\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/linux-s390x\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz\",\n            \"integrity\": \"sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==\",\n            \"cpu\": [\n                \"s390x\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"linux\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/linux-x64\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz\",\n            \"integrity\": \"sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==\",\n            \"cpu\": [\n                \"x64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"linux\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/netbsd-x64\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz\",\n            \"integrity\": \"sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==\",\n            \"cpu\": [\n                \"x64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"netbsd\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/openbsd-x64\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz\",\n            \"integrity\": \"sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==\",\n            \"cpu\": [\n                \"x64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"openbsd\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/sunos-x64\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz\",\n            \"integrity\": \"sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==\",\n            \"cpu\": [\n                \"x64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"sunos\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/win32-arm64\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz\",\n            \"integrity\": \"sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==\",\n            \"cpu\": [\n                \"arm64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"win32\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/win32-ia32\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz\",\n            \"integrity\": \"sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==\",\n            \"cpu\": [\n                \"ia32\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"win32\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@esbuild/win32-x64\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz\",\n            \"integrity\": \"sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==\",\n            \"cpu\": [\n                \"x64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"win32\"\n            ],\n            \"engines\": {\n                \"node\": \">=12\"\n            }\n        },\n        \"node_modules/@fortawesome/fontawesome-common-types\": {\n            \"version\": \"6.6.0\",\n            \"resolved\": \"https://registry.npmjs.org/@fortawesome/fontawesome-common-types/-/fontawesome-common-types-6.6.0.tgz\",\n            \"integrity\": \"sha512-xyX0X9mc0kyz9plIyryrRbl7ngsA9jz77mCZJsUkLl+ZKs0KWObgaEBoSgQiYWAsSmjz/yjl0F++Got0Mdp4Rw==\",\n            \"dev\": true,\n            \"engines\": {\n                \"node\": \">=6\"\n            }\n        },\n        \"node_modules/@fortawesome/fontawesome-svg-core\": {\n            \"version\": \"6.6.0\",\n            \"resolved\": \"https://registry.npmjs.org/@fortawesome/fontawesome-svg-core/-/fontawesome-svg-core-6.6.0.tgz\",\n            \"integrity\": \"sha512-KHwPkCk6oRT4HADE7smhfsKudt9N/9lm6EJ5BVg0tD1yPA5hht837fB87F8pn15D8JfTqQOjhKTktwmLMiD7Kg==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@fortawesome/fontawesome-common-types\": \"6.6.0\"\n            },\n            \"engines\": {\n                \"node\": \">=6\"\n            }\n        },\n        \"node_modules/@fortawesome/free-brands-svg-icons\": {\n            \"version\": \"6.6.0\",\n            \"resolved\": \"https://registry.npmjs.org/@fortawesome/free-brands-svg-icons/-/free-brands-svg-icons-6.6.0.tgz\",\n            \"integrity\": \"sha512-1MPD8lMNW/earme4OQi1IFHtmHUwAKgghXlNwWi9GO7QkTfD+IIaYpIai4m2YJEzqfEji3jFHX1DZI5pbY/biQ==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@fortawesome/fontawesome-common-types\": \"6.6.0\"\n            },\n            \"engines\": {\n                \"node\": \">=6\"\n            }\n        },\n        \"node_modules/@fortawesome/free-regular-svg-icons\": {\n            \"version\": \"6.6.0\",\n            \"resolved\": \"https://registry.npmjs.org/@fortawesome/free-regular-svg-icons/-/free-regular-svg-icons-6.6.0.tgz\",\n            \"integrity\": \"sha512-Yv9hDzL4aI73BEwSEh20clrY8q/uLxawaQ98lekBx6t9dQKDHcDzzV1p2YtBGTtolYtNqcWdniOnhzB+JPnQEQ==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@fortawesome/fontawesome-common-types\": \"6.6.0\"\n            },\n            \"engines\": {\n                \"node\": \">=6\"\n            }\n        },\n        \"node_modules/@fortawesome/free-solid-svg-icons\": {\n            \"version\": \"6.6.0\",\n            \"resolved\": \"https://registry.npmjs.org/@fortawesome/free-solid-svg-icons/-/free-solid-svg-icons-6.6.0.tgz\",\n            \"integrity\": \"sha512-IYv/2skhEDFc2WGUcqvFJkeK39Q+HyPf5GHUrT/l2pKbtgEIv1al1TKd6qStR5OIwQdN1GZP54ci3y4mroJWjA==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@fortawesome/fontawesome-common-types\": \"6.6.0\"\n            },\n            \"engines\": {\n                \"node\": \">=6\"\n            }\n        },\n        \"node_modules/@fortawesome/vue-fontawesome\": {\n            \"version\": \"3.0.8\",\n            \"resolved\": \"https://registry.npmjs.org/@fortawesome/vue-fontawesome/-/vue-fontawesome-3.0.8.tgz\",\n            \"integrity\": \"sha512-yyHHAj4G8pQIDfaIsMvQpwKMboIZtcHTUvPqXjOHyldh1O1vZfH4W03VDPv5RvI9P6DLTzJQlmVgj9wCf7c2Fw==\",\n            \"dev\": true,\n            \"peerDependencies\": {\n                \"@fortawesome/fontawesome-svg-core\": \"~1 || ~6\",\n                \"vue\": \">= 3.0.0 < 4\"\n            }\n        },\n        \"node_modules/@jridgewell/sourcemap-codec\": {\n            \"version\": \"1.5.0\",\n            \"resolved\": \"https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz\",\n            \"integrity\": \"sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==\",\n            \"dev\": true\n        },\n        \"node_modules/@kyvg/vue3-notification\": {\n            \"version\": \"3.4.1\",\n            \"resolved\": \"https://registry.npmjs.org/@kyvg/vue3-notification/-/vue3-notification-3.4.1.tgz\",\n            \"integrity\": \"sha512-WhTWCbF36JHLJR5UdKmJF7KXGOGVy4tLeaJuKTHZhwttZWnbF9w1/c2d32tvCSwY9CdeX/n9uoaKWLMKK3vOyg==\",\n            \"dev\": true,\n            \"peerDependencies\": {\n                \"vue\": \"^3.0.0\"\n            }\n        },\n        \"node_modules/@nodelib/fs.scandir\": {\n            \"version\": \"2.1.5\",\n            \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz\",\n            \"integrity\": \"sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@nodelib/fs.stat\": \"2.0.5\",\n                \"run-parallel\": \"^1.1.9\"\n            },\n            \"engines\": {\n                \"node\": \">= 8\"\n            }\n        },\n        \"node_modules/@nodelib/fs.stat\": {\n            \"version\": \"2.0.5\",\n            \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz\",\n            \"integrity\": \"sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==\",\n            \"dev\": true,\n            \"engines\": {\n                \"node\": \">= 8\"\n            }\n        },\n        \"node_modules/@nodelib/fs.walk\": {\n            \"version\": \"1.2.8\",\n            \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz\",\n            \"integrity\": \"sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@nodelib/fs.scandir\": \"2.1.5\",\n                \"fastq\": \"^1.6.0\"\n            },\n            \"engines\": {\n                \"node\": \">= 8\"\n            }\n        },\n        \"node_modules/@rollup/pluginutils\": {\n            \"version\": \"5.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-5.1.0.tgz\",\n            \"integrity\": \"sha512-XTIWOPPcpvyKI6L1NHo0lFlCyznUEyPmPY1mc3KpPVDYulHSTvyeLNVW00QTLIAFNhR3kYnJTQHeGqU4M3n09g==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@types/estree\": \"^1.0.0\",\n                \"estree-walker\": \"^2.0.2\",\n                \"picomatch\": \"^2.3.1\"\n            },\n            \"engines\": {\n                \"node\": \">=14.0.0\"\n            },\n            \"peerDependencies\": {\n                \"rollup\": \"^1.20.0||^2.0.0||^3.0.0||^4.0.0\"\n            },\n            \"peerDependenciesMeta\": {\n                \"rollup\": {\n                    \"optional\": true\n                }\n            }\n        },\n        \"node_modules/@rollup/rollup-android-arm-eabi\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.24.4.tgz\",\n            \"integrity\": \"sha512-jfUJrFct/hTA0XDM5p/htWKoNNTbDLY0KRwEt6pyOA6k2fmk0WVwl65PdUdJZgzGEHWx+49LilkcSaumQRyNQw==\",\n            \"cpu\": [\n                \"arm\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"android\"\n            ]\n        },\n        \"node_modules/@rollup/rollup-android-arm64\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.24.4.tgz\",\n            \"integrity\": \"sha512-j4nrEO6nHU1nZUuCfRKoCcvh7PIywQPUCBa2UsootTHvTHIoIu2BzueInGJhhvQO/2FTRdNYpf63xsgEqH9IhA==\",\n            \"cpu\": [\n                \"arm64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"android\"\n            ]\n        },\n        \"node_modules/@rollup/rollup-darwin-arm64\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.24.4.tgz\",\n            \"integrity\": \"sha512-GmU/QgGtBTeraKyldC7cDVVvAJEOr3dFLKneez/n7BvX57UdhOqDsVwzU7UOnYA7AAOt+Xb26lk79PldDHgMIQ==\",\n            \"cpu\": [\n                \"arm64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"darwin\"\n            ]\n        },\n        \"node_modules/@rollup/rollup-darwin-x64\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.24.4.tgz\",\n            \"integrity\": \"sha512-N6oDBiZCBKlwYcsEPXGDE4g9RoxZLK6vT98M8111cW7VsVJFpNEqvJeIPfsCzbf0XEakPslh72X0gnlMi4Ddgg==\",\n            \"cpu\": [\n                \"x64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"darwin\"\n            ]\n        },\n        \"node_modules/@rollup/rollup-freebsd-arm64\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.24.4.tgz\",\n            \"integrity\": \"sha512-py5oNShCCjCyjWXCZNrRGRpjWsF0ic8f4ieBNra5buQz0O/U6mMXCpC1LvrHuhJsNPgRt36tSYMidGzZiJF6mw==\",\n            \"cpu\": [\n                \"arm64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"freebsd\"\n            ]\n        },\n        \"node_modules/@rollup/rollup-freebsd-x64\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.24.4.tgz\",\n            \"integrity\": \"sha512-L7VVVW9FCnTTp4i7KrmHeDsDvjB4++KOBENYtNYAiYl96jeBThFfhP6HVxL74v4SiZEVDH/1ILscR5U9S4ms4g==\",\n            \"cpu\": [\n                \"x64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"freebsd\"\n            ]\n        },\n        \"node_modules/@rollup/rollup-linux-arm-gnueabihf\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.24.4.tgz\",\n            \"integrity\": \"sha512-10ICosOwYChROdQoQo589N5idQIisxjaFE/PAnX2i0Zr84mY0k9zul1ArH0rnJ/fpgiqfu13TFZR5A5YJLOYZA==\",\n            \"cpu\": [\n                \"arm\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"linux\"\n            ]\n        },\n        \"node_modules/@rollup/rollup-linux-arm-musleabihf\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.24.4.tgz\",\n            \"integrity\": \"sha512-ySAfWs69LYC7QhRDZNKqNhz2UKN8LDfbKSMAEtoEI0jitwfAG2iZwVqGACJT+kfYvvz3/JgsLlcBP+WWoKCLcw==\",\n            \"cpu\": [\n                \"arm\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"linux\"\n            ]\n        },\n        \"node_modules/@rollup/rollup-linux-arm64-gnu\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.24.4.tgz\",\n            \"integrity\": \"sha512-uHYJ0HNOI6pGEeZ/5mgm5arNVTI0nLlmrbdph+pGXpC9tFHFDQmDMOEqkmUObRfosJqpU8RliYoGz06qSdtcjg==\",\n            \"cpu\": [\n                \"arm64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"linux\"\n            ]\n        },\n        \"node_modules/@rollup/rollup-linux-arm64-musl\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.24.4.tgz\",\n            \"integrity\": \"sha512-38yiWLemQf7aLHDgTg85fh3hW9stJ0Muk7+s6tIkSUOMmi4Xbv5pH/5Bofnsb6spIwD5FJiR+jg71f0CH5OzoA==\",\n            \"cpu\": [\n                \"arm64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"linux\"\n            ]\n        },\n        \"node_modules/@rollup/rollup-linux-powerpc64le-gnu\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.24.4.tgz\",\n            \"integrity\": \"sha512-q73XUPnkwt9ZNF2xRS4fvneSuaHw2BXuV5rI4cw0fWYVIWIBeDZX7c7FWhFQPNTnE24172K30I+dViWRVD9TwA==\",\n            \"cpu\": [\n                \"ppc64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"linux\"\n            ]\n        },\n        \"node_modules/@rollup/rollup-linux-riscv64-gnu\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.24.4.tgz\",\n            \"integrity\": \"sha512-Aie/TbmQi6UXokJqDZdmTJuZBCU3QBDA8oTKRGtd4ABi/nHgXICulfg1KI6n9/koDsiDbvHAiQO3YAUNa/7BCw==\",\n            \"cpu\": [\n                \"riscv64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"linux\"\n            ]\n        },\n        \"node_modules/@rollup/rollup-linux-s390x-gnu\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.24.4.tgz\",\n            \"integrity\": \"sha512-P8MPErVO/y8ohWSP9JY7lLQ8+YMHfTI4bAdtCi3pC2hTeqFJco2jYspzOzTUB8hwUWIIu1xwOrJE11nP+0JFAQ==\",\n            \"cpu\": [\n                \"s390x\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"linux\"\n            ]\n        },\n        \"node_modules/@rollup/rollup-linux-x64-gnu\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.24.4.tgz\",\n            \"integrity\": \"sha512-K03TljaaoPK5FOyNMZAAEmhlyO49LaE4qCsr0lYHUKyb6QacTNF9pnfPpXnFlFD3TXuFbFbz7tJ51FujUXkXYA==\",\n            \"cpu\": [\n                \"x64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"linux\"\n            ]\n        },\n        \"node_modules/@rollup/rollup-linux-x64-musl\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.24.4.tgz\",\n            \"integrity\": \"sha512-VJYl4xSl/wqG2D5xTYncVWW+26ICV4wubwN9Gs5NrqhJtayikwCXzPL8GDsLnaLU3WwhQ8W02IinYSFJfyo34Q==\",\n            \"cpu\": [\n                \"x64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"linux\"\n            ]\n        },\n        \"node_modules/@rollup/rollup-win32-arm64-msvc\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.24.4.tgz\",\n            \"integrity\": \"sha512-ku2GvtPwQfCqoPFIJCqZ8o7bJcj+Y54cZSr43hHca6jLwAiCbZdBUOrqE6y29QFajNAzzpIOwsckaTFmN6/8TA==\",\n            \"cpu\": [\n                \"arm64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"win32\"\n            ]\n        },\n        \"node_modules/@rollup/rollup-win32-ia32-msvc\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.24.4.tgz\",\n            \"integrity\": \"sha512-V3nCe+eTt/W6UYNr/wGvO1fLpHUrnlirlypZfKCT1fG6hWfqhPgQV/K/mRBXBpxc0eKLIF18pIOFVPh0mqHjlg==\",\n            \"cpu\": [\n                \"ia32\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"win32\"\n            ]\n        },\n        \"node_modules/@rollup/rollup-win32-x64-msvc\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.24.4.tgz\",\n            \"integrity\": \"sha512-LTw1Dfd0mBIEqUVCxbvTE/LLo+9ZxVC9k99v1v4ahg9Aak6FpqOfNu5kRkeTAn0wphoC4JU7No1/rL+bBCEwhg==\",\n            \"cpu\": [\n                \"x64\"\n            ],\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"optional\": true,\n            \"os\": [\n                \"win32\"\n            ]\n        },\n        \"node_modules/@types/dom-webcodecs\": {\n            \"version\": \"0.1.11\",\n            \"resolved\": \"https://registry.npmjs.org/@types/dom-webcodecs/-/dom-webcodecs-0.1.11.tgz\",\n            \"integrity\": \"sha512-yPEZ3z7EohrmOxbk/QTAa0yonMFkNkjnVXqbGb7D4rMr+F1dGQ8ZUFxXkyLLJuiICPejZ0AZE9Rrk9wUCczx4A==\",\n            \"dev\": true\n        },\n        \"node_modules/@types/emscripten\": {\n            \"version\": \"1.39.10\",\n            \"resolved\": \"https://registry.npmjs.org/@types/emscripten/-/emscripten-1.39.10.tgz\",\n            \"integrity\": \"sha512-TB/6hBkYQJxsZHSqyeuO1Jt0AB/bW6G7rHt9g7lML7SOF6lbgcHvw/Lr+69iqN0qxgXLhWKScAon73JNnptuDw==\",\n            \"dev\": true\n        },\n        \"node_modules/@types/estree\": {\n            \"version\": \"1.0.6\",\n            \"resolved\": \"https://registry.npmjs.org/@types/estree/-/estree-1.0.6.tgz\",\n            \"integrity\": \"sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==\",\n            \"dev\": true,\n            \"license\": \"MIT\"\n        },\n        \"node_modules/@types/web-bluetooth\": {\n            \"version\": \"0.0.20\",\n            \"resolved\": \"https://registry.npmjs.org/@types/web-bluetooth/-/web-bluetooth-0.0.20.tgz\",\n            \"integrity\": \"sha512-g9gZnnXVq7gM7v3tJCWV/qw7w+KeOlSHAhgF9RytFyifW6AF61hdT2ucrYhPq9hLs5JIryeupHV3qGk95dH9ow==\",\n            \"dev\": true\n        },\n        \"node_modules/@vitejs/plugin-vue\": {\n            \"version\": \"5.0.4\",\n            \"resolved\": \"https://registry.npmjs.org/@vitejs/plugin-vue/-/plugin-vue-5.0.4.tgz\",\n            \"integrity\": \"sha512-WS3hevEszI6CEVEx28F8RjTX97k3KsrcY6kvTg7+Whm5y3oYvcqzVeGCU3hxSAn4uY2CLCkeokkGKpoctccilQ==\",\n            \"dev\": true,\n            \"engines\": {\n                \"node\": \"^18.0.0 || >=20.0.0\"\n            },\n            \"peerDependencies\": {\n                \"vite\": \"^5.0.0\",\n                \"vue\": \"^3.2.25\"\n            }\n        },\n        \"node_modules/@vue/compiler-core\": {\n            \"version\": \"3.5.13\",\n            \"resolved\": \"https://registry.npmjs.org/@vue/compiler-core/-/compiler-core-3.5.13.tgz\",\n            \"integrity\": \"sha512-oOdAkwqUfW1WqpwSYJce06wvt6HljgY3fGeM9NcVA1HaYOij3mZG9Rkysn0OHuyUAGMbEbARIpsG+LPVlBJ5/Q==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@babel/parser\": \"^7.25.3\",\n                \"@vue/shared\": \"3.5.13\",\n                \"entities\": \"^4.5.0\",\n                \"estree-walker\": \"^2.0.2\",\n                \"source-map-js\": \"^1.2.0\"\n            }\n        },\n        \"node_modules/@vue/compiler-dom\": {\n            \"version\": \"3.5.13\",\n            \"resolved\": \"https://registry.npmjs.org/@vue/compiler-dom/-/compiler-dom-3.5.13.tgz\",\n            \"integrity\": \"sha512-ZOJ46sMOKUjO3e94wPdCzQ6P1Lx/vhp2RSvfaab88Ajexs0AHeV0uasYhi99WPaogmBlRHNRuly8xV75cNTMDA==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@vue/compiler-core\": \"3.5.13\",\n                \"@vue/shared\": \"3.5.13\"\n            }\n        },\n        \"node_modules/@vue/compiler-sfc\": {\n            \"version\": \"3.5.13\",\n            \"resolved\": \"https://registry.npmjs.org/@vue/compiler-sfc/-/compiler-sfc-3.5.13.tgz\",\n            \"integrity\": \"sha512-6VdaljMpD82w6c2749Zhf5T9u5uLBWKnVue6XWxprDobftnletJ8+oel7sexFfM3qIxNmVE7LSFGTpv6obNyaQ==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@babel/parser\": \"^7.25.3\",\n                \"@vue/compiler-core\": \"3.5.13\",\n                \"@vue/compiler-dom\": \"3.5.13\",\n                \"@vue/compiler-ssr\": \"3.5.13\",\n                \"@vue/shared\": \"3.5.13\",\n                \"estree-walker\": \"^2.0.2\",\n                \"magic-string\": \"^0.30.11\",\n                \"postcss\": \"^8.4.48\",\n                \"source-map-js\": \"^1.2.0\"\n            }\n        },\n        \"node_modules/@vue/compiler-ssr\": {\n            \"version\": \"3.5.13\",\n            \"resolved\": \"https://registry.npmjs.org/@vue/compiler-ssr/-/compiler-ssr-3.5.13.tgz\",\n            \"integrity\": \"sha512-wMH6vrYHxQl/IybKJagqbquvxpWCuVYpoUJfCqFZwa/JY1GdATAQ+TgVtgrwwMZ0D07QhA99rs/EAAWfvG6KpA==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@vue/compiler-dom\": \"3.5.13\",\n                \"@vue/shared\": \"3.5.13\"\n            }\n        },\n        \"node_modules/@vue/devtools-api\": {\n            \"version\": \"6.6.4\",\n            \"resolved\": \"https://registry.npmjs.org/@vue/devtools-api/-/devtools-api-6.6.4.tgz\",\n            \"integrity\": \"sha512-sGhTPMuXqZ1rVOk32RylztWkfXTRhuS7vgAKv0zjqk8gbsHkJ7xfFf+jbySxt7tWObEJwyKaHMikV/WGDiQm8g==\",\n            \"dev\": true\n        },\n        \"node_modules/@vue/reactivity\": {\n            \"version\": \"3.5.13\",\n            \"resolved\": \"https://registry.npmjs.org/@vue/reactivity/-/reactivity-3.5.13.tgz\",\n            \"integrity\": \"sha512-NaCwtw8o48B9I6L1zl2p41OHo/2Z4wqYGGIK1Khu5T7yxrn+ATOixn/Udn2m+6kZKB/J7cuT9DbWWhRxqixACg==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@vue/shared\": \"3.5.13\"\n            }\n        },\n        \"node_modules/@vue/runtime-core\": {\n            \"version\": \"3.5.13\",\n            \"resolved\": \"https://registry.npmjs.org/@vue/runtime-core/-/runtime-core-3.5.13.tgz\",\n            \"integrity\": \"sha512-Fj4YRQ3Az0WTZw1sFe+QDb0aXCerigEpw418pw1HBUKFtnQHWzwojaukAs2X/c9DQz4MQ4bsXTGlcpGxU/RCIw==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@vue/reactivity\": \"3.5.13\",\n                \"@vue/shared\": \"3.5.13\"\n            }\n        },\n        \"node_modules/@vue/runtime-dom\": {\n            \"version\": \"3.5.13\",\n            \"resolved\": \"https://registry.npmjs.org/@vue/runtime-dom/-/runtime-dom-3.5.13.tgz\",\n            \"integrity\": \"sha512-dLaj94s93NYLqjLiyFzVs9X6dWhTdAlEAciC3Moq7gzAc13VJUdCnjjRurNM6uTLFATRHexHCTu/Xp3eW6yoog==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@vue/reactivity\": \"3.5.13\",\n                \"@vue/runtime-core\": \"3.5.13\",\n                \"@vue/shared\": \"3.5.13\",\n                \"csstype\": \"^3.1.3\"\n            }\n        },\n        \"node_modules/@vue/server-renderer\": {\n            \"version\": \"3.5.13\",\n            \"resolved\": \"https://registry.npmjs.org/@vue/server-renderer/-/server-renderer-3.5.13.tgz\",\n            \"integrity\": \"sha512-wAi4IRJV/2SAW3htkTlB+dHeRmpTiVIK1OGLWV1yeStVSebSQQOwGwIq0D3ZIoBj2C2qpgz5+vX9iEBkTdk5YA==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@vue/compiler-ssr\": \"3.5.13\",\n                \"@vue/shared\": \"3.5.13\"\n            },\n            \"peerDependencies\": {\n                \"vue\": \"3.5.13\"\n            }\n        },\n        \"node_modules/@vue/shared\": {\n            \"version\": \"3.5.13\",\n            \"resolved\": \"https://registry.npmjs.org/@vue/shared/-/shared-3.5.13.tgz\",\n            \"integrity\": \"sha512-/hnE/qP5ZoGpol0a5mDi45bOd7t3tjYJBjsgCsivow7D48cJeV5l05RD82lPqi7gRiphZM37rnhW1l6ZoCNNnQ==\",\n            \"dev\": true\n        },\n        \"node_modules/@vueuse/components\": {\n            \"version\": \"10.11.1\",\n            \"resolved\": \"https://registry.npmjs.org/@vueuse/components/-/components-10.11.1.tgz\",\n            \"integrity\": \"sha512-ThcreQCX/eq61sLkLKjigD4PQvs3Wy4zglICvQH9tP6xl87y5KsQEoizn6OI+R3hrOgwQHLJe7Y0wLLh3fBKcg==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@vueuse/core\": \"10.11.1\",\n                \"@vueuse/shared\": \"10.11.1\",\n                \"vue-demi\": \">=0.14.8\"\n            }\n        },\n        \"node_modules/@vueuse/components/node_modules/vue-demi\": {\n            \"version\": \"0.14.10\",\n            \"resolved\": \"https://registry.npmjs.org/vue-demi/-/vue-demi-0.14.10.tgz\",\n            \"integrity\": \"sha512-nMZBOwuzabUO0nLgIcc6rycZEebF6eeUfaiQx9+WSk8e29IbLvPU9feI6tqW4kTo3hvoYAJkMh8n8D0fuISphg==\",\n            \"dev\": true,\n            \"hasInstallScript\": true,\n            \"bin\": {\n                \"vue-demi-fix\": \"bin/vue-demi-fix.js\",\n                \"vue-demi-switch\": \"bin/vue-demi-switch.js\"\n            },\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/antfu\"\n            },\n            \"peerDependencies\": {\n                \"@vue/composition-api\": \"^1.0.0-rc.1\",\n                \"vue\": \"^3.0.0-0 || ^2.6.0\"\n            },\n            \"peerDependenciesMeta\": {\n                \"@vue/composition-api\": {\n                    \"optional\": true\n                }\n            }\n        },\n        \"node_modules/@vueuse/core\": {\n            \"version\": \"10.11.1\",\n            \"resolved\": \"https://registry.npmjs.org/@vueuse/core/-/core-10.11.1.tgz\",\n            \"integrity\": \"sha512-guoy26JQktXPcz+0n3GukWIy/JDNKti9v6VEMu6kV2sYBsWuGiTU8OWdg+ADfUbHg3/3DlqySDe7JmdHrktiww==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@types/web-bluetooth\": \"^0.0.20\",\n                \"@vueuse/metadata\": \"10.11.1\",\n                \"@vueuse/shared\": \"10.11.1\",\n                \"vue-demi\": \">=0.14.8\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/antfu\"\n            }\n        },\n        \"node_modules/@vueuse/core/node_modules/vue-demi\": {\n            \"version\": \"0.14.10\",\n            \"resolved\": \"https://registry.npmjs.org/vue-demi/-/vue-demi-0.14.10.tgz\",\n            \"integrity\": \"sha512-nMZBOwuzabUO0nLgIcc6rycZEebF6eeUfaiQx9+WSk8e29IbLvPU9feI6tqW4kTo3hvoYAJkMh8n8D0fuISphg==\",\n            \"dev\": true,\n            \"hasInstallScript\": true,\n            \"bin\": {\n                \"vue-demi-fix\": \"bin/vue-demi-fix.js\",\n                \"vue-demi-switch\": \"bin/vue-demi-switch.js\"\n            },\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/antfu\"\n            },\n            \"peerDependencies\": {\n                \"@vue/composition-api\": \"^1.0.0-rc.1\",\n                \"vue\": \"^3.0.0-0 || ^2.6.0\"\n            },\n            \"peerDependenciesMeta\": {\n                \"@vue/composition-api\": {\n                    \"optional\": true\n                }\n            }\n        },\n        \"node_modules/@vueuse/integrations\": {\n            \"version\": \"10.11.1\",\n            \"resolved\": \"https://registry.npmjs.org/@vueuse/integrations/-/integrations-10.11.1.tgz\",\n            \"integrity\": \"sha512-Y5hCGBguN+vuVYTZmdd/IMXLOdfS60zAmDmFYc4BKBcMUPZH1n4tdyDECCPjXm0bNT3ZRUy1xzTLGaUje8Xyaw==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@vueuse/core\": \"10.11.1\",\n                \"@vueuse/shared\": \"10.11.1\",\n                \"vue-demi\": \">=0.14.8\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/antfu\"\n            },\n            \"peerDependencies\": {\n                \"async-validator\": \"^4\",\n                \"axios\": \"^1\",\n                \"change-case\": \"^4\",\n                \"drauu\": \"^0.3\",\n                \"focus-trap\": \"^7\",\n                \"fuse.js\": \"^6\",\n                \"idb-keyval\": \"^6\",\n                \"jwt-decode\": \"^3\",\n                \"nprogress\": \"^0.2\",\n                \"qrcode\": \"^1.5\",\n                \"sortablejs\": \"^1\",\n                \"universal-cookie\": \"^6\"\n            },\n            \"peerDependenciesMeta\": {\n                \"async-validator\": {\n                    \"optional\": true\n                },\n                \"axios\": {\n                    \"optional\": true\n                },\n                \"change-case\": {\n                    \"optional\": true\n                },\n                \"drauu\": {\n                    \"optional\": true\n                },\n                \"focus-trap\": {\n                    \"optional\": true\n                },\n                \"fuse.js\": {\n                    \"optional\": true\n                },\n                \"idb-keyval\": {\n                    \"optional\": true\n                },\n                \"jwt-decode\": {\n                    \"optional\": true\n                },\n                \"nprogress\": {\n                    \"optional\": true\n                },\n                \"qrcode\": {\n                    \"optional\": true\n                },\n                \"sortablejs\": {\n                    \"optional\": true\n                },\n                \"universal-cookie\": {\n                    \"optional\": true\n                }\n            }\n        },\n        \"node_modules/@vueuse/integrations/node_modules/vue-demi\": {\n            \"version\": \"0.14.10\",\n            \"resolved\": \"https://registry.npmjs.org/vue-demi/-/vue-demi-0.14.10.tgz\",\n            \"integrity\": \"sha512-nMZBOwuzabUO0nLgIcc6rycZEebF6eeUfaiQx9+WSk8e29IbLvPU9feI6tqW4kTo3hvoYAJkMh8n8D0fuISphg==\",\n            \"dev\": true,\n            \"hasInstallScript\": true,\n            \"bin\": {\n                \"vue-demi-fix\": \"bin/vue-demi-fix.js\",\n                \"vue-demi-switch\": \"bin/vue-demi-switch.js\"\n            },\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/antfu\"\n            },\n            \"peerDependencies\": {\n                \"@vue/composition-api\": \"^1.0.0-rc.1\",\n                \"vue\": \"^3.0.0-0 || ^2.6.0\"\n            },\n            \"peerDependenciesMeta\": {\n                \"@vue/composition-api\": {\n                    \"optional\": true\n                }\n            }\n        },\n        \"node_modules/@vueuse/metadata\": {\n            \"version\": \"10.11.1\",\n            \"resolved\": \"https://registry.npmjs.org/@vueuse/metadata/-/metadata-10.11.1.tgz\",\n            \"integrity\": \"sha512-IGa5FXd003Ug1qAZmyE8wF3sJ81xGLSqTqtQ6jaVfkeZ4i5kS2mwQF61yhVqojRnenVew5PldLyRgvdl4YYuSw==\",\n            \"dev\": true,\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/antfu\"\n            }\n        },\n        \"node_modules/@vueuse/shared\": {\n            \"version\": \"10.11.1\",\n            \"resolved\": \"https://registry.npmjs.org/@vueuse/shared/-/shared-10.11.1.tgz\",\n            \"integrity\": \"sha512-LHpC8711VFZlDaYUXEBbFBCQ7GS3dVU9mjOhhMhXP6txTV4EhYQg/KGnQuvt/sPAtoUKq7VVUnL6mVtFoL42sA==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"vue-demi\": \">=0.14.8\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/antfu\"\n            }\n        },\n        \"node_modules/@vueuse/shared/node_modules/vue-demi\": {\n            \"version\": \"0.14.10\",\n            \"resolved\": \"https://registry.npmjs.org/vue-demi/-/vue-demi-0.14.10.tgz\",\n            \"integrity\": \"sha512-nMZBOwuzabUO0nLgIcc6rycZEebF6eeUfaiQx9+WSk8e29IbLvPU9feI6tqW4kTo3hvoYAJkMh8n8D0fuISphg==\",\n            \"dev\": true,\n            \"hasInstallScript\": true,\n            \"bin\": {\n                \"vue-demi-fix\": \"bin/vue-demi-fix.js\",\n                \"vue-demi-switch\": \"bin/vue-demi-switch.js\"\n            },\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/antfu\"\n            },\n            \"peerDependencies\": {\n                \"@vue/composition-api\": \"^1.0.0-rc.1\",\n                \"vue\": \"^3.0.0-0 || ^2.6.0\"\n            },\n            \"peerDependenciesMeta\": {\n                \"@vue/composition-api\": {\n                    \"optional\": true\n                }\n            }\n        },\n        \"node_modules/acorn\": {\n            \"version\": \"8.11.3\",\n            \"resolved\": \"https://registry.npmjs.org/acorn/-/acorn-8.11.3.tgz\",\n            \"integrity\": \"sha512-Y9rRfJG5jcKOE0CLisYbojUjIrIEE7AGMzA/Sm4BslANhbS+cDMpgBdcPT91oJ7OuJ9hYJBx59RjbhxVnrF8Xg==\",\n            \"dev\": true,\n            \"bin\": {\n                \"acorn\": \"bin/acorn\"\n            },\n            \"engines\": {\n                \"node\": \">=0.4.0\"\n            }\n        },\n        \"node_modules/anymatch\": {\n            \"version\": \"3.1.3\",\n            \"resolved\": \"https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz\",\n            \"integrity\": \"sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"normalize-path\": \"^3.0.0\",\n                \"picomatch\": \"^2.0.4\"\n            },\n            \"engines\": {\n                \"node\": \">= 8\"\n            }\n        },\n        \"node_modules/asynckit\": {\n            \"version\": \"0.4.0\",\n            \"resolved\": \"https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz\",\n            \"integrity\": \"sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==\",\n            \"dev\": true\n        },\n        \"node_modules/axios\": {\n            \"version\": \"1.7.7\",\n            \"resolved\": \"https://registry.npmjs.org/axios/-/axios-1.7.7.tgz\",\n            \"integrity\": \"sha512-S4kL7XrjgBmvdGut0sN3yJxqYzrDOnivkBiN0OFs6hLiUam3UPvswUo0kqGyhqUZGEOytHyumEdXsAkgCOUf3Q==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"follow-redirects\": \"^1.15.6\",\n                \"form-data\": \"^4.0.0\",\n                \"proxy-from-env\": \"^1.1.0\"\n            }\n        },\n        \"node_modules/balanced-match\": {\n            \"version\": \"1.0.2\",\n            \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz\",\n            \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\",\n            \"dev\": true\n        },\n        \"node_modules/barcode-detector\": {\n            \"version\": \"2.2.2\",\n            \"resolved\": \"https://registry.npmjs.org/barcode-detector/-/barcode-detector-2.2.2.tgz\",\n            \"integrity\": \"sha512-JcSekql+EV93evfzF9zBr+Y6aRfkR+QFvgyzbwQ0dbymZXoAI9+WgT7H1E429f+3RKNncHz2CW98VQtaaKpmfQ==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@types/dom-webcodecs\": \"^0.1.11\",\n                \"zxing-wasm\": \"1.1.3\"\n            }\n        },\n        \"node_modules/binary-extensions\": {\n            \"version\": \"2.3.0\",\n            \"resolved\": \"https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz\",\n            \"integrity\": \"sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==\",\n            \"dev\": true,\n            \"engines\": {\n                \"node\": \">=8\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/brace-expansion\": {\n            \"version\": \"2.0.1\",\n            \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz\",\n            \"integrity\": \"sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"balanced-match\": \"^1.0.0\"\n            }\n        },\n        \"node_modules/braces\": {\n            \"version\": \"3.0.3\",\n            \"resolved\": \"https://registry.npmjs.org/braces/-/braces-3.0.3.tgz\",\n            \"integrity\": \"sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"fill-range\": \"^7.1.1\"\n            },\n            \"engines\": {\n                \"node\": \">=8\"\n            }\n        },\n        \"node_modules/bulma\": {\n            \"version\": \"0.9.4\",\n            \"resolved\": \"https://registry.npmjs.org/bulma/-/bulma-0.9.4.tgz\",\n            \"integrity\": \"sha512-86FlT5+1GrsgKbPLRRY7cGDg8fsJiP/jzTqXXVqiUZZ2aZT8uemEOHlU1CDU+TxklPEZ11HZNNWclRBBecP4CQ==\",\n            \"dev\": true\n        },\n        \"node_modules/bulma-checkradio\": {\n            \"version\": \"2.1.3\",\n            \"resolved\": \"https://registry.npmjs.org/bulma-checkradio/-/bulma-checkradio-2.1.3.tgz\",\n            \"integrity\": \"sha512-8OmZ7PURyftNLGXSTNAYNTJHIe0OkoH/8z9iWfSXGxiv3AlrKneMtiVpBKofXsvc9ZHBUI1YjefiW5WFhgFgAQ==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"bulma\": \"^0.9.3\"\n            }\n        },\n        \"node_modules/chokidar\": {\n            \"version\": \"3.6.0\",\n            \"resolved\": \"https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz\",\n            \"integrity\": \"sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"anymatch\": \"~3.1.2\",\n                \"braces\": \"~3.0.2\",\n                \"glob-parent\": \"~5.1.2\",\n                \"is-binary-path\": \"~2.1.0\",\n                \"is-glob\": \"~4.0.1\",\n                \"normalize-path\": \"~3.0.0\",\n                \"readdirp\": \"~3.6.0\"\n            },\n            \"engines\": {\n                \"node\": \">= 8.10.0\"\n            },\n            \"funding\": {\n                \"url\": \"https://paulmillr.com/funding/\"\n            },\n            \"optionalDependencies\": {\n                \"fsevents\": \"~2.3.2\"\n            }\n        },\n        \"node_modules/combined-stream\": {\n            \"version\": \"1.0.8\",\n            \"resolved\": \"https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz\",\n            \"integrity\": \"sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"delayed-stream\": \"~1.0.0\"\n            },\n            \"engines\": {\n                \"node\": \">= 0.8\"\n            }\n        },\n        \"node_modules/csstype\": {\n            \"version\": \"3.1.3\",\n            \"resolved\": \"https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz\",\n            \"integrity\": \"sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==\",\n            \"dev\": true\n        },\n        \"node_modules/delayed-stream\": {\n            \"version\": \"1.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz\",\n            \"integrity\": \"sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==\",\n            \"dev\": true,\n            \"engines\": {\n                \"node\": \">=0.4.0\"\n            }\n        },\n        \"node_modules/entities\": {\n            \"version\": \"4.5.0\",\n            \"resolved\": \"https://registry.npmjs.org/entities/-/entities-4.5.0.tgz\",\n            \"integrity\": \"sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==\",\n            \"dev\": true,\n            \"engines\": {\n                \"node\": \">=0.12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/fb55/entities?sponsor=1\"\n            }\n        },\n        \"node_modules/esbuild\": {\n            \"version\": \"0.21.5\",\n            \"resolved\": \"https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz\",\n            \"integrity\": \"sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==\",\n            \"dev\": true,\n            \"hasInstallScript\": true,\n            \"license\": \"MIT\",\n            \"bin\": {\n                \"esbuild\": \"bin/esbuild\"\n            },\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"optionalDependencies\": {\n                \"@esbuild/aix-ppc64\": \"0.21.5\",\n                \"@esbuild/android-arm\": \"0.21.5\",\n                \"@esbuild/android-arm64\": \"0.21.5\",\n                \"@esbuild/android-x64\": \"0.21.5\",\n                \"@esbuild/darwin-arm64\": \"0.21.5\",\n                \"@esbuild/darwin-x64\": \"0.21.5\",\n                \"@esbuild/freebsd-arm64\": \"0.21.5\",\n                \"@esbuild/freebsd-x64\": \"0.21.5\",\n                \"@esbuild/linux-arm\": \"0.21.5\",\n                \"@esbuild/linux-arm64\": \"0.21.5\",\n                \"@esbuild/linux-ia32\": \"0.21.5\",\n                \"@esbuild/linux-loong64\": \"0.21.5\",\n                \"@esbuild/linux-mips64el\": \"0.21.5\",\n                \"@esbuild/linux-ppc64\": \"0.21.5\",\n                \"@esbuild/linux-riscv64\": \"0.21.5\",\n                \"@esbuild/linux-s390x\": \"0.21.5\",\n                \"@esbuild/linux-x64\": \"0.21.5\",\n                \"@esbuild/netbsd-x64\": \"0.21.5\",\n                \"@esbuild/openbsd-x64\": \"0.21.5\",\n                \"@esbuild/sunos-x64\": \"0.21.5\",\n                \"@esbuild/win32-arm64\": \"0.21.5\",\n                \"@esbuild/win32-ia32\": \"0.21.5\",\n                \"@esbuild/win32-x64\": \"0.21.5\"\n            }\n        },\n        \"node_modules/escape-string-regexp\": {\n            \"version\": \"5.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-5.0.0.tgz\",\n            \"integrity\": \"sha512-/veY75JbMK4j1yjvuUxuVsiS/hr/4iHs9FTT6cgTexxdE0Ly/glccBAkloH/DofkjRbZU3bnoj38mOmhkZ0lHw==\",\n            \"dev\": true,\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/sindresorhus\"\n            }\n        },\n        \"node_modules/estree-walker\": {\n            \"version\": \"2.0.2\",\n            \"resolved\": \"https://registry.npmjs.org/estree-walker/-/estree-walker-2.0.2.tgz\",\n            \"integrity\": \"sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==\",\n            \"dev\": true\n        },\n        \"node_modules/fast-glob\": {\n            \"version\": \"3.3.2\",\n            \"resolved\": \"https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.2.tgz\",\n            \"integrity\": \"sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@nodelib/fs.stat\": \"^2.0.2\",\n                \"@nodelib/fs.walk\": \"^1.2.3\",\n                \"glob-parent\": \"^5.1.2\",\n                \"merge2\": \"^1.3.0\",\n                \"micromatch\": \"^4.0.4\"\n            },\n            \"engines\": {\n                \"node\": \">=8.6.0\"\n            }\n        },\n        \"node_modules/fastq\": {\n            \"version\": \"1.17.1\",\n            \"resolved\": \"https://registry.npmjs.org/fastq/-/fastq-1.17.1.tgz\",\n            \"integrity\": \"sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"reusify\": \"^1.0.4\"\n            }\n        },\n        \"node_modules/file-saver\": {\n            \"version\": \"2.0.5\",\n            \"resolved\": \"https://registry.npmjs.org/file-saver/-/file-saver-2.0.5.tgz\",\n            \"integrity\": \"sha512-P9bmyZ3h/PRG+Nzga+rbdI4OEpNDzAVyy74uVO9ATgzLK6VtAsYybF/+TOCvrc0MO793d6+42lLyZTw7/ArVzA==\",\n            \"dev\": true\n        },\n        \"node_modules/fill-range\": {\n            \"version\": \"7.1.1\",\n            \"resolved\": \"https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz\",\n            \"integrity\": \"sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"to-regex-range\": \"^5.0.1\"\n            },\n            \"engines\": {\n                \"node\": \">=8\"\n            }\n        },\n        \"node_modules/follow-redirects\": {\n            \"version\": \"1.15.6\",\n            \"resolved\": \"https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.6.tgz\",\n            \"integrity\": \"sha512-wWN62YITEaOpSK584EZXJafH1AGpO8RVgElfkuXbTOrPX4fIfOyEpW/CsiNd8JdYrAoOvafRTOEnvsO++qCqFA==\",\n            \"dev\": true,\n            \"funding\": [\n                {\n                    \"type\": \"individual\",\n                    \"url\": \"https://github.com/sponsors/RubenVerborgh\"\n                }\n            ],\n            \"engines\": {\n                \"node\": \">=4.0\"\n            },\n            \"peerDependenciesMeta\": {\n                \"debug\": {\n                    \"optional\": true\n                }\n            }\n        },\n        \"node_modules/form-data\": {\n            \"version\": \"4.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz\",\n            \"integrity\": \"sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"asynckit\": \"^0.4.0\",\n                \"combined-stream\": \"^1.0.8\",\n                \"mime-types\": \"^2.1.12\"\n            },\n            \"engines\": {\n                \"node\": \">= 6\"\n            }\n        },\n        \"node_modules/fsevents\": {\n            \"version\": \"2.3.3\",\n            \"resolved\": \"https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz\",\n            \"integrity\": \"sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==\",\n            \"dev\": true,\n            \"hasInstallScript\": true,\n            \"optional\": true,\n            \"os\": [\n                \"darwin\"\n            ],\n            \"engines\": {\n                \"node\": \"^8.16.0 || ^10.6.0 || >=11.0.0\"\n            }\n        },\n        \"node_modules/glob-parent\": {\n            \"version\": \"5.1.2\",\n            \"resolved\": \"https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz\",\n            \"integrity\": \"sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"is-glob\": \"^4.0.1\"\n            },\n            \"engines\": {\n                \"node\": \">= 6\"\n            }\n        },\n        \"node_modules/immutable\": {\n            \"version\": \"4.3.5\",\n            \"resolved\": \"https://registry.npmjs.org/immutable/-/immutable-4.3.5.tgz\",\n            \"integrity\": \"sha512-8eabxkth9gZatlwl5TBuJnCsoTADlL6ftEr7A4qgdaTsPyreilDSnUk57SO+jfKcNtxPa22U5KK6DSeAYhpBJw==\",\n            \"dev\": true\n        },\n        \"node_modules/is-binary-path\": {\n            \"version\": \"2.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz\",\n            \"integrity\": \"sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"binary-extensions\": \"^2.0.0\"\n            },\n            \"engines\": {\n                \"node\": \">=8\"\n            }\n        },\n        \"node_modules/is-extglob\": {\n            \"version\": \"2.1.1\",\n            \"resolved\": \"https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz\",\n            \"integrity\": \"sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==\",\n            \"dev\": true,\n            \"engines\": {\n                \"node\": \">=0.10.0\"\n            }\n        },\n        \"node_modules/is-glob\": {\n            \"version\": \"4.0.3\",\n            \"resolved\": \"https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz\",\n            \"integrity\": \"sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"is-extglob\": \"^2.1.1\"\n            },\n            \"engines\": {\n                \"node\": \">=0.10.0\"\n            }\n        },\n        \"node_modules/is-number\": {\n            \"version\": \"7.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz\",\n            \"integrity\": \"sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"engines\": {\n                \"node\": \">=0.12.0\"\n            }\n        },\n        \"node_modules/jsonc-parser\": {\n            \"version\": \"3.2.1\",\n            \"resolved\": \"https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.2.1.tgz\",\n            \"integrity\": \"sha512-AilxAyFOAcK5wA1+LeaySVBrHsGQvUFCDWXKpZjzaL0PqW+xfBOttn8GNtWKFWqneyMZj41MWF9Kl6iPWLwgOA==\",\n            \"dev\": true\n        },\n        \"node_modules/laravel-vite-plugin\": {\n            \"version\": \"1.0.6\",\n            \"resolved\": \"https://registry.npmjs.org/laravel-vite-plugin/-/laravel-vite-plugin-1.0.6.tgz\",\n            \"integrity\": \"sha512-B34OqmZc/rV1KvSjst8SsUm/LKHsuDusw8jiZCIhlnTHXbXnK89JUM9pTJuk6E/Vc/1DT2gX7qNfhipak1WS8w==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"picocolors\": \"^1.0.0\",\n                \"vite-plugin-full-reload\": \"^1.1.0\"\n            },\n            \"bin\": {\n                \"clean-orphaned-assets\": \"bin/clean.js\"\n            },\n            \"engines\": {\n                \"node\": \"^18.0.0 || >=20.0.0\"\n            },\n            \"peerDependencies\": {\n                \"vite\": \"^5.0.0\"\n            }\n        },\n        \"node_modules/laravel-vue-i18n\": {\n            \"version\": \"2.7.8\",\n            \"resolved\": \"https://registry.npmjs.org/laravel-vue-i18n/-/laravel-vue-i18n-2.7.8.tgz\",\n            \"integrity\": \"sha512-HY4yZl1fqApzJzoLFGcmiBusHIouZgT+grMtTCQu3gkilEbcqPOt6L4ksfpkZOYppPQkUlnXLqN8nDNc0gyLUQ==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"php-parser\": \"3.1.3\",\n                \"vue\": \"^3.2.45\"\n            }\n        },\n        \"node_modules/laravel-vue-i18n/node_modules/php-parser\": {\n            \"version\": \"3.1.3\",\n            \"resolved\": \"https://registry.npmjs.org/php-parser/-/php-parser-3.1.3.tgz\",\n            \"integrity\": \"sha512-hPvBmnRYPqWEtMfIFOlyjQv1q75UUtxt4U+YscKIQViGmEE2Xa4BuS1B1/cZdjy7MVcwtnr0WkEsr915LgRKOw==\",\n            \"dev\": true\n        },\n        \"node_modules/local-pkg\": {\n            \"version\": \"0.5.0\",\n            \"resolved\": \"https://registry.npmjs.org/local-pkg/-/local-pkg-0.5.0.tgz\",\n            \"integrity\": \"sha512-ok6z3qlYyCDS4ZEU27HaU6x/xZa9Whf8jD4ptH5UZTQYZVYeb9bnZ3ojVhiJNLiXK1Hfc0GNbLXcmZ5plLDDBg==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"mlly\": \"^1.4.2\",\n                \"pkg-types\": \"^1.0.3\"\n            },\n            \"engines\": {\n                \"node\": \">=14\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/antfu\"\n            }\n        },\n        \"node_modules/magic-string\": {\n            \"version\": \"0.30.12\",\n            \"resolved\": \"https://registry.npmjs.org/magic-string/-/magic-string-0.30.12.tgz\",\n            \"integrity\": \"sha512-Ea8I3sQMVXr8JhN4z+H/d8zwo+tYDgHE9+5G4Wnrwhs0gaK9fXTKx0Tw5Xwsd/bCPTTZNRAdpyzvoeORe9LYpw==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@jridgewell/sourcemap-codec\": \"^1.5.0\"\n            }\n        },\n        \"node_modules/merge2\": {\n            \"version\": \"1.4.1\",\n            \"resolved\": \"https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz\",\n            \"integrity\": \"sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==\",\n            \"dev\": true,\n            \"engines\": {\n                \"node\": \">= 8\"\n            }\n        },\n        \"node_modules/micromatch\": {\n            \"version\": \"4.0.8\",\n            \"resolved\": \"https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz\",\n            \"integrity\": \"sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"braces\": \"^3.0.3\",\n                \"picomatch\": \"^2.3.1\"\n            },\n            \"engines\": {\n                \"node\": \">=8.6\"\n            }\n        },\n        \"node_modules/mime-db\": {\n            \"version\": \"1.52.0\",\n            \"resolved\": \"https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz\",\n            \"integrity\": \"sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==\",\n            \"dev\": true,\n            \"engines\": {\n                \"node\": \">= 0.6\"\n            }\n        },\n        \"node_modules/mime-types\": {\n            \"version\": \"2.1.35\",\n            \"resolved\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz\",\n            \"integrity\": \"sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"mime-db\": \"1.52.0\"\n            },\n            \"engines\": {\n                \"node\": \">= 0.6\"\n            }\n        },\n        \"node_modules/minimatch\": {\n            \"version\": \"9.0.4\",\n            \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-9.0.4.tgz\",\n            \"integrity\": \"sha512-KqWh+VchfxcMNRAJjj2tnsSJdNbHsVgnkBhTNrW7AjVo6OvLtxw8zfT9oLw1JSohlFzJ8jCoTgaoXvJ+kHt6fw==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"brace-expansion\": \"^2.0.1\"\n            },\n            \"engines\": {\n                \"node\": \">=16 || 14 >=14.17\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/isaacs\"\n            }\n        },\n        \"node_modules/mlly\": {\n            \"version\": \"1.6.1\",\n            \"resolved\": \"https://registry.npmjs.org/mlly/-/mlly-1.6.1.tgz\",\n            \"integrity\": \"sha512-vLgaHvaeunuOXHSmEbZ9izxPx3USsk8KCQ8iC+aTlp5sKRSoZvwhHh5L9VbKSaVC6sJDqbyohIS76E2VmHIPAA==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"acorn\": \"^8.11.3\",\n                \"pathe\": \"^1.1.2\",\n                \"pkg-types\": \"^1.0.3\",\n                \"ufo\": \"^1.3.2\"\n            }\n        },\n        \"node_modules/nanoid\": {\n            \"version\": \"3.3.7\",\n            \"resolved\": \"https://registry.npmjs.org/nanoid/-/nanoid-3.3.7.tgz\",\n            \"integrity\": \"sha512-eSRppjcPIatRIMC1U6UngP8XFcz8MQWGQdt1MTBQ7NaAmvXDfvNxbvWV3x2y6CdEUciCSsDHDQZbhYaB8QEo2g==\",\n            \"dev\": true,\n            \"funding\": [\n                {\n                    \"type\": \"github\",\n                    \"url\": \"https://github.com/sponsors/ai\"\n                }\n            ],\n            \"bin\": {\n                \"nanoid\": \"bin/nanoid.cjs\"\n            },\n            \"engines\": {\n                \"node\": \"^10 || ^12 || ^13.7 || ^14 || >=15.0.1\"\n            }\n        },\n        \"node_modules/normalize-path\": {\n            \"version\": \"3.0.0\",\n            \"resolved\": \"https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz\",\n            \"integrity\": \"sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==\",\n            \"dev\": true,\n            \"engines\": {\n                \"node\": \">=0.10.0\"\n            }\n        },\n        \"node_modules/pathe\": {\n            \"version\": \"1.1.2\",\n            \"resolved\": \"https://registry.npmjs.org/pathe/-/pathe-1.1.2.tgz\",\n            \"integrity\": \"sha512-whLdWMYL2TwI08hn8/ZqAbrVemu0LNaNNJZX73O6qaIdCTfXutsLhMkjdENX0qhsQ9uIimo4/aQOmXkoon2nDQ==\",\n            \"dev\": true\n        },\n        \"node_modules/php-parser\": {\n            \"version\": \"3.2.1\",\n            \"resolved\": \"https://registry.npmjs.org/php-parser/-/php-parser-3.2.1.tgz\",\n            \"integrity\": \"sha512-WT5AMqe39ZdqAxp9Yp7uR6e3clBWlT1dxHHs49GmnDx2d+975NEiLSVy2tRGLdSC9tgdQOLiN1Yz54g1d2cZDQ==\",\n            \"dev\": true\n        },\n        \"node_modules/picocolors\": {\n            \"version\": \"1.1.1\",\n            \"resolved\": \"https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz\",\n            \"integrity\": \"sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==\",\n            \"dev\": true,\n            \"license\": \"ISC\"\n        },\n        \"node_modules/picomatch\": {\n            \"version\": \"2.3.1\",\n            \"resolved\": \"https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz\",\n            \"integrity\": \"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\",\n            \"dev\": true,\n            \"engines\": {\n                \"node\": \">=8.6\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/jonschlinkert\"\n            }\n        },\n        \"node_modules/pinia\": {\n            \"version\": \"2.2.6\",\n            \"resolved\": \"https://registry.npmjs.org/pinia/-/pinia-2.2.6.tgz\",\n            \"integrity\": \"sha512-vIsR8JkDN5Ga2vAxqOE2cJj4VtsHnzpR1Fz30kClxlh0yCHfec6uoMeM3e/ddqmwFUejK3NlrcQa/shnpyT4hA==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@vue/devtools-api\": \"^6.6.3\",\n                \"vue-demi\": \"^0.14.10\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/posva\"\n            },\n            \"peerDependencies\": {\n                \"@vue/composition-api\": \"^1.4.0\",\n                \"typescript\": \">=4.4.4\",\n                \"vue\": \"^2.6.14 || ^3.5.11\"\n            },\n            \"peerDependenciesMeta\": {\n                \"@vue/composition-api\": {\n                    \"optional\": true\n                },\n                \"typescript\": {\n                    \"optional\": true\n                }\n            }\n        },\n        \"node_modules/pinia/node_modules/vue-demi\": {\n            \"version\": \"0.14.10\",\n            \"resolved\": \"https://registry.npmjs.org/vue-demi/-/vue-demi-0.14.10.tgz\",\n            \"integrity\": \"sha512-nMZBOwuzabUO0nLgIcc6rycZEebF6eeUfaiQx9+WSk8e29IbLvPU9feI6tqW4kTo3hvoYAJkMh8n8D0fuISphg==\",\n            \"dev\": true,\n            \"hasInstallScript\": true,\n            \"bin\": {\n                \"vue-demi-fix\": \"bin/vue-demi-fix.js\",\n                \"vue-demi-switch\": \"bin/vue-demi-switch.js\"\n            },\n            \"engines\": {\n                \"node\": \">=12\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/antfu\"\n            },\n            \"peerDependencies\": {\n                \"@vue/composition-api\": \"^1.0.0-rc.1\",\n                \"vue\": \"^3.0.0-0 || ^2.6.0\"\n            },\n            \"peerDependenciesMeta\": {\n                \"@vue/composition-api\": {\n                    \"optional\": true\n                }\n            }\n        },\n        \"node_modules/pkg-types\": {\n            \"version\": \"1.0.3\",\n            \"resolved\": \"https://registry.npmjs.org/pkg-types/-/pkg-types-1.0.3.tgz\",\n            \"integrity\": \"sha512-nN7pYi0AQqJnoLPC9eHFQ8AcyaixBUOwvqc5TDnIKCMEE6I0y8P7OKA7fPexsXGCGxQDl/cmrLAp26LhcwxZ4A==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"jsonc-parser\": \"^3.2.0\",\n                \"mlly\": \"^1.2.0\",\n                \"pathe\": \"^1.1.0\"\n            }\n        },\n        \"node_modules/postcss\": {\n            \"version\": \"8.4.49\",\n            \"resolved\": \"https://registry.npmjs.org/postcss/-/postcss-8.4.49.tgz\",\n            \"integrity\": \"sha512-OCVPnIObs4N29kxTjzLfUryOkvZEq+pf8jTF0lg8E7uETuWHA+v7j3c/xJmiqpX450191LlmZfUKkXxkTry7nA==\",\n            \"dev\": true,\n            \"funding\": [\n                {\n                    \"type\": \"opencollective\",\n                    \"url\": \"https://opencollective.com/postcss/\"\n                },\n                {\n                    \"type\": \"tidelift\",\n                    \"url\": \"https://tidelift.com/funding/github/npm/postcss\"\n                },\n                {\n                    \"type\": \"github\",\n                    \"url\": \"https://github.com/sponsors/ai\"\n                }\n            ],\n            \"dependencies\": {\n                \"nanoid\": \"^3.3.7\",\n                \"picocolors\": \"^1.1.1\",\n                \"source-map-js\": \"^1.2.1\"\n            },\n            \"engines\": {\n                \"node\": \"^10 || ^12 || >=14\"\n            }\n        },\n        \"node_modules/proxy-from-env\": {\n            \"version\": \"1.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz\",\n            \"integrity\": \"sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==\",\n            \"dev\": true\n        },\n        \"node_modules/queue-microtask\": {\n            \"version\": \"1.2.3\",\n            \"resolved\": \"https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz\",\n            \"integrity\": \"sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==\",\n            \"dev\": true,\n            \"funding\": [\n                {\n                    \"type\": \"github\",\n                    \"url\": \"https://github.com/sponsors/feross\"\n                },\n                {\n                    \"type\": \"patreon\",\n                    \"url\": \"https://www.patreon.com/feross\"\n                },\n                {\n                    \"type\": \"consulting\",\n                    \"url\": \"https://feross.org/support\"\n                }\n            ]\n        },\n        \"node_modules/readdirp\": {\n            \"version\": \"3.6.0\",\n            \"resolved\": \"https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz\",\n            \"integrity\": \"sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"picomatch\": \"^2.2.1\"\n            },\n            \"engines\": {\n                \"node\": \">=8.10.0\"\n            }\n        },\n        \"node_modules/reusify\": {\n            \"version\": \"1.0.4\",\n            \"resolved\": \"https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz\",\n            \"integrity\": \"sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==\",\n            \"dev\": true,\n            \"engines\": {\n                \"iojs\": \">=1.0.0\",\n                \"node\": \">=0.10.0\"\n            }\n        },\n        \"node_modules/rollup\": {\n            \"version\": \"4.24.4\",\n            \"resolved\": \"https://registry.npmjs.org/rollup/-/rollup-4.24.4.tgz\",\n            \"integrity\": \"sha512-vGorVWIsWfX3xbcyAS+I047kFKapHYivmkaT63Smj77XwvLSJos6M1xGqZnBPFQFBRZDOcG1QnYEIxAvTr/HjA==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"@types/estree\": \"1.0.6\"\n            },\n            \"bin\": {\n                \"rollup\": \"dist/bin/rollup\"\n            },\n            \"engines\": {\n                \"node\": \">=18.0.0\",\n                \"npm\": \">=8.0.0\"\n            },\n            \"optionalDependencies\": {\n                \"@rollup/rollup-android-arm-eabi\": \"4.24.4\",\n                \"@rollup/rollup-android-arm64\": \"4.24.4\",\n                \"@rollup/rollup-darwin-arm64\": \"4.24.4\",\n                \"@rollup/rollup-darwin-x64\": \"4.24.4\",\n                \"@rollup/rollup-freebsd-arm64\": \"4.24.4\",\n                \"@rollup/rollup-freebsd-x64\": \"4.24.4\",\n                \"@rollup/rollup-linux-arm-gnueabihf\": \"4.24.4\",\n                \"@rollup/rollup-linux-arm-musleabihf\": \"4.24.4\",\n                \"@rollup/rollup-linux-arm64-gnu\": \"4.24.4\",\n                \"@rollup/rollup-linux-arm64-musl\": \"4.24.4\",\n                \"@rollup/rollup-linux-powerpc64le-gnu\": \"4.24.4\",\n                \"@rollup/rollup-linux-riscv64-gnu\": \"4.24.4\",\n                \"@rollup/rollup-linux-s390x-gnu\": \"4.24.4\",\n                \"@rollup/rollup-linux-x64-gnu\": \"4.24.4\",\n                \"@rollup/rollup-linux-x64-musl\": \"4.24.4\",\n                \"@rollup/rollup-win32-arm64-msvc\": \"4.24.4\",\n                \"@rollup/rollup-win32-ia32-msvc\": \"4.24.4\",\n                \"@rollup/rollup-win32-x64-msvc\": \"4.24.4\",\n                \"fsevents\": \"~2.3.2\"\n            }\n        },\n        \"node_modules/run-parallel\": {\n            \"version\": \"1.2.0\",\n            \"resolved\": \"https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz\",\n            \"integrity\": \"sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==\",\n            \"dev\": true,\n            \"funding\": [\n                {\n                    \"type\": \"github\",\n                    \"url\": \"https://github.com/sponsors/feross\"\n                },\n                {\n                    \"type\": \"patreon\",\n                    \"url\": \"https://www.patreon.com/feross\"\n                },\n                {\n                    \"type\": \"consulting\",\n                    \"url\": \"https://feross.org/support\"\n                }\n            ],\n            \"dependencies\": {\n                \"queue-microtask\": \"^1.2.2\"\n            }\n        },\n        \"node_modules/sass\": {\n            \"version\": \"1.72.0\",\n            \"resolved\": \"https://registry.npmjs.org/sass/-/sass-1.72.0.tgz\",\n            \"integrity\": \"sha512-Gpczt3WA56Ly0Mn8Sl21Vj94s1axi9hDIzDFn9Ph9x3C3p4nNyvsqJoQyVXKou6cBlfFWEgRW4rT8Tb4i3XnVA==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"chokidar\": \">=3.0.0 <4.0.0\",\n                \"immutable\": \"^4.0.0\",\n                \"source-map-js\": \">=0.6.2 <2.0.0\"\n            },\n            \"bin\": {\n                \"sass\": \"sass.js\"\n            },\n            \"engines\": {\n                \"node\": \">=14.0.0\"\n            }\n        },\n        \"node_modules/scule\": {\n            \"version\": \"1.3.0\",\n            \"resolved\": \"https://registry.npmjs.org/scule/-/scule-1.3.0.tgz\",\n            \"integrity\": \"sha512-6FtHJEvt+pVMIB9IBY+IcCJ6Z5f1iQnytgyfKMhDKgmzYG+TeH/wx1y3l27rshSbLiSanrR9ffZDrEsmjlQF2g==\",\n            \"dev\": true\n        },\n        \"node_modules/sdp\": {\n            \"version\": \"3.2.0\",\n            \"resolved\": \"https://registry.npmjs.org/sdp/-/sdp-3.2.0.tgz\",\n            \"integrity\": \"sha512-d7wDPgDV3DDiqulJjKiV2865wKsJ34YI+NDREbm+FySq6WuKOikwyNQcm+doLAZ1O6ltdO0SeKle2xMpN3Brgw==\",\n            \"dev\": true\n        },\n        \"node_modules/sortablejs\": {\n            \"version\": \"1.15.3\",\n            \"resolved\": \"https://registry.npmjs.org/sortablejs/-/sortablejs-1.15.3.tgz\",\n            \"integrity\": \"sha512-zdK3/kwwAK1cJgy1rwl1YtNTbRmc8qW/+vgXf75A7NHag5of4pyI6uK86ktmQETyWRH7IGaE73uZOOBcGxgqZg==\",\n            \"dev\": true\n        },\n        \"node_modules/source-map-js\": {\n            \"version\": \"1.2.1\",\n            \"resolved\": \"https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz\",\n            \"integrity\": \"sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==\",\n            \"dev\": true,\n            \"license\": \"BSD-3-Clause\",\n            \"engines\": {\n                \"node\": \">=0.10.0\"\n            }\n        },\n        \"node_modules/strip-literal\": {\n            \"version\": \"1.3.0\",\n            \"resolved\": \"https://registry.npmjs.org/strip-literal/-/strip-literal-1.3.0.tgz\",\n            \"integrity\": \"sha512-PugKzOsyXpArk0yWmUwqOZecSO0GH0bPoctLcqNDH9J04pVW3lflYE0ujElBGTloevcxF5MofAOZ7C5l2b+wLg==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"acorn\": \"^8.10.0\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/antfu\"\n            }\n        },\n        \"node_modules/to-regex-range\": {\n            \"version\": \"5.0.1\",\n            \"resolved\": \"https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz\",\n            \"integrity\": \"sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==\",\n            \"dev\": true,\n            \"license\": \"MIT\",\n            \"dependencies\": {\n                \"is-number\": \"^7.0.0\"\n            },\n            \"engines\": {\n                \"node\": \">=8.0\"\n            }\n        },\n        \"node_modules/ufo\": {\n            \"version\": \"1.5.3\",\n            \"resolved\": \"https://registry.npmjs.org/ufo/-/ufo-1.5.3.tgz\",\n            \"integrity\": \"sha512-Y7HYmWaFwPUmkoQCUIAYpKqkOf+SbVj/2fJJZ4RJMCfZp0rTGwRbzQD+HghfnhKOjL9E01okqz+ncJskGYfBNw==\",\n            \"dev\": true\n        },\n        \"node_modules/unimport\": {\n            \"version\": \"3.7.1\",\n            \"resolved\": \"https://registry.npmjs.org/unimport/-/unimport-3.7.1.tgz\",\n            \"integrity\": \"sha512-V9HpXYfsZye5bPPYUgs0Otn3ODS1mDUciaBlXljI4C2fTwfFpvFZRywmlOu943puN9sncxROMZhsZCjNXEpzEQ==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@rollup/pluginutils\": \"^5.1.0\",\n                \"acorn\": \"^8.11.2\",\n                \"escape-string-regexp\": \"^5.0.0\",\n                \"estree-walker\": \"^3.0.3\",\n                \"fast-glob\": \"^3.3.2\",\n                \"local-pkg\": \"^0.5.0\",\n                \"magic-string\": \"^0.30.5\",\n                \"mlly\": \"^1.4.2\",\n                \"pathe\": \"^1.1.1\",\n                \"pkg-types\": \"^1.0.3\",\n                \"scule\": \"^1.1.1\",\n                \"strip-literal\": \"^1.3.0\",\n                \"unplugin\": \"^1.5.1\"\n            }\n        },\n        \"node_modules/unimport/node_modules/estree-walker\": {\n            \"version\": \"3.0.3\",\n            \"resolved\": \"https://registry.npmjs.org/estree-walker/-/estree-walker-3.0.3.tgz\",\n            \"integrity\": \"sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@types/estree\": \"^1.0.0\"\n            }\n        },\n        \"node_modules/unplugin\": {\n            \"version\": \"1.10.1\",\n            \"resolved\": \"https://registry.npmjs.org/unplugin/-/unplugin-1.10.1.tgz\",\n            \"integrity\": \"sha512-d6Mhq8RJeGA8UfKCu54Um4lFA0eSaRa3XxdAJg8tIdxbu1ubW0hBCZUL7yI2uGyYCRndvbK8FLHzqy2XKfeMsg==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"acorn\": \"^8.11.3\",\n                \"chokidar\": \"^3.6.0\",\n                \"webpack-sources\": \"^3.2.3\",\n                \"webpack-virtual-modules\": \"^0.6.1\"\n            },\n            \"engines\": {\n                \"node\": \">=14.0.0\"\n            }\n        },\n        \"node_modules/unplugin-auto-import\": {\n            \"version\": \"0.16.7\",\n            \"resolved\": \"https://registry.npmjs.org/unplugin-auto-import/-/unplugin-auto-import-0.16.7.tgz\",\n            \"integrity\": \"sha512-w7XmnRlchq6YUFJVFGSvG1T/6j8GrdYN6Em9Wf0Ye+HXgD/22kont+WnuCAA0UaUoxtuvRR1u/mXKy63g/hfqQ==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@antfu/utils\": \"^0.7.6\",\n                \"@rollup/pluginutils\": \"^5.0.5\",\n                \"fast-glob\": \"^3.3.1\",\n                \"local-pkg\": \"^0.5.0\",\n                \"magic-string\": \"^0.30.5\",\n                \"minimatch\": \"^9.0.3\",\n                \"unimport\": \"^3.4.0\",\n                \"unplugin\": \"^1.5.0\"\n            },\n            \"engines\": {\n                \"node\": \">=14\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/antfu\"\n            },\n            \"peerDependencies\": {\n                \"@nuxt/kit\": \"^3.2.2\",\n                \"@vueuse/core\": \"*\"\n            },\n            \"peerDependenciesMeta\": {\n                \"@nuxt/kit\": {\n                    \"optional\": true\n                },\n                \"@vueuse/core\": {\n                    \"optional\": true\n                }\n            }\n        },\n        \"node_modules/vite\": {\n            \"version\": \"5.4.11\",\n            \"resolved\": \"https://registry.npmjs.org/vite/-/vite-5.4.11.tgz\",\n            \"integrity\": \"sha512-c7jFQRklXua0mTzneGW9QVyxFjUgwcihC4bXEtujIo2ouWCe1Ajt/amn2PCxYnhYfd5k09JX3SB7OYWFKYqj8Q==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"esbuild\": \"^0.21.3\",\n                \"postcss\": \"^8.4.43\",\n                \"rollup\": \"^4.20.0\"\n            },\n            \"bin\": {\n                \"vite\": \"bin/vite.js\"\n            },\n            \"engines\": {\n                \"node\": \"^18.0.0 || >=20.0.0\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/vitejs/vite?sponsor=1\"\n            },\n            \"optionalDependencies\": {\n                \"fsevents\": \"~2.3.3\"\n            },\n            \"peerDependencies\": {\n                \"@types/node\": \"^18.0.0 || >=20.0.0\",\n                \"less\": \"*\",\n                \"lightningcss\": \"^1.21.0\",\n                \"sass\": \"*\",\n                \"sass-embedded\": \"*\",\n                \"stylus\": \"*\",\n                \"sugarss\": \"*\",\n                \"terser\": \"^5.4.0\"\n            },\n            \"peerDependenciesMeta\": {\n                \"@types/node\": {\n                    \"optional\": true\n                },\n                \"less\": {\n                    \"optional\": true\n                },\n                \"lightningcss\": {\n                    \"optional\": true\n                },\n                \"sass\": {\n                    \"optional\": true\n                },\n                \"sass-embedded\": {\n                    \"optional\": true\n                },\n                \"stylus\": {\n                    \"optional\": true\n                },\n                \"sugarss\": {\n                    \"optional\": true\n                },\n                \"terser\": {\n                    \"optional\": true\n                }\n            }\n        },\n        \"node_modules/vite-plugin-full-reload\": {\n            \"version\": \"1.1.0\",\n            \"resolved\": \"https://registry.npmjs.org/vite-plugin-full-reload/-/vite-plugin-full-reload-1.1.0.tgz\",\n            \"integrity\": \"sha512-3cObNDzX6DdfhD9E7kf6w2mNunFpD7drxyNgHLw+XwIYAgb+Xt16SEXo0Up4VH+TMf3n+DSVJZtW2POBGcBYAA==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"picocolors\": \"^1.0.0\",\n                \"picomatch\": \"^2.3.1\"\n            }\n        },\n        \"node_modules/vue\": {\n            \"version\": \"3.5.13\",\n            \"resolved\": \"https://registry.npmjs.org/vue/-/vue-3.5.13.tgz\",\n            \"integrity\": \"sha512-wmeiSMxkZCSc+PM2w2VRsOYAZC8GdipNFRTsLSfodVqI9mbejKeXEGr8SckuLnrQPGe3oJN5c3K0vpoU9q/wCQ==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@vue/compiler-dom\": \"3.5.13\",\n                \"@vue/compiler-sfc\": \"3.5.13\",\n                \"@vue/runtime-dom\": \"3.5.13\",\n                \"@vue/server-renderer\": \"3.5.13\",\n                \"@vue/shared\": \"3.5.13\"\n            },\n            \"peerDependencies\": {\n                \"typescript\": \"*\"\n            },\n            \"peerDependenciesMeta\": {\n                \"typescript\": {\n                    \"optional\": true\n                }\n            }\n        },\n        \"node_modules/vue-qrcode-reader\": {\n            \"version\": \"5.5.11\",\n            \"resolved\": \"https://registry.npmjs.org/vue-qrcode-reader/-/vue-qrcode-reader-5.5.11.tgz\",\n            \"integrity\": \"sha512-Ec/bVML1jgxSX+usbgdcXGhOFEFo4EzApCO2CNT1YK0Dcb0Mp7ASygz78RJJs22SU2oI7vz9iJDyr4ucSDTvjQ==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"barcode-detector\": \"2.2.2\",\n                \"webrtc-adapter\": \"8.2.3\"\n            },\n            \"engines\": {\n                \"node\": \">=18.0.0\"\n            }\n        },\n        \"node_modules/vue-router\": {\n            \"version\": \"4.4.5\",\n            \"resolved\": \"https://registry.npmjs.org/vue-router/-/vue-router-4.4.5.tgz\",\n            \"integrity\": \"sha512-4fKZygS8cH1yCyuabAXGUAsyi1b2/o/OKgu/RUb+znIYOxPRxdkytJEx+0wGcpBE1pX6vUgh5jwWOKRGvuA/7Q==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@vue/devtools-api\": \"^6.6.4\"\n            },\n            \"funding\": {\n                \"url\": \"https://github.com/sponsors/posva\"\n            },\n            \"peerDependencies\": {\n                \"vue\": \"^3.2.0\"\n            }\n        },\n        \"node_modules/webpack-sources\": {\n            \"version\": \"3.2.3\",\n            \"resolved\": \"https://registry.npmjs.org/webpack-sources/-/webpack-sources-3.2.3.tgz\",\n            \"integrity\": \"sha512-/DyMEOrDgLKKIG0fmvtz+4dUX/3Ghozwgm6iPp8KRhvn+eQf9+Q7GWxVNMk3+uCPWfdXYC4ExGBckIXdFEfH1w==\",\n            \"dev\": true,\n            \"engines\": {\n                \"node\": \">=10.13.0\"\n            }\n        },\n        \"node_modules/webpack-virtual-modules\": {\n            \"version\": \"0.6.1\",\n            \"resolved\": \"https://registry.npmjs.org/webpack-virtual-modules/-/webpack-virtual-modules-0.6.1.tgz\",\n            \"integrity\": \"sha512-poXpCylU7ExuvZK8z+On3kX+S8o/2dQ/SVYueKA0D4WEMXROXgY8Ez50/bQEUmvoSMMrWcrJqCHuhAbsiwg7Dg==\",\n            \"dev\": true\n        },\n        \"node_modules/webrtc-adapter\": {\n            \"version\": \"8.2.3\",\n            \"resolved\": \"https://registry.npmjs.org/webrtc-adapter/-/webrtc-adapter-8.2.3.tgz\",\n            \"integrity\": \"sha512-gnmRz++suzmvxtp3ehQts6s2JtAGPuDPjA1F3a9ckNpG1kYdYuHWYpazoAnL9FS5/B21tKlhkorbdCXat0+4xQ==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"sdp\": \"^3.2.0\"\n            },\n            \"engines\": {\n                \"node\": \">=6.0.0\",\n                \"npm\": \">=3.10.0\"\n            }\n        },\n        \"node_modules/zxing-wasm\": {\n            \"version\": \"1.1.3\",\n            \"resolved\": \"https://registry.npmjs.org/zxing-wasm/-/zxing-wasm-1.1.3.tgz\",\n            \"integrity\": \"sha512-MYm9k/5YVs4ZOTIFwlRjfFKD0crhefgbnt1+6TEpmKUDFp3E2uwqGSKwQOd2hOIsta/7Usq4hnpNRYTLoljnfA==\",\n            \"dev\": true,\n            \"dependencies\": {\n                \"@types/emscripten\": \"^1.39.10\"\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.1318359375,
          "content": "{\n    \"private\": true,\n    \"type\": \"module\",\n    \"scripts\": {\n        \"dev\": \"vite\",\n        \"build\": \"vite build\",\n        \"rebuild\": \"vite build --watch\"\n    },\n    \"devDependencies\": {\n        \"@fortawesome/fontawesome-svg-core\": \"^6.4.2\",\n        \"@fortawesome/free-brands-svg-icons\": \"^6.4.2\",\n        \"@fortawesome/free-regular-svg-icons\": \"^6.4.2\",\n        \"@fortawesome/free-solid-svg-icons\": \"^6.4.2\",\n        \"@fortawesome/vue-fontawesome\": \"^3.0.3\",\n        \"@kyvg/vue3-notification\": \"^3.0.2\",\n        \"@vitejs/plugin-vue\": \"^5.0.4\",\n        \"@vueuse/components\": \"^10.4.1\",\n        \"@vueuse/core\": \"^10.4.1\",\n        \"@vueuse/integrations\": \"^10.6.1\",\n        \"axios\": \"^1.1.2\",\n        \"bulma\": \"^0.9.4\",\n        \"bulma-checkradio\": \"^2.1.3\",\n        \"file-saver\": \"^2.0.5\",\n        \"laravel-vite-plugin\": \"^1.0.2\",\n        \"laravel-vue-i18n\": \"^2.7.1\",\n        \"php-parser\": \"^3.1.5\",\n        \"pinia\": \"^2.1.6\",\n        \"sass\": \"^1.67.0\",\n        \"sortablejs\": \"^1.15.0\",\n        \"unplugin-auto-import\": \"^0.16.6\",\n        \"vite\": \"^5.2.7\",\n        \"vue\": \"^3.3.4\",\n        \"vue-qrcode-reader\": \"^5.4.0\",\n        \"vue-router\": \"^4.2.4\"\n    }\n}\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.27734375,
          "content": "includes:\n    - vendor/larastan/larastan/extension.neon\n\nparameters:\n    level: 6\n    paths:\n        - app\n        - database\n        - routes\n    excludePaths:\n        analyse:\n            - app/Protobuf/*\n    ignoreErrors:\n        -\n            identifier: missingType.iterableValue"
        },
        {
          "name": "phpunit-mysql.xml",
          "type": "blob",
          "size": 1.6806640625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n    backupGlobals=\"false\"\n    backupStaticProperties=\"false\"\n    bootstrap=\"vendor/autoload.php\"\n    colors=\"true\"\n    displayDetailsOnTestsThatTriggerErrors=\"true\"\n    displayDetailsOnTestsThatTriggerNotices=\"true\"\n    displayDetailsOnTestsThatTriggerWarnings=\"true\"\n    processIsolation=\"false\"\n    stopOnFailure=\"false\"\n    stopOnError=\"false\"\n    beStrictAboutTestsThatDoNotTestAnything=\"false\">\n    <source>\n        <include>\n            <directory suffix=\".php\">app</directory>\n        </include>\n        <exclude>\n            <directory suffix=\".php\">app/Protobuf</directory>\n        </exclude>\n    </source>\n    <coverage includeUncoveredFiles=\"true\">\n    </coverage>\n    <testsuites>\n        <testsuite name=\"Unit\">\n            <directory suffix=\"Test.php\">tests/Unit</directory>\n        </testsuite>\n        <testsuite name=\"Feature\">\n            <directory suffix=\"Test.php\">tests/Feature</directory>\n        </testsuite>\n        <testsuite name=\"Api.v1\">\n            <directory suffix=\"Test.php\">tests/Api/v1</directory>\n        </testsuite>\n    </testsuites>\n    <php>\n        <ini name=\"memory_limit\" value=\"2048M\" />\n        <env name=\"APP_ENV\" value=\"testing\"/>\n        <!-- following values override .env.testing vars -->\n        <env name=\"DB_CONNECTION\" value=\"mysql\"/>\n        <env name=\"DB_HOST\" value=\"127.0.0.1\"/>\n        <env name=\"DB_PORT\" value=\"3306\"/>\n        <env name=\"DB_DATABASE\" value=\"2fauth_test\"/>\n        <env name=\"DB_USERNAME\" value=\"travis\"/>\n        <env name=\"DB_PASSWORD\" value=\"\"/>\n    </php>\n</phpunit>\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 1.4169921875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n    backupGlobals=\"false\"\n    backupStaticProperties=\"false\"\n    bootstrap=\"vendor/autoload.php\"\n    colors=\"true\"\n    displayDetailsOnTestsThatTriggerErrors=\"true\"\n    displayDetailsOnTestsThatTriggerNotices=\"true\"\n    displayDetailsOnTestsThatTriggerWarnings=\"true\"\n    displayDetailsOnPhpunitDeprecations=\"true\"\n    processIsolation=\"false\"\n    stopOnFailure=\"false\"\n    stopOnError=\"false\"\n    beStrictAboutTestsThatDoNotTestAnything=\"false\">\n    <source>\n        <include>\n            <directory suffix=\".php\">app</directory>\n        </include>\n        <exclude>\n            <directory suffix=\".php\">app/Protobuf</directory>\n        </exclude>\n    </source>\n    <coverage>\n    </coverage>\n    <testsuites>\n        <testsuite name=\"Unit\">\n            <directory suffix=\"Test.php\">tests/Unit</directory>\n        </testsuite>\n        <testsuite name=\"Feature\">\n            <directory suffix=\"Test.php\">tests/Feature</directory>\n        </testsuite>\n        <testsuite name=\"Api.v1\">\n            <directory suffix=\"Test.php\">tests/Api/v1</directory>\n        </testsuite>\n    </testsuites>\n    <php>\n        <ini name=\"memory_limit\" value=\"2048M\"/>\n        <env name=\"APP_ENV\" value=\"testing\"/>\n        <!-- following values override .env.testing vars -->\n    </php>\n</phpunit>\n"
        },
        {
          "name": "pint.json",
          "type": "blob",
          "size": 0.556640625,
          "content": "{\n    \"preset\": \"laravel\",\n    \"exclude\": [\n        \"app/Protobuf\",\n        \"bootstrap\",\n        \"config\",\n        \"database\",\n        \"public\",\n        \"resources\"\n    ],\n    \"rules\": {\n        \"binary_operator_spaces\": {\n            \"default\": \"single_space\",\n            \"operators\": {\n                \"=>\": \"align_single_space_minimal\",\n                \"=\": \"align_single_space_minimal\"\n            }\n        },\n        \"concat_space\": {\n            \"spacing\": \"one\"\n        },\n        \"return_type_declaration\": {\n            \"space_before\": \"one\"\n        }\n    }\n}"
        },
        {
          "name": "public",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "routes",
          "type": "tree",
          "content": null
        },
        {
          "name": "storage",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "vite.config.js",
          "type": "blob",
          "size": 2.7666015625,
          "content": "import { defineConfig } from 'vite'\nimport laravel from 'laravel-vite-plugin'\nimport vue from '@vitejs/plugin-vue'\nimport i18n from 'laravel-vue-i18n/vite'\nimport AutoImport from 'unplugin-auto-import/vite'\nimport version from './vite.version'\n\nconst ASSET_URL = process.env.ASSET_URL || ''\n\nexport default defineConfig({\n    base: `${ASSET_URL}`,\n    plugins: [\n        laravel([\n            'resources/js/app.js',\n        ]),\n        vue({\n            template: {\n                transformAssetUrls: {\n                    // The Vue plugin will re-write asset URLs, when referenced\n                    // in Single File Components, to point to the Laravel web\n                    // server. Setting this to `null` allows the Laravel plugin\n                    // to instead re-write asset URLs to point to the Vite\n                    // server instead.\n                    base: null,\n\n                    // The Vue plugin will parse absolute URLs and treat them\n                    // as absolute paths to files on disk. Setting this to\n                    // `false` will leave absolute URLs un-touched so they can\n                    // reference assets in the public directory as expected.\n                    includeAbsolute: false,\n                },\n            },\n        }),\n        i18n('resources/lang'),\n        AutoImport({\n            // https://github.com/unplugin/unplugin-auto-import?tab=readme-ov-file#configuration\n            imports: [\n                'vue',\n                'vue-router',\n                'pinia',\n                {\n                    '@vueuse/core': [\n                        'useStorage',\n                        'useClipboard',\n                        'useNavigatorLanguage'\n                    ],\n                    'laravel-vue-i18n': [\n                        'i18nVue',\n                        'trans',\n                        'wTrans',\n                        'getActiveLanguage',\n                        'loadLanguageAsync',\n                        'getActiveLanguage'\n                    ],\n                    '@kyvg/vue3-notification': [\n                        'useNotification'\n                    ],\n                },\n            ],\n            // resolvers: [\n            //     ElementPlusResolver(),\n            // ],\n            dirs: [\n                '@/composables/**',\n            ],\n            vueTemplate: true,\n        }),\n    ],\n    resolve: {\n        alias: {\n            '@': '/resources/js',\n        },\n    },\n    build: {\n        // sourcemap: true,\n        rollupOptions: {\n            output: {\n                banner: '/*! 2FAuth version ' + version + ' - Copyright (c) 2024 Bubka - https://github.com/Bubka/2FAuth */',\n            },\n        },\n    },\n    // server: {\n    //     watch: {\n    //         followSymlinks: false,\n    //     }\n    // }\n});\n"
        },
        {
          "name": "vite.version.js",
          "type": "blob",
          "size": 0.3701171875,
          "content": "import * as fs from 'fs';\nimport { Engine } from 'php-parser';\n\nconst parser = new Engine({\n    parser: {\n        extractDoc: false,\n    },\n    ast: {\n        withPositions: true,\n    },\n})\n\nconst phpFile = fs.readFileSync(\"./config/2fauth.php\")\nconst phpContent = parser.parseCode(phpFile)\nconst version = phpContent.children[0].expr.items[0].value.value\n\nexport default version"
        }
      ]
    }
  ]
}