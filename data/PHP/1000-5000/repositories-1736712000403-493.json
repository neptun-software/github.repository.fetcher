{
  "metadata": {
    "timestamp": 1736712000403,
    "page": 493,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "php-school/cli-menu",
      "stars": 1943,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.21484375,
          "content": "* text=auto\n\n/examples export-ignore\n/test export-ignore\n/.gitattributes export-ignore\n/.gitignore export-ignore\n/.travis.yml export-ignore\n/appveyor.yml export-ignore\n/phpunit.xml export-ignore\n/README.md export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.05078125,
          "content": "vendor/\n.idea\n/composer.lock\n/.phpunit.result.cache\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.55078125,
          "content": "# Change Log\nAll notable changes to this project will be documented in this file.\nUpdates should follow the [Keep a CHANGELOG](http://keepachangelog.com/) principles.\n\n## [Unreleased][unreleased]\n### Added\n\n### Changed\n\n### Fixed\n\n### Removed\n\n## [4.3.0]\n### Fixed\n - PHP 8.1 Support (#252, #249)\n\n### Added\n - declare(strict_types=1) everywhere\n\n## [4.2.0]\n### Added\n - Yes/no confirmation dialogue (#248)\n - Ability to add multiple checkbox and radio items (#241)\n\n## [4.1.0]\n### Added\n - Ability to modify password length for password input (#235)\n - Improve the formatting of disabled menu items in different terminals (#236)\n - Support for PHP8 (#240)\n\n## [4.0.0]\n### Added\n - Add PHP 7.4 support (#183)\n - CheckboxItem & RadioItem (#186, #189, #193, #194, #226)\n - Ability to force display extra (#187)\n - Individual style objects for each item type (#211, #212, #213, #214, #216, #230)\n - Method getStyle() to interface PhpSchool\\CliMenu\\MenuItem\\MenuItemInterface\n \n### Fixed\n - Fixed item extra rendering outside of menu (#66, Â£184, #187)\n - Fix unresponsive menu upon closing and reopening (#198)\n - Menu styles incorrectly propagating to submenus (#201, #210)\n - Various issues with the menu width, when the terminal was too small (#223, #220, #219)\n\n### Removed\n - Remove rebinding $this in builder closures so we can access the real $this (#191, #192, #196)\n - Marker methods from PhpSchool\\CliMenu\\MenuStyle: \n            #getSelectedMarker()\n            #setSelectedMarker()\n            #getUnselectedMarker()\n            #setUnselectedMarker()\n            #getMarker()\n - PhpSchool\\CliMenu\\MenuItem\\SelectableTrait\n - Marker methods from PhpSchool\\CliMenu\\Builder\\CliMenuBuilder:\n            #setUnselectedMarker()\n            #setSelectedMarker()\n\n## [3.2.0]\n### Added\n - Allow ESC key to \"cancel\" editing an input (#174)\n - Methods for disabling the default VIM mappings and setting your own (#172)\n - Ability to set custom validator on Text and Number inputs (#177)\n - Ability to turn on automatic item shortcuts (#176)\n\n## [3.1.0]\n### Changed\n - Update dependencies + fix some static analysis issues\n\n## [3.0.0]\n### Changed\n - Optimise redrawing to reduce flickering (#83)\n - Use parent menu terminal when creating sub menus to reduce object graph (#94)\n - Do not print right margin. Causes menu to wrap even when row fits in terminal (#116)\n - CliMenu throws a \\RuntimeException if it is opened with no items added (#146, #130)\n - Sub Menus are configured via closures (#155)\n - Remove restriction of 1 character length for markers (#141)\n - Remove the mandatory space after markers for now they can be of any length (#154)\n \n### Added\n - Added type hints everywhere (#79)\n - Added phpstan to the travis build (#79)\n - Input dialogue system for prompting users. Comes with text, number and password inputs (#81)\n - Added ability to pass already prepared CliMenuBuilder instance to CliMenuBuilder#addSubMenuFromBuilder (#85, 155)\n - Added CliMenu#addItems & CliMenu#setItems to add multiple items and replace them (#86)\n - Added custom control mapping - link any key to a callable to immediately execute it (#87)\n - Added MenuMenuItem#getSubMenu (#92)\n - Added alternate text to AsciiArtItem to display if the ascii art is too large for the current terminal (#93)\n - Added the ability to pass existing MenuStyle instance to dialogues and inputs for consistent themes and reduced object graph (#99)\n - Added CSS like borders (#100)\n - Added option to auto center menu with CliMenuBuilder#setMarginAuto (#103)\n - Added option to auto center menu with CliMenuBuilder#setMarginAuto (#103)\n - Added support for 256 colours with automatic and manual fallback to 8 colours (#104)\n - Added clear option to CliMenu#redraw useful for when reducing the terminal width (#117)\n - Added ability to set top/bottom and left/right padding independently (#121)\n - Added a new Split Item item type which allows displaying multiple items on one line (#127)\n - Added setText methods to various items so they can be modified at runtime (#153)\n - Added MenuStyle#hasChangedFromDefaults to check if a MenuStyle has been modified (#149)\n - Added CliMenu#setTitle and CliMenu#setStyle (#155)\n - Added CliMenuBuilder#getStyle to get the current style object for the menu\n \n### Fixed\n - Fixed sub menu go back button freezing menu (#88)\n - Fixed centering ascii art items with trailing white space (#102)\n - Enable cursor when exiting menu (#110)\n - Fixed (#71) - changed padding calculation when row too long to stop php notices (#112)\n - Fixed wordwrap helper (#134)\n - Fixed selected item issues when adding/setting/removing items (#156)\n - Fix infinite loop when no selectable items in menu (#159, #144)\n \n### Removed\n - Dropped PHP 5.x and PHP 7.0 support (#79)\n - Removed the Terminal namespace which has been migrated to php-school/terminal (#81)\n - Removed MenuStyle::getDefaultStyleValues (#149)\n - Removed CliMenuBuilder#setTerminal (#149)\n - Removed CliMenuBuilder#getSubMenu (#155)\n - Removed CliMenuBuilder#getMenuStyle (#155)\n - Removed CliMenuBuilder#end (#155)\n\n## [2.1.0]\n### Changed\n - Use new static for submenu to allow subclassing (#68)\n \n### Added\n - Add emacs style up/down shortcuts ctrl+n and ctrl+p (#67)\n\n## [2.0.2]\n### Fixed\n - Don't output ascii art if the terminal width is too small (#63)\n\n## [2.0.1]\n### Fixed\n - Reset array keys after removing an item from the menu (#61)\n\n## [2.0.0]\n### Fixed\n - PHPUnit deprecations - updated to createMock()\n   \n### Changed\n - Require ext-posix (#50)\n - Make MenuStyle easier to construct by only allowing changes to be made via setters (#45)\n \n### Added\n - Added getStyle() to CliMenu to get access to the style object from the menu itself (#42)\n - Added redraw method to CliMenu which can redraw the menu immediately with any style changes. See \n   examples/crazy-redraw.php for an example (#43)\n - Added tests for child menu style inheritance (#44)\n - Add getter getItems() to get all items from the menu (#46)\n - Add method removeItem(ItemInterface $item) to remove an item from the menu (#46)\n - Ability to toggle item extra while the menu is open - see examples/toggle-item-extra.php (#46)\n - Added dialogues flash and confirm - they both display some text on top of the menu, flash is dismissed with \n   any key press where the confirm requires enter to be pressed on the provided button. \n   See examples/confirm.php and examples/flash.php (#49)\n \n### Removed\n - Removed windows terminal - many required terminal features are unavailable (#50)\n - Individual component instantiation restrictions (#41)\n \n ## [1.2.0] \n ### Added\n  - Added ability to disable menu items and sub-menus, they will appear dimmed and will be un-selectable (#40)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015-2016 PHP School\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 43.076171875,
          "content": "<p align=\"center\">\n    <img src=\"https://cloud.githubusercontent.com/assets/2174476/10601666/071e3e24-770b-11e5-9cba-8ae6402ff550.gif\" width=\"300\" />\n</p>\n\n<p align=\"center\">\n    <a href=\"https://travis-ci.org/php-school/cli-menu\" title=\"Build Status\" target=\"_blank\">\n     <img src=\"https://img.shields.io/travis/php-school/cli-menu/master.svg?style=flat-square&label=Linux\" />\n    </a>\n    <a href=\"https://ci.appveyor.com/project/mikeymike/cli-menu\" title=\"Windows Build Status\" target=\"_blank\">\n     <img src=\"https://img.shields.io/appveyor/ci/mikeymike/cli-menu/master.svg?style=flat-square&label=Windows\" />\n    </a>\n    <a href=\"https://codecov.io/github/php-school/cli-menu\" title=\"Coverage Status\" target=\"_blank\">\n     <img src=\"https://img.shields.io/codecov/c/github/php-school/cli-menu.svg?style=flat-square\" />\n    </a>\n    <a href=\"https://scrutinizer-ci.com/g/php-school/cli-menu/\" title=\"Scrutinizer Code Quality\" target=\"_blank\">\n     <img src=\"https://img.shields.io/scrutinizer/g/php-school/cli-menu.svg?style=flat-square\" />\n    </a>\n    <a href=\"https://phpschool-team.slack.com/messages\">\n      <img src=\"https://phpschool.herokuapp.com/badge.svg\">\n    </a>\n</p>\n\n---\n## Contents\n\n  * [Minimum Requirements](#minimum-requirements)\n  * [Installation](#installation)\n  * [Upgrading](#upgrading)\n  * [Usage](#usage)\n    * [Quick Setup](#quick-setup)\n    * [Examples](#examples)\n  * [API](#api)\n    * [Appearance](#appearance)\n      * [Menu Title](#menu-title)\n      * [Colour](#colour)\n      * [Width](#width)\n      * [Padding](#padding)\n      * [Margin](#margin)\n      * [Borders](#borders)\n      * [Exit Button Text](#exit-button-text)\n      * [Remove Exit Button](#remove-exit-button)\n    * [Items](#items)\n      * [Selectable Item](#selectable-item)\n      * [Checkbox Item](#checkbox-item)\n      * [Radio Item](#radio-item)\n      * [Line Break Item](#line-break-item)\n      * [Static Item](#static-item)\n      * [Ascii Art Item](#ascii-art-item)\n      * [Sub Menu Item](#sub-menu-item)\n      * [Split Item](#split-item)\n    * [Disabling Items & Sub Menus](#disabling-items--sub-menus)\n    * [Item Markers](#item-markers)\n    * [Item Extra](#item-extra)\n    * [Menu Methods](#menu-methods)\n      * [Redrawing the Menu](#redrawing-the-menu)\n      * [Getting, Removing and Adding items](#getting-removing-and-adding-items)\n    * [Custom Control Mapping](#custom-control-mapping)\n    * [Item Keyboard Shortcuts](#item-keyboard-shortcuts)\n    * [Dialogues](#dialogues)\n      * [Flash](#flash)\n      * [Confirm](#confirm)\n    * [Inputs](#inputs)\n      * [Text](#text-input)\n      * [Number](#number-input)\n      * [Password](#password-input)\n      * [Custom Input](#custom-input)\n    * [Dialogues & Input Styling](#dialogues--input-styling)\n  * [Docs Translations](#docs-translations)\n  * [Integrations](#integrations)\n\n## Minimum Requirements\n\n * PHP 7.1\n * Composer\n * ext-posix\n\n## Installation\n\n```bash\ncomposer require php-school/cli-menu\n```\n\n## Upgrading\n\nPlease refer to the [Upgrade Documentation](UPGRADE.md) documentation to see what is required to upgrade your installed \n`cli-menu` version.\n\n## Usage\n\n### Quick Setup\nHere is a super basic example menu which will echo out the text of the selected item to get you started.\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\CliMenu;\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\nrequire_once(__DIR__ . '/../vendor/autoload.php');\n\n$itemCallable = function (CliMenu $menu) {\n    echo $menu->getSelectedItem()->getText();\n};\n\n$menu = (new CliMenuBuilder)\n    ->setTitle('Basic CLI Menu')\n    ->addItem('First Item', $itemCallable)\n    ->addItem('Second Item', $itemCallable)\n    ->addItem('Third Item', $itemCallable)\n    ->addLineBreak('-')\n    ->setBorder(1, 2, 'yellow')\n    ->setPadding(2, 4)\n    ->setMarginAuto()\n    ->build();\n\n\n$menu->open();\n```\n\n### Examples\n\nCheck out the [examples](examples) directory and run them to see what is possible! The best way to run the examples is to git clone the repository:\n\n```shell\ngit clone https://github.com/php-school/cli-menu.git\ncd cli-menu\ncomposer install --no-dev\ncd examples\nphp basic.php\n```\n\n#### Basic Menu \n<img width=\"600\" alt=\"basic\" src=\"https://cloud.githubusercontent.com/assets/2817002/11442386/cb0e41a2-950c-11e5-8dd6-913aeab1632a.png\">\n\n#### Basic Menu Auto Centered\n<img width=\"600\" alt=\"submenu\" src=\"https://user-images.githubusercontent.com/2817002/39929334-1c68a450-5538-11e8-947a-e97b21c4fa1a.png\">\n\n#### Basic Menu with separation\n<img width=\"600\" alt=\"basic-seperation\" src=\"https://cloud.githubusercontent.com/assets/2817002/11442388/cdece950-950c-11e5-8128-4f849a1aea9f.png\">\n\n#### Menu with crazy separation\n<img width=\"600\" alt=\"crazy-seperation\" src=\"https://cloud.githubusercontent.com/assets/2817002/11442389/d04627fc-950c-11e5-8c80-f82b8fe3f5da.png\">\n\n#### Custom Styles\n<img width=\"600\" alt=\"custom-styles\" src=\"https://cloud.githubusercontent.com/assets/2817002/11442391/d3d72d1c-950c-11e5-9698-c2aeec002b24.png\">\n\n#### Borders and 256 colours\n<img width=\"600\" alt=\"submenu\" src=\"https://user-images.githubusercontent.com/2817002/39929340-1cee9fce-5538-11e8-91de-eccac734f2a5.png\">\n\n#### Useful Separation\n<img width=\"600\" alt=\"useful-seperation\" src=\"https://cloud.githubusercontent.com/assets/2817002/11442393/d862c72e-950c-11e5-8cbc-d8c73899627a.png\">\n\n#### Displaying Item Extra\n<img width=\"600\" alt=\"item-extra\" src=\"https://cloud.githubusercontent.com/assets/2817002/11442395/dfe460f2-950c-11e5-9aed-9bc9c91b7ea6.png\">\n\n#### Remove Defaults\n<img width=\"600\" alt=\"remove-defaults\" src=\"https://cloud.githubusercontent.com/assets/2817002/11442399/e3e8b8a6-950c-11e5-8dad-fdd4db93b850.png\">\n\n#### Submenu\n<img width=\"600\" alt=\"submenu\" src=\"https://cloud.githubusercontent.com/assets/2817002/11442401/e6f03ef2-950c-11e5-897a-6d55496a4105.png\">\n<img width=\"600\" alt=\"submenu-options\" src=\"https://cloud.githubusercontent.com/assets/2817002/11442403/eaf4782e-950c-11e5-82c5-ab57f84cd6bc.png\">\n\n#### Split Item\n<img width=\"600\" alt=\"split-item\" src=\"https://user-images.githubusercontent.com/5318258/40056391-0b3383c8-5897-11e8-852c-f0df820a040f.png\">\n\n#### Disabled Items & Submenus\n<img width=\"600\" alt=\"submenu\" src=\"https://cloud.githubusercontent.com/assets/2174476/19047849/868fa8c0-899b-11e6-9004-811c8da6d435.png\">\n\n#### Checkbox Items\n<img width=\"600\" alt=\"checkbox\" src=\"https://user-images.githubusercontent.com/2817002/74604044-62cd9200-50ba-11ea-941f-377a51c9dcfd.png\">\n<img width=\"600\" alt=\"checkbox-split\" src=\"https://user-images.githubusercontent.com/2817002/74604048-63febf00-50ba-11ea-9b20-39eb3a79989d.png\">\n\n#### Radio Items\n\n<img width=\"600\" alt=\"radio\" src=\"https://user-images.githubusercontent.com/2817002/74604049-652fec00-50ba-11ea-8361-faf325245793.png\">\n<img width=\"600\" alt=\"radio-split\" src=\"https://user-images.githubusercontent.com/2817002/74604050-65c88280-50ba-11ea-9ee0-d4ea654e5a87.png\">\n\n#### Flash Dialogue\n<img width=\"600\" alt=\"submenu\" src=\"https://cloud.githubusercontent.com/assets/2817002/19786090/1f07dad6-9c94-11e6-91b0-c20ab2e6e27d.png\">\n\n#### Confirm Dialogue\n<img width=\"600\" alt=\"submenu\" src=\"https://cloud.githubusercontent.com/assets/2817002/19786092/215d2dc2-9c94-11e6-910d-191b7b74f4d2.png\">\n\n#### Number Input\n<img width=\"600\" alt=\"submenu\" src=\"https://user-images.githubusercontent.com/2817002/39929969-bf45be46-5539-11e8-99f5-3dfdc0cf1fe3.png\">\n<img width=\"600\" alt=\"submenu\" src=\"https://user-images.githubusercontent.com/2817002/39930002-d2353dd8-5539-11e8-8dfb-e404201b7c42.png\">\n\n#### Text Input\n<img width=\"600\" alt=\"submenu\" src=\"https://user-images.githubusercontent.com/2817002/39929338-1cbc5a28-5538-11e8-9a68-b4e84e772251.png\">\n\n#### Password Input\n<img width=\"600\" alt=\"submenu\" src=\"https://user-images.githubusercontent.com/2817002/39929339-1cd4cd2e-5538-11e8-9330-335dd1b7ed1c.png\">\n\n#### Using cli-menu to create art\n\nWant to see something really cool? Well you can use cli-menu to create a drawing canvas on your terminal. Check it out!:\n\n<img width=\"600\" alt=\"submenu\" src=\"https://user-images.githubusercontent.com/2817002/40175009-15e1e6c0-59d7-11e8-914f-c9136fd417b4.png\">\n\n## API\n\nThe `CliMenu` object is constructed via the Builder class\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = (new CliMenuBuilder)\n    /**\n     *  Customise\n    **/\n    ->build();\n```\n\nOnce you have a menu object, you can open and close it like so:\n\n```php\n$menu->open();\n$menu->close();\n```\n\n### Appearance\n\n#### Menu Title\n\nYou can give your menu a title and you can customise the separator, a line which displays under the title.\nWhatever string you pass to `setTitleSeparator` will be repeated for the width of the Menu.\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = (new CliMenuBuilder)\n    ->setTitle('One Menu to rule them all!')\n    ->setTitleSeparator('*-')\n    ->build();\n```\n\n#### Colour\n\nYou can change the foreground and background colour of the menu to any of the following colours:\n\n* black\n* red\n* green\n* yellow\n* blue\n* magenta\n* cyan\n* white\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = (new CliMenuBuilder)\n    ->setForegroundColour('green')\n    ->setBackgroundColour('black')\n    ->build();\n```\n\nIf your terminal supports 256 colours then you can also use any of those by specifying the code, like `230`. You can find a list\nof the [colours and codes here](https://jonasjacek.github.io/colors/). If you specify a code and the terminal does not support 256 colours\nit will automatically fallback to a sane default, using a generated map you can see in src/Util/ColourUtil.php. You can also manually specify the\nfallback colour as the second argument to `setForegroundColour` and `setBackgroundColour.\n\nIn this example if no 256 colour support is found it will automatically fall back to `green` and `blue`.\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = (new CliMenuBuilder)\n    ->setForegroundColour('40')\n    ->setBackgroundColour('92')\n    ->build();\n```\n\nIn this example if no 256 colour support is found it will fall back to `yellow` and `magenta`.\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = (new CliMenuBuilder)\n    ->setForegroundColour('40', 'yellow')\n    ->setBackgroundColour('92', 'magenta')\n    ->build();\n```\n\n#### Width\n\nCustomise the width of the menu. Setting a value larger than the size of the terminal will result in\nthe width being the same as the terminal size. The width will include the padding and the border. So with a width of 100\nand all around border of 5 and all around padding of 5 will leave for a content width of 80 (5 + 5 + 80 + 5 + 5).\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = (new CliMenuBuilder)\n    ->setWidth(1000) //if terminal is only 400, width will also be 400\n    ->build();\n```\n\nIf you want to use the full width of the terminal, you can grab the terminal object and ask/set it from there like so:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = ($builder = new CliMenuBuilder)\n    ->setWidth($builder->getTerminal()->getWidth())\n    ->build();\n```\n\nIf you want to use the full width of the terminal and apply a margin, use the terminal width, and we will do the calculations\nautomatically (shrink the width based on the margin).\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = ($builder = new CliMenuBuilder)\n    ->setWidth($builder->getTerminal()->getWidth())\n    ->setMargin(2)\n    ->build();\n```\n\n#### Padding\n\nThe padding can be set for all sides with one value or can be set individually for top/bottom and left/right.\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = (new CliMenuBuilder)\n    ->setPadding(10) //10 padding top/bottom/left/right\n    ->build();\n```\n\nDifferent values can also be set for the top/bottom and the left/right padding:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = (new CliMenuBuilder)\n    ->setPaddingTopBottom(10)\n    ->setPaddingLeftRight(5)\n    ->build();\n```\n\nConfigure top/bottom and left/right padding using the shorthand method:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = (new CliMenuBuilder)\n    ->setPadding(10, 5) //top/bottom = 10, left/right = 5\n    ->build();\n```\n\n#### Margin\n\nThe margin can be customised as one value. It can also be set automatically which will center the menu nicely in the \nterminal.\n\nAutomatically center menu:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = (new CliMenuBuilder)\n    ->setWidth(200)\n    ->setMarginAuto() \n    ->build();\n```\n\nArbitrary margin:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = (new CliMenuBuilder)\n    ->setWidth(200)\n    ->setMargin(5)\n    ->build();\n```\n\n#### Borders\n\nBorders can be customised just like CSS borders. We can add any amount of border to either side, left, right top or \nbottom and we can apply a colour to it.\n\nSet universal red border of 2:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = (new CliMenuBuilder)\n    ->setWidth(200)\n    ->setBorder(2, 'red')\n    ->build();\n```\n\nConfigure each border separately:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = (new CliMenuBuilder)\n    ->setWidth(200)\n    ->setBorderTopWidth(2)\n    ->setBorderRightWidth(4)\n    ->setBorderBottomWidth(2)\n    ->setBorderLeftWidth(4)\n    ->setBorderColour('42', 'red') //SpringGreen2 fallback to red\n    ->build();\n```\n\nConfigure each border separately using the shorthand method, like CSS:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = (new CliMenuBuilder)\n    ->setWidth(200)\n    ->setBorder(3, 4, 'red') //top/bottom = 3, left/right = 4\n    ->setBorder(3, 4, 5, 'red') //top = 3, left/right = 4, bottom = 5\n    ->setBorder(3, 4, 5, 6, 'red') //top = 3, left = 4, bottom = 5, right = 6\n    ->build();\n```\n\n#### Exit Button Text\n\nModify the exit button text:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = (new CliMenuBuilder)\n    ->setExitButtonText(\"Don't you want me baby?\")\n    ->build();\n```\n\n#### Remove Exit Button\n\nYou can remove the exit button altogether:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = (new CliMenuBuilder)\n    ->disableDefaultItems()\n    ->build();\n```\n\nNote: This will also disable the Go Back button for sub menus. \n\nYou can manually add exit and go back buttons using the following:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\Action\\ExitAction;\nuse PhpSchool\\CliMenu\\Action\\GoBackAction;\n\n$menu = (new CliMenuBuilder)\n    ->disableDefaultItems()\n    ->addSubMenu('Super Sub Menu', function (CliMenuBuilder $b) {\n        $b->disableDefaultItems()\n            ->setTitle('Behold the awesomeness')\n            ->addItem('Return to parent menu', new GoBackAction); //add a go back button\n    })\n    ->addItem('Leave this place now !', new ExitAction) //add an exit button\n    ->build();\n```\n\n### Items\n\nThere a few different types of items you can add to your menu\n\n* Selectable Item - This is the type of item you need for something to be selectable (you can hit enter and it will invoke your callable) \n* Checkbox Item - This is a checkbox type of item that keeps track of its toggled state to show a different marker.\n* Radio Item - This is a radio type of item that keeps track of its toggled state to show a different marker. Disables all other radios within its `CliMenu` level.\n* Line Break Item - This is used to break up areas, it can span multiple lines and will be the width of Menu. Whatever string is passed will be repeated.\n* Static Item - This will print whatever text is passed, useful for headings.\n* Ascii Art Item - Special item which allows usage of Ascii art. It takes care of padding and alignment.\n* Sub Menu Item - Special item to allow an item to open another menu. Useful for an options menu.\n* Split Item - Special item to fit multiple items on the same row.\n\n### Selectable Item\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$menu = (new CliMenuBuilder)\n    ->addItem('The Item Text', function (CliMenu $menu) { \n        echo 'I am alive!'; \n    })\n    ->build();\n```\n\nYou can add multiple items at once like so:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$callable = function (CliMenu $menu) {\n    echo 'I am alive!';\n};\n\n$menu = (new CliMenuBuilder)\n    ->addItems([\n        ['Item 1', $callable],\n        ['Item 2', $callable],\n        ['Item 3', $callable],\n    ])\n    ->build();\n```\n\nNote: You can add as many items as you want and they can all have a different action. The action is the second parameter\nand must be a valid PHP `callable`. Try using an `Invokable` class to keep your actions easily testable.\n\n### Checkbox Item\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$callable = function (CliMenu $menu) {\n    echo $menu->getSelectedItem()->getText();\n};\n\n$menu = (new CliMenuBuilder)\n    ->addCheckboxItem('Item 1', $callable)\n    ->addCheckboxItem('Item 2', $callable)\n    ->addCheckboxItem('Item 3', $callable)\n    ->build();\n```\n\nYou can add multiple checkbox items at once like so:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$callable = function (CliMenu $menu) {\n    echo 'I am alive!';\n};\n\n$menu = (new CliMenuBuilder)\n    ->addCheckboxItems([\n        ['Item 1', $callable],\n        ['Item 2', $callable],\n        ['Item 3', $callable],\n    ])\n    ->build();\n```\n\nWhen selecting an item, it will be toggled. Notice at first each item is unchecked. After selecting one it will become\nchecked.\n\n### Radio Item\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$callable = function (CliMenu $menu) {\n    echo $menu->getSelectedItem()->getText();\n};\n\n$menu = (new CliMenuBuilder)\n    ->addRadioItem('Item 1', $callable)\n    ->addRadioItem('Item 2', $callable)\n    ->addRadioItem('Item 3', $callable)\n    ->build();\n```\n\nYou can add multiple radio items at once like so:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$callable = function (CliMenu $menu) {\n    echo 'I am alive!';\n};\n\n$menu = (new CliMenuBuilder)\n    ->addRadioItems([\n        ['Item 1', $callable],\n        ['Item 2', $callable],\n        ['Item 3', $callable],\n    ])\n    ->build();\n```\n\nWhen selecting an item, it will be toggled. Notice at first each item is unchecked. After selecting one it will become\nchecked and all other `RadioItem` within the same level will be unchecked.\n\n### Line Break Item\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = (new CliMenuBuilder)\n    ->addLineBreak('<3', 2)\n    ->build();\n```\n\nThe above would repeat the character sequence `<3` across the Menu for 2 lines\n\n### Static Item\n\nStatic items are similar to Line Breaks, however, they don't repeat and fill. It is output as is.\nIf the text is longer than the width of the Menu, it will be continued on the next line.\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$menu = (new CliMenuBuilder)\n    ->addStaticItem('AREA 1')\n    //add some items here\n    ->addStaticItem('AREA 2')\n    //add some boring items here\n    ->addStaticItem('AREA 51')\n    //add some top secret items here \n    ->build();\n```\n\n### Ascii Art Item\n\nThe following will place the Ascii art in the centre of your menu. Use these constants to alter the \nalignment:\n\n* AsciiArtItem::POSITION_CENTER\n* AsciiArtItem::POSITION_LEFT\n* AsciiArtItem::POSITION_RIGHT\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\MenuItem\\AsciiArtItem;\n\n$art = <<<ART\n        _ __ _\n       / |..| \\\n       \\/ || \\/\n        |_''_|\n      PHP SCHOOL\nLEARNING FOR ELEPHANTS\nART;\n\n$menu = (new CliMenuBuilder)\n    ->addAsciiArt($art, AsciiArtItem::POSITION_CENTER)\n    ->build();\n```\n\nThe third optional parameter to `addAsciiArt` is alternate text. If the ascii art is too wide for the terminal, then \nit will not be displayed at all. However, if you pass a string to the third argument, in the case that the ascii art is too \nwide for the terminal the alternate text will be displayed instead.\n\n### Sub Menu Item\n\nSub Menus are really powerful! You can add Menus to Menus, whattttt?? You can have your main menu and then an options menu.\nThe options item will look like a normal item except when you hit it, you will enter to another menu, which\ncan have different styles and colours!\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$callable = function (CliMenu $menu) {\n    echo \"I'm just a boring selectable item\";\n};\n\n$menu = (new CliMenuBuilder)\n    ->addItem('Normal Item', $callable)\n    ->addSubMenu('Super Sub Menu', function (CliMenuBuilder $b) {\n        $b->setTitle('Behold the awesomeness')\n            ->addItem(/** **/);\n    })\n    ->build();\n```\n\nIn this example a single sub menu will be created. Upon entering the sub menu, you will be able to return to the main menu\nor exit completely. A Go Back button will be automatically added. You can customise this text using the `->setGoBackButtonText()` method on the `CliMenuBuilder` \ninstance for the sub menu.\n\nThere are a few things to note about the syntax and builder process here\n\n1. The first parameter to `addSubMenu` is the text to be displayed on the menu which you select to enter the submenu. \n2. The second parameter is a closure, which will be invoked with a new instance of `CliMenuBuilder` which you can use to customise the sub menu exactly the same way you would the parent\n3. If you do not modify the styles of the sub menu (eg, colours) it will inherit styles from the parent!\n\nIf you have already have a configured menu builder you can just pass that to `addSubMenuFromBuilder` and be done:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\n$subMenuBuilder = (new CliMenuBuilder)\n    ->setTitle('Behold the awesomeness')\n    ->addItem(/** **/);\n\n$menu = (new CliMenuBuilder)\n    ->addSubMenuFromBuilder('Super Sub Menu', $subMenuBuilder)\n    ->build();\n```\n\nNote: The submenu menu item will be an instance of `\\PhpSchool\\CliMenu\\MenuItem\\MenuMenuItem`. If you need access to the submenu,\nyou can get it via `$menuMenuItem->getSubMenu()`.\n\n### Split Item\n\nSplit Items allows you to add multiple items on the same row. The full width of the menu will be split evenly between all items. You can move between those items using left/right arrows.\n\nYou can set the number of spaces separating items using `->setGutter()` (defaults to 2).\n\nOnly Selectable, Checkbox, Radio, Static and SubMenu items are currently allowed inside a Split Item.\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\Builder\\SplitItemBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$itemCallable = function (CliMenu $menu) {\n    echo $menu->getSelectedItem()->getText();\n};\n\n$menu = (new CliMenuBuilder)\n    ->setWidth(150)\n    ->addStaticItem('Below is a SplitItem')\n    ->addSplitItem(function (SplitItemBuilder $b) use ($itemCallable) {\n        $b->setGutter(5)\n            ->addSubMenu('Sub Menu on a split item', function (CliMenuBuilder $b) {\n                $b->setTitle('Behold the awesomeness')\n                    ->addItem('This is awesome', function() { print 'Yes!'; });\n            })\n            ->addItem('Item 2', $itemCallable)\n            ->addStaticItem('Item 3 - Static');\n    })\n    ->build();\n\n$menu->open();\n```\n\nThere are a few things to note about the syntax and builder process here:\n\n1. The first parameter to `addSplitItem` is a closure, which will be invoked with a new instance of `SplitItemBuilder` which you can use to add items to the split item.\n2. You can call `addItem`, `addCheckboxItem`, `addRadioItem`, `addSubMenu` and `addStaticItem` on the `SplitItemBuilder`. \n3. `SplitItemBuilder` has a fluent interface so you can chain method calls.\n\n### Disabling Items & Sub Menus\n\nIn this example we are disabling certain items and a submenu but still having them shown in the menu. \n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$itemCallable = function (CliMenu $menu) {\n    echo $menu->getSelectedItem()->getText();\n};\n\n$menu = (new CliMenuBuilder)\n    ->setTitle('Basic CLI Menu Disabled Items')\n    ->addItem('First Item', $itemCallable)\n    ->addItem('Second Item', $itemCallable, false, true)\n    ->addItem('Third Item', $itemCallable, false, true)\n    ->addSubMenu('Submenu', function (CliMenuBuilder $b) use ($itemCallable) {\n        $b->setTitle('Basic CLI Menu Disabled Items > Submenu')\n            ->addItem('You can go in here!', $itemCallable);\n    })\n    ->addSubMenu('Disabled Submenu', function (CliMenuBuilder $b) use ($itemCallable) {\n        $b->setTitle('Basic CLI Menu Disabled Items > Disabled Submenu')\n            ->addItem('Nope can\\'t see this!', $itemCallable)\n            ->disableMenu();\n    })\n    ->addLineBreak('-')\n    ->build();\n```\n\nThe third param on the `->addItem` call is what disables an item while the `->disableMenu()` call disables the relevant menu. \n\nThe outcome is a full menu with dimmed rows to denote them being disabled. When a user navigates the menu these items are jumped over to the next available selectable item.\n\n### Item Markers\n\nThe marker displayed by the side of the currently active item can be modified, UTF-8 characters are supported.\nThe marker for un-selected items can also be modified. If you want to disable it, just set it to an empty string. Item\nmarkers only display on *selectable* items, which are: `\\PhpSchool\\CliMenu\\MenuItem\\SelectableItem` & `\\PhpSchool\\CliMenu\\MenuItem\\MenuMenuItem`.\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\Style\\SelectableStyle;\n\n$menu = (new CliMenuBuilder)\n    ->modifySelectableStyle(function (SelectableStyle $style) {\n        $style->setUnselectedMarker('â ')\n            ->setSelectedMarker('â ')\n\n            // disable unselected marker\n            ->setUnselectedMarker('')\n        ;\n    })\n    ->build();\n```\n\nYou may also change the marker for `\\PhpSchool\\CliMenu\\MenuItem\\CheckboxItem`:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\Style\\CheckboxStyle;\n\n$menu = (new CliMenuBuilder)\n    ->modifyCheckboxStyle(function (CheckboxStyle $style) {\n        $style->setUncheckedMarker('[â] ')\n            ->setCheckedMarker('[â] ');\n    })\n    ->addCheckboxItem('Orange juice', function () {})\n    ->addCheckboxItem('Bread', function () {})\n    ->build();\n```\n\nand for `\\PhpSchool\\CliMenu\\MenuItem\\RadioItem`:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\Style\\RadioStyle;\n\n$menu = (new CliMenuBuilder)\n    ->modifyRadioStyle(function (RadioStyle $style) {\n        $style->setUncheckedMarker('[ ] ')\n            ->setCheckedMarker('[â] ');\n    })\n    ->addRadioItem('Go shopping', function () {})\n    ->addRadioItem('Go camping', function () {})\n    ->build();\n```\n\n### Item Extra\n\nYou can optionally display some arbitrary text on the right hand side of an item. You can customise this text and\nyou indicate which items to display it on. We use it to display `[COMPLETED]` on completed exercises, where the menu lists\nexercises for a workshop application.\n\nItem Extra is currently limited to only selectable items (menus, checkboxes & radios included)\n\nThe third parameter to `addItem` is a boolean whether to show the item extra or not. It defaults to false.\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\nuse PhpSchool\\CliMenu\\Style\\SelectableStyle;\n\n$menu = (new CliMenuBuilder)\n    ->modifySelectableStyle(function (SelectableStyle $style) {\n        $style->setItemExtra('â');\n    })\n    ->addItem('Exercise 1', function (CliMenu $menu) { echo 'I am complete!'; }, true)\n    ->build();\n```\n\nIf no items have display extra set to true, then the item extra will not be displayed. If you toggle the item to show\nit's item extra in a callback or at runtime it will render incorrectly.\n\nIn order to fix that you need to tell the menu to display item extra explicitly. You can do this when constructing the\nmenu like so:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$menu = (new CliMenuBuilder)\n    ->setItemExtra('â')\n    ->addItem('Exercise 1', function (CliMenu $menu) { \n        $selectedItem = $menu->getSelectedItem();\n        if ($selectedItem->showsItemExtra()) {\n            $selectedItem->hideItemExtra();\n        } else {\n            $selectedItem->showItemExtra();\n        }       \n    })\n    ->displayExtra()\n    ->build();\n```\n\n## Menu Methods\n\nThe next set of documentation applies to methods available directly on the `\\PhpSchool\\CliMenu\\CliMenu` instance. Typically\nyou will invoke these methods whilst your menu is open in you action callbacks.\n\n### Redrawing the Menu\n\nYou can modify the menu and its style when executing an action and then you can redraw it! In this example we will toggle the background\ncolour in an action.\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$itemCallable = function (CliMenu $menu) {\n    $menu->getStyle()->setBg($menu->getStyle()->getBg() === 'red' ? 'blue' : 'red');\n    $menu->redraw();\n};\n\n$menu = (new CliMenuBuilder)\n    ->setTitle('Basic CLI Menu')\n    ->addItem('First Item', $itemCallable)\n    ->addItem('Second Item', $itemCallable)\n    ->addItem('Third Item', $itemCallable)\n    ->addLineBreak('-')\n    ->build();\n\n$menu->open();\n```\n\nIf you change the menu drastically, such as making the width smaller, when it redraws you might see artifacts of the previous draw\nas `redraw` only draws over the top of the terminal. If this happens you can pass `true` to `redraw` and it will first clear\nthe terminal before redrawing.\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$itemCallable = function (CliMenu $menu) {\n    $menu->getStyle()->setWidth($menu->getStyle()->getWidth() === 100 ? 80 : 100);\n    $menu->redraw(true);\n};\n\n$menu = (new CliMenuBuilder)\n    ->setTitle('Basic CLI Menu')\n    ->addItem('First Item', $itemCallable)\n    ->addItem('Second Item', $itemCallable)\n    ->addItem('Third Item', $itemCallable)\n    ->addLineBreak('-')\n    ->build();\n\n$menu->open();\n```\n\n### Getting, Removing and Adding items\n\nYou can also interact with the menu items in an action. You can add, remove and replace items. If you do this, you \nwill likely want to redraw the menu as well so the new list is rendered. \n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\nuse PhpSchool\\CliMenu\\MenuItem\\LineBreakItem;\n\n$itemCallable = function (CliMenu $menu) {\n    foreach ($menu->getItems() as $item) {\n        $menu->removeItem($item);\n    }\n    \n    //add single item\n    $menu->addItem(new LineBreakItem('-'));\n    \n    //add multiple items\n    $menu->addItems([new LineBreakItem('-'), new LineBreakItem('*')]);\n    \n    //replace all items\n    $menu->setItems([new LineBreakItem('+'), new LineBreakItem('-')]);\n\n    $menu->redraw();\n};\n\n$menu = (new CliMenuBuilder)\n    ->setTitle('Basic CLI Menu')\n    ->addItem('First Item', $itemCallable)\n    ->addItem('Second Item', $itemCallable)\n    ->addItem('Third Item', $itemCallable)\n    ->addLineBreak('-')\n    ->build();\n\n$menu->open();\n```\n\n## Custom Control Mapping\n\nThis functionality allows to map custom key presses to a callable. For example we can set the key press \"x\" to close the menu:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$exit = function(CliMenu $menu) {\n    $menu->close();\n};\n\n$menu = (new CliMenuBuilder)\n    ->addItem('Item 1', function(CliMenu $menu) {})\n    ->build();\n\n$menu->addCustomControlMapping(\"x\", $exit);\n\n$menu->open();\n```\n\nAnother example is mapping shortcuts to a list of items:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$myCallback = function(CliMenu $menu) {\n    echo \"Client 1\\nClient 2\\nClient 3\\n\";\n};\n\n$menu = (new CliMenuBuilder)\n    ->addItem('List of [C]lients', $myCallback)\n    ->build();\n\n// Now, pressing Uppercase C (it's case sensitive) will call $myCallback\n$menu->addCustomControlMapping('C', $myCallback);\n\n$menu->open();\n```\n\n## Item Keyboard Shortcuts\n\nIf you enable auto shortcuts `CliMenuBuilder` will parse the items text and check for shortcuts. Any single character inside square brackets\nwill be treated as a shortcut. Pressing that character when the menu is open will trigger that items callable.\n\nThis functionality works for split items as well as sub menus. The same characters can be used inside sub menus and the\ncallable which is invoked will depend on which menu is currently open. \n\nNote: all shortcuts are lower cased.\n\nTo enable this automatic keyboard shortcut mapping simply call `->enableAutoShortcuts()`:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$myCallback = function(CliMenu $menu) {\n    echo \"Client 1\\nClient 2\\nClient 3\\n\";\n};\n\n$menu = (new CliMenuBuilder)\n    ->enableAutoShortcuts()\n    ->addItem('List of [C]lients', $myCallback)\n    ->build();\n\n$menu->open();\n\n//Pressing c will execute $myCallback.\n```\n\nYou can customise the shortcut matching by passing your own regex to `enableAutoShortcuts`. Be careful to only match \none character in the first capture group or an exception will be thrown.\n\n### Dialogues\n\n#### Flash\n\nShow a one line message over the top of the menu. It has a separate style object which is colored by default different\nto the menu. It can be modified to suit your own style. The dialogue is dismissed with any key press. In the example\nbelow we change the background color on the flash to green.\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\nrequire_once(__DIR__ . '/../vendor/autoload.php');\n    \n$itemCallable = function (CliMenu $menu) {\n    $flash = $menu->flash(\"PHP School FTW!!\");\n    $flash->getStyle()->setBg('green');\n    $flash->display();\n};\n\n$menu = (new CliMenuBuilder)\n    ->setTitle('Basic CLI Menu')\n    ->addItem('First Item', $itemCallable)\n    ->addItem('Second Item', $itemCallable)\n    ->addItem('Third Item', $itemCallable)\n    ->addLineBreak('-')\n    ->build();\n\n$menu->open();\n```\n\n#### Confirm\n\nPrompts are very similar to flashes except that a button is shown which has to be selected to dismiss them. The button\ntext can be customised.\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$itemCallable = function (CliMenu $menu) {\n    $menu->confirm('PHP School FTW!')\n        ->display('OK!');\n};\n\n$menu = (new CliMenuBuilder)\n    ->setTitle('Basic CLI Menu')\n    ->addItem('First Item', $itemCallable)\n    ->addItem('Second Item', $itemCallable)\n    ->addItem('Third Item', $itemCallable)\n    ->addLineBreak('-')\n    ->build();\n\n$menu->open();\n```\n### Inputs\n\nInputs - added in version 3.0 of `cli-menu` allow to prompt the user for input and validate it. The following types are supported:\ntext, number and password. Inputs can be executed in any item callback. They have separate style objects which are colored by default different to the menu.\nThey can be modified to suit your own style.\n\nEach input is created by calling one of the `ask*` methods which will return an\ninstance of the input you requested. To execute the prompt and wait for the input you must\ncall `ask()` on the input. When the input has been received and validated, `ask()` will return\nan instance of `InputResult`. `InputResult` exposes the method `fetch` to grab the raw input.\n\n#### Text Input\n\nThe text input will prompt for a string and when the enter key is hit it will validate that\nthe string is not empty. As well as the style you can modify the prompt text (the default is 'Enter text:'), the \nplaceholder text (the default is empty) and the validation failed text (the default is 'Invalid, try again').\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$itemCallable = function (CliMenu $menu) {\n    $result = $menu->askText()\n        ->setPromptText('Enter your name')\n        ->setPlaceholderText('Jane Doe')\n        ->setValidationFailedText('Please enter your name')\n        ->ask();\n\n    var_dump($result->fetch());\n};\n\n$menu = (new CliMenuBuilder)\n    ->setTitle('Basic CLI Menu')\n    ->addItem('Enter text', $itemCallable)\n    ->addLineBreak('-')\n    ->build();\n\n$menu->open();\n\n```\n\n#### Number Input\n\nThe number input will prompt for an integer value (signed or not) and when the enter key is hit it will validate that\nthe input is actually a number (`/^-?\\d+$/`). As well as the style you can modify the prompt text (the default is 'Enter a number:'), the \nplaceholder text (the default is empty) and the validation failed text (the default is 'Not a valid number, try again').\n\nWhen entering a number you can use the up/down keys to increment and decrement the number.\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$itemCallable = function (CliMenu $menu) {\n    $result = $menu->askNumber()\n        ->setPromptText('Enter your age')\n        ->setPlaceholderText(10)\n        ->setValidationFailedText('Invalid age, try again')\n        ->ask();\n\n    var_dump($result->fetch());\n};\n\n$menu = (new CliMenuBuilder)\n    ->setTitle('Basic CLI Menu')\n    ->addItem('Enter number', $itemCallable)\n    ->addLineBreak('-')\n    ->build();\n\n$menu->open();\n\n```\n\n#### Password Input\n\nThe password input will prompt for a text value and when the enter key is hit it will validate that the input is 16 characters or longer.\nAs well as the style you can modify the prompt text (the default is 'Enter password:'), the \nplaceholder text (the default is empty) and the validation failed text (the default is 'Invalid password, try again'). You can also set\na custom password validator as a PHP callable. When typing passwords they are echo'd back to the user as an asterisk. \n\nAsk for a password with the default validation:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$itemCallable = function (CliMenu $menu) {\n    $result = $menu->askPassword()\n        ->setPromptText('Please enter your password')\n        ->setValidationFailedText('Invalid password, try again')\n        ->setPlaceholderText('')\n        ->ask();\n\n    var_dump($result->fetch());\n};\n\n$menu = (new CliMenuBuilder)\n    ->setTitle('Basic CLI Menu')\n    ->addItem('Enter password', $itemCallable)\n    ->addLineBreak('-')\n    ->build();\n\n$menu->open();\n\n```\n\nValidators can be any PHP callable. The callable will be passed the input value and must return a boolean, false indicating\nvalidation failure and true indicating validation success. If validation fails then the validation failure text will be shown.\n\nIt is also possible to customise the validation failure message dynamically, but only when using a `Closure` as a validator.\nThe closure will be binded to the `Password` input class which will allow you to call `setValidationFailedText` inside the closure.\n\nAsk for a password with custom validation. Here we validate the password is not equal to `password` and that the\npassword is longer than 20 characters.\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$itemCallable = function (CliMenu $menu) {\n    $result = $menu->askPassword()\n        ->setPromptText('Please enter your password')\n        ->setValidationFailedText('Invalid password, try again')\n        ->setPlaceholderText('')\n        ->setValidator(function ($password) {\n            return $password !== 'password' && strlen($password) > 20;            \n        })\n        ->ask();\n\n    var_dump($result->fetch());\n};\n\n$menu = (new CliMenuBuilder)\n    ->setTitle('Basic CLI Menu')\n    ->addItem('Enter password', $itemCallable)\n    ->addLineBreak('-')\n    ->build();\n\n$menu->open();\n\n```\n\nAsk for a password with custom validation and set the validation failure message dynamically:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\n\n$itemCallable = function (CliMenu $menu) {\n    $result = $menu->askPassword()\n        ->setPromptText('Please enter your password')\n        ->setValidationFailedText('Invalid password, try again')\n        ->setPlaceholderText('')\n        ->setValidator(function ($password) {\n            if ($password === 'password') {\n                $this->setValidationFailedText('Password is too weak');\n                return false;\n            } else if (strlen($password) <= 20) {\n                $this->setValidationFailedText('Password is not long enough');\n                return false;\n            } \n            \n            return true;\n        })\n        ->ask();\n\n    var_dump($result->fetch());\n};\n\n$menu = (new CliMenuBuilder)\n    ->setTitle('Basic CLI Menu')\n    ->addItem('Enter password', $itemCallable)\n    ->addLineBreak('-')\n    ->build();\n\n$menu->open();\n\n```\n\n#### Custom Input\n\nIf you need a new type of input which is not covered by the bundled selection then you can create your own by implementing\n`\\PhpSchool\\CliMenu\\Input\\Input` - take a look at existing implementations to see how they are built. If all you need is some custom\nvalidation - extend the `\\PhpSchool\\CliMenu\\Input\\Text` class and overwrite the `validate` method. You can then use it in\nyour menu item actions like so:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\nuse PhpSchool\\CliMenu\\MenuStyle;\nuse PhpSchool\\CliMenu\\Input\\Text;\nuse PhpSchool\\CliMenu\\Input\\InputIO;\n\n$itemCallable = function (CliMenu $menu) {\n    \n    $style = (new MenuStyle())\n        ->setBg('yellow')\n        ->setFg('black');\n        \n    $input = new class (new InputIO($menu, $menu->getTerminal()), $style) extends Text {\n        public function validate(string $value) : bool\n        {\n            //some validation\n            return true;\n        }\n    };\n    \n    $result = $input->ask();\n\n    var_dump($result->fetch());\n};\n\n$menu = (new CliMenuBuilder)\n    ->setTitle('Basic CLI Menu')\n    ->addItem('Enter password', $itemCallable)\n    ->addLineBreak('-')\n    ->build();\n\n$menu->open();\n\n```\n\n### Dialogues & Input Styling\n\nAll of the dialogues and inputs expose a `getStyle()` method which you can use to customise the appearance of them. However, if\nyou want to create a consistent style for all your dialogues and inputs without configuring it for each one\nyou can build up a `MenuStyle` object and pass it to the dialogue and input methods like so:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\nuse PhpSchool\\CliMenu\\CliMenu;\nuse PhpSchool\\CliMenu\\MenuStyle;\n\n$popupStyle = (new MenuStyle)\n    ->setBg('green')\n    ->setFg('magenta');\n    \n$itemCallable = function (CliMenu $menu) use ($popupStyle) {\n    $menu->flash(\"PHP School FTW!!\", $popupStyle)->display();\n    $menu->confirm('PHP School FTW!', $popupStyle)->display('OK!');\n    $menu->askNumber($popupStyle)->ask();\n};\n\n$menu = (new CliMenuBuilder)\n    ->setTitle('Basic CLI Menu')\n    ->addItem('First Item', $itemCallable)\n    ->addItem('Second Item', $itemCallable)\n    ->addItem('Third Item', $itemCallable)\n    ->addLineBreak('-')\n    ->build();\n\n$menu->open();\n```\n\n---\n\nOnce you get going you might just end up with something that looks a little like this... \n\n![Learn You PHP CLI Menu](https://cloud.githubusercontent.com/assets/2174476/11409864/be082444-93ba-11e5-84ab-1b6cfa38aef8.png)\n\nYou can see the construction code here for more clarity on how to perform advanced configuration:\n[PHP School](https://github.com/php-school/php-workshop/blob/3240d3217bbf62b1063613fc13eb5adff2299bbe/src/Factory/MenuFactory.php)\n\n## Integrations\n\n * [Symfony Console](https://github.com/RedAntNL/console)\n * [Laravel](https://github.com/nunomaduro/laravel-console-menu)\n * [Laravel Artisan](https://github.com/VladReshet/ArtisanUI)\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 3.673828125,
          "content": "# Upgrade Documentation\n\nThis document serves as a reference to upgrade your current cli-menu installation if improvements, deprecations\nor backwards compatibility (BC) breakages occur.\n\n## 4.0.0\n\n### BC breaks\n\n* Trait `PhpSchool\\CliMenu\\MenuItem\\SelectableTrait` was removed. Copy the old code into your menu item \n  if you need it.\n* Methods `PhpSchool\\CliMenu\\Builder\\CliMenuBuilder#setUnselectedMarker()` & `PhpSchool\\CliMenu\\Builder\\CliMenuBuilder#setSelectedMarker()` were removed.\n  Customise markers on the individual item styles: \n  \n  ```php\n  <?php\n  \n  use PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n  use PhpSchool\\CliMenu\\Style\\SelectableStyle;\n  \n  $menu = (new CliMenuBuilder)\n      ->modifySelectableStyle(function (SelectableStyle $style) {\n          $style->setUnselectedMarker('â ')\n              ->setSelectedMarker('â ')\n  \n              // disable unselected marker\n              ->setUnselectedMarker('')\n          ;\n      })\n      ->build();\n  ```\n* Method getStyle() was added to interface PhpSchool\\CliMenu\\MenuItem\\MenuItemInterface. Items must now implement this \n  method. For selectable items use `\\PhpSchool\\CliMenu\\Style\\SelectableStyle` or a subclass of. For static items use \n  `\\PhpSchool\\CliMenu\\Style\\DefaultStyle` or a subclass of.\n* `PhpSchool\\CliMenu\\MenuStyle` marker methods have been removed. If you were using these directly. Operate on the item\n  style object instead.\n\n## 3.0.0\n\n### BC breaks\n\n* Class `PhpSchool\\CliMenu\\CliMenuBuilder` has been moved, use \n  `PhpSchool\\CliMenu\\Builder\\CliMenuBuilder` instead. Please migrate to the new namespace.\n* `PhpSchool\\CliMenu\\Builder\\CliMenuBuilder#addSubMenu` now takes a text and a closure used to configure the submenu. The callback\n  invoked with a new instance of `PhpSchool\\CliMenu\\Builder\\CliMenuBuilder` as a parameter. `addSubMenu` now returns itself instead of\n  the sub menu `PhpSchool\\CliMenu\\Builder\\CliMenuBuilder`. See below for upgrade example.\n* Removed `PhpSchool\\CliMenu\\Terminal` namespace, the code has been migrated to the `php-school/terminal` package and is \n  largely modified.\n* Removed methods `setTerminal`, `getSubMenu`, `getMenuStyle` and `end` from `PhpSchool\\CliMenu\\CliMenuBuilder`.\n* Removed static method `getDefaultStyleValues` on `PhpSchool\\CliMenu\\MenuStyle`.\n\n\n#### Migrating to new `addSubMenu` method in `CliMenuBuilder`\n\nPrevious code:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\CliMenu;\nuse PhpSchool\\CliMenu\\CliMenuBuilder;\n\nrequire_once(__DIR__ . '/../vendor/autoload.php');\n\n$itemCallable = function (CliMenu $menu) {\n    echo $menu->getSelectedItem()->getText();\n};\n\n$menu = (new CliMenuBuilder)\n    ->setTitle('CLI Menu')\n    ->addItem('First Item', $itemCallable)\n    ->addLineBreak('-')\n    ->addSubMenu('Options')\n        ->setTitle('CLI Menu > Options')\n        ->addItem('First option', function (CliMenu $menu) {\n            echo sprintf('Executing option: %s', $menu->getSelectedItem()->getText());\n        })\n        ->addLineBreak('-')\n        ->end()\n    ->build();\n\n$menu->open();\n```\n\nWould now become:\n\n```php\n<?php\n\nuse PhpSchool\\CliMenu\\CliMenu;\nuse \\PhpSchool\\CliMenu\\Builder\\CliMenuBuilder;\n\nrequire_once(__DIR__ . '/../vendor/autoload.php');\n\n$itemCallable = function (CliMenu $menu) {\n    echo $menu->getSelectedItem()->getText();\n};\n\n$menu = (new CliMenuBuilder)\n    ->setTitle('CLI Menu')\n    ->addItem('First Item', $itemCallable)\n    ->addLineBreak('-')\n    ->addSubMenu('Options', function (CliMenuBuilder $b) {\n        $b->setTitle('CLI Menu > Options')\n            ->addItem('First option', function (CliMenu $menu) {\n                echo sprintf('Executing option: %s', $menu->getSelectedItem()->getText());\n            })\n            ->addLineBreak('-');\n    })\n    ->build();\n\n$menu->open();\n```\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.1962890625,
          "content": "{\n    \"name\": \"php-school/cli-menu\",\n    \"description\": \"A command line menu helper in PHP\",\n    \"keywords\": [\"cli\", \"console\", \"terminal\", \"phpschool\", \"php-school\", \"menu\"],\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Michael Woodward\",\n            \"email\": \"mikeymike.mw@gmail.com\"\n        },\n        {\n            \"name\": \"Aydin Hassan\",\n            \"email\": \"aydin@hotmail.com\"\n        }\n    ],\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^8.0 | ^9.0\",\n        \"squizlabs/php_codesniffer\": \"^3.2\",\n        \"phpstan/phpstan\": \"^1.2.0\"\n    },\n    \"require\": {\n        \"php\" : \">=7.1\",\n        \"beberlei/assert\": \"^2.4 | ^3\",\n        \"php-school/terminal\": \"^0.2.1\",\n        \"ext-posix\": \"*\",\n        \"ext-mbstring\": \"*\"\n    },\n    \"autoload\" : {\n        \"psr-4\" : {\n            \"PhpSchool\\\\CliMenu\\\\\": \"src\"\n        },\n        \"files\" : [\n            \"src/Util/ArrayUtils.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": { \"PhpSchool\\\\CliMenuTest\\\\\": \"test/\" }\n    },\n    \"scripts\" : {\n        \"cs\" : [\n            \"phpcs src --standard=PSR2\",\n            \"phpcs test --standard=PSR2\"\n        ],\n        \"static\" : [\n            \"phpstan analyse src --level=7\"\n        ]\n    }\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.0517578125,
          "content": "parameters:\n    checkMissingIterableValueType: false\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.3251953125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit colors=\"true\">\n    <testsuite name=\"CLI Menu Test Suite\">\n        <directory>./test</directory>\n    </testsuite>\n    <filter>\n        <whitelist addUncoveredFilesFromWhitelist=\"true\">\n            <directory suffix=\".php\">./src</directory>\n        </whitelist>\n    </filter>\n</phpunit>"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}