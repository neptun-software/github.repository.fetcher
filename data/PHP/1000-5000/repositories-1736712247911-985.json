{
  "metadata": {
    "timestamp": 1736712247911,
    "page": 985,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Art-of-WiFi/UniFi-API-client",
      "stars": 1174,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2724609375,
          "content": "# Ignore personal config file\r\n/examples/config.php\r\n\r\n# ignore accidentally generated vendor directory and composer.lock file, just in case...\r\n/vendor/\r\n/composer.lock\r\n\r\n# ignore phpdoc files\r\n/build\r\n.phpdoc-md\r\n\r\n# ignore XML files\r\n*.xml\r\n\r\n# ignore PHPStorm files\r\n.idea/*"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.064453125,
          "content": "MIT License\r\n\r\nCopyright (c) 2024, Art of WiFi\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.578125,
          "content": "## UniFi Controller API client class\n\n[![License](https://img.shields.io/github/license/Art-of-WiFi/UniFi-API-client)](https://github.com/Art-of-WiFi/UniFi-API-client/blob/main/LICENSE)\n[![Packagist Version](https://img.shields.io/packagist/v/art-of-wifi/unifi-api-client)](https://packagist.org/packages/art-of-wifi/unifi-api-client)\n[![Downloads](https://img.shields.io/packagist/dt/art-of-wifi/unifi-api-client)](https://packagist.org/packages/art-of-wifi/unifi-api-client)\n[![PHP Version](https://img.shields.io/packagist/php-v/art-of-wifi/unifi-api-client)](https://packagist.org/packages/art-of-wifi/unifi-api-client)\n\nA PHP class that provides access to Ubiquiti's [**UniFi Network Application**](https://unifi-network.ui.com/) API.\n\nThis class is used by our API Browser tool, which can be found\n[here](https://github.com/Art-of-WiFi/UniFi-API-browser).\n\nThe package can be installed manually or by using\ncomposer/[packagist](https://packagist.org/packages/art-of-wifi/unifi-api-client) for\neasy inclusion in your projects. See the [installation instructions](#Installation) below for more details.\n\n## Supported Versions\n\n| Software                             | Versions                                             |\n|--------------------------------------|------------------------------------------------------|\n| UniFi Network Application/controller | 5.x, 6.x, 7.x, 8.x, 9.0.x (**9.0.101 is confirmed**) |\n| UniFi OS                             | 3.x, 4.1.x (**4.1.9 is confirmed**)                  |\n\n\n## Requirements\n\n- a server with:\n  - PHP **7.4.0** or higher (use version [1.1.83](https://github.com/Art-of-WiFi/UniFi-API-client/releases/tag/v1.1.83) \n    for PHP 7.3.x and lower)\n  - PHP json and PHP cURL modules enabled\n- direct network connectivity between this server and the host and port (usually TCP port 8443 or port 443 for \n  UniFi OS) where the UniFi Controller is running\n- you **must** use an **account with local access permissions** to access the UniFi Controller API through this class\n- do not use UniFi Cloud accounts and do not enable 2FA for the accounts that you use with this class\n\n\n## UniFi OS Support\n\nBesides the \"software-based\" UniFi controllers, this class also supports UniFi OS-based controllers starting from\nversion **1.1.47**.\n\nThese devices/services have been verified to work:\n- UniFi Dream Router (UDR)\n- UniFi Dream Machine (UDM)\n- UniFi Dream Machine Pro (UDM PRO)\n- UniFi Cloud Key Gen2 (UCK G2), firmware version 2.0.24 or higher\n- UniFi Cloud Key Gen2 Plus (UCK G2 Plus), firmware version 2.0.24 or higher\n- UniFi Express (UX)\n- UniFi Dream Wall (UDW)\n- UniFi Cloud Gateway Ultra (UCG-Ultra)\n- UniFi CloudKey Enterprise (CK-Enterprise)\n- UniFi Enterprise Fortress Gateway (EFG)\n- Official UniFi Hosting, details [here](https://help.ui.com/hc/en-us/articles/4415364143511)\n\nThe class automatically detects UniFi OS consoles and adjusts the URLs and several functions/methods accordingly.\n\nUniFi OS-based controllers require you to connect using port **443** instead of **8443** which is used for\n\"software-based\" controllers. If your own code implements strict validation of the URL that is passed to the\nconstructor, please adapt your logic to allow URLs without a port suffix or with port 443 when working with a\nUniFi OS-based controller.\n\n\n### Remote API access to UniFi OS-based controllers\nWhen connecting to a UniFi OS-based gateway through the WAN interface, you need to create a specific firewall rule to\nallow this. See this blog post on the Art of WiFi website for more details:\nhttps://artofwifi.net/blog/how-to-access-the-unifi-controller-by-wan-ip-or-hostname-on-a-udm-pro\n\nThe \"custom firewall rule\" approach described there is the recommended method.\n\n\n## Upgrading from previous versions\n\nWhen upgrading from a version before **2.0.0**, please:\n- change your code to use the new Exceptions that are thrown by the class\n- test the client with your code for any breaking changes\n- make sure you are using [Composer](#composer) to install the class because the code is no longer held within a single file\n- see the note [here](#looking-for-version-1xx) regarding the single file version (1.x.x) of the API client\n\n\n## Installation\n\nThe preferred installation method is through [Composer](https://getcomposer.org). \nFollow these [installation instructions](https://getcomposer.org/doc/00-intro.md) if you don't have Composer\ninstalled already.\n\nOnce Composer is installed, execute this command from the shell in your project directory:\n\n```sh\ncomposer require art-of-wifi/unifi-api-client\n```\n\nOr manually add the package to your `composer.json` file:\n\n```javascript\n{\n    \"require\": {\n        \"art-of-wifi/unifi-api-client\": \"^2.0\"\n    }\n}\n```\n\nFinally, be sure to include the composer autoloader in your code if your framework doesn't already do this for you:\n\n```php\n/**\n * load the class using the composer autoloader\n */\nrequire_once 'vendor/autoload.php';\n```\n\n## Example usage\n\nA basic example of how to use the class:\n\n```php\n/**\n * load the class using the composer autoloader\n */\nrequire_once 'vendor/autoload.php';\n\n/**\n * initialize the UniFi API connection class, log in to the controller and request the alarms collection\n * (this example assumes you have already assigned the correct values to the variables used)\n */\n$unifi_connection = new UniFi_API\\Client($controller_user, $controller_password, $controller_url, $site_id, $controller_version, true);\n$login            = $unifi_connection->login();\n$results          = $unifi_connection->list_alarms(); // returns a PHP array containing alarm objects\n```\n\n#### IMPORTANT NOTES:\n\n1. In the above example, `$site_id` is the short site \"name\" (usually 8 characters long) that is visible in the URL when\n   managing the site in the UniFi Network Controller. For example, with this URL:\n\n   `https://<controller IP address or FQDN>:8443/manage/site/jl3z2shm/dashboard`\n\n   `jl3z2shm` is the short site \"name\" and the value to assign to $site_id.\n\n2. The 6th optional parameter that is passed to the constructor in the above example (`true`), enables validation of\n   the controller's SSL certificate, which is otherwise **disabled** by default. It is **highly recommended** to enable\n   this feature in production environments where you have a valid SSL cert installed on the UniFi Controller that is\n   associated with the FQDN in the `controller_url` parameter. This option was added with API client version 1.1.16.\n\n3. Using an administrator account (`$controller_user` in the above example) with **read-only** permissions can limit \n   visibility on certain collection/object properties. See this\n   [issue](https://github.com/Art-of-WiFi/UniFi-API-client/issues/129) and this \n   [issue](https://github.com/Art-of-WiFi/UniFi-API-browser/issues/94) for an example where the WPA2 password isn't\n   visible for **read-only** administrator accounts.\n\n\n## Exception handling\n\nThe class now throws **Exceptions** for various error conditions instead of using PHP's `trigger_error()` function. This\nallows for more granular error handling in your application code.\n\nHere is an example of how to catch these Exceptions:\n```php\n<?php\n/**\n * PHP API usage example with Exception handling\n */\nuse UniFi_API\\Exceptions\\CurlExtensionNotLoadedException;\nuse UniFi_API\\Exceptions\\CurlGeneralErrorException;\nuse UniFi_API\\Exceptions\\CurlTimeoutException;\nuse UniFi_API\\Exceptions\\InvalidBaseUrlException;\nuse UniFi_API\\Exceptions\\InvalidSiteNameException;\nuse UniFi_API\\Exceptions\\JsonDecodeException;\nuse UniFi_API\\Exceptions\\LoginFailedException;\nuse UniFi_API\\Exceptions\\LoginRequiredException;\n\n/**\n * load the class using the composer autoloader\n */\nrequire_once 'vendor/autoload.php';\n\n/**\n * include the config file (place your credentials etc. there if not already present)\n */\nrequire_once 'config.php';\n\n/**\n * initialize the UniFi API connection class, log in to the controller and request the alarms collection\n * (this example assumes you have already assigned the correct values to the variables in config.php)\n */\ntry {\n    $unifi_connection = new UniFi_API\\Client($controller_user, $controller_password, $controller_url, $site_id, $controller_version, true);\n    $login            = $unifi_connection->login();\n    $results          = $unifi_connection->list_alarms(); // returns a PHP array containing alarm objects\n} catch (CurlExtensionNotLoadedException $e) {\n    echo 'CurlExtensionNotLoadedException: ' . $e->getMessage(). PHP_EOL;\n} catch (InvalidBaseUrlException $e) {\n    echo 'InvalidBaseUrlException: ' . $e->getMessage(). PHP_EOL;\n} catch (InvalidSiteNameException $e) {\n    echo 'InvalidSiteNameException: ' . $e->getMessage(). PHP_EOL;\n} catch (JsonDecodeException $e) {\n    echo 'JsonDecodeException: ' . $e->getMessage(). PHP_EOL;\n} catch (LoginRequiredException $e) {\n    echo 'LoginRequiredException: ' . $e->getMessage(). PHP_EOL;\n} catch (CurlGeneralErrorException $e) {\n    echo 'CurlGeneralErrorException: ' . $e->getMessage(). PHP_EOL;\n} catch (CurlTimeoutException $e) {\n    echo 'CurlTimeoutException: ' . $e->getMessage(). PHP_EOL;\n} catch (LoginFailedException $e) {\n    echo 'LoginFailedException: ' . $e->getMessage(). PHP_EOL;\n} catch (Exception $e) {\n    /** catch any other Exceptions that might be thrown */\n    echo 'General Exception: ' . $e->getMessage(). PHP_EOL;\n}\n```\n\nAlthough the PHP DocBlocks for most public methods/functions contain `@throws Exception`, it is recommended to catch\nother specific Exceptions that can be thrown by the API Client class to provide more detailed error messages to your\napplication code.\n\nIn most cases, the class will let Exceptions bubble up to the calling code, but in some cases it will catch them and\nthrow a new Exception with a more specific message.\n\nThe `list_alarms.php` example in the `examples/` directory is a good starting point to see how you can implement\nException handling.\n\n\n## Functions/methods supported\n\nThe class currently supports a large and growing number of functions/methods to access the UniFi Controller API. \nPlease refer to the comments/PHP DocBlocks in the source code for more details on each of the functions/methods,\ntheir purpose, and their respective parameters.\n\nIf you are using an advanced IDE such as PHPStorm or VS Code, you can use its code completion and other\nfeatures to explore the available functions/methods thanks to the extensive PHP DocBlocks throughout the code.\n\n\n## Looking for version 1.x.x?\n\nWith versions 1.x.x of the API client, the entire client was contained within a single file which can be useful in\nspecific cases.\nThis has changed with version 2.0.0 where the code is now split across multiple files and is managed using composer.\n\nIf you are looking for the version 1.x.x code, you can tell composer to install that version by using the following\nsyntax in your `composer.json` file:\n\n```javascript\n{\n    \"require\": {\n        \"art-of-wifi/unifi-api-client\": \"^1.1\"\n    }\n}\n```\n\nAlternatively, you can download the latest 1.x.x code from the [releases page](https://github.com/Art-of-WiFi/UniFi-API-client/releases).\n\nWhenever necessary, we will make sure to update the **version_1** branch with the latest 1.x.x code.\n\n## Need help or have suggestions?\n\nThere is still work to be done to add functionality and further improve the usability of\nthis class, so all suggestions/comments are welcome. Please use the GitHub\n[Issues section](https://github.com/Art-of-WiFi/UniFi-API-client/issues) or the Ubiquiti\nCommunity forums (https://community.ubnt.com/t5/UniFi-Wireless/PHP-class-to-access-the-UniFi-controller-API-updates-and/td-p/1512870)\nto share your suggestions and questions.\n\n\n#### IMPORTANT NOTE:\nWhen encountering issues with the UniFi API using other libraries, cURL or Postman, please do **not** open an Issue. Such issues will be closed immediately.\nPlease use the [Discussions](https://github.com/Art-of-WiFi/UniFi-API-client/discussions) section instead.\n\n\n## Credits\n\nThis class is based on the initial work by the following developers:\n\n- domwo: https://community.ui.com/questions/little-php-class-for-unifi-api/933d3fb3-b401-4499-993a-f9af079a4a3a\n- fbagnol: https://github.com/fbagnol/class.unifi.php\n\nand the API as published by Ubiquiti:\n\n- https://dl.ui.com/unifi/8.6.9/unifi_sh_api\n\n## Contributors\n\nA big thanks to all the contributors who have helped with this project!\n\n[![Contributors](https://img.shields.io/github/contributors/Art-of-WiFi/UniFi-API-client)](https://github.com/Art-of-WiFi/UniFi-API-client/graphs/contributors)\n\nIf you would like to contribute to this project, please open an issue and include\nyour suggestions or code there or else create a pull request.\n\n\n## Important Disclaimer\n\nMany of the functions in this API client class are not officially supported by Ubiquiti\nand as such, may not be supported in future versions of the UniFi Controller API.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.763671875,
          "content": "{\r\n    \"name\": \"art-of-wifi/unifi-api-client\",\r\n    \"type\": \"library\",\r\n    \"description\": \"API client class for use with Ubiquiti's UniFi controller\",\r\n    \"keywords\": [\r\n        \"ubnt\",\r\n        \"ubiquiti\",\r\n        \"unifi\",\r\n        \"controller\",\r\n        \"api\",\r\n        \"client\",\r\n        \"unifi os\"\r\n    ],\r\n    \"homepage\": \"https://github.com/Art-of-WiFi/UniFi-API-client\",\r\n    \"license\": \"MIT\",\r\n    \"authors\": [\r\n        {\r\n            \"name\": \"Art of WiFi\",\r\n            \"email\": \"info@artofowifi.net\",\r\n            \"homepage\": \"https://artofwifi.net\"\r\n        }\r\n    ],\r\n    \"require\": {\r\n        \"php\": \">=7.4.0\",\r\n        \"ext-curl\": \"*\",\r\n        \"ext-json\": \"*\"\r\n    },\r\n    \"autoload\": {\r\n        \"psr-4\": {\r\n            \"UniFi_API\\\\\": \"src/\"\r\n        }\r\n    }\r\n}\r\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}