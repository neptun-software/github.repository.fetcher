{
  "metadata": {
    "timestamp": 1736712093284,
    "page": 658,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tighten/takeout",
      "stars": 1623,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.228515625,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.yml]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.09375,
          "content": "* text=auto\n/.github export-ignore\n.editorconfig export-ignore\ntakeout-banner.png export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1044921875,
          "content": "/vendor\n/.idea\n/.vscode\n/.vagrant\n.phpunit.result.cache\n/storage\n.phpunit.cache/\nphpunit.xml\ncomposer.lock\n"
        },
        {
          "name": ".phpcs.xml",
          "type": "blob",
          "size": 3.4716796875,
          "content": "<?xml version=\"1.0\"?>\n<ruleset name=\"Tighten\">\n   <!--\n      The name attribute of the ruleset tag is displayed\n      when running PHP_CodeSniffer with the -v command line\n      argument. The description tag below is not displayed anywhere\n      except in this file, so it can contain information for\n      developers who may change this file in the future.\n   -->\n   <description>Tighten's Laravel Coding Standards</description>\n\n   <!--\n      If no files or directories are specified on the command line\n      your custom standard can specify what files should be checked\n      instead.\n\n      Note that specifying any file or directory path\n      on the command line will ignore all file tags.\n   -->\n   <file>app</file>\n   <file>config</file>\n   <file>tests</file>\n\n   <!--\n      You can hard-code ignore patterns directly into your\n      custom standard so you don't have to specify the\n      patterns on the command line.\n   -->\n   <exclude-pattern>*/cache/*</exclude-pattern>\n   <exclude-pattern>*/*.js</exclude-pattern>\n   <exclude-pattern>*/*.css</exclude-pattern>\n   <exclude-pattern>*/*.xml</exclude-pattern>\n   <exclude-pattern>*/*.blade.php</exclude-pattern>\n   <exclude-pattern>*/autoload.php</exclude-pattern>\n   <exclude-pattern>*/docs/*</exclude-pattern>\n   <exclude-pattern>*/vendor/*</exclude-pattern>\n\n   <!--\n      You can hard-code command line values into your custom standard.\n      Note that this does not work for the command line values:\n      -v[v][v], -l, -d, -sniffs and -standard\n   -->\n   <arg name=\"colors\"/>\n   <arg value=\"p\"/>\n\n   <!--\n      You can hard-code custom php.ini settings into your custom standard.\n      The following tag sets the memory limit to 64M.\n   -->\n   <ini name=\"memory_limit\" value=\"128M\"/>\n\n   <!--\n      Include all sniffs in the PSR2 standard. Note that the\n      path to the standard does not have to be specified as the\n      PSR2 standard exists inside the PHP_CodeSniffer install\n      directory.\n   -->\n   <rule ref=\"PSR2\"/>\n\n   <!-- Disable missing namespace rule for tests and database files -->\n   <rule ref=\"PSR1.Classes.ClassDeclaration.MissingNamespace\">\n      <exclude-pattern>*/database/*</exclude-pattern>\n      <exclude-pattern>*/tests/*</exclude-pattern>\n   </rule>\n   <!-- Disable camel caps rule for tests -->\n   <rule ref=\"PSR1.Methods.CamelCapsMethodName.NotCamelCaps\">\n      <exclude-pattern>*/tests/*</exclude-pattern>\n   </rule>\n   <!-- Disable method visibility rule for tests -->\n   <rule ref=\"Squiz.Scope.MethodScope\">\n      <exclude-pattern>*/tests/*</exclude-pattern>\n   </rule>\n   <!-- Make the soft line length warning silent -->\n   <!--\n   <rule ref=\"Generic.Files.LineLength.TooLong\">\n      <severity>0</severity>\n   </rule>\n   -->\n\n   <!-- Enable some extra rules -->\n   <!-- Force [] short array syntax -->\n   <rule ref=\"Generic.Arrays.DisallowLongArraySyntax.Found\"/>\n   <!-- Enforce 1 space around concatenation operators -->\n   <rule ref=\"Squiz.Strings.ConcatenationSpacing\">\n      <properties>\n         <property name=\"spacing\" value=\"1\" />\n      </properties>\n   </rule>\n   <!-- Warn when double quotes are used over single quotes -->\n   <rule ref=\"Squiz.Strings.DoubleQuoteUsage\"/>\n   <!-- Except when the double quotes contain a variable -->\n   <rule ref=\"Squiz.Strings.DoubleQuoteUsage.ContainsVar\">\n      <severity>0</severity>\n   </rule>\n\n   <!-- Class name should match the file name -->\n   <rule ref=\"Squiz.Classes.ClassFileName\"/>\n\n   <!-- Expect one space after NOT (!) operator -->\n   <rule ref=\"Generic.Formatting.SpaceAfterNot\"/>\n</ruleset>\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.005859375,
          "content": "# Contributing\n\nThanks for your interest in contributing to Takeout! Contributions are **welcome** and will be fully **credited**.\n\nTo keep things running smoothly we ask you to follow a few guidelines when contributing. Please read and understand this contribution guide before creating an issue or pull request.\n\n## Etiquette\n\nBe kind.\n\n## Viability\n\nIf you have an idea for a feature, we'd prefer you open an issue before going to the trouble of writing code. We welcome your ideas, but we'd like to work with you to come up with solutions that work well for the project as a whole. We're usually pretty responsive, so it shouldn't take us long to figure out whether and how best to implement your idea.\n\n## Procedure\n\nBefore filing an issue:\n\n- Attempt to replicate the problem, to ensure that it wasn't a coincidence\n- Check to make sure your feature suggestion isn't already present within the project\n- Check the pull requests tab to ensure that your feature or bugfix isn't already in progress\n\nBefore submitting a pull request:\n\n- Check the codebase to ensure that your feature doesn't already exist\n- Check the pull requests to ensure that another person hasn't already submitted the feature or fix\n\n## Tests\n\nPlease write tests for any fixes or new features you contribute. We use PHPUnit.\n\nYou can run PHP tests with `vendor/bin/phpunit`.\n\nIf you need any help with this please don't hesitate to ask.\n\n## Requirements\n\n- **[PSR-2 Coding Standard](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md)** - The easiest way to apply the conventions is to install [PHP Code Sniffer](https://github.com/squizlabs/PHP_CodeSniffer).\n- **Tlint styles** - Tighten-specific styles. Tlint is built for apps, so there are some settings that might not make sense in a package, but [download Tlint](https://github.com/tightenco/tlint) and run it on your pull requests to see if it suggests any reasonable changes.\n- **One pull request per feature** - If you want to do more than one thing, send multiple pull requests.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.431640625,
          "content": "FROM php:8.2-cli-alpine\n\nENV TAKEOUT_CONTAINER=1\n\nCOPY --from=docker/buildx-bin /buildx /usr/libexec/docker/cli-plugins/docker-buildx\n\n# Install the PHP extensions & Docker\nRUN apk add --no-cache --update docker openrc ncurses \\\n    && apk add --no-cache linux-headers \\\n    && docker-php-ext-install -j$(nproc) sockets \\\n    && rc-update add docker boot\n\nWORKDIR /takeout\n\nCOPY builds/takeout /usr/local/bin/takeout\n\nENTRYPOINT [\"takeout\"]\n\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.06640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) Tighten Co. <hello@tighten.co>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.2763671875,
          "content": "![Takeout - Docker-based dependency management](takeout-banner.png?version=1)\n\n# Takeout\n\n[![Run tests](https://github.com/tighten/takeout/workflows/Run%20tests/badge.svg?branch=main)](https://github.com/tighten/takeout/actions?query=workflow%3A%22Run+tests%22)\n[![Lint](https://github.com/tighten/takeout/workflows/Lint/badge.svg?branch=main)](https://github.com/tighten/takeout/actions?query=workflow%3ALint)\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/tightenco/takeout.svg?style=flat)](https://packagist.org/packages/tightenco/takeout)\n[![Downloads on Packagist](https://img.shields.io/packagist/dt/tightenco/takeout.svg?style=flat)](https://packagist.org/packages/tightenco/takeout)\n\nTakeout is a CLI tool for spinning up tiny Docker containers, one for each of your development environment dependencies.\n\nIt's meant to be paired with a tool like [Laravel Valet](https://laravel.com/docs/valet). It's currently compatible with macOS, Linux, Windows 10 and WSL2.\n\nWith `takeout enable mysql` you're running MySQL, and never have to worry about managing or fixing Homebrew MySQL again.\n\nBut you can also easily enable ElasticSearch, PostgreSQL, MSSQL, Mongo, Redis, and more, with a simple command. For a current list of services, look at the classes available in this directory: https://github.com/tighten/takeout/tree/main/app/Services\n\n## Requirements\n\n-   macOS, Linux, Windows 10 or WSL2\n-   Docker installed (macOS: [Docker for Mac](https://docs.docker.com/docker-for-mac/), Windows: [Docker for Windows](https://docs.docker.com/docker-for-windows/))\n\nIf you opt for the PHP/Composer installation (not recommended), you also need:\n\n-   PHP installed (latest major version)\n-   Composer installed\n\n## Installation\n\nThe recommended way to install Takeout is the dockerized version via an alias (add this to your `~/.bashrc`, `~/.zshrc` or equivalent).\n\nOn Linux or macOS, use:\n\n```bash\nalias takeout=\"docker run --rm -v /var/run/docker.sock:/var/run/docker.sock --add-host=host.docker.internal:host-gateway -it tighten/takeout:latest\"\n```\n\nOn Windows 10|11, if you're using Bash, use:\n\n```bash\nalias takeout=\"docker run --rm -v //var/run/docker.sock:/var/run/docker.sock --add-host=host.docker.internal:host-gateway -it tighten/takeout:latest\"\n```\n\nOn Windows 10|11, if you're using PowerShell, use:\n\n```bash\nfunction takeout { docker run --rm -v //var/run/docker.sock:/var/run/docker.sock --add-host=host.docker.internal:host-gateway -it tighten/takeout:latest $args }\n```\n\nThat's it. You may now use Takeout on your terminal. The first time you use this alias, it will pull the Takeout image from Docker Hub.\n\nTo update the image, run `docker pull tighten/takeout` when you want to get the newest release.\n\nOtherwise, if you have a PHP environment available, you may install Takeout via Composer:\n\n```bash\ncomposer global require \"tightenco/takeout:~2.9\"\n```\n\nIf you use the PHP/Composer installation, make sure you're on the latest version of PHP. We'll only support the current major version of PHP using this installation approach.\n\n## Usage\n\nRun `takeout` and then a command name from anywhere in your terminal.\n\nOne of Takeout's primary benefits is that it boots (\"enables\") or deletes (\"disables\") Docker containers for your various dependencies quickly and easily.\n\nBecause Docker offers persistent volume storage, deleting a container (which we call \"disabling\" it) doesn't actually delete its data. That means you can enable and disable services with reckless abandon.\n\n### Enable a service\n\nShow a list of all services you can enable.\n\n```bash\ntakeout enable\n```\n\n### Enable specific services\n\nPassed the short name of one or more services, enable them.\n\n```bash\ntakeout enable mysql\n\ntakeout enable redis meilisearch\n```\n\n### Enable services with default parameters\n\nIf you want to skip over being asked for each parameter and just accept the defaults. This also works with multiple services in one command.\n\n```bash\ntakeout enable mysql --default\n\ntakeout enable redis meilisearch --default\n```\n\n#### Passthrough Container Arguments\n\nYou may specify extra arguments to the container after a `--` sepatator:\n\n```bash\ntakeout enable mysql -- -hsome.mysql.host -usome-user\n```\n\nNotice that these are arguments for the container Entrypoint, not extra docker run options (see below).\n\n#### Extra `docker run` Options\n\nUnder the hood, the `takeout enable` command generates a `docker run` command. Sometimes you may want to specify extra options to the `docker run` command such as an extra environment variable or an extra volume mapping. You can pass a string with all the extra `docker run` options using the `--run=` option:\n\n```bash\ntakeout enable mysql --run=\"{docker-run-options}\"\n```\n\nWhich would generate the following command:\n\n```bash\ndocker run {docker-run-options} {service-options} mysql/mysql-server\n```\n\nWhere `{docker-run-options}` are the options you specify inside the `--run` option and `{service-options}` are generated based on the default options for that service.\n\n#### Mixing `docker run` Options With Container Arguments\n\nYou may mix and match the `run` options with the container arguments:\n\n```bash\ntakeout enable mysql --run=\"{docker-run-options}\" -- -hsome.mysql.host -usome-user\n```\n\n### Disable a service\n\nShow a list of all enabled services you can disable.\n\n```bash\ntakeout disable\n```\n\n### Disable specific services\n\nPassed the short name of one or more services, disable the enabled services that match them most closely.\n\n```bash\ntakeout disable mysql\n\ntakeout disable redis meilisearch\n```\n\n### Disable all services\n\n```bash\ntakeout disable --all\n```\n\n### Start a stopped container\n\nShow a list of all stopped containers you can start.\n\n```bash\ntakeout start\n```\n\n### Start specific stopped containers\n\nPassed the container ID of one or more stopped containers, start the stopped containers that matches them.\n\n```bash\ntakeout start {container_id}\n\ntakeout start {container_id1} {container_id2}\n```\n\n### Start all containers\n\nYou may pass the `-all` flag to start all enabled containers.\n\n```bash\ntakeout start --all\n```\n\n### Stop a running container\n\nShow a list of all running containers you can stop.\n\n```bash\ntakeout stop\n```\n\n### Stop specific running containers\n\nPassed the container ID of one or more running containers, stop the running containers that matches them.\n\n```bash\ntakeout stop {container_id}\n\ntakeout stop {container_id1} {container_id2}\n```\n\n### Get a shell inside any Takeout container\n\nTo get a shell inside any container that is started with Takeout, you may run:\n\n```bash\ntakeout shell {service}\n```\n\nHere are some examples:\n\n```bash\ntakeout shell mysql\ntakeout shell neo4j\ntakeout shell pgvector\n```\n\nThis will open a shell inside the running container for the service you provide. Takeout will start either a `bash` or a `sh` process inside the container, depending on what the container supports.\n\n## Running multiple versions of a dependency\n\nAnother of Takeout's benefits is that it allows you to have multiple versions of a dependency installed and running at the same time. That means, for example, that you can run both MySQL 5.7 and 8.0 at the same time, on different ports.\n\nRun `takeout enable mysql` twice; the first time, you'll want to choose the default port (`3306`) and the first version (`5.7`), and the second time, you'll want to choose a second port (`3307`), the second version (`8.0`) and a different volume name (so that they don't share the same `mysql_data`).\n\nNow, if you run `takeout list`, you'll see both services running at the same time.\n\n```bash\n+--------------+----------------+---------------+-----------------------------------+\n| CONTAINER ID | NAMES          | STATUS        | PORTS                             |\n+--------------+----------------+---------------+-----------------------------------+\n| 4bf3379ab2f5 | TO--mysql--5.7 | Up 2 seconds  | 33060/tcp, 0.0.0.0:3306->3306/tcp |\n| 983acf46ceef | TO--mysql--8.0 | Up 35 seconds | 33060/tcp, 0.0.0.0:3307->3306/tcp |\n+--------------+----------------+---------------+-----------------------------------+\n```\n\n## Network Details\n\nTakeout containers are automatically added to a Docker network named `takeout`. This allows you to use the same aliasing and base aliasing that is used for the other containers.\n\nEach container is given two aliases on this network:\n\n-   A base_alias based on the core dependency name (e.g. mysql, postgres)\n-   A full_alias combining the base alias and version (e.g. mysql8.0, postgres13)\n\nOther containers on the takeout network can access Takeout containers by their aliases. [Check this article on how you can use sail and takeout together](https://mattstauffer.com/blog/how-to-use-takeout-to-add-new-services-to-laravel-sail-and-save-ram/)\n\n## FAQs\n\n<details>\n<summary><strong>Will this enable the PHP drivers for me via PECL?</strong></summary>\n\nSadly, no.\n\n</details>\n<details>\n<summary><strong>If I disable a service but Takeout still shows the port as taken, how do I proceed?</strong></summary>\n\nFirst, run `lsof -i :3306` (where 3306 is the port that's unavailable.)\n\nIf you see output like this:\n\n    com.docke   936 mattstauffer   52u  IPv6 0xc0d6f0b06d5c4efb      0t0  TCP localhost:mysql->localhost:62919 (FIN_WAIT_2)\n    TablePlus 96155 mattstauffer   16u  IPv4 0xc0d6f0b0b6dccf6b      0t0  TCP localhost:62919->localhost:mysql (CLOSE_WAIT)\n\nThe solution is to just close your database GUI, and then it should be released.\n\n</details>\n<details>\n<summary><strong>Why would you use this instead of `docker-compose`?</strong></summary>\n\nUsing `docker-compose` sets up your dependencies on a project-by-project basis, which is a perfectly fine way to do things. If it makes more sense to you to have a single copy of each of your dependencies for your entire global environment, Takeout makes more sense.\n\n</details>\n<details>\n<summary><strong>Will disabling a service permanently delete my databases?</strong></summary>\n\nNope! Your data will stick around! By default almost all of our services use a \"volume\" to attach your data to for exactly this reason.\n\nSo, when you disable the MySQL service, for example, that volume--with all your data in it--will just sit there quietly. And when you re-enable, as long as you attach it to the same volume, all your data will still be there.\n\n</details>\n\n## Future plans\n\nThe best way to see our future plans is to check out the [Projects Board](https://github.com/tighten/takeout/projects/1), but here are a few plans for the future:\n\n-   Electron-based GUI\n-   `self-remove` command: Deletes all enabled services and then maybe self-uninstalls?\n-   `upgrade`: destroys the old container, brings up a new one with a newly-specified tag (prompt user for it, default `latest`) and keeps all other parameters (e.g. port, volume) exactly the same as the old one\n-   `pt/passthrough`: proxy commands through to docker (`./takeout pt mysql stop`)\n-   Deliver package in a way that's friendly to non-PHP developers (Homebrew? NPM?)\n-   Allow other people to extend Takeout by adding their own plugins (thanks to @angrybrad for the idea!)\n\n## Process for release\n\nIf you're working with us and are assigned to push a release, here's the easiest process:\n\n1. Visit the [Takeout Releases page](https://github.com/tighten/takeout/releases); figure out what your next tag will be (increase the third number if it's a patch or fix; increase the second number if it's adding features)\n2. On your local machine, pull down the latest version of `main` (`git checkout main && git pull`)\n3. Build for the version you're targeting (`php ./takeout app:build`)\n4. Run the build once to make sure it works (`php ./builds/takeout list`)\n5. Commit your build and push it up\n6. [Draft a new release](https://github.com/tighten/takeout/releases/new) with both the tag version and release title of your tag (e.g. `v1.5.1`)\n7. Use the \"Generate release notes\" button to generate release notes from the merged PRs.\n8. Hit `Publish release`\n9. The new tag and release will trigger the [`docker-publish.yml`](.github/workflows/docker-publish.yml) workflow, which should take care of building and pushing the new image of the Docker container (see the \"Building The Docker Image Manually\" section below)\n10. Profit 😆\n\n## Building The Docker Image Manually\n\nThe important thing is to remember to build both `linux/amd64` and `linux/arm64` images. We rely on Docker's `buildx` command, which uses Docker's [BuildKit](https://github.com/moby/buildkit) behind the scenes, which allows us to build for multiple platforms, independently of the platform of the machine building the image.\n\nYou may build and publish a new version of the docker image using the following command:\n\n```bash\ndocker buildx build --platform=linux/amd64,linux/arm64 -t tighten/takeout:latest --push .\n```\n\nIf it's the first time you're building the image, you may get the following error:\n\n```\nERROR: Multiple platforms feature is currently not supported for docker driver. Please switch to a different driver (eg. \"docker buildx create --use\")\n```\n\nThis means that you first need to create a builder container, which you maydo like so:\n\n```bash\ndocker buildx create --use\n```\n\nAfter that, retrying the `buildx` command should work.\n\nPlease, note that building the container will simply copy the current version of the Takeout `phar` file at [builds/takeout](./builds/takeout) to inside the container and publish that, so make sure you have to most recent version built locally. If you don't, follow the release process to build the new version before building the Docker image.\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "bootstrap",
          "type": "tree",
          "content": null
        },
        {
          "name": "box.json",
          "type": "blob",
          "size": 0.37890625,
          "content": "{\t\n    \"chmod\": \"0755\",\t\n    \"directories\": [\t\n        \"app\",\t\n        \"bootstrap\",\t\n        \"config\",\t\n        \"vendor\"\t\n    ],\t\n    \"files\": [\t\n        \"composer.json\"\t\n    ],\t\n    \"exclude-dev-files\": false,\t\n    \"exclude-composer-files\": false,\t\n    \"compression\": \"GZ\",\t\n    \"compactors\": [\t\n        \"KevinGH\\\\Box\\\\Compactor\\\\Php\",\t\n        \"KevinGH\\\\Box\\\\Compactor\\\\Json\"\t\n    ]\t\n}\n"
        },
        {
          "name": "builds",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.5791015625,
          "content": "{\n    \"name\": \"tightenco/takeout\",\n    \"description\": \"Manage your dev dependencies with simple one-off Docker containers.\",\n    \"keywords\": [\"cli\", \"console\", \"docker\", \"containers\", \"dependency management\"],\n    \"homepage\": \"https://takeout.tighten.co/\",\n    \"type\": \"project\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Matt Stauffer\",\n            \"email\": \"matt@tighten.co\"\n        },\n        {\n            \"name\": \"Jose Soto\",\n            \"email\": \"jose@tighten.co\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.2\",\n        \"ext-json\": \"*\",\n        \"ext-sockets\": \"*\",\n        \"composer/semver\": \"^3.4\",\n        \"guzzlehttp/psr7\": \"^2.6\",\n        \"laravel/prompts\": \"^0.3.2\"\n    },\n    \"require-dev\": {\n        \"guzzlehttp/guzzle\": \"^7.5\",\n        \"laravel-zero/framework\": \"^11.0\",\n        \"mockery/mockery\": \"^1.3.1\",\n        \"phpunit/phpunit\": \"^10.5\",\n        \"squizlabs/php_codesniffer\": \"^3.5\",\n        \"tightenco/tlint\": \"^9.3\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"app/\"\n        },\n        \"files\": [\n            \"app/helpers.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests/\"\n        }\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true,\n        \"optimize-autoloader\": true,\n        \"platform-check\": false\n    },\n    \"scripts\": {\n        \"lint:check\": [\n            \"tlint\",\n            \"phpcs\"\n        ],\n        \"lint:fix\": [\n            \"phpcbf\"\n        ]\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"bin\": [\"builds/takeout\"]\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.7587890625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" backupGlobals=\"false\" bootstrap=\"vendor/autoload.php\" colors=\"true\" processIsolation=\"false\" stopOnFailure=\"false\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.5/phpunit.xsd\" cacheDirectory=\".phpunit.cache\" backupStaticProperties=\"false\">\n  <testsuites>\n    <testsuite name=\"Feature\">\n      <directory suffix=\"Test.php\">./tests/Feature</directory>\n    </testsuite>\n    <testsuite name=\"Unit\">\n      <directory suffix=\"Test.php\">./tests/Unit</directory>\n    </testsuite>\n  </testsuites>\n  <php>\n    <server name=\"APP_ENV\" value=\"testing\"/>\n  </php>\n  <source>\n    <include>\n      <directory suffix=\".php\">./app</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "takeout",
          "type": "blob",
          "size": 1.7373046875,
          "content": "#!/usr/bin/env php\n<?php\n\ndefine('LARAVEL_START', microtime(true));\n\n/*\n|--------------------------------------------------------------------------\n| Register The Auto Loader\n|--------------------------------------------------------------------------\n|\n| Composer provides a convenient, automatically generated class loader\n| for our application. We just need to utilize it! We'll require it\n| into the script here so that we do not have to worry about the\n| loading of any our classes \"manually\". Feels great to relax.\n|\n*/\n\n$autoloader = require file_exists(__DIR__.'/vendor/autoload.php') ?  __DIR__.'/vendor/autoload.php' : __DIR__.'/../../autoload.php';\n\n$app = require_once __DIR__.'/bootstrap/app.php';\n\n/*\n|--------------------------------------------------------------------------\n| Run The Artisan Application\n|--------------------------------------------------------------------------\n|\n| When we run the console application, the current CLI command will be\n| executed in this console and the response sent back to a terminal\n| or another output device for the developers. Here goes nothing!\n|\n*/\n\n$kernel = $app->make(Illuminate\\Contracts\\Console\\Kernel::class);\n\n$status = $kernel->handle(\n    $input = new Symfony\\Component\\Console\\Input\\ArgvInput,\n    new Symfony\\Component\\Console\\Output\\ConsoleOutput\n);\n\n/*\n|--------------------------------------------------------------------------\n| Shutdown The Application\n|--------------------------------------------------------------------------\n|\n| Once Artisan has finished running, we will fire off the shutdown events\n| so that any final work may be done by the application before we shut\n| down the process. This is the last thing to happen to the request.\n|\n*/\n\n$kernel->terminate($input, $status);\n\nexit($status);\n"
        },
        {
          "name": "takeout-banner.png",
          "type": "blob",
          "size": 30.0390625,
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}