{
  "metadata": {
    "timestamp": 1736712191779,
    "page": 871,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yohang/Finite",
      "stars": 1311,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.087890625,
          "content": "vendor\nbuild\nbin\ncomposer.phar\ncomposer.lock\ncache.properties\ncoverage.clover\ndocs/_build\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.216796875,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_size = 4\nindent_style = space\nquote_type = simple\nspaces_around_operators = true\nindent_brace_style = K&R\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.130859375,
          "content": ".phpunit.result.cache\nvendor\nbuild\nbin\ncomposer.phar\ncomposer.lock\ncache.properties\ncoverage.clover\ndocs/_build\n.phpunit.result.cache\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.9375,
          "content": "ARG PHP_VERSION=8.4\n\nFROM php:${PHP_VERSION}-alpine\n\nARG DEPENDENCIES=highest\n\nRUN set -eux; \\\n    apk add --no-cache acl libzip; \\\n    apk add --no-cache --virtual .build-deps ${PHPIZE_DEPS} zlib-dev libzip-dev linux-headers; \\\n    docker-php-ext-install zip; \\\n    pecl install xdebug;\\\n    docker-php-ext-enable xdebug; \\\n    apk del .build-deps;\n\nRUN echo \"xdebug.mode=coverage\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n\nCOPY --from=composer:2 /usr/bin/composer /usr/bin/composer\n\nWORKDIR /app\n\nCOPY composer.json /app/\n\nRUN set -eux; \\\n    composer install --no-interaction; \\\n    if [ \"${DEPENDENCIES}\" = \"lowest\" ]; then COMPOSER_MEMORY_LIMIT=-1 composer update --prefer-lowest --no-interaction; fi; \\\n    if [ \"${DEPENDENCIES}\" = \"highest\" ]; then COMPOSER_MEMORY_LIMIT=-1 composer update --no-interaction; fi\n\nCOPY ./examples /app/examples\nCOPY ./src /app/src\nCOPY ./tests /app/tests\nCOPY ./phpunit.xml.dist /app/\nCOPY ./psalm.xml /app/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright (c) 2022 Yohan Giarelli\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.7392578125,
          "content": "build:\n\tdocker build -t yohang/finite .\n\ncli:\n\tdocker run -it --rm -v${PWD}:/app -w/app yohang/finite ash\n\ntest:\n\tdocker run -it --rm -v${PWD}:/app -w/app yohang/finite php ./vendor/bin/phpunit\n\ntest_all_targets:\n\tdocker build -t yohang/finite:php-8.1 --build-arg PHP_VERSION=8.1 .\n\tdocker build -t yohang/finite:php-8.1-lowest --build-arg PHP_VERSION=8.1 --build-arg DEPENDENCIES=lowest .\n\tdocker build -t yohang/finite:php-8.2 --build-arg PHP_VERSION=8.2 .\n\tdocker build -t yohang/finite:php-8.2-lowest --build-arg PHP_VERSION=8.2 --build-arg DEPENDENCIES=lowest .\n\tdocker build -t yohang/finite:php-8.3 --build-arg PHP_VERSION=8.3 .\n\tdocker build -t yohang/finite:php-8.3-lowest --build-arg PHP_VERSION=8.3 --build-arg DEPENDENCIES=lowest .\n\tdocker build -t yohang/finite:php-8.4 --build-arg PHP_VERSION=8.4 .\n\tdocker build -t yohang/finite:php-8.4-lowest --build-arg PHP_VERSION=8.4 --build-arg DEPENDENCIES=lowest .\n\tdocker run -it --rm yohang/finite:php-8.1 php ./vendor/bin/phpunit --coverage-text\n\tdocker run -it --rm yohang/finite:php-8.1-lowest php ./vendor/bin/phpunit --coverage-text\n\tdocker run -it --rm yohang/finite:php-8.2 php ./vendor/bin/phpunit --coverage-text\n\tdocker run -it --rm yohang/finite:php-8.2-lowest php ./vendor/bin/phpunit --coverage-text\n\tdocker run -it --rm yohang/finite:php-8.3 php ./vendor/bin/phpunit --coverage-text\n\tdocker run -it --rm yohang/finite:php-8.3-lowest php ./vendor/bin/phpunit --coverage-text\n\tdocker run -it --rm yohang/finite:php-8.4 php ./vendor/bin/phpunit --coverage-text\n\tdocker run -it --rm yohang/finite:php-8.4-lowest php ./vendor/bin/phpunit --coverage-text\n\npsalm:\n\tdocker build -t yohang/finite:php-8.4 --build-arg PHP_VERSION=8.4 .\n\tdocker run -it --rm yohang/finite:php-8.4 php ./vendor/bin/psalm --show-info=true\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.2001953125,
          "content": "Finite, A Simple PHP Finite State Machine\n=========================================\n\nFinite is a Simple State Machine, written in PHP. \nIt can manage any Stateful object by defining states and transitions between these states.\n\nAs of version 2, Finite is a low-deps and lightweight state machine library, thanks to the use of PHP Enums.\n\n\n![CI Status](https://github.com/yohang/finite/actions/workflows/ci.yml/badge.svg)\n\nDisclaimer\n----------\n\nI don't have the time anymore to maintain this lib. Here is the documentation for the brand new Finite V2, based\non PHP >= 8.1 Enums, but don't expect it to be updated on a regular basis.\n\nFeatures\n--------\n\n* Manage State/Transition graph for an object\n* Attach business logic to states\n* Listen to transitions between state to trigger your domain code\n* Symfony integration\n* Twig Extension\n\nGetting started\n---------------\n\n### Installation (via composer)\n```bash\n $ composer req yohan/finite\n```\n\n### Define your state enum\n\n```php\nenum DocumentState: string implements State\n{\n    case DRAFT = 'draft';\n    case PUBLISHED = 'published';\n    case REPORTED = 'reported';\n    case DISABLED = 'disabled';\n\n    public static function getTransitions(): array\n    {\n        return [\n            new Transition('publish', [self::DRAFT], self::PUBLISHED),\n            new Transition('clear', [self::REPORTED, self::DISABLED], self::PUBLISHED),\n            new Transition('report', [self::PUBLISHED], self::REPORTED),\n            new Transition('disable', [self::REPORTED, self::PUBLISHED], self::DISABLED),\n        ];\n    }\n}\n\n```\n\n\n### Define your Stateful Object\n\nYour stateful object just need to have a state property\n\n\n```php\nclass Document\n{\n    private DocumentState $state = DocumentState::DRAFT;\n\n    public function getState(): DocumentState\n    {\n        return $this->state;\n    }\n\n    public function setState(DocumentState $state): void\n    {\n        $this->state = $state;\n    }\n}\n```\n\n\n### Initializing a simple StateMachine\n\n```php\nuse Finite\\StateMachine;\n\n$document = new Document;\n\n$sm = new StateMachine;\n\n// Can we process a transition ?\n$sm->can($document, 'publish');\n\n// Apply a transition\n$sm->apply($document, 'publish'); \n\n```\n\n### Add business logic to states\n\nFinite < 2.0 had properties on states. A metadata mechanism that allowed to add business properties on states to \ndefine the behavior of on object, depending on its state.\n\nThe idea behind this was to avoid to test the state in your domain code (A controller must not throw a 404 if the state \nis draft. But it can throw a 404 if the current state does not have a \"visible\" property. That was the idea).\n\nFinite 2 does not needs this. PHP Enums can have methods. So, replace your properties with simple methods on your state.\n\n```php\nenum DocumentState: string implements State\n{\n    // ...\n\n    public function isDeletable(): bool\n    {\n        return in_array($this, [self::DRAFT, self::DISABLED]);\n    }\n\n    public function isPrintable(): bool\n    {\n        return in_array($this, [self::PUBLISHED, self::REPORTED]);\n    }\n}\n```\n\nAfter that, you can use theses methods on your object, even without instantiating the state machine.\n\n```php\nvar_dump($document->getState()->isDeletable());\nvar_dump($document->getState()->isPrintable());\n```\n\n\n\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.0263671875,
          "content": "{\n    \"name\": \"yohang/finite\",\n    \"description\": \"A simple PHP Finite State Machine\",\n    \"keywords\": [\n        \"statemachine\",\n        \"workflow\",\n        \"state\",\n        \"transition\",\n        \"symfony\",\n        \"bundle\"\n    ],\n    \"homepage\": \"https://github.com/yohang/Finite\",\n    \"type\": \"library\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Yohan Giarelli\",\n            \"email\": \"yohan@giarel.li\",\n            \"homepage\": \"http://yohan.giarel.li\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=8.1\",\n        \"symfony/property-access\": \"^6.1|^7.0\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^10.5.40\",\n        \"symfony/var-dumper\": \"^6.1|^7.0\",\n        \"twig/twig\": \"^3.4\",\n        \"vimeo/psalm\": \"dev-master@dev\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Finite\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Finite\\\\Tests\\\\\": \"tests/\"\n        }\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-main\": \"2.0.x-dev\"\n        }\n    }\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.5732421875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- http://www.phpunit.de/manual/current/en/appendixes.configuration.html -->\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         colors=\"true\"\n         bootstrap=\"tests/bootstrap.php\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.5/phpunit.xsd\">\n    <source>\n        <include>\n            <directory>src</directory>\n        </include>\n    </source>\n    <testsuites>\n        <testsuite name=\"Finite Test Suite\">\n            <directory>tests/</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n"
        },
        {
          "name": "psalm.xml",
          "type": "blob",
          "size": 0.5732421875,
          "content": "<?xml version=\"1.0\"?>\n<psalm\n    errorLevel=\"7\"\n    resolveFromConfigFile=\"true\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"https://getpsalm.org/schema/config\"\n    xsi:schemaLocation=\"https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd\"\n>\n    <projectFiles>\n        <directory name=\"src\" />\n        <ignoreFiles>\n            <directory name=\"vendor\" />\n        </ignoreFiles>\n    </projectFiles>\n\n    <issueHandlers>\n        <PossiblyUnusedMethod errorLevel=\"suppress\" />\n        <UnusedClass errorLevel=\"suppress\" />\n    </issueHandlers>\n</psalm>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}