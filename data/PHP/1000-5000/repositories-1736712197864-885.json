{
  "metadata": {
    "timestamp": 1736712197864,
    "page": 885,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spatie/once",
      "stars": 1289,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3046875,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3525390625,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n# Ignore all test and documentation with \"export-ignore\".\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/.travis.yml        export-ignore\n/phpunit.xml.dist   export-ignore\n/.scrutinizer.yml   export-ignore\n/tests              export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.052734375,
          "content": "build\ncomposer.lock\ndocs\nvendor\n.phpunit.result.cache\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.060546875,
          "content": "# Changelog\n\nAll notable changes to `once` will be documented in this file\n\n## 3.1.1 - 2024-05-27\n\n### What's Changed\n\n* fix spacing by @faisuc in https://github.com/spatie/once/pull/77\n* Add Dependabot Automation by @patinthehat in https://github.com/spatie/once/pull/80\n* Add PHP 8.2 Support by @patinthehat in https://github.com/spatie/once/pull/82\n* Update Dependabot Automation by @patinthehat in https://github.com/spatie/once/pull/83\n* Bump dependabot/fetch-metadata from 1.3.5 to 1.3.6 by @dependabot in https://github.com/spatie/once/pull/84\n* Update README.md by @davidjr82 in https://github.com/spatie/once/pull/87\n* Bump dependabot/fetch-metadata from 1.3.6 to 1.4.0 by @dependabot in https://github.com/spatie/once/pull/89\n* Bump dependabot/fetch-metadata from 1.4.0 to 1.5.1 by @dependabot in https://github.com/spatie/once/pull/90\n* Bump dependabot/fetch-metadata from 1.5.1 to 1.6.0 by @dependabot in https://github.com/spatie/once/pull/93\n* Bump actions/checkout from 2 to 4 by @dependabot in https://github.com/spatie/once/pull/94\n* Adjust pretty name of closures on PHP 8.4 by @staabm in https://github.com/spatie/once/pull/99\n\n### New Contributors\n\n* @faisuc made their first contribution in https://github.com/spatie/once/pull/77\n* @patinthehat made their first contribution in https://github.com/spatie/once/pull/80\n* @dependabot made their first contribution in https://github.com/spatie/once/pull/84\n* @davidjr82 made their first contribution in https://github.com/spatie/once/pull/87\n* @staabm made their first contribution in https://github.com/spatie/once/pull/99\n\n**Full Changelog**: https://github.com/spatie/once/compare/3.1.0...3.1.1\n\n## 3.1.0 - 2022-04-21\n\n## What's Changed\n\n- Rewrite phpunit tests to pest by @otsch in https://github.com/spatie/once/pull/73\n\n## New Contributors\n\n- @otsch made their first contribution in https://github.com/spatie/once/pull/73\n\n**Full Changelog**: https://github.com/spatie/once/compare/3.0.2...3.1.0\n\n## 3.0.2 - 2022-02-04\n\n## What's Changed\n\n- Add PHPStan doc blocks by @ThibaudDauce in https://github.com/spatie/once/pull/72\n\n**Full Changelog**: https://github.com/spatie/once/compare/3.0.1...3.0.2\n\n## 3.0.1 - 2021-07-04\n\n- fix for caching static functions of different classes with the same name (#62)\n\n## 3.0.0 - 2020-11-04\n\n- refactor to use a `WeakMap`\n- drop support for PHP 7\n\n## 2.2.1 - 2020-09-29\n\n- allow PHP 8\n\n## 2.2.0 - 2020-02-18\n\n- support global functions\n\n## 2.1.3 - 2019-10-31\n\n- differentiate between closures (#42)\n\n## 2.1.2 - 2019-08-05\n\n- remove excess parameter in `get` on `cache`\n\n## 2.1.1 - 2019-06-27\n\n- do not throw an error when using `once` in `eval`\n\n## 2.1.0 - 2019-06-19\n\n- add enabling/disable the cache\n- add `flush` method\n- drop support for PHP 7.1 and below\n\n## 2.0.2 - 2018-12-27\n\n- add ability to use `once` in static functions\n\n## 2.0.1 - 2018-01-31\n\n- improvements around serialization\n\n## 2.0.0 - 2018-01-31\n\n- ditch `__memoized` in favor of `Spatie\\Once\\Cache`\n\n## 1.1.0 - 2017-08-24\n\n- add `MemoizeAwareTrait`\n\n## 1.0.1 - 2016-11-14\n\n- fix cacheability of falsy return values\n\n## 1.0.0 - 2016-11-07\n\n- initial release\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.064453125,
          "content": "The MIT License (MIT)\n\nCopyright (c) Spatie bvba <info@spatie.be>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.0439453125,
          "content": "<p align=\"center\"><img src=\"/art/socialcard.png\" alt=\"Social Card of Once\"></p>\n\n# A magic [memoization](https://en.wikipedia.org/wiki/Memoization) function\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/spatie/once.svg?style=flat-square)](https://packagist.org/packages/spatie/once)\n[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE.md)\n[![Build Status](https://img.shields.io/travis/spatie/once/master.svg?style=flat-square)](https://travis-ci.org/spatie/once)\n[![Quality Score](https://img.shields.io/scrutinizer/g/spatie/once.svg?style=flat-square)](https://scrutinizer-ci.com/g/spatie/once)\n[![StyleCI](https://styleci.io/repos/73020509/shield?branch=master)](https://styleci.io/repos/73020509)\n[![Total Downloads](https://img.shields.io/packagist/dt/spatie/once.svg?style=flat-square)](https://packagist.org/packages/spatie/once)\n\nThis package contains a `once` function. You can pass a `callable` to it. Here's quick example:\n\n```php\n$myClass = new class() {\n    public function getNumber(): int\n    {\n        return once(function () {\n            return rand(1, 10000);\n        });\n    }\n};\n```\n\nNo matter how many times you run `$myClass->getNumber()` inside the same request  you'll always get the same number.\n\n## Are you a visual learner?\n\nUnder the hood, this package uses a PHP 8 Weakmap. [In this video](https://www.youtube.com/watch?v=-lFyHJqzfFU&list=PLjzBMxW2XGTwEwWumYBaFHy1z4W32TcjU&index=13), you'll see what a weakmap is, together with a nice demo of the package.\n\n## Support us\n\n[<img src=\"https://github-ads.s3.eu-central-1.amazonaws.com/once.jpg?t=1\" width=\"419px\" />](https://spatie.be/github-ad-click/once)\n\nWe invest a lot of resources into creating [best in class open source packages](https://spatie.be/open-source). You can support us by [buying one of our paid products](https://spatie.be/open-source/support-us).\n\nWe highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You'll find our address on [our contact page](https://spatie.be/about-us). We publish all received postcards on [our virtual postcard wall](https://spatie.be/open-source/postcards).\n\n## Installation\n\nYou can install the package via composer:\n\n``` bash\ncomposer require spatie/once\n```\n\n## Usage\n\nThe `once` function accepts a `callable`.\n\n```php\n$myClass = new class() {\n    public function getNumber(): int\n    {\n        return once(function () {\n            return rand(1, 10000);\n        });\n    }\n};\n```\n\nNo matter how many times you run `$myClass->getNumber()` you'll always get the same number.\n\nThe `once` function will only run once per combination of argument values the containing method receives.\n\n```php\nclass MyClass\n{\n    /**\n     * It also works in static context!\n     */\n    public static function getNumberForLetter($letter)\n    {\n        return once(function () use ($letter) {\n            return $letter . rand(1, 10000000);\n        });\n    }\n}\n```\n\nSo calling `MyClass::getNumberForLetter('A')` will always return the same result, but calling `MyClass::getNumberForLetter('B')` will return something else.\n\n### Flushing the cache\n\nTo flush the entire cache you can call:\n\n```php\nSpatie\\Once\\Cache::getInstance()->flush();\n```\n\n### Disabling the cache\n\nIn your tests you probably don't want to cache values. To disable the cache you can call:\n\n```php\nSpatie\\Once\\Cache::getInstance()->disable();\n```\n\nYou can re-enable the cache with\n\n```php\nSpatie\\Once\\Cache::getInstance()->enable();\n```\n\n### Octane compatibility\n\n> **Warning**\n> \n> This behaviour is in beta and needs to be tested by the community. You can find this topic [in discussion #79](https://github.com/spatie/once/discussions/79).\n\nIn order to have `once` working properly in an Octane environment, `Cache::getInstance()->flush()` must be called when `OperationTerminated` event is triggered. You can configure it in `config/octane.php` file:\n\n```php\n// config/octane.php\n\nOperationTerminated::class => [\n    FlushTemporaryContainerInstances::class,\n    // DisconnectFromDatabases::class,\n    // CollectGarbage::class,\n\n    FlushSpatieOnce::class, // we should create this class we have added here\n],\n```\n\nAnd create the `FlushSpatieOnce:class`:\n\n```php\n// app/Listeners/FlushSpatieOnce.php\n\nuse Spatie\\Once\\Cache;\n\nclass FlushSpatieOnce\n{\n    public function handle($event)\n    {\n        Cache::getInstance()->flush();\n    }\n}\n```\n\n## Under the hood\n\nThe `once` function will execute the given callable and save the result in the  `$values` property of `Spatie\\Once\\Cache`. This class [is a singleton](https://github.com/spatie/once/blob/9decd70a76664ff451fb10f65ac360290a6a50e6/src/Cache.php#L15-L27). When we detect that `once` has already run before, we're just going to return the value stored inside [the `$values` weakmap](https://github.com/spatie/once/blob/9decd70a76664ff451fb10f65ac360290a6a50e6/src/Cache.php#L11) instead of executing the callable again.\n\nThe first thing it does is calling [`debug_backtrace`](http://php.net/manual/en/function.debug-backtrace.php). We'll use the output to determine in which function and class `once` is called and to get access to the `object` that function is running in. Yeah, we're already in voodoo-land. The output of the `debug_backtrace` is passed to a new instance of `Backtrace`. That class is just a simple wrapper, so we can work more easily with the backtrace.\n\n```php\n$trace = debug_backtrace(\n    DEBUG_BACKTRACE_PROVIDE_OBJECT, 2\n)[1];\n\n$backtrace = new Backtrace($trace);\n\n$object = $backtrace->getObject();\n```\n\nNext, we calculate a `hash` of the backtrace. This hash will be unique per function `once` was called in and the values of the arguments that function receives.\n\n```php\n$hash = $backtrace->getHash();\n```\n\nFinally, we will check if there's already a value stored for the given hash. If not, then execute the given `$callback` and store the result in the weakmap of `Spatie\\Once\\Cache`. In the other case, we just return the value from that cache (the `$callback` isn't executed).\n\n```php\npublic function has(object $object, string $backtraceHash): bool\n{\n    if (! isset($this->values[$object])) {\n\n        return false;\n    }\n\n    return array_key_exists($backtraceHash, $this->values[$object]);\n}\n```\n\n## Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information what has changed recently.\n\n## Testing\n\n``` bash\ncomposer test\n```\n\n## Contributing\n\nPlease see [CONTRIBUTING](https://github.com/spatie/.github/blob/main/CONTRIBUTING.md) for details.\n\n## Security\n\nIf you've found a bug regarding security please mail [security@spatie.be](mailto:security@spatie.be) instead of using the issue tracker.\n\n## Credits\n\n- [Freek Van der Herten](https://github.com/freekmurze)\n- [All Contributors](../../contributors)\n\nAnd a special thanks to [Caneco](https://twitter.com/caneco) for the logo ✨\n\nCredit for the idea of the `once` function goes to [Taylor Otwell](https://twitter.com/taylorotwell/status/794622206567444481). The code for this package is based upon the code he was kind enough to share with us.\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n"
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.9599609375,
          "content": "{\n    \"name\": \"spatie/once\",\n    \"description\": \"A magic memoization function\",\n    \"keywords\": [\n        \"spatie\",\n        \"once\",\n        \"callable\",\n        \"memoization\",\n        \"cache\"\n    ],\n    \"homepage\": \"https://github.com/spatie/once\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Freek Van der Herten\",\n            \"email\": \"freek@spatie.be\",\n            \"homepage\": \"https://spatie.be\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.0\"\n    },\n    \"require-dev\": {\n        \"pestphp/pest\": \"^1.21\",\n        \"symfony/var-dumper\": \"^5.1\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Spatie\\\\Once\\\\\": \"src\"\n        },\n        \"files\": [\n            \"src/functions.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Spatie\\\\Once\\\\Test\\\\\": \"tests\"\n        }\n    },\n    \"scripts\": {\n        \"test\": \"vendor/bin/pest\"\n    },\n    \"config\": {\n        \"sort-packages\": true\n  }\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.90234375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bootstrap=\"vendor/autoload.php\" backupGlobals=\"false\" backupStaticAttributes=\"false\" colors=\"true\" verbose=\"true\" convertErrorsToExceptions=\"true\" convertNoticesToExceptions=\"true\" convertWarningsToExceptions=\"true\" processIsolation=\"false\" stopOnFailure=\"false\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\">\n  <coverage>\n    <include>\n      <directory suffix=\".php\">src/</directory>\n    </include>\n    <report>\n      <clover outputFile=\"build/logs/clover.xml\"/>\n      <html outputDirectory=\"build/coverage\"/>\n      <text outputFile=\"build/coverage.txt\"/>\n    </report>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"Spatie Test Suite\">\n      <directory>tests</directory>\n    </testsuite>\n  </testsuites>\n  <logging>\n    <junit outputFile=\"build/report.junit.xml\"/>\n  </logging>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}