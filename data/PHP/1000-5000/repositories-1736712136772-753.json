{
  "metadata": {
    "timestamp": 1736712136772,
    "page": 753,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cosenary/Instagram-PHP-API",
      "stars": 1458,
      "defaultBranch": "master",
      "files": [
        {
          "name": " CHANGELOG.md",
          "type": "blob",
          "size": 2.1982421875,
          "content": "## Changelog\n\nAll notable changes to `cosenary/instagram` will be documented in this file.\n\n> Version 3.0 is in development and includes support for real-time subscriptions.\n\n**Instagram 2.2 - 04/10/2014**\n\n- `feature` Added \"Enforce signed header\"\n- `feature` Implemented PSR4 autoloading.\n- `update` Increased timeout from 5 to 20 seconds\n- `update` Class name, package renamed\n\n**Instagram 2.1 - 30/01/2014**\n\n- `update` added min and max_timestamp to `searchMedia()`\n- `update` public authentication for `getUserMedia()` method\n- `fix` support for inconsistent pagination return type (*relationship endpoint*)\n\n**Instagram 2.0 - 24/12/2013**\n\n- `release` version 2.0\n\n**Instagram 2.0 beta - 20/11/2013**\n\n- `feature` Added *Locations* endpoint\n- `update` Updated example project to display Instagram videos\n\n**Instagram 2.0 alpha 4 - 01/11/2013**\n\n- `feature` Comment endpoint implemented\n- `feature` New example with a fancy GUI\n- `update` Improved documentation\n\n**Instagram 2.0 alpha 3 - 04/09/2013**\n\n- `merge` Merged master branch updates\n\t- `update` Updated documentation\n\t- `bug` / `change` cURL CURLOPT_SSL_VERIFYPEER disabled (fixes #6, #7, #8, #16)\n\t- `feature` Added cURL error message\n\t- `feature` Added `limit` to `getTagMedia()` method\n\n**Instagram 2.0 alpha 2 - 14/06/2013**\n\n- `feature` Improved Pagination functionality\n- `change` Added `distance` parameter to `searchMedia()` method (thanks @jonathanwkelly)\n\n**Instagram 2.0 alpha 1 - 28/05/2012**\n\n- `feature` Added Pagination method\n- `feature` Added User Relationship endpoints\n- `feature` Added scope parameter table for the `getLoginUrl()` method\n\n**Instagram 1.5 - 31/01/2012**\n\n- `release` Second master version\n- `feature` Added Tag endpoints\n- `change` Edited the \"Get started\" example\n- `change` Now you can pass the `getOAuthToken()` object directly into `setAccessToken()`\n\n**Instagram 1.0 - 20/11/2011**\n\n- `release` First public release\n- `feature` Added sample App with documented code\n- `update` New detailed documentation\n\n**Instagram 0.8 - 16/11/2011**\n\n- `release` First inital released version\n- `feature` Initialize the class with a config array or string (see example)\n\n**Instagram 0.5 - 12/11/2011**\n\n- `release` Beta version\n- `update` Small documentation"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0224609375,
          "content": "/example export-ignore\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.021484375,
          "content": "/vendor\ncomposer.lock\n"
        },
        {
          "name": ".styleci.yml",
          "type": "blob",
          "size": 0.0126953125,
          "content": "preset: psr2\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.9306640625,
          "content": "CONTRIBUTING\n============\n\nContributions are welcome, and are accepted via pull requests. Please review these guidelines before submitting any pull requests.\n\n## Guidelines\n\n* Please follow the [PSR-2 Coding Standard](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md) and [PHP-FIG Naming Conventions](https://github.com/php-fig/fig-standards/blob/master/bylaws/002-psr-naming-conventions.md).\n* Remember that we follow [SemVer](http://semver.org). If you are changing the behaviour, or the public api, you may need to update the docs.\n* Send a coherent commit history, making sure each individual commit in your pull request is meaningful. If you had to make multiple intermediate commits while developing, please [squash](http://git-scm.com/book/en/Git-Tools-Rewriting-History) them before submitting.\n* You may also need to [rebase](http://git-scm.com/book/en/Git-Branching-Rebasing) to avoid merge conflicts.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.45703125,
          "content": "Copyright (c) 2011-2015, Christian Metz\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n    * Neither the name of the organisation nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.8583984375,
          "content": "# ![Image](example/assets/instagram.png) Instagram PHP API V2\n\n> **Note:** On the 17 Nov 2015 [Instagram](http://developers.instagram.com/post/133424514006/instagram-platform-update) made [changes to their API ](https://instagram.com/developer/changelog/). Apps created before Nov 17, 2015 wont be affected until Jun 2016. Apps created on or after Nov 17 2015 will require to use their updated API. Please note that this library doesn't yet support their new updates. For more information, please see [#182](https://github.com/cosenary/Instagram-PHP-API/issues/182).\n\nA PHP wrapper for the Instagram API. Feedback or bug reports are appreciated.\n\n[![Total Downloads](http://img.shields.io/packagist/dm/cosenary/instagram.svg?style=flat)](https://packagist.org/packages/cosenary/instagram)\n[![Latest Stable Version](http://img.shields.io/packagist/v/cosenary/instagram.svg?style=flat)](https://packagist.org/packages/cosenary/instagram)\n[![License](https://img.shields.io/packagist/l/cosenary/instagram.svg?style=flat)](https://packagist.org/packages/cosenary/instagram)\n\n> [Composer](#installation) package available.  \n> Supports [Instagram Video](#instagram-videos) and [Signed Header](#signed-header).\n\n## Requirements\n\n- PHP 5.3 or higher\n- cURL\n- Registered Instagram App\n\n## Get started\n\nTo use the Instagram API you have to register yourself as a developer at the [Instagram Developer Platform](http://instagr.am/developer/register/) and create an application. Take a look at the [uri guidelines](#samples-for-redirect-urls) before registering a redirect URI. You will receive your `client_id` and `client_secret`.\n\n---\n\nPlease note that Instagram mainly refers to »Clients« instead of »Apps«. So »Client ID« and »Client Secret« are the same as »App Key« and »App Secret«.\n\n---\n\n> A good place to get started is the [example project](example/README.md).\n\n### Installation\n\nI strongly advice using [Composer](https://getcomposer.org) to keep updates as smooth as possible.\n\n```\n$ composer require cosenary/instagram\n```\n\n### Initialize the class\n\n```php\nuse MetzWeb\\Instagram\\Instagram;\n\n$instagram = new Instagram(array(\n\t'apiKey'      => 'YOUR_APP_KEY',\n\t'apiSecret'   => 'YOUR_APP_SECRET',\n\t'apiCallback' => 'YOUR_APP_CALLBACK'\n));\n\necho \"<a href='{$instagram->getLoginUrl()}'>Login with Instagram</a>\";\n```\n\n### Authenticate user (OAuth2)\n\n```php\n// grab OAuth callback code\n$code = $_GET['code'];\n$data = $instagram->getOAuthToken($code);\n\necho 'Your username is: ' . $data->user->username;\n```\n\n### Get user likes\n\n```php\n// set user access token\n$instagram->setAccessToken($data);\n\n// get all user likes\n$likes = $instagram->getUserLikes();\n\n// take a look at the API response\necho '<pre>';\nprint_r($likes);\necho '<pre>';\n```\n\n**All methods return the API data `json_decode()` - so you can directly access the data.**\n\n## Available methods\n\n### Setup Instagram\n\n`new Instagram(<array>/<string>);`\n\n`array` if you want to authenticate a user and access its data:\n\n```php\nnew Instagram(array(\n\t'apiKey'      => 'YOUR_APP_KEY',\n\t'apiSecret'   => 'YOUR_APP_SECRET',\n\t'apiCallback' => 'YOUR_APP_CALLBACK'\n));\n```\n\n`string` if you *only* want to access public data:\n\n```php\nnew Instagram('YOUR_APP_KEY');\n```\n\n### Get login URL\n\n`getLoginUrl(<array>)`\n\n```php\ngetLoginUrl(array(\n\t'basic',\n\t'likes'\n));\n```\n\n**Optional scope parameters:**\n\n<table>\n\t<tr>\n\t\t<th>Scope</th>\n\t\t<th>Legend</th>\n\t\t<th>Methods</th>\n\t</tr>\n\t<tr>\n\t\t<td><code>basic</code></td>\n\t\t<td>to use all user related methods [default]</td>\n\t\t<td><code>getUser()</code>, <code>getUserFeed()</code>, <code>getUserFollower()</code> etc.</td>\n\t</tr>\n\t<tr>\n\t\t<td><code>relationships</code></td>\n\t\t<td>to follow and unfollow users</td>\n\t\t<td><code>modifyRelationship()</code></td>\n\t</tr>\n\t<tr>\n\t\t<td><code>likes</code></td>\n\t\t<td>to like and unlike items</td>\n\t\t<td><code>getMediaLikes()</code>, <code>likeMedia()</code>, <code>deleteLikedMedia()</code></td>\n\t</tr>\n\t<tr>\n\t\t<td><code>comments</code></td>\n\t\t<td>to create or delete comments</td>\n\t\t<td><code>getMediaComments()</code>, <code>addMediaComment()</code>, <code>deleteMediaComment()</code></td>\n\t</tr>\n</table>\n\n### Get OAuth token\n\n`getOAuthToken($code, <true>/<false>)`\n\n`true` : Returns only the OAuth token  \n`false` *[default]* : Returns OAuth token and profile data of the authenticated user\n\n### Set / Get access token\n\n- Set the access token, for further method calls: `setAccessToken($token)`\n- Get the access token, if you want to store it for later usage: `getAccessToken()`\n\n### User methods\n\n**Public methods**\n\n- `getUser($id)`\n- `searchUser($name, <$limit>)`\n- `getUserMedia($id, <$limit>)`\n\n**Authenticated methods**\n\n- `getUser()`\n- `getUserLikes(<$limit>)`\n- `getUserFeed(<$limit>)`\n- `getUserMedia(<$id>, <$limit>)`\n\t- if an `$id` isn't defined or equals `'self'`, it returns the media of the logged in user\n\n> [Sample responses of the User Endpoints.](http://instagram.com/developer/endpoints/users/)\n\n### Relationship methods\n\n**Authenticated methods**\n\n- `getUserFollows($id, <$limit>)`\n- `getUserFollower($id, <$limit>)`\n- `getUserRelationship($id)`\n- `modifyRelationship($action, $user)`\n\t- `$action` : Action command (follow / unfollow / block / unblock / approve / deny)\n\t- `$user` : Target user id\n\n```php\n// Follow the user with the ID 1574083\n$instagram->modifyRelationship('follow', 1574083);\n```\n\n---\n\nPlease note that the `modifyRelationship()` method requires the `relationships` [scope](#get-login-url).\n\n---\n\n> [Sample responses of the Relationship Endpoints.](http://instagram.com/developer/endpoints/relationships/)\n\n### Media methods\n\n**Public methods**\n\n- `getMedia($id)`\n\t- authenticated users receive the info, whether the queried media is liked\n- `getPopularMedia()`\n- `searchMedia($lat, $lng, <$distance>, <$minTimestamp>, <$maxTimestamp>)`\n\t- `$lat` and `$lng` are coordinates and have to be floats like: `48.145441892290336`,`11.568603515625`\n\t- `$distance` : Radial distance in meter (default is 1km = 1000, max. is 5km = 5000)\n\t- `$minTimestamp` : All media returned will be taken *later* than this timestamp (default: 5 days ago)\n\t- `$maxTimestamp` : All media returned will be taken *earlier* than this timestamp (default: now)\n\n> [Sample responses of the Media Endpoints.](http://instagram.com/developer/endpoints/media/)\n\n### Comment methods\n\n**Public methods**\n\n- `getMediaComments($id)`\n\n**Authenticated methods**\n\n- `addMediaComment($id, $text)`\n\t- **restricted access:** please email `apidevelopers[at]instagram.com` for access\n- `deleteMediaComment($id, $commentID)`\n\t- the comment must be authored by the authenticated user\n\n---\n\nPlease note that the authenticated methods require the `comments` [scope](#get-login-url).\n\n---\n\n> [Sample responses of the Comment Endpoints.](http://instagram.com/developer/endpoints/comments/)\n\n### Tag methods\n\n**Public methods**\n\n- `getTag($name)`\n- `getTagMedia($name)`\n- `searchTags($name)`\n\n> [Sample responses of the Tag Endpoints.](http://instagram.com/developer/endpoints/tags/)\n\n### Likes methods\n\n**Authenticated methods**\n\n- `getMediaLikes($id)`\n- `likeMedia($id)`\n- `deleteLikedMedia($id)`\n\n> How to like a Media: [Example usage](https://gist.github.com/3287237)\n> [Sample responses of the Likes Endpoints.](http://instagram.com/developer/endpoints/likes/)\n\nAll `<...>` parameters are optional. If the limit is undefined, all available results will be returned.\n\n## Instagram videos\n\nInstagram entries are marked with a `type` attribute (`image` or `video`), that allows you to identify videos.\n\nAn example of how to embed Instagram videos by using [Video.js](http://www.videojs.com), can be found in the `/example` folder.\n\n---\n\n**Please note:** Instagram currently doesn't allow to filter videos.\n\n---\n\n## Signed Header\n\nIn order to prevent that your access tokens gets stolen, Instagram recommends to sign your requests with a hash of your API secret, the called endpoint and parameters.\n\n1. Activate [\"Enforce Signed Header\"](http://instagram.com/developer/clients/manage/) in your Instagram client settings.\n2. Enable the signed-header in your Instagram class:\n\n```php\n$instagram->setSignedHeader(true);\n```\n\n3. You are good to go! Now, all your requests will be secured with a signed header.\n\nGo into more detail about how it works in the [Instagram API Docs](http://instagram.com/developer/restrict-api-requests/#enforce-signed-header).\n\n## Pagination\n\nEach endpoint has a maximum range of results, so increasing the `limit` parameter above the limit won't help (e.g. `getUserMedia()` has a limit of 90).\n\nThat's the point where the \"pagination\" feature comes into play.\nSimply pass an object into the `pagination()` method and receive your next dataset:\n\n```php\n$photos = $instagram->getTagMedia('kitten');\n\n$result = $instagram->pagination($photos);\n```\n\nIteration with `do-while` loop.\n\n## Samples for redirect URLs\n\n<table>\n\t<tr>\n\t\t<th>Registered Redirect URI</th>\n\t\t<th>Redirect URI sent to /authorize</th>\n\t\t<th>Valid?</th>\n\t</tr>\n\t<tr>\n\t\t<td>http://yourcallback.com/</td>\n\t\t<td>http://yourcallback.com/</td>\n\t\t<td>yes</td>\n\t</tr>\n\t<tr>\n\t\t<td>http://yourcallback.com/</td>\n\t\t<td>http://yourcallback.com/?this=that</td>\n\t\t<td>yes</td>\n\t</tr>\n\t<tr>\n\t\t<td>http://yourcallback.com/?this=that</td>\n\t\t<td>http://yourcallback.com/</td>\n\t\t<td>no</td>\n\t</tr>\n\t<tr>\n\t\t<td>http://yourcallback.com/?this=that</td>\n\t\t<td>http://yourcallback.com/?this=that&another=true</td>\n\t\t<td>yes</td>\n\t</tr>\n\t<tr>\n\t\t<td>http://yourcallback.com/?this=that</td>\n\t\t<td>http://yourcallback.com/?another=true&this=that</td>\n\t\t<td>no</td>\n\t</tr>\n\t<tr>\n\t\t<td>http://yourcallback.com/callback</td>\n\t\t<td>http://yourcallback.com/</td>\n\t\t<td>no</td>\n\t</tr>\n\t<tr>\n\t\t<td>http://yourcallback.com/callback</td>\n\t\t<td>http://yourcallback.com/callback/?type=mobile</td>\n\t\t<td>yes</td>\n\t</tr>\n</table>\n\n> If you need further information about an endpoint, take a look at the [Instagram API docs](http://instagram.com/developer/authentication/).\n\n## Example App\n\n![Image](http://cl.ly/image/221T1g3w3u2J/preview.png)\n\nThis example project, located in the `example/` folder, helps you to get started.\nThe code is well documented and takes you through all required steps of the OAuth2 process.\nCredit for the awesome Instagram icons goes to [Ricardo de Zoete Pro](http://dribbble.com/RZDESIGN).\n\n#### More examples and tutorials:\n\n- [User likes](https://gist.github.com/cosenary/3287237)\n- [Follow user](https://gist.github.com/cosenary/8322459)\n- [User follower](https://gist.github.com/cosenary/7267139)\n- [Load more button](https://gist.github.com/cosenary/2975779)\n- [User most recent media](https://gist.github.com/cosenary/1711218)\n- [Instagram login](https://gist.github.com/cosenary/8803601)\n- [Instagram signup (9lessons tutorial)](http://www.9lessons.info/2012/05/login-with-instagram-php.html)\n- [Laravel Wrapper](https://github.com/vinkla/instagram)\n\n> Let me know if you have to share a code example, too.\n\n## Changelog\n\nPlease see the [changelog file](CHANGELOG.md) for more information.\n\n## Credits\n\nCopyright (c) 2011-2015 - Programmed by Christian Metz\n\nReleased under the [BSD License](LICENSE).\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.60546875,
          "content": "{\n\t\"name\": \"cosenary/instagram\",\n\t\"type\": \"library\",\n\t\"description\": \"An easy-to-use PHP Class for accessing Instagram's API.\",\n\t\"keywords\": [\"instagram\", \"api\"],\n\t\"homepage\": \"https://github.com/cosenary/Instagram-PHP-API\",\n\t\"license\": \"BSD\",\n\t\"authors\": [\n\t\t{\n\t\t\t\"name\": \"Christian Metz\",\n\t\t\t\"email\": \"christian-metz1@gmx.net\",\n\t\t\t\"homepage\": \"http://metzweb.net\"\n\t\t}\n\t],\n\t\"require\": {\n\t\t\"php\": \">=5.3.0\",\n\t\t\"ext-curl\": \"*\"\n\t},\n\t\"autoload\": {\n\t\t\"psr-4\": {\n\t\t\t\"MetzWeb\\\\Instagram\\\\\": \"src\"\n\t\t}\n\t},\n\t\"extra\": {\n\t\t\"branch-alias\": {\n\t\t\t\"dev-master\": \"2.4-dev\"\n\t\t}\n\t},\n\t\"minimum-stability\": \"dev\",\n\t\"prefer-stable\": true\n}\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}