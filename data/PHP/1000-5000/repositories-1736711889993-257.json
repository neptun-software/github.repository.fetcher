{
  "metadata": {
    "timestamp": 1736711889993,
    "page": 257,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "calebporzio/sushi",
      "stars": 2755,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.21484375,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.{yml,yaml}]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1611328125,
          "content": "* text=auto\n\n/tests export-ignore\n.editorconfig export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\n/.github export-ignore\nphpunit.xml export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1318359375,
          "content": "/.idea/\n/vendor/\n/tests/database/database.sqlite\n.phpunit.result.cache\ncomposer.lock\n/tests/cache/\n.vscode/settings.json\n.phpunit.cache"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2020 Caleb Porzio\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.0029296875,
          "content": "# Sushi 🍣\nEloquent's missing \"array\" driver.\n\nSometimes you want to use Eloquent, but without dealing with a database.\n\n## This Package Is Sponsorware 💰💰💰\nOriginally, this package was only available to my sponsors on GitHub Sponsors until I reached 75 sponsors.\n\nNow that we've reached the goal, the package is fully open source.\n\nEnjoy, and thanks for the support! ❤️\n\nLearn more about **Sponsorware** at [github.com/sponsorware/docs](https://github.com/sponsorware/docs) 💰.\n\n\n## Requirements\n\nThe [`pdo-sqlite` PHP extension](https://www.php.net/manual/en/ref.pdo-sqlite.php) must be installed on your system to use this package.\n\n## Install\n```\ncomposer require calebporzio/sushi\n```\n\n## Use\n\nUsing this package consists of two steps:\n1. Add the `Sushi` trait to a model.\n2. Add a `$rows` property to the model.\n\nThat's it.\n\n```php\nclass State extends Model\n{\n    use \\Sushi\\Sushi;\n\n    protected $rows = [\n        [\n            'abbr' => 'NY',\n            'name' => 'New York',\n        ],\n        [\n            'abbr' => 'CA',\n            'name' => 'California',\n        ],\n    ];\n}\n```\n\nNow, you can use this model anywhere you like, and it will behave as if you created a table with the rows you provided.\n```php\n$stateName = State::whereAbbr('NY')->first()->name;\n```\n\nThis is really useful for \"Fixture\" data, like states, countries, zip codes, user_roles, sites_settings, etc...\n\n### Relationships\nLet's say you created a `Role` model, based on an array using Sushi, that looked like this:\n```php\nclass Role extends Model\n{\n    use \\Sushi\\Sushi;\n\n    protected $rows = [\n        ['id' => 1, 'label' => 'admin'],\n        ['id' => 2, 'label' => 'manager'],\n        ['id' => 3, 'label' => 'user'],\n    ];\n}\n```\n\nYou can add a relationship to another standard model, just like you normally would:\n```php\nclass User extends Model\n{\n    ...\n\n    public function role()\n    {\n        return $this->belongsTo(Role::class);\n    }\n}\n```\n\nAssuming the `users` table has a `role_id` column, you can do things like this:\n```php\n// Grab a User.\n$user = User::first();\n// Grab a Role.\n$role = Role::whereLabel('admin')->first();\n\n// Associate them.\n$user->role()->associate($role);\n\n// Access like normal.\n$user->role;\n\n// Eager load.\n$user->load('role');\nUser::with('role')->first();\n```\n\n> Note: There is one caveat when dealing with Sushi model relationships. The `whereHas` method will NOT work. This is because the two models are spread across two separate databases.\n\n### Using database-checking validation rules\nYou can even use Laravel's `exists:table,column` database checking request validation rule.\n\n```php\n$data = request()->validate([\n    'state' => ['required', 'exists:App\\Models\\State,abbr'],\n]);\n```\n\n> Note: Be aware that you must use the fully-qualified namespace of the model instead of a table name. This ensures that Laravel will correctly resolve the model's connection.\n\n### Custom Schema\nIf Sushi's schema auto-detection system doesn't meet your specific requirements for the supplied row data, you can customize them with the `$schema` property or the `getSchema()` method.\n\n```php\nclass Products extends Model\n{\n    use \\Sushi\\Sushi;\n\n    protected $rows = [\n        ['name' => 'Lawn Mower', 'price' => '226.99'],\n        ['name' => 'Leaf Blower', 'price' => '134.99'],\n        ['name' => 'Rake', 'price' => '9.99'],\n    ];\n\n    protected $schema = [\n        'price' => 'float',\n    ];\n}\n```\n\n## Advanced Usage\n\nWhen you need more flexibility, you can implement the `afterMigrate(BluePrint $table)` method, allowing you to customize the table after it has been created. This might be useful for adding indexes to certain columns.\n\n```php\nclass Products extends Model\n{\n    use \\Sushi\\Sushi;\n\n    protected $rows = [\n        ['name' => 'Lawn Mower', 'price' => '226.99'],\n        ['name' => 'Leaf Blower', 'price' => '134.99'],\n        ['name' => 'Rake', 'price' => '9.99'],\n    ];\n\n    protected function afterMigrate(Blueprint $table)\n    {\n        $table->index('name');\n    }\n}\n```\n\n## How It Works\nUnder the hood, this package creates and caches a SQLite database JUST for this model. It creates a table and populates the rows. If, for whatever reason, it can't cache a .sqlite file, it will default to using an in-memory sqlite database.\n\n## Using ->getRows()\nYou can optionally opt out of using the `protected $rows` property, and directly implement your own `getRows()` method.\n\nThis will allow you to determine the rows for the model at runtime. You can even generate the model's rows from an external source like a third-party API.\n\n\n```php\nclass Role extends Model\n{\n    use \\Sushi\\Sushi;\n\n    public function getRows()\n    {\n        return [\n            ['id' => 1, 'label' => 'admin'],\n            ['id' => 2, 'label' => 'manager'],\n            ['id' => 3, 'label' => 'user'],\n        ];\n    }\n}\n```\n\n### Caching ->getRows()\n\nIf you choose to use your own ->getRows() method, the rows will NOT be cached between requests by default.\n\nYou can force Sushi to cache your dataset with the following method: `sushiShouldCache()`.\n\nLet's look at a configuration where `->getRows()` datasets would be cached as an example:\n\n```php\nclass Role extends Model\n{\n    use \\Sushi\\Sushi;\n\n    public function getRows()\n    {\n        return [\n            ['id' => 1, 'label' => 'admin'],\n            ['id' => 2, 'label' => 'manager'],\n            ['id' => 3, 'label' => 'user'],\n        ];\n    }\n\n    protected function sushiShouldCache()\n    {\n        return true;\n    }\n}\n```\n\nBy default, Sushi looks at the \"last modified\" timestamp of your model PHP file and compares it with its internal `.sqlite` cache file. If the model file has been changed more recently than the `.sqlite` cache file, then Sushi will destroy and rebuild the `.sqlite` cache.\nAdditionally, you can configure an external file for Sushi to reference when determining if the cache is up to date or needs to be refreshed.\n\nIf, for example, you are using Sushi to provide an Eloquent model for an external data source file like an `.csv` file, you can use `sushiCacheReferencePath` to force Sushi to reference the `.csv` file when determining if the cache is stale.\n\nFor example:\n\n```php\nclass Role extends Model\n{\n    use \\Sushi\\Sushi;\n\n    public function getRows()\n    {\n        return CSV::fromFile(__DIR__.'/roles.csv')->toArray();\n    }\n\n    protected function sushiShouldCache()\n    {\n        return true;\n    }\n\n    protected function sushiCacheReferencePath()\n    {\n        return __DIR__.'/roles.csv';\n    }\n}\n```\n\nNow, Sushi will only \"bust\" its internal cache if `roles.csv` changes, rather than looking at the `Role.php` model.\n\n### Handling Empty Datasets\nSushi reads the first row in your dataset to work out the scheme of the SQLite table. If you are using `getRows()` and this returns an empty array (e.g an API returns nothing back) then Sushi would throw an error.\n\nIf you would like Sushi to work even if the dataset is empty, you can define your schema in the optional `protected $schema` array.\n\n> Note: If you choose to use your own ->getRows() method, the rows will NOT be cached between requests.\n\n```php\nclass Currency extends Model\n{\n    use \\Sushi\\Sushi;\n\n    protected $schema = [\n        'id' => 'integer',\n        'name' => 'string',\n        'symbol' => 'string',\n        'precision' => 'float'\n    ];\n\n    public function getRows()\n    {\n        return [];\n    }\n}\n```\n\n### Handling String-based Primary Keys\nSushi requires you to add two properties to your model, if it uses a string-based primary key - `$incrementing` and `$keyType`:\n\n```php\nclass Role extends Model\n{\n    use \\Sushi\\Sushi;\n\n    public $incrementing = false;\n\n    protected $keyType = 'string';\n\n    protected $rows = [\n        ['id' => 'admin', 'label' => 'Admin'],\n        ['id' => 'manager', 'label' => 'Manager'],\n        ['id' => 'user', 'label' => 'User'],\n    ];\n}\n```\n\n### Troubleshoot\n\n**ERROR:** `SQLSTATE[HY000]: General error: 1 too many SQL variables`\n\nBy default Sushi uses chunks of `100` to insert your data in the SQLite database. In some scenarios this might hit some SQLite limits.\nYou can configure the chunk size in the model: `public $sushiInsertChunkSize = 50;`\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.01171875,
          "content": "{\n    \"name\": \"calebporzio/sushi\",\n    \"description\": \"Eloquent's missing \\\"array\\\" driver.\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Caleb Porzio\",\n            \"email\": \"calebporzio@gmail.com\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^7.1.3|^8.0\",\n        \"ext-pdo_sqlite\": \"*\",\n        \"ext-sqlite3\": \"*\",\n        \"illuminate/database\": \"^5.8 || ^6.0 || ^7.0 || ^8.0 || ^9.0 || ^10.0 || ^11.0\",\n        \"illuminate/support\": \"^5.8 || ^6.0 || ^7.0 || ^8.0 || ^9.0 || ^10.0 || ^11.0\"\n    },\n    \"require-dev\": {\n        \"doctrine/dbal\": \"^2.9 || ^3.1.4\",\n        \"orchestra/testbench\": \"3.8.* || 3.9.* || ^4.0 || ^6.0 || ^7.0 || ^8.0 || ^9.0\",\n        \"phpunit/phpunit\": \"^7.5 || ^8.4 || ^9.0 || ^10.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Sushi\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests/\"\n        }\n    },\n    \"config\": {\n        \"sort-packages\": true\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.5185546875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.5/phpunit.xsd\" bootstrap=\"vendor/autoload.php\" executionOrder=\"depends,defects\" colors=\"true\" cacheDirectory=\".phpunit.cache\">\n  <testsuites>\n    <testsuite name=\"default\">\n      <directory suffix=\"Test.php\">tests</directory>\n    </testsuite>\n  </testsuites>\n  <source>\n    <include>\n      <directory suffix=\".php\">src</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}