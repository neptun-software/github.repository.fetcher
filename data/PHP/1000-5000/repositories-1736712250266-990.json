{
  "metadata": {
    "timestamp": 1736712250266,
    "page": 990,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "anandkunal/ToroPHP",
      "stars": 1169,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0087890625,
          "content": ".DS_Store"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0595703125,
          "content": "MIT License\n\nCopyright 2012 Kunal Anand http://kunalanand.com\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.4345703125,
          "content": "# Toro\n\nToro is a PHP router for developing RESTful web applications and APIs. It is\ndesigned for minimalists who want to get work done.\n\n## Quick Links\n\n- [Official Website](http://toroweb.org)\n- [Changelog](https://github.com/anandkunal/ToroPHP/wiki/Changelog)\n- [Design Goals](https://github.com/anandkunal/ToroPHP/wiki/Design-Goals)\n\n\n## Features\n\n- RESTful routing using strings, regular expressions, and defined types\n  (`number`, `string`, `alpha`)\n- Flexible error handling and callbacks via `ToroHook`\n- Intuitive and self-documented core (`Toro.php`)\n- Tested with PHP 5.3 and above\n\n\n## \"Hello, world\"\n\nThe canonical \"Hello, world\" example:\n\n```php\n<?php\n\nclass HelloHandler {\n    function get() {\n        echo \"Hello, world\";\n    }\n}\n\nToro::serve(array(\n    \"/\" => \"HelloHandler\",\n));\n```\n\n\n## Routing Basics\n\nRouting with Toro is simple:\n\n```php\n<?php\n\nToro::serve(array(\n    \"/\" => \"SplashHandler\",\n    \"/catalog/page/:number\" => \"CatalogHandler\",\n    \"/product/:alpha\" => \"ProductHandler\",\n    \"/manufacturer/:string\" => \"ManufacturerHandler\"\n));\n```\n\nAn application's route table is expressed as an associative array\n(`route_pattern => handler`). This is closely modeled after\n[Tornado](http://tornadoweb.org) (Python). Routes are not expressed as\nanonymous functions to prevent unnecessary code duplication for RESTful\ndispatching.\n\nFrom the above example, route stubs, such as `:number`, `:string`, and\n`:alpha` can be conveniently used instead of common regular expressions.\nOf course, regular expressions are still welcome. The previous example could\nalso be expressed as:\n\n```php\n<?php\n\nToro::serve(array(\n    \"/\" => \"SplashHandler\",\n    \"/catalog/page/([0-9]+)\" => \"CatalogHandler\",\n    \"/product/([a-zA-Z0-9-_]+)\" => \"ProductHandler\",\n    \"/manufacturer/([a-zA-Z]+)\" => \"ManufacturerHandler\"\n));\n```\n\nPattern matches are passed in order as arguments to the handler's request\nmethod. In the case of `ProductHandler` above:\n\n```php\n<?php\n\nclass ProductHandler {\n    function get($name) {\n        echo \"You want to see product: $name\";\n    }\n}\n```\n\n\n## RESTful Handlers\n\n```php\n<?php\n\nclass ExampleHandler {\n    function get() {}\n    function post() {}\n    function get_xhr() {}\n    function post_xhr() {}\n}\n```\n\nFrom the above, you can see two emergent patterns.\n\n1. Methods named after the HTTP request method (`GET`, `POST`, `PUT`,\n   `DELETE`) are automatically called.\n\n2. Appending `_xhr` to a handler method automatically matches\n   JSON/`XMLHTTPRequest` requests. If the `_xhr` method is not implemented,\n   then the given HTTP request method is called as a fallback.\n\n\n## ToroHook (Callbacks)\n\nAs of v2.0.0, there are a total of five Toro-specific hooks (callbacks):\n\n```php\n<?php\n\n// Fired for 404 errors; must be defined before Toro::serve() call\nToroHook::add(\"404\",  function() {});\n\n// Before/After callbacks in order\nToroHook::add(\"before_request\", function() {});\nToroHook::add(\"before_handler\", function() {});\nToroHook::add(\"after_handler\", function() {});\nToroHook::add(\"after_request\",  function() {});\n```\n\n`before_handler` and `after_handler` are defined within handler's constructor:\n\n```php\n<?php\n\nclass SomeHandler {\n    function __construct() {\n        ToroHook::add(\"before_handler\", function() { echo \"Before\"; });\n        ToroHook::add(\"after_handler\", function() { echo \"After\"; });\n    }\n\n    function get() {\n        echo \"I am some handler.\";\n    }\n}\n```\n\nHooks can also be stacked. Adding a hook pushes the provided anonymous\nfunction into an array. When a hook is fired, all of the functions are called\nsequentially.\n\n\n## Installation\n\nGrab a copy of the repository and move `Toro.php` to your project root.\n\n### Using Composer\n\nInstall composer in your project:\n\n```sh\n$ curl -s https://getcomposer.org/installer | php\n```\n**Caution**: The above command requires you to place a lot of trust in the composer team to not get hacked and have a backdoor installed in their installer script. If secuity is a concern, consider doing the following:\n\n```sh\n$ curl -s https://getcomposer.org/installer > installer.php\n$ less installer.php\n$ # When you're certain it's safe...\n$ php installer.php\n```\n\n\nCreate a `composer.json` file in your project root:\n\n```js\n{\n    \"require\": {\n        \"torophp/torophp\": \"dev-master\"\n    }\n}\n```\n\nInstall via composer:\n\n```sh\n$ php composer.phar install\n```\n\n### Server Configuration\n\n#### Apache\n\nYou may need to add the following snippet in your Apache HTTP server virtual host configuration or **.htaccess** file.\n\n```apacheconf\nRewriteEngine on\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond $1 !^(index\\.php)\nRewriteRule ^(.*)$ /index.php/$1 [L]\n```\n\nAlternatively, if you’re lucky enough to be using a version of Apache greater than 2.2.15, then you can instead just use this one, single line:\n```apacheconf\nFallbackResource /index.php\n```\n\n#### IIS\n\nFor IIS you will need to install URL Rewrite for IIS and then add the following rule to your `web.config`:\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <rewrite>\n          <rule name=\"Toro\" stopProcessing=\"true\">\n            <match url=\"^(.*)$\" ignoreCase=\"false\" />\n              <conditions logicalGrouping=\"MatchAll\">\n                <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" ignoreCase=\"false\" negate=\"true\" />\n                <add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" ignoreCase=\"false\" negate=\"true\" />\n                <add input=\"{R:1}\" pattern=\"^(index\\.php)\" ignoreCase=\"false\" negate=\"true\" />\n              </conditions>\n            <action type=\"Rewrite\" url=\"/index.php/{R:1}\" />\n          </rule>\n        </rewrite>\n    </system.webServer>\n</configuration>\n```\n\n#### Nginx\n\nUnder the `server` block of your virtual host configuration, you only need to add three lines.\n```conf\nlocation / {\n  try_files $uri $uri/ /index.php?$args;\n}\n```\n\n## Contributions\n\n- Toro was inspired by the [Tornado Web Server](http://www.tornadoweb.org)\n  (FriendFeed/Facebook)\n- [Berker Peksag](http://berkerpeksag.com),\n  [Martin Bean](http://www.martinbean.co.uk),\n  [Robbie Coleman](http://robbie.robnrob.com), and\n  [John Kurkowski](http://about.me/john.kurkowski) for bug fixes and patches\n- [Danillo César de O. Melo](https://github.com/danillos/fire_event/blob/master/Event.php) for `ToroHook`\n- [Jason Mooberry](http://jasonmooberry.com) for code optimizations and feedback\n\nContributions to Toro are welcome via pull requests.\n\n\n## License\n\nToroPHP was created by [Kunal Anand](http://kunalanand.com) and released under\nthe MIT License.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.529296875,
          "content": "{\n    \"name\": \"torophp/torophp\",\n    \"type\": \"library\",\n    \"description\": \"Toro is a PHP router for developing RESTful web applications and APIs.\",\n    \"keywords\": [\n        \"framework\",\n        \"php\",\n        \"router\"\n    ],\n    \"homepage\": \"http://github.com/anandkunal/ToroPHP\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Kunal Anand\",\n            \"email\": \"kunal.r.anand@gmail.com\",\n            \"homepage\": \"http://kunalanand.com/\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"Danillo César de O. Melo\",\n            \"email\": \"danillos@gmail.com\",\n            \"homepage\": \"http://www.danillocesar.com.br/\",\n            \"role\": \"Contributor\"\n        },\n        {\n            \"name\": \"Martin Bean\",\n            \"email\": \"martin@martinbean.co.uk\",\n            \"homepage\": \"http://www.martinbean.co.uk\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"Robbie Coleman\",\n            \"homepage\": \"http://robbie.robnrob.com\",\n            \"role\": \"Contributor\"\n        },\n        {\n            \"name\": \"John Kurkowski\",\n            \"role\": \"Contributor\"\n        },\n        {\n            \"name\": \"Berker Peksag\",\n            \"homepage\": \"http://berkerpeksag.com\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"Jason Mooberry\",\n            \"homepage\": \"http://jasonmooberry.com/\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=5.3.0\"\n    },\n    \"autoload\": {\n        \"files\": [\n            \"src/Toro.php\"\n        ]\n    }\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}