{
  "metadata": {
    "timestamp": 1736711969823,
    "page": 430,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "borisrepl/boris",
      "stars": 2154,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.06640625,
          "content": "/vendor/\n*.swp\nboris.phar\n.token\n\n# Testing #\n###########\n/reports/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.125,
          "content": "language: php\nphp:\n  - 7.0\n  - 5.6\n  - 5.5\n  - 5.4\n  - 5.3\n  - hhvm\nscript: phpunit --bootstrap tests/autoload.php -c tests.xml\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.482421875,
          "content": "# Contribution Guidelines\n\n## Rules\n\nThere are a few basic ground-rules for contributors:\n\n1. **No `--force` pushes** or modifying the Git history in any way.\n2. **External API changes and significant modifications** should be subject to a **pull request** to solicit feedback from other contributors.\n3. Use a non-`master` branch for ongoing work.\n4. Adhere to existing code style as much as possible.\n\n## Releases\n\nDeclaring formal releases remains the prerogative of the project maintainer.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03125,
          "content": "Copyright (c) 2011 Chris Corbyn\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.544921875,
          "content": "# Boris\n\nA tiny, but robust REPL for PHP.\n\n[![Code Climate](https://codeclimate.com/github/borisrepl/boris/badges/gpa.svg)](https://codeclimate.com/github/borisrepl/boris)\n[![Build Status](https://travis-ci.org/borisrepl/boris.svg?branch=master)](https://travis-ci.org/borisrepl/boris)\n\n\n> **Announcement:** I'm looking to add one or two additional collaborators with\n> commit access. If you are actively involved in open source and have a GitHub\n> profile for review, ping me on Twitter (@d11wtq) to express your interest.\n> Experienced developers with active GitHub projects only.\n\n![Demo](http://dl.dropbox.com/u/508607/BorisDemo-v4.gif \"Quick Demo\")\n\nPython has one. Ruby has one. Clojure has one. Now PHP has one, too. Boris is\nPHP's missing REPL (read-eval-print loop), allowing developers to experiment\nwith PHP code in the terminal in an interactive manner.  If you make a mistake,\nit doesn't matter, Boris will report the error and stand to attention for\nfurther input.\n\nEverything you enter into Boris is evaluated and the result inspected so you\ncan understand what is happening.  State is maintained between inputs, allowing\nyou to gradually build up a solution to a problem.\n\n> __Note:__ The PCNTL function which is required to run Boris is not available on Windows platforms.\n\n## Why?\n\nI'm in the process of transitioning away from PHP to Ruby.  I have come to find\nPHP's lack of a real REPL to be frustrating and was not able to find an existing\nimplementation that was complete.  Boris weighs in at a few hundred lines of\nfairly straightforward code.\n\n\n## Usage\n\nCheck out our wonderful [wiki] for usage instructions.\n\n\n## Contributing\n\nWe're committed to a loosely-coupled architecture for Boris and would love to get your contributions.\n\nBefore jumping in, check out our **[Contributing] [contributing]** page on the wiki!\n\n## Contributing\n\nWe're using [PHPUnit](https://phpunit.de/) for testing. To run all the tests,\n\n    phpunit --bootstrap tests/autoload.php -c tests.xml\n\n## Core Team\n\nThis module was originally developed by [Chris Corbyn](https://github.com/d11wtq), and is now maintained by [Tejas Manohar](https://github.com/tejasmanohar), [Dennis Hotson](https://github.com/dhotson), and [other wonderful contributors](https://github.com/borisrepl/boris/graphs/contributors).\n\n## Copyright & Licensing\n\nSee the [LICENSE] file for details.\n\n[LICENSE]: https://github.com/borisrepl/boris/blob/master/LICENSE\n[wiki]: https://github.com/borisrepl/boris/wiki\n[contributing]: https://github.com/borisrepl/boris/blob/master/CONTRIBUTING.md\n[Chris Corbyn]: https://github.com/borisrepl\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "box.json",
          "type": "blob",
          "size": 0.24609375,
          "content": "{\n    \"files\": [\"LICENSE\"],\n    \"finder\": [{\n        \"name\": \"*.php\",\n        \"exclude\": [\n            \"tests\"\n        ],\n        \"in\": \"lib\"\n    }],\n    \"git-version\": \"git_tag\",\n    \"main\": \"bin/boris\",\n    \"output\": \"boris.phar\",\n    \"stub\": true\n}\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.4248046875,
          "content": "{\n    \"name\": \"d11wtq/boris\",\n    \"description\": \"A tiny, but robust REPL (Read-Evaluate-Print-Loop) for PHP.\",\n    \"license\": \"MIT\",\n    \"require\": {\n        \"php\": \">=5.3.0\",\n        \"ext-readline\": \"*\",\n        \"ext-pcntl\": \"*\",\n        \"ext-posix\": \"*\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"4.6.*\"\n    },\n    \"autoload\": {\n        \"psr-0\": {\n            \"Boris\": \"lib\"\n        }\n    },\n    \"bin\": [\"bin/boris\"]\n}\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "release.php",
          "type": "blob",
          "size": 3.2646484375,
          "content": "#!/usr/bin/env php\n<?php\n\n/**\n * @author Chris Corbyn <chris@w3style.co.uk>\n *\n * Copyright Â© 2013-2014 Chris Corbyn.\n */\n\n/* Generate releases in Github */\n\nnamespace Boris;\n\nrequire __DIR__ . '/lib/autoload.php';\n\n$args = getopt('hv:', array(\n    'help',\n    'version:'\n));\n\nif (count($args) != 1) {\n    help();\n    exit(1);\n}\n\nforeach ($args as $opt => $value) {\n    switch ($opt) {\n        case 'v':\n        case 'version':\n            version($value);\n            exit(0);\n        \n        case 'h':\n        case 'help':\n            help();\n            exit(0);\n        \n        default:\n            unknown($opt);\n            exit(1);\n    }\n}\n\nfunction help()\n{\n    echo <<<HELP\nBoris release generator script.\n\nUsage:\n  ./release.php --version 1.2    Create a release for v1.2\n  ./release.php --help           Display this help message\n\nHELP;\n}\n\nfunction version($newVersion)\n{\n    $token      = get_token();\n    $user       = get_user();\n    $repo       = get_repo();\n    $oldVersion = Boris::VERSION;\n    $phar       = \"boris.phar\";\n    \n    printf(\"Building version v%s...\\n\", $newVersion);\n    \n    printf(\"    Updating Boris::VERSION (%s) to %s...\\n\", $oldVersion, $newVersion);\n    `perl -pi -e 's/$oldVersion/$newVersion/' lib/Boris/Boris.php README.md`;\n    \n    printf(\"    Committing changes...\\n\");\n    `git commit -am \"Version bump to $newVersion\"`;\n    \n    printf(\"    Pushing changes upstream...\\n\");\n    `git push`;\n    \n    printf(\"    Creating tag v%s...\\n\", $newVersion);\n    `git tag -a \"v$newVersion\" -m \"Auto-generated tag\"`;\n    \n    printf(\"    Pushing tags upstream...\\n\");\n    `git push --tags`;\n    \n    printf(\"    Creating release on github...\\n\");\n    $response = `curl \\\n     -sL \\\n     -XPOST \\\n     -H \"Authorization: token $token\" \\\n     --data-binary '{\"tag_name\":\"v$newVersion\"}' \\\n     https://api.github.com/repos/$user/$repo/releases`;\n    \n    $json = json_decode($response, true);\n    $id   = $json['id'];\n    \n    if (empty($id)) {\n        printf(\"Failed.\\n\");\n        printf(\"%s\\n\", $response);\n        exit(1);\n    }\n    \n    printf(\"    Building phar...\\n\");\n    `box build`;\n    \n    printf(\"Uploading phar to GitHub...\\n\");\n    `curl -XPOST \\\n     -sL \\\n     -H \"Authorization: token $token\" \\\n     -H \"Content-Type: application/octet-stream\" \\\n     --data-binary @$phar \\\n     https://uploads.github.com/repos/$user/$repo/releases/$id/assets?name=$phar`;\n    \n    printf(\"Done.\\n\");\n}\n\nfunction get_token()\n{\n    if (getenv('GITHUB_TOKEN')) {\n        return getenv('GITHUB_TOKEN');\n    } else {\n        printf(\"Missing environment variable \\$GITHUB_TOKEN\\n\");\n        exit(1);\n    }\n}\n\nfunction get_origin()\n{\n    $remotes = `git remote -v`;\n    if (!preg_match('/^origin\\s+(\\S*?.git)\\s+\\(push\\)/m', $remotes, $matches)) {\n        printf(\"Unable to find origin in $remotes\\n\");\n        exit(1);\n    }\n    return $matches[1];\n}\n\nfunction get_user()\n{\n    $origin = get_origin();\n    if (!preg_match('#^.*?[/:]([^/]+)/([^/]+)\\.git$#', $origin, $matches)) {\n        printf(\"Don't know how to parse $origin\\n\");\n        exit(1);\n    }\n    return $matches[1];\n}\n\nfunction get_repo()\n{\n    $origin = get_origin();\n    if (!preg_match('#^.*?[/:]([^/]+)/([^/]+)\\.git$#', $origin, $matches)) {\n        printf(\"Don't know how to parse $origin\\n\");\n        exit(1);\n    }\n    return $matches[2];\n}\n"
        },
        {
          "name": "tests.xml",
          "type": "blob",
          "size": 0.1689453125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<phpunit>\n  <testsuites>\n    <testsuite name=\"Boris\">\n      <directory>tests</directory>\n    </testsuite>\n  </testsuites>\n</phpunit>\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}