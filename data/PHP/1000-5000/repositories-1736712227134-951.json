{
  "metadata": {
    "timestamp": 1736712227134,
    "page": 951,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MedicOneSystems/livewire-datatables",
      "stars": 1199,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3046875,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3857421875,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n# Ignore all test and documentation with \"export-ignore\".\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/.travis.yml        export-ignore\n/phpunit.xml.dist   export-ignore\n/.scrutinizer.yml   export-ignore\n/tests              export-ignore\n/.editorconfig      export-ignore\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0654296875,
          "content": "build\ncomposer.lock\ndocs\nvendor\ncoverage\n.DS_Store\n.vscode/\n.idea/\n"
        },
        {
          "name": ".phpunit.result.cache",
          "type": "blob",
          "size": 7.705078125,
          "content": "{\"version\":1,\"defects\":{\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnTest::it_returns_an_array_from_column\":3,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnTest::it_returns_an_array_from_raw\":3,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnTest::it_returns_width_property_from_column\":3},\"times\":{\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnSetTest::it_can_generate_an_array_of_columns_from_a_model\":0.127,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnSetTest::it_can_correctly_populate_the_columns_from_the_model with data set #0\":0.013,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnSetTest::it_can_correctly_populate_the_columns_from_the_model with data set #1\":0.012,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnSetTest::it_can_correctly_populate_the_columns_from_the_model with data set #2\":0.012,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnSetTest::it_can_correctly_populate_the_columns_from_the_model with data set #3\":0.012,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnSetTest::it_can_correctly_populate_the_columns_from_the_model with data set #4\":0.012,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnSetTest::it_can_correctly_populate_the_columns_from_the_model with data set #5\":0.013,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnSetTest::it_can_correctly_populate_the_columns_from_the_model with data set #6\":0.013,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnSetTest::it_can_correctly_populate_the_columns_from_the_model with data set #7\":0.012,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnSetTest::it_can_exclude_columns\":0.014,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnSetTest::it_can_include_columns\":0.012,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnSetTest::it_can_rename_columns\":0.011,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnTest::it_can_generate_a_column_from_a_table_column\":0.011,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnTest::it_can_generate_a_column_from_a_scope\":0.012,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnTest::it_can_generate_a_delete_column\":0.011,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnTest::it_sets_properties_and_parameters with data set #0\":0.011,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnTest::it_sets_properties_and_parameters with data set #1\":0.011,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnTest::it_sets_properties_and_parameters with data set #2\":0.011,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnTest::it_sets_properties_and_parameters with data set #3\":0.011,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnTest::it_sets_properties_and_parameters with data set #4\":0.012,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnTest::it_returns_an_array_from_column\":0.014,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnTest::it_returns_an_array_from_raw\":0.012,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\ColumnTest::it_returns_width_property_from_column\":0.011,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableClassTest::it_can_mount_using_the_class\":0.054,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableClassTest::it_can_set_a_default_sort\":0.019,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableClassTest::it_can_show_and_hide_a_column\":0.039,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableClassTest::it_can_order_results\":0.014,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableClassTest::it_can_filter_results_based_on_text\":0.026,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableClassTest::it_can_filter_results_based_on_boolean\":0.026,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableClassTest::it_can_filter_strings_as_a_boolean\":0.029,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableClassTest::it_can_filter_results_based_on_selects\":0.025,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableClassTest::it_can_filter_results_based_on_numbers\":0.059,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableQueryBuilderTest::it_creates_a_query_builder_for_base_columns\":0.013,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableQueryBuilderTest::it_creates_a_query_builder_for_has_one_relation_columns\":0.013,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableQueryBuilderTest::it_creates_a_where_query_for_a_has_one_column\":0.013,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableQueryBuilderTest::it_creates_a_query_builder_for_has_many_relation_columns\":0.014,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableQueryBuilderTest::it_creates_a_query_builder_for_has_many_relation_column_with_specific_aggregate\":0.014,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableQueryBuilderTest::it_creates_a_where_query_for_has_many_relation_columns\":0.013,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableQueryBuilderTest::it_creates_a_query_builder_for_belongs_to_relation_columns\":0.018,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableQueryBuilderTest::it_creates_a_where_query_for_belongs_to_relation_columns\":0.014,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableQueryBuilderTest::it_creates_a_query_builder_for_belongs_to_many_relation_columns\":0.016,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableQueryBuilderTest::it_creates_a__where_query_for_belongs_to_many_relation_columns\":0.013,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableTemplateTest::it_can_mount_from_the_default_template_with_a_model\":0.017,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableTemplateTest::the_header_can_be_hidden_with_a_property\":0.016,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableTemplateTest::the_pagination_bar_can_be_hidden_with_a_property\":0.016,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableTemplateTest::it_can_set_per_page_with_a_property\":0.023,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableTemplateTest::it_can_include_columns_from_a_property\":0.016,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableTemplateTest::it_can_exclude_columns_from_a_property\":0.017,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableTemplateTest::it_can_hide_columns_from_a_property\":0.021,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableTemplateTest::it_can_mark_columns_for_date_format_from_a_property\":0.017,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableTemplateTest::it_can_mark_columns_for_time_format_from_a_property\":0.018,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\LivewireDatatableTemplateTest::it_can_set_sort_from_a_property\":0.018,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\MakeDatatableCommandTest::component_is_created_by_make_command\":0.017,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\MakeDatatableCommandTest::dot_nested_component_is_created_by_make_command\":0.019,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\MakeDatatableCommandTest::forward_slash_nested_component_is_created_by_make_command\":0.016,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\MakeDatatableCommandTest::multiword_component_is_created_by_make_command\":0.014,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\MakeDatatableCommandTest::pascal_case_component_is_automatically_converted_by_make_command\":0.014,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\MakeDatatableCommandTest::snake_case_component_is_automatically_converted_by_make_command\":0.017,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\MakeDatatableCommandTest::snake_case_component_is_automatically_converted_by_make_command_on_nested_component\":0.018,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\MakeDatatableCommandTest::new_component_model_name_matches_option\":0.014,\"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\MakeDatatableCommandTest::a_component_is_not_created_with_a_reserved_class_name\":0.013}}"
        },
        {
          "name": ".scrutinizer.yml",
          "type": "blob",
          "size": 0.4951171875,
          "content": "filter:\n    excluded_paths: [tests/*]\n\nchecks:\n    php:\n        remove_extra_empty_lines: true\n        remove_php_closing_tag: true\n        remove_trailing_whitespace: true\n        fix_use_statements:\n            remove_unused: true\n            preserve_multiple: false\n            preserve_blanklines: true\n            order_alphabetically: true\n        fix_php_opening_tag: true\n        fix_linefeed: true\n        fix_line_ending: true\n        fix_identation_4spaces: true\n        fix_doc_comments: true\n\n"
        },
        {
          "name": ".styleci.yml",
          "type": "blob",
          "size": 0.1220703125,
          "content": "preset: laravel\n\nenabled:\n  - concat_with_spaces\n\ndisabled:\n  - concat_without_spaces\n  - single_class_element_per_statement\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.4306640625,
          "content": "language: php\n\nphp:\n  - 7.1\n  - 7.2\n  - 7.3\n\nenv:\n  matrix:\n    - COMPOSER_FLAGS=\"--prefer-lowest\"\n    - COMPOSER_FLAGS=\"\"\n\nbefore_script:\n  - travis_retry composer self-update\n  - travis_retry composer update ${COMPOSER_FLAGS} --no-interaction --prefer-source\n\nscript:\n  - vendor/bin/phpunit --coverage-text --coverage-clover=coverage.clover\n\nafter_script:\n  - php vendor/bin/ocular code-coverage:upload --format=php-clover coverage.clover\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.33203125,
          "content": "# Changelog\n\nAll notable changes to `livewire-datatables` will be documented in this file\n\n## 1.0.0 - 201X-XX-XX ( to be released in the future... )\n\n- initial release\n\n## 0.9.0 ( 2022-03-22 )\n\n- Breaking Change: 'unsortable' has been renamed to 'sortable', which is more intuitive. Please adjust your overwritten views, if any (thyseus).\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.90234375,
          "content": "# Contributing\n\nContributions are **welcome** and will be fully **credited**.\n\nPlease read and understand the contribution guide before creating an issue or pull request.\n\n## Etiquette\n\nThis project is open source, and as such, the maintainers give their free time to build and maintain the source code\nheld within. They make the code freely available in the hope that it will be of use to other developers. It would be\nextremely unfair for them to suffer abuse or anger for their hard work.\n\nPlease be considerate towards maintainers when raising issues or presenting pull requests. Let's show the\nworld that developers are civilized and selfless people.\n\nIt's the duty of the maintainer to ensure that all submissions to the project are of sufficient\nquality to benefit the project. Many developers have different skillsets, strengths, and weaknesses. Respect the maintainer's decision, and do not be upset or abusive if your submission is not used.\n\n## Viability\n\nWhen requesting or submitting new features, first consider whether it might be useful to others. Open\nsource projects are used by many developers, who may have entirely different needs to your own. Think about\nwhether or not your feature is likely to be used by other users of the project.\n\n## Procedure\n\nBefore filing an issue:\n\n- Attempt to replicate the problem, to ensure that it wasn't a coincidental incident.\n- Check to make sure your feature suggestion isn't already present within the project.\n- Check the pull requests tab to ensure that the bug doesn't have a fix in progress.\n- Check the pull requests tab to ensure that the feature isn't already in progress.\n\nBefore submitting a pull request:\n\n- Check the codebase to ensure that your feature doesn't already exist.\n- Check the pull requests to ensure that another person hasn't already submitted the feature or fix.\n\n## Requirements\n\nIf the project maintainer has any additional requirements, you will find them listed here.\n\n- **[PSR-2 Coding Standard](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md)** - The easiest way to apply the conventions is to install [PHP Code Sniffer](https://pear.php.net/package/PHP_CodeSniffer).\n\n- **Add tests!** - Your patch won't be accepted if it doesn't have tests.\n\n- **Document any change in behaviour** - Make sure the `README.md` and any other relevant documentation are kept up-to-date.\n\n- **Consider our release cycle** - We try to follow [SemVer v2.0.0](https://semver.org/). Randomly breaking public APIs is not an option.\n\n- **One pull request per feature** - If you want to do more than one thing, send multiple pull requests.\n\n- **Send coherent history** - Make sure each individual commit in your pull request is meaningful. If you had to make multiple intermediate commits while developing, please [squash them](https://www.git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Changing-Multiple-Commit-Messages) before submitting.\n\n**Happy coding**!\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.037109375,
          "content": "MIT License\n\nCopyright (c) Mark Salmon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 28.5048828125,
          "content": "# Livewire Datatables\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/mediconesystems/livewire-datatables.svg?style=flat-square)](https://packagist.org/packages/mediconesystems/livewire-datatables)\n[![Total Downloads](https://img.shields.io/packagist/dt/mediconesystems/livewire-datatables.svg?style=flat-square)](https://packagist.org/packages/mediconesystems/livewire-datatables)\n\n### Features\n- Use a model or query builder to supply data\n- Mutate and format columns using preset or custom callbacks\n- Sort data using column or computed column\n- Filter using booleans, times, dates, selects or free text\n- Create complex combined filters using the [complex query builder](#complex-query-builder)\n- Show / hide columns\n- Column groups\n- Mass Action (Bulk) Support\n\n## [Demo App Repo](https://github.com/MedicOneSystems/demo-livewire-datatables)\n\n![screenshot](resources/images/screenshot.png \"Screenshot\")\n\n## Requirements\n- [Laravel 7, 8 or 9](https://laravel.com/docs/9.x)\n- [Livewire](https://laravel-livewire.com/)\n- [Tailwind](https://tailwindcss.com/)\n- [Alpine JS](https://github.com/alpinejs/alpine)\n\n## Installation\n\nYou can install the package via composer:\n\n```bash\ncomposer require mediconesystems/livewire-datatables\n```\nIf you use laravel 9 first execute\n```bash\ncomposer require psr/simple-cache:^1.0 maatwebsite/excel\n```\n\n### Optional\nYou don't need to, but if you like you can publish the config file and blade template assets:\n```bash\nphp artisan vendor:publish --provider=\"Mediconesystems\\LivewireDatatables\\LivewireDatatablesServiceProvider\"\n```\nThis will enable you to modify the blade views and apply your own styling, the datatables views will be published to resources/livewire/datatables. The config file contains the default time and date formats used throughout\n> - This can be useful if you're using Purge CSS on your project, to make sure all the livewire-datatables classes get included\n\nSeveral of the built-in dynamic components use Alpine JS, so to remove flickers on page load, make sure you have\n```css\n[x-cloak] {\n    display: none;\n}\n```\nsomewhere in your CSS\n\n## Basic Usage\n\n- Use the ```livewire-datatable``` component in your blade view, and pass in a model:\n```html\n...\n\n<livewire:datatable model=\"App\\User\" name=\"all-users\" />\n\n...\n```\n\n## Template Syntax\n- There are many ways to modify the table by passing additional properties into the component:\n```html\n<livewire:datatable\n    model=\"App\\User\"\n    name=\"users\"\n    include=\"id, name, dob, created_at\"\n    dates=\"dob\"\n/>\n```\n\n*Attention*: Please note that having multiple datatables on the same page _or_ more than one datatable of the same\ntype on different pages needs to have a unique `name` attribute assigned to each one so they do not conflict with each\nother as in the example above.\n\n### Props\n| Property | Arguments | Result                                                                                                                                         | Example |\n|----|----|------------------------------------------------------------------------------------------------------------------------------------------------|----|\n|**model**|*String* full model name| Define the base model for the table                                                                                                            | ```model=\"App\\Post\"```|\n|**include**|*String\\| Array* of column definitions                                                                                                                   |specify columns to be shown in table, label can be specified by using \\| delimter | ```include=\"name, email, dob\\|Birth Date, role\"```|\n|**exclude**|*String\\| Array* of column definitions                                                                                                                   |columns are excluded from table| ```:exclude=\"['created_at', 'updated_at']\"```|\n|**hide**|*String\\| Array* of column definitions                                                                                                                   |columns are present, but start hidden|```hidden=\"email_verified_at\"```|\n|**dates**|*String\\| Array* of column definitions [ and optional format in \\                                                                                        | delimited string]|column values are formatted as per the default date format, or format can be included in string with \\| separator | ```:dates=\"['dob\\|lS F y', 'created_at']\"```|\n|**times**|*String\\| Array* of column definitions [optional format in \\                                                                                             | delimited string]|column values are formatted as per the default time format, or format can be included in string with \\| separator | ```'bedtime\\|g:i A'```|\n|**searchable**|*String\\| Array* of column names                                                                                                                         | Defines columns to be included in global search | ```searchable=\"name, email\"```|\n|**sort**|*String* of column definition [and optional 'asc' or 'desc' (default: 'desc') in \\| delimited string]                                                                                                                              |Specifies the column and direction for initial table sort. Default is column 0 descending | ```sort=\"name\\|asc\"```|\n|**hide-header**|*Boolean* default: *false*| The top row of the table including the column titles is removed if this is ```true```                                                          | |\n|**hide-pagination**|*Boolean* default: *false*| Pagination controls are removed if this is ```true```                                                                                          | |\n|**per-page**|*Integer* default: 10| Number of rows per page                                                                                                                        | ```per-page=\"20\"``` |\n|**exportable**|*Boolean*  default: *false*| Allows table to be exported                                                                                                                    | ```<livewire:datatable model=\"App/Post\" exportable />``` |\n|**hideable**| _String_ | gives ability to show/hide columns, accepts strings 'inline', 'buttons', or 'select'                                                           | ```<livewire:datatable model=\"App/Post\" hideable=\"inline\" />``` |\n|**buttonsSlot**| _String_ | blade view to be included immediately after the buttons at the top of the table in the component, which can therefore access public properties |  |\n|**beforeTableSlot**| _String_ | blade view to be included immediately before the table in the component, which can therefore access public properties                          |  |\n|**afterTableSlot**| _String_ | blade view to be included immediately after the table in the component, which can therefore access public properties                           | [demo](https://livewire-datatables.com/complex) |\n---\n\n\n## Component Syntax\n\n### Create a livewire component that extends ```Mediconesystems\\LivewireDatatables\\LivewireDatatable```\n> ```php artisan make:livewire-datatable foo``` --> 'app/Http/Livewire/Foo.php'\n\n> ```php artisan make:livewire-datatable tables.bar``` --> 'app/Http/Livewire/Tables/Bar.php'\n\n### Provide a datasource by declaring public property ```$model``` **OR** public method ```builder()``` that returns an instance of ```Illuminate\\Database\\Eloquent\\Builder```\n> ```php artisan make:livewire-datatable users-table --model=user``` --> 'app/Http/Livewire/UsersTable.php' with ```public $model = User::class```\n\n### Declare a public method ```columns``` that returns an array containing one or more ```Mediconesystems\\LivewireDatatables\\Column```\n\n## Columns\nColumns can be built using any of the static methods below, and then their attributes assigned using fluent method chains.\nThere are additional specific types of Column; ```NumberColumn```, ```DateColumn```, ```TimeColumn```, using the correct one for your datatype will enable type-specific formatting and filtering:\n\n| Class | Description |\n|---|---|\n|Column|Generic string-based column. Filter will be a text input|\n|NumberColumn| Number-based column. Filters will be a numeric range|\n|BooleanColumn| Values will be automatically formatted to a yes/no icon, filters will be yes/no|\n|DateColumn| Values will be automatically formatted to the default date format. Filters will be a date range|\n|TimeColumn| Values will be automatically formatted to the default time format. Filters will be a time range|\n|LabelColumn| Fixed header string (\"label\") with fixed content string in every row. No SQL is executed at all|\n___\n\n```php\nclass ComplexDemoTable extends LivewireDatatable\n{\n\n    public function builder()\n    {\n        return User::query();\n    }\n\n    public function columns()\n    {\n        return [\n            NumberColumn::name('id')\n                ->label('ID')\n                ->linkTo('job', 6),\n\n            BooleanColumn::name('email_verified_at')\n                ->label('Email Verified')\n                ->format()\n                ->filterable(),\n\n            Column::name('name')\n                ->defaultSort('asc')\n                ->group('group1')\n                ->searchable()\n                ->hideable()\n                ->filterable(),\n\n            Column::name('planet.name')\n                ->label('Planet')\n                ->group('group1')\n                ->searchable()\n                ->hideable()\n                ->filterable($this->planets),\n\n            // Column that counts every line from 1 upwards, independent of content\n            Column::index($this);\n\n            DateColumn::name('dob')\n                ->label('DOB')\n                ->group('group2')\n                ->filterable()\n                ->hide(),\n\n            (new LabelColumn())\n                ->label('My custom heading')\n                ->content('This fixed string appears in every row'),\n\n            NumberColumn::name('dollars_spent')\n                ->enableSummary(),\n        ];\n    }\n}\n```\n\n### Column Methods\n| Method | Arguments | Result | Example |\n|----|----|----|----|\n|_static_ **name**| *String* $column |Builds a column from column definition, which can be eith Eloquent or SQL dot notation (see below) |```Column::name('name')```|\n|_static_ **raw**| *String* $rawSqlStatement|Builds a column from raw SQL statement. Must include \"... AS _alias_\"|```Column::raw(\"CONCAT(ROUND(DATEDIFF(NOW(), users.dob) / planets.orbital_period, 1) AS `Native Age`\")```|\n|_static_ **callback**|*Array\\|String* $columns, *Closure\\|String* $callback| Passes the columns from the first argument into the callback to allow custom mutations. The callback can be a method on the table class, or inline | _(see below)_|\n|_static_ **scope**|*String* $scope, *String* $alias|Builds a column from a scope on the parent model|```Column::scope('selectLastLogin', 'Last Login')```|\n|_static_ **delete**|[*String* $primaryKey default: 'id']|Adds a column with a delete button, which will call ```$this->model::destroy($primaryKey)```|```Column::delete()```|\n|_static_ **checkbox**|[*String* $column default: 'id']|Adds a column with a checkbox. The component public property ```$selected``` will contain an array of the named column from checked rows, |```Column::checkbox()```|\n|**label**|*String* $name|Changes the display name of a column|```Column::name('id')->label('ID)```|\n|**group**|*String* $group|Assign the column to a group. Allows to toggle the visibility of all columns of a group at once|```Column::name('id')->group('my-group')```|\n|**format**|[*String* $format]|Formats the column value according to type. Dates/times will use the default format or the argument |```Column::name('email_verified_at')->filterable(),```|\n|**hide**| |Marks column to start as hidden|```Column::name('id')->hidden()```|\n|**sortBy**|*String\\|Expression* $column|Changes the query by which the column is sorted|```Column::name('dob')->sortBy('DATE_FORMAT(users.dob, \"%m%d%Y\")'),```|\n|**truncate**|[*Integer* $length (default: 16)]Truncates column to $length and provides full-text in a tooltip. Uses ```view('livewire-datatables::tooltip)```|```Column::name('biography)->truncate(30)```|\n|**linkTo**|*String* $model, [*Integer* $pad]|Replaces the value with a link to ```\"/$model/$value\"```. Useful for ID columns. Optional zero-padding. Uses ```view('livewire-datatables::link)```|```Column::name('id')->linkTo('user')```|\n|**link**|*String* $href, [*String* $slot]|Let the content of the column render as a link. You may use {{ }} syntax to fill the url with any attributes of the current row. Uses ```view('livewire-datatables::link)```|```Column::name('first_name')->link('/users/{{slug}}/edit', 'edit {{first_name}} {{last_name}}')```|\n|**round**|[*Integer* $precision (default: 0)]|Rounds value to given precision|```Column::name('age')->round()```|\n|**defaultSort**|[*String* $direction (default: 'desc')]|Marks the column as the default search column|```Column::name('name')->defaultSort('asc')```|\n|**searchable**| |Includes the column in the global search|```Column::name('name')->searchable()```|\n|**hideable**| |The user is able to toggle the visibility of this column|```Column::name('name')->hideable()```|\n|**filterable**|[*Array* $options], [*String* $filterScope]|Adds a filter to the column, according to Column type. If an array of options is passed it wil be used to populate a select input. If the column is a scope column then the name of the filter scope must also be passed|```Column::name('allegiance')->filterable(['Rebellion', 'Empire'])```|\n|**unwrap**| | Prevents the content of the column from being wrapped in multiple lines |```Column::name('oneliner')->unwrap()```|\n|**filterOn**|*String/Array* $statement|Allows you to specify a column name or sql statement upon which to perform the filter (must use SQL syntax, not Eloquent eg. ```'users.name'``` instead of ```'user.name'```). Useful if using a callback to modify the displayed values. Can pass a single string or array of strings which will be combined with ```OR```|```Column::callback(['name', 'allegiance'], function ($name, $allegiance) { return \"$name is allied to $allegiance\"; })->filterable(['Rebellion', 'Empire'])->filterOn('users.allegiance')```|\n|**view**|*String* $viewName| Passes the column value, whole row of values, and any additional parameters to a view template | _(see below)_|\n|**editable**| | Marks the column as editable | _(see below)_|\n|**alignCenter**| | Center-aligns column header _and_ contents |```Column::delete()->alignCenter()```|\n|**alignRight**| | Right-aligns column header _and_ contents |```Column::delete()->alignRight()```|\n|**contentAlignCenter**| | Center-aligns column contents |```Column::delete()->contentAlignCenter()```|\n|**contentAlignRight**| | Right-aligns column contents |```Column::delete()->contentAlignRight()```|\n|**headerAlignCenter**| | Center-aligns column header |```Column::delete()->headerAlignCenter()```|\n|**headerAlignRight**| | Right-aligns column header |```Column::delete()->headerAlignRight()```|\n|**editable**| | Marks the column as editable | _(see below)_|\n|**exportCallback**| Closure $callback | Reformats the result when exporting | _(see below)_ |\n|**excludeFromExport**| | Excludes the column from export |```Column::name('email')->excludeFromExport()```|\n|**unsortable**| | Prevents the column being sortable |```Column::name('email')->unsortable()```|\n___\n\n### Listener\nThe component will listen for the ```refreshLivewireDatatable``` event, which allows you to refresh the table from external components.\n\n### Eloquent Column Names\nColumns from Eloquent relations can be included using the normal eloquent dot notation, eg. ```planet.name```, Livewire Datatables will automatically add the necessary table joins to include the column. If the relationship is of a 'many' type (```HasMany```, ```BelongsToMany```, ```HasManyThrough```) then Livewire Datatables will create an aggregated subquery (which is much more efficient than a join and group. Thanks [@reinink](https://eloquent-course.reinink.ca/)). By default, the aggregate type will be ```count``` for a numeric column and ```group_concat``` for a string column, but this can be over-ridden using a colon delimeter;\n\n```php\nNumberColumn::name('students.age:sum')->label('Student Sum'),\n\nNumberColumn::name('students.age:avg')->label('Student Avg'),\n\nNumberColumn::name('students.age:min')->label('Student Min'),\n\nNumberColumn::name('students.age:max')->label('Student Max'),\n```\n\n### Column Groups\n\nWhen you have a very big table with a lot of columns, it is possible to create 'column groups' that allows the user to toggle the visibility of a whole group at once. Use `->group('NAME')` at any column to achieve this.\nYou can human readable labels and translations of your groups via the `groupLabels` property of your table:\n\n```php\nclass GroupDemoTable extends LivewireDatatable\n{\n    public $groupLabels = [\n         'group1' => 'app.translation_for_group_1'\n         'group2' => 'app.translation_for_group_2'\n    ];\n\npublic function columns()\n{\n    return [\n        Column::name('planets.name')\n            ->group('group1')\n            ->label('Planet'),\n\n        Column::name('planets.name')\n            ->group('group2')\n            ->label('Planet'),\n```\n\n### Summary row\nIf you need to summarize all cells of a specific column, you can use `enableSummary()`:\n\n```php\npublic function columns()\n{\n    return [\n        Column::name('dollars_spent')\n            ->label('Expenses in Dollar')\n            ->enableSummary(),\n\n        Column::name('euro_spent')\n            ->label('Expenses in Euro')\n            ->enableSummary(),\n```\n\n### Mass (Bulk) Action\n\nIf you want to be able to act upon several records at once, you can use the `buildActions()` method in your Table:\n\n```php\npublic function buildActions()\n    {\n        return [\n\n            Action::value('edit')->label('Edit Selected')->group('Default Options')->callback(function ($mode, $items) {\n                // $items contains an array with the primary keys of the selected items\n            }),\n\n            Action::value('update')->label('Update Selected')->group('Default Options')->callback(function ($mode, $items) {\n                // $items contains an array with the primary keys of the selected items\n            }),\n\n            Action::groupBy('Export Options', function () {\n                return [\n                    Action::value('csv')->label('Export CSV')->export('SalesOrders.csv'),\n                    Action::value('html')->label('Export HTML')->export('SalesOrders.html'),\n                    Action::value('xlsx')->label('Export XLSX')->export('SalesOrders.xlsx')->styles($this->exportStyles)->widths($this->exportWidths)\n                ];\n            }),\n        ];\n    }\n```\n\n### Mass Action Style\n\nIf you only have small style adjustments to the Bulk Action Dropdown you can adjust some settings here:\n\n```php\npublic function getExportStylesProperty()\n    {\n        return [\n            '1'  => ['font' => ['bold' => true]],\n            'B2' => ['font' => ['italic' => true]],\n            'C'  => ['font' => ['size' => 16]],\n        ];\n    }\n\n    public function getExportWidthsProperty()\n    {\n        return [\n            'A' => 55,\n            'B' => 45,\n        ];\n    }\n```\n\n### Pin Records\n\nIf you want to give your users the ability to pin specific records to be able to, for example, compare\nthem with each other, you can use the CanPinRecords trait. Ensure to have at least one Checkbox Column\nso the user can select records:\n\n```php\nuse Mediconesystems\\LivewireDatatables\\Traits\\CanPinRecords;\n\nclass RecordTable extends LivewireDatatable\n{\n    use CanPinRecords;\n\n    public $model = Record::class;\n\n    public function columns()\n    {\n        return [\n            Column::checkbox(),\n\n            // ...\n\n```\n\n### Custom column names\nIt is still possible to take full control over your table, you can define a ```builder``` method using whatever query you like, using your own joins, groups whatever, and then name your columns using your normal SQL syntax:\n\n```php\n\npublic function builder()\n{\n    return User::query()\n        ->leftJoin('planets', 'planets.id', 'users.planet_id')\n        ->leftJoin('moons', 'moons.id', 'planets.moon_id')\n        ->groupBy('users.id');\n}\n\npublic function columns()\n{\n    return [\n        NumberColumn::name('id')\n            ->filterable(),\n\n        Column::name('planets.name')\n            ->label('Planet'),\n\n        Column::raw('GROUP_CONCAT(planets.name SEPARATOR \" | \") AS `Moon`'),\n\n        ...\n}\n\n```\n\n### Callbacks\nCallbacks give you the freedom to perform any mutations you like on the data before displaying in the table.\n- The callbacks are performed on the paginated results of the database query, so shouldn't use a ton of memory\n- Callbacks will receive the chosen columns as their arguments.\n- Callbacks can be defined inline as below, or as public methods on the Datatable class, referenced by passing the name as a string as the second argument to the callback method.\n- If you want to format the result differently for export, use ```->exportCallback(Closure $callback)```.\n```php\nclass CallbackDemoTable extends LivewireDatatable\n{\n    public model = User::class\n\n    public function columns()\n    {\n        return [\n            Column::name('users.id'),\n\n            Column::name('users.dob')->format(),\n\n            Column::callback(['dob', 'signup_date'], function ($dob, $signupDate) {\n                $age = $signupDate->diffInYears($dob);\n                return $age > 18\n                    ? '<span class=\"text-red-500\">' . $age . '</span>'\n                    : $age;\n            })->exportCallback(function ($dob, $signupDate), {\n                return $age = $signupDate->diffInYears($dob);\n            }),\n\n            ...\n    }\n}\n```\n\n### Default Filters\n\nIf you want to have a default filter applied to your table, you can use the `defaultFilters` property. The `defaultFilter` should be an Array of column names and the default filter value to use for. When a persisted filter (`$this->persistFilters` is true and session values are available) is available, it will override the default filters.\n\nIn the example below, the table will by default be filtered by rows where the _deleted_at_ column is false. If the user has a persisted filter for the _deleted_at_ column, the default filter will be ignored.\n\n```php\nclass CallbackDemoTable extends LivewireDatatable\n{\n    public $defaultFilters = [\n        'deleted_at' => '0',\n    ];\n\n    public function builder()\n    {\n        return User::query()->withTrashed();\n    }\n\n    public function columns()\n    {\n        return [\n            Column::name('id'),\n            BooleanColumn::name('deleted_at')->filterable(),\n        ];\n    }\n}\n```\n\n### Views\nYou can specify that a column's output is piped directly into a separate blade view template.\n- Template is specified using ususal laravel view helper syntax\n- Views will receive the column's value as ```$value```, and the whole query row as ```$row```\n```php\nclass CallbackDemoTable extends LivewireDatatable\n{\n    public model = User::class\n\n    public function columns()\n    {\n        return [\n            Column::name('users.id'),\n\n            Column::name('users.dob')->view('tables.dateview'),\n\n            Column::name('users.signup_date')->format(),\n        ];\n    }\n```\n```html\n'tables/dateview.blade.php'\n<span class=\"mx-4 my-2 bg-pink-500\">\n    <x-date-thing :value=\"$value\" />\n</span>\n```\n\n### Editable Columns\nYou can mark a column as editable using ```editable```\nThis uses the ```view()``` method above to pass the data into an Alpine/Livewire compnent that can directly update the underlying database data. Requires the column to have ```column``` defined using standard Laravel naming. This is included as an example. Much more comprehensive custom editable columns with validation etc can be built using the callback or view methods above.\n\n```php\nclass EditableTable extends LivewireDatatable\n{\n\n    public $model = User::class;\n\n    public function columns()\n    {\n        return [\n            Column::name('id')\n                ->label('ID')\n                ->linkTo('job', 6),\n\n            Column::name('email')\n                ->editable(),\n\n            ...\n        ];\n    }\n}\n```\n\n# Complex Query Builder\nJust add ```$complex = true``` to your Datatable Class and all filterable columns will be available in the complex query builder.\n\n**Features**\n- Combine rules and groups of rules using AND/OR logic\n- Drag and drop rules around the interface\n\n![image](https://user-images.githubusercontent.com/7000886/128855344-25035758-ca90-42d2-bd19-518c9de45148.png)\n---\n**Persisting Queries** (Requires AlpineJS v3 with $persist plugin)\n- Add ```$persistComplexQuery = true``` to your class and queries will be stored in browser localstorage.\n- By default the localstorage key will be the class name. You can provide your own by setting the public property ```$persistKey``` or overriding ```getPersistKeyProperty()``` on the Datatable Class\n- eg: for user-specific persistence:\n\n```php\npublic function getPersistKeyProperty()\n{\n    return Auth::id() . '-' . parent::getPersistKeyProperty();\n}\n```\n---\n**Saving Queries**\n\nIf you want to permanently save queries you must provide 3 methods for adding, deleting and retrieving your saved queries using whatever logic you like:\n\n- ```public function saveQuery(String $name, Array $rules)```\n- ```public function deleteQuery(Int $id)```\n- ```public function getSavedQueries()```\n\n* In your save and delete methods, be sure to emit an ```updateSavedQueries``` livewire event and pass a fresh array of results (see example below)\n\n### Example:\nThis example shows saving queries using a conventional Laravel ComplexQuery model, that belongsTo a User\n\n```php\n/* Migration */\n\nclass CreateComplexQueriesTable extends Migration\n{\n    public function up()\n    {\n        Schema::create('complex_queries', function (Blueprint $table) {\n            $table->id();\n            $table->unsignedInteger('user_id');\n            $table->string('table');\n            $table->json('rules');\n            $table->string('name');\n            $table->timestamps();\n        });\n    }\n}\n\n\n/* Model */\n\nclass ComplexQuery extends BaseModel\n{\n    protected $casts = ['rules' => 'array'];\n\n    public function user()\n    {\n        return $this->belongsTo(User::class);\n    }\n}\n\n/* Datatable Class */\n\nclass TableWithSaving extends LivewireDatatable\n{\n    ...\n\n    public function saveQuery($name, $rules)\n    {\n        Auth::user()->complex_queries()->create([\n            'table' => $this->name,\n            'name' => $name,\n            'rules' => $rules\n        ]);\n\n        $this->emit('updateSavedQueries', $this->getSavedQueries());\n    }\n\n    public function deleteQuery($id)\n    {\n        ComplexQuery::destroy($id);\n\n        $this->emit('updateSavedQueries', $this->getSavedQueries());\n    }\n\n    public function getSavedQueries()\n    {\n        return Auth::user()->complex_queries()->where('table', $this->name)->get();\n    }\n\n    ...\n}\n```\n\n\n# Styling\nI know it's not cool to provide a package with tons of opionated markup and styling. Most other packages seem to have gone down the route of passing optional classes around as arguments or config variables. My take is that because this is just blade with tailwind, you can publish the templates and do whatever you like to them - it should be obvious where the Livewire and Alpine moving parts are.\n\nThere are methods for applying styles to rows and cells. ```rowClasses``` receives the ```$row``` and the [laravel loop variable](https://laravel.com/docs/8.x/blade#the-loop-variable) as parameters. ```cellClasses``` receives the ```$row``` and ```$column```\n\nFor example:\n```php\npublic function rowClasses($row, $loop)\n{\n    return 'divide-x divide-gray-100 text-sm text-gray-900 ' . ($this->rowIsSelected($row) ? 'bg-yellow-100' : ($row->{'car.model'} === 'Ferrari' ? 'bg-red-500' : ($loop->even ? 'bg-gray-100' : 'bg-gray-50')));\n}\n\npublic function cellClasses($row, $column)\n{\n    return 'text-sm ' . ($this->rowIsSelected($row) ? ' text-gray-900' : ($row->{'car.model'} === 'Ferrari' ? ' text-white' : ' text-gray-900'));\n}\n```\n\nYou can change the default CSS classes applied by the ```rowClasses``` and the ```cellClasses``` methods by changing ```default_classes``` in the ```livewire-datatables.php``` config file.\n\nYou could also override the render method in your table's class to provide different templates for different tables.\n\n\n## Credits and Influences\n- [Laravel](https://laravel.com/)\n- [Laravel Livewire](https://laravel-livewire.com/docs/quickstart/)\n- [Tailwind CSS](https://tailwindcss.com/)\n- [AlpineJS](https://github.com/alpinejs/alpine)\n- [livewire-tables by coryrose1](https://github.com/coryrose1/livewire-tables)\n- [laravel-livewire-datatables by kdion4891](https://github.com/kdion4891/laravel-livewire-tables)\n- [Jonathan Reinink\\'s Eloquent course](https://eloquent-course.reinink.ca/)\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.955078125,
          "content": "{\n    \"name\": \"mediconesystems/livewire-datatables\",\n    \"description\": \"Advanced datatables using Laravel, Livewire, Tailwind CSS and Alpine JS\",\n    \"keywords\": [\n        \"php\",\n        \"laravel\",\n        \"livewire\"\n    ],\n    \"homepage\": \"https://github.com/mediconesystems/livewire-datatables\",\n    \"license\": \"MIT\",\n    \"type\": \"library\",\n    \"authors\": [\n        {\n            \"name\": \"Mark Salmon\",\n            \"email\": \"mark.salmon@mediconesystems.com\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"Shane Burrell\",\n            \"email\": \"shane@shaneburrell.com\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"Herbert Maschke\",\n            \"email\": \"thyseus@pm.me\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.0\",\n        \"illuminate/support\": \"^7.0|^8.0|^9.0|^10.0\",\n        \"livewire/livewire\": \"^2.4.4\",\n        \"maatwebsite/excel\": \"^3.1\",\n        \"reedware/laravel-relation-joins\": \"^2.4|^3.0|^4.0\"\n    },\n    \"require-dev\": {\n        \"laravel/legacy-factories\": \"^1.0.4\",\n        \"orchestra/testbench\": \"^4.0|5.0|6.0|^7.0|^8.0\",\n        \"phpunit/phpunit\": \"^8.0|9.0|^9.5.10\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Mediconesystems\\\\LivewireDatatables\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Mediconesystems\\\\LivewireDatatables\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"scripts\": {\n        \"test\": \"vendor/bin/phpunit\",\n        \"test-coverage\": \"vendor/bin/phpunit --coverage-html coverage\"\n    },\n    \"config\": {\n        \"sort-packages\": true\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"Mediconesystems\\\\LivewireDatatables\\\\LivewireDatatablesServiceProvider\"\n            ],\n            \"aliases\": {\n                \"LivewireDatatables\": \"Mediconesystems\\\\LivewireDatatables\\\\LivewireDatatablesFacade\"\n            }\n        }\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.935546875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit bootstrap=\"vendor/autoload.php\" backupGlobals=\"false\" backupStaticAttributes=\"false\" colors=\"true\" verbose=\"true\" convertErrorsToExceptions=\"true\" convertNoticesToExceptions=\"true\" convertWarningsToExceptions=\"true\" processIsolation=\"false\" stopOnFailure=\"false\">\n    <testsuites>\n        <testsuite name=\"Test Suite\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist>\n            <directory suffix=\".php\">src/</directory>\n        </whitelist>\n    </filter>\n    <logging>\n        <log type=\"tap\" target=\"build/report.tap\"/>\n        <log type=\"junit\" target=\"build/report.junit.xml\"/>\n        <log type=\"coverage-html\" target=\"build/coverage\" charset=\"UTF-8\" yui=\"true\" highlight=\"true\"/>\n        <log type=\"coverage-text\" target=\"build/coverage.txt\"/>\n        <log type=\"coverage-clover\" target=\"build/logs/clover.xml\"/>\n    </logging>\n</phpunit>\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}