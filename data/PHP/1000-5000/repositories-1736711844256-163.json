{
  "metadata": {
    "timestamp": 1736711844256,
    "page": 163,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ThingEngineer/PHP-MySQLi-Database-Class",
      "stars": 3300,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0458984375,
          "content": "/tests/ export-ignore\n/index.php export-ignore\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.71875,
          "content": "Wrapper for a PHP MySQL class, which utilizes MySQLi and prepared statements.\nCopyright (C) 2013  Josh Campbell (ajillion)\n\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "MysqliDb.php",
          "type": "blob",
          "size": 73.0224609375,
          "content": "<?php\n/**\n * MysqliDb Class\n *\n * @category  Database Access\n * @package   MysqliDb\n * @author    Jeffery Way <jeffrey@jeffrey-way.com>\n * @author    Josh Campbell <jcampbell@ajillion.com>\n * @author    Alexander V. Butenko <a.butenka@gmail.com>\n * @copyright Copyright (c) 2010-2017\n * @license   http://opensource.org/licenses/gpl-3.0.html GNU Public License\n * @link      http://github.com/joshcam/PHP-MySQLi-Database-Class\n * @version   2.9.3\n */\n\nclass MysqliDb\n{\n\n    /**\n     * Static instance of self\n     *\n     * @var MysqliDb\n     */\n    protected static $_instance;\n\n    /**\n     * Table prefix\n     *\n     * @var string\n     */\n    public static $prefix = '';\n\n    /**\n     * MySQLi instances\n     *\n     * @var mysqli[]\n     */\n    protected $_mysqli = array();\n\n    /**\n     * The SQL query to be prepared and executed\n     *\n     * @var string\n     */\n    protected $_query;\n\n    /**\n     * The previously executed SQL query\n     *\n     * @var string\n     */\n    protected $_lastQuery;\n\n    /**\n     * The SQL query options required after SELECT, INSERT, UPDATE or DELETE\n     *\n     * @var array\n     */\n    protected $_queryOptions = array();\n\n    /**\n     * An array that holds where joins\n     *\n     * @var array\n     */\n    protected $_join = array();\n\n    /**\n     * An array that holds where conditions\n     *\n     * @var array\n     */\n    protected $_where = array();\n\n    /**\n     * An array that holds where join ands\n     *\n     * @var array\n     */\n    protected $_joinAnd = array();\n\n    /**\n     * An array that holds having conditions\n     *\n     * @var array\n     */\n    protected $_having = array();\n\n    /**\n     * Dynamic type list for order by condition value\n     *\n     * @var array\n     */\n    protected $_orderBy = array();\n\n    /**\n     * Dynamic type list for group by condition value\n     *\n     * @var array\n     */\n    protected $_groupBy = array();\n\n    /**\n     * Dynamic type list for temporary locking tables.\n     *\n     * @var array\n     */\n\tprotected $_tableLocks = array();\n\n    /**\n     * Variable which holds the current table lock method.\n     *\n     * @var string\n     */\n\tprotected $_tableLockMethod = \"READ\";\n\n    /**\n     * Dynamic array that holds a combination of where condition/table data value types and parameter references\n     *\n     * @var array\n     */\n    protected $_bindParams = array(''); // Create the empty 0 index\n\n    /**\n     * Variable which holds an amount of returned rows during get/getOne/select queries\n     *\n     * @var string\n     */\n    public $count = 0;\n\n    /**\n     * Variable which holds an amount of returned rows during get/getOne/select queries with withTotalCount()\n     *\n     * @var string\n     */\n    public $totalCount = 0;\n\n    /**\n     * Variable which holds last statement error\n     *\n     * @var string\n     */\n    protected $_stmtError;\n\n    /**\n     * Variable which holds last statement error code\n     *\n     * @var int\n     */\n    protected $_stmtErrno;\n\n    /**\n     * Is Subquery object\n     *\n     * @var bool\n     */\n    protected $isSubQuery = false;\n\n    /**\n     * Name of the auto increment column\n     *\n     * @var int\n     */\n    protected $_lastInsertId = null;\n\n    /**\n     * Column names for update when using onDuplicate method\n     *\n     * @var array\n     */\n    protected $_updateColumns = null;\n\n    /**\n     * Return type: 'array' to return results as array, 'object' as object\n     * 'json' as json string\n     *\n     * @var string\n     */\n    public $returnType = 'array';\n\n    /**\n     * Should join() results be nested by table\n     *\n     * @var bool\n     */\n    protected $_nestJoin = false;\n\n    /**\n     * Table name (with prefix, if used)\n     *\n     * @var string\n     */\n    private $_tableName = '';\n\n    /**\n     * FOR UPDATE flag\n     *\n     * @var bool\n     */\n    protected $_forUpdate = false;\n\n    /**\n     * LOCK IN SHARE MODE flag\n     *\n     * @var bool\n     */\n    protected $_lockInShareMode = false;\n\n    /**\n     * Key field for Map()'ed result array\n     *\n     * @var string\n     */\n    protected $_mapKey = null;\n\n    /**\n     * Variables for query execution tracing\n     */\n    protected $traceStartQ = 0;\n    protected $traceEnabled = false;\n    protected $traceStripPrefix = '';\n    public $trace = array();\n\n    /**\n     * Per page limit for pagination\n     *\n     * @var int\n     */\n\n    public $pageLimit = 20;\n    /**\n     * Variable that holds total pages count of last paginate() query\n     *\n     * @var int\n     */\n    public $totalPages = 0;\n\n    /**\n     * @var array connections settings [profile_name=>[same_as_contruct_args]]\n     */\n    protected $connectionsSettings = array();\n    /**\n     * @var string the name of a default (main) mysqli connection\n     */\n    public $defConnectionName = 'default';\n\n    public $autoReconnect = true;\n    protected $autoReconnectCount = 0;\n\n    /**\n     * @var bool Operations in transaction indicator\n     */\n    protected $_transaction_in_progress = false;\n\n    /**\n     * @param string $host\n     * @param string $username\n     * @param string $password\n     * @param string $db\n     * @param int    $port\n     * @param string $charset\n     * @param string $socket\n     */\n    public function __construct($host = null, $username = null, $password = null, $db = null, $port = null, $charset = 'utf8', $socket = null)\n    {\n        $isSubQuery = false;\n\n        // if params were passed as array\n        if (is_array($host)) {\n            foreach ($host as $key => $val) {\n                $$key = $val;\n            }\n        }\n\n        $this->addConnection('default', array(\n            'host' => $host,\n            'username' => $username,\n            'password' => $password,\n            'db' => $db,\n            'port' => $port,\n            'socket' => $socket,\n            'charset' => $charset\n        ));\n\n        if ($isSubQuery) {\n            $this->isSubQuery = true;\n            return;\n        }\n\n        if (isset($prefix)) {\n            $this->setPrefix($prefix);\n        }\n\n        self::$_instance = $this;\n    }\n\n    /**\n     * A method to connect to the database\n     *\n     * @param null|string $connectionName\n     *\n     * @throws Exception\n     * @return void\n     */\n    public function connect($connectionName = 'default')\n    {\n        if(!isset($this->connectionsSettings[$connectionName]))\n            throw new Exception('Connection profile not set');\n\n        $pro = $this->connectionsSettings[$connectionName];\n        $params = array_values($pro);\n        $charset = array_pop($params);\n\n        if ($this->isSubQuery) {\n            return;\n        }\n\n        if (empty($pro['host']) && empty($pro['socket'])) {\n            throw new Exception('MySQL host or socket is not set');\n        }\n\n        $mysqlic = new ReflectionClass('mysqli');\n        $mysqli = $mysqlic->newInstanceArgs($params);\n\n        if ($mysqli->connect_error) {\n            throw new Exception('Connect Error ' . $mysqli->connect_errno . ': ' . $mysqli->connect_error, $mysqli->connect_errno);\n        }\n\n        if (!empty($charset)) {\n            $mysqli->set_charset($charset);\n        }\n        $this->_mysqli[$connectionName] = $mysqli;\n    }\n\n    /**\n     * @throws Exception\n     */\n    public function disconnectAll()\n    {\n        foreach (array_keys($this->_mysqli) as $k) {\n            $this->disconnect($k);\n        }\n    }\n\n    /**\n     * Set the connection name to use in the next query\n     *\n     * @param string $name\n     *\n     * @return $this\n     * @throws Exception\n     */\n    public function connection($name)\n    {\n        if (!isset($this->connectionsSettings[$name]))\n            throw new Exception('Connection ' . $name . ' was not added.');\n\n        $this->defConnectionName = $name;\n        return $this;\n    }\n\n    /**\n     * A method to disconnect from the database\n     *\n     * @params string $connection connection name to disconnect\n     *\n     * @param string $connection\n     *\n     * @return void\n     */\n    public function disconnect($connection = 'default')\n    {\n        if (!isset($this->_mysqli[$connection]))\n            return;\n\n        $this->_mysqli[$connection]->close();\n        unset($this->_mysqli[$connection]);\n    }\n\n    /**\n     * Create & store at _mysqli new mysqli instance\n     *\n     * @param string $name\n     * @param array  $params\n     *\n     * @return $this\n     */\n    public function addConnection($name, array $params)\n    {\n        $this->connectionsSettings[$name] = array();\n        foreach (array('host', 'username', 'password', 'db', 'port', 'socket', 'charset') as $k) {\n            $prm = isset($params[$k]) ? $params[$k] : null;\n\n            if ($k == 'host') {\n                if (is_object($prm))\n                    $this->_mysqli[$name] = $prm;\n\n                if (!is_string($prm))\n                    $prm = null;\n            }\n            $this->connectionsSettings[$name][$k] = $prm;\n        }\n        return $this;\n    }\n\n    /**\n     * A method to get mysqli object or create it in case needed\n     *\n     * @return mysqli\n     * @throws Exception\n     */\n    public function mysqli()\n    {\n        if (!isset($this->_mysqli[$this->defConnectionName])) {\n            $this->connect($this->defConnectionName);\n        }\n        return $this->_mysqli[$this->defConnectionName];\n    }\n\n    /**\n     * A method of returning the static instance to allow access to the\n     * instantiated object from within another class.\n     * Inheriting this class would require reloading connection info.\n     *\n     * @uses $db = MySqliDb::getInstance();\n     *\n     * @return MysqliDb Returns the current instance.\n     */\n    public static function getInstance()\n    {\n        return self::$_instance;\n    }\n\n    /**\n     * Reset states after an execution\n     *\n     * @return MysqliDb Returns the current instance.\n     */\n    protected function reset()\n    {\n        if ($this->traceEnabled) {\n            $this->trace[] = array($this->_lastQuery, (microtime(true) - $this->traceStartQ), $this->_traceGetCaller());\n        }\n\n        $this->_where = array();\n        $this->_having = array();\n        $this->_join = array();\n        $this->_joinAnd = array();\n        $this->_orderBy = array();\n        $this->_groupBy = array();\n        $this->_bindParams = array(''); // Create the empty 0 index\n        $this->_query = null;\n        $this->_queryOptions = array();\n        $this->returnType = 'array';\n        $this->_nestJoin = false;\n        $this->_forUpdate = false;\n        $this->_lockInShareMode = false;\n        $this->_tableName = '';\n        $this->_lastInsertId = null;\n        $this->_updateColumns = null;\n        $this->_mapKey = null;\n        if(!$this->_transaction_in_progress ) {\n            $this->defConnectionName = 'default';\n        }\n        $this->autoReconnectCount = 0;\n        return $this;\n    }\n\n    /**\n     * Helper function to create dbObject with JSON return type\n     *\n     * @return MysqliDb\n     */\n    public function jsonBuilder()\n    {\n        $this->returnType = 'json';\n        return $this;\n    }\n\n    /**\n     * Helper function to create dbObject with array return type\n     * Added for consistency as that's default output type\n     *\n     * @return MysqliDb\n     */\n    public function arrayBuilder()\n    {\n        $this->returnType = 'array';\n        return $this;\n    }\n\n    /**\n     * Helper function to create dbObject with object return type.\n     *\n     * @return MysqliDb\n     */\n    public function objectBuilder()\n    {\n        $this->returnType = 'object';\n        return $this;\n    }\n\n    /**\n     * Method to set a prefix\n     *\n     * @param string $prefix Contains a table prefix\n     *\n     * @return MysqliDb\n     */\n    public function setPrefix($prefix = '')\n    {\n        self::$prefix = $prefix;\n        return $this;\n    }\n\n    /**\n     * Pushes a unprepared statement to the mysqli stack.\n     * WARNING: Use with caution.\n     * This method does not escape strings by default so make sure you'll never use it in production.\n     *\n     * @author Jonas Barascu\n     *\n     * @param  [[Type]] $query [[Description]]\n     *\n     * @return bool|mysqli_result\n     * @throws Exception\n     */\n\tprivate function queryUnprepared($query)\n\t{\n        // Execute query\n        $stmt = $this->mysqli()->query($query);\n\n        // Failed?\n        if ($stmt !== false)\n            return $stmt;\n\n        if ($this->mysqli()->errno === 2006 && $this->autoReconnect === true && $this->autoReconnectCount === 0) {\n            $this->connect($this->defConnectionName);\n            $this->autoReconnectCount++;\n            return $this->queryUnprepared($query);\n        }\n\n        throw new Exception(sprintf('Unprepared Query Failed, ERRNO: %u (%s)', $this->mysqli()->errno, $this->mysqli()->error), $this->mysqli()->errno);\n    }\n\n    /**\n     * Prefix add raw SQL query.\n     *\n     * @author Emre Emir <https://github.com/bejutassle>\n     * @param string $query      User-provided query to execute.\n     * @return string Contains the returned rows from the query.\n     */\n    public function rawAddPrefix($query){\n        $query = str_replace(PHP_EOL, '', $query);\n        $query = preg_replace('/\\s+/', ' ', $query);\n\tpreg_match_all(\"/(from|into|update|join|describe) [\\\\'\\\\´\\\\`]?([a-zA-Z0-9_-]+)[\\\\'\\\\´\\\\`]?/i\", $query, $matches);\n        list($from_table, $from, $table) = $matches;\n\n        // Check if there are matches\n        if (empty($table[0]))\n            return $query; \n\n        return str_replace($table[0], self::$prefix.$table[0], $query);\n    }\n\n    /**\n     * Execute raw SQL query.\n     *\n     * @param string $query      User-provided query to execute.\n     * @param array  $bindParams Variables array to bind to the SQL statement.\n     *\n     * @return array Contains the returned rows from the query.\n     * @throws Exception\n     */\n    public function rawQuery($query, $bindParams = null)\n    {\n        $query = $this->rawAddPrefix($query);\n        $params = array(''); // Create the empty 0 index\n        $this->_query = $query;\n        $stmt = $this->_prepareQuery();\n\n        if (is_array($bindParams) === true) {\n            foreach ($bindParams as $prop => $val) {\n                $params[0] .= $this->_determineType($val);\n                array_push($params, $bindParams[$prop]);\n            }\n\n            call_user_func_array(array($stmt, 'bind_param'), $this->refValues($params));\n        }\n\n        $stmt->execute();\n        $this->count = $stmt->affected_rows;\n        $this->_stmtError = $stmt->error;\n        $this->_stmtErrno = $stmt->errno;\n        $this->_lastQuery = $this->replacePlaceHolders($this->_query, $params);\n        $res = $this->_dynamicBindResults($stmt);\n        $this->reset();\n\n        return $res;\n    }\n\n    /**\n     * Helper function to execute raw SQL query and return only 1 row of results.\n     * Note that function do not add 'limit 1' to the query by itself\n     * Same idea as getOne()\n     *\n     * @param string $query      User-provided query to execute.\n     * @param array  $bindParams Variables array to bind to the SQL statement.\n     *\n     * @return array|null Contains the returned row from the query.\n     * @throws Exception\n     */\n    public function rawQueryOne($query, $bindParams = null)\n    {\n        $res = $this->rawQuery($query, $bindParams);\n        if (is_array($res) && isset($res[0])) {\n            return $res[0];\n        }\n\n        return null;\n    }\n\n    /**\n     * Helper function to execute raw SQL query and return only 1 column of results.\n     * If 'limit 1' will be found, then string will be returned instead of array\n     * Same idea as getValue()\n     *\n     * @param string $query      User-provided query to execute.\n     * @param array  $bindParams Variables array to bind to the SQL statement.\n     *\n     * @return mixed Contains the returned rows from the query.\n     * @throws Exception\n     */\n    public function rawQueryValue($query, $bindParams = null)\n    {\n        $res = $this->rawQuery($query, $bindParams);\n        if (!$res) {\n            return null;\n        }\n\n        $limit = preg_match('/limit\\s+1;?$/i', $query);\n        $key = key($res[0]);\n        if (isset($res[0][$key]) && $limit == true) {\n            return $res[0][$key];\n        }\n\n        $newRes = Array();\n        for ($i = 0; $i < $this->count; $i++) {\n            $newRes[] = $res[$i][$key];\n        }\n        return $newRes;\n    }\n\n    /**\n     * A method to perform select query\n     *\n     * @param string    $query   Contains a user-provided select query.\n     * @param int|array $numRows Array to define SQL limit in format Array ($offset, $count)\n     *\n     * @return array Contains the returned rows from the query.\n     * @throws Exception\n     */\n    public function query($query, $numRows = null)\n    {\n        $this->_query = $query;\n        $stmt = $this->_buildQuery($numRows);\n        $stmt->execute();\n        $this->_stmtError = $stmt->error;\n        $this->_stmtErrno = $stmt->errno;\n        $res = $this->_dynamicBindResults($stmt);\n        $this->reset();\n\n        return $res;\n    }\n\n    /**\n     * This method allows you to specify multiple (method chaining optional) options for SQL queries.\n     *\n     * @uses $MySqliDb->setQueryOption('name');\n     *\n     * @param string|array $options The options name of the query.\n     *\n     * @throws Exception\n     * @return MysqliDb\n     */\n    public function setQueryOption($options)\n    {\n        $allowedOptions = Array('ALL', 'DISTINCT', 'DISTINCTROW', 'HIGH_PRIORITY', 'STRAIGHT_JOIN', 'SQL_SMALL_RESULT',\n            'SQL_BIG_RESULT', 'SQL_BUFFER_RESULT', 'SQL_CACHE', 'SQL_NO_CACHE', 'SQL_CALC_FOUND_ROWS',\n            'LOW_PRIORITY', 'IGNORE', 'QUICK', 'MYSQLI_NESTJOIN', 'FOR UPDATE', 'LOCK IN SHARE MODE');\n\n        if (!is_array($options)) {\n            $options = Array($options);\n        }\n\n        foreach ($options as $option) {\n            $option = strtoupper($option);\n            if (!in_array($option, $allowedOptions)) {\n                throw new Exception('Wrong query option: ' . $option);\n            }\n\n            if ($option == 'MYSQLI_NESTJOIN') {\n                $this->_nestJoin = true;\n            } elseif ($option == 'FOR UPDATE') {\n                $this->_forUpdate = true;\n            } elseif ($option == 'LOCK IN SHARE MODE') {\n                $this->_lockInShareMode = true;\n            } else {\n                $this->_queryOptions[] = $option;\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Function to enable SQL_CALC_FOUND_ROWS in the get queries\n     *\n     * @return MysqliDb\n     * @throws Exception\n     */\n    public function withTotalCount()\n    {\n        $this->setQueryOption('SQL_CALC_FOUND_ROWS');\n        return $this;\n    }\n\n    /**\n     * A convenient SELECT * function.\n     *\n     * @param string       $tableName The name of the database table to work with.\n     * @param int|array    $numRows   Array to define SQL limit in format Array ($offset, $count)\n     *                                or only $count\n     * @param string|array $columns   Desired columns\n     *\n     * @return array|MysqliDb Contains the returned rows from the select query.\n     * @throws Exception\n     */\n    public function get($tableName, $numRows = null, $columns = '*')\n    {\n        if (empty($columns)) {\n            $columns = '*';\n        }\n\n        $column = is_array($columns) ? implode(', ', $columns) : $columns;\n\n        if (strpos($tableName, '.') === false) {\n            $this->_tableName = self::$prefix . $tableName;\n        } else {\n            $this->_tableName = $tableName;\n        }\n\n        $this->_query = 'SELECT ' . implode(' ', $this->_queryOptions) . ' ' .\n            $column . \" FROM \" . $this->_tableName;\n        $stmt = $this->_buildQuery($numRows);\n\n        if ($this->isSubQuery) {\n            return $this;\n        }\n\n        $stmt->execute();\n        $this->_stmtError = $stmt->error;\n        $this->_stmtErrno = $stmt->errno;\n        $res = $this->_dynamicBindResults($stmt);\n        $this->reset();\n\n        return $res;\n    }\n\n    /**\n     * A convenient SELECT * function to get one record.\n     *\n     * @param string       $tableName The name of the database table to work with.\n     * @param string|array $columns   Desired columns\n     *\n     * @return array Contains the returned rows from the select query.\n     * @throws Exception\n     */\n    public function getOne($tableName, $columns = '*')\n    {\n        $res = $this->get($tableName, 1, $columns);\n\n        if ($res instanceof MysqliDb) {\n            return $res;\n        } elseif (is_array($res) && isset($res[0])) {\n            return $res[0];\n        } elseif ($res) {\n            return $res;\n        }\n\n        return null;\n    }\n\n    /**\n     * A convenient SELECT COLUMN function to get a single column value from one row\n     *\n     * @param string    $tableName The name of the database table to work with.\n     * @param string    $column    The desired column\n     * @param int|null  $limit     Limit of rows to select. Use null for unlimited. 1 by default\n     *\n     * @return mixed    Contains the value of a returned column / array of values\n     * @throws Exception\n     */\n    public function getValue($tableName, $column, $limit = 1)\n    {\n        $res = $this->ArrayBuilder()->get($tableName, $limit, \"{$column} AS retval\");\n\n        if (!$res) {\n            return null;\n        }\n\n        if ($limit == 1) {\n            if (isset($res[0][\"retval\"])) {\n                return $res[0][\"retval\"];\n            }\n            return null;\n        }\n\n        $newRes = Array();\n        for ($i = 0; $i < $this->count; $i++) {\n            $newRes[] = $res[$i]['retval'];\n        }\n        return $newRes;\n    }\n\n    /**\n     * Insert method to add new row\n     *\n     * @param string $tableName  The name of the table.\n     * @param array  $insertData Data containing information for inserting into the DB.\n     *\n     * @return bool Boolean indicating whether the insert query was completed successfully.\n     * @throws Exception\n     */\n    public function insert($tableName, $insertData)\n    {\n        return $this->_buildInsert($tableName, $insertData, 'INSERT');\n    }\n\n    /**\n     * Insert method to add several rows at once\n     *\n     * @param string $tableName       The name of the table.\n     * @param array  $multiInsertData Two-dimensional Data-array containing information for inserting into the DB.\n     * @param array  $dataKeys        Optional Table Key names, if not set in insertDataSet.\n     *\n     * @return bool|array Boolean indicating the insertion failed (false), else return id-array ([int])\n     * @throws Exception\n     */\n    public function insertMulti($tableName, array $multiInsertData, array $dataKeys = null)\n    {\n        // only auto-commit our inserts, if no transaction is currently running\n        $autoCommit = (isset($this->_transaction_in_progress) ? !$this->_transaction_in_progress : true);\n        $ids = array();\n\n        if($autoCommit) {\n            $this->startTransaction();\n        }\n\n        foreach ($multiInsertData as $insertData) {\n            if($dataKeys !== null) {\n                // apply column-names if given, else assume they're already given in the data\n                $insertData = array_combine($dataKeys, $insertData);\n            }\n\n            $id = $this->insert($tableName, $insertData);\n            if(!$id) {\n                if($autoCommit) {\n                    $this->rollback();\n                }\n                return false;\n            }\n            $ids[] = $id;\n        }\n\n        if($autoCommit) {\n            $this->commit();\n        }\n\n        return $ids;\n    }\n\n    /**\n     * Replace method to add new row\n     *\n     * @param string $tableName  The name of the table.\n     * @param array  $insertData Data containing information for inserting into the DB.\n     *\n     * @return bool Boolean indicating whether the insert query was completed successfully.\n     * @throws Exception\n     */\n    public function replace($tableName, $insertData)\n    {\n        return $this->_buildInsert($tableName, $insertData, 'REPLACE');\n    }\n\n    /**\n     * A convenient function that returns TRUE if exists at least an element that\n     * satisfy the where condition specified calling the \"where\" method before this one.\n     *\n     * @param string $tableName The name of the database table to work with.\n     *\n     * @return bool\n     * @throws Exception\n     */\n    public function has($tableName)\n    {\n        $this->getOne($tableName, '1');\n        return $this->count >= 1;\n    }\n\n    /**\n     * Update query. Be sure to first call the \"where\" method.\n     *\n     * @param string $tableName The name of the database table to work with.\n     * @param array  $tableData Array of data to update the desired row.\n     * @param int    $numRows   Limit on the number of rows that can be updated.\n     *\n     * @return bool\n     * @throws Exception\n     */\n    public function update($tableName, $tableData, $numRows = null)\n    {\n        if ($this->isSubQuery) {\n            return;\n        }\n\n        $this->_query = \"UPDATE \" . self::$prefix . $tableName;\n\n        $stmt = $this->_buildQuery($numRows, $tableData);\n        $status = $stmt->execute();\n        $this->reset();\n        $this->_stmtError = $stmt->error;\n        $this->_stmtErrno = $stmt->errno;\n        $this->count = $stmt->affected_rows;\n\n        return $status;\n    }\n\n    /**\n     * Delete query. Call the \"where\" method first.\n     *\n     * @param string    $tableName   The name of the database table to work with.\n     * @param int|array $numRows     Array to define SQL limit in format Array ($offset, $count)\n     *                               or only $count\n     *\n     * @return bool Indicates success. 0 or 1.\n     * @throws Exception\n     */\n    public function delete($tableName, $numRows = null)\n    {\n        if ($this->isSubQuery) {\n            return;\n        }\n\n        $table = self::$prefix . $tableName;\n\n        if (count($this->_join)) {\n            $this->_query = \"DELETE \" . preg_replace('/.* (.*)/', '$1', $table) . \" FROM \" . $table;\n        } else {\n            $this->_query = \"DELETE FROM \" . $table;\n        }\n\n        $stmt = $this->_buildQuery($numRows);\n        $stmt->execute();\n        $this->_stmtError = $stmt->error;\n        $this->_stmtErrno = $stmt->errno;\n        $this->count = $stmt->affected_rows;\n        $this->reset();\n\n        return ($stmt->affected_rows > -1);\t//\t-1 indicates that the query returned an error\n    }\n\n    /**\n     * This method allows you to specify multiple (method chaining optional) AND WHERE statements for SQL queries.\n     *\n     * @uses $MySqliDb->where('id', 7)->where('title', 'MyTitle');\n     *\n     * @param string $whereProp  The name of the database field.\n     * @param mixed  $whereValue The value of the database field.\n     * @param string $operator   Comparison operator. Default is =\n     * @param string $cond       Condition of where statement (OR, AND)\n     *\n     * @return MysqliDb\n     */\n    public function where($whereProp, $whereValue = 'DBNULL', $operator = '=', $cond = 'AND')\n    {\n        if (count($this->_where) == 0) {\n            $cond = '';\n        }\n\n        $this->_where[] = array($cond, $whereProp, $operator, $whereValue);\n        return $this;\n    }\n\n    /**\n     * This function store update column's name and column name of the\n     * autoincrement column\n     *\n     * @param array  $updateColumns Variable with values\n     * @param string $lastInsertId  Variable value\n     *\n     * @return MysqliDb\n     */\n    public function onDuplicate($updateColumns, $lastInsertId = null)\n    {\n        $this->_lastInsertId = $lastInsertId;\n        $this->_updateColumns = $updateColumns;\n        return $this;\n    }\n\n    /**\n     * This method allows you to specify multiple (method chaining optional) OR WHERE statements for SQL queries.\n     *\n     * @uses $MySqliDb->orWhere('id', 7)->orWhere('title', 'MyTitle');\n     *\n     * @param string $whereProp  The name of the database field.\n     * @param mixed  $whereValue The value of the database field.\n     * @param string $operator   Comparison operator. Default is =\n     *\n     * @return MysqliDb\n     */\n    public function orWhere($whereProp, $whereValue = 'DBNULL', $operator = '=')\n    {\n        return $this->where($whereProp, $whereValue, $operator, 'OR');\n    }\n\n    /**\n     * This method allows you to specify multiple (method chaining optional) AND HAVING statements for SQL queries.\n     *\n     * @uses $MySqliDb->having('SUM(tags) > 10')\n     *\n     * @param string $havingProp  The name of the database field.\n     * @param mixed  $havingValue The value of the database field.\n     * @param string $operator    Comparison operator. Default is =\n     *\n     * @param string $cond\n     *\n     * @return MysqliDb\n     */\n\n    public function having($havingProp, $havingValue = 'DBNULL', $operator = '=', $cond = 'AND')\n    {\n        // forkaround for an old operation api\n        if (is_array($havingValue) && ($key = key($havingValue)) != \"0\") {\n            $operator = $key;\n            $havingValue = $havingValue[$key];\n        }\n\n        if (count($this->_having) == 0) {\n            $cond = '';\n        }\n\n        $this->_having[] = array($cond, $havingProp, $operator, $havingValue);\n        return $this;\n    }\n\n    /**\n     * This method allows you to specify multiple (method chaining optional) OR HAVING statements for SQL queries.\n     *\n     * @uses $MySqliDb->orHaving('SUM(tags) > 10')\n     *\n     * @param string $havingProp  The name of the database field.\n     * @param mixed  $havingValue The value of the database field.\n     * @param string $operator    Comparison operator. Default is =\n     *\n     * @return MysqliDb\n     */\n    public function orHaving($havingProp, $havingValue = null, $operator = null)\n    {\n        return $this->having($havingProp, $havingValue, $operator, 'OR');\n    }\n\n    /**\n     * This method allows you to concatenate joins for the final SQL statement.\n     *\n     * @uses $MySqliDb->join('table1', 'field1 <> field2', 'LEFT')\n     *\n     * @param string $joinTable     The name of the table.\n     * @param string $joinCondition the condition.\n     * @param string $joinType      'LEFT', 'INNER' etc.\n     *\n     * @throws Exception\n     * @return MysqliDb\n     */\n    public function join($joinTable, $joinCondition, $joinType = '')\n    {\n        $allowedTypes = array('LEFT', 'RIGHT', 'OUTER', 'INNER', 'LEFT OUTER', 'RIGHT OUTER', 'NATURAL');\n        $joinType = strtoupper(trim($joinType));\n\n        if ($joinType && !in_array($joinType, $allowedTypes)) {\n            throw new Exception('Wrong JOIN type: ' . $joinType);\n        }\n\n        if (!is_object($joinTable)) {\n            $joinTable = self::$prefix . $joinTable;\n        }\n\n        $this->_join[] = Array($joinType, $joinTable, $joinCondition);\n\n        return $this;\n    }\n\n\n    /**\n     * This is a basic method which allows you to import raw .CSV data into a table\n     * Please check out http://dev.mysql.com/doc/refman/5.7/en/load-data.html for a valid .csv file.\n     *\n     * @author Jonas Barascu (Noneatme)\n     *\n     * @param string $importTable    The database table where the data will be imported into.\n     * @param string $importFile     The file to be imported. Please use double backslashes \\\\ and make sure you\n     * @param string $importSettings An Array defining the import settings as described in the README.md\n     *\n     * @return boolean\n     * @throws Exception\n     */\n\tpublic function loadData($importTable, $importFile, $importSettings = null)\n    {\n\t\t// We have to check if the file exists\n\t\tif (!file_exists($importFile)) {\n\t\t\t// Throw an exception\n\t\t\tthrow new Exception(\"importCSV -> importFile \" . $importFile . \" does not exists!\");\n\t\t}\n\n\t\t// Define the default values\n\t\t// We will merge it later\n\t\t$settings = Array(\"fieldChar\" => ';', \"lineChar\" => PHP_EOL, \"linesToIgnore\" => 1);\n\n\t\t// Check the import settings\n\t\tif (gettype($importSettings) == \"array\") {\n\t\t\t// Merge the default array with the custom one\n\t\t\t$settings = array_merge($settings, $importSettings);\n\t\t}\n\n\t\t// Add the prefix to the import table\n\t\t$table = self::$prefix . $importTable;\n\n\t\t// Add 1 more slash to every slash so maria will interpret it as a path\n\t\t$importFile = str_replace(\"\\\\\", \"\\\\\\\\\", $importFile);\n\n\t\t// Switch between LOAD DATA and LOAD DATA LOCAL\n\t\t$loadDataLocal = isset($settings[\"loadDataLocal\"]) ? 'LOCAL' : '';\n\n\t\t// Build SQL Syntax\n\t\t$sqlSyntax = sprintf('LOAD DATA %s INFILE \\'%s\\' INTO TABLE %s',\n\t\t\t$loadDataLocal, $importFile, $table);\n\n\t\t// FIELDS\n\t\t$sqlSyntax .= sprintf(' FIELDS TERMINATED BY \\'%s\\'', $settings[\"fieldChar\"]);\n\t\tif (isset($settings[\"fieldEnclosure\"])) {\n\t\t\t$sqlSyntax .= sprintf(' ENCLOSED BY \\'%s\\'', $settings[\"fieldEnclosure\"]);\n\t\t}\n\n\t\t// LINES\n\t\t$sqlSyntax .= sprintf(' LINES TERMINATED BY \\'%s\\'', $settings[\"lineChar\"]);\n\t\tif (isset($settings[\"lineStarting\"])) {\n\t\t\t$sqlSyntax .= sprintf(' STARTING BY \\'%s\\'', $settings[\"lineStarting\"]);\n\t\t}\n\n\t\t// IGNORE LINES\n\t\t$sqlSyntax .= sprintf(' IGNORE %d LINES', $settings[\"linesToIgnore\"]);\n\n\t\t// Execute the query unprepared because LOAD DATA only works with unprepared statements.\n\t\t$result = $this->queryUnprepared($sqlSyntax);\n\n\t\t// Are there rows modified?\n\t\t// Let the user know if the import failed / succeeded\n\t\treturn (bool) $result;\n\t}\n\n    /**\n     * This method is useful for importing XML files into a specific table.\n     * Check out the LOAD XML syntax for your MySQL server.\n     *\n     * @author Jonas Barascu\n     *\n     * @param  string $importTable    The table in which the data will be imported to.\n     * @param  string $importFile     The file which contains the .XML data.\n     * @param  string $importSettings An Array defining the import settings as described in the README.md\n     *\n     * @return boolean Returns true if the import succeeded, false if it failed.\n     * @throws Exception\n     */\n\tpublic function loadXml($importTable, $importFile, $importSettings = null)\n\t{\n\t\t// We have to check if the file exists\n\t\tif(!file_exists($importFile)) {\n\t\t\t// Does not exists\n\t\t\tthrow new Exception(\"loadXml: Import file does not exists\");\n\t\t\treturn;\n\t\t}\n\n\t\t// Create default values\n\t\t$settings \t\t\t= Array(\"linesToIgnore\" => 0);\n\n\t\t// Check the import settings\n\t\tif(gettype($importSettings) == \"array\") {\n\t\t\t$settings = array_merge($settings, $importSettings);\n\t\t}\n\n\t\t// Add the prefix to the import table\n\t\t$table = self::$prefix . $importTable;\n\n\t\t// Add 1 more slash to every slash so maria will interpret it as a path\n\t\t$importFile = str_replace(\"\\\\\", \"\\\\\\\\\", $importFile);\n\n\t\t// Build SQL Syntax\n\t\t$sqlSyntax = sprintf('LOAD XML INFILE \\'%s\\' INTO TABLE %s',\n\t\t\t\t\t\t\t\t $importFile, $table);\n\n\t\t// FIELDS\n\t\tif(isset($settings[\"rowTag\"])) {\n\t\t\t$sqlSyntax .= sprintf(' ROWS IDENTIFIED BY \\'%s\\'', $settings[\"rowTag\"]);\n\t\t}\n\n\t\t// IGNORE LINES\n\t\t$sqlSyntax .= sprintf(' IGNORE %d LINES', $settings[\"linesToIgnore\"]);\n\n\t\t// Exceute the query unprepared because LOAD XML only works with unprepared statements.\n\t\t$result = $this->queryUnprepared($sqlSyntax);\n\n\t\t// Are there rows modified?\n\t\t// Let the user know if the import failed / succeeded\n\t\treturn (bool) $result;\n\t}\n\n    /**\n     * This method allows you to specify multiple (method chaining optional) ORDER BY statements for SQL queries.\n     *\n     * @uses $MySqliDb->orderBy('id', 'desc')->orderBy('name', 'desc', '^[a-z]')->orderBy('name', 'desc');\n     *\n     * @param string $orderByField         The name of the database field.\n     * @param string $orderbyDirection\n     * @param mixed  $customFieldsOrRegExp Array with fieldset for ORDER BY FIELD() ordering or string with regular expression for ORDER BY REGEXP ordering\n     *\n     * @return MysqliDb\n     * @throws Exception\n     */\n    public function orderBy($orderByField, $orderbyDirection = \"DESC\", $customFieldsOrRegExp = null)\n    {\n        $allowedDirection = Array(\"ASC\", \"DESC\");\n        $orderbyDirection = strtoupper(trim($orderbyDirection));\n        $orderByField = preg_replace(\"/[^ -a-z0-9\\.\\(\\),_`\\*\\'\\\"]+/i\", '', $orderByField);\n\n        // Add table prefix to orderByField if needed.\n        //FIXME: We are adding prefix only if table is enclosed into `` to distinguish aliases\n        // from table names\n        $orderByField = preg_replace('/(\\`)([`a-zA-Z0-9_]*\\.)/', '\\1' . self::$prefix . '\\2', $orderByField);\n\n\n        if (empty($orderbyDirection) || !in_array($orderbyDirection, $allowedDirection)) {\n            throw new Exception('Wrong order direction: ' . $orderbyDirection);\n        }\n\n        if (is_array($customFieldsOrRegExp)) {\n            foreach ($customFieldsOrRegExp as $key => $value) {\n                $customFieldsOrRegExp[$key] = preg_replace(\"/[^\\x80-\\xff-a-z0-9\\.\\(\\),_` ]+/i\", '', $value);\n            }\n            $orderByField = 'FIELD (' . $orderByField . ', \"' . implode('\",\"', $customFieldsOrRegExp) . '\")';\n        }elseif(is_string($customFieldsOrRegExp)){\n\t    $orderByField = $orderByField . \" REGEXP '\" . $customFieldsOrRegExp . \"'\";\n\t}elseif($customFieldsOrRegExp !== null){\n\t    throw new Exception('Wrong custom field or Regular Expression: ' . $customFieldsOrRegExp);\n\t}\n\n        $this->_orderBy[$orderByField] = $orderbyDirection;\n        return $this;\n    }\n\n    /**\n     * This method allows you to specify multiple (method chaining optional) GROUP BY statements for SQL queries.\n     *\n     * @uses $MySqliDb->groupBy('name');\n     *\n     * @param string $groupByField The name of the database field.\n     *\n     * @return MysqliDb\n     */\n    public function groupBy($groupByField)\n    {\n        $groupByField = preg_replace(\"/[^-a-z0-9\\.\\(\\),_\\* <>=!]+/i\", '', $groupByField);\n\n        $this->_groupBy[] = $groupByField;\n        return $this;\n    }\n\n\n    /**\n     * This method sets the current table lock method.\n     *\n     * @author Jonas Barascu\n     *\n     * @param  string $method The table lock method. Can be READ or WRITE.\n     *\n     * @throws Exception\n     * @return MysqliDb\n     */\n\tpublic function setLockMethod($method)\n\t{\n\t\t// Switch the uppercase string\n\t\tswitch(strtoupper($method)) {\n\t\t\t// Is it READ or WRITE?\n\t\t\tcase \"READ\" || \"WRITE\":\n\t\t\t\t// Succeed\n\t\t\t\t$this->_tableLockMethod = $method;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// Else throw an exception\n\t\t\t\tthrow new Exception(\"Bad lock type: Can be either READ or WRITE\");\n\t\t\t\tbreak;\n\t\t}\n\t\treturn $this;\n\t}\n\n    /**\n     * Locks a table for R/W action.\n     *\n     * @author Jonas Barascu\n     *\n     * @param string|array $table The table to be locked. Can be a table or a view.\n     *\n     * @return bool if succeeded;\n     * @throws Exception\n     */\n\tpublic function lock($table)\n\t{\n\t\t// Main Query\n\t\t$this->_query = \"LOCK TABLES\";\n\n\t\t// Is the table an array?\n\t\tif(gettype($table) == \"array\") {\n\t\t\t// Loop trough it and attach it to the query\n\t\t\tforeach($table as $key => $value) {\n\t\t\t\tif(gettype($value) == \"string\") {\n\t\t\t\t\tif($key > 0) {\n\t\t\t\t\t\t$this->_query .= \",\";\n\t\t\t\t\t}\n\t\t\t\t\t$this->_query .= \" \".self::$prefix.$value.\" \".$this->_tableLockMethod;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\t// Build the table prefix\n\t\t\t$table = self::$prefix . $table;\n\n\t\t\t// Build the query\n\t\t\t$this->_query = \"LOCK TABLES \".$table.\" \".$this->_tableLockMethod;\n\t\t}\n\n\t\t// Execute the query unprepared because LOCK only works with unprepared statements.\n\t\t$result = $this->queryUnprepared($this->_query);\n        $errno  = $this->mysqli()->errno;\n\n\t\t// Reset the query\n\t\t$this->reset();\n\n\t\t// Are there rows modified?\n\t\tif($result) {\n\t\t\t// Return true\n\t\t\t// We can't return ourself because if one table gets locked, all other ones get unlocked!\n\t\t\treturn true;\n\t\t}\n\t\t// Something went wrong\n\t\telse {\n\t\t\tthrow new Exception(\"Locking of table \".$table.\" failed\", $errno);\n\t\t}\n\n\t\t// Return the success value\n\t\treturn false;\n\t}\n\n    /**\n     * Unlocks all tables in a database.\n     * Also commits transactions.\n     *\n     * @author Jonas Barascu\n     * @return MysqliDb\n     * @throws Exception\n     */\n\tpublic function unlock()\n\t{\n\t\t// Build the query\n\t\t$this->_query = \"UNLOCK TABLES\";\n\n\t\t// Execute the query unprepared because UNLOCK and LOCK only works with unprepared statements.\n\t\t$result = $this->queryUnprepared($this->_query);\n        $errno  = $this->mysqli()->errno;\n\n\t\t// Reset the query\n\t\t$this->reset();\n\n\t\t// Are there rows modified?\n\t\tif($result) {\n\t\t\t// return self\n\t\t\treturn $this;\n\t\t}\n\t\t// Something went wrong\n\t\telse {\n\t\t\tthrow new Exception(\"Unlocking of tables failed\", $errno);\n\t\t}\n\n\n\t\t// Return self\n\t\treturn $this;\n\t}\n\n\n    /**\n     * This methods returns the ID of the last inserted item\n     *\n     * @return int The last inserted item ID.\n     * @throws Exception\n     */\n    public function getInsertId()\n    {\n        return $this->mysqli()->insert_id;\n    }\n\n    /**\n     * Escape harmful characters which might affect a query.\n     *\n     * @param string $str The string to escape.\n     *\n     * @return string The escaped string.\n     * @throws Exception\n     */\n    public function escape($str)\n    {\n        return $this->mysqli()->real_escape_string($str);\n    }\n\n    /**\n     * Method to call mysqli->ping() to keep unused connections open on\n     * long-running scripts, or to reconnect timed out connections (if php.ini has\n     * global mysqli.reconnect set to true). Can't do this directly using object\n     * since _mysqli is protected.\n     *\n     * @return bool True if connection is up\n     * @throws Exception\n     */\n    public function ping()\n    {\n        return $this->mysqli()->ping();\n    }\n\n    /**\n     * This method is needed for prepared statements. They require\n     * the data type of the field to be bound with \"i\" s\", etc.\n     * This function takes the input, determines what type it is,\n     * and then updates the param_type.\n     *\n     * @param mixed $item Input to determine the type.\n     *\n     * @return string The joined parameter types.\n     */\n    protected function _determineType($item)\n    {\n        switch (gettype($item)) {\n            case 'NULL':\n            case 'string':\n                return 's';\n                break;\n\n            case 'boolean':\n            case 'integer':\n                return 'i';\n                break;\n\n            case 'blob':\n                return 'b';\n                break;\n\n            case 'double':\n                return 'd';\n                break;\n        }\n        return '';\n    }\n\n    /**\n     * Helper function to add variables into bind parameters array\n     *\n     * @param string Variable value\n     */\n    protected function _bindParam($value)\n    {\n        $this->_bindParams[0] .= $this->_determineType($value);\n        array_push($this->_bindParams, $value);\n    }\n\n    /**\n     * Helper function to add variables into bind parameters array in bulk\n     *\n     * @param array $values Variable with values\n     */\n    protected function _bindParams($values)\n    {\n        foreach ($values as $value) {\n            $this->_bindParam($value);\n        }\n    }\n\n    /**\n     * Helper function to add variables into bind parameters array and will return\n     * its SQL part of the query according to operator in ' $operator ?' or\n     * ' $operator ($subquery) ' formats\n     *\n     * @param string $operator\n     * @param mixed  $value Variable with values\n     *\n     * @return string\n     */\n    protected function _buildPair($operator, $value)\n    {\n        if (!is_object($value)) {\n            $this->_bindParam($value);\n            return ' ' . $operator . ' ? ';\n        }\n\n        $subQuery = $value->getSubQuery();\n        $this->_bindParams($subQuery['params']);\n\n        return \" \" . $operator . \" (\" . $subQuery['query'] . \") \" . $subQuery['alias'];\n    }\n\n    /**\n     * Internal function to build and execute INSERT/REPLACE calls\n     *\n     * @param string $tableName  The name of the table.\n     * @param array  $insertData Data containing information for inserting into the DB.\n     * @param string $operation  Type of operation (INSERT, REPLACE)\n     *\n     * @return bool Boolean indicating whether the insert query was completed successfully.\n     * @throws Exception\n     */\n    private function _buildInsert($tableName, $insertData, $operation)\n    {\n        if ($this->isSubQuery) {\n            return;\n        }\n\n        $this->_query = $operation . \" \" . implode(' ', $this->_queryOptions) . \" INTO \" . self::$prefix . $tableName;\n        $stmt = $this->_buildQuery(null, $insertData);\n        $status = $stmt->execute();\n        $this->_stmtError = $stmt->error;\n        $this->_stmtErrno = $stmt->errno;\n        $haveOnDuplicate = !empty ($this->_updateColumns);\n        $this->reset();\n        $this->count = $stmt->affected_rows;\n\n        if ($stmt->affected_rows < 1) {\n            // in case of onDuplicate() usage, if no rows were inserted\n            if ($status && $haveOnDuplicate) {\n                return true;\n            }\n            return false;\n        }\n\n        if ($stmt->insert_id > 0) {\n            return $stmt->insert_id;\n        }\n\n        return true;\n    }\n\n    /**\n     * Abstraction method that will compile the WHERE statement,\n     * any passed update data, and the desired rows.\n     * It then builds the SQL query.\n     *\n     * @param int|array $numRows     Array to define SQL limit in format Array ($offset, $count)\n     *                               or only $count\n     * @param array     $tableData   Should contain an array of data for updating the database.\n     *\n     * @return mysqli_stmt|bool Returns the $stmt object.\n     * @throws Exception\n     */\n    protected function _buildQuery($numRows = null, $tableData = null)\n    {\n        // $this->_buildJoinOld();\n        $this->_buildJoin();\n        $this->_buildInsertQuery($tableData);\n        $this->_buildCondition('WHERE', $this->_where);\n        $this->_buildGroupBy();\n        $this->_buildCondition('HAVING', $this->_having);\n        $this->_buildOrderBy();\n        $this->_buildLimit($numRows);\n        $this->_buildOnDuplicate($tableData);\n\n        if ($this->_forUpdate) {\n            $this->_query .= ' FOR UPDATE';\n        }\n        if ($this->_lockInShareMode) {\n            $this->_query .= ' LOCK IN SHARE MODE';\n        }\n\n        $this->_lastQuery = $this->replacePlaceHolders($this->_query, $this->_bindParams);\n\n        if ($this->isSubQuery) {\n            return;\n        }\n\n        // Prepare query\n        $stmt = $this->_prepareQuery();\n\n        // Bind parameters to statement if any\n        if (count($this->_bindParams) > 1) {\n            call_user_func_array(array($stmt, 'bind_param'), $this->refValues($this->_bindParams));\n        }\n\n        return $stmt;\n    }\n\n    /**\n     * This helper method takes care of prepared statements' \"bind_result method\n     * , when the number of variables to pass is unknown.\n     *\n     * @param mysqli_stmt $stmt Equal to the prepared statement object.\n     *\n     * @return array|string The results of the SQL fetch.\n     * @throws Exception\n     */\n    protected function _dynamicBindResults(mysqli_stmt $stmt)\n    {\n        $parameters = array();\n        $results = array();\n        /**\n         * @see http://php.net/manual/en/mysqli-result.fetch-fields.php\n         */\n        $mysqlLongType = 252;\n        $shouldStoreResult = false;\n\n        $meta = $stmt->result_metadata();\n\n        // if $meta is false yet sqlstate is true, there's no sql error but the query is\n        // most likely an update/insert/delete which doesn't produce any results\n        if (!$meta && $stmt->sqlstate)\n            return array();\n\n        $row = array();\n        while ($field = $meta->fetch_field()) {\n            if ($field->type == $mysqlLongType) {\n                $shouldStoreResult = true;\n            }\n\n            if ($this->_nestJoin && $field->table != $this->_tableName) {\n                $field->table = substr($field->table, strlen(self::$prefix));\n                $row[$field->table][$field->name] = null;\n                $parameters[] = & $row[$field->table][$field->name];\n            } else {\n                $row[$field->name] = null;\n                $parameters[] = & $row[$field->name];\n            }\n        }\n\n        // avoid out of memory bug in php 5.2 and 5.3. Mysqli allocates lot of memory for long*\n        // and blob* types. So to avoid out of memory issues store_result is used\n        // https://github.com/joshcam/PHP-MySQLi-Database-Class/pull/119\n        if ($shouldStoreResult) {\n            $stmt->store_result();\n        }\n\n        call_user_func_array(array($stmt, 'bind_result'), $parameters);\n\n        $this->totalCount = 0;\n        $this->count = 0;\n\n        while ($stmt->fetch()) {\n            if ($this->returnType == 'object') {\n                $result = new stdClass ();\n                foreach ($row as $key => $val) {\n                    if (is_array($val)) {\n                        $result->$key = new stdClass ();\n                        foreach ($val as $k => $v) {\n                            $result->$key->$k = $v;\n                        }\n                    } else {\n                        $result->$key = $val;\n                    }\n                }\n            } else {\n                $result = array();\n                foreach ($row as $key => $val) {\n                    if (is_array($val)) {\n                        foreach ($val as $k => $v) {\n                            $result[$key][$k] = $v;\n                        }\n                    } else {\n                        $result[$key] = $val;\n                    }\n                }\n            }\n            $this->count++;\n            if ($this->_mapKey) {\n                if (count($row) < 3 && $this->returnType == 'object') {\n                    $res = new ArrayIterator($result);\n                    $res->seek($_res->count() - 1);\n                    $results[$row[$this->_mapKey]] = $res->current();\n                }\n                else $results[$row[$this->_mapKey]] = count($row) > 2 ? $result : end($result);\n            } else {\n                array_push($results, $result);\n            }\n        }\n\n        if ($shouldStoreResult) {\n            $stmt->free_result();\n        }\n\n        $stmt->close();\n\n        // stored procedures sometimes can return more then 1 resultset\n        if ($this->mysqli()->more_results()) {\n            $this->mysqli()->next_result();\n        }\n\n        if (in_array('SQL_CALC_FOUND_ROWS', $this->_queryOptions)) {\n            $stmt = $this->mysqli()->query('SELECT FOUND_ROWS()');\n            $totalCount = $stmt->fetch_row();\n            $this->totalCount = $totalCount[0];\n        }\n\n        if ($this->returnType == 'json') {\n            return json_encode($results);\n        }\n\n        return $results;\n    }\n\n    /**\n     * Abstraction method that will build an JOIN part of the query\n     *\n     * @return void\n     */\n    protected function _buildJoinOld()\n    {\n        if (empty($this->_join)) {\n            return;\n        }\n\n        foreach ($this->_join as $data) {\n            list ($joinType, $joinTable, $joinCondition) = $data;\n\n            if (is_object($joinTable)) {\n                $joinStr = $this->_buildPair(\"\", $joinTable);\n            } else {\n                $joinStr = $joinTable;\n            }\n\n            $this->_query .= \" \" . $joinType . \" JOIN \" . $joinStr .\n                (false !== stripos($joinCondition, 'using') ? \" \" : \" on \")\n                . $joinCondition;\n        }\n    }\n\n    /**\n     * Insert/Update query helper\n     *\n     * @param array $tableData\n     * @param array $tableColumns\n     * @param bool  $isInsert INSERT operation flag\n     *\n     * @throws Exception\n     */\n    public function _buildDataPairs($tableData, $tableColumns, $isInsert)\n    {\n        foreach ($tableColumns as $column) {\n            $value = $tableData[$column];\n\n            if (!$isInsert) {\n                if(strpos($column,'.')===false) {\n                    $this->_query .= \"`\" . $column . \"` = \";\n                } else {\n                    $this->_query .= str_replace('.','.`',$column) . \"` = \";\n                }\n            }\n\n            // Subquery value\n            if ($value instanceof MysqliDb) {\n                $this->_query .= $this->_buildPair(\"\", $value) . \", \";\n                continue;\n            }\n\n            // Simple value\n            if (!is_array($value)) {\n                $this->_bindParam($value);\n                $this->_query .= '?, ';\n                continue;\n            }\n\n            // Function value\n            $key = key($value);\n            $val = $value[$key];\n            switch ($key) {\n                case '[I]':\n                    $this->_query .= $column . $val . \", \";\n                    break;\n                case '[F]':\n                    $this->_query .= $val[0] . \", \";\n                    if (!empty($val[1])) {\n                        $this->_bindParams($val[1]);\n                    }\n                    break;\n                case '[N]':\n                    if ($val == null) {\n                        $this->_query .= \"!\" . $column . \", \";\n                    } else {\n                        $this->_query .= \"!\" . $val . \", \";\n                    }\n                    break;\n                default:\n                    throw new Exception(\"Wrong operation\");\n            }\n        }\n        $this->_query = rtrim($this->_query, ', ');\n    }\n\n    /**\n     * Helper function to add variables into the query statement\n     *\n     * @param array $tableData Variable with values\n     *\n     * @throws Exception\n     */\n    protected function _buildOnDuplicate($tableData)\n    {\n        if (is_array($this->_updateColumns) && !empty($this->_updateColumns)) {\n            $this->_query .= \" ON DUPLICATE KEY UPDATE \";\n            if ($this->_lastInsertId) {\n                $this->_query .= $this->_lastInsertId . \"=LAST_INSERT_ID (\" . $this->_lastInsertId . \"), \";\n            }\n\n            foreach ($this->_updateColumns as $key => $val) {\n                // skip all params without a value\n                if (is_numeric($key)) {\n                    $this->_updateColumns[$val] = '';\n                    unset($this->_updateColumns[$key]);\n                } else {\n                    $tableData[$key] = $val;\n                }\n            }\n            $this->_buildDataPairs($tableData, array_keys($this->_updateColumns), false);\n        }\n    }\n\n    /**\n     * Abstraction method that will build an INSERT or UPDATE part of the query\n     *\n     * @param array $tableData\n     *\n     * @throws Exception\n     */\n    protected function _buildInsertQuery($tableData)\n    {\n        if (!is_array($tableData)) {\n            return;\n        }\n\n        $isInsert = preg_match('/^[INSERT|REPLACE]/', $this->_query);\n        $dataColumns = array_keys($tableData);\n        if ($isInsert) {\n            if (isset ($dataColumns[0]))\n                $this->_query .= ' (`' . implode('`, `', $dataColumns) . '`) ';\n            $this->_query .= ' VALUES (';\n        } else {\n            $this->_query .= \" SET \";\n        }\n\n        $this->_buildDataPairs($tableData, $dataColumns, $isInsert);\n\n        if ($isInsert) {\n            $this->_query .= ')';\n        }\n    }\n\n    /**\n     * Abstraction method that will build the part of the WHERE conditions\n     *\n     * @param string $operator\n     * @param array  $conditions\n     */\n    protected function _buildCondition($operator, &$conditions)\n    {\n        if (empty($conditions)) {\n            return;\n        }\n\n        //Prepare the where portion of the query\n        $this->_query .= ' ' . $operator;\n\n        foreach ($conditions as $cond) {\n            list ($concat, $varName, $operator, $val) = $cond;\n            $this->_query .= \" \" . $concat . \" \" . $varName;\n\n            switch (strtolower($operator)) {\n                case 'not in':\n                case 'in':\n                    $comparison = ' ' . $operator . ' (';\n                    if (is_object($val)) {\n                        $comparison .= $this->_buildPair(\"\", $val);\n                    } else {\n                        foreach ($val as $v) {\n                            $comparison .= ' ?,';\n                            $this->_bindParam($v);\n                        }\n                    }\n                    $this->_query .= rtrim($comparison, ',') . ' ) ';\n                    break;\n                case 'not between':\n                case 'between':\n                    $this->_query .= \" $operator ? AND ? \";\n                    $this->_bindParams($val);\n                    break;\n                case 'not exists':\n                case 'exists':\n                    $this->_query.= $operator . $this->_buildPair(\"\", $val);\n                    break;\n                default:\n                    if (is_array($val)) {\n                        $this->_bindParams($val);\n                    } elseif ($val === null) {\n                        $this->_query .= ' ' . $operator . \" NULL\";\n                    } elseif ($val != 'DBNULL' || $val == '0') {\n                        $this->_query .= $this->_buildPair($operator, $val);\n                    }\n            }\n        }\n    }\n\n    /**\n     * Abstraction method that will build the GROUP BY part of the WHERE statement\n     *\n     * @return void\n     */\n    protected function _buildGroupBy()\n    {\n        if (empty($this->_groupBy)) {\n            return;\n        }\n\n        $this->_query .= \" GROUP BY \";\n\n        foreach ($this->_groupBy as $key => $value) {\n            $this->_query .= $value . \", \";\n        }\n\n        $this->_query = rtrim($this->_query, ', ') . \" \";\n    }\n\n    /**\n     * Abstraction method that will build the LIMIT part of the WHERE statement\n     *\n     * @return void\n     */\n    protected function _buildOrderBy()\n    {\n        if (empty($this->_orderBy)) {\n            return;\n        }\n\n        $this->_query .= \" ORDER BY \";\n        foreach ($this->_orderBy as $prop => $value) {\n            if (strtolower(str_replace(\" \", \"\", $prop)) == 'rand()') {\n                $this->_query .= \"rand(), \";\n            } else {\n                $this->_query .= $prop . \" \" . $value . \", \";\n            }\n        }\n\n        $this->_query = rtrim($this->_query, ', ') . \" \";\n    }\n\n    /**\n     * Abstraction method that will build the LIMIT part of the WHERE statement\n     *\n     * @param int|array $numRows     Array to define SQL limit in format Array ($offset, $count)\n     *                               or only $count\n     *\n     * @return void\n     */\n    protected function _buildLimit($numRows)\n    {\n        if (!isset($numRows)) {\n            return;\n        }\n\n        if (is_array($numRows)) {\n            $this->_query .= ' LIMIT ' . (int) $numRows[0] . ', ' . (int) $numRows[1];\n        } else {\n            $this->_query .= ' LIMIT ' . (int) $numRows;\n        }\n    }\n\n    /**\n     * Method attempts to prepare the SQL query\n     * and throws an error if there was a problem.\n     *\n     * @return mysqli_stmt\n     * @throws Exception\n     */\n    protected function _prepareQuery()\n    {\n        $stmt = $this->mysqli()->prepare($this->_query);\n\n        if ($stmt !== false) {\n            if ($this->traceEnabled)\n                $this->traceStartQ = microtime(true);\n            return $stmt;\n        }\n\n        if ($this->mysqli()->errno === 2006 && $this->autoReconnect === true && $this->autoReconnectCount === 0) {\n            $this->connect($this->defConnectionName);\n            $this->autoReconnectCount++;\n            return $this->_prepareQuery();\n        }\n\n        $error = $this->mysqli()->error;\n        $query = $this->_query;\n        $errno = $this->mysqli()->errno;\n        $this->reset();\n        throw new Exception(sprintf('%s query: %s', $error, $query), $errno);\n    }\n\n    /**\n     * Referenced data array is required by mysqli since PHP 5.3+\n     *\n     * @param array $arr\n     *\n     * @return array\n     */\n    protected function refValues(array &$arr)\n    {\n        //Reference in the function arguments are required for HHVM to work\n        //https://github.com/facebook/hhvm/issues/5155\n        //Referenced data array is required by mysqli since PHP 5.3+\n        if (strnatcmp(phpversion(), '5.3') >= 0) {\n            $refs = array();\n            foreach ($arr as $key => $value) {\n                $refs[$key] = & $arr[$key];\n            }\n            return $refs;\n        }\n        return $arr;\n    }\n\n    /**\n     * Function to replace ? with variables from bind variable\n     *\n     * @param string $str\n     * @param array  $vals\n     *\n     * @return string\n     */\n    protected function replacePlaceHolders($str, $vals)\n    {\n        $i = 1;\n        $newStr = \"\";\n\n        if (empty($vals)) {\n            return $str;\n        }\n\n        while ($pos = strpos($str, \"?\")) {\n            $val = $vals[$i++];\n            if (is_object($val)) {\n                $val = '[object]';\n            }\n            if ($val === null) {\n                $val = 'NULL';\n            }\n            $newStr .= substr($str, 0, $pos) . \"'\" . $val . \"'\";\n            $str = substr($str, $pos + 1);\n        }\n        $newStr .= $str;\n        return $newStr;\n    }\n\n    /**\n     * Method returns last executed query\n     *\n     * @return string\n     */\n    public function getLastQuery()\n    {\n        return $this->_lastQuery;\n    }\n\n    /**\n     * Method returns mysql error\n     *\n     * @return string\n     * @throws Exception\n     */\n    public function getLastError()\n    {\n        if (!isset($this->_mysqli[$this->defConnectionName])) {\n            return \"mysqli is null\";\n        }\n        return trim($this->_stmtError . \" \" . $this->mysqli()->error);\n    }\n\n    /**\n     * Method returns mysql error code\n     *\n     * @return int\n     */\n    public function getLastErrno() {\n        return $this->_stmtErrno;\n    }\n\n    /**\n     * Mostly internal method to get query and its params out of subquery object\n     * after get() and getAll()\n     *\n     * @return array\n     */\n    public function getSubQuery()\n    {\n        if (!$this->isSubQuery) {\n            return null;\n        }\n\n        array_shift($this->_bindParams);\n        $val = Array('query' => $this->_query,\n            'params' => $this->_bindParams,\n            'alias' => isset($this->connectionsSettings[$this->defConnectionName]) ? $this->connectionsSettings[$this->defConnectionName]['host'] : null\n        );\n        $this->reset();\n        return $val;\n    }\n\n    /* Helper functions */\n\n    /**\n     * Method returns generated interval function as a string\n     *\n     * @param string $diff interval in the formats:\n     *                     \"1\", \"-1d\" or \"- 1 day\" -- For interval - 1 day\n     *                     Supported intervals [s]econd, [m]inute, [h]hour, [d]day, [M]onth, [Y]ear\n     *                     Default null;\n     * @param string $func Initial date\n     *\n     * @return string\n     * @throws Exception\n     */\n    public function interval($diff, $func = \"NOW()\")\n    {\n        $types = Array(\"s\" => \"second\", \"m\" => \"minute\", \"h\" => \"hour\", \"d\" => \"day\", \"M\" => \"month\", \"Y\" => \"year\");\n        $incr = '+';\n        $items = '';\n        $type = 'd';\n\n        if ($diff && preg_match('/([+-]?) ?([0-9]+) ?([a-zA-Z]?)/', $diff, $matches)) {\n            if (!empty($matches[1])) {\n                $incr = $matches[1];\n            }\n\n            if (!empty($matches[2])) {\n                $items = $matches[2];\n            }\n\n            if (!empty($matches[3])) {\n                $type = $matches[3];\n            }\n\n            if (!in_array($type, array_keys($types))) {\n                throw new Exception(\"invalid interval type in '{$diff}'\");\n            }\n\n            $func .= \" \" . $incr . \" interval \" . $items . \" \" . $types[$type] . \" \";\n        }\n        return $func;\n    }\n\n    /**\n     * Method returns generated interval function as an insert/update function\n     *\n     * @param string $diff interval in the formats:\n     *                     \"1\", \"-1d\" or \"- 1 day\" -- For interval - 1 day\n     *                     Supported intervals [s]econd, [m]inute, [h]hour, [d]day, [M]onth, [Y]ear\n     *                     Default null;\n     * @param string $func Initial date\n     *\n     * @return array\n     * @throws Exception\n     */\n    public function now($diff = null, $func = \"NOW()\")\n    {\n        return array(\"[F]\" => Array($this->interval($diff, $func)));\n    }\n\n    /**\n     * Method generates incremental function call\n     *\n     * @param int $num increment by int or float. 1 by default\n     *\n     * @throws Exception\n     * @return array\n     */\n    public function inc($num = 1)\n    {\n        if (!is_numeric($num)) {\n            throw new Exception('Argument supplied to inc must be a number');\n        }\n        return array(\"[I]\" => \"+\" . $num);\n    }\n\n    /**\n     * Method generates decremental function call\n     *\n     * @param int $num increment by int or float. 1 by default\n     *\n     * @return array\n     * @throws Exception\n     */\n    public function dec($num = 1)\n    {\n        if (!is_numeric($num)) {\n            throw new Exception('Argument supplied to dec must be a number');\n        }\n        return array(\"[I]\" => \"-\" . $num);\n    }\n\n    /**\n     * Method generates change boolean function call\n     *\n     * @param string $col column name. null by default\n     *\n     * @return array\n     */\n    public function not($col = null)\n    {\n        return array(\"[N]\" => (string)$col);\n    }\n\n    /**\n     * Method generates user defined function call\n     *\n     * @param string $expr user function body\n     * @param array  $bindParams\n     *\n     * @return array\n     */\n    public function func($expr, $bindParams = null)\n    {\n        return array(\"[F]\" => array($expr, $bindParams));\n    }\n\n    /**\n     * Method creates new mysqlidb object for a subquery generation\n     *\n     * @param string $subQueryAlias\n     *\n     * @return MysqliDb\n     */\n    public static function subQuery($subQueryAlias = \"\")\n    {\n        return new self(array('host' => $subQueryAlias, 'isSubQuery' => true));\n    }\n\n    /**\n     * Method returns a copy of a mysqlidb subquery object\n     *\n     * @return MysqliDb new mysqlidb object\n     */\n    public function copy()\n    {\n        $copy = unserialize(serialize($this));\n        $copy->_mysqli = array();\n        return $copy;\n    }\n\n    /**\n     * Begin a transaction\n     *\n     * @uses mysqli->autocommit(false)\n     * @uses register_shutdown_function(array($this, \"_transaction_shutdown_check\"))\n     * @throws Exception\n     */\n    public function startTransaction()\n    {\n        $this->mysqli()->autocommit(false);\n        $this->_transaction_in_progress = true;\n        register_shutdown_function(array($this, \"_transaction_status_check\"));\n    }\n\n    /**\n     * Transaction commit\n     *\n     * @uses mysqli->commit();\n     * @uses mysqli->autocommit(true);\n     * @throws Exception\n     */\n    public function commit()\n    {\n        $result = $this->mysqli()->commit();\n        $this->_transaction_in_progress = false;\n        $this->mysqli()->autocommit(true);\n        return $result;\n    }\n\n    /**\n     * Transaction rollback function\n     *\n     * @uses mysqli->rollback();\n     * @uses mysqli->autocommit(true);\n     * @throws Exception\n     */\n    public function rollback()\n    {\n        $result = $this->mysqli()->rollback();\n        $this->_transaction_in_progress = false;\n        $this->mysqli()->autocommit(true);\n        return $result;\n    }\n\n    /**\n     * Shutdown handler to rollback uncommited operations in order to keep\n     * atomic operations sane.\n     *\n     * @uses mysqli->rollback();\n     * @throws Exception\n     */\n    public function _transaction_status_check()\n    {\n        if (!$this->_transaction_in_progress) {\n            return;\n        }\n        $this->rollback();\n    }\n\n    /**\n     * Query execution time tracking switch\n     *\n     * @param bool   $enabled     Enable execution time tracking\n     * @param string $stripPrefix Prefix to strip from the path in exec log\n     *\n     * @return MysqliDb\n     */\n    public function setTrace($enabled, $stripPrefix = '')\n    {\n        $this->traceEnabled = $enabled;\n        $this->traceStripPrefix = $stripPrefix;\n        return $this;\n    }\n\n    /**\n     * Get where and what function was called for query stored in MysqliDB->trace\n     *\n     * @return string with information\n     */\n    private function _traceGetCaller()\n    {\n        $dd = debug_backtrace();\n        $caller = next($dd);\n        while (isset($caller) && $caller[\"file\"] == __FILE__) {\n            $caller = next($dd);\n        }\n\n        return __CLASS__ . \"->\" . $caller[\"function\"] . \"() >>  file \\\"\" .\n        str_replace($this->traceStripPrefix , '', $caller[\"file\"]) . \"\\\" line #\" . $caller[\"line\"] . \" \";\n    }\n\n    /**\n     * Method to check if needed table is created\n     *\n     * @param array $tables Table name or an Array of table names to check\n     *\n     * @return bool True if table exists\n     * @throws Exception\n     */\n    public function tableExists($tables)\n    {\n        $tables = !is_array($tables) ? Array($tables) : $tables;\n        $count = count($tables);\n        if ($count == 0) {\n            return false;\n        }\n\n        foreach ($tables as $i => $value)\n            $tables[$i] = self::$prefix . $value;\n        $db = isset($this->connectionsSettings[$this->defConnectionName]) ? $this->connectionsSettings[$this->defConnectionName]['db'] : null;\n        $this->where('table_schema', $db);\n        $this->where('table_name', $tables, 'in');\n        $this->get('information_schema.tables', $count);\n        return $this->count == $count;\n    }\n\n    /**\n     * Return result as an associative array with $idField field value used as a record key\n     *\n     * Array Returns an array($k => $v) if get(..\"param1, param2\"), array ($k => array ($v, $v)) otherwise\n     *\n     * @param string $idField field name to use for a mapped element key\n     *\n     * @return MysqliDb\n     */\n    public function map($idField)\n    {\n        $this->_mapKey = $idField;\n        return $this;\n    }\n\n    /**\n     * Pagination wrapper to get()\n     *\n     * @access public\n     *\n     * @param string       $table  The name of the database table to work with\n     * @param int          $page   Page number\n     * @param array|string $fields Array or coma separated list of fields to fetch\n     *\n     * @return array\n     * @throws Exception\n     */\n    public function paginate ($table, $page, $fields = null) {\n        $offset = $this->pageLimit * ($page - 1);\n        $res = $this->withTotalCount()->get ($table, Array ($offset, $this->pageLimit), $fields);\n        $this->totalPages = ceil($this->totalCount / $this->pageLimit);\n        return $res;\n    }\n\n    /**\n     * This method allows you to specify multiple (method chaining optional) AND WHERE statements for the join table on part of the SQL query.\n     *\n     * @uses $dbWrapper->joinWhere('user u', 'u.id', 7)->where('user u', 'u.title', 'MyTitle');\n     *\n     * @param string $whereJoin  The name of the table followed by its prefix.\n     * @param string $whereProp  The name of the database field.\n     * @param mixed  $whereValue The value of the database field.\n     *\n     * @param string $operator\n     * @param string $cond\n     *\n     * @return $this\n     */\n    public function joinWhere($whereJoin, $whereProp, $whereValue = 'DBNULL', $operator = '=', $cond = 'AND')\n    {\n        $this->_joinAnd[self::$prefix . $whereJoin][] = Array ($cond, $whereProp, $operator, $whereValue);\n        return $this;\n    }\n\n    /**\n     * This method allows you to specify multiple (method chaining optional) OR WHERE statements for the join table on part of the SQL query.\n     *\n     * @uses $dbWrapper->joinWhere('user u', 'u.id', 7)->where('user u', 'u.title', 'MyTitle');\n     *\n     * @param string $whereJoin  The name of the table followed by its prefix.\n     * @param string $whereProp  The name of the database field.\n     * @param mixed  $whereValue The value of the database field.\n     * @param string $operator\n     *\n     * @return $this\n     */\n    public function joinOrWhere($whereJoin, $whereProp, $whereValue = 'DBNULL', $operator = '=', $cond = 'AND')\n    {\n        return $this->joinWhere($whereJoin, $whereProp, $whereValue, $operator, 'OR');\n    }\n\n    /**\n     * Abstraction method that will build an JOIN part of the query\n     */\n    protected function _buildJoin () {\n        if (empty ($this->_join))\n            return;\n\n        foreach ($this->_join as $data) {\n            list ($joinType,  $joinTable, $joinCondition) = $data;\n\n            if (is_object ($joinTable))\n                $joinStr = $this->_buildPair (\"\", $joinTable);\n            else\n                $joinStr = $joinTable;\n\n            $this->_query .= \" \" . $joinType. \" JOIN \" . $joinStr .\n                (false !== stripos($joinCondition, 'using') ? \" \" : \" on \")\n                . $joinCondition;\n\n            // Add join and query\n            if (!empty($this->_joinAnd) && isset($this->_joinAnd[$joinStr])) {\n                foreach($this->_joinAnd[$joinStr] as $join_and_cond) {\n                    list ($concat, $varName, $operator, $val) = $join_and_cond;\n                    $this->_query .= \" \" . $concat .\" \" . $varName;\n                    $this->conditionToSql($operator, $val);\n                }\n            }\n        }\n    }\n\n    /**\n     * Convert a condition and value into the sql string\n     *\n     * @param  String       $operator The where constraint operator\n     * @param  String|array $val      The where constraint value\n     */\n    private function conditionToSql($operator, $val) {\n        switch (strtolower ($operator)) {\n            case 'not in':\n            case 'in':\n                $comparison = ' ' . $operator. ' (';\n                if (is_object ($val)) {\n                    $comparison .= $this->_buildPair (\"\", $val);\n                } else {\n                    foreach ($val as $v) {\n                        $comparison .= ' ?,';\n                        $this->_bindParam ($v);\n                    }\n                }\n                $this->_query .= rtrim($comparison, ',').' ) ';\n                break;\n            case 'not between':\n            case 'between':\n                $this->_query .= \" $operator ? AND ? \";\n                $this->_bindParams ($val);\n                break;\n            case 'not exists':\n            case 'exists':\n                $this->_query.= $operator . $this->_buildPair (\"\", $val);\n                break;\n            default:\n                if (is_array ($val))\n                    $this->_bindParams ($val);\n                else if ($val === null)\n                    $this->_query .= $operator . \" NULL\";\n                else if ($val != 'DBNULL' || $val == '0')\n                    $this->_query .= $this->_buildPair ($operator, $val);\n        }\n    }\n}\n\n// END class\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.7158203125,
          "content": "{\n    \"name\": \"thingengineer/mysqli-database-class\",\n    \"description\": \"PHP MySQL Wrapper and object mapper which utilizes MySQLi and prepared statements\",\n    \"license\": \"GPL-3.0-or-later\",\n    \"authors\": [\n        {\n            \"name\": \"Josh Campbell\",\n            \"email\": \"josh.lee.campbell@gmail.com\",\n            \"homepage\": \"https://github.com/thingengineer\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"Alexander V. Butenko\",\n            \"email\": \"a.butenka@gmail.com\",\n            \"homepage\": \"http://smarttechdo.com\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=5.3.0\"\n    },\n    \"autoload\": {\n        \"files\": [\"MysqliDb.php\", \"dbObject.php\"]\n    }\n}\n"
        },
        {
          "name": "dbObject.md",
          "type": "blob",
          "size": 10.0517578125,
          "content": "dbObject - model implementation on top of the MysqliDb.\n\nPlease note that this library is not pretending to be a full stack ORM, but simply an OOP wrapper for `mysqlidb`.\n\n<hr>\n\n### Initialization\n\nInclude mysqlidb and dbObject classes. If you want to use model autoloading instead of manually including them in the scripts use `autoload()` method.\n```php\nrequire_once(\"libs/MysqliDb.php\");\nrequire_once(\"libs/dbObject.php\");\n\n// db instance\n$db = new Mysqlidb('localhost', 'user', '', 'testdb');\n// enable class autoloading\ndbObject::autoload(\"models\");\n```\n\nEach database table could be easily mapped into a dbObject instance.  If you do not want to create model for a simple table its object could be simply created with a `table()` method.\n```php\n$user = dbObject::table(\"users\");\n```\n\nOtherwise basic model should be declared as:\n```php\nclass user extends dbObject {}\n```\nIn case autoload is set to 'models' directory, the filename should be models/user.php\n\nClass will be related to 'user' table. To change the table name, define correct name in the `$dbTable` variable:\n\n```php\n    protected $dbTable = \"users\";\n```\n\nBoth objects created throw new class file creation of with `table()` method will have the same set of methods available. Only exception is that relations, validation or custom model methods\nwill not be working with an objects created with `table()` method.\n\n\n### Selects\nRetrieving objects from the database is pretty much the same process as a mysqliDb `get()`/`getOne()`/`getValue()` methods without a need to specify table name. All mysqlidb functions like `where()`, `orWhere()`, `orderBy()`, `join()`, etc. are supported.\n\n## Retrieving All Records\n\n```php\n//$users = dbObject::table('users')->get();\n$users = user::get();\nforeach ($users as $u) {\n  echo $u->login;\n}\n```\n\n## Using Where Condition And A Limit\n```php\n$users = user::where(\"login\", \"demo\")->get(Array (10, 20));\nforeach ($users as $u) ...\n```\n\n## Retrieving A Model By Primary Key\n\n```php\n//$user = dbObject::table('users')->byId(1);\n$user = user::byId(1);\necho $user->login;\n```\n\ndbObject will also assume that each table has a primary key column named \"id\". You may define a primaryKey property to override this assumption.\n\n```php\n  protected $primaryKey = \"userId\";\n```\n\n\n### Insert Row\n1. OOP Way. Just create new object of a needed class, fill it in and call `save()` method. Save will return\nrecord id in case of success and false in case if insert will fail.\n```php\n//$user = dbObject::table('users');\n$user = new user;\n$user->login = 'demo';\n$user->password = 'demo';\n$id = $user->save();\nif ($id)\n  echo \"user created with id = \" . $id;\n```\n\n2. Using arrays\n```php\n$data = Array('login' => 'demo',\n        'password' => 'demo');\n$user = new user ($data);\n$id = $user->save();\nif ($id == null) {\n    print_r($user->errors);\n    echo $db->getLastError;\n} else\n    echo \"user created with id = \" . $id;\n```\n\n3. Multisave\n\n```php\n$user = new user;\n$user->login = 'demo';\n$user->pass = 'demo';\n\n$p = new product;\n$p->title = \"Apples\";\n$p->price = 0.5;\n$p->seller = $user;\n$p->save();\n```\n\nAfter `save()` is called, both new objects (user and product) will be saved.\n\n\n### Update\nTo update model properties just set them and call `save()` method. Values that need to be changed could be passed as an array to the `save()` method as well.\n\n```php\n$user = user::byId(1);\n$user->password = 'demo2';\n$user->save();\n```\n```php\n$data = Array('password', 'demo2');\n$user = user::byId(1);\n$user->save($data);\n```\n\n### Delete\nUse `delete()` method on any loaded object.\n```php\n$user = user::byId(1);\n$user->delete();\n```\n\n### Relations\nCurrently dbObject supports only `hasMany` and `hasOne` relations. To use them declare `$relations` array in the model class.\nAfter that you can get related object via variable names defined as keys.\n\n## hasOne example:\n```php\n    protected $relations = Array(\n        'person' => Array(\"hasOne\", \"person\", 'id');\n    );\n\n    ...\n\n    $user = user::byId(1);\n    // sql: select * from users where id = $personValue\n    echo $user->person->firstName . \" \" . $user->person->lastName . \" have the following products:\\n\";\n    // one more sql: select * from person where id=x\n```\nPlease note, that following way of querying will execute 2 sql queries:\n1. `select * from users where id=1`\n2. `select * from person where id=x`\n\nTo optimize this into single select join query use `with()` method.\n```php\n   $user = user::with('person')->byId(1);\n   // sql: select * from users left join person on person.id = users.id wher id = 1;\n    echo $user->person->firstName . \" \" . $user->person->lastName . \" have the following products:\\n\";\n```\n\n## hasMany example:\nIn the `hasMany` array should be defined the target object name (product in example) and a relation key (userid).\n```php\n    protected $relations = Array(\n        'products' => Array(\"hasMany\", \"product\", 'userid')\n    );\n\n    ...\n\n    $user = user::byId(1);\n    // sql: select * from $product_table where userid = $userPrimaryKey\n    foreach ($user->products as $p) {\n            echo $p->title;\n    }\n```\n\n### Joining tables\n```php\n$depts = product::join('user');\n$depts = product::join('user', 'productid');\n```\n\nFirst parameter will set an object which should be joined. Second paramter will define a key. Default key is `$objectName+'Id'`\n\n\nNOTE: Objects returned with `join()` will not save changes to a joined properties. For this you can use relationships.\n\n### Timestamps\nLibrary provides a transparent way to set timestamps of an object creation and its modification:\nTo enable that define `$timestamps` array as follows:\n```php\nprotected $timestamps = Array ('createdAt', 'updatedAt');\n```\nField names can't be changed.\n\n### Array Fields\ndbObject can automatically handle array type of values. Optionaly you can store arrays in json encoded or in pipe delimited format.\nTo enable automatic json serialization of the field define `$jsonFields` array in your modal:\n```php\n    protected $jsonFields = Array('options');\n```\nTo enable pipe delimited storage of the field, define `$arrayFields` array in your modal:\n```php\n    protected $arrayFields = Array('sections');\n```\nThe following code will now store `'options'` variable as a json string in the database, and will return an array on load.\nSame with the `'sections'` variable except that it will be stored in pipe delimited format.\n```php\n    $user = new user;\n    $user->login = 'admin';\n    $user->options = Array('canReadNews', 'canPostNews', 'canDeleteNews');\n    $user->sections = Array('news', 'companyNews');\n    $user->save();\n    ...\n    $user = user::byId(1);\n    print_r($user->options);\n```\n\n### Validation and Error checking\nBefore saving and updating the row, dbObject does input validation. In case validation rules are set but their criteria is\nnot met, then `save()` will return an error with its description. For example:\n```php\n$id = $user->save();\nif (!$id) {\n    // show all validation errors\n    print_r($user->errors);\n    echo $db->getLastQuery();\n    echo $db->getLastError();\n}\necho \"user were created with id\" . $id;\n```\nValidation rules must be defined in `$dbFields` array.\n```php\n  protected $dbFields = Array(\n    'login' => Array('text', 'required'),\n    'password' => Array('text'),\n    'createdAt' => Array('datetime'),\n    'updatedAt' => Array('datetime'),\n    'custom' => Array('/^test/'),\n  );\n```\nFirst parameter is a field type. Types could be the one of following: text, bool, int, datetime or a custom regexp.\nSecond parameter is 'required' and its defines that following entry field be always defined.\n\n**NOTE:** All variables which are not defined in the `$dbFields` array will be ignored from insert/update statement.\n\n### Using array as a return value\ndbObject can return its data as array instead of object. To do that, the `ArrayBuilder()` function should be used in the beginning of the call.\n```php\n    $user = user::ArrayBuilder()->byId(1);\n    echo $user['login'];\n\n    $users = user::ArrayBuilder()->orderBy(\"id\", \"desc\")->get();\n    foreach ($users as $u)\n        echo $u['login'];\n```\n\nThe following call will return data only of the called instance without any relations data. Use `with()` function to include relation data as well.\n```php\n    $user = user::ArrayBuilder()->with(\"product\")->byId(1);\n    print_r ($user['products']);\n```\n\n### Using json as a return value\nTogether with `ArrayBuilder()` and `ObjectBuilder()`, dbObject can also return a result in json format to avoid extra coding.\n```php\n    $userjson = user::JsonBuilder()->with(\"product\")->byId(1);\n```\n### Object serialization\n\nObject could be easily converted to a json string or an array.\n\n```php\n    $user = user::byId(1);\n    // echo will display json representation of an object\n    echo $user;\n    // userJson will contain json representation of an object\n    $userJson = $user->toJson();\n    // userArray will contain array representation of an object\n    $userArray = $user->toArray();\n```\n\n### Pagination\nUse paginate() instead of get() to fetch paginated result\n```php\n$page = 1;\n// set page limit to 2 results per page. 20 by default\nproduct::$pageLimit = 2;\n$products = product::arraybuilder()->paginate($page);\necho \"showing $page out of \" . product::$totalPages;\n\n```\n\n### Hidden Fields\nSometimes it's important to block some fields that can be accessed from outside the model class (for example, the user password).\n\nTo block the access to certain fields using the `->` operator, you can declare the  `$hidden` array into the model class. This array holds column names that can't be accessed with the `->` operator.\n\nFor example:\n\n```php\nclass User extends dbObject {\n    protected $dbFields = array(\n        'username' => array('text', 'required'),\n        'password' => array('text', 'required'),\n        'is_admin' => array('bool'),\n        'token' => array('text')\n    );\n\n    protected $hidden = array(\n        'password', 'token'\n    );\n}\n```\n\nIf you try to:\n```php\necho $user->password;\necho $user->token;\n```\n\nWill return `null`, and also:\n```php\n$user->password = \"my-new-password\";\n```\n\nWon't change the current `password` value.\n\n### Examples\n\nPlease look for a use examples in <a href='tests/dbObjectTests.php'>tests file</a> and test models inside the <a href='tests/models/'>test models</a> directory\n"
        },
        {
          "name": "dbObject.php",
          "type": "blob",
          "size": 23.650390625,
          "content": "<?php\n/**\n * Mysqli Model wrapper\n *\n * @category  Database Access\n * @package   MysqliDb\n * @author    Alexander V. Butenko <a.butenka@gmail.com>\n * @copyright Copyright (c) 2015-2017\n * @license   http://opensource.org/licenses/gpl-3.0.html GNU Public License\n * @link      http://github.com/joshcam/PHP-MySQLi-Database-Class\n * @version   2.9-master\n *\n * @method int count ()\n * @method dbObject ArrayBuilder()\n * @method dbObject JsonBuilder()\n * @method dbObject ObjectBuilder()\n * @method mixed byId(string $id, mixed $fields)\n * @method mixed get(mixed $limit, mixed $fields)\n * @method mixed getOne(mixed $fields)\n * @method mixed paginate(int $page, array $fields)\n * @method dbObject query($query, $numRows = null)\n * @method dbObject rawQuery($query, $bindParams = null)\n * @method dbObject join(string $objectName, string $key, string $joinType, string $primaryKey)\n * @method dbObject with(string $objectName)\n * @method dbObject groupBy(string $groupByField)\n * @method dbObject orderBy($orderByField, $orderbyDirection = \"DESC\", $customFieldsOrRegExp = null)\n * @method dbObject where($whereProp, $whereValue = 'DBNULL', $operator = '=', $cond = 'AND')\n * @method dbObject orWhere($whereProp, $whereValue = 'DBNULL', $operator = '=')\n * @method dbObject having($havingProp, $havingValue = 'DBNULL', $operator = '=', $cond = 'AND')\n * @method dbObject orHaving($havingProp, $havingValue = null, $operator = null)\n * @method dbObject setQueryOption($options)\n * @method dbObject setTrace($enabled, $stripPrefix = null)\n * @method dbObject withTotalCount()\n * @method dbObject startTransaction()\n * @method dbObject commit()\n * @method dbObject rollback()\n * @method dbObject ping()\n * @method string getLastError()\n * @method string getLastQuery()\n */\nclass dbObject {\n    /**\n     * Working instance of MysqliDb created earlier\n     *\n     * @var MysqliDb\n     */\n    private $db;\n    /**\n     * Models path\n     *\n     * @var modelPath\n     */\n    protected static $modelPath;\n    /**\n     * An array that holds object data\n     *\n     * @var array\n     */\n    public $data;\n    /**\n     * Flag to define is object is new or loaded from database\n     *\n     * @var boolean\n     */\n    public $isNew = true;\n    /**\n     * Return type: 'Array' to return results as array, 'Object' as object\n     * 'Json' as json string\n     *\n     * @var string\n     */\n    public $returnType = 'Object';\n    /**\n     * An array that holds has* objects which should be loaded togeather with main\n     * object togeather with main object\n     *\n     * @var string\n     */\n    private $_with = Array();\n    /**\n     * Per page limit for pagination\n     *\n     * @var int\n     */\n    public static $pageLimit = 20;\n    /**\n     * Variable that holds total pages count of last paginate() query\n     *\n     * @var int\n     */\n    public static $totalPages = 0;\n    /**\n     * Variable which holds an amount of returned rows during paginate queries\n     * @var string\n     */\n    public static $totalCount = 0;\t\n    /**\n     * An array that holds insert/update/select errors\n     *\n     * @var array\n     */\n    public $errors = null;\n    /**\n     * Primary key for an object. 'id' is a default value.\n     *\n     * @var stating\n     */\n    protected $primaryKey = 'id';\n    /**\n     * Table name for an object. Class name will be used by default\n     *\n     * @var stating\n     */\n    protected $dbTable;\n\n\t/**\n\t * @var array name of the fields that will be skipped during validation, preparing & saving\n\t */\n    protected $toSkip = array();\n\n    /**\n     * @param array $data Data to preload on object creation\n     */\n    public function __construct ($data = null) {\n        $this->db = MysqliDb::getInstance();\n        if (empty ($this->dbTable))\n            $this->dbTable = get_class ($this);\n\n        if ($data)\n            $this->data = $data;\n    }\n\n    /**\n     * Magic setter function\n     *\n     * @return mixed\n     */\n    public function __set ($name, $value) {\n        if (property_exists ($this, 'hidden') && array_search ($name, $this->hidden) !== false)\n            return;\n\t    \n        $this->data[$name] = $value;\n    }\n\n    /**\n     * Magic getter function\n     *\n     * @param $name Variable name\n     *\n     * @return mixed\n     */\n    public function __get ($name) {\n        if (property_exists ($this, 'hidden') && array_search ($name, $this->hidden) !== false)\n\t    return null;\n\t\t\n\tif (isset ($this->data[$name]) && $this->data[$name] instanceof dbObject)\n            return $this->data[$name];\n\n        if (property_exists ($this, 'relations') && isset ($this->relations[$name])) {\n            $relationType = strtolower ($this->relations[$name][0]);\n            $modelName = $this->relations[$name][1];\n            switch ($relationType) {\n                case 'hasone':\n                    $key = isset ($this->relations[$name][2]) ? $this->relations[$name][2] : $name;\n                    $obj = new $modelName;\n                    $obj->returnType = $this->returnType;\n                    return $this->data[$name] = $obj->byId($this->data[$key]);\n                    break;\n                case 'hasmany':\n                    $key = $this->relations[$name][2];\n                    $obj = new $modelName;\n                    $obj->returnType = $this->returnType;\n                    return $this->data[$name] = $obj->where($key, $this->data[$this->primaryKey])->get();\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        if (isset ($this->data[$name]))\n            return $this->data[$name];\n\n        if (property_exists ($this->db, $name))\n            return $this->db->$name;\n    }\n\n    public function __isset ($name) {\n        if (isset ($this->data[$name]))\n            return isset ($this->data[$name]);\n\n        if (property_exists ($this->db, $name))\n            return isset ($this->db->$name);\n    }\n\n    public function __unset ($name) {\n        unset ($this->data[$name]);\n    }\n\n    /**\n     * Helper function to create dbObject with Json return type\n     *\n     * @return dbObject\n     */\n    private function JsonBuilder () {\n        $this->returnType = 'Json';\n        return $this;\n    }\n\n    /**\n     * Helper function to create dbObject with Array return type\n     *\n     * @return dbObject\n     */\n    private function ArrayBuilder () {\n        $this->returnType = 'Array';\n        return $this;\n    }\n\n    /**\n     * Helper function to create dbObject with Object return type.\n     * Added for consistency. Works same way as new $objname ()\n     *\n     * @return dbObject\n     */\n    private function ObjectBuilder () {\n        $this->returnType = 'Object';\n        return $this;\n    }\n\n    /**\n     * Helper function to create a virtual table class\n     *\n     * @param string tableName Table name\n     * @return dbObject\n     */\n    public static function table ($tableName) {\n        $tableName = preg_replace (\"/[^-a-z0-9_]+/i\",'', $tableName);\n        if (!class_exists ($tableName))\n            eval (\"class $tableName extends dbObject {}\");\n        return new $tableName ();\n    }\n    /**\n     * @return mixed insert id or false in case of failure\n     */\n    public function insert () {\n        if (!empty ($this->timestamps) && in_array (\"createdAt\", $this->timestamps))\n            $this->createdAt = date(\"Y-m-d H:i:s\");\n        $sqlData = $this->prepareData ();\n        if (!$this->validate ($sqlData))\n            return false;\n\n        $id = $this->db->insert ($this->dbTable, $sqlData);\n        if (!empty ($this->primaryKey) && empty ($this->data[$this->primaryKey]))\n            $this->data[$this->primaryKey] = $id;\n        $this->isNew = false;\n\t    $this->toSkip = array();\n        return $id;\n    }\n\n    /**\n     * @param array $data Optional update data to apply to the object\n     */\n    public function update ($data = null) {\n        if (empty ($this->dbFields))\n            return false;\n\n        if (empty ($this->data[$this->primaryKey]))\n            return false;\n\n        if ($data) {\n            foreach ($data as $k => $v) {\n\t            if (in_array($k, $this->toSkip))\n\t\t            continue;\n\n\t            $this->$k = $v;\n            }\n        }\n\n        if (!empty ($this->timestamps) && in_array (\"updatedAt\", $this->timestamps))\n            $this->updatedAt = date(\"Y-m-d H:i:s\");\n\n        $sqlData = $this->prepareData ();\n        if (!$this->validate ($sqlData))\n            return false;\n        \n        $this->db->where ($this->primaryKey, $this->data[$this->primaryKey]);\n\t    $res = $this->db->update ($this->dbTable, $sqlData);\n\t    $this->toSkip = array();\n        return $res;\n    }\n\n    /**\n     * Save or Update object\n     *\n     * @return mixed insert id or false in case of failure\n     */\n    public function save ($data = null) {\n        if ($this->isNew)\n            return $this->insert();\n        return $this->update ($data);\n    }\n\n    /**\n     * Delete method. Works only if object primaryKey is defined\n     *\n     * @return boolean Indicates success. 0 or 1.\n     */\n    public function delete () {\n        if (empty ($this->data[$this->primaryKey]))\n            return false;\n\n        $this->db->where ($this->primaryKey, $this->data[$this->primaryKey]);\n        $res = $this->db->delete ($this->dbTable);\n        $this->toSkip = array();\n        return $res;\n    }\n\n\t/**\n\t * chained method that append a field or fields to skipping\n\t * @param mixed|array|false $field field name; array of names; empty skipping if false\n\t * @return $this\n\t */\n    public function skip($field){\n\t    if(is_array($field)) {\n\t\t    foreach ($field as $f) {\n\t\t\t    $this->toSkip[] = $f;\n\t\t    }\n\t    } else if($field === false) {\n\t    \t$this->toSkip = array();\n\t    } else{\n\t    \t$this->toSkip[] = $field;\n\t    }\n\t    return $this;\n    }\n\n    /**\n     * Get object by primary key.\n     *\n     * @access public\n     * @param $id Primary Key\n     * @param array|string $fields Array or coma separated list of fields to fetch\n     *\n     * @return dbObject|array\n     */\n    private function byId ($id, $fields = null) {\n        $this->db->where (MysqliDb::$prefix . $this->dbTable . '.' . $this->primaryKey, $id);\n        return $this->getOne ($fields);\n    }\n\n    /**\n     * Convinient function to fetch one object. Mostly will be togeather with where()\n     *\n     * @access public\n     * @param array|string $fields Array or coma separated list of fields to fetch\n     *\n     * @return dbObject\n     */\n    protected function getOne ($fields = null) {\n        $this->processHasOneWith ();\n        $results = $this->db->ArrayBuilder()->getOne ($this->dbTable, $fields);\n        if ($this->db->count == 0)\n            return null;\n\n        $this->processArrays ($results);\n        $this->data = $results;\n        $this->processAllWith ($results);\n        if ($this->returnType == 'Json')\n            return json_encode ($results);\n        if ($this->returnType == 'Array')\n            return $results;\n\n        $item = new static ($results);\n        $item->isNew = false;\n\n        return $item;\n    }\n\t\n    /**\n     * A convenient SELECT COLUMN function to get a single column value from model object\n     *\n     * @param string $column    The desired column\n     * @param int    $limit     Limit of rows to select. Use null for unlimited..1 by default\n     *\n     * @return mixed Contains the value of a returned column / array of values\n     * @throws Exception\n     */\n    protected function getValue ($column, $limit = 1) {\n        $res = $this->db->ArrayBuilder()->getValue ($this->dbTable, $column, $limit);\n        if (!$res)\n            return null;\n        return $res;\n    }\n\n    /**\n     * A convenient function that returns TRUE if exists at least an element that\n     * satisfy the where condition specified calling the \"where\" method before this one.\n     *\n     * @return bool\n     * @throws Exception\n     */\n    protected function has() {\n        return $this->db->has($this->dbTable);\n    }\n\t\n    /**\n     * Fetch all objects\n     *\n     * @access public\n     * @param integer|array $limit Array to define SQL limit in format Array ($count, $offset)\n     *                             or only $count\n     * @param array|string $fields Array or coma separated list of fields to fetch\n     *\n     * @return array Array of dbObjects\n     */\n    protected function get ($limit = null, $fields = null) {\n        $objects = Array ();\n        $this->processHasOneWith ();\n        $results = $this->db->ArrayBuilder()->get ($this->dbTable, $limit, $fields);\n        if ($this->db->count == 0)\n            return null;\n\n        foreach ($results as $k => &$r) {\n            $this->processArrays ($r);\n            $this->data = $r;\n            $this->processAllWith ($r, false);\n            if ($this->returnType == 'Object') {\n                $item = new static ($r);\n                $item->isNew = false;\n                $objects[$k] = $item;\n            }\n        }\n        $this->_with = Array();\n        if ($this->returnType == 'Object')\n            return $objects;\n\n        if ($this->returnType == 'Json')\n            return json_encode ($results);\n\n        return $results;\n    }\n\n    /**\n     * Function to set witch hasOne or hasMany objects should be loaded togeather with a main object\n     *\n     * @access public\n     * @param string $objectName Object Name\n     *\n     * @return dbObject\n     */\n    private function with ($objectName) {\n        if (!property_exists ($this, 'relations') || !isset ($this->relations[$objectName]))\n            die (\"No relation with name $objectName found\");\n\n        $this->_with[MysqliDb::$prefix.$objectName] = $this->relations[$objectName];\n\n        return $this;\n    }\n\n    /**\n     * Function to join object with another object.\n     *\n     * @access public\n     * @param string $objectName Object Name\n     * @param string $key Key for a join from primary object\n     * @param string $joinType SQL join type: LEFT, RIGHT,  INNER, OUTER\n     * @param string $primaryKey SQL join On Second primaryKey\n     *\n     * @return dbObject\n     */\n    private function join ($objectName, $key = null, $joinType = 'LEFT', $primaryKey = null) {\n        $joinObj = new $objectName;\n        if (!$key)\n            $key = $objectName . \"id\";\n\n        if (!$primaryKey)\n            $primaryKey = MysqliDb::$prefix . $joinObj->dbTable . \".\" . $joinObj->primaryKey;\n\t\t\n        if (!strchr ($key, '.'))\n            $joinStr = MysqliDb::$prefix . $this->dbTable . \".{$key} = \" . $primaryKey;\n        else\n            $joinStr = MysqliDb::$prefix . \"{$key} = \" . $primaryKey;\n\n        $this->db->join ($joinObj->dbTable, $joinStr, $joinType);\n        return $this;\n    }\n\n    /**\n     * Function to get a total records count\n     *\n     * @return int\n     */\n    protected function count () {\n        $res = $this->db->ArrayBuilder()->getValue ($this->dbTable, \"count(*)\");\n        if (!$res)\n            return 0;\n        return $res;\n    }\n\n    /**\n     * Pagination wraper to get()\n     *\n     * @access public\n     * @param int $page Page number\n     * @param array|string $fields Array or coma separated list of fields to fetch\n     * @return array\n     */\n    private function paginate ($page, $fields = null) {\n        $this->db->pageLimit = self::$pageLimit;\n        $objects = Array ();\n        $this->processHasOneWith ();\t    \n        $res = $this->db->paginate ($this->dbTable, $page, $fields);\n        self::$totalPages = $this->db->totalPages;\n\tself::$totalCount = $this->db->totalCount;\n\tif ($this->db->count == 0) return null;\n\t    \n        foreach ($res as $k => &$r) {\n            $this->processArrays ($r);\n            $this->data = $r;\n            $this->processAllWith ($r, false);\n            if ($this->returnType == 'Object') {\n                $item = new static ($r);\n                $item->isNew = false;\n                $objects[$k] = $item;\n            }\n        }\n        $this->_with = Array();\n        if ($this->returnType == 'Object')\n            return $objects;\n\n        if ($this->returnType == 'Json')\n            return json_encode ($res);\n\n        return $res;\n    }\n\n    /**\n     * Catches calls to undefined methods.\n     *\n     * Provides magic access to private functions of the class and native public mysqlidb functions\n     *\n     * @param string $method\n     * @param mixed $arg\n     *\n     * @return mixed\n     */\n    public function __call ($method, $arg) {\n        if (method_exists ($this, $method))\n            return call_user_func_array (array ($this, $method), $arg);\n\n        call_user_func_array (array ($this->db, $method), $arg);\n        return $this;\n    }\n\n    /**\n     * Catches calls to undefined static methods.\n     *\n     * Transparently creating dbObject class to provide smooth API like name::get() name::orderBy()->get()\n     *\n     * @param string $method\n     * @param mixed $arg\n     *\n     * @return mixed\n     */\n    public static function __callStatic ($method, $arg) {\n        $obj = new static;\n        $result = call_user_func_array (array ($obj, $method), $arg);\n        if (method_exists ($obj, $method))\n            return $result;\n        return $obj;\n    }\n\n    /**\n     * Converts object data to an associative array.\n     *\n     * @return array Converted data\n     */\n    public function toArray () {\n        $data = $this->data;\n        $this->processAllWith ($data);\n        foreach ($data as &$d) {\n            if ($d instanceof dbObject)\n                $d = $d->data;\n        }\n        return $data;\n    }\n\n    /**\n     * Converts object data to a JSON string.\n     *\n     * @return string Converted data\n     */\n    public function toJson () {\n        return json_encode ($this->toArray());\n    }\n\n    /**\n     * Converts object data to a JSON string.\n     *\n     * @return string Converted data\n     */\n    public function __toString () {\n        return $this->toJson ();\n    }\n\n    /**\n     * Function queries hasMany relations if needed and also converts hasOne object names\n     *\n     * @param array $data\n     */\n    private function processAllWith (&$data, $shouldReset = true) {\n        if (count ($this->_with) == 0)\n            return;\n\n        foreach ($this->_with as $name => $opts) {\n            $relationType = strtolower ($opts[0]);\n            $modelName = $opts[1];\n            if ($relationType == 'hasone') {\n                $obj = new $modelName;\n                $table = $obj->dbTable;\n                $primaryKey = $obj->primaryKey;\n\t\t\t\t\n                if (!isset ($data[$table])) {\n                    $data[$name] = $this->$name;\n                    continue;\n                } \n                if ($data[$table][$primaryKey] === null) {\n                    $data[$name] = null;\n                } else {\n                    if ($this->returnType == 'Object') {\n                        $item = new $modelName ($data[$table]);\n                        $item->returnType = $this->returnType;\n                        $item->isNew = false;\n                        $data[$name] = $item;\n                    } else {\n                        $data[$name] = $data[$table];\n                    }\n                }\n                unset ($data[$table]);\n            }\n            else\n                $data[$name] = $this->$name;\n        }\n        if ($shouldReset)\n            $this->_with = Array();\n    }\n\n    /*\n     * Function building hasOne joins for get/getOne method\n     */\n    private function processHasOneWith () {\n        if (count ($this->_with) == 0)\n            return;\n        foreach ($this->_with as $name => $opts) {\n            $relationType = strtolower ($opts[0]);\n            $modelName = $opts[1];\n            $key = null;\n            if (isset ($opts[2]))\n                $key = $opts[2];\n            if ($relationType == 'hasone') {\n                $this->db->setQueryOption (\"MYSQLI_NESTJOIN\");\n                $this->join ($modelName, $key);\n            }\n        }\n    }\n\n    /**\n     * @param array $data\n     */\n    private function processArrays (&$data) {\n        if (isset ($this->jsonFields) && is_array ($this->jsonFields)) {\n            foreach ($this->jsonFields as $key)\n                $data[$key] = json_decode ($data[$key]);\n        }\n\n        if (isset ($this->arrayFields) && is_array($this->arrayFields)) {\n            foreach ($this->arrayFields as $key)\n                $data[$key] = explode (\"|\", $data[$key]);\n        }\n    }\n\n    /**\n     * @param array $data\n     */\n    private function validate ($data) {\n        if (!$this->dbFields)\n            return true;\n\n        foreach ($this->dbFields as $key => $desc) {\n        \tif(in_array($key, $this->toSkip))\n        \t\tcontinue;\n\n            $type = null;\n            $required = false;\n            if (isset ($data[$key]))\n                $value = $data[$key];\n            else\n                $value = null;\n\n            if (is_array ($value))\n                continue;\n\n            if (isset ($desc[0]))\n                $type = $desc[0];\n            if (isset ($desc[1]) && ($desc[1] == 'required'))\n                $required = true;\n\n            if ($required && strlen ($value) == 0) {\n                $this->errors[] = Array ($this->dbTable . \".\" . $key => \"is required\");\n                continue;\n            }\n            if ($value == null)\n                continue;\n\n            switch ($type) {\n                case \"text\":\n                    $regexp = null;\n                    break;\n                case \"int\":\n                    $regexp = \"/^[0-9]*$/\";\n                    break;\n                case \"double\":\n                    $regexp = \"/^[0-9\\.]*$/\";\n                    break;\n                case \"bool\":\n                    $regexp = '/^(yes|no|0|1|true|false)$/i';\n                    break;\n                case \"datetime\":\n                    $regexp = \"/^[0-9a-zA-Z -:]*$/\";\n                    break;\n                default:\n                    $regexp = $type;\n                    break;\n            }\n            if (!$regexp)\n                continue;\n\n            if (!preg_match ($regexp, $value)) {\n                $this->errors[] = Array ($this->dbTable . \".\" . $key => \"$type validation failed\");\n                continue;\n            }\n        }\n        return !count ($this->errors) > 0;\n    }\n\n    private function prepareData () {\n        $this->errors = Array ();\n        $sqlData = Array();\n        if (count ($this->data) == 0)\n            return Array();\n\n        if (method_exists ($this, \"preLoad\"))\n            $this->preLoad ($this->data);\n\n        if (!$this->dbFields)\n            return $this->data;\n\n        foreach ($this->data as $key => &$value) {\n        \tif(in_array($key, $this->toSkip))\n        \t\tcontinue;\n\n            if ($value instanceof dbObject && $value->isNew == true) {\n                $id = $value->save();\n                if ($id)\n                    $value = $id;\n                else\n                    $this->errors = array_merge ($this->errors, $value->errors);\n            }\n\n            if (!in_array ($key, array_keys ($this->dbFields)))\n                continue;\n\n            if (!is_array($value) && !is_object($value)) {\n                $sqlData[$key] = $value;\n                continue;\n            }\n\n            if (isset ($this->jsonFields) && in_array ($key, $this->jsonFields))\n                $sqlData[$key] = json_encode($value);\n            else if (isset ($this->arrayFields) && in_array ($key, $this->arrayFields))\n                $sqlData[$key] = implode (\"|\", $value);\n            else\n                $sqlData[$key] = $value;\n        }\n        return $sqlData;\n    }\n\n    private static function dbObjectAutoload ($classname) {\n        $filename = static::$modelPath . $classname .\".php\";\n        if (file_exists ($filename))\n            include ($filename);\n    }\n\n    /*\n     * Enable models autoload from a specified path\n     *\n     * Calling autoload() without path will set path to dbObjectPath/models/ directory\n     *\n     * @param string $path\n     */\n    public static function autoload ($path = null) {\n        if ($path)\n            static::$modelPath = $path . \"/\";\n        else\n            static::$modelPath = __DIR__ . \"/models/\";\n        spl_autoload_register (\"dbObject::dbObjectAutoload\");\n    }\n}\n"
        },
        {
          "name": "index.php",
          "type": "blob",
          "size": 2.9375,
          "content": "<?php\nrequire_once('MysqliDb.php');\nerror_reporting(E_ALL);\n$action = 'adddb';\n$data = array();\n\nfunction printUsers () {\n    global $db;\n\n    $users = $db->get (\"users\");\n    if ($db->count == 0) {\n        echo \"<td align=center colspan=4>No users found</td>\";\n        return;\n    }\n    foreach ($users as $u) {\n        echo \"<tr>\n            <td>{$u['id']}</td>\n            <td>{$u['login']}</td>\n            <td>{$u['firstName']} {$u['lastName']}</td>\n            <td>\n                <a href='index.php?action=rm&id={$u['id']}'>rm</a> ::\n                <a href='index.php?action=mod&id={$u['id']}'>ed</a>\n            </td>\n        </tr>\";\n    }\n}\n\nfunction action_adddb () {\n    global $db;\n\n    $data = Array(\n        'login' => $_POST['login'],\n        'customerId' => 1,\n        'firstName' => $_POST['firstName'],\n        'lastName' => $_POST['lastName'],\n        'password' => $db->func('SHA1(?)',Array ($_POST['password'] . 'salt123')),\n        'createdAt' => $db->now(),\n        'expires' => $db->now('+1Y')\n    );\n    $id = $db->insert ('users', $data);\n    header (\"Location: index.php\");\n    exit;\n}\n\nfunction action_moddb () {\n    global $db;\n\n    $data = Array(\n        'login' => $_POST['login'],\n        'customerId' => 1,\n        'firstName' => $_POST['firstName'],\n        'lastName' => $_POST['lastName'],\n    );\n    $id = (int)$_POST['id'];\n    $db->where (\"customerId\",1);\n    $db->where (\"id\", $id);\n    $db->update ('users', $data);\n    header (\"Location: index.php\");\n    exit;\n\n}\nfunction action_rm () {\n    global $db;\n    $id = (int)$_GET['id'];\n    $db->where (\"customerId\",1);\n    $db->where (\"id\", $id);\n    $db->delete ('users');\n    header (\"Location: index.php\");\n    exit;\n\n}\nfunction action_mod () {\n    global $db;\n    global $data;\n    global $action;\n\n    $action = 'moddb';\n    $id = (int)$_GET['id'];\n    $db->where (\"id\", $id);\n    $data = $db->getOne (\"users\");\n}\n\n$db = new Mysqlidb ('localhost', 'root', '', 'testdb');\nif ($_GET) {\n    $f = \"action_\".$_GET['action'];\n    if (function_exists ($f)) {\n        $f();\n    }\n}\n\n?>\n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n\t<meta charset=\"utf-8\">\n\t<title>Users</title>\n</head>\n<body>\n\n<center>\n<h3>Users:</h3>\n<table width='50%'>\n    <tr bgcolor='#cccccc'>\n        <th>ID</th>\n        <th>Login</th>\n        <th>Name</th>\n        <th>Action</th>\n    </tr>\n    <?php printUsers();?>\n\n</table>\n<hr width=50%>\n<form action='index.php?action=<?php echo $action?>' method=post>\n    <input type=hidden name='id' value='<?php echo $data['id']?>'>\n    <input type=text name='login' required placeholder='Login' value='<?php echo $data['login']?>'>\n    <input type=text name='firstName' required placeholder='First Name' value='<?php echo $data['firstName']?>'>\n    <input type=text name='lastName' required placeholder='Last Name' value='<?php echo $data['lastName']?>'>\n    <input type=password name='password' placeholder='Password'>\n    <input type=submit value='New User'></td>\n</form>\n</table>\n</center>\n</body>\n</html>\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 23.2861328125,
          "content": "MysqliDb -- Simple MySQLi wrapper and object mapper with prepared statements\n<hr>\n\n### Table of Contents\n\n**[Initialization](#initialization)**  \n**[Objects mapping](#objects-mapping)**  \n**[Insert Query](#insert-query)**  \n**[Update Query](#update-query)**  \n**[Select Query](#select-query)**  \n**[Delete Query](#delete-query)**  \n**[Insert Data](#insert-data)**  \n**[Insert XML](#insert-xml)**  \n**[Pagination](#pagination)**  \n**[Running raw SQL queries](#running-raw-sql-queries)**  \n**[Query Keywords](#query-keywords)**  \n**[Where Conditions](#where--having-methods)**  \n**[Order Conditions](#ordering-method)**  \n**[Group Conditions](#grouping-method)**  \n**[Properties Sharing](#properties-sharing)**  \n**[Joining Tables](#join-method)**  \n**[Subqueries](#subqueries)**  \n**[EXISTS / NOT EXISTS condition](#exists--not-exists-condition)**  \n**[Has method](#has-method)**  \n**[Helper Methods](#helper-methods)**  \n**[Transaction Helpers](#transaction-helpers)**  \n**[Error Helpers](#error-helpers)**  \n**[Table Locking](#table-locking)**  \n\n## Support Me\n\nThis software is developed during my free time and I will be glad if somebody will support me.\n\nEveryone's time should be valuable, so please consider donating.\n\n[Donate with paypal](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=a%2ebutenka%40gmail%2ecom&lc=DO&item_name=mysqlidb&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted)\n\n### Installation\nTo utilize this class, first import MysqliDb.php into your project, and require it.\n\n```php\nrequire_once ('MysqliDb.php');\n```\n\n### Installation with composer\nIt is also possible to install library via composer\n```\ncomposer require thingengineer/mysqli-database-class:dev-master\n```\n\n### Initialization\nSimple initialization with utf8 charset set by default:\n```php\n$db = new MysqliDb ('host', 'username', 'password', 'databaseName');\n```\n\nAdvanced initialization:\n```php\n$db = new MysqliDb (Array (\n                'host' => 'host',\n                'username' => 'username', \n                'password' => 'password',\n                'db'=> 'databaseName',\n                'port' => 3306,\n                'prefix' => 'my_',\n                'charset' => 'utf8'));\n```\ntable prefix, port and database charset params are optional.\nIf no charset should be set charset, set it to null\n\nAlso it is possible to reuse already connected mysqli object:\n```php\n$mysqli = new mysqli ('host', 'username', 'password', 'databaseName');\n$db = new MysqliDb ($mysqli);\n```\n\nIf no table prefix were set during object creation its possible to set it later with a separate call:\n```php\n$db->setPrefix ('my_');\n```\n\nIf connection to mysql will be dropped Mysqlidb will try to automatically reconnect to the database once. \nTo disable this behavoir use\n```php\n$db->autoReconnect = false;\n```\n\nIf you need to get already created mysqliDb object from another class or function use\n```php\n    function init () {\n        // db staying private here\n        $db = new MysqliDb ('host', 'username', 'password', 'databaseName');\n    }\n    ...\n    function myfunc () {\n        // obtain db object created in init  ()\n        $db = MysqliDb::getInstance();\n        ...\n    }\n```\n\n### Multiple database connection\nIf you need to connect to multiple databases use following method:\n```php\n$db->addConnection('slave', Array (\n                'host' => 'host',\n                'username' => 'username',\n                'password' => 'password',\n                'db'=> 'databaseName',\n                'port' => 3306,\n                'prefix' => 'my_',\n                'charset' => 'utf8')\n);\n```\nTo select database use connection() method\n```php\n$users = $db->connection('slave')->get('users');\n```\n\n### Objects mapping\ndbObject.php is an object mapping library built on top of mysqliDb to provide model representation functionality.\nSee <a href='dbObject.md'>dbObject manual for more information</a>\n\n### Insert Query\nSimple example\n```php\n$data = Array (\"login\" => \"admin\",\n               \"firstName\" => \"John\",\n               \"lastName\" => 'Doe'\n);\n$id = $db->insert ('users', $data);\nif($id)\n    echo 'user was created. Id=' . $id;\n```\n\nInsert with functions use\n```php\n$data = Array (\n\t'login' => 'admin',\n    'active' => true,\n\t'firstName' => 'John',\n\t'lastName' => 'Doe',\n\t'password' => $db->func('SHA1(?)',Array (\"secretpassword+salt\")),\n\t// password = SHA1('secretpassword+salt')\n\t'createdAt' => $db->now(),\n\t// createdAt = NOW()\n\t'expires' => $db->now('+1Y')\n\t// expires = NOW() + interval 1 year\n\t// Supported intervals [s]econd, [m]inute, [h]hour, [d]day, [M]onth, [Y]ear\n);\n\n$id = $db->insert ('users', $data);\nif ($id)\n    echo 'user was created. Id=' . $id;\nelse\n    echo 'insert failed: ' . $db->getLastError();\n```\n\nInsert with on duplicate key update\n```php\n$data = Array (\"login\" => \"admin\",\n               \"firstName\" => \"John\",\n               \"lastName\" => 'Doe',\n               \"createdAt\" => $db->now(),\n               \"updatedAt\" => $db->now(),\n);\n$updateColumns = Array (\"updatedAt\");\n$lastInsertId = \"id\";\n$db->onDuplicate($updateColumns, $lastInsertId);\n$id = $db->insert ('users', $data);\n```\n\nInsert multiple datasets at once\n```php\n$data = Array(\n    Array (\"login\" => \"admin\",\n        \"firstName\" => \"John\",\n        \"lastName\" => 'Doe'\n    ),\n    Array (\"login\" => \"other\",\n        \"firstName\" => \"Another\",\n        \"lastName\" => 'User',\n        \"password\" => \"very_cool_hash\"\n    )\n);\n$ids = $db->insertMulti('users', $data);\nif(!$ids) {\n    echo 'insert failed: ' . $db->getLastError();\n} else {\n    echo 'new users inserted with following id\\'s: ' . implode(', ', $ids);\n}\n```\n\nIf all datasets only have the same keys, it can be simplified\n```php\n$data = Array(\n    Array (\"admin\", \"John\", \"Doe\"),\n    Array (\"other\", \"Another\", \"User\")\n);\n$keys = Array(\"login\", \"firstName\", \"lastName\");\n\n$ids = $db->insertMulti('users', $data, $keys);\nif(!$ids) {\n    echo 'insert failed: ' . $db->getLastError();\n} else {\n    echo 'new users inserted with following id\\'s: ' . implode(', ', $ids);\n}\n```\n\n### Replace Query\n<a href='https://dev.mysql.com/doc/refman/5.0/en/replace.html'>Replace()</a> method implements same API as insert();\n\n### Update Query\n```php\n$data = Array (\n\t'firstName' => 'Bobby',\n\t'lastName' => 'Tables',\n\t'editCount' => $db->inc(2),\n\t// editCount = editCount + 2;\n\t'active' => $db->not()\n\t// active = !active;\n);\n$db->where ('id', 1);\nif ($db->update ('users', $data))\n    echo $db->count . ' records were updated';\nelse\n    echo 'update failed: ' . $db->getLastError();\n```\n\n`update()` also support limit parameter:\n```php\n$db->update ('users', $data, 10);\n// Gives: UPDATE users SET ... LIMIT 10\n```\n\n### Select Query\nAfter any select/get function calls amount or returned rows is stored in $count variable\n```php\n$users = $db->get('users'); //contains an Array of all users \n$users = $db->get('users', 10); //contains an Array 10 users\n```\n\nor select with custom columns set. Functions also could be used\n\n```php\n$cols = Array (\"id\", \"name\", \"email\");\n$users = $db->get (\"users\", null, $cols);\nif ($db->count > 0)\n    foreach ($users as $user) { \n        print_r ($user);\n    }\n```\n\nor select just one row\n\n```php\n$db->where (\"id\", 1);\n$user = $db->getOne (\"users\");\necho $user['id'];\n\n$stats = $db->getOne (\"users\", \"sum(id), count(*) as cnt\");\necho \"total \".$stats['cnt']. \"users found\";\n```\n\nor select one column value or function result\n\n```php\n$count = $db->getValue (\"users\", \"count(*)\");\necho \"{$count} users found\";\n```\n\nselect one column value or function result from multiple rows:\n```php\n$logins = $db->getValue (\"users\", \"login\", null);\n// select login from users\n$logins = $db->getValue (\"users\", \"login\", 5);\n// select login from users limit 5\nforeach ($logins as $login)\n    echo $login;\n```\n\n### Insert Data\nYou can also load .CSV or .XML data into a specific table.\nTo insert .csv data, use the following syntax:\n```php\n$path_to_file = \"/home/john/file.csv\";\n$db->loadData(\"users\", $path_to_file);\n```\nThis will load a .csv file called **file.csv** in the folder **/home/john/** (john's home directory.)\nYou can also attach an optional array of options.\nValid options are:\n\n```php\nArray(\n\t\"fieldChar\" => ';', \t// Char which separates the data\n\t\"lineChar\" => '\\r\\n', \t// Char which separates the lines\n\t\"linesToIgnore\" => 1\t// Amount of lines to ignore at the beginning of the import\n);\n```\n\nAttach them using\n```php\n$options = Array(\"fieldChar\" => ';', \"lineChar\" => '\\r\\n', \"linesToIgnore\" => 1);\n$db->loadData(\"users\", \"/home/john/file.csv\", $options);\n// LOAD DATA ...\n```\n\nYou can specify to **use LOCAL DATA** instead of **DATA**:\n```php\n$options = Array(\"fieldChar\" => ';', \"lineChar\" => '\\r\\n', \"linesToIgnore\" => 1, \"loadDataLocal\" => true);\n$db->loadData(\"users\", \"/home/john/file.csv\", $options);\n// LOAD DATA LOCAL ...\n```\n\n### Insert XML\nTo load XML data into a table, you can use the method **loadXML**.\nThe syntax is smillar to the loadData syntax.\n```php\n$path_to_file = \"/home/john/file.xml\";\n$db->loadXML(\"users\", $path_to_file);\n```\n\nYou can also add optional parameters.\nValid parameters:\n```php\nArray(\n\t\"linesToIgnore\" => 0,\t\t// Amount of lines / rows to ignore at the beginning of the import\n\t\"rowTag\"\t=> \"<user>\"\t// The tag which marks the beginning of an entry\n)\n```\n\nUsage:\n```php\n$options = Array(\"linesToIgnore\" => 0, \"rowTag\"\t=> \"<user>\"):\n$path_to_file = \"/home/john/file.xml\";\n$db->loadXML(\"users\", $path_to_file, $options);\n```\n\n### Pagination\nUse paginate() instead of get() to fetch paginated result\n```php\n$page = 1;\n// set page limit to 2 results per page. 20 by default\n$db->pageLimit = 2;\n$products = $db->arraybuilder()->paginate(\"products\", $page);\necho \"showing $page out of \" . $db->totalPages;\n\n```\n\n### Result transformation / map\nInstead of getting an pure array of results its possible to get result in an associative array with a needed key. If only 2 fields to fetch will be set in get(),\nmethod will return result in array($k => $v) and array ($k => array ($v, $v)) in rest of the cases.\n\n```php\n$user = $db->map ('login')->ObjectBuilder()->getOne ('users', 'login, id');\nArray\n(\n    [user1] => 1\n)\n\n$user = $db->map ('login')->ObjectBuilder()->getOne ('users', 'id,login,createdAt');\nArray\n(\n    [user1] => stdClass Object\n        (\n            [id] => 1\n            [login] => user1\n            [createdAt] => 2015-10-22 22:27:53\n        )\n\n)\n```\n\n### Defining a return type\nMysqliDb can return result in 3 different formats: Array of Array, Array of Objects and a Json string. To select a return type use ArrayBuilder(), ObjectBuilder() and JsonBuilder() methods. Note that ArrayBuilder() is a default return type\n```php\n// Array return type\n$u= $db->getOne(\"users\");\necho $u['login'];\n// Object return type\n$u = $db->ObjectBuilder()->getOne(\"users\");\necho $u->login;\n// Json return type\n$json = $db->JsonBuilder()->getOne(\"users\");\n```\n\n### Running raw SQL queries\n```php\n$users = $db->rawQuery('SELECT * from users where id >= ?', Array (10));\nforeach ($users as $user) {\n    print_r ($user);\n}\n```\nTo avoid long if checks there are couple helper functions to work with raw query select results:\n\nGet 1 row of results:\n```php\n$user = $db->rawQueryOne('SELECT * from users where id=?', Array(10));\necho $user['login'];\n// Object return type\n$user = $db->ObjectBuilder()->rawQueryOne('SELECT * from users where id=?', Array(10));\necho $user->login;\n```\nGet 1 column value as a string:\n```php\n$password = $db->rawQueryValue('SELECT password from users where id=? limit 1', Array(10));\necho \"Password is {$password}\";\nNOTE: for a rawQueryValue() to return string instead of an array 'limit 1' should be added to the end of the query.\n```\nGet 1 column value from multiple rows:\n```php\n$logins = $db->rawQueryValue('SELECT login from users limit 10');\nforeach ($logins as $login)\n    echo $login;\n```\n\nMore advanced examples:\n```php\n$params = Array(1, 'admin');\n$users = $db->rawQuery(\"SELECT id, firstName, lastName FROM users WHERE id = ? AND login = ?\", $params);\nprint_r($users); // contains Array of returned rows\n\n// will handle any SQL query\n$params = Array(10, 1, 10, 11, 2, 10);\n$q = \"(\n    SELECT a FROM t1\n        WHERE a = ? AND B = ?\n        ORDER BY a LIMIT ?\n) UNION (\n    SELECT a FROM t2 \n        WHERE a = ? AND B = ?\n        ORDER BY a LIMIT ?\n)\";\n$results = $db->rawQuery ($q, $params);\nprint_r ($results); // contains Array of returned rows\n```\n\n### Where / Having Methods\n`where()`, `orWhere()`, `having()` and `orHaving()` methods allows you to specify where and having conditions of the query. All conditions supported by where() are supported by having() as well.\n\nWARNING: In order to use column to column comparisons only raw where conditions should be used as column name or functions cannot be passed as a bind variable.\n\nRegular == operator with variables:\n```php\n$db->where ('id', 1);\n$db->where ('login', 'admin');\n$results = $db->get ('users');\n// Gives: SELECT * FROM users WHERE id=1 AND login='admin';\n\n// Or you can also use Chain Loaders for above query\n$results = $db->where ('id', 1)\n                ->where ('login', 'admin')\n                ->get('users');\n```\n\n```php\n$db->where ('id', 1);\n$db->having ('login', 'admin');\n$results = $db->get ('users');\n// Gives: SELECT * FROM users WHERE id=1 HAVING login='admin';\n```\n\n\nRegular == operator with column to column comparison:\n```php\n// WRONG\n$db->where ('lastLogin', 'createdAt');\n// CORRECT\n$db->where ('lastLogin = createdAt');\n$results = $db->get ('users');\n// Gives: SELECT * FROM users WHERE lastLogin = createdAt;\n```\n\n```php\n$db->where ('id', 50, \">=\");\n// or $db->where ('id', Array ('>=' => 50));\n$results = $db->get ('users');\n// Gives: SELECT * FROM users WHERE id >= 50;\n```\n\nBETWEEN / NOT BETWEEN:\n```php\n$db->where('id', Array (4, 20), 'BETWEEN');\n// or $db->where ('id', Array ('BETWEEN' => Array(4, 20)));\n\n$results = $db->get('users');\n// Gives: SELECT * FROM users WHERE id BETWEEN 4 AND 20\n```\n\nIN / NOT IN:\n```php\n$db->where('id', Array(1, 5, 27, -1, 'd'), 'IN');\n// or $db->where('id', Array( 'IN' => Array(1, 5, 27, -1, 'd') ) );\n\n$results = $db->get('users');\n// Gives: SELECT * FROM users WHERE id IN (1, 5, 27, -1, 'd');\n```\n\nOR CASE:\n```php\n$db->where ('firstName', 'John');\n$db->orWhere ('firstName', 'Peter');\n$results = $db->get ('users');\n// Gives: SELECT * FROM users WHERE firstName='John' OR firstName='peter'\n```\n\nNULL comparison:\n```php\n$db->where (\"lastName\", NULL, 'IS NOT');\n$results = $db->get(\"users\");\n// Gives: SELECT * FROM users where lastName IS NOT NULL\n```\n\nLIKE comparison:\n```php\n$db->where (\"fullName\", 'John%', 'like');\n$results = $db->get(\"users\");\n// Gives: SELECT * FROM users where fullName like 'John%'\n```\n\nAlso you can use raw where conditions:\n```php\n$db->where (\"id != companyId\");\n$db->where (\"DATE(createdAt) = DATE(lastLogin)\");\n$results = $db->get(\"users\");\n```\n\nOr raw condition with variables:\n```php\n$db->where (\"(id = ? or id = ?)\", Array(6,2));\n$db->where (\"login\",\"mike\");\n$res = $db->get (\"users\");\n// Gives: SELECT * FROM users WHERE (id = 6 or id = 2) and login='mike';\n```\n\n\nFind the total number of rows matched. Simple pagination example:\n```php\n$offset = 10;\n$count = 15;\n$users = $db->withTotalCount()->get('users', Array ($offset, $count));\necho \"Showing {$count} from {$db->totalCount}\";\n```\n\n### Query Keywords\nTo add LOW PRIORITY | DELAYED | HIGH PRIORITY | IGNORE and the rest of the mysql keywords to INSERT (), REPLACE (), GET (), UPDATE (), DELETE() method or FOR UPDATE | LOCK IN SHARE MODE into SELECT ():\n```php\n$db->setQueryOption ('LOW_PRIORITY')->insert ($table, $param);\n// GIVES: INSERT LOW_PRIORITY INTO table ...\n```\n```php\n$db->setQueryOption ('FOR UPDATE')->get ('users');\n// GIVES: SELECT * FROM USERS FOR UPDATE;\n```\n\nAlso you can use an array of keywords:\n```php\n$db->setQueryOption (Array('LOW_PRIORITY', 'IGNORE'))->insert ($table,$param);\n// GIVES: INSERT LOW_PRIORITY IGNORE INTO table ...\n```\n\nSame way keywords could be used in SELECT queries as well:\n```php\n$db->setQueryOption ('SQL_NO_CACHE');\n$db->get(\"users\");\n// GIVES: SELECT SQL_NO_CACHE * FROM USERS;\n```\n\nOptionally you can use method chaining to call where multiple times without referencing your object over and over:\n\n```php\n$results = $db\n\t->where('id', 1)\n\t->where('login', 'admin')\n\t->get('users');\n```\n\n### Delete Query\n```php\n$db->where('id', 1);\nif($db->delete('users')) echo 'successfully deleted';\n```\n\n\n### Ordering method\n```php\n$db->orderBy(\"id\",\"asc\");\n$db->orderBy(\"login\",\"Desc\");\n$db->orderBy(\"RAND ()\");\n$results = $db->get('users');\n// Gives: SELECT * FROM users ORDER BY id ASC,login DESC, RAND ();\n```\n\nOrder by values example:\n```php\n$db->orderBy('userGroup', 'ASC', array('superuser', 'admin', 'users'));\n$db->get('users');\n// Gives: SELECT * FROM users ORDER BY FIELD (userGroup, 'superuser', 'admin', 'users') ASC;\n```\n\nIf you are using setPrefix () functionality and need to use table names in orderBy() method make sure that table names are escaped with ``.\n\n```php\n$db->setPrefix (\"t_\");\n$db->orderBy (\"users.id\",\"asc\");\n$results = $db->get ('users');\n// WRONG: That will give: SELECT * FROM t_users ORDER BY users.id ASC;\n\n$db->setPrefix (\"t_\");\n$db->orderBy (\"`users`.id\", \"asc\");\n$results = $db->get ('users');\n// CORRECT: That will give: SELECT * FROM t_users ORDER BY t_users.id ASC;\n```\n\n### Grouping method\n```php\n$db->groupBy (\"name\");\n$results = $db->get ('users');\n// Gives: SELECT * FROM users GROUP BY name;\n```\n\n### JOIN method\nJoin table products with table users with LEFT JOIN by tenantID\n```php\n$db->join(\"users u\", \"p.tenantID=u.tenantID\", \"LEFT\");\n$db->where(\"u.id\", 6);\n$products = $db->get (\"products p\", null, \"u.name, p.productName\");\nprint_r ($products);\n// Gives: SELECT u.name, p.productName FROM products p LEFT JOIN users u ON p.tenantID=u.tenantID WHERE u.id = 6\n```\n\n### Join Conditions\nAdd AND condition to join statement\n```php\n$db->join(\"users u\", \"p.tenantID=u.tenantID\", \"LEFT\");\n$db->joinWhere(\"users u\", \"u.tenantID\", 5);\n$products = $db->get (\"products p\", null, \"u.name, p.productName\");\nprint_r ($products);\n// Gives: SELECT  u.name, p.productName FROM products p LEFT JOIN users u ON (p.tenantID=u.tenantID AND u.tenantID = 5)\n```\nAdd OR condition to join statement\n```php\n$db->join(\"users u\", \"p.tenantID=u.tenantID\", \"LEFT\");\n$db->joinOrWhere(\"users u\", \"u.tenantID\", 5);\n$products = $db->get (\"products p\", null, \"u.name, p.productName\");\nprint_r ($products);\n// Gives: SELECT  u.login, p.productName FROM products p LEFT JOIN users u ON (p.tenantID=u.tenantID OR u.tenantID = 5)\n```\n\n### Properties sharing\nIt is also possible to copy properties\n\n```php\n$db->where (\"agentId\", 10);\n$db->where (\"active\", true);\n\n$customers = $db->copy ();\n$res = $customers->get (\"customers\", Array (10, 10));\n// SELECT * FROM customers WHERE agentId = 10 AND active = 1 LIMIT 10, 10\n\n$cnt = $db->getValue (\"customers\", \"count(id)\");\necho \"total records found: \" . $cnt;\n// SELECT count(id) FROM customers WHERE agentId = 10 AND active = 1\n```\n\n### Subqueries\nSubquery init\n\nSubquery init without an alias to use in inserts/updates/where Eg. (select * from users)\n```php\n$sq = $db->subQuery();\n$sq->get (\"users\");\n```\n \nA subquery with an alias specified to use in JOINs . Eg. (select * from users) sq\n```php\n$sq = $db->subQuery(\"sq\");\n$sq->get (\"users\");\n```\n\nSubquery in selects:\n```php\n$ids = $db->subQuery ();\n$ids->where (\"qty\", 2, \">\");\n$ids->get (\"products\", null, \"userId\");\n\n$db->where (\"id\", $ids, 'in');\n$res = $db->get (\"users\");\n// Gives SELECT * FROM users WHERE id IN (SELECT userId FROM products WHERE qty > 2)\n```\n\nSubquery in inserts:\n```php\n$userIdQ = $db->subQuery ();\n$userIdQ->where (\"id\", 6);\n$userIdQ->getOne (\"users\", \"name\"),\n\n$data = Array (\n    \"productName\" => \"test product\",\n    \"userId\" => $userIdQ,\n    \"lastUpdated\" => $db->now()\n);\n$id = $db->insert (\"products\", $data);\n// Gives INSERT INTO PRODUCTS (productName, userId, lastUpdated) values (\"test product\", (SELECT name FROM users WHERE id = 6), NOW());\n```\n\nSubquery in joins:\n```php\n$usersQ = $db->subQuery (\"u\");\n$usersQ->where (\"active\", 1);\n$usersQ->get (\"users\");\n\n$db->join($usersQ, \"p.userId=u.id\", \"LEFT\");\n$products = $db->get (\"products p\", null, \"u.login, p.productName\");\nprint_r ($products);\n// SELECT u.login, p.productName FROM products p LEFT JOIN (SELECT * FROM t_users WHERE active = 1) u on p.userId=u.id;\n```\n\n### EXISTS / NOT EXISTS condition\n```php\n$sub = $db->subQuery();\n$sub->where(\"company\", 'testCompany');\n$sub->get (\"users\", null, 'userId');\n$db->where (null, $sub, 'exists');\n$products = $db->get (\"products\");\n// Gives SELECT * FROM products WHERE EXISTS (SELECT userId FROM users WHERE company='testCompany')\n```\n\n### Has method\nA convenient function that returns TRUE if exists at least an element that satisfy the where condition specified calling the \"where\" method before this one.\n```php\n$db->where(\"user\", $user);\n$db->where(\"password\", md5($password));\nif($db->has(\"users\")) {\n    return \"You are logged\";\n} else {\n    return \"Wrong user/password\";\n}\n``` \n### Helper methods\nDisconnect from the database:\n```php\n    $db->disconnect();\n```\n\nReconnect in case mysql connection died:\n```php\nif (!$db->ping())\n    $db->connect()\n```\n\nGet last executed SQL query:\nPlease note that this method returns the SQL query only for debugging purposes as its execution most likely will fail due to missing quotes around char variables.\n```php\n    $db->get('users');\n    echo \"Last executed query was \". $db->getLastQuery();\n```\n\nCheck if table exists:\n```php\n    if ($db->tableExists ('users'))\n        echo \"hooray\";\n```\n\nmysqli_real_escape_string() wrapper:\n```php\n    $escaped = $db->escape (\"' and 1=1\");\n```\n\n### Transaction helpers\nPlease keep in mind that transactions are working on innoDB tables.\nRollback transaction if insert fails:\n```php\n$db->startTransaction();\n...\nif (!$db->insert ('myTable', $insertData)) {\n    //Error while saving, cancel new record\n    $db->rollback();\n} else {\n    //OK\n    $db->commit();\n}\n```\n\n\n### Error helpers\nAfter you executed a query you have options to check if there was an error. You can get the MySQL error string or the error code for the last executed query. \n```php\n$db->where('login', 'admin')->update('users', ['firstName' => 'Jack']);\n\nif ($db->getLastErrno() === 0)\n    echo 'Update succesfull';\nelse\n    echo 'Update failed. Error: '. $db->getLastError();\n```\n\n### Query execution time benchmarking\nTo track query execution time setTrace() function should be called.\n```php\n$db->setTrace (true);\n// As a second parameter it is possible to define prefix of the path which should be striped from filename\n// $db->setTrace (true, $_SERVER['SERVER_ROOT']);\n$db->get(\"users\");\n$db->get(\"test\");\nprint_r ($db->trace);\n```\n\n```\n    [0] => Array\n        (\n            [0] => SELECT  * FROM t_users ORDER BY `id` ASC\n            [1] => 0.0010669231414795\n            [2] => MysqliDb->get() >>  file \"/avb/work/PHP-MySQLi-Database-Class/tests.php\" line #151\n        )\n\n    [1] => Array\n        (\n            [0] => SELECT  * FROM t_test\n            [1] => 0.00069189071655273\n            [2] => MysqliDb->get() >>  file \"/avb/work/PHP-MySQLi-Database-Class/tests.php\" line #152\n        )\n\n```\n\n### Table Locking\nTo lock tables, you can use the **lock** method together with **setLockMethod**. \nThe following example will lock the table **users** for **write** access.\n```php\n$db->setLockMethod(\"WRITE\")->lock(\"users\");\n```\n\nCalling another **->lock()** will remove the first lock.\nYou can also use\n```php\n$db->unlock();\n```\nto unlock the previous locked tables.\nTo lock multiple tables, you can use an array.\nExample:\n```php\n$db->setLockMethod(\"READ\")->lock(array(\"users\", \"log\"));\n```\nThis will lock the tables **users** and **log** for **READ** access only.\nMake sure you use **unlock()* afterwards or your tables will remain locked!\n\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}