{
  "metadata": {
    "timestamp": 1736711807342,
    "page": 90,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "symfony/contracts",
      "stars": 3877,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0205078125,
          "content": "/.git* export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "composer.lock\nphpunit.xml\nvendor/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.3251953125,
          "content": "CHANGELOG\n=========\n\n3.6\n---\n\n * Make `HttpClientTestCase` and `TranslatorTest` compatible with PHPUnit 10+\n\n3.5\n---\n\n * Add `ServiceCollectionInterface`\n * Deprecate `ServiceSubscriberTrait`, use `ServiceMethodsSubscriberTrait` instead\n\n3.4\n---\n\n * Allow custom working directory in `TestHttpServer`\n\n3.3\n---\n\n * Add option `crypto_method` to `HttpClientInterface` to define the minimum TLS version to accept\n\n3.2\n---\n\n * Allow `ServiceSubscriberInterface::getSubscribedServices()` to return `SubscribedService[]`\n\n3.0\n---\n\n * Bump to PHP 8 minimum\n * Add native return types\n * Remove deprecated features\n\n2.5\n---\n\n *  Add `SubscribedService` attribute, deprecate current `ServiceSubscriberTrait` usage\n\n2.4\n---\n\n * Add `HttpClientInterface::withOptions()`\n * Add `TranslatorInterface::getLocale()`\n\n2.3.0\n-----\n\n * added `Translation\\TranslatableInterface` to enable value-objects to be translated\n * made `Translation\\TranslatorTrait::getLocale()` fallback to intl's `Locale::getDefault()` when available\n\n2.2.0\n-----\n\n * added `Service\\Attribute\\Required` attribute for PHP 8\n\n2.1.3\n-----\n\n * fixed compat with PHP 8\n\n2.1.0\n-----\n\n * added \"symfony/deprecation-contracts\"\n\n2.0.1\n-----\n\n * added `/json` endpoints to the test mock HTTP server\n\n2.0.0\n-----\n\n * bumped minimum PHP version to 7.2 and added explicit type hints\n * made \"psr/event-dispatcher\" a required dependency of \"symfony/event-dispatcher-contracts\"\n * made \"symfony/http-client-contracts\" not experimental anymore\n\n1.1.9\n-----\n\n * fixed compat with PHP 8\n\n1.1.0\n-----\n\n * added `HttpClient` namespace with contracts for implementing flexible HTTP clients\n * added `EventDispatcherInterface` and `Event` in namespace `EventDispatcher`\n * added `ServiceProviderInterface` in namespace `Service`\n\n1.0.0\n-----\n\n * added `Service\\ResetInterface` to provide a way to reset an object to its initial state\n * added `Translation\\TranslatorInterface` and `Translation\\TranslatorTrait`\n * added `Cache` contract to extend PSR-6 with tag invalidation, callback-based computation and stampede protection\n * added `Service\\ServiceSubscriberInterface` to declare the dependencies of a class that consumes a service locator\n * added `Service\\ServiceSubscriberTrait` to implement `Service\\ServiceSubscriberInterface` using methods' return types\n * added `Service\\ServiceLocatorTrait` to help implement PSR-11 service locators\n"
        },
        {
          "name": "Cache",
          "type": "tree",
          "content": null
        },
        {
          "name": "Deprecation",
          "type": "tree",
          "content": null
        },
        {
          "name": "EventDispatcher",
          "type": "tree",
          "content": null
        },
        {
          "name": "HttpClient",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (c) 2018-present Fabien Potencier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.2939453125,
          "content": "Symfony Contracts\n=================\n\nA set of abstractions extracted out of the Symfony components.\n\nCan be used to build on semantics that the Symfony components proved useful - and\nthat already have battle tested implementations.\n\nDesign Principles\n-----------------\n\n * contracts are split by domain, each into their own sub-namespaces;\n * contracts are small and consistent sets of PHP interfaces, traits, normative\n   docblocks and reference test suites when applicable;\n * all contracts must have a proven implementation to enter this repository;\n * they must be backward compatible with existing Symfony components.\n\nPackages that implement specific contracts should list them in the \"provide\"\nsection of their \"composer.json\" file, using the `symfony/*-implementation`\nconvention (e.g. `\"provide\": { \"symfony/cache-implementation\": \"1.0\" }`).\n\nFAQ\n---\n\n### How to use this package?\n\nThe abstractions in this package are useful to achieve loose coupling and\ninteroperability. By using the provided interfaces as type hints, you are able\nto reuse any implementations that match their contracts. It could be a Symfony\ncomponent, or another one provided by the PHP community at large.\n\nDepending on their semantics, some interfaces can be combined with autowiring to\nseamlessly inject a service in your classes.\n\nOthers might be useful as labeling interfaces, to hint about a specific behavior\nthat could be enabled when using autoconfiguration or manual service tagging (or\nany other means provided by your framework.)\n\n### How is this different from PHP-FIG's PSRs?\n\nWhen applicable, the provided contracts are built on top of PHP-FIG's PSRs. But\nthe group has different goals and different processes. Here, we're focusing on\nproviding abstractions that are useful on their own while still compatible with\nimplementations provided by Symfony. Although not the main target, we hope that\nthe declared contracts will directly or indirectly contribute to the PHP-FIG.\n\nResources\n---------\n\n * [Documentation](https://symfony.com/doc/current/components/contracts.html)\n * [Contributing](https://symfony.com/doc/current/contributing/index.html)\n * [Report issues](https://github.com/symfony/symfony/issues) and\n   [send Pull Requests](https://github.com/symfony/symfony/pulls)\n   in the [main Symfony repository](https://github.com/symfony/symfony)\n"
        },
        {
          "name": "Service",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "Translation",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.4814453125,
          "content": "{\n    \"name\": \"symfony/contracts\",\n    \"type\": \"library\",\n    \"description\": \"A set of abstractions extracted out of the Symfony components\",\n    \"keywords\": [\"abstractions\", \"contracts\", \"decoupling\", \"interfaces\", \"interoperability\", \"standards\", \"dev\"],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Nicolas Grekas\",\n            \"email\": \"p@tchwork.com\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=8.1\",\n        \"psr/cache\": \"^3.0\",\n        \"psr/container\": \"^1.1|^2.0\",\n        \"psr/event-dispatcher\": \"^1.0\"\n    },\n    \"require-dev\": {\n        \"symfony/polyfill-intl-idn\": \"^1.10\"\n    },\n    \"conflict\": {\n        \"ext-psr\": \"<1.1|>=2\"\n    },\n    \"replace\": {\n        \"symfony/cache-contracts\": \"self.version\",\n        \"symfony/deprecation-contracts\": \"self.version\",\n        \"symfony/event-dispatcher-contracts\": \"self.version\",\n        \"symfony/http-client-contracts\": \"self.version\",\n        \"symfony/service-contracts\": \"self.version\",\n        \"symfony/translation-contracts\": \"self.version\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Symfony\\\\Contracts\\\\\": \"\" },\n        \"files\": [ \"Deprecation/function.php\" ],\n        \"exclude-from-classmap\": [\n            \"**/Tests/\"\n        ]\n    },\n    \"minimum-stability\": \"dev\",\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-main\": \"3.6-dev\"\n        }\n    }\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.9990234375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"http://schema.phpunit.de/9.3/phpunit.xsd\"\n         backupGlobals=\"false\"\n         colors=\"true\"\n         bootstrap=\"vendor/autoload.php\"\n         failOnRisky=\"true\"\n         failOnWarning=\"true\"\n>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\" />\n    </php>\n\n    <testsuites>\n        <testsuite name=\"Symfony Contracts Test Suite\">\n            <directory>./Tests/</directory>\n            <directory>./Service/Test/</directory>\n            <directory>./Translation/Test/</directory>\n        </testsuite>\n    </testsuites>\n\n    <coverage>\n        <include>\n            <directory>./</directory>\n        </include>\n        <exclude>\n            <directory>./Tests</directory>\n            <directory>./Service/Test/</directory>\n            <directory>./Translation/Test/</directory>\n            <directory>./vendor</directory>\n        </exclude>\n    </coverage>\n\n</phpunit>\n"
        }
      ]
    }
  ]
}