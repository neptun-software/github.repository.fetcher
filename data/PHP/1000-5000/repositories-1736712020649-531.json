{
  "metadata": {
    "timestamp": 1736712020649,
    "page": 531,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "antonioribeiro/countries",
      "stars": 1847,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0859375,
          "content": "/vendor\n/coverage\n/tmp\n/src/data/tmp\n/src/data/third-party/\ncomposer.phar\ncomposer.lock\n"
        },
        {
          "name": ".php_cs.dist",
          "type": "blob",
          "size": 0.2275390625,
          "content": "<?php\n\n$finder = PhpCsFixer\\Finder::create()\n    ->in(__DIR__.'/src')\n;\n\nreturn PhpCsFixer\\Config::create()\n    ->setRules([\n        '@PSR2' => true,\n        'array_syntax' => ['syntax' => 'short'],\n    ])\n    ->setFinder($finder)\n;\n"
        },
        {
          "name": ".scrutinizer.yml",
          "type": "blob",
          "size": 0.5859375,
          "content": "checks:\n    php:\n        remove_extra_empty_lines: true\n        remove_php_closing_tag: true\n        remove_trailing_whitespace: true\n        fix_use_statements:\n            remove_unused: true\n            preserve_multiple: false\n            preserve_blanklines: true\n            order_alphabetically: true\n        fix_php_opening_tag: true\n        fix_linefeed: true\n        fix_line_ending: true\n        fix_identation_4spaces: true\n        fix_doc_comments: true\n\nfilter:\n     paths: [src/*]\n     excluded_paths: [\"tests/*\"]\n\ncoding_style:\n     php: {  }\n\ntools:\n    external_code_coverage: true\n"
        },
        {
          "name": ".styleci.yml",
          "type": "blob",
          "size": 0.015625,
          "content": "preset: laravel\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.0908203125,
          "content": "language: php\n\nphp:\n#  - 7.0\n  - 7.1\n  - 7.2\n  - 7.3\n  - 7.4\n# - nightly\n\nenv:\n  matrix:\n    - COMPOSER_FLAGS=\"\"\n\n# This triggers builds to run on the new TravisCI infrastructure.\n# See: http://docs.travis-ci.com/user/workers/container-based-infrastructure/\nsudo: false\n\n## Cache composer\ncache:\n  directories:\n    - $HOME/.composer/cache\n\n## Disable Xdebug on all PHP versions except those ones below\nbefore_script:\n  - '[[ \"$TRAVIS_PHP_VERSION\" == \"7.3\" || \"$TRAVIS_PHP_VERSION\" == \"nightly\" || \"$TRAVIS_PHP_VERSION\" == \"7.4snapshot\" ]] || phpenv config-rm xdebug.ini'\n  - travis_retry composer self-update\n  - travis_retry composer update ${COMPOSER_FLAGS} --no-interaction --prefer-dist\n# - '[[ \"$TRAVIS_PHP_VERSION\" == \"7.4snapshot\" ]] && composer require nette/finder:\"dev-master\" --no-interaction --prefer-dist || echo done'\n\nscript:\n  - travis_wait vendor/bin/phpunit --coverage-clover=coverage.clover\n\nafter_script:\n  - |\n    if [[ \"$TRAVIS_PHP_VERSION\" == '7.2' ]]; then\n      wget https://scrutinizer-ci.com/ocular.phar\n      php ocular.phar code-coverage:upload --format=php-clover coverage.clover\n    fi\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.6171875,
          "content": "# Changelog\n\n## 0.7.0 - 2019-09-19\n### Updated\n- Strings, arrays and collection helpers\n### Removed \n- PHP 7.0 support\n\n## 0.6.0 - 2018-08-19\n### Fixed\n- flag-icon tag\n### Changed \n- Countries service directory\n\n## 0.5.7 - 2018-03-13\n### Fixed\n- Missing Exception class\n\n## 0.5.5 - 2018-02-17\n### Changed\n- Removed hard coded cache set to 10 minutes\n\n## 0.5.0 - 2018-01-22\n### Changed\n- Package is now PHP agnostic\n- Laravel version is now pragmarx/countries-laravel\n\n## 0.1.0 - 2017-02-13\n### Added\n- First version\n\n## 0.1.1 - 2017-03-07\n### Added\n- Validation rules\n- Language filtering\n- Currency filtering\n- Dynamic where calls\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.458984375,
          "content": "Copyright (c) 2016, Antonio Carlos Ribeiro\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.544921875,
          "content": "<h1 align=\"center\">\n    Countries\n</h1>\n\n![World Map](docs/world-map-political-of-the-2013-nations-online-project-best.jpg)\n\n<p align=\"center\">\n    <a href=\"https://packagist.org/packages/pragmarx/countries\"><img alt=\"Latest Stable Version\" src=\"https://img.shields.io/packagist/v/pragmarx/countries.svg?style=flat-square\"></a>\n    <a href=\"/antonioribeiro/countries/blob/master/LICENSE.md\"><img alt=\"License\" src=\"https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square\"></a>\n    <a href=\"https://scrutinizer-yaml.com/g/antonioribeiro/countries/?branch=master\"><img alt=\"Code Quality\" src=\"https://img.shields.io/scrutinizer/g/antonioribeiro/countries.svg?style=flat-square\"></a>\n    <a href=\"https://scrutinizer-yaml.com/g/antonioribeiro/countries/?branch=master\"><img alt=\"Build\" src=\"https://img.shields.io/scrutinizer/build/g/antonioribeiro/countries.svg?style=flat-square\"></a>\n</p>\n<p align=\"center\">\n    <a href=\"https://scrutinizer-yaml.com/g/antonioribeiro/countries/?branch=master\"><img alt=\"Coverage\" src=\"https://img.shields.io/scrutinizer/coverage/g/antonioribeiro/countries.svg?style=flat-square\"></a>\n    <a href=\"https://travis-ci.org/antonioribeiro/countries\"><img alt=\"PHP\" src=\"https://img.shields.io/badge/PHP-7.0%20%7C%207.1%20%7C%207.2%20%7C%207.3-green.svg?style=flat\"></a>\n    <a href=\"https://packagist.org/packages/pragmarx/countries\"><img alt=\"Downloads\" src=\"https://img.shields.io/packagist/dt/pragmarx/countries.svg?style=flat-square\"></a>\n    <a href=\"https://styleci.io/repos/74829244\"><img alt=\"StyleCI\" src=\"https://styleci.io/repos/74829244/shield\"></a>\n</p>\n\n### What does it gives you?\n\nThis package has all sorts of information about countries:\n\n| info            | items |\n------------------|-------:|\n| taxes           | 32    |\n| geometry maps   | 248   |\n| topology maps   | 248   |\n| currencies      | 256   |\n| countries       | 266   |\n| timezones       | 423   |\n| borders         | 649   |\n| flags           | 1,570  |\n| states          | 4,526  |\n| cities          | 7,376  |\n| timezones times | 81,153 |\n\n### Geology and topology maps\n\nAmongst many other information you'll be able to plot country maps:\n\n![Switzerland](docs/switzerland-geo.png)\n\n## Requirements\n\n- PHP 7.0+\n\n## Installing\n\nUse Composer to install it:\n\n```\ncomposer require pragmarx/countries\n```\n\n## Instantiating\n\n```php\nuse PragmaRX\\Countries\\Package\\Countries;\n\n$countries = new Countries();\n\necho $countries->where('cca2', 'IT')->first()->hydrateCurrencies()->currencies->EUR->coins->frequent->first();\n\n// or calling it statically\n\necho Countries::where('cca2', 'IT')->first()->hydrateCurrencies()->currencies->EUR->coins->frequent->first();\n```\n\nShould both return\n\n```\n€1\n```\n\nOverloading the default configuration:\n\n```php\nuse PragmaRX\\Countries\\Package\\Services\\Config;\n\n$countries = new Countries(new Config([\n    'hydrate' => [\n        'elements' => [\n            'currencies' => true,\n            'flag' => true,\n            'timezones' => true,\n        ],\n    ],\n]));\n```\n\n#\n\n## Usage\n\nThis package is not tied to Laravel and doesn't require it to be installed (we have a [bridge](https://github.com/antonioribeiro/countries-laravel) for this purpose), but it has [Laravel Collections](https://laravel.com/docs/5.6/collections) in its core, all methods in Collections are available, this way you can do things like filter, map, reduce, search, sort, reject, and a lot more. It, actually, uses [Coollection](https://github.com/antonioribeiro/coollection), which is Laravel Collections with a fluent syntax, allowing us to have access to array keys (and values) as object properties.\n\nTo get all countries in the data base you just have to:\n\n```php\nuse PragmaRX\\Countries\\Package\\Countries;\n\n$countries = new Countries();\n\n$all = $countries->all();\n```\n\nTo get a json you:\n\n```php\nreturn $countries->toJson();\n```\n\nFilter by keys and values:\n\n```php\n$countries->where('name.common', 'Brazil');\n```\n\nWill find Brazil by its common name, which is a\n\n```\n#items: array:22 [▼\n  \"name\" => array:3 [▼\n    \"common\" => \"Brazil\"\n    \"official\" => \"Federative Republic of Brazil\"\n    \"native\" => array:1 [▼\n      \"por\" => array:2 [▼\n        \"official\" => \"República Federativa do Brasil\"\n        \"common\" => \"Brasil\"\n      ]\n    ]\n  ]\n```\n\nOr alternatively you can filter like this\n\n```php\n$countries->whereNameCommon('Brazil');\n```\n\nAnd, you can go deepeer\n\n```php\n$countries->where('name.native.por.common', 'Brasil');\n```\n\nOr search by the country top level domain\n\n```php\n$countries->where('tld.0', '.ch');\n```\n\nTo get\n\n```\n\"name\" => array:3 [▼\n  \"common\" => \"Switzerland\"\n  \"official\" => \"Swiss Confederation\"\n  \"native\" => array:4 [▶]\n]\n\"tld\" => array:1 [▼\n  0 => \".ch\"\n]\n```\nAnd use things like pluck\n\n```php\n$countries->where('cca3', 'USA')->first()->hydrateStates()->states->pluck('name', 'postal')->toArray();\n```\n\nTo get\n\n```php\n\"MA\" => \"Massachusetts\"\n\"MN\" => \"Minnesota\"\n\"MT\" => \"Montana\"\n\"ND\" => \"North Dakota\"\n...\n```\n\nThe package uses a modified Collection which allows you to access properties and methods as objects:\n\n```php\n$countries->where('cca3', 'FRA')\n         ->first()\n         ->borders\n         ->first()\n         ->name\n         ->official;\n```\n\nShould give\n\n```\nPrincipality of Andorra\n```\n\nBorders hydration is disabled by default, but you can have your borders hydrated easily by calling the hydrate method:\n\n```php\n$countries->where('name.common', 'United Kingdom')\n         ->hydrate('borders')\n         ->first()\n         ->borders\n         ->reverse()\n         ->first()\n         ->name\n         ->common;\n```\n\nShould return\n\n```\nIreland\n````\n\n### Hydration\n\nTo improve performance, hydration, which is enabled by default, can be disable on most country properties, and this is how you manually hydrate properties:\n\n```php\n$countries->where('name.common', 'United States')->first()->hydrate('timezones')->timezones->first()->zone_name;\n\n$countries->where('name.common', 'United States')->first()->hydrate('timezones')->timezones->first()->zone_name;\n```\n\nThose are some of the hydratable properties:\n\n- Borders\n- Cities\n- Currencies\n- Flag\n- Geometry\n- Languages\n- States\n- Taxes\n- Timezone\n- Topology\n\n### Extra where rules\nSome properties are stored differently and we therefore need special rules for accessing them, these properties are\n- `ISO639_3` => The 3 letter language code.\n- `ISO4217`  => The 3 letter currency code.\n\nYou can of course access them like other properties\n```php\n$countries->whereISO639_3('por')->count();\n$countries->where('ISO639_3', 'por')->count();\n```\n\n### Mapping\nSometimes you would like to access a property by a different name, this can be done in settings, this way\n```php\n'maps' => [\n    'lca3' => 'ISO639_3'\n]\n```\nHere we bind the language 3 letter short code ISO format to `lca3`, which is short for `language code alpha 3-letter`.\nSo now we can access the property by\n```php\n$countries->whereLca3('por');\n```\nOr\n```php\n$countries->where('lca3', 'por');\n```\n\n## Some other examples from **Laravel News** and some other contributors\n\n#### Generate a list of all countries with code, using native name and common\n\n```php\napp(PragmaRX\\Countries\\Package\\Countries::class)\n->all()\n->map(function ($country) {\n    $commonName = $country->name->common;\n\n    $languages = $country->languages ?? collect();\n\n    $language = $languages->keys()->first() ?? null;\n\n    $nativeNames = $country->name->native ?? null;\n\n    if (\n        filled($language) &&\n            filled($nativeNames) &&\n            filled($nativeNames[$language]) ?? null\n    ) {\n        $native = $nativeNames[$language]['common'] ?? null;\n    }\n\n    if (blank($native ?? null) && filled($nativeNames)) {\n        $native = $nativeNames->first()['common'] ?? null;\n    }\n\n    $native = $native ?? $commonName;\n\n    if ($native !== $commonName && filled($native)) {\n        $native = \"$native ($commonName)\";\n    }\n\n    return [$country->cca2 => $native];\n})\n->values()\n->toArray();\n```\n\nShould give you 267 (or so) countries like:\n\n```\n\"AW\" => \"Aruba\"\n\"AF\" => \"افغانستان (Afghanistan)\"\n\"AO\" => \"Angola\"\n\"AI\" => \"Anguilla\"\n\"AX\" => \"Åland (Åland Islands)\"\n\"AL\" => \"Shqipëria (Albania)\"\n\"AD\" => \"Andorra\"\n\"AE\" => \"دولة الإمارات العربية المتحدة (United Arab Emirates)\"\n\"AR\" => \"Argentina\"\n\"AM\" => \"Հայաստան (Armenia)\"\n\"AS\" => \"American Samoa\"\n\"AQ\" => \"Antarctica\"\n\"TF\" => \"Terres australes et antarctiques françaises (French Southern and Antarctic Lands)\"\n\"AG\" => \"Antigua and Barbuda\"\n\"AU\" => \"Australia\"\n\"AT\" => \"Österreich (Austria)\"\n\"AZ\" => \"Azərbaycan (Azerbaijan)\"\n\"BI\" => \"Burundi\"\n\"BE\" => \"Belgien (Belgium)\"\n\"BJ\" => \"Bénin (Benin)\"\n\"BF\" => \"Burkina Faso\"\n\"BD\" => \"বাংলাদেশ (Bangladesh)\"\n\"BG\" => \"България (Bulgaria)\"\n\"BH\" => \"‏البحرين (Bahrain)\"\n\"BS\" => \"Bahamas\"\n\"BA\" => \"Bosna i Hercegovina (Bosnia and Herzegovina)\"\n\"BL\" => \"Saint-Barthélemy (Saint Barthélemy)\"\n\"SH\" => \"Saint Helena, Ascension and Tristan da Cunha\"\n\"BY\" => \"Белару́сь (Belarus)\"\n\"BZ\" => \"Belize\"\n\"BM\" => \"Bermuda\"\n\"BO\" => \"Wuliwya (Bolivia)\"\n\"BQ\" => \"Caribisch Nederland (Caribbean Netherlands)\"\n\"BR\" => \"Brasil (Brazil)\"\n\"BB\" => \"Barbados\"\n\"BN\" => \"Negara Brunei Darussalam (Brunei)\"\n\"BT\" => \"འབྲུག་ཡུལ་ (Bhutan)\"\n\"BV\" => \"Bouvetøya (Bouvet Island)\"\n\"BW\" => \"Botswana\"\n\"CF\" => \"République centrafricaine (Central African Republic)\"\n\"CA\" => \"Canada\"\n\"CC\" => \"Cocos (Keeling) Islands\"\n\"CH\" => \"Suisse (Switzerland)\"\n\"CL\" => \"Chile\"\n\"CN\" => \"中国 (China)\"\n\"CI\" => \"Côte d'Ivoire (Ivory Coast)\"\n\"CM\" => \"Cameroon\"\n\"CD\" => \"RD Congo (DR Congo)\"\n\"CG\" => \"République du Congo (Republic of the Congo)\"\n\"CK\" => \"Cook Islands\"\n\"CO\" => \"Colombia\"\n\"KM\" => \"القمر‎ (Comoros)\"\n\"CV\" => \"Cabo Verde (Cape Verde)\"\n...\n```\n\n#### Generate a list of countries\n\n```php\n$countries->all()->pluck('name.common')->toArray();\n```\n\nreturns\n\n```php\n[\n    \"Aruba\",\n    \"Afghanistan\",\n    \"Angola\",\n    \"Anguilla\",\n    \"Åland Islands\",\n    ....\n```\n\n#### Generate a list of currencies\n\n```php\n$countries->all()->pluck('currencies')->toArray();\n```\n\nreturns\n\n```php\n[\n  [\n    \"AWG\",\n  ],\n  [\n    \"AFN\",\n  ],\n  [\n    \"AOA\",\n  ],\n  [\n    \"XCD\",\n  ],\n  [\n    \"EUR\",\n  ],\n  ....\n```\n\n#### Get the currency symbol\n\n```php\n$countries->where('name.common', 'Brazil')->first()->hydrate('currencies')->currencies->BRL->units->major->symbol;\n```\n\n#### Generate a list of States\n\n```php\n$countries->where('name.common', 'United States')\n    ->first()\n    ->hydrateStates()\n    ->states\n    ->sortBy('name')\n    ->pluck('name', 'postal');\n```\n\nreturns\n\n```php\n[\n    \"AL\": \"Alabama\",\n    \"AK\": \"Alaska\",\n    \"AZ\": \"Arizona\",\n    \"AR\": \"Arkansas\",\n    \"CA\": \"California\",\n    ....\n    ....\n```\n\n#### Hydrate and get a cities\n\n```php\n$countries->where('cca3', 'FRA')\n    ->first()\n    ->hydrate('cities')\n    ->cities\n    ->paris\n    ->timezone;\n```\n\nShould return\n\n```text\nEurope/Paris\n```\n\n#### Get a countries currencies\n\n```php\n$countries->where('name.common', 'United States')->first()->currencies;\n```\n\nreturns\n\n```php\n[{\n    \"alternativeSigns\": [],\n    \"ISO4217Code\": \"USD\",\n    \"ISO4217Number\": \"840\",\n    \"sign\": \"$\",\n    \"subunits\": 100,\n    \"title\": \"U.S. dollar\",\n    ....\n```\n\n#### Get all currencies\n\n```php\n$countries->currencies();\n```\n\nreturns\n\n```php\n[\n    0 => \"AED\"\n    1 => \"AFN\"\n    2 => \"ALL\"\n    3 => \"AMD\"\n    4 => \"ANG\"\n    5 => \"AOA\"\n    6 => \"ARS\"\n    7 => \"AUD\"\n    8 => \"AWG\"\n    9 => \"AZN\"\n    10 => \"BAM\"\n    ....\n```\n\n#### Get the timezone for a State\n\n```php\nreturn $countries->where('name.common', 'United States')->first()->timezone->NC;\n```\n\nreturns\n\n```php\nAmerica/New_York\n```\n\n#### Get all timezones for a country\n\n```php\n$countries->where('name.common', 'Brazil')\n  ->first()\n  ->hydrateTimezones()\n  ->timezones\n  ->map(function ($timezone) {\n      return $timezone->zone_name;\n  })->values()\n  ->unique()\n  ->toArray();\n```\n\n#### Get all times for a timezone\n\n```php\nreturn $countries->where('name.common', 'United States Virgin Islands')->first()->hydrate('timezones_times')->timezones->first()->times;\n```\n\nreturns\n\n```php\n\"times\" => [\n    \"abbreviation\" => \"LMT\"\n    \"dst\" => \"0\"\n    \"gmt_offset\" => \"-14764\"\n    \"time_start\" => \"-1825098837\"\n    \"zone_id\" => \"415\"\n    1 => [\n        \"abbreviation\" => \"AST\"\n        \"dst\" => \"0\"\n        \"gmt_offset\" => \"-14400\"\n        \"time_start\" => \"-1825098836\"\n        \"zone_id\" => \"415\"\n    ]\n]\n```\n\n## Flags\n\nCountries provides many different flag sources, including SVG flags. This is how you use one of the available sources:\n\n### Install [flag-icon](https://github.com/lipis/flag-icon-css)\n\n```\nnpm install --save-dev flag-icon-css\n```\n\n### Import it to your project\n\n```\n@import '~flag-icon-css/sass/flag-icon.scss';\n```\n\n### Use Countries to get the flag span\n\n```\n$unitedStatesFlag =\n    $this->countries->where('cca3', 'USA')\n    ->first()\n    ->flag\n    ->flag_icon;\n```\n\n### Render it in your blade template\n\n```\n{!! $unitedStatesFlag !!}\n```\n\n## Publishing assets\n\nYou can publish configuration by doing:\n```\nphp artisan vendor:publish --provider=PragmaRX\\\\Countries\\\\ServiceProvider\n```\n\n## Data\n\n### Sources\n\nThis package uses some other open source packages and, until we don't build a better documentation, you can find some more info about data on [mledoze/countries](https://github.com/mledoze/countries/blob/master/README.md) and how to use it on this fantastic [Laravel News article](https://laravel-news.com/countries-and-currencies).\n\nPlease check the [copyright](#copyright) section for a complete list of packages used by this one.\n\n### Updating\n\n#### **WARNING** \n\nNo data files (JSON, images, icons...) on this project can be updated manually. **We will close all pull requests requiring manual updates** to those files will be closed, because the update script will delete them anyway.\n\nIf you find something wrong with data, you, please, have to ask the package managers (listed data sources and on the copyright section) to fix them, and then you can yourself run the update script to properly update them on this repository.\n\n#### update.php\n\nThis package comes with the `update.php` script, which you MUST use to update the data files. It will download all info from all packages and automatically build the `.json` (and some others like `.svg` too). This is how you do it:\n\n``` bash\ncd vendor/pragmarx/countries\ncomposer install\nphp update.php\n```\n\nAnd wait for a *very long time** (sometimes it looks like stuck but it's not) until it finishes rebuilding everything, then it's just a matter of staging, commit, push all regenerated files, and draft a new PR.\n\n## Cache\n\nSince this data is not supposed to change, calls are automatically cached.\nIf you want to change this behaviour, you can edit `config/countries.php` file once it's published.\n\n## Framework bridges\n\n- [Laravel](https://github.com/antonioribeiro/countries-laravel)\n\n## Sample files\n\n- [sample-partial.json](src/data/sample-partial.json): example of a country with no borders hydrated.\n- [sample-full.json](src/data/sample-full.json): example of a fully hydrated country.\n\n## Author\n\n[Antonio Carlos Ribeiro](http://twitter.com/iantonioribeiro)\n[All contributors](https://github.com/antonioribeiro/countries-laravel/graphs/contributors)\n\n## Copyright\n\nTo build the countries database and relations, this package make use of those sources and packages:\n\n- [mledoze/countries](https://github.com/mledoze/countries)\n- [Natural Earth Vector](https://github.com/nvkelso/natural-earth-vector)\n- [rinvex/country](https://github.com/rinvex/country)\n- [commerceguys/tax](https://github.com/commerceguys/tax)\n- [timezonedb](https://timezonedb.com/)\n- [wiredmax/world-currencies](https://github.com/wiredmax/world-currencies)\n\n## License\n\nCountries is licensed under the BSD 3-Clause License - see the `LICENSE` file for details\n\n## Contributing\n\nPull requests and issues are more than welcome.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.8720703125,
          "content": "{\n    \"name\": \"pragmarx/countries\",\n\n    \"description\": \"PHP Countries and Currencies\",\n\n    \"keywords\": [\n        \"countries\",\n        \"borders\",\n        \"cities\",\n        \"currencies\",\n        \"flag\",\n        \"geometry\",\n        \"states\",\n        \"taxes\",\n        \"timezones\",\n        \"topology\"\n    ],\n\n    \"license\": \"BSD-3-Clause\",\n\n    \"authors\": [\n        {\n            \"name\": \"Antonio Carlos Ribeiro\",\n            \"email\": \"acr@antoniocarlosribeiro.com\",\n            \"role\": \"Creator\"\n        }\n    ],\n\n    \"require\": {\n        \"php\": \">=7.0\",\n        \"pragmarx/coollection\": \">=0.8\",\n<<<<<<< HEAD\n        \"psr/simple-cache\": \"^1.0|^2.0|^3.0\",\n||||||| b98fe53\n        \"psr/simple-cache\": \"^1.0|^2.0\",\n=======\n        \"illuminate/collections\": \"^10.48|^11.29\",\n        \"psr/simple-cache\": \"^3.0\",\n>>>>>>> upstream-team-master\n        \"nette/caching\": \"^2.5|^3.0\",\n        \"colinodell/json5\": \"^1.0|^2.0\"\n    },\n\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"~6.0|~7.0|~8.0|^9.0\",\n        \"squizlabs/php_codesniffer\": \"^2.3|^3.6\",\n        \"gasparesganga/php-shapefile\": \"^3.4\"\n    },\n\n    \"autoload\": {\n        \"psr-4\": {\n            \"PragmaRX\\\\Countries\\\\Package\\\\\": \"src/package\",\n            \"PragmaRX\\\\Countries\\\\Update\\\\\": \"src/update\"\n        },\n        \"files\": [\n            \"src/package/Support/helpers.php\"\n        ]\n    },\n\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"PragmaRX\\\\Countries\\\\Tests\\\\\": \"tests/\",\n            \"PragmaRX\\\\Countries\\\\Tests\\\\PhpUnit\\\\\": \"tests/PhpUnit/\"\n        }\n    },\n\n    \"scripts\": {\n        \"test\": \"phpunit\",\n        \"check-style\": \"phpcs -p --standard=PSR2 --runtime-set ignore_errors_on_exit 1 --runtime-set ignore_warnings_on_exit 1 src tests\",\n        \"fix-style\": \"phpcbf -p --standard=PSR2 --runtime-set ignore_errors_on_exit 1 --runtime-set ignore_warnings_on_exit 1 src tests\"\n    },\n\n    \"minimum-stability\": \"dev\",\n\n    \"prefer-stable\": true\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 1.0654296875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         bootstrap=\"tests/bootstrap.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnError=\"false\"\n         verbose=\"true\"\n         stopOnFailure=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"Laravel Test Suite\">\n            <directory suffix=\"Test.php\">./tests</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist processUncoveredFilesFromWhitelist=\"true\">\n            <directory suffix=\".php\">./src/package</directory>\n        </whitelist>\n    </filter>\n    <logging>\n        <log type=\"coverage-html\" target=\"coverage/\" lowUpperBound=\"35\" highLowerBound=\"70\"/>\n        <log type=\"coverage-clover\" target=\"coverage/coverage-clover.xml\" lowUpperBound=\"35\" highLowerBound=\"70\"/>\n        <log type=\"coverage-text\" target=\"php://stdout\" showUncoveredFiles=\"true\"/>\n    </logging>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "update.php",
          "type": "blob",
          "size": 0.3349609375,
          "content": "<?php\n\nuse PragmaRX\\Countries\\Update\\Config as ServiceConfig;\nuse PragmaRX\\Countries\\Update\\Helper;\nuse PragmaRX\\Countries\\Update\\Updater;\n\nrequire __DIR__.'/vendor/autoload.php';\n\nini_set('memory_limit', '4096M');\n\n$config = new ServiceConfig();\n\n$helper = new Helper($config);\n\n$updater = new Updater($config, $helper);\n\n$updater->update();\n"
        }
      ]
    }
  ]
}