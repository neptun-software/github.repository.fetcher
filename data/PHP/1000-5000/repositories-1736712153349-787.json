{
  "metadata": {
    "timestamp": 1736712153349,
    "page": 787,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ankitpokhrel/tus-php",
      "stars": 1415,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3447265625,
          "content": "/.github export-ignore\n/docker export-ignore\n/example export-ignore\n/tests export-ignore\n\n/bin/*.sh export-ignore\n\n.dockerignore export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\n.scrutinizer.yml export-ignore\n.travis.yml export-ignore\n.phpcs export-ignore\nphpunit.xml export-ignore\nMakefile export-ignore\n\n*.php linguist-language=PHP\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.138671875,
          "content": ".idea\n.cache\n.php_cs.cache\ninfection.json.dist\ninfection-log.txt\n.DS_Store\ncomposer.lock\n*.cache\n\n/coverage/\n/vendor/\n/uploads/\n/docker/.data\n"
        },
        {
          "name": ".php-cs-fixer.php",
          "type": "blob",
          "size": 0.4345703125,
          "content": "<?php\n\n$finder = PhpCsFixer\\Finder::create()->in(['src', 'tests']);\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules([\n        '@PSR12' => true,\n        'not_operator_with_space' => true,\n        'single_quote' => true,\n        'binary_operator_spaces' => ['operators' => ['=' => 'align_single_space']],\n        'native_function_invocation' => ['include' => ['@compiler_optimized']],\n    ])\n    ->setRiskyAllowed(true)\n    ->setFinder($finder);\n"
        },
        {
          "name": ".scrutinizer.yml",
          "type": "blob",
          "size": 0.16796875,
          "content": "---\nfilter:\n  paths:\n    - src/*\n  dependency_paths:\n    - vendor/\n\nchecks:\n  php:\n    code_rating: true\n\ntools:\n  external_code_coverage: false\n  php_code_coverage: false\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2017 Ankit Pokhrel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.69921875,
          "content": ".PHONY: explain docker-build-base docker-build-base-php8 docker-build-server docker-build-client docker-build docker-build-php8 \\\n\t\tdev dev8 dev-clean dev-fresh dev8-fresh exec-server exec-client exec-redis lint lint-dry test test-coverage\n\nROOT_DIR := $(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))\n\nexplain:\n\t@echo \"For quick start, run 'make dev'\"\n\ndocker-build-base:\n\t@echo \"Building base image...\"\n\tdocker build -t tus-php-base -f $(ROOT_DIR)/docker/base/Dockerfile $(ROOT_DIR)/docker/base/\n\ndocker-build-base-php8:\n\t@echo \"Building base image for php8...\"\n\tdocker build -t tus-php-base -f $(ROOT_DIR)/docker/base/Dockerfile.php8 $(ROOT_DIR)/docker/base/\n\ndocker-build-server:\n\t@echo \"Building server image...\"\n\tdocker build -t tus-php-server -f $(ROOT_DIR)/docker/server/Dockerfile $(ROOT_DIR)/docker/server/\n\ndocker-build-client:\n\t@echo \"Building client image...\"\n\tdocker build -t tus-php-client -f $(ROOT_DIR)/docker/client/Dockerfile $(ROOT_DIR)/docker/client/\n\ndocker-build: docker-build-base docker-build-server docker-build-client\n\ndocker-build-php8: docker-build-base-php8 docker-build-server docker-build-client\n\ndev:\n\t@$(ROOT_DIR)/bin/docker.sh\n\ndev8:\n\t@PHP_VERSION=8 $(ROOT_DIR)/bin/docker.sh\n\ndev-clean:\n\t@$(ROOT_DIR)/bin/clean.sh\n\ndev-fresh: dev-clean dev\n\ndev8-fresh: dev-clean dev8\n\nexec-server:\n\t@docker exec -it tus-php-server sh\n\nexec-client:\n\t@docker exec -it tus-php-client sh\n\nexec-redis:\n\t@docker exec -it tus-php-redis bash -c \"redis-cli\"\n\nclean:\n\trm -rf composer.lock vendor/ coverage/ uploads/* .cache\n\nvendor: composer.json $(wildcard composer.lock)\n\t@composer install\n\nlint:\n\t@bin/lint.sh\n\nlint-dry:\n\t@bin/lint.sh dry\n\ntest: vendor\n\t@composer test\n\ntest-coverage: vendor\n\t@composer test-coverage\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.3564453125,
          "content": "<h1 align=\"center\">TusPHP</h1>\n\n<p align=\"center\">\n    <a href=\"https://packagist.org/packages/ankitpokhrel/tus-php\">\n        <img alt=\"PHP Version\" src=\"https://img.shields.io/badge/php-8.1%2B-brightgreen.svg?style=flat-square\" />\n    </a>\n    <a href=\"https://github.com/ankitpokhrel/tus-php/actions/workflows/ci.yml?query=branch%3Amain+is%3Acompleted\">\n        <img alt=\"Build Status\" src=\"https://img.shields.io/github/actions/workflow/status/ankitpokhrel/tus-php/ci.yml?branch=main&style=flat-square\" />\n    </a>\n    <a href=\"https://scrutinizer-ci.com/g/ankitpokhrel/tus-php\">\n        <img alt=\"Code Coverage\" src=\"https://img.shields.io/scrutinizer/coverage/g/ankitpokhrel/tus-php.svg?style=flat-square\" />\n    </a>\n    <a href=\"https://scrutinizer-ci.com/g/ankitpokhrel/tus-php\">\n        <img alt=\"Scrutinizer Code Quality\" src=\"https://img.shields.io/scrutinizer/g/ankitpokhrel/tus-php.svg?style=flat-square\" />\n    </a>\n    <a href=\"https://packagist.org/packages/ankitpokhrel/tus-php\">\n        <img alt=\"Downloads\" src=\"https://img.shields.io/packagist/dm/ankitpokhrel/tus-php.svg?style=flat-square\" />\n    </a>\n    <a href=\"https://github.com/ankitpokhrel/tus-php/blob/main/LICENSE\">\n        <img alt=\"Software License\" src=\"https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square\" />\n    </a>\n</p>\n\n<p align=\"center\">\n    <i align=\"center\">Resumable file upload in PHP using <a href=\"https://tus.io\">tus resumable upload protocol v1.0.0</a></i>\n</p>\n\n<p align=\"center\">\n    <img alt=\"TusPHP Demo\" src=\"https://github.com/ankitpokhrel/tus-php/blob/main/example/demo.gif\" /><br/><br/>\n    <a href=\"https://medium.com/@ankitpokhrel/resumable-file-upload-in-php-handle-large-file-uploads-in-an-elegant-way-e6c6dfdeaedb\">Medium Article</a>&nbsp;⚡&nbsp;<a href=\"https://github.com/ankitpokhrel/tus-php/wiki/Laravel-&-Lumen-Integration\">Laravel & Lumen Integration</a>&nbsp;⚡&nbsp;<a href=\"https://github.com/ankitpokhrel/tus-php/wiki/Symfony-Integration\">Symfony Integration</a>&nbsp;⚡&nbsp;<a href=\"https://github.com/ankitpokhrel/tus-php/wiki/CakePHP-Integration\">CakePHP Integration</a>&nbsp;⚡&nbsp;<a href=\"https://github.com/ankitpokhrel/tus-php/wiki/WordPress-Integration\">WordPress Integration</a>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://opencollective.com/tus-php#backers\" target=\"_blank\" align=\"center\"><img src=\"https://opencollective.com/tus-php/backers.svg\"></a>\n</p>\n\n**tus** is a HTTP based protocol for resumable file uploads. Resumable means you can carry on where you left off without\nre-uploading whole data again in case of any interruptions. An interruption may happen willingly if the user wants\nto pause, or by accident in case of a network issue or server outage.\n\n### Table of Contents\n\n* [Installation](#installation)\n* [Usage](#usage)\n    * [Server](#server)\n        * [Nginx](#nginx)\n        * [Apache](#apache)\n    * [Client](#client)\n    * [Third Party Client Libraries](#third-party-client-libraries)\n    * [Cloud Providers](#cloud-providers)\n* [Extension support](#extension-support)\n    * [Expiration](#expiration)\n    * [Concatenation](#concatenation)\n* [Events](#events)\n    * [Responding to an Event](#responding-to-an-event)\n* [Middleware](#middleware)\n    * [Creating a Middleware](#creating-a-middleware)\n    * [Adding a Middleware](#adding-a-middleware)\n    * [Skipping a Middleware](#skipping-a-middleware)\n* [Setting up a dev environment and/or running examples locally](#setting-up-a-dev-environment-andor-running-examples-locally)\n    * [Docker](#docker)\n* [Contributing](#contributing)\n* [Questions about this project?](#questions-about-this-project)\n* [Supporters](#supporters)\n\n### Installation\n\nPull the package via composer.\n```shell\n$ composer require ankitpokhrel/tus-php\n\n// Use v1 for php7.1, Symfony 3 or 4.\n\n$ composer require ankitpokhrel/tus-php:^1.2\n```\n\n### Usage\n| ![Basic Tus Architecture](https://cdn-images-1.medium.com/max/2000/1*N4JhqeXJgWA1Z7pc6_5T_A.png \"Basic Tus Architecture\") |\n|:--:|\n| Basic Tus Architecture |\n\n#### Server\nThis is how a simple server looks like.\n\n```php\n// server.php\n\n// Either redis, file or apcu. Leave empty for file based cache.\n$server   = new \\TusPhp\\Tus\\Server('redis');\n$response = $server->serve();\n\n$response->send();\n\nexit(0); // Exit from current PHP process.\n```\n\n> :bangbang: File based cache is not recommended for production use.\n\nYou need to rewrite your server to respond to a specific endpoint. For example:\n\n###### Nginx\n```nginx\n# nginx.conf\n\nlocation /files {\n    try_files $uri $uri/ /server.php?$query_string;\n}\n```\n\nA new config option [fastcgi_request_buffering](http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_request_buffering) is available since nginx 1.7.11.\nWhen buffering is enabled, the entire request body is read from the client before sending the request to a FastCGI server. Disabling this option might help with timeouts during the upload.\nFurthermore, it helps if you’re running out of disc space on the tmp partition of your system.\n\nIf you do not turn off `fastcgi_request_buffering` and you use `fastcgi`, you will not be able to resume uploads because nginx will not give the request back to PHP until the entire file is uploaded.\n\n```nginx\nlocation ~ \\.php$ {\n    # ...\n\n    fastcgi_request_buffering off; # Disable request buffering\n\n    # ...\n}\n```\n\nA sample nginx configuration can be found [here](docker/server/configs/default.conf).\n\n###### Apache\n```apache\n# .htaccess\n\nRewriteEngine on\n\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^files/?(.*)?$ /server.php?$1 [QSA,L]\n```\n\nDefault max upload size is 0 which means there is no restriction. You can set max upload size as described below.\n```php\n$server->setMaxUploadSize(100000000); // 100 MB in bytes\n```\n\nDefault redis and file configuration for server and client can be found inside `config/server.php` and `config/client.php` respectively.\nTo override default config you can simply copy the file to your preferred location and update the parameters. You then need to set the config before doing anything else.\n\n```php\n\\TusPhp\\Config::set('<path to your config>');\n\n$server = new \\TusPhp\\Tus\\Server('redis');\n```\n\nAlternately, you can set `REDIS_HOST`, `REDIS_PORT` and `REDIS_DB` env in your server to override redis settings for both server and client.\n\n#### Client\nThe client can be used for creating, resuming and/or deleting uploads.\n\n```php\n$client = new \\TusPhp\\Tus\\Client($baseUrl);\n\n// Key is mandatory.\n$key = 'your unique key';\n\n$client->setKey($key)->file('/path/to/file', 'filename.ext');\n\n// Create and upload a chunk of 1MB\n$bytesUploaded = $client->upload(1000000);\n\n// Resume, $bytesUploaded = 2MB\n$bytesUploaded = $client->upload(1000000);\n\n// To upload whole file, skip length param\n$client->file('/path/to/file', 'filename.ext')->upload();\n```\n\nTo check if the file was partially uploaded before, you can use `getOffset` method. It returns false if the upload\nisn't there or invalid, returns total bytes uploaded otherwise.\n\n```php\n$offset = $client->getOffset(); // 2000000 bytes or 2MB\n```\n\nDelete partial upload from the cache.\n\n```php\n$client->delete($key);\n```\n\nBy default, the client uses `/files` as an API path. You can change it with `setApiPath` method.\n\n```php\n$client->setApiPath('/api');\n```\n\nBy default, the server will use `sha256` algorithm to verify the integrity of the upload. If you want to use a different hash algorithm, you can do so by\nusing `setChecksumAlgorithm` method. To get the list of supported hash algorithms, you can send `OPTIONS` request to the server.\n\n```php\n$client->setChecksumAlgorithm('crc32');\n```\n\n#### Third Party Client Libraries\n##### [Uppy](https://uppy.io/)\nUppy is a sleek, modular file uploader plugin developed by same folks behind tus protocol.\nYou can use uppy to seamlessly integrate official [tus-js-client](https://github.com/tus/tus-js-client) with tus-php server.\nCheck out more details in [uppy docs](https://uppy.io/docs/tus/).\n```js\nuppy.use(Tus, {\n  endpoint: 'https://tus-server.yoursite.com/files/', // use your tus endpoint here\n  resume: true,\n  autoRetry: true,\n  retryDelays: [0, 1000, 3000, 5000]\n})\n```\n\n##### [Tus-JS-Client](https://github.com/tus/tus-js-client)\nTus-php server is compatible with the official [tus-js-client](https://github.com/tus/tus-js-client) Javascript library.\n```js\nvar upload = new tus.Upload(file, {\n  endpoint: \"/tus\",\n  retryDelays: [0, 3000, 5000, 10000, 20000],\n  metadata: {\n    name: file.name,\n    type: file.type\n  }\n})\nupload.start()\n```\n\n#### Cloud Providers\nMany cloud providers implement PHP [streamWrapper](https://www.php.net/manual/en/class.streamwrapper.php) interface that enables us to store and retrieve data from these providers using built-in PHP functions. Since tus-php relies on PHP's built-in filesystem functions, we can easily use it to upload files to the providers like [Amazon S3](https://docs.aws.amazon.com/sdk-for-php/v3/developer-guide/s3-stream-wrapper.html) if their API supports writing in append binary mode. An example implementation to upload files directly to S3 bucket is as follows:\n\n```php\n// server.php\n// composer require aws/aws-sdk-php\n\nuse Aws\\S3\\S3Client;\nuse TusPhp\\Tus\\Server;\nuse Aws\\Credentials\\Credentials;\n\n$awsAccessKey = 'AWS_ACCESS_KEY'; // YOUR AWS ACCESS KEY\n$awsSecretKey = 'AWS_SECRET_KEY'; // YOUR AWS SECRET KEY\n$awsRegion    = 'eu-west-1';      // YOUR AWS BUCKET REGION\n$basePath     = 's3://your-bucket-name';\n\n$s3Client = new S3Client([\n    'version' => 'latest',\n    'region' => $awsRegion,\n    'credentials' => new Credentials($awsAccessKey, $awsSecretKey)\n]);\n$s3Client->registerStreamWrapper();\n\n$server = new Server('file');\n$server->setUploadDir($basePath);\n\n$response = $server->serve();\n$response->send();\n\nexit(0);\n```\n\n### Extension Support\n- [x] The Creation extension is mostly implemented and is used for creating the upload. Deferring the upload's length is not possible at the moment.\n- [x] The Termination extension is implemented which is used to terminate completed and unfinished uploads allowing the Server to free up used resources.\n- [x] The Checksum extension is implemented, the server will use `sha256` algorithm by default to verify the upload.\n- [x] The Expiration extension is implemented, details below.\n- [x] This Concatenation extension is implemented except that the server is not capable of handling unfinished concatenation.\n\n#### Expiration\nThe Server is capable of removing expired but unfinished uploads. You can use the following command manually or in a\ncron job to remove them. Note that this command checks your cache storage to find expired uploads. So, make sure\nto run it before the cache is expired, else it will not find all files that needs to be cleared.\n\n```shell\n$ ./vendor/bin/tus tus:expired --help\n\nUsage:\n  tus:expired [<cache-adapter>] [options]\n\nArguments:\n  cache-adapter         Cache adapter to use: redis, file or apcu [default: \"file\"]\n\nOptions:\n  -c, --config=CONFIG   File to get config parameters from.\n\neg:\n\n$ ./vendor/bin/tus tus:expired redis\n\nCleaning server resources\n=========================\n\n1. Deleted 1535888128_35094.jpg from /var/www/uploads\n```\n\nYou can use`--config` option to override default redis or file configuration.\n\n ```shell\n $ ./vendor/bin/tus tus:expired redis --config=<path to your config file>\n ```\n\n#### Concatenation\nThe Server is capable of concatenating multiple uploads into a single one enabling Clients to perform parallel uploads and to upload non-contiguous chunks.\n\n```php\n// Actual file key\n$uploadKey = uniqid();\n\n$client->setKey($uploadKey)->file('/path/to/file', 'chunk_a.ext');\n\n// Upload 10000 bytes starting from 1000 bytes\n$bytesUploaded = $client->seek(1000)->upload(10000);\n$chunkAkey     = $client->getKey();\n\n// Upload 1000 bytes starting from 0 bytes\n$bytesUploaded = $client->setFileName('chunk_b.ext')->seek(0)->upload(1000);\n$chunkBkey     = $client->getKey();\n\n// Upload remaining bytes starting from 11000 bytes (10000 +  1000)\n$bytesUploaded = $client->setFileName('chunk_c.ext')->seek(11000)->upload();\n$chunkCkey     = $client->getKey();\n\n// Concatenate partial uploads\n$client->setFileName('actual_file.ext')->concat($uploadKey, $chunkBkey, $chunkAkey, $chunkCkey);\n```\n\nAdditionally, the server will verify checksum against the merged file to make sure that the file is not corrupt.\n\n### Events\nOften times, you may want to perform some operation after the upload is complete or created. For example, you may want to crop images after upload or transcode a file and email it to your user.\nYou can utilize tus events for these operations. Following events are dispatched by server during different point of execution.\n\n| Event Name | Dispatched |\n-------------|------------|\n| `tus-server.upload.created` | after the upload is created during `POST` request. |\n| `tus-server.upload.progress` | after a chunk is uploaded during `PATCH` request. |\n| `tus-server.upload.complete` | after the upload is complete and checksum verification is done. |\n| `tus-server.upload.merged` | after all partial uploads are merged during concatenation request. |\n\n#### Responding to an Event\nTo listen to an event, you can simply attach a listener to the event name. An `TusEvent` instance is created and passed to all of the listeners.\n\n```php\n$server->event()->addListener('tus-server.upload.complete', function (\\TusPhp\\Events\\TusEvent $event) {\n    $fileMeta = $event->getFile()->details();\n    $request  = $event->getRequest();\n    $response = $event->getResponse();\n\n    // ...\n});\n```\n\nor, you can also bind some method of a custom class.\n\n```php\n/**\n * Listener can be method from any normal class.\n */\nclass SomeClass\n{\n    public function postUploadOperation(\\TusPhp\\Events\\TusEvent $event)\n    {\n        // ...\n    }\n}\n\n$listener = new SomeClass();\n\n$server->event()->addListener('tus-server.upload.complete', [$listener, 'postUploadOperation']);\n```\n\n### Middleware\nYou can manipulate request and response of a server using a middleware. Middleware can be used to run a piece of code before a server calls the actual handle method.\nYou can use middleware to authenticate a request, handle CORS, whitelist/blacklist an IP etc.\n\n#### Creating a Middleware\nIn order to create a middleware, you need to implement `TusMiddleware` interface. The handle method provides request and response object for you to manipulate.\n\n```php\n<?php\n\nnamespace Your\\Namespace;\n\nuse TusPhp\\Request;\nuse TusPhp\\Response;\nuse TusPhp\\Middleware\\TusMiddleware;\n\nclass Authenticated implements TusMiddleware\n{\n    // ...\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handle(Request $request, Response $response)\n    {\n        // Check if user is authenticated\n        if (! $this->user->isLoggedIn()) {\n            throw new UnauthorizedHttpException('User not authenticated');\n        }\n\n        $request->getRequest()->headers->set('Authorization', 'Bearer ' . $this->user->token());\n    }\n\n    // ...\n}\n```\n\n#### Adding a Middleware\nTo add a middleware, get middleware object from server and simply pass middleware classes.\n\n```php\n$server->middleware()->add(Authenticated::class, AnotherMiddleware::class);\n```\n\nOr, you can also pass middleware class objects.\n```php\n$authenticated = new Your\\Namespace\\Authenticated(new User());\n\n$server->middleware()->add($authenticated);\n```\n\n#### Skipping a Middleware\nIf you wish to skip or ignore any middleware, you can do so by using the `skip` method.\n\n```php\n$server->middleware()->skip(Cors::class, AnotherMiddleware::class);\n ```\n\n### Setting up a dev environment and/or running examples locally\nAn ajax based example for this implementation can be found in `examples/` folder. You can build and run it using docker as described below.\n\n#### Docker\nMake sure that [docker](https://docs.docker.com/engine/installation/) and [docker-compose](https://docs.docker.com/compose/install/)\nare installed in your system. Then, run docker script from project root.\n```shell\n# PHP7\n$ make dev\n\n# PHP8\n$ make dev8\n\n# or, without make\n\n# PHP7\n$ bin/docker.sh\n\n# PHP8\n$ PHP_VERSION=8 bin/docker.sh\n```\n\nNow, the client can be accessed at http://0.0.0.0:8080 and the server can be accessed at http://0.0.0.0:8081. The default API endpoint is set to`/files`\nand uploaded files can be found inside `uploads` folder. All docker configs can be found in `docker/` folder.\n\nIf you want a fresh start then you can use the following commands. It will delete and recreate all containers, images, and uploads folder.\n```shell\n# PHP7\n$ make dev-fresh\n\n# PHP8\n$ make dev8-fresh\n\n# or, without make\n\n# PHP7\n$ bin/clean.sh && bin/docker.sh\n\n# PHP8\n$ bin/clean.sh && PHP_VERSION=8 bin/docker.sh\n```\n\nWe also have some utility scripts that will ease your local development experience. See [Makefile](Makefile) for a list of all available commands.\nIf you are not using [make](https://www.gnu.org/software/make/manual/make.html#Overview), then you can use shell scripts available [here](bin).\n\n### Contributing\n1. Install [PHPUnit](https://phpunit.de/) and [composer](https://getcomposer.org/) if you haven't already.\n2. Install dependencies\n     ```shell\n     $ make vendor\n\n     # or\n\n     $ composer install\n     ```\n3. Run tests with phpunit\n    ```shell\n    $ make test\n\n    # or\n\n    $ composer test\n\n    # or\n\n    $ ./vendor/bin/phpunit\n    ```\n4. Validate changes against [PSR2 Coding Standards](http://www.php-fig.org/psr/psr-2/)\n    ```shell\n    # fix lint issues\n    $ make lint\n\n    # dry run\n    $ make lint-dry\n    ```\n\nYou can use `xdebug enable` and `xdebug disable` to enable and disable [Xdebug](https://xdebug.org/) inside the container.\n\n### Questions about this project?\nPlease feel free to report any bug found. Pull requests, issues, and project recommendations are more than welcome!\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.39453125,
          "content": "# Security Policy\n\n## Supported Versions\n\nAll security updates are available for following versions.\n\n| Version         | Supported          |\n| --------------- | ------------------ |\n| 2.x.x           | :white_check_mark: |\n| 1.x.x           | :white_check_mark: |\n| 0.x.x           | :x:                |\n\n## Reporting a Vulnerability\n\nPlease report any security issues directly to hello [at] ankit.pl\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.23046875,
          "content": "{\n  \"name\": \"ankitpokhrel/tus-php\",\n  \"description\": \"A pure PHP server and client for the tus resumable upload protocol v1.0.0\",\n  \"type\": \"library\",\n  \"license\": \"MIT\",\n  \"authors\": [\n    {\n      \"name\": \"Ankit Pokhrel\",\n      \"email\": \"oss@ankit.pl\"\n    }\n  ],\n  \"require\": {\n    \"php\": \"^8.1\",\n    \"ext-json\": \"*\",\n    \"guzzlehttp/guzzle\": \"^7.2\",\n    \"nesbot/carbon\": \"^2.67 || ^3.0\",\n    \"predis/predis\": \"^2.0.3\",\n    \"ramsey/uuid\": \"^4.0\",\n    \"symfony/console\": \"^6.0 || ^7.0\",\n    \"symfony/event-dispatcher\": \"^6.0 || ^7.0\",\n    \"symfony/http-foundation\": \"^6.0 || ^7.0\",\n    \"symfony/mime\": \"^6.0 || ^7.0\"\n  },\n  \"require-dev\": {\n    \"ext-pcntl\": \"*\",\n    \"friendsofphp/php-cs-fixer\": \"^3.0\",\n    \"mockery/mockery\": \"^1.4.2\",\n    \"phpunit/phpunit\": \"^10.5\"\n  },\n  \"autoload\": {\n    \"psr-4\": {\n      \"TusPhp\\\\\": \"src/\"\n    }\n  },\n  \"autoload-dev\": {\n    \"psr-4\": {\n      \"TusPhp\\\\Test\\\\\": \"tests/\"\n    }\n  },\n  \"config\": {\n    \"optimize-autoloader\": true,\n    \"sort-packages\": true\n  },\n  \"scripts\": {\n    \"test\": \"xdebug disable && vendor/bin/phpunit\",\n    \"test-coverage\": \"xdebug enable && vendor/bin/phpunit --coverage-html ./coverage\"\n  },\n  \"bin\": [\n    \"bin/tus\"\n  ],\n  \"extra\": {\n    \"branch-alias\": {\n      \"dev-main\": \"2.3-dev\"\n    }\n  }\n}\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.9130859375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.5/phpunit.xsd\"\n  backupGlobals=\"false\"\n  bootstrap=\"tests/bootstrap.php\"\n  colors=\"true\"\n  processIsolation=\"false\"\n  stopOnFailure=\"true\"\n  cacheDirectory=\".phpunit.cache\"\n  backupStaticProperties=\"false\"\n>\n  <testsuites>\n    <testsuite name=\"Unit\">\n      <directory>./tests</directory>\n    </testsuite>\n  </testsuites>\n  <php>\n    <env name=\"REDIS_HOST\" value=\"127.0.0.1\"/>\n    <env name=\"REDIS_PORT\" value=\"6379\"/>\n    <env name=\"REDIS_TIMEOUT\" value=\"0.5\"/>\n    <env name=\"REDIS_DATABASE\" value=\"15\"/>\n  </php>\n  <source>\n    <include>\n      <directory suffix=\".php\">src/</directory>\n    </include>\n    <exclude>\n      <directory suffix=\".php\">./src/Commands</directory>\n      <directory suffix=\".php\">./src/Config</directory>\n    </exclude>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}