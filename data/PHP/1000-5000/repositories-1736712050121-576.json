{
  "metadata": {
    "timestamp": 1736712050121,
    "page": 576,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nette/tracy",
      "stars": 1768,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1904296875,
          "content": ".gitattributes export-ignore\n.gitignore export-ignore\n.github export-ignore\nncs.* export-ignore\nphpstan.neon export-ignore\ntests/ export-ignore\n\n*.sh eol=lf\n*.php* diff=php linguist-language=PHP\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.083984375,
          "content": "/vendor\n/composer.lock\n/node_modules\n/package-lock.json\n/tools/create-phar/tracy.phar\n"
        },
        {
          "name": ".phpstorm.meta.php",
          "type": "blob",
          "size": 0.453125,
          "content": "<?php\n\ndeclare(strict_types=1);\n\nnamespace PHPSTORM_META;\n\nexpectedArguments(\\Tracy\\Debugger::log(), 1, \\Tracy\\ILogger::DEBUG, \\Tracy\\ILogger::INFO, \\Tracy\\ILogger::WARNING, \\Tracy\\ILogger::ERROR, \\Tracy\\ILogger::EXCEPTION, \\Tracy\\ILogger::CRITICAL);\nexpectedArguments(\\Tracy\\ILogger::log(), 1, \\Tracy\\ILogger::DEBUG, \\Tracy\\ILogger::INFO, \\Tracy\\ILogger::WARNING, \\Tracy\\ILogger::ERROR, \\Tracy\\ILogger::EXCEPTION, \\Tracy\\ILogger::CRITICAL);\n\nexitPoint(\\dumpe());\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.1591796875,
          "content": "{\n\t\"name\": \"tracy/tracy\",\n\t\"description\": \"ðŸ˜Ž  Tracy: the addictive tool to ease debugging PHP code for cool developers. Friendly design, logging, profiler, advanced features like debugging AJAX calls or CLI support. You will love it.\",\n\t\"keywords\": [\"debug\", \"debugger\", \"nette\", \"profiler\", \"xdebug\"],\n\t\"homepage\": \"https://tracy.nette.org\",\n\t\"license\": [\"BSD-3-Clause\"],\n\t\"authors\": [\n\t\t{\n\t\t\t\"name\": \"David Grudl\",\n\t\t\t\"homepage\": \"https://davidgrudl.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Nette Community\",\n\t\t\t\"homepage\": \"https://nette.org/contributors\"\n\t\t}\n\t],\n\t\"require\": {\n\t\t\"php\": \"8.1 - 8.4\",\n\t\t\"ext-session\": \"*\",\n\t\t\"ext-json\": \"*\"\n\t},\n\t\"require-dev\": {\n\t\t\"nette/utils\": \"^3.0 || ^4.0\",\n\t\t\"nette/di\": \"^3.0\",\n\t\t\"nette/http\": \"^3.0\",\n\t\t\"nette/mail\": \"^3.0 || ^4.0\",\n\t\t\"nette/tester\": \"^2.2\",\n\t\t\"latte/latte\": \"^2.5 || ^3.0\",\n\t\t\"psr/log\": \"^1.0 || ^2.0 || ^3.0\",\n\t\t\"phpstan/phpstan\": \"^1.0\"\n\t},\n\t\"conflict\": {\n\t\t\"nette/di\": \"<3.0\"\n\t},\n\t\"autoload\": {\n\t\t\"classmap\": [\"src\"],\n\t\t\"files\": [\"src/Tracy/functions.php\"]\n\t},\n\t\"minimum-stability\": \"dev\",\n\t\"scripts\": {\n\t\t\"phpstan\": \"phpstan analyse\",\n\t\t\"tester\": \"tester tests\"\n\t},\n\t\"extra\": {\n\t\t\"branch-alias\": {\n\t\t\t\"dev-master\": \"3.0-dev\"\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "eslint.config.js",
          "type": "blob",
          "size": 0.865234375,
          "content": "import globals from 'globals';\nimport pluginJs from '@eslint/js';\nimport stylistic from '@stylistic/eslint-plugin';\n\nexport default [\n\t{\n\t\tignores: ['*/', '!src/'],\n\t},\n\n\tpluginJs.configs.recommended,\n\n\tstylistic.configs.customize({\n\t\tindent: 'tab',\n\t\tbraceStyle: '1tbs',\n\t\tarrowParens: true,\n\t\tsemi: true,\n\t\tjsx: false,\n\t}),\n\n\t{\n\t\tlanguageOptions: {\n\t\t\tecmaVersion: 'latest',\n\t\t\tglobals: globals.browser,\n\t\t},\n\t\tplugins: {\n\t\t\t'@stylistic': stylistic,\n\t\t},\n\t\trules: {\n\t\t\t'@stylistic/no-multiple-empty-lines': ['error', { max: 2, maxEOF: 0 }],\n\t\t\t'@stylistic/new-parens': ['error', 'never'],\n\t\t\t'@stylistic/padded-blocks': 'off',\n\t\t\t'func-style': ['error', 'declaration', { allowArrowFunctions: true }],\n\t\t\t'prefer-arrow-callback': 'error',\n\t\t\t'arrow-body-style': 'error',\n\t\t\t'eqeqeq': ['error', 'always', { null: 'ignore' }],\n\t\t\t'no-var': 'error',\n\t\t\t'prefer-const': 'off',\n\t\t},\n\t},\n];\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "license.md",
          "type": "blob",
          "size": 2.3076171875,
          "content": "Licenses\n========\n\nGood news! You may use Tracy under the terms of either the New BSD License\nor the GNU General Public License (GPL) version 2 or 3.\n\nThe BSD License is recommended for most projects. It is easy to understand and it\nplaces almost no restrictions on what you can do with the framework. If the GPL\nfits better to your project, you can use the framework under this license.\n\nYou don't have to notify anyone which license you are using. You can freely\nuse Tracy in commercial projects as long as the copyright header\nremains intact.\n\n\nNew BSD License\n---------------\n\nCopyright (c) 2004, 2014 David Grudl (https://davidgrudl.com)\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n\t* Redistributions of source code must retain the above copyright notice,\n\tthis list of conditions and the following disclaimer.\n\n\t* Redistributions in binary form must reproduce the above copyright notice,\n\tthis list of conditions and the following disclaimer in the documentation\n\tand/or other materials provided with the distribution.\n\n\t* Neither the name of \"Tracy\" nor the names of its contributors\n\tmay be used to endorse or promote products derived from this software\n\twithout specific prior written permission.\n\nThis software is provided by the copyright holders and contributors \"as is\" and\nany express or implied warranties, including, but not limited to, the implied\nwarranties of merchantability and fitness for a particular purpose are\ndisclaimed. In no event shall the copyright owner or contributors be liable for\nany direct, indirect, incidental, special, exemplary, or consequential damages\n(including, but not limited to, procurement of substitute goods or services;\nloss of use, data, or profits; or business interruption) however caused and on\nany theory of liability, whether in contract, strict liability, or tort\n(including negligence or otherwise) arising in any way out of the use of this\nsoftware, even if advised of the possibility of such damage.\n\n\nGNU General Public License\n--------------------------\n\nGPL licenses are very very long, so instead of including them here we offer\nyou URLs with full text:\n\n- [GPL version 2](http://www.gnu.org/licenses/gpl-2.0.html)\n- [GPL version 3](http://www.gnu.org/licenses/gpl-3.0.html)\n"
        },
        {
          "name": "ncs.php",
          "type": "blob",
          "size": 0.2001953125,
          "content": "<?php\n\n/**\n * Rules for Nette Coding Standard\n * https://github.com/nette/coding-standard\n */\n\ndeclare(strict_types=1);\n\nreturn [\n\t// src/Tracy/Debugger/Debugger.php\n\t'ordered_class_elements' => false,\n];\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.220703125,
          "content": "{\n\t\"type\": \"module\",\n\t\"devDependencies\": {\n\t\t\"@eslint/js\": \"^9.4.0\",\n\t\t\"@stylistic/eslint-plugin\": \"^2.1.0\",\n\t\t\"eslint\": \"^9.4.0\",\n\t\t\"globals\": \"^15.3.0\"\n\t},\n\t\"scripts\": {\n\t\t\"lint\": \"eslint\",\n\t\t\"lint:fix\": \"eslint --fix\"\n\t}\n}\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.0380859375,
          "content": "parameters:\n\tlevel: 5\n\n\tpaths:\n\t\t- src\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 17.9013671875,
          "content": "[![Tracy](https://github.com/nette/tracy/assets/194960/f36323d8-486c-4a5e-b3f1-f97cd7c082ca)](https://tracy.nette.org)\n\n[![Downloads this Month](https://img.shields.io/packagist/dm/tracy/tracy.svg)](https://packagist.org/packages/tracy/tracy)\n[![Tests](https://github.com/nette/tracy/workflows/Tests/badge.svg?branch=master)](https://github.com/nette/tracy/actions)\n[![Build Status Windows](https://ci.appveyor.com/api/projects/status/github/nette/tracy?branch=master&svg=true)](https://ci.appveyor.com/project/dg/tracy/branch/master)\n[![Latest Stable Version](https://poser.pugx.org/tracy/tracy/v/stable)](https://github.com/nette/tracy/releases)\n[![License](https://img.shields.io/badge/license-New%20BSD-blue.svg)](https://github.com/nette/tracy/blob/master/license.md)\n\nÂ <!---->\n\nIntroduction\n------------\n\nTracy library is a useful helper for everyday PHP programmers. It helps you to:\n\nâœ… designed to facilitate debugging PHP code<br>\nâœ… hints and corrects you just like a good friend watching your back<br>\nâœ… damn cool visualization of errors\n\n\nPHP is a perfect language for making hardly detectable errors because it gives great flexibility to programmers. Tracy\\Debugger is more valuable because of that. It is an ultimate tool among the diagnostic ones.\n\nIf you are meeting Tracy for the first time, believe me, your life starts to be divided into one before the Tracy and the one with her. Welcome to the good part!\n\nDocumentation can be found on the [website](https://tracy.nette.org).\n\nÂ <!---->\n\n[Support Tracy](https://github.com/sponsors/dg)\n-----------------------------------------------\n\nDo you like Tracy? Are you looking forward to the new features?\n\n[![Buy me a coffee](https://files.nette.org/icons/donation-3.svg)](https://github.com/sponsors/dg)\n\nThank you!\n\nÂ <!---->\n\nInstallation and Requirements\n-----------------------------\n\nThe recommended way to is via Composer:\n\n```shell\ncomposer require tracy/tracy\n```\n\nAlternatively, you can download the whole package or [tracy.phar](https://github.com/nette/tracy/releases) file.\n\nTracy is compatible with PHP 8.1 to 8.4.\n\nÂ <!---->\n\nUsage\n-----\n\nTracy is activated by calling the `Tracy\\Debugger::enable()' method as soon as possible at the beginning of the program, before any output is sent:\n\n```php\nuse Tracy\\Debugger;\n\nrequire 'vendor/autoload.php'; // alternatively tracy.phar\n\nDebugger::enable();\n```\n\nThe first thing you'll notice on the page is the Tracy Bar in the bottom right corner. If you don't see it, it may mean that Tracy is running in production mode.\nThis is because Tracy is only visible on localhost for security reasons. To test if it works, you can temporarily put it into development mode using the `Debugger::enable(Debugger::Development)` parameter.\n\nÂ <!---->\n\nTracy Bar\n---------\n\nThe Tracy Bar is a floating panel. It is displayed in the bottom right corner of a page. You can move it using the mouse. It will remember its position after the page reloading.\n\n[![Debugger-Bar](https://nette.github.io/tracy/images/tracy-bar.webp)](https://nette.github.io/tracy/tracy-debug-bar.html)\n\nYou can add other useful panels to the Tracy Bar. You can find interesting ones in [addons](https://componette.org) or you can [create your own](https://tracy.nette.org/en/extensions).\n\nIf you do not want to show Tracy Bar, set:\n\n```php\nDebugger::$showBar = false;\n```\n\nÂ <!---->\n\nVisualization of Errors and Exceptions\n--------------------------------------\n\nSurely, you know how PHP reports errors: there is something like this in the page source code:\n\n```pre\n<b>Parse error</b>:  syntax error, unexpected '}' in <b>HomepagePresenter.php</b> on line <b>15</b>\n```\n\nor uncaught exception:\n\n```pre\n<b>Fatal error</b>:  Uncaught Nette\\MemberAccessException: Call to undefined method Nette\\Application\\UI\\Form::addTest()? in /sandbox/vendor/nette/utils/src/Utils/ObjectMixin.php:100\nStack trace:\n#0 /sandbox/vendor/nette/utils/src/Utils/Object.php(75): Nette\\Utils\\ObjectMixin::call(Object(Nette\\Application\\UI\\Form), 'addTest', Array)\n#1 /sandbox/app/forms/SignFormFactory.php(32): Nette\\Object-&gt;__call('addTest', Array)\n#2 /sandbox/app/presenters/SignPresenter.php(21): App\\Forms\\SignFormFactory-&gt;create()\n#3 /sandbox/vendor/nette/component-model/src/ComponentModel/Container.php(181): App\\Presenters\\SignPresenter-&gt;createComponentSignInForm('signInForm')\n#4 /sandbox/vendor/nette/component-model/src/ComponentModel/Container.php(139): Nette\\ComponentModel\\Container-&gt;createComponent('signInForm')\n#5 /sandbox/temp/cache/latte/15206b353f351f6bfca2c36cc.php(17): Nette\\ComponentModel\\Co in <b>/sandbox/vendor/nette/utils/src/Utils/ObjectMixin.php</b> on line <b>100</b><br />\n```\n\nIt is not so easy to navigate through this output. If you enable Tracy, both errors and exceptions are displayed in a completely different form:\n\n[![Uncaught exception rendered by Tracy](https://nette.github.io/tracy/images/tracy-exception.png)](https://nette.github.io/tracy/tracy-exception.html)\n\nThe error message literally screams. You can see a part of the source code with the highlighted line where the error occurred. A message clearly explains an error. The entire site is [interactive, try it](https://nette.github.io/tracy/tracy-exception.html).\n\nAnd you know what? Fatal errors are captured and displayed in the same way. No need to install any extension (click for live example):\n\n[![Fatal error rendered by Tracy](https://nette.github.io/tracy/images/tracy-error.png)](https://nette.github.io/tracy/tracy-error.html)\n\nErrors like a typo in a variable name or an attempt to open a nonexistent file generate reports of E_NOTICE or E_WARNING level. These can be easily overlooked and/or can be completely hidden in a web page graphic layout. Let Tracy manage them:\n\n[![Notice rendered by Tracy](https://nette.github.io/tracy/images/tracy-notice2.webp)](https://nette.github.io/tracy/tracy-debug-bar.html)\n\nOr they may be displayed like errors:\n\n```php\nDebugger::$strictMode = true; // display all errors\nDebugger::$strictMode = E_ALL & ~E_DEPRECATED & ~E_USER_DEPRECATED; // all errors except deprecated notices\n```\n\n[![Notice rendered by Tracy](https://nette.github.io/tracy/images/tracy-notice.png)](https://nette.github.io/tracy/tracy-notice.html)\n\nNote: Tracy when activated changes the error reporting level to E_ALL. If you want to change this, do so after calling `enable()`.\n\nÂ <!---->\n\nDevelopment vs Production Mode\n------------------------------\n\nAs you can see, Tracy is quite talkative, which can be appreciated in the development environment, while on the production server it would cause a disaster. That's because no debugging information should be displayed there. Tracy therefore has **environment auto-detection** and if the example is run on a live server, the error will be logged instead of displayed, and the visitor will only see a user-friendly message:\n\n[![Server Error 500](https://nette.github.io/tracy/images/tracy-error2.png)](https://nette.github.io/tracy/tracy-production.html)\n\nProduction mode suppresses the display of all debugging information sent out using [dump() |dumper], and of course also all error messages generated by PHP. So if you have forgotten some `dump($obj)` in the code, you don't have to worry, nothing will be displayed on the production server.\n\nHow does mode auto-detection work? The mode is development if the application is running on localhost (i.e., IP address `127.0.0.1` or `::1`) and there is no proxy (i.e., its HTTP header). Otherwise, it runs in production mode.\n\nIf you want to enable development mode in other cases, for example for developers accessing from a specific IP address, you can specify it as a parameter of the `enable()` method:\n\n```php\nDebugger::enable('23.75.345.200'); // you can also provide an array of IP addresses\n```\n\nWe definitely recommend combining the IP address with a cookie. Store a secret token, e.g., `secret1234`, in the `tracy-debug` cookie, and in this way, activate the development mode only for developers accessing from a specific IP address who have the mentioned token in the cookie:\n\n```php\nDebugger::enable('secret1234@23.75.345.200');\n```\n\nYou can also directly set the development/production mode using the `Debugger::Development` or `Debugger::Production` constants as a parameter of the `enable()` method.\n\n(If you use the Nette Framework, take a look at how to set the mode for it, and it will then also be used for Tracy.)\n\nÂ <!---->\n\nError Logging\n-------------\n\nIn production mode, Tracy automatically logs all errors and exceptions to a text log. In order for logging to take place, you need to set the absolute path to the log directory to the `$logDirectory` variable or pass it as the second parameter to `enable()` method:\n\n```php\nDebugger::$logDirectory = __DIR__ . '/log';\n```\n\nError logging is extremely useful. Imagine that all users of your application are actually beta testers who do top-notch work in finding errors for free, and you would be foolish to throw their valuable reports away unnoticed into the trash bin.\n\nIf you need to log your own messages or caught exceptions, use the method `log()`:\n\n```php\nDebugger::log('Unexpected error'); // text message\n\ntry {\n\tcriticalOperation();\n} catch (Exception $e) {\n\tDebugger::log($e); // log exception\n\t// or\n\tDebugger::log($e, Debugger::ERROR); // also sends an email notification\n}\n```\n\nIf you want Tracy to log PHP errors like `E_NOTICE` or `E_WARNING` with detailed information (HTML report), set `Debugger::$logSeverity`:\n\n```php\nDebugger::$logSeverity = E_NOTICE | E_WARNING;\n```\n\nFor a real professional the error log is a crucial source of information and he or she wants to be notified about any new error immediately. Tracy helps him. She is capable of sending an email for every new error record. The variable $email identifies where to send these e-mails:\n\n```php\nDebugger::$email = 'admin@example.com';\n```\n\n(If you use the Nette Framework, you can set this and others in the configuration file.)\n\nTo protect your e-mail box from flood, Tracy sends **only one message** and creates a file `email-sent`. When a developer receives the e-mail notification, he checks the log, corrects his application and deletes the `email-sent` monitoring file. This activates the e-mail sending again.\n\nÂ <!---->\n\nOpening Files in the Editor\n---------------------------\n\nWhen the error page is displayed, you can click on file names and they will open in your editor with the cursor on the corresponding line. Files can also be created (action `create file`) or bug fixed in them (action `fix it`). In order to do this, you need to [configure the browser and the system](https://tracy.nette.org/cs/open-files-in-ide).\n\nÂ <!---->\n\nVariable Dumping\n----------------\n\nEvery debugging developer is a good friend with the function `var_dump`, which lists all contents of any variable in detail. Unfortunately, its output is without HTML formatting and outputs the dump into a single line of HTML code, not to mention context escaping. It is necessary to replace the `var_dump` with a more handy function. That is just what `dump()` is.\n\n```php\n$arr = [10, 20.2, true, null, 'hello'];\n\ndump($arr);\n// or Debugger::dump($arr);\n```\n\ngenerates the output:\n\n![dump](https://nette.github.io/tracy/images/dump-basic.webp)\n\nYou can change the default light theme to dark:\n\n```php\nDebugger::$dumpTheme = 'dark';\n```\n\n![dump](https://nette.github.io/tracy/images/dump-dark.webp)\n\nYou can also change the nesting depth by `Debugger::$maxDepth` and displayed strings length by `Debugger::$maxLength`. Naturally, lower values accelerate Tracy rendering.\n\n```php\nDebugger::$maxDepth = 2; // default: 3\nDebugger::$maxLength = 50; // default: 150\nDebugger::$dumpTheme = 'dark'; // default: light\n```\n\nThe `dump()` function can display other useful information. `Tracy\\Dumper::LOCATION_SOURCE` adds a tooltip with path to the file, where the function was called. `Tracy\\Dumper::LOCATION_LINK` adds a link to the file. `Tracy\\Dumper::LOCATION_CLASS` adds a tooltip to every dumped object containing path to the file, in which the object's class is defined. All these constants can be set in `Debugger::$showLocation` variable before calling the `dump()`. You can set multiple values at once using the `|` operator.\n\n```php\nDebugger::$showLocation = Tracy\\Dumper::LOCATION_SOURCE; // Shows path to where the dump() was called\nDebugger::$showLocation = Tracy\\Dumper::LOCATION_CLASS | Tracy\\Dumper::LOCATION_LINK; // Shows both paths to the classes and link to where the dump() was called\nDebugger::$showLocation = false; // Hides additional location information\nDebugger::$showLocation = true; // Shows all additional location information\n```\n\nVery handy alternative to `dump()` is `dumpe()` (ie. dump and exit) and `bdump()`. This allows us to dump variables in Tracy Bar. This is useful, because dumps don't mess up the output and we can also add a title to the dump.\n\n```php\nbdump([2, 4, 6, 8], 'even numbers up to ten');\nbdump([1, 3, 5, 7, 9], 'odd numbers up to ten');\n```\n\n![bar dump](https://nette.github.io/tracy/images/bardump-en.webp)\n\nÂ <!---->\n\nStopwatch\n---------\n\nAnother useful tool is the debugger stopwatch with a precision of microseconds:\n\n```php\nDebugger::timer();\n\n// sweet dreams my cherrie\nsleep(2);\n\n$elapsed = Debugger::timer();\n// $elapsed = 2\n```\n\nMultiple measurements at once can be achieved by an optional parameter.\n\n```php\nDebugger::timer('page-generating');\n// some code\n\nDebugger::timer('rss-generating');\n// some code\n\n$rssElapsed = Debugger::timer('rss-generating');\n$pageElapsed = Debugger::timer('page-generating');\n```\n\n```php\nDebugger::timer(); // runs the timer\n\n... // some time-consuming operation\n\necho Debugger::timer(); // elapsed time in seconds\n```\n\nÂ <!---->\n\nCustom Logger\n-------------\n\nWe can create a custom logger to log errors, uncatched exceptions, and also be called by `Tracy\\Debugger::log()`. Logger implements the interface Tracy\\ILogger.\n\n```php\nuse Tracy\\ILogger;\n\nclass SlackLogger implements ILogger\n{\n\tpublic function log($value, $priority = ILogger::INFO)\n\t{\n\t\t// sends a request to Slack\n\t}\n}\n```\n\nAnd then we activate it:\n\n```php\nTracy\\Debugger::setLogger(new SlackLogger);\n```\n\nIf we use the full Nette Framework, we can set it in the NEON configuration file:\n\n```neon\nservices:\n\ttracy.logger: SlackLogger\n```\n\nÂ <!---->\n\nMonolog Integration\n-------------------\n\nThis package provides a PSR-3 adapter, allowing for integration of [monolog/monolog](https://github.com/Seldaek/monolog).\n\n```php\n$monolog = new Monolog\\Logger('main-channel');\n$monolog->pushHandler(new Monolog\\Handler\\StreamHandler($logFilePath, Monolog\\Logger::DEBUG));\n\n$tracyLogger = new Tracy\\Bridges\\Psr\\PsrToTracyLoggerAdapter($monolog);\nDebugger::setLogger($tracyLogger);\nDebugger::enable();\n\nDebugger::log('info'); // writes: [<TIMESTAMP>] main-channel.INFO: info [] []\nDebugger::log('warning', Debugger::WARNING); // writes: [<TIMESTAMP>] main-channel.WARNING: warning [] []\n```\n\nÂ <!---->\n\nFaster Loading\n--------------\n\nThe basic integration is straightforward, however if you have slow blocking scripts in web page, they can slow the Tracy loading.\nThe solution is to place `<?php Tracy\\Debugger::renderLoader() ?>` into your template before any scripts:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>...<title>\n\t<?php Tracy\\Debugger::renderLoader() ?>\n\t<link rel=\"stylesheet\" href=\"assets/style.css\">\n\t<script src=\"https://code.jquery.com/jquery-3.1.1.min.js\"></script>\n</head>\n```\n\nÂ <!---->\n\nAJAX and Redirected Requests\n----------------------------\n\nTracy can display Debug bar and Bluescreens for AJAX requests and redirects. Tracy creates its own sessions, stores data in its own temporary files, and uses a `tracy-session` cookie.\n\nTracy can also be configured to use a native PHP session, which is started before Tracy is turned on:\n\n```php\nsession_start();\nDebugger::setSessionStorage(new Tracy\\NativeSession);\nDebugger::enable();\n```\n\nIn case starting a session requires more complex initialization, you can start Tracy immediately (so that it can handle any errors that occur) and then initialize the session handler and finally inform Tracy that the session is ready to be used using the `dispatch()` function:\n\n```php\nDebugger::setSessionStorage(new Tracy\\NativeSession);\nDebugger::enable();\n\n// followed by session initialization\n// and start the session\nsession_start();\n\nDebugger::dispatch();\n```\n\nThe `setSessionStorage()` function has existed since version 2.9, before that Tracy always used the native PHP session.\n\nÂ <!---->\n\nContent Security Policy\n-----------------------\n\nIf your site uses Content Security Policy, you'll need to add `'nonce-<value>'` and `'strict-dynamic'` to `script-src` for Tracy to work properly. Some 3rd plugins may require additional directives.\nNonce is not supported in the `style-src` directive, if you use this directive you need to add `'unsafe-inline'`, but this should be avoided in production mode.\n\nConfiguration example for [Nette Framework](https://nette.org):\n\n```neon\nhttp:\n\tcsp:\n\t\tscript-src: [nonce, strict-dynamic]\n```\n\nExample in pure PHP:\n\n```php\n$nonce = base64_encode(random_bytes(20));\nheader(\"Content-Security-Policy: script-src 'nonce-$nonce' 'strict-dynamic';\");\n```\n\n\nnginx\n-----\n\nIf Tracy does not work on nginx, it is probably misconfigured. If there is something like\n\n```nginx\ntry_files $uri $uri/ /index.php;\n```\n\nchange it to\n\n```nginx\ntry_files $uri $uri/ /index.php$is_args$args;\n```\n\nÂ <!---->\n\nIntegrations\n------------\n\nThis is a list of unofficial integrations to other frameworks and CMS:\n\n- [Drupal 7](http://drupal.org/project/traced)\n- Laravel framework: [recca0120/laravel-tracy](https://github.com/recca0120/laravel-tracy), [whipsterCZ/laravel-tracy](https://github.com/whipsterCZ/laravel-tracy)\n- [OpenCart](https://github.com/BurdaPraha/oc_tracy)\n- [ProcessWire CMS/CMF](https://github.com/adrianbj/TracyDebugger)\n- [Slim Framework](https://github.com/runcmf/runtracy)\n- Symfony framework: [kutny/tracy-bundle](https://github.com/kutny/tracy-bundle), [VasekPurchart/Tracy-Blue-Screen-Bundle](https://github.com/VasekPurchart/Tracy-Blue-Screen-Bundle)\n- [Wordpress](https://github.com/ktstudio/WP-Tracy)\n- [Joomla! CMS](https://n3t.bitbucket.io/extension/n3t-debug/)\n\n... feel free to be famous, create an integration for your favourite platform!\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}