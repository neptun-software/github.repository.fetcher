{
  "metadata": {
    "timestamp": 1736711845269,
    "page": 166,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebookarchive/facebook-php-sdk",
      "stars": 3289,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0625,
          "content": "/coverage/\nvendor/\ncomposer.lock\ncomposer.phar\n.DS_Store\n.idea/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.11328125,
          "content": "language: php\nphp:\n  - 5.3\n  - 5.4\n  - 5.5\nscript: phpunit --stderr --bootstrap tests/bootstrap.php tests/tests.php\n"
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 1.0390625,
          "content": "Facebook PHP SDK (v.3.0.0)\n==========================\n\nThe new PHP SDK (v3.0.0) is a major upgrade to the older one (v2.2.x):\n\n- Uses OAuth authentication flows instead of our legacy authentication flow\n- Consists of two classes. The first (class BaseFacebook) maintains the core of the upgrade, and the second one (class Facebook) is a small subclass that uses PHP sessions to store the user id and access token.\n\nIf you’re currently using the PHP SDK (v2.2.x) for authentication, you will recall that the login code looked like this:\n\n     $facebook = new Facebook(…);\n     $session = $facebook->getSession();\n     if ($session) {\n       // proceed knowing you have a valid user session\n     } else {\n       // proceed knowing you require user login and/or authentication\n     }\n\nThe login code is now:\n\n     $facebook = new Facebook(…);\n     $user = $facebook->getUser();\n     if ($user) {\n       // proceed knowing you have a logged in user who's authenticated\n     } else {\n       // proceed knowing you require user login and/or authentication\n     }\n\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.5849609375,
          "content": "{\n    \"name\": \"facebook/php-sdk\",\n    \"description\": \"Facebook PHP SDK\",\n    \"keywords\": [\"facebook\", \"sdk\"],\n    \"type\": \"library\",\n    \"homepage\": \"https://github.com/facebook/facebook-php-sdk\",\n    \"license\": \"Apache2\",\n    \"authors\": [\n        {\n            \"name\": \"Facebook\",\n            \"homepage\": \"https://github.com/facebook/facebook-php-sdk/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=5.2.0\",\n        \"ext-curl\": \"*\",\n        \"ext-json\": \"*\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"3.7.*\"\n    },\n    \"autoload\": {\n        \"classmap\": [\"src\"]\n    }\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 3.3173828125,
          "content": "### New SDK Released\n\nWe've released version 4 of the Facebook SDK for PHP here: [https://github.com/facebook/facebook-php-sdk-v4](https://github.com/facebook/facebook-php-sdk-v4)\nPlease use the new repository for new projects and contributions.\nSee the [Facebook Developers](https://developers.facebook.com/docs/php/) site\n for documentation.\n\n-----\n\n-----\n\n-----\n\n-----\n\nFacebook PHP SDK (v.3.2.3) (DEPRECATED)\n\nThe [Facebook Platform](http://developers.facebook.com/) is\na set of APIs that make your app more social.\n\nThis repository contains the open source PHP SDK that allows you to\naccess Facebook Platform from your PHP app. Except as otherwise noted,\nthe Facebook PHP SDK is licensed under the Apache Licence, Version 2.0\n(http://www.apache.org/licenses/LICENSE-2.0.html).\n\n\nUsage\n-----\n\nThe [examples][examples] are a good place to start. The minimal you'll need to\nhave is:\n```php\nrequire 'facebook-php-sdk/src/facebook.php';\n\n$facebook = new Facebook(array(\n  'appId'  => 'YOUR_APP_ID',\n  'secret' => 'YOUR_APP_SECRET',\n));\n\n// Get User ID\n$user = $facebook->getUser();\n```\n\nTo make [API][API] calls:\n```php\nif ($user) {\n  try {\n    // Proceed knowing you have a logged in user who's authenticated.\n    $user_profile = $facebook->api('/me');\n  } catch (FacebookApiException $e) {\n    error_log($e);\n    $user = null;\n  }\n}\n```\n\nYou can make api calls by choosing the `HTTP method` and setting optional `parameters`:\n```php\n$facebook->api('/me/feed/', 'post', array(\n\t'message' => 'I want to display this message on my wall'\n));\n```\n\n\nLogin or logout url will be needed depending on current user state.\n```php\nif ($user) {\n  $logoutUrl = $facebook->getLogoutUrl();\n} else {\n  $loginUrl = $facebook->getLoginUrl();\n}\n```\n\nWith Composer:\n\n- Add the `\"facebook/php-sdk\": \"@stable\"` into the `require` section of your `composer.json`.\n- Run `composer install`.\n- The example will look like\n\n```php\nif (($loader = require_once __DIR__ . '/vendor/autoload.php') == null)  {\n  die('Vendor directory not found, Please run composer install.');\n}\n\n$facebook = new Facebook(array(\n  'appId'  => 'YOUR_APP_ID',\n  'secret' => 'YOUR_APP_SECRET',\n));\n\n// Get User ID\n$user = $facebook->getUser();\n```\n\n[examples]: /examples/example.php\n[API]: http://developers.facebook.com/docs/api\n\nTests\n-----\n\nIn order to keep us nimble and allow us to bring you new functionality, without\ncompromising on stability, we have ensured full test coverage of the SDK.\nWe are including this in the open source repository to assure you of our\ncommitment to quality, but also with the hopes that you will contribute back to\nhelp keep it stable. The easiest way to do so is to file bugs and include a\ntest case.\n\nThe tests can be executed by using this command from the base directory:\n\n    phpunit --stderr --bootstrap tests/bootstrap.php tests/tests.php\n\n\nContributing\n===========\nFor us to accept contributions you will have to first have signed the\n[Contributor License Agreement](https://developers.facebook.com/opensource/cla).\n\nWhen commiting, keep all lines to less than 80 characters, and try to\nfollow the existing style.\n\nBefore creating a pull request, squash your commits into a single commit.\n\nAdd the comments where needed, and provide ample explanation in the\ncommit message.\n\n\nReport Issues/Bugs\n===============\n[Bugs](https://developers.facebook.com/bugs)\n\n[Questions](http://facebook.stackoverflow.com)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}