{
  "metadata": {
    "timestamp": 1736711949048,
    "page": 386,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Vuedo/vuedo",
      "stars": 2287,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".env.example",
          "type": "blob",
          "size": 0.4619140625,
          "content": "APP_ENV=local\nAPP_KEY=\nAPP_DEBUG=true\nAPP_LOG_LEVEL=debug\nAPP_URL=http://localhost\n\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=homestead\nDB_USERNAME=homestead\nDB_PASSWORD=secret\n\nCACHE_DRIVER=file\nSESSION_DRIVER=file\nQUEUE_DRIVER=sync\n\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\nMAIL_DRIVER=smtp\nMAIL_HOST=mailtrap.io\nMAIL_PORT=2525\nMAIL_USERNAME=\nMAIL_PASSWORD=\nMAIL_ENCRYPTION=null\n\nTHEME_NAME=clean-blog\n\nS3_KEY=\nS3_SECRET=\n\nHASH_KEY=\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0595703125,
          "content": "* text=auto\n*.css linguist-vendored\n*.scss linguist-vendored\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4501953125,
          "content": "/vendor\n/node_modules\n/public/storage\n/public/build/*\n/public/js/main.js\n/public/js/main.js.map\n/public/js/theme.js\n/public/js/theme.js.map\npublic/js/submit.js\npublic/js/submit.js.map\n/public/css/clean-blog.css\n/public/css/clean-blog.css.map\n/public/css/main.css\n/public/css/main.css.map\nresources/views/themes/*\n!resources/views/themes/clean-blog/\nresources/assets/themes/*\n!resources/assets/themes/clean-blog/\n.env\n.idea/\n.phpstorm.meta.php\npublic/img/posts/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.501953125,
          "content": "language: php\n\nservices:\n  - mysql\n  \nphp:\n  - 5.5.9\n  - 5.6\n  - 7.0\n  - hhvm\n\nsudo: false\n\n# cache vendor dirs\ncache:\n  directories:\n    - vendor\n    - $HOME/.composer/cache\n\nbefore_install:\n  - if [[ $TRAVIS_PHP_VERSION != hhvm ]]; then phpenv config-rm xdebug.ini; fi;\n\ninstall:\n  - COMPOSER_DISCARD_CHANGES=1 composer install --dev --prefer-source --no-interaction\n\nbefore_script:\n  - mysql -e 'create database vuedo_test;'\n  - php artisan migrate\n  - php artisan db:seed\n\nscript:\n  - vendor/bin/phpunit tests\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1201171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2018 Alex Kyriakidis <hootlex@icloud.com> & Kostas Maniatis <mimousteileis@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.1025390625,
          "content": "\n# Vuedo ![logo](http://i.imgur.com/iBEAx7O.png?2)\n[![Build Status](https://travis-ci.org/Vuedo/vuedo.svg?branch=master)](https://travis-ci.org/Vuedo/vuedo) [![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat)](LICENSE) [![Join the chat at https://gitter.im/vuedo/Lobby](https://badges.gitter.im/vuedo/Lobby.svg)](https://gitter.im/vuedo/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n## What is Vuedo?\n\nVuedo is an open source project built with Laravel and Vue.js. It is a live example of how everything works together.\n\nInterested in more theory? Here is the [official announcement](https://dotdev.co/announcing-vuedo-an-open-source-project-built-with-laravel-and-vue-js-84f371409401).\n\n## Website using Vuedo in production : [https://vuejsfeed.com/](https://vuejsfeed.com/)\n\nVue.js Feed is a place where News, Tutorials, Plugins, Showcases and more things regarding Vue are handpicked and shared with the community.\n\n![Dashboard Overview](http://i.imgur.com/4AdbjsF.gif)\n\n## Basic Features:\n\n* Manage posts and media\n* Categorize posts\n* User Roles\n* Content moderation\n* Markdown Editor\n* Amazon S3 integration\n* and more...\n\n## Installation\n\nDownload this repo.\n\nRename `.env.example` to `.env` and fill the options.\n\nRun the following commands:\n\n```\ncomposer install\nnpm install\nphp artisan key:generate\nphp artisan migrate\nphp artisan db:seed\ngulp\nphp artisan serve\n```\n\nIf you are making changes to JavaScript or Styles make sure you run `gulp watch`.\n\n## Technical Description\n\nYou can find the technical description and a list with the libraries used in development [here](https://github.com/Vuedo/vuedo/wiki/Technical-Description).\n\n## Documentation\n\nComing soon...\n\n## Issues\n\nFor technical questions and bugs feel free to open one issue.\n\n## Contribution\n\nSoon a roadmap for contribution will be added so everyone will be welcome to join.\n\n## Stay In Touch\n\nFor latest releases and announcements, follow [@vuedo](https://twitter.com/vuedo) on Twitter.\n\n## License\n\nVuedo is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).\n"
        },
        {
          "name": "_ide_helper.php",
          "type": "blob",
          "size": 359.3642578125,
          "content": "<?php\n/**\n * A helper file for Laravel 5, to provide autocomplete information to your IDE\n * Generated for Laravel 5.2.37 on 2016-07-22.\n *\n * @author Barry vd. Heuvel <barryvdh@gmail.com>\n * @see https://github.com/barryvdh/laravel-ide-helper\n */\n\nnamespace {\n    exit(\"This file should not be included, only analyzed by your IDE\");\n\n    class App extends \\Illuminate\\Support\\Facades\\App{\n        \n        /**\n         * Get the version number of the application.\n         *\n         * @return string \n         * @static \n         */\n        public static function version(){\n            return \\Illuminate\\Foundation\\Application::version();\n        }\n        \n        /**\n         * Run the given array of bootstrap classes.\n         *\n         * @param array $bootstrappers\n         * @return void \n         * @static \n         */\n        public static function bootstrapWith($bootstrappers){\n            \\Illuminate\\Foundation\\Application::bootstrapWith($bootstrappers);\n        }\n        \n        /**\n         * Register a callback to run after loading the environment.\n         *\n         * @param \\Closure $callback\n         * @return void \n         * @static \n         */\n        public static function afterLoadingEnvironment($callback){\n            \\Illuminate\\Foundation\\Application::afterLoadingEnvironment($callback);\n        }\n        \n        /**\n         * Register a callback to run before a bootstrapper.\n         *\n         * @param string $bootstrapper\n         * @param \\Closure $callback\n         * @return void \n         * @static \n         */\n        public static function beforeBootstrapping($bootstrapper, $callback){\n            \\Illuminate\\Foundation\\Application::beforeBootstrapping($bootstrapper, $callback);\n        }\n        \n        /**\n         * Register a callback to run after a bootstrapper.\n         *\n         * @param string $bootstrapper\n         * @param \\Closure $callback\n         * @return void \n         * @static \n         */\n        public static function afterBootstrapping($bootstrapper, $callback){\n            \\Illuminate\\Foundation\\Application::afterBootstrapping($bootstrapper, $callback);\n        }\n        \n        /**\n         * Determine if the application has been bootstrapped before.\n         *\n         * @return bool \n         * @static \n         */\n        public static function hasBeenBootstrapped(){\n            return \\Illuminate\\Foundation\\Application::hasBeenBootstrapped();\n        }\n        \n        /**\n         * Set the base path for the application.\n         *\n         * @param string $basePath\n         * @return $this \n         * @static \n         */\n        public static function setBasePath($basePath){\n            return \\Illuminate\\Foundation\\Application::setBasePath($basePath);\n        }\n        \n        /**\n         * Get the path to the application \"app\" directory.\n         *\n         * @return string \n         * @static \n         */\n        public static function path(){\n            return \\Illuminate\\Foundation\\Application::path();\n        }\n        \n        /**\n         * Get the base path of the Laravel installation.\n         *\n         * @return string \n         * @static \n         */\n        public static function basePath(){\n            return \\Illuminate\\Foundation\\Application::basePath();\n        }\n        \n        /**\n         * Get the path to the bootstrap directory.\n         *\n         * @return string \n         * @static \n         */\n        public static function bootstrapPath(){\n            return \\Illuminate\\Foundation\\Application::bootstrapPath();\n        }\n        \n        /**\n         * Get the path to the application configuration files.\n         *\n         * @return string \n         * @static \n         */\n        public static function configPath(){\n            return \\Illuminate\\Foundation\\Application::configPath();\n        }\n        \n        /**\n         * Get the path to the database directory.\n         *\n         * @return string \n         * @static \n         */\n        public static function databasePath(){\n            return \\Illuminate\\Foundation\\Application::databasePath();\n        }\n        \n        /**\n         * Set the database directory.\n         *\n         * @param string $path\n         * @return $this \n         * @static \n         */\n        public static function useDatabasePath($path){\n            return \\Illuminate\\Foundation\\Application::useDatabasePath($path);\n        }\n        \n        /**\n         * Get the path to the language files.\n         *\n         * @return string \n         * @static \n         */\n        public static function langPath(){\n            return \\Illuminate\\Foundation\\Application::langPath();\n        }\n        \n        /**\n         * Get the path to the public / web directory.\n         *\n         * @return string \n         * @static \n         */\n        public static function publicPath(){\n            return \\Illuminate\\Foundation\\Application::publicPath();\n        }\n        \n        /**\n         * Get the path to the storage directory.\n         *\n         * @return string \n         * @static \n         */\n        public static function storagePath(){\n            return \\Illuminate\\Foundation\\Application::storagePath();\n        }\n        \n        /**\n         * Set the storage directory.\n         *\n         * @param string $path\n         * @return $this \n         * @static \n         */\n        public static function useStoragePath($path){\n            return \\Illuminate\\Foundation\\Application::useStoragePath($path);\n        }\n        \n        /**\n         * Get the path to the environment file directory.\n         *\n         * @return string \n         * @static \n         */\n        public static function environmentPath(){\n            return \\Illuminate\\Foundation\\Application::environmentPath();\n        }\n        \n        /**\n         * Set the directory for the environment file.\n         *\n         * @param string $path\n         * @return $this \n         * @static \n         */\n        public static function useEnvironmentPath($path){\n            return \\Illuminate\\Foundation\\Application::useEnvironmentPath($path);\n        }\n        \n        /**\n         * Set the environment file to be loaded during bootstrapping.\n         *\n         * @param string $file\n         * @return $this \n         * @static \n         */\n        public static function loadEnvironmentFrom($file){\n            return \\Illuminate\\Foundation\\Application::loadEnvironmentFrom($file);\n        }\n        \n        /**\n         * Get the environment file the application is using.\n         *\n         * @return string \n         * @static \n         */\n        public static function environmentFile(){\n            return \\Illuminate\\Foundation\\Application::environmentFile();\n        }\n        \n        /**\n         * Get the fully qualified path to the environment file.\n         *\n         * @return string \n         * @static \n         */\n        public static function environmentFilePath(){\n            return \\Illuminate\\Foundation\\Application::environmentFilePath();\n        }\n        \n        /**\n         * Get or check the current application environment.\n         *\n         * @param mixed\n         * @return string|bool \n         * @static \n         */\n        public static function environment(){\n            return \\Illuminate\\Foundation\\Application::environment();\n        }\n        \n        /**\n         * Determine if application is in local environment.\n         *\n         * @return bool \n         * @static \n         */\n        public static function isLocal(){\n            return \\Illuminate\\Foundation\\Application::isLocal();\n        }\n        \n        /**\n         * Detect the application's current environment.\n         *\n         * @param \\Closure $callback\n         * @return string \n         * @static \n         */\n        public static function detectEnvironment($callback){\n            return \\Illuminate\\Foundation\\Application::detectEnvironment($callback);\n        }\n        \n        /**\n         * Determine if we are running in the console.\n         *\n         * @return bool \n         * @static \n         */\n        public static function runningInConsole(){\n            return \\Illuminate\\Foundation\\Application::runningInConsole();\n        }\n        \n        /**\n         * Determine if we are running unit tests.\n         *\n         * @return bool \n         * @static \n         */\n        public static function runningUnitTests(){\n            return \\Illuminate\\Foundation\\Application::runningUnitTests();\n        }\n        \n        /**\n         * Register all of the configured providers.\n         *\n         * @return void \n         * @static \n         */\n        public static function registerConfiguredProviders(){\n            \\Illuminate\\Foundation\\Application::registerConfiguredProviders();\n        }\n        \n        /**\n         * Register a service provider with the application.\n         *\n         * @param \\Illuminate\\Support\\ServiceProvider|string $provider\n         * @param array $options\n         * @param bool $force\n         * @return \\Illuminate\\Support\\ServiceProvider \n         * @static \n         */\n        public static function register($provider, $options = array(), $force = false){\n            return \\Illuminate\\Foundation\\Application::register($provider, $options, $force);\n        }\n        \n        /**\n         * Get the registered service provider instance if it exists.\n         *\n         * @param \\Illuminate\\Support\\ServiceProvider|string $provider\n         * @return \\Illuminate\\Support\\ServiceProvider|null \n         * @static \n         */\n        public static function getProvider($provider){\n            return \\Illuminate\\Foundation\\Application::getProvider($provider);\n        }\n        \n        /**\n         * Resolve a service provider instance from the class name.\n         *\n         * @param string $provider\n         * @return \\Illuminate\\Support\\ServiceProvider \n         * @static \n         */\n        public static function resolveProviderClass($provider){\n            return \\Illuminate\\Foundation\\Application::resolveProviderClass($provider);\n        }\n        \n        /**\n         * Load and boot all of the remaining deferred providers.\n         *\n         * @return void \n         * @static \n         */\n        public static function loadDeferredProviders(){\n            \\Illuminate\\Foundation\\Application::loadDeferredProviders();\n        }\n        \n        /**\n         * Load the provider for a deferred service.\n         *\n         * @param string $service\n         * @return void \n         * @static \n         */\n        public static function loadDeferredProvider($service){\n            \\Illuminate\\Foundation\\Application::loadDeferredProvider($service);\n        }\n        \n        /**\n         * Register a deferred provider and service.\n         *\n         * @param string $provider\n         * @param string $service\n         * @return void \n         * @static \n         */\n        public static function registerDeferredProvider($provider, $service = null){\n            \\Illuminate\\Foundation\\Application::registerDeferredProvider($provider, $service);\n        }\n        \n        /**\n         * Resolve the given type from the container.\n         * \n         * (Overriding Container::make)\n         *\n         * @param string $abstract\n         * @param array $parameters\n         * @return mixed \n         * @static \n         */\n        public static function make($abstract, $parameters = array()){\n            return \\Illuminate\\Foundation\\Application::make($abstract, $parameters);\n        }\n        \n        /**\n         * Determine if the given abstract type has been bound.\n         * \n         * (Overriding Container::bound)\n         *\n         * @param string $abstract\n         * @return bool \n         * @static \n         */\n        public static function bound($abstract){\n            return \\Illuminate\\Foundation\\Application::bound($abstract);\n        }\n        \n        /**\n         * Determine if the application has booted.\n         *\n         * @return bool \n         * @static \n         */\n        public static function isBooted(){\n            return \\Illuminate\\Foundation\\Application::isBooted();\n        }\n        \n        /**\n         * Boot the application's service providers.\n         *\n         * @return void \n         * @static \n         */\n        public static function boot(){\n            \\Illuminate\\Foundation\\Application::boot();\n        }\n        \n        /**\n         * Register a new boot listener.\n         *\n         * @param mixed $callback\n         * @return void \n         * @static \n         */\n        public static function booting($callback){\n            \\Illuminate\\Foundation\\Application::booting($callback);\n        }\n        \n        /**\n         * Register a new \"booted\" listener.\n         *\n         * @param mixed $callback\n         * @return void \n         * @static \n         */\n        public static function booted($callback){\n            \\Illuminate\\Foundation\\Application::booted($callback);\n        }\n        \n        /**\n         * {@inheritdoc}\n         *\n         * @static \n         */\n        public static function handle($request, $type = 1, $catch = true){\n            return \\Illuminate\\Foundation\\Application::handle($request, $type, $catch);\n        }\n        \n        /**\n         * Determine if middleware has been disabled for the application.\n         *\n         * @return bool \n         * @static \n         */\n        public static function shouldSkipMiddleware(){\n            return \\Illuminate\\Foundation\\Application::shouldSkipMiddleware();\n        }\n        \n        /**\n         * Determine if the application configuration is cached.\n         *\n         * @return bool \n         * @static \n         */\n        public static function configurationIsCached(){\n            return \\Illuminate\\Foundation\\Application::configurationIsCached();\n        }\n        \n        /**\n         * Get the path to the configuration cache file.\n         *\n         * @return string \n         * @static \n         */\n        public static function getCachedConfigPath(){\n            return \\Illuminate\\Foundation\\Application::getCachedConfigPath();\n        }\n        \n        /**\n         * Determine if the application routes are cached.\n         *\n         * @return bool \n         * @static \n         */\n        public static function routesAreCached(){\n            return \\Illuminate\\Foundation\\Application::routesAreCached();\n        }\n        \n        /**\n         * Get the path to the routes cache file.\n         *\n         * @return string \n         * @static \n         */\n        public static function getCachedRoutesPath(){\n            return \\Illuminate\\Foundation\\Application::getCachedRoutesPath();\n        }\n        \n        /**\n         * Get the path to the cached \"compiled.php\" file.\n         *\n         * @return string \n         * @static \n         */\n        public static function getCachedCompilePath(){\n            return \\Illuminate\\Foundation\\Application::getCachedCompilePath();\n        }\n        \n        /**\n         * Get the path to the cached services.php file.\n         *\n         * @return string \n         * @static \n         */\n        public static function getCachedServicesPath(){\n            return \\Illuminate\\Foundation\\Application::getCachedServicesPath();\n        }\n        \n        /**\n         * Determine if the application is currently down for maintenance.\n         *\n         * @return bool \n         * @static \n         */\n        public static function isDownForMaintenance(){\n            return \\Illuminate\\Foundation\\Application::isDownForMaintenance();\n        }\n        \n        /**\n         * Throw an HttpException with the given data.\n         *\n         * @param int $code\n         * @param string $message\n         * @param array $headers\n         * @return void \n         * @throws \\Symfony\\Component\\HttpKernel\\Exception\\HttpException\n         * @static \n         */\n        public static function abort($code, $message = '', $headers = array()){\n            \\Illuminate\\Foundation\\Application::abort($code, $message, $headers);\n        }\n        \n        /**\n         * Register a terminating callback with the application.\n         *\n         * @param \\Closure $callback\n         * @return $this \n         * @static \n         */\n        public static function terminating($callback){\n            return \\Illuminate\\Foundation\\Application::terminating($callback);\n        }\n        \n        /**\n         * Terminate the application.\n         *\n         * @return void \n         * @static \n         */\n        public static function terminate(){\n            \\Illuminate\\Foundation\\Application::terminate();\n        }\n        \n        /**\n         * Get the service providers that have been loaded.\n         *\n         * @return array \n         * @static \n         */\n        public static function getLoadedProviders(){\n            return \\Illuminate\\Foundation\\Application::getLoadedProviders();\n        }\n        \n        /**\n         * Get the application's deferred services.\n         *\n         * @return array \n         * @static \n         */\n        public static function getDeferredServices(){\n            return \\Illuminate\\Foundation\\Application::getDeferredServices();\n        }\n        \n        /**\n         * Set the application's deferred services.\n         *\n         * @param array $services\n         * @return void \n         * @static \n         */\n        public static function setDeferredServices($services){\n            \\Illuminate\\Foundation\\Application::setDeferredServices($services);\n        }\n        \n        /**\n         * Add an array of services to the application's deferred services.\n         *\n         * @param array $services\n         * @return void \n         * @static \n         */\n        public static function addDeferredServices($services){\n            \\Illuminate\\Foundation\\Application::addDeferredServices($services);\n        }\n        \n        /**\n         * Determine if the given service is a deferred service.\n         *\n         * @param string $service\n         * @return bool \n         * @static \n         */\n        public static function isDeferredService($service){\n            return \\Illuminate\\Foundation\\Application::isDeferredService($service);\n        }\n        \n        /**\n         * Define a callback to be used to configure Monolog.\n         *\n         * @param callable $callback\n         * @return $this \n         * @static \n         */\n        public static function configureMonologUsing($callback){\n            return \\Illuminate\\Foundation\\Application::configureMonologUsing($callback);\n        }\n        \n        /**\n         * Determine if the application has a custom Monolog configurator.\n         *\n         * @return bool \n         * @static \n         */\n        public static function hasMonologConfigurator(){\n            return \\Illuminate\\Foundation\\Application::hasMonologConfigurator();\n        }\n        \n        /**\n         * Get the custom Monolog configurator for the application.\n         *\n         * @return callable \n         * @static \n         */\n        public static function getMonologConfigurator(){\n            return \\Illuminate\\Foundation\\Application::getMonologConfigurator();\n        }\n        \n        /**\n         * Get the current application locale.\n         *\n         * @return string \n         * @static \n         */\n        public static function getLocale(){\n            return \\Illuminate\\Foundation\\Application::getLocale();\n        }\n        \n        /**\n         * Set the current application locale.\n         *\n         * @param string $locale\n         * @return void \n         * @static \n         */\n        public static function setLocale($locale){\n            \\Illuminate\\Foundation\\Application::setLocale($locale);\n        }\n        \n        /**\n         * Determine if application locale is the given locale.\n         *\n         * @param string $locale\n         * @return bool \n         * @static \n         */\n        public static function isLocale($locale){\n            return \\Illuminate\\Foundation\\Application::isLocale($locale);\n        }\n        \n        /**\n         * Register the core class aliases in the container.\n         *\n         * @return void \n         * @static \n         */\n        public static function registerCoreContainerAliases(){\n            \\Illuminate\\Foundation\\Application::registerCoreContainerAliases();\n        }\n        \n        /**\n         * Flush the container of all bindings and resolved instances.\n         *\n         * @return void \n         * @static \n         */\n        public static function flush(){\n            \\Illuminate\\Foundation\\Application::flush();\n        }\n        \n        /**\n         * Get the application namespace.\n         *\n         * @return string \n         * @throws \\RuntimeException\n         * @static \n         */\n        public static function getNamespace(){\n            return \\Illuminate\\Foundation\\Application::getNamespace();\n        }\n        \n        /**\n         * Define a contextual binding.\n         *\n         * @param string $concrete\n         * @return \\Illuminate\\Contracts\\Container\\ContextualBindingBuilder \n         * @static \n         */\n        public static function when($concrete){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            return \\Illuminate\\Foundation\\Application::when($concrete);\n        }\n        \n        /**\n         * Determine if the given abstract type has been resolved.\n         *\n         * @param string $abstract\n         * @return bool \n         * @static \n         */\n        public static function resolved($abstract){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            return \\Illuminate\\Foundation\\Application::resolved($abstract);\n        }\n        \n        /**\n         * Determine if a given string is an alias.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */\n        public static function isAlias($name){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            return \\Illuminate\\Foundation\\Application::isAlias($name);\n        }\n        \n        /**\n         * Register a binding with the container.\n         *\n         * @param string|array $abstract\n         * @param \\Closure|string|null $concrete\n         * @param bool $shared\n         * @return void \n         * @static \n         */\n        public static function bind($abstract, $concrete = null, $shared = false){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            \\Illuminate\\Foundation\\Application::bind($abstract, $concrete, $shared);\n        }\n        \n        /**\n         * Add a contextual binding to the container.\n         *\n         * @param string $concrete\n         * @param string $abstract\n         * @param \\Closure|string $implementation\n         * @return void \n         * @static \n         */\n        public static function addContextualBinding($concrete, $abstract, $implementation){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            \\Illuminate\\Foundation\\Application::addContextualBinding($concrete, $abstract, $implementation);\n        }\n        \n        /**\n         * Register a binding if it hasn't already been registered.\n         *\n         * @param string $abstract\n         * @param \\Closure|string|null $concrete\n         * @param bool $shared\n         * @return void \n         * @static \n         */\n        public static function bindIf($abstract, $concrete = null, $shared = false){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            \\Illuminate\\Foundation\\Application::bindIf($abstract, $concrete, $shared);\n        }\n        \n        /**\n         * Register a shared binding in the container.\n         *\n         * @param string|array $abstract\n         * @param \\Closure|string|null $concrete\n         * @return void \n         * @static \n         */\n        public static function singleton($abstract, $concrete = null){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            \\Illuminate\\Foundation\\Application::singleton($abstract, $concrete);\n        }\n        \n        /**\n         * Wrap a Closure such that it is shared.\n         *\n         * @param \\Closure $closure\n         * @return \\Closure \n         * @static \n         */\n        public static function share($closure){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            return \\Illuminate\\Foundation\\Application::share($closure);\n        }\n        \n        /**\n         * \"Extend\" an abstract type in the container.\n         *\n         * @param string $abstract\n         * @param \\Closure $closure\n         * @return void \n         * @throws \\InvalidArgumentException\n         * @static \n         */\n        public static function extend($abstract, $closure){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            \\Illuminate\\Foundation\\Application::extend($abstract, $closure);\n        }\n        \n        /**\n         * Register an existing instance as shared in the container.\n         *\n         * @param string $abstract\n         * @param mixed $instance\n         * @return void \n         * @static \n         */\n        public static function instance($abstract, $instance){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            \\Illuminate\\Foundation\\Application::instance($abstract, $instance);\n        }\n        \n        /**\n         * Assign a set of tags to a given binding.\n         *\n         * @param array|string $abstracts\n         * @param array|mixed $tags\n         * @return void \n         * @static \n         */\n        public static function tag($abstracts, $tags){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            \\Illuminate\\Foundation\\Application::tag($abstracts, $tags);\n        }\n        \n        /**\n         * Resolve all of the bindings for a given tag.\n         *\n         * @param string $tag\n         * @return array \n         * @static \n         */\n        public static function tagged($tag){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            return \\Illuminate\\Foundation\\Application::tagged($tag);\n        }\n        \n        /**\n         * Alias a type to a different name.\n         *\n         * @param string $abstract\n         * @param string $alias\n         * @return void \n         * @static \n         */\n        public static function alias($abstract, $alias){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            \\Illuminate\\Foundation\\Application::alias($abstract, $alias);\n        }\n        \n        /**\n         * Bind a new callback to an abstract's rebind event.\n         *\n         * @param string $abstract\n         * @param \\Closure $callback\n         * @return mixed \n         * @static \n         */\n        public static function rebinding($abstract, $callback){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            return \\Illuminate\\Foundation\\Application::rebinding($abstract, $callback);\n        }\n        \n        /**\n         * Refresh an instance on the given target and method.\n         *\n         * @param string $abstract\n         * @param mixed $target\n         * @param string $method\n         * @return mixed \n         * @static \n         */\n        public static function refresh($abstract, $target, $method){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            return \\Illuminate\\Foundation\\Application::refresh($abstract, $target, $method);\n        }\n        \n        /**\n         * Wrap the given closure such that its dependencies will be injected when executed.\n         *\n         * @param \\Closure $callback\n         * @param array $parameters\n         * @return \\Closure \n         * @static \n         */\n        public static function wrap($callback, $parameters = array()){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            return \\Illuminate\\Foundation\\Application::wrap($callback, $parameters);\n        }\n        \n        /**\n         * Call the given Closure / class@method and inject its dependencies.\n         *\n         * @param callable|string $callback\n         * @param array $parameters\n         * @param string|null $defaultMethod\n         * @return mixed \n         * @static \n         */\n        public static function call($callback, $parameters = array(), $defaultMethod = null){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            return \\Illuminate\\Foundation\\Application::call($callback, $parameters, $defaultMethod);\n        }\n        \n        /**\n         * Instantiate a concrete instance of the given type.\n         *\n         * @param string $concrete\n         * @param array $parameters\n         * @return mixed \n         * @throws \\Illuminate\\Contracts\\Container\\BindingResolutionException\n         * @static \n         */\n        public static function build($concrete, $parameters = array()){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            return \\Illuminate\\Foundation\\Application::build($concrete, $parameters);\n        }\n        \n        /**\n         * Register a new resolving callback.\n         *\n         * @param string $abstract\n         * @param \\Closure|null $callback\n         * @return void \n         * @static \n         */\n        public static function resolving($abstract, $callback = null){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            \\Illuminate\\Foundation\\Application::resolving($abstract, $callback);\n        }\n        \n        /**\n         * Register a new after resolving callback for all types.\n         *\n         * @param string $abstract\n         * @param \\Closure|null $callback\n         * @return void \n         * @static \n         */\n        public static function afterResolving($abstract, $callback = null){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            \\Illuminate\\Foundation\\Application::afterResolving($abstract, $callback);\n        }\n        \n        /**\n         * Determine if a given type is shared.\n         *\n         * @param string $abstract\n         * @return bool \n         * @static \n         */\n        public static function isShared($abstract){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            return \\Illuminate\\Foundation\\Application::isShared($abstract);\n        }\n        \n        /**\n         * Get the container's bindings.\n         *\n         * @return array \n         * @static \n         */\n        public static function getBindings(){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            return \\Illuminate\\Foundation\\Application::getBindings();\n        }\n        \n        /**\n         * Remove a resolved instance from the instance cache.\n         *\n         * @param string $abstract\n         * @return void \n         * @static \n         */\n        public static function forgetInstance($abstract){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            \\Illuminate\\Foundation\\Application::forgetInstance($abstract);\n        }\n        \n        /**\n         * Clear all of the instances from the container.\n         *\n         * @return void \n         * @static \n         */\n        public static function forgetInstances(){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            \\Illuminate\\Foundation\\Application::forgetInstances();\n        }\n        \n        /**\n         * Set the globally available instance of the container.\n         *\n         * @return static \n         * @static \n         */\n        public static function getInstance(){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            return \\Illuminate\\Foundation\\Application::getInstance();\n        }\n        \n        /**\n         * Set the shared instance of the container.\n         *\n         * @param \\Illuminate\\Contracts\\Container\\Container $container\n         * @return void \n         * @static \n         */\n        public static function setInstance($container){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            \\Illuminate\\Foundation\\Application::setInstance($container);\n        }\n        \n        /**\n         * Determine if a given offset exists.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */\n        public static function offsetExists($key){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            return \\Illuminate\\Foundation\\Application::offsetExists($key);\n        }\n        \n        /**\n         * Get the value at a given offset.\n         *\n         * @param string $key\n         * @return mixed \n         * @static \n         */\n        public static function offsetGet($key){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            return \\Illuminate\\Foundation\\Application::offsetGet($key);\n        }\n        \n        /**\n         * Set the value at a given offset.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void \n         * @static \n         */\n        public static function offsetSet($key, $value){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            \\Illuminate\\Foundation\\Application::offsetSet($key, $value);\n        }\n        \n        /**\n         * Unset the value at a given offset.\n         *\n         * @param string $key\n         * @return void \n         * @static \n         */\n        public static function offsetUnset($key){\n            //Method inherited from \\Illuminate\\Container\\Container            \n            \\Illuminate\\Foundation\\Application::offsetUnset($key);\n        }\n        \n    }\n\n\n    class Artisan extends \\Illuminate\\Support\\Facades\\Artisan{\n        \n        /**\n         * Run the console application.\n         *\n         * @param \\Symfony\\Component\\Console\\Input\\InputInterface $input\n         * @param \\Symfony\\Component\\Console\\Output\\OutputInterface $output\n         * @return int \n         * @static \n         */\n        public static function handle($input, $output = null){\n            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel            \n            return \\App\\Console\\Kernel::handle($input, $output);\n        }\n        \n        /**\n         * Terminate the application.\n         *\n         * @param \\Symfony\\Component\\Console\\Input\\InputInterface $input\n         * @param int $status\n         * @return void \n         * @static \n         */\n        public static function terminate($input, $status){\n            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel            \n            \\App\\Console\\Kernel::terminate($input, $status);\n        }\n        \n        /**\n         * Register the given command with the console application.\n         *\n         * @param \\Symfony\\Component\\Console\\Command\\Command $command\n         * @return void \n         * @static \n         */\n        public static function registerCommand($command){\n            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel            \n            \\App\\Console\\Kernel::registerCommand($command);\n        }\n        \n        /**\n         * Run an Artisan console command by name.\n         *\n         * @param string $command\n         * @param array $parameters\n         * @return int \n         * @static \n         */\n        public static function call($command, $parameters = array()){\n            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel            \n            return \\App\\Console\\Kernel::call($command, $parameters);\n        }\n        \n        /**\n         * Queue the given console command.\n         *\n         * @param string $command\n         * @param array $parameters\n         * @return void \n         * @static \n         */\n        public static function queue($command, $parameters = array()){\n            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel            \n            \\App\\Console\\Kernel::queue($command, $parameters);\n        }\n        \n        /**\n         * Get all of the commands registered with the console.\n         *\n         * @return array \n         * @static \n         */\n        public static function all(){\n            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel            \n            return \\App\\Console\\Kernel::all();\n        }\n        \n        /**\n         * Get the output for the last run command.\n         *\n         * @return string \n         * @static \n         */\n        public static function output(){\n            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel            \n            return \\App\\Console\\Kernel::output();\n        }\n        \n        /**\n         * Bootstrap the application for artisan commands.\n         *\n         * @return void \n         * @static \n         */\n        public static function bootstrap(){\n            //Method inherited from \\Illuminate\\Foundation\\Console\\Kernel            \n            \\App\\Console\\Kernel::bootstrap();\n        }\n        \n    }\n\n\n    class Auth extends \\Illuminate\\Support\\Facades\\Auth{\n        \n        /**\n         * Attempt to get the guard from the local cache.\n         *\n         * @param string $name\n         * @return \\Illuminate\\Contracts\\Auth\\Guard|\\Illuminate\\Contracts\\Auth\\StatefulGuard \n         * @static \n         */\n        public static function guard($name = null){\n            return \\Illuminate\\Auth\\AuthManager::guard($name);\n        }\n        \n        /**\n         * Create a session based authentication guard.\n         *\n         * @param string $name\n         * @param array $config\n         * @return \\Illuminate\\Auth\\SessionGuard \n         * @static \n         */\n        public static function createSessionDriver($name, $config){\n            return \\Illuminate\\Auth\\AuthManager::createSessionDriver($name, $config);\n        }\n        \n        /**\n         * Create a token based authentication guard.\n         *\n         * @param string $name\n         * @param array $config\n         * @return \\Illuminate\\Auth\\TokenGuard \n         * @static \n         */\n        public static function createTokenDriver($name, $config){\n            return \\Illuminate\\Auth\\AuthManager::createTokenDriver($name, $config);\n        }\n        \n        /**\n         * Get the default authentication driver name.\n         *\n         * @return string \n         * @static \n         */\n        public static function getDefaultDriver(){\n            return \\Illuminate\\Auth\\AuthManager::getDefaultDriver();\n        }\n        \n        /**\n         * Set the default guard driver the factory should serve.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */\n        public static function shouldUse($name){\n            \\Illuminate\\Auth\\AuthManager::shouldUse($name);\n        }\n        \n        /**\n         * Set the default authentication driver name.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */\n        public static function setDefaultDriver($name){\n            \\Illuminate\\Auth\\AuthManager::setDefaultDriver($name);\n        }\n        \n        /**\n         * Register a new callback based request guard.\n         *\n         * @param string $driver\n         * @param callable $callback\n         * @return $this \n         * @static \n         */\n        public static function viaRequest($driver, $callback){\n            return \\Illuminate\\Auth\\AuthManager::viaRequest($driver, $callback);\n        }\n        \n        /**\n         * Get the user resolver callback.\n         *\n         * @return \\Closure \n         * @static \n         */\n        public static function userResolver(){\n            return \\Illuminate\\Auth\\AuthManager::userResolver();\n        }\n        \n        /**\n         * Set the callback to be used to resolve users.\n         *\n         * @param \\Closure $userResolver\n         * @return $this \n         * @static \n         */\n        public static function resolveUsersUsing($userResolver){\n            return \\Illuminate\\Auth\\AuthManager::resolveUsersUsing($userResolver);\n        }\n        \n        /**\n         * Register a custom driver creator Closure.\n         *\n         * @param string $driver\n         * @param \\Closure $callback\n         * @return $this \n         * @static \n         */\n        public static function extend($driver, $callback){\n            return \\Illuminate\\Auth\\AuthManager::extend($driver, $callback);\n        }\n        \n        /**\n         * Register a custom provider creator Closure.\n         *\n         * @param string $name\n         * @param \\Closure $callback\n         * @return $this \n         * @static \n         */\n        public static function provider($name, $callback){\n            return \\Illuminate\\Auth\\AuthManager::provider($name, $callback);\n        }\n        \n        /**\n         * Create the user provider implementation for the driver.\n         *\n         * @param string $provider\n         * @return \\Illuminate\\Contracts\\Auth\\UserProvider \n         * @throws \\InvalidArgumentException\n         * @static \n         */\n        public static function createUserProvider($provider){\n            return \\Illuminate\\Auth\\AuthManager::createUserProvider($provider);\n        }\n        \n        /**\n         * Get the currently authenticated user.\n         *\n         * @return \\App\\User|null \n         * @static \n         */\n        public static function user(){\n            return \\Illuminate\\Auth\\SessionGuard::user();\n        }\n        \n        /**\n         * Get the ID for the currently authenticated user.\n         *\n         * @return int|null \n         * @static \n         */\n        public static function id(){\n            return \\Illuminate\\Auth\\SessionGuard::id();\n        }\n        \n        /**\n         * Log a user into the application without sessions or cookies.\n         *\n         * @param array $credentials\n         * @return bool \n         * @static \n         */\n        public static function once($credentials = array()){\n            return \\Illuminate\\Auth\\SessionGuard::once($credentials);\n        }\n        \n        /**\n         * Validate a user's credentials.\n         *\n         * @param array $credentials\n         * @return bool \n         * @static \n         */\n        public static function validate($credentials = array()){\n            return \\Illuminate\\Auth\\SessionGuard::validate($credentials);\n        }\n        \n        /**\n         * Attempt to authenticate using HTTP Basic Auth.\n         *\n         * @param string $field\n         * @param array $extraConditions\n         * @return \\Symfony\\Component\\HttpFoundation\\Response|null \n         * @static \n         */\n        public static function basic($field = 'email', $extraConditions = array()){\n            return \\Illuminate\\Auth\\SessionGuard::basic($field, $extraConditions);\n        }\n        \n        /**\n         * Perform a stateless HTTP Basic login attempt.\n         *\n         * @param string $field\n         * @param array $extraConditions\n         * @return \\Symfony\\Component\\HttpFoundation\\Response|null \n         * @static \n         */\n        public static function onceBasic($field = 'email', $extraConditions = array()){\n            return \\Illuminate\\Auth\\SessionGuard::onceBasic($field, $extraConditions);\n        }\n        \n        /**\n         * Attempt to authenticate a user using the given credentials.\n         *\n         * @param array $credentials\n         * @param bool $remember\n         * @param bool $login\n         * @return bool \n         * @static \n         */\n        public static function attempt($credentials = array(), $remember = false, $login = true){\n            return \\Illuminate\\Auth\\SessionGuard::attempt($credentials, $remember, $login);\n        }\n        \n        /**\n         * Register an authentication attempt event listener.\n         *\n         * @param mixed $callback\n         * @return void \n         * @static \n         */\n        public static function attempting($callback){\n            \\Illuminate\\Auth\\SessionGuard::attempting($callback);\n        }\n        \n        /**\n         * Log a user into the application.\n         *\n         * @param \\Illuminate\\Contracts\\Auth\\Authenticatable $user\n         * @param bool $remember\n         * @return void \n         * @static \n         */\n        public static function login($user, $remember = false){\n            \\Illuminate\\Auth\\SessionGuard::login($user, $remember);\n        }\n        \n        /**\n         * Log the given user ID into the application.\n         *\n         * @param mixed $id\n         * @param bool $remember\n         * @return \\App\\User \n         * @static \n         */\n        public static function loginUsingId($id, $remember = false){\n            return \\Illuminate\\Auth\\SessionGuard::loginUsingId($id, $remember);\n        }\n        \n        /**\n         * Log the given user ID into the application without sessions or cookies.\n         *\n         * @param mixed $id\n         * @return bool \n         * @static \n         */\n        public static function onceUsingId($id){\n            return \\Illuminate\\Auth\\SessionGuard::onceUsingId($id);\n        }\n        \n        /**\n         * Log the user out of the application.\n         *\n         * @return void \n         * @static \n         */\n        public static function logout(){\n            \\Illuminate\\Auth\\SessionGuard::logout();\n        }\n        \n        /**\n         * Get the cookie creator instance used by the guard.\n         *\n         * @return \\Illuminate\\Contracts\\Cookie\\QueueingFactory \n         * @throws \\RuntimeException\n         * @static \n         */\n        public static function getCookieJar(){\n            return \\Illuminate\\Auth\\SessionGuard::getCookieJar();\n        }\n        \n        /**\n         * Set the cookie creator instance used by the guard.\n         *\n         * @param \\Illuminate\\Contracts\\Cookie\\QueueingFactory $cookie\n         * @return void \n         * @static \n         */\n        public static function setCookieJar($cookie){\n            \\Illuminate\\Auth\\SessionGuard::setCookieJar($cookie);\n        }\n        \n        /**\n         * Get the event dispatcher instance.\n         *\n         * @return \\Illuminate\\Contracts\\Events\\Dispatcher \n         * @static \n         */\n        public static function getDispatcher(){\n            return \\Illuminate\\Auth\\SessionGuard::getDispatcher();\n        }\n        \n        /**\n         * Set the event dispatcher instance.\n         *\n         * @param \\Illuminate\\Contracts\\Events\\Dispatcher $events\n         * @return void \n         * @static \n         */\n        public static function setDispatcher($events){\n            \\Illuminate\\Auth\\SessionGuard::setDispatcher($events);\n        }\n        \n        /**\n         * Get the session store used by the guard.\n         *\n         * @return \\Illuminate\\Session\\Store \n         * @static \n         */\n        public static function getSession(){\n            return \\Illuminate\\Auth\\SessionGuard::getSession();\n        }\n        \n        /**\n         * Get the user provider used by the guard.\n         *\n         * @return \\Illuminate\\Contracts\\Auth\\UserProvider \n         * @static \n         */\n        public static function getProvider(){\n            return \\Illuminate\\Auth\\SessionGuard::getProvider();\n        }\n        \n        /**\n         * Set the user provider used by the guard.\n         *\n         * @param \\Illuminate\\Contracts\\Auth\\UserProvider $provider\n         * @return void \n         * @static \n         */\n        public static function setProvider($provider){\n            \\Illuminate\\Auth\\SessionGuard::setProvider($provider);\n        }\n        \n        /**\n         * Return the currently cached user.\n         *\n         * @return \\App\\User|null \n         * @static \n         */\n        public static function getUser(){\n            return \\Illuminate\\Auth\\SessionGuard::getUser();\n        }\n        \n        /**\n         * Set the current user.\n         *\n         * @param \\Illuminate\\Contracts\\Auth\\Authenticatable $user\n         * @return $this \n         * @static \n         */\n        public static function setUser($user){\n            return \\Illuminate\\Auth\\SessionGuard::setUser($user);\n        }\n        \n        /**\n         * Get the current request instance.\n         *\n         * @return \\Symfony\\Component\\HttpFoundation\\Request \n         * @static \n         */\n        public static function getRequest(){\n            return \\Illuminate\\Auth\\SessionGuard::getRequest();\n        }\n        \n        /**\n         * Set the current request instance.\n         *\n         * @param \\Symfony\\Component\\HttpFoundation\\Request $request\n         * @return $this \n         * @static \n         */\n        public static function setRequest($request){\n            return \\Illuminate\\Auth\\SessionGuard::setRequest($request);\n        }\n        \n        /**\n         * Get the last user we attempted to authenticate.\n         *\n         * @return \\App\\User \n         * @static \n         */\n        public static function getLastAttempted(){\n            return \\Illuminate\\Auth\\SessionGuard::getLastAttempted();\n        }\n        \n        /**\n         * Get a unique identifier for the auth session value.\n         *\n         * @return string \n         * @static \n         */\n        public static function getName(){\n            return \\Illuminate\\Auth\\SessionGuard::getName();\n        }\n        \n        /**\n         * Get the name of the cookie used to store the \"recaller\".\n         *\n         * @return string \n         * @static \n         */\n        public static function getRecallerName(){\n            return \\Illuminate\\Auth\\SessionGuard::getRecallerName();\n        }\n        \n        /**\n         * Determine if the user was authenticated via \"remember me\" cookie.\n         *\n         * @return bool \n         * @static \n         */\n        public static function viaRemember(){\n            return \\Illuminate\\Auth\\SessionGuard::viaRemember();\n        }\n        \n        /**\n         * Determine if the current user is authenticated.\n         *\n         * @return bool \n         * @static \n         */\n        public static function check(){\n            return \\Illuminate\\Auth\\SessionGuard::check();\n        }\n        \n        /**\n         * Determine if the current user is a guest.\n         *\n         * @return bool \n         * @static \n         */\n        public static function guest(){\n            return \\Illuminate\\Auth\\SessionGuard::guest();\n        }\n        \n        /**\n         * Determine if the current user is authenticated.\n         *\n         * @return \\App\\User \n         * @throws \\Illuminate\\Auth\\AuthenticationException\n         * @static \n         */\n        public static function authenticate(){\n            return \\Illuminate\\Auth\\SessionGuard::authenticate();\n        }\n        \n    }\n\n\n    class Blade extends \\Illuminate\\Support\\Facades\\Blade{\n        \n        /**\n         * Compile the view at the given path.\n         *\n         * @param string $path\n         * @return void \n         * @static \n         */\n        public static function compile($path = null){\n            \\Illuminate\\View\\Compilers\\BladeCompiler::compile($path);\n        }\n        \n        /**\n         * Get the path currently being compiled.\n         *\n         * @return string \n         * @static \n         */\n        public static function getPath(){\n            return \\Illuminate\\View\\Compilers\\BladeCompiler::getPath();\n        }\n        \n        /**\n         * Set the path currently being compiled.\n         *\n         * @param string $path\n         * @return void \n         * @static \n         */\n        public static function setPath($path){\n            \\Illuminate\\View\\Compilers\\BladeCompiler::setPath($path);\n        }\n        \n        /**\n         * Compile the given Blade template contents.\n         *\n         * @param string $value\n         * @return string \n         * @static \n         */\n        public static function compileString($value){\n            return \\Illuminate\\View\\Compilers\\BladeCompiler::compileString($value);\n        }\n        \n        /**\n         * Compile the default values for the echo statement.\n         *\n         * @param string $value\n         * @return string \n         * @static \n         */\n        public static function compileEchoDefaults($value){\n            return \\Illuminate\\View\\Compilers\\BladeCompiler::compileEchoDefaults($value);\n        }\n        \n        /**\n         * Get the extensions used by the compiler.\n         *\n         * @return array \n         * @static \n         */\n        public static function getExtensions(){\n            return \\Illuminate\\View\\Compilers\\BladeCompiler::getExtensions();\n        }\n        \n        /**\n         * Register a custom Blade compiler.\n         *\n         * @param callable $compiler\n         * @return void \n         * @static \n         */\n        public static function extend($compiler){\n            \\Illuminate\\View\\Compilers\\BladeCompiler::extend($compiler);\n        }\n        \n        /**\n         * Register a handler for custom directives.\n         *\n         * @param string $name\n         * @param callable $handler\n         * @return void \n         * @static \n         */\n        public static function directive($name, $handler){\n            \\Illuminate\\View\\Compilers\\BladeCompiler::directive($name, $handler);\n        }\n        \n        /**\n         * Get the list of custom directives.\n         *\n         * @return array \n         * @static \n         */\n        public static function getCustomDirectives(){\n            return \\Illuminate\\View\\Compilers\\BladeCompiler::getCustomDirectives();\n        }\n        \n        /**\n         * Gets the raw tags used by the compiler.\n         *\n         * @return array \n         * @static \n         */\n        public static function getRawTags(){\n            return \\Illuminate\\View\\Compilers\\BladeCompiler::getRawTags();\n        }\n        \n        /**\n         * Sets the raw tags used for the compiler.\n         *\n         * @param string $openTag\n         * @param string $closeTag\n         * @return void \n         * @static \n         */\n        public static function setRawTags($openTag, $closeTag){\n            \\Illuminate\\View\\Compilers\\BladeCompiler::setRawTags($openTag, $closeTag);\n        }\n        \n        /**\n         * Sets the content tags used for the compiler.\n         *\n         * @param string $openTag\n         * @param string $closeTag\n         * @param bool $escaped\n         * @return void \n         * @static \n         */\n        public static function setContentTags($openTag, $closeTag, $escaped = false){\n            \\Illuminate\\View\\Compilers\\BladeCompiler::setContentTags($openTag, $closeTag, $escaped);\n        }\n        \n        /**\n         * Sets the escaped content tags used for the compiler.\n         *\n         * @param string $openTag\n         * @param string $closeTag\n         * @return void \n         * @static \n         */\n        public static function setEscapedContentTags($openTag, $closeTag){\n            \\Illuminate\\View\\Compilers\\BladeCompiler::setEscapedContentTags($openTag, $closeTag);\n        }\n        \n        /**\n         * Gets the content tags used for the compiler.\n         *\n         * @return string \n         * @static \n         */\n        public static function getContentTags(){\n            return \\Illuminate\\View\\Compilers\\BladeCompiler::getContentTags();\n        }\n        \n        /**\n         * Gets the escaped content tags used for the compiler.\n         *\n         * @return string \n         * @static \n         */\n        public static function getEscapedContentTags(){\n            return \\Illuminate\\View\\Compilers\\BladeCompiler::getEscapedContentTags();\n        }\n        \n        /**\n         * Set the echo format to be used by the compiler.\n         *\n         * @param string $format\n         * @return void \n         * @static \n         */\n        public static function setEchoFormat($format){\n            \\Illuminate\\View\\Compilers\\BladeCompiler::setEchoFormat($format);\n        }\n        \n        /**\n         * Get the path to the compiled version of a view.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */\n        public static function getCompiledPath($path){\n            //Method inherited from \\Illuminate\\View\\Compilers\\Compiler            \n            return \\Illuminate\\View\\Compilers\\BladeCompiler::getCompiledPath($path);\n        }\n        \n        /**\n         * Determine if the view at the given path is expired.\n         *\n         * @param string $path\n         * @return bool \n         * @static \n         */\n        public static function isExpired($path){\n            //Method inherited from \\Illuminate\\View\\Compilers\\Compiler            \n            return \\Illuminate\\View\\Compilers\\BladeCompiler::isExpired($path);\n        }\n        \n    }\n\n\n    class Cache extends \\Illuminate\\Support\\Facades\\Cache{\n        \n        /**\n         * Get a cache store instance by name.\n         *\n         * @param string|null $name\n         * @return mixed \n         * @static \n         */\n        public static function store($name = null){\n            return \\Illuminate\\Cache\\CacheManager::store($name);\n        }\n        \n        /**\n         * Get a cache driver instance.\n         *\n         * @param string $driver\n         * @return mixed \n         * @static \n         */\n        public static function driver($driver = null){\n            return \\Illuminate\\Cache\\CacheManager::driver($driver);\n        }\n        \n        /**\n         * Create a new cache repository with the given implementation.\n         *\n         * @param \\Illuminate\\Contracts\\Cache\\Store $store\n         * @return \\Illuminate\\Cache\\Repository \n         * @static \n         */\n        public static function repository($store){\n            return \\Illuminate\\Cache\\CacheManager::repository($store);\n        }\n        \n        /**\n         * Get the default cache driver name.\n         *\n         * @return string \n         * @static \n         */\n        public static function getDefaultDriver(){\n            return \\Illuminate\\Cache\\CacheManager::getDefaultDriver();\n        }\n        \n        /**\n         * Set the default cache driver name.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */\n        public static function setDefaultDriver($name){\n            \\Illuminate\\Cache\\CacheManager::setDefaultDriver($name);\n        }\n        \n        /**\n         * Register a custom driver creator Closure.\n         *\n         * @param string $driver\n         * @param \\Closure $callback\n         * @return $this \n         * @static \n         */\n        public static function extend($driver, $callback){\n            return \\Illuminate\\Cache\\CacheManager::extend($driver, $callback);\n        }\n        \n        /**\n         * Set the event dispatcher instance.\n         *\n         * @param \\Illuminate\\Contracts\\Events\\Dispatcher $events\n         * @return void \n         * @static \n         */\n        public static function setEventDispatcher($events){\n            \\Illuminate\\Cache\\Repository::setEventDispatcher($events);\n        }\n        \n        /**\n         * Determine if an item exists in the cache.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */\n        public static function has($key){\n            return \\Illuminate\\Cache\\Repository::has($key);\n        }\n        \n        /**\n         * Retrieve an item from the cache by key.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @return mixed \n         * @static \n         */\n        public static function get($key, $default = null){\n            return \\Illuminate\\Cache\\Repository::get($key, $default);\n        }\n        \n        /**\n         * Retrieve multiple items from the cache by key.\n         * \n         * Items not found in the cache will have a null value.\n         *\n         * @param array $keys\n         * @return array \n         * @static \n         */\n        public static function many($keys){\n            return \\Illuminate\\Cache\\Repository::many($keys);\n        }\n        \n        /**\n         * Retrieve an item from the cache and delete it.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @return mixed \n         * @static \n         */\n        public static function pull($key, $default = null){\n            return \\Illuminate\\Cache\\Repository::pull($key, $default);\n        }\n        \n        /**\n         * Store an item in the cache.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @param \\DateTime|int $minutes\n         * @return void \n         * @static \n         */\n        public static function put($key, $value, $minutes = null){\n            \\Illuminate\\Cache\\Repository::put($key, $value, $minutes);\n        }\n        \n        /**\n         * Store multiple items in the cache for a given number of minutes.\n         *\n         * @param array $values\n         * @param int $minutes\n         * @return void \n         * @static \n         */\n        public static function putMany($values, $minutes){\n            \\Illuminate\\Cache\\Repository::putMany($values, $minutes);\n        }\n        \n        /**\n         * Store an item in the cache if the key does not exist.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @param \\DateTime|int $minutes\n         * @return bool \n         * @static \n         */\n        public static function add($key, $value, $minutes){\n            return \\Illuminate\\Cache\\Repository::add($key, $value, $minutes);\n        }\n        \n        /**\n         * Store an item in the cache indefinitely.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void \n         * @static \n         */\n        public static function forever($key, $value){\n            \\Illuminate\\Cache\\Repository::forever($key, $value);\n        }\n        \n        /**\n         * Get an item from the cache, or store the default value.\n         *\n         * @param string $key\n         * @param \\DateTime|int $minutes\n         * @param \\Closure $callback\n         * @return mixed \n         * @static \n         */\n        public static function remember($key, $minutes, $callback){\n            return \\Illuminate\\Cache\\Repository::remember($key, $minutes, $callback);\n        }\n        \n        /**\n         * Get an item from the cache, or store the default value forever.\n         *\n         * @param string $key\n         * @param \\Closure $callback\n         * @return mixed \n         * @static \n         */\n        public static function sear($key, $callback){\n            return \\Illuminate\\Cache\\Repository::sear($key, $callback);\n        }\n        \n        /**\n         * Get an item from the cache, or store the default value forever.\n         *\n         * @param string $key\n         * @param \\Closure $callback\n         * @return mixed \n         * @static \n         */\n        public static function rememberForever($key, $callback){\n            return \\Illuminate\\Cache\\Repository::rememberForever($key, $callback);\n        }\n        \n        /**\n         * Remove an item from the cache.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */\n        public static function forget($key){\n            return \\Illuminate\\Cache\\Repository::forget($key);\n        }\n        \n        /**\n         * Begin executing a new tags operation if the store supports it.\n         *\n         * @param array|mixed $names\n         * @return \\Illuminate\\Cache\\TaggedCache \n         * @throws \\BadMethodCallException\n         * @static \n         */\n        public static function tags($names){\n            return \\Illuminate\\Cache\\Repository::tags($names);\n        }\n        \n        /**\n         * Get the default cache time.\n         *\n         * @return int \n         * @static \n         */\n        public static function getDefaultCacheTime(){\n            return \\Illuminate\\Cache\\Repository::getDefaultCacheTime();\n        }\n        \n        /**\n         * Set the default cache time in minutes.\n         *\n         * @param int $minutes\n         * @return void \n         * @static \n         */\n        public static function setDefaultCacheTime($minutes){\n            \\Illuminate\\Cache\\Repository::setDefaultCacheTime($minutes);\n        }\n        \n        /**\n         * Get the cache store implementation.\n         *\n         * @return \\Illuminate\\Contracts\\Cache\\Store \n         * @static \n         */\n        public static function getStore(){\n            return \\Illuminate\\Cache\\Repository::getStore();\n        }\n        \n        /**\n         * Determine if a cached value exists.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */\n        public static function offsetExists($key){\n            return \\Illuminate\\Cache\\Repository::offsetExists($key);\n        }\n        \n        /**\n         * Retrieve an item from the cache by key.\n         *\n         * @param string $key\n         * @return mixed \n         * @static \n         */\n        public static function offsetGet($key){\n            return \\Illuminate\\Cache\\Repository::offsetGet($key);\n        }\n        \n        /**\n         * Store an item in the cache for the default time.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void \n         * @static \n         */\n        public static function offsetSet($key, $value){\n            \\Illuminate\\Cache\\Repository::offsetSet($key, $value);\n        }\n        \n        /**\n         * Remove an item from the cache.\n         *\n         * @param string $key\n         * @return void \n         * @static \n         */\n        public static function offsetUnset($key){\n            \\Illuminate\\Cache\\Repository::offsetUnset($key);\n        }\n        \n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param callable $macro\n         * @return void \n         * @static \n         */\n        public static function macro($name, $macro){\n            \\Illuminate\\Cache\\Repository::macro($name, $macro);\n        }\n        \n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */\n        public static function hasMacro($name){\n            return \\Illuminate\\Cache\\Repository::hasMacro($name);\n        }\n        \n        /**\n         * Dynamically handle calls to the class.\n         *\n         * @param string $method\n         * @param array $parameters\n         * @return mixed \n         * @throws \\BadMethodCallException\n         * @static \n         */\n        public static function macroCall($method, $parameters){\n            return \\Illuminate\\Cache\\Repository::macroCall($method, $parameters);\n        }\n        \n        /**\n         * Increment the value of an item in the cache.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return int \n         * @static \n         */\n        public static function increment($key, $value = 1){\n            return \\Illuminate\\Cache\\FileStore::increment($key, $value);\n        }\n        \n        /**\n         * Decrement the value of an item in the cache.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return int \n         * @static \n         */\n        public static function decrement($key, $value = 1){\n            return \\Illuminate\\Cache\\FileStore::decrement($key, $value);\n        }\n        \n        /**\n         * Remove all items from the cache.\n         *\n         * @return void \n         * @static \n         */\n        public static function flush(){\n            \\Illuminate\\Cache\\FileStore::flush();\n        }\n        \n        /**\n         * Get the Filesystem instance.\n         *\n         * @return \\Illuminate\\Filesystem\\Filesystem \n         * @static \n         */\n        public static function getFilesystem(){\n            return \\Illuminate\\Cache\\FileStore::getFilesystem();\n        }\n        \n        /**\n         * Get the working directory of the cache.\n         *\n         * @return string \n         * @static \n         */\n        public static function getDirectory(){\n            return \\Illuminate\\Cache\\FileStore::getDirectory();\n        }\n        \n        /**\n         * Get the cache key prefix.\n         *\n         * @return string \n         * @static \n         */\n        public static function getPrefix(){\n            return \\Illuminate\\Cache\\FileStore::getPrefix();\n        }\n        \n    }\n\n\n    class Config extends \\Larapack\\ConfigWriter\\Facade{\n        \n        /**\n         * Determine if the given configuration value exists.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */\n        public static function has($key){\n            return \\Illuminate\\Config\\Repository::has($key);\n        }\n        \n        /**\n         * Get the specified configuration value.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @return mixed \n         * @static \n         */\n        public static function get($key, $default = null){\n            return \\Illuminate\\Config\\Repository::get($key, $default);\n        }\n        \n        /**\n         * Set a given configuration value.\n         *\n         * @param array|string $key\n         * @param mixed $value\n         * @return void \n         * @static \n         */\n        public static function set($key, $value = null){\n            \\Illuminate\\Config\\Repository::set($key, $value);\n        }\n        \n        /**\n         * Prepend a value onto an array configuration value.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void \n         * @static \n         */\n        public static function prepend($key, $value){\n            \\Illuminate\\Config\\Repository::prepend($key, $value);\n        }\n        \n        /**\n         * Push a value onto an array configuration value.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void \n         * @static \n         */\n        public static function push($key, $value){\n            \\Illuminate\\Config\\Repository::push($key, $value);\n        }\n        \n        /**\n         * Get all of the configuration items for the application.\n         *\n         * @return array \n         * @static \n         */\n        public static function all(){\n            return \\Illuminate\\Config\\Repository::all();\n        }\n        \n        /**\n         * Determine if the given configuration option exists.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */\n        public static function offsetExists($key){\n            return \\Illuminate\\Config\\Repository::offsetExists($key);\n        }\n        \n        /**\n         * Get a configuration option.\n         *\n         * @param string $key\n         * @return mixed \n         * @static \n         */\n        public static function offsetGet($key){\n            return \\Illuminate\\Config\\Repository::offsetGet($key);\n        }\n        \n        /**\n         * Set a configuration option.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void \n         * @static \n         */\n        public static function offsetSet($key, $value){\n            \\Illuminate\\Config\\Repository::offsetSet($key, $value);\n        }\n        \n        /**\n         * Unset a configuration option.\n         *\n         * @param string $key\n         * @return void \n         * @static \n         */\n        public static function offsetUnset($key){\n            \\Illuminate\\Config\\Repository::offsetUnset($key);\n        }\n        \n    }\n\n\n    class Cookie extends \\Illuminate\\Support\\Facades\\Cookie{\n        \n        /**\n         * Create a new cookie instance.\n         *\n         * @param string $name\n         * @param string $value\n         * @param int $minutes\n         * @param string $path\n         * @param string $domain\n         * @param bool $secure\n         * @param bool $httpOnly\n         * @return \\Symfony\\Component\\HttpFoundation\\Cookie \n         * @static \n         */\n        public static function make($name, $value, $minutes = 0, $path = null, $domain = null, $secure = false, $httpOnly = true){\n            return \\Illuminate\\Cookie\\CookieJar::make($name, $value, $minutes, $path, $domain, $secure, $httpOnly);\n        }\n        \n        /**\n         * Create a cookie that lasts \"forever\" (five years).\n         *\n         * @param string $name\n         * @param string $value\n         * @param string $path\n         * @param string $domain\n         * @param bool $secure\n         * @param bool $httpOnly\n         * @return \\Symfony\\Component\\HttpFoundation\\Cookie \n         * @static \n         */\n        public static function forever($name, $value, $path = null, $domain = null, $secure = false, $httpOnly = true){\n            return \\Illuminate\\Cookie\\CookieJar::forever($name, $value, $path, $domain, $secure, $httpOnly);\n        }\n        \n        /**\n         * Expire the given cookie.\n         *\n         * @param string $name\n         * @param string $path\n         * @param string $domain\n         * @return \\Symfony\\Component\\HttpFoundation\\Cookie \n         * @static \n         */\n        public static function forget($name, $path = null, $domain = null){\n            return \\Illuminate\\Cookie\\CookieJar::forget($name, $path, $domain);\n        }\n        \n        /**\n         * Determine if a cookie has been queued.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */\n        public static function hasQueued($key){\n            return \\Illuminate\\Cookie\\CookieJar::hasQueued($key);\n        }\n        \n        /**\n         * Get a queued cookie instance.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @return \\Symfony\\Component\\HttpFoundation\\Cookie \n         * @static \n         */\n        public static function queued($key, $default = null){\n            return \\Illuminate\\Cookie\\CookieJar::queued($key, $default);\n        }\n        \n        /**\n         * Queue a cookie to send with the next response.\n         *\n         * @param mixed\n         * @return void \n         * @static \n         */\n        public static function queue(){\n            \\Illuminate\\Cookie\\CookieJar::queue();\n        }\n        \n        /**\n         * Remove a cookie from the queue.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */\n        public static function unqueue($name){\n            \\Illuminate\\Cookie\\CookieJar::unqueue($name);\n        }\n        \n        /**\n         * Set the default path and domain for the jar.\n         *\n         * @param string $path\n         * @param string $domain\n         * @param bool $secure\n         * @return $this \n         * @static \n         */\n        public static function setDefaultPathAndDomain($path, $domain, $secure = false){\n            return \\Illuminate\\Cookie\\CookieJar::setDefaultPathAndDomain($path, $domain, $secure);\n        }\n        \n        /**\n         * Get the cookies which have been queued for the next request.\n         *\n         * @return array \n         * @static \n         */\n        public static function getQueuedCookies(){\n            return \\Illuminate\\Cookie\\CookieJar::getQueuedCookies();\n        }\n        \n    }\n\n\n    class Crypt extends \\Illuminate\\Support\\Facades\\Crypt{\n        \n        /**\n         * Determine if the given key and cipher combination is valid.\n         *\n         * @param string $key\n         * @param string $cipher\n         * @return bool \n         * @static \n         */\n        public static function supported($key, $cipher){\n            return \\Illuminate\\Encryption\\Encrypter::supported($key, $cipher);\n        }\n        \n        /**\n         * Encrypt the given value.\n         *\n         * @param string $value\n         * @return string \n         * @throws \\Illuminate\\Contracts\\Encryption\\EncryptException\n         * @static \n         */\n        public static function encrypt($value){\n            return \\Illuminate\\Encryption\\Encrypter::encrypt($value);\n        }\n        \n        /**\n         * Decrypt the given value.\n         *\n         * @param string $payload\n         * @return string \n         * @throws \\Illuminate\\Contracts\\Encryption\\DecryptException\n         * @static \n         */\n        public static function decrypt($payload){\n            return \\Illuminate\\Encryption\\Encrypter::decrypt($payload);\n        }\n        \n    }\n\n\n    class DB extends \\Illuminate\\Support\\Facades\\DB{\n        \n        /**\n         * Get a database connection instance.\n         *\n         * @param string $name\n         * @return \\Illuminate\\Database\\Connection \n         * @static \n         */\n        public static function connection($name = null){\n            return \\Illuminate\\Database\\DatabaseManager::connection($name);\n        }\n        \n        /**\n         * Disconnect from the given database and remove from local cache.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */\n        public static function purge($name = null){\n            \\Illuminate\\Database\\DatabaseManager::purge($name);\n        }\n        \n        /**\n         * Disconnect from the given database.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */\n        public static function disconnect($name = null){\n            \\Illuminate\\Database\\DatabaseManager::disconnect($name);\n        }\n        \n        /**\n         * Reconnect to the given database.\n         *\n         * @param string $name\n         * @return \\Illuminate\\Database\\Connection \n         * @static \n         */\n        public static function reconnect($name = null){\n            return \\Illuminate\\Database\\DatabaseManager::reconnect($name);\n        }\n        \n        /**\n         * Get the default connection name.\n         *\n         * @return string \n         * @static \n         */\n        public static function getDefaultConnection(){\n            return \\Illuminate\\Database\\DatabaseManager::getDefaultConnection();\n        }\n        \n        /**\n         * Set the default connection name.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */\n        public static function setDefaultConnection($name){\n            \\Illuminate\\Database\\DatabaseManager::setDefaultConnection($name);\n        }\n        \n        /**\n         * Get all of the support drivers.\n         *\n         * @return array \n         * @static \n         */\n        public static function supportedDrivers(){\n            return \\Illuminate\\Database\\DatabaseManager::supportedDrivers();\n        }\n        \n        /**\n         * Get all of the drivers that are actually available.\n         *\n         * @return array \n         * @static \n         */\n        public static function availableDrivers(){\n            return \\Illuminate\\Database\\DatabaseManager::availableDrivers();\n        }\n        \n        /**\n         * Register an extension connection resolver.\n         *\n         * @param string $name\n         * @param callable $resolver\n         * @return void \n         * @static \n         */\n        public static function extend($name, $resolver){\n            \\Illuminate\\Database\\DatabaseManager::extend($name, $resolver);\n        }\n        \n        /**\n         * Return all of the created connections.\n         *\n         * @return array \n         * @static \n         */\n        public static function getConnections(){\n            return \\Illuminate\\Database\\DatabaseManager::getConnections();\n        }\n        \n        /**\n         * Get a schema builder instance for the connection.\n         *\n         * @return \\Illuminate\\Database\\Schema\\MySqlBuilder \n         * @static \n         */\n        public static function getSchemaBuilder(){\n            return \\Illuminate\\Database\\MySqlConnection::getSchemaBuilder();\n        }\n        \n        /**\n         * Set the query grammar to the default implementation.\n         *\n         * @return void \n         * @static \n         */\n        public static function useDefaultQueryGrammar(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            \\Illuminate\\Database\\MySqlConnection::useDefaultQueryGrammar();\n        }\n        \n        /**\n         * Set the schema grammar to the default implementation.\n         *\n         * @return void \n         * @static \n         */\n        public static function useDefaultSchemaGrammar(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            \\Illuminate\\Database\\MySqlConnection::useDefaultSchemaGrammar();\n        }\n        \n        /**\n         * Set the query post processor to the default implementation.\n         *\n         * @return void \n         * @static \n         */\n        public static function useDefaultPostProcessor(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            \\Illuminate\\Database\\MySqlConnection::useDefaultPostProcessor();\n        }\n        \n        /**\n         * Begin a fluent query against a database table.\n         *\n         * @param string $table\n         * @return \\Illuminate\\Database\\Query\\Builder \n         * @static \n         */\n        public static function table($table){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::table($table);\n        }\n        \n        /**\n         * Get a new query builder instance.\n         *\n         * @return \\Illuminate\\Database\\Query\\Builder \n         * @static \n         */\n        public static function query(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::query();\n        }\n        \n        /**\n         * Get a new raw query expression.\n         *\n         * @param mixed $value\n         * @return \\Illuminate\\Database\\Query\\Expression \n         * @static \n         */\n        public static function raw($value){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::raw($value);\n        }\n        \n        /**\n         * Run a select statement and return a single result.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @return mixed \n         * @static \n         */\n        public static function selectOne($query, $bindings = array()){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::selectOne($query, $bindings);\n        }\n        \n        /**\n         * Run a select statement against the database.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @return array \n         * @static \n         */\n        public static function selectFromWriteConnection($query, $bindings = array()){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::selectFromWriteConnection($query, $bindings);\n        }\n        \n        /**\n         * Run a select statement against the database.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @param bool $useReadPdo\n         * @return array \n         * @static \n         */\n        public static function select($query, $bindings = array(), $useReadPdo = true){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::select($query, $bindings, $useReadPdo);\n        }\n        \n        /**\n         * Run a select statement against the database and returns a generator.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @param bool $useReadPdo\n         * @return \\Generator \n         * @static \n         */\n        public static function cursor($query, $bindings = array(), $useReadPdo = true){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::cursor($query, $bindings, $useReadPdo);\n        }\n        \n        /**\n         * Run an insert statement against the database.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @return bool \n         * @static \n         */\n        public static function insert($query, $bindings = array()){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::insert($query, $bindings);\n        }\n        \n        /**\n         * Run an update statement against the database.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @return int \n         * @static \n         */\n        public static function update($query, $bindings = array()){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::update($query, $bindings);\n        }\n        \n        /**\n         * Run a delete statement against the database.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @return int \n         * @static \n         */\n        public static function delete($query, $bindings = array()){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::delete($query, $bindings);\n        }\n        \n        /**\n         * Execute an SQL statement and return the boolean result.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @return bool \n         * @static \n         */\n        public static function statement($query, $bindings = array()){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::statement($query, $bindings);\n        }\n        \n        /**\n         * Run an SQL statement and get the number of rows affected.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @return int \n         * @static \n         */\n        public static function affectingStatement($query, $bindings = array()){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::affectingStatement($query, $bindings);\n        }\n        \n        /**\n         * Run a raw, unprepared query against the PDO connection.\n         *\n         * @param string $query\n         * @return bool \n         * @static \n         */\n        public static function unprepared($query){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::unprepared($query);\n        }\n        \n        /**\n         * Prepare the query bindings for execution.\n         *\n         * @param array $bindings\n         * @return array \n         * @static \n         */\n        public static function prepareBindings($bindings){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::prepareBindings($bindings);\n        }\n        \n        /**\n         * Execute a Closure within a transaction.\n         *\n         * @param \\Closure $callback\n         * @return mixed \n         * @throws \\Exception|\\Throwable\n         * @static \n         */\n        public static function transaction($callback){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::transaction($callback);\n        }\n        \n        /**\n         * Start a new database transaction.\n         *\n         * @return void \n         * @throws Exception\n         * @static \n         */\n        public static function beginTransaction(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            \\Illuminate\\Database\\MySqlConnection::beginTransaction();\n        }\n        \n        /**\n         * Commit the active database transaction.\n         *\n         * @return void \n         * @static \n         */\n        public static function commit(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            \\Illuminate\\Database\\MySqlConnection::commit();\n        }\n        \n        /**\n         * Rollback the active database transaction.\n         *\n         * @return void \n         * @static \n         */\n        public static function rollBack(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            \\Illuminate\\Database\\MySqlConnection::rollBack();\n        }\n        \n        /**\n         * Get the number of active transactions.\n         *\n         * @return int \n         * @static \n         */\n        public static function transactionLevel(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::transactionLevel();\n        }\n        \n        /**\n         * Execute the given callback in \"dry run\" mode.\n         *\n         * @param \\Closure $callback\n         * @return array \n         * @static \n         */\n        public static function pretend($callback){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::pretend($callback);\n        }\n        \n        /**\n         * Log a query in the connection's query log.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @param float|null $time\n         * @return void \n         * @static \n         */\n        public static function logQuery($query, $bindings, $time = null){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            \\Illuminate\\Database\\MySqlConnection::logQuery($query, $bindings, $time);\n        }\n        \n        /**\n         * Register a database query listener with the connection.\n         *\n         * @param \\Closure $callback\n         * @return void \n         * @static \n         */\n        public static function listen($callback){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            \\Illuminate\\Database\\MySqlConnection::listen($callback);\n        }\n        \n        /**\n         * Is Doctrine available?\n         *\n         * @return bool \n         * @static \n         */\n        public static function isDoctrineAvailable(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::isDoctrineAvailable();\n        }\n        \n        /**\n         * Get a Doctrine Schema Column instance.\n         *\n         * @param string $table\n         * @param string $column\n         * @return \\Doctrine\\DBAL\\Schema\\Column \n         * @static \n         */\n        public static function getDoctrineColumn($table, $column){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::getDoctrineColumn($table, $column);\n        }\n        \n        /**\n         * Get the Doctrine DBAL schema manager for the connection.\n         *\n         * @return \\Doctrine\\DBAL\\Schema\\AbstractSchemaManager \n         * @static \n         */\n        public static function getDoctrineSchemaManager(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::getDoctrineSchemaManager();\n        }\n        \n        /**\n         * Get the Doctrine DBAL database connection instance.\n         *\n         * @return \\Doctrine\\DBAL\\Connection \n         * @static \n         */\n        public static function getDoctrineConnection(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::getDoctrineConnection();\n        }\n        \n        /**\n         * Get the current PDO connection.\n         *\n         * @return \\PDO \n         * @static \n         */\n        public static function getPdo(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::getPdo();\n        }\n        \n        /**\n         * Get the current PDO connection used for reading.\n         *\n         * @return \\PDO \n         * @static \n         */\n        public static function getReadPdo(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::getReadPdo();\n        }\n        \n        /**\n         * Set the PDO connection.\n         *\n         * @param \\PDO|null $pdo\n         * @return $this \n         * @throws \\RuntimeException\n         * @static \n         */\n        public static function setPdo($pdo){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::setPdo($pdo);\n        }\n        \n        /**\n         * Set the PDO connection used for reading.\n         *\n         * @param \\PDO|null $pdo\n         * @return $this \n         * @static \n         */\n        public static function setReadPdo($pdo){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::setReadPdo($pdo);\n        }\n        \n        /**\n         * Set the reconnect instance on the connection.\n         *\n         * @param callable $reconnector\n         * @return $this \n         * @static \n         */\n        public static function setReconnector($reconnector){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::setReconnector($reconnector);\n        }\n        \n        /**\n         * Get the database connection name.\n         *\n         * @return string|null \n         * @static \n         */\n        public static function getName(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::getName();\n        }\n        \n        /**\n         * Get an option from the configuration options.\n         *\n         * @param string $option\n         * @return mixed \n         * @static \n         */\n        public static function getConfig($option){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::getConfig($option);\n        }\n        \n        /**\n         * Get the PDO driver name.\n         *\n         * @return string \n         * @static \n         */\n        public static function getDriverName(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::getDriverName();\n        }\n        \n        /**\n         * Get the query grammar used by the connection.\n         *\n         * @return \\Illuminate\\Database\\Query\\Grammars\\Grammar \n         * @static \n         */\n        public static function getQueryGrammar(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::getQueryGrammar();\n        }\n        \n        /**\n         * Set the query grammar used by the connection.\n         *\n         * @param \\Illuminate\\Database\\Query\\Grammars\\Grammar $grammar\n         * @return void \n         * @static \n         */\n        public static function setQueryGrammar($grammar){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            \\Illuminate\\Database\\MySqlConnection::setQueryGrammar($grammar);\n        }\n        \n        /**\n         * Get the schema grammar used by the connection.\n         *\n         * @return \\Illuminate\\Database\\Schema\\Grammars\\Grammar \n         * @static \n         */\n        public static function getSchemaGrammar(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::getSchemaGrammar();\n        }\n        \n        /**\n         * Set the schema grammar used by the connection.\n         *\n         * @param \\Illuminate\\Database\\Schema\\Grammars\\Grammar $grammar\n         * @return void \n         * @static \n         */\n        public static function setSchemaGrammar($grammar){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            \\Illuminate\\Database\\MySqlConnection::setSchemaGrammar($grammar);\n        }\n        \n        /**\n         * Get the query post processor used by the connection.\n         *\n         * @return \\Illuminate\\Database\\Query\\Processors\\Processor \n         * @static \n         */\n        public static function getPostProcessor(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::getPostProcessor();\n        }\n        \n        /**\n         * Set the query post processor used by the connection.\n         *\n         * @param \\Illuminate\\Database\\Query\\Processors\\Processor $processor\n         * @return void \n         * @static \n         */\n        public static function setPostProcessor($processor){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            \\Illuminate\\Database\\MySqlConnection::setPostProcessor($processor);\n        }\n        \n        /**\n         * Get the event dispatcher used by the connection.\n         *\n         * @return \\Illuminate\\Contracts\\Events\\Dispatcher \n         * @static \n         */\n        public static function getEventDispatcher(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::getEventDispatcher();\n        }\n        \n        /**\n         * Set the event dispatcher instance on the connection.\n         *\n         * @param \\Illuminate\\Contracts\\Events\\Dispatcher $events\n         * @return void \n         * @static \n         */\n        public static function setEventDispatcher($events){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            \\Illuminate\\Database\\MySqlConnection::setEventDispatcher($events);\n        }\n        \n        /**\n         * Determine if the connection in a \"dry run\".\n         *\n         * @return bool \n         * @static \n         */\n        public static function pretending(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::pretending();\n        }\n        \n        /**\n         * Get the default fetch mode for the connection.\n         *\n         * @return int \n         * @static \n         */\n        public static function getFetchMode(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::getFetchMode();\n        }\n        \n        /**\n         * Get the fetch argument to be applied when selecting.\n         *\n         * @return mixed \n         * @static \n         */\n        public static function getFetchArgument(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::getFetchArgument();\n        }\n        \n        /**\n         * Get custom constructor arguments for the PDO::FETCH_CLASS fetch mode.\n         *\n         * @return array \n         * @static \n         */\n        public static function getFetchConstructorArgument(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::getFetchConstructorArgument();\n        }\n        \n        /**\n         * Set the default fetch mode for the connection, and optional arguments for the given fetch mode.\n         *\n         * @param int $fetchMode\n         * @param mixed $fetchArgument\n         * @param array $fetchConstructorArgument\n         * @return int \n         * @static \n         */\n        public static function setFetchMode($fetchMode, $fetchArgument = null, $fetchConstructorArgument = array()){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::setFetchMode($fetchMode, $fetchArgument, $fetchConstructorArgument);\n        }\n        \n        /**\n         * Get the connection query log.\n         *\n         * @return array \n         * @static \n         */\n        public static function getQueryLog(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::getQueryLog();\n        }\n        \n        /**\n         * Clear the query log.\n         *\n         * @return void \n         * @static \n         */\n        public static function flushQueryLog(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            \\Illuminate\\Database\\MySqlConnection::flushQueryLog();\n        }\n        \n        /**\n         * Enable the query log on the connection.\n         *\n         * @return void \n         * @static \n         */\n        public static function enableQueryLog(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            \\Illuminate\\Database\\MySqlConnection::enableQueryLog();\n        }\n        \n        /**\n         * Disable the query log on the connection.\n         *\n         * @return void \n         * @static \n         */\n        public static function disableQueryLog(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            \\Illuminate\\Database\\MySqlConnection::disableQueryLog();\n        }\n        \n        /**\n         * Determine whether we're logging queries.\n         *\n         * @return bool \n         * @static \n         */\n        public static function logging(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::logging();\n        }\n        \n        /**\n         * Get the name of the connected database.\n         *\n         * @return string \n         * @static \n         */\n        public static function getDatabaseName(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::getDatabaseName();\n        }\n        \n        /**\n         * Set the name of the connected database.\n         *\n         * @param string $database\n         * @return string \n         * @static \n         */\n        public static function setDatabaseName($database){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::setDatabaseName($database);\n        }\n        \n        /**\n         * Get the table prefix for the connection.\n         *\n         * @return string \n         * @static \n         */\n        public static function getTablePrefix(){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::getTablePrefix();\n        }\n        \n        /**\n         * Set the table prefix in use by the connection.\n         *\n         * @param string $prefix\n         * @return void \n         * @static \n         */\n        public static function setTablePrefix($prefix){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            \\Illuminate\\Database\\MySqlConnection::setTablePrefix($prefix);\n        }\n        \n        /**\n         * Set the table prefix and return the grammar.\n         *\n         * @param \\Illuminate\\Database\\Grammar $grammar\n         * @return \\Illuminate\\Database\\Grammar \n         * @static \n         */\n        public static function withTablePrefix($grammar){\n            //Method inherited from \\Illuminate\\Database\\Connection            \n            return \\Illuminate\\Database\\MySqlConnection::withTablePrefix($grammar);\n        }\n        \n    }\n\n\n    class Eloquent extends \\Illuminate\\Database\\Eloquent\\Model{\n        \n        /**\n         * Register a new global scope.\n         *\n         * @param string $identifier\n         * @param \\Illuminate\\Database\\Eloquent\\Scope|\\Closure $scope\n         * @return $this \n         * @static \n         */\n        public static function withGlobalScope($identifier, $scope){\n            return \\Illuminate\\Database\\Eloquent\\Builder::withGlobalScope($identifier, $scope);\n        }\n        \n        /**\n         * Remove a registered global scope.\n         *\n         * @param \\Illuminate\\Database\\Eloquent\\Scope|string $scope\n         * @return $this \n         * @static \n         */\n        public static function withoutGlobalScope($scope){\n            return \\Illuminate\\Database\\Eloquent\\Builder::withoutGlobalScope($scope);\n        }\n        \n        /**\n         * Remove all or passed registered global scopes.\n         *\n         * @param array|null $scopes\n         * @return $this \n         * @static \n         */\n        public static function withoutGlobalScopes($scopes = null){\n            return \\Illuminate\\Database\\Eloquent\\Builder::withoutGlobalScopes($scopes);\n        }\n        \n        /**\n         * Get an array of global scopes that were removed from the query.\n         *\n         * @return array \n         * @static \n         */\n        public static function removedScopes(){\n            return \\Illuminate\\Database\\Eloquent\\Builder::removedScopes();\n        }\n        \n        /**\n         * Find a model by its primary key.\n         *\n         * @param mixed $id\n         * @param array $columns\n         * @return \\Illuminate\\Database\\Eloquent\\Model|\\Illuminate\\Database\\Eloquent\\Collection|static[]|static|null \n         * @static \n         */\n        public static function find($id, $columns = array()){\n            return \\Illuminate\\Database\\Eloquent\\Builder::find($id, $columns);\n        }\n        \n        /**\n         * Find multiple models by their primary keys.\n         *\n         * @param array $ids\n         * @param array $columns\n         * @return \\Illuminate\\Database\\Eloquent\\Collection \n         * @static \n         */\n        public static function findMany($ids, $columns = array()){\n            return \\Illuminate\\Database\\Eloquent\\Builder::findMany($ids, $columns);\n        }\n        \n        /**\n         * Find a model by its primary key or throw an exception.\n         *\n         * @param mixed $id\n         * @param array $columns\n         * @return \\Illuminate\\Database\\Eloquent\\Model|\\Illuminate\\Database\\Eloquent\\Collection \n         * @throws \\Illuminate\\Database\\Eloquent\\ModelNotFoundException\n         * @static \n         */\n        public static function findOrFail($id, $columns = array()){\n            return \\Illuminate\\Database\\Eloquent\\Builder::findOrFail($id, $columns);\n        }\n        \n        /**\n         * Find a model by its primary key or return fresh model instance.\n         *\n         * @param mixed $id\n         * @param array $columns\n         * @return \\Illuminate\\Database\\Eloquent\\Model \n         * @static \n         */\n        public static function findOrNew($id, $columns = array()){\n            return \\Illuminate\\Database\\Eloquent\\Builder::findOrNew($id, $columns);\n        }\n        \n        /**\n         * Get the first record matching the attributes or instantiate it.\n         *\n         * @param array $attributes\n         * @return \\Illuminate\\Database\\Eloquent\\Model \n         * @static \n         */\n        public static function firstOrNew($attributes){\n            return \\Illuminate\\Database\\Eloquent\\Builder::firstOrNew($attributes);\n        }\n        \n        /**\n         * Get the first record matching the attributes or create it.\n         *\n         * @param array $attributes\n         * @return \\Illuminate\\Database\\Eloquent\\Model \n         * @static \n         */\n        public static function firstOrCreate($attributes){\n            return \\Illuminate\\Database\\Eloquent\\Builder::firstOrCreate($attributes);\n        }\n        \n        /**\n         * Create or update a record matching the attributes, and fill it with values.\n         *\n         * @param array $attributes\n         * @param array $values\n         * @return \\Illuminate\\Database\\Eloquent\\Model \n         * @static \n         */\n        public static function updateOrCreate($attributes, $values = array()){\n            return \\Illuminate\\Database\\Eloquent\\Builder::updateOrCreate($attributes, $values);\n        }\n        \n        /**\n         * Execute the query and get the first result.\n         *\n         * @param array $columns\n         * @return \\Illuminate\\Database\\Eloquent\\Model|static|null \n         * @static \n         */\n        public static function first($columns = array()){\n            return \\Illuminate\\Database\\Eloquent\\Builder::first($columns);\n        }\n        \n        /**\n         * Execute the query and get the first result or throw an exception.\n         *\n         * @param array $columns\n         * @return \\Illuminate\\Database\\Eloquent\\Model|static \n         * @throws \\Illuminate\\Database\\Eloquent\\ModelNotFoundException\n         * @static \n         */\n        public static function firstOrFail($columns = array()){\n            return \\Illuminate\\Database\\Eloquent\\Builder::firstOrFail($columns);\n        }\n        \n        /**\n         * Execute the query as a \"select\" statement.\n         *\n         * @param array $columns\n         * @return \\Illuminate\\Database\\Eloquent\\Collection|static[] \n         * @static \n         */\n        public static function get($columns = array()){\n            return \\Illuminate\\Database\\Eloquent\\Builder::get($columns);\n        }\n        \n        /**\n         * Get a single column's value from the first result of a query.\n         *\n         * @param string $column\n         * @return mixed \n         * @static \n         */\n        public static function value($column){\n            return \\Illuminate\\Database\\Eloquent\\Builder::value($column);\n        }\n        \n        /**\n         * Get a generator for the given query.\n         *\n         * @return \\Generator \n         * @static \n         */\n        public static function cursor(){\n            return \\Illuminate\\Database\\Eloquent\\Builder::cursor();\n        }\n        \n        /**\n         * Chunk the results of the query.\n         *\n         * @param int $count\n         * @param callable $callback\n         * @return bool \n         * @static \n         */\n        public static function chunk($count, $callback){\n            return \\Illuminate\\Database\\Eloquent\\Builder::chunk($count, $callback);\n        }\n        \n        /**\n         * Chunk the results of a query by comparing numeric IDs.\n         *\n         * @param int $count\n         * @param callable $callback\n         * @param string $column\n         * @return bool \n         * @static \n         */\n        public static function chunkById($count, $callback, $column = 'id'){\n            return \\Illuminate\\Database\\Eloquent\\Builder::chunkById($count, $callback, $column);\n        }\n        \n        /**\n         * Execute a callback over each item while chunking.\n         *\n         * @param callable $callback\n         * @param int $count\n         * @return bool \n         * @static \n         */\n        public static function each($callback, $count = 1000){\n            return \\Illuminate\\Database\\Eloquent\\Builder::each($callback, $count);\n        }\n        \n        /**\n         * Get an array with the values of a given column.\n         *\n         * @param string $column\n         * @param string|null $key\n         * @return \\Illuminate\\Support\\Collection \n         * @static \n         */\n        public static function pluck($column, $key = null){\n            return \\Illuminate\\Database\\Eloquent\\Builder::pluck($column, $key);\n        }\n        \n        /**\n         * Alias for the \"pluck\" method.\n         *\n         * @param string $column\n         * @param string $key\n         * @return \\Illuminate\\Support\\Collection \n         * @deprecated since version 5.2. Use the \"pluck\" method directly.\n         * @static \n         */\n        public static function lists($column, $key = null){\n            return \\Illuminate\\Database\\Eloquent\\Builder::lists($column, $key);\n        }\n        \n        /**\n         * Paginate the given query.\n         *\n         * @param int $perPage\n         * @param array $columns\n         * @param string $pageName\n         * @param int|null $page\n         * @return \\Illuminate\\Contracts\\Pagination\\LengthAwarePaginator \n         * @throws \\InvalidArgumentException\n         * @static \n         */\n        public static function paginate($perPage = null, $columns = array(), $pageName = 'page', $page = null){\n            return \\Illuminate\\Database\\Eloquent\\Builder::paginate($perPage, $columns, $pageName, $page);\n        }\n        \n        /**\n         * Paginate the given query into a simple paginator.\n         *\n         * @param int $perPage\n         * @param array $columns\n         * @param string $pageName\n         * @param int|null $page\n         * @return \\Illuminate\\Contracts\\Pagination\\Paginator \n         * @static \n         */\n        public static function simplePaginate($perPage = null, $columns = array(), $pageName = 'page', $page = null){\n            return \\Illuminate\\Database\\Eloquent\\Builder::simplePaginate($perPage, $columns, $pageName, $page);\n        }\n        \n        /**\n         * Register a replacement for the default delete function.\n         *\n         * @param \\Closure $callback\n         * @return void \n         * @static \n         */\n        public static function onDelete($callback){\n            \\Illuminate\\Database\\Eloquent\\Builder::onDelete($callback);\n        }\n        \n        /**\n         * Get the hydrated models without eager loading.\n         *\n         * @param array $columns\n         * @return \\Illuminate\\Database\\Eloquent\\Model[] \n         * @static \n         */\n        public static function getModels($columns = array()){\n            return \\Illuminate\\Database\\Eloquent\\Builder::getModels($columns);\n        }\n        \n        /**\n         * Eager load the relationships for the models.\n         *\n         * @param array $models\n         * @return array \n         * @static \n         */\n        public static function eagerLoadRelations($models){\n            return \\Illuminate\\Database\\Eloquent\\Builder::eagerLoadRelations($models);\n        }\n        \n        /**\n         * Get the deeply nested relations for a given top-level relation.\n         *\n         * @param string $relation\n         * @return array \n         * @static \n         */\n        public static function nestedRelations($relation){\n            return \\Illuminate\\Database\\Eloquent\\Builder::nestedRelations($relation);\n        }\n        \n        /**\n         * Apply the callback's query changes if the given \"value\" is true.\n         *\n         * @param bool $value\n         * @param \\Closure $callback\n         * @return $this \n         * @static \n         */\n        public static function when($value, $callback){\n            return \\Illuminate\\Database\\Eloquent\\Builder::when($value, $callback);\n        }\n        \n        /**\n         * Add a basic where clause to the query.\n         *\n         * @param string $column\n         * @param string $operator\n         * @param mixed $value\n         * @param string $boolean\n         * @return $this \n         * @static \n         */\n        public static function where($column, $operator = null, $value = null, $boolean = 'and'){\n            return \\Illuminate\\Database\\Eloquent\\Builder::where($column, $operator, $value, $boolean);\n        }\n        \n        /**\n         * Add an \"or where\" clause to the query.\n         *\n         * @param string $column\n         * @param string $operator\n         * @param mixed $value\n         * @return \\Illuminate\\Database\\Eloquent\\Builder|static \n         * @static \n         */\n        public static function orWhere($column, $operator = null, $value = null){\n            return \\Illuminate\\Database\\Eloquent\\Builder::orWhere($column, $operator, $value);\n        }\n        \n        /**\n         * Add a relationship count / exists condition to the query.\n         *\n         * @param string $relation\n         * @param string $operator\n         * @param int $count\n         * @param string $boolean\n         * @param \\Closure|null $callback\n         * @return \\Illuminate\\Database\\Eloquent\\Builder|static \n         * @static \n         */\n        public static function has($relation, $operator = '>=', $count = 1, $boolean = 'and', $callback = null){\n            return \\Illuminate\\Database\\Eloquent\\Builder::has($relation, $operator, $count, $boolean, $callback);\n        }\n        \n        /**\n         * Add a relationship count / exists condition to the query.\n         *\n         * @param string $relation\n         * @param string $boolean\n         * @param \\Closure|null $callback\n         * @return \\Illuminate\\Database\\Eloquent\\Builder|static \n         * @static \n         */\n        public static function doesntHave($relation, $boolean = 'and', $callback = null){\n            return \\Illuminate\\Database\\Eloquent\\Builder::doesntHave($relation, $boolean, $callback);\n        }\n        \n        /**\n         * Add a relationship count / exists condition to the query with where clauses.\n         *\n         * @param string $relation\n         * @param \\Closure $callback\n         * @param string $operator\n         * @param int $count\n         * @return \\Illuminate\\Database\\Eloquent\\Builder|static \n         * @static \n         */\n        public static function whereHas($relation, $callback, $operator = '>=', $count = 1){\n            return \\Illuminate\\Database\\Eloquent\\Builder::whereHas($relation, $callback, $operator, $count);\n        }\n        \n        /**\n         * Add a relationship count / exists condition to the query with where clauses.\n         *\n         * @param string $relation\n         * @param \\Closure|null $callback\n         * @return \\Illuminate\\Database\\Eloquent\\Builder|static \n         * @static \n         */\n        public static function whereDoesntHave($relation, $callback = null){\n            return \\Illuminate\\Database\\Eloquent\\Builder::whereDoesntHave($relation, $callback);\n        }\n        \n        /**\n         * Add a relationship count / exists condition to the query with an \"or\".\n         *\n         * @param string $relation\n         * @param string $operator\n         * @param int $count\n         * @return \\Illuminate\\Database\\Eloquent\\Builder|static \n         * @static \n         */\n        public static function orHas($relation, $operator = '>=', $count = 1){\n            return \\Illuminate\\Database\\Eloquent\\Builder::orHas($relation, $operator, $count);\n        }\n        \n        /**\n         * Add a relationship count / exists condition to the query with where clauses and an \"or\".\n         *\n         * @param string $relation\n         * @param \\Closure $callback\n         * @param string $operator\n         * @param int $count\n         * @return \\Illuminate\\Database\\Eloquent\\Builder|static \n         * @static \n         */\n        public static function orWhereHas($relation, $callback, $operator = '>=', $count = 1){\n            return \\Illuminate\\Database\\Eloquent\\Builder::orWhereHas($relation, $callback, $operator, $count);\n        }\n        \n        /**\n         * Merge the constraints from a relation query to the current query.\n         *\n         * @param \\Illuminate\\Database\\Eloquent\\Builder $relation\n         * @return \\Illuminate\\Database\\Eloquent\\Builder|static \n         * @static \n         */\n        public static function mergeModelDefinedRelationConstraints($relation){\n            return \\Illuminate\\Database\\Eloquent\\Builder::mergeModelDefinedRelationConstraints($relation);\n        }\n        \n        /**\n         * Add subselect queries to count the relations.\n         *\n         * @param mixed $relations\n         * @return $this \n         * @static \n         */\n        public static function withCount($relations){\n            return \\Illuminate\\Database\\Eloquent\\Builder::withCount($relations);\n        }\n        \n        /**\n         * Apply the scopes to the Eloquent builder instance and return it.\n         *\n         * @return \\Illuminate\\Database\\Eloquent\\Builder|static \n         * @static \n         */\n        public static function applyScopes(){\n            return \\Illuminate\\Database\\Eloquent\\Builder::applyScopes();\n        }\n        \n        /**\n         * Get the underlying query builder instance.\n         *\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function getQuery(){\n            return \\Illuminate\\Database\\Eloquent\\Builder::getQuery();\n        }\n        \n        /**\n         * Get a base query builder instance.\n         *\n         * @return \\Illuminate\\Database\\Query\\Builder \n         * @static \n         */\n        public static function toBase(){\n            return \\Illuminate\\Database\\Eloquent\\Builder::toBase();\n        }\n        \n        /**\n         * Set the underlying query builder instance.\n         *\n         * @param \\Illuminate\\Database\\Query\\Builder $query\n         * @return $this \n         * @static \n         */\n        public static function setQuery($query){\n            return \\Illuminate\\Database\\Eloquent\\Builder::setQuery($query);\n        }\n        \n        /**\n         * Get the relationships being eagerly loaded.\n         *\n         * @return array \n         * @static \n         */\n        public static function getEagerLoads(){\n            return \\Illuminate\\Database\\Eloquent\\Builder::getEagerLoads();\n        }\n        \n        /**\n         * Set the relationships being eagerly loaded.\n         *\n         * @param array $eagerLoad\n         * @return $this \n         * @static \n         */\n        public static function setEagerLoads($eagerLoad){\n            return \\Illuminate\\Database\\Eloquent\\Builder::setEagerLoads($eagerLoad);\n        }\n        \n        /**\n         * Get the model instance being queried.\n         *\n         * @return \\Illuminate\\Database\\Eloquent\\Model \n         * @static \n         */\n        public static function getModel(){\n            return \\Illuminate\\Database\\Eloquent\\Builder::getModel();\n        }\n        \n        /**\n         * Set a model instance for the model being queried.\n         *\n         * @param \\Illuminate\\Database\\Eloquent\\Model $model\n         * @return $this \n         * @static \n         */\n        public static function setModel($model){\n            return \\Illuminate\\Database\\Eloquent\\Builder::setModel($model);\n        }\n        \n        /**\n         * Extend the builder with a given callback.\n         *\n         * @param string $name\n         * @param \\Closure $callback\n         * @return void \n         * @static \n         */\n        public static function macro($name, $callback){\n            \\Illuminate\\Database\\Eloquent\\Builder::macro($name, $callback);\n        }\n        \n        /**\n         * Get the given macro by name.\n         *\n         * @param string $name\n         * @return \\Closure \n         * @static \n         */\n        public static function getMacro($name){\n            return \\Illuminate\\Database\\Eloquent\\Builder::getMacro($name);\n        }\n        \n        /**\n         * Set the columns to be selected.\n         *\n         * @param array|mixed $columns\n         * @return $this \n         * @static \n         */\n        public static function select($columns = array()){\n            return \\Illuminate\\Database\\Query\\Builder::select($columns);\n        }\n        \n        /**\n         * Add a new \"raw\" select expression to the query.\n         *\n         * @param string $expression\n         * @param array $bindings\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function selectRaw($expression, $bindings = array()){\n            return \\Illuminate\\Database\\Query\\Builder::selectRaw($expression, $bindings);\n        }\n        \n        /**\n         * Add a subselect expression to the query.\n         *\n         * @param \\Closure|\\Illuminate\\Database\\Query\\Builder|string $query\n         * @param string $as\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @throws \\InvalidArgumentException\n         * @static \n         */\n        public static function selectSub($query, $as){\n            return \\Illuminate\\Database\\Query\\Builder::selectSub($query, $as);\n        }\n        \n        /**\n         * Add a new select column to the query.\n         *\n         * @param array|mixed $column\n         * @return $this \n         * @static \n         */\n        public static function addSelect($column){\n            return \\Illuminate\\Database\\Query\\Builder::addSelect($column);\n        }\n        \n        /**\n         * Force the query to only return distinct results.\n         *\n         * @return $this \n         * @static \n         */\n        public static function distinct(){\n            return \\Illuminate\\Database\\Query\\Builder::distinct();\n        }\n        \n        /**\n         * Set the table which the query is targeting.\n         *\n         * @param string $table\n         * @return $this \n         * @static \n         */\n        public static function from($table){\n            return \\Illuminate\\Database\\Query\\Builder::from($table);\n        }\n        \n        /**\n         * Add a join clause to the query.\n         *\n         * @param string $table\n         * @param string $one\n         * @param string $operator\n         * @param string $two\n         * @param string $type\n         * @param bool $where\n         * @return $this \n         * @static \n         */\n        public static function join($table, $one, $operator = null, $two = null, $type = 'inner', $where = false){\n            return \\Illuminate\\Database\\Query\\Builder::join($table, $one, $operator, $two, $type, $where);\n        }\n        \n        /**\n         * Add a \"join where\" clause to the query.\n         *\n         * @param string $table\n         * @param string $one\n         * @param string $operator\n         * @param string $two\n         * @param string $type\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function joinWhere($table, $one, $operator, $two, $type = 'inner'){\n            return \\Illuminate\\Database\\Query\\Builder::joinWhere($table, $one, $operator, $two, $type);\n        }\n        \n        /**\n         * Add a left join to the query.\n         *\n         * @param string $table\n         * @param string $first\n         * @param string $operator\n         * @param string $second\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function leftJoin($table, $first, $operator = null, $second = null){\n            return \\Illuminate\\Database\\Query\\Builder::leftJoin($table, $first, $operator, $second);\n        }\n        \n        /**\n         * Add a \"join where\" clause to the query.\n         *\n         * @param string $table\n         * @param string $one\n         * @param string $operator\n         * @param string $two\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function leftJoinWhere($table, $one, $operator, $two){\n            return \\Illuminate\\Database\\Query\\Builder::leftJoinWhere($table, $one, $operator, $two);\n        }\n        \n        /**\n         * Add a right join to the query.\n         *\n         * @param string $table\n         * @param string $first\n         * @param string $operator\n         * @param string $second\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function rightJoin($table, $first, $operator = null, $second = null){\n            return \\Illuminate\\Database\\Query\\Builder::rightJoin($table, $first, $operator, $second);\n        }\n        \n        /**\n         * Add a \"right join where\" clause to the query.\n         *\n         * @param string $table\n         * @param string $one\n         * @param string $operator\n         * @param string $two\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function rightJoinWhere($table, $one, $operator, $two){\n            return \\Illuminate\\Database\\Query\\Builder::rightJoinWhere($table, $one, $operator, $two);\n        }\n        \n        /**\n         * Add a \"cross join\" clause to the query.\n         *\n         * @param string $table\n         * @param string $first\n         * @param string $operator\n         * @param string $second\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function crossJoin($table, $first = null, $operator = null, $second = null){\n            return \\Illuminate\\Database\\Query\\Builder::crossJoin($table, $first, $operator, $second);\n        }\n        \n        /**\n         * Add a \"where\" clause comparing two columns to the query.\n         *\n         * @param string|array $first\n         * @param string|null $operator\n         * @param string|null $second\n         * @param string|null $boolean\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function whereColumn($first, $operator = null, $second = null, $boolean = 'and'){\n            return \\Illuminate\\Database\\Query\\Builder::whereColumn($first, $operator, $second, $boolean);\n        }\n        \n        /**\n         * Add an \"or where\" clause comparing two columns to the query.\n         *\n         * @param string|array $first\n         * @param string|null $operator\n         * @param string|null $second\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function orWhereColumn($first, $operator = null, $second = null){\n            return \\Illuminate\\Database\\Query\\Builder::orWhereColumn($first, $operator, $second);\n        }\n        \n        /**\n         * Add a raw where clause to the query.\n         *\n         * @param string $sql\n         * @param array $bindings\n         * @param string $boolean\n         * @return $this \n         * @static \n         */\n        public static function whereRaw($sql, $bindings = array(), $boolean = 'and'){\n            return \\Illuminate\\Database\\Query\\Builder::whereRaw($sql, $bindings, $boolean);\n        }\n        \n        /**\n         * Add a raw or where clause to the query.\n         *\n         * @param string $sql\n         * @param array $bindings\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function orWhereRaw($sql, $bindings = array()){\n            return \\Illuminate\\Database\\Query\\Builder::orWhereRaw($sql, $bindings);\n        }\n        \n        /**\n         * Add a where between statement to the query.\n         *\n         * @param string $column\n         * @param array $values\n         * @param string $boolean\n         * @param bool $not\n         * @return $this \n         * @static \n         */\n        public static function whereBetween($column, $values, $boolean = 'and', $not = false){\n            return \\Illuminate\\Database\\Query\\Builder::whereBetween($column, $values, $boolean, $not);\n        }\n        \n        /**\n         * Add an or where between statement to the query.\n         *\n         * @param string $column\n         * @param array $values\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function orWhereBetween($column, $values){\n            return \\Illuminate\\Database\\Query\\Builder::orWhereBetween($column, $values);\n        }\n        \n        /**\n         * Add a where not between statement to the query.\n         *\n         * @param string $column\n         * @param array $values\n         * @param string $boolean\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function whereNotBetween($column, $values, $boolean = 'and'){\n            return \\Illuminate\\Database\\Query\\Builder::whereNotBetween($column, $values, $boolean);\n        }\n        \n        /**\n         * Add an or where not between statement to the query.\n         *\n         * @param string $column\n         * @param array $values\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function orWhereNotBetween($column, $values){\n            return \\Illuminate\\Database\\Query\\Builder::orWhereNotBetween($column, $values);\n        }\n        \n        /**\n         * Add a nested where statement to the query.\n         *\n         * @param \\Closure $callback\n         * @param string $boolean\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function whereNested($callback, $boolean = 'and'){\n            return \\Illuminate\\Database\\Query\\Builder::whereNested($callback, $boolean);\n        }\n        \n        /**\n         * Create a new query instance for nested where condition.\n         *\n         * @return \\Illuminate\\Database\\Query\\Builder \n         * @static \n         */\n        public static function forNestedWhere(){\n            return \\Illuminate\\Database\\Query\\Builder::forNestedWhere();\n        }\n        \n        /**\n         * Add another query builder as a nested where to the query builder.\n         *\n         * @param \\Illuminate\\Database\\Query\\Builder|static $query\n         * @param string $boolean\n         * @return $this \n         * @static \n         */\n        public static function addNestedWhereQuery($query, $boolean = 'and'){\n            return \\Illuminate\\Database\\Query\\Builder::addNestedWhereQuery($query, $boolean);\n        }\n        \n        /**\n         * Add an exists clause to the query.\n         *\n         * @param \\Closure $callback\n         * @param string $boolean\n         * @param bool $not\n         * @return $this \n         * @static \n         */\n        public static function whereExists($callback, $boolean = 'and', $not = false){\n            return \\Illuminate\\Database\\Query\\Builder::whereExists($callback, $boolean, $not);\n        }\n        \n        /**\n         * Add an or exists clause to the query.\n         *\n         * @param \\Closure $callback\n         * @param bool $not\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function orWhereExists($callback, $not = false){\n            return \\Illuminate\\Database\\Query\\Builder::orWhereExists($callback, $not);\n        }\n        \n        /**\n         * Add a where not exists clause to the query.\n         *\n         * @param \\Closure $callback\n         * @param string $boolean\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function whereNotExists($callback, $boolean = 'and'){\n            return \\Illuminate\\Database\\Query\\Builder::whereNotExists($callback, $boolean);\n        }\n        \n        /**\n         * Add a where not exists clause to the query.\n         *\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function orWhereNotExists($callback){\n            return \\Illuminate\\Database\\Query\\Builder::orWhereNotExists($callback);\n        }\n        \n        /**\n         * Add an exists clause to the query.\n         *\n         * @param \\Illuminate\\Database\\Query\\Builder $query\n         * @param string $boolean\n         * @param bool $not\n         * @return $this \n         * @static \n         */\n        public static function addWhereExistsQuery($query, $boolean = 'and', $not = false){\n            return \\Illuminate\\Database\\Query\\Builder::addWhereExistsQuery($query, $boolean, $not);\n        }\n        \n        /**\n         * Add a \"where in\" clause to the query.\n         *\n         * @param string $column\n         * @param mixed $values\n         * @param string $boolean\n         * @param bool $not\n         * @return $this \n         * @static \n         */\n        public static function whereIn($column, $values, $boolean = 'and', $not = false){\n            return \\Illuminate\\Database\\Query\\Builder::whereIn($column, $values, $boolean, $not);\n        }\n        \n        /**\n         * Add an \"or where in\" clause to the query.\n         *\n         * @param string $column\n         * @param mixed $values\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function orWhereIn($column, $values){\n            return \\Illuminate\\Database\\Query\\Builder::orWhereIn($column, $values);\n        }\n        \n        /**\n         * Add a \"where not in\" clause to the query.\n         *\n         * @param string $column\n         * @param mixed $values\n         * @param string $boolean\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function whereNotIn($column, $values, $boolean = 'and'){\n            return \\Illuminate\\Database\\Query\\Builder::whereNotIn($column, $values, $boolean);\n        }\n        \n        /**\n         * Add an \"or where not in\" clause to the query.\n         *\n         * @param string $column\n         * @param mixed $values\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function orWhereNotIn($column, $values){\n            return \\Illuminate\\Database\\Query\\Builder::orWhereNotIn($column, $values);\n        }\n        \n        /**\n         * Add a \"where null\" clause to the query.\n         *\n         * @param string $column\n         * @param string $boolean\n         * @param bool $not\n         * @return $this \n         * @static \n         */\n        public static function whereNull($column, $boolean = 'and', $not = false){\n            return \\Illuminate\\Database\\Query\\Builder::whereNull($column, $boolean, $not);\n        }\n        \n        /**\n         * Add an \"or where null\" clause to the query.\n         *\n         * @param string $column\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function orWhereNull($column){\n            return \\Illuminate\\Database\\Query\\Builder::orWhereNull($column);\n        }\n        \n        /**\n         * Add a \"where not null\" clause to the query.\n         *\n         * @param string $column\n         * @param string $boolean\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function whereNotNull($column, $boolean = 'and'){\n            return \\Illuminate\\Database\\Query\\Builder::whereNotNull($column, $boolean);\n        }\n        \n        /**\n         * Add an \"or where not null\" clause to the query.\n         *\n         * @param string $column\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function orWhereNotNull($column){\n            return \\Illuminate\\Database\\Query\\Builder::orWhereNotNull($column);\n        }\n        \n        /**\n         * Add a \"where date\" statement to the query.\n         *\n         * @param string $column\n         * @param string $operator\n         * @param int $value\n         * @param string $boolean\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function whereDate($column, $operator, $value, $boolean = 'and'){\n            return \\Illuminate\\Database\\Query\\Builder::whereDate($column, $operator, $value, $boolean);\n        }\n        \n        /**\n         * Add an \"or where date\" statement to the query.\n         *\n         * @param string $column\n         * @param string $operator\n         * @param int $value\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function orWhereDate($column, $operator, $value){\n            return \\Illuminate\\Database\\Query\\Builder::orWhereDate($column, $operator, $value);\n        }\n        \n        /**\n         * Add a \"where day\" statement to the query.\n         *\n         * @param string $column\n         * @param string $operator\n         * @param int $value\n         * @param string $boolean\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function whereDay($column, $operator, $value, $boolean = 'and'){\n            return \\Illuminate\\Database\\Query\\Builder::whereDay($column, $operator, $value, $boolean);\n        }\n        \n        /**\n         * Add a \"where month\" statement to the query.\n         *\n         * @param string $column\n         * @param string $operator\n         * @param int $value\n         * @param string $boolean\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function whereMonth($column, $operator, $value, $boolean = 'and'){\n            return \\Illuminate\\Database\\Query\\Builder::whereMonth($column, $operator, $value, $boolean);\n        }\n        \n        /**\n         * Add a \"where year\" statement to the query.\n         *\n         * @param string $column\n         * @param string $operator\n         * @param int $value\n         * @param string $boolean\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function whereYear($column, $operator, $value, $boolean = 'and'){\n            return \\Illuminate\\Database\\Query\\Builder::whereYear($column, $operator, $value, $boolean);\n        }\n        \n        /**\n         * Handles dynamic \"where\" clauses to the query.\n         *\n         * @param string $method\n         * @param string $parameters\n         * @return $this \n         * @static \n         */\n        public static function dynamicWhere($method, $parameters){\n            return \\Illuminate\\Database\\Query\\Builder::dynamicWhere($method, $parameters);\n        }\n        \n        /**\n         * Add a \"group by\" clause to the query.\n         *\n         * @param array|string $column,...\n         * @return $this \n         * @static \n         */\n        public static function groupBy(){\n            return \\Illuminate\\Database\\Query\\Builder::groupBy();\n        }\n        \n        /**\n         * Add a \"having\" clause to the query.\n         *\n         * @param string $column\n         * @param string $operator\n         * @param string $value\n         * @param string $boolean\n         * @return $this \n         * @static \n         */\n        public static function having($column, $operator = null, $value = null, $boolean = 'and'){\n            return \\Illuminate\\Database\\Query\\Builder::having($column, $operator, $value, $boolean);\n        }\n        \n        /**\n         * Add a \"or having\" clause to the query.\n         *\n         * @param string $column\n         * @param string $operator\n         * @param string $value\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function orHaving($column, $operator = null, $value = null){\n            return \\Illuminate\\Database\\Query\\Builder::orHaving($column, $operator, $value);\n        }\n        \n        /**\n         * Add a raw having clause to the query.\n         *\n         * @param string $sql\n         * @param array $bindings\n         * @param string $boolean\n         * @return $this \n         * @static \n         */\n        public static function havingRaw($sql, $bindings = array(), $boolean = 'and'){\n            return \\Illuminate\\Database\\Query\\Builder::havingRaw($sql, $bindings, $boolean);\n        }\n        \n        /**\n         * Add a raw or having clause to the query.\n         *\n         * @param string $sql\n         * @param array $bindings\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function orHavingRaw($sql, $bindings = array()){\n            return \\Illuminate\\Database\\Query\\Builder::orHavingRaw($sql, $bindings);\n        }\n        \n        /**\n         * Add an \"order by\" clause to the query.\n         *\n         * @param string $column\n         * @param string $direction\n         * @return $this \n         * @static \n         */\n        public static function orderBy($column, $direction = 'asc'){\n            return \\Illuminate\\Database\\Query\\Builder::orderBy($column, $direction);\n        }\n        \n        /**\n         * Add an \"order by\" clause for a timestamp to the query.\n         *\n         * @param string $column\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function latest($column = 'created_at'){\n            return \\Illuminate\\Database\\Query\\Builder::latest($column);\n        }\n        \n        /**\n         * Add an \"order by\" clause for a timestamp to the query.\n         *\n         * @param string $column\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function oldest($column = 'created_at'){\n            return \\Illuminate\\Database\\Query\\Builder::oldest($column);\n        }\n        \n        /**\n         * Put the query's results in random order.\n         *\n         * @param string $seed\n         * @return $this \n         * @static \n         */\n        public static function inRandomOrder($seed = ''){\n            return \\Illuminate\\Database\\Query\\Builder::inRandomOrder($seed);\n        }\n        \n        /**\n         * Add a raw \"order by\" clause to the query.\n         *\n         * @param string $sql\n         * @param array $bindings\n         * @return $this \n         * @static \n         */\n        public static function orderByRaw($sql, $bindings = array()){\n            return \\Illuminate\\Database\\Query\\Builder::orderByRaw($sql, $bindings);\n        }\n        \n        /**\n         * Set the \"offset\" value of the query.\n         *\n         * @param int $value\n         * @return $this \n         * @static \n         */\n        public static function offset($value){\n            return \\Illuminate\\Database\\Query\\Builder::offset($value);\n        }\n        \n        /**\n         * Alias to set the \"offset\" value of the query.\n         *\n         * @param int $value\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function skip($value){\n            return \\Illuminate\\Database\\Query\\Builder::skip($value);\n        }\n        \n        /**\n         * Set the \"limit\" value of the query.\n         *\n         * @param int $value\n         * @return $this \n         * @static \n         */\n        public static function limit($value){\n            return \\Illuminate\\Database\\Query\\Builder::limit($value);\n        }\n        \n        /**\n         * Alias to set the \"limit\" value of the query.\n         *\n         * @param int $value\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function take($value){\n            return \\Illuminate\\Database\\Query\\Builder::take($value);\n        }\n        \n        /**\n         * Set the limit and offset for a given page.\n         *\n         * @param int $page\n         * @param int $perPage\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function forPage($page, $perPage = 15){\n            return \\Illuminate\\Database\\Query\\Builder::forPage($page, $perPage);\n        }\n        \n        /**\n         * Constrain the query to the next \"page\" of results after a given ID.\n         *\n         * @param int $perPage\n         * @param int $lastId\n         * @param string $column\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function forPageAfterId($perPage = 15, $lastId = 0, $column = 'id'){\n            return \\Illuminate\\Database\\Query\\Builder::forPageAfterId($perPage, $lastId, $column);\n        }\n        \n        /**\n         * Add a union statement to the query.\n         *\n         * @param \\Illuminate\\Database\\Query\\Builder|\\Closure $query\n         * @param bool $all\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function union($query, $all = false){\n            return \\Illuminate\\Database\\Query\\Builder::union($query, $all);\n        }\n        \n        /**\n         * Add a union all statement to the query.\n         *\n         * @param \\Illuminate\\Database\\Query\\Builder|\\Closure $query\n         * @return \\Illuminate\\Database\\Query\\Builder|static \n         * @static \n         */\n        public static function unionAll($query){\n            return \\Illuminate\\Database\\Query\\Builder::unionAll($query);\n        }\n        \n        /**\n         * Lock the selected rows in the table.\n         *\n         * @param bool $value\n         * @return $this \n         * @static \n         */\n        public static function lock($value = true){\n            return \\Illuminate\\Database\\Query\\Builder::lock($value);\n        }\n        \n        /**\n         * Lock the selected rows in the table for updating.\n         *\n         * @return \\Illuminate\\Database\\Query\\Builder \n         * @static \n         */\n        public static function lockForUpdate(){\n            return \\Illuminate\\Database\\Query\\Builder::lockForUpdate();\n        }\n        \n        /**\n         * Share lock the selected rows in the table.\n         *\n         * @return \\Illuminate\\Database\\Query\\Builder \n         * @static \n         */\n        public static function sharedLock(){\n            return \\Illuminate\\Database\\Query\\Builder::sharedLock();\n        }\n        \n        /**\n         * Get the SQL representation of the query.\n         *\n         * @return string \n         * @static \n         */\n        public static function toSql(){\n            return \\Illuminate\\Database\\Query\\Builder::toSql();\n        }\n        \n        /**\n         * Get the count of the total records for the paginator.\n         *\n         * @param array $columns\n         * @return int \n         * @static \n         */\n        public static function getCountForPagination($columns = array()){\n            return \\Illuminate\\Database\\Query\\Builder::getCountForPagination($columns);\n        }\n        \n        /**\n         * Concatenate values of a given column as a string.\n         *\n         * @param string $column\n         * @param string $glue\n         * @return string \n         * @static \n         */\n        public static function implode($column, $glue = ''){\n            return \\Illuminate\\Database\\Query\\Builder::implode($column, $glue);\n        }\n        \n        /**\n         * Determine if any rows exist for the current query.\n         *\n         * @return bool \n         * @static \n         */\n        public static function exists(){\n            return \\Illuminate\\Database\\Query\\Builder::exists();\n        }\n        \n        /**\n         * Retrieve the \"count\" result of the query.\n         *\n         * @param string $columns\n         * @return int \n         * @static \n         */\n        public static function count($columns = '*'){\n            return \\Illuminate\\Database\\Query\\Builder::count($columns);\n        }\n        \n        /**\n         * Retrieve the minimum value of a given column.\n         *\n         * @param string $column\n         * @return float|int \n         * @static \n         */\n        public static function min($column){\n            return \\Illuminate\\Database\\Query\\Builder::min($column);\n        }\n        \n        /**\n         * Retrieve the maximum value of a given column.\n         *\n         * @param string $column\n         * @return float|int \n         * @static \n         */\n        public static function max($column){\n            return \\Illuminate\\Database\\Query\\Builder::max($column);\n        }\n        \n        /**\n         * Retrieve the sum of the values of a given column.\n         *\n         * @param string $column\n         * @return float|int \n         * @static \n         */\n        public static function sum($column){\n            return \\Illuminate\\Database\\Query\\Builder::sum($column);\n        }\n        \n        /**\n         * Retrieve the average of the values of a given column.\n         *\n         * @param string $column\n         * @return float|int \n         * @static \n         */\n        public static function avg($column){\n            return \\Illuminate\\Database\\Query\\Builder::avg($column);\n        }\n        \n        /**\n         * Alias for the \"avg\" method.\n         *\n         * @param string $column\n         * @return float|int \n         * @static \n         */\n        public static function average($column){\n            return \\Illuminate\\Database\\Query\\Builder::average($column);\n        }\n        \n        /**\n         * Execute an aggregate function on the database.\n         *\n         * @param string $function\n         * @param array $columns\n         * @return float|int \n         * @static \n         */\n        public static function aggregate($function, $columns = array()){\n            return \\Illuminate\\Database\\Query\\Builder::aggregate($function, $columns);\n        }\n        \n        /**\n         * Insert a new record into the database.\n         *\n         * @param array $values\n         * @return bool \n         * @static \n         */\n        public static function insert($values){\n            return \\Illuminate\\Database\\Query\\Builder::insert($values);\n        }\n        \n        /**\n         * Insert a new record and get the value of the primary key.\n         *\n         * @param array $values\n         * @param string $sequence\n         * @return int \n         * @static \n         */\n        public static function insertGetId($values, $sequence = null){\n            return \\Illuminate\\Database\\Query\\Builder::insertGetId($values, $sequence);\n        }\n        \n        /**\n         * Insert or update a record matching the attributes, and fill it with values.\n         *\n         * @param array $attributes\n         * @param array $values\n         * @return bool \n         * @static \n         */\n        public static function updateOrInsert($attributes, $values = array()){\n            return \\Illuminate\\Database\\Query\\Builder::updateOrInsert($attributes, $values);\n        }\n        \n        /**\n         * Run a truncate statement on the table.\n         *\n         * @return void \n         * @static \n         */\n        public static function truncate(){\n            \\Illuminate\\Database\\Query\\Builder::truncate();\n        }\n        \n        /**\n         * Merge an array of where clauses and bindings.\n         *\n         * @param array $wheres\n         * @param array $bindings\n         * @return void \n         * @static \n         */\n        public static function mergeWheres($wheres, $bindings){\n            \\Illuminate\\Database\\Query\\Builder::mergeWheres($wheres, $bindings);\n        }\n        \n        /**\n         * Create a raw database expression.\n         *\n         * @param mixed $value\n         * @return \\Illuminate\\Database\\Query\\Expression \n         * @static \n         */\n        public static function raw($value){\n            return \\Illuminate\\Database\\Query\\Builder::raw($value);\n        }\n        \n        /**\n         * Get the current query value bindings in a flattened array.\n         *\n         * @return array \n         * @static \n         */\n        public static function getBindings(){\n            return \\Illuminate\\Database\\Query\\Builder::getBindings();\n        }\n        \n        /**\n         * Get the raw array of bindings.\n         *\n         * @return array \n         * @static \n         */\n        public static function getRawBindings(){\n            return \\Illuminate\\Database\\Query\\Builder::getRawBindings();\n        }\n        \n        /**\n         * Set the bindings on the query builder.\n         *\n         * @param array $bindings\n         * @param string $type\n         * @return $this \n         * @throws \\InvalidArgumentException\n         * @static \n         */\n        public static function setBindings($bindings, $type = 'where'){\n            return \\Illuminate\\Database\\Query\\Builder::setBindings($bindings, $type);\n        }\n        \n        /**\n         * Add a binding to the query.\n         *\n         * @param mixed $value\n         * @param string $type\n         * @return $this \n         * @throws \\InvalidArgumentException\n         * @static \n         */\n        public static function addBinding($value, $type = 'where'){\n            return \\Illuminate\\Database\\Query\\Builder::addBinding($value, $type);\n        }\n        \n        /**\n         * Merge an array of bindings into our bindings.\n         *\n         * @param \\Illuminate\\Database\\Query\\Builder $query\n         * @return $this \n         * @static \n         */\n        public static function mergeBindings($query){\n            return \\Illuminate\\Database\\Query\\Builder::mergeBindings($query);\n        }\n        \n        /**\n         * Get the database query processor instance.\n         *\n         * @return \\Illuminate\\Database\\Query\\Processors\\Processor \n         * @static \n         */\n        public static function getProcessor(){\n            return \\Illuminate\\Database\\Query\\Builder::getProcessor();\n        }\n        \n        /**\n         * Get the query grammar instance.\n         *\n         * @return \\Illuminate\\Database\\Query\\Grammars\\Grammar \n         * @static \n         */\n        public static function getGrammar(){\n            return \\Illuminate\\Database\\Query\\Builder::getGrammar();\n        }\n        \n        /**\n         * Use the write pdo for query.\n         *\n         * @return $this \n         * @static \n         */\n        public static function useWritePdo(){\n            return \\Illuminate\\Database\\Query\\Builder::useWritePdo();\n        }\n        \n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */\n        public static function hasMacro($name){\n            return \\Illuminate\\Database\\Query\\Builder::hasMacro($name);\n        }\n        \n        /**\n         * Dynamically handle calls to the class.\n         *\n         * @param string $method\n         * @param array $parameters\n         * @return mixed \n         * @throws \\BadMethodCallException\n         * @static \n         */\n        public static function macroCall($method, $parameters){\n            return \\Illuminate\\Database\\Query\\Builder::macroCall($method, $parameters);\n        }\n        \n    }\n\n\n    class Event extends \\Illuminate\\Support\\Facades\\Event{\n        \n        /**\n         * Register an event listener with the dispatcher.\n         *\n         * @param string|array $events\n         * @param mixed $listener\n         * @param int $priority\n         * @return void \n         * @static \n         */\n        public static function listen($events, $listener, $priority = 0){\n            \\Illuminate\\Events\\Dispatcher::listen($events, $listener, $priority);\n        }\n        \n        /**\n         * Determine if a given event has listeners.\n         *\n         * @param string $eventName\n         * @return bool \n         * @static \n         */\n        public static function hasListeners($eventName){\n            return \\Illuminate\\Events\\Dispatcher::hasListeners($eventName);\n        }\n        \n        /**\n         * Register an event and payload to be fired later.\n         *\n         * @param string $event\n         * @param array $payload\n         * @return void \n         * @static \n         */\n        public static function push($event, $payload = array()){\n            \\Illuminate\\Events\\Dispatcher::push($event, $payload);\n        }\n        \n        /**\n         * Register an event subscriber with the dispatcher.\n         *\n         * @param object|string $subscriber\n         * @return void \n         * @static \n         */\n        public static function subscribe($subscriber){\n            \\Illuminate\\Events\\Dispatcher::subscribe($subscriber);\n        }\n        \n        /**\n         * Fire an event until the first non-null response is returned.\n         *\n         * @param string|object $event\n         * @param array $payload\n         * @return mixed \n         * @static \n         */\n        public static function until($event, $payload = array()){\n            return \\Illuminate\\Events\\Dispatcher::until($event, $payload);\n        }\n        \n        /**\n         * Flush a set of pushed events.\n         *\n         * @param string $event\n         * @return void \n         * @static \n         */\n        public static function flush($event){\n            \\Illuminate\\Events\\Dispatcher::flush($event);\n        }\n        \n        /**\n         * Get the event that is currently firing.\n         *\n         * @return string \n         * @static \n         */\n        public static function firing(){\n            return \\Illuminate\\Events\\Dispatcher::firing();\n        }\n        \n        /**\n         * Fire an event and call the listeners.\n         *\n         * @param string|object $event\n         * @param mixed $payload\n         * @param bool $halt\n         * @return array|null \n         * @static \n         */\n        public static function fire($event, $payload = array(), $halt = false){\n            return \\Illuminate\\Events\\Dispatcher::fire($event, $payload, $halt);\n        }\n        \n        /**\n         * Get all of the listeners for a given event name.\n         *\n         * @param string $eventName\n         * @return array \n         * @static \n         */\n        public static function getListeners($eventName){\n            return \\Illuminate\\Events\\Dispatcher::getListeners($eventName);\n        }\n        \n        /**\n         * Register an event listener with the dispatcher.\n         *\n         * @param mixed $listener\n         * @return mixed \n         * @static \n         */\n        public static function makeListener($listener){\n            return \\Illuminate\\Events\\Dispatcher::makeListener($listener);\n        }\n        \n        /**\n         * Create a class based listener using the IoC container.\n         *\n         * @param mixed $listener\n         * @return \\Closure \n         * @static \n         */\n        public static function createClassListener($listener){\n            return \\Illuminate\\Events\\Dispatcher::createClassListener($listener);\n        }\n        \n        /**\n         * Remove a set of listeners from the dispatcher.\n         *\n         * @param string $event\n         * @return void \n         * @static \n         */\n        public static function forget($event){\n            \\Illuminate\\Events\\Dispatcher::forget($event);\n        }\n        \n        /**\n         * Forget all of the pushed listeners.\n         *\n         * @return void \n         * @static \n         */\n        public static function forgetPushed(){\n            \\Illuminate\\Events\\Dispatcher::forgetPushed();\n        }\n        \n        /**\n         * Set the queue resolver implementation.\n         *\n         * @param callable $resolver\n         * @return $this \n         * @static \n         */\n        public static function setQueueResolver($resolver){\n            return \\Illuminate\\Events\\Dispatcher::setQueueResolver($resolver);\n        }\n        \n    }\n\n\n    class File extends \\Illuminate\\Support\\Facades\\File{\n        \n        /**\n         * Determine if a file or directory exists.\n         *\n         * @param string $path\n         * @return bool \n         * @static \n         */\n        public static function exists($path){\n            return \\Illuminate\\Filesystem\\Filesystem::exists($path);\n        }\n        \n        /**\n         * Get the contents of a file.\n         *\n         * @param string $path\n         * @param bool $lock\n         * @return string \n         * @throws \\Illuminate\\Contracts\\Filesystem\\FileNotFoundException\n         * @static \n         */\n        public static function get($path, $lock = false){\n            return \\Illuminate\\Filesystem\\Filesystem::get($path, $lock);\n        }\n        \n        /**\n         * Get contents of a file with shared access.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */\n        public static function sharedGet($path){\n            return \\Illuminate\\Filesystem\\Filesystem::sharedGet($path);\n        }\n        \n        /**\n         * Get the returned value of a file.\n         *\n         * @param string $path\n         * @return mixed \n         * @throws \\Illuminate\\Contracts\\Filesystem\\FileNotFoundException\n         * @static \n         */\n        public static function getRequire($path){\n            return \\Illuminate\\Filesystem\\Filesystem::getRequire($path);\n        }\n        \n        /**\n         * Require the given file once.\n         *\n         * @param string $file\n         * @return mixed \n         * @static \n         */\n        public static function requireOnce($file){\n            return \\Illuminate\\Filesystem\\Filesystem::requireOnce($file);\n        }\n        \n        /**\n         * Write the contents of a file.\n         *\n         * @param string $path\n         * @param string $contents\n         * @param bool $lock\n         * @return int \n         * @static \n         */\n        public static function put($path, $contents, $lock = false){\n            return \\Illuminate\\Filesystem\\Filesystem::put($path, $contents, $lock);\n        }\n        \n        /**\n         * Prepend to a file.\n         *\n         * @param string $path\n         * @param string $data\n         * @return int \n         * @static \n         */\n        public static function prepend($path, $data){\n            return \\Illuminate\\Filesystem\\Filesystem::prepend($path, $data);\n        }\n        \n        /**\n         * Append to a file.\n         *\n         * @param string $path\n         * @param string $data\n         * @return int \n         * @static \n         */\n        public static function append($path, $data){\n            return \\Illuminate\\Filesystem\\Filesystem::append($path, $data);\n        }\n        \n        /**\n         * Delete the file at a given path.\n         *\n         * @param string|array $paths\n         * @return bool \n         * @static \n         */\n        public static function delete($paths){\n            return \\Illuminate\\Filesystem\\Filesystem::delete($paths);\n        }\n        \n        /**\n         * Move a file to a new location.\n         *\n         * @param string $path\n         * @param string $target\n         * @return bool \n         * @static \n         */\n        public static function move($path, $target){\n            return \\Illuminate\\Filesystem\\Filesystem::move($path, $target);\n        }\n        \n        /**\n         * Copy a file to a new location.\n         *\n         * @param string $path\n         * @param string $target\n         * @return bool \n         * @static \n         */\n        public static function copy($path, $target){\n            return \\Illuminate\\Filesystem\\Filesystem::copy($path, $target);\n        }\n        \n        /**\n         * Extract the file name from a file path.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */\n        public static function name($path){\n            return \\Illuminate\\Filesystem\\Filesystem::name($path);\n        }\n        \n        /**\n         * Extract the trailing name component from a file path.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */\n        public static function basename($path){\n            return \\Illuminate\\Filesystem\\Filesystem::basename($path);\n        }\n        \n        /**\n         * Extract the parent directory from a file path.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */\n        public static function dirname($path){\n            return \\Illuminate\\Filesystem\\Filesystem::dirname($path);\n        }\n        \n        /**\n         * Extract the file extension from a file path.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */\n        public static function extension($path){\n            return \\Illuminate\\Filesystem\\Filesystem::extension($path);\n        }\n        \n        /**\n         * Get the file type of a given file.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */\n        public static function type($path){\n            return \\Illuminate\\Filesystem\\Filesystem::type($path);\n        }\n        \n        /**\n         * Get the mime-type of a given file.\n         *\n         * @param string $path\n         * @return string|false \n         * @static \n         */\n        public static function mimeType($path){\n            return \\Illuminate\\Filesystem\\Filesystem::mimeType($path);\n        }\n        \n        /**\n         * Get the file size of a given file.\n         *\n         * @param string $path\n         * @return int \n         * @static \n         */\n        public static function size($path){\n            return \\Illuminate\\Filesystem\\Filesystem::size($path);\n        }\n        \n        /**\n         * Get the file's last modification time.\n         *\n         * @param string $path\n         * @return int \n         * @static \n         */\n        public static function lastModified($path){\n            return \\Illuminate\\Filesystem\\Filesystem::lastModified($path);\n        }\n        \n        /**\n         * Determine if the given path is a directory.\n         *\n         * @param string $directory\n         * @return bool \n         * @static \n         */\n        public static function isDirectory($directory){\n            return \\Illuminate\\Filesystem\\Filesystem::isDirectory($directory);\n        }\n        \n        /**\n         * Determine if the given path is writable.\n         *\n         * @param string $path\n         * @return bool \n         * @static \n         */\n        public static function isWritable($path){\n            return \\Illuminate\\Filesystem\\Filesystem::isWritable($path);\n        }\n        \n        /**\n         * Determine if the given path is a file.\n         *\n         * @param string $file\n         * @return bool \n         * @static \n         */\n        public static function isFile($file){\n            return \\Illuminate\\Filesystem\\Filesystem::isFile($file);\n        }\n        \n        /**\n         * Find path names matching a given pattern.\n         *\n         * @param string $pattern\n         * @param int $flags\n         * @return array \n         * @static \n         */\n        public static function glob($pattern, $flags = 0){\n            return \\Illuminate\\Filesystem\\Filesystem::glob($pattern, $flags);\n        }\n        \n        /**\n         * Get an array of all files in a directory.\n         *\n         * @param string $directory\n         * @return array \n         * @static \n         */\n        public static function files($directory){\n            return \\Illuminate\\Filesystem\\Filesystem::files($directory);\n        }\n        \n        /**\n         * Get all of the files from the given directory (recursive).\n         *\n         * @param string $directory\n         * @param bool $hidden\n         * @return array \n         * @static \n         */\n        public static function allFiles($directory, $hidden = false){\n            return \\Illuminate\\Filesystem\\Filesystem::allFiles($directory, $hidden);\n        }\n        \n        /**\n         * Get all of the directories within a given directory.\n         *\n         * @param string $directory\n         * @return array \n         * @static \n         */\n        public static function directories($directory){\n            return \\Illuminate\\Filesystem\\Filesystem::directories($directory);\n        }\n        \n        /**\n         * Create a directory.\n         *\n         * @param string $path\n         * @param int $mode\n         * @param bool $recursive\n         * @param bool $force\n         * @return bool \n         * @static \n         */\n        public static function makeDirectory($path, $mode = 493, $recursive = false, $force = false){\n            return \\Illuminate\\Filesystem\\Filesystem::makeDirectory($path, $mode, $recursive, $force);\n        }\n        \n        /**\n         * Copy a directory from one location to another.\n         *\n         * @param string $directory\n         * @param string $destination\n         * @param int $options\n         * @return bool \n         * @static \n         */\n        public static function copyDirectory($directory, $destination, $options = null){\n            return \\Illuminate\\Filesystem\\Filesystem::copyDirectory($directory, $destination, $options);\n        }\n        \n        /**\n         * Recursively delete a directory.\n         * \n         * The directory itself may be optionally preserved.\n         *\n         * @param string $directory\n         * @param bool $preserve\n         * @return bool \n         * @static \n         */\n        public static function deleteDirectory($directory, $preserve = false){\n            return \\Illuminate\\Filesystem\\Filesystem::deleteDirectory($directory, $preserve);\n        }\n        \n        /**\n         * Empty the specified directory of all files and folders.\n         *\n         * @param string $directory\n         * @return bool \n         * @static \n         */\n        public static function cleanDirectory($directory){\n            return \\Illuminate\\Filesystem\\Filesystem::cleanDirectory($directory);\n        }\n        \n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param callable $macro\n         * @return void \n         * @static \n         */\n        public static function macro($name, $macro){\n            \\Illuminate\\Filesystem\\Filesystem::macro($name, $macro);\n        }\n        \n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */\n        public static function hasMacro($name){\n            return \\Illuminate\\Filesystem\\Filesystem::hasMacro($name);\n        }\n        \n    }\n\n\n    class Gate extends \\Illuminate\\Support\\Facades\\Gate{\n        \n        /**\n         * Determine if a given ability has been defined.\n         *\n         * @param string $ability\n         * @return bool \n         * @static \n         */\n        public static function has($ability){\n            return \\Illuminate\\Auth\\Access\\Gate::has($ability);\n        }\n        \n        /**\n         * Define a new ability.\n         *\n         * @param string $ability\n         * @param callable|string $callback\n         * @return $this \n         * @throws \\InvalidArgumentException\n         * @static \n         */\n        public static function define($ability, $callback){\n            return \\Illuminate\\Auth\\Access\\Gate::define($ability, $callback);\n        }\n        \n        /**\n         * Define a policy class for a given class type.\n         *\n         * @param string $class\n         * @param string $policy\n         * @return $this \n         * @static \n         */\n        public static function policy($class, $policy){\n            return \\Illuminate\\Auth\\Access\\Gate::policy($class, $policy);\n        }\n        \n        /**\n         * Register a callback to run before all Gate checks.\n         *\n         * @param callable $callback\n         * @return $this \n         * @static \n         */\n        public static function before($callback){\n            return \\Illuminate\\Auth\\Access\\Gate::before($callback);\n        }\n        \n        /**\n         * Register a callback to run after all Gate checks.\n         *\n         * @param callable $callback\n         * @return $this \n         * @static \n         */\n        public static function after($callback){\n            return \\Illuminate\\Auth\\Access\\Gate::after($callback);\n        }\n        \n        /**\n         * Determine if the given ability should be granted for the current user.\n         *\n         * @param string $ability\n         * @param array|mixed $arguments\n         * @return bool \n         * @static \n         */\n        public static function allows($ability, $arguments = array()){\n            return \\Illuminate\\Auth\\Access\\Gate::allows($ability, $arguments);\n        }\n        \n        /**\n         * Determine if the given ability should be denied for the current user.\n         *\n         * @param string $ability\n         * @param array|mixed $arguments\n         * @return bool \n         * @static \n         */\n        public static function denies($ability, $arguments = array()){\n            return \\Illuminate\\Auth\\Access\\Gate::denies($ability, $arguments);\n        }\n        \n        /**\n         * Determine if the given ability should be granted for the current user.\n         *\n         * @param string $ability\n         * @param array|mixed $arguments\n         * @return bool \n         * @static \n         */\n        public static function check($ability, $arguments = array()){\n            return \\Illuminate\\Auth\\Access\\Gate::check($ability, $arguments);\n        }\n        \n        /**\n         * Determine if the given ability should be granted for the current user.\n         *\n         * @param string $ability\n         * @param array|mixed $arguments\n         * @return \\Illuminate\\Auth\\Access\\Response \n         * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n         * @static \n         */\n        public static function authorize($ability, $arguments = array()){\n            return \\Illuminate\\Auth\\Access\\Gate::authorize($ability, $arguments);\n        }\n        \n        /**\n         * Get a policy instance for a given class.\n         *\n         * @param object|string $class\n         * @return mixed \n         * @throws \\InvalidArgumentException\n         * @static \n         */\n        public static function getPolicyFor($class){\n            return \\Illuminate\\Auth\\Access\\Gate::getPolicyFor($class);\n        }\n        \n        /**\n         * Build a policy class instance of the given type.\n         *\n         * @param object|string $class\n         * @return mixed \n         * @static \n         */\n        public static function resolvePolicy($class){\n            return \\Illuminate\\Auth\\Access\\Gate::resolvePolicy($class);\n        }\n        \n        /**\n         * Get a guard instance for the given user.\n         *\n         * @param \\Illuminate\\Contracts\\Auth\\Authenticatable|mixed $user\n         * @return static \n         * @static \n         */\n        public static function forUser($user){\n            return \\Illuminate\\Auth\\Access\\Gate::forUser($user);\n        }\n        \n    }\n\n\n    class Hash extends \\Illuminate\\Support\\Facades\\Hash{\n        \n        /**\n         * Hash the given value.\n         *\n         * @param string $value\n         * @param array $options\n         * @return string \n         * @throws \\RuntimeException\n         * @static \n         */\n        public static function make($value, $options = array()){\n            return \\Illuminate\\Hashing\\BcryptHasher::make($value, $options);\n        }\n        \n        /**\n         * Check the given plain value against a hash.\n         *\n         * @param string $value\n         * @param string $hashedValue\n         * @param array $options\n         * @return bool \n         * @static \n         */\n        public static function check($value, $hashedValue, $options = array()){\n            return \\Illuminate\\Hashing\\BcryptHasher::check($value, $hashedValue, $options);\n        }\n        \n        /**\n         * Check if the given hash has been hashed using the given options.\n         *\n         * @param string $hashedValue\n         * @param array $options\n         * @return bool \n         * @static \n         */\n        public static function needsRehash($hashedValue, $options = array()){\n            return \\Illuminate\\Hashing\\BcryptHasher::needsRehash($hashedValue, $options);\n        }\n        \n        /**\n         * Set the default password work factor.\n         *\n         * @param int $rounds\n         * @return $this \n         * @static \n         */\n        public static function setRounds($rounds){\n            return \\Illuminate\\Hashing\\BcryptHasher::setRounds($rounds);\n        }\n        \n    }\n\n\n    class Lang extends \\Illuminate\\Support\\Facades\\Lang{\n        \n        /**\n         * Determine if a translation exists for a given locale.\n         *\n         * @param string $key\n         * @param string|null $locale\n         * @return bool \n         * @static \n         */\n        public static function hasForLocale($key, $locale = null){\n            return \\Illuminate\\Translation\\Translator::hasForLocale($key, $locale);\n        }\n        \n        /**\n         * Determine if a translation exists.\n         *\n         * @param string $key\n         * @param string|null $locale\n         * @param bool $fallback\n         * @return bool \n         * @static \n         */\n        public static function has($key, $locale = null, $fallback = true){\n            return \\Illuminate\\Translation\\Translator::has($key, $locale, $fallback);\n        }\n        \n        /**\n         * Get the translation for the given key.\n         *\n         * @param string $key\n         * @param array $replace\n         * @param string|null $locale\n         * @param bool $fallback\n         * @return string|array|null \n         * @static \n         */\n        public static function get($key, $replace = array(), $locale = null, $fallback = true){\n            return \\Illuminate\\Translation\\Translator::get($key, $replace, $locale, $fallback);\n        }\n        \n        /**\n         * Get a translation according to an integer value.\n         *\n         * @param string $key\n         * @param int|array|\\Countable $number\n         * @param array $replace\n         * @param string $locale\n         * @return string \n         * @static \n         */\n        public static function choice($key, $number, $replace = array(), $locale = null){\n            return \\Illuminate\\Translation\\Translator::choice($key, $number, $replace, $locale);\n        }\n        \n        /**\n         * Get the translation for a given key.\n         *\n         * @param string $id\n         * @param array $parameters\n         * @param string $domain\n         * @param string $locale\n         * @return string|array|null \n         * @static \n         */\n        public static function trans($id, $parameters = array(), $domain = 'messages', $locale = null){\n            return \\Illuminate\\Translation\\Translator::trans($id, $parameters, $domain, $locale);\n        }\n        \n        /**\n         * Get a translation according to an integer value.\n         *\n         * @param string $id\n         * @param int|array|\\Countable $number\n         * @param array $parameters\n         * @param string $domain\n         * @param string $locale\n         * @return string \n         * @static \n         */\n        public static function transChoice($id, $number, $parameters = array(), $domain = 'messages', $locale = null){\n            return \\Illuminate\\Translation\\Translator::transChoice($id, $number, $parameters, $domain, $locale);\n        }\n        \n        /**\n         * Load the specified language group.\n         *\n         * @param string $namespace\n         * @param string $group\n         * @param string $locale\n         * @return void \n         * @static \n         */\n        public static function load($namespace, $group, $locale){\n            \\Illuminate\\Translation\\Translator::load($namespace, $group, $locale);\n        }\n        \n        /**\n         * Add a new namespace to the loader.\n         *\n         * @param string $namespace\n         * @param string $hint\n         * @return void \n         * @static \n         */\n        public static function addNamespace($namespace, $hint){\n            \\Illuminate\\Translation\\Translator::addNamespace($namespace, $hint);\n        }\n        \n        /**\n         * Parse a key into namespace, group, and item.\n         *\n         * @param string $key\n         * @return array \n         * @static \n         */\n        public static function parseKey($key){\n            return \\Illuminate\\Translation\\Translator::parseKey($key);\n        }\n        \n        /**\n         * Get the message selector instance.\n         *\n         * @return \\Symfony\\Component\\Translation\\MessageSelector \n         * @static \n         */\n        public static function getSelector(){\n            return \\Illuminate\\Translation\\Translator::getSelector();\n        }\n        \n        /**\n         * Set the message selector instance.\n         *\n         * @param \\Symfony\\Component\\Translation\\MessageSelector $selector\n         * @return void \n         * @static \n         */\n        public static function setSelector($selector){\n            \\Illuminate\\Translation\\Translator::setSelector($selector);\n        }\n        \n        /**\n         * Get the language line loader implementation.\n         *\n         * @return \\Illuminate\\Translation\\LoaderInterface \n         * @static \n         */\n        public static function getLoader(){\n            return \\Illuminate\\Translation\\Translator::getLoader();\n        }\n        \n        /**\n         * Get the default locale being used.\n         *\n         * @return string \n         * @static \n         */\n        public static function locale(){\n            return \\Illuminate\\Translation\\Translator::locale();\n        }\n        \n        /**\n         * Get the default locale being used.\n         *\n         * @return string \n         * @static \n         */\n        public static function getLocale(){\n            return \\Illuminate\\Translation\\Translator::getLocale();\n        }\n        \n        /**\n         * Set the default locale.\n         *\n         * @param string $locale\n         * @return void \n         * @static \n         */\n        public static function setLocale($locale){\n            \\Illuminate\\Translation\\Translator::setLocale($locale);\n        }\n        \n        /**\n         * Get the fallback locale being used.\n         *\n         * @return string \n         * @static \n         */\n        public static function getFallback(){\n            return \\Illuminate\\Translation\\Translator::getFallback();\n        }\n        \n        /**\n         * Set the fallback locale being used.\n         *\n         * @param string $fallback\n         * @return void \n         * @static \n         */\n        public static function setFallback($fallback){\n            \\Illuminate\\Translation\\Translator::setFallback($fallback);\n        }\n        \n        /**\n         * Set the parsed value of a key.\n         *\n         * @param string $key\n         * @param array $parsed\n         * @return void \n         * @static \n         */\n        public static function setParsedKey($key, $parsed){\n            //Method inherited from \\Illuminate\\Support\\NamespacedItemResolver            \n            \\Illuminate\\Translation\\Translator::setParsedKey($key, $parsed);\n        }\n        \n    }\n\n\n    class Log extends \\Illuminate\\Support\\Facades\\Log{\n        \n        /**\n         * Adds a log record at the DEBUG level.\n         *\n         * @param string $message The log message\n         * @param array $context The log context\n         * @return Boolean Whether the record has been processed\n         * @static \n         */\n        public static function debug($message, $context = array()){\n            return \\Monolog\\Logger::debug($message, $context);\n        }\n        \n        /**\n         * Adds a log record at the INFO level.\n         *\n         * @param string $message The log message\n         * @param array $context The log context\n         * @return Boolean Whether the record has been processed\n         * @static \n         */\n        public static function info($message, $context = array()){\n            return \\Monolog\\Logger::info($message, $context);\n        }\n        \n        /**\n         * Adds a log record at the NOTICE level.\n         *\n         * @param string $message The log message\n         * @param array $context The log context\n         * @return Boolean Whether the record has been processed\n         * @static \n         */\n        public static function notice($message, $context = array()){\n            return \\Monolog\\Logger::notice($message, $context);\n        }\n        \n        /**\n         * Adds a log record at the WARNING level.\n         *\n         * @param string $message The log message\n         * @param array $context The log context\n         * @return Boolean Whether the record has been processed\n         * @static \n         */\n        public static function warning($message, $context = array()){\n            return \\Monolog\\Logger::warning($message, $context);\n        }\n        \n        /**\n         * Adds a log record at the ERROR level.\n         *\n         * @param string $message The log message\n         * @param array $context The log context\n         * @return Boolean Whether the record has been processed\n         * @static \n         */\n        public static function error($message, $context = array()){\n            return \\Monolog\\Logger::error($message, $context);\n        }\n        \n        /**\n         * Adds a log record at the CRITICAL level.\n         *\n         * @param string $message The log message\n         * @param array $context The log context\n         * @return Boolean Whether the record has been processed\n         * @static \n         */\n        public static function critical($message, $context = array()){\n            return \\Monolog\\Logger::critical($message, $context);\n        }\n        \n        /**\n         * Adds a log record at the ALERT level.\n         *\n         * @param string $message The log message\n         * @param array $context The log context\n         * @return Boolean Whether the record has been processed\n         * @static \n         */\n        public static function alert($message, $context = array()){\n            return \\Monolog\\Logger::alert($message, $context);\n        }\n        \n        /**\n         * Adds a log record at the EMERGENCY level.\n         *\n         * @param string $message The log message\n         * @param array $context The log context\n         * @return Boolean Whether the record has been processed\n         * @static \n         */\n        public static function emergency($message, $context = array()){\n            return \\Monolog\\Logger::emergency($message, $context);\n        }\n        \n        /**\n         * Log a message to the logs.\n         *\n         * @param string $level\n         * @param string $message\n         * @param array $context\n         * @return void \n         * @static \n         */\n        public static function log($level, $message, $context = array()){\n            \\Illuminate\\Log\\Writer::log($level, $message, $context);\n        }\n        \n        /**\n         * Dynamically pass log calls into the writer.\n         *\n         * @param string $level\n         * @param string $message\n         * @param array $context\n         * @return void \n         * @static \n         */\n        public static function write($level, $message, $context = array()){\n            \\Illuminate\\Log\\Writer::write($level, $message, $context);\n        }\n        \n        /**\n         * Register a file log handler.\n         *\n         * @param string $path\n         * @param string $level\n         * @return void \n         * @static \n         */\n        public static function useFiles($path, $level = 'debug'){\n            \\Illuminate\\Log\\Writer::useFiles($path, $level);\n        }\n        \n        /**\n         * Register a daily file log handler.\n         *\n         * @param string $path\n         * @param int $days\n         * @param string $level\n         * @return void \n         * @static \n         */\n        public static function useDailyFiles($path, $days = 0, $level = 'debug'){\n            \\Illuminate\\Log\\Writer::useDailyFiles($path, $days, $level);\n        }\n        \n        /**\n         * Register a Syslog handler.\n         *\n         * @param string $name\n         * @param string $level\n         * @return \\Psr\\Log\\LoggerInterface \n         * @static \n         */\n        public static function useSyslog($name = 'laravel', $level = 'debug'){\n            return \\Illuminate\\Log\\Writer::useSyslog($name, $level);\n        }\n        \n        /**\n         * Register an error_log handler.\n         *\n         * @param string $level\n         * @param int $messageType\n         * @return void \n         * @static \n         */\n        public static function useErrorLog($level = 'debug', $messageType = 0){\n            \\Illuminate\\Log\\Writer::useErrorLog($level, $messageType);\n        }\n        \n        /**\n         * Register a new callback handler for when a log event is triggered.\n         *\n         * @param \\Closure $callback\n         * @return void \n         * @throws \\RuntimeException\n         * @static \n         */\n        public static function listen($callback){\n            \\Illuminate\\Log\\Writer::listen($callback);\n        }\n        \n        /**\n         * Get the underlying Monolog instance.\n         *\n         * @return \\Monolog\\Logger \n         * @static \n         */\n        public static function getMonolog(){\n            return \\Illuminate\\Log\\Writer::getMonolog();\n        }\n        \n        /**\n         * Get the event dispatcher instance.\n         *\n         * @return \\Illuminate\\Contracts\\Events\\Dispatcher \n         * @static \n         */\n        public static function getEventDispatcher(){\n            return \\Illuminate\\Log\\Writer::getEventDispatcher();\n        }\n        \n        /**\n         * Set the event dispatcher instance.\n         *\n         * @param \\Illuminate\\Contracts\\Events\\Dispatcher $dispatcher\n         * @return void \n         * @static \n         */\n        public static function setEventDispatcher($dispatcher){\n            \\Illuminate\\Log\\Writer::setEventDispatcher($dispatcher);\n        }\n        \n    }\n\n\n    class Mail extends \\Illuminate\\Support\\Facades\\Mail{\n        \n        /**\n         * Set the global from address and name.\n         *\n         * @param string $address\n         * @param string|null $name\n         * @return void \n         * @static \n         */\n        public static function alwaysFrom($address, $name = null){\n            \\Illuminate\\Mail\\Mailer::alwaysFrom($address, $name);\n        }\n        \n        /**\n         * Set the global to address and name.\n         *\n         * @param string $address\n         * @param string|null $name\n         * @return void \n         * @static \n         */\n        public static function alwaysTo($address, $name = null){\n            \\Illuminate\\Mail\\Mailer::alwaysTo($address, $name);\n        }\n        \n        /**\n         * Send a new message when only a raw text part.\n         *\n         * @param string $text\n         * @param mixed $callback\n         * @return void \n         * @static \n         */\n        public static function raw($text, $callback){\n            \\Illuminate\\Mail\\Mailer::raw($text, $callback);\n        }\n        \n        /**\n         * Send a new message when only a plain part.\n         *\n         * @param string $view\n         * @param array $data\n         * @param mixed $callback\n         * @return void \n         * @static \n         */\n        public static function plain($view, $data, $callback){\n            \\Illuminate\\Mail\\Mailer::plain($view, $data, $callback);\n        }\n        \n        /**\n         * Send a new message using a view.\n         *\n         * @param string|array $view\n         * @param array $data\n         * @param \\Closure|string $callback\n         * @return void \n         * @static \n         */\n        public static function send($view, $data, $callback){\n            \\Illuminate\\Mail\\Mailer::send($view, $data, $callback);\n        }\n        \n        /**\n         * Queue a new e-mail message for sending.\n         *\n         * @param string|array $view\n         * @param array $data\n         * @param \\Closure|string $callback\n         * @param string|null $queue\n         * @return mixed \n         * @static \n         */\n        public static function queue($view, $data, $callback, $queue = null){\n            return \\Illuminate\\Mail\\Mailer::queue($view, $data, $callback, $queue);\n        }\n        \n        /**\n         * Queue a new e-mail message for sending on the given queue.\n         *\n         * @param string $queue\n         * @param string|array $view\n         * @param array $data\n         * @param \\Closure|string $callback\n         * @return mixed \n         * @static \n         */\n        public static function onQueue($queue, $view, $data, $callback){\n            return \\Illuminate\\Mail\\Mailer::onQueue($queue, $view, $data, $callback);\n        }\n        \n        /**\n         * Queue a new e-mail message for sending on the given queue.\n         * \n         * This method didn't match rest of framework's \"onQueue\" phrasing. Added \"onQueue\".\n         *\n         * @param string $queue\n         * @param string|array $view\n         * @param array $data\n         * @param \\Closure|string $callback\n         * @return mixed \n         * @static \n         */\n        public static function queueOn($queue, $view, $data, $callback){\n            return \\Illuminate\\Mail\\Mailer::queueOn($queue, $view, $data, $callback);\n        }\n        \n        /**\n         * Queue a new e-mail message for sending after (n) seconds.\n         *\n         * @param int $delay\n         * @param string|array $view\n         * @param array $data\n         * @param \\Closure|string $callback\n         * @param string|null $queue\n         * @return mixed \n         * @static \n         */\n        public static function later($delay, $view, $data, $callback, $queue = null){\n            return \\Illuminate\\Mail\\Mailer::later($delay, $view, $data, $callback, $queue);\n        }\n        \n        /**\n         * Queue a new e-mail message for sending after (n) seconds on the given queue.\n         *\n         * @param string $queue\n         * @param int $delay\n         * @param string|array $view\n         * @param array $data\n         * @param \\Closure|string $callback\n         * @return mixed \n         * @static \n         */\n        public static function laterOn($queue, $delay, $view, $data, $callback){\n            return \\Illuminate\\Mail\\Mailer::laterOn($queue, $delay, $view, $data, $callback);\n        }\n        \n        /**\n         * Handle a queued e-mail message job.\n         *\n         * @param \\Illuminate\\Contracts\\Queue\\Job $job\n         * @param array $data\n         * @return void \n         * @static \n         */\n        public static function handleQueuedMessage($job, $data){\n            \\Illuminate\\Mail\\Mailer::handleQueuedMessage($job, $data);\n        }\n        \n        /**\n         * Get the view factory instance.\n         *\n         * @return \\Illuminate\\Contracts\\View\\Factory \n         * @static \n         */\n        public static function getViewFactory(){\n            return \\Illuminate\\Mail\\Mailer::getViewFactory();\n        }\n        \n        /**\n         * Get the Swift Mailer instance.\n         *\n         * @return \\Swift_Mailer \n         * @static \n         */\n        public static function getSwiftMailer(){\n            return \\Illuminate\\Mail\\Mailer::getSwiftMailer();\n        }\n        \n        /**\n         * Get the array of failed recipients.\n         *\n         * @return array \n         * @static \n         */\n        public static function failures(){\n            return \\Illuminate\\Mail\\Mailer::failures();\n        }\n        \n        /**\n         * Set the Swift Mailer instance.\n         *\n         * @param \\Swift_Mailer $swift\n         * @return void \n         * @static \n         */\n        public static function setSwiftMailer($swift){\n            \\Illuminate\\Mail\\Mailer::setSwiftMailer($swift);\n        }\n        \n        /**\n         * Set the queue manager instance.\n         *\n         * @param \\Illuminate\\Contracts\\Queue\\Queue $queue\n         * @return $this \n         * @static \n         */\n        public static function setQueue($queue){\n            return \\Illuminate\\Mail\\Mailer::setQueue($queue);\n        }\n        \n        /**\n         * Set the IoC container instance.\n         *\n         * @param \\Illuminate\\Contracts\\Container\\Container $container\n         * @return void \n         * @static \n         */\n        public static function setContainer($container){\n            \\Illuminate\\Mail\\Mailer::setContainer($container);\n        }\n        \n    }\n\n\n    class Password extends \\Illuminate\\Support\\Facades\\Password{\n        \n        /**\n         * Attempt to get the broker from the local cache.\n         *\n         * @param string $name\n         * @return \\Illuminate\\Contracts\\Auth\\PasswordBroker \n         * @static \n         */\n        public static function broker($name = null){\n            return \\Illuminate\\Auth\\Passwords\\PasswordBrokerManager::broker($name);\n        }\n        \n        /**\n         * Get the default password broker name.\n         *\n         * @return string \n         * @static \n         */\n        public static function getDefaultDriver(){\n            return \\Illuminate\\Auth\\Passwords\\PasswordBrokerManager::getDefaultDriver();\n        }\n        \n        /**\n         * Set the default password broker name.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */\n        public static function setDefaultDriver($name){\n            \\Illuminate\\Auth\\Passwords\\PasswordBrokerManager::setDefaultDriver($name);\n        }\n        \n    }\n\n\n    class Queue extends \\Illuminate\\Support\\Facades\\Queue{\n        \n        /**\n         * Register an event listener for the before job event.\n         *\n         * @param mixed $callback\n         * @return void \n         * @static \n         */\n        public static function before($callback){\n            \\Illuminate\\Queue\\QueueManager::before($callback);\n        }\n        \n        /**\n         * Register an event listener for the after job event.\n         *\n         * @param mixed $callback\n         * @return void \n         * @static \n         */\n        public static function after($callback){\n            \\Illuminate\\Queue\\QueueManager::after($callback);\n        }\n        \n        /**\n         * Register an event listener for the exception occurred job event.\n         *\n         * @param mixed $callback\n         * @return void \n         * @static \n         */\n        public static function exceptionOccurred($callback){\n            \\Illuminate\\Queue\\QueueManager::exceptionOccurred($callback);\n        }\n        \n        /**\n         * Register an event listener for the daemon queue loop.\n         *\n         * @param mixed $callback\n         * @return void \n         * @static \n         */\n        public static function looping($callback){\n            \\Illuminate\\Queue\\QueueManager::looping($callback);\n        }\n        \n        /**\n         * Register an event listener for the failed job event.\n         *\n         * @param mixed $callback\n         * @return void \n         * @static \n         */\n        public static function failing($callback){\n            \\Illuminate\\Queue\\QueueManager::failing($callback);\n        }\n        \n        /**\n         * Register an event listener for the daemon queue stopping.\n         *\n         * @param mixed $callback\n         * @return void \n         * @static \n         */\n        public static function stopping($callback){\n            \\Illuminate\\Queue\\QueueManager::stopping($callback);\n        }\n        \n        /**\n         * Determine if the driver is connected.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */\n        public static function connected($name = null){\n            return \\Illuminate\\Queue\\QueueManager::connected($name);\n        }\n        \n        /**\n         * Resolve a queue connection instance.\n         *\n         * @param string $name\n         * @return \\Illuminate\\Contracts\\Queue\\Queue \n         * @static \n         */\n        public static function connection($name = null){\n            return \\Illuminate\\Queue\\QueueManager::connection($name);\n        }\n        \n        /**\n         * Add a queue connection resolver.\n         *\n         * @param string $driver\n         * @param \\Closure $resolver\n         * @return void \n         * @static \n         */\n        public static function extend($driver, $resolver){\n            \\Illuminate\\Queue\\QueueManager::extend($driver, $resolver);\n        }\n        \n        /**\n         * Add a queue connection resolver.\n         *\n         * @param string $driver\n         * @param \\Closure $resolver\n         * @return void \n         * @static \n         */\n        public static function addConnector($driver, $resolver){\n            \\Illuminate\\Queue\\QueueManager::addConnector($driver, $resolver);\n        }\n        \n        /**\n         * Get the name of the default queue connection.\n         *\n         * @return string \n         * @static \n         */\n        public static function getDefaultDriver(){\n            return \\Illuminate\\Queue\\QueueManager::getDefaultDriver();\n        }\n        \n        /**\n         * Set the name of the default queue connection.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */\n        public static function setDefaultDriver($name){\n            \\Illuminate\\Queue\\QueueManager::setDefaultDriver($name);\n        }\n        \n        /**\n         * Get the full name for the given connection.\n         *\n         * @param string $connection\n         * @return string \n         * @static \n         */\n        public static function getName($connection = null){\n            return \\Illuminate\\Queue\\QueueManager::getName($connection);\n        }\n        \n        /**\n         * Determine if the application is in maintenance mode.\n         *\n         * @return bool \n         * @static \n         */\n        public static function isDownForMaintenance(){\n            return \\Illuminate\\Queue\\QueueManager::isDownForMaintenance();\n        }\n        \n        /**\n         * Push a new job onto the queue.\n         *\n         * @param string $job\n         * @param mixed $data\n         * @param string $queue\n         * @return mixed \n         * @throws \\Exception|\\Throwable\n         * @static \n         */\n        public static function push($job, $data = '', $queue = null){\n            return \\Illuminate\\Queue\\SyncQueue::push($job, $data, $queue);\n        }\n        \n        /**\n         * Push a raw payload onto the queue.\n         *\n         * @param string $payload\n         * @param string $queue\n         * @param array $options\n         * @return mixed \n         * @static \n         */\n        public static function pushRaw($payload, $queue = null, $options = array()){\n            return \\Illuminate\\Queue\\SyncQueue::pushRaw($payload, $queue, $options);\n        }\n        \n        /**\n         * Push a new job onto the queue after a delay.\n         *\n         * @param \\DateTime|int $delay\n         * @param string $job\n         * @param mixed $data\n         * @param string $queue\n         * @return mixed \n         * @static \n         */\n        public static function later($delay, $job, $data = '', $queue = null){\n            return \\Illuminate\\Queue\\SyncQueue::later($delay, $job, $data, $queue);\n        }\n        \n        /**\n         * Pop the next job off of the queue.\n         *\n         * @param string $queue\n         * @return \\Illuminate\\Contracts\\Queue\\Job|null \n         * @static \n         */\n        public static function pop($queue = null){\n            return \\Illuminate\\Queue\\SyncQueue::pop($queue);\n        }\n        \n        /**\n         * Push a new job onto the queue.\n         *\n         * @param string $queue\n         * @param string $job\n         * @param mixed $data\n         * @return mixed \n         * @static \n         */\n        public static function pushOn($queue, $job, $data = ''){\n            //Method inherited from \\Illuminate\\Queue\\Queue            \n            return \\Illuminate\\Queue\\SyncQueue::pushOn($queue, $job, $data);\n        }\n        \n        /**\n         * Push a new job onto the queue after a delay.\n         *\n         * @param string $queue\n         * @param \\DateTime|int $delay\n         * @param string $job\n         * @param mixed $data\n         * @return mixed \n         * @static \n         */\n        public static function laterOn($queue, $delay, $job, $data = ''){\n            //Method inherited from \\Illuminate\\Queue\\Queue            \n            return \\Illuminate\\Queue\\SyncQueue::laterOn($queue, $delay, $job, $data);\n        }\n        \n        /**\n         * Push an array of jobs onto the queue.\n         *\n         * @param array $jobs\n         * @param mixed $data\n         * @param string $queue\n         * @return mixed \n         * @static \n         */\n        public static function bulk($jobs, $data = '', $queue = null){\n            //Method inherited from \\Illuminate\\Queue\\Queue            \n            return \\Illuminate\\Queue\\SyncQueue::bulk($jobs, $data, $queue);\n        }\n        \n        /**\n         * Set the IoC container instance.\n         *\n         * @param \\Illuminate\\Container\\Container $container\n         * @return void \n         * @static \n         */\n        public static function setContainer($container){\n            //Method inherited from \\Illuminate\\Queue\\Queue            \n            \\Illuminate\\Queue\\SyncQueue::setContainer($container);\n        }\n        \n        /**\n         * Set the encrypter instance.\n         *\n         * @param \\Illuminate\\Contracts\\Encryption\\Encrypter $crypt\n         * @return void \n         * @static \n         */\n        public static function setEncrypter($crypt){\n            //Method inherited from \\Illuminate\\Queue\\Queue            \n            \\Illuminate\\Queue\\SyncQueue::setEncrypter($crypt);\n        }\n        \n    }\n\n\n    class Redirect extends \\Illuminate\\Support\\Facades\\Redirect{\n        \n        /**\n         * Create a new redirect response to the \"home\" route.\n         *\n         * @param int $status\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */\n        public static function home($status = 302){\n            return \\Illuminate\\Routing\\Redirector::home($status);\n        }\n        \n        /**\n         * Create a new redirect response to the previous location.\n         *\n         * @param int $status\n         * @param array $headers\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */\n        public static function back($status = 302, $headers = array()){\n            return \\Illuminate\\Routing\\Redirector::back($status, $headers);\n        }\n        \n        /**\n         * Create a new redirect response to the current URI.\n         *\n         * @param int $status\n         * @param array $headers\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */\n        public static function refresh($status = 302, $headers = array()){\n            return \\Illuminate\\Routing\\Redirector::refresh($status, $headers);\n        }\n        \n        /**\n         * Create a new redirect response, while putting the current URL in the session.\n         *\n         * @param string $path\n         * @param int $status\n         * @param array $headers\n         * @param bool $secure\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */\n        public static function guest($path, $status = 302, $headers = array(), $secure = null){\n            return \\Illuminate\\Routing\\Redirector::guest($path, $status, $headers, $secure);\n        }\n        \n        /**\n         * Create a new redirect response to the previously intended location.\n         *\n         * @param string $default\n         * @param int $status\n         * @param array $headers\n         * @param bool $secure\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */\n        public static function intended($default = '/', $status = 302, $headers = array(), $secure = null){\n            return \\Illuminate\\Routing\\Redirector::intended($default, $status, $headers, $secure);\n        }\n        \n        /**\n         * Create a new redirect response to the given path.\n         *\n         * @param string $path\n         * @param int $status\n         * @param array $headers\n         * @param bool $secure\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */\n        public static function to($path, $status = 302, $headers = array(), $secure = null){\n            return \\Illuminate\\Routing\\Redirector::to($path, $status, $headers, $secure);\n        }\n        \n        /**\n         * Create a new redirect response to an external URL (no validation).\n         *\n         * @param string $path\n         * @param int $status\n         * @param array $headers\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */\n        public static function away($path, $status = 302, $headers = array()){\n            return \\Illuminate\\Routing\\Redirector::away($path, $status, $headers);\n        }\n        \n        /**\n         * Create a new redirect response to the given HTTPS path.\n         *\n         * @param string $path\n         * @param int $status\n         * @param array $headers\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */\n        public static function secure($path, $status = 302, $headers = array()){\n            return \\Illuminate\\Routing\\Redirector::secure($path, $status, $headers);\n        }\n        \n        /**\n         * Create a new redirect response to a named route.\n         *\n         * @param string $route\n         * @param array $parameters\n         * @param int $status\n         * @param array $headers\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */\n        public static function route($route, $parameters = array(), $status = 302, $headers = array()){\n            return \\Illuminate\\Routing\\Redirector::route($route, $parameters, $status, $headers);\n        }\n        \n        /**\n         * Create a new redirect response to a controller action.\n         *\n         * @param string $action\n         * @param array $parameters\n         * @param int $status\n         * @param array $headers\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */\n        public static function action($action, $parameters = array(), $status = 302, $headers = array()){\n            return \\Illuminate\\Routing\\Redirector::action($action, $parameters, $status, $headers);\n        }\n        \n        /**\n         * Get the URL generator instance.\n         *\n         * @return \\Illuminate\\Routing\\UrlGenerator \n         * @static \n         */\n        public static function getUrlGenerator(){\n            return \\Illuminate\\Routing\\Redirector::getUrlGenerator();\n        }\n        \n        /**\n         * Set the active session store.\n         *\n         * @param \\Illuminate\\Session\\Store $session\n         * @return void \n         * @static \n         */\n        public static function setSession($session){\n            \\Illuminate\\Routing\\Redirector::setSession($session);\n        }\n        \n    }\n\n\n    class Request extends \\Illuminate\\Support\\Facades\\Request{\n        \n        /**\n         * Create a new Illuminate HTTP request from server variables.\n         *\n         * @return static \n         * @static \n         */\n        public static function capture(){\n            return \\Illuminate\\Http\\Request::capture();\n        }\n        \n        /**\n         * Return the Request instance.\n         *\n         * @return $this \n         * @static \n         */\n        public static function instance(){\n            return \\Illuminate\\Http\\Request::instance();\n        }\n        \n        /**\n         * Get the request method.\n         *\n         * @return string \n         * @static \n         */\n        public static function method(){\n            return \\Illuminate\\Http\\Request::method();\n        }\n        \n        /**\n         * Get the root URL for the application.\n         *\n         * @return string \n         * @static \n         */\n        public static function root(){\n            return \\Illuminate\\Http\\Request::root();\n        }\n        \n        /**\n         * Get the URL (no query string) for the request.\n         *\n         * @return string \n         * @static \n         */\n        public static function url(){\n            return \\Illuminate\\Http\\Request::url();\n        }\n        \n        /**\n         * Get the full URL for the request.\n         *\n         * @return string \n         * @static \n         */\n        public static function fullUrl(){\n            return \\Illuminate\\Http\\Request::fullUrl();\n        }\n        \n        /**\n         * Get the full URL for the request with the added query string parameters.\n         *\n         * @param array $query\n         * @return string \n         * @static \n         */\n        public static function fullUrlWithQuery($query){\n            return \\Illuminate\\Http\\Request::fullUrlWithQuery($query);\n        }\n        \n        /**\n         * Get the current path info for the request.\n         *\n         * @return string \n         * @static \n         */\n        public static function path(){\n            return \\Illuminate\\Http\\Request::path();\n        }\n        \n        /**\n         * Get the current encoded path info for the request.\n         *\n         * @return string \n         * @static \n         */\n        public static function decodedPath(){\n            return \\Illuminate\\Http\\Request::decodedPath();\n        }\n        \n        /**\n         * Get a segment from the URI (1 based index).\n         *\n         * @param int $index\n         * @param string|null $default\n         * @return string|null \n         * @static \n         */\n        public static function segment($index, $default = null){\n            return \\Illuminate\\Http\\Request::segment($index, $default);\n        }\n        \n        /**\n         * Get all of the segments for the request path.\n         *\n         * @return array \n         * @static \n         */\n        public static function segments(){\n            return \\Illuminate\\Http\\Request::segments();\n        }\n        \n        /**\n         * Determine if the current request URI matches a pattern.\n         *\n         * @param mixed  string\n         * @return bool \n         * @static \n         */\n        public static function is(){\n            return \\Illuminate\\Http\\Request::is();\n        }\n        \n        /**\n         * Determine if the current request URL and query string matches a pattern.\n         *\n         * @param mixed  string\n         * @return bool \n         * @static \n         */\n        public static function fullUrlIs(){\n            return \\Illuminate\\Http\\Request::fullUrlIs();\n        }\n        \n        /**\n         * Determine if the request is the result of an AJAX call.\n         *\n         * @return bool \n         * @static \n         */\n        public static function ajax(){\n            return \\Illuminate\\Http\\Request::ajax();\n        }\n        \n        /**\n         * Determine if the request is the result of an PJAX call.\n         *\n         * @return bool \n         * @static \n         */\n        public static function pjax(){\n            return \\Illuminate\\Http\\Request::pjax();\n        }\n        \n        /**\n         * Determine if the request is over HTTPS.\n         *\n         * @return bool \n         * @static \n         */\n        public static function secure(){\n            return \\Illuminate\\Http\\Request::secure();\n        }\n        \n        /**\n         * Returns the client IP address.\n         *\n         * @return string \n         * @static \n         */\n        public static function ip(){\n            return \\Illuminate\\Http\\Request::ip();\n        }\n        \n        /**\n         * Returns the client IP addresses.\n         *\n         * @return array \n         * @static \n         */\n        public static function ips(){\n            return \\Illuminate\\Http\\Request::ips();\n        }\n        \n        /**\n         * Determine if the request contains a given input item key.\n         *\n         * @param string|array $key\n         * @return bool \n         * @static \n         */\n        public static function exists($key){\n            return \\Illuminate\\Http\\Request::exists($key);\n        }\n        \n        /**\n         * Determine if the request contains a non-empty value for an input item.\n         *\n         * @param string|array $key\n         * @return bool \n         * @static \n         */\n        public static function has($key){\n            return \\Illuminate\\Http\\Request::has($key);\n        }\n        \n        /**\n         * Get all of the input and files for the request.\n         *\n         * @return array \n         * @static \n         */\n        public static function all(){\n            return \\Illuminate\\Http\\Request::all();\n        }\n        \n        /**\n         * Retrieve an input item from the request.\n         *\n         * @param string $key\n         * @param string|array|null $default\n         * @return string|array \n         * @static \n         */\n        public static function input($key = null, $default = null){\n            return \\Illuminate\\Http\\Request::input($key, $default);\n        }\n        \n        /**\n         * Get a subset of the items from the input data.\n         *\n         * @param array|mixed $keys\n         * @return array \n         * @static \n         */\n        public static function only($keys){\n            return \\Illuminate\\Http\\Request::only($keys);\n        }\n        \n        /**\n         * Get all of the input except for a specified array of items.\n         *\n         * @param array|mixed $keys\n         * @return array \n         * @static \n         */\n        public static function except($keys){\n            return \\Illuminate\\Http\\Request::except($keys);\n        }\n        \n        /**\n         * Intersect an array of items with the input data.\n         *\n         * @param array|mixed $keys\n         * @return array \n         * @static \n         */\n        public static function intersect($keys){\n            return \\Illuminate\\Http\\Request::intersect($keys);\n        }\n        \n        /**\n         * Retrieve a query string item from the request.\n         *\n         * @param string $key\n         * @param string|array|null $default\n         * @return string|array \n         * @static \n         */\n        public static function query($key = null, $default = null){\n            return \\Illuminate\\Http\\Request::query($key, $default);\n        }\n        \n        /**\n         * Determine if a cookie is set on the request.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */\n        public static function hasCookie($key){\n            return \\Illuminate\\Http\\Request::hasCookie($key);\n        }\n        \n        /**\n         * Retrieve a cookie from the request.\n         *\n         * @param string $key\n         * @param string|array|null $default\n         * @return string|array \n         * @static \n         */\n        public static function cookie($key = null, $default = null){\n            return \\Illuminate\\Http\\Request::cookie($key, $default);\n        }\n        \n        /**\n         * Get an array of all of the files on the request.\n         *\n         * @return array \n         * @static \n         */\n        public static function allFiles(){\n            return \\Illuminate\\Http\\Request::allFiles();\n        }\n        \n        /**\n         * Retrieve a file from the request.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @return \\Symfony\\Component\\HttpFoundation\\File\\UploadedFile|array|null \n         * @static \n         */\n        public static function file($key = null, $default = null){\n            return \\Illuminate\\Http\\Request::file($key, $default);\n        }\n        \n        /**\n         * Determine if the uploaded data contains a file.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */\n        public static function hasFile($key){\n            return \\Illuminate\\Http\\Request::hasFile($key);\n        }\n        \n        /**\n         * Determine if a header is set on the request.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */\n        public static function hasHeader($key){\n            return \\Illuminate\\Http\\Request::hasHeader($key);\n        }\n        \n        /**\n         * Retrieve a header from the request.\n         *\n         * @param string $key\n         * @param string|array|null $default\n         * @return string|array \n         * @static \n         */\n        public static function header($key = null, $default = null){\n            return \\Illuminate\\Http\\Request::header($key, $default);\n        }\n        \n        /**\n         * Retrieve a server variable from the request.\n         *\n         * @param string $key\n         * @param string|array|null $default\n         * @return string|array \n         * @static \n         */\n        public static function server($key = null, $default = null){\n            return \\Illuminate\\Http\\Request::server($key, $default);\n        }\n        \n        /**\n         * Retrieve an old input item.\n         *\n         * @param string $key\n         * @param string|array|null $default\n         * @return string|array \n         * @static \n         */\n        public static function old($key = null, $default = null){\n            return \\Illuminate\\Http\\Request::old($key, $default);\n        }\n        \n        /**\n         * Flash the input for the current request to the session.\n         *\n         * @param string $filter\n         * @param array $keys\n         * @return void \n         * @static \n         */\n        public static function flash($filter = null, $keys = array()){\n            \\Illuminate\\Http\\Request::flash($filter, $keys);\n        }\n        \n        /**\n         * Flash only some of the input to the session.\n         *\n         * @param array|mixed $keys\n         * @return void \n         * @static \n         */\n        public static function flashOnly($keys){\n            \\Illuminate\\Http\\Request::flashOnly($keys);\n        }\n        \n        /**\n         * Flash only some of the input to the session.\n         *\n         * @param array|mixed $keys\n         * @return void \n         * @static \n         */\n        public static function flashExcept($keys){\n            \\Illuminate\\Http\\Request::flashExcept($keys);\n        }\n        \n        /**\n         * Flush all of the old input from the session.\n         *\n         * @return void \n         * @static \n         */\n        public static function flush(){\n            \\Illuminate\\Http\\Request::flush();\n        }\n        \n        /**\n         * Merge new input into the current request's input array.\n         *\n         * @param array $input\n         * @return void \n         * @static \n         */\n        public static function merge($input){\n            \\Illuminate\\Http\\Request::merge($input);\n        }\n        \n        /**\n         * Replace the input for the current request.\n         *\n         * @param array $input\n         * @return void \n         * @static \n         */\n        public static function replace($input){\n            \\Illuminate\\Http\\Request::replace($input);\n        }\n        \n        /**\n         * Get the JSON payload for the request.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @return mixed \n         * @static \n         */\n        public static function json($key = null, $default = null){\n            return \\Illuminate\\Http\\Request::json($key, $default);\n        }\n        \n        /**\n         * Determine if the given content types match.\n         *\n         * @param string $actual\n         * @param string $type\n         * @return bool \n         * @static \n         */\n        public static function matchesType($actual, $type){\n            return \\Illuminate\\Http\\Request::matchesType($actual, $type);\n        }\n        \n        /**\n         * Determine if the request is sending JSON.\n         *\n         * @return bool \n         * @static \n         */\n        public static function isJson(){\n            return \\Illuminate\\Http\\Request::isJson();\n        }\n        \n        /**\n         * Determine if the current request is asking for JSON in return.\n         *\n         * @return bool \n         * @static \n         */\n        public static function wantsJson(){\n            return \\Illuminate\\Http\\Request::wantsJson();\n        }\n        \n        /**\n         * Determines whether the current requests accepts a given content type.\n         *\n         * @param string|array $contentTypes\n         * @return bool \n         * @static \n         */\n        public static function accepts($contentTypes){\n            return \\Illuminate\\Http\\Request::accepts($contentTypes);\n        }\n        \n        /**\n         * Return the most suitable content type from the given array based on content negotiation.\n         *\n         * @param string|array $contentTypes\n         * @return string|null \n         * @static \n         */\n        public static function prefers($contentTypes){\n            return \\Illuminate\\Http\\Request::prefers($contentTypes);\n        }\n        \n        /**\n         * Determines whether a request accepts JSON.\n         *\n         * @return bool \n         * @static \n         */\n        public static function acceptsJson(){\n            return \\Illuminate\\Http\\Request::acceptsJson();\n        }\n        \n        /**\n         * Determines whether a request accepts HTML.\n         *\n         * @return bool \n         * @static \n         */\n        public static function acceptsHtml(){\n            return \\Illuminate\\Http\\Request::acceptsHtml();\n        }\n        \n        /**\n         * Get the data format expected in the response.\n         *\n         * @param string $default\n         * @return string \n         * @static \n         */\n        public static function format($default = 'html'){\n            return \\Illuminate\\Http\\Request::format($default);\n        }\n        \n        /**\n         * Get the bearer token from the request headers.\n         *\n         * @return string|null \n         * @static \n         */\n        public static function bearerToken(){\n            return \\Illuminate\\Http\\Request::bearerToken();\n        }\n        \n        /**\n         * Create an Illuminate request from a Symfony instance.\n         *\n         * @param \\Symfony\\Component\\HttpFoundation\\Request $request\n         * @return \\Illuminate\\Http\\Request \n         * @static \n         */\n        public static function createFromBase($request){\n            return \\Illuminate\\Http\\Request::createFromBase($request);\n        }\n        \n        /**\n         * Clones a request and overrides some of its parameters.\n         *\n         * @param array $query The GET parameters\n         * @param array $request The POST parameters\n         * @param array $attributes The request attributes (parameters parsed from the PATH_INFO, ...)\n         * @param array $cookies The COOKIE parameters\n         * @param array $files The FILES parameters\n         * @param array $server The SERVER parameters\n         * @return \\Request The duplicated request\n         * @static \n         */\n        public static function duplicate($query = null, $request = null, $attributes = null, $cookies = null, $files = null, $server = null){\n            return \\Illuminate\\Http\\Request::duplicate($query, $request, $attributes, $cookies, $files, $server);\n        }\n        \n        /**\n         * Get the session associated with the request.\n         *\n         * @return \\Illuminate\\Session\\Store \n         * @throws \\RuntimeException\n         * @static \n         */\n        public static function session(){\n            return \\Illuminate\\Http\\Request::session();\n        }\n        \n        /**\n         * Get the user making the request.\n         *\n         * @param string|null $guard\n         * @return mixed \n         * @static \n         */\n        public static function user($guard = null){\n            return \\Illuminate\\Http\\Request::user($guard);\n        }\n        \n        /**\n         * Get the route handling the request.\n         *\n         * @param string|null $param\n         * @return \\Illuminate\\Routing\\Route|object|string \n         * @static \n         */\n        public static function route($param = null){\n            return \\Illuminate\\Http\\Request::route($param);\n        }\n        \n        /**\n         * Get a unique fingerprint for the request / route / IP address.\n         *\n         * @return string \n         * @throws \\RuntimeException\n         * @static \n         */\n        public static function fingerprint(){\n            return \\Illuminate\\Http\\Request::fingerprint();\n        }\n        \n        /**\n         * Get the user resolver callback.\n         *\n         * @return \\Closure \n         * @static \n         */\n        public static function getUserResolver(){\n            return \\Illuminate\\Http\\Request::getUserResolver();\n        }\n        \n        /**\n         * Set the user resolver callback.\n         *\n         * @param \\Closure $callback\n         * @return $this \n         * @static \n         */\n        public static function setUserResolver($callback){\n            return \\Illuminate\\Http\\Request::setUserResolver($callback);\n        }\n        \n        /**\n         * Get the route resolver callback.\n         *\n         * @return \\Closure \n         * @static \n         */\n        public static function getRouteResolver(){\n            return \\Illuminate\\Http\\Request::getRouteResolver();\n        }\n        \n        /**\n         * Set the route resolver callback.\n         *\n         * @param \\Closure $callback\n         * @return $this \n         * @static \n         */\n        public static function setRouteResolver($callback){\n            return \\Illuminate\\Http\\Request::setRouteResolver($callback);\n        }\n        \n        /**\n         * Get all of the input and files for the request.\n         *\n         * @return array \n         * @static \n         */\n        public static function toArray(){\n            return \\Illuminate\\Http\\Request::toArray();\n        }\n        \n        /**\n         * Determine if the given offset exists.\n         *\n         * @param string $offset\n         * @return bool \n         * @static \n         */\n        public static function offsetExists($offset){\n            return \\Illuminate\\Http\\Request::offsetExists($offset);\n        }\n        \n        /**\n         * Get the value at the given offset.\n         *\n         * @param string $offset\n         * @return mixed \n         * @static \n         */\n        public static function offsetGet($offset){\n            return \\Illuminate\\Http\\Request::offsetGet($offset);\n        }\n        \n        /**\n         * Set the value at the given offset.\n         *\n         * @param string $offset\n         * @param mixed $value\n         * @return void \n         * @static \n         */\n        public static function offsetSet($offset, $value){\n            \\Illuminate\\Http\\Request::offsetSet($offset, $value);\n        }\n        \n        /**\n         * Remove the value at the given offset.\n         *\n         * @param string $offset\n         * @return void \n         * @static \n         */\n        public static function offsetUnset($offset){\n            \\Illuminate\\Http\\Request::offsetUnset($offset);\n        }\n        \n        /**\n         * Sets the parameters for this request.\n         * \n         * This method also re-initializes all properties.\n         *\n         * @param array $query The GET parameters\n         * @param array $request The POST parameters\n         * @param array $attributes The request attributes (parameters parsed from the PATH_INFO, ...)\n         * @param array $cookies The COOKIE parameters\n         * @param array $files The FILES parameters\n         * @param array $server The SERVER parameters\n         * @param string|resource $content The raw body data\n         * @static \n         */\n        public static function initialize($query = array(), $request = array(), $attributes = array(), $cookies = array(), $files = array(), $server = array(), $content = null){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::initialize($query, $request, $attributes, $cookies, $files, $server, $content);\n        }\n        \n        /**\n         * Creates a new request with values from PHP's super globals.\n         *\n         * @return \\Request A new request\n         * @static \n         */\n        public static function createFromGlobals(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::createFromGlobals();\n        }\n        \n        /**\n         * Creates a Request based on a given URI and configuration.\n         * \n         * The information contained in the URI always take precedence\n         * over the other information (server and parameters).\n         *\n         * @param string $uri The URI\n         * @param string $method The HTTP method\n         * @param array $parameters The query (GET) or request (POST) parameters\n         * @param array $cookies The request cookies ($_COOKIE)\n         * @param array $files The request files ($_FILES)\n         * @param array $server The server parameters ($_SERVER)\n         * @param string $content The raw body data\n         * @return \\Request A Request instance\n         * @static \n         */\n        public static function create($uri, $method = 'GET', $parameters = array(), $cookies = array(), $files = array(), $server = array(), $content = null){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::create($uri, $method, $parameters, $cookies, $files, $server, $content);\n        }\n        \n        /**\n         * Sets a callable able to create a Request instance.\n         * \n         * This is mainly useful when you need to override the Request class\n         * to keep BC with an existing system. It should not be used for any\n         * other purpose.\n         *\n         * @param callable|null $callable A PHP callable\n         * @static \n         */\n        public static function setFactory($callable){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::setFactory($callable);\n        }\n        \n        /**\n         * Overrides the PHP global variables according to this request instance.\n         * \n         * It overrides $_GET, $_POST, $_REQUEST, $_SERVER, $_COOKIE.\n         * $_FILES is never overridden, see rfc1867\n         *\n         * @static \n         */\n        public static function overrideGlobals(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::overrideGlobals();\n        }\n        \n        /**\n         * Sets a list of trusted proxies.\n         * \n         * You should only list the reverse proxies that you manage directly.\n         *\n         * @param array $proxies A list of trusted proxies\n         * @static \n         */\n        public static function setTrustedProxies($proxies){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::setTrustedProxies($proxies);\n        }\n        \n        /**\n         * Gets the list of trusted proxies.\n         *\n         * @return array An array of trusted proxies.\n         * @static \n         */\n        public static function getTrustedProxies(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getTrustedProxies();\n        }\n        \n        /**\n         * Sets a list of trusted host patterns.\n         * \n         * You should only list the hosts you manage using regexs.\n         *\n         * @param array $hostPatterns A list of trusted host patterns\n         * @static \n         */\n        public static function setTrustedHosts($hostPatterns){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::setTrustedHosts($hostPatterns);\n        }\n        \n        /**\n         * Gets the list of trusted host patterns.\n         *\n         * @return array An array of trusted host patterns.\n         * @static \n         */\n        public static function getTrustedHosts(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getTrustedHosts();\n        }\n        \n        /**\n         * Sets the name for trusted headers.\n         * \n         * The following header keys are supported:\n         * \n         *  * Request::HEADER_CLIENT_IP:    defaults to X-Forwarded-For   (see getClientIp())\n         *  * Request::HEADER_CLIENT_HOST:  defaults to X-Forwarded-Host  (see getHost())\n         *  * Request::HEADER_CLIENT_PORT:  defaults to X-Forwarded-Port  (see getPort())\n         *  * Request::HEADER_CLIENT_PROTO: defaults to X-Forwarded-Proto (see getScheme() and isSecure())\n         * \n         * Setting an empty value allows to disable the trusted header for the given key.\n         *\n         * @param string $key The header key\n         * @param string $value The header name\n         * @throws \\InvalidArgumentException\n         * @static \n         */\n        public static function setTrustedHeaderName($key, $value){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::setTrustedHeaderName($key, $value);\n        }\n        \n        /**\n         * Gets the trusted proxy header name.\n         *\n         * @param string $key The header key\n         * @return string The header name\n         * @throws \\InvalidArgumentException\n         * @static \n         */\n        public static function getTrustedHeaderName($key){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getTrustedHeaderName($key);\n        }\n        \n        /**\n         * Normalizes a query string.\n         * \n         * It builds a normalized query string, where keys/value pairs are alphabetized,\n         * have consistent escaping and unneeded delimiters are removed.\n         *\n         * @param string $qs Query string\n         * @return string A normalized query string for the Request\n         * @static \n         */\n        public static function normalizeQueryString($qs){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::normalizeQueryString($qs);\n        }\n        \n        /**\n         * Enables support for the _method request parameter to determine the intended HTTP method.\n         * \n         * Be warned that enabling this feature might lead to CSRF issues in your code.\n         * Check that you are using CSRF tokens when required.\n         * If the HTTP method parameter override is enabled, an html-form with method \"POST\" can be altered\n         * and used to send a \"PUT\" or \"DELETE\" request via the _method request parameter.\n         * If these methods are not protected against CSRF, this presents a possible vulnerability.\n         * \n         * The HTTP method can only be overridden when the real HTTP method is POST.\n         *\n         * @static \n         */\n        public static function enableHttpMethodParameterOverride(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::enableHttpMethodParameterOverride();\n        }\n        \n        /**\n         * Checks whether support for the _method request parameter is enabled.\n         *\n         * @return bool True when the _method request parameter is enabled, false otherwise\n         * @static \n         */\n        public static function getHttpMethodParameterOverride(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getHttpMethodParameterOverride();\n        }\n        \n        /**\n         * Gets a \"parameter\" value from any bag.\n         * \n         * This method is mainly useful for libraries that want to provide some flexibility. If you don't need the\n         * flexibility in controllers, it is better to explicitly get request parameters from the appropriate\n         * public property instead (attributes, query, request).\n         * \n         * Order of precedence: PATH (routing placeholders or custom attributes), GET, BODY\n         *\n         * @param string $key the key\n         * @param mixed $default the default value if the parameter key does not exist\n         * @return mixed \n         * @static \n         */\n        public static function get($key, $default = null){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::get($key, $default);\n        }\n        \n        /**\n         * Gets the Session.\n         *\n         * @return \\Symfony\\Component\\HttpFoundation\\SessionInterface|null The session\n         * @static \n         */\n        public static function getSession(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getSession();\n        }\n        \n        /**\n         * Whether the request contains a Session which was started in one of the\n         * previous requests.\n         *\n         * @return bool \n         * @static \n         */\n        public static function hasPreviousSession(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::hasPreviousSession();\n        }\n        \n        /**\n         * Whether the request contains a Session object.\n         * \n         * This method does not give any information about the state of the session object,\n         * like whether the session is started or not. It is just a way to check if this Request\n         * is associated with a Session instance.\n         *\n         * @return bool true when the Request contains a Session object, false otherwise\n         * @static \n         */\n        public static function hasSession(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::hasSession();\n        }\n        \n        /**\n         * Sets the Session.\n         *\n         * @param \\Symfony\\Component\\HttpFoundation\\SessionInterface $session The Session\n         * @static \n         */\n        public static function setSession($session){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::setSession($session);\n        }\n        \n        /**\n         * Returns the client IP addresses.\n         * \n         * In the returned array the most trusted IP address is first, and the\n         * least trusted one last. The \"real\" client IP address is the last one,\n         * but this is also the least trusted one. Trusted proxies are stripped.\n         * \n         * Use this method carefully; you should use getClientIp() instead.\n         *\n         * @return array The client IP addresses\n         * @see getClientIp()\n         * @static \n         */\n        public static function getClientIps(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getClientIps();\n        }\n        \n        /**\n         * Returns the client IP address.\n         * \n         * This method can read the client IP address from the \"X-Forwarded-For\" header\n         * when trusted proxies were set via \"setTrustedProxies()\". The \"X-Forwarded-For\"\n         * header value is a comma+space separated list of IP addresses, the left-most\n         * being the original client, and each successive proxy that passed the request\n         * adding the IP address where it received the request from.\n         * \n         * If your reverse proxy uses a different header name than \"X-Forwarded-For\",\n         * (\"Client-Ip\" for instance), configure it via \"setTrustedHeaderName()\" with\n         * the \"client-ip\" key.\n         *\n         * @return string The client IP address\n         * @see getClientIps()\n         * @see http://en.wikipedia.org/wiki/X-Forwarded-For\n         * @static \n         */\n        public static function getClientIp(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getClientIp();\n        }\n        \n        /**\n         * Returns current script name.\n         *\n         * @return string \n         * @static \n         */\n        public static function getScriptName(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getScriptName();\n        }\n        \n        /**\n         * Returns the path being requested relative to the executed script.\n         * \n         * The path info always starts with a /.\n         * \n         * Suppose this request is instantiated from /mysite on localhost:\n         * \n         *  * http://localhost/mysite              returns an empty string\n         *  * http://localhost/mysite/about        returns '/about'\n         *  * http://localhost/mysite/enco%20ded   returns '/enco%20ded'\n         *  * http://localhost/mysite/about?var=1  returns '/about'\n         *\n         * @return string The raw path (i.e. not urldecoded)\n         * @static \n         */\n        public static function getPathInfo(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getPathInfo();\n        }\n        \n        /**\n         * Returns the root path from which this request is executed.\n         * \n         * Suppose that an index.php file instantiates this request object:\n         * \n         *  * http://localhost/index.php         returns an empty string\n         *  * http://localhost/index.php/page    returns an empty string\n         *  * http://localhost/web/index.php     returns '/web'\n         *  * http://localhost/we%20b/index.php  returns '/we%20b'\n         *\n         * @return string The raw path (i.e. not urldecoded)\n         * @static \n         */\n        public static function getBasePath(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getBasePath();\n        }\n        \n        /**\n         * Returns the root URL from which this request is executed.\n         * \n         * The base URL never ends with a /.\n         * \n         * This is similar to getBasePath(), except that it also includes the\n         * script filename (e.g. index.php) if one exists.\n         *\n         * @return string The raw URL (i.e. not urldecoded)\n         * @static \n         */\n        public static function getBaseUrl(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getBaseUrl();\n        }\n        \n        /**\n         * Gets the request's scheme.\n         *\n         * @return string \n         * @static \n         */\n        public static function getScheme(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getScheme();\n        }\n        \n        /**\n         * Returns the port on which the request is made.\n         * \n         * This method can read the client port from the \"X-Forwarded-Port\" header\n         * when trusted proxies were set via \"setTrustedProxies()\".\n         * \n         * The \"X-Forwarded-Port\" header must contain the client port.\n         * \n         * If your reverse proxy uses a different header name than \"X-Forwarded-Port\",\n         * configure it via \"setTrustedHeaderName()\" with the \"client-port\" key.\n         *\n         * @return string \n         * @static \n         */\n        public static function getPort(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getPort();\n        }\n        \n        /**\n         * Returns the user.\n         *\n         * @return string|null \n         * @static \n         */\n        public static function getUser(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getUser();\n        }\n        \n        /**\n         * Returns the password.\n         *\n         * @return string|null \n         * @static \n         */\n        public static function getPassword(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getPassword();\n        }\n        \n        /**\n         * Gets the user info.\n         *\n         * @return string A user name and, optionally, scheme-specific information about how to gain authorization to access the server\n         * @static \n         */\n        public static function getUserInfo(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getUserInfo();\n        }\n        \n        /**\n         * Returns the HTTP host being requested.\n         * \n         * The port name will be appended to the host if it's non-standard.\n         *\n         * @return string \n         * @static \n         */\n        public static function getHttpHost(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getHttpHost();\n        }\n        \n        /**\n         * Returns the requested URI (path and query string).\n         *\n         * @return string The raw URI (i.e. not URI decoded)\n         * @static \n         */\n        public static function getRequestUri(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getRequestUri();\n        }\n        \n        /**\n         * Gets the scheme and HTTP host.\n         * \n         * If the URL was called with basic authentication, the user\n         * and the password are not added to the generated string.\n         *\n         * @return string The scheme and HTTP host\n         * @static \n         */\n        public static function getSchemeAndHttpHost(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getSchemeAndHttpHost();\n        }\n        \n        /**\n         * Generates a normalized URI (URL) for the Request.\n         *\n         * @return string A normalized URI (URL) for the Request\n         * @see getQueryString()\n         * @static \n         */\n        public static function getUri(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getUri();\n        }\n        \n        /**\n         * Generates a normalized URI for the given path.\n         *\n         * @param string $path A path to use instead of the current one\n         * @return string The normalized URI for the path\n         * @static \n         */\n        public static function getUriForPath($path){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getUriForPath($path);\n        }\n        \n        /**\n         * Returns the path as relative reference from the current Request path.\n         * \n         * Only the URIs path component (no schema, host etc.) is relevant and must be given.\n         * Both paths must be absolute and not contain relative parts.\n         * Relative URLs from one resource to another are useful when generating self-contained downloadable document archives.\n         * Furthermore, they can be used to reduce the link size in documents.\n         * \n         * Example target paths, given a base path of \"/a/b/c/d\":\n         * - \"/a/b/c/d\"     -> \"\"\n         * - \"/a/b/c/\"      -> \"./\"\n         * - \"/a/b/\"        -> \"../\"\n         * - \"/a/b/c/other\" -> \"other\"\n         * - \"/a/x/y\"       -> \"../../x/y\"\n         *\n         * @param string $path The target path\n         * @return string The relative target path\n         * @static \n         */\n        public static function getRelativeUriForPath($path){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getRelativeUriForPath($path);\n        }\n        \n        /**\n         * Generates the normalized query string for the Request.\n         * \n         * It builds a normalized query string, where keys/value pairs are alphabetized\n         * and have consistent escaping.\n         *\n         * @return string|null A normalized query string for the Request\n         * @static \n         */\n        public static function getQueryString(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getQueryString();\n        }\n        \n        /**\n         * Checks whether the request is secure or not.\n         * \n         * This method can read the client protocol from the \"X-Forwarded-Proto\" header\n         * when trusted proxies were set via \"setTrustedProxies()\".\n         * \n         * The \"X-Forwarded-Proto\" header must contain the protocol: \"https\" or \"http\".\n         * \n         * If your reverse proxy uses a different header name than \"X-Forwarded-Proto\"\n         * (\"SSL_HTTPS\" for instance), configure it via \"setTrustedHeaderName()\" with\n         * the \"client-proto\" key.\n         *\n         * @return bool \n         * @static \n         */\n        public static function isSecure(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::isSecure();\n        }\n        \n        /**\n         * Returns the host name.\n         * \n         * This method can read the client host name from the \"X-Forwarded-Host\" header\n         * when trusted proxies were set via \"setTrustedProxies()\".\n         * \n         * The \"X-Forwarded-Host\" header must contain the client host name.\n         * \n         * If your reverse proxy uses a different header name than \"X-Forwarded-Host\",\n         * configure it via \"setTrustedHeaderName()\" with the \"client-host\" key.\n         *\n         * @return string \n         * @throws \\UnexpectedValueException when the host name is invalid\n         * @static \n         */\n        public static function getHost(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getHost();\n        }\n        \n        /**\n         * Sets the request method.\n         *\n         * @param string $method\n         * @static \n         */\n        public static function setMethod($method){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::setMethod($method);\n        }\n        \n        /**\n         * Gets the request \"intended\" method.\n         * \n         * If the X-HTTP-Method-Override header is set, and if the method is a POST,\n         * then it is used to determine the \"real\" intended HTTP method.\n         * \n         * The _method request parameter can also be used to determine the HTTP method,\n         * but only if enableHttpMethodParameterOverride() has been called.\n         * \n         * The method is always an uppercased string.\n         *\n         * @return string The request method\n         * @see getRealMethod()\n         * @static \n         */\n        public static function getMethod(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getMethod();\n        }\n        \n        /**\n         * Gets the \"real\" request method.\n         *\n         * @return string The request method\n         * @see getMethod()\n         * @static \n         */\n        public static function getRealMethod(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getRealMethod();\n        }\n        \n        /**\n         * Gets the mime type associated with the format.\n         *\n         * @param string $format The format\n         * @return string The associated mime type (null if not found)\n         * @static \n         */\n        public static function getMimeType($format){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getMimeType($format);\n        }\n        \n        /**\n         * Gets the format associated with the mime type.\n         *\n         * @param string $mimeType The associated mime type\n         * @return string|null The format (null if not found)\n         * @static \n         */\n        public static function getFormat($mimeType){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getFormat($mimeType);\n        }\n        \n        /**\n         * Associates a format with mime types.\n         *\n         * @param string $format The format\n         * @param string|array $mimeTypes The associated mime types (the preferred one must be the first as it will be used as the content type)\n         * @static \n         */\n        public static function setFormat($format, $mimeTypes){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::setFormat($format, $mimeTypes);\n        }\n        \n        /**\n         * Gets the request format.\n         * \n         * Here is the process to determine the format:\n         * \n         *  * format defined by the user (with setRequestFormat())\n         *  * _format request attribute\n         *  * $default\n         *\n         * @param string $default The default format\n         * @return string The request format\n         * @static \n         */\n        public static function getRequestFormat($default = 'html'){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getRequestFormat($default);\n        }\n        \n        /**\n         * Sets the request format.\n         *\n         * @param string $format The request format.\n         * @static \n         */\n        public static function setRequestFormat($format){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::setRequestFormat($format);\n        }\n        \n        /**\n         * Gets the format associated with the request.\n         *\n         * @return string|null The format (null if no content type is present)\n         * @static \n         */\n        public static function getContentType(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getContentType();\n        }\n        \n        /**\n         * Sets the default locale.\n         *\n         * @param string $locale\n         * @static \n         */\n        public static function setDefaultLocale($locale){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::setDefaultLocale($locale);\n        }\n        \n        /**\n         * Get the default locale.\n         *\n         * @return string \n         * @static \n         */\n        public static function getDefaultLocale(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getDefaultLocale();\n        }\n        \n        /**\n         * Sets the locale.\n         *\n         * @param string $locale\n         * @static \n         */\n        public static function setLocale($locale){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::setLocale($locale);\n        }\n        \n        /**\n         * Get the locale.\n         *\n         * @return string \n         * @static \n         */\n        public static function getLocale(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getLocale();\n        }\n        \n        /**\n         * Checks if the request method is of specified type.\n         *\n         * @param string $method Uppercase request method (GET, POST etc).\n         * @return bool \n         * @static \n         */\n        public static function isMethod($method){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::isMethod($method);\n        }\n        \n        /**\n         * Checks whether the method is safe or not.\n         *\n         * @return bool \n         * @static \n         */\n        public static function isMethodSafe(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::isMethodSafe();\n        }\n        \n        /**\n         * Returns the request body content.\n         *\n         * @param bool $asResource If true, a resource will be returned\n         * @return string|resource The request body content or a resource to read the body stream.\n         * @throws \\LogicException\n         * @static \n         */\n        public static function getContent($asResource = false){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getContent($asResource);\n        }\n        \n        /**\n         * Gets the Etags.\n         *\n         * @return array The entity tags\n         * @static \n         */\n        public static function getETags(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getETags();\n        }\n        \n        /**\n         * \n         *\n         * @return bool \n         * @static \n         */\n        public static function isNoCache(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::isNoCache();\n        }\n        \n        /**\n         * Returns the preferred language.\n         *\n         * @param array $locales An array of ordered available locales\n         * @return string|null The preferred locale\n         * @static \n         */\n        public static function getPreferredLanguage($locales = null){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getPreferredLanguage($locales);\n        }\n        \n        /**\n         * Gets a list of languages acceptable by the client browser.\n         *\n         * @return array Languages ordered in the user browser preferences\n         * @static \n         */\n        public static function getLanguages(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getLanguages();\n        }\n        \n        /**\n         * Gets a list of charsets acceptable by the client browser.\n         *\n         * @return array List of charsets in preferable order\n         * @static \n         */\n        public static function getCharsets(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getCharsets();\n        }\n        \n        /**\n         * Gets a list of encodings acceptable by the client browser.\n         *\n         * @return array List of encodings in preferable order\n         * @static \n         */\n        public static function getEncodings(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getEncodings();\n        }\n        \n        /**\n         * Gets a list of content types acceptable by the client browser.\n         *\n         * @return array List of content types in preferable order\n         * @static \n         */\n        public static function getAcceptableContentTypes(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::getAcceptableContentTypes();\n        }\n        \n        /**\n         * Returns true if the request is a XMLHttpRequest.\n         * \n         * It works if your JavaScript library sets an X-Requested-With HTTP header.\n         * It is known to work with common JavaScript frameworks:\n         *\n         * @link http://en.wikipedia.org/wiki/List_of_Ajax_frameworks#JavaScript\n         * @return bool true if the request is an XMLHttpRequest, false otherwise\n         * @static \n         */\n        public static function isXmlHttpRequest(){\n            //Method inherited from \\Symfony\\Component\\HttpFoundation\\Request            \n            return \\Illuminate\\Http\\Request::isXmlHttpRequest();\n        }\n        \n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param callable $macro\n         * @return void \n         * @static \n         */\n        public static function macro($name, $macro){\n            \\Illuminate\\Http\\Request::macro($name, $macro);\n        }\n        \n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */\n        public static function hasMacro($name){\n            return \\Illuminate\\Http\\Request::hasMacro($name);\n        }\n        \n    }\n\n\n    class Response extends \\Illuminate\\Support\\Facades\\Response{\n        \n        /**\n         * Return a new response from the application.\n         *\n         * @param string $content\n         * @param int $status\n         * @param array $headers\n         * @return \\Illuminate\\Http\\Response \n         * @static \n         */\n        public static function make($content = '', $status = 200, $headers = array()){\n            return \\Illuminate\\Routing\\ResponseFactory::make($content, $status, $headers);\n        }\n        \n        /**\n         * Return a new view response from the application.\n         *\n         * @param string $view\n         * @param array $data\n         * @param int $status\n         * @param array $headers\n         * @return \\Illuminate\\Http\\Response \n         * @static \n         */\n        public static function view($view, $data = array(), $status = 200, $headers = array()){\n            return \\Illuminate\\Routing\\ResponseFactory::view($view, $data, $status, $headers);\n        }\n        \n        /**\n         * Return a new JSON response from the application.\n         *\n         * @param string|array $data\n         * @param int $status\n         * @param array $headers\n         * @param int $options\n         * @return \\Illuminate\\Http\\JsonResponse \n         * @static \n         */\n        public static function json($data = array(), $status = 200, $headers = array(), $options = 0){\n            return \\Illuminate\\Routing\\ResponseFactory::json($data, $status, $headers, $options);\n        }\n        \n        /**\n         * Return a new JSONP response from the application.\n         *\n         * @param string $callback\n         * @param string|array $data\n         * @param int $status\n         * @param array $headers\n         * @param int $options\n         * @return \\Illuminate\\Http\\JsonResponse \n         * @static \n         */\n        public static function jsonp($callback, $data = array(), $status = 200, $headers = array(), $options = 0){\n            return \\Illuminate\\Routing\\ResponseFactory::jsonp($callback, $data, $status, $headers, $options);\n        }\n        \n        /**\n         * Return a new streamed response from the application.\n         *\n         * @param \\Closure $callback\n         * @param int $status\n         * @param array $headers\n         * @return \\Symfony\\Component\\HttpFoundation\\StreamedResponse \n         * @static \n         */\n        public static function stream($callback, $status = 200, $headers = array()){\n            return \\Illuminate\\Routing\\ResponseFactory::stream($callback, $status, $headers);\n        }\n        \n        /**\n         * Create a new file download response.\n         *\n         * @param \\SplFileInfo|string $file\n         * @param string $name\n         * @param array $headers\n         * @param string|null $disposition\n         * @return \\Symfony\\Component\\HttpFoundation\\BinaryFileResponse \n         * @static \n         */\n        public static function download($file, $name = null, $headers = array(), $disposition = 'attachment'){\n            return \\Illuminate\\Routing\\ResponseFactory::download($file, $name, $headers, $disposition);\n        }\n        \n        /**\n         * Return the raw contents of a binary file.\n         *\n         * @param \\SplFileInfo|string $file\n         * @param array $headers\n         * @return \\Symfony\\Component\\HttpFoundation\\BinaryFileResponse \n         * @static \n         */\n        public static function file($file, $headers = array()){\n            return \\Illuminate\\Routing\\ResponseFactory::file($file, $headers);\n        }\n        \n        /**\n         * Create a new redirect response to the given path.\n         *\n         * @param string $path\n         * @param int $status\n         * @param array $headers\n         * @param bool|null $secure\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */\n        public static function redirectTo($path, $status = 302, $headers = array(), $secure = null){\n            return \\Illuminate\\Routing\\ResponseFactory::redirectTo($path, $status, $headers, $secure);\n        }\n        \n        /**\n         * Create a new redirect response to a named route.\n         *\n         * @param string $route\n         * @param array $parameters\n         * @param int $status\n         * @param array $headers\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */\n        public static function redirectToRoute($route, $parameters = array(), $status = 302, $headers = array()){\n            return \\Illuminate\\Routing\\ResponseFactory::redirectToRoute($route, $parameters, $status, $headers);\n        }\n        \n        /**\n         * Create a new redirect response to a controller action.\n         *\n         * @param string $action\n         * @param array $parameters\n         * @param int $status\n         * @param array $headers\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */\n        public static function redirectToAction($action, $parameters = array(), $status = 302, $headers = array()){\n            return \\Illuminate\\Routing\\ResponseFactory::redirectToAction($action, $parameters, $status, $headers);\n        }\n        \n        /**\n         * Create a new redirect response, while putting the current URL in the session.\n         *\n         * @param string $path\n         * @param int $status\n         * @param array $headers\n         * @param bool|null $secure\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */\n        public static function redirectGuest($path, $status = 302, $headers = array(), $secure = null){\n            return \\Illuminate\\Routing\\ResponseFactory::redirectGuest($path, $status, $headers, $secure);\n        }\n        \n        /**\n         * Create a new redirect response to the previously intended location.\n         *\n         * @param string $default\n         * @param int $status\n         * @param array $headers\n         * @param bool|null $secure\n         * @return \\Illuminate\\Http\\RedirectResponse \n         * @static \n         */\n        public static function redirectToIntended($default = '/', $status = 302, $headers = array(), $secure = null){\n            return \\Illuminate\\Routing\\ResponseFactory::redirectToIntended($default, $status, $headers, $secure);\n        }\n        \n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param callable $macro\n         * @return void \n         * @static \n         */\n        public static function macro($name, $macro){\n            \\Illuminate\\Routing\\ResponseFactory::macro($name, $macro);\n        }\n        \n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */\n        public static function hasMacro($name){\n            return \\Illuminate\\Routing\\ResponseFactory::hasMacro($name);\n        }\n        \n    }\n\n\n    class Route extends \\Illuminate\\Support\\Facades\\Route{\n        \n        /**\n         * Register a new GET route with the router.\n         *\n         * @param string $uri\n         * @param \\Closure|array|string|null $action\n         * @return \\Illuminate\\Routing\\Route \n         * @static \n         */\n        public static function get($uri, $action = null){\n            return \\Illuminate\\Routing\\Router::get($uri, $action);\n        }\n        \n        /**\n         * Register a new POST route with the router.\n         *\n         * @param string $uri\n         * @param \\Closure|array|string|null $action\n         * @return \\Illuminate\\Routing\\Route \n         * @static \n         */\n        public static function post($uri, $action = null){\n            return \\Illuminate\\Routing\\Router::post($uri, $action);\n        }\n        \n        /**\n         * Register a new PUT route with the router.\n         *\n         * @param string $uri\n         * @param \\Closure|array|string|null $action\n         * @return \\Illuminate\\Routing\\Route \n         * @static \n         */\n        public static function put($uri, $action = null){\n            return \\Illuminate\\Routing\\Router::put($uri, $action);\n        }\n        \n        /**\n         * Register a new PATCH route with the router.\n         *\n         * @param string $uri\n         * @param \\Closure|array|string|null $action\n         * @return \\Illuminate\\Routing\\Route \n         * @static \n         */\n        public static function patch($uri, $action = null){\n            return \\Illuminate\\Routing\\Router::patch($uri, $action);\n        }\n        \n        /**\n         * Register a new DELETE route with the router.\n         *\n         * @param string $uri\n         * @param \\Closure|array|string|null $action\n         * @return \\Illuminate\\Routing\\Route \n         * @static \n         */\n        public static function delete($uri, $action = null){\n            return \\Illuminate\\Routing\\Router::delete($uri, $action);\n        }\n        \n        /**\n         * Register a new OPTIONS route with the router.\n         *\n         * @param string $uri\n         * @param \\Closure|array|string|null $action\n         * @return \\Illuminate\\Routing\\Route \n         * @static \n         */\n        public static function options($uri, $action = null){\n            return \\Illuminate\\Routing\\Router::options($uri, $action);\n        }\n        \n        /**\n         * Register a new route responding to all verbs.\n         *\n         * @param string $uri\n         * @param \\Closure|array|string|null $action\n         * @return \\Illuminate\\Routing\\Route \n         * @static \n         */\n        public static function any($uri, $action = null){\n            return \\Illuminate\\Routing\\Router::any($uri, $action);\n        }\n        \n        /**\n         * Register a new route with the given verbs.\n         *\n         * @param array|string $methods\n         * @param string $uri\n         * @param \\Closure|array|string|null $action\n         * @return \\Illuminate\\Routing\\Route \n         * @static \n         */\n        public static function match($methods, $uri, $action = null){\n            return \\Illuminate\\Routing\\Router::match($methods, $uri, $action);\n        }\n        \n        /**\n         * Register an array of controllers with wildcard routing.\n         *\n         * @param array $controllers\n         * @return void \n         * @deprecated since version 5.2.\n         * @static \n         */\n        public static function controllers($controllers){\n            \\Illuminate\\Routing\\Router::controllers($controllers);\n        }\n        \n        /**\n         * Route a controller to a URI with wildcard routing.\n         *\n         * @param string $uri\n         * @param string $controller\n         * @param array $names\n         * @return void \n         * @deprecated since version 5.2.\n         * @static \n         */\n        public static function controller($uri, $controller, $names = array()){\n            \\Illuminate\\Routing\\Router::controller($uri, $controller, $names);\n        }\n        \n        /**\n         * Set the unmapped global resource parameters to singular.\n         *\n         * @return void \n         * @static \n         */\n        public static function singularResourceParameters(){\n            \\Illuminate\\Routing\\Router::singularResourceParameters();\n        }\n        \n        /**\n         * Set the global resource parameter mapping.\n         *\n         * @param array $parameters\n         * @return void \n         * @static \n         */\n        public static function resourceParameters($parameters = array()){\n            \\Illuminate\\Routing\\Router::resourceParameters($parameters);\n        }\n        \n        /**\n         * Register an array of resource controllers.\n         *\n         * @param array $resources\n         * @return void \n         * @static \n         */\n        public static function resources($resources){\n            \\Illuminate\\Routing\\Router::resources($resources);\n        }\n        \n        /**\n         * Route a resource to a controller.\n         *\n         * @param string $name\n         * @param string $controller\n         * @param array $options\n         * @return void \n         * @static \n         */\n        public static function resource($name, $controller, $options = array()){\n            \\Illuminate\\Routing\\Router::resource($name, $controller, $options);\n        }\n        \n        /**\n         * Register the typical authentication routes for an application.\n         *\n         * @return void \n         * @static \n         */\n        public static function auth(){\n            \\Illuminate\\Routing\\Router::auth();\n        }\n        \n        /**\n         * Create a route group with shared attributes.\n         *\n         * @param array $attributes\n         * @param \\Closure $callback\n         * @return void \n         * @static \n         */\n        public static function group($attributes, $callback){\n            \\Illuminate\\Routing\\Router::group($attributes, $callback);\n        }\n        \n        /**\n         * Merge the given array with the last group stack.\n         *\n         * @param array $new\n         * @return array \n         * @static \n         */\n        public static function mergeWithLastGroup($new){\n            return \\Illuminate\\Routing\\Router::mergeWithLastGroup($new);\n        }\n        \n        /**\n         * Merge the given group attributes.\n         *\n         * @param array $new\n         * @param array $old\n         * @return array \n         * @static \n         */\n        public static function mergeGroup($new, $old){\n            return \\Illuminate\\Routing\\Router::mergeGroup($new, $old);\n        }\n        \n        /**\n         * Get the prefix from the last group on the stack.\n         *\n         * @return string \n         * @static \n         */\n        public static function getLastGroupPrefix(){\n            return \\Illuminate\\Routing\\Router::getLastGroupPrefix();\n        }\n        \n        /**\n         * Dispatch the request to the application.\n         *\n         * @param \\Illuminate\\Http\\Request $request\n         * @return \\Illuminate\\Http\\Response \n         * @static \n         */\n        public static function dispatch($request){\n            return \\Illuminate\\Routing\\Router::dispatch($request);\n        }\n        \n        /**\n         * Dispatch the request to a route and return the response.\n         *\n         * @param \\Illuminate\\Http\\Request $request\n         * @return mixed \n         * @static \n         */\n        public static function dispatchToRoute($request){\n            return \\Illuminate\\Routing\\Router::dispatchToRoute($request);\n        }\n        \n        /**\n         * Gather the middleware for the given route.\n         *\n         * @param \\Illuminate\\Routing\\Route $route\n         * @return array \n         * @static \n         */\n        public static function gatherRouteMiddlewares($route){\n            return \\Illuminate\\Routing\\Router::gatherRouteMiddlewares($route);\n        }\n        \n        /**\n         * Resolve the middleware name to a class name(s) preserving passed parameters.\n         *\n         * @param string $name\n         * @return string|array \n         * @static \n         */\n        public static function resolveMiddlewareClassName($name){\n            return \\Illuminate\\Routing\\Router::resolveMiddlewareClassName($name);\n        }\n        \n        /**\n         * Register a route matched event listener.\n         *\n         * @param string|callable $callback\n         * @return void \n         * @static \n         */\n        public static function matched($callback){\n            \\Illuminate\\Routing\\Router::matched($callback);\n        }\n        \n        /**\n         * Get all of the defined middleware short-hand names.\n         *\n         * @return array \n         * @static \n         */\n        public static function getMiddleware(){\n            return \\Illuminate\\Routing\\Router::getMiddleware();\n        }\n        \n        /**\n         * Register a short-hand name for a middleware.\n         *\n         * @param string $name\n         * @param string $class\n         * @return $this \n         * @static \n         */\n        public static function middleware($name, $class){\n            return \\Illuminate\\Routing\\Router::middleware($name, $class);\n        }\n        \n        /**\n         * Register a group of middleware.\n         *\n         * @param string $name\n         * @param array $middleware\n         * @return $this \n         * @static \n         */\n        public static function middlewareGroup($name, $middleware){\n            return \\Illuminate\\Routing\\Router::middlewareGroup($name, $middleware);\n        }\n        \n        /**\n         * Add a middleware to the beginning of a middleware group.\n         * \n         * If the middleware is already in the group, it will not be added again.\n         *\n         * @param string $group\n         * @param string $middleware\n         * @return $this \n         * @static \n         */\n        public static function prependMiddlewareToGroup($group, $middleware){\n            return \\Illuminate\\Routing\\Router::prependMiddlewareToGroup($group, $middleware);\n        }\n        \n        /**\n         * Add a middleware to the end of a middleware group.\n         * \n         * If the middleware is already in the group, it will not be added again.\n         *\n         * @param string $group\n         * @param string $middleware\n         * @return $this \n         * @static \n         */\n        public static function pushMiddlewareToGroup($group, $middleware){\n            return \\Illuminate\\Routing\\Router::pushMiddlewareToGroup($group, $middleware);\n        }\n        \n        /**\n         * Register a model binder for a wildcard.\n         *\n         * @param string $key\n         * @param string $class\n         * @param \\Closure|null $callback\n         * @return void \n         * @throws \\Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException\n         * @static \n         */\n        public static function model($key, $class, $callback = null){\n            \\Illuminate\\Routing\\Router::model($key, $class, $callback);\n        }\n        \n        /**\n         * Add a new route parameter binder.\n         *\n         * @param string $key\n         * @param string|callable $binder\n         * @return void \n         * @static \n         */\n        public static function bind($key, $binder){\n            \\Illuminate\\Routing\\Router::bind($key, $binder);\n        }\n        \n        /**\n         * Create a class based binding using the IoC container.\n         *\n         * @param string $binding\n         * @return \\Closure \n         * @static \n         */\n        public static function createClassBinding($binding){\n            return \\Illuminate\\Routing\\Router::createClassBinding($binding);\n        }\n        \n        /**\n         * Set a global where pattern on all routes.\n         *\n         * @param string $key\n         * @param string $pattern\n         * @return void \n         * @static \n         */\n        public static function pattern($key, $pattern){\n            \\Illuminate\\Routing\\Router::pattern($key, $pattern);\n        }\n        \n        /**\n         * Set a group of global where patterns on all routes.\n         *\n         * @param array $patterns\n         * @return void \n         * @static \n         */\n        public static function patterns($patterns){\n            \\Illuminate\\Routing\\Router::patterns($patterns);\n        }\n        \n        /**\n         * Create a response instance from the given value.\n         *\n         * @param \\Symfony\\Component\\HttpFoundation\\Request $request\n         * @param mixed $response\n         * @return \\Illuminate\\Http\\Response \n         * @static \n         */\n        public static function prepareResponse($request, $response){\n            return \\Illuminate\\Routing\\Router::prepareResponse($request, $response);\n        }\n        \n        /**\n         * Determine if the router currently has a group stack.\n         *\n         * @return bool \n         * @static \n         */\n        public static function hasGroupStack(){\n            return \\Illuminate\\Routing\\Router::hasGroupStack();\n        }\n        \n        /**\n         * Get the current group stack for the router.\n         *\n         * @return array \n         * @static \n         */\n        public static function getGroupStack(){\n            return \\Illuminate\\Routing\\Router::getGroupStack();\n        }\n        \n        /**\n         * Get a route parameter for the current route.\n         *\n         * @param string $key\n         * @param string $default\n         * @return mixed \n         * @static \n         */\n        public static function input($key, $default = null){\n            return \\Illuminate\\Routing\\Router::input($key, $default);\n        }\n        \n        /**\n         * Get the currently dispatched route instance.\n         *\n         * @return \\Illuminate\\Routing\\Route \n         * @static \n         */\n        public static function getCurrentRoute(){\n            return \\Illuminate\\Routing\\Router::getCurrentRoute();\n        }\n        \n        /**\n         * Get the currently dispatched route instance.\n         *\n         * @return \\Illuminate\\Routing\\Route \n         * @static \n         */\n        public static function current(){\n            return \\Illuminate\\Routing\\Router::current();\n        }\n        \n        /**\n         * Check if a route with the given name exists.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */\n        public static function has($name){\n            return \\Illuminate\\Routing\\Router::has($name);\n        }\n        \n        /**\n         * Get the current route name.\n         *\n         * @return string|null \n         * @static \n         */\n        public static function currentRouteName(){\n            return \\Illuminate\\Routing\\Router::currentRouteName();\n        }\n        \n        /**\n         * Alias for the \"currentRouteName\" method.\n         *\n         * @param mixed  string\n         * @return bool \n         * @static \n         */\n        public static function is(){\n            return \\Illuminate\\Routing\\Router::is();\n        }\n        \n        /**\n         * Determine if the current route matches a given name.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */\n        public static function currentRouteNamed($name){\n            return \\Illuminate\\Routing\\Router::currentRouteNamed($name);\n        }\n        \n        /**\n         * Get the current route action.\n         *\n         * @return string|null \n         * @static \n         */\n        public static function currentRouteAction(){\n            return \\Illuminate\\Routing\\Router::currentRouteAction();\n        }\n        \n        /**\n         * Alias for the \"currentRouteUses\" method.\n         *\n         * @param mixed  string\n         * @return bool \n         * @static \n         */\n        public static function uses(){\n            return \\Illuminate\\Routing\\Router::uses();\n        }\n        \n        /**\n         * Determine if the current route action matches a given action.\n         *\n         * @param string $action\n         * @return bool \n         * @static \n         */\n        public static function currentRouteUses($action){\n            return \\Illuminate\\Routing\\Router::currentRouteUses($action);\n        }\n        \n        /**\n         * Get the request currently being dispatched.\n         *\n         * @return \\Illuminate\\Http\\Request \n         * @static \n         */\n        public static function getCurrentRequest(){\n            return \\Illuminate\\Routing\\Router::getCurrentRequest();\n        }\n        \n        /**\n         * Get the underlying route collection.\n         *\n         * @return \\Illuminate\\Routing\\RouteCollection \n         * @static \n         */\n        public static function getRoutes(){\n            return \\Illuminate\\Routing\\Router::getRoutes();\n        }\n        \n        /**\n         * Set the route collection instance.\n         *\n         * @param \\Illuminate\\Routing\\RouteCollection $routes\n         * @return void \n         * @static \n         */\n        public static function setRoutes($routes){\n            \\Illuminate\\Routing\\Router::setRoutes($routes);\n        }\n        \n        /**\n         * Get the global \"where\" patterns.\n         *\n         * @return array \n         * @static \n         */\n        public static function getPatterns(){\n            return \\Illuminate\\Routing\\Router::getPatterns();\n        }\n        \n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param callable $macro\n         * @return void \n         * @static \n         */\n        public static function macro($name, $macro){\n            \\Illuminate\\Routing\\Router::macro($name, $macro);\n        }\n        \n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */\n        public static function hasMacro($name){\n            return \\Illuminate\\Routing\\Router::hasMacro($name);\n        }\n        \n    }\n\n\n    class Schema extends \\Illuminate\\Support\\Facades\\Schema{\n        \n        /**\n         * Determine if the given table exists.\n         *\n         * @param string $table\n         * @return bool \n         * @static \n         */\n        public static function hasTable($table){\n            return \\Illuminate\\Database\\Schema\\MySqlBuilder::hasTable($table);\n        }\n        \n        /**\n         * Get the column listing for a given table.\n         *\n         * @param string $table\n         * @return array \n         * @static \n         */\n        public static function getColumnListing($table){\n            return \\Illuminate\\Database\\Schema\\MySqlBuilder::getColumnListing($table);\n        }\n        \n        /**\n         * Determine if the given table has a given column.\n         *\n         * @param string $table\n         * @param string $column\n         * @return bool \n         * @static \n         */\n        public static function hasColumn($table, $column){\n            //Method inherited from \\Illuminate\\Database\\Schema\\Builder            \n            return \\Illuminate\\Database\\Schema\\MySqlBuilder::hasColumn($table, $column);\n        }\n        \n        /**\n         * Determine if the given table has given columns.\n         *\n         * @param string $table\n         * @param array $columns\n         * @return bool \n         * @static \n         */\n        public static function hasColumns($table, $columns){\n            //Method inherited from \\Illuminate\\Database\\Schema\\Builder            \n            return \\Illuminate\\Database\\Schema\\MySqlBuilder::hasColumns($table, $columns);\n        }\n        \n        /**\n         * Get the data type for the given column name.\n         *\n         * @param string $table\n         * @param string $column\n         * @return string \n         * @static \n         */\n        public static function getColumnType($table, $column){\n            //Method inherited from \\Illuminate\\Database\\Schema\\Builder            \n            return \\Illuminate\\Database\\Schema\\MySqlBuilder::getColumnType($table, $column);\n        }\n        \n        /**\n         * Modify a table on the schema.\n         *\n         * @param string $table\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Database\\Schema\\Blueprint \n         * @static \n         */\n        public static function table($table, $callback){\n            //Method inherited from \\Illuminate\\Database\\Schema\\Builder            \n            return \\Illuminate\\Database\\Schema\\MySqlBuilder::table($table, $callback);\n        }\n        \n        /**\n         * Create a new table on the schema.\n         *\n         * @param string $table\n         * @param \\Closure $callback\n         * @return \\Illuminate\\Database\\Schema\\Blueprint \n         * @static \n         */\n        public static function create($table, $callback){\n            //Method inherited from \\Illuminate\\Database\\Schema\\Builder            \n            return \\Illuminate\\Database\\Schema\\MySqlBuilder::create($table, $callback);\n        }\n        \n        /**\n         * Drop a table from the schema.\n         *\n         * @param string $table\n         * @return \\Illuminate\\Database\\Schema\\Blueprint \n         * @static \n         */\n        public static function drop($table){\n            //Method inherited from \\Illuminate\\Database\\Schema\\Builder            \n            return \\Illuminate\\Database\\Schema\\MySqlBuilder::drop($table);\n        }\n        \n        /**\n         * Drop a table from the schema if it exists.\n         *\n         * @param string $table\n         * @return \\Illuminate\\Database\\Schema\\Blueprint \n         * @static \n         */\n        public static function dropIfExists($table){\n            //Method inherited from \\Illuminate\\Database\\Schema\\Builder            \n            return \\Illuminate\\Database\\Schema\\MySqlBuilder::dropIfExists($table);\n        }\n        \n        /**\n         * Rename a table on the schema.\n         *\n         * @param string $from\n         * @param string $to\n         * @return \\Illuminate\\Database\\Schema\\Blueprint \n         * @static \n         */\n        public static function rename($from, $to){\n            //Method inherited from \\Illuminate\\Database\\Schema\\Builder            \n            return \\Illuminate\\Database\\Schema\\MySqlBuilder::rename($from, $to);\n        }\n        \n        /**\n         * Enable foreign key constraints.\n         *\n         * @return bool \n         * @static \n         */\n        public static function enableForeignKeyConstraints(){\n            //Method inherited from \\Illuminate\\Database\\Schema\\Builder            \n            return \\Illuminate\\Database\\Schema\\MySqlBuilder::enableForeignKeyConstraints();\n        }\n        \n        /**\n         * Disable foreign key constraints.\n         *\n         * @return bool \n         * @static \n         */\n        public static function disableForeignKeyConstraints(){\n            //Method inherited from \\Illuminate\\Database\\Schema\\Builder            \n            return \\Illuminate\\Database\\Schema\\MySqlBuilder::disableForeignKeyConstraints();\n        }\n        \n        /**\n         * Get the database connection instance.\n         *\n         * @return \\Illuminate\\Database\\Connection \n         * @static \n         */\n        public static function getConnection(){\n            //Method inherited from \\Illuminate\\Database\\Schema\\Builder            \n            return \\Illuminate\\Database\\Schema\\MySqlBuilder::getConnection();\n        }\n        \n        /**\n         * Set the database connection instance.\n         *\n         * @param \\Illuminate\\Database\\Connection $connection\n         * @return $this \n         * @static \n         */\n        public static function setConnection($connection){\n            //Method inherited from \\Illuminate\\Database\\Schema\\Builder            \n            return \\Illuminate\\Database\\Schema\\MySqlBuilder::setConnection($connection);\n        }\n        \n        /**\n         * Set the Schema Blueprint resolver callback.\n         *\n         * @param \\Closure $resolver\n         * @return void \n         * @static \n         */\n        public static function blueprintResolver($resolver){\n            //Method inherited from \\Illuminate\\Database\\Schema\\Builder            \n            \\Illuminate\\Database\\Schema\\MySqlBuilder::blueprintResolver($resolver);\n        }\n        \n    }\n\n\n    class Session extends \\Illuminate\\Support\\Facades\\Session{\n        \n        /**\n         * Get the session configuration.\n         *\n         * @return array \n         * @static \n         */\n        public static function getSessionConfig(){\n            return \\Illuminate\\Session\\SessionManager::getSessionConfig();\n        }\n        \n        /**\n         * Get the default session driver name.\n         *\n         * @return string \n         * @static \n         */\n        public static function getDefaultDriver(){\n            return \\Illuminate\\Session\\SessionManager::getDefaultDriver();\n        }\n        \n        /**\n         * Set the default session driver name.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */\n        public static function setDefaultDriver($name){\n            \\Illuminate\\Session\\SessionManager::setDefaultDriver($name);\n        }\n        \n        /**\n         * Get a driver instance.\n         *\n         * @param string $driver\n         * @return mixed \n         * @static \n         */\n        public static function driver($driver = null){\n            //Method inherited from \\Illuminate\\Support\\Manager            \n            return \\Illuminate\\Session\\SessionManager::driver($driver);\n        }\n        \n        /**\n         * Register a custom driver creator Closure.\n         *\n         * @param string $driver\n         * @param \\Closure $callback\n         * @return $this \n         * @static \n         */\n        public static function extend($driver, $callback){\n            //Method inherited from \\Illuminate\\Support\\Manager            \n            return \\Illuminate\\Session\\SessionManager::extend($driver, $callback);\n        }\n        \n        /**\n         * Get all of the created \"drivers\".\n         *\n         * @return array \n         * @static \n         */\n        public static function getDrivers(){\n            //Method inherited from \\Illuminate\\Support\\Manager            \n            return \\Illuminate\\Session\\SessionManager::getDrivers();\n        }\n        \n        /**\n         * Starts the session storage.\n         *\n         * @return bool True if session started.\n         * @throws \\RuntimeException If session fails to start.\n         * @static \n         */\n        public static function start(){\n            return \\Illuminate\\Session\\Store::start();\n        }\n        \n        /**\n         * Returns the session ID.\n         *\n         * @return string The session ID.\n         * @static \n         */\n        public static function getId(){\n            return \\Illuminate\\Session\\Store::getId();\n        }\n        \n        /**\n         * Sets the session ID.\n         *\n         * @param string $id\n         * @static \n         */\n        public static function setId($id){\n            return \\Illuminate\\Session\\Store::setId($id);\n        }\n        \n        /**\n         * Determine if this is a valid session ID.\n         *\n         * @param string $id\n         * @return bool \n         * @static \n         */\n        public static function isValidId($id){\n            return \\Illuminate\\Session\\Store::isValidId($id);\n        }\n        \n        /**\n         * Returns the session name.\n         *\n         * @return mixed The session name.\n         * @static \n         */\n        public static function getName(){\n            return \\Illuminate\\Session\\Store::getName();\n        }\n        \n        /**\n         * Sets the session name.\n         *\n         * @param string $name\n         * @static \n         */\n        public static function setName($name){\n            return \\Illuminate\\Session\\Store::setName($name);\n        }\n        \n        /**\n         * Invalidates the current session.\n         * \n         * Clears all session attributes and flashes and regenerates the\n         * session and deletes the old session from persistence.\n         *\n         * @param int $lifetime Sets the cookie lifetime for the session cookie. A null value\n         *                      will leave the system settings unchanged, 0 sets the cookie\n         *                      to expire with browser session. Time is in seconds, and is\n         *                      not a Unix timestamp.\n         * @return bool True if session invalidated, false if error.\n         * @static \n         */\n        public static function invalidate($lifetime = null){\n            return \\Illuminate\\Session\\Store::invalidate($lifetime);\n        }\n        \n        /**\n         * Migrates the current session to a new session id while maintaining all\n         * session attributes.\n         *\n         * @param bool $destroy Whether to delete the old session or leave it to garbage collection.\n         * @param int $lifetime Sets the cookie lifetime for the session cookie. A null value\n         *                       will leave the system settings unchanged, 0 sets the cookie\n         *                       to expire with browser session. Time is in seconds, and is\n         *                       not a Unix timestamp.\n         * @return bool True if session migrated, false if error.\n         * @static \n         */\n        public static function migrate($destroy = false, $lifetime = null){\n            return \\Illuminate\\Session\\Store::migrate($destroy, $lifetime);\n        }\n        \n        /**\n         * Generate a new session identifier.\n         *\n         * @param bool $destroy\n         * @return bool \n         * @static \n         */\n        public static function regenerate($destroy = false){\n            return \\Illuminate\\Session\\Store::regenerate($destroy);\n        }\n        \n        /**\n         * Force the session to be saved and closed.\n         * \n         * This method is generally not required for real sessions as\n         * the session will be automatically saved at the end of\n         * code execution.\n         *\n         * @static \n         */\n        public static function save(){\n            return \\Illuminate\\Session\\Store::save();\n        }\n        \n        /**\n         * Age the flash data for the session.\n         *\n         * @return void \n         * @static \n         */\n        public static function ageFlashData(){\n            \\Illuminate\\Session\\Store::ageFlashData();\n        }\n        \n        /**\n         * Checks if an attribute is defined.\n         *\n         * @param string $name The attribute name\n         * @return bool true if the attribute is defined, false otherwise\n         * @static \n         */\n        public static function has($name){\n            return \\Illuminate\\Session\\Store::has($name);\n        }\n        \n        /**\n         * Returns an attribute.\n         *\n         * @param string $name The attribute name\n         * @param mixed $default The default value if not found.\n         * @return mixed \n         * @static \n         */\n        public static function get($name, $default = null){\n            return \\Illuminate\\Session\\Store::get($name, $default);\n        }\n        \n        /**\n         * Get the value of a given key and then forget it.\n         *\n         * @param string $key\n         * @param string $default\n         * @return mixed \n         * @static \n         */\n        public static function pull($key, $default = null){\n            return \\Illuminate\\Session\\Store::pull($key, $default);\n        }\n        \n        /**\n         * Determine if the session contains old input.\n         *\n         * @param string $key\n         * @return bool \n         * @static \n         */\n        public static function hasOldInput($key = null){\n            return \\Illuminate\\Session\\Store::hasOldInput($key);\n        }\n        \n        /**\n         * Get the requested item from the flashed input array.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @return mixed \n         * @static \n         */\n        public static function getOldInput($key = null, $default = null){\n            return \\Illuminate\\Session\\Store::getOldInput($key, $default);\n        }\n        \n        /**\n         * Sets an attribute.\n         *\n         * @param string $name\n         * @param mixed $value\n         * @static \n         */\n        public static function set($name, $value){\n            return \\Illuminate\\Session\\Store::set($name, $value);\n        }\n        \n        /**\n         * Put a key / value pair or array of key / value pairs in the session.\n         *\n         * @param string|array $key\n         * @param mixed $value\n         * @return void \n         * @static \n         */\n        public static function put($key, $value = null){\n            \\Illuminate\\Session\\Store::put($key, $value);\n        }\n        \n        /**\n         * Push a value onto a session array.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void \n         * @static \n         */\n        public static function push($key, $value){\n            \\Illuminate\\Session\\Store::push($key, $value);\n        }\n        \n        /**\n         * Flash a key / value pair to the session.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void \n         * @static \n         */\n        public static function flash($key, $value){\n            \\Illuminate\\Session\\Store::flash($key, $value);\n        }\n        \n        /**\n         * Flash a key / value pair to the session\n         * for immediate use.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void \n         * @static \n         */\n        public static function now($key, $value){\n            \\Illuminate\\Session\\Store::now($key, $value);\n        }\n        \n        /**\n         * Flash an input array to the session.\n         *\n         * @param array $value\n         * @return void \n         * @static \n         */\n        public static function flashInput($value){\n            \\Illuminate\\Session\\Store::flashInput($value);\n        }\n        \n        /**\n         * Reflash all of the session flash data.\n         *\n         * @return void \n         * @static \n         */\n        public static function reflash(){\n            \\Illuminate\\Session\\Store::reflash();\n        }\n        \n        /**\n         * Reflash a subset of the current flash data.\n         *\n         * @param array|mixed $keys\n         * @return void \n         * @static \n         */\n        public static function keep($keys = null){\n            \\Illuminate\\Session\\Store::keep($keys);\n        }\n        \n        /**\n         * Returns attributes.\n         *\n         * @return array Attributes\n         * @static \n         */\n        public static function all(){\n            return \\Illuminate\\Session\\Store::all();\n        }\n        \n        /**\n         * Sets attributes.\n         *\n         * @param array $attributes Attributes\n         * @static \n         */\n        public static function replace($attributes){\n            return \\Illuminate\\Session\\Store::replace($attributes);\n        }\n        \n        /**\n         * Removes an attribute.\n         *\n         * @param string $name\n         * @return mixed The removed value or null when it does not exist\n         * @static \n         */\n        public static function remove($name){\n            return \\Illuminate\\Session\\Store::remove($name);\n        }\n        \n        /**\n         * Remove one or many items from the session.\n         *\n         * @param string|array $keys\n         * @return void \n         * @static \n         */\n        public static function forget($keys){\n            \\Illuminate\\Session\\Store::forget($keys);\n        }\n        \n        /**\n         * Clears all attributes.\n         *\n         * @static \n         */\n        public static function clear(){\n            return \\Illuminate\\Session\\Store::clear();\n        }\n        \n        /**\n         * Remove all of the items from the session.\n         *\n         * @return void \n         * @static \n         */\n        public static function flush(){\n            \\Illuminate\\Session\\Store::flush();\n        }\n        \n        /**\n         * Checks if the session was started.\n         *\n         * @return bool \n         * @static \n         */\n        public static function isStarted(){\n            return \\Illuminate\\Session\\Store::isStarted();\n        }\n        \n        /**\n         * Registers a SessionBagInterface with the session.\n         *\n         * @param \\Symfony\\Component\\HttpFoundation\\Session\\SessionBagInterface $bag\n         * @static \n         */\n        public static function registerBag($bag){\n            return \\Illuminate\\Session\\Store::registerBag($bag);\n        }\n        \n        /**\n         * Gets a bag instance by name.\n         *\n         * @param string $name\n         * @return \\Symfony\\Component\\HttpFoundation\\Session\\SessionBagInterface \n         * @static \n         */\n        public static function getBag($name){\n            return \\Illuminate\\Session\\Store::getBag($name);\n        }\n        \n        /**\n         * Gets session meta.\n         *\n         * @return \\Symfony\\Component\\HttpFoundation\\Session\\MetadataBag \n         * @static \n         */\n        public static function getMetadataBag(){\n            return \\Illuminate\\Session\\Store::getMetadataBag();\n        }\n        \n        /**\n         * Get the raw bag data array for a given bag.\n         *\n         * @param string $name\n         * @return array \n         * @static \n         */\n        public static function getBagData($name){\n            return \\Illuminate\\Session\\Store::getBagData($name);\n        }\n        \n        /**\n         * Get the CSRF token value.\n         *\n         * @return string \n         * @static \n         */\n        public static function token(){\n            return \\Illuminate\\Session\\Store::token();\n        }\n        \n        /**\n         * Get the CSRF token value.\n         *\n         * @return string \n         * @static \n         */\n        public static function getToken(){\n            return \\Illuminate\\Session\\Store::getToken();\n        }\n        \n        /**\n         * Regenerate the CSRF token value.\n         *\n         * @return void \n         * @static \n         */\n        public static function regenerateToken(){\n            \\Illuminate\\Session\\Store::regenerateToken();\n        }\n        \n        /**\n         * Get the previous URL from the session.\n         *\n         * @return string|null \n         * @static \n         */\n        public static function previousUrl(){\n            return \\Illuminate\\Session\\Store::previousUrl();\n        }\n        \n        /**\n         * Set the \"previous\" URL in the session.\n         *\n         * @param string $url\n         * @return void \n         * @static \n         */\n        public static function setPreviousUrl($url){\n            \\Illuminate\\Session\\Store::setPreviousUrl($url);\n        }\n        \n        /**\n         * Set the existence of the session on the handler if applicable.\n         *\n         * @param bool $value\n         * @return void \n         * @static \n         */\n        public static function setExists($value){\n            \\Illuminate\\Session\\Store::setExists($value);\n        }\n        \n        /**\n         * Get the underlying session handler implementation.\n         *\n         * @return \\SessionHandlerInterface \n         * @static \n         */\n        public static function getHandler(){\n            return \\Illuminate\\Session\\Store::getHandler();\n        }\n        \n        /**\n         * Determine if the session handler needs a request.\n         *\n         * @return bool \n         * @static \n         */\n        public static function handlerNeedsRequest(){\n            return \\Illuminate\\Session\\Store::handlerNeedsRequest();\n        }\n        \n        /**\n         * Set the request on the handler instance.\n         *\n         * @param \\Symfony\\Component\\HttpFoundation\\Request $request\n         * @return void \n         * @static \n         */\n        public static function setRequestOnHandler($request){\n            \\Illuminate\\Session\\Store::setRequestOnHandler($request);\n        }\n        \n    }\n\n\n    class Storage extends \\Illuminate\\Support\\Facades\\Storage{\n        \n        /**\n         * Get a filesystem instance.\n         *\n         * @param string $name\n         * @return \\Illuminate\\Filesystem\\FilesystemAdapter \n         * @static \n         */\n        public static function drive($name = null){\n            return \\Illuminate\\Filesystem\\FilesystemManager::drive($name);\n        }\n        \n        /**\n         * Get a filesystem instance.\n         *\n         * @param string $name\n         * @return \\Illuminate\\Filesystem\\FilesystemAdapter \n         * @static \n         */\n        public static function disk($name = null){\n            return \\Illuminate\\Filesystem\\FilesystemManager::disk($name);\n        }\n        \n        /**\n         * Get a default cloud filesystem instance.\n         *\n         * @return \\Illuminate\\Filesystem\\FilesystemAdapter \n         * @static \n         */\n        public static function cloud(){\n            return \\Illuminate\\Filesystem\\FilesystemManager::cloud();\n        }\n        \n        /**\n         * Create an instance of the local driver.\n         *\n         * @param array $config\n         * @return \\Illuminate\\Filesystem\\FilesystemAdapter \n         * @static \n         */\n        public static function createLocalDriver($config){\n            return \\Illuminate\\Filesystem\\FilesystemManager::createLocalDriver($config);\n        }\n        \n        /**\n         * Create an instance of the ftp driver.\n         *\n         * @param array $config\n         * @return \\Illuminate\\Filesystem\\FilesystemAdapter \n         * @static \n         */\n        public static function createFtpDriver($config){\n            return \\Illuminate\\Filesystem\\FilesystemManager::createFtpDriver($config);\n        }\n        \n        /**\n         * Create an instance of the Amazon S3 driver.\n         *\n         * @param array $config\n         * @return \\Illuminate\\Contracts\\Filesystem\\Cloud \n         * @static \n         */\n        public static function createS3Driver($config){\n            return \\Illuminate\\Filesystem\\FilesystemManager::createS3Driver($config);\n        }\n        \n        /**\n         * Create an instance of the Rackspace driver.\n         *\n         * @param array $config\n         * @return \\Illuminate\\Contracts\\Filesystem\\Cloud \n         * @static \n         */\n        public static function createRackspaceDriver($config){\n            return \\Illuminate\\Filesystem\\FilesystemManager::createRackspaceDriver($config);\n        }\n        \n        /**\n         * Get the default driver name.\n         *\n         * @return string \n         * @static \n         */\n        public static function getDefaultDriver(){\n            return \\Illuminate\\Filesystem\\FilesystemManager::getDefaultDriver();\n        }\n        \n        /**\n         * Get the default cloud driver name.\n         *\n         * @return string \n         * @static \n         */\n        public static function getDefaultCloudDriver(){\n            return \\Illuminate\\Filesystem\\FilesystemManager::getDefaultCloudDriver();\n        }\n        \n        /**\n         * Register a custom driver creator Closure.\n         *\n         * @param string $driver\n         * @param \\Closure $callback\n         * @return $this \n         * @static \n         */\n        public static function extend($driver, $callback){\n            return \\Illuminate\\Filesystem\\FilesystemManager::extend($driver, $callback);\n        }\n        \n        /**\n         * Determine if a file exists.\n         *\n         * @param string $path\n         * @return bool \n         * @static \n         */\n        public static function exists($path){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::exists($path);\n        }\n        \n        /**\n         * Get the contents of a file.\n         *\n         * @param string $path\n         * @return string \n         * @throws \\Illuminate\\Contracts\\Filesystem\\FileNotFoundException\n         * @static \n         */\n        public static function get($path){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::get($path);\n        }\n        \n        /**\n         * Write the contents of a file.\n         *\n         * @param string $path\n         * @param string|resource $contents\n         * @param string $visibility\n         * @return bool \n         * @static \n         */\n        public static function put($path, $contents, $visibility = null){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::put($path, $contents, $visibility);\n        }\n        \n        /**\n         * Get the visibility for the given path.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */\n        public static function getVisibility($path){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::getVisibility($path);\n        }\n        \n        /**\n         * Set the visibility for the given path.\n         *\n         * @param string $path\n         * @param string $visibility\n         * @return void \n         * @static \n         */\n        public static function setVisibility($path, $visibility){\n            \\Illuminate\\Filesystem\\FilesystemAdapter::setVisibility($path, $visibility);\n        }\n        \n        /**\n         * Prepend to a file.\n         *\n         * @param string $path\n         * @param string $data\n         * @return int \n         * @static \n         */\n        public static function prepend($path, $data, $separator = ''){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::prepend($path, $data, $separator);\n        }\n        \n        /**\n         * Append to a file.\n         *\n         * @param string $path\n         * @param string $data\n         * @return int \n         * @static \n         */\n        public static function append($path, $data, $separator = ''){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::append($path, $data, $separator);\n        }\n        \n        /**\n         * Delete the file at a given path.\n         *\n         * @param string|array $paths\n         * @return bool \n         * @static \n         */\n        public static function delete($paths){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::delete($paths);\n        }\n        \n        /**\n         * Copy a file to a new location.\n         *\n         * @param string $from\n         * @param string $to\n         * @return bool \n         * @static \n         */\n        public static function copy($from, $to){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::copy($from, $to);\n        }\n        \n        /**\n         * Move a file to a new location.\n         *\n         * @param string $from\n         * @param string $to\n         * @return bool \n         * @static \n         */\n        public static function move($from, $to){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::move($from, $to);\n        }\n        \n        /**\n         * Get the file size of a given file.\n         *\n         * @param string $path\n         * @return int \n         * @static \n         */\n        public static function size($path){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::size($path);\n        }\n        \n        /**\n         * Get the mime-type of a given file.\n         *\n         * @param string $path\n         * @return string|false \n         * @static \n         */\n        public static function mimeType($path){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::mimeType($path);\n        }\n        \n        /**\n         * Get the file's last modification time.\n         *\n         * @param string $path\n         * @return int \n         * @static \n         */\n        public static function lastModified($path){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::lastModified($path);\n        }\n        \n        /**\n         * Get the URL for the file at the given path.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */\n        public static function url($path){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::url($path);\n        }\n        \n        /**\n         * Get an array of all files in a directory.\n         *\n         * @param string|null $directory\n         * @param bool $recursive\n         * @return array \n         * @static \n         */\n        public static function files($directory = null, $recursive = false){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::files($directory, $recursive);\n        }\n        \n        /**\n         * Get all of the files from the given directory (recursive).\n         *\n         * @param string|null $directory\n         * @return array \n         * @static \n         */\n        public static function allFiles($directory = null){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::allFiles($directory);\n        }\n        \n        /**\n         * Get all of the directories within a given directory.\n         *\n         * @param string|null $directory\n         * @param bool $recursive\n         * @return array \n         * @static \n         */\n        public static function directories($directory = null, $recursive = false){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::directories($directory, $recursive);\n        }\n        \n        /**\n         * Get all (recursive) of the directories within a given directory.\n         *\n         * @param string|null $directory\n         * @return array \n         * @static \n         */\n        public static function allDirectories($directory = null){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::allDirectories($directory);\n        }\n        \n        /**\n         * Create a directory.\n         *\n         * @param string $path\n         * @return bool \n         * @static \n         */\n        public static function makeDirectory($path){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::makeDirectory($path);\n        }\n        \n        /**\n         * Recursively delete a directory.\n         *\n         * @param string $directory\n         * @return bool \n         * @static \n         */\n        public static function deleteDirectory($directory){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::deleteDirectory($directory);\n        }\n        \n        /**\n         * Get the Flysystem driver.\n         *\n         * @return \\League\\Flysystem\\FilesystemInterface \n         * @static \n         */\n        public static function getDriver(){\n            return \\Illuminate\\Filesystem\\FilesystemAdapter::getDriver();\n        }\n        \n    }\n\n\n    class URL extends \\Illuminate\\Support\\Facades\\URL{\n        \n        /**\n         * Get the full URL for the current request.\n         *\n         * @return string \n         * @static \n         */\n        public static function full(){\n            return \\Illuminate\\Routing\\UrlGenerator::full();\n        }\n        \n        /**\n         * Get the current URL for the request.\n         *\n         * @return string \n         * @static \n         */\n        public static function current(){\n            return \\Illuminate\\Routing\\UrlGenerator::current();\n        }\n        \n        /**\n         * Get the URL for the previous request.\n         *\n         * @return string \n         * @static \n         */\n        public static function previous(){\n            return \\Illuminate\\Routing\\UrlGenerator::previous();\n        }\n        \n        /**\n         * Generate an absolute URL to the given path.\n         *\n         * @param string $path\n         * @param mixed $extra\n         * @param bool|null $secure\n         * @return string \n         * @static \n         */\n        public static function to($path, $extra = array(), $secure = null){\n            return \\Illuminate\\Routing\\UrlGenerator::to($path, $extra, $secure);\n        }\n        \n        /**\n         * Generate a secure, absolute URL to the given path.\n         *\n         * @param string $path\n         * @param array $parameters\n         * @return string \n         * @static \n         */\n        public static function secure($path, $parameters = array()){\n            return \\Illuminate\\Routing\\UrlGenerator::secure($path, $parameters);\n        }\n        \n        /**\n         * Generate a URL to an application asset.\n         *\n         * @param string $path\n         * @param bool|null $secure\n         * @return string \n         * @static \n         */\n        public static function asset($path, $secure = null){\n            return \\Illuminate\\Routing\\UrlGenerator::asset($path, $secure);\n        }\n        \n        /**\n         * Generate a URL to an asset from a custom root domain such as CDN, etc.\n         *\n         * @param string $root\n         * @param string $path\n         * @param bool|null $secure\n         * @return string \n         * @static \n         */\n        public static function assetFrom($root, $path, $secure = null){\n            return \\Illuminate\\Routing\\UrlGenerator::assetFrom($root, $path, $secure);\n        }\n        \n        /**\n         * Generate a URL to a secure asset.\n         *\n         * @param string $path\n         * @return string \n         * @static \n         */\n        public static function secureAsset($path){\n            return \\Illuminate\\Routing\\UrlGenerator::secureAsset($path);\n        }\n        \n        /**\n         * Force the schema for URLs.\n         *\n         * @param string $schema\n         * @return void \n         * @static \n         */\n        public static function forceSchema($schema){\n            \\Illuminate\\Routing\\UrlGenerator::forceSchema($schema);\n        }\n        \n        /**\n         * Get the URL to a named route.\n         *\n         * @param string $name\n         * @param mixed $parameters\n         * @param bool $absolute\n         * @return string \n         * @throws \\InvalidArgumentException\n         * @static \n         */\n        public static function route($name, $parameters = array(), $absolute = true){\n            return \\Illuminate\\Routing\\UrlGenerator::route($name, $parameters, $absolute);\n        }\n        \n        /**\n         * Get the URL to a controller action.\n         *\n         * @param string $action\n         * @param mixed $parameters\n         * @param bool $absolute\n         * @return string \n         * @throws \\InvalidArgumentException\n         * @static \n         */\n        public static function action($action, $parameters = array(), $absolute = true){\n            return \\Illuminate\\Routing\\UrlGenerator::action($action, $parameters, $absolute);\n        }\n        \n        /**\n         * Set the forced root URL.\n         *\n         * @param string $root\n         * @return void \n         * @static \n         */\n        public static function forceRootUrl($root){\n            \\Illuminate\\Routing\\UrlGenerator::forceRootUrl($root);\n        }\n        \n        /**\n         * Determine if the given path is a valid URL.\n         *\n         * @param string $path\n         * @return bool \n         * @static \n         */\n        public static function isValidUrl($path){\n            return \\Illuminate\\Routing\\UrlGenerator::isValidUrl($path);\n        }\n        \n        /**\n         * Get the request instance.\n         *\n         * @return \\Illuminate\\Http\\Request \n         * @static \n         */\n        public static function getRequest(){\n            return \\Illuminate\\Routing\\UrlGenerator::getRequest();\n        }\n        \n        /**\n         * Set the current request instance.\n         *\n         * @param \\Illuminate\\Http\\Request $request\n         * @return void \n         * @static \n         */\n        public static function setRequest($request){\n            \\Illuminate\\Routing\\UrlGenerator::setRequest($request);\n        }\n        \n        /**\n         * Set the route collection.\n         *\n         * @param \\Illuminate\\Routing\\RouteCollection $routes\n         * @return $this \n         * @static \n         */\n        public static function setRoutes($routes){\n            return \\Illuminate\\Routing\\UrlGenerator::setRoutes($routes);\n        }\n        \n        /**\n         * Set the session resolver for the generator.\n         *\n         * @param callable $sessionResolver\n         * @return $this \n         * @static \n         */\n        public static function setSessionResolver($sessionResolver){\n            return \\Illuminate\\Routing\\UrlGenerator::setSessionResolver($sessionResolver);\n        }\n        \n        /**\n         * Set the root controller namespace.\n         *\n         * @param string $rootNamespace\n         * @return $this \n         * @static \n         */\n        public static function setRootControllerNamespace($rootNamespace){\n            return \\Illuminate\\Routing\\UrlGenerator::setRootControllerNamespace($rootNamespace);\n        }\n        \n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param callable $macro\n         * @return void \n         * @static \n         */\n        public static function macro($name, $macro){\n            \\Illuminate\\Routing\\UrlGenerator::macro($name, $macro);\n        }\n        \n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */\n        public static function hasMacro($name){\n            return \\Illuminate\\Routing\\UrlGenerator::hasMacro($name);\n        }\n        \n    }\n\n\n    class Validator extends \\Illuminate\\Support\\Facades\\Validator{\n        \n        /**\n         * Create a new Validator instance.\n         *\n         * @param array $data\n         * @param array $rules\n         * @param array $messages\n         * @param array $customAttributes\n         * @return \\Illuminate\\Validation\\Validator \n         * @static \n         */\n        public static function make($data, $rules, $messages = array(), $customAttributes = array()){\n            return \\Illuminate\\Validation\\Factory::make($data, $rules, $messages, $customAttributes);\n        }\n        \n        /**\n         * Register a custom validator extension.\n         *\n         * @param string $rule\n         * @param \\Closure|string $extension\n         * @param string $message\n         * @return void \n         * @static \n         */\n        public static function extend($rule, $extension, $message = null){\n            \\Illuminate\\Validation\\Factory::extend($rule, $extension, $message);\n        }\n        \n        /**\n         * Register a custom implicit validator extension.\n         *\n         * @param string $rule\n         * @param \\Closure|string $extension\n         * @param string $message\n         * @return void \n         * @static \n         */\n        public static function extendImplicit($rule, $extension, $message = null){\n            \\Illuminate\\Validation\\Factory::extendImplicit($rule, $extension, $message);\n        }\n        \n        /**\n         * Register a custom implicit validator message replacer.\n         *\n         * @param string $rule\n         * @param \\Closure|string $replacer\n         * @return void \n         * @static \n         */\n        public static function replacer($rule, $replacer){\n            \\Illuminate\\Validation\\Factory::replacer($rule, $replacer);\n        }\n        \n        /**\n         * Set the Validator instance resolver.\n         *\n         * @param \\Closure $resolver\n         * @return void \n         * @static \n         */\n        public static function resolver($resolver){\n            \\Illuminate\\Validation\\Factory::resolver($resolver);\n        }\n        \n        /**\n         * Get the Translator implementation.\n         *\n         * @return \\Symfony\\Component\\Translation\\TranslatorInterface \n         * @static \n         */\n        public static function getTranslator(){\n            return \\Illuminate\\Validation\\Factory::getTranslator();\n        }\n        \n        /**\n         * Get the Presence Verifier implementation.\n         *\n         * @return \\Illuminate\\Validation\\PresenceVerifierInterface \n         * @static \n         */\n        public static function getPresenceVerifier(){\n            return \\Illuminate\\Validation\\Factory::getPresenceVerifier();\n        }\n        \n        /**\n         * Set the Presence Verifier implementation.\n         *\n         * @param \\Illuminate\\Validation\\PresenceVerifierInterface $presenceVerifier\n         * @return void \n         * @static \n         */\n        public static function setPresenceVerifier($presenceVerifier){\n            \\Illuminate\\Validation\\Factory::setPresenceVerifier($presenceVerifier);\n        }\n        \n    }\n\n\n    class View extends \\Illuminate\\Support\\Facades\\View{\n        \n        /**\n         * Get the evaluated view contents for the given view.\n         *\n         * @param string $path\n         * @param array $data\n         * @param array $mergeData\n         * @return \\Illuminate\\Contracts\\View\\View \n         * @static \n         */\n        public static function file($path, $data = array(), $mergeData = array()){\n            return \\Illuminate\\View\\Factory::file($path, $data, $mergeData);\n        }\n        \n        /**\n         * Get the evaluated view contents for the given view.\n         *\n         * @param string $view\n         * @param array $data\n         * @param array $mergeData\n         * @return \\Illuminate\\Contracts\\View\\View \n         * @static \n         */\n        public static function make($view, $data = array(), $mergeData = array()){\n            return \\Illuminate\\View\\Factory::make($view, $data, $mergeData);\n        }\n        \n        /**\n         * Get the evaluated view contents for a named view.\n         *\n         * @param string $view\n         * @param mixed $data\n         * @return \\Illuminate\\Contracts\\View\\View \n         * @static \n         */\n        public static function of($view, $data = array()){\n            return \\Illuminate\\View\\Factory::of($view, $data);\n        }\n        \n        /**\n         * Register a named view.\n         *\n         * @param string $view\n         * @param string $name\n         * @return void \n         * @static \n         */\n        public static function name($view, $name){\n            \\Illuminate\\View\\Factory::name($view, $name);\n        }\n        \n        /**\n         * Add an alias for a view.\n         *\n         * @param string $view\n         * @param string $alias\n         * @return void \n         * @static \n         */\n        public static function alias($view, $alias){\n            \\Illuminate\\View\\Factory::alias($view, $alias);\n        }\n        \n        /**\n         * Determine if a given view exists.\n         *\n         * @param string $view\n         * @return bool \n         * @static \n         */\n        public static function exists($view){\n            return \\Illuminate\\View\\Factory::exists($view);\n        }\n        \n        /**\n         * Get the rendered contents of a partial from a loop.\n         *\n         * @param string $view\n         * @param array $data\n         * @param string $iterator\n         * @param string $empty\n         * @return string \n         * @static \n         */\n        public static function renderEach($view, $data, $iterator, $empty = 'raw|'){\n            return \\Illuminate\\View\\Factory::renderEach($view, $data, $iterator, $empty);\n        }\n        \n        /**\n         * Get the appropriate view engine for the given path.\n         *\n         * @param string $path\n         * @return \\Illuminate\\View\\Engines\\EngineInterface \n         * @throws \\InvalidArgumentException\n         * @static \n         */\n        public static function getEngineFromPath($path){\n            return \\Illuminate\\View\\Factory::getEngineFromPath($path);\n        }\n        \n        /**\n         * Add a piece of shared data to the environment.\n         *\n         * @param array|string $key\n         * @param mixed $value\n         * @return mixed \n         * @static \n         */\n        public static function share($key, $value = null){\n            return \\Illuminate\\View\\Factory::share($key, $value);\n        }\n        \n        /**\n         * Register a view creator event.\n         *\n         * @param array|string $views\n         * @param \\Closure|string $callback\n         * @return array \n         * @static \n         */\n        public static function creator($views, $callback){\n            return \\Illuminate\\View\\Factory::creator($views, $callback);\n        }\n        \n        /**\n         * Register multiple view composers via an array.\n         *\n         * @param array $composers\n         * @return array \n         * @static \n         */\n        public static function composers($composers){\n            return \\Illuminate\\View\\Factory::composers($composers);\n        }\n        \n        /**\n         * Register a view composer event.\n         *\n         * @param array|string $views\n         * @param \\Closure|string $callback\n         * @param int|null $priority\n         * @return array \n         * @static \n         */\n        public static function composer($views, $callback, $priority = null){\n            return \\Illuminate\\View\\Factory::composer($views, $callback, $priority);\n        }\n        \n        /**\n         * Call the composer for a given view.\n         *\n         * @param \\Illuminate\\Contracts\\View\\View $view\n         * @return void \n         * @static \n         */\n        public static function callComposer($view){\n            \\Illuminate\\View\\Factory::callComposer($view);\n        }\n        \n        /**\n         * Call the creator for a given view.\n         *\n         * @param \\Illuminate\\Contracts\\View\\View $view\n         * @return void \n         * @static \n         */\n        public static function callCreator($view){\n            \\Illuminate\\View\\Factory::callCreator($view);\n        }\n        \n        /**\n         * Start injecting content into a section.\n         *\n         * @param string $section\n         * @param string $content\n         * @return void \n         * @static \n         */\n        public static function startSection($section, $content = ''){\n            \\Illuminate\\View\\Factory::startSection($section, $content);\n        }\n        \n        /**\n         * Inject inline content into a section.\n         *\n         * @param string $section\n         * @param string $content\n         * @return void \n         * @static \n         */\n        public static function inject($section, $content){\n            \\Illuminate\\View\\Factory::inject($section, $content);\n        }\n        \n        /**\n         * Stop injecting content into a section and return its contents.\n         *\n         * @return string \n         * @static \n         */\n        public static function yieldSection(){\n            return \\Illuminate\\View\\Factory::yieldSection();\n        }\n        \n        /**\n         * Stop injecting content into a section.\n         *\n         * @param bool $overwrite\n         * @return string \n         * @throws \\InvalidArgumentException\n         * @static \n         */\n        public static function stopSection($overwrite = false){\n            return \\Illuminate\\View\\Factory::stopSection($overwrite);\n        }\n        \n        /**\n         * Stop injecting content into a section and append it.\n         *\n         * @return string \n         * @throws \\InvalidArgumentException\n         * @static \n         */\n        public static function appendSection(){\n            return \\Illuminate\\View\\Factory::appendSection();\n        }\n        \n        /**\n         * Get the string contents of a section.\n         *\n         * @param string $section\n         * @param string $default\n         * @return string \n         * @static \n         */\n        public static function yieldContent($section, $default = ''){\n            return \\Illuminate\\View\\Factory::yieldContent($section, $default);\n        }\n        \n        /**\n         * Start injecting content into a push section.\n         *\n         * @param string $section\n         * @param string $content\n         * @return void \n         * @static \n         */\n        public static function startPush($section, $content = ''){\n            \\Illuminate\\View\\Factory::startPush($section, $content);\n        }\n        \n        /**\n         * Stop injecting content into a push section.\n         *\n         * @return string \n         * @throws \\InvalidArgumentException\n         * @static \n         */\n        public static function stopPush(){\n            return \\Illuminate\\View\\Factory::stopPush();\n        }\n        \n        /**\n         * Get the string contents of a push section.\n         *\n         * @param string $section\n         * @param string $default\n         * @return string \n         * @static \n         */\n        public static function yieldPushContent($section, $default = ''){\n            return \\Illuminate\\View\\Factory::yieldPushContent($section, $default);\n        }\n        \n        /**\n         * Flush all of the section contents.\n         *\n         * @return void \n         * @static \n         */\n        public static function flushSections(){\n            \\Illuminate\\View\\Factory::flushSections();\n        }\n        \n        /**\n         * Flush all of the section contents if done rendering.\n         *\n         * @return void \n         * @static \n         */\n        public static function flushSectionsIfDoneRendering(){\n            \\Illuminate\\View\\Factory::flushSectionsIfDoneRendering();\n        }\n        \n        /**\n         * Increment the rendering counter.\n         *\n         * @return void \n         * @static \n         */\n        public static function incrementRender(){\n            \\Illuminate\\View\\Factory::incrementRender();\n        }\n        \n        /**\n         * Decrement the rendering counter.\n         *\n         * @return void \n         * @static \n         */\n        public static function decrementRender(){\n            \\Illuminate\\View\\Factory::decrementRender();\n        }\n        \n        /**\n         * Check if there are no active render operations.\n         *\n         * @return bool \n         * @static \n         */\n        public static function doneRendering(){\n            return \\Illuminate\\View\\Factory::doneRendering();\n        }\n        \n        /**\n         * Add a location to the array of view locations.\n         *\n         * @param string $location\n         * @return void \n         * @static \n         */\n        public static function addLocation($location){\n            \\Illuminate\\View\\Factory::addLocation($location);\n        }\n        \n        /**\n         * Add a new namespace to the loader.\n         *\n         * @param string $namespace\n         * @param string|array $hints\n         * @return void \n         * @static \n         */\n        public static function addNamespace($namespace, $hints){\n            \\Illuminate\\View\\Factory::addNamespace($namespace, $hints);\n        }\n        \n        /**\n         * Prepend a new namespace to the loader.\n         *\n         * @param string $namespace\n         * @param string|array $hints\n         * @return void \n         * @static \n         */\n        public static function prependNamespace($namespace, $hints){\n            \\Illuminate\\View\\Factory::prependNamespace($namespace, $hints);\n        }\n        \n        /**\n         * Register a valid view extension and its engine.\n         *\n         * @param string $extension\n         * @param string $engine\n         * @param \\Closure $resolver\n         * @return void \n         * @static \n         */\n        public static function addExtension($extension, $engine, $resolver = null){\n            \\Illuminate\\View\\Factory::addExtension($extension, $engine, $resolver);\n        }\n        \n        /**\n         * Get the extension to engine bindings.\n         *\n         * @return array \n         * @static \n         */\n        public static function getExtensions(){\n            return \\Illuminate\\View\\Factory::getExtensions();\n        }\n        \n        /**\n         * Get the engine resolver instance.\n         *\n         * @return \\Illuminate\\View\\Engines\\EngineResolver \n         * @static \n         */\n        public static function getEngineResolver(){\n            return \\Illuminate\\View\\Factory::getEngineResolver();\n        }\n        \n        /**\n         * Get the view finder instance.\n         *\n         * @return \\Illuminate\\View\\ViewFinderInterface \n         * @static \n         */\n        public static function getFinder(){\n            return \\Illuminate\\View\\Factory::getFinder();\n        }\n        \n        /**\n         * Set the view finder instance.\n         *\n         * @param \\Illuminate\\View\\ViewFinderInterface $finder\n         * @return void \n         * @static \n         */\n        public static function setFinder($finder){\n            \\Illuminate\\View\\Factory::setFinder($finder);\n        }\n        \n        /**\n         * Get the event dispatcher instance.\n         *\n         * @return \\Illuminate\\Contracts\\Events\\Dispatcher \n         * @static \n         */\n        public static function getDispatcher(){\n            return \\Illuminate\\View\\Factory::getDispatcher();\n        }\n        \n        /**\n         * Set the event dispatcher instance.\n         *\n         * @param \\Illuminate\\Contracts\\Events\\Dispatcher $events\n         * @return void \n         * @static \n         */\n        public static function setDispatcher($events){\n            \\Illuminate\\View\\Factory::setDispatcher($events);\n        }\n        \n        /**\n         * Get the IoC container instance.\n         *\n         * @return \\Illuminate\\Contracts\\Container\\Container \n         * @static \n         */\n        public static function getContainer(){\n            return \\Illuminate\\View\\Factory::getContainer();\n        }\n        \n        /**\n         * Set the IoC container instance.\n         *\n         * @param \\Illuminate\\Contracts\\Container\\Container $container\n         * @return void \n         * @static \n         */\n        public static function setContainer($container){\n            \\Illuminate\\View\\Factory::setContainer($container);\n        }\n        \n        /**\n         * Get an item from the shared data.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @return mixed \n         * @static \n         */\n        public static function shared($key, $default = null){\n            return \\Illuminate\\View\\Factory::shared($key, $default);\n        }\n        \n        /**\n         * Get all of the shared data for the environment.\n         *\n         * @return array \n         * @static \n         */\n        public static function getShared(){\n            return \\Illuminate\\View\\Factory::getShared();\n        }\n        \n        /**\n         * Check if section exists.\n         *\n         * @param string $name\n         * @return bool \n         * @static \n         */\n        public static function hasSection($name){\n            return \\Illuminate\\View\\Factory::hasSection($name);\n        }\n        \n        /**\n         * Get the entire array of sections.\n         *\n         * @return array \n         * @static \n         */\n        public static function getSections(){\n            return \\Illuminate\\View\\Factory::getSections();\n        }\n        \n        /**\n         * Get all of the registered named views in environment.\n         *\n         * @return array \n         * @static \n         */\n        public static function getNames(){\n            return \\Illuminate\\View\\Factory::getNames();\n        }\n        \n    }\n\n\n    class Fractal extends \\Cyvelnet\\Laravel5Fractal\\Facades\\Fractal{\n        \n        /**\n         * \n         *\n         * @return mixed \n         * @static \n         */\n        public static function getManager(){\n            return \\Cyvelnet\\Laravel5Fractal\\FractalServices::getManager();\n        }\n        \n        /**\n         * includes sub level data transformer.\n         *\n         * @param array $includes\n         * @return $this \n         * @static \n         */\n        public static function includes($includes){\n            return \\Cyvelnet\\Laravel5Fractal\\FractalServices::includes($includes);\n        }\n        \n        /**\n         * set data transformation recursion limit\n         *\n         * @param $limit\n         * @return $this \n         * @static \n         */\n        public static function setRecursionLimit($limit){\n            return \\Cyvelnet\\Laravel5Fractal\\FractalServices::setRecursionLimit($limit);\n        }\n        \n        /**\n         * set data serializer\n         *\n         * @param \\League\\Fractal\\Serializer\\SerializerAbstract $serializer\n         * @return $this \n         * @static \n         */\n        public static function setSerializer($serializer){\n            return \\Cyvelnet\\Laravel5Fractal\\FractalServices::setSerializer($serializer);\n        }\n        \n        /**\n         * transform item\n         *\n         * @param $item\n         * @param \\Cyvelnet\\Laravel5Fractal\\TransformerAbstract $transformer\n         * @param null $resourceKey\n         * @return \\Cyvelnet\\Laravel5Fractal\\Adapters\\ScopeDataAdapter \n         * @static \n         */\n        public static function item($item, $transformer, $resourceKey = null){\n            return \\Cyvelnet\\Laravel5Fractal\\FractalServices::item($item, $transformer, $resourceKey);\n        }\n        \n        /**\n         * transform a collection\n         *\n         * @param $items\n         * @param \\Cyvelnet\\Laravel5Fractal\\TransformerAbstract $transformer\n         * @param null $resourceKey\n         * @param \\Cyvelnet\\Laravel5Fractal\\PaginatorInterface $adapter\n         * @return \\Cyvelnet\\Laravel5Fractal\\Adapters\\ScopeDataAdapter \n         * @static \n         */\n        public static function collection($items, $transformer, $resourceKey = null, $adapter = null){\n            return \\Cyvelnet\\Laravel5Fractal\\FractalServices::collection($items, $transformer, $resourceKey, $adapter);\n        }\n        \n    }\n\n\n    class Hashids extends \\Vinkla\\Hashids\\Facades\\Hashids{\n        \n        /**\n         * Get the factory instance.\n         *\n         * @return \\Vinkla\\Hashids\\HashidsFactory \n         * @static \n         */\n        public static function getFactory(){\n            return \\Vinkla\\Hashids\\HashidsManager::getFactory();\n        }\n        \n        /**\n         * Get a connection instance.\n         *\n         * @param string $name\n         * @return object \n         * @static \n         */\n        public static function connection($name = null){\n            //Method inherited from \\GrahamCampbell\\Manager\\AbstractManager            \n            return \\Vinkla\\Hashids\\HashidsManager::connection($name);\n        }\n        \n        /**\n         * Reconnect to the given connection.\n         *\n         * @param string $name\n         * @return object \n         * @static \n         */\n        public static function reconnect($name = null){\n            //Method inherited from \\GrahamCampbell\\Manager\\AbstractManager            \n            return \\Vinkla\\Hashids\\HashidsManager::reconnect($name);\n        }\n        \n        /**\n         * Disconnect from the given connection.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */\n        public static function disconnect($name = null){\n            //Method inherited from \\GrahamCampbell\\Manager\\AbstractManager            \n            \\Vinkla\\Hashids\\HashidsManager::disconnect($name);\n        }\n        \n        /**\n         * Get the configuration for a connection.\n         *\n         * @param string $name\n         * @throws \\InvalidArgumentException\n         * @return array \n         * @static \n         */\n        public static function getConnectionConfig($name){\n            //Method inherited from \\GrahamCampbell\\Manager\\AbstractManager            \n            return \\Vinkla\\Hashids\\HashidsManager::getConnectionConfig($name);\n        }\n        \n        /**\n         * Get the default connection name.\n         *\n         * @return string \n         * @static \n         */\n        public static function getDefaultConnection(){\n            //Method inherited from \\GrahamCampbell\\Manager\\AbstractManager            \n            return \\Vinkla\\Hashids\\HashidsManager::getDefaultConnection();\n        }\n        \n        /**\n         * Set the default connection name.\n         *\n         * @param string $name\n         * @return void \n         * @static \n         */\n        public static function setDefaultConnection($name){\n            //Method inherited from \\GrahamCampbell\\Manager\\AbstractManager            \n            \\Vinkla\\Hashids\\HashidsManager::setDefaultConnection($name);\n        }\n        \n        /**\n         * Register an extension connection resolver.\n         *\n         * @param string $name\n         * @param callable $resolver\n         * @return void \n         * @static \n         */\n        public static function extend($name, $resolver){\n            //Method inherited from \\GrahamCampbell\\Manager\\AbstractManager            \n            \\Vinkla\\Hashids\\HashidsManager::extend($name, $resolver);\n        }\n        \n        /**\n         * Return all of the created connections.\n         *\n         * @return object[] \n         * @static \n         */\n        public static function getConnections(){\n            //Method inherited from \\GrahamCampbell\\Manager\\AbstractManager            \n            return \\Vinkla\\Hashids\\HashidsManager::getConnections();\n        }\n        \n        /**\n         * Get the config instance.\n         *\n         * @return \\Illuminate\\Contracts\\Config\\Repository \n         * @static \n         */\n        public static function getConfig(){\n            //Method inherited from \\GrahamCampbell\\Manager\\AbstractManager            \n            return \\Vinkla\\Hashids\\HashidsManager::getConfig();\n        }\n        \n    }\n\n\n    class Active extends \\HieuLe\\Active\\Facades\\Active{\n        \n        /**\n         * Update the route and request instances\n         *\n         * @param \\Route $route\n         * @param \\Request $request\n         * @static \n         */\n        public static function updateInstances($route, $request){\n            return \\HieuLe\\Active\\Active::updateInstances($route, $request);\n        }\n        \n        /**\n         * Get the active class if the condition is not falsy\n         *\n         * @param $condition\n         * @param string $activeClass\n         * @param string $inactiveClass\n         * @return string \n         * @static \n         */\n        public static function getClassIf($condition, $activeClass = 'active', $inactiveClass = ''){\n            return \\HieuLe\\Active\\Active::getClassIf($condition, $activeClass, $inactiveClass);\n        }\n        \n        /**\n         * Check if the URI of the current request matches one of the specific URIs\n         *\n         * @param array $uris\n         * @return bool \n         * @static \n         */\n        public static function checkUri($uris){\n            return \\HieuLe\\Active\\Active::checkUri($uris);\n        }\n        \n        /**\n         * Check if the current URI matches one of specific patterns (using `str_is`)\n         *\n         * @param array $patterns\n         * @return bool \n         * @static \n         */\n        public static function checkUriPattern($patterns){\n            return \\HieuLe\\Active\\Active::checkUriPattern($patterns);\n        }\n        \n        /**\n         * Check if one of the following condition is true:\n         * + the value of $value is `false` and the current querystring contain the key $key\n         * + the value of $value is not `false` and the current value of the $key key in the querystring equals to $value\n         * + the value of $value is not `false` and the current value of the $key key in the querystring is an array that\n         * contains the $value\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return bool \n         * @static \n         */\n        public static function checkQuery($key, $value){\n            return \\HieuLe\\Active\\Active::checkQuery($key, $value);\n        }\n        \n        /**\n         * Check if the name of the current route matches one of specific values\n         *\n         * @param array $routeNames\n         * @return bool \n         * @static \n         */\n        public static function checkRoute($routeNames){\n            return \\HieuLe\\Active\\Active::checkRoute($routeNames);\n        }\n        \n        /**\n         * Check the current route name with one or some patterns\n         *\n         * @param array $patterns\n         * @return bool \n         * @static \n         */\n        public static function checkRoutePattern($patterns){\n            return \\HieuLe\\Active\\Active::checkRoutePattern($patterns);\n        }\n        \n        /**\n         * Check if the parameter of the current route has the correct value\n         *\n         * @param $param\n         * @param $value\n         * @return bool \n         * @static \n         */\n        public static function checkRouteParam($param, $value){\n            return \\HieuLe\\Active\\Active::checkRouteParam($param, $value);\n        }\n        \n        /**\n         * Return 'active' class if current route action match one of provided action names\n         *\n         * @param array $actions\n         * @return bool \n         * @static \n         */\n        public static function checkAction($actions){\n            return \\HieuLe\\Active\\Active::checkAction($actions);\n        }\n        \n        /**\n         * Check if the current controller class matches one of specific values\n         *\n         * @param array $controllers\n         * @return bool \n         * @static \n         */\n        public static function checkController($controllers){\n            return \\HieuLe\\Active\\Active::checkController($controllers);\n        }\n        \n        /**\n         * Get the current controller method\n         *\n         * @return string \n         * @static \n         */\n        public static function getMethod(){\n            return \\HieuLe\\Active\\Active::getMethod();\n        }\n        \n        /**\n         * Get the current action string\n         *\n         * @return string \n         * @static \n         */\n        public static function getAction(){\n            return \\HieuLe\\Active\\Active::getAction();\n        }\n        \n        /**\n         * Get the current controller class\n         *\n         * @return string \n         * @static \n         */\n        public static function getController(){\n            return \\HieuLe\\Active\\Active::getController();\n        }\n        \n    }\n\n\n    class Meta extends \\Eusonlito\\LaravelMeta\\Facade{\n        \n        /**\n         * \n         *\n         * @param array $config\n         * @return object \n         * @static \n         */\n        public static function getInstance($config = array()){\n            return \\Eusonlito\\LaravelMeta\\Meta::getInstance($config);\n        }\n        \n        /**\n         * \n         *\n         * @param array $config\n         * @return \\Eusonlito\\LaravelMeta\\this \n         * @static \n         */\n        public static function setConfig($config = array()){\n            return \\Eusonlito\\LaravelMeta\\Meta::setConfig($config);\n        }\n        \n        /**\n         * \n         *\n         * @param string $key\n         * @param null|string $default\n         * @return string \n         * @static \n         */\n        public static function get($key, $default = null){\n            return \\Eusonlito\\LaravelMeta\\Meta::get($key, $default);\n        }\n        \n        /**\n         * \n         *\n         * @param string $key\n         * @param string $value\n         * @return string \n         * @static \n         */\n        public static function set($key, $value){\n            return \\Eusonlito\\LaravelMeta\\Meta::set($key, $value);\n        }\n        \n        /**\n         * \n         *\n         * @param string $title\n         * @return string \n         * @static \n         */\n        public static function title($title = null){\n            return \\Eusonlito\\LaravelMeta\\Meta::title($title);\n        }\n        \n        /**\n         * \n         *\n         * @param string $key\n         * @param string $default\n         * @return string \n         * @static \n         */\n        public static function tag($key, $default = null){\n            return \\Eusonlito\\LaravelMeta\\Meta::tag($key, $default);\n        }\n        \n        /**\n         * \n         *\n         * @param string $key\n         * @return string \n         * @static \n         */\n        public static function tags($keys = array()){\n            return \\Eusonlito\\LaravelMeta\\Meta::tags($keys);\n        }\n        \n    }\n\n\n}\n\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "artisan",
          "type": "blob",
          "size": 1.607421875,
          "content": "#!/usr/bin/env php\n<?php\n\n/*\n|--------------------------------------------------------------------------\n| Register The Auto Loader\n|--------------------------------------------------------------------------\n|\n| Composer provides a convenient, automatically generated class loader\n| for our application. We just need to utilize it! We'll require it\n| into the script here so that we do not have to worry about the\n| loading of any our classes \"manually\". Feels great to relax.\n|\n*/\n\nrequire __DIR__.'/bootstrap/autoload.php';\n\n$app = require_once __DIR__.'/bootstrap/app.php';\n\n/*\n|--------------------------------------------------------------------------\n| Run The Artisan Application\n|--------------------------------------------------------------------------\n|\n| When we run the console application, the current CLI command will be\n| executed in this console and the response sent back to a terminal\n| or another output device for the developers. Here goes nothing!\n|\n*/\n\n$kernel = $app->make(Illuminate\\Contracts\\Console\\Kernel::class);\n\n$status = $kernel->handle(\n    $input = new Symfony\\Component\\Console\\Input\\ArgvInput,\n    new Symfony\\Component\\Console\\Output\\ConsoleOutput\n);\n\n/*\n|--------------------------------------------------------------------------\n| Shutdown The Application\n|--------------------------------------------------------------------------\n|\n| Once Artisan has finished running. We will fire off the shutdown events\n| so that any final work may be done by the application before we shut\n| down the process. This is the last thing to happen to the request.\n|\n*/\n\n$kernel->terminate($input, $status);\n\nexit($status);\n"
        },
        {
          "name": "bootstrap",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.9931640625,
          "content": "{\n    \"name\": \"laravel/laravel\",\n    \"description\": \"The Laravel Framework.\",\n    \"keywords\": [\"framework\", \"laravel\"],\n    \"license\": \"MIT\",\n    \"type\": \"project\",\n    \"require\": {\n        \"php\": \">=5.5.9\",\n        \"laravel/framework\": \"5.2.*\",\n        \"barryvdh/laravel-ide-helper\": \"^2.2\",\n        \"erusev/parsedown\": \"^1.6\",\n        \"doctrine/dbal\": \"^2.5\",\n        \"cyvelnet/laravel5-fractal\": \"^1.3\",\n        \"vinkla/hashids\": \"^2.3\",\n        \"cviebrock/eloquent-sluggable\": \"^4.0\",\n        \"league/flysystem-aws-s3-v3\": \"^1.0\",\n        \"spatie/laravel-medialibrary\": \"^3.18\",\n        \"hootlex/laravel-moderation\": \"^1.0\",\n        \"hieu-le/active\": \"^3.1\",\n        \"erusev/parsedown-extra\": \"^0.7.1\",\n        \"larapack/config-writer\": \"1.*\",\n        \"eusonlito/laravel-meta\": \"^3.0\",\n        \"ezyang/htmlpurifier\": \"^4.8\"\n    },\n    \"require-dev\": {\n        \"fzaninotto/faker\": \"~1.4\",\n        \"mockery/mockery\": \"0.9.*\",\n        \"phpunit/phpunit\": \"~4.0\",\n        \"symfony/css-selector\": \"2.8.*|3.0.*\",\n        \"symfony/dom-crawler\": \"2.8.*|3.0.*\"\n    },\n    \"autoload\": {\n        \"classmap\": [\n            \"database\"\n        ],\n        \"psr-4\": {\n            \"App\\\\\": \"app/\",\n            \"Acme\\\\\": \"app/Acme\"\n        }\n    },\n    \"autoload-dev\": {\n        \"classmap\": [\n            \"tests/TestCase.php\"\n        ],\n        \"files\": [\n            \"tests/helpers.php\"\n        ]\n    },\n    \"scripts\": {\n        \"post-root-package-install\": [\n            \"php -r \\\"copy('.env.example', '.env');\\\"\"\n        ],\n        \"post-create-project-cmd\": [\n            \"php artisan key:generate\"\n        ],\n        \"post-install-cmd\": [\n            \"Illuminate\\\\Foundation\\\\ComposerScripts::postInstall\",\n            \"php artisan optimize\"\n        ],\n        \"post-update-cmd\": [\n            \"Illuminate\\\\Foundation\\\\ComposerScripts::postUpdate\",\n            \"php artisan ide-helper:generate\",\n            \"php artisan ide-helper:meta\",\n            \"php artisan optimize\"\n        ]\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\"\n    }\n}\n"
        },
        {
          "name": "composer.lock",
          "type": "blob",
          "size": 186.8173828125,
          "content": "{\n    \"_readme\": [\n        \"This file locks the dependencies of your project to a known state\",\n        \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file\",\n        \"This file is @generated automatically\"\n    ],\n    \"hash\": \"c4885729cefa6c97cb7db038ee09eff7\",\n    \"content-hash\": \"e217a6ea92beb8c3ccba54a055c87fbc\",\n    \"packages\": [\n        {\n            \"name\": \"anahkiasen/underscore-php\",\n            \"version\": \"2.0.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/Anahkiasen/underscore-php.git\",\n                \"reference\": \"48f97b295c82d99c1fe10d8b0684c43f051b5580\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/Anahkiasen/underscore-php/zipball/48f97b295c82d99c1fe10d8b0684c43f051b5580\",\n                \"reference\": \"48f97b295c82d99c1fe10d8b0684c43f051b5580\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"doctrine/inflector\": \"^1.0\",\n                \"patchwork/utf8\": \"^1.2\",\n                \"php\": \">=5.4.0\"\n            },\n            \"require-dev\": {\n                \"fabpot/php-cs-fixer\": \"2.0.*@dev\",\n                \"phpunit/phpunit\": \"^4.6\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Underscore\\\\\": [\n                        \"src\",\n                        \"tests\"\n                    ]\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Maxime Fabre\",\n                    \"email\": \"ehtnam6@gmail.com\"\n                }\n            ],\n            \"description\": \"A redacted port of Underscore.js for PHP\",\n            \"keywords\": [\n                \"internals\",\n                \"laravel\",\n                \"toolkit\"\n            ],\n            \"time\": \"2015-05-16 19:24:58\"\n        },\n        {\n            \"name\": \"aws/aws-sdk-php\",\n            \"version\": \"3.18.18\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/aws/aws-sdk-php.git\",\n                \"reference\": \"68b9d0b7e007782bc0f2633cdf5a4a6bf08aaafc\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/aws/aws-sdk-php/zipball/68b9d0b7e007782bc0f2633cdf5a4a6bf08aaafc\",\n                \"reference\": \"68b9d0b7e007782bc0f2633cdf5a4a6bf08aaafc\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"guzzlehttp/guzzle\": \"~5.3|~6.0.1|~6.1\",\n                \"guzzlehttp/promises\": \"~1.0\",\n                \"guzzlehttp/psr7\": \"~1.0\",\n                \"mtdowling/jmespath.php\": \"~2.2\",\n                \"php\": \">=5.5\"\n            },\n            \"require-dev\": {\n                \"andrewsville/php-token-reflection\": \"^1.4\",\n                \"aws/aws-php-sns-message-validator\": \"~1.0\",\n                \"behat/behat\": \"~3.0\",\n                \"doctrine/cache\": \"~1.4\",\n                \"ext-dom\": \"*\",\n                \"ext-json\": \"*\",\n                \"ext-openssl\": \"*\",\n                \"ext-pcre\": \"*\",\n                \"ext-simplexml\": \"*\",\n                \"ext-spl\": \"*\",\n                \"nette/neon\": \"^2.3\",\n                \"phpunit/phpunit\": \"~4.0|~5.0\",\n                \"psr/cache\": \"^1.0\"\n            },\n            \"suggest\": {\n                \"aws/aws-php-sns-message-validator\": \"To validate incoming SNS notifications\",\n                \"doctrine/cache\": \"To use the DoctrineCacheAdapter\",\n                \"ext-curl\": \"To send requests using cURL\",\n                \"ext-openssl\": \"Allows working with CloudFront private distributions and verifying received SNS messages\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Aws\\\\\": \"src/\"\n                },\n                \"files\": [\n                    \"src/functions.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"Apache-2.0\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Amazon Web Services\",\n                    \"homepage\": \"http://aws.amazon.com\"\n                }\n            ],\n            \"description\": \"AWS SDK for PHP - Use Amazon Web Services in your PHP project\",\n            \"homepage\": \"http://aws.amazon.com/sdkforphp\",\n            \"keywords\": [\n                \"amazon\",\n                \"aws\",\n                \"cloud\",\n                \"dynamodb\",\n                \"ec2\",\n                \"glacier\",\n                \"s3\",\n                \"sdk\"\n            ],\n            \"time\": \"2016-06-14 20:35:03\"\n        },\n        {\n            \"name\": \"barryvdh/laravel-ide-helper\",\n            \"version\": \"v2.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/barryvdh/laravel-ide-helper.git\",\n                \"reference\": \"a9484c67d1305e9e2c71d2dfaaed6639200d874c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/barryvdh/laravel-ide-helper/zipball/a9484c67d1305e9e2c71d2dfaaed6639200d874c\",\n                \"reference\": \"a9484c67d1305e9e2c71d2dfaaed6639200d874c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"barryvdh/reflection-docblock\": \"^2.0.4\",\n                \"illuminate/console\": \"^5.0,<5.4\",\n                \"illuminate/filesystem\": \"^5.0,<5.4\",\n                \"illuminate/support\": \"^5.0,<5.4\",\n                \"php\": \">=5.4.0\",\n                \"symfony/class-loader\": \"^2.3|^3.0\"\n            },\n            \"require-dev\": {\n                \"doctrine/dbal\": \"~2.3\",\n                \"phpunit/phpunit\": \"4.*\",\n                \"scrutinizer/ocular\": \"~1.1\",\n                \"squizlabs/php_codesniffer\": \"~2.3\"\n            },\n            \"suggest\": {\n                \"doctrine/dbal\": \"Load information from the database about models for phpdocs (~2.3)\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.1-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Barryvdh\\\\LaravelIdeHelper\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Barry vd. Heuvel\",\n                    \"email\": \"barryvdh@gmail.com\"\n                }\n            ],\n            \"description\": \"Laravel IDE Helper, generates correct PHPDocs for all Facade classes, to improve auto-completion.\",\n            \"keywords\": [\n                \"autocomplete\",\n                \"codeintel\",\n                \"helper\",\n                \"ide\",\n                \"laravel\",\n                \"netbeans\",\n                \"phpdoc\",\n                \"phpstorm\",\n                \"sublime\"\n            ],\n            \"time\": \"2016-06-13 19:36:24\"\n        },\n        {\n            \"name\": \"barryvdh/reflection-docblock\",\n            \"version\": \"v2.0.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/barryvdh/ReflectionDocBlock.git\",\n                \"reference\": \"3dcbd98b5d9384a5357266efba8fd29884458e5c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/barryvdh/ReflectionDocBlock/zipball/3dcbd98b5d9384a5357266efba8fd29884458e5c\",\n                \"reference\": \"3dcbd98b5d9384a5357266efba8fd29884458e5c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.0,<4.5\"\n            },\n            \"suggest\": {\n                \"dflydev/markdown\": \"~1.0\",\n                \"erusev/parsedown\": \"~1.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Barryvdh\": [\n                        \"src/\"\n                    ]\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Mike van Riel\",\n                    \"email\": \"mike.vanriel@naenius.com\"\n                }\n            ],\n            \"time\": \"2016-06-13 19:28:20\"\n        },\n        {\n            \"name\": \"classpreloader/classpreloader\",\n            \"version\": \"3.0.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/ClassPreloader/ClassPreloader.git\",\n                \"reference\": \"9b10b913c2bdf90c3d2e0d726b454fb7f77c552a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/ClassPreloader/ClassPreloader/zipball/9b10b913c2bdf90c3d2e0d726b454fb7f77c552a\",\n                \"reference\": \"9b10b913c2bdf90c3d2e0d726b454fb7f77c552a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"nikic/php-parser\": \"^1.0|^2.0\",\n                \"php\": \">=5.5.9\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^4.8|^5.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"ClassPreloader\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Michael Dowling\",\n                    \"email\": \"mtdowling@gmail.com\"\n                },\n                {\n                    \"name\": \"Graham Campbell\",\n                    \"email\": \"graham@alt-three.com\"\n                }\n            ],\n            \"description\": \"Helps class loading performance by generating a single PHP file containing all of the autoloaded files for a specific use case\",\n            \"keywords\": [\n                \"autoload\",\n                \"class\",\n                \"preload\"\n            ],\n            \"time\": \"2015-11-09 22:51:51\"\n        },\n        {\n            \"name\": \"cocur/slugify\",\n            \"version\": \"v2.1.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/cocur/slugify.git\",\n                \"reference\": \"eee9879958875921082293dbdbf4866b641864f2\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/cocur/slugify/zipball/eee9879958875921082293dbdbf4866b641864f2\",\n                \"reference\": \"eee9879958875921082293dbdbf4866b641864f2\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\"\n            },\n            \"require-dev\": {\n                \"laravel/framework\": \"~5.1\",\n                \"latte/latte\": \"~2.2\",\n                \"mikey179/vfsstream\": \"~1.6\",\n                \"mockery/mockery\": \"~0.9\",\n                \"nette/di\": \"~2.2\",\n                \"phpunit/phpunit\": \"~4.8|~5.2\",\n                \"pimple/pimple\": \"~1.1\",\n                \"plumphp/plum\": \"~0.1\",\n                \"silex/silex\": \"~1.3\",\n                \"symfony/config\": \"~2.4|~3.0\",\n                \"symfony/dependency-injection\": \"~2.4|~3.0\",\n                \"symfony/http-kernel\": \"~2.4|~3.0\",\n                \"twig/twig\": \"~1.12\",\n                \"zendframework/zend-modulemanager\": \"~2.2\",\n                \"zendframework/zend-servicemanager\": \"~2.2\",\n                \"zendframework/zend-view\": \"~2.2\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Cocur\\\\Slugify\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Ivo Bathke\",\n                    \"email\": \"ivo.bathke@gmail.com\"\n                },\n                {\n                    \"name\": \"Florian Eckerstorfer\",\n                    \"email\": \"florian@eckerstorfer.co\",\n                    \"homepage\": \"https://florian.ec\"\n                }\n            ],\n            \"description\": \"Converts a string into a slug.\",\n            \"keywords\": [\n                \"slug\",\n                \"slugify\"\n            ],\n            \"time\": \"2016-04-08 18:57:21\"\n        },\n        {\n            \"name\": \"cviebrock/eloquent-sluggable\",\n            \"version\": \"4.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/cviebrock/eloquent-sluggable.git\",\n                \"reference\": \"304470571269ec81e3b4d4f26e84ae06ee766fc4\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/cviebrock/eloquent-sluggable/zipball/304470571269ec81e3b4d4f26e84ae06ee766fc4\",\n                \"reference\": \"304470571269ec81e3b4d4f26e84ae06ee766fc4\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"cocur/slugify\": \"^2.1\",\n                \"illuminate/config\": \"5.1.* || 5.2.* || 5.3.*\",\n                \"illuminate/database\": \"5.1.* || 5.2.* || 5.3.*\",\n                \"illuminate/support\": \"5.1.* || 5.2.* || 5.3.*\",\n                \"php\": \"^5.5.9 || ^7.0\"\n            },\n            \"require-dev\": {\n                \"mockery/mockery\": \"^0.9.4\",\n                \"orchestra/testbench\": \"^3.0\",\n                \"phpunit/phpunit\": \"^4.8 || ^5.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Cviebrock\\\\EloquentSluggable\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Colin Viebrock\",\n                    \"email\": \"colin@viebrock.ca\"\n                }\n            ],\n            \"description\": \"Easy creation of slugs for your Eloquent models in Laravel\",\n            \"homepage\": \"https://github.com/cviebrock/eloquent-sluggable\",\n            \"keywords\": [\n                \"eloquent\",\n                \"laravel\",\n                \"slug\"\n            ],\n            \"time\": \"2016-06-13 17:38:46\"\n        },\n        {\n            \"name\": \"cyvelnet/laravel5-fractal\",\n            \"version\": \"v1.3.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/Cyvelnet/laravel5-fractal.git\",\n                \"reference\": \"94f1a1f712252eac868e9a66952f22ae62234fa3\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/Cyvelnet/laravel5-fractal/zipball/94f1a1f712252eac868e9a66952f22ae62234fa3\",\n                \"reference\": \"94f1a1f712252eac868e9a66952f22ae62234fa3\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"illuminate/support\": \"5.0.x|5.1.x|5.2.x\",\n                \"league/fractal\": \"0.13.*\",\n                \"php\": \">=5.4.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/migrations\"\n                ],\n                \"psr-0\": {\n                    \"Cyvelnet\\\\Laravel5Fractal\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Cyvelnet\",\n                    \"email\": \"cyvelnet@gmail.com\"\n                }\n            ],\n            \"description\": \"A simple fractal service provider and transformer generator for laravel 5.\",\n            \"keywords\": [\n                \"Api transformer\",\n                \"fractal\",\n                \"laravel5\"\n            ],\n            \"time\": \"2015-12-23 05:11:58\"\n        },\n        {\n            \"name\": \"dnoegel/php-xdg-base-dir\",\n            \"version\": \"0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/dnoegel/php-xdg-base-dir.git\",\n                \"reference\": \"265b8593498b997dc2d31e75b89f053b5cc9621a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/dnoegel/php-xdg-base-dir/zipball/265b8593498b997dc2d31e75b89f053b5cc9621a\",\n                \"reference\": \"265b8593498b997dc2d31e75b89f053b5cc9621a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"@stable\"\n            },\n            \"type\": \"project\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"XdgBaseDir\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"description\": \"implementation of xdg base directory specification for php\",\n            \"time\": \"2014-10-24 07:27:01\"\n        },\n        {\n            \"name\": \"doctrine/annotations\",\n            \"version\": \"v1.2.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/doctrine/annotations.git\",\n                \"reference\": \"f25c8aab83e0c3e976fd7d19875f198ccf2f7535\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/doctrine/annotations/zipball/f25c8aab83e0c3e976fd7d19875f198ccf2f7535\",\n                \"reference\": \"f25c8aab83e0c3e976fd7d19875f198ccf2f7535\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"doctrine/lexer\": \"1.*\",\n                \"php\": \">=5.3.2\"\n            },\n            \"require-dev\": {\n                \"doctrine/cache\": \"1.*\",\n                \"phpunit/phpunit\": \"4.*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.3.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Doctrine\\\\Common\\\\Annotations\\\\\": \"lib/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Roman Borschel\",\n                    \"email\": \"roman@code-factory.org\"\n                },\n                {\n                    \"name\": \"Benjamin Eberlei\",\n                    \"email\": \"kontakt@beberlei.de\"\n                },\n                {\n                    \"name\": \"Guilherme Blanco\",\n                    \"email\": \"guilhermeblanco@gmail.com\"\n                },\n                {\n                    \"name\": \"Jonathan Wage\",\n                    \"email\": \"jonwage@gmail.com\"\n                },\n                {\n                    \"name\": \"Johannes Schmitt\",\n                    \"email\": \"schmittjoh@gmail.com\"\n                }\n            ],\n            \"description\": \"Docblock Annotations Parser\",\n            \"homepage\": \"http://www.doctrine-project.org\",\n            \"keywords\": [\n                \"annotations\",\n                \"docblock\",\n                \"parser\"\n            ],\n            \"time\": \"2015-08-31 12:32:49\"\n        },\n        {\n            \"name\": \"doctrine/cache\",\n            \"version\": \"v1.6.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/doctrine/cache.git\",\n                \"reference\": \"f8af318d14bdb0eff0336795b428b547bd39ccb6\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/doctrine/cache/zipball/f8af318d14bdb0eff0336795b428b547bd39ccb6\",\n                \"reference\": \"f8af318d14bdb0eff0336795b428b547bd39ccb6\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"~5.5|~7.0\"\n            },\n            \"conflict\": {\n                \"doctrine/common\": \">2.2,<2.4\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.8|~5.0\",\n                \"predis/predis\": \"~1.0\",\n                \"satooshi/php-coveralls\": \"~0.6\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.6.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Doctrine\\\\Common\\\\Cache\\\\\": \"lib/Doctrine/Common/Cache\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Roman Borschel\",\n                    \"email\": \"roman@code-factory.org\"\n                },\n                {\n                    \"name\": \"Benjamin Eberlei\",\n                    \"email\": \"kontakt@beberlei.de\"\n                },\n                {\n                    \"name\": \"Guilherme Blanco\",\n                    \"email\": \"guilhermeblanco@gmail.com\"\n                },\n                {\n                    \"name\": \"Jonathan Wage\",\n                    \"email\": \"jonwage@gmail.com\"\n                },\n                {\n                    \"name\": \"Johannes Schmitt\",\n                    \"email\": \"schmittjoh@gmail.com\"\n                }\n            ],\n            \"description\": \"Caching library offering an object-oriented API for many cache backends\",\n            \"homepage\": \"http://www.doctrine-project.org\",\n            \"keywords\": [\n                \"cache\",\n                \"caching\"\n            ],\n            \"time\": \"2015-12-31 16:37:02\"\n        },\n        {\n            \"name\": \"doctrine/collections\",\n            \"version\": \"v1.3.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/doctrine/collections.git\",\n                \"reference\": \"6c1e4eef75f310ea1b3e30945e9f06e652128b8a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/doctrine/collections/zipball/6c1e4eef75f310ea1b3e30945e9f06e652128b8a\",\n                \"reference\": \"6c1e4eef75f310ea1b3e30945e9f06e652128b8a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.2.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Doctrine\\\\Common\\\\Collections\\\\\": \"lib/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Roman Borschel\",\n                    \"email\": \"roman@code-factory.org\"\n                },\n                {\n                    \"name\": \"Benjamin Eberlei\",\n                    \"email\": \"kontakt@beberlei.de\"\n                },\n                {\n                    \"name\": \"Guilherme Blanco\",\n                    \"email\": \"guilhermeblanco@gmail.com\"\n                },\n                {\n                    \"name\": \"Jonathan Wage\",\n                    \"email\": \"jonwage@gmail.com\"\n                },\n                {\n                    \"name\": \"Johannes Schmitt\",\n                    \"email\": \"schmittjoh@gmail.com\"\n                }\n            ],\n            \"description\": \"Collections Abstraction library\",\n            \"homepage\": \"http://www.doctrine-project.org\",\n            \"keywords\": [\n                \"array\",\n                \"collections\",\n                \"iterator\"\n            ],\n            \"time\": \"2015-04-14 22:21:58\"\n        },\n        {\n            \"name\": \"doctrine/common\",\n            \"version\": \"v2.6.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/doctrine/common.git\",\n                \"reference\": \"a579557bc689580c19fee4e27487a67fe60defc0\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/doctrine/common/zipball/a579557bc689580c19fee4e27487a67fe60defc0\",\n                \"reference\": \"a579557bc689580c19fee4e27487a67fe60defc0\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"doctrine/annotations\": \"1.*\",\n                \"doctrine/cache\": \"1.*\",\n                \"doctrine/collections\": \"1.*\",\n                \"doctrine/inflector\": \"1.*\",\n                \"doctrine/lexer\": \"1.*\",\n                \"php\": \"~5.5|~7.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.8|~5.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.7.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Doctrine\\\\Common\\\\\": \"lib/Doctrine/Common\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Roman Borschel\",\n                    \"email\": \"roman@code-factory.org\"\n                },\n                {\n                    \"name\": \"Benjamin Eberlei\",\n                    \"email\": \"kontakt@beberlei.de\"\n                },\n                {\n                    \"name\": \"Guilherme Blanco\",\n                    \"email\": \"guilhermeblanco@gmail.com\"\n                },\n                {\n                    \"name\": \"Jonathan Wage\",\n                    \"email\": \"jonwage@gmail.com\"\n                },\n                {\n                    \"name\": \"Johannes Schmitt\",\n                    \"email\": \"schmittjoh@gmail.com\"\n                }\n            ],\n            \"description\": \"Common Library for Doctrine projects\",\n            \"homepage\": \"http://www.doctrine-project.org\",\n            \"keywords\": [\n                \"annotations\",\n                \"collections\",\n                \"eventmanager\",\n                \"persistence\",\n                \"spl\"\n            ],\n            \"time\": \"2015-12-25 13:18:31\"\n        },\n        {\n            \"name\": \"doctrine/dbal\",\n            \"version\": \"v2.5.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/doctrine/dbal.git\",\n                \"reference\": \"abbdfd1cff43a7b99d027af3be709bc8fc7d4769\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/doctrine/dbal/zipball/abbdfd1cff43a7b99d027af3be709bc8fc7d4769\",\n                \"reference\": \"abbdfd1cff43a7b99d027af3be709bc8fc7d4769\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"doctrine/common\": \">=2.4,<2.7-dev\",\n                \"php\": \">=5.3.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"4.*\",\n                \"symfony/console\": \"2.*\"\n            },\n            \"suggest\": {\n                \"symfony/console\": \"For helpful console commands such as SQL execution and import of files.\"\n            },\n            \"bin\": [\n                \"bin/doctrine-dbal\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.5.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Doctrine\\\\DBAL\\\\\": \"lib/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Roman Borschel\",\n                    \"email\": \"roman@code-factory.org\"\n                },\n                {\n                    \"name\": \"Benjamin Eberlei\",\n                    \"email\": \"kontakt@beberlei.de\"\n                },\n                {\n                    \"name\": \"Guilherme Blanco\",\n                    \"email\": \"guilhermeblanco@gmail.com\"\n                },\n                {\n                    \"name\": \"Jonathan Wage\",\n                    \"email\": \"jonwage@gmail.com\"\n                }\n            ],\n            \"description\": \"Database Abstraction Layer\",\n            \"homepage\": \"http://www.doctrine-project.org\",\n            \"keywords\": [\n                \"database\",\n                \"dbal\",\n                \"persistence\",\n                \"queryobject\"\n            ],\n            \"time\": \"2016-01-05 22:11:12\"\n        },\n        {\n            \"name\": \"doctrine/inflector\",\n            \"version\": \"v1.1.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/doctrine/inflector.git\",\n                \"reference\": \"90b2128806bfde671b6952ab8bea493942c1fdae\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/doctrine/inflector/zipball/90b2128806bfde671b6952ab8bea493942c1fdae\",\n                \"reference\": \"90b2128806bfde671b6952ab8bea493942c1fdae\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"4.*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.1.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Doctrine\\\\Common\\\\Inflector\\\\\": \"lib/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Roman Borschel\",\n                    \"email\": \"roman@code-factory.org\"\n                },\n                {\n                    \"name\": \"Benjamin Eberlei\",\n                    \"email\": \"kontakt@beberlei.de\"\n                },\n                {\n                    \"name\": \"Guilherme Blanco\",\n                    \"email\": \"guilhermeblanco@gmail.com\"\n                },\n                {\n                    \"name\": \"Jonathan Wage\",\n                    \"email\": \"jonwage@gmail.com\"\n                },\n                {\n                    \"name\": \"Johannes Schmitt\",\n                    \"email\": \"schmittjoh@gmail.com\"\n                }\n            ],\n            \"description\": \"Common String Manipulations with regard to casing and singular/plural rules.\",\n            \"homepage\": \"http://www.doctrine-project.org\",\n            \"keywords\": [\n                \"inflection\",\n                \"pluralize\",\n                \"singularize\",\n                \"string\"\n            ],\n            \"time\": \"2015-11-06 14:35:42\"\n        },\n        {\n            \"name\": \"doctrine/lexer\",\n            \"version\": \"v1.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/doctrine/lexer.git\",\n                \"reference\": \"83893c552fd2045dd78aef794c31e694c37c0b8c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/doctrine/lexer/zipball/83893c552fd2045dd78aef794c31e694c37c0b8c\",\n                \"reference\": \"83893c552fd2045dd78aef794c31e694c37c0b8c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.2\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Doctrine\\\\Common\\\\Lexer\\\\\": \"lib/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Roman Borschel\",\n                    \"email\": \"roman@code-factory.org\"\n                },\n                {\n                    \"name\": \"Guilherme Blanco\",\n                    \"email\": \"guilhermeblanco@gmail.com\"\n                },\n                {\n                    \"name\": \"Johannes Schmitt\",\n                    \"email\": \"schmittjoh@gmail.com\"\n                }\n            ],\n            \"description\": \"Base library for a lexer that can be used in Top-Down, Recursive Descent Parsers.\",\n            \"homepage\": \"http://www.doctrine-project.org\",\n            \"keywords\": [\n                \"lexer\",\n                \"parser\"\n            ],\n            \"time\": \"2014-09-09 13:34:57\"\n        },\n        {\n            \"name\": \"erusev/parsedown\",\n            \"version\": \"1.6.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/erusev/parsedown.git\",\n                \"reference\": \"3ebbd730b5c2cf5ce78bc1bf64071407fc6674b7\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/erusev/parsedown/zipball/3ebbd730b5c2cf5ce78bc1bf64071407fc6674b7\",\n                \"reference\": \"3ebbd730b5c2cf5ce78bc1bf64071407fc6674b7\",\n                \"shasum\": \"\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Parsedown\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Emanuil Rusev\",\n                    \"email\": \"hello@erusev.com\",\n                    \"homepage\": \"http://erusev.com\"\n                }\n            ],\n            \"description\": \"Parser for Markdown.\",\n            \"homepage\": \"http://parsedown.org\",\n            \"keywords\": [\n                \"markdown\",\n                \"parser\"\n            ],\n            \"time\": \"2015-10-04 16:44:32\"\n        },\n        {\n            \"name\": \"erusev/parsedown-extra\",\n            \"version\": \"0.7.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/erusev/parsedown-extra.git\",\n                \"reference\": \"0db5cce7354e4b76f155d092ab5eb3981c21258c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/erusev/parsedown-extra/zipball/0db5cce7354e4b76f155d092ab5eb3981c21258c\",\n                \"reference\": \"0db5cce7354e4b76f155d092ab5eb3981c21258c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"erusev/parsedown\": \"~1.4\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-0\": {\n                    \"ParsedownExtra\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Emanuil Rusev\",\n                    \"email\": \"hello@erusev.com\",\n                    \"homepage\": \"http://erusev.com\"\n                }\n            ],\n            \"description\": \"An extension of Parsedown that adds support for Markdown Extra.\",\n            \"homepage\": \"https://github.com/erusev/parsedown-extra\",\n            \"keywords\": [\n                \"markdown\",\n                \"markdown extra\",\n                \"parsedown\",\n                \"parser\"\n            ],\n            \"time\": \"2015-11-01 10:19:22\"\n        },\n        {\n            \"name\": \"eusonlito/laravel-meta\",\n            \"version\": \"v3.0.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/eusonlito/laravel-Meta.git\",\n                \"reference\": \"dd43eaebbcbebc9fefb6e4622f611db2e0eb3f1a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/eusonlito/laravel-Meta/zipball/dd43eaebbcbebc9fefb6e4622f611db2e0eb3f1a\",\n                \"reference\": \"dd43eaebbcbebc9fefb6e4622f611db2e0eb3f1a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.4\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"*\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Eusonlito\\\\LaravelMeta\\\\\": \"src/Eusonlito/LaravelMeta/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Lito\",\n                    \"email\": \"lito@eordes.com\"\n                }\n            ],\n            \"description\": \"A package to manage Header Meta Tags\",\n            \"keywords\": [\n                \"head\",\n                \"laravel\",\n                \"meta\",\n                \"tags\"\n            ],\n            \"time\": \"2016-05-26 06:56:54\"\n        },\n        {\n            \"name\": \"ezyang/htmlpurifier\",\n            \"version\": \"v4.8.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/ezyang/htmlpurifier.git\",\n                \"reference\": \"d0c392f77d2f2a3dcf7fcb79e2a1e2b8804e75b2\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/ezyang/htmlpurifier/zipball/d0c392f77d2f2a3dcf7fcb79e2a1e2b8804e75b2\",\n                \"reference\": \"d0c392f77d2f2a3dcf7fcb79e2a1e2b8804e75b2\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.2\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-0\": {\n                    \"HTMLPurifier\": \"library/\"\n                },\n                \"files\": [\n                    \"library/HTMLPurifier.composer.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"LGPL\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Edward Z. Yang\",\n                    \"email\": \"admin@htmlpurifier.org\",\n                    \"homepage\": \"http://ezyang.com\"\n                }\n            ],\n            \"description\": \"Standards compliant HTML filter written in PHP\",\n            \"homepage\": \"http://htmlpurifier.org/\",\n            \"keywords\": [\n                \"html\"\n            ],\n            \"time\": \"2016-07-16 12:58:58\"\n        },\n        {\n            \"name\": \"fzaninotto/faker\",\n            \"version\": \"v1.6.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/fzaninotto/Faker.git\",\n                \"reference\": \"44f9a286a04b80c76a4e5fb7aad8bb539b920123\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/fzaninotto/Faker/zipball/44f9a286a04b80c76a4e5fb7aad8bb539b920123\",\n                \"reference\": \"44f9a286a04b80c76a4e5fb7aad8bb539b920123\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^5.3.3|^7.0\"\n            },\n            \"require-dev\": {\n                \"ext-intl\": \"*\",\n                \"phpunit/phpunit\": \"~4.0\",\n                \"squizlabs/php_codesniffer\": \"~1.5\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": []\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Faker\\\\\": \"src/Faker/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"François Zaninotto\"\n                }\n            ],\n            \"description\": \"Faker is a PHP library that generates fake data for you.\",\n            \"keywords\": [\n                \"data\",\n                \"faker\",\n                \"fixtures\"\n            ],\n            \"time\": \"2016-04-29 12:21:54\"\n        },\n        {\n            \"name\": \"graham-campbell/manager\",\n            \"version\": \"v2.4.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/GrahamCampbell/Laravel-Manager.git\",\n                \"reference\": \"fd9052082e2c69c9a67d3e8d7dfa94cb33f8ab0b\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/GrahamCampbell/Laravel-Manager/zipball/fd9052082e2c69c9a67d3e8d7dfa94cb33f8ab0b\",\n                \"reference\": \"fd9052082e2c69c9a67d3e8d7dfa94cb33f8ab0b\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"illuminate/contracts\": \"5.1.*|5.2.*|5.3.*\",\n                \"illuminate/support\": \"5.1.*|5.2.*|5.3.*\",\n                \"php\": \">=5.5.9\"\n            },\n            \"require-dev\": {\n                \"graham-campbell/testbench-core\": \"^1.1\",\n                \"mockery/mockery\": \"^0.9.4\",\n                \"phpunit/phpunit\": \"^4.8|^5.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.4-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"GrahamCampbell\\\\Manager\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Graham Campbell\",\n                    \"email\": \"graham@alt-three.com\"\n                }\n            ],\n            \"description\": \"Manager Provides Some Manager Functionality For Laravel 5\",\n            \"keywords\": [\n                \"Graham Campbell\",\n                \"GrahamCampbell\",\n                \"Laravel Manager\",\n                \"Laravel-Manager\",\n                \"connector\",\n                \"framework\",\n                \"interface\",\n                \"laravel\",\n                \"manager\"\n            ],\n            \"time\": \"2016-04-26 14:27:59\"\n        },\n        {\n            \"name\": \"guzzlehttp/guzzle\",\n            \"version\": \"6.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/guzzle/guzzle.git\",\n                \"reference\": \"d094e337976dff9d8e2424e8485872194e768662\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/guzzle/guzzle/zipball/d094e337976dff9d8e2424e8485872194e768662\",\n                \"reference\": \"d094e337976dff9d8e2424e8485872194e768662\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"guzzlehttp/promises\": \"~1.0\",\n                \"guzzlehttp/psr7\": \"~1.1\",\n                \"php\": \">=5.5.0\"\n            },\n            \"require-dev\": {\n                \"ext-curl\": \"*\",\n                \"phpunit/phpunit\": \"~4.0\",\n                \"psr/log\": \"~1.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"6.2-dev\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"src/functions_include.php\"\n                ],\n                \"psr-4\": {\n                    \"GuzzleHttp\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Michael Dowling\",\n                    \"email\": \"mtdowling@gmail.com\",\n                    \"homepage\": \"https://github.com/mtdowling\"\n                }\n            ],\n            \"description\": \"Guzzle is a PHP HTTP client library\",\n            \"homepage\": \"http://guzzlephp.org/\",\n            \"keywords\": [\n                \"client\",\n                \"curl\",\n                \"framework\",\n                \"http\",\n                \"http client\",\n                \"rest\",\n                \"web service\"\n            ],\n            \"time\": \"2016-03-21 20:02:09\"\n        },\n        {\n            \"name\": \"guzzlehttp/promises\",\n            \"version\": \"1.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/guzzle/promises.git\",\n                \"reference\": \"c10d860e2a9595f8883527fa0021c7da9e65f579\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/guzzle/promises/zipball/c10d860e2a9595f8883527fa0021c7da9e65f579\",\n                \"reference\": \"c10d860e2a9595f8883527fa0021c7da9e65f579\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"GuzzleHttp\\\\Promise\\\\\": \"src/\"\n                },\n                \"files\": [\n                    \"src/functions_include.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Michael Dowling\",\n                    \"email\": \"mtdowling@gmail.com\",\n                    \"homepage\": \"https://github.com/mtdowling\"\n                }\n            ],\n            \"description\": \"Guzzle promises library\",\n            \"keywords\": [\n                \"promise\"\n            ],\n            \"time\": \"2016-05-18 16:56:05\"\n        },\n        {\n            \"name\": \"guzzlehttp/psr7\",\n            \"version\": \"1.3.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/guzzle/psr7.git\",\n                \"reference\": \"31382fef2889136415751badebbd1cb022a4ed72\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/guzzle/psr7/zipball/31382fef2889136415751badebbd1cb022a4ed72\",\n                \"reference\": \"31382fef2889136415751badebbd1cb022a4ed72\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.4.0\",\n                \"psr/http-message\": \"~1.0\"\n            },\n            \"provide\": {\n                \"psr/http-message-implementation\": \"1.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"GuzzleHttp\\\\Psr7\\\\\": \"src/\"\n                },\n                \"files\": [\n                    \"src/functions_include.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Michael Dowling\",\n                    \"email\": \"mtdowling@gmail.com\",\n                    \"homepage\": \"https://github.com/mtdowling\"\n                }\n            ],\n            \"description\": \"PSR-7 message implementation\",\n            \"keywords\": [\n                \"http\",\n                \"message\",\n                \"stream\",\n                \"uri\"\n            ],\n            \"time\": \"2016-04-13 19:56:01\"\n        },\n        {\n            \"name\": \"hashids/hashids\",\n            \"version\": \"1.0.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/ivanakimov/hashids.php.git\",\n                \"reference\": \"6bd7ceffb2ccddef6cd64e88f1717f97d131cc3c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/ivanakimov/hashids.php/zipball/6bd7ceffb2ccddef6cd64e88f1717f97d131cc3c\",\n                \"reference\": \"6bd7ceffb2ccddef6cd64e88f1717f97d131cc3c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^5.3.3 || ^7.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^4.8 || ^5.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Hashids\\\\\": \"lib/Hashids/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Ivan Akimov\",\n                    \"email\": \"ivan@barreleye.com\",\n                    \"homepage\": \"https://twitter.com/IvanAkimov\"\n                }\n            ],\n            \"description\": \"Generate short, unique, non-sequential ids (like YouTube and Bitly) from numbers.\",\n            \"homepage\": \"http://hashids.org/php\",\n            \"keywords\": [\n                \"bitly\",\n                \"decode\",\n                \"encode\",\n                \"hash\",\n                \"hashid\",\n                \"hashids\",\n                \"ids\",\n                \"obfuscate\",\n                \"youtube\"\n            ],\n            \"time\": \"2016-01-21 04:26:38\"\n        },\n        {\n            \"name\": \"hieu-le/active\",\n            \"version\": \"3.1.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/letrunghieu/active.git\",\n                \"reference\": \"d2efb0db1682e858d69a1ea63a84b88be659160a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/letrunghieu/active/zipball/d2efb0db1682e858d69a1ea63a84b88be659160a\",\n                \"reference\": \"d2efb0db1682e858d69a1ea63a84b88be659160a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"laravel/framework\": \"^5.0\",\n                \"orchestra/testbench\": \"^3.1\",\n                \"php\": \">=5.5.9\"\n            },\n            \"require-dev\": {\n                \"codeclimate/php-test-reporter\": \"dev-master\",\n                \"mockery/mockery\": \"dev-master\",\n                \"phpunit/phpunit\": \"~4.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"HieuLe\\\\Active\\\\\": \"src/\",\n                    \"HieuLe\\\\ActiveTest\\\\\": \"tests/\"\n                },\n                \"files\": [\n                    \"src/helpers.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Hieu Le\",\n                    \"email\": \"letrunghieu.cse09@gmail.com\",\n                    \"homepage\": \"https://www.hieule.info\"\n                }\n            ],\n            \"description\": \"The helper class for Laravel (4/5) applications to get active class base on current route\",\n            \"homepage\": \"https://www.hieule.info/tag/laravel-active/\",\n            \"keywords\": [\n                \"active\",\n                \"laravel\",\n                \"routing\"\n            ],\n            \"time\": \"2016-01-09 03:12:24\"\n        },\n        {\n            \"name\": \"hootlex/laravel-moderation\",\n            \"version\": \"v1.0.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/hootlex/laravel-moderation.git\",\n                \"reference\": \"84b8fda3cd7e5abea3125626aa63137ae2e1202d\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/hootlex/laravel-moderation/zipball/84b8fda3cd7e5abea3125626aa63137ae2e1202d\",\n                \"reference\": \"84b8fda3cd7e5abea3125626aa63137ae2e1202d\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.4.0\"\n            },\n            \"require-dev\": {\n                \"laravel/laravel\": \"5.*\",\n                \"phpunit/phpunit\": \"5.*\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Hootlex\\\\Moderation\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Alex Kyriakidis\",\n                    \"email\": \"hootlex@icloud.com\"\n                }\n            ],\n            \"description\": \"A simple Content Moderation System for Laravel 5.* that allows you to Approve or Reject resources like posts, comments, users, etc.\",\n            \"keywords\": [\n                \"content-moderation\",\n                \"laravel\",\n                \"moderation\",\n                \"moderation-system\"\n            ],\n            \"time\": \"2016-06-22 19:15:35\"\n        },\n        {\n            \"name\": \"intervention/image\",\n            \"version\": \"2.3.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/Intervention/image.git\",\n                \"reference\": \"22088b04728a039bd1fc32f7e79a89a118b78698\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/Intervention/image/zipball/22088b04728a039bd1fc32f7e79a89a118b78698\",\n                \"reference\": \"22088b04728a039bd1fc32f7e79a89a118b78698\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-fileinfo\": \"*\",\n                \"guzzlehttp/psr7\": \"~1.1\",\n                \"php\": \">=5.4.0\"\n            },\n            \"require-dev\": {\n                \"mockery/mockery\": \"~0.9.2\",\n                \"phpunit/phpunit\": \"3.*\"\n            },\n            \"suggest\": {\n                \"ext-gd\": \"to use GD library based image processing.\",\n                \"ext-imagick\": \"to use Imagick based image processing.\",\n                \"intervention/imagecache\": \"Caching extension for the Intervention Image library\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Intervention\\\\Image\\\\\": \"src/Intervention/Image\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Oliver Vogel\",\n                    \"email\": \"oliver@olivervogel.net\",\n                    \"homepage\": \"http://olivervogel.net/\"\n                }\n            ],\n            \"description\": \"Image handling and manipulation library with support for Laravel integration\",\n            \"homepage\": \"http://image.intervention.io/\",\n            \"keywords\": [\n                \"gd\",\n                \"image\",\n                \"imagick\",\n                \"laravel\",\n                \"thumbnail\",\n                \"watermark\"\n            ],\n            \"time\": \"2016-04-26 14:08:40\"\n        },\n        {\n            \"name\": \"jakub-onderka/php-console-color\",\n            \"version\": \"0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/JakubOnderka/PHP-Console-Color.git\",\n                \"reference\": \"e0b393dacf7703fc36a4efc3df1435485197e6c1\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/JakubOnderka/PHP-Console-Color/zipball/e0b393dacf7703fc36a4efc3df1435485197e6c1\",\n                \"reference\": \"e0b393dacf7703fc36a4efc3df1435485197e6c1\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.2\"\n            },\n            \"require-dev\": {\n                \"jakub-onderka/php-code-style\": \"1.0\",\n                \"jakub-onderka/php-parallel-lint\": \"0.*\",\n                \"jakub-onderka/php-var-dump-check\": \"0.*\",\n                \"phpunit/phpunit\": \"3.7.*\",\n                \"squizlabs/php_codesniffer\": \"1.*\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-0\": {\n                    \"JakubOnderka\\\\PhpConsoleColor\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-2-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jakub Onderka\",\n                    \"email\": \"jakub.onderka@gmail.com\",\n                    \"homepage\": \"http://www.acci.cz\"\n                }\n            ],\n            \"time\": \"2014-04-08 15:00:19\"\n        },\n        {\n            \"name\": \"jakub-onderka/php-console-highlighter\",\n            \"version\": \"v0.3.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/JakubOnderka/PHP-Console-Highlighter.git\",\n                \"reference\": \"7daa75df45242c8d5b75a22c00a201e7954e4fb5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/JakubOnderka/PHP-Console-Highlighter/zipball/7daa75df45242c8d5b75a22c00a201e7954e4fb5\",\n                \"reference\": \"7daa75df45242c8d5b75a22c00a201e7954e4fb5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"jakub-onderka/php-console-color\": \"~0.1\",\n                \"php\": \">=5.3.0\"\n            },\n            \"require-dev\": {\n                \"jakub-onderka/php-code-style\": \"~1.0\",\n                \"jakub-onderka/php-parallel-lint\": \"~0.5\",\n                \"jakub-onderka/php-var-dump-check\": \"~0.1\",\n                \"phpunit/phpunit\": \"~4.0\",\n                \"squizlabs/php_codesniffer\": \"~1.5\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-0\": {\n                    \"JakubOnderka\\\\PhpConsoleHighlighter\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jakub Onderka\",\n                    \"email\": \"acci@acci.cz\",\n                    \"homepage\": \"http://www.acci.cz/\"\n                }\n            ],\n            \"time\": \"2015-04-20 18:58:01\"\n        },\n        {\n            \"name\": \"jeremeamia/SuperClosure\",\n            \"version\": \"2.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/jeremeamia/super_closure.git\",\n                \"reference\": \"29a88be2a4846d27c1613aed0c9071dfad7b5938\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/jeremeamia/super_closure/zipball/29a88be2a4846d27c1613aed0c9071dfad7b5938\",\n                \"reference\": \"29a88be2a4846d27c1613aed0c9071dfad7b5938\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"nikic/php-parser\": \"^1.2|^2.0\",\n                \"php\": \">=5.4\",\n                \"symfony/polyfill-php56\": \"^1.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^4.0|^5.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.2-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"SuperClosure\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jeremy Lindblom\",\n                    \"email\": \"jeremeamia@gmail.com\",\n                    \"homepage\": \"https://github.com/jeremeamia\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"Serialize Closure objects, including their context and binding\",\n            \"homepage\": \"https://github.com/jeremeamia/super_closure\",\n            \"keywords\": [\n                \"closure\",\n                \"function\",\n                \"lambda\",\n                \"parser\",\n                \"serializable\",\n                \"serialize\",\n                \"tokenizer\"\n            ],\n            \"time\": \"2015-12-05 17:17:57\"\n        },\n        {\n            \"name\": \"larapack/config-writer\",\n            \"version\": \"v1.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/larapack/config-writer.git\",\n                \"reference\": \"b36a716833240fe9e8b4b4d007b68ef9e91a1124\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/larapack/config-writer/zipball/b36a716833240fe9e8b4b4d007b68ef9e91a1124\",\n                \"reference\": \"b36a716833240fe9e8b4b4d007b68ef9e91a1124\",\n                \"shasum\": \"\"\n            },\n            \"type\": \"package\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"description\": \"Save changes to the configuration file in script.\",\n            \"keywords\": [\n                \"config\",\n                \"larapack\",\n                \"laravel\",\n                \"package\",\n                \"save\",\n                \"writer\"\n            ],\n            \"time\": \"2016-04-28 12:45:27\"\n        },\n        {\n            \"name\": \"laravel/framework\",\n            \"version\": \"v5.2.37\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/laravel/framework.git\",\n                \"reference\": \"bf199036b0e222a27e2133d841aee0d4238f804d\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/laravel/framework/zipball/bf199036b0e222a27e2133d841aee0d4238f804d\",\n                \"reference\": \"bf199036b0e222a27e2133d841aee0d4238f804d\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"classpreloader/classpreloader\": \"~3.0\",\n                \"doctrine/inflector\": \"~1.0\",\n                \"ext-mbstring\": \"*\",\n                \"ext-openssl\": \"*\",\n                \"jeremeamia/superclosure\": \"~2.2\",\n                \"league/flysystem\": \"~1.0\",\n                \"monolog/monolog\": \"~1.11\",\n                \"mtdowling/cron-expression\": \"~1.0\",\n                \"nesbot/carbon\": \"~1.20\",\n                \"paragonie/random_compat\": \"~1.4\",\n                \"php\": \">=5.5.9\",\n                \"psy/psysh\": \"0.7.*\",\n                \"swiftmailer/swiftmailer\": \"~5.1\",\n                \"symfony/console\": \"2.8.*|3.0.*\",\n                \"symfony/debug\": \"2.8.*|3.0.*\",\n                \"symfony/finder\": \"2.8.*|3.0.*\",\n                \"symfony/http-foundation\": \"2.8.*|3.0.*\",\n                \"symfony/http-kernel\": \"2.8.*|3.0.*\",\n                \"symfony/polyfill-php56\": \"~1.0\",\n                \"symfony/process\": \"2.8.*|3.0.*\",\n                \"symfony/routing\": \"2.8.*|3.0.*\",\n                \"symfony/translation\": \"2.8.*|3.0.*\",\n                \"symfony/var-dumper\": \"2.8.*|3.0.*\",\n                \"vlucas/phpdotenv\": \"~2.2\"\n            },\n            \"replace\": {\n                \"illuminate/auth\": \"self.version\",\n                \"illuminate/broadcasting\": \"self.version\",\n                \"illuminate/bus\": \"self.version\",\n                \"illuminate/cache\": \"self.version\",\n                \"illuminate/config\": \"self.version\",\n                \"illuminate/console\": \"self.version\",\n                \"illuminate/container\": \"self.version\",\n                \"illuminate/contracts\": \"self.version\",\n                \"illuminate/cookie\": \"self.version\",\n                \"illuminate/database\": \"self.version\",\n                \"illuminate/encryption\": \"self.version\",\n                \"illuminate/events\": \"self.version\",\n                \"illuminate/exception\": \"self.version\",\n                \"illuminate/filesystem\": \"self.version\",\n                \"illuminate/hashing\": \"self.version\",\n                \"illuminate/http\": \"self.version\",\n                \"illuminate/log\": \"self.version\",\n                \"illuminate/mail\": \"self.version\",\n                \"illuminate/pagination\": \"self.version\",\n                \"illuminate/pipeline\": \"self.version\",\n                \"illuminate/queue\": \"self.version\",\n                \"illuminate/redis\": \"self.version\",\n                \"illuminate/routing\": \"self.version\",\n                \"illuminate/session\": \"self.version\",\n                \"illuminate/support\": \"self.version\",\n                \"illuminate/translation\": \"self.version\",\n                \"illuminate/validation\": \"self.version\",\n                \"illuminate/view\": \"self.version\"\n            },\n            \"require-dev\": {\n                \"aws/aws-sdk-php\": \"~3.0\",\n                \"mockery/mockery\": \"~0.9.4\",\n                \"pda/pheanstalk\": \"~3.0\",\n                \"phpunit/phpunit\": \"~4.1\",\n                \"predis/predis\": \"~1.0\",\n                \"symfony/css-selector\": \"2.8.*|3.0.*\",\n                \"symfony/dom-crawler\": \"2.8.*|3.0.*\"\n            },\n            \"suggest\": {\n                \"aws/aws-sdk-php\": \"Required to use the SQS queue driver and SES mail driver (~3.0).\",\n                \"doctrine/dbal\": \"Required to rename columns and drop SQLite columns (~2.4).\",\n                \"fzaninotto/faker\": \"Required to use the eloquent factory builder (~1.4).\",\n                \"guzzlehttp/guzzle\": \"Required to use the Mailgun and Mandrill mail drivers and the ping methods on schedules (~5.3|~6.0).\",\n                \"league/flysystem-aws-s3-v3\": \"Required to use the Flysystem S3 driver (~1.0).\",\n                \"league/flysystem-rackspace\": \"Required to use the Flysystem Rackspace driver (~1.0).\",\n                \"pda/pheanstalk\": \"Required to use the beanstalk queue driver (~3.0).\",\n                \"predis/predis\": \"Required to use the redis cache and queue drivers (~1.0).\",\n                \"pusher/pusher-php-server\": \"Required to use the Pusher broadcast driver (~2.0).\",\n                \"symfony/css-selector\": \"Required to use some of the crawler integration testing tools (2.8.*|3.0.*).\",\n                \"symfony/dom-crawler\": \"Required to use most of the crawler integration testing tools (2.8.*|3.0.*).\",\n                \"symfony/psr-http-message-bridge\": \"Required to psr7 bridging features (0.2.*).\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"5.2-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/Illuminate/Queue/IlluminateQueueClosure.php\"\n                ],\n                \"files\": [\n                    \"src/Illuminate/Foundation/helpers.php\",\n                    \"src/Illuminate/Support/helpers.php\"\n                ],\n                \"psr-4\": {\n                    \"Illuminate\\\\\": \"src/Illuminate/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Taylor Otwell\",\n                    \"email\": \"taylorotwell@gmail.com\"\n                }\n            ],\n            \"description\": \"The Laravel Framework.\",\n            \"homepage\": \"http://laravel.com\",\n            \"keywords\": [\n                \"framework\",\n                \"laravel\"\n            ],\n            \"time\": \"2016-06-10 22:38:47\"\n        },\n        {\n            \"name\": \"league/flysystem\",\n            \"version\": \"1.0.24\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/thephpleague/flysystem.git\",\n                \"reference\": \"9aca859a303fdca30370f42b8c611d9cf0dedf4b\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/thephpleague/flysystem/zipball/9aca859a303fdca30370f42b8c611d9cf0dedf4b\",\n                \"reference\": \"9aca859a303fdca30370f42b8c611d9cf0dedf4b\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.4.0\"\n            },\n            \"conflict\": {\n                \"league/flysystem-sftp\": \"<1.0.6\"\n            },\n            \"require-dev\": {\n                \"ext-fileinfo\": \"*\",\n                \"mockery/mockery\": \"~0.9\",\n                \"phpspec/phpspec\": \"^2.2\",\n                \"phpunit/phpunit\": \"~4.8 || ~5.0\"\n            },\n            \"suggest\": {\n                \"ext-fileinfo\": \"Required for MimeType\",\n                \"league/flysystem-aws-s3-v2\": \"Allows you to use S3 storage with AWS SDK v2\",\n                \"league/flysystem-aws-s3-v3\": \"Allows you to use S3 storage with AWS SDK v3\",\n                \"league/flysystem-azure\": \"Allows you to use Windows Azure Blob storage\",\n                \"league/flysystem-cached-adapter\": \"Flysystem adapter decorator for metadata caching\",\n                \"league/flysystem-copy\": \"Allows you to use Copy.com storage\",\n                \"league/flysystem-dropbox\": \"Allows you to use Dropbox storage\",\n                \"league/flysystem-eventable-filesystem\": \"Allows you to use EventableFilesystem\",\n                \"league/flysystem-rackspace\": \"Allows you to use Rackspace Cloud Files\",\n                \"league/flysystem-sftp\": \"Allows you to use SFTP server storage via phpseclib\",\n                \"league/flysystem-webdav\": \"Allows you to use WebDAV storage\",\n                \"league/flysystem-ziparchive\": \"Allows you to use ZipArchive adapter\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.1-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"League\\\\Flysystem\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Frank de Jonge\",\n                    \"email\": \"info@frenky.net\"\n                }\n            ],\n            \"description\": \"Filesystem abstraction: Many filesystems, one API.\",\n            \"keywords\": [\n                \"Cloud Files\",\n                \"WebDAV\",\n                \"abstraction\",\n                \"aws\",\n                \"cloud\",\n                \"copy.com\",\n                \"dropbox\",\n                \"file systems\",\n                \"files\",\n                \"filesystem\",\n                \"filesystems\",\n                \"ftp\",\n                \"rackspace\",\n                \"remote\",\n                \"s3\",\n                \"sftp\",\n                \"storage\"\n            ],\n            \"time\": \"2016-06-03 19:11:39\"\n        },\n        {\n            \"name\": \"league/flysystem-aws-s3-v3\",\n            \"version\": \"1.0.12\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/thephpleague/flysystem-aws-s3-v3.git\",\n                \"reference\": \"d9c27edda5b4b2840c3f602d4ce6fbfeaab10e5a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/thephpleague/flysystem-aws-s3-v3/zipball/d9c27edda5b4b2840c3f602d4ce6fbfeaab10e5a\",\n                \"reference\": \"d9c27edda5b4b2840c3f602d4ce6fbfeaab10e5a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"aws/aws-sdk-php\": \"^3.0.0\",\n                \"league/flysystem\": \"~1.0\",\n                \"php\": \">=5.5.0\"\n            },\n            \"require-dev\": {\n                \"henrikbjorn/phpspec-code-coverage\": \"~1.0.1\",\n                \"phpspec/phpspec\": \"^2.0.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"League\\\\Flysystem\\\\AwsS3v3\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Frank de Jonge\",\n                    \"email\": \"info@frenky.net\"\n                }\n            ],\n            \"description\": \"Flysystem adapter for the AWS S3 SDK v3.x\",\n            \"time\": \"2016-06-06 11:18:47\"\n        },\n        {\n            \"name\": \"league/fractal\",\n            \"version\": \"0.13.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/thephpleague/fractal.git\",\n                \"reference\": \"3caeefbad51bce7a06947321938128512f42346c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/thephpleague/fractal/zipball/3caeefbad51bce7a06947321938128512f42346c\",\n                \"reference\": \"3caeefbad51bce7a06947321938128512f42346c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.4\"\n            },\n            \"require-dev\": {\n                \"illuminate/contracts\": \"~5.0\",\n                \"mockery/mockery\": \"~0.9\",\n                \"pagerfanta/pagerfanta\": \"~1.0.0\",\n                \"phpunit/phpunit\": \"~4.0\",\n                \"squizlabs/php_codesniffer\": \"~1.5\",\n                \"zendframework/zend-paginator\": \"~2.3\"\n            },\n            \"suggest\": {\n                \"illuminate/pagination\": \"The Illuminate Pagination component.\",\n                \"pagerfanta/pagerfanta\": \"Pagerfanta Paginator\",\n                \"zendframework/zend-paginator\": \"Zend Framework Paginator\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"0.13-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"League\\\\Fractal\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Phil Sturgeon\",\n                    \"email\": \"me@philsturgeon.uk\",\n                    \"homepage\": \"http://philsturgeon.uk/\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"Handle the output of complex data structures ready for API output.\",\n            \"homepage\": \"http://fractal.thephpleague.com/\",\n            \"keywords\": [\n                \"api\",\n                \"json\",\n                \"league\",\n                \"rest\"\n            ],\n            \"time\": \"2015-10-07 14:48:58\"\n        },\n        {\n            \"name\": \"league/glide\",\n            \"version\": \"0.3.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/thephpleague/glide.git\",\n                \"reference\": \"e45a4b536924956e1b20f5d023800557d466eda7\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/thephpleague/glide/zipball/e45a4b536924956e1b20f5d023800557d466eda7\",\n                \"reference\": \"e45a4b536924956e1b20f5d023800557d466eda7\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"intervention/image\": \"~2.1\",\n                \"league/flysystem\": \"~1.0\",\n                \"php\": \">=5.4\",\n                \"symfony/http-foundation\": \"~2.3|~3.0\",\n                \"symfony/http-kernel\": \"~2.3|~3.0\"\n            },\n            \"require-dev\": {\n                \"mockery/mockery\": \"~0.9\",\n                \"phpunit/php-token-stream\": \">=1.3.0\",\n                \"phpunit/phpunit\": \"~4.4\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"0.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"League\\\\Glide\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jonathan Reinink\",\n                    \"email\": \"jonathan@reinink.ca\",\n                    \"homepage\": \"http://reinink.ca\"\n                }\n            ],\n            \"description\": \"Wonderfully easy on-demand image manipulation library with an HTTP based API.\",\n            \"homepage\": \"https://github.com/thephpleague/glide\",\n            \"keywords\": [\n                \"ImageMagick\",\n                \"editing\",\n                \"gd\",\n                \"image\",\n                \"imagick\",\n                \"league\",\n                \"manipulation\",\n                \"processing\"\n            ],\n            \"time\": \"2016-01-25 13:35:12\"\n        },\n        {\n            \"name\": \"monolog/monolog\",\n            \"version\": \"1.19.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/Seldaek/monolog.git\",\n                \"reference\": \"5f56ed5212dc509c8dc8caeba2715732abb32dbf\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/Seldaek/monolog/zipball/5f56ed5212dc509c8dc8caeba2715732abb32dbf\",\n                \"reference\": \"5f56ed5212dc509c8dc8caeba2715732abb32dbf\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.0\",\n                \"psr/log\": \"~1.0\"\n            },\n            \"provide\": {\n                \"psr/log-implementation\": \"1.0.0\"\n            },\n            \"require-dev\": {\n                \"aws/aws-sdk-php\": \"^2.4.9\",\n                \"doctrine/couchdb\": \"~1.0@dev\",\n                \"graylog2/gelf-php\": \"~1.0\",\n                \"jakub-onderka/php-parallel-lint\": \"0.9\",\n                \"php-amqplib/php-amqplib\": \"~2.4\",\n                \"php-console/php-console\": \"^3.1.3\",\n                \"phpunit/phpunit\": \"~4.5\",\n                \"phpunit/phpunit-mock-objects\": \"2.3.0\",\n                \"raven/raven\": \"^0.13\",\n                \"ruflin/elastica\": \">=0.90 <3.0\",\n                \"swiftmailer/swiftmailer\": \"~5.3\"\n            },\n            \"suggest\": {\n                \"aws/aws-sdk-php\": \"Allow sending log messages to AWS services like DynamoDB\",\n                \"doctrine/couchdb\": \"Allow sending log messages to a CouchDB server\",\n                \"ext-amqp\": \"Allow sending log messages to an AMQP server (1.0+ required)\",\n                \"ext-mongo\": \"Allow sending log messages to a MongoDB server\",\n                \"graylog2/gelf-php\": \"Allow sending log messages to a GrayLog2 server\",\n                \"mongodb/mongodb\": \"Allow sending log messages to a MongoDB server via PHP Driver\",\n                \"php-amqplib/php-amqplib\": \"Allow sending log messages to an AMQP server using php-amqplib\",\n                \"php-console/php-console\": \"Allow sending log messages to Google Chrome\",\n                \"raven/raven\": \"Allow sending log messages to a Sentry server\",\n                \"rollbar/rollbar\": \"Allow sending log messages to Rollbar\",\n                \"ruflin/elastica\": \"Allow sending log messages to an Elastic Search server\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Monolog\\\\\": \"src/Monolog\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jordi Boggiano\",\n                    \"email\": \"j.boggiano@seld.be\",\n                    \"homepage\": \"http://seld.be\"\n                }\n            ],\n            \"description\": \"Sends your logs to files, sockets, inboxes, databases and various web services\",\n            \"homepage\": \"http://github.com/Seldaek/monolog\",\n            \"keywords\": [\n                \"log\",\n                \"logging\",\n                \"psr-3\"\n            ],\n            \"time\": \"2016-04-12 18:29:35\"\n        },\n        {\n            \"name\": \"mtdowling/cron-expression\",\n            \"version\": \"v1.1.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/mtdowling/cron-expression.git\",\n                \"reference\": \"c9ee7886f5a12902b225a1a12f36bb45f9ab89e5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/mtdowling/cron-expression/zipball/c9ee7886f5a12902b225a1a12f36bb45f9ab89e5\",\n                \"reference\": \"c9ee7886f5a12902b225a1a12f36bb45f9ab89e5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.0|~5.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Cron\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Michael Dowling\",\n                    \"email\": \"mtdowling@gmail.com\",\n                    \"homepage\": \"https://github.com/mtdowling\"\n                }\n            ],\n            \"description\": \"CRON for PHP: Calculate the next or previous run date and determine if a CRON expression is due\",\n            \"keywords\": [\n                \"cron\",\n                \"schedule\"\n            ],\n            \"time\": \"2016-01-26 21:23:30\"\n        },\n        {\n            \"name\": \"mtdowling/jmespath.php\",\n            \"version\": \"2.3.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/jmespath/jmespath.php.git\",\n                \"reference\": \"192f93e43c2c97acde7694993ab171b3de284093\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/jmespath/jmespath.php/zipball/192f93e43c2c97acde7694993ab171b3de284093\",\n                \"reference\": \"192f93e43c2c97acde7694993ab171b3de284093\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.4.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.0\"\n            },\n            \"bin\": [\n                \"bin/jp.php\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"JmesPath\\\\\": \"src/\"\n                },\n                \"files\": [\n                    \"src/JmesPath.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Michael Dowling\",\n                    \"email\": \"mtdowling@gmail.com\",\n                    \"homepage\": \"https://github.com/mtdowling\"\n                }\n            ],\n            \"description\": \"Declaratively specify how to extract elements from a JSON document\",\n            \"keywords\": [\n                \"json\",\n                \"jsonpath\"\n            ],\n            \"time\": \"2016-01-05 18:25:05\"\n        },\n        {\n            \"name\": \"nesbot/carbon\",\n            \"version\": \"1.21.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/briannesbitt/Carbon.git\",\n                \"reference\": \"7b08ec6f75791e130012f206e3f7b0e76e18e3d7\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/briannesbitt/Carbon/zipball/7b08ec6f75791e130012f206e3f7b0e76e18e3d7\",\n                \"reference\": \"7b08ec6f75791e130012f206e3f7b0e76e18e3d7\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.0\",\n                \"symfony/translation\": \"~2.6|~3.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.0|~5.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Carbon\\\\\": \"src/Carbon/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Brian Nesbitt\",\n                    \"email\": \"brian@nesbot.com\",\n                    \"homepage\": \"http://nesbot.com\"\n                }\n            ],\n            \"description\": \"A simple API extension for DateTime.\",\n            \"homepage\": \"http://carbon.nesbot.com\",\n            \"keywords\": [\n                \"date\",\n                \"datetime\",\n                \"time\"\n            ],\n            \"time\": \"2015-11-04 20:07:17\"\n        },\n        {\n            \"name\": \"nikic/php-parser\",\n            \"version\": \"v2.1.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/nikic/PHP-Parser.git\",\n                \"reference\": \"47b254ea51f1d6d5dc04b9b299e88346bf2369e3\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/nikic/PHP-Parser/zipball/47b254ea51f1d6d5dc04b9b299e88346bf2369e3\",\n                \"reference\": \"47b254ea51f1d6d5dc04b9b299e88346bf2369e3\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-tokenizer\": \"*\",\n                \"php\": \">=5.4\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.0\"\n            },\n            \"bin\": [\n                \"bin/php-parse\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.1-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"PhpParser\\\\\": \"lib/PhpParser\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nikita Popov\"\n                }\n            ],\n            \"description\": \"A PHP parser written in PHP\",\n            \"keywords\": [\n                \"parser\",\n                \"php\"\n            ],\n            \"time\": \"2016-04-19 13:41:41\"\n        },\n        {\n            \"name\": \"orchestra/database\",\n            \"version\": \"v3.2.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/orchestral/database.git\",\n                \"reference\": \"7bdcd44a722dd1afb9ad7fe1f2154059e325b275\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/orchestral/database/zipball/7bdcd44a722dd1afb9ad7fe1f2154059e325b275\",\n                \"reference\": \"7bdcd44a722dd1afb9ad7fe1f2154059e325b275\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"illuminate/contracts\": \"~5.2.0\",\n                \"illuminate/database\": \"~5.2.0\",\n                \"php\": \">=5.5.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Orchestra\\\\Database\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Mior Muhammad Zaki\",\n                    \"email\": \"crynobone@gmail.com\",\n                    \"homepage\": \"https://github.com/crynobone\"\n                },\n                {\n                    \"name\": \"Taylor Otwell\",\n                    \"email\": \"taylorotwell@gmail.com\",\n                    \"homepage\": \"https://github.com/taylorotwell\"\n                }\n            ],\n            \"description\": \"Database Component for Orchestra Platform\",\n            \"keywords\": [\n                \"database\",\n                \"orchestra-platform\",\n                \"orchestral\"\n            ],\n            \"time\": \"2016-03-01 13:50:22\"\n        },\n        {\n            \"name\": \"orchestra/testbench\",\n            \"version\": \"v3.2.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/orchestral/testbench.git\",\n                \"reference\": \"69d215f736e1f7f497a71e69ef292271ba7a6be2\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/orchestral/testbench/zipball/69d215f736e1f7f497a71e69ef292271ba7a6be2\",\n                \"reference\": \"69d215f736e1f7f497a71e69ef292271ba7a6be2\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"fzaninotto/faker\": \"~1.4\",\n                \"laravel/framework\": \"~5.2.28\",\n                \"orchestra/database\": \"~3.2.0\",\n                \"php\": \">=5.5.0\",\n                \"symfony/css-selector\": \"2.8.*|3.0.*\",\n                \"symfony/dom-crawler\": \"2.8.*|3.0.*\"\n            },\n            \"require-dev\": {\n                \"mockery/mockery\": \"^0.9.4\",\n                \"phpunit/phpunit\": \"~4.8|~5.0\"\n            },\n            \"suggest\": {\n                \"phpunit/phpunit\": \"Allow to use PHPUnit for testing your Laravel Application/Package (~4.0|~5.0).\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Orchestra\\\\Testbench\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Mior Muhammad Zaki\",\n                    \"email\": \"crynobone@gmail.com\",\n                    \"homepage\": \"https://github.com/crynobone\"\n                }\n            ],\n            \"description\": \"Laravel Package Unit Testing Helper\",\n            \"homepage\": \"http://orchestraplatform.com/docs/latest/components/testbench/\",\n            \"keywords\": [\n                \"BDD\",\n                \"TDD\",\n                \"laravel\",\n                \"orchestra-platform\",\n                \"orchestral\",\n                \"testing\"\n            ],\n            \"time\": \"2016-05-26 22:54:22\"\n        },\n        {\n            \"name\": \"paragonie/random_compat\",\n            \"version\": \"v1.4.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/paragonie/random_compat.git\",\n                \"reference\": \"c7e26a21ba357863de030f0b9e701c7d04593774\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/paragonie/random_compat/zipball/c7e26a21ba357863de030f0b9e701c7d04593774\",\n                \"reference\": \"c7e26a21ba357863de030f0b9e701c7d04593774\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.2.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"4.*|5.*\"\n            },\n            \"suggest\": {\n                \"ext-libsodium\": \"Provides a modern crypto API that can be used to generate random bytes.\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"lib/random.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Paragon Initiative Enterprises\",\n                    \"email\": \"security@paragonie.com\",\n                    \"homepage\": \"https://paragonie.com\"\n                }\n            ],\n            \"description\": \"PHP 5.x polyfill for random_bytes() and random_int() from PHP 7\",\n            \"keywords\": [\n                \"csprng\",\n                \"pseudorandom\",\n                \"random\"\n            ],\n            \"time\": \"2016-03-18 20:34:03\"\n        },\n        {\n            \"name\": \"patchwork/utf8\",\n            \"version\": \"v1.3.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/tchwork/utf8.git\",\n                \"reference\": \"30ec6451aec7d2536f0af8fe535f70c764f2c47a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/tchwork/utf8/zipball/30ec6451aec7d2536f0af8fe535f70c764f2c47a\",\n                \"reference\": \"30ec6451aec7d2536f0af8fe535f70c764f2c47a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"lib-pcre\": \">=7.3\",\n                \"php\": \">=5.3.0\"\n            },\n            \"suggest\": {\n                \"ext-iconv\": \"Use iconv for best performance\",\n                \"ext-intl\": \"Use Intl for best performance\",\n                \"ext-mbstring\": \"Use Mbstring for best performance\",\n                \"ext-wfio\": \"Use WFIO for UTF-8 filesystem access on Windows\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Patchwork\\\\\": \"src/Patchwork/\"\n                },\n                \"classmap\": [\n                    \"src/Normalizer.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"(Apache-2.0 or GPL-2.0)\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                }\n            ],\n            \"description\": \"Portable and performant UTF-8, Unicode and Grapheme Clusters for PHP\",\n            \"homepage\": \"https://github.com/tchwork/utf8\",\n            \"keywords\": [\n                \"grapheme\",\n                \"i18n\",\n                \"unicode\",\n                \"utf-8\",\n                \"utf8\"\n            ],\n            \"time\": \"2016-05-18 13:57:10\"\n        },\n        {\n            \"name\": \"psr/http-message\",\n            \"version\": \"1.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/http-message.git\",\n                \"reference\": \"85d63699f0dbedb190bbd4b0d2b9dc707ea4c298\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/http-message/zipball/85d63699f0dbedb190bbd4b0d2b9dc707ea4c298\",\n                \"reference\": \"85d63699f0dbedb190bbd4b0d2b9dc707ea4c298\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Psr\\\\Http\\\\Message\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"http://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"Common interface for HTTP messages\",\n            \"keywords\": [\n                \"http\",\n                \"http-message\",\n                \"psr\",\n                \"psr-7\",\n                \"request\",\n                \"response\"\n            ],\n            \"time\": \"2015-05-04 20:22:00\"\n        },\n        {\n            \"name\": \"psr/log\",\n            \"version\": \"1.0.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/log.git\",\n                \"reference\": \"fe0936ee26643249e916849d48e3a51d5f5e278b\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/log/zipball/fe0936ee26643249e916849d48e3a51d5f5e278b\",\n                \"reference\": \"fe0936ee26643249e916849d48e3a51d5f5e278b\",\n                \"shasum\": \"\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Psr\\\\Log\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"http://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"Common interface for logging libraries\",\n            \"keywords\": [\n                \"log\",\n                \"psr\",\n                \"psr-3\"\n            ],\n            \"time\": \"2012-12-21 11:40:51\"\n        },\n        {\n            \"name\": \"psy/psysh\",\n            \"version\": \"v0.7.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/bobthecow/psysh.git\",\n                \"reference\": \"e64e10b20f8d229cac76399e1f3edddb57a0f280\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/bobthecow/psysh/zipball/e64e10b20f8d229cac76399e1f3edddb57a0f280\",\n                \"reference\": \"e64e10b20f8d229cac76399e1f3edddb57a0f280\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"dnoegel/php-xdg-base-dir\": \"0.1\",\n                \"jakub-onderka/php-console-highlighter\": \"0.3.*\",\n                \"nikic/php-parser\": \"^1.2.1|~2.0\",\n                \"php\": \">=5.3.9\",\n                \"symfony/console\": \"~2.3.10|^2.4.2|~3.0\",\n                \"symfony/var-dumper\": \"~2.7|~3.0\"\n            },\n            \"require-dev\": {\n                \"fabpot/php-cs-fixer\": \"~1.5\",\n                \"phpunit/phpunit\": \"~3.7|~4.0|~5.0\",\n                \"squizlabs/php_codesniffer\": \"~2.0\",\n                \"symfony/finder\": \"~2.1|~3.0\"\n            },\n            \"suggest\": {\n                \"ext-pcntl\": \"Enabling the PCNTL extension makes PsySH a lot happier :)\",\n                \"ext-pdo-sqlite\": \"The doc command requires SQLite to work.\",\n                \"ext-posix\": \"If you have PCNTL, you'll want the POSIX extension as well.\",\n                \"ext-readline\": \"Enables support for arrow-key history navigation, and showing and manipulating command history.\"\n            },\n            \"bin\": [\n                \"bin/psysh\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-develop\": \"0.8.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"src/Psy/functions.php\"\n                ],\n                \"psr-4\": {\n                    \"Psy\\\\\": \"src/Psy/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Justin Hileman\",\n                    \"email\": \"justin@justinhileman.info\",\n                    \"homepage\": \"http://justinhileman.com\"\n                }\n            ],\n            \"description\": \"An interactive shell for modern PHP.\",\n            \"homepage\": \"http://psysh.org\",\n            \"keywords\": [\n                \"REPL\",\n                \"console\",\n                \"interactive\",\n                \"shell\"\n            ],\n            \"time\": \"2016-03-09 05:03:14\"\n        },\n        {\n            \"name\": \"spatie/laravel-glide\",\n            \"version\": \"2.3.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/spatie/laravel-glide.git\",\n                \"reference\": \"06bcfb85464a1202dfaa7494d1b1600c88c418e5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/spatie/laravel-glide/zipball/06bcfb85464a1202dfaa7494d1b1600c88c418e5\",\n                \"reference\": \"06bcfb85464a1202dfaa7494d1b1600c88c418e5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"illuminate/support\": \"5.*\",\n                \"league/glide\": \"0.3.*\",\n                \"php\": \">=5.4.0\"\n            },\n            \"require-dev\": {\n                \"codeception/codeception\": \"2.*\",\n                \"mockery/mockery\": \"~0.9.3\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Spatie\\\\Glide\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Freek Van der Herten\",\n                    \"email\": \"freek@spatie.be\"\n                }\n            ],\n            \"description\": \"A Glide Service Provider for Laravel\",\n            \"homepage\": \"https://github.com/spatie/laravel-glide\",\n            \"time\": \"2016-05-13 14:56:07\"\n        },\n        {\n            \"name\": \"spatie/laravel-medialibrary\",\n            \"version\": \"3.18.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/spatie/laravel-medialibrary.git\",\n                \"reference\": \"e7a0a564707b29e22c4e03c815d455de515bc230\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/spatie/laravel-medialibrary/zipball/e7a0a564707b29e22c4e03c815d455de515bc230\",\n                \"reference\": \"e7a0a564707b29e22c4e03c815d455de515bc230\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"illuminate/bus\": \"~5.1.16|~5.2.0\",\n                \"illuminate/console\": \"~5.1.16|~5.2.0\",\n                \"illuminate/database\": \"~5.1.16|~5.2.0\",\n                \"illuminate/support\": \"~5.1.16|~5.2.0\",\n                \"php\": \"^5.5|^7.0\",\n                \"spatie/laravel-glide\": \"^2.2.4\",\n                \"spatie/pdf-to-image\": \"^1.0.1\",\n                \"spatie/string\": \"^2.0\"\n            },\n            \"require-dev\": {\n                \"doctrine/dbal\": \"^2.5.2\",\n                \"mockery/mockery\": \"^0.9.4\",\n                \"orchestra/testbench\": \"^3.0\",\n                \"phpunit/phpunit\": \"^4.0\",\n                \"scrutinizer/ocular\": \"^1.1\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Spatie\\\\MediaLibrary\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Freek Van der Herten\",\n                    \"email\": \"freek@spatie.be\",\n                    \"homepage\": \"https://murze.be\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"Associate files with Eloquent models\",\n            \"homepage\": \"https://github.com/spatie/laravel-medialibrary\",\n            \"keywords\": [\n                \"cms\",\n                \"laravel\",\n                \"laravel-medialibrary\",\n                \"media\",\n                \"spatie\"\n            ],\n            \"time\": \"2016-06-02 11:45:10\"\n        },\n        {\n            \"name\": \"spatie/pdf-to-image\",\n            \"version\": \"1.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/spatie/pdf-to-image.git\",\n                \"reference\": \"c08dac65f0f857dd4d467d40794772be5a75d6de\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/spatie/pdf-to-image/zipball/c08dac65f0f857dd4d467d40794772be5a75d6de\",\n                \"reference\": \"c08dac65f0f857dd4d467d40794772be5a75d6de\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"4.*\",\n                \"scrutinizer/ocular\": \"~1.1\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Spatie\\\\PdfToImage\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Freek Van der Herten\",\n                    \"email\": \"freek@spatie.be\",\n                    \"homepage\": \"https://spatie.be\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"Convert a pdf to an image\",\n            \"homepage\": \"https://github.com/spatie/pdf-to-image\",\n            \"keywords\": [\n                \"convert\",\n                \"image\",\n                \"pdf\",\n                \"pdf-to-image\",\n                \"spatie\"\n            ],\n            \"time\": \"2016-04-29 08:02:56\"\n        },\n        {\n            \"name\": \"spatie/string\",\n            \"version\": \"2.1.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/spatie/string.git\",\n                \"reference\": \"1843189c711be4dcf62b655824f2f17120c2dc7d\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/spatie/string/zipball/1843189c711be4dcf62b655824f2f17120c2dc7d\",\n                \"reference\": \"1843189c711be4dcf62b655824f2f17120c2dc7d\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"anahkiasen/underscore-php\": \"^2.0\",\n                \"php\": \">=5.5.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"4.*\",\n                \"scrutinizer/ocular\": \"~1.1\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"src/string_functions.php\"\n                ],\n                \"psr-4\": {\n                    \"Spatie\\\\String\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Freek Van der Herten\",\n                    \"email\": \"freek@spatie.be\",\n                    \"homepage\": \"https://murze.be\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"String handling evolved\",\n            \"homepage\": \"https://github.com/spatie/string\",\n            \"keywords\": [\n                \"handling\",\n                \"handy\",\n                \"spatie\",\n                \"string\"\n            ],\n            \"time\": \"2015-11-02 13:00:37\"\n        },\n        {\n            \"name\": \"swiftmailer/swiftmailer\",\n            \"version\": \"v5.4.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/swiftmailer/swiftmailer.git\",\n                \"reference\": \"d8db871a54619458a805229a057ea2af33c753e8\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/swiftmailer/swiftmailer/zipball/d8db871a54619458a805229a057ea2af33c753e8\",\n                \"reference\": \"d8db871a54619458a805229a057ea2af33c753e8\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"mockery/mockery\": \"~0.9.1,<0.9.4\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"5.4-dev\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"lib/swift_required.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Chris Corbyn\"\n                },\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                }\n            ],\n            \"description\": \"Swiftmailer, free feature-rich PHP mailer\",\n            \"homepage\": \"http://swiftmailer.org\",\n            \"keywords\": [\n                \"email\",\n                \"mail\",\n                \"mailer\"\n            ],\n            \"time\": \"2016-05-01 08:45:47\"\n        },\n        {\n            \"name\": \"symfony/class-loader\",\n            \"version\": \"v3.1.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/class-loader.git\",\n                \"reference\": \"6ebc60f69a6df4b3cf5ad6f260ba4edf5957ea05\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/class-loader/zipball/6ebc60f69a6df4b3cf5ad6f260ba4edf5957ea05\",\n                \"reference\": \"6ebc60f69a6df4b3cf5ad6f260ba4edf5957ea05\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\"\n            },\n            \"require-dev\": {\n                \"symfony/finder\": \"~2.8|~3.0\",\n                \"symfony/polyfill-apcu\": \"~1.1\"\n            },\n            \"suggest\": {\n                \"symfony/polyfill-apcu\": \"For using ApcClassLoader on HHVM\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.1-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\ClassLoader\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony ClassLoader Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2016-03-30 10:41:47\"\n        },\n        {\n            \"name\": \"symfony/console\",\n            \"version\": \"v3.0.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/console.git\",\n                \"reference\": \"382fc9ed852edabd6133e34f8549d7a7d99db115\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/console/zipball/382fc9ed852edabd6133e34f8549d7a7d99db115\",\n                \"reference\": \"382fc9ed852edabd6133e34f8549d7a7d99db115\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\",\n                \"symfony/polyfill-mbstring\": \"~1.0\"\n            },\n            \"require-dev\": {\n                \"psr/log\": \"~1.0\",\n                \"symfony/event-dispatcher\": \"~2.8|~3.0\",\n                \"symfony/process\": \"~2.8|~3.0\"\n            },\n            \"suggest\": {\n                \"psr/log\": \"For using the console logger\",\n                \"symfony/event-dispatcher\": \"\",\n                \"symfony/process\": \"\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Console\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony Console Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2016-06-06 15:08:35\"\n        },\n        {\n            \"name\": \"symfony/css-selector\",\n            \"version\": \"v3.0.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/css-selector.git\",\n                \"reference\": \"e8a66c51bf65f188c02f8120c0748b2291d3a2d0\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/css-selector/zipball/e8a66c51bf65f188c02f8120c0748b2291d3a2d0\",\n                \"reference\": \"e8a66c51bf65f188c02f8120c0748b2291d3a2d0\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\CssSelector\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jean-François Simon\",\n                    \"email\": \"jeanfrancois.simon@sensiolabs.com\"\n                },\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony CssSelector Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2016-06-06 11:33:26\"\n        },\n        {\n            \"name\": \"symfony/debug\",\n            \"version\": \"v3.0.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/debug.git\",\n                \"reference\": \"e67e1552dd7313df1cf6535cb606751899e0e727\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/debug/zipball/e67e1552dd7313df1cf6535cb606751899e0e727\",\n                \"reference\": \"e67e1552dd7313df1cf6535cb606751899e0e727\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\",\n                \"psr/log\": \"~1.0\"\n            },\n            \"conflict\": {\n                \"symfony/http-kernel\": \">=2.3,<2.3.24|~2.4.0|>=2.5,<2.5.9|>=2.6,<2.6.2\"\n            },\n            \"require-dev\": {\n                \"symfony/class-loader\": \"~2.8|~3.0\",\n                \"symfony/http-kernel\": \"~2.8|~3.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Debug\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony Debug Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2016-06-06 15:08:35\"\n        },\n        {\n            \"name\": \"symfony/dom-crawler\",\n            \"version\": \"v3.0.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/dom-crawler.git\",\n                \"reference\": \"49b588841225b205700e5122fa01911cabada857\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/dom-crawler/zipball/49b588841225b205700e5122fa01911cabada857\",\n                \"reference\": \"49b588841225b205700e5122fa01911cabada857\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\",\n                \"symfony/polyfill-mbstring\": \"~1.0\"\n            },\n            \"require-dev\": {\n                \"symfony/css-selector\": \"~2.8|~3.0\"\n            },\n            \"suggest\": {\n                \"symfony/css-selector\": \"\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\DomCrawler\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony DomCrawler Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2016-04-12 18:09:53\"\n        },\n        {\n            \"name\": \"symfony/event-dispatcher\",\n            \"version\": \"v3.1.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/event-dispatcher.git\",\n                \"reference\": \"0343b2cedd0edb26cdc791212a8eb645c406018b\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/event-dispatcher/zipball/0343b2cedd0edb26cdc791212a8eb645c406018b\",\n                \"reference\": \"0343b2cedd0edb26cdc791212a8eb645c406018b\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\"\n            },\n            \"require-dev\": {\n                \"psr/log\": \"~1.0\",\n                \"symfony/config\": \"~2.8|~3.0\",\n                \"symfony/dependency-injection\": \"~2.8|~3.0\",\n                \"symfony/expression-language\": \"~2.8|~3.0\",\n                \"symfony/stopwatch\": \"~2.8|~3.0\"\n            },\n            \"suggest\": {\n                \"symfony/dependency-injection\": \"\",\n                \"symfony/http-kernel\": \"\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.1-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\EventDispatcher\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony EventDispatcher Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2016-04-12 18:27:47\"\n        },\n        {\n            \"name\": \"symfony/finder\",\n            \"version\": \"v3.0.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/finder.git\",\n                \"reference\": \"39e5f3d533d07b5416b9d7aad53a27f939d4f811\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/finder/zipball/39e5f3d533d07b5416b9d7aad53a27f939d4f811\",\n                \"reference\": \"39e5f3d533d07b5416b9d7aad53a27f939d4f811\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Finder\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony Finder Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2016-05-13 18:03:36\"\n        },\n        {\n            \"name\": \"symfony/http-foundation\",\n            \"version\": \"v3.0.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/http-foundation.git\",\n                \"reference\": \"d268a643884f85e91d6ba11ca68de96833f3f6e5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/http-foundation/zipball/d268a643884f85e91d6ba11ca68de96833f3f6e5\",\n                \"reference\": \"d268a643884f85e91d6ba11ca68de96833f3f6e5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\",\n                \"symfony/polyfill-mbstring\": \"~1.1\"\n            },\n            \"require-dev\": {\n                \"symfony/expression-language\": \"~2.8|~3.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\HttpFoundation\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony HttpFoundation Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2016-06-06 11:33:26\"\n        },\n        {\n            \"name\": \"symfony/http-kernel\",\n            \"version\": \"v3.0.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/http-kernel.git\",\n                \"reference\": \"97cc1c15e3406e7a2adf14ad6b0e41a04d4a6fc4\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/http-kernel/zipball/97cc1c15e3406e7a2adf14ad6b0e41a04d4a6fc4\",\n                \"reference\": \"97cc1c15e3406e7a2adf14ad6b0e41a04d4a6fc4\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\",\n                \"psr/log\": \"~1.0\",\n                \"symfony/debug\": \"~2.8|~3.0\",\n                \"symfony/event-dispatcher\": \"~2.8|~3.0\",\n                \"symfony/http-foundation\": \"~2.8|~3.0\"\n            },\n            \"conflict\": {\n                \"symfony/config\": \"<2.8\"\n            },\n            \"require-dev\": {\n                \"symfony/browser-kit\": \"~2.8|~3.0\",\n                \"symfony/class-loader\": \"~2.8|~3.0\",\n                \"symfony/config\": \"~2.8|~3.0\",\n                \"symfony/console\": \"~2.8|~3.0\",\n                \"symfony/css-selector\": \"~2.8|~3.0\",\n                \"symfony/dependency-injection\": \"~2.8|~3.0\",\n                \"symfony/dom-crawler\": \"~2.8|~3.0\",\n                \"symfony/expression-language\": \"~2.8|~3.0\",\n                \"symfony/finder\": \"~2.8|~3.0\",\n                \"symfony/process\": \"~2.8|~3.0\",\n                \"symfony/routing\": \"~2.8|~3.0\",\n                \"symfony/stopwatch\": \"~2.8|~3.0\",\n                \"symfony/templating\": \"~2.8|~3.0\",\n                \"symfony/translation\": \"~2.8|~3.0\",\n                \"symfony/var-dumper\": \"~2.8|~3.0\"\n            },\n            \"suggest\": {\n                \"symfony/browser-kit\": \"\",\n                \"symfony/class-loader\": \"\",\n                \"symfony/config\": \"\",\n                \"symfony/console\": \"\",\n                \"symfony/dependency-injection\": \"\",\n                \"symfony/finder\": \"\",\n                \"symfony/var-dumper\": \"\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\HttpKernel\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony HttpKernel Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2016-06-06 16:52:35\"\n        },\n        {\n            \"name\": \"symfony/polyfill-mbstring\",\n            \"version\": \"v1.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/polyfill-mbstring.git\",\n                \"reference\": \"dff51f72b0706335131b00a7f49606168c582594\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-mbstring/zipball/dff51f72b0706335131b00a7f49606168c582594\",\n                \"reference\": \"dff51f72b0706335131b00a7f49606168c582594\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"suggest\": {\n                \"ext-mbstring\": \"For best performance\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.2-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Polyfill\\\\Mbstring\\\\\": \"\"\n                },\n                \"files\": [\n                    \"bootstrap.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony polyfill for the Mbstring extension\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"compatibility\",\n                \"mbstring\",\n                \"polyfill\",\n                \"portable\",\n                \"shim\"\n            ],\n            \"time\": \"2016-05-18 14:26:46\"\n        },\n        {\n            \"name\": \"symfony/polyfill-php56\",\n            \"version\": \"v1.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/polyfill-php56.git\",\n                \"reference\": \"3edf57a8fbf9a927533344cef65ad7e1cf31030a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-php56/zipball/3edf57a8fbf9a927533344cef65ad7e1cf31030a\",\n                \"reference\": \"3edf57a8fbf9a927533344cef65ad7e1cf31030a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\",\n                \"symfony/polyfill-util\": \"~1.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.2-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Polyfill\\\\Php56\\\\\": \"\"\n                },\n                \"files\": [\n                    \"bootstrap.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony polyfill backporting some PHP 5.6+ features to lower PHP versions\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"compatibility\",\n                \"polyfill\",\n                \"portable\",\n                \"shim\"\n            ],\n            \"time\": \"2016-05-18 14:26:46\"\n        },\n        {\n            \"name\": \"symfony/polyfill-util\",\n            \"version\": \"v1.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/polyfill-util.git\",\n                \"reference\": \"ef830ce3d218e622b221d6bfad42c751d974bf99\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-util/zipball/ef830ce3d218e622b221d6bfad42c751d974bf99\",\n                \"reference\": \"ef830ce3d218e622b221d6bfad42c751d974bf99\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.2-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Polyfill\\\\Util\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony utilities for portability of PHP codes\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"compat\",\n                \"compatibility\",\n                \"polyfill\",\n                \"shim\"\n            ],\n            \"time\": \"2016-05-18 14:26:46\"\n        },\n        {\n            \"name\": \"symfony/process\",\n            \"version\": \"v3.0.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/process.git\",\n                \"reference\": \"bf6e2d1fa8b93fdd7cca6b684c0ea213cf0255dd\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/process/zipball/bf6e2d1fa8b93fdd7cca6b684c0ea213cf0255dd\",\n                \"reference\": \"bf6e2d1fa8b93fdd7cca6b684c0ea213cf0255dd\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Process\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony Process Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2016-06-06 11:33:26\"\n        },\n        {\n            \"name\": \"symfony/routing\",\n            \"version\": \"v3.0.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/routing.git\",\n                \"reference\": \"c780454838a1131adc756d737a4b4cc1d18f8c64\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/routing/zipball/c780454838a1131adc756d737a4b4cc1d18f8c64\",\n                \"reference\": \"c780454838a1131adc756d737a4b4cc1d18f8c64\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\"\n            },\n            \"conflict\": {\n                \"symfony/config\": \"<2.8\"\n            },\n            \"require-dev\": {\n                \"doctrine/annotations\": \"~1.0\",\n                \"doctrine/common\": \"~2.2\",\n                \"psr/log\": \"~1.0\",\n                \"symfony/config\": \"~2.8|~3.0\",\n                \"symfony/expression-language\": \"~2.8|~3.0\",\n                \"symfony/http-foundation\": \"~2.8|~3.0\",\n                \"symfony/yaml\": \"~2.8|~3.0\"\n            },\n            \"suggest\": {\n                \"doctrine/annotations\": \"For using the annotation loader\",\n                \"symfony/config\": \"For using the all-in-one router or any loader\",\n                \"symfony/dependency-injection\": \"For loading routes from a service\",\n                \"symfony/expression-language\": \"For using expression matching\",\n                \"symfony/http-foundation\": \"For using a Symfony Request object\",\n                \"symfony/yaml\": \"For using the YAML loader\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Routing\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony Routing Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"router\",\n                \"routing\",\n                \"uri\",\n                \"url\"\n            ],\n            \"time\": \"2016-05-30 06:58:27\"\n        },\n        {\n            \"name\": \"symfony/translation\",\n            \"version\": \"v3.0.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/translation.git\",\n                \"reference\": \"2b0aacaa613c0ec1ad8046f972d8abdcb19c1db7\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/translation/zipball/2b0aacaa613c0ec1ad8046f972d8abdcb19c1db7\",\n                \"reference\": \"2b0aacaa613c0ec1ad8046f972d8abdcb19c1db7\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\",\n                \"symfony/polyfill-mbstring\": \"~1.0\"\n            },\n            \"conflict\": {\n                \"symfony/config\": \"<2.8\"\n            },\n            \"require-dev\": {\n                \"psr/log\": \"~1.0\",\n                \"symfony/config\": \"~2.8|~3.0\",\n                \"symfony/intl\": \"~2.8|~3.0\",\n                \"symfony/yaml\": \"~2.8|~3.0\"\n            },\n            \"suggest\": {\n                \"psr/log\": \"To use logging capability in translator\",\n                \"symfony/config\": \"\",\n                \"symfony/yaml\": \"\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Translation\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony Translation Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2016-06-06 11:33:26\"\n        },\n        {\n            \"name\": \"symfony/var-dumper\",\n            \"version\": \"v3.0.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/var-dumper.git\",\n                \"reference\": \"d8bb851da153d97abe7c2b71a65dee19f324bcf7\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/var-dumper/zipball/d8bb851da153d97abe7c2b71a65dee19f324bcf7\",\n                \"reference\": \"d8bb851da153d97abe7c2b71a65dee19f324bcf7\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\",\n                \"symfony/polyfill-mbstring\": \"~1.0\"\n            },\n            \"require-dev\": {\n                \"twig/twig\": \"~1.20|~2.0\"\n            },\n            \"suggest\": {\n                \"ext-symfony_debug\": \"\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"Resources/functions/dump.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\VarDumper\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony mechanism for exploring and dumping PHP variables\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"debug\",\n                \"dump\"\n            ],\n            \"time\": \"2016-05-24 10:03:10\"\n        },\n        {\n            \"name\": \"vinkla/hashids\",\n            \"version\": \"2.3.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/vinkla/laravel-hashids.git\",\n                \"reference\": \"4ff0bb50f0e2a20854246731adf628b294531ea4\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/vinkla/laravel-hashids/zipball/4ff0bb50f0e2a20854246731adf628b294531ea4\",\n                \"reference\": \"4ff0bb50f0e2a20854246731adf628b294531ea4\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"graham-campbell/manager\": \"^2.3\",\n                \"hashids/hashids\": \"^1.0\",\n                \"illuminate/contracts\": \"5.1.* || 5.2.* || 5.3.*\",\n                \"illuminate/support\": \"5.1.* || 5.2.* || 5.3.*\",\n                \"php\": \"^5.5.9 || ^7.0\"\n            },\n            \"require-dev\": {\n                \"graham-campbell/testbench\": \"^3.1\",\n                \"mockery/mockery\": \"^0.9.4\",\n                \"phpunit/phpunit\": \"^4.8 || ^5.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Vinkla\\\\Hashids\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Vincent Klaiber\",\n                    \"email\": \"hello@vinkla.com\"\n                }\n            ],\n            \"description\": \"A Hashids bridge for Laravel\",\n            \"keywords\": [\n                \"bitly\",\n                \"decrypt\",\n                \"encrypt\",\n                \"hash\",\n                \"hashid\",\n                \"hashids\",\n                \"ids\",\n                \"laravel\",\n                \"obfuscate\",\n                \"youtube\"\n            ],\n            \"time\": \"2016-05-05 11:03:48\"\n        },\n        {\n            \"name\": \"vlucas/phpdotenv\",\n            \"version\": \"v2.2.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/vlucas/phpdotenv.git\",\n                \"reference\": \"63f37b9395e8041cd4313129c08ece896d06ca8e\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/vlucas/phpdotenv/zipball/63f37b9395e8041cd4313129c08ece896d06ca8e\",\n                \"reference\": \"63f37b9395e8041cd4313129c08ece896d06ca8e\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.9\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^4.8 || ^5.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.2-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Dotenv\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause-Attribution\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Vance Lucas\",\n                    \"email\": \"vance@vancelucas.com\",\n                    \"homepage\": \"http://www.vancelucas.com\"\n                }\n            ],\n            \"description\": \"Loads environment variables from `.env` to `getenv()`, `$_ENV` and `$_SERVER` automagically.\",\n            \"keywords\": [\n                \"dotenv\",\n                \"env\",\n                \"environment\"\n            ],\n            \"time\": \"2016-04-15 10:48:49\"\n        }\n    ],\n    \"packages-dev\": [\n        {\n            \"name\": \"doctrine/instantiator\",\n            \"version\": \"1.0.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/doctrine/instantiator.git\",\n                \"reference\": \"8e884e78f9f0eb1329e445619e04456e64d8051d\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/doctrine/instantiator/zipball/8e884e78f9f0eb1329e445619e04456e64d8051d\",\n                \"reference\": \"8e884e78f9f0eb1329e445619e04456e64d8051d\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3,<8.0-DEV\"\n            },\n            \"require-dev\": {\n                \"athletic/athletic\": \"~0.1.8\",\n                \"ext-pdo\": \"*\",\n                \"ext-phar\": \"*\",\n                \"phpunit/phpunit\": \"~4.0\",\n                \"squizlabs/php_codesniffer\": \"~2.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Doctrine\\\\Instantiator\\\\\": \"src/Doctrine/Instantiator/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Marco Pivetta\",\n                    \"email\": \"ocramius@gmail.com\",\n                    \"homepage\": \"http://ocramius.github.com/\"\n                }\n            ],\n            \"description\": \"A small, lightweight utility to instantiate objects in PHP without invoking their constructors\",\n            \"homepage\": \"https://github.com/doctrine/instantiator\",\n            \"keywords\": [\n                \"constructor\",\n                \"instantiate\"\n            ],\n            \"time\": \"2015-06-14 21:17:01\"\n        },\n        {\n            \"name\": \"hamcrest/hamcrest-php\",\n            \"version\": \"v1.2.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/hamcrest/hamcrest-php.git\",\n                \"reference\": \"b37020aa976fa52d3de9aa904aa2522dc518f79c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/hamcrest/hamcrest-php/zipball/b37020aa976fa52d3de9aa904aa2522dc518f79c\",\n                \"reference\": \"b37020aa976fa52d3de9aa904aa2522dc518f79c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.2\"\n            },\n            \"replace\": {\n                \"cordoval/hamcrest-php\": \"*\",\n                \"davedevelopment/hamcrest-php\": \"*\",\n                \"kodova/hamcrest-php\": \"*\"\n            },\n            \"require-dev\": {\n                \"phpunit/php-file-iterator\": \"1.3.3\",\n                \"satooshi/php-coveralls\": \"dev-master\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"hamcrest\"\n                ],\n                \"files\": [\n                    \"hamcrest/Hamcrest.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD\"\n            ],\n            \"description\": \"This is the PHP port of Hamcrest Matchers\",\n            \"keywords\": [\n                \"test\"\n            ],\n            \"time\": \"2015-05-11 14:41:42\"\n        },\n        {\n            \"name\": \"mockery/mockery\",\n            \"version\": \"0.9.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/padraic/mockery.git\",\n                \"reference\": \"4db079511a283e5aba1b3c2fb19037c645e70fc2\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/padraic/mockery/zipball/4db079511a283e5aba1b3c2fb19037c645e70fc2\",\n                \"reference\": \"4db079511a283e5aba1b3c2fb19037c645e70fc2\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"hamcrest/hamcrest-php\": \"~1.1\",\n                \"lib-pcre\": \">=7.0\",\n                \"php\": \">=5.3.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"0.9.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Mockery\": \"library/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Pádraic Brady\",\n                    \"email\": \"padraic.brady@gmail.com\",\n                    \"homepage\": \"http://blog.astrumfutura.com\"\n                },\n                {\n                    \"name\": \"Dave Marshall\",\n                    \"email\": \"dave.marshall@atstsolutions.co.uk\",\n                    \"homepage\": \"http://davedevelopment.co.uk\"\n                }\n            ],\n            \"description\": \"Mockery is a simple yet flexible PHP mock object framework for use in unit testing with PHPUnit, PHPSpec or any other testing framework. Its core goal is to offer a test double framework with a succinct API capable of clearly defining all possible object operations and interactions using a human readable Domain Specific Language (DSL). Designed as a drop in alternative to PHPUnit's phpunit-mock-objects library, Mockery is easy to integrate with PHPUnit and can operate alongside phpunit-mock-objects without the World ending.\",\n            \"homepage\": \"http://github.com/padraic/mockery\",\n            \"keywords\": [\n                \"BDD\",\n                \"TDD\",\n                \"library\",\n                \"mock\",\n                \"mock objects\",\n                \"mockery\",\n                \"stub\",\n                \"test\",\n                \"test double\",\n                \"testing\"\n            ],\n            \"time\": \"2016-05-22 21:52:33\"\n        },\n        {\n            \"name\": \"phpdocumentor/reflection-common\",\n            \"version\": \"1.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phpDocumentor/ReflectionCommon.git\",\n                \"reference\": \"144c307535e82c8fdcaacbcfc1d6d8eeb896687c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phpDocumentor/ReflectionCommon/zipball/144c307535e82c8fdcaacbcfc1d6d8eeb896687c\",\n                \"reference\": \"144c307535e82c8fdcaacbcfc1d6d8eeb896687c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^4.6\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"phpDocumentor\\\\Reflection\\\\\": [\n                        \"src\"\n                    ]\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jaap van Otterdijk\",\n                    \"email\": \"opensource@ijaap.nl\"\n                }\n            ],\n            \"description\": \"Common reflection classes used by phpdocumentor to reflect the code structure\",\n            \"homepage\": \"http://www.phpdoc.org\",\n            \"keywords\": [\n                \"FQSEN\",\n                \"phpDocumentor\",\n                \"phpdoc\",\n                \"reflection\",\n                \"static analysis\"\n            ],\n            \"time\": \"2015-12-27 11:43:31\"\n        },\n        {\n            \"name\": \"phpdocumentor/reflection-docblock\",\n            \"version\": \"3.1.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phpDocumentor/ReflectionDocBlock.git\",\n                \"reference\": \"9270140b940ff02e58ec577c237274e92cd40cdd\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phpDocumentor/ReflectionDocBlock/zipball/9270140b940ff02e58ec577c237274e92cd40cdd\",\n                \"reference\": \"9270140b940ff02e58ec577c237274e92cd40cdd\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5\",\n                \"phpdocumentor/reflection-common\": \"^1.0@dev\",\n                \"phpdocumentor/type-resolver\": \"^0.2.0\",\n                \"webmozart/assert\": \"^1.0\"\n            },\n            \"require-dev\": {\n                \"mockery/mockery\": \"^0.9.4\",\n                \"phpunit/phpunit\": \"^4.4\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"phpDocumentor\\\\Reflection\\\\\": [\n                        \"src/\"\n                    ]\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Mike van Riel\",\n                    \"email\": \"me@mikevanriel.com\"\n                }\n            ],\n            \"description\": \"With this component, a library can provide support for annotations via DocBlocks or otherwise retrieve information that is embedded in a DocBlock.\",\n            \"time\": \"2016-06-10 09:48:41\"\n        },\n        {\n            \"name\": \"phpdocumentor/type-resolver\",\n            \"version\": \"0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phpDocumentor/TypeResolver.git\",\n                \"reference\": \"b39c7a5b194f9ed7bd0dd345c751007a41862443\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phpDocumentor/TypeResolver/zipball/b39c7a5b194f9ed7bd0dd345c751007a41862443\",\n                \"reference\": \"b39c7a5b194f9ed7bd0dd345c751007a41862443\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5\",\n                \"phpdocumentor/reflection-common\": \"^1.0\"\n            },\n            \"require-dev\": {\n                \"mockery/mockery\": \"^0.9.4\",\n                \"phpunit/phpunit\": \"^5.2||^4.8.24\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"phpDocumentor\\\\Reflection\\\\\": [\n                        \"src/\"\n                    ]\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Mike van Riel\",\n                    \"email\": \"me@mikevanriel.com\"\n                }\n            ],\n            \"time\": \"2016-06-10 07:14:17\"\n        },\n        {\n            \"name\": \"phpspec/prophecy\",\n            \"version\": \"v1.6.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phpspec/prophecy.git\",\n                \"reference\": \"58a8137754bc24b25740d4281399a4a3596058e0\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phpspec/prophecy/zipball/58a8137754bc24b25740d4281399a4a3596058e0\",\n                \"reference\": \"58a8137754bc24b25740d4281399a4a3596058e0\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"doctrine/instantiator\": \"^1.0.2\",\n                \"php\": \"^5.3|^7.0\",\n                \"phpdocumentor/reflection-docblock\": \"^2.0|^3.0.2\",\n                \"sebastian/comparator\": \"^1.1\",\n                \"sebastian/recursion-context\": \"^1.0\"\n            },\n            \"require-dev\": {\n                \"phpspec/phpspec\": \"^2.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.6.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Prophecy\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Konstantin Kudryashov\",\n                    \"email\": \"ever.zet@gmail.com\",\n                    \"homepage\": \"http://everzet.com\"\n                },\n                {\n                    \"name\": \"Marcello Duarte\",\n                    \"email\": \"marcello.duarte@gmail.com\"\n                }\n            ],\n            \"description\": \"Highly opinionated mocking framework for PHP 5.3+\",\n            \"homepage\": \"https://github.com/phpspec/prophecy\",\n            \"keywords\": [\n                \"Double\",\n                \"Dummy\",\n                \"fake\",\n                \"mock\",\n                \"spy\",\n                \"stub\"\n            ],\n            \"time\": \"2016-06-07 08:13:47\"\n        },\n        {\n            \"name\": \"phpunit/php-code-coverage\",\n            \"version\": \"2.2.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-code-coverage.git\",\n                \"reference\": \"eabf68b476ac7d0f73793aada060f1c1a9bf8979\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/eabf68b476ac7d0f73793aada060f1c1a9bf8979\",\n                \"reference\": \"eabf68b476ac7d0f73793aada060f1c1a9bf8979\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\",\n                \"phpunit/php-file-iterator\": \"~1.3\",\n                \"phpunit/php-text-template\": \"~1.2\",\n                \"phpunit/php-token-stream\": \"~1.3\",\n                \"sebastian/environment\": \"^1.3.2\",\n                \"sebastian/version\": \"~1.0\"\n            },\n            \"require-dev\": {\n                \"ext-xdebug\": \">=2.1.4\",\n                \"phpunit/phpunit\": \"~4\"\n            },\n            \"suggest\": {\n                \"ext-dom\": \"*\",\n                \"ext-xdebug\": \">=2.2.1\",\n                \"ext-xmlwriter\": \"*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.2.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sb@sebastian-bergmann.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library that provides collection, processing, and rendering functionality for PHP code coverage information.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-code-coverage\",\n            \"keywords\": [\n                \"coverage\",\n                \"testing\",\n                \"xunit\"\n            ],\n            \"time\": \"2015-10-06 15:47:00\"\n        },\n        {\n            \"name\": \"phpunit/php-file-iterator\",\n            \"version\": \"1.4.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-file-iterator.git\",\n                \"reference\": \"6150bf2c35d3fc379e50c7602b75caceaa39dbf0\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/6150bf2c35d3fc379e50c7602b75caceaa39dbf0\",\n                \"reference\": \"6150bf2c35d3fc379e50c7602b75caceaa39dbf0\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.4.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sb@sebastian-bergmann.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"FilterIterator implementation that filters files based on a list of suffixes.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-file-iterator/\",\n            \"keywords\": [\n                \"filesystem\",\n                \"iterator\"\n            ],\n            \"time\": \"2015-06-21 13:08:43\"\n        },\n        {\n            \"name\": \"phpunit/php-text-template\",\n            \"version\": \"1.2.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-text-template.git\",\n                \"reference\": \"31f8b717e51d9a2afca6c9f046f5d69fc27c8686\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/31f8b717e51d9a2afca6c9f046f5d69fc27c8686\",\n                \"reference\": \"31f8b717e51d9a2afca6c9f046f5d69fc27c8686\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Simple template engine.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-text-template/\",\n            \"keywords\": [\n                \"template\"\n            ],\n            \"time\": \"2015-06-21 13:50:34\"\n        },\n        {\n            \"name\": \"phpunit/php-timer\",\n            \"version\": \"1.0.8\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-timer.git\",\n                \"reference\": \"38e9124049cf1a164f1e4537caf19c99bf1eb260\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-timer/zipball/38e9124049cf1a164f1e4537caf19c99bf1eb260\",\n                \"reference\": \"38e9124049cf1a164f1e4537caf19c99bf1eb260\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4|~5\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sb@sebastian-bergmann.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Utility class for timing\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-timer/\",\n            \"keywords\": [\n                \"timer\"\n            ],\n            \"time\": \"2016-05-12 18:03:57\"\n        },\n        {\n            \"name\": \"phpunit/php-token-stream\",\n            \"version\": \"1.4.8\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-token-stream.git\",\n                \"reference\": \"3144ae21711fb6cac0b1ab4cbe63b75ce3d4e8da\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-token-stream/zipball/3144ae21711fb6cac0b1ab4cbe63b75ce3d4e8da\",\n                \"reference\": \"3144ae21711fb6cac0b1ab4cbe63b75ce3d4e8da\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-tokenizer\": \"*\",\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.2\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.4-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Wrapper around PHP's tokenizer extension.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-token-stream/\",\n            \"keywords\": [\n                \"tokenizer\"\n            ],\n            \"time\": \"2015-09-15 10:49:45\"\n        },\n        {\n            \"name\": \"phpunit/phpunit\",\n            \"version\": \"4.8.26\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/phpunit.git\",\n                \"reference\": \"fc1d8cd5b5de11625979125c5639347896ac2c74\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/phpunit/zipball/fc1d8cd5b5de11625979125c5639347896ac2c74\",\n                \"reference\": \"fc1d8cd5b5de11625979125c5639347896ac2c74\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-json\": \"*\",\n                \"ext-pcre\": \"*\",\n                \"ext-reflection\": \"*\",\n                \"ext-spl\": \"*\",\n                \"php\": \">=5.3.3\",\n                \"phpspec/prophecy\": \"^1.3.1\",\n                \"phpunit/php-code-coverage\": \"~2.1\",\n                \"phpunit/php-file-iterator\": \"~1.4\",\n                \"phpunit/php-text-template\": \"~1.2\",\n                \"phpunit/php-timer\": \"^1.0.6\",\n                \"phpunit/phpunit-mock-objects\": \"~2.3\",\n                \"sebastian/comparator\": \"~1.1\",\n                \"sebastian/diff\": \"~1.2\",\n                \"sebastian/environment\": \"~1.3\",\n                \"sebastian/exporter\": \"~1.2\",\n                \"sebastian/global-state\": \"~1.0\",\n                \"sebastian/version\": \"~1.0\",\n                \"symfony/yaml\": \"~2.1|~3.0\"\n            },\n            \"suggest\": {\n                \"phpunit/php-invoker\": \"~1.1\"\n            },\n            \"bin\": [\n                \"phpunit\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"4.8.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"The PHP Unit Testing framework.\",\n            \"homepage\": \"https://phpunit.de/\",\n            \"keywords\": [\n                \"phpunit\",\n                \"testing\",\n                \"xunit\"\n            ],\n            \"time\": \"2016-05-17 03:09:28\"\n        },\n        {\n            \"name\": \"phpunit/phpunit-mock-objects\",\n            \"version\": \"2.3.8\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/phpunit-mock-objects.git\",\n                \"reference\": \"ac8e7a3db35738d56ee9a76e78a4e03d97628983\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/phpunit-mock-objects/zipball/ac8e7a3db35738d56ee9a76e78a4e03d97628983\",\n                \"reference\": \"ac8e7a3db35738d56ee9a76e78a4e03d97628983\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"doctrine/instantiator\": \"^1.0.2\",\n                \"php\": \">=5.3.3\",\n                \"phpunit/php-text-template\": \"~1.2\",\n                \"sebastian/exporter\": \"~1.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.4\"\n            },\n            \"suggest\": {\n                \"ext-soap\": \"*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.3.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sb@sebastian-bergmann.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Mock Object library for PHPUnit\",\n            \"homepage\": \"https://github.com/sebastianbergmann/phpunit-mock-objects/\",\n            \"keywords\": [\n                \"mock\",\n                \"xunit\"\n            ],\n            \"time\": \"2015-10-02 06:51:40\"\n        },\n        {\n            \"name\": \"sebastian/comparator\",\n            \"version\": \"1.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/comparator.git\",\n                \"reference\": \"937efb279bd37a375bcadf584dec0726f84dbf22\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/comparator/zipball/937efb279bd37a375bcadf584dec0726f84dbf22\",\n                \"reference\": \"937efb279bd37a375bcadf584dec0726f84dbf22\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\",\n                \"sebastian/diff\": \"~1.2\",\n                \"sebastian/exporter\": \"~1.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.4\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.2.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jeff Welch\",\n                    \"email\": \"whatthejeff@gmail.com\"\n                },\n                {\n                    \"name\": \"Volker Dusch\",\n                    \"email\": \"github@wallbash.com\"\n                },\n                {\n                    \"name\": \"Bernhard Schussek\",\n                    \"email\": \"bschussek@2bepublished.at\"\n                },\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Provides the functionality to compare PHP values for equality\",\n            \"homepage\": \"http://www.github.com/sebastianbergmann/comparator\",\n            \"keywords\": [\n                \"comparator\",\n                \"compare\",\n                \"equality\"\n            ],\n            \"time\": \"2015-07-26 15:48:44\"\n        },\n        {\n            \"name\": \"sebastian/diff\",\n            \"version\": \"1.4.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/diff.git\",\n                \"reference\": \"13edfd8706462032c2f52b4b862974dd46b71c9e\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/diff/zipball/13edfd8706462032c2f52b4b862974dd46b71c9e\",\n                \"reference\": \"13edfd8706462032c2f52b4b862974dd46b71c9e\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.8\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.4-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Kore Nordmann\",\n                    \"email\": \"mail@kore-nordmann.de\"\n                },\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Diff implementation\",\n            \"homepage\": \"https://github.com/sebastianbergmann/diff\",\n            \"keywords\": [\n                \"diff\"\n            ],\n            \"time\": \"2015-12-08 07:14:41\"\n        },\n        {\n            \"name\": \"sebastian/environment\",\n            \"version\": \"1.3.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/environment.git\",\n                \"reference\": \"4e8f0da10ac5802913afc151413bc8c53b6c2716\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/environment/zipball/4e8f0da10ac5802913afc151413bc8c53b6c2716\",\n                \"reference\": \"4e8f0da10ac5802913afc151413bc8c53b6c2716\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.4\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.3.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Provides functionality to handle HHVM/PHP environments\",\n            \"homepage\": \"http://www.github.com/sebastianbergmann/environment\",\n            \"keywords\": [\n                \"Xdebug\",\n                \"environment\",\n                \"hhvm\"\n            ],\n            \"time\": \"2016-05-17 03:18:57\"\n        },\n        {\n            \"name\": \"sebastian/exporter\",\n            \"version\": \"1.2.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/exporter.git\",\n                \"reference\": \"7ae5513327cb536431847bcc0c10edba2701064e\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/exporter/zipball/7ae5513327cb536431847bcc0c10edba2701064e\",\n                \"reference\": \"7ae5513327cb536431847bcc0c10edba2701064e\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\",\n                \"sebastian/recursion-context\": \"~1.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.4\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.2.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jeff Welch\",\n                    \"email\": \"whatthejeff@gmail.com\"\n                },\n                {\n                    \"name\": \"Volker Dusch\",\n                    \"email\": \"github@wallbash.com\"\n                },\n                {\n                    \"name\": \"Bernhard Schussek\",\n                    \"email\": \"bschussek@2bepublished.at\"\n                },\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                },\n                {\n                    \"name\": \"Adam Harvey\",\n                    \"email\": \"aharvey@php.net\"\n                }\n            ],\n            \"description\": \"Provides the functionality to export PHP variables for visualization\",\n            \"homepage\": \"http://www.github.com/sebastianbergmann/exporter\",\n            \"keywords\": [\n                \"export\",\n                \"exporter\"\n            ],\n            \"time\": \"2015-06-21 07:55:53\"\n        },\n        {\n            \"name\": \"sebastian/global-state\",\n            \"version\": \"1.1.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/global-state.git\",\n                \"reference\": \"bc37d50fea7d017d3d340f230811c9f1d7280af4\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/global-state/zipball/bc37d50fea7d017d3d340f230811c9f1d7280af4\",\n                \"reference\": \"bc37d50fea7d017d3d340f230811c9f1d7280af4\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.2\"\n            },\n            \"suggest\": {\n                \"ext-uopz\": \"*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Snapshotting of global state\",\n            \"homepage\": \"http://www.github.com/sebastianbergmann/global-state\",\n            \"keywords\": [\n                \"global state\"\n            ],\n            \"time\": \"2015-10-12 03:26:01\"\n        },\n        {\n            \"name\": \"sebastian/recursion-context\",\n            \"version\": \"1.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/recursion-context.git\",\n                \"reference\": \"913401df809e99e4f47b27cdd781f4a258d58791\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/913401df809e99e4f47b27cdd781f4a258d58791\",\n                \"reference\": \"913401df809e99e4f47b27cdd781f4a258d58791\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.4\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jeff Welch\",\n                    \"email\": \"whatthejeff@gmail.com\"\n                },\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                },\n                {\n                    \"name\": \"Adam Harvey\",\n                    \"email\": \"aharvey@php.net\"\n                }\n            ],\n            \"description\": \"Provides functionality to recursively process PHP variables\",\n            \"homepage\": \"http://www.github.com/sebastianbergmann/recursion-context\",\n            \"time\": \"2015-11-11 19:50:13\"\n        },\n        {\n            \"name\": \"sebastian/version\",\n            \"version\": \"1.0.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/version.git\",\n                \"reference\": \"58b3a85e7999757d6ad81c787a1fbf5ff6c628c6\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/version/zipball/58b3a85e7999757d6ad81c787a1fbf5ff6c628c6\",\n                \"reference\": \"58b3a85e7999757d6ad81c787a1fbf5ff6c628c6\",\n                \"shasum\": \"\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library that helps with managing the version number of Git-hosted PHP projects\",\n            \"homepage\": \"https://github.com/sebastianbergmann/version\",\n            \"time\": \"2015-06-21 13:59:46\"\n        },\n        {\n            \"name\": \"symfony/yaml\",\n            \"version\": \"v3.1.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/yaml.git\",\n                \"reference\": \"eca51b7b65eb9be6af88ad7cc91685f1556f5c9a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/yaml/zipball/eca51b7b65eb9be6af88ad7cc91685f1556f5c9a\",\n                \"reference\": \"eca51b7b65eb9be6af88ad7cc91685f1556f5c9a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.1-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Yaml\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony Yaml Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2016-05-26 21:46:24\"\n        },\n        {\n            \"name\": \"webmozart/assert\",\n            \"version\": \"1.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/webmozart/assert.git\",\n                \"reference\": \"30eed06dd6bc88410a4ff7f77b6d22f3ce13dbde\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/webmozart/assert/zipball/30eed06dd6bc88410a4ff7f77b6d22f3ce13dbde\",\n                \"reference\": \"30eed06dd6bc88410a4ff7f77b6d22f3ce13dbde\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^4.6\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Webmozart\\\\Assert\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Bernhard Schussek\",\n                    \"email\": \"bschussek@gmail.com\"\n                }\n            ],\n            \"description\": \"Assertions to validate method input/output with nice error messages.\",\n            \"keywords\": [\n                \"assert\",\n                \"check\",\n                \"validate\"\n            ],\n            \"time\": \"2015-08-24 13:29:44\"\n        }\n    ],\n    \"aliases\": [],\n    \"minimum-stability\": \"stable\",\n    \"stability-flags\": [],\n    \"prefer-stable\": false,\n    \"prefer-lowest\": false,\n    \"platform\": {\n        \"php\": \">=5.5.9\"\n    },\n    \"platform-dev\": []\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "database",
          "type": "tree",
          "content": null
        },
        {
          "name": "gulpfile.js",
          "type": "blob",
          "size": 0.87109375,
          "content": "var elixir = require('laravel-elixir');\nelixir.config.js.browserify.watchify.options.poll = true;\n\n// elixir.config.js.browserify.transformers.push({\n//     name: 'vueify'\n// });\nrequire('laravel-elixir-vueify');\nrequire('laravel-elixir-livereload');\n\n/*\n |--------------------------------------------------------------------------\n | Elixir Asset Management\n |--------------------------------------------------------------------------\n |\n | Elixir provides a clean, fluent API for defining some basic Gulp tasks\n | for your Laravel application. By default, we are compiling the Sass\n | file for our application, as well as publishing vendor resources.\n |\n */\n\nelixir(function(mix) {\n    mix.less('../themes/clean-blog/clean-blog.less')\n    \n    mix.browserify('main.js')\n    mix.browserify('theme.js')\n    mix.version(['public/js/main.js', 'public/js/theme.js']);\n\n    mix.livereload();\n});\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.91796875,
          "content": "{\n  \"scripts\": {\n    \"prod\": \"gulp --production\",\n    \"dev\": \"gulp watch\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"^6.9.1\",\n    \"babel-loader\": \"^6.2.4\",\n    \"babel-plugin-transform-runtime\": \"^6.9.0\",\n    \"babel-preset-es2015\": \"^6.9.0\",\n    \"babel-preset-react\": \"^6.5.0\",\n    \"babel-runtime\": \"^6.9.2\",\n    \"babelify\": \"^7.3.0\",\n    \"bootstrap-sass\": \"^3.3.6\",\n    \"css-loader\": \"^0.23.1\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-livereload\": \"^3.8.1\",\n    \"jquery\": \"^2.2.3\",\n    \"laravel-elixir\": \"^5.0.0\",\n    \"laravel-elixir-livereload\": \"^1.1.5-beta\",\n    \"laravel-elixir-vueify\": \"^1.0.3\",\n    \"pnotify\": \"^3.0.0\",\n    \"sweetalert2\": \"^4.0.5\",\n    \"vue\": \"^1.0.25\",\n    \"vue-hot-reload-api\": \"^1.3.2\",\n    \"vue-html-loader\": \"^1.2.2\",\n    \"vue-loader\": \"^8.5.2\",\n    \"vue-multiselect\": \"^0.3.0\",\n    \"vue-resource\": \"0.8.0\",\n    \"vue-router\": \"^0.7.13\",\n    \"vue-style-loader\": \"^1.0.0\",\n    \"vueify\": \"^8.5.4\",\n    \"webpack\": \"^1.13.1\"\n  },\n  \"name\": \"vuejs-news\",\n  \"description\": \"[![Build Status](https://travis-ci.org/laravel/framework.svg)](https://travis-ci.org/laravel/framework) [![Total Downloads](https://poser.pugx.org/laravel/framework/d/total.svg)](https://packagist.org/packages/laravel/framework) [![Latest Stable Version](https://poser.pugx.org/laravel/framework/v/stable.svg)](https://packagist.org/packages/laravel/framework) [![Latest Unstable Version](https://poser.pugx.org/laravel/framework/v/unstable.svg)](https://packagist.org/packages/laravel/framework) [![License](https://poser.pugx.org/laravel/framework/license.svg)](https://packagist.org/packages/laravel/framework)\",\n  \"version\": \"1.0.0\",\n  \"main\": \"gulpfile.js\",\n  \"directories\": {\n    \"test\": \"tests\"\n  },\n  \"dependencies\": {\n    \"dropzone\": \"^4.3.0\",\n    \"simplemde\": \"^1.11.2\",\n    \"vue-multiselect\": \"^0.3.0\",\n    \"vuejs-paginator\": \"^1.0.14\"\n  },\n  \"author\": \"Alex Kyriakidis <hootlex@icloud.com>\",\n  \"license\": \"MIT\",\n  \"homepage\": \"https://github.com/vuedo/vuedo\"\n}\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 1.001953125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         bootstrap=\"bootstrap/autoload.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n    <testsuites>\n        <testsuite name=\"Application Test Suite\">\n            <directory suffix=\"Test.php\">./tests</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist processUncoveredFilesFromWhitelist=\"true\">\n            <directory suffix=\".php\">./app</directory>\n            <exclude>\n                <file>./app/Http/routes.php</file>\n            </exclude>\n        </whitelist>\n    </filter>\n    <php>\n        <env name=\"APP_ENV\" value=\"testing\"/>\n        <env name=\"CACHE_DRIVER\" value=\"array\"/>\n        <env name=\"SESSION_DRIVER\" value=\"array\"/>\n        <env name=\"QUEUE_DRIVER\" value=\"sync\"/>\n    </php>\n</phpunit>\n"
        },
        {
          "name": "public",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 1.9384765625,
          "content": "# Vuedo ![logo](http://i.imgur.com/iBEAx7O.png?2)\n[![Build Status](https://travis-ci.org/Vuedo/vuedo.svg?branch=master)](https://travis-ci.org/Vuedo/vuedo) [![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat)](LICENSE) [![Join the chat at https://gitter.im/vuedo/Lobby](https://badges.gitter.im/vuedo/Lobby.svg)](https://gitter.im/vuedo/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n## What is Vuedo?\n\nVuedo is an open source project built with Laravel and Vue.js. It is a live example of how everything works together.\n\n## Website using Vuedo in production : [https://vuejsfeed.com/](https://vuejsfeed.com/)\n\nVue.js Feed is a place where News, Tutorials, Plugins, Showcases and more things regarding Vue are handpicked and shared with the community.\n\n![Dashboard Overview](http://i.imgur.com/4AdbjsF.gif)\n\n## Basic Features:\n\n* Manage posts and media\n* Categorize posts\n* User Roles\n* Content moderation\n* Markdown Editor\n* Amazon S3 integration\n* and more...\n\n## Installation\n\nDownload this repo.\n\nRename `.env.example` to `.env` and fill the options.\n\nRun the following commands:\n\n```\ncomposer install\nnpm install\nphp artisan key:generate\nphp artisan migrate\nphp artisan db:seed\ngulp\nphp artisan serve\n```\n\nIf you are making changes to JavaScript or Styles make sure you run `gulp watch`.\n\n## Technical Description\n\nYou can find the technical description and a list with the libraries used in development [here](https://github.com/Vuedo/vuedo/wiki/Technical-Description).\n\n## Documentation\n\nComing soon...\n\n## Issues\n\nFor technical questions and bugs feel free to open one issue.\n\n## Contribution\n\nSoon a roadmap for contribution will be added so everyone will be welcome to join.\n\n## Stay In Touch\n\nFor latest releases and announcements, follow [@vuedo](https://twitter.com/vuedo) on Twitter.\n\n## License\n\nVuedo is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "server.php",
          "type": "blob",
          "size": 0.5537109375,
          "content": "<?php\n\n/**\n * Laravel - A PHP Framework For Web Artisans\n *\n * @package  Laravel\n * @author   Taylor Otwell <taylorotwell@gmail.com>\n */\n\n$uri = urldecode(\n    parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH)\n);\n\n// This file allows us to emulate Apache's \"mod_rewrite\" functionality from the\n// built-in PHP web server. This provides a convenient way to test a Laravel\n// application without having installed a \"real\" web server software here.\nif ($uri !== '/' && file_exists(__DIR__.'/public'.$uri)) {\n    return false;\n}\n\nrequire_once __DIR__.'/public/index.php';\n"
        },
        {
          "name": "storage",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 0.216796875,
          "content": "#!/bin/bash;\necho \"Updating...\";\n\necho \"Install project dependencies...\";\ncomposer install\nnpm install\n\necho \"Migrate and seed the database...\";\nphp artisan migrate:refresh\nphp artisan db:seed\n\necho \"You are ready to go!\";"
        }
      ]
    }
  ]
}