{
  "metadata": {
    "timestamp": 1736711825265,
    "page": 125,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "isohuntto/openbay",
      "stars": 3518,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bowerrc",
          "type": "blob",
          "size": 0.0361328125,
          "content": "{\n    \"directory\" : \"vendor/bower\"\n}\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.40625,
          "content": "# yii console command\n/yii\n\n# phpstorm project files\n.idea\n\n# netbeans project files\nnbproject\n\n# zend studio for eclipse project files\n.buildpath\n.project\n.settings\n\n# windows thumbnail cache\nThumbs.db\n\n# composer vendor dir\n/vendor\n\n# composer itself is not needed\ncomposer.phar\ncomposer.lock\n\n# Mac DS_Store Files\n.DS_Store\n\n# phpunit itself is not needed\nphpunit.phar\n# local phpunit config\n/phpunit.xml\n\n/conf/*"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.583984375,
          "content": "The Yii framework is free software. It is released under the terms of\nthe following BSD License.\n\nCopyright © 2008 by Yii Software LLC (http://www.yiisoft.com)\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n * Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in\n   the documentation and/or other materials provided with the\n   distribution.\n * Neither the name of Yii Software LLC nor the names of its\n   contributors may be used to endorse or promote products derived\n   from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\nANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.9833984375,
          "content": "Openbay is not supported\n=======\n\nWarm greetings to all of our guests!\n\nIsohunt team is closing down the Openbay project support and  the competition itself because of the very low activity on the project. We’ve got hold of the developers that took part in the competition and offered them a long-term cooperation.\n\nWe are very disappointed that your activity lowered to such a level that even a 50 000$ reward couldn’t motivate you.\n\nHowever, if you’re ready to cooperate and work on the project with us, send us an e-mail to oldpiratebay@hushmail.com .\n\nGood code and less bugs to everybody!\n\n\n\nCHANGELOG:\n----------\n\n- Full migration to Yii2\n- Comment module created\n- Rating module created\n- Complains module created\n\nGETTING STARTED\n---------------\n\nThe installation steps are tested on virtual machine managed by VirtualBox.\nThe virtual PC was configured with 2 network cards, the first one attached to NAT, the second one - Host-only adapter. You'll need the IP of host only-adapter to configure host machine, where you're intending to develop and test openbay. If the second adapter wasn't configured automatically - edit */etc/network/interfaces* file by adding\n```\nauto eth1\niface eth1 inet static\naddress 192.168.56.101\nnetmask 255.255.255.0\n```\nThen restart.\n\nBy default VirtualBox Host-only network address is 192.168.56.*. If not - refer to Linux networking and VirtualBox documentation.\n#### Operating system\n\nInstall Ubuntu 14.04 32-bit minimal from [here](https://help.ubuntu.com/community/Installation/MinimalCD) on your virtual pc. To reduce system overhead, do not install packets which are not necessary for you. In this case, to control installation, only *Basic Server* and *OpenSSH Server* are chosen. During installation create user named, for example, **openpirate**. The installation is quite trivial, for details visit [official site](https://help.ubuntu.com/community/Installation/MinimalCD).\n\n#### Install some useful and necessary software\n```\n$ sudo apt-get update\n$ sudo apt-get install git curl\n```\nThis will install curl and git to your system.\n\n#### Checkout working copy\nIf you want to checkout to different path - fix path in configs.\n*TODO: Change repo name after merge pull-request*\n```\n$ mkdir ~/www/\n$ cd ~/www/\n$ git clone https://github.com/profezz/openbay.git --branch manual\n```\n#### LNMP stack (nginx + apache + php)\nFor using OpenBay you need LNMP stack. The installation of nginx, mysql and PHP-fpm will be described in this section. If you want to use other stack (for example LAMP) refer to official documentation.\n\n##### Nginx\n[Nginx](http://nginx.com/) is a high performance scalable web-server.\nInstall it by typing\n```\n$ sudo apt-get install nginx\n```\nChange server run user to **openpirate** in */etc/nginx/nginx.conf*.\n\nCopy nginx config file from working copy to */etc/nginx/sites-available/opb*. Edit paths if necessary.\n```\nsudo cp ~/www/openbay/environments/dev/conf/nginx.conf /etc/nginx/sites-available/opb.conf\n```\nCreate symlink in */etc/nginx/sites-enabled/*\n```\n$ sudo ln -s /etc/nginx/sites-available/opb.conf /etc/nginx/sites-enabled/001-opb.conf\n```\nMake logs dir\n```\nmkdir ~/www/logs\n```\nNow restart nginx.\n```\n$ sudo service nginx restart\n```\n##### Mysql\nYou will need both mysql-server and mysql-client to make Openbay work.\n```\n$ sudo apt-get install mysql-server-5.5 mysql-client\n```\nRoot password will be prompted during installation.\n##### PHP\nThis manual describes how to install php-fpm. If you want to use FastCGI refer to PHP documentation.\n\nInstall PHP with necessary modules\n```\n$ sudo apt-get install php5-fpm php5-memcached php-pear php5-redis php5-dev php5-mysql php5-mcrypt php5-intl\n```\nChange FPM user and group and FPM socket owner and group from www-data to openpirate in */etc/php5/fpm/pool.d/www.conf*\n\nAlso, you'll have to install *igbinary* extension manually.\n```\n$ sudo pecl install -Z igbinary\n```\nAnd create and link necessary files:\n- create /etc/php5/mods-available/igbinary.ini with following content:\n```\nextension=igbinary.so\n```\n- Create symlinks for CLI and FPM config files\n```\n$ sudo ln -s /etc/php5/mods-available/igbinary.ini /etc/php5/cli/conf.d/10-igbinary.ini\n$ sudo ln -s /etc/php5/mods-available/igbinary.ini /etc/php5/fpm/conf.d/10-igbinary.ini\n$ sudo ln -s /etc/php5/mods-available/mcrypt.ini /etc/php5/cli/conf.d/10-mcrypt.ini\n$ sudo ln -s /etc/php5/mods-available/mcrypt.ini /etc/php5/fpm/conf.d/10-mcrypt.ini\n```\n\nNow, restart FPM\n```\n$ sudo service php5-fpm restart\n```\n#### Sphinx\n[Sphinx](http://sphinxsearch.com/) is powerful and flexible search engine used in Openbay.\n\nDownload sphinxsearch from official site\n```\n$ wget http://sphinxsearch.com/files/sphinxsearch_2.2.7-release-0ubuntu12~precise_i386.deb\n```\nInstall sphinx\n```\n$ sudo apt-get install libodbc1 libpq5\n$ sudo dpkg -i sphinxsearch_2.2.7-release-0ubuntu12~precise_i386.deb\n```\nStop the daemon\n```\n$ sudo searchd --stop\n```\nMove sphinx config to */etc/sphinx*\n```\n$ sudo cp ~/www/openbay/environments/dev/conf/sphinx.conf /etc/sphinxsearch/sphinx.conf\n```\n#### Redis\nThe server user for caching.\n```\n$ sudo apt-get install redis-server\n```\n#### composer\nNow install [composer](http://getcomposer.org/).\n```\n$ curl -s http://getcomposer.org/installer | php\n$ sudo mv composer.phar /usr/local/bin/composer\n```\n\n#### Initializing project\nGo to sources folder\n```\n$ cd ~/www/openbay/\n```\nYou need to install composer bower plugin\n```\n$ composer global require \"fxp/composer-asset-plugin:1.0.0\"\n```\nAnd get vendor packages\n```\n$ composer update\n```\nDue to bower assets it can take long time.\n\nAlso, composer can require your github credentials.\n\nNow create database\n```\n$ mysql -uroot -p\nmysql> create database opb default character set utf8;\nmysql> grant all on opb.* to opb@'%' identified by 'opb';\n```\n\nInitialize project by running\n```\n$ cd ~/www/openbay\n$ php init\n```\nFill salts and reCaptcha key in *~/www/openbay/frontend/config/main-local.php*\n\nApply migrations\n```\n$ ./yii migrate\n$ ./yii migrate --migrationPath=@frontend/modules/comment/migrations\n$ ./yii migrate --migrationPath=@frontend/modules/complain/migrations\n$ ./yii migrate --migrationPath=@frontend/modules/rating/migrations\n```\n\nNow you can rebuild sphinx indices\n```\n$ sudo indexer --all\n```\nAnd run sphinx\n```\n$ sudo killall searchd\n$ sudo searchd\n```\n\nDue to sphinx config it seems that only delta index should be rotated on data change\n```\n$ indexer --rotate npbtorrents_delta\n```\n\nAnd now Openbay is installed. To test it you need some actions on host machine. Append the following line to */etc/hosts* file:\n```\n192.168.56.101 opb.virt\n```\nAnd you can test your developer copy of Openbay by typing *http://opb.virt* in your browser.\n\nLEGACY CODE\n----------\nThus, we’re refusing to support an old version. However, those wishing to develop an old version of OpenBay by themselves can still access it in the [master-1.0 branch](https://github.com/isohuntto/openbay/tree/master-1.0).\n\nP.S. Also, all our team wants to bring our sincere apologies to all those who had been waiting so long for our update and to thank all those who was so patient to wait till it was finally released!\n"
        },
        {
          "name": "backend",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.3388671875,
          "content": "{\n    \"name\": \"yiisoft/yii2-app-advanced\",\n    \"description\": \"Yii 2 Advanced Application Template\",\n    \"keywords\": [\"yii2\", \"framework\", \"advanced\", \"application template\"],\n    \"homepage\": \"http://www.yiiframework.com/\",\n    \"type\": \"project\",\n    \"license\": \"BSD-3-Clause\",\n    \"support\": {\n        \"issues\": \"https://github.com/yiisoft/yii2/issues?state=open\",\n        \"forum\": \"http://www.yiiframework.com/forum/\",\n        \"wiki\": \"http://www.yiiframework.com/wiki/\",\n        \"irc\": \"irc://irc.freenode.net/yii\",\n        \"source\": \"https://github.com/yiisoft/yii2\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"require\": {\n        \"php\": \">=5.4.0\",\n        \"yiisoft/yii2\": \"*\",\n        \"yiisoft/yii2-bootstrap\": \"*\",\n        \"yiisoft/yii2-swiftmailer\": \"*\",\n        \"yiisoft/yii2-sphinx\": \"2.0.2\",\n        \"yiisoft/yii2-redis\": \"2.0.2\",\n        \"creocoder/yii2-nested-sets\": \"dev-master\",\n        \"rych/bencode\": \"1.0.*\",\n        \"himiklab/yii2-recaptcha-widget\" : \"*\"\n    },\n    \"require-dev\": {\n        \"yiisoft/yii2-codeception\": \"*\",\n        \"yiisoft/yii2-debug\": \"*\",\n        \"yiisoft/yii2-gii\": \"*\",\n        \"yiisoft/yii2-faker\": \"*\"\n    },\n    \"config\": {\n        \"process-timeout\": 1800\n    },\n    \"extra\": {\n        \"asset-installer-paths\": {\n            \"npm-asset-library\": \"vendor/npm\",\n            \"bower-asset-library\": \"vendor/bower\"\n        }\n    }\n}\n"
        },
        {
          "name": "console",
          "type": "tree",
          "content": null
        },
        {
          "name": "environments",
          "type": "tree",
          "content": null
        },
        {
          "name": "frontend",
          "type": "tree",
          "content": null
        },
        {
          "name": "init",
          "type": "blob",
          "size": 5.806640625,
          "content": "#!/usr/bin/env php\n<?php\n/**\n * Yii Application Initialization Tool\n *\n * In order to run in non-interactive mode:\n *\n * init --env=Development --overwrite=n\n *\n * @author Alexander Makarov <sam@rmcreative.ru>\n *\n * @link http://www.yiiframework.com/\n * @copyright Copyright (c) 2008 Yii Software LLC\n * @license http://www.yiiframework.com/license/\n */\n\nif (!extension_loaded('mcrypt')) {\n    die('The mcrypt PHP extension is required by Yii2.');\n}\n\n$params = getParams();\n$root = str_replace('\\\\', '/', __DIR__);\n$envs = require(\"$root/environments/index.php\");\n$envNames = array_keys($envs);\n\necho \"Yii Application Initialization Tool v1.0\\n\\n\";\n\n$envName = null;\nif (empty($params['env']) || $params['env'] === '1') {\n    echo \"Which environment do you want the application to be initialized in?\\n\\n\";\n    foreach ($envNames as $i => $name) {\n        echo \"  [$i] $name\\n\";\n    }\n    echo \"\\n  Your choice [0-\" . (count($envs) - 1) . ', or \"q\" to quit] ';\n    $answer = trim(fgets(STDIN));\n\n    if (!ctype_digit($answer) || !in_array($answer, range(0, count($envs) - 1))) {\n        echo \"\\n  Quit initialization.\\n\";\n        exit(0);\n    }\n\n    if (isset($envNames[$answer])) {\n        $envName = $envNames[$answer];\n    }\n} else {\n    $envName = $params['env'];\n}\n\nif (!in_array($envName, $envNames)) {\n    $envsList = implode(', ', $envNames);\n    echo \"\\n  $envName is not a valid environment. Try one of the following: $envsList. \\n\";\n    exit(2);\n}\n\n$env = $envs[$envName];\n\nif (empty($params['env'])) {\n    echo \"\\n  Initialize the application under '{$envNames[$answer]}' environment? [yes|no] \";\n    $answer = trim(fgets(STDIN));\n    if (strncasecmp($answer, 'y', 1)) {\n        echo \"\\n  Quit initialization.\\n\";\n        exit(0);\n    }\n}\n\necho \"\\n  Start initialization ...\\n\\n\";\n$files = getFileList(\"$root/environments/{$env['path']}\");\n$all = false;\nforeach ($files as $file) {\n    if (!copyFile($root, \"environments/{$env['path']}/$file\", $file, $all, $params)) {\n        break;\n    }\n}\n\n$callbacks = ['setCookieValidationKey', 'setWritable', 'setExecutable'];\nforeach ($callbacks as $callback) {\n    if (!empty($env[$callback])) {\n        $callback($root, $env[$callback]);\n    }\n}\n\necho \"\\n  ... initialization completed.\\n\\n\";\n\nfunction getFileList($root, $basePath = '')\n{\n    $files = [];\n    $handle = opendir($root);\n    while (($path = readdir($handle)) !== false) {\n        if ($path === '.svn' || $path === '.' || $path === '..') {\n            continue;\n        }\n        $fullPath = \"$root/$path\";\n        $relativePath = $basePath === '' ? $path : \"$basePath/$path\";\n        if (is_dir($fullPath)) {\n            $files = array_merge($files, getFileList($fullPath, $relativePath));\n        } else {\n            $files[] = $relativePath;\n        }\n    }\n    closedir($handle);\n    return $files;\n}\n\nfunction copyFile($root, $source, $target, &$all, $params)\n{\n    if (!is_file($root . '/' . $source)) {\n        echo \"       skip $target ($source not exist)\\n\";\n        return true;\n    }\n    if (is_file($root . '/' . $target)) {\n        if (file_get_contents($root . '/' . $source) === file_get_contents($root . '/' . $target)) {\n            echo \"  unchanged $target\\n\";\n            return true;\n        }\n        if ($all) {\n            echo \"  overwrite $target\\n\";\n        } else {\n            echo \"      exist $target\\n\";\n            echo \"            ...overwrite? [Yes|No|All|Quit] \";\n\n\n            $answer = !empty($params['overwrite']) ? $params['overwrite'] : trim(fgets(STDIN));\n            if (!strncasecmp($answer, 'q', 1)) {\n                return false;\n            } else {\n                if (!strncasecmp($answer, 'y', 1)) {\n                    echo \"  overwrite $target\\n\";\n                } else {\n                    if (!strncasecmp($answer, 'a', 1)) {\n                        echo \"  overwrite $target\\n\";\n                        $all = true;\n                    } else {\n                        echo \"       skip $target\\n\";\n                        return true;\n                    }\n                }\n            }\n        }\n        file_put_contents($root . '/' . $target, file_get_contents($root . '/' . $source));\n        return true;\n    }\n    echo \"   generate $target\\n\";\n    @mkdir(dirname($root . '/' . $target), 0777, true);\n    file_put_contents($root . '/' . $target, file_get_contents($root . '/' . $source));\n    return true;\n}\n\nfunction getParams()\n{\n    $rawParams = [];\n    if (isset($_SERVER['argv'])) {\n        $rawParams = $_SERVER['argv'];\n        array_shift($rawParams);\n    }\n\n    $params = [];\n    foreach ($rawParams as $param) {\n        if (preg_match('/^--(\\w+)(=(.*))?$/', $param, $matches)) {\n            $name = $matches[1];\n            $params[$name] = isset($matches[3]) ? $matches[3] : true;\n        } else {\n            $params[] = $param;\n        }\n    }\n    return $params;\n}\n\nfunction setWritable($root, $paths)\n{\n    foreach ($paths as $writable) {\n        echo \"      chmod 0777 $writable\\n\";\n        @chmod(\"$root/$writable\", 0777);\n    }\n}\n\nfunction setExecutable($root, $paths)\n{\n    foreach ($paths as $executable) {\n        echo \"      chmod 0755 $executable\\n\";\n        @chmod(\"$root/$executable\", 0755);\n    }\n}\n\nfunction setCookieValidationKey($root, $paths)\n{\n    foreach ($paths as $file) {\n        echo \"   generate cookie validation key in $file\\n\";\n        $file = $root . '/' . $file;\n        $length = 32;\n        $bytes = mcrypt_create_iv($length, MCRYPT_DEV_URANDOM);\n        $key = strtr(substr(base64_encode($bytes), 0, $length), '+/=', '_-.');\n        $content = preg_replace('/((\"|\\')cookieValidationKey(\"|\\')\\s*=>\\s*)(\"\"|\\'\\')/', \"\\\\1'$key'\", file_get_contents($file));\n        file_put_contents($file, $content);\n    }\n}\n\nfunction createSymlink($links)\n{\n    foreach ($links as $link => $target) {\n        echo \"    symlink $target as $link\\n\";\n        if (!is_link($link)) {\n            symlink($target, $link);\n        }\n    }\n}\n"
        },
        {
          "name": "init.bat",
          "type": "blob",
          "size": 0.4990234375,
          "content": "@echo off\n\nrem -------------------------------------------------------------\nrem  Yii command line init script for Windows.\nrem\nrem  @author Qiang Xue <qiang.xue@gmail.com>\nrem  @link http://www.yiiframework.com/\nrem  @copyright Copyright (c) 2008 Yii Software LLC\nrem  @license http://www.yiiframework.com/license/\nrem -------------------------------------------------------------\n\n@setlocal\n\nset YII_PATH=%~dp0\n\nif \"%PHP_COMMAND%\" == \"\" set PHP_COMMAND=php.exe\n\n\"%PHP_COMMAND%\" \"%YII_PATH%init\" %*\n\n@endlocal\n"
        },
        {
          "name": "requirements.php",
          "type": "blob",
          "size": 4.9326171875,
          "content": "<?php\n/**\n * Application requirement checker script.\n *\n * In order to run this script use the following console command:\n * php requirements.php\n *\n * In order to run this script from the web, you should copy it to the web root.\n * If you are using Linux you can create a hard link instead, using the following command:\n * ln requirements.php ../requirements.php\n */\n\n// you may need to adjust this path to the correct Yii framework path\n$frameworkPath = dirname(__FILE__) . '/vendor/yiisoft/yii2';\n\nif (!is_dir($frameworkPath)) {\n    echo '<h1>Error</h1>';\n    echo '<p><strong>The path to yii framework seems to be incorrect.</strong></p>';\n    echo '<p>You need to install Yii framework via composer or adjust the framework path in file <abbr title=\"' . __FILE__ . '\">' . basename(__FILE__) . '</abbr>.</p>';\n    echo '<p>Please refer to the <abbr title=\"' . dirname(__FILE__) . '/README.md\">README</abbr> on how to install Yii.</p>';\n}\n\nrequire_once($frameworkPath . '/requirements/YiiRequirementChecker.php');\n$requirementsChecker = new YiiRequirementChecker();\n\n$gdMemo = $imagickMemo = 'Either GD PHP extension with FreeType support or ImageMagick PHP extension with PNG support is required for image CAPTCHA.';\n$gdOK = $imagickOK = false;\n\nif (extension_loaded('imagick')) {\n    $imagick = new Imagick();\n    $imagickFormats = $imagick->queryFormats('PNG');\n    if (in_array('PNG', $imagickFormats)) {\n        $imagickOK = true;\n    } else {\n        $imagickMemo = 'Imagick extension should be installed with PNG support in order to be used for image CAPTCHA.';\n    }\n}\n\nif (extension_loaded('gd')) {\n    $gdInfo = gd_info();\n    if (!empty($gdInfo['FreeType Support'])) {\n        $gdOK = true;\n    } else {\n        $gdMemo = 'GD extension should be installed with FreeType support in order to be used for image CAPTCHA.';\n    }\n}\n\n/**\n * Adjust requirements according to your application specifics.\n */\n$requirements = array(\n    // Database :\n    array(\n        'name' => 'PDO extension',\n        'mandatory' => true,\n        'condition' => extension_loaded('pdo'),\n        'by' => 'All DB-related classes',\n    ),\n    array(\n        'name' => 'PDO SQLite extension',\n        'mandatory' => false,\n        'condition' => extension_loaded('pdo_sqlite'),\n        'by' => 'All DB-related classes',\n        'memo' => 'Required for SQLite database.',\n    ),\n    array(\n        'name' => 'PDO MySQL extension',\n        'mandatory' => false,\n        'condition' => extension_loaded('pdo_mysql'),\n        'by' => 'All DB-related classes',\n        'memo' => 'Required for MySQL database.',\n    ),\n    array(\n        'name' => 'PDO PostgreSQL extension',\n        'mandatory' => false,\n        'condition' => extension_loaded('pdo_pgsql'),\n        'by' => 'All DB-related classes',\n        'memo' => 'Required for PostgreSQL database.',\n    ),\n    // Cache :\n    array(\n        'name' => 'Memcache extension',\n        'mandatory' => false,\n        'condition' => extension_loaded('memcache') || extension_loaded('memcached'),\n        'by' => '<a href=\"http://www.yiiframework.com/doc-2.0/yii-caching-memcache.html\">MemCache</a>',\n        'memo' => extension_loaded('memcached') ? 'To use memcached set <a href=\"http://www.yiiframework.com/doc-2.0/yii-caching-memcache.html#$useMemcached-detail\">MemCache::useMemcached</a> to <code>true</code>.' : ''\n    ),\n    array(\n        'name' => 'APC extension',\n        'mandatory' => false,\n        'condition' => extension_loaded('apc'),\n        'by' => '<a href=\"http://www.yiiframework.com/doc-2.0/yii-caching-apccache.html\">ApcCache</a>',\n    ),\n    // CAPTCHA:\n    array(\n        'name' => 'GD PHP extension with FreeType support',\n        'mandatory' => false,\n        'condition' => $gdOK,\n        'by' => '<a href=\"http://www.yiiframework.com/doc-2.0/yii-captcha-captcha.html\">Captcha</a>',\n        'memo' => $gdMemo,\n    ),\n    array(\n        'name' => 'ImageMagick PHP extension with PNG support',\n        'mandatory' => false,\n        'condition' => $imagickOK,\n        'by' => '<a href=\"http://www.yiiframework.com/doc-2.0/yii-captcha-captcha.html\">Captcha</a>',\n        'memo' => $imagickMemo,\n    ),\n    // PHP ini :\n    'phpExposePhp' => array(\n        'name' => 'Expose PHP',\n        'mandatory' => false,\n        'condition' => $requirementsChecker->checkPhpIniOff(\"expose_php\"),\n        'by' => 'Security reasons',\n        'memo' => '\"expose_php\" should be disabled at php.ini',\n    ),\n    'phpAllowUrlInclude' => array(\n        'name' => 'PHP allow url include',\n        'mandatory' => false,\n        'condition' => $requirementsChecker->checkPhpIniOff(\"allow_url_include\"),\n        'by' => 'Security reasons',\n        'memo' => '\"allow_url_include\" should be disabled at php.ini',\n    ),\n    'phpSmtp' => array(\n        'name' => 'PHP mail SMTP',\n        'mandatory' => false,\n        'condition' => strlen(ini_get('SMTP')) > 0,\n        'by' => 'Email sending',\n        'memo' => 'PHP mail SMTP server required',\n    ),\n);\n$requirementsChecker->checkYii()->check($requirements)->render();\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "yii.bat",
          "type": "blob",
          "size": 0.5029296875,
          "content": "@echo off\n\nrem -------------------------------------------------------------\nrem  Yii command line bootstrap script for Windows.\nrem\nrem  @author Qiang Xue <qiang.xue@gmail.com>\nrem  @link http://www.yiiframework.com/\nrem  @copyright Copyright (c) 2008 Yii Software LLC\nrem  @license http://www.yiiframework.com/license/\nrem -------------------------------------------------------------\n\n@setlocal\n\nset YII_PATH=%~dp0\n\nif \"%PHP_COMMAND%\" == \"\" set PHP_COMMAND=php.exe\n\n\"%PHP_COMMAND%\" \"%YII_PATH%yii\" %*\n\n@endlocal\n"
        }
      ]
    }
  ]
}