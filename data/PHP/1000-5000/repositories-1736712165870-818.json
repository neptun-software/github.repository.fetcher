{
  "metadata": {
    "timestamp": 1736712165870,
    "page": 818,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "thephpleague/geotools",
      "stars": 1378,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0908203125,
          "content": "tests            export-ignore\n.scrutinizer.yml export-ignore\n.travis.yml      export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.091796875,
          "content": ".idea\nvendor/\ncomposer.lock\ncomposer.phar\nphpunit.xml\nphp-cs-fixer.phar\n.phpunit.result.cache\n"
        },
        {
          "name": ".scrutinizer.yml",
          "type": "blob",
          "size": 0.140625,
          "content": "filter:\n  paths: [src/*]\ntools:\n  php_analyzer: true\n  php_mess_detector: true\n  php_pdepend: true\n  external_code_coverage:\n    timeout: '600'\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 9.0458984375,
          "content": "CHANGELOG\n=========\n\n1.2.0\n-----\n### Fixed\n\n - PHP 8.2 CI support by @phpfui in #184\n - Add support for Symfony 7/Laravel 11 by @dwightwatson in #188\n - OpenStreetMap typo fixed #187. by @Surfoo in #189\n - Ability to receive codes of neighboring points by @OleksandrWebLab in #185\n\n1.1.0\n-----\n### Fixed\n\n - Suppressed of deprecation warnings\n - increased precision in calculation\n - Compatility with different locales\n\n1.0.0\n-----\n### Fixed\n\n - greatCircle calculator returned NAN #159\n - Suppressed deprecation warning for JsonSerializable in PHP 8.1 #167\n - Added floor on implicit float to in conversion #166\n - Haversine distance calculation #158\n\n### Added\n\n- New coordinate format \"Degree Decimal Minutes\" available with `toDegreeDecimalMinutes()` [BC break]\n- Support PHP 8.1\n- Support Symfony 6, removed Symfony 3.4\n\n### Change\n\n- Increased precision of `initialBearing()` and `finalBearing()`\n\n0.8.3\n-----\n\n### Fixed\n\n- Fix incompatibility with PHP >= 7.4 by saving longitude and latitude as a string\n\n### Changed\n\n- Use react/event-loop: 1.0\n\n0.8.2\n-----\n\n### Fixed \n\n- Fix namespace issue when creating provider class name\n- PHPUnit deprecations\n\n### Changed\n\n- Supported PHP versions >= 7.3\n- PHPUnit 8.5\n\n0.8.1\n-----\n\n### Fixed \n\n- Symfony 5 support.\n\n0.8.0 (2018-02-22)\n------------------\n\n### Added\n\n- We use `willdurand/geocoder` 4. \n- Add a method to vertex to compute the determinant with another vertex\n- `ArrayCollection::merge`\n- `BoundingBox::merge`\n- `BoundingBoxInterface::merge`\n- `BoundingBoxInterface::getAsPolygon`\n- Added abstract class `GeometryCollection`\n- Added `GeometryInterface`\n- Added `MultiPolygon`\n\n### Changes\n\n- Renamed `BoundingBox::getPolygon` to `BoundingBox::getAsPolygon`\n- `PolygonInterface` extends `GeometryInterface`\n\n### Fixed\n\n- Decimal-Degrees parser from Decimal-Minutes \n\n### Removed\n\n- Removed `AbstractGeotools` class in favor of `CoordinateCouple`. Also added constants to `GeotoolsInterface`.\n- Our HTTP layer in favor of HTTPlug\n- Our cache layer in favor of PSR-6\n\n0.7.0 (2016-02-03)\n------------------\n\n* Updated: `Point` is now `Vertex` [BC break]\n* Updated: use `Predis` 1.0 version\n* Updated: tests against PHP7\n* Updated: documentation and badges\n* Added: allow Symfony console, property-access and serializer ~3.0\n\n0.6.0 (2015-10-11)\n------------------\n\n* Fixed: cache layer: Redis, Memcached and MongoDB\n* Added: cache possibility in CLI\n* Added: 10:10 algorithm\n* Updated: symfony console, serializer and property-access to ~2.7\n\n0.5.0 (2015-10-10)\n------------------\n\n* Updated: use Geocoder 3.2.x\n* Added: Polygon class\n* Added: Bounding box class\n* Fixed: division by zero in vincenty algorithm\n* Dropped: PHP 5.3 and stub to JsonSerializable\n* Updated: switch from async to promise\n* Updated: documentation\n* Added: code of conduct\n\n0.4.0 (2014-07-30)\n------------------\n\n* Uses: PSR-4\n* Removed: not relevant autoloads\n* Fixed: tests\n* Fixed: typos\n\n0.3.3 (2014-05-16)\n------------------\n\n* Fixed: HHVM compatible tested on `HipHop VM 3.1.0-dev+2014.05.15`\n* Added: falling tests in Distance with same coordinates (@kornrunner)\n* Fixed: division by zero in computing distance between 2 identical coordinates (@kornrunner)\n* Added: `setFromString` method to create and modify coordinate + doc - fix #31\n* Fixed: coordinate parsing issue\n\n0.3.2 (2014-03-15)\n------------------\n\n* Updated: geotools CLI moved in bin folder\n* Updated: use Geocoder 2.4.x\n* Added: great circle formula and CLI + tests\n* Added: test against php 5.6\n* Updated: repo name\n* Added: coverage and scrutinizer-ci badges\n* Updated: organisation name\n* Added: test against HHVM\n\n0.3.1 (2013-11-16)\n------------------\n\n* Updated: use Geocoder 2.3.x\n* Updated: use SensioLabs Insight\n* Updated: documentation\n* Fixed: travis, packagist and sensiolabs insight badges\n* Fixed: tests\n\n0.3.0 (2013-07-19)\n------------------\n\n* Updated: loep (The League of Extraordinary Packages) is now owner\n* Updated: use Geocoder 2.0.0\n\n0.2.4 (2013-05-03)\n------------------\n\n* Updated: made it working with Geocoder 1.5.0\n* Updated: integration with frameworks in features list\n* Added: integration with Silex\n* Added: integration with frameworks\n* Updated: Contribution doc\n* Added: memcached and mongo extensions to travis-ci\n* Added: mongodb service to travis-ci\n* Added: expire to Memcached cache - fix #26\n* Added: expire to Redis cache + test - fix #26\n\n0.2.3 (2013-03-29)\n------------------\n\n* Updated: MongoDB test coverage\n* Added: Memcached cache test - fix #22\n* Refactored: Redis and MongoDB caches tests\n* Added: MongoDB cache test - fix #22\n* Added: Redis cache test - fix #22\n* Added: Memcached cache - fix #24\n\n0.2.2 (2013-03-26)\n------------------\n\n* Added: Redis cache - fix #23\n* Updated: MongoDB cache search by key\n* Fixed: MangoDB cache\n* Updated: doc with try .. catch bloc\n* Fixed: Batch test for php 5.3\n* Added: Cache interface + mongoDB - fix #2\n* Refactored: Point test\n\n0.2.1 (2013-03-16)\n------------------\n\n* Added: arcgis_online provider\n* Merge branch 'BatchImproved'\n* Fixed: batched result object embed provider's name, query and exception string - fix #6\n* Added: Geocoder dev-master as require-dev\n* Fixed: CLI tests\n\n0.2.0 (2013-03-12)\n------------------\n\n* Fixed: empty ellipsoid name throws an exception now\n* Added: Ellipsoid support to Point, Convert and Distance CLI - fix #7\n* Added: Ellipsoid support to Point CLI\n* Added: Ellipsoid support to Distance CLI\n* Added: Ellipsoid support to Convert CLI\n* Added: TomTom provier to CLI - fix #14\n* Changed: mile parameter to mi in Distance to be more consistent [BC break]\n\n0.1.12 (2013-03-08)\n-------------------\n\n* Added: command exemples and refactoring\n* Added: help to geocoding and reverse geocoding CLI\n* Fixed: homepage in composer.json\n* Updated: doc and composer.json\n* Fixed: php warning in CLI on wrong providers constuction arguments\n* Updated: list of contributors\n* Updated: geohash doc\n\n0.1.11 (2013-03-05)\n-------------------\n\n* Added: international feet unit to CLI + test - fix #10\n* Updated: relative links to absolute ones\n* Added: ip_geo_base and baidu as CLI providers - fix #8\n* Fixed: feet unit + test\n* Added International Feet as a unit\n* Added a bunch of tests.\n\n0.1.10 (2013-02-27)\n-------------------\n\n* Added: support of different ellipsoid + doc + tests - fix #5\n* Refactored: Doc + CLI commands + tests\n* Improved: geocoder:geocode and geocoder:reverse CLI + tests\n* Added: lowerize() method using mbstring extension\n\n0.1.9 (2013-02-24)\n------------------\n\n* Added: dumper option to geocoder:geocode CLI + test\n* Fixed: composer.json\n* Added: cURL requirement for tests and CLI\n* Removed: old files\n* Fixed: finalCardinal() into CLI + test\n\n0.1.8 (2013-02-21)\n------------------\n\n* Refactored: getAdapter and getProvider in CLI\n* Added: CLI for Geocoder class + tests\n* Added: CLI for Geocoder class + tests\n* Updated: composer installation info\n* Added: logo to CLI\n* Fixed: travis-ci config\n* Added: finalBearing() to CLI + test\n* Added: finalCardinal() method + test\n* Updated: cardinal() method to initialCardinal() [BC break]\n* Added: finalBearing() + test\n* Renamed: bearing() method to initialBearing() [BC break]\n\n0.1.7 (2013-02-20)\n------------------\n\n* Added: CLI for Convert class + tests\n* Added: CLI for Geohash class + tests\n* Updated: doc with internal links\n* Fixed: CLI include paths\n\n0.1.6 (2013-02-20)\n------------------\n\n* Added: CLI for Distance and Point classes + tests\n* Updated: phpunit bootstrap\n* Updated: composer installation info\n* Updated: Convert UTM zone exceptions are covered\n* Updated: Point and Distance chainable logic and refactoring [BC break]\n* Added: UTM conversion + tests + doc\n* Updated: geodetic datum into doc\n\n0.1.5 (2013-02-13)\n------------------\n\n* Added: Convert class, tests and doc\n* Updated: doc about Coordinate class\n* Updated: method visibility in Coordinate class\n* Added: Coordinate class support different DMS coordinates\n* Fixed: thrown message on invalid coordinate\n* Fixed: typo calculate to compute\n\n0.1.4 (2013-02-10)\n------------------\n\n* Updated: Batch class test\n* Added: test to AbstractGeotools class\n* Refactored: Batch tests\n* Updated: doc with a better batch exemple\n* Added: batch a set of values/coordinates againt a set of providers + tests\n* Fixed: changelog list\n\n0.1.3 (2013-02-09)\n------------------\n\n* Added: geohash ref to the doc\n* Refactored: tests\n* Added: Geohash class, tests and doc\n* Added: normalize methods to Coordinate class\n* Updated: Coordinate support string in its constructor\n* Updated: Testcase's expects methods\n* Updated: test to Batch class\n* Refactored: Batch test class\n* Updated: TestCase stub clases\n\n0.1.2 (2013-02-08)\n------------------\n\n* Fixed: test to be compatible with PHP 5.3.x\n* Added: test to Distance class\n* Added: test to Batch class\n* Added: test to Point class\n* Updated: test to Getools class with a CoordinateInterface stub\n* Updated: Contributing doc\n* Updated: test to Geotools class\n* Added: test to Coordinate class\n* Added: test to Geotools class\n\n0.1.1 (2013-02-06)\n------------------\n\n* Fixed: the minimum-stability of React/Async\n\n0.1.0 (2013-02-06)\n------------------\n\n* Added: Contributing doc\n* Added: Travis-ci to the doc\n* Added: stillmaintained.com to the doc\n* Initial import\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.810546875,
          "content": "CONTRIBUTING\n============\n\nContributions are **welcome** and be fully **credited** <3\n\n**Geotools** will use the [Symfony2 Coding Standard](http://symfony.com/doc/current/contributing/code/standards.html).\nThe easiest way to apply these conventions is to install [PHP_CodeSniffer](http://pear.php.net/package/PHP_CodeSniffer)\nand the [Opensky Symfony2 Coding Standard](https://github.com/opensky/Symfony2-coding-standard).\n\nYou may be interested in [PHP Coding Standards Fixer](https://github.com/fabpot/PHP-CS-Fixer).\n\nInstallation\n------------\n\n``` bash\n$ pear install PHP_CodeSniffer\n$ cd `pear config-get php_dir`/PHP/CodeSniffer/Standards\n$ git clone git://github.com/opensky/Symfony2-coding-standard.git Symfony2\n$ phpcs --config-set default_standard Symfony2\n```\n\nUsage\n-----\n\n``` bash\n$ phpcs src/\n```\n\n**Happy coding** !\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0498046875,
          "content": "Copyright (c) 2013 Antoine Corcy <contact@sbin.dk>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 27.5908203125,
          "content": "Geotools\n========\n\n**Geotools** is a PHP geo-related library, built atop [Geocoder](https://github.com/willdurand/Geocoder) and\n[React](https://github.com/reactphp/react) libraries.\n\n[![Latest Version](https://poser.pugx.org/league/geotools/v/stable)](https://github.com/thephpleague/geotools/releases)\n[![Total Downloads](https://poser.pugx.org/league/geotools/downloads)](https://packagist.org/packages/league/geotools)\n[![Quality Score](https://img.shields.io/scrutinizer/g/thephpleague/geotools.svg?style=flat-square)](https://scrutinizer-ci.com/g/thephpleague/geotools/?branch=master)\n\nFeatures\n--------\n\n* **Batch** geocode & reverse geocoding request(s) in **series** / in **parallel** against one or a\n**set of providers**. [»](#batch)\n* **Cache** geocode & reverse geocoding result(s) with **PSR-6** to improve performances. [»](#batch)\n* Compute geocode & reverse geocoding in the **command-line interface** (CLI) + dumpers and formatters. [»](#cli)\n* Accept **almost** all kind of WGS84\n[geographic coordinates](http://en.wikipedia.org/wiki/Geographic_coordinate_conversion) as coordinates.\n[»](#coordinate--ellipsoid)\n* Support **23 different ellipsoids** and it's easy to provide a new one if needed. [»](#coordinate--ellipsoid)\n* **Convert** and **format** decimal degrees coordinates to decimal minutes or degrees minutes seconds coordinates.\n[»](#convert)\n* **Convert** decimal degrees coordinates in the\n[Universal Transverse Mercator](http://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system)\n(UTM) projection. [»](#convert)\n* Compute the distance in **meter** (by default), **km**, **mi** or **ft** between two coordinates using **flat**,\n**great circle**, **haversine** or **vincenty** algorithms. [»](#distance)\n* Compute the initial and final **bearing** from the origin coordinate to the destination coordinate in degrees.\n[»](#point)\n* Compute the initial and final **cardinal point** (direction) from the origin coordinate to the destination\ncoordinate, read more in [wikipedia](http://en.wikipedia.org/wiki/Cardinal_direction). [»](#point)\n* Compute the **half-way point** (coordinate) between the origin and the destination coordinates. [»](#point)\n* Compute the **destination point** (coordinate) with given bearing in degrees and a distance in meters. [»](#point)\n* Encode a coordinate to a **geo hash** string and decode it to a coordinate, read more in\n[wikipedia](http://en.wikipedia.org/wiki/Geohash) and on [geohash.org](http://geohash.org/). [»](#geohash)\n* Encode a coordinate via the 10:10 algorithm. [»](#1010)\n* **Polygon** class provides methods to check either a poing (coordinate) is in, or on the polygon's boundaries.\n[»](#polygon)\n* A **command-line interface** (CLI) for **Distance**, **Point**, **Geohash** and **Convert** classes. [»](#cli)\n* Integration with Frameworks: **Laravel 4**, **Silex** ... [»](#integration-with-frameworks)\n* ... more to come ...\n\n\nInstallation\n------------\n\n**Geotools** can be found on [Packagist](https://packagist.org/packages/league/geotools).\nThe recommended way to install **Geotools** is through [composer](http://getcomposer.org).\n\nRun the following on the command line:\n\n```\ncomposer require league/geotools\n```\n\n**Important:** you should use the `0.4` version if you use Geocoder `2.x` or/and PHP `5.3`.\n\nAnd install dependencies:\n\n```\ncomposer install\n```\n\nNow you can add the autoloader, and you will have access to the library:\n\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n```\n\n\nUsage & API\n-----------\n\n## Coordinate & Ellipsoid\n\nThe default geodetic datum is [WGS84](http://en.wikipedia.org/wiki/World_Geodetic_System) and coordinates are in\ndecimal degrees.\n\nHere are the available ellipsoids: `AIRY`, `AUSTRALIAN_NATIONAL`, `BESSEL_1841`, `BESSEL_1841_NAMBIA`,\n`CLARKE_1866`, `CLARKE_1880`, `EVEREST`, `FISCHER_1960_MERCURY`, `FISCHER_1968`, `GRS_1967`, `GRS_1980`,\n`HELMERT_1906`, `HOUGH`, `INTERNATIONAL`, `KRASSOVSKY`, `MODIFIED_AIRY`, `MODIFIED_EVEREST`,\n`MODIFIED_FISCHER_1960`, `SOUTH_AMERICAN_1969`, `WGS60`, `WGS66`, `WGS72`, and `WGS84`.\n\nIf you need to use an other ellipsoid, just create an array like this:\n``` php\n<?php\n\n$myEllipsoid = \\League\\Geotools\\Coordinate\\Ellipsoid::createFromArray([\n    'name' => 'My Ellipsoid', // The name of the Ellipsoid\n    'a'    => 123.0, // The semi-major axis (equatorial radius) in meters\n    'invF' => 456.0 // The inverse flattening\n]);\n```\n\n**Geotools** is built atop [Geocoder](https://github.com/willdurand/Geocoder). It means it's possible to use the\n`\\Geocoder\\Model\\Address` directly but it's also possible to use a *string* or a simple *array* with its\nlatitude and longitude.\n\nIt supports [valid and acceptable geographic coordinates](http://en.wikipedia.org/wiki/Geographic_coordinate_conversion)\nlike:\n* 40:26:46N,079:56:55W\n* 40:26:46.302N 079:56:55.903W\n* 40°26′47″N 079°58′36″W\n* 40d 26′ 47″ N 079d 58′ 36″ W\n* 40.446195N 79.948862W\n* 40.446195, -79.948862\n* 40° 26.7717, -79° 56.93172\n\nLatitudes below -90.0 or above 90.0 degrees are *capped* through `\\League\\Geotools\\Coordinate\\Coordinate::normalizeLatitude()`.\nLongitudes below -180.0 or above 180.0 degrees are *wrapped* through `\\League\\Geotools\\Coordinate\\Coordinate::normalizeLongitude()`.\n\n```php\n<?php\n\nuse League\\Geotools\\Coordinate\\Coordinate;\nuse League\\Geotools\\Coordinate\\Ellipsoid;\n\n// from an \\Geocoder\\Model\\Address instance within Airy ellipsoid\n$coordinate = new Coordinate($geocoderResult, Ellipsoid::createFromName(Ellipsoid::AIRY));\n// or in an array of latitude/longitude coordinate within GRS 1980 ellipsoid\n$coordinate = new Coordinate([48.8234055, 2.3072664], Ellipsoid::createFromName(Ellipsoid::GRS_1980));\n// or in latitude/longitude coordinate within WGS84 ellipsoid\n$coordinate = new Coordinate('48.8234055, 2.3072664');\n// or in degrees minutes seconds coordinate within WGS84 ellipsoid\n$coordinate = new Coordinate('48°49′24″N, 2°18′26″E');\n// or in decimal minutes coordinate within WGS84 ellipsoid\n$coordinate = new Coordinate('48 49.4N, 2 18.43333E');\n// the result will be:\nprintf(\"Latitude: %F\\n\", $coordinate->getLatitude()); // 48.8234055\nprintf(\"Longitude: %F\\n\", $coordinate->getLongitude()); // 2.3072664\nprintf(\"Ellipsoid name: %s\\n\", $coordinate->getEllipsoid()->getName()); // WGS 84\nprintf(\"Equatorial radius: %F\\n\", $coordinate->getEllipsoid()->getA()); // 6378136.0\nprintf(\"Polar distance: %F\\n\", $coordinate->getEllipsoid()->getB()); // 6356751.317598\nprintf(\"Inverse flattening: %F\\n\", $coordinate->getEllipsoid()->getInvF()); // 298.257224\nprintf(\"Mean radius: %F\\n\", $coordinate->getEllipsoid()->getArithmeticMeanRadius()); // 6371007.772533\n// it's also possible to modify the coordinate without creating an other coodinate\n$coordinate->setFromString('40°26′47″N 079°58′36″W');\nprintf(\"Latitude: %F\\n\", $coordinate->getLatitude()); // 40.446388888889\nprintf(\"Longitude: %F\\n\", $coordinate->getLongitude()); // -79.976666666667\n```\n\n## Convert\n\nIt provides methods (and aliases) to convert *decimal degrees* WGS84 coordinates to *degrees minutes seconds*\nor *decimal minutes* WGS84 coordinates. You can format the output string easily.\n\nYou can also convert them in the Universal Transverse Mercator (UTM) projection (Southwest coast of Norway and the\nregion of Svalbard are covered).\n\n```php\n<?php\n\n$geotools   = new \\League\\Geotools\\Geotools();\n$coordinate = new \\League\\Geotools\\Coordinate\\Coordinate('40.446195, -79.948862');\n$converted  = $geotools->convert($coordinate);\n// convert to decimal degrees without and with format string\nprintf(\"%s\\n\", $converted->toDecimalMinutes()); // 40 26.7717N, -79 56.93172W\n// convert to degrees minutes seconds without and with format string\nprintf(\"%s\\n\", $converted->toDegreesMinutesSeconds('<p>%P%D:%M:%S, %p%d:%m:%s</p>')); // <p>40:26:46, -79:56:56</p>\n// convert in the UTM projection (standard format)\nprintf(\"%s\\n\", $converted->toUniversalTransverseMercator()); // 17T 589138 4477813\n```\n\nHere is the mapping:\n\n**Decimal minutes** | Latitude | Longitude\n--- | --- | ---\nPositive or negative sign | `%P` | `%p`\nDirection | `%L` | `%l`\nDegrees | `%D` | `%d`\nDecimal minutes | `%N` | `%n`\n\n**Degrees minutes seconds** | Latitude | Longitude\n--- | --- | ---\nPositive or negative sign | `%P` | `%p`\nDirection | `%L` | `%l`\nDegrees | `%D` | `%d`\nMinutes | `%M` | `%m`\nSeconds | `%S` | `%s`\n\n## Batch\n\nIt provides a very handy way to batch geocode and reverse geocoding requests in *serie* or in *parallel* against\na set of providers.\nThanks to [Geocoder](https://github.com/willdurand/Geocoder) and [React](https://github.com/reactphp/react) libraries.\n\nIt's possible to batch *one request* (a string) or a *set of request* (an array) against *one provider* or\n*set of providers*.\n\nYou can use a provided **cache engine** or use your own by setting a cache object which should implement\n`League\\Geotools\\Cache\\CacheInterface` and extend `League\\Geotools\\Cache\\AbstractCache` if needed.\n\nAt the moment Geotools supports any PSR-6 cache.\n\nNB: Before you implement caching in your app please be sure that doing so does not violate the Terms of Service\nfor your(s) geocoding provider(s).\n\n```php\n<?php\n\n$geocoder = new \\Geocoder\\ProviderAggregator(); // or \\Geocoder\\TimedGeocoder\n$httpClient  = HttpClientDiscovery::find();\n\n$geocoder->registerProviders([\n    new \\Geocoder\\Provider\\GoogleMaps\\GoogleMaps($httpClient),\n    new \\Geocoder\\Provider\\OpenStreetMap\\OpenStreetMap($httpClient),\n    new \\Geocoder\\Provider\\BingMaps\\BingMaps($httpClient, '<FAKE_API_KEY>'), // throws InvalidCredentialsException\n    new \\Geocoder\\Provider\\Yandex\\Yandex($httpClient),\n    new \\Geocoder\\Provider\\FreeGeoIp\\FreeGeoIp($httpClient),\n    new \\Geocoder\\Provider\\Geoip\\Geoip(),\n]);\n\ntry {\n    $geotools = new \\League\\Geotools\\Geotools();\n    $cache    = new \\Cache\\Adapter\\PHPArray\\ArrayCachePool();\n\n    $results  = $geotools->batch($geocoder)->setCache($cache)->geocode([\n        'Paris, France',\n        'Copenhagen, Denmark',\n        '74.200.247.59',\n        '::ffff:66.147.244.214'\n    ])->parallel();\n} catch (\\Exception $e) {\n    die($e->getMessage());\n}\n\n$dumper = new \\Geocoder\\Dumper\\WktDumper();\nforeach ($results as $result) {\n    // if a provider throws an exception (UnsupportedException, InvalidCredentialsException ...)\n    // an custom /Geocoder/Result/Geocoded instance is returned which embedded the name of the provider,\n    // the query string and the exception string. It's possible to use dumpers\n    // and/or formatters from the Geocoder library.\n    printf(\"%s|%s|%s\\n\",\n        $result->getProviderName(),\n        $result->getQuery(),\n        '' == $result->getExceptionMessage() ? $dumper->dump($result) : $result->getExceptionMessage()\n    );\n}\n```\n\nYou should get 24 results (4 values to geocode against 6 providers) something like:\n\n```\ngoogle_maps|Paris, France|POINT(2.352222 48.856614)\ngoogle_maps|Copenhagen, Denmark|POINT(12.568337 55.676097)\ngoogle_maps|74.200.247.59|The GoogleMapsProvider does not support IP addresses.\ngoogle_maps|::ffff:66.147.244.214|The GoogleMapsProvider does not support IP addresses.\nopenstreetmap|Paris, France|POINT(2.352133 48.856506)\nopenstreetmap|Copenhagen, Denmark|POINT(12.570072 55.686724)\nopenstreetmap|74.200.247.59|Could not execute query http://nominatim.openstreetmap.org/search?q=74.200.247.59&format=xml&addressdetails=1&limit=1\nopenstreetmap|::ffff:66.147.244.214|The OpenStreetMapProvider does not support IPv6 addresses.\nbing_maps|Paris, France|Could not execute query http://dev.virtualearth.net/REST/v1/Locations/?q=Paris%2C+France&key=<FAKE_API_KEY>\nbing_maps|Copenhagen, Denmark|Could not execute query http://dev.virtualearth.net/REST/v1/Locations/?q=Copenhagen%2C+Denmark&key=<FAKE_API_KEY>\nbing_maps|74.200.247.59|The BingMapsProvider does not support IP addresses.\nbing_maps|::ffff:66.147.244.214|The BingMapsProvider does not support IP addresses.\nyandex|Paris, France|POINT(2.341198 48.856929)\nyandex|Copenhagen, Denmark|POINT(12.567602 55.675682)\nyandex|74.200.247.59|The YandexProvider does not support IP addresses.\nyandex|::ffff:66.147.244.214|The YandexProvider does not support IP addresses.\nfree_geo_ip|Paris, France|The FreeGeoIpProvider does not support Street addresses.\nfree_geo_ip|Copenhagen, Denmark|The FreeGeoIpProvider does not support Street addresses.\nfree_geo_ip|74.200.247.59|POINT(-122.415600 37.748400)\nfree_geo_ip|::ffff:66.147.244.214|POINT(-111.613300 40.218100)\ngeoip|Paris, France|The GeoipProvider does not support Street addresses.\ngeoip|Copenhagen, Denmark|The GeoipProvider does not support Street addresses.\ngeoip|74.200.247.59|POINT(-122.415604 37.748402)\ngeoip|::ffff:66.147.244.214|The GeoipProvider does not support IPv6 addresses.\n```\n\nBatch reverse geocoding is something like:\n\n```php\n<?php\n\n// ... $geocoder like the previous example ...\n// If you want to reverse one coordinate\ntry {\n    $results = $geotools->batch($geocoder)->reverse(\n        new \\League\\Geotools\\Coordinate\\Coordinate([2.307266, 48.823405])\n    )->parallel();\n} catch (\\Exception $e) {\n    die($e->getMessage());\n}\n// Or if you want to reverse geocoding 3 coordinates\n$coordinates = [\n    new \\League\\Geotools\\Coordinate\\Coordinate([2.307266, 48.823405]),\n    new \\League\\Geotools\\Coordinate\\Coordinate([12.568337, 55.676097]),\n    new \\League\\Geotools\\Coordinate\\Coordinate('-74.005973 40.714353')),\n];\n$results = $geotools->batch($geocoder)->reverse($coordinates)->parallel();\n// ...\n```\n\nIf you want to batch it in serie, replace the method `parallel()` by `serie()`.\n\nTo optimize batch requests you need to register providers according to their **capabilities** and what you're\n**looking for** (geocode street addresses, geocode IPv4, geocode IPv6 or reverse geocoding),\nplease read more at the [Geocoder library doc](https://github.com/willdurand/Geocoder#freegeoipprovider).\n\n## Distance\n\nIt provides methods to compute the distance in *meter* (by default), *km*, *mi* or *ft* between two coordinates\nusing *flat* (most performant), *great circle*, *haversine* or *vincenty* (most accurate) algorithms.\n\nThose coordinates should be in the same ellipsoid.\n\n```php\n<?php\n\n$geotools = new \\League\\Geotools\\Geotools();\n$coordA   = new \\League\\Geotools\\Coordinate\\Coordinate([48.8234055, 2.3072664]);\n$coordB   = new \\League\\Geotools\\Coordinate\\Coordinate([43.296482, 5.36978]);\n$distance = $geotools->distance()->setFrom($coordA)->setTo($coordB);\n\nprintf(\"%s\\n\",$distance->flat()); // 659166.50038742 (meters)\nprintf(\"%s\\n\",$distance->greatCircle()); // 659021.90812846\nprintf(\"%s\\n\",$distance->in('km')->haversine()); // 659.02190812846\nprintf(\"%s\\n\",$distance->in('mi')->vincenty()); // 409.05330679648\nprintf(\"%s\\n\",$distance->in('ft')->flat()); // 2162619.7519272\n```\n\n## Point\n\nIt provides methods to compute the initial and final *bearing* in degrees, the initial and final *cardinal direction*,\nthe *middle point* and the *destination point*. The middle and the destination points returns a\n`\\League\\Geotools\\Coordinate\\Coordinate` object with the same ellipsoid.\n\n```php\n<?php\n\n$geotools = new \\League\\Geotools\\Geotools();\n$coordA   = new \\League\\Geotools\\Coordinate\\Coordinate([48.8234055, 2.3072664]);\n$coordB   = new \\League\\Geotools\\Coordinate\\Coordinate([43.296482, 5.36978]);\n$vertex    =  $geotools->vertex()->setFrom($coordA)->setTo($coordB);\n\nprintf(\"%d\\n\", $vertex->initialBearing()); // 157 (degrees)\nprintf(\"%s\\n\", $vertex->initialCardinal()); // SSE (SouthSouthEast)\nprintf(\"%d\\n\", $vertex->finalBearing()); // 160 (degrees)\nprintf(\"%s\\n\", $vertex->finalCardinal()); // SSE (SouthSouthEast)\n\n$middlePoint = $vertex->middle(); // \\League\\Geotools\\Coordinate\\Coordinate\nprintf(\"%s\\n\", $middlePoint->getLatitude()); // 46.070143125815\nprintf(\"%s\\n\", $middlePoint->getLongitude()); // 3.9152401085931\n\n$destinationPoint = $geotools->vertex()->setFrom($coordA)->destination(180, 200000); // \\League\\Geotools\\Coordinate\\Coordinate\nprintf(\"%s\\n\", $destinationPoint->getLatitude()); // 47.026774650075\nprintf(\"%s\\n\", $destinationPoint->getLongitude()); // 2.3072664\n```\n\n## Geohash\n\nIt provides methods to get the *geo hash* and its *bounding box's coordinates* (SouthWest & NorthEast)\nof a coordinate and the *coordinate* and its *bounding box's coordinates* (SouthWest & NorthEast) of a geo hash.\n\n```php\n<?php\n\n$geotools       = new \\League\\Geotools\\Geotools();\n$coordToGeohash = new \\League\\Geotools\\Coordinate\\Coordinate('43.296482, 5.36978');\n\n// encoding\n$encoded = $geotools->geohash()->encode($coordToGeohash, 4); // 12 is the default length / precision\n// encoded\nprintf(\"%s\\n\", $encoded->getGeohash()); // spey\n// encoded bounding box\n$boundingBox = $encoded->getBoundingBox(); // array of \\League\\Geotools\\Coordinate\\CoordinateInterface\n$southWest   = $boundingBox[0];\n$northEast   = $boundingBox[1];\nprintf(\"http://www.openstreetmap.org/?minlon=%s&minlat=%s&maxlon=%s&maxlat=%s&box=yes\\n\",\n    $southWest->getLongitude(), $southWest->getLatitude(),\n    $northEast->getLongitude(), $northEast->getLatitude()\n); // http://www.openstreetmap.org/?minlon=5.2734375&minlat=43.2421875&maxlon=5.625&maxlat=43.41796875&box=yes\n\n// decoding\n$decoded = $geotools->geohash()->decode('spey61y');\n// decoded coordinate\nprintf(\"%s\\n\", $decoded->getCoordinate()->getLatitude()); // 43.296432495117\nprintf(\"%s\\n\", $decoded->getCoordinate()->getLongitude()); // 5.3702545166016\n// decoded bounding box\n$boundingBox = $decoded->getBoundingBox(); //array of \\League\\Geotools\\Coordinate\\CoordinateInterface\n$southWest   = $boundingBox[0];\n$northEast   = $boundingBox[1];\nprintf(\"http://www.openstreetmap.org/?minlon=%s&minlat=%s&maxlon=%s&maxlat=%s&box=yes\\n\",\n    $southWest->getLongitude(), $southWest->getLatitude(),\n    $northEast->getLongitude(), $northEast->getLatitude()\n); // http://www.openstreetmap.org/?minlon=5.3695678710938&minlat=43.295745849609&maxlon=5.3709411621094&maxlat=43.297119140625&box=yes\n```\n\nYou can also get information about neighbor points ([image](art/geohash_neighbor_points.png)).\n\n```php\n<?php\n\n$geotools = new \\League\\Geotools\\Geotools();\n\n// decoding\n$decoded = $geotools->geohash()->decode('spey61y');\n// get neighbor geohash\nprintf(\"%s\\n\", $decoded->getNeighbor(\\League\\Geotools\\Geohash\\Geohash::DIRECTION_NORTH)); // spey64n\nprintf(\"%s\\n\", $decoded->getNeighbor(\\League\\Geotools\\Geohash\\Geohash::DIRECTION_SOUTH_EAST)); // spey61x\n// get all neighbor geohashes\nprint_r($decoded->getNeighbors(true));\n/**\n * Array\n * (\n *     [north] => spey64n\n *     [south] => spey61w\n *     [west] => spey61v\n *     [east] => spey61z\n *     [north_west] => spey64j\n *     [north_east] => spey64p\n *     [south_west] => spey61t\n *     [south_east] => spey61x\n * )\n */\n```\n\n## 10:10\n\nRepresent a location with 10m accuracy using a 10 character code that includes features to prevent errors in\nentering the code. Read more about the algorithm [here](http://blog.jgc.org/2006/07/simple-code-for-entering-latitude-and.html).\n\n```php\n<?php\n\n$tenten = new \\League\\Geotools\\Tests\\Geohash\\TenTen;\n$tenten->encode(new Coordinate([51.09559, 1.12207])); // MEQ N6G 7NY5\n```\n\n## Vertex\n\nRepresents a segment with a direction.\nYou can find if two vertexes are on the same line.\n\n```php\n<?php\n\t$vertexA->setFrom(48.8234055);\n\t$vertexA->setTo(2.3072664);\n\n\t$vertexB->setFrom(48.8234055);\n\t$vertexB->setTo(2.3072664);\n\t$vertexA->isOnSameLine($vertexB);\n```\n\n## Polygon\n\nIt helps you to know if a point (coordinate) is in a Polygon or on the Polygon's boundaries and if this in on\na Polygon's vertex.\n\nFirst you need to create the polygon, you can provide:\n- an array of arrays\n- an array of `Coordinate`\n- a `CoordinateCollection`\n\n```php\n<?php\n\n$polygon = new \\League\\Geotools\\Polygon\\Polygon([\n    [48.9675969, 1.7440796],\n    [48.4711003, 2.5268555],\n    [48.9279131, 3.1448364],\n    [49.3895245, 2.6119995],\n]);\n\n$polygon->setPrecision(5); // set the comparision precision\n$polygon->pointInPolygon(new \\League\\Geotools\\Coordinate\\Coordinate([49.1785607, 2.4444580])); // true\n$polygon->pointInPolygon(new \\League\\Geotools\\Coordinate\\Coordinate([49.1785607, 5])); // false\n$polygon->pointOnBoundary(new \\League\\Geotools\\Coordinate\\Coordinate([48.7193486, 2.13546755])); // true\n$polygon->pointOnBoundary(new \\League\\Geotools\\Coordinate\\Coordinate([47.1587188, 2.87841795])); // false\n$polygon->pointOnVertex(new \\League\\Geotools\\Coordinate\\Coordinate([48.4711003, 2.5268555])); // true\n$polygon->pointOnVertex(new \\League\\Geotools\\Coordinate\\Coordinate([49.1785607, 2.4444580])); // false\n$polygon->getBoundingBox(); // return the BoundingBox object\n```\n\n## CLI\n\nIt provides command lines to compute methods provided by **Distance**, **Point**, **Geohash** and **Convert** classes.\nThanks to the [Symfony Console Component](https://github.com/symfony/Console).\n\n```bash\n$ php geotools list // list of available commands\n$ php geotools help distance:flat // get the help\n$ php geotools distance:flat \"40° 26.7717, -79° 56.93172\" \"30°16′57″N 029°48′32″W\" // 4690203.1048522\n$ php geotools distance:haversine \"35,45\" \"45,35\" --ft  // 4593030.9787593\n$ php geotools distance:vincenty \"35,45\" \"45,35\" --km  // 1398.4080717661\n$ php geotools d:v \"35,45\" \"45,35\" --km --ellipsoid=WGS60 // 1398.4145201642\n$ php geotools point:initial-cardinal \"40:26:46.302N 079:56:55.903W\" \"43.296482, 5.36978\" // NE (NordEast)\n$ php geotools point:final-cardinal \"40:26:46.302N 079:56:55.903W\" \"43.296482, 5.36978\" // ESE (EastSouthEast)\n$ php geotools point:destination \"40° 26.7717, -79° 56.93172\" 25 10000 // 40.527599285543, -79.898914904538\n$ php geotools p:d \"40° 26.7717, -79° 56.93172\" 25 10000 --ellipsoid=GRS_1980 // 40.527599272782, -79.898914912379\n$ php geotools geohash:encode \"40° 26.7717, -79° 56.93172\" --length=3 // dpp\n$ php geotools convert:dm \"40.446195, -79.948862\" --format=\"%P%D°%N %p%d°%n\" // 40°26.7717 -79°56.93172\n$ php geotools convert:dms \"40.446195, -79.948862\" --format=\"%P%D:%M:%S, %p%d:%m:%s\" // 40:26:46, -79:56:56\n$ php geotools convert:utm \"60.3912628, 5.3220544\" // 32V 297351 6700644\n$ php geotools c:u \"60.3912628, 5.3220544\" --ellipsoid=AIRY // 32V 297371 6700131\n...\n```\n\nCompute street addresses, IPv4s or IPv6s geocoding and reverse geocoding right in your console.\n\nIt's possible to define and precise your request through these options:\n* `--provider`: `bing_maps`, `yahoo`, `maxmind`... `google_maps` is the default one. See the full list\n[here](https://github.com/willdurand/Geocoder#providers).\n* `--raw`: the result output in RAW format, shows Adapter, Provider and Arguments if any.\n* `--json`: the result output in JSON string format.\n* `--args`: this option accepts multiple values (e.g. --args=\"API_KEY\" --args=\"LOCALE\") if your provider needs or\ncan have arguments.\n* `--dumper`: this option is available for geocoding, `gpx`, `geojson`, `kml`, `wkb` and `wkt` by default.\nRead more [here](https://github.com/willdurand/Geocoder#dumpers).\n* `--format`: this option is available for reverse geocoding, see the mapping\n[here](https://github.com/willdurand/Geocoder#formatter).\n\n```bash\n$ php geotools help geocoder:geocode // get the help\n$ php geotools geocoder:geocode \"Copenhagen, Denmark\" // 55.6760968, 12.5683371\n$ php geotools geocoder:geocode \"74.200.247.59\" --provider=\"free_geo_ip\" // 37.7484, -122.4156\n$ php geotools geocoder:geocode Paris --args=\"fr_FR\" --args=\"France\" --args=\"true\" // 48.856614, 2.3522219\n$ php geotools geocoder:geocode Paris --dumper=wkt // POINT(2.352222 48.856614)\n...\n$ php geotools geocoder:reverse \"48.8631507, 2.388911\" // Avenue Gambetta 10, 75020 Paris\n$ php geotools geocoder:reverse \"48.8631507, 2.388911\" --format=\"%L, %A1, %C\" // Paris, Île-De-France, France\n$ php geotools geocoder:reverse \"48.8631507, 2.388911\" --format=\"%L, %A1, %C\" --provider=\"openstreetmap\"\n// Paris, Île-De-France, France Métropolitaine\n...\n$ php geotools geocoder:geocode \"Tagensvej 47, Copenhagen\" --raw --args=da_DK --args=Denmark\n```\n\nThe last command will show an output like this:\n\n```\nHttpClient:    \\Http\\Client\\Curl\\Client\nProvider:      \\Geocoder\\Provider\\GoogleMaps\nCache:         \\League\\Geotools\\Cache\\Redis\nArguments:     da_DK,Denmark\n---\nLatitude:      55.699953\nLongitude:     12.552736\nBounds\n - South: 55.699953\n - West:  12.552736\n - North: 55.699953\n - East:  12.552736\nStreet Number: 47\nStreet Name:   Tagensvej\nZipcode:       2200\nCity:          Copenhagen\nCity District: København N\nCounty:        København\nCounty Code:   KØBENHAVN\nRegion:        Capital Region Of Denmark\nRegion Code:   CAPITAL REGION OF DENMARK\nCountry:       Denmark\nCountry Code:  DK\nTimezone:\n```\n\nIntegration with Frameworks\n---------------------------\n\n* [Laravel 4 & 5](https://github.com/toin0u/Geotools-laravel)\n* [Silex](https://github.com/toin0u/Geotools-silex)\n* ...\n\n\nUnit Tests\n----------\n\nTo run unit tests, you'll need the `cURL` extension and a set of dependencies, you can install them using Composer:\n\n```bash\n$ php composer.phar install --dev\n```\n\nOnce installed, just launch the following command:\n\n```bash\n$ phpunit --coverage-text\n```\n\n\nCredits\n-------\n\n* [Antoine Corcy](https://twitter.com/toin0u)\n* [Pascal Borreli](https://twitter.com/pborreli)\n* [Phil Sturgeon](https://twitter.com/philsturgeon)\n* [Gabriel Bull](mailto:me@gabrielbull.com)\n* [All contributors](https://github.com/toin0u/Geotools/contributors)\n\n\nAcknowledgments\n---------------\n* [Geocoder](https://github.com/willdurand/Geocoder) -\n[MIT](https://raw.github.com/willdurand/Geocoder/master/LICENSE)\n* [ReactPHP](https://github.com/reactphp/) -\n[MIT](https://raw.github.com/reactphp/react/master/LICENSE)\n* [Symfony Console Component](https://github.com/symfony/Console) -\n[MIT](https://raw.github.com/symfony/Console/master/LICENSE)\n* [Symfony Serializer Component](https://github.com/symfony/Serializer) -\n[MIT](https://raw.github.com/symfony/Serializer/master/LICENSE)\n* [PHP client library for Redis](https://github.com/nrk/predis) -\n[MIT](https://raw.github.com/nrk/predis/master/LICENSE)\n* [Geokit](https://github.com/jsor/Geokit),\n[Geotools-for-CodeIgniter](https://github.com/weejames/Geotools-for-CodeIgniter),\n[geotools-php](https://github.com/jillesvangurp/geotools-php) ...\n\n\nChangelog\n---------\n\n[See the changelog file](https://github.com/thephpleague/geotools/blob/master/CHANGELOG.md)\n\nContributing\n------------\n\nPlease see [CONTRIBUTING](https://github.com/thephpleague/geotools/blob/master/CONTRIBUTING.md) for details.\n\nSupport\n-------\n\nBugs and feature request are tracked on [GitHub](https://github.com/thephpleague/geotools/issues)\n\nContributor Code of Conduct\n---------------------------\n\nAs contributors and maintainers of this project, we pledge to respect all people\nwho contribute through reporting issues, posting feature requests, updating\ndocumentation, submitting pull requests or patches, and other activities.\n\nWe are committed to making participation in this project a harassment-free\nexperience for everyone, regardless of level of experience, gender, gender\nidentity and expression, sexual orientation, disability, personal appearance,\nbody size, race, age, or religion.\n\nExamples of unacceptable behavior by participants include the use of sexual\nlanguage or imagery, derogatory comments or personal attacks, trolling, public\nor private harassment, insults, or other unprofessional conduct.\n\nProject maintainers have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct. Project maintainers who do not follow the\nCode of Conduct may be removed from the project team.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by opening an issue or contacting one or more of the project\nmaintainers.\n\nThis Code of Conduct is adapted from the [Contributor\nCovenant](https://contributor-covenant.org), version 1.0.0, available at\n[https://contributor-covenant.org/version/1/0/0/](https://contributor-covenant.org/version/1/0/0/)\n\nLicense\n-------\n\nGeotools is released under the MIT License. See the bundled\n[LICENSE](https://github.com/thephpleague/geotools/blob/master/LICENSE) file for details.\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/toin0u/Geotools/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n"
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.7333984375,
          "content": "{\n    \"name\"        : \"league/geotools\",\n    \"type\"        : \"library\",\n    \"description\" : \"Geo-related tools PHP 7.3+ library\",\n    \"keywords\"    : [\"geotools\", \"geometry\", \"geocoder\", \"geocoding\", \"geoip\", \"bounds\", \"distance\", \"batch\", \"async\", \"geohash\", \"geolocation\", \"latlong\", \"latitude\", \"longitude\"],\n    \"license\"     : \"MIT\",\n\n    \"authors\" : [{\n        \"name\"     : \"Antoine Corcy\",\n        \"email\"    : \"contact@sbin.dk\",\n        \"homepage\" : \"http://sbin.dk\",\n        \"role\"     : \"Developer\"\n    }],\n\n    \"support\" : {\n        \"issues\" : \"https://github.com/thephpleague/geotools/issues\",\n        \"source\" : \"https://github.com/thephpleague/geotools\"\n    },\n\n    \"replace\" : {\n        \"toin0u/geotools\" : \"*\"\n    },\n\n    \"require\" : {\n        \"php\"                     : \"^7.3 || ^7.4 || ^8.0\",\n        \"psr/cache\"               : \"^1.0 || ^2.0 || ^3.0\",\n        \"willdurand/geocoder\"     : \"^4.5\",\n        \"react/promise\"           : \"^2.8\",\n        \"symfony/console\"         : \"^4.4 || ^5.0 || ^6.0 || ^7.0\",\n        \"symfony/property-access\" : \"^4.4 || ^5.0 || ^6.0 || ^7.0\",\n        \"symfony/serializer\"      : \"^4.4 || ^5.0 || ^6.0 || ^7.0\",\n        \"react/event-loop\"        : \"^1.0\",\n        \"php-http/discovery\"      : \"^1.0\",\n        \"cache/array-adapter\"     : \"^1.0\",\n        \"ext-bcmath\": \"*\",\n        \"ext-json\": \"*\"\n    },\n\n    \"require-dev\" : {\n        \"phpunit/phpunit\"         : \"^9.5\"\n    },\n\n    \"autoload\" : {\n        \"psr-4\" : {\n            \"League\\\\Geotools\\\\\"        : \"src\"\n        }\n    },\n\n    \"autoload-dev\" : {\n        \"psr-4\" : {\n             \"League\\\\Geotools\\\\Tests\\\\\" : \"tests\"\n        }\n    },\n\n    \"bin\" : [\"bin/geotools\"],\n    \"config\": {\n        \"allow-plugins\": {\n            \"php-http/discovery\": true\n        }\n    }\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.6416015625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" backupGlobals=\"false\" backupStaticAttributes=\"false\" colors=\"true\" convertErrorsToExceptions=\"true\" convertNoticesToExceptions=\"true\" convertWarningsToExceptions=\"true\" processIsolation=\"false\" stopOnFailure=\"false\" bootstrap=\"tests/bootstrap.php\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\">\n  <coverage>\n    <include>\n      <directory>./src/</directory>\n    </include>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"Geotools Test Suite\">\n      <directory>./tests/</directory>\n    </testsuite>\n  </testsuites>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}