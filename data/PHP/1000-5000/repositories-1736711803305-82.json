{
  "metadata": {
    "timestamp": 1736711803305,
    "page": 82,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "WP-API/WP-API",
      "stars": 3940,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.0146484375,
          "content": "comment: false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0537109375,
          "content": ".DS_Store\nreadme.txt\ncomposer.lock\nnode_modules\nvendor\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.7294921875,
          "content": "# Travis CI Configuration File\n\n# Tell Travis CI we're using PHP\nlanguage: php\n\nsudo: false\n\nmatrix:\n  include:\n  - php: 5.6\n    env: WP_TRAVISCI=travis:phpunit WP_VERSION=4.6.1\n  - php: 5.6\n    env: WP_TRAVISCI=travis:phpvalidate\n  - php: 5.6\n    env: WP_TRAVISCI=travis:codecoverage\n  - php: 5.5\n    env: WP_TRAVISCI=travis:phpunit WP_VERSION=4.6.1\n  - php: 5.4\n    env: WP_TRAVISCI=travis:phpunit WP_VERSION=4.6.1\n  - php: 5.3\n    env: WP_TRAVISCI=travis:phpunit WP_VERSION=4.6.1\n  - php: 5.2\n    env: WP_TRAVISCI=travis:phpunit WP_VERSION=4.6.1\n  - php: hhvm\n    env: WP_TRAVISCI=travis:phpunit WP_VERSION=4.6.1\n  - php: 7.0\n    env: WP_TRAVISCI=travis:phpunit WP_VERSION=4.6.1\n  allow_failures:\n  - php: hhvm\n  fast_finish: true\n\ncache:\n  directories:\n  - vendor\n  - $HOME/.composer/cache\n  - node_modules\n\nbefore_install:\n  # set up WP install\n  - bash bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION\n  # prepare for running the tests\n  - cd $TRAVIS_BUILD_DIR\n  - npm install -g npm\n  - npm install -g grunt-cli\n  - npm install\n  - node --version\n  - npm --version\n  - grunt --version\n\nbefore_script:\n  # Setup Coveralls\n  - |\n    if [[ \"$WP_TRAVISCI\" == \"travis:phpvalidate\" ]] ; then\n      composer self-update\n      composer install --no-interaction\n    fi\n  # Setup Coveralls\n  - |\n    if [[ \"$WP_TRAVISCI\" == \"travis:codecoverage\" ]] ; then\n      composer self-update\n      composer install --no-interaction\n    fi\n\nscript:\n  - grunt $WP_TRAVISCI\n\nafter_script:\n  # Push coverage off to Codecov\n- |\n  if [[ \"$WP_TRAVISCI\" == \"travis:codecoverage\" ]] ; then\n    bash <(curl -s https://codecov.io/bash)\n  fi\n\ngit:\n  depth: 1\n\nbranches:\n  only:\n    - master\n    - develop\n\nnotifications:\n  email:\n    on_success: never\n    on_failure: change\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 141.9775390625,
          "content": "# Changelog\n\n## 2.0 Beta 15.0 (October 07, 2016)\n\n- Introduce support for Post Meta, Term Meta, User Meta, and Comment Meta in\ntheir parent endpoints.\n\n  For your meta fields to be exposed in the REST API, you need to register\n  them. WordPress includes a `register_meta()` function which is not usually\n  required to get/set fields, but is required for API support.\n\n  To register your field, simply call register_meta and set the show_in_rest\n  flag to true. Note: register_meta must be called separately for each meta\n  key.\n\n  (props @rmccue, @danielbachhuber, @kjbenk, @duncanjbrown, [#2765][gh-2765])\n\n- Introduce Settings endpoint.\n\n  Expose options to the REST API with the `register_setting()` function, by\n  passing `$args = array( 'show_in_rest' => true )`. Note: WordPress 4.7 is\n  required. See changeset [38635][https://core.trac.wordpress.org/changeset/38635].\n\n  (props @joehoyle, @fjarrett, @danielbachhuber, @jonathanbardo,\n  @greatislander, [#2739][gh-2739])\n\n- Attachments controller, change permissions check to match core.  \n\n  Check for the `upload_files` capability when creating an attachment.\n\n  (props @nullvariable, @adamsilverstein, [#2743][gh-2743])\n\n- Add `?{taxonomy}_exclude=` query parameter\n\n  This mirrors our existing support for ?{taxonomy}= filtering in the posts\n  controller (which allows querying for only records with are associated with\n  any of the provided term IDs for the specified taxonomy) by adding an\n  equivalent `_exclude` variant to list IDs of terms for which associated posts\n  should NOT be returned.\n\n  (props @kadamwhite, [#2756][gh-2756])\n\n- Use `get_comment_type()` when comparing updating comment status.\n\n  Comments having a empty `comment_type` within WordPress bites us again.\n  Fixes a bug where comments could not be updated because of bad comparison\n  logic.\n\n  (props @joehoyle, [#2753][gh-2753])\n\n[gh-2765]: https://github.com/WP-API/WP-API/issues/2765\n[gh-2739]: https://github.com/WP-API/WP-API/issues/2739\n[gh-2743]: https://github.com/WP-API/WP-API/issues/2743\n[gh-2756]: https://github.com/WP-API/WP-API/issues/2756\n[gh-2753]: https://github.com/WP-API/WP-API/issues/2753\n\n## 2.0 Beta 14.0 (September 30, 2016)\n\n- Add support for password protected posts\n\n  Password protected posts are now fully supported, you can create edit and read password protected posts in the REST API. There is now a `protected` attribute in the `content` and `excerpt` fields in post response.\n\n  To view password protected posts via the API, use the `password` query parameter to provide the post's password.\n\n  (props @joehoyle, [#2720][gh-2720])\n\n- Allow returning an error from field update callbacks\n\n  Fields added via `register_rest_field` can now return an instance of `WP_Error` in the `update_callback`.\n\n  (props @rmccue, [#2702][gh-2702])\n\n- Update the wp-api.js client from the client-js repo.\n\n  (props @joehoyle, [#2746][gh-2746])\n\n- Add `relevance` `orderby` to posts endpoint\n\n  (props @websupporter, [#2579][gh-2579])\n\n- Ability to order by `slug`, `email` and `url` on the users endpoints.\n\n  (props @joehoyle, [#2721][gh-2721])\n\n- Add `sticky` parameter to the posts endpoint.\n\n  (props @joehoyle, [#2708][gh-2708])\n\n- Add link to comment children, allowing threaded comment querying\n\n  (props @BE-Webdesign, [#2662][gh-2662], [#1612][gh-1612])\n\n- Avoid unnecessary SQL query by passing `$user_nicename`\n\n  (props @danielbachhuber, [#2435][gh-2435])\n\n- Don't allow reading / creating of posts with no parent\n\n  (props @rachelbaker, [#2744][gh-2744])\n\n- Mark Users' `capabilities` property as readonly\n\n  (props @danielbachhuber, [#2440][gh-2440])\n\n- Mark some post properties as readonly\n\n  (props @danielbachhuber, [#2438][gh-2438], [#2439][gh-2439])\n\n- Use WPINC instead of wp-includes/\n\n  (props @websupporter, [#2461][gh-2461])\n\n- Return error, if user can't list users & content=edit\n\n  (props @websupporter, [#2463][gh-2463])\n\n- Conditionally model the term response based on its schema\n\n  (props @danielbachhuber, [#2470][gh-2470])\n\n- Include Post data on the response object when declared\n\n  (props @websupporter, [#2423][gh-2423], [#2416][gh-2416])\n\n- Add boolean type support to rest_validate_request_arg()\n\n  (props @westonruter, [#2478][gh-2478])\n\n- Fix create/update requests not processing data included in the schema\n\n  (props @websupporter, [#2479][gh-2479])\n\n- Remove Unused Parameter in lib/endpoints/class-wp-rest-controller.php\n\n  (props @hideokamoto, [#2500][gh-2500])\n\n- Update post schema status description to reflect csv support.\n\n  (props @coderkevin, [#2534][gh-2534])\n\n- Allow Comments to be created with a passed `author_ip`\n\n  (props @rachelbaker, [#1880][gh-1880])\n\n- The get_the_excerpt filter expects the post object as of WP 4.5.\n\n  (props @lgedeon, [#2553][gh-2553])\n\n- Introduce WP_REST_Controller::get_post() for allowing plugins to mutate\nget_post()'s return value\n\n  (props @westonruter, [#2535][gh-2535])\n\n- Use `show_in_rest` to determine \"public\" post types to check\n\n  (props @danielbachhuber, [#2384][gh-2384])\n\n- #2426 Fix inconsistent type for user caps\n\n  (props @BE-Webdesign, [#2429][gh-2429], [#2426][gh-2426])\n\n- Define user `type` as a string, not an array\n\n  (props @danielbachhuber, [#2556][gh-2556])\n\n- Fix failing test: Typecast the user_id in search to a string\n\n  (props @rachelbaker, [#2617][gh-2617])\n\n- #2587 Fix registered date schema\n\n  (props @BE-Webdesign, [#2628][gh-2628], [#2587][gh-2587])\n\n- Fix forum url and installer-name in readme\n\n  (props @torounit, [#2656][gh-2656])\n\n- Document options of the \"status\" parameter for Post collection GETs\n\n  (props @kadamwhite, [#2645][gh-2645])\n\n- Improve WP_REST_Controller::filter_response_by_context().\n\n  (props @tfrommen, [#2641][gh-2641])\n\n- #2424 Consistent slashes in rest_url() usage\n\n  (props @BE-Webdesign, [#2428][gh-2428], [#2424][gh-2424])\n\n- Add filters to allow for relevance search\n\n  (props @websupporter, [#2665][gh-2665])\n\n- Alter default comment sort order to be \"desc\"\n\n  (props @kadamwhite, [#2684][gh-2684])\n\n- Add raw and rendered to revisions schema\n\n  (props @websupporter, [#2693][gh-2693])\n\n- \"WP API\" -> \"WordPress REST API\" in README files\n\n  (props @kadamwhite, [#2697][gh-2697])\n\n- Improve boolean validation from schema\n\n  (props @BE-Webdesign, [#2704][gh-2704], [#2616][gh-2616])\n\n- Fix typo (PUT vs POST) in readme.md\n\n  (props @kadamwhite, [#2716][gh-2716])\n\n- Add Codecov configuration\n\n  (props @danielbachhuber, [#2718][gh-2718])\n\n- Fix inefficiency in users endpoint using `search => **`\n\n  (props @joehoyle, [#2722][gh-2722])\n\n- Ensure the terms list is a list\n\n  (props @joehoyle, [#2724][gh-2724])\n\n- Added @return on handle_featured_media() doc\n\n  (props @vishalkakadiya, [#2725][gh-2725])\n\n- #2730 Update attachments fields added with `register_rest_field`\n\n  (props @BE-Webdesign, [#2731][gh-2731], [#2730][gh-2730])\n\n- #2582 Ensure the `roles` property is always an array\n\n  (props @BE-Webdesign, [#2728][gh-2728], [#2582][gh-2582])\n\n- Move post_password_required filtering to preparation\n\n  (props @rmccue, [#2735][gh-2735])\n\n- Use wrapper for `sanitize_title` to avoid messed up slugs.\n\n  (props @joehoyle, [#2723][gh-2723])\n\n- Force per_page to override the filter variable\n\n  (props @rmccue, [#2699][gh-2699])\n\n[gh-1612]: https://github.com/WP-API/WP-API/issues/1612\n[gh-1880]: https://github.com/WP-API/WP-API/issues/1880\n[gh-2384]: https://github.com/WP-API/WP-API/issues/2384\n[gh-2416]: https://github.com/WP-API/WP-API/issues/2416\n[gh-2423]: https://github.com/WP-API/WP-API/issues/2423\n[gh-2424]: https://github.com/WP-API/WP-API/issues/2424\n[gh-2426]: https://github.com/WP-API/WP-API/issues/2426\n[gh-2428]: https://github.com/WP-API/WP-API/issues/2428\n[gh-2429]: https://github.com/WP-API/WP-API/issues/2429\n[gh-2435]: https://github.com/WP-API/WP-API/issues/2435\n[gh-2436]: https://github.com/WP-API/WP-API/issues/2436\n[gh-2438]: https://github.com/WP-API/WP-API/issues/2438\n[gh-2439]: https://github.com/WP-API/WP-API/issues/2439\n[gh-2440]: https://github.com/WP-API/WP-API/issues/2440\n[gh-2441]: https://github.com/WP-API/WP-API/issues/2441\n[gh-2461]: https://github.com/WP-API/WP-API/issues/2461\n[gh-2463]: https://github.com/WP-API/WP-API/issues/2463\n[gh-2470]: https://github.com/WP-API/WP-API/issues/2470\n[gh-2478]: https://github.com/WP-API/WP-API/issues/2478\n[gh-2479]: https://github.com/WP-API/WP-API/issues/2479\n[gh-2500]: https://github.com/WP-API/WP-API/issues/2500\n[gh-2534]: https://github.com/WP-API/WP-API/issues/2534\n[gh-2535]: https://github.com/WP-API/WP-API/issues/2535\n[gh-2553]: https://github.com/WP-API/WP-API/issues/2553\n[gh-2556]: https://github.com/WP-API/WP-API/issues/2556\n[gh-2579]: https://github.com/WP-API/WP-API/issues/2579\n[gh-2582]: https://github.com/WP-API/WP-API/issues/2582\n[gh-2587]: https://github.com/WP-API/WP-API/issues/2587\n[gh-2616]: https://github.com/WP-API/WP-API/issues/2616\n[gh-2617]: https://github.com/WP-API/WP-API/issues/2617\n[gh-2628]: https://github.com/WP-API/WP-API/issues/2628\n[gh-2641]: https://github.com/WP-API/WP-API/issues/2641\n[gh-2645]: https://github.com/WP-API/WP-API/issues/2645\n[gh-2656]: https://github.com/WP-API/WP-API/issues/2656\n[gh-2662]: https://github.com/WP-API/WP-API/issues/2662\n[gh-2665]: https://github.com/WP-API/WP-API/issues/2665\n[gh-2684]: https://github.com/WP-API/WP-API/issues/2684\n[gh-2693]: https://github.com/WP-API/WP-API/issues/2693\n[gh-2697]: https://github.com/WP-API/WP-API/issues/2697\n[gh-2699]: https://github.com/WP-API/WP-API/issues/2699\n[gh-2702]: https://github.com/WP-API/WP-API/issues/2702\n[gh-2704]: https://github.com/WP-API/WP-API/issues/2704\n[gh-2708]: https://github.com/WP-API/WP-API/issues/2708\n[gh-2716]: https://github.com/WP-API/WP-API/issues/2716\n[gh-2718]: https://github.com/WP-API/WP-API/issues/2718\n[gh-2720]: https://github.com/WP-API/WP-API/issues/2720\n[gh-2721]: https://github.com/WP-API/WP-API/issues/2721\n[gh-2722]: https://github.com/WP-API/WP-API/issues/2722\n[gh-2723]: https://github.com/WP-API/WP-API/issues/2723\n[gh-2724]: https://github.com/WP-API/WP-API/issues/2724\n[gh-2725]: https://github.com/WP-API/WP-API/issues/2725\n[gh-2728]: https://github.com/WP-API/WP-API/issues/2728\n[gh-2730]: https://github.com/WP-API/WP-API/issues/2730\n[gh-2731]: https://github.com/WP-API/WP-API/issues/2731\n[gh-2735]: https://github.com/WP-API/WP-API/issues/2735\n[gh-2744]: https://github.com/WP-API/WP-API/issues/2744\n[gh-2746]: https://github.com/WP-API/WP-API/issues/2746\n\n## 2.0 Beta 13.0 (March 29, 2016)\n\n- BREAKING CHANGE: Fix Content-Disposition header parsing.\n\n  Allows regular form submissions from HTML forms, as well as properly formatted HTTP requests from clients. Note: this breaks backwards compatibility, as previously, the header parsing was completely wrong.\n\n  (props @rmccue, [#2239](https://github.com/WP-API/WP-API/pull/2239))\n\n- BREAKING CHANGE: Use compact links for embedded responses if they are available.\n\n  Introduces curies for sites running WordPress 4.5 or greater; no changes for those running WordPress 4.4.\n\n  (props @joehoyle, [#2412](https://github.com/WP-API/WP-API/pull/2412))\n\n- JavaScript client updates:\n\n  * Support lodash, plus older and newer underscore: add an alias for `_.contains`\n  * Add args and options on the model/collection prototypes\n  * Rework category/tag mixins to support new API structure\n  * Add workaround for the null/empty values returned by the API when creating a new post - these values are not accepted for subsequent updates/saves, so explicitly excluding them. See https://github.com/WP-API/WP-API/pull/2393\n  * Better handling of the (special) `me` endpoint\n  * Schema parsing cleanup\n  * Introduce `wp.api.loadPromise` so developers can ensure api load complete before using\n\n  (props @adamsilverstein, [#2403](https://github.com/WP-API/WP-API/pull/2403))\n\n- Only adds alternate link header for publicly viewable CPTs.\n\n  (props @bradyvercher, [#2387](https://github.com/WP-API/WP-API/pull/2387))\n\n- Adds `roles` param for `GET /wp/v2/users`.\n\n  (props @BE-Webdesign, [#2372](https://github.com/WP-API/WP-API/pull/2372))\n\n- Declares `password` in user schema, but never displays it.\n\n  (props @danielbachhuber, [#2386](https://github.com/WP-API/WP-API/pull/2386))\n\n- Permits `edit` context for requests which can edit the user.\n\n  (props @danielbachhuber, [#2383](https://github.com/WP-API/WP-API/pull/2383))\n\n- Adds `rest_pre_insert_{$taxonomy}` filter for terms.\n\n  (props @kjbenk, [#2377](https://github.com/WP-API/WP-API/pull/2377))\n\n- Supports taxonomy collection args on posts endpoint.\n\n  (props @joehoyle, [#2287](https://github.com/WP-API/WP-API/pull/2287))\n\n- Removes post meta link from post response.\n\n  (props @joehoyle, [#2288](https://github.com/WP-API/WP-API/pull/2288))\n\n- Registers `description` attribute when registering args from schema.\n\n  (props @danielbachhuber, [#2362](https://github.com/WP-API/WP-API/pull/2362))\n\n- Uses `$comment` from the database with `rest_insert_comment` action.\n\n  (props @danielbachhuber, [#2349](https://github.com/WP-API/WP-API/pull/2349))\n\n- Removes unnecessary global variables from users controller.\n\n  (props @claudiosmweb, [#2335](https://github.com/WP-API/WP-API/pull/2335))\n\n- Ensures `GET /wp/v2/categories` with out of bounds offset doesn't return results.\n\n  (props @danielbachhuber, [#2313](https://github.com/WP-API/WP-API/pull/2313))\n\n- Adds top-level support for date queries on posts and comments.\n\n  (props @BE-Webdesign, [#2266](https://github.com/WP-API/WP-API/pull/2266), [#2291](https://github.com/WP-API/WP-API/pull/2291))\n\n- Respects `show_avatars` setting for comments.\n\n  (props @BE-Webdesign, [#2271](https://github.com/WP-API/WP-API/pull/2271))\n\n- Uses cached `get_the_terms()` for terms-for-post for better performance.\n\n  (props @rmccue, [#2257](https://github.com/WP-API/WP-API/pull/2257))\n\n- Ensures comments search is an empty string.\n\n  (props @rmccue, [#2256](https://github.com/WP-API/WP-API/pull/2256))\n\n- If no title is provided in create attachment request or file metadata, falls back to filename.\n\n  (props @danielbachhuber, [#2254](https://github.com/WP-API/WP-API/pull/2254))\n\n- Removes unused `$img_url_basename` variable in attachments controller.\n\n  (props @danielbachhuber, [#2250](https://github.com/WP-API/WP-API/pull/2250))\n\n## 2.0 Beta 12.0 (February 9, 2016)\n\n- BREAKING CHANGE: Removes meta endpoints from primary plugin.\n\n  If your project depends on post meta endpoints, please install [WP REST API Meta Endpoints](https://wordpress.org/plugins/rest-api-meta-endpoints/). For the gory history of meta, read [#1425](https://github.com/WP-API/WP-API/issues/1425) and linked issues. At this time, we recommend using `register_rest_field()` to expose meta ([docs](http://v2.wp-api.org/extending/modifying/)).\n\n  (props @danielbachhuber, [#2172](https://github.com/WP-API/WP-API/pull/2172))\n\n- BREAKING CHANGE: Returns original resource when deleting PTCU.\n\n  Now that all resources require the `force` param, we don't need to wrap delete responses with the `trash` state.\n\n  (props @danielbachhuber, [#2163](https://github.com/WP-API/WP-API/pull/2163))\n\n- BREAKING CHANGE: Uses `roles` rather than `role` in the Users controller.\n\n  Building the REST API gives us the opportunity to standardize on `roles`, instead of having both `roles` and `role`.\n\n  (props @joehoyle, [#2177](https://github.com/WP-API/WP-API/pull/2177))\n\n- BREAKING CHANGES: Moves to consistent use of `context` throughout controllers.\n\n  Contexts limit the data present in the response. Here's how to think of them: `embed` correlates with sidebar representation, `view` represents the primary public view, and `edit` is the data expected for an editor.\n\n  (props @danielbachhuber, [#2205](https://github.com/WP-API/WP-API/pull/2205), [#2204](https://github.com/WP-API/WP-API/pull/2204), [#2203](https://github.com/WP-API/WP-API/pull/2203), [#2218](https://github.com/WP-API/WP-API/pull/2218), [#2216](https://github.com/WP-API/WP-API/pull/2216), [#2230](https://github.com/WP-API/WP-API/pull/2230), [#2184](https://github.com/WP-API/WP-API/pull/2184), [#2235](https://github.com/WP-API/WP-API/pull/2235))\n\n- BREAKING CHANGE: Removes `post_*` query param support for `GET /wp/v2/comments`.\n\n  The proper pattern is to use `GET /wp/v2/posts` to fetch the post IDs to limit the request to.\n\n  (props @danielbachhuber, [#2165](https://github.com/WP-API/WP-API/pull/2165))\n\n- BREAKING CHANGE: Introduces `rest_validate_request_arg()`/`rest_sanitize_request_arg()`.\n\n  Dedicated functions means we can use them for validating / sanitizing query args too. Removes `WP_REST_Controller::validate_schema_property()` and `WP_REST_Controller::sanitize_schema_property()`.\n\n  (props @danielbachhuber, [#2166](https://github.com/WP-API/WP-API/pull/2166), [#2213](https://github.com/WP-API/WP-API/pull/2213))\n\n- Requires minimum value of 1 for `page` param.\n\n  (props @danielbachhuber, [#2241](https://github.com/WP-API/WP-API/pull/2241))\n\n- Introduces `media_type` and `mime_type` params for `GET /wp/v2/media`.\n\n  (props @danielbachhuber, [#2231](https://github.com/WP-API/WP-API/pull/2231))\n\n- Uses the term cache for post data.\n\n  (props @rmccue, [#2234](https://github.com/WP-API/WP-API/pull/2234))\n\n- Supports for querying comments where `post=0`.\n\n  (props @danielbachhuber, [#1865](https://github.com/WP-API/WP-API/pull/1865))\n\n- Exposes taxonomy and post type capabilities in `context=edit`.\n\n  (props @danielbachhuber, [#2216](https://github.com/WP-API/WP-API/pull/2216))\n\n- Errors early when user can't GET types or taxonomies when `context=edit`.\n\n  (props @danielbachhuber, [#2218](https://github.com/WP-API/WP-API/pull/2218))\n\n- Passes original $request context to `prepare_items_query`.\n\n  (props @danielbachhuber, [#2211](https://github.com/WP-API/WP-API/pull/2211))\n\n- Adds `parent` and `parent_exclude` params to GET Comments.\n\n  (props @danielbachhuber, [#2206](https://github.com/WP-API/WP-API/pull/2206))\n\n- Enforces minimum 1 and maximum 100 values for `per_page` parameter.\n\n  (props @danielbachhuber, [#2209](https://github.com/WP-API/WP-API/pull/2209))\n\n- Adds `author` and `author_exclude` params to GET Posts and Comments.\n\n  (props @danielbachhuber, [#2200](https://github.com/WP-API/WP-API/pull/2202), [#2200](https://github.com/WP-API/WP-API/pull/2202))\n\n- Adds `menu_order` param for `GET` Pages; support `menu_order` orderby.\n\n  (props @danielbachhuber, [#2193](https://github.com/WP-API/WP-API/pull/2193))\n\n- Only calls `sanitize_text_field()` when sanitizing `type=string,format=email`.\n\n  (props @danielbachhuber, [#2185](https://github.com/WP-API/WP-API/pull/2185))\n\n- Validates `GET /wp/v2/comments` private query params.\n\n  Returns an error when user doesn't have permission to use them, instead of silently discarding.\n\n  (props @danielbachhuber, [#2178](https://github.com/WP-API/WP-API/pull/2178))\n\n- Explicitly prevents uploading attachments to other attachments or revisions.\n\n  (props @danielbachhuber, [#2180](https://github.com/WP-API/WP-API/pull/2180))\n\n- Permits user urls to be edited through the API.\n\n  (props @danielbachhuber, [#2182](https://github.com/WP-API/WP-API/pull/2182))\n\n- Marks all Status, Type and Taxonomy fields as `readonly`.\n\n  (props @danielbachhuber, [#2181](https://github.com/WP-API/WP-API/pull/2181))\n\n- Adds validation callbacks to collection query params.\n\n  (props @danielbachhuber, [#2170](https://github.com/WP-API/WP-API/pull/2170), [#2171](https://github.com/WP-API/WP-API/pull/2171), [#2176](https://github.com/WP-API/WP-API/pull/2176), [#2174](https://github.com/WP-API/WP-API/pull/2174), [#2175](https://github.com/WP-API/WP-API/pull/2175))\n\n- Links taxonomy terms to the post type collections they support.\n\n  (props @danielbachhuber, [#2167](https://github.com/WP-API/WP-API/pull/2167))\n\n- Returns error when making a `GET` request with invalid context.\n\n  (props @danielbachhuber, [#2169](https://github.com/WP-API/WP-API/pull/2169))\n\n- Adds `trash` status to `GET /wp/v2/statuses`.\n\n  (props @danielbachhuber, [#2158](https://github.com/WP-API/WP-API/pull/2158))\n\n- Indicates when fields have HTML in schema.\n\n  (props @joehoyle, [#2159](https://github.com/WP-API/WP-API/pull/2159))\n\n- Permits viewing of User who has published any Public posts.\n\n  (props @danielbachhuber, [#2155](https://github.com/WP-API/WP-API/pull/2155))\n\n- Respects `show_avatars` option when adding avatars to Users.\n\n  (props @nullvariable, [#2151](https://github.com/WP-API/WP-API/pull/2151))\n\n- Controllers use `$namespace` and `$rest_base` class variables for easier subclassing.\n\n  (props @danielbachhuber, [#2119](https://github.com/WP-API/WP-API/pull/2119), [#2130](https://github.com/WP-API/WP-API/pull/2130), [#2131](https://github.com/WP-API/WP-API/pull/2131), [#2132](https://github.com/WP-API/WP-API/pull/2132), [#2133](https://github.com/WP-API/WP-API/pull/2133), [#2134](https://github.com/WP-API/WP-API/pull/2134), [#2139](https://github.com/WP-API/WP-API/pull/2139), [#2141](https://github.com/WP-API/WP-API/pull/2141), [#2142](https://github.com/WP-API/WP-API/pull/2142))\n\n## 2.0 Beta 11.0 (January 25, 2016)\n\n- BREAKING CHANGE: Moves Post->Term relations to the Post Resource\n\n  Previously, a client would fetch a Post's Tags with `GET /wp/v2/posts/<id>/tags`.\n\n  In Beta 11, an array of term ids is included on the Post resource.\n\n  The collection of terms for a Post can be fetched with `GET /wp/v2/tags?post=<id>`.\n\n  The `WP_REST_Posts_Terms_Controller` class no longer exists.\n\n  (props @joehoyle, [#2063](https://github.com/WP-API/WP-API/pull/2063))\n\n- BREAKING CHANGE: Adds latest JS client including a minified version.\n\n  See pull request for a summarized changelog.\n\n  (props @adamsilverstein, [#1981](https://github.com/WP-API/WP-API/pull/1981))\n\n- BREAKING CHANGE: Changes `featured_image` attribute on Posts to `featured_media`.\n\n  While featuring other attachment types isn't yet officially supported, this makes it easier for us to introduce the possibility in the future.\n\n  (props @danielbachhuber, [#2044](https://github.com/WP-API/WP-API/pull/2044))\n\n- BREAKING CHANGE: Uses discrete schema title for categories and tags.\n\n  If you've used `register_rest_field( 'term' )`, you'll need to change `'term'` to `'tag'` and/or `'category'`.\n\n  (props @danielbachhuber, [#2005](https://github.com/WP-API/WP-API/pull/2005))\n\n- BREAKING CHANGE: Makes many filters dynamic based on the controller type.\n\n  If you were using the `rest_prepare_term` filter, you'll need to change it to `rest_prepare_post_tag` or `rest_prepare_category`.\n\n  If you were using `rest_post_query` or `rest_terms_query`, you'll need update your use to `rest_page_query`, etc.\n\n  If you were using `rest_post_trashable`, `rest_insert_post` or `rest_delete_post`, they are now dynamic based on the post type slug.\n\n  (props @danielbachhuber, [#2008](https://github.com/WP-API/WP-API/pull/2008), [#2010](https://github.com/WP-API/WP-API/pull/2010), [#2057](https://github.com/WP-API/WP-API/pull/2057), [#2058](https://github.com/WP-API/WP-API/pull/2058))\n\n- Renames `GET /wp/v2/comments` `user` param to `author` to match resource attribute.\n\n  Not a breaking change, because it didn't work in the first place.\n\n  (props @danielbachhuber, [#2105](https://github.com/WP-API/WP-API/pull/2105))\n\n- Adds support for `GET /wp/v2/pages parent=1,2,3`.\n\n  (props @danielbachhuber, [#2101](https://github.com/WP-API/WP-API/pull/2101))\n\n- Persists image metadata title and caption when not present in the request.\n\n  (props @danielbachhuber, [#2079](https://github.com/WP-API/WP-API/pull/2079))\n\n- Add `parent_exclude` param to `GET /wp/v2/posts`.\n\n  (props @danielbachhuber, [#2077](https://github.com/WP-API/WP-API/pull/2077))\n\n- Adds `slug` param support for collections of Posts, Users, and Taxonomy Terms.\n\n  (props @danielbachhuber, [#2071](https://github.com/WP-API/WP-API/pull/2071), [#2072](https://github.com/WP-API/WP-API/pull/2072), [#2103](https://github.com/WP-API/WP-API/pull/2103))\n\n- When a comment is already trashed, returns `410:rest_already_trashed`.\n\n  (props @danielbachhuber, [#2069](https://github.com/WP-API/WP-API/pull/2069))\n\n- Filter the responses by context after processing additional fields.\n\n  (props @danielbachhuber, [#2067](https://github.com/WP-API/WP-API/pull/2067))\n\n- Adds `offset` param support for collections of Posts, Users, Comments, and Taxonomy Terms.\n\n  (props @danielbachhuber, [#2061](https://github.com/WP-API/WP-API/pull/2061), [#2062](https://github.com/WP-API/WP-API/pull/2062), [#2064](https://github.com/WP-API/WP-API/pull/2064), [#2076](https://github.com/WP-API/WP-API/pull/2076))\n\n- Adds `rest_insert_{$taxonomy}` and `rest_delete_{$taxonomy}` actions.\n\n  (props @danielbachhuber, [#2060](https://github.com/WP-API/WP-API/pull/2060))\n\n- Provides more helpful error message/code on Post Create/Update fail.\n\n  (props @danielbachhuber, [#2053](https://github.com/WP-API/WP-API/pull/2053))\n\n- Forces `GET /wp/v2/media` to be limited to `'status' => [ inherit, private, trash ]`\n\n  (props @danielbachhuber, [#2026](https://github.com/WP-API/WP-API/pull/2026))\n\n- Uses more correct error code for `Comment::delete` permission check.\n\n  (props @danielbachhuber, [#2054](https://github.com/WP-API/WP-API/pull/2054))\n\n- Calls `prepare_item_for_response()` directly in create and update methods.\n\n  This lets us pass the original request through, giving the method and its filter genuine context, and avoids an\nunnecessary call to `get_item()`.\n\n  (props @danielbachhuber, [#2038](https://github.com/WP-API/WP-API/pull/2038), [#2040](https://github.com/WP-API/WP-API/pull/2040), [#2041](https://github.com/WP-API/WP-API/pull/2041), [#2043](https://github.com/WP-API/WP-API/pull/2043), [#2042](https://github.com/WP-API/WP-API/pull/2042))\n\n- Moves permission check methods across controllers.\n\n  Placing them above the method they're supposed to check makes the code more readable.\n\n  (props @danielbachhuber, [#2030](https://github.com/WP-API/WP-API/pull/2030), [#2029](https://github.com/WP-API/WP-API/pull/2029), [#2034](https://github.com/WP-API/WP-API/pull/2034), [#2036](https://github.com/WP-API/WP-API/pull/2036), [#2037](https://github.com/WP-API/WP-API/pull/2037), [#2035](https://github.com/WP-API/WP-API/pull/2035), [#2039](https://github.com/WP-API/WP-API/pull/2039))\n\n- Requires `force` argument for `DELETE /wp/v2/<taxonomy>/<id>`.\n\n  (props @danielbachhuber, [#2028](https://github.com/WP-API/WP-API/pull/2028))\n\n- Conditionally requires and defines REST API classes and functions.\n\n  (props @danielbachhuber, [#2023](https://github.com/WP-API/WP-API/pull/2023), [#2024](https://github.com/WP-API/WP-API/pull/2024))\n\n- Avoid a duplicate query for the comment count.\n\n  (props @rmccue, [#2015](https://github.com/WP-API/WP-API/pull/2015))\n\n- Parses `$date` if available in `prepare_date_response()`\n\n  (props @adamsilverstein, [#1951](https://github.com/WP-API/WP-API/pull/1951))\n\n- Abstracts `POST /wp/v2/media` permissions check.\n\n  (props @danielbachhuber, [#2003](https://github.com/WP-API/WP-API/pull/2003))\n\n- Adds `exclude` param to getting collections of Posts, Users, Comments, and Taxonomy Terms.\n\n  (props @danielbachhuber, [#1998](https://github.com/WP-API/WP-API/pull/1998), [#1999](https://github.com/WP-API/WP-API/pull/1999), [#2000](https://github.com/WP-API/WP-API/pull/2000), [#2002](https://github.com/WP-API/WP-API/pull/2002))\n\n- Adds `rest_comment_query` for filtering `GET /wp/v2/comments`.\n\n  (props @danielbachhuber, [#2007](https://github.com/WP-API/WP-API/pull/2007))\n\n- Uses HTTP status code `500` for `db_update_error` when creating an attachment.\n\n  (props @danielbachhuber, [#1993](https://github.com/WP-API/WP-API/pull/1993))\n\n- Adds helpful description to `force` param across all `DELETE` registrations\n\n  (props @danielbachhuber, [#2004](https://github.com/WP-API/WP-API/pull/2004), [#2027](https://github.com/WP-API/WP-API/pull/2027))\n\n- In `GET /wp/v2/<taxonomy>`, drops support for `orderby=>term_id`.\n\n  Only one `id` is exposed through the REST API.\n\n  (props @danielbachhuber, [#1990](https://github.com/WP-API/WP-API/pull/1990))\n\n## 2.0 Beta 10.0 (January 11, 2016)\n\n- SECURITY: Ensure media of private posts are private too.\n\n  Reported by @danielbachhuber on 2016-01-08.\n\n- BREAKING CHANGE: Removes compatibility repo for WordPress 4.3.\n\n  WordPress 4.4 is now the minimum supported WordPress version.\n\n  (props @danielbachhuber, [#1848](https://github.com/WP-API/WP-API/pull/1848))\n\n- BREAKING CHANGE: Changes link relation for types and taxonomies.\n\n  In Beta 9, this link relation was introduced as `item`, which isn't correct. The relation has been changed to `https://api.w.org/items`.\n\n  (props @danielbachhuber, [#1853](https://github.com/WP-API/WP-API/pull/1853))\n\n- BREAKING CHANGE: Introduces `edit` context for `wp/v2/types` and `wp/v2/taxonomies`.\n\n  Some fields have moved into this context, which require `edit_posts` and `manage_terms`, respectively.\n\n  (props @danielbachhuber, [#1894](https://github.com/WP-API/WP-API/pull/1894), [#1864](https://github.com/WP-API/WP-API/pull/1864))\n\n- BREAKING CHANGE: Removes `post_format` as a term `_link` for Posts.\n\n  Post formats aren't a custom taxonomy in the eyes of the REST API.\n\n  (props @danielbachhuber, [#1854](https://github.com/WP-API/WP-API/pull/1854))\n\n- Declares `parent` query param for Pages.\n\n  (props @danielbachhuber, [#1975](https://github.com/WP-API/WP-API/pull/1975))\n\n- Permits logged-in users to query for media.\n\n  (props @danielbachhuber, [#1973](https://github.com/WP-API/WP-API/pull/1973))\n\n- Removes duplicated query params from Terms controller.\n\n  (props @danielbachhuber, [#1963](https://github.com/WP-API/WP-API/pull/1963))\n\n- Adds `include` param to `/wp/v2/posts`, `/wp/v2/users`, `/wp/v2/<taxonomy>` and `/wp/v2/comments`.\n\n  (props @danielbachhuber, [#1961](https://github.com/WP-API/WP-API/pull/1961), [#1964](https://github.com/WP-API/WP-API/pull/1964), [#1968](https://github.com/WP-API/WP-API/pull/1968), [#1971](https://github.com/WP-API/WP-API/pull/1971))\n\n- Ensures `GET /wp/v2/posts` respects `order` and `orderby` params.\n\n  (props @danielbachhuber, [#1962](https://github.com/WP-API/WP-API/pull/1962))\n\n- Fixes fatal by loading `wp-admin/includes/user.php` to expose `wp_delete_user()`.\n\n  (props @danielbachhuber, [#1958](https://github.com/WP-API/WP-API/pull/1958))\n\n- Permits making a post sticky when also supplying an empty password.\n\n  (props @westonruter, [#1949](https://github.com/WP-API/WP-API/pull/1949))\n\n- Uses `WP_REST_Request` internally across controllers.\n\n  (props @danielbachhuber, [#1933](https://github.com/WP-API/WP-API/pull/1933), [#1939](https://github.com/WP-API/WP-API/pull/1939), [#1934](https://github.com/WP-API/WP-API/pull/1934), [#1938](https://github.com/WP-API/WP-API/pull/1938))\n\n- Cleans up permissions checks in `WP_REST_Terms_Controller`.\n\n  (props @danielbachhuber, [#1941](https://github.com/WP-API/WP-API/pull/1941))\n\n- Uses `show_in_rest` to determine publicness for post types.\n\n  (props @danielbachhuber, [#1942](https://github.com/WP-API/WP-API/pull/1942))\n\n- Makes `description` strings available for translation.\n\n  (props @danielbachhuber, [#1944](https://github.com/WP-API/WP-API/pull/1944))\n\n- Checks `assign_terms` cap for taxonomy when managing post terms.\n\n  (props @danielbachhuber, [#1940](https://github.com/WP-API/WP-API/pull/1940))\n\n- Defer to `edit_posts` of the custom post type when accessing private query vars.\n\n  (props @danielbachhuber, [#1886](https://github.com/WP-API/WP-API/pull/1886))\n\n- Allows Terms collection params to be filtered.\n\n  (props @rachelbaker, [#1882](https://github.com/WP-API/WP-API/pull/1882))\n\n- Renames post terms create/delete permissions callback.\n\n  (props @wpsmith, [#1923](https://github.com/WP-API/WP-API/pull/1923))\n\n- Fixes invalid use of 'uri' as schema `type`.\n\n  (props @wpsmith, [#1913](https://github.com/WP-API/WP-API/pull/1913))\n\n- Casts integer with (int) over intval for speed.\n\n  (props @wpsmith, [#1907](https://github.com/WP-API/WP-API/pull/1907))\n\n- Fixes PHP Doc typo for `validate_schema_property` and `sanitize_schema_property`.\n\n  (props @wpsmith, @danielbachhuber, [#1909](https://github.com/WP-API/WP-API/pull/1909), [#1910](https://github.com/WP-API/WP-API/pull/1910))\n\n- Adds a helpful description to the `filter` argument.\n\n  (props @danielbachhuber, [#1885](https://github.com/WP-API/WP-API/pull/1885))\n\n- Changes order of Users response to match schema order.\n\n  (props @rachelbaker, [#1879](https://github.com/WP-API/WP-API/pull/1879))\n\n- Adjusts Posts pagination headers for `filter` params.\n\n  (props @rachelbaker, [#1878](https://github.com/WP-API/WP-API/pull/1878))\n\n- Uses proper status code when failing to get comments of private post.\n\n  (props @danielbachhuber, [#1866](https://github.com/WP-API/WP-API/pull/1867))\n\n- Fixes invalid capability for comments get items permissions callback.\n\n  `manage_comments` doesn't exist; `moderate_comments` does.\n\n  (props @danielbachhuber, [#1866](https://github.com/WP-API/WP-API/pull/1866))\n\n- Permits creating comments without an assigned post.\n\n  (props @danielbachhuber, [#1857](https://github.com/WP-API/WP-API/pull/1857))\n\n- Prevents error notice when `show_in_rest` isn't set for a post type.\n\n  (props @danielbachhuber, [#1852](https://github.com/WP-API/WP-API/pull/1852))\n\n## 2.0 Beta 9.0 (December 11, 2015)\n\n- BREAKING CHANGE: Move tags and categories to top-level endpoints.\n\n  Tags are now accessible at `/wp/v2/tags`, and categories accessible at `/wp/v2/categories`. Post terms reside at `/wp/v2/posts/<id>/tags` and `/wp/v2/<id>/categories`.\n\n  (props @danielbachhuber, [#1802](https://github.com/WP-API/WP-API/pull/1802))\n\n- BREAKING CHANGE: Return object for requests to `/wp/v2/taxonomies`.\n\n  This is consistent with `/wp/v2/types` and `/wp/v2/statuses`.\n\n  (props @danielbachhuber, [#1825](https://github.com/WP-API/WP-API/pull/1825))\n\n- BREAKING CHANGE: Remove `rest_get_timezone()`.\n\n  `json_get_timezone()` was only ever used in v1. This function causes fatals, and shouldn't be used.\n\n  (props @danielbachhuber, [#1823](https://github.com/WP-API/WP-API/pull/1823))\n\n- BREAKING CHANGE: Rename `register_api_field()` to `register_rest_field()`.\n\n  Introduces a `register_api_field()` function for backwards compat, which calls `_doing_it_wrong()`. However, `register_api_field()` won't ever be committed to WordPress core, so you should update your function calls.\n\n  (props @danielbachhuber, [#1824](https://github.com/WP-API/WP-API/pull/1824))\n\n- BREAKING CHANGE: Change taxonomies' `post_type` argument to `type`.\n\n  It's consistent with how we're exposing post types in the API.\n\n  (props @danielbachhuber, [#1824](https://github.com/WP-API/WP-API/pull/1824))\n\n- Sync infrastructure with shipped in WordPress 4.4.\n\n  * `wp-includes/rest-api/rest-functions.php` is removed, and its functions moved into `wp-includes/rest-api.php`.\n  * Send nocache headers for REST requests. [#34832](https://core.trac.wordpress.org/ticket/34832)\n  * Fix handling of HEAD requests. [#34837](https://core.trac.wordpress.org/ticket/34837)\n  * Mark `WP_REST_Server::get_raw_data()` as static. [#34768](https://core.trac.wordpress.org/ticket/34768)\n  * Unabbreviate error string. [#34818](https://core.trac.wordpress.org/ticket/34818)\n\n- Change terms endpoints to use `term_id` not `tt_id`.\n\n  (props @joehoyle, [#1837](https://github.com/WP-API/WP-API/pull/1837))\n\n- Standardize declaration of `context` param for `GET` requests across controllers.\n\n  However, we're still inconsistent in which controllers expose which params. Follow [#1845](https://github.com/WP-API/WP-API/issues/1845) for further discussion.\n\n  (props @danielbachhuber, [#1795](https://github.com/WP-API/WP-API/pull/1795), [#1835](https://github.com/WP-API/WP-API/pull/1835), [#1838](https://github.com/WP-API/WP-API/pull/1838))\n\n- Link types / taxonomies to their collections, and vice versa.\n\n  Collections link to their type / taxonomy with the `about` relation; types / taxonomies link to their colletion with the `item` relation, which is imperfect and may change in the future.\n\n  (props @danielbachhuber, [#1814](https://github.com/WP-API/WP-API/pull/1814), [#1817](https://github.com/WP-API/WP-API/pull/1817), [#1829](https://github.com/WP-API/WP-API/pull/1829). [#1846](https://github.com/WP-API/WP-API/pull/1846))\n\n- Add missing 'wp/v2' in Location Response header when creating new Post Meta.\n\n  (props @johanmynhardt, [#1790](https://github.com/WP-API/WP-API/pull/1790))\n\n- Expose Post collection query params, including `author`, `order`, `orderby` and `status`.\n\n  (props @danielbachhuber, [#1793](https://github.com/WP-API/WP-API/pull/1793))\n\n- Ignore sticky posts by default.\n\n  (props @danielbachhuber, [#1801](https://github.com/WP-API/WP-API/pull/1801))\n\n- Include `full` image size in attachment `sizes` attribute.\n\n  (props @danielbachhuber, [#1806](https://github.com/WP-API/WP-API/pull/1806))\n\n- In text strings, use `id` instead of `ID`.\n\n  `ID` is an implementation artifact. Our Resources use `id`.\n\n  (props @danielbachhuber, [#1803](https://github.com/WP-API/WP-API/pull/1803))\n\n- Ensure `attachment.sizes[]` use `mime_type` instead of `mime-type`.\n\n  (props @danielbachhuber, [#1809](https://github.com/WP-API/WP-API/pull/1809))\n\n- Introduce `rest_authorization_required_code()`.\n\n  Many controllers returned incorrect HTTP codes, which this also fixes.\n\n  (props @danielbachhuber, [#1808](https://github.com/WP-API/WP-API/pull/1808))\n\n- Respect core's `comment_registration` setting.\n\n  If it's enabled, require users to be logged in to comment.\n\n  (props @danielbachhuber, [#1826](https://github.com/WP-API/WP-API/pull/1826))\n\n- Default to wildcard when searching users.\n\n  (props @danielbachhuber, [#1827](https://github.com/WP-API/WP-API/pull/1827))\n\n- Bring the wp-api.js library up to date for v2 of the REST API.\n\n  (props @adamsilverstein, [#1828](https://github.com/WP-API/WP-API/pull/1828))\n\n- Add `rest_prepare_status` filter.\n\n  (props @danielbachhuber, [#1830](https://github.com/WP-API/WP-API/pull/1830))\n\n- Make `prepare_*` filters more consistent.\n\n  (props @danielbachhuber, [#1831](https://github.com/WP-API/WP-API/pull/1831))\n\n- Add `rest_prepare_post_type` filter for post types.\n\n  (props @danielbachhuber, [#1833](https://github.com/WP-API/WP-API/pull/1833))\n\n## 2.0 Beta 8.0 (December 1, 2015)\n\n- Prevent fatals when uploading attachment by including admin utilities.\n\n  (props @danielbachhuber, [#1756](https://github.com/WP-API/WP-API/pull/1756))\n\n- Return 201 status code when creating a term.\n\n  (props @danielbachhuber, [#1753](https://github.com/WP-API/WP-API/pull/1753))\n\n- Don't permit requesting terms cross routes.\n\n  Clients should only be able to request categories from the category route, and tags from the tag route.\n\n  (props @danielbachhuber, [#1764](https://github.com/WP-API/WP-API/pull/1764))\n\n- Set `fields=>id` when using `WP_User_Query` to fix large memory usage\n\n  (props @joehoyle, [#1770](https://github.com/WP-API/WP-API/pull/1770))\n\n- Fix Post `_link` to attached attachments.\n\n  (props @danielbachhuber, [#1777](https://github.com/WP-API/WP-API/pull/1777))\n\n- Add support for getting a post with a custom public status.\n\n  (props @danielbachhuber, [#1765](https://github.com/WP-API/WP-API/pull/1765))\n\n- Ensure post content doesn't get double-slashed on update.\n\n  (props @joehoyle, [#1772](https://github.com/WP-API/WP-API/pull/1772))\n\n- Change 'int' to 'integer' for `WP_REST_Controller::validate_schema_property()`\n\n  (props @wpsmith, [#1759](https://github.com/WP-API/WP-API/pull/1759))\n\n## 2.0 Beta 7.0 (November 17, 2015)\n\n- Sync infrastructure from WordPress core as of r35691.\n\n  * Remove `register_api_field()` because it's conceptually tied to `WP_REST_Controller` [#34730](https://core.trac.wordpress.org/ticket/34730)\n  * Update the REST API header links to use api.w.org [#34303](https://core.trac.wordpress.org/ticket/34303)\n  * Require the `$namespace` argument in `register_rest_route()` [#34416](https://core.trac.wordpress.org/ticket/34416)\n  * Include `enum` and `description` in help data [#34543](https://core.trac.wordpress.org/ticket/34543)\n  * Save `preg_match` iterations in `WP_REST_Server` [#34488](https://core.trac.wordpress.org/ticket/34488)\n  * Don't return route URL in `WP_REST_Request:get_params()` [#34647](https://core.trac.wordpress.org/ticket/34647)\n\n- Restore `register_api_field()` within the plugin.\n\n  (props @danielbachhuber, [#1748](https://github.com/WP-API/WP-API/pull/1748))\n\n- Require admin functions for use of `wp_handle_upload()`, fixing fatal.\n\n  (props @joehoyle, [#1746](https://github.com/WP-API/WP-API/pull/1746))\n\n- Properly handle requesting terms where `parent=0` and `0` is a string.\n\n  (props @danielbachhuber, [#1739](https://github.com/WP-API/WP-API/pull/1739))\n\n- Prevent PHP error notice when `&filter` isn't an array.\n\n  (props @danielbachhuber, [#1734](https://github.com/WP-API/WP-API/pull/1734))\n\n- Change link relations to use api.w.org.\n\n  (props @danielbachhuber, [#1726](https://github.com/WP-API/WP-API/pull/1726))\n\n\n## 2.0 Beta 6.0 (November 12, 2015)\n\n- Remove global inclusion of wp-admin/includes/admin.php\n\n  For a long time, the REST API loaded wp-admin/includes/admin.php to make use of specific admin utilities. Now, it only loads those admin utilities when it needs them.\n\n  If your custom endpoints make use of admin utilities, you'll need to make sure to load wp-admin/includes/admin.php before you use them.\n\n  (props @joehoyle, [#1696](https://github.com/WP-API/WP-API/pull/1696))\n\n- Link directly to the featured image in a Post's links.\n\n  (props @rmccue, [#1563](https://github.com/WP-API/WP-API/pull/1563), [#1711](https://github.com/WP-API/WP-API/pull/1711))\n\n- Provide object type as callback argument for custom API fields.\n\n  (props @jtsternberg, [#1714](https://github.com/WP-API/WP-API/pull/1714))\n\n- Change users schema order to be order of importance instead of alpha.\n\n  (props @rachelbaker, [#1708](https://github.com/WP-API/WP-API/pull/1708))\n\n- Clarify documentation for `date` and `modified` attributes.\n\n  (props @danielbachhuber, [#1715](https://github.com/WP-API/WP-API/pull/1715))\n\n- Update the wp-api.js client from the client-js repo.\n\n  (props @rachelbaker, [#1709](https://github.com/WP-API/WP-API/pull/1709))\n\n- Fix the `format` enum to be an array of strings.\n\n  (props @joehoyle, [#1707](https://github.com/WP-API/WP-API/pull/1707))\n\n- Run revisions for collection through `prepare_response_for_collection()`.\n\n  (props @danielbachhuber, @rachelbaker, [#1671](https://github.com/WP-API/WP-API/pull/1671))\n\n- Expose `date_gmt` for `view` context of Posts and Comments.\n\n  (props @danielbachhuber, [#1690](https://github.com/WP-API/WP-API/pull/1690))\n\n- Fix PHP and JS docblock formatting.\n\n  (props @ahmadawais, [#1699](https://github.com/WP-API/WP-API/pull/1698), [#1699](https://github.com/WP-API/WP-API/pull/1699), [#1701](https://github.com/WP-API/WP-API/pull/1701), [#1700](https://github.com/WP-API/WP-API/pull/1700), [#1702](https://github.com/WP-API/WP-API/pull/1702), [#1703](https://github.com/WP-API/WP-API/pull/1703))\n\n- Include `media_details` attribute for attachments in embed context.\n\n  For image attachments, media_details includes a sizes array of image sizes, which is useful for templating.\n\n  (props @danielbachhuber, [#1667](https://github.com/WP-API/WP-API/pull/1667))\n\n- Make `WP_REST_Controller` error messages more helpful by specifying method to subclass.\n\n  (props @danielbachhuber, [#1670](https://github.com/WP-API/WP-API/pull/1670))\n\n- Expose `slug` in `embed` context for Users.\n\n  `user_nicename` is a public attribute, used in user URLs, so this is safe data to present.\n\n  (props @danielbachhuber, [#1666](https://github.com/WP-API/WP-API/pull/1666))\n\n- Handle falsy value from `wp_count_terms()`, fixing fatal.\n\n  (props @joehoyle, [#1641](https://github.com/WP-API/WP-API/pull/1641))\n\n- Correct methods in `WP_REST_SERVER::EDITABLE` description.\n\n  (props @rachelbaker, [#1601](https://github.com/WP-API/WP-API/pull/1601))\n\n- Add the embed context to Users collection query params.\n\n  (props @rachelbaker, [#1591](https://github.com/WP-API/WP-API/pull/1591))\n\n- Add Terms Controller collection args details.\n\n  (props @rachelbaker, [#1603](https://github.com/WP-API/WP-API/pull/1603))\n\n- Set comment author details from current user.\n\n  (props @rmccue, [#1580](https://github.com/WP-API/WP-API/pull/1580))\n\n- More hook documentation.\n\n  (props @adamsilverstein, [#1556](https://github.com/WP-API/WP-API/pull/1556), [#1560](https://github.com/WP-API/WP-API/pull/1560))\n\n- Return the trashed status of deleted posts/comments.\n\n  When a post or a comment is deleted, returns a flag to say whether it's been trashed or properly deleted.\n\n  (props @pento, [#1499](https://github.com/WP-API/WP-API/pull/1499))\n\n- In `WP_REST_Posts_Controller::update_item()`, check the post ID based on the proper post type.\n\n  (props @rachelbaker, [#1497](https://github.com/WP-API/WP-API/pull/1497))\n\n## 2.0 Beta 5.0 (October 23, 2015)\n\n- Load api-core as a compatibility library\n\n  Now api-core has been merged into WordPress trunk (for 4.4) we should no longer load the infrastructure code\n  when it's already available. This also fixes a fatal error for users who were on trunk.\n\n  (props @rmccue)\n\n- Switch to new mysql_to_rfc3339\n\n  (props @rmccue)\n\n- Double-check term taxonomy\n\n  (props @rmccue)\n\n- Load admin functions\n\n  This was removed from the latest beta of WordPress in the REST API infrastructure, a more long term fix is planned.\n\n  (props @joehoyle)\n\n- Add Add compat shim for renamed `rest_mysql_to_rfc3339()`\n\n  (props @danielbachhuber)\n\n- Compat shim for `wp_is_numeric_array()`\n\n  (props @danielbachhuber)\n\n- Revert Switch to register_post_type_args filter\n\n  (props @joehoyle)\n\n## 2.0 Beta 4.0 (August 14, 2015)\n\n- Show public user information through the user controller.\n\n  In WordPress as of [r32683](https://core.trac.wordpress.org/changeset/32683) (scheduled for 4.3), `WP_User_Query` now has support for getting users with published posts.\n\n  To match current behaviour in WordPress themes and feeds, we now expose this public user information. This includes the avatar, description, user ID, custom URL, display name, and URL, for users who have published at least one post on the site. This information is available to all clients; other fields and data for all users are still only available when authenticated.\n\n  (props @joehoyle, @rmccue, @Shelob9, [#1397][gh-1397], [#839][gh-839], [#1435][gh-1435])\n\n- Send schema in OPTIONS requests and index.\n\n  Rather than using separate `/schema` endpoints, the schema for items is now available through an OPTIONS request to the route. This means that full documentation is now available for endpoints through an OPTIONS request; this includes available methods, what data you can pass to the endpoint, and the data you'll get back.\n\n  This data is now also available in the main index and namespace indexes. Simply request the index with `context=help` to get full schema data. Warning: this response will be huge. The schema for single endpoints is also available in the collection's OPTIONS response.\n\n  **⚠️ This breaks backwards compatibility** for clients relying on schemas being at their own routes. These clients should instead send `OPTIONS` requests.\n\n  Custom endpoints can register their own schema via the `schema` option on the route. This option should live side-by-side with the endpoints (similar to `relation` in WP's meta queries), so your registration call will look something like:\n\n  ```php\n  register_rest_route( 'test-ns', '/test', array(\n    array(\n      'methods' => 'GET',\n      'callback' => 'my_test_callback',\n    ),\n\n    'schema' => 'my_schema_callback',\n  ) );\n  ```\n\n  (props @rmccue, [#1415][gh-1415], [#1222][gh-1222], [#1305][gh-1305])\n\n- Update JavaScript API for version 2.\n\n  Our fantastic JavaScript API from version 1 is now available for version 2, refreshed with the latest and greatest changes.\n\n  As a refresher: if you want to use it, simply make your script depend on `wp-api` when you enqueue it. If you want to enqueue the script manually, add `wp_enqueue_script( 'wp-api' )` to a callback on `wp_enqueue_scripts`.\n\n  (props @tlovett1, @kadamwhite, @nathanrice, [#1374][gh-1374], [#1320][gh-1320])\n\n- Embed links inside items in a collection.\n\n  Previously when fetching a collection of items, you only received the items themselves. To fetch the links as well via embedding, you needed to make a request to the single item with `_embed` set.\n\n  No longer! You can now request a collection with embeds enabled (try `/wp/v2/posts?_embed`). This will embed links inside each item, allowing you to build interface items much easier (for example, post archive pages can get featured image data at the same time).\n\n  This also applies to custom endpoints. Any endpoint that returns a list of objects will automatically have the embedding applied to objects inside the list.\n\n  (props @rmccue, [#1459][gh-1459], [#865][gh-865])\n\n- Fix potential XSS vulnerability.\n\n  Requests from other origins could potentially run code on the API domain, allowing cross-origin access to authentication cookies or similar.\n\n  Reported by @xknown on 2015-07-23.\n\n- Move `/posts` `WP_Query` vars back to `filter` param.\n\n  In version 1, we had internal `WP_Query` vars available via `filter` (e.g. `filter[s]=search+term`). For our first betas of version 2, we tried something different and exposed these directly on the endpoint. The experiment has now concluded; we didn't like this that much, so `filter` is back.\n\n  We plan on adding nicer looking arguments to collections in future releases, with a view towards being consistent across different collections. We also plan on opening up the underlying query vars via `filter` for users, comments, and terms as well.\n\n  **⚠️ This breaks backwards compatibility** for users using WP Query vars. Simply change your `x=y` parameter to `filter[x]=y`.\n\n  (props @WP-API, [#1420][gh-1420])\n\n- Respect `rest_base` for taxonomies.\n\n  **⚠️ This breaks backwards compatibility** by changing the `/wp/v2/posts/{id}/terms/post_tag` endpoint to `/wp/v2/posts/{id}/tag`.\n\n  (props @joehoyle, [#1466][gh-1466])\n\n- Add permission check for retrieving the posts collection in edit context.\n\n  By extension of the fact that getting any individual post yields a forbidden context error when the `context=edit` and the user is not authorized, the user should also not be permitted to list any post items when unauthorized.\n\n  (props @danielpunkass, [#1412][gh-1412])\n\n- Ensure the REST API URL always has a trailing slash.\n\n  Previously, when pretty permalinks were enabled, the API URL during autodiscovery looked like `/wp-json`, whereas the non-pretty permalink URL looked like `?rest_route=/`. These are now consistent, and always end with a slash character to simplify client URL building.\n\n  (props @danielpunkass, @rmccue, [#1426][gh-1426], [#1442][gh-1442], [#1455][gh-1455], [#1467][gh-1467])\n\n- Use `wp_json_encode` instead of `json_encode`\n\n  Since WordPress 4.1, `wp_json_encode` has been available to ensure encoded values are sane, and that non-UTF8 encodings are supported. We now use this function rather than doing the encode ourselves.\n\n  (props @rmccue, @pento, [#1417][gh-1417])\n\n- Add `role` to schema for users.\n\n  The available roles you can assign to a user are now available in the schema as an `enum`.\n\n  (props @joehoyle, [#1400][gh-1400])\n\n- Use the schema for validation inside the comments controller.\n\n  Previously, the schema was merely a decorative element for documentation inside the comments controller. To bring it inline with our other controllers, the schema is now used internally for validation.\n\n  (props @joehoyle, [#1422][gh-1422])\n\n- Don't set the Location header in update responses.\n\n  Previously, the Location header was sent when updating resources due to some inadvertent copypasta. This header should only be sent when creating to direct clients to the new resource, and isn't required when you're already on the correct resource.\n\n  (props @rachelbaker, [#1441][gh-1441])\n\n- Re-enable the `rest_insert_post` action hook for `WP_REST_Posts_Controller`\n\n  This was disabled during 2.0 development to avoid breaking lots of plugins on the `json_insert_post` action. Now that we've changed namespaces and are Mostly Stable (tm), we can re-enable the action.\n\n  (props @jaredcobb, [#1427][gh-1427], [#1424][gh-1424])\n\n- Fix post taxonomy terms link URLs.\n\n  When moving the routes in a previous beta, we forgot to correct the links on post objects to the new correct route. Sorry!\n\n  (props @rachelbaker, @joehoyle, [#1447][gh-1447], [#1383][gh-1383])\n\n- Use `wp_get_attachment_image_src()` on the image sizes in attachments.\n\n  Since the first versions of the API, we've been building attachment URLs via `str_replace`. Who knows why we were doing this, but it caused problems with custom attachment URLs (such as CDN-hosted images). This now correctly uses the internal functions and filters.\n\n  (props @joehoyle, [#1462][gh-1462])\n\n- Make the embed context a default, not forced.\n\n  If you want embeds to bring in full data rather than with `context=edit`, you can now change the link to specify `context=view` explicitly.\n\n  (props @rmccue, [#1464][gh-1464])\n\n- Ensure we always use the `term_taxonomy_id` and never expose `term_id` publicly.\n\n  Previously, `term_id` was inadvertently exposed in some error responses.\n\n  (props @jdolan, [#1430][gh-1430])\n\n- Fix adding alt text to attachments on creation.\n\n  Previously, this could only be set when updating an attachment, not when creating one.\n\n  (props @joehoyle, [#1398][gh-1398])\n\n- Throw an error when registering routes without a namespace.\n\n  Namespaces should **always** be provided when registering routes. We now throw a `doing_it_wrong` error when attempting to register one. (Previously, this caused a warning, or an invalid internal route.)\n\n  If you *really* need to register namespaceless routes (e.g. to replicate an existing API), call `WP_REST_Server::register_route` directly rather than using the convenience function.\n\n  (props @joehoyle, @rmccue, [#1355][gh-1355])\n\n- Show links on embeds.\n\n  Previously, links were accidentally stripped from embedded response data.\n\n  (props @rmccue, [#1472][gh-1472])\n\n- Clarify insufficient permisssion error when editing posts.\n\n  (props @danielpunkass, [#1411][gh-1411])\n\n- Improve @return inline docs for rest_ensure_response()\n\n  (props @Shelob9, [#1328][gh-1328])\n\n- Check taxonomies exist before trying to set properties.\n\n  (props @joehoyle, @rachelbaker, [#1354][gh-1354])\n\n- Update controllers to ensure we use `sanitize_callback` wherever possible.\n\n  (props @joehoyle, [#1399][gh-1399])\n\n- Add more phpDoc documentation, and correct existing documentation.\n\n  (props @Shelob9, @rmccue, [#1432][gh-1432], [#1433][gh-1433], [#1465][gh-1465])\n\n- Update testing infrastructure.\n\n  Travis now runs our coding standards tests in parallel, and now uses the new, faster container-based testing infrastructure.\n\n  (props @ntwb, @frozzare, [#1449][gh-1449], [#1457][gh-1457])\n\n[View all changes](https://github.com/WP-API/WP-API/compare/2.0-beta3...2.0-beta4)\n\n[gh-839]: https://github.com/WP-API/WP-API/issues/839\n[gh-865]: https://github.com/WP-API/WP-API/issues/865\n[gh-1222]: https://github.com/WP-API/WP-API/issues/1222\n[gh-1305]: https://github.com/WP-API/WP-API/issues/1305\n[gh-1310]: https://github.com/WP-API/WP-API/issues/1310\n[gh-1320]: https://github.com/WP-API/WP-API/issues/1320\n[gh-1328]: https://github.com/WP-API/WP-API/issues/1328\n[gh-1354]: https://github.com/WP-API/WP-API/issues/1354\n[gh-1355]: https://github.com/WP-API/WP-API/issues/1355\n[gh-1372]: https://github.com/WP-API/WP-API/issues/1372\n[gh-1374]: https://github.com/WP-API/WP-API/issues/1374\n[gh-1383]: https://github.com/WP-API/WP-API/issues/1383\n[gh-1397]: https://github.com/WP-API/WP-API/issues/1397\n[gh-1398]: https://github.com/WP-API/WP-API/issues/1398\n[gh-1399]: https://github.com/WP-API/WP-API/issues/1399\n[gh-1400]: https://github.com/WP-API/WP-API/issues/1400\n[gh-1402]: https://github.com/WP-API/WP-API/issues/1402\n[gh-1411]: https://github.com/WP-API/WP-API/issues/1411\n[gh-1412]: https://github.com/WP-API/WP-API/issues/1412\n[gh-1413]: https://github.com/WP-API/WP-API/issues/1413\n[gh-1415]: https://github.com/WP-API/WP-API/issues/1415\n[gh-1417]: https://github.com/WP-API/WP-API/issues/1417\n[gh-1420]: https://github.com/WP-API/WP-API/issues/1420\n[gh-1422]: https://github.com/WP-API/WP-API/issues/1422\n[gh-1424]: https://github.com/WP-API/WP-API/issues/1424\n[gh-1426]: https://github.com/WP-API/WP-API/issues/1426\n[gh-1427]: https://github.com/WP-API/WP-API/issues/1427\n[gh-1430]: https://github.com/WP-API/WP-API/issues/1430\n[gh-1432]: https://github.com/WP-API/WP-API/issues/1432\n[gh-1433]: https://github.com/WP-API/WP-API/issues/1433\n[gh-1435]: https://github.com/WP-API/WP-API/issues/1435\n[gh-1441]: https://github.com/WP-API/WP-API/issues/1441\n[gh-1442]: https://github.com/WP-API/WP-API/issues/1442\n[gh-1447]: https://github.com/WP-API/WP-API/issues/1447\n[gh-1449]: https://github.com/WP-API/WP-API/issues/1449\n[gh-1455]: https://github.com/WP-API/WP-API/issues/1455\n[gh-1455]: https://github.com/WP-API/WP-API/issues/1455\n[gh-1457]: https://github.com/WP-API/WP-API/issues/1457\n[gh-1459]: https://github.com/WP-API/WP-API/issues/1459\n[gh-1462]: https://github.com/WP-API/WP-API/issues/1462\n[gh-1464]: https://github.com/WP-API/WP-API/issues/1464\n[gh-1465]: https://github.com/WP-API/WP-API/issues/1465\n[gh-1466]: https://github.com/WP-API/WP-API/issues/1466\n[gh-1467]: https://github.com/WP-API/WP-API/issues/1467\n[gh-1472]: https://github.com/WP-API/WP-API/issues/1472\n\n## 2.0 Beta 3.0 (July 1, 2015)\n\n- Add ability to declare sanitization and default options for schema fields.\n\n  The `arg_options` array can be used to declare the sanitization callback,\n  default value, or requirement of a field.\n\n  (props @joehoyle, [#1345][gh-1345])\n  (props @joehoyle, [#1346][gh-1346])\n\n- Expand supported parameters for creating and updating Comments.\n\n  (props @rachelbaker, [#1245][gh-1245])\n\n- Declare collection parameters for Terms of a Post.\n\n  Define the available collection parameters in `get_collection_params()` and\n  allow Terms of a Post to be queried by term order.\n\n  (props @danielbachhuber, [#1332][gh-1332])\n\n- Improve the Attachment error message for an invalid Content-Disposition\n\n  (props @danielbachhuber, [#1317][gh-1317])\n\n- Return 200 status when updating Attachments, Comments, and Users.\n\n  (props @rachelbaker, [#1348][gh-1348])\n\n- Remove unnecessary `handle_format_param()` method.\n\n  (props @danielbachhuber, [#1331][gh-1331])\n\n- Add `author_avatar_url` field to the Comment response and schema.\n\n  (props @rachelbaker [#1327][gh-1327])\n\n- Introduce `rest_do_request()` for making REST requests internally.\n\n  (props @danielbachhuber, [#1333][gh-1333])\n\n- Remove unused DateTime class.\n\n  (props @rmccue, [#1314][gh-1314])\n\n- Add inline documentation for `$wp_rest_server` global.\n\n  (props @Shelob9, [#1324][gh-1324])\n\n  [View all changes](https://github.com/WP-API/WP-API/compare/2.0-beta2...2.0-beta3)\n  [gh-1245]: https://github.com/WP-API/WP-API/issues/1245\n  [gh-1314]: https://github.com/WP-API/WP-API/issues/1314\n  [gh-1317]: https://github.com/WP-API/WP-API/issues/1317\n  [gh-1318]: https://github.com/WP-API/WP-API/issues/1318\n  [gh-1324]: https://github.com/WP-API/WP-API/issues/1324\n  [gh-1326]: https://github.com/WP-API/WP-API/issues/1326\n  [gh-1327]: https://github.com/WP-API/WP-API/issues/1327\n  [gh-1331]: https://github.com/WP-API/WP-API/issues/1331\n  [gh-1332]: https://github.com/WP-API/WP-API/issues/1332\n  [gh-1333]: https://github.com/WP-API/WP-API/issues/1333\n  [gh-1345]: https://github.com/WP-API/WP-API/issues/1345\n  [gh-1346]: https://github.com/WP-API/WP-API/issues/1346\n  [gh-1347]: https://github.com/WP-API/WP-API/issues/1347\n  [gh-1348]: https://github.com/WP-API/WP-API/issues/1348\n\n## 2.0 Beta 2.0 (May 28, 2015)\n\n- Load the WP REST API before the main query runs.\n\n  The `rest_api_loaded` function now hooks into the `parse_request` action.\n  This change prevents the main query from being run on every request and\n  allows sites to set `WP_USE_THEMES` to `false`.  Previously, the main query\n  was always being run (`SELECT * FROM wp_posts LIMIT 10`), even though the\n  result was never used and couldn't be cached.\n\n  (props @rmccue, [#1270][gh-1270])\n\n- Register a new field on an existing WordPress object type.\n\n  Introduces `register_api_field()` to add a field to an object and\n  its schema.\n\n  (props @joehoyle, @rachelbaker, [#927][gh-927])\n  (props @joehoyle, [#1207][gh-1207])\n  (props @joehoyle, [#1243][gh-1243])\n\n- Add endpoints for viewing, creating, updating, and deleting Terms for a Post.\n\n  The new `WP_REST_Posts_Terms_Controller` class controller supports routes for\n  Terms that belong to a Post.\n\n  (props @joehoyle, @danielbachhuber, [#1216][gh-1216])\n\n- Add pagination headers for collection queries.\n\n  The `X-WP-Total` and `X-WP-TotalPages` are now present in terms, comments,\n  and users collection responses.\n\n  (props @danielbachhuber, [#1182][gh-1182])\n  (props @danielbachhuber, [#1191][gh-1191])\n  (props @danielbachhuber, @joehoyle, [#1197][gh-1197])\n\n- List registered namespaces in the index for feature detection.\n\n  The index (`/wp-json` by default) now contains a list of the available\n  namespaces. This allows for simple feature detection. You can grab the index\n  and check namespaces for `wp/v3` or `pluginname/v2`, which indicate the\n  supported endpoints on the site.\n\n  (props @rmccue,, [#1283][gh-1283])\n\n- Standardize link property relations and support embedding for all resources.\n\n  Change link properties to use IANA-registered relations.  Also adds embedding\n  support to Attachments, Comments and Terms.\n\n  (props @rmccue, @rachelbaker, [#1284][gh-1284])\n\n- Add support for Composer dependency management.\n\n  Allows you to recursively install/update the WP REST API inside of WordPress\n  plugins or themes.\n\n  (props @QWp6t, [#1157][gh-1157])\n\n- Return full objects in the delete response.\n\n  Instead of returning a random message when deleting a Post, Comment, Term, or\n  User provide the original resource data.\n\n  (props @danielbachhuber, [#1253][gh-1253])\n  (props @danielbachhuber, [#1254][gh-1254])\n  (props @danielbachhuber, [#1255][gh-1255])\n  (props @danielbachhuber, [#1256][gh-1256])\n\n- Return programmatically readable error messages for invalid or missing\n  required parameters.\n\n  (props @joehoyle, [#1175][gh-1175])\n\n- Declare supported arguments for Comment and User collection queries.\n\n  (props @danielbachhuber, [#1211][gh-1211])\n  (props @danielbachhuber, [#1217][gh-1217])\n\n- Automatically validate parameters based on Schema data.\n\n  (props @joehoyle, [#1128][gh-1128])\n\n- Use the `show_in_rest` attributes for exposing Taxonomies.\n\n  (props @joehoyle, [#1279][gh-1279])\n\n- Handle `parent` when creating or updating a Term.\n\n  (props @joehoyle, [#1221][gh-1221])\n\n- Limit fields returned in `embed` context User responses.\n\n  (props @rachelbaker, [#1251][gh-1251])\n\n- Only include `parent` in term response when tax is hierarchical.\n\n  (props @danielbachhuber, [#1189][gh-1189])\n\n- Fix bug in creating comments if `type` was not set.\n\n  (props @rachelbaker, [#1244][gh-1244])\n\n- Rename `post_name` field to `post_slug`.\n\n  (props @danielbachhuber, [#1235][gh-1235])\n\n- Add check when creating a user to verify the provided role is valid.\n\n  (props @rachelbaker, [#1267][gh-1267])\n\n- Add link properties to the Post Status response.\n\n  (props @joehoyle, [#1243][gh-1243])\n\n- Return `0` for `parent` in Post response instead of `null`.\n\n  (props @danielbachhuber, [#1269][gh-1269])\n\n- Only link `author` when there's a valid author\n\n  (props @danielbachhuber, [#1203][gh-1203])\n\n- Only permit querying by parent term when tax is hierarchical.\n\n  (props @danielbachhuber, [#1219][gh-1219])\n\n- Only permit deleting posts of the proper type\n\n  (props @danielbachhuber, [#1257][gh-1257])\n\n- Set pagination headers even when no found posts.\n\n  (props @danielbachhuber, [#1209][gh-1209])\n\n- Correct prefix in `rest_request_parameter_order` filter.\n\n  (props @quasel, [#1158][gh-1158])\n\n- Retool `WP_REST_Terms_Controller` to follow Posts controller pattern.\n\n  (props @danielbachhuber, [#1170][gh-1170])\n\n- Remove unused `accept_json argument` from the `register_routes` method.\n\n  (props @quasel, [#1160][gh-1160])\n\n- Fix typo in `sanitize_params` inline documentation.\n\n  (props @Shelob9, [#1226][gh-1226])\n\n- Remove commented out code in dispatch method.\n\n  (props @rachelbaker, [#1162][gh-1162])\n\n\n[View all changes](https://github.com/WP-API/WP-API/compare/2.0-beta1.1...2.0-beta2)\n[gh-927]: https://github.com/WP-API/WP-API/issues/927\n[gh-1128]: https://github.com/WP-API/WP-API/issues/1128\n[gh-1157]: https://github.com/WP-API/WP-API/issues/1157\n[gh-1158]: https://github.com/WP-API/WP-API/issues/1158\n[gh-1160]: https://github.com/WP-API/WP-API/issues/1160\n[gh-1162]: https://github.com/WP-API/WP-API/issues/1162\n[gh-1168]: https://github.com/WP-API/WP-API/issues/1168\n[gh-1170]: https://github.com/WP-API/WP-API/issues/1170\n[gh-1171]: https://github.com/WP-API/WP-API/issues/1171\n[gh-1175]: https://github.com/WP-API/WP-API/issues/1175\n[gh-1176]: https://github.com/WP-API/WP-API/issues/1176\n[gh-1177]: https://github.com/WP-API/WP-API/issues/1177\n[gh-1181]: https://github.com/WP-API/WP-API/issues/1181\n[gh-1182]: https://github.com/WP-API/WP-API/issues/1182\n[gh-1188]: https://github.com/WP-API/WP-API/issues/1188\n[gh-1189]: https://github.com/WP-API/WP-API/issues/1189\n[gh-1191]: https://github.com/WP-API/WP-API/issues/1191\n[gh-1197]: https://github.com/WP-API/WP-API/issues/1197\n[gh-1200]: https://github.com/WP-API/WP-API/issues/1200\n[gh-1203]: https://github.com/WP-API/WP-API/issues/1203\n[gh-1207]: https://github.com/WP-API/WP-API/issues/1207\n[gh-1209]: https://github.com/WP-API/WP-API/issues/1209\n[gh-1210]: https://github.com/WP-API/WP-API/issues/1210\n[gh-1211]: https://github.com/WP-API/WP-API/issues/1211\n[gh-1216]: https://github.com/WP-API/WP-API/issues/1216\n[gh-1217]: https://github.com/WP-API/WP-API/issues/1217\n[gh-1219]: https://github.com/WP-API/WP-API/issues/1219\n[gh-1221]: https://github.com/WP-API/WP-API/issues/1221\n[gh-1226]: https://github.com/WP-API/WP-API/issues/1226\n[gh-1235]: https://github.com/WP-API/WP-API/issues/1235\n[gh-1243]: https://github.com/WP-API/WP-API/issues/1243\n[gh-1244]: https://github.com/WP-API/WP-API/issues/1244\n[gh-1249]: https://github.com/WP-API/WP-API/issues/1249\n[gh-1251]: https://github.com/WP-API/WP-API/issues/1251\n[gh-1253]: https://github.com/WP-API/WP-API/issues/1253\n[gh-1254]: https://github.com/WP-API/WP-API/issues/1254\n[gh-1255]: https://github.com/WP-API/WP-API/issues/1255\n[gh-1256]: https://github.com/WP-API/WP-API/issues/1256\n[gh-1257]: https://github.com/WP-API/WP-API/issues/1257\n[gh-1259]: https://github.com/WP-API/WP-API/issues/1259\n[gh-1267]: https://github.com/WP-API/WP-API/issues/1267\n[gh-1268]: https://github.com/WP-API/WP-API/issues/1268\n[gh-1269]: https://github.com/WP-API/WP-API/issues/1269\n[gh-1270]: https://github.com/WP-API/WP-API/issues/1270\n[gh-1276]: https://github.com/WP-API/WP-API/issues/1276\n[gh-1277]: https://github.com/WP-API/WP-API/issues/1277\n[gh-1279]: https://github.com/WP-API/WP-API/issues/1279\n[gh-1283]: https://github.com/WP-API/WP-API/issues/1283\n[gh-1284]: https://github.com/WP-API/WP-API/issues/1284\n[gh-1295]: https://github.com/WP-API/WP-API/issues/1295\n[gh-1301]: https://github.com/WP-API/WP-API/issues/1301\n\n\n## 2.0 Beta 1.1\n\n- Fix user access security vulnerability.\n\n  Authenticated users were able to escalate their privileges bypassing the\n  expected capabilities check.\n\n  Reported by @kacperszurek on 2015-05-16.\n\n\n## 2.0 Beta 1 (April 28, 2015)\n\n- Avoid passing server to the controller each time\n\n  (props @rmccue, [#543][gh-543])\n\n- Unify naming of methods across classes\n\n  (props @danielbachhuber, [#546][gh-546])\n\n- Disable unit tests while we move things around\n\n  (props @danielbachhuber, [#548][gh-548])\n\n- Mock code to represent new Resources\n\n  (props @danielbachhuber, [#549][gh-549])\n\n- WP_JSON_Controller POC\n\n  (props @danielbachhuber, [#556][gh-556])\n\n- Add request object\n\n  (props @rmccue, [#563][gh-563])\n\n- Update routes for new-style registration\n\n  (props @rmccue, [#564][gh-564])\n\n- Add compatibility with v1 routing\n\n  (props @rmccue, [#565][gh-565])\n\n- Remove Last-Modified and If-Unmodified-Since\n\n  (props @rmccue, [#566][gh-566])\n\n- Allow multiple route registration\n\n  (props @rmccue, [#586][gh-586])\n\n- Use https in test setup\n\n  (props @danielbachhuber, [#588][gh-588])\n\n- Terms Controller Redux\n\n  (props @danielbachhuber, [#579][gh-579])\n\n- Add hypermedia functionality to the response\n\n  (props @rmccue, @rachelbaker, [#570][gh-570])\n\n- Initial pass at new style Users Controller\n\n  (props @rachelbaker, [#603][gh-603])\n\n- Drop old Users class\n\n  (props @danielbachhuber, [#619][gh-619])\n\n- Fix passing array to 'methods' are in register_json_route()\n\n  (props @joehoyle, [#620][gh-620])\n\n- Allow 'ignore_sticky_posts' filter #415\n\n  (props @Shelob9, [#612][gh-612], [#415][gh-415])\n\n- Initial Extras.php commit\n\n  (props @NikV, [#575][gh-575])\n\n- Allow filtering response before returning\n\n  (props @danielbachhuber, [#573][gh-573])\n\n- Parse JSON data from the request\n\n  (props @rmccue, [#626][gh-626])\n\n- Remove old taxonomies controller\n\n  (props @danielbachhuber, [#637][gh-637])\n\n- Make our code DRY by consolidating use of strtoupper\n\n  (props @danielbachhuber, [#589][gh-589])\n\n- Move WP_Test_JSON_Testcase to a properly named file\n\n  (props @danielbachhuber, [#643][gh-643])\n\n- Speed up builds by only running against MS once\n\n  (props @danielbachhuber, [#638][gh-638])\n\n- `->prepare_post()` should be public\n\n  (props @staylor, [#645][gh-645])\n\n- Get by and return `term_taxonomy_id`\n\n  (props @danielbachhuber, [#648][gh-648])\n\n- Base class with standard test methods for every controller\n\n  (props @danielbachhuber, [#649][gh-649])\n\n- Unused arguments\n\n  (props @staylor, [#647][gh-647])\n\n- JS should be under version control\n\n  (props @staylor, [#644][gh-644])\n\n- Register multiple routes for users correctly\n\n  (props @rmccue, [#654][gh-654])\n\n- Check get_post_type_object() returns an object before using it\n\n  (props @NateWr, [#656][gh-656])\n\n- Run multisite test against PHP 5.2\n\n  (props @danielbachhuber, [#659][gh-659])\n\n- Pass the edit context when returning the create or update response. Fixes\n#661\n\n  (props @rachelbaker, [#664][gh-664], [#661][gh-661])\n\n- Check for errors when responding to create\n\n  (props @rmccue, [#652][gh-652])\n\n- Fix bug in check_required_parameters where JSON params were missed\n\n  (props @rachelbaker, [#673][gh-673])\n\n- Fix parameter handling and improve Users Controller tests\n\n  (props @rachelbaker, [#675][gh-675])\n\n- Check that param is null\n\n  (props @danielbachhuber, [#678][gh-678])\n\n- Parse URL-encoded body with PUT requests\n\n  (props @rmccue, [#681][gh-681])\n\n- End to end testing for users\n\n  (props @rmccue, [#682][gh-682])\n\n- End to end test coverage of Terms Controller\n\n  (props @danielbachhuber, @rmccue, [#676][gh-676])\n\n- Add ability to wrap response in an envelope\n\n  (props @Japh, @rmccue, [#628][gh-628])\n\n- Wrap up PUT handling in Users Controller\n\n  (props @rachelbaker, [#683][gh-683])\n\n- ID shouldn't be a param on update user endpoint\n\n  (props @joehoyle, [#692][gh-692])\n\n- Clean up Terms controller\n\n  (props @danielbachhuber, [#696][gh-696])\n\n- Remove mis-placed duplicate Users Delete route and id parameter\n\n  (props @rachelbaker, [#700][gh-700])\n\n- Fields cleanup for User controller\n\n  (props @danielbachhuber, [#701][gh-701])\n\n- Throw an error when a user tries to update to an existing user's email\n\n  (props @danielbachhuber, [#705][gh-705])\n\n- `PUT User` shouldn't permit using existing `user_login` or `user_nicename`\n\n  (props @danielbachhuber, [#707][gh-707])\n\n- Change return value of WP_JSON_Users_Controller::get_item.\n\n  (props @rachelbaker, [#712][gh-712])\n\n- Add the ability to specify default param values in register_json_route\n\n  (props @WP-API, [#715][gh-715])\n\n- Merge JS into main repo\n\n  (props @tlovett1, [#730][gh-730])\n\n- Make the \"required\" param on args optional\n\n  (props @joehoyle, @rachelbaker, [#728][gh-728])\n\n- Always allow JSON data for POST and PUT requests\n\n  (props @rachelbaker, [#731][gh-731])\n\n- Initial pass at new style Posts Controller\n\n  (props @rachelbaker, [#684][gh-684])\n\n- Drop required argument declaration\n\n  (props @danielbachhuber, [#736][gh-736])\n\n- Update post format after post has been updated\n\n  (props @danielbachhuber, [#737][gh-737])\n\n- Allow the title to be set via title.raw\n\n  (props @iseulde, [#741][gh-741])\n\n- Fix some incompatible interfaces\n\n  (props @staylor, [#742][gh-742])\n\n- Full Test Coverage for Users Controller\n\n  (props @rachelbaker, [#744][gh-744])\n\n- Refer to BaseCollection statically instead of via this.constructor\n\n  (props @tlovett1, [#750][gh-750])\n\n- Adjustments to Users Controller DocBlocks\n\n  (props @rachelbaker, [#743][gh-743])\n\n- Default `args` to an empty array\n\n  (props @danielbachhuber, [#758][gh-758])\n\n- Do not require type parameter to be set when updating a Post\n\n  (props @rachelbaker, [#761][gh-761])\n\n- Remove from docs the \"post_type\" filter parameter for /posts endpoint\n\n  (props @NateWr, [#666][gh-666])\n\n- Resolve regressions in Posts Controller\n\n  (props @rachelbaker, [#753][gh-753])\n\n- WP_Json_Server::dispatch() should always return a WP_JSON_Response\n\n  (props @joehoyle, [#714][gh-714])\n\n- Update Timeline note\n\n  (props @tapsboy, [#774][gh-774])\n\n- Make json_pre_dispatch and json_post_dispatch consistent\n\n  (props @joehoyle, [#786][gh-786])\n\n- Normalize our test classes setUP and tearDown methods\n\n  (props @rachelbaker, [#794][gh-794])\n\n- Comments Endpoints\n\n  (props @joehoyle, @rachelbaker, [#693][gh-693])\n\n- Correct /posts/ endpoint read post permission logic\n\n  (props @rachelbaker, [#805][gh-805])\n\n- Ensure global $post has proper state when the json_prepare_post filter f...\n\n  (props @ericandrewlewis, [#823][gh-823])\n\n- Adds missing description field to the Taxonomy response\n\n  (props @rachelbaker, [#826][gh-826])\n\n- Posts controller abstraction\n\n  (props @danielbachhuber, [#820][gh-820])\n\n- Remove old Pages and CustomPostType classes no longer in use\n\n  (props @danielbachhuber, [#831][gh-831])\n\n- Add `featured_image` attribute for post types that support `thumbnails`\n\n  (props @danielbachhuber, [#832][gh-832])\n\n- Specify Capability in Route\n\n  (props @joehoyle, [#602][gh-602])\n\n- Posts Controller Headers and Links Fixes\n\n  (props @rachelbaker, [#836][gh-836])\n\n- Don't noop `future` status. It's confusing\n\n  (props @danielbachhuber, [#841][gh-841])\n\n- Remove unused $request parameter from prepare_links method.\n\n  (props @rachelbaker, [#842][gh-842])\n\n- Expose basic author details when user has published posts\n\n  (props @danielbachhuber, [#838][gh-838])\n\n- Make `get_post_type_base()` public so we can DRY\n\n  (props @danielbachhuber, [#845][gh-845])\n\n- Remove Duplicate Logic for Post Type Attributes\n\n  (props @rachelbaker, [#853][gh-853])\n\n- Move infrastructure classes to `lib/infrastructure`, part one\n\n  (props @danielbachhuber, [#872][gh-872])\n\n- Passing a value for the slug parameter should update the post_name.\n\n  (props @rachelbaker, [#883][gh-883])\n\n- Break Pages tests into a separate class\n\n  (props @danielbachhuber, [#870][gh-870])\n\n- Empty checks in Posts Controller make setting values to Falsy impossible\n\n  (props @joehoyle, [#885][gh-885])\n\n- Change project name to WP REST API in plugin name and Readme title.\n\n  (props @rachelbaker, [#876][gh-876])\n\n- Return 200 and an empty array for valid queries with 0 results.\n\n  (props @rachelbaker, [#888][gh-888])\n\n- Include the taxonomy in the term response\n\n  (props @danielbachhuber, [#891][gh-891])\n\n- JSON Schemas for our Controllers, second attempt\n\n  (props @danielbachhuber, [#844][gh-844])\n\n- From the left with love\n\n  (props @MichaelArestad, [#896][gh-896])\n\n- Add `link` field to Users, Comments and Terms\n\n  (props @danielbachhuber, [#897][gh-897])\n\n- Fix flipped assertions\n\n  (props @danielbachhuber, [#902][gh-902])\n\n- Add missing break statement\n\n  (props @danielbachhuber, [#905][gh-905])\n\n- Move all of our endpoint controllers to `lib/endpoints`\n\n  (props @danielbachhuber, [#906][gh-906])\n\n- Always include `guid` in Post and Page schemas\n\n  (props @danielbachhuber, [#907][gh-907])\n\n- If post type doesn't match controller post type, throw 404\n\n  (props @danielbachhuber, [#908][gh-908])\n\n- Allow post type attributes to be set based on presence in schema\n\n  (props @danielbachhuber, [#910][gh-910])\n\n- Updating another post field shouldn't change sticky status\n\n  (props @danielbachhuber, [#911][gh-911])\n\n- Expose post type data at `/types`\n\n  (props @danielbachhuber, [#914][gh-914])\n\n- Always defer to controller for post type\n\n  (props @danielbachhuber, [#913][gh-913])\n\n- Add `template` parameter to Page response\n\n  (props @danielbachhuber, [#909][gh-909])\n\n- Convert /media to new controller pattern\n\n  (props @danielbachhuber, [#904][gh-904])\n\n- Remove v1.0 Posts (and Media) controller\n\n  (props @WP-API, [#923][gh-923])\n\n- Clean up taxonomies controller tests by running through dispatch; add schema\n\n  (props @danielbachhuber, [#919][gh-919])\n\n- Separate permissions logic for comments\n\n  (props @joehoyle, [#854][gh-854])\n\n- `wp-json.php` isn't needed anymore\n\n  (props @danielbachhuber, [#931][gh-931])\n\n- Tweak the post controller\n\n  (props @rmccue, [#936][gh-936])\n\n- Switch CORS headers callback to new action\n\n  (props @rmccue, [#935][gh-935])\n\n- Remove `_id` suffix from field names\n\n  (props @danielbachhuber, [#941][gh-941])\n\n- Add `author_ip`, `author_user_agent` and `karma` fields to Comment\n\n  (props @danielbachhuber, [#946][gh-946])\n\n- Explicitly test that these additional comment fields aren't present\n\n  (props @danielbachhuber, [#947][gh-947])\n\n- Allow `title` to be set to empty string in request\n\n  (props @danielbachhuber, [#953][gh-953])\n\n- Use real URLs instead of query_params attribute\n\n  (props @rmccue, [#958][gh-958])\n\n- Use `wp_filter_post_kses()` instead of `wp_kses_post()` on insert\n\n  (props @danielbachhuber, [#917][gh-917])\n\n- Add missing core path to post endpoint link hrefs.\n\n  (props @rachelbaker, [#966][gh-966])\n\n- Allow HTTP method to be overwritten by HTTP_X_HTTP_METHOD_OVERRIDE\n\n  (props @tlovett1, [#967][gh-967])\n\n- Fix attachment caption and description fields\n\n  (props @danielbachhuber, [#968][gh-968])\n\n- Move validation to the `WP_JSON_Request` class\n\n  (props @danielbachhuber, [#971][gh-971])\n\n- Move the Route Registering to the Controllers\n\n  (props @joehoyle, [#970][gh-970])\n\n- Correct test method spelling of permission.\n\n  (props @rachelbaker, [#973][gh-973])\n\n- Permission abstractions 2\n\n  (props @joehoyle, [#987][gh-987])\n\n- If an invalid date is supplied to create / update post, return an error\n\n  (props @joehoyle, [#1000][gh-1000])\n\n- Update README.md\n\n  (props @hubdotcom, [#1006][gh-1006])\n\n- Add embeddable attachments to Post response _links\n\n  (props @rachelbaker, [#1026][gh-1026])\n\n- Throw error if requesting user doesn't have capability for context\n\n  (props @danielbachhuber, [#1033][gh-1033])\n\n- `/wp/statuses` endpoint, modeled after `/wp/types`\n\n  (props @danielbachhuber, [#1039][gh-1039])\n\n- Turn post types from array to object, with name as key\n\n  (props @danielbachhuber, [#1042][gh-1042])\n\n- Add missing response fields to the user schema.\n\n  (props @rachelbaker, [#1034][gh-1034])\n\n- Setting a post to be sticky AND password protected should fail\n\n  (props @joehoyle, [#1044][gh-1044])\n\n- Use appropriate functions when creating users on multisite\n\n  (props @danielbachhuber, [#1043][gh-1043])\n\n- Define context in which each schema field appears\n\n  (props @danielbachhuber, [#1046][gh-1046])\n\n- Use schema abstraction to limit which user fields are exposed per context\n\n  (props @danielbachhuber, [#1049][gh-1049])\n\n- Run Statuses, Types, and Taxonomies through our context filter\n\n  (props @danielbachhuber, [#1050][gh-1050])\n\n- Run Terms controller through schema context filter\n\n  (props @danielbachhuber, [#1051][gh-1051])\n\n- Don't allow contributors to set sticky on posts\n\n  (props @joehoyle, [#1052][gh-1052])\n\n- Return correct response code from wp_insert_post() error\n\n  (props @joehoyle, [#999][gh-999])\n\n- Move the permissions checks for password and author into the permissions\ncallback\n\n  (props @joehoyle, [#1054][gh-1054])\n\n- Use full Post schema to filter fields based on context\n\n  (props @danielbachhuber, [#1053][gh-1053])\n\n- Allow WP_JSON_Server::send_header()/send_headers() to be accessed publicly\n\n  (props @johnbillion, [#1059][gh-1059])\n\n- Remove unnecessary sticky posts abstraction\n\n  (props @danielbachhuber, [#1064][gh-1064])\n\n- Re-enable the Post endpoint filters\n\n  (props @rachelbaker, [#1028][gh-1028])\n\n- Fix the format of the args when building them from the Schema\n\n  (props @joehoyle, [#1066][gh-1066])\n\n- Add more tests for the server class\n\n  (props @rmccue, [#685][gh-685])\n\n- Fix error with OPTIONS requests\n\n  (props @rmccue, [#1091][gh-1091])\n\n- Ensure the JSON endpoint URL is properly escaped\n\n  (props @johnbillion, [#1097][gh-1097])\n\n- Correct a bunch of filter docs in WP_JSON_Server\n\n  (props @johnbillion, [#1098][gh-1098])\n\n- Require `moderate_comments` capability to context=edit a Comment\n\n  (props @danielbachhuber, @joehoyle, [#951][gh-951])\n\n- Add all the permission check functions to the base controller for better\nconsistancy and help to subclasses\n\n  (props @joehoyle, [#1104][gh-1104])\n\n- `author` is the Comment attribute with user ID\n\n  (props @danielbachhuber, [#1106][gh-1106])\n\n- Fix copy pasta in the schema checks\n\n  (props @danielbachhuber, [#1111][gh-1111])\n\n- When `context=edit`, confirm user can `manage_comments`\n\n  (props @danielbachhuber, [#1112][gh-1112])\n\n- Abstract revisions to dedicated controller; only include revisioned fields\n\n  (props @danielbachhuber, [#1110][gh-1110])\n\n- Add Embeddable Taxonomy Term Links to the Post Response\n\n  (props @rachelbaker, [#1048][gh-1048])\n\n- Increase Terms Controller test coverage\n\n  (props @rachelbaker, [#1117][gh-1117])\n\n- Rename the `wp_json_server_before_serve` to `wp_json_init`\n\n  (props @joehoyle, [#1105][gh-1105])\n\n- Drop revision embedding from posts controller; link instead\n\n  (props @danielbachhuber, [#1121][gh-1121])\n\n- Add security section to our README\n\n  (props @rmccue, [#1123][gh-1123])\n\n- Missing @param inline docs in main plugin file.\n\n  (props @Shelob9, [#1122][gh-1122])\n\n- Ensure post deletion is idempotent\n\n  (props @rmccue, [#959][gh-959])\n\n- Support for validation / sanitize callbacks in arguments\n\n  (props @joehoyle, [#989][gh-989])\n\n- Display links in collections\n\n  (props @rmccue, @rachelbaker, [#937][gh-937])\n\n- Sanitize args using new args API\n\n  (props @joehoyle, [#1129][gh-1129])\n\n- Use the user fields from the item schema as the request args in route\nregistration\n\n  (props @joehoyle, [#1109][gh-1109])\n\n- Build the array of args for /wp/posts from the allowed query vars\n\n  (props @joehoyle, [#1108][gh-1108])\n\n- Show all the invalid param errors at once\n\n  (props @joehoyle, [#1131][gh-1131])\n\n- Readonly attribute in schema to exclude from args array\n\n  (props @joehoyle, [#1133][gh-1133])\n\n- Use the `required` flags from the schema for CREATE post\n\n  (props @joehoyle, [#1132][gh-1132])\n\n- Only return 201 on Create. Update should be 200\n\n  (props @danielbachhuber, [#1142][gh-1142])\n\n- Convert meta endpoints to new-style\n\n  (props @rmccue, @rachelbaker, [#960][gh-960])\n\n- Specific error codes for permissions failures\n\n  (props @joehoyle, [#1148][gh-1148])\n\n[View all changes](https://github.com/WP-API/WP-API/compare/1.2.1...2.0-beta1)\n[gh-347]: https://github.com/WP-API/WP-API/issues/347\n[gh-378]: https://github.com/WP-API/WP-API/issues/378\n[gh-401]: https://github.com/WP-API/WP-API/issues/401\n[gh-415]: https://github.com/WP-API/WP-API/issues/415\n[gh-448]: https://github.com/WP-API/WP-API/issues/448\n[gh-474]: https://github.com/WP-API/WP-API/issues/474\n[gh-481]: https://github.com/WP-API/WP-API/issues/481\n[gh-524]: https://github.com/WP-API/WP-API/issues/524\n[gh-528]: https://github.com/WP-API/WP-API/issues/528\n[gh-543]: https://github.com/WP-API/WP-API/issues/543\n[gh-546]: https://github.com/WP-API/WP-API/issues/546\n[gh-548]: https://github.com/WP-API/WP-API/issues/548\n[gh-549]: https://github.com/WP-API/WP-API/issues/549\n[gh-550]: https://github.com/WP-API/WP-API/issues/550\n[gh-556]: https://github.com/WP-API/WP-API/issues/556\n[gh-563]: https://github.com/WP-API/WP-API/issues/563\n[gh-564]: https://github.com/WP-API/WP-API/issues/564\n[gh-565]: https://github.com/WP-API/WP-API/issues/565\n[gh-566]: https://github.com/WP-API/WP-API/issues/566\n[gh-567]: https://github.com/WP-API/WP-API/issues/567\n[gh-570]: https://github.com/WP-API/WP-API/issues/570\n[gh-573]: https://github.com/WP-API/WP-API/issues/573\n[gh-575]: https://github.com/WP-API/WP-API/issues/575\n[gh-579]: https://github.com/WP-API/WP-API/issues/579\n[gh-586]: https://github.com/WP-API/WP-API/issues/586\n[gh-588]: https://github.com/WP-API/WP-API/issues/588\n[gh-589]: https://github.com/WP-API/WP-API/issues/589\n[gh-591]: https://github.com/WP-API/WP-API/issues/591\n[gh-595]: https://github.com/WP-API/WP-API/issues/595\n[gh-602]: https://github.com/WP-API/WP-API/issues/602\n[gh-603]: https://github.com/WP-API/WP-API/issues/603\n[gh-612]: https://github.com/WP-API/WP-API/issues/612\n[gh-619]: https://github.com/WP-API/WP-API/issues/619\n[gh-620]: https://github.com/WP-API/WP-API/issues/620\n[gh-626]: https://github.com/WP-API/WP-API/issues/626\n[gh-628]: https://github.com/WP-API/WP-API/issues/628\n[gh-630]: https://github.com/WP-API/WP-API/issues/630\n[gh-637]: https://github.com/WP-API/WP-API/issues/637\n[gh-638]: https://github.com/WP-API/WP-API/issues/638\n[gh-643]: https://github.com/WP-API/WP-API/issues/643\n[gh-644]: https://github.com/WP-API/WP-API/issues/644\n[gh-645]: https://github.com/WP-API/WP-API/issues/645\n[gh-647]: https://github.com/WP-API/WP-API/issues/647\n[gh-648]: https://github.com/WP-API/WP-API/issues/648\n[gh-649]: https://github.com/WP-API/WP-API/issues/649\n[gh-652]: https://github.com/WP-API/WP-API/issues/652\n[gh-654]: https://github.com/WP-API/WP-API/issues/654\n[gh-656]: https://github.com/WP-API/WP-API/issues/656\n[gh-659]: https://github.com/WP-API/WP-API/issues/659\n[gh-661]: https://github.com/WP-API/WP-API/issues/661\n[gh-664]: https://github.com/WP-API/WP-API/issues/664\n[gh-666]: https://github.com/WP-API/WP-API/issues/666\n[gh-673]: https://github.com/WP-API/WP-API/issues/673\n[gh-675]: https://github.com/WP-API/WP-API/issues/675\n[gh-676]: https://github.com/WP-API/WP-API/issues/676\n[gh-678]: https://github.com/WP-API/WP-API/issues/678\n[gh-681]: https://github.com/WP-API/WP-API/issues/681\n[gh-682]: https://github.com/WP-API/WP-API/issues/682\n[gh-683]: https://github.com/WP-API/WP-API/issues/683\n[gh-684]: https://github.com/WP-API/WP-API/issues/684\n[gh-685]: https://github.com/WP-API/WP-API/issues/685\n[gh-692]: https://github.com/WP-API/WP-API/issues/692\n[gh-693]: https://github.com/WP-API/WP-API/issues/693\n[gh-696]: https://github.com/WP-API/WP-API/issues/696\n[gh-700]: https://github.com/WP-API/WP-API/issues/700\n[gh-701]: https://github.com/WP-API/WP-API/issues/701\n[gh-705]: https://github.com/WP-API/WP-API/issues/705\n[gh-707]: https://github.com/WP-API/WP-API/issues/707\n[gh-712]: https://github.com/WP-API/WP-API/issues/712\n[gh-714]: https://github.com/WP-API/WP-API/issues/714\n[gh-715]: https://github.com/WP-API/WP-API/issues/715\n[gh-722]: https://github.com/WP-API/WP-API/issues/722\n[gh-728]: https://github.com/WP-API/WP-API/issues/728\n[gh-730]: https://github.com/WP-API/WP-API/issues/730\n[gh-731]: https://github.com/WP-API/WP-API/issues/731\n[gh-736]: https://github.com/WP-API/WP-API/issues/736\n[gh-737]: https://github.com/WP-API/WP-API/issues/737\n[gh-741]: https://github.com/WP-API/WP-API/issues/741\n[gh-742]: https://github.com/WP-API/WP-API/issues/742\n[gh-743]: https://github.com/WP-API/WP-API/issues/743\n[gh-744]: https://github.com/WP-API/WP-API/issues/744\n[gh-750]: https://github.com/WP-API/WP-API/issues/750\n[gh-753]: https://github.com/WP-API/WP-API/issues/753\n[gh-758]: https://github.com/WP-API/WP-API/issues/758\n[gh-761]: https://github.com/WP-API/WP-API/issues/761\n[gh-774]: https://github.com/WP-API/WP-API/issues/774\n[gh-786]: https://github.com/WP-API/WP-API/issues/786\n[gh-794]: https://github.com/WP-API/WP-API/issues/794\n[gh-805]: https://github.com/WP-API/WP-API/issues/805\n[gh-807]: https://github.com/WP-API/WP-API/issues/807\n[gh-815]: https://github.com/WP-API/WP-API/issues/815\n[gh-820]: https://github.com/WP-API/WP-API/issues/820\n[gh-823]: https://github.com/WP-API/WP-API/issues/823\n[gh-826]: https://github.com/WP-API/WP-API/issues/826\n[gh-831]: https://github.com/WP-API/WP-API/issues/831\n[gh-832]: https://github.com/WP-API/WP-API/issues/832\n[gh-836]: https://github.com/WP-API/WP-API/issues/836\n[gh-838]: https://github.com/WP-API/WP-API/issues/838\n[gh-841]: https://github.com/WP-API/WP-API/issues/841\n[gh-842]: https://github.com/WP-API/WP-API/issues/842\n[gh-844]: https://github.com/WP-API/WP-API/issues/844\n[gh-845]: https://github.com/WP-API/WP-API/issues/845\n[gh-849]: https://github.com/WP-API/WP-API/issues/849\n[gh-853]: https://github.com/WP-API/WP-API/issues/853\n[gh-854]: https://github.com/WP-API/WP-API/issues/854\n[gh-870]: https://github.com/WP-API/WP-API/issues/870\n[gh-872]: https://github.com/WP-API/WP-API/issues/872\n[gh-874]: https://github.com/WP-API/WP-API/issues/874\n[gh-876]: https://github.com/WP-API/WP-API/issues/876\n[gh-879]: https://github.com/WP-API/WP-API/issues/879\n[gh-883]: https://github.com/WP-API/WP-API/issues/883\n[gh-885]: https://github.com/WP-API/WP-API/issues/885\n[gh-888]: https://github.com/WP-API/WP-API/issues/888\n[gh-891]: https://github.com/WP-API/WP-API/issues/891\n[gh-896]: https://github.com/WP-API/WP-API/issues/896\n[gh-897]: https://github.com/WP-API/WP-API/issues/897\n[gh-902]: https://github.com/WP-API/WP-API/issues/902\n[gh-904]: https://github.com/WP-API/WP-API/issues/904\n[gh-905]: https://github.com/WP-API/WP-API/issues/905\n[gh-906]: https://github.com/WP-API/WP-API/issues/906\n[gh-907]: https://github.com/WP-API/WP-API/issues/907\n[gh-908]: https://github.com/WP-API/WP-API/issues/908\n[gh-909]: https://github.com/WP-API/WP-API/issues/909\n[gh-910]: https://github.com/WP-API/WP-API/issues/910\n[gh-911]: https://github.com/WP-API/WP-API/issues/911\n[gh-913]: https://github.com/WP-API/WP-API/issues/913\n[gh-914]: https://github.com/WP-API/WP-API/issues/914\n[gh-917]: https://github.com/WP-API/WP-API/issues/917\n[gh-919]: https://github.com/WP-API/WP-API/issues/919\n[gh-923]: https://github.com/WP-API/WP-API/issues/923\n[gh-931]: https://github.com/WP-API/WP-API/issues/931\n[gh-933]: https://github.com/WP-API/WP-API/issues/933\n[gh-935]: https://github.com/WP-API/WP-API/issues/935\n[gh-936]: https://github.com/WP-API/WP-API/issues/936\n[gh-937]: https://github.com/WP-API/WP-API/issues/937\n[gh-941]: https://github.com/WP-API/WP-API/issues/941\n[gh-946]: https://github.com/WP-API/WP-API/issues/946\n[gh-947]: https://github.com/WP-API/WP-API/issues/947\n[gh-951]: https://github.com/WP-API/WP-API/issues/951\n[gh-953]: https://github.com/WP-API/WP-API/issues/953\n[gh-955]: https://github.com/WP-API/WP-API/issues/955\n[gh-958]: https://github.com/WP-API/WP-API/issues/958\n[gh-959]: https://github.com/WP-API/WP-API/issues/959\n[gh-960]: https://github.com/WP-API/WP-API/issues/960\n[gh-966]: https://github.com/WP-API/WP-API/issues/966\n[gh-967]: https://github.com/WP-API/WP-API/issues/967\n[gh-968]: https://github.com/WP-API/WP-API/issues/968\n[gh-970]: https://github.com/WP-API/WP-API/issues/970\n[gh-971]: https://github.com/WP-API/WP-API/issues/971\n[gh-973]: https://github.com/WP-API/WP-API/issues/973\n[gh-985]: https://github.com/WP-API/WP-API/issues/985\n[gh-987]: https://github.com/WP-API/WP-API/issues/987\n[gh-989]: https://github.com/WP-API/WP-API/issues/989\n[gh-996]: https://github.com/WP-API/WP-API/issues/996\n[gh-999]: https://github.com/WP-API/WP-API/issues/999\n[gh-1000]: https://github.com/WP-API/WP-API/issues/1000\n[gh-1006]: https://github.com/WP-API/WP-API/issues/1006\n[gh-1026]: https://github.com/WP-API/WP-API/issues/1026\n[gh-1028]: https://github.com/WP-API/WP-API/issues/1028\n[gh-1033]: https://github.com/WP-API/WP-API/issues/1033\n[gh-1034]: https://github.com/WP-API/WP-API/issues/1034\n[gh-1039]: https://github.com/WP-API/WP-API/issues/1039\n[gh-1042]: https://github.com/WP-API/WP-API/issues/1042\n[gh-1043]: https://github.com/WP-API/WP-API/issues/1043\n[gh-1044]: https://github.com/WP-API/WP-API/issues/1044\n[gh-1046]: https://github.com/WP-API/WP-API/issues/1046\n[gh-1048]: https://github.com/WP-API/WP-API/issues/1048\n[gh-1049]: https://github.com/WP-API/WP-API/issues/1049\n[gh-1050]: https://github.com/WP-API/WP-API/issues/1050\n[gh-1051]: https://github.com/WP-API/WP-API/issues/1051\n[gh-1052]: https://github.com/WP-API/WP-API/issues/1052\n[gh-1053]: https://github.com/WP-API/WP-API/issues/1053\n[gh-1054]: https://github.com/WP-API/WP-API/issues/1054\n[gh-1059]: https://github.com/WP-API/WP-API/issues/1059\n[gh-1064]: https://github.com/WP-API/WP-API/issues/1064\n[gh-1066]: https://github.com/WP-API/WP-API/issues/1066\n[gh-1091]: https://github.com/WP-API/WP-API/issues/1091\n[gh-1097]: https://github.com/WP-API/WP-API/issues/1097\n[gh-1098]: https://github.com/WP-API/WP-API/issues/1098\n[gh-1103]: https://github.com/WP-API/WP-API/issues/1103\n[gh-1104]: https://github.com/WP-API/WP-API/issues/1104\n[gh-1105]: https://github.com/WP-API/WP-API/issues/1105\n[gh-1106]: https://github.com/WP-API/WP-API/issues/1106\n[gh-1108]: https://github.com/WP-API/WP-API/issues/1108\n[gh-1109]: https://github.com/WP-API/WP-API/issues/1109\n[gh-1110]: https://github.com/WP-API/WP-API/issues/1110\n[gh-1111]: https://github.com/WP-API/WP-API/issues/1111\n[gh-1112]: https://github.com/WP-API/WP-API/issues/1112\n[gh-1115]: https://github.com/WP-API/WP-API/issues/1115\n[gh-1116]: https://github.com/WP-API/WP-API/issues/1116\n[gh-1117]: https://github.com/WP-API/WP-API/issues/1117\n[gh-1121]: https://github.com/WP-API/WP-API/issues/1121\n[gh-1122]: https://github.com/WP-API/WP-API/issues/1122\n[gh-1123]: https://github.com/WP-API/WP-API/issues/1123\n[gh-1129]: https://github.com/WP-API/WP-API/issues/1129\n[gh-1131]: https://github.com/WP-API/WP-API/issues/1131\n[gh-1132]: https://github.com/WP-API/WP-API/issues/1132\n[gh-1133]: https://github.com/WP-API/WP-API/issues/1133\n[gh-1134]: https://github.com/WP-API/WP-API/issues/1134\n[gh-1137]: https://github.com/WP-API/WP-API/issues/1137\n[gh-1142]: https://github.com/WP-API/WP-API/issues/1142\n[gh-1148]: https://github.com/WP-API/WP-API/issues/1148\n\n## 1.2.1\n\n- Fix information disclosure security vulnerability.\n\n  Unauthenticated users could access revisions of published and unpublished posts. Revisions are now only accessible to authenticated users with permission to edit the revision's post.\n\n  Reported by @chredd on 2015-04-09.\n\n## 1.2.0\n\n- Add handling for Cross-Origin Resource Sharing (CORS) OPTIONS requests.\n\n  Preflighted requests (using the OPTIONS method) include the headers\n  `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods`, and\n  `Access-Control-Allow-Credentials` in the response, if the HTTP origin is\n  set.\n\n  (props @rmccue, [#281][gh-281])\n\n- Allow overriding full requests.\n\n  The `json_pre_dispatch` filter allows a request to be hijacked before it is\n  dispatched. Hijacked requests can be anything a normal endpoint can return.\n\n  (props @rmccue, [#281][gh-281])\n\n- Check for JSON encoding/decoding errors.\n\n  Returns the last error (if any) occurred during the last JSON encoding or\n  decoding operation.\n\n  (props @joshkadis, @rmccue, [#461][gh-461])\n\n- Add filtering to the terms collection endpoint.\n\n  Available filter arguments are based on the `get_terms()` function. Example:\n  `/taxonomies/category/terms?filter[number]=10` would limit the response to 10\n  category terms.\n\n\t(props @mauteri, [#401][gh-401], [#347][gh-347])\n\n- Add handling for the `role` parameter when creating or updating a user.\n\n  Allow users to be created or updated with a provided `role`.\n\n  (props @pippinsplugins, [#392][gh-392], [#335][gh-335])\n\n- Add handling for the `post_id` parameter when creating media.\n\n  Allow passing the `post_id` parameter to associate a new media item with\n  a post.\n\n  (props @pkevan, [#294][gh-294])\n\n- Handle route matching for `-` in taxonomy and terms.\n\n  Previously the regular expression used to match taxonomy and term names did\n  not support names with dashes.\n\n  (props @EdHurtig, @evansobkowicz, [#410][gh-410])\n\n- Handle JSONP callback matching for `.` in the function name.\n\n  Previously the regular expression used to match JSONP callback functions did\n  not support names with periods.\n\n  (props @codonnell822, [#455][gh-455])\n\n- Fix the Content-Type header for JSONP requests.\n\n  Previously JSONP requests sent the incorrect `application/json` Content-Type\n  header with the response.  This would result in an error if strict MIME\n  checking was enabled. The Content-Type header was corrected to\n  `application/javascript` for JSONP responses.\n\n  (props @simonlampen, [#380][gh-380])\n\n- Add `$context` parameter to `json_prepare_term` filter.\n\n  Terms responses can now be modified based on the `context` parameter of the\n  request.\n\n  (props @traversal, [#316][gh-316])\n\n- Move the JavaScript client library into the plugin.\n\n  Previously, the `wp-api.js` file was a separate repository. The JavaScript\n  client has moved back into the plugin to coordinate code changes.\n\n  (props @tlovett1, [#730][gh-730])\n\n- Always return an object for media sizes\n\n  The media sizes value should always be an object even when empty. Previously,\n  if a media item did not have any sizes set, an empty array was returned.\n\n  **Compatibility warning**: Clients should be prepared to accept an empty\n  object as a value for media sizes.\n\n  (props @maxcutler, [#300][gh-300])\n\n- Give top-level posts a `null` parent value.\n\n  For date type consistency, post parent property should be `null`. Previously,\n  parent-less posts returned `0` for parent.\n\n  **Compatibility warning**: Clients should be prepared to accept `null` as a\n  value for post parent.\n\n  (props @maxcutler, [#391][gh-391])\n\n- Move permission checks out of `WP_JSON_Posts`.\n\n  Introduce `json_check_post_permission()` function to allow post object\n  capability checks to be used outside the `WP_JSON_Posts` class.\n\n  **Deprecation warning:** Calling `WP_JSON_Posts::check_read_permission` and\n  `WP_JSON_Posts::check_edit_permission` is now deprecated.\n\n  (props @rachelbaker, [#486][gh-486], [#378][gh-378])\n\n- Split comment endpoints into separate class.\n\n  All comment handling has moved to the `WP_JSON_Comments` class.\n\n  **Deprecation warning:** Calling `WP_JSON_Posts::get_comments`,\n  `WP_JSON_Posts::get_comment`, `WP_JSON_Posts::delete_comment`, and\n  `WP_JSON_Posts::prepare_comment` is now deprecated.\n\n  (props @whyisjake, @rmccue, @rachelbaker, [#378][gh-378])\n\n- Split meta endpoints into separate class.\n\n  All post meta handling has moved to the new `WP_JSON_Meta_Posts` class.\n\n  **Deprecation warning:** Calling `WP_JSON_Posts::get_all_meta`,\n  `WP_JSON_Posts::get_meta`, `WP_JSON_Posts::update_meta`,\n  `WP_JSON_Posts::add_meta`, `WP_JSON_Posts::delete_meta`,\n  `WP_JSON_Posts::prepare_meta`, and `WP_JSON_Posts::is_valid_meta_data` is\n  now deprecated.\n\n  (props @rmccue, @rachelbaker, [#358][gh-358], [#474][gh-474])\n\n- Rename internal create methods.\n\n  **Deprecation warning:** Calling `WP_JSON_Posts::new_post`,\n  `WP_JSON_CustomPostType::new_post` and `WP_JSON_Posts::new_post`\n  is now deprecated.\n\n  (props @rachelbaker, @rmccue, [#374][gh-374], [#377][gh-377], [#376][gh-376])\n\n- Fix discrepancies in edit and create posts documentation examples.\n\n  Corrected the edit and create posts code examples in the Getting Started\n  section.  The new post example was updated to include the required\n  `content_raw` parameter. The new and edit posts examples were updated to use\n  a correct date parameter.\n\n  (props @rachelbaker, [#305][gh-305])\n\n- Update the cookie authentication documentation examples.\n\n  With 1.1 the localized JavaScript object for `wp-api.js` changed to\n  `WP_API_Settings`. This updates the Authentication section documentation\n  nonce example to use the updated object name.\n\n  (props @rachelbaker, [#321][gh-321])\n\n- Add flexibility and multisite support to unit tests.\n\n  Tests can be run from any WordPress install, and are not limited to only as\n  a plugin installed within a WordPress.org develop checkout. Unit tests are\n  now run against a multisite installation.\n\n  (props @danielbachhuber, [#397][gh-397])\n\n- Add `taxonomy` slug to the term response.\n\n  (props @kalenjohnson, [#481][gh-481])\n\n- Fix error when getting child comment.\n\n  Previously an error occurred when a requested comment had a parent.\n\n  (props @EdHurtig, [#413][gh-413], [#411][gh-411])\n\n- Parse query strings before returning a JSON decode error.\n\n  (props @jtsternberg, [#499][gh-499])\n\n- Typecast the user ID parameter to be an integer for the `/users/{ID}` route.\n\n  (props @dimadin, [#333][gh-333])\n\n- Confirm a given JSONP callback is a string.\n\n  (props @ircrash, @rmccue, [#405][gh-405])\n\n- Register the JavaScript client in the admin.\n\n  (props @tlovett1, [#473][gh-473])\n\n- Remove duplicate error checks on post ids.\n\n  (props @danielbachhuber, [#271][gh-271])\n\n- Update documentation link references to wp-api.org.\n\n  (props @pollyplummer, [#320][gh-320])\n\n- Update documentation to note routes needing authentication.\n\n  (props @kellbot, [#402][gh-402], [#309][gh-309])\n\n- Correct Post route documentation filter parameters.\n\n  (props @modemlooper, @rachelbaker, @rmccue, [#357][gh-357], [#462][gh-462])\n\n- Update taxonomy route documentation with correct paths.\n\n  (props @davidbhayes, [#364][gh-364], [#355][gh-355])\n\n- Remove references to legacy `$fields` parameter.\n\n  (props @JDGrimes, [#326][gh-326])\n\n- Alter readme installation steps to use wp-cli for plugin and permalink setup.\n\n  (props @kadamwhite, [#390][gh-390])\n\n- Add steps to readme for executing tests with `vagrant ssh -c`.\n\n  (props @kadamwhite, [#416][gh-416])\n\n- Update readme to include provision step for testing suite.\n\n  (props @ironpaperweight, [#396][gh-396])\n\n- Update readme Getting Started link.\n\n  (props @NikV, [#519][gh-519])\n\n- Update readme Chassis repository links.\n\n  (props @Japh, [#505][gh-505])\n\n- Clean-up of `docs` folder.\n\n  (props @pollyplummer, [#441][gh-441])\n\n- Documentation audit for plugin.php file.\n\n  (props @DrewAPicture, [#293][gh-293])\n\n- Rename tests to match class file naming.\n\n  (props @danielbachhuber, @rmccue, [#359][gh-359])\n\n- Add license.txt file with license terms.\n\n  (props @rachelbaker, [#393][gh-393], [#384][gh-384])\n\n- Fix test_root when using WordPress.org developer checkout.\n\n  (props @markoheijnen, [#437][gh-437])\n\n[View all changes](https://github.com/rmccue/WP-API/compare/1.1.1...1.2)\n\n[gh-271]: https://github.com/WP-API/WP-API/issues/271\n[gh-281]: https://github.com/WP-API/WP-API/issues/281\n[gh-293]: https://github.com/WP-API/WP-API/issues/293\n[gh-294]: https://github.com/WP-API/WP-API/issues/294\n[gh-300]: https://github.com/WP-API/WP-API/issues/300\n[gh-305]: https://github.com/WP-API/WP-API/issues/305\n[gh-309]: https://github.com/WP-API/WP-API/issues/309\n[gh-316]: https://github.com/WP-API/WP-API/issues/316\n[gh-320]: https://github.com/WP-API/WP-API/issues/320\n[gh-321]: https://github.com/WP-API/WP-API/issues/321\n[gh-326]: https://github.com/WP-API/WP-API/issues/326\n[gh-333]: https://github.com/WP-API/WP-API/issues/333\n[gh-333]: https://github.com/WP-API/WP-API/issues/333\n[gh-335]: https://github.com/WP-API/WP-API/issues/335\n[gh-347]: https://github.com/WP-API/WP-API/issues/347\n[gh-355]: https://github.com/WP-API/WP-API/issues/355\n[gh-357]: https://github.com/WP-API/WP-API/issues/357\n[gh-358]: https://github.com/WP-API/WP-API/issues/358\n[gh-359]: https://github.com/WP-API/WP-API/issues/359\n[gh-364]: https://github.com/WP-API/WP-API/issues/364\n[gh-374]: https://github.com/WP-API/WP-API/issues/374\n[gh-376]: https://github.com/WP-API/WP-API/issues/376\n[gh-377]: https://github.com/WP-API/WP-API/issues/377\n[gh-378]: https://github.com/WP-API/WP-API/issues/378\n[gh-380]: https://github.com/WP-API/WP-API/issues/380\n[gh-384]: https://github.com/WP-API/WP-API/issues/384\n[gh-390]: https://github.com/WP-API/WP-API/issues/390\n[gh-391]: https://github.com/WP-API/WP-API/issues/391\n[gh-392]: https://github.com/WP-API/WP-API/issues/392\n[gh-393]: https://github.com/WP-API/WP-API/issues/393\n[gh-396]: https://github.com/WP-API/WP-API/issues/396\n[gh-397]: https://github.com/WP-API/WP-API/issues/397\n[gh-401]: https://github.com/WP-API/WP-API/issues/401\n[gh-402]: https://github.com/WP-API/WP-API/issues/402\n[gh-405]: https://github.com/WP-API/WP-API/issues/405\n[gh-410]: https://github.com/WP-API/WP-API/issues/410\n[gh-411]: https://github.com/WP-API/WP-API/issues/411\n[gh-413]: https://github.com/WP-API/WP-API/issues/413\n[gh-416]: https://github.com/WP-API/WP-API/issues/416\n[gh-437]: https://github.com/WP-API/WP-API/issues/437\n[gh-438]: https://github.com/WP-API/WP-API/issues/438\n[gh-441]: https://github.com/WP-API/WP-API/issues/441\n[gh-455]: https://github.com/WP-API/WP-API/issues/455\n[gh-458]: https://github.com/WP-API/WP-API/issues/458\n[gh-461]: https://github.com/WP-API/WP-API/issues/461\n[gh-462]: https://github.com/WP-API/WP-API/issues/462\n[gh-473]: https://github.com/WP-API/WP-API/issues/473\n[gh-474]: https://github.com/WP-API/WP-API/issues/474\n[gh-481]: https://github.com/WP-API/WP-API/issues/481\n[gh-486]: https://github.com/WP-API/WP-API/issues/486\n[gh-499]: https://github.com/WP-API/WP-API/issues/499\n[gh-505]: https://github.com/WP-API/WP-API/issues/505\n[gh-519]: https://github.com/WP-API/WP-API/issues/519\n[gh-524]: https://github.com/WP-API/WP-API/issues/524\n[gh-528]: https://github.com/WP-API/WP-API/issues/528\n[gh-595]: https://github.com/WP-API/WP-API/issues/595\n[gh-730]: https://github.com/WP-API/WP-API/issues/730\n[gh-933]: https://github.com/WP-API/WP-API/issues/933\n[gh-985]: https://github.com/WP-API/WP-API/issues/985\n\n## 1.1.1\n\n- Mitigate Flash CSRF exploit\n\n  Using the API's JSONP support, it's possible to control the first bytes of the\n  response sent to the browser. Combining this with an ASCII-encoded SWF allows\n  arbitrary SWFs to be served from the site, allowing bypassing the same-origin\n  policy built in to browsers.\n\n  While the API includes CSRF protection and is not directly vulnerable, this\n  can be used to bypass other browser origin controls.\n\n  Reported by @iandunn on 2014-07-10.\n\n  (props @iandunn, @rmccue, [#356][gh-356])\n\n[View all changes](https://github.com/rmccue/WP-API/compare/1.0...1.1)\n\n[gh-356]: https://github.com/WP-API/WP-API/issues/356\n\n## 1.1\n\n- Add new routes for taxonomies and terms.\n\n  Taxonomies and terms have now been moved from the `/posts/types/<type>`\n  namespace to global routes: `/taxonomies`, `/taxonomies/<tax>`,\n  `/taxonomies/<tax>/terms` and `/taxonomies/<tax>/terms/<term>`\n\n  Test coverage for taxonomy endpoints has also been increased to 100%.\n\n  **Deprecation warning**: The `/posts/types/<type>/taxonomies` endpoint (and\n  sub-endpoints with the same prefix) have been deprecated in favour of the new\n  endpoints. These deprecated endpoints will now return a\n  `X-WP-DeprecatedFunction` header indicating that the endpoint should not be\n  used for new development, but will continue to work in the future.\n\n  (props @kadamwhite, @rachelbaker, @rmccue, [#198][gh-198], [#211][gh-211])\n\n- Allow customizing the API resources prefix\n\n  The API base (typically `wp-json/`) can now be customized to a different\n  prefix using the `json_url_prefix` filter. Note that rewrites will need to be\n  flushed manually after changing this.\n\n  (props @ericandrewlewis, @rmccue, [#104][gh-104], [#244][gh-244], [#278][gh-278])\n\n- Give `null` as date for draft posts.\n\n  Draft posts would previously return \"0000-00-00 00:00:00\" or\n  \"1970-01-01T00:00:00\", as draft posts are not assigned a publish date. The API\n  now returns `null` where a date is not available.\n\n  **Compatibility warning**: Clients should be prepared to accept `null` as a\n  value for date/time fields, and treat it as if no value is set.\n\n  (props @rmccue, [#229][gh-229], [#230][gh-230])\n\n- Fix errors with excerpt.\n\n  Posts without excerpts could previously return nonsense strings, excerpts from\n  other posts, or cause internal PHP errors. Posts without excerpts will now\n  always return an excerpt, typically automatically generated from the post\n  content.\n\n  The `excerpt_raw` field was added to the edit context on posts. This field\n  contains the raw excerpt data saved for the post, including empty\n  string values.\n\n  (props @rmccue, [#222][gh-226], [#226][gh-226])\n\n- Only expose email for edit context.\n\n  User email addresses are now only exposed for `context=edit`, which requires\n  the `edit_users` permission (not required for the current user).\n\n  The email address field will now return `false` instead of a string if the\n  field is not exposed.\n\n  (props @pkevan, @rmccue, [#290][gh-290], [#296][gh-296])\n\n- Correct password-protected post handling.\n\n  Password-protected posts could previously be exposed to all users, however\n  could also have broken behaviour with excerpts. Password-protected posts are\n  now hidden to unauthenticated users, while content and excerpts are shown\n  correctly for the `edit` context.\n\n  (Note that hiding password-protected posts is intended to be a temporary\n  measure, and will likely change in the future.)\n\n  (props @rmccue, [#286][gh-286], [#313][gh-313])\n\n- Add documentation on authentication methods.\n\n  Full documentation on [authentication](https://github.com/WP-API/WP-API/blob/master/docs/authentication.md)\n  is now available. This documentation explains the difference between the\n  various available authentication methods, and notes which should be used.\n\n  (props @rmccue, [#242][gh-242])\n\n- Include new client JS from github.io\n\n  The WP-API Javascript library is now loaded dynamically from\n  `wp-api.github.io` to ensure it is always up-to-date.\n\n  (props @tlovett1, [#179][gh-179], [#240][gh-240])\n\n- Don't allow setting the modification date on post creation/update.\n\n  As it turns out, WP core doesn't allow us to set this, so this was previously\n  a no-op anyway. Discovered during test coverage phase.\n\n  (props @rachelbaker, @rmccue, [#285][gh-285], [#288][gh-288])\n\n- Check post parent correctly on insertion.\n\n  Posts could previously be added with an invalid parent ID. These IDs are now\n  checked to ensure the post exists.\n\n  (props @rmccue, [#228][gh-228], [#231][gh-231])\n\n- Make sure the type is actually evaluated for `json_prepare_${type}` filter.\n\n  This value was previously not interpolated correctly, due to the use of the\n  single-quoted string type.\n\n  (props @danielbachhuber, [#266][gh-266])\n\n- Return `WP_Error` instead of array of empty objects for a revisions\n  permissions error.\n\n  Previously, when trying to access post revisions without correct permissions,\n  a JSON list of internal error objects would be returned. This has been\n  corrected to return a standard API error instead.\n\n  (props @rachelbaker, @tlovett1, [#251][gh-251], [#276][gh-276])\n\n- Flip user parameters check for insert/update.\n\n  Previously, you could add a user without specifying username/password/email,\n  but couldn't update a user without those parameters. The logic has been\n  inverted here instead.\n\n  (props @rmccue, [#221][gh-221], [#289][gh-289])\n\n- Add revision endpoints tests\n\n  (props @danielbachhuber, @rachelbaker, @rmccue, [#275][gh-275], [#277][gh-277], [#284][gh-284], [#279][gh-279])\n\n- Add post endpoint testing\n\n  Now at >54% coverage for the whole class, and >80% for the main methods. This\n  figure will continue to rise over the next few releases.\n\n  (props @rachelbaker, @rmccue, [#99][gh-99])\n\n- Separate helper functions into global namespace.\n\n  `WP_JSON_Server::get_timezone()`, `WP_JSON_Server::get_date_with_gmt()`,\n  `WP_JSON_Server::get_avatar_url()` and ``WP_JSON_Server::parse_date()` have\n  all been moved into the global namespace to decouple them from the server\n  class.\n\n  **Deprecation warning**: These methods have been deprecated. The new\n  `json_get_timezone()`, `json_get_date_with_gmt()`, `json_get_avatar_url()` and\n  `json_parse_date()` methods should now be used instead.\n\n  (props @rmccue, [#185][gh-185], [#298][gh-298])\n\n- Re-order Users and Media routes documentation based on CRUD order\n\n  (props @rachelbaker, [#214][gh-214])\n\n- Update Post route documentation to provide more detail for data parameter\n\n  (props @rachelbaker, [#212][gh-212])\n\n- Correct documentation typo (\"inforcement\" -> \"enforcement\").\n\n  (props @ericandrewlewis, [#236][gh-236])\n\n- Coding Standards audit\n\n  (props @DrewAPicture, [#235][gh-235])\n\n- Add comparison documentation.\n\n  (props @rachelbaker, @rmccue, [#217][gh-225], [#225][gh-225])\n\n- `json_url` filter call should be passed `$scheme`\n\n  (props @ericandrewlewis, [#243][gh-243])\n\n- Set `class-jsonserializable.php` file mode to 644.\n\n  (props @jeremyfelt, [#255][gh-255])\n\n- Remove unneeded \"which\" in implementation doc.\n\n  (props @JDGrimes, [#254][gh-254])\n\n- Fix a copy/paste error in schema doc.\n\n  (props @JDGrimes, [#253][gh-253])\n\n- Correct reference link in example schema.\n\n  (props @danielbachhuber, [#258][gh-258])\n\n- Add missing post formats to post schema documentation.\n\n  (props @danielbachhuber, [#260][gh-260])\n\n- Ensure we always use \"public\" on public methods.\n\n  (props @danielbachhuber, [#268][gh-268])\n\n- Ensure we don't cause a PHP error if a post does not have revisions.\n\n  (props @rmccue, [#227][gh-227])\n\n- Add note to where upload_files cap comes from\n\n  (props @pkevan, [#282][gh-282])\n\n- Add handling of `sticky` property when creating or editing posts.\n\n  (props @rachelbaker, [#218][gh-218])\n\n- Update post route endpoint docs to include details on `post_meta` handling.\n\n  (props @rachelbaker, [#213][gh-213])\n\n- Update main readme file to better describe the project.\n\n  (props @rmccue, [#303][gh-303])\n\n- Fix `--data-binary` cURL option in documentation\n\n  (props @Pezzab, @rachelbaker, @rmccue, [#283][gh-283], [#304][gh-304])\n\n[View all changes](https://github.com/rmccue/WP-API/compare/1.0...1.1)\n\n[gh-99]: https://github.com/WP-API/WP-API/issues/99\n[gh-104]: https://github.com/WP-API/WP-API/issues/104\n[gh-179]: https://github.com/WP-API/WP-API/issues/179\n[gh-185]: https://github.com/WP-API/WP-API/issues/185\n[gh-198]: https://github.com/WP-API/WP-API/issues/198\n[gh-211]: https://github.com/WP-API/WP-API/issues/211\n[gh-212]: https://github.com/WP-API/WP-API/issues/212\n[gh-213]: https://github.com/WP-API/WP-API/issues/213\n[gh-214]: https://github.com/WP-API/WP-API/issues/214\n[gh-218]: https://github.com/WP-API/WP-API/issues/218\n[gh-221]: https://github.com/WP-API/WP-API/issues/221\n[gh-225]: https://github.com/WP-API/WP-API/issues/225\n[gh-225]: https://github.com/WP-API/WP-API/issues/225\n[gh-226]: https://github.com/WP-API/WP-API/issues/226\n[gh-226]: https://github.com/WP-API/WP-API/issues/226\n[gh-227]: https://github.com/WP-API/WP-API/issues/227\n[gh-228]: https://github.com/WP-API/WP-API/issues/228\n[gh-229]: https://github.com/WP-API/WP-API/issues/229\n[gh-230]: https://github.com/WP-API/WP-API/issues/230\n[gh-231]: https://github.com/WP-API/WP-API/issues/231\n[gh-235]: https://github.com/WP-API/WP-API/issues/235\n[gh-236]: https://github.com/WP-API/WP-API/issues/236\n[gh-240]: https://github.com/WP-API/WP-API/issues/240\n[gh-242]: https://github.com/WP-API/WP-API/issues/242\n[gh-243]: https://github.com/WP-API/WP-API/issues/243\n[gh-244]: https://github.com/WP-API/WP-API/issues/244\n[gh-251]: https://github.com/WP-API/WP-API/issues/251\n[gh-253]: https://github.com/WP-API/WP-API/issues/253\n[gh-254]: https://github.com/WP-API/WP-API/issues/254\n[gh-255]: https://github.com/WP-API/WP-API/issues/255\n[gh-258]: https://github.com/WP-API/WP-API/issues/258\n[gh-260]: https://github.com/WP-API/WP-API/issues/260\n[gh-266]: https://github.com/WP-API/WP-API/issues/266\n[gh-268]: https://github.com/WP-API/WP-API/issues/268\n[gh-275]: https://github.com/WP-API/WP-API/issues/275\n[gh-276]: https://github.com/WP-API/WP-API/issues/276\n[gh-277]: https://github.com/WP-API/WP-API/issues/277\n[gh-278]: https://github.com/WP-API/WP-API/issues/278\n[gh-279]: https://github.com/WP-API/WP-API/issues/279\n[gh-282]: https://github.com/WP-API/WP-API/issues/282\n[gh-283]: https://github.com/WP-API/WP-API/issues/283\n[gh-284]: https://github.com/WP-API/WP-API/issues/284\n[gh-285]: https://github.com/WP-API/WP-API/issues/285\n[gh-286]: https://github.com/WP-API/WP-API/issues/286\n[gh-288]: https://github.com/WP-API/WP-API/issues/288\n[gh-289]: https://github.com/WP-API/WP-API/issues/289\n[gh-290]: https://github.com/WP-API/WP-API/issues/290\n[gh-296]: https://github.com/WP-API/WP-API/issues/296\n[gh-298]: https://github.com/WP-API/WP-API/issues/298\n[gh-303]: https://github.com/WP-API/WP-API/issues/303\n[gh-304]: https://github.com/WP-API/WP-API/issues/304\n[gh-313]: https://github.com/WP-API/WP-API/issues/313\n\n## 1.0\n\n- Add user endpoints.\n\n  Creating, reading, updating and deleting users and their data is now possible\n  by using the `/users` endpoints. `/users/me` can be used to determine the\n  current user, and returns a 401 status for non-logged in users.\n\n  Note that the format of post authors has changed, as it is now an embedded\n  User entity. This should not break backwards compatibility.\n\n  Custom post types gain this ability automatically.\n\n  (props @tobych, @rmccue, [#20][gh-20], [#146][gh-146])\n\n- Add post meta endpoints.\n\n  Creating, reading, updating and deleting post meta is now possible by using\n  the `/posts/<id>/meta` endpoints. Post meta is now correctly embedded into\n  Post entities.\n\n  Meta can be updated via the Post entity (e.g. `PUT` to `/posts/<id>`) or via\n  the entity itself at `/posts/<id>/meta/<mid>`. Meta deletion must be done via\n  a `DELETE` request to the latter.\n\n  Only non-protected and non-serialized meta can be accessed or manipulated via\n  the API. This is not predicted to change in the future; clients wishing to\n  access this data should consider alternative approaches.\n\n  Custom post types do not currently gain this ability automatically.\n\n  (props @attitude, @alisspers, @rachelbaker, @rmccue, @tlovett1, @tobych,\n  @zedejose, [#68][gh-68], [#168][gh-168], [#189][gh-189], [#207][gh-207])\n\n- Add endpoint for deleting a single comment.\n\n  Clients can now send a `DELETE` request to comment routes to delete\n  the comment.\n\n  Custom post types supporting comments will gain this ability automatically.\n\n  (props @tlovett1, @rmccue, [#178][gh-178], [#191][gh-191])\n\n- Add endpoint for post revisions.\n\n  Post revisions are now available at `/posts/<id>/revisions`, and are linked in\n  the `meta.links.version-history` key of post entities.\n\n  Custom post types supporting revisions will gain this ability automatically.\n\n  (props @tlovett1, [#193][gh-193])\n\n- Respond to requests without depending on pretty permalink settings.\n\n  For sites without pretty permalinks enabled, the API is now available from\n  `?json_route=/`. Clients should check for this via the autodiscovery methods\n  (Link header or RSD).\n\n  (props @rmccue, [#69][gh-69], [#138][gh-138])\n\n- Add register post type argument.\n\n  Post types can now indicate their availability via the API using the\n  `show_in_json` argument passed to `register_post_type`. This value defaults to\n  the `publicly_queryable` argument (which itself defaults to the\n  `public` argument).\n\n  (props @iandunn, @rmccue, [#145][gh-145])\n\n- Remove basic authentication handler.\n\n  **This breaks backwards compatibility** for clients using Basic\n  authentication. Clients are encouraged to switch to using [OAuth\n  authentication][OAuth1]. The [Basic Authentication plugin][Basic-Auth] can be\n  installed for backwards compatibility and local development, however should\n  not be used in production.\n\n  (props @rmccue, [#37][gh-37], [#152][gh-152])\n\n- Require nonces for cookie-based authentication.\n\n  **This breaks backwards compatibility** and requires any clients using cookie\n  authentication to also send a nonce with the request. The built-in Javascript\n  API automatically handles this.\n\n  (props @rmccue, [#177][gh-177], [#180][gh-180])\n\n- Clean up deprecated methods/functions.\n\n  Functions and methods previously deprecated in 0.8/0.9 have now been removed.\n  Future deprecations will take place in the same manner as WordPress core.\n\n  **This breaks backwards compatibility**, however these were marked as\n  deprecated in previous releases.\n\n  (props @rmccue, [#187][gh-187])\n\n- Only expose meta on 'edit' context as a temporary workaround.\n\n  Privacy concerns around exposing meta to all users necessitate this change.\n\n  **This breaks backwards compatibility** as post meta data is no longer\n  available to all users. Clients wishing to access this data should\n  authenticate and use the `edit` context.\n\n  (props @iandunn, @rmccue, [#135][gh-135])\n\n- Add `json_ensure_response` function to ensure either a\n  `WP_JSON_ResponseInterface` or a `WP_Error` object is returned.\n\n  When extending the API, the `json_ensure_response` function can be used to\n  ensure that any raw data returned is wrapped with a `WP_JSON_Response` object.\n  This allows using `get_status`/`get_data` easily, however `WP_Error` must\n  still be checked via `is_wp_error`.\n\n  (props @rmccue, [#151][gh-151], [#154][gh-154])\n\n- Use version option to check on init if rewrite rules should be flushed.\n\n  Rewrite rules on multisite are now flushed via an init hook, rather than\n  switching to each site on activation.\n\n  (props @rachelbaker, [#149][gh-149])\n\n- Fix typo in schema docs\n\n  (props @codebykat, [#132][gh-132])\n\n- Add check for valid JSON data before using to avoid parameter overwrite.\n\n  When passing data to an endpoint that accepts JSON data, the data will now be\n  validated before passing to the endpoint.\n\n  (props @rachelbaker, @rmccue, [#133][gh-133])\n\n- Add authentication property to site index.\n\n  (props @rmccue, [#131][gh-131])\n\n- Move the test helper to a subdirectory.\n\n  The plugin will now no longer prompt for updates due to the helper.\n\n  (props @rmccue, [#127][gh-127])\n\n- Include post ID with `json_prepare_meta` filter.\n\n  (props @rmccue, [#137][gh-137])\n\n- Corrected parameter names in x-form examples in docs.\n\n  (props @rachelbaker, [#134][gh-134])\n\n- Pass `WP_JSON_Server` instance to `json_serve_request`.\n\n  (props @alisspers, @rmccue, [#61][gh-61], [#139][gh-139])\n\n- Don't use deprecated function in `WP_JSON_Posts::edit_post()`\n\n  (props @rachelbaker, [#150][gh-150])\n\n- Pass post ID to `json_insert_post` action during both insert and update.\n\n  (props @cmmarslender, [#148][gh-148])\n\n- Add descriptions to taxonomy term data.\n\n  (props @pushred, [#111][gh-111])\n\n- Ensure we handle raw data passed to the API.\n\n  (props @tlovett1, @rmccue, [#91][gh-91], [#155][gh-155])\n\n- Remove unused `prepare_author` method from `WP_JSON_Posts` class.\n\n  (props @rachelbaker, [#165][gh-165])\n\n- Add multiple post type support to get_posts method.\n\n  (props @rmccue, [#142][gh-142], [#163][gh-163])\n\n- Return `WP_Error` in `WP_JSON_Posts::get_comment` for invalid comments.\n\n  (props @tlovett1, [#166][gh-166], [#171][gh-171])\n\n- Update getting started documentation.\n\n  (props @rmccue, [#176][gh-176])\n\n- Improve and clarify \"array\" input syntax documentation.\n\n  (props @rmccue, [#140][gh-140], [#175][gh-175])\n\n- Update post routes documentation.\n\n  (props @rmccue, [#172][gh-172], [#174][gh-174])\n\n- Add documentation for user endpoints.\n\n  (props @rachelbaker, @rmccue, [#158][gh-158])\n\n- Add permalink settings step to Quick Setup instructions.\n\n  (props @kadamwhite, [#183][gh-183])\n\n- Update taxonomy collection to return indexed array.\n\n  (props @mattheu, [#184][gh-184])\n\n- Remove placeholder endpoints.\n\n  (props @rmccue, [#161][gh-161], [#192][gh-192])\n\n- Fix issues with embedded attachments.\n\n  Checks that the post supports attachment data before adding it, and ensures we\n  don't embed entities many layers deep.\n\n  (props @rmccue, [#194][gh-194])\n\n- Change post parent preparation context to embed.\n\n  (props @rmccue, [#195][gh-195])\n\n- Change server meta links to reference the WP-API organization GitHub repo.\n\n  (props @rachelbaker, [#208][gh-208])\n\n- Fix plugin tests\n\n  (props @rmccue, [#215][gh-215])\n\n- Check for errors with invalid dates and remove duplicate date parsing\n  methods.\n\n  (props @rachelbaker, @rmccue, [#216][gh-216], [#219][gh-219])\n\n[View all changes](https://github.com/rmccue/WP-API/compare/0.9...1.0)\n\n[OAuth1]: https://github.com/WP-API/OAuth1\n[Basic-Auth]: https://github.com/WP-API/Basic-Auth\n[gh-20]: https://github.com/WP-API/WP-API/issues/20\n[gh-37]: https://github.com/WP-API/WP-API/issues/37\n[gh-61]: https://github.com/WP-API/WP-API/issues/61\n[gh-68]: https://github.com/WP-API/WP-API/issues/68\n[gh-69]: https://github.com/WP-API/WP-API/issues/69\n[gh-91]: https://github.com/WP-API/WP-API/issues/91\n[gh-111]: https://github.com/WP-API/WP-API/issues/111\n[gh-127]: https://github.com/WP-API/WP-API/issues/127\n[gh-131]: https://github.com/WP-API/WP-API/issues/131\n[gh-132]: https://github.com/WP-API/WP-API/issues/132\n[gh-133]: https://github.com/WP-API/WP-API/issues/133\n[gh-134]: https://github.com/WP-API/WP-API/issues/134\n[gh-135]: https://github.com/WP-API/WP-API/issues/135\n[gh-137]: https://github.com/WP-API/WP-API/issues/137\n[gh-138]: https://github.com/WP-API/WP-API/issues/138\n[gh-139]: https://github.com/WP-API/WP-API/issues/139\n[gh-140]: https://github.com/WP-API/WP-API/issues/140\n[gh-142]: https://github.com/WP-API/WP-API/issues/142\n[gh-145]: https://github.com/WP-API/WP-API/issues/145\n[gh-146]: https://github.com/WP-API/WP-API/issues/146\n[gh-148]: https://github.com/WP-API/WP-API/issues/148\n[gh-149]: https://github.com/WP-API/WP-API/issues/149\n[gh-150]: https://github.com/WP-API/WP-API/issues/150\n[gh-151]: https://github.com/WP-API/WP-API/issues/151\n[gh-152]: https://github.com/WP-API/WP-API/issues/152\n[gh-154]: https://github.com/WP-API/WP-API/issues/154\n[gh-155]: https://github.com/WP-API/WP-API/issues/155\n[gh-158]: https://github.com/WP-API/WP-API/issues/158\n[gh-161]: https://github.com/WP-API/WP-API/issues/161\n[gh-163]: https://github.com/WP-API/WP-API/issues/163\n[gh-165]: https://github.com/WP-API/WP-API/issues/165\n[gh-166]: https://github.com/WP-API/WP-API/issues/166\n[gh-168]: https://github.com/WP-API/WP-API/issues/168\n[gh-171]: https://github.com/WP-API/WP-API/issues/171\n[gh-172]: https://github.com/WP-API/WP-API/issues/172\n[gh-174]: https://github.com/WP-API/WP-API/issues/174\n[gh-175]: https://github.com/WP-API/WP-API/issues/175\n[gh-176]: https://github.com/WP-API/WP-API/issues/176\n[gh-177]: https://github.com/WP-API/WP-API/issues/177\n[gh-178]: https://github.com/WP-API/WP-API/issues/178\n[gh-180]: https://github.com/WP-API/WP-API/issues/180\n[gh-183]: https://github.com/WP-API/WP-API/issues/183\n[gh-184]: https://github.com/WP-API/WP-API/issues/184\n[gh-187]: https://github.com/WP-API/WP-API/issues/187\n[gh-189]: https://github.com/WP-API/WP-API/issues/189\n[gh-191]: https://github.com/WP-API/WP-API/issues/191\n[gh-192]: https://github.com/WP-API/WP-API/issues/192\n[gh-193]: https://github.com/WP-API/WP-API/issues/193\n[gh-194]: https://github.com/WP-API/WP-API/issues/194\n[gh-195]: https://github.com/WP-API/WP-API/issues/195\n[gh-207]: https://github.com/WP-API/WP-API/issues/207\n[gh-208]: https://github.com/WP-API/WP-API/issues/208\n[gh-215]: https://github.com/WP-API/WP-API/issues/215\n[gh-216]: https://github.com/WP-API/WP-API/issues/216\n[gh-219]: https://github.com/WP-API/WP-API/issues/219\n\n## 0.9\n\n- Move from `wp-json.php/` to `wp-json/`\n\n  **This breaks backwards compatibility** and requires any clients to now use\n  `wp-json/`, or preferably the new RSD/Link headers.\n\n  (props @rmccue, @matrixik, [#46][gh-46], [#96][gh-96], [#106][gh-106])\n\n- Move filter registration out of CPT constructor. CPT subclasses now require\n  you to call `$myobject->register_filters()`, in order to move global state out\n  of the constructor.\n\n  **This breaks backwards compatibility** and requires any subclassing to now\n  call `$myobject->register_filters()`\n\n  (props @rmccue, @thenbrent, [#42][gh-42], [#126][gh-126])\n\n- Introduce Response/ResponseInterface\n\n  Endpoints that need to set headers or response codes should now return a\n  `WP_JSON_Response` rather than using the server methods.\n  `WP_JSON_ResponseInterface` may also be used for more flexible use of the\n  response methods.\n\n  **Deprecation warning:** Calling `WP_JSON_Server::header`,\n  `WP_JSON_Server::link_header` and `WP_JSON_Server::query_navigation_headers`\n  is now deprecated. This will be removed in 1.0.\n\n  (props @rmccue, [#33][gh-33])\n\n- Change all semiCamelCase names to underscore_case.\n\n  **Deprecation warning**: Any calls to semiCamelCase methods require any\n  subclassing to update method references. This will be removed in 1.0.\n\n  (props @osiux, [#36][gh-36], [#82][gh-82])\n\n- Add multisite compatibility. If the plugin is network activated, the plugin is\n  now activated once-per-site, so `wp-json/` is always site-local.\n\n  (props @rachelbaker, [#48][gh-48], [#49][gh-49])\n\n- Add RSD and Link headers for discovery\n\n  (props @rmccue, [#40][gh-40])\n\n- WP_JSON_Posts->prepare_author() now verifies the `$user` object is set.\n\n  (props @rachelbaker, [#51][gh-51], [#54][gh-54])\n\n- Added unit testing framework. Currently only a smaller number of tests, but we\n  plan to increase this significantly as soon as possible.\n\n  (props @tierra, @osiux, [#65][gh-65], [#76][gh-76], [#84][gh-84])\n\n- Link collection filtering docs to URL formatting guide.\n\n  (props @kadamwhite, [#74][gh-74])\n\n- Remove hardcoded `/pages` references from `WP_JSON_Pages`\n\n  (props @rmccue, @thenbrent, [#28][gh-28], [#78][gh-78])\n\n- Fix compatibility with `DateTime::createFromFormat` on PHP 5.2\n\n  (props @osiux, [#52][gh-52], [#79][gh-79])\n\n- Document that `WP_JSON_CustomPostType::__construct()` requires a param of type\n  `WP_JSON_ResponseHandler`.\n\n  (props @tlovett1, [#88][gh-88])\n\n- Add timezone parameter to WP_JSON_DateTime::createFromFormat()\n\n  (props @royboy789, @rachelbaker, [#85][gh-85], [#87][gh-87])\n\n- Remove IXR references. `IXR_Error` is no longer accepted as a return value.\n\n  **This breaks backwards compatibility** and requires anyone returning\n  `IXR_Error` objects to now return `WP_Error` or `WP_JSON_ResponseInterface`\n  objects.\n\n  (props @rmccue, [#50][gh-50], [#77][gh-77])\n\n- Fix bugs with attaching featured images to posts:\n  - `WP_JSON_Media::attachThumbnail()` should do nothing if `$update` is false\n    without a post ID\n  - The post ID must be fetched from the `$post` array.\n\n  (props @Webbgaraget, [#55][gh-55])\n\n- Don't declare `jsonSerialize` on ResponseInterface\n\n  (props @rmccue, [#97][gh-97])\n\n- Allow JSON post creation/update for `WP_JSON_CustomPostType`\n\n  (props @tlovett1, [#90][gh-90], [#108][gh-108])\n\n- Return null if post doesn't have an excerpt\n\n  (props @rachelbacker, [#72][gh-72])\n\n- Fix link to issue tracker in README\n\n  (props @rmccue, @tobych, [#125][gh-125])\n\n[View all changes](https://github.com/rmccue/WP-API/compare/0.8...0.9)\n\n[gh-28]: https://github.com/WP-API/WP-API/issues/28\n[gh-33]: https://github.com/WP-API/WP-API/issues/33\n[gh-36]: https://github.com/WP-API/WP-API/issues/36\n[gh-40]: https://github.com/WP-API/WP-API/issues/40\n[gh-42]: https://github.com/WP-API/WP-API/issues/42\n[gh-46]: https://github.com/WP-API/WP-API/issues/46\n[gh-48]: https://github.com/WP-API/WP-API/issues/48\n[gh-49]: https://github.com/WP-API/WP-API/issues/49\n[gh-50]: https://github.com/WP-API/WP-API/issues/50\n[gh-51]: https://github.com/WP-API/WP-API/issues/51\n[gh-52]: https://github.com/WP-API/WP-API/issues/52\n[gh-54]: https://github.com/WP-API/WP-API/issues/54\n[gh-55]: https://github.com/WP-API/WP-API/issues/55\n[gh-65]: https://github.com/WP-API/WP-API/issues/65\n[gh-72]: https://github.com/WP-API/WP-API/issues/72\n[gh-74]: https://github.com/WP-API/WP-API/issues/74\n[gh-76]: https://github.com/WP-API/WP-API/issues/76\n[gh-77]: https://github.com/WP-API/WP-API/issues/77\n[gh-78]: https://github.com/WP-API/WP-API/issues/78\n[gh-79]: https://github.com/WP-API/WP-API/issues/79\n[gh-82]: https://github.com/WP-API/WP-API/issues/82\n[gh-84]: https://github.com/WP-API/WP-API/issues/84\n[gh-85]: https://github.com/WP-API/WP-API/issues/85\n[gh-87]: https://github.com/WP-API/WP-API/issues/87\n[gh-88]: https://github.com/WP-API/WP-API/issues/88\n[gh-90]: https://github.com/WP-API/WP-API/issues/90\n[gh-96]: https://github.com/WP-API/WP-API/issues/96\n[gh-97]: https://github.com/WP-API/WP-API/issues/97\n[gh-106]: https://github.com/WP-API/WP-API/issues/106\n[gh-108]: https://github.com/WP-API/WP-API/issues/108\n[gh-125]: https://github.com/WP-API/WP-API/issues/125\n[gh-126]: https://github.com/WP-API/WP-API/issues/126\n\n## 0.8\n- Add compatibility layer for JsonSerializable. You can now return arbitrary\n  objects from endpoints and use the `jsonSerialize()` method to return the data\n  to serialize instead of just using the properties of the object.\n\n  (props @rmccue, [#24][gh-24])\n\n- Fix page parent links to use `/pages`\n\n  (props @thenbrent, [#27][gh-27])\n\n- Remove redundant `WP_JSON_Pages::type_archive_link()` function\n\n  (props @thenbrent, [#29][gh-29])\n\n- Removed unneeded executable bit on all files\n\n  (props @tierra, [#31][gh-31])\n\n- Don't include the `featured_image` property for post types that don't\n  support thumbnails\n\n  (props @phh, [#43][gh-43])\n\n- Use `wp_json_server_before_serve` instead of `plugins_loaded` in the Extending\n  documentation for plugins\n\n  (props @phh, [#43][gh-43])\n\n- Parse the avatar URL from the `get_avatar()` function in core, allowing custom\n  avatar implementations\n\n  (props @rachelbaker, [#47][gh-47], [#35][gh-35])\n\n- Ensure that the author is set if passed\n\n  (props @kuchenundkakao, [#44][gh-44])\n\n- Clarify the usage of `WP_JSON_CustomPostType` in plugins\n\n  (props @rmccue, [#45][gh-45])\n\n- Ensure JSON disabled error messages are translated\n\n  (props @rmccue, [#38][gh-38])\n\n- Remove extra \"Link: \" from link headers\n\n  (props @jmusal, [#56][gh-56], [#30][gh-30])\n\n- Remove redundant `get_avatar` method in `WP_JSON_Posts`\n\n  (props @rachelbaker, [#35][gh-35])\n\n- Rename `WP_JSON_Server::get_avatar()` to `WP_JSON_Server::get_avatar_url()`\n\n  (props @rachelbaker, [#35][gh-35])\n\n[View all changes](https://github.com/rmccue/WP-API/compare/0.7...0.8)\n\n[gh-24]: https://github.com/WP-API/WP-API/issues/24\n[gh-27]: https://github.com/WP-API/WP-API/issues/27\n[gh-29]: https://github.com/WP-API/WP-API/issues/29\n[gh-30]: https://github.com/WP-API/WP-API/issues/30\n[gh-31]: https://github.com/WP-API/WP-API/issues/31\n[gh-35]: https://github.com/WP-API/WP-API/issues/35\n[gh-38]: https://github.com/WP-API/WP-API/issues/38\n[gh-43]: https://github.com/WP-API/WP-API/issues/43\n[gh-43]: https://github.com/WP-API/WP-API/issues/43\n[gh-44]: https://github.com/WP-API/WP-API/issues/44\n[gh-45]: https://github.com/WP-API/WP-API/issues/45\n[gh-47]: https://github.com/WP-API/WP-API/issues/47\n[gh-56]: https://github.com/WP-API/WP-API/issues/56\n\n## 0.7\n- The response handler object is now passed into the endpoint objects via the\n  constructor, allowing you to avoid excess global state where possible. It's\n  recommended to use this where possible rather than the global object.\n\n  (props @rmccue, [#2][gh-2])\n\n- Fix undefined variables and indices\n  (props @pippinsplugins, [#5][gh-5])\n\n- Correct call to deactivation hook\n  (props @ericpedia, [#9][gh-9])\n\n- Check metadata access correctly rather than always hiding for users without\n  the `edit_post_meta` capability\n  (props @kokarn, [#10][gh-10])\n\n- Return all term metadata, rather than just the last one\n  (props @afurculita, [#13][gh-13])\n\n- Access post metadata from cache where possible - Note, this is a backwards\n  compatibility break, as the format of the metadata has changed. This may\n  change again in the near future, so don't rely on it until 1.0.\n  (props @afurculita, [#14][gh-14])\n\n- Add term_link to prepare_term\n  (props @afurculita, [#15][gh-15])\n\n- Fix hardcoded `/pages` references in `WP_JSON_CustomPostType`\n  (props @thenbrent, [#26][gh-26])\n\n- Sanitize headers for newlines\n  (props @kokarn, [#7][gh-7])\n\n- Register rewrite rules during plugin activation\n  (props @pippinsplugins, [#17][gh-17])\n\n[View all changes](https://github.com/rmccue/WP-API/compare/0.6...0.7)\n\n[gh-2]:  https://github.com/WP-API/WP-API/issues/2\n[gh-5]:  https://github.com/WP-API/WP-API/issues/5\n[gh-7]:  https://github.com/WP-API/WP-API/issues/7\n[gh-9]:  https://github.com/WP-API/WP-API/issues/9\n[gh-10]: https://github.com/WP-API/WP-API/issues/10\n[gh-13]: https://github.com/WP-API/WP-API/issues/13\n[gh-14]: https://github.com/WP-API/WP-API/issues/14\n[gh-15]: https://github.com/WP-API/WP-API/issues/15\n[gh-17]: https://github.com/WP-API/WP-API/issues/17\n[gh-26]: https://github.com/WP-API/WP-API/issues/26\n\n## 0.6\n- Huge documentation update - Guides on getting started and extending the API\n\tare [now available for your perusal][docs]\n- Add generic CPT class - Plugins are now encouraged to extend\n\t`WP_JSON_CustomPostType` and get free hooking for common actions. This\n\tremoves most of the boilerplate that you needed to write for new CPT-based\n\troutes and endpoints ([#380][])\n- Use defined filter priorities for endpoint registration - It's now easier to\n\tinject your own endpoints at a defined point\n- Update the schema - Now includes documentation on the Media entity, plus more\n\t([#264][])\n- Add better taxonomy support - You can now query for taxonomies and terms\n\tdirectly. The routes here might seem strange\n\t(`/posts/types/post/taxonomies/category` for example), but the intention is\n\tto [future-proof them](http://make.wordpress.org/core/2013/07/28/potential-roadmap-for-taxonomy-meta-and-post-relationships/)\n\tas much as possible([#275][])\n- Ensure the JSON URL is relative to the home URL ([#375][])\n- Check all date formats for If-Unmodified-Since ([#378][])\n- Register the correct URL for the JS library ([#376][])\n- Correct the usage of meta links ([#379][])\n- Add filters for post type and post status data ([#380][])\n- Separate parent post and parent comment relation ([#330][]()\n\n[View all changes](https://github.com/rmccue/WP-API/compare/0.5...0.6)\n\n[docs]: https://github.com/rmccue/WP-API/tree/master/docs\n\n[#264]: https://gsoc.trac.wordpress.org/ticket/264\n[#275]: https://gsoc.trac.wordpress.org/ticket/275\n[#330]: https://gsoc.trac.wordpress.org/ticket/330\n[#375]: https://gsoc.trac.wordpress.org/ticket/375\n[#376]: https://gsoc.trac.wordpress.org/ticket/376\n[#378]: https://gsoc.trac.wordpress.org/ticket/378\n[#379]: https://gsoc.trac.wordpress.org/ticket/379\n[#380]: https://gsoc.trac.wordpress.org/ticket/380\n\n\n## 0.5\n- Add support for media - This has been a long time coming, and it's finally at\n\ta point where I'm happy to push it out. Good luck. ([#272][])\n- Separate the post-related endpoints - Post-related endpoints are now located\n\tin the `WP_JSON_Posts` class. When implementing custom post type support,\n\tit's recommended to subclass this.\n\n\tThe various types are now also only registered via hooks, rather than\n\tdirectly in the server class, which should make it easier to override them\n\tas well ([#348][])\n- Add page support - This is a good base if you're looking to create your own\n\tcustom post type support ([#271][])\n- Switch from fields to context - Rather than passing in a list of fields that\n\tyou want, you can now pass in a context (usually `view` or `edit`)\n\t([#328][]).\n- Always send headers via the server handler - Endpoints are now completely\n\tseparate from the request, so the server class can now be used for\n\tnon-HTTP/JSON handlers if needed ([#293][])\n- Use better error codes for disabled features ([#338][])\n- Send `X-WP-Total` and `X-WP-TotalPages` headers for information on\n\tpost/pagination counts ([#266][])\n\n[View all changes](https://github.com/rmccue/WP-API/compare/0.4...0.5)\n\n[#266]: https://gsoc.trac.wordpress.org/ticket/266\n[#271]: https://gsoc.trac.wordpress.org/ticket/271\n[#272]: https://gsoc.trac.wordpress.org/ticket/272\n[#293]: https://gsoc.trac.wordpress.org/ticket/293\n[#328]: https://gsoc.trac.wordpress.org/ticket/328\n[#338]: https://gsoc.trac.wordpress.org/ticket/338\n[#348]: https://gsoc.trac.wordpress.org/ticket/348\n\n\n## 0.4\n- Add Backbone-based models and collections - These are available to your code\n\tby declaring a dependency on `wp-api` ([#270][])\n- Check `json_route` before using it ([#336][])\n- Conditionally load classes ([#337][])\n- Add additional test helper plugin - Provides code coverage as needed to the\n\tAPI client tests. Currently unused. ([#269][])\n- Move `json_url()` and `get_json_url()` to `plugin.php` - This allows using\n\tboth outside of the API itself ([#343][])\n- `getPost(0)` now returns an error rather than the latest post ([#344][])\n\n[View all changes](https://github.com/rmccue/WP-API/compare/0.3...0.4)\n\n[#269]: https://gsoc.trac.wordpress.org/ticket/269\n[#270]: https://gsoc.trac.wordpress.org/ticket/270\n[#336]: https://gsoc.trac.wordpress.org/ticket/336\n[#337]: https://gsoc.trac.wordpress.org/ticket/337\n[#343]: https://gsoc.trac.wordpress.org/ticket/343\n[#344]: https://gsoc.trac.wordpress.org/ticket/344\n\n## 0.3\n- Add initial comment endpoints to get comments for a post, and get a single\n\tcomment ([#320][])\n- Return a Post entity when updating a post, rather than wrapping it with\n\tuseless text ([#329][])\n- Allow filtering the output as well as input. You can now use the\n\t`json_dispatch_args` filter for input as well as the `json_serve_request`\n\tfilter for output to serve up alternative formats (e.g. MsgPack, XML (if\n\tyou're insane))\n- Include a `profile` link in the index, to indicate the JSON Schema that the\n\tAPI conforms to. In the future, this will be versioned.\n\n[#320]: https://gsoc.trac.wordpress.org/ticket/320\n[#329]: https://gsoc.trac.wordpress.org/ticket/329\n\n## 0.2\n- Allow all public query vars to be passed to WP Query - Some private query vars\n\tcan also be passed in, and all can if the user has `edit_posts`\n\tpermissions ([#311][])\n- Pagination can now be handled by using the `page` argument without messing\n\twith WP Query syntax ([#266][])\n- The index now generates links for non-variable routes ([#268][])\n- Editing a post now supports the `If-Unmodified-Since` header. Pass this in to\n\tavoid conflicting edits ([#294][])\n- Post types and post statuses now have endpoints to access their data ([#268][])\n\n[View all changes](https://github.com/rmccue/WP-API/compare/0.1.2...0.2)\n\n[#268]: https://gsoc.trac.wordpress.org/ticket/268\n[#294]: https://gsoc.trac.wordpress.org/ticket/294\n[#266]: https://gsoc.trac.wordpress.org/ticket/266\n[#311]: https://gsoc.trac.wordpress.org/ticket/311\n\n## 0.1.2\n- Disable media handling to avoid fatal error ([#298][])\n\n[#298]: http://gsoc.trac.wordpress.org/ticket/298\n\n## 0.1.1\n- No changes, process error\n\n## 0.1\n- Enable the code to be used via the plugin architecture (now uses rewrite rules\n\tif running in this mode)\n- Design documents are now functionally complete for the current codebase\n\t([#264][])\n- Add basic writing support ([#265][])\n- Filter fields by default - Unfiltered results are available via their\n\tcorresponding `*_raw` key, which is only available to users with\n\t`edit_posts` ([#290][])\n- Use correct timezones for manual offsets (GMT+10, e.g.) ([#279][])\n- Allow permanently deleting posts ([#292])\n\n[View all changes](https://github.com/rmccue/WP-API/compare/b3a8d7656ffc58c734aad95e0839609011b26781...0.1.1)\n\n[#264]: https://gsoc.trac.wordpress.org/ticket/264\n[#265]: https://gsoc.trac.wordpress.org/ticket/265\n[#279]: https://gsoc.trac.wordpress.org/ticket/279\n[#290]: https://gsoc.trac.wordpress.org/ticket/290\n[#292]: https://gsoc.trac.wordpress.org/ticket/292\n\n## 0.0.4\n- Hyperlinks now available in most constructs under the 'meta' key. At the\n\tmoment, the only thing under this key is 'links', but more will come\n\teventually. (Try browsing with a browser tool like JSONView; you should be\n\table to view all content just by clicking the links.)\n- Accessing / now gives an index which briefly describes the API and gives\n\tlinks to more (also added the HIDDEN_ENDPOINT constant to hide from this).\n- Post collections now contain a summary of the post, with the full post\n\tavailable via the single post call. (prepare_post() has fields split into\n\tpost and post-extended)\n- Post entities have dropped post_ prefixes, and custom_fields has changed to\n\tpost_meta.\n- Now supports JSONP callback via the _jsonp argument. This can be disabled\n\tseparately to the API itself, as it's only needed for\n\tcross-origin requests.\n- Internal: No longer extends the XMLRPC class. All relevant pieces have been\n\tcopied over. Further work still needs to be done on this, but it's a start.\n\n## 0.0.3:\n - Now accepts JSON bodies if an endpoint is marked with ACCEPT_JSON\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.4306640625,
          "content": "# Contributing\n\nHi, and thanks for considering contributing! Before you do though, here's a few\nnotes on how best to contribute. Don't worry, I'll keep it short!\n\nThe WP REST API code now lives in core WordPress, so any contributions to the\nAPI (**including new issues**) should be made via\n[WordPress core Trac](https://core.trac.wordpress.org).\n\nSee also:\n[Contributing to WordPress](https://codex.wordpress.org/Contributing_to_WordPress)\n"
        },
        {
          "name": "Gruntfile.js",
          "type": "blob",
          "size": 1.744140625,
          "content": "module.exports = function( grunt ) {\n\n\t'use strict';\n\tvar banner = '/**\\n * <%= pkg.homepage %>\\n * Copyright (c) <%= grunt.template.today(\"yyyy\") %>\\n * This file is generated automatically. Do not edit.\\n */\\n';\n\trequire('phplint').gruntPlugin(grunt);\n\t// Project configuration\n\tgrunt.initConfig( {\n\n\t\tpkg:    grunt.file.readJSON( 'package.json' ),\n\n\t\tphpcs: {\n\t\t\tplugin: {\n\t\t\t\tsrc: './'\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tbin: \"vendor/bin/phpcs --extensions=php --ignore=\\\"*/vendor/*,*/node_modules/*\\\"\",\n\t\t\t\tstandard: \"phpcs.ruleset.xml\"\n\t\t\t}\n\t\t},\n\n\t\tphplint: {\n\t\t\toptions: {\n\t\t\t\tlimit: 10,\n\t\t\t\tstdout: true,\n\t\t\t\tstderr: true\n\t\t\t},\n\t\t\tfiles: ['lib/**/*.php', 'tests/*.php', '*.php']\n\t\t},\n\n\t\tphpunit: {\n\t\t\t'default': {\n\t\t\t\tcmd: 'phpunit',\n\t\t\t\targs: ['-c', 'phpunit.xml.dist']\n\t\t\t},\n\t\t\t'multisite': {\n\t\t\t\tcmd: 'phpunit',\n\t\t\t\targs: ['-c', 'multisite.xml']\n\t\t\t},\n\t\t\t'codecoverage': {\n\t\t\t\tcmd: 'phpunit',\n\t\t\t\targs: ['-c', 'codecoverage.xml']\n\t\t\t}\n\t\t}\n\n\t} );\n\tgrunt.loadNpmTasks( 'grunt-phpcs' );\n\n\t// Testing tasks.\n\tgrunt.registerMultiTask('phpunit', 'Runs PHPUnit tests, including the ajax, external-http, and multisite tests.', function() {\n\t\tgrunt.util.spawn({\n\t\t\tcmd: this.data.cmd,\n\t\t\targs: this.data.args,\n\t\t\topts: {stdio: 'inherit'}\n\t\t}, this.async());\n\t});\n\n\tgrunt.registerTask( 'test', [ 'phpcs', 'phplint', 'phpunit:default', 'phpunit:multisite' ] );\n\tgrunt.util.linefeed = '\\n';\n\n\t// Travis CI tasks.\n\tgrunt.registerTask('travis:phpvalidate', 'Runs PHPUnit Travis CI PHP code tasks.', [\n\t\t'phpcs',\n\t\t'phplint'\n\t] );\n\tgrunt.registerTask('travis:phpunit', 'Runs PHPUnit Travis CI tasks.', [\n\t\t'phpunit:default',\n\t\t'phpunit:multisite'\n\t] );\n\tgrunt.registerTask('travis:codecoverage', 'Runs PHPUnit Travis CI Code Coverage task.', [\n\t\t'phpunit:codecoverage',\n\t\t'phpunit:multisite'\n\t] );\n};\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.5302734375,
          "content": "# WP REST API v2.0 (formerly known as WP-API)\n\nAccess your WordPress site's data through an easy-to-use HTTP REST API.\n\n**Development is no longer taking place in this repository**.\n\n- For support requests, use the\n  [WordPress forums](https://wordpress.org/support/).\n- For bugs and patches, use\n  [WordPress core Trac](https://core.trac.wordpress.org).\n  Be sure to include full details and reproduction steps about the issue you are\n  experiencing, and ideally a patch with unit tests.\n\nThe **\"develop\"** branch is version 2 which represents the last \"beta\" versions of the\n[plugin](https://wordpress.org/plugins/rest-api/).\n[Read the documentation](https://developer.wordpress.org/rest-api/)\nto introduce yourself to endpoints, internal patterns, and implementation details.\n\nThe **\"master\"** branch represents the **legacy** version of the REST API.\n\n## About\n\nWordPress is moving towards becoming a fully-fledged application framework, and\nwe need new APIs. This project was born to create an easy-to-use,\neasy-to-understand and well-tested framework for creating these APIs, plus\ncreating APIs for core.\n\nThis plugin provides an easy to use REST API, available via HTTP. Grab your\nsite's data in simple JSON format, including users, posts, taxonomies and more.\nRetrieving or updating data is as simple as sending a HTTP request.\n\nWant to get your site's posts? Simply send a `GET` request to `/wp-json/wp/v2/posts`.\nUpdate user with ID 4? Send a `PUT` request to `/wp-json/wp/v2/users/4`. Get the page\nwith slug \"about-me\"? `GET /wp-json/wp/v2/pages?slug=about-me`. Get all posts with\nthe search term \"awesome\"? `GET /wp-json/wp/v2/posts?search=awesome`. It's that easy.\n\nThe WordPress REST API exposes a simple yet easy interface to WP Query, the posts\nAPI, post meta API, users API, revisions API and many more. Chances are, if you\ncan do it with WordPress, the API will let you do it.\n\nThe REST API also includes an easy-to-use JavaScript API based on Backbone models,\nallowing plugin and theme developers to get up and running without needing to\nknow anything about the details of getting connected.\n\nCheck out [our documentation][docs] for information on what's available in the\nAPI and how to use it. We've also got documentation on extending the API with\nextra data for plugin and theme developers!\n\nThe API code in this plugin is currently integrated into core WordPress starting in\n[4.7](https://wordpress.org/news/2016/12/vaughan/).\n\n**Development is no longer taking place in this repository**.\n\n- For support requests, use the\n  [WordPress forums](https://wordpress.org/support/).\n- For bugs and patches, use\n  [WordPress core Trac](https://core.trac.wordpress.org).\n  Be sure to include full details and reproduction steps about the issue you are\n  experiencing, and ideally a patch with unit tests.\n\n## Quick Setup\n\nWant to test out the WP REST API?  The easiest way is just to install a\nrecent version of WordPress\n([4.7](https://wordpress.org/news/2016/12/vaughan/) or later).\n\n### Testing\n\nYou can also set up a development environment to work on the API code.\n\nSee the\n[instructions for running the WordPress PHPUnit test suite](https://make.wordpress.org/core/handbook/testing/automated-testing/phpunit/)\nto get started.\n\n## Issue Tracking\n\nAll tickets for the project are being tracked on\n[WordPress core Trac](https://core.trac.wordpress.org).\n\nSome previous issues can be found on the\n[issue tracker for this repository](/WP-API/WP-API/issues);\nhowever, now that development of the API has moved to core Trac, new issues\n**should not be filed here**.\n\n## Contributing\n\nWant to get involved? Check out [Contributing.md][contributing] for details on\nsubmitting fixes and new features.\n\n## Security\n\nWe take the security of the API extremely seriously. If you think you've found\na security issue with the API (whether information disclosure, privilege\nescalation, or another issue), we'd appreciate responsible disclosure as soon\nas possible.\n\nTo report a security issue, you can either email `security[at]wordpress.org`,\nor [file an issue on HackerOne][hackerone]. We will attempt to give an initial\nresponse to security issues within 48 hours at most, however keep in mind that\nthe team is distributed across various timezones, and delays may occur as we\ndiscuss internally.\n\n(Please note: For testing, you should install a copy of the project and\nWordPress on your own server. **Do not test on servers you do not own.**)\n\n## License\n\n[GPLv2+](http://www.gnu.org/licenses/gpl-2.0.html)\n\n[docs]: https://developer.wordpress.org/rest-api/\n[contributing]: CONTRIBUTING.md\n[hackerone]: https://hackerone.com/wp-api\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecoverage.xml",
          "type": "blob",
          "size": 0.6943359375,
          "content": "<phpunit\n\tbootstrap=\"tests/bootstrap.php\"\n\tbackupGlobals=\"false\"\n\tcolors=\"true\"\n\tconvertErrorsToExceptions=\"true\"\n\tconvertNoticesToExceptions=\"true\"\n\tconvertWarningsToExceptions=\"true\"\n\t>\n\t<php>\n\t\t<const name=\"WPAPI_CODE_COVERAGE\" value=\"1\" />\n\t</php>\n\t<testsuites>\n\t\t<!-- Default test suite to run all tests -->\n\t\t<testsuite>\n\t\t\t<directory prefix=\"test-\" suffix=\".php\">tests</directory>\n\t\t</testsuite>\n\t</testsuites>\n\t<filter>\n\t\t<blacklist>\n\t\t\t<directory suffix=\".php\">.</directory>\n\t\t</blacklist>\n\t\t<whitelist>\n\t\t\t<directory suffix=\".php\">./lib</directory>\n\t\t\t<file>./plugin.php</file>\n\t\t</whitelist>\n\t</filter>\n\t<logging>\n\t\t<log type=\"coverage-clover\" target=\"build/logs/clover.xml\"/>\n\t</logging>\n</phpunit>\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.958984375,
          "content": "{\n    \"name\": \"wp-api/wp-api\",\n    \"type\": \"wordpress-plugin\",\n    \"description\": \"Access your WordPress site's data through an easy-to-use HTTP REST API.\",\n    \"homepage\": \"http://wp-api.org/\",\n    \"license\": \"GPL2+\",\n    \"authors\": [\n        {\n            \"name\": \"WP-API Team\",\n            \"homepage\": \"http://wp-api.org/\"\n        }\n    ],\n    \"support\": {\n        \"issues\": \"https://github.com/WP-API/WP-API/issues\",\n        \"forum\": \"https://wordpress.org/support/plugin/rest-api\"\n    },\n    \"require\": {\n        \"composer/installers\": \"~1.0\"\n    },\n    \"require-dev\": {\n        \"squizlabs/php_codesniffer\": \"2.3.4\",\n        \"wp-coding-standards/wpcs\": \"0.6.0\"\n    },\n    \"extra\": {\n        \"installer-name\": \"rest-api\"\n    },\n    \"scripts\": {\n        \"post-install-cmd\": \"\\\"vendor/bin/phpcs\\\" --config-set installed_paths vendor/wp-coding-standards/wpcs\",\n        \"post-update-cmd\" : \"\\\"vendor/bin/phpcs\\\" --config-set installed_paths vendor/wp-coding-standards/wpcs\"\n    }\n}\n"
        },
        {
          "name": "core-integration.php",
          "type": "blob",
          "size": 2.09765625,
          "content": "<?php\n/**\n * Integration points with WordPress core that won't ever be committed\n */\n\n/**\n * Inject `parent__in` and `parent__not_in` vars to avoid bad cache\n *\n * @see https://core.trac.wordpress.org/ticket/35677\n */\nfunction wp_api_comment_query_vars( $query ) {\n\t$query->query_var_defaults['parent__in'] = array();\n\t$query->query_var_defaults['parent__not_in'] = array();\n}\nadd_action( 'pre_get_comments', 'wp_api_comment_query_vars' );\n\nif ( ! function_exists( 'wp_parse_slug_list' ) ) {\n\t/**\n\t * Clean up an array, comma- or space-separated list of slugs.\n\t *\n\t * @since\n\t *\n\t * @param  array|string $list List of slugs.\n\t * @return array Sanitized array of slugs.\n\t */\n\tfunction wp_parse_slug_list( $list ) {\n\t\tif ( ! is_array( $list ) ) {\n\t\t\t$list = preg_split( '/[\\s,]+/', $list );\n\t\t}\n\n\t\treturn array_unique( array_map( 'sanitize_title', $list ) );\n\t}\n}\n\nif ( ! function_exists( 'rest_get_server' ) ) {\n\t/**\n\t * Retrieves the current REST server instance.\n\t *\n\t * Instantiates a new instance if none exists already.\n\t *\n\t * @since 4.5.0\n\t *\n\t * @global WP_REST_Server $wp_rest_server REST server instance.\n\t *\n\t * @return WP_REST_Server REST server instance.\n\t */\n\tfunction rest_get_server() {\n\t\t/* @var WP_REST_Server $wp_rest_server */\n\t\tglobal $wp_rest_server;\n\n\t\tif ( empty( $wp_rest_server ) ) {\n\t\t\t/**\n\t\t\t * Filter the REST Server Class.\n\t\t\t *\n\t\t\t * This filter allows you to adjust the server class used by the API, using a\n\t\t\t * different class to handle requests.\n\t\t\t *\n\t\t\t * @since 4.4.0\n\t\t\t *\n\t\t\t * @param string $class_name The name of the server class. Default 'WP_REST_Server'.\n\t\t\t */\n\t\t\t$wp_rest_server_class = apply_filters( 'wp_rest_server_class', 'WP_REST_Server' );\n\t\t\t$wp_rest_server = new $wp_rest_server_class;\n\n\t\t\t/**\n\t\t\t * Fires when preparing to serve an API request.\n\t\t\t *\n\t\t\t * Endpoint objects should be created and register their hooks on this action rather\n\t\t\t * than another action to ensure they're only loaded when needed.\n\t\t\t *\n\t\t\t * @since 4.4.0\n\t\t\t *\n\t\t\t * @param WP_REST_Server $wp_rest_server Server object.\n\t\t\t */\n\t\t\tdo_action( 'rest_api_init', $wp_rest_server );\n\t\t}\n\n\t\treturn $wp_rest_server;\n\t}\n}\n"
        },
        {
          "name": "extras.php",
          "type": "blob",
          "size": 4.03515625,
          "content": "<?php\n/**\n * Extra File\n *\n * Contains extra functions from plugin.php go.\n *\n * @package WordPress\n * @subpackage JSON API\n */\n\nadd_action( 'wp_enqueue_scripts', 'rest_register_scripts', -100 );\nadd_action( 'admin_enqueue_scripts', 'rest_register_scripts', -100 );\n\nif ( ! function_exists( 'rest_register_scripts' ) ) {\n\t/**\n\t * Registers REST API JavaScript helpers.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @see wp_register_scripts()\n\t */\n\tfunction rest_register_scripts() {\n\n\t\t// Use minified scripts if SCRIPT_DEBUG is not on.\n\t\t$suffix = ( defined( 'SCRIPT_DEBUG' ) && SCRIPT_DEBUG ) ? '' : '.min';\n\n\t\twp_register_script( 'wp-api', plugins_url( 'wp-api' . $suffix . '.js', __FILE__ ), array( 'jquery', 'backbone', 'underscore' ), '1.2', true );\n\n\t\t$settings = array(\n\t\t\t'root'          => esc_url_raw( get_rest_url() ),\n\t\t\t'nonce'         => wp_create_nonce( 'wp_rest' ),\n\t\t\t'versionString' => 'wp/v2/',\n\t\t);\n\t\twp_localize_script( 'wp-api', 'wpApiSettings', $settings );\n\t}\n}\n\nif ( ! function_exists( 'rest_get_avatar_urls' ) ) {\n\t/**\n\t * Retrieves the avatar urls in various sizes based on a given email address.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @see get_avatar_url()\n\t *\n\t * @param string $email Email address.\n\t * @return array $urls Gravatar url for each size.\n\t */\n\tfunction rest_get_avatar_urls( $email ) {\n\t\t$avatar_sizes = rest_get_avatar_sizes();\n\n\t\t$urls = array();\n\t\tforeach ( $avatar_sizes as $size ) {\n\t\t\t$urls[ $size ] = get_avatar_url( $email, array( 'size' => $size ) );\n\t\t}\n\n\t\treturn $urls;\n\t}\n}\n\nif ( ! function_exists( 'rest_get_avatar_sizes' ) ) {\n\t/**\n\t * Retrieves the pixel sizes for avatars.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @return array List of pixel sizes for avatars. Default `[ 24, 48, 96 ]`.\n\t */\n\tfunction rest_get_avatar_sizes() {\n\t\t/**\n\t\t * Filter the REST avatar sizes.\n\t\t *\n\t\t * Use this filter to adjust the array of sizes returned by the\n\t\t * `rest_get_avatar_sizes` function.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param array $sizes An array of int values that are the pixel sizes for avatars.\n\t\t *                     Default `[ 24, 48, 96 ]`.\n\t\t */\n\t\treturn apply_filters( 'rest_avatar_sizes', array( 24, 48, 96 ) );\n\t}\n}\n\n/**\n * Retrieves the avatar url for a user who provided a user ID or email address.\n *\n * get_avatar() doesn't return just the URL, so we have to extract it here.\n *\n * @since 4.4.0\n * @deprecated WPAPI-2.0 rest_get_avatar_urls()\n * @see rest_get_avatar_urls()\n *\n * @param string $email Email address.\n * @return string URL for the user's avatar, empty string otherwise.\n */\nfunction rest_get_avatar_url( $email ) {\n\t_deprecated_function( 'rest_get_avatar_url', 'WPAPI-2.0', 'rest_get_avatar_urls' );\n\n\t// Use the WP Core `get_avatar_url()` function introduced in 4.2.\n\tif ( function_exists( 'get_avatar_url' ) ) {\n\t\treturn esc_url_raw( get_avatar_url( $email ) );\n\t}\n\n\t$avatar_html = get_avatar( $email );\n\n\t// Strip the avatar url from the get_avatar img tag.\n\tpreg_match( '/src=[\"|\\'](.+)[\\&|\"|\\']/U', $avatar_html, $matches );\n\n\tif ( isset( $matches[1] ) && ! empty( $matches[1] ) ) {\n\t\treturn esc_url_raw( $matches[1] );\n\t}\n\n\treturn '';\n}\n\nif ( ! function_exists( 'wp_is_numeric_array' ) ) {\n\t/**\n\t * Determines if the variable is a numeric-indexed array.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param mixed $data Variable to check.\n\t * @return bool Whether the variable is a list.\n\t */\n\tfunction wp_is_numeric_array( $data ) {\n\t\tif ( ! is_array( $data ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$keys = array_keys( $data );\n\t\t$string_keys = array_filter( $keys, 'is_string' );\n\t\treturn count( $string_keys ) === 0;\n\t}\n}\n\n/**\n * Parses and formats a MySQL datetime (Y-m-d H:i:s) for ISO8601/RFC3339.\n *\n * Explicitly strips timezones, as datetimes are not saved with any timezone\n * information. Including any information on the offset could be misleading.\n *\n * @deprecated WPAPI-2.0 mysql_to_rfc3339()\n *\n * @param string $date_string Date string to parse and format.\n * @return string Date formatted for ISO8601/RFC3339.\n */\nfunction rest_mysql_to_rfc3339( $date_string ) {\n\t_deprecated_function( 'rest_mysql_to_rfc3339', 'WPAPI-2.0', 'mysql_to_rfc3339' );\n\treturn mysql_to_rfc3339( $date_string );\n}\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 14.7880859375,
          "content": "        GNU GENERAL PUBLIC LICENSE\n           Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc. \n              51 Franklin St, Fifth Floor, Boston, MA 02110, USA\n\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n          Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Library General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n        GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n          NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n         END OF TERMS AND CONDITIONS\n\n"
        },
        {
          "name": "multisite.xml",
          "type": "blob",
          "size": 0.6103515625,
          "content": "<phpunit\n\tbootstrap=\"tests/bootstrap.php\"\n\tbackupGlobals=\"false\"\n\tcolors=\"true\"\n\tconvertErrorsToExceptions=\"true\"\n\tconvertNoticesToExceptions=\"true\"\n\tconvertWarningsToExceptions=\"true\"\n\t>\n\t<php>\n\t\t<const name=\"WP_TESTS_MULTISITE\" value=\"1\" />\n\t</php>\n\t<testsuites>\n\t\t<!-- Default test suite to run all tests -->\n\t\t<testsuite>\n\t\t\t<directory prefix=\"test-\" suffix=\".php\">tests</directory>\n\t\t</testsuite>\n\t</testsuites>\n\n\t<filter>\n\t\t<blacklist>\n\t\t\t<directory suffix=\".php\">.</directory>\n\t\t</blacklist>\n\t\t<whitelist>\n\t\t\t<directory suffix=\".php\">./lib</directory>\n\t\t\t<file>./plugin.php</file>\n\t\t</whitelist>\n\t</filter>\n</phpunit>\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.330078125,
          "content": "{\n  \"name\": \"wp-api\",\n  \"version\": \"2.0.0\",\n  \"license\" : \"GPL-2.0+\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/WP-API/WP-API.git\"\n  },\n  \"main\": \"Gruntfile.js\",\n  \"author\": \"WP-API Team <team@wp-api.org>\",\n  \"devDependencies\": {\n    \"grunt\": \"^0.4.5\",\n    \"grunt-phpcs\": \"^0.4.0\",\n    \"phplint\": \"^1.6.1\"\n  }\n}\n"
        },
        {
          "name": "phpcs.ruleset.xml",
          "type": "blob",
          "size": 0.595703125,
          "content": "<?xml version=\"1.0\"?>\n<ruleset name=\"WP-API\">\n\t<description>Sniffs for the coding standards of the WP-API plugin</description>\n\n\t<exclude-pattern>*/core/*</exclude-pattern>\n\n\t<rule ref=\"WordPress-VIP\">\n\t\t<exclude name=\"WordPress.VIP.FileSystemWritesDisallow\" />\n\t\t<exclude name=\"WordPress.VIP.RestrictedFunctions\" />\n\t\t<exclude name=\"WordPress.VIP.RestrictedVariables\" />\n\t\t<exclude name=\"WordPress.VIP.SuperGlobalInputUsage\" />\n\t\t<exclude name=\"WordPress.VIP.ValidatedSanitizedInput\" />\n\t\t<exclude name=\"WordPress.CSRF.NonceVerification\" />\n\t\t<exclude name=\"WordPress.XSS.EscapeOutput\" />\n\t</rule>\n</ruleset>\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.5478515625,
          "content": "<phpunit\n\tbootstrap=\"tests/bootstrap.php\"\n\tbackupGlobals=\"false\"\n\tcolors=\"true\"\n\tconvertErrorsToExceptions=\"true\"\n\tconvertNoticesToExceptions=\"true\"\n\tconvertWarningsToExceptions=\"true\"\n\t>\n\t<testsuites>\n\t\t<!-- Default test suite to run all tests -->\n\t\t<testsuite>\n\t\t\t<directory prefix=\"test-\" suffix=\".php\">tests</directory>\n\t\t</testsuite>\n\t</testsuites>\n\t<filter>\n\t\t<blacklist>\n\t\t\t<directory suffix=\".php\">.</directory>\n\t\t</blacklist>\n\t\t<whitelist>\n\t\t\t<directory suffix=\".php\">./lib</directory>\n\t\t\t<file>./plugin.php</file>\n\t\t</whitelist>\n\t</filter>\n</phpunit>\n"
        },
        {
          "name": "plugin.php",
          "type": "blob",
          "size": 21.5419921875,
          "content": "<?php\n/**\n * Plugin Name: WP REST API\n * Description: JSON-based REST API for WordPress, originally developed as part of GSoC 2013.\n * Author: WP REST API Team\n * Author URI: http://v2.wp-api.org\n * Version: 2.0-beta15\n * Plugin URI: https://github.com/WP-API/WP-API\n * License: GPL2+\n */\n\n/**\n * No-op on 4.7. This plugin is no longer required when using WordPress 4.7. Though there's\n * no big compatibility issues actually running the plugin along with 4.7, there's a chance\n * the filters and actions registered can cause odd edgecases.\n */\nglobal $wp_version;\nif ( version_compare( $wp_version, '4.7-alpha', '>=' ) ) {\n\treturn;\n}\n\n/**\n * WP_REST_Controller class.\n */\nif ( ! class_exists( 'WP_REST_Controller' ) ) {\n\trequire_once dirname( __FILE__ ) . '/lib/endpoints/class-wp-rest-controller.php';\n}\n\n/**\n * WP_REST_Posts_Controller class.\n */\nif ( ! class_exists( 'WP_REST_Posts_Controller' ) ) {\n\trequire_once dirname( __FILE__ ) . '/lib/endpoints/class-wp-rest-posts-controller.php';\n}\n\n/**\n * WP_REST_Attachments_Controller class.\n */\nif ( ! class_exists( 'WP_REST_Attachments_Controller' ) ) {\n\trequire_once dirname( __FILE__ ) . '/lib/endpoints/class-wp-rest-attachments-controller.php';\n}\n\n/**\n * WP_REST_Post_Types_Controller class.\n */\nif ( ! class_exists( 'WP_REST_Post_Types_Controller' ) ) {\n\trequire_once dirname( __FILE__ ) . '/lib/endpoints/class-wp-rest-post-types-controller.php';\n}\n\n/**\n * WP_REST_Post_Statuses_Controller class.\n */\nif ( ! class_exists( 'WP_REST_Post_Statuses_Controller' ) ) {\n\trequire_once dirname( __FILE__ ) . '/lib/endpoints/class-wp-rest-post-statuses-controller.php';\n}\n\n/**\n * WP_REST_Revisions_Controller class.\n */\nif ( ! class_exists( 'WP_REST_Revisions_Controller' ) ) {\n\trequire_once dirname( __FILE__ ) . '/lib/endpoints/class-wp-rest-revisions-controller.php';\n}\n\n/**\n * WP_REST_Taxonomies_Controller class.\n */\nif ( ! class_exists( 'WP_REST_Taxonomies_Controller' ) ) {\n\trequire_once dirname( __FILE__ ) . '/lib/endpoints/class-wp-rest-taxonomies-controller.php';\n}\n\n/**\n * WP_REST_Terms_Controller class.\n */\nif ( ! class_exists( 'WP_REST_Terms_Controller' ) ) {\n\trequire_once dirname( __FILE__ ) . '/lib/endpoints/class-wp-rest-terms-controller.php';\n}\n\n/**\n * WP_REST_Users_Controller class.\n */\nif ( ! class_exists( 'WP_REST_Users_Controller' ) ) {\n\trequire_once dirname( __FILE__ ) . '/lib/endpoints/class-wp-rest-users-controller.php';\n}\n\n/**\n * WP_REST_Comments_Controller class.\n */\nif ( ! class_exists( 'WP_REST_Comments_Controller' ) ) {\n\trequire_once dirname( __FILE__ ) . '/lib/endpoints/class-wp-rest-comments-controller.php';\n}\n\n/**\n * WP_REST_Settings_Controller class.\n */\nif ( ! class_exists( 'WP_REST_Settings_Controller' ) ) {\n\trequire_once dirname( __FILE__ ) . '/lib/endpoints/class-wp-rest-settings-controller.php';\n}\n\n/**\n * WP_REST_Meta_Fields class.\n */\nif ( ! class_exists( 'WP_REST_Meta_Fields' ) ) {\n\trequire_once dirname( __FILE__ ) . '/lib/fields/class-wp-rest-meta-fields.php';\n}\n\n/**\n * WP_REST_Comment_Meta_Fields class.\n */\nif ( ! class_exists( 'WP_REST_Comment_Meta_Fields' ) ) {\n\trequire_once dirname( __FILE__ ) . '/lib/fields/class-wp-rest-comment-meta-fields.php';\n}\n\n/**\n * WP_REST_Post_Meta_Fields class.\n */\nif ( ! class_exists( 'WP_REST_Post_Meta_Fields' ) ) {\n\trequire_once dirname( __FILE__ ) . '/lib/fields/class-wp-rest-post-meta-fields.php';\n}\n\n/**\n * WP_REST_Term_Meta_Fields class.\n */\nif ( ! class_exists( 'WP_REST_Term_Meta_Fields' ) ) {\n\trequire_once dirname( __FILE__ ) . '/lib/fields/class-wp-rest-term-meta-fields.php';\n}\n\n/**\n * WP_REST_User_Meta_Fields class.\n */\nif ( ! class_exists( 'WP_REST_User_Meta_Fields' ) ) {\n\trequire_once dirname( __FILE__ ) . '/lib/fields/class-wp-rest-user-meta-fields.php';\n}\n\n/**\n * REST extras.\n */\ninclude_once( dirname( __FILE__ ) . '/extras.php' );\nrequire_once( dirname( __FILE__ ) . '/core-integration.php' );\n\nadd_filter( 'init', '_add_extra_api_post_type_arguments', 11 );\nadd_action( 'init', '_add_extra_api_taxonomy_arguments', 11 );\nadd_action( 'rest_api_init', 'rest_register_settings', 10 );\nadd_action( 'rest_api_init', 'create_initial_rest_routes', 99 );\n\n/**\n * Adds extra post type registration arguments.\n *\n * These attributes will eventually be committed to core.\n *\n * @since 4.4.0\n *\n * @global array $wp_post_types Registered post types.\n */\nfunction _add_extra_api_post_type_arguments() {\n\tglobal $wp_post_types;\n\n\tif ( isset( $wp_post_types['post'] ) ) {\n\t\t$wp_post_types['post']->show_in_rest = true;\n\t\t$wp_post_types['post']->rest_base = 'posts';\n\t\t$wp_post_types['post']->rest_controller_class = 'WP_REST_Posts_Controller';\n\t}\n\n\tif ( isset( $wp_post_types['page'] ) ) {\n\t\t$wp_post_types['page']->show_in_rest = true;\n\t\t$wp_post_types['page']->rest_base = 'pages';\n\t\t$wp_post_types['page']->rest_controller_class = 'WP_REST_Posts_Controller';\n\t}\n\n\tif ( isset( $wp_post_types['attachment'] ) ) {\n\t\t$wp_post_types['attachment']->show_in_rest = true;\n\t\t$wp_post_types['attachment']->rest_base = 'media';\n\t\t$wp_post_types['attachment']->rest_controller_class = 'WP_REST_Attachments_Controller';\n\t}\n}\n\n/**\n * Adds extra taxonomy registration arguments.\n *\n * These attributes will eventually be committed to core.\n *\n * @since 4.4.0\n *\n * @global array $wp_taxonomies Registered taxonomies.\n */\nfunction _add_extra_api_taxonomy_arguments() {\n\tglobal $wp_taxonomies;\n\n\tif ( isset( $wp_taxonomies['category'] ) ) {\n\t\t$wp_taxonomies['category']->show_in_rest = true;\n\t\t$wp_taxonomies['category']->rest_base = 'categories';\n\t\t$wp_taxonomies['category']->rest_controller_class = 'WP_REST_Terms_Controller';\n\t}\n\n\tif ( isset( $wp_taxonomies['post_tag'] ) ) {\n\t\t$wp_taxonomies['post_tag']->show_in_rest = true;\n\t\t$wp_taxonomies['post_tag']->rest_base = 'tags';\n\t\t$wp_taxonomies['post_tag']->rest_controller_class = 'WP_REST_Terms_Controller';\n\t}\n}\n\n\n/**\n * Register the settings to be used in the REST API.\n *\n * This is required are WordPress Core does not internally register\n * it's settings via `register_rest_setting()`. This should be removed\n * once / if core starts to register settings internally.\n */\nfunction rest_register_settings() {\n\tglobal $wp_version;\n\tif ( version_compare( $wp_version, '4.7-alpha', '<' ) ) {\n\t\treturn;\n\t}\n\n\tregister_setting( 'general', 'blogname', array(\n\t\t'show_in_rest' => array(\n\t\t\t'name' => 'title',\n\t\t),\n\t\t'type'         => 'string',\n\t\t'description'  => __( 'Site title.' ),\n\t) );\n\n\tregister_setting( 'general', 'blogdescription', array(\n\t\t'show_in_rest' => array(\n\t\t\t'name' => 'description',\n\t\t),\n\t\t'type'         => 'string',\n\t\t'description'  => __( 'Site description.' ),\n\t) );\n\n\tregister_setting( 'general', 'siteurl', array(\n\t\t'show_in_rest' => array(\n\t\t\t'name'    => 'url',\n\t\t\t'schema'  => array(\n\t\t\t\t'format' => 'uri',\n\t\t\t),\n\t\t),\n\t\t'type'         => 'string',\n\t\t'description'  => __( 'Site URL.' ),\n\t) );\n\n\tregister_setting( 'general', 'admin_email', array(\n\t\t'show_in_rest' => array(\n\t\t\t'name'    => 'email',\n\t\t\t'schema'  => array(\n\t\t\t\t'format' => 'email',\n\t\t\t),\n\t\t),\n\t\t'type'         => 'string',\n\t\t'description'  => __( 'This address is used for admin purposes. If you change this we will send you an email at your new address to confirm it. The new address will not become active until confirmed.' ),\n\t) );\n\n\tregister_setting( 'general', 'timezone_string', array(\n\t\t'show_in_rest' => array(\n\t\t\t'name' => 'timezone',\n\t\t),\n\t\t'type'         => 'string',\n\t\t'description'  => __( 'A city in the same timezone as you.' ),\n\t) );\n\n\tregister_setting( 'general', 'date_format', array(\n\t\t'show_in_rest' => true,\n\t\t'type'         => 'string',\n\t\t'description'  => __( 'A date format for all date strings.' ),\n\t) );\n\n\tregister_setting( 'general', 'time_format', array(\n\t\t'show_in_rest' => true,\n\t\t'type'         => 'string',\n\t\t'description'  => __( 'A time format for all time strings.' ),\n\t) );\n\n\tregister_setting( 'general', 'start_of_week', array(\n\t\t'show_in_rest' => true,\n\t\t'type'         => 'number',\n\t\t'description'  => __( 'A day number of the week that the week should start on.' ),\n\t) );\n\n\tregister_setting( 'general', 'WPLANG', array(\n\t\t'show_in_rest' => array(\n\t\t\t'name' => 'language',\n\t\t),\n\t\t'type'         => 'string',\n\t\t'description'  => __( 'WordPress locale code.' ),\n\t\t'default'      => 'en_US',\n\t) );\n\n\tregister_setting( 'writing', 'use_smilies', array(\n\t\t'show_in_rest' => true,\n\t\t'type'         => 'boolean',\n\t\t'description'  => __( 'Convert emoticons like :-) and :-P to graphics on display.' ),\n\t\t'default'      => true,\n\t) );\n\n\tregister_setting( 'writing', 'default_category', array(\n\t\t'show_in_rest' => true,\n\t\t'type'         => 'number',\n\t\t'description'  => __( 'Default category.' ),\n\t) );\n\n\tregister_setting( 'writing', 'default_post_format', array(\n\t\t'show_in_rest' => true,\n\t\t'type'         => 'string',\n\t\t'description'  => __( 'Default post format.' ),\n\t) );\n\n\tregister_setting( 'reading', 'posts_per_page', array(\n\t\t'show_in_rest' => true,\n\t\t'type'         => 'number',\n\t\t'description'  => __( 'Blog pages show at most.' ),\n\t\t'default'      => 10,\n\t) );\n}\n\n\nif ( ! function_exists( 'create_initial_rest_routes' ) ) {\n\t/**\n\t * Registers default REST API routes.\n\t *\n\t * @since 4.4.0\n\t */\n\tfunction create_initial_rest_routes() {\n\n\t\tforeach ( get_post_types( array( 'show_in_rest' => true ), 'objects' ) as $post_type ) {\n\t\t\t$class = ! empty( $post_type->rest_controller_class ) ? $post_type->rest_controller_class : 'WP_REST_Posts_Controller';\n\n\t\t\tif ( ! class_exists( $class ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$controller = new $class( $post_type->name );\n\t\t\tif ( ! is_subclass_of( $controller, 'WP_REST_Controller' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$controller->register_routes();\n\n\t\t\tif ( post_type_supports( $post_type->name, 'revisions' ) ) {\n\t\t\t\t$revisions_controller = new WP_REST_Revisions_Controller( $post_type->name );\n\t\t\t\t$revisions_controller->register_routes();\n\t\t\t}\n\t\t}\n\n\t\t// Post types.\n\t\t$controller = new WP_REST_Post_Types_Controller;\n\t\t$controller->register_routes();\n\n\t\t// Post statuses.\n\t\t$controller = new WP_REST_Post_Statuses_Controller;\n\t\t$controller->register_routes();\n\n\t\t// Taxonomies.\n\t\t$controller = new WP_REST_Taxonomies_Controller;\n\t\t$controller->register_routes();\n\n\t\t// Terms.\n\t\tforeach ( get_taxonomies( array( 'show_in_rest' => true ), 'object' ) as $taxonomy ) {\n\t\t\t$class = ! empty( $taxonomy->rest_controller_class ) ? $taxonomy->rest_controller_class : 'WP_REST_Terms_Controller';\n\n\t\t\tif ( ! class_exists( $class ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$controller = new $class( $taxonomy->name );\n\t\t\tif ( ! is_subclass_of( $controller, 'WP_REST_Controller' ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$controller->register_routes();\n\t\t}\n\n\t\t// Users.\n\t\t$controller = new WP_REST_Users_Controller;\n\t\t$controller->register_routes();\n\n\t\t// Comments.\n\t\t$controller = new WP_REST_Comments_Controller;\n\t\t$controller->register_routes();\n\n\t\t// Settings. 4.7+ only.\n\t\tglobal $wp_version;\n\t\tif ( version_compare( $wp_version, '4.7-alpha', '>=' ) ) {\n\t\t\t$controller = new WP_REST_Settings_Controller;\n\t\t\t$controller->register_routes();\n\t\t}\n\t}\n}\n\nif ( ! function_exists( 'rest_authorization_required_code' ) ) {\n\t/**\n\t * Returns a contextual HTTP error code for authorization failure.\n\t *\n\t * @return integer\n\t */\n\tfunction rest_authorization_required_code() {\n\t\treturn is_user_logged_in() ? 403 : 401;\n\t}\n}\n\nif ( ! function_exists( 'register_rest_field' ) ) {\n\t/**\n\t * Registers a new field on an existing WordPress object type.\n\t *\n\t * @global array $wp_rest_additional_fields Holds registered fields, organized\n\t *                                          by object type.\n\t *\n\t * @param string|array $object_type Object(s) the field is being registered\n\t *                                  to, \"post\"|\"term\"|\"comment\" etc.\n\t * @param string $attribute         The attribute name.\n\t * @param array  $args {\n\t *     Optional. An array of arguments used to handle the registered field.\n\t *\n\t *     @type string|array|null $get_callback    Optional. The callback function used to retrieve the field\n\t *                                              value. Default is 'null', the field will not be returned in\n\t *                                              the response.\n\t *     @type string|array|null $update_callback Optional. The callback function used to set and update the\n\t *                                              field value. Default is 'null', the value cannot be set or\n\t *                                              updated.\n\t *     @type string|array|null $schema          Optional. The callback function used to create the schema for\n\t *                                              this field. Default is 'null', no schema entry will be returned.\n\t * }\n\t */\n\tfunction register_rest_field( $object_type, $attribute, $args = array() ) {\n\t\t$defaults = array(\n\t\t\t'get_callback'    => null,\n\t\t\t'update_callback' => null,\n\t\t\t'schema'          => null,\n\t\t);\n\n\t\t$args = wp_parse_args( $args, $defaults );\n\n\t\tglobal $wp_rest_additional_fields;\n\n\t\t$object_types = (array) $object_type;\n\n\t\tforeach ( $object_types as $object_type ) {\n\t\t\t$wp_rest_additional_fields[ $object_type ][ $attribute ] = $args;\n\t\t}\n\t}\n}\n\nif ( ! function_exists( 'register_api_field' ) ) {\n\t/**\n\t * Backwards compat shim\n\t */\n\tfunction register_api_field( $object_type, $attributes, $args = array() ) {\n\t\t_deprecated_function( 'register_api_field', 'WPAPI-2.0', 'register_rest_field' );\n\t\tregister_rest_field( $object_type, $attributes, $args );\n\t}\n}\n\nif ( ! function_exists( 'rest_validate_request_arg' ) ) {\n\t/**\n\t * Validate a request argument based on details registered to the route.\n\t *\n\t * @param  mixed            $value\n\t * @param  WP_REST_Request  $request\n\t * @param  string           $param\n\t * @return WP_Error|boolean\n\t */\n\tfunction rest_validate_request_arg( $value, $request, $param ) {\n\n\t\t$attributes = $request->get_attributes();\n\t\tif ( ! isset( $attributes['args'][ $param ] ) || ! is_array( $attributes['args'][ $param ] ) ) {\n\t\t\treturn true;\n\t\t}\n\t\t$args = $attributes['args'][ $param ];\n\n\t\tif ( ! empty( $args['enum'] ) ) {\n\t\t\tif ( ! in_array( $value, $args['enum'], true ) ) {\n\t\t\t\treturn new WP_Error( 'rest_invalid_param', sprintf( /* translators: 1: parameter, 2: list of valid values */ __( '%1$s is not one of %2$s.' ), $param, implode( ', ', $args['enum'] ) ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( 'integer' === $args['type'] && ! is_numeric( $value ) ) {\n\t\t\treturn new WP_Error( 'rest_invalid_param', sprintf( /* translators: 1: parameter, 2: type name */ __( '%1$s is not of type %2$s.' ), $param, 'integer' ) );\n\t\t}\n\n\t\tif ( 'boolean' === $args['type'] && ! rest_is_boolean( $value ) ) {\n\t\t\treturn new WP_Error( 'rest_invalid_param', sprintf( /* translators: 1: parameter, 2: type name */ __( '%1$s is not of type %2$s.' ), $value, 'boolean' ) );\n\t\t}\n\n\t\tif ( 'string' === $args['type'] && ! is_string( $value ) ) {\n\t\t\treturn new WP_Error( 'rest_invalid_param', sprintf( /* translators: 1: parameter, 2: type name */ __( '%1$s is not of type %2$s.' ), $param, 'string' ) );\n\t\t}\n\n\t\tif ( isset( $args['format'] ) ) {\n\t\t\tswitch ( $args['format'] ) {\n\t\t\t\tcase 'date-time' :\n\t\t\t\t\tif ( ! rest_parse_date( $value ) ) {\n\t\t\t\t\t\treturn new WP_Error( 'rest_invalid_date', __( 'The date you provided is invalid.' ) );\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'email' :\n\t\t\t\t\tif ( ! is_email( $value ) ) {\n\t\t\t\t\t\treturn new WP_Error( 'rest_invalid_email', __( 'The email address you provided is invalid.' ) );\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ipv4' :\n\t\t\t\t\tif ( ! rest_is_ip_address( $value ) ) {\n\t\t\t\t\t\treturn new WP_Error( 'rest_invalid_param', sprintf( __( '%s is not a valid IP address.' ), $value ) );\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif ( in_array( $args['type'], array( 'numeric', 'integer' ), true ) && ( isset( $args['minimum'] ) || isset( $args['maximum'] ) ) ) {\n\t\t\tif ( isset( $args['minimum'] ) && ! isset( $args['maximum'] ) ) {\n\t\t\t\tif ( ! empty( $args['exclusiveMinimum'] ) && $value <= $args['minimum'] ) {\n\t\t\t\t\treturn new WP_Error( 'rest_invalid_param', sprintf( __( '%1$s must be greater than %2$d (exclusive)' ), $param, $args['minimum'] ) );\n\t\t\t\t} elseif ( empty( $args['exclusiveMinimum'] ) && $value < $args['minimum'] ) {\n\t\t\t\t\treturn new WP_Error( 'rest_invalid_param', sprintf( __( '%1$s must be greater than %2$d (inclusive)' ), $param, $args['minimum'] ) );\n\t\t\t\t}\n\t\t\t} elseif ( isset( $args['maximum'] ) && ! isset( $args['minimum'] ) ) {\n\t\t\t\tif ( ! empty( $args['exclusiveMaximum'] ) && $value >= $args['maximum'] ) {\n\t\t\t\t\treturn new WP_Error( 'rest_invalid_param', sprintf( __( '%1$s must be less than %2$d (exclusive)' ), $param, $args['maximum'] ) );\n\t\t\t\t} elseif ( empty( $args['exclusiveMaximum'] ) && $value > $args['maximum'] ) {\n\t\t\t\t\treturn new WP_Error( 'rest_invalid_param', sprintf( __( '%1$s must be less than %2$d (inclusive)' ), $param, $args['maximum'] ) );\n\t\t\t\t}\n\t\t\t} elseif ( isset( $args['maximum'] ) && isset( $args['minimum'] ) ) {\n\t\t\t\tif ( ! empty( $args['exclusiveMinimum'] ) && ! empty( $args['exclusiveMaximum'] ) ) {\n\t\t\t\t\tif ( $value >= $args['maximum'] || $value <= $args['minimum'] ) {\n\t\t\t\t\t\treturn new WP_Error( 'rest_invalid_param', sprintf( /* translators: 1: parameter, 2: minimum number, 3: maximum number */ __( '%1$s must be between %2$d (exclusive) and %3$d (exclusive)' ), $param, $args['minimum'], $args['maximum'] ) );\n\t\t\t\t\t}\n\t\t\t\t} elseif ( empty( $args['exclusiveMinimum'] ) && ! empty( $args['exclusiveMaximum'] ) ) {\n\t\t\t\t\tif ( $value >= $args['maximum'] || $value < $args['minimum'] ) {\n\t\t\t\t\t\treturn new WP_Error( 'rest_invalid_param', sprintf( /* translators: 1: parameter, 2: minimum number, 3: maximum number */ __( '%1$s must be between %2$d (inclusive) and %3$d (exclusive)' ), $param, $args['minimum'], $args['maximum'] ) );\n\t\t\t\t\t}\n\t\t\t\t} elseif ( ! empty( $args['exclusiveMinimum'] ) && empty( $args['exclusiveMaximum'] ) ) {\n\t\t\t\t\tif ( $value > $args['maximum'] || $value <= $args['minimum'] ) {\n\t\t\t\t\t\treturn new WP_Error( 'rest_invalid_param', sprintf( /* translators: 1: parameter, 2: minimum number, 3: maximum number */ __( '%1$s must be between %2$d (exclusive) and %3$d (inclusive)' ), $param, $args['minimum'], $args['maximum'] ) );\n\t\t\t\t\t}\n\t\t\t\t} elseif ( empty( $args['exclusiveMinimum'] ) && empty( $args['exclusiveMaximum'] ) ) {\n\t\t\t\t\tif ( $value > $args['maximum'] || $value < $args['minimum'] ) {\n\t\t\t\t\t\treturn new WP_Error( 'rest_invalid_param', sprintf( /* translators: 1: parameter, 2: minimum number, 3: maximum number */ __( '%1$s must be between %2$d (inclusive) and %3$d (inclusive)' ), $param, $args['minimum'], $args['maximum'] ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\nif ( ! function_exists( 'rest_sanitize_request_arg' ) ) {\n\t/**\n\t * Sanitize a request argument based on details registered to the route.\n\t *\n\t * @param  mixed            $value\n\t * @param  WP_REST_Request  $request\n\t * @param  string           $param\n\t * @return mixed\n\t */\n\tfunction rest_sanitize_request_arg( $value, $request, $param ) {\n\n\t\t$attributes = $request->get_attributes();\n\t\tif ( ! isset( $attributes['args'][ $param ] ) || ! is_array( $attributes['args'][ $param ] ) ) {\n\t\t\treturn $value;\n\t\t}\n\t\t$args = $attributes['args'][ $param ];\n\n\t\tif ( 'integer' === $args['type'] ) {\n\t\t\treturn (int) $value;\n\t\t}\n\n\t\tif ( 'boolean' === $args['type'] ) {\n\t\t\treturn rest_sanitize_boolean( $value );\n\t\t}\n\n\t\tif ( isset( $args['format'] ) ) {\n\t\t\tswitch ( $args['format'] ) {\n\t\t\t\tcase 'date-time' :\n\t\t\t\t\treturn sanitize_text_field( $value );\n\n\t\t\t\tcase 'email' :\n\t\t\t\t\t/*\n\t\t\t\t\t * sanitize_email() validates, which would be unexpected\n\t\t\t\t\t */\n\t\t\t\t\treturn sanitize_text_field( $value );\n\n\t\t\t\tcase 'uri' :\n\t\t\t\t\treturn esc_url_raw( $value );\n\n\t\t\t\tcase 'ipv4' :\n\t\t\t\t\treturn sanitize_text_field( $value );\n\t\t\t}\n\t\t}\n\n\t\treturn $value;\n\t}\n}\n\n\nif ( ! function_exists( 'rest_parse_request_arg' ) ) {\n\t/**\n\t * Parse a request argument based on details registered to the route.\n\t *\n\t * Runs a validation check and sanitizes the value, primarily to be used via\n\t * the `sanitize_callback` arguments in the endpoint args registration.\n\t *\n\t * @param  mixed            $value\n\t * @param  WP_REST_Request  $request\n\t * @param  string           $param\n\t * @return mixed\n\t */\n\tfunction rest_parse_request_arg( $value, $request, $param ) {\n\n\t\t$is_valid = rest_validate_request_arg( $value, $request, $param );\n\n\t\tif ( is_wp_error( $is_valid ) ) {\n\t\t\treturn $is_valid;\n\t\t}\n\n\t\t$value = rest_sanitize_request_arg( $value, $request, $param );\n\n\t\treturn $value;\n\t}\n}\n\nif ( ! function_exists( 'rest_is_ip_address' ) ) {\n\t/**\n\t * Determines if a IPv4 address is valid.\n\t *\n\t * Does not handle IPv6 addresses.\n\t *\n\t * @param  string $ipv4 IP 32-bit address.\n\t * @return string|false The valid IPv4 address, otherwise false.\n\t */\n\tfunction rest_is_ip_address( $ipv4 ) {\n\t\t$pattern = '/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/';\n\n\t\tif ( ! preg_match( $pattern, $ipv4 ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn $ipv4;\n\t}\n}\n\n/**\n * Changes a boolean-like value into the proper boolean value.\n *\n * @param bool|string|int $value The value being evaluated.\n * @return boolean Returns the proper associated boolean value.\n */\nif ( ! function_exists( 'rest_sanitize_boolean' ) ) {\n\tfunction rest_sanitize_boolean( $value ) {\n\t\t// String values are translated to `true`; make sure 'false' is false.\n\t\tif ( is_string( $value )  ) {\n\t\t\t$value = strtolower( $value );\n\t\t\tif ( in_array( $value, array( 'false', '0' ), true ) ) {\n\t\t\t\t$value = false;\n\t\t\t}\n\t\t}\n\n\t\t// Everything else will map nicely to boolean.\n\t\treturn (boolean) $value;\n\t}\n}\n\n/**\n * Determines if a given value is boolean-like.\n *\n * @param bool|string $maybe_bool The value being evaluated.\n * @return boolean True if a boolean, otherwise false.\n */\nif ( ! function_exists( 'rest_is_boolean' ) ) {\n\tfunction rest_is_boolean( $maybe_bool ) {\n\t\tif ( is_bool( $maybe_bool ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( is_string( $maybe_bool ) ) {\n\t\t\t$maybe_bool = strtolower( $maybe_bool );\n\n\t\t\t$valid_boolean_values = array(\n\t\t\t\t'false',\n\t\t\t\t'true',\n\t\t\t\t'0',\n\t\t\t\t'1',\n\t\t\t);\n\n\t\t\treturn in_array( $maybe_bool, $valid_boolean_values, true );\n\t\t}\n\n\t\tif ( is_int( $maybe_bool ) ) {\n\t\t\treturn in_array( $maybe_bool, array( 0, 1 ), true );\n\t\t}\n\n\t\treturn false;\n\t}\n}\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "wp-api.js",
          "type": "blob",
          "size": 39.6201171875,
          "content": "(function( window, undefined ) {\n\n\t'use strict';\n\n\t/**\n\t * Initialise the WP_API.\n\t */\n\tfunction WP_API() {\n\t\tthis.models = {};\n\t\tthis.collections = {};\n\t\tthis.views = {};\n\t}\n\n\twindow.wp            = window.wp || {};\n\twp.api               = wp.api || new WP_API();\n\twp.api.versionString = wp.api.versionString || 'wp/v2/';\n\n\t// Alias _includes to _.contains, ensuring it is available if lodash is used.\n\tif ( ! _.isFunction( _.includes ) && _.isFunction( _.contains ) ) {\n\t  _.includes = _.contains;\n\t}\n\n})( window );\n\n(function( window, undefined ) {\n\n\t'use strict';\n\n\tvar pad, r;\n\n\twindow.wp = window.wp || {};\n\twp.api = wp.api || {};\n\twp.api.utils = wp.api.utils || {};\n\n\t/**\n\t * ECMAScript 5 shim, adapted from MDN.\n\t * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n\t */\n\tif ( ! Date.prototype.toISOString ) {\n\t\tpad = function( number ) {\n\t\t\tr = String( number );\n\t\t\tif ( 1 === r.length ) {\n\t\t\t\tr = '0' + r;\n\t\t\t}\n\n\t\t\treturn r;\n\t\t};\n\n\t\tDate.prototype.toISOString = function() {\n\t\t\treturn this.getUTCFullYear() +\n\t\t\t\t'-' + pad( this.getUTCMonth() + 1 ) +\n\t\t\t\t'-' + pad( this.getUTCDate() ) +\n\t\t\t\t'T' + pad( this.getUTCHours() ) +\n\t\t\t\t':' + pad( this.getUTCMinutes() ) +\n\t\t\t\t':' + pad( this.getUTCSeconds() ) +\n\t\t\t\t'.' + String( ( this.getUTCMilliseconds() / 1000 ).toFixed( 3 ) ).slice( 2, 5 ) +\n\t\t\t\t'Z';\n\t\t};\n\t}\n\n\t/**\n\t * Parse date into ISO8601 format.\n\t *\n\t * @param {Date} date.\n\t */\n\twp.api.utils.parseISO8601 = function( date ) {\n\t\tvar timestamp, struct, i, k,\n\t\t\tminutesOffset = 0,\n\t\t\tnumericKeys = [ 1, 4, 5, 6, 7, 10, 11 ];\n\n\t\t// ES5 §15.9.4.2 states that the string should attempt to be parsed as a Date Time String Format string\n\t\t// before falling back to any implementation-specific date parsing, so that’s what we do, even if native\n\t\t// implementations could be faster.\n\t\t//              1 YYYY                2 MM       3 DD           4 HH    5 mm       6 ss        7 msec        8 Z 9 ±    10 tzHH    11 tzmm\n\t\tif ( ( struct = /^(\\d{4}|[+\\-]\\d{6})(?:-(\\d{2})(?:-(\\d{2}))?)?(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(?:(Z)|([+\\-])(\\d{2})(?::(\\d{2}))?)?)?$/.exec( date ) ) ) {\n\n\t\t\t// Avoid NaN timestamps caused by “undefined” values being passed to Date.UTC.\n\t\t\tfor ( i = 0; ( k = numericKeys[i] ); ++i ) {\n\t\t\t\tstruct[k] = +struct[k] || 0;\n\t\t\t}\n\n\t\t\t// Allow undefined days and months.\n\t\t\tstruct[2] = ( +struct[2] || 1 ) - 1;\n\t\t\tstruct[3] = +struct[3] || 1;\n\n\t\t\tif ( 'Z' !== struct[8]  && undefined !== struct[9] ) {\n\t\t\t\tminutesOffset = struct[10] * 60 + struct[11];\n\n\t\t\t\tif ( '+' === struct[9] ) {\n\t\t\t\t\tminutesOffset = 0 - minutesOffset;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttimestamp = Date.UTC( struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7] );\n\t\t} else {\n\t\t\ttimestamp = Date.parse ? Date.parse( date ) : NaN;\n\t\t}\n\n\t\treturn timestamp;\n\t};\n\n\t/**\n\t * Helper function for getting the root URL.\n\t * @return {[type]} [description]\n\t */\n\twp.api.utils.getRootUrl = function() {\n\t\treturn window.location.origin ?\n\t\t\twindow.location.origin + '/' :\n\t\t\twindow.location.protocol + '/' + window.location.host + '/';\n\t};\n\n\t/**\n\t * Helper for capitalizing strings.\n\t */\n\twp.api.utils.capitalize = function( str ) {\n\t\tif ( _.isUndefined( str ) ) {\n\t\t\treturn str;\n\t\t}\n\t\treturn str.charAt( 0 ).toUpperCase() + str.slice( 1 );\n\t};\n\n\t/**\n\t * Extract a route part based on negative index.\n\t *\n\t * @param {string} route The endpoint route.\n\t * @param {int}    part  The number of parts from the end of the route to retrieve. Default 1.\n\t *                       Example route `/a/b/c`: part 1 is `c`, part 2 is `b`, part 3 is `a`.\n\t */\n\twp.api.utils.extractRoutePart = function( route, part ) {\n\t\tvar routeParts;\n\n\t\tpart  = part || 1;\n\n\t\t// Remove versions string from route to avoid returning it.\n\t\troute = route.replace( wp.api.versionString, '' );\n\t\trouteParts = route.split( '/' ).reverse();\n\t\tif ( _.isUndefined( routeParts[ --part ] ) ) {\n\t\t\treturn '';\n\t\t}\n\t\treturn routeParts[ part ];\n\t};\n\n\t/**\n\t * Extract a parent name from a passed route.\n\t *\n\t * @param {string} route The route to extract a name from.\n\t */\n\twp.api.utils.extractParentName = function( route ) {\n\t\tvar name,\n\t\t\tlastSlash = route.lastIndexOf( '_id>[\\\\d]+)/' );\n\n\t\tif ( lastSlash < 0 ) {\n\t\t\treturn '';\n\t\t}\n\t\tname = route.substr( 0, lastSlash - 1 );\n\t\tname = name.split( '/' );\n\t\tname.pop();\n\t\tname = name.pop();\n\t\treturn name;\n\t};\n\n\t/**\n\t * Add args and options to a model prototype from a route's endpoints.\n\t *\n\t * @param {array}  routeEndpoints Array of route endpoints.\n\t * @param {Object} modelInstance  An instance of the model (or collection)\n\t *                                to add the args to.\n\t */\n\twp.api.utils.decorateFromRoute = function( routeEndpoints, modelInstance ) {\n\n\t\t/**\n\t\t * Build the args based on route endpoint data.\n\t\t */\n\t\t_.each( routeEndpoints, function( routeEndpoint ) {\n\n\t\t\t// Add post and edit endpoints as model args.\n\t\t\tif ( _.includes( routeEndpoint.methods, 'POST' ) || _.includes( routeEndpoint.methods, 'PUT' ) ) {\n\n\t\t\t\t// Add any non empty args, merging them into the args object.\n\t\t\t\tif ( ! _.isEmpty( routeEndpoint.args ) ) {\n\n\t\t\t\t\t// Set as defauls if no args yet.\n\t\t\t\t\tif ( _.isEmpty( modelInstance.prototype.args ) ) {\n\t\t\t\t\t\tmodelInstance.prototype.args = routeEndpoint.args;\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// We already have args, merge these new args in.\n\t\t\t\t\t\tmodelInstance.prototype.args = _.union( routeEndpoint.args, modelInstance.prototype.defaults );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Add GET method as model options.\n\t\t\t\tif ( _.includes( routeEndpoint.methods, 'GET' ) ) {\n\n\t\t\t\t\t// Add any non empty args, merging them into the defaults object.\n\t\t\t\t\tif ( ! _.isEmpty( routeEndpoint.args ) ) {\n\n\t\t\t\t\t\t// Set as defauls if no defaults yet.\n\t\t\t\t\t\tif ( _.isEmpty( modelInstance.prototype.options ) ) {\n\t\t\t\t\t\t\tmodelInstance.prototype.options = routeEndpoint.args;\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// We already have options, merge these new args in.\n\t\t\t\t\t\t\tmodelInstance.prototype.options = _.union( routeEndpoint.args, modelInstance.prototype.options );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Add mixins and helpers to models depending on their defaults.\n\t *\n\t * @param {Backbone Model} model          The model to attach helpers and mixins to.\n\t * @param {string}         modelClassName The classname of the constructed model.\n\t * @param {Object} \t       loadingObjects An object containing the models and collections we are building.\n\t */\n\twp.api.utils.addMixinsAndHelpers = function( model, modelClassName, loadingObjects ) {\n\n\t\tvar hasDate = false,\n\n\t\t\t/**\n\t\t\t * Array of parseable dates.\n\t\t\t *\n\t\t\t * @type {string[]}.\n\t\t\t */\n\t\t\tparseableDates = [ 'date', 'modified', 'date_gmt', 'modified_gmt' ],\n\n\t\t\t/**\n\t\t\t * Mixin for all content that is time stamped.\n\t\t\t *\n\t\t\t * This mixin converts between mysql timestamps and JavaScript Dates when syncing a model\n\t\t\t * to or from the server. For example, a date stored as `2015-12-27T21:22:24` on the server\n\t\t\t * gets expanded to `Sun Dec 27 2015 14:22:24 GMT-0700 (MST)` when the model is fetched.\n\t\t\t *\n\t\t\t * @type {{toJSON: toJSON, parse: parse}}.\n\t\t\t */\n\t\t\tTimeStampedMixin = {\n\n\t\t\t\t/**\n\t\t\t\t * Prepare a JavaScript Date for transmitting to the server.\n\t\t\t\t *\n\t\t\t\t * This helper function accepts a field and Date object. It converts the passed Date\n\t\t\t\t * to an ISO string and sets that on the model field.\n\t\t\t\t *\n\t\t\t\t * @param {Date}   date   A JavaScript date object. WordPress expects dates in UTC.\n\t\t\t\t * @param {string} field  The date field to set. One of 'date', 'date_gmt', 'date_modified'\n\t\t\t\t *                        or 'date_modified_gmt'. Optional, defaults to 'date'.\n\t\t\t\t */\n\t\t\t\tsetDate: function( date, field ) {\n\t\t\t\t\tvar theField = field || 'date';\n\n\t\t\t\t\t// Don't alter non parsable date fields.\n\t\t\t\t\tif ( _.indexOf( parseableDates, theField ) < 0 ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.set( theField, date.toISOString() );\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * Get a JavaScript Date from the passed field.\n\t\t\t\t *\n\t\t\t\t * WordPress returns 'date' and 'date_modified' in the timezone of the server as well as\n\t\t\t\t * UTC dates as 'date_gmt' and 'date_modified_gmt'. Draft posts do not include UTC dates.\n\t\t\t\t *\n\t\t\t\t * @param {string} field  The date field to set. One of 'date', 'date_gmt', 'date_modified'\n\t\t\t\t *                        or 'date_modified_gmt'. Optional, defaults to 'date'.\n\t\t\t\t */\n\t\t\t\tgetDate: function( field ) {\n\t\t\t\t\tvar theField   = field || 'date',\n\t\t\t\t\t\ttheISODate = this.get( theField );\n\n\t\t\t\t\t// Only get date fields and non null values.\n\t\t\t\t\tif ( _.indexOf( parseableDates, theField ) < 0 || _.isNull( theISODate ) ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Date( wp.api.utils.parseISO8601( theISODate ) );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Build a helper function to retrieve related model.\n\t\t\t *\n\t\t\t * @param  {string} parentModel      The parent model.\n\t\t\t * @param  {int}    modelId          The model ID if the object to request\n\t\t\t * @param  {string} modelName        The model name to use when constructing the model.\n\t\t\t * @param  {string} embedSourcePoint Where to check the embedds object for _embed data.\n\t\t\t * @param  {string} embedCheckField  Which model field to check to see if the model has data.\n\t\t\t *\n\t\t\t * @return {Deferred.promise}        A promise which resolves to the constructed model.\n\t\t\t */\n\t\t\tbuildModelGetter = function( parentModel, modelId, modelName, embedSourcePoint, embedCheckField ) {\n\t\t\t\tvar getModel, embeddeds, attributes, deferred;\n\n\t\t\t\tdeferred  = jQuery.Deferred();\n\t\t\t\tembeddeds = parentModel.get( '_embedded' ) || {};\n\n\t\t\t\t// Verify that we have a valied object id.\n\t\t\t\tif ( ! _.isNumber( modelId ) || 0 === modelId ) {\n\t\t\t\t\tdeferred.reject();\n\t\t\t\t\treturn deferred;\n\t\t\t\t}\n\n\t\t\t\t// If we have embedded object data, use that when constructing the getModel.\n\t\t\t\tif ( embeddeds[ embedSourcePoint ] ) {\n\t\t\t\t\tattributes = _.findWhere( embeddeds[ embedSourcePoint ], { id: modelId } );\n\t\t\t\t}\n\n\t\t\t\t// Otherwise use the modelId.\n\t\t\t\tif ( ! attributes ) {\n\t\t\t\t\tattributes = { id: modelId };\n\t\t\t\t}\n\n\t\t\t\t// Create the new getModel model.\n\t\t\t\tgetModel = new wp.api.models[ modelName ]( attributes );\n\n\t\t\t\t// If we didn’t have an embedded getModel, fetch the getModel data.\n\t\t\t\tif ( ! getModel.get( embedCheckField ) ) {\n\t\t\t\t\tgetModel.fetch( { success: function( getModel ) {\n\t\t\t\t\t\tdeferred.resolve( getModel );\n\t\t\t\t\t} } );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.resolve( getModel );\n\t\t\t\t}\n\n\t\t\t\t// Return a promise.\n\t\t\t\treturn deferred.promise();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Build a helper to retrieve a collection.\n\t\t\t *\n\t\t\t * @param  {string} parentModel      The parent model.\n\t\t\t * @param  {string} collectionName   The name to use when constructing the collection.\n\t\t\t * @param  {string} embedSourcePoint Where to check the embedds object for _embed data.\n\t\t\t * @param  {string} embedIndex       An addiitonal optional index for the _embed data.\n\t\t\t *\n\t\t\t * @return {Deferred.promise}        A promise which resolves to the constructed collection.\n\t\t\t */\n\t\t\tbuildCollectionGetter = function( parentModel, collectionName, embedSourcePoint, embedIndex ) {\n\t\t\t\t/**\n\t\t\t\t * Returns a promise that resolves to the requested collection\n\t\t\t\t *\n\t\t\t\t * Uses the embedded data if available, otherwises fetches the\n\t\t\t\t * data from the server.\n\t\t\t\t *\n\t\t\t\t * @return {Deferred.promise} promise Resolves to a wp.api.collections[ collectionName ]\n\t\t\t\t * collection.\n\t\t\t\t */\n\t\t\t\tvar postId, embeddeds, getObjects,\n\t\t\t\t\tclassProperties = '',\n\t\t\t\t\tproperties      = '',\n\t\t\t\t\tdeferred        = jQuery.Deferred();\n\n\t\t\t\tpostId    = parentModel.get( 'id' );\n\t\t\t\tembeddeds = parentModel.get( '_embedded' ) || {};\n\n\t\t\t\t// Verify that we have a valied post id.\n\t\t\t\tif ( ! _.isNumber( postId ) || 0 === postId ) {\n\t\t\t\t\tdeferred.reject();\n\t\t\t\t\treturn deferred;\n\t\t\t\t}\n\n\t\t\t\t// If we have embedded getObjects data, use that when constructing the getObjects.\n\t\t\t\tif ( ! _.isUndefined( embedSourcePoint ) && ! _.isUndefined( embeddeds[ embedSourcePoint ] ) ) {\n\n\t\t\t\t\t// Some embeds also include an index offset, check for that.\n\t\t\t\t\tif ( _.isUndefined( embedIndex ) ) {\n\n\t\t\t\t\t\t// Use the embed source point directly.\n\t\t\t\t\t\tproperties = embeddeds[ embedSourcePoint ];\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Add the index to the embed source point.\n\t\t\t\t\t\tproperties = embeddeds[ embedSourcePoint ][ embedIndex ];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\t// Otherwise use the postId.\n\t\t\t\t\tclassProperties = { parent: postId };\n\t\t\t\t}\n\n\t\t\t\t// Create the new getObjects collection.\n\t\t\t\tgetObjects = new wp.api.collections[ collectionName ]( properties, classProperties );\n\n\t\t\t\t// If we didn’t have embedded getObjects, fetch the getObjects data.\n\t\t\t\tif ( _.isUndefined( getObjects.models[0] ) ) {\n\t\t\t\t\tgetObjects.fetch( { success: function( getObjects ) {\n\n\t\t\t\t\t\t// Add a helper 'parent_post' attribute onto the model.\n\t\t\t\t\t\tsetHelperParentPost( getObjects, postId );\n\t\t\t\t\t\tdeferred.resolve( getObjects );\n\t\t\t\t\t} } );\n\t\t\t\t} else {\n\n\t\t\t\t\t// Add a helper 'parent_post' attribute onto the model.\n\t\t\t\t\tsetHelperParentPost( getObjects, postId );\n\t\t\t\t\tdeferred.resolve( getObjects );\n\t\t\t\t}\n\n\t\t\t\t// Return a promise.\n\t\t\t\treturn deferred.promise();\n\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Set the model post parent.\n\t\t\t */\n\t\t\tsetHelperParentPost = function( collection, postId ) {\n\n\t\t\t\t// Attach post_parent id to the collection.\n\t\t\t\t_.each( collection.models, function( model ) {\n\t\t\t\t\tmodel.set( 'parent_post', postId );\n\t\t\t\t} );\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Add a helper funtion to handle post Meta.\n\t\t\t */\n\t\t\tMetaMixin = {\n\t\t\t\tgetMeta: function() {\n\t\t\t\t\treturn buildCollectionGetter( this, 'PostMeta', 'https://api.w.org/meta' );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Add a helper funtion to handle post Revisions.\n\t\t\t */\n\t\t\tRevisionsMixin = {\n\t\t\t\tgetRevisions: function() {\n\t\t\t\t\treturn buildCollectionGetter( this, 'PostRevisions' );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Add a helper funtion to handle post Tags.\n\t\t\t */\n\t\t\tTagsMixin = {\n\n\t\t\t\t/**\n\t\t\t\t * Get the tags for a post.\n\t\t\t\t *\n\t\t\t\t * @return {Deferred.promise} promise Resolves to an array of tags.\n\t\t\t\t */\n\t\t\t\tgetTags: function() {\n\t\t\t\t\tvar tagIds = this.get( 'tags' ),\n\t\t\t\t\t\ttags  = new wp.api.collections.Tags();\n\n\t\t\t\t\t// Resolve with an empty array if no tags.\n\t\t\t\t\tif ( _.isEmpty( tagIds ) ) {\n\t\t\t\t\t\treturn jQuery.Deferred().resolve( [] );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn tags.fetch( { data: { include: tagIds } } );\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * Set the tags for a post.\n\t\t\t\t *\n\t\t\t\t * Accepts an array of tag slugs, or a Tags collection.\n\t\t\t\t *\n\t\t\t\t * @param {array|Backbone.Collection} tags The tags to set on the post.\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\tsetTags: function( tags ) {\n\t\t\t\t\tvar allTags, newTag,\n\t\t\t\t\t\tself = this,\n\t\t\t\t\t\tnewTags = [];\n\n\t\t\t\t\tif ( _.isString( tags ) ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If this is an array of slugs, build a collection.\n\t\t\t\t\tif ( _.isArray( tags ) ) {\n\n\t\t\t\t\t\t// Get all the tags.\n\t\t\t\t\t\tallTags = new wp.api.collections.Tags();\n\t\t\t\t\t\tallTags.fetch( {\n\t\t\t\t\t\t\tdata:    { per_page: 100 },\n\t\t\t\t\t\t\tsuccess: function( alltags ) {\n\n\t\t\t\t\t\t\t\t// Find the passed tags and set them up.\n\t\t\t\t\t\t\t\t_.each( tags, function( tag ) {\n\t\t\t\t\t\t\t\t\tnewTag = new wp.api.models.Tag( alltags.findWhere( { slug: tag } ) );\n\n\t\t\t\t\t\t\t\t\t// Tie the new tag to the post.\n\t\t\t\t\t\t\t\t\tnewTag.set( 'parent_post', self.get( 'id' ) );\n\n\t\t\t\t\t\t\t\t\t// Add the new tag to the collection.\n\t\t\t\t\t\t\t\t\tnewTags.push( newTag );\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t\ttags = new wp.api.collections.Tags( newTags );\n\t\t\t\t\t\t\t\tself.setTagsWithCollection( tags );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.setTagsWithCollection( tags );\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * Set the tags for a post.\n\t\t\t\t *\n\t\t\t\t * Accepts a Tags collection.\n\t\t\t\t *\n\t\t\t\t * @param {array|Backbone.Collection} tags The tags to set on the post.\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\tsetTagsWithCollection: function( tags ) {\n\n\t\t\t\t\t// Pluck out the category ids.\n\t\t\t\t\tthis.set( 'tags', tags.pluck( 'id' ) );\n\t\t\t\t\treturn this.save();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Add a helper funtion to handle post Categories.\n\t\t\t */\n\t\t\tCategoriesMixin = {\n\n\t\t\t\t/**\n\t\t\t\t * Get a the categories for a post.\n\t\t\t\t *\n\t\t\t\t * @return {Deferred.promise} promise Resolves to an array of categories.\n\t\t\t\t */\n\t\t\t\tgetCategories: function() {\n\t\t\t\t\tvar categoryIds = this.get( 'categories' ),\n\t\t\t\t\t\tcategories  = new wp.api.collections.Categories();\n\n\t\t\t\t\t// Resolve with an empty array if no categories.\n\t\t\t\t\tif ( _.isEmpty( categoryIds ) ) {\n\t\t\t\t\t\treturn jQuery.Deferred().resolve( [] );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn categories.fetch( { data: { include: categoryIds } } );\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * Set the categories for a post.\n\t\t\t\t *\n\t\t\t\t * Accepts an array of category slugs, or a Categories collection.\n\t\t\t\t *\n\t\t\t\t * @param {array|Backbone.Collection} categories The categories to set on the post.\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\tsetCategories: function( categories ) {\n\t\t\t\t\tvar allCategories, newCategory,\n\t\t\t\t\t\tself = this,\n\t\t\t\t\t\tnewCategories = [];\n\n\t\t\t\t\tif ( _.isString( categories ) ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If this is an array of slugs, build a collection.\n\t\t\t\t\tif ( _.isArray( categories ) ) {\n\n\t\t\t\t\t\t// Get all the categories.\n\t\t\t\t\t\tallCategories = new wp.api.collections.Categories();\n\t\t\t\t\t\tallCategories.fetch( {\n\t\t\t\t\t\t\tdata:    { per_page: 100 },\n\t\t\t\t\t\t\tsuccess: function( allcats ) {\n\n\t\t\t\t\t\t\t\t// Find the passed categories and set them up.\n\t\t\t\t\t\t\t\t_.each( categories, function( category ) {\n\t\t\t\t\t\t\t\t\tnewCategory = new wp.api.models.Category( allcats.findWhere( { slug: category } ) );\n\n\t\t\t\t\t\t\t\t\t// Tie the new category to the post.\n\t\t\t\t\t\t\t\t\tnewCategory.set( 'parent_post', self.get( 'id' ) );\n\n\t\t\t\t\t\t\t\t\t// Add the new category to the collection.\n\t\t\t\t\t\t\t\t\tnewCategories.push( newCategory );\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t\tcategories = new wp.api.collections.Categories( newCategories );\n\t\t\t\t\t\t\t\tself.setCategoriesWithCollection( categories );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.setCategoriesWithCollection( categories );\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * Set the categories for a post.\n\t\t\t\t *\n\t\t\t\t * Accepts Categories collection.\n\t\t\t\t *\n\t\t\t\t * @param {array|Backbone.Collection} categories The categories to set on the post.\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\tsetCategoriesWithCollection: function( categories ) {\n\n\t\t\t\t\t// Pluck out the category ids.\n\t\t\t\t\tthis.set( 'categories', categories.pluck( 'id' ) );\n\t\t\t\t\treturn this.save();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Add a helper function to retrieve the author user model.\n\t\t\t */\n\t\t\tAuthorMixin = {\n\t\t\t\tgetAuthorUser: function() {\n\t\t\t\t\treturn buildModelGetter( this, this.get( 'author' ), 'User', 'author', 'name' );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Add a helper function to retrieve the featured media.\n\t\t\t */\n\t\t\tFeaturedMediaMixin = {\n\t\t\t\tgetFeaturedMedia: function() {\n\t\t\t\t\treturn buildModelGetter( this, this.get( 'featured_media' ), 'Media', 'wp:featuredmedia', 'source_url' );\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Exit if we don't have valid model defaults.\n\t\tif ( _.isUndefined( model.prototype.args ) ) {\n\t\t\treturn model;\n\t\t}\n\n\t\t// Go thru the parsable date fields, if our model contains any of them it gets the TimeStampedMixin.\n\t\t_.each( parseableDates, function( theDateKey ) {\n\t\t\tif ( ! _.isUndefined( model.prototype.args[ theDateKey ] ) ) {\n\t\t\t\thasDate = true;\n\t\t\t}\n\t\t} );\n\n\t\t// Add the TimeStampedMixin for models that contain a date field.\n\t\tif ( hasDate ) {\n\t\t\tmodel = model.extend( TimeStampedMixin );\n\t\t}\n\n\t\t// Add the AuthorMixin for models that contain an author.\n\t\tif ( ! _.isUndefined( model.prototype.args.author ) ) {\n\t\t\tmodel = model.extend( AuthorMixin );\n\t\t}\n\n\t\t// Add the FeaturedMediaMixin for models that contain a featured_media.\n\t\tif ( ! _.isUndefined( model.prototype.args.featured_media ) ) {\n\t\t\tmodel = model.extend( FeaturedMediaMixin );\n\t\t}\n\n\t\t// Add the CategoriesMixin for models that support categories collections.\n\t\tif ( ! _.isUndefined( model.prototype.args.categories ) ) {\n\t\t\tmodel = model.extend( CategoriesMixin );\n\t\t}\n\n\t\t// Add the MetaMixin for models that support meta collections.\n\t\tif ( ! _.isUndefined( loadingObjects.collections[ modelClassName + 'Meta' ] ) ) {\n\t\t\tmodel = model.extend( MetaMixin );\n\t\t}\n\n\t\t// Add the TagsMixin for models that support tags collections.\n\t\tif ( ! _.isUndefined( model.prototype.args.tags ) ) {\n\t\t\tmodel = model.extend( TagsMixin );\n\t\t}\n\n\t\t// Add the RevisionsMixin for models that support revisions collections.\n\t\tif ( ! _.isUndefined( loadingObjects.collections[ modelClassName + 'Revisions' ] ) ) {\n\t\t\tmodel = model.extend( RevisionsMixin );\n\t\t}\n\n\t\treturn model;\n\t};\n\n})( window );\n\n/* global wpApiSettings:false */\n\n// Suppress warning about parse function's unused \"options\" argument:\n/* jshint unused:false */\n(function() {\n\n\t'use strict';\n\n\tvar wpApiSettings = window.wpApiSettings || {};\n\n\t/**\n\t * Backbone base model for all models.\n\t */\n\twp.api.WPApiBaseModel = Backbone.Model.extend(\n\t\t/** @lends WPApiBaseModel.prototype  */\n\t\t{\n\t\t\t/**\n\t\t\t * Set nonce header before every Backbone sync.\n\t\t\t *\n\t\t\t * @param {string} method.\n\t\t\t * @param {Backbone.Model} model.\n\t\t\t * @param {{beforeSend}, *} options.\n\t\t\t * @returns {*}.\n\t\t\t */\n\t\t\tsync: function( method, model, options ) {\n\t\t\t\tvar beforeSend;\n\n\t\t\t\toptions = options || {};\n\n\t\t\t\t// Remove date_gmt if null.\n\t\t\t\tif ( _.isNull( model.get( 'date_gmt' ) ) ) {\n\t\t\t\t\tmodel.unset( 'date_gmt' );\n\t\t\t\t}\n\n\t\t\t\t// Remove slug if empty.\n\t\t\t\tif ( _.isEmpty( model.get( 'slug' ) ) ) {\n\t\t\t\t\tmodel.unset( 'slug' );\n\t\t\t\t}\n\n\t\t\t\tif ( ! _.isUndefined( wpApiSettings.nonce ) && ! _.isNull( wpApiSettings.nonce ) ) {\n\t\t\t\t\tbeforeSend = options.beforeSend;\n\n\t\t\t\t\t// @todo enable option for jsonp endpoints\n\t\t\t\t\t// options.dataType = 'jsonp';\n\n\t\t\t\t\toptions.beforeSend = function( xhr ) {\n\t\t\t\t\t\txhr.setRequestHeader( 'X-WP-Nonce', wpApiSettings.nonce );\n\n\t\t\t\t\t\tif ( beforeSend ) {\n\t\t\t\t\t\t\treturn beforeSend.apply( this, arguments );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Add '?force=true' to use delete method when required.\n\t\t\t\tif ( this.requireForceForDelete && 'delete' === method ) {\n\t\t\t\t\tmodel.url = model.url() + '?force=true';\n\t\t\t\t}\n\t\t\t\treturn Backbone.sync( method, model, options );\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Save is only allowed when the PUT OR POST methods are available for the endpoint.\n\t\t\t */\n\t\t\tsave: function( attrs, options ) {\n\n\t\t\t\t// Do we have the put method, then execute the save.\n\t\t\t\tif ( _.includes( this.methods, 'PUT' ) || _.includes( this.methods, 'POST' ) ) {\n\n\t\t\t\t\t// Proxy the call to the original save function.\n\t\t\t\t\treturn Backbone.Model.prototype.save.call( this, attrs, options );\n\t\t\t\t} else {\n\n\t\t\t\t\t// Otherwise bail, disallowing action.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Delete is only allowed when the DELETE method is available for the endpoint.\n\t\t\t */\n\t\t\tdestroy: function( options ) {\n\n\t\t\t\t// Do we have the DELETE method, then execute the destroy.\n\t\t\t\tif ( _.includes( this.methods, 'DELETE' ) ) {\n\n\t\t\t\t\t// Proxy the call to the original save function.\n\t\t\t\t\treturn Backbone.Model.prototype.destroy.call( this, options );\n\t\t\t\t} else {\n\n\t\t\t\t\t// Otherwise bail, disallowing action.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t);\n\n\t/**\n\t * API Schema model. Contains meta information about the API.\n\t */\n\twp.api.models.Schema = wp.api.WPApiBaseModel.extend(\n\t\t/** @lends Schema.prototype  */\n\t\t{\n\t\t\tdefaults: {\n\t\t\t\t_links: {},\n\t\t\t\tnamespace: null,\n\t\t\t\troutes: {}\n\t\t\t},\n\n\t\t\tinitialize: function( attributes, options ) {\n\t\t\t\tvar model = this;\n\t\t\t\toptions = options || {};\n\n\t\t\t\twp.api.WPApiBaseModel.prototype.initialize.call( model, attributes, options );\n\n\t\t\t\tmodel.apiRoot = options.apiRoot || wpApiSettings.root;\n\t\t\t\tmodel.versionString = options.versionString || wpApiSettings.versionString;\n\t\t\t},\n\n\t\t\turl: function() {\n\t\t\t\treturn this.apiRoot + this.versionString;\n\t\t\t}\n\t\t}\n\t);\n})();\n\n( function() {\n\n\t'use strict';\n\n\tvar wpApiSettings = window.wpApiSettings || {};\n\n\t/**\n\t * Contains basic collection functionality such as pagination.\n\t */\n\twp.api.WPApiBaseCollection = Backbone.Collection.extend(\n\t\t/** @lends BaseCollection.prototype  */\n\t\t{\n\n\t\t\t/**\n\t\t\t * Setup default state.\n\t\t\t */\n\t\t\tinitialize: function( models, options ) {\n\t\t\t\tthis.state = {\n\t\t\t\t\tdata: {},\n\t\t\t\t\tcurrentPage: null,\n\t\t\t\t\ttotalPages: null,\n\t\t\t\t\ttotalObjects: null\n\t\t\t\t};\n\t\t\t\tif ( _.isUndefined( options ) ) {\n\t\t\t\t\tthis.parent = '';\n\t\t\t\t} else {\n\t\t\t\t\tthis.parent = options.parent;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Extend Backbone.Collection.sync to add nince and pagination support.\n\t\t\t *\n\t\t\t * Set nonce header before every Backbone sync.\n\t\t\t *\n\t\t\t * @param {string} method.\n\t\t\t * @param {Backbone.Model} model.\n\t\t\t * @param {{success}, *} options.\n\t\t\t * @returns {*}.\n\t\t\t */\n\t\t\tsync: function( method, model, options ) {\n\t\t\t\tvar beforeSend, success,\n\t\t\t\t\tself = this;\n\n\t\t\t\toptions    = options || {};\n\t\t\t\tbeforeSend = options.beforeSend;\n\n\t\t\t\t// If we have a localized nonce, pass that along with each sync.\n\t\t\t\tif ( 'undefined' !== typeof wpApiSettings.nonce ) {\n\t\t\t\t\toptions.beforeSend = function( xhr ) {\n\t\t\t\t\t\txhr.setRequestHeader( 'X-WP-Nonce', wpApiSettings.nonce );\n\n\t\t\t\t\t\tif ( beforeSend ) {\n\t\t\t\t\t\t\treturn beforeSend.apply( self, arguments );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// When reading, add pagination data.\n\t\t\t\tif ( 'read' === method ) {\n\t\t\t\t\tif ( options.data ) {\n\t\t\t\t\t\tself.state.data = _.clone( options.data );\n\n\t\t\t\t\t\tdelete self.state.data.page;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.state.data = options.data = {};\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 'undefined' === typeof options.data.page ) {\n\t\t\t\t\t\tself.state.currentPage  = null;\n\t\t\t\t\t\tself.state.totalPages   = null;\n\t\t\t\t\t\tself.state.totalObjects = null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.state.currentPage = options.data.page - 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tsuccess = options.success;\n\t\t\t\t\toptions.success = function( data, textStatus, request ) {\n\t\t\t\t\t\tif ( ! _.isUndefined( request ) ) {\n\t\t\t\t\t\t\tself.state.totalPages   = parseInt( request.getResponseHeader( 'x-wp-totalpages' ), 10 );\n\t\t\t\t\t\t\tself.state.totalObjects = parseInt( request.getResponseHeader( 'x-wp-total' ), 10 );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( null === self.state.currentPage ) {\n\t\t\t\t\t\t\tself.state.currentPage = 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.state.currentPage++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( success ) {\n\t\t\t\t\t\t\treturn success.apply( this, arguments );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Continue by calling Bacckbone's sync.\n\t\t\t\treturn Backbone.sync( method, model, options );\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Fetches the next page of objects if a new page exists.\n\t\t\t *\n\t\t\t * @param {data: {page}} options.\n\t\t\t * @returns {*}.\n\t\t\t */\n\t\t\tmore: function( options ) {\n\t\t\t\toptions = options || {};\n\t\t\t\toptions.data = options.data || {};\n\n\t\t\t\t_.extend( options.data, this.state.data );\n\n\t\t\t\tif ( 'undefined' === typeof options.data.page ) {\n\t\t\t\t\tif ( ! this.hasMore() ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( null === this.state.currentPage || this.state.currentPage <= 1 ) {\n\t\t\t\t\t\toptions.data.page = 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\toptions.data.page = this.state.currentPage + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn this.fetch( options );\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns true if there are more pages of objects available.\n\t\t\t *\n\t\t\t * @returns null|boolean.\n\t\t\t */\n\t\t\thasMore: function() {\n\t\t\t\tif ( null === this.state.totalPages ||\n\t\t\t\t\t null === this.state.totalObjects ||\n\t\t\t\t\t null === this.state.currentPage ) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn ( this.state.currentPage < this.state.totalPages );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t);\n\n} )();\n\n( function() {\n\n\t'use strict';\n\n\tvar Endpoint, initializedDeferreds = {},\n\t\twpApiSettings = window.wpApiSettings || {};\n\twindow.wp = window.wp || {};\n\twp.api    = wp.api || {};\n\n\t// If wpApiSettings is unavailable, try the default.\n\tif ( _.isEmpty( wpApiSettings ) ) {\n\t\twpApiSettings.root = window.location.origin + '/wp-json/';\n\t}\n\n\tEndpoint = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tapiRoot: wpApiSettings.root,\n\t\t\tversionString: wp.api.versionString,\n\t\t\tschema: null,\n\t\t\tmodels: {},\n\t\t\tcollections: {}\n\t\t},\n\n\t\t/**\n\t\t * Initialize the Endpoint model.\n\t\t */\n\t\tinitialize: function() {\n\t\t\tvar model = this, deferred;\n\n\t\t\tBackbone.Model.prototype.initialize.apply( model, arguments );\n\n\t\t\tdeferred = jQuery.Deferred();\n\t\t\tmodel.schemaConstructed = deferred.promise();\n\n\t\t\tmodel.schemaModel = new wp.api.models.Schema( null, {\n\t\t\t\tapiRoot: model.get( 'apiRoot' ),\n\t\t\t\tversionString: model.get( 'versionString' )\n\t\t\t} );\n\n\t\t\t// When the model loads, resolve the promise.\n\t\t\tmodel.schemaModel.once( 'change', function() {\n\t\t\t\tmodel.constructFromSchema();\n\t\t\t\tdeferred.resolve( model );\n\t\t\t} );\n\n\t\t\tif ( model.get( 'schema' ) ) {\n\n\t\t\t\t// Use schema supplied as model attribute.\n\t\t\t\tmodel.schemaModel.set( model.schemaModel.parse( model.get( 'schema' ) ) );\n\t\t\t} else if (\n\t\t\t\t! _.isUndefined( sessionStorage ) &&\n\t\t\t\t( _.isUndefined( wpApiSettings.cacheSchema ) || wpApiSettings.cacheSchema ) &&\n\t\t\t\tsessionStorage.getItem( 'wp-api-schema-model' + model.get( 'apiRoot' ) + model.get( 'versionString' ) )\n\t\t\t) {\n\n\t\t\t\t// Used a cached copy of the schema model if available.\n\t\t\t\tmodel.schemaModel.set( model.schemaModel.parse( JSON.parse( sessionStorage.getItem( 'wp-api-schema-model' + model.get( 'apiRoot' ) + model.get( 'versionString' ) ) ) ) );\n\t\t\t} else {\n\t\t\t\tmodel.schemaModel.fetch( {\n\t\t\t\t\t/**\n\t\t\t\t\t * When the server returns the schema model data, store the data in a sessionCache so we don't\n\t\t\t\t\t * have to retrieve it again for this session. Then, construct the models and collections based\n\t\t\t\t\t * on the schema model data.\n\t\t\t\t\t */\n\t\t\t\t\tsuccess: function( newSchemaModel ) {\n\n\t\t\t\t\t\t// Store a copy of the schema model in the session cache if available.\n\t\t\t\t\t\tif ( ! _.isUndefined( sessionStorage ) && wpApiSettings.cacheSchema ) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tsessionStorage.setItem( 'wp-api-schema-model' + model.get( 'apiRoot' ) + model.get( 'versionString' ), JSON.stringify( newSchemaModel ) );\n\t\t\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\t\t\t// Fail silently, fixes errors in safari private mode.\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\t// Log the error condition.\n\t\t\t\t\terror: function( err ) {\n\t\t\t\t\t\twindow.console.log( err );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\tconstructFromSchema: function() {\n\t\t\tvar routeModel = this, modelRoutes, collectionRoutes, schemaRoot, loadingObjects,\n\n\t\t\t/**\n\t\t\t * Set up the model and collection name mapping options. As the schema is built, the\n\t\t\t * model and collection names will be adjusted if they are found in the mapping object.\n\t\t\t *\n\t\t\t * Localizing a variable wpApiSettings.mapping will over-ride the default mapping options.\n\t\t\t *\n\t\t\t */\n\t\t\tmapping = wpApiSettings.mapping || {\n\t\t\t\tmodels: {\n\t\t\t\t\t'Categories':      'Category',\n\t\t\t\t\t'Comments':        'Comment',\n\t\t\t\t\t'Pages':           'Page',\n\t\t\t\t\t'PagesMeta':       'PageMeta',\n\t\t\t\t\t'PagesRevisions':  'PageRevision',\n\t\t\t\t\t'Posts':           'Post',\n\t\t\t\t\t'PostsCategories': 'PostCategory',\n\t\t\t\t\t'PostsRevisions':  'PostRevision',\n\t\t\t\t\t'PostsTags':       'PostTag',\n\t\t\t\t\t'Schema':          'Schema',\n\t\t\t\t\t'Statuses':        'Status',\n\t\t\t\t\t'Tags':            'Tag',\n\t\t\t\t\t'Taxonomies':      'Taxonomy',\n\t\t\t\t\t'Types':           'Type',\n\t\t\t\t\t'Users':           'User'\n\t\t\t\t},\n\t\t\t\tcollections: {\n\t\t\t\t\t'PagesMeta':       'PageMeta',\n\t\t\t\t\t'PagesRevisions':  'PageRevisions',\n\t\t\t\t\t'PostsCategories': 'PostCategories',\n\t\t\t\t\t'PostsMeta':       'PostMeta',\n\t\t\t\t\t'PostsRevisions':  'PostRevisions',\n\t\t\t\t\t'PostsTags':       'PostTags'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Iterate thru the routes, picking up models and collections to build. Builds two arrays,\n\t\t\t * one for models and one for collections.\n\t\t\t */\n\t\t\tmodelRoutes      = [];\n\t\t\tcollectionRoutes = [];\n\t\t\tschemaRoot       = routeModel.get( 'apiRoot' ).replace( wp.api.utils.getRootUrl(), '' );\n\t\t\tloadingObjects   = {};\n\n\t\t\t/**\n\t\t\t * Tracking objects for models and collections.\n\t\t\t */\n\t\t\tloadingObjects.models      = routeModel.get( 'models' );\n\t\t\tloadingObjects.collections = routeModel.get( 'collections' );\n\n\t\t\t_.each( routeModel.schemaModel.get( 'routes' ), function( route, index ) {\n\n\t\t\t\t// Skip the schema root if included in the schema.\n\t\t\t\tif ( index !== routeModel.get( ' versionString' ) &&\n\t\t\t\t\t\tindex !== schemaRoot &&\n\t\t\t\t\t\tindex !== ( '/' + routeModel.get( 'versionString' ).slice( 0, -1 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// Single items end with a regex (or the special case 'me').\n\t\t\t\t\tif ( /(?:.*[+)]|\\/me)$/.test( index ) ) {\n\t\t\t\t\t\tmodelRoutes.push( { index: index, route: route } );\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Collections end in a name.\n\t\t\t\t\t\tcollectionRoutes.push( { index: index, route: route } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t/**\n\t\t\t * Construct the models.\n\t\t\t *\n\t\t\t * Base the class name on the route endpoint.\n\t\t\t */\n\t\t\t_.each( modelRoutes, function( modelRoute ) {\n\n\t\t\t\t// Extract the name and any parent from the route.\n\t\t\t\tvar modelClassName,\n\t\t\t\t\t\trouteName  = wp.api.utils.extractRoutePart( modelRoute.index, 2 ),\n\t\t\t\t\t\tparentName = wp.api.utils.extractRoutePart( modelRoute.index, 4 ),\n\t\t\t\t\t\trouteEnd   = wp.api.utils.extractRoutePart( modelRoute.index, 1 );\n\n\t\t\t\t// Handle the special case of the 'me' route.\n\t\t\t\tif ( 'me' === routeEnd ) {\n\t\t\t\t\trouteName = 'me';\n\t\t\t\t}\n\n\t\t\t\t// If the model has a parent in its route, add that to its class name.\n\t\t\t\tif ( '' !== parentName && parentName !== routeName ) {\n\t\t\t\t\tmodelClassName = wp.api.utils.capitalize( parentName ) + wp.api.utils.capitalize( routeName );\n\t\t\t\t\tmodelClassName = mapping.models[ modelClassName ] || modelClassName;\n\t\t\t\t\tloadingObjects.models[ modelClassName ] = wp.api.WPApiBaseModel.extend( {\n\n\t\t\t\t\t\t// Return a constructed url based on the parent and id.\n\t\t\t\t\t\turl: function() {\n\t\t\t\t\t\t\tvar url = routeModel.get( 'apiRoot' ) + routeModel.get( 'versionString' ) +\n\t\t\t\t\t\t\t\t\tparentName +  '/' +\n\t\t\t\t\t\t\t\t\t( ( _.isUndefined( this.get( 'parent' ) ) || 0 === this.get( 'parent' ) ) ?\n\t\t\t\t\t\t\t\t\t\tthis.get( 'parent_post' ) :\n\t\t\t\t\t\t\t\t\t\tthis.get( 'parent' ) ) + '/' +\n\t\t\t\t\t\t\t\t\trouteName;\n\t\t\t\t\t\t\tif ( ! _.isUndefined( this.get( 'id' ) ) ) {\n\t\t\t\t\t\t\t\turl +=  '/' + this.get( 'id' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn url;\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\t// Include a reference to the original route object.\n\t\t\t\t\t\troute: modelRoute,\n\n\t\t\t\t\t\t// Include a reference to the original class name.\n\t\t\t\t\t\tname: modelClassName,\n\n\t\t\t\t\t\t// Include the array of route methods for easy reference.\n\t\t\t\t\t\tmethods: modelRoute.route.methods,\n\n\t\t\t\t\t\tinitialize: function() {\n\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Posts and pages support trashing, other types don't support a trash\n\t\t\t\t\t\t\t * and require that you pass ?force=true to actually delete them.\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t * @todo we should be getting trashability from the Schema, not hard coding types here.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t'Posts' !== this.name &&\n\t\t\t\t\t\t\t\t'Pages' !== this.name &&\n\t\t\t\t\t\t\t\t_.includes( this.methods, 'DELETE' )\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tthis.requireForceForDelete = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\n\t\t\t\t\t// This is a model without a parent in its route\n\t\t\t\t\tmodelClassName = wp.api.utils.capitalize( routeName );\n\t\t\t\t\tmodelClassName = mapping.models[ modelClassName ] || modelClassName;\n\t\t\t\t\tloadingObjects.models[ modelClassName ] = wp.api.WPApiBaseModel.extend( {\n\n\t\t\t\t\t\t// Function that returns a constructed url based on the id.\n\t\t\t\t\t\turl: function() {\n\t\t\t\t\t\t\tvar url = routeModel.get( 'apiRoot' ) +\n\t\t\t\t\t\t\t\trouteModel.get( 'versionString' ) +\n\t\t\t\t\t\t\t\t( ( 'me' === routeName ) ? 'users/me' : routeName );\n\n\t\t\t\t\t\t\tif ( ! _.isUndefined( this.get( 'id' ) ) ) {\n\t\t\t\t\t\t\t\turl +=  '/' + this.get( 'id' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn url;\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\t// Include a reference to the original route object.\n\t\t\t\t\t\troute: modelRoute,\n\n\t\t\t\t\t\t// Include a reference to the original class name.\n\t\t\t\t\t\tname: modelClassName,\n\n\t\t\t\t\t\t// Include the array of route methods for easy reference.\n\t\t\t\t\t\tmethods: modelRoute.route.methods\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// Add defaults to the new model, pulled form the endpoint.\n\t\t\t\twp.api.utils.decorateFromRoute( modelRoute.route.endpoints, loadingObjects.models[ modelClassName ] );\n\n\t\t\t} );\n\n\t\t\t/**\n\t\t\t * Construct the collections.\n\t\t\t *\n\t\t\t * Base the class name on the route endpoint.\n\t\t\t */\n\t\t\t_.each( collectionRoutes, function( collectionRoute ) {\n\n\t\t\t\t// Extract the name and any parent from the route.\n\t\t\t\tvar collectionClassName, modelClassName,\n\t\t\t\t\t\trouteName  = collectionRoute.index.slice( collectionRoute.index.lastIndexOf( '/' ) + 1 ),\n\t\t\t\t\t\tparentName = wp.api.utils.extractRoutePart( collectionRoute.index, 3 );\n\n\t\t\t\t// If the collection has a parent in its route, add that to its class name.\n\t\t\t\tif ( '' !== parentName && parentName !== routeName ) {\n\n\t\t\t\t\tcollectionClassName = wp.api.utils.capitalize( parentName ) + wp.api.utils.capitalize( routeName );\n\t\t\t\t\tmodelClassName      = mapping.models[ collectionClassName ] || collectionClassName;\n\t\t\t\t\tcollectionClassName = mapping.collections[ collectionClassName ] || collectionClassName;\n\t\t\t\t\tloadingObjects.collections[ collectionClassName ] = wp.api.WPApiBaseCollection.extend( {\n\n\t\t\t\t\t\t// Function that returns a constructed url passed on the parent.\n\t\t\t\t\t\turl: function() {\n\t\t\t\t\t\t\treturn routeModel.get( 'apiRoot' ) + routeModel.get( 'versionString' ) +\n\t\t\t\t\t\t\t\t\tparentName + '/' + this.parent + '/' +\n\t\t\t\t\t\t\t\t\trouteName;\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\t// Specify the model that this collection contains.\n\t\t\t\t\t\tmodel: loadingObjects.models[ modelClassName ],\n\n\t\t\t\t\t\t// Include a reference to the original class name.\n\t\t\t\t\t\tname: collectionClassName,\n\n\t\t\t\t\t\t// Include a reference to the original route object.\n\t\t\t\t\t\troute: collectionRoute,\n\n\t\t\t\t\t\t// Include the array of route methods for easy reference.\n\t\t\t\t\t\tmethods: collectionRoute.route.methods\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\n\t\t\t\t\t// This is a collection without a parent in its route.\n\t\t\t\t\tcollectionClassName = wp.api.utils.capitalize( routeName );\n\t\t\t\t\tmodelClassName      = mapping.models[ collectionClassName ] || collectionClassName;\n\t\t\t\t\tcollectionClassName = mapping.collections[ collectionClassName ] || collectionClassName;\n\t\t\t\t\tloadingObjects.collections[ collectionClassName ] = wp.api.WPApiBaseCollection.extend( {\n\n\t\t\t\t\t\t// For the url of a root level collection, use a string.\n\t\t\t\t\t\turl: routeModel.get( 'apiRoot' ) + routeModel.get( 'versionString' ) + routeName,\n\n\t\t\t\t\t\t// Specify the model that this collection contains.\n\t\t\t\t\t\tmodel: loadingObjects.models[ modelClassName ],\n\n\t\t\t\t\t\t// Include a reference to the original class name.\n\t\t\t\t\t\tname: collectionClassName,\n\n\t\t\t\t\t\t// Include a reference to the original route object.\n\t\t\t\t\t\troute: collectionRoute,\n\n\t\t\t\t\t\t// Include the array of route methods for easy reference.\n\t\t\t\t\t\tmethods: collectionRoute.route.methods\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// Add defaults to the new model, pulled form the endpoint.\n\t\t\t\twp.api.utils.decorateFromRoute( collectionRoute.route.endpoints, loadingObjects.collections[ collectionClassName ] );\n\t\t\t} );\n\n\t\t\t// Add mixins and helpers for each of the models.\n\t\t\t_.each( loadingObjects.models, function( model, index ) {\n\t\t\t\tloadingObjects.models[ index ] = wp.api.utils.addMixinsAndHelpers( model, index, loadingObjects );\n\t\t\t} );\n\n\t\t}\n\n\t} );\n\n\twp.api.endpoints = new Backbone.Collection( {\n\t\tmodel: Endpoint\n\t} );\n\n\t/**\n\t * Initialize the wp-api, optionally passing the API root.\n\t *\n\t * @param {object} [args]\n\t * @param {string} [args.apiRoot] The api root. Optional, defaults to wpApiSettings.root.\n\t * @param {string} [args.versionString] The version string. Optional, defaults to wpApiSettings.root.\n\t * @param {object} [args.schema] The schema. Optional, will be fetched from API if not provided.\n\t */\n\twp.api.init = function( args ) {\n\t\tvar endpoint, attributes = {}, deferred, promise;\n\n\t\targs                     = args || {};\n\t\tattributes.apiRoot       = args.apiRoot || wpApiSettings.root;\n\t\tattributes.versionString = args.versionString || wpApiSettings.versionString;\n\t\tattributes.schema        = args.schema || null;\n\t\tif ( ! attributes.schema && attributes.apiRoot === wpApiSettings.root && attributes.versionString === wpApiSettings.versionString ) {\n\t\t\tattributes.schema = wpApiSettings.schema;\n\t\t}\n\n\t\tif ( ! initializedDeferreds[ attributes.apiRoot + attributes.versionString ] ) {\n\t\t\tendpoint = wp.api.endpoints.findWhere( { apiRoot: attributes.apiRoot, versionString: attributes.versionString } );\n\t\t\tif ( ! endpoint ) {\n\t\t\t\tendpoint = new Endpoint( attributes );\n\t\t\t\twp.api.endpoints.add( endpoint );\n\t\t\t}\n\t\t\tdeferred = jQuery.Deferred();\n\t\t\tpromise = deferred.promise();\n\n\t\t\tendpoint.schemaConstructed.done( function( endpoint ) {\n\n\t\t\t\t// Map the default endpoints, extending any already present items (including Schema model).\n\t\t\t\twp.api.models      = _.extend( endpoint.get( 'models' ), wp.api.models );\n\t\t\t\twp.api.collections = _.extend( endpoint.get( 'collections' ), wp.api.collections );\n\t\t\t\tdeferred.resolveWith( wp.api, [ endpoint ] );\n\t\t\t} );\n\t\t\tinitializedDeferreds[ attributes.apiRoot + attributes.versionString ] = promise;\n\t\t}\n\t\treturn initializedDeferreds[ attributes.apiRoot + attributes.versionString ];\n\t};\n\n\t/**\n\t * Construct the default endpoints and add to an endpoints collection.\n\t */\n\n\t// The wp.api.init function returns a promise that will resolve with the endpoint once it is ready.\n\twp.api.loadPromise = wp.api.init();\n\n} )();\n"
        },
        {
          "name": "wp-api.min.js",
          "type": "blob",
          "size": 12.35546875,
          "content": "!function(a,b){\"use strict\";function c(){this.models={},this.collections={},this.views={}}a.wp=a.wp||{},wp.api=wp.api||new c,wp.api.versionString=wp.api.versionString||\"wp/v2/\",!_.isFunction(_.includes)&&_.isFunction(_.contains)&&(_.includes=_.contains)}(window),function(a,b){\"use strict\";var c,d;a.wp=a.wp||{},wp.api=wp.api||{},wp.api.utils=wp.api.utils||{},Date.prototype.toISOString||(c=function(a){return d=String(a),1===d.length&&(d=\"0\"+d),d},Date.prototype.toISOString=function(){return this.getUTCFullYear()+\"-\"+c(this.getUTCMonth()+1)+\"-\"+c(this.getUTCDate())+\"T\"+c(this.getUTCHours())+\":\"+c(this.getUTCMinutes())+\":\"+c(this.getUTCSeconds())+\".\"+String((this.getUTCMilliseconds()/1e3).toFixed(3)).slice(2,5)+\"Z\"}),wp.api.utils.parseISO8601=function(a){var c,d,e,f,g=0,h=[1,4,5,6,7,10,11];if(d=/^(\\d{4}|[+\\-]\\d{6})(?:-(\\d{2})(?:-(\\d{2}))?)?(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(?:(Z)|([+\\-])(\\d{2})(?::(\\d{2}))?)?)?$/.exec(a)){for(e=0;f=h[e];++e)d[f]=+d[f]||0;d[2]=(+d[2]||1)-1,d[3]=+d[3]||1,\"Z\"!==d[8]&&b!==d[9]&&(g=60*d[10]+d[11],\"+\"===d[9]&&(g=0-g)),c=Date.UTC(d[1],d[2],d[3],d[4],d[5]+g,d[6],d[7])}else c=Date.parse?Date.parse(a):NaN;return c},wp.api.utils.getRootUrl=function(){return a.location.origin?a.location.origin+\"/\":a.location.protocol+\"/\"+a.location.host+\"/\"},wp.api.utils.capitalize=function(a){return _.isUndefined(a)?a:a.charAt(0).toUpperCase()+a.slice(1)},wp.api.utils.extractRoutePart=function(a,b){var c;return b=b||1,a=a.replace(wp.api.versionString,\"\"),c=a.split(\"/\").reverse(),_.isUndefined(c[--b])?\"\":c[b]},wp.api.utils.extractParentName=function(a){var b,c=a.lastIndexOf(\"_id>[\\\\d]+)/\");return 0>c?\"\":(b=a.substr(0,c-1),b=b.split(\"/\"),b.pop(),b=b.pop())},wp.api.utils.decorateFromRoute=function(a,b){_.each(a,function(a){_.includes(a.methods,\"POST\")||_.includes(a.methods,\"PUT\")?_.isEmpty(a.args)||(_.isEmpty(b.prototype.args)?b.prototype.args=a.args:b.prototype.args=_.union(a.args,b.prototype.defaults)):_.includes(a.methods,\"GET\")&&(_.isEmpty(a.args)||(_.isEmpty(b.prototype.options)?b.prototype.options=a.args:b.prototype.options=_.union(a.args,b.prototype.options)))})},wp.api.utils.addMixinsAndHelpers=function(a,b,c){var d=!1,e=[\"date\",\"modified\",\"date_gmt\",\"modified_gmt\"],f={setDate:function(a,b){var c=b||\"date\";return _.indexOf(e,c)<0?!1:void this.set(c,a.toISOString())},getDate:function(a){var b=a||\"date\",c=this.get(b);return _.indexOf(e,b)<0||_.isNull(c)?!1:new Date(wp.api.utils.parseISO8601(c))}},g=function(a,b,c,d,e){var f,g,h,i;return i=jQuery.Deferred(),g=a.get(\"_embedded\")||{},_.isNumber(b)&&0!==b?(g[d]&&(h=_.findWhere(g[d],{id:b})),h||(h={id:b}),f=new wp.api.models[c](h),f.get(e)?i.resolve(f):f.fetch({success:function(a){i.resolve(a)}}),i.promise()):(i.reject(),i)},h=function(a,b,c,d){var e,f,g,h=\"\",j=\"\",k=jQuery.Deferred();return e=a.get(\"id\"),f=a.get(\"_embedded\")||{},_.isNumber(e)&&0!==e?(_.isUndefined(c)||_.isUndefined(f[c])?h={parent:e}:j=_.isUndefined(d)?f[c]:f[c][d],g=new wp.api.collections[b](j,h),_.isUndefined(g.models[0])?g.fetch({success:function(a){i(a,e),k.resolve(a)}}):(i(g,e),k.resolve(g)),k.promise()):(k.reject(),k)},i=function(a,b){_.each(a.models,function(a){a.set(\"parent_post\",b)})},j={getMeta:function(){return h(this,\"PostMeta\",\"https://api.w.org/meta\")}},k={getRevisions:function(){return h(this,\"PostRevisions\")}},l={getTags:function(){var a=this.get(\"tags\"),b=new wp.api.collections.Tags;return _.isEmpty(a)?jQuery.Deferred().resolve([]):b.fetch({data:{include:a}})},setTags:function(a){var b,c,d=this,e=[];return _.isString(a)?!1:void(_.isArray(a)?(b=new wp.api.collections.Tags,b.fetch({data:{per_page:100},success:function(b){_.each(a,function(a){c=new wp.api.models.Tag(b.findWhere({slug:a})),c.set(\"parent_post\",d.get(\"id\")),e.push(c)}),a=new wp.api.collections.Tags(e),d.setTagsWithCollection(a)}})):this.setTagsWithCollection(a))},setTagsWithCollection:function(a){return this.set(\"tags\",a.pluck(\"id\")),this.save()}},m={getCategories:function(){var a=this.get(\"categories\"),b=new wp.api.collections.Categories;return _.isEmpty(a)?jQuery.Deferred().resolve([]):b.fetch({data:{include:a}})},setCategories:function(a){var b,c,d=this,e=[];return _.isString(a)?!1:void(_.isArray(a)?(b=new wp.api.collections.Categories,b.fetch({data:{per_page:100},success:function(b){_.each(a,function(a){c=new wp.api.models.Category(b.findWhere({slug:a})),c.set(\"parent_post\",d.get(\"id\")),e.push(c)}),a=new wp.api.collections.Categories(e),d.setCategoriesWithCollection(a)}})):this.setCategoriesWithCollection(a))},setCategoriesWithCollection:function(a){return this.set(\"categories\",a.pluck(\"id\")),this.save()}},n={getAuthorUser:function(){return g(this,this.get(\"author\"),\"User\",\"author\",\"name\")}},o={getFeaturedMedia:function(){return g(this,this.get(\"featured_media\"),\"Media\",\"wp:featuredmedia\",\"source_url\")}};return _.isUndefined(a.prototype.args)?a:(_.each(e,function(b){_.isUndefined(a.prototype.args[b])||(d=!0)}),d&&(a=a.extend(f)),_.isUndefined(a.prototype.args.author)||(a=a.extend(n)),_.isUndefined(a.prototype.args.featured_media)||(a=a.extend(o)),_.isUndefined(a.prototype.args.categories)||(a=a.extend(m)),_.isUndefined(c.collections[b+\"Meta\"])||(a=a.extend(j)),_.isUndefined(a.prototype.args.tags)||(a=a.extend(l)),_.isUndefined(c.collections[b+\"Revisions\"])||(a=a.extend(k)),a)}}(window),function(){\"use strict\";var a=window.wpApiSettings||{};wp.api.WPApiBaseModel=Backbone.Model.extend({sync:function(b,c,d){var e;return d=d||{},_.isNull(c.get(\"date_gmt\"))&&c.unset(\"date_gmt\"),_.isEmpty(c.get(\"slug\"))&&c.unset(\"slug\"),_.isUndefined(a.nonce)||_.isNull(a.nonce)||(e=d.beforeSend,d.beforeSend=function(b){return b.setRequestHeader(\"X-WP-Nonce\",a.nonce),e?e.apply(this,arguments):void 0}),this.requireForceForDelete&&\"delete\"===b&&(c.url=c.url()+\"?force=true\"),Backbone.sync(b,c,d)},save:function(a,b){return _.includes(this.methods,\"PUT\")||_.includes(this.methods,\"POST\")?Backbone.Model.prototype.save.call(this,a,b):!1},destroy:function(a){return _.includes(this.methods,\"DELETE\")?Backbone.Model.prototype.destroy.call(this,a):!1}}),wp.api.models.Schema=wp.api.WPApiBaseModel.extend({defaults:{_links:{},namespace:null,routes:{}},initialize:function(b,c){var d=this;c=c||{},wp.api.WPApiBaseModel.prototype.initialize.call(d,b,c),d.apiRoot=c.apiRoot||a.root,d.versionString=c.versionString||a.versionString},url:function(){return this.apiRoot+this.versionString}})}(),function(){\"use strict\";var a=window.wpApiSettings||{};wp.api.WPApiBaseCollection=Backbone.Collection.extend({initialize:function(a,b){this.state={data:{},currentPage:null,totalPages:null,totalObjects:null},_.isUndefined(b)?this.parent=\"\":this.parent=b.parent},sync:function(b,c,d){var e,f,g=this;return d=d||{},e=d.beforeSend,\"undefined\"!=typeof a.nonce&&(d.beforeSend=function(b){return b.setRequestHeader(\"X-WP-Nonce\",a.nonce),e?e.apply(g,arguments):void 0}),\"read\"===b&&(d.data?(g.state.data=_.clone(d.data),delete g.state.data.page):g.state.data=d.data={},\"undefined\"==typeof d.data.page?(g.state.currentPage=null,g.state.totalPages=null,g.state.totalObjects=null):g.state.currentPage=d.data.page-1,f=d.success,d.success=function(a,b,c){return _.isUndefined(c)||(g.state.totalPages=parseInt(c.getResponseHeader(\"x-wp-totalpages\"),10),g.state.totalObjects=parseInt(c.getResponseHeader(\"x-wp-total\"),10)),null===g.state.currentPage?g.state.currentPage=1:g.state.currentPage++,f?f.apply(this,arguments):void 0}),Backbone.sync(b,c,d)},more:function(a){if(a=a||{},a.data=a.data||{},_.extend(a.data,this.state.data),\"undefined\"==typeof a.data.page){if(!this.hasMore())return!1;null===this.state.currentPage||this.state.currentPage<=1?a.data.page=2:a.data.page=this.state.currentPage+1}return this.fetch(a)},hasMore:function(){return null===this.state.totalPages||null===this.state.totalObjects||null===this.state.currentPage?null:this.state.currentPage<this.state.totalPages}})}(),function(){\"use strict\";var a,b={},c=window.wpApiSettings||{};window.wp=window.wp||{},wp.api=wp.api||{},_.isEmpty(c)&&(c.root=window.location.origin+\"/wp-json/\"),a=Backbone.Model.extend({defaults:{apiRoot:c.root,versionString:wp.api.versionString,schema:null,models:{},collections:{}},initialize:function(){var a,b=this;Backbone.Model.prototype.initialize.apply(b,arguments),a=jQuery.Deferred(),b.schemaConstructed=a.promise(),b.schemaModel=new wp.api.models.Schema(null,{apiRoot:b.get(\"apiRoot\"),versionString:b.get(\"versionString\")}),b.schemaModel.once(\"change\",function(){b.constructFromSchema(),a.resolve(b)}),b.get(\"schema\")?b.schemaModel.set(b.schemaModel.parse(b.get(\"schema\"))):!_.isUndefined(sessionStorage)&&(_.isUndefined(c.cacheSchema)||c.cacheSchema)&&sessionStorage.getItem(\"wp-api-schema-model\"+b.get(\"apiRoot\")+b.get(\"versionString\"))?b.schemaModel.set(b.schemaModel.parse(JSON.parse(sessionStorage.getItem(\"wp-api-schema-model\"+b.get(\"apiRoot\")+b.get(\"versionString\"))))):b.schemaModel.fetch({success:function(a){if(!_.isUndefined(sessionStorage)&&c.cacheSchema)try{sessionStorage.setItem(\"wp-api-schema-model\"+b.get(\"apiRoot\")+b.get(\"versionString\"),JSON.stringify(a))}catch(d){}},error:function(a){window.console.log(a)}})},constructFromSchema:function(){var a,b,d,e,f=this,g=c.mapping||{models:{Categories:\"Category\",Comments:\"Comment\",Pages:\"Page\",PagesMeta:\"PageMeta\",PagesRevisions:\"PageRevision\",Posts:\"Post\",PostsCategories:\"PostCategory\",PostsRevisions:\"PostRevision\",PostsTags:\"PostTag\",Schema:\"Schema\",Statuses:\"Status\",Tags:\"Tag\",Taxonomies:\"Taxonomy\",Types:\"Type\",Users:\"User\"},collections:{PagesMeta:\"PageMeta\",PagesRevisions:\"PageRevisions\",PostsCategories:\"PostCategories\",PostsMeta:\"PostMeta\",PostsRevisions:\"PostRevisions\",PostsTags:\"PostTags\"}};a=[],b=[],d=f.get(\"apiRoot\").replace(wp.api.utils.getRootUrl(),\"\"),e={},e.models=f.get(\"models\"),e.collections=f.get(\"collections\"),_.each(f.schemaModel.get(\"routes\"),function(c,e){e!==f.get(\" versionString\")&&e!==d&&e!==\"/\"+f.get(\"versionString\").slice(0,-1)&&(/(?:.*[+)]|\\/me)$/.test(e)?a.push({index:e,route:c}):b.push({index:e,route:c}))}),_.each(a,function(a){var b,c=wp.api.utils.extractRoutePart(a.index,2),d=wp.api.utils.extractRoutePart(a.index,4),h=wp.api.utils.extractRoutePart(a.index,1);\"me\"===h&&(c=\"me\"),\"\"!==d&&d!==c?(b=wp.api.utils.capitalize(d)+wp.api.utils.capitalize(c),b=g.models[b]||b,e.models[b]=wp.api.WPApiBaseModel.extend({url:function(){var a=f.get(\"apiRoot\")+f.get(\"versionString\")+d+\"/\"+(_.isUndefined(this.get(\"parent\"))||0===this.get(\"parent\")?this.get(\"parent_post\"):this.get(\"parent\"))+\"/\"+c;return _.isUndefined(this.get(\"id\"))||(a+=\"/\"+this.get(\"id\")),a},route:a,name:b,methods:a.route.methods,initialize:function(){\"Posts\"!==this.name&&\"Pages\"!==this.name&&_.includes(this.methods,\"DELETE\")&&(this.requireForceForDelete=!0)}})):(b=wp.api.utils.capitalize(c),b=g.models[b]||b,e.models[b]=wp.api.WPApiBaseModel.extend({url:function(){var a=f.get(\"apiRoot\")+f.get(\"versionString\")+(\"me\"===c?\"users/me\":c);return _.isUndefined(this.get(\"id\"))||(a+=\"/\"+this.get(\"id\")),a},route:a,name:b,methods:a.route.methods})),wp.api.utils.decorateFromRoute(a.route.endpoints,e.models[b])}),_.each(b,function(a){var b,c,d=a.index.slice(a.index.lastIndexOf(\"/\")+1),h=wp.api.utils.extractRoutePart(a.index,3);\"\"!==h&&h!==d?(b=wp.api.utils.capitalize(h)+wp.api.utils.capitalize(d),c=g.models[b]||b,b=g.collections[b]||b,e.collections[b]=wp.api.WPApiBaseCollection.extend({url:function(){return f.get(\"apiRoot\")+f.get(\"versionString\")+h+\"/\"+this.parent+\"/\"+d},model:e.models[c],name:b,route:a,methods:a.route.methods})):(b=wp.api.utils.capitalize(d),c=g.models[b]||b,b=g.collections[b]||b,e.collections[b]=wp.api.WPApiBaseCollection.extend({url:f.get(\"apiRoot\")+f.get(\"versionString\")+d,model:e.models[c],name:b,route:a,methods:a.route.methods})),wp.api.utils.decorateFromRoute(a.route.endpoints,e.collections[b])}),_.each(e.models,function(a,b){e.models[b]=wp.api.utils.addMixinsAndHelpers(a,b,e)})}}),wp.api.endpoints=new Backbone.Collection({model:a}),wp.api.init=function(d){var e,f,g,h={};return d=d||{},h.apiRoot=d.apiRoot||c.root,h.versionString=d.versionString||c.versionString,h.schema=d.schema||null,h.schema||h.apiRoot!==c.root||h.versionString!==c.versionString||(h.schema=c.schema),b[h.apiRoot+h.versionString]||(e=wp.api.endpoints.findWhere({apiRoot:h.apiRoot,versionString:h.versionString}),e||(e=new a(h),wp.api.endpoints.add(e)),f=jQuery.Deferred(),g=f.promise(),e.schemaConstructed.done(function(a){wp.api.models=_.extend(a.get(\"models\"),wp.api.models),wp.api.collections=_.extend(a.get(\"collections\"),wp.api.collections),f.resolveWith(wp.api,[a])}),b[h.apiRoot+h.versionString]=g),b[h.apiRoot+h.versionString]},wp.api.loadPromise=wp.api.init()}();\n//# sourceMappingURL=wp-api.min.map"
        },
        {
          "name": "wp-api.min.map",
          "type": "blob",
          "size": 16.7431640625,
          "content": "{\"version\":3,\"sources\":[\"../../js/app.js\",\"../../js/utils.js\",\"../../js/models.js\",\"../../js/collections.js\",\"../../js/load.js\"],\"names\":[\"window\",\"undefined\",\"WP_API\",\"this\",\"models\",\"collections\",\"views\",\"wp\",\"api\",\"versionString\",\"_\",\"isFunction\",\"includes\",\"contains\",\"pad\",\"r\",\"utils\",\"Date\",\"prototype\",\"toISOString\",\"number\",\"String\",\"length\",\"getUTCFullYear\",\"getUTCMonth\",\"getUTCDate\",\"getUTCHours\",\"getUTCMinutes\",\"getUTCSeconds\",\"getUTCMilliseconds\",\"toFixed\",\"slice\",\"parseISO8601\",\"date\",\"timestamp\",\"struct\",\"i\",\"k\",\"minutesOffset\",\"numericKeys\",\"exec\",\"UTC\",\"parse\",\"NaN\",\"getRootUrl\",\"location\",\"origin\",\"protocol\",\"host\",\"capitalize\",\"str\",\"isUndefined\",\"charAt\",\"toUpperCase\",\"extractRoutePart\",\"route\",\"part\",\"routeParts\",\"replace\",\"split\",\"reverse\",\"extractParentName\",\"name\",\"lastSlash\",\"lastIndexOf\",\"substr\",\"pop\",\"decorateFromRoute\",\"routeEndpoints\",\"modelInstance\",\"each\",\"routeEndpoint\",\"methods\",\"isEmpty\",\"args\",\"union\",\"defaults\",\"options\",\"addMixinsAndHelpers\",\"model\",\"modelClassName\",\"loadingObjects\",\"hasDate\",\"parseableDates\",\"TimeStampedMixin\",\"setDate\",\"field\",\"theField\",\"indexOf\",\"set\",\"getDate\",\"theISODate\",\"get\",\"isNull\",\"buildModelGetter\",\"parentModel\",\"modelId\",\"modelName\",\"embedSourcePoint\",\"embedCheckField\",\"getModel\",\"embeddeds\",\"attributes\",\"deferred\",\"jQuery\",\"Deferred\",\"isNumber\",\"findWhere\",\"id\",\"resolve\",\"fetch\",\"success\",\"promise\",\"reject\",\"buildCollectionGetter\",\"collectionName\",\"embedIndex\",\"postId\",\"getObjects\",\"classProperties\",\"properties\",\"parent\",\"setHelperParentPost\",\"collection\",\"MetaMixin\",\"getMeta\",\"RevisionsMixin\",\"getRevisions\",\"TagsMixin\",\"getTags\",\"tagIds\",\"tags\",\"Tags\",\"data\",\"include\",\"setTags\",\"allTags\",\"newTag\",\"self\",\"newTags\",\"isString\",\"isArray\",\"per_page\",\"alltags\",\"tag\",\"Tag\",\"slug\",\"push\",\"setTagsWithCollection\",\"pluck\",\"save\",\"CategoriesMixin\",\"getCategories\",\"categoryIds\",\"categories\",\"Categories\",\"setCategories\",\"allCategories\",\"newCategory\",\"newCategories\",\"allcats\",\"category\",\"Category\",\"setCategoriesWithCollection\",\"AuthorMixin\",\"getAuthorUser\",\"FeaturedMediaMixin\",\"getFeaturedMedia\",\"theDateKey\",\"extend\",\"author\",\"featured_media\",\"wpApiSettings\",\"WPApiBaseModel\",\"Backbone\",\"Model\",\"sync\",\"method\",\"beforeSend\",\"unset\",\"nonce\",\"xhr\",\"setRequestHeader\",\"apply\",\"arguments\",\"requireForceForDelete\",\"url\",\"attrs\",\"call\",\"destroy\",\"Schema\",\"_links\",\"namespace\",\"routes\",\"initialize\",\"apiRoot\",\"root\",\"WPApiBaseCollection\",\"Collection\",\"state\",\"currentPage\",\"totalPages\",\"totalObjects\",\"clone\",\"page\",\"textStatus\",\"request\",\"parseInt\",\"getResponseHeader\",\"more\",\"hasMore\",\"Endpoint\",\"initializedDeferreds\",\"schema\",\"schemaConstructed\",\"schemaModel\",\"once\",\"constructFromSchema\",\"sessionStorage\",\"cacheSchema\",\"getItem\",\"JSON\",\"newSchemaModel\",\"setItem\",\"stringify\",\"error\",\"err\",\"console\",\"log\",\"modelRoutes\",\"collectionRoutes\",\"schemaRoot\",\"routeModel\",\"mapping\",\"Comments\",\"Pages\",\"PagesMeta\",\"PagesRevisions\",\"Posts\",\"PostsCategories\",\"PostsRevisions\",\"PostsTags\",\"Statuses\",\"Taxonomies\",\"Types\",\"Users\",\"PostsMeta\",\"index\",\"test\",\"modelRoute\",\"routeName\",\"parentName\",\"routeEnd\",\"endpoints\",\"collectionRoute\",\"collectionClassName\",\"init\",\"endpoint\",\"add\",\"done\",\"resolveWith\",\"loadPromise\"],\"mappings\":\"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\",\"file\":\"wp-api.min.js\"}"
        }
      ]
    }
  ]
}