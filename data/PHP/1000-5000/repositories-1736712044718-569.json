{
  "metadata": {
    "timestamp": 1736712044718,
    "page": 569,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spatie/laravel-collection-macros",
      "stars": 1774,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3046875,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.5185546875,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n# Ignore all test and documentation with \"export-ignore\".\n/.github            export-ignore\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/.editorconfig      export-ignore\n/.travis.yml        export-ignore\n/.php_cs.php        export-ignore\n/phpunit.xml.dist   export-ignore\n/.scrutinizer.yml   export-ignore\n/tests              export-ignore\n/CHANGELOG.md       export-ignore\n/CONTRIBUTING.md    export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0859375,
          "content": "build\ncomposer.lock\ndocs\nvendor\n.php_cs.cache\n.phpunit.result.cache\n.php-cs-fixer.cache\n"
        },
        {
          "name": ".php_cs.php",
          "type": "blob",
          "size": 1.251953125,
          "content": "<?php\n\n$finder = Symfony\\Component\\Finder\\Finder::create()\n    ->in([\n        __DIR__ . '/src',\n        __DIR__ . '/tests',\n    ])\n    ->name('*.php')\n    ->notName('*.blade.php')\n    ->ignoreDotFiles(true)\n    ->ignoreVCS(true);\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules([\n        '@PSR12' => true,\n        'array_syntax' => ['syntax' => 'short'],\n        'ordered_imports' => ['sort_algorithm' => 'alpha'],\n        'no_unused_imports' => true,\n        'not_operator_with_successor_space' => true,\n        'trailing_comma_in_multiline' => true,\n        'phpdoc_scalar' => true,\n        'unary_operator_spaces' => true,\n        'binary_operator_spaces' => true,\n        'blank_line_before_statement' => [\n            'statements' => ['break', 'continue', 'declare', 'return', 'throw', 'try'],\n        ],\n        'phpdoc_single_line_var_spacing' => true,\n        'phpdoc_var_without_name' => true,\n        'class_attributes_separation' => [\n            'elements' => [\n                'method' => 'one',\n            ],\n        ],\n        'method_argument_space' => [\n            'on_multiline' => 'ensure_fully_multiline',\n            'keep_multiple_spaces_after_comma' => true,\n        ],\n        'single_trait_insert_per_statement' => true,\n    ])\n    ->setFinder($finder);\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 8.875,
          "content": "# Changelog\n\nAll notable changes to `laravel-collection-macros` will be documented in this file\n\n## 7.14.2 - 2024-12-11\n\n### What's Changed\n\n* fix: php 8.4 compatibility by @calebdw in https://github.com/spatie/laravel-collection-macros/pull/251\n\n### New Contributors\n\n* @calebdw made their first contribution in https://github.com/spatie/laravel-collection-macros/pull/251\n\n**Full Changelog**: https://github.com/spatie/laravel-collection-macros/compare/7.14.1...7.14.2\n\n## 7.14.1 - 2024-07-02\n\n### What's Changed\n\n* pluckMany dotted key support by @sfinktah in https://github.com/spatie/laravel-collection-macros/pull/248\n\n**Full Changelog**: https://github.com/spatie/laravel-collection-macros/compare/7.14.0...7.14.1\n\n## 7.14.0 - 2024-03-08\n\n### What's Changed\n\n* Laravel 11.x Compatibility by @laravel-shift in https://github.com/spatie/laravel-collection-macros/pull/249\n\n### New Contributors\n\n* @laravel-shift made their first contribution in https://github.com/spatie/laravel-collection-macros/pull/249\n\n**Full Changelog**: https://github.com/spatie/laravel-collection-macros/compare/7.13.1...7.14.0\n\n## 7.13.1 - 2023-10-17\n\n### What's Changed\n\n- feat(collectBy): support dot-notation by @innocenzi in https://github.com/spatie/laravel-collection-macros/pull/247\n\n### New Contributors\n\n- @innocenzi made their first contribution in https://github.com/spatie/laravel-collection-macros/pull/247\n\n**Full Changelog**: https://github.com/spatie/laravel-collection-macros/compare/7.13.0...7.13.1\n\n## 7.13.0 - 2023-06-30\n\n- add `hasCaseSensitive` and `getCaseSensitive`\n- drop support for older PHP and Laravel versions\n- refactor tests to Pest\n\n## 7.12.5 - 2023-05-11\n\n### What's Changed\n\n- Sfink pluck many values by @sfinktah in https://github.com/spatie/laravel-collection-macros/pull/242\n\n### New Contributors\n\n- @sfinktah made their first contribution in https://github.com/spatie/laravel-collection-macros/pull/242\n\n**Full Changelog**: https://github.com/spatie/laravel-collection-macros/compare/7.12.4...7.12.5\n\n## 7.12.4 - 2023-03-22\n\n### What's Changed\n\n- Add max depth parameter for recursive macro by @Kyzegs in https://github.com/spatie/laravel-collection-macros/pull/240\n\n### New Contributors\n\n- @Kyzegs made their first contribution in https://github.com/spatie/laravel-collection-macros/pull/240\n\n**Full Changelog**: https://github.com/spatie/laravel-collection-macros/compare/7.12.3...7.12.4\n\n## 7.12.3 - 2023-01-24\n\n- support L10\n\n## 7.12.2 - 2022-11-10\n\n### What's Changed\n\n- Fix warnings on running the test suite by @alexmanase in https://github.com/spatie/laravel-collection-macros/pull/238\n\n### New Contributors\n\n- @alexmanase made their first contribution in https://github.com/spatie/laravel-collection-macros/pull/238\n\n**Full Changelog**: https://github.com/spatie/laravel-collection-macros/compare/7.12.1...7.12.2\n\n## 7.12.1 - 2022-10-03\n\n### What's Changed\n\n- Update containsAll description by @NilLlisterri in https://github.com/spatie/laravel-collection-macros/pull/233\n\n### New Contributors\n\n- @NilLlisterri made their first contribution in https://github.com/spatie/laravel-collection-macros/pull/233\n\n**Full Changelog**: https://github.com/spatie/laravel-collection-macros/compare/7.12.0...7.12.1\n\n## 7.12.0 - 2022-08-05\n\n### What's Changed\n\n- Update .gitattributes by @angeljqv in https://github.com/spatie/laravel-collection-macros/pull/231\n- Added `containsAny` and `containsAll` by @freekmurze and @michaelnabil230\n\n### New Contributors\n\n- @angeljqv made their first contribution in https://github.com/spatie/laravel-collection-macros/pull/231\n\n**Full Changelog**: https://github.com/spatie/laravel-collection-macros/compare/7.11.0...7.12.0\n\n## 7.11.0 - 2022-03-18\n\n## What's Changed\n\n- Add `weightedRandom` macro by @freekmurze in https://github.com/spatie/laravel-collection-macros/pull/224\n\n**Full Changelog**: https://github.com/spatie/laravel-collection-macros/compare/7.10.0...7.11.0\n\n## 7.10.0 - 2022-01-13\n\n- support Laravel 9\n\n## 7.9.0 - 2021-11-22\n\n## What's Changed\n\n- Add `path` macro by @michael-rubel in https://github.com/spatie/laravel-collection-macros/pull/220\n\n## New Contributors\n\n- @michael-rubel made their first contribution in https://github.com/spatie/laravel-collection-macros/pull/220\n\n**Full Changelog**: https://github.com/spatie/laravel-collection-macros/compare/7.8.0...7.9.0\n\n## 7.7.0 - 2021-10-24\n\n- add `if` macro\n\n## 7.6.0 - 2021-10-15\n\n- Fix docblock indentation by @dwightwatson in https://github.com/spatie/laravel-collection-macros/pull/211\n- Add before and after macros by @shugyosha89 in https://github.com/spatie/laravel-collection-macros/pull/213\n- Using slice to get the nth element by @mateusjunges in https://github.com/spatie/laravel-collection-macros/pull/214\n\n## 7.5.0 - 2021-10-05\n\n- add `insertAt` macro (#209)\n\n## 7.4.0 - 2021-09-07\n\n- add `pluckMany` (#207)\n\n## 7.3.0 - 2021-07-15\n\n- add `firstOrPush`\n\n## 7.2.0 - 2021-05-09\n\n- add getNth macro (#201)\n\n## 7.1.0 - 2020-12-02\n\n- add support for PHP 8\n\n## 7.0.3 - 2020-09-08\n\n- add support for Laravel 8\n\n## 7.0.2 - 2020-07-03\n\n- improve second, third, ... marcros\n\n## 7.0.1 - 2020-06-11\n\n- use registry over file scan + string manipulation (#179)\n\n## 7.0.0 - 2020-06-11\n\n- drop support for Laravel 6\n- drop support for PHP 7.3 and below\n\n## 6.3.1 - 2021-06-10\n\n- add PHP 8 support\n\n## 6.3.0 - 2021-06-10\n\n**DO NOT USE: incorrectly tagged**\n\n- add PHP 8 support\n\n## 6.2.0 - 2020-06-11\n\n- add `try` and `catch` macros\n\n## 6.1.0 - 2020-03-03\n\n- Laravel 7 support\n\n## 6.0.0 - 2019-09-04\n\n- Laravel 6 support\n- Renamed `collect()` macro to `collectBy()` to resolve Laravel 6 compatibility\n\n## 5.0.2 - 2019-0319\n\n- require laravel 5.8.4\n- remove `join` method as the same implementation has been added to Laravel\n\n## 5.0.1 - 2019-03-07\n\n- fix `paginate` for pages other than 1\n\n## 5.0.0 - 2019-02-27\n\n- `prioritize` will keep the keys of the original item\n- drop support for Laravel 5.7 and below\n- drop support for PHP 7.1 and below\n\n## 4.3.2 - 2019-03-07\n\n- fix `paginate` for pages other than 1\n\n## 4.3.1 - 2019-02-27\n\n- add support for Laravel 5.8\n\n## 4.3.0 - 2019-02-25\n\n- add `join` macro\n\n## 4.2.0 - 2018-12-16\n\n- add `head` macro\n\n## 4.1.0 - 2018-11-29\n\n- add methods to get items by human named indexes\n\n## 4.0.1 - 2018-10-19\n\n- `parallels` macro tests fix\n\n## 4.0.0 - 2018-08-28\n\n- `firstOrFail` will return the item instead of a collection\n- support for Laravel 5.7\n- removed `range` macro\n\n## 3.8.1 - 2018-02-23\n\n- Fixed: maximum function nesting reached error in `eachCons`\n\n## 3.8.0 - 2018-02-08\n\n- Added: Laravel 5.6 compatibility\n\n## 3.7.0 - 2018-01-18\n\n- Added: `pluckToArray`\n\n## 3.6.2 - 2018-01-14\n\n- Fixed: Make `parallelMap` return a new collection\n\n## 3.6.1 - 2018-01-07\n\n- Fixed: Count warning/exception php7.2 in `Transpose`\n\n## 3.6.0 - 2017-12-18\n\n- Added: Allow worker pool of `parallelMap` to be configured\n\n## 3.5.0 - 2017-12-18\n\n- Added: `parallelMap`\n\n## 3.4.0 - 2017-11-13\n\n- Added: `findOrFail`\n\n## 3.3.2 - 2017-10-30\n\n- Fixed: `transpose` when using an empty array\n- Fixed: `transpose` when using an `Arrayable`\n\n## 3.3.1 - 2017-10-24\n\n- Fixed: `transpose` when using a single-row matrix\n\n## 3.3.0 - 2017-10-17\n\n- Added: `at`\n\n## 3.2.0 - 2017-10-11\n\n- Added: `rotate`\n\n## 3.1.0 - 2017-09-28\n\n- Added: `filterMap`\n\n## 3.0.0 - 2017-08-30\n\n- Added: support for Laravel 5.5, removed support for older versions\n- Added: `glob` macro\n- Removed: `dd` and `dump` macros\n- Changed: Parameter order for `groupByModel` and `sectionBy`\n\n## 2.7.0 - 2017-08-25\n\n- Added: `$itemsKey` and `$preserveKeys` parameters to `groupByModel`\n\n## 2.6.0 - 2017-08-22\n\n- Added: `tail`, `eachCons`, `sliceBefore` and `chunkBy`\n\n## 2.5.0 - 2017-08-03\n\n- Added: customization options for `sectionBy`\n\n## 2.4.0 - 2017-08-02\n\n- Added: `sectionBy`\n\n## 2.3.1 - 2017-07-11\n\n- Fixed: `extract` now returns an instance of the current collection type\n\n## 2.3.0 - 2017-07-11\n\n- Added: `extract`\n\n## 2.2.0 - 2017-07-04\n\n- Added: `paginate` and `simplePaginate`\n\n## 2.1.0 - 2017-02-10\n\n- Added: `before` and `after`\n- Added: `collect`\n\n## 2.0.1 - 2017-01-24\n\n- Added: `toPairs` and `withSize`\n- Removed: `split`, `partition` and `mapToAssoc`\n- Renamed: `toAssoc` to `fromPairs`\n\n## 1.5.1 - 2016-01-24\n\n- Fixed: Tests\n\n## 1.5.0 - 2016-11-29\n\n- Added: `partition` method\n\n## 1.4.4 - 2016-09-01\n\n- Fixed: `split` doesn't throw an error anymore when trying to split an empty collection\n\n## 1.4.3 - 2016-08-30\n\n- Fixed: `version_compare` fix in 5.3 changes\n\n## 1.4.2 - 2016-08-23\n\n- Added: Laravel 5.3 compatibility\n\n## 1.4.1 - 2016-08-20\n\n- *Maintenance release to kickstart Packagist after `composer.json` error*\n\n## 1.4.0 - 2016-08-20\n\n- Added: `dump` macro\n\n## 1.3.1 - 2016-08-16\n\n- Changed: `transpose` will throw an exception when invalid input is given and it'll return a collection of collections\n\n## 1.3.0 - 2016-08-12\n\n- Added: `transpose` macro\n\n## 1.2.0 - 2016-08-11\n\n- Added: `assoc` and `toAssoc` macros\n\n## 1.1.0 - 2016-08-10\n\n- Changed: The collection will be passed to the callbacks of `ifAny` and `ifEmpty`\n\n## 1.0.0 - 2016-08-09\n\n- Initial release\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.1015625,
          "content": "````# The MIT License (MIT)\n\nCopyright (c) Spatie bvba <info@spatie.be>\n\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> of this software and associated documentation files (the \"Software\"), to deal\n> in the Software without restriction, including without limitation the rights\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> copies of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in\n> all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n> THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 25.3203125,
          "content": "# A set of useful Laravel collection macros\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/spatie/laravel-collection-macros.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-collection-macros)\n![Run tests](https://github.com/spatie/laravel-collection-macros/workflows/Run%20tests/badge.svg)\n![Check & fix styling](https://github.com/spatie/laravel-collection-macros/workflows/Check%20&%20fix%20styling/badge.svg)\n[![Total Downloads](https://img.shields.io/packagist/dt/spatie/laravel-collection-macros.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-collection-macros)\n\nThis repository contains some useful collection macros.\n\nSpatie is a webdesign agency based in Antwerp, Belgium. You'll find an overview of all our open source projects [on our website](https://spatie.be/opensource).\n\n## Support us\n\n[<img src=\"https://github-ads.s3.eu-central-1.amazonaws.com/laravel-collection-macros.jpg?t=1\" width=\"419px\" />](https://spatie.be/github-ad-click/laravel-collection-macros)\n\nWe invest a lot of resources into creating [best in class open source packages](https://spatie.be/open-source). You can support us by [buying one of our paid products](https://spatie.be/open-source/support-us).\n\nWe highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You'll find our address on [our contact page](https://spatie.be/about-us). We publish all received postcards on [our virtual postcard wall](https://spatie.be/open-source/postcards).\n\n## Installation\n\nYou can pull in the package via composer:\n\n``` bash\ncomposer require spatie/laravel-collection-macros\n```\n\nThe package will automatically register itself.\n\n## Macros\n\n- [`after`](#after)\n- [`at`](#at)\n    - [`second`](#second)\n    - [`third`](#third)\n    - [`fourth`](#fourth)\n    - [`fifth`](#fifth)\n    - [`sixth`](#sixth)\n    - [`seventh`](#seventh)\n    - [`eighth`](#eighth)\n    - [`ninth`](#ninth)\n    - [`tenth`](#tenth)\n    - [`getNth`](#getNth)\n- [`before`](#before)\n- [`catch`](#catch)\n- [`chunkBy`](#chunkby)\n- [`collectBy`](#collectBy)\n- [`containsAny`](#containsAny)\n- [`containsAll`](#containsAll)\n- [`eachCons`](#eachcons)\n- [`extract`](#extract)\n- [`filterMap`](#filtermap)\n- [`firstOrFail`](#firstorfail)\n- [`firstOrPush`](#firstorpush)\n- [`fromPairs`](#frompairs)\n- [`getCaseInsensitive`](#getcaseinsensitive)\n- [`glob`](#glob)\n- [`groupByModel`](#groupbymodel)\n- [`hasCaseInsensitive`](#hascaseinsensitive)\n- [`head`](#head)\n- [`if`](#if)\n- [`ifAny`](#ifany)\n- [`ifEmpty`](#ifempty)\n- [`insertAfter`](#insertafter)\n- [`insertAfterKey`](#insertafterkey)\n- [`insertAt`](#insertat)\n- [`insertBefore`](#insertbefore)\n- [`insertBeforeKey`](#insertbeforekey)\n- [`none`](#none)\n- [`paginate`](#paginate)\n- [`path`](#path)\n- [`pluckMany`](#pluckmany)\n- [`pluckManyValues`](#pluckmanyvalues)\n- [`pluckToArray`](#plucktoarray)\n- [`prioritize`](#prioritize)\n- [`recursive`](#recursive)\n- [`rotate`](#rotate)\n- [`sectionBy`](#sectionby)\n- [`simplePaginate`](#simplepaginate)\n- [`sliceBefore`](#slicebefore)\n- [`tail`](#tail)\n- [`try`](#try)\n- [`toPairs`](#topairs)\n- [`transpose`](#transpose)\n- [`validate`](#validate)\n- [`weightedRandom`](#weightedRandom)\n- [`withSize`](#withsize)\n\n### `after`\n\nGet the next item from the collection.\n\n```php\n$collection = collect([1,2,3]);\n\n$currentItem = 2;\n\n$currentItem = $collection->after($currentItem); // return 3;\n$collection->after($currentItem); // return null;\n\n$currentItem = $collection->after(function($item) {\n    return $item > 1;\n}); // return 3;\n```\n\nYou can also pass a second parameter to be used as a fallback.\n\n```php\n$collection = collect([1,2,3]);\n\n$currentItem = 3;\n\n$collection->after($currentItem, $collection->first()); // return 1;\n```\n\n### `at`\n\nRetrieve an item at an index.\n\n```php\n$data = new Collection([1, 2, 3]);\n\n$data->at(0); // 1\n$data->at(1); // 2\n$data->at(-1); // 3\n```\n\n### `second`\nRetrieve item at the second index.\n\n```php\n$data = new Collection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n$data->second(); // 2\n```\n\n### `third`\nRetrieve item at the third index.\n\n```php\n$data = new Collection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n$data->third(); // 3\n```\n\n### `fourth`\nRetrieve item at the fourth index.\n\n```php\n$data = new Collection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n$data->fourth(); // 4\n```\n\n### `fifth`\nRetrieve item at the fifth index.\n\n```php\n$data = new Collection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n$data->fifth(); // 5\n```\n\n### `sixth`\nRetrieve item at the sixth index.\n\n```php\n$data = new Collection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n$data->sixth(); // 6\n```\n\n### `seventh`\nRetrieve item at the seventh index.\n\n```php\n$data = new Collection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n$data->seventh(); // 7\n```\n\n### `eighth`\nRetrieve item at the eighth index.\n\n```php\n$data = new Collection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n$data->eighth(); // 8\n```\n\n### `ninth`\nRetrieve item at the ninth index.\n\n```php\n$data = new Collection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n$data->ninth(); // 9\n```\n\n### `tenth`\nRetrieve item at the tenth index.\n\n```php\n$data = new Collection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n$data->tenth(); // 10\n```\n\n### `getNth`\nRetrieve item at the nth item.\n\n```php\n$data = new Collection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\n\n$data->getNth(11); // 11\n```\n\n### `before`\n\nGet the previous item from the collection.\n\n```php\n$collection = collect([1,2,3]);\n\n$currentItem = 2;\n\n$currentItem = $collection->before($currentItem); // return 1;\n$collection->before($currentItem); // return null;\n\n$currentItem = $collection->before(function($item) {\n    return $item > 2;\n}); // return 2;\n```\n\nYou can also pass a second parameter to be used as a fallback.\n\n```php\n$collection = collect([1,2,3]);\n\n$currentItem = 1;\n\n$collection->before($currentItem, $collection->last()); // return 3;\n```\n\n### `catch`\n\nSee [`Try`](#try)\n\n### `chunkBy`\n\nChunks the values from a collection into groups as long the given callback is true. If the optional parameter `$preserveKeys` as `true` is passed, it will preserve the original keys.\n\n```php\ncollect(['A', 'A', 'B', 'A'])->chunkBy(function($item) {\n    return $item == 'A';\n}); // return Collection([['A', 'A'],['B'], ['A']])\n```\n\n### `collectBy`\n\nGet an item at a given key, and collect it.\n\n```php\n$collection = collect([\n    'foo' => [1, 2, 3],\n    'bar' => [4, 5, 6],\n]);\n\n$collection->collectBy('foo'); // Collection([1, 2, 3])\n```\n\nYou can also pass a second parameter to be used as a fallback.\n\n```php\n$collection = collect([\n    'foo' => [1, 2, 3],\n    'bar' => [4, 5, 6],\n]);\n\n$collection->collectBy('baz', ['Nope']); // Collection(['Nope'])\n```\n\n### `containsAny`\n\nWill return `true` if one or more of the given values exist in the collection.\n\n```php\n$collection = collect(['a', 'b', 'c']);\n\n$collection->containsAny(['b', 'c', 'd']); // returns true\n$collection->containsAny(['c', 'd', 'e']); // returns true\n$collection->containsAny(['d', 'e', 'f']); // returns false\n$collection->containsAny([]); // returns false\n```\n\n### `containsAll`\n\nWill return `true` if all given values exist in the collection.\n\n```php\n$collection = collect(['a', 'b', 'c']);\n\n$collection->containsAll(['b', 'c',]); // returns true\n$collection->containsAll(['c', 'd']); // returns false\n$collection->containsAll(['d', 'e']); // returns false\n$collection->containsAll([]); // returns true\n```\n\n### `eachCons`\n\nGet the following consecutive neighbours in a collection from a given chunk size. If the optional parameter `$preserveKeys` as `true` is passed, it will preserve the original keys.\n\n```php\ncollect([1, 2, 3, 4])->eachCons(2); // return collect([[1, 2], [2, 3], [3, 4]])\n```\n\n### `extract`\n\nExtract keys from a collection. This is very similar to `only`, with two key differences:\n\n- `extract` returns an array of values, not an associative array\n- If a value doesn't exist, it will fill the value with `null` instead of omitting it\n\n`extract` is useful when using PHP 7.1 short `list()` syntax.\n\n```php\n[$name, $role] = collect($user)->extract('name', 'role.name');\n```\n\n### `filterMap`\n\nMap a collection and remove falsy values in one go.\n\n```php\n$collection = collect([1, 2, 3, 4, 5, 6])->filterMap(function ($number) {\n    $quotient = $number / 3;\n\n    return is_integer($quotient) ? $quotient : null;\n});\n\n$collection->toArray(); // returns [1, 2]\n```\n\n### `firstOrFail`\n\nGet the first item. Throws `Spatie\\CollectionMacros\\Exceptions\\CollectionItemNotFound` if the item was not found.\n\n```php\n$collection = collect([1, 2, 3, 4, 5, 6])->firstOrFail();\n\n$collection->toArray(); // returns [1]\n\ncollect([])->firstOrFail(); // throws Spatie\\CollectionMacros\\Exceptions\\CollectionItemNotFound\n```\n\n### `firstOrPush`\n\nRetrieve the first item using the callable given as the first parameter. If no value exists, push the value of the second\nparameter into the collection. You can pass a callable as the second parameter.\n\nThis method is really useful when dealing with cached class properties, where you want to store a value retrieved from an API or computationally expensive function in a collection to be used multiple times.\n\n```php\n$collection = collect([1, 2, 3])->firstOrPush(fn($item) => $item === 4, 4);\n\n$collection->toArray(); // returns [1, 2, 3, 4]\n```\n\nOccasionally, you'll want to specify the target collection to be pushed to. You may pass this as a third parameter.\n\n```php\n$collection = collect([1, 2, 3]);\n$collection->filter()->firstOrPush(fn($item) => $item === 4, 4, $collection);\n\n$collection->toArray(); // returns [1, 2, 3, 4]\n```\n\n### `fromPairs`\n\nTransform a collection into an associative array form collection item.\n\n```php\n$collection = collect([['a', 'b'], ['c', 'd'], ['e', 'f']])->fromPairs();\n\n$collection->toArray(); // returns ['a' => 'b', 'c' => 'd', 'e' => 'f']\n```\n\n### `getCaseInsensitive`\n\nGet the value of a given key. \n\nIf the key is a string, we'll search for the key using a case-insensitive comparison.\n\n```php\n$collection = collect([\n    'foo' => 'bar',\n]);\n\n$collection->getCaseInsensitive('Foo'); // returns 'bar';\n```\n\n### `glob`\n\nReturns a collection of a `glob()` result.\n\n```php\nCollection::glob('config/*.php');\n```\n\n### `groupByModel`\n\nSimilar to `groupBy`, but groups the collection by an Eloquent model. Since the key is an object instead of an integer or string, the results are divided into separate arrays.\n\n```php\n$posts->groupByModel('category');\n\n// [\n//     [$categoryA, [/*...$posts*/]],\n//     [$categoryB, [/*...$posts*/]],\n// ];\n```\n\nFull signature: `groupByModel($callback, $preserveKeys, $modelKey, $itemsKey)`\n\n### `hasCaseInsensitive`\n\nDetermine if the collection contains a key with a given name.\n\nIf $key is a string, we'll search for the key using a case-insensitive comparison.\n\n```php\n$collection = collect([\n    'foo' => 'bar',\n]);\n\n$collection->hasCaseInsensitive('Foo'); // returns true;\n```\n\n### `head`\n\nRetrieves first item from the collection.\n\n```php\n$collection = collect([1,2,3]);\n\n$collection->head(); // return 1\n\n$collection = collect([]);\n\n$collection->head(); // return null\n```\n\n### `if`\n\nThe `if` macro can help  branch collection chains. This is the signature of this macro: \n\n```php\nif(mixed $if, mixed $then = null, mixed $else = null): mixed\n```\n\n`$if`, `$then` and `$else` can be any type. If a closure is passed to any of these parameters, then that closure will be executed and the macro will use its results.\n\nWhen `$if` returns a truthy value, then `$then` will be returned, otherwise `$else` will be returned.\n\nHere are some examples:\n\n```php\ncollect()->if(true, then: true, else: false); // returns true\ncollect()->if(false, then: true, else: false); // returns false\n```\n\nWhen a closure is passed to `$if`, `$then` or `$else`, the entire collection will be passed as an argument to that closure.\n\n```php\n// the `then` closure will be executed\n// the first element of the returned collection now contains \"THIS IS THE VALUE\"\n$collection = collect(['this is a value'])\n    ->if(\n        fn(Collection $collection) => $collection->contains('this is a value'),\n        then: fn(Collection $collection) => $collection->map(fn(string $item) => strtoupper($item)),\n        else: fn(Collection $collection) => $collection->map(fn(string $item) => Str::kebab($item))\n    );\n\n// the `else` closure will be executed\n// the first element of the returned collection now contains \"this-is-another-value\"\n$collection = collect(['this is another value'])\n    ->if(\n        fn(Collection $collection) => $collection->contains('this is a value'),\n        then: fn(Collection $collection) => $collection->map(fn(string $item) => strtoupper($item)),\n        else: fn(Collection $collection) => $collection->map(fn(string $item) => Str::kebab($item))\n    );\n```\n\n### `ifAny`\n\nExecutes the passed callable if the collection isn't empty. The entire collection will be returned.\n\n```php\ncollect()->ifAny(function(Collection $collection) { // empty collection so this won't get called\n   echo 'Hello';\n});\n\ncollect([1, 2, 3])->ifAny(function(Collection $collection) { // non-empty collection so this will get called\n   echo 'Hello';\n});\n```\n\n### `ifEmpty`\n\nExecutes the passed callable if the collection is empty. The entire collection will be returned.\n\n```php\ncollect()->ifEmpty(function(Collection $collection) { // empty collection so this will called\n   echo 'Hello';\n});\n\ncollect([1, 2, 3])->ifEmpty(function(Collection $collection) { // non-empty collection so this won't get called\n   echo 'Hello';\n});\n```\n\n### `insertAfter`\n\nInserts an item after the first occurrence of a given item and returns the updated Collection instance.\nOptionally a key can be given.\n\n```php\ncollect(['zero', 'two', 'three'])->insertAfter('zero', 'one');\n// Collection contains ['zero', 'one', 'two', 'three']\n\ncollect(['zero' => 0, 'two' => 2, 'three' => 3]->insertAfter(0, 5, 'five');\n// Collection contains ['zero' => 0, 'five' => 5, 'two' => 2, 'three' => 3]\n```\n\n### `insertAfterKey`\n\nInserts an item after a given key and returns the updated Collection instance.\nOptionally a key for the new item can be given.\n\n```php\ncollect(['zero', 'two', 'three'])->insertAfterKey(0, 'one');\n// Collection contains ['zero', 'one', 'two', 'three']\n\ncollect(['zero' => 0, 'two' => 2, 'three' => 3]->insertAfterKey('zero', 5, 'five');\n// Collection contains ['zero' => 0, 'five' => 5, 'two' => 2, 'three' => 3]\n```\n\n### `insertAt`\n\nInserts an item at a given index and returns the updated Collection instance. Optionally a key can be given.\n\n```php\ncollect(['zero', 'two', 'three'])->insertAt(1, 'one');\n// Collection contains ['zero', 'one', 'two', 'three']\n\ncollect(['zero' => 0, 'two' => 2, 'three' => 3]->insertAt(1, 5, 'five');\n// Collection contains ['zero' => 0, 'five' => 5, 'two' => 2, 'three' => 3]\n```\n\n### `insertBefore`\n\nInserts an item before the first occurrence of a given item and returns the updated Collection instance.\nOptionally a key can be given.\n\n```php\ncollect(['zero', 'two', 'three'])->insertBefore('two', 'one');\n// Collection contains ['zero', 'one', 'two', 'three']\n\ncollect(['zero' => 0, 'two' => 2, 'three' => 3]->insertBefore(2, 5, 'five');\n// Collection contains ['zero' => 0, 'five' => 5, 'two' => 2, 'three' => 3]\n```\n\n### `insertBeforeKey`\n\nInserts an item before a given key and returns the updated Collection instance.\nOptionally a key for the new item can be given.\n\n```php\ncollect(['zero', 'two', 'three'])->insertBeforeKey(1, 'one');\n// Collection contains ['zero', 'one', 'two', 'three']\n\ncollect(['zero' => 0, 'two' => 2, 'three' => 3]->insertBeforeKey('two', 5, 'five');\n// Collection contains ['zero' => 0, 'five' => 5, 'two' => 2, 'three' => 3]\n```\n\n### `none`\n\nChecks whether a collection doesn't contain any occurrences of a given item, key-value pair, or passing truth test. The function accepts the same parameters as the `contains` collection method.\n\n```php\ncollect(['foo'])->none('bar'); // returns true\ncollect(['foo'])->none('foo'); // returns false\n\ncollect([['name' => 'foo']])->none('name', 'bar'); // returns true\ncollect([['name' => 'foo']])->none('name', 'foo'); // returns false\n\ncollect(['name' => 'foo'])->none(function ($key, $value) {\n   return $key === 'name' && $value === 'bar';\n}); // returns true\n```\n\n### `paginate`\n\nCreate a `LengthAwarePaginator` instance for the items in the collection.\n\n```php\ncollect($posts)->paginate(5);\n```\n\nThis paginates the contents of `$posts` with 5 items per page. `paginate` accepts quite some options, head over to [the Laravel docs](https://laravel.com/docs/5.4/pagination) for an in-depth guide.\n\n```\npaginate(int $perPage = 15, string $pageName = 'page', ?int $page = null, ?int $total = null, array $options = [])\n```\n\n### `path`\n\nReturns an item from the collection with multidimensional data using \"dot\" notation.\nWorks the same way as native Collection's `pull` method, but without removing an item from the collection.\n\n```php\n$collection = new Collection([\n    'foo' => [\n        'bar' => [\n            'baz' => 'value',\n        ]\n    ]\n]);\n\n$collection->path('foo.bar.baz') // 'value'\n```\n\n### `pluckMany`\n\nReturns a collection with only the specified keys.\n\n```php\n$collection = collect([\n    ['a' => 1, 'b' => 10, 'c' => 100],\n    ['a' => 2, 'b' => 20, 'c' => 200],\n]);\n\n$collection->pluckMany(['a', 'b']);\n\n// returns\n// collect([\n//     ['a' => 1, 'b' => 10],\n//     ['a' => 2, 'b' => 20],\n// ]);\n```\n\n### `pluckManyValues`\n\nReturns a collection with only the specified keys' values.\n\n```php\n$collection = collect([\n    ['a' => 1, 'b' => 10, 'c' => 100],\n    ['a' => 2, 'b' => 20, 'c' => 200],\n]);\n\n$collection->pluckMany(['a', 'b']);\n\n// returns\n// collect([\n//     [1, 10],\n//     [2, 20],\n// ]);\n```\n\n### `pluckToArray`\n\nReturns array of values of a given key.\n\n```php\n$collection = collect([\n    ['a' => 1, 'b' => 10],\n    ['a' => 2, 'b' => 20],\n    ['a' => 3, 'b' => 30]\n]);\n\n$collection->pluckToArray('a'); // returns [1, 2, 3]\n```\n\n### `prioritize`\n\nMove elements to the start of the collection.\n\n```php\n$collection = collect([\n    ['id' => 1],\n    ['id' => 2],\n    ['id' => 3],\n]);\n\n$collection\n   ->prioritize(function(array $item) {\n      return $item['id'] === 2;\n   })\n   ->pluck('id')\n   ->toArray(); // returns [2, 1, 3]\n```\n\n### `recursive`\n\nConvert an array and its children to collection using recursion.\n\n```php\ncollect([\n  'item' => [\n     'children' => []\n  ]   \n])->recursive();\n\n// subsequent arrays are now collections\n```\n\nIn some cases you may not want to turn all the children into a collection. You can convert only to a certain depth by providing a number to the recursive method.\n\n```php\ncollect([\n  'item' => [\n     'children' => [\n        'one' => [1],\n        'two' => [2]\n     ]\n  ]   \n])->recursive(1); // Collection(['item' => Collection(['children' => ['one' => [1], 'two' => [2]]])])\n```\n\nThis can be useful when you know that at a certain depth it'll not be necessary or that it may break your code.\n\n```php\ncollect([\n  'item' => [\n     'children' => [\n        'one' => [1],\n        'two' => [2]\n     ]\n  ]   \n])\n  ->recursive(1)\n  ->map(function ($item) {\n    return $item->map(function ($children) {\n      return $children->mapInto(Model::class);\n    });\n  }); // Collection(['item' => Collection(['children' => ['one' => Model(), 'two' => Model()]])])\n\n// If we do not pass a max depth we will get the error \"Argument #1 ($attributes) must be of type array\"\n```\n\n### `rotate`\n\nRotate the items in the collection with given offset\n\n```php\n$collection = collect([1, 2, 3, 4, 5, 6]);\n\n$rotate = $collection->rotate(1);\n\n$rotate->toArray();\n\n// [2, 3, 4, 5, 6, 1]\n```\n\n### `sectionBy`\n\nSplits a collection into sections grouped by a given key. Similar to `groupBy` but respects the order of the items in the collection and reuses existing keys.\n\n```php\n$collection = collect([\n    ['name' => 'Lesson 1', 'module' => 'Basics'],\n    ['name' => 'Lesson 2', 'module' => 'Basics'],\n    ['name' => 'Lesson 3', 'module' => 'Advanced'],\n    ['name' => 'Lesson 4', 'module' => 'Advanced'],\n    ['name' => 'Lesson 5', 'module' => 'Basics'],\n]);\n\n$collection->sectionBy('module');\n\n// [\n//     ['Basics', [\n//         ['name' => 'Lesson 1', 'module' => 'Basics'],\n//         ['name' => 'Lesson 2', 'module' => 'Basics'],\n//     ]],\n//     ['Advanced', [\n//         ['name' => 'Lesson 3', 'module' => 'Advanced'],\n//         ['name' => 'Lesson 4', 'module' => 'Advanced'],\n//     ]],\n//     ['Basics', [\n//         ['name' => 'Lesson 5', 'module' => 'Basics'],\n//     ]],\n// ];\n```\n\nFull signature: `sectionBy($callback, $preserveKeys, $sectionKey, $itemsKey)`\n\n### `simplePaginate`\n\nCreate a `Paginator` instance for the items in the collection.\n\n```php\ncollect($posts)->simplePaginate(5);\n```\n\nThis paginates the contents of `$posts` with 5 items per page. `simplePaginate` accepts quite some options, head over to [the Laravel docs](https://laravel.com/docs/5.4/pagination) for an in-depth guide.\n\n```\nsimplePaginate(int $perPage = 15, string $pageName = 'page', ?int $page = null, ?int $total = null, array $options = [])\n```\n\nFor a in-depth guide on pagination, check out [the Laravel docs](https://laravel.com/docs/5.4/pagination).\n\n### `sliceBefore`\n\nSlice the values out from a collection before the given callback is true. If the optional parameter `$preserveKeys` as `true` is passed, it will preserve the original keys.\n\n```php\ncollect([20, 51, 10, 50, 66])->sliceBefore(function($item) {\n    return $item > 50;\n}); // return collect([[20],[51, 10, 50], [66])\n```\n\n### `tail`\n\nExtract the tail from a collection. So everything except the first element. It's a shorthand for `slice(1)->values()`, but nevertheless very handy. If the optional parameter `$preserveKeys` as `true` is passed, it will preserve the keys and fallback to `slice(1)`.\n\n```php\ncollect([1, 2, 3])->tail(); // return collect([2, 3])\n```\n\n### `toPairs`\n\nTransform a collection into an array with pairs.\n\n```php\n$collection = collect(['a' => 'b', 'c' => 'd', 'e' => 'f'])->toPairs();\n\n$collection->toArray(); // returns ['a', 'b'], ['c', 'd'], ['e', 'f']\n```\n\n### `transpose`\n\nThe goal of transpose is to rotate a multidimensional array, turning the rows into columns and the columns into rows.\n\n```php\ncollect([\n    ['Jane', 'Bob', 'Mary'],\n    ['jane@example.com', 'bob@example.com', 'mary@example.com'],\n    ['Doctor', 'Plumber', 'Dentist'],\n])->transpose()->toArray();\n\n// [\n//     ['Jane', 'jane@example.com', 'Doctor'],\n//     ['Bob', 'bob@example.com', 'Plumber'],\n//     ['Mary', 'mary@example.com', 'Dentist'],\n// ]\n```\n\n### `try`\n\nIf any of the methods between `try` and `catch` throw an exception, then the exception can be handled in `catch`.\n\n```php\ncollect(['a', 'b', 'c', 1, 2, 3])\n    ->try()\n    ->map(fn ($letter) => strtoupper($letter))\n    ->each(function() {\n        throw new Exception('Explosions in the sky');\n    })\n    ->catch(function (Exception $exception) {\n        // handle exception here\n    })\n    ->map(function() {\n        // further operations can be done, if the exception wasn't rethrow in the `catch`\n    });\n```\n\nWhile the methods are named `try`/`catch` for familiarity with PHP, the collection itself behaves more like a database transaction. So when an exception is thrown, the original collection (before the try) is returned.\n\nYou may gain access to the collection within catch by adding a second parameter to your handler. You may also manipulate the collection within catch by returning a value.\n\n```php\n$collection = collect(['a', 'b', 'c', 1, 2, 3])\n    ->try()\n    ->map(function ($item) {\n        throw new Exception();\n    })\n    ->catch(function (Exception $exception, $collection) {\n        return collect(['d', 'e', 'f']);\n    })\n    ->map(function ($item) {\n        return strtoupper($item);\n    });\n\n// ['D', 'E', 'F']\n```\n\n### `validate`\n\nReturns `true` if the given `$callback` returns true for every item. If `$callback` is a string or an array, regard it as a validation rule.\n\n```php\ncollect(['foo', 'foo'])->validate(function ($item) {\n   return $item === 'foo';\n}); // returns true\n\n\ncollect(['sebastian@spatie.be', 'bla'])->validate('email'); // returns false\ncollect(['sebastian@spatie.be', 'freek@spatie.be'])->validate('email'); // returns true\n```\n\n### `weightedRandom`\n\nReturns a random item by a weight. In this example, the item with `a` has the most chance to get picked, and the item with `c` the least.\n\n```php\n// pass the field name that should be used as a weight\n\n$randomItem = collect([\n    ['value' => 'a', 'weight' => 30],\n    ['value' => 'b', 'weight' => 20],\n    ['value' => 'c', 'weight' => 10],\n])->weightedRandom('weight');\n```\n\nAlternatively, you can pass a callable to get the weight.\n\n```php\n$randomItem = collect([\n    ['value' => 'a', 'weight' => 30],\n    ['value' => 'b', 'weight' => 20],\n    ['value' => 'c', 'weight' => 10],\n])->weightedRandom(function(array $item) {\n   return $item['weight'];\n});\n```\n\n\n\n### `withSize`\n\nCreate a new collection with the specified amount of items.\n\n```php\nCollection::withSize(1)->toArray(); // return [1];\nCollection::withSize(5)->toArray(); // return [1,2,3,4,5];\n```\n\n## Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information what has changed recently.\n\n## Testing\n\n``` bash\n$ composer test\n```\n\n## Contributing\n\nPlease see [CONTRIBUTING](https://github.com/spatie/.github/blob/main/CONTRIBUTING.md) for details.\n\n## Security\n\nIf you've found a bug regarding security please mail [security@spatie.be](mailto:security@spatie.be) instead of using the issue tracker.\n\n## Credits\n\n- [Freek Van der Herten](https://github.com/freekmurze)\n- [Sebastian De Deyne](https://github.com/sebastiandedeyne)\n- [All Contributors](../../contributors)\n\n## About Spatie\nSpatie is a webdesign agency based in Antwerp, Belgium. You'll find an overview of all our open source projects [on our website](https://spatie.be/opensource).\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.9150390625,
          "content": "{\n    \"name\": \"spatie/laravel-collection-macros\",\n    \"description\": \"A set of useful Laravel collection macros\",\n    \"keywords\": [\n        \"spatie\",\n        \"laravel-collection-macros\"\n    ],\n    \"homepage\": \"https://github.com/spatie/laravel-collection-macros\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Freek Van der Herten\",\n            \"email\": \"freek@spatie.be\",\n            \"homepage\": \"https://github.com/freekmurze\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"Sebastian De Deyne\",\n            \"email\": \"sebastian@spatie.be\",\n            \"homepage\": \"https://github.com/sebastiandedeyne\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.2\",\n        \"illuminate/support\": \"^10.0|^11.0\"\n    },\n    \"require-dev\": {\n        \"amphp/parallel\": \"^1.4.3|^2.2\",\n        \"amphp/parallel-functions\": \"^1.1.0|^2.0\",\n        \"mockery/mockery\": \"^1.6.2\",\n        \"orchestra/testbench\": \"^8.5.9|^9.0\",\n        \"pestphp/pest\": \"^2.0\",\n        \"phpunit/phpunit\": \"10.2.2|^10.5\",\n        \"spatie/laravel-ray\": \"^1.32.5\",\n        \"symfony/stopwatch\": \"^6.3|^7.0\"\n    },\n    \"suggest\": {\n        \"amphp/parallel-functions\": \"Required when using the parallel*-macros.\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Spatie\\\\CollectionMacros\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Spatie\\\\CollectionMacros\\\\Test\\\\\": \"tests\"\n        }\n    },\n    \"scripts\": {\n        \"format\": \"vendor/bin/php-cs-fixer fix --allow-risky=yes\",\n        \"test\": \"vendor/bin/pest\"\n    },\n    \"config\": {\n        \"sort-packages\": true,\n        \"allow-plugins\": {\n            \"pestphp/pest-plugin\": true\n        }\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"Spatie\\\\CollectionMacros\\\\CollectionMacroServiceProvider\"\n            ]\n        }\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.5234375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.2/phpunit.xsd\" bootstrap=\"vendor/autoload.php\" colors=\"true\">\n  <testsuites>\n    <testsuite name=\"Test Suite\">\n      <directory suffix=\"Test.php\">./tests</directory>\n    </testsuite>\n  </testsuites>\n  <coverage/>\n  <source>\n    <include>\n      <directory suffix=\".php\">./app</directory>\n      <directory suffix=\".php\">./src</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.6630859375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bootstrap=\"vendor/autoload.php\" backupGlobals=\"false\" backupStaticAttributes=\"false\" colors=\"true\" verbose=\"true\" convertErrorsToExceptions=\"true\" convertNoticesToExceptions=\"true\" convertWarningsToExceptions=\"true\" processIsolation=\"false\" stopOnFailure=\"false\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\">\n  <coverage>\n    <include>\n      <directory suffix=\".php\">src/</directory>\n    </include>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"Spatie Test Suite\">\n      <directory>tests</directory>\n    </testsuite>\n  </testsuites>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}