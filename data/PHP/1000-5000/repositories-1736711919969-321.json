{
  "metadata": {
    "timestamp": 1736711919969,
    "page": 321,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Open-Web-Analytics/Open-Web-Analytics",
      "stars": 2517,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.80859375,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text=lf\n\n#\n## These files are binary and should be left untouched\n#\n\n# (binary is a macro for -text -diff)\n*.png binary\n*.jpg binary\n*.jpeg binary\n*.gif binary\n*.ico binary\n*.mov binary\n*.mp4 binary\n*.mp3 binary\n*.flv binary\n*.fla binary\n*.swf binary\n*.gz binary\n*.zip binary\n*.7z binary\n*.ttf binary\n*.eot binary\n*.woff binary\n*.pyc binary\n*.pdf binary\n\n# source code\n*.php text filter=spabs\n*.css text filter=spabs\n*.sass text filter=spabs\n*.scss text filter=spabs\n*.less text filter=spabs\n*.styl text filter=spabs\n*.js text filter=spabs\n*.coffee text filter=spabs\n*.json text filter=spabs\n*.htm text filter=spabs\n*.html text filter=spabs\n*.xml text filter=spabs\n*.svg text filter=spabs\n*.txt text filter=spabs\n*.ini text filter=spabs\n*.inc text filter=spabs\n*.pl text filter=spabs\n*.rb text filter=spabs\n*.py text filter=spabs\n*.scm text filter=spabs\n*.sql text filter=spabs\n*.sh text filter=spabs\n*.bat text filter=spabs\n\n# templates\n*.ejs text filter=spabs\n*.hbt text filter=spabs\n*.jade text filter=spabs\n*.haml text filter=spabs\n*.hbs text filter=spabs\n*.dot text filter=spabs\n*.tmpl text filter=spabs\n*.tpl text filter=spabs\n*.phtml text filter=spabs\n\n# server config\n.htaccess text filter=spabs\n\n# git config\n.gitattributes text filter=spabs\n.gitignore text filter=spabs\n.gitconfig text filter=spabs\n\n# code analysis config\n.jshintrc text filter=spabs\n.jscsrc text filter=spabs\n.jshintignore text filter=spabs\n.csslintrc text filter=spabs\n\n# misc config\n*.yaml text filter=spabs\n*.yml text filter=spabs\n.editorconfig text filter=spabs\n\n# build config\n*.npmignore text filter=spabs\n*.bowerrc text filter=spabs\n\n# Heroku\nProcfile text filter=spabs\n.slugignore text filter=spabs\n\n# Documentation\n*.md text filter=spabs\nLICENSE text filter=spabs\nAUTHORS text filter=spabs\n"
        },
        {
          "name": ".gitconfig",
          "type": "blob",
          "size": 0.1259765625,
          "content": "[filter \"spabs\"]\n    clean = expand --initial -t 4\n    smudge = expand --initial -t 4\n    required\n[merge]\n    renormalize = true"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.109375,
          "content": "/vendor/\n/owa-data/\nowa-config.php\nnode_modules/\nmodules/base/dist/\nmodules/base/js/owa.tracker-combined-min.js\n"
        },
        {
          "name": ".htaccess",
          "type": "blob",
          "size": 1.587890625,
          "content": "AddHandler application/x-httpd-php .tpl\n\n<IfModule mod_rewrite.c>\n\nRewriteEngine On\n\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule api/(.*)$ api/index.php?owa_rest_params=$1 [QSA,NC,L]\n\n\n# Rewrites for new tracker location (../base/js/owa.tracker-combined-min.js) to new location (../base/dist/owa.tracker.js)\n# need to properly sniff the protocol or else you could get a CSP error in the browser under https\n\nRewriteCond %{REQUEST_URI} (.*)/modules/base/js/owa.tracker-combined-min.js$\nRewriteCond %{HTTP:X-Forwarded-Proto} =https [OR]\nRewriteCond %{HTTPS} =on [OR]\nRewriteCond %{REQUEST_SCHEME} =https\nRewriteRule owa.tracker-combined-min.js$ https://%{HTTP_HOST}%1/modules/base/dist/owa.tracker.js [NC,R=301,L]\n\nRewriteCond %{REQUEST_URI} (.*)/modules/base/js/owa.(heatmap|vendors|player).js$\nRewriteCond %{HTTP:X-Forwarded-Proto} =https [OR]\nRewriteCond %{HTTPS} =on [OR]\nRewriteCond %{REQUEST_SCHEME} =https\nRewriteRule js$ https://%{HTTP_HOST}%1/modules/base/dist/owa.%2.js [NC,R=301,L]\n\nRewriteCond %{REQUEST_URI} (.*)/modules/base/js/owa.tracker-combined-min.js$\nRewriteCond %{HTTP:X-Forwarded-Proto} =http [OR]\nRewriteCond %{HTTPS} =off [OR]\nRewriteCond %{REQUEST_SCHEME} =http\nRewriteRule owa.tracker-combined-min.js$ http://%{HTTP_HOST}%1/modules/base/dist/owa.tracker.js [NC,R=301,L]\n\nRewriteCond %{REQUEST_URI} (.*)/modules/base/js/owa.(heatmap|vendors|player).js$\nRewriteCond %{HTTP:X-Forwarded-Proto} =http [OR]\nRewriteCond %{HTTPS} =off [OR]\nRewriteCond %{REQUEST_SCHEME} =http\nRewriteRule js$ https://%{HTTP_HOST}%1/modules/base/dist/owa.%2.js [NC,R=301,L]\n\n</IfModule>\n\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2529296875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at . All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.345703125,
          "content": "# How to contribute\n\nI'm really glad you're reading this, because we need volunteer developers to help this project come to fruition.\n\n## Testing\n\nMost of the \"code\" on this repository of the project is eithe PHP, JavaScript or CSS, Please Test your contributions before submitting them\n\n## Submitting changes\n\nPlease send a [GitHub Pull Request to Open-Web-Analytics](https://github.com/padams/Open-Web-Analytics/pull/new/master) with a \nclear list of what you've done (read more about [pull requests](http://help.github.com/pull-requests/)). \nWhen you send a pull request, we will love you forever if you include comments. \nPlease follow our coding conventions (below) and make sure all of your commits are atomic (one feature per commit).\n\nAlways write a clear log message for your commits. One-line messages are fine for small changes, but bigger changes should look like this:\n\n    $ git commit -m \"A brief summary of the commit\n    > \n    > A paragraph describing what changed and its impact.\"\n\n## Coding conventions\n\nStart reading our code and you'll get the hang of it. We optimize for readability:\n\n  * This is open source software. Consider the people who will read your code, and make it look nice for them. It's sort of like driving a car: Perhaps you love doing donuts when you're alone, but with passengers the goal is to make the ride as smooth as possible.\n  \n\n\n"
        },
        {
          "name": "LICENCE",
          "type": "blob",
          "size": 17.6474609375,
          "content": "GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.513671875,
          "content": "# Open Web Analytics Server\n\nOpen Web Analytics is an open source alternative to commercial web analytics tools such as Google Analytics. This software allows you to stay in control of the data you collect about the user of your websites or applications.\n\nThis repository installs the OWA Server and Javascript tracking client which can easily be added to web pages. \n\n- To add OWA tracking to a WordPress based website install the [OWA integration plugin](https://wordpress.org/plugins/open-web-analytics/) or see [this repository](https://github.com/Open-Web-Analytics/owa-wordpress-plugin).\n- To add OWA tracking to any PHP application use the [OWA PHP SDK](https://github.com/Open-Web-Analytics/owa-php-sdk)\n\n## Features\n\n- Track visitors, pageviews, e-commerce transactions, and configurable actions\n- Track unlimited number of websites using a single instance of OWA Server\n- First party Javascript tracker client\n- Reporting Dashboard/Portral\n- View and customize all reports\n- Generate Heatmaps\n- Generate \"Domstream\" session recordings\n- Geolocation of visitors\n- REST API for administration and data access\n- Multi user reporting interface\n- Extensible framework via custom modules\n\n## Requirements and Installation\n\nSee the [technical requirements](https://github.com/Open-Web-Analytics/Open-Web-Analytics/wiki/Technical-Requirements) before you install OWA Server. A step by step [installation](https://github.com/Open-Web-Analytics/Open-Web-Analytics/wiki/Installation) guide will walk you through how to install OWA.\n\n## Documentation\nSee the wiki for documentation about the OWA Server and the Javascript Tracker client.\n\n## Issues & Support\n\nPlease read the [troubleshooting](https://github.com/Open-Web-Analytics/Open-Web-Analytics/wiki/Troubleshooting) guide before filing any issue or bug reports. Issue tickets without the necessary debug info will be closed automatically.\n\n## Development \n\nTo contribute to the Open Web Analytics for WordPress plugin you need to:\n\n1. Clone the repository\n2. Download and install [Composer](https://getcomposer.org/) for managing PHP dependencies.\n3. Run `composer install`\n\n\n## Donate to this project\n\nOpen Web Analytics is free.  However, we ask that you donate to the project if you need support. Your donation helps fund the development of this project.\n\n[Donate to the project here](http://paypal.me/openwebanalytics).\n\n\n## Copyright and License\n\nThis project is licensed under the [GNU GPL](http://www.gnu.org/licenses/old-licenses/gpl-2.0.html), version 2 or later.\n\n&copy; [Peter Adams](http://peteradams.org).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.32421875,
          "content": "# Security Policy\n\n## Supported Versions\n\nCurrently we are only supporting security updates to the following versions of OWA Server:\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 1.7.x   | :white_check_mark: |\n\n## Reporting a Vulnerability\n\nPlease report all security issues to: security@openwebanalytics.com\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "blank.php",
          "type": "blob",
          "size": 0.029296875,
          "content": "<?php\n// silence is golden.\n?>"
        },
        {
          "name": "cli.php",
          "type": "blob",
          "size": 2.671875,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\n/**\n * OWA Comand Line Interface (CLI)\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2010 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.2.1\n */\n\n// Ensure we are being called as a CLI process before any other processing.\ndefine('OWA_CLI', (php_sapi_name() == 'cli' || (is_numeric($_SERVER['argc']) && $_SERVER['argc'] > 0)));\n\nif (!OWA_CLI)\n{\n    // Fail with 404 if called over HTTP so it looks like the script\n    // just doesn't exist.\n    if (isset($_SERVER['SERVER_PROTOCOL'])) {\n        header(\"$_SERVER[SERVER_PROTOCOL] 404 Not Found\");\n    }\n    exit();\n}\n\nrequire_once('owa_env.php');\nrequire_once(OWA_DIR.'owa_caller.php');\nrequire_once(OWA_BASE_CLASS_DIR.'cliController.php');\n\n$params = [];\n// get params from the command line args\n// $argv is a php super global variable\nfor ($i=1; $i<count($argv); $i++)\n{\n    $it = explode(\"=\",$argv[$i]);\n    if (count($it) !== 2) {\n        fwrite(STDERR, \"Invalid argument '{$argv[$i]}'. Syntax is key=value\\n\");\n        exit(1);\n    }\n    $params[$it[0]] = $it[1];\n}\nunset($params['action']);\nunset($params['do']);\nif (empty($params)) {\n    fwrite(STDERR, \"Arguments required\\n\");\n    exit(1);\n}\n\n// Initialize owa\n$owa = new owa_caller;\n$owa->setSetting('base', 'request_mode', 'cli');\nif ( $owa->isEndpointEnabled( basename( __FILE__ ) ) ) {\n\n    // setting CLI mode to true\n    //$owa->setSetting('base', 'cli_mode', true);\n    \n    // setting user auth\n    $owa->setCurrentUser('admin', 'cli-user');\n    // run controller or view and echo page content\n    $s = owa_coreAPI::serviceSingleton();\n    $s->loadCliCommands();\n\n    if (array_key_exists('cmd', $params)) {\n\n        $cmd = $s->getCliCommandClass($params['cmd']);\n\n        if ($cmd) {\n            $params['do'] = $cmd;\n            echo $owa->handleRequest($params);\n        } else {\n            owa_coreAPI::notice( \"Invalid command name.\");\n        }\n\n    } else {\n        owa_coreAPI::notice(\"Missing a command argument.\");\n    }\n\n} else {\n    // unload owa\n    $owa->restInPeace();\n}\n\n?>\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.9658203125,
          "content": "{\n    \"name\": \"open-web-analytics/open-web-analytics\",\n    \"description\": \"The open source analytics framework.\",\n    \"keywords\": [\"open-web-analytics\",\"owa\",\"web-analytics\",\"analytics\"],\n    \"homepage\": \"https://www.openwebanalytics.com\",\n    \"license\": \"GPL-2.0\",\n    \"authors\": [\n        {\n            \"name\": \"The OWA Team\",\n            \"email\": \"hello@openwebanalytics.com\"\n        }\n    ],\n    \n    \"config\": {\n        \"sort-packages\": true,\n        \"allow-plugins\": {\n            \"wikimedia/composer-merge-plugin\": true\n        }\n    },\n    \n    \n    \"require\": {\n       \n        \"wikimedia/composer-merge-plugin\": \"^2.0\"\n    },\n    \n    \"extra\": {\n        \"merge-plugin\": {\n            \"include\": [\n                \"modules/*/composer.json\"\n            ],\n            \"replace\": false,\n            \"ignore-duplicates\": true,\n            \"merge-dev\": true,\n            \"merge-extra\": false,\n            \"merge-extra-deep\": false,\n            \"merge-scripts\": true\n        }\n    }\n}\n"
        },
        {
          "name": "composer.lock",
          "type": "blob",
          "size": 38.125,
          "content": "{\n    \"_readme\": [\n        \"This file locks the dependencies of your project to a known state\",\n        \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies\",\n        \"This file is @generated automatically\"\n    ],\n    \"content-hash\": \"1bf323f85028c1518b2cef58007696db\",\n    \"packages\": [\n        {\n            \"name\": \"composer/ca-bundle\",\n            \"version\": \"1.3.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/composer/ca-bundle.git\",\n                \"reference\": \"69098eca243998b53eed7a48d82dedd28b447cd5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/composer/ca-bundle/zipball/69098eca243998b53eed7a48d82dedd28b447cd5\",\n                \"reference\": \"69098eca243998b53eed7a48d82dedd28b447cd5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-openssl\": \"*\",\n                \"ext-pcre\": \"*\",\n                \"php\": \"^5.3.2 || ^7.0 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"phpstan/phpstan\": \"^0.12.55\",\n                \"psr/log\": \"^1.0\",\n                \"symfony/phpunit-bridge\": \"^4.2 || ^5\",\n                \"symfony/process\": \"^2.5 || ^3.0 || ^4.0 || ^5.0 || ^6.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"1.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Composer\\\\CaBundle\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jordi Boggiano\",\n                    \"email\": \"j.boggiano@seld.be\",\n                    \"homepage\": \"http://seld.be\"\n                }\n            ],\n            \"description\": \"Lets you find a path to the system CA bundle, and includes a fallback to the Mozilla CA bundle.\",\n            \"keywords\": [\n                \"cabundle\",\n                \"cacert\",\n                \"certificate\",\n                \"ssl\",\n                \"tls\"\n            ],\n            \"support\": {\n                \"irc\": \"irc://irc.freenode.org/composer\",\n                \"issues\": \"https://github.com/composer/ca-bundle/issues\",\n                \"source\": \"https://github.com/composer/ca-bundle/tree/1.3.4\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://packagist.com\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/composer\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/composer/composer\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2022-10-12T12:08:29+00:00\"\n        },\n        {\n            \"name\": \"guzzlehttp/guzzle\",\n            \"version\": \"7.5.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/guzzle/guzzle.git\",\n                \"reference\": \"b50a2a1251152e43f6a37f0fa053e730a67d25ba\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/guzzle/guzzle/zipball/b50a2a1251152e43f6a37f0fa053e730a67d25ba\",\n                \"reference\": \"b50a2a1251152e43f6a37f0fa053e730a67d25ba\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-json\": \"*\",\n                \"guzzlehttp/promises\": \"^1.5\",\n                \"guzzlehttp/psr7\": \"^1.9 || ^2.4\",\n                \"php\": \"^7.2.5 || ^8.0\",\n                \"psr/http-client\": \"^1.0\",\n                \"symfony/deprecation-contracts\": \"^2.2 || ^3.0\"\n            },\n            \"provide\": {\n                \"psr/http-client-implementation\": \"1.0\"\n            },\n            \"require-dev\": {\n                \"bamarni/composer-bin-plugin\": \"^1.8.1\",\n                \"ext-curl\": \"*\",\n                \"php-http/client-integration-tests\": \"^3.0\",\n                \"phpunit/phpunit\": \"^8.5.29 || ^9.5.23\",\n                \"psr/log\": \"^1.1 || ^2.0 || ^3.0\"\n            },\n            \"suggest\": {\n                \"ext-curl\": \"Required for CURL handler support\",\n                \"ext-intl\": \"Required for Internationalized Domain Name (IDN) support\",\n                \"psr/log\": \"Required for using the Log middleware\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"bamarni-bin\": {\n                    \"bin-links\": true,\n                    \"forward-command\": false\n                },\n                \"branch-alias\": {\n                    \"dev-master\": \"7.5-dev\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"src/functions_include.php\"\n                ],\n                \"psr-4\": {\n                    \"GuzzleHttp\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Graham Campbell\",\n                    \"email\": \"hello@gjcampbell.co.uk\",\n                    \"homepage\": \"https://github.com/GrahamCampbell\"\n                },\n                {\n                    \"name\": \"Michael Dowling\",\n                    \"email\": \"mtdowling@gmail.com\",\n                    \"homepage\": \"https://github.com/mtdowling\"\n                },\n                {\n                    \"name\": \"Jeremy Lindblom\",\n                    \"email\": \"jeremeamia@gmail.com\",\n                    \"homepage\": \"https://github.com/jeremeamia\"\n                },\n                {\n                    \"name\": \"George Mponos\",\n                    \"email\": \"gmponos@gmail.com\",\n                    \"homepage\": \"https://github.com/gmponos\"\n                },\n                {\n                    \"name\": \"Tobias Nyholm\",\n                    \"email\": \"tobias.nyholm@gmail.com\",\n                    \"homepage\": \"https://github.com/Nyholm\"\n                },\n                {\n                    \"name\": \"Márk Sági-Kazár\",\n                    \"email\": \"mark.sagikazar@gmail.com\",\n                    \"homepage\": \"https://github.com/sagikazarmark\"\n                },\n                {\n                    \"name\": \"Tobias Schultze\",\n                    \"email\": \"webmaster@tubo-world.de\",\n                    \"homepage\": \"https://github.com/Tobion\"\n                }\n            ],\n            \"description\": \"Guzzle is a PHP HTTP client library\",\n            \"keywords\": [\n                \"client\",\n                \"curl\",\n                \"framework\",\n                \"http\",\n                \"http client\",\n                \"psr-18\",\n                \"psr-7\",\n                \"rest\",\n                \"web service\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/guzzle/guzzle/issues\",\n                \"source\": \"https://github.com/guzzle/guzzle/tree/7.5.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/GrahamCampbell\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://github.com/Nyholm\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/guzzlehttp/guzzle\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2022-08-28T15:39:27+00:00\"\n        },\n        {\n            \"name\": \"guzzlehttp/promises\",\n            \"version\": \"1.5.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/guzzle/promises.git\",\n                \"reference\": \"b94b2807d85443f9719887892882d0329d1e2598\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/guzzle/promises/zipball/b94b2807d85443f9719887892882d0329d1e2598\",\n                \"reference\": \"b94b2807d85443f9719887892882d0329d1e2598\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5\"\n            },\n            \"require-dev\": {\n                \"symfony/phpunit-bridge\": \"^4.4 || ^5.1\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.5-dev\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"src/functions_include.php\"\n                ],\n                \"psr-4\": {\n                    \"GuzzleHttp\\\\Promise\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Graham Campbell\",\n                    \"email\": \"hello@gjcampbell.co.uk\",\n                    \"homepage\": \"https://github.com/GrahamCampbell\"\n                },\n                {\n                    \"name\": \"Michael Dowling\",\n                    \"email\": \"mtdowling@gmail.com\",\n                    \"homepage\": \"https://github.com/mtdowling\"\n                },\n                {\n                    \"name\": \"Tobias Nyholm\",\n                    \"email\": \"tobias.nyholm@gmail.com\",\n                    \"homepage\": \"https://github.com/Nyholm\"\n                },\n                {\n                    \"name\": \"Tobias Schultze\",\n                    \"email\": \"webmaster@tubo-world.de\",\n                    \"homepage\": \"https://github.com/Tobion\"\n                }\n            ],\n            \"description\": \"Guzzle promises library\",\n            \"keywords\": [\n                \"promise\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/guzzle/promises/issues\",\n                \"source\": \"https://github.com/guzzle/promises/tree/1.5.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/GrahamCampbell\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://github.com/Nyholm\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/guzzlehttp/promises\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2022-08-28T14:55:35+00:00\"\n        },\n        {\n            \"name\": \"guzzlehttp/psr7\",\n            \"version\": \"2.4.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/guzzle/psr7.git\",\n                \"reference\": \"67c26b443f348a51926030c83481b85718457d3d\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/guzzle/psr7/zipball/67c26b443f348a51926030c83481b85718457d3d\",\n                \"reference\": \"67c26b443f348a51926030c83481b85718457d3d\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2.5 || ^8.0\",\n                \"psr/http-factory\": \"^1.0\",\n                \"psr/http-message\": \"^1.0\",\n                \"ralouphie/getallheaders\": \"^3.0\"\n            },\n            \"provide\": {\n                \"psr/http-factory-implementation\": \"1.0\",\n                \"psr/http-message-implementation\": \"1.0\"\n            },\n            \"require-dev\": {\n                \"bamarni/composer-bin-plugin\": \"^1.8.1\",\n                \"http-interop/http-factory-tests\": \"^0.9\",\n                \"phpunit/phpunit\": \"^8.5.29 || ^9.5.23\"\n            },\n            \"suggest\": {\n                \"laminas/laminas-httphandlerrunner\": \"Emit PSR-7 responses\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"bamarni-bin\": {\n                    \"bin-links\": true,\n                    \"forward-command\": false\n                },\n                \"branch-alias\": {\n                    \"dev-master\": \"2.4-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"GuzzleHttp\\\\Psr7\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Graham Campbell\",\n                    \"email\": \"hello@gjcampbell.co.uk\",\n                    \"homepage\": \"https://github.com/GrahamCampbell\"\n                },\n                {\n                    \"name\": \"Michael Dowling\",\n                    \"email\": \"mtdowling@gmail.com\",\n                    \"homepage\": \"https://github.com/mtdowling\"\n                },\n                {\n                    \"name\": \"George Mponos\",\n                    \"email\": \"gmponos@gmail.com\",\n                    \"homepage\": \"https://github.com/gmponos\"\n                },\n                {\n                    \"name\": \"Tobias Nyholm\",\n                    \"email\": \"tobias.nyholm@gmail.com\",\n                    \"homepage\": \"https://github.com/Nyholm\"\n                },\n                {\n                    \"name\": \"Márk Sági-Kazár\",\n                    \"email\": \"mark.sagikazar@gmail.com\",\n                    \"homepage\": \"https://github.com/sagikazarmark\"\n                },\n                {\n                    \"name\": \"Tobias Schultze\",\n                    \"email\": \"webmaster@tubo-world.de\",\n                    \"homepage\": \"https://github.com/Tobion\"\n                },\n                {\n                    \"name\": \"Márk Sági-Kazár\",\n                    \"email\": \"mark.sagikazar@gmail.com\",\n                    \"homepage\": \"https://sagikazarmark.hu\"\n                }\n            ],\n            \"description\": \"PSR-7 message implementation that also provides common utility methods\",\n            \"keywords\": [\n                \"http\",\n                \"message\",\n                \"psr-7\",\n                \"request\",\n                \"response\",\n                \"stream\",\n                \"uri\",\n                \"url\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/guzzle/psr7/issues\",\n                \"source\": \"https://github.com/guzzle/psr7/tree/2.4.3\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/GrahamCampbell\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://github.com/Nyholm\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/guzzlehttp/psr7\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2022-10-26T14:07:24+00:00\"\n        },\n        {\n            \"name\": \"monolog/monolog\",\n            \"version\": \"2.8.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/Seldaek/monolog.git\",\n                \"reference\": \"720488632c590286b88b80e62aa3d3d551ad4a50\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/Seldaek/monolog/zipball/720488632c590286b88b80e62aa3d3d551ad4a50\",\n                \"reference\": \"720488632c590286b88b80e62aa3d3d551ad4a50\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2\",\n                \"psr/log\": \"^1.0.1 || ^2.0 || ^3.0\"\n            },\n            \"provide\": {\n                \"psr/log-implementation\": \"1.0.0 || 2.0.0 || 3.0.0\"\n            },\n            \"require-dev\": {\n                \"aws/aws-sdk-php\": \"^2.4.9 || ^3.0\",\n                \"doctrine/couchdb\": \"~1.0@dev\",\n                \"elasticsearch/elasticsearch\": \"^7 || ^8\",\n                \"ext-json\": \"*\",\n                \"graylog2/gelf-php\": \"^1.4.2\",\n                \"guzzlehttp/guzzle\": \"^7.4\",\n                \"guzzlehttp/psr7\": \"^2.2\",\n                \"mongodb/mongodb\": \"^1.8\",\n                \"php-amqplib/php-amqplib\": \"~2.4 || ^3\",\n                \"phpspec/prophecy\": \"^1.15\",\n                \"phpstan/phpstan\": \"^0.12.91\",\n                \"phpunit/phpunit\": \"^8.5.14\",\n                \"predis/predis\": \"^1.1 || ^2.0\",\n                \"rollbar/rollbar\": \"^1.3 || ^2 || ^3\",\n                \"ruflin/elastica\": \"^7\",\n                \"swiftmailer/swiftmailer\": \"^5.3|^6.0\",\n                \"symfony/mailer\": \"^5.4 || ^6\",\n                \"symfony/mime\": \"^5.4 || ^6\"\n            },\n            \"suggest\": {\n                \"aws/aws-sdk-php\": \"Allow sending log messages to AWS services like DynamoDB\",\n                \"doctrine/couchdb\": \"Allow sending log messages to a CouchDB server\",\n                \"elasticsearch/elasticsearch\": \"Allow sending log messages to an Elasticsearch server via official client\",\n                \"ext-amqp\": \"Allow sending log messages to an AMQP server (1.0+ required)\",\n                \"ext-curl\": \"Required to send log messages using the IFTTTHandler, the LogglyHandler, the SendGridHandler, the SlackWebhookHandler or the TelegramBotHandler\",\n                \"ext-mbstring\": \"Allow to work properly with unicode symbols\",\n                \"ext-mongodb\": \"Allow sending log messages to a MongoDB server (via driver)\",\n                \"ext-openssl\": \"Required to send log messages using SSL\",\n                \"ext-sockets\": \"Allow sending log messages to a Syslog server (via UDP driver)\",\n                \"graylog2/gelf-php\": \"Allow sending log messages to a GrayLog2 server\",\n                \"mongodb/mongodb\": \"Allow sending log messages to a MongoDB server (via library)\",\n                \"php-amqplib/php-amqplib\": \"Allow sending log messages to an AMQP server using php-amqplib\",\n                \"rollbar/rollbar\": \"Allow sending log messages to Rollbar\",\n                \"ruflin/elastica\": \"Allow sending log messages to an Elastic Search server\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"2.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Monolog\\\\\": \"src/Monolog\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jordi Boggiano\",\n                    \"email\": \"j.boggiano@seld.be\",\n                    \"homepage\": \"https://seld.be\"\n                }\n            ],\n            \"description\": \"Sends your logs to files, sockets, inboxes, databases and various web services\",\n            \"homepage\": \"https://github.com/Seldaek/monolog\",\n            \"keywords\": [\n                \"log\",\n                \"logging\",\n                \"psr-3\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/Seldaek/monolog/issues\",\n                \"source\": \"https://github.com/Seldaek/monolog/tree/2.8.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/Seldaek\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/monolog/monolog\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2022-07-24T11:55:47+00:00\"\n        },\n        {\n            \"name\": \"phpmailer/phpmailer\",\n            \"version\": \"v6.7.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/PHPMailer/PHPMailer.git\",\n                \"reference\": \"49cd7ea3d2563f028d7811f06864a53b1f15ff55\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/PHPMailer/PHPMailer/zipball/49cd7ea3d2563f028d7811f06864a53b1f15ff55\",\n                \"reference\": \"49cd7ea3d2563f028d7811f06864a53b1f15ff55\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-ctype\": \"*\",\n                \"ext-filter\": \"*\",\n                \"ext-hash\": \"*\",\n                \"php\": \">=5.5.0\"\n            },\n            \"require-dev\": {\n                \"dealerdirect/phpcodesniffer-composer-installer\": \"^0.7.2\",\n                \"doctrine/annotations\": \"^1.2.6 || ^1.13.3\",\n                \"php-parallel-lint/php-console-highlighter\": \"^1.0.0\",\n                \"php-parallel-lint/php-parallel-lint\": \"^1.3.2\",\n                \"phpcompatibility/php-compatibility\": \"^9.3.5\",\n                \"roave/security-advisories\": \"dev-latest\",\n                \"squizlabs/php_codesniffer\": \"^3.7.1\",\n                \"yoast/phpunit-polyfills\": \"^1.0.4\"\n            },\n            \"suggest\": {\n                \"ext-mbstring\": \"Needed to send email in multibyte encoding charset or decode encoded addresses\",\n                \"ext-openssl\": \"Needed for secure SMTP sending and DKIM signing\",\n                \"greew/oauth2-azure-provider\": \"Needed for Microsoft Azure XOAUTH2 authentication\",\n                \"hayageek/oauth2-yahoo\": \"Needed for Yahoo XOAUTH2 authentication\",\n                \"league/oauth2-google\": \"Needed for Google XOAUTH2 authentication\",\n                \"psr/log\": \"For optional PSR-3 debug logging\",\n                \"symfony/polyfill-mbstring\": \"To support UTF-8 if the Mbstring PHP extension is not enabled (^1.2)\",\n                \"thenetworg/oauth2-azure\": \"Needed for Microsoft XOAUTH2 authentication\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"PHPMailer\\\\PHPMailer\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"LGPL-2.1-only\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Marcus Bointon\",\n                    \"email\": \"phpmailer@synchromedia.co.uk\"\n                },\n                {\n                    \"name\": \"Jim Jagielski\",\n                    \"email\": \"jimjag@gmail.com\"\n                },\n                {\n                    \"name\": \"Andy Prevost\",\n                    \"email\": \"codeworxtech@users.sourceforge.net\"\n                },\n                {\n                    \"name\": \"Brent R. Matzelle\"\n                }\n            ],\n            \"description\": \"PHPMailer is a full-featured email creation and transfer class for PHP\",\n            \"support\": {\n                \"issues\": \"https://github.com/PHPMailer/PHPMailer/issues\",\n                \"source\": \"https://github.com/PHPMailer/PHPMailer/tree/v6.7.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/Synchro\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2022-12-08T13:30:06+00:00\"\n        },\n        {\n            \"name\": \"psr/http-client\",\n            \"version\": \"1.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/http-client.git\",\n                \"reference\": \"2dfb5f6c5eff0e91e20e913f8c5452ed95b86621\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/http-client/zipball/2dfb5f6c5eff0e91e20e913f8c5452ed95b86621\",\n                \"reference\": \"2dfb5f6c5eff0e91e20e913f8c5452ed95b86621\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.0 || ^8.0\",\n                \"psr/http-message\": \"^1.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Psr\\\\Http\\\\Client\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"http://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"Common interface for HTTP clients\",\n            \"homepage\": \"https://github.com/php-fig/http-client\",\n            \"keywords\": [\n                \"http\",\n                \"http-client\",\n                \"psr\",\n                \"psr-18\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/php-fig/http-client/tree/master\"\n            },\n            \"time\": \"2020-06-29T06:28:15+00:00\"\n        },\n        {\n            \"name\": \"psr/http-factory\",\n            \"version\": \"1.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/http-factory.git\",\n                \"reference\": \"12ac7fcd07e5b077433f5f2bee95b3a771bf61be\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/http-factory/zipball/12ac7fcd07e5b077433f5f2bee95b3a771bf61be\",\n                \"reference\": \"12ac7fcd07e5b077433f5f2bee95b3a771bf61be\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.0.0\",\n                \"psr/http-message\": \"^1.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Psr\\\\Http\\\\Message\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"http://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"Common interfaces for PSR-7 HTTP message factories\",\n            \"keywords\": [\n                \"factory\",\n                \"http\",\n                \"message\",\n                \"psr\",\n                \"psr-17\",\n                \"psr-7\",\n                \"request\",\n                \"response\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/php-fig/http-factory/tree/master\"\n            },\n            \"time\": \"2019-04-30T12:38:16+00:00\"\n        },\n        {\n            \"name\": \"psr/http-message\",\n            \"version\": \"1.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/http-message.git\",\n                \"reference\": \"f6561bf28d520154e4b0ec72be95418abe6d9363\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/http-message/zipball/f6561bf28d520154e4b0ec72be95418abe6d9363\",\n                \"reference\": \"f6561bf28d520154e4b0ec72be95418abe6d9363\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Psr\\\\Http\\\\Message\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"http://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"Common interface for HTTP messages\",\n            \"homepage\": \"https://github.com/php-fig/http-message\",\n            \"keywords\": [\n                \"http\",\n                \"http-message\",\n                \"psr\",\n                \"psr-7\",\n                \"request\",\n                \"response\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/php-fig/http-message/tree/master\"\n            },\n            \"time\": \"2016-08-06T14:39:51+00:00\"\n        },\n        {\n            \"name\": \"psr/log\",\n            \"version\": \"1.1.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/log.git\",\n                \"reference\": \"d49695b909c3b7628b6289db5479a1c204601f11\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/log/zipball/d49695b909c3b7628b6289db5479a1c204601f11\",\n                \"reference\": \"d49695b909c3b7628b6289db5479a1c204601f11\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.1.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Psr\\\\Log\\\\\": \"Psr/Log/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"https://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"Common interface for logging libraries\",\n            \"homepage\": \"https://github.com/php-fig/log\",\n            \"keywords\": [\n                \"log\",\n                \"psr\",\n                \"psr-3\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/php-fig/log/tree/1.1.4\"\n            },\n            \"time\": \"2021-05-03T11:20:27+00:00\"\n        },\n        {\n            \"name\": \"ralouphie/getallheaders\",\n            \"version\": \"3.0.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/ralouphie/getallheaders.git\",\n                \"reference\": \"120b605dfeb996808c31b6477290a714d356e822\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/ralouphie/getallheaders/zipball/120b605dfeb996808c31b6477290a714d356e822\",\n                \"reference\": \"120b605dfeb996808c31b6477290a714d356e822\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.6\"\n            },\n            \"require-dev\": {\n                \"php-coveralls/php-coveralls\": \"^2.1\",\n                \"phpunit/phpunit\": \"^5 || ^6.5\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"src/getallheaders.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Ralph Khattar\",\n                    \"email\": \"ralph.khattar@gmail.com\"\n                }\n            ],\n            \"description\": \"A polyfill for getallheaders.\",\n            \"support\": {\n                \"issues\": \"https://github.com/ralouphie/getallheaders/issues\",\n                \"source\": \"https://github.com/ralouphie/getallheaders/tree/develop\"\n            },\n            \"time\": \"2019-03-08T08:55:37+00:00\"\n        },\n        {\n            \"name\": \"symfony/deprecation-contracts\",\n            \"version\": \"v2.5.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/deprecation-contracts.git\",\n                \"reference\": \"e8b495ea28c1d97b5e0c121748d6f9b53d075c66\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/deprecation-contracts/zipball/e8b495ea28c1d97b5e0c121748d6f9b53d075c66\",\n                \"reference\": \"e8b495ea28c1d97b5e0c121748d6f9b53d075c66\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.1\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"2.5-dev\"\n                },\n                \"thanks\": {\n                    \"name\": \"symfony/contracts\",\n                    \"url\": \"https://github.com/symfony/contracts\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"function.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"A generic function and convention to trigger deprecation notices\",\n            \"homepage\": \"https://symfony.com\",\n            \"support\": {\n                \"source\": \"https://github.com/symfony/deprecation-contracts/tree/v2.5.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2022-01-02T09:53:40+00:00\"\n        },\n        {\n            \"name\": \"ua-parser/uap-php\",\n            \"version\": \"v3.9.14\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/ua-parser/uap-php.git\",\n                \"reference\": \"b796c5ea5df588e65aeb4e2c6cce3811dec4fed6\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/ua-parser/uap-php/zipball/b796c5ea5df588e65aeb4e2c6cce3811dec4fed6\",\n                \"reference\": \"b796c5ea5df588e65aeb4e2c6cce3811dec4fed6\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"composer/ca-bundle\": \"^1.1\",\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"phpstan/phpstan\": \"^0.12.33\",\n                \"phpunit/phpunit\": \"^8 || ^9\",\n                \"symfony/console\": \"^3.4 || ^4.2 || ^4.3 || ^5.0\",\n                \"symfony/filesystem\": \"^3.4 || ^4.2 ||  ^4.3 || ^5.0\",\n                \"symfony/finder\": \"^3.4 || ^4.2 || ^4.3 || ^5.0\",\n                \"symfony/yaml\": \"^3.4 || ^4.2 || ^4.3 || ^5.0\",\n                \"vimeo/psalm\": \"^3.12\"\n            },\n            \"suggest\": {\n                \"symfony/console\": \"Required for CLI usage - ^3.4 || ^4.3 || ^5.0\",\n                \"symfony/filesystem\": \"Required for CLI usage - ^3.4 || ^4.3 || ^5.0\",\n                \"symfony/finder\": \"Required for CLI usage - ^3.4 || ^4.3 || ^5.0\",\n                \"symfony/yaml\": \"Required for CLI usage - ^3.4 || ^4.3 || ^5.0\"\n            },\n            \"bin\": [\n                \"bin/uaparser\"\n            ],\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"UAParser\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Dave Olsen\",\n                    \"email\": \"dmolsen@gmail.com\"\n                },\n                {\n                    \"name\": \"Lars Strojny\",\n                    \"email\": \"lars@strojny.net\"\n                }\n            ],\n            \"description\": \"A multi-language port of Browserscope's user agent parser.\",\n            \"support\": {\n                \"issues\": \"https://github.com/ua-parser/uap-php/issues\",\n                \"source\": \"https://github.com/ua-parser/uap-php/tree/v3.9.14\"\n            },\n            \"time\": \"2020-10-02T23:36:20+00:00\"\n        },\n        {\n            \"name\": \"wikimedia/composer-merge-plugin\",\n            \"version\": \"v2.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/wikimedia/composer-merge-plugin.git\",\n                \"reference\": \"8ca2ed8ab97c8ebce6b39d9943e9909bb4f18912\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/wikimedia/composer-merge-plugin/zipball/8ca2ed8ab97c8ebce6b39d9943e9909bb4f18912\",\n                \"reference\": \"8ca2ed8ab97c8ebce6b39d9943e9909bb4f18912\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"composer-plugin-api\": \"^1.1||^2.0\",\n                \"php\": \">=7.2.0\"\n            },\n            \"require-dev\": {\n                \"composer/composer\": \"^1.1||^2.0\",\n                \"php-parallel-lint/php-parallel-lint\": \"~1.1.0\",\n                \"phpunit/phpunit\": \"^8.5||^9.0\",\n                \"squizlabs/php_codesniffer\": \"~3.5.4\"\n            },\n            \"type\": \"composer-plugin\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.x-dev\"\n                },\n                \"class\": \"Wikimedia\\\\Composer\\\\Merge\\\\V2\\\\MergePlugin\"\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Wikimedia\\\\Composer\\\\Merge\\\\V2\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Bryan Davis\",\n                    \"email\": \"bd808@wikimedia.org\"\n                }\n            ],\n            \"description\": \"Composer plugin to merge multiple composer.json files\",\n            \"support\": {\n                \"issues\": \"https://github.com/wikimedia/composer-merge-plugin/issues\",\n                \"source\": \"https://github.com/wikimedia/composer-merge-plugin/tree/v2.0.1\"\n            },\n            \"time\": \"2021-02-24T05:28:06+00:00\"\n        }\n    ],\n    \"packages-dev\": [],\n    \"aliases\": [],\n    \"minimum-stability\": \"stable\",\n    \"stability-flags\": [],\n    \"prefer-stable\": false,\n    \"prefer-lowest\": false,\n    \"platform\": [],\n    \"platform-dev\": [],\n    \"plugin-api-version\": \"2.3.0\"\n}\n"
        },
        {
          "name": "conf",
          "type": "tree",
          "content": null
        },
        {
          "name": "includes",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.php",
          "type": "blob",
          "size": 1.306640625,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\nrequire_once('owa_env.php');\nrequire_once(OWA_DIR.'owa.php');\n\n/**\n * Main Admin Page Wrapper Script\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n\n// Initialize owa admin\n$owa = new owa;\n\nif (!$owa->isOwaInstalled()) {\n    // redirect to install\n    owa_lib::redirectBrowser(owa_coreAPI::getSetting('base','public_url').'install.php');\n}\n\nif ( $owa->isEndpointEnabled( basename( __FILE__ ) ) ) {\n\n    // run controller or view and echo page content\n    echo $owa->handleRequestFromURL();\n} else {\n\n    // unload owa\n    $owa->restInPeace();\n}\n\n?>"
        },
        {
          "name": "install.php",
          "type": "blob",
          "size": 1.564453125,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\ninclude_once('owa_env.php');\nrequire_once(OWA_BASE_DIR.'/owa.php');\n\n/**\n * Install Page Wrapper Script\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n\n// Initialize owa\n//define('OWA_ERROR_HANDLER', 'development');\ndefine('OWA_CACHE_OBJECTS', false);\ndefine('OWA_INSTALLING', true);\n$owa = new owa();\nif ( $owa->isEndpointEnabled( basename( __FILE__ ) ) ) {\n\n    // need third param here so that seting is not persisted.\n    $owa->setSetting('base','main_url', 'install.php');\n    // run controller, echo page content\n    $do = owa_coreAPI::getRequestParam('do');\n    $params = array();\n    if (empty($do)) {\n\n        $params['do'] = 'base.installStart';\n    }\n\n    // run controller or view and echo page content\n    echo $owa->handleRequest($params);\n\n} else {\n    // unload owa\n    $owa->restInPeace();\n}\n\n?>"
        },
        {
          "name": "log.php",
          "type": "blob",
          "size": 3.0361328125,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\ninclude_once('owa_env.php');\nrequire_once(OWA_BASE_DIR.'/owa_lib.php');\n\n\n/**\n * Special HTTP Requests Controler\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n\n // keep php executing even if the client closes the connection\nignore_user_abort(true);\n\n// turn off gzip compression\nif ( function_exists( 'apache_setenv' ) ) {\n    apache_setenv( 'no-gzip', 1 );\n}\n\nini_set('zlib.output_compression', 0);\n\n// turn on output buffering if necessary\nif (ob_get_level() == 0) {\n       ob_start();\n}\n\n// removing any content encoding like gzip etc.\nheader('Content-encoding: none', true);\n\n//check to se if request is a POST\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n\n    // redirect to blank.php\n    owa_lib::redirectBrowser( str_replace('log.php', 'blank.php', owa_lib::get_current_url() ) );\n    // necessary or else buffer is not actually flushed\n    echo ' ';\n} else {\n    // return 1x1 pixel gif\n    header(\"Content-type: image/gif\");\n    // needed to avoid cache time on browser side\n    header(\"Content-Length: 42\");\n    header(\"Cache-Control: private, no-cache, no-cache=Set-Cookie, proxy-revalidate\");\n    header(\"Expires: Wed, 11 Jan 2000 12:59:00 GMT\");\n    header(\"Last-Modified: Wed, 11 Jan 2006 12:59:00 GMT\");\n    header(\"Pragma: no-cache\");\n\n    echo sprintf(\n        '%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c',\n        71,73,70,56,57,97,1,0,1,0,128,255,0,192,192,192,0,0,0,33,249,4,1,0,0,0,0,44,0,0,0,0,1,0,1,0,0,2,2,68,1,0,59\n    );\n}\n\n// flush all output buffers. No reason to make the user wait for OWA.\nob_flush();\nflush();\nob_end_flush();\n\n// Create instance of OWA\nrequire_once(OWA_BASE_DIR.'/owa.php');\n$config = array(\n\n    'tracking_mode' => true\n);\n\n$owa = new owa( $config );\n\n// check to see if this endpoint is enabled.\nif ( $owa->isEndpointEnabled( basename( __FILE__ ) ) ) {\n\n    $owa->e->debug('Logging new tracking event...');\n    \n    $service = owa_coreAPI::serviceSingleton();\n    $service->request->decodeRequestParams();\n    $event = owa_coreAPI::supportClassFactory('base', 'event');\n    $event->setEventType(owa_coreAPI::getRequestParam('event_type'));\n    $event->setProperties($service->request->getAllOwaParams());\n\n    owa_coreAPI::logEvent($event->getEventType(), $event);\n\n} else {\n    // unload owa\n    $owa->restInPeace();\n}\n\n?>\n"
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "mw_plugin.php",
          "type": "blob",
          "size": 17.1474609375,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\n// ensures that mediawiki is the only entry point.\nif ( ! defined( 'MEDIAWIKI' ) ) {\n    exit;\n}\n\nrequire_once( dirname( __FILE__ )  . '/' . 'owa_env.php' );\nrequire_once( OWA_BASE_CLASSES_DIR . 'owa_mw.php' );\n\n/**\n * OWA MW EXTENSION SPECIFIC CONFIGURATION VARIABLES\n * To alter these, set them in your localsettings.php file AFTER you\n * include/require the extension.\n */\n \n// $wgOwaSiteId is used to overide the default site_id that OWA\n// will append to all tracking requests.This is handy if you want\n// to aggregate stats for more than one wiki under the same site_id\n$wgOwaSiteId = false;\n\n// $wgOwaEnableSpecialPage enables/disables OWA's special page.\n// Use this to deactivate and hide the special page\n$wgOwaEnableSpecialPage = true;\n\n// $wgOwaThirdPartyCookies enables third party cookie mode for\n// OWA's javascript tracker. This is rarely a good idea and will\n// have data quality ramifications.\n$wgOwaThirdPartyCookies = false;\n\n// $wgOwaCookieDomain contain the domain that OWA's javascript tracker\n// will use to write it's cookies.\n$wgOwaCookieDomain = false;\n\n/**\n * Register Extension and Hooks\n */\n$wgExtensionCredits['specialpage'][] = array(\n        'name'             => 'Open Web Analytics for MediaWiki',\n          'author'         => 'Peter Adams',\n          'url'             => 'http://www.openwebanalytics.com',\n          'description'     => 'Open Web Analytics for MedaWiki'\n);\n\n// used to sniff out admin requests\n$wgHooks['UnknownAction'][] = 'owa_actions';\n// used to set proper params for logging Article Page Views\n$wgHooks['ArticlePageDataAfter'][] = 'owa_logArticle';\n// used to set proper params for logging Special Page Views\n$wgHooks['SpecialPageExecuteAfterPage'][] = 'owa_logSpecialPage';\n// used to set proper params for logging Category Page Views\n$wgHooks['CategoryPageView'][] = 'owa_logCategoryPage';\n// used to add OWA's javascript tracking tag to all pages\n$wgHooks['BeforePageDisplay'][] = 'owa_footer';\n// used to fire Action events when articles are created\n$wgHooks['ArticleInsertComplete'][] = 'owa_newArticleAction';\n// used to fire Action events when articles are edited\n$wgHooks['ArticleSaveComplete'][] = 'owa_editArticleAction';\n// used to fire Action events when new articles are deleted\n$wgHooks['ArticleDeleteComplete'][] = 'owa_deleteArticleAction';\n// used to fire Action events when new user accounts are created\n$wgHooks['AddNewAccount'][] = 'owa_addUserAction';\n// used to fire Action events when new uploads occur\n$wgHooks['UploadComplete'][] = 'owa_addUploadAction';\n// used to fire Action events when users login\n$wgHooks['UserLoginComplete'][] = 'owa_userLoginAction';\n// used to fire Action events when talk pages are edited\n$wgHooks['ArticleEditUpdateNewTalk'][] ='owa_editTalkPageAction';\n// used to register OWA's special page\n$wgHooks['SpecialPage_initList'][] = 'owa_registerSpecialPage';\n\n// add 'owa_view' right to admin groups in order to view special page\n$wgGroupPermissions['user']['owa_view'] = true;\n\n/**\n * Hook Function for Registering OWA's Special Page\n */\nfunction owa_registerSpecialPage( &$aSpecialPages ) {\n\n    global $wgOwaEnableSpecialPage;\n\n    // Enable Special Page\n    if ( $wgOwaEnableSpecialPage === true ) {\n        //Load Special Page\n        $wgAutoloadClasses['SpecialOwa'] = __FILE__;\n        // Adds OWA's admin interface to special page list\n        $aSpecialPages['Owa'] = 'SpecialOwa';\n    }\n    // must return true for hook to continue processing.\n    return true;\n}\n\n/**\n * Hook for OWA special actions\n *\n * This uses mediawiki's 'unknown action' hook to trigger OWA's special action handler.\n * This is setup by adding 'action=owa' to the URLs for special actions. There is\n * probably a better way to do this so that the OWA namespace is preserved.\n *\n * @TODO figure out how to register this method to be triggered only when 'action=owa' instead of\n *         for all unknown mediawiki actions.\n * @param object $specialPage\n * @url http://www.mediawiki.org/wiki/Manual:MediaWiki_hooks/UnknownAction\n * @return false\n */\nfunction owa_actions($action) {\n\n    global $wgOut, $wgUser, $wgRequest;\n\n    $action = $wgRequest->getText( 'action' );\n    if ( $action === 'owa' ) {\n        $wgOut->disable();\n        $owa = owa_singleton();\n        $owa->handleSpecialActionRequest();\n        return false;\n    } else {\n        return true;\n    }\n}\n\n/**\n * OWA Singelton\n *\n * Needed to avoid OWA loading for every mediawiki request\n */\nfunction owa_singleton() {\n\n    static $owa;\n\n    if ( empty( $owa ) ) {\n\n        global     $wgUser,\n                $wgServer,\n                $wgScriptPath,\n                $wgScript,\n                $wgMainCacheType,\n                $wgMemCachedServers,\n                $wgOwaSiteId,\n                $wgOwaMemCachedServers;\n\n        /* OWA CONFIGURATION OVERRIDES */\n        $owa_config = array();\n        // check for memcache. these need to be passed into OWA to avoid race condition.\n        if ( $wgMainCacheType === CACHE_MEMCACHED ) {\n            $owa_config['cacheType'] = 'memcached';\n            $owa_config['memcachedServers'] = $wgMemCachedServers;\n        }\n        $owa = new owa_mw( $owa_config );\n        $owa->setSetting( 'base', 'report_wrapper', 'wrapper_mediawiki.tpl' );\n        $owa->setSetting( 'base', 'main_url', $wgScriptPath.'/index.php?title=Special:Owa' );\n        $owa->setSetting( 'base', 'main_absolute_url', $wgServer.$owa->getSetting( 'base', 'main_url' ) );\n        $owa->setSetting( 'base', 'action_url', $wgServer.$wgScriptPath.'/index.php?action=owa&owa_specialAction' );\n        $owa->setSetting( 'base', 'api_url', $wgServer.$wgScriptPath.'/index.php?action=owa&owa_apiAction' );\n        $owa->setSetting( 'base', 'link_template', '%s&%s' );\n        $owa->setSetting( 'base', 'is_embedded', true );\n        $owa->setSetting( 'base', 'query_string_filters', 'returnto' );\n\n        if ( ! $wgOwaSiteId ) {\n            $wgOwaSiteId = md5($wgServer.$wgScriptPath);\n        }\n\n        $owa->setSiteId( $wgOwaSiteId );\n\n        // filter authentication\n        $dispatch = owa_coreAPI::getEventDispatch();\n        // alternative auth method, sets auth status, role, and allowed sites list.\n        $dispatch->attachFilter('auth_status', 'owa_mwAuthUser',0);\n        //print_r( $current_user );\n\n    }\n\n    return $owa;\n}\n\n/**\n * Populates OWA's current user object with info about the current mediawiki user.\n * This info is needed by OWA authentication system as well as to add dimensions\n * requests that are logged.\n */\nfunction owa_mwAuthUser($auth_status) {\n\n    global     $wgUser, $wgOwaSiteId;\n\n    if ( $wgUser->isLoggedIn() ) {\n\n        $cu = owa_coreAPI::getCurrentUser();\n        $cu->setAuthStatus(true);\n\n        $cu->setUserData( 'user_id', $wgUser->getName() );\n        $cu->setUserData( 'email_address', $wgUser->getEmail() );\n        $cu->setUserData( 'real_name', $wgUser->getRealName() );\n        $cu->setRole( owa_translate_role( $wgUser->getGroups() ) );\n\n        // set list of allowed sites. In this case it's only this wiki.\n\n        $domains = array($wgOwaSiteId);\n        // load assigned sites list by domain\n        $cu->loadAssignedSitesByDomain($domains);\n        $cu->setInitialized();\n\n        return true;\n\n    } else {\n        // not logged in\n        return false;\n    }\n\n}\n\n/**\n * Transalates MW Roles into OWA Roles\n *\n * @todo make this configurable with a global property\n */\nfunction owa_translate_role($level = array()) {\n\n    if ( ! empty( $level ) ) {\n\n        if ( in_array( \"*\", $level ) ) {\n            $owa_role = 'everyone';\n        } elseif ( in_array( \"user\", $level ) ) {\n            $owa_role = 'viewer';\n        } elseif ( in_array( \"autoconfirmed\", $level ) ) {\n            $owa_role = 'viewer';\n        } elseif ( in_array( \"emailconfirmed\", $level ) ) {\n            $owa_role = 'viewer';\n        } elseif ( in_array( \"bot\", $level ) ) {\n            $owa_role = 'viewer';\n        } elseif ( in_array( \"sysop\", $level ) ) {\n            $owa_role = 'admin';\n        } elseif ( in_array( \"bureaucrat\", $level ) ) {\n            $owa_role = 'admin';\n        } elseif ( in_array( \"developer\", $level ) ) {\n            $owa_role = 'admin';\n        }\n\n    } else {\n        $owa_role = '';\n    }\n\n    return $owa_role;\n}\n\n/**\n * Helper function for tracking page views of various types\n */\nfunction owa_trackPageView( $params = array() ) {\n\n    global $wgUser, $wgOut, $wgOwaSiteId;\n\n    $owa = owa_singleton();\n\n    if ( $owa->getSetting( 'base', 'install_complete' ) ) {\n\n        //$event = $owa->makeEvent();\n        //$event->setEventType( 'base.page_request' );\n        $owa->setSiteId( $wgOwaSiteId );\n        $owa->setProperty( 'user_name', $wgUser->mName );\n        $owa->setProperty( 'user_email', $wgUser->mEmail );\n        $owa->setProperty( 'language', owa_getLanguage() );\n        if ( ! $owa->pageview_event->get( 'page_type') ) {\n            $owa->setPageType( '(not set)' );\n        }\n\n        //foreach ( $params as $k => $v ) {\n        //    $event->set( $k, $v );\n        //}\n\n        // if the page title is not set for some reasons, set it\n        // using $wgOut.\n        if ( ! $owa->pageview_event->get( 'page_title') ) {\n            $owa->setPageTitle( 'page_title', $wgOut->getPageTitle() );\n        }\n\n        /*\n        $tag = sprintf(\n                        '<!-- OWA Page View Tracking Params -->\n                        var owa_params = %s;',\n                         json_encode( $event->getProperties() )\n                );\n\n                $wgOut->addInlineScript( $tag );\n        */\n    }\n\n    return true;\n}\n\n/**\n * Logs Special Page Views\n *\n * @param object $specialPage\n * @return boolean\n */\nfunction owa_logSpecialPage(&$specialPage) {\n\n    $title_obj = $specialPage->getTitle();\n    $title = $title_obj->getText();\n    $owa = owa_singleton();\n    $owa->setPageTitle( $title );\n    $owa->setPageType( 'Special Page' );\n    return true;\n}\n\n/**\n * Logs Category Page Views\n *\n * @param object $categoryPage\n * @return boolean\n */\nfunction owa_logCategoryPage( &$categoryPage ) {\n\n    $title_obj = $categoryPage->getTitle();\n    $title = $title_obj->getText();\n    $owa = owa_singleton();\n    $owa->setPageTitle( $title );\n    $owa->setPageType( 'Category' );\n    return true;\n}\n\n/**\n * Logs Article Page Views\n *\n * @param object $article\n * @return boolean\n */\nfunction owa_logArticle( &$article ) {\n\n    $title_obj = $article->getTitle();\n    $title = $title_obj->getText();\n    $owa = owa_singleton();\n    $owa->setPageTitle( $title );\n    $owa->setPageType( 'Article' );\n    return true;\n}\n\n/**\n * Helper Function for tracking Action Events\n * \n * This function is a wrapper for the Action Event API in owa_client.\n *\n * @param    $action_name    string    The name of the action being tracked\n * @param    $label            string    The label associated with the action being tracked\n * @return boolean    true\n */\nfunction owa_trackAction( $action_name, $label ) {\n\n    $owa = owa_singleton();\n   \n    if ( $owa->getSetting( 'base', 'install_complete' ) ) {\n        $owa->trackAction( 'mediawiki', $action_name, $label );\n        owa_coreAPI::debug( \"logging action event \" . $action_name );\n    }\n\n    return true;\n}\n\n/**\n * Logs New Articles\n *\n * @param object $categoryPage\n * @return boolean\n */\nfunction owa_newArticleAction(&$article, &$user, $text, $summary, $minoredit, $watchthis, $sectionanchor, &$flags, $revision) {\n\n    $label = $article->getTitle()->getText();\n    return owa_trackAction( 'Article Created', $label );\n}\n\nfunction owa_editArticleAction($article, &$user, $text, $summary,\n        $minoredit, $watchthis, $sectionanchor, &$flags, $revision,\n        &$status, $baseRevId, &$redirect = '') {\n\n    if ( $flags & EDIT_UPDATE ) {\n\n        $label = $article->getTitle()->getText();\n        return owa_trackAction( 'Article Edit', $label );\n\n    } else {\n\n        return true;\n    }\n}\n\nfunction owa_deleteArticleAction( &$article, &$user, $reason, $id ) {\n\n    $label = $article->getTitle()->getText();\n    return owa_trackAction( 'Article Deleted', $label );\n}\n\nfunction owa_addUserAction( $user, $byEmail ) {\n\n    $label = '';\n    return owa_trackAction( 'User Account Added', $label );\n}\n\nfunction owa_addUploadAction( &$image ) {\n\n    $label = $image->getLocalFile()->getMimeType();\n    return owa_trackAction( 'File Upload', $label );\n}\n\nfunction owa_userLoginAction( &$user, &$inject_html ) {\n\n    $label = '';\n    return owa_trackAction( 'Login', $label );\n}\n\nfunction editTalkPageAction( $article ) {\n\n    $label = $article->getTitle()->getText();\n    return owa_trackAction( 'Talk Page Edit', $label );\n}\n\n/**\n * Adds javascript tracker to pages\n *\n * @param object $article\n * @return boolean\n */\nfunction owa_footer(&$wgOut, $sk) {\n\n    global $wgRequest, $wgOwaThirdPartyCookies, $wgOwaCookieDomain;\n\n    if ($wgRequest->getVal('action') != 'edit' && $wgRequest->getVal('title') != 'Special:Owa') {\n\n        $owa = owa_singleton();\n        if ($owa->getSetting('base', 'install_complete')) {\n\n            $cmds  = \"\";\n            if ( $wgOwaThirdPartyCookies ) {\n                $cmds .= \"owa_cmds.push( ['setOption', 'thirdParty', true] );\";\n            }\n\n            if ( $wgOwaCookieDomain ) {\n                $cmds .= \"owa_cmds.push( ['setCookieDomain', '$wgOwaCookieDomain'] );\";\n            }\n\n            $page_properties = $owa->getAllEventProperties($owa->pageview_event);\n            if ( $page_properties ) {\n                $page_properties_json = json_encode( $page_properties );\n                $cmds .= \"owa_cmds.push( ['setPageProperties', $page_properties_json] );\";\n            }\n\n            //$wgOut->addInlineScript( $cmds );\n\n            $options = array( 'cmds' => $cmds );\n\n            $tags = $owa->placeHelperPageTags(false, $options);\n            $wgOut->addHTML($tags);\n\n        }\n    }\n\n    return true;\n}\n\n/**\n * Gets mediawiki Language variable\n */\nfunction owa_getLanguage() {\n\n    global $wgLang, $wgContLang;\n    $code = '';\n\n    $code = $wgLang->getCode();\n    if ( ! $code ) {\n        $code = $wgContLang->getCode();\n    }\n\n    return $code;\n}\n\n/**\n * OWA Special Page Class\n *\n * Enables OWA to be accessed through a Mediawiki special page.\n */\nclass SpecialOwa extends SpecialPage {\n\n    function __construct() {\n            parent::SpecialPage('Owa', 'owa_view');\n            self::loadMessages();\n    }\n\n    function execute() {\n    \n        global $wgRequest, $wgOut, $wgUser, $wgSitename, $wgScriptPath, $wgScript, $wgServer,\n               $wgDBtype, $wgDBname, $wgDBserver, $wgDBuser, $wgDBpassword;\n\n        //must be called after setHeaders for some reason or elsethe wgUser object is not yet populated.\n        $this->setHeaders();\n        \n        if ($this->userCanExecute($wgUser)) {\n         \n\n            $owa = owa_singleton();\n            $params = array();\n\n            // if no action is found...\n            $do = owa_coreAPI::getRequestParam('do');\n            if (empty($do)) {\n                // check to see that owa in installed.\n                if (!$owa->getSetting('base', 'install_complete')) {\n\n                    define('OWA_INSTALLING', true);\n\n                    $site_url = $wgServer.$wgScriptPath;\n\n                    $params = array(\n                            'site_id'         => md5($site_url),\n                            'name'             => $wgSitename,\n                            'domain'         => $site_url,\n                            'description'     => '',\n                            'do'             => 'base.installStartEmbedded');\n\n                    $params['db_type'] = $wgDBtype;\n                    $params['db_name'] = $wgDBname;\n                    $params['db_host'] = $wgDBserver;\n                    $params['db_user'] = $wgDBuser;\n                    $params['db_password'] = $wgDBpassword;\n                    $params['public_url'] = $wgServer.$wgScriptPath.'/extensions/owa/';\n                    $page = $owa->handleRequest($params);\n\n                // send to daashboard\n               } else {\n                    //$params['do'] = 'base.reportDashboard';\n\n                       $page = $owa->handleRequest($params);\n                }\n            // do action found on url\n            } else {\n                   $page = $owa->handleRequestFromURL();\n            }\n\n            return $wgOut->addHTML($page);\n        } else {\n            $this->displayRestrictionError();\n        }\n    }\n\n    function loadMessages() {\n        static $messagesLoaded = false;\n        global $wgMessageCache;\n            \n        if ( $messagesLoaded ) return;\n\n        $messagesLoaded = true;\n\n        // this should be the only msg defined by mediawiki\n        $allMessages = array(\n             'en' => array(\n                 'owa' => 'Open Web Analytics'\n                 )\n            );\n\n\n        // load msgs in to mediawiki cache\n        foreach ( $allMessages as $lang => $langMessages ) {\n               $wgMessageCache->addMessages( $langMessages, $lang );\n        }\n\n        return true;\n    }\n}\n\n?>\n"
        },
        {
          "name": "owa-config-dist.php",
          "type": "blob",
          "size": 2.57421875,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\n/**\n * OWA Configuration\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n \n/**\n * DATABASE CONFIGURATION\n *\n * Connection info for databases that will be used by OWA.\n *\n */\n\ndefine('OWA_DB_TYPE', 'yourdbtypegoeshere'); // options: mysql\ndefine('OWA_DB_NAME', 'yourdbnamegoeshere'); // name of the database\ndefine('OWA_DB_HOST', 'yourdbhostgoeshere'); // host name of the server housing the database\ndefine('OWA_DB_USER', 'yourdbusergoeshere'); // database user\ndefine('OWA_DB_PORT', '3306'); // port of database\ndefine('OWA_DB_PASSWORD', 'yourdbpasswordgoeshere'); // database user's password\n\n/**\n * AUTHENTICATION KEYS AND SALTS\n *\n * Change these to different unique phrases.\n */\ndefine('OWA_NONCE_KEY', 'yournoncekeygoeshere');\ndefine('OWA_NONCE_SALT', 'yournoncesaltgoeshere');\ndefine('OWA_AUTH_KEY', 'yourauthkeygoeshere');\ndefine('OWA_AUTH_SALT', 'yourauthsaltgoeshere');\n\n/**\n * PUBLIC URL\n *\n * Define the URL of OWA's base directory e.g. http://www.domain.com/path/to/owa/\n * Don't forget the slash at the end.\n */\n \ndefine('OWA_PUBLIC_URL', 'http://domain/path/to/owa/');\n\n/**\n * OWA ERROR HANDLER\n *\n * Overide OWA error handler. This should be done through the admin GUI, but\n * can be handy during install or development.\n * \n * Choices are:\n *\n * 'production' - will log only critical errors to a log file.\n * 'development' - logs al sorts of useful debug to log file.\n */\n\n//define('OWA_ERROR_HANDLER', 'development');\n\n/**\n * LOG PHP ERRORS\n *\n * Log all php errors to OWA's error log file. Only do this to debug.\n */\n\n//define('OWA_LOG_PHP_ERRORS', true);\n \n/**\n * OBJECT CACHING\n *\n * Override setting to cache objects. Caching will increase performance.\n */\n\n//define('OWA_CACHE_OBJECTS', true);\n\n/**\n * CONFIGURATION ID\n *\n * Override to load an alternative user configuration\n */\n \n//define('OWA_CONFIGURATION_ID', '1');\n\n?>"
        },
        {
          "name": "owa-data",
          "type": "tree",
          "content": null
        },
        {
          "name": "owa.php",
          "type": "blob",
          "size": 0.7353515625,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n\nrequire_once('owa_env.php');\nrequire_once('owa_caller.php');\n\n/**\n * OWA Core\n * \n * Main core class wrapper.\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n */\n\nclass owa extends owa_caller {\n\n    function __construct($config = null) {\n\n        return parent::__construct($config);\n    }\n\n    /**\n     * OWA Singleton Method\n     *\n     * Makes a singleton instance of OWA using the config array\n     */\n    function singleton($config = null) {\n\n        static $owa;\n\n        if( empty( $owa ) ) {\n      \n            $owa =  new owa($config);\n        }\n        \n        return $owa;\n    }\n}\n\n?>"
        },
        {
          "name": "owa_adminController.php",
          "type": "blob",
          "size": 1.2919921875,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\nrequire_once(OWA_BASE_CLASSES_DIR.'owa_controller.php');\n\n/**\n * Administrative Controller Class\n *\n * This controller should be used for internal management pages/actions that require authentication\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n\n\nclass owa_adminController extends owa_controller {\n    \n    var $is_admin = true;\n    \n    /**\n     * Constructor\n     *\n     * @param array $params\n     * @return owa_controller\n     */\n    function __construct($params) {\n    \n        return parent::__construct($params);\n    }\n}\n\n?>"
        },
        {
          "name": "owa_auth.php",
          "type": "blob",
          "size": 15.650390625,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\nrequire_once(OWA_BASE_CLASS_DIR.'sanitize.php');\n\n/**\n * User Authentication Object\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\nclass owa_auth extends owa_base {\n\n    /**\n     * User object\n     *\n     * @var unknown_type\n     */\n    var $u;\n\n    /**\n     * Array of permission roles that users can have\n     *\n     * @var array\n     */\n    var $roles;\n\n    var $status_msg;\n\n    /**\n     * Login credentials\n     *\n     * @var array\n     */\n    var $credentials = array();\n\n    /**\n     * Status of Authentication\n     *\n     * @var boolean\n     */\n    var $auth_status = false;\n\n    var $_is_user = false;\n\n    var $_priviledge_level;\n\n    var $_is_priviledged = false;\n\n    var $params;\n\n    var $check_for_credentials = false;\n    \n    var $auth_method;\n\n    var $eq;\n\n    /**\n     * Auth class Singleton\n     *\n     * @return owa_auth\n     */\n    public static function get_instance($plugin = '') {\n\n        static $auth;\n\n        if (!$auth) {\n\n            $auth = new owa_auth();\n\n        }\n\n        return $auth;\n    }\n\n\n    /**\n     * Class Constructor\n     *\n     * @return owa_auth\n     */\n    function __construct() {\n\n        // register auth cookies\n        owa_coreAPI::registerStateStore('u', time()+3600*24*365*10, '', '', 'cookie');\n        owa_coreAPI::registerStateStore('p', time()+3600*2, '', '', 'cookie');\n\n        parent::__construct();\n        $this->eq = owa_coreAPI::getEventDispatch();\n    }\n\n    /**\n     * Used by controllers to check if the user exists and if they are priviledged.\n     *\n     * @param string $necessary_role\n     */\n    function authenticateUser() {\n\t\t\n\t\t$apiKey = owa_coreAPI::getRequestParam('apiKey') ?: owa_coreAPI::getServerParam( 'HTTP_X_API_KEY' );\n\t\n        // check existing auth status first in case someone else took care of this already.\n        if (owa_coreAPI::getCurrentUser()->isAuthenticated()) {\n\t        owa_coreAPI::debug('User is already authenticated.');\n            $ret = true;\n        \n        } elseif (owa_coreAPI::getRequestParam('pk') && owa_coreAPI::getStateParam('u')) {\n            // auth user by temporary passkey. used in forgot password situations\n            $this->setAuthMethod( 'temp_key');\n            $ret = $this->authenticateUserByUrlPasskey(owa_coreAPI::getRequestParam('pk'));\n             owa_coreAPI::debug('User authenticated via temporary passkey.');\n    \n        } elseif (owa_coreAPI::getRequestParam('user_id') && owa_coreAPI::getRequestParam('password')) {\n            // auth user by login form input\n            $this->setAuthMethod( 'login_form');\n            $ret = $this->authByInput(owa_coreAPI::getRequestParam('user_id'), owa_coreAPI::getRequestParam('password'));\n             owa_coreAPI::debug('User authenticated via form input.');\n    \n        } elseif ( $apiKey ) {\n            // auth user by api key\n            $this->setAuthMethod( 'api_key');\n            $ret = $this->authByApiKey( $apiKey );\n            owa_coreAPI::debug('User authenticated via api key.');\n    \n        } elseif (owa_coreAPI::getStateParam('u') && owa_coreAPI::getStateParam('p')) {\n            // auth user by cookies\n            $this->setAuthMethod( 'cookies');\n            $ret = $this->authByCookies(owa_coreAPI::getStateParam('u'), owa_coreAPI::getStateParam('p'));\n             owa_coreAPI::debug('User authenticated via cookies.');\n            \n        } else {\n            $ret = false;\n            owa_coreAPI::debug(\"Could not find any credentials to authenticate with.\");\n        }\n\n        // filter results for modules can add their own auth logic.\n        $ret = $this->eq->filter('auth_status', $ret);\n\n        return array('auth_status' => $ret);\n\n    }\n\n    function authByApiKey( $key ) {\n\n        $key = owa_sanitize::cleanMd5( $key );\n\n        if ( $key ) {\n\t        \n\t        // check signature of request\n\t        if ( ! owa_lib::inRestDebug() ) {\n\t\t    \t\n\t\t    \t//get current request url\n\t\t    \t$url = owa_coreAPI::getCurrentUrl();\n\t\t\t\t//owa_coreAPI::debug('request url' . $url);\n\t\t    \t\n\t\t    \t//get signatureparam  of request\n\t\t        $signature = owa_coreAPI::getRequestParam('signature') ?: owa_coreAPI::getServerParam( 'HTTP_X_SIGNATURE' );\n\t\t        \n\t\t        owa_coreAPI::debug('Signature: ' . $signature );\n\t\t         \n\t\t        // check if signature is exists and is valid\n\t\t        if ( ! $signature || ! $this->isSignatureValid( $signature, $key, $url ) ) {\n\t\t\t        \n\t\t\t       owa_coreAPI::debug('signature missing from request or not valid.');\n\t\t\t       return false;\n\t\t        }\n\t\t        \n\t\t\t} else {\n\t\t\t\t\n\t\t\t\towa_coreAPI::debug('skipping signature check in debug/development mode.');\n\t\t\t}\n\t\t\t\n            // fetch user object from the db\n            $this->u = owa_coreAPI::entityFactory( 'base.user' );\n            $this->u->load( $key, 'api_key' );\n\n            if ( $this->u->get( 'user_id' ) ) {\n                // get current user\n                $cu = owa_coreAPI::getCurrentUser();\n                \n                // set as new current user in service layer\n                $cu->loadNewUserByObject( $this->u );\n                $cu->setAuthStatus( true );\n                $this->_is_user = true;\n                \n                return true;\n                \n            } else {\n\t            \n                return false;\n            }\n\n        } else {\n\n            return false;\n        }\n\n    }\n\n    function authByCookies($user_id, $password) {\n\n        // set credentials\n        $this->credentials['user_id'] = owa_sanitize::cleanUserId( $user_id );\n        $this->credentials['password'] = $password;\n\t\towa_coreAPI::debug('auth by cookies');\n        // lookup user if not already done.\n        if ($this->_is_user == false) {\n\n            // check to see if the current user has already been authenticated by something upstream\n            $cu = owa_coreAPI::getCurrentUser();\n            if (!$cu->isAuthenticated()) {\n                // check to see if they are a user.\n                $val = $this->isUser();\n                //print (\"val: \". $val);\n                return $val;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    function authByInput($user_id, $password) {\n\n        // set credentials\n        $this->credentials['user_id'] = owa_sanitize::cleanUserId( $user_id );\n        // must encrypt password to see if it matches whats in the db\n        $this->credentials['password'] = $this->generateAuthCredential( $this->credentials['user_id'], $this->encryptOldPassword( $password ) );\n        // pass plain text password to test with password_verify\n        $this->credentials['new_password'] = $password;\n        //owa_coreAPI::debug(print_r($this->credentials, true));\n        $ret = $this->isUser();\n\n        if ($ret === true) {\n            $this->saveCredentials();\n        }\n\n        return $ret;\n    }\n\n    /**\n     * Looks up user by temporary Passkey Column in db\n     *\n     * @param unknown_type $key\n     * @return unknown\n     */\n    function authenticateUserTempPasskey( $key ) {\n\n        $key = owa_sanitize::cleanMd5( $key );\n\n        if ( $key ) {\n\n            $this->u = owa_coreAPI::entityFactory('base.user');\n            $this->u->getByColumn('temp_passkey', $key);\n\n            $id = $this->u->get('id');\n\n            if (!empty($id)) {\n\n                return true;\n\n            } else {\n\n                return false;\n            }\n\n        } else {\n\n            return false;\n        }\n    }\n\n    /**\n     * Authenticates user by a passkey\n     *\n     * @param unknown_type $key\n     * @return unknown\n     */\n    function authenticateUserByUrlPasskey($user_id, $passkey) {\n\n        $passkey = owa_sanitize::cleanMd5( $passkey );\n\n        if ( $passkey ) {\n\n            // set credentials\n            $this->credentials['user_id'] = $user_id;\n            $this->credentials['passkey'] = $passkey;\n\n            // fetch user obj\n            $this->getUser();\n\n            // generate a new passkey from its components in the db\n            $key = $this->generateUrlPasskey($this->u->get('user_id'), $this->u->get('password'));\n\n            // see if it matches the key on the url\n            if ($key == $passkey) {\n\n                return true;\n\n            } else {\n                return false;\n            }\n\n        } else {\n\n            return false;\n        }\n    }\n\n    /**\n     * Sets a temporary Passkey for a user\n     *\n     * @param string $email_address\n     * @return boolean\n     */\n    function setTempPasskey($email_address) {\n\n        $this->u = owa_coreAPI::entityFactory('base.user');\n        $this->u->getByColumn('email_address', $email_address);\n\n        $id = $u->get('id');\n\n        if (!empty($id)):\n\n            $this->eq->log(array('email_address' => $this->u->email_address), 'user.set_temp_passkey');\n            return true;\n        else:\n            return false;\n        endif;\n\n    }\n\n    function generateTempPasskey($seed) {\n\n        return md5($seed.time().rand());\n    }\n\n    function generateUrlPasskey($user_name, $password) {\n\n        return md5($user_name . $password);\n\n    }\n\n    /**\n     * Sets the initial Passkey for a new user\n     *\n     * @param string $user_id\n     * @return boolean\n     * @deprecated\n     */\n    function setInitialPasskey($user_id) {\n\n        return $this->eq->log(array('user_id' => $user_id), 'user.set_initial_passkey');\n\n    }\n\n    /**\n     * Saves login credentails to persistant browser cookies\n     * TODO: refactor to use state facility\n     */\n    function saveCredentials() {\n\n        owa_coreAPI::debug('saving user credentials to cookies');\n        \n        owa_coreAPI::createCookie( 'u', $this->u->get('user_id'), time()+3600*24*365*10 );\n        owa_coreAPI::createCookie( 'p', $this->generateAuthCredential( $this->credentials['user_id'], $this->u->get('password') ), time()+3600*24*2 );\n    }\n\n    /**\n     * Removes credentials\n     * @return boolean\n     */\n    function deleteCredentials() {\n\n        return owa_coreAPI::clearState('p');\n    }\n\n    /**\n     * Simple Password Encryption Scheme\n     *\n     * @param string $password\n     * @return string\n     */\n    function encryptPassword($password) {\n\n        return owa_lib::encryptPassword($password);\n\n    }\n    function encryptOldPassword($password) {\n\n        return owa_lib::encryptOldPassword($password);\n\n    }\n\n    function getUser() {\n\n        // fetch user object from the db\n        owa_coreAPI::debug('auth get user: '. $this->credentials['user_id'] );\n        \n        $this->u = owa_coreAPI::entityFactory('base.user');\n        $this->u->getByColumn('user_id', $this->credentials['user_id']);\n    }\n\n    /**\n     * Checks to see if the user credentials match a real user object in the DB\n     *\n     * @return boolean\n     */\n    function isUser() {\n\n        // get current user\n        $cu = owa_coreAPI::getCurrentUser();\n\n        // fetches user object from DB\n        $this->getUser();\n\n        if ( $this->credentials['user_id'] === $this->u->get('user_id') ) {\n\n            // new_password will only be set when using authByInput\n            if ( isset($this->credentials['new_password']) ) {\n                // plain text password matches DB password we can authorize\n                if ( password_verify( $this->credentials['new_password'], $this->u->get('password') ) ) {\n                $this->_is_user = true;\n\n                // set as new current user in service layer\n                $cu->loadNewUserByObject( $this->u );\n                $cu->setAuthStatus(true);\n\n                return true;\n                }\n            }\n\n            //if ($this->credentials['password'] === $this->u->get('password')):\n            if ( $this->isValidAuthCredential( $this->credentials['user_id'], $this->credentials['password'] ) ) {\n                $this->_is_user = true;\n\n                // set as new current user in service layer\n                $cu->loadNewUserByObject( $this->u );\n                $cu->setAuthStatus(true);\n\n                return true;\n            } else {\n                $this->_is_user = false;\n                return false;\n            }\n        } else {\n            $this->_is_user = false;\n            return false;\n        }\n    }\n\n    function isValidAuthCredential( $user_id, $passed_credential ) {\n\n        $hash = '';\n        $hash = $this->reconstructAuthCredential( $user_id );\n        //print \"hash: $hash \";\n        //print \"passed credential: $passed_credential \";\n        if ( function_exists('hash_equals') ) {\n\n            return hash_equals( $hash, $passed_credential );\n\n        } else {\n\n            if ( $hash === $passed_credential ) {\n\n                return true;\n            }\n        }\n    }\n\n    function reconstructAuthCredential( $user_id ) {\n\n        $u = owa_coreAPI::entityFactory('base.user');\n\n        $u->getByColumn( 'user_id', $user_id );\n\n        $password = $u->get('password');\n        //print \"password $password\";\n        return $this->generateAuthCredential( $user_id, $password );\n    }\n\n    function generateAuthCredential($user_id, $password, $expiration = '', $scheme = 'auth') {\n\n        $frag = substr($password, 8, 4);\n\n        $key = owa_coreAPI::saltedHash( $user_id . $frag . $expiration, $scheme );\n\n        $algo = 'sha1';\n\n        if ( function_exists( 'hash' ) ) {\n\n            $algo = 'sha256';\n\n        }\n\n        $hash = owa_lib::hash( $algo, $user_id . $expiration, $key );\n\n        $credential = $hash; // could add other elements here.\n\n        return $credential;\n    }\n    \n    function generateSignature( $requestUrl, $apiKey ) {\n\t    \n\t    // get the current time zone\n\t\t$tz = date_default_timezone_get();\n\t\t\n\t\t// switch to UTC for signature check\n\t\tdate_default_timezone_set('UTC');\n\t\t\n\t\t// generate date\n\t    $date = date( 'Ymd', time() );\n\t   \t\n\t   \t// switch time zone back to prior setting\n\t    date_default_timezone_set($tz);\n\t    \n\t    return base64_encode( hash('sha256', 'OWASIGNATURE' . $apiKey . $requestUrl . $date . OWA_AUTH_KEY ) );\n    }\n    \n    function isSignatureValid( $signature, $apiKey, $requestUrl ) {\n\t    \n\t    $requestUrl = owa_lib::removeQueryParamFromUrl( $requestUrl, 'owa_jsonpCallback' );\n\t\t$requestUrl = owa_lib::removeQueryParamFromUrl( $requestUrl, '_' );\n\t\t\n\t    \n\t    if ( strpos( $requestUrl, 'owa_signature' ) ) {\n\t\t    \n\t\t    $requestUrl = owa_lib::removeQueryParamFromUrl( $requestUrl, 'owa_signature' );\n\t    }\n\t    \n\t    \n\t    //owa_coreAPI::debug('url w/ no sig: ' . $requestUrl );\n\t    \n\t    //$signature = base64_decode( $signature );\n\t    \n\t    $computed_signature = $this->generateSignature( $requestUrl, $apiKey );\n\t    owa_coreAPI::debug( 'computed signature: ' . $computed_signature );\n\t    owa_coreAPI::debug( 'request url: ' . $requestUrl );\n\t    \n\t    if ( $signature === $computed_signature ) {\n\t\t    \n\t\t    owa_coreAPI::debug('API request signature is valid.' );\n\t\t    return true;\n\t\t    \n\t    } else {\n\t\t    \n\t\t    owa_coreAPI::debug('API request signature failed validation.' );\n\t\t    return false;\n\t    }\n    }\n    \n    // sets the method by which the user was authenticated\n    // @method  string\n    private function setAuthMethod( $method ) {\n        \n        $this->auth_method = $method;\n    }\n    \n    public function getAuthMethod() {\n        \n        return $this->auth_method;\n    }\n}\n\n?>\n"
        },
        {
          "name": "owa_base.php",
          "type": "blob",
          "size": 3.3271484375,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\nrequire_once('owa_env.php');\n\n/**\n * OWA Base Class\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n\nclass owa_base {\n\n    /**\n     * Configuration\n     *\n     * @var array\n     */\n    var $config;\n\n    /**\n     * Error Logger\n     *\n     * @var object\n     */\n    var $e;\n\n    /**\n     * Configuration Entity\n     *\n     * @var owa_settings  Object global configuration object\n     */\n    var $c;\n\n    /**\n     * Module that this class belongs to\n     *\n     * @var unknown_type\n     */\n    var $module;\n\n    /**\n     * Request Params\n     *\n     * @var array\n     */\n    var $params;\n\n    /**\n     * Base Constructor\n     *\n     * @return owa_base\n     */\n    function __construct() {\n        owa_coreAPI::profile($this, __FUNCTION__, __LINE__);\n        $this->e = owa_coreAPI::errorSingleton();\n        $this->c = owa_coreAPI::configSingleton();\n        $this->config = $this->c->fetch('base');\n    }\n\n    /**\n     * Retrieves string message from mesage file\n     *\n     * @param integer $code\n     * @param array $substitutions\n     * @return array\n     */\n    function getMsg($code, $substitutions = []) {\n\n        static $_owa_messages;\n\n        $msg = array();\n\n        if (empty($_owa_messages)) {\n            require(OWA_DIR.'conf/messages.php');\n        }\n\n        if ( $code && array_key_exists( $code, $_owa_messages ) ) {\n\n            $msg = $_owa_messages[$code];\n\t\t\t\n\t\t\tif ( $substitutions ) {\n\t            if (isset($msg['headline'])) {\n\t                $msg['headline'] = vsprintf($msg['headline'], $substitutions['headline']);\n\t            }\n\t\n\t            if (isset($msg['message'])) {\n\t                $msg['message'] = vsprintf($msg['message'], $substitutions['message']);\n\t            }\n\t        }\n        }\n\n        return $msg;\n    }\n\n    /**\n     * @param $code\n     * @param array $substitutions\n     * @return string\n     */\n    public function getMsgAsString($code, $substitutions = [])\n    {\n        $msg = $this->getMsg($code, $substitutions);\n\n        return implode(' ', array_values($msg));\n    }\n\n    /**\n     * Sets object attributes\n     *\n     * @param unknown_type $array\n     */\n    function _setObjectValues($array) {\n\n        foreach ($array as $n => $v) {\n\n                $this->$n = $v;\n\n            }\n\n        return;\n    }\n\n    /**\n     * Sets array attributes\n     *\n     * @param unknown_type $array\n     */\n    function _setArrayValues($array) {\n\n        foreach ($array as $n => $v) {\n\n                $this->params['$n'] = $v;\n\n            }\n\n        return;\n    }\n\n    function __destruct() {\n        owa_coreAPI::profile($this, __FUNCTION__, __LINE__);\n    }\n\n}\n\n?>"
        },
        {
          "name": "owa_caller.php",
          "type": "blob",
          "size": 9.1474609375,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\ninclude_once('owa_env.php');\nrequire_once(OWA_BASE_DIR.'/owa_base.php');\nrequire_once(OWA_BASE_DIR.'/owa_requestContainer.php');\nrequire_once(OWA_BASE_DIR.'/owa_auth.php');\nrequire_once(OWA_BASE_DIR.'/owa_coreAPI.php');\nrequire_once(OWA_BASE_CLASS_DIR.'error.php');\n\n/**\n * Abstract Caller class used to build application specific invocation classes\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\nclass owa_caller extends owa_base {\n    \n    /**\n     * Request Params from get or post\n     *\n     * @var array\n     */\n    var $params;\n        \n    var $start_time;\n    \n    var $end_time;\n    \n    var $update_required;\n    \n    var $service;\n    \n    var $site_id;\n            \n    /**\n     * Constructor\n     *\n     * @param array $config\n     * @return owa_caller\n     */\n    function __construct( $config = [] ) {\n      \n\t\t/* PHP ERROR LOGGING */\n        if ( owa_lib::inDebug() ) {\n\t        \n\t        owa_error::phpErrorSettings();\n        }\n        \n        // Start time\n        $this->start_time = owa_lib::microtime_float();\n        \n        /* SETUP CONFIGURATION AND ERROR LOGGER */\n       \n        // Parent Constructor. Sets default config entity and error logger\n        parent::__construct();\n        \n        // Log version debug\n        owa_coreAPI::debug(sprintf('*** Starting Open Web Analytics v%s. Running under PHP v%s (%s) ***', OWA_VERSION, PHP_VERSION, PHP_OS));\n        \n        if ( array_key_exists('REQUEST_URI', $_SERVER ) ) {\n            owa_coreAPI::debug( 'Request URL:' . $_SERVER['REQUEST_METHOD'] .' '.$_SERVER['REQUEST_URI'] );\n        }\n        \n        if ( array_key_exists('HTTP_USER_AGENT', $_SERVER ) ) {\n            owa_coreAPI::debug( 'User Agent: '.$_SERVER['HTTP_USER_AGENT'] );\n        }\n        \n        if ( array_key_exists('HTTP_HOST', $_SERVER ) ) {\n            owa_coreAPI::debug( 'Host: '.$_SERVER['HTTP_HOST'] );\n        }\n             \n        // load config values from DB\n        // Applies config from db or cache\n        // check here is needed for installs when the configuration table does not exist.\n               \n        if ( $this->c->isConfigFilePresent() && ! owa_coreAPI::getSetting('base', 'useStaticConfigOnly') && ! defined( 'OWA_INSTALLING' ) )  {\n            \n            $this->c->load( $this->c->get( 'base', 'configuration_id' ) );\n        }\n        \n        // set timezone once config is loaded from DB.\n        $this->c->setTimezone();\n\n        /* APPLY CALLER CONFIGURATION OVERRIDES */\n        \n        // overrides all default and user config values except defined in the config file\n        // must come after user overides are applied\n        // This will apply configuration overirdes that are specified by the calling application.\n        // This is usually used by plugins to setup integration specific configuration values.\n\t    $this->overloadConfig( $config );\t\n        \n        /* SET ERROR HANDLER */\n\n        // Sets the correct mode of the error logger now that final config values are in place\n        // This will flush buffered msgs that were thrown up untill this point\n        $this->e->setHandler($this->c->get('base', 'error_handler'));\n            \n        /* LOAD SERVICE LAYER */\n        $this->service = owa_coreAPI::serviceSingleton();\n        // initialize framework\n        $this->service->initializeFramework();\n        // notify handlers of 'init' action\n        $dispatch = owa_coreAPI::getEventDispatch();\n        $dispatch->notify($dispatch->makeEvent('init'));\n        \n        /* SET SITE ID */\n        // needed in standalone installs where site_id is not set in config file.\n        // still needed??????\n        if (!empty($this->params['site_id'])) {\n            $this->c->set('base', 'site_id', $this->params['site_id']);\n        }\n        \n        // re-fetch the array now that overrides have been applied.\n        // needed for backwards compatability\n        $this->config = $this->c->fetch('base');\n        \n        /* SETUP REQUEST Params */\n        // still needed?????\n        $this->params = $this->service->request->getAllOwaParams();\n    }\n    \n    function handleRequestFromUrl()  {\n        \n        //$this->params = owa_lib::getRequestParams();\n        return $this->handleRequest();\n        \n    }\n    \n    \n    /**\n     * Returns a configured javascript tracker for inclusion in your web page.\n     * You can pass an options array to control what the tracker will log.\n     * The options array is a key/value pair format like:\n     *\n     * $options = array('do_not_log_pageview' => true);\n     *\n     * Option keys include: 'do_not_log_pageview', 'do_not_log_clicks', 'do_not_log_domstream'\n     *\n     * @param     $echo        bool     if true the function will echo. if false the tracker is returned asa string.\n     * @param    $options    array    an key value pair option array\n     * @return     $tag         string    the tracker javascript.\n     */\n    function placeHelperPageTags($echo = true, $options = array()) {\n        \n        if( ! owa_coreAPI::getRequestParam( 'is_robot' ) ) {\n        \n            if ( ! class_exists( 'owa_template' ) ) {\n            \n                require_once(OWA_BASE_CLASSES_DIR.'owa_template.php');\n            }\n        \n            $t = new owa_template();\n            $t->set_template('js_helper_tags.tpl');\n                \n            $tracking_code = owa_coreAPI::getJsTrackerTag( $this->getSiteId(), $options );\n            $t->set('tracking_code', $tracking_code);\n            $tag = $t->fetch();\n            \n            if ($echo == false) {\n                return $tag;\n            } else {\n                echo $tag;\n            }\n        }\n    }\n    \n    // needed?\n    function handleHelperPageTagsRequest() {\n    \n        $params = array();\n        $params['do'] = 'base.helperPageTags';\n        return $this->handleRequest($params);\n    \n    }\n    \n    /**\n     * Handles OWA internal page/action requests\n     *\n     * @return unknown\n     */\n    function handleRequest($caller_params = null, $action = '') {\n        \n        return owa_coreAPI::handleRequest($caller_params, $action);\n                        \n    }\n    \n    function __destruct() {\n        \n        $this->end_time = owa_lib::microtime_float();\n        $total_time = $this->end_time - $this->start_time;\n        owa_coreAPI::debug(sprintf('Total session time: %s',$total_time));\n        owa_coreAPI::debug(\"Goodbye from OWA\");\n        owa_coreAPI::profileDisplay();\n    }\n        \n    function setSetting($module, $name, $value) {\n        \n        return owa_coreAPI::setSetting($module, $name, $value);\n    }\n    \n    function getSetting($module, $name) {\n        \n        return owa_coreAPI::getSetting($module, $name);\n    }\n        \n    function setCurrentUser($role, $login_name = '') {\n        $cu = owa_coreAPI::getCurrentUser();\n        $cu->setRole($role);\n        $cu->setAuthStatus(true);\n    }\n    \n    function makeEvent($type = '') {\n    \n        $event = owa_coreAPI::supportClassFactory('base', 'event');\n        \n        if ($type) {\n            $event->setEventType($type);\n        }\n        \n        return $event;\n    }\n    \n    function setSiteId($site_id) {\n        \n        $this->site_id = $site_id;\n    }\n    \n    function getSiteId() {\n        \n        return $this->site_id;\n    }\n    \n    function setErrorHandler($mode) {\n        $this->e->setHandler($mode);\n    }\n    \n    function isOwaInstalled() {\n        \n        $version = owa_coreAPI::getSetting('base', 'schema_version');\n        \n        if ($version > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    function isEndpointEnabled($file_name) {\n        \n        if ( ! $this->getSetting('base', 'disableAllEndpoints') ) {\n            $disabled_endpoints = $this->getSetting('base', 'disabledEndpoints');\n            \n            if ( ! in_array( $file_name, $disabled_endpoints ) ) {\n                return true;\n            }\n        }\n    }\n    \n    /**\n\t * Used by owa_caller to override default config with values based to the caller.\n\t *\n\t */\n    private function overloadConfig( $config ) {\n\t    \n\t    if ( ! empty( $config ) ) {\n\t     \n\t\t    if ( array_key_exists( 'base', $config ) ) {\n\t\t     \n\t\t\t     foreach ($config as $module => $values ) {\n\t\t\t\t     \n\t\t\t\t     $this->c->applyModuleOverrides( $module, $values );\n\t\t\t     }\n\t\t\t     \n\t\t\t} else {\n\t\t\t\t \n\t\t\t\t $this->c->applyModuleOverrides('base', $config);\n\t\t\t}\n\t\t\t\n\t\t\towa_coreAPI::debug('Configuration overrides applied.');\n\t\t}\n    }\n\n    \n    function restInPeace() {\n    \n        return false;\n    }\n    \n}\n\n?>"
        },
        {
          "name": "owa_controller.php",
          "type": "blob",
          "size": 19.5244140625,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\n/**\n * Abstract Controller Class\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n\nclass owa_controller extends owa_base {\n\n    /**\n     * Request Parameters passed in from caller\n     *\n     * @var array\n     */\n    var $params = array();\n\n    /**\n     * Controller Type\n     *\n     * @var array\n     */\n    var $type;\n\n    /**\n     * Is the controller for an admin function\n     *\n     * @var boolean\n     */\n    var $is_admin;\n\n    /**\n     * The priviledge level required to access this controller\n     *\n     * @var string\n     */\n    var $priviledge_level;\n\n    /**\n     * data validation control object\n     *\n     * @var Object\n     */\n    var $v;\n\n    /**\n     * Data container\n     *\n     * @var Array\n     */\n    var $data = array();\n\n    /**\n     * Capability\n     *\n     * @var string\n     */\n    var $capability;\n\n    /**\n     * Available Views\n     *\n     * @var Array\n     */\n    var $available_views = array();\n\n    /**\n     * Time period\n     *\n     * @var Object\n     */\n    var $period;\n\n    /**\n     * Dom id\n     *\n     * @var String\n     */\n    var $dom_id;\n\n    /**\n     * Flag for requiring authenciation before performing actions\n     *\n     * @var Bool\n     */\n    var $authenticate_user;\n\n    var $state;\n\n    /**\n     * Flag for requiring nonce before performing write actions\n     *\n     * @var Bool\n     */\n    var $is_nonce_required = false;\n\n    /**\n     * Constructor\n     *\n     * @param array $params\n     */\n    function __construct($params) {\n\n        // call parent constructor to setup objects.\n        parent::__construct();\n\n        // set request params\n        $this->params = $params;\n        \n        // set param validators\n\t\t$this->validate();\n\t\t\n        // set the default view method\n        $this->setViewMethod('delegate');\n\n        // clobber anything that needs clobbering by conrete class\n        $this->init();\n    }\n    \n    /**\n\t * Abstract method for setting any controller configuration.\n\t * Fires after constructor but before doAction.\n\t *\n\t */\n    function init() {\n\t    \n\t    return false;\n    }\n    \n    \n    /**\n\t * Method used to set param validators by concrete class\n\t *\n\t */\n    function validate() {\n\t    \n    }\n\t\n\tfunction updateAction() {\n\t\t\n\t\t$error_msg = 'Cannot perform action. OWA Updates required.';\n\t                \n        owa_coreAPI::debug( $error_msg );\n        \n        switch ( $this->getMode() ) {\n            \n            case 'cli':\n            \t\n            \t$this->set('error_msg', $error_msg );\n            \t$this->setView('base.genericCli');\n            \t$this->set( 'msgs', $error_msg );\n            \t\n            \tbreak;\n            \t\n            case 'web_app':\n            \t\n            \t// reset data\n            \t$this->data = array();\n            \t//redirect browser to update page\n            \t$this->setRedirectAction( 'base.updates' );\n                    \n            \tbreak;\n            \t\n            case 'rest_api':\n            \n            \t$this->set('error_msg', $error_msg );\n            \t$this->setView('base.restApi');\n            \n            \tbreak;\n        }\n        \n        return $this->data;\n\t}\n    /**\n     * Handles request from caller\n     *\n     */\n    function doAction() {\n\n        owa_coreAPI::debug('Performing Action: '.get_class($this));\n\n        // check if the schema needs to be updated and force the update\n        // not sure this should go here...\n        if ($this->is_admin === true) {\n            // do not intercept if its the updatesApply action or a re-install else updates will never apply\n            $do = $this->getParam('do');\n            \n            if ($do != 'base.updatesApply' && !defined('OWA_INSTALLING') && !defined('OWA_UPDATING')) {\n\n                if ( owa_coreAPI::isUpdateRequired() ) {\n\t            \t\n\t            \treturn $this->updateAction();\n\t            }\n            }\n        }\n       \n        /* CHECK USER FOR CAPABILITIES */\n        if ( ! $this->checkCapabilityAndAuthenticateUser( $this->getRequiredCapability() ) ) {\n            \n            return $this->data;\n        }\n\t\t\n        /* Check validity of nonce */\n        \n        // certain web app controllers require nonce verification\n        if ( owa_coreAPI::getSetting( 'base', 'request_mode' ) === 'web_app' ) {\n\t        \n\t        if ($this->is_nonce_required == true) {\n\t\t        \n\t            $nonce = $this->getParam('nonce');\n\t\n\t            if (!$nonce || !$this->verifyNonce($nonce)) {\n\t                $this->e->debug('Nonce is not valid.');\n\t                return $this->finishActionCall($this->notAuthenticatedAction());\n\t            }\n\t        }\n\t\t}\n        \n        // if the rest api is originating within the web app then we always need to check for a nonce\n        // The only way to tell if that's the case is to check if the request was auth'd using \"cookies\"\n        if ( owa_coreAPI::getSetting( 'base', 'request_mode' ) === 'rest_api' ) {\n            \n            $auth = owa_auth::get_instance();\n            \n            if ( $auth->getAuthMethod() === 'cookies' ) {\n                \n                $nonce = $this->getParam('nonce');\n                owa_coreAPI::debug( \"REST API Nonce: $nonce\");\n                owa_coreAPI::debug( $this->get('version') . $this->get('module') . $this->get('do') );\n                if ( ! $nonce || ! $this->verifyNonce( $nonce, $this->get('version') . $this->get('module') . $this->get('do') ) ) {\n                \n                    $this->e->debug('Nonce is missing or invalid.');\n                    return $this->finishActionCall($this->notAuthenticatedAction());\n                }\n            }\n        }\n        \n        // TODO: These sets need to be removed and added to pre(), action() or post() methods\n        // in various concrete controller classes as they screw up things when\n        // redirecting from one controller to another.\n\n        // set auth status for downstream views\n        //$this->set('auth_status', true);\n        //set request params\n        $this->set('params', $this->params);\n        // set site_id\n        $this->set('site_id', $this->get('site_id'));\n\n        // set status msg - NEEDED HERE? doesnt owa_ view handle this?\n        if (array_key_exists('status_code', $this->params)) {\n            $this->set('status_code', $this->getParam('status_code'));\n        }\n\n        // get error msg from error code passed on the query string from a redirect.\n        if (array_key_exists('error_code', $this->params)) {\n            $this->set('error_code', $this->getParam('error_code'));\n        }\n\n        // check to see if the controller has created a validator\n        if (!empty($this->v)) {\n            // if so do the validations required\n            $this->v->doValidations();\n    \n            //check for errors\n            if ($this->v->hasErrors === true) {\n                //print_r($this->v);\n                // if errors, do the errorAction instead of the normal action\n                $this->set('validation_errors', $this->getValidationErrorMsgs());\n              \n                $this->errorAction();\n                \n                return $this->data;\n            }\n        }\n\n        /* PERFORM PRE ACTION */\n        // often used by abstract descendant controllers to set various things\n        $this->pre();\n        /* PERFORM MAIN ACTION */\n           return $this->finishActionCall($this->action());\n    }\n\n    /**\n     * Checks for the action result, calls the post method and returns correct result\n     * Usage return $this->finishActionCall($this->action()))\n     * @return mixed\n     */\n    protected function finishActionCall($actionResult) {\n        // need to check ret for backwards compatability with older\n        // controllers that donot use $this->data\n        if (!empty($actionResult)) {\n            $this->post();\n            return $actionResult;\n        } else {\n\t        // set output realted params like view, etc.\n\t        $this->success();\n            $this->post();\n            return $this->data;\n        }\n    }\n    \n    /**\n\t * set output realted params like view, etc.\n\t * called after action because older style controllers might set these details within action()\n\t */\n    function success() {\n\t    \n    }\n\n    /**\n     * Checks if the current controller requires privileges and authenticates the user and checks for capabilities\n     * If the user is not allowed the correct error view is also initialized and the calling method should return\n     * @uses ->getRequiredCapability and ->getCurrentSiteId\n     * @param string $capability\n     * @return boolean\n     */\n     \n    // second conditional is needed to force an authentication even when capability is added to \"everyone\" role.\n    // ideally this auth check should happen earlier by I believe there is a race condtion so this might be the\n    // earliest it can happen. The u and p params will only be present if the user has logged in.\n    protected function checkCapabilityAndAuthenticateUser($capability) {\n        if ( ( !empty($capability) && ! owa_coreAPI::isEveryoneCapable( $capability ) ) || ( owa_coreAPI::getStateParam('u') && owa_coreAPI::getStateParam('p') ) ) {\n            /* PERFORM AUTHENTICATION */\n            $auth = owa_auth::get_instance();\n            if (!owa_coreAPI::isCurrentUserAuthenticated()) {\n                $status = $auth->authenticateUser();\n                if ($status['auth_status'] != true) {\n                    $this->notAuthenticatedAction();\n                    return false;\n                }\n            }\n\n            $currentUser = owa_coreAPI::getCurrentUser();\n            if (!$currentUser->isCapable($this->getRequiredCapability(),$this->getCurrentSiteId())) {\n                owa_coreAPI::debug('User does not have capability required by this controller.');\n                $this->authenticatedButNotCapableAction();\n                //needed?\n                //$this->set('go', urlencode(owa_lib::get_current_url()));\n                // needed? -- set auth status for downstream views\n                //$this->set('auth_status', true);\n                return false;\n            }\n\n        }\n        return true;\n    }\n\n    // needed?\n    protected function isEveryoneCapable($capability) {\n\n        return owa_coreAPI::isEveryoneCapable( $capability );\n    }\n\n    function logEvent($event_type, $properties) {\n\n        $ed = owa_coreAPI::getEventDispatch();\n\n        if (!is_a($properties, 'owa_event')) {\n\n            $event = owa_coreAPI::supportClassFactory('base', 'event');\n            $event->setProperties($properties);\n            $event->setEventType($event_type);\n        } else {\n            $event = $properties;\n        }\n\n        return $ed->notify( $event );\n    }\n\n    function createValidator() {\n\n        $this->v = owa_coreAPI::supportClassFactory('base', 'validator');\n    }\n\n    function addValidation($name, $value, $validation, $conf = array()) {\n\n        if ( empty( $this->v ) ) {\n\n            $this->createValidator();\n        }\n\n        return $this->v->addValidation($name, $value, $validation, $conf);\n\n    }\n\n    function setValidation($name, $obj) {\n\n        if (empty($this->v)) {\n            $this->createValidator();\n        }\n\n        return $this->v->setValidation($name, $obj);\n    }\n\n    function getValidationErrorMsgs() {\n\n        return $this->v->getErrorMsgs();\n\n    }\n\n    function isAdmin() {\n\n        if ($this->is_admin == true) {\n            return true;\n        }\n    }\n\n    // depricated\n    function _setCapability($capability) {\n\n        $this->setRequiredCapability($capability);\n    }\n\n    function setRequiredCapability($capability) {\n\n        $this->capability = $capability;\n    }\n\n    function getRequiredCapability() {\n\n        return $this->capability;\n    }\n\n    function getParam($name) {\n\n        if (array_key_exists($name, $this->params)) {\n            return $this->params[$name];\n        }\n    }\n\n    function setParam($name, $value) {\n\n        $this->params[$name] = $value;\n    }\n\n    function isParam($name) {\n\n        if (array_key_exists($name, $this->params)) {\n            return true;\n        }\n    }\n\n    function get($name) {\n\n        return $this->getParam($name);\n    }\n\n    function getAllParams() {\n\n        return $this->params;\n    }\n\n    function pre() {\n\n        return false;\n    }\n\n    function post() {\n        return false;\n    }\n\n    function getPeriod() {\n\n        return $this->period;\n    }\n\n    function setPeriod() {\n        // set period\n\n        $period = $this->makeTimePeriod($this->getParam('period'), $this->params);\n\n        $this->period = $period;\n        $this->set('period', $this->getPeriod());\n        $this->data['params'] = array_merge($this->data['params'], $period->getPeriodProperties());\n    }\n\n    function makeTimePeriod($time_period, $params = array()) {\n\n        return owa_coreAPI::makeTimePeriod($time_period, $params);\n    }\n\n    function setTimePeriod($period) {\n\n        $this->period = $period;\n        $this->set('period', $this->getPeriod());\n        //$this->data['params'] = array_merge($this->data['params'], $period->getPeriodProperties());\n    }\n\n\n    function setView($view) {\n\n        $this->data['view'] = $view;\n    }\n\n    function setSubview($subview) {\n\n        $this->data['subview'] = $subview;\n\n    }\n\n    function setViewMethod($method = 'delegate') {\n\n        $this->data['view_method'] = $method;\n\n    }\n\n    function setRedirectAction($do) {\n\n        $this->set('view_method', 'redirect');\n        $this->set('do', $do);\n\t\t\n\t\t$new_data = [\n\t\t\t\n\t\t\t'do' \t\t\t=> $do,\n\t\t\t'view_method'\t=> 'redirect'\n\t\t];\n\t\t\n/*\n\t\tif ( array_key_exists('status_code', $this->data) && ! empty($this->data['status_code'] ) ) {\n\t\t\t\n\t\t\t$new_data['status_code'] = $this->data['status_code'];\n\t\t}\n\t\t\n\t\tif ( array_key_exists('error_code', $this->data) && ! empty($this->data['error_code'] ) ) {\n\t\t\t\n\t\t\t$new_data['error_code'] = $this->data['error_code'];\n\t\t}\n*/\n\t\t\n\t\tforeach ($this->data as $k => $param) {\n\t\t\t\n\t\t\tif ( ! is_array( $param ) || ! is_object($param) ) {\n\t\t\t\t\n\t\t\t\t$new_data[$k] = $param;\n\t\t\t}\n\t\t}\n\t\towa_coreAPI::debug('setredirectAction');\n\t\towa_coreAPI::debug( $new_data);\n\t\t$this->data = $new_data;\t\t\n\n        // need to remove these unsets once they are no longer set in the main doAction method\n        if (array_key_exists('params', $this->data)) {\n            unset($this->data['params']);\n        }\n\n    }\n\n    function setPagination($pagination, $name = 'pagination') {\n\n        $this->data[$name] = $pagination;\n\n    }\n\n    function set($name, $value) {\n\n        $this->data[$name] = $value;\n    }\n\t\n\t/**\n\t * Sets the type of controler\n\t * @depricated\n\t * @todo remove this\n\t */\n    function setControllerType($string) {\n\n        $this->type = $string;\n\n    }\n    \n    public function getMode() {\n\t    \n\t    return owa_coreAPI::getSetting( 'base', 'request_mode' );\n    }\n\n    function mergeParams($array) {\n\n        $this->params = array_merge($this->params, $array);\n\n    }\n\n    /**\n     * redirects borwser to a particular view\n     *\n     * @param unknown_type $data\n     */\n    function redirectBrowser($action, $pass_params = true) {\n\n        $control_params = array('view_method', 'auth_status');\n\n        $get = '';\n\n        $get .= owa_coreAPI::getSetting('base', 'ns').'do'.'='.$action.'&';\n\n        if ($pass_params === true) {\n\n            foreach ($this->data as $n => $v) {\n\n                if (!in_array($n, $control_params)) {\n\n                    $get .= owa_coreAPI::getSetting('base', 'ns').$n.'='.$v.'&';\n\n                }\n            }\n        }\n\n        $new_url = sprintf(owa_coreAPI::getSetting('base', 'link_template'), owa_coreAPI::getSetting('base', 'main_url'), $get);\n\n        return owa_lib::redirectBrowser($new_url);\n\n    }\n\n    function redirectBrowserToUrl($url) {\n\n        return owa_lib::redirectBrowser($url);\n    }\n\n    function setStatusCode($code) {\n\n        $this->data['status_code'] = $code;\n    }\n\n    function setStatusMsg($msg) {\n\n        $this->data['status_message'] = $msg;\n    }\n\n    function setErrorMsg( $msg ) {\n\n        $this->set( 'error_msg', $msg );\n    }\n\n    function authenticatedButNotCapableAction($additionalMessage = '') {\n        if ( empty($additionalMessage) ) {\n            $siteIdMsg = $this->getCurrentSiteId();\n            if ( empty ($siteIdMsg) ) {\n                $siteIdMsg = 'No access to any site for the permission \"'.$this->getRequiredCapability().'\"';\n            }\n            $additionalMessage = $siteIdMsg;\n        }\n        $msg = $this->getMsg(2003);\n        $msg['message'] .= $additionalMessage;\n        $this->setView('base.error');\n        $this->set('error_msg', $msg);\n    }\n\n    function notAuthenticatedAction() {\n\t\t\n\t\tif (owa_coreAPI::getSetting('base', 'request_mode') === 'rest_api') {\n\t\t\t\n\t\t\t$this->setView('base.restApi');\n\t\t\t$this->set('error_msg', ['headline'\t=> 'Not authenticated.', 'msg' => 'Check API credentials or permissions for this user.'] );\n\t\t\thttp_response_code(401);\t\n\t\t} else {\n\t        $this->setRedirectAction('base.loginForm');\n\t\t\t$this->set('go', urlencode(owa_lib::get_current_url()));\n\t\t}\n    }\n\n    function verifyNonce($nonce, $action = '') {\n            \n        $action = $action ?: $this->getParam('do') ?: $this->getParam('action');\n\n        $matching_nonce = owa_coreAPI::createNonce($action);\n        owa_coreAPI::debug(\"passed nonce: $nonce | matching nonce: $matching_nonce\");\n        if ($nonce === $matching_nonce) {\n            return true;\n        }\n    }\n\n    /**\n     * Sets nonce flag for the controller.\n     */\n    function setNonceRequired() {\n\n        $this->is_nonce_required = true;\n    }\n\n    function getSetting($module, $name) {\n        return owa_coreAPI::getSetting($module, $name);\n    }\n\n\n    /**\n     * Returns array of owa_site entities where the current user has access to, taken the current controller cap into account\n     * @return array\n     */\n    protected function getSitesAllowedForCurrentUser() {\n   \n        $currentUser = owa_coreAPI::getCurrentUser();\n\n        if ( $currentUser->isAnonymousUser() || $currentUser->isAdmin() ) {\n            $result = array();\n           \n            $relations = owa_coreAPI::getSitesList();\n\n            foreach ($relations as $siteRow) {\n\n                $site = owa_coreAPI::entityFactory('base.site');\n                $site->load($siteRow['id']);\n                $result[$siteRow['site_id']] = $site;\n            }\n \n            return $result;\n\n        } else {\n\t        \n            return $currentUser->getAssignedSites();\n        }\n    }\n\n    /**\n     * gets the siteid taking the site access permissions into account\n     * If not a typical siteId parameter is set or user lacks permission, the first availabe site is used\n     *\n     * @return string or false if no site access\n     */\n    protected function getCurrentSiteId() {\n\n        $siteParameterValue = $this->getSiteIdParameterValue();\n        return $siteParameterValue;\n    }\n\n    /**\n     * @return integer or false\n     */\n    protected function getSiteIdParameterValue() {\n        if ($this->getParam('siteId') ) {\n            return $this->getParam('siteId');\n        }\n        elseif ($this->getParam('site_id') ) {\n            return $this->getParam('site_id');\n        }\n        return false;\n    }\n\n}\n\n?>"
        },
        {
          "name": "owa_coreAPI.php",
          "type": "blob",
          "size": 53.12890625,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\nrequire_once(OWA_BASE_DIR.'/owa_lib.php');\n\n/**\n * OWA Core API\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n\nclass owa_coreAPI {\n\n\n    // @depricated\n    // @todo remove\n    public static function singleton($params = array()) {\n\n        static $api;\n\n        if(!isset($api)):\n            $api = new owa_coreAPI();\n        endif;\n\n        if(!empty($params)):\n            $api->params = $params;\n        endif;\n\n        return $api;\n    }\n\n    public static function setupStorageEngine($type) {\n\n        if ( ! class_exists( 'owa_db' ) ) {\n\t        \n            require_once(OWA_BASE_CLASSES_DIR.'owa_db.php');\n        }\n\t\t\n\t\tif ( $type ) {\n        \t$connection_class = \"owa_db_\" . $type;\n\n            if ( ! class_exists( $connection_class ) ) {\n\t            \n                $connection_class_path = OWA_PLUGIN_DIR.'db/' . $connection_class . \".php\";\n\t\t\t\t\n\t\t\t\tif ( file_exists( $connection_class_path ) ) {\n\t\t\t\t\t\n\t                 if ( ! require_once( $connection_class_path ) ) {\n\t                     \n\t                     owa_coreAPI::error(sprintf('Cannot locate proper db class at %s.', $connection_class_path));\n\t                     \n\t                     return false;\n\t                }\n\t                \n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\towa_coreAPI::error(\"$type database connection class file not found.\");\n\t\t\t\t}\n\t\t\t}\n\n        } else {\n\t        \n\t        owa_coreAPI::error(\"$type is not a supported database.\");\n        }\n\n         return true;\n\n    }\n    /**\n     * @return owa_db\n     */\n    public static function dbSingleton() {\n\n        static $db;\n\n        if (!isset($db)) {\n\n            $db = owa_coreAPI::dbFactory();\n        }\n\n        return $db;\n    }\n\n    public static function dbFactory() {\n\n        $db_type = owa_coreAPI::getSetting('base', 'db_type');\n        $ret = owa_coreAPI::setupStorageEngine($db_type);\n\n         if (!$ret) {\n             owa_coreAPI::error(sprintf('Failed to initialize db type %s. Exiting.', $db_type));\n             return;\n        } else {\n            $connection_class = 'owa_db_'.$db_type;\n            $db = new $connection_class(\n                owa_coreAPI::getSetting('base','db_host'),\n                owa_coreAPI::getSetting('base','db_port'),\n                owa_coreAPI::getSetting('base','db_name'),\n                owa_coreAPI::getSetting('base','db_user'),\n                owa_coreAPI::getSetting('base','db_password'),\n                owa_coreAPI::getSetting('base','db_force_new_connections'),\n                owa_coreAPI::getSetting('base','db_make_persistant_connections')\n            );\n\n            return $db;\n        }\n    }\n\n    /**\n     * @return owa_settings\n     */\n    public static function configSingleton() {\n\n        static $config;\n\n        if( ! isset( $config ) ) {\n\n            if ( ! class_exists( 'owa_settings' ) ) {\n                require_once( OWA_BASE_CLASS_DIR.'settings.php' );\n            }\n\n            $config = owa_coreAPI::supportClassFactory( 'base', 'settings' );\n        }\n\n        return $config;\n    }\n\n    public static function errorSingleton() {\n\n        static $e;\n\n        if( ! $e ) {\n\n            if ( ! class_exists( 'owa_error' ) ) {\n                require_once( OWA_BASE_CLASS_DIR.'error.php' );\n            }\n\n            $e = owa_coreAPI::supportClassFactory( 'base', 'error' );\n\n        }\n\n        return $e;\n    }\n\n    public static function getSetting($module, $name) {\n\n        $s = owa_coreAPI::configSingleton();\n        return $s->get($module, $name);\n    }\n\n    public static function setSetting($module, $name, $value, $persist = false) {\n\n        $s = owa_coreAPI::configSingleton();\n\n        if ($persist === true) {\n            $s->persistSetting($module, $name, $value);\n        } else {\n            $s->setSetting($module, $name, $value);\n        }\n\n    }\n\n    public static function persistSetting($module, $name, $value) {\n\n        $s = owa_coreAPI::configSingleton();\n        $s->persistSetting($module, $name, $value);\n\n    }\n\n    public static function getSiteSetting($site_id, $name) {\n\n        $site = owa_coreAPI::entityFactory('base.site');\n        $site->load( $site->generateId( $site_id ) );\n\n        if ( $site->wasPersisted() ) {\n\n            return $site->getSiteSetting($name);\n        }\n    }\n\n    public static function getRegisteredDomain( $full_domain ) {\n\n        static $psl;\n\n        if ( ! $psl ) {\n            $psl = owa_coreAPI::supportClassFactory( 'base', 'pslReader' );\n        }\n\n        return $psl->getRegisteredDomain( $full_domain );\n    }\n\n    public static function persistSiteSetting($site_id, $name, $value) {\n\n        $site = owa_coreAPI::entityFactory('base.site');\n        $site->load( $site->generateId( $site_id ) );\n        if ( $site->wasPersisted() ) {\n            $settings = $site->get('settings');\n            if ( ! $settings ) {\n                $settings = array();\n            }\n            $settings[$name] = $value;\n            $site->set('settings', $settings);\n            $site->update();\n        }\n    }\n\n    public static function getSiteSettings($site_id) {\n\n        $site = owa_coreAPI::entityFactory('base.site');\n        $site->load( $site->generateId( $site_id ) );\n        if ( $site->wasPersisted() ) {\n\n            $settings = $site->get('settings');\n\n            if ( $settings ) {\n                return $settings;\n            } else {\n                return array();\n            }\n        }\n\n    }\n\n    public static function getAllRoles() {\n\n        $caps = owa_coreAPI::getSetting('base', 'capabilities');\n        return array_keys($caps);\n    }\n\n    public static function getCapabilities($role) {\n        $caps = owa_coreAPI::getSetting('base', 'capabilities');\n        if (array_key_exists($role, $caps)) {\n            return $caps[$role];\n        } else {\n            return array();\n        }\n    }\n\n    /**\n     * @return owa_serviceUser\n     */\n    public static function getCurrentUser() {\n        $s = owa_coreAPI::serviceSingleton();\n        return $s->getCurrentUser();\n    }\n\n    /**\n     * check to see if the current user has a capability\n     * always returns a bool\n     * @return boolean\n     */\n    public static function isCurrentUserCapable($capability, $site_id = null) {\n\n        $cu = owa_coreAPI::getCurrentUser();\n        owa_coreAPI::debug(\"Current User Role: \".$cu->getRole());\n        owa_coreAPI::debug(\"Current User Authentication: \".$cu->isAuthenticated());\n        $ret = $cu->isCapable($capability, $site_id);\n        owa_coreAPI::debug(\"Is current User capable: \".$ret);\n        return $ret;\n    }\n\n    public static function isCurrentUserAuthenticated() {\n\n        $cu = owa_coreAPI::getCurrentUser();\n        return $cu->isAuthenticated();\n    }\n    \n    public static function getCurrentUserApiKey() {\n\n        $cu = owa_coreAPI::getCurrentUser();\n        return $cu->getApiKey();\n    }\n    \n    /**\n     * @return owa_service\n     */\n    public static function serviceSingleton() {\n\n        static $s;\n\n        if(empty($s)) {\n\n            if (!class_exists('owa_service')) {\n                require_once(OWA_BASE_CLASS_DIR.'service.php');\n            }\n\n            $s = owa_coreAPI::supportClassFactory('base', 'service');\n\n        }\n\n        return $s;\n    }\n\n    public static function cacheSingleton( $params = [] ) {\n\n        static $cache;\n\n        if ( empty ( $cache ) ) {\n\t        \n            $cache = owa_lib::simpleFactory( 'owa_cache', OWA_BASE_CLASS_DIR.'cache.php', $params );\n        }\n\n        return $cache;\n    }\n    \n    public static function implementationFactory( $group, $implementation_name ) {\n      \n        // get implementation\n        $s = owa_coreAPI::serviceSingleton();\n    \n        $mapValue = $s->getMapValue( $group, $implementation_name );\n\t\t\n        if ( $mapValue && is_array( $mapValue ) ) {\n\t        \n\t        // new style map format\n\t        if ( array_key_exists('class_name', $mapValue ) ) {\n\t\t        \n\t\t        $class_name = $mapValue['class_name'];\n\t\t       \t\t            \n\t\t        if ( array_key_exists('file', $mapValue ) ) {\n\t\t\t        \n\t\t\t        $file = $mapValue['file'];\n\t\t        }\n\t\t        \n\t\t        if ( array_key_exists('params', $mapValue ) ) {\n\t\t\t        \n\t\t\t        $params = $mapValue['params'];\n\t\t        }\n\t\t        \n\t        } else {\n\t\t\t\t// old style compatability\n\t        \tlist( $class_name, $file, $params ) = $mapValue;\n            }\n\n            //owa_coreAPI::debug(print_r($implementation, true));\n            return owa_lib::simpleFactory( $class_name, $file, $params );\n\n        } else {\n\n            throw new Exception(\"No implementation by the name $implementation_name found in group $group.\");\n        }\n        \n    }\n\n\n    public static function requestContainerSingleton() {\n\n        static $request;\n\n        if(!isset($request)):\n\n            if (!class_exists('owa_requestContainer')):\n                require_once(OWA_DIR.'owa_requestContainer.php');\n            endif;\n\n            $request = owa_lib::factory(OWA_DIR, '', 'owa_requestContainer');\n\n        endif;\n\n        return $request;\n\n    }\n\n    public static function moduleRequireOnce($module, $class_dir, $file) {\n\n        if (!empty($class_dir)) {\n\n            $class_dir .= '/';\n\n        }\n\n        $full_file_path = OWA_BASE_DIR.'/modules/'.$module.'/'.$class_dir.$file.'.php';\n\n        if (file_exists($full_file_path)) {\n            return require_once($full_file_path);\n        } else {\n            owa_coreAPI::debug(\"moduleRequireOnce says no file found at: $full_file_path\");\n            return false;\n        }\n    }\n\n    public static function moduleFactory($modulefile, $class_suffix = null, $params = '', $class_ns = 'owa_') {\n        list($module, $file) = explode(\".\", $modulefile);\n        $class = $class_ns.$file.$class_suffix;\n        //print $class;\n        // Require class file if class does not already exist\n        if(!class_exists($class)):\n            owa_coreAPI::moduleRequireOnce($module, '', $file);\n        endif;\n\n        $obj = owa_lib::factory(OWA_BASE_DIR.'/modules/'.$module, '', $class, $params);\n\n        //if (isset($obj->module)):\n            $obj->module = $module;\n        //endif;\n\n        return $obj;\n    }\n\n    public static function moduleGenericFactory($module, $sub_directory, $file, $class_suffix = null, $params = '', $class_ns = 'owa_') {\n\n        $class = $class_ns.$file.$class_suffix;\n\n        // Require class file if class does not already exist\n        if(!class_exists($class)):\n            owa_coreAPI::moduleRequireOnce($module, $sub_directory, $file);\n        endif;\n\n        $obj = owa_lib::factory(OWA_DIR.'modules'.'/'.$module.'/'.$sub_directory, '', $class, $params);\n\n        return $obj;\n    }\n\n    /**\n     * Produces Module Classes (module.php)\n     *\n     * @return Object module class object\n     */\n    public static function moduleClassFactory($module) {\n\n        if (!class_exists('owa_module')):\n            require_once(OWA_BASE_CLASSES_DIR.'owa_module.php');\n        endif;\n\n        require_once(OWA_BASE_DIR.'/modules/'.$module.'/module.php');\n\n        return owa_lib::factory(OWA_BASE_CLASSES_DIR.$module, 'owa_', $module.'Module');\n\n    }\n\n\n    public static function updateFactory($module, $filename, $class_ns = 'owa_') {\n\n        require_once(OWA_BASE_CLASS_DIR.'update.php');\n\n        //$obj = owa_coreAPI::moduleGenericFactory($module, 'updates', $filename, '_update');\n        $class = $class_ns.$module.'_'.$filename.'_update';\n\n        // Require class file if class does not already exist\n        if(!class_exists($class)):\n            owa_coreAPI::moduleRequireOnce($module, 'updates', $filename);\n        endif;\n\n        $obj = owa_lib::factory(OWA_DIR.'modules'.'/'.$module.'/'.'updates', '', $class);\n\n        $obj->module_name = $module;\n        if (!$obj->schema_version) {\n            $obj->schema_version = $filename;\n        }\n        return $obj;\n    }\n\n    public static function subViewFactory($subview, $params = array()) {\n\n        list($module, $class) = explode(\".\", $subview);\n        //print_r($module.' ' . $class);\n        //owa_lib::moduleRequireOnce($module, $class);\n\n        $subview =  owa_lib::moduleFactory($subview, 'View', $params);\n        $subview->is_subview = true;\n\n        return $subview;\n    }\n\n    public static function supportClassFactory($module, $class, $params = array(),$class_ns = 'owa_') {\n\n        $obj = owa_lib::factory(OWA_BASE_DIR.'/'.'modules'.'/'.$module.'/'.'classes'.'/', $class_ns, $class, $params);\n        //$obj->module = $module;\n\n        return $obj;\n    }\n\n    /**\n     * Convienence method for generating entities\n     *\n     * @param unknown_type $entity_name\n     * @return unknown\n     */\n    public static function entityFactory($entity_name) {\n\n        /* SETUP STORAGE ENGINE */\n\n        // Must be called before any entities are created\n\n        if (!defined('OWA_DTD_INT')) {\n            if (defined('OWA_DB_TYPE')) {\n                owa_coreAPI::setupStorageEngine(OWA_DB_TYPE);\n            } else {\n                //owa_coreAPI::setupStorageEngine('mysql');\n                self::error(\"OWA_DB_TYPE constant has not been set for some reason.\");\n            }\n\n        }\n\n\n\n        if (!class_exists('owa_entity')):\n            require_once(OWA_BASE_CLASSES_DIR.'owa_entity.php');\n        endif;\n\n        $entity = owa_coreAPI::moduleSpecificFactory($entity_name, 'entities', '', '', false);\n        $entity->name = $entity_name;\n        return $entity;\n        //return owa_coreAPI::supportClassFactory('base', 'entityManager', $entity_name);\n\n    }\n\n    /**\n     * Convienence method for generating entities\n     *\n     * @param unknown_type $entity_name\n     * @return unknown\n     * @depricated\n     * @todo REMOVE\n     */\n    public static function rawEntityFactory($entity_name) {\n\n        return owa_coreAPI::entityFactory($entity_name);\n\n    }\n\n    /**\n     * Factory for generating module specific classes\n     *\n     * @param string $modulefile\n     * @param string $class_dir\n     * @param string $class_suffix\n     * @param array $params\n     * @return unknown\n     */\n    public static function moduleSpecificFactory($modulefile, $class_dir, $class_suffix = null, $params = '', $add_module_name = true, $class_ns = 'owa_') {\n\n        list($module, $file) = explode(\".\", $modulefile);\n        $class = $class_ns.$file.$class_suffix;\n\n        // Require class file if class does not already exist\n        if(!class_exists($class)):\n            owa_coreAPI::moduleRequireOnce($module, $class_dir, $file);\n        endif;\n\n        $obj = owa_lib::factory(OWA_BASE_DIR.'/'.'modules'.'/'.$class_dir.'/'.$module, '', $class, $params);\n\n        if ($add_module_name == true):\n            $obj->module = $module;\n        endif;\n\n        return $obj;\n\n\n    }\n\n    public static function executeApiCommand($map) {\n\t\t\n\t\t// carve out for REST API backwards compatability during migration\n\t\tif ( array_key_exists('version', $map) ) {\n\t\t\t\n\t\t\t$route = self::lookupRestRoute( $map['request_method'], $map['module'], $map['version'], $map['do']);\n\t\t\t\n\t\t\tif ( $route ) {\n\t\t\t\t\n\t\t\t\t//$params['rest_route'] = $route;\n\t\t\t\towa_coreAPI::debug('API params: ');\n\t\t\t\towa_coreAPI::debug($map);\n\t\t\t\towa_coreAPI::debug('API route: ');\n\t\t\t\towa_coreAPI::debug($route);\n\t\t\t\t$controller = owa_lib::simpleFactory( $route['class_name'], $route['file'], $map );\t\t\t\t\t\n\t\t\t\t$response = self::runController( $controller );\n\t\t\t\t\n\t\t\t\t$response = json_decode($response);\n\t\t\t\t\n\t\t\t\treturn $response->data;\n\t\t\t}\n\t\t}\n\t\t\n        if (!array_key_exists('do', $map)) {\n            echo (\"API Command missing from request.\");\n            owa_coreAPI::debug('API Command missing from request. Aborting.');\n            exit;\n        } else {\n            // load service\n            $s = owa_coreAPI::serviceSingleton();\n            // lookup method class\n            $do = $s->getApiMethodClass($map['do']);\n\n        }\n\n        // if exists, pass to OWA as a request\n        if ($do) {\n\n            if (array_key_exists('args', $do)) {\n\n                $passed_args = array();\n\n                foreach ($do['args'] as $arg) {\n\n                    if (isset($map[$arg])) {\n                        $passed_args[] = $map[$arg];\n                    } else {\n                        $passed_args[] = '';\n                    }\n                }\n\n                if (!empty($do['file'])) {\n\n                    if (!class_exists($do['callback'][0])) {\n                        require_once($file);\n                    }\n                }\n\n                $something = call_user_func_array($do['callback'], $passed_args);\n            }\n\n            return $something;\n        } else {\n            echo \"No API Method Found.\";\n        }\n\n    }\n\n    /**\n     * Convienence method for generating metrics\n     *\n     * @param unknown_type $entity_name\n     * @return unknown\n     */\n    public static function metricFactory($metric_name, $params = array()) {\n\n        if (!strpos($metric_name, '.')) {\n            $s = owa_coreAPI::serviceSingleton();\n            $metric_name = $s->getMetricClasses($metric_name);\n        }\n\n        if (!class_exists('owa_metric')) {\n            require_once(OWA_BASE_CLASSES_DIR.'owa_metric.php');\n        }\n\n        return owa_coreAPI::moduleSpecificFactory($metric_name, 'metrics', '', $params, false);\n    }\n\n    /**\n     * Returns a consolidated list of admin/options panels from all active modules\n     *\n     * @return array\n     */\n    public static function getAdminPanels() {\n\n        $panels = array();\n\n        $service = owa_coreAPI::serviceSingleton();\n\n        foreach ($service->modules as $k => $v) {\n            $v->registerAdminPanels();\n            $module_panels = $v->getAdminPanels();\n            if ($module_panels) {\n                foreach ($module_panels as $key => $value) {\n\n                    $panels[$value['group']][] = $value;\n                }\n            }\n        }\n\n        return $panels;\n    }\n\n    /**\n     * Returns a consolidated list of nav links from all active modules for a particular view\n     * and named navigation element.\n     *\n     * @param string nav_name the name of the navigation element that you want links for\n     * @param string sortby the array value to sort the navigation array by\n     * @return array\n     */\n    public static function getNavigation($view, $nav_name, $sortby ='order') {\n\n        $links = array();\n\n        $service = owa_coreAPI::serviceSingleton();\n\n        foreach ($service->modules as $k => $v) {\n\n            // If the module does not have nav links, register them. needed in case this function is called twice on\n            // same view.\n            if (empty($v->nav_links)):\n                $v->registerNavigation();\n            endif;\n\n            $module_nav = $v->getNavigationLinks();\n\n\n            if (!empty($module_nav)) {\n                // assemble the navigation for a specific view's named navigation element'\n                foreach ($module_nav as $key => $value) {\n\n                    $links[$value['view']][$value['nav_name']][] = $value;\n                }\n            }\n\n        }\n\n        //print_r($links[$view][$nav_name]);\n        if (!empty($links[$view][$nav_name])):\n               // sort the array\n               usort($links[$view][$nav_name], function($a, $b) use ($sortby) {\n                return strnatcmp($a[$sortby], $b[$sortby]);\n            });\n\n            return $links[$view][$nav_name];\n        else:\n            return false;\n        endif;\n\n    }\n\n    public static function getGroupNavigation($group_name, $sortby ='order') {\n\n        $links = array();\n\n        $service = owa_coreAPI::serviceSingleton();\n\n        foreach ($service->modules as $k => $v) {\n\n            // If the module does not have nav links, register them. needed in case this function is called twice on\n            // same view.\n            if ( empty( $v->nav_links ) ) {\n\n                $v->registerNavigation();\n            }\n\n            $module_nav = $v->getNavigationLinks();\n\n            if ( $module_nav ) {\n\n                //loop through returned nav array\n                foreach ( $module_nav as $group => $nav_links ) {\n\n                    foreach ( $nav_links as $subgroup => $link ) {\n\n                        // check to see if group exists\n                        if ( array_key_exists( $group, $links ) ) {\n\n                            // check to see if subgroup is already present in the main array\n                            if ( array_key_exists( $subgroup, $links[ $group ] ) ) {\n                                // merge various elements?? not now.\n\n                                //check to see if there is an existing set of subgroup links\n                                if ( array_key_exists( 'subgroup', $links[ $group ][ $subgroup ] ) ) {\n                                    // if so, merge the subgroups\n                                    $links[ $group ][ $subgroup ][ 'subgroup' ] = array_merge( $links[ $group ][ $subgroup ][ 'subgroup' ], $link[ 'subgroup' ] );\n                                } else {\n\n                                }\n                            } else {\n                                // else populate the link\n                                $links[$group][$subgroup] = $link;\n                            }\n\n                        } else {\n                            $links[$group][$subgroup] = $link;\n                        }\n                    }\n\n                }\n            }\n        }\n\n        if ( isset( $links[$group_name] ) ) {\n\n            return $links[$group_name];\n        }\n    }\n\n    /**\n     * @Todo REMOVE\n     */\n    public static function getNavSort($a, $b) {\n\n        return strnatcmp($a['order'], $b['order']);\n    }\n\n\n    public static function getActiveModules() {\n\n        $c = owa_coreAPI::configSingleton();\n\n        $config = $c->config->get('settings');\n\n\n        $active_modules = array();\n\n        foreach ($config as $k => $module) {\n\n            if ( isset($module['is_active']) && $module['is_active'] == true) {\n                $active_modules[] = $k;\n            }\n        }\n\n        return $active_modules;\n\n    }\n    \n    public static function getPresentModules() {\n\t    $path = OWA_DIR.'modules';\n\t    // Check directory exists or not\n\t\tif( file_exists($path) && is_dir($path)) {\n        \t// Scan the files in this directory\n\t\t\t$result = scandir($path);\n        \n\t\t\t// Filter out the current (.) and parent (..) directories\n\t\t\t$files = array_diff($result, array('.', '..', 'index.php'));\n\t\t\towa_coreAPI::debug('Modules present are: ');\n\t\t\towa_coreAPI::debug( $files );\n\t\t\t\n\t\t\treturn $files;\n\t\t}\n    }\n\n    public static function getModulesNeedingUpdates() {\n\n        $service = owa_coreAPI::serviceSingleton();\n\n        return $service->getModulesNeedingUpdates();\n    }\n\n    /**\n     * Invokes controller to perform controller\n     *\n     * @param $action string\n     *\n     */\n    public static function performAction( $action, $params = array() ) {\n\n        $service = owa_coreAPI::serviceSingleton();\n\t\t\t\n\t\t// Load action controller from service map which uses the 'module.action' convention\t\n\t\t$action_map = $service->getMapValue('actions', $action );\n\t\t\t\n\t\t// create the controller object\n        if ( $action_map ) {\n\t    \n            $controller = owa_lib::simpleFactory( $action_map['class_name'], $action_map['file'], $params );\n        \n        } else {\n        \n            // attempt to use old style convention\n            $controller = owa_coreAPI::moduleFactory($action, 'Controller', $params);\n        }\n\t\t\n\t\treturn owa_coreAPI::runController( $controller );\n    }\n    \n    public static function runController( $controller ) {\n\t    \n\t    if ( ! $controller || ! method_exists( $controller, 'doAction' ) ) {\n\n            owa_coreAPI::debug(\"Class is not a controller. no doAction method found.\");\n            return;\n        }\n\n        // call the doAction method which is part of the abstract controller class\n        // inherited by all other controller classes\n        $data = $controller->doAction();\n\n        // Display view if controller calls for one.\n        if ( ! empty( $data['view'] ) || ! empty( $data['action'] ) ) {\n\n            // Redirect to a view\n            if ( $data['view_method'] == 'redirect' ) {\n\n                return owa_lib::redirectToView( $data );\n\n            // return an image . Will output headers and binary data.\n            } elseif ( $data['view_method'] == 'image' ) {\n\n                return owa_coreAPI::displayImage( $data );\n\n            } else {\n\n                return owa_coreAPI::displayView( $data );\n            }\n\n        } elseif( ! empty( $data['do'] ) ) {\n\n            return owa_lib::redirectToView( $data );\n        }\n    }\n\n    /**\n     * Logs an event to the event queue\n     *\n     * take an owa_event object as a message.\n     *\n     * @param string $event_type\n     * @param object $message\n     * @return boolean\n     */\n    public static function logEvent( $event_type, $message = '') {\n\n        owa_coreAPI::debug(\"Logging new event $event_type\");\n\t\t\n        // Check to see if named users should be logged\n        if (owa_coreAPI::getSetting('base', 'log_named_users') != true) {\n            $cu = owa_coreAPI::getCurrentUser();\n            $cu_user_id = $cu->getUserData('user_id');\n\n            if( ! empty( $cu_user_id ) ) {\n\t\t\t\towa_coreAPI::debug(\"Not logging named user.\");\n                return false;\n            }\n        }\n\n\t\t// backwads compatability with old style messages\n\t\t// @todo is this needed anymore?\n        $class= 'owa_event';\n        \n        if ( ! ( $message instanceof $class ) ) {\n\t        \n            $event = owa_coreAPI::supportClassFactory( 'base', 'event' );\n            $event->setProperties( $message );\n            $event->setEventType( $event_type );\n            \n        } else {\n\t        \n            $event = $message;\n        }\n        \n        $service = owa_coreAPI::serviceSingleton();\n        \n        // Tracking Event processing STAGE 1\n        // sets any necessary environmental properties from SERVER global\n        $teh = owa_coreAPI::getInstance( 'owa_trackingEventHelpers', OWA_BASE_CLASS_DIR.'trackingEventHelpers.php');\n        $environmentals = $service->getMap( 'tracking_properties_environmental' );\n        $teh->setTrackerProperties( $event, $environmentals );\n\t\t\n        // do not log if the do not log property is set on the event.\n        if ($event->get('do_not_log')) {\n            return false;\n        }\n        \n        // do not log if the request is robotic\n        owa_coreAPI::debug(\"Testing to see if event was generated by a robot\");\n        owa_coreAPI::debug(\"User Agent: \". $message->get('HTTP_USER_AGENT') );\n        \n        $bcap = $service->getBrowscap( $message->get('HTTP_USER_AGENT') );\n       \n        if ( ! owa_coreAPI::getSetting('base', 'log_robots') ) {\n\n            if ( $bcap->robotCheck() ) {\n\t            \n                owa_coreAPI::debug(\"ABORTING: request appears to be from a robot\");\n                owa_coreAPI::setRequestParam('is_robot', true);\n                \n                return;\n            }\n        }\n\n        // check to see if IP should be excluded\n        if ( owa_coreAPI::isIpAddressExcluded( $event->get('ip_address') ) ) {\n\t        \n            owa_coreAPI::debug(\"Not logging event. IP address found in exclusion list.\");\n            \n            return false;\n        }\n        \n        // queue for later or process event straight away\n        if ( owa_coreAPI::getSetting( 'base', 'queue_events' ) ||\n             owa_coreAPI::getSetting( 'base', 'queue_incoming_tracking_events' ) ) {\n\n            $q = owa_coreAPI::getEventQueue( 'incoming_tracking_events' );\n            owa_coreAPI::debug('Queuing '.$event->getEventType().' event with properties: '.print_r($event->getProperties(), true ) );\n            $q->sendMessage( $event );\n\n        } else {\n\n            // lookup which event processor to use to process this event type\n            $processor_action = owa_coreAPI::getEventProcessor( $event->getEventType() );\n           \n\t\t\towa_coreAPI::debug('About to perform action: '.$processor_action);\n\t\t\towa_coreAPI::debug($event);\n\t\t\t\n\t\t\treturn owa_coreAPI::performAction( $processor_action, array( 'event' => $event ) );\n        }\n    }\n\n    public static function getInstance( $class, $path ) {\n\n        if ( ! class_exists( $class ) ) {\n\n            require_once( $path );\n        }\n\n        return $class::getInstance();\n    }\n\n    public static function displayImage($data) {\n\n        header('Content-type: image/gif');\n        header('P3P: CP=\"'.owa_coreAPI::getSetting('base', 'p3p_policy').'\"');\n        header('Expires: Sat, 22 Apr 1978 02:19:00 GMT');\n        header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n        header('Cache-Control: no-store, no-cache, must-revalidate');\n        header('Pragma: no-cache');\n\n        echo owa_coreAPI::displayView($data);\n    }\n\n\n    /**\n     * Displays a View without user authentication. Takes array of data as input\n     *\n     * @param array $data\n     * @param string $viewfile a specific view file to use\n     * @return string\n     *\n     */\n    public static function displayView($data, $viewfile = '') {\n\n        if (empty($viewfile)):\n            $viewfile = $data['view'];\n        endif;\n\n        $view = owa_coreAPI::moduleFactory($viewfile, 'View');\n      \n        $view->setData($data);\n        return $view->assembleView($data);\n\n    }\n\n    public static function displaySubView($data, $viewfile = '') {\n\n        if (empty($viewfile)):\n            $viewfile = $data['view'];\n        endif;\n\n        $view =  owa_coreAPI::subViewFactory($viewfile);\n\n        return $view->assembleView($data);\n\n    }\n\n    /**\n     * Strip a URL of certain GET params\n     * @depricated\n     * @return string\n     * @todo REMOVE\n     */\n    function stripDocumentUrl($url) {\n\n        if (owa_coreAPI::getSetting('base', 'clean_query_string')):\n\n            if (owa_coreAPI::getSetting('base', 'query_string_filters')):\n                $filters = str_replace(' ', '', owa_coreAPI::getSetting('base', 'query_string_filters'));\n                $filters = explode(',', $filters);\n            else:\n                $filters = array();\n            endif;\n\n            // OWA specific params to filter\n            array_push($filters, owa_coreAPI::getSetting('base', 'source_param'));\n            array_push($filters, owa_coreAPI::getSetting('base', 'ns').owa_coreAPI::getSetting('base', 'feed_subscription_param'));\n\n            //print_r($filters);\n\n            foreach ($filters as $filter => $value) {\n\n              $url = preg_replace(\n                '#\\?' .\n                $value .\n                '=.*$|&' .\n                $value .\n                '=.*$|' .\n                $value .\n                '=.*&#msiU',\n                '',\n                $url\n              );\n\n            }\n\n        endif;\n         //print $url;\n\n         return $url;\n\n    }\n\n    public static function getRequestParam($name) {\n\n        $service = owa_coreAPI::serviceSingleton();\n\n        return $service->request->getParam($name);\n\n    }\n\n    public static function getRequest() {\n        $service = owa_coreAPI::serviceSingleton();\n        return $service->request;\n    }\n\n    public static function setRequestParam($name, $value) {\n\n        $service = owa_coreAPI::serviceSingleton();\n        return $service->request->setParam($name, $value);\n\n    }\n\n    public static function makeTimePeriod($time_period, $params = array()) {\n\n        $period = owa_coreAPI::supportClassFactory('base', 'timePeriod');\n\n        if ( ! array_key_exists('period', $params)) {\n            $params['period'] = $time_period;\n        }\n        $period->setFromMap( $params );\n        return $period;\n    }\n\n    /**\n     * Factory method for producing validation objects\n     *\n     * @return Object\n     */\n    public static function validationFactory($class_file, $conf = array()) {\n\n        if (!class_exists('owa_validation')):\n            require_once(OWA_BASE_CLASS_DIR.'validation.php');\n        endif;\n\n        return owa_lib::factory(OWA_PLUGIN_DIR.'validations', 'owa_', $class_file, $conf, 'Validation');\n\n    }\n\n    public static function debug($msg) {\n\n        $e = owa_coreAPI::errorSingleton();\n        $e->debug($msg);\n        return;\n    }\n\n    public static function error($msg) {\n\n        $e = owa_coreAPI::errorSingleton();\n        $e->err($msg);\n        return;\n    }\n\n    public static function notice($msg) {\n\n        $e = owa_coreAPI::errorSingleton();\n        $e->notice($msg);\n    }\n\n    public static function createCookie($cookie_name, $cookie_value, $expires = 0, $path = '/; samesite=Lax', $domain = '', $secure = false) {\n\n        if ( $domain ) {\n            // sanitizes the domain\n            $domain = owa_lib::sanitizeCookieDomain( $domain );\n            \n        } else {\n\t        \n            $domain = owa_coreAPI::getSetting('base', 'cookie_domain');\n        }\n        if (is_array($cookie_value)) {\n\n            $cookie_value = owa_lib::implode_assoc('=>', '|||', $cookie_value);\n        }\n\n        // add namespace\n        $cookie_name = sprintf('%s%s', owa_coreAPI::getSetting('base', 'ns'), $cookie_name);\n\n        // debug\n        owa_coreAPI::debug(sprintf('Setting cookie %s with values: %s under domain: %s', $cookie_name, $cookie_value, $domain));\n\n        // makes cookie to session cookie only\n        if (!owa_coreAPI::getSetting('base', 'cookie_persistence')) {\n\t        \n            $expires = 0;\n        }\n\t\t\n\t\t$secure = owa_lib::isHttps();\n\t\n        // PHP 7.3 has a different function signature.\n        // @todo refactor usage to clean up once php 7.3 is min requirment.\n        if (PHP_VERSION_ID < 70300) {\n\t        \n\t        setcookie($cookie_name, $cookie_value, $expires, $path, $domain, $secure);\n\t        \n\t    } else {\n\t\t    \t\n\t\t\t$options = [\n\t\t        \n\t\t        'expires' \t=> $expires,\n                'path' \t\t=> '/',\n                'samesite' \t=> 'Lax',\n                'domain' \t=> $domain,\n                'secure' \t=> $secure\n\t        ];\n\t        \n\t        setcookie($cookie_name, $cookie_value, $options);\n\t    }\n    }\n\n    public static function deleteCookie($cookie_name, $path = '/', $domain = '') {\n\n        return owa_coreAPI::createCookie($cookie_name, false, time()-3600*25, $path, $domain);\n    }\n\n    public static function registerStateStore($name, $expiration, $length = '', $format = '', $type = 'cookie', $cdh_required = '') {\n\n        $service = owa_coreAPI::serviceSingleton();\n        return $service->request->state->registerStore( $name, $expiration, $length, $format, $type, $cdh_required );\n    }\n\n    public static function setState($store, $name, $value, $store_type = '', $is_perminent = '') {\n\n        $service = owa_coreAPI::serviceSingleton();\n        return $service->request->state->set($store, $name, $value, $store_type, $is_perminent);\n    }\n\n    public static function getState($store, $name = '') {\n\n        $service = owa_coreAPI::serviceSingleton();\n        return $service->request->state->get($store, $name);\n    }\n\n    // depricated\n    public static function getStateParam($store, $name = '') {\n\n        return owa_coreAPI::getState($store, $name);\n    }\n\n    public static function getServerParam($name = '') {\n\n        $service = owa_coreAPI::serviceSingleton();\n        return $service->request->getServerParam($name);\n    }\n\n    public static function clearState($store, $name = '') {\n\n        $service = owa_coreAPI::serviceSingleton();\n        $service->request->state->clear($store, $name);\n\n    }\n\n    public static function getEventProcessor($event_type) {\n\n        $service = owa_coreAPI::serviceSingleton();\n        $processor = $service->getMapValue('event_processors', $event_type);\n\n        if (empty($processor)) {\n\n            $processor = 'base.processEvent';\n        }\n\n        return $processor;\n    }\n\n    /**\n     * Retrieves any registered build packages\n     *\n     * @return array\n     */\n    public static function getBuildPackages() {\n\n        $service = owa_coreAPI::serviceSingleton();\n        $map = $service->getMap('build_packages');\n\n        if ( ! $map ) {\n            $map = array();\n        }\n\n        return $map;\n    }\n\n    /**\n     * Handles OWA internal page/action requests\n     *\n     * @return unknown\n     */\n    public static function handleRequest($caller_params = null, $action = '') {\n\n        static $init;\n\n        $service = owa_coreAPI::serviceSingleton();\n        // Override request parsms with those passed by caller\n        if (!empty($caller_params)) {\n            $service->request->mergeParams($caller_params);\n        };\n\n        $params = $service->request->getAllOwaParams();\n\n        if ($init != true) {\n            owa_coreAPI::debug('Handling request with params: '. print_r($params, true));\n        }\n\n        // backwards compatability with old style view/controler scheme\n        // still needed??\n        if (array_key_exists('view', $params)) {\n            // its a view request so the only data is in whats in the params\n            $init = true;\n            return owa_coreAPI::displayView($params);\n        }\n\n        if (empty($action)) {\n            $action = owa_coreAPI::getRequestParam('action');\n            if (empty($action)) {\n                $action = owa_coreAPI::getRequestParam('do');\n\n                if (empty($action)) {\n                    $action = owa_coreAPI::getSetting('base', 'start_page');\n                    $params['do'] = $action;\n                }\n            }\n        }\n\t\t\n\t\t\n\t\t// REST API Requests\n\t\t// Lookup controler for REST API route.\n\t\tif ( owa_coreAPI::getSetting( 'base', 'request_mode' ) === 'rest_api' ) {\n\t\t\t\n\t\t\t// get request method\n\t\t\t$request_method = $service->request->getRequestType();\n\t\t\t\n\t\t\t// check to see if this is a CORS pre-flight Request\n\t\t\tif ($request_method == 'OPTIONS') {\n\t\t\t\t\n\t\t\t\t$controller = owa_lib::simpleFactory( 'owa_corsPreflightController', 'controllers/corsPreflightController.php', [] );\t\t\t\t\t\n\t\t\t\treturn owa_coreAPI::runController( $controller );\n\t\t\t}\n\t\t\t\n\t\t\t// check for rewriten rest params and set module, version, and do params from that\n\t\t\t$rest_params = self::getRequestParam('rest_params');\n\t\t\t\n\t\t\tif ( $rest_params ) {\n\t\t\t\n\t\t\t\t$rest_params = explode('/', $rest_params);\n\t\t\t\tself::debug( 'exploding raw REST params:');\n\t\t\t\tself::debug( $rest_params );\n\t\t\t\n\t\t\t\tif ( count( $rest_params ) >= 3 ) {\n\t\t\t\t\t\n\t\t\t\t\t$params['module'] = $rest_params[0];\n\t\t\t\t\t$params['version'] = $rest_params[1];\n\t\t\t\t\t$params['do'] = $rest_params[2];\n\t\t\t\t\t$action = $params['do'];\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\towa_coreAPI::debug('Generating REST API route controller...');\n\t\t\t\n\t\t\tif ( owa_lib::keyExistsNotEmpty( 'module', $params ) && owa_lib::keyExistsNotEmpty( 'version', $params ) ) {\n\t\t\t\n\t\t\t\t$route = self::lookupRestRoute( $request_method, $params['module'], $params['version'], $action );\n\t\t\t\t\n\t\t\t\tif ( $route ) {\n\t\t\t\t\t\n\t\t\t\t\t// set the remainer of the rewritten rest params\n\t\t\t\t\t\n\t\t\t\t\tif ( $rest_params ) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t// slice off the first three params which have already been set\n\t\t\t\t\t\t$rest_params = array_slice($rest_params, 3);\n\t\t\t\t\t\t\n\t\t\t\t\t\tforeach ( $rest_params as $k => $v) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$params[ $route['conf'][ 'params_order' ][$k] ] = $rest_params[ $k ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$params['rest_route'] = $route;\n\t\t\t\t\t$controller = owa_lib::simpleFactory( $route['class_name'], $route['file'], $params );\t\t\t\t\t\n\t\t\t\t\treturn owa_coreAPI::runController( $controller );\n\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\towa_coreAPI::debug('No REST API route found');\n\t\t\t\t\treturn;\t\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\towa_coreAPI::debug('Could not generate controller because no version param was on request.');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\t\n        $init = true;\n        owa_coreAPI::debug('About to perform action: '.$action);\n        return owa_coreAPI::performAction($action, $params);\n\n    }\n    \n    public static function lookupRestRoute( $request_method, $module, $version, $do ) {\n\t    \n\t    if ( ! empty( $request_method )\n\t    \t&& ! empty( $version )\n\t    \t&& ! empty( $do )\n\t    \t&& ! empty( $module )\n\t    ){\n\t\t    \n\t\t    $service = owa_coreAPI::serviceSingleton();\n\t\t    $route = $service->getRestApiRoute($module, $version, $do, $request_method );\n\t\t\towa_coreAPI::debug($route);\n\t\t    return $route;\n\t    }\n    }\n\n    public static function isUpdateRequired() {\n\n        $service = owa_coreAPI::serviceSingleton();\n        return $service->isUpdateRequired();\n    }\n\n    /**\n     * @return array\n     */\n    public static function getSitesList() {\n        $db = owa_coreAPI::dbSingleton();\n        $db->selectFrom('owa_site');\n        $db->selectColumn('*');\n        $sites = $db->getAllRows();\n\n        if ( ! $sites ) {\n            $sites = array();\n        }\n        return $sites;\n    }\n\t\n\t\n    public static function profile($that = '', $function = '', $line = '', $msg = '') {\n\n        return;\n    }\n\n    public static function profileDisplay() {\n        \n\t\treturn;\n    }\n\n    public static function getEventDispatch() {\n\n        if (! class_exists( 'owa_eventDispatch' ) ) {\n            require_once(OWA_BASE_CLASS_DIR.'eventDispatch.php');\n        }\n\n        return owa_eventDispatch::get_instance();\n\n    }\n\n    public static function getEventQueue( $name ) {\n\n        static $queues;\n\n        // make queue if needed\n        if ( ! isset( $queues[ $name ] ) ) {\n\n            // get queue config\n            $s = owa_coreAPI::serviceSingleton();\n            $map = $s->getMapValue('event_queues', $name);\n\n            if ( $map ) {\n\n                $implementation = $s->getMapValue( 'event_queue_types', $map['queue_type'] );\n\n                if ( $implementation\n                     && isset( $implementation[0] )\n                     && isset( $implementation[1] )\n                ) {\n                    owa_coreAPI::debug(print_r($implementation, true));\n                    $queues[ $name ] = owa_lib::simpleFactory( $implementation[0], $implementation[1], $map );\n\n                } else {\n\n                    throw new Exception(\"No event queue by that type found.\");\n                }\n\n            } else {\n\n                throw new Exception(\"No configuration found for event queue $name.\");\n            }\n        }\n            // return queue\n        return $queues[ $name ];\n    }\n\n    public static function getCliCommandClass($command) {\n\n        $s = owa_coreAPI::serviceSingleton();\n        return $s->getCliCommandClass($command);\n    }\n\n    public static function getGeolocationFromIpAddress($ip_address) {\n\n        $s = owa_coreAPI::serviceSingleton();\n        $s->geolocation->getGeolocationFromIp($ip_address);\n        return $s->geolocation;\n    }\n\n    public static function getNonceTimeInterval() {\n\n        return  ceil( time() / owa_coreAPI::getSetting( 'base', 'nonce_expiration_period') );\n    }\n\n    public static function createNonce($action) {\n\n        $time = owa_coreAPI::getNonceTimeInterval();\n        $cu = owa_coreAPI::getCurrentUser();\n        $user_id = $cu->getUserData( 'user_id' );\n\n        $full_nonce = $time . $action . $user_id . 'owa_nonce';\n\n        $nonce = substr( owa_coreAPI::saltedHash($full_nonce, 'nonce'), -12, 10);\n\n        return $nonce;\n    }\n    \n    public static function createRestApiNonce( $version, $module, $do ) {\n        \n        return self::createNonce( $version . $module . $do );\n    }\n\n    public static function saltedHash( $data, $scheme, $hash_type = 'md5' ) {\n\n        $salt = owa_coreAPI::getSalt( $scheme );\n        return owa_lib::hash( $hash_type, $data, $salt );\n    }\n\n\n\n    public static function getSalt( $scheme ) {\n\n        static $cached_salts;\n\n        $scheme = strtoupper($scheme);\n\n        if ( ! $cached_salts ) {\n\n            $cached_salts = array();\n            $ns = strtoupper( owa_coreAPI::getSetting('base', 'ns') );\n\n            foreach (array('NONCE', 'SECRET', 'AUTH') as $f ) {\n\n                foreach (array('KEY', 'SALT') as $s ) {\n\n                    $const = sprintf(\"%s%s_%s\", $ns, $f, $s);\n\n                    if ( ! defined ( \"$const\" ) ) {\n                        continue;\n                    } else {\n\n                        $cached_salts[ $f.'_'.$s ] = constant(\"$const\");\n                    }\n                }\n            }\n        }\n\n\n        $key = '';\n        $salt = '';\n\n        if (array_key_exists( $scheme.'_KEY', $cached_salts ) ) {\n\n            $key = $cached_salts[ $scheme.'_KEY' ];\n        }\n\n        if (array_key_exists( $scheme.'_SALT', $cached_salts ) ) {\n\n            $salt = $cached_salts[ $scheme.'_SALT' ];\n        }\n\n        return $key . $salt;\n    }\n\n    public static function secureRandomString( $length, $special_chars = true, $more_special_chars = true ) {\n\n        $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n        if ( $special_chars )\n            $chars .= '!@#$%^&*()';\n        if ( $more_special_chars )\n            $chars .= '-_ []{}<>~`+=,.;:/?|';\n\n        $password = '';\n        for ( $i = 0; $i < $length; $i++ ) {\n            $password .= substr($chars, owa_coreAPI::random(0, strlen($chars) - 1), 1);\n        }\n\n        return $password;\n    }\n\n    public static function random($min, $max) {\n\n        static $rnd_value;\n\n        if ( strlen($rnd_value) < 8 ) {\n\n            $notrandom = false;\n\n            if ( function_exists( 'openssl_random_pseudo_bytes' ) ) {\n\n                $rnd_value = bin2hex(openssl_random_pseudo_bytes(32, $cstrong));\n\n                if ( ! $cstrong ) {\n\n                    $notrandom = true;\n                }\n\n            } else {\n\n                $notrandom = true;\n            }\n\n            if ( $notrandom ) {\n\n                $seed = microtime();\n                $rnd_value = md5( uniqid(microtime() . mt_rand(), true ) . $seed );\n                $rnd_value .= sha1($rnd_value);\n                $rnd_value .= sha1($rnd_value . $seed);\n\n            }\n\n            //$seed = md5($seed . $rnd_value);\n        }\n        // Take the first 8 digits for our value\n        $value = substr($rnd_value, 0, 8);\n\n        // Strip the first eight, leaving the remainder for the next call to random.\n        $rnd_value = substr($rnd_value, 8);\n\n        $value = abs(hexdec($value));\n\n        // Some misconfigured 32bit environments (Entropy PHP, for example) truncate integers larger than PHP_INT_MAX to PHP_INT_MAX rather than overflowing them to floats.\n        $max_random_number = 3000000000 === 2147483647 ? (float) \"4294967295\" : 4294967295; // 4294967295 = 0xffffffff\n\n        // Reduce the value to be within the min - max range\n        if ( $max != 0 )\n            $value = $min + ( $max - $min + 1 ) * $value / ( $max_random_number + 1 );\n\n        return abs(intval($value));\n    }\n\n    public static function summarize($map) {\n\n        $entity = owa_coreAPI::entityFactory($map['entity']);\n        $db = owa_coreAPI::dbSingleton();\n        $db->selectFrom($entity->getTableName(), $entity->getTableAlias());\n\n        foreach ($map['columns'] as $col => $action) {\n\n            switch ($action) {\n\n                case 'sum':\n                    $col_def = sprintf(\"SUM(%s)\", $col);\n                    $name = $col.'_sum';\n                    break;\n                case 'count':\n                    $col_def = sprintf(\"COUNT(%s)\", $col);\n                    $name = $col.'_count';\n                    break;\n                case 'count_distinct':\n                    $col_def = sprintf(\"COUNT(distinct %s)\", $col);\n                    $name = $col.'_dcount';\n                    break;\n                case 'max':\n                    $col_def = sprintf(\"MAX(%s)\", $col);\n                    $name = $col.'_max';\n                    break;\n            }\n\n            $db->selectColumn($col_def, $name);\n        }\n\n        foreach ($map['constraints'] as $con_col => $con_value) {\n\n            if ( is_array( $con_value ) ) {\n                $db->where($con_col, $con_value['value'], $con_value['operator']);\n            } else {\n                $db->where($con_col, $con_value);\n            }\n        }\n\n        $ret = $db->getOneRow();\n        return $ret;\n    }\n\n    public static function getJsTrackerTag( $site_id, $options = array() ) {\n\n        if ( ! class_exists( 'owa_template' ) ) {\n            require_once(OWA_BASE_CLASSES_DIR.'owa_template.php');\n        }\n\n        $t = new owa_template();\n\n        $t->set( 'site_id', $site_id );\n        $cmds = owa_coreAPI::filter( 'tracker_tag_cmds', array() );\n        $t->set( 'cmds', $cmds );\n        $t->set('options', $options);\n        $t->set_template('js_log_tag.tpl');\n        return $t->fetch();\n    }\n\n    public static function activateModule( $module_name ) {\n\n        if ( $module_name ) {\n\n            $m = owa_coreAPI::moduleClassFactory($module_name);\n            return $m->activate();\n        }\n    }\n\n    public static function deactivateModule( $module_name ) {\n\n        if ( $module_name ) {\n\n            $s = owa_coreAPI::serviceSingleton();\n            $m = $s->getModule($module_name);\n            return $m->deactivate();\n        }\n    }\n\n    public static function installModule( $module_name ) {\n\n        if ($module_name) {\n\n            $m = owa_coreAPI::moduleClassFactory($module_name);\n            $status = $m->install();\n            return $status;\n        }\n    }\n\n    public static function generateInstanceSpecificHash() {\n\n        if ( defined( 'OWA_SECRET' ) ) {\n            $salt = OWA_SECRET;\n        } else {\n            $salt = '';\n        }\n\n        if ( defined( 'OWA_DB_USER' ) ) {\n            $salt .= OWA_DB_USER;\n        }\n\n        if ( defined( 'OWA_DB_PASSWORD' ) ) {\n            $salt .= OWA_DB_PASSWORD;\n        }\n\n        return md5( $salt );\n    }\n\n    public static function getAllDimensions() {\n\n        $s = owa_coreAPI::serviceSingleton();\n\n        $dims = $s->dimensions;\n\n        foreach ( $s->denormalizedDimensions as $k => $entity_dims ) {\n            foreach ($entity_dims as $entity => $dedim) {\n                $dims[$k] = $dedim;\n            }\n        }\n\n        return $dims;\n    }\n\n    public static function getAllMetrics() {\n\n        $s = owa_coreAPI::serviceSingleton();\n        return $s->metrics;\n    }\n\n    public static function getGoalManager( $siteId ) {\n\n        static $gm;\n\n        if ( ! $gm ) {\n\n            $gm = array();\n        }\n\n        if ( ! isset( $gm[$siteId] ) )  {\n            $gm[ $siteId ] = owa_coreAPI::supportClassFactory('base', 'goalManager', $siteId);\n        }\n\n        return $gm[$siteId];\n    }\n\n    public static function getRequestTimestamp() {\n\n        $r = owa_coreAPI::requestContainerSingleton();\n        return $r->getTimestamp();\n    }\n\n    public static function isEveryoneCapable( $capability ) {\n\n        $caps = owa_coreAPI::getCapabilities('everyone');\n\n        if ( in_array( $capability, $caps ) ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static function getCurrentUrl() {\n\t    \n        $r = owa_coreAPI::requestContainerSingleton();\n        return $r->getCurrentUrl();\n    }\n\n    public static function isIpAddressExcluded( $ip_address ) {\n\n        // do not log if ip address is on the do not log list\n        $ips = owa_coreAPI::getSetting( 'base', 'excluded_ips' );\n        \n        if ( $ips ) {\n\t        \n\t        owa_coreAPI::debug('Excluded ip address list: '.$ips);\n\n            $ips = trim( $ips );\n\n            if ( strpos( $ips, ',' ) ) {\n                $ips = explode( ',', $ips );\n            } else {\n                $ips = array( $ips );\n            }\n\n            foreach( $ips as $ip ) {\n                $ip = trim( $ip );\n                if ( $ip_address === $ip ) {\n                    owa_coreAPI::debug(\"Request is from excluded ip address: $ip.\");\n                    return true;\n                }\n            }\n        }\n    }\n    \n    static function loadConf( $file_name, $filter_name = '' ) {\n\t    \n\t    $conf_file = OWA_CONF_DIR . $file_name;\n\t    \n\t    if ( file_exists( $conf_file ) ) {\n\t    \n\t    \t$conf = include( $conf_file);\n\t    }\n\t    \n\t    $sup_file = OWA_DATA_DIR .  $file_name;\n\t    \n\t    if ( file_exists( $sup_file ) ) {\n\t\t    \n\t\t    $sup_conf = include( $sup_file );\n\t\t    \n\t\t    if ( is_array( $sup_conf) ) {\n\t\t    \n\t\t    \t$conf = array_merge( $conf, $sup_conf );\n\t\t    }\n\t    }\n\t    \n\t    // see generic filter name for filtering the final conf array\n\t    if ( ! $filter_name ) {\n\t\t    \n\t\t    $filter_name = 'conf.' . $file_name;\n\t    }\n\t    \n\t    return owa_coreAPI::filter( $filter_name, $conf );\n    }\n\n    /**\n     * Attaches an event handler to the event queue\n     *\n     * @param array $event_name\n     * @param string $handler_name\n     * @return boolean\n     */\n    public static function registerFilter( $filter_name, $callback, $priority = 10 ) {\n\n        $ed = owa_coreAPI::getEventDispatch();\n        $ed->attachFilter($filter_name, $callback, $priority);\n    }\n\n    public static function filter( $filter_name, $value ) {\n\n        $ed = owa_coreAPI::getEventDispatch();\n        return $ed->filter( $filter_name, $value );\n    }\n    \n    public static function loadEntitiesFromArray( $items, $entity_name ) {\n\t    \n\t    $set = [];\n\t    \n\t    if ( $items ) {\n\t\t    \n\t\t    foreach ($items as $item ) {\n\t\t\t    \n\t\t\t    $entity = owa_coreAPI::entityFactory( $entity_name );\n\t\t\t    $entity->setProperties( $item );\n\t\t\t    $set[] = $entity;\n\t\t\t    \n\t\t    }\n\t    }\n\t    \n\t    return $set;\n    }\n    \n    public static function signRequestUrl( $url, $apiKey ) {\n\t    \n\t    $auth = owa_auth::get_instance();\n\t    \n\t    $signature = $auth->generateSignature( $url, $apiKey );\n\t    \n\t    $url .= '&owa_signature=' . $signature;\n\t    \n\t    return $url;\n    }\n\n}\n\n?>\n"
        },
        {
          "name": "owa_db.php",
          "type": "blob",
          "size": 25.26953125,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\nrequire_once(OWA_BASE_DIR.'/owa_base.php');\n\n/**\n * Database Connection Class\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\nclass owa_db extends owa_base {\n\n    /**\n     * Database Connection\n     *\n     * @var object\n     */\n    var $connection;\n\n    var $connectionParams;\n\n    /**\n     * Number of queries\n     *\n     * @var integer\n     */\n    var $num_queries;\n\n    /**\n     * Raw result object\n     *\n     * @var object\n     */\n    var $new_result;\n\n    /**\n     * Rows\n     *\n     * @var array\n     */\n    var $result;\n\n    /**\n     * Caller Params\n     *\n     * @var array\n     */\n    var $params = array();\n\n    /**\n     * Status of selecting a databse\n     *\n     * @var boolean\n     */\n    var $database_selection;\n\n    /**\n     * Status of connection\n     *\n     * @var boolean\n     */\n    var $connection_status;\n\n    /**\n     * Number of rows in result set\n     *\n     * @var integer\n     */\n    var $num_rows;\n\n    /**\n     * Number of rows affected by insert/update/delete statements\n     *\n     * @var integer\n     */\n    var $rows_affected;\n\n    /**\n     * Microtime Start of Query\n     *\n     * @var unknown_type\n     */\n    var $_start_time;\n\n    /**\n     * Total Elapsed time of query\n     *\n     * @var unknown_type\n     */\n    var $_total_time;\n\n    /**\n     * Storage Array for components of sql queries\n     *\n     * @var array\n     */\n    var $_sqlParams = array();\n\n    /**\n     * Sql Statement\n     *\n     * @var string\n     */\n    var $_sql_statement;\n\n    /**\n     * Last Sql Statement\n     *\n     * @var string\n     */\n    var $_last_sql_statement;\n\n    function __construct($db_host, $db_port, $db_name, $db_user, $db_password, $open_new_connection = true, $persistant = false) {\n\n        $this->connectionParams = array('host' => $db_host,\n                                        'port' => $db_port,\n                                         'user' => $db_user,\n                                         'password' => $db_password,\n                                         'name' => $db_name,\n                                         'open_new_connection' => $open_new_connection,\n                                         'persistant' => $persistant);\n                                                                          \n        return parent::__construct();\n    }\n\n    function __destruct() {\n\n        if ( $this->isConnectionEstablished() ) {\n\n            $this->close();\n        }\n    }\n\n    function connect() {\n\n\n        return false;\n    }\n\n    function pconnect() {\n\n        return false;\n    }\n\n    function close() {\n\n        return false;\n    }\n\n    function isConnectionEstablished() {\n\n        return $this->connection_status;\n    }\n\n    function getConnectionParam($name) {\n\n        if (array_key_exists($name, $this->connectionParams)) {\n            return $this->connectionParams[$name];\n        }\n    }\n\n    /**\n     * Prepare string\n     *\n     * @param string $string\n     * @return string\n     */\n    function prepare_string($string) {\n\n        $chars = array(\"\\t\", \"\\n\");\n        return str_replace($chars, \" \", $string);\n    }\n\n    /**\n     * Starts the query microtimer\n     *\n     */\n    function _timerStart() {\n\n      $mtime = microtime();\n      //$mtime = explode(' ', $mtime);\n      //$this->_start_time = $mtime[1].substr(round($mtime[0], 4), 1);\n    $this->_start_time = microtime();\n    return;\n    }\n\n    /**\n     * Ends the query microtimer and populates $this->_total_time\n     *\n     */\n    function _timerEnd() {\n\n        $mtime = microtime();\n        //$mtime = explode(\" \", $mtime);\n        //$endtime = $mtime[1].substr(round($mtime[0], 4), 1);\n        $endtime = microtime();\n        //$this->_total_time = bcsub($endtime, $this->_start_time, 4);\n        $this->_total_time = number_format(((substr($endtime,0,9)) + (substr($endtime,-10)) - (substr($this->_start_time,0,9)) - (substr($this->_start_time,-10))),6);\n\n        return;\n\n    }\n\n    function selectColumn($name, $as = '') {\n\n        if (is_array($name)) {\n            $as = $name[1];\n            $name = $name[0];\n        }\n\n        $this->_sqlParams['select_values'][] = array('name' => $name, 'as' => $as);\n\n        return;\n    }\n\n    function select($name, $as = '') {\n        return $this->selectColumn($name, $as = '');\n    }\n\n    function where($name, $value, $operator = '=') {\n\n        if ( ! owa_lib::isEmpty( $value ) ) {\n\n            // hack for intentional empty value\n            if($value == ' '){\n                $value = '';\n            }\n\n            $this->_sqlParams['where'][$name] = array('name' => $name, 'value' => $value, 'operator' => $operator);\n        }\n    }\n\n    function having($name, $value, $operator = '=') {\n\n        if ( ! owa_lib::isEmpty( $value ) ) {\n\n            // hack for intentional empty value\n            if($value == ' ') {\n                $value = '';\n            }\n\n            $this->_sqlParams['having'][$name] = array('name' => $name, 'value' => $value, 'operator' => $operator);\n        }\n    }\n\n    function multiWhere($where_array = array()) {\n\n        if (!empty($where_array)):\n\n            foreach ($where_array as $k => $v) {\n                if ( ! owa_lib::isEmpty($v) ):\n\n                    if (empty($v['operator'])):\n                        $v['operator'] = '=';\n                    endif;\n\n                    $this->_sqlParams['where'][$k] = array('name' => $k, 'value' => $v['value'], 'operator' => $v['operator']);\n                endif;\n            }\n\n        endif;\n    }\n\n    function groupBy($col) {\n\n        $this->_sqlParams['groupby'][] = $col;\n        return;\n    }\n\n    function orderBy($col, $flag = '') {\n\n        $this->_sqlParams['orderby'][] = array($col, $flag);\n        return;\n    }\n\n    function order($flag) {\n\n        $this->_sqlParams['order'] = $flag;\n        return;\n    }\n\n    function limit($value) {\n\n        $this->_sqlParams['limit'] = $value;\n        return;\n    }\n\n    function offset($value) {\n\n        $this->_sqlParams['offset'] = $value;\n        return;\n    }\n\n    function set($name, $value) {\n\n        $this->_sqlParams['set_values'][] = array('name' => $name, 'value' => $value);\n        return;\n    }\n\n    function executeQuery() {\n\n        switch($this->_sqlParams['query_type']) {\n\n            case 'insert':\n\n                return $this->_insertQuery();\n\n            case 'select':\n\n                return $this->_selectQuery();\n\n            case 'update':\n\n                return $this->_updateQuery();\n\n            case 'delete':\n\n                return $this->_deleteQuery();\n\n            default:\n\n                return $this->_query();\n        }\n    }\n\n    function getAllRows() {\n\n         return $this->_selectQuery();\n    }\n\n    function getOneRow() {\n\n        $this->limit(1);\n        $ret = $this->_selectQuery();\n        return $ret[0];\n    }\n\n    function _setSql($sql) {\n        $this->_sql_statement = $sql;\n    }\n\n    function selectFrom($name, $as = '') {\n\n        if (is_array($name)) {\n            $as = $name[1];\n            $name = $name[0];\n        }\n\n        $this->_sqlParams['query_type'] = 'select';\n        $this->_sqlParams['from'][$name] = array('name' => $name, 'as' => $as);\n    }\n\n    function from( $name, $as = '' ) {\n\n        return $this->selectFrom( $name, $as );\n    }\n\n    function insertInto($table) {\n\n        $this->_sqlParams['query_type'] = 'insert';\n        $this->_sqlParams['table'] = $table;\n    }\n\n    function deleteFrom($table) {\n\n        $this->_sqlParams['query_type'] = 'delete';\n        $this->_sqlParams['table'] = $table;\n    }\n\n    function updateTable($table) {\n\n        $this->_sqlParams['query_type'] = 'update';\n        $this->_sqlParams['table'] = $table;\n    }\n\n    function _insertQuery() {\n        owa_coreAPI::profile($this, __FUNCTION__, __LINE__);\n        $params = $this->_fetchSqlParams('set_values');\n\n        $count = count($params);\n\n        $i = 0;\n\n        $sql_cols = '';\n        $sql_values = '';\n\n        foreach ($params as $k => $v) {\n\n            $sql_cols .= $v['name'];\n            $sql_values .= \"'\".$this->prepare($v['value']).\"'\";\n\n            $i++;\n\n            // Add commas\n            if ($i < $count):\n\n                $sql_cols .= \", \";\n                $sql_values .= \", \";\n\n            endif;\n        }\n        owa_coreAPI::profile($this, __FUNCTION__, __LINE__);\n        $this->_setSql(sprintf(OWA_SQL_INSERT_ROW, $this->_sqlParams['table'], $sql_cols, $sql_values));\n        owa_coreAPI::profile($this, __FUNCTION__, __LINE__);\n        $ret = $this->_query();\n        owa_coreAPI::profile($this, __FUNCTION__, __LINE__);\n        return $ret;\n\n    }\n\n    function generateSelectQuerySql() {\n\n        $cols = '';\n        $i = 0;\n        $params = $this->_fetchSqlParams('select_values');\n        $count = count($params);\n\n        foreach ($params as $k => $v) {\n\n            $cols .= $v['name'];\n\n            // Add as\n            if (!empty($v['as'])):\n\n                $cols .= ' as '.$v['as'];\n\n            endif;\n\n            // Add commas\n            if ($i < $count - 1):\n\n                $cols .= ', ';\n\n            endif;\n\n            $i++;\n\n        }\n\n        $sql = sprintf(\"SELECT %s FROM %s %s %s %s %s %s\",\n                                        $cols,\n                                        $this->_makeFromClause(),\n                                        $this->_makeWhereClause(),\n                                        $this->_makeGroupByClause(),\n                                        $this->_makeHavingClause(),\n                                        $this->_makeOrderByClause(),\n                                        $this->_makeLimitClause()\n                                        );\n        $this->_setSql($sql);\n        return $sql;\n    }\n\n    function _selectQuery() {\n\n        $this->generateSelectQuerySql();\n        return $this->_query();\n\n    }\n\n\n    function _updateQuery() {\n\n        $params = $this->_fetchSqlParams('set_values');\n\n        $count = count($params);\n\n        $i = 0;\n\n        $sql_cols = '';\n        $sql_values = '';\n        $set = '';\n\n        foreach ($params as $k => $v) {\n\n            //$sql_cols = $sql_cols.$key;\n            //$sql_values = $sql_values.\"'\".$this->prepare($value).\"'\";\n\n            // Add commas\n            if ($i != 0):\n\n                $set .= ', ';\n\n            endif;\n\n            $set .= $v['name'] .' = \\'' . $this->prepare($v['value']) . '\\'';\n\n            $i++;\n        }\n\n        $this->_setSql(sprintf(OWA_SQL_UPDATE_ROW, $this->_sqlParams['table'], $set, $this->_makeWhereClause()));\n\n        return $this->_query();\n    }\n\n    function _deleteQuery() {\n\n        $this->_setSql(sprintf(OWA_SQL_DELETE_ROW, $this->_sqlParams['table'], $this->_makeWhereClause()));\n\n        return $this->_query();\n    }\n\n    function rawQuery($sql) {\n\n        $this->_setSql($sql);\n\n        return $this->_query();\n    }\n\n    function _fetchSqlParams($sql_params_name) {\n\n        if (array_key_exists($sql_params_name, $this->_sqlParams)):\n            if (!empty($this->_sqlParams[$sql_params_name])):\n                return $this->_sqlParams[$sql_params_name];\n            else:\n                return false;\n            endif;\n        else:\n            return false;\n        endif;\n    }\n\n    function _makeWhereClause() {\n\n        $params = $this->_fetchSqlParams('where');\n\n        if ( ! empty( $params ) ) {\n\n            return $this->_makeConstraintClause('WHERE', $params);\n        }\n    }\n\n    function _makeHavingClause() {\n\n        $params = $this->_fetchSqlParams('having');\n\n        if ( ! empty( $params ) ) {\n\n            return $this->_makeConstraintClause('HAVING', $params);\n        }\n    }\n    \n    /**\n     *  Generates the SQL constraint string\n     *  @type string    'WHERE' || 'HAVING'\n     */\n    function _makeConstraintClause( $type, $params ) {\n         \n        if ( ! empty( $params ) ) {\n\n            $count = count( $params );\n            $i = 0;\n\n            $constraint = $type.' ';\n\n            foreach ($params as $k => $v) {\n\n                switch (strtolower($v['operator'])) {\n\n                    case '==':\n                        $constraint .= sprintf(\"%s = '%s'\",$v['name'], $this->prepare( $v['value'] ) );\n                        break;\n\n                    case 'between':\n                        $constraint .= sprintf(\"%s BETWEEN '%s' AND '%s'\", $v['name'], $this->prepare( $v['value']['start'] ), $this->prepare( $v['value']['end'] ) );\n                        break;\n\n                    case '=~':\n                        $constraint .= sprintf(\"%s %s '%s'\",$v['name'], OWA_SQL_REGEXP, $this->prepare( $v['value'] ) );\n                        break;\n\n                    case '!~':\n                        $constraint .= sprintf(\"%s %s '%s'\",$v['name'], OWA_SQL_NOTREGEXP, $this->prepare( $v['value'] ) );\n                        break;\n\n                    case '=@':\n                        $constraint .= sprintf(\"LOCATE('%s', %s) > 0\",$v['value'], $this->prepare( $v['name'] ) );\n                        break;\n\n                    case '!@':\n                        $constraint .= sprintf(\"LOCATE('%s', %s) = 0\",$v['value'], $this->prepare( $v['name'] ) );\n                        break;\n\n                    default:\n                        $constraint .= sprintf(\"%s %s '%s'\",$v['name'], $v['operator'], $this->prepare( $v['value'] ) );\n                        break;\n                }\n\n                if ($i < $count - 1) {\n\n                    $constraint .= \" AND \";\n                }\n\n                $i++;\n            }\n\n            return $constraint;\n        }\n    }\n\n    function join($type, $table, $as, $foreign_key, $primary_key = '') {\n\n        if (!$primary_key) {\n\n            if (!$as) {\n                    $as = $table;\n            }\n\n            $primary_key = $as.'.id';\n        }\n\n\n\n        $this->_sqlParams['joins'][$as] = array('type' => $type,\n                                             'table' => $table,\n                                             'as' => $as,\n                                             'foreign_key' => $foreign_key,\n                                             'primary_key' => $primary_key);\n\n    }\n\n    function prepare ( $string ) {\n\n        return $string;\n    }\n\n    function _makeJoinClause() {\n\n        $params = $this->_fetchSqlParams('joins');\n\n        if (!empty($params)):\n\n            $join_clause = '';\n\n            foreach ($params as $k => $v) {\n\n                if (!empty($v['as'])):\n                    $join_clause .= sprintf(\" %s %s AS %s ON %s = %s\", $v['type'],\n                                                                 $v['table'],\n                                                                 $v['as'],\n                                                                 $v['foreign_key'],\n                                                                 $v['primary_key']);\n                else:\n                    $join_clause .= sprintf(\" %s %s ON %s = %s\", $v['type'],\n                                                                 $v['table'],                                                                                                                          $v['foreign_key'],\n                                                                 $v['primary_key']);\n                endif;\n\n\n\n            }\n\n            return $join_clause;\n\n        else:\n            return;\n        endif;\n\n    }\n\n    function _makeFromClause() {\n\n        $from = '';\n        $i = 0;\n        $params = $this->_fetchSqlParams('from');\n\n        if(!empty($params)):\n\n            $count = count($params);\n\n            foreach ($params as $k => $v) {\n\n                $from .= $v['name'];\n\n                // Add as\n                if (!empty($v['as'])):\n\n                    $from .= ' as '.$v['as'];\n\n                endif;\n\n                // Add commas\n                if ($i < $count - 1):\n\n                    $from .= ', ';\n\n                endif;\n\n                $i++;\n\n            }\n\n            $from .= $this->_makeJoinClause();\n\n            return $from;\n        else:\n            $this->e->debug(\"No SQL FROM params set.\");\n            return false;\n        endif;\n\n    }\n\n    function _makeGroupByClause() {\n\n        $params = $this->_fetchSqlParams('groupby');\n\n        if (!empty($params)):\n\n            return sprintf(\"GROUP BY %s\", $this->_makeDelimitedValueList($params));\n\n        else:\n            return;\n        endif;\n\n\n    }\n\n    function _makeOrderByClause() {\n\n        $sorts = $this->_fetchSqlParams('orderby');\n        //print_r($sorts);\n        if (!empty($sorts)):\n\n            $order = $this->_fetchSqlParams('order');\n\n            $i = 1;\n            $sort_string = '';\n            $count = count($sorts);\n            foreach ($sorts as $sort) {\n\n                // needed for backwards compatability.\n                if (!isset($sort[1])) {\n                    $sort[1] = $order;\n                }\n\n                $sort_string .= sprintf(\"%s %s\",$sort[0], $sort[1]);\n                if ($i < $count) {\n                    $sort_string .= ', ';\n                }\n\n                $i++;\n            }\n\n            return sprintf(\"ORDER BY %s\", $sort_string);\n\n        else:\n            return;\n        endif;\n\n\n    }\n\n    function _makeLimitClause() {\n\n        $param = $this->_fetchSqlParams('limit');\n\n        if(!empty($param)):\n            $limit = sprintf(\"LIMIT %d\", $param);\n\n            $offset = $this->_makeOffsetClause();\n\n            $ret = $limit . ' ' . $offset;\n\n            return $ret;\n        else:\n            return;\n        endif;\n\n    }\n\n    function _makeOffsetClause() {\n\n        $param = $this->_fetchSqlParams('offset');\n\n        if(!empty($param)):\n            return sprintf(\"OFFSET %d\", $param);\n        else:\n            return;\n        endif;\n\n    }\n\n\n    /**\n     * Creates a delimited value list from an array or arrays.\n     *\n     */\n    function _makeDelimitedValueListArray($values, $delimiter = ', ', $inner_delimiter = ' ') {\n\n        $items = '';\n        $i = 0;\n        $count = count($values);\n\n        //print_r($values);\n\n        foreach ($values as $k) {\n\n            $items .= implode($inner_delimiter, $k);\n\n            // Add commas\n            if ($i < $count - 1):\n\n                $items .= $delimiter;\n\n            endif;\n\n            $i++;\n\n        }\n\n        return $items;\n\n    }\n\n    function _makeDelimitedValueList($values, $delimiter = ', ') {\n\n        $items = '';\n        $i = 0;\n        $count = count($values);\n\n        if (is_array($values)):\n\n            foreach ($values as $k) {\n\n                $items .= $k;\n\n                // Add commas\n                if ($i < $count - 1):\n\n                    $items .= $delimiter;\n\n                endif;\n\n                $i++;\n\n            }\n\n        else:\n\n            $items = $values;\n\n        endif;\n\n        return $items;\n\n    }\n\n    function _query() {\n\n        switch($this->_sqlParams['query_type']) {\n\n            case 'insert':\n\n                $ret = $this->query($this->_sql_statement);\n                break;\n            case 'select':\n\n                $ret = $this->get_results($this->_sql_statement);\n\n                if (array_key_exists('result_format', $this->_sqlParams)):\n                    $ret = $this->_formatResults($ret);\n                endif;\n\n                break;\n\n            case 'update':\n\n                $ret = $this->query($this->_sql_statement);\n                break;\n            case 'delete':\n\n                $ret = $this->query($this->_sql_statement);\n                break;\n        }\n\n        $this->_last_sql_statement = $this->_sql_statement;\n        $this->_sql_statement = '';\n        $this->_sqlParams = array();\n        return $ret;\n\n    }\n\n    function removeNs($string, $ns = '') {\n\n        if (empty($ns)):\n            $ns = $this->config['ns'];\n        endif;\n\n        $ns_len = strlen($ns);\n        return substr($string, $ns_len);\n\n    }\n\n    function setFormat($value) {\n\n        $this->_sqlParams['result_format'] = $value;\n        return;\n    }\n\n    function _formatResults($results) {\n\n        switch ($this->_sqlParams['result_format']) {\n\n                case \"single_array\":\n                    return $results[0];\n                    break;\n                case \"single_row\":\n                    return $results[0];\n                    break;\n                case \"inverted_array\":\n                    return owa_lib::deconstruct_assoc($results);\n                    break;\n                default:\n                    return $results;\n                    break;\n        }\n\n    }\n\n        /**\n     * Drops a table\n     *\n     */\n    function dropTable($table_name) {\n\n        return $this->query(sprintf(OWA_SQL_DROP_TABLE, $table_name));\n\n    }\n\n    /**\n     * Change table type\n     *\n     */\n    function alterTableType($table_name, $engine) {\n\n        return $this->query(sprintf(OWA_SQL_ALTER_TABLE_TYPE, $table_name, $engine));\n\n    }\n\n\n    /**\n     * Rename a table\n     *\n     */\n    function renameTable($table_name, $new_table_name) {\n\n        return $this->query(sprintf(OWA_SQL_RENAME_TABLE, $table_name, $new_table_name));\n    }\n\n    /**\n     * Renames column\n     * idempotent\n     */\n    function renameColumn($table_name, $old, $new, $defs) {\n\n        return $this->query(sprintf(OWA_SQL_RENAME_COLUMN, $table_name, $old, $new, $defs));\n    }\n\n\n    /**\n     * Adds new column to table\n     * idempotent\n     */\n    function addColumn($table_name, $column_name, $column_definition) {\n\n        return $this->query(sprintf(OWA_SQL_ADD_COLUMN, $table_name, $column_name, $column_definition));\n    }\n\n    /**\n     * Drops a column from a table\n     *\n     */\n    function dropColumn($table_name, $column_name) {\n\n        return $this->query(sprintf(OWA_SQL_DROP_COLUMN, $table_name, $column_name));\n\n    }\n\n    /**\n     * Changes the definition of a column\n     *\n     */\n    function modifyColumn($table_name, $column_name, $column_definition) {\n\n        return $this->query(sprintf(OWA_SQL_MODIFY_COLUMN, $table_name, $column_name, $column_definition));\n    }\n\n    /**\n     * Adds index to a column\n     *\n     */\n    function addIndex($table_name, $column_name, $index_definition = '') {\n\n        return $this->query(sprintf(OWA_SQL_ADD_INDEX, $table_name, $column_name, $index_definition));\n    }\n\n    /**\n     * Adds index to a column\n     *\n     */\n    function dropIndex($table_name, $column_name) {\n\n        return $this->query(sprintf(OWA_SQL_DROP_INDEX, $column_name, $table_name));\n    }\n\n    /**\n     * Creates a new table\n     *\n     */\n    function createTable($entity) {\n\n        //create column defs\n\n        $all_cols = $entity->getColumns();\n\n        $columns = '';\n\n        $table_defs = '';\n\n        $i = 0;\n        $count = count($all_cols);\n\n        // Control loop\n\n        foreach ($all_cols as $k => $v){\n\n            // get column definition\n            $columns .= $v.' '.$entity->getColumnDefinition($v);\n\n            // Add commas to column statement\n            if ($i < $count - 1):\n\n                $columns .= ', ';\n\n            endif;\n\n            $i++;\n\n        }\n\n        // make table options\n        $table_options = '';\n        $options = $entity->getTableOptions();\n\n        // table type\n        switch ($options['table_type']) {\n\n            case \"disk\":\n                $table_type = OWA_DTD_TABLE_TYPE_DISK;\n                break;\n            case \"memory\":\n                $table_type = OWA_DTD_TABLE_TYPE_MEMORY;\n                break;\n            default:\n                $table_type = OWA_DTD_TABLE_TYPE_DEFAULT;\n\n        }\n\n        $table_options .= sprintf(OWA_DTD_TABLE_TYPE, $table_type);\n\n        // character encoding type\n\n        // just in case the propoerties is not i nthe array, add a default value.\n        if (!array_key_exists('character_encoding', $options)) {\n\n            $options['character_encoding'] = OWA_DTD_CHARACTER_ENCODING_UTF8;\n        }\n\n        $table_options .= sprintf(' ' . OWA_DTD_TABLE_CHARACTER_ENCODING, $options['character_encoding']);\n\n        return $this->query(sprintf(OWA_SQL_CREATE_TABLE, $entity->getTableName(), $columns, $table_options));\n    }\n\n\n\n    /**\n     * Begins a SQL transaction statement\n     *\n     */\n    function beginTransaction() {\n\n        return $this->query(OWA_SQL_BEGIN_TRANSACTION);\n    }\n\n    /**\n     * Ends a SQL transaction statement\n     *\n     */\n    function endTransaction() {\n\n        return $this->query(OWA_SQL_END_TRANSACTION);\n    }\n\n    function count($column_name) {\n\n        return sprintf(OWA_SQL_COUNT, $column_name);\n    }\n\n    function sum($column_name) {\n\n        return sprintf(OWA_SQL_SUM, $column_name);\n    }\n\n    function distinct($column_name) {\n\n        return sprintf(OWA_SQL_DISTINCT, $column_name);\n    }\n\n    function division($numerator, $denominator) {\n\n        return sprintf(OWA_SQL_DIVISION, $numerator, $denominator);\n    }\n\n    function round($value) {\n\n        return sprintf(OWA_SQL_ROUND, $value);\n    }\n\n    function average($value) {\n\n        return sprintf(OWA_SQL_AVERAGE, $value);\n    }\n\n    function getAffectedRows() {\n\n        return false;\n    }\n}\n\n?>"
        },
        {
          "name": "owa_entity.php",
          "type": "blob",
          "size": 20.40234375,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\nif (!class_exists('owa_dbColumn')):\n    require_once(OWA_BASE_CLASS_DIR.'column.php');\nendif;\n\n/**\n * Abstract Entity Class\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n\nclass owa_entity {\n\n    var $name;\n    var $properties = array();\n    var $_tableProperties = array();\n    var $wasPersisted;\n    var $cache;\n    var $dirty = [];\n    \n    function init() {\n        \n        // get the full property list\n        $properties = $this->getEntityPropertyList();\n        \n        foreach ( $properties as $col_name => $col_props ) {\n            \n            // create the column obj with the proper name and data type\n            $col = new owa_dbColumn( $col_name, $col_props['dtd'] );\n            \n            // Evaluate the type of column that needs to be created\n            if ( array_key_exists( 'type', $col_props) ) {\n                \n                switch ( $col_props['type'] ) {\n                    \n                    case 'primary_key':\n                        \n                        $col->setPrimaryKey();\n                        \n                        break;\n                        \n                    case 'foreign_key':\n                        \n                        if ( array_key_exists( 'linked_entity', $col_props ) && ! empty( $col_props['linked_entity'] ) ) {\n                            \n                            $col->setForeignKey( $col_props['linked_entity'] );\n                        }\n                        \n                        break;\n                }\n            }\n            \n            // should an index be created for the column?\n            if ( array_key_exists('index', $col_props ) ) {\n                \n                switch ( $col_props['index'] ) {\n                    \n                    case true:\n                        \n                        $col->setindex();\n                        \n                        break;\n                }\n            }\n            \n            // add the full configured col to entity property list\n            $this->setProperty( $col );\n        }\n    }\n    \n    \n    function _getProperties() {\n        \n        $properties = array();\n        \n        if (!empty($this->properties)) {\n            $vars = $this->properties;\n        }\n        \n        foreach ($vars as $k => $v) {\n            \n            $properties[$k] = $v->getValue();\n                \n        }\n\n        return $properties;\n    }\n    \n    function getProperties( $drop_keys = [] ) {\n\t    \n\t    $properties = $this->_getProperties();\n\t    \n\t    if ( $drop_keys ) {\n\t\t    \n\t\t    foreach ($drop_keys as $key) {\n\t\t\t    \n\t\t\t    if (array_key_exists($key, $properties)) {\n\t\t\t\t    \n\t\t\t\t    unset($properties[$key]);\n\t\t\t    }\n\t\t    }\n\t    }\n\t    \n\t    return $properties;\n    }\n    \n    /**\n     * Return Array or string of column names used for SQL queries - e.g. like \" tablename.fieldname as namespace.fieldname\"\n     *\n     * @param boolean $return_as_string  If false array is returned\n     * @param string $as_namespace  Optional namespace for fields\n     * @param boolean $table_namespace\n     */\n    public function getColumns($return_as_string = false, $as_namespace = '', $table_namespace = false) {\n        \n        if (!empty($this->properties)) {\n            $all_cols = array_keys($this->properties);\n            $all_cols = array_flip($all_cols);\n        }\n        \n        //print_r($all_cols);\n        \n        $table = $this->getTableName();\n        $new_cols = array();\n        $ns = '';\n        $as = '';\n        \n        if (!empty($table_namespace)):\n            $ns = $table.'.';\n        endif;\n                \n        foreach ($all_cols as $k => $v) {\n            \n            if (!empty($as_namespace)):\n                $as =  ' AS '.$as_namespace.$k;\n            endif;\n            \n            $new_cols[] = $ns.$k.$as;\n        }\n        \n        // add implode as string here\n        \n        if ($return_as_string == true):\n            $new_cols = implode(', ', $new_cols);\n        endif;\n        \n        //print_r($new_cols);\n        return $new_cols;\n        \n    }\n    \n    /**\n     * Sets object attributes\n     *\n     * @param unknown_type $array\n     */\n    function setProperties($array, $apply_filters = false) {\n        \n        $properties = $this->getColumns();\n        \n        foreach ($properties as $k => $v) {\n                \n            //if ( ! empty( $array[$v] ) ) {\n            if ( array_key_exists( $v, $array ) ) {\n                if ( ! empty( $this->properties ) ) {\n                    $this->set($v, $array[$v], $apply_filters, false);\n                }\n            }\n        }\n    }\n    \n    function setGuid($string) {\n        \n        return owa_lib::setStringGuid($string);\n        \n    }\n    \n    function set($name, $value, $filter = true, $mark_dirty = true ) {\n        \n        if ( array_key_exists( $name, $this->properties ) ) {\n\t        \n\t        $existing_value = $this->get( $name );\n            \n            $method = $name.'SetFilter';\n            \n            if ( $filter && method_exists( $this, $method ) ) {\n\t            \n\t            $value = $this->$method( $value );\n            }\n            \n            if ( $value ) {\n            \n\t            $this->properties[$name]->setValue( $value );\n\t            \n\t            if ( $mark_dirty && $existing_value != $value ) {\n\t\t            \n\t\t            $this->markDirty( $name, $value );\n\t            }\n\t        }\n        }\n    }\n    \n    function markDirty( $name, $value ) {\n\t    \n\t    $this->dirty[$name] = $value;\n    }\n    \n    function isDirty() {\n\t    \n\t    if ( ! empty( $this->dirty ) ) {\n\t\t    \n\t\t    return true;\n\t    }\n    }\n    \n    // depricated\n    function setValues($values) {\n        \n        return $this->setProperties($values);\n    }\n    \n    function get($name, $filter = true) {\n        \n        if (array_key_exists($name, $this->properties)) {\n            $method = $name.'GetFilter';\n            if ( $filter && method_exists($this, $method) ) {\n                return $this->$method( $this->properties[$name]->getValue() );\n            } else {\n                return $this->properties[$name]->getValue();\n            }\n        }\n    }\n    \n    function getTableOptions() {\n        \n        if ($this->_tableProperties) {\n            if (array_key_exists('table_type', $this->_tableProperties)) {\n                return $this->_tableProperties['table_type'];\n            }\n        }\n        \n        return array('table_type' => 'disk');\n    \n    }\n    \n    /**\n     * Persist new object\n     *\n     */\n    function create() {\n        \n        $db = owa_coreAPI::dbSingleton();\n        $all_cols = $this->getColumns();\n        \n        $db->insertInto($this->getTableName());\n        \n        // Control loop\n        foreach ($all_cols as $k => $v){\n        \n            // drop column is it is marked as auto-incement as DB will take care of that.\n            if ($this->properties[$v]->auto_increment === true) {\n                ;\n            } else {\n                \n                $db->set($v, $this->get($v, false));\n            }\n                \n        }\n    \n        // Persist object\n        $status = $db->executeQuery();\n        \n        // Add to Cache\n        if ($status == true) {\n            $this->addToCache();\n            $this->dirty = [];\n        }\n        \n        return $status;\n    }\n    \n    function save() {\n        \n        if ( $this->wasPersisted ) {\n            return $this->update();\n        } else {\n            return $this->create();\n        }\n        \n    }\n    \n    function addToCache($col = 'id') {\n        \n        if($this->isCachable()) {\n            $cache = owa_coreAPI::cacheSingleton();\n            $cache->setCollectionExpirationPeriod($this->getTableName(), $this->getCacheExpirationPeriod());\n            $cache->set($this->getTableName(), $col.$this->get( $col ), $this, $this->getCacheExpirationPeriod());\n        }\n    }\n    \n    /**\n     * Update all properties of an Existing object\n     *\n     */\n    function update($where = '') {\n        \n        $db = owa_coreAPI::dbSingleton();\n        $db->updateTable($this->getTableName());\n        \n        // get column list\n        $all_cols = $this->getColumns();\n        \n        \n        // Control loop\n        foreach ($all_cols as $k => $v){\n        \n            // drop column is it is marked as auto-increment as DB will take care of that.\n            \n            if ($this->get($v, false)) {\n                $db->set($v, $this->get($v, false));\n            }\n        }\n        \n        if(empty($where)):\n            $id = $this->get('id');\n            $db->where('id', $id);\n            \n        else:\n            $db->where($where, $this->get($where));\n        endif;\n        \n        // Persist object\n        $status = $db->executeQuery();\n        // Add to Cache\n        if ($status === true) {\n            $this->addToCache();\n            $this->dirty = [];\n        }\n        \n        return $status;\n        \n    }\n    \n    /**\n     * Update named list of properties of an existing object\n     *\n     * @param array $named_properties\n     * @param array $where\n     * @return boolean\n     */\n    function partialUpdate($named_properties, $where) {\n        \n        $db = owa_coreAPI::dbSingleton();\n        $db->updateTable($this->getTableName());\n        \n        foreach ($named_properties as $v) {\n            \n            if ($this->get($v)){\n                $db->set($v, $this->get($v));\n            }\n        }\n        \n        if(empty($where)):\n            $db->where('id', $this->get('id'));\n        else:\n            $db->where($where, $this->get($where));\n        endif;\n        \n        // Persist object\n        $status = $db->executeQuery();\n        // Add to Cache\n        if ($status == true) {\n            $this->addToCache();\n            $this->dirty = [];\n        }\n        \n        return $status;\n    }\n    \n    \n    /**\n     * Delete Object\n     *\n     */\n    function delete($value = '', $col = 'id') {\n        \n        $db = owa_coreAPI::dbSingleton();\n        $db->deleteFrom($this->getTableName());\n        \n        if (empty($value)) {\n            $value = $this->get('id');\n        }\n        \n        $db->where($col, $value);\n\n        $status = $db->executeQuery();\n    \n        // Delete from Cache\n        if ( $status ){\n            if ($this->isCachable()) {\n                owa_coreAPI::debug('about to remove from cache');\n                $cache = owa_coreAPI::cacheSingleton();\n                $cache->remove($this->getTableName(), $col.$value);\n            }\n        }\n        \n        return $status;\n        \n    }\n    \n    function load($value, $col = 'id') {\n\n        return $this->getByColumn($col, $value);\n        \n    }\n    \n    function getByPk($col, $value) {\n        \n        return $this->getByColumn($col, $value);\n        \n    }\n    \n    function getByColumn($col, $value) {\n                \n        if ( ! $col ) {\n            throw new Exception(\"No column name passed.\");\n        }\n        \n        if ( ! $value ) {\n            throw new Exception(\"No value passed.\");\n        }\n        \n        $cache_obj = '';\n        \n        if ($this->isCachable()) {\n            $cache = owa_coreAPI::cacheSingleton();\n            $cache->setCollectionExpirationPeriod($this->getTableName(), $this->getCacheExpirationPeriod());\n            $cache_obj = $cache->get($this->getTableName(), $col.$value);\n        }\n            \n        if (!empty($cache_obj)) {\n        \n            $cache_obj_properties = $cache_obj->_getProperties();\n            $this->setProperties($cache_obj_properties);\n            $this->wasPersisted = true;\n                    \n        } else {\n        \n            $db = owa_coreAPI::dbSingleton();\n            $db->selectFrom($this->getTableName());\n            $db->selectColumn('*');\n            owa_coreAPI::debug(\"Col: $col, value: $value\");\n            $db->where($col, $value);\n            $properties = $db->getOneRow();\n            \n            if (!empty($properties)) {\n                \n                $this->setProperties($properties);\n                $this->wasPersisted = true;\n                // add to cache\n                $this->addToCache($col);\n                owa_coreAPI::debug('entity loaded from db');\n            }\n        }\n    }\n\n    function getTableName() {\n        \n        if ($this->_tableProperties) {\n            return $this->_tableProperties['name'];\n        } else {\n            return get_class($this);\n        }\n        \n    }\n    \n    function getTableAlias() {\n        \n        if ($this->_tableProperties) {\n            return $this->_tableProperties['alias'];\n        }\n    }\n    \n    function setTableAlias( $alias ) {\n    \n        $this->_tableProperties['alias'] = $alias;\n    }\n    \n    function setTableName($name, $namespace = 'owa_') {\n\n        $this->_tableProperties['alias'] = $name;\n        $this->_tableProperties['name'] = $namespace.$name;\n    }\n    \n    /**\n     * Sets the entity as cachable for some period of time\n     *\n     * @todo    make this use the getSetting method but that requires a refactoring of\n     *            the entity abstract class to not use an entity in it's constructor\n     */\n    function setCachable($seconds = '') {\n    \n        $this->_tableProperties['cacheable'] = true;\n        \n        // set cache expiration period\n        if (!$seconds) {\n            // remove hard coded value. fix this see note above.\n            //$seconds = owa_coreAPI::getSetting('base', 'default_cache_expiration_period');\n            $seconds = 604800;\n        }\n        \n        $this->setCacheExpirationPeriod($seconds);\n    }\n    \n    function isCachable() {\n        \n        //if (owa_coreAPI::getSetting('base', 'cache_objects')) {\n            if (array_key_exists('cacheable', $this->_tableProperties)) {\n                return $this->_tableProperties['cacheable'];\n            //}\n        } else {\n            return false;\n        }\n        \n    }\n    \n    function setPrimaryKey($col) {\n        //backwards compatability\n        $this->properties[$col]->setPrimaryKey();\n        $this->_tableProperties['primary_key'] = $col;\n        \n    }\n        \n    function getForeignKeyColumn($entity) {\n        if (array_key_exists('relatedEntities', $this->_tableProperties)) {\n            if (array_key_exists($entity, $this->_tableProperties['relatedEntities'])) {\n                return $this->_tableProperties['relatedEntities'][$entity];\n            }\n        }\n    }\n    \n    function isForeignKeyColumn($col) {\n    \n        if (array_key_exists($col, $this->properties)) {\n            return $this->properties[$col]->isForeignKey();\n        }\n    }\n    \n    function getAllForeignKeys() {\n        \n        return;\n    }\n    \n    /**\n     * Create Table\n     *\n     * Handled by DB abstraction layer because the SQL associated with this is way too DB specific\n     */\n    function createTable() {\n        \n        $db = owa_coreAPI::dbSingleton();\n        // Persist table\n        $status = $db->createTable($this);\n        \n        if ($status == true):\n            owa_coreAPI::notice(sprintf(\"%s Table Created.\", $this->getTableName()));\n            return true;\n        else:\n            owa_coreAPI::notice(sprintf(\"%s Table Creation Failed.\", $this->getTableName()));\n            return false;\n        endif;\n    \n    }\n    \n    /**\n     * DROP Table\n     *\n     * Drops a table. will throw error is table does not exist\n     */\n    function dropTable() {\n        \n        $db = owa_coreAPI::dbSingleton();\n        // Persist table\n        $status = $db->dropTable($this->getTableName());\n        \n        if ($status == true):\n            return true;\n        else:\n            return false;\n        endif;\n    \n    }\n    \n    function addColumn($column_name) {\n        \n        $def = $this->getColumnDefinition($column_name);\n        // Persist table\n        $db = owa_coreAPI::dbSingleton();\n        $status = $db->addColumn($this->getTableName(), $column_name, $def);\n        \n        if ($status == true):\n            return true;\n        else:\n            return false;\n        endif;\n        \n    }\n    \n    function dropColumn($column_name) {\n        \n        $db = owa_coreAPI::dbSingleton();\n        $status = $db->dropColumn($this->getTableName(), $column_name);\n        \n        if ($status == true):\n            return true;\n        else:\n            return false;\n        endif;\n        \n    }\n    \n    function modifyColumn($column_name) {\n    \n        $def = $this->getColumnDefinition($column_name);\n        $db = owa_coreAPI::dbSingleton();\n        $status = $db->modifyColumn($this->getTableName(), $column_name, $def);\n        \n        if ($status == true):\n            return true;\n        else:\n            return false;\n        endif;\n    \n    \n    }\n    \n    function renameColumn($old_column_name, $column_name, $use_old_column_for_defs = false) {\n    \n        if ($use_old_column_for_defs) {\n            $def = $this->getColumnDefinition($old_column_name);\n        } else {\n            $def = $this->getColumnDefinition($column_name);\n        }\n        \n        $db = owa_coreAPI::dbSingleton();\n        $status = $db->renameColumn($this->getTableName(), $old_column_name, $column_name, $def);\n        \n        if ($status == true):\n            return true;\n        else:\n            return false;\n        endif;\n        \n    }\n    \n    function renameTable($new_table_name) {\n        \n        $db = owa_coreAPI::dbSingleton();\n        $status = $db->renameTable($this->getTableName(), $new_table_name);\n        \n        if ($status == true):\n            return true;\n        else:\n            return false;\n        endif;\n        return;\n    }\n    \n    function getColumnDefinition($column_name) {\n    \n        if (empty($this->properties)) {\n            return $this->$column_name->getDefinition();\n        } else {\n            return $this->properties[$column_name]->getDefinition();\n        }\n    }\n    \n    function setProperty($obj) {\n        \n        $this->properties[$obj->get('name')] = $obj;\n        \n        if ($obj->isForeignKey()) {\n            $fk = $obj->getForeignKey();\n            \n            $this->_tableProperties['relatedEntities'][$fk[0]] = $obj->getName();\n            $this->_tableProperties['foreign_keys'][$obj->getName()] = $fk[0];\n        }\n        \n    }\n    \n    function getProperty($name) {\n        if (array_key_exists($name, $this->properties)) {\n            return $this->properties[$name];\n        }\n    }\n    \n    function generateRandomUid($seed = '') {\n        \n        return owa_lib::generateRandomUid();\n         \n        //return crc32($_SERVER['SERVER_ADDR'].$_SERVER['SERVER_NAME'].getmypid().$this->getTableName().microtime().$seed.rand());\n    }\n    \n    /**\n     * Create guid from string\n     *\n     * @param     string $string\n     * @return     integer\n     */\n    function generateId($string) {\n        //require_once(OWA_DIR.'owa_lib.php');\n        return owa_lib::setStringGuid($string);\n    }\n    \n    function setCacheExpirationPeriod($seconds) {\n        \n        $this->_tableProperties['cache_expiration_period'] = $seconds;\n    }\n    \n    function getCacheExpirationPeriod() {\n        \n        if (array_key_exists('cache_expiration_period', $this->_tableProperties)) {\n            return $this->_tableProperties['cache_expiration_period'];\n        } else {\n            // default of thirty days\n            return (3600);\n        }\n    }\n    \n    function getName() {\n        \n        return $this->name;\n    }\n    \n    function setSummaryLevel($num) {\n        \n        $this->_tableProperties['summary_level'] = $num;\n    }\n    \n    function getSummaryLevel() {\n        \n        if (array_key_exists('summary_level', $this->_tableProperties)) {\n            \n            return $this->_tableProperties['summary_level'];\n        \n        } else {\n        \n            return 0;\n        }\n    }\n    \n    function setCharacterEncoding($encoding) {\n        \n        $this->_tableProperties['character_encoding'] = $encoding;\n    }\n    \n    function wasPersisted() {\n        return $this->wasPersisted;\n    }\n}\n\n?>"
        },
        {
          "name": "owa_env.php",
          "type": "blob",
          "size": 1.6298828125,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\n/**\n * Environment Configuration\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n  \nif (!defined('OWA_PATH')) {\n    define('OWA_PATH', dirname(__FILE__));\n}\ndefine('OWA_DIR', OWA_PATH . '/');\ndefine('OWA_DATA_DIR', OWA_DIR . 'owa-data/');\ndefine('OWA_MODULES_DIR', OWA_DIR.'modules/');\ndefine('OWA_BASE_DIR', OWA_PATH); // depricated\ndefine('OWA_BASE_CLASSES_DIR', OWA_DIR); //depricated\ndefine('OWA_BASE_MODULE_DIR', OWA_DIR.'modules/base/');\ndefine('OWA_BASE_CLASS_DIR', OWA_BASE_MODULE_DIR.'classes/');\ndefine('OWA_INCLUDE_DIR', OWA_DIR.'includes/');\ndefine('OWA_PLUGIN_DIR', OWA_DIR.'plugins/');\ndefine('OWA_CONF_DIR', OWA_DIR.'conf/');\ndefine('OWA_THEMES_DIR', OWA_DIR.'themes/');\ndefine('OWA_VERSION', 'master');\ndefine('OWA_VENDOR_DIR', OWA_DIR.'vendor/');\n\nif ( file_exists( OWA_VENDOR_DIR . 'autoload.php' ) ) {\n\t\n\trequire_once ( OWA_VENDOR_DIR . 'autoload.php' );\n}\n\n?>\n"
        },
        {
          "name": "owa_httpRequest.php",
          "type": "blob",
          "size": 5.4130859375,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Psr7\\Request;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Exception\\ConnectException;\nuse GuzzleHttp\\Exception\\ClientException;\n\n/**\n * Wrapper for Snoopy http request class\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n\nclass owa_http {\n\n    /**\n     * Configuration\n     *\n     * @var array\n     */\n    var $config;\n\n    /**\n     * Error handler\n     *\n     * @var object\n     */\n    var $e;\n\n    /**\n     * The length of text contained in the snippet\n     *\n     * @var string\n     */\n    var $snip_len = 100;\n\n    /**\n     * The string that is added to the beginning and\n     * end of snippet text.\n     *\n     * @var string\n     */\n    var $snip_str = '...';\n\n    /**\n     * Anchor information for a particular link\n     *\n     * @var array\n     */\n    var $anchor_info = [];\n\n    var $http;\n\n    var $response;\n    var $response_headers;\n    var $response_code;\n\n    var $request_headers;\n\n    function __construct() {\n\t    \n\t    $this->http = new Client( [\n\t\t    \n\t\t    'timeout'  => 5.0,\n\t\t    'connect_timeout'  => 5.0\n\t    ] );\n\n    }\n    /**\n     * Searches a fetched html document for the anchor of a specific url\n     *\n     * @param string $link\n     */\n    function extractAnchors() {\n\t    \n\t    $regex = '/<a\\s[^>]*href\\s*=\\s*([\\\"\\']??)(http|https[^\\\\1 >]*?)\\\\1[^>]*>s*(.*)<\\/a>/simU';\n\t    \n\t    if( preg_match_all(\"$regex\", $this->getResponseBody(), $matches, PREG_SET_ORDER ) ) {\n\t\t   \n\t\t    owa_coreAPI::debug( 'Found anchors: ' . print_r( $matches, true ) );\n\t\t    \n\t\t    return $matches;\n\t\t}\n    }\n    \n    function extractAnchorText( $url ) {\n\t    \n\t    $anchors = $this->extractAnchors();\n\t    \n\t    $anchortext = '';\n\t    \n\t    if ( $anchors ) {\n\t\t    \n\t\t    foreach( $anchors as $match ) {\n\t\t\t    \n\t\t    \t// match[0] = full matching <a> tag\n\t\t    \t// $match[2] = link address\n\t\t\t\t// $match[3] = link text\t\n\t\t        \n\t\t        //strip any HTML tags (i.e. img, span, etc)\n\t\t        if ( $match[3] ) {\n\t\t\t        \n\t\t        \t$match[3] = trim( owa_sanitize::stripAllTags( $match[3] ) );\n\t\t        }\n\t\t        \n\t\t        // if anything is left as anchortext then use that\n\t\t\t\tif ( $match[3] && $url === $match[2] ) {\n\t\t\t\t\t\n\t\t\t\t\t$anchortext = $match[3];\n\t        \t\t\n\t\t\t\t\towa_coreAPI::debug('Anchor info: '.print_r($this->anchor_info, true));\n\t\t\t\t\t\n\t\t\t\t\treturn owa_lib::inputFilter( $anchortext );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n\n    function extract_title() {\n\n        preg_match('/<title[^>]*>(.*?)<\\/title>/', $this->getResponseBody(), $matches);\n\n        $title = null;\n\n        if ($matches && count($matches) > 0 && isset($matches[1])) {\n            $title = $matches[1];\n        }\n\n        owa_coreAPI::debug(\"referrer title extract: \". print_r($title, true));\n\n        return trim($title);\n    }\n\n    function strip_selected_tags($str, $tags = array(), $stripContent = false) {\n\n       foreach ($tags as $k => $tag){\n       \n           if ($stripContent == true) {\n                   $pattern = sprintf('#(<%s.*?>)(.*?)(<\\/%s.*?>)#is', preg_quote($tag), preg_quote($tag));\n               $str = preg_replace($pattern,\"\",$str);\n           }\n           $str = preg_replace($pattern, '${2}',$str);\n       }\n       \n       return $str;\n   }\n   \n   function getRequest($url, $arguments = '') {\n\t\t\n\t\t$this->response = '';\n\t\t\n\t\towa_coreAPI::debug(\"GET: $url\");\n\t\t\n        try {\n\t        \n\t        $request = new Request('GET', trim( $url )  );\n\t        $this->response = $this->http->send( $request, [\n\t\t        \n\t\t        'allow_redirects' => [\n\t\t\t\t    'max'             => 5,\n\t\t\t\t    'strict'          => false,\n\t\t\t\t    'referer'         => false,\n\t\t\t\t    'protocols'       => ['http', 'https'],\n\t\t\t\t    'track_redirects' => false\n\t\t\t\t],\n\t\t        'headers' => [\n\t\t\t        \n\t\t\t\t\t'User-Agent' => owa_coreAPI::getSetting('base', 'owa_user_agent')\n\t\t\t\t]\n\t        ]);\n\t        \n\t        owa_coreAPI::debug(\"HTTP STATUS CODE:\" . $this->getResponseStatusCode() );\n        }\n        \n        catch( \\GuzzleHttp\\Exception\\RequestException | \\GuzzleHttp\\Exception\\ConnectException | \\GuzzleHttp\\Exception\\ClientException $e ) {\n\t\t     \n\t\t    $r = $e->getRequest();\n\t\t  \t$res = null;\n\t\t  \t\n\t\t  \tif ( method_exists( $e, 'hasResponse' ) && $e->hasResponse() ) {\n\t\t\t  \t\n\t\t\t  \t$res = $e->getResponse();\n\t\t  \t}\n\t\t  \t\n\t\t  \towa_coreAPI::debug( print_r($r, true ) );\n\t\t\towa_coreAPI::debug( print_r($res, true ) );\n\t    }\n\t    \n\n        if ( $this->response ) {\n\t        \n\t        return $this->getResponseBody();\n        }\n    }\n    \n   function getResponseStatusCode() {\n\t    \n\t    if ( $this->response ) {\n\t\t \n\t\t    return $this->response->getStatusCode();\n\t\t}\n    }\n    \n   function getResponseBody() {\n\t    \n\t      if ( $this->response ) {\n\t\t \n\t\t    return $this->response->getBody();\n\t\t}\n    }\n}\n\n?>"
        },
        {
          "name": "owa_install.php",
          "type": "blob",
          "size": 2.5947265625,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\nrequire_once (OWA_BASE_DIR.'/owa_base.php');\n\n/**\n * Install Abstract Class\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\nclass owa_install extends owa_base{\n\n    /**\n     * Data access object\n     *\n     * @var object\n     */\n    var $db;\n\n    /**\n     * Version of string\n     *\n     * @var string\n     */\n    var $version;\n\n    /**\n     * Params array\n     *\n     * @var array\n     */\n    var $params;\n\n    /**\n     * Module name\n     *\n     * @var unknown_type\n     */\n    var $module;\n\n    /**\n     * Constructor\n     *\n     * @return owa_install\n     */\n\n    function __construct() {\n\n        parent::__construct();\n        $this->db = owa_coreAPI::dbSingleton();\n    }\n\n    /**\n     * Check to see if schema is installed\n     *\n     * @return boolean\n     */\n    function checkForSchema() {\n\n        $table_check = array();\n        //$this->e->notice(print_r($this->tables, true));\n        // test for existance of tables\n        foreach ($this->tables as $table) {\n            $this->e->notice('Testing for existance of table: '. $table);\n            $check = $this->db->get_results(sprintf(\"show tables like 'owa_%s'\", $table));\n            //$this->e->notice(print_r($check, true));\n\n            // if a table is missing add it to this array\n            if (empty($check)):\n                $table_check[] = $table;\n                $this->e->notice('Did not find table: '. $table);\n            else:\n                $this->e->notice('Table '. $table. ' already exists.');\n            endif;\n        }\n\n        if (!empty($table_check)):\n            //$this->e->notice(sprintf(\"Schema Check: Tables '%s' are missing.\", implode(',', $table_check)));\n            $this->e->notice(sprintf(\"Schema Check: Tables to install: %s\", print_r($table_check, true)));\n\n            return $table_check;\n        else:\n            return false;\n        endif;\n\n    }\n\n}\n\n?>"
        },
        {
          "name": "owa_lib.php",
          "type": "blob",
          "size": 36.765625,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n\n/**\n * Utility Functions\n * \n */\nclass owa_lib {\n\n    /**\n     * Convert Associative Array to String\n     *\n     * @param string $inner_glue\n     * @param string $outer_glue\n     * @param array $array\n     * @return string\n     */\n    public static function implode_assoc($inner_glue, $outer_glue, $array) {\n       $output = array();\n       foreach( $array as $key => $item ) {\n              $output[] = $key . $inner_glue . $item;\n        }\n\n        return implode($outer_glue, $output);\n    }\n\n    /**\n     * Deconstruct Associative Array\n     *\n     * For example this takes array([1] => array(a => dog, b => cat), [2] => array(a => sheep, b => goat))\n     * and tunrs it into array([a] => array(dog, sheep), [b] => array(cat, goat))\n     *\n     * @param array $a_array\n     * @return array $data_arrays\n     * @access public\n     */\n    public static function deconstruct_assoc($a_array) {\n        if (!empty($a_array)):\n\n            $data_arrays = array();\n\n            if(!empty($a_array[1])) :\n\n                foreach ($a_array as $key => $value) {\n                    foreach ($value as $k => $v) {\n                        $data_arrays[$k][] = $v;\n\n                    }\n                }\n            else:\n                //print_r($a_array[0]);\n                foreach ($a_array[0] as $key => $value) {\n                    $data_arrays[$key][] = $value;\n                }\n            endif;\n\n            return $data_arrays;\n        else:\n            return array();\n        endif;\n    }\n\n\n    public static function decon_assoc($a_array) {\n\n        $data_arrays = array();\n\n        foreach ($a_array as $key => $value) {\n            //foreach ($value as $k => $v) {\n                $data_arrays[$key][] = $value;\n\n            //}\n        }\n\n        return $data_arrays;\n    }\n\n    // php 4 compatible function\n    public static function array_intersect_key() {\n\n        $arrs = func_get_args();\n        $result = array_shift($arrs);\n        foreach ($arrs as $array) {\n            foreach ($result as $key => $v) {\n                if (!array_key_exists($key, $array)) {\n                    unset($result[$key]);\n                }\n            }\n        }\n        return $result;\n     }\n\n    // php4 compatible function\n    public static function array_walk_recursive(&$input, $funcname, $userdata = \"\")\n    {\n        if (!is_callable($funcname))\n        {\n            return false;\n        }\n        \n        if (!is_array($input))\n        {\n            return false;\n        }\n        \n        if (is_array($funcname))\n        {\n            $funcname = $funcname[0].'::'.$funcname[1];\n        }\n        \n        \n        foreach ($input AS $key => $value)\n        {\n            if (is_array($input[$key]))\n            {\n                array_walk_recursive($input[$key], $funcname, $userdata);\n            }\n            else\n            {\n                $saved_value = $value;\n                if (!empty($userdata))\n                {\n                    $funcname($value, $key, $userdata);\n                }\n                else\n                {\n                    $funcname($value, $key);\n                }\n                \n                if ($value != $saved_value)\n                {\n                    $input[$key] = $value;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Array of Current Time\n     *\n     * @return array\n     * @access public\n     */\n    public static function time_now() {\n\n        $timestamp = time();\n\n        return array(\n\n                'year'                 => date(\"Y\", $timestamp),\n                'month'             => date(\"n\", $timestamp),\n                'day'                 => date(\"d\", $timestamp),\n                'dayofweek'         => date(\"w\", $timestamp),\n                'dayofyear'         => date(\"z\", $timestamp),\n                'weekofyear'        => date(\"W\", $timestamp),\n                'hour'                => date(\"G\", $timestamp),\n                'minute'             => date(\"i\", $timestamp),\n                'second'             => date(\"s\", $timestamp),\n                'timestamp'            => $timestamp\n            );\n    }\n\n    /**\n     * Information array for Months in the year.\n     *\n     * @return array\n     */\n    public static function months() {\n\n        return array(\n\n                    1 => array('label' => 'January'),\n                    2 => array('label' => 'February'),\n                    3 => array('label' => 'March'),\n                    4 => array('label' => 'April'),\n                    5 => array('label' => 'May'),\n                    6 => array('label' => 'June'),\n                    7 => array('label' => 'July'),\n                    8 => array('label' => 'August'),\n                    9 => array('label' => 'September'),\n                    10 => array('label' => 'October'),\n                    11 => array('label' => 'November'),\n                    12 => array('label' => 'December')\n        );\n\n    }\n\n    public static function days() {\n\n        return array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\n                    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31);\n    }\n\n    public static function years() {\n\n        static $years;\n\n        if (empty($years)):\n\n            $start_year = 2005;\n\n            $years = array($start_year);\n\n            $num_years =  date(\"Y\", time()) - $start_year;\n\n            for($i=1; $i<=$num_years; $i++) {\n\n                $years[] = $start_year + $i;\n            }\n\n            $years = array_reverse($years);\n\n        endif;\n\n        return $years;\n    }\n\n\n    /**\n     * Returns a label from an array of months\n     *\n     * @param int $month\n     * @return string\n     */\n    public static function get_month_label($month) {\n\n        static $months;\n\n        if (empty($months)):\n\n            $months = owa_lib::months();\n\n        endif;\n\n        return $months[$month]['label'];\n\n    }\n\n\n    /**\n     * Sets the suffix for Days used in Date labels\n     * @depricated\n     * @param string $day\n     * @return string\n     */\n    public static function setDaySuffix($day) {\n\n        switch ($day) {\n\n            case \"1\":\n                $day_suffix = 'st';\n                break;\n            case \"2\":\n                $day_suffix = 'nd';\n                break;\n            case \"3\":\n                $day_suffix = 'rd';\n                break;\n            default:\n                $day_suffix = 'th';\n        }\n\n        return $day_suffix;\n\n    }\n\n    /**\n     * Generates the label for a date\n     * @depricated\n     * @param array $params\n     * @return string\n     */\n    public static function getDatelabel($params) {\n\n        switch ($params['period']) {\n\n            case \"day\":\n                return sprintf(\"%s, %d%s %s\",\n                            owa_lib::get_month_label($params['month']),\n                            $params['day'],\n                            owa_lib::setDaySuffix($params['day']),\n                            $params['year']\n                        );\n                break;\n\n            case \"month\":\n                return sprintf(\"%s %s\",\n                            owa_lib::get_month_label($params['month']),\n                            $params['year']\n                        );\n                break;\n\n            case \"year\":\n                return sprintf(\"%s\",\n                            $params['year']\n                        );\n                break;\n            case \"date_range\":\n                return sprintf(\"%s, %d%s %s - %s, %d%s %s\",\n                            owa_lib::get_month_label($params['month']),\n                            $params['day'],\n                            owa_lib::setDaySuffix($params['day']),\n                            $params['year'],\n                            owa_lib::get_month_label($params['month2']),\n                            $params['day2'],\n                            owa_lib::setDaySuffix($params['day2']),\n                            $params['year2']\n                        );\n                break;\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Array of Reporting Periods\n     * @depricated\n     * @return array\n     */\n    public static function reporting_periods() {\n\n        return array(\n\n                    'today' => array('label' => 'Today'),\n                    'yesterday' => array('label' => 'Yesterday'),\n                    'this_week' => array('label' => 'This Week'),\n                    'this_month' => array('label' => 'This Month'),\n                    'this_year' => array('label' => 'This Year'),\n                    'last_week'  => array('label' => 'Last Week'),\n                    'last_month' => array('label' => 'Last Month'),\n                    'last_year' => array('label' => 'Last Year'),\n                    'last_half_hour' => array('label' => 'The Last 30 Minutes'),\n                    'last_hour' => array('label' => 'Last Hour'),\n                    'last_24_hours' => array('label' => 'The Last 24 Hours'),\n                    'last_seven_days' => array('label' => 'The Last Seven Days'),\n                    'last_thirty_days' => array('label' => 'The Last Thirty Days'),\n                    'same_day_last_week' => array('label' => 'Same Day last Week'),\n                    'same_week_last_year' => array('label' => 'Same Week Last Year'),\n                    'same_month_last_year' => array('label' => 'Same Month Last Year'),\n                    'date_range' => array('label' => 'Date Range')\n        );\n\n    }\n\n    /**\n     * Array of Date specific Reporting Periods\n     * @depricated\n     * @return array\n     */\n    public static function date_reporting_periods() {\n\n        return array(\n\n                    'day' => array('label' => 'Day'),\n                    'month' => array('label' => 'Month'),\n                    'year' => array('label' => 'Year'),\n                    'date_range' => array('label' => 'Date Range')\n        );\n\n    }\n\n    /**\n     * Gets label for a particular reporting period\n     *\n     * @param unknown_type $period\n     * @return unknown\n     */\n    public static function get_period_label($period) {\n\n        $periods = owa_lib::reporting_periods();\n\n        return $periods[$period]['label'];\n    }\n\t\n\tpublic static function isHttps() {\n\t\t\n\t\t// check for https\n\t\t\n        if(\n        \t( isset( $_SERVER['HTTPS'] ) && strtolower( $_SERVER['HTTPS'] ) == 'on' )\n        \t|| ( ( isset( $_SERVER['HTTP_X_FORWARDED_PROTO'] ) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https' ) )\n        \t|| ( ( isset( $_SERVER['HTTP_X_FORWARDED_PORT'] ) && $_SERVER['HTTP_X_FORWARDED_PORT'] == 443 ) )\n        \t|| ( ( isset( $_SERVER['SERVER_PORT'] ) && $_SERVER['SERVER_PORT'] == 443 ) )\n        \t|| ( ( isset( $_SERVER['HTTP_ORIGIN'] ) && substr( $_SERVER['HTTP_ORIGIN'], 0, 5 ) === 'https' ) )\n\t\t\t|| ( ( isset( $_SERVER['HTTP_REFERER'] ) && substr( $_SERVER['HTTP_REFERER'], 0, 5 ) === 'https' ) )\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n    /**\n     * Assembles the current URL from request params\n     *\n     * @return string\n     */\n    public static function get_current_url() {\n\t\t\n\t\tif ( self::isHttps() ) {\n\t\t\t\n\t\t\t$url = 'https';\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\t$url = 'http';\t\n\t\t}\n        \n        if ( isset( $_SERVER['HTTP_HOST'] ) ) {\n            // contains port number\n            $domain = $_SERVER['HTTP_HOST'];\n        } else {\n            // does not contain port number.\n            $domain = $_SERVER['SERVER_NAME'];\n            if( $_SERVER['SERVER_PORT'] != 80 ) {\n                $domain .= ':' . $_SERVER['SERVER_PORT'];\n            }\n        }\n\n        $url .= '://'.$domain;\n\n        $url .= $_SERVER['REQUEST_URI'];\n\n        return $url;\n    }\n\n    public static function inputFilter($input, $options = array() ) {\n\n        return owa_sanitize::cleanInput( $input, $options );\n    }\n\n    public static function fileInclusionFilter($str) {\n\n        $str = str_replace(\"http://\", \"\", $str);\n        $str = str_replace(\"/\", \"\", $str);\n        $str = str_replace(\"\\\\\", \"\", $str);\n        $str = str_replace(\"../\", \"\", $str);\n        $str = str_replace(\"..\", \"\", $str);\n        $str = str_replace(\"?\", \"\", $str);\n        $str = str_replace(\"%00\", \"\", $str);\n\n        if (strpos($str, '%00')) {\n            $str = '';\n        }\n\n        if ($str == null) {\n            $str = '';\n        }\n\n        return $str;\n    }\n\n    /**\n     * Generic Factory method\n     *\n     * @param string $class_dir\n     * @param string $class_prefix\n     * @param string $class_name\n     * @param array $constructorArguments\n     * @return object\n     */\n    public static function factory($class_dir, $class_prefix, $class_name, $constructorArguments = array(), $class_suffix = '') {\n\n        $class_dir = $class_dir.'/';\n        $classfile = $class_dir . $class_name . '.php';\n        $class = $class_prefix . $class_name . $class_suffix;\n\n        /*\n         * Attempt to include a version of the named class, but don't treat\n         * a failure as fatal.  The caller may have already included their own\n         * version of the named class.\n         */\n        if (!class_exists($class)) {\n            if (!file_exists($classfile)) {\n                throw new Exception('Class File '.$classfile.' not existend!');\n            }\n               require_once ($classfile);\n        }\n\n        if (!class_exists($class)) {\n                throw new Exception('Class '.$class.' does not exist!');\n        }\n        return new $class($constructorArguments);\n    }\n    \n    public static function simpleFactory( $class_name, $file_path = '', $args = '' ) {\n\n        if ( ! class_exists( $class_name ) ) {\n\n            if ( ! file_exists( $file_path ) ) {\n                \n                throw new Exception(\"Factory cannot make $class_name because $file_path does not exist!\");\n            \n            } else {\n            \n                   require_once( $file_path );\n            }\n  \n        }\n       \n        if ( ! class_exists( $class_name ) ) {\n\n            throw new Exception(\"Class $class_name still does not exist!\");\n        }\n       \n        return new $class_name( $args );\n    }\n\n    /**\n     * Generic Object Singleton\n     *\n     * @param string $class_dir\n     * @param string $class_prefix\n     * @param string $class_name\n     * @param array $conf\n     * @return object\n     */\n    public static function singleton($class_dir, $class_prefix, $class_name, $conf = array()) {\n\n        static $instance;\n        \n        if (!isset($instance)) {\n            // below missing a reference becasue the static vriable can not handle a reference\n            $instance = owa_lib::factory($class_dir, $class_prefix, $class_name, $conf);\n        }\n        \n        return $instance;\n    }\n    \n    /**\n     * 302 HTTP redirect the user to a new url\n     *\n     * @param string $url\n     */\n    public static function redirectBrowser($url) {\n        //print ($url); exit;\n        // 302 redirect to URL\n        header ('Location: '.$url);\n        header ('HTTP/1.0 302 Found');\n    }\n\n    public static function makeLinkQueryString($query_params) {\n\n        $new_query_params = array();\n\n        //Load params passed by caller\n        if (!empty($this->caller_params)):\n            foreach ($this->caller_params as $name => $value) {\n                if (!empty($value)):\n                    $new_query_params[$name] = $value;\n                endif;\n            }\n        endif;\n\n        // Load overrides\n        if (!empty($query_params)):\n            foreach ($query_params as $name => $value) {\n                if (!empty($value)):\n                    $new_query_params[$name] = $value;\n                endif;\n            }\n        endif;\n\n        // Construct GET request\n        if (!empty($new_query_params)):\n            foreach ($new_query_params as $name => $value) {\n                if (!empty($value)):\n                    $get .= $name . \"=\" . $value . \"&\";\n                endif;\n            }\n        endif;\n\n        return $get;\n\n    }\n\n    public static function getRequestParams() {\n\n        $params = array();\n\n        if (!empty($_POST)) {\n            $params = $_POST;\n        } else {\n            $params = $_GET;\n        }\n\n        if (!empty($_COOKIE)) {\n\n            $params = array_merge($params, $_COOKIE);\n        }\n\n        return $params;\n    }\n\n    public static function rekeyArray($array, $new_keys) {\n\n        $new_keys = $new_keys;\n        $new_array = array();\n        foreach ($array as $k => $v) {\n\n            if (array_key_exists($k, $new_keys)) {\n                $k = $new_keys[$k];\n            }\n\n            $new_array[$k] = $v;\n        }\n\n        return $new_array;\n    }\n\n\n    public static function stripParams($params, $ns = '') {\n\n        $striped_params = array();\n\n        if (!empty($ns)) {\n\n            $len = strlen($ns);\n\n            foreach ($params as $n => $v) {\n\n                // if namespace is present in param\n                if (strstr($n, $ns)) {\n                    // strip the namespace value\n                    $striped_n = substr($n, $len);\n                    //add to striped array\n                    $striped_params[$striped_n] = $v;\n\n                }\n\n            }\n\n            return $striped_params;\n\n        } else {\n\n            return $params;\n        }\n\n    }\n\n    /**\n     * module specific require method\n     *\n     * @param unknown_type $module\n     * @param unknown_type $file\n     * @return unknown\n     * @deprecated\n     */\n    public static function moduleRequireOnce($module, $file) {\n\n        return require_once(OWA_BASE_DIR.'/modules/'.$module.'/'.$file.'.php');\n    }\n\n    /**\n     * module specific factory\n     *\n     * @param unknown_type $modulefile\n     * @param unknown_type $class_suffix\n     * @param unknown_type $params\n     * @return unknown\n     * @deprecated\n     */\n    public static function moduleFactory($modulefile, $class_suffix = null, $params = '') {\n\n        list($module, $file) = explode(\".\", $modulefile);\n        $class = 'owa_'.$file.$class_suffix;\n\n        // Require class file if class does not already exist\n        if(!class_exists($class)):\n            owa_lib::moduleRequireOnce($module, $file);\n        endif;\n\n        $obj = owa_lib::factory(OWA_BASE_DIR.'/modules/'.$module, '', $class, $params);\n        $obj->module = $module;\n\n        return $obj;\n    }\n    \n    /**\n     * redirects borwser to a particular view\n     *\n     * @param unknown_type $data\n     */\n    public static function redirectToView($data) {\n        //print_r($data);\n        $c = owa_coreAPI::configSingleton();\n        $config = $c->fetch('base');\n\n        $control_params = array('view_method', 'auth_status');\n\n\n        $get = '';\n\n        foreach ($data as $n => $v) {\n\n            if (!in_array($n, $control_params)) {\n\n                $get .= $config['ns'].$n.'='.$v.'&';\n\n            }\n        }\n\n        $new_url = sprintf($config['link_template'], $config['main_url'], $get);\n\n        owa_lib::redirectBrowser($new_url);\n    }\n\n    /**\n     * Displays a View without user authentication. Takes array of data as input\n     *\n     * @param array $data\n     * @deprecated\n     */\n    public static function displayView($data, $params = array()) {\n\n        $view =  owa_lib::moduleFactory($data['view'], 'View', $params);\n\n        return $view->assembleView($data);\n\n    }\n\n    /**\n     * Create guid from string\n     *\n     * @param     string $string\n     * @return     integer\n     * @access     private\n     */\n    public static function setStringGuid($string) {\n\n        if ( $string ) {\n\n\n            if ( owa_coreAPI::getSetting('base', 'use_64bit_hash') && PHP_INT_MAX == '9223372036854775807') {\n                // make 64 bit ID from partial sha1\n                return (string) (int) hexdec( substr( sha1( strtolower( $string ) ), 0, 16 ) );\n            } else {\n                // make 32 bit ID from crc32\n                return crc32( strtolower( $string ) );\n            }\n        }\n    }\n\n    /**\n     * Add constraints into SQL where clause\n     *\n     * @param     array $constraints\n     * @return     string $where\n     * @access     public\n     * @depricated\n     * @todo remove\n     */\n    function addConstraints($constraints) {\n\n        if (!empty($constraints)):\n\n            $count = count($constraints);\n\n            $i = 0;\n\n            $where = '';\n\n            foreach ($constraints as $key => $value) {\n\n                if (empty($value)):\n                    $i++;\n                else:\n\n                    if (!is_array($value)):\n                        $where .= $key . ' = ' . \"'$value'\";\n                    else:\n\n                        switch ($value['operator']) {\n                            case 'BETWEEN':\n                                $where .= sprintf(\"%s BETWEEN '%s' AND '%s'\", $key, $value['start'], $value['end']);\n                                break;\n                            default:\n                                $where .= sprintf(\"%s %s '%s'\", $key, $value['operator'], $value['value']);\n                                break;\n                        }\n\n\n                    endif;\n\n                    if ($i < $count - 1):\n\n                        $where .= \" AND \";\n\n                    endif;\n\n                    $i++;\n\n                endif;\n\n            }\n            // needed in case all values in the array are empty\n            if (!empty($where)):\n                return $where;\n            else:\n                return;\n            endif;\n\n        else:\n\n            return;\n\n        endif;\n\n\n\n    }\n\n    public static function assocFromString($string_state, $inner = '=>', $outer = '|||') {\n\n        if (!empty($string_state)):\n\n            if (strpos($string_state, $outer) === false):\n\n                return $string_state;\n\n            else:\n\n                $array = explode($outer, $string_state);\n\n                $state = array();\n\n                foreach ($array as $key => $value) {\n\n                    list($realkey, $realvalue) = explode($inner, $value);\n                    $state[$realkey] = $realvalue;\n\n                }\n\n            endif;\n\n        endif;\n\n        return $state;\n\n\n    }\n\n    /**\n      * Simple function to replicate PHP 5 behaviour\n      */\n\n    public static function microtime_float() {\n        list($usec, $sec) = explode(\" \", microtime());\n        return ((float)$usec + (float)$sec);\n    }\n\n    /**\n     * Lists all files in a Directory\n     *\n     */\n    public static function listDir($start_dir='.', $recursive = true) {\n\n        $files = array();\n\n        if (is_dir($start_dir)):\n\n            $fh = opendir($start_dir);\n\n            while (($file = readdir($fh)) !== false) {\n\n                // loop through the files, skipping . and .., and recursing if necessary\n                if (strcmp($file, '.')==0 || strcmp($file, '..')==0) continue;\n                $filepath = $start_dir . '/' . $file;\n\n\n                if (is_dir($filepath)):\n                    if ($recursive === true):\n                        $files = array_merge($files, owa_lib::listDir($filepath));\n                    endif;\n                else:\n                    array_push($files, array('name' => $file, 'path' => $filepath));\n                endif;\n            }\n\n            closedir($fh);\n\n        else:\n            // false if the function was called with an invalid non-directory argument\n            $files = false;\n        endif;\n\n      return $files;\n\n    }\n\n    public static function makeDateArray($result, $format) {\n\n        if (!empty($result)) {\n\n            $timestamps = array();\n\n            foreach ($result as $row) {\n\n                $timestamps[]= mktime(0,0,0,$row['month'],$row['day'],$row['year']);\n            }\n\n            return owa_lib::makeDates($timestamps, $format);\n\n        } else {\n\n            return array();\n        }\n\n    }\n\n    public static function makeDates($timestamps, $format) {\n\n        sort($timestamps);\n\n            $new_dates = array();\n\n            foreach ($timestamps as $timestamp) {\n\n                $new_dates[] = date($format, $timestamp);\n\n            }\n\n        return $new_dates;\n\n    }\n\n    public static function html2txt($document){\n        $search = array('@<script[^>]*?>.*?</script>@si',  // Strip out javascript\n                       '@<style[^>]*?>.*?</style>@siU',    // Strip style tags properly\n                       '@<[\\/\\!]*?[^<>]*?>@si',            // Strip out HTML tags\n                       '@<![\\s\\S]*?--[ \\t\\n\\r]*>@'         // Strip multi-line comments including CDATA\n        );\n        $text = preg_replace($search, '', $document);\n        return $text;\n    }\n\n    public static function escapeNonAsciiChars($string) {\n\n        return preg_replace('/[^(\\x20-\\x7F)]*/','', $string);\n    }\n\n    /**\n     * Truncate string\n     *\n     * @param string $str\n     * @param integer $length\n     * @param string $trailing\n     * @return string\n     */\n    public static function truncate ($str, $length=10, $trailing='...')  {\n\n        // take off chars for the trailing\n        $length-=strlen($trailing);\n        if (strlen($str) > $length):\n            // string exceeded length, truncate and add trailing dots\n             return substr($str,0,$length).$trailing;\n        else:\n            // string was already short enough, return the string\n            $res = $str;\n          endif;\n   \n      return $res;\n    }\n\n    /**\n     * Simple Password Encryption\n     *\n     * @param string $password\n     * @return string\n     */\n    public static function encryptOldPassword($password) {\n\n        return md5(strtolower($password).strlen($password));\n        //return owa_coreAPI::saltedHash( $password, 'auth');\n    }\n    public static function encryptPassword($password) {\n\n        // check function exists to support older PHP\n        if ( function_exists('password_hash') ) {\n            return password_hash( $password, PASSWORD_DEFAULT );\n        } else {\n            return self::encryptOldPassword($password);\n        }\n    }\n\n    public static function hash( $hash_type, $data, $salt = '' ) {\n        \n        if ( ! $hash_type ) {\n            \n            $hash_type = 'md5';\n        }\n        \n        return hash_hmac( $hash_type, $data, $salt );\n    }\n\n    public static function timestampToYyyymmdd($timestamp = '') {\n\n        if(empty($timestamp)) {\n            $timestamp = time();\n        }\n        //print \"before date\";\n        $yyyymmdd = date(\"Ymd\", $timestamp);\n        ///print \"after date\";\n        return $yyyymmdd;\n    }\n\n    public static function setContentTypeHeader($type = 'html') {\n\n        if (!$type) {\n            $type = 'html';\n        }\n\n        $content_types = array('html' => 'text/html',\n                               'xml' => 'text/xml',\n                               'json' => 'application/json',\n                               'jsonp' => 'application/json',\n                               'csv' => 'text/csv');\n\n        if (array_key_exists($type, $content_types)) {\n            $mime = $content_types[$type];\n            header('Content-type: '.$mime);\n        }\n    }\n\n    public static function array_values_assoc($assoc) {\n\n        $values = array();\n\n        foreach ($assoc as $k => $v) {\n\n            if (!empty($v)) {\n                $values[] = $v;\n            }\n        }\n\n        return $values;\n    }\n\n    public static function prepareCurrencyValue($string) {\n\n        return $string * 100;\n    }\n\n    public static function utf8Encode($string) {\n\n        if ( owa_lib::checkForUtf8( $string ) ) {\n            return $string;\n        } else {\n            if (function_exists('iconv')) {\n\t            \n\t            if ( function_exists( 'mb_detect_encoding' ) ) {\n\t\t            \n\t\t            return iconv(mb_detect_encoding( $string ),'UTF-8//TRANSLIT', $string);\n\t\t            \n\t\t        } else {\n\t\t\t        \n\t\t\t    \treturn iconv('UTF-8','UTF-8//TRANSLIT', $string);\n\t\t        }\n\t             \n            } else {\n                // at least worth a try\n                return utf8_encode($string);\n            }\n        }\n    }\n\n    public static function checkForUtf8($str) {\n\n        if ( function_exists( 'mb_detect_encoding' ) ) {\n            $cur_encoding = mb_detect_encoding( $str ) ;\n            if ( $cur_encoding == \"UTF-8\" && mb_check_encoding( $str,\"UTF-8\" ) ) {\n                return true;\n            }\n        } else {\n\n            $len = strlen( $str );\n            for( $i = 0; $i < $len; $i++ ) {\n\n                $c = ord( $str[$i] );\n                if ($c > 128) {\n\n                    if ( ( $c > 247 ) ) {\n                        return false;\n                    } elseif ( $c > 239 ) {\n                        $bytes = 4;\n                    } elseif ( $c > 223 ) {\n                        $bytes = 3;\n                    } elseif ( $c > 191 ) {\n                        $bytes = 2;\n                    } else {\n                        return false;\n                    }\n\n                    if ( ( $i + $bytes ) > $len ) {\n                        return false;\n                    }\n\n                    while ( $bytes > 1 ) {\n                        $i++;\n                        $b = ord( $str[$i] );\n                        if ( $b < 128 || $b > 191 ) {\n                            return false;\n                        }\n                        $bytes--;\n                    }\n                }\n            }\n            return true;\n        }\n    }\n\n    public static function formatCurrency($value, $local, $currency) {\n\n        $value = $value / 100;\n\n        if ( function_exists('numfmt_create') ) {\n\n            $numberFormatter = new NumberFormatter($local, NumberFormatter::CURRENCY);\n            return $numberFormatter->formatCurrency($value, $currency);\n\n        } else {\n\n            setlocale( LC_MONETARY, $local );\n            return money_format( '%.' . 2 . 'n',$value );\n        }\n    }\n\n    public static function crc32AsHex($string) {\n        $crc = crc32($string);\n        //$crc += 0x100000000;\n        if ($crc < 0) {\n            $crc = 0xFFFFFFFF + $crc + 1;\n        }\n        return dechex($crc);\n    }\n\n    public static function getLocalTimestamp($utc = '') {\n\n        if ( ! $utc ) {\n            $utc = time();\n        }\n        $local_timezone_offset = date('Z');\n        $daylight_savings = date('I') * 3600;\n        $local_time = $utc - $local_timezone_offset + $daylight_savings;\n        return $local_time;\n    }\n\n    public static function sanitizeCookieDomain($domain) {\n\n        // Remove port information.\n         $port = strpos( $domain, ':' );\n        if ( $port ) {\n            $domain = substr( $domain, 0, $port );\n        }\n\n        // check for leading period, add if missing\n        $period = substr( $domain, 0, 1);\n        if ( $period != '.' ) {\n            $domain = '.'.$domain;\n        }\n\n        return $domain;\n    }\n\n    public static function stripWWWFromDomain($domain) {\n\n        $done = false;\n        $part = substr( $domain, 0, 5 );\n        if ($part === '.www.') {\n            //strip .www.\n            $domain = substr( $domain, 5);\n            // add back the leading period\n            $domain = '.'.$domain;\n            $done = true;\n        }\n\n        if ( ! $done ) {\n            $part = substr( $domain, 0, 4 );\n            if ($part === 'www.') {\n                //strip .www.\n                $domain = substr( $domain, 4);\n                $done = true;\n            }\n\n        }\n\n        return $domain;\n    }\n\n    /**\n     *  Use this function to parse out the url and query array element from\n     *  a url.\n     */\n    public static function parse_url( $url ) {\n\n        $url = parse_url($url);\n\n        if ( isset( $url['query'] ) ) {\n            $var = $url['query'];\n\n            $var  = html_entity_decode($var);\n            $var  = explode('&', $var);\n            $arr  = array();\n\n              foreach( $var as $val ) {\n\n                if ( strpos($val, '=') ) {\n                    $x = explode('=', $val);\n\n                    if ( isset( $x[1] ) ) {\n                        $arr[$x[0]] = urldecode($x[1]);\n                    }\n                } else {\n                    $arr[$val] = '';\n                }\n               }\n              unset($val, $x, $var);\n\n              $url['query_params'] = $arr;\n\n        }\n\n          return $url;\n    }\n\n    public static function iniGet( $name ) {\n\n        $b = ini_get( $name );\n\n        switch ( strtolower( $b ) ) {\n            case 'on':\n            case 'yes':\n            case 'true':\n                return true;\n\n            default:\n                return (bool) (int) $b;\n        }\n\n    }\n\n    // better empty check when you need to accept these as valid, non-empty values:\n    // - 0 (0 as an integer)\n    //- 0.0 (0 as a float)\n    //- \"0\" (0 as a string)\n    public static function isEmpty($value) {\n\n        if ( empty( $value ) && ! is_numeric( $value ) ) {\n\t        \n\t        return true;\n        }\n    }\n\n    public static function isIpAddressValid( $ip = '' ) {\n\n        if ( $ip && filter_var( $ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE ) ) {\n              // it's valid\n              return true;\n        } else {\n              // it's not valid\n              return false;\n        }\n    }\n\n    public static function zeroFill( $number, $char_length ) {\n\n        return str_pad( (int) $number, $char_length, \"0\", STR_PAD_LEFT );\n    }\n\n    public static function generateRandomUid($seed='') {\n\n        $time = (string) time();\n        $random = owa_lib::zeroFill( mt_rand( 0, 999999 ), 6 );\n        if ( defined('OWA_SERVER_ID') ) {\n            $server = owa_lib::zeroFill( OWA_SERVER_ID, 3 );\n        } else {\n            $server = substr( getmypid(), 0, 3);\n        }\n\n        return $time.$random.$server;\n    }\n\n    public static function unparseUrl($parsed_url, $ommit = array() ) {\n\n        $url = '';\n        $p = array();\n\n        $p['scheme']   = isset($parsed_url['scheme']) ? $parsed_url['scheme'] . '://' : '';\n        $p['host']     = isset($parsed_url['host']) ? $parsed_url['host'] : '';\n        $p['port']     = isset($parsed_url['port']) ? ':' . $parsed_url['port'] : '';\n        $p['user']     = isset($parsed_url['user']) ? $parsed_url['user'] : '';\n        $p['pass']     = isset($parsed_url['pass']) ? ':' . $parsed_url['pass']  : '';\n        $p['pass']     = ( $p['user'] || $p['pass'] ) ? $p['pass'].\"@\" : '';\n        $p['path']     = isset($parsed_url['path']) ? $parsed_url['path'] : '';\n        $p['query']    = isset($parsed_url['query']) ? '?' . $parsed_url['query'] : '';\n        $p['fragment'] = isset($parsed_url['fragment']) ? '#' . $parsed_url['fragment'] : '';\n\n        if ( $ommit ) {\n            foreach ( $ommit as $key ) {\n                if ( isset( $p[ $key ] ) ) {\n                    $p[ $key ] = '';\n                }\n            }\n        }\n\n          return $p['scheme'].$p['user'].$p['pass'].$p['host'].$p['port'].$p['path'].$p['query'].$p['fragment'];\n    }\n    \n    public static function removeQueryParamFromUrl( $url, $key ) {\n\t    \n\t    $url = preg_replace('/([?&])'.$key.'=[^&]+(&|$)/','$1',$url);\n\t    return rtrim( $url, '&');\n    }\n\n    public static function moveFile( $oldfile, $newfile ) {\n\n        if ( file_exists( $oldfile ) ) {\n\n            if ( ! rename( $oldfile, $newfile ) ) {\n\n                if ( copy( $oldfile, $newfile ) ) {\n\n                    unlink( $oldfile );\n\n                    return true;\n                }\n\n            } else {\n\n                return true;\n            }\n        }\n    }\n    \n    public static function anonymizeIp( $ip_address ) {\n\t    \n\t    $ipv4NetMask = \"255.255.255.0\";\n\t    $ipv6NetMask = \"ffff:ffff:ffff:ffff:0000:0000:0000:0000\";\n\t    \n\t    $packed_address = inet_pton( $ip_address);\n\n        if ( strlen( $packed_address ) == 4 ) {\n\t        \n            return inet_ntop( inet_pton( $ip_address ) & inet_pton( $ipv4NetMask ) );\n            \n        } elseif ( strlen( $packed_address ) == 16 ) {\n\t        \n            return inet_ntop( inet_pton( $ip_address ) & inet_pton( $ipv6NetMask ) );\n        }\n    }\n    \n    public static function isIpv6SupportEnabled() {\n\t    \n\t\tif ( defined( 'AF_INET6' ) ) {\n\t\t\t\n\t\t\treturn true;\n\t\t}\n    }\n\n    public static function isValidIp( $ip_address ) {\n\t\t\n\t\treturn filter_var( $ip_address, FILTER_VALIDATE_IP, [] );\n    }\n\n    // check to see if the IP address falls within known private IP ranges\n    public static function isNotPrivateIp( $ip_address ) {\n\n\t\treturn filter_var( $ip_address, FILTER_VALIDATE_IP, ['flags' => FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE ] );\n    }\n    \n    public static function isValidIpv6( $ip_address ) {\n\t    \n\t    return filter_var( $ip_address, FILTER_VALIDATE_IP, ['flags' => FILTER_FLAG_IPV6 ] );\n    }\n    \n    public static function keyExistsNotEmpty( $key, $array ) {\n\t    \n\t    if ( array_key_exists($key, $array) && ! empty( $array[ $key ] ) )  {\n\t\t    \n\t\t    return true;\n\t    }\n    }\n    \n    public static function setDefaultParams( $defaults, $params ) {\n\t    \n\t    if ( is_array( $defaults ) && is_array( $params ) ) {\n\t    \n\t    \treturn array_merge( $defaults, array_filter( $params) );\n\t    }\n    }\n    \n    public static function inDebug() {\n\t    \n\t    if ( ( defined( 'OWA_DEBUG') &&  OWA_DEBUG === true ) ||\n\t    \t ( defined( 'OWA_ERROR_HANDLER') && OWA_ERROR_HANDLER === 'development' )\n\t\t){\n\t\t\treturn true;\n\t\t}\t    \t\n    }\n    \n     public static function inRestDebug() {\n\t    \n\t    if ( ( defined( 'OWA_REST_DEBUG') &&  OWA_REST_DEBUG === true ) ){\n\t\t\t\n\t\t\treturn true;\n\t\t}\t    \t\n    }\n\n}\n\n?>"
        },
        {
          "name": "owa_location.php",
          "type": "blob",
          "size": 1.5341796875,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\n/**\n * Geo-location abstract class\n * \n * Looks up the geographic location of a request based on IP address lookups in a variety of\n * databses or web services.\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\nclass owa_location {\n\n    /**\n     * City\n     *\n     * @var string\n     */\n    var $city;\n\n    /**\n     * Country\n     *\n     * @var string\n     */\n    var $country;\n\n    /**\n     * Latitude coordinates\n     *\n     * @var string\n     */\n    var $latitude;\n\n    /**\n     * Longitude coordinates\n     *\n     * @var string\n     */\n    var $longitude;\n\n    /**\n     * Location of concrete class plugins\n     *\n     * @var unknown_type\n     */\n    var $plugin_dir;\n\n    /**\n     * Constructor\n     *\n     * @return owa_location\n     */\n    function __construct() {\n\n    }\n}\n\n?>"
        },
        {
          "name": "owa_metric.php",
          "type": "blob",
          "size": 7.3759765625,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\nrequire_once(OWA_BASE_CLASS_DIR.'pagination.php');\nrequire_once(OWA_BASE_CLASS_DIR.'timePeriod.php');\n\n/**\n * Metric\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\nclass owa_metric extends owa_base {\n\n    /**\n     * Current Time\n     *\n     * @var array\n     */\n    var $time_now = array();\n    \n    /**\n     * Data\n     *\n     * @var array\n     */\n    var $data;\n    \n    /**\n     * The params of the caller, either a report or graph\n     *\n     * @var array\n     */\n    var $params = array();\n        \n    /**\n     * The lables for calculated measures\n     *\n     * @var array\n     */\n    var $labels = array();\n    \n    /**\n     * Page results\n     *\n     * @var boolean\n     */\n    var $page_results = false;\n    \n    /**\n     * Data Access Object\n     *\n     * @var object\n     */\n    var $db;\n    \n    var $_default_offset = 0;\n    \n    var $pagination;\n    \n    var $page;\n    \n    var $limit;\n    \n    var $order;\n    \n    var $table;\n    \n    var $select = array();\n    \n    var $time_period_constraint_format = 'timestamp';\n    \n    var $column;\n    \n    var $is_calculated = false;\n    \n    var $is_aggregate;\n    \n    var $data_type;\n    \n    var $name;\n    \n    var $supported_data_types = array('percentage', 'decimal', 'integer', 'url', 'yyyymmdd', 'timestamp', 'string', 'currency');\n\n    var $type, $entity, $all_columns;\n        \n    function __construct($params = array()) {\n        \n        if (!empty($params)) {\n            $this->params = $params;\n        }\n            \n        //$this->db = owa_coreAPI::dbSingleton();\n\n        //$this->pagination = new owa_pagination;\n        \n        return parent::__construct();\n    }\n    \n    /**\n     * Set the labels of the measures\n     *\n     */\n    function setLabels($array) {\n    \n        $this->labels = $array;\n        return;\n    }\n    \n    /**\n     * Sets an individual label\n     * return the key so that it can be nested\n     * @return $key string\n     */\n    function addLabel($key, $label) {\n        \n        $this->labels[$key] = $label;\n        return $key;\n    }\n    \n    function getLabel($key = '') {\n        \n        if (!$key) {\n            $key = $this->getName();\n        }\n        \n        return $this->labels[$key];\n    }\n    \n    /**\n     * Sets an individual label\n     * return the key so that it can be nested\n     * @return $key string\n     */\n    function setLabel($label) {\n        \n        $this->labels[$this->getName()] = $label;\n        \n    }\n    \n    /**\n     * Retrieve the labels of the measures\n     *\n     */\n    function getLabels() {\n    \n        return $this->labels;\n    \n    }\n    /*\n\n    function getPagination() {\n        \n        $count = $this->calculatePaginationCount();\n        $this->pagination->total_count = $count;\n        return $this->pagination->getPagination();\n    \n    }\n    \n    */\n    function zeroFill(&$array) {\n    \n        // PHP 5 only function used here\n        if (function_exists(\"array_walk_recursive\")) {\n            array_walk_recursive($array, array($this, 'addzero'));\n        } else {\n            owa_lib::array_walk_recursive($array, array(get_class($this).'Metric', 'addzero'));\n        }\n        \n        return $array;\n        \n    }\n    \n    function addzero(&$v, $k) {\n        \n        if (empty($v)) {\n            \n            $v = 0;\n            \n        }\n        \n        return;\n    }\n    /*\n\n    function getPeriod() {\n    \n        return $this->params['period'];\n    }\n    \n    function getOrder() {\n    \n        if (array_key_exists('order', $this->params)) {\n            return $this->params['order'];\n        }\n    }\n    \n    function getLimit() {\n        \n        return $this->limit;\n        \n    }\n    \n    */\n    function setEntity($name) {\n        \n        $this->entity = owa_coreAPI::entityFactory($name);\n    }\n    \n    function getTableName() {\n        \n        return $this->entity->getTableName();\n    }\n    \n    function getTableAlias() {\n        \n        return $this->entity->getTableAlias();\n    }\n    \n    function setSelect($column, $as = '') {\n        \n        if (!$as) {\n            \n            $as = $this->getName();\n        }\n        \n        $this->select = array($column, $as);\n    }\n    \n    function getSelect() {\n        \n        if ( $this->select) {\n            // old style metrics populate this explicitly.\n            return $this->select;\n        } else {\n            $db = owa_coreAPI::dbSingleton();\n            switch ( $this->type ) {\n                \n                case 'count':\n                    \n                    $statement = $db->count( $this->getColumn() );\n                    break;\n                \n                case 'distinct_count':\n                    $statement = $db->count( $db->distinct( $this->getColumn() ) );\n                    break;\n                \n                case 'sum':\n                    $statement = $db->sum( $this->getColumn() );\n                    break;\n            }\n            \n            return array( $statement, $this->getName() );\n        }\n        \n    }\n    \n    function getSelectWithNoAlias() {\n        \n        if ( $this->select ) {\n            return $this->select[0];\n        } else {\n            $select = $this->getSelect();\n            return $select[0];\n        }\n    }\n    \n    function setName($name) {\n        \n        $this->name = $name;\n    }\n    \n    function getName() {\n        \n        return $this->name;\n    }\n    \n    function getFormat() {\n        \n        if (array_key_exists('result_format', $this->params)) {\n            return $this->params['result_format'];\n        }\n    }\n    \n    /**\n     * Sets a metric's column\n     */\n    function setColumn($col_name, $name = '') {\n        \n        if (!$name) {\n            $name = $this->getName();\n        }\n        $this->column = $this->entity->getTableAlias().'.'.$col_name;\n        $this->all_columns[$name] = $this->column;\n        \n    }\n    \n    /**\n     * Gets a metric's column name\n     */\n    function getColumn() {\n        \n        return $this->column;\n    }\n    \n    function getEntityName() {\n        return $this->entity->getName();\n    }\n    \n    function isCalculated() {\n        return $this->is_calculated;\n    }\n    \n    function setDataType($string) {\n        \n        if (in_array($string, $this->supported_data_types)) {\n            $this->data_type = $string;\n        }\n        \n    }\n    \n    function getDataType() {\n        return $this->data_type;\n    }\n    \n    function setAggregate() {\n    \n        $this->is_aggregate = true;\n    }\n    \n    function isAggregate() {\n    \n        return $this->is_aggregate;\n    }\n    \n    function setMetricType( $type ) {\n        $this->type = $type;\n        \n        if ( $type === 'calculated' ) {\n             $this->is_calculated = true;\n        }\n    }\n}\n\n?>\n"
        },
        {
          "name": "owa_module.php",
          "type": "blob",
          "size": 32.7421875,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\n/**\n * Abstract Module Class\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n\nabstract class owa_module {\n\n    /**\n     * Name of module\n     *\n     * @var string\n     */\n    var $name;\n\n    /**\n     * Description of Module\n     *\n     * @var string\n     */\n    var $description;\n\n    /**\n     * Version of Module\n     *\n     * @var string\n     */\n    var $version;\n\n    /**\n     * Schema Version of Module\n     *\n     * @var string\n     */\n    //var $schema_version = 1;\n\n    /**\n     * Name of author of module\n     *\n     * @var string\n     */\n    var $author;\n\n    /**\n     * URL for author of module\n     *\n     * @var unknown_type\n     */\n    var $author_url;\n\n    /**\n     * Wiki Page title. Used to generate link to OWA wiki for this module.\n     *\n     * Must be unique or else it will could clobber another wiki page.\n     *\n     * @var string\n     */\n    var $wiki_title;\n\n    /**\n     * name used in display situations\n     *\n     * @var unknown_type\n     */\n    var $display_name;\n\n    /**\n     * Array of event names that this module has handlers for\n     *\n     * @var array\n     */\n    var $subscribed_events;\n\n    /**\n     * Array of link information for admin panels that this module implements.\n     *\n     * @var array\n     */\n    var $admin_panels;\n\n    /**\n     * Array of navigation links that this module implements\n     *\n     * @var unknown_type\n     */\n    var $nav_links;\n\n    /**\n     * Array of metric names that this module implements\n     *\n     * @var unknown_type\n     */\n    var $metrics;\n\n    /**\n     * Array of graphs that are implemented by this module\n     *\n     * @var array\n     */\n    var $graphs;\n\n    /**\n     * The Module Group that the module belongs to.\n     *\n     * This is used often to group a module's features or functions together in the UI\n     *\n     * @var string\n     */\n    var $group;\n\n    /**\n     * Array of Entities that are implmented by the module\n     *\n     * @var array\n     */\n    var $entities = array();\n\n    /**\n     * Required Schema Version\n     *\n     * @var array\n     */\n    var $required_schema_version;\n\n    /**\n     * Available Updates\n     *\n     * @var array\n     */\n    var $updates = array();\n\n    /**\n     * Event Processors Map\n     *\n     * @var array\n     */\n    var $event_processors = array();\n\n    /**\n     * Dimensions\n     *\n     * @var array\n     */\n    var $dimensions = array();\n\n    /**\n     * Dimensions\n     *\n     * @var array\n     */\n    var $denormalizedDimensions = array();\n\n    /**\n     *\n     * @var array\n     */\n    var $formatters = array();\n\n    /**\n     * cli_commands\n     *\n     * @var array\n     */\n    var $cli_commands = array();\n\n    /**\n     * API Methods\n     *\n     * @var array\n     */\n    var $api_methods = array();\n\n    /**\n     * Controllers\n     *\n     * @var array\n     */\n    var $actionControllers = array();\n\n    /**\n     * Update from CLI Required flag\n     *\n     * Used by controllers to see if an update error was becuase it needs\n     * to be applied from the command line instead of via the browser.\n     *\n     * @var boolean\n     */\n    var $update_from_cli_required;\n    \n    /**\n\t * Filesystem path of the module's directory\n\t */\n    var $path;\n\n\tvar $config_required;\n\n    /**\n     * Constructor\n     *\n     *\n     */\n    function __construct() {\n\t\t\n\t\t$this->path = OWA_MODULES_DIR . $this->name . '/';\n\t\t\n        //parent::__construct();\n\t\t\n\t\t/**\n\t\t * Initial registration calls\n\t\t */\n\t\t$this->init();\n\t\t\n        /**\n         * Register Filters\n         */\n        //$this->registerFilters();\n\n        /**\n         * Register Metrics\n         */\n        $this->registerMetrics();\n\n        /**\n         * Register Dimensions\n         */\n        $this->registerDimensions();\n\n        /**\n         * Register CLI Commands\n         */\n        $this->registerCliCommands();\n\n        /**\n         * Register API Methods\n         */\n        $this->registerApiMethods();\n\n        /**\n         * Register Build Packages\n         */\n        $this->registerBuildPackages();\n\n        $this->_registerEventHandlers();\n        $this->_registerEventProcessors();\n        $this->_registerEntities();\n        $this->registerActions();\n\n    }\n    \n    function init() {\n\t    \n\t    return false;\n    }\n\n    /**\n     * Method for registering event processors\n     *\n     */\n    function _registerEventProcessors() {\n\n        return false;\n    }\n\n    /**\n     * Returns array of admin Links for this module to be used in navigation\n     *\n     * @access public\n     * @return array\n     */\n    function getAdminPanels() {\n\n        return $this->admin_panels;\n    }\n\n    /**\n     * Returns array of report links for this module that will be\n     * used in report navigation\n     *\n     * @access public\n     * @return array\n     */\n    function getNavigationLinks() {\n\n        return $this->nav_links;\n    }\n\n    /**\n     * Abstract method for registering event handlers\n     *\n     * Must be defined by a concrete module class for any event handlers to be registered\n     *\n     * @access public\n     * @return array\n     */\n    function _registerEventHandlers() {\n\n        return;\n    }\n\n    /**\n     * Attaches an event handler to the event queue\n     *\n     * @param array $event_name\n     * @param string $handler_name\n     * @return boolean\n     */\n    function registerEventHandler($event_name, $handler_name, $method = 'notify', $dir = 'handlers') {\n\n        if (!is_object($handler_name)) {\n\n            //$handler = &owa_lib::factory($handler_dir,'owa_', $handler_name);\n            $handler_name = owa_coreAPI::moduleGenericFactory($this->name, $dir, $handler_name, $class_suffix = null, $params = '', $class_ns = 'owa_');\n        }\n\n        $eq = owa_coreAPI::getEventDispatch();\n        $eq->attach($event_name, array($handler_name, $method));\n    }\n\n    /**\n     * Hooks a function to a filter\n     *\n     * @param array $event_name\n     * @param string $handler_name\n     * @return boolean\n     */\n    function registerFilter($filter_name, $handler_name, $method = '', $priority = 10, $dir = 'filters') {\n\n        // if it's an object\n        if ( is_object( $handler_name ) ) {\n\n            owa_coreAPI::registerFilter($filter_name, array($handler_name, $method), $priority);\n\n        // if it's a static method name\n        } elseif ( strpos( $handler_name, '::') ) {\n\n            owa_coreAPI::registerFilter($filter_name, $handler_name, $priority);\n\n        // else try to create the class object\n        } else {\n            // create object\n            if ( ! class_exists( $handler_name ) ) {\n\n                //$handler = &owa_lib::factory($handler_dir,'owa_', $handler_name);\n                $class = owa_coreAPI::moduleGenericFactory($this->name, $dir, $handler_name, $class_suffix = null, $params = '', $class_ns = 'owa_');\n            }\n\n            // register\n            owa_coreAPI::registerFilter($filter_name, array($class, $method), $priority);\n        }\n    }\n\n    /**\n     * Attaches an event handler to the event queue\n     *\n     * @param array $event_name\n     * @param string $handler_name\n     * @return boolean\n     * @depricated\n     */\n    function _addHandler($event_name, $handler_name) {\n\n        return $this->registerEventHandler($event_name, $handler_name);\n\n    }\n\n    /**\n     * Abstract method for registering administration/settings page\n     *\n     * @access public\n     * @return array\n     */\n    function registerAdminPanels() {\n\n        return;\n    }\n\n    /**\n     * Registers an admin panel with this module\n     *\n     */\n    function registerSettingsPanel($panel) {\n\n        $this->admin_panels[] = $panel;\n\n        return true;\n    }\n\n    /**\n     * Registers an admin panel with this module\n     * @depricated\n     */\n    function addAdminPanel($panel) {\n\n        return $this->registerSettingsPanel($panel);\n    }\n\n    /**\n     * Adds a new Subgroup in the navigation\n     *\n     * @param string $subgroupName\n     * @param string $ref\n     * @param string $anchortext\n     * @param integer $order\n     * @param string $priviledge\n     * @param string $groupName\n     */\n    public function addNavigationSubGroup($subgroupName, $ref, $anchortext, $order = 0, $priviledge = 'view_reports', $groupName = 'Reports', $icon_class = '') {\n        $this->nav_links[$groupName][$subgroupName] = $this->getLinkStruct($ref, $anchortext, $order,$priviledge, $icon_class);\n    }\n\n    /**\n     * Adds a new Link to an existing Subgroup in the navigation\n     *\n     * @param string $subgroupName\n     * @param string $ref\n     * @param string $anchortext\n     * @param integer $order\n     * @param string $priviledge\n     * @param string $groupName\n     */\n    public function addNavigationLinkInSubGroup($subgroupName, $ref, $anchortext, $order = 0, $priviledge = 'view_reports', $groupName = 'Reports') {\n        $this->nav_links[$groupName][$subgroupName]['subgroup'][] = $this->getLinkStruct($ref, $anchortext, $order,$priviledge);\n    }\n\n    /**\n     * Abstract method for registering a module's entities\n     *\n     * This method must be defined in concrete module classes in order for entities to be registered.\n     */\n    function _registerEntities() {\n\n        return false;\n    }\n\n    function registerNavigation() {\n\n        return false;\n    }\n\n\n    /**\n     * Registers an Entity\n     *\n     * Can take an array of entities or just a single entity as a string.\n     * Will add an enetiy to the module's entity array. Required for entity installation, etc.\n     *\n     * @param $entity_name array or string\n     */\n    function registerEntity($entity_name) {\n\n        if (is_array($entity_name)) {\n            $this->entities = array_merge($this->entities, $entity_name);\n        } else {\n            $this->entities[] = $entity_name;\n        }\n    }\n\n    /**\n     * Registers Entity\n     *\n     * Depreicated see registerEntity\n     *\n     * @depricated\n     */\n    function _addEntity($entity_name) {\n\n        return $this->registerEntity($entity_name);\n    }\n\n\n    function getEntities() {\n\n        return $this->entities;\n    }\n\n    /**\n     * Installation method\n     *\n     * Creates database tables and sets schema version\n     *\n     */\n    function install() {\n\n        owa_coreAPI::notice('Starting installation of module: '.$this->name);\n\n        $errors = '';\n\n        // Install schema\n        if (!empty($this->entities)) {\n\n            foreach ($this->entities as $k => $v) {\n\n                $entity = owa_coreAPI::entityFactory($this->name.'.'.$v);\n                //owa_coreAPI::debug(\"about to  execute createtable\");\n                $status = $entity->createTable();\n\n                if ($status != true) {\n                    owa_coreAPI::notice(\"Entity Installation Failed.\");\n                    $errors = true;\n                    //return false;\n                }\n\n            }\n        }\n\n        // activate module and persist configuration changes\n        if ($errors != true) {\n\n            // run post install hook\n            $ret = $this->postInstall();\n\n            if ($ret == true) {\n\t            \n                owa_coreAPI::notice(\"Post install procedure was a success.\");\n                \n            } else {\n\t            \n                owa_coreAPI::notice(\"Post install procedure failed.\");\n            }\n\n            // save schema version to configuration\n            owa_coreAPI::persistSetting( $this->name, 'schema_version', $this->getRequiredSchemaVersion() );\n            //activate the module and save the configuration\n            $this->activate();\n            owa_coreAPI::notice(\"Installation complete.\");\n            return true;\n\n        } else {\n            owa_coreAPI::notice(\"Installation failed.\");\n            return false;\n        }\n\n    }\n\n    /**\n     * Post installation hook\n     *\n     */\n    function postInstall() {\n\n        return true;\n    }\n\n    function isCliUpdateModeRequired() {\n\n        return $this->update_from_cli_required;\n    }\n\n    /**\n     * Checks for and applies schema upgrades for the module\n     *\n     */\n    function update() {\n\n        // list files in a directory\n        $files = owa_lib::listDir(OWA_DIR.'modules'.'/'.$this->name.'/'.'updates', false);\n        //print_r($files);\n\n        $current_schema_version = owa_coreAPI::getSetting($this->name, 'schema_version');\n\n        // extract sequence\n        foreach ($files as $k => $v) {\n            // the use of %d casts the sequence number as an int which is critical for maintaining the\n            // order of the keys in the array that we are going ot create that holds the update objs\n            //$n = sscanf($v['name'], '%d_%s', $seq, $classname);\n            $seq = substr($v['name'], 0, -4);\n\n            settype($seq, \"integer\");\n\n            if ($seq > $current_schema_version) {\n\n                if ($seq <= $this->required_schema_version) {\n                    $this->updates[$seq] = owa_coreAPI::updateFactory($this->name, substr($v['name'], 0, -4));\n                    // if the cli update mode is required and we are not running via cli then return an error.\n                    owa_coreAPI::debug('cli update mode required: '.$this->updates[$seq]->isCliModeRequired());\n                    if ($this->updates[$seq]->isCliModeRequired() === true && !defined('OWA_CLI')) {\n                        //set flag in module\n                        $this->update_from_cli_required = true;\n                        owa_coreAPI::notice(\"Aborting update $seq. This update must be applied using the command line interface.\");\n                        return false;\n                    }\n                    // set schema version from sequence number in file name. This ensures that only one update\n                    // class can ever be in use for a particular schema version\n                    $this->updates[$seq]->schema_version = $seq;\n                }\n            }\n\n        }\n\n        // sort the array\n        ksort($this->updates, SORT_NUMERIC);\n\n        //print_r(array_keys($this->updates));\n\n        foreach ($this->updates as $k => $obj) {\n\n            owa_coreAPI::notice(sprintf(\"Applying Update %d (%s)\", $k, get_class($obj)));\n\n            $ret = $obj->apply();\n\n            if ($ret == true) {\n                owa_coreAPI::notice(\"Update Succeeded\");\n            } else {\n                owa_coreAPI::notice(\"Update Failed\");\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Deactivates and removes schema for the module\n     *\n     */\n    function uninstall() {\n\n        return;\n    }\n\n    /**\n     * Places the Module into the active module list in the global configuration\n     *\n     */\n    function activate() {\n\t\n\t\t$ret = owa_coreAPI::persistSetting( $this->name, 'is_active', true );\n        owa_coreAPI::notice(\"Module $this->name activated\");\n        \n        return $ret;\n    }\n\n    /**\n     * Deactivates the module by removing it from\n     * the active module list in the global configuration\n     *\n     */\n    function deactivate() {\n\n        if ($this->name != 'base') {\n\n            owa_coreAPI::persistSetting( $this->name, 'is_active', false );\n    \t}\n    }\n\n    /**\n     * Checks to se if the schema is up to date\n     *\n     */\n    function isSchemaCurrent() {\n\n        $current_schema = $this->getSchemaVersion();\n        $required_schema = $this->getRequiredSchemaVersion();\n\n        owa_coreAPI::debug(\"$this->name Schema version is $current_schema\");\n        owa_coreAPI::debug(\"$this->name Required Schema version is $required_schema\");\n\n        if ($current_schema >= $required_schema) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function getSchemaVersion() {\n\n        $current_schema = owa_coreAPI::getSetting($this->name, 'schema_version');\n\n        if (empty($current_schema)) {\n            $current_schema = 1;\n\n            // if this is the base module then we need to let filters know to install the base schema\n            if ($this->name === 'base') {\n            //    $s = owa_coreAPI::serviceSingleton();\n            //    $s->setInstallRequired();\n            }\n        }\n\n        return $current_schema;\n    }\n\n    function getRequiredSchemaVersion() {\n\n        return $this->required_schema_version;\n    }\n\n    /**\n     * Registers updates\n     *\n     */\n    function _registerUpdates() {\n\n        return;\n\n    }\n\n    /**\n     * Adds an update class into the update array.\n     * This should be used to within the _registerUpdates method or else\n     * it will not get called.\n     *\n     */\n    function _addUpdate($sequence, $class) {\n\n        $this->updates[$sequence] = $class;\n\n        return true;\n    }\n\n    /**\n     * Adds an event processor class to the processor array. This is used to determin\n     * which class to use to process a particular event\n     */\n    function addEventProcessor($event_type, $processor) {\n\t    \n        $this->event_processors[$event_type] = $processor;\n    }\n\n    function registerMetric($metric_name, $classes, $params = array(), $label = '', $description = '', $group = '') {\n\n        if ( ! $label ) {\n            $label = $metric_name;\n        }\n\n        if ( ! $description ) {\n            $description = 'No description available.';\n        }\n\n        if ( ! is_array( $classes ) ) {\n\n            $classes = array($classes);\n        }\n\n        foreach ($classes as $class_name) {\n\n            $map = array('name' => $metric_name, 'class' => $class_name, 'params' => $params, 'label' => $label, 'description' => $description, 'group' => $group);\n            $this->metrics[$metric_name][] = $map;\n        }\n    }\n\n    /**\n     * Registers a metric definition which is used by the\n     * resultSetExplorer and getResultSet API methods\n     *\n     * This method dynamically creates an owa_metric class and\n     * properly configures it based on the properties passed in.\n     *\n     * Map properties include:\n     *\n     *         'name'            => '',             // the name of the metric as called via the API\n     *        'label'            => '',             // the label that will be displayed in result sets\n     *        'description'    => '',             // the descript displayed in the GUI\n     *        'group'            => 'unknown',    // the group that this metric will belong to in the UI\n     *        'entity'        => '',          // the entity to use when calculating this metric\n     *                                        // you must register the same metric for each entity that\n     *                                        // it can be calculated on.\n     *        'metric_type'    => '',          // 'count', 'distinct_count', 'sum', or 'calculated'\n     *        'data_type'        => '',          // 'integrer', 'currency', 'average'\n     *        'column'        => '',          // the column of the entity to use when calculating\n     *        'child_metrics'    => array(),     // if it's a clculated metric, the child metrics used in the formula.\n     *        'formula'        => ''           // if it's a calculated metric, the formula to use (e.g. pageViews / visits).\n     *\n     *\n     */\n    function registerMetricDefinition( $params ) {\n\n        $map = array(\n            'name'            => '',\n            'label'            => '',\n            'description'    => '',\n            'group'            => 'unknown',\n            'entity'        => '',\n            'metric_type'    => '',\n            'data_type'        => '',\n            'column'        => '',\n            'child_metrics'    => array(),\n            'formula'        => ''\n        );\n\n        $map = array_intersect_key( array_merge( $map, $params ), $map );\n\n        if ( ! isset( $map['name'] ) ) {\n            // throw exception\n        }\n\n        if ( ! isset( $map['label'] ) ) {\n            $map['label'] = $map['name'];\n        }\n\n        if ( ! isset( $map['entity'] ) ) {\n            // throw exception\n        }\n\n        if ( ! isset( $map['metric_type'] ) ) {\n            // throw exception\n        }\n\n        if ( ! isset( $map['data_type'] ) ) {\n            // throw exception\n        }\n\n        if ( isset( $map['metric_type'] )\n             && $map['metric_type'] != 'calculated'\n             && ! isset( $map['column'] ) )\n        {\n\n            // throw exception\n\n        }\n\n        if ( isset( $map['metric_type'] )\n             && $map['metric_type'] === 'calculated'\n             && ! isset( $map['child_metrics'] ) )\n        {\n\n            // throw exception\n\n        }\n\n        if ( isset( $map['metric_type'] )\n             && $map['metric_type'] === 'calculated'\n             && ! isset( $map['formula'] ) )\n        {\n\n            // throw exception\n\n        }\n\n        $definition = array(\n            'name'             => $map['name'],\n            'class'         => 'base.configurableMetric',\n            'params'         => $map,\n            'label'         => $map['label'],\n            'description'     => $map['description'],\n            'group'         => $map['group']\n        );\n        //print_r($definition);\n        $this->metrics[ $map['name'] ][] = $definition;\n\n    }\n\n    /**\n     * Register a dimension\n     *\n     * registers a dimension for use by metrics in producing results sets.\n     *\n     * @param    $dim_name string\n     * @param    $entity_names    string||array the names of entity housing the dimension. uses module.name format\n     * @param    $column    string the name of the column that represents the dimension\n     * @param     $family    string the name of the group or family that this dimension belongs to. optional.\n     * @param    $description    string    a short description of this metric, used in various interfaces.\n     * @param    $label    string the lable of the dimension\n     * @param     $foreign_key_name the name of the foreign key column that should\n     *          be used to relate the metric entity to the dimension's entity.\n     *          If one is not specfied, metrics will use any valid foreign key column they can find.\n     *          Specifying this is important when the same column in a table is used by\n     *          two different dimensions but the meaning of the column differs based on the value of the foreign key.\n     *          a good example is the page_title column in the documents table. It is used by three dimensions:\n     *          pageTitle, entryPageTitle, and existPageTitle.\n     * @param    $denormalized    boolean    flag marks the dimension as being denormalized into a fact table\n     *          as opposed to being housed in a related table.\n     */\n    function registerDimension(\n            $dim_name, $entity_names, $column, $label, $family,\n            $description = '', $foreign_key_name = '',\n            $denormalized = false, $data_type = 'string') {\n\n        if ( ! is_array( $entity_names ) ) {\n            $entity_names = array($entity_names);\n        }\n\n        foreach ($entity_names as $entity) {\n\n            $dim = array(\n                'family'             => $family,\n                'name'                 => $dim_name,\n                'entity'             => $entity,\n                'column'             => $column,\n                'label'             => $label,\n                'description'         => $description,\n                'foreign_key_name'     => $foreign_key_name,\n                'data_type'         => $data_type,\n                'denormalized'         => $denormalized\n            );\n\n            if ($denormalized) {\n                $this->denormalizedDimensions[$dim_name][$entity] = $dim;\n            } else {\n                $this->dimensions[$dim_name] = $dim;\n            }\n        }\n    }\n\n    function registerActions() {\n\n        return false;\n    }\n\n\n    /**\n     * Registers a Web Action and ontroller Implementation\n     *\n     * @param    $action_name    string    the name of the action used as the value in the 'do' url param\n     * @param    $class_name     string    the name of the controller class\n     * @param    $file            string    the path to the file housing the class\n     *\n     */\n    protected function registerAction( $action_name, $class_name, $file ) {\n\t\t\n\t\t$s = owa_coreAPI::serviceSingleton();\n    \t$s->setMapValue( 'actions', $action_name, ['class_name' => $class_name, 'file' => OWA_BASE_MODULE_DIR . $file ] );\n\n    }\n    \n    /**\n     * Registers a REST API Action and Controller Implementation\n     *\n     * Routes are unique to the version/action/request_method combination\n     *\n     * @param\t $version\t\t string\t   the version namespace of the route\n     * @param    $route__name    string    the name of the action used as the value in the 'do' param of the request\n     * @param\t $request_method string\t   the HTTP request method.\n     * @param    $class_name     string    the class name of the controller\n     * @param    $file           string    the module path to the file housing the class\n     *\n     */\n    function registerRestApiRoute( $version, $route_name, $request_method, $class_name, $file, $params = [] ) {\n\t\t\n\t\tif ( $file ) {\n\t\t\n\t\t\t$file = $this->path . $file;\t\t\t\t\n\t\t}\n\t\t\n\t\t$s = owa_coreAPI::serviceSingleton();\n\t\t\n\t\t$s->setRestApiRoute( $this->name, $version, $route_name, $request_method, array( 'class_name' => $class_name, 'file' => $file, 'conf' => $params ) );\n    }\n\n    function registerCliCommand($command, $class) {\n\n        $this->cli_commands[$command] = $class;\n    }\n\n    function registerFormatter($type, $formatter) {\n\n        $this->formatters[$type] = $formatter;\n    }\n\n    function registerApiMethod($api_method_name, $user_function, $argument_names, $file = '', $required_capability = '') {\n\n        $map = array('callback' => $user_function, 'args' => $argument_names, 'file' => $file);\n\n        if ($required_capability) {\n            $map['required_capability'] = $required_capability;\n        }\n\n        $this->api_methods[$api_method_name] = $map;\n    }\n\n    /**\n     * Registers a Component Implementation\n     *\n     * Allows a module to register a specific implementation of a module component. This method stores\n     * the mapping of where an implementation of a specific type and key is located withing the module.\n     * This is used to store maps for things like controllers, event queues, etc.\n     *\n     * Implemntations can be overridden by other modules if they share the same key so consider using\n     * modules namespacing for the key (i.e. module_name.key) to avoid conflicts.\n     *\n     * @param    $type\tstring\tthe type/category of implementation\t\tactions|event_queues\n     * @param    $key  string\tthe key name of the specific implmentation\n     * @param    $class_name     string    the name of the class\n     * @param    $file           string    the partial path to the file housing the class withing the module dir\n     *\n     */\n    function registerImplementation($type, $key, $class_name, $file, $params = []) {\n\n        $s = owa_coreAPI::serviceSingleton();\n        $file = $this->path . $file;\n        $class_info = array($class_name, $file, $params);\n        $s->setMapValue($type, $key, $class_info);\n    }\n\n    /**\n     * Register Environmental Tracking Properties\n     *\n     * These are tracking properties that are derived from the Server environment\n     * and should be added to all tracking tracking events as they are recieved.\n     *\n     *\n     * @var $type            string    the type of tracking property environmental|regular|derived\n     *\n     *         environmental = properties that are only dependant on the PHP SERVER environment.\n     *        regular       = properties that are set by clients\n     *        derived          = properties that are derived from or dependant on other properties\n     *\n     * @var    $properties     array     an associative array of tracking properties\n     *\n     * Example:\n     *\n     *         'REMOTE_HOST'        => array(\n     *            'default_value'        => array( 'owa_trackingEventHelpers::remoteHostDefault' ),\n     *            'required'            => true,\n     *            'data_type'            => 'string',\n     *            'filter'            => true\n     *        )\n     *\n     *\n     * The key of the array is the name the property\n     */\n\n    function registerTrackingProperties( $type, $properties = array() ) {\n\n        switch( strtolower( $type ) ) {\n\n            case 'environmental':\n                $map_key = 'tracking_properties_environmental';\n                break;\n\n            case 'regular':\n                $map_key = 'tracking_properties_regular';\n                break;\n\n            case 'derived':\n                $map_key = 'tracking_properties_derived';\n                break;\n\n            default:\n                $map_key = '';\n        }\n\n        if ( is_array( $properties ) && $map_key ) {\n\n            $s = owa_coreAPI::serviceSingleton();\n\n            foreach ( $properties as $k => $property ) {\n\n                $s->setMapValue( $map_key, $k, $property);\n            }\n        }\n    }\n\n    /**\n     * Abstract method for registering individual API methods\n     *\n     * This method is called by a module's constructor\n     * and should be redefined in a concrete module class.\n     */\n    function registerApiMethods() {\n\n        return false;\n    }\n\n    /**\n     * Abstract method for registering individual CLI commands\n     *\n     * This method is called by a module's constructor\n     * and should be redefined in a concrete module class.\n     */\n    function registerCliCommands() {\n\n        return false;\n    }\n\n    /**\n     * Abstract method for registering individual Metrics\n     *\n     * This method is called by a module's constructor\n     * and should be redefined in a concrete module class.\n     */\n    function registerMetrics() {\n\n        return false;\n    }\n\n    /**\n     * Abstract method for registering individual CLI commands\n     *\n     * This method is called by a module's constructor\n     * and should be redefined in a concrete module class.\n     */\n    function registerDimensions() {\n\n        return false;\n    }\n\n    /**\n     * Abstract method for registering individual Filter Methods\n     *\n     * This method is called by a module's constructor\n     * and should be redefined in a concrete module class.\n     */\n    function registerFilters() {\n\n        return false;\n    }\n\n    /**\n     * Abstract method for registering package files to build\n     *\n     * This method is called by a module's constructor\n     * and should be redefined in a concrete module class.\n     */\n    function registerBuildPackages() {\n\n        return false;\n    }\n\n    /**\n     * Registers a new package of files to be built by\n     * the 'build' CLI command.\n     *\n     * $package array    the package array takes the form of\n     *\n     *         'name'            => 'mypackage'\n     *        'output_dir'    => '/path/to/output'\n     *        'files'            => array('foo' => array('path' => '/path/to/file/file.js',\n     *                                              'compression' => 'minify'))\n     */\n    protected function registerBuildPackage( $package ) {\n\n        if (! isset( $package['name'] ) ) {\n\n            throw exception('Build Package does not have a name.');\n        }\n\n        if (! isset( $package['output_dir'] ) ) {\n\n            throw exception('Build Package does not have an output directory.');\n        } else {\n            //check for trailing slash\n            $check = substr($package['output_dir'], -1, 1);\n            if ($check != '/') {\n                $package['output_dir'] = $package['output_dir'].'/';\n            }\n        }\n\n        if (! isset( $package['files'] ) ) {\n\n            throw exception('Build Package does not any files.');\n        }\n\n        // filter the pcakge in case other modules want to change something.\n        $eq = owa_coreAPI::getEventDispatch();\n        $package = $eq->filter( 'register_build_package', $package );\n\n        $s = owa_coreAPI::serviceSingleton();\n        $s->setMapValue('build_packages', $package['name'], $package);\n    }\n\n\n    /**\n     * Retuns internal struct array used for saving link infos\n     * @param string $ref\n     * @param string $anchortext\n     * @param integer $order\n     * @param string $priviledge\n     * @return array\n     */\n    private function getLinkStruct($ref,$anchortext,$order,$priviledge, $icon_class = '') {\n        return array('ref' => $ref,\n                    'anchortext' => $anchortext,\n                    'order' => $order,\n                    'priviledge' => $priviledge,\n                    'icon_class' => $icon_class);\n    }\n\n    protected function registerEventQueue( $name, $map ) {\n\n        $map['queue_name'] = $name;\n        $s = owa_coreAPI::serviceSingleton();\n        $s->setMapValue( 'event_queues', $name, $map );\n    }\n\n}\n\n?>\n"
        },
        {
          "name": "owa_mw.php",
          "type": "blob",
          "size": 1.470703125,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\nrequire_once('owa_env.php');\nrequire_once(OWA_BASE_CLASS_DIR.'client.php');\n\n/**\n * MediaWiki Caller Class\n * \n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n\nclass owa_mw extends owa_client {\n\n    function __construct($config = null) {\n\n        return parent::__construct($config);\n    }\n\n    function owa_mw($config = null) {\n\n        return owa_mw::__construct($config);\n    }\n\n    /**\n     * OWA Singleton Method\n     *\n     * Makes a singleton instance of OWA using the config array\n     */\n    function singleton($config = null) {\n\n        static $owa;\n\n        if(!empty($owa)) {\n            return $owa;\n        } else {\n            $owa = new owa_mw($config);\n            return $owa;\n        }\n    }\n\n\n}\n\n?>"
        },
        {
          "name": "owa_observer.php",
          "type": "blob",
          "size": 1.9326171875,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\n/**\n * Abstract observer class, wraps PEAR Log's observer to add event type.\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n\nclass owa_observer extends owa_base {\n\n     /**\n     * The type of event that an observer would want to hear about.\n     *\n     * @var array\n     * @access private\n     */\n    var $_event_type = array();\n    \n    var $id;\n    \n    /**\n     * Event Message\n     *\n     * @var array\n     */\n    var $m;\n   \n    /**\n     * Creates a new basic Log_observer instance.\n     *\n     * @param integer   $priority   The highest priority at which to receive\n     *                              log event notifications.\n     *\n     * @access public\n     */\n    function __construct() {\n        $this->id = md5(microtime());\n    }\n    \n    function handleEvent($action) {\n    \n        $data = owa_coreAPI::performAction($action, array('event' => $this->m));\n        return owa_coreAPI::debug(sprintf(\"Handled Event. Action: %s\", $action));\n\n    }\n    \n    function sendMail($email_address, $subject, $msg) {\n\n        mail($email_address, $subject, $msg);\n        owa_coreAPI::debug('Sent e-mail with subject of \"'.$subject.'\" to: '.$email_address);\n        return;\n    }\n\n}\n\n?>"
        },
        {
          "name": "owa_php.php",
          "type": "blob",
          "size": 1.427734375,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\nrequire_once('owa_env.php');\nrequire_once(OWA_BASE_CLASS_DIR.'client.php');\n\n/**\n * OWA PHP Client\n * \n * Implements a PHP client for logging requests to OWA\n * Typical usage is:\n * \n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n\nclass owa_php extends owa_client {\n\n    function __construct($config = null) {\n\n        return parent::__construct($config);\n    }\n\n    /**\n     * OWA Singleton Method\n     *\n     * Makes a singleton instance of OWA using the config array\n     */\n    function singleton($config = null) {\n\n        static $owa;\n\n        if(!empty($owa)) {\n            return $owa;\n        } else {\n            return new owa_php($config);\n        }\n    }\n}\n\n?>"
        },
        {
          "name": "owa_reportController.php",
          "type": "blob",
          "size": 6.0576171875,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\nrequire_once(OWA_BASE_CLASSES_DIR.'owa_adminController.php');\n\n/**\n * Abstract Report Controller Class\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n\n\nclass owa_reportController extends owa_adminController {\n\t\n\t/**\n\t * An array of request param keys that\n\t * should be passed downstream as state\n\t */\n\tvar $state_keys = [];\n\t\n    /**\n     * Constructor\n     *\n     * @param array $params\n     * @return\n     */\n    function __construct($params) {\n        $this->setControllerType('report');\n        $this->setRequiredCapability('view_reports');\n        parent::__construct($params);\n\n        // set a siteId is none is set on the request params\n        $siteId = $this->getCurrentSiteId();\n\n        if ( ! $siteId ) {\n            //$siteId = $this->getDefaultSiteId();\n        }\n\n        $this->setParam( 'siteId', $siteId );\n    }\n\n    /**\n     * Pre Action\n     * Current user is fully authenticated and loaded by this point\n     *\n     */\n    function pre() {\n\n        $sites = $this->getSitesAllowedForCurrentUser();\n        $this->set('sites', $sites);\n\n        $this->set( 'currentSiteId', $this->getParam('siteId') );\n\n        // pass full set of params to view\n        $this->data['params'] = $this->params;\n\n        // setup the time period object in $this->period\n        $this->setPeriod();\n        // check to see if the period is a default period. TODO move this ot view where needed.\n        $this->set('is_default_period', $this->period->isDefaultPeriod() );\n        $this->setView('base.report');\n        $this->setViewMethod('delegate');\n\n        $this->dom_id = str_replace('.', '-', $this->getParam('do'));\n        $this->data['dom_id'] = $this->dom_id;\n        $this->data['do'] = $this->getParam('do');\n        $nav = owa_coreAPI::getGroupNavigation('Reports');\n        \n        // setup tabs\n        $siteId = $this->get('siteId');\n        \n        if ( $siteId ) {\n            $gm = owa_coreAPI::supportClassFactory('base', 'goalManager', $siteId);\n\n            $tabs = array();\n            $site_usage = array(\n                    'tab_label'        => 'Site Usage',\n                    'metrics'        => 'visits,pagesPerVisit,visitDuration,bounceRate,uniqueVisitors',\n                    'sort'            => 'visits-',\n                    'trendchartmetric'    =>    'visits'\n            );\n\n            $tabs['site_usage'] = $site_usage;\n\n            // ecommerce tab\n            if ( owa_coreAPI::getSiteSetting( $this->getParam('siteId'), 'enableEcommerceReporting') ) {\n\n                $ecommerce = array(\n                        'tab_label'        => 'e-commerce',\n                        'metrics'        => 'visits,transactions,transactionRevenue,revenuePerVisit,revenuePerTransaction,ecommerceConversionRate',\n                        'sort'            => 'transactionRevenue-',\n                        'trendchartmetric'    =>    'transactions'\n                );\n\n                $tabs['ecommerce'] = $ecommerce;\n            }\n            $goal_groups = $gm->getActiveGoalGroups();\n\n            if ( $goal_groups ) {\n                foreach ($goal_groups as $group) {\n                    $goal_metrics = 'visits';\n                    $active_goals = $gm->getActiveGoalsByGroup($group);\n\n                    if ( $active_goals ) {\n\n                        foreach ($active_goals as $goal) {\n                            $goal_metrics .= sprintf(',goal%sCompletions', $goal);\n                        }\n                    }\n\n                    $goal_metrics .= ',goalValueAll';\n                    $goal_group = array(\n                            'tab_label'        =>    $gm->getGoalGroupLabel($group),\n                            'metrics'        =>    $goal_metrics,\n                            'sort'            => 'goalValueAll-',\n                            'trendchartmetric'    =>    'visits'\n                    );\n                    $name = 'goal_group_'.$group;\n                    $tabs[$name] = $goal_group;\n                }\n            }\n\n            $this->set('tabs', $tabs);\n            $this->set('tabs_json', json_encode($tabs));\n\n            if ( ! owa_coreAPI::getSiteSetting( $this->getParam( 'siteId' ), 'enableEcommerceReporting' ) ) {\n\n                unset($nav['Ecommerce']);\n            }\n        }\n\n        $this->set('top_level_report_nav', $nav);\n    }\n\n    function post() {\n\t\t\n\t\t// pass the state_keys var to views\n        $this->set( 'state_keys', $this->state_keys );\n    }\n    \n    /**\n\t * Used to designate a request param as state for\n     * use by downstream views and templates\n     */\n    function addState( $param_name ) {\n\t    \n\t    $this->state_keys[] = $param_name;\n    }\n\n    function setTitle($title, $suffix = '') {\n\n        $this->set('title', $title);\n        $this->set('titleSuffix', $suffix);\n    }\n\n    /**\n     * Chooses a siteId from a list of AllowedSites\n     *\n     * needed jsut in case a siteId is not passed on the request.\n     * @return string\n     */\n    protected function getDefaultSiteId() {\n\n        $db = owa_coreAPI::dbSingleton();\n        $db->select('site_id');\n        $db->from('owa_site');\n        $db->limit(1);\n        $ret = $db->getOneRow();\n\n        return $ret['site_id'];\n    }\n\n    protected function hideReportingNavigation() {\n\n        $this->set('hideReportingNavigation', true);\n    }\n\n    protected function hideSitesFilter() {\n\n        $this->set('hideSitesFilter', true);\n    }\n}\n\n?>"
        },
        {
          "name": "owa_requestContainer.php",
          "type": "blob",
          "size": 8.6357421875,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\n/**\n * OWA Request Params\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n\nclass owa_requestContainer {\n\n    var $cli_args;\n    var $is_https;\n    var $owa_params = array();\n    var $cookies = array();\n    var $owa_cookies = array();\n    var $session = array();\n    var $request = array();\n    var $server;\n    var $guid;\n    var $state;\n    var $request_type = '';\n    var $timestamp;\n    var $current_url;\n\n    /**\n     * Constructor\n     *\n     */\n    function __construct() {\n\n        $this->timestamp = time();\n        $this->guid = owa_lib::generateRandomUid();\n\n        // php's server variables\n        $this->server = $_SERVER;\n      \n        // files\n        if (!empty($_FILES)) {\n            $this->files = $_FILES;\n        }\n\n        // setup cookies\n        $this->cookies = array();\n\n        // look for access to the raw HTTP cookie string. This is needed becuause OWA can set settings cookies\n        // with the same name under different subdomains. Multiple cookies with the same name are not\n        // available under $_COOKIE. Therefor OWA's cookie conainter must be an array of arrays.\n        if ( isset( $_SERVER['HTTP_COOKIE'] ) && strpos( $_SERVER['HTTP_COOKIE'], ';') ) {\n\n            $raw_cookie_array = explode(';', $_SERVER['HTTP_COOKIE']);\n\n            foreach($raw_cookie_array as $raw_cookie ) {\n\n                $nvp = explode( '=', trim( $raw_cookie ) );\n                $this->cookies[ $nvp[0] ][] = urldecode($nvp[1]);\n            }\n\n        } else {\n            // just use the normal cookie global\n            if ( $_COOKIE && is_array($_COOKIE) ) {\n\n                foreach ($_COOKIE as $n => $v) {\n                    // hack against other frameworks sanitizing cookie data and blowing away our '>' delimiter\n                    // this should be removed once all cookies are using json format.\n                    if (strpos($v, '&gt;')) {\n                        $v = str_replace(\"&gt;\", \">\", $v);\n                    }\n\n                    $cookies[ $n ][] = $v;\n                }\n            }\n        }\n\n        // populate owa_cookie container with just the cookies that have the owa namespace.\n        $this->owa_cookies = owa_lib::stripParams( $this->cookies, owa_coreAPI::getSetting('base', 'ns') );\n\n\n        // session\n        if (!empty($_SESSION)) {\n            $this->session = $_SESSION;\n        }\n\n        /* STATE CONTAINER */\n\n        // state\n        $this->state = owa_coreAPI::supportClassFactory('base', 'state');\n        // merges session\n        if (!empty($this->session)) {\n            $this->state->addStores(owa_lib::stripParams($this->session, owa_coreAPI::getSetting('base', 'ns')));\n        }\n\n        // merges cookies\n        foreach ( $this->owa_cookies as $k => $owa_cookie ) {\n\n            $this->state->setInitialState( $k, $owa_cookie );\n        }\n\n        // create request params and type\n        $params = array();\n\t\towa_coreAPI::debug('request container says params are:');\n\t\tif ( array_key_exists('REQUEST_METHOD', $_SERVER) ) {\n\t\t\t\t\n\t\t\t\t$this->request_type = $_SERVER['REQUEST_METHOD'];\n\t\t\t\t\n\t\t\tif ( $_SERVER['REQUEST_METHOD'] === 'PUT' || $_SERVER['REQUEST_METHOD'] === 'DELETE' ) {\n\t\t\t\n\t\t\t\tparse_str( trim(file_get_contents(\"php://input\") ), $post_vars );\n\t\t\t\towa_coreAPI::debug($post_vars);\n\t\t\t\t$params = array_merge( $_GET, $post_vars);\n\t\t\t\t\n\t\t\t} else if ( $_SERVER['REQUEST_METHOD'] === 'GET' ) {\n\t\t\t\t\n\t\t\t\t$params = $_GET;\n\t\t\t\t\n\t\t\t} else if ( $_SERVER['REQUEST_METHOD'] === 'POST' ) {\n\t\t\t\t\n\t\t\t\t// merge in POST vars. GET and POST can occure on the same request.\t\t\n\t\t\t\t$params = array_merge( $_GET, $_POST);\n\t\t\t}\n\t\t\t\n\t\t\t$this->current_url = owa_lib::get_current_url();\n\t\t\t\n\t\t\towa_coreAPI::debug($params);\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\t// CLI Request\n\t\t\tif (array_key_exists( 'argv', $_SERVER ) ) {\n\t\t\t\t\n\t\t\t\t$this->cli_args = $_SERVER['argv'];\n\n\t            // parse arguments into key value pairs\n\t            for ( $i=1; $i < count( $this->cli_args ); $i++ ) {\n\t                \n\t                $it = explode( \"=\", $this->cli_args[$i] );\n\t\n\t                if ( isset( $it[1] ) ) {\n\t                    \n\t                    $params[ $it[0] ] = $it[1];\n\t                \n\t                } else {\n\t                       \n\t                    $params[ $it[0] ] = '';\n\t                }\n\t            }\n\t\n\t            $this->request_type = 'cli';\n\t\t\t}\n\t\t}\n\t\t\n        // Clean Input arrays\n        if ( $params ) {\n\n            if ( ! owa_coreAPI::getSetting('base', 'tracking_mode') ) {\n\n                $params = owa_sanitize::cleanInput( $params, array( 'remove_html' => true, 'escape_html' => false ) );\n\n            }\n            if ( is_array( $params ) && ! empty( $params ) ) {\n\n                $this->request = $params;\n            }\n        }\n\n        // get namespace\n        $ns = owa_coreAPI::getSetting('base', 'ns');\n        // strip action and do params of nasty include exploits.\n        if (array_key_exists( $ns.'action', $this->request)) {\n\n            $this->request[$ns.'action'] = owa_lib::fileInclusionFilter($this->request[$ns.'action']);\n        }\n\n        if (array_key_exists($ns.'do', $this->request)) {\n\n            $this->request[$ns.'do'] = owa_lib::fileInclusionFilter($this->request[$ns.'do']);\n        }\n\n        // strip owa namespace\n        $this->owa_params = owa_lib::stripParams($this->request, $ns);\n\n        // translate certain request variables that are reserved in javascript\n        $this->owa_params = owa_lib::rekeyArray($this->owa_params, array_flip(owa_coreAPI::getSetting('base', 'reserved_words')));\n\n        // set https flag\n        if( owa_lib::isHttps() ) {\n            $this->is_https = true;\n        }\n    }\n\n    function getParam($name) {\n\n        if (array_key_exists($name, $this->owa_params)) {\n            return $this->owa_params[$name];\n        } else {\n            return false;\n        }\n\n    }\n\n    function setParam($name, $value) {\n\n        $this->owa_params[$name] = $value;\n        return true;\n    }\n\n    function getCookie($name) {\n\n        if (array_key_exists($name, $this->cookies)) {\n            return $this->cookies[$name];\n        } else {\n            return false;\n        }\n\n    }\n\n    function getRequestParam($name) {\n\n        if (array_key_exists($name, $this->request)) {\n            return $this->request[$name];\n        } else {\n            return false;\n        }\n    }\n\n    function getAllRequestParams() {\n\n        return $this->request;\n    }\n\n    function getAllOwaParams() {\n\n        return $this->owa_params;\n    }\n\n    function mergeParams($params) {\n\n        $this->owa_params = array_merge($this->owa_params, $params);\n        return;\n    }\n\n    function getServerParam($name) {\n\n        if (array_key_exists($name, $this->server)) {\n            return $this->server[$name];\n        } else {\n            return false;\n        }\n    }\n\n    function decodeRequestParams() {\n\n        $params = array();\n        // Apply caller specific params\n        foreach ($this->owa_params as $k => $v) {\n            if (is_array($v)) {\n                array_walk_recursive($v, array($this, 'arrayUrlDecode'));\n                $params[$k] = $v;\n            } else {\n                $params[$k] = is_null($v)?$v:rawurldecode($v);\n            }\n        }\n\n        // clean params after decode\n        //$params = owa_lib::inputFilter($params);\n        // replace owa params\n        $this->owa_params = $params;\n        //debug\n        owa_coreAPI::debug('decoded OWA params: '. print_r($this->owa_params, true));\n        return;\n\n    }\n\n    function arrayUrlDecode(&$val, $index) {\n        \n        rawurldecode($val);\n    }\n\n    function getOwaCookie($name) {\n\n        if (array_key_exists($name, $this->owa_cookies)) {\n            return $this->owa_cookies[$name];\n        } else {\n            return false;\n        }\n\n    }\n\n    public function getTimestamp() {\n\n        return $this->timestamp;\n    }\n\n    public function getCurrentUrl() {\n\n        return $this->current_url;\n    }\n\n    public function getRequestType() {\n\n        return strtoupper( $this->request_type );\n    }\n\n}\n\n?>\n"
        },
        {
          "name": "owa_template.php",
          "type": "blob",
          "size": 26.732421875,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\nif (!class_exists('Template')) {\n    require_once(OWA_INCLUDE_DIR.'template_class.php');\n}\n\nif (!class_exists('owa_lib')) {\n    require_once(OWA_BASE_DIR.'/owa_lib.php');\n}\n\nif (!class_exists('owa_sanitize')) {\n    require_once(OWA_BASE_CLASS_DIR.'sanitize.php');\n}\n\n/**\n * OWA Wrapper for template class\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n\nclass owa_template extends Template {\n\n    /**\n     * Configuration\n     *\n     * @var array\n     */\n    var $config;\n\n    var $theme_template_dir;\n\n    var $module_local_template_dir;\n\n    var $module_template_dir;\n\n    var $e;\n\n    var $period;\n\n    var $time_now;\n\n    /**\n     * Params passed by calling caller\n     *\n     * @var array\n     */\n    var $caller_params;\n\n    function __construct( $module = null, $caller_params = array() ) {\n\n        $this->caller_params = $caller_params;\n\n        $c = owa_coreAPI::configSingleton();\n        $this->config = $c->fetch('base');\n\n        $this->e = owa_coreAPI::errorSingleton();\n\n        // set template dirs\n        if(!empty($caller_params['module'])):\n            $this->_setTemplateDir($module);\n        else:\n            $this->_setTemplateDir('base');\n        endif;\n\n        $this->time_now = owa_lib::time_now();\n    }\n\n    function _setTemplateDir($module) {\n\n        // set module template dir\n        $this->module_template_dir = OWA_DIR.'modules'.'/' . $module . '/'.'templates'.'/';\n\n        // set module local template override dir\n        $this->module_local_template_dir = $this->module_template_dir.'local'.'/';\n\n        // set theme template dir\n        $this->theme_template_dir = OWA_THEMES_DIR.$this->config['theme'].'/';\n\n        return;\n    }\n\n    function getTemplatePath($module, $file) {\n\n        $this->_setTemplateDir($module);\n\n        if ($file == null) {\n            owa_coreAPI::error('No template file was specified.');\n            return false;\n        } else {\n            // check module's local modification template Directory\n            if (file_exists($this->module_local_template_dir.$file)) {\n                $fullfile = $this->module_local_template_dir.$file;\n\n            // check theme's template Directory\n            } elseif(file_exists($this->theme_template_dir.$file)) {\n                $fullfile = $this->theme_template_dir.$file;\n\n            // check module's template directory\n            } elseif(file_exists($this->module_template_dir.$file)) {\n                $fullfile = $this->module_template_dir.$file;\n\n            // throw error\n            } else {\n                $this->e->err(sprintf('%s was not found in any template directory.', $file));\n                return false;\n            }\n            return $fullfile;\n        }\n\n\n\n    }\n\n    /**\n     * Set the template file\n     * @depricated\n     * @param string $file\n     */\n    function set_template($file = null) {\n\n        if (!$file):\n            owa_coreAPI::error('No template file was specified.');\n            return false;\n        else:\n            // check module's local modification template Directory\n            if (file_exists($this->module_local_template_dir.$file)):\n                $this->file = $this->module_local_template_dir.$file;\n\n            // check theme's template Directory\n            elseif(file_exists($this->theme_template_dir.$file)):\n                $this->file = $this->theme_template_dir.$file;\n\n            // check module's template directory\n            elseif(file_exists($this->module_template_dir.$file)):\n                $this->file = $this->module_template_dir.$file;\n\n            // throw error\n            else:\n                $this->e->err(sprintf('%s was not found in any template directory.', $file));\n                return false;\n            endif;\n        \n            return true;\n        endif;\n    }\n    \n    function setTemplateFile($module, $file) {\n\n        //choose file\n        $filepath = $this->getTemplatePath($module, $file);\n        //set template\n        if ($filepath) {\n            $this->file = $filepath;\n        }\n    }\n\n    /**\n     * Truncate string\n     *\n     * @param string $str\n     * @param integer $length\n     * @param string $trailing\n     * @return string\n     */\n    function truncate ($str, $length=10, $trailing='...')  {\n\n      return owa_lib::truncate ($str, $length, $trailing);\n    }\n\n    function get_month_label($month) {\n\n        return owa_lib::get_month_label($month);\n    }\n\n    /**\n     * Chooses the right icon based on browser type\n     *\n     * @param unknown_type $browser_type\n     * @return unknown\n     */\n    function choose_browser_icon($browser_type) {\n\t    if(is_null($browser_type)){\n\t\t    $browser_type = 'null';\n\t    }\n\t\t\n\t\t$bicons = [\n\t\t\t\n\t\t\t'chrome'\t\t\t\t=> 'fab fa-chrome',\n\t\t\t'safari'\t\t\t\t=> 'fab fa-safari',\n\t\t\t'firefox'\t\t\t\t=> 'fab fa-firefox-browser',\n\t\t\t'internet explorer'\t\t=> 'fab fa-internet-explorer',\n\t\t\t'ie'\t\t\t\t\t=> 'fab fa-internet-explorer',\n\t\t\t'opera'\t\t\t\t\t=> 'fab fa-opera',\n\t\t\t'edge'\t\t\t\t\t=> 'fab fa-edge'\n\t\t];\n\t\t\n\t\tforeach ( $bicons as $k => $v ) {\n\t\t\t\n\t\t\tif ( strpos(strtolower($browser_type), $k) !== false ) {\n\t\t\t\t\n\t\t\t\treturn $bicons[ $k ];\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn 'fas fa-window-maximize';\n\t\t\n    }\n\n    function getBrowserIcon($browser_family, $size = '128x128', $module = 'base') {\n\n        if ($browser_family) {\n            $browser_family = strtolower($browser_family);\n        }\n\n\n        if (file_exists(OWA_MODULES_DIR.$module.'/i/browsers/'.$size.'/'.$browser_family.'.png')) {\n            return $this->makeImageLink('base/i/browsers/'.$size.'/'.$browser_family.'.png');\n        } else {\n            return $this->makeImageLink('base/i/browsers/'.$size.'/default.png');\n        }\n    }\n\n\n    function makeLinkQueryString($query_params) {\n\n        $new_query_params = array();\n\n        //Load params passed by caller\n        if (!empty($this->caller_params)):\n            foreach ($this->caller_params as $name => $value) {\n                if (!empty($value)):\n                    $new_query_params[$name] = $value;\n                endif;\n            }\n        endif;\n\n        // Load overrides\n        if (!empty($query_params)):\n            foreach ($query_params as $name => $value) {\n                if (!empty($value)):\n                    $new_query_params[$name] = $value;\n                endif;\n            }\n        endif;\n\n        // Construct GET request\n        if (!empty($new_query_params)):\n            foreach ($new_query_params as $name => $value) {\n                if (!empty($value)):\n                    $get .= $name . \"=\" . $value . \"&\";\n                endif;\n            }\n        endif;\n\n        return $get;\n\n    }\n    \n    function displayNavigationMenu( $menu_name, $addState = true, $options = [] ) {\n        \n        if ( $menu_name ) {\n            \n            $defaults = [\n                \n                'class'                 => 'navigation',\n                'container_element'     => 'nav'\n            ];\n            \n            $options = owa_lib::setDefaultParams( $defaults, $options );\n            \n            $nav = owa_coreAPI::getGroupNavigation( $menu_name );\n            \n            if ( $nav ) {\n                \n                $items = $this->makeNavigation( $nav, $menu_name . '_menu', $class );\n                \n                $menu = sprintf( '<%s class=\"%s\">%s</%s>', $options['container_element'], $options['class'], $items, $options['container_element'] );\n                \n                $this->out( $menu, false );\n                \n            } else {\n                \n                $this->out('There is no menu by that name.');\n            }\n            \n            $this->out( $menu );\n        }\n    }\n\n    /**\n     * Makes navigation links by checking whether or not the view\n     * that is rendering the template is not the view being refered to in the link.\n     *\n     * @param array navigation array\n     */\n    function makeNavigation($nav, $id = '', $class = '', $li_template = '<LI class=\"%s\"><a href=\"%s\">%s</a></LI>', $li_class = '') {\n\n        $ul = sprintf('<UL id=\"%s\" class=\"%s\">', $id, $class);\n\n        if ( ! empty( $nav ) ) {\n\n            $navigation = $ul;\n\n            foreach($nav as $k => $v) {\n\n                $navigation .= sprintf($li_template, $li_class, $this->makeLink(array('do' => $v['ref']), true), $v['anchortext']);\n            }\n\n            $navigation .= '</UL>';\n\n            return $navigation;\n        }\n    }\n\n    function makeTwoLevelNav($links) {\n        \n        $navigation = '<UL id=\"report_top_level_nav_ul\">';\n\n        foreach($links as $k => $v) {\n\n            if (!empty($v['subgroup'])):\n                $sub_nav = $this->makeNavigation($v['subgroup']);\n\n                $navigation .= sprintf('<LI class=\"drawer\"><H2 class=\"nav_header\"><a href=\"%s\">%s</a></H2>%s</LI>',\n                                                $this->makeLink(array('do' => $v['ref']), true),\n                                                $v['anchortext'], $sub_nav);\n            else:\n\n                $navigation .= sprintf('<LI class=\"drawer\"><H2 class=\"nav_header\"><a href=\"%s\">%s</a></H2></LI>',\n                                                $this->makeLink(array('do' => $v['ref']), true),\n                                                $v['anchortext']);\n\n            endif;\n\n        }\n\n        $navigation .= '</UL>';\n\n        return $navigation;\n\n    }\n\n    function daysAgo($time) {\n\n        $now = mktime(23, 59, 59, $this->time_now['month'], $this->time_now['day'], $this->time_now['year']);\n\n        $days = round(($now - $time) / (3600*24));\n\n        switch ($days) {\n\n            case 1:\n                return $days . \" day ago\";\n\n            default:\n                return $days . \" days ago\";\n        }\n\n    }\n\n    /**\n     * @depricated\n     * @todo remove\n     */\n    function getAuthStatus() {\n\n        if (!class_exists('owa_auth')) {\n            require_once(OWA_BASE_DIR.'/owa_auth.php');\n        }\n\n        $auth = &owa_auth::get_instance();\n        return $auth->auth_status;\n    }\n\n    function makeWikiLink( $page ) {\n\n        return sprintf( '%s/%s', $this->config['wiki_url'], $page );\n    }\n\n    /**\n     * Returns Namespace value to template\n     *\n     * @return string\n     */\n    function getNs() {\n\n        return $this->config['ns'];\n    }\n\n    function makeParamString($params = array(), $add_state = false, $format = 'query', $namespace = true) {\n\n        $all_params = array();\n\n        // merge in state params\n        if ($add_state) {\n            $all_params = array_merge($all_params, $this->getAllStateParams());\n        }\n        //merge in params\n        $all_params = array_merge($all_params, $params);\n\n        switch($format) {\n\n            case 'query':\n\n                $get = '';\n\n                $count = count($all_params);\n\n                $i = 0;\n\n                foreach ($all_params as $n => $v) {\n\n                    $get .= owa_coreAPI::getSetting('base','ns').$n.'='.$v;\n\n                    $i++;\n\n                    if ($i < $count):\n                        $get .= \"&\";\n                    endif;\n                }\n\n                $string= $get;\n\n                break;\n\n            case 'cookie':\n\n                $string = owa_lib::implode_assoc('=>', '|||', $all_params);\n                break;\n\n            case 'json':\n\n                $string = json_encode( $all_params );\n\n                break;\n        }\n\n\n        return $string;\n\n    }\n\n    function getAllStateParams() {\n\n        $all_params = array();\n\n        if (!empty($this->caller_params['link_state'])) {\n            $all_params = array_merge($all_params, $this->caller_params['link_state']);\n        }\n\n        // add in period properties if available\n        $period = $this->get('timePeriod');\n\n        if (!empty($period)) {\n            $all_params = array_merge($all_params, $period->getPeriodProperties());\n            //print_r($all_params);\n        }\n\n        return $all_params;\n    }\n    \n    function getLinkStateParam( $key ) {\n\t \n\t    $params = $this->getAllStateParams();\n\t    \n\t    if (array_key_exists($key, $params)) {\n\t\t    \n\t\t   return $params[ $key ];\t\t\n\t    }\n\n    }\n\n\n    /**\n     * Makes Links, adds state to links optionaly.\n     *\n     * @param array $params\n     * @param boolean $add_state\n     * @return string\n     */\n    function makeLink($params = array(), $add_state = false, $url = '', $xml = false, $add_nonce = false) {\n\n        $all_params = array();\n\n        //Loads link state passed by caller\n        if ($add_state == true) {\n            if (!empty($this->caller_params['link_state'])) {\n                $all_params = array_merge($all_params, $this->caller_params['link_state']);\n            }\n\n            // add in period properties if available\n            $period = $this->get('timePeriod');\n\n            if (!empty($period)) {\n                $all_params = array_merge($all_params, $period->getPeriodProperties());\n\n            }\n        }\n\n        // Load overrides\n        if (!empty($params)) {\n            $params = array_filter($params);\n            $all_params = array_merge($all_params, $params);\n        }\n\n        // add nonce if called for\n        if ($add_nonce) {\n            if ( array_key_exists('do', $all_params) ) {\n                $action = $all_params['do'];\n            } elseif ( array_key_exists('action', $all_params) ) {\n                $action = $all_params['action'];\n            }\n\n            $all_params['nonce'] = owa_coreAPI::createNonce($action);\n        }\n\n        $get = '';\n\n        if (!empty($all_params)):\n\n            $count = count($all_params);\n\n            $i = 0;\n\n            foreach ($all_params as $n => $v) {\n\n                $get .= $this->config['ns'].owa_sanitize::escapeForDisplay($n).'='.owa_sanitize::escapeForDisplay($v);\n\n                $i++;\n\n                if ($i < $count):\n                    $get .= \"&\";\n                endif;\n            }\n        endif;\n\n        if (empty($url)):\n            $url = $this->config['main_url'];\n        endif;\n\n        $link = sprintf($this->config['link_template'], $url, $get);\n\n        if ($xml == true):\n            $link = $this->escapeForXml($link);\n        endif;\n\n        return $link;\n\n    }\n\n    function escapeForXml($string) {\n\n        $string = str_replace(array('&', '\"', \"'\", '<', '>' ), array('&amp;' , '&quot;', '&apos;' , '&lt;' , '&gt;'), $string);\n        // removes non-ascii chars\n        $string = owa_lib::escapeNonAsciiChars($string);\n        return $string;\n    }\n\n    function makeAbsoluteLink($params = array(), $add_state = false, $url = '', $xml = false) {\n\n        if (empty($url)):\n            $url = $this->config['main_absolute_url'];\n        endif;\n\n        return $this->makeLink($params, $add_state, $url, $xml);\n\n    }\n    \n    function getApiKey() {\n\t    \n\t\treturn owa_coreAPI::getCurrentUserApiKey();\n    }\n\n    function makeApiLink($params = array(), $add_state = false, $add_apiKey = false) {\n\n        $url = $this->config['rest_api_url'];\n        \n        if ( $add_apiKey ) {\n\t        \n\t        $params['apiKey'] = $this->getApiKey();\n            \n        } else {\n            \n            $params['nonce'] = owa_coreAPI::createRestApiNonce( $params['version'], $params['module'], $params['do'] );\n        }\n      \n        $link = $this->makeLink($params, $add_state, $url);\n        \n        if ( $add_apiKey ) {\n\t     \t\n\t    \treturn $this->signRequestUrl( $link, $this->getApiKey() );\n\t    \t\n\t    } else {\n        \n        \treturn $link;\n        }\n    }\n    \n    function signRequestUrl( $url, $apiKey ) {\n\t    \n\t    return owa_coreAPI::signRequestUrl( $url, $apiKey );\n    }\n\n\n    function makeImageLink($path, $absolute = false) {\n\n        if ($absolute === true) {\n            $url = owa_coreAPI::getSetting('base', 'modules_url');\n        } else {\n            $url = owa_coreAPI::getSetting('base', 'modules_url');\n        }\n\n        return $url.$path;\n\n    }\n\n    function includeTemplate($file) {\n\n        $this->set_template($file);\n        include($this->file);\n        return;\n\n    }\n\n    function setTemplate($file) {\n\n        $this->set_template($file);\n        return $this->file;\n\n    }\n\n    function getWidget($do, $params = array(), $wrapper = true, $add_state = true) {\n\n        $final_params = array();\n\n        if (empty($params)):\n            $params = array();\n        endif;\n\n        $params['do'] = $do;\n\n        if ($wrapper === true):\n            $params['initial_view'] = true;\n            $params['wrapper'] = true;\n        elseif ($wrapper === 'inpage'):\n            $params['initial_view'] = true;\n            $params['wrapper'] = 'inpage';\n        else:\n            $params['wrapper'] = false;\n        endif;\n\n        // add state params into request params\n        if ($add_state === true):\n            $final_params = array_merge($final_params, $this->caller_params['link_state']);\n        endif;\n\n        // apply overides made via the template\n        $final_params = array_merge($final_params, array_filter($params));\n\n        return owa_coreAPI::performAction($do, $final_params);\n    }\n\n    function makeJson($array) {\n\n        $reserved_words = owa_coreAPI::getSetting('base', 'reserved_words');\n\n        $json = '{';\n\n        foreach ($array as $k => $v) {\n\n            if (is_object($v)) {\n                if (method_exists($v, 'toString')) {\n                    $v = $v->toString();\n                } else {\n                    $v = '';\n                }\n\n            }\n\n            if (in_array($k, array_keys($reserved_words))) {\n                $k = $reserved_words[$k];\n            }\n            \n            $json .= sprintf('%s: \"%s\", ', $k, owa_sanitize::escapeForDisplay( $v ) ) ;\n\n        }\n\n\n        $json = substr($json, 0, -2);\n\n        $json .= '}';\n\n        return $json;\n\n    }\n\n    function headerActions() {\n\n        return;\n    }\n\n    function footerActions() {\n\n        return;\n    }\n\n    function makePagination($pagination, $map = array(), $add_state = true, $template = '') {\n\n        $pages = '';\n        //print_r($pagination);\n        if ($pagination['max_page_num'] > 1) {\n\n            $pages = '<div class=\"owa_pagination\"><UL>';\n\n            for ($i = 1; $i <= $pagination['max_page_num'];$i++) {\n\n                if ($pagination['page_num'] != $i) {\n                    $new_map = array();\n                    $new_map = $map;\n                    $new_map['page'] = $i;\n                    $link = sprintf('<LI class=\"owa_reportPaginationControl\"><a href=\"%s\">%s</a></LI>',\n                                                        $this->makeLink($new_map, $add_state),\n                                                        $i);\n\n                } else {\n\n                    $link = sprintf('<LI class=\"owa_reportPaginationControl\">%s</LI>', $i);\n                }\n\n                $pages .= $link;\n            }\n\n            $pages .= '</UL></div>';\n            $pages .= '<div style=\"clear:both;\"></div>';\n        }\n\n        return $pages;\n    }\n\n    function makePaginationFromResultSet($pagination, $map = array(), $add_state = true, $template = '') {\n\n        $pages = '';\n        //print_r($pagination);\n        //print $pagination->total_pages;\n\n        if ($pagination->total_pages > 1) {\n\n            $pages = '<div class=\"owa_pagination\"><UL>';\n\n            for ($i = 1; $i <= $pagination->total_pages;$i++) {\n\n                if ($pagination->page != $i) {\n\n                    $new_map = array();\n\n                    if (is_array($map)) {\n                        $new_map = array_merge($map, $new_map);\n                    }\n\n                    $new_map['page'] = $i;\n\n                    $link = sprintf('<LI class=\"owa_reportPaginationControl\"><a href=\"%s\">%s</a></LI>',\n                                                        $this->makeLink($new_map, $add_state),\n                                                        $i);\n\n                } else {\n\n                    $link = sprintf('<LI class=\"owa_reportPaginationControl\">%s</LI>', $i);\n                }\n\n                $pages .= $link;\n            }\n\n            $pages .= '</UL></div>';\n\n\n\n        }\n\n        return $pages;\n    }\n\n    function get($name) {\n\n        if (array_key_exists($name, $this->vars)) {\n            return $this->vars[$name];\n        } else {\n            return false;\n        }\n\n    }\n\n    function getValue( $key, $var) {\n\n        if ( isset( $var ) && is_array( $var ) ) {\n            if ( array_key_exists( $key, $var) ) {\n                return $var[$key];\n            }\n        }\n    }\n\n    function substituteValue($string, $var_name) {\n\n        $value = $this->get($var_name);\n\n        if ($value) {\n\n            return sprintf($string,$value);\n        }\n    }\n\n    function makeNavigationMenu($links, $currentSiteId, $current_action = '') {\n\n        if (!empty($links) && !empty($currentSiteId)) {\n\n            $t = new owa_template;\n            $t->set('links', $links);\n            $t->set('currentSiteId', $currentSiteId);\n\t\t\t$t->set('params', array('do' => $current_action ));\n            $t->caller_params['link_state'] = $this->caller_params['link_state'];\n            $t->set_template('report_nav.tpl');\n            return $t->fetch();\n        } else {\n\n            return false;\n        }\n\n    }\n\n    function displayChart($id, $data, $width = '100%', $height = '200px') {\n\n        if (!empty($data)) {\n\n            $t = new owa_template;\n            $t->set('dom_id', $id.'Chart');\n            $t->set('data', $data);\n            $t->set('width', $width);\n            $t->set('height', $height);\n            $t->set_template('chart_dom.tpl');\n            return $t->fetch();\n        } else {\n\n            return false;\n        }\n    }\n\n    function displaySparkline($id, $data, $width = '100px', $height = '35px') {\n\n        if (!empty($data)) {\n\n            $data_string = implode(',', $data);\n\n            $t = new owa_template;\n            $t->set('dom_id', $id.'Sparkline');\n            $t->set('data', $data_string);\n            $t->set('width', $width);\n            $t->set('height', $height);\n            $t->set_template('sparkline_dom.tpl');\n            return $t->fetch();\n\n        } else {\n\n            return false;\n        }\n    }\n\n    function displaySeriesAsSparkline($name, $result_set_obj, $id = '') {\n\n        if (!$id) {\n            $id = rand();\n        }\n\n        $series = $result_set_obj->getSeries($name);\n\n        if ($series) {\n            echo $this->displaySparkline($id, $series);\n        }\n    }\n\n    function makeTable($labels, $data, $table_class = '', $table_id = '', $is_sortable = true) {\n\n        $t = new owa_template;\n\n        if (!empty($table_id)) {\n            $id = rand();\n        }\n\n        $t->set('table_id', $id.'Table');\n        $t->set('data', $data);\n        $t->set('labels', $labels);\n        $t->set('class', $table_class);\n        if ($is_sortable === true) {\n            $t->set('sort_table_class', 'tablesorter');\n        }\n\n        $t->set_template('generic_table.tpl');\n\n        return $t->fetch();\n\n    }\n\n    function subTemplate($template_name = '', $map = array(), $linkstate = array()) {\n\n        $t = new owa_template;\n\n        $t->set_template($template_name);\n\n        foreach ($map as $k => $v) {\n\n            $t->set($k, $v);\n        }\n\n        return $t->fetch();\n\n    }\n\n    function formatNumber($num, $decimal_places) {\n\n        return number_format($num, $decimal_places,'.',',');\n    }\n\n    function getAvatarImage($email) {\n\n        if (false != $email && $email !== '(not set)') {\n            return sprintf(\"https://www.gravatar.com/avatar/%s?s=30\", md5($email));\n        }\n    }\n\n    function displayMetricInfobox($params = array()) {\n\n        $t = new owa_template;\n\n        if (!empty($dom_id)) {\n            $dom_id = rand();\n        }\n        $params['do'] = 'getResultSet';\n        $count = owa_coreAPI::executeApiCommand($params);\n        $params['period'] = 'last_thirty_days';\n        $params['dimensions'] = 'date';\n        $trend = owa_coreAPI::executeApiCommand($params);\n        $t->set('metric_name', $params['metrics']);\n        $t->set('dom_id', $dom_id);\n        $t->set('count', $count);\n        $t->set('trend', $trend);\n        $t->set_template('metricInfobox.php');\n\n        return $t->fetch();\n\n    }\n\n    public function renderKpiInfobox($number, $label, $link = '', $class = '') {\n\n        $t = new owa_template;\n        $t->set_template( 'kpiInfobox.php' );\n        $t->set( 'number', $number );\n        $t->set( 'label', $label );\n\n        if ($link) {\n            $t->set( 'link', $link );\n        }\n\n        if ($class) {\n            $t->set( 'class', $class );\n        }\n\n        echo $t->fetch();\n\n    }\n\n    function renderDimension($template, $properties) {\n\n        $t = new owa_template;\n        $t->set('properties', $properties);\n        $t->set_template($template);\n        return $t->fetch();\n    }\n\n    /**\n     * Creates a hidden nonce form field\n     *\n     * @param     string    $action the action that the nonce should be tied to.\n     * @return    string The html fragment\n     */\n    function createNonceFormField($action) {\n\n        return sprintf(\n                '<input type=\"hidden\" name=\"%snonce\" value=\"%s\">',\n                owa_coreAPI::getSetting('base', 'ns'),\n                owa_coreAPI::createNonce($action));\n    }\n\n    function makeNonceLink() {\n\n    }\n\n    /**\n     * Outputs data into the template\n     *\n     * @param    string    $output        The String to be output into the template\n     * @param    bool    $sanitize    Flag that will sanitize the output for display\n     */\n    function out($output, $sanitize = true, $decode_special_entities = false) {\n\n        if ( $sanitize ) {\n            $output = owa_sanitize::escapeForDisplay($output);\n\n            if ( $decode_special_entities ) {\n                $output = strtr($output, array('&amp;'  => '&'));\n            }\n\n        }\n\n        echo $output;\n    }\n\n    function formatCurrency($value) {\n        return owa_lib::formatCurrency( $value, owa_coreAPI::getSetting( 'base', 'currencyLocal' ), owa_coreAPI::getSetting( 'base', 'currencyISO3' ) );\n    }\n\n    function getCurrentUser() {\n\n        return owa_coreAPI::getCurrentUser();\n    }\n\n    public function getSiteThumbnail( $domain, $width = '200' ) {\n\n        echo sprintf('<img src=\"https://s.wordpress.com/mshots/v1/%s?w=%s\" width=\"%s\">', urlencode($domain .'/'), $width, $width );\n    }\n\n    /**\n     * Checks is a display value is set.\n     */\n    public function isValueSet( $string ) {\n\n        if ($string === '(not set)' || empty( $string ) ) {\n\n            return false;\n\n        } else {\n\n            return true;\n        }\n    }\n}\n\n\n?>\n"
        },
        {
          "name": "owa_view.php",
          "type": "blob",
          "size": 24.0517578125,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\nrequire_once(OWA_BASE_CLASSES_DIR.'owa_template.php');\nrequire_once(OWA_BASE_CLASSES_DIR.'owa_requestContainer.php'); // ??\n\n/**\n * Abstract View Class\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.0.0\n */\n\nclass owa_view extends owa_base {\n\n    /**\n     * Main view template object\n     *\n     * @var object\n     */\n    var $t;\n\n    /**\n     * Body content template object\n     *\n     * @var object\n     */\n    var $body;\n\n    /**\n     * Sub View object\n     *\n     * @var object\n     */\n    var $subview;\n\n    /**\n     * Rednered subview\n     *\n     * @var string\n     */\n    var $subview_rendered;\n\n    /**\n     * CSS file for main template\n     *\n     * @var unknown_type\n     */\n    var $css_file;\n\n    /**\n     * The priviledge level required to access this view\n     * @depricated\n     * @var string\n     */\n    var $priviledge_level;\n\n    /**\n     * Type of page\n     *\n     * @var unknown_type\n     */\n    var $page_type;\n\n    /**\n     * Request Params\n     *\n     * @var unknown_type\n     */\n    var $params;\n\n    /**\n     * Authorization object\n     *\n     * @var object\n     */\n    var $auth;\n\n    var $module; // set by factory.\n\n    var $data;\n\n    var $default_subview;\n\n    var $is_subview;\n\n    var $js = array();\n\n    var $css = array();\n\n    var $postProcessView = false;\n\n    var $renderJsInline;\n\n    /**\n     * Constructor\n     *\n     */\n    function __construct($params = null) {\n\n        parent::__construct($params);\n\n        $this->t = new owa_template();\n        $this->body = new owa_template($this->module);\n        $this->setTheme();\n        $this->setCss(\"base/css/owa.css\");\n    }\n\n    /**\n     * Assembles the view using passed model objects\n     *\n     * @param unknown_type $data\n     * @return unknown\n     */\n    function assembleView($data) {\n\n        $this->e->debug('Assembling view: '.get_class($this));\n\n\n        // set view name in template class. used for navigation.\n        if (array_key_exists('view', $this->data)) {\n            $this->body->caller_params['view'] = $this->data['view'];\n        }\n\n        if (array_key_exists('params', $this->data)):\n            $this->body->set('params', $this->data['params']);\n        endif;\n\n        if (array_key_exists('subview', $this->data)):\n            $this->body->caller_params['subview'] = $this->data['subview'];\n        endif;\n\n        // Assign status msg\n        if (array_key_exists('status_msg', $this->data)):\n            $this->t->set('status_msg', $this->data['status_msg']);\n        endif;\n\n        // get status msg from code passed on the query string from a redirect.\n        if (array_key_exists('status_code', $this->data)):\n            $this->t->set('status_msg', $this->getMsg($this->data['status_code']));\n        endif;\n\n        // set error msg directly if passed from constructor\n        if (array_key_exists('error_msg', $this->data)):\n            $this->t->set('error_msg', $this->data['error_msg']);\n        endif;\n\n        // authentication status\n        if (array_key_exists('auth_status', $this->data)):\n            $this->t->set('authStatus', $this->data['auth_status']);\n        endif;\n\n        // get error msg from error code passed on the query string from a redirect.\n        if (array_key_exists('error_code', $this->data)):\n            $this->t->set('error_msg', $this->getMsg($this->data['error_code']));\n        endif;\n\n        // load subview\n        if (!empty($this->data['subview']) || !empty($this->default_subview)):\n            // Load subview\n            $this->loadSubView($this->data['subview']);\n        endif;\n\t\t\n\t\t$this->pre();\n\t\t\n        // construct main view.  This might set some properties of the subview.\n        if (method_exists($this, 'render')) {\n            $this->render($this->data);\n        } else {\n            // old style\n            $this->construct($this->data);\n        }\n        //array of errors usually used for field validations\n        if (array_key_exists('validation_errors', $this->data)) {\n            $this->body->set('validation_errors', $this->data['validation_errors']);\n       }\n\n        // pagination\n        if (array_key_exists('pagination', $this->data)) {\n            $this->body->set('pagination', $this->data['pagination']);\n        }\n\n        //$this->_setLinkState();\n\n        // assemble subview\n        if (!empty($this->data['subview'])) {\n\n            // set view name in template. used for navigation.\n            $this->subview->body->caller_params['view'] = $this->data['subview'];\n\n            // Set validation errors\n            $this->subview->body->set('validation_errors', $this->get('validation_errors'));\n\n            // pagination\n            if (array_key_exists('pagination', $this->data)) {\n                $this->subview->body->set('pagination', $this->data['pagination']);\n            }\n\n            if (array_key_exists('params', $this->data)) {\n                $this->subview->body->set('params', $this->data['params']);\n                $this->subview->body->set('do', $this->data['params']['do']);\n            }\n\n            // Load subview\n            $this->renderSubView($this->data);\n\n            // assign subview to body template\n            $this->body->set('subview', $this->subview_rendered);\n\n\n        }\n\n        // assign validation errors\n        if (!empty($this->data['validation_errors'])) {\n\t        \n            $this->t->set('validation_errors', $this->data['validation_errors']);\n        }\n\n\n        // fire post method\n        $this->post();\n\n        // assign css and js ellements if the view is not a subview.\n        // subview css/js have been merged/pulls from subview and assigned here.\n        if ($this->is_subview != true) {\n            if (!empty($this->css)) {\n                $this->t->set('css', $this->css);\n            }\n\n            if (!empty($this->js)) {\n                $this->t->set('js', $this->js);\n            }\n        }\n\n        //Assign body to main template\n        $this->t->set('config', $this->config);\n\n        //Assign body to main template\n        $this->t->set('body', $this->body);\n\n        if ($this->postProcessView === true){\n            return $this->postProcess();\n        } else {\n            // Return fully asembled View\n            return $this->t->fetch();\n        }\n    }\n    \n\t/**\n     * Abstract pre render hook\n     *\n     */\n\tfunction pre() {\n\t\t\n\t\treturn false;\n\t}\n\t\n    /**\n     * Abstract Alternative rendering method reuires the setting of $this->postProcessView to fire\n     *\n     */\n    function postProcess() {\n\n        return false;\n    }\n\n    /**\n     * Post method fired right before view is rendered and returned\n     * as output\n     */\n    function post() {\n\n        return false;\n    }\n\n\n    /**\n     * Sets the theme to be used by a view\n     *\n     */\n    function setTheme() {\n\n        $this->t->set_template($this->config['report_wrapper']);\n\n        return;\n    }\n\n    /**\n     * Abstract method for assembling a view\n     * @depricated\n     * @param array $data\n     */\n    function construct($data) {\n\n        return;\n\n    }\n\n    /**\n     * Assembles subview\n     *\n     * @param array $data\n     */\n    function loadSubView($subview) {\n\n        if (empty($subview)):\n            if (!empty($this->default_subview)):\n                $subview = $this->default_subview;\n                $this->data['subview'] = $this->default_subview;\n            else:\n                return $this->e->debug(\"No Subview was specified by caller.\");\n            endif;\n        endif;\n\n        $this->subview = owa_coreAPI::subViewFactory($subview);\n        //print_r($subview.'///');\n        $this->subview->setData($this->data);\n    }\n\n    /**\n     * Assembles subview\n     *\n     * @param array $data\n     */\n    function renderSubView($data) {\n\n        // Stores subview as string into $this->subview\n        $this->subview_rendered = $this->subview->assembleSubView($data);\n\n        // pull css and js elements needed by subview\n        $this->css = array_merge($this->css, $this->subview->css);\n        $this->js = array_merge($this->js, $this->subview->js);\n    }\n\n    /**\n     * Assembles the view using passed model objects\n     *\n     * @param unknown_type $data\n     * @return unknown\n     */\n    function assembleSubView($data) {\n\n        // construct main view.  This might set some properties of the subview.\n        if (method_exists($this, 'render')) {\n            $this->render($data);\n        } else {\n            // old style\n            $this->construct($data);\n        }\n\n        $this->t->set_template('wrapper_subview.tpl');\n\n        //Assign body to main template\n        $this->t->set('body', $this->body);\n\n        // Return fully asembled View\n        $page =  $this->t->fetch();\n\n        return $page;\n\n    }\n\n    function setCss($path, $version = null, $deps = array(), $ie_only = false) {\n\n        if ( ! $version ) {\n\t        \n            $version = OWA_VERSION;\n        }\n\n        $uid = $path;\n        $url = sprintf('%s?version=%s', owa_coreAPI::getSetting('base', 'modules_url').$path, $version);\n        $this->css[$uid]['url'] = $url;\n        // build file system path just in case we need to concatenate the JS into a single file.\n        $fs_path = OWA_MODULES_DIR.$path;\n        $this->css[$uid]['path'] = $fs_path;\n        $this->css[$uid]['deps'] = $deps;\n        $this->css[$uid]['version'] = $version;\n        $this->css[$uid]['ie_only'] = $ie_only;\n    }\n\n    function setJs($name, $path, $version ='', $deps = array(), $ie_only = false) {\n\n        if (empty($version)) {\n\t        \n            $version = OWA_VERSION;\n        }\n\n        $uid = $name.$version;\n\n        $url = sprintf('%s?version=%s', owa_coreAPI::getSetting('base', 'modules_url').$path, $version);\n        $this->js[$uid]['url'] = $url;\n\n        // build file system path just in case we need to concatenate the JS into a single file.\n        $fs_path = OWA_MODULES_DIR.$path;\n        $this->js[$uid]['path'] = $fs_path;\n        $this->js[$uid]['deps'] = $deps;\n        $this->js[$uid]['version'] = $version;\n        $this->js[$uid]['ie_only'] = $ie_only;\n    }\n\n    function concatinateJs() {\n\n        $js_libs = '';\n\n        foreach ($this->js as $lib) {\n\n            $js_libs .= file_get_contents($lib['path']);\n            $js_libs .= \"\\n\\n\";\n        }\n\n        $this->body->set('js_includes', $js_libs);\n    }\n\n    /**\n     * Sets flag to tell view to render the JS inline as <SCRIPT> blocks\n     * @todo not yet implemented\n     */\n    function renderJsInline() {\n\n        $this->renderJsInLine = true;\n    }\n\n\n    /**\n     * Sets the Priviledge Level required to access this view\n     *\n     * @param string $level\n     */\n    function _setPriviledgeLevel( $level ) {\n\n        $this->priviledge_level = $level;\n\n        return;\n    }\n\n    /**\n     * Sets the page type of this view. Used for tracking.\n     *\n     * @param string $page_type\n     */\n    function _setPageType( $page_type ) {\n\n        $this->page_type = $page_type;\n\n        return;\n    }\n\n\n    /**\n     * Sets properties that are needed to maintain state in links to\n     * reports. This is used by many template functions.\n     *\n     */\n    function _setLinkState( $p = array() ) {\n\n        // if an array is not passed them just use params\n        if ( ! $p ) {\n\t        \n            $p = $this->get( 'params' );\n        }\n        \n        // control array - will check for these params. If they exist it will return.\n        $sp = [\n\t        \n            'period' => null,\n            'startDate' => null,\n            'endDate' => null,\n            'siteId' => null,\n            'startTime' => null,\n            'endTime' => null\n        ];\n                \n        // merge in any stte keys passed from the controller.\n        $state_keys = $this->get('state_keys') ?: [];\n        \n        foreach ( $state_keys as $k) {\n\t        \n\t        $sp[$k] = null;\n        }\n\n        // final result array\n        $link_params = array();\n\t\t\n\t\t// load the state array with values\n        if ( ! empty( $p ) ) {\n\n            $link_params = array_intersect_key($p, $sp);\n        }\n        \n        // needed for backward compatability with old use of site_id key name\n        // @todo research if this is still required.\n        if ( array_key_exists( 'site_id', $link_params ) && ! array_key_exists( 'siteId', $link_params ) ) {\n\t        \n            $link_params['siteId'] = $link_params['site_id'];\n        }\n\t\t\n\t\t// pass link stte to the various templates\n        $this->t->caller_params['link_state'] =  $link_params;\n        \n        $this->body->caller_params['link_state'] =  $link_params;\n\n        if( ! empty( $this->subview ) ) {\n\t        \n            $this->subview->body->caller_params[ 'link_state' ] =  $link_params;\n        }\n    }\n\n    function get( $name ) {\n\n        if ( array_key_exists( $name, $this->data ) ) {\n\t        \n            return $this->data[ $name ];\n            \n        } else {\n\t        \n            return false;\n        }\n    }\n\n    function set($name, $value) {\n\n        $this->data[$name] = $value;\n    }\n\n    function setSubViewProperty($name, $value) {\n\n        $this->subview->set($name, $value);\n    }\n\n    function getSubViewProperty($name) {\n        return $this->subview->get($name);\n    }\n\n    function setData($data) {\n        $this->data = $data;\n    }\n\n    function setTitle($title, $suffix = '') {\n\n        $this->t->set('page_title', $title);\n        $this->t->set('titleSuffix', $suffix);\n    }\n\n    function setContentTypeHeader($type = 'html') {\n\n        owa_lib::setContentTypeHeader($type);\n    }\n\n}\n\n/**\n * Generic HTMl Table View\n *\n * Will produce a generic html table\n *\n */\nclass owa_genericTableView extends owa_view {\n\n    function __construct() {\n\n        return parent::__construct();\n\n    }\n\n    function render($data) {\n\n        $this->t->set_template('wrapper_blank.tpl');\n        $this->body->set_template('generic_table.tpl');\n\n        if (!empty($data['labels'])):\n            $this->body->set('labels', $data['labels']);\n            $this->body->set('col_count', count($data['labels']));\n        else:\n            $this->body->set('labels', '');\n            $this->body->set('col_count', count($data['rows'][0]));\n        endif;\n\n        if (!empty($data['rows'])):\n            $this->body->set('rows', $data['rows']);\n            $this->body->set('row_count', count($data['rows']));\n        else:\n            $this->body->set('rows', '');\n            $this->body->set('row_count', 0);\n        endif;\n\n        if (array_key_exists('table_class', $data)):\n            $this->body->set('table_class', $data['table_class']);\n        else:\n            $this->body->set('table_class', 'data');\n        endif;\n\n        if (array_key_exists('header_orientation', $data)):\n            $this->body->set('header_orientation', $data['header_orientation']);\n        else:\n            $this->body->set('header_orientation', 'col');\n        endif;\n\n        if (array_key_exists('table_footer', $data)):\n            $this->body->set('table_footer', $data['table_footer']);\n        else:\n            $this->body->set('table_footer', '');\n        endif;\n\n        if (array_key_exists('table_caption', $data)):\n            $this->body->set('table_caption', $data['table_caption']);\n        else:\n            $this->body->set('table_caption', '');\n        endif;\n\n        if (array_key_exists('is_sortable', $data)) {\n            if ($data['is_sortable'] != true) {\n                $this->body->set('sort_table_class', '');\n            }\n        } else {\n            $this->body->set('sort_table_class', 'tablesorter');\n        }\n\n        if (array_key_exists('table_row_template', $data)):\n            $this->body->set('table_row_template', $data['table_row_template']);\n        else:\n            ;\n        endif;\n\n        // show the no data error msg\n        if (array_key_exists('show_error', $data)):\n            $this->body->set('show_error', $data['show_error']);\n        else:\n            $this->body->set('show_error', true);\n        endif;\n\n        $this->body->set('table_id', str_replace('.', '-', $data['params']['do']).'-table');\n\n    }\n}\n\n/**\n * @depricated\n */\nclass owa_sparklineJsView extends owa_view {\n\n    function __construct() {\n\n        return parent::__construct();\n\n    }\n\n    function render($data) {\n\n        // load template\n        $this->t->set_template('wrapper_blank.tpl');\n        $this->body->set_template('sparklineJs.tpl');\n        // set\n        $this->body->set('widget', $data['widget']);\n        $this->body->set('type', $data['type']);\n        $this->body->set('height', $data['height']);\n        $this->body->set('width', $data['width']);\n        $this->body->set('values', $data['series']['values']);\n        $this->body->set('dom_id', $data['dom_id'].rand());\n        //$this->setJs(\"includes/jquery/jquery.sparkline.js\");\n        return;\n    }\n}\n\nclass owa_mailView extends owa_view {\n\n    // post office\n    var $po;\n    var $postProcessView = true;\n\n    function __construct() {\n\n        // make this a service\n        require_once(OWA_BASE_CLASS_DIR.'mailer.php');\n        $this->po = new owa_mailer;\n        return parent::__construct();\n    }\n\n    function postProcess() {\n\n        $this->po->setHtmlBody( $this->t->fetch() );\n\n        if ( $this->get( 'plainTextView' ) ) {\n            $this->po->setAltBody( owa_coreAPI::displayView( $this->get( 'plain_text_view' ) ) );\n        }\n\n        return $this->po->sendMail();\n    }\n\n    function setMailSubject($sbj) {\n\n        $this->po->setSubject( $sbj );\n    }\n\n    function addMailToAddress($email, $name = '') {\n\n        if (empty($name)) {\n            $name = $email;\n        }\n\n        $this->po->addAddress($email, $name);\n    }\n}\n\nclass owa_adminView extends owa_view {\n\n    var $postProcessView = true;\n\n    function __construct() {\n\n        return parent::__construct();\n    }\n\n    function post() {\n        $this->setJs('owa.css');\n        $this->setJs('owa.admin.css');\n    }\n}\n\n/**\n * Rest API view\n *\n * This view assembles the response to REST API requests\n */\nclass owa_restApiView extends owa_view {\n\t\n\tfunction __construct() {\n\t \t\n\t \tparent::__construct();\n\t \t\n\t \t// load templates\n        $this->t->set_template('wrapper_blank.tpl');\n        \n        $this->body->set_template('restApiResponse.php');\n    }\n    \n    /**\n\t * Used to set values of the response that we do not want the\n\t * abstract view to worry about or have ot deal with.\n\t *\n\t */\n    function pre() {\n\t   \n\t   // look for jsonp callback\n        $callback = $this->get('jsonpCallback');\n\n        // if not found look on the request scope.\n        if ( ! $callback ) {\n            $callback = owa_coreAPI::getRequestParam('jsonpCallback');\n        }\n\n        if ( $callback ) {\n            $this->body->set('callback', $callback);\n            $type = 'jsonp';\n        } else {\n            \n            $type = 'json';\n        }\n\n\t   // set header if the request is from the API endpoint. Could be an internal request.\n\t   \n\t   if ( owa_coreAPI::getSetting('base', 'request_mode') === 'rest_api') {\n\t\t   \n\t\t\towa_lib::setContentTypeHeader( $type );\n\t\t\t\n\t\t\t// set cahce-control header to avid downstream caching.\n\t\t\theader(\"Cache-Control: max-age=0\");\t\t\n\t\t\t\n\t\t\t// add CORS request headers\n\t\t\t$this->addCorsHeaders();\n\t   }\n\n\t   \n\t\t// Generate GUID for response\n\t    $request = owa_coreAPI::getRequest();\n\n        $this->body->set('request_id', $request->guid );\n\t    \t    \n\t    $error = array();\n\t    \n\t    // set error msgs\n        if ( array_key_exists( 'error_msg', $this->data ) ) {\n\t        \n            $error[] = $this->data['error_msg'];\n        }\n        \n        if ( array_key_exists( 'validation_errors', $this->data ) ) {\n\t        \n            $error[] = $this->data['validation_errors'];\n        }\n        \n        $http_response = array(\n\t        \n\t        'status_code'\t=> http_response_code()\n        );\n        \n        $this->body->set('http_response', $http_response);\n        $this->body->set('data', '');\n        $this->body->set('error', $error);\n    }\n    \n    /**\n\t * Sets the data payload of the response\n\t */\n    function setResponseData( $data ) {\n\t    \n\t    $this->body->set( 'response_data', $data );\n    }\n    \n    function addCorsHeaders() {\n\t    \n\t    $s = owa_coreAPI::serviceSingleton();\n\t    $HTTP_ORIGIN = $s->request->getServerParam('HTTP_ORIGIN');\n\t    \n\t    // check for ORGIN header and bail if not found.\n        if ( ! isset( $HTTP_ORIGIN ) || $HTTP_ORIGIN == '') {\n\t       \n            return;\n        }\n\n        // Loop through sites list and add cors headers if the ORGIN header is present on the request\n        foreach ( owa_coreAPI::getSitesList() as $allowedOrigin ) {\n        \t\n        \tif ( $allowedOrigin !== $HTTP_ORIGIN ) {\n\t        \t\n            \tcontinue;\n            }\n\t\t\t\n\t\t\t// send back the allowed orgin\n            header( 'Access-Control-Allow-Origin: ' . $HTTP_ORIGIN );\n            \n            // needed to allow cookie content to become available to the DOM.\n            header( \"Access-Control-Allow-Credentials: true\" );\n            \n            // stop the loop\n            break;\n        }\n    }\n}\n\nclass owa_jsonView extends owa_view {\n\n    function __construct() {\n\n        return parent::__construct();\n    }\n\n    function render() {\n\n        // load template\n        $this->t->set_template('wrapper_blank.tpl');\n        $this->body->set_template('json.php');\n\n        // look for jsonp callback\n        $callback = $this->get('jsonpCallback');\n\n        // if not found look on the request scope.\n        if ( ! $callback ) {\n            $callback = owa_coreAPI::getRequestParam('jsonpCallback');\n        }\n\n        if ( $callback ) {\n            $body = sprintf(\"%s(%s);\", $callback, json_encode( $this->get( 'json' ) ) );\n            $type = 'jsonp';\n        } else {\n            $body = json_encode( $this->get( 'json' ) );\n            $type = 'json';\n        }\n\n        $this->body->set('json', $body);\n\n        owa_lib::setContentTypeHeader( $type );\n    }\n}\n\nclass owa_jsonResultsView extends owa_view {\n\n    function __construct() {\n\n        if (!class_exists('Services_JSON')) {\n            require_once(OWA_INCLUDE_DIR.'JSON.php');\n        }\n\n        return parent::__construct();\n    }\n\n    function render() {\n\n        // load template\n        $this->t->set_template('wrapper_blank.tpl');\n        $this->body->set_template('json.php');\n\n        $json = new Services_JSON();\n        // set\n        $this->body->set('json', $json->encode($this->get('data')));\n    }\n}\n\nclass owa_adminPageView extends owa_view {\n\n    function render($data) {\n\n        // Set Page title\n        $this->t->set('page_title', $this->get('title'));\n\n        // Set Page headline\n        $this->body->set('title', $this->get('title'));\n        $this->body->set('titleSuffix', $this->get('titleSuffix'));\n        $this->body->set_template('genericAdminPage.php');\n        \n        $this->setJs('owa.reporting', 'base/dist/owa.reporting-combined-min.js');\n        $this->setCss(\"base/css/owa.reporting-css-combined.css\");\n    }\n}\n\nclass owa_cliView extends owa_view {\n\n    function __construct( $params ) {\n\t   \t\n\t\tparent::__construct($params);\n    }\n    \n    function pre() {\n\t    \n\t    $this->t->set_template('wrapper_blank.tpl');\n        $this->body->set_template('msgsCli.php');\n\t    \n\t    $error = array();\n\t    \n\t    // set error msgs\n        if ( array_key_exists( 'error_msg', $this->data ) ) {\n\t        \n            $error[] = $this->data['error_msg'];\n        }\n        \n        if ( array_key_exists( 'validation_errors', $this->data ) ) {\n\t        \n            $error[] = $this->data['validation_errors'];\n        }\n        \n\t\t$this->body->set('response_data', '');\n\t\t$this->body->set('error', $error);\n    }\n    \n    /**\n\t * Sets the data payload of the response\n\t */\n    function setResponseData( $data ) {\n\t    \n\t    $this->body->set( 'response_data', $data );\n    }\n}\n\n?>\n"
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 52.9423828125,
          "content": "{\n  \"name\": \"owa\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 1,\n  \"requires\": true,\n  \"dependencies\": {\n    \"@discoveryjs/json-ext\": {\n      \"version\": \"0.5.6\",\n      \"resolved\": \"https://registry.npmjs.org/@discoveryjs/json-ext/-/json-ext-0.5.6.tgz\",\n      \"integrity\": \"sha512-ws57AidsDvREKrZKYffXddNkyaF14iHNHm8VQnZH6t99E8gczjNN0GpvcGny0imC80yQ0tHz1xVUKk/KFQSUyA==\"\n    },\n    \"@jridgewell/gen-mapping\": {\n      \"version\": \"0.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.2.tgz\",\n      \"integrity\": \"sha512-mh65xKQAzI6iBcFzwv28KVWSmCkdRBWoOh+bYQGW3+6OZvbbN3TqMGo5hqYxQniRcH9F2VZIoJCm4pa3BPDK/A==\",\n      \"requires\": {\n        \"@jridgewell/set-array\": \"^1.0.1\",\n        \"@jridgewell/sourcemap-codec\": \"^1.4.10\",\n        \"@jridgewell/trace-mapping\": \"^0.3.9\"\n      }\n    },\n    \"@jridgewell/resolve-uri\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.0.tgz\",\n      \"integrity\": \"sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w==\"\n    },\n    \"@jridgewell/set-array\": {\n      \"version\": \"1.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.2.tgz\",\n      \"integrity\": \"sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==\"\n    },\n    \"@jridgewell/source-map\": {\n      \"version\": \"0.3.2\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/source-map/-/source-map-0.3.2.tgz\",\n      \"integrity\": \"sha512-m7O9o2uR8k2ObDysZYzdfhb08VuEml5oWGiosa1VdaPZ/A6QyPkAJuwN0Q1lhULOf6B7MtQmHENS743hWtCrgw==\",\n      \"requires\": {\n        \"@jridgewell/gen-mapping\": \"^0.3.0\",\n        \"@jridgewell/trace-mapping\": \"^0.3.9\"\n      }\n    },\n    \"@jridgewell/sourcemap-codec\": {\n      \"version\": \"1.4.14\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz\",\n      \"integrity\": \"sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==\"\n    },\n    \"@jridgewell/trace-mapping\": {\n      \"version\": \"0.3.14\",\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.14.tgz\",\n      \"integrity\": \"sha512-bJWEfQ9lPTvm3SneWwRFVLzrh6nhjwqw7TUFFBEMzwvg7t7PCDenf2lDwqo4NQXzdpgBXyFgDWnQA+2vkruksQ==\",\n      \"requires\": {\n        \"@jridgewell/resolve-uri\": \"^3.0.3\",\n        \"@jridgewell/sourcemap-codec\": \"^1.4.10\"\n      }\n    },\n    \"@nodelib/fs.scandir\": {\n      \"version\": \"2.1.5\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz\",\n      \"integrity\": \"sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==\",\n      \"requires\": {\n        \"@nodelib/fs.stat\": \"2.0.5\",\n        \"run-parallel\": \"^1.1.9\"\n      }\n    },\n    \"@nodelib/fs.stat\": {\n      \"version\": \"2.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz\",\n      \"integrity\": \"sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==\"\n    },\n    \"@nodelib/fs.walk\": {\n      \"version\": \"1.2.8\",\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz\",\n      \"integrity\": \"sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==\",\n      \"requires\": {\n        \"@nodelib/fs.scandir\": \"2.1.5\",\n        \"fastq\": \"^1.6.0\"\n      }\n    },\n    \"@types/eslint\": {\n      \"version\": \"8.2.2\",\n      \"resolved\": \"https://registry.npmjs.org/@types/eslint/-/eslint-8.2.2.tgz\",\n      \"integrity\": \"sha512-nQxgB8/Sg+QKhnV8e0WzPpxjIGT3tuJDDzybkDi8ItE/IgTlHo07U0shaIjzhcvQxlq9SDRE42lsJ23uvEgJ2A==\",\n      \"requires\": {\n        \"@types/estree\": \"*\",\n        \"@types/json-schema\": \"*\"\n      }\n    },\n    \"@types/eslint-scope\": {\n      \"version\": \"3.7.3\",\n      \"resolved\": \"https://registry.npmjs.org/@types/eslint-scope/-/eslint-scope-3.7.3.tgz\",\n      \"integrity\": \"sha512-PB3ldyrcnAicT35TWPs5IcwKD8S333HMaa2VVv4+wdvebJkjWuW/xESoB8IwRcog8HYVYamb1g/R31Qv5Bx03g==\",\n      \"requires\": {\n        \"@types/eslint\": \"*\",\n        \"@types/estree\": \"*\"\n      }\n    },\n    \"@types/estree\": {\n      \"version\": \"0.0.50\",\n      \"resolved\": \"https://registry.npmjs.org/@types/estree/-/estree-0.0.50.tgz\",\n      \"integrity\": \"sha512-C6N5s2ZFtuZRj54k2/zyRhNDjJwwcViAM3Nbm8zjBpbqAdZ00mr0CFxvSKeO8Y/e03WVFLpQMdHYVfUd6SB+Hw==\"\n    },\n    \"@types/glob\": {\n      \"version\": \"7.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/@types/glob/-/glob-7.2.0.tgz\",\n      \"integrity\": \"sha512-ZUxbzKl0IfJILTS6t7ip5fQQM/J3TJYubDm3nMbgubNNYS62eXeUpoLUC8/7fJNiFYHTrGPQn7hspDUzIHX3UA==\",\n      \"requires\": {\n        \"@types/minimatch\": \"*\",\n        \"@types/node\": \"*\"\n      }\n    },\n    \"@types/json-schema\": {\n      \"version\": \"7.0.9\",\n      \"resolved\": \"https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.9.tgz\",\n      \"integrity\": \"sha512-qcUXuemtEu+E5wZSJHNxUXeCZhAfXKQ41D+duX+VYPde7xyEVZci+/oXKJL13tnRs9lR2pr4fod59GT6/X1/yQ==\"\n    },\n    \"@types/minimatch\": {\n      \"version\": \"3.0.5\",\n      \"resolved\": \"https://registry.npmjs.org/@types/minimatch/-/minimatch-3.0.5.tgz\",\n      \"integrity\": \"sha512-Klz949h02Gz2uZCMGwDUSDS1YBlTdDDgbWHi+81l29tQALUtvz4rAYi5uoVhE5Lagoq6DeqAUlbrHvW/mXDgdQ==\"\n    },\n    \"@types/node\": {\n      \"version\": \"17.0.8\",\n      \"resolved\": \"https://registry.npmjs.org/@types/node/-/node-17.0.8.tgz\",\n      \"integrity\": \"sha512-YofkM6fGv4gDJq78g4j0mMuGMkZVxZDgtU0JRdx6FgiJDG+0fY0GKVolOV8WqVmEhLCXkQRjwDdKyPxJp/uucg==\"\n    },\n    \"@webassemblyjs/ast\": {\n      \"version\": \"1.11.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/ast/-/ast-1.11.1.tgz\",\n      \"integrity\": \"sha512-ukBh14qFLjxTQNTXocdyksN5QdM28S1CxHt2rdskFyL+xFV7VremuBLVbmCePj+URalXBENx/9Lm7lnhihtCSw==\",\n      \"requires\": {\n        \"@webassemblyjs/helper-numbers\": \"1.11.1\",\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.11.1\"\n      }\n    },\n    \"@webassemblyjs/floating-point-hex-parser\": {\n      \"version\": \"1.11.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/floating-point-hex-parser/-/floating-point-hex-parser-1.11.1.tgz\",\n      \"integrity\": \"sha512-iGRfyc5Bq+NnNuX8b5hwBrRjzf0ocrJPI6GWFodBFzmFnyvrQ83SHKhmilCU/8Jv67i4GJZBMhEzltxzcNagtQ==\"\n    },\n    \"@webassemblyjs/helper-api-error\": {\n      \"version\": \"1.11.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-api-error/-/helper-api-error-1.11.1.tgz\",\n      \"integrity\": \"sha512-RlhS8CBCXfRUR/cwo2ho9bkheSXG0+NwooXcc3PAILALf2QLdFyj7KGsKRbVc95hZnhnERon4kW/D3SZpp6Tcg==\"\n    },\n    \"@webassemblyjs/helper-buffer\": {\n      \"version\": \"1.11.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-buffer/-/helper-buffer-1.11.1.tgz\",\n      \"integrity\": \"sha512-gwikF65aDNeeXa8JxXa2BAk+REjSyhrNC9ZwdT0f8jc4dQQeDQ7G4m0f2QCLPJiMTTO6wfDmRmj/pW0PsUvIcA==\"\n    },\n    \"@webassemblyjs/helper-numbers\": {\n      \"version\": \"1.11.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-numbers/-/helper-numbers-1.11.1.tgz\",\n      \"integrity\": \"sha512-vDkbxiB8zfnPdNK9Rajcey5C0w+QJugEglN0of+kmO8l7lDb77AnlKYQF7aarZuCrv+l0UvqL+68gSDr3k9LPQ==\",\n      \"requires\": {\n        \"@webassemblyjs/floating-point-hex-parser\": \"1.11.1\",\n        \"@webassemblyjs/helper-api-error\": \"1.11.1\",\n        \"@xtuc/long\": \"4.2.2\"\n      }\n    },\n    \"@webassemblyjs/helper-wasm-bytecode\": {\n      \"version\": \"1.11.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-wasm-bytecode/-/helper-wasm-bytecode-1.11.1.tgz\",\n      \"integrity\": \"sha512-PvpoOGiJwXeTrSf/qfudJhwlvDQxFgelbMqtq52WWiXC6Xgg1IREdngmPN3bs4RoO83PnL/nFrxucXj1+BX62Q==\"\n    },\n    \"@webassemblyjs/helper-wasm-section\": {\n      \"version\": \"1.11.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-wasm-section/-/helper-wasm-section-1.11.1.tgz\",\n      \"integrity\": \"sha512-10P9No29rYX1j7F3EVPX3JvGPQPae+AomuSTPiF9eBQeChHI6iqjMIwR9JmOJXwpnn/oVGDk7I5IlskuMwU/pg==\",\n      \"requires\": {\n        \"@webassemblyjs/ast\": \"1.11.1\",\n        \"@webassemblyjs/helper-buffer\": \"1.11.1\",\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.11.1\",\n        \"@webassemblyjs/wasm-gen\": \"1.11.1\"\n      }\n    },\n    \"@webassemblyjs/ieee754\": {\n      \"version\": \"1.11.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/ieee754/-/ieee754-1.11.1.tgz\",\n      \"integrity\": \"sha512-hJ87QIPtAMKbFq6CGTkZYJivEwZDbQUgYd3qKSadTNOhVY7p+gfP6Sr0lLRVTaG1JjFj+r3YchoqRYxNH3M0GQ==\",\n      \"requires\": {\n        \"@xtuc/ieee754\": \"^1.2.0\"\n      }\n    },\n    \"@webassemblyjs/leb128\": {\n      \"version\": \"1.11.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/leb128/-/leb128-1.11.1.tgz\",\n      \"integrity\": \"sha512-BJ2P0hNZ0u+Th1YZXJpzW6miwqQUGcIHT1G/sf72gLVD9DZ5AdYTqPNbHZh6K1M5VmKvFXwGSWZADz+qBWxeRw==\",\n      \"requires\": {\n        \"@xtuc/long\": \"4.2.2\"\n      }\n    },\n    \"@webassemblyjs/utf8\": {\n      \"version\": \"1.11.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/utf8/-/utf8-1.11.1.tgz\",\n      \"integrity\": \"sha512-9kqcxAEdMhiwQkHpkNiorZzqpGrodQQ2IGrHHxCy+Ozng0ofyMA0lTqiLkVs1uzTRejX+/O0EOT7KxqVPuXosQ==\"\n    },\n    \"@webassemblyjs/wasm-edit\": {\n      \"version\": \"1.11.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wasm-edit/-/wasm-edit-1.11.1.tgz\",\n      \"integrity\": \"sha512-g+RsupUC1aTHfR8CDgnsVRVZFJqdkFHpsHMfJuWQzWU3tvnLC07UqHICfP+4XyL2tnr1amvl1Sdp06TnYCmVkA==\",\n      \"requires\": {\n        \"@webassemblyjs/ast\": \"1.11.1\",\n        \"@webassemblyjs/helper-buffer\": \"1.11.1\",\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.11.1\",\n        \"@webassemblyjs/helper-wasm-section\": \"1.11.1\",\n        \"@webassemblyjs/wasm-gen\": \"1.11.1\",\n        \"@webassemblyjs/wasm-opt\": \"1.11.1\",\n        \"@webassemblyjs/wasm-parser\": \"1.11.1\",\n        \"@webassemblyjs/wast-printer\": \"1.11.1\"\n      }\n    },\n    \"@webassemblyjs/wasm-gen\": {\n      \"version\": \"1.11.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wasm-gen/-/wasm-gen-1.11.1.tgz\",\n      \"integrity\": \"sha512-F7QqKXwwNlMmsulj6+O7r4mmtAlCWfO/0HdgOxSklZfQcDu0TpLiD1mRt/zF25Bk59FIjEuGAIyn5ei4yMfLhA==\",\n      \"requires\": {\n        \"@webassemblyjs/ast\": \"1.11.1\",\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.11.1\",\n        \"@webassemblyjs/ieee754\": \"1.11.1\",\n        \"@webassemblyjs/leb128\": \"1.11.1\",\n        \"@webassemblyjs/utf8\": \"1.11.1\"\n      }\n    },\n    \"@webassemblyjs/wasm-opt\": {\n      \"version\": \"1.11.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wasm-opt/-/wasm-opt-1.11.1.tgz\",\n      \"integrity\": \"sha512-VqnkNqnZlU5EB64pp1l7hdm3hmQw7Vgqa0KF/KCNO9sIpI6Fk6brDEiX+iCOYrvMuBWDws0NkTOxYEb85XQHHw==\",\n      \"requires\": {\n        \"@webassemblyjs/ast\": \"1.11.1\",\n        \"@webassemblyjs/helper-buffer\": \"1.11.1\",\n        \"@webassemblyjs/wasm-gen\": \"1.11.1\",\n        \"@webassemblyjs/wasm-parser\": \"1.11.1\"\n      }\n    },\n    \"@webassemblyjs/wasm-parser\": {\n      \"version\": \"1.11.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wasm-parser/-/wasm-parser-1.11.1.tgz\",\n      \"integrity\": \"sha512-rrBujw+dJu32gYB7/Lup6UhdkPx9S9SnobZzRVL7VcBH9Bt9bCBLEuX/YXOOtBsOZ4NQrRykKhffRWHvigQvOA==\",\n      \"requires\": {\n        \"@webassemblyjs/ast\": \"1.11.1\",\n        \"@webassemblyjs/helper-api-error\": \"1.11.1\",\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.11.1\",\n        \"@webassemblyjs/ieee754\": \"1.11.1\",\n        \"@webassemblyjs/leb128\": \"1.11.1\",\n        \"@webassemblyjs/utf8\": \"1.11.1\"\n      }\n    },\n    \"@webassemblyjs/wast-printer\": {\n      \"version\": \"1.11.1\",\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wast-printer/-/wast-printer-1.11.1.tgz\",\n      \"integrity\": \"sha512-IQboUWM4eKzWW+N/jij2sRatKMh99QEelo3Eb2q0qXkvPRISAj8Qxtmw5itwqK+TTkBuUIE45AxYPToqPtL5gg==\",\n      \"requires\": {\n        \"@webassemblyjs/ast\": \"1.11.1\",\n        \"@xtuc/long\": \"4.2.2\"\n      }\n    },\n    \"@webpack-cli/configtest\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/@webpack-cli/configtest/-/configtest-1.1.0.tgz\",\n      \"integrity\": \"sha512-ttOkEkoalEHa7RaFYpM0ErK1xc4twg3Am9hfHhL7MVqlHebnkYd2wuI/ZqTDj0cVzZho6PdinY0phFZV3O0Mzg==\"\n    },\n    \"@webpack-cli/info\": {\n      \"version\": \"1.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/@webpack-cli/info/-/info-1.4.0.tgz\",\n      \"integrity\": \"sha512-F6b+Man0rwE4n0409FyAJHStYA5OIZERxmnUfLVwv0mc0V1wLad3V7jqRlMkgKBeAq07jUvglacNaa6g9lOpuw==\",\n      \"requires\": {\n        \"envinfo\": \"^7.7.3\"\n      }\n    },\n    \"@webpack-cli/serve\": {\n      \"version\": \"1.6.0\",\n      \"resolved\": \"https://registry.npmjs.org/@webpack-cli/serve/-/serve-1.6.0.tgz\",\n      \"integrity\": \"sha512-ZkVeqEmRpBV2GHvjjUZqEai2PpUbuq8Bqd//vEYsp63J8WyexI8ppCqVS3Zs0QADf6aWuPdU+0XsPI647PVlQA==\"\n    },\n    \"@xtuc/ieee754\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/@xtuc/ieee754/-/ieee754-1.2.0.tgz\",\n      \"integrity\": \"sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==\"\n    },\n    \"@xtuc/long\": {\n      \"version\": \"4.2.2\",\n      \"resolved\": \"https://registry.npmjs.org/@xtuc/long/-/long-4.2.2.tgz\",\n      \"integrity\": \"sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==\"\n    },\n    \"acorn\": {\n      \"version\": \"8.7.0\",\n      \"resolved\": \"https://registry.npmjs.org/acorn/-/acorn-8.7.0.tgz\",\n      \"integrity\": \"sha512-V/LGr1APy+PXIwKebEWrkZPwoeoF+w1jiOBUmuxuiUIaOHtob8Qc9BTrYo7VuI5fR8tqsy+buA2WFooR5olqvQ==\"\n    },\n    \"acorn-import-assertions\": {\n      \"version\": \"1.8.0\",\n      \"resolved\": \"https://registry.npmjs.org/acorn-import-assertions/-/acorn-import-assertions-1.8.0.tgz\",\n      \"integrity\": \"sha512-m7VZ3jwz4eK6A4Vtt8Ew1/mNbP24u0FhdyfA7fSvnJR6LMdfOYnmuIrrJAgrYfYJ10F/otaHTtrtrtmHdMNzEw==\"\n    },\n    \"ajv\": {\n      \"version\": \"6.12.6\",\n      \"resolved\": \"https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz\",\n      \"integrity\": \"sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==\",\n      \"requires\": {\n        \"fast-deep-equal\": \"^3.1.1\",\n        \"fast-json-stable-stringify\": \"^2.0.0\",\n        \"json-schema-traverse\": \"^0.4.1\",\n        \"uri-js\": \"^4.2.2\"\n      }\n    },\n    \"ajv-keywords\": {\n      \"version\": \"3.5.2\",\n      \"resolved\": \"https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-3.5.2.tgz\",\n      \"integrity\": \"sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==\"\n    },\n    \"array-union\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz\",\n      \"integrity\": \"sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==\"\n    },\n    \"balanced-match\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz\",\n      \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\"\n    },\n    \"brace-expansion\": {\n      \"version\": \"1.1.11\",\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\n      \"requires\": {\n        \"balanced-match\": \"^1.0.0\",\n        \"concat-map\": \"0.0.1\"\n      }\n    },\n    \"braces\": {\n      \"version\": \"3.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/braces/-/braces-3.0.2.tgz\",\n      \"integrity\": \"sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==\",\n      \"requires\": {\n        \"fill-range\": \"^7.0.1\"\n      }\n    },\n    \"browserslist\": {\n      \"version\": \"4.19.1\",\n      \"resolved\": \"https://registry.npmjs.org/browserslist/-/browserslist-4.19.1.tgz\",\n      \"integrity\": \"sha512-u2tbbG5PdKRTUoctO3NBD8FQ5HdPh1ZXPHzp1rwaa5jTc+RV9/+RlWiAIKmjRPQF+xbGM9Kklj5bZQFa2s/38A==\",\n      \"requires\": {\n        \"caniuse-lite\": \"^1.0.30001286\",\n        \"electron-to-chromium\": \"^1.4.17\",\n        \"escalade\": \"^3.1.1\",\n        \"node-releases\": \"^2.0.1\",\n        \"picocolors\": \"^1.0.0\"\n      }\n    },\n    \"buffer-from\": {\n      \"version\": \"1.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz\",\n      \"integrity\": \"sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==\"\n    },\n    \"caniuse-lite\": {\n      \"version\": \"1.0.30001299\",\n      \"resolved\": \"https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001299.tgz\",\n      \"integrity\": \"sha512-iujN4+x7QzqA2NCSrS5VUy+4gLmRd4xv6vbBBsmfVqTx8bLAD8097euLqQgKxSVLvxjSDcvF1T/i9ocgnUFexw==\"\n    },\n    \"chrome-trace-event\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/chrome-trace-event/-/chrome-trace-event-1.0.3.tgz\",\n      \"integrity\": \"sha512-p3KULyQg4S7NIHixdwbGX+nFHkoBiA4YQmyWtjb8XngSKV124nJmRysgAeujbUVb15vh+RvFUfCPqU7rXk+hZg==\"\n    },\n    \"clone-deep\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/clone-deep/-/clone-deep-4.0.1.tgz\",\n      \"integrity\": \"sha512-neHB9xuzh/wk0dIHweyAXv2aPGZIVk3pLMe+/RNzINf17fe0OG96QroktYAUm7SM1PBnzTabaLboqqxDyMU+SQ==\",\n      \"requires\": {\n        \"is-plain-object\": \"^2.0.4\",\n        \"kind-of\": \"^6.0.2\",\n        \"shallow-clone\": \"^3.0.0\"\n      }\n    },\n    \"colorette\": {\n      \"version\": \"2.0.16\",\n      \"resolved\": \"https://registry.npmjs.org/colorette/-/colorette-2.0.16.tgz\",\n      \"integrity\": \"sha512-hUewv7oMjCp+wkBv5Rm0v87eJhq4woh5rSR+42YSQJKecCqgIqNkZ6lAlQms/BwHPJA5NKMRlpxPRv0n8HQW6g==\"\n    },\n    \"commander\": {\n      \"version\": \"2.20.3\",\n      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-2.20.3.tgz\",\n      \"integrity\": \"sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==\"\n    },\n    \"concat-map\": {\n      \"version\": \"0.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\",\n      \"integrity\": \"sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=\"\n    },\n    \"cross-spawn\": {\n      \"version\": \"7.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz\",\n      \"integrity\": \"sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==\",\n      \"requires\": {\n        \"path-key\": \"^3.1.0\",\n        \"shebang-command\": \"^2.0.0\",\n        \"which\": \"^2.0.1\"\n      }\n    },\n    \"dir-glob\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz\",\n      \"integrity\": \"sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==\",\n      \"requires\": {\n        \"path-type\": \"^4.0.0\"\n      }\n    },\n    \"electron-to-chromium\": {\n      \"version\": \"1.4.43\",\n      \"resolved\": \"https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.43.tgz\",\n      \"integrity\": \"sha512-PO3kEfcxPrti/4STbXvCkNIF4fgWvCKl2508e6UI7KomCDffpIfeBZLXsh5DK/XGsjUw3kwq6WEsi0MJTlGAdg==\"\n    },\n    \"enhanced-resolve\": {\n      \"version\": \"5.8.3\",\n      \"resolved\": \"https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.8.3.tgz\",\n      \"integrity\": \"sha512-EGAbGvH7j7Xt2nc0E7D99La1OiEs8LnyimkRgwExpUMScN6O+3x9tIWs7PLQZVNx4YD+00skHXPXi1yQHpAmZA==\",\n      \"requires\": {\n        \"graceful-fs\": \"^4.2.4\",\n        \"tapable\": \"^2.2.0\"\n      }\n    },\n    \"envinfo\": {\n      \"version\": \"7.8.1\",\n      \"resolved\": \"https://registry.npmjs.org/envinfo/-/envinfo-7.8.1.tgz\",\n      \"integrity\": \"sha512-/o+BXHmB7ocbHEAs6F2EnG0ogybVVUdkRunTT2glZU9XAaGmhqskrvKwqXuDfNjEO0LZKWdejEEpnq8aM0tOaw==\"\n    },\n    \"es-module-lexer\": {\n      \"version\": \"0.9.3\",\n      \"resolved\": \"https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-0.9.3.tgz\",\n      \"integrity\": \"sha512-1HQ2M2sPtxwnvOvT1ZClHyQDiggdNjURWpY2we6aMKCQiUVxTmVs2UYPLIrD84sS+kMdUwfBSylbJPwNnBrnHQ==\"\n    },\n    \"escalade\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz\",\n      \"integrity\": \"sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==\"\n    },\n    \"eslint-scope\": {\n      \"version\": \"5.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz\",\n      \"integrity\": \"sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==\",\n      \"requires\": {\n        \"esrecurse\": \"^4.3.0\",\n        \"estraverse\": \"^4.1.1\"\n      }\n    },\n    \"esrecurse\": {\n      \"version\": \"4.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz\",\n      \"integrity\": \"sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==\",\n      \"requires\": {\n        \"estraverse\": \"^5.2.0\"\n      },\n      \"dependencies\": {\n        \"estraverse\": {\n          \"version\": \"5.3.0\",\n          \"resolved\": \"https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz\",\n          \"integrity\": \"sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==\"\n        }\n      }\n    },\n    \"estraverse\": {\n      \"version\": \"4.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz\",\n      \"integrity\": \"sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==\"\n    },\n    \"events\": {\n      \"version\": \"3.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/events/-/events-3.3.0.tgz\",\n      \"integrity\": \"sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==\"\n    },\n    \"execa\": {\n      \"version\": \"5.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/execa/-/execa-5.1.1.tgz\",\n      \"integrity\": \"sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==\",\n      \"requires\": {\n        \"cross-spawn\": \"^7.0.3\",\n        \"get-stream\": \"^6.0.0\",\n        \"human-signals\": \"^2.1.0\",\n        \"is-stream\": \"^2.0.0\",\n        \"merge-stream\": \"^2.0.0\",\n        \"npm-run-path\": \"^4.0.1\",\n        \"onetime\": \"^5.1.2\",\n        \"signal-exit\": \"^3.0.3\",\n        \"strip-final-newline\": \"^2.0.0\"\n      }\n    },\n    \"fast-deep-equal\": {\n      \"version\": \"3.1.3\",\n      \"resolved\": \"https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz\",\n      \"integrity\": \"sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==\"\n    },\n    \"fast-glob\": {\n      \"version\": \"3.2.11\",\n      \"resolved\": \"https://registry.npmjs.org/fast-glob/-/fast-glob-3.2.11.tgz\",\n      \"integrity\": \"sha512-xrO3+1bxSo3ZVHAnqzyuewYT6aMFHRAd4Kcs92MAonjwQZLsK9d0SF1IyQ3k5PoirxTW0Oe/RqFgMQ6TcNE5Ew==\",\n      \"requires\": {\n        \"@nodelib/fs.stat\": \"^2.0.2\",\n        \"@nodelib/fs.walk\": \"^1.2.3\",\n        \"glob-parent\": \"^5.1.2\",\n        \"merge2\": \"^1.3.0\",\n        \"micromatch\": \"^4.0.4\"\n      }\n    },\n    \"fast-json-stable-stringify\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz\",\n      \"integrity\": \"sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==\"\n    },\n    \"fastest-levenshtein\": {\n      \"version\": \"1.0.12\",\n      \"resolved\": \"https://registry.npmjs.org/fastest-levenshtein/-/fastest-levenshtein-1.0.12.tgz\",\n      \"integrity\": \"sha512-On2N+BpYJ15xIC974QNVuYGMOlEVt4s0EOI3wwMqOmK1fdDY+FN/zltPV8vosq4ad4c/gJ1KHScUn/6AWIgiow==\"\n    },\n    \"fastq\": {\n      \"version\": \"1.13.0\",\n      \"resolved\": \"https://registry.npmjs.org/fastq/-/fastq-1.13.0.tgz\",\n      \"integrity\": \"sha512-YpkpUnK8od0o1hmeSc7UUs/eB/vIPWJYjKck2QKIzAf71Vm1AAQ3EbuZB3g2JIy+pg+ERD0vqI79KyZiB2e2Nw==\",\n      \"requires\": {\n        \"reusify\": \"^1.0.4\"\n      }\n    },\n    \"fill-range\": {\n      \"version\": \"7.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz\",\n      \"integrity\": \"sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==\",\n      \"requires\": {\n        \"to-regex-range\": \"^5.0.1\"\n      }\n    },\n    \"find-up\": {\n      \"version\": \"4.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz\",\n      \"integrity\": \"sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==\",\n      \"requires\": {\n        \"locate-path\": \"^5.0.0\",\n        \"path-exists\": \"^4.0.0\"\n      }\n    },\n    \"fs.realpath\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz\",\n      \"integrity\": \"sha1-FQStJSMVjKpA20onh8sBQRmU6k8=\"\n    },\n    \"function-bind\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz\",\n      \"integrity\": \"sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==\"\n    },\n    \"get-stream\": {\n      \"version\": \"6.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz\",\n      \"integrity\": \"sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==\"\n    },\n    \"glob\": {\n      \"version\": \"7.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.2.0.tgz\",\n      \"integrity\": \"sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q==\",\n      \"requires\": {\n        \"fs.realpath\": \"^1.0.0\",\n        \"inflight\": \"^1.0.4\",\n        \"inherits\": \"2\",\n        \"minimatch\": \"^3.0.4\",\n        \"once\": \"^1.3.0\",\n        \"path-is-absolute\": \"^1.0.0\"\n      }\n    },\n    \"glob-parent\": {\n      \"version\": \"5.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz\",\n      \"integrity\": \"sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==\",\n      \"requires\": {\n        \"is-glob\": \"^4.0.1\"\n      }\n    },\n    \"glob-to-regexp\": {\n      \"version\": \"0.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/glob-to-regexp/-/glob-to-regexp-0.4.1.tgz\",\n      \"integrity\": \"sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==\"\n    },\n    \"globby\": {\n      \"version\": \"10.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/globby/-/globby-10.0.2.tgz\",\n      \"integrity\": \"sha512-7dUi7RvCoT/xast/o/dLN53oqND4yk0nsHkhRgn9w65C4PofCLOoJ39iSOg+qVDdWQPIEj+eszMHQ+aLVwwQSg==\",\n      \"requires\": {\n        \"@types/glob\": \"^7.1.1\",\n        \"array-union\": \"^2.1.0\",\n        \"dir-glob\": \"^3.0.1\",\n        \"fast-glob\": \"^3.0.3\",\n        \"glob\": \"^7.1.3\",\n        \"ignore\": \"^5.1.1\",\n        \"merge2\": \"^1.2.3\",\n        \"slash\": \"^3.0.0\"\n      }\n    },\n    \"graceful-fs\": {\n      \"version\": \"4.2.9\",\n      \"resolved\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.9.tgz\",\n      \"integrity\": \"sha512-NtNxqUcXgpW2iMrfqSfR73Glt39K+BLwWsPs94yR63v45T0Wbej7eRmL5cWfwEgqXnmjQp3zaJTshdRW/qC2ZQ==\"\n    },\n    \"has\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/has/-/has-1.0.3.tgz\",\n      \"integrity\": \"sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==\",\n      \"requires\": {\n        \"function-bind\": \"^1.1.1\"\n      }\n    },\n    \"has-flag\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz\",\n      \"integrity\": \"sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==\"\n    },\n    \"human-signals\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz\",\n      \"integrity\": \"sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==\"\n    },\n    \"ignore\": {\n      \"version\": \"5.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/ignore/-/ignore-5.2.0.tgz\",\n      \"integrity\": \"sha512-CmxgYGiEPCLhfLnpPp1MoRmifwEIOgjcHXxOBjv7mY96c+eWScsOP9c112ZyLdWHi0FxHjI+4uVhKYp/gcdRmQ==\"\n    },\n    \"import-local\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/import-local/-/import-local-3.1.0.tgz\",\n      \"integrity\": \"sha512-ASB07uLtnDs1o6EHjKpX34BKYDSqnFerfTOJL2HvMqF70LnxpjkzDB8J44oT9pu4AMPkQwf8jl6szgvNd2tRIg==\",\n      \"requires\": {\n        \"pkg-dir\": \"^4.2.0\",\n        \"resolve-cwd\": \"^3.0.0\"\n      }\n    },\n    \"inflight\": {\n      \"version\": \"1.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz\",\n      \"integrity\": \"sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=\",\n      \"requires\": {\n        \"once\": \"^1.3.0\",\n        \"wrappy\": \"1\"\n      }\n    },\n    \"inherits\": {\n      \"version\": \"2.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz\",\n      \"integrity\": \"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\"\n    },\n    \"interpret\": {\n      \"version\": \"2.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/interpret/-/interpret-2.2.0.tgz\",\n      \"integrity\": \"sha512-Ju0Bz/cEia55xDwUWEa8+olFpCiQoypjnQySseKtmjNrnps3P+xfpUmGr90T7yjlVJmOtybRvPXhKMbHr+fWnw==\"\n    },\n    \"is-core-module\": {\n      \"version\": \"2.8.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-core-module/-/is-core-module-2.8.1.tgz\",\n      \"integrity\": \"sha512-SdNCUs284hr40hFTFP6l0IfZ/RSrMXF3qgoRHd3/79unUTvrFO/JoXwkGm+5J/Oe3E/b5GsnG330uUNgRpu1PA==\",\n      \"requires\": {\n        \"has\": \"^1.0.3\"\n      }\n    },\n    \"is-extglob\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz\",\n      \"integrity\": \"sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=\"\n    },\n    \"is-glob\": {\n      \"version\": \"4.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz\",\n      \"integrity\": \"sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==\",\n      \"requires\": {\n        \"is-extglob\": \"^2.1.1\"\n      }\n    },\n    \"is-number\": {\n      \"version\": \"7.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz\",\n      \"integrity\": \"sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==\"\n    },\n    \"is-plain-object\": {\n      \"version\": \"2.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/is-plain-object/-/is-plain-object-2.0.4.tgz\",\n      \"integrity\": \"sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==\",\n      \"requires\": {\n        \"isobject\": \"^3.0.1\"\n      }\n    },\n    \"is-stream\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz\",\n      \"integrity\": \"sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==\"\n    },\n    \"isexe\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz\",\n      \"integrity\": \"sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=\"\n    },\n    \"isobject\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz\",\n      \"integrity\": \"sha1-TkMekrEalzFjaqH5yNHMvP2reN8=\"\n    },\n    \"jest-worker\": {\n      \"version\": \"27.4.6\",\n      \"resolved\": \"https://registry.npmjs.org/jest-worker/-/jest-worker-27.4.6.tgz\",\n      \"integrity\": \"sha512-gHWJF/6Xi5CTG5QCvROr6GcmpIqNYpDJyc8A1h/DyXqH1tD6SnRCM0d3U5msV31D2LB/U+E0M+W4oyvKV44oNw==\",\n      \"requires\": {\n        \"@types/node\": \"*\",\n        \"merge-stream\": \"^2.0.0\",\n        \"supports-color\": \"^8.0.0\"\n      }\n    },\n    \"jgrowl\": {\n      \"version\": \"1.4.8\",\n      \"resolved\": \"https://registry.npmjs.org/jgrowl/-/jgrowl-1.4.8.tgz\",\n      \"integrity\": \"sha512-JFi609DhWhD4wbnt1/NvYqt702SncgBk2SFssUi6GEUfnxM5TQ9YAKHP/kODwch7Q6QVhOWYvk1QCxLtujwRog==\"\n    },\n    \"jquery\": {\n      \"version\": \"3.6.0\",\n      \"resolved\": \"https://registry.npmjs.org/jquery/-/jquery-3.6.0.tgz\",\n      \"integrity\": \"sha512-JVzAR/AjBvVt2BmYhxRCSYysDsPcssdmTFnzyLEts9qNwmjmu4JTAMYubEfwVOSwpQ1I1sKKFcxhZCI2buerfw==\"\n    },\n    \"json-parse-better-errors\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/json-parse-better-errors/-/json-parse-better-errors-1.0.2.tgz\",\n      \"integrity\": \"sha512-mrqyZKfX5EhL7hvqcV6WG1yYjnjeuYDzDhhcAAUrq8Po85NBQBJP+ZDUT75qZQ98IkUoBqdkExkukOU7Ts2wrw==\"\n    },\n    \"json-schema-traverse\": {\n      \"version\": \"0.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz\",\n      \"integrity\": \"sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==\"\n    },\n    \"kind-of\": {\n      \"version\": \"6.0.3\",\n      \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz\",\n      \"integrity\": \"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\"\n    },\n    \"loader-runner\": {\n      \"version\": \"4.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/loader-runner/-/loader-runner-4.2.0.tgz\",\n      \"integrity\": \"sha512-92+huvxMvYlMzMt0iIOukcwYBFpkYJdpl2xsZ7LrlayO7E8SOv+JJUEK17B/dJIHAOLMfh2dZZ/Y18WgmGtYNw==\"\n    },\n    \"locate-path\": {\n      \"version\": \"5.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz\",\n      \"integrity\": \"sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==\",\n      \"requires\": {\n        \"p-locate\": \"^4.1.0\"\n      }\n    },\n    \"merge-stream\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz\",\n      \"integrity\": \"sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==\"\n    },\n    \"merge2\": {\n      \"version\": \"1.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz\",\n      \"integrity\": \"sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==\"\n    },\n    \"micromatch\": {\n      \"version\": \"4.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/micromatch/-/micromatch-4.0.4.tgz\",\n      \"integrity\": \"sha512-pRmzw/XUcwXGpD9aI9q/0XOwLNygjETJ8y0ao0wdqprrzDa4YnxLcz7fQRZr8voh8V10kGhABbNcHVk5wHgWwg==\",\n      \"requires\": {\n        \"braces\": \"^3.0.1\",\n        \"picomatch\": \"^2.2.3\"\n      }\n    },\n    \"mime-db\": {\n      \"version\": \"1.51.0\",\n      \"resolved\": \"https://registry.npmjs.org/mime-db/-/mime-db-1.51.0.tgz\",\n      \"integrity\": \"sha512-5y8A56jg7XVQx2mbv1lu49NR4dokRnhZYTtL+KGfaa27uq4pSTXkwQkFJl4pkRMyNFz/EtYDSkiiEHx3F7UN6g==\"\n    },\n    \"mime-types\": {\n      \"version\": \"2.1.34\",\n      \"resolved\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.1.34.tgz\",\n      \"integrity\": \"sha512-6cP692WwGIs9XXdOO4++N+7qjqv0rqxxVvJ3VHPh/Sc9mVZcQP+ZGhkKiTvWMQRr2tbHkJP/Yn7Y0npb3ZBs4A==\",\n      \"requires\": {\n        \"mime-db\": \"1.51.0\"\n      }\n    },\n    \"mimic-fn\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz\",\n      \"integrity\": \"sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==\"\n    },\n    \"minimatch\": {\n      \"version\": \"3.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",\n      \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",\n      \"requires\": {\n        \"brace-expansion\": \"^1.1.7\"\n      }\n    },\n    \"minimist\": {\n      \"version\": \"1.2.6\",\n      \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.6.tgz\",\n      \"integrity\": \"sha512-Jsjnk4bw3YJqYzbdyBiNsPWHPfO++UGG749Cxs6peCu5Xg4nrena6OVxOYxrQTqww0Jmwt+Ref8rggumkTLz9Q==\",\n      \"dev\": true\n    },\n    \"neo-async\": {\n      \"version\": \"2.6.2\",\n      \"resolved\": \"https://registry.npmjs.org/neo-async/-/neo-async-2.6.2.tgz\",\n      \"integrity\": \"sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==\"\n    },\n    \"node-releases\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/node-releases/-/node-releases-2.0.1.tgz\",\n      \"integrity\": \"sha512-CqyzN6z7Q6aMeF/ktcMVTzhAHCEpf8SOarwpzpf8pNBY2k5/oM34UHldUwp8VKI7uxct2HxSRdJjBaZeESzcxA==\"\n    },\n    \"npm-run-path\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz\",\n      \"integrity\": \"sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==\",\n      \"requires\": {\n        \"path-key\": \"^3.0.0\"\n      }\n    },\n    \"once\": {\n      \"version\": \"1.4.0\",\n      \"resolved\": \"https://registry.npmjs.org/once/-/once-1.4.0.tgz\",\n      \"integrity\": \"sha1-WDsap3WWHUsROsF9nFC6753Xa9E=\",\n      \"requires\": {\n        \"wrappy\": \"1\"\n      }\n    },\n    \"onetime\": {\n      \"version\": \"5.1.2\",\n      \"resolved\": \"https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz\",\n      \"integrity\": \"sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==\",\n      \"requires\": {\n        \"mimic-fn\": \"^2.1.0\"\n      }\n    },\n    \"p-limit\": {\n      \"version\": \"2.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz\",\n      \"integrity\": \"sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==\",\n      \"requires\": {\n        \"p-try\": \"^2.0.0\"\n      }\n    },\n    \"p-locate\": {\n      \"version\": \"4.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz\",\n      \"integrity\": \"sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==\",\n      \"requires\": {\n        \"p-limit\": \"^2.2.0\"\n      }\n    },\n    \"p-try\": {\n      \"version\": \"2.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz\",\n      \"integrity\": \"sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==\"\n    },\n    \"path-exists\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz\",\n      \"integrity\": \"sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==\"\n    },\n    \"path-is-absolute\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",\n      \"integrity\": \"sha1-F0uSaHNVNP+8es5r9TpanhtcX18=\"\n    },\n    \"path-key\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz\",\n      \"integrity\": \"sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==\"\n    },\n    \"path-parse\": {\n      \"version\": \"1.0.7\",\n      \"resolved\": \"https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz\",\n      \"integrity\": \"sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==\"\n    },\n    \"path-type\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz\",\n      \"integrity\": \"sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==\"\n    },\n    \"picocolors\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz\",\n      \"integrity\": \"sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==\"\n    },\n    \"picomatch\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz\",\n      \"integrity\": \"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\"\n    },\n    \"pkg-dir\": {\n      \"version\": \"4.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz\",\n      \"integrity\": \"sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==\",\n      \"requires\": {\n        \"find-up\": \"^4.0.0\"\n      }\n    },\n    \"punycode\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz\",\n      \"integrity\": \"sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==\"\n    },\n    \"queue-microtask\": {\n      \"version\": \"1.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz\",\n      \"integrity\": \"sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==\"\n    },\n    \"randombytes\": {\n      \"version\": \"2.1.0\",\n      \"resolved\": \"https://registry.npmjs.org/randombytes/-/randombytes-2.1.0.tgz\",\n      \"integrity\": \"sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==\",\n      \"requires\": {\n        \"safe-buffer\": \"^5.1.0\"\n      }\n    },\n    \"rechoir\": {\n      \"version\": \"0.7.1\",\n      \"resolved\": \"https://registry.npmjs.org/rechoir/-/rechoir-0.7.1.tgz\",\n      \"integrity\": \"sha512-/njmZ8s1wVeR6pjTZ+0nCnv8SpZNRMT2D1RLOJQESlYFDBvwpTA4KWJpZ+sBJ4+vhjILRcK7JIFdGCdxEAAitg==\",\n      \"requires\": {\n        \"resolve\": \"^1.9.0\"\n      }\n    },\n    \"resolve\": {\n      \"version\": \"1.21.0\",\n      \"resolved\": \"https://registry.npmjs.org/resolve/-/resolve-1.21.0.tgz\",\n      \"integrity\": \"sha512-3wCbTpk5WJlyE4mSOtDLhqQmGFi0/TD9VPwmiolnk8U0wRgMEktqCXd3vy5buTO3tljvalNvKrjHEfrd2WpEKA==\",\n      \"requires\": {\n        \"is-core-module\": \"^2.8.0\",\n        \"path-parse\": \"^1.0.7\",\n        \"supports-preserve-symlinks-flag\": \"^1.0.0\"\n      }\n    },\n    \"resolve-cwd\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz\",\n      \"integrity\": \"sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==\",\n      \"requires\": {\n        \"resolve-from\": \"^5.0.0\"\n      }\n    },\n    \"resolve-from\": {\n      \"version\": \"5.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz\",\n      \"integrity\": \"sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==\"\n    },\n    \"reusify\": {\n      \"version\": \"1.0.4\",\n      \"resolved\": \"https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz\",\n      \"integrity\": \"sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==\"\n    },\n    \"run-parallel\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz\",\n      \"integrity\": \"sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==\",\n      \"requires\": {\n        \"queue-microtask\": \"^1.2.2\"\n      }\n    },\n    \"safe-buffer\": {\n      \"version\": \"5.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz\",\n      \"integrity\": \"sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==\"\n    },\n    \"schema-utils\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/schema-utils/-/schema-utils-3.1.1.tgz\",\n      \"integrity\": \"sha512-Y5PQxS4ITlC+EahLuXaY86TXfR7Dc5lw294alXOq86JAHCihAIZfqv8nNCWvaEJvaC51uN9hbLGeV0cFBdH+Fw==\",\n      \"requires\": {\n        \"@types/json-schema\": \"^7.0.8\",\n        \"ajv\": \"^6.12.5\",\n        \"ajv-keywords\": \"^3.5.2\"\n      }\n    },\n    \"serialize-javascript\": {\n      \"version\": \"6.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-6.0.0.tgz\",\n      \"integrity\": \"sha512-Qr3TosvguFt8ePWqsvRfrKyQXIiW+nGbYpy8XK24NQHE83caxWt+mIymTT19DGFbNWNLfEwsrkSmN64lVWB9ag==\",\n      \"requires\": {\n        \"randombytes\": \"^2.1.0\"\n      }\n    },\n    \"shallow-clone\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/shallow-clone/-/shallow-clone-3.0.1.tgz\",\n      \"integrity\": \"sha512-/6KqX+GVUdqPuPPd2LxDDxzX6CAbjJehAAOKlNpqqUpAqPM6HeL8f+o3a+JsyGjn2lv0WY8UsTgUJjU9Ok55NA==\",\n      \"requires\": {\n        \"kind-of\": \"^6.0.2\"\n      }\n    },\n    \"shebang-command\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz\",\n      \"integrity\": \"sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==\",\n      \"requires\": {\n        \"shebang-regex\": \"^3.0.0\"\n      }\n    },\n    \"shebang-regex\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz\",\n      \"integrity\": \"sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==\"\n    },\n    \"shelljs\": {\n      \"version\": \"0.8.5\",\n      \"resolved\": \"https://registry.npmjs.org/shelljs/-/shelljs-0.8.5.tgz\",\n      \"integrity\": \"sha512-TiwcRcrkhHvbrZbnRcFYMLl30Dfov3HKqzp5tO5b4pt6G/SezKcYhmDg15zXVBswHmctSAQKznqNW2LO5tTDow==\",\n      \"dev\": true,\n      \"requires\": {\n        \"glob\": \"^7.0.0\",\n        \"interpret\": \"^1.0.0\",\n        \"rechoir\": \"^0.6.2\"\n      },\n      \"dependencies\": {\n        \"interpret\": {\n          \"version\": \"1.4.0\",\n          \"resolved\": \"https://registry.npmjs.org/interpret/-/interpret-1.4.0.tgz\",\n          \"integrity\": \"sha512-agE4QfB2Lkp9uICn7BAqoscw4SZP9kTE2hxiFI3jBPmXJfdqiahTbUuKGsMoN2GtqL9AxhYioAcVvgsb1HvRbA==\",\n          \"dev\": true\n        },\n        \"rechoir\": {\n          \"version\": \"0.6.2\",\n          \"resolved\": \"https://registry.npmjs.org/rechoir/-/rechoir-0.6.2.tgz\",\n          \"integrity\": \"sha1-hSBLVNuoLVdC4oyWdW70OvUOM4Q=\",\n          \"dev\": true,\n          \"requires\": {\n            \"resolve\": \"^1.1.6\"\n          }\n        }\n      }\n    },\n    \"shx\": {\n      \"version\": \"0.3.4\",\n      \"resolved\": \"https://registry.npmjs.org/shx/-/shx-0.3.4.tgz\",\n      \"integrity\": \"sha512-N6A9MLVqjxZYcVn8hLmtneQWIJtp8IKzMP4eMnx+nqkvXoqinUPCbUFLp2UcWTEIUONhlk0ewxr/jaVGlc+J+g==\",\n      \"dev\": true,\n      \"requires\": {\n        \"minimist\": \"^1.2.3\",\n        \"shelljs\": \"^0.8.5\"\n      }\n    },\n    \"signal-exit\": {\n      \"version\": \"3.0.6\",\n      \"resolved\": \"https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.6.tgz\",\n      \"integrity\": \"sha512-sDl4qMFpijcGw22U5w63KmD3cZJfBuFlVNbVMKje2keoKML7X2UzWbc4XrmEbDwg0NXJc3yv4/ox7b+JWb57kQ==\"\n    },\n    \"slash\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/slash/-/slash-3.0.0.tgz\",\n      \"integrity\": \"sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==\"\n    },\n    \"source-list-map\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/source-list-map/-/source-list-map-2.0.1.tgz\",\n      \"integrity\": \"sha512-qnQ7gVMxGNxsiL4lEuJwe/To8UnK7fAnmbGEEH8RpLouuKbeEm0lhbQVFIrNSuB+G7tVrAlVsZgETT5nljf+Iw==\"\n    },\n    \"source-map\": {\n      \"version\": \"0.6.1\",\n      \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\",\n      \"integrity\": \"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\"\n    },\n    \"source-map-support\": {\n      \"version\": \"0.5.21\",\n      \"resolved\": \"https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz\",\n      \"integrity\": \"sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==\",\n      \"requires\": {\n        \"buffer-from\": \"^1.0.0\",\n        \"source-map\": \"^0.6.0\"\n      }\n    },\n    \"strip-final-newline\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz\",\n      \"integrity\": \"sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==\"\n    },\n    \"supports-color\": {\n      \"version\": \"8.1.1\",\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz\",\n      \"integrity\": \"sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==\",\n      \"requires\": {\n        \"has-flag\": \"^4.0.0\"\n      }\n    },\n    \"supports-preserve-symlinks-flag\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz\",\n      \"integrity\": \"sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==\"\n    },\n    \"tapable\": {\n      \"version\": \"2.2.1\",\n      \"resolved\": \"https://registry.npmjs.org/tapable/-/tapable-2.2.1.tgz\",\n      \"integrity\": \"sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==\"\n    },\n    \"terser\": {\n      \"version\": \"5.14.2\",\n      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.14.2.tgz\",\n      \"integrity\": \"sha512-oL0rGeM/WFQCUd0y2QrWxYnq7tfSuKBiqTjRPWrRgB46WD/kiwHwF8T23z78H6Q6kGCuuHcPB+KULHRdxvVGQA==\",\n      \"requires\": {\n        \"@jridgewell/source-map\": \"^0.3.2\",\n        \"acorn\": \"^8.5.0\",\n        \"commander\": \"^2.20.0\",\n        \"source-map-support\": \"~0.5.20\"\n      }\n    },\n    \"terser-webpack-plugin\": {\n      \"version\": \"5.3.0\",\n      \"resolved\": \"https://registry.npmjs.org/terser-webpack-plugin/-/terser-webpack-plugin-5.3.0.tgz\",\n      \"integrity\": \"sha512-LPIisi3Ol4chwAaPP8toUJ3L4qCM1G0wao7L3qNv57Drezxj6+VEyySpPw4B1HSO2Eg/hDY/MNF5XihCAoqnsQ==\",\n      \"requires\": {\n        \"jest-worker\": \"^27.4.1\",\n        \"schema-utils\": \"^3.1.1\",\n        \"serialize-javascript\": \"^6.0.0\",\n        \"source-map\": \"^0.6.1\",\n        \"terser\": \"^5.7.2\"\n      }\n    },\n    \"to-regex-range\": {\n      \"version\": \"5.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz\",\n      \"integrity\": \"sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==\",\n      \"requires\": {\n        \"is-number\": \"^7.0.0\"\n      }\n    },\n    \"uri-js\": {\n      \"version\": \"4.4.1\",\n      \"resolved\": \"https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz\",\n      \"integrity\": \"sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==\",\n      \"requires\": {\n        \"punycode\": \"^2.1.0\"\n      }\n    },\n    \"watchpack\": {\n      \"version\": \"2.3.1\",\n      \"resolved\": \"https://registry.npmjs.org/watchpack/-/watchpack-2.3.1.tgz\",\n      \"integrity\": \"sha512-x0t0JuydIo8qCNctdDrn1OzH/qDzk2+rdCOC3YzumZ42fiMqmQ7T3xQurykYMhYfHaPHTp4ZxAx2NfUo1K6QaA==\",\n      \"requires\": {\n        \"glob-to-regexp\": \"^0.4.1\",\n        \"graceful-fs\": \"^4.1.2\"\n      }\n    },\n    \"webpack\": {\n      \"version\": \"5.66.0\",\n      \"resolved\": \"https://registry.npmjs.org/webpack/-/webpack-5.66.0.tgz\",\n      \"integrity\": \"sha512-NJNtGT7IKpGzdW7Iwpn/09OXz9inIkeIQ/ibY6B+MdV1x6+uReqz/5z1L89ezWnpPDWpXF0TY5PCYKQdWVn8Vg==\",\n      \"requires\": {\n        \"@types/eslint-scope\": \"^3.7.0\",\n        \"@types/estree\": \"^0.0.50\",\n        \"@webassemblyjs/ast\": \"1.11.1\",\n        \"@webassemblyjs/wasm-edit\": \"1.11.1\",\n        \"@webassemblyjs/wasm-parser\": \"1.11.1\",\n        \"acorn\": \"^8.4.1\",\n        \"acorn-import-assertions\": \"^1.7.6\",\n        \"browserslist\": \"^4.14.5\",\n        \"chrome-trace-event\": \"^1.0.2\",\n        \"enhanced-resolve\": \"^5.8.3\",\n        \"es-module-lexer\": \"^0.9.0\",\n        \"eslint-scope\": \"5.1.1\",\n        \"events\": \"^3.2.0\",\n        \"glob-to-regexp\": \"^0.4.1\",\n        \"graceful-fs\": \"^4.2.9\",\n        \"json-parse-better-errors\": \"^1.0.2\",\n        \"loader-runner\": \"^4.2.0\",\n        \"mime-types\": \"^2.1.27\",\n        \"neo-async\": \"^2.6.2\",\n        \"schema-utils\": \"^3.1.0\",\n        \"tapable\": \"^2.1.1\",\n        \"terser-webpack-plugin\": \"^5.1.3\",\n        \"watchpack\": \"^2.3.1\",\n        \"webpack-sources\": \"^3.2.2\"\n      }\n    },\n    \"webpack-cli\": {\n      \"version\": \"4.9.1\",\n      \"resolved\": \"https://registry.npmjs.org/webpack-cli/-/webpack-cli-4.9.1.tgz\",\n      \"integrity\": \"sha512-JYRFVuyFpzDxMDB+v/nanUdQYcZtqFPGzmlW4s+UkPMFhSpfRNmf1z4AwYcHJVdvEFAM7FFCQdNTpsBYhDLusQ==\",\n      \"requires\": {\n        \"@discoveryjs/json-ext\": \"^0.5.0\",\n        \"@webpack-cli/configtest\": \"^1.1.0\",\n        \"@webpack-cli/info\": \"^1.4.0\",\n        \"@webpack-cli/serve\": \"^1.6.0\",\n        \"colorette\": \"^2.0.14\",\n        \"commander\": \"^7.0.0\",\n        \"execa\": \"^5.0.0\",\n        \"fastest-levenshtein\": \"^1.0.12\",\n        \"import-local\": \"^3.0.2\",\n        \"interpret\": \"^2.2.0\",\n        \"rechoir\": \"^0.7.0\",\n        \"webpack-merge\": \"^5.7.3\"\n      },\n      \"dependencies\": {\n        \"commander\": {\n          \"version\": \"7.2.0\",\n          \"resolved\": \"https://registry.npmjs.org/commander/-/commander-7.2.0.tgz\",\n          \"integrity\": \"sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==\"\n        }\n      }\n    },\n    \"webpack-concat-files-plugin\": {\n      \"version\": \"0.5.2\",\n      \"resolved\": \"https://registry.npmjs.org/webpack-concat-files-plugin/-/webpack-concat-files-plugin-0.5.2.tgz\",\n      \"integrity\": \"sha512-bnsTzDTI5Ur1JaeLs6yeKlNdfRukJR9tgdZIIwy4c5Uyy0kJ0UhrOX42COG42vFZhwAZfo+tzU2/awhKoZw3Ug==\",\n      \"requires\": {\n        \"globby\": \"^10.0.1\",\n        \"schema-utils\": \"^3.0.0\",\n        \"webpack-sources\": \"^1.4.3\"\n      },\n      \"dependencies\": {\n        \"webpack-sources\": {\n          \"version\": \"1.4.3\",\n          \"resolved\": \"https://registry.npmjs.org/webpack-sources/-/webpack-sources-1.4.3.tgz\",\n          \"integrity\": \"sha512-lgTS3Xhv1lCOKo7SA5TjKXMjpSM4sBjNV5+q2bqesbSPs5FjGmU6jjtBSkX9b4qW87vDIsCIlUPOEhbZrMdjeQ==\",\n          \"requires\": {\n            \"source-list-map\": \"^2.0.0\",\n            \"source-map\": \"~0.6.1\"\n          }\n        }\n      }\n    },\n    \"webpack-merge\": {\n      \"version\": \"5.8.0\",\n      \"resolved\": \"https://registry.npmjs.org/webpack-merge/-/webpack-merge-5.8.0.tgz\",\n      \"integrity\": \"sha512-/SaI7xY0831XwP6kzuwhKWVKDP9t1QY1h65lAFLbZqMPIuYcD9QAW4u9STIbU9kaJbPBB/geU/gLr1wDjOhQ+Q==\",\n      \"requires\": {\n        \"clone-deep\": \"^4.0.1\",\n        \"wildcard\": \"^2.0.0\"\n      }\n    },\n    \"webpack-sources\": {\n      \"version\": \"3.2.3\",\n      \"resolved\": \"https://registry.npmjs.org/webpack-sources/-/webpack-sources-3.2.3.tgz\",\n      \"integrity\": \"sha512-/DyMEOrDgLKKIG0fmvtz+4dUX/3Ghozwgm6iPp8KRhvn+eQf9+Q7GWxVNMk3+uCPWfdXYC4ExGBckIXdFEfH1w==\"\n    },\n    \"which\": {\n      \"version\": \"2.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/which/-/which-2.0.2.tgz\",\n      \"integrity\": \"sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==\",\n      \"requires\": {\n        \"isexe\": \"^2.0.0\"\n      }\n    },\n    \"wildcard\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/wildcard/-/wildcard-2.0.0.tgz\",\n      \"integrity\": \"sha512-JcKqAHLPxcdb9KM49dufGXn2x3ssnfjbcaQdLlfZsL9rH9wgDQjUtDxbo8NE0F6SFvydeu1VhZe7hZuHsB2/pw==\"\n    },\n    \"wrappy\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz\",\n      \"integrity\": \"sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=\"\n    }\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.2041015625,
          "content": "{\n  \"name\": \"owa\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Open Web Analytics is an open source alternative to commercial web analytics tools such as Google Analytics. This software allows you to stay in control of the data you collect about the user of your websites or applications.\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack-cli --mode production && npm run copyTracker\",\n    \"start\": \"webpack-cli --mode development --watch\",\n    \"copyTracker\": \"shx cp modules/base/dist/owa.tracker.js modules/base/js/owa.tracker-combined-min.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/Open-Web-Analytics/Open-Web-Analytics.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"OWA Team <hello@openwebanalytics.com>\",\n  \"license\": \"GPL-2.0-only\",\n  \"bugs\": {\n    \"url\": \"https://github.com/Open-Web-Analytics/Open-Web-Analytics/issues\"\n  },\n  \"homepage\": \"https://github.com/Open-Web-Analytics/Open-Web-Analytics#readme\",\n  \"dependencies\": {\n    \"jgrowl\": \"^1.4.8\",\n    \"jquery\": \"^3.6.0\",\n    \"webpack\": \"^5.66.0\",\n    \"webpack-cli\": \"^4.9.1\",\n    \"webpack-concat-files-plugin\": \"^0.5.2\"\n  },\n  \"devDependencies\": {\n    \"shx\": \"^0.3.4\"\n  }\n}\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "queue.php",
          "type": "blob",
          "size": 1.5166015625,
          "content": "<?php\n\n//\n// Open Web Analytics - An Open Source Web Analytics Framework\n//\n// Copyright 2006 Peter Adams. All rights reserved.\n//\n// Licensed under GPL v2.0 http://www.gnu.org/copyleft/gpl.html\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// $Id$\n//\n\nignore_user_abort(true);\nset_time_limit(180);\n\ninclude_once('owa_env.php');\nrequire_once(OWA_BASE_DIR.'/owa.php');\n\n/**\n * Remote Event Queue Endpoint\n * \n * @author      Peter Adams <peter@openwebanalytics.com>\n * @copyright   Copyright &copy; 2006 Peter Adams <peter@openwebanalytics.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GPL v2.0\n * @category    owa\n * @package     owa\n * @version        $Revision$\n * @since        owa 1.3.0\n */\n\n$owa = new owa();\n\nif ( $owa->isEndpointEnabled( basename( __FILE__ ) ) ) {\n\n\n    $owa->setSetting('base', 'is_remote_event_queue', true);\n    $owa->e->debug('post: ' . print_r($_POST, true) );\n    $raw_event = owa_coreAPI::getRequestParam('event');\n\n    if ( $raw_event ) {\n\n        $dispatch = owa_coreAPI::getEventDispatch();\n        $event = $dispatch->makeEvent();\n        $event->loadFromArray($raw_event);\n\n        $owa->e->debug(print_r($event,true));\n        $dispatch->asyncNotify($event);\n    }\n\n} else {\n    // unload owa\n    $owa->restInPeace();\n}\n\n?>"
        },
        {
          "name": "webpack.config.js",
          "type": "blob",
          "size": 2.509765625,
          "content": "const path = require('path');\nconst dist_path = '/modules/base/dist';\nconst src_path = __dirname + '/modules/base/src';\nconst terser = require('terser');\nconst WebpackConcatPlugin = require('webpack-concat-files-plugin');\nconst TerserPlugin = require('terser-webpack-plugin');\n\nmodule.exports = {\n\n\tentry: {\n    \n\t    'owa.tracker.js': [\n\t\t    \n\t    \tpath.resolve(__dirname, src_path + '/tracker/tracker-dom.js')\n\t    ],\n\t    \n\t},\n  \n\toutput: {\n\t  \n\t  \tpath: __dirname + dist_path, // Output to dist directory\n\t  \tchunkFilename: '[name].js',\n\t    iife: false,\n\t    filename: \"[name]\"\n\t},\n  \n\toptimization: {\n    \n        minimize: true,\n        minimizer: [new TerserPlugin({\n\t      extractComments: false,\n\t    })],\n        \n\t    splitChunks: {\n\t      cacheGroups: {\n\t        vendor: {\n\t          test: /[\\\\/]node_modules[\\\\/]/,\n\t          name: 'owa.vendors',\n\t          chunks: 'all'\n\t        }\n\t      }\n\t    }\n    },\n    \n    plugins: [\n\t    new WebpackConcatPlugin({\n\t      \tbundles: [\n\t\t        {\n\t\t          \tdest: __dirname + dist_path + '/owa.reporting-combined-min.js',\n\t\t\t\t  \tsrc: [\n\t\t\t          \n\t\t\t          \tsrc_path + '/reporting/v1/includes/jquery/jquery-1.6.4.min.js',\n\t\t\t\t\t  \tsrc_path + '/reporting/v1/includes/jquery/jquery.sprintf.js',\n\t\t\t\t\t  \tsrc_path + '/reporting/v1/includes/jquery/jquery-ui-1.8.12.custom.min.js',\n\t\t\t\t\t  \tsrc_path + '/reporting/v1/includes/jquery/jquery.ui.selectmenu.js',\n\t\t\t\t\t  \tsrc_path + '/reporting/v1/includes/jquery/chosen.jquery.js',\n\t\t\t\t\t  \tsrc_path + '/reporting/v1/includes/jquery/jquery.sparkline.min.js',\n\t\t\t\t\t  \tsrc_path + '/reporting/v1/includes/jquery/jquery.jqGrid.min.js',\n\t\t\t\t\t  \tsrc_path + '/reporting/v1/includes/jquery/flot_v0.7/jquery.flot.min.js',\n\t\t\t\t\t  \tsrc_path + '/reporting/v1/includes/jquery/flot_v0.7/jquery.flot.resize.min.js',\n\t\t\t\t\t  \tsrc_path + '/reporting/v1/includes/jquery/flot_v0.7/jquery.flot.pie.min.js',\n\t\t\t\t\t  \tsrc_path + '/reporting/v1/includes/jquery/jQote2/jquery.jqote2.min.js',\n\t\t\t\t\t  \tsrc_path + '/reporting/v1/owa.js',\n\t\t\t\t\t  \tsrc_path + '/reporting/v1/owa.report.js',\n\t\t\t\t\t  \tsrc_path + '/reporting/v1/owa.resultSetExplorer.js',\n\t\t\t\t\t  \tsrc_path + '/reporting/v1/owa.sparkline.js',\n\t\t\t\t\t  \tsrc_path + '/reporting/v1/owa.areachart.js',\n\t\t\t\t\t  \tsrc_path + '/reporting/v1/owa.piechart.js',\n\t\t\t\t\t  \tsrc_path + '/reporting/v1/owa.kpibox.js',\n\t\t\t\t\t],\n\t\t\t\t\t\n\t\t\t\t\ttransforms: {\n\t\t            \tafter: async (code) => {\n\t\t\t\t\t\t\tconst minifiedCode = await terser.minify(code);\n\t\t\t\t\t\t\treturn minifiedCode.code;\n\t\t            \t},\n\t\t          \t},\n\t\t        },\n\t\t    ],\n\t    }),\n\t],\n        \n};"
        },
        {
          "name": "wp_plugin.php",
          "type": "blob",
          "size": 61.1044921875,
          "content": "<?php\n\n/*\nPlugin Name: Open Web Analytics\nPlugin URI: http://www.openwebanalytics.com\nDescription: This plugin enables Wordpress blog owners to use the Open Web Analytics Framework.\nAuthor: Peter Adams\nVersion: master\nAuthor URI: http://www.openwebanalytics.com\n*/\n\n//\n// THIS PLUGIN IS NOW DEPRECATED.\n// See: https://github.com/Open-Web-Analytics/owa-wordpress-plugin/wiki/Migrating-from-the-Old-Bundled-Plugin\n//\n\n\n\n// if this file is called directly, abort.\nif ( ! defined( 'WPINC' ) ) {\n\tdie;\n}\n\n// Define the plugin path constant\ndefine('OWA_WP_PATH', plugin_dir_path( __FILE__ ) );\n\n// Hook package creation\nadd_action('plugins_loaded', array( 'owa_wp_plugin', 'getInstance'), 10 );\n\n// Installation hook\n//register_activation_hook(__FILE__, array('owa_wp_plugin', 'install') );\n\n\n/////////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * OWA WordPress Plugin Class\n *\n */\nclass owa_wp_plugin extends owa_wp_module {\n\t\n\t// cmd array\n\tvar $cmds = array();\n\t// plugin options\n\tvar $options = array(\n\t\t\n\t\t'track_feed_links'\t\t\t=> true,\n\t\t'feed_tracking_medium' \t\t=> 'feed',\n\t\t'feed_subscription_param' \t=> 'owa_sid'\n\t);\n\t\n\t/**\n\t * Constructor\n\t *\n\t */\t\n\tfunction __construct() {\n\t\t\n\t\t// needed???\n\t\tob_start();\n\t\t\n\t\t// bail if this isn't a request type that OWA needs ot be loaded on.\n\t\tif ( ! $this->isProperWordPressRequest() ) {\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\t\t\n\t\t// load parent constructor\n\t\t$params = array();\n\t\t$params['module_name'] = 'owa-wordpress';\n\t\tparent::__construct( $params );\n\t}\n\t\n\t/**\n\t * Singelton\n\t */\n\tstatic function getInstance() {\n\t\t\n\t\tstatic $o;\n\t\n\t\tif ( ! isset( $o ) ) {\n\t\t\t\n\t\t\t$o = new owa_wp_plugin();\n\t\t}\n\t\t\n\t\treturn $o;\n\t}\n\t\n\t\n\tfunction _init() {\n\t\t\n\t\tadd_action('admin_notices', array($this, 'migrateNag') );\n\t\t\n\t\t// setup plugin options\n\t\t$this->initOptions();\n\n\t\t// register WordPress hooks and filters\n\t\t\n\t\tif ( $this->getOption('enable') ) {\n\t\t\t\n\t\t\t// insert javascript tracking tag\t\n\t\t\tadd_action('wp_head', array( $this,'insertTrackingTag' ), 100 );\n\t\t\t\n\t\t\tif (  $this->getOption('trackAdminPages') ) {\n\t\t\t\t\n\t\t\t\tadd_action('admin_head', array( $this,'insertTrackingTag' ), 100 );\t\n\t\t\t\t\t\t\t\n\t\t\t}\n\n\t\t\t\n\t\t\t// track feeds\n\t\t\tif ( $this->getOption('trackFeeds') ) {\n\t\t\t\t// add tracking to feed entry permalinks\n\t\t\t\tadd_filter('the_permalink_rss', array( $this, 'decorateFeedEntryPermalink' ) );\n\t\t\t\n\t\t\t\t// add tracking to feed subscription links\n\t\t\t\tadd_filter('bloginfo_url', array($this, 'decorateFeedSubscriptionLink' ) );\n\t\t\t}\n\t\t\t\n\t\t\t// Track admin actions if OWA is available as a library\n\t\t\tif( $this->isOwaAvailable() ) {\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t// @todo find a way for these methods to POST these to the OWA instance instead of via OWA's PHP Tracker\n\t\t\t\t$this->defineActionHooks();\n\t\t\t\t\n\t\t\t\t// Create a new tracked site in OWA.\n\t\t\t\t// @todo move this to REST API call when it's ready.\n\t\t\t\tadd_action('wpmu_new_blog', array($this, 'createTrackedSiteForNewBlog'), 10, 6);\n\t\t\t\t\n\t\t\t\t$owa = self::getOwaInstance();\n\t\t\t\n\t\t\t\tif ( owa_coreAPI::isUpdateRequired() ) {\n\t\t\t\t\t\n\t\t\t\t\tadd_action('admin_notices', array($this, 'updateNag') );\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\n\t}\n\t\t\n\tfunction updateNag() {\n\t\t\n\t\techo '<BR><div class=\"notice notice-error \"><p>'. '<b>Open Web Analytics</b> updates are required before tracking can continue. <a href=\"/wp-admin/admin.php?page=owa-analytics\">Please update now!</a></p></div>';\n\t}\n\t\n\tfunction migrateNag() {\n\t\t\n\t\t$url = network_admin_url( 'plugin-install.php?s=padams&tab=search&type=author' );\n    \n\t\t$template = '<BR><div class=\"notice notice-error \"><p><b>This version of the Open Web Analytics plugin is now deprecated!</b> Please install the <a href=\"%s\">new official OWA Integration Plugin</a> from the WordPress repository before upgrading OWA any further. <a href=\"https://github.com/Open-Web-Analytics/owa-wordpress-plugin/wiki/Migrating-from-the-Old-Bundled-Plugin\">Learn more here!</a></p></div>';\n\t\t\n\t\techo sprintf($template, $url);\n\t\t\n\t}\n\n\t\n\tprivate function isProperWordPressRequest() {\n\t\t\n\t\t// cron requests\n\t\tif ( array_key_exists('doing_wp_cron', $_GET ) ) {\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif ( defined( 'REST_REQUEST' ) && REST_REQUEST ) {\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif ( defined( 'JSON_REQUEST' ) && JSON_REQUEST ) {\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t\n\t\treturn true;\n\t}\n\t\n\tprivate function initOptions() {\n\t\t\n\t\t\n\t\t// needs to be first as default Options are set here and used down stream in\n\t\t// all other hooks and classes.\n\t\t$this->processAdminConfig();\n\t\t\n\t\t\n\t\t// get user defaults from option page\n\t\t$user_defaults = array_combine( array_keys( $this->registerOptions() ), array_column( $this->registerOptions() , 'default_value') );\n\t\t\n\t\tif ( $user_defaults ) {\n\t\t\t\n\t\t\t$this->options = array_merge($this->options, $user_defaults);\n\t\t}\n\t\t\n\t\t// fetch plugin options from DB and combine them with defaults.\n\t\t$options = get_option( 'owa_wp' );\n\t\t//echo 'options from DB: '. print_r( $options, true );\n\t\tif ( $options ) {\n\t\t\t\n\t\t\t$this->options = array_merge($this->options, $options);\n\t\t}\n\t\t\n\t\t// needed for backwards compatability of old style embedded installs.\n\t\t// must go after user default merge\n\t\t$this->setEmbeddedOptions();\n\t}\n\t\n\t/**\n\t * Get an option value\n\t */\n\tfunction getOption( $key ) {\n\t\t\n\t\t$options = array();\n\t\t$options = $this->options;\n\t\tif ( array_key_exists( $key, $options ) ) {\n\t\t\t\n\t\t\treturn $this->options[ $key ];\n\t\t}\n\t}\n\t\n\t/**\n\t * Set an option value\n\t */\n\tfunction setOption( $key, $value ) {\n\t\t\n\t\t$this->options[ $key ] = $value;\n\t}\n\t\t\n\t/**\n\t * Hooks for tracking WordPress Admin actions\n\t */\n\tfunction defineActionHooks() {\n\t\t\n\t\t\n\t\t// These hooks rely on accessing OWA server-side\n\t\t// as a PHP object. \t\n\t\t\n\t\tif ( $this->getOption( 'trackAdminActions' ) ) {\n\t\t\t\n\t\t\t// New Comment\n\t\t\tadd_action( 'comment_post', array( $this, 'trackCommentAction' ), 10, 2);\n\t\t\t// Comment Edit\n\t\t\tadd_action( 'transition_comment_status', array( $this, 'trackCommentEditAction' ), 10, 3);\n\t\t\t// User Registration\n\t\t\tadd_action( 'user_register', array( $this, 'trackUserRegistrationAction' ) );\n\t\t\t// user login\n\t\t\tadd_action( 'wp_login', array( $this, 'trackUserLoginAction' ) );\n\t\t\t// User Profile Update\n\t\t\tadd_action( 'profile_update', array( $this, 'trackUserProfileUpdateAction' ), 10, 2);\n\t\t\t// Password Reset\n\t\t\tadd_action( 'password_reset', array( $this, 'trackPasswordResetAction' ) );\n\t\t\t// Trackback\n\t\t\tadd_action( 'trackback_post', array( $this, 'trackTrackbackAction' ) );\n\t\t\t// New Attachment\n\t\t\tadd_action( 'add_attachment', array( $this, 'trackAttachmentCreatedAction' ) );\n\t\t\t// Attachment Edit\n\t\t\tadd_action( 'edit_attachment', array( $this, 'trackAttachmentEditAction' ) );\n\t\t\t// Post Edit\n\t\t\tadd_action( 'transition_post_status', array( $this, 'trackPostAction') , 10, 3);\n\t\t\t// New Blog (WPMU)\n\t\t\tadd_action( 'wpmu_new_blog', array( $this, 'trackNewBlogAction') , 10, 5);\n\t\t}\n\t\t\n\t\t// track feeds\n\t\t\n\t\tif ( $this->getOption( 'trackFeeds' ) ) {\n\t\t\n\t\t\tadd_action('wp_loaded', array( $this, 'addFeedTrackingQueryParams'));\n\t\t\tadd_action( 'template_redirect', array( $this, 'trackFeedRequest'), 1 );\n\t\t}\n\t}\t\n\t\n\t// Add query vars to WordPress\n\tfunction addFeedTrackingQueryParams() {\n\t\t\n\t\tglobal $wp;\n\t\t\n\t\t// feed tracking param\n\t\t$wp->add_query_var('owa_sid');\n\t\t\n\t}\n\t\n\t/**\n\t * Determines the title of the page being requested\n\t *\n\t * @param string $page_type\n\t * @return string $title\n\t */\n\tfunction getPageTitle() {\n\t\n\t\t$page_type = $this->getPageType();\n\t\t\n\t\tif ( $page_type == \"Home\" ) {\n\t\t\n\t\t\t$title = get_bloginfo( \"name\" );\n\t\t\n\t\t} elseif ( $page_type == \"Search Results\" ) {\n\t\t\t\n\t\t\t$title = \"Search Results for \\\"\" . get_search_query() . \"\\\"\";\t\n\t\t\n\t\t} else {\n\t\t\t\n\t\t\t$title = wp_title($sep = '', $display = 0);\n\t\t}\t\n\t\t\n\t\treturn $title;\n\t}\n\t\n\tfunction setPageTitleCmd() {\n\t\t\n\t\t$this->cmds[] = sprintf(\"owa_cmds.push([ 'setPageTitle', '%s' ]);\", $this->getPageTitle() );\n\t}\n\t\n\tfunction setUserNameCmd() {\n\t\t\n\t\t$current_user = wp_get_current_user();\n\t\t$this->cmds[] = sprintf(\"owa_cmds.push([ 'setUserName', '%s' ]);\", $current_user->user_login );\n\t}\n\t\n\t/**\n\t * Determines the type of WordPress page\n\t *\n\t * @return string $type\n\t */\n\tfunction getPageType() {\t\n\t\t\n\t\tif ( is_home() ) {\n\t\t\t$type = \"Home\";\n\t\t} elseif ( is_attachment() ){\n\t\t\t$type = \"Attachment\";\n\t\t} elseif ( is_page() ) {\n\t\t\t$type = \"Page\";\n\t\t// general page catch, should be after more specific post types\t\n\t\t} elseif ( is_single() ) {\n\t\t\t$type = \"Post\";\n\t\t} elseif ( is_feed() ) {\n\t\t\t$type = \"Feed\";\n\t\t} elseif ( is_author() ) {\n\t\t\t$type = \"Author\";\n\t\t} elseif ( is_category() ) {\n\t\t\t$type = \"Category\";\n\t\t} elseif ( is_search() ) {\n\t\t\t$type = \"Search Results\";\n\t\t} elseif ( is_month() ) {\n\t\t\t$type = \"Month\";\n\t\t} elseif ( is_day() ) {\n\t\t\t$type = \"Day\";\n\t\t} elseif ( is_year() ) {\n\t\t\t$type = \"Year\";\n\t\t} elseif ( is_time() ) {\n\t\t\t$type = \"Time\";\n\t\t} elseif ( is_tag() ) {\n\t\t\t$type = \"Tag\";\n\t\t} elseif ( is_tax() ) {\n\t\t\t$type = \"Taxonomy\";\n\t\t// general archive catch, should be after specific archive types\t\n\t\t} elseif ( is_archive() ) {\n\t\t\t$type = \"Archive\";\n\t\t} elseif ( is_admin() ) {\n\t\t\t$type = \"Admin\";\n\t\t} else {\n\t\t\t$type = '(not set)';\n\t\t}\n\t\t\n\t\treturn $type;\n\t}\n\t\n\tfunction setDebugCmd() {\n\t\t\n\t\t$this->cmds[] = \"owa_cmds.push( ['setDebug', true ] );\";\n\t}\n\t\n\tfunction setSiteIdCmd() {\n\t\t\n\t\t$this->cmds[] = sprintf(\"owa_cmds.push( ['setSiteId', '%s' ] );\", $this->getOption('siteId') );\n\t}\n\t\n\tfunction setPageTypeCmd() {\n\t\t\n\t\t$this->cmds[] = sprintf(\"owa_cmds.push( ['setPageType', '%s' ] );\", $this->getPageType() );\n\t}\n\t\n\tfunction setTrackPageViewCmd() {\n\t\t\n\t\t$this->cmds[] = \"owa_cmds.push( ['trackPageView'] );\";\n\t}\n\t\n\tfunction setTrackClicksCmd() {\n\t\t\n\t\t$this->cmds[] = \"owa_cmds.push( ['trackClicks'] );\";\n\t}\n\t\n\tfunction setTrackDomstreamsCmd() {\n\t\t\n\t\t$this->cmds[] = \"owa_cmds.push( ['trackDomStream'] );\";\n\t}\n\t\n\tfunction cmdsToString() {\n\t\t\n\t\t$out = '';\n\t\t\n\t\tforeach ( $this->cmds as $cmd ) {\n\t\t\t\n\t\t\t$out .= $cmd . \" \\n\";\t\n\t\t}\n\t\t\n\t\treturn $out;\n\t}\n\t\t\n\t// check to see if OWA is available as a php library on the same server\n\tfunction isOwaAvailable() {\n\t\t\n\t\tif ( $this->getOption( 'owaPath' ) ) {\n\t\t\t\n\t\t\t$owa = owa_wp_plugin::getOwaInstance();\n\t\t\t\n\t\t\treturn $owa->isOwaInstalled();\t\t\n\t\t}\n\n\t}\n\t\n\t\t\t\n\t/**\n\t * Insert Tracking Tag\n\t *\n\t * Adds javascript tracking tag int <head> of all pages.\n\t * \n\t */\n\tfunction insertTrackingTag() {\n\t\t\t\n\t\tif (is_admin()) {\n\t\t\t\n\t\t\t$screen = get_current_screen();\n\t\t\t///print_r($screen);\t\n\t\t\tif ( in_array( $screen->id, [ 'owa_page_owa-analytics', 'owa_page_owa-wordpress' ] ) ) {\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\t// Don't log if the page request is a preview - Wordpress 2.x or greater\n\t\tif ( function_exists( 'is_preview' ) ) {\n\t\t\t\n\t\t\tif ( is_preview() ) {\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// dont log customizer previews either.\n\t\tif ( function_exists( 'is_customize_preview' ) ) {\n\t\t\t\n\t\t\tif ( is_customize_preview() ) {\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// dont log requests for admin interface pages\n\t\tif ( ! $this->getOption( 'trackAdminPages') && function_exists( ' is_admin' ) && is_admin() ) {\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// set user name in tracking for names users with wp-admin accounts\n\t\tif ( $this->getOption( 'trackNamedUsers') ) {\n\t\t\t\n\t\t\t$this->setUserNameCmd();\n\t\t}\n\t\n\t\t\n\t\t// get instance of OWA\n\t\t$owa = self::getOwaInstance();\n\t\t\n\t\t// set any cmds\n\t\t\n\t\tif ( $this->getOption('debug') ) {\n\t\t\t\n\t\t\t$this->setDebugCmd();\n\t\t}\n\t\t\n\t\t$this->setSiteIdCmd();\n\t\t$this->setPageTypeCmd();\n\t\t$this->setPageTitleCmd();\n\t\t\n\t\t// set track clicks command\n\t\tif ( $this->getOption('trackClicks') ) {\n\t\t\t\n\t\t\t$this->setTrackClicksCmd();\n\t\t}\n\t\t\n\t\t// set track domstream command\n\t\tif ( $this->getOption('trackDomstreams') ) {\n\t\t\t\n\t\t\t$this->setTrackDomstreamsCmd();\n\t\t}\n\t\t\n\t\t// set track page view command\n\t\t$this->setTrackPageViewCmd();\n\t\t\n\t\t// convert cmds to string and pass to tracking tag template\t\n\t\t$options = $this->cmdsToString();\n\t\t\n\t\techo sprintf( $this->getTrackerSnippetTemplate(), $options );\n\t\t\n\t}\t\n\t\n\tfunction getTrackerSnippetTemplate() {\n\t\t\n\t\t$tag =  \"<!-- Open Web Analytics --> \\n\";\n\t\t$tag .= '<script type=\"text/javascript\">' . \"\\n\";\n\t\t$tag .= \"var owa_cmds = owa_cmds || []; \\n\";\n\t\t\n\t\t$base_url = $this->getOption('owaEndpoint');\n\t\t$tag .= \"var owa_baseUrl = '$base_url'; \\n\";\n\t\t\n\t\t$tag .= \"%s\";\n\t\t\n\t\t$tag .= \"\n\t\t(function() {var _owa = document.createElement('script'); _owa.type = 'text/javascript'; _owa.async = true;\n\t\towa_baseUrl = ('https:' == document.location.protocol ? window.owa_baseSecUrl || owa_baseUrl.replace(/http:/, 'https:') : owa_baseUrl );\n\t\t_owa.src = owa_baseUrl + 'modules/base/js/owa.tracker-combined-min.js';\n\t\tvar _owa_s = document.getElementsByTagName('script')[0]; _owa_s.parentNode.insertBefore(_owa, _owa_s);}());\n\t\t\n\t\t\\n \";\n\t\t\n\t\t$tag .= \"</script> \\n\n\t\t<!-- End Open Web Analytics --> \\n\n\t\t\";\n\t\t\n\t\treturn $tag;\n\t}\n\t\n\t\t\n\t/**\n\t * Adds tracking source param to links in feeds\n\t *\n\t * @param string $link\n\t * @return string\n\t */\n\tfunction decorateFeedEntryPermalink($link) {\n\t\t\n\t\t// check for presence of '?' which is not present under URL rewrite conditions\n\t\n\t\tif ( $this->getOption( 'track_feed_links' ) ) {\n\t\t\n\t\t\tif ( strpos($link, \"?\") === false ) {\n\t\t\t\t// add the '?' if not found\n\t\t\t\t$link .= '?';\n\t\t\t}\n\t\t\t\n\t\t\t// setup link template\n\t\t\t$link_template = \"%s&amp;%s=%s&amp;%s=%s\";\n\t\t\t\t\n\t\t\treturn sprintf($link_template,\n\t\t\t\t\t\t   $link,\n\t\t\t\t\t\t   'owa_medium',\n\t\t\t\t\t\t   $this->getOption( 'feed_tracking_medium' ),\n\t\t\t\t\t\t   $this->getOption( 'feed_subscription_param' ),\n\t\t\t\t\t\t   $_GET[ $this->getOption( 'feed_subscription_param' ) ]\n\t\t\t);\n\t\t}\n\t}\n\t\n\t/**\n\t * Wordpress filter function adds a GUID to the feed URL.\n\t *\n\t * @param array $binfo\n\t * @return string $newbinfo\n\t */\n\tfunction decorateFeedSubscriptionLink( $binfo ) {\n\t\t\n\t\t$is_feed = strpos($binfo, \"feed=\");\n\t\t\n\t\tif ( $is_feed && $this->getOption( 'track_feed_links' ) ) {\n\t\t\t\n\t\t\t$guid = crc32(getmypid().microtime());\n\t\t\n\t\t\t$newbinfo = $binfo . \"&amp;\" . $this->getOption('feed_subscription_param') . \"=\" . $guid;\n\t\t\n\t\t} else {\n\t\t\t\n\t\t\t$newbinfo = $binfo;\n\t\t}\n\t\t\n\t\treturn $newbinfo;\n\t}\n\t\n\t// create a new tracked site.\n\tfunction createTrackedSiteForNewBlog($blog_id, $user_id, $domain, $path, $site_id, $meta) {\n\t\n\t\t$owa = self::getOwaInstance();\n\t\t$sm = owa_coreAPI::supportClassFactory( 'base', 'siteManager' );\n\t\t$sm->createNewSite( $domain, $domain, '', '');\n\t}\n\t\n\t\n\t/**\n\t * New Blog Action Tracker\n\t */\n\tfunction trackNewBlogAction( $blog_id, $user_id, $domain, $path, $site_id ) {\n\t\n\t\t$owa = self::getOwaInstance();\n\t\t$owa->trackAction('WordPress', 'Blog Created', $domain);\n\t}\n\t\n\t/**\n\t * Edit Post Action Tracker\n\t */\n\tfunction trackedPostEditAction( $post_id, $post ) {\n\t\t\n\t\t// we don't want to track autosaves...\n\t\tif( wp_is_post_autosave( $post ) ) {\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t$owa = self::getOwaInstance();\n\t\t$label = $post->post_title;\n\t\t$owa->trackAction( 'WordPress', $post->post_type.' edited', $label );\n\t}\n\t\n\t/**\n\t * Post Action Tracker\n\t *\n\t * Trackes new and edited post actions. Including custom post types.\n\t */\n\tfunction trackPostAction( $new_status, $old_status, $post ) {\n\t\t\n\t\t$action_name = '';\n\t\t\n\t\t// we don't want to track autosaves...\n\t\tif(wp_is_post_autosave( $post ) ) {\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// or drafts\n\t\tif ( $new_status === 'draft' && $old_status === 'draft' ) {\n\t\t\t\n\t\t\treturn;\n\t\t\n\t\t}\n\t\t\n\t\t// set action label\n\t\tif ( $new_status === 'publish' && $old_status != 'publish' ) {\n\t\t\t\n\t\t\t$action_name = $post->post_type.' publish';\n\t\t\n\t\t} elseif ( $new_status === $old_status ) {\n\t\t\n\t\t\t$action_name = $post->post_type.' edit';\n\t\t}\n\t\t\n\t\t// track action\n\t\tif ( $action_name ) {\t\n\t\t\n\n\t\t\t$owa = self::getOwaInstance();\n\t\t\towa_coreAPI::debug(sprintf(\"new: %s, old: %s, post: %s\", $new_status, $old_status, print_r($post, true)));\n\t\t\t$label = $post->post_title;\n\t\t\t\n\t\t\t$owa->trackAction('WordPress', $action_name, $label);\n\t\t}\n\t}\n\t\n\t/**\n\t * Edit Attachment Action Tracker\n\t */\n\tfunction trackAttachmentEditAction( $post_id ) {\n\t\n\t\t$owa = self::getOwaInstance();\n\t\t$post = get_post( $post_id );\n\t\t$label = $post->post_title;\n\t\t$owa->trackAction('WordPress', 'Attachment Edit', $label);\n\t}\n\t\n\t/**\n\t * New Attachment Action Tracker\n\t */\n\tfunction trackAttachmentCreatedAction( $post_id ) {\n\t\n\t\t$owa = self::getOwaInstance();\n\t\t$post = get_post($post_id);\n\t\t$label = $post->post_title;\n\t\t$owa->trackAction('WordPress', 'Attachment Created', $label);\n\t}\n\t\n\t/**\n\t * User Registration Action Tracker\n\t */\n\tfunction trackUserRegistrationAction( $user_id ) {\n\t\t\n\t\t$owa = self::getOwaInstance();\n\t\t$user = get_userdata($user_id);\n\t\tif (!empty($user->first_name) && !empty($user->last_name)) {\n\t\t\t$label = $user->first_name.' '.$user->last_name;\t\n\t\t} else {\n\t\t\t$label = $user->display_name;\n\t\t}\n\t\t\n\t\t$owa->trackAction('WordPress', 'User Registration', $label);\n\t}\n\t\n\t/**\n\t * User Login Action Tracker\n\t */\n\tfunction trackUserLoginAction( $user_id ) {\n\t\n\t\t$owa = self::getOwaInstance();\n\t\t$label = $user_id;\n\t\t$owa->trackAction('WordPress', 'User Login', $label);\n\t}\n\t\n\t/**\n\t * Profile Update Action Tracker\n\t */\n\tfunction trackUserProfileUpdateAction( $user_id, $old_user_data = '' ) {\n\t\n\t\t$owa = self::getOwaInstance();\n\t\t$user = get_userdata($user_id);\n\t\tif (!empty($user->first_name) && !empty($user->last_name)) {\n\t\t\t$label = $user->first_name.' '.$user->last_name;\t\n\t\t} else {\n\t\t\t$label = $user->display_name;\n\t\t}\n\t\t\n\t\t$owa->trackAction('WordPress', 'User Profile Update', $label);\n\t}\n\t\n\t/**\n\t * Password Reset Action Tracker\n\t */\n\tfunction trackPasswordResetAction( $user ) {\n\t\t\n\t\t$owa = self::getOwaInstance();\n\t\t$label = $user->display_name;\n\t\t$owa->trackAction('WordPress', 'User Password Reset', $label);\n\t}\n\t\n\t/**\n\t * Trackback Action Tracker\n\t */\n\tfunction trackTrackbackAction( $comment_id ) {\n\t\t\n\t\t$owa = self::getOwaInstance();\n\t\t$label = $comment_id;\n\t\t$owa->trackAction('WordPress', 'Trackback', $label);\n\t}\n\t\n\tfunction trackCommentAction( $id, $comment_data = '' ) {\n\n\t\tif ( $comment_data === 'approved' || $comment_data === 1 ) {\n\t\n\t\t\t$owa = self::getOwaInstance();\n\t\t\t$label = '';\n\t\t\t$owa->trackAction('WordPress', 'comment', $label);\n\t\t}\n\t}\n\t\n\tfunction trackCommentEditAction( $new_status, $old_status, $comment ) {\n\t\t\n\t\tif ($new_status === 'approved') {\n\t\t\t\n\t\t\tif (isset($comment->comment_author)) {\n\t\t\t\t\n\t\t\t\t$label = $comment->comment_author;\n\t\t\t\n\t\t\t} else {\n\t\t\t\n\t\t\t\t$label = '';\n\t\t\t}\n\t\t\t\n\t\t\t$owa = self::getOwaInstance();\n\t\t\t$owa->trackAction('WordPress', 'comment', $label);\n\t\t}\n\t}\n\t\n\t// Tracks feed requests\n\tfunction trackFeedRequest() {\n\t\t\n\t\tif ( is_feed() ) {\n\t\t\n\t\t\t$owa = self::getOwaInstance();\n\t\n\t\t\tif( $owa->getSetting( 'base', 'log_feedreaders') ) {\n\t\t\t\t\n\t\t\t\towa_coreAPI::debug('Tracking WordPress feed request');\t\t\t\n\t\t\t\t\n\t\t\t\t$event = $owa->makeEvent();\n\t\t\t\t// set event type\n\t\t\t\t$event->setEventType( 'base.feed_request' );\n\t\t\t\t// determine and set the type of feed\n\t\t\t\t$event->set( 'feed_format', get_query_var( 'feed' ) );\n\t\t\t\t$event->set( 'feed_subscription_id', get_query_var( 'owa_sid' ) );\n\t\t\t\t//$event->set( 'feed_subscription_id', $_GET['owa_sid'] );\n\t\t\t\t// track\n\t\t\t\t$owa->trackEvent( $event );\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// backward compatability for old style embedded installs.\n\tprivate function setEmbeddedOptions() {\n\t\t\n\t\t// check for presence of OWA in same directory.\n\t\t// used by isOwaAvailable method.\n\t\t$path =  plugin_dir_path(__FILE__) ;\n\t\t\n\t\tif ( file_exists( $path.'owa_env.php' ) ) {\n\t\t\t\n\t\t\t$this->setOption('owaPath', $path );\n\t\t}\n\t\t\n\t\t\n\t\tif ( $this->isOwaAvailable() ) {\n\t\t\t\n\t\t\t$this->setOption('trackAdminActions', true);\n\t\t\t\n\t\t\t$owa = self::getOwaInstance();\n\t\t\t\n\t\t\tif ( ! $this->getOption('apiKey') ) {\n\t\t\t\t\n\t\t\t\t$cu = owa_coreAPI::getCurrentUser();\n\t\t\t\t$this->setOption('apiKey', $cu->getUserData('api_key') );\n\t\t\t}\n\t\t\t\n\t\t\t$this->setOption('owaEndpoint', $owa->getSetting('base', 'public_url') );\n\t\t\t\n\t\t\t// set site iD, if not already set from the DB\t\n\t\t\tif ( ! $this->getOption('siteId') ) {\n\t\t\t\t\n\t\t\t\t$this->setOption('siteId', self::generateSiteId() );\n\t\t\t}\n\t\t\n\t\t\n\t\t}\n\t\t\n\t\towa_wp_util::addFilter('owa_wp_settings_field_siteId', array( $this, 'getSitesFromOwa'), 10, 1);\n\t\t\n\t}\n\t\n\tpublic function registerOptions() {\t\t\n\t\t\n\t\t$settings = array(\n\t\t\n\t\t\t'enable'\t\t\t\t=> array(\n\t\t\t\n\t\t\t\t'default_value'\t\t\t\t\t\t\t=> true,\n\t\t\t\t'field'\t\t\t\t\t\t\t\t\t=> array(\n\t\t\t\t\t'type'\t\t\t\t\t\t\t\t\t=> 'boolean',\n\t\t\t\t\t'title'\t\t\t\t\t\t\t\t\t=> 'Enable OWA ',\n\t\t\t\t\t'page_name'\t\t\t\t\t\t\t\t=> 'owa-wordpress',\n\t\t\t\t\t'section'\t\t\t\t\t\t\t\t=> 'general',\n\t\t\t\t\t'description'\t\t\t\t\t\t\t=> 'Enable OWA.',\n\t\t\t\t\t'label_for'\t\t\t\t\t\t\t\t=> 'Enable OWA.',\n\t\t\t\t\t'error_message'\t\t\t\t\t\t\t=> 'You must select On or Off.'\t\t\n\t\t\t\t)\t\t\t\t\n\t\t\t),\n\t\t\t\n\t\t\t'apiKey'\t\t\t\t=> array(\n\t\t\t\n\t\t\t\t'default_value'\t\t\t\t\t\t\t=> '',\n\t\t\t\t'field'\t\t\t\t\t\t\t\t\t=> array(\n\t\t\t\t\t'type'\t\t\t\t\t\t\t\t\t=> 'text',\n\t\t\t\t\t'title'\t\t\t\t\t\t\t\t\t=> 'API Key',\n\t\t\t\t\t'page_name'\t\t\t\t\t\t\t\t=> 'owa-wordpress',\n\t\t\t\t\t'section'\t\t\t\t\t\t\t\t=> 'general',\n\t\t\t\t\t'description'\t\t\t\t\t\t\t=> 'API key for accessing your OWA instance.',\n\t\t\t\t\t'label_for'\t\t\t\t\t\t\t\t=> 'OWA API Key',\n\t\t\t\t\t'length'\t\t\t\t\t\t\t\t=> 70,\n\t\t\t\t\t'error_message'\t\t\t\t\t\t\t=> ''\t\t\n\t\t\t\t)\t\t\t\t\n\t\t\t),\n\t\t\t\n\t\t\t'owaEndpoint'\t\t\t=> array(\n\t\t\t\n\t\t\t\t'default_value'\t\t\t\t\t\t\t=> '',\n\t\t\t\t'field'\t\t\t\t\t\t\t\t\t=> array(\n\t\t\t\t\t'type'\t\t\t\t\t\t\t\t\t=> 'url',\n\t\t\t\t\t'title'\t\t\t\t\t\t\t\t\t=> 'OWA Endpoint',\n\t\t\t\t\t'page_name'\t\t\t\t\t\t\t\t=> 'owa-wordpress',\n\t\t\t\t\t'section'\t\t\t\t\t\t\t\t=> 'general',\n\t\t\t\t\t'description'\t\t\t\t\t\t\t=> 'The URL of your OWA instance. (i.e. http://www.mydomain.com/path/to/owa/)',\n\t\t\t\t\t'label_for'\t\t\t\t\t\t\t\t=> 'OWA Endpoint',\n\t\t\t\t\t'length'\t\t\t\t\t\t\t\t=> 70,\n\t\t\t\t\t'error_message'\t\t\t\t\t\t\t=> ''\t\t\n\t\t\t\t)\t\t\t\t\n\t\t\t),\n\t\t\t\n\t\t\t'siteId'\t\t\t\t=> array(\n\t\t\t\n\t\t\t\t'default_value'\t\t\t\t\t\t\t=> '',\n\t\t\t\t'field'\t\t\t\t\t\t\t\t\t=> array(\n\t\t\t\t\t'type'\t\t\t\t\t\t\t\t\t=> 'select',\n\t\t\t\t\t'title'\t\t\t\t\t\t\t\t\t=> 'Website ID',\n\t\t\t\t\t'page_name'\t\t\t\t\t\t\t\t=> 'owa-wordpress',\n\t\t\t\t\t'section'\t\t\t\t\t\t\t\t=> 'general',\n\t\t\t\t\t'description'\t\t\t\t\t\t\t=> 'Select the ID of the website you want to track. (must have a valid API key and endpoint)',\n\t\t\t\t\t'label_for'\t\t\t\t\t\t\t\t=> 'Tracked website ID',\n\t\t\t\t\t'length'\t\t\t\t\t\t\t\t=> 90,\n\t\t\t\t\t'error_message'\t\t\t\t\t\t\t=> '',\n\t\t\t\t\t'options'\t\t\t\t\t\t\t\t=> []\t\t\n\t\t\t\t)\t\t\t\t\n\t\t\t),\n\n\t\t\t\n\t\t\t'trackClicks'\t\t\t\t=> array(\n\t\t\t\n\t\t\t\t'default_value'\t\t\t\t\t\t\t=> true,\n\t\t\t\t'field'\t\t\t\t\t\t\t\t\t=> array(\n\t\t\t\t\t'type'\t\t\t\t\t\t\t\t\t=> 'boolean',\n\t\t\t\t\t'title'\t\t\t\t\t\t\t\t\t=> 'Track Clicks',\n\t\t\t\t\t'page_name'\t\t\t\t\t\t\t\t=> 'owa-wordpress',\n\t\t\t\t\t'section'\t\t\t\t\t\t\t\t=> 'tracking',\n\t\t\t\t\t'description'\t\t\t\t\t\t\t=> 'Track the clicks visitors make on your web pages.',\n\t\t\t\t\t'label_for'\t\t\t\t\t\t\t\t=> 'Track clicks within a web page',\n\t\t\t\t\t'error_message'\t\t\t\t\t\t\t=> 'You must select On or Off.'\t\t\n\t\t\t\t)\t\t\t\t\n\t\t\t),\n\t\t\t\n\t\t\t'trackDomstreams'\t\t\t\t=> array(\n\t\t\t\n\t\t\t\t'default_value'\t\t\t\t\t\t\t=> false,\n\t\t\t\t'field'\t\t\t\t\t\t\t\t\t=> array(\n\t\t\t\t\t'type'\t\t\t\t\t\t\t\t\t=> 'boolean',\n\t\t\t\t\t'title'\t\t\t\t\t\t\t\t\t=> 'Track Domstreams',\n\t\t\t\t\t'page_name'\t\t\t\t\t\t\t\t=> 'owa-wordpress',\n\t\t\t\t\t'section'\t\t\t\t\t\t\t\t=> 'tracking',\n\t\t\t\t\t'description'\t\t\t\t\t\t\t=> 'Record visitor mouse movements on each web page.',\n\t\t\t\t\t'label_for'\t\t\t\t\t\t\t\t=> 'Record mouse movements',\n\t\t\t\t\t'error_message'\t\t\t\t\t\t\t=> 'You must select On or Off.'\t\t\n\t\t\t\t)\t\t\t\t\n\t\t\t),\n\t\t\t\n\t\t\t'trackFeeds'\t\t\t\t=> array(\n\t\t\t\n\t\t\t\t'default_value'\t\t\t\t\t\t\t=> true,\n\t\t\t\t'field'\t\t\t\t\t\t\t\t\t=> array(\n\t\t\t\t\t'type'\t\t\t\t\t\t\t\t\t=> 'boolean',\n\t\t\t\t\t'title'\t\t\t\t\t\t\t\t\t=> 'Track Feed Requests',\n\t\t\t\t\t'page_name'\t\t\t\t\t\t\t\t=> 'owa-wordpress',\n\t\t\t\t\t'section'\t\t\t\t\t\t\t\t=> 'tracking',\n\t\t\t\t\t'description'\t\t\t\t\t\t\t=> 'Track requests for RSS/ATOM syndication feeds.',\n\t\t\t\t\t'label_for'\t\t\t\t\t\t\t\t=> 'Track RSSS/ATOM Feeds',\n\t\t\t\t\t'error_message'\t\t\t\t\t\t\t=> 'You must select On or Off.'\t\t\n\t\t\t\t)\t\t\t\t\n\t\t\t),\n\t\t\t\n\t\t\t'trackNamedUsers'\t\t\t\t=> array(\n\t\t\t\n\t\t\t\t'default_value'\t\t\t\t\t\t\t=> true,\n\t\t\t\t'field'\t\t\t\t\t\t\t\t\t=> array(\n\t\t\t\t\t'type'\t\t\t\t\t\t\t\t\t=> 'boolean',\n\t\t\t\t\t'title'\t\t\t\t\t\t\t\t\t=> 'Track Named Users',\n\t\t\t\t\t'page_name'\t\t\t\t\t\t\t\t=> 'owa-wordpress',\n\t\t\t\t\t'section'\t\t\t\t\t\t\t\t=> 'tracking',\n\t\t\t\t\t'description'\t\t\t\t\t\t\t=> 'Track user names and email addresses of WordPress admin users.',\n\t\t\t\t\t'label_for'\t\t\t\t\t\t\t\t=> 'Track named users',\n\t\t\t\t\t'error_message'\t\t\t\t\t\t\t=> 'You must select On or Off.'\t\t\n\t\t\t\t)\t\t\t\t\n\t\t\t),\n\t\t\t\n\t\t\t'trackAdminPages'\t\t\t\t=> array(\n\t\t\t\n\t\t\t\t'default_value'\t\t\t\t\t\t\t=> false,\n\t\t\t\t'field'\t\t\t\t\t\t\t\t\t=> array(\n\t\t\t\t\t'type'\t\t\t\t\t\t\t\t\t=> 'boolean',\n\t\t\t\t\t'title'\t\t\t\t\t\t\t\t\t=> 'Track WP Admin Pages',\n\t\t\t\t\t'page_name'\t\t\t\t\t\t\t\t=> 'owa-wordpress',\n\t\t\t\t\t'section'\t\t\t\t\t\t\t\t=> 'tracking',\n\t\t\t\t\t'description'\t\t\t\t\t\t\t=> 'Track WordPress admin interface pages (/wp-admin...)',\n\t\t\t\t\t'label_for'\t\t\t\t\t\t\t\t=> 'Track WP admin pages',\n\t\t\t\t\t'error_message'\t\t\t\t\t\t\t=> 'You must select On or Off.'\t\t\n\t\t\t\t)\t\t\t\t\n\t\t\t),\n\t\t\t\n\t\t\t'trackAdminActions'\t\t\t\t=> array(\n\t\t\t\n\t\t\t\t'default_value'\t\t\t\t\t\t\t=> false,\n\t\t\t\t'field'\t\t\t\t\t\t\t\t\t=> array(\n\t\t\t\t\t'type'\t\t\t\t\t\t\t\t\t=> 'boolean',\n\t\t\t\t\t'title'\t\t\t\t\t\t\t\t\t=> 'Track WP Admin Actions',\n\t\t\t\t\t'page_name'\t\t\t\t\t\t\t\t=> 'owa-wordpress',\n\t\t\t\t\t'section'\t\t\t\t\t\t\t\t=> 'tracking',\n\t\t\t\t\t'description'\t\t\t\t\t\t\t=> 'Track WordPress admin actions such as login, new posts, edits, etc.',\n\t\t\t\t\t'label_for'\t\t\t\t\t\t\t\t=> 'Track WP admin actions',\n\t\t\t\t\t'error_message'\t\t\t\t\t\t\t=> 'You must select On or Off.'\t\t\n\t\t\t\t)\t\t\t\t\n\t\t\t),\n\t\t\t\n\t\t\t'owaPath'\t\t\t\t\t\t=> array(\n\t\t\t\n\t\t\t\t'default_value'\t\t\t\t\t\t\t=> '',\n\t\t\t\t'field'\t\t\t\t\t\t\t\t\t=> array(\n\t\t\t\t\t'type'\t\t\t\t\t\t\t\t\t=> 'text',\n\t\t\t\t\t'title'\t\t\t\t\t\t\t\t\t=> 'OWA Path',\n\t\t\t\t\t'page_name'\t\t\t\t\t\t\t\t=> 'owa-wordpress',\n\t\t\t\t\t'section'\t\t\t\t\t\t\t\t=> 'advanced',\n\t\t\t\t\t'description'\t\t\t\t\t\t\t=> 'The path to OWA on your server. Used for certain WordPress admin action tracking if OWA is on the same server as your wordPress install.',\n\t\t\t\t\t'label_for'\t\t\t\t\t\t\t\t=> 'OWA Path',\n\t\t\t\t\t'length'\t\t\t\t\t\t\t\t\t=> 70,\n\t\t\t\t\t'error_message'\t\t\t\t\t\t\t=> ''\t\t\n\t\t\t\t)\t\t\t\t\n\t\t\t),\n\t\t\t\n\t\t\t'debug'\t\t\t\t=> array(\n\t\t\t\n\t\t\t\t'default_value'\t\t\t\t\t\t\t=> false,\n\t\t\t\t'field'\t\t\t\t\t\t\t\t\t=> array(\n\t\t\t\t\t'type'\t\t\t\t\t\t\t\t\t=> 'boolean',\n\t\t\t\t\t'title'\t\t\t\t\t\t\t\t\t=> 'Debug Mode',\n\t\t\t\t\t'page_name'\t\t\t\t\t\t\t\t=> 'owa-wordpress',\n\t\t\t\t\t'section'\t\t\t\t\t\t\t\t=> 'advanced',\n\t\t\t\t\t'description'\t\t\t\t\t\t\t=> 'Outputs debug notices to log file and browser console.',\n\t\t\t\t\t'label_for'\t\t\t\t\t\t\t\t=> 'Debug Mode',\n\t\t\t\t\t'error_message'\t\t\t\t\t\t\t=> 'You must select On or Off.'\t\t\n\t\t\t\t)\t\t\t\t\n\t\t\t),\n\n\t\t);\n\t\n\t\treturn $settings;\n\t}\n\n\tpublic function registerSettingsPages() {\n\t\t\n\t\t$pages = array(\n\t\t\n\t\t\t'owa-wordpress'\t\t\t=> array(\n\t\t\t\t\n\t\t\t\t'parent_slug'\t\t\t\t\t=> 'owa-wordpress',\n\t\t\t\t'is_top_level'\t\t\t\t\t=> true,\n\t\t\t\t'top_level_menu_title'\t\t\t=> 'OWA',\n\t\t\t\t'title'\t\t\t\t\t\t\t=> 'Open Web Analytics',\n\t\t\t\t'menu_title'\t\t\t\t\t=> 'Tracking Settings',\n\t\t\t\t'required_capability'\t\t\t=> 'manage_options',\n\t\t\t\t'menu_slug'\t\t\t\t\t\t=> 'owa-wordpress-settings',\n\t\t\t\t'menu-icon'\t\t\t\t\t\t=> 'dashicons-chart-pie',\n\t\t\t\t'description'\t\t\t\t\t=> 'Settings for Open Web Analytics.',\n\t\t\t\t'sections'\t\t\t\t\t\t=> array(\n\t\t\t\t\t'general'\t\t\t\t\t\t=> array(\n\t\t\t\t\t\t'id'\t\t\t\t\t\t\t=> 'general',\n\t\t\t\t\t\t'title'\t\t\t\t\t\t\t=> 'General',\n\t\t\t\t\t\t'description'\t\t\t\t\t=> 'These settings control the integration between Open Web Analytics and WordPress.'\n\t\t\t\t\t),\n\t\t\t\t\t'tracking'\t\t\t\t\t\t=> array(\n\t\t\t\t\t\t'id'\t\t\t\t\t\t\t=> 'tracking',\n\t\t\t\t\t\t'title'\t\t\t\t\t\t\t=> 'Tracking',\n\t\t\t\t\t\t'description'\t\t\t\t\t=> 'These settings control how Open Web Analytics will track your WordPress website.'\n\t\t\t\t\t),\n\t\t\t\t\t'advanced'\t\t\t\t\t\t=> array(\n\t\t\t\t\t\t'id'\t\t\t\t\t\t\t=> 'advanced',\n\t\t\t\t\t\t'title'\t\t\t\t\t\t\t=> 'Advanced',\n\t\t\t\t\t\t'description'\t\t\t\t\t=> 'These are advanced integration settings that are seldom used. Do not change these unless you know what you are doing. ;)'\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t\t\n\t\tif ( $this->isOwaAvailable() ) {\n\t\t\t\n\t\t\t$pages['owa-analytics']\t= array(\n\t\t\t\t\n\t\t\t\t'parent_slug'\t\t\t\t\t=> 'owa-wordpress',\n\t\t\t\t'title'\t\t\t\t\t\t\t=> 'OWA Analytics',\n\t\t\t\t'menu_title'\t\t\t\t\t=> 'Analytics',\n\t\t\t\t'required_capability'\t\t\t=> 'manage_options',\n\t\t\t\t'menu_slug'\t\t\t\t\t\t=> 'owa-analytics',\n\t\t\t\t'description'\t\t\t\t\t=> 'OWA Analytics dashboard.',\n\t\t\t\t'render_callback'\t\t\t\t=> array( $this, 'pageController')\n\t\t\t);\n\t\t}\n\t\t\n\t\treturn $pages;\n\t}\n\t\n\tpublic static function debug( $msg, $exit = false ) {\n\t\t\n\t\tif ( defined( 'WP_DEBUG' ) && defined( 'WP_DEBUG_LOG') && WP_DEBUG == true && WP_DEBUG_LOG == true) {\n\t\t\t\n\t\t\tif (is_array( $msg) || is_object( $msg ) ) {\n\t\t\t\t\n\t\t\t\t$msg = print_r( $msg , true);\n\t\t\t}\n\n\t\t\terror_log( $msg );\n\t\t\t\n\t\t\tif ( $exit ) {\n\t\t\t\t\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction owaRemoteGet( $params ) {\n\t\t\n\t\tif ( $this->getOption('apiKey') && $this->getOption('owaEndpoint') ) {\n\t\t\t\n\t\t\t$params['owa_apiKey'] = $this->getOption('apiKey');\n\t\t\t$ret =  wp_remote_get( $this->getOption('owaEndpoint').'api/?' . build_query( $params ) );\t\n\t\t\tself::debug('Got response from OWA endpoint' );\n\t\t\tif ( ! is_wp_error( $ret ) ) {\n\t\t\t\t\n\t\t\t\t$body = wp_remote_retrieve_body( $ret );\n\t\t\t\t$body = json_decode($body);\n\t\t\t\treturn $body;\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tself::debug('REST call from WordPress Failed with params: '. print_r($params, true) );\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n\t\n\tfunction getSitesFromOwa( $sites ) {\n\t\t\n\t\t$params = ['owa_module' => 'base', 'owa_version' => 'v1', 'owa_do' => 'sites' ];\n\t\t\n\t\t$sites = $this->owaRemoteGet( $params );\n\t\t\t\n\t\t$list = [];\n\t\t\n\t\tforeach ( $sites->data as $site) {\n\t\t\t\n\t\t\t$list[ $site->properties->site_id->value ] = ['label' => sprintf('%s (%s)', $site->properties->site_id->value, $site->properties->domain->value), 'siteId' => $site->properties->site_id->value ];\n\t\t}\n\t\t\n\t\treturn $list;\n\t\t\n\t}\n\t\n\tfunction isSiteIdValid( $site_id ) {\n\t\t\n\t\t$sites = $this->getSitesFromOwa();\n\t\tself::debug( $sites );\n\t}\n\t\n\t/////////////////////// Methods that require OWA on server ////////////////////////////\n\t\n\t// gets an instance of your OWA as a php object\n\tpublic static function getOwaInstance() {\n\t\t\n\t\tstatic $owa;\n\t\t\n\t\tif( empty( $owa ) ) {\n\t\t\t\t\n\t\t\trequire_once('owa_env.php');\n\t\t\trequire_once(OWA_BASE_CLASSES_DIR.'owa_php.php');\n\t\t\t\n\t\t\t// create owa instance w/ config\n\t\t\t$owa = new owa_php();\n\t\t\t\n\t\t\tif ( $owa->isOwaInstalled() ) {\n\t\t\t\n\t\t\t\t$owa->setSiteId( self::generateSiteId() );\n\n\t\t\t\t$owa->setSetting( 'base', 'is_embedded', true );\n\t\t\t\n\t\t\t\t$current_user = wp_get_current_user();\n\t\t\t\towa_coreAPI::debug( 'WordPress login: '.$current_user->user_login );\n\t\t\t\tif ( $current_user->user_login ) {\n\t\t\t\t\t\n\t\t\t\t\t// check to see if user exists in OWA.\n\t\t\t\t\t$user = owa_coreApi::entityFactory('base.user');\n\t\t\t\t\t$user->load($current_user->user_login, 'user_id');\n\t\t\t\t\t\n\t\t\t\t\tif (! $user->get('id') ) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t// if not create it\n\t\t\t\t\t\t$user->createNewUser(\n\t\t\t\t\t\t\t$current_user->user_login,\n\t\t\t\t\t\t\towa_wp_plugin::translateAuthRole( $current_user->roles ),\n\t\t\t\t\t\t\t$password = '',\n\t\t\t\t\t\t\t$current_user->user_email,\n\t\t\t\t\t\t\t$current_user->first_name.' '.$current_user->last_name\n\t\t\t\t\t\t);\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\n\t\t\t\t\t\t// or load from db\n\t\t\t\t\t\towa_coreAPI::debug('loading OWA current user');\n\t\t\t\t\t\t$cu = owa_coreAPI::getCurrentUser();\n\t\t\t\t\t\t$cu->load( $current_user->user_login );\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $owa;\n\t}\n\t\n\t\n\t\n\tpublic static function generateSiteId() {\n\t\t\n\t\treturn md5( get_option( 'siteurl' ) );\n\t}\n\t\n\t/**\n\t * Callback for reporting dashboard/pages\n\t */\n\tfunction pageController( $params = array() ) {\n\t\t\n\t\t$url = $this->getOption('owaEndpoint');\n\t\t\n\t\tif ( $this->isOwaAvailable() ) {\n\t\t\t\n\t\t\t// load OWA\n\t\t\t$owa = $this->getOwaInstance();\n\t\t\t// get current user ID to see if it's the admin user\n\t\t\t$cu = owa_coreAPI::getCurrentUser();\n\t\t\t$user_id = $cu->getUserData('user_id');\n\t\t\t\n\t\t\tif ( $user_id ) {\n\t\t\t\t\n\t\t\t\t$email = $cu->getUserData('email_address');\n\t\t\t\t$password = $cu->getUserData('password');\n\t\t\t\t$temp_passkey = $cu->getUserData('temp_passkey');\n\t\t\t\t$reset_url = $url . sprintf('?%sdo=base.usersPasswordEntry&%sk=%s&owa_is_embedded=1', $owa->getSetting('base', 'ns'), $owa->getSetting('base', 'ns'), $temp_passkey);\n\t\t\t\t// display a bug that lets the user know what their OWA user name and email address are so they can login.\n\t\t\t\techo sprintf('<div class=\"notice notice-info is-dismissible\"><p>Your OWA user id is: <B><em>%s</em></b>. Password reset email is <b><em>%s</em></b>. You may need to <a href=\"%s\">reset your OWA password here</a> to login.</p></div><BR>', $user_id, $email, $reset_url);\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t// insert iframe of OWA endpoint\t\t\t\t\t\t\n\t\techo sprintf('<iframe id=\"owa_wp_analytics\" src=\"%s\" style=\"display: block; width: 100%%; height:100vh;border: none; overflow-y: hidden; overflow-x: hidden;\" height=\"100%%\" >', $url);\n\t}\n\t\t\n\t/**\n\t * Translate WordPress to OWA Authentication Roles\n\t *\n\t * @param $roles\tarray\tarray of WP roles\n\t * @return\tstring\n\t */\n\tstatic function translateAuthRole( $roles ) {\n\t\t\n\t\tif (!empty($roles)) {\n\t\t\n\t\t\tif (in_array('administrator', $roles)) {\n\t\t\t\t$owa_role = 'admin';\n\t\t\t} elseif (in_array('editor', $roles)) {\n\t\t\t\t$owa_role = 'viewer';\n\t\t\t} elseif (in_array('author', $roles)) {\n\t\t\t\t$owa_role = 'viewer';\n\t\t\t} elseif (in_array('contributor', $roles)) {\n\t\t\t\t$owa_role = 'viewer';\n\t\t\t} elseif (in_array('subscriber', $roles)) {\n\t\t\t\t$owa_role = 'everyone';\n\t\t\t} else {\n\t\t\t\t$owa_role = 'everyone';\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\t$owa_role = 'everyone';\n\t\t}\n\t\t\n\t\treturn $owa_role;\n\t}\n\n}\n\nclass owa_wp_module {\n\t\n\tpublic $module_name;\n\tpublic $controllers;\n\tpublic $entities;\n\tpublic $views;\n\tpublic $ns;\n\tpublic $package_name;\n\tpublic $options;\n\tpublic $settings;\n\tpublic $settings_pages;\n\t\n\tpublic function __construct( $params = array() ) {\n\t\n\t\t$this->controllers = array();\n\t\t$this->entities\t= array();\n\t\t$this->views = array();\n\t\t$this->settings_pages = array();\n\t\t\n\t\t\n\t\t// set module name\n\t\tif ( array_key_exists( 'module_name', $params ) ) {\n\t\t\t\n\t\t\t$this->module_name = $params['module_name'];\n\t\t}\n\t\t\n\t\t// set package name\n\t\tif ( array_key_exists( 'package_name', $params ) ) {\n\t\t\t\n\t\t\t$this->package_name = $params['package_name'];\n\t\t}\n\t\t\n\t\t// set namespace\n\t\tif ( array_key_exists( 'ns', $params ) ) {\n\t\t\t\n\t\t\t$this->ns = $params['ns'];\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t// kick off the init sequence for each module during Wordpress 'init' hook.\n\t\tadd_action('init', array( $this, 'init'), 15, 0 );\n\t}\n\t\n\tpublic function init() {\n\t\n\t\t$this->_init();\n\t\t// load public hooks\n\t\t$this->definePublicHooks();\n\t\t// load admin hooks during WordPress 'admin_init' hook\n\t\n\t\towa_wp_util::addAction( 'admin_init', array( $this, 'defineAdminHooks') );\n\t}\n\t\n\t\t/**\n\t * Inititalizes Settings Page Objects\n\t *\n\t */\n\tpublic function initSettingsPage() {\n\t\t\n\t\t// check for prior initialization as I'm not sure if the WP hook admin_init or admin_menu\n\t\t// gets called first.\n\t\tif ( ! $this->settings_pages ) {\t\t\t\n\t\t\t\n\t\t\t$sp_params = array(\n\t\t\t\n\t\t\t\t'ns'\t\t\t\t=> $this->ns,\n\t\t\t\t'package'\t\t\t=> $this->package_name,\n\t\t\t\t'module'\t\t\t=> $this->module_name\n\t\t\t);\n\t\t\t\n\t\t\t$pages = $this->registerSettingsPages();\n\t\t\t\n\t\t\tif ( $pages ) {\n\t\t\t\t\n\t\t\t\tforeach ( $pages as $k => $params ) {\n\t\t\t\t\t\n\t\t\t\t\t$new_params = array_merge($params, $sp_params);\n\t\t\t\t\t$new_params['name'] = $k;\n\t\t\t\t\t\n\t\t\t\t\t$this->settings_pages[ $k ] = new owa_wp_settingsPage( $new_params, $this->options );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Callback function for WordPress admin_menu hook\n\t *\n\t * Hooks create Menu Pages.\n\t */\n\tpublic function addSettingsPages() {\n\t\n\t\t$this->initSettingsPage();\n\t\t\n\t\t$pages = $this->settings_pages;\n\t\t\n\t\tif ( $pages ) {\n\t\t\t\n\t\t\tforeach ( $pages as $k => $page ) {\n\t\t\t\t\n\t\t\t\t$menu_slug = '';\n\t\t\t\t\n\t\t\t\t$menu_slug = $page->get('menu_slug');\n\t\t\t\t\n\t\t\t\t// check for custom callback function.\n\t\t\t\tif ( $page->get( 'render_callback' ) ) {\n\t\t\t\t\t\n\t\t\t\t\t$callback = $page->get( 'render_callback' );\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\t$callback = array( $page, 'renderPage' );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ( $page->get('is_top_level') ) {\n\t\t\t\t\t\n\t\t\t\t\tadd_menu_page(\n\t\t\t\t\t\t$page->get('title'),\n\t\t\t\t\t\t$page->get('top_level_menu_title'),\n\t\t\t\t\t\t$page->get('required_capability'),\n\t\t\t\t\t\t$page->get('parent_slug'),\n\t\t\t\t\t\t$callback,\n\t\t\t\t\t\t$page->get('menu-icon'),\n\t\t\t\t\t\t2\n\t\t\t\t\t);\n\t\t\t\t\t\n\t\t\t\t\t$menu_slug = $page->get('parent_slug');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// register the page with WordPress admin navigation.\n\t\t\t\tadd_submenu_page(\n\t\t\t\t\t$page->get('parent_slug'),\n\t\t\t\t\t$page->get('title'),\n\t\t\t\t\t$page->get('menu_title'),\n\t\t\t\t\t$page->get('required_capability'),\n\t\t\t\t\t$menu_slug,\n\t\t\t\t\t$callback\n\t\t\t\t);\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic function processAdminConfig() {\n\t\t\n\t\t$config = $this->registerOptions();\n\t\t\n\t\tif ( $config ) {\n\t\t\n\t\t\tforeach ( $config as $k => $v ) {\n\t\t\t\t\n\t\t\t\t// register setting field with module\n\t\t\t\tif ( array_key_exists( 'field', $v ) ) {\n\t\t\t\t\t// check for page_name, if not set it as 'default'\n\t\t\t\t\tif ( ! array_key_exists( 'page_name', $v['field'] ) ) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t$v['field']['page_name'] = 'default';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// add field to settings array\n\t\t\t\t\t$this->settings[ $v['field']['page_name'] ][ $k ] = $v[ 'field' ];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// register default option value with module\n\t\t\t\tif (array_key_exists( 'default_value', $v ) ) {\n\t\t\t\t\n\t\t\t\t\t$this->options[ $k ] = $v[ 'default_value' ];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// hook settings fields into WordPress\t\t\n\t\t\tif ( $this->settings ) {\n\t\t\t\t\n\t\t\t\t// we need ot init the settings page objects here\n\t\t\t\t// as they are needed by two the callbacks to seperate WordPress Hooks admin_init and admin_menu.\n\t\t\t\t//$this->initSettingsPage();\n\t\t\t\t\n\t\t\t\tadd_action( 'admin_init', array($this, 'registerSettings'),10,0);\n\t\t\t\t// regsiter the settings pages with WordPress\n\t\t\t\tadd_action( 'admin_menu', array($this, 'addSettingsPages'), 11,0);\n\t\t\n\t\t\t}\t\t\t\t\n\t\t}\n\t}\n\t\n\tpublic function registerAdminConfig() {\n\t\t\n\t\treturn false;\n\t}\n\t\n\tpublic function registerSettings() {\n\t\t\t\t\t\n\t\t// process options\n\t\t\n\t\t$this->initSettingsPage();\n\t\t\n\t\t//add_action( 'admin_menu', array($this, 'addSettingsPages'), 10, 0 );\n\t\t\n\t\t// iterate throught group of settings fields.\n\t\t\n\t\tforeach ( $this->settings as $group_name => $group ) {\n\t\t\n\t\t\t// iterate throug thhe fields in the group\n\t\t\tforeach ( $group as $k => $v ) {\n\t\t\t\t\n\t\t\t\t// register each field with WordPress\n\t\t\t\t$this->settings_pages[ $group_name ]->registerField( $k, $v );\n\t\t\t}\n\t\t\t\n\t\t\t// register the group\n\t\t\t$this->settings_pages[ $group_name ]->registerSettings( $group_name );\n\t\t\t\n\t\t\t// register the sections\n\t\t\t\n\t\t\t$sections = $this->settings_pages[ $group_name ]->get('sections');\n\t\t\t\n\t\t\tif ( $sections ) {\n\t\t\t\t\n\t\t\t\tforeach ( $sections as $section_name => $section ) {\n\t\t\t\t\n\t\t\t\t\t$this->settings_pages[ $group_name ]->registerSection( $section );\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Get Options Key\n\t *\n\t * Gets the key under which options for the module should be persisted.\n\t *\n\t * @return string\n\t */\n\tpublic function getOptionsKey() {\n\t\t\n\t\t//return owa_wp_util::getModuleOptionKey( $this->package_name, $this->module_name );\n\t}\n\t\n\tpublic function registerController( $action_name, $class, $path ) {\n\t\t\n\t\t$this->controllers[ $action_name ] = array(\n\t\t\t'class'\t\t\t=> $class,\n\t\t\t'path'\t\t\t=> $path\n\t\t);\n\t}\n\t\n\tpublic function registerControllers( $controllers = array() ) {\n\t\t\n\t\treturn $controllers;\n\t}\n\t\n\tpublic function loadDependancies() {\n\t\t\t\n\t\treturn false;\n\t}\n\t\n\tpublic function registerOptions() {\n\t\t\n\t\treturn false;\n\t}\n\t\n\tpublic function setDefaultOptions( $options ) {\n\t\t\n\t\t//$options[ $this->getOptionsKey() ] = $this->options;\n\t\treturn $this->options;\n\t\t//return $options;\n\t}\n\t\n\t/**\n\t * Register all of the hooks related to the module\n\t * of the plugin.\n\t *\n\t * @since    1.0.0\n\t * @access   private\n\t */\n\tpublic function defineAdminHooks() {\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Register all of the hooks related to the public-facing functionality\n\t * of the plugin.\n\t *\n\t * @since    1.0.0\n\t * @access   private\n\t */\n\tpublic function definePublicHooks() {\n\t\t\n\t\treturn false;\n\t}\n}\n\nclass owa_wp_util {\n\n\tpublic static function getTaxonomies( $args ) {\n\t\n\t\treturn get_taxonomies( $args );\n\t}\n\t\n\tpublic static function getPostTypes( $args, $type = 'names', $operator = 'and') {\n\t\t\n\t\treturn get_post_types( $args, $type, $operator );\n\t}\n\t\n\tpublic static function getRemoteUrl( $url ) {\n\t\t\n\t\treturn wp_remote_get ( urlencode ( $url ) );\n\t}\n\t\n\tpublic static function getModuleOptionKey( $package_name, $module_name ) {\n\t\t\n\t\treturn sprintf( '%s_%s_%s', 'owa_wp', $package_name, $module_name );\n\t}\n\t\n\tpublic static function setDefaultParams( $defaults, $params, $class_name = '' ) {\n\t\t\n\t\t$newparams = $defaults;\n\t\t\n\t\tforeach ( $params as $k => $v ) {\n\t\t\t\n\t\t\t$newparams[$k] = $v;\n\t\t}\n\t\t\n\t\treturn $newparams;\n\t}\n\t\n\tpublic static function addFilter( $hook, $callback, $priority = '', $accepted_args = '' ) {\n\t\t\n\t\treturn add_filter( $hook, $callback, $priority, $accepted_args );\n\t}\n\t\n\tpublic static function addAction( $hook, $callback, $priority = '', $accepted_args = '' ) {\n\t\t\n\t\treturn add_action( $hook, $callback, $priority, $accepted_args );\n\t}\n\t\n\tpublic static function escapeOutput( $string ) {\n\t\t\n\t\treturn esc_html( $string );\n\t}\n\t\n\t//\n\t // Outputs Localized String\n\t //\n\t //\n\tpublic static function out( $string ) {\n\t\t\n\t\techo ( owa_wp_util::escapeOutput ( $string ) );\n\t}\n\t\n\t//\n\t // Localize String\n\t //\n\t //\n\tpublic static function localize( $string ) {\n\t\t\n\t\treturn $string;\n\t}\n\t\n\t//\n\t // Flushes WordPress rewrite rules.\n\t //\n\t //\n\tpublic static function flushRewriteRules() {\n\t\t\n\t\tglobal $wp_rewrite;\n\t\t$wp_rewrite->flush_rules();\n\t}\n\t\n\t//\n\t // Get a direct link to install or update a plugin\n\t //\n\t //\n\tpublic static function getWpPluginInstallUrl( $slug, $action = 'install-plugin' ) {\n\t\t\n\t\treturn wp_nonce_url(\n\t\t    add_query_arg(\n\t\t        array(\n\t\t            'action' => $action,\n\t\t            'plugin' => $slug\n\t\t        ),\n\t\t        admin_url( 'update.php' )\n\t\t    ),\n\t\t    $action . '_' . $slug\n\t\t);\n\t}\n}\n\n/////// settings class ///////////\n\nclass owa_wp_settingsPage {\n\t\n\tpublic $page_slug;\n\t\n\tpublic $package;\n\t\n\tpublic $module;\n\t\n\tpublic $ns;\n\t\n\tpublic $name;\n\t\n\tpublic $option_group_name; // owa-package-module-groupname\n\t\n\tpublic $fields;\n\t\n\tpublic $properties;\n\t\n\tpublic $options;\n\t\n\tpublic function __construct( $params, $options ) {\n\t\t\n\n\t\t$defaults = array(\n\t\t\t\n\t\t\t'ns'\t\t\t\t\t=> 'owa_wp',\n\t\t\t'package'\t\t\t\t=> '',\n\t\t\t'module'\t\t\t\t=> '',\n\t\t\t'page_slug'\t\t\t\t=> '',\n\t\t\t'name'\t\t\t\t\t=> '',\n\t\t\t'title'\t\t\t\t\t=> 'Placeholder Title',\n\t\t\t'description'\t\t\t=> 'Placeholder description.',\n\t\t\t'sections'\t\t\t\t=> array(),\n\t\t\t'required_capability'\t=> 'manage_options'\t\n\t\t\n\t\t);\n\t\t\n\t\t$params = owa_wp_util::setDefaultParams( $defaults, $params );\n\t\t$this->options = $options;\n\t\t$this->ns \t\t\t\t= $params['ns'];\n\t\t$this->package \t\t\t= $params['package'];\n\t\t$this->module \t\t\t= $params['module'];\n\t\t$this->name \t\t\t= $params['name'];\n\t\n\t\tif ( ! $params['page_slug'] ) {\n\t\t\t\t\t\t\n\t\t\t$params['page_slug'] = $this->generatePageSlug();\t\t\n\t\t}\n\t\t\n\t\t$this->page_slug = $params['page_slug'];\n\t\t\n\t\t$this->default_options = array();\n\t\t\n\t\t$this->properties = $params;\n\t\t\t\t\n\t\towa_wp_util::addFilter('owa_wp_settings_field_types', array( $this, 'registerFieldTypes'), 10, 1);\n\t\t\n\t\t// add error display callback.\n\t\tadd_action( 'admin_notices', array( $this, 'displayErrorNotices' ) );\n\t}\n\t\n\tpublic function registerFieldTypes( $types = array() ) {\n\t\t\n\t\t\n\t\t$types['text'] = 'owa_wp_settings_field_text';\n\t\t\n\t\t$types['boolean'] = 'owa_wp_settings_field_boolean';\n\t\t\t\n\t\t$types['integer'] = 'owa_wp_settings_field_integer';\n\t\t\n\t\t$types['boolean_array'] = 'owa_wp_settings_field_booleanarray';\n\t\t\n\t\t$types['on_off_array'] = 'owa_wp_settings_field_onoffarray';\n\t\t\n\t\t$types['comma_separated_list'] = 'owa_wp_settings_field_commaseparatedlist';\n\t\t\n\t\t$types['select'] = 'owa_wp_settings_field_select';\n\t\t\n\t\t$types['textarea'] = 'owa_wp_settings_field_textarea';\n\t\t\n\t\t$types['url'] = 'owa_wp_settings_field_url';\n\n\t\t\n\t\treturn $types;\n\t}\n\t\n\tpublic function get( $key ) {\n\t\t\n\t\tif (array_key_exists( $key, $this->properties ) ) {\n\t\t\t\n\t\t\treturn $this->properties[ $key ];\n\t\t}\n\t}\n\t\n\tpublic function generatePageSlug() {\n\t\t\n\t\treturn sprintf( '%s-%s', $this->ns, $this->name );\n\t}\n\t\n\tpublic function registerSettings() {\n\n\t\t\tregister_setting( $this->getOptionGroupName(), 'owa_wp', array( $this, 'validateAndSanitize' ) );\n\t}\n\t\n\tpublic function validateAndSanitize( $options ) {\n\t\n\t\t$sanitized = '';\n\t\t\n\t\tif ( is_array( $options ) ) {\t\n\t\t\t\n\t\t\t$sanitized = array();\n\t\t\t\n\t\t\tforeach ( $this->fields as $k => $f ) {\n\t\t\t\t\n\t\t\t\t// if the option is present\n\t\t\t\tif ( array_key_exists( $k, $options ) ) {\t\n\t\t\t\t\t\n\t\t\t\t\t$value = $options[ $k ] ;\n\t\t\t\t\t\n\t\t\t\t\t// check if value is required.\n\t\t\t\t\tif ( ! $value && $f->isRequired() ) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t$f->addError( $k, $f->get('label_for'). ' field is required' );\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// sanitize value\n\t\t\t\t\t$value = $f->sanitize( $options[ $k ] );\n\t\t\t\t\t\n\t\t\t\t\t// validate value. Could be empty at this point.\n\t\t\t\t\tif ( $f->isValid( $value ) ) {\n\t\t\t\t\t\t//sanitize\n\t\t\t\t\t\t$sanitized[ $k ] =  $value;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\n\t\t\t\t\t// set a false value in case it's a boollean type\n\t\t\t\t\t$sanitized[ $k ] = $f->setFalseValue();\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t}\n\t\t\n\t\treturn $sanitized;\n\t}\n\t\n\tpublic function getOptionGroupName() {\n\t\t\n\t\treturn sprintf( '%s_group', $this->get('page_slug') );\n\t}\n\t\n\t//\n\t //Register a Settings Section with WordPress.\n\t //\n\t //\n\tpublic function registerSection( $params ) {\n\t\t\n\t\t// todo: add in a class type lookup here to use a custom section object\n\t\t// so that we can do custom rendering of section HTML if we\n\t\t// ever need to.\n\t\t// $section = somemaplookup( $params['type']);\n\t\t\n\t\t$section = new owa_wp_settings_section($params);\n\t\t\n\t\t// Store the section object in case we need it later or want to inspect\n\t\t$this->sections[ $section->get( 'id' ) ] = $section;\n\t\t\n\t\t// register the section with WordPress\n\t\tadd_settings_section( $section->get('id'), $section->get('title'), $section->get('callback'), $this->page_slug );\n\t}\n\t\n\tpublic function echoHtml( $html ) {\n\t\t\n\t\techo $html;\n\t}\n\t\n\tpublic function registerField( $key, $params ) {\n\t\t\n\t\t// Add to params array\n\t\t// We need to pack params because ultimately add_settings_field\n\t\t// can only pass an array to the callback function that renders\n\t\t// the field. Sux. wish it would accept an object...\n\t\t\t\n\t\t$params['id'] = $key;\n\t\t$params['package'] = $this->package;\n\t\t$params['module'] = $this->module;\n\t\t\n\t\t// make field object based on type\n\t\t\n\t\t$types = apply_filters( 'owa_wp_settings_field_types', array() );\n\t\t\n\t\t$field = new $types[ $params['type'] ]($params, $this->options);\n\t\t\n\t\tif ( $field ) {\n\t\t\t// park this field object for use later by validation and sanitization \t\t\t\n\t\t\t$this->fields[ $key ] = $field;\n\t\t\t\t\n\t\t\t// register label formatter callback\n\t\t\t$callback = $field->get( 'value_label_callback' );\n\t\t\tif ( $callback ) {\n\t\t\t\towa_wp_util::addFilter( $field->get( 'id' ) . '_field_value_label', $callback, 10, 1 );\n\t\t\t}\n\t\t\t// add setting to wordpress settings api\n\t\t\tadd_settings_field(\n\t\t\t\t$key,\n\t\t\t\t$field->get( 'title' ),\n\t\t\t\tarray( $field, 'render'),\n\t\t\t\t$this->page_slug,\n\t\t\t\t$field->get( 'section' ),\n\t\t\t\t$field->getProperties()\n\t\t\t);\n\t\t} else {\n\t\t\t\n\t\t\terror_log(\"No field of type {$params['type']} registered.\");\n\t\t}\n\t}\n\t\t\n\tpublic function renderPage() {\n\t\t\n\t\twp_enqueue_script('jquery','','','',true);\n\t\twp_enqueue_script('jquery-ui-core','','','',true);\n\t\twp_enqueue_script('jquery-ui-tabs','','','',true);\n\t\t//add_settings_field( $id, $title, $callback, $page, $section = 'default', $args = array() )\n\t\t\n\t\tif ( ! current_user_can( $this->get('required_capability') ) ) {\n    \n        \twp_die(__( 'You do not have sufficient permissions to access this page!' ) );\n\t\t}\n    \n\t\techo '<div class=\"wrap\">';\n\t\techo\t'<div class=\"icon32\" id=\"icon-options-general\"><br></div>';\n\t\techo\tsprintf('<h2>%s</h2>', $this->get( 'title') );\n\t\techo\t$this->get('description');\n\t\t\n\t\tif ( $this->fields ) {\n\t\t\tsettings_errors();\n\t\t\techo\tsprintf('<form id=%s\" action=\"options.php\" method=\"post\">', $this->page_slug);\n\t\t\tsettings_fields( $this->getOptionGroupName() );\n\t\t\t//do_settings_sections( $this->get('page_slug') );\n\t\t\t$this->doTabbedSettingsSections( $this->get('page_slug') );\n\t\t\techo\t'<p class=\"submit\">';\n\t\t\techo\tsprintf('<input name=\"Submit\" type=\"submit\" class=\"button-primary\" value=\"%s\" />', 'Save Changes' );\n\t\t\techo\t'</p>';\n\t\t\techo\t'</form>';\n\t\t}\n\n\t\techo    '</div>';\n\t}\n\t\n\t///\n\t // Outputs Settings Sections and Fields\n\t //\n\t // Sadly this is a replacement for WP's do_settings_sections template function\n\t // because it doesn't allows for filtered output which we need for adding tabs.\n\t //\n\t // var $page\tstring\tname of the settings page.\n\t //\n\tpublic function doTabbedSettingsSections( $page ) {\n\t\t\n\t\tglobal $wp_settings_sections, $wp_settings_fields;\n \n\t    if ( ! isset( $wp_settings_sections[$page] ) ) {\n\t    \n\t        return;\n\t\t}\n\t\t\n\t\techo '<div class=\"owa_wp_admin_tabs\">';\n\t\techo '<h2 class=\"nav-tab-wrapper\">';\n\t\techo '<ul style=\"padding:0px;margin:0px;\">';\n\t\tforeach ( (array) $wp_settings_sections[$page] as $section ) {\n\t\t\t\n\t\t\techo  sprintf('<li class=\"nav-tab\" style=\"\"><a href=\"#%s\" class=\"%s\">%s</a></li>', $section['id'], '', $section['title']);\n\t\t\t\n\t\t}\n\t\techo '</ul>';\n\t\techo '</h2>';\n\t\t\n\t    foreach ( (array) $wp_settings_sections[$page] as $section ) {\n\t    \t\n\t    \techo sprintf( '<div id=\"%s\">', $section['id'] );\n\t        if ( $section['title'] )\n\t            echo \"<h3>{$section['title']}</h3>\\n\";\n\t \n\t        if ( $section['callback'] )\n\t            call_user_func( $section['callback'], $section );\n\t \n\t        if ( ! isset( $wp_settings_fields ) || !isset( $wp_settings_fields[$page] ) || !isset( $wp_settings_fields[$page][$section['id']] ) )\n\t            continue;\n\t        echo '<table class=\"form-table\">';\n\t        do_settings_fields( $page, $section['id'] );\n\t        echo '</table>';\n\t        echo '</div>';\n\t    }\n\t    echo '</div>';\n\t    \n\t    echo'   <script>\n\t\t\t\t\tjQuery(function() {\n\t\t\t\t\t\n\t\t\t\t\t\tjQuery( \".owa_wp_admin_tabs\" ).tabs({\n\t\t\t\t\t\t\t \n\t\t\t\t\t\t\tcreate: function(event, ui) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// CSS hackery to match up with WP built in tab styles.\n\t\t\t\t\t\t\t\tjQuery(this).find(\"li a\").css({\"text-decoration\": \"none\", color: \"grey\"});\n\t\t\t\t\t\t\t\tui.tab.find(\"a\").css({color: \"black\"});\n\t\t\t\t\t\t\t\tui.tab.addClass(\"nav-tab-active\");\n\t\t\t\t\t\t\t\t// properly set the form action to correspond to active tab\n\t\t\t\t\t\t\t\t// in case it is resubmitted\n\t\t\t\t\t\t\t\ttarget = jQuery(\".owa_wp_admin_tabs\").parent().attr(\"action\");\n\t\t\t\t\t\t\t\tnew_target = target + \"\" + window.location.hash;\n\t\t\t\t\t\t\t\tjQuery(\".owa_wp_admin_tabs\").parent().attr(\"action\", new_target);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tactivate: function(event, ui) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// CSS hackery to match up with WP built in tab styles.\n\t\t\t\t\t\t\t\tui.oldTab.removeClass(\"nav-tab-active\");\n\t\t\t\t\t\t\t\tui.oldTab.find(\"a\").css({color: \"grey\"});\n\t\t\t\t\t\t\t\tui.newTab.addClass(\"nav-tab-active\");\n\t\t\t\t\t\t\t\tui.newTab.find(\"a\").css({color: \"black\"});\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// get target tab nav link.\n\t\t\t\t\t\t\t\tnew_tab_anchor = ui.newTab.find(\"a\").attr(\"href\");\n\t\t\t\t\t\t\t\t// set the url anchor\n\t\t\t\t\t\t\t\twindow.location.hash = new_tab_anchor;\n\t\t\t\t\t\t\t\t// get current action attr of the form\n\t\t\t\t\t\t\t\ttarget = jQuery(\".owa_wp_admin_tabs\").parent().attr(\"action\");\n\t\t\t\t\t\t\t\t// clear any existing hash from form target\n\t\t\t\t\t\t\t\tif ( target.indexOf(\"#\") > -1 ) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tpieces = target.split(\"#\");\n\t\t\t\t\t\t\t\t\tnew_target = pieces[0] + \"\" + new_tab_anchor;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tnew_target = target + \"\" + new_tab_anchor;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// add the anchor hash to the form action so that\n\t\t\t\t\t\t\t\t// the user returns to the correct tab after submit\n\t\t\t\t\t\t\t\tjQuery(\".owa_wp_admin_tabs\").parent().attr(\"action\", new_target);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\n\t\t\t\t</script>';\n\t}\n\t\n\tpublic function displayErrorNotices() {\n\t\n    \tsettings_errors( $this->page_slug );\n\t}\n}\n\nclass owa_wp_settings_field {\n\t\n\tpublic $id;\n\t\n\tpublic $package;\n\t\n\tpublic $module;\n\t\n\tpublic $properties;\n\t\n\tpublic $options;\n\t\n\t//\n\t // name of the validator callback to be used\n\t //\n\tpublic $validator_callback;\n\t\n\t//\n\t // name of the santizer callback to be used\n\t //\n\tpublic $santizer_callback;\n\t\n\tpublic function __construct( $params = '', $options ) {\n\t\t\n\t\t$defaults = array(\n\t\t\t\n\t\t\t'title'\t\t\t=> 'Sample Title',\n\t\t\t'type'\t\t\t=> 'text',\n\t\t\t'section'\t\t=> '',\n\t\t\t'default_value'\t=> '',\n\t\t\t'dom_id'\t\t=> '',\n\t\t\t'name'\t\t\t=> '',\n\t\t\t'id'\t\t\t=> '',\n\t\t\t'package'\t\t=> '',\n\t\t\t'module'\t\t=> '',\n\t\t\t'required'\t\t=> false,\n\t\t\t'label_for'\t\t=> ''\n\t\t\t\n\t\t);\n\t\t\n\t\t$params = owa_wp_util::setDefaultParams( $defaults, $params );\n\t\t\n\t\t$this->options = $options;\n\t\t\n\t\t$this->package \t\t= $params['package'];\n\t\t$this->module\t\t= $params['module'];\n\t\t$this->id \t\t\t= $params['id'];\n\t\t$this->properties \t= $params;\n\t\t\n\t\t$this->properties['name'] = $this->setName();\n\t\t$this->properties['dom_id'] = $this->setDomId();\n\t}\n\t\n\tpublic function get( $key ) {\n\t\t\n\t\tif (array_key_exists( $key, $this->properties) ) {\n\t\t\t\n\t\t\treturn $this->properties[ $key ];\n\t\t}\n\t}\n\t\n\tpublic function getProperties() {\n\t\t\n\t\treturn $this->properties;\n\t}\n\t\n\tpublic function setName( ) {\n\t\t\n\t\treturn sprintf(\n\t\t\t'%s[%s]',\n\t\t\t'owa_wp',\n\t\t\t$this->id\n\t\t);\n\t}\n\t\n\tpublic function render( $field ) {\n\t\t\n\t\treturn false;\n\t}\t\n\t\n\tpublic function setDomId( ) {\n\t\t\n\t\treturn sprintf(\n\t\t\t'%s_%s',\n\t\t\t'owa_wp',\n\t\t\t$this->id\n\t\t);\n\t}\t\n\t\n\tpublic function sanitize( $value ) {\n\t\t\n\t\treturn $value;\n\t}\n\t\n\tpublic function isValid( $value ) {\n\t\t\n\t\treturn true;\n\t}\n\t\t\n\tpublic function addError( $key, $message ) {\n\t\t\n\t\tadd_settings_error(\n\t\t\t$this->get( 'id' ),\n\t\t\t$key,\n\t\t\t$message,\n\t\t\t'error'\n\t\t);\n\t\t\n\t}\n\t\n\tpublic function setFalseValue() {\n\t\t\n\t\treturn 0;\n\t}\n\t\n\tpublic function isRequired() {\n\t\t\n\t\treturn $this->get('required');\n\t}\n\t\n\tpublic function getErrorMessage() {\n\t\t\n\t\treturn $this->get('error_message');\n\t}\n}\n\nclass owa_wp_settings_field_text extends owa_wp_settings_field {\n\n\tpublic function render( $attrs ) {\n\t//print_r();\n\t\t$value = $this->options[ $attrs['id'] ];\n\t\t\n\t\tif ( ! $value ) {\n\t\t\t//print_r($this->properties);\n\t\t\t//$value = $this->options[] ;\n\t\t}\n\t\t\n\t\tif ( array_key_exists( 'length', $attrs ) ) {\n\t\t\t\n\t\t\t$size = $attrs['length'];\t\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\t$size = 30;\n\t\t}\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\techo sprintf(\n\t\t\t'<input name=\"%s\" id=\"%s\" value=\"%s\" type=\"text\" size=\"%s\" /> ',\n\t\t\tesc_attr( $attrs['name'] ),\n\t\t\tesc_attr( $attrs['dom_id'] ),\n\t\t\tesc_attr( $value ),\n\t\t\t$size\n\t\t);\n\t\t\n\t\techo sprintf('<p class=\"description\">%s</p>', $attrs['description']);\n\t}\t\n\t\n\tpublic function sanitize( $value ) {\n\t\t\n\t\treturn trim($value);\n\t}\n}\n\nclass owa_wp_settings_field_url extends owa_wp_settings_field {\n\n\tpublic function render( $attrs ) {\n\t\n\t\t$value = $this->options[ $attrs['id'] ];\n\t\t\t\t\n\t\t$size = $attrs['length'];\n\t\t\n\t\tif ( ! $size ) {\n\t\t\t\n\t\t\t$size = 60;\n\t\t}\n\t\t\n\t\techo sprintf(\n\t\t\t'<input name=\"%s\" id=\"%s\" value=\"%s\" type=\"text\" size=\"%s\" /> ',\n\t\t\tesc_attr( $attrs['name'] ),\n\t\t\tesc_attr( $attrs['dom_id'] ),\n\t\t\tesc_attr( $value ),\n\t\t\t$size\n\t\t);\n\t\t\n\t\techo sprintf('<p class=\"description\">%s</p>', $attrs['description']);\n\t}\t\n\t\n\tpublic function sanitize( $value ) {\n\t\t\n\t\t$value = trim( $value );\n\t\t\n\t\t$value = $url = filter_var( $value, FILTER_SANITIZE_URL );\n\n/*\n\t\tif ( ! strpos( $value, '/', -1 ) ) {\n\t\t\t\n\t\t\t$value .= '/';\n\t\t}\n*/\n\t\t\t\n\t\treturn $value;\n\t}\n\t\n\tpublic function isValid( $value ) {\n\t\t\n\t\n\t\tif ( substr( $value, -4 ) === '.php' ) {\n\t\t\t\n\t\t\t$this->addError(\n\t\t    \t$this->get('dom_id'),\n\t\t\t\tsprintf(\n\t\t\t\t\t'%s %s',\n\t\t\t\t\t$this->get( 'label_for' ),\n\t\t\t\t\towa_wp_util::localize( 'URL should be the base directory of your OWA instance, not a file endpoint.' ) ) );\n\t\t\t\t\t\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif ( ! substr( $value, 0, 4 ) === \"http\" ) {\n\t\t\t\n\t\t\t$this->addError(\n\t    \t$this->get('dom_id'),\n\t\t\tsprintf(\n\t\t\t\t'%s %s',\n\t\t\t\t$this->get( 'label_for' ),\n\t\t\t\towa_wp_util::localize( 'URL scheme required. (i.e. http:// or https://)' ) ) );\n\t\t\t\n\t\t\treturn false;\n\t\t}\n\t\t\t\n\t\tif ( filter_var( $value, FILTER_VALIDATE_URL ) ) {\n\t\t\t\n\t\t\treturn true;\t\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\t// not a valid url\n\t\t\t$this->addError(\n\t\t\t    \t$this->get('dom_id'),\n\t\t\t\t\tsprintf(\n\t\t\t\t\t\t'%s %s',\n\t\t\t\t\t\t$this->get( 'label_for' ),\n\t\t\t\t\t\towa_wp_util::localize( 'Not a valid URL' ) ) );\n\t\t}\t\t\n\t}\n\t\n}\n\nclass owa_wp_settings_field_textarea extends owa_wp_settings_field {\n\n\tpublic function render( $attrs ) {\n\t//print_r();\n\t\t$value = $this->options[ $attrs['id'] ];\n\t\t\n\t\techo sprintf(\n\t\t\t'<textarea name=\"%s\" rows=\"%s\" cols=\"%s\" />%s</textarea> ',\n\t\t\tesc_attr( $attrs['name'] ),\n\t\t\tesc_attr( $attrs['rows'] ),\n\t\t\tesc_attr( $attrs['cols'] ),\n\t\t\tesc_attr( $value )\n\t\t);\n\t\t\n\t\techo sprintf('<p class=\"description\">%s</p>', $attrs['description']);\n\t}\t\n\t\n\tpublic function sanitize( $value ) {\n\t\t\n\t\treturn trim($value);\n\t}\n}\n\n\n\nclass owa_wp_settings_field_commaseparatedlist extends owa_wp_settings_field_text {\n\t\n\tpublic function sanitize( $value ) {\n\t\t\n\t\t$value = trim( $value );\n\t\t$value = str_replace(' ', '', $value );\n\t\t$value = trim( $value, ',');\n\t\t\n\t\treturn $value;\n\t}\n\t\n\tpublic function isValid( $value ) {\n\t\t\n\t\t$re = '/^\\d+(?:,\\d+)*$/';\n\t\n\t\tif ( preg_match( $re, $value ) ) {\n\t\t    \n\t\t    return true;\n\t\t\n\t\t} else {\n\t\t\n\t\t    $this->addError(\n\t\t    \t$this->get('dom_id'),\n\t\t\t\tsprintf(\n\t\t\t\t\t'%s %s',\n\t\t\t\t\t$this->get( 'label_for' ),\n\t\t\t\t\towa_wp_util::localize( 'can only contain a list of numbers separated by commas.' )\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n}\n\nclass owa_wp_settings_field_onoffarray extends owa_wp_settings_field {\n\n\tpublic function render ( $attrs ) {\n\t\t\n\t\t// get persisted options\n\t\t$values = $this->options[ $attrs['id'] ];\n\t\t\n\t\t// get the default options\n\t\t//$defaults = pp_api::getDefaultOption( $this->package, $this->module, $attrs['id'] );\n\t\t\n\t\t$options = $attrs['options'];\n\t\t\n\t\tif ( ! $values ) {\n\t\t\n\t\t\t$values = $defaults;\n\t\t}\n\t\n\t\techo sprintf('<p class=\"description\">%s</p>', $attrs['description']);\n\t\t\n\t\tforeach ( $options as $k => $label ) {\n\t\t\t\n\t\t\t$checked = '';\n\t\t\t$check = false;\n\t\t\t\n\t\t\tif ( in_array( trim( $k ), array_keys( $values ), true ) && $values[ trim( $k ) ] == true ) {\n\t\t\t\t\n\t\t\t\t$check = true;\n\t\t\t}\n\t\t\t\t\n\t\t\t$on_checked = '';\n\t\t\t$off_checked = '';\n\t\t\t\n\t\t\tif ( $check ) {\n\t\t\t\t\n\t\t\t\t$on_checked = 'checked=checked';\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\t$off_checked = 'checked';\n\t\t\t}\n\t\t\t\n\t\t\t//$callback = $this->get('value_label_callback');\n\t\t\t\t\n\t\t\t//$dvalue_label = apply_filters( $this->get('id').'_field_value_label', $ovalue );\n\t\t\t\n\t\t\techo sprintf(\n\t\t\t\t'<p>%s: <label for=\"%s_on\"><input class=\"\" name=\"%s[%s]\" id=\"%s_on\" value=\"1\" type=\"radio\" %s> On</label>&nbsp; &nbsp; ',\n\t\t\t\t$label,\n\t\t\t\tesc_attr( $attrs['dom_id'] ),\n\t\t\t\tesc_attr( $attrs['name'] ),\n\t\t\t\tesc_attr( $k ),\n\t\t\t\tesc_attr( $attrs['dom_id'] ),\n\t\t\t\t$on_checked\n\t\t\t);\n\t\t\t\n\t\t\techo sprintf(\n\t\t\t\t'<label for=\"%s_off\"><input class=\"\" name=\"%s[%s]\" id=\"%s\" value=\"0\" type=\"radio\" %s> Off</label></p>',\n\t\t\t\t\n\t\t\t\tesc_attr( $attrs['dom_id'] ),\n\t\t\t\tesc_attr( $attrs['name'] ),\n\t\t\t\tesc_attr( $k ),\n\t\t\t\tesc_attr( $attrs['dom_id'] ),\n\t\t\t\t$off_checked\n\t\t\t);\n\t\t}\n\t}\n\t\n\tpublic function setFalseValue() {\n\t\t\n\t\treturn array();\n\t}\n}\n\nclass owa_wp_settings_field_booleanarray extends owa_wp_settings_field {\n\n\tpublic function render ( $attrs ) {\n\t\t\n\t\t// get persisted options\n\t\t$values = $this->options[ $attrs['id'] ];\n\t\t\n\t\t// get the default options\n\t\t//$defaults = pp_api::getDefaultOption( $this->package, $this->module, $attrs['id'] );\n\t\t\n\t\tif ( ! $values ) {\n\t\t\n\t\t\t$values = array();\n\t\t}\n\t\n\t\techo sprintf('<p class=\"description\">%s</p>', $attrs['description']);\n\t\t\n\t\tforeach ( $defaults as $dvalue ) {\n\t\t\t\n\t\t\t$checked = '';\n\t\t\t$check = in_array( trim($dvalue), $values, true );\n\t\t\t\t\n\t\t\tif ( $check ) {\n\t\t\t\t\n\t\t\t\t$checked = 'checked=\"checked\"';\n\t\t\t}\n\t\t\t\n\t\t\t$callback = $this->get('value_label_callback');\n\t\t\t\t\n\t\t\t$dvalue_label = apply_filters( $this->get('id').'_field_value_label', $dvalue );\n\t\t\t\n\t\t\techo sprintf(\n\t\t\t\t'<p><input name=\"%s[]\" id=\"%s\" value=\"%s\" type=\"checkbox\" %s> %s</p>',\n\t\t\t\tesc_attr( $attrs['name'] ),\n\t\t\t\tesc_attr( $attrs['dom_id'] ),\n\t\t\t\tesc_attr( $dvalue ),\n\t\t\t\t$checked,\n\t\t\t\tesc_html( $dvalue_label )\n\t\t\t);\n\t\t}\n\t}\n\t\n\tpublic function setFalseValue() {\n\t\t\n\t\treturn array();\n\t}\n}\n\nclass owa_wp_settings_field_integer extends owa_wp_settings_field_text {\n\t\n\t\n\tpublic function sanitize( $value ) {\n\t\t\n\t\treturn intval( trim( $value ) );\n\t}\n\t\n\tpublic function isValid( $value ) {\n\t\t\n\t\tif ( is_numeric( $value ) && $value > $this->get('min_value') ) {\n\t\t\t\n\t\t\treturn true;\n\t\t\t\n\t\t} else {\n\t\t\n\t\t\t$this->addError(\n\t\t\t\t$this->get('dom_id'),\n\t\t\t\tsprintf(\n\t\t\t\t\t'%s %s %s %s %s.',\n\t\t\t\t\t$this->get('label_for'),\n\t\t\t\t\towa_wp_util::localize('must be a number between'),\n\t\t\t\t\t$this->get('min_value'),\n\t\t\t\t\towa_wp_util::localize('and'),\n\t\t\t\t\t$this->get('max_value')\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n}\n\nclass owa_wp_settings_field_select extends owa_wp_settings_field {\n\t\n\tpublic function sanitize ( $value ) {\n\t\t\n\t\treturn $value;\n\t}\n\t\n\tpublic function render( $attrs ) {\n\t\t\n\t\t$selected = $this->options[ $attrs['id'] ];\n\t\t\n\t\t$options = $attrs['options'];\n\t\t$options = apply_filters( 'owa_wp_settings_field_'.$attrs['id'] , $options );\n\t\t\n\t\tif ( $options) {\n\t\t\t$opts = '<option value=\"\">Select...</option>';\n\t\t\t\n\t\t\tforeach ($options as $option) {\n\t\t\t\t\n\t\t\t\t$selected_attr = '';\n\t\t\t\t\n\t\t\t\tif ($option['siteId'] === $selected) {\n\t\t\t\t\t\n\t\t\t\t\t$selected_attr = 'selected';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$opts .= sprintf(\n\t\t\t\t\t'<option value=\"%s\" %s>%s</option> \\n',\n\t\t\t\t\t$option['siteId'],\n\t\t\t\t\t$selected_attr,\n\t\t\t\t\t$option['label']\n\t\t\t\t);\n\t\t\n\t\t\t}\n\t\t} else {\n\t\t\t\n\t\t\t$opts = '<option value=\"\">No options are available.</option>';\n\t\t}\n\t\t\n\t\techo sprintf(\n\t\t\t'<select id=\"%s\" name=\"%s\">%s</select>',\n\t\t\t\n\t\t\tesc_attr( $attrs['dom_id'] ),\n\t\t\tesc_attr( $attrs['name'] ),\n\t\t\t$opts\n\t\t);\n\t\t\n\t\techo sprintf('<p class=\"description\">%s</p>', $attrs['description']);\n\t\n\t}\n}\n\nclass owa_wp_settings_field_boolean extends owa_wp_settings_field {\n\t\n\tpublic function isValid( $value ) {\n\t\n\t\t$value = intval($value);\n\t\t\n\t\tif ( $value === 1 || $value === 0 ) {\n\t\t\t\n\t\t\treturn true;\n\t\t} else {\n\t\t\n\t\t\t$this->addError( $this->get('dom_id'), $this->get('label_for') . ' ' . owa_wp_util::localize( 'field must be On or Off.' ) );\n\t\t}\n\n\t}\n\t\n\tpublic function sanitize ( $value ) {\n\t\t\n\t\treturn intval( $value );\n\t}\n\t\n\tpublic function render( $attrs ) {\n\t\t//print_r($attrs);\n\t\t//print_r($this->options);\n\t\t$value = $this->options[ $attrs['id'] ];\n\t\t\n\t\tif ( ! $value && ! is_numeric( $value )  ) {\n\t\t\t\n\t\t\t//$value = pp_api::getDefaultOption( $this->package, $this->module, $attrs['id'] );\n\t\t}\n\t\t\n\t\t$on_checked = '';\n\t\t$off_checked = '';\n\t\t\n\t\tif ( $value ) {\n\t\t\t\n\t\t\t$on_checked = 'checked=checked';\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\t$off_checked = 'checked';\n\t\t}\n\t\t\n\t\techo sprintf(\n\t\t\t'<label for=\"%s_on\"><input class=\"\" name=\"%s\" id=\"%s_on\" value=\"1\" type=\"radio\" %s> On</label>&nbsp; &nbsp; ',\n\t\t\t\n\t\t\tesc_attr( $attrs['dom_id'] ),\n\t\t\tesc_attr( $attrs['name'] ),\n\t\t\tesc_attr( $attrs['dom_id'] ),\n\t\t\t$on_checked\n\t\t);\n\t\t\n\t\techo sprintf(\n\t\t\t'<label for=\"%s_off\"><input class=\"\" name=\"%s\" id=\"%s\" value=\"0\" type=\"radio\" %s> Off</label>',\n\t\t\tesc_attr( $attrs['dom_id'] ),\n\t\t\tesc_attr( $attrs['name'] ),\n\t\t\tesc_attr( $attrs['dom_id'] ),\n\t\t\t$off_checked\n\t\t);\n\t\t\n\t\techo sprintf('<p class=\"description\">%s</p>', $attrs['description']);\n\t}\n}\n\nclass owa_wp_settings_section {\n\t\n\tpublic $properties;\n\t\n\tpublic function __construct( $params ) {\n\t\n\t\t$this->properties = array();\n\t\t\n\t\t$defaults = array(\n\t\t\t\n\t\t\t'id'\t\t\t=> '',\n\t\t\t'title'\t\t\t=> '',\n\t\t\t'callback'\t\t=> array( $this, 'renderSection'),\n\t\t\t'description'\t=> ''\n\t\t);\n\t\t\n\t\t$this->properties = owa_wp_util::setDefaultParams( $defaults, $params );\n\t}\n\t\n\tpublic function get( $key ) {\n\t\t\n\t\tif ( array_key_exists( $key, $this->properties ) ) {\n\t\t\t\n\t\t\treturn $this->properties[ $key ];\n\t\t}\n\t}\n\t\n\t//\n\t // Renders the html of the section header\n\t //\n\t // Callback function for\n\t //\n\t // wordpress passes a single array here that contains ID, etc..\n\t //\n\tpublic function renderSection( $arg ) {\n\t\n\t\techo $this->get('description');\n\t}\n}\n\n?>"
        }
      ]
    }
  ]
}