{
  "metadata": {
    "timestamp": 1736712018721,
    "page": 528,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mk-j/PHP_XLSXWriter",
      "stars": 1849,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0283203125,
          "content": "vendor\n.idea\nexamples/*.xlsx\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0517578125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Mark Jones\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.0205078125,
          "content": "PHP_XLSXWriter\n==============\n\nThis library is designed to be lightweight, and have minimal memory usage.\n\nIt is designed to output an Excel compatible spreadsheet in (Office 2007+) xlsx format, with just basic features supported:\n* supports PHP 5.2.1+\n* takes UTF-8 encoded input\n* multiple worksheets\n* supports currency/date/numeric cell formatting, simple formulas\n* supports basic cell styling\n* supports writing huge 100K+ row spreadsheets\n\n[Never run out of memory with PHPExcel again](https://github.com/mk-j/PHP_XLSXWriter).\n\nSimple PHP CLI example:\n```php\n$data = array(\n    array('year','month','amount'),\n    array('2003','1','220'),\n    array('2003','2','153.5'),\n);\n\n$writer = new XLSXWriter();\n$writer->writeSheet($data);\n$writer->writeToFile('output.xlsx');\n```\n\nSimple/Advanced Cell Formats:\n```php\n$header = array(\n  'created'=>'date',\n  'product_id'=>'integer',\n  'quantity'=>'#,##0',\n  'amount'=>'price',\n  'description'=>'string',\n  'tax'=>'[$$-1009]#,##0.00;[RED]-[$$-1009]#,##0.00',\n);\n$data = array(\n    array('2015-01-01',873,1,'44.00','misc','=D2*0.05'),\n    array('2015-01-12',324,2,'88.00','none','=D3*0.05'),\n);\n\n$writer = new XLSXWriter();\n$writer->writeSheetHeader('Sheet1', $header );\nforeach($data as $row)\n\t$writer->writeSheetRow('Sheet1', $row );\n$writer->writeToFile('example.xlsx');\n```\n\n50000 rows: (1.4s, 0MB memory usage)\n```php\ninclude_once(\"xlsxwriter.class.php\");\n$writer = new XLSXWriter();\n$writer->writeSheetHeader('Sheet1', array('c1'=>'integer','c2'=>'integer','c3'=>'integer','c4'=>'integer') );\nfor($i=0; $i<50000; $i++)\n{\n    $writer->writeSheetRow('Sheet1', array($i, $i+1, $i+2, $i+3) );\n}\n$writer->writeToFile('huge.xlsx');\necho '#'.floor((memory_get_peak_usage())/1024/1024).\"MB\".\"\\n\";\n```\n| rows   | time | memory |\n| ------ | ---- | ------ |\n|  50000 | 1.4s | 0MB    |\n| 100000 | 2.7s | 0MB    |\n| 150000 | 4.1s | 0MB    |\n| 200000 | 5.7s | 0MB    |\n| 250000 | 7.0s | 0MB    |\n\nSimple cell formats map to more advanced cell formats\n\n| simple formats | format code |\n| ---------- | ---- |\n| string   | @ |\n| integer  | 0 |\n| date     | YYYY-MM-DD |\n| datetime | YYYY-MM-DD HH:MM:SS |\n| time     | HH:MM:SS |\n| price    | #,##0.00 |\n| dollar   | [$$-1009]#,##0.00;[RED]-[$$-1009]#,##0.00 |\n| euro     | #,##0.00 [$€-407];[RED]-#,##0.00 [$€-407] |\n\n\nBasic cell styles have been available since version 0.30\n\n| style        | allowed values |\n| ------------ | ---- |\n| font         | Arial, Times New Roman, Courier New, Comic Sans MS |\n| font-size    | 8,9,10,11,12 ... |\n| font-style   | bold, italic, underline, strikethrough or multiple ie: 'bold,italic' |\n| border       | left, right, top, bottom,   or multiple ie: 'top,left' |\n| border-style | thin, medium, thick, dashDot, dashDotDot, dashed, dotted, double, hair, mediumDashDot, mediumDashDotDot, mediumDashed, slantDashDot |\n| border-color | #RRGGBB, ie: #ff99cc or #f9c |\n| color        | #RRGGBB, ie: #ff99cc or #f9c |\n| fill         | #RRGGBB, ie: #eeffee or #efe |\n| halign       | general, left, right, justify, center |\n| valign       | bottom, center, distributed |\n\n\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.4501953125,
          "content": "{\n    \"name\": \"mk-j/php_xlsxwriter\",\n    \"description\": \"PHP Library to write XLSX files\",\n    \"keywords\": [\"php\", \"library\",\"xls\", \"xlsx\", \"excel\"],\n    \"type\": \"library\",\n    \"homepage\": \"https://github.com/mk-j/PHP_XLSXWriter\",\n    \"license\": \"MIT\",\n\n    \"autoload\": {\n        \"classmap\": [\"xlsxwriter.class.php\"]\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"4.3.*\"\n    },\n    \"require\": {\n        \"php\": \">=5.2.1\",\n        \"ext-zip\": \"*\"\n    }\n}\n"
        },
        {
          "name": "composer.lock",
          "type": "blob",
          "size": 25.75390625,
          "content": "{\n    \"_readme\": [\n        \"This file locks the dependencies of your project to a known state\",\n        \"Read more about it at http://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file\",\n        \"This file is @generated automatically\"\n    ],\n    \"hash\": \"89c1f54283c6b465c6b1a751a5270d78\",\n    \"packages\": [],\n    \"packages-dev\": [\n        {\n            \"name\": \"doctrine/instantiator\",\n            \"version\": \"1.0.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/doctrine/instantiator.git\",\n                \"reference\": \"f976e5de371104877ebc89bd8fecb0019ed9c119\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/doctrine/instantiator/zipball/f976e5de371104877ebc89bd8fecb0019ed9c119\",\n                \"reference\": \"f976e5de371104877ebc89bd8fecb0019ed9c119\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3,<8.0-DEV\"\n            },\n            \"require-dev\": {\n                \"athletic/athletic\": \"~0.1.8\",\n                \"ext-pdo\": \"*\",\n                \"ext-phar\": \"*\",\n                \"phpunit/phpunit\": \"~4.0\",\n                \"squizlabs/php_codesniffer\": \"2.0.*@ALPHA\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Doctrine\\\\Instantiator\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Marco Pivetta\",\n                    \"email\": \"ocramius@gmail.com\",\n                    \"homepage\": \"http://ocramius.github.com/\"\n                }\n            ],\n            \"description\": \"A small, lightweight utility to instantiate objects in PHP without invoking their constructors\",\n            \"homepage\": \"https://github.com/doctrine/instantiator\",\n            \"keywords\": [\n                \"constructor\",\n                \"instantiate\"\n            ],\n            \"time\": \"2014-10-13 12:58:55\"\n        },\n        {\n            \"name\": \"phpunit/php-code-coverage\",\n            \"version\": \"2.0.11\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-code-coverage.git\",\n                \"reference\": \"53603b3c995f5aab6b59c8e08c3a663d2cc810b7\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/53603b3c995f5aab6b59c8e08c3a663d2cc810b7\",\n                \"reference\": \"53603b3c995f5aab6b59c8e08c3a663d2cc810b7\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\",\n                \"phpunit/php-file-iterator\": \"~1.3\",\n                \"phpunit/php-text-template\": \"~1.2\",\n                \"phpunit/php-token-stream\": \"~1.3\",\n                \"sebastian/environment\": \"~1.0\",\n                \"sebastian/version\": \"~1.0\"\n            },\n            \"require-dev\": {\n                \"ext-xdebug\": \">=2.1.4\",\n                \"phpunit/phpunit\": \"~4.1\"\n            },\n            \"suggest\": {\n                \"ext-dom\": \"*\",\n                \"ext-xdebug\": \">=2.2.1\",\n                \"ext-xmlwriter\": \"*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"include-path\": [\n                \"\"\n            ],\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sb@sebastian-bergmann.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library that provides collection, processing, and rendering functionality for PHP code coverage information.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-code-coverage\",\n            \"keywords\": [\n                \"coverage\",\n                \"testing\",\n                \"xunit\"\n            ],\n            \"time\": \"2014-08-31 06:33:04\"\n        },\n        {\n            \"name\": \"phpunit/php-file-iterator\",\n            \"version\": \"1.3.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-file-iterator.git\",\n                \"reference\": \"acd690379117b042d1c8af1fafd61bde001bf6bb\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/acd690379117b042d1c8af1fafd61bde001bf6bb\",\n                \"reference\": \"acd690379117b042d1c8af1fafd61bde001bf6bb\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"File/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"include-path\": [\n                \"\"\n            ],\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sb@sebastian-bergmann.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"FilterIterator implementation that filters files based on a list of suffixes.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-file-iterator/\",\n            \"keywords\": [\n                \"filesystem\",\n                \"iterator\"\n            ],\n            \"time\": \"2013-10-10 15:34:57\"\n        },\n        {\n            \"name\": \"phpunit/php-text-template\",\n            \"version\": \"1.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-text-template.git\",\n                \"reference\": \"206dfefc0ffe9cebf65c413e3d0e809c82fbf00a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/206dfefc0ffe9cebf65c413e3d0e809c82fbf00a\",\n                \"reference\": \"206dfefc0ffe9cebf65c413e3d0e809c82fbf00a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"Text/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"include-path\": [\n                \"\"\n            ],\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sb@sebastian-bergmann.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Simple template engine.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-text-template/\",\n            \"keywords\": [\n                \"template\"\n            ],\n            \"time\": \"2014-01-30 17:20:04\"\n        },\n        {\n            \"name\": \"phpunit/php-timer\",\n            \"version\": \"1.0.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-timer.git\",\n                \"reference\": \"19689d4354b295ee3d8c54b4f42c3efb69cbc17c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-timer/zipball/19689d4354b295ee3d8c54b4f42c3efb69cbc17c\",\n                \"reference\": \"19689d4354b295ee3d8c54b4f42c3efb69cbc17c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"PHP/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"include-path\": [\n                \"\"\n            ],\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sb@sebastian-bergmann.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Utility class for timing\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-timer/\",\n            \"keywords\": [\n                \"timer\"\n            ],\n            \"time\": \"2013-08-02 07:42:54\"\n        },\n        {\n            \"name\": \"phpunit/php-token-stream\",\n            \"version\": \"1.3.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-token-stream.git\",\n                \"reference\": \"f8d5d08c56de5cfd592b3340424a81733259a876\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-token-stream/zipball/f8d5d08c56de5cfd592b3340424a81733259a876\",\n                \"reference\": \"f8d5d08c56de5cfd592b3340424a81733259a876\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-tokenizer\": \"*\",\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.2\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.3-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Wrapper around PHP's tokenizer extension.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-token-stream/\",\n            \"keywords\": [\n                \"tokenizer\"\n            ],\n            \"time\": \"2014-08-31 06:12:13\"\n        },\n        {\n            \"name\": \"phpunit/phpunit\",\n            \"version\": \"4.3.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/phpunit.git\",\n                \"reference\": \"2dab9d593997db4abcf58d0daf798eb4e9cecfe1\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/phpunit/zipball/2dab9d593997db4abcf58d0daf798eb4e9cecfe1\",\n                \"reference\": \"2dab9d593997db4abcf58d0daf798eb4e9cecfe1\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-json\": \"*\",\n                \"ext-pcre\": \"*\",\n                \"ext-reflection\": \"*\",\n                \"ext-spl\": \"*\",\n                \"php\": \">=5.3.3\",\n                \"phpunit/php-code-coverage\": \"~2.0\",\n                \"phpunit/php-file-iterator\": \"~1.3.2\",\n                \"phpunit/php-text-template\": \"~1.2\",\n                \"phpunit/php-timer\": \"~1.0.2\",\n                \"phpunit/phpunit-mock-objects\": \"~2.3\",\n                \"sebastian/comparator\": \"~1.0\",\n                \"sebastian/diff\": \"~1.1\",\n                \"sebastian/environment\": \"~1.0\",\n                \"sebastian/exporter\": \"~1.0\",\n                \"sebastian/version\": \"~1.0\",\n                \"symfony/yaml\": \"~2.0\"\n            },\n            \"suggest\": {\n                \"phpunit/php-invoker\": \"~1.1\"\n            },\n            \"bin\": [\n                \"phpunit\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"4.3.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"include-path\": [\n                \"\",\n                \"../../symfony/yaml/\"\n            ],\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"The PHP Unit Testing framework.\",\n            \"homepage\": \"http://www.phpunit.de/\",\n            \"keywords\": [\n                \"phpunit\",\n                \"testing\",\n                \"xunit\"\n            ],\n            \"time\": \"2014-11-11 10:11:09\"\n        },\n        {\n            \"name\": \"phpunit/phpunit-mock-objects\",\n            \"version\": \"2.3.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/phpunit-mock-objects.git\",\n                \"reference\": \"c63d2367247365f688544f0d500af90a11a44c65\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/phpunit-mock-objects/zipball/c63d2367247365f688544f0d500af90a11a44c65\",\n                \"reference\": \"c63d2367247365f688544f0d500af90a11a44c65\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"doctrine/instantiator\": \"~1.0,>=1.0.1\",\n                \"php\": \">=5.3.3\",\n                \"phpunit/php-text-template\": \"~1.2\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.3\"\n            },\n            \"suggest\": {\n                \"ext-soap\": \"*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.3.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sb@sebastian-bergmann.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Mock Object library for PHPUnit\",\n            \"homepage\": \"https://github.com/sebastianbergmann/phpunit-mock-objects/\",\n            \"keywords\": [\n                \"mock\",\n                \"xunit\"\n            ],\n            \"time\": \"2014-10-03 05:12:11\"\n        },\n        {\n            \"name\": \"sebastian/comparator\",\n            \"version\": \"1.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/comparator.git\",\n                \"reference\": \"e54a01c0da1b87db3c5a3c4c5277ddf331da4aef\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/comparator/zipball/e54a01c0da1b87db3c5a3c4c5277ddf331da4aef\",\n                \"reference\": \"e54a01c0da1b87db3c5a3c4c5277ddf331da4aef\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\",\n                \"sebastian/diff\": \"~1.1\",\n                \"sebastian/exporter\": \"~1.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.1\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jeff Welch\",\n                    \"email\": \"whatthejeff@gmail.com\"\n                },\n                {\n                    \"name\": \"Volker Dusch\",\n                    \"email\": \"github@wallbash.com\"\n                },\n                {\n                    \"name\": \"Bernhard Schussek\",\n                    \"email\": \"bschussek@2bepublished.at\"\n                },\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Provides the functionality to compare PHP values for equality\",\n            \"homepage\": \"http://www.github.com/sebastianbergmann/comparator\",\n            \"keywords\": [\n                \"comparator\",\n                \"compare\",\n                \"equality\"\n            ],\n            \"time\": \"2014-05-11 23:00:21\"\n        },\n        {\n            \"name\": \"sebastian/diff\",\n            \"version\": \"1.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/diff.git\",\n                \"reference\": \"5843509fed39dee4b356a306401e9dd1a931fec7\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/diff/zipball/5843509fed39dee4b356a306401e9dd1a931fec7\",\n                \"reference\": \"5843509fed39dee4b356a306401e9dd1a931fec7\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.2\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.2-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Kore Nordmann\",\n                    \"email\": \"mail@kore-nordmann.de\"\n                },\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Diff implementation\",\n            \"homepage\": \"http://www.github.com/sebastianbergmann/diff\",\n            \"keywords\": [\n                \"diff\"\n            ],\n            \"time\": \"2014-08-15 10:29:00\"\n        },\n        {\n            \"name\": \"sebastian/environment\",\n            \"version\": \"1.2.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/environment.git\",\n                \"reference\": \"0d9bf79554d2a999da194a60416c15cf461eb67d\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/environment/zipball/0d9bf79554d2a999da194a60416c15cf461eb67d\",\n                \"reference\": \"0d9bf79554d2a999da194a60416c15cf461eb67d\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.2.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Provides functionality to handle HHVM/PHP environments\",\n            \"homepage\": \"http://www.github.com/sebastianbergmann/environment\",\n            \"keywords\": [\n                \"Xdebug\",\n                \"environment\",\n                \"hhvm\"\n            ],\n            \"time\": \"2014-10-22 06:38:05\"\n        },\n        {\n            \"name\": \"sebastian/exporter\",\n            \"version\": \"1.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/exporter.git\",\n                \"reference\": \"c7d59948d6e82818e1bdff7cadb6c34710eb7dc0\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/exporter/zipball/c7d59948d6e82818e1bdff7cadb6c34710eb7dc0\",\n                \"reference\": \"c7d59948d6e82818e1bdff7cadb6c34710eb7dc0\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jeff Welch\",\n                    \"email\": \"whatthejeff@gmail.com\"\n                },\n                {\n                    \"name\": \"Volker Dusch\",\n                    \"email\": \"github@wallbash.com\"\n                },\n                {\n                    \"name\": \"Bernhard Schussek\",\n                    \"email\": \"bschussek@2bepublished.at\"\n                },\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                },\n                {\n                    \"name\": \"Adam Harvey\",\n                    \"email\": \"aharvey@php.net\"\n                }\n            ],\n            \"description\": \"Provides the functionality to export PHP variables for visualization\",\n            \"homepage\": \"http://www.github.com/sebastianbergmann/exporter\",\n            \"keywords\": [\n                \"export\",\n                \"exporter\"\n            ],\n            \"time\": \"2014-09-10 00:51:36\"\n        },\n        {\n            \"name\": \"sebastian/version\",\n            \"version\": \"1.0.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/version.git\",\n                \"reference\": \"b6e1f0cf6b9e1ec409a0d3e2f2a5fb0998e36b43\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/version/zipball/b6e1f0cf6b9e1ec409a0d3e2f2a5fb0998e36b43\",\n                \"reference\": \"b6e1f0cf6b9e1ec409a0d3e2f2a5fb0998e36b43\",\n                \"shasum\": \"\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library that helps with managing the version number of Git-hosted PHP projects\",\n            \"homepage\": \"https://github.com/sebastianbergmann/version\",\n            \"time\": \"2014-03-07 15:35:33\"\n        },\n        {\n            \"name\": \"symfony/yaml\",\n            \"version\": \"v2.5.6\",\n            \"target-dir\": \"Symfony/Component/Yaml\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/Yaml.git\",\n                \"reference\": \"2d9f527449cabfa8543dd7fa3a466d6ae83d6726\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/Yaml/zipball/2d9f527449cabfa8543dd7fa3a466d6ae83d6726\",\n                \"reference\": \"2d9f527449cabfa8543dd7fa3a466d6ae83d6726\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.5-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Symfony\\\\Component\\\\Yaml\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"http://symfony.com/contributors\"\n                },\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                }\n            ],\n            \"description\": \"Symfony Yaml Component\",\n            \"homepage\": \"http://symfony.com\",\n            \"time\": \"2014-10-01 05:50:18\"\n        }\n    ],\n    \"aliases\": [],\n    \"minimum-stability\": \"stable\",\n    \"stability-flags\": [],\n    \"prefer-stable\": false,\n    \"platform\": [],\n    \"platform-dev\": []\n}\n"
        },
        {
          "name": "example-cli.php",
          "type": "blob",
          "size": 0.4921875,
          "content": "<?php\ninclude_once(\"xlsxwriter.class.php\");\nini_set('display_errors', 0);\nini_set('log_errors', 1);\nerror_reporting(E_ALL & ~E_NOTICE);\n\n$filename = \"example.xlsx\";\n\n$rows = array(\n    array('2003','1','-50.5','2010-01-01 23:00:00','2012-12-31 23:00:00'),\n    array('2003','=B1', '23.5','2010-01-01 00:00:00','2012-12-31 00:00:00'),\n);\n\n$writer = new XLSXWriter();\n$writer->setAuthor('Some Author'); \nforeach($rows as $row)\n\t$writer->writeSheetRow('Sheet1', $row);\n\n$writer->writeToFile('example.xlsx');\n"
        },
        {
          "name": "example.php",
          "type": "blob",
          "size": 0.8583984375,
          "content": "<?php\ninclude_once(\"xlsxwriter.class.php\");\nini_set('display_errors', 0);\nini_set('log_errors', 1);\nerror_reporting(E_ALL & ~E_NOTICE);\n\n$filename = \"example.xlsx\";\nheader('Content-disposition: attachment; filename=\"'.XLSXWriter::sanitize_filename($filename).'\"');\nheader(\"Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\nheader('Content-Transfer-Encoding: binary');\nheader('Cache-Control: must-revalidate');\nheader('Pragma: public');\n\n$rows = array(\n    array('2003','1','-50.5','2010-01-01 23:00:00','2012-12-31 23:00:00'),\n    array('2003','=B1', '23.5','2010-01-01 00:00:00','2012-12-31 00:00:00'),\n);\n\n$writer = new XLSXWriter();\n$writer->setAuthor('Some Author'); \nforeach($rows as $row)\n\t$writer->writeSheetRow('Sheet1', $row);\n$writer->writeToStdOut();\n//$writer->writeToFile('example.xlsx');\n//echo $writer->writeToString();\nexit(0);\n\n\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "testbench",
          "type": "tree",
          "content": null
        },
        {
          "name": "xlsxwriter.class.php",
          "type": "blob",
          "size": 47.7900390625,
          "content": "<?php\n/*\n * @license MIT License\n * */\n\nclass XLSXWriter\n{\n\t//http://www.ecma-international.org/publications/standards/Ecma-376.htm\n\t//http://officeopenxml.com/SSstyles.php\n\t//------------------------------------------------------------------\n\t//http://office.microsoft.com/en-us/excel-help/excel-specifications-and-limits-HP010073849.aspx\n\tconst EXCEL_2007_MAX_ROW=1048576;\n\tconst EXCEL_2007_MAX_COL=16384;\n\t//------------------------------------------------------------------\n\tprotected $title;\n\tprotected $subject;\n\tprotected $author;\n\tprotected $isRightToLeft;\n\tprotected $company;\n\tprotected $description;\n\tprotected $keywords = array();\n\tprotected $tempdir;\n\t\n\tprotected $current_sheet;\n\tprotected $sheets = array();\n\tprotected $temp_files = array();\n\tprotected $cell_styles = array();\n\tprotected $number_formats = array();\n\n\tpublic function __construct()\n\t{\n\t\tdefined('ENT_XML1') or define('ENT_XML1',16);//for php 5.3, avoid fatal error\n\t\tdate_default_timezone_get() or date_default_timezone_set('UTC');//php.ini missing tz, avoid warning\n\t\tis_writeable($this->tempFilename()) or self::log(\"Warning: tempdir \".sys_get_temp_dir().\" not writeable, use ->setTempDir()\");\n\t\tclass_exists('ZipArchive') or self::log(\"Error: ZipArchive class does not exist\");\n\t\t$this->addCellStyle($number_format='GENERAL', $style_string=null);\n\t}\n\n\tpublic function setTitle($title='') { $this->title=$title; }\n\tpublic function setSubject($subject='') { $this->subject=$subject; }\n\tpublic function setAuthor($author='') { $this->author=$author; }\n\tpublic function setCompany($company='') { $this->company=$company; }\n\tpublic function setKeywords($keywords='') { $this->keywords=$keywords; }\n\tpublic function setDescription($description='') { $this->description=$description; }\n\tpublic function setTempDir($tempdir='') { $this->tempdir=$tempdir; }\n\tpublic function setRightToLeft($isRightToLeft=false){ $this->isRightToLeft=$isRightToLeft; }\n\n\tpublic function __destruct()\n\t{\n\t\tif (!empty($this->temp_files)) {\n\t\t\tforeach($this->temp_files as $temp_file) {\n\t\t\t\t@unlink($temp_file);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected function tempFilename()\n\t{\n\t\t$tempdir = !empty($this->tempdir) ? $this->tempdir : sys_get_temp_dir();\n\t\t$filename = tempnam($tempdir, \"xlsx_writer_\");\n\t\tif (!$filename) {\n\t\t\t// If you are seeing this error, it's possible you may have too many open\n\t\t\t// file handles. If you're creating a spreadsheet with many small inserts,\n\t\t\t// it is possible to exceed the default 1024 open file handles. Run 'ulimit -a'\n\t\t\t// and try increasing the 'open files' number with 'ulimit -n 8192'\n\t\t\tthrow new \\Exception(\"Unable to create tempfile - check file handle limits?\");\n\t\t}\n\t\t$this->temp_files[] = $filename;\n\t\treturn $filename;\n\t}\n\n\tpublic function writeToStdOut()\n\t{\n\t\t$temp_file = $this->tempFilename();\n\t\tself::writeToFile($temp_file);\n\t\treadfile($temp_file);\n\t}\n\n\tpublic function writeToString()\n\t{\n\t\t$temp_file = $this->tempFilename();\n\t\tself::writeToFile($temp_file);\n\t\t$string = file_get_contents($temp_file);\n\t\treturn $string;\n\t}\n\n\tpublic function writeToFile($filename)\n\t{\n\t\tforeach($this->sheets as $sheet_name => $sheet) {\n\t\t\tself::finalizeSheet($sheet_name);//making sure all footers have been written\n\t\t}\n\n\t\tif ( file_exists( $filename ) ) {\n\t\t\tif ( is_writable( $filename ) ) {\n\t\t\t\t@unlink( $filename ); //if the zip already exists, remove it\n\t\t\t} else {\n\t\t\t\tself::log( \"Error in \" . __CLASS__ . \"::\" . __FUNCTION__ . \", file is not writeable.\" );\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t$zip = new ZipArchive();\n\t\tif (empty($this->sheets))                       { self::log(\"Error in \".__CLASS__.\"::\".__FUNCTION__.\", no worksheets defined.\"); return; }\n\t\tif (!$zip->open($filename, ZipArchive::CREATE)) { self::log(\"Error in \".__CLASS__.\"::\".__FUNCTION__.\", unable to create zip.\"); return; }\n\n\t\t$zip->addEmptyDir(\"docProps/\");\n\t\t$zip->addFromString(\"docProps/app.xml\" , self::buildAppXML() );\n\t\t$zip->addFromString(\"docProps/core.xml\", self::buildCoreXML());\n\n\t\t$zip->addEmptyDir(\"_rels/\");\n\t\t$zip->addFromString(\"_rels/.rels\", self::buildRelationshipsXML());\n\n\t\t$zip->addEmptyDir(\"xl/worksheets/\");\n\t\tforeach($this->sheets as $sheet) {\n\t\t\t$zip->addFile($sheet->filename, \"xl/worksheets/\".$sheet->xmlname );\n\t\t}\n\t\t$zip->addFromString(\"xl/workbook.xml\"         , self::buildWorkbookXML() );\n\t\t$zip->addFile($this->writeStylesXML(), \"xl/styles.xml\" );  //$zip->addFromString(\"xl/styles.xml\"           , self::buildStylesXML() );\n\t\t$zip->addFromString(\"[Content_Types].xml\"     , self::buildContentTypesXML() );\n\n\t\t$zip->addEmptyDir(\"xl/_rels/\");\n\t\t$zip->addFromString(\"xl/_rels/workbook.xml.rels\", self::buildWorkbookRelsXML() );\n\t\t$zip->close();\n\t}\n\n\tprotected function initializeSheet($sheet_name, $col_widths=array(), $auto_filter=false, $freeze_rows=false, $freeze_columns=false )\n\t{\n\t\t//if already initialized\n\t\tif ($this->current_sheet==$sheet_name || isset($this->sheets[$sheet_name]))\n\t\t\treturn;\n\n\t\t$sheet_filename = $this->tempFilename();\n\t\t$sheet_xmlname = 'sheet' . (count($this->sheets) + 1).\".xml\";\n\t\t$this->sheets[$sheet_name] = (object)array(\n\t\t\t'filename' => $sheet_filename,\n\t\t\t'sheetname' => $sheet_name,\n\t\t\t'xmlname' => $sheet_xmlname,\n\t\t\t'row_count' => 0,\n\t\t\t'file_writer' => new XLSXWriter_BuffererWriter($sheet_filename),\n\t\t\t'columns' => array(),\n\t\t\t'merge_cells' => array(),\n\t\t\t'max_cell_tag_start' => 0,\n\t\t\t'max_cell_tag_end' => 0,\n\t\t\t'auto_filter' => $auto_filter,\n\t\t\t'freeze_rows' => $freeze_rows,\n\t\t\t'freeze_columns' => $freeze_columns,\n\t\t\t'finalized' => false,\n\t\t);\n\t\t$rightToLeftValue = $this->isRightToLeft ? 'true' : 'false';\n\t\t$sheet = &$this->sheets[$sheet_name];\n\t\t$tabselected = count($this->sheets) == 1 ? 'true' : 'false';//only first sheet is selected\n\t\t$max_cell=XLSXWriter::xlsCell(self::EXCEL_2007_MAX_ROW, self::EXCEL_2007_MAX_COL);//XFE1048577\n\t\t$sheet->file_writer->write('<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' . \"\\n\");\n\t\t$sheet->file_writer->write('<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\">');\n\t\t$sheet->file_writer->write(  '<sheetPr filterMode=\"false\">');\n\t\t$sheet->file_writer->write(    '<pageSetUpPr fitToPage=\"false\"/>');\n\t\t$sheet->file_writer->write(  '</sheetPr>');\n\t\t$sheet->max_cell_tag_start = $sheet->file_writer->ftell();\n\t\t$sheet->file_writer->write('<dimension ref=\"A1:' . $max_cell . '\"/>');\n\t\t$sheet->max_cell_tag_end = $sheet->file_writer->ftell();\n\t\t$sheet->file_writer->write(  '<sheetViews>');\n\t\t$sheet->file_writer->write(    '<sheetView colorId=\"64\" defaultGridColor=\"true\" rightToLeft=\"'.$rightToLeftValue.'\" showFormulas=\"false\" showGridLines=\"true\" showOutlineSymbols=\"true\" showRowColHeaders=\"true\" showZeros=\"true\" tabSelected=\"' . $tabselected . '\" topLeftCell=\"A1\" view=\"normal\" windowProtection=\"false\" workbookViewId=\"0\" zoomScale=\"100\" zoomScaleNormal=\"100\" zoomScalePageLayoutView=\"100\">');\n\t\tif ($sheet->freeze_rows && $sheet->freeze_columns) {\n\t\t\t$sheet->file_writer->write(      '<pane ySplit=\"'.$sheet->freeze_rows.'\" xSplit=\"'.$sheet->freeze_columns.'\" topLeftCell=\"'.self::xlsCell($sheet->freeze_rows, $sheet->freeze_columns).'\" activePane=\"bottomRight\" state=\"frozen\"/>');\n\t\t\t$sheet->file_writer->write(      '<selection activeCell=\"'.self::xlsCell($sheet->freeze_rows, 0).'\" activeCellId=\"0\" pane=\"topRight\" sqref=\"'.self::xlsCell($sheet->freeze_rows, 0).'\"/>');\n\t\t\t$sheet->file_writer->write(      '<selection activeCell=\"'.self::xlsCell(0, $sheet->freeze_columns).'\" activeCellId=\"0\" pane=\"bottomLeft\" sqref=\"'.self::xlsCell(0, $sheet->freeze_columns).'\"/>');\n\t\t\t$sheet->file_writer->write(      '<selection activeCell=\"'.self::xlsCell($sheet->freeze_rows, $sheet->freeze_columns).'\" activeCellId=\"0\" pane=\"bottomRight\" sqref=\"'.self::xlsCell($sheet->freeze_rows, $sheet->freeze_columns).'\"/>');\n\t\t}\n\t\telseif ($sheet->freeze_rows) {\n\t\t\t$sheet->file_writer->write(      '<pane ySplit=\"'.$sheet->freeze_rows.'\" topLeftCell=\"'.self::xlsCell($sheet->freeze_rows, 0).'\" activePane=\"bottomLeft\" state=\"frozen\"/>');\n\t\t\t$sheet->file_writer->write(      '<selection activeCell=\"'.self::xlsCell($sheet->freeze_rows, 0).'\" activeCellId=\"0\" pane=\"bottomLeft\" sqref=\"'.self::xlsCell($sheet->freeze_rows, 0).'\"/>');\n\t\t}\n\t\telseif ($sheet->freeze_columns) {\n\t\t\t$sheet->file_writer->write(      '<pane xSplit=\"'.$sheet->freeze_columns.'\" topLeftCell=\"'.self::xlsCell(0, $sheet->freeze_columns).'\" activePane=\"topRight\" state=\"frozen\"/>');\n\t\t\t$sheet->file_writer->write(      '<selection activeCell=\"'.self::xlsCell(0, $sheet->freeze_columns).'\" activeCellId=\"0\" pane=\"topRight\" sqref=\"'.self::xlsCell(0, $sheet->freeze_columns).'\"/>');\n\t\t}\n\t\telse { // not frozen\n\t\t\t$sheet->file_writer->write(      '<selection activeCell=\"A1\" activeCellId=\"0\" pane=\"topLeft\" sqref=\"A1\"/>');\n\t\t}\n\t\t$sheet->file_writer->write(    '</sheetView>');\n\t\t$sheet->file_writer->write(  '</sheetViews>');\n\t\t$sheet->file_writer->write(  '<cols>');\n\t\t$i=0;\n\t\tif (!empty($col_widths)) {\n\t\t\tforeach($col_widths as $column_width) {\n\t\t\t\t$sheet->file_writer->write(  '<col collapsed=\"false\" hidden=\"false\" max=\"'.($i+1).'\" min=\"'.($i+1).'\" style=\"0\" customWidth=\"true\" width=\"'.floatval($column_width).'\"/>');\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\t$sheet->file_writer->write(  '<col collapsed=\"false\" hidden=\"false\" max=\"1024\" min=\"'.($i+1).'\" style=\"0\" customWidth=\"false\" width=\"11.5\"/>');\n\t\t$sheet->file_writer->write(  '</cols>');\n\t\t$sheet->file_writer->write(  '<sheetData>');\n\t}\n\n\tprivate function addCellStyle($number_format, $cell_style_string)\n\t{\n\t\t$number_format_idx = self::add_to_list_get_index($this->number_formats, $number_format);\n\t\t$lookup_string = $number_format_idx.\";\".$cell_style_string;\n\t\t$cell_style_idx = self::add_to_list_get_index($this->cell_styles, $lookup_string);\n\t\treturn $cell_style_idx;\n\t}\n\n\tprivate function initializeColumnTypes($header_types)\n\t{\n\t\t$column_types = array();\n\t\tforeach($header_types as $v)\n\t\t{\n\t\t\t$number_format = self::numberFormatStandardized($v);\n\t\t\t$number_format_type = self::determineNumberFormatType($number_format);\n\t\t\t$cell_style_idx = $this->addCellStyle($number_format, $style_string=null);\n\t\t\t$column_types[] = array('number_format' => $number_format,//contains excel format like 'YYYY-MM-DD HH:MM:SS'\n\t\t\t\t\t\t\t\t\t'number_format_type' => $number_format_type, //contains friendly format like 'datetime'\n\t\t\t\t\t\t\t\t\t'default_cell_style' => $cell_style_idx,\n\t\t\t\t\t\t\t\t\t);\n\t\t}\n\t\treturn $column_types;\n\t}\n\n\tpublic function writeSheetHeader($sheet_name, array $header_types, $col_options = null)\n\t{\n\t\tif (empty($sheet_name) || empty($header_types))\n\t\t\treturn;\n\n\t\t$suppress_row = isset($col_options['suppress_row']) ? intval($col_options['suppress_row']) : false;\n\t\tif (is_bool($col_options))\n\t\t{\n\t\t\tself::log( \"Warning! passing $suppress_row=false|true to writeSheetHeader() is deprecated, this will be removed in a future version.\" );\n\t\t\t$suppress_row = intval($col_options);\n\t\t}\n\t\t$style = &$col_options;\n\n\t\t$col_widths = isset($col_options['widths']) ? (array)$col_options['widths'] : array();\n\t\t$auto_filter = isset($col_options['auto_filter']) ? intval($col_options['auto_filter']) : false;\n\t\t$freeze_rows = isset($col_options['freeze_rows']) ? intval($col_options['freeze_rows']) : false;\n\t\t$freeze_columns = isset($col_options['freeze_columns']) ? intval($col_options['freeze_columns']) : false;\n\t\tself::initializeSheet($sheet_name, $col_widths, $auto_filter, $freeze_rows, $freeze_columns);\n\t\t$sheet = &$this->sheets[$sheet_name];\n\t\t$sheet->columns = $this->initializeColumnTypes($header_types);\n\t\tif (!$suppress_row)\n\t\t{\n\t\t\t$header_row = array_keys($header_types);      \n\n\t\t\t$sheet->file_writer->write('<row collapsed=\"false\" customFormat=\"false\" customHeight=\"false\" hidden=\"false\" ht=\"12.1\" outlineLevel=\"0\" r=\"' . ($sheet->row_count+1) . '\">');\n\t\t\tforeach ($header_row as $c => $v) {\n\t\t\t\t$cell_style_idx = empty($style) ? $sheet->columns[$c]['default_cell_style'] : $this->addCellStyle( 'GENERAL', json_encode(isset($style[0]) ? $style[$c] : $style) );\n\t\t\t\t$this->writeCell($sheet->file_writer, $sheet->row_count, $c, $v, $number_format_type='n_string', $cell_style_idx);\n\t\t\t}\n\t\t\t$sheet->file_writer->write('</row>');\n\t\t\t$sheet->row_count++;\n\t\t}\n\t\t$this->current_sheet = $sheet_name;\n\t}\n\n\tpublic function writeSheetRow($sheet_name, array $row, $row_options=null)\n\t{\n\t\tif (empty($sheet_name))\n\t\t\treturn;\n\n\t\t$this->initializeSheet($sheet_name);\n\t\t$sheet = &$this->sheets[$sheet_name];\n\t\tif (count($sheet->columns) < count($row)) {\n\t\t\t$default_column_types = $this->initializeColumnTypes( array_fill($from=0, $until=count($row), 'GENERAL') );//will map to n_auto\n\t\t\t$sheet->columns = array_merge((array)$sheet->columns, $default_column_types);\n\t\t}\n\t\t\n\t\tif (!empty($row_options))\n\t\t{\n\t\t\t$ht = isset($row_options['height']) ? floatval($row_options['height']) : 12.1;\n\t\t\t$customHt = isset($row_options['height']) ? true : false;\n\t\t\t$hidden = isset($row_options['hidden']) ? (bool)($row_options['hidden']) : false;\n\t\t\t$collapsed = isset($row_options['collapsed']) ? (bool)($row_options['collapsed']) : false;\n\t\t\t$sheet->file_writer->write('<row collapsed=\"'.($collapsed ? 'true' : 'false').'\" customFormat=\"false\" customHeight=\"'.($customHt ? 'true' : 'false').'\" hidden=\"'.($hidden ? 'true' : 'false').'\" ht=\"'.($ht).'\" outlineLevel=\"0\" r=\"' . ($sheet->row_count + 1) . '\">');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sheet->file_writer->write('<row collapsed=\"false\" customFormat=\"false\" customHeight=\"false\" hidden=\"false\" ht=\"12.1\" outlineLevel=\"0\" r=\"' . ($sheet->row_count + 1) . '\">');\n\t\t}\n\n\t\t$style = &$row_options;\n\t\t$c=0;\n\t\tforeach ($row as $v) {\n\t\t\t$number_format = $sheet->columns[$c]['number_format'];\n\t\t\t$number_format_type = $sheet->columns[$c]['number_format_type'];\n\t\t\t$cell_style_idx = empty($style) ? $sheet->columns[$c]['default_cell_style'] : $this->addCellStyle( $number_format, json_encode(isset($style[0]) ? $style[$c] : $style) );\n\t\t\t$this->writeCell($sheet->file_writer, $sheet->row_count, $c, $v, $number_format_type, $cell_style_idx);\n\t\t\t$c++;\n\t\t}\n\t\t$sheet->file_writer->write('</row>');\n\t\t$sheet->row_count++;\n\t\t$this->current_sheet = $sheet_name;\n\t}\n\n\tpublic function countSheetRows($sheet_name = '')\n\t{\n\t\t$sheet_name = $sheet_name ? $sheet_name : $this->current_sheet;\n\t\treturn array_key_exists($sheet_name, $this->sheets) ? $this->sheets[$sheet_name]->row_count : 0;\n\t}\n\n\tprotected function finalizeSheet($sheet_name)\n\t{\n\t\tif (empty($sheet_name) || $this->sheets[$sheet_name]->finalized)\n\t\t\treturn;\n\n\t\t$sheet = &$this->sheets[$sheet_name];\n\n\t\t$sheet->file_writer->write(    '</sheetData>');\n\n\t\tif (!empty($sheet->merge_cells)) {\n\t\t\t$sheet->file_writer->write(    '<mergeCells>');\n\t\t\tforeach ($sheet->merge_cells as $range) {\n\t\t\t\t$sheet->file_writer->write(        '<mergeCell ref=\"' . $range . '\"/>');\n\t\t\t}\n\t\t\t$sheet->file_writer->write(    '</mergeCells>');\n\t\t}\n\n\t\t$max_cell = self::xlsCell($sheet->row_count - 1, count($sheet->columns) - 1);\n\n\t\tif ($sheet->auto_filter) {\n\t\t\t$sheet->file_writer->write(    '<autoFilter ref=\"A1:' . $max_cell . '\"/>');\t\t\t\n\t\t}\n\n\t\t$sheet->file_writer->write(    '<printOptions headings=\"false\" gridLines=\"false\" gridLinesSet=\"true\" horizontalCentered=\"false\" verticalCentered=\"false\"/>');\n\t\t$sheet->file_writer->write(    '<pageMargins left=\"0.5\" right=\"0.5\" top=\"1.0\" bottom=\"1.0\" header=\"0.5\" footer=\"0.5\"/>');\n\t\t$sheet->file_writer->write(    '<pageSetup blackAndWhite=\"false\" cellComments=\"none\" copies=\"1\" draft=\"false\" firstPageNumber=\"1\" fitToHeight=\"1\" fitToWidth=\"1\" horizontalDpi=\"300\" orientation=\"portrait\" pageOrder=\"downThenOver\" paperSize=\"1\" scale=\"100\" useFirstPageNumber=\"true\" usePrinterDefaults=\"false\" verticalDpi=\"300\"/>');\n\t\t$sheet->file_writer->write(    '<headerFooter differentFirst=\"false\" differentOddEven=\"false\">');\n\t\t$sheet->file_writer->write(        '<oddHeader>&amp;C&amp;&quot;Times New Roman,Regular&quot;&amp;12&amp;A</oddHeader>');\n\t\t$sheet->file_writer->write(        '<oddFooter>&amp;C&amp;&quot;Times New Roman,Regular&quot;&amp;12Page &amp;P</oddFooter>');\n\t\t$sheet->file_writer->write(    '</headerFooter>');\n\t\t$sheet->file_writer->write('</worksheet>');\n\n\t\t$max_cell_tag = '<dimension ref=\"A1:' . $max_cell . '\"/>';\n\t\t$padding_length = $sheet->max_cell_tag_end - $sheet->max_cell_tag_start - strlen($max_cell_tag);\n\t\t$sheet->file_writer->fseek($sheet->max_cell_tag_start);\n\t\t$sheet->file_writer->write($max_cell_tag.str_repeat(\" \", $padding_length));\n\t\t$sheet->file_writer->close();\n\t\t$sheet->finalized=true;\n\t}\n\n\tpublic function markMergedCell($sheet_name, $start_cell_row, $start_cell_column, $end_cell_row, $end_cell_column)\n\t{\n\t\tif (empty($sheet_name) || $this->sheets[$sheet_name]->finalized)\n\t\t\treturn;\n\n\t\tself::initializeSheet($sheet_name);\n\t\t$sheet = &$this->sheets[$sheet_name];\n\n\t\t$startCell = self::xlsCell($start_cell_row, $start_cell_column);\n\t\t$endCell = self::xlsCell($end_cell_row, $end_cell_column);\n\t\t$sheet->merge_cells[] = $startCell . \":\" . $endCell;\n\t}\n\n\tpublic function writeSheet(array $data, $sheet_name='', array $header_types=array())\n\t{\n\t\t$sheet_name = empty($sheet_name) ? 'Sheet1' : $sheet_name;\n\t\t$data = empty($data) ? array(array('')) : $data;\n\t\tif (!empty($header_types))\n\t\t{\n\t\t\t$this->writeSheetHeader($sheet_name, $header_types);\n\t\t}\n\t\tforeach($data as $i=>$row)\n\t\t{\n\t\t\t$this->writeSheetRow($sheet_name, $row);\n\t\t}\n\t\t$this->finalizeSheet($sheet_name);\n\t}\n\n\tprotected function writeCell(XLSXWriter_BuffererWriter &$file, $row_number, $column_number, $value, $num_format_type, $cell_style_idx)\n\t{\n\t\t$cell_name = self::xlsCell($row_number, $column_number);\n\n\t\tif (!is_scalar($value) || $value==='') { //objects, array, empty\n\t\t\t$file->write('<c r=\"'.$cell_name.'\" s=\"'.$cell_style_idx.'\"/>');\n\t\t} elseif (is_string($value) && $value[0]=='='){\n\t\t\t$file->write('<c r=\"'.$cell_name.'\" s=\"'.$cell_style_idx.'\" t=\"s\"><f>'.self::xmlspecialchars(ltrim($value, '=')).'</f></c>');\n\t\t} elseif ($num_format_type=='n_date') {\n\t\t\t$file->write('<c r=\"'.$cell_name.'\" s=\"'.$cell_style_idx.'\" t=\"n\"><v>'.intval(self::convert_date_time($value)).'</v></c>');\n\t\t} elseif ($num_format_type=='n_datetime') {\n\t\t\t$file->write('<c r=\"'.$cell_name.'\" s=\"'.$cell_style_idx.'\" t=\"n\"><v>'.self::convert_date_time($value).'</v></c>');\n\t\t} elseif ($num_format_type=='n_numeric') {\n\t\t\t$file->write('<c r=\"'.$cell_name.'\" s=\"'.$cell_style_idx.'\" t=\"n\"><v>'.self::xmlspecialchars($value).'</v></c>');//int,float,currency\n\t\t} elseif ($num_format_type=='n_string') {\n\t\t\t$file->write('<c r=\"'.$cell_name.'\" s=\"'.$cell_style_idx.'\" t=\"inlineStr\"><is><t>'.self::xmlspecialchars($value).'</t></is></c>');\n\t\t} elseif ($num_format_type=='n_auto' || 1) { //auto-detect unknown column types\n\t\t\tif (!is_string($value) || $value=='0' || ($value[0]!='0' && ctype_digit($value)) || preg_match(\"/^\\-?(0|[1-9][0-9]*)(\\.[0-9]+)?$/\", $value)){\n\t\t\t\t$file->write('<c r=\"'.$cell_name.'\" s=\"'.$cell_style_idx.'\" t=\"n\"><v>'.self::xmlspecialchars($value).'</v></c>');//int,float,currency\n\t\t\t} else { //implied: ($cell_format=='string')\n\t\t\t\t$file->write('<c r=\"'.$cell_name.'\" s=\"'.$cell_style_idx.'\" t=\"inlineStr\"><is><t>'.self::xmlspecialchars($value).'</t></is></c>');\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected function styleFontIndexes()\n\t{\n\t\tstatic $border_allowed = array('left','right','top','bottom');\n\t\tstatic $border_style_allowed = array('thin','medium','thick','dashDot','dashDotDot','dashed','dotted','double','hair','mediumDashDot','mediumDashDotDot','mediumDashed','slantDashDot');\n\t\tstatic $horizontal_allowed = array('general','left','right','justify','center');\n\t\tstatic $vertical_allowed = array('bottom','center','distributed','top');\n\t\t$default_font = array('size'=>'10','name'=>'Arial','family'=>'2');\n\t\t$fills = array('','');//2 placeholders for static xml later\n\t\t$fonts = array('','','','');//4 placeholders for static xml later\n\t\t$borders = array('');//1 placeholder for static xml later\n\t\t$style_indexes = array();\n\t\tforeach($this->cell_styles as $i=>$cell_style_string)\n\t\t{\n\t\t\t$semi_colon_pos = strpos($cell_style_string,\";\");\n\t\t\t$number_format_idx = substr($cell_style_string, 0, $semi_colon_pos);\n\t\t\t$style_json_string = substr($cell_style_string, $semi_colon_pos+1);\n\t\t\t$style = @json_decode($style_json_string, $as_assoc=true);\n\n\t\t\t$style_indexes[$i] = array('num_fmt_idx'=>$number_format_idx);//initialize entry\n\t\t\tif (isset($style['border']) && is_string($style['border']))//border is a comma delimited str\n\t\t\t{\n\t\t\t\t$border_value['side'] = array_intersect(explode(\",\", $style['border']), $border_allowed);\n\t\t\t\tif (isset($style['border-style']) && in_array($style['border-style'],$border_style_allowed))\n\t\t\t\t{\n\t\t\t\t\t$border_value['style'] = $style['border-style'];\n\t\t\t\t}\n\t\t\t\tif (isset($style['border-color']) && is_string($style['border-color']) && $style['border-color'][0]=='#')\n\t\t\t\t{\n\t\t\t\t\t$v = substr($style['border-color'],1,6);\n\t\t\t\t\t$v = strlen($v)==3 ? $v[0].$v[0].$v[1].$v[1].$v[2].$v[2] : $v;// expand cf0 => ccff00\n\t\t\t\t\t$border_value['color'] = \"FF\".strtoupper($v);\n\t\t\t\t}\n\t\t\t\t$style_indexes[$i]['border_idx'] = self::add_to_list_get_index($borders, json_encode($border_value));\n\t\t\t}\n\t\t\tif (isset($style['fill']) && is_string($style['fill']) && $style['fill'][0]=='#')\n\t\t\t{\n\t\t\t\t$v = substr($style['fill'],1,6);\n\t\t\t\t$v = strlen($v)==3 ? $v[0].$v[0].$v[1].$v[1].$v[2].$v[2] : $v;// expand cf0 => ccff00\n\t\t\t\t$style_indexes[$i]['fill_idx'] = self::add_to_list_get_index($fills, \"FF\".strtoupper($v) );\n\t\t\t}\n\t\t\tif (isset($style['halign']) && in_array($style['halign'],$horizontal_allowed))\n\t\t\t{\n\t\t\t\t$style_indexes[$i]['alignment'] = true;\n\t\t\t\t$style_indexes[$i]['halign'] = $style['halign'];\n\t\t\t}\n\t\t\tif (isset($style['valign']) && in_array($style['valign'],$vertical_allowed))\n\t\t\t{\n\t\t\t\t$style_indexes[$i]['alignment'] = true;\n\t\t\t\t$style_indexes[$i]['valign'] = $style['valign'];\n\t\t\t}\n\t\t\tif (isset($style['wrap_text']))\n\t\t\t{\n\t\t\t\t$style_indexes[$i]['alignment'] = true;\n\t\t\t\t$style_indexes[$i]['wrap_text'] = (bool)$style['wrap_text'];\n\t\t\t}\n\n\t\t\t$font = $default_font;\n\t\t\tif (isset($style['font-size']))\n\t\t\t{\n\t\t\t\t$font['size'] = floatval($style['font-size']);//floatval to allow \"10.5\" etc\n\t\t\t}\n\t\t\tif (isset($style['font']) && is_string($style['font']))\n\t\t\t{\n\t\t\t\tif ($style['font']=='Comic Sans MS') { $font['family']=4; }\n\t\t\t\tif ($style['font']=='Times New Roman') { $font['family']=1; }\n\t\t\t\tif ($style['font']=='Courier New') { $font['family']=3; }\n\t\t\t\t$font['name'] = strval($style['font']);\n\t\t\t}\n\t\t\tif (isset($style['font-style']) && is_string($style['font-style']))\n\t\t\t{\n\t\t\t\tif (strpos($style['font-style'], 'bold')!==false) { $font['bold'] = true; }\n\t\t\t\tif (strpos($style['font-style'], 'italic')!==false) { $font['italic'] = true; }\n\t\t\t\tif (strpos($style['font-style'], 'strike')!==false) { $font['strike'] = true; }\n\t\t\t\tif (strpos($style['font-style'], 'underline')!==false) { $font['underline'] = true; }\n\t\t\t}\n\t\t\tif (isset($style['color']) && is_string($style['color']) && $style['color'][0]=='#' )\n\t\t\t{\n\t\t\t\t$v = substr($style['color'],1,6);\n\t\t\t\t$v = strlen($v)==3 ? $v[0].$v[0].$v[1].$v[1].$v[2].$v[2] : $v;// expand cf0 => ccff00\n\t\t\t\t$font['color'] = \"FF\".strtoupper($v);\n\t\t\t}\n\t\t\tif ($font!=$default_font)\n\t\t\t{\n\t\t\t\t$style_indexes[$i]['font_idx'] = self::add_to_list_get_index($fonts, json_encode($font) );\n\t\t\t}\n\t\t}\n\t\treturn array('fills'=>$fills,'fonts'=>$fonts,'borders'=>$borders,'styles'=>$style_indexes );\n\t}\n\n\tprotected function writeStylesXML()\n\t{\n\t\t$r = self::styleFontIndexes();\n\t\t$fills = $r['fills'];\n\t\t$fonts = $r['fonts'];\n\t\t$borders = $r['borders'];\n\t\t$style_indexes = $r['styles'];\n\n\t\t$temporary_filename = $this->tempFilename();\n\t\t$file = new XLSXWriter_BuffererWriter($temporary_filename);\n\t\t$file->write('<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>'.\"\\n\");\n\t\t$file->write('<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">');\n\t\t$file->write('<numFmts count=\"'.count($this->number_formats).'\">');\n\t\tforeach($this->number_formats as $i=>$v) {\n\t\t\t$file->write('<numFmt numFmtId=\"'.(164+$i).'\" formatCode=\"'.self::xmlspecialchars($v).'\" />');\n\t\t}\n\t\t//$file->write(\t\t'<numFmt formatCode=\"GENERAL\" numFmtId=\"164\"/>');\n\t\t//$file->write(\t\t'<numFmt formatCode=\"[$$-1009]#,##0.00;[RED]\\-[$$-1009]#,##0.00\" numFmtId=\"165\"/>');\n\t\t//$file->write(\t\t'<numFmt formatCode=\"YYYY-MM-DD\\ HH:MM:SS\" numFmtId=\"166\"/>');\n\t\t//$file->write(\t\t'<numFmt formatCode=\"YYYY-MM-DD\" numFmtId=\"167\"/>');\n\t\t$file->write('</numFmts>');\n\n\t\t$file->write('<fonts count=\"'.(count($fonts)).'\">');\n\t\t$file->write(\t\t'<font><name val=\"Arial\"/><charset val=\"1\"/><family val=\"2\"/><sz val=\"10\"/></font>');\n\t\t$file->write(\t\t'<font><name val=\"Arial\"/><family val=\"0\"/><sz val=\"10\"/></font>');\n\t\t$file->write(\t\t'<font><name val=\"Arial\"/><family val=\"0\"/><sz val=\"10\"/></font>');\n\t\t$file->write(\t\t'<font><name val=\"Arial\"/><family val=\"0\"/><sz val=\"10\"/></font>');\n\n\t\tforeach($fonts as $font) {\n\t\t\tif (!empty($font)) { //fonts have 4 empty placeholders in array to offset the 4 static xml entries above\n\t\t\t\t$f = json_decode($font,true);\n\t\t\t\t$file->write('<font>');\n\t\t\t\t$file->write(\t'<name val=\"'.htmlspecialchars($f['name']).'\"/><charset val=\"1\"/><family val=\"'.intval($f['family']).'\"/>');\n\t\t\t\t$file->write(\t'<sz val=\"'.intval($f['size']).'\"/>');\n\t\t\t\tif (!empty($f['color'])) { $file->write('<color rgb=\"'.strval($f['color']).'\"/>'); }\n\t\t\t\tif (!empty($f['bold'])) { $file->write('<b val=\"true\"/>'); }\n\t\t\t\tif (!empty($f['italic'])) { $file->write('<i val=\"true\"/>'); }\n\t\t\t\tif (!empty($f['underline'])) { $file->write('<u val=\"single\"/>'); }\n\t\t\t\tif (!empty($f['strike'])) { $file->write('<strike val=\"true\"/>'); }\n\t\t\t\t$file->write('</font>');\n\t\t\t}\n\t\t}\n\t\t$file->write('</fonts>');\n\n\t\t$file->write('<fills count=\"'.(count($fills)).'\">');\n\t\t$file->write(\t'<fill><patternFill patternType=\"none\"/></fill>');\n\t\t$file->write(\t'<fill><patternFill patternType=\"gray125\"/></fill>');\n\t\tforeach($fills as $fill) {\n\t\t\tif (!empty($fill)) { //fills have 2 empty placeholders in array to offset the 2 static xml entries above\n\t\t\t\t$file->write('<fill><patternFill patternType=\"solid\"><fgColor rgb=\"'.strval($fill).'\"/><bgColor indexed=\"64\"/></patternFill></fill>');\n\t\t\t}\n\t\t}\n\t\t$file->write('</fills>');\n\n\t\t$file->write('<borders count=\"'.(count($borders)).'\">');\n        $file->write(    '<border diagonalDown=\"false\" diagonalUp=\"false\"><left/><right/><top/><bottom/><diagonal/></border>');\n\t\tforeach($borders as $border) {\n\t\t\tif (!empty($border)) { //fonts have an empty placeholder in the array to offset the static xml entry above\n\t\t\t\t$pieces = json_decode($border,true);\n\t\t\t\t$border_style = !empty($pieces['style']) ? $pieces['style'] : 'hair';\n\t\t\t\t$border_color = !empty($pieces['color']) ? '<color rgb=\"'.strval($pieces['color']).'\"/>' : '';\n\t\t\t\t$file->write('<border diagonalDown=\"false\" diagonalUp=\"false\">');\n\t\t\t\tforeach (array('left', 'right', 'top', 'bottom') as $side)\n\t\t\t\t{\n                    $show_side = in_array($side,$pieces['side']) ? true : false;\n\t\t\t\t\t$file->write($show_side ? \"<$side style=\\\"$border_style\\\">$border_color</$side>\" : \"<$side/>\");\n\t\t\t\t}\n\t\t\t\t$file->write(  '<diagonal/>');\n\t\t\t\t$file->write('</border>');\n\t\t\t}\n\t\t}\n\t\t$file->write('</borders>');\n\n\t\t$file->write('<cellStyleXfs count=\"20\">');\n\t\t$file->write(\t\t'<xf applyAlignment=\"true\" applyBorder=\"true\" applyFont=\"true\" applyProtection=\"true\" borderId=\"0\" fillId=\"0\" fontId=\"0\" numFmtId=\"164\">');\n\t\t$file->write(\t\t'<alignment horizontal=\"general\" indent=\"0\" shrinkToFit=\"false\" textRotation=\"0\" vertical=\"bottom\" wrapText=\"false\"/>');\n\t\t$file->write(\t\t'<protection hidden=\"false\" locked=\"true\"/>');\n\t\t$file->write(\t\t'</xf>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"1\" numFmtId=\"0\"/>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"1\" numFmtId=\"0\"/>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"2\" numFmtId=\"0\"/>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"2\" numFmtId=\"0\"/>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"0\" numFmtId=\"0\"/>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"0\" numFmtId=\"0\"/>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"0\" numFmtId=\"0\"/>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"0\" numFmtId=\"0\"/>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"0\" numFmtId=\"0\"/>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"0\" numFmtId=\"0\"/>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"0\" numFmtId=\"0\"/>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"0\" numFmtId=\"0\"/>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"0\" numFmtId=\"0\"/>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"0\" numFmtId=\"0\"/>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"1\" numFmtId=\"43\"/>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"1\" numFmtId=\"41\"/>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"1\" numFmtId=\"44\"/>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"1\" numFmtId=\"42\"/>');\n\t\t$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"true\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"1\" numFmtId=\"9\"/>');\n\t\t$file->write('</cellStyleXfs>');\n\n\t\t$file->write('<cellXfs count=\"'.(count($style_indexes)).'\">');\n\t\t//$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"false\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"0\" numFmtId=\"164\" xfId=\"0\"/>');\n\t\t//$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"false\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"0\" numFmtId=\"165\" xfId=\"0\"/>');\n\t\t//$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"false\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"0\" numFmtId=\"166\" xfId=\"0\"/>');\n\t\t//$file->write(\t\t'<xf applyAlignment=\"false\" applyBorder=\"false\" applyFont=\"false\" applyProtection=\"false\" borderId=\"0\" fillId=\"0\" fontId=\"0\" numFmtId=\"167\" xfId=\"0\"/>');\n\t\tforeach($style_indexes as $v)\n\t\t{\n\t\t\t$applyAlignment = isset($v['alignment']) ? 'true' : 'false';\n\t\t\t$wrapText = !empty($v['wrap_text']) ? 'true' : 'false';\n\t\t\t$horizAlignment = isset($v['halign']) ? $v['halign'] : 'general';\n\t\t\t$vertAlignment = isset($v['valign']) ? $v['valign'] : 'bottom';\n\t\t\t$applyBorder = isset($v['border_idx']) ? 'true' : 'false';\n\t\t\t$applyFont = 'true';\n\t\t\t$borderIdx = isset($v['border_idx']) ? intval($v['border_idx']) : 0;\n\t\t\t$fillIdx = isset($v['fill_idx']) ? intval($v['fill_idx']) : 0;\n\t\t\t$fontIdx = isset($v['font_idx']) ? intval($v['font_idx']) : 0;\n\t\t\t//$file->write('<xf applyAlignment=\"'.$applyAlignment.'\" applyBorder=\"'.$applyBorder.'\" applyFont=\"'.$applyFont.'\" applyProtection=\"false\" borderId=\"'.($borderIdx).'\" fillId=\"'.($fillIdx).'\" fontId=\"'.($fontIdx).'\" numFmtId=\"'.(164+$v['num_fmt_idx']).'\" xfId=\"0\"/>');\n\t\t\t$file->write('<xf applyAlignment=\"'.$applyAlignment.'\" applyBorder=\"'.$applyBorder.'\" applyFont=\"'.$applyFont.'\" applyProtection=\"false\" borderId=\"'.($borderIdx).'\" fillId=\"'.($fillIdx).'\" fontId=\"'.($fontIdx).'\" numFmtId=\"'.(164+$v['num_fmt_idx']).'\" xfId=\"0\">');\n\t\t\t$file->write('\t<alignment horizontal=\"'.$horizAlignment.'\" vertical=\"'.$vertAlignment.'\" textRotation=\"0\" wrapText=\"'.$wrapText.'\" indent=\"0\" shrinkToFit=\"false\"/>');\n\t\t\t$file->write('\t<protection locked=\"true\" hidden=\"false\"/>');\n\t\t\t$file->write('</xf>');\n\t\t}\n\t\t$file->write('</cellXfs>');\n\t\t$file->write(\t'<cellStyles count=\"6\">');\n\t\t$file->write(\t\t'<cellStyle builtinId=\"0\" customBuiltin=\"false\" name=\"Normal\" xfId=\"0\"/>');\n\t\t$file->write(\t\t'<cellStyle builtinId=\"3\" customBuiltin=\"false\" name=\"Comma\" xfId=\"15\"/>');\n\t\t$file->write(\t\t'<cellStyle builtinId=\"6\" customBuiltin=\"false\" name=\"Comma [0]\" xfId=\"16\"/>');\n\t\t$file->write(\t\t'<cellStyle builtinId=\"4\" customBuiltin=\"false\" name=\"Currency\" xfId=\"17\"/>');\n\t\t$file->write(\t\t'<cellStyle builtinId=\"7\" customBuiltin=\"false\" name=\"Currency [0]\" xfId=\"18\"/>');\n\t\t$file->write(\t\t'<cellStyle builtinId=\"5\" customBuiltin=\"false\" name=\"Percent\" xfId=\"19\"/>');\n\t\t$file->write(\t'</cellStyles>');\n\t\t$file->write('</styleSheet>');\n\t\t$file->close();\n\t\treturn $temporary_filename;\n\t}\n\n\tprotected function buildAppXML()\n\t{\n\t\t$app_xml=\"\";\n\t\t$app_xml.='<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>'.\"\\n\";\n\t\t$app_xml.='<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\">';\n\t\t$app_xml.='<TotalTime>0</TotalTime>';\n\t\t$app_xml.='<Company>'.self::xmlspecialchars($this->company).'</Company>';\n\t\t$app_xml.='</Properties>';\n\t\treturn $app_xml;\n\t}\n\n\tprotected function buildCoreXML()\n\t{\n\t\t$core_xml=\"\";\n\t\t$core_xml.='<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>'.\"\\n\";\n\t\t$core_xml.='<cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">';\n\t\t$core_xml.='<dcterms:created xsi:type=\"dcterms:W3CDTF\">'.date(\"Y-m-d\\TH:i:s.00\\Z\").'</dcterms:created>';//$date_time = '2014-10-25T15:54:37.00Z';\n\t\t$core_xml.='<dc:title>'.self::xmlspecialchars($this->title).'</dc:title>';\n\t\t$core_xml.='<dc:subject>'.self::xmlspecialchars($this->subject).'</dc:subject>';\n\t\t$core_xml.='<dc:creator>'.self::xmlspecialchars($this->author).'</dc:creator>';\n\t\tif (!empty($this->keywords)) {\n\t\t\t$core_xml.='<cp:keywords>'.self::xmlspecialchars(implode (\", \", (array)$this->keywords)).'</cp:keywords>';\n\t\t}\t\t\n\t\t$core_xml.='<dc:description>'.self::xmlspecialchars($this->description).'</dc:description>';\t\t\n\t\t$core_xml.='<cp:revision>0</cp:revision>';\n\t\t$core_xml.='</cp:coreProperties>';\n\t\treturn $core_xml;\n\t}\n\n\tprotected function buildRelationshipsXML()\n\t{\n\t\t$rels_xml=\"\";\n\t\t$rels_xml.='<?xml version=\"1.0\" encoding=\"UTF-8\"?>'.\"\\n\";\n\t\t$rels_xml.='<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">';\n\t\t$rels_xml.='<Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/>';\n\t\t$rels_xml.='<Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\"/>';\n\t\t$rels_xml.='<Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\"/>';\n\t\t$rels_xml.=\"\\n\";\n\t\t$rels_xml.='</Relationships>';\n\t\treturn $rels_xml;\n\t}\n\n\tprotected function buildWorkbookXML()\n\t{\n\t\t$i=0;\n\t\t$workbook_xml=\"\";\n\t\t$workbook_xml.='<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>'.\"\\n\";\n\t\t$workbook_xml.='<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\">';\n\t\t$workbook_xml.='<fileVersion appName=\"Calc\"/><workbookPr backupFile=\"false\" showObjects=\"all\" date1904=\"false\"/><workbookProtection/>';\n\t\t$workbook_xml.='<bookViews><workbookView activeTab=\"0\" firstSheet=\"0\" showHorizontalScroll=\"true\" showSheetTabs=\"true\" showVerticalScroll=\"true\" tabRatio=\"212\" windowHeight=\"8192\" windowWidth=\"16384\" xWindow=\"0\" yWindow=\"0\"/></bookViews>';\n\t\t$workbook_xml.='<sheets>';\n\t\tforeach($this->sheets as $sheet_name=>$sheet) {\n\t\t\t$sheetname = self::sanitize_sheetname($sheet->sheetname);\n\t\t\t$workbook_xml.='<sheet name=\"'.self::xmlspecialchars($sheetname).'\" sheetId=\"'.($i+1).'\" state=\"visible\" r:id=\"rId'.($i+2).'\"/>';\n\t\t\t$i++;\n\t\t}\n\t\t$workbook_xml.='</sheets>';\n\t\t$workbook_xml.='<definedNames>';\n\t\t$i=0;\n\t\tforeach($this->sheets as $sheet_name=>$sheet) {\n\t\t\tif ($sheet->auto_filter) {\n\t\t\t\t$sheetname = self::sanitize_sheetname($sheet->sheetname);\n\t\t\t\t$workbook_xml.='<definedName name=\"_xlnm._FilterDatabase\" localSheetId=\"'.$i.'\" hidden=\"1\">\\''.self::xmlspecialchars($sheetname).'\\'!$A$1:' . self::xlsCell($sheet->row_count - 1, count($sheet->columns) - 1, true) . '</definedName>';\n\t\t\t\t$i++;\t\n\t\t\t}\n\t\t}\n\t\t$workbook_xml.='</definedNames>';\n\t\t$workbook_xml.='<calcPr iterateCount=\"100\" refMode=\"A1\" iterate=\"false\" iterateDelta=\"0.001\"/></workbook>';\n\t\treturn $workbook_xml;\n\t}\n\n\tprotected function buildWorkbookRelsXML()\n\t{\n\t\t$i=0;\n\t\t$wkbkrels_xml=\"\";\n\t\t$wkbkrels_xml.='<?xml version=\"1.0\" encoding=\"UTF-8\"?>'.\"\\n\";\n\t\t$wkbkrels_xml.='<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">';\n\t\t$wkbkrels_xml.='<Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/>';\n\t\tforeach($this->sheets as $sheet_name=>$sheet) {\n\t\t\t$wkbkrels_xml.='<Relationship Id=\"rId'.($i+2).'\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/'.($sheet->xmlname).'\"/>';\n\t\t\t$i++;\n\t\t}\n\t\t$wkbkrels_xml.=\"\\n\";\n\t\t$wkbkrels_xml.='</Relationships>';\n\t\treturn $wkbkrels_xml;\n\t}\n\n\tprotected function buildContentTypesXML()\n\t{\n\t\t$content_types_xml=\"\";\n\t\t$content_types_xml.='<?xml version=\"1.0\" encoding=\"UTF-8\"?>'.\"\\n\";\n\t\t$content_types_xml.='<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\">';\n\t\t$content_types_xml.='<Override PartName=\"/_rels/.rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>';\n\t\t$content_types_xml.='<Override PartName=\"/xl/_rels/workbook.xml.rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>';\n\t\tforeach($this->sheets as $sheet_name=>$sheet) {\n\t\t\t$content_types_xml.='<Override PartName=\"/xl/worksheets/'.($sheet->xmlname).'\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\"/>';\n\t\t}\n\t\t$content_types_xml.='<Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\"/>';\n\t\t$content_types_xml.='<Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\"/>';\n\t\t$content_types_xml.='<Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\"/>';\n\t\t$content_types_xml.='<Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\"/>';\n\t\t$content_types_xml.=\"\\n\";\n\t\t$content_types_xml.='</Types>';\n\t\treturn $content_types_xml;\n\t}\n\n\t//------------------------------------------------------------------\n\t/*\n\t * @param $row_number int, zero based\n\t * @param $column_number int, zero based\n\t * @param $absolute bool\n\t * @return Cell label/coordinates, ex: A1, C3, AA42 (or if $absolute==true: $A$1, $C$3, $AA$42)\n\t * */\n\tpublic static function xlsCell($row_number, $column_number, $absolute=false)\n\t{\n\t\t$n = $column_number;\n\t\tfor($r = \"\"; $n >= 0; $n = intval($n / 26) - 1) {\n\t\t\t$r = chr($n%26 + 0x41) . $r;\n\t\t}\n\t\tif ($absolute) {\n\t\t\treturn '$' . $r . '$' . ($row_number+1);\n\t\t}\n\t\treturn $r . ($row_number+1);\n\t}\n\t//------------------------------------------------------------------\n\tpublic static function log($string)\n\t{\n\t\t//file_put_contents(\"php://stderr\", date(\"Y-m-d H:i:s:\").rtrim(is_array($string) ? json_encode($string) : $string).\"\\n\");\n\t\terror_log(date(\"Y-m-d H:i:s:\").rtrim(is_array($string) ? json_encode($string) : $string).\"\\n\");\n\t}\n\t//------------------------------------------------------------------\n\tpublic static function sanitize_filename($filename) //http://msdn.microsoft.com/en-us/library/aa365247%28VS.85%29.aspx\n\t{\n\t\t$nonprinting = array_map('chr', range(0,31));\n\t\t$invalid_chars = array('<', '>', '?', '\"', ':', '|', '\\\\', '/', '*', '&');\n\t\t$all_invalids = array_merge($nonprinting,$invalid_chars);\n\t\treturn str_replace($all_invalids, \"\", $filename);\n\t}\n\t//------------------------------------------------------------------\n\tpublic static function sanitize_sheetname($sheetname) \n\t{\n\t\tstatic $badchars  = '\\\\/?*:[]';\n\t\tstatic $goodchars = '        ';\n\t\t$sheetname = strtr($sheetname, $badchars, $goodchars);\n\t\t$sheetname = function_exists('mb_substr') ? mb_substr($sheetname, 0, 31) : substr($sheetname, 0, 31);\n\t\t$sheetname = trim(trim(trim($sheetname),\"'\"));//trim before and after trimming single quotes\n\t\treturn !empty($sheetname) ? $sheetname : 'Sheet'.((rand()%900)+100);\n\t}\n\t//------------------------------------------------------------------\n\tpublic static function xmlspecialchars($val)\n\t{\n\t\t//note, badchars does not include \\t\\n\\r (\\x09\\x0a\\x0d)\n\t\tstatic $badchars = \"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0b\\x0c\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x7f\";\n\t\tstatic $goodchars = \"                              \";\n\t\treturn strtr(htmlspecialchars((string)$val, ENT_QUOTES | ENT_XML1 | ENT_SUBSTITUTE), $badchars, $goodchars);//strtr appears to be faster than str_replace\n\t}\n\t//------------------------------------------------------------------\n\tpublic static function array_first_key(array $arr)\n\t{\n\t\treset($arr);\n\t\t$first_key = key($arr);\n\t\treturn $first_key;\n\t}\n\t//------------------------------------------------------------------\n\tprivate static function determineNumberFormatType($num_format)\n\t{\n\t\t$num_format = preg_replace(\"/\\[(Black|Blue|Cyan|Green|Magenta|Red|White|Yellow)\\]/i\", \"\", $num_format);\n\t\tif ($num_format=='GENERAL') return 'n_auto';\n\t\tif ($num_format=='@') return 'n_string';\n\t\tif ($num_format=='0') return 'n_numeric';\n\t\tif (preg_match('/[H]{1,2}:[M]{1,2}(?![^\"]*+\")/i', $num_format)) return 'n_datetime';\n\t\tif (preg_match('/[M]{1,2}:[S]{1,2}(?![^\"]*+\")/i', $num_format)) return 'n_datetime';\n\t\tif (preg_match('/[Y]{2,4}(?![^\"]*+\")/i', $num_format)) return 'n_date';\n\t\tif (preg_match('/[D]{1,2}(?![^\"]*+\")/i', $num_format)) return 'n_date';\n\t\tif (preg_match('/[M]{1,2}(?![^\"]*+\")/i', $num_format)) return 'n_date';\n\t\tif (preg_match('/$(?![^\"]*+\")/', $num_format)) return 'n_numeric';\n\t\tif (preg_match('/%(?![^\"]*+\")/', $num_format)) return 'n_numeric';\n\t\tif (preg_match('/0(?![^\"]*+\")/', $num_format)) return 'n_numeric';\n\t\treturn 'n_auto';\n\t}\n\t//------------------------------------------------------------------\n\tprivate static function numberFormatStandardized($num_format)\n\t{\n\t\tif ($num_format=='money') { $num_format='dollar'; }\n\t\tif ($num_format=='number') { $num_format='integer'; }\n\n\t\tif      ($num_format=='string')   $num_format='@';\n\t\telse if ($num_format=='integer')  $num_format='0';\n\t\telse if ($num_format=='date')     $num_format='YYYY-MM-DD';\n\t\telse if ($num_format=='datetime') $num_format='YYYY-MM-DD HH:MM:SS';\n        else if ($num_format=='time')     $num_format='HH:MM:SS';\n\t\telse if ($num_format=='price')    $num_format='#,##0.00';\n\t\telse if ($num_format=='dollar')   $num_format='[$$-1009]#,##0.00;[RED]-[$$-1009]#,##0.00';\n\t\telse if ($num_format=='euro')     $num_format='#,##0.00 [$€-407];[RED]-#,##0.00 [$€-407]';\n\t\t$ignore_until='';\n\t\t$escaped = '';\n\t\tfor($i=0,$ix=strlen($num_format); $i<$ix; $i++)\n\t\t{\n\t\t\t$c = $num_format[$i];\n\t\t\tif ($ignore_until=='' && $c=='[')\n\t\t\t\t$ignore_until=']';\n\t\t\telse if ($ignore_until=='' && $c=='\"')\n\t\t\t\t$ignore_until='\"';\n\t\t\telse if ($ignore_until==$c)\n\t\t\t\t$ignore_until='';\n\t\t\tif ($ignore_until=='' && ($c==' ' || $c=='-'  || $c=='('  || $c==')') && ($i==0 || $num_format[$i-1]!='_'))\n\t\t\t\t$escaped.= \"\\\\\".$c;\n\t\t\telse\n\t\t\t\t$escaped.= $c;\n\t\t}\n\t\treturn $escaped;\n\t}\n\t//------------------------------------------------------------------\n\tpublic static function add_to_list_get_index(&$haystack, $needle)\n\t{\n\t\t$existing_idx = array_search($needle, $haystack, $strict=true);\n\t\tif ($existing_idx===false)\n\t\t{\n\t\t\t$existing_idx = count($haystack);\n\t\t\t$haystack[] = $needle;\n\t\t}\n\t\treturn $existing_idx;\n\t}\n\t//------------------------------------------------------------------\n\tpublic static function convert_date_time($date_input) //thanks to Excel::Writer::XLSX::Worksheet.pm (perl)\n\t{\n\t\t$days    = 0;    # Number of days since epoch\n\t\t$seconds = 0;    # Time expressed as fraction of 24h hours in seconds\n\t\t$year=$month=$day=0;\n\t\t$hour=$min  =$sec=0;\n\n\t\t$date_time = $date_input;\n\t\tif (preg_match(\"/(\\d{4})\\-(\\d{2})\\-(\\d{2})/\", $date_time, $matches))\n\t\t{\n\t\t\tlist($junk,$year,$month,$day) = $matches;\n\t\t}\n\t\tif (preg_match(\"/(\\d+):(\\d{2}):(\\d{2})/\", $date_time, $matches))\n\t\t{\n\t\t\tlist($junk,$hour,$min,$sec) = $matches;\n\t\t\t$seconds = ( $hour * 60 * 60 + $min * 60 + $sec ) / ( 24 * 60 * 60 );\n\t\t}\n\n\t\t//using 1900 as epoch, not 1904, ignoring 1904 special case\n\n\t\t# Special cases for Excel.\n\t\tif (\"$year-$month-$day\"=='1899-12-31')  return $seconds      ;    # Excel 1900 epoch\n\t\tif (\"$year-$month-$day\"=='1900-01-00')  return $seconds      ;    # Excel 1900 epoch\n\t\tif (\"$year-$month-$day\"=='1900-02-29')  return 60 + $seconds ;    # Excel false leapday\n\n\t\t# We calculate the date by calculating the number of days since the epoch\n\t\t# and adjust for the number of leap days. We calculate the number of leap\n\t\t# days by normalising the year in relation to the epoch. Thus the year 2000\n\t\t# becomes 100 for 4 and 100 year leapdays and 400 for 400 year leapdays.\n\t\t$epoch  = 1900;\n\t\t$offset = 0;\n\t\t$norm   = 300;\n\t\t$range  = $year - $epoch;\n\n\t\t# Set month days and check for leap year.\n\t\t$leap = (($year % 400 == 0) || (($year % 4 == 0) && ($year % 100)) ) ? 1 : 0;\n\t\t$mdays = array( 31, ($leap ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 );\n\n\t\t# Some boundary checks\n\t\tif ($year!=0 || $month !=0 || $day!=0)\n\t\t{\n\t\t\tif($year < $epoch || $year > 9999) return 0;\n\t\t\tif($month < 1     || $month > 12)  return 0;\n\t\t\tif($day < 1       || $day > $mdays[ $month - 1 ]) return 0;\n\t\t}\n\n\t\t# Accumulate the number of days since the epoch.\n\t\t$days = $day;    # Add days for current month\n\t\t$days += array_sum( array_slice($mdays, 0, $month-1 ) );    # Add days for past months\n\t\t$days += $range * 365;                      # Add days for past years\n\t\t$days += intval( ( $range ) / 4 );             # Add leapdays\n\t\t$days -= intval( ( $range + $offset ) / 100 ); # Subtract 100 year leapdays\n\t\t$days += intval( ( $range + $offset + $norm ) / 400 );  # Add 400 year leapdays\n\t\t$days -= $leap;                                      # Already counted above\n\n\t\t# Adjust for Excel erroneously treating 1900 as a leap year.\n\t\tif ($days > 59) { $days++;}\n\n\t\treturn $days + $seconds;\n\t}\n\t//------------------------------------------------------------------\n}\n\nclass XLSXWriter_BuffererWriter\n{\n\tprotected $fd=null;\n\tprotected $buffer='';\n\tprotected $check_utf8=false;\n\n\tpublic function __construct($filename, $fd_fopen_flags='w', $check_utf8=false)\n\t{\n\t\t$this->check_utf8 = $check_utf8;\n\t\t$this->fd = fopen($filename, $fd_fopen_flags);\n\t\tif ($this->fd===false) {\n\t\t\tXLSXWriter::log(\"Unable to open $filename for writing.\");\n\t\t}\n\t}\n\n\tpublic function write($string)\n\t{\n\t\t$this->buffer.=$string;\n\t\tif (isset($this->buffer[8191])) {\n\t\t\t$this->purge();\n\t\t}\n\t}\n\n\tprotected function purge()\n\t{\n\t\tif ($this->fd) {\n\t\t\tif ($this->check_utf8 && !self::isValidUTF8($this->buffer)) {\n\t\t\t\tXLSXWriter::log(\"Error, invalid UTF8 encoding detected.\");\n\t\t\t\t$this->check_utf8 = false;\n\t\t\t}\n\t\t\tfwrite($this->fd, $this->buffer);\n\t\t\t$this->buffer='';\n\t\t}\n\t}\n\n\tpublic function close()\n\t{\n\t\t$this->purge();\n\t\tif ($this->fd) {\n\t\t\tfclose($this->fd);\n\t\t\t$this->fd=null;\n\t\t}\n\t}\n\n\tpublic function __destruct()\n\t{\n\t\t$this->close();\n\t}\n\n\tpublic function ftell()\n\t{\n\t\tif ($this->fd) {\n\t\t\t$this->purge();\n\t\t\treturn ftell($this->fd);\n\t\t}\n\t\treturn -1;\n\t}\n\n\tpublic function fseek($pos)\n\t{\n\t\tif ($this->fd) {\n\t\t\t$this->purge();\n\t\t\treturn fseek($this->fd, $pos);\n\t\t}\n\t\treturn -1;\n\t}\n\n\tprotected static function isValidUTF8($string)\n\t{\n\t\tif (function_exists('mb_check_encoding'))\n\t\t{\n\t\t\treturn mb_check_encoding($string, 'UTF-8') ? true : false;\n\t\t}\n\t\treturn preg_match(\"//u\", $string) ? true : false;\n\t}\n}\n\n\n\n// vim: set filetype=php expandtab tabstop=4 shiftwidth=4 autoindent smartindent:\n"
        }
      ]
    }
  ]
}