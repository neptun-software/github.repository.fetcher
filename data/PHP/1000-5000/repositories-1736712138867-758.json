{
  "metadata": {
    "timestamp": 1736712138867,
    "page": 758,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "atoum/atoum",
      "stars": 1443,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".codeclimate.yml",
          "type": "blob",
          "size": 0.1748046875,
          "content": "engines:\n    phpcodesniffer:\n        enabled: false\n\n    phpmd:\n        enabled: true\n        checks:\n            Controversial/CamelCaseClassName:\n                enabled: false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0517578125,
          "content": ".php-cs-fixer.cache\ncomposer.lock\nvendor/\n.atoum.php\n"
        },
        {
          "name": ".php-cs-fixer.php",
          "type": "blob",
          "size": 1.1591796875,
          "content": "<?php\n\nuse PhpCsFixer as CS;\n\n$finder = CS\\Finder::create()\n    ->files()\n        ->name(__FILE__)\n        ->name('*.php')\n        ->name('*.php.dist')\n        ->notPath('resources/templates')\n        ->in(__DIR__)\n;\n\nreturn\n    (new CS\\Config())\n        ->setRules([\n            '@PSR12'                             => true,\n            'array_syntax'                       => ['syntax' => 'short'],\n            'blank_line_after_opening_tag'       => true,\n            'cast_spaces'                        => true,\n            'concat_space'                       => ['spacing' => 'one'],\n            'native_function_casing'             => true,\n            'no_alias_functions'                 => true,\n            'no_blank_lines_after_class_opening' => true,\n            'no_leading_import_slash'            => true,\n            'no_unused_imports'                  => true,\n            'no_whitespace_in_blank_line'        => true,\n            'ordered_imports'                    => true,\n            'phpdoc_no_access'                   => true,\n            'self_accessor'                      => true,\n        ])\n        ->setRiskyAllowed(true)\n        ->setFinder($finder)\n;\n"
        },
        {
          "name": "ABOUT",
          "type": "blob",
          "size": 0.06640625,
          "content": "atoum is a simple, modern and intuitive PHP unit testing framework.\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 21.8271484375,
          "content": "# `dev-master`\n\n# 4.3.0 - unreleased\n\n* [#899](https://github.com/atoum/atoum/pull/899) Fix PHP 8.4 deprecations ([@cedric-anne])\n\n# 4.2.0 - 2023-07-30\n\n* [#893](https://github.com/atoum/atoum/pull/893) Drop PHP 7.4 support ([@cedric-anne])\n* [#892](https://github.com/atoum/atoum/pull/892) Fix `null`, `true` and `false` type handling ([@cedric-anne])\n* [#891](https://github.com/atoum/atoum/pull/891) Update tested PHP versions ([@cedric-anne])\n* [#890](https://github.com/atoum/atoum/pull/890) Fix duplicate variable declaration on PHP 8.3 ([@cedric-anne])\n\n# 4.1.0 - 2022-11-20\n\n* [#883](https://github.com/atoum/atoum/pull/883) and [#884](https://github.com/atoum/atoum/pull/884) Handle `static` return type in mock generator ([@shavounet])\n* [#881](https://github.com/atoum/atoum/pull/881) Fix PHP 8.2 compatibility issues ([@cedric-anne])\n* [#868](https://github.com/atoum/atoum/pull/868) Drop PHP 7.2 and PHP 7.3 support ([@cedric-anne])\n\n# 4.0.3 - 2021-10-22\n\n* [#876](https://github.com/atoum/atoum/pull/876) Properly handle output made in setUp() tearDown() and afterTestMethod() ([@cedric-anne])\n* [#873](https://github.com/atoum/atoum/pull/873) Migrate lint job on Github Actions ([@cedric-anne])\n* [#872](https://github.com/atoum/atoum/pull/872) Migrate Windows test job on Github Actions and add a MacOS test job ([@cedric-anne])\n* [#871](https://github.com/atoum/atoum/pull/871) Fix PHP8.1 compatibility issue related to unexpected arguments types ([@cedric-anne])\n\n# 4.0.2 - 2021-10-10\n\n* [#870](https://github.com/atoum/atoum/pull/870) Handle tentative return types in mocked methods ([@cedric-anne])\n\n# 4.0.1 - 2021-10-10\n\n* [#865](https://github.com/atoum/atoum/pull/865) Warning about return type break ([@cedric-anne])\n* [#864](https://github.com/atoum/atoum/pull/864) Fix UnionType handling in mock generator ([@cedric-anne])\n* [#869](https://github.com/atoum/atoum/pull/869) Fix deprecated usage of addcslashes ([@cedric-anne])\n* [#860](https://github.com/atoum/atoum/pull/860) Fix PHP8.1 compatibility issue related to missing return type & unserialize ([@cedric-anne])\n* [#858](https://github.com/atoum/atoum/pull/858) Fix PHP8.0 compatibility and CI matrix ([@villfa])\n* [#853](https://github.com/atoum/atoum/pull/853) Handle usage of assertions in `test::afterTestMethod()` ([@cedric-anne])\n\n# 4.0.0 - 2020-11-21\n\n## BC\n\n* [#707](https://github.com/atoum/atoum/pull/707) Remove ide extension from atoum core ([@Grummfy])\n* [#852](https://github.com/atoum/atoum/pull/852) Rename namespace \\mageekguy\\atoum to \\atoum\\atoum ([@Grummfy])\n* [#750](https://github.com/atoum/atoum/pull/750) Remove implementation of test hooks ([@jubianchi])\n* [#843](https://github.com/atoum/atoum/pull/843) & [#844](https://github.com/atoum/atoum/pull/844) Compatibility with PHP 7 & 8 ([@cedric-anne]) \n\n## bugfixes\n\n* [#850](https://github.com/atoum/atoum/pull/850) Fix some static call ([@idetinkin])\n\n## others\n\n* [#846](https://github.com/atoum/atoum/pull/846) Fix code styles ([@cedric-anne])\n* [#845](https://github.com/atoum/atoum/pull/845) Fix StyleCi configuration ([@cedric-anne])\n\n# 3.4.2 - 2020-03-04\n\n* [#841](https://github.com/atoum/atoum/pull/841) Fix variadic support when you use all is interface in your mock ([@Grummfy])\n\n# 3.4.1 - 2020-01-22\n\n* [#840](https://github.com/atoum/atoum/pull/840) Remove unnecessary imports ([@Hywan])\n* [#835](https://github.com/atoum/atoum/pull/835) Fix deprecated, unparenthesized (PHP 7.4) ([@trasher])\n* [#830](https://github.com/atoum/atoum/pull/830) Add 7.4 to Travis ([@remicollet])\n* [#833](https://github.com/atoum/atoum/pull/833) Patch CLI output ([@Grummfy])\n* [#829](https://github.com/atoum/atoum/pull/829) fix appvoyer build ([@cedric-anne])\n* [#827](https://github.com/atoum/atoum/pull/827) Fix “`ReflectionType::__toString()` is deprecated” ([@cedric-anne])\n* [#777](https://github.com/atoum/atoum/pull/777) cli output changed for displaying errors and exceptions clearly ([@macintoshplus])\n\n# 3.3.0 - 2018-03-15\n\n* [#771](https://github.com/atoum/atoum/pull/771) Normalize and simplify the asserter name when a test case fails ([@hywan])\n* [#754](https://github.com/atoum/atoum/pull/754) Add the dot report ([@jubianchi])\n* [#769](https://github.com/atoum/atoum/pull/769) CLI: Align options to the left, and increase contrast ([@hywan])\n* [#757](https://github.com/atoum/atoum/pull/757) Take the error reporting level into account to exit the runner ([@hywan])\n* [#752](https://github.com/atoum/atoum/pull/752) Add an os annotation to only run tests on specific OS ([@jubianchi])\n* [#585](https://github.com/atoum/atoum/pull/585) Memory usage is based on the peak & real allocations ([@hywan])\n* [#740](https://github.com/atoum/atoum/pull/740) String asserter now has `notMatches` assertion ([@fvilpoix])\n\n## Bugfix\n\n* [#756](https://github.com/atoum/atoum/pull/756) Configuration, autoloader and bootstrap files are correctly loaded when using the PHAR ([@jubianchi])\n* [#755](https://github.com/atoum/atoum/pull/755) String asserter's failure messages are clear ([@jubianchi])\n* [#773](https://github.com/atoum/atoum/pull/773) Directory is the current working directory ([@hywan])\n* [#770](https://github.com/atoum/atoum/pull/770) Fix path to the runner for the help ([@hywan])\n* [#768](https://github.com/atoum/atoum/pull/768) Fix typos in the CLI help ([@hywan])\n* [#767](https://github.com/atoum/atoum/pull/767) Fix typos in the exception messages ([@hywan])\n\n# 3.2.0 - 2017-09-07\n\n* [#739](https://github.com/atoum/atoum/pull/739) Avoid many memory allocations in error report field ([@hywan])\n* [#736](https://github.com/atoum/atoum/pull/736) Display clear errors when mocking function fails ([@jubianchi])\n* [#737](https://github.com/atoum/atoum/pull/737) Command line switches override configuration file directives ([@jubianchi])\n* [#733](https://github.com/atoum/atoum/pull/733) Uncompleted methods make atoum exit with an error code ([@jubianchi])\n* [#734](https://github.com/atoum/atoum/pull/734) The `exception::isInstanceOf` asserter correctly works with interfaces ([@jubianchi])\n* [#731](https://github.com/atoum/atoum/pull/731) Remove dependency on `ext-session` ([@jubianchi], [@hywan])\n\n## Bugfix\n\n* [#746](https://github.com/atoum/atoum/pull/746) CLI commands are correctly escaped ([@agallou], [@jubianchi])\n\n# 3.1.1 - 2017-07-19\n\n## Bugfix\n\n* [#727](https://github.com/atoum/atoum/pull/727) Add alias on `phpObject` to restore compatibility ([@grummfy])\n\n# 3.1.0 - 2017-07-11\n\n* [#726](https://github.com/atoum/atoum/pull/726) Remove an autoloader cache warning ([@hywan])\n* [#719](https://github.com/atoum/atoum/pull/719) Add nullable type support in the mock engine ([@grummfy])\n* [#723](https://github.com/atoum/atoum/pull/724) `object` is a reserved keyword as of PHP 7.2 ([@trasher])\n* [#713](https://github.com/atoum/atoum/pull/713) Results are folded on Travis CI ([@jubianchi])\n* [#709](https://github.com/atoum/atoum/pull/709) Exception asserter now has `isInstanceOf` without parenthesis ([@guiled])\n* [#705](https://github.com/atoum/atoum/pull/705) Stream asserter now has `isRead` and `isWritten` assertion (without brackets) ([@guiled])\n* [#701](https://github.com/atoum/atoum/pull/701) Mock generator supports `strict_types` ([@jubianchi])\n\n## Bugfix\n\n* [#701](https://github.com/atoum/atoum/pull/701) Mock generator correctly handles `void` return type ([@jubianchi])\n\n# 3.0.0 - 2017-02-22\n\n* [#664](https://github.com/atoum/atoum/pull/664) New asserter: `generator` ([@agallou])\n* [#694](https://github.com/atoum/atoum/pull/694) The VIM plugin has been moved to atoum/vim-plugin ([@jubianchi])\n* [#615](https://github.com/atoum/atoum/pull/615) Remove reserved keyword, replace void by blank ([@vonglasow])\n* [#643](https://github.com/atoum/atoum/pull/643) atoum now requires PHP `>=5.6.0` ([@jubianchi])\n\n## Bugfix\n\n* [#691](https://github.com/atoum/atoum/pull/691) Fix how annotations are extracted. Only those actually starting with `@` are handled ([@jubianchi])\n* [#688](https://github.com/atoum/atoum/pull/688) Avoid reporting incorrect atoum path ([@hywan])\n\n# 2.9.0 - 2017-02-11\n\n* [#667](https://github.com/atoum/atoum/pull/667) Assert on array values using `mageekguy\\atoum\\asserters\\phpArray::$values` ([@krtek4])\n* [#682](https://github.com/atoum/atoum/pull/682) Do not call parent class when mocking as interface ([@mageekguy])\n* [#679](https://github.com/atoum/atoum/pull/679) Copy `PHP_IDE_CONFIG` into forked processes ([@mvrhov])\n* [#678](https://github.com/atoum/atoum/pull/678) Each mock instance can be made unique by calling `eachInstanceIsUnique` on the mock generator ([@mageekguy])\n\n# 2.9.0-beta1 - 2016-10-08\n\n* [#604](https://github.com/atoum/atoum/pull/604) Add a `addConfigurationCallable` method on the runner to allow extensions to register themselves ([@agallou], [@jubianchi])\n* [#634](https://github.com/atoum/atoum/pull/634) Only one extension of a kind can be loaded. Extensions can be unloaded ([@agallou], [@jubianchi])\n* [#619](https://github.com/atoum/atoum/pull/619) Add branches and paths coverage support to AtoumTask for Phing ([@oxman])\n\n## Bugfix\n\n* [#633](https://github.com/atoum/atoum/pull/633) Mock generator correctly handles the `self` return type ([@jubianchi])\n* [#637](https://github.com/atoum/atoum/pull/637) Errors are displayed in the TAP report ([@jubianchi])\n\n# 2.8.2 - 2016-08-12\n\n* [#620](https://github.com/atoum/atoum/pull/620) Add HTML coverage report from [reports extension](https://github.com/atoum/reports-extension) to AtoumTask for Phing ([@oxman])\n* [#612](https://github.com/atoum/atoum/pull/612) Add telemetry support to AtoumTask ([@oxman])\n\n# 2.8.1 - 2016-07-01\n\n* [#611](https://github.com/atoum/atoum/pull/611) Exclude vendor and composer.lock from phar ([@jubianchi], [@agallou])\n\n# 2.8.0 - 2016-07-01\n\n* [#605](https://github.com/atoum/atoum/pull/605) Automatically include Composer's autoloader if it exists ([@jubianchi], [@agallou])\n* [#605](https://github.com/atoum/atoum/pull/605) Handle `.autoloader.atoum.php` files to define tests autoloader ([@jubianchi])\n* [#605](https://github.com/atoum/atoum/pull/605) Add the `--autoloader-file`/`-af` CLI argument to define which autoloader file to user ([@jubianchi])\n* [#596](https://github.com/atoum/atoum/pull/596) Test methods' tags are inherited from test classes ([@jubianchi])\n\n# 2.7.0 - 2016-06-20\n\n* [#594](https://github.com/atoum/atoum/pull/594) Add telemtry report to CI builds ([@jubianchi])\n\n## Bugfix\n\n* [#600](https://github.com/atoum/atoum/pull/600) Reports override correctly when using -ulr/-utr ([@jubianchi])\n* [#593](https://github.com/atoum/atoum/pull/593) Assertions on PHP 7 exceptions/throwables/errors are now working correctly ([@jubianchi])\n\n# 2.6.1 - 2016-04-08\n\n* [#590](https://github.com/atoum/atoum/pull/590) The `dateTime` asserter now fully supports `\\dateTimeImmutable` ([@fferriere])\n\n# 2.6.0 - 2016-03-08\n\n* [#569](https://github.com/atoum/atoum/pull/569) Use in-memory cache for resolved asserters ([@jubianchi])\n* [#567](https://github.com/atoum/atoum/pull/567) Extract loop logic from runner and add a looper interface ([@jubianchi], [@agallou])\n\n## Bugfix\n\n* [#583](https://github.com/atoum/atoum/pull/578) Fix asserting on zeroes with the phpFloat asserter ([@jubianchi])\n* [#581](https://github.com/atoum/atoum/pull/578) Fix how arguments are passed when using loop mode ([@jubianchi])\n* [#578](https://github.com/atoum/atoum/pull/578) Fix arguments priority parsing when they have no priority ([@agallou])\n\n# 2.5.2 - 2016-01-28\n\n* [#561](https://github.com/atoum/atoum/pull/561) Use the fully qualified name when the return type is not `builtin` ([@GuillaumeDievart])\n\n# 2.5.1 - 2016-01-18\n\n* [#556](https://github.com/atoum/atoum/pull/556) The autoloader now handles traits ([@jubianchi])\n\n# 2.5.0 - 2016-01-08\n\n* [#539](https://github.com/atoum/atoum/pull/539) Add a `newMockInstance` helper method on test class ([@Grummfy])\n* [#548](https://github.com/atoum/atoum/pull/548) The `dateTime` asserter now supports `\\dateTimeImmutable` ([@jubianchi])\n* [#540](https://github.com/atoum/atoum/pull/540) Assert on child arrays using the `phpArray` asserter ([@jubianchi])\n* [#541](https://github.com/atoum/atoum/pull/541) New `toArray` (along with `toArray` method on `phpString` and `object` asserters) and `iterator` asserters ([@jubianchi])\n* [#535](https://github.com/atoum/atoum/pull/535) New `resource` asserter group (with `isOfType` or `is*` wildcard like `isStream`) ([@hywan])\n* [#529](https://github.com/atoum/atoum/pull/529) Allow extensions to define configuration ([@jubianchi])\n* [#496](https://github.com/atoum/atoum/pull/496) Mock generator supports variadic arguments passed by reference ([@jubianchi])\n* [#496](https://github.com/atoum/atoum/pull/496) Auto generate and inject mocks in test methods ([@jubianchi])\n\n## Bugfix\n\n* [#350](https://github.com/atoum/atoum/pull/350) PHAR can be built on Windows ([@kao98])\n* [#530](https://github.com/atoum/atoum/pull/530) Extracted mocked method signature generation to make it work with visibility extension ([@jubianchi])\n* [#537](https://github.com/atoum/atoum/pull/537) `exception` asserter handles PHP 7 throwables ([@jubianchi])\n\n# 2.4.0 - 2015-12-04\n\n* [#520](https://github.com/atoum/atoum/pull/520) Introduce the constant mocker ([@hywan])\n* [#518](https://github.com/atoum/atoum/pull/518) Update atoum's PHAR against Github releases with `--github-update` ([@jubianchi])\n* [#515](https://github.com/atoum/atoum/pull/515) Fix PHP7 support in the basic resolver ([@hywan])\n* [#516](https://github.com/atoum/atoum/pull/516) Add a \"callStaticOnTestedClass\" method ([@mikaelrandy])\n* [#530](https://github.com/atoum/atoum/pull/530) Reset PHP7 configuration for tests ([@jubianchi])\n\n## Bugfix\n\n* [#526](https://github.com/atoum/atoum/pull/526) Mock asserter is not case sensitive ([@mageekguy])\n\n\n# 2.3.0 - 2015-10-22\n\n* [#501](https://github.com/atoum/atoum/pull/501) Add atoum path and version to default CLI report ([@jubianchi])\n* [#502](https://github.com/atoum/atoum/pull/502) Improve `setTestNamespace` parameters validation ([@remicollet])\n\n## Bugfix\n\n* [f28a6ee](https://github.com/atoum/atoum/commit/f28a6eeb6de80ccea3619e228b7a16ddd03637fc) \"DOMElement::setIdAttribute(): ID otherMethod already defined\" error ([@jubianchi])\n\n# 2.2.2 - 2015-09-17\n\n* [#497](https://github.com/atoum/atoum/pull/497) Fix fail message forwarding from `match` to `matches` in string asserter ([@vonglasow])\n* [#477](https://github.com/atoum/atoum/pull/477) Fix exit code when there is something wrong in the configuration file ([@jubianchi])\n\n# 2.2.1 - 2015-08-27\n\n* [#491](https://github.com/atoum/atoum/pull/491) Fix `getTestMethodPrefix` when the prefix is `\"0\"` ([@remicollet])\n* [#384](https://github.com/atoum/atoum/pull/384) Short syntax for base assertions ([@jubianchi])\n\n# 2.2.0 - 2015-07-31\n\n* [#467](https://github.com/atoum/atoum/pull/467) Hide classes and methods coverage details in CLI report ([@jubianchi])\n* [#474](https://github.com/atoum/atoum/pull/474) Add the method return type and parameter type in the mock generator ([@guillaumeDievart])\n* [#470](https://github.com/atoum/atoum/pull/470) Add `isNotEmpty` asserter on `array` ([@metalaka])\n* [#476](https://github.com/atoum/atoum/pull/476) Add relative url root choice for code coverage report ([@n-couet])\n\n# 2.1.0 - 2015-05-08\n\n* [#459](https://github.com/atoum/atoum/issues/459) Support branches and paths coverage with [Xdebug](http://xdebug.org/) 2.3 ([@jubianchi])\n* [#436](https://github.com/atoum/atoum/issues/436) Support old-style constructors in mocks ([@jubianchi])\n* [#453](https://github.com/atoum/atoum/issues/453) `phpClass` asserter will throw atoum's logic exceptions instead of native reflection exceptions ([@jubianchi])\n* [#340](https://github.com/atoum/atoum/issues/340) Fixed an error when using `DebugClassLoader` autoloader and [atoum-bundle](https://github.com/atoum/AtoumBundle) ([@jubianchi])\n* [#454](https://github.com/atoum/atoum/pull/454) Rename asserters classes for PHP7 ([@jubianchi])\n* [#457](https://github.com/atoum/atoum/pull/457) Removed usage of die in deprecated methods ([@jubianchi])\n* [#442](https://github.com/atoum/atoum/issues/442) [#444](https://github.com/atoum/atoum/pull/444) Properly report skipped method due to a missing extension ([@jubianchi])\n* [#441](https://github.com/atoum/atoum/pull/441) Add PHP 7.0 in the build matrix ([@jubianchi])\n* [#399](https://github.com/atoum/atoum/pull/399) Add the `let` assertion handler ([@hywan])\n* [#443](https://github.com/atoum/atoum/pull/443) Autoloader should resolve classes step by step ([@jubianchi])\n\n# 2.0.1 - 2015-02-27\n\n* [#440](https://github.com/atoum/atoum/pull/440) `--configurations` option should be handled first ([@jubianchi])\n* [#439](https://github.com/atoum/atoum/pull/439) Since atoum is 2.*, branch-alias must follow ([@hywan])\n* [#437](https://github.com/atoum/atoum/pull/437) Autoloader should not try to resolve alias if requested class exists ([@jubianchi])\n* Generalize method call checking in mock ([@mageekguy])\n* [#435](https://github.com/atoum/atoum/pull/435) Partially revert BC break introduced in [#420](https://github.com/atoum/atoum/pull/420) ([@mageekguy])\n\n# 2.0.0 - 2015-02-13\n\n## BC break updates\n\n* [#420](https://github.com/atoum/atoum/pull/420) `atoum\\test::beforeTestMethod` is called before the tested class is loaded ([@mageekguy])\n\n## Other updates\n* [#431](https://github.com/atoum/atoum/pull/431) Tested class should not be mock as an interface. ([@mageekguy])\n* [#430](https://github.com/atoum/atoum/pull/430) Add `atoum\\mock\\generator::allIsInterface()` to definitely disable all parent classes' behaviors in mocks ([@mageekguy])\n* [#427](https://github.com/atoum/atoum/pull/427) `atoum\\asserters\\mock::receive` is an alias to `atoum\\asserters\\mock::call` ([@mageekguy])\n\n\n# 1.2.2 - 2015-01-12\n\n* [#415](https://github.com/atoum/atoum/pull/415) Fix a bug in the coverage report with excluded classes ([@mageekguy])\n* [#406](https://github.com/atoum/atoum/pull/406) Fix a bug in the HTML coverage with stylesheet URLs ([@jubianchi])\n* [#418](https://github.com/atoum/atoum/pull/418) Fix a bug when a mocked method returns a reference ([@hywan])\n\n# 1.2.1 - 2015-01-09\n\n* [#413](https://github.com/atoum/atoum/pull/413) Fix a bug in the exit code management ([@mageekguy])\n* [#412](https://github.com/atoum/atoum/pull/412) Use semantics dates in `CHANGELOG.md` ([@hywan])\n\n# 1.2.0 - 2014-12-28\n\n* [#408](https://github.com/atoum/atoum/pull/408) Extract mock autoloader ([@jubianchi])\n* [#403](https://github.com/atoum/atoum/pull/403) Fix a bug when setting the default mock namespace ([@hywan])\n* [#387](https://github.com/atoum/atoum/pull/387) Support assertion without parenthesis on `dateInterval`, `error`, `extension` and `hash` asserters ([@jubianchi])\n* [#401](https://github.com/atoum/atoum/pull/401) Use new Travis container infrastructure ([@jubianchi])\n* [#405](https://github.com/atoum/atoum/pull/405) Add the Santa report and an example configuration file ([@jubianchi])\n* [#394](https://github.com/atoum/atoum/pull/394) Mock generator now handles variadic arguments in method ([@jubianchi])\n* [#398](https://github.com/atoum/atoum/pull/398) Replace broken documentation links ([@jubianchi])\n* [#396](https://github.com/atoum/atoum/pull/396) Rename `match` to `matches` on the string asserter ([@hywan])\n* [#385](https://github.com/atoum/atoum/pull/385) Rename the PHAR to `atoum.phar` ([@hywan])\n* [#392](https://github.com/atoum/atoum/pull/392) Fix broken links in `README.md` ([@evert])\n* [#391](https://github.com/atoum/atoum/pull/391) Add dates in `CHANGELOG.md` ([@hywan])\n* [#379](https://github.com/atoum/atoum/pull/379) Fix `newTestedInstance` assertion when constructor contains a variable-length argument ([@mageekguy])\n\n# 1.1.0 - 2014-12-09\n\n* [#377](https://github.com/atoum/atoum/pull/377) Hide error when publishing report to coveralls.io fails ([@jubianchi])\n* [#368](https://github.com/atoum/atoum/pull/368) Improve dataset key reporting in case of failure ([@mageekguy])\n* [#376](https://github.com/atoum/atoum/pull/376) Add branch-alias ([@stephpy], [@hywan])\n* [#367](https://github.com/atoum/atoum/pull/367) Add the `isFinal` assertion on the `phpClass`/`class`/`testedClass` asserters ([@mageekguy])\n\n# 1.0.0 - 2014-12-01\n\n* Allow/Disallow mocking undefined methods\n* Pass test instance as first parameters of closures in `exception`, `when`, `output`\n* Add `--fail-if-void-methods` and `--fail-if-skipped-methods`\n* `--init` option now accepts a path to a directory to initialize with atoum configuration\n* Add coverage script to automatically produce reports\n* Add `isFluent`\n* Add `isNull`, `isNotNull`, `isCallable`, `isNotCallable`, `isNotTrue`, `isNotFalse` assertions on `variable`\n* Add `isTestedInstance` assertion on `object` asserter\n* Add `testedInstance` helper\n* Add `newTestedInstance` and `newInstance` helpers\n* Add `isNotInstanceOf` assertion on `object` asserter\n* Alias assertions from test classes\n* Register asserters from test classes\n* Define new assertion directly from test classes\n* Change test method prefix using `@methodPrefix` on test classes\n* Add `CHANGELOG.md`\n\n# 0.0.1 - 2013-11-05\n\n[@mageekguy]: https://github.com/mageekguy\n[@jubianchi]: https://github.com/jubianchi\n[@hywan]: https://github.com/hywan\n[@metalaka]: https://github.com/metalaka\n[@GuillaumeDievart]: https://github.com/GuillaumeDievart\n[@n-couet]: https://github.com/n-couet\n[@remicollet]: https://github.com/remicollet\n[@vonglasow]: https://github.com/vonglasow\n[@mikaelrandy]: https://github.com/mikaelrandy\n[@kao98]: https://github.com/kao98\n[@Grummfy]: https://github.com/Grummfy\n[@GuillaumeDievart]: https://github.com/GuillaumeDievart\n[@stephpy]: https://github.com/stephpy\n[@evert]: https://github.com/evert\n[@agallou]: https://github.com/agallou\n[@fferriere]: https://github.com/fferriere\n[@oxman]: https://github.com/blackprism\n[@mvrhov]: https://github.com/mvrhov\n[@krtek4]: https://github.com/krtek4\n[@guiled]: https://github.com/guiled\n[@trasher]: https://github.com/trasher\n[@fvilpoix]: https://github.com/fvilpoix\n[@macintoshplus]: https://github.com/macintoshplus\n[@cedric-anne]: https://github.com/cedric-anne\n[@idetinkin]: https://github.com/idetinkin\n[@villfa]: https://github.com/villfa\n[@shavounet]: https://github.com/shavounet\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.609375,
          "content": "# Contributing to atoum\n\nThe key words \"**must**\", \"**must not**\", \"**should**\", \"**should not**\" and \"**may**\" in this document are to be interpreted as described in [RFC 2119](http://www.ietf.org/rfc/rfc2119.txt).\n\n## Opening Issues\n\nWhenever you find a bug in atoum or think of a new feature you **may** open an issue in the bug tracker.\n\n### Reporting bug\n\nWhen reporting a bug, you **should** provide as much relevant informations as possible. This includes (but is not limited to):\n\n* PHP Version (`php -v`),\n* xDebug version (if loaded),\n* atoum version (sha1, phar, tag): get it with `bin/atoum --version` or `php atoum.phar --version` or `git rev-parse --short HEAD`,\n* A minimum (non) working example,\n* A clear description of the problem,\n* Expected and actual results.\n\nYou **must** also provide a descriptive title.\n\nHere is an example issue:\n\n```md\n# Chaining multiple hasConstant assertions fails\n\n|               |              |\n|---------------|--------------|\n| atoum version | `dev-master` |\n| atoum SHA1    | `cbf9821`    |\n| PHP version   | `PHP 5.3.29` |\n| xDebug        | not loaded   |\n\nWhen chaining multiple `hasConstant` assertions atoum reports the following error: `Asserter 'hasConstant' does not exist`\n\n## Example\n\n    <?php\n    \n    namespace atoum\\shou\\tests\\units;\n    \n    use atoum;\n    \n    class runner extends atoum\n    {\n        public function testClass()\n        {\n            $this\n                ->testedClass\n                    ->hasConstant('runStart')->isEqualTo('runnerStart')\n                    ->hasConstant('runStop')->isEqualTo('runnerStop')\n    \n                    ->extends('atoum\\shou\\observable')\n                    ->implements('atoum\\shou\\observer')\n            ;\n        }\n    } \n\n## Actual result\n\n    There is 1 error:\n    => atoum\\shou\\tests\\units\\runner::testClass():\n    ==> Error E_USER_ERROR in code.php on line 13, generated by file test.php on line 37:\n    Asserter 'hasConstant' does not exist\n\n## Expected result\n\nTest should either pass or fail nicely, without a non-handled error.\n```\n\n### Requesting a new feature\n\nWhen requesting a new feature you **should** ensute that it does not already exist in atoum or any extension.\n\nYou **must** provide a valid use case for the feature and it **must** be compliant with atoum's mantra (modern, simple and intuitive).\n\nYou **should** also provide code snippets to illustrate your need and how the feature will be used from a user point of view.\n\nYou **may** also link to external resources or other tools providing similar features to help reviewers.\n\n## Sending Pull Requests\n\nTo be accepted your code contribution **must** follow atoum's [coding style](#coding-style).\n\nYou **must** write unit tests to cover your modifications.\n\nYour commit history **should** be as clean as possible:\n\n* You **should** squash your commits to hide non-valudable commits (coding style fix, unit tests, …),\n* You **should** rebase your branch on top of master to make your pull-request fast-forward,\n* You **must** add a changelog entry.\n\nYou **must** also provide a descriptive title and a description for your changes. It **may** include code snippets to illustrate how to use\nthe feature you added.\n\n## Coding style\n\nCoding style respects [the PSR-12 recommendation](http://www.php-fig.org/psr/psr-12/), in addition to some other fixers provided by [the PHP CS Fixer tool](https://github.com/FriendsOfPhp/PHP-CS-Fixer).\n\nTo check the coding style, please run the following script:\n\n```sh\n$ vendor/bin/php-cs-fixer fix --dry-run --diff --verbose\n```\n\nTo automatically fix errors, you can run the same script without using `--dry-run` and `-diff` options:\n```sh\n$ vendor/bin/php-cs-fixer fix --verbose\n```\n\n### Compatibility\n\nYour code **must** work on PHP from version 8.0 to the latest stable.\n\nWhen you need to use a feature that is only available on PHP version greater than 8.0, you **must** either:\n\n* Use version sniffing (`version_compare`),\n* Check if class exists,\n* Check if method exists,\n* …\n\nYou **must** ensure a consistent behavior on all supported version. If it is not possible, you **must** ensure a correct behavior.\n\n### Naming Conventions\n\nFunction, variable, constant, class, interface and method **must** be named using `lowerCamelCase`.\nProtected or private properties and methods **must not** use an underscore prefix.\n\n### Global Variables\n\nGlobal variables **must not** be used.\n\n## Code of Conduct\n\nBy contributing to atoum you agree to adopt the [Open CoC](http://todogroup.org/opencodeofconduct/#atoum/team@atoum.org):\n\n* Be friendly and patient,\n* Be welcoming,\n* Be considerate,\n* Be respectful,\n* Be careful in the words that we choose,\n* Try to understand why we disagree.\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 2.396484375,
          "content": "# Frequently Asked questions\n\n## How to write \"atoum\"? \"ATOUM\"? \"Atoum\"?\n\nThe official name is \"atoum\".\n\n## How to contribute to atoum?\nJust send an email to team@atoum.org to say that you want to contribute to atoum.\nMoreover, you should read the `CONTRIBUTING.md` file about coding convention.\n\n## Why some classes has name `*\\phpClass` instead of `*\\class`?\n\nThe word `class` is [reserved by PHP](http://www.php.net/manual/en/reserved.keywords.php), so it's not possible to use this name for a class.\nIn this case, the atoum convention is to prefix name with word `php`.\n\n## Where is the documentation?\nThere is an [english](http://docs.atoum.org/) and a [french documentation](http://docs.atoum.org/fr/latest/) available.\nAs a documentation is a continual work in progress, you're welcome to help us to [improve it](https://github.com/atoum/atoum-documentation).\nMoreover, atoum's unit test is the documentation.\nYou find them in the `tests/` directory.\n\n## Why `php atoum.phar` does not works?\nHere are some known issues :\n\n* Try a `php -n atoum.phar` in a terminal.\n    * If it works, the problem is in your PHP configuration.\n* Try to remove `ioncube` extension, which seems not compatible with atoum.\n* If you use suhosin, you can also add `suhosin.executor.include.whitelist=\"phar\"` to your `php.ini`.\n* Try to add `detect_unicode=0` in your php.ini.\n\n## What can i do to avoid error about `__COMPILER_HALT_OFFSET__`?\n\nUse only require_once to include `atoum.phar` in your scripts.\n\n## Why I get a fail message when testing a class that uses APC?\n[APC](http://php.net/apc.configuration) is \"a free, open, and robust framework for caching and optimizing PHP intermediate code\" distributed under the form of a PHP extension.\nWhen testing classes that use APC, you may get some failure messages showing that apc_fetch is unable to retrieve a value.\nAs all PHP extension, APC has some configuration options to enable it:\n\n* `apc.enabled`, whether to enable or disable APC,\n* `apc.enable_cli`, whether to enable or disable APC for PHP CLI.\n\nSetting `apc.enabled` to 1 in your CLI configuration does not do the trick: to avoid these failure messages, you have to set the `apc.enable_cli` option to 1, otherwise, the extension won't be enabled for the PHP CLI version, which is used by atoum.\n\n## Why ABOUT does not use markdown syntax?\nThis file is used by PHAR to display useful information to the user in CLI, so using markdown in it is a bad idea.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.5283203125,
          "content": "Copyright (c) 2016-2016, atoum contributors.\nCopyright (c) 2010-2016, Frédéric Hardy.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of Frédéric Hardy nor the names of its contributors\n      may be used to endorse or promote products derived from this software\n      without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY FRÉDÉRIC HARDY AND CONTRIBUTORS ``AS IS'' AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL FRÉDÉRIC HARDY AND CONTRIBUTORS BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.13671875,
          "content": "![atoum's logo](resources/images/logo.png)\n\n# *atoum* [![Package version](https://img.shields.io/packagist/v/atoum/atoum.svg)](https://packagist.org/packages/atoum/atoum) [![Build Status](https://github.com/atoum/atoum/actions/workflows/unit-tests.yml/badge.svg?branch=master)](https://github.com/atoum/atoum/actions/workflows/unit-tests.yml?query=branch%3Amaster) [![Coverage Status](https://coveralls.io/repos/github/atoum/atoum/badge.svg?branch=master)](https://coveralls.io/github/atoum/atoum?branch=master) [![Lint](https://github.com/atoum/atoum/actions/workflows/lint.yml/badge.svg?branch=master)](https://github.com/atoum/atoum/actions/workflows/lint.yml?query=branch%3Amaster) [![Gitter](https://badges.gitter.im/atoum/atoum.svg)](https://gitter.im/atoum/atoum?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n| PHP version | atoum version       |\n|-------------|---------------------|\n| 5.3 -> 5.6  | 1.x -> 3.x          |\n| 7.2 -> 8.1  | 4.X -> 4.1          |\n| 8.x         | 4.1 < 4.X (current) |\n\n## A simple, modern and intuitive unit testing framework for PHP!\n\nJust like SimpleTest or PHPUnit, *atoum* is a unit testing framework specific to the [PHP](http://www.php.net) language.\nHowever, it has been designed from the start with the following ideas in mind:\n\n* Can be implemented *rapidly*,\n* *Simplify* test development,\n* Allow for writing *reliable, readable, and clear* unit tests.\n\nTo accomplish that, it massively uses capabilities provided by *PHP*, to give the developer *a whole new way* of writing unit tests.\nTherefore, it can be installed and integrated into an existing project extremely easily, since it is only a *single PHAR archive*, which is the one and only entry point for the developer.\nAlso, thanks to its *fluent interface*, it allows for writing unit tests in a fashion close to natural language.\nIt also makes it easier to implement stubbing within tests, thanks to intelligent uses of *anonymous functions and closures*.\n*atoum* natively, and by default, performs the execution of each unit test within a separate [PHP](http://www.php.net) process, to warrant *isolation*.\nOf course, it can be used seamlessly for continuous integration, and given its design, it can be made to cope with specific needs extremely easily.\n*atoum* also accomplishes all of this without affecting performance, since it has been developed to boast a reduced memory footprint while allowing for hastened test execution.\nIt can also generate unit test execution reports in the Xunit format, which makes it compatible with continuous integration tools such as [Jenkins](http://jenkins-ci.org/).\n*atoum* also generates code coverage reports, in order to make it possible to supervise unit tests.\nFinally, even though it is developed mainly on UNIX, it can also work on Windows.\n\n## Why atoum?\n\n* *atoum* is really [easy to install](http://docs.atoum.org/en/latest/installation.html): clone it [from github](https://github.com/atoum/atoum), download [its PHAR](https://github.com/atoum/atoum/releases/download/3.2.0/atoum.phar) or simply [use composer](https://packagist.org/packages/atoum/atoum),\n* *atoum* provides a high level of security during test execution by isolating each test method in its own PHP process. Of course, this feature is available out of the box, no need to install any additional extension,\n* *atoum* runs tests in a parallelized environment making the suite run as fast as possible by taking advantage of today's multi-core CPUs,\n* *atoum* provides a [full-featured set of natural and expressive assertions](http://docs.atoum.org/en/latest/asserters.html) making tests as readable as possible. Here is an example:\n\n```php\n<?php\n\n$this\n    ->integer(150)\n        ->isGreaterThan(100)\n        ->isLowerThanOrEqualTo(200)\n;\n```\n\n* *atoum* supports a BDD-like syntax with a lot of structural keywords:\n\n```php\n<?php\n\n$this\n    ->given($testedInstance = new testedClass())\n    ->and($testedClass[] = $firstValue = uniqid())\n    ->then\n        ->sizeof($testedInstance)->isEqualTo(1)\n        ->string($testedClass[0])->isEqualTo($firstValue)\n;\n```\n\n* *atoum* provides a dead simple, yet very powerful, [mock engine](http://docs.atoum.org/en/latest/chapter2.html#mock):\n\n```php\n<?php\n\n$this\n    ->given($testedInstance = new testedClass())\n    ->and($aMock = new \\mock\\foo\\bar()) // here a mock of the class \\foo\\bar is created dynamically\n    ->and($this->calling($aMock)->doOtherThing = true) // each call to doOtherThing() by the instance will return true\n    ->and($testedInstance->setDependency($aMock))\n    ->then\n        ->boolean($testedInstance->doSomething())->isTrue()\n        ->mock($aMock)\n            ->call('doOtherThing')->withArguments($testedInstance)->once() // Asserts that the doOtherThing() method of $aMock was called once\n;\n```\n\n* *atoum* provides a clear API to assert on exceptions:\n\n```php\n<?php\n\n$this\n    ->given($testedInstance = new testedClass())\n    ->and($aMock = new \\mock\\foo\\bar()) // here a mock of the class \\foo\\bar is created dynamically\n    ->and($this->calling($aMock)->doOtherThing->throw = $exception = new \\exception()) // Call to doOtherThing() will throw an exception\n    ->and($testedInstance->setDependency($aMock))\n    ->then\n        ->exception(function() use ($testedInstance) { $testedInstance->doSomething(); })\n            ->isIdenticalTo($exception)\n;\n```\n\n* *atoum* also lets you mock native PHP functions. Again, this is available out of the box:\n\n```php\n<?php\n\n$this\n    ->given($this->function->session_start = false)\n    ->and($session = new testedClass())\n    ->then\n        ->exception(function () use ($session) { $session->start(); })\n            ->isInstanceOf('project\\namespace\\exception')\n            ->hasMessage('Unable to start session')\n        ->function('session_start')->wasCalled()->once()\n;\n```\n\n* *atoum* is able to produce several reports like TAP, clover, xUnit to be easily integrated with Jenkins or any other continuous integration tool,\n* *atoum* supports [data providers](http://docs.atoum.org/en/latest/written_help.html#data-providers),\n* *atoum* tests support autorun: just include the *atoum* runner and launch your test using `php path/to/test/file.php`,\n* *atoum*'s [configuration file](http://docs.atoum.org/en/latest/chapter3.html#configuration-files) is exclusively written in PHP (no XML, YAML or any other format) giving you the best flexibility:\n\n```php\n<?php\n\n$script->addDefaultArguments('--test-it', '-ncc');\n\n$runner->addTestsFromDirectory(__DIR__ . '/tests/units/classes');\n\n$testGenerator = new atoum\\atoum\\test\\generator();\n$testGenerator\n    ->setTestClassesDirectory(__DIR__ . '/tests/units/classes');\n    ->setTestClassNamespace('atoum\\atoum\\tests\\units');\n    ->setTestedClassesDirectory(__DIR__ . '/classes');\n    ->setTestedClassNamespace('atoum\\atoum')\n    ->setRunnerPath(__DIR__ . '/scripts/runner.php')\n;\n\n$runner->setTestGenerator($testGenerator);\n```\n\n* *atoum* provides an automatic test template generator,\n* *atoum* provides a [loop mode](http://docs.atoum.org/en/latest/chapter3.html#l-loop) to easily retrigger failed tests,\n* *atoum* is full of other interesting features that you will discover over the time.\n\n## Prerequisites to use *atoum*\n\n*atoum* absolutely requires *PHP `>= 5.6.0`* or later to work.\nOn UNIX, in order to check whether you have the right PHP version, you just need to run the following command in your terminal:\n\n```sh\n$ php -v | grep -oE 'php 5\\.3\\.(?:[3-9]|[1-9][0-9])|5\\.[4-6]\\.[0-9]+|[5-8]\\.[0-9]+\\.[0-9]+'\n```\n\nIf `PHP 5.6.x` or equivalent gets displayed, then you have the right PHP version installed.\nShould you want to use *atoum* using its PHAR archive, you also need [PHP](http://www.php.net) to be able to access the `phar` module, which is normally available by default.\nOn UNIX, in order to check whether you have this module or not, you just need to run the following command in your terminal:\n\n```sh\n$ php -m | grep -i phar\n```\n\nIf `Phar` or equivalent gets displayed, then the module is properly installed.\nGenerating reports in the Xunit format requires the `xml` module.\nOn UNIX, in order to check whether you have this module or not, you just need to run the following command in your terminal:\n\n```sh\n$ php -m | grep -i xml\n```\n\nIf `Xml` or equivalent gets displayed, then the module is properly installed.\nShould you wish to monitor the coverage rate of your code by the unit tests, the [Xdebug](http://xdebug.org/) 2.3 module will be required.\nOn UNIX, in order to check whether you have this module or not, you just need to run the following command in your terminal:\n\n```sh\n$ php -v | grep -oi 'xdebug'\n```\n\nIf `Xdebug` or equivalent gets displayed, then the module is properly installed.\n\n## A unit testing framework that can be made operational in 5 minutes!\n\n### Step 1: Install *atoum*\n\nYou just have to download [its PHAR archive](https://github.com/atoum/atoum/releases/download/3.2.0/atoum.phar) and store it where you wish, for example under `/path/to/project/tests/atoum.phar`.\nThis PHAR archive contains the latest development version to pass the totality of *atoum*'s unit tests.\n*atoum*'s source code is also available via [the GitHub repository](https://github.com/atoum/atoum).\nTo check if *atoum* works correctly with your configuration, you can execute all its unit tests.\nTo do that, you just need to run the following command in your terminal:\n\n```sh\n$ php atoum.phar --test-it\n```\n\n### Step 2: Write your tests\n\nUsing your preferred text editor, create the file `path/to/project/tests/units/helloWorld.php` and add the following code:\n\n```php\n<?php\n\nnamespace vendor\\project\\tests\\units;\n\nrequire_once 'path/to/atoum.phar';\n\ninclude_once 'path/to/project/classes/helloWorld.php';\n\nuse atoum\\atoum;\nuse vendor\\project;\n\nclass helloWorld extends atoum\\test\n{\n    public function testSay()\n    {\n        $helloWorld = new project\\helloWorld();\n\n        $this->string($helloWorld->say())->isEqualTo('Hello World!');\n    }\n}\n```\n\n### Step 3: Run your test with the command line\n\nLaunch your terminal and run the following command:\n\n```sh\n$ php path/to/test/file[enter]\n```\n\nYou should get the following result or something equivalent:\n\n```sh\n> atoum version XXX by Frédéric Hardy.\nError: Unattended exception: Tested class 'vendor\\project\\helloWorld' does not exist for test class 'vendor\\project\\tests\\units\\helloWorld'\n```\n\n### Step 4: Write the class corresponding to your test\n\nUsing again your preferred text editor, create the file `path/to/project/classes/helloWorld.php` and add the following code:\n\n```php\n<?php\n\nnamespace vendor\\project;\n\nclass helloWorld\n{\n    public function say()\n    {\n        return 'Hello World!';\n    }\n}\n```\n\n### Step 5: Run your test once more\n\nIn the same terminal, run the following command once again:\n\n```sh\n$ php path/to/test/file[enter]\n```\n\nYou should get the following result, or something equivalent:\n\n```sh\n> atoum version 288 by Frédéric Hardy.\n> Run vendor\\project\\tests\\units\\helloWorld...\n[S___________________________________________________________][1/1]\n=> Test duration: 0.00 second.\n=> Memory usage: 0.25 Mb.\n> Total test duration: 0.00 second.\n> Total test memory usage: 0.25 Mb.\n> Code coverage value: 100.00%\n> Running duration: 0.08 second.\n> Success (1 test, 1 method, 2 assertions, 0 error, 0 exception)!\n```\n\n### Step 6: Complete your tests and restart the cycle from Step 3\n\n```php\n<?php\n\nnamespace vendor\\project\\tests\\units;\n\nrequire_once 'path/to/atoum.phar';\n\ninclude_once 'path/to/project/classes/helloWorld.php';\n\nuse atoum\\atoum;\nuse vendor\\project;\n\nclass helloWorld extends atoum\\test\n{\n    public function test__construct()\n    {\n        $helloWorld = new project\\helloWorld();\n\n        $this\n            ->string($helloWorld->say())->isEqualTo('Hello!')\n            ->string($helloWorld->say($name = 'Frédéric Hardy'))->isEqualTo('Hello ' . $name . '!')\n        ;\n    }\n}\n```\n\n## To go further\n\n[*atoum*'s documentation](http://docs.atoum.org) is still being written.\nAny help to improve it will be appreciated.\nHowever, if you want to further explore immediately *atoum*'s possibilities, we recommend:\n\n* Running in your terminal, either the command `php atoum.phar -h`, or the command `php scripts/runner.php -h`,\n* Exploring the contents of the `configurations` directory in *atoum*'s source, as it contains configuration file samples,\n* Exploring the contents of the `tests/unit/classes` directory in *atoum*'s source, as it contains all of the unit tests,\n* Read the (french) [conference slides](http://www.slideshare.net/impossiblium/atoum-le-framework-de-tests-unitaires-pour-php-53-simple-moderne-et-intuitif) about it, available online,\n* Read the (french) [wiki](https://github.com/atoum/atoum/wiki),\n* Join the [discussion channel](https://github.com/atoum/atoum/discussions),\n* Ask questions by e-mail at the address *support[AT]atoum(DOT)org*.\n\n## Troubleshooting\n\n### *atoum*'s PHAR archive seems to not be working\n\nIn this case, the first thing you will want to do is confirm whether you have the latest version of the archive.\nYou just need to [download](https://github.com/atoum/atoum/releases/download/2.6.0/atoum.phar) it again.\nIf it still doesn't work, run the following command in a terminal window:\n\n```sh\n$ php -n atoum.phar -v\n```\n\nIf you get *atoum*'s version number, then the problem is coming from your PHP configuration.\nIn most cases, the cause would be within extensions, that might be incompatible with the PHAR format, or that would prevent executing PHAR archives as a security measure.\nThe `ioncube` extension for instance seems incompatible with PHAR archives, and you must, therefore, deactivate it if you are using it, by commenting the following line out of your `php.ini`, by prefixing it with the `;` character:\n\n```\nzend_extension = /path/to/ioncube_loader*.*\n```\n\nThe `suhosin` extension prevents executing PHAR archives, therefore its default configuration must be modified in order to be able to use *atoum*, by adding the following line in your `php.ini` file:\n\n```\nsuhosin.executor.include.whitelist=\"phar\"\n```\n\nFinally, if running *atoum* causes the screen to display characters looking like `???%`, this would be because the `detect_unicode` directive inside your `php.ini` file is set to 1.\nTo fix the problem, you just need to set it to 0 by editing your `php.ini` file or by running *atoum* with the following command:\n\n```sh\n$ php -d detect_unicode=0 atoum.phar [options]\n```\n\nIf these three operations do not allow *atoum* to work, we suggest you send an e-mail to the address *support[AT]atoum(DOT)org*, describing in detail your configuration and your problem.\nYou can also ask for help from the *atoum* development staff on the [discussion channel](https://github.com/atoum/atoum/discussions) of the atoum repository..\n\n### Error: Constant `__COMPILER_HALT_OFFSET__` already defined `/path/to/atoum.phar`\n\nThis error comes from the fact the *atoum* PHAR archive is included in more than one place within your code using `include` or `require`.\nTo fix this problem, you just need to include the archive by using only `include_once` or `require_once`, in order to ensure it is not included several times.\n\n### APC seems not work with *atoum*\n\n[APC](http://fr.php.net/manual/en/apc.configuration.php)  is a free, open, and robust framework for caching and optimizing PHP intermediate code distributed under the form of a PHP extension.\nWhen testing classes that use APC, you may get some failure message showing that `apc_fetch` function is unable to retrieve a value.\nAs all PHP extension, APC has some configuration options to enable it:\n\n* `apc.enabled` whether to enable or disable APC,\n* `apc.enable_cli`, whether to enable or disable APC for PHP CLI.\n\nIn order to use [APC](http://fr.php.net/manual/en/apc.configuration.php) with *atoum*, you have to set `apc.enabled` and `apc.enable_cli` to `1`, otherwise, it won't be enabled for the PHP CLI version, which is used by *atoum*.\n\n### Getting segfault when mocking objects\n\nWhen using *atoum* and mocking objects, you will sometime get segfaults coming from [PHP](http://www.php.net).\nThese segfaults are caused by [XDebug](http://xdebug.org/) in version less than 2.1.0 which has problem handling reflection in some cases.\nTo check the current version of [XDebug](http://xdebug.org/), you can run `php -v`.\nTo fix this issue, you have to update [XDebug](http://xdebug.org/) to the latest [stable version](http://xdebug.org/download.php).\nIf you can't update [XDebug](http://xdebug.org/) on your system, you can still disable the extension to avoid getting segfaults.\nTo be sure that [XDebug](http://xdebug.org/) has been successfully updated or disabled, you can run `php -v`.\nWhen you are done updating or disabling [XDebug](http://xdebug.org/), run `php atoum.phar --test-it` to be sure that all the segfaults have gone and that *atoum* is working.\n\n---\n\n## Roadmap\n\nLooking for a roadmap?\n\n- [Here is](https://github.com/atoum/atoum/labels/In%20progress) the work in progress,\n- [And there](https://github.com/atoum/atoum/milestones/*) what will come in next releases.\n\n## Credits\n\natoum has been created by [Frédéric Hardy]. It is now led by a strong community of contributors. You can find them\nin the [committer list](https://github.com/atoum/atoum/graphs/contributors) or in the\n[Contributors team](https://github.com/orgs/atoum/teams/contributors).\n\n## License\n\natoum is released under the BSD-3-Clause License. See the bundled [LICENSE](LICENSE) file for details.\n\n[Frédéric Hardy]: https://github.com/mageekguy\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 1.4365234375,
          "content": "# atoum upgrade guide\n\n## From 2.x to 3.x\n\n### Runtime\n\natoum `3.x` requires **PHP `>= 5.6.0`**.\n\nIf you want to get coverage reports or use step-by-step debugging, you must use **xDebug `>= 2.3.0`**.\n\n### Assertions\n\natoum `2.x` supported PHP `>= 5.3.3`. Because on lower version `$this` in closures was not bound to the current object context, some assertions provided the test as an argument to closures.\n\nThis is not the case anymore.\n\n#### `when`\n\natoum `2.x`:\n\n```php\n$this\n    ->when(function(atoum\\test $test) { \n        $test->testedInstance->doSomething();\n    })\n;  \n```\n\natoum `3.x`:\n\n```php\n$this\n    ->when(function() { \n        $this->testedInstance->doSomething();\n    })\n;  \n```\n\n#### `exception`\n\natoum `2.x`:\n \n```php\n$this\n    ->exception(function(atoum\\test $test) { \n        $test->testedInstance->doSomethingAndThrow();\n    })\n;    \n```\n\natoum `3.x`:\n\n```php\n$this\n    ->exception(function() { \n        $this->testedInstance->doSomethingAndThrow();\n    })\n;    \n```\n\n### Reports\n\nSome reports have been moved to a dedicated extension: [`atoum/reports-extension`](https://github.com/atoum/reports-extension).\n\nIf you are using one of those reports, consider using the extension or simply remove them as they are not part of atoum anymore:\n\n* `atoum\\reports\\realtime\\nyancat`\n* `atoum\\reports\\realtime\\santa`\n\nYou will only have to install the `atoum/reports-extension` and everything should work fine as the report classes have the exact same FQCN.\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "classes",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.236328125,
          "content": "{\n\t\"name\": \"atoum/atoum\",\n\t\"type\": \"library\",\n\t\"description\": \"Simple modern and intuitive unit testing framework for PHP 5.3+\",\n\t\"keywords\": [\"TDD\",\"atoum\",\"test\",\"unit testing\"],\n\t\"homepage\": \"http://www.atoum.org\",\n\t\"license\": \"BSD-3-Clause\",\n\t\"authors\":\n\t[\n\t\t{\n\t\t\t\"name\": \"Frédéric Hardy\",\n\t\t\t\"email\": \"frederic.hardy@atoum.org\",\n\t\t\t\"homepage\": \"http://blog.mageekbox.net\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"François Dussert\",\n\t\t\t\"email\": \"francois.dussert@atoum.org\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Gérald Croes\",\n\t\t\t\"email\": \"gerald.croes@atoum.org\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Julien Bianchi\",\n\t\t\t\"email\": \"julien.bianchi@atoum.org\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Ludovic Fleury\",\n\t\t\t\"email\": \"ludovic.fleury@atoum.org\"\n\t\t}\n\t],\n\t\"require\":\n\t{\n\t\t\"php\": \"^8.0\",\n\t\t\"ext-hash\": \"*\",\n\t\t\"ext-json\": \"*\",\n\t\t\"ext-tokenizer\": \"*\",\n\t\t\"ext-xml\": \"*\"\n\t},\n\t\"require-dev\":\n\t{\n\t\t\"friendsofphp/php-cs-fixer\": \"^3.2\"\n\t},\n\t\"replace\": {\n\t\t\"mageekguy/atoum\": \"*\"\n\t},\n\t\"bin\":\n\t[\n\t\t\"bin/atoum\"\n\t],\n\t\"autoload\":\n\t{\n\t\t\"classmap\": [ \"classes/\" ]\n\t},\n\t\"suggest\": {\n\t\t\"ext-mbstring\": \"Provides support for UTF-8 strings\",\n\t\t\"atoum/stubs\": \"Provides IDE support (like autocompletion) for atoum\",\n\t\t\"ext-xdebug\": \"Provides code coverage report (>= 2.3)\"\n\t},\n\t\"extra\": {\n\t\t\"branch-alias\": {\n\t\t\t\"dev-master\": \"4.x-dev\"\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "constants.php",
          "type": "blob",
          "size": 0.466796875,
          "content": "<?php\n\nnamespace atoum\\atoum;\n\nif (defined(__NAMESPACE__ . '\\running') === false) {\n    define(__NAMESPACE__ . '\\running', true);\n    define(__NAMESPACE__ . '\\directory', __DIR__);\n    define(__NAMESPACE__ . '\\version', preg_replace('/\\$Rev: ([^ ]+) \\$/', '$1', '$Rev: dev-master $'));\n    define(__NAMESPACE__ . '\\author', 'Frédéric Hardy');\n    define(__NAMESPACE__ . '\\mail', 'support@atoum.org');\n    define(__NAMESPACE__ . '\\repository', 'http://www.atoum.org/atoum');\n}\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}