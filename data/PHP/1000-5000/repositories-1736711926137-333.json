{
  "metadata": {
    "timestamp": 1736711926137,
    "page": 333,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "symfony/security-bundle",
      "stars": 2470,
      "defaultBranch": "7.2",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.072265625,
          "content": "/Tests export-ignore\n/phpunit.xml.dist export-ignore\n/.git* export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "vendor/\ncomposer.lock\nphpunit.xml\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 17.6875,
          "content": "CHANGELOG\n=========\n\n7.2\n---\n\n * Allow configuring the secret used to sign login links\n * Allow passing optional passport attributes to `Security::login()`\n\n7.1\n---\n\n * Mark class `ExpressionCacheWarmer` as `final`\n * Support multiple signature algorithms for OIDC Token\n * Support JWK or JWKSet for OIDC Token\n\n7.0\n---\n\n * Enabling SecurityBundle and not configuring it is not allowed\n * Remove the `enable_authenticator_manager` config option\n * Remove the `security.firewalls.logout.csrf_token_generator` config option, use `security.firewalls.logout.csrf_token_manager` instead\n * Remove the `require_previous_session` config option from authenticators\n\n6.4\n---\n\n * Deprecate `Security::ACCESS_DENIED_ERROR`, `AUTHENTICATION_ERROR` and `LAST_USERNAME` constants, use the ones on `SecurityRequestAttributes` instead\n * Allow an array of `pattern` in firewall configuration\n * Add `$badges` argument to `Security::login`\n * Deprecate the `require_previous_session` config option. Setting it has no effect anymore\n * Add `LogoutRouteLoader`\n\n6.3\n---\n\n * Deprecate enabling bundle and not configuring it\n * Add `_stateless` attribute to the request when firewall is stateless and the attribute is not already set\n * Add `StatelessAuthenticatorFactoryInterface` for authenticators targeting `stateless` firewalls only and that don't require a user provider\n * Modify \"icon.svg\" to improve accessibility for blind/low vision users\n * Make `Security::login()` return the authenticator response\n * Deprecate the `security.firewalls.logout.csrf_token_generator` config option, use `security.firewalls.logout.csrf_token_manager` instead\n * Make firewalls event dispatcher traceable on debug mode\n * Add `TokenHandlerFactoryInterface`, `OidcUserInfoTokenHandlerFactory`, `OidcTokenHandlerFactory` and `ServiceTokenHandlerFactory` for `AccessTokenFactory`\n\n6.2\n---\n\n * Add the `Security` helper class\n * Deprecate the `Symfony\\Component\\Security\\Core\\Security` service alias, use `Symfony\\Bundle\\SecurityBundle\\Security` instead\n * Add `Security::getFirewallConfig()` to help to get the firewall configuration associated to the Request\n * Add `Security::login()` to login programmatically\n * Add `Security::logout()` to logout programmatically\n * Add `security.firewalls.logout.enable_csrf` to enable CSRF protection using the default CSRF token generator\n * Add RFC6750 Access Token support to allow token-based authentication\n * Add `security.firewalls.switch_user.target_route` option to configure redirect target route on switch user\n * Deprecate the `security.enable_authenticator_manager` config option\n\n6.1\n---\n\n * The `security.access_control` now accepts a `RequestMatcherInterface` under the `request_matcher` option as scope configuration\n * The `security.access_control` now accepts an `attributes` array to match request attributes in the `RequestMatcher`\n * The `security.access_control` now accepts a `route` option to match request route in the `RequestMatcher`\n * Display the inherited roles of the logged-in user in the Web Debug Toolbar\n\n6.0\n---\n\n * The `security.authorization_checker` and `security.token_storage` services are now private\n * Remove `UserPasswordEncoderCommand` class and the corresponding `user:encode-password` command,\n   use `UserPasswordHashCommand` and `user:hash-password` instead\n * Remove the `security.encoder_factory.generic` service, the `security.encoder_factory` and `Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactoryInterface` aliases,\n   use `security.password_hasher_factory` and `Symfony\\Component\\PasswordHasher\\Hasher\\PasswordHasherFactoryInterface` instead\n * Remove the `security.user_password_encoder.generic` service, the `security.password_encoder` and the `Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoderInterface` aliases,\n   use `security.user_password_hasher`, `security.password_hasher` and `Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface` instead\n * Remove the `logout.success_handler` and `logout.handlers` config options, register a listener on the `LogoutEvent` event instead\n * Remove `FirewallConfig::getListeners()`, use `FirewallConfig::getAuthenticators()` instead\n\n5.4\n---\n\n * Deprecate `FirewallConfig::getListeners()`, use `FirewallConfig::getAuthenticators()` instead\n * Deprecate `security.authentication.basic_entry_point` and `security.authentication.retry_entry_point` services, the logic is moved into the\n   `HttpBasicAuthenticator` and `ChannelListener` respectively\n * Deprecate `FirewallConfig::allowsAnonymous()` and the `allows_anonymous` from the data collector data, there will be no anonymous concept as of version 6.\n * Deprecate not setting `$authenticatorManagerEnabled` to `true` in `SecurityDataCollector` and `DebugFirewallCommand`\n * Deprecate `SecurityFactoryInterface` and `SecurityExtension::addSecurityListenerFactory()` in favor of\n   `AuthenticatorFactoryInterface` and `SecurityExtension::addAuthenticatorFactory()`\n * Add `AuthenticatorFactoryInterface::getPriority()` which replaces `SecurityFactoryInterface::getPosition()`\n * Deprecate passing an array of arrays as 1st argument to `MainConfiguration`, pass a sorted flat array of\n   factories instead.\n * Deprecate the `always_authenticate_before_granting` option\n * Display the roles of the logged-in user in the Web Debug Toolbar\n * Add the `security.access_decision_manager.strategy_service` option\n * Deprecate not configuring explicitly a provider for custom_authenticators when there is more than one registered provider\n\n\n5.3\n---\n\n * The authenticator system is no longer experimental\n * Login Link functionality is no longer experimental\n * Add `required_badges` firewall config option\n * [BC break] Add `login_throttling.lock_factory` setting defaulting to `null` (instead of `lock.factory`)\n * Add a `login_throttling.interval` (in `security.firewalls`) option to change the default throttling interval.\n * Add the `debug:firewall` command.\n * Deprecate `UserPasswordEncoderCommand` class and the corresponding `user:encode-password` command,\n   use `UserPasswordHashCommand` and `user:hash-password` instead\n * Deprecate the `security.encoder_factory.generic` service, the `security.encoder_factory` and `Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactoryInterface` aliases,\n   use `security.password_hasher_factory` and `Symfony\\Component\\PasswordHasher\\Hasher\\PasswordHasherFactoryInterface` instead\n * Deprecate the `security.user_password_encoder.generic` service, the `security.password_encoder` and the `Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoderInterface` aliases,\n   use `security.user_password_hasher`, `security.password_hasher` and `Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface` instead\n * Deprecate the public `security.authorization_checker` and `security.token_storage` services to private\n * Not setting the `enable_authenticator_manager` config option to `true` is deprecated\n * Deprecate the `security.authentication.provider.*` services, use the new authenticator system instead\n * Deprecate the `security.authentication.listener.*` services, use the new authenticator system instead\n * Deprecate the Guard component integration, use the new authenticator system instead\n * Add `form_login.form_only` option\n\n5.2.0\n-----\n\n * Added `FirewallListenerFactoryInterface`, which can be implemented by security factories to add firewall listeners\n * Added `SortFirewallListenersPass` to make the execution order of firewall listeners configurable by\n   leveraging `Symfony\\Component\\Security\\Http\\Firewall\\FirewallListenerInterface`\n * Added ability to use comma separated ip address list for `security.access_control`\n * [BC break] Removed `EntryPointFactoryInterface`, authenticators must now implement `AuthenticationEntryPointInterface` if\n   they require autoregistration of a Security entry point.\n\n5.1.0\n-----\n\n * Added XSD for configuration\n * Added security configuration for priority-based access decision strategy\n * Marked the `AnonymousFactory`, `FormLoginFactory`, `FormLoginLdapFactory`, `GuardAuthenticationFactory`, `HttpBasicFactory`, `HttpBasicLdapFactory`, `JsonLoginFactory`, `JsonLoginLdapFactory`, `RememberMeFactory`, `RemoteUserFactory` and `X509Factory` as `@internal`\n * Renamed method `AbstractFactory#createEntryPoint()` to `AbstractFactory#createDefaultEntryPoint()`\n\n5.0.0\n-----\n\n * The `switch_user.stateless` firewall option has been removed.\n * Removed the ability to configure encoders using `argon2i` or `bcrypt` as algorithm, use `auto` instead\n * The `simple_form` and `simple_preauth` authentication listeners have been removed,\n   use Guard instead.\n * The `SimpleFormFactory` and `SimplePreAuthenticationFactory` classes have been removed,\n   use Guard instead.\n * Removed `LogoutUrlHelper` and `SecurityHelper` templating helpers, use Twig instead\n * Removed the `logout_on_user_change` firewall option\n * Removed the `threads` encoder option\n * Removed the `security.authentication.trust_resolver.anonymous_class` parameter\n * Removed the `security.authentication.trust_resolver.rememberme_class` parameter\n * Removed the `security.user.provider.in_memory.user` service.\n\n4.4.0\n-----\n\n * Added `anonymous: lazy` mode to firewalls to make them (not) start the session as late as possible\n * Added `migrate_from` option to encoders configuration.\n * Added new `argon2id` encoder, undeprecated the `bcrypt` and `argon2i` ones (using `auto` is still recommended by default.)\n * Deprecated the usage of \"query_string\" without a \"search_dn\" and a \"search_password\" config key in Ldap factories.\n * Marked the `SecurityDataCollector` class as `@final`.\n\n4.3.0\n-----\n\n * Added new encoder types: `auto` (recommended), `native` and `sodium`\n * The normalization of the cookie names configured in the `logout.delete_cookies`\n   option is deprecated and will be disabled in Symfony 5.0. This affects to cookies\n   with dashes in their names. For example, starting from Symfony 5.0, the `my-cookie`\n   name will delete `my-cookie` (with a dash) instead of `my_cookie` (with an underscore).\n\n4.2.0\n-----\n\n * Using the `security.authentication.trust_resolver.anonymous_class` and\n   `security.authentication.trust_resolver.rememberme_class` parameters to define\n   the token classes is deprecated. To use custom tokens extend the existing\n   `Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken`.\n   or `Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken`.\n * Added `Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Compiler\\AddExpressionLanguageProvidersPass`\n * Added `json_login_ldap` authentication provider to use LDAP authentication with a REST API.\n * Made remember-me cookies inherit their default config from `framework.session.cookie_*`\n   and added an \"auto\" mode to their \"secure\" config option to make them secure on HTTPS automatically.\n * Deprecated the `simple_form` and `simple_preauth` authentication listeners, use Guard instead.\n * Deprecated the `SimpleFormFactory` and `SimplePreAuthenticationFactory` classes, use Guard instead.\n * Added `port` in access_control\n * Added individual voter decisions to the profiler\n\n4.1.0\n-----\n\n * The `switch_user.stateless` firewall option is deprecated, use the `stateless` option instead.\n * The `logout_on_user_change` firewall option is deprecated.\n * deprecated `SecurityUserValueResolver`, use\n   `Symfony\\Component\\Security\\Http\\Controller\\UserValueResolver` instead.\n\n4.0.0\n-----\n\n * removed `FirewallContext::getContext()`\n * made `FirewallMap::$container` and `::$map` private\n * made the first `UserPasswordEncoderCommand::_construct()` argument mandatory\n * `UserPasswordEncoderCommand` does not extend `ContainerAwareCommand` anymore\n * removed support for voters that don't implement the `VoterInterface`\n * removed HTTP digest authentication\n * removed command `acl:set` along with `SetAclCommand` class\n * removed command `init:acl` along with `InitAclCommand` class\n * removed `acl` configuration key and related services, use symfony/acl-bundle instead\n * removed auto picking the first registered provider when no configured provider on a firewall and ambiguous\n * the firewall option `logout_on_user_change` is now always true, which will trigger a logout if the user changes\n   between requests\n * the `switch_user.stateless` firewall option is `true` for stateless firewalls\n\n3.4.0\n-----\n\n * Added new `security.helper` service that is an instance of `Symfony\\Component\\Security\\Core\\Security`\n   and provides shortcuts for common security tasks.\n * Tagging voters with the `security.voter` tag without implementing the\n   `VoterInterface` on the class is now deprecated and will be removed in 4.0.\n * [BC BREAK] `FirewallContext::getListeners()` now returns `\\Traversable|array`\n * added info about called security listeners in profiler\n * Added `logout_on_user_change` to the firewall options. This config item will\n   trigger a logout when the user has changed. Should be set to true to avoid\n   deprecations in the configuration.\n * deprecated HTTP digest authentication\n * deprecated command `acl:set` along with `SetAclCommand` class\n * deprecated command `init:acl` along with `InitAclCommand` class\n * Added support for the new Argon2i password encoder\n * added `stateless` option to the `switch_user` listener\n * deprecated auto picking the first registered provider when no configured provider on a firewall and ambiguous\n\n3.3.0\n-----\n\n * Deprecated instantiating `UserPasswordEncoderCommand` without its constructor\n   arguments fully provided.\n * Deprecated `UserPasswordEncoderCommand::getContainer()` and relying on the\n  `ContainerAwareCommand` sub class or `ContainerAwareInterface` implementation for this command.\n * Deprecated the `FirewallMap::$map` and `$container` properties.\n * [BC BREAK] Keys of the `users` node for `in_memory` user provider are no longer normalized.\n * deprecated `FirewallContext::getListeners()`\n\n3.2.0\n-----\n\n * Added the `SecurityUserValueResolver` to inject the security users in actions via\n   `Symfony\\Component\\Security\\Core\\User\\UserInterface` in the method signature.\n\n3.0.0\n-----\n\n * Removed the `security.context` service.\n\n2.8.0\n-----\n\n * deprecated the `key` setting of `anonymous`, `remember_me` and `http_digest`\n   in favor of the `secret` setting.\n * deprecated the `intention` firewall listener setting in favor of the `csrf_token_id`.\n\n2.6.0\n-----\n\n * Added the possibility to override the default success/failure handler\n   to get the provider key and the options injected\n * Deprecated the `security.context` service for the `security.token_storage` and\n   `security.authorization_checker` services.\n\n2.4.0\n-----\n\n * Added 'host' option to firewall configuration\n * Added 'csrf_token_generator' and 'csrf_token_id' options to firewall logout\n   listener configuration to supersede/alias 'csrf_provider' and 'intention'\n   respectively\n * Moved 'security.secure_random' service configuration to FrameworkBundle\n\n2.3.0\n-----\n\n * allowed for multiple IP address in security access_control rules\n\n2.2.0\n-----\n\n * Added PBKDF2 Password encoder\n * Added BCrypt password encoder\n\n2.1.0\n-----\n\n * [BC BREAK] The custom factories for the firewall configuration are now\n   registered during the build method of bundles instead of being registered\n   by the end-user (you need to remove the 'factories' keys in your security\n   configuration).\n\n * [BC BREAK] The Firewall listener is now registered after the Router one. This\n   means that specific Firewall URLs (like /login_check and /logout must now\n   have proper route defined in your routing configuration)\n\n * [BC BREAK] refactored the user provider configuration. The configuration\n   changed for the chain provider and the memory provider:\n\n    Before:\n\n    ``` yaml\n    security:\n        providers:\n            my_chain_provider:\n                providers: [my_memory_provider, my_doctrine_provider]\n            my_memory_provider:\n                users:\n                    toto: { password: foobar, roles: [ROLE_USER] }\n                    foo: { password: bar, roles: [ROLE_USER, ROLE_ADMIN] }\n    ```\n\n    After:\n\n    ``` yaml\n    security:\n        providers:\n            my_chain_provider:\n                chain:\n                    providers: [my_memory_provider, my_doctrine_provider]\n            my_memory_provider:\n                memory:\n                    users:\n                        toto: { password: foobar, roles: [ROLE_USER] }\n                        foo: { password: bar, roles: [ROLE_USER, ROLE_ADMIN] }\n    ```\n\n * [BC BREAK] Method `equals` was removed from `UserInterface` to its own new\n   `EquatableInterface`. The user class can now implement this interface to override\n   the default implementation of users equality test.\n\n * added a validator for the user password\n * added 'erase_credentials' as a configuration key (true by default)\n * added new events: `security.authentication.success` and `security.authentication.failure`\n   fired on authentication success/failure, regardless of authentication method,\n   events are defined in new event class: `Symfony\\Component\\Security\\Core\\AuthenticationEvents`.\n\n * Added optional CSRF protection to LogoutListener:\n\n    ``` yaml\n    security:\n        firewalls:\n            default:\n                logout:\n                    path: /logout_path\n                    target: /\n                    csrf_parameter: _csrf_token                   # Optional (defaults to \"_csrf_token\")\n                    csrf_provider:  security.csrf.token_generator # Required to enable protection\n                    intention:      logout                        # Optional (defaults to \"logout\")\n    ```\n\n    If the LogoutListener has CSRF protection enabled but cannot validate a token,\n   then a LogoutException will be thrown.\n\n * Added `logout_url` templating helper and Twig extension, which may be used to\n   generate logout URL's within templates. The security firewall's config key\n   must be specified. If a firewall's logout listener has CSRF protection\n   enabled, a token will be automatically added to the generated URL.\n"
        },
        {
          "name": "CacheWarmer",
          "type": "tree",
          "content": null
        },
        {
          "name": "Command",
          "type": "tree",
          "content": null
        },
        {
          "name": "DataCollector",
          "type": "tree",
          "content": null
        },
        {
          "name": "Debug",
          "type": "tree",
          "content": null
        },
        {
          "name": "DependencyInjection",
          "type": "tree",
          "content": null
        },
        {
          "name": "EventListener",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (c) 2004-present Fabien Potencier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "LoginLink",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.4306640625,
          "content": "SecurityBundle\n==============\n\nSecurityBundle provides a tight integration of the Security component into the\nSymfony full-stack framework.\n\nResources\n---------\n\n * [Contributing](https://symfony.com/doc/current/contributing/index.html)\n * [Report issues](https://github.com/symfony/symfony/issues) and\n   [send Pull Requests](https://github.com/symfony/symfony/pulls)\n   in the [main Symfony repository](https://github.com/symfony/symfony)\n"
        },
        {
          "name": "RememberMe",
          "type": "tree",
          "content": null
        },
        {
          "name": "Resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "Routing",
          "type": "tree",
          "content": null
        },
        {
          "name": "Security.php",
          "type": "blob",
          "size": 8.3466796875,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Bundle\\SecurityBundle;\n\nuse Psr\\Container\\ContainerInterface;\nuse Symfony\\Bundle\\SecurityBundle\\Security\\FirewallConfig;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;\nuse Symfony\\Component\\Security\\Core\\Authorization\\AuthorizationCheckerInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\LogicException;\nuse Symfony\\Component\\Security\\Core\\Exception\\LogoutException;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nuse Symfony\\Component\\Security\\Csrf\\CsrfToken;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\AuthenticatorInterface;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Badge\\BadgeInterface;\nuse Symfony\\Component\\Security\\Http\\Event\\LogoutEvent;\nuse Symfony\\Component\\Security\\Http\\ParameterBagUtils;\nuse Symfony\\Contracts\\Service\\ServiceProviderInterface;\n\n/**\n * Helper class for commonly-needed security tasks.\n *\n * @author Ryan Weaver <ryan@symfonycasts.com>\n * @author Robin Chalas <robin.chalas@gmail.com>\n * @author Arnaud Frézet <arnaud@larriereguichet.fr>\n *\n * @final\n */\nclass Security implements AuthorizationCheckerInterface\n{\n    public function __construct(\n        private readonly ContainerInterface $container,\n        private readonly array $authenticators = [],\n    ) {\n    }\n\n    public function getUser(): ?UserInterface\n    {\n        if (!$token = $this->getToken()) {\n            return null;\n        }\n\n        return $token->getUser();\n    }\n\n    /**\n     * Checks if the attributes are granted against the current authentication token and optionally supplied subject.\n     */\n    public function isGranted(mixed $attributes, mixed $subject = null): bool\n    {\n        return $this->container->get('security.authorization_checker')\n            ->isGranted($attributes, $subject);\n    }\n\n    public function getToken(): ?TokenInterface\n    {\n        return $this->container->get('security.token_storage')->getToken();\n    }\n\n    public function getFirewallConfig(Request $request): ?FirewallConfig\n    {\n        return $this->container->get('security.firewall.map')->getFirewallConfig($request);\n    }\n\n    /**\n     * @param UserInterface        $user              The user to authenticate\n     * @param string|null          $authenticatorName The authenticator name (e.g. \"form_login\") or service id (e.g. SomeApiKeyAuthenticator::class) - required only if multiple authenticators are configured\n     * @param string|null          $firewallName      The firewall name - required only if multiple firewalls are configured\n     * @param BadgeInterface[]     $badges            Badges to add to the user's passport\n     * @param array<string, mixed> $attributes        Attributes to add to the user's passport\n     *\n     * @return Response|null The authenticator success response if any\n     */\n    public function login(UserInterface $user, ?string $authenticatorName = null, ?string $firewallName = null, array $badges = [], array $attributes = []): ?Response\n    {\n        $request = $this->container->get('request_stack')->getCurrentRequest();\n        if (null === $request) {\n            throw new LogicException('Unable to login without a request context.');\n        }\n\n        $firewallName ??= $this->getFirewallConfig($request)?->getName();\n\n        if (!$firewallName) {\n            throw new LogicException('Unable to login as the current route is not covered by any firewall.');\n        }\n\n        $authenticator = $this->getAuthenticator($authenticatorName, $firewallName);\n\n        $userCheckerLocator = $this->container->get('security.user_checker_locator');\n        $userCheckerLocator->get($firewallName)->checkPreAuth($user);\n\n        return $this->container->get('security.authenticator.managers_locator')->get($firewallName)->authenticateUser($user, $authenticator, $request, $badges, $attributes);\n    }\n\n    /**\n     * Logout the current user by dispatching the LogoutEvent.\n     *\n     * @param bool $validateCsrfToken Whether to look for a valid CSRF token based on the `logout` listener configuration\n     *\n     * @return Response|null The LogoutEvent's Response if any\n     *\n     * @throws LogoutException When $validateCsrfToken is true and the CSRF token is not found or invalid\n     */\n    public function logout(bool $validateCsrfToken = true): ?Response\n    {\n        $request = $this->container->get('request_stack')->getMainRequest();\n        if (null === $request) {\n            throw new LogicException('Unable to logout without a request context.');\n        }\n\n        /** @var TokenStorageInterface $tokenStorage */\n        $tokenStorage = $this->container->get('security.token_storage');\n\n        if (!($token = $tokenStorage->getToken()) || !$token->getUser()) {\n            throw new LogicException('Unable to logout as there is no logged-in user.');\n        }\n\n        if (!$firewallConfig = $this->container->get('security.firewall.map')->getFirewallConfig($request)) {\n            throw new LogicException('Unable to logout as the request is not behind a firewall.');\n        }\n\n        if ($validateCsrfToken) {\n            if (!$this->container->has('security.csrf.token_manager') || !$logoutConfig = $firewallConfig->getLogout()) {\n                throw new LogicException(\\sprintf('Unable to logout with CSRF token validation. Either make sure that CSRF protection is enabled and \"logout\" is configured on the \"%s\" firewall, or bypass CSRF token validation explicitly by passing false to the $validateCsrfToken argument of this method.', $firewallConfig->getName()));\n            }\n            $csrfToken = ParameterBagUtils::getRequestParameterValue($request, $logoutConfig['csrf_parameter']);\n            if (!\\is_string($csrfToken) || !$this->container->get('security.csrf.token_manager')->isTokenValid(new CsrfToken($logoutConfig['csrf_token_id'], $csrfToken))) {\n                throw new LogoutException('Invalid CSRF token.');\n            }\n        }\n\n        $logoutEvent = new LogoutEvent($request, $token);\n        $this->container->get('security.firewall.event_dispatcher_locator')->get($firewallConfig->getName())->dispatch($logoutEvent);\n\n        $tokenStorage->setToken(null);\n\n        return $logoutEvent->getResponse();\n    }\n\n    private function getAuthenticator(?string $authenticatorName, string $firewallName): AuthenticatorInterface\n    {\n        if (!isset($this->authenticators[$firewallName])) {\n            throw new LogicException(\\sprintf('No authenticators found for firewall \"%s\".', $firewallName));\n        }\n\n        /** @var ServiceProviderInterface $firewallAuthenticatorLocator */\n        $firewallAuthenticatorLocator = $this->authenticators[$firewallName];\n\n        if (!$authenticatorName) {\n            $authenticatorIds = array_keys($firewallAuthenticatorLocator->getProvidedServices());\n\n            if (!$authenticatorIds) {\n                throw new LogicException(\\sprintf('No authenticator was found for the firewall \"%s\".', $firewallName));\n            }\n            if (1 < \\count($authenticatorIds)) {\n                throw new LogicException(\\sprintf('Too many authenticators were found for the current firewall \"%s\". You must provide an instance of \"%s\" to login programmatically. The available authenticators for the firewall \"%s\" are \"%s\".', $firewallName, AuthenticatorInterface::class, $firewallName, implode('\" ,\"', $authenticatorIds)));\n            }\n\n            return $firewallAuthenticatorLocator->get($authenticatorIds[0]);\n        }\n\n        if ($firewallAuthenticatorLocator->has($authenticatorName)) {\n            return $firewallAuthenticatorLocator->get($authenticatorName);\n        }\n\n        $authenticatorId = 'security.authenticator.'.$authenticatorName.'.'.$firewallName;\n\n        if (!$firewallAuthenticatorLocator->has($authenticatorId)) {\n            throw new LogicException(\\sprintf('Unable to find an authenticator named \"%s\" for the firewall \"%s\". Available authenticators: \"%s\".', $authenticatorName, $firewallName, implode('\", \"', array_keys($firewallAuthenticatorLocator->getProvidedServices()))));\n        }\n\n        return $firewallAuthenticatorLocator->get($authenticatorId);\n    }\n}\n"
        },
        {
          "name": "Security",
          "type": "tree",
          "content": null
        },
        {
          "name": "SecurityBundle.php",
          "type": "blob",
          "size": 6.56640625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Bundle\\SecurityBundle;\n\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Compiler\\AddExpressionLanguageProvidersPass;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Compiler\\AddSecurityVotersPass;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Compiler\\AddSessionDomainConstraintPass;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Compiler\\CleanRememberMeVerifierPass;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Compiler\\MakeFirewallsEventDispatcherTraceablePass;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Compiler\\RegisterCsrfFeaturesPass;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Compiler\\RegisterEntryPointPass;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Compiler\\RegisterGlobalSecurityEventListenersPass;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Compiler\\RegisterLdapLocatorPass;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Compiler\\RegisterTokenUsageTrackingPass;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Compiler\\ReplaceDecoratedRememberMeHandlerPass;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Compiler\\SortFirewallListenersPass;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\AccessToken\\CasTokenHandlerFactory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\AccessToken\\OidcTokenHandlerFactory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\AccessToken\\OidcUserInfoTokenHandlerFactory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\AccessToken\\ServiceTokenHandlerFactory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\Factory\\AccessTokenFactory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\Factory\\CustomAuthenticatorFactory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\Factory\\FormLoginFactory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\Factory\\FormLoginLdapFactory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\Factory\\HttpBasicFactory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\Factory\\HttpBasicLdapFactory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\Factory\\JsonLoginFactory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\Factory\\JsonLoginLdapFactory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\Factory\\LoginLinkFactory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\Factory\\LoginThrottlingFactory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\Factory\\RememberMeFactory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\Factory\\RemoteUserFactory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\Factory\\X509Factory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\UserProvider\\InMemoryFactory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\Security\\UserProvider\\LdapFactory;\nuse Symfony\\Bundle\\SecurityBundle\\DependencyInjection\\SecurityExtension;\nuse Symfony\\Component\\DependencyInjection\\Compiler\\PassConfig;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\EventDispatcher\\DependencyInjection\\AddEventAliasesPass;\nuse Symfony\\Component\\HttpKernel\\Bundle\\Bundle;\nuse Symfony\\Component\\Security\\Core\\AuthenticationEvents;\nuse Symfony\\Component\\Security\\Http\\SecurityEvents;\n\n/**\n * Bundle.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass SecurityBundle extends Bundle\n{\n    public function build(ContainerBuilder $container): void\n    {\n        parent::build($container);\n\n        /** @var SecurityExtension $extension */\n        $extension = $container->getExtension('security');\n        $extension->addAuthenticatorFactory(new FormLoginFactory());\n        $extension->addAuthenticatorFactory(new FormLoginLdapFactory());\n        $extension->addAuthenticatorFactory(new JsonLoginFactory());\n        $extension->addAuthenticatorFactory(new JsonLoginLdapFactory());\n        $extension->addAuthenticatorFactory(new HttpBasicFactory());\n        $extension->addAuthenticatorFactory(new HttpBasicLdapFactory());\n        $extension->addAuthenticatorFactory(new RememberMeFactory());\n        $extension->addAuthenticatorFactory(new X509Factory());\n        $extension->addAuthenticatorFactory(new RemoteUserFactory());\n        $extension->addAuthenticatorFactory(new CustomAuthenticatorFactory());\n        $extension->addAuthenticatorFactory(new LoginThrottlingFactory());\n        $extension->addAuthenticatorFactory(new LoginLinkFactory());\n        $extension->addAuthenticatorFactory(new AccessTokenFactory([\n            new ServiceTokenHandlerFactory(),\n            new OidcUserInfoTokenHandlerFactory(),\n            new OidcTokenHandlerFactory(),\n            new CasTokenHandlerFactory(),\n        ]));\n\n        $extension->addUserProviderFactory(new InMemoryFactory());\n        $extension->addUserProviderFactory(new LdapFactory());\n        $container->addCompilerPass(new AddExpressionLanguageProvidersPass());\n        $container->addCompilerPass(new AddSecurityVotersPass());\n        $container->addCompilerPass(new AddSessionDomainConstraintPass(), PassConfig::TYPE_BEFORE_REMOVING);\n        $container->addCompilerPass(new CleanRememberMeVerifierPass());\n        $container->addCompilerPass(new RegisterCsrfFeaturesPass());\n        $container->addCompilerPass(new RegisterTokenUsageTrackingPass(), PassConfig::TYPE_BEFORE_OPTIMIZATION, 200);\n        $container->addCompilerPass(new RegisterLdapLocatorPass());\n        $container->addCompilerPass(new RegisterEntryPointPass());\n        // must be registered after RegisterListenersPass (in the FrameworkBundle)\n        $container->addCompilerPass(new RegisterGlobalSecurityEventListenersPass(), PassConfig::TYPE_BEFORE_REMOVING, -200);\n        // execute after ResolveChildDefinitionsPass optimization pass, to ensure class names are set\n        $container->addCompilerPass(new SortFirewallListenersPass(), PassConfig::TYPE_BEFORE_REMOVING);\n        $container->addCompilerPass(new ReplaceDecoratedRememberMeHandlerPass(), PassConfig::TYPE_OPTIMIZE);\n\n        $container->addCompilerPass(new AddEventAliasesPass(array_merge(\n            AuthenticationEvents::ALIASES,\n            SecurityEvents::ALIASES\n        )));\n\n        // must be registered before DecoratorServicePass\n        $container->addCompilerPass(new MakeFirewallsEventDispatcherTraceablePass(), PassConfig::TYPE_BEFORE_OPTIMIZATION, 10);\n    }\n}\n"
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.455078125,
          "content": "{\n    \"name\": \"symfony/security-bundle\",\n    \"type\": \"symfony-bundle\",\n    \"description\": \"Provides a tight integration of the Security component into the Symfony full-stack framework\",\n    \"keywords\": [],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Fabien Potencier\",\n            \"email\": \"fabien@symfony.com\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=8.2\",\n        \"composer-runtime-api\": \">=2.1\",\n        \"ext-xml\": \"*\",\n        \"symfony/clock\": \"^6.4|^7.0\",\n        \"symfony/config\": \"^6.4|^7.0\",\n        \"symfony/dependency-injection\": \"^6.4.11|^7.1.4\",\n        \"symfony/event-dispatcher\": \"^6.4|^7.0\",\n        \"symfony/http-kernel\": \"^6.4|^7.0\",\n        \"symfony/http-foundation\": \"^6.4|^7.0\",\n        \"symfony/password-hasher\": \"^6.4|^7.0\",\n        \"symfony/security-core\": \"^7.2\",\n        \"symfony/security-csrf\": \"^6.4|^7.0\",\n        \"symfony/security-http\": \"^7.2\",\n        \"symfony/service-contracts\": \"^2.5|^3\"\n    },\n    \"require-dev\": {\n        \"symfony/asset\": \"^6.4|^7.0\",\n        \"symfony/browser-kit\": \"^6.4|^7.0\",\n        \"symfony/console\": \"^6.4|^7.0\",\n        \"symfony/css-selector\": \"^6.4|^7.0\",\n        \"symfony/dom-crawler\": \"^6.4|^7.0\",\n        \"symfony/expression-language\": \"^6.4|^7.0\",\n        \"symfony/form\": \"^6.4|^7.0\",\n        \"symfony/framework-bundle\": \"^6.4|^7.0\",\n        \"symfony/http-client\": \"^6.4|^7.0\",\n        \"symfony/ldap\": \"^6.4|^7.0\",\n        \"symfony/process\": \"^6.4|^7.0\",\n        \"symfony/rate-limiter\": \"^6.4|^7.0\",\n        \"symfony/serializer\": \"^6.4|^7.0\",\n        \"symfony/translation\": \"^6.4|^7.0\",\n        \"symfony/twig-bundle\": \"^6.4|^7.0\",\n        \"symfony/twig-bridge\": \"^6.4|^7.0\",\n        \"symfony/validator\": \"^6.4|^7.0\",\n        \"symfony/yaml\": \"^6.4|^7.0\",\n        \"twig/twig\": \"^3.12\",\n        \"web-token/jwt-library\": \"^3.3.2|^4.0\"\n    },\n    \"conflict\": {\n        \"symfony/browser-kit\": \"<6.4\",\n        \"symfony/console\": \"<6.4\",\n        \"symfony/framework-bundle\": \"<6.4\",\n        \"symfony/http-client\": \"<6.4\",\n        \"symfony/ldap\": \"<6.4\",\n        \"symfony/serializer\": \"<6.4\",\n        \"symfony/twig-bundle\": \"<6.4\",\n        \"symfony/validator\": \"<6.4\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Symfony\\\\Bundle\\\\SecurityBundle\\\\\": \"\" },\n        \"exclude-from-classmap\": [\n            \"/Tests/\"\n        ]\n    },\n    \"minimum-stability\": \"dev\"\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.841796875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"http://schema.phpunit.de/9.3/phpunit.xsd\"\n         backupGlobals=\"false\"\n         colors=\"true\"\n         bootstrap=\"vendor/autoload.php\"\n         failOnRisky=\"true\"\n         failOnWarning=\"true\"\n>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\" />\n    </php>\n\n    <testsuites>\n        <testsuite name=\"Symfony SecurityBundle Test Suite\">\n            <directory>./Tests/</directory>\n        </testsuite>\n    </testsuites>\n\n    <coverage>\n        <include>\n            <directory>./</directory>\n        </include>\n        <exclude>\n            <directory>./Resources</directory>\n            <directory>./Tests</directory>\n            <directory>./vendor</directory>\n        </exclude>\n    </coverage>\n</phpunit>\n"
        }
      ]
    }
  ]
}