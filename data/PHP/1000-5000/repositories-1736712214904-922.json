{
  "metadata": {
    "timestamp": 1736712214904,
    "page": 922,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SAML-Toolkits/php-saml",
      "stars": 1245,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveralls.yml",
          "type": "blob",
          "size": 0.1318359375,
          "content": "service_name: travis-ci\n\nsrc_dir: lib\n\ncoverage_clover: tests/build/logs/clover.xml\n\njson_path: tests/build/logs/coveralls-upload.json\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3046875,
          "content": "/.coveralls.yml export-ignore\n/.gitattributes export-ignore\n/.gitignore export-ignore\n/.travis.yml export-ignore\n/demo-old export-ignore\n/demo2 export-ignore\n/docs export-ignore\n/endpoints export-ignore\n/locale export-ignore\n/tests export-ignore\n/phpdoc.xml export-ignore\n/_toolkit_loader.php\n/compatibility.php\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2001953125,
          "content": "*.swp\n*~\n.DS_Store\n/settings.php\n/demo1/settings.php\n/demo-old/settings.php\n/certs/sp.key\n/certs/sp.crt\n/certs/sp_new.crt\n/certs/metadata.key\n/certs/metadata.crt\n/tests/build\n/vendor\n/composer.lock\n/.idea\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.986328125,
          "content": "language: php\ndist: trusty\nphp:\n  - 5.5\n  - 5.6\n\nmatrix:\n  fast_finish: true\n  include:\n    - php: 5.3\n      dist: precise\n    - php: 5.4\n      dist: precise\n\nenv:\n - TRAVIS=true\n\nbefore_install:\n - composer self-update || true\n - composer install --prefer-source --no-interaction\n\nbefore_script:\n  - phpenv config-rm xdebug.ini\n\nscript:\n  - vendor/bin/phpunit\n  - php vendor/bin/phpcpd --exclude tests --exclude vendor .\n  - php vendor/bin/phploc . --exclude vendor\n  - php vendor/bin/phploc lib/.\n  - mkdir -p tests/build/dependences\n  - php vendor/bin/pdepend --summary-xml=tests/build/logs/dependence-summary.xml --jdepend-chart=tests/build/dependences/jdepend.svg --overview-pyramid=tests/build/dependences/pyramid.svg  lib/.\n  - php vendor/bin/phpcs --standard=tests/ZendModStandard lib/Saml2 demo1 demo2 demo-old endpoints tests/src\n\nafter_script:\n  - export TRAVIS=https://travis-ci.org/onelogin/php-saml\n  - echo $TRAVIS\n  - echo $TRAVIS_JOB_ID\n  - php vendor/bin/coveralls --config .coveralls.yml -v\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 15.091796875,
          "content": "CHANGELOG\n=========\n\n\nv.2.20.0\n* [#586](https://github.com/SAML-Toolkits/php-saml/pull/586) IdPMetadataParser::parseRemoteXML - Add argument for setting whether to validate peer SSL certificate\n* [#585](https://github.com/SAML-Toolkits/php-saml/pull/585) Declare conditional return types\n* Make Saml2\\Auth can accept a param $spValidationOnly\n* [#577](https://github.com/SAML-Toolkits/php-saml/pull/577) Allow empty NameID value when no strict or wantNameId is false\n* [#570](https://github.com/SAML-Toolkits/php-saml/pull/570) Support X509 cert comments\n* [#569](https://github.com/SAML-Toolkits/php-saml/pull/569) Add parameter to exclude validUntil on SP Metadata XML\n* [#551](https://github.com/SAML-Toolkits/php-saml/pull/551) Fix compatibility with proxies that extends HTTP_X_FORWARDED_HOST\n* [#487](https://github.com/SAML-Toolkits/php-saml/issues/487) Enable strict check on in_array method\n* Fix typos on readme.\n* [#480](https://github.com/SAML-Toolkits/php-saml/pull/480) Fix typo on SPNameQualifier mismatch error message\n* Add $spValidationOnly param to Auth\n* Update xmlseclibs (3.1.2 without AES-GCM and OAEP support)\n* Add warning about Open Redirect and Reply attacks\n* Add warning about the use of IdpMetadataParser class. If Metadata URLs\n  are provided by 3rd parties, the URL inputs MUST be validated to avoid issues like SSRF\n* Update dependencies\n* Fix test payloads\n* Remove references to OneLogin.\n\nv.2.19.1\n* [#467](https://github.com/onelogin/php-saml/issues/467) Fix bug on getSelfRoutedURLNoQuery method\n\nv.2.19.0\n* [#412](https://github.com/onelogin/php-saml/pull/412) Empty instead of unset the $_SESSION variable\n* [#433](https://github.com/onelogin/php-saml/issues/443) Fix Incorrect Destination in LogoutResponse when using responseUrl #443\n* Add support for SMARTCARD_PKI and RSA_TOKEN Auth Contexts\n* Support Statements with Attribute elements with the same name enabling the allowRepeatAttributeName setting\n* Get lib path dynamically\n* Check for x509Cert of the IdP when loading settings, even if the security index was not provided\n\nv.2.18.1\n* Add setSchemasPath to Auth class and fix backward compatibility\n\nv.2.18.0\n* Support rejecting unsolicited SAMLResponses.\n* Support stric destination matching.\n* Reject SAMLResponse if requestID was provided to the validotr but the InResponseTo attributeof the SAMLResponse is missing\n* Check destination against the getSelfURLNoQuery as well on LogoutRequest and LogoutResponse as we do on Response\n* Improve getSelfRoutedURLNoQuery method\n* Only add responseUrl to the settings if ResponseLocation present in the IdPMetadataParser\n* Remove use of $_GET on static method validateBinarySign\n* Fix error message when Assertion and NameId are both encrypted (not supported)\n\nv.2.17.1\n* Update xmlseclibs to 3.0.4\n* Remove Comparison atribute from RequestedAuthnContext when setting has empty value\n\nv.2.17.0\n* Set true as the default value for strict setting\n* Support 'x509cert' and 'privateKey' on signMetadata security settings\n* Relax comparison of false on SignMetadata\n* Fix CI\n\nv.2.16.0\n* Support SLO ResponseLocation\n* [#344](https://github.com/onelogin/php-saml/issues/344) Raise errors on IdPMetadataParser::parseRemoteXML and IdPMetadataParser::parseFileXML\n* Adjusted acs endpoint to extract NameQualifier and SPNameQualifier from SAMLResponse. Adjusted single logout service to provide NameQualifier and SPNameQualifier to logout method. Add getNameIdNameQualifier to Auth and SamlResponse. Extend logout method from Auth and LogoutRequest constructor to support SPNameQualifier parameter. Align LogoutRequest constructor with SAML specs\n* Add support for Subjects on AuthNRequests by the new parameter\n* Set strict=true on config examples\n\nv.2.15.0\n* Security improvement suggested by Nils Engelbertz to prevent DDOS by expansion of internally defined entities (XEE)\n* Fix bug on settings_example.php\n\nv.2.14.0\n* Add  parameter to the decryptElement method to make optional the formatting\n* [#283](https://github.com/onelogin/php-saml/pull/283) New method of importing a decrypted assertion into the XML document to replace the EncryptedAssertion. Fix signature issues on Signed Encrypted Assertions with default namespace\n* Allow the getSPMetadata() method to always include the encryption Key Descriptor\n* Change some Fatal Error to Exceptions\n* [#265](https://github.com/onelogin/php-saml/issues/265) Support parameters at getSPMetadata method\n* Avoid calling static method using this\n\nv.2.13.0\n* Update xmlseclibs with some fixes.\n* Add extra protection verifying the Signature algorithm used on SignedInfo element, not only rely on the xmlseclibs verify / verifySignature methods.\n* Add getAttributesWithFriendlyName method which returns the set of SAML attributes indexed by FriendlyName\n* Fix bug on parseRemoteXML and parseFileXML. Internal calls to parseXML missed the desiredNameIdFormat parameter\n\nv.2.12.0\n* Improve Time management. Use DateTime/DateTimeZone classes.\n* Escape error messages in debug mode\n* Improve phpdoc\n* Add an extra filter to the url to be used on redirection\n\n* [#242](https://github.com/onelogin/php-saml/pull/242) Document that SHA-1 must not be used\n* [#250](https://github.com/onelogin/php-saml/pull/250) Fixed issue with IdPMetadataParser only keeping 1 certificate when multiple certificates of a single type were provided.\n* [#263](https://github.com/onelogin/php-saml/issues/263) Fix incompatibility with ADFS on SLO. When on php saml settings NameID Format is set as unspecified but the SAMLResponse has no NameID Format, no NameID Format should be specified on LogoutRequest.\n\nv.2.11.0\n* [#236](https://github.com/onelogin/php-saml/pull/236) Exclude unnecessary files from Composer production downloads\n* [#226](https://github.com/onelogin/php-saml/pull/226) Add possibility to handle nameId NameQualifier attribute in SLO Request\n* Improve logout documentation on Readme.\n* Improve multi-certificate support\n\nv.2.10.7\n* Fix IdPMetadataParser. The SingleLogoutService retrieved method was wrong\n* [#201](https://github.com/onelogin/php-saml/issues/201) Fix issues with SP entity_id, acs url and sls url that contains &\n\nv.2.10.6\n* [#206](https://github.com/onelogin/php-saml/pull/206)Be able to register future SP x509cert on the settings and publish it on SP metadata\n* [#206](https://github.com/onelogin/php-saml/pull/206) Be able to register more than 1 Identity Provider x509cert, linked with an specific use (signing or encryption)\n* [#206](https://github.com/onelogin/php-saml/pull/206) Support the ability to parse IdP XML metadata (remote url or file) and be able to inject the data obtained on the settings.\n\nv.2.10.5\n* Be able to get at the auth object the last processed ID\n* Improve NameID Format support\n* Reset errorReason attribute of the auth object after each Process method\n* Validate serial number as string to work around libxml2 limitation\n* Make the Issuer on the Response Optional\n\nv.2.10.4\n* [+](https://github.com/onelogin/php-saml/commit/949359f5cad5e1d085c4e5447d9aa8f49a6e82a1) Security update for signature validation on LogoutRequest/LogoutResponse\n* [#192](https://github.com/onelogin/php-saml/pull/192) Added ability to configure DigestAlgorithm in settings\n* [#183](https://github.com/onelogin/php-saml/pull/183) Fix strpos bug when decrypting assertions\n* [#186](https://github.com/onelogin/php-saml/pull/186) Improve info on entityId validation Exception\n* [#188](https://github.com/onelogin/php-saml/pull/188) Fixed issue with undefined constant of UNEXPECTED_SIGNED_ELEMENT\n* Read ACS binding on AuthNRequest builder from settings\n* Be able to relax Destination validation on SAMLResponses and let this\n  attribute to be empty with the 'relaxDestinationValidation' setting\n\nv.2.10.3\n* Implement a more specific exception class for handling some validation errors\n* Minor changes on time validation/exceptions\n* Add hooks to retrieve last-sent and last-received requests and responses\n* Improve/Fix tests\n* Add DigestAlgorithm support on addSign\n* [#177](https://github.com/onelogin/php-saml/pull/177) Add error message for bad OneLogin_Saml2_Settings argument\n\nv.2.10.2\n* [#175](https://github.com/onelogin/php-saml/pull/175) Allow overriding of host, port, protocol and url path for URL building\n* [#173](https://github.com/onelogin/php-saml/pull/173) Provide better support to NameIdFormat\n* Fix another issue on Assertion Signature validation when the assertion contains no namespace, container has saml2 namespace and it was encrypted\n\nv.2.10.1\n* Fix error message on SignMetadata process\n* Fix issue on Assertion Signature validation when the assertion contains no namespace and it was encrypted\n\nv.2.10.0\n* Several security improvements:\n  * Conditions element required and unique.\n  * AuthnStatement element required and unique.\n  * SPNameQualifier must math the SP EntityID\n  * Reject saml:Attribute element with same “Name” attribute\n  * Reject empty nameID\n  * Require Issuer element. (Must match IdP EntityID).\n  * Destination value can't be blank (if present must match ACS URL).\n  * Check that the EncryptedAssertion element only contains 1 Assertion element.\n* Improve Signature validation process\n* AttributeConsumingService support\n* Support lowercase Urlencoding (ADFS compatibility).\n* [#154](https://github.com/onelogin/php-saml/pull/154) getSelfHost no longer returns a port number\n* [#156](https://github.com/onelogin/php-saml/pull/156) Use correct host on response destination fallback check\n* [#158](https://github.com/onelogin/php-saml/pull/158) NEW Control usage of X-Forwarded-* headers\n* Fix issue with buildRequestSignature. Added RelayState to the SignQuery only if is not null.\n* Add Signature Wrapping prevention Test\n* Improve _decryptAssertion in order to take care of Assertions with problems with namespaces\n* Improve documentation\n\nv.2.9.1\n.......\n* [134](https://github.com/onelogin/php-saml/pull/134) PHP7 production settings compiles out assert(), throw an exception explicitly\n* [132](https://github.com/onelogin/php-saml/pull/132) Add note for \"wantAssertionsEncrypted\"\n* Update copyright on LICENSE\n\nv.2.9.0\n-------\n* Change the decrypt assertion process.\n* Add 2 extra validations to prevent Signature wrapping attacks.\n* Remove reference to wrong NameIDFormat: urn:oasis:names:tc:SAML:2.0:nameid-format:unspecified should be urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\n* [128](https://github.com/onelogin/php-saml/pull/128) Test php7 and upgrade phpunit\n* Update Readme with more descriptive requestedAuthnContext description and Security Guidelines\n\nv.2.8.0\n-------\n* Make NameIDPolicy of AuthNRequest optional\n* Make nameID requirement on SAMLResponse optional\n* Fix empty URI support\n* Symmetric encryption key support\n* Add more Auth Context options to the constant class\n* Fix DSA_SHA1 constant on xmlseclibs\n* Set none requestedAuthnContext as default behaviour\n* Update xmlseclibs lib\n* Improve formatPrivateKey method\n* Fix bug when signing metadata, the SignatureMethod was not provided\n* Fix getter for lastRequestID parameter in OneLogin_Saml2_Auth class\n* Add $wantEncrypted parameter on addX509KeyDescriptors method that will allow to set KeyDescriptor[use='encryption'] if wantNameIdEncrypted or wantAssertionsEncrypted enabled\n* Add $stay parameter on redirectTo method. (login/logout supports $stay but I forgot add this on previous 2.7.0 version)\n* Improve code style\n\nv.2.7.0\n-------\n* Trim acs, slo and issuer urls.\n* Fix PHP 7 error (used continue outside a loop/switch).\n* Fix bug on organization element of the SP metadata builder.\n* Fix typos on documentation. Fix ALOWED Misspell.\n* Be able to extract RequestID. Add RequestID validation on demo1.\n* Add $stay parameter to login, logout and processSLO method.\n\nv.2.6.1\n-------\n* Fix bug on cacheDuration of the Metadata XML generated.\n* Make SPNameQualifier optional on the generateNameId method. Avoid the use of SPNameQualifier when generating the NameID on the LogoutRequest builder.\n* Allows the authn comparison attribute to be set via config.\n* Retrieve Session Timeout after processResponse with getSessionExpiration().\n* Improve readme readability.\n* Allow single log out to work for applications not leveraging php session_start. Added a callback parameter in order to close the session at processSLO.\n\nv.2.6.0\n-------\n* Set NAMEID_UNSPECIFIED as default NameIDFormat to prevent conflicts with IdPs that don't support NAMEID_PERSISTENT.\n* Now the SP is able to select the algorithm to be used on signatures (DSA_SHA1, RSA_SHA1, RSA_SHA256, RSA_SHA384, RSA_SHA512).\n* Change visibility of _decryptAssertion to protected.\n* Update xmlseclibs library.\n* Handle valid but uncommon dsig block with no URI in the reference.\n* login, logout and processSLO now return ->redirectTo instead of just call it.\n* Split the setting check methods. Now 1 method for IdP settings and other for SP settings.\n* Let the setting object to avoid the IdP setting check. required if we want to publish SP SAML Metadata when the IdP data is still not provided.\n\nv.2.5.0\n-------\n* Do accessible the ID of the object Logout Request (id attribute).\n* Add note about the fact that PHP 5.3 is unsupported.\n* Add fingerprint algorithm support.\n* Add dependences to composer.\n\nv.2.4.0\n-------\n* Fix wrong element order in generated metadata.\n* Added SLO with nameID and SessionIndex in demo1.\n* Improve isHTTPS method in order to support HTTP_X_FORWARDED_PORT.\n* Set optional the XMLvalidation (enable/disable it with wantXMLValidation security setting).\n\nv.2.3.0\n-------\n* Resolve namespace problem. Some IdPs uses saml2p:Response and saml2:Assertion instead of samlp:Response saml:Assertion.\n* Improve test and documentation.\n* Improve ADFS compatibility.\n* Remove unnecessary XSDs files.\n* Make available the reason for the saml message invalidation.\n* Adding ability to set idp cert once the Setting object initialized.\n* Fix status info issue.\n* Reject SAML Response if not signed and strict = false.\n* Support NameId and SessionIndex in LogoutRequest.\n* Add ForceAuh and IsPassive support.\n\nv.2.2.0\n-------\n* Fix bug with Encrypted nameID on LogoutRequest.\n* Fixed usability bug. SP will inform about AuthFail status after process a Response.\n* Added SessionIndex support on LogoutRequest, and know is accessible from the Auth class.\n* LogoutRequest and LogoutResponse classes now accept non deflated xml.\n* Improved the XML metadata/ Decrypted Assertion output. (prettyprint).\n* Fix bug in formatPrivateKey method, the key could be not RSA.\n* Explicit warning message for signed element problem.\n* Decrypt method improved.\n* Support more algorithm at the SigAlg in the Signed LogoutRequests and LogoutResponses\n* AuthNRequest now stores ID (it can be retrieved later).\n* Fixed a typo on the 'NameIdPolicy' attribute that appeared at the README and settings_example file.\n\n\nv.2.1.0\n-------\n\n* The isValid method of the Logout Request is now non-static. (affects processSLO method of Auth.php).\n* Logout Request constructor now accepts encoded logout requests.\n* Now after validate a message, if fails a method getError of the object will return the cause.\n* Fix typos.\n* Added extra parameters option to login and logout methods.\n* Improve Test (new test, use the new getError method for testing).\n* Bugfix namespace problem when getting Attributes.\n\n\nv.2.0.0\n-------\n\n* New PHP SAML Toolkit (SLO, Sign, Encryptation).\n\n\nv.1.0.0\n-------\n\n* Old PHP SAML Toolkit.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0390625,
          "content": "Copyright (c) 2010-2016 OneLogin, Inc.\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 71.54296875,
          "content": "# SAML PHP Toolkit\n\n[![php-saml package](https://github.com/SAML-Toolkits/php-saml/actions/workflows/php-package.yml/badge.svg?branch=master)](https://github.com/SAML-Toolkits/php-saml/actions/workflows/php-package.yml) [![Coverage Status](https://coveralls.io/repos/github/SAML-Toolkits/php-saml/badge.svg?branch=master)](https://coveralls.io/github/SAML-Toolkits/php-saml?branch=master) ![Packagist Dependency Version (specify version)](https://img.shields.io/packagist/dependency-v/onelogin/php-saml/php?version=2.19.1) [![License](https://poser.pugx.org/onelogin/php-saml/license.png)](https://packagist.org/packages/onelogin/php-saml) ![Packagist Downloads](https://img.shields.io/packagist/dm/onelogin/php-saml) ![Packagist Downloads](https://img.shields.io/packagist/dt/onelogin/php-saml?label=Total%20downloads)\n\nAdd SAML support to your PHP software using this library.\n\n\n**The 3.X branch is compatible with PHP 7.0, PHP 7.1, PHP 7.2 , so if you are using that PHP version, use it and not the 2.X or the master branch**\n\n**The 4.X branch is compatible with PHP >= 7.3 and PHP 8.X**\n\nWarning\n-------\n\nVersion 2.18.0 introduces the 'rejectUnsolicitedResponsesWithInResponseTo' setting parameter, by default disabled, that will allow invalidate unsolicited SAMLResponse. This version as well will reject SAMLResponse if requestId was provided to the validator but the SAMLResponse does not contain a InResponseTo attribute.  And an additional setting parameter 'destinationStrictlyMatches', by default disabled, that will force that the Destination URL should strictly match to the address that process the SAMLResponse.\n\nVersion 2.17.1 updates xmlseclibs to 3.0.4 (CVE-2019-3465), but php-saml was not directly affected since it implements additional checks that prevent to exploit that vulnerability.\n\nVersion 2.17.0 sets strict mode active by default\n\nUpdate php-saml to 2.15.0, this version includes a security patch related to XEE attacks\n\nphp-saml is not affected by [201803-01](https://simplesamlphp.org/security/201803-01)\n\nUpdate php-saml to 2.10.4, this version includes a security patch related to\n[signature validations on LogoutRequests/LogoutResponses](https://github.com/onelogin/php-saml/commit/949359f5cad5e1d085c4e5447d9aa8f49a6e82a1)\n\nUpdate php-saml to 2.10.0, this version includes a security patch that contains extra validations that will prevent signature wrapping attacks. [CVE-2016-1000253](https://github.com/distributedweaknessfiling/DWF-Database-Artifacts/blob/ab8ae6e845eb506fbeb10a7e4ccb379f0b4222ca/DWF/2016/1000253/CVE-2016-1000253.json)\n\nphp-saml < v2.10.0 is vulnerable and allows signature wrapping!\n\n\nSecurity Guidelines\n-------------------\n\nIf you believe you have discovered a security vulnerability in this toolkit, please report it by mail to the maintainer: sixto.martin.garcia+security@gmail.com\n\n\nWhy add SAML support to my software?\n------------------------------------\n\nSAML is an XML-based standard for web browser single sign-on and is defined by\nthe OASIS Security Services Technical Committee. The standard has been around\nsince 2002, but lately it is becoming popular due its advantages:\n\n * **Usability** - One-click access from portals or intranets, deep linking,\n   password elimination and automatically renewing sessions make life\n   easier for the user.\n * **Security** - Based on strong digital signatures for authentication and\n   integrity, SAML is a secure single sign-on protocol that the largest\n   and most security conscious enterprises in the world rely on.\n * **Speed** - SAML is fast. One browser redirect is all it takes to securely\n   sign a user into an application.\n * **Phishing Prevention** - If you don’t have a password for an app, you\n   can’t be tricked into entering it on a fake login page.\n * **IT Friendly** - SAML simplifies life for IT because it centralizes\n   authentication, provides greater visibility and makes directory\n   integration easier.\n * **Opportunity** - B2B cloud vendor should support SAML to facilitate the\n   integration of their product.\n\n\nGeneral description\n-------------------\n\nSAML PHP toolkit let you build a SP (Service Provider) over\nyour PHP application and connect it to any IdP (Identity Provider).\n\nSupports:\n\n * SSO and SLO (SP-Initiated and IdP-Initiated).\n * Assertion and nameId encryption.\n * Assertion signature.\n * Message signature: AuthNRequest, LogoutRequest, LogoutResponses.\n * Enable an Assertion Consumer Service endpoint.\n * Enable a Single Logout Service endpoint.\n * Publish the SP metadata (which can be signed).\n\nKey features:\n\n * **saml2int** - Implements the SAML 2.0 Web Browser SSO Profile.\n * **Session-less** - Forget those common conflicts between the SP and\n   the final app, the toolkit delegate session in the final app.\n * **Easy to use** - Programmer will be allowed to code high-level and\n   low-level programming, 2 easy to use APIs are available.\n * **Tested** - Thoroughly tested.\n * **Popular** - customers use it. Many PHP SAML plugins uses it.\n\nIntegrate your PHP toolkit at OneLogin using this guide: [https://developers.onelogin.com/page/saml-toolkit-for-php](https://developers.onelogin.com/page/saml-toolkit-for-php)\n\nInstallation\n------------\n\n### Dependencies ###\n\n * `php >= 5.3.3` and some core extensions like `php-xml`, `php-date`, `php-zlib`.\n * `openssl`. Install the openssl library. It handles x509 certificates.\n * `mcrypt`. Install that library and its php driver if you're going to handle\n   encrypted data (`nameID`, `assertions`).\n * `curl`. Install that library and its php driver if you plan to use the IdP Metadata parser.\n\nSince [PHP 5.3 is officially unsupported](http://php.net/eol.php) we recommend you to use a newer PHP version.\n\n### Code ###\n\n#### Option 1. clone the repository from  github ####\n\ngit clone git@github.com:onelogin/php-saml.git\n\n#### Option 2. Download from github ####\n\nThe toolkit is hosted on github. You can download it from:\n\n * Latest release: https://github.com/onelogin/php-saml/releases/latest\n * Master repo: https://github.com/onelogin/php-saml/tree/master\n\nCopy the core of the library inside the php application. (each application has its\nstructure so take your time to locate the PHP SAML toolkit in the best place).\nSee the \"Guide to add SAML support to my app\" to know how.\n\nTake in mind that the compressed file only contains the main files.\nIf you plan to play with the demos, use the Option 1.\n\n#### Option 3. Composer ####\n\nThe toolkit supports [composer](https://getcomposer.org/). You can find the `onelogin/php-saml` package at https://packagist.org/packages/onelogin/php-saml\n\nIn order to import the saml toolkit to your current php project, execute\n```\ncomposer require onelogin/php-saml\n```\n\nAfter installation has completed you will find at the `vendor/` folder a new folder named `onelogin` and inside the `php-saml`. Make sure you are including the autoloader provided by composer. It can be found at `vendor/autoload.php`.\n\n**Important** In this option, the x509 certs must be stored at `vendor/onelogin/php-saml/certs`\nand settings file stored at `vendor/onelogin/php-saml`.\n\nYour settings are at risk of being deleted when updating packages using `composer update` or similar commands. So it is **highly** recommended that instead of using settings files, you pass the settings as an array directly to the constructor (explained later in this document). If you do not use this approach your settings are at risk of being deleted when updating packages using `composer update` or similar commands.\n\nCompatibility\n-------------\n\nThis 2.0 version has a new library. The toolkit is still compatible.\n\nThe old code that you used in order to add SAML support will continue working\nwith minor changes. You only need to load the files of the `lib/Saml` folder.\n(notice that the `compatibility.php` file do that).\n\nThe old-demo folder contains code from an old app that uses the old version of\nthe toolkit (v.1). Take a look.\n\nSometimes the names of the classes of the old code could be a bit different\nand if that is your case you must change them for `OneLogin_Saml_Settings`,\n`OneLogin_Saml_Response`, `OneLogin_Saml_AuthRequest` or `OneLogin_Saml_Metadata`.\n\nWe recommend that you migrate the old code to the new one to be able to use\nthe new features that the new library Saml2 carries.\n\n\nNamespaces\n----------\n\nIf you are using the library with a framework like Symfony that contains\nnamespaces, remember that calls to the class must be done by adding a backslash (`\\`) to the\nstart, for example to use the static method getSelfURLNoQuery use:\n\n    \\OneLogin_Saml2_Utils::getSelfURLNoQuery()\n\n\nSecurity warning\n----------------\n\nIn production, the `strict` parameter **MUST** be set as `\"true\"` and the\n`signatureAlgorithm` and `digestAlgorithm` under `security` must be set to\nsomething other than SHA1 (see https://shattered.io/ ). Otherwise your\nenvironment is not secure and will be exposed to attacks.\n\nIn production also we highly recommended to register on the settings the IdP certificate instead of using the fingerprint method. The fingerprint, is a hash, so at the end is open to a collision attack that can end on a signature validation bypass. Other SAML toolkits deprecated that mechanism, we maintain it for compatibility and also to be used on test environment.\n\n\n### Avoiding Open Redirect attacks ###\n\nSome implementations uses the RelayState parameter as a way to control the flow when SSO and SLO succeeded. So basically the\nuser is redirected to the value of the RelayState.\n\nIf you are using Signature Validation on the HTTP-Redirect binding, you will have the RelayState value integrity covered, otherwise, and\non HTTP-POST binding, you can't trust the RelayState so before\nexecuting the validation, you need to verify that its value belong\na trusted and expected URL.\n\nRead more about Open Redirect [CWE-601](https://cwe.mitre.org/data/definitions/601.html).\n\n\n### Avoiding Replay attacks ###\n\nA replay attack is basically try to reuse an intercepted valid SAML Message in order to impersonate a SAML action (SSO or SLO).\n\nSAML Messages have a limited timelife (NotBefore, NotOnOrAfter) that\nmake harder this kind of attacks, but they are still possible.\n\nIn order to avoid them, the SP can keep a list of SAML Messages or Assertion IDs alredy validated and processed. Those values only need\nto be stored the amount of time of the SAML Message life time, so\nwe don't need to store all processed message/assertion Ids, but the most recent ones.\n\nThe OneLogin_Saml2_Auth class contains the [getLastRequestID](https://github.com/onelogin/php-saml/blob/f08bc1e8321cc8b855481153a26b9ed57a5201c2/lib/Saml2/Auth.php#L623), [getLastMessageId](https://github.com/onelogin/php-saml/blob/f08bc1e8321cc8b855481153a26b9ed57a5201c2/lib/Saml2/Auth.php#L709) and [getLastAssertionId](https://github.com/onelogin/php-saml/blob/f08bc1e8321cc8b855481153a26b9ed57a5201c2/lib/Saml2/Auth.php#L717) methods to retrieve the IDs\n\nChecking that the ID of the current Message/Assertion does not exists in the list of the ones already processed will prevent reply\nattacks.\n\n\nGetting started\n---------------\n\n### Knowing the toolkit ###\n\nThe new OneLogin SAML Toolkit contains different folders (`certs`, `endpoints`,\n`extlib`, `lib`, `demo`, etc.) and some files.\n\nLet's start describing the folders:\n\n#### `certs/` ####\n\nSAML requires a x509 cert to sign and encrypt elements like `NameID`, `Message`,\n`Assertion`, `Metadata`.\n\nIf our environment requires sign or encrypt support, this folder may contain\nthe x509 cert and the private key that the SP will use:\n\n * `sp.crt` - The public cert of the SP\n * `sp.key` - The private key of the SP\n\nOr also we can provide those data in the setting file at the `$settings['sp']['x509cert']`\nand the `$settings['sp']['privateKey']`.\n\nSometimes we could need a signature on the metadata published by the SP, in\nthis case we could use the x509 cert previously mentioned or use a new x509\ncert: `metadata.crt` and `metadata.key`.\n\nUse `sp_new.crt` if you are in a key rollover process and you want to\npublish that x509 certificate on Service Provider metadata.\n\n#### `extlib/` ####\n\nThis folder contains the 3rd party libraries that the toolkit uses. At the\nmoment only uses the `xmlseclibs` (author Robert Richards, BSD Licensed) which\nhandle the sign and the encryption of xml elements.\n\n\n#### `lib/` ####\n\nThis folder contains the heart of the toolkit, the libraries:\n\n * `Saml` folder contains a modified version of the toolkit v.1 and allows the\n   old code to keep working. (This library is provided to maintain\n   backward compatibility).\n * `Saml2` folder contains the new version of the classes and methods that\n   are described in a later section.\n\n\n#### `doc/` ####\n\nThis folder contains the API documentation of the toolkit.\n\n\n#### `endpoints/` ####\n\nThe toolkit has three endpoints:\n\n * `metadata.php` - Where the metadata of the SP is published.\n * `acs.php` - Assertion Consumer Service. Processes the SAML Responses.\n * `sls.php` - Single Logout Service. Processes Logout Requests and Logout\n   Responses.\n\nYou can use the files provided by the toolkit or create your own endpoints\nfiles when adding SAML support to your applications. Take in mind that those\nendpoints files uses the setting file of the toolkit's base folder.\n\n\n#### `locale/` ####\n\nLocale folder contains some translations: `en_US` and `es_ES` as a proof of concept.\nCurrently there are no translations but we will eventually localize the messages\nand support multiple languages.\n\n\n#### Other important files ####\n\n* `settings_example.php` - A template to be used in order to create a\n  settings.php file which contains the basic configuration info of the toolkit.\n* `advanced_settings_example.php` - A template to be used in order to create a\n  advanced_settings.php file which contains extra configuration info related to\n  the security, the contact person, and the organization associated to the SP.\n* `_toolkit_loader.php` - This file load the toolkit libraries (The SAML2 lib).\n* `compatibility` - Import that file to make compatible your old code with the\n  new toolkit (loads the SAML library).\n\n\n#### Miscellaneous ####\n\n* `tests/` - Contains the unit test of the toolkit.\n* `demo1/` - Contains an example of a simple PHP app with SAML support.\n  Read the `Readme.txt` inside for more info.\n* `demo2/` - Contains another example.\n* `demo-old/` - Contains an example that uses the code of the older version of the\n  the toolkit to demonstrate the backwards compatibility.\n\n\n### How it works ###\n\n#### Settings ####\n\nFirst of all we need to configure the toolkit. The SP's info, the IdP's info,\nand in some cases, configure advanced security issues like signatures and\nencryption.\n\nThere are two ways to provide the settings information:\n\n * Use a `settings.php` file that we should locate at the base folder of the\n   toolkit.\n * Use an array with the setting data and provide it directly to the\n   constructor of the class.\n\n\nThere is a template file, `settings_example.php`, so you can make a copy of this\nfile, rename and edit it.\n\n```php\n<?php\n\n$settings = array (\n    // If 'strict' is True, then the PHP Toolkit will reject unsigned\n    // or unencrypted messages if it expects them to be signed or encrypted.\n    // Also it will reject the messages if the SAML standard is not strictly\n    // followed: Destination, NameId, Conditions ... are validated too.\n    'strict' => true,\n\n    // Enable debug mode (to print errors).\n    'debug' => false,\n\n    // Set a BaseURL to be used instead of try to guess\n    // the BaseURL of the view that process the SAML Message.\n    // Ex http://sp.example.com/\n    //    http://example.com/sp/\n    'baseurl' => null,\n\n    // Service Provider Data that we are deploying.\n    'sp' => array (\n        // Identifier of the SP entity  (must be a URI)\n        'entityId' => '',\n        // Specifies info about where and how the <AuthnResponse> message MUST be\n        // returned to the requester, in this case our SP.\n        'assertionConsumerService' => array (\n            // URL Location where the <Response> from the IdP will be returned\n            'url' => '',\n            // SAML protocol binding to be used when returning the <Response>\n            // message. SAML Toolkit supports this endpoint for the\n            // HTTP-POST binding only.\n            'binding' => 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',\n        ),\n        // If you need to specify requested attributes, set a\n        // attributeConsumingService. nameFormat, attributeValue and\n        // friendlyName can be omitted\n        \"attributeConsumingService\"=> array(\n                \"serviceName\" => \"SP test\",\n                \"serviceDescription\" => \"Test Service\",\n                \"requestedAttributes\" => array(\n                    array(\n                        \"name\" => \"\",\n                        \"isRequired\" => false,\n                        \"nameFormat\" => \"\",\n                        \"friendlyName\" => \"\",\n                        \"attributeValue\" => array()\n                    )\n                )\n        ),\n        // Specifies info about where and how the <Logout Response> message MUST be\n        // returned to the requester, in this case our SP.\n        'singleLogoutService' => array (\n            // URL Location where the <Response> from the IdP will be returned\n            'url' => '',\n            // SAML protocol binding to be used when returning the <Response>\n            // message. SAML Toolkit supports the HTTP-Redirect binding\n            // only for this endpoint.\n            'binding' => 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',\n        ),\n        // Specifies the constraints on the name identifier to be used to\n        // represent the requested subject.\n        // Take a look on lib/Saml2/Constants.php to see the NameIdFormat supported.\n        'NameIDFormat' => 'urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress',\n        // Usually x509cert and privateKey of the SP are provided by files placed at\n        // the certs folder. But we can also provide them with the following parameters\n        'x509cert' => '',\n        'privateKey' => '',\n\n        /*\n         * Key rollover\n         * If you plan to update the SP x509cert and privateKey\n         * you can define here the new x509cert and it will be\n         * published on the SP metadata so Identity Providers can\n         * read them and get ready for rollover.\n         */\n        // 'x509certNew' => '',\n    ),\n\n    // Identity Provider Data that we want connected with our SP.\n    'idp' => array (\n        // Identifier of the IdP entity  (must be a URI)\n        'entityId' => '',\n        // SSO endpoint info of the IdP. (Authentication Request protocol)\n        'singleSignOnService' => array (\n            // URL Target of the IdP where the Authentication Request Message\n            // will be sent.\n            'url' => '',\n            // SAML protocol binding to be used when returning the <Response>\n            // message. SAML Toolkit supports the HTTP-Redirect binding\n            // only for this endpoint.\n            'binding' => 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',\n        ),\n        // SLO endpoint info of the IdP.\n        'singleLogoutService' => array (\n            // URL Location of the IdP where SLO Request will be sent.\n            'url' => '',\n            // URL location of the IdP where the SP will send the SLO Response (ResponseLocation)\n            // if not set, url for the SLO Request will be used\n            'responseUrl' => '',\n            // SAML protocol binding to be used when returning the <Response>\n            // message. SAML Toolkit supports the HTTP-Redirect binding\n            // only for this endpoint.\n            'binding' => 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',\n        ),\n        // Public x509 certificate of the IdP\n        'x509cert' => '',\n        /*\n         *  Instead of use the whole x509cert you can use a fingerprint in order to\n         *  validate a SAMLResponse, but we don't recommend to use that\n         *  method on production since is exploitable by a collision attack.\n         *  (openssl x509 -noout -fingerprint -in \"idp.crt\" to generate it,\n         *   or add for example the -sha256 , -sha384 or -sha512 parameter)\n         *\n         *  If a fingerprint is provided, then the certFingerprintAlgorithm is required in order to\n         *  let the toolkit know which algorithm was used. Possible values: sha1, sha256, sha384 or sha512\n         *  'sha1' is the default value.\n         *\n         *  Notice that if you want to validate any SAML Message sent by the HTTP-Redirect binding, you\n         *  will need to provide the whole x509cert.\n         */\n        // 'certFingerprint' => '',\n        // 'certFingerprintAlgorithm' => 'sha1',\n\n        /* In some scenarios the IdP uses different certificates for\n         * signing/encryption, or is under key rollover phase and\n         * more than one certificate is published on IdP metadata.\n         * In order to handle that the toolkit offers that parameter.\n         * (when used, 'x509cert' and 'certFingerprint' values are\n         * ignored).\n         */\n        // 'x509certMulti' => array(\n        //      'signing' => array(\n        //          0 => '<cert1-string>',\n        //      ),\n        //      'encryption' => array(\n        //          0 => '<cert2-string>',\n        //      )\n        // ),\n    ),\n);\n```\nIn addition to the required settings data (IdP, SP), there is extra\ninformation that could be defined. In the same way that a template exists\nfor the basic info, there is a template for that advanced info located\nat the base folder of the toolkit and named `advanced_settings_example.php`\nthat you can copy and rename it as `advanced_settings.php`\n\n```php\n<?php\n\n$advancedSettings = array (\n\n    // Compression settings\n    'compress' => array (\n        'requests' => true,\n        'responses' => true\n    ),\n    // Security settings\n    'security' => array (\n\n        /** signatures and encryptions offered */\n\n        // Indicates that the nameID of the <samlp:logoutRequest> sent by this SP\n        // will be encrypted.\n        'nameIdEncrypted' => false,\n\n        // Indicates whether the <samlp:AuthnRequest> messages sent by this SP\n        // will be signed.  [Metadata of the SP will offer this info]\n        'authnRequestsSigned' => false,\n\n        // Indicates whether the <samlp:logoutRequest> messages sent by this SP\n        // will be signed.\n        'logoutRequestSigned' => false,\n\n        // Indicates whether the <samlp:logoutResponse> messages sent by this SP\n        // will be signed.\n        'logoutResponseSigned' => false,\n\n        /* Sign the Metadata\n         False || True (use sp certs) || array (\n                                                    keyFileName => 'metadata.key',\n                                                    certFileName => 'metadata.crt'\n                                               )\n                                      || array (\n                                                    'x509cert' => '',\n                                                    'privateKey' => ''\n                                               )\n        */\n        'signMetadata' => false,\n\n        /** signatures and encryptions required **/\n\n        // Indicates a requirement for the <samlp:Response>, <samlp:LogoutRequest>\n        // and <samlp:LogoutResponse> elements received by this SP to be signed.\n        'wantMessagesSigned' => false,\n\n        // Indicates a requirement for the <saml:Assertion> elements received by\n        // this SP to be encrypted.\n        'wantAssertionsEncrypted' => false,\n\n        // Indicates a requirement for the <saml:Assertion> elements received by\n        // this SP to be signed. [Metadata of the SP will offer this info]\n        'wantAssertionsSigned' => false,\n\n        // Indicates a requirement for the NameID element on the SAMLResponse\n        // received by this SP to be present.\n        'wantNameId' => true,\n\n        // Indicates a requirement for the NameID received by\n        // this SP to be encrypted.\n        'wantNameIdEncrypted' => false,\n\n        // Authentication context.\n        // Set to false and no AuthContext will be sent in the AuthNRequest.\n        // Set true or don't present this parameter and you will get an AuthContext 'exact' 'urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport'.\n        // Set an array with the possible auth context values: array ('urn:oasis:names:tc:SAML:2.0:ac:classes:Password', 'urn:oasis:names:tc:SAML:2.0:ac:classes:X509').\n        'requestedAuthnContext' => false,\n\n        // Indicates if the SP will validate all received xmls.\n        // (In order to validate the xml, 'strict' and 'wantXMLValidation' must be true).\n        'wantXMLValidation' => true,\n\n        // If true, SAMLResponses with an empty value at its Destination\n        // attribute will not be rejected for this fact.\n        'relaxDestinationValidation' => false,\n\n        // If true, the toolkit will not raised an error when the Statement Element\n        // contain atribute elements with name duplicated\n        'allowRepeatAttributeName' => false,\n\n        // If true, Destination URL should strictly match to the address to\n        // which the response has been sent.\n        // Notice that if 'relaxDestinationValidation' is true an empty Destination\n        // will be accepted.\n        'destinationStrictlyMatches' => false,\n\n        // If true, SAMLResponses with an InResponseTo value will be rejected if not\n        // AuthNRequest ID provided to the validation method.\n        'rejectUnsolicitedResponsesWithInResponseTo' => false,\n\n        // Algorithm that the toolkit will use on signing process. Options:\n        //    'http://www.w3.org/2000/09/xmldsig#rsa-sha1'\n        //    'http://www.w3.org/2000/09/xmldsig#dsa-sha1'\n        //    'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256'\n        //    'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384'\n        //    'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512'\n        // Notice that sha1 is a deprecated algorithm and should not be used\n        'signatureAlgorithm' => 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256',\n\n        // Algorithm that the toolkit will use on digest process. Options:\n        //    'http://www.w3.org/2000/09/xmldsig#sha1'\n        //    'http://www.w3.org/2001/04/xmlenc#sha256'\n        //    'http://www.w3.org/2001/04/xmldsig-more#sha384'\n        //    'http://www.w3.org/2001/04/xmlenc#sha512'\n        // Notice that sha1 is a deprecated algorithm and should not be used\n        'digestAlgorithm' => 'http://www.w3.org/2001/04/xmlenc#sha256',\n\n        // ADFS URL-Encodes SAML data as lowercase, and the toolkit by default uses\n        // uppercase. Turn it True for ADFS compatibility on signature verification\n        'lowercaseUrlencoding' => false,\n    ),\n\n    // Contact information template, it is recommended to supply a\n    // technical and support contacts.\n    'contactPerson' => array (\n        'technical' => array (\n            'givenName' => '',\n            'emailAddress' => ''\n        ),\n        'support' => array (\n            'givenName' => '',\n            'emailAddress' => ''\n        ),\n    ),\n\n    // Organization information template, the info in en_US lang is\n    // recommended, add more if required.\n    'organization' => array (\n        'en-US' => array(\n            'name' => '',\n            'displayname' => '',\n            'url' => ''\n        ),\n    ),\n);\n```\n\nThe compression settings allow you to instruct whether or not the IdP can accept\ndata that has been compressed using [gzip](gzip) ('requests' and 'responses').\nBut if we provide a `$deflate` boolean parameter to the `getRequest` or `getResponse` method it will have priority over the compression settings.\n\nIn the security section, you can set the way that the SP will handle the messages\nand assertions. Contact the admin of the IdP and ask him what the IdP expects,\nand decide what validations will handle the SP and what requirements the SP will have\nand communicate them to the IdP's admin too.\n\nOnce we know what kind of data could be configured, let's talk about the way\nsettings are handled within the toolkit.\n\nThe settings files described (`settings.php` and `advanced_settings.php`) are loaded\nby the toolkit if no other array with settings info is provided in the constructor of the toolkit. Let's see some examples.\n\n```php\n// Initializes toolkit with settings.php & advanced_settings files.\n$auth = new OneLogin_Saml2_Auth();\n//or\n$settings = new OneLogin_Saml2_Settings();\n\n// Initializes toolkit with the array provided.\n$auth = new OneLogin_Saml2_Auth($settingsInfo);\n//or\n$settings = new OneLogin_Saml2_Settings($settingsInfo);\n```\n\nYou can declare the `$settingsInfo` in the file that contains the constructor\nexecution or locate them in any file and load the file in order to get the\narray available as we see in the following example:\n\n```php\n<?php\n\nrequire_once 'custom_settings.php';  // The custom_settings.php contains a\n                                     // $settingsInfo array.\n\n$auth = new OneLogin_Saml2_Auth($settingsInfo);\n```\n\n\n#### How load the library ####\n\nIn order to use the toolkit library you need to import the `_toolkit_loader.php`\nfile located on the base folder of the toolkit. You can load this file in this\nway:\n\n```php\n<?php\n\ndefine(\"TOOLKIT_PATH\", '/var/www/php-saml/');\nrequire_once(TOOLKIT_PATH . '_toolkit_loader.php');\n```\n\nAfter that line we will be able to use the classes (and their methods) of the\ntoolkit (because the external and the Saml2 libraries files are loaded).\n\nIf you wrote the code of your SAML app for the version 1 of the PHP-SAML toolkit\nyou will need to load the `compatibility.php`, file which loads the SAML library files,\nin addition to the the `_toolkit_loader.php`.\n\nThat SAML library uses the new classes and methods of the latest version of the\ntoolkits but maintain the old classes, methods, and workflow of the old process\nto accomplish the same things.\n\nWe strongly recommend migrating your old code and use the new API of the\nnew toolkit due there are a lot of new features that you can't handle with the\nold code.\n\n\n#### Initiate SSO ####\n\nIn order to send an `AuthNRequest` to the IdP:\n\n```php\n<?php\n\ndefine(\"TOOLKIT_PATH\", '/var/www/php-saml/');\nrequire_once(TOOLKIT_PATH . '_toolkit_loader.php');   // We load the SAML2 lib\n\n$auth = new OneLogin_Saml2_Auth(); // Constructor of the SP, loads settings.php\n                                   // and advanced_settings.php\n$auth->login();   // Method that sent the AuthNRequest\n```\n\nThe `AuthNRequest` will be sent signed or unsigned based on the security info\nof the `advanced_settings.php` (`'authnRequestsSigned'`).\n\n\nThe IdP will then return the SAML Response to the user's client. The client is then forwarded to the Attribute Consumer Service of the SP with this information. If we do not set a `'url'` param in the login method and we are using the default ACS provided by the toolkit (`endpoints/acs.php`), then the ACS endpoint will redirect the user to the file that launched the SSO request.\n\nWe can set a `'returnTo'` url to change the workflow and redirect the user to the other PHP file.\n\n```php\n$newTargetUrl = 'http://example.com/consume2.php';\n$auth = new OneLogin_Saml2_Auth();\n$auth->login($newTargetUrl);\n```\n\nThe login method can receive other six optional parameters:\n\n* `$parameters` - An array of parameters that will be added to the `GET` in the HTTP-Redirect.\n* `$forceAuthn` - When true the `AuthNRequest` will set the `ForceAuthn='true'`\n* `$isPassive` - When true the `AuthNRequest` will set the `Ispassive='true'`\n* `$stay` - True if we want to stay (returns the url string) False to redirect\n* `$setNameIdPolicy` - When true the AuthNRequest will set a nameIdPolicy element.\n* `$nameIdValueReq` - Indicates to the IdP the subject that should be authenticated.\n\nIf a match on the future SAMLResponse ID and the AuthNRequest ID to be sent is required, that AuthNRequest ID must to be extracted and saved.\n\n```php\n$ssoBuiltUrl = $auth->login(null, array(), false, false, true);\n$_SESSION['AuthNRequestID'] = $auth->getLastRequestID();\nheader('Pragma: no-cache');\nheader('Cache-Control: no-cache, must-revalidate');\nheader('Location: ' . $ssoBuiltUrl);\nexit();\n```\n\n#### The SP Endpoints ####\n\nRelated to the SP there are three important views: The metadata view, the ACS view and the SLS view. The toolkit\nprovides examples of those views in the endpoints directory.\n\n##### SP Metadata `endpoints/metadata.php` #####\n\nThis code will provide the XML metadata file of our SP, based on the info that we provided in the settings files.\n\n```php\n<?php\n\ndefine(\"TOOLKIT_PATH\", '/var/www/php-saml/');\nrequire_once dirname(TOOLKIT_PATH.'/_toolkit_loader.php');\n\ntry {\n    $auth = new OneLogin_Saml2_Auth();\n    $settings = $auth->getSettings();\n    $metadata = $settings->getSPMetadata();\n    $errors = $settings->validateMetadata($metadata);\n    if (empty($errors)) {\n        header('Content-Type: text/xml');\n        echo $metadata;\n    } else {\n        throw new OneLogin_Saml2_Error(\n            'Invalid SP metadata: '.implode(', ', $errors),\n            OneLogin_Saml2_Error::METADATA_SP_INVALID\n        );\n    }\n} catch (Exception $e) {\n    echo $e->getMessage();\n}\n```\nThe `getSPMetadata` will return the metadata signed or not based\non the security info of the `advanced_settings.php` (`'signMetadata'`).\n\nBefore the XML metadata is exposed, a check takes place to ensure\nthat the info to be provided is valid.\n\nInstead of use the Auth object, you can directly use\n\n```php\n$settings = new OneLogin_Saml2_Settings($settingsInfo, true);\n```\nto get the settings object and with the true parameter we will avoid the IdP Settings validation.\n\n\n##### Attribute Consumer Service(ACS) `endpoints/acs.php` #####\n\nThis code handles the SAML response that the IdP forwards to the SP through the user's client.\n\n```php\n<?php\n\nsession_start();  // IMPORTANT: This is required in order to be able\n                  // to store the user data in the session.\n\ndefine(\"TOOLKIT_PATH\", '/var/www/php-saml/');\nrequire_once dirname(TOOLKIT_PATH.'/_toolkit_loader.php';\n\n$auth = new OneLogin_Saml2_Auth();\n\nif (isset($_SESSION) && isset($_SESSION['AuthNRequestID'])) {\n    $requestID = $_SESSION['AuthNRequestID'];\n} else {\n    $requestID = null;\n}\n\n$auth->processResponse($requestID);\nunset($_SESSION['AuthNRequestID']);\n\n$errors = $auth->getErrors();\n\nif (!empty($errors)) {\n    echo '<p>', implode(', ', $errors), '</p>';\n    exit();\n}\n\nif (!$auth->isAuthenticated()) {\n    echo \"<p>Not authenticated</p>\";\n    exit();\n}\n\n$_SESSION['samlUserdata'] = $auth->getAttributes();\n$_SESSION['samlNameId'] = $auth->getNameId();\n$_SESSION['samlNameIdFormat'] = $auth->getNameIdFormat();\n$_SESSION['samlNameidNameQualifier'] = $auth->getNameIdNameQualifier();\n$_SESSION['samlNameidSPNameQualifier'] = $auth->getNameIdSPNameQualifier();\n$_SESSION['samlSessionIndex'] = $auth->getSessionIndex();\n\nif (isset($_POST['RelayState']) && OneLogin_Saml2_Utils::getSelfURL() != $_POST['RelayState']) {\n    // To avoid 'Open Redirect' attacks, before execute the\n    // redirection confirm the value of $_POST['RelayState'] is a // trusted URL.\n    $auth->redirectTo($_POST['RelayState']);\n}\n\n$attributes = $_SESSION['samlUserdata'];\n$nameId = $_SESSION['samlNameId'];\n\necho '<h1>Identified user: '. htmlentities($nameId) .'</h1>';\n\nif (!empty($attributes)) {\n    echo '<h2>'._('User attributes:').'</h2>';\n    echo '<table><thead><th>'._('Name').'</th><th>'._('Values').'</th></thead><tbody>';\n    foreach ($attributes as $attributeName => $attributeValues) {\n        echo '<tr><td>' . htmlentities($attributeName) . '</td><td><ul>';\n        foreach ($attributeValues as $attributeValue) {\n            echo '<li>' . htmlentities($attributeValue) . '</li>';\n        }\n        echo '</ul></td></tr>';\n    }\n    echo '</tbody></table>';\n} else {\n    echo _('No attributes found.');\n}\n```\n\nThe SAML response is processed and then checked that there are no errors.\nIt also verifies that the user is authenticated and stored the userdata in session.\n\nAt that point there are two possible alternatives:\n\n 1. If no `RelayState` is provided, we could show the user data in this view\n or however we wanted.\n\n 2. If `RelayState` is provided, a redirection takes place.\n\nNotice that we saved the user data in the session before the redirection to\nhave the user data available at the `RelayState` view.\n\n\n###### The `getAttributes` method ######\n\nIn order to retrieve attributes we can use:\n\n```php\n$attributes = $auth->getAttributes();\n```\n\nWith this method we get all the user data provided by the IdP in the Assertion\nof the SAML Response.\n\nIf we execute ```print_r($attributes)``` we could get:\n\n```php\nArray\n(\n    [cn] => Array\n        (\n            [0] => John\n        )\n    [sn] => Array\n        (\n            [0] => Doe\n        )\n    [mail] => Array\n        (\n            [0] => john.doe@example.com\n        )\n    [groups] => Array\n        (\n            [0] => users\n            [1] => members\n        )\n)\n```\n\nEach attribute name can be used as an index into `$attributes` to obtain the value. Every attribute value\nis an array - a single-valued attribute is an array of a single element.\n\n\nThe following code is equivalent:\n\n```php\n$attributes = $auth->getAttributes();\nprint_r($attributes['cn']);\n```\n\n```php\nprint_r($auth->getAttribute('cn'));\n```\n\n\nBefore trying to get an attribute, check that the user is\nauthenticated. If the user isn't authenticated or if there were\nno attributes in the SAML assertion, an empty array will be\nreturned. For example, if we call to `getAttributes` before a\n`$auth->processResponse`, the `getAttributes()` will return an\nempty array.\n\n\n##### Single Logout Service (SLS) `endpoints/sls.php` #####\n\nThis code handles the Logout Request and the Logout Responses.\n\n```php\n<?php\n\nsession_start();  // IMPORTANT: This is required in order to be able\n                  // to close the user session.\n\ndefine(\"TOOLKIT_PATH\", '/var/www/php-saml/');\nrequire_once dirname(TOOLKIT_PATH.'/_toolkit_loader.php';\n\n$auth = new OneLogin_Saml2_Auth();\n\nif (isset($_SESSION) && isset($_SESSION['LogoutRequestID'])) {\n    $requestID = $_SESSION['LogoutRequestID'];\n} else {\n    $requestID = null;\n}\n\n$auth->processSLO(false, $requestID);\n\n$errors = $auth->getErrors();\n\nif (empty($errors)) {\n    echo 'Successfully logged out';\n} else {\n    echo implode(', ', $errors);\n}\n```\n\nIf the SLS endpoints receives a Logout Response, the response is\nvalidated and the session could be closed\n\n\n\n```php\n// part of the processSLO method\n\n$logoutResponse = new OneLogin_Saml2_LogoutResponse($this->_settings, $_GET['SAMLResponse']);\nif (!$logoutResponse->isValid($requestId)) {\n    $this->_errors[] = 'invalid_logout_response';\n} else if ($logoutResponse->getStatus() !== OneLogin_Saml2_Constants::STATUS_SUCCESS) {\n    $this->_errors[] = 'logout_not_success';\n} else {\n    if (!$keepLocalSession) {\n        OneLogin_Saml2_Utils::deleteLocalSession();\n    }\n}\n```\n\nIf the SLS endpoints receives an Logout Request, the request is validated,\nthe session is closed and a Logout Response is sent to the SLS endpoint of\nthe IdP.\n\n```php\n// part of the processSLO method\n\n$decoded = base64_decode($_GET['SAMLRequest']);\n$request = gzinflate($decoded);\nif (!OneLogin_Saml2_LogoutRequest::isValid($this->_settings, $request)) {\n    $this->_errors[] = 'invalid_logout_request';\n} else {\n    if (!$keepLocalSession) {\n        OneLogin_Saml2_Utils::deleteLocalSession();\n    }\n\n    $inResponseTo = $request->id;\n    $responseBuilder = new OneLogin_Saml2_LogoutResponse($this->_settings);\n    $responseBuilder->build($inResponseTo);\n    $logoutResponse = $responseBuilder->getResponse();\n\n    $parameters = array('SAMLResponse' => $logoutResponse);\n    if (isset($_GET['RelayState'])) {\n        $parameters['RelayState'] = $_GET['RelayState'];\n    }\n\n    $security = $this->_settings->getSecurityData();\n    if (isset($security['logoutResponseSigned']) && $security['logoutResponseSigned']) {\n        $signature = $this->buildResponseSignature($logoutResponse, $parameters['RelayState'], $security['signatureAlgorithm']);\n        $parameters['SigAlg'] = $security['signatureAlgorithm'];\n        $parameters['Signature'] = $signature;\n    }\n\n    $this->redirectTo($this->getSLOurl(), $parameters);\n}\n```\n\nIf you aren't using the default PHP session, or otherwise need a manual\nway to destroy the session, you can pass a callback method to the\n`processSLO` method as the fourth parameter\n\n```php\n$keepLocalSession = False;\n$callback = function () {\n    // Destroy user session\n};\n\n$auth->processSLO($keepLocalSession, null, false, $callback);\n```\n\n\nIf we don't want that `processSLO` to destroy the session, pass a true\nparameter to the `processSLO` method\n\n```php\n$keepLocalSession = True;\n$auth->processSLO($keepLocalSession);\n```\n\n#### Initiate SLO ####\n\nIn order to send a Logout Request to the IdP:\n\n```php\n<?php\n\ndefine(\"TOOLKIT_PATH\", '/var/www/php-saml/');\nrequire_once(TOOLKIT_PATH . '_toolkit_loader.php');\n\n$auth = new OneLogin_Saml2_Auth();\n\n$auth->logout();   // Method that sent the Logout Request.\n```\n\nAlso there are eight optional parameters that can be set:\n* `$returnTo` - The target URL the user should be returned to after logout.\n* `$parameters` - Extra parameters to be added to the GET.\n* `$name_id` - That will be used to build the LogoutRequest. If `name_id` parameter is not set and the auth object processed a\nSAML Response with a `NameId`, then this `NameId` will be used.\n* `$session_index` - SessionIndex that identifies the session of the user.\n* `$stay` - True if we want to stay (returns the url string) False to redirect.\n* `$nameIdFormat` - The NameID Format will be set in the LogoutRequest.\n* `$nameIdNameQualifier` - The NameID NameQualifier will be set in the LogoutRequest.\n* `$nameIdSPNameQualifier` - The NameID SP NameQualifier will be set in the LogoutRequest.\n\nThe Logout Request will be sent signed or unsigned based on the security\ninfo of the `advanced_settings.php` (`'logoutRequestSigned'`).\n\nThe IdP will return the Logout Response through the user's client to the\nSingle Logout Service of the SP.\nIf we do not set a `'url'` param in the logout method and are using the\ndefault SLS provided by the toolkit (`endpoints/sls.php`), then the SLS\nendpoint will redirect the user to the file that launched the SLO request.\n\nWe can set an `'returnTo'` url to change the workflow and redirect the user\nto other php file.\n\n```php\n$newTargetUrl = 'http://example.com/loggedOut.php';\n$auth = new OneLogin_Saml2_Auth();\n$auth->logout($newTargetUrl);\n```\nA more complex logout with all the parameters:\n```\n$auth = new OneLogin_Saml2_Auth();\n$returnTo = null;\n$paramters = array();\n$nameId = null;\n$sessionIndex = null;\n$nameIdFormat = null;\n$nameIdNameQualifier = null;\n$nameIdSPNameQualifier = null;\n\nif (isset($_SESSION['samlNameId'])) {\n    $nameId = $_SESSION['samlNameId'];\n}\nif (isset($_SESSION['samlSessionIndex'])) {\n    $sessionIndex = $_SESSION['samlSessionIndex'];\n}\nif (isset($_SESSION['samlNameIdFormat'])) {\n    $nameIdFormat = $_SESSION['samlNameIdFormat'];\n}\nif (isset($_SESSION['samlNameIdNameQualifier'])) {\n    $nameIdNameQualifier = $_SESSION['samlNameIdNameQualifier'];\n}\nif (isset($_SESSION['samlNameIdSPNameQualifier'])) {\n    $nameIdSPNameQualifier = $_SESSION['samlNameIdSPNameQualifier'];\n}\n$auth->logout($returnTo, $paramters, $nameId, $sessionIndex, false, $nameIdFormat, $nameIdNameQualifier, $nameIdSPNameQualifier);\n```\n\nIf a match on the future LogoutResponse ID and the LogoutRequest ID to be sent is required, that LogoutRequest ID must to be extracted and stored.\n\n```php\n$sloBuiltUrl = $auth->logout(null, $paramters, $nameId, $sessionIndex, true);\n$_SESSION['LogoutRequestID'] = $auth->getLastRequestID();\nheader('Pragma: no-cache');\nheader('Cache-Control: no-cache, must-revalidate');\nheader('Location: ' . $sloBuiltUrl);\nexit();\n```\n\n#### Example of a view that initiates the SSO request and handles the response (is the acs target) ####\n\nWe can code a unique file that initiates the SSO process, handle the response, get the attributes, initiate\nthe SLO and processes the logout response.\n\nNote: Review the `demo1` folder that contains that use case; in a later section we\nexplain the demo1 use case further in detail.\n\n```php\n<?php\n\nsession_start();    // Initialize the session, we do that because\n                    // Note that processResponse and processSLO\n                    // methods could manipulate/close that session\n\nrequire_once dirname(__DIR__).'/_toolkit_loader.php'; // Load Saml2 and external libs\nrequire_once 'settings.php';    // Load the setting info as an Array\n\n$auth = new OneLogin_Saml2_Auth($settingsInfo);  // Initialize the SP SAML instance\n\nif (isset($_GET['sso'])) {    // SSO action.  Will send an AuthNRequest to the IdP\n    $auth->login();\n} else if (isset($_GET['sso2'])) {              // Another SSO action\n    $returnTo = $spBaseUrl.'/demo1/attrs.php';  // but set a custom RelayState URL\n    $auth->login($returnTo);\n} else if (isset($_GET['slo'])) {  // SLO action. Will sent a Logout Request to IdP\n    $auth->logout();\n} else if (isset($_GET['acs'])) {  // Assertion Consumer Service\n    $auth->processResponse();      // Process the Response of the IdP, get the\n                                   // attributes and put then at\n                                   // $_SESSION['samlUserdata']\n\n    $errors = $auth->getErrors();  // This method receives an array with the errors\n                                   // that could took place during the process\n\n    if (!empty($errors)) {\n        echo '<p>', implode(', ', $errors), '</p>';\n    }\n                                          // This check if the response was\n    if (!$auth->isAuthenticated()) {      // successfully validated and the user\n        echo \"<p>Not authenticated</p>\";  // data retrieved or not\n        exit();\n    }\n\n    $_SESSION['samlUserdata'] = $auth->getAttributes(); // Retrieves user data\n    if (isset($_POST['RelayState']) && OneLogin_Saml2_Utils::getSelfURL() != $_POST['RelayState']) {\n        // To avoid 'Open Redirect' attacks, before execute the\n        // redirection confirm the value of $_POST['RelayState'] is a // trusted URL.\n        $auth->redirectTo($_POST['RelayState']);  // Redirect if there is a\n    }                                             // relayState set\n} else if (isset($_GET['sls'])) {   // Single Logout Service\n    $auth->processSLO();            // Process the Logout Request & Logout Response\n    $errors = $auth->getErrors(); // Retrieves possible validation errors\n    if (empty($errors)) {\n        echo '<p>Successfully logged out</p>';\n    } else {\n        echo '<p>', implode(', ', $errors), '</p>';\n    }\n}\n\nif (isset($_SESSION['samlUserdata'])) {   // If there is user data we print it.\n    if (!empty($_SESSION['samlUserdata'])) {\n        $attributes = $_SESSION['samlUserdata'];\n        echo 'You have the following attributes:<br>';\n        echo '<table><thead><th>Name</th><th>Values</th></thead><tbody>';\n        foreach ($attributes as $attributeName => $attributeValues) {\n            echo '<tr><td>' . htmlentities($attributeName) . '</td><td><ul>';\n            foreach ($attributeValues as $attributeValue) {\n                echo '<li>' . htmlentities($attributeValue) . '</li>';\n            }\n            echo '</ul></td></tr>';\n        }\n        echo '</tbody></table>';\n    } else {                             // If there is not user data, we notify\n        echo \"<p>You don't have any attribute</p>\";\n    }\n\n    echo '<p><a href=\"?slo\" >Logout</a></p>'; // Print some links with possible\n} else {                                      // actions\n    echo '<p><a href=\"?sso\" >Login</a></p>';\n    echo '<p><a href=\"?sso2\" >Login and access to attrs.php page</a></p>';\n}\n```\n\n#### Example (using Composer) that initiates the SSO request and handles the response (is the acs target) ####\n\nInstall package via composer:\n```\ncomposer require onelogin/php-saml\n```\n\nCreate an index.php:\n```php\n<?php\nrequire('vendor/autoload.php');\n\nsession_start();\n$needsAuth = empty($_SESSION['samlUserdata']);\n\nif ($needsAuth) {\n    // put SAML settings into an array to avoid placing files in the\n    // composer vendor/ directories\n    $samlsettings = array(/*...config goes here...*/);\n\n    $auth = new \\OneLogin\\Saml2\\Auth($samlsettings);\n\n    if (!empty($_REQUEST['SAMLResponse']) && !empty($_REQUEST['RelayState'])) {\n        $auth->processResponse(null);\n        $errors = $auth->getErrors();\n        if (empty($errors)) {\n            // user has authenticated successfully\n            $needsAuth = false;\n            $_SESSION['samlUserdata'] = $auth->getAttributes();\n        }\n    }\n\n    if ($needsAuth) {\n        $auth->login();\n    }\n}\n\n// rest of your app goes here\n```\n\n#### URL-guessing methods ####\n\nphp-saml toolkit uses a bunch of methods in OneLogin_Saml2_Utils that try to guess the URL where the SAML messages are processed.\n\n* `getSelfHost` Returns the current host.\n* `getSelfPort` Return the port number used for the request\n* `isHTTPS` Checks if the protocol is https or http.\n* `getSelfURLhost` Returns the protocol + the current host + the port (if different than common ports).\n* `getSelfURL` Returns the URL of the current host + current view + query.\n* `getSelfURLNoQuery` Returns the URL of the current host + current view.\n* `getSelfRoutedURLNoQuery` Returns the routed URL of the current host + current view.\n\ngetSelfURLNoQuery and getSelfRoutedURLNoQuery are used to calculate the currentURL in order to validate SAML elements like Destination or Recipient.\n\nWhen the PHP application is behind a proxy or a load balancer we can execute `setProxyVars(true)` and `setSelfPort` and `isHTTPS` will take care of the `$_SERVER[\"HTTP_X_FORWARDED_PORT\"]` and `$_SERVER['HTTP_X_FORWARDED_PROTO']` vars (otherwise they are ignored).\n\nAlso a developer can use `setSelfProtocol`, `setSelfHost`, `setSelfPort` and `getBaseURLPath` to define a specific value to be returned by `isHTTPS`, `getSelfHost`, `getSelfPort` and `getBaseURLPath`. And define a `setBasePath` to be used on the `getSelfURL` and `getSelfRoutedURLNoQuery` to replace the data extracted from `$_SERVER[\"REQUEST_URI\"]`.\n\nAt the settings the developer will be able to set a `'baseurl'` parameter that automatically will use `setBaseURL` to set values for `setSelfProtocol`, `setSelfHost`, `setSelfPort` and `setBaseURLPath`.\n\n\n### Working behind load balancer ###\n\nIs possible that asserting request URL and Destination attribute of SAML response fails when working behind load balancer with SSL offload.\n\nYou should be able to workaround this by configuring your server so that it is aware of the proxy and returns the original url when requested.\n\nOr by using the method described on the previous section.\n\n\n### SP Key rollover ###\n\nIf you plan to update the SP x509cert and privateKey you can define the new x509cert as `$settings['sp']['x509certNew']` and it will be\npublished on the SP metadata so Identity Providers can read them and get ready for rollover.\n\n\n### IdP with multiple certificates ###\n\nIn some scenarios the IdP uses different certificates for\nsigning/encryption, or is under key rollover phase and more than one certificate is published on IdP metadata.\n\nIn order to handle that the toolkit offers the `$settings['idp']['x509certMulti']` parameter.\n\nWhen that parameter is used, `'x509cert'` and `'certFingerprint'` values will be ignored by the toolkit.\n\nThe `'x509certMulti'` is an array with 2 keys:\n- `'signing'`. An array of certs that will be used to validate IdP signature\n- `'encryption'` An array with one unique cert that will be used to encrypt data to be sent to the IdP\n\n\n### Replay attacks ###\n\nIn order to avoid replay attacks, you can store the ID of the SAML messages already processed, to avoid processing them twice. Since the Messages expires and will be invalidated due that fact, you don't need to store those IDs longer than the time frame that you currently accepting.\n\nGet the ID of the last processed message/assertion with the `getLastMessageId/getLastAssertionId` methods of the Auth object.\n\n\n### Main classes and methods ###\n\nDescribed below are the main classes and methods that can be invoked.\n\n#### The Old Saml library ####\n\nLets start describing the classes and methods of the SAML library, an evolution\nof the old v.1 toolkit that is provided to keep the backward compability.\nMost of them use classes and methods of the new SAML2 library.\n\n##### OneLogin_Saml_AuthRequest - `AuthRequest.php` #####\n\nHas the protected attribute `$auth`, an `OneLogin_Saml2_Auth` object.\n\n* `OneLogin_Saml_AuthRequest` - Constructs `OneLogin_Saml2_Auth`,\n  initializing the SP SAML instance.\n* `getRedirectUrl($returnTo)` - Obtains the SSO URL containing the AuthRequest\n  message deflated.\n\n\n##### OneLogin_Saml_Response - `Response.php` #####\n\n* `OneLogin_Saml_Response` - Constructor that process the SAML Response,\n  Internally initializes an SP SAML instance and an `OneLogin_Saml2_Response`.\n* `get_saml_attributes` - Retrieves an Array with the logged user data.\n\n\n##### OneLogin_Saml_Settings - `Settings.php` #####\n\nA simple class used to build the Setting object used in the v1.0 of the toolkit.\n\n##### OneLogin_Saml_Metadata - `Metadata.php` #####\n\n* `OneLogin_Saml_Metadata` - Constructor that build the Metadata XML info based\n  on the settings of the SP\n* `getXml` - An XML with the metadata info of the SP\n\n\n##### OneLogin_Saml_XmlSec - `XmlSec.php` #####\n\nAuxiliary class that contains methods to validate the SAML Response:\n`validateNumAssertions`, `validateTimestamps`, `isValid` (which\nuses the other two previous methods and also validate the signature of\nSAML Response).\n\n\n#### Saml2 library ####\n\nLets describe now the classes and methods of the SAML2 library.\n\n##### OneLogin_Saml2_Auth - Auth.php #####\n\nMain class of PHP Toolkit\n\n * `OneLogin_Saml2_Auth` - Initializes the SP SAML instance\n * `login` - Initiates the SSO process.\n * `logout` - Initiates the SLO process.\n * `processResponse` - Process the SAML Response sent by the IdP.\n * `processSLO` - Process the SAML Logout Response / Logout Request sent by the\n   IdP.\n * `redirectTo` - Redirects the user to the url past by parameter or to the url\n   that we defined in our SSO Request.\n * `isAuthenticated` - Checks if the user is authenticated or not.\n * `getAttributes` - Returns the set of SAML attributes.\n * `getAttribute` - Returns the requested SAML attribute\n * `getNameId` - Returns the nameID\n * `getNameIdFormat` - Gets the NameID Format provided by the SAML response from the IdP.\n * `getNameIdNameQualifier` - Gets the NameID NameQualifier provided from the SAML Response String.\n * `getNameIdSPNameQualifier` - Gets the NameID SP NameQualifier provided from the SAML Response String.\n * `getSessionIndex` - Gets the SessionIndex from the AuthnStatement.\n * `getErrors` - Returns if there were any error\n * `getSSOurl` - Gets the SSO url.\n * `getSLOurl` - Gets the SLO url.\n * `getLastRequestID` - The ID of the last Request SAML message generated.\n * `buildRequestSignature` - Generates the Signature for a SAML Request\n * `buildResponseSignature` - Generates the Signature for a SAML Response\n * `getSettings` - Returns the settings info\n * `setStrict` - Set the strict mode active/disable\n * `getLastRequestID` - Gets the ID of the last AuthNRequest or LogoutRequest generated by the Service Provider.\n * `getLastRequestXML` - Returns the most recently-constructed/processed XML SAML request (AuthNRequest, LogoutRequest)\n * `getLastResponseXML` - Returns the most recently-constructed/processed XML SAML response (SAMLResponse, LogoutResponse). If the SAMLResponse had an encrypted assertion, decrypts it.\n\n\n##### OneLogin_Saml2_AuthnRequest - `AuthnRequest.php` #####\n\nSAML 2 Authentication Request class\n\n * `OneLogin_Saml2_AuthnRequest` - Constructs the `AuthnRequest` object.\n * `getRequest` - Returns deflated, base64 encoded, unsigned `AuthnRequest`.\n * `getId` - Returns the `AuthNRequest` ID.\n * `getXML` - Returns the XML that will be sent as part of the request.\n\n##### OneLogin_Saml2_Response - `Response.php` #####\n\nSAML 2 Authentication Response class\n\n * `OneLogin_Saml2_Response` - Constructs the SAML Response object.\n * `isValid` - Determines if the SAML Response is valid using the certificate.\n * `checkStatus` - Checks if the Status is success.\n * `getAudiences` - Gets the audiences.\n * `getIssuers` - Gets the Issuers (from Response and Assertion)\n * `getNameIdData` - Gets the NameID Data provided by the SAML response from the\n   IdP.\n * `getNameId` - Gets the NameID provided by the SAML response from the IdP.\n * `getNameIdFormat` - Gets the NameID Format provided by the SAML response from the IdP.\n * `getNameIdNameQualifier` - Gets the NameID NameQualifier provided from the SAML Response String.\n * `getNameIdSPNameQualifier` - Gets the NameID SP NameQualifier provided from the SAML Response String.\n * `getSessionNotOnOrAfter` - Gets the SessionNotOnOrAfter from the\n   AuthnStatement\n * `getSessionIndex` - Gets the SessionIndex from the AuthnStatement.\n * `getAttributes` - Gets the Attributes from the AttributeStatement element.\n * `validateNumAssertions` - Verifies that the document only contains a single\n   Assertion (encrypted or not).\n * `validateTimestamps` - Verifies that the document is still valid according\n   Conditions Element.\n * `getError` - After executing a validation process, if it fails, this method returns the cause\n * `getXMLDocument` - Returns the SAML Response document (If contains an encrypted assertion, decrypts it)\n\n##### OneLogin_Saml2_LogoutRequest - `LogoutRequest.php` #####\n\nSAML 2 Logout Request class\n\n * `OneLogin_Saml2_LogoutRequest` - Constructs the Logout Request object.\n * `getRequest` - Returns the Logout Request deflated, base64encoded, unsigned\n * `getID` - Returns the ID of the Logout Request. (If you have the object you can access to the id attribute)\n * `getNameIdData` - Gets the NameID Data of the the Logout Request.\n * `getNameId` - Gets the NameID of the Logout Request.\n * `getIssuer` - Gets the Issuer of the Logout Request.\n * `getSessionIndexes` - Gets the SessionIndexes from the Logout Request.\n * `isValid` - Checks if the Logout Request received is valid.\n * `getError` - After executing a validation process, if it fails, this method returns the cause\n * `getXML` - Returns the XML that will be sent as part of the request or that was received at the SP.\n\n##### OneLogin_Saml2_LogoutResponse - `LogoutResponse.php` #####\n\nSAML 2 Logout Response class\n\n * `OneLogin_Saml2_LogoutResponse` - Constructs a Logout Response object\n   (Initialize params from settings and if provided load the Logout Response)\n * `getIssuer` - Gets the Issuer of the Logout Response.\n * `getStatus` - Gets the Status of the Logout Response.\n * `isValid` - Determines if the SAML LogoutResponse is valid\n * `build` - Generates a Logout Response object.\n * `getResponse` - Returns a Logout Response object.\n * `getError` - After executing a validation process, if it fails, this method returns the cause.\n * `getXML` - Returns the XML that will be sent as part of the response or that was received at the SP.\n\n##### OneLogin_Saml2_Settings - `Settings.php` #####\n\nConfiguration of the PHP Toolkit\n\n * `OneLogin_Saml2_Settings` -  Initializes the settings: Sets the paths of\n   the different folders and Loads settings info from settings file or\n   array/object provided\n * `checkSettings` - Checks the settings info.\n * `getBasePath` - Returns base path.\n * `getCertPath` - Returns cert path.\n * `getLibPath` - Returns lib path.\n * `getExtLibPath` - Returns external lib path.\n * `getSchemasPath` - Returns schema path.\n * `checkSPCerts` - Checks if the x509 certs of the SP exists and are valid.\n * `getSPkey` - Returns the x509 private key of the SP.\n * `getSPcert` - Returns the x509 public cert of the SP.\n * `getSPcertNew` - Returns the future x509 public cert of the SP.\n * `getIdPData` - Gets the IdP data.\n * `getSPData`Gets the SP data.\n * `getSecurityData` - Gets security data.\n * `getContacts` - Gets contact data.\n * `getOrganization` - Gets organization data.\n * `getSPMetadata` - Gets the SP metadata. The XML representation.\n * `validateMetadata` - Validates an XML SP Metadata.\n * `formatIdPCert` - Formats the IdP cert.\n * `formatSPCert` - Formats the SP cert.\n * `formatSPCertNew` - Formats the SP cert new.\n * `formatSPKey` - Formats the SP private key.\n * `getErrors` - Returns an array with the errors, the array is empty when\n   the settings is ok.\n * `getLastErrorReason` - Returns the reason of the last error\n * `getBaseURL` -  Returns the baseurl set on the settings if any.\n * `setBaseURL` - Set a baseurl value\n * `setStrict` - Activates or deactivates the strict mode.\n * `isStrict` - Returns if the 'strict' mode is active.\n * `isDebugActive` - Returns if the debug is active.\n\n##### OneLogin_Saml2_Metadata - `Metadata.php` #####\n\nA class that contains functionality related to the metadata of the SP\n\n* `builder` - Generates the metadata of the SP based on the settings.\n* `signmetadata` - Signs the metadata with the key/cert provided\n* `addX509KeyDescriptors` - Adds the x509 descriptors (sign/encryption) to\n  the metadata\n\n##### OneLogin_Saml2_Utils - `Utils.php` #####\n\nAuxiliary class that contains several methods\n\n * `validateXML` - This function attempts to validate an XML string against\n   the specified schema.\n * `formatCert` - Returns a x509 cert (adding header & footer if required).\n * `formatPrivateKey` - returns a RSA private key (adding header & footer if required).\n * `redirect` - Executes a redirection to the provided url (or return the\n   target url).\n * `isHTTPS` - Checks if https or http.\n * `getSelfHost` - Returns the current host.\n * `getSelfURLhost` - Returns the protocol + the current host + the port\n   (if different than common ports).\n * `getSelfURLNoQuery` - Returns the URL of the current host + current view.\n * `getSelfURL` - Returns the URL of the current host + current view + query.\n * `generateUniqueID` - Generates a unique string (used for example as ID\n   for assertions).\n * `parseTime2SAML` - Converts a UNIX timestamp to SAML2 timestamp on the\n   form `yyyy-mm-ddThh:mm:ss(\\.s+)?Z`.\n * `parseSAML2Time` - Converts a SAML2 timestamp on the form\n   `yyyy-mm-ddThh:mm:ss(\\.s+)?Z` to a UNIX timestamp. The sub-second part is\n   ignored.\n * `parseDuration` - Interprets a ISO8601 duration value relative to a given\n   timestamp.\n * `getExpireTime` - Compares two dates and returns the earliest.\n * `query` - Extracts nodes from the DOMDocument.\n * `isSessionStarted` - Checks if the session is started or not.\n * `deleteLocalSession` - Deletes the local session.\n * `calculateX509Fingerprint` - Calculates the fingerprint of a x509cert.\n * `formatFingerPrint` - Formats a fingerprint.\n * `generateNameId` - Generates a `nameID`.\n * `getStatus` - Gets Status from a Response.\n * `decryptElement` - Decrypts an encrypted element.\n * `castKey` - Converts a `XMLSecurityKey` to the correct algorithm.\n * `addSign` - Adds signature key and senders certificate to an element\n   (Message or Assertion).\n * `validateSign` - Validates a signature (Message or Assertion).\n\n##### OneLogin_Saml2_IdPMetadataParser - `IdPMetadataParser.php` #####\n\nAuxiliary class that contains several methods to retrieve and process IdP metadata\n\n * `parseRemoteXML` - Get IdP Metadata Info from URL.\n * `parseFileXML` - Get IdP Metadata Info from File.\n * `parseXML` - Get IdP Metadata Info from XML.\n * `injectIntoSettings` - Inject metadata info into php-saml settings array.\n\nThe class does not validate in any way the URL that is introduced on methods like parseRemoteXML in order to retrieve the remove XML. Usually is the same administrator that handles the Service Provider the ones that set the URL that should belong to a trusted third-party IdP.\nBut there are other scenarios, like a SAAS app where the administrator of the app delegates on other administrators. In such case, extra protection should be taken in order to validate such URL inputs and avoid attacks like SSRF.\n\nFor more info, look at the source code; each method is documented and details\nabout what it does and how to use it are provided. Make sure to also check the doc folder where\nHTML documentation about the classes and methods is provided for SAML and\nSAML2.\n\n\n\n\nDemos included in the toolkit\n-----------------------------\n\nThe toolkit includes three demo apps to teach how use the toolkit, take a look on it.\n\nDemos require that SP and IdP are well configured before test it.\n\n## Demo1 ##\n\n### SP setup ###\n\nThe PHP Toolkit allows you to provide the settings info in two ways:\n\n * Use a `settings.php` file that we should locate at the base folder of the\n   toolkit.\n * Use an array with the setting data.\n\nIn this demo we provide the data in the second way, using a setting array named\n`$settingsInfo`. This array users the `settings_example.php` included as a template\nto create the `settings.php` settings and store it in the `demo1/` folder.\nConfigure the SP part and later review the metadata of the IdP and complete the IdP info.\n\nIf you check the code of the index.php file you will see that the `settings.php`\nfile is loaded in order to get the `$settingsInfo` var to be used in order to initialize\nthe `Setting` class.\n\nNotice that in this demo, the `setting.php` file that could be defined at the base\nfolder of the toolkit is ignored and the libs are loaded using the\n`_toolkit_loader.php` located at the base folder of the toolkit.\n\n\n### IdP setup ###\n\nOnce the SP is configured, the metadata of the SP is published at the\n`metadata.php` file. Configure the IdP based on that information.\n\n\n### How it works ###\n\n 1. First time you access to `index.php` view, you can select to login and return\n    to the same view or login and be redirected to the `attrs.php` view.\n\n 2. When you click:\n\n    2.1 in the first link, we access to (`index.php?sso`) an `AuthNRequest`\n    is sent to the IdP, we authenticate at the IdP and then a Response is sent\n    through the user's client to the SP, specifically the Assertion Consumer Service view: `index.php?acs`.\n    Notice that a `RelayState` parameter is set to the url that initiated the\n    process, the `index.php` view.\n\n    2.2 in the second link we access to (`attrs.php`) have the same process\n    described at 2.1 with the difference that as `RelayState` is set the `attrs.php`.\n\n 3. The SAML Response is processed in the ACS (`index.php?acs`), if the Response\n    is not valid, the process stops here and a message is shown. Otherwise we\n    are redirected to the RelayState view. a) `index.php` or b) `attrs.php`.\n\n 4. We are logged in the app and the user attributes are showed.\n    At this point, we can test the single log out functionality.\n\n 5. The single log out functionality could be tested by two ways.\n\n    5.1 SLO Initiated by SP. Click on the \"logout\" link at the SP, after that a\n    Logout Request is sent to the IdP, the session at the IdP is closed and\n    replies through the client to the SP with a Logout Response (sent to the\n    Single Logout Service endpoint). The SLS endpoint (`index.php?sls`) of the SP\n    process the Logout Response and if is valid, close the user session of the\n    local app. Notice that the SLO Workflow starts and ends at the SP.\n\n    5.2 SLO Initiated by IdP. In this case, the action takes place on the IdP\n    side, the logout process is initiated at the idP, sends a Logout\n    Request to the SP (SLS endpoint, `index.php?sls`). The SLS endpoint of the SP\n    process the Logout Request and if is valid, close the session of the user\n    at the local app and send a Logout Response to the IdP (to the SLS endpoint\n    of the IdP). The IdP receives the Logout Response, process it and close the\n    session at of the IdP. Notice that the SLO Workflow starts and ends at the IdP.\n\nNotice that all the SAML Requests and Responses are handled by a unique file,\nthe `index.php` file and how `GET` parameters are used to know the action that\nmust be done.\n\n\n## Demo2 ##\n\n### SP setup ###\n\nThe PHP Toolkit allows you to provide the settings info in two ways:\n\n * Use a `settings.php` file that we should locate at the base folder of the\n   toolkit.\n * Use an array with the setting data.\n\nThe first is the case of the demo2 app. The `setting.php` file and the\n`setting_extended.php` file should be defined at the base folder of the toolkit.\nReview the `setting_example.php` and the `advanced_settings_example.php` to\nlearn how to build them.\n\nIn this case as Attribute Consume Service and Single Logout Service we are going to\nuse the files located in the endpoint folder (`acs.php` and `sls.php`).\n\n\n### IdP setup ###\n\nOnce the SP is configured, the metadata of the SP is published at the\n`metadata.php` file. Based on that info, configure the IdP.\n\n\n### How it works ###\n\nIn demo1, we saw how all the SAML Request and Responses were handler at an\nunique file, the `index.php` file. This demo1 uses high-level programming.\n\nIn demo2, we have several views: `index.php`, `sso.php`, `slo.php`, `consume.php`\nand `metadata.php`. As we said, we will use the endpoints that are defined\nin the toolkit (`acs.php`, `sls.php` of the endpoints folder). This demo2 uses\nlow-level programming.\n\nNotice that the SSO action can be initiated at `index.php` or `sso.php`.\n\nThe SAML workflow that take place is similar that the workflow defined in the\ndemo1, only changes the targets.\n\n 1. When you access `index.php` or `sso.php` for the first time, an `AuthNRequest` is\n    sent to the IdP automatically, (as `RelayState` is sent the origin url).\n    We authenticate at the IdP and then a `Response` is sent to the SP, to the\n    ACS endpoint, in this case `acs.php` of the endpoints folder.\n\n 2. The SAML Response is processed in the ACS, if the `Response` is not valid,\n    the process stops here and a message is shown. Otherwise we are redirected\n    to the `RelayState` view (`sso.php` or `index.php`). The `sso.php` detects if the\n    user is logged and redirects to `index.php`, so we will be in the\n    `index.php` at the end.\n\n 3. We are logged into the app and the user attributes (if any) are shown.\n    At this point, we can test the single log out functionality.\n\n 4. The single log out functionality could be tested by two ways.\n\n    4.1 SLO Initiated by SP. Click on the \"logout\" link at the SP, after that\n    we are redirected to the `slo.php` view and there a Logout Request is sent\n    to the IdP, the session at the IdP is closed and replies to the SP a\n    Logout Response (sent to the Single Logout Service endpoint). In this case\n    The SLS endpoint of the SP process the Logout Response and if is\n    valid, close the user session of the local app. Notice that the SLO\n    Workflow starts and ends at the SP.\n\n    4.2 SLO Initiated by IdP. In this case, the action takes place on the IdP\n    side, the logout process is initiated at the idP, sends a Logout\n    Request to the SP (SLS endpoint `sls.php` of the endpoint folder).\n    The SLS endpoint of the SP process the Logout Request and if is valid,\n    close the session of the user at the local app and sends a Logout Response\n    to the IdP (to the SLS endpoint of the IdP).The IdP receives the Logout\n    Response, process it and close the session at of the IdP. Notice that the\n    SLO Workflow starts and ends at the IdP.\n\n\n## Demo Old ##\n\n### SP setup ###\n\nThis demo uses the old style of the version 1 of the toolkit.\nAn object of the class `OneLogin_Saml_Settings` must be provided to the\nconstructor of the `AuthRequest`.\n\nYou will find an `example_settings.php` file at the demo-old's folder that\ncould be used as a template for your `settings.php` file.\n\nIn that template, SAML settings are divided into two parts, the application\nspecific (`const_assertion_consumer_service_url`, `const_issuer`,\n`const_name_identifier_format`) and the user/account specific\n`idp_sso_target_url`, `x509certificate`). You'll need to add your own code here\nto identify the user or user origin (e.g. by `subdomain`, `ip_address` etc.).\n\n\n### IdP setup ###\n\nOnce the SP is configured, the metadata of the SP is published at the\n`metadata.php` file. After that, configure the IdP based on that information.\n\n\n### How it works ###\n\nAt the `metadata.php` view is published the metadata of the SP.\n\nThe `index.php` file acts as an initiater for the SAML conversation if it should\nshould be initiated by the application. This is called Service Provider\nInitiated SAML. The service provider creates a SAML Authentication Request and\nsends it to the identity provider (IdP).\n\nThe `consume.php` is the ACS endpoint. Receives the SAML assertion. After Response\nvalidation, the userdata and the nameID will be available, using `getNameId()` or\n`getAttributes()` we obtain them.\n\nSince the version 1 of the php toolkit does not support SLO we don't show how\nhandle SLO in this demo-old.\n"
        },
        {
          "name": "_toolkit_loader.php",
          "type": "blob",
          "size": 0.5966796875,
          "content": "<?php\n\n// Create an __autoload function\n// (can conflicts other autoloaders)\n// http://php.net/manual/en/language.oop5.autoload.php\n\n$libDir = __DIR__ . '/lib/Saml2/';\n$extlibDir = __DIR__ . '/extlib/';\n\n// Load composer\nif (file_exists(__DIR__ .'/vendor/autoload.php')) {\n    require __DIR__ . '/vendor/autoload.php';\n}\n\n// Load now external libs\nrequire_once $extlibDir . 'xmlseclibs/xmlseclibs.php';\n\n$folderInfo = scandir($libDir);\n\nforeach ($folderInfo as $element) {\n    if (is_file($libDir.$element) && (substr($element, -4) === '.php')) {\n        include_once $libDir.$element;\n        //break;\n    }\n}\n"
        },
        {
          "name": "advanced_settings_example.php",
          "type": "blob",
          "size": 6.482421875,
          "content": "<?php\n\n$advancedSettings = array (\n\n    // Compression settings\n    // Handle if the getRequest/getResponse methods will return the Request/Response deflated.\n    // But if we provide a $deflate boolean parameter to the getRequest or getResponse\n    // method it will have priority over the compression settings.\n    'compress' => array (\n        'requests' => true,\n        'responses' => true\n    ),\n\n    // Security settings\n    'security' => array (\n\n        /** signatures and encryptions offered */\n\n        // Indicates that the nameID of the <samlp:logoutRequest> sent by this SP\n        // will be encrypted.\n        'nameIdEncrypted' => false,\n\n        // Indicates whether the <samlp:AuthnRequest> messages sent by this SP\n        // will be signed.              [The Metadata of the SP will offer this info]\n        'authnRequestsSigned' => false,\n\n        // Indicates whether the <samlp:logoutRequest> messages sent by this SP\n        // will be signed.\n        'logoutRequestSigned' => false,\n\n        // Indicates whether the <samlp:logoutResponse> messages sent by this SP\n        // will be signed.\n        'logoutResponseSigned' => false,\n\n        /* Sign the Metadata\n         False || True (use sp certs) || array (\n                                                    keyFileName => 'metadata.key',\n                                                    certFileName => 'metadata.crt'\n                                               )\n                                      || array (\n                                                    'x509cert' => '',\n                                                    'privateKey' => ''\n                                               )\n        */\n        'signMetadata' => false,\n\n\n        /** signatures and encryptions required **/\n\n        // Indicates a requirement for the <samlp:Response>, <samlp:LogoutRequest> and\n        // <samlp:LogoutResponse> elements received by this SP to be signed.\n        'wantMessagesSigned' => false,\n\n        // Indicates a requirement for the <saml:Assertion> elements received by\n        // this SP to be encrypted.\n        'wantAssertionsEncrypted' => false,\n\n        // Indicates a requirement for the <saml:Assertion> elements received by\n        // this SP to be signed.        [The Metadata of the SP will offer this info]\n        'wantAssertionsSigned' => false,\n\n        // Indicates a requirement for the NameID element on the SAMLResponse received\n        // by this SP to be present.\n        'wantNameId' => true,\n\n        // Indicates a requirement for the NameID received by\n        // this SP to be encrypted.\n        'wantNameIdEncrypted' => false,\n\n        // Authentication context.\n        // Set to false and no AuthContext will be sent in the AuthNRequest,\n        // Set true or don't present this parameter and you will get an AuthContext 'exact' 'urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport'\n        // Set an array with the possible auth context values: array ('urn:oasis:names:tc:SAML:2.0:ac:classes:Password', 'urn:oasis:names:tc:SAML:2.0:ac:classes:X509'),\n        'requestedAuthnContext' => false,\n\n        // Allows the authn comparison parameter to be set, defaults to 'exact' if\n        // the setting is not present.\n        'requestedAuthnContextComparison' => 'exact',\n\n        // Indicates if the SP will validate all received xmls.\n        // (In order to validate the xml, 'strict' and 'wantXMLValidation' must be true).\n        'wantXMLValidation' => true,\n\n        // If true, SAMLResponses with an empty value at its Destination\n        // attribute will not be rejected for this fact.\n        'relaxDestinationValidation' => false,\n\n        // If true, the toolkit will not raised an error when the Statement Element\n        // contain atribute elements with name duplicated\n        'allowRepeatAttributeName' => false,\n\n        // If true, Destination URL should strictly match to the address to\n        // which the response has been sent.\n        // Notice that if 'relaxDestinationValidation' is true an empty Destination\n        // will be accepted.\n        'destinationStrictlyMatches' => false,\n\n        // If true, SAMLResponses with an InResponseTo value will be rejected if not\n        // AuthNRequest ID provided to the validation method.\n        'rejectUnsolicitedResponsesWithInResponseTo' => false,\n\n        // Algorithm that the toolkit will use on signing process. Options:\n        //    'http://www.w3.org/2000/09/xmldsig#rsa-sha1'\n        //    'http://www.w3.org/2000/09/xmldsig#dsa-sha1'\n        //    'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256'\n        //    'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384'\n        //    'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512'\n        // Notice that sha1 is a deprecated algorithm and should not be used\n        'signatureAlgorithm' => 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256',\n\n        // Algorithm that the toolkit will use on digest process. Options:\n        //    'http://www.w3.org/2000/09/xmldsig#sha1'\n        //    'http://www.w3.org/2001/04/xmlenc#sha256'\n        //    'http://www.w3.org/2001/04/xmldsig-more#sha384'\n        //    'http://www.w3.org/2001/04/xmlenc#sha512'\n        // Notice that sha1 is a deprecated algorithm and should not be used\n        'digestAlgorithm' => 'http://www.w3.org/2001/04/xmlenc#sha256',\n\n        // ADFS URL-Encodes SAML data as lowercase, and the toolkit by default uses\n        // uppercase. Turn it True for ADFS compatibility on signature verification\n        'lowercaseUrlencoding' => false,\n    ),\n\n    // Contact information template, it is recommended to supply a technical and support contacts\n    'contactPerson' => array (\n        'technical' => array (\n            'givenName' => '',\n            'emailAddress' => ''\n        ),\n        'support' => array (\n            'givenName' => '',\n            'emailAddress' => ''\n        ),\n    ),\n\n    // Organization information template, the info in en_US lang is recommended, add more if required\n    'organization' => array (\n        'en-US' => array(\n            'name' => '',\n            'displayname' => '',\n            'url' => ''\n        ),\n    ),\n);\n\n\n/* Interoperable SAML 2.0 Web Browser SSO Profile [saml2int]   http://saml2int.org/profile/current\n\n   'authnRequestsSigned' => false,    // SP SHOULD NOT sign the <samlp:AuthnRequest>,\n                                      // MUST NOT assume that the IdP validates the sign\n   'wantAssertionsSigned' => true,\n   'wantAssertionsEncrypted' => true, // MUST be enabled if SSL/HTTPs is disabled\n   'wantNameIdEncrypted' => false,\n*/\n"
        },
        {
          "name": "certs",
          "type": "tree",
          "content": null
        },
        {
          "name": "compatibility.php",
          "type": "blob",
          "size": 0.337890625,
          "content": "<?php\n \n/**\n *  Compability with the old PHP Toolkit\n */\n\ndefine('ONELOGIN_SAML_DIR', 'lib/Saml/');\nrequire_once ONELOGIN_SAML_DIR . 'AuthRequest.php';\nrequire_once ONELOGIN_SAML_DIR . 'Response.php';\nrequire_once ONELOGIN_SAML_DIR . 'Settings.php';\nrequire_once ONELOGIN_SAML_DIR . 'XmlSec.php';\nrequire_once ONELOGIN_SAML_DIR . 'Metadata.php';\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.9462890625,
          "content": "{\n    \"name\": \"onelogin/php-saml\",\n    \"description\": \"PHP SAML Toolkit\",\n    \"license\": \"MIT\",\n    \"homepage\": \"https://developers.onelogin.com/saml/php\",\n    \"keywords\": [\"saml\", \"saml2\", \"onelogin\"],\n    \"autoload\": {\n        \"classmap\": [\n            \"extlib/xmlseclibs\",\n            \"lib/Saml\",\n            \"lib/Saml2\"\n        ]\n    },\n    \"support\": {\n        \"email\": \"sixto.garcia@onelogin.com\",\n        \"issues\": \"https://github.com/onelogin/php-saml/issues\",\n        \"source\": \"https://github.com/onelogin/php-saml/\"\n    },\n    \"require\": {\n        \"php\": \">=5.3.2 <7.2\",\n        \"ext-curl\": \"*\",\n        \"ext-openssl\": \"*\",\n        \"ext-dom\": \"*\",\n        \"ext-mcrypt\": \"*\",\n        \"ext-zlib\": \"*\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^4.8\",\n        \"satooshi/php-coveralls\": \"1.0.1\",\n        \"sebastian/phpcpd\": \"*\",\n        \"phploc/phploc\": \"*\",\n        \"pdepend/pdepend\" : \"1.1.0\",\n        \"squizlabs/php_codesniffer\": \"2.9.0\"\n    }\n}\n"
        },
        {
          "name": "demo-old",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo1",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo2",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "endpoints",
          "type": "tree",
          "content": null
        },
        {
          "name": "extlib",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "locale",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpdoc.xml",
          "type": "blob",
          "size": 1.1357421875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<phpdoc>\n    <title>SAML PHP Toolkit</title>\n    <parser>\n      <default-package-name>OneLogin_SAML_Toolkit</default-package-name>\n      <target>docs/Saml3</target>\n    </parser>\n    <extensions>\n      <extension>php</extension>\n   </extensions>\n    <transformer>\n      <target>docs/Saml3</target>\n    </transformer>\n    <transformations>\n    <template name=\"onelogin\" />\n<!--    <template name=\"clean\" /> -->\n    </transformations>\n    <files>\n        <directory>lib/Saml2/*</directory>\n        <ignore>lib/Saml/*</ignore>\n        <ignore>tests/*</ignore>\n        <ignore>demo1/*</ignore>\n        <ignore>demo2/*</ignore>\n        <ignore>demo-old/*</ignore>\n        <ignore>endpoints/*</ignore>\n        <ignore>extlib/*</ignore>\n        <ignore>locale/*</ignore>\n        <ignore>docs/*</ignore>\n        <ignore>vendor/*</ignore>\n        <ignore>compatibility.php</ignore>\n        <ignore>_toolkit_loader.php</ignore>\n        <ignore>settings.php</ignore>\n        <ignore>settings_example.php</ignore>\n        <ignore>advanced_settings.php</ignore>\n        <ignore>advanced_settings_example</ignore>\n    </files>\n</phpdoc>\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.779296875,
          "content": "<phpunit bootstrap=\"./tests/bootstrap.php\" colors=\"true\">\n    <testsuites>\n        <testsuite name=\"PHP-SAML Test Suite\">\n            <directory>./tests/src</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist processUncoveredFilesFromWhitelist=\"true\">\n            <directory>./lib</directory>\n        </whitelist>\n    </filter>\n   <logging>\n        <log type=\"coverage-html\" target=\"./tests/build/coverage\" charset=\"UTF-8\" yui=\"true\" highlight=\"false\" lowUpperBound=\"35\" highLowerBound=\"70\"/>\n        <log type=\"test-xml\" target=\"./tests/build/logfile.xml\" logIncompleteSkipped=\"false\"/>\n        <log type=\"coverage-clover\" target=\"./tests/build/logs/clover.xml\"/>\n        <log type=\"coverage-php\" target=\"./tests/build/logs/coverage.cov\"/>\n    </logging>\n</phpunit>\n"
        },
        {
          "name": "settings_example.php",
          "type": "blob",
          "size": 6.087890625,
          "content": "<?php\n\n$settings = array (\n    // If 'strict' is True, then the PHP Toolkit will reject unsigned\n    // or unencrypted messages if it expects them signed or encrypted\n    // Also will reject the messages if not strictly follow the SAML\n    // standard: Destination, NameId, Conditions ... are validated too.\n    'strict' => true,\n\n    // Enable debug mode (to print errors)\n    'debug' => false,\n\n    // Set a BaseURL to be used instead of try to guess\n    // the BaseURL of the view that process the SAML Message.\n    // Ex. http://sp.example.com/\n    //     http://example.com/sp/\n    'baseurl' => null,\n\n    // Service Provider Data that we are deploying\n    'sp' => array (\n        // Identifier of the SP entity  (must be a URI)\n        'entityId' => '',\n        // Specifies info about where and how the <AuthnResponse> message MUST be\n        // returned to the requester, in this case our SP.\n        'assertionConsumerService' => array (\n            // URL Location where the <Response> from the IdP will be returned\n            'url' => '',\n            // SAML protocol binding to be used when returning the <Response>\n            // message.  SAML Toolkit supports for this endpoint the\n            // HTTP-POST binding only\n            'binding' => 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',\n        ),\n        // If you need to specify requested attributes, set a\n        // attributeConsumingService. nameFormat, attributeValue and\n        // friendlyName can be omitted. Otherwise remove this section.\n        \"attributeConsumingService\"=> array(\n                \"serviceName\" => \"SP test\",\n                \"serviceDescription\" => \"Test Service\",\n                \"requestedAttributes\" => array(\n                    array(\n                        \"name\" => \"\",\n                        \"isRequired\" => false,\n                        \"nameFormat\" => \"\",\n                        \"friendlyName\" => \"\",\n                        \"attributeValue\" => \"\"\n                    )\n                )\n        ),\n        // Specifies info about where and how the <Logout Response> message MUST be\n        // returned to the requester, in this case our SP.\n        'singleLogoutService' => array (\n            // URL Location where the <Response> from the IdP will be returned\n            'url' => '',\n            // SAML protocol binding to be used when returning the <Response>\n            // message.  SAML Toolkit supports for this endpoint the\n            // HTTP-Redirect binding only\n            'binding' => 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',\n        ),\n        // Specifies constraints on the name identifier to be used to\n        // represent the requested subject.\n        // Take a look on lib/Saml2/Constants.php to see the NameIdFormat supported\n        'NameIDFormat' => 'urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified',\n\n        // Usually x509cert and privateKey of the SP are provided by files placed at\n        // the certs folder. But we can also provide them with the following parameters\n        'x509cert' => '',\n        'privateKey' => '',\n\n        /*\n         * Key rollover\n         * If you plan to update the SP x509cert and privateKey\n         * you can define here the new x509cert and it will be\n         * published on the SP metadata so Identity Providers can\n         * read them and get ready for rollover.\n         */\n        // 'x509certNew' => '',\n    ),\n\n    // Identity Provider Data that we want connect with our SP\n    'idp' => array (\n        // Identifier of the IdP entity  (must be a URI)\n        'entityId' => '',\n        // SSO endpoint info of the IdP. (Authentication Request protocol)\n        'singleSignOnService' => array (\n            // URL Target of the IdP where the SP will send the Authentication Request Message\n            'url' => '',\n            // SAML protocol binding to be used when returning the <Response>\n            // message.  SAML Toolkit supports for this endpoint the\n            // HTTP-Redirect binding only\n            'binding' => 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',\n        ),\n        // SLO endpoint info of the IdP.\n        'singleLogoutService' => array (\n            // URL Location of the IdP where the SP will send the SLO Request\n            'url' => '',\n            // URL location of the IdP where the SP will send the SLO Response (ResponseLocation)\n            // if not set, url for the SLO Request will be used\n            'responseUrl' => '',\n            // SAML protocol binding to be used when returning the <Response>\n            // message.  SAML Toolkit supports for this endpoint the\n            // HTTP-Redirect binding only\n            'binding' => 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',\n        ),\n        // Public x509 certificate of the IdP\n        'x509cert' => '',\n        /*\n         *  Instead of use the whole x509cert you can use a fingerprint in\n         *  order to validate the SAMLResponse, but we don't recommend to use\n         *  that method on production since is exploitable by a collision\n         *  attack.\n         *  (openssl x509 -noout -fingerprint -in \"idp.crt\" to generate it,\n         *   or add for example the -sha256 , -sha384 or -sha512 parameter)\n         *\n         *  If a fingerprint is provided, then the certFingerprintAlgorithm is required in order to\n         *  let the toolkit know which Algorithm was used. Possible values: sha1, sha256, sha384 or sha512\n         *  'sha1' is the default value.\n         */\n        // 'certFingerprint' => '',\n        // 'certFingerprintAlgorithm' => 'sha1',\n\n        /* In some scenarios the IdP uses different certificates for\n         * signing/encryption, or is under key rollover phase and more\n         * than one certificate is published on IdP metadata.\n         * In order to handle that the toolkit offers that parameter.\n         * (when used, 'x509cert' and 'certFingerprint' values are\n         * ignored).\n         */\n        // 'x509certMulti' => array(\n        //      'signing' => array(\n        //          0 => '<cert1-string>',\n        //      ),\n        //      'encryption' => array(\n        //          0 => '<cert2-string>',\n        //      )\n        // ),\n    ),\n);\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}