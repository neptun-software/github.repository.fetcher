{
  "metadata": {
    "timestamp": 1736712170074,
    "page": 828,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "elasticquent/Elasticquent",
      "stars": 1358,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0595703125,
          "content": "/vendor\ncomposer.phar\ncomposer.lock\n.DS_Store\nThumbs.db\n.idea"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.296875,
          "content": "language: php\n\nphp:\n    - 7.1\n    - 7.3\n\ninclude:\n    - php: 7.1\n      env: dependencies=lowest\n\nbefore_script:\n    - composer self-update\n    - composer install --prefer-source --no-interaction --dev\n    - if [ \"$dependencies\" = \"lowest\" ]; then composer update --prefer-lowest --prefer-stable -n; fi;\n\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.7919921875,
          "content": "{\n  \"name\": \"elasticquent/elasticquent\",\n  \"type\": \"library\",\n  \"description\": \"Maps Laravel Eloquent models to Elasticsearch types.\",\n  \"keywords\": [\n    \"elasticsearch\",\n    \"eloquent\",\n    \"laravel\"\n  ],\n  \"homepage\": \"https://github.com/elasticquent/Elasticquent\",\n  \"license\": \"MIT\",\n  \"authors\": [\n    {\n      \"name\": \"Adam Fairholm\",\n      \"email\": \"adam.fairholm@gmail.com\",\n      \"homepage\": \"http://adamfairholm.com\"\n    }\n  ],\n  \"require\": {\n    \"php\": \">=7.3.0\",\n    \"nesbot/carbon\": \"~1.0|~2\",\n    \"elasticsearch/elasticsearch\": \"~6.1\"\n  },\n  \"require-dev\": {\n    \"phpunit/phpunit\": \"~4.2|~5.0|~8.0|^9.0\",\n    \"mockery/mockery\": \"^0.9.4|^1.0\"\n  },\n  \"autoload\": {\n    \"psr-4\": {\n      \"Elasticquent\\\\\": \"src/\"\n    }\n  },\n  \"extra\": {\n    \"branch-alias\": {\n      \"dev-master\": \"1.0-dev\"\n    }\n  }\n}\n"
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 1.05078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) <Taylor Otwell>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.5556640625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         syntaxCheck=\"false\"\n>\n    <testsuites>\n        <testsuite name=\"Package Test Suite\">\n            <directory suffix=\".php\">./tests/</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 14.2734375,
          "content": "# Elasticquent\n\n_Elasticsearch for Eloquent Laravel Models_\n\nElasticquent makes working with [Elasticsearch](http://www.elasticsearch.org/) and [Eloquent](http://laravel.com/docs/eloquent) models easier by mapping them to Elasticsearch types. You can use the default settings or define how Elasticsearch should index and search your Eloquent models right in the model.\n\nElasticquent uses the [official Elasticsearch PHP API](https://github.com/elasticsearch/elasticsearch-php). To get started, you should have a basic knowledge of how Elasticsearch works (indexes, types, mappings, etc).\n\n# Elasticsearch Requirements\n\nYou must be running _at least_ Elasticsearch 1.0. Elasticsearch 0.9 and below *will not work* and are not supported.\n\n## Contents\n\n* [Overview](#overview)\n    * [How Elasticquent Works](#how-elasticquent-works)\n* [Setup](#setup)\n    * [Elasticsearch Configuration](#elasticsearch-configuration)\n    * [Indexes and Mapping](#indexes-and-mapping)\n    * [Setting a Custom Index Name](#setting-a-custom-index-name)\n    * [Setting a Custom Type Name](#setting-a-custom-type-name)\n* [Indexing Documents](#indexing-documents)\n* [Searching](#searching)\n    * [Search Collections](#search-collections)\n    * [Search Collection Documents](#search-collection-documents)\n    * [Chunking results from Elastiquent](#chunking-results-from-elastiquent)\n    * [Using the Search Collection Outside of Elasticquent](#using-the-search-collection-outside-of-elasticquent)\n* [More Options](#more-options)\n    * [Document Ids](#document-ids)\n    * [Document Data](#document-data)\n    * [Using Elasticquent With Custom Collections](#using-elasticquetn-with-custom-collections)\n* [Roadmap](#roadmap)\n\n## Reporting Issues\n\nIf you do find an issue, please feel free to report it with [GitHub's bug tracker](https://github.com/elasticquent/Elasticquent/issues) for this project.\n\nAlternatively, fork the project and make a pull request :)\n\n## Overview\n\nElasticquent allows you take an Eloquent model and easily index and search its contents in Elasticsearch.\n\n```php\n    $books = Book::where('id', '<', 200)->get();\n    $books->addToIndex();\n```\n\nWhen you search, instead of getting a plain array of search results, you instead get an Eloquent collection with some special Elasticsearch functionality.\n\n```php\n    $books = Book::search('Moby Dick');\n    echo $books->totalHits();\n```\n\nPlus, you can still use all the Eloquent collection functionality:\n\n```php\n    $books = $books->filter(function ($book) {\n        return $book->hasISBN();\n    });\n```\n\nCheck out the rest of the documentation for how to get started using Elasticsearch and Elasticquent!\n\n### How Elasticquent Works\n\nWhen using a database, Eloquent models are populated from data read from a database table. With Elasticquent, models are populated by data indexed in Elasticsearch. The whole idea behind using Elasticsearch for search is that its fast and light, so you model functionality will be dictated by what data has been indexed for your document.\n\n## Setup\n\nBefore you start using Elasticquent, make sure you've installed [Elasticsearch](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/_installation.html).\n\nTo get started, add Elasticquent to you composer.json file:\n\n    \"elasticquent/elasticquent\": \"dev-master\"\n\nOnce you've run a `composer update`, you need to register Laravel service provider, in your `config/app.php`:\n\n```php\n'providers' => [\n    ...\n    Elasticquent\\ElasticquentServiceProvider::class,\n],\n```\n\nWe also provide a facade for elasticsearch-php client (which has connected using our settings), add following to your `config/app.php` if you need so.\n\n```php\n'aliases' => [\n    ...\n    'Es' => Elasticquent\\ElasticquentElasticsearchFacade::class,\n],\n```\n\nThen add the Elasticquent trait to any Eloquent model that you want to be able to index in Elasticsearch:\n\n```php\nuse Elasticquent\\ElasticquentTrait;\n\nclass Book extends Eloquent\n{\n    use ElasticquentTrait;\n}\n```\n\nNow your Eloquent model has some extra methods that make it easier to index your model's data using Elasticsearch.\n\n### Elasticsearch Configuration\n\nBy default, Elasticquent will connect to `localhost:9200` and use `default` as index name, you can change this and the other settings in the configuration file. You can add the `elasticquent.php` config file at `/app/config/elasticquent.php` for Laravel 4, or use the following Artisan command to publish the configuration file into your config directory for Laravel 5:\n\n```shell\n$ php artisan vendor:publish --provider=\"Elasticquent\\ElasticquentServiceProvider\"\n```\n\n```php\n<?php\n\nreturn array(\n\n    /*\n    |--------------------------------------------------------------------------\n    | Custom Elasticsearch Client Configuration\n    |--------------------------------------------------------------------------\n    |\n    | This array will be passed to the Elasticsearch client.\n    | See configuration options here:\n    |\n    | http://www.elasticsearch.org/guide/en/elasticsearch/client/php-api/current/_configuration.html\n    */\n\n    'config' => [\n        'hosts'     => ['localhost:9200'],\n        'retries'   => 1,\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Index Name\n    |--------------------------------------------------------------------------\n    |\n    | This is the index name that Elastiquent will use for all\n    | Elastiquent models.\n    */\n\n    'default_index' => 'my_custom_index_name',\n\n);\n\n```\n\n### Indexes and Mapping\n\nWhile you can definitely build your indexes and mapping through the Elasticsearch API, you can also use some helper methods to build indexes and types right from your models.\n\nIf you want a simple way to create indexes, Elasticquent models have a function for that:\n\n    Book::createIndex($shards = null, $replicas = null);\n\nFor custom analyzer, you can set an `indexSettings` property in your model and define the analyzers from there:\n\n```php\n    /**\n     * The elasticsearch settings.\n     *\n     * @var array\n     */\n    protected $indexSettings = [\n        'analysis' => [\n            'char_filter' => [\n                'replace' => [\n                    'type' => 'mapping',\n                    'mappings' => [\n                        '&=> and '\n                    ],\n                ],\n            ],\n            'filter' => [\n                'word_delimiter' => [\n                    'type' => 'word_delimiter',\n                    'split_on_numerics' => false,\n                    'split_on_case_change' => true,\n                    'generate_word_parts' => true,\n                    'generate_number_parts' => true,\n                    'catenate_all' => true,\n                    'preserve_original' => true,\n                    'catenate_numbers' => true,\n                ]\n            ],\n            'analyzer' => [\n                'default' => [\n                    'type' => 'custom',\n                    'char_filter' => [\n                        'html_strip',\n                        'replace',\n                    ],\n                    'tokenizer' => 'whitespace',\n                    'filter' => [\n                        'lowercase',\n                        'word_delimiter',\n                    ],\n                ],\n            ],\n        ],\n    ];\n\n```\n\nFor mapping, you can set a `mappingProperties` property in your model and use some mapping functions from there:\n\n```php\nprotected $mappingProperties = array(\n   'title' => array(\n        'type' => 'string',\n        'analyzer' => 'standard'\n    )\n);\n```\n\nIf you'd like to setup a model's type mapping based on your mapping properties, you can use:\n\n```php\n    Book::putMapping($ignoreConflicts = true);\n```\n\nTo delete a mapping:\n\n```php\n    Book::deleteMapping();\n```\n\nTo rebuild (delete and re-add, useful when you make important changes to your mapping) a mapping:\n\n```php\n    Book::rebuildMapping();\n```\n\nYou can also get the type mapping and check if it exists.\n\n```php\n    Book::mappingExists();\n    Book::getMapping();\n```\n\n### Setting a Custom Index Name\n\nBy default, Elasticquent will look for the `default_index` key within your configuration file(`config/elasticquent.php`). To set the default value for an index being used, you can edit this file and set the `default_index` key:\n\n```php\nreturn array(\n\n   // Other configuration keys ...\n   \n   /*\n    |--------------------------------------------------------------------------\n    | Default Index Name\n    |--------------------------------------------------------------------------\n    |\n    | This is the index name that Elastiquent will use for all\n    | Elastiquent models.\n    */\n    \n   'default_index' => 'my_custom_index_name',\n);\n```\n\nIf you'd like to have a more dynamic index, you can also override the default configuration with a `getIndexName` method inside your Eloquent model:\n\n```php\nfunction getIndexName()\n{\n    return 'custom_index_name';\n}\n```\n\nNote: If no index was specified, Elasticquent will use a hardcoded string with the value of `default`.\n\n### Setting a Custom Type Name\n\nBy default, Elasticquent will use the table name of your models as the type name for indexing. If you'd like to override it, you can with the `getTypeName` function.\n\n```php\nfunction getTypeName()\n{\n    return 'custom_type_name';\n}\n```\n\nTo check if the type for the Elasticquent model exists yet, use `typeExists`:\n\n```php\n    $typeExists = Book::typeExists();\n```\n\n## Indexing Documents\n\nTo index all the entries in an Eloquent model, use `addAllToIndex`:\n\n```php\n    Book::addAllToIndex();\n```\n\nYou can also index a collection of models:\n\n```php\n    $books = Book::where('id', '<', 200)->get();\n    $books->addToIndex();\n```\n\nYou can index individual entries as well:\n\n```php\n    $book = Book::find($id);\n    $book->addToIndex();\n```\n\nYou can also reindex an entire model:\n\n```php\n    Book::reindex();\n```\n\n## Searching\n\nThere are three ways to search in Elasticquent. All three methods return a search collection.\n\n### Simple term search\n\nThe first method is a simple term search that searches all fields.\n\n```php\n    $books = Book::search('Moby Dick');\n```\n\n### Query Based Search\n\nThe second is a query based search for more complex searching needs:\n\n```php\n    public static function searchByQuery($query = null, $aggregations = null, $sourceFields = null, $limit = null, $offset = null, $sort = null)\n```\n\n**Example:**\n\n```php\n    $books = Book::searchByQuery(array('match' => array('title' => 'Moby Dick')));\n```\nHere's the list of available parameters:\n\n- `query` - Your ElasticSearch Query\n- `aggregations` - The Aggregations you wish to return. [See Aggregations for details](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations.html).\n- `sourceFields` - Limits returned set to the selected fields only\n- `limit` - Number of records to return\n- `offset` - Sets the record offset (use for paging results)\n- `sort` - Your sort query\n\n### Raw queries\n\nThe final method is a raw query that will be sent to Elasticsearch. This method will provide you with the most flexibility\nwhen searching for records inside Elasticsearch:\n\n```php\n    $books = Book::complexSearch(array(\n        'body' => array(\n            'query' => array(\n                'match' => array(\n                    'title' => 'Moby Dick'\n                )\n            )\n        )\n    ));\n```\n\nThis is the equivalent to:\n```php\n    $books = Book::searchByQuery(array('match' => array('title' => 'Moby Dick')));\n```\n\n### Search Collections\n\nWhen you search on an Elasticquent model, you get a search collection with some special functions.\n\nYou can get total hits:\n\n```php\n    $books->totalHits();\n```\n\nAccess the shards array:\n\n```php\n    $books->shards();\n```\n\nAccess the max score:\n\n```php\n    $books->maxScore();\n```\n\nAccess the timed out boolean property:\n\n```php\n    $books->timedOut();\n```\n\nAnd access the took property:\n\n```php\n    $books->took();\n```\n\nAnd access search aggregations - [See Aggregations for details](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations.html):\n\n```php\n    $books->getAggregations();\n```\n\n### Search Collection Documents\n\nItems in a search result collection will have some extra data that comes from Elasticsearch. You can always check and see if a model is a document or not by using the `isDocument` function:\n\n```php\n    $book->isDocument();\n```\n\nYou can check the document score that Elasticsearch assigned to this document with:\n\n```php\n    $book->documentScore();\n```\n\n### Chunking results from Elastiquent\n\nSimilar to `Illuminate\\Support\\Collection`, the `chunk` method breaks the Elasticquent collection into multiple, smaller collections of a given size:\n\n```php\n    $all_books = Book::searchByQuery(array('match' => array('title' => 'Moby Dick')));\n    $books = $all_books->chunk(10);\n```\n\n\n### Using the Search Collection Outside of Elasticquent\n\nIf you're dealing with raw search data from outside of Elasticquent, you can use the Elasticquent search results collection to turn that data into a collection.\n\n```php\n$client = new \\Elasticsearch\\Client();\n\n$params = array(\n    'index' => 'default',\n    'type'  => 'books'\n);\n\n$params['body']['query']['match']['title'] = 'Moby Dick';\n\n$collection = Book::hydrateElasticsearchResult($client->search($params));\n\n```\n\n## More Options\n\n### Document IDs\n\nElasticquent will use whatever is set as the `primaryKey` for your Eloquent models as the id for your Elasticsearch documents.\n\n### Document Data\n\nBy default, Elasticquent will use the entire attribute array for your Elasticsearch documents. However, if you want to customize how your search documents are structured, you can set a `getIndexDocumentData` function that returns you own custom document array.\n\n```php\nfunction getIndexDocumentData()\n{\n    return array(\n        'id'      => $this->id,\n        'title'   => $this->title,\n        'custom'  => 'variable'\n    );\n}\n```\nBe careful with this, as Elasticquent reads the document source into the Eloquent model attributes when creating a search result collection, so make sure you are indexing enough data for your the model functionality you want to use.\n\n### Using Elasticquent With Custom Collections\n\nIf you are using a custom collection with your Eloquent models, you just need to add the `ElasticquentCollectionTrait` to your collection so you can use `addToIndex`.\n\n```php\nclass MyCollection extends \\Illuminate\\Database\\Eloquent\\Collection\n{\n    use ElasticquentCollectionTrait;\n}\n```\n\n## Roadmap\n\nElasticquent currently needs:\n\n* Tests that mock ES API calls.\n* Support for routes\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}