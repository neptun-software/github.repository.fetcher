{
  "metadata": {
    "timestamp": 1736711839467,
    "page": 154,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Piwigo/Piwigo",
      "stars": 3331,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.24609375,
          "content": "# Piwigo specific directories\n/_data\n/plugins/*\n!/plugins/index.php\n/themes/*\n!/themes/index.php\n!/themes/default\n/upload\n/galleries/*\n!/galleries/index.php\n/local/*\n!/local/**/index.php\n\n# IntelliJ\n.idea\n*.iml\n*.ipr\n*.iws\n\n# Eclipse\n.settings\n.project"
        },
        {
          "name": "COPYING.txt",
          "type": "blob",
          "size": 0.45703125,
          "content": "COPYRIGHT\n\n    Piwigo - a photo library manager\n\n    Copyright(C) 2008-2024 Piwigo Team                  https://piwigo.org\n    Copyright(C) 2003-2008 PhpWebGallery Team     http://phpwebgallery.net\n    Copyright(C) 2002-2003 Pierrick LE GALL    http://pierrick.le-gall.net\n\n\nSOFTWARE LICENSE\n\n    The free software license of Piwigo is GNU General Public License v2\n    or later. See LICENSE.txt to get a full copy.\n\n\nTRADEMARK\n\n    Piwigo is a registered trademark.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.8916015625,
          "content": "<img src=\"https://piwigo.org/plugins/piwigo-piwigodotorg/images/piwigo.org.svg\" width=\"200\" alt=\"Piwigo logo\">\n\nManage your photo library. Piwigo is open source photo gallery software for the web. Designed for organisations, teams and individuals.\n\n![screenshot](https://piwigo.org/screenshots/github-screenshot-2.10.jpg)\n\nThe [piwigo.org](https://piwigo.org) website introduces you to Piwigo. You'll find a demo, forums, wiki and news.\n \n## Requirements\n\n * A webserver (Apache or nginx recommended)\n * PHP 7.4+. Piwigo can run with PHP 7.0+ but these end-of-life versions are no longer maintained and may expose your site to security vulnerabilities.\n * MySQL 5 or greater or MariaDB equivalent\n * ImageMagick (recommended) or PHP GD\n\n## Quick start install\n\n### NetInstall\n\n * Download the [NetInstall script](https://piwigo.org/download/dlcounter.php?code=netinstall)\n * Transfer the script to your web space with any FTP client\n * Open the script in you web browser (for example http://example.com/piwigo-netinstall.php) and follow the steps\n\n[More information](https://piwigo.org/guides/install/netinstall)\n\n### Manual\n\n * Download the [latest stable version](https://piwigo.org/download/dlcounter.php?code=latest) and unzip it\n * Transfer everything to your web space with any FTP client\n * Open your website (for example http://example.com/piwigo) and follow the steps\n\n[More information](https://piwigo.org/guides/install/manual)\n\nIf you do not have your own server, consider the [piwigo.com](https://piwigo.com/) hosting solution.\n\n## Contributing\n\nPiwigo is widely driven by its community; if you want to improve the code, fork this repo and submit your changes to the `master` branch. See our [Contribution guide](https://github.com/Piwigo/Piwigo/blob/master/docs/CONTRIBUTING.md).\n\n## License\n\nPiwigo is released under the GPL v2 license. See our [Copying details](https://github.com/Piwigo/Piwigo/blob/master/COPYING.txt).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.6875,
          "content": "# Piwigo Security Policy\n\nThe Piwigo team and community take security bugs seriously. We appreciate your efforts\nto responsibly disclose your findings.\n\n## Supported Versions\n\nSecurity updates will typically only be applied to the latest release. Exceptionally,\nwe may release a new version of an old branch but that won't be the standard way we process.\n\n## Reporting a Vulnerability\n\n**Please contact us at [security@piwigo.org](mailto:security@piwigo.org) when you have\ndiscovered a potential security issue.** Please do not create a public issue for now. At a minimum, your report by email should include the following:\n\n- version of Piwigo, version of PHP, version of MySQL/MariaDB\n- vulnerability description\n- reproduction steps\n\nYou will receive a response from us within 72 hours. If the issue is confirmed we will\nthen work on fixing it and release a new fixed version of Piwigo, following these steps:\n\n- Confirm the problem and determine the affected versions.\n- Audit code to find any potential similar problems.\n- Prepare a fix for `master` branch and backport it on the current stable branch.\n- Release a new version of Piwigo on its current stable branch as fast as possible, historically within a few days.\n\n## Responsible Disclosure\n\n1. Confirm that the vulnerability applies to a current version and is reproducible.\n2. First share the vulnerability details with us so that users are not put at risk.\n3. Wait before publishing details until everyone has had a chance to update.\n4. Respect the privacy of others.\n\n*Avoid activities that disrupt, degrade, or interrupt our services or compromise other\nusers' data, such as spam, brute force attacks, denial of service attacks, and malicious file distribution.*\n"
        },
        {
          "name": "about.php",
          "type": "blob",
          "size": 1.7802734375,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n//----------------------------------------------------------- include\ndefine('PHPWG_ROOT_PATH','./');\ninclude_once( PHPWG_ROOT_PATH.'include/common.inc.php' );\n\n// +-----------------------------------------------------------------------+\n// | Check Access and exit when user status is not ok                      |\n// +-----------------------------------------------------------------------+\ncheck_status(ACCESS_GUEST);\n\n//----------------------------------------------------- template initialization\n//\n// Start output of page\n//\n$title= l10n('About Piwigo');\n$page['body_id'] = 'theAboutPage';\n\ntrigger_notify('loc_begin_about');\n\n$template->set_filename('about', 'about.tpl');\n\n$template->assign('ABOUT_MESSAGE', load_language('about.html','', array('return'=>true)) );\n\n$theme_about = load_language('about.html', PHPWG_THEMES_PATH.$user['theme'].'/', array('return' => true));\nif ( $theme_about !== false )\n{\n  $template->assign('THEME_ABOUT', $theme_about);\n}\n\n// include menubar\n$themeconf = $template->get_template_vars('themeconf');\nif (!isset($themeconf['hide_menu_on']) OR !in_array('theAboutPage', $themeconf['hide_menu_on']))\n{\n  include( PHPWG_ROOT_PATH.'include/menubar.inc.php');\n}\n\ninclude(PHPWG_ROOT_PATH.'include/page_header.php');\nflush_page_messages();\n$template->pparse('about');\ninclude(PHPWG_ROOT_PATH.'include/page_tail.php');\n?>\n"
        },
        {
          "name": "action.php",
          "type": "blob",
          "size": 5.849609375,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\ndefine('PHPWG_ROOT_PATH','./');\nsession_cache_limiter('public');\ninclude_once(PHPWG_ROOT_PATH.'include/common.inc.php');\n\n// Check Access and exit when user status is not ok\ncheck_status(ACCESS_GUEST);\n\nfunction guess_mime_type($ext)\n{\n  switch ( strtolower($ext) )\n  {\n    case \"jpe\": case \"jpeg\":\n    case \"jpg\": $ctype=\"image/jpeg\"; break;\n    case \"png\": $ctype=\"image/png\"; break;\n    case \"gif\": $ctype=\"image/gif\"; break;\n    case \"webp\": $ctype=\"image/webp\"; break;\n    case \"tiff\":\n    case \"tif\": $ctype=\"image/tiff\"; break;\n    case \"txt\": $ctype=\"text/plain\"; break;\n    case \"html\":\n    case \"htm\": $ctype=\"text/html\"; break;\n    case \"xml\": $ctype=\"text/xml\"; break;\n    case \"pdf\": $ctype=\"application/pdf\"; break;\n    case \"zip\": $ctype=\"application/zip\"; break;\n    case \"ogg\": $ctype=\"application/ogg\"; break;\n    default: $ctype=\"application/octet-stream\";\n  }\n  return $ctype;\n}\n\nfunction do_error( $code, $str )\n{\n  set_status_header( $code );\n  echo $str ;\n  exit();\n}\n\nif ($conf['enable_formats'] and isset($_GET['format']))\n{\n  check_input_parameter('format', $_GET, false, PATTERN_ID);\n\n  $query = '\nSELECT\n    *\n  FROM '.IMAGE_FORMAT_TABLE.'\n  WHERE format_id = '.$_GET['format'].'\n;';\n  $formats = query2array($query);\n\n  if (count($formats) == 0)\n  {\n    do_error(400, 'Invalid request - format');\n  }\n\n  $format = $formats[0];\n\n  $_GET['id'] = $format['image_id'];\n  $_GET['part'] = 'f'; // \"f\" for \"format\"\n}\n\n\nif (!isset($_GET['id'])\n    or !is_numeric($_GET['id'])\n    or !isset($_GET['part'])\n    or !in_array($_GET['part'], array('e','r','f') ) )\n{\n  do_error(400, 'Invalid request - id/part');\n}\n\n$query = '\nSELECT * FROM '. IMAGES_TABLE.'\n  WHERE id='.$_GET['id'].'\n;';\n\n$element_info = pwg_db_fetch_assoc(pwg_query($query));\nif ( empty($element_info) )\n{\n  do_error(404, 'Requested id not found');\n}\n\n// special download action for admins\n$is_admin_download = false;\nif (is_admin() and isset($_GET['pwg_token']) and get_pwg_token() == $_GET['pwg_token'])\n{\n  $is_admin_download = true;\n  $user['enabled_high'] = true;\n}\n\n$src_image = new SrcImage($element_info);\n\n// $filter['visible_categories'] and $filter['visible_images']\n// are not used because it's not necessary (filter <> restriction)\n$query='\nSELECT id\n  FROM '.CATEGORIES_TABLE.'\n    INNER JOIN '.IMAGE_CATEGORY_TABLE.' ON category_id = id\n  WHERE image_id = '.$_GET['id'].'\n'.get_sql_condition_FandF(\n  array(\n      'forbidden_categories' => 'category_id',\n      'forbidden_images' => 'image_id',\n    ),\n  '    AND'\n  ).'\n  LIMIT 1\n;';\nif (!$is_admin_download and pwg_db_num_rows(pwg_query($query))<1 )\n{\n  do_error(401, 'Access denied');\n}\n\ninclude_once(PHPWG_ROOT_PATH.'include/functions_picture.inc.php');\n$file='';\nswitch ($_GET['part'])\n{\n  case 'e':\n    if ( $src_image->is_original() and !$user['enabled_high'] )\n    {// we have a photo and the user has no access to HD\n      $deriv = new DerivativeImage(IMG_XXLARGE, $src_image);\n      if ( !$deriv->same_as_source() )\n      {\n        do_error(401, 'Access denied e');\n      }\n    }\n    $file = get_element_path($element_info);\n    break;\n  case 'r':\n    $file = original_to_representative( get_element_path($element_info), $element_info['representative_ext'] );\n    break;\n  case 'f' :\n    $file = original_to_format(get_element_path($element_info), $format['ext']);\n    $element_info['file'] = get_filename_wo_extension($element_info['file']).'.'.$format['ext'];\n    break;\n}\n\nif ( empty($file) )\n{\n  do_error(404, 'Requested file not found');\n}\n\nif ($_GET['part'] == 'e') {\n  pwg_log($_GET['id'], 'high');\n}\nelse if ($_GET['part'] == 'e')\n{\n  pwg_log($_GET['id'], 'other');\n}\nelse if ($_GET['part'] == 'f')\n{\n  pwg_log($_GET['id'], 'high', $format['format_id']);\n}\n\ntrigger_notify('loc_action_before_http_headers');\n\n$http_headers = array();\n\n$ctype = null;\nif (!url_is_remote($file))\n{\n  if ( !@is_readable($file) )\n  {\n    do_error(404, \"Requested file not found - $file\");\n  }\n  $http_headers[] = 'Content-Length: '.@filesize($file);\n  if ( function_exists('mime_content_type') )\n  {\n    $ctype = mime_content_type($file);\n  }\n\n  $gmt_mtime = gmdate('D, d M Y H:i:s', filemtime($file)).' GMT';\n  $http_headers[] = 'Last-Modified: '.$gmt_mtime;\n\n  // following lines would indicate how the client should handle the cache\n  /* $max_age=300;\n  $http_headers[] = 'Expires: '.gmdate('D, d M Y H:i:s', time()+$max_age).' GMT';\n  // HTTP/1.1 only\n  $http_headers[] = 'Cache-Control: private, must-revalidate, max-age='.$max_age;*/\n\n  if ('f' != $_GET['part'] and isset( $_SERVER['HTTP_IF_MODIFIED_SINCE'] ) )\n  {\n    set_status_header(304);\n    foreach ($http_headers as $header)\n    {\n      header( $header );\n    }\n    exit();\n  }\n}\n\nif (!isset($ctype))\n{ // give it a guess\n  $ctype = guess_mime_type( get_extension($file) );\n}\n\n$http_headers[] = 'Content-Type: '.$ctype;\n\nif (isset($_GET['download']))\n{\n  $http_headers[] = 'Content-Disposition: attachment; filename=\"'.htmlspecialchars_decode($element_info['file']).'\";';\n  $http_headers[] = 'Content-Transfer-Encoding: binary';\n}\nelse\n{\n  $http_headers[] = 'Content-Disposition: inline; filename=\"'\n            .basename($file).'\";';\n}\n\nforeach ($http_headers as $header)\n{\n  header( $header );\n}\n\n// Looking at the safe_mode configuration for execution time\nif (ini_get('safe_mode') == 0)\n{\n  @set_time_limit(0);\n}\n\n// Without clean and flush there may be some image download problems, or image can be corrupted after download\nif (ob_get_length() !== FALSE)\n{\n  ob_flush();\n}\nflush();\n\n@readfile($file);\n\n?>\n"
        },
        {
          "name": "admin.php",
          "type": "blob",
          "size": 12.89453125,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n// +-----------------------------------------------------------------------+\n// | Basic constants and includes                                          |\n// +-----------------------------------------------------------------------+\n\ndefine('PHPWG_ROOT_PATH','./');\ndefine('IN_ADMIN', true);\n\ninclude_once(PHPWG_ROOT_PATH.'include/common.inc.php');\ninclude_once(PHPWG_ROOT_PATH.'admin/include/functions.php');\ninclude_once(PHPWG_ROOT_PATH.'admin/include/functions_plugins.inc.php');\ninclude_once(PHPWG_ROOT_PATH.'admin/include/add_core_tabs.inc.php');\n\ntrigger_notify('loc_begin_admin');\n\n// +-----------------------------------------------------------------------+\n// | Check Access and exit when user status is not ok                      |\n// +-----------------------------------------------------------------------+\n\ncheck_status(ACCESS_ADMINISTRATOR);\n\ncheck_input_parameter('page', $_GET, false, '/^[a-zA-Z\\d_-]+$/');\ncheck_input_parameter('section', $_GET, false, '/^[a-z]+[a-z_\\/-]*(\\.php)?$/i');\n\n// +-----------------------------------------------------------------------+\n// | Filesystem checks                                                     |\n// +-----------------------------------------------------------------------+\n\nif ($conf['fs_quick_check_period'] > 0)\n{\n  $perform_fsqc = false;\n  if (isset($conf['fs_quick_check_last_check']))\n  {\n    if (strtotime($conf['fs_quick_check_last_check']) < strtotime($conf['fs_quick_check_period'].' seconds ago'))\n    {\n      $perform_fsqc = true;\n    }\n  }\n  else\n  {\n    $perform_fsqc = true;\n  }\n\n  if ($perform_fsqc)\n  {\n    fs_quick_check();\n  }\n}\n\n// +-----------------------------------------------------------------------+\n// | Direct actions                                                        |\n// +-----------------------------------------------------------------------+\n\n// save plugins_new display order (AJAX action)\nif (isset($_GET['plugins_new_order']))\n{\n  pwg_set_session_var('plugins_new_order', $_GET['plugins_new_order']);\n  exit;\n}\n\n// theme changer\nif (isset($_GET['change_theme']))\n{\n  $admin_themes = array('roma', 'clear');\n  $admin_theme_array = array(userprefs_get_param('admin_theme', 'clear'));\n  $result = array_diff(\n      $admin_themes,\n      $admin_theme_array\n    );\n\n  $new_admin_theme = array_pop(\n      $result\n    );\n\n  userprefs_update_param('admin_theme', $new_admin_theme);\n\n  $url_params = array();\n  foreach (array('page', 'tab', 'section') as $url_param)\n  {\n    if (isset($_GET[$url_param]))\n    {\n      $url_params[] = $url_param.'='.$_GET[$url_param];\n    }\n  }\n  \n  $redirect_url = 'admin.php';\n  if (count($url_params) > 0)\n  {\n    $redirect_url.= '?'.implode('&amp;', $url_params);\n  }\n\n  redirect($redirect_url);\n}\n\n// +-----------------------------------------------------------------------+\n// | Synchronize user informations                                         |\n// +-----------------------------------------------------------------------+\n\n// sync_user() is only useful when external authentication is activated\nif ($conf['external_authentification'])\n{\n  sync_users();\n}\n\n// +-----------------------------------------------------------------------+\n// | Variables init                                                        |\n// +-----------------------------------------------------------------------+\n\n$change_theme_url = PHPWG_ROOT_PATH.'admin.php?';\n$test_get = $_GET;\nunset($test_get['page']);\nunset($test_get['section']);\nunset($test_get['tag']);\nif (count($test_get) == 0 and !empty($_SERVER['QUERY_STRING']))\n{\n  $change_theme_url.= str_replace('&', '&amp;', $_SERVER['QUERY_STRING']).'&amp;';\n}\n$change_theme_url.= 'change_theme=1';\n\n// ?page=plugin-community-pendings is an clean alias of\n// ?page=plugin&section=community/admin.php&tab=pendings\nif (isset($_GET['page']) and preg_match('/^plugin-([^-]*)(?:-(.*))?$/', $_GET['page'], $matches))\n{\n  $_GET['page'] = 'plugin';\n\n  if (preg_match('/^piwigo_(videojs|openstreetmap)$/', $matches[1]))\n  {\n    $matches[1] = str_replace('_', '-', $matches[1]);\n  }\n\n  $_GET['section'] = $matches[1].'/admin.php';\n  if (isset($matches[2]))\n  {\n    $_GET['tab'] = $matches[2];\n  }\n}\n\n// ?page=album-134-properties is an clean alias of\n// ?page=album&cat_id=134&tab=properties\nif (isset($_GET['page']) and preg_match('/^album-(\\d+)(?:-(.*))?$/', $_GET['page'], $matches))\n{\n  $_GET['page'] = 'album';\n  $_GET['cat_id'] = $matches[1];\n  if (isset($matches[2]))\n  {\n    $_GET['tab'] = $matches[2];\n  }\n}\n\n// ?page=photo-1234-properties is an clean alias of\n// ?page=photo&image_id=1234&tab=properties\nif (isset($_GET['page']) and preg_match('/^photo-(\\d+)(?:-(.*))?$/', $_GET['page'], $matches))\n{\n  $_GET['page'] = 'photo';\n  $_GET['image_id'] = $matches[1];\n  if (isset($matches[2]))\n  {\n    $_GET['tab'] = $matches[2];\n  }\n}\n\nif (isset($_GET['page'])\n    and preg_match('/^[a-z_]*$/', $_GET['page'])\n    and is_file(PHPWG_ROOT_PATH.'admin/'.$_GET['page'].'.php'))\n{\n  $page['page'] = $_GET['page'];\n}\nelse\n{\n  $page['page'] = 'intro';\n}\n\n$link_start = PHPWG_ROOT_PATH.'admin.php?page=';\n$conf_link = $link_start.'configuration&amp;section=';\n\n// $_GET['tab'] is often used to perform and\n// include('admin_page_'.$_GET['tab'].'.php') : we need to protect it to\n// avoid any unexpected file inclusion\ncheck_input_parameter('tab', $_GET, false, '/^[a-zA-Z\\d_-]+$/');\n\n// +-----------------------------------------------------------------------+\n// | Template init                                                         |\n// +-----------------------------------------------------------------------+\n\n$title = l10n('Piwigo Administration'); // for include/page_header.php\n$page['page_banner'] = '<h1>'.l10n('Piwigo Administration').'</h1>';\n$page['body_id'] = 'theAdminPage';\n\n$template->set_filenames(array('admin' => 'admin.tpl'));\n\n$template->assign(\n  array(\n    'USERNAME' => $user['username'],\n    'ENABLE_SYNCHRONIZATION' => $conf['enable_synchronization'],\n    'U_SITE_MANAGER'=> $link_start.'site_manager',\n    'U_HISTORY_STAT'=> $link_start.'stats&amp;year='.date('Y').'&amp;month='.date('n'),\n    'U_FAQ'=> $link_start.'help',\n    'U_SITES'=> $link_start.'remote_site',\n    'U_MAINTENANCE'=> $link_start.'maintenance',\n    'U_NOTIFICATION_BY_MAIL'=> $link_start.'notification_by_mail',\n    'U_CONFIG_GENERAL'=> $link_start.'configuration',\n    'U_CONFIG_DISPLAY'=> $conf_link.'default',\n    'U_CONFIG_EXTENTS'=> $link_start.'extend_for_templates',\n    'U_CONFIG_MENUBAR'=> $link_start.'menubar',\n    'U_CONFIG_LANGUAGES' => $link_start.'languages',\n    'U_CONFIG_THEMES'=> $link_start.'themes',\n    'U_CATEGORIES'=> $link_start.'cat_list',\n    'U_ALBUMS'=> $link_start.'albums',\n    'U_CAT_OPTIONS'=> $link_start.'cat_options',\n    'U_CAT_SEARCH'=> $link_start.'cat_search',\n    'U_CAT_UPDATE'=> $link_start.'site_update&amp;site=1',\n    'U_RATING'=> $link_start.'rating',\n    'U_RECENT_SET'=> $link_start.'batch_manager&amp;filter=prefilter-last_import',\n    'U_BATCH'=> $link_start.'batch_manager',\n    'U_TAGS'=> $link_start.'tags',\n    'U_USERS'=> $link_start.'user_list',\n    'U_GROUPS'=> $link_start.'group_list',\n    'U_RETURN'=> get_gallery_home_url(),\n    'U_ADMIN'=> PHPWG_ROOT_PATH.'admin.php',\n    'U_LOGOUT'=> PHPWG_ROOT_PATH.'index.php?act=logout',\n    'U_PLUGINS'=> $link_start.'plugins',\n    'U_ADD_PHOTOS' => $link_start.'photos_add',\n    'U_CHANGE_THEME' => $change_theme_url,\n    'ADMIN_PAGE_TITLE' => 'Piwigo Administration Page',\n    'ADMIN_PAGE_OBJECT_ID' => '',\n    'U_SHOW_TEMPLATE_TAB' => $conf['show_template_in_side_menu'],\n    'SHOW_RATING' => $conf['rate'],\n    )\n  );\n\nif ($conf['enable_core_update'])\n{\n  $template->assign('U_UPDATES', $link_start.'updates');\n}\n\nif ($conf['activate_comments'])\n{\n  $template->assign('U_COMMENTS', $link_start.'comments');\n  \n  // pending comments\n  $query = '\nSELECT COUNT(*)\n  FROM '.COMMENTS_TABLE.'\n  WHERE validated=\\'false\\'\n;';\n  list($nb_comments) = pwg_db_fetch_row(pwg_query($query));\n\n  if ($nb_comments > 0)\n  {\n    $template->assign('NB_PENDING_COMMENTS', $nb_comments);\n    $page['nb_pending_comments'] = $nb_comments;\n  }\n}\n\n// any photo in the caddie?\n$query = '\nSELECT COUNT(*)\n  FROM '.CADDIE_TABLE.'\n  WHERE user_id = '.$user['id'].'\n;';\nlist($nb_photos_in_caddie) = pwg_db_fetch_row(pwg_query($query));\n\nif ($nb_photos_in_caddie > 0)\n{\n  $template->assign(\n    array(\n      'NB_PHOTOS_IN_CADDIE' => $nb_photos_in_caddie,\n      'U_CADDIE' => $link_start.'batch_manager&amp;filter=prefilter-caddie',\n      )\n    );\n} else {\n  $template->assign(\n    array(\n      'NB_PHOTOS_IN_CADDIE' => 0,\n      'U_CADDIE' => '',\n      )\n    );\n}\n\n// any photos with no md5sum ?\nif (in_array($page['page'], array('site_update', 'batch_manager')))\n{\n  $nb_no_md5sum = count(get_photos_no_md5sum());\n\n  if ($nb_no_md5sum > 0)\n  {\n    $page['no_md5sum_number'] = $nb_no_md5sum;\n  }\n}\n\n// only calculate number of orphans on all pages if the number of images is \"not huge\"\n$page['nb_orphans'] = 0;\n\nlist($page['nb_photos_total']) = pwg_db_fetch_row(pwg_query('SELECT COUNT(*) FROM '.IMAGES_TABLE));\nif ($page['nb_photos_total'] < 100000) // 100k is already a big gallery\n{\n  $page['nb_orphans'] = count_orphans();\n}\n\n$template->assign(\n  array(\n    'NB_ORPHANS' => $page['nb_orphans'],\n    'U_ORPHANS' => $link_start.'batch_manager&amp;filter=prefilter-no_album',\n    )\n  );\n\n// +-----------------------------------------------------------------------+\n// | Refresh permissions                                                   |\n// +-----------------------------------------------------------------------+\n\n// Only for pages witch change permissions\nif (\n    in_array($page['page'],\n      array(\n        'site_manager', // delete site\n        'site_update',  // ?only POST\n      )\n    )\n    or ( !empty($_POST) and in_array($page['page'],\n        array(\n          'album',        // public/private; lock/unlock, permissions\n          'albums',\n          'cat_options',  // public/private; lock/unlock\n          'user_list',    // group assoc; user level\n          'user_perm',\n        )\n      )\n    )\n  )\n{\n  invalidate_user_cache();\n}\n\n$show_whats_new = false;\n\n$whats_new_major_version = get_branch_from_version(PHPWG_VERSION);\n\nif (userprefs_get_param('show_whats_new_'.$whats_new_major_version, true) and pwg_is_dbconf_writeable())\n{\n  if ($user['registration_date'] > $conf['last_major_update'])\n  {\n    userprefs_update_param('show_whats_new_'.$whats_new_major_version, false);\n  }\n  else\n  {\n    // purge old whats_new_*\n    if (isset($user['preferences']))\n    {\n      $userprefs_params_to_delete = array();\n\n      foreach (array_keys($user['preferences']) as $pref_param)\n      {\n        if (preg_match('/^whats_new_/', $pref_param))\n        {\n          $userprefs_params_to_delete[] = $pref_param;\n        }\n      }\n\n      if (count($userprefs_params_to_delete) > 0)\n      {\n        userprefs_delete_param($userprefs_params_to_delete);\n      }\n    }\n\n    $show_whats_new = true;\n  }\n}\n\n$release_note_url = PHPWG_URL.'/releases/'.$whats_new_major_version.'.0.0';\n\n$whats_new_imgs = array(\n  '1' =>'https://ressources.piwigo.com/uploads/c/v/7/cv7jpz6hf8//2024/11/07/20241107171642-58ded6af.png',\n  '2' =>'https://ressources.piwigo.com/uploads/c/v/7/cv7jpz6hf8//2024/11/07/20241107171642-9d651969.png',\n  '3' =>'https://ressources.piwigo.com/uploads/c/v/7/cv7jpz6hf8//2024/11/07/20241107171643-d659d017.png',\n  '4' =>'https://ressources.piwigo.com/uploads/c/v/7/cv7jpz6hf8//2024/11/07/20241107171642-1109101f.png',\n);\n\n$display_bell = false;\nif (strtotime($conf['last_major_update']) > strtotime('1 month ago'))\n{\n  $display_bell = true;\n}\n\n$template->assign(\n  array(\n  'SHOW_WHATS_NEW' => $show_whats_new,\n  'WHATS_NEW_MAJOR_VERSION' => $whats_new_major_version,\n  'RELEASE_NOTE_URL' => $release_note_url,\n  'WHATS_NEW_IMGS' => $whats_new_imgs,\n  'DISPLAY_BELL' => $display_bell,\n  )\n);\n\n// +-----------------------------------------------------------------------+\n// | Include specific page                                                 |\n// +-----------------------------------------------------------------------+\n\ntrigger_notify('loc_begin_admin_page');\ninclude(PHPWG_ROOT_PATH.'admin/'.$page['page'].'.php');\n\n$template->assign('ACTIVE_MENU', get_active_menu($page['page']));\n\n// +-----------------------------------------------------------------------+\n// | Sending html code                                                     |\n// +-----------------------------------------------------------------------+\n\n// Add the Piwigo Official menu\n$template->assign( 'pwgmenu', pwg_URL() );\n\ninclude(PHPWG_ROOT_PATH.'include/page_header.php');\n\ntrigger_notify('loc_end_admin');\n\nflush_page_messages();\n\n$template->pparse('admin');\n\ninclude(PHPWG_ROOT_PATH.'include/page_tail.php');\n\n?>\n"
        },
        {
          "name": "admin",
          "type": "tree",
          "content": null
        },
        {
          "name": "comments.php",
          "type": "blob",
          "size": 15.4462890625,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n// +-----------------------------------------------------------------------+\n// |                           initialization                              |\n// +-----------------------------------------------------------------------+\ndefine('PHPWG_ROOT_PATH','./');\ninclude_once(PHPWG_ROOT_PATH.'include/common.inc.php');\ninclude_once(PHPWG_ROOT_PATH.'include/functions_comment.inc.php');\n\nif (!$conf['activate_comments'])\n{\n  page_not_found(null);\n}\n\n// +-----------------------------------------------------------------------+\n// | Check Access and exit when user status is not ok                      |\n// +-----------------------------------------------------------------------+\ncheck_status(ACCESS_GUEST);\n\n$url_self = PHPWG_ROOT_PATH.'comments.php'\n  .get_query_string_diff(array('delete','edit','validate','pwg_token'));\n\n$sort_order = array(\n  'DESC' => l10n('descending'),\n  'ASC'  => l10n('ascending')\n  );\n\n// sort_by : database fields proposed for sorting comments list\n$sort_by = array(\n  'date' => l10n('comment date'),\n  'image_id' => l10n('photo')\n  );\n\n// items_number : list of number of items to display per page\n$items_number = array(5,10,20,50,'all');\n\n// if the default value is not in the expected values, we add it in the $items_number array\nif (!in_array($conf['comments_page_nb_comments'], $items_number))\n{\n  $items_number_new = array();\n\n  $is_inserted = false;\n\n  foreach ($items_number as $number)\n  {\n    if ($number > $conf['comments_page_nb_comments'] or ($number == 'all' and !$is_inserted))\n    {\n      $items_number_new[] = $conf['comments_page_nb_comments'];\n      $is_inserted = true;\n    }\n\n    $items_number_new[] = $number;\n  }\n\n  $items_number = $items_number_new;\n}\n\n// since when display comments ?\n//\n$since_options = array(\n  1 => array('label' => l10n('today'),\n             'clause' => 'date > '.pwg_db_get_recent_period_expression(1)),\n  2 => array('label' => l10n('last %d days', 7),\n             'clause' => 'date > '.pwg_db_get_recent_period_expression(7)),\n  3 => array('label' => l10n('last %d days', 30),\n             'clause' => 'date > '.pwg_db_get_recent_period_expression(30)),\n  4 => array('label' => l10n('the beginning'),\n             'clause' => '1=1') // stupid but generic\n  );\n\ntrigger_notify('loc_begin_comments');\n\nif (!empty($_GET['since']))\n{\n  $page['since'] = intval($_GET['since']);\n}\nelse\n{\n  $page['since'] = 4;\n}\n\n// on which field sorting\n//\n$page['sort_by'] = 'date';\n// if the form was submitted, it overloads default behaviour\nif (isset($_GET['sort_by']) and isset($sort_by[$_GET['sort_by']]) )\n{\n  $page['sort_by'] = $_GET['sort_by'];\n}\n\n// order to sort\n//\n$page['sort_order'] = 'DESC';\n// if the form was submitted, it overloads default behaviour\nif (isset($_GET['sort_order']) and isset($sort_order[$_GET['sort_order']]))\n{\n  $page['sort_order'] = $_GET['sort_order'];\n}\n\n// number of items to display\n//\n$page['items_number'] = $conf['comments_page_nb_comments'];\nif (isset($_GET['items_number']))\n{\n  $page['items_number'] = $_GET['items_number'];\n}\nif ( !is_numeric($page['items_number']) and $page['items_number']!='all' )\n{\n  $page['items_number'] = 10;\n}\n\n$page['where_clauses'] = array();\n\n// which category to filter on ?\nif (isset($_GET['cat']) and 0 != $_GET['cat'])\n{\n  check_input_parameter('cat', $_GET, false, PATTERN_ID);\n\n  $category_ids = get_subcat_ids(array($_GET['cat']));\n  if (empty($category_ids))\n  {\n    $category_ids = array(-1);\n  }\n\n  $page['where_clauses'][] =\n    'category_id IN ('.implode(',', $category_ids).')';\n}\n\n// search a particular author\nif (!empty($_GET['author']))\n{\n  $page['where_clauses'][] =\n    '(u.'.$conf['user_fields']['username'].' = \\''.$_GET['author'].'\\' OR author = \\''.$_GET['author'].'\\')';\n}\n\n// search a specific comment (if you're coming directly from an admin\n// notification email)\nif (!empty($_GET['comment_id']))\n{\n  check_input_parameter('comment_id', $_GET, false, PATTERN_ID);\n\n  // currently, the $_GET['comment_id'] is only used by admins from email\n  // for management purpose (validate/delete)\n  if (!is_admin())\n  {\n    $login_url =\n      get_root_url().'identification.php?redirect='\n      .urlencode(urlencode($_SERVER['REQUEST_URI']))\n      ;\n    redirect($login_url);\n  }\n\n  $page['where_clauses'][] = 'com.id = '.$_GET['comment_id'];\n}\n\n// search a substring among comments content\nif (!empty($_GET['keyword']))\n{\n  $page['where_clauses'][] =\n    '('.\n    implode(' AND ',\n            array_map(\n              function($s) {return \"content LIKE '%$s%'\"; } ,\n              preg_split('/[\\s,;]+/', $_GET['keyword'] )\n              )\n      ).\n    ')';\n}\n\n$page['where_clauses'][] = $since_options[$page['since']]['clause'];\n\n// which status to filter on ?\nif ( !is_admin() )\n{\n  $page['where_clauses'][] = 'validated=\\'true\\'';\n}\n\n$page['where_clauses'][] = get_sql_condition_FandF\n  (\n    array\n      (\n        'forbidden_categories' => 'category_id',\n        'visible_categories' => 'category_id',\n        'visible_images' => 'ic.image_id'\n      ),\n    '', true\n  );\n\n// +-----------------------------------------------------------------------+\n// |                         comments management                           |\n// +-----------------------------------------------------------------------+\n\n$comment_id = null;\n$action = null;\n\n$actions = array('delete', 'validate', 'edit');\nforeach ($actions as $loop_action)\n{\n  if (isset($_GET[$loop_action]))\n  {\n    $action = $loop_action;\n    check_input_parameter($action, $_GET, false, PATTERN_ID);\n    $comment_id = $_GET[$action];\n    break;\n  }\n}\n\nif (isset($action))\n{\n  $comment_author_id = get_comment_author_id($comment_id);\n\n  if (can_manage_comment($action, $comment_author_id))\n  {\n    $perform_redirect = false;\n\n    if ('delete' == $action)\n    {\n      check_pwg_token();\n      delete_user_comment($comment_id);\n      $perform_redirect = true;\n    }\n\n    if ('validate' == $action)\n    {\n      check_pwg_token();\n      validate_user_comment($comment_id);\n      $perform_redirect = true;\n    }\n\n    if ('edit' == $action)\n    {\n      if (!empty($_POST['content']))\n      {\n        check_pwg_token();\n        $comment_action = update_user_comment(\n          array(\n            'comment_id' => $_GET['edit'],\n            'image_id' => $_POST['image_id'],\n            'content' => $_POST['content'],\n            'website_url' => @$_POST['website_url'],\n            ),\n          $_POST['key']\n          );\n\n        switch ($comment_action)\n        {\n          case 'moderate':\n            $_SESSION['page_infos'][] = l10n('An administrator must authorize your comment before it is visible.');\n          case 'validate':\n            $_SESSION['page_infos'][] = l10n('Your comment has been registered');\n            $perform_redirect = true;\n            break;\n          case 'reject':\n            $_SESSION['page_errors'][] = l10n('Your comment has NOT been registered because it did not pass the validation rules');\n            break;\n          default:\n            trigger_error('Invalid comment action '.$comment_action, E_USER_WARNING);\n        }\n      }\n\n      $edit_comment = $_GET['edit'];\n    }\n\n    if ($perform_redirect)\n    {\n      redirect($url_self);\n    }\n  }\n}\n\n// +-----------------------------------------------------------------------+\n// |                       page header and options                         |\n// +-----------------------------------------------------------------------+\n\n$title= l10n('User comments');\n$page['body_id'] = 'theCommentsPage';\n\n$template->set_filenames(array('comments'=>'comments.tpl', 'comment_list'=>'comment_list.tpl'));\n$template->assign(\n  array(\n    'F_ACTION'=>PHPWG_ROOT_PATH.'comments.php',\n    'F_KEYWORD'=> isset($_GET['keyword']) ? htmlspecialchars(stripslashes($_GET['keyword'])) : \"\",\n    'F_AUTHOR'=> isset($_GET['author']) ? htmlspecialchars(stripslashes($_GET['author'])) : \"\",\n    )\n  );\n\n// +-----------------------------------------------------------------------+\n// |                          form construction                            |\n// +-----------------------------------------------------------------------+\n\n// Search in a particular category\n$blockname = 'categories';\n\n$query = '\nSELECT id, name, uppercats, global_rank\n  FROM '.CATEGORIES_TABLE.'\n'.get_sql_condition_FandF\n  (\n    array\n      (\n        'forbidden_categories' => 'id',\n        'visible_categories' => 'id'\n      ),\n    'WHERE'\n  ).'\n;';\ndisplay_select_cat_wrapper($query, array(@$_GET['cat']), $blockname, true);\n\n// Filter on recent comments...\n$tpl_var=array();\nforeach ($since_options as $id => $option)\n{\n  $tpl_var[ $id ] = $option['label'];\n}\n$template->assign( 'since_options', $tpl_var);\n$template->assign( 'since_options_selected', $page['since']);\n\n// Sort by\n$template->assign( 'sort_by_options', $sort_by);\n$template->assign( 'sort_by_options_selected', $page['sort_by']);\n\n// Sorting order\n$template->assign( 'sort_order_options', $sort_order);\n$template->assign( 'sort_order_options_selected', $page['sort_order']);\n\n\n// Number of items\n$blockname = 'items_number_option';\n$tpl_var=array();\nforeach ($items_number as $option)\n{\n  $tpl_var[ $option ] = is_numeric($option) ? $option : l10n($option);\n}\n$template->assign( 'item_number_options', $tpl_var);\n$template->assign( 'item_number_options_selected', $page['items_number']);\n\n\n// +-----------------------------------------------------------------------+\n// |                            navigation bar                             |\n// +-----------------------------------------------------------------------+\n\nif (isset($_GET['start']))\n{\n  $start = intval($_GET['start']);\n}\nelse\n{\n  $start = 0;\n}\n\n// +-----------------------------------------------------------------------+\n// |                        last comments display                          |\n// +-----------------------------------------------------------------------+\n\n$comments = array();\n$element_ids = array();\n$category_ids = array();\n\n$query = '\nSELECT SQL_CALC_FOUND_ROWS com.id AS comment_id,\n       com.image_id,\n       ic.category_id,\n       com.author,\n       com.author_id,\n       u.'.$conf['user_fields']['email'].' AS user_email,\n       com.email,\n       com.date,\n       com.website_url,\n       com.content,\n       com.validated\n  FROM '.IMAGE_CATEGORY_TABLE.' AS ic\n    INNER JOIN '.COMMENTS_TABLE.' AS com\n    ON ic.image_id = com.image_id\n    LEFT JOIN '.USERS_TABLE.' As u\n    ON u.'.$conf['user_fields']['id'].' = com.author_id\n  WHERE '.implode('\n    AND ', $page['where_clauses']).'\n  GROUP BY comment_id\n  ORDER BY '.$page['sort_by'].' '.$page['sort_order'];\nif ('all' != $page['items_number'])\n{\n  $query.= '\n  LIMIT '.$page['items_number'].' OFFSET '.$start;\n}\n$query.= '\n;';\n$result = pwg_query($query);\nwhile ($row = pwg_db_fetch_assoc($result))\n{\n  $comments[] = $row;\n  $element_ids[] = $row['image_id'];\n  $category_ids[] = $row['category_id'];\n}\nlist($counter) = pwg_db_fetch_row(pwg_query('SELECT FOUND_ROWS()'));\n\n$url = PHPWG_ROOT_PATH.'comments.php'\n  .get_query_string_diff(array('start','edit','delete','validate','pwg_token'));\n\n$navbar = create_navigation_bar($url,\n                                $counter,\n                                $start,\n                                $page['items_number'],\n                                '');\n\n$template->assign('navbar', $navbar);\n\n\nif (count($comments) > 0)\n{\n  // retrieving element informations\n  $query = '\nSELECT *\n  FROM '.IMAGES_TABLE.'\n  WHERE id IN ('.implode(',', $element_ids).')\n;';\n  $elements = query2array($query, 'id');\n\n  // retrieving category informations\n  $query = 'SELECT id, name, permalink, uppercats\n  FROM '.CATEGORIES_TABLE.'\n  WHERE id IN ('.implode(',', $category_ids).')';\n  $categories = query2array($query, 'id');\n\n  foreach ($comments as $comment)\n  {\n    if (!empty($elements[$comment['image_id']]['name']))\n    {\n      $name=$elements[$comment['image_id']]['name'];\n    }\n    else\n    {\n      $name=get_name_from_file($elements[$comment['image_id']]['file']);\n    }\n\n    // source of the thumbnail picture\n    $src_image = new SrcImage($elements[$comment['image_id']]);\n\n    // link to the full size picture\n    $url = make_picture_url(\n      array(\n        'category' => $categories[ $comment['category_id'] ],\n        'image_id' => $comment['image_id'],\n        'image_file' => $elements[$comment['image_id']]['file'],\n        )\n      );\n\n    $email = null;\n    if (!empty($comment['user_email']))\n    {\n      $email = $comment['user_email'];\n    }\n    else if (!empty($comment['email']))\n    {\n      $email = $comment['email'];\n    }\n\n    $tpl_comment = array(\n      'ID' => $comment['comment_id'],\n      'U_PICTURE' => $url,\n      'src_image' => $src_image,\n      'ALT' => $name,\n      'AUTHOR' => trigger_change('render_comment_author', $comment['author']),\n      'WEBSITE_URL' => $comment['website_url'],\n      'DATE'=>format_date($comment['date'], array('day_name','day','month','year','time')),\n      'CONTENT'=>trigger_change('render_comment_content',$comment['content']),\n      );\n\n    if (is_admin())\n    {\n      $tpl_comment['EMAIL'] = $email;\n    }\n\n    if (can_manage_comment('delete', $comment['author_id']))\n    {\n      $tpl_comment['U_DELETE'] = add_url_params(\n        $url_self,\n        array(\n          'delete' => $comment['comment_id'],\n          'pwg_token' => get_pwg_token(),\n          )\n        );\n    }\n\n    if (can_manage_comment('edit', $comment['author_id']))\n    {\n      $tpl_comment['U_EDIT'] = add_url_params(\n        $url_self,\n        array(\n          'edit' => $comment['comment_id']\n          )\n        );\n\n      if (isset($edit_comment) and ($comment['comment_id'] == $edit_comment))\n      {\n        $tpl_comment['IN_EDIT'] = true;\n        $key = get_ephemeral_key(2, $comment['image_id']);\n        $tpl_comment['KEY'] = $key;\n        $tpl_comment['IMAGE_ID'] = $comment['image_id'];\n        $tpl_comment['CONTENT'] = $comment['content'];\n        $tpl_comment['PWG_TOKEN'] = get_pwg_token();\n        $tpl_comment['U_CANCEL'] = $url_self;\n      }\n    }\n\n    if (can_manage_comment('validate', $comment['author_id']))\n    {\n      if ('true' != $comment['validated'])\n      {\n        $tpl_comment['U_VALIDATE'] = add_url_params(\n          $url_self,\n          array(\n            'validate'=> $comment['comment_id'],\n            'pwg_token' => get_pwg_token(),\n            )\n          );\n      }\n    }\n    $template->append('comments', $tpl_comment);\n  }\n}\n\n$derivative_params = trigger_change('get_comments_derivative_params', ImageStdParams::get_by_type(IMG_THUMB) );\n$template->assign( 'comment_derivative_params', $derivative_params );\n\n// include menubar\n$themeconf = $template->get_template_vars('themeconf');\nif (!isset($themeconf['hide_menu_on']) OR !in_array('theCommentsPage', $themeconf['hide_menu_on']))\n{\n  include( PHPWG_ROOT_PATH.'include/menubar.inc.php');\n}\n\n// +-----------------------------------------------------------------------+\n// |                           html code display                           |\n// +-----------------------------------------------------------------------+\ninclude(PHPWG_ROOT_PATH.'include/page_header.php');\ntrigger_notify('loc_end_comments');\nflush_page_messages();\nif (count($comments) > 0)  $template->assign_var_from_handle('COMMENT_LIST', 'comment_list');\n$template->pparse('comments');\ninclude(PHPWG_ROOT_PATH.'include/page_tail.php');\n?>\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "feed.php",
          "type": "blob",
          "size": 5.41796875,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\ndefine('PHPWG_ROOT_PATH','./');\ninclude_once(PHPWG_ROOT_PATH.'include/common.inc.php');\ninclude_once(PHPWG_ROOT_PATH.'include/functions_notification.inc.php');\n\n// +-----------------------------------------------------------------------+\n// |                               functions                               |\n// +-----------------------------------------------------------------------+\n\n/**\n * creates a Unix timestamp (number of seconds since 1970-01-01 00:00:00\n * GMT) from a MySQL datetime format (2005-07-14 23:01:37)\n *\n * @param string mysql datetime format\n * @return int timestamp\n */\nfunction datetime_to_ts($datetime)\n{\n  return strtotime($datetime);\n}\n\n/**\n * creates an ISO 8601 format date (2003-01-20T18:05:41+04:00) from Unix\n * timestamp (number of seconds since 1970-01-01 00:00:00 GMT)\n *\n * function copied from Dotclear project http://dotclear.net\n *\n * @param int timestamp\n * @return string ISO 8601 date format\n */\nfunction ts_to_iso8601($ts)\n{\n  $tz = date('O',$ts);\n  $tz = substr($tz, 0, -2).':'.substr($tz, -2);\n  return date('Y-m-d\\\\TH:i:s',$ts).$tz;\n}\n\n// +-----------------------------------------------------------------------+\n// |                            initialization                             |\n// +-----------------------------------------------------------------------+\n\ncheck_input_parameter('feed', $_GET, false, '/^[0-9a-z]{50}$/i');\n\n$feed_id= isset($_GET['feed']) ? $_GET['feed'] : '';\n$image_only=isset($_GET['image_only']);\n\n// echo '<pre>'.generate_key(50).'</pre>';\nif ( !empty($feed_id) )\n{\n  $query = '\nSELECT user_id,\n       last_check\n  FROM '.USER_FEED_TABLE.'\n  WHERE id = \\''.$feed_id.'\\'\n;';\n  $feed_row = pwg_db_fetch_assoc(pwg_query($query));\n  if ( empty($feed_row) )\n  {\n    page_not_found(l10n('Unknown feed identifier'));\n  }\n  if ($feed_row['user_id']!=$user['id'])\n  { // new user\n    $user = build_user( $feed_row['user_id'], true );\n  }\n}\nelse\n{\n  $image_only = true;\n  if (!is_a_guest())\n  {// auto session was created - so switch to guest\n    $user = build_user( $conf['guest_id'], true );\n  }\n}\n\n// Check the status now after the user has been loaded\ncheck_status(ACCESS_GUEST);\n\nlist($dbnow) = pwg_db_fetch_row(pwg_query('SELECT NOW();'));\n\ninclude_once(PHPWG_ROOT_PATH.'include/feedcreator.class.php');\n\nset_make_full_url();\n\n$rss = new UniversalFeedCreator();\n$rss->encoding=get_pwg_charset();\n$rss->title = $conf['gallery_title'];\n$rss->title.= ' (as '.stripslashes($user['username']).')';\n\n$rss->link = get_gallery_home_url();\n\n// +-----------------------------------------------------------------------+\n// |                            Feed creation                              |\n// +-----------------------------------------------------------------------+\n\n$news = array();\nif (!$image_only)\n{\n  $news = news($feed_row['last_check'], $dbnow, true, true);\n\n  if (count($news) > 0)\n  {\n    $item = new FeedItem();\n    $item->title = l10n('New on %s', format_date($dbnow) );\n    $item->link = get_gallery_home_url();\n\n    // content creation\n    $item->description = '<ul>';\n    foreach ($news as $line)\n    {\n      $item->description.= '<li>'.$line.'</li>';\n    }\n    $item->description.= '</ul>';\n    $item->descriptionHtmlSyndicated = true;\n\n    $item->date = ts_to_iso8601(datetime_to_ts($dbnow));\n    $item->author = $conf['rss_feed_author'];\n    $item->guid= sprintf('%s', $dbnow);;\n\n    $rss->addItem($item);\n\n    $query = '\nUPDATE '.USER_FEED_TABLE.'\n  SET last_check = \\''.$dbnow.'\\'\n  WHERE id = \\''.$feed_id.'\\'\n;';\n    pwg_query($query);\n  }\n}\n\nif ( !empty($feed_id) and empty($news) )\n{// update the last check from time to time to avoid deletion by maintenance tasks\n  if ( !isset($feed_row['last_check'])\n    or time()-datetime_to_ts($feed_row['last_check']) > 30*24*3600 )\n  {\n    $query = '\nUPDATE '.USER_FEED_TABLE.'\n  SET last_check = '.pwg_db_get_recent_period_expression(-15, $dbnow).'\n  WHERE id = \\''.$feed_id.'\\'\n;';\n    pwg_query($query);\n  }\n}\n\n$dates = get_recent_post_dates_array($conf['recent_post_dates']['RSS']);\n\nforeach($dates as $date_detail)\n{ // for each recent post date we create a feed item\n  $item = new FeedItem();\n  $date = $date_detail['date_available'];\n  $item->title = get_title_recent_post_date($date_detail);\n  $item->link = make_index_url(\n        array(\n          'chronology_field' => 'posted',\n          'chronology_style'=> 'monthly',\n          'chronology_view' => 'calendar',\n          'chronology_date' => explode('-', substr($date,0,10) )\n        )\n      );\n\n  $item->description .=\n    '<a href=\"'.make_index_url().'\">'.$conf['gallery_title'].'</a><br> ';\n\n  $item->description .= get_html_description_recent_post_date($date_detail);\n\n  $item->descriptionHtmlSyndicated = true;\n\n  $item->date = ts_to_iso8601(datetime_to_ts($date));\n  $item->author = $conf['rss_feed_author'];\n  $item->guid= sprintf('%s', 'pics-'.$date);;\n\n  $rss->addItem($item);\n}\n\n$fileName= PHPWG_ROOT_PATH.$conf['data_location'].'tmp';\nmkgetdir($fileName); // just in case\n$fileName.='/feed.xml';\n// send XML feed\necho $rss->saveFeed('RSS2.0', $fileName, true);\n?>"
        },
        {
          "name": "galleries",
          "type": "tree",
          "content": null
        },
        {
          "name": "i.php",
          "type": "blob",
          "size": 16.8017578125,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\ndefine('PHPWG_ROOT_PATH','./');\n\n// fast bootstrap - no db connection\ninclude(PHPWG_ROOT_PATH . 'include/config_default.inc.php');\n@include(PHPWG_ROOT_PATH. 'local/config/config.inc.php');\n\ndefined('PWG_LOCAL_DIR') or define('PWG_LOCAL_DIR', 'local/');\ndefined('PWG_DERIVATIVE_DIR') or define('PWG_DERIVATIVE_DIR', $conf['data_location'].'i/');\n\n@include(PHPWG_ROOT_PATH.PWG_LOCAL_DIR .'config/database.inc.php');\n\ninclude(PHPWG_ROOT_PATH . 'include/Logger.class.php');\n\n$logger = new Logger(array(\n  'directory' => PHPWG_ROOT_PATH . $conf['data_location'] . $conf['log_dir'],\n  'severity' => $conf['log_level'],\n  // we use an hashed filename to prevent direct file access, and we salt with\n  // the db_password instead of secret_key because the log must be usable in i.php\n  // (secret_key is in the database)\n  'filename' => 'log_' . date('Y-m-d') . '_' . sha1(date('Y-m-d') . $conf['db_password']) . '.txt',\n  ));\n\n\nfunction trigger_notify() {}\nfunction get_extension( $filename )\n{\n  return substr( strrchr( $filename, '.' ), 1, strlen ( $filename ) );\n}\n\nfunction mkgetdir($dir)\n{\n  if ( !is_dir($dir) )\n  {\n    global $conf;\n    if (substr(PHP_OS, 0, 3) == 'WIN')\n    {\n      $dir = str_replace('/', DIRECTORY_SEPARATOR, $dir);\n    }\n    $umask = umask(0);\n    $mkd = @mkdir($dir, $conf['chmod_value'], true);\n    umask($umask);\n    if ($mkd==false && !is_dir($dir) /* retest existence because of potential concurrent i.php with slow file systems*/)\n    {\n      return false;\n    }\n\n    $file = $dir.'/index.htm';\n    file_exists($file) or @file_put_contents( $file, 'Not allowed!' );\n  }\n  if ( !is_writable($dir) )\n  {\n    return false;\n  }\n  return true;\n}\n\n// end fast bootstrap\n\nfunction ierror($msg, $code)\n{\n  global $logger;\n  if ($code==301 || $code==302)\n  {\n    if (ob_get_length () !== FALSE)\n    {\n      ob_clean();\n    }\n    // default url is on html format\n    $url = html_entity_decode($msg);\n    $logger->debug($code . ' ' . $url, 'i.php', array(\n      'url' => $_SERVER['REQUEST_URI'],\n      ));\n    header('Request-URI: '.$url);\n    header('Content-Location: '.$url);\n    header('Location: '.$url);\n    exit;\n  }\n  if ($code>=400)\n  {\n    $protocol = $_SERVER[\"SERVER_PROTOCOL\"];\n    if ( ('HTTP/1.1' != $protocol) && ('HTTP/1.0' != $protocol) )\n      $protocol = 'HTTP/1.0';\n\n    header( \"$protocol $code $msg\", true, $code );\n  }\n  //todo improve\n  echo $msg;\n  $logger->error($code . ' ' . $msg, 'i.php', array(\n      'url' => $_SERVER['REQUEST_URI'],\n      ));\n  exit;\n}\n\nfunction time_step( &$step )\n{\n  $tmp = $step;\n  $step = microtime(true);\n  return intval(1000*($step - $tmp));\n}\n\nfunction url_to_size($s)\n{\n  $pos = strpos($s, 'x');\n  if ($pos===false)\n  {\n    return array((int)$s, (int)$s);\n  }\n  return array((int)substr($s,0,$pos), (int)substr($s,$pos+1));\n}\n\nfunction parse_custom_params($tokens)\n{\n  if (count($tokens)<1)\n    ierror('Empty array while parsing Sizing', 400);\n\n  $crop = 0;\n  $min_size = null;\n\n  $token = array_shift($tokens);\n  if ($token[0]=='s')\n  {\n    $size = url_to_size( substr($token,1) );\n  }\n  elseif ($token[0]=='e')\n  {\n    $crop = 1;\n    $size = $min_size = url_to_size( substr($token,1) );\n  }\n  else\n  {\n    $size = url_to_size( $token );\n    if (count($tokens)<2)\n      ierror('Sizing arr', 400);\n\n    $token = array_shift($tokens);\n    $crop = char_to_fraction($token);\n\n    $token = array_shift($tokens);\n    $min_size = url_to_size( $token );\n  }\n  return new DerivativeParams( new SizingParams($size, $crop, $min_size) );\n}\n\nfunction parse_request()\n{\n  global $conf, $page;\n\n  if ( $conf['question_mark_in_urls']==false and\n       isset($_SERVER[\"PATH_INFO\"]) and !empty($_SERVER[\"PATH_INFO\"]) )\n  {\n    $req = $_SERVER[\"PATH_INFO\"];\n    $req = str_replace('//', '/', $req);\n    $path_count = count( explode('/', $req) );\n    $page['root_path'] = PHPWG_ROOT_PATH.str_repeat('../', $path_count-1);\n  }\n  else\n  {\n    $req = $_SERVER[\"QUERY_STRING\"];\n    if ($pos=strpos($req, '&'))\n    {\n      $req = substr($req, 0, $pos);\n    }\n    $req = rawurldecode($req);\n    /*foreach (array_keys($_GET) as $keynum => $key)\n    {\n      $req = $key;\n      break;\n    }*/\n    $page['root_path'] = PHPWG_ROOT_PATH;\n  }\n\n  $req = ltrim($req, '/');\n\n  foreach (preg_split('#/+#', $req) as $token)\n  {\n    preg_match($conf['sync_chars_regex'], $token) or ierror('Invalid chars in request', 400);\n  }\n\n  $page['derivative_path'] = PHPWG_ROOT_PATH.PWG_DERIVATIVE_DIR.$req;\n\n  $pos = strrpos($req, '.');\n  $pos!== false || ierror('Missing .', 400);\n  $ext = substr($req, $pos);\n  $page['derivative_ext'] = $ext;\n  $req = substr($req, 0, $pos);\n\n  $pos = strrpos($req, '-');\n  $pos!== false || ierror('Missing -', 400);\n  $deriv = substr($req, $pos+1);\n  $req = substr($req, 0, $pos);\n\n  $deriv = explode('_', $deriv);\n  foreach (ImageStdParams::get_defined_type_map() as $type => $params)\n  {\n    if ( derivative_to_url($type) == $deriv[0])\n    {\n      $page['derivative_type'] = $type;\n      $page['derivative_params'] = $params;\n      break;\n    }\n  }\n\n  if (!isset($page['derivative_type']))\n  {\n    if (derivative_to_url(IMG_CUSTOM) == $deriv[0])\n    {\n      $page['derivative_type'] = IMG_CUSTOM;\n    }\n    else\n    {\n      ierror('Unknown parsing type', 400);\n    }\n  }\n  array_shift($deriv);\n\n  if ($page['derivative_type'] == IMG_CUSTOM)\n  {\n    $params = $page['derivative_params'] = parse_custom_params($deriv);\n    ImageStdParams::apply_global($params);\n\n    if ($params->sizing->ideal_size[0] < 20 or $params->sizing->ideal_size[1] < 20)\n    {\n      ierror('Invalid size', 400);\n    }\n    if ($params->sizing->max_crop < 0 or $params->sizing->max_crop > 1)\n    {\n      ierror('Invalid crop', 400);\n    }\n    $greatest = ImageStdParams::get_by_type(IMG_XXLARGE);\n\n    $key = array();\n    $params->add_url_tokens($key);\n    $key = implode('_', $key);\n    if (!isset(ImageStdParams::$custom[$key]))\n    {\n      ierror('Size not allowed', 403);\n    }\n  }\n\n  if (is_file(PHPWG_ROOT_PATH.$req.$ext))\n  {\n    $req = './'.$req; // will be used to match #iamges.path\n  }\n  elseif (is_file(PHPWG_ROOT_PATH.'../'.$req.$ext))\n  {\n    $req = '../'.$req;\n  }\n\n  $page['src_location'] = $req.$ext;\n  $page['src_path'] = PHPWG_ROOT_PATH.$page['src_location'];\n  $page['src_url'] = $page['root_path'].$page['src_location'];\n}\n\nfunction try_switch_source(DerivativeParams $params, $original_mtime)\n{\n  global $page;\n  if (!isset($page['original_size']))\n    return false;\n\n  $original_size = $page['original_size'];\n  if ($page['rotation_angle']==90 || $page['rotation_angle']==270)\n  {\n    $tmp = $original_size[0];\n    $original_size[0] = $original_size[1];\n    $original_size[1] = $tmp;\n  }\n  $dsize = $params->compute_final_size($original_size);\n\n  $use_watermark = $params->use_watermark;\n  if ($use_watermark)\n  {\n    $use_watermark = $params->will_watermark($dsize);\n  }\n\n  $candidates = array();\n  foreach(ImageStdParams::get_defined_type_map() as $candidate)\n  {\n    if ($candidate->type == $params->type)\n      continue;\n    if ($candidate->use_watermark != $use_watermark)\n      continue;\n    if ($candidate->max_width() < $params->max_width() || $candidate->max_height() < $params->max_height())\n      continue;\n    $candidate_size = $candidate->compute_final_size($original_size);\n    if ($dsize != $params->compute_final_size($candidate_size))\n      continue;\n\n    if ($params->sizing->max_crop==0)\n    {\n      if ($candidate->sizing->max_crop!=0)\n        continue;\n    }\n    else\n    {\n      if ($use_watermark && $candidate->use_watermark)\n        continue; //a square that requires watermark should not be generated from a larger derivative with watermark, because if the watermark is not centered on the large image, it will be cropped.\n      if ($candidate->sizing->max_crop!=0)\n        continue; // this could be optimized\n      if ($candidate_size[0] < $params->sizing->min_size[0] || $candidate_size[1] < $params->sizing->min_size[1] )\n        continue;\n    }\n    $candidates[] = $candidate;\n  }\n\n  foreach( array_reverse($candidates) as $candidate)\n  {\n    $candidate_path = $page['derivative_path'];\n    $candidate_path = str_replace( '-'.derivative_to_url($params->type), '-'.derivative_to_url($candidate->type), $candidate_path);\n    $candidate_mtime = @filemtime($candidate_path);\n    if ($candidate_mtime === false\n      || $candidate_mtime < $original_mtime\n      || $candidate_mtime < $candidate->last_mod_time)\n      continue;\n    $params->use_watermark = false;\n    $params->sharpen = min(1, $params->sharpen);\n    $page['src_path'] = $candidate_path;\n    $page['src_url'] = $page['root_path'] . substr($candidate_path, strlen(PHPWG_ROOT_PATH));\n    $page['rotation_angle'] = 0;\n\t\treturn true;\n  }\n\treturn false;\n}\n\nfunction send_derivative($expires)\n{\n  global $page;\n\n  if (isset($_GET['ajaxload']) and $_GET['ajaxload'] == 'true')\n  {\n    include_once(PHPWG_ROOT_PATH.'include/functions_cookie.inc.php');\n    include_once(PHPWG_ROOT_PATH.'include/functions_url.inc.php');\n\n    echo json_encode( array( 'url'=>embellish_url(get_absolute_root_url().$page['derivative_path']) ) );\n    return;\n  }\n  $fp = fopen($page['derivative_path'], 'rb');\n\n  $fstat = fstat($fp);\n  header('Last-Modified: '.gmdate('D, d M Y H:i:s', $fstat['mtime']).' GMT');\n  if ($expires!==false)\n  {\n    header('Expires: '.gmdate('D, d M Y H:i:s', $expires).' GMT');\n  }\n  header('Connection: close');\n\n  $ctype=\"application/octet-stream\";\n  switch (strtolower($page['derivative_ext']))\n  {\n    case \".jpe\": case \".jpeg\": case \".jpg\": $ctype=\"image/jpeg\"; break;\n    case \".png\": $ctype=\"image/png\"; break;\n    case \".gif\": $ctype=\"image/gif\"; break;\n    case \".webp\": $ctype=\"image/webp\"; break;\n  }\n  header(\"Content-Type: $ctype\");\n\n  fpassthru($fp);\n  fclose($fp);\n}\n\n$page=array();\n$begin = $step = microtime(true);\n$timing=array();\nforeach( explode(',','load,rotate,crop,scale,sharpen,watermark,save,send') as $k )\n{\n  $timing[$k] = '';\n}\n\ninclude_once(PHPWG_ROOT_PATH .'include/dblayer/functions_'.$conf['dblayer'].'.inc.php');\ninclude_once( PHPWG_ROOT_PATH .'/include/derivative_params.inc.php');\ninclude_once( PHPWG_ROOT_PATH .'/include/derivative_std_params.inc.php');\n\ntry\n{\n  pwg_db_connect($conf['db_host'], $conf['db_user'],\n                 $conf['db_password'], $conf['db_base']);\n}\ncatch (Exception $e)\n{\n  $logger->error($e->getMessage(), 'i.php');\n}\npwg_db_check_charset();\n\nlist($conf['derivatives']) = pwg_db_fetch_row(pwg_query('SELECT value FROM '.$prefixeTable.'config WHERE param=\\'derivatives\\''));\nImageStdParams::load_from_db();\n\n\nparse_request();\n//var_export($page);\n\n$params = $page['derivative_params'];\n\n$src_mtime = @filemtime($page['src_path']);\nif ($src_mtime === false)\n{\n  ierror('Source not found', 404);\n}\n\n$need_generate = false;\n$derivative_mtime = @filemtime($page['derivative_path']);\nif ($derivative_mtime === false or\n    $derivative_mtime < $src_mtime or\n    $derivative_mtime < $params->last_mod_time)\n{\n  $need_generate = true;\n}\n\n$expires=false;\n$now = time();\nif ( isset($_GET['b']) )\n{\n  $expires = $now + 100;\n  header(\"Cache-control: no-store, max-age=100\");\n}\nelseif ( $now > (max($src_mtime, $params->last_mod_time) + 24*3600) )\n{// somehow arbitrary - if derivative params or src didn't change for the last 24 hours, we send an expire header for several days\n  $expires = $now + 10*24*3600;\n}\n\nif (!$need_generate)\n{\n  if ( isset( $_SERVER['HTTP_IF_MODIFIED_SINCE'] )\n    and strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE']) == $derivative_mtime)\n  {// send the last mod time of the file back\n    header('Last-Modified: '.gmdate('D, d M Y H:i:s', $derivative_mtime).' GMT', true, 304);\n    header('Expires: '.gmdate('D, d M Y H:i:s', time()+10*24*3600).' GMT', true, 304);\n    exit;\n  }\n  send_derivative($expires);\n  exit;\n}\n\ninclude_once(PHPWG_ROOT_PATH . 'admin/include/image.class.php');\n$page['coi'] = null;\nif (strpos($page['src_location'], '/pwg_representative/')===false\n    && strpos($page['src_location'], 'themes/')===false\n    && strpos($page['src_location'], 'plugins/')===false)\n{\n  try\n  {\n    $query = '\nSELECT *\n  FROM '.$prefixeTable.'images\n  WHERE path=\\''.addslashes($page['src_location']).'\\'\n;';\n\n    if ( ($row=pwg_db_fetch_assoc(pwg_query($query))) )\n    {\n      if (isset($row['width']))\n      {\n        $page['original_size'] = array($row['width'],$row['height']);\n      }\n      $page['coi'] = $row['coi'];\n\n      if (!isset($row['rotation']))\n      {\n        $page['rotation_angle'] = pwg_image::get_rotation_angle($page['src_path']);\n\n        single_update(\n          $prefixeTable.'images',\n          array('rotation' => pwg_image::get_rotation_code_from_angle($page['rotation_angle'])),\n          array('id' => $row['id'])\n          );\n      }\n      else\n      {\n        $page['rotation_angle'] = pwg_image::get_rotation_angle_from_code($row['rotation']);\n      }\n    }\n    if (!$row)\n    {\n      ierror('Db file path not found', 404);\n    }\n  }\n  catch (Exception $e)\n  {\n    $logger->error($e->getMessage(), 'i.php');\n  }\n}\nelse\n{\n  $page['rotation_angle'] = 0;\n}\npwg_db_close();\n\nif (!try_switch_source($params, $src_mtime) && $params->type==IMG_CUSTOM)\n{\n\t$sharpen = 0;\n\tforeach (ImageStdParams::get_defined_type_map() as $std_params)\n\t{\n\t\t$sharpen += $std_params->sharpen;\n\t}\n\t$params->sharpen = round($sharpen / count(ImageStdParams::get_defined_type_map()) );\n}\n\nif (!mkgetdir(dirname($page['derivative_path'])))\n{\n  ierror(\"dir create error\", 500);\n}\n\nignore_user_abort(true);\n@set_time_limit(0);\n\n$image = new pwg_image($page['src_path']);\n$timing['load'] = time_step($step);\n\n$changes = 0;\n\n// rotate\nif (0 != $page['rotation_angle'])\n{\n  $image->rotate($page['rotation_angle']);\n  $changes++;\n  $timing['rotate'] = time_step($step);\n}\n\n// Crop & scale\n$o_size = $d_size = array($image->get_width(),$image->get_height());\n$params->sizing->compute($o_size , $page['coi'], $crop_rect, $scaled_size );\nif ($crop_rect)\n{\n  $changes++;\n  $image->crop( $crop_rect->width(), $crop_rect->height(), $crop_rect->l, $crop_rect->t);\n  $timing['crop'] = time_step($step);\n}\n\nif ($scaled_size)\n{\n  $changes++;\n  $image->resize( $scaled_size[0], $scaled_size[1] );\n  $d_size = $scaled_size;\n  $timing['scale'] = time_step($step);\n}\n\nif ($params->sharpen)\n{\n  $changes += $image->sharpen( $params->sharpen );\n  $timing['sharpen'] = time_step($step);\n}\n\nif ($params->will_watermark($d_size))\n{\n  $wm = ImageStdParams::get_watermark();\n  $wm_image = new pwg_image(PHPWG_ROOT_PATH.$wm->file);\n  $wm_size = array($wm_image->get_width(),$wm_image->get_height());\n  if ($d_size[0]<$wm_size[0] or $d_size[1]<$wm_size[1])\n  {\n    $wm_scaling_params = SizingParams::classic($d_size[0], $d_size[1]);\n    $wm_scaling_params->compute($wm_size, null, $tmp, $wm_scaled_size);\n    $wm_size = $wm_scaled_size;\n    $wm_image->resize( $wm_scaled_size[0], $wm_scaled_size[1] );\n  }\n  $x = round( ($wm->xpos/100)*($d_size[0]-$wm_size[0]) );\n  $y = round( ($wm->ypos/100)*($d_size[1]-$wm_size[1]) );\n  if ($image->compose($wm_image, $x, $y, $wm->opacity))\n  {\n    $changes++;\n    if ($wm->xrepeat || $wm->yrepeat)\n    {\n      $xpad = $wm_size[0] + max(30, round($wm_size[0]/4));\n      $ypad = $wm_size[1] + max(30, round($wm_size[1]/4));\n\n      for($i=-$wm->xrepeat; $i<=$wm->xrepeat; $i++)\n      {\n        for($j=-$wm->yrepeat; $j<=$wm->yrepeat; $j++)\n        {\n          if (!$i && !$j) continue;\n          $x2 = $x + $i * $xpad;\n          $y2 = $y + $j * $ypad;\n          if ($x2>=0 && $x2+$wm_size[0]<$d_size[0] &&\n              $y2>=0 && $y2+$wm_size[1]<$d_size[1] )\n            if (!$image->compose($wm_image, $x2, $y2, $wm->opacity))\n              break;\n        }\n      }\n    }\n  }\n  $wm_image->destroy();\n  $timing['watermark'] = time_step($step);\n}\n\n// no change required - redirect to source\nif (!$changes)\n{\n  header(\"X-i: No change\");\n  ierror( $page['src_url'], 301);\n}\n\nif ($d_size[0]*$d_size[1] < $conf['derivatives_strip_metadata_threshold'])\n{// strip metadata for small images\n  $image->strip();\n}\n\n$image->set_compression_quality( ImageStdParams::$quality );\n$image->write( $page['derivative_path'] );\n$image->destroy();\n@chmod($page['derivative_path'], 0644);\n$timing['save'] = time_step($step);\n\nsend_derivative($expires);\n$timing['send'] = time_step($step);\n\n$timing['total'] = time_step($begin);\n\nif ($logger->severity() >= Logger::DEBUG)\n{\n  $logger->debug('', 'i.php', array(\n    'src_path' => basename($page['src_path']),\n    'derivative_path' => basename($page['derivative_path']),\n    'o_size' => $o_size[0] . ' ' . $o_size[1] . ' ' . ($o_size[0]*$o_size[1]),\n    'd_size' => $d_size[0] . ' ' . $d_size[1] . ' ' . ($d_size[0]*$d_size[1]),\n    'mem_usage' => function_exists('memory_get_peak_usage') ? round( memory_get_peak_usage()/(1024*1024), 1) : '',\n    'timing' => $timing,\n    ));\n}\n"
        },
        {
          "name": "identification.php",
          "type": "blob",
          "size": 4.3388671875,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n//--------------------------------------------------------------------- include\ndefine('PHPWG_ROOT_PATH','./');\ninclude_once( PHPWG_ROOT_PATH.'include/common.inc.php' );\n\n// +-----------------------------------------------------------------------+\n// | Check Access and exit when user status is not ok                      |\n// +-----------------------------------------------------------------------+\ncheck_status(ACCESS_FREE);\n\n// but if the user is already identified, we redirect to gallery home\n// instead of displaying the log in form\nif (!is_a_guest())\n{\n  redirect(get_gallery_home_url());\n}\n\ntrigger_notify('loc_begin_identification');\n\n//-------------------------------------------------------------- identification\n\n// security (level 1): the redirect must occur within Piwigo, so the\n// redirect param must start with the relative home url\nif (isset($_POST['redirect']))\n{\n  $_POST['redirect_decoded'] = urldecode($_POST['redirect']);\n}\ncheck_input_parameter('redirect_decoded', $_POST, false, '{^'.preg_quote(cookie_path()).'}');\n\n$redirect_to = '';\nif ( !empty($_GET['redirect']) )\n{\n  $redirect_to = urldecode($_GET['redirect']);\n  if ( $conf['guest_access'] and !isset($_GET['hide_redirect_error']))\n  {\n    $page['errors'][] = l10n('You are not authorized to access the requested page');\n  }\n}\n\nif (isset($_POST['login']))\n{\n  if (!isset($_COOKIE[session_name()]))\n  {\n    $page['errors'][] = l10n('Cookies are blocked or not supported by your browser. You must enable cookies to connect.');\n  }\n  else\n  {\n    if ($conf['insensitive_case_logon'] == true)\n    {\n      $_POST['username'] = search_case_username($_POST['username']);\n    }\n    \n    $redirect_to = isset($_POST['redirect']) ? urldecode($_POST['redirect']) : '';\n    $remember_me = isset($_POST['remember_me']) and $_POST['remember_me']==1;\n\n    if ( try_log_user($_POST['username'], $_POST['password'], $remember_me) )\n    {\n      // security (level 2): force redirect within Piwigo. We redirect to\n      // absolute root url, including http(s)://, without the cookie path,\n      // concatenated with $_POST['redirect'] param.\n      //\n      // example:\n      // {redirect (raw) = /piwigo/git/admin.php}\n      // {get_absolute_root_url = http://localhost/piwigo/git/}\n      // {cookie_path = /piwigo/git/}\n      // {host = http://localhost}\n      // {redirect (final) = http://localhost/piwigo/git/admin.php}\n      $root_url = get_absolute_root_url();\n\n      redirect(\n        empty($redirect_to)\n          ? get_gallery_home_url()\n          : substr($root_url, 0, strlen($root_url) - strlen(cookie_path())).$redirect_to\n        );\n    }\n    else\n    {\n      $page['errors'][] = l10n('Invalid username or password!');\n    }\n  }\n}\n\n//----------------------------------------------------- template initialization\n//\n// Start output of page\n//\n$title = l10n('Identification');\n$page['body_id'] = 'theIdentificationPage';\n\n$template->set_filenames( array('identification'=>'identification.tpl') );\n\n$template->assign(\n  array(\n    'U_REDIRECT' => $redirect_to,\n\n    'F_LOGIN_ACTION' => get_root_url().'identification.php',\n    'authorize_remembering' => $conf['authorize_remembering'],\n    ));\n\nif (!$conf['gallery_locked'] && $conf['allow_user_registration'])\n{\n  $template->assign('U_REGISTER', get_root_url().'register.php' );\n}\n\nif (!$conf['gallery_locked'])\n{\n  $template->assign('U_LOST_PASSWORD', get_root_url().'password.php' );\n}\n\n// include menubar\n$themeconf = $template->get_template_vars('themeconf');\nif (!$conf['gallery_locked'] && (!isset($themeconf['hide_menu_on']) OR !in_array('theIdentificationPage', $themeconf['hide_menu_on'])))\n{\n  include( PHPWG_ROOT_PATH.'include/menubar.inc.php');\n}\n\n//----------------------------------------------------------- html code display\ninclude(PHPWG_ROOT_PATH.'include/page_header.php');\ntrigger_notify('loc_end_identification');\nflush_page_messages();\n$template->pparse('identification');\ninclude(PHPWG_ROOT_PATH.'include/page_tail.php');\n?>\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.php",
          "type": "blob",
          "size": 11.1357421875,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n//--------------------------------------------------------------------- include\ndefine('PHPWG_ROOT_PATH','./');\ninclude_once( PHPWG_ROOT_PATH.'include/common.inc.php' );\ninclude(PHPWG_ROOT_PATH.'include/section_init.inc.php');\n\n// Check Access and exit when user status is not ok\ncheck_status(ACCESS_GUEST);\n\n\n// access authorization check\nif (isset($page['category']))\n{\n  check_restrictions($page['category']['id']);\n}\nif ($page['start']>0 && $page['start']>=count($page['items']))\n{\n  page_not_found('', duplicate_index_url(array('start'=>0)));\n}\n\ntrigger_notify('loc_begin_index');\n\n//---------------------------------------------- change of image display order\nif (isset($_GET['image_order']))\n{\n  if ( (int)$_GET['image_order'] > 0)\n  {\n    pwg_set_session_var('image_order', (int)$_GET['image_order']);\n  }\n  else\n  {\n    pwg_unset_session_var('image_order');\n  }\n  redirect(\n    duplicate_index_url(\n      array(),        // nothing to redefine\n      array('start')  // changing display order goes back to section first page\n      )\n    );\n}\nif (isset($_GET['display']))\n{\n  $page['meta_robots']['noindex']=1;\n  if (array_key_exists($_GET['display'], ImageStdParams::get_defined_type_map()))\n  {\n    pwg_set_session_var('index_deriv', $_GET['display']);\n  }\n}\n\n//-------------------------------------------------------------- initialization\n// navigation bar\n$page['navigation_bar'] = array();\nif (count($page['items']) > $page['nb_image_page'])\n{\n  $page['navigation_bar'] = create_navigation_bar(\n    duplicate_index_url(array(), array('start')),\n    count($page['items']),\n    $page['start'],\n    $page['nb_image_page'],\n    true, 'start'\n    );\n}\n\n$template->assign('thumb_navbar', $page['navigation_bar'] );\n\n// caddie filling :-)\nif (isset($_GET['caddie']))\n{\n  fill_caddie($page['items']);\n  redirect(duplicate_index_url());\n}\n\nif (isset($page['is_homepage']) and $page['is_homepage'])\n{\n  $canonical_url = get_gallery_home_url();\n}\nelse\n{\n  $start = $page['nb_image_page'] * round($page['start'] / $page['nb_image_page']);\n  if ($start>0 && $start >= count($page['items']) )\n  {\n    $start -= $page['nb_image_page'];\n  }\n  $canonical_url = duplicate_index_url(array('start' => $start));\n}\n$template->assign('U_CANONICAL', $canonical_url);\n\n//-------------------------------------------------------------- page title\n$title = $page['title'];\n$template_title = $page['section_title'];\n$nb_items = count($page['items']);\n$template->assign('TITLE', $template_title);\n$template->assign('NB_ITEMS', $nb_items);\n\n//-------------------------------------------------------------- menubar\ninclude( PHPWG_ROOT_PATH.'include/menubar.inc.php');\n\n$template->set_filename('index', 'index.tpl');\n\n// +-----------------------------------------------------------------------+\n// |  index page (categories, thumbnails, search, calendar, random, etc.)  |\n// +-----------------------------------------------------------------------+\nif ( empty($page['is_external']) )\n{\n  //----------------------------------------------------- template initialization\n  $page['body_id'] = 'theCategoryPage';\n\n  if (isset($page['flat']) or isset($page['chronology_field']))\n  {\n    $template->assign(\n      'U_MODE_NORMAL',\n      duplicate_index_url( array(), array('chronology_field', 'start', 'flat') )\n      );\n  }\n\n  if ($conf['index_flat_icon'] and !isset($page['flat']) and 'categories' == $page['section'])\n  {\n    $template->assign(\n      'U_MODE_FLAT',\n      duplicate_index_url(array('flat' => ''), array('start', 'chronology_field'))\n      );\n  }\n\n  if (!isset($page['chronology_field']))\n  {\n    $chronology_params = array(\n      'chronology_field' => 'created',\n      'chronology_style' => 'monthly',\n      'chronology_view' => 'list',\n      );\n    if ($conf['index_created_date_icon'])\n    {\n      $template->assign(\n        'U_MODE_CREATED',\n        duplicate_index_url( $chronology_params, array('start', 'flat') )\n        );\n    }\n    if ($conf['index_posted_date_icon'])\n    {\n      $chronology_params['chronology_field'] = 'posted';\n      $template->assign(\n        'U_MODE_POSTED',\n        duplicate_index_url( $chronology_params, array('start', 'flat') )\n        );\n    }\n  }\n  else\n  {\n    if ($page['chronology_field'] == 'created')\n    {\n      $chronology_field = 'posted';\n    }\n    else\n    {\n      $chronology_field = 'created';\n    }\n    if ($conf['index_'.$chronology_field.'_date_icon'])\n    {\n      $url = duplicate_index_url(\n                array('chronology_field'=>$chronology_field ),\n                array('chronology_date', 'start', 'flat')\n              );\n      $template->assign(\n          'U_MODE_'.strtoupper($chronology_field),\n          $url\n        );\n    }\n  }\n\n  include(PHPWG_ROOT_PATH.'include/search_filters.inc.php');\n\n  if ('categories' == $page['section'] and isset($page['category']) and !isset($page['combined_categories']))\n  {\n    $template->assign(\n      array(\n        'SEARCH_IN_SET_BUTTON' => $conf['index_search_in_set_button'],\n        'SEARCH_IN_SET_ACTION' => $conf['index_search_in_set_action'],\n        'SEARCH_IN_SET_URL' => get_root_url().'search.php?cat_id='.$page['category']['id'],\n      )\n    );\n  }\n\n  if (isset($page['body_data']['tag_ids']))\n  {\n    $template->assign(\n      array(\n        'SEARCH_IN_SET_BUTTON' => $conf['index_search_in_set_button'],\n        'SEARCH_IN_SET_ACTION' => $conf['index_search_in_set_action'],\n        'SEARCH_IN_SET_URL' => get_root_url().'search.php?tag_id='.implode(',', $page['body_data']['tag_ids']),\n      )\n    );\n  }\n\n  if (isset($page['category']) and is_admin() and $conf['index_edit_icon'])\n  {\n    $template->assign(\n      'U_EDIT',\n      get_root_url().'admin.php?page=album-'.$page['category']['id']\n      );\n  }\n\n  if (is_admin() and !empty($page['items']) and $conf['index_caddie_icon'])\n  {\n    $template->assign(\n      'U_CADDIE',\n       add_url_params(duplicate_index_url(), array('caddie'=>1) )\n      );\n  }\n\n  if ( $page['section']=='search' and $page['start']==0 and\n      !isset($page['chronology_field']) and isset($page['qsearch_details']) )\n  {\n    $cats = array_merge(\n        (array)@$page['qsearch_details']['matching_cats_no_images'],\n        (array)@$page['qsearch_details']['matching_cats'] );\n    if (count($cats))\n    {\n      usort($cats, 'name_compare');\n      $hints = array();\n      foreach ( $cats as $cat )\n      {\n        $hints[] = get_cat_display_name( array($cat), '' );\n      }\n      $template->assign( 'category_search_results', $hints);\n    }\n\n    $tags = (array)@$page['qsearch_details']['matching_tags'];\n    foreach ( $tags as $tag )\n    {\n      $tag['URL'] = make_index_url(array('tags'=>array($tag)));\n      $template->append( 'tag_search_results', $tag);\n    }\n    \n    if (empty($page['items']))\n    {\n      $template->append( 'no_search_results', htmlspecialchars($page['qsearch_details']['q']));\n    }\n    elseif (!empty($page['qsearch_details']['unmatched_terms']))\n    {\n      $template->assign( 'no_search_results', array_map('htmlspecialchars', $page['qsearch_details']['unmatched_terms']));\n    }\n  }\n\n  // image order\n  if ( $conf['index_sort_order_input']\n      and count($page['items']) > 0\n      and $page['section'] != 'most_visited'\n      and $page['section'] != 'best_rated')\n  {\n    $preferred_image_orders = get_category_preferred_image_orders();\n    $order_idx = pwg_get_session_var( 'image_order', 0 );\n    \n    // get first order field and direction\n    $first_order = substr($conf['order_by'], 9);\n    if (($pos = strpos($first_order, ',')) !== false)\n    {\n      $first_order = substr($first_order, 0, $pos);\n    }\n    $first_order = trim($first_order);\n    \n    $url = add_url_params(\n            duplicate_index_url(),\n            array('image_order' => '')\n          );\n    $tpl_orders = array();\n    $order_selected = false;\n    \n    foreach ($preferred_image_orders as $order_id => $order)\n    {\n      if ($order[2])\n      {\n        // force select if the field is the first field of order_by\n        if (!$order_selected && $order[1]==$first_order)\n        {\n          $order_idx = $order_id;\n          $order_selected = true;\n        }\n        \n        $tpl_orders[ $order_id ] = array(\n          'DISPLAY' => $order[0],\n          'URL' => $url.$order_id,\n          'SELECTED' => $order_idx==$order_id,\n          );\n      }\n    }\n    \n    $tpl_orders[0]['SELECTED'] = !$order_selected; // unselect \"Default\" if another one is selected\n    $template->assign('image_orders', $tpl_orders);\n  }\n\n  // category comment\n  if (($page['start']==0 or $conf['album_description_on_all_pages']) and !isset($page['chronology_field']) and !empty($page['comment']) )\n  {\n    $template->assign('CONTENT_DESCRIPTION', $page['comment'] );\n  }\n\n  if ( isset($page['category']['count_categories']) and $page['category']['count_categories']==0 )\n  {// count_categories might be computed by menubar - if the case unassign flat link if no sub albums\n    $template->clear_assign('U_MODE_FLAT');\n  }\n\n  //------------------------------------------------------ main part : thumbnails\n  if ( 0==$page['start']\n    and !isset($page['flat'])\n    and !isset($page['chronology_field'])\n    and ('recent_cats'==$page['section'] or 'categories'==$page['section'])\n    and (!isset($page['category']['count_categories']) or $page['category']['count_categories']>0 )\n  )\n  {\n    include(PHPWG_ROOT_PATH.'include/category_cats.inc.php');\n  }\n\n  if ( !empty($page['items']) )\n  {\n    include(PHPWG_ROOT_PATH.'include/category_default.inc.php');\n\n    if ($conf['index_sizes_icon'])\n    {\n      $url = add_url_params(\n        duplicate_index_url(),\n        array('display' => '')\n        );\n\n      $selected_type = $template->get_template_vars('derivative_params')->type;\n      $template->clear_assign( 'derivative_params' );\n      $type_map = ImageStdParams::get_defined_type_map();\n      unset($type_map[IMG_XXLARGE], $type_map[IMG_XLARGE]);\n\n      foreach($type_map as $params)\n      {\n        $template->append(\n          'image_derivatives',\n          array(\n            'DISPLAY' => l10n($params->type),\n            'URL' => $url.$params->type,\n            'SELECTED' => ($params->type == $selected_type ? true:false),\n            )\n          );\n      }\n    }\n  }\n\n  // slideshow\n  // execute after init thumbs in order to have all picture informations\n  if (!empty($page['cat_slideshow_url']))\n  {\n    if (isset($_GET['slideshow']))\n    {\n      redirect($page['cat_slideshow_url']);\n    }\n    elseif ($conf['index_slideshow_icon'])\n    {\n      $template->assign('U_SLIDESHOW', $page['cat_slideshow_url']);\n    }\n  }\n}\n\n//------------------------------------------------------------ end\ninclude(PHPWG_ROOT_PATH.'include/page_header.php');\ntrigger_notify('loc_end_index');\nflush_page_messages();\n$template->parse_index_buttons();\n$template->pparse('index');\n\n//------------------------------------------------------------ log informations\npwg_log();\ninclude(PHPWG_ROOT_PATH.'include/page_tail.php');\n?>\n"
        },
        {
          "name": "install.php",
          "type": "blob",
          "size": 15.4150390625,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n//----------------------------------------------------------- include\ndefine('PHPWG_ROOT_PATH','./');\n\n// @set_magic_quotes_runtime(0); // Disable magic_quotes_runtime\n//\n// addslashes to vars if magic_quotes_gpc is off this is a security\n// precaution to prevent someone trying to break out of a SQL statement.\n//\nif(function_exists('get_magic_quotes_gpc') && !@get_magic_quotes_gpc() )\n{\n  if( is_array($_POST) )\n  {\n    foreach($_POST as $k => $v)\n    {\n      if( is_array($_POST[$k]) )\n      {\n        foreach($_POST[$k] as $k2 => $v2)\n        {\n          $_POST[$k][$k2] = addslashes($v2);\n        }\n        @reset($_POST[$k]);\n      }\n      else\n      {\n        $_POST[$k] = addslashes($v);\n      }\n    }\n    @reset($_POST);\n  }\n\n  if( is_array($_GET) )\n  {\n    foreach($_GET as $k => $v )\n    {\n      if( is_array($_GET[$k]) )\n      {\n        foreach($_GET[$k] as $k2 => $v2)\n        {\n          $_GET[$k][$k2] = addslashes($v2);\n        }\n        @reset($_GET[$k]);\n      }\n      else\n      {\n        $_GET[$k] = addslashes($v);\n      }\n    }\n    @reset($_GET);\n  }\n\n  if( is_array($_COOKIE) )\n  {\n    foreach($_COOKIE as $k => $v)\n    {\n      if( is_array($_COOKIE[$k]) )\n      {\n        foreach($_COOKIE[$k] as $k2 => $v2)\n        {\n          $_COOKIE[$k][$k2] = addslashes($v2);\n        }\n        @reset($_COOKIE[$k]);\n      }\n      else\n      {\n        $_COOKIE[$k] = addslashes($v);\n      }\n    }\n    @reset($_COOKIE);\n  }\n}\n\n//----------------------------------------------------- variable initialization\n\ndefine('DEFAULT_PREFIX_TABLE', 'piwigo_');\n\nif (isset($_POST['install']))\n{\n  $prefixeTable = $_POST['prefix'];\n}\nelse\n{\n  $prefixeTable = DEFAULT_PREFIX_TABLE;\n}\n\ninclude(PHPWG_ROOT_PATH . 'include/config_default.inc.php');\n@include(PHPWG_ROOT_PATH. 'local/config/config.inc.php');\ndefined('PWG_LOCAL_DIR') or define('PWG_LOCAL_DIR', 'local/');\n\ninclude(PHPWG_ROOT_PATH . 'include/functions.inc.php');\ninclude(PHPWG_ROOT_PATH . 'include/template.class.php');\n\n// download database config file if exists\ncheck_input_parameter('dl', $_GET, false, '/^[a-f0-9]{32}$/');\n\nif (!empty($_GET['dl']) && file_exists(PHPWG_ROOT_PATH.$conf['data_location'].'pwg_'.$_GET['dl']))\n{\n  $filename = PHPWG_ROOT_PATH.$conf['data_location'].'pwg_'.$_GET['dl'];\n  header('Cache-Control: no-cache, must-revalidate');\n  header('Pragma: no-cache');\n  header('Content-Disposition: attachment; filename=\"database.inc.php\"');\n  header('Content-Transfer-Encoding: binary');\n  header('Content-Length: '.filesize($filename));\n  echo file_get_contents($filename);\n  unlink($filename);\n  exit();\n} \n\n// Obtain various vars\n$dbhost = (!empty($_POST['dbhost'])) ? $_POST['dbhost'] : 'localhost';\n$dbuser = (!empty($_POST['dbuser'])) ? $_POST['dbuser'] : '';\n$dbpasswd = (!empty($_POST['dbpasswd'])) ? $_POST['dbpasswd'] : '';\n$dbname = (!empty($_POST['dbname'])) ? $_POST['dbname'] : '';\n\n// dblayer\nif (extension_loaded('mysqli'))\n{\n  $dblayer = 'mysqli';\n}\nelse\n{\n  if (version_compare(PHP_VERSION, '7') >= 0)\n  {\n    fatal_error('PHP extension \"mysqli\" is not loaded');\n  }\n\n  if (!extension_loaded('mysql'))\n  {\n    fatal_error('No PHP extension installed for mysql, Piwigo needs one');\n  }\n\n  $dblayer = 'mysql';\n}\n\n$admin_name = (!empty($_POST['admin_name'])) ? $_POST['admin_name'] : '';\n$admin_pass1 = (!empty($_POST['admin_pass1'])) ? $_POST['admin_pass1'] : '';\n$admin_pass2 = (!empty($_POST['admin_pass2'])) ? $_POST['admin_pass2'] : '';\n$admin_mail = (!empty($_POST['admin_mail'])) ? $_POST['admin_mail'] : '';\n\n$is_newsletter_subscribe = true;\nif (isset($_POST['install']))\n{\n  $is_newsletter_subscribe = isset($_POST['newsletter_subscribe']);\n}\n\n$infos = array();\n$errors = array();\n\n$config_file = PHPWG_ROOT_PATH.PWG_LOCAL_DIR .'config/database.inc.php';\nif (@file_exists($config_file))\n{\n  include($config_file);\n  // Is Piwigo already installed ?\n  if (defined(\"PHPWG_INSTALLED\"))\n  {\n    die('Piwigo is already installed');\n  }\n}\n\ninclude(PHPWG_ROOT_PATH . 'include/constants.php');\ninclude(PHPWG_ROOT_PATH . 'admin/include/functions.php');\n\ninclude(PHPWG_ROOT_PATH . 'admin/include/languages.class.php');\n$languages = new languages('utf-8');\n\nif (isset($_GET['language']))\n{\n  $language = strip_tags($_GET['language']);\n  \n  if (!in_array($language, array_keys($languages->fs_languages)))\n  {\n    $language = PHPWG_DEFAULT_LANGUAGE;\n  }\n}\nelse\n{\n  $language = 'en_UK';\n  // Try to get browser language\n  foreach ($languages->fs_languages as $language_code => $fs_language)\n  {\n    if (substr($language_code,0,2) == @substr($_SERVER[\"HTTP_ACCEPT_LANGUAGE\"],0,2))\n    {\n      $language = $language_code;\n      break;\n    }\n  }\n}\n\nif ('fr_FR' == $language) {\n  define('PHPWG_DOMAIN', 'fr.piwigo.org');\n}\nelse if ('it_IT' == $language) {\n  define('PHPWG_DOMAIN', 'it.piwigo.org');\n}\nelse if ('de_DE' == $language) {\n  define('PHPWG_DOMAIN', 'de.piwigo.org');\n}\nelse if ('es_ES' == $language) {\n  define('PHPWG_DOMAIN', 'es.piwigo.org');\n}\nelse if ('pl_PL' == $language) {\n  define('PHPWG_DOMAIN', 'pl.piwigo.org');\n}\nelse if ('zh_CN' == $language) {\n  define('PHPWG_DOMAIN', 'cn.piwigo.org');\n}\nelse if ('ru_RU' == $language) {\n  define('PHPWG_DOMAIN', 'ru.piwigo.org');\n}\nelse if ('nl_NL' == $language) {\n  define('PHPWG_DOMAIN', 'nl.piwigo.org');\n}\nelse if ('tr_TR' == $language) {\n  define('PHPWG_DOMAIN', 'tr.piwigo.org');\n}\nelse if ('da_DK' == $language) {\n  define('PHPWG_DOMAIN', 'da.piwigo.org');\n}\nelse if ('pt_BR' == $language) {\n  define('PHPWG_DOMAIN', 'br.piwigo.org');\n}\nelse {\n  define('PHPWG_DOMAIN', 'piwigo.org');\n}\ndefine('PHPWG_URL', 'https://'.PHPWG_DOMAIN);\n\nload_language('common.lang', '', array('language' => $language, 'target_charset'=>'utf-8'));\nload_language('admin.lang', '', array('language' => $language, 'target_charset'=>'utf-8'));\nload_language('install.lang', '', array('language' => $language, 'target_charset'=>'utf-8'));\n\nheader('Content-Type: text/html; charset=UTF-8');\n//------------------------------------------------- check php version\nif (version_compare(PHP_VERSION, REQUIRED_PHP_VERSION, '<'))\n{\n  // include(PHPWG_ROOT_PATH.'install/php5_apache_configuration.php'); // to remove, with all its related content\n  $errors[] = l10n('PHP version %s required (you are running on PHP %s)', REQUIRED_PHP_VERSION, PHP_VERSION);\n}\n\n//----------------------------------------------------- template initialization\n$template = new Template(PHPWG_ROOT_PATH.'admin/themes', 'clear');\n$template->set_filenames( array('install' => 'install.tpl') );\nif (!isset($step))\n{\n  $step = 1;\n}\n//---------------------------------------------------------------- form analyze\ninclude(PHPWG_ROOT_PATH .'include/dblayer/functions_'.$dblayer.'.inc.php');\ninclude(PHPWG_ROOT_PATH . 'admin/include/functions_install.inc.php');\ninclude(PHPWG_ROOT_PATH . 'admin/include/functions_upgrade.php');\n\nif (isset($_POST['install']))\n{\n  install_db_connect($infos, $errors);\n\n  if (count($errors) > 0)\n  {\n    print_r($errors);\n  }\n\n  pwg_db_check_charset();\n\n  $webmaster = trim(preg_replace('/\\s{2,}/', ' ', $admin_name));\n  if (empty($webmaster))\n  {\n    $errors[] = l10n('enter a login for webmaster');\n  }\n  else if (preg_match( '/[\\'\"]/', $webmaster))\n  {\n    $errors[] = l10n('webmaster login can\\'t contain characters \\' or \"');\n  }\n  if ($admin_pass1 != $admin_pass2 || empty($admin_pass1))\n  {\n    $errors[] = l10n('please enter your password again');\n  }\n  if (empty($admin_mail))\n  {\n    $errors[] = l10n('mail address must be like xxx@yyy.eee (example : jack@altern.org)');\n  }\n  else\n  {\n    $error_mail_address = validate_mail_address(null, $admin_mail);\n    if (!empty($error_mail_address))\n    {\n      $errors[] = $error_mail_address;\n    }\n  }\n\n  if ( count( $errors ) == 0 )\n  {\n    $step = 2;\n    $file_content = '<?php\n$conf[\\'dblayer\\'] = \\''.$dblayer.'\\';\n$conf[\\'db_base\\'] = \\''.$dbname.'\\';\n$conf[\\'db_user\\'] = \\''.$dbuser.'\\';\n$conf[\\'db_password\\'] = \\''.$dbpasswd.'\\';\n$conf[\\'db_host\\'] = \\''.$dbhost.'\\';\n\n$prefixeTable = \\''.$prefixeTable.'\\';\n\ndefine(\\'PHPWG_INSTALLED\\', true);\ndefine(\\'PWG_CHARSET\\', \\'utf-8\\');\ndefine(\\'DB_CHARSET\\', \\'utf8\\');\ndefine(\\'DB_COLLATE\\', \\'\\');\n\n?'.'>';\n\n    @umask(0111);\n    // writing the configuration file\n    if ( !($fp = @fopen( $config_file, 'w' )))\n    {\n      // make sure nobody can list files of _data directory\n      secure_directory(PHPWG_ROOT_PATH.$conf['data_location']);\n      \n      $tmp_filename = md5(uniqid(time()));\n      $fh = @fopen( PHPWG_ROOT_PATH.$conf['data_location'] . 'pwg_' . $tmp_filename, 'w' );\n      @fputs($fh, $file_content, strlen($file_content));\n      @fclose($fh);\n\n      $template->assign(\n        array(\n          'config_creation_failed' => true,\n          'config_url' => 'install.php?dl='.$tmp_filename,\n          'config_file_content' => $file_content,\n          )\n        );\n    }\n    @fputs($fp, $file_content, strlen($file_content));\n    @fclose($fp);\n\n    // tables creation, based on piwigo_structure.sql\n    execute_sqlfile(\n      PHPWG_ROOT_PATH.'install/piwigo_structure-mysql.sql',\n      DEFAULT_PREFIX_TABLE,\n      $prefixeTable,\n      'mysql'\n      );\n    // We fill the tables with basic informations\n    execute_sqlfile(\n      PHPWG_ROOT_PATH.'install/config.sql',\n      DEFAULT_PREFIX_TABLE,\n      $prefixeTable,\n      'mysql'\n      );\n\n    $query = '\nINSERT INTO '.$prefixeTable.'config (param,value,comment) \n   VALUES (\\'secret_key\\',\\''.sha1(random_bytes(1000)).'\\',\n   \\'a secret key specific to the gallery for internal use\\');';\n    pwg_query($query);\n\n    conf_update_param('piwigo_db_version', get_branch_from_version(PHPWG_VERSION));\n    conf_update_param('gallery_title', pwg_db_real_escape_string(l10n('Just another Piwigo gallery')));\n\n    conf_update_param(\n      'page_banner',\n      '<h1>%gallery_title%</h1>'.\"\\n\\n<p>\".pwg_db_real_escape_string(l10n('Welcome to my photo gallery')).'</p>'\n      );\n\n    // fill languages table, only activate the current language\n    $languages->perform_action('activate', $language);\n\n    // fill $conf global array\n    load_conf_from_db();\n\n    // PWG_CHARSET is required for building the fs_themes array in the\n    // themes class\n    if (!defined('PWG_CHARSET'))\n    {\n      define('PWG_CHARSET', 'utf-8');\n    }\n    activate_core_themes();\n    activate_core_plugins();\n\n    $insert = array(\n      'id' => 1,\n      'galleries_url' => PHPWG_ROOT_PATH.'galleries/',\n      );\n    mass_inserts(SITES_TABLE, array_keys($insert), array($insert));\n\n    // webmaster admin user\n    $inserts = array(\n      array(\n        'id'           => 1, // must be the same value as webmaster_id in config.sql\n        'username'     => $admin_name,\n        'password'     => md5($admin_pass1),\n        'mail_address' => $admin_mail,\n        ),\n      array(\n        'id'           => 2,\n        'username'     => 'guest',\n        ),\n      );\n    mass_inserts(USERS_TABLE, array_keys($inserts[0]), $inserts);\n\n    create_user_infos(array(1,2), array('language' => $language));\n\n    // Available upgrades must be ignored after a fresh installation. To\n    // make PWG avoid upgrading, we must tell it upgrades have already been\n    // made.\n    list($dbnow) = pwg_db_fetch_row(pwg_query('SELECT NOW();'));\n    define('CURRENT_DATE', $dbnow);\n    $datas = array();\n    foreach (get_available_upgrade_ids() as $upgrade_id)\n    {\n      $datas[] = array(\n        'id'          => $upgrade_id,\n        'applied'     => CURRENT_DATE,\n        'description' => 'upgrade included in installation',\n        );\n    }\n    mass_inserts(\n      UPGRADE_TABLE,\n      array_keys($datas[0]),\n      $datas\n      );\n  }\n}\n\n//------------------------------------------------------ start template output\nforeach ($languages->fs_languages as $language_code => $fs_language)\n{\n  if ($language == $language_code)\n  {\n    $template->assign('language_selection', $language_code);\n  }\n  $languages_options[$language_code] = $fs_language['name'];\n}\n$template->assign('language_options', $languages_options);\n\n$template->assign(\n  array(\n    'T_CONTENT_ENCODING' => 'utf-8',\n    'RELEASE' => PHPWG_VERSION,\n    'F_ACTION' => 'install.php?language=' . $language,\n    'F_DB_HOST' => $dbhost,\n    'F_DB_USER' => $dbuser,\n    'F_DB_NAME' => $dbname,\n    'F_DB_PREFIX' => $prefixeTable,\n    'F_ADMIN' => $admin_name,\n    'F_ADMIN_EMAIL' => $admin_mail,\n    'EMAIL' => '<span class=\"adminEmail\">'.$admin_mail.'</span>',\n    'F_NEWSLETTER_SUBSCRIBE' => $is_newsletter_subscribe,\n    'L_INSTALL_HELP' => l10n('Need help ? Ask your question on <a href=\"%s\">Piwigo message board</a>.', PHPWG_URL.'/forum'),\n    ));\n\n//------------------------------------------------------ errors & infos display\nif ($step == 1)\n{\n  $template->assign('install', true);\n}\nelse\n{\n  pwg_activity('system', ACTIVITY_SYSTEM_CORE, 'install', array('version'=>PHPWG_VERSION));\n  $infos[] = l10n('Congratulations, Piwigo installation is completed');\n\n  if (isset($error_copy))\n  {\n    $errors[] = $error_copy;\n  }\n  else\n  {\n    // See include/functions_session.inc.php\n    session_set_save_handler(new PwgSession());\n    if ( function_exists('ini_set') )\n    {\n      ini_set('session.use_cookies', $conf['session_use_cookies']);\n      ini_set('session.use_only_cookies', $conf['session_use_only_cookies']);\n      ini_set('session.use_trans_sid', intval($conf['session_use_trans_sid']));\n      ini_set('session.cookie_httponly', 1);\n    }\n    session_name($conf['session_name']);\n    session_set_cookie_params(0, cookie_path());\n    register_shutdown_function('session_write_close');\n    \n    $user = build_user(1, true);\n    log_user($user['id'], false);\n\n    $user['preferences']['show_whats_new_'.get_branch_from_version(PHPWG_VERSION)] = false;\n    \n    // newsletter subscription\n    if ($is_newsletter_subscribe)\n    {\n      fetchRemote(\n        get_newsletter_subscribe_base_url($language).$admin_mail,\n        $result,\n        array(),\n        array('origin' => 'installation')\n        );\n\n      $user['preferences']['show_newsletter_subscription'] = false;\n    }\n\n    userprefs_save();\n\n    // email notification\n    if (isset($_POST['send_credentials_by_mail']))\n    {\n      include_once(PHPWG_ROOT_PATH.'include/functions_mail.inc.php');\n            \n      $keyargs_content = array(\n        get_l10n_args('Hello %s,', $admin_name),\n        get_l10n_args('Welcome to your new installation of Piwigo!', ''),\n        get_l10n_args('', ''),\n        get_l10n_args('Here are your connection settings', ''),\n        get_l10n_args('', ''),\n        get_l10n_args('Link: %s', get_absolute_root_url()),\n        get_l10n_args('Username: %s', $admin_name),\n        get_l10n_args('Password: ********** (no copy by email)', ''),\n        get_l10n_args('Email: %s', $admin_mail),\n        get_l10n_args('', ''),\n        get_l10n_args('Don\\'t hesitate to consult our forums for any help: %s', PHPWG_URL),\n        );\n        \n      pwg_mail(\n        $admin_mail,\n        array(\n          'subject' => l10n('Just another Piwigo gallery'),\n          'content' => l10n_args($keyargs_content),\n          'content_format' => 'text/plain',\n          )\n        );\n    }\n  }\n}\nif (count($errors) != 0)\n{\n  $template->assign('errors', $errors);\n}\n\nif (count($infos) != 0 )\n{\n  $template->assign('infos', $infos);\n}\n\n//----------------------------------------------------------- html code display\n$template->pparse('install');\n?>\n"
        },
        {
          "name": "install",
          "type": "tree",
          "content": null
        },
        {
          "name": "language",
          "type": "tree",
          "content": null
        },
        {
          "name": "local",
          "type": "tree",
          "content": null
        },
        {
          "name": "nbm.php",
          "type": "blob",
          "size": 2.7109375,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n\n//--------------------------------------------------------------------- include\ndefine('PHPWG_ROOT_PATH','./');\ninclude_once(PHPWG_ROOT_PATH.'include/common.inc.php');\ncheck_status(ACCESS_FREE);\ninclude_once(PHPWG_ROOT_PATH.'include/functions_notification.inc.php');\ninclude_once(PHPWG_ROOT_PATH.'include/functions_mail.inc.php');\ninclude_once(PHPWG_ROOT_PATH.'admin/include/functions.php');\ninclude_once(PHPWG_ROOT_PATH.'admin/include/functions_notification_by_mail.inc.php');\n// Translations are in admin file too\nload_language('admin.lang');\n// Need to update a second time\ntrigger_notify('loading_lang');\nload_language('lang', PHPWG_ROOT_PATH.PWG_LOCAL_DIR, array('no_fallback'=>true, 'local'=>true) );\n\n\n// +-----------------------------------------------------------------------+\n// | Main                                                                  |\n// +-----------------------------------------------------------------------+\nif (isset($_GET['subscribe'])\n    and preg_match('/^[A-Za-z0-9]{16}$/', $_GET['subscribe']))\n{\n  subscribe_notification_by_mail(false, array($_GET['subscribe']));\n}\nelse if (isset($_GET['unsubscribe'])\n    and preg_match('/^[A-Za-z0-9]{16}$/', $_GET['unsubscribe']))\n{\n  unsubscribe_notification_by_mail(false, array($_GET['unsubscribe']));\n}\nelse\n{\n  $page['errors'][] = l10n('Unknown identifier');\n}\n\n// +-----------------------------------------------------------------------+\n// | template initialization                                               |\n// +-----------------------------------------------------------------------+\n$title = l10n('Notification');\n$page['body_id'] = 'theNBMPage';\n\n$template->set_filenames(array('nbm'=>'nbm.tpl'));\n\n\n// include menubar\n$themeconf = $template->get_template_vars('themeconf');\nif (!isset($themeconf['hide_menu_on']) OR !in_array('theNBMPage', $themeconf['hide_menu_on']))\n{\n  include( PHPWG_ROOT_PATH.'include/menubar.inc.php');\n}\n\n// +-----------------------------------------------------------------------+\n// | html code display                                                     |\n// +-----------------------------------------------------------------------+\ninclude(PHPWG_ROOT_PATH.'include/page_header.php');\nflush_page_messages();\n$template->parse('nbm');\ninclude(PHPWG_ROOT_PATH.'include/page_tail.php');\n?>\n"
        },
        {
          "name": "notification.php",
          "type": "blob",
          "size": 3.267578125,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n// +-----------------------------------------------------------------------+\n// |                           initialization                              |\n// +-----------------------------------------------------------------------+\n\ndefine('PHPWG_ROOT_PATH','./');\ninclude_once( PHPWG_ROOT_PATH.'include/common.inc.php' );\n\n/**\n * search an available feed_id\n *\n * @return string feed identifier\n */\nfunction find_available_feed_id()\n{\n  while (true)\n  {\n    $key = generate_key(50);\n    $query = '\nSELECT COUNT(*)\n  FROM '.USER_FEED_TABLE.'\n  WHERE id = \\''.$key.'\\'\n;';\n    list($count) = pwg_db_fetch_row(pwg_query($query));\n    if (0 == $count)\n    {\n      return $key;\n    }\n  }\n}\n\n// +-----------------------------------------------------------------------+\n// | Check Access and exit when user status is not ok                      |\n// +-----------------------------------------------------------------------+\ncheck_status(ACCESS_GUEST);\n\ntrigger_notify('loc_begin_notification');\n\n// +-----------------------------------------------------------------------+\n// |                          new feed creation                            |\n// +-----------------------------------------------------------------------+\n\n$page['feed'] = find_available_feed_id();\n\n$query = '\nINSERT INTO '.USER_FEED_TABLE.'\n  (id, user_id, last_check)\n  VALUES\n  (\\''.$page['feed'].'\\', '.$user['id'].', NULL)\n;';\npwg_query($query);\n\n\n$feed_url=PHPWG_ROOT_PATH.'feed.php';\nif (is_a_guest())\n{\n  $feed_image_only_url=$feed_url;\n  $feed_url .= '?feed='.$page['feed'];\n}\nelse\n{\n  $feed_url .= '?feed='.$page['feed'];\n  $feed_image_only_url=$feed_url.'&amp;image_only';\n}\n\n// +-----------------------------------------------------------------------+\n// |                        template initialization                        |\n// +-----------------------------------------------------------------------+\n\n$title = l10n('Notification');\n$page['body_id'] = 'theNotificationPage';\n$page['meta_robots']=array('noindex'=>1, 'nofollow'=>1);\n\n\n$template->set_filenames(array('notification'=>'notification.tpl'));\n\n$template->assign(\n  array(\n    'U_FEED' => $feed_url,\n    'U_FEED_IMAGE_ONLY' => $feed_image_only_url,\n    )\n  );\n  \n// include menubar\n$themeconf = $template->get_template_vars('themeconf');\nif (!isset($themeconf['hide_menu_on']) OR !in_array('theNotificationPage', $themeconf['hide_menu_on']))\n{\n  include( PHPWG_ROOT_PATH.'include/menubar.inc.php');\n}\n\n// +-----------------------------------------------------------------------+\n// |                           html code display                           |\n// +-----------------------------------------------------------------------+\ninclude(PHPWG_ROOT_PATH.'include/page_header.php');\ntrigger_notify('loc_end_notification');\nflush_page_messages();\n$template->pparse('notification');\ninclude(PHPWG_ROOT_PATH.'include/page_tail.php');\n\n?>"
        },
        {
          "name": "password.php",
          "type": "blob",
          "size": 8.626953125,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n// +-----------------------------------------------------------------------+\n// |                           initialization                              |\n// +-----------------------------------------------------------------------+\n\ndefine('PHPWG_ROOT_PATH','./');\ninclude_once( PHPWG_ROOT_PATH.'include/common.inc.php' );\ninclude_once(PHPWG_ROOT_PATH.'include/functions_mail.inc.php');\n\n// +-----------------------------------------------------------------------+\n// | Check Access and exit when user status is not ok                      |\n// +-----------------------------------------------------------------------+\n\ncheck_status(ACCESS_FREE);\n\ntrigger_notify('loc_begin_password');\n\ncheck_input_parameter('action', $_GET, false, '/^(lost|reset|none)$/');\n\n// +-----------------------------------------------------------------------+\n// | Functions                                                             |\n// +-----------------------------------------------------------------------+\n\n/**\n * checks the validity of input parameters, fills $page['errors'] and\n * $page['infos'] and send an email with confirmation link\n *\n * @return bool (true if email was sent, false otherwise)\n */\nfunction process_password_request()\n{\n  global $page, $conf;\n  \n  if (empty($_POST['username_or_email']))\n  {\n    $page['errors'][] = l10n('Invalid username or email');\n    return false;\n  }\n  \n  $user_id = get_userid_by_email($_POST['username_or_email']);\n    \n  if (!is_numeric($user_id))\n  {\n    $user_id = get_userid($_POST['username_or_email']);\n  }\n\n  if (!is_numeric($user_id))\n  {\n    $page['errors'][] = l10n('Invalid username or email');\n    return false;\n  }\n\n  $userdata = getuserdata($user_id, false);\n\n  // password request is not possible for guest/generic users\n  $status = $userdata['status'];\n  if (is_a_guest($status) or is_generic($status))\n  {\n    $page['errors'][] = l10n('Password reset is not allowed for this user');\n    return false;\n  }\n\n  if (empty($userdata['email']))\n  {\n    $page['errors'][] = l10n(\n      'User \"%s\" has no email address, password reset is not possible',\n      $userdata['username']\n      );\n    return false;\n  }\n\n  $generate_link = generate_password_link($user_id);\n  \n  // $userdata['activation_key'] = $generate_link['activation_key'];\n\n  switch_lang_to($userdata['language']);\n  $email_params = pwg_generate_reset_password_mail($userdata['username'], $generate_link['password_link'], $conf['gallery_title'], $generate_link['time_validation']);\n  $send_email = pwg_mail($userdata['email'], $email_params);\n  switch_lang_back();\n\n  if ($send_email)\n  {\n    $page['infos'][] = l10n('Check your email for the confirmation link');\n    return true;\n  }\n  else\n  {\n    $page['errors'][] = l10n('Error sending email');\n    return false;\n  }\n}\n\n/**\n *  checks the activation key: does it match the expected pattern? is it\n *  linked to a user? is this user allowed to reset his password?\n *\n * @return mixed (user_id if OK, false otherwise)\n */\nfunction check_password_reset_key($reset_key)\n{\n  global $page, $conf;\n\n  $key = $reset_key;\n  if (!preg_match('/^[a-z0-9]{20}$/i', $key))\n  {\n    $page['errors'][] = l10n('Invalid key');\n    return false;\n  }\n\n  $query = '\nSELECT\n    user_id,\n    status,\n    activation_key\n  FROM '.USER_INFOS_TABLE.'\n  WHERE activation_key IS NOT NULL\n    AND activation_key_expire > NOW()\n;';\n  $result = pwg_query($query);\n  while ($row = pwg_db_fetch_assoc($result))\n  {\n    if (pwg_password_verify($key, $row['activation_key']))\n    {\n      if (is_a_guest($row['status']) or is_generic($row['status']))\n      {\n        $page['errors'][] = l10n('Password reset is not allowed for this user');\n        return false;\n      }\n\n      $user_id = $row['user_id'];\n      break;\n    }\n  }\n\n  if (empty($user_id))\n  {\n    $page['errors'][] = l10n('Invalid key');\n    return false;\n  }\n  \n  return $user_id;\n}\n\n/**\n * checks the passwords, checks that user is allowed to reset his password,\n * update password, fills $page['errors'] and $page['infos'].\n *\n * @return bool (true if password was reset, false otherwise)\n */\nfunction reset_password()\n{\n  global $page, $conf;\n\n  if ($_POST['use_new_pwd'] != $_POST['passwordConf'])\n  {\n    $page['errors'][] = l10n('The passwords do not match');\n    return false;\n  }\n\n  if (!isset($_GET['key']))\n  {\n    $page['errors'][] = l10n('Invalid key');\n  }\n  \n  $user_id = check_password_reset_key($_GET['key']);\n  \n  if (!is_numeric($user_id))\n  {\n    return false;\n  }\n    \n  single_update(\n    USERS_TABLE,\n    array($conf['user_fields']['password'] => $conf['password_hash']($_POST['use_new_pwd'])),\n    array($conf['user_fields']['id'] => $user_id)\n    );\n\n  deactivate_password_reset_key($user_id);\n  deactivate_user_auth_keys($user_id);\n\n  $page['infos'][] = l10n('Your password has been reset');\n  $page['infos'][] = '<a href=\"'.get_root_url().'identification.php\">'.l10n('Login').'</a>';\n\n  return true;\n}\n\n// +-----------------------------------------------------------------------+\n// | Process form                                                          |\n// +-----------------------------------------------------------------------+\nif (isset($_POST['submit']))\n{\n  check_pwg_token();\n  \n  if ('lost' == $_GET['action'])\n  {\n    if (process_password_request())\n    {\n      $page['action'] = 'none';\n    }\n  }\n\n  if ('reset' == $_GET['action'])\n  {\n    if (reset_password())\n    {\n      $page['action'] = 'none';\n    }\n  }\n}\n\n// +-----------------------------------------------------------------------+\n// | key and action                                                        |\n// +-----------------------------------------------------------------------+\n\n// a connected user can't reset the password from a mail\nif (isset($_GET['key']) and !is_a_guest())\n{\n  unset($_GET['key']);\n}\n\nif (isset($_GET['key']) and !isset($_POST['submit']))\n{\n  $first_login = false;\n  $user_id = check_password_reset_key($_GET['key']);\n  if (is_numeric($user_id))\n  {\n    $userdata = getuserdata($user_id, false);\n    $page['username'] = $userdata['username'];\n    $template->assign('key', $_GET['key']);\n    $first_login = has_already_logged_in($user_id);\n\n    if (!isset($page['action']))\n    {\n      $page['action'] = 'reset';\n    }\n  }\n  else\n  {\n    $page['action'] = 'none';\n  }\n}\n\nif (!isset($page['action']))\n{\n  if (!isset($_GET['action']))\n  {\n    $page['action'] = 'lost';\n  }\n  elseif (in_array($_GET['action'], array('lost', 'reset', 'none')))\n  {\n    $page['action'] = $_GET['action'];\n  }\n}\n\nif ('reset' == $page['action'] and !isset($_GET['key']) and (is_a_guest() or is_generic()))\n{\n  redirect(get_gallery_home_url());\n}\n\nif ('lost' == $page['action'] and !is_a_guest())\n{\n  redirect(get_gallery_home_url());\n}\n\n// +-----------------------------------------------------------------------+\n// | template initialization                                               |\n// +-----------------------------------------------------------------------+\n\n$title = l10n('Password Reset');\nif ('lost' == $page['action'])\n{\n  $title = l10n('Forgot your password?');\n\n  if (isset($_POST['username_or_email']))\n  {\n    $template->assign('username_or_email', htmlspecialchars(stripslashes($_POST['username_or_email'])));\n  }\n}\nelse if ('reset' == $page['action'] and isset($first_login) and $first_login) \n{\n  $title = l10n('Welcome');\n}\n\n$page['body_id'] = 'thePasswordPage';\n\n$template->set_filenames(array('password'=>'password.tpl'));\n$template->assign(\n  array(\n    'title' => $title,\n    'form_action'=> get_root_url().'password.php',\n    'action' => $page['action'],\n    'username' => isset($page['username']) ? $page['username'] : $user['username'],\n    'PWG_TOKEN' => get_pwg_token(),\n    )\n  );\n\n\n// include menubar\n$themeconf = $template->get_template_vars('themeconf');\nif (!isset($themeconf['hide_menu_on']) OR !in_array('thePasswordPage', $themeconf['hide_menu_on']))\n{\n  include( PHPWG_ROOT_PATH.'include/menubar.inc.php');\n}\n\n// +-----------------------------------------------------------------------+\n// |                           html code display                           |\n// +-----------------------------------------------------------------------+\n\ninclude(PHPWG_ROOT_PATH.'include/page_header.php');\ntrigger_notify('loc_end_password');\nflush_page_messages();\n$template->pparse('password');\ninclude(PHPWG_ROOT_PATH.'include/page_tail.php');\n\n?>\n"
        },
        {
          "name": "picture.php",
          "type": "blob",
          "size": 27.9775390625,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\ndefine('PHPWG_ROOT_PATH','./');\ninclude_once(PHPWG_ROOT_PATH.'include/common.inc.php');\ninclude(PHPWG_ROOT_PATH.'include/section_init.inc.php');\ninclude_once(PHPWG_ROOT_PATH.'include/functions_picture.inc.php');\n\n// Check Access and exit when user status is not ok\ncheck_status(ACCESS_GUEST);\n\n// access authorization check\nif (isset($page['category']))\n{\n  check_restrictions($page['category']['id']);\n}\n\n$page['rank_of'] = array_flip($page['items']);\n\n// if this image_id doesn't correspond to this category, an error message is\n// displayed, and execution is stopped\nif ( !isset($page['rank_of'][$page['image_id']]) )\n{\n  $query = '\nSELECT id, file, level\n  FROM '.IMAGES_TABLE.'\n  WHERE ';\n  if ($page['image_id']>0)\n  {\n    $query .= 'id = '.$page['image_id'];\n  }\n  else\n  {// url given by file name\n    assert( !empty($page['image_file']) );\n    $query .= 'file LIKE \\'' .\n      str_replace(array('_','%'), array('/_','/%'), $page['image_file'] ).\n      '.%\\' ESCAPE \\'/\\' LIMIT 1';\n  }\n  if ( ! ( $row = pwg_db_fetch_assoc(pwg_query($query)) ) )\n  {// element does not exist\n    page_not_found( 'The requested image does not exist',\n      duplicate_index_url()\n      );\n  }\n  if ($row['level']>$user['level'])\n  {\n    access_denied();\n  }\n\n  $page['image_id'] = $row['id'];\n  $page['image_file'] =  $row['file'];\n  if ( !isset($page['rank_of'][$page['image_id']]) )\n  {// the image can still be non accessible (filter/cat perm) and/or not in the set\n    global $filter;\n    if ( !empty($filter['visible_images']) and\n      !in_array($page['image_id'], explode(',',$filter['visible_images']) ) )\n    {\n      page_not_found( 'The requested image is filtered',\n          duplicate_index_url()\n        );\n    }\n    if ('categories'==$page['section'] and !isset($page['category']) )\n    {// flat view - all items\n      access_denied();\n    }\n    else\n    {// try to see if we can access it differently\n      $query = '\nSELECT id\n  FROM '.IMAGES_TABLE.' INNER JOIN '.IMAGE_CATEGORY_TABLE.' ON id=image_id\n  WHERE id='.$page['image_id']\n        . get_sql_condition_FandF(\n            array('forbidden_categories' => 'category_id'),\n            \" AND\"\n          ).'\n  LIMIT 1';\n      if ( pwg_db_num_rows( pwg_query($query) ) == 0 )\n      {\n        access_denied();\n      }\n      else\n      {\n        if ('best_rated'==$page['section'])\n        {\n          $page['rank_of'][ $page['image_id'] ] = count($page['items']);\n          $page['items'][] = $page['image_id'];\n        }\n        else\n        {\n          $url = make_picture_url(\n              array(\n                'image_id' => $page['image_id'],\n                'image_file' => $page['image_file'],\n                'section' => 'categories',\n                'flat' => true,\n              )\n            );\n          set_status_header( 'recent_pics'==$page['section'] ? 301 : 302);\n          redirect_http( $url );\n        }\n      }\n    }\n  }\n}\n\n// There is cookie, so we must handle it at the beginning\nif ( isset($_GET['metadata']) )\n{\n  if ( pwg_get_session_var('show_metadata') == null )\n\t{\n\t\tpwg_set_session_var('show_metadata', 1 );\n\t} else {\n  \tpwg_unset_session_var('show_metadata');\n\t}\n}\n\n// add default event handler for rendering element content\nadd_event_handler('render_element_content', 'default_picture_content');\n// add default event handler for rendering element description\nadd_event_handler('render_element_description', 'pwg_nl2br');\n\ntrigger_notify('loc_begin_picture');\n\n// this is the default handler that generates the display for the element\nfunction default_picture_content($content, $element_info)\n{\n  global $conf;\n\n  if ( !empty($content) )\n  {// someone hooked us - so we skip;\n    return $content;\n  }\n\n  if (isset($_COOKIE['picture_deriv']))\n  {\n    if ( array_key_exists($_COOKIE['picture_deriv'], ImageStdParams::get_defined_type_map()) )\n    {\n      pwg_set_session_var('picture_deriv', $_COOKIE['picture_deriv']);\n    }\n    setcookie('picture_deriv', false, 0, cookie_path() );\n  }\n  $deriv_type = pwg_get_session_var('picture_deriv', $conf['derivative_default_size']);\n  $selected_derivative = $element_info['derivatives'][$deriv_type];\n\n  $unique_derivatives = array();\n  $show_original = isset($element_info['element_url']);\n  $added = array();\n  foreach($element_info['derivatives'] as $type => $derivative)\n  {\n    if ($type==IMG_SQUARE || $type==IMG_THUMB)\n      continue;\n    if (!array_key_exists($type, ImageStdParams::get_defined_type_map()))\n      continue;\n    $url = $derivative->get_url();\n    if (isset($added[$url]))\n      continue;\n    $added[$url] = 1;\n    $show_original &= !($derivative->same_as_source());\n\n    // in case we do not display the sizes icon, we only add the selected size to unique_derivatives\n    if ($conf['picture_sizes_icon'] or $type == $deriv_type)\n      $unique_derivatives[$type]= $derivative;\n  }\n\n  global $page, $template;\n\n  if ($show_original)\n  {\n    $template->assign( 'U_ORIGINAL', $element_info['element_url'] );\n  }\n\n  $template->append('current', array(\n      'selected_derivative' => $selected_derivative,\n      'unique_derivatives' => $unique_derivatives,\n    ), true);\n\n\n  $template->set_filenames(\n    array('default_content'=>'picture_content.tpl')\n    );\n\n  $template->assign( array(\n      'ALT_IMG' => $element_info['file'],\n      'COOKIE_PATH' => cookie_path(),\n      )\n    );\n  return $template->parse( 'default_content', true);\n}\n\n// +-----------------------------------------------------------------------+\n// |                            initialization                             |\n// +-----------------------------------------------------------------------+\n\n// caching first_rank, last_rank, current_rank in the displayed\n// section. This should also help in readability.\n$page['first_rank']   = 0;\n$page['last_rank']    = count($page['items']) - 1;\n$page['current_rank'] = $page['rank_of'][ $page['image_id'] ];\n\n// caching current item : readability purpose\n$page['current_item'] = $page['image_id'];\n\nif ($page['current_rank'] != $page['first_rank'])\n{\n  // caching first & previous item : readability purpose\n  $page['previous_item'] = $page['items'][ $page['current_rank'] - 1 ];\n  $page['first_item'] = $page['items'][ $page['first_rank'] ];\n}\n\nif ($page['current_rank'] != $page['last_rank'])\n{\n  // caching next & last item : readability purpose\n  $page['next_item'] = $page['items'][ $page['current_rank'] + 1 ];\n  $page['last_item'] = $page['items'][ $page['last_rank'] ];\n}\n\n$url_up = duplicate_index_url(\n  array(\n    'start' =>\n      floor($page['current_rank'] / $page['nb_image_page'])\n      * $page['nb_image_page']\n    ),\n  array(\n    'start',\n    )\n  );\n\n$url_self = duplicate_picture_url();\n\n// +-----------------------------------------------------------------------+\n// |                                actions                                |\n// +-----------------------------------------------------------------------+\n\n/**\n * Actions are favorite adding, user comment deletion, setting the picture\n * as representative of the current category...\n *\n * Actions finish by a redirection\n */\n\nif (isset($_GET['action']))\n{\n  switch ($_GET['action'])\n  {\n    case 'add_to_favorites' :\n    {\n      $query = '\nINSERT INTO '.FAVORITES_TABLE.'\n  (image_id,user_id)\n  VALUES\n  ('.$page['image_id'].','.$user['id'].')\n;';\n      pwg_query($query);\n\n      redirect($url_self);\n\n      break;\n    }\n    case 'remove_from_favorites' :\n    {\n      $query = '\nDELETE FROM '.FAVORITES_TABLE.'\n  WHERE user_id = '.$user['id'].'\n    AND image_id = '.$page['image_id'].'\n;';\n      pwg_query($query);\n\n      if ('favorites' == $page['section'])\n      {\n        redirect($url_up);\n      }\n      else\n      {\n        redirect($url_self);\n      }\n\n      break;\n    }\n    case 'set_as_representative' :\n    {\n      if (is_admin() and isset($page['category']))\n      {\n        $query = '\nUPDATE '.CATEGORIES_TABLE.'\n  SET representative_picture_id = '.$page['image_id'].'\n  WHERE id = '.$page['category']['id'].'\n;';\n        pwg_query($query);\n        pwg_activity('album', $page['category']['id'], 'edit', array('action'=>$_GET['action'], 'image_id'=>$page['image_id']));\n\n        include_once(PHPWG_ROOT_PATH.'admin/include/functions.php');\n        invalidate_user_cache();\n      }\n\n      redirect($url_self);\n\n      break;\n    }\n    case 'add_to_caddie' :\n    {\n      fill_caddie(array($page['image_id']));\n      redirect($url_self);\n      break;\n    }\n    case 'rate' :\n    {\n      include_once(PHPWG_ROOT_PATH.'include/functions_rate.inc.php');\n      rate_picture($page['image_id'], $_POST['rate']);\n      redirect($url_self);\n    }\n    case 'edit_comment':\n    {\n      include_once(PHPWG_ROOT_PATH.'include/functions_comment.inc.php');\n      check_input_parameter('comment_to_edit', $_GET, false, PATTERN_ID);\n      $author_id = get_comment_author_id($_GET['comment_to_edit']);\n\n      if (can_manage_comment('edit', $author_id))\n      {\n        if (!empty($_POST['content']))\n        {\n          check_pwg_token();\n          $comment_action = update_user_comment(\n            array(\n              'comment_id' => $_GET['comment_to_edit'],\n              'image_id' => $page['image_id'],\n              'content' => $_POST['content'],\n              'website_url' => @$_POST['website_url'],\n              ),\n            $_POST['key']\n            );\n\n          $perform_redirect = false;\n          switch ($comment_action)\n          {\n            case 'moderate':\n              $_SESSION['page_infos'][] = l10n('An administrator must authorize your comment before it is visible.');\n            case 'validate':\n              $_SESSION['page_infos'][] = l10n('Your comment has been registered');\n              $perform_redirect = true;\n              break;\n            case 'reject':\n              $_SESSION['page_errors'][] = l10n('Your comment has NOT been registered because it did not pass the validation rules');\n              break;\n            default:\n              trigger_error('Invalid comment action '.$comment_action, E_USER_WARNING);\n          }\n\n          if ($perform_redirect)\n          {\n            redirect($url_self);\n          }\n          unset($_POST['content']);\n        }\n\n        $edit_comment = $_GET['comment_to_edit'];\n      }\n      break;\n    }\n    case 'delete_comment' :\n    {\n      check_pwg_token();\n\n      include_once(PHPWG_ROOT_PATH.'include/functions_comment.inc.php');\n\n      check_input_parameter('comment_to_delete', $_GET, false, PATTERN_ID);\n\n      $author_id = get_comment_author_id($_GET['comment_to_delete']);\n\n      if (can_manage_comment('delete', $author_id))\n      {\n        delete_user_comment($_GET['comment_to_delete']);\n      }\n\n      redirect($url_self);\n    }\n    case 'validate_comment' :\n    {\n      check_pwg_token();\n\n      include_once(PHPWG_ROOT_PATH.'include/functions_comment.inc.php');\n\n      check_input_parameter('comment_to_validate', $_GET, false, PATTERN_ID);\n\n      $author_id = get_comment_author_id($_GET['comment_to_validate']);\n\n      if (can_manage_comment('validate', $author_id))\n      {\n        validate_user_comment($_GET['comment_to_validate']);\n      }\n\n      redirect($url_self);\n    }\n\n  }\n}\n\n\n//---------- incrementation of the number of hits\n$inc_hit_count = !isset($_POST['content']);\n// don't increment counter if in the Mozilla Firefox prefetch\nif (isset($_SERVER['HTTP_X_MOZ']) and $_SERVER['HTTP_X_MOZ'] == 'prefetch')\n{\n  $inc_hit_count = false;\n}\nelse\n{\n  // don't increment counter if comming from the same picture (actions)\n  if (pwg_get_session_var('referer_image_id',0) == $page['image_id'])\n  {\n    $inc_hit_count = false;\n  }\n  pwg_set_session_var('referer_image_id', $page['image_id']);\n}\n\n// don't increment if adding a comment\nif (trigger_change('allow_increment_element_hit_count', $inc_hit_count, $page['image_id'] ) )\n{\n  increase_image_visit_counter($page['image_id']);\n}\n\n//---------------------------------------------------------- related categories\n$query = '\nSELECT id,uppercats,commentable,visible,status,global_rank\n  FROM '.IMAGE_CATEGORY_TABLE.'\n    INNER JOIN '.CATEGORIES_TABLE.' ON category_id = id\n  WHERE image_id = '.$page['image_id'].'\n'.get_sql_condition_FandF\n  (\n    array\n      (\n        'forbidden_categories' => 'id',\n        'visible_categories' => 'id'\n      ),\n    'AND'\n  ).'\n;';\n$related_categories = array_from_query($query);\nusort($related_categories, 'global_rank_compare');\n//-------------------------first, prev, current, next & last picture management\n$picture = array();\n\n$ids = array($page['image_id']);\nif (isset($page['previous_item']))\n{\n  $ids[] = $page['previous_item'];\n  $ids[] = $page['first_item'];\n}\nif (isset($page['next_item']))\n{\n  $ids[] = $page['next_item'];\n  $ids[] = $page['last_item'];\n}\n\n$query = '\nSELECT *\n  FROM '.IMAGES_TABLE.'\n  WHERE id IN ('.implode(',', $ids).')\n;';\n\n$result = pwg_query($query);\n\nwhile ($row = pwg_db_fetch_assoc($result))\n{\n  if (isset($page['previous_item']) and $row['id'] == $page['previous_item'])\n  {\n    $i = 'previous';\n  }\n  elseif (isset($page['next_item']) and $row['id'] == $page['next_item'])\n  {\n    $i = 'next';\n  }\n  elseif (isset($page['first_item']) and $row['id'] == $page['first_item'])\n  {\n    $i = 'first';\n  }\n  elseif (isset($page['last_item']) and $row['id'] == $page['last_item'])\n  {\n    $i = 'last';\n  }\n  else\n  {\n    $i = 'current';\n  }\n\n  $row['src_image'] = new SrcImage($row);\n  $row['derivatives'] = DerivativeImage::get_all($row['src_image']);\n\n  $extTab = explode('.',$row['path']);\n  $row['path_ext'] = strtolower(get_extension($row['path']));\n  $row['file_ext'] = strtolower(get_extension($row['file']));\n\n  if ($i=='current')\n  {\n    $row['element_path'] = get_element_path($row);\n\n    if ( $row['src_image']->is_original() )\n    {// we have a photo\n      if ( $user['enabled_high']=='true' )\n      {\n        $row['element_url'] = $row['src_image']->get_url();\n        $row['download_url'] = get_action_url($row['id'], 'e', true);\n      }\n    }\n    else\n    { // not a pic - need download link\n      $row['element_url'] = get_element_url($row);\n      $row['download_url'] = get_action_url($row['id'], 'e', true);\n    }\n  }\n\n  $row['url'] = duplicate_picture_url(\n    array(\n      'image_id' => $row['id'],\n      'image_file' => $row['file'],\n      ),\n    array(\n      'start',\n      )\n    );\n\n  $picture[$i] = $row;\n  $picture[$i]['TITLE'] = render_element_name($row);\n  $picture[$i]['TITLE_ESC'] = str_replace('\"', '&quot;', $picture[$i]['TITLE']);\n\n  if ('previous'==$i and $page['previous_item']==$page['first_item'])\n  {\n    $picture['first'] = $picture[$i];\n  }\n  if ('next'==$i and $page['next_item']==$page['last_item'])\n  {\n    $picture['last'] = $picture[$i];\n  }\n}\n\n$slideshow_params = array();\n$slideshow_url_params = array();\n\nif (isset($_GET['slideshow']))\n{\n  $page['slideshow'] = true;\n  $page['meta_robots'] = array('noindex'=>1, 'nofollow'=>1);\n\n  $slideshow_params = decode_slideshow_params($_GET['slideshow']);\n  $slideshow_url_params['slideshow'] = encode_slideshow_params($slideshow_params);\n\n  if ($slideshow_params['play'])\n  {\n    $id_pict_redirect = '';\n    if (isset($page['next_item']))\n    {\n      $id_pict_redirect = 'next';\n    }\n    else\n    {\n      if ($slideshow_params['repeat'] and isset($page['first_item']))\n      {\n        $id_pict_redirect = 'first';\n      }\n    }\n\n    if (!empty($id_pict_redirect))\n    {\n      // $refresh, $url_link and $title are required for creating\n      // an automated refresh page in header.tpl\n      $refresh = $slideshow_params['period'];\n      $url_link = add_url_params(\n          $picture[$id_pict_redirect]['url'],\n          $slideshow_url_params\n        );\n    }\n  }\n}\nelse\n{\n  $page['slideshow'] = false;\n}\nif ($page['slideshow'] and $conf['light_slideshow'])\n{\n  $template->set_filenames( array('slideshow' => 'slideshow.tpl'));\n}\nelse\n{\n  $template->set_filenames( array('picture' => 'picture.tpl'));\n}\n\n$title =  $picture['current']['TITLE'];\n$title_nb = ($page['current_rank'] + 1).'/'.count($page['items']);\n\n// metadata\n$url_metadata = duplicate_picture_url();\n$url_metadata = add_url_params( $url_metadata, array('metadata'=>null) );\n\n\n// do we have a plugin that can show metadata for something else than images?\n$metadata_showable = trigger_change(\n  'get_element_metadata_available',\n  (\n    ($conf['show_exif'] or $conf['show_iptc'])\n    and !$picture['current']['src_image']->is_mimetype()\n    ),\n  $picture['current']\n  );\n\nif ( $metadata_showable and pwg_get_session_var('show_metadata') )\n{\n  $page['meta_robots']=array('noindex'=>1, 'nofollow'=>1);\n}\n\n\n$page['body_id'] = 'thePicturePage';\n\n// allow plugins to change what we computed before passing data to template\n$picture = trigger_change('picture_pictures_data', $picture);\n\n//------------------------------------------------------- navigation management\nforeach (array('first','previous','next','last', 'current') as $which_image)\n{\n  if (isset($picture[$which_image]))\n  {\n    $template->assign(\n      $which_image,\n      array_merge(\n        $picture[$which_image],\n        array(\n          // Params slideshow was transmit to navigation buttons\n          'U_IMG' =>\n            add_url_params(\n              $picture[$which_image]['url'], $slideshow_url_params),\n          )\n        )\n      );\n  }\n}\nif ($conf['picture_download_icon'] and !empty($picture['current']['download_url']) and $user['enabled_high']=='true')\n{\n  $template->append('current', array('U_DOWNLOAD' => $picture['current']['download_url']), true);\n\n  if ($conf['enable_formats'])\n  {\n    $query = '\nSELECT *\n  FROM '.IMAGE_FORMAT_TABLE.'\n  WHERE image_id = '.$picture['current']['id'].'\n;';\n    $formats = query2array($query);\n    \n    // let's add the original as a format among others. It will just have a\n    // specific download URL\n    array_unshift(\n      $formats,\n      array(\n        'download_url' => $picture['current']['download_url'],\n        'ext' => get_extension($picture['current']['file']),\n        'filesize' => $picture['current']['filesize'],\n        )\n      );\n  \n    foreach ($formats as &$format)\n    {\n      if (!isset($format['download_url']))\n      {\n        $format['download_url'] = 'action.php?format='.$format['format_id'].'&amp;download';\n      }\n      \n      $format['label'] = strtoupper($format['ext']);\n      $lang_key = 'format '.strtoupper($format['ext']);\n      if (isset($lang[$lang_key]))\n      {\n        $format['label'] = $lang[$lang_key];\n      }\n      \n      $format['filesize'] = sprintf('%.1fMB', $format['filesize']/1024);\n    }\n\n    $template->append('current', array('formats' => $formats), true);\n  }\n}\n\n\nif ($page['slideshow'])\n{\n  $tpl_slideshow = array();\n\n  //slideshow end\n  $template->assign(\n    array(\n      'U_SLIDESHOW_STOP' => $picture['current']['url'],\n      )\n    );\n\n  foreach (array('repeat', 'play') as $p)\n  {\n    $var_name =\n      'U_'\n      .($slideshow_params[$p] ? 'STOP_' : 'START_')\n      .strtoupper($p);\n\n    $tpl_slideshow[$var_name] =\n          add_url_params(\n            $picture['current']['url'],\n            array('slideshow' =>\n              encode_slideshow_params(\n                array_merge($slideshow_params,\n                  array($p => ! $slideshow_params[$p]))\n                )\n              )\n          );\n  }\n\n  foreach (array('dec', 'inc') as $op)\n  {\n    $new_period = $slideshow_params['period'] + ((($op == 'dec') ? -1 : 1) * $conf['slideshow_period_step']);\n    $new_slideshow_params =\n      correct_slideshow_params(\n        array_merge($slideshow_params,\n                  array('period' => $new_period)));\n\n    if ($new_slideshow_params['period'] === $new_period)\n    {\n      $var_name = 'U_'.strtoupper($op).'_PERIOD';\n      $tpl_slideshow[$var_name] =\n            add_url_params(\n              $picture['current']['url'],\n              array('slideshow' => encode_slideshow_params($new_slideshow_params)\n                  )\n          );\n    }\n  }\n  $template->assign('slideshow', $tpl_slideshow );\n}\nelseif ($conf['picture_slideshow_icon'])\n{\n  $template->assign(\n    array(\n      'U_SLIDESHOW_START' =>\n        add_url_params(\n          $picture['current']['url'],\n          array( 'slideshow'=>''))\n      )\n    );\n}\n\n$template->assign(\n  array(\n    'SECTION_TITLE' => $page['section_title'],\n    'PHOTO' => $title_nb,\n    'IS_HOME' => ('categories'==$page['section'] and !isset($page['category']) ),\n\n    'LEVEL_SEPARATOR' => $conf['level_separator'],\n\n    'U_UP' => $url_up,\n    'DISPLAY_NAV_BUTTONS' => $conf['picture_navigation_icons'],\n    'DISPLAY_NAV_THUMB' => $conf['picture_navigation_thumb']\n    )\n  );\n\nif ($conf['picture_metadata_icon'])\n{\n  $template->assign('U_METADATA', $url_metadata);\n}\n\n\n//------------------------------------------------------- upper menu management\n\n// admin links\nif (is_admin())\n{\n  if (isset($page['category']) and $conf['picture_representative_icon'])\n  {\n    $template->assign(\n      array(\n        'U_SET_AS_REPRESENTATIVE' => add_url_params($url_self,\n                    array('action'=>'set_as_representative')\n                 )\n        )\n      );\n  }\n\n  if ($conf['picture_edit_icon'])\n  {\n    $url_admin =\n      get_root_url().'admin.php?page=photo-'.$page['image_id']\n      .(isset($page['category']) ? '&amp;cat_id='.$page['category']['id'] : '')\n      ;\n\n    $template->assign('U_PHOTO_ADMIN', $url_admin);\n  }\n\n  if ($conf['picture_caddie_icon'])\n  {\n    $template->assign(\n      'U_CADDIE',\n      add_url_params($url_self, array('action'=>'add_to_caddie'))\n      );\n  }\n\n  $template->assign('available_permission_levels', get_privacy_level_options());\n}\n\n// favorite manipulation\nif (!is_a_guest() and $conf['picture_favorite_icon'])\n{\n  // verify if the picture is already in the favorite of the user\n  $query = '\nSELECT COUNT(*) AS nb_fav\n  FROM '.FAVORITES_TABLE.'\n  WHERE image_id = '.$page['image_id'].'\n    AND user_id = '.$user['id'].'\n;';\n  $row = pwg_db_fetch_assoc( pwg_query($query) );\n\t$is_favorite = $row['nb_fav'] != 0;\n\n  $template->assign(\n    'favorite',\n    array(\n\t\t\t'IS_FAVORITE' => $is_favorite,\n      'U_FAVORITE'    => add_url_params(\n        $url_self,\n        array('action'=> !$is_favorite ? 'add_to_favorites' : 'remove_from_favorites' )\n        ),\n      )\n    );\n}\n\n//--------------------------------------------------------- picture information\n// legend\nif (isset($picture['current']['comment'])\n    and !empty($picture['current']['comment']))\n{\n  $template->assign(\n      'COMMENT_IMG',\n        trigger_change('render_element_description',\n          $picture['current']['comment'],\n          'picture_page_element_description'\n          )\n      );\n}\n\n// author\nif (!empty($picture['current']['author']))\n{\n  $infos['INFO_AUTHOR'] = $picture['current']['author'];\n}\n\n// creation date\nif (!empty($picture['current']['date_creation']))\n{\n  $val = format_date($picture['current']['date_creation']);\n  $url = make_index_url(\n    array(\n      'chronology_field'=>'created',\n      'chronology_style'=>'monthly',\n      'chronology_view'=>'list',\n      'chronology_date' => explode('-', substr($picture['current']['date_creation'], 0, 10))\n      )\n    );\n  $infos['INFO_CREATION_DATE'] =\n    '<a href=\"'.$url.'\" rel=\"nofollow\">'.$val.'</a>';\n}\n\n// date of availability\n$val = format_date($picture['current']['date_available']);\n$url = make_index_url(\n  array(\n    'chronology_field'=>'posted',\n    'chronology_style'=>'monthly',\n    'chronology_view'=>'list',\n    'chronology_date' => explode(\n      '-',\n      substr($picture['current']['date_available'], 0, 10)\n      )\n    )\n  );\n$infos['INFO_POSTED_DATE'] = '<a href=\"'.$url.'\" rel=\"nofollow\">'.$val.'</a>';\n\n// size in pixels\nif ($picture['current']['src_image']->is_original() and isset($picture['current']['width']) )\n{\n  $infos['INFO_DIMENSIONS'] =\n    $picture['current']['width'].'*'.$picture['current']['height'];\n}\n\n// filesize\nif (!empty($picture['current']['filesize']))\n{\n  $infos['INFO_FILESIZE'] = l10n('%d Kb', $picture['current']['filesize']);\n}\n\n// number of visits\n$infos['INFO_VISITS'] = $picture['current']['hit'];\n\n// file\n$infos['INFO_FILE'] = $picture['current']['file'];\n\n$template->assign($infos);\n$template->assign('display_info', unserialize($conf['picture_informations']));\n\n// related tags\n$tags = get_common_tags( array($page['image_id']), -1);\nif ( count($tags) )\n{\n  foreach ($tags as $tag)\n  {\n    $template->append(\n        'related_tags',\n        array_merge( $tag,\n          array(\n            'URL' => make_index_url(\n                      array(\n                        'tags' => array($tag)\n                        )\n                      ),\n            'U_TAG_IMAGE' => duplicate_picture_url(\n                      array(\n                        'section' => 'tags',\n                        'tags' => array($tag)\n                        )\n                    )\n          )\n        )\n      );\n  }\n}\n\n// related categories\nif ( count($related_categories)==1 and\n    isset($page['category']) and\n    $related_categories[0]['id']==$page['category']['id'] )\n{ // no need to go to db, we have all the info\n  $template->append(\n      'related_categories',\n      get_cat_display_name( $page['category']['upper_names'] )\n    );\n}\nelse\n{ // use only 1 sql query to get names for all related categories\n  $ids = array();\n  foreach ($related_categories as $category)\n  {// add all uppercats to $ids\n    $ids = array_merge($ids, explode(',', $category['uppercats']) );\n  }\n  $ids = array_unique($ids);\n  $query = '\nSELECT id, name, permalink\n  FROM '.CATEGORIES_TABLE.'\n  WHERE id IN ('.implode(',',$ids).')';\n  $cat_map = hash_from_query($query, 'id');\n  foreach ($related_categories as $category)\n  {\n    $cats = array();\n    foreach ( explode(',', $category['uppercats']) as $id )\n    {\n      $cats[] = $cat_map[$id];\n    }\n    $template->append('related_categories', get_cat_display_name($cats) );\n  }\n}\n\nif (in_array(strtolower(get_extension($picture['current']['file'])), array('pdf'))) {\n  $template->assign(\n    array(\n      'PDF_VIEWER_FILESIZE_THRESHOLD' => $conf['pdf_viewer_filesize_threshold']*1024,\n      'PDF_NB_PAGES' => count_pdf_pages($picture['current']['path'])\n    )\n  );\n}\n\n// maybe someone wants a special display (call it before page_header so that\n// they can add stylesheets)\n$element_content = trigger_change(\n  'render_element_content',\n  '',\n  $picture['current']\n  );\n$template->assign( 'ELEMENT_CONTENT', $element_content );\n\nif (isset($picture['next'])\n    and $picture['next']['src_image']->is_original()\n    and $template->get_template_vars('U_PREFETCH') == null\n    and strpos(@$_SERVER['HTTP_USER_AGENT'], 'Chrome/') === false)\n{\n  $template->assign(\n    'U_PREFETCH',\n    $picture['next']['derivatives'][pwg_get_session_var('picture_deriv', $conf['derivative_default_size'])]->get_url()\n    );\n}\n\n$template->assign(\n  'U_CANONICAL',\n  make_picture_url(\n    array(\n      'image_id' => $picture['current']['id'],\n      'image_file' => $picture['current']['file'])\n    )\n  );\n\n// +-----------------------------------------------------------------------+\n// |                               sub pages                               |\n// +-----------------------------------------------------------------------+\n\ninclude(PHPWG_ROOT_PATH.'include/picture_rate.inc.php');\nif ($conf['activate_comments'])\n{\n  include(PHPWG_ROOT_PATH.'include/picture_comment.inc.php');\n}\nif ($metadata_showable and pwg_get_session_var('show_metadata') <> null )\n{\n  include(PHPWG_ROOT_PATH.'include/picture_metadata.inc.php');\n}\n\n// include menubar\n$themeconf = $template->get_template_vars('themeconf');\nif ($conf['picture_menu'] AND (!isset($themeconf['hide_menu_on']) OR !in_array('thePicturePage', $themeconf['hide_menu_on'])))\n{\n  if (!isset($page['start'])) $page['start'] = 0;\n  include( PHPWG_ROOT_PATH.'include/menubar.inc.php');\n}\n\ninclude(PHPWG_ROOT_PATH.'include/page_header.php');\ntrigger_notify('loc_end_picture');\nflush_page_messages();\nif ($page['slideshow'] and $conf['light_slideshow'])\n{\n  $template->pparse('slideshow');\n}\nelse\n{\n  $template->parse_picture_buttons();\n  $template->pparse('picture');\n}\n//------------------------------------------------------------ log informations\npwg_log($picture['current']['id'], 'picture');\ninclude(PHPWG_ROOT_PATH.'include/page_tail.php');\n?>\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "popuphelp.php",
          "type": "blob",
          "size": 2.0625,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n// +-----------------------------------------------------------------------+\n// |                           initialization                              |\n// +-----------------------------------------------------------------------+\n\ndefine('PHPWG_ROOT_PATH','./');\ndefine('PWG_HELP', true);\ninclude_once( PHPWG_ROOT_PATH.'include/common.inc.php' );\n\n// +-----------------------------------------------------------------------+\n// | Check Access and exit when user status is not ok                      |\n// +-----------------------------------------------------------------------+\ncheck_status(ACCESS_GUEST);\n\n$page['body_id'] = 'thePopuphelpPage';\n$title = l10n('Piwigo Help');\n$page['page_banner'] = '';\n$page['meta_robots']=array('noindex'=>1, 'nofollow'=>1);\ninclude(PHPWG_ROOT_PATH.'include/page_header.php');\n\nif\n  (\n    isset($_GET['page'])\n    and preg_match('/^[a-z_]*$/', $_GET['page'])\n  )\n{\n  $help_content =\n    load_language('help/'.$_GET['page'].'.html', '', array('return'=>true) );\n\n  if ($help_content == false)\n  {\n    $help_content = '';\n  }\n\n  $help_content = trigger_change(\n    'get_popup_help_content', $help_content, $_GET['page']);\n}\nelse\n{\n  die('Hacking attempt!');\n}\n\n$template->set_filename('popuphelp','popuphelp.tpl');\n\n$template->assign(\n  array\n  (\n    'HELP_CONTENT' => $help_content\n  ));\n\n// +-----------------------------------------------------------------------+\n// |                           html code display                           |\n// +-----------------------------------------------------------------------+\n\n$template->pparse('popuphelp');\n\ninclude(PHPWG_ROOT_PATH.'include/page_tail.php');\n\n?>"
        },
        {
          "name": "profile.php",
          "type": "blob",
          "size": 10.810546875,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n// customize appearance of the site for a user\n// +-----------------------------------------------------------------------+\n// |                           initialization                              |\n// +-----------------------------------------------------------------------+\n\nif (!defined('PHPWG_ROOT_PATH'))\n{//direct script access\n  define('PHPWG_ROOT_PATH','./');\n  include_once(PHPWG_ROOT_PATH.'include/common.inc.php');\n\n  // +-----------------------------------------------------------------------+\n  // | Check Access and exit when user status is not ok                      |\n  // +-----------------------------------------------------------------------+\n  check_status(ACCESS_CLASSIC);\n\n  if (!empty($_POST))\n  {\n    check_pwg_token();\n  }\n\n  $userdata = $user;\n\n  trigger_notify('loc_begin_profile');\n\n// Reset to default (Guest) custom settings\n  if (isset($_POST['reset_to_default']))\n  {\n    $fields = array(\n      'nb_image_page', 'expand',\n      'show_nb_comments', 'show_nb_hits', 'recent_period', 'show_nb_hits'\n      );\n\n    // Get the Guest custom settings\n    $query = '\nSELECT '.implode(',', $fields).'\n  FROM '.USER_INFOS_TABLE.'\n  WHERE user_id = '.$conf['default_user_id'].'\n;';\n    $result = pwg_query($query);\n    $default_user = pwg_db_fetch_assoc($result);\n    $userdata = array_merge($userdata, $default_user);\n  }\n\n  save_profile_from_post($userdata, $page['errors']);\n\n  $title= l10n('Your Gallery Customization');\n  $page['body_id'] = 'theProfilePage';\n  $template->set_filename('profile', 'profile.tpl');\n  $template->set_filename('profile_content', 'profile_content.tpl');\n\n  load_profile_in_template(\n    get_root_url().'profile.php', // action\n    make_index_url(), // for redirect\n    $userdata );\n  $template->assign_var_from_handle('PROFILE_CONTENT', 'profile_content');\n\n\n  \n  // include menubar\n  $themeconf = $template->get_template_vars('themeconf');\n  if (!isset($themeconf['hide_menu_on']) OR !in_array('theProfilePage', $themeconf['hide_menu_on']))\n  {\n    include( PHPWG_ROOT_PATH.'include/menubar.inc.php');\n  }\n  \n  include(PHPWG_ROOT_PATH.'include/page_header.php');\n  trigger_notify('loc_end_profile');\n  flush_page_messages();\n  $template->pparse('profile');\n  include(PHPWG_ROOT_PATH.'include/page_tail.php');\n}\n\n//------------------------------------------------------ update & customization\nfunction save_profile_from_post($userdata, &$errors)\n{\n  global $conf, $page;\n  $errors = array();\n\n  if (!isset($_POST['validate']))\n  {\n    return false;\n  }\n\n  $special_user = in_array($userdata['id'], array($conf['guest_id'], $conf['default_user_id']));\n  if ($special_user)\n  {\n    unset(\n      $_POST['username'],\n      $_POST['mail_address'],\n      $_POST['password'],\n      $_POST['use_new_pwd'],\n      $_POST['passwordConf'],\n      $_POST['theme'],\n      $_POST['language']\n      );\n    $_POST['theme'] = get_default_theme();\n    $_POST['language'] = get_default_language();\n  }\n  \n  if (!defined('IN_ADMIN'))\n  {\n    unset($_POST['username']);\n  }\n\n  if ($conf['allow_user_customization'] or defined('IN_ADMIN'))\n  {\n    $int_pattern = '/^\\d+$/';\n    if (empty($_POST['nb_image_page'])\n        or (!preg_match($int_pattern, $_POST['nb_image_page'])))\n    {\n      $errors[] = l10n('The number of photos per page must be a not null scalar');\n    }\n\n    // periods must be integer values, they represents number of days\n    if (!preg_match($int_pattern, $_POST['recent_period'])\n        or $_POST['recent_period'] < 0)\n    {\n      $errors[] = l10n('Recent period must be a positive integer value') ;\n    }\n\n    if (!in_array($_POST['language'], array_keys(get_languages())))\n    {\n      die('Hacking attempt, incorrect language value');\n    }\n\n    if (!in_array($_POST['theme'], array_keys(get_pwg_themes())))\n    {\n      die('Hacking attempt, incorrect theme value');\n    }\n  }\n\n  if (isset($_POST['mail_address']))\n  {\n    // if $_POST and $userdata have are same email\n    // validate_mail_address allows, however, to check email\n    $mail_error = validate_mail_address($userdata['id'], $_POST['mail_address']);\n    if (!empty($mail_error))\n    {\n      $errors[] = $mail_error;\n    }\n  }\n\n  if (!empty($_POST['use_new_pwd']))\n  {\n    // password must be the same as its confirmation\n    if ($_POST['use_new_pwd'] != $_POST['passwordConf'])\n    {\n      $errors[] = l10n('The passwords do not match');\n    }\n\n    if ( !defined('IN_ADMIN') )\n    {// changing password requires old password\n      $query = '\n  SELECT '.$conf['user_fields']['password'].' AS password\n    FROM '.USERS_TABLE.'\n    WHERE '.$conf['user_fields']['id'].' = \\''.$userdata['id'].'\\'\n  ;';\n      list($current_password) = pwg_db_fetch_row(pwg_query($query));\n\n      if (!$conf['password_verify']($_POST['password'], $current_password))\n      {\n        $errors[] = l10n('Current password is wrong');\n      }\n    }\n  }\n\n  if (count($errors) == 0)\n  {\n    // mass_updates function\n    include_once(PHPWG_ROOT_PATH.'admin/include/functions.php');\n\n    $activity_details_tables = array();\n\n    if (isset($_POST['mail_address']))\n    {\n      // update common user informations\n      $fields = array($conf['user_fields']['email']);\n\n      $data = array();\n      $data[ $conf['user_fields']['id'] ] = $userdata['id'];\n      $data[ $conf['user_fields']['email'] ] = $_POST['mail_address'];\n\n      // password is updated only if filled\n      if (!empty($_POST['use_new_pwd']))\n      {\n        $fields[] = $conf['user_fields']['password'];\n        // password is hashed with function $conf['password_hash']\n        $data[ $conf['user_fields']['password'] ] = $conf['password_hash']($_POST['use_new_pwd']);\n\n        deactivate_user_auth_keys($userdata['id']);\n      }\n      \n      // username is updated only if allowed\n      if (!empty($_POST['username']))\n      {\n        if ($_POST['username'] != $userdata['username'] and get_userid($_POST['username']))\n        {\n          $page['errors'][] = l10n('this login is already used');\n          unset($_POST['redirect']);\n        }\n        else\n        {\n          $fields[] = $conf['user_fields']['username'];\n          $data[ $conf['user_fields']['username'] ] = $_POST['username'];\n          \n          // send email to the user\n          if ($_POST['username'] != $userdata['username'])\n          {\n            include_once(PHPWG_ROOT_PATH.'include/functions_mail.inc.php');\n            switch_lang_to($userdata['language']);\n            \n            $keyargs_content = array(\n              get_l10n_args('Hello', ''),\n              get_l10n_args('Your username has been successfully changed to : %s', $_POST['username']),\n              );\n              \n            pwg_mail(\n              $_POST['mail_address'],\n              array(\n                'subject' => '['.$conf['gallery_title'].'] '.l10n('Username modification'),\n                'content' => l10n_args($keyargs_content),\n                'content_format' => 'text/plain',\n                )\n              );\n              \n            switch_lang_back();\n          }\n        }\n      }\n      \n      mass_updates(USERS_TABLE,\n                   array(\n                    'primary' => array($conf['user_fields']['id']),\n                    'update' => $fields\n                    ),\n                   array($data));\n\n      if ($_POST['mail_address'] != $userdata['email'])\n      {\n        deactivate_password_reset_key($userdata['id']);\n      }\n\n      $activity_details_tables[] = 'users';\n    }\n\n    if ($conf['allow_user_customization'] or defined('IN_ADMIN'))\n    {\n      // update user \"additional\" informations (specific to Piwigo)\n      $fields = array(\n        'nb_image_page', 'language',\n        'expand', 'show_nb_hits', 'recent_period', 'theme'\n        );\n        \n      if ($conf['activate_comments'])\n      {\n        $fields[] = 'show_nb_comments';\n      }\n\n      $data = array();\n      $data['user_id'] = $userdata['id'];\n\n      foreach ($fields as $field)\n      {\n        if (isset($_POST[$field]))\n        {\n          $data[$field] = $_POST[$field];\n        }\n      }\n      mass_updates(USER_INFOS_TABLE,\n                   array('primary' => array('user_id'), 'update' => $fields),\n                   array($data));\n\n      $activity_details_tables[] = 'user_infos';\n    }\n    trigger_notify( 'save_profile_from_post', $userdata['id'] );\n    pwg_activity('user', $userdata['id'], 'edit', array('function'=>__FUNCTION__, 'tables'=>implode(',', $activity_details_tables)));\n\n    if (!empty($_POST['redirect']))\n    {\n      redirect($_POST['redirect']);\n    }\n  }\n  return true;\n}\n\n/**\n * Assign template variables, from arguments\n * Used to build profile edition pages\n * \n * @param string $url_action\n * @param string $url_redirect\n * @param array $userdata\n */\nfunction load_profile_in_template($url_action, $url_redirect, $userdata, $template_prefixe=null)\n{\n  global $template, $conf;\n\n  $template->assign('radio_options',\n    array(\n      'true' => l10n('Yes'),\n      'false' => l10n('No')));\n\n  $template->assign(\n    array(\n      $template_prefixe.'USERNAME'=>stripslashes($userdata['username']),\n      $template_prefixe.'EMAIL'=>@$userdata['email'],\n      $template_prefixe.'ALLOW_USER_CUSTOMIZATION'=>$conf['allow_user_customization'],\n      $template_prefixe.'ACTIVATE_COMMENTS'=>$conf['activate_comments'],\n      $template_prefixe.'NB_IMAGE_PAGE'=>$userdata['nb_image_page'],\n      $template_prefixe.'RECENT_PERIOD'=>$userdata['recent_period'],\n      $template_prefixe.'EXPAND' =>$userdata['expand'] ? 'true' : 'false',\n      $template_prefixe.'NB_COMMENTS'=>$userdata['show_nb_comments'] ? 'true' : 'false',\n      $template_prefixe.'NB_HITS'=>$userdata['show_nb_hits'] ? 'true' : 'false',\n      $template_prefixe.'REDIRECT' => $url_redirect,\n      $template_prefixe.'F_ACTION'=>$url_action,\n      ));\n\n  $template->assign('template_selection', $userdata['theme']);\n  $template->assign('template_options', get_pwg_themes());\n\n  foreach (get_languages() as $language_code => $language_name)\n  {\n    if (isset($_POST['submit']) or $userdata['language'] == $language_code)\n    {\n      $template->assign('language_selection', $language_code);\n    }\n    $language_options[$language_code] = $language_name;\n  }\n\n  $template->assign('language_options', $language_options);\n\n  $special_user = in_array($userdata['id'], array($conf['guest_id'], $conf['default_user_id']));\n  $template->assign('SPECIAL_USER', $special_user);\n  $template->assign('IN_ADMIN', defined('IN_ADMIN'));\n\n  // allow plugins to add their own form data to content\n  trigger_notify( 'load_profile_in_template', $userdata );\n\n  $template->assign('PWG_TOKEN', get_pwg_token());\n}\n?>\n"
        },
        {
          "name": "qsearch.php",
          "type": "blob",
          "size": 0.9248046875,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\ndefine('PHPWG_ROOT_PATH','./');\ninclude_once( PHPWG_ROOT_PATH.'include/common.inc.php' );\n\n// +-----------------------------------------------------------------------+\n// | Check Access and exit when user status is not ok                      |\n// +-----------------------------------------------------------------------+\ncheck_status(ACCESS_GUEST);\n\n// if (empty($_GET['q']))\n// {\n//   redirect( make_index_url() );\n// }\n\nredirect(get_root_url().'search.php?q='.$_GET['q']);\n?>"
        },
        {
          "name": "random.php",
          "type": "blob",
          "size": 1.9658203125,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n// +-----------------------------------------------------------------------+\n// |                          define and include                           |\n// +-----------------------------------------------------------------------+\n\ndefine('PHPWG_ROOT_PATH','./');\ninclude_once( PHPWG_ROOT_PATH.'include/common.inc.php' );\n\n// +-----------------------------------------------------------------------+\n// | Check Access and exit when user status is not ok                      |\n// +-----------------------------------------------------------------------+\ncheck_status(ACCESS_GUEST);\n\n// +-----------------------------------------------------------------------+\n// |                     generate random element list                      |\n// +-----------------------------------------------------------------------+\n\n$query = '\nSELECT id\n  FROM '.IMAGES_TABLE.'\n    INNER JOIN '.IMAGE_CATEGORY_TABLE.' AS ic ON id = ic.image_id\n'.get_sql_condition_FandF\n  (\n    array\n      (\n        'forbidden_categories' => 'category_id',\n        'visible_categories' => 'category_id',\n        'visible_images' => 'id'\n      ),\n    'WHERE'\n  ).'\n  ORDER BY '.DB_RANDOM_FUNCTION.'()\n  LIMIT '.min(50, $conf['top_number'],$user['nb_image_page']).'\n;';\n\n// +-----------------------------------------------------------------------+\n// |                                redirect                               |\n// +-----------------------------------------------------------------------+\n\nredirect(make_index_url(array('list' => array_from_query($query, 'id'))));\n?>"
        },
        {
          "name": "register.php",
          "type": "blob",
          "size": 3.431640625,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n//----------------------------------------------------------- include\ndefine('PHPWG_ROOT_PATH','./');\ninclude_once( PHPWG_ROOT_PATH.'include/common.inc.php' );\n\n// +-----------------------------------------------------------------------+\n// | Check Access and exit when user status is not ok                      |\n// +-----------------------------------------------------------------------+\ncheck_status(ACCESS_FREE);\n\n//----------------------------------------------------------- user registration\n\nif (!$conf['allow_user_registration'])\n{\n  page_forbidden('User registration closed');\n}\n\ntrigger_notify('loc_begin_register');\n\nif (isset($_POST['submit']))\n{\n  if (!verify_ephemeral_key(@$_POST['key']))\n  {\n\t\tset_status_header(403);\n    $page['errors'][] = l10n('Invalid/expired form key');\n  }\n\n  if(empty($_POST['password']))\n  {\n    $page['errors'][] = l10n('Password is missing. Please enter the password.');\n  }\n  else if(empty($_POST['password_conf']))\n  {\n    $page['errors'][] = l10n('Password confirmation is missing. Please confirm the chosen password.');\n  }\n  else if ($_POST['password'] != $_POST['password_conf'])\n  {\n    $page['errors'][] = l10n('The passwords do not match');\n  }\n\n  register_user(\n    $_POST['login'],\n    $_POST['password'],\n    $_POST['mail_address'],\n    true,\n    $page['errors'],\n    isset($_POST['send_password_by_mail'])\n    );\n\n  if (count($page['errors']) == 0)\n  {\n    // email notification\n    if (isset($_POST['send_password_by_mail']) and email_check_format($_POST['mail_address']))\n    {\n      $_SESSION['page_infos'][] = l10n('Successfully registered, you will soon receive an email with your connection settings. Welcome!');\n    }\n    \n    // log user and redirect\n    $user_id = get_userid($_POST['login']);\n    log_user($user_id, false);\n    redirect(make_index_url());\n  }\n\t$registration_post_key = get_ephemeral_key(2);\n}\nelse\n{\n\t$registration_post_key = get_ephemeral_key(6);\n}\n\n$login = !empty($_POST['login'])?htmlspecialchars(stripslashes($_POST['login'])):'';\n$email = !empty($_POST['mail_address'])?htmlspecialchars(stripslashes($_POST['mail_address'])):'';\n\n//----------------------------------------------------- template initialization\n//\n// Start output of page\n//\n$title= l10n('Registration');\n$page['body_id'] = 'theRegisterPage';\n\n$template->set_filenames( array('register'=>'register.tpl') );\n$template->assign(array(\n  'U_HOME' => make_index_url(),\n\t'F_KEY' => $registration_post_key,\n  'F_ACTION' => 'register.php',\n  'F_LOGIN' => $login,\n  'F_EMAIL' => $email,\n  'obligatory_user_mail_address' => $conf['obligatory_user_mail_address'],\n  ));\n\n// include menubar\n$themeconf = $template->get_template_vars('themeconf');\nif (!isset($themeconf['hide_menu_on']) OR !in_array('theRegisterPage', $themeconf['hide_menu_on']))\n{\n  include( PHPWG_ROOT_PATH.'include/menubar.inc.php');\n}\n\ninclude(PHPWG_ROOT_PATH.'include/page_header.php');\ntrigger_notify('loc_end_register');\nflush_page_messages();\n$template->parse('register');\ninclude(PHPWG_ROOT_PATH.'include/page_tail.php');\n?>\n"
        },
        {
          "name": "search.php",
          "type": "blob",
          "size": 3.67578125,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n//--------------------------------------------------------------------- include\ndefine('PHPWG_ROOT_PATH','./');\ninclude_once( PHPWG_ROOT_PATH.'include/common.inc.php' );\ninclude_once(PHPWG_ROOT_PATH.'include/functions_search.inc.php');\n\n// +-----------------------------------------------------------------------+\n// | Check Access and exit when user status is not ok                      |\n// +-----------------------------------------------------------------------+\ncheck_status(ACCESS_GUEST);\n\ntrigger_notify('loc_begin_search');\n\n// +-----------------------------------------------------------------------+\n// | Create a default search                                               |\n// +-----------------------------------------------------------------------+\n\n$search = array(\n  'mode' => 'AND',\n  'fields' => array()\n);\n\n// list of filters in user preferences\n// allwords, cat, tags, author, added_by, filetypes, date_posted\n$default_fields = array('allwords', 'cat', 'tags', 'author');\nif (is_a_guest() or is_generic())\n{\n  $fields = $default_fields;\n}\nelse\n{\n  $fields = userprefs_get_param('gallery_search_filters', $default_fields);\n}\n\n$words = array();\nif (!empty($_GET['q']))\n{\n  $words = split_allwords($_GET['q']);\n}\n\nif (count($words) > 0 or in_array('allwords', $fields))\n{\n  $search['fields']['allwords'] = array(\n    'words' => $words,\n    'mode' => 'AND',\n    'fields' => array('file', 'name', 'comment', 'tags', 'author', 'cat-title', 'cat-desc'),\n  );\n}\n\n$cat_ids = array();\nif (isset($_GET['cat_id']))\n{\n  check_input_parameter('cat_id', $_GET, false, PATTERN_ID);\n\n  $query = '\nSELECT\n    *\n  FROM '.USER_CACHE_CATEGORIES_TABLE.'\n  WHERE cat_id = '.$_GET['cat_id'].'\n    AND user_id = '.$user['id'].'\n;';\n  $found_categories = query2array($query);\n  if (empty($found_categories))\n  {\n    page_not_found(l10n('Requested album does not exist'));\n  }\n\n  $cat_ids = array($_GET['cat_id']);\n}\n\nif (count($cat_ids) > 0 or in_array('cat', $fields))\n{\n  $search['fields']['cat'] = array(\n    'words' => $cat_ids,\n    'sub_inc' => true,\n  );\n}\n\nif (count(get_available_tags()) > 0)\n{\n  $tag_ids = array();\n  if (isset($_GET['tag_id']))\n  {\n    check_input_parameter('tag_id', $_GET, false, '/^\\d+(,\\d+)*$/');\n    $tag_ids = explode(',', $_GET['tag_id']);\n  }\n\n  if (count($tag_ids) > 0 or in_array('tags', $fields))\n  {\n    $search['fields']['tags'] = array(\n      'words' => $tag_ids,\n      'mode'  => 'AND',\n    );\n  }\n}\n\nif (in_array('author', $fields))\n{\n  // does this Piwigo has authors for current user?\n  $query = '\nSELECT\n    id\n  FROM '.IMAGES_TABLE.' AS i\n    JOIN '.IMAGE_CATEGORY_TABLE.' AS ic ON ic.image_id = i.id\n  '.get_sql_condition_FandF(\n    array(\n      'forbidden_categories' => 'category_id',\n      'visible_categories' => 'category_id',\n      'visible_images' => 'id'\n      ),\n    ' WHERE '\n    ).'\n    AND author IS NOT NULL\n    LIMIT 1\n;';\n  $first_author = query2array($query);\n\n  if (count($first_author) > 0)\n  {\n    $search['fields']['author'] = array(\n      'words' => array(),\n      'mode' => 'OR',\n    );\n  }\n}\n\nforeach (array('added_by', 'filetypes', 'date_posted') as $field)\n{\n  if (in_array($field, $fields))\n  {\n    $search['fields'][$field] = array();\n  }\n}\n\nlist($search_uuid, $search_url) = save_search($search);\nredirect($search_url);\n?>\n"
        },
        {
          "name": "tags.php",
          "type": "blob",
          "size": 4.74609375,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n// +-----------------------------------------------------------------------+\n// |                           initialization                              |\n// +-----------------------------------------------------------------------+\n\ndefine('PHPWG_ROOT_PATH','./');\ninclude_once(PHPWG_ROOT_PATH.'include/common.inc.php');\n\ncheck_status(ACCESS_GUEST);\n\ntrigger_notify('loc_begin_tags');\n\n// +-----------------------------------------------------------------------+\n// |                       page header and options                         |\n// +-----------------------------------------------------------------------+\n\n$title= l10n('Tags');\n$page['body_id'] = 'theTagsPage';\n\n$template->set_filenames(array('tags'=>'tags.tpl'));\n\n$page['display_mode'] = $conf['tags_default_display_mode'];\nif (isset($_GET['display_mode']))\n{\n  if (in_array($_GET['display_mode'], array('cloud', 'letters')))\n  {\n    $page['display_mode'] = $_GET['display_mode'];\n  }\n}\n\nforeach (array('cloud', 'letters') as $mode)\n{\n  $template->assign(\n    'U_'.strtoupper($mode),\n    get_root_url().'tags.php'. ($conf['tags_default_display_mode']==$mode ? '' : '?display_mode='.$mode)\n    );\n}\n\n$template->assign( 'display_mode', $page['display_mode'] );\n\n// find all tags available for the current user\n$tags = get_available_tags();\n\n// +-----------------------------------------------------------------------+\n// |                       letter groups construction                      |\n// +-----------------------------------------------------------------------+\n\nif ($page['display_mode'] == 'letters') {\n  // we want tags diplayed in alphabetic order\n  usort($tags, 'tag_alpha_compare');\n\n  $current_letter = null;\n  $nb_tags = count($tags);\n  $current_column = 1;\n  $current_tag_idx = 0;\n\n  $letter = array(\n    'tags' => array()\n    );\n\n  foreach ($tags as $tag)\n  {\n    $tag_letter = mb_strtoupper(mb_substr(pwg_transliterate($tag['name']), 0, 1, PWG_CHARSET), PWG_CHARSET);\n\n    if ($current_tag_idx==0) {\n      $current_letter = $tag_letter;\n      $letter['TITLE'] = $tag_letter;\n    }\n\n    //lettre precedente differente de la lettre suivante\n    if ($tag_letter !== $current_letter)\n    {\n      if ($current_column<$conf['tag_letters_column_number']\n          and $current_tag_idx > $current_column*$nb_tags/$conf['tag_letters_column_number'] )\n      {\n        $letter['CHANGE_COLUMN'] = true;\n        $current_column++;\n      }\n\n      $letter['TITLE'] = $current_letter;\n\n      $template->append(\n        'letters',\n        $letter\n        );\n\n      $current_letter = $tag_letter;\n      $letter = array(\n        'tags' => array()\n        );\n    }\n\n    $letter['tags'][] = array_merge(\n      $tag,\n      array(\n        'URL' => make_index_url(array('tags' => array($tag))),\n        )\n      );\n\n    $current_tag_idx++;\n  }\n\n  // flush last letter\n  if (count($letter['tags']) > 0)\n  {\n    unset($letter['CHANGE_COLUMN']);\n    $letter['TITLE'] = $current_letter;\n    $template->append(\n      'letters',\n      $letter\n      );\n  }\n}\nelse\n{\n  // +-----------------------------------------------------------------------+\n  // |                        tag cloud construction                         |\n  // +-----------------------------------------------------------------------+\n\n  // we want only the first most represented tags, so we sort them by counter\n  // and take the first tags\n  usort($tags, 'tags_counter_compare');\n  $tags = array_slice($tags, 0, $conf['full_tag_cloud_items_number']);\n\n  // depending on its counter and the other tags counter, each tag has a level\n  $tags = add_level_to_tags($tags);\n\n  // we want tags diplayed in alphabetic order\n  usort($tags, 'tag_alpha_compare');\n\n  // display sorted tags\n  foreach ($tags as $tag)\n  {\n    $template->append(\n      'tags',\n      array_merge(\n        $tag,\n        array(\n          'URL' => make_index_url(\n            array(\n              'tags' => array($tag),\n              )\n            ),\n          )\n        )\n      );\n  }\n}\n// include menubar\n$themeconf = $template->get_template_vars('themeconf');\nif (!isset($themeconf['hide_menu_on']) OR !in_array('theTagsPage', $themeconf['hide_menu_on']))\n{\n  include( PHPWG_ROOT_PATH.'include/menubar.inc.php');\n}\n\ninclude(PHPWG_ROOT_PATH.'include/page_header.php');\ntrigger_notify('loc_end_tags');\nflush_page_messages();\n$template->pparse('tags');\ninclude(PHPWG_ROOT_PATH.'include/page_tail.php');\n?>"
        },
        {
          "name": "template-extension",
          "type": "tree",
          "content": null
        },
        {
          "name": "themes",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "upgrade.php",
          "type": "blob",
          "size": 15.8916015625,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n// right after the overwrite of previous version files by the unzip in the administration,\n// PHP engine might still have old files in cache. We do not want to use the cache and\n// force reload of all application files. Thus we disable opcache.\nif (function_exists('ini_set'))\n{\n  @ini_set('opcache.enable', 0);\n}\n\ndefine('PHPWG_ROOT_PATH', './');\n\n// load config file\ninclude(PHPWG_ROOT_PATH . 'include/config_default.inc.php');\n@include(PHPWG_ROOT_PATH. 'local/config/config.inc.php');\ndefined('PWG_LOCAL_DIR') or define('PWG_LOCAL_DIR', 'local/');\n\n$config_file = PHPWG_ROOT_PATH.PWG_LOCAL_DIR.'config/database.inc.php';\n$config_file_contents = @file_get_contents($config_file);\nif ($config_file_contents === false)\n{\n  die('Cannot load '.$config_file);\n}\n$php_end_tag = strrpos($config_file_contents, '?'.'>');\nif ($php_end_tag === false)\n{\n  die('Cannot find php end tag in '.$config_file);\n}\n\ninclude($config_file);\n\n// $conf is not used for users tables - define cannot be re-defined\ndefine('USERS_TABLE', $prefixeTable.'users');\ninclude_once(PHPWG_ROOT_PATH.'include/constants.php');\ndefine('PREFIX_TABLE', $prefixeTable);\ndefine('UPGRADES_PATH', PHPWG_ROOT_PATH.'install/db');\n\ninclude_once(PHPWG_ROOT_PATH.'include/functions.inc.php');\ninclude_once(PHPWG_ROOT_PATH.'admin/include/functions.php');\ninclude_once(PHPWG_ROOT_PATH . 'include/template.class.php');\n\n// +-----------------------------------------------------------------------+\n// |                              functions                                |\n// +-----------------------------------------------------------------------+\n\n/**\n * list all tables in an array\n *\n * @return array\n */\nfunction get_tables()\n{\n  $tables = array();\n\n  $query = '\nSHOW TABLES\n;';\n  $result = pwg_query($query);\n\n  while ($row = pwg_db_fetch_row($result))\n  {\n    if (preg_match('/^'.PREFIX_TABLE.'/', $row[0]))\n    {\n      $tables[] = $row[0];\n    }\n  }\n\n  return $tables;\n}\n\n/**\n * list all columns of each given table\n *\n * @return array of array\n */\nfunction get_columns_of($tables)\n{\n  $columns_of = array();\n\n  foreach ($tables as $table)\n  {\n    $query = '\nDESC `'.$table.'`\n;';\n    $result = pwg_query($query);\n\n    $columns_of[$table] = array();\n\n    while ($row = pwg_db_fetch_row($result))\n    {\n      $columns_of[$table][] = $row[0];\n    }\n  }\n\n  return $columns_of;\n}\n\n/**\n */\nfunction print_time($message)\n{\n  global $last_time;\n\n  $new_time = get_moment();\n  echo '<pre>['.get_elapsed_time($last_time, $new_time).']';\n  echo ' '.$message;\n  echo '</pre>';\n  flush();\n  $last_time = $new_time;\n}\n\n// +-----------------------------------------------------------------------+\n// |                             playing zone                              |\n// +-----------------------------------------------------------------------+\n\n// echo implode('<br>', get_tables());\n// echo '<pre>'; print_r(get_columns_of(get_tables())); echo '</pre>';\n\n// foreach (get_available_upgrade_ids() as $upgrade_id)\n// {\n//   echo $upgrade_id, '<br>';\n// }\n\n// +-----------------------------------------------------------------------+\n// |                             language                                  |\n// +-----------------------------------------------------------------------+\ninclude(PHPWG_ROOT_PATH . 'admin/include/languages.class.php');\n$languages = new languages('utf-8');\nif (isset($_GET['language']))\n{\n  $language = strip_tags($_GET['language']);\n\n  if (!in_array($language, array_keys($languages->fs_languages)))\n  {\n    $language = PHPWG_DEFAULT_LANGUAGE;\n  }\n}\nelse\n{\n  $language = 'en_UK';\n  // Try to get browser language\n  foreach ($languages->fs_languages as $language_code => $fs_language)\n  {\n    if (substr($language_code,0,2) == @substr($_SERVER[\"HTTP_ACCEPT_LANGUAGE\"],0,2))\n    {\n      $language = $language_code;\n      break;\n    }\n  }\n}\n\nif ('fr_FR' == $language) {\n  define('PHPWG_DOMAIN', 'fr.piwigo.org');\n}\nelse if ('it_IT' == $language) {\n  define('PHPWG_DOMAIN', 'it.piwigo.org');\n}\nelse if ('de_DE' == $language) {\n  define('PHPWG_DOMAIN', 'de.piwigo.org');\n}\nelse if ('es_ES' == $language) {\n  define('PHPWG_DOMAIN', 'es.piwigo.org');\n}\nelse if ('pl_PL' == $language) {\n  define('PHPWG_DOMAIN', 'pl.piwigo.org');\n}\nelse if ('zh_CN' == $language) {\n  define('PHPWG_DOMAIN', 'cn.piwigo.org');\n}\nelse if ('ru_RU' == $language) {\n  define('PHPWG_DOMAIN', 'ru.piwigo.org');\n}\nelse if ('nl_NL' == $language) {\n  define('PHPWG_DOMAIN', 'nl.piwigo.org');\n}\nelse if ('tr_TR' == $language) {\n  define('PHPWG_DOMAIN', 'tr.piwigo.org');\n}\nelse if ('da_DK' == $language) {\n  define('PHPWG_DOMAIN', 'da.piwigo.org');\n}\nelse if ('pt_BR' == $language) {\n  define('PHPWG_DOMAIN', 'br.piwigo.org');\n}\nelse {\n  define('PHPWG_DOMAIN', 'piwigo.org');\n}\ndefine('PHPWG_URL', 'https://'.PHPWG_DOMAIN);\n\nload_language( 'common.lang', '', array('language'=>$language, 'target_charset'=>'utf-8', 'no_fallback' => true) );\nload_language( 'admin.lang', '', array('language'=>$language, 'target_charset'=>'utf-8', 'no_fallback' => true) );\nload_language( 'install.lang', '', array('language'=>$language, 'target_charset'=>'utf-8', 'no_fallback' => true) );\nload_language( 'upgrade.lang', '', array('language'=>$language, 'target_charset'=>'utf-8', 'no_fallback' => true) );\n\n// +-----------------------------------------------------------------------+\n// |                          database connection                          |\n// +-----------------------------------------------------------------------+\ninclude_once(PHPWG_ROOT_PATH.'admin/include/functions_upgrade.php');\ninclude(PHPWG_ROOT_PATH .'include/dblayer/functions_'.$conf['dblayer'].'.inc.php');\n\nupgrade_db_connect();\npwg_db_check_charset();\n\nlist($dbnow) = pwg_db_fetch_row(pwg_query('SELECT NOW();'));\ndefine('CURRENT_DATE', $dbnow);\n\n// +-----------------------------------------------------------------------+\n// |                        template initialization                        |\n// +-----------------------------------------------------------------------+\n\n$template = new Template(PHPWG_ROOT_PATH.'admin/themes', 'clear');\n$template->set_filenames(array('upgrade'=>'upgrade.tpl'));\n$template->assign(array(\n  'RELEASE' => PHPWG_VERSION,\n  'L_UPGRADE_HELP' => l10n('Need help ? Ask your question on <a href=\"%s\">Piwigo message board</a>.', PHPWG_URL.'/forum'),\n  )\n);\n\n// +-----------------------------------------------------------------------+\n// | Remote sites are not compatible with Piwigo 2.4+                      |\n// +-----------------------------------------------------------------------+\n\n$has_remote_site = false;\n\n$query = 'SELECT galleries_url FROM '.SITES_TABLE.';';\n$result = pwg_query($query);\nwhile ($row = pwg_db_fetch_assoc($result))\n{\n  if (url_is_remote($row['galleries_url']))\n  {\n    $has_remote_site = true;\n  }\n}\n\nif ($has_remote_site)\n{\n  include_once(PHPWG_ROOT_PATH.'admin/include/updates.class.php');\n  include_once(PHPWG_ROOT_PATH.'admin/include/pclzip.lib.php');\n\n  $page['errors'] = array();\n  $step = 3;\n  updates::upgrade_to('2.3.4', $step, false);\n\n  if (!empty($page['errors']))\n  {\n    echo '<ul>';\n    foreach ($page['errors'] as $error)\n    {\n      echo '<li>'.$error.'</li>';\n    }\n    echo '</ul>';\n  }\n\n  exit();\n}\n\n// +-----------------------------------------------------------------------+\n// |                            upgrade choice                             |\n// +-----------------------------------------------------------------------+\n\n$tables = get_tables();\n$columns_of = get_columns_of($tables);\n\n// find the current release\nif (!in_array('param', $columns_of[PREFIX_TABLE.'config']))\n{\n  // we're in branch 1.3, important upgrade, isn't it?\n  if (in_array(PREFIX_TABLE.'user_category', $tables))\n  {\n    $current_release = '1.3.1';\n  }\n  else\n  {\n    $current_release = '1.3.0';\n  }\n}\nelse if (!in_array(PREFIX_TABLE.'user_cache', $tables))\n{\n  $current_release = '1.4.0';\n}\nelse if (!in_array(PREFIX_TABLE.'tags', $tables))\n{\n  $current_release = '1.5.0';\n}\nelse if ( !in_array(PREFIX_TABLE.'plugins', $tables) )\n{\n  if (!in_array('auto_login_key', $columns_of[PREFIX_TABLE.'user_infos']))\n  {\n    $current_release = '1.6.0';\n  }\n  else\n  {\n    $current_release = '1.6.2';\n  }\n}\nelse if (!in_array('md5sum', $columns_of[PREFIX_TABLE.'images']))\n{\n  $current_release = '1.7.0';\n}\nelse if (!in_array(PREFIX_TABLE.'themes', $tables))\n{\n  $current_release = '2.0.0';\n}\nelse if (!in_array('added_by', $columns_of[PREFIX_TABLE.'images']))\n{\n  $current_release = '2.1.0';\n}\nelse if (!in_array('rating_score', $columns_of[PREFIX_TABLE.'images']))\n{\n  $current_release = '2.2.0';\n}\nelse if (!in_array('rotation', $columns_of[PREFIX_TABLE.'images']))\n{\n  $current_release = '2.3.0';\n}\nelse if (!in_array('website_url', $columns_of[PREFIX_TABLE.'comments']))\n{\n  $current_release = '2.4.0';\n}\nelse if (!in_array('nb_available_tags', $columns_of[PREFIX_TABLE.'user_cache']))\n{\n  $current_release = '2.5.0';\n}\nelse if (!in_array('activation_key_expire', $columns_of[PREFIX_TABLE.'user_infos']))\n{\n  $current_release = '2.6.0';\n}\nelse if (!in_array('auth_key_id', $columns_of[PREFIX_TABLE.'history']))\n{\n  $current_release = '2.7.0';\n}\nelse if (!in_array('history_id_to', $columns_of[PREFIX_TABLE.'history_summary']))\n{\n  $current_release = '2.8.0';\n}\nelse if (!in_array(PREFIX_TABLE.'activity', $tables))\n{\n  $current_release = '2.9.0';\n}\nelse\n{\n  // retrieve already applied upgrades\n  $query = '\nSELECT id\n  FROM '.PREFIX_TABLE.'upgrade\n;';\n  $applied_upgrades = array_from_query($query, 'id');\n\n  if (!in_array(159, $applied_upgrades))\n  {\n    $current_release = '2.10.0';\n  }\n  else if (!in_array(162, $applied_upgrades))\n  {\n    $current_release = '11.0.0';\n  }\n  else if (!in_array(164, $applied_upgrades))\n  {\n    $current_release = '12.0.0';\n  }\n  else if (!in_array(170, $applied_upgrades))\n  {\n    $current_release = '13.0.0';\n  }\n  else if (!in_array(174, $applied_upgrades))\n  {\n    $current_release = '14.0.0';\n  }\n  else\n  {\n    // confirm that the database is in the same version as source code files\n    conf_update_param('piwigo_db_version', get_branch_from_version(PHPWG_VERSION));\n\n    header('Content-Type: text/html; charset='.get_pwg_charset());\n    echo 'No upgrade required, the database structure is up to date';\n    echo '<br><a href=\"index.php\">← back to gallery</a>';\n    exit();\n  }\n}\n\n// +-----------------------------------------------------------------------+\n// |                            upgrade launch                             |\n// +-----------------------------------------------------------------------+\n$page['infos'] = array();\n$page['errors'] = array();\n$mysql_changes = array();\n\n// check php version\nif (version_compare(PHP_VERSION, REQUIRED_PHP_VERSION, '<'))\n{\n  // include(PHPWG_ROOT_PATH.'install/php5_apache_configuration.php'); // to remove, with all its related content\n  $page['errors'][] = l10n('PHP version %s required (you are running on PHP %s)', REQUIRED_PHP_VERSION, PHP_VERSION);\n}\n\ncheck_upgrade_access_rights();\n\nif ((isset($_POST['submit']) or isset($_GET['now']))\n  and check_upgrade())\n{\n  $upgrade_file = PHPWG_ROOT_PATH.'install/upgrade_'.$current_release.'.php';\n  if (is_file($upgrade_file))\n  {\n    // reset SQL counters\n    $page['queries_time'] = 0;\n    $page['count_queries'] = 0;\n    \n    $page['upgrade_start'] = get_moment();\n    $conf['die_on_sql_error'] = false;\n    include($upgrade_file);\n    conf_update_param('piwigo_db_version', get_branch_from_version(PHPWG_VERSION));\n\n    // Something to add in database.inc.php?\n    if (!empty($mysql_changes))\n    {\n      $config_file_contents = \n        substr($config_file_contents, 0, $php_end_tag) . \"\\r\\n\"\n        . implode(\"\\r\\n\" , $mysql_changes) . \"\\r\\n\"\n        . substr($config_file_contents, $php_end_tag);\n\n      if (!@file_put_contents($config_file, $config_file_contents))\n      {\n        $page['infos'][] = l10n(\n          'In <i>%s</i>, before <b>?></b>, insert:',\n          PWG_LOCAL_DIR.'config/database.inc.php'\n          )\n        .'<p><textarea rows=\"4\" cols=\"40\">'\n        .implode(\"\\r\\n\" , $mysql_changes).'</textarea></p>';\n      }\n    }\n\n    // Deactivate non standard extensions\n    deactivate_non_standard_plugins();\n    deactivate_non_standard_themes();\n    deactivate_templates();\n\n    $page['upgrade_end'] = get_moment();\n\n    $template->assign(\n      'upgrade',\n      array(\n        'VERSION' => $current_release,\n        'TOTAL_TIME' => get_elapsed_time(\n          $page['upgrade_start'],\n          $page['upgrade_end']\n          ),\n        'SQL_TIME' => number_format(\n          $page['queries_time'],\n          3,\n          '.',\n          ' '\n          ).' s',\n        'NB_QUERIES' => $page['count_queries']\n        )\n      );\n\n    $page['infos'][] = l10n('Perform a maintenance check in [Administration>Tools>Maintenance] if you encounter any problem.');\n\n    // Save $page['infos'] in order to restore after maintenance actions\n    $page['infos_sav'] = $page['infos'];\n    $page['infos'] = array();\n\n    $template->assign(\n      array(\n        'button_label' => l10n('Home'),\n        'button_link' => 'index.php',\n        )\n      );\n\n    // if the webmaster has a session, let's give a link to discover new features\n    if (!empty($_SESSION['pwg_uid']))\n    {\n      $version_ = str_replace('.', '_', get_branch_from_version(PHPWG_VERSION).'.0');\n      \n      if (file_exists(PHPWG_PLUGINS_PATH .'TakeATour/tours/'.$version_.'/config.inc.php'))\n      {\n        $query = '\nREPLACE INTO '.PLUGINS_TABLE.'\n  (id, state)\n  VALUES (\\'TakeATour\\', \\'active\\')\n;';\n        pwg_query($query);\n\n        // we need the secret key for get_pwg_token()\n        load_conf_from_db();\n        \n        $template->assign(\n          array(\n            'button_label' => l10n('Discover what\\'s new in Piwigo %s', get_branch_from_version(PHPWG_VERSION)),\n            'button_link' => 'admin.php?submited_tour_path=tours/'.$version_.'&amp;pwg_token='.get_pwg_token(),\n            )\n          );\n      }\n    }\n\n    // Delete cache data\n    include(PHPWG_ROOT_PATH . 'include/cache.class.php');\n\n    // invalidate_user_cache will purge persistent_cache so it needs to be instantiated first\n    $persistent_cache = new PersistentFileCache();\n\n    invalidate_user_cache(true);\n    $template->delete_compiled_templates();\n\n    // Restore $page['infos'] in order to hide informations messages from functions calles\n    // errors messages are not hide\n    $page['infos'] = $page['infos_sav'];\n\n  }\n}\n\n// +-----------------------------------------------------------------------+\n// |                          start template output                        |\n// +-----------------------------------------------------------------------+\nelse\n{\n  if (!defined('PWG_CHARSET'))\n  {\n    define('PWG_CHARSET', 'utf-8');\n  }\n\n  include_once(PHPWG_ROOT_PATH.'admin/include/languages.class.php');\n  $languages = new languages();\n  \n  foreach ($languages->fs_languages as $language_code => $fs_language)\n  {\n    if ($language == $language_code)\n    {\n      $template->assign('language_selection', $language_code);\n    }\n    $languages_options[$language_code] = $fs_language['name'];\n  }\n  $template->assign('language_options', $languages_options);\n\n  $template->assign('introduction', array(\n    'CURRENT_RELEASE' => $current_release,\n    'F_ACTION' => 'upgrade.php?language=' . $language));\n\n  if (!check_upgrade())\n  {\n    $template->assign('login', true);\n  }\n}\n\nif (count($page['errors']) != 0)\n{\n  $template->assign('errors', $page['errors']);\n}\n\nif (count($page['infos']) != 0)\n{\n  $template->assign('infos', $page['infos']);\n}\n\n// +-----------------------------------------------------------------------+\n// |                          sending html code                            |\n// +-----------------------------------------------------------------------+\n\n$template->pparse('upgrade');\n?>\n"
        },
        {
          "name": "upgrade_feed.php",
          "type": "blob",
          "size": 3.0849609375,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\n//check php version\nif (version_compare(PHP_VERSION, '5', '<'))\n{\n  die('Piwigo requires PHP 5 or above.');\n}\n\ndefine('PHPWG_ROOT_PATH', './');\n\ninclude(PHPWG_ROOT_PATH . 'include/config_default.inc.php');\n@include(PHPWG_ROOT_PATH. 'local/config/config.inc.php');\ndefined('PWG_LOCAL_DIR') or define('PWG_LOCAL_DIR', 'local/');\n\ninclude(PHPWG_ROOT_PATH.PWG_LOCAL_DIR .'config/database.inc.php');\ninclude(PHPWG_ROOT_PATH .'include/dblayer/functions_'.$conf['dblayer'].'.inc.php');\n\ninclude_once(PHPWG_ROOT_PATH.'include/functions.inc.php');\ninclude_once(PHPWG_ROOT_PATH.'admin/include/functions.php');\ninclude_once(PHPWG_ROOT_PATH.'admin/include/functions_upgrade.php');\n\n\n// +-----------------------------------------------------------------------+\n// | Check Access and exit when it is not ok                               |\n// +-----------------------------------------------------------------------+\n\nif (!$conf['check_upgrade_feed'])\n{\n  die(\"upgrade feed is not active\");\n}\n\nprepare_conf_upgrade();\n\ndefine('PREFIX_TABLE', $prefixeTable);\ndefine('UPGRADES_PATH', PHPWG_ROOT_PATH.'install/db');\n\n// +-----------------------------------------------------------------------+\n// |                         Database connection                           |\n// +-----------------------------------------------------------------------+\ntry\n{\n  pwg_db_connect($conf['db_host'], $conf['db_user'],\n                 $conf['db_password'], $conf['db_base']);\n}\ncatch (Exception $e)\n{\n  my_error(l10n($e->getMessage(), true)); \n}\n\npwg_db_check_charset();\n\n// +-----------------------------------------------------------------------+\n// |                              Upgrades                                 |\n// +-----------------------------------------------------------------------+\n\n// retrieve already applied upgrades\n$query = '\nSELECT id\n  FROM '.PREFIX_TABLE.'upgrade\n;';\n$applied = array_from_query($query, 'id');\n\n// retrieve existing upgrades\n$existing = get_available_upgrade_ids();\n\n// which upgrades need to be applied?\n$to_apply = array_diff($existing, $applied);\n\necho '<pre>';\necho count($to_apply).' upgrades to apply';\n\nforeach ($to_apply as $upgrade_id)\n{\n  unset($upgrade_description);\n\n  echo \"\\n\\n\";\n  echo '=== upgrade '.$upgrade_id.\"\\n\";\n\n  // include & execute upgrade script. Each upgrade script must contain\n  // $upgrade_description variable which describe briefly what the upgrade\n  // script does.\n  include(UPGRADES_PATH.'/'.$upgrade_id.'-database.php');\n\n  // notify upgrade\n  $query = '\nINSERT INTO '.PREFIX_TABLE.'upgrade\n  (id, applied, description)\n  VALUES\n  (\\''.$upgrade_id.'\\', NOW(), \\''.$upgrade_description.'\\')\n;';\n  pwg_query($query);\n}\n\necho '</pre>';\n?>\n"
        },
        {
          "name": "ws.php",
          "type": "blob",
          "size": 56.5068359375,
          "content": "<?php\n// +-----------------------------------------------------------------------+\n// | This file is part of Piwigo.                                          |\n// |                                                                       |\n// | For copyright and license information, please view the COPYING.txt    |\n// | file that was distributed with this source code.                      |\n// +-----------------------------------------------------------------------+\n\ndefine ('PHPWG_ROOT_PATH', './');\ndefine ('IN_WS', true);\n\ninclude_once(PHPWG_ROOT_PATH.'include/common.inc.php');\ncheck_status(ACCESS_FREE);\n\nif ( !$conf['allow_web_services'] )\n{\n  page_forbidden('Web services are disabled');\n}\n\ninclude_once(PHPWG_ROOT_PATH.'include/ws_init.inc.php');\n\n$service->run();\n\n\n/**\n * event handler that registers standard methods with the web service\n */\nfunction ws_addDefaultMethods( $arr )\n{\n  global $conf, $user;\n  $service = &$arr[0];\n  \n  include_once(PHPWG_ROOT_PATH.'include/ws_functions.inc.php');\n  $ws_functions_root = PHPWG_ROOT_PATH.'include/ws_functions/';\n  \n  $f_params = array(\n    'f_min_rate' => array('default'=>null,\n                          'type'=>WS_TYPE_FLOAT),\n    'f_max_rate' => array('default'=>null,\n                          'type'=>WS_TYPE_FLOAT),\n    'f_min_hit' =>  array('default'=>null,\n                          'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n    'f_max_hit' =>  array('default'=>null,\n                          'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n    'f_min_ratio' => array('default'=>null,\n                           'type'=>WS_TYPE_FLOAT|WS_TYPE_POSITIVE),\n    'f_max_ratio' => array('default'=>null,\n                           'type'=>WS_TYPE_FLOAT|WS_TYPE_POSITIVE),\n    'f_max_level' => array('default'=>null,\n                           'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n    'f_min_date_available' => array('default'=>null),\n    'f_max_date_available' => array('default'=>null),\n    'f_min_date_created' =>   array('default'=>null),\n    'f_max_date_created' =>   array('default'=>null),\n    );\n  \n  $service->addMethod(\n      'pwg.getVersion',\n      'ws_getVersion',\n      null,\n      'Returns the Piwigo version.',\n      $ws_functions_root . 'pwg.php'\n    );\n\t  \n  $service->addMethod(\n      'pwg.getInfos',\n      'ws_getInfos',\n      null,\n      'Returns general informations.',\n      $ws_functions_root . 'pwg.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.getCacheSize',\n      'ws_getCacheSize',\n      null,\n      'Returns general informations.',\n      $ws_functions_root . 'pwg.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n    'pwg.activity.getList',\n    'ws_getActivityList',\n    array(\n      'page' => array('default'=>null,\n                      'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n      'uid' => array('default'=>NULL,\n                     'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n      ),\n    'Returns general informations.',\n    $ws_functions_root . 'pwg.php',\n    array('admin_only'=>true)\n  );\n\n  $service->addMethod(\n    'pwg.activity.downloadLog',\n    'ws_activity_downloadLog',\n    null,\n    'Returns general informations.',\n    $ws_functions_root . 'pwg.php',\n    array('admin_only'=>true)\n  );\n\n  $service->addMethod(\n      'pwg.caddie.add',\n      'ws_caddie_add',\n      array(\n        'image_id'=> array('flags'=>WS_PARAM_FORCE_ARRAY,\n                           'type'=>WS_TYPE_ID),\n        ),\n      'Adds elements to the caddie. Returns the number of elements added.',\n      $ws_functions_root . 'pwg.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.categories.getImages',\n      'ws_categories_getImages',\n      array_merge(array(\n        'cat_id' =>     array('default'=>null,\n                              'flags'=>WS_PARAM_FORCE_ARRAY,\n                              'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'recursive' =>  array('default'=>false,\n                              'type'=>WS_TYPE_BOOL),\n        'per_page' =>   array('default'=>100,\n                              'maxValue'=>$conf['ws_max_images_per_page'],\n                              'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'page' =>       array('default'=>0,\n                              'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'order' =>      array('default'=>null,\n                              'info'=>'id, file, name, hit, rating_score, date_creation, date_available, random'),\n        ), $f_params),\n      'Returns elements for the corresponding categories.\n<br><b>cat_id</b> can be empty if <b>recursive</b> is true.\n<br><b>order</b> comma separated fields for sorting',\n      $ws_functions_root . 'pwg.categories.php'\n    );\n\n  $service->addMethod(\n      'pwg.categories.getList',\n      'ws_categories_getList',\n      array(\n        'cat_id' =>       array('default'=>null,\n                                'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE,\n                                'info'=>'Parent category. \"0\" or empty for root.'),\n        'recursive' =>    array('default'=>false,\n                                'type'=>WS_TYPE_BOOL),\n        'public' =>       array('default'=>false,\n                                'type'=>WS_TYPE_BOOL),\n        'tree_output' =>  array('default'=>false,\n                                'type'=>WS_TYPE_BOOL),\n        'fullname' =>     array('default'=>false,\n                                'type'=>WS_TYPE_BOOL),\n        'thumbnail_size' => array(\n          'default' => IMG_THUMB,\n          'info' => implode(',', array_keys(ImageStdParams::get_defined_type_map()))\n          ),\n        'search' => array('default' => null),\n        'limit' => array(\n          'default' => null,\n          'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE,\n          'info' => 'Parameter not compatible with recursive=true'),\n        ),\n      'Returns a list of categories.',\n      $ws_functions_root . 'pwg.categories.php'\n    );\n\n  $service->addMethod(\n      'pwg.getMissingDerivatives',\n      'ws_getMissingDerivatives',\n      array_merge(array(\n        'types' =>        array('default'=>null,\n                                'flags'=>WS_PARAM_FORCE_ARRAY,\n                                'info'=>'square, thumb, 2small, xsmall, small, medium, large, xlarge, xxlarge'),\n        'ids' =>          array('default'=>null,\n                                'flags'=>WS_PARAM_FORCE_ARRAY,\n                                'type'=>WS_TYPE_ID),\n        'max_urls' =>     array('default'=>200,\n                                'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'prev_page' =>    array('default'=>null,\n                                'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        ), $f_params),\n      'Returns a list of derivatives to build.',\n      $ws_functions_root . 'pwg.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.images.addComment',\n      'ws_images_addComment',\n      array(\n        'image_id' => array('type'=>WS_TYPE_ID),\n        'author' =>   array('default'=>is_a_guest()?'guest':$user['username']),\n        'content' =>  array(),\n        'key' =>      array(),\n        ),\n      'Adds a comment to an image.',\n      $ws_functions_root . 'pwg.images.php',\n      array('post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.images.getInfo',\n      'ws_images_getInfo',\n      array(\n        'image_id' =>           array('type'=>WS_TYPE_ID),\n        'comments_page' =>      array('default'=>0,\n                                      'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'comments_per_page' =>  array('default'=>$conf['nb_comment_page'],\n                                      'maxValue'=>2*$conf['nb_comment_page'],\n                                      'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        ),\n      'Returns information about an image.',\n      $ws_functions_root . 'pwg.images.php'\n    );\n\n  $service->addMethod(\n      'pwg.images.rate',\n      'ws_images_rate',\n      array(\n        'image_id' => array('type'=>WS_TYPE_ID),\n        'rate' =>     array('type'=>WS_TYPE_FLOAT),\n      ),\n      'Rates an image.',\n      $ws_functions_root . 'pwg.images.php'\n    );\n\n  $service->addMethod(\n      'pwg.images.search',\n      'ws_images_search',\n      array_merge(array(\n        'query' =>        array(),\n        'per_page' =>     array('default'=>100,\n                                'maxValue'=>$conf['ws_max_images_per_page'],\n                                'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'page' =>         array('default'=>0,\n                                'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'order' =>        array('default'=>null,\n                                'info'=>'id, file, name, hit, rating_score, date_creation, date_available, random'),\n        ), $f_params),\n      'Returns elements for the corresponding query search.',\n      $ws_functions_root . 'pwg.images.php'\n    );\n\n  $service->addMethod(\n      'pwg.images.setPrivacyLevel',\n      'ws_images_setPrivacyLevel',\n      array(\n        'image_id' => array('flags'=>WS_PARAM_FORCE_ARRAY,\n                            'type'=>WS_TYPE_ID),\n        'level' =>    array('maxValue'=>max($conf['available_permission_levels']),\n                            'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        ),\n      'Sets the privacy levels for the images.',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.images.formats.searchImage',\n      'ws_images_formats_searchImage',\n      array(\n        'category_id' => array('type'=>WS_TYPE_ID, 'default'=>null),\n        'filename_list' => array(),\n        ),\n      'Search for image ids matching the provided filenames. <b>filename_list</b> must be a JSON encoded associative array of unique_id:filename.<br><br>The method returns a list of unique_id:image_id.',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n  \n  $service->addMethod(\n      'pwg.images.formats.delete',\n      'ws_images_formats_delete',\n      array(\n        'format_id' => array('type'=>WS_TYPE_ID, 'default'=>null, 'flags'=>WS_PARAM_ACCEPT_ARRAY),\n        'pwg_token' =>  array(),\n        ),\n      'Remove a format',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.images.setRank',\n      'ws_images_setRank',\n      array(\n        'image_id'    => array('type'=>WS_TYPE_ID,'flags'=>WS_PARAM_FORCE_ARRAY),\n        'category_id' => array('type'=>WS_TYPE_ID),\n        'rank'        => array('type'=>WS_TYPE_INT|WS_TYPE_POSITIVE|WS_TYPE_NOTNULL, 'default'=>null)\n        ),\n      'Sets the rank of a photo for a given album.\n<br><br>If you provide a list for image_id:\n<ul>\n<li>rank becomes useless, only the order of the image_id list matters</li>\n<li>you are supposed to provide the list of all image_ids belonging to the album.\n</ul>',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.images.setCategory',\n      'ws_images_setCategory',\n      array(\n        'image_id'    => array('flags'=>WS_PARAM_FORCE_ARRAY, 'type'=>WS_TYPE_ID),\n        'category_id' => array('type'=>WS_TYPE_ID),\n        'action'      => array('default'=>'associate', 'info' => 'associate/dissociate/move'),\n        'pwg_token'   => array(),\n        ),\n      'Manage associations of images with an album. <b>action</b> can be:<ul><li><i>associate</i> : add photos to this album</li><li><i>dissociate</i> : remove photos from this album</li><li><i>move</i> : dissociate photos from any other album and adds photos to this album</li></ul>',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.rates.delete',\n      'ws_rates_delete',\n      array(\n        'user_id' =>      array('type'=>WS_TYPE_ID),\n        'anonymous_id' => array('default'=>null),\n        'image_id' =>     array('flags'=>WS_PARAM_OPTIONAL, 'type'=>WS_TYPE_ID),\n        ),\n      'Deletes all rates for a user.',\n      $ws_functions_root . 'pwg.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.session.getStatus',\n      'ws_session_getStatus',\n      null,\n      'Gets information about the current session. Also provides a token useable with admin methods.',\n      $ws_functions_root . 'pwg.php'\n    );\n\n  $service->addMethod(\n      'pwg.session.login',\n      'ws_session_login',\n      array(\n        'username' => array(),\n        'password' => array('default'=>null),\n      ),\n      'Tries to login the user.',\n      $ws_functions_root . 'pwg.php',\n      array('post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.session.logout',\n      'ws_session_logout',\n      null,\n      'Ends the current session.',\n      $ws_functions_root . 'pwg.php'\n    );\n\n  $service->addMethod(\n      'pwg.tags.getList',\n      'ws_tags_getList',\n      array(\n        'sort_by_counter' => array('default'=>false,\n                                   'type'=>WS_TYPE_BOOL),\n        ),\n      'Retrieves a list of available tags.',\n      $ws_functions_root . 'pwg.tags.php'\n    );\n\n  $service->addMethod(\n      'pwg.tags.getImages',\n      'ws_tags_getImages',\n      array_merge(array(\n        'tag_id' =>       array('default'=>null,\n                                'flags'=>WS_PARAM_FORCE_ARRAY,\n                                'type'=>WS_TYPE_ID),\n        'tag_url_name' => array('default'=>null,\n                                'flags'=>WS_PARAM_FORCE_ARRAY),\n        'tag_name' =>     array('default'=>null,\n                                'flags'=>WS_PARAM_FORCE_ARRAY),\n        'tag_mode_and' => array('default'=>false,\n                                'type'=>WS_TYPE_BOOL),\n        'per_page' =>     array('default'=>100,\n                                'maxValue'=>$conf['ws_max_images_per_page'],\n                                'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'page' =>         array('default'=>0,\n                                'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'order' =>        array('default'=>null,\n                                'info'=>'id, file, name, hit, rating_score, date_creation, date_available, random'),\n        ), $f_params),\n      'Returns elements for the corresponding tags. Fill at least tag_id, tag_url_name or tag_name.',\n      $ws_functions_root . 'pwg.tags.php'\n    );\n\n  $service->addMethod(\n      'pwg.images.addChunk',\n      'ws_images_add_chunk',\n      array(\n        'data' =>         array(),\n        'original_sum' => array(),\n        'type' =>         array('default'=>'file',\n                                'info'=>'Must be \"file\", for backward compatiblity \"high\" and \"thumb\" are allowed.'),\n        'position' =>     array()\n        ),\n      'Add a chunk of a file.',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.images.addFile',\n      'ws_images_addFile',\n      array(\n        'image_id' => array('type'=>WS_TYPE_ID),\n        'type' =>     array('default'=>'file',\n                            'info'=>'Must be \"file\", for backward compatiblity \"high\" and \"thumb\" are allowed.'),\n        'sum' =>      array(),\n        ),\n      'Add or update a file for an existing photo.\n<br>pwg.images.addChunk must have been called before (maybe several times).',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true)\n    );\n\n\n  $service->addMethod(\n      'pwg.images.add',\n      'ws_images_add',\n      array(\n        'thumbnail_sum' =>      array('default'=>null),\n        'high_sum' =>           array('default'=>null),\n        'original_sum' =>       array(),\n        'original_filename' =>  array('default'=>null,\n                                      'Provide it if \"check_uniqueness\" is true and $conf[\"uniqueness_mode\"] is \"filename\".'),\n        'name' =>               array('default'=>null),\n        'author' =>             array('default'=>null),\n        'date_creation' =>      array('default'=>null),\n        'comment' =>            array('default'=>null),\n        'categories' =>         array('default'=>null,\n                                      'info'=>'String list \"category_id[,rank];category_id[,rank]\".<br>The rank is optional and is equivalent to \"auto\" if not given.'),\n        'tag_ids' =>            array('default'=>null,\n                                      'info'=>'Comma separated ids'),\n        'level' =>              array('default'=>0,\n                                      'maxValue'=>max($conf['available_permission_levels']),\n                                      'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'check_uniqueness' =>   array('default'=>true,\n                                      'type'=>WS_TYPE_BOOL),\n        'image_id' =>           array('default'=>null,\n                                      'type'=>WS_TYPE_ID),\n        ),\n      'Add an image.\n<br>pwg.images.addChunk must have been called before (maybe several times).\n<br>Don\\'t use \"thumbnail_sum\" and \"high_sum\", these parameters are here for backward compatibility.',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.images.addSimple',\n      'ws_images_addSimple',\n      array(\n        'category' => array('default'=>null,\n                            'flags'=>WS_PARAM_FORCE_ARRAY,\n                            'type'=>WS_TYPE_ID),\n        'name' =>     array('default'=>null),\n        'author' =>   array('default'=>null),\n        'comment' =>  array('default'=>null),\n        'level' =>    array('default'=>0,\n                            'maxValue'=>max($conf['available_permission_levels']),\n                            'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'tags' =>     array('default'=>null,\n                            'flags'=>WS_PARAM_ACCEPT_ARRAY),\n        'image_id' => array('default'=>null,\n                            'type'=>WS_TYPE_ID),\n        ),\n      'Add an image.\n<br>Use the <b>$_FILES[image]</b> field for uploading file.\n<br>Set the form encoding to \"form-data\".\n<br>You can update an existing photo if you define an existing image_id.',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.images.upload',\n      'ws_images_upload',\n      array(\n        'name' => array('default' => null),\n        'category' => array(\n          'default'=>null,\n          'flags'=>WS_PARAM_FORCE_ARRAY,\n          'type'=>WS_TYPE_ID\n          ),\n        'level' => array(\n          'default' => 0,\n          'maxValue' => max($conf['available_permission_levels']),\n          'type' => WS_TYPE_INT|WS_TYPE_POSITIVE\n          ),\n        'format_of' => array(\n          'default' => null,\n          'type' => WS_TYPE_ID,\n          'info' => 'id of the extended image (name/category/level are not used if format_of is provided)',\n          ),\n        'pwg_token' => array(),\n        ),\n      'Add an image.\n<br>Use the <b>$_FILES[image]</b> field for uploading file.\n<br>Set the form encoding to \"form-data\".',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n    'pwg.images.uploadAsync',\n    'ws_images_uploadAsync',\n    array(\n        'username' => array(),\n        'password' => array('default'=>null),\n        'chunk' => array('type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'chunk_sum' => array(),\n        'chunks' => array('type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'original_sum' => array(),\n        'category' => array('default'=>null, 'flags'=>WS_PARAM_FORCE_ARRAY, 'type'=>WS_TYPE_ID),\n        'filename' => array(),\n        'name' => array('default'=>null),\n        'author' => array('default'=>null),\n        'comment' => array('default'=>null),\n        'date_creation' => array('default'=>null),\n        'level' => array('default'=>0, 'maxValue'=>max($conf['available_permission_levels']), 'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'tag_ids' => array('default'=>null, 'info'=>'Comma separated ids'),\n        'image_id' => array('default'=>null, 'type'=>WS_TYPE_ID),\n    ),\n    'Upload photo by chunks in a random order.\n<br>Use the <b>$_FILES[file]</b> field for uploading file.\n<br>Start with chunk 0 (zero).\n<br>Set the form encoding to \"form-data\".\n<br>You can update an existing photo if you define an existing image_id.\n<br>Requires <b>admin</b> credentials.',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n  \n  $service->addMethod(\n      'pwg.images.delete',\n      'ws_images_delete',\n      array(\n        'image_id' =>   array('flags'=>WS_PARAM_ACCEPT_ARRAY),\n        'pwg_token' =>  array(),\n        ),\n      'Deletes image(s).',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.images.setMd5sum',\n      'ws_images_setMd5sum',\n      array(\n        'block_size' => array('default'=>$conf['checksum_compute_blocksize'], 'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'pwg_token' =>  array(),\n        ),\n      'Set md5sum column, by blocks. Returns how many md5sums were added and how many are remaining.',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.images.syncMetadata',\n      'ws_images_syncMetadata',\n      array(\n        'image_id' => array('flags'=>WS_PARAM_ACCEPT_ARRAY, 'info'=>'Comma separated ids or array of id'),\n        'pwg_token' =>  array(),\n        ),\n      'Sync metadatas, by blocks. Returns how many images were synchronized',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.images.deleteOrphans',\n      'ws_images_deleteOrphans',\n      array(\n        'block_size' => array('default'=>1000, 'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'pwg_token' =>  array(),\n        ),\n      'Deletes orphans, by blocks. Returns how many orphans were deleted and how many are remaining.',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.categories.calculateOrphans',\n      'ws_categories_calculateOrphans',\n      array(\n        'category_id' =>  array('type'=>WS_TYPE_ID,\n                                'flags'=>WS_PARAM_FORCE_ARRAY),\n        ),\n      'Return the number of orphan photos if an album is deleted.',\n      $ws_functions_root . 'pwg.categories.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.categories.getAdminList',\n      'ws_categories_getAdminList',\n      array(\n        'cat_id' =>       array('default'=>null,\n                                'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE,\n                                'info'=>'Parent category. \"0\" or empty for root.'),\n        'search' => array('default' => null),\n        'recursive' => array(\n          'default' => true,\n          'type' => WS_TYPE_BOOL),\n        'additional_output' =>    array('default'=>null,\n                              'info'=>'Comma saparated list (see method description)'),\n      ),\n      'Get albums list as displayed on admin page. <br>\n      <b>additional_output</b> controls which data are returned, possible values are:<br>\n      null, full_name_with_admin_links<br>',\n      $ws_functions_root . 'pwg.categories.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.categories.add',\n      'ws_categories_add',\n      array(\n        'name' =>         array(),\n        'parent' =>       array('default'=>null,\n                                'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'comment' =>      array('default'=>null),\n        'visible' =>      array('default'=>true,\n                                'type'=>WS_TYPE_BOOL),\n        'status' =>       array('default'=>null,\n                                'info'=>'public, private'),\n        'commentable' =>  array('default'=>true,\n                                'type'=>WS_TYPE_BOOL),\n        'position' =>     array('default'=>null, 'info'=>'first, last'),\n        'pwg_token' => array('flags'=>WS_PARAM_OPTIONAL),\n        ),\n      'Adds an album.<br><br><b>pwg_token</b> required if you want to use HTML in name/comment.',\n      $ws_functions_root . 'pwg.categories.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.categories.delete',\n      'ws_categories_delete',\n      array(\n        'category_id'=>           array('flags'=>WS_PARAM_ACCEPT_ARRAY),\n        'photo_deletion_mode' =>  array('default'=>'delete_orphans'),\n        'pwg_token' =>            array(),\n        ),\n      'Deletes album(s).\n<br><b>photo_deletion_mode</b> can be \"no_delete\" (may create orphan photos), \"delete_orphans\"\n(default mode, only deletes photos linked to no other album) or \"force_delete\" (delete all photos, even those linked to other albums)',\n      $ws_functions_root . 'pwg.categories.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.categories.move',\n      'ws_categories_move',\n      array(\n        'category_id' =>  array('flags'=>WS_PARAM_ACCEPT_ARRAY),\n        'parent' =>       array('type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'pwg_token' =>    array(),\n        ),\n      'Move album(s).\n<br>Set parent as 0 to move to gallery root. Only virtual categories can be moved.',\n      $ws_functions_root . 'pwg.categories.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.categories.setRepresentative',\n      'ws_categories_setRepresentative',\n      array(\n        'category_id' =>  array('type'=>WS_TYPE_ID),\n        'image_id' =>     array('type'=>WS_TYPE_ID),\n        ),\n      'Sets the representative photo for an album. The photo doesn\\'t have to belong to the album.',\n      $ws_functions_root . 'pwg.categories.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n  \n  $service->addMethod(\n      'pwg.categories.deleteRepresentative',\n      'ws_categories_deleteRepresentative',\n      array(\n        'category_id' =>  array('type'=>WS_TYPE_ID),\n        ),\n      'Deletes the album thumbnail. Only possible if $conf[\\'allow_random_representative\\']',\n      $ws_functions_root . 'pwg.categories.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.categories.refreshRepresentative',\n      'ws_categories_refreshRepresentative',\n      array(\n        'category_id' =>  array('type'=>WS_TYPE_ID),\n        ),\n      'Find a new album thumbnail.',\n      $ws_functions_root . 'pwg.categories.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.tags.getAdminList',\n      'ws_tags_getAdminList',\n      null,\n      '<b>Admin only.</b>',\n      $ws_functions_root . 'pwg.tags.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod( // TODO: create multiple tags\n      'pwg.tags.add',\n      'ws_tags_add',\n      array(\n        'name' => array()\n      ),\n      'Adds a new tag.',\n      $ws_functions_root . 'pwg.tags.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.tags.delete',\n      'ws_tags_delete',\n      array(\n        'tag_id' => array('type'=>WS_TYPE_ID,\n                      'flags'=>WS_PARAM_FORCE_ARRAY),\n        'pwg_token' =>  array(),\n        ),\n      'Delete tag(s) by ID.',\n      $ws_functions_root . 'pwg.tags.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.tags.rename',\n      'ws_tags_rename',\n      array(\n        'tag_id' => array('type'=>WS_TYPE_ID),\n        'new_name' => array(),\n        'pwg_token' =>  array(),\n        ),\n      'Rename tag',\n      $ws_functions_root . 'pwg.tags.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.tags.duplicate',\n      'ws_tags_duplicate',\n      array(\n        'tag_id' => array('type'=>WS_TYPE_ID),\n        'copy_name' => array(),\n        'pwg_token' => array(),\n        ),\n      'Create a copy of a tag',\n      $ws_functions_root . 'pwg.tags.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.tags.merge',\n      'ws_tags_merge',\n      array(\n        'destination_tag_id' => array('type'=>WS_TYPE_ID,\n          'info'=>'Is not necessarily part of groups to merge'),\n        'merge_tag_id' => array('flags'=>WS_PARAM_FORCE_ARRAY,\n          'type'=>WS_TYPE_ID),\n        'pwg_token' => array(),\n        ),\n      'Merge tags in one other group',\n      $ws_functions_root . 'pwg.tags.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.images.exist',\n      'ws_images_exist',\n      array(\n        'md5sum_list' =>    array('default'=>null),\n        'filename_list' =>  array('default'=>null),\n        ),\n      'Checks existence of images.\n<br>Give <b>md5sum_list</b> if $conf[uniqueness_mode]==md5sum. Give <b>filename_list</b> if $conf[uniqueness_mode]==filename.',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.images.checkFiles',\n      'ws_images_checkFiles',\n      array(\n        'image_id' =>       array('type'=>WS_TYPE_ID),\n        'file_sum' =>       array('default'=>null),\n        'thumbnail_sum' =>  array('default'=>null),\n        'high_sum' =>       array('default'=>null),\n        ),\n      'Checks if you have updated version of your files for a given photo, the answer can be \"missing\", \"equals\" or \"differs\".\n<br>Don\\'t use \"thumbnail_sum\" and \"high_sum\", these parameters are here for backward compatibility.',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.images.checkUpload',\n      'ws_images_checkUpload',\n      null,\n      'Checks if Piwigo is ready for upload.',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.images.emptyLounge',\n      'ws_images_emptyLounge',\n      null,\n      'Empty lounge, where images may be waiting before taking off.',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.images.uploadCompleted',\n      'ws_images_uploadCompleted',\n      array(\n        'image_id' => array('default'=>null, 'flags'=>WS_PARAM_ACCEPT_ARRAY),\n        'pwg_token' => array(),\n        'category_id' => array('type'=>WS_TYPE_ID),\n        ),\n      'Notify Piwigo you have finished uploading a set of photos. It will empty the lounge, if any.',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.images.setInfo',\n      'ws_images_setInfo',\n      array(\n        'image_id' =>       array('type'=>WS_TYPE_ID),\n        'file' =>           array('default'=>null),\n        'name' =>           array('default'=>null),\n        'author' =>         array('default'=>null),\n        'date_creation' =>  array('default'=>null),\n        'comment' =>        array('default'=>null),\n        'categories' =>     array('default'=>null,\n                                  'info'=>'String list \"category_id[,rank];category_id[,rank]\".<br>The rank is optional and is equivalent to \"auto\" if not given.'),\n        'tag_ids' =>        array('default'=>null,\n                                  'info'=>'Comma separated ids'),\n        'level' =>          array('default'=>null,\n                                  'maxValue'=>max($conf['available_permission_levels']),\n                                  'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'single_value_mode' =>    array('default'=>'fill_if_empty'),\n        'multiple_value_mode' =>  array('default'=>'append'),\n        'pwg_token' => array('flags'=>WS_PARAM_OPTIONAL),\n        ),\n      'Changes properties of an image.\n<br><b>single_value_mode</b> can be \"fill_if_empty\" (only use the input value if the corresponding values is currently empty) or \"replace\"\n(overwrite any existing value) and applies to single values properties like name/author/date_creation/comment.\n<br><b>multiple_value_mode</b> can be \"append\" (no change on existing values, add the new values) or \"replace\" and applies to multiple values properties like tag_ids/categories.\n<br><b>pwg_token</b> required if you want to use HTML in name/comment/author.',\n      $ws_functions_root . 'pwg.images.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.categories.setInfo',\n      'ws_categories_setInfo',\n      array(\n        'category_id' =>  array('type'=>WS_TYPE_ID),\n        'name' =>         array('default'=>null,\n                                'flags'=>WS_PARAM_OPTIONAL,),\n        'comment' =>      array('default'=>null,\n                                'flags'=>WS_PARAM_OPTIONAL,),\n        'status' =>       array('default'=>null,\n                                'flags'=>WS_PARAM_OPTIONAL,\n                                'info'=>'public, private'),\n        'visible' =>       array('default'=>null,\n                                'flags'=>WS_PARAM_OPTIONAL),\n        'commentable' =>  array('default'=>null,\n                                'flags'=>WS_PARAM_OPTIONAL,\n                                'info'=>'Boolean, effective if configuration variable activate_comments is set to true'),\n        'apply_commentable_to_subalbums' =>  array('default'=>null,\n                                'flags'=>WS_PARAM_OPTIONAL,\n                                'info'=>'If true, set commentable to all sub album'),\n        'pwg_token' => array('flags'=>WS_PARAM_OPTIONAL),\n        ),\n      'Changes properties of an album.<br><br><b>pwg_token</b> required if you want to use HTML in name/comment.',\n      $ws_functions_root . 'pwg.categories.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n    $service->addMethod(\n        'pwg.categories.setRank',\n        'ws_categories_setRank',\n        array(\n          'category_id' =>  array('type'=>WS_TYPE_ID,\n                                  'flags'=>WS_PARAM_FORCE_ARRAY),\n          'rank' =>         array('type'=>WS_TYPE_INT|WS_TYPE_POSITIVE|WS_TYPE_NOTNULL, \n                                  'flags'=>WS_PARAM_OPTIONAL),\n          ),\n        'Changes the rank of an album\n        <br><br>If you provide a list for category_id:\n        <ul>\n        <li>rank becomes useless, only the order of the image_id list matters</li>\n        <li>you are supposed to provide the list of all categories_ids belonging to the album.\n        </ul>.',\n        $ws_functions_root . 'pwg.categories.php',\n        array('admin_only'=>true, 'post_only'=>true)\n      );\n\n  $service->addMethod(\n      'pwg.plugins.getList',\n      'ws_plugins_getList',\n      null,\n      'Gets the list of plugins with id, name, version, state and description.',\n      $ws_functions_root . 'pwg.extensions.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.plugins.performAction',\n      'ws_plugins_performAction',\n      array(\n        'action'    => array('info'=>'install, activate, deactivate, uninstall, delete'),\n        'plugin'    => array(),\n        'pwg_token' => array(),\n        ),\n      null,\n      $ws_functions_root . 'pwg.extensions.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.themes.performAction',\n      'ws_themes_performAction',\n      array(\n        'action'    => array('info'=>'activate, deactivate, delete, set_default'),\n        'theme'     => array(),\n        'pwg_token' => array(),\n        ),\n      null,\n      $ws_functions_root . 'pwg.extensions.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.extensions.update',\n      'ws_extensions_update',\n      array(\n        'type' => array('info'=>'plugins, languages, themes'),\n        'id' => array(),\n        'revision' => array(),\n        'pwg_token' => array(),\n        ),\n      '<b>Webmaster only.</b>',\n      $ws_functions_root . 'pwg.extensions.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.extensions.ignoreUpdate',\n      'ws_extensions_ignoreupdate',\n      array(\n        'type' =>       array('default'=>null,\n                              'info'=>'plugins, languages, themes'),\n        'id' =>         array('default'=>null),\n        'reset' =>      array('default'=>false,\n                              'type'=>WS_TYPE_BOOL,\n                              'info'=>'If true, all ignored extensions will be reinitilized.'),\n        'pwg_token' =>  array(),\n      ),\n      '<b>Webmaster only.</b> Ignores an extension if it needs update.',\n      $ws_functions_root . 'pwg.extensions.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.extensions.checkUpdates',\n      'ws_extensions_checkupdates',\n      null,\n      'Checks if piwigo or extensions are up to date.',\n      $ws_functions_root . 'pwg.extensions.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.groups.getList',\n      'ws_groups_getList',\n      array(\n        'group_id' => array('flags'=>WS_PARAM_OPTIONAL|WS_PARAM_FORCE_ARRAY,\n                            'type'=>WS_TYPE_ID),\n        'name' =>     array('flags'=>WS_PARAM_OPTIONAL,\n                            'info'=>'Use \"%\" as wildcard.'),\n        'per_page' => array('default'=>100,\n                            'maxValue'=>$conf['ws_max_users_per_page'],\n                            'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'page' =>     array('default'=>0,\n                            'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'order' =>    array('default'=>'name',\n                            'info'=>'id, name, nb_users, is_default'),\n        ),\n      'Retrieves a list of all groups. The list can be filtered.',\n      $ws_functions_root . 'pwg.groups.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.groups.add',\n      'ws_groups_add',\n      array(\n        'name' =>       array(),\n        'is_default' => array('default'=>false,\n                              'type'=>WS_TYPE_BOOL),\n        ),\n      'Creates a group and returns the new group record.',\n      $ws_functions_root . 'pwg.groups.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.groups.delete',\n      'ws_groups_delete',\n      array(\n        'group_id' => array('flags'=>WS_PARAM_FORCE_ARRAY,\n                            'type'=>WS_TYPE_ID),\n        'pwg_token' =>  array(),\n        ),\n      'Deletes a or more groups. Users and photos are not deleted.',\n      $ws_functions_root . 'pwg.groups.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.groups.setInfo',\n      'ws_groups_setInfo',\n      array(\n        'group_id' =>   array('type'=>WS_TYPE_ID),\n        'name' =>       array('flags'=>WS_PARAM_OPTIONAL),\n        'is_default' => array('flags'=>WS_PARAM_OPTIONAL,\n                              'type'=>WS_TYPE_BOOL),\n        'pwg_token' => array(),\n        ),\n      'Updates a group. Leave a field blank to keep the current value.',\n      $ws_functions_root . 'pwg.groups.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.groups.addUser',\n      'ws_groups_addUser',\n      array(\n        'group_id' => array('type'=>WS_TYPE_ID),\n        'user_id' =>  array('flags'=>WS_PARAM_FORCE_ARRAY,\n                            'type'=>WS_TYPE_ID),\n        'pwg_token' => array(),\n        ),\n      'Adds one or more users to a group.',\n      $ws_functions_root . 'pwg.groups.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.groups.deleteUser',\n      'ws_groups_deleteUser',\n      array(\n        'group_id' => array('type'=>WS_TYPE_ID),\n        'user_id' =>  array('flags'=>WS_PARAM_FORCE_ARRAY,\n                            'type'=>WS_TYPE_ID),\n        'pwg_token' => array(),\n        ),\n      'Removes one or more users from a group.',\n      $ws_functions_root . 'pwg.groups.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.groups.merge',\n      'ws_groups_merge',\n      array(\n        'destination_group_id' => array('type'=>WS_TYPE_ID,\n          'info'=>'Is not necessarily part of groups to merge'),\n        'merge_group_id' => array('flags'=>WS_PARAM_FORCE_ARRAY,\n          'type'=>WS_TYPE_ID),\n        'pwg_token' => array(),\n        ),\n      'Merge groups in one other group',\n      $ws_functions_root . 'pwg.groups.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n    $service->addMethod(\n      'pwg.groups.duplicate',\n      'ws_groups_duplicate',\n      array(\n        'group_id' => array('type'=>WS_TYPE_ID),\n        'copy_name' => array(),\n        'pwg_token' => array(),\n        ),\n      'Create a copy of a group',\n      $ws_functions_root . 'pwg.groups.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.users.getList',\n      'ws_users_getList',\n      array(\n        'user_id' =>    array('flags'=>WS_PARAM_OPTIONAL|WS_PARAM_FORCE_ARRAY,\n                              'type'=>WS_TYPE_ID),\n        'username' =>   array('flags'=>WS_PARAM_OPTIONAL,\n                              'info'=>'Use \"%\" as wildcard.'),\n        'status' =>     array('flags'=>WS_PARAM_OPTIONAL|WS_PARAM_FORCE_ARRAY,\n                              'info'=>'guest,generic,normal,admin,webmaster'),\n        'min_level' =>  array('default'=>0,\n                              'maxValue'=>max($conf['available_permission_levels']),\n                              'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'group_id' =>   array('flags'=>WS_PARAM_OPTIONAL|WS_PARAM_FORCE_ARRAY,\n                              'type'=>WS_TYPE_ID),\n        'per_page' =>   array('default'=>100,\n                              'maxValue'=>$conf['ws_max_users_per_page'],\n                              'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'page' =>       array('default'=>0,\n                              'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'order' =>      array('default'=>'id',\n                              'info'=>'id, username, level, email'),\n        'exclude' =>    array('flags'=>WS_PARAM_OPTIONAL|WS_PARAM_FORCE_ARRAY,\n                              'type'=>WS_TYPE_ID,\n                              'info'=>'Expects a user_id as value.'),\n        'display' =>    array('default'=>'basics',\n                              'info'=>'Comma saparated list (see method description)'),\n        'filter' =>     array('flags'=>WS_PARAM_OPTIONAL,\n                              'info'=>'Filter by username, email, group'),\n        'min_register' => array('flags'=>WS_PARAM_OPTIONAL,\n                                 'info'=>'See method description'),\n        'max_register' => array('flags'=>WS_PARAM_OPTIONAL,\n                                'info'=>'See method description'),\n        ),\n      'Retrieves a list of all the users.<br>\n<br>\n<b>display</b> controls which data are returned, possible values are:<br>\nall, basics, none,<br>\nusername, email, status, level, groups,<br>\nlanguage, theme, nb_image_page, recent_period, expand, show_nb_comments, show_nb_hits,<br>\nenabled_high, registration_date, registration_date_string, registration_date_since, last_visit, last_visit_string, last_visit_since<br>\n<b>basics</b> stands for \"username,email,status,level,groups\"<br>\n<b>min_register</b> and <b>max_register</b> filter users by their registration date expecting format \"YYYY\" or \"YYYY-mm\" or \"YYYY-mm-dd\".',\n      $ws_functions_root . 'pwg.users.php',\n      array('admin_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.users.add',\n      'ws_users_add',\n      array(\n        'username' => array(),\n        'auto_password' => array(\n          'default'=>false,\n          'flags'=>WS_TYPE_BOOL, \n          'info' => 'if true ignores password and confirm password'\n        ),\n        'password' => array('default'=>null),\n        'password_confirm' => array('flags'=>WS_PARAM_OPTIONAL),\n        'email' =>    array('default'=>null),\n        'send_password_by_mail' => array('default'=>false, 'type'=>WS_TYPE_BOOL),\n        'pwg_token' => array(),\n        ),\n      'Registers a new user.',\n      $ws_functions_root . 'pwg.users.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.users.delete',\n      'ws_users_delete',\n      array(\n        'user_id' =>  array('flags'=>WS_PARAM_FORCE_ARRAY,\n                            'type'=>WS_TYPE_ID),\n        'pwg_token' =>  array(),\n        ),\n      'Deletes on or more users. Photos owned by this user are not deleted.',\n      $ws_functions_root . 'pwg.users.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n    'pwg.users.getAuthKey',\n    'ws_users_getAuthKey',\n    array(\n      'user_id' => array('type'=>WS_TYPE_ID),\n      'pwg_token' => array(),\n      ),\n    'Get a new authentication key for a user. Only works for normal/generic users (not admins)',\n    $ws_functions_root . 'pwg.users.php',\n    array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.users.setInfo',\n      'ws_users_setInfo',\n      array(\n        'user_id' =>          array('flags'=>WS_PARAM_FORCE_ARRAY,\n                                    'type'=>WS_TYPE_ID),\n        'username' =>         array('flags'=>WS_PARAM_OPTIONAL),\n        'password' =>         array('flags'=>WS_PARAM_OPTIONAL),\n        'email' =>            array('flags'=>WS_PARAM_OPTIONAL),\n        'status' =>           array('flags'=>WS_PARAM_OPTIONAL,\n                                    'info'=>'guest,generic,normal,admin,webmaster'),\n        'level'=>             array('flags'=>WS_PARAM_OPTIONAL,\n                                    'maxValue'=>max($conf['available_permission_levels']),\n                                    'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'language' =>         array('flags'=>WS_PARAM_OPTIONAL),\n        'theme' =>            array('flags'=>WS_PARAM_OPTIONAL),\n        'group_id' => array('flags'=>WS_PARAM_OPTIONAL|WS_PARAM_FORCE_ARRAY, 'type'=>WS_TYPE_INT),\n        // bellow are parameters removed in a future version\n        'nb_image_page' =>    array('flags'=>WS_PARAM_OPTIONAL,\n                                    'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE|WS_TYPE_NOTNULL),\n        'recent_period' =>    array('flags'=>WS_PARAM_OPTIONAL,\n                                    'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE),\n        'expand' =>           array('flags'=>WS_PARAM_OPTIONAL,\n                                    'type'=>WS_TYPE_BOOL),\n        'show_nb_comments' => array('flags'=>WS_PARAM_OPTIONAL,\n                                    'type'=>WS_TYPE_BOOL),\n        'show_nb_hits' =>     array('flags'=>WS_PARAM_OPTIONAL,\n                                    'type'=>WS_TYPE_BOOL),\n        'enabled_high' =>     array('flags'=>WS_PARAM_OPTIONAL,\n                                    'type'=>WS_TYPE_BOOL),\n        'pwg_token' => array(),\n        ),\n      'Updates a user. Leave a field blank to keep the current value.\n<br>\"username\", \"password\" and \"email\" are ignored if \"user_id\" is an array.\n<br>set \"group_id\" to -1 if you want to dissociate users from all groups',\n      $ws_functions_root . 'pwg.users.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n    \n  $service->addMethod(\n      'pwg.permissions.getList',\n      'ws_permissions_getList',\n      array(\n        'cat_id' =>     array('flags'=>WS_PARAM_FORCE_ARRAY|WS_PARAM_OPTIONAL,\n                              'type'=>WS_TYPE_ID),\n        'group_id' =>   array('flags'=>WS_PARAM_FORCE_ARRAY|WS_PARAM_OPTIONAL,\n                              'type'=>WS_TYPE_ID),\n        'user_id' =>    array('flags'=>WS_PARAM_FORCE_ARRAY|WS_PARAM_OPTIONAL,\n                              'type'=>WS_TYPE_ID),\n        ),\n      'Returns permissions: user ids and group ids having access to each album ; this list can be filtered.\n<br>Provide only one parameter!',\n      $ws_functions_root . 'pwg.permissions.php',\n      array('admin_only'=>true)\n    );\n    \n  $service->addMethod(\n      'pwg.permissions.add',\n      'ws_permissions_add',\n      array(\n        'cat_id' =>     array('flags'=>WS_PARAM_FORCE_ARRAY,\n                              'type'=>WS_TYPE_ID),\n        'group_id' =>   array('flags'=>WS_PARAM_FORCE_ARRAY|WS_PARAM_OPTIONAL,\n                              'type'=>WS_TYPE_ID),\n        'user_id' =>    array('flags'=>WS_PARAM_FORCE_ARRAY|WS_PARAM_OPTIONAL,\n                              'type'=>WS_TYPE_ID),\n        'recursive' =>  array('default'=>false,\n                              'type'=>WS_TYPE_BOOL),\n        'pwg_token' => array(),\n        ),\n      'Adds permissions to an album.',\n      $ws_functions_root . 'pwg.permissions.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n    \n  $service->addMethod(\n      'pwg.permissions.remove',\n      'ws_permissions_remove',\n      array(\n        'cat_id' =>   array('flags'=>WS_PARAM_FORCE_ARRAY,\n                            'type'=>WS_TYPE_ID),\n        'group_id' => array('flags'=>WS_PARAM_FORCE_ARRAY|WS_PARAM_OPTIONAL,\n                            'type'=>WS_TYPE_ID),\n        'user_id' =>  array('flags'=>WS_PARAM_FORCE_ARRAY|WS_PARAM_OPTIONAL,\n                            'type'=>WS_TYPE_ID),\n        'pwg_token' => array(),\n        ),\n      'Removes permissions from an album.',\n      $ws_functions_root . 'pwg.permissions.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n  $service->addMethod(\n      'pwg.users.preferences.set',\n      'ws_users_preferences_set',\n      array(\n        'param' => array(),\n        'value' => array('flags'=>WS_PARAM_OPTIONAL),\n        'is_json' =>  array('default'=>false, 'type'=>WS_TYPE_BOOL),\n      ),\n      'Set a user preferences parameter. JSON encode the value (and set is_json to true) if you need a complex data structure.',\n      $ws_functions_root . 'pwg.users.php'\n    );\n\n  $service->addMethod(\n      'pwg.users.favorites.add',\n      'ws_users_favorites_add',\n      array(\n        'image_id' =>  array('type'=>WS_TYPE_ID)\n      ),\n      'Adds the indicated image to the current user\\'s favorite images.',\n      $ws_functions_root . 'pwg.users.php'\n    );\n\n  $service->addMethod(\n      'pwg.users.favorites.remove',\n      'ws_users_favorites_remove',\n      array(\n        'image_id' =>  array('type'=>WS_TYPE_ID)\n      ),\n      'Removes the indicated image from the current user\\'s favorite images.',\n      $ws_functions_root . 'pwg.users.php'\n    );\n\n  $service->addMethod(\n      'pwg.users.favorites.getList',\n      'ws_users_favorites_getList',\n      array(\n        'per_page' => array(\n          'default'=>100,\n          'maxValue'=>$conf['ws_max_images_per_page'],\n          'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE\n        ),\n        'page' => array(\n          'default'=>0,\n          'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE\n        ),\n        'order' => array(\n          'default'=>null,\n          'info'=>'id, file, name, hit, rating_score, date_creation, date_available, random'\n        )\n      ),\n      'Returns the favorite images of the current user.',\n      $ws_functions_root . 'pwg.users.php'\n    );\n\n  $service->addMethod(\n    'pwg.history.log',\n    'ws_history_log',\n    array(\n      'image_id' => array('type'=>WS_TYPE_ID),\n      'cat_id' => array('type'=>WS_TYPE_ID, 'default'=>null),\n      'section' => array('default'=>null),\n      'tags_string' => array('default'=>null),\n      'is_download' => array('default'=>false, 'type'=>WS_TYPE_BOOL),\n      ),\n    'Log visit in history',\n    $ws_functions_root . 'pwg.php'\n    );\n\n  $service->addMethod(\n      'pwg.history.search',\n      'ws_history_search',\n      array(\n        'start' => array(\n          'default' => null\n        ),\n        'end' => array(\n          'default' => null\n        ),\n        'types' => array(\n          'flags'=>WS_PARAM_FORCE_ARRAY,\n          'default' => array(\n            'none',\n            'picture',\n            'high',\n            'other',\n          )\n        ),\n        'user_id' => array(\n          'default' => -1,\n        ),\n        'image_id' => array(\n          'default' => null,\n          'type' => WS_TYPE_ID,\n        ),\n        'filename' => array(\n          'default' => null\n        ),\n        'ip' => array(\n          'default' => null\n        ),\n        'display_thumbnail' => array(\n          'default' => 'display_thumbnail_classic'\n        ),\n        'pageNumber' => array(\n          'default' => null,\n          'type' => WS_TYPE_INT|WS_TYPE_POSITIVE,\n        ),\n      ),\n      'Gives an history of who has visited the galery and the actions done in it. Receives parameter.\n      <br> <strong>Types </strong> can be : \\'none\\', \\'picture\\', \\'high\\', \\'other\\' \n      <br> <strong>Date format</strong> is yyyy-mm-dd\n      <br> <strong>display_thumbnail</strong> can be : \\'no_display_thumbnail\\', \\'display_thumbnail_classic\\', \\'display_thumbnail_hoverbox\\'',\n      $ws_functions_root . 'pwg.php'\n    );\n\n    $service->addMethod(\n      'pwg.images.filteredSearch.create',\n      'ws_images_filteredSearch_create',\n      array(\n        'search_id' => array(\n          'flags' => WS_PARAM_OPTIONAL,\n          'info' => 'prior search_id (or search_key), if any',\n        ),\n        'allwords' => array(\n          'flags' => WS_PARAM_OPTIONAL,\n          'info' => 'query to search by words',\n        ),\n        'allwords_mode' => array(\n          'flags' => WS_PARAM_OPTIONAL,\n          'info' => 'AND (by default) | OR',\n        ),\n        'allwords_fields' => array(\n          'flags' => WS_PARAM_OPTIONAL|WS_PARAM_FORCE_ARRAY,\n          'info' => 'values among [name, comment, tags, file, author, cat-title, cat-desc]',\n        ),\n        'tags' => array(\n          'flags' => WS_PARAM_OPTIONAL|WS_PARAM_FORCE_ARRAY,\n          'type' => WS_TYPE_ID,\n        ),\n        'tags_mode' => array(\n          'flags' => WS_PARAM_OPTIONAL,\n          'info' => 'AND (by default) | OR',\n        ),\n        'categories' => array(\n          'flags' => WS_PARAM_OPTIONAL|WS_PARAM_FORCE_ARRAY,\n          'type' => WS_TYPE_ID,\n        ),\n        'categories_withsubs' => array(\n          'flags' => WS_PARAM_OPTIONAL,\n          'type' => WS_TYPE_BOOL,\n          'info' => 'false, by default',\n        ),\n        'authors' => array(\n          'flags' => WS_PARAM_OPTIONAL|WS_PARAM_FORCE_ARRAY,\n        ),\n        'added_by' => array(\n          'flags' => WS_PARAM_OPTIONAL|WS_PARAM_FORCE_ARRAY,\n          'type' => WS_TYPE_ID,\n        ),\n        'filetypes' => array(\n          'flags' => WS_PARAM_OPTIONAL|WS_PARAM_FORCE_ARRAY,\n        ),\n        'date_posted_preset' => array(\n          'flags' => WS_PARAM_OPTIONAL,\n          'info' => 'files posted within 24 hours, 7 days, 30 days, 3 months, 6 months or custom. Value among 24h|7d|30d|3m|6m|custom.',\n        ),\n        'date_posted_custom' => array(\n          'flags' => WS_PARAM_OPTIONAL|WS_PARAM_FORCE_ARRAY,\n          'info' => 'Must be provided if date_posted_preset is custom. List of yYYYY or mYYYY-MM or dYYYY-MM-DD.',\n        ),\n        'date_created_preset' => array(\n          'flags' => WS_PARAM_OPTIONAL,\n          'info' => 'files created within 7 days, 30 days, 3 months, 6 months, 12 months or custom. Value among 7d|30d|3m|6m|12m|custom.',\n        ),\n        'date_created_custom' => array(\n          'flags' => WS_PARAM_OPTIONAL|WS_PARAM_FORCE_ARRAY,\n          'info' => 'Must be provided if date_created_preset is custom. List of yYYYY or mYYYY-MM or dYYYY-MM-DD.',\n        ),\n        'ratios' => array(\n          'flags' => WS_PARAM_OPTIONAL|WS_PARAM_FORCE_ARRAY,\n        ),\n        'ratings' => array(\n          'flags' => WS_PARAM_OPTIONAL|WS_PARAM_FORCE_ARRAY,\n        ),\n        'filesize_min' => array(\n          'flags' => WS_PARAM_OPTIONAL,\n          'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE,\n        ),\n        'filesize_max' => array(\n          'flags' => WS_PARAM_OPTIONAL,\n          'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE,\n        ),\n        'height_min' => array(\n          'flags' => WS_PARAM_OPTIONAL,\n          'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE,\n        ),\n        'height_max' => array(\n          'flags' => WS_PARAM_OPTIONAL,\n          'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE,\n        ),\n        'width_min' => array(\n          'flags' => WS_PARAM_OPTIONAL,\n          'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE,\n        ),\n        'width_max' => array(\n          'flags' => WS_PARAM_OPTIONAL,\n          'type'=>WS_TYPE_INT|WS_TYPE_POSITIVE,\n        ),\n      ),\n      '',\n      $ws_functions_root . 'pwg.images.php'\n    );\n\n    $service->addMethod(\n      'pwg.users.generatePasswordLink',\n      'ws_users_generate_password_link',\n      array(\n        'user_id' => array(\n          'type'=>WS_TYPE_ID\n        ),\n        'pwg_token' => array(),\n        'send_by_mail' => array(\n          'flags' => WS_PARAM_OPTIONAL,\n          'type' => WS_TYPE_BOOL,\n          'default' => false,\n        ),\n      ),\n      'Return the reset password link <br />\n       (Only webmaster can perform this action for another webmaster)',\n      $ws_functions_root . 'pwg.users.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n\n    $service->addMethod(\n      'pwg.users.setMainUser',\n      'ws_set_main_user',\n      array(\n        'user_id' => array(\n          'type'=>WS_TYPE_ID\n        ),\n        'pwg_token' => array(),\n      ),\n      'Update the main user (owner) <br />\n        - To be the main user, the user must have the status \"webmaster\".<br />\n        - Only a webmaster can perform this action',\n      $ws_functions_root . 'pwg.users.php',\n      array('admin_only'=>true, 'post_only'=>true)\n    );\n}\n\n?>\n"
        }
      ]
    }
  ]
}