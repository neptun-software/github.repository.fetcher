{
  "metadata": {
    "timestamp": 1736711918138,
    "page": 318,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "opis/closure",
      "stars": 2526,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.146484375,
          "content": "tests/          export-ignore\nphpunit.xml     export-ignore\n.gitattributes  export-ignore\n.gitignore      export-ignore\n.github         export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0849609375,
          "content": ".idea/\nvendor/\n_site/\nshared/\nGemfile.lock\ncomposer.lock\n.phpunit.result.cache\ntest.php"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 9.99609375,
          "content": "CHANGELOG\n---------\n\n### v4.3.1, 2025.01.10\n\n- Fixed reference bug [#154](https://github.com/opis/closure/issues/154)\n\n### v4.3.0, 2025.01.08\n\n- Proper serialization of private properties\n- Improved serialization/deserialization of properties having hooks (PHP 8.4)\n- Skip virtual properties (PHP 8.4)\n- Added `Opis\\Closure\\clear_cache()`\n- Added `Opis\\Closure\\get_raw_properties()`\n\n### v4.2.1, 2025.01.07\n\n- Improved generic object serialization\n\n### v4.2.0, 2025.01.07\n\n#### Changes\n\n- Added support for anonymous classes (also supports closures bound to anonymous classes)\n- Fixed closure scope for some edge cases\n- Improved parsers\n\n#### Internal changes\n\nAdded classes\n\n- `AbastractInfo`\n- `AbstractParser`\n- `AnonymousClassInfo`\n- `AnonymousClassParser`\n- `ReflectionClass`\n- `CodeStream`\n\nRemoved\n\n- `ClosureStream` (replaced by `CodeStream`)\n- `ClassInfo` (replace by `ReflectionClass`)\n\n### v4.1.0, 2025.01.05\n\n#### Changes\n\n- Improved closure parser\n- Improved array & object serialization/deserialization\n- Added `ClosureInfo::getClosure()`\n- Fixed `ClosureInfo::getFactory()` bindings and marked the method as internal\n\n#### Internal changes\n\nAdded\n\n- `ClassInfo::get()`\n- `ClassInfo::clear()`\n- `ClassInfo::isInternal()`\n- `ClassInfo::isEnum()`\n- `ClassInfo::refId()`\n- `ClassInfo` is final\n- `ClassInfo` constructor is private\n\nRemoved\n\n- `Serializer::getClassInfo()` (replaced by `ClassInfo::get()`)\n- `Serializer::isEnum()` (replaced by `ClassInfo::isEnum()`)\n\n### v4.0.1, 2025.01.04\n\n- Fixes unserialization error [#149](https://github.com/opis/closure/issues/149)\n\n### v4.0.0, 2024.12.28\n\n- Complete rewrite of the library\n\n### v3.6.2, 2021.04.09\n\n- Fixed string interpolation\n\n### v3.6.1, 2020.11.07\n\n- Fixed serialization error [#84](https://github.com/opis/closure/issues/84)\n\n### v3.6.0, 2020.10.12\n\n- Initial PHP 8 Support [#67](https://github.com/opis/closure/issues/67).\n\n### v3.5.7, 2020.09.06\n\n- Fixed issue [#76](https://github.com/opis/closure/issues/76).\n- Fixed issue [#78](https://github.com/opis/closure/issues/78).\n\n### v3.5.6, 2020.08.11\n\n- Fixed issue [#70](https://github.com/opis/closure/issues/70)\n\n### v3.5.5, 2020.06.17\n\n- Fixed a false-positive when using `Opis\\Closure\\ReflectionClosure::isScopeRequired` method\n\n### v3.5.4, 2020.06.07\n\n- Fixed a false-positive when using `Opis\\Closure\\ReflectionClosure::isScopeRequired` method\n- Fixed a bug related to `T_STRING_VARNAME`\n\n### v3.5.3, 2020.05.25\n\n- Improved parser\n- The class scope optimisation is no longer used. We always bind now to the closure's original class scope.\n  When the class scope was `null`, the optimisation failed to work as expected and kept the wrong `SerializableClosure` scope.\n\n### v3.5.2, 2020.05.21\n\n- Removed extra semicolon in short closures, since is not part of the closure's body.\n\n### v3.5.1, 2019.11.30\n\n- Bugfix. See #47\n\n### v3.5.0, 2019.11.29\n\n- Added support for short closures (arrow functions)\n- Added `isShortClosure` method to `Opis\\Closure\\ReflectionClosure`\n\n### v3.4.2, 2019.11.29\n\n- Added `stream_set_option()`\n\n### v3.4.1, 2019.10.19\n\n- Fixed a [bug](https://github.com/opis/closure/issues/40) that prevented serialization to work correctly.\n\n### v3.4.0, 2019.09.03\n\n- Added `createClosure` static method in `Opis\\Closure\\SerializableClosure`.\n  This method creates a new closure from arbitrary code, emulating `create_function`,\n  but without using eval\n\n### v3.3.1, 2019.07.10\n\n- Use `sha1` instead of `md5` for hashing file names in `Opis\\Closure\\ReflectionClosure` class\n\n### v3.3.0, 2019.05.31\n\n- Fixed a bug that prevented signed closures to properly work when the serialized string\n  contains invalid UTF-8 chars. Starting with this version `json_encode` is no longer used\n  when signing a closure. Backward compatibility is maintained and all closures that were\n  previously signed using the old method will continue to work.\n\n### v3.2.0, 2019.05.05\n\n- Since an unsigned closure can be unserialized when no security provider is set,\n  there is no reason to treat differently a signed closure in the same situation.\n  Therefore, the `Opis\\Closure\\SecurityException` exception  is no longer thrown when\n  unserializing a signed closure, if no security provider is set.\n\n### v3.1.6, 2019.02.22\n\n- Fixed a bug that occurred when trying to set properties of classes that were not defined in user-land.\n  Those properties are now ignored.\n\n### v3.1.5, 2019.01.14\n\n- Improved parser\n\n### v3.1.4, 2019.01.14\n\n- Added support for static methods that are named using PHP keywords or magic constants.\n  Ex: `A::new()`, `A::use()`, `A::if()`, `A::function()`, `A::__DIR__()`, etc.\n- Used `@internal` to mark classes & methods that are for internal use only and\n  backward compatibility is not guaranteed.\n\n### v3.1.3, 2019.01.07\n\n- Fixed a bug that prevented traits to be correctly resolved when used by an\n  anonymous class\n- Fixed a bug that occurred when `$this` keyword was used inside an anonymous class\n\n### v3.1.2, 2018.12.16\n\n* Fixed a bug regarding comma trail in group-use statements. See [issue 23](https://github.com/opis/closure/issues/23)\n\n### v3.1.1, 2018.10.02\n\n* Fixed a bug where `parent` keyword was treated like a class-name and scope was not added to the\n  serialized closure\n* Fixed a bug where return type was not properly handled for nested closures\n* Support for anonymous classes was improved\n\n### v3.1.0, 2018.09.20\n\n* Added `transformUseVariables` and `resolveUseVariables` to\n  `Opis\\Closure\\SerializableClosure` class.\n* Added `removeSecurityProvider` static method to\n  `Opis\\Closure\\SerializableClosure` class.\n* Fixed some security related issues where a user was able to unserialize an unsigned\n  closure, even when a security provider was in use.\n\n### v3.0.12, 2018.02.23\n\n* Bugfix. See [issue 20](https://github.com/opis/closure/issues/20)\n\n### v3.0.11, 2018.01.22\n\n* Bugfix. See [issue 18](https://github.com/opis/closure/issues/18)\n\n### v3.0.10, 2018.01.04\n\n* Improved support for PHP 7.1 & 7.2\n\n### v3.0.9, 2018.01.04\n\n* Fixed a bug where the return type was not properly resolved.\n  See [issue 17](https://github.com/opis/closure/issues/17)\n* Added more tests\n\n### v3.0.8, 2017.12.18\n\n* Fixed a bug. See [issue 16](https://github.com/opis/closure/issues/16)\n\n### v3.0.7, 2017.10.31\n\n* Bugfix: static properties are ignored now, since they are not serializable\n\n### v3.0.6, 2017.10.06\n\n* Fixed a bug introduced by accident in 3.0.5\n\n### v3.0.5, 2017.09.18\n\n* Fixed a bug related to nested references\n\n### v3.0.4, 2017.09.18\n\n* \\[*internal*\\] Refactored `SerializableClosure::mapPointers` method\n* \\[*internal*\\] Added a new optional argument to `SerializableClosure::unwrapClosures`\n* \\[*internal*\\] Removed `SerializableClosure::getClosurePointer` method\n* Fixed various bugs\n\n### v3.0.3, 2017.09.06\n\n* Fixed a bug related to nested object references\n* \\[*internal*\\] `Opis\\Closure\\ClosureScope` now extends `SplObjectStorage`\n* \\[*internal*\\] The `storage` property was removed from `Opis\\Closure\\ClosureScope`\n* \\[*internal*\\] The `instances` and `objects` properties were removed from `Opis\\Closure\\ClosureContext`\n\n### v3.0.2, 2017.08.28\n\n* Fixed a bug where `$this` object was not handled properly inside the\n  `SerializableClosre::serialize` method.\n\n### v3.0.1, 2017.04.13\n\n* Fixed a bug in 'ignore_next' state\n\n### v3.0.0, 2017.04.07\n\n* Dropped PHP 5.3 support\n* Moved source files from `lib` to `src` folder\n* Removed second parameter from `Opis\\Closure\\SerializableClosure::from` method and from constructor\n* Removed `Opis\\Closure\\{SecurityProviderInterface, DefaultSecurityProvider, SecureClosure}` classes\n* Refactored how signed closures were handled\n* Added `wrapClosures` and `unwrapClosures` static methods to `Opis\\Closure\\SerializableClosure` class\n* Added `Opis\\Colosure\\serialize` and `Opis\\Closure\\unserialize` functions\n* Improved serialization. You can now serialize arbitrary objects and the library will automatically wrap all closures\n\n### v2.4.0, 2016.12.16\n\n* The parser was refactored and improved\n* Refactored `Opis\\Closure\\SerializableClosure::__invoke` method\n* `Opis\\Closure\\{ISecurityProvider, SecurityProvider}` were added\n* `Opis\\Closure\\{SecurityProviderInterface, DefaultSecurityProvider, SecureClosure}` were deprecated\n  and they will be removed in the next major version\n* `setSecretKey` and `addSecurityProvider` static methods were added to `Opis\\Closure\\SerializableClosure`\n\n### v2.3.2, 2016.12.15\n\n* Fixed a bug that prevented namespace resolution to be done properly\n\n### v2.3.1, 2016.12.13\n\n* Hotfix. See [PR](https://github.com/opis/closure/pull/7)\n\n### v2.3.0, 2016.11.17\n\n* Added `isBindingRequired` and `isScopeRequired` to the `Opis\\Closure\\ReflectionClosure` class\n* Automatically detects when the scope and/or the bound object of a closure needs to be serialized.\n\n### v2.2.1, 2016.08.20\n\n* Fixed a bug in `Opis\\Closure\\ReflectionClosure::fetchItems`\n\n### v2.2.0, 2016.07.26\n\n* Fixed CS\n* `Opis\\Closure\\ClosureContext`, `Opis\\Closure\\ClosureScope`, `Opis\\Closure\\SelfReference`\n  and `Opis\\Closure\\SecurityException` classes were moved into separate files\n* Added support for PHP7 syntax\n* Fixed some bugs in `Opis\\Closure\\ReflectionClosure` class\n* Improved closure parser\n* Added an analyzer for SuperClosure library\n\n### v2.1.0, 2015.09.30\n\n* Added support for the missing `__METHOD__`, `__FUNCTION__` and `__TRAIT__` magic constants\n* Added some security related classes and interfaces: `Opis\\Closure\\SecurityProviderInterface`,\n  `Opis\\Closure\\DefaultSecurityProvider`, `Opis\\Closure\\SecureClosure`, `Opis\\Closure\\SecurityException`.\n* Fiexed a bug in `Opis\\Closure\\ReflectionClosure::getClasses` method\n* Other minor bugfixes\n* Added support for static closures\n* Added public `isStatic` method to `Opis\\Closure\\ReflectionClosure` class\n\n\n### v2.0.1, 2015.09.23\n\n* Removed `branch-alias` property from `composer.json`\n* Bugfix. See [issue #6](https://github.com/opis/closure/issues/6)\n\n### v2.0.0, 2015.07.31\n\n* The closure parser was improved\n* Class names are now automatically resolved\n* Added support for the `#trackme` directive which allows tracking closure's residing source\n\n### v1.3.0, 2014.10.18\n\n* Added autoload file\n* Changed README file\n\n### Opis Closure 1.2.2\n\n* Started changelog\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.072265625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014-2024 Marius Sarca & Sorin Sarca\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.171875,
          "content": "Opis Closure\n====================\n[![Tests](https://github.com/opis/closure/workflows/Tests/badge.svg)](https://github.com/opis/closure/actions)\n[![Packagist Version](https://img.shields.io/packagist/v/opis/closure?label=Version)](https://packagist.org/packages/opis/closure)\n[![Packagist Downloads](https://img.shields.io/packagist/dt/opis/closure?label=Downloads)](https://packagist.org/packages/opis/closure)\n[![Packagist License](https://img.shields.io/packagist/l/opis/closure?color=teal&label=License)](https://packagist.org/packages/opis/closure)\n\nSerialize closures, serialize anything\n------------------\n\n**Opis Closure** is a PHP library that allows you to serialize closures, anonymous classes, and arbitrary data.\n\n```php\nuse function Opis\\Closure\\{serialize, unserialize};\n\n$serialized = serialize(fn() => \"hello from closure!\");\n$greet = unserialize($serialized);\n\necho $greet(); // hello from closure!\n```\n\n> [!IMPORTANT]\n> Starting with version 4.2, **Opis Closure** supports serialization of anonymous classes.\n\n```php\nuse function Opis\\Closure\\{serialize, unserialize};\n\n$serialized = serialize(new class(\"hello from anonymous class!\") {\n    public function __construct(private string $message) {}\n    \n    public function greet(): string {\n        return $this->message;\n    }\n});\n\n$object = unserialize($serialized);\necho $object->greet(); // hello from anonymous class!\n```\n\n_A full rewrite was necessary to keep this project compatible with the PHP's new features, such as attributes, enums, \nread-only properties, named parameters, anonymous classes, and so on. This wasn't an easy task, as the latest attempt \nto launch a 4.x version involved using the FFI extension in exotic ways, and it failed hard. The main problem was that \nvery often the closures were bound to some object, thus in order to preserve functionality, we had to serialize the object \ntoo. Since we had to do arbitrary data serialization, we decided to make this project about arbitrary data serialization, \nproviding support for serializing closures but also adding more effortless ways to serialize custom objects._\n\n## Migrating from 3.x\n\nVersion 4.x is a full rewrite of the library, but data deserialization from 3.x is possible.\nRead the docs on [how to migrate from 3.x][migration].\n\n## Documentation\n\nThe full documentation for this library can be found [here][documentation].\n\n## License\n\n**Opis Closure** is licensed under the [MIT License (MIT)][license].\n\n## Requirements\n\n* PHP >= 8.0\n\n## Installation\n\n**Opis Closure** is available on [Packagist], and it can be installed from a \ncommand line interface by using [Composer]: \n\n```bash\ncomposer require opis/closure\n```\n\nOr you could directly reference it into your `composer.json` file as a dependency\n\n```json\n{\n    \"require\": {\n        \"opis/closure\": \"^4.3\"\n    }\n}\n```\n\n[documentation]: https://opis.io/closure/4.x/ \"Opis Closure Documentation\"\n[migration]: https://opis.io/closure/4.x/migrate.html \"Opis Closure Migration guide\"\n[license]: http://opensource.org/licenses/MIT \"MIT License\"\n[Packagist]: https://packagist.org/packages/opis/closure \"Packagist\"\n[Composer]: https://getcomposer.org \"Composer\"\n[CHANGELOG]: https://github.com/opis/closure/blob/master/CHANGELOG.md \"Changelog\"\n"
        },
        {
          "name": "autoload.php",
          "type": "blob",
          "size": 0.708984375,
          "content": "<?php\n\nrequire_once __DIR__ . '/src/functions.php';\n\nspl_autoload_register(static function (string $class): bool {\n    $class = ltrim($class, '\\\\');\n    $dir = __DIR__ . '/src';\n    $namespace = 'Opis\\Closure';\n\n    if (str_starts_with($class, $namespace)) {\n        $class = substr($class, strlen($namespace));\n        $path = '';\n        if (($pos = strrpos($class, '\\\\')) !== false) {\n            $path = str_replace('\\\\', '/', substr($class, 0, $pos)) . '/';\n            $class = substr($class, $pos + 1);\n        }\n        $path .= str_replace('_', '/', $class) . '.php';\n        $dir .= '/' . $path;\n\n        if (is_file($dir)) {\n            include $dir;\n            return true;\n        }\n    }\n\n    return false;\n});\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.130859375,
          "content": "{\n    \"name\": \"opis/closure\",\n    \"description\": \"A library that can be used to serialize closures (anonymous functions) and arbitrary data.\",\n    \"keywords\": [\"closure\", \"serialization\", \"function\", \"serializable\", \"serialize\", \"anonymous functions\"],\n    \"homepage\": \"https://opis.io/closure\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Marius Sarca\",\n            \"email\": \"marius.sarca@gmail.com\"\n        },\n        {\n            \"name\": \"Sorin Sarca\",\n            \"email\": \"sarca_sorin@hotmail.com\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.0\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^9.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Opis\\\\Closure\\\\\": \"src/\"\n        },\n        \"files\": [\"src/functions.php\"]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Opis\\\\Closure\\\\Test\\\\\": \"tests/\"\n        }\n    },\n    \"scripts\": {\n        \"tests\": \"./vendor/bin/phpunit --verbose --color\"\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"4.x-dev\"\n        }\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    }\n}\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.673828125,
          "content": "<phpunit bootstrap=\"./tests/bootstrap.php\">\n    <testsuites>\n        <testsuite name=\"Opis Closure\">\n            <directory suffix=\"Test.php\" phpVersion=\"8.0\" phpVersionOperator=\">=\">./tests/PHP80</directory>\n            <directory suffix=\"Test.php\" phpVersion=\"8.1\" phpVersionOperator=\">=\">./tests/PHP81</directory>\n            <directory suffix=\"Test.php\" phpVersion=\"8.2\" phpVersionOperator=\">=\">./tests/PHP82</directory>\n            <directory suffix=\"Test.php\" phpVersion=\"8.3\" phpVersionOperator=\">=\">./tests/PHP83</directory>\n            <directory suffix=\"Test.php\" phpVersion=\"8.4\" phpVersionOperator=\">=\">./tests/PHP84</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}