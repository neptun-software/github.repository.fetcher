{
  "metadata": {
    "timestamp": 1736712131569,
    "page": 742,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jvoisin/php-malware-finder",
      "stars": 1475,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.041015625,
          "content": ".idea/\n.github/\nutils/\nphp-malware-finder\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0244140625,
          "content": "php-malware-finder\n.idea\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.1318359375,
          "content": "## Contributing\n\nFirst off, thank you for considering contributing to php-malware-finder.\n\n### 1. Where do I go from here?\n\nIf you've noticed a bug, an undetected sample or have a question,\n[search the issue tracker](https://github.com/nbs-system/php-malware-finder/issues)\nto see if someone else has already created a ticket. If not, go ahead and\n[make one](https://github.com/nbs-system/php-malware-finder/issues/new)!\n\n### 2. Fork & create a branch\n\nIf this is something you think you can fix,\nthen [fork php-malware-finder](https://help.github.com/articles/fork-a-repo) and\ncreate a branch with a descriptive name.\n\nA good branch name would be (where issue #325 is the ticket you're working on):\n\n```sh\ngit checkout -b add_new_sample_wp_bruteforcer\n```\n\n### 3. Get the test suite running\n\nJust type `make tests`, the testsuite will be run automatically.\n\n### 6. Make a Pull Request\n\nAt this point, you should switch back to your master branch and make sure it's\nup to date with our upstream master branch:\n\n```sh\ngit remote add upstream git@github.com:nbs-system/php-malware-finder.git\ngit checkout master\ngit pull upstream master\n```\n\nThen update your feature branch from your local copy of master, and push it!\n\n```sh\ngit checkout add_new_sample_wp_bruteforcer\ngit rebase master\ngit push --set-upstream origin add_new_sample_wp_bruteforcer\n```\n\nFinally, go to GitHub and [make a Pull Request](https://help.github.com/articles/creating-a-pull-request) :D\n\nTravis CI will [run our test suite](https://travis-ci.org/nbs-system/php-malware-finder).\nWe care about quality, so your PR won't be merged until all tests are passing.\n\n### 7. Keeping your Pull Request updated\n\nIf a maintainer asks you to \"rebase\" your PR, they're saying that a lot of code\nhas changed, and that you need to update your branch so it's easier to merge.\n\nTo learn more about rebasing in Git, there are a lot of [good](http://git-scm.com/book/en/Git-Branching-Rebasing)\n[resources](https://help.github.com/articles/interactive-rebase) but here's the suggested workflow:\n\n```sh\ngit checkout add_new_sample_wp_bruteforcer\ngit pull --rebase upstream master\ngit push --force-with-lease add_new_sample_wp_bruteforcer\n```\n\n### 8. Merging a PR (maintainers only)\n\nA PR can only be merged into master by a maintainer if:\n\n1. It is passing CI.\n2. It has no requested changes.\n3. It is up to date with current master.\n\nAny maintainer is allowed to merge a PR if all of these conditions are met.\n\n### 9. Shipping a release (maintainers only)\n\n1. Make sure that all pending and mergeable pull requests are in\n2. Make sure that the all the tests are passing, with `make tests`\n3. Update the Debian changelog in `./debian/changelog` with `dch -i`\n4. Commit the result\n5. Create a tag for the release:\n\n  ```sh\n  git checkout master\n  git pull origin master\n  make tests\n  git config user.signingkey 498C46FF087EDC36E7EAF9D445414A82A9B22D78\n  git config user.email security@nbs-system.com\n  git tag -s v$MAJOR.$MINOR.$PATCH -m \"v$MAJOR.$MINOR.$PATCH\"\n  git push --tags\n  ```\n\n6. Build the debian package with `make deb`\n7. Create the [release on github](https://github.com/nbs-system/php-malware-finder/releases)\n8. Do the *secret release dance*\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.63671875,
          "content": "FROM golang:alpine AS build\nWORKDIR /app\n\n# install build dependencies\nRUN apk add --no-cache build-base git && \\\n    apk add --no-cache -X https://dl-cdn.alpinelinux.org/alpine/edge/testing yara-dev\n\n# copy and build PMF\nCOPY . .\nRUN make\n\nFROM golang:alpine\nLABEL org.opencontainers.image.source=\"https://github.com/jvoisin/php-malware-finder\"\nWORKDIR /app\n\n# install dependencies\nRUN apk add --no-cache libressl && \\\n    apk add --no-cache -X https://dl-cdn.alpinelinux.org/alpine/edge/testing yara\n\n# copy binary from build container\nCOPY --from=build /app/php-malware-finder /app\n\nENTRYPOINT [\"/app/php-malware-finder\", \"-v\", \"-a\", \"-c\", \"/data\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 7.4716796875,
          "content": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.69921875,
          "content": ".PHONY: clean rebuild update-deps tests help docker docker-tests docker-publish\n\nNAME := php-malware-finder\nTAG_COMMIT := $(shell git rev-list --abbrev-commit --all --max-count=1)\nVERSION := $(shell git describe --abbrev=0 --tags --exact-match $(TAG_COMMIT) 2>/dev/null || true)\nIMAGE_VERSION := $(VERSION)\nDATE := $(shell git log -1 --format=%cd --date=format:\"%Y%m%d%H%M\")\nifeq ($(VERSION),)\n    VERSION := $(DATE)\n    IMAGE_VERSION := latest\nendif\nLDFLAGS := \"-X main.version=$(VERSION)\"\nGO_FLAGS := -o $(NAME) -ldflags $(LDFLAGS)\nIMAGE_REGISTRY := ghcr.io\nIMAGE_REGISTRY_USER := jvoisin\nIMAGE_NAME := $(IMAGE_REGISTRY)/$(IMAGE_REGISTRY_USER)/$(NAME)\n\nall: php-malware-finder\n\nphp-malware-finder: ## Build application\n\t@go build $(GO_FLAGS) .\n\nclean: ## Delete build artifacts\n\t@rm -f $(NAME)\n\nrebuild: clean all ## Delete build artifacts and rebuild\n\nupdate-deps: ## Update dependencies\n\t@go get -u .\n\t@go mod tidy -v\n\ntests: php-malware-finder ## Run test suite\n\t@bash ./tests.sh\n\ndocker: ## Build docker image\n\tdocker pull $(IMAGE_NAME):latest || true\n\tdocker build --pull --cache-from=$(IMAGE_NAME):latest -t $(IMAGE_NAME):latest .\n\tdocker tag $(IMAGE_NAME):latest $(IMAGE_NAME):$(IMAGE_VERSION)\n\ndocker-tests: ## Run docker image against the samples folder\n\t@(docker run --rm -v $(shell pwd)/data/samples:/data $(IMAGE_NAME):latest && exit 1) || (test $$? -eq 255 || exit 1)\n\ndocker-publish: ## Push docker image to the container registry\n\t@docker push $(IMAGE_NAME):latest\n\t@(test \"$(IMAGE_VERSION)\" != \"latest\" && docker push $(IMAGE_NAME):$(IMAGE_VERSION)) || true\n\nhelp: ## Show this help\n\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-20s\\033[0m %s\\n\", $$1, $$2}'\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.0478515625,
          "content": "![Test Suite](https://github.com/jvoisin/php-malware-finder/actions/workflows/test.yml/badge.svg)\n\n# PHP Malware Finder\n\n ```\n  _______  __   __  _______\n |  ___  ||  |_|  ||       |\n | |   | ||       ||    ___|\n | |___| ||       ||   |___   Webshell finder,\n |    ___||       ||    ___|   kiddies hunter,\n |   |    | ||_|| ||   |\t\twebsite cleaner.\n |___|    |_|   |_||___|\n\nDetect potentially malicious PHP files.\n```\n\n## What does it detect?\n\nPHP-malware-finder does its very best to detect obfuscated/dodgy code as well as\nfiles using PHP functions often used in malwares/webshells.\n\nThe following list of encoders/obfuscators/webshells are also detected:\n\n* [Bantam](https://github.com/gellin/bantam)\n* [Best PHP Obfuscator]( http://www.pipsomania.com/best_php_obfuscator.do )\n* [Carbylamine]( https://code.google.com/p/carbylamine/ )\n* [Cipher Design]( http://cipherdesign.co.uk/service/php-obfuscator )\n* [Cyklodev]( http://sysadmin.cyklodev.com/online-php-obfuscator/ )\n* [Joes Web Tools Obfuscator]( http://www.joeswebtools.com/security/php-obfuscator/ )\n* [P.A.S]( http://profexer.name/pas/download.php )\n* [PHP Jiami]( http://www.phpjiami.com/ )\n* [Php Obfuscator Encode]( http://w3webtools.com/encode-php-online/ )\n* [SpinObf]( http://mohssen.org/SpinObf.php )\n* [Weevely3]( https://github.com/epinna/weevely3 )\n* [atomiku]( http://atomiku.com/online-php-code-obfuscator/ )\n* [cobra obfuscator]( http://obfuscator.uk/example/ )\n* [nano]( https://github.com/UltimateHackers/nano )\n* [novahot]( https://github.com/chrisallenlane/novahot )\n* [phpencode]( http://phpencode.org )\n* [tennc]( http://tennc.github.io/webshell/ )\n* [web-malware-collection]( https://github.com/nikicat/web-malware-collection )\n* [webtoolsvn]( http://www.webtoolsvn.com/en-decode/ )\n* [Kraken-ng]( https://github.com/kraken-ng/ )\n\n\nOf course it's **trivial** to bypass PMF,\nbut its goal is to catch kiddies and idiots,\nnot people with a working brain.\nIf you report a stupid tailored bypass for PMF, you likely belong to one (or\nboth) category, and should re-read the previous statement.\n\n## How does it work?\n\nDetection is performed by crawling the filesystem and testing files against a\n[set](https://github.com/jvoisin/php-malware-finder/blob/master/php-malware-finder/php.yar)\nof [YARA](http://virustotal.github.io/yara/) rules. Yes, it's that simple!\n\nInstead of using a *hash-based* approach,\nPMF tries as much as possible to use semantic patterns, to detect things like\n\"a `$_GET` variable is decoded two times, unzipped,\nand then passed to some dangerous function like `system`\".\n\n## Installation\n\n### From source\n\n- Install Go >= 1.17 (using your package manager, or [manually](https://go.dev/doc/install))\n- Install libyara >= 4.2 (using your package manager, or [from source](https://yara.readthedocs.io/en/stable/gettingstarted.html))\n- Download php-malware-finder: `git clone https://github.com/jvoisin/php-malware-finder.git`\n- Build php-malware-finder: `cd php-malware-finder && make`\n\nor replace the last 2 steps with `go install github.com/jvoisin/php-malware-finder`,\nwhich will directly compile and install PMF in your `${GOROOT}/bin` folder.\n\n## How to use it?\n\n```\n$ ./php-malware-finder -h\nUsage:\n  php-malware-finder [OPTIONS] [Target]\n\nApplication Options:\n  -r, --rules-dir=      Alternative rules location (default: embedded rules)\n  -a, --show-all        Display all matched rules\n  -f, --fast            Enable YARA's fast mode\n  -R, --rate-limit=     Max. filesystem ops per second, 0 for no limit (default: 0)\n  -v, --verbose         Verbose mode\n  -w, --workers=        Number of workers to spawn for scanning (default: 32)\n  -L, --long-lines      Check long lines\n  -c, --exclude-common  Do not scan files with common extensions\n  -i, --exclude-imgs    Do not scan image files\n  -x, --exclude-ext=    Additional file extensions to exclude\n  -u, --update          Update rules\n  -V, --version         Show version number and exit\n\nHelp Options:\n  -h, --help            Show this help message\n```\n\nOr if you prefer to use `yara`:\n\n```\n$ yara -r ./data/php.yar /var/www\n```\n\nPlease keep in mind that you should use at least YARA 3.4 because we're using\n[hashes]( https://yara.readthedocs.org/en/latest/modules/hash.html ) for the\nwhitelist system, and greedy regexps. Please note that if you plan to build\nyara from sources, libssl-dev must be installed on your system in order to\nhave support for hashes.\n\nOh, and by the way, you can run the *comprehensive* testsuite with `make tests`.\n\n### Docker\n\nIf you want to avoid having to install Go and libyara, you can also use our\ndocker image and simply mount the folder you want to scan to the container's\n`/data` directory:\n\n```\n$ docker run --rm -v /folder/to/scan:/data ghcr.io/jvoisin/php-malware-finder\n```\n\n## Whitelisting\n\nCheck the [whitelist.yar](https://github.com/jvoisin/php-malware-finder/blob/master/php-malware-finder/whitelist.yar) file.\nIf you're lazy, you can generate whitelists for entire folders with the\n[generate_whitelist.py](https://github.com/jvoisin/php-malware-finder/blob/master/php-malware-finder/utils/generate_whitelist.py) script.\n\n## Why should I use it instead of something else?\n\nBecause:\n- It doesn't use [a single rule per sample](\n  https://github.com/Neo23x0/signature-base/blob/e264d66a8ea3be93db8482ab3d639a2ed3e9c949/yara/thor-webshells.yar\n  ), since it only cares about finding malicious patterns, not specific webshells\n- It has a [complete testsuite](https://github.com/jvoisin/php-malware-finder/actions), to avoid regressions\n- Its whitelist system doesn't rely on filenames\n- It doesn't rely on (slow) [entropy computation]( https://en.wikipedia.org/wiki/Entropy_(information_theory) )\n- It uses a ghetto-style static analysis, instead of relying on file hashes\n- Thanks to the aforementioned pseudo-static analysis, it works (especially) well on obfuscated files\n\n## Licensing\n\nPHP-malware-finder is\n[licensed](https://github.com/jvoisin/php-malware-finder/blob/master/php-malware-finder/LICENSE)\nunder the GNU Lesser General Public License v3.\n\nThe _amazing_ YARA project is licensed under the Apache v2.0 license.\n\nPatches, whitelists or samples are of course more than welcome.\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.1806640625,
          "content": "module github.com/jvoisin/php-malware-finder\n\ngo 1.17\n\nrequire (\n\tgithub.com/hillu/go-yara/v4 v4.2.4\n\tgithub.com/jessevdk/go-flags v1.5.0\n)\n\nrequire golang.org/x/sys v0.4.0 // indirect\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0.591796875,
          "content": "github.com/hillu/go-yara/v4 v4.2.4 h1:r3KB1XV+h6q+N8bvK6/gLpxAVcd6baYzmOSYHzNo9QQ=\ngithub.com/hillu/go-yara/v4 v4.2.4/go.mod h1:AHEs/FXVMQKVVlT6iG9d+q1BRr0gq0WoAWZQaZ0gS7s=\ngithub.com/jessevdk/go-flags v1.5.0 h1:1jKYvbxEjfUl0fmqTCOfonvskHHXMjBySTLW4y9LFvc=\ngithub.com/jessevdk/go-flags v1.5.0/go.mod h1:Fw0T6WPc1dYxT4mKEZRfG5kJhaTDP9pj1c2EWnYs/m4=\ngolang.org/x/sys v0.0.0-20210320140829-1e4c9ba3b0c4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.4.0 h1:Zr2JFtRQNX3BCZ8YtxRE9hNJYC8J6I1MVbMg6owUp18=\ngolang.org/x/sys v0.4.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 14.4033203125,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"embed\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/fs\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/hillu/go-yara/v4\"\n\t\"github.com/jessevdk/go-flags\"\n)\n\nconst (\n\tRulesURI             = \"https://raw.githubusercontent.com/jvoisin/php-malware-finder/master/php-malware-finder/data\"\n\tRulesFile            = \"php.yar\"\n\tScanMaxDuration      = time.Duration(60)\n\tTooShort             = \"TooShort\"\n\tTooShortMaxLines     = 2\n\tTooShortMinChars     = 300\n\tDangerousMatchWeight = 2\n\tDangerousMinScore    = 3\n\tFileBufferSize       = 32 * 1024 // 32KB\n\tYaraMaxThreads       = 32\n\tTempDirPrefix        = \"pmf-\"\n\tExitCodeOk           = 0\n\tExitCodeWithMatches  = 255\n\tExitCodeWithError    = 1\n)\n\nvar (\n\targs struct { // command-line arguments specs using github.com/jessevdk/go-flags\n\t\tRulesDir      string   `short:\"r\" long:\"rules-dir\" description:\"Alternative rules location (default: embedded rules)\"`\n\t\tShowAll       bool     `short:\"a\" long:\"show-all\" description:\"Display all matched rules\"`\n\t\tFast          bool     `short:\"f\" long:\"fast\" description:\"Enable YARA's fast mode\"`\n\t\tRateLimit     int      `short:\"R\" long:\"rate-limit\" description:\"Max. filesystem ops per second, 0 for no limit\" default:\"0\"`\n\t\tVerbose       bool     `short:\"v\" long:\"verbose\" description:\"Verbose mode\"`\n\t\tWorkers       int      `short:\"w\" long:\"workers\" description:\"Number of workers to spawn for scanning\" default:\"32\"`\n\t\tLongLines     bool     `short:\"L\" long:\"long-lines\" description:\"Check long lines\"`\n\t\tExcludeCommon bool     `short:\"c\" long:\"exclude-common\" description:\"Do not scan files with common extensions\"`\n\t\tExcludeImgs   bool     `short:\"i\" long:\"exclude-imgs\" description:\"Do not scan image files\"`\n\t\tExcludedExts  []string `short:\"x\" long:\"exclude-ext\" description:\"Additional file extensions to exclude\"`\n\t\tUpdate        bool     `short:\"u\" long:\"update\" description:\"Update rules\"`\n\t\tShowVersion   bool     `short:\"V\" long:\"version\" description:\"Show version number and exit\"`\n\t\tPositional    struct {\n\t\t\tTarget string\n\t\t} `positional-args:\"yes\"`\n\t}\n\tscanFlags        yara.ScanFlags\n\tstoppedWorkers   int\n\tlineFeed         = []byte{'\\n'}\n\tdangerousMatches = map[string]struct{}{\n\t\t\"PasswordProtection\": {},\n\t\t\"Websites\":           {},\n\t\t\"TooShort\":           {},\n\t\t\"NonPrintableChars\":  {},\n\t}\n\texcludedDirs = [...]string{\n\t\t\"/.git/\", \"/.hg/\", \"/.svn/\", \"/.CVS/\",\n\t}\n\texcludedExts = map[string]struct{}{}\n\tcommonExts   = [...]string{\n\t\t\".js\", \".coffee\", \".map\", \".min\", \".css\", \".less\", // static files\n\t\t\".zip\", \".rar\", \".7z\", \".gz\", \".bz2\", \".xz\", \".tar\", \".tgz\", // archives\n\t\t\".txt\", \".csv\", \".json\", \".rst\", \".md\", \".yaml\", \".yml\", // plain text\n\t\t\".so\", \".dll\", \".bin\", \".exe\", \".bundle\", // binaries\n\t}\n\timageExts = [...]string{\n\t\t\".png\", \".jpg\", \".jpeg\", \".gif\", \".svg\", \".bmp\", \".ico\",\n\t}\n\tscannedFilesCount int\n\trulesFiles        = [...]string{\n\t\tRulesFile, \"whitelist.yar\",\n\t\t\"whitelists/custom.yar\", \"whitelists/drupal.yar\", \"whitelists/magento1ce.yar\", \"whitelists/magento2.yar\",\n\t\t\"whitelists/phpmyadmin.yar\", \"whitelists/prestashop.yar\", \"whitelists/symfony.yar\", \"whitelists/wordpress.yar\",\n\t}\n\ttempDirPathPrefix = path.Join(os.TempDir(), TempDirPrefix)\n\tversion           = \"dev\"\n\n\t//go:embed data/php.yar data/whitelist.yar data/whitelists\n\tdata embed.FS\n)\n\n// handleError is a generic error handler which displays an error message to the user and exits if required.\nfunc handleError(err error, desc string, isFatal bool) {\n\tif err != nil {\n\t\tif desc != \"\" {\n\t\t\tdesc = \" \" + desc + \":\"\n\t\t}\n\t\tlog.Println(\"[ERROR]\"+desc, err)\n\t\tif isFatal {\n\t\t\tos.Exit(ExitCodeWithError)\n\t\t}\n\t}\n}\n\n// writeRulesFiles copies the rules from the content of a `fs.FS` to a temporary folder and\n// returns its location.\nfunc writeRulesFiles(content fs.FS) string {\n\t// create temporary folder structure\n\trulesPath, err := os.MkdirTemp(os.TempDir(), TempDirPrefix)\n\thandleError(err, \"unable to create temporary folder\", true)\n\terr = os.Mkdir(path.Join(rulesPath, \"whitelists\"), 0755)\n\thandleError(err, \"unable to create temporary subfolder\", true)\n\n\t// write each YARA file to the disk\n\tfor _, rulesFile := range rulesFiles {\n\t\t// read embedded content\n\t\tf, err := content.Open(path.Join(\"data\", rulesFile))\n\t\thandleError(err, \"unable to open embedded rule\", true)\n\t\truleData, err := io.ReadAll(f)\n\t\thandleError(err, \"unable to read rule content\", true)\n\n\t\t// write to temporary file\n\t\terr = os.WriteFile(path.Join(rulesPath, rulesFile), ruleData, 0640)\n\t\thandleError(err, \"unable to write rule to disk\", true)\n\t\terr = f.Close()\n\t\thandleError(err, \"unable to close rules file\", false)\n\t}\n\treturn rulesPath\n}\n\n// updateRules downloads latest YARA rules from phpmalwarefinder GitHub repository.\n// Download location is either `args.RulesDir`, `/etc/phpmalwarefinder`, or the current directory.\nfunc updateRules() {\n\tif strings.HasPrefix(args.RulesDir, tempDirPathPrefix) {\n\t\thandleError(fmt.Errorf(\"rules folder must be specified to update\"), \"\", true)\n\t}\n\tif args.Verbose {\n\t\tlog.Println(\"[DEBUG] updating ruleset\")\n\t}\n\n\tdownloadFile := func(uri string) []byte {\n\t\tresp, err := http.Get(uri)\n\t\thandleError(err, \"unable to download rule\", true)\n\t\tdefer func() {\n\t\t\terr := resp.Body.Close()\n\t\t\thandleError(err, \"unable to close response body\", false)\n\t\t}()\n\t\tdata, err := io.ReadAll(resp.Body)\n\t\thandleError(err, \"unable to read response body\", false)\n\t\treturn data\n\t}\n\twriteFile := func(dst string, data []byte) {\n\t\terr := os.WriteFile(dst, data, 0640)\n\t\thandleError(err, \"unable to write downloaded file\", true)\n\t}\n\n\trulesFiles := [...]string{\n\t\tRulesFile,\n\t\t\"whitelist.yar\", \"whitelists/drupal.yar\", \"whitelists/magento1ce.yar\",\n\t\t\"whitelists/magento2.yar\", \"whitelists/phpmyadmin.yar\", \"whitelists/prestashop.yar\",\n\t\t\"whitelists/symfony.yar\", \"whitelists/wordpress.yar\"}\n\n\t// download rules\n\tfor _, rule := range rulesFiles {\n\t\trulesUri := RulesURI + rule\n\t\tdata := downloadFile(rulesUri)\n\t\toutPath := path.Join(args.RulesDir, rule)\n\t\twriteFile(outPath, data)\n\t\tlog.Println(\"[INFO] updated rule:\", rule)\n\t}\n}\n\n// fileStats takes a file path as argument and returns its lines and characters count.\n// File reading is done using a 32KB buffer to minimize memory usage.\nfunc fileStats(filepath string) (int, int, error) {\n\tf, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn 0, 0, err\n\t}\n\tdefer func() {\n\t\terr := f.Close()\n\t\thandleError(err, \"unable to close file\", false)\n\t}()\n\tcharCount, lineCount := 0, 0\n\tbuf := make([]byte, FileBufferSize)\n\tfor {\n\t\tchunkSize, err := f.Read(buf)\n\t\tcharCount += chunkSize\n\t\tlineCount += bytes.Count(buf[:chunkSize], lineFeed)\n\t\tswitch {\n\t\tcase err == io.EOF:\n\t\t\treturn charCount, lineCount, nil\n\t\tcase err != nil:\n\t\t\treturn charCount, lineCount, err\n\t\t}\n\t}\n}\n\n// makeScanner creates a YARA scanner with the appropriate options set.\nfunc makeScanner(rules *yara.Rules) *yara.Scanner {\n\tscanner, err := yara.NewScanner(rules)\n\thandleError(err, \"unable to create YARA scanner\", true)\n\tscanner.SetFlags(scanFlags)\n\tscanner.SetTimeout(ScanMaxDuration)\n\treturn scanner\n}\n\n// processFiles reads file paths from the `targets` channel, scans it, and writes matches to the `results` channel.\n// Scanning is done using YARA `rules`, and using `fileStats` if `args.LongLines` is set.\n// `ticker` is a `time.Time` object created with `time.Tick` used to throttle file scans to minimize impact on I/O.\nfunc processFiles(rules *yara.Rules, targets <-chan string, results chan<- map[string][]yara.MatchRule, ticker <-chan time.Time) {\n\tscanner := makeScanner(rules)\n\tfor target := range targets {\n\t\t<-ticker\n\t\tscannedFilesCount++\n\t\tresult := map[string][]yara.MatchRule{target: {}}\n\n\t\tif args.LongLines {\n\t\t\tcharCount, lineCount, err := fileStats(target)\n\t\t\thandleError(err, \"unable to get file stats\", false)\n\t\t\tif lineCount <= TooShortMaxLines && charCount >= TooShortMinChars {\n\t\t\t\ttooShort := yara.MatchRule{Rule: TooShort}\n\t\t\t\tresult[target] = append(result[target], tooShort)\n\t\t\t}\n\t\t}\n\n\t\tvar matches yara.MatchRules\n\t\terr := scanner.SetCallback(&matches).ScanFile(target)\n\t\tif err != nil {\n\t\t\tlog.Println(\"[ERROR]\", err)\n\t\t\tcontinue\n\t\t}\n\t\tfor _, match := range matches {\n\t\t\tresult[target] = append(result[target], match)\n\t\t}\n\t\tresults <- result\n\t}\n\tstoppedWorkers++\n\tif stoppedWorkers == args.Workers {\n\t\tclose(results)\n\t}\n}\n\n// scanDir recursively crawls `dirName`, and writes file paths to the `targets` channel.\n// Files sent to `targets` are filtered according to their extensions.\nfunc scanDir(dirName string, targets chan<- string, ticker <-chan time.Time) {\n\tvisit := func(pathName string, fileInfo os.FileInfo, err error) error {\n\t\t<-ticker\n\t\tif !fileInfo.IsDir() {\n\t\t\tfor _, dir := range excludedDirs {\n\t\t\t\tif strings.Contains(pathName, dir) {\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\t\t\t}\n\t\t\tfileExt := filepath.Ext(fileInfo.Name())\n\t\t\tif _, exists := excludedExts[fileExt]; !exists {\n\t\t\t\ttargets <- pathName\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t}\n\terr := filepath.Walk(dirName, visit)\n\thandleError(err, \"unable to complete target crawling\", false)\n\tclose(targets)\n}\n\n// loadRulesFile reads YARA rules from specified `fileName` and returns\n// them in their compiled form.\nfunc loadRulesFile(fileName string) (*yara.Rules, error) {\n\tvar err error = nil\n\t// record working directory and move to rules location\n\tcurDir, err := os.Getwd()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"unable to determine working directory: %v\", err)\n\t}\n\truleDir, ruleName := filepath.Split(fileName)\n\terr = os.Chdir(ruleDir)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"unable to move to rules directory: %v\", err)\n\t}\n\n\t// read file content\n\tdata, err := os.ReadFile(ruleName)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"unable to read rules file: %v\", err)\n\t}\n\n\t// compile rules\n\trules, err := yara.Compile(string(data), nil)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"unable to load rules: %v\", err)\n\t}\n\n\t// move back to working directory\n\terr = os.Chdir(curDir)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"unable to move back to working directory: %v\", err)\n\t}\n\n\treturn rules, nil\n}\n\nfunc main() {\n\tstartTime := time.Now()\n\tmatchesFound := false\n\t_, err := flags.Parse(&args)\n\tif err != nil {\n\t\tos.Exit(ExitCodeWithError)\n\t}\n\tif args.ShowVersion {\n\t\tprintln(version)\n\t\tos.Exit(ExitCodeOk)\n\t}\n\n\t// check rules path\n\tif args.RulesDir == \"\" {\n\t\targs.RulesDir = writeRulesFiles(data)\n\t}\n\tif args.Verbose {\n\t\tlog.Println(\"[DEBUG] rules directory:\", args.RulesDir)\n\t}\n\n\t// update rules if required\n\tif args.Update {\n\t\tupdateRules()\n\t\tos.Exit(ExitCodeOk)\n\t}\n\n\t// add custom excluded file extensions\n\tif args.ExcludeCommon {\n\t\tfor _, commonExt := range commonExts {\n\t\t\texcludedExts[commonExt] = struct{}{}\n\t\t}\n\t}\n\tif args.ExcludeImgs || args.ExcludeCommon {\n\t\tfor _, imgExt := range imageExts {\n\t\t\texcludedExts[imgExt] = struct{}{}\n\t\t}\n\t}\n\tfor _, ext := range args.ExcludedExts {\n\t\tif string(ext[0]) != \".\" {\n\t\t\text = \".\" + ext\n\t\t}\n\t\texcludedExts[ext] = struct{}{}\n\t}\n\tif args.Verbose {\n\t\textList := make([]string, len(excludedExts))\n\t\ti := 0\n\t\tfor ext := range excludedExts {\n\t\t\textList[i] = ext[1:]\n\t\t\ti++\n\t\t}\n\t\tlog.Println(\"[DEBUG] excluded file extensions:\", strings.Join(extList, \",\"))\n\t}\n\n\t// load YARA rules\n\trulePath := path.Join(args.RulesDir, RulesFile)\n\trules, err := loadRulesFile(rulePath)\n\thandleError(err, \"\", true)\n\tif args.Verbose {\n\t\tlog.Println(\"[DEBUG] ruleset loaded:\", rulePath)\n\t}\n\n\t// set YARA scan flags\n\tif args.Fast {\n\t\tscanFlags = yara.ScanFlags(yara.ScanFlagsFastMode)\n\t} else {\n\t\tscanFlags = yara.ScanFlags(0)\n\t}\n\n\t// check if requested threads count is not greater than YARA's MAX_THREADS\n\tif args.Workers > YaraMaxThreads {\n\t\tlog.Printf(\"[WARNING] workers count too high, using %d instead of %d\\n\", YaraMaxThreads, args.Workers)\n\t\targs.Workers = YaraMaxThreads\n\t}\n\n\t// scan target\n\tif f, err := os.Stat(args.Positional.Target); os.IsNotExist(err) {\n\t\thandleError(err, \"\", true)\n\t} else {\n\t\tif args.Verbose {\n\t\t\tlog.Println(\"[DEBUG] scan workers:\", args.Workers)\n\t\t\tlog.Println(\"[DEBUG] target:\", args.Positional.Target)\n\t\t}\n\t\tif f.IsDir() { // parallelized folder scan\n\t\t\t// create communication channels\n\t\t\ttargets := make(chan string)\n\t\t\tresults := make(chan map[string][]yara.MatchRule)\n\n\t\t\t// rate limit\n\t\t\tvar tickerRate time.Duration\n\t\t\tif args.RateLimit == 0 {\n\t\t\t\ttickerRate = time.Nanosecond\n\t\t\t} else {\n\t\t\t\ttickerRate = time.Second / time.Duration(args.RateLimit)\n\t\t\t}\n\t\t\tticker := time.Tick(tickerRate)\n\t\t\tif args.Verbose {\n\t\t\t\tlog.Println(\"[DEBUG] delay between fs ops:\", tickerRate.String())\n\t\t\t}\n\n\t\t\t// start consumers and producer workers\n\t\t\tfor w := 1; w <= args.Workers; w++ {\n\t\t\t\tgo processFiles(rules, targets, results, ticker)\n\t\t\t}\n\t\t\tgo scanDir(args.Positional.Target, targets, ticker)\n\n\t\t\t// read results\n\t\t\tmatchCount := make(map[string]int)\n\t\t\tvar keepListing bool\n\t\t\tvar countedDangerousMatch bool\n\t\t\tfor result := range results {\n\t\t\t\tfor target, matchedSigs := range result {\n\t\t\t\t\tkeepListing = true\n\t\t\t\t\tmatchCount[target] = 0\n\t\t\t\t\tcountedDangerousMatch = false\n\t\t\t\t\tfor _, sig := range matchedSigs {\n\t\t\t\t\t\tmatchCount[target] += DangerousMatchWeight\n\t\t\t\t\t\tif !countedDangerousMatch {\n\t\t\t\t\t\t\tif _, exists := dangerousMatches[sig.Rule]; exists {\n\t\t\t\t\t\t\t\tmatchCount[target]++\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcountedDangerousMatch = true\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif keepListing {\n\t\t\t\t\t\t\tlog.Printf(\"[WARNING] match found: %s (%s)\\n\", target, sig.Rule)\n\t\t\t\t\t\t\tif !args.ShowAll {\n\t\t\t\t\t\t\t\tkeepListing = false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor target, count := range matchCount {\n\t\t\t\tif count >= DangerousMinScore {\n\t\t\t\t\tlog.Println(\"[WARNING] dangerous file found:\", target)\n\t\t\t\t\tmatchesFound = true\n\t\t\t\t}\n\t\t\t}\n\t\t} else { // single file mode\n\t\t\tscannedFilesCount++\n\t\t\tvar matches yara.MatchRules\n\t\t\tscanner := makeScanner(rules)\n\t\t\terr := scanner.SetCallback(&matches).ScanFile(args.Positional.Target)\n\t\t\thandleError(err, \"unable to scan target\", true)\n\t\t\tfor _, match := range matches {\n\t\t\t\tmatchesFound = true\n\t\t\t\tlog.Println(\"[WARNING] match found:\", args.Positional.Target, match.Rule)\n\t\t\t\tif args.Verbose {\n\t\t\t\t\tfor _, matchString := range match.Strings {\n\t\t\t\t\t\tlog.Printf(\"[DEBUG] match string for %s: 0x%x:%s: %s\\n\", args.Positional.Target, matchString.Offset, matchString.Name, matchString.Data)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif !args.ShowAll {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif args.Verbose {\n\t\t\tendTime := time.Now()\n\t\t\tlog.Printf(\"[DEBUG] scanned %d files in %s\\n\", scannedFilesCount, endTime.Sub(startTime).String())\n\t\t}\n\t}\n\n\t// delete temporary files\n\tif strings.HasPrefix(args.RulesDir, tempDirPathPrefix) {\n\t\tif args.Verbose {\n\t\t\tlog.Println(\"[DEBUG] deleting temporary folder:\", args.RulesDir)\n\t\t}\n\t\terr := os.RemoveAll(args.RulesDir)\n\t\thandleError(err, fmt.Sprintf(\"unable to delete temporary folder '%s'\", args.RulesDir), false)\n\t}\n\n\tif matchesFound {\n\t\tos.Exit(ExitCodeWithMatches)\n\t}\n\tos.Exit(ExitCodeOk)\n}\n"
        },
        {
          "name": "tests.sh",
          "type": "blob",
          "size": 4.1181640625,
          "content": "#!/bin/bash\n\nPMF=./php-malware-finder\nSAMPLES=./data/samples\n\ntype yara 2>/dev/null 1>&2 || (echo \"[-] Please make sure that yara is installed\" && exit 1)\n\nCPT=0\nrun_test(){\n    NB_DETECTED=$(${PMF} -v -a \"$SAMPLES\"/\"$1\" 2>&1 | grep -c \"$2\" 2>/dev/null)\n\n    if [[ \"$NB_DETECTED\" != 1 ]]; then\n        echo \"[-] $2 was not detected in $1, sorry\"\n        exit 1\n    fi\n    CPT=$((CPT+1))\n}\n\n\n# Real samples\nrun_test cpanel.php  '0x294d:$eval: {eval('\nrun_test freepbx.php 'ObfuscatedPhp'\nrun_test freepbx.php '0x72:$eval: { system('\nrun_test freepbx.php 'DodgyPhp'\nrun_test freepbx.php '0x31d:$execution: system(base64_decode'\n\n# Classic shells\nrun_test classic/ajaxshell.php 'DodgyStrings'\nrun_test classic/ajaxshell.php '0x23e2:$: shell_exec'\nrun_test classic/ajaxshell.php \"0x16e0:\\$ini_get: ini_get('safe_mode\"\nrun_test classic/ajaxshell.php \"0x17f1:\\$ini_get: ini_get('open_basedir\"\nrun_test classic/angel.php '0x1b:$disable_magic_quotes:'\nrun_test classic/b374k.php 'ObfuscatedPhp'\nrun_test classic/b374k.php \"0xe9:\\$b374k: 'ev'.'al'\"\nrun_test classic/b374k.php '0xb3:$align: $func=\"cr\".\"eat\".\"e_fun\".\"cti\".\"on\";$b374k=$func('\nrun_test classic/b374k.php '0xd6:$align: ;$b374k=$func('\nrun_test classic/b374k.php '0x43:$: github.com/b374k/b374k'\nrun_test classic/sosyete.php '0x194e:$execution: shell_exec($_POST'\nrun_test classic/simattacker.php '0x158:$: fpassthru'\nrun_test classic/r57.php '0x142a2:$: xp_cmdshell'\nrun_test classic/cyb3rsh3ll.php '0x2200d:$udp_dos: fsockopen(\"udp://'\nrun_test classic/c99.php '0x3bb4:$eval: {exec('\nrun_test classic/c100.php '0x4f8d:$eval: {eval('\n\n# Obfuscated php\nrun_test obfuscators/cipher_design.php '0x124:$execution: eval(base64_decode'\nrun_test obfuscators/cipher_design.php '0x123:$eval: ;eval('\nrun_test obfuscators/online_php_obfuscator.php '0x51:$eval: ;preg_replace('\nrun_test obfuscators/online_php_obfuscator.php \"0x52:\\$pr: preg_replace('/.*/e\"\nrun_test obfuscators/online_php_obfuscator.php \"SuspiciousEncoding\"\nrun_test obfuscators/phpencode.php \"ObfuscatedPhp\"\nrun_test obfuscators/phpencode.php \"DodgyPhp\"\n\n# Artificial samples to test some rules\nrun_test artificial/obfuscated.php '0x0:$eval: <?php@eval('\nrun_test artificial/obfuscated.php '0x17:$eval: <?php'\nrun_test artificial/obfuscated.php '0xd1:$align: ;$b374k=$func('\nrun_test artificial/obfuscated.php '0xf0:$weevely3:'\nrun_test artificial/obfuscated.php '0x103:$c99_launcher:'\nrun_test artificial/obfuscated.php '0x117:$variable_variable:'\nrun_test artificial/dodgy.php '$basedir_bypass:'\nrun_test artificial/dodgy.php '$basedir_bypass2:'\nrun_test artificial/dodgy.php '$disable_magic_quotes:'\nrun_test artificial/dodgy.php '$execution: eval(base64_decode'\nrun_test artificial/dodgy.php '$execution: base64_decode($_GET'\nrun_test artificial/dodgy.php '$htaccess:'\nrun_test artificial/dodgy.php '0xd7:$iis_com: IIS://localhost/w3svc'\nrun_test artificial/dodgy.php \"0xef:\\$include: include  ( 'lol.png\"\nrun_test artificial/dodgy.php \"\\$ini_get: ini_get (  'disable_functions\"\nrun_test artificial/dodgy.php '$ini_get: ini_set(\"disable_functions'\nrun_test artificial/dodgy.php '$ini_get: ini_restore(\"allow_url_include'\nrun_test artificial/dodgy.php '$shellshock: () { :;};'\nrun_test artificial/dodgy.php '$pr: preg_replace (\"/\\*/e'\nrun_test artificial/dodgy.php '$various: <!--#exec cmd='\nrun_test artificial/dodgy.php '$: AddType application/x-httpd-php .htaccess'\n\nrun_test artificial/bypasses.php 'DodgyPhp'\nrun_test artificial/bypasses.php '0x6d:$execution: call_user_func_array($_POST'\nrun_test artificial/bypasses.php \"0x132:\\$var_as_func: \\$_POST\\['funct'\\](\"\n\n# real\nrun_test real/sucuri_2014_04.php '0x67:$execution3:'\nrun_test real/novahot.php 'DodgyStrings'\nrun_test real/guidtz.php '0x286:$non_printables:'\nrun_test real/ice.php 'double_var'\nrun_test real/srt.php '$register_function'\nrun_test real/awvjtnz.php '$reversed:'\nrun_test real/exceptions.php '$eval_comment: eval/\\*k\\*/('\nrun_test real/nano.php '$nano: $x\\[f\\]('\nrun_test real/ninja.php '$nano: $x\\[0\\]('\nrun_test real/ninja.php '$ninja: base64_decode(substr(getallheaders'\nrun_test real/include.php ':$silenced_include: @include'\n\nrun_test undetected/smart.php '0x6:$extract:'\n\necho \"[+] Congratz, the $CPT tests succeeded!\"\n"
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}