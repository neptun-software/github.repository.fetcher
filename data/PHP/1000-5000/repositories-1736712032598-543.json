{
  "metadata": {
    "timestamp": 1736712032598,
    "page": 543,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "symfony/security-core",
      "stars": 1835,
      "defaultBranch": "7.2",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.072265625,
          "content": "/Tests export-ignore\n/phpunit.xml.dist export-ignore\n/.git* export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "vendor/\ncomposer.lock\nphpunit.xml\n"
        },
        {
          "name": "Authentication",
          "type": "tree",
          "content": null
        },
        {
          "name": "AuthenticationEvents.php",
          "type": "blob",
          "size": 0.8720703125,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Security\\Core;\n\nuse Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent;\n\nfinal class AuthenticationEvents\n{\n    /**\n     * The AUTHENTICATION_SUCCESS event occurs after a user is authenticated\n     * by one provider.\n     *\n     * @Event(\"Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent\")\n     */\n    public const AUTHENTICATION_SUCCESS = 'security.authentication.success';\n\n    /**\n     * Event aliases.\n     *\n     * These aliases can be consumed by RegisterListenersPass.\n     */\n    public const ALIASES = [\n        AuthenticationSuccessEvent::class => self::AUTHENTICATION_SUCCESS,\n    ];\n}\n"
        },
        {
          "name": "Authorization",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.693359375,
          "content": "CHANGELOG\n=========\n\n7.2\n---\n\n * Make `AccessDecisionStrategyTestCase` compatible with PHPUnit 10+\n * Add `$token` argument to `UserCheckerInterface::checkPostAuth()`\n * Deprecate argument `$secret` of `RememberMeToken`\n * Deprecate returning an empty string in `UserInterface::getUserIdentifier()`\n\n7.0\n---\n\n * Remove the `Security` class, use `Symfony\\Bundle\\SecurityBundle\\Security` instead\n * Require explicit argument when calling `TokenStorage::setToken()`\n * Change argument `$lastUsed` of `TokenProviderInterface::updateToken()` to accept `DateTimeInterface`\n\n6.4\n---\n\n * Make `PersistentToken` immutable\n * Deprecate accepting only `DateTime` for `TokenProviderInterface::updateToken()`, use `DateTimeInterface` instead\n\n6.3\n---\n\n * Add `AttributesBasedUserProviderInterface` to allow `$attributes` optional argument on `loadUserByIdentifier`\n * Add `OidcUser` with OIDC support for `OidcUserInfoTokenHandler`\n\n6.2\n---\n\n * Deprecate the `Security` class, use `Symfony\\Bundle\\SecurityBundle\\Security` instead\n * Change the signature of `TokenStorageInterface::setToken()` to `setToken(?TokenInterface $token)`\n * Deprecate calling `TokenStorage::setToken()` without arguments\n * Add a `ChainUserChecker` to allow calling multiple user checkers for a firewall\n\n6.0\n---\n\n * `TokenInterface` does not extend `Serializable` anymore\n * Remove all classes in the `Core\\Encoder\\`  sub-namespace, use the `PasswordHasher` component instead\n * Remove methods `getPassword()` and `getSalt()` from `UserInterface`, use `PasswordAuthenticatedUserInterface`\n   or `LegacyPasswordAuthenticatedUserInterface` instead\n* `AccessDecisionManager` requires the strategy to be passed as in instance of `AccessDecisionStrategyInterface`\n\n5.4.21\n------\n\n * [BC BREAK] `AccessDecisionStrategyTestCase::provideStrategyTests()` is now static\n\n5.4\n---\n\n * Add a `CacheableVoterInterface` for voters that vote only on identified attributes and subjects\n * Deprecate `AuthenticationEvents::AUTHENTICATION_FAILURE`, use the `LoginFailureEvent` instead\n * Deprecate `AnonymousToken`, as the related authenticator was deprecated in 5.3\n * Deprecate `Token::getCredentials()`, tokens should no longer contain credentials (as they represent authenticated sessions)\n * Deprecate returning `string|\\Stringable` from `Token::getUser()` (it must return a `UserInterface`)\n * Deprecate `AuthenticatedVoter::IS_AUTHENTICATED_ANONYMOUSLY` and `AuthenticatedVoter::IS_ANONYMOUS`,\n   use `AuthenticatedVoter::IS_AUTHENTICATED_FULLY` or `AuthenticatedVoter::IS_AUTHENTICATED` instead.\n * Deprecate `AuthenticationTrustResolverInterface::isAnonymous()` and the `is_anonymous()` expression\n   function as anonymous no longer exists in version 6, use the `isFullFledged()` or the new\n   `isAuthenticated()` instead if you want to check if the request is (fully) authenticated.\n * Deprecate the `$authenticationManager` argument of the `AuthorizationChecker` constructor\n * Deprecate setting the `$alwaysAuthenticate` argument to `true` and not setting the\n   `$exceptionOnNoToken` argument to `false` of `AuthorizationChecker`\n * Deprecate methods `TokenInterface::isAuthenticated()` and `setAuthenticated`,\n   return null from \"getUser()\" instead when a token is not authenticated\n * Add `AccessDecisionStrategyInterface` to allow custom access decision strategies\n * Add access decision strategies `AffirmativeStrategy`, `ConsensusStrategy`, `PriorityStrategy`, `UnanimousStrategy`\n * Deprecate passing the strategy as string to `AccessDecisionManager`,\n   pass an instance of `AccessDecisionStrategyInterface` instead\n * Flag `AccessDecisionManager` as `@final`\n\n5.3\n---\n\nThe CHANGELOG for version 5.3 and earlier can be found at https://github.com/symfony/symfony/blob/5.3/src/Symfony/Component/Security/CHANGELOG.md\n"
        },
        {
          "name": "Event",
          "type": "tree",
          "content": null
        },
        {
          "name": "Exception",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (c) 2004-present Fabien Potencier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.1533203125,
          "content": "Security Component - Core\n=========================\n\nSecurity provides an infrastructure for sophisticated authorization systems,\nwhich makes it possible to easily separate the actual authorization logic from\nso called user providers that hold the users credentials.\n\nGetting Started\n---------------\n\n```bash\ncomposer require symfony/security-core\n```\n\n```php\nuse Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationTrustResolver;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken;\nuse Symfony\\Component\\Security\\Core\\Authorization\\AccessDecisionManager;\nuse Symfony\\Component\\Security\\Core\\Authorization\\Voter\\AuthenticatedVoter;\nuse Symfony\\Component\\Security\\Core\\Authorization\\Voter\\RoleVoter;\nuse Symfony\\Component\\Security\\Core\\Authorization\\Voter\\RoleHierarchyVoter;\nuse Symfony\\Component\\Security\\Core\\Exception\\AccessDeniedException;\nuse Symfony\\Component\\Security\\Core\\Role\\RoleHierarchy;\n\n$accessDecisionManager = new AccessDecisionManager([\n    new AuthenticatedVoter(new AuthenticationTrustResolver()),\n    new RoleVoter(),\n    new RoleHierarchyVoter(new RoleHierarchy([\n        'ROLE_ADMIN' => ['ROLE_USER'],\n    ]))\n]);\n\n$user = new \\App\\Entity\\User(...);\n$token = new UsernamePasswordToken($user, 'main', $user->getRoles());\n\nif (!$accessDecisionManager->decide($token, ['ROLE_ADMIN'])) {\n    throw new AccessDeniedException();\n}\n```\n\nSponsor\n-------\n\nThe Security component for Symfony 7.1 is [backed][1] by [SymfonyCasts][2].\n\nLearn Symfony faster by watching real projects being built and actively coding\nalong with them. SymfonyCasts bridges that learning gap, bringing you video\ntutorials and coding challenges. Code on!\n\nHelp Symfony by [sponsoring][3] its development!\n\nResources\n---------\n\n * [Documentation](https://symfony.com/doc/current/components/security.html)\n * [Contributing](https://symfony.com/doc/current/contributing/index.html)\n * [Report issues](https://github.com/symfony/symfony/issues) and\n   [send Pull Requests](https://github.com/symfony/symfony/pulls)\n   in the [main Symfony repository](https://github.com/symfony/symfony)\n\n[1]: https://symfony.com/backers\n[2]: https://symfonycasts.com\n[3]: https://symfony.com/sponsor\n"
        },
        {
          "name": "Resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "Role",
          "type": "tree",
          "content": null
        },
        {
          "name": "Signature",
          "type": "tree",
          "content": null
        },
        {
          "name": "Test",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "User",
          "type": "tree",
          "content": null
        },
        {
          "name": "Validator",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.6787109375,
          "content": "{\n    \"name\": \"symfony/security-core\",\n    \"type\": \"library\",\n    \"description\": \"Symfony Security Component - Core Library\",\n    \"keywords\": [],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Fabien Potencier\",\n            \"email\": \"fabien@symfony.com\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=8.2\",\n        \"symfony/deprecation-contracts\": \"^2.5|^3\",\n        \"symfony/event-dispatcher-contracts\": \"^2.5|^3\",\n        \"symfony/service-contracts\": \"^2.5|^3\",\n        \"symfony/password-hasher\": \"^6.4|^7.0\"\n    },\n    \"require-dev\": {\n        \"psr/container\": \"^1.1|^2.0\",\n        \"psr/cache\": \"^1.0|^2.0|^3.0\",\n        \"symfony/cache\": \"^6.4|^7.0\",\n        \"symfony/dependency-injection\": \"^6.4|^7.0\",\n        \"symfony/event-dispatcher\": \"^6.4|^7.0\",\n        \"symfony/expression-language\": \"^6.4|^7.0\",\n        \"symfony/http-foundation\": \"^6.4|^7.0\",\n        \"symfony/ldap\": \"^6.4|^7.0\",\n        \"symfony/string\": \"^6.4|^7.0\",\n        \"symfony/translation\": \"^6.4.3|^7.0.3\",\n        \"symfony/validator\": \"^6.4|^7.0\",\n        \"psr/log\": \"^1|^2|^3\"\n    },\n    \"conflict\": {\n        \"symfony/dependency-injection\": \"<6.4\",\n        \"symfony/event-dispatcher\": \"<6.4\",\n        \"symfony/http-foundation\": \"<6.4\",\n        \"symfony/ldap\": \"<6.4\",\n        \"symfony/translation\": \"<6.4.3|>=7.0,<7.0.3\",\n        \"symfony/validator\": \"<6.4\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Symfony\\\\Component\\\\Security\\\\Core\\\\\": \"\" },\n        \"exclude-from-classmap\": [\n            \"/Tests/\"\n        ]\n    },\n    \"minimum-stability\": \"dev\"\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.8505859375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"http://schema.phpunit.de/9.3/phpunit.xsd\"\n         backupGlobals=\"false\"\n         colors=\"true\"\n         bootstrap=\"vendor/autoload.php\"\n         failOnRisky=\"true\"\n         failOnWarning=\"true\"\n>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\" />\n    </php>\n\n    <testsuites>\n        <testsuite name=\"Symfony Security Component Core Test Suite\">\n            <directory>./Tests/</directory>\n        </testsuite>\n    </testsuites>\n\n    <coverage>\n        <include>\n            <directory>./</directory>\n        </include>\n        <exclude>\n            <directory>./Resources</directory>\n            <directory>./Tests</directory>\n            <directory>./vendor</directory>\n        </exclude>\n    </coverage>\n</phpunit>\n"
        }
      ]
    }
  ]
}