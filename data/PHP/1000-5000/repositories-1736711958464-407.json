{
  "metadata": {
    "timestamp": 1736711958464,
    "page": 407,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spatie/data-transfer-object",
      "stars": 2236,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3046875,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3857421875,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n# Ignore all test and documentation with \"export-ignore\".\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/.travis.yml        export-ignore\n/phpunit.xml.dist   export-ignore\n/.scrutinizer.yml   export-ignore\n/tests              export-ignore\n/.editorconfig      export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0869140625,
          "content": "build\ncomposer.lock\ndocs\nvendor\ncoverage\n.idea\n.php-cs-fixer.cache\n.phpunit.result.cache\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 1.25,
          "content": "<?php\n\n$finder = Symfony\\Component\\Finder\\Finder::create()\n    ->notPath('docs/*')\n    ->notPath('vendor')\n    ->in([\n        __DIR__.'/src',\n        __DIR__.'/tests',\n    ])\n    ->name('*.php')\n    ->ignoreDotFiles(true)\n    ->ignoreVCS(true);\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules([\n        '@PSR12' => true,\n        'array_syntax' => ['syntax' => 'short'],\n        'ordered_imports' => ['sort_algorithm' => 'alpha'],\n        'no_unused_imports' => true,\n        'not_operator_with_successor_space' => true,\n        'trailing_comma_in_multiline' => true,\n        'phpdoc_scalar' => true,\n        'unary_operator_spaces' => true,\n        'binary_operator_spaces' => true,\n        'logical_operators' => true,\n        'blank_line_before_statement' => [\n            'statements' => ['break', 'continue', 'declare', 'return', 'throw', 'try'],\n        ],\n        'phpdoc_single_line_var_spacing' => true,\n        'phpdoc_var_without_name' => true,\n        'class_attributes_separation' => [\n            'elements' => [\n                'method' => 'one'\n            ],\n        ],\n        'method_argument_space' => [\n            'on_multiline' => 'ensure_fully_multiline',\n            'keep_multiple_spaces_after_comma' => true,\n        ],\n    ])\n    ->setFinder($finder);\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 7.3427734375,
          "content": "# Changelog\n\nAll notable changes to `data-transfer-object` will be documented in this file\n\n## 3.9.1 - 2022-09-16\n\n### What's Changed\n\n- Add test for \"Cannot use positional argument after named argument during unpacking\" error by @Kehet in https://github.com/spatie/data-transfer-object/pull/302\n- Fix positional after named by @aidan-casey in https://github.com/spatie/data-transfer-object/pull/304\n\n### New Contributors\n\n- @Kehet made their first contribution in https://github.com/spatie/data-transfer-object/pull/302\n\n**Full Changelog**: https://github.com/spatie/data-transfer-object/compare/3.9.0...3.9.1\n\n## 3.9.0 - 2022-09-14\n\n### What's Changed\n\n- allow enum casting not only enum value casting by @regnerisch in https://github.com/spatie/data-transfer-object/pull/301\n\n### New Contributors\n\n- @regnerisch made their first contribution in https://github.com/spatie/data-transfer-object/pull/301\n\n**Full Changelog**: https://github.com/spatie/data-transfer-object/compare/3.8.1...3.9.0\n\n## 3.8.1 - 2022-06-02\n\n### What's Changed\n\n- Fixed bug #249 by @gerpo in https://github.com/spatie/data-transfer-object/pull/251\n\n**Full Changelog**: https://github.com/spatie/data-transfer-object/compare/3.8.0...3.8.1\n\n## 3.8.0 - 2022-06-02\n\n### What's Changed\n\n- Added enum caster by @Elnadrion in https://github.com/spatie/data-transfer-object/pull/277\n\n### New Contributors\n\n- @Raja-Omer-Mustafa made their first contribution in https://github.com/spatie/data-transfer-object/pull/271\n- @Elnadrion made their first contribution in https://github.com/spatie/data-transfer-object/pull/277\n\n**Full Changelog**: https://github.com/spatie/data-transfer-object/compare/3.7.3...3.8.0\n\n## 3.7.3 - 2022-01-10\n\n## What's Changed\n\n- Stop suggesting phpstan/phpstan by @ymilin in https://github.com/spatie/data-transfer-object/pull/264\n\n## New Contributors\n\n- @sergiy-petrov made their first contribution in https://github.com/spatie/data-transfer-object/pull/246\n- @damms005 made their first contribution in https://github.com/spatie/data-transfer-object/pull/255\n- @ymilin made their first contribution in https://github.com/spatie/data-transfer-object/pull/264\n\n**Full Changelog**: https://github.com/spatie/data-transfer-object/compare/3.7.2...3.7.3\n\n## 3.7.2 - 2021-09-17\n\n- `#[Strict]` is passed down the inheritance chain so children are strict when parent is strict (#239)\n\n## 3.7.1 - 2021-09-09\n\n- Cast properties with self or parent type (#236)\n\n## 3.7.0 - 2021-08-26\n\n- Add `#[MapTo]` support (#233)\n\n## 3.6.2 - 2021-08-25\n\n- Correct behavior of Arr::forget with dot keys (#231)\n\n## 3.6.1 - 2021-08-17\n\n- Fix array assignment bug with strict dto's (#225)\n\n## 3.6.0 - 2021-08-12\n\n- Support mapped properties (#224)\n\n## 3.5.0 - 2021-08-11\n\n- Support union types in casters (#210)\n\n## 3.4.0 - 2021-08-10\n\n- Fix for an empty value being created when casting `ArrayAccess` objects (#216)\n- Add logic exception when attempting to cast `ArrayAccess` objects that are not traversable (#216)\n- Allow the `ArrayCaster` to retain values that are already instances of the `itemType` (#217)\n\n## 3.3.0 - 2021-06-01\n\n- Expose DTO and validation error array in ValidationException (#213)\n\n## 3.2.0 - 2021-05-31\n\n- Support generic casters (#199)\n- Add `ArrayCaster`\n- Add casting of objects that implement `ArrayAccess` to the `ArrayCaster` (#206)\n- Fix for caster subclass check (#204)\n\n## 3.1.1 - 2021-04-26\n\n- Make `DefaultCast` repeatable (#202)\n\n## 3.1.0 - 2021-04-21\n\n- Add `DataTransferObject::clone(...$args)`\n\n## 3.0.4 - 2021-04-14\n\n- Support union types (#185)\n- Resolve default cast from parent classes (#189)\n- Support default values (#191)\n\n## 3.0.3 - 2021-04-08\n\n- Fix when nested DTO have casted field (#178)\n\n## 3.0.2 - 2021-04-02\n\n- Allow valid DTOs to be passed to caster (#177)\n\n## 3.0.1 - 2021-04-02\n\n- Fix for null values with casters\n\n## 3.0.0 - 2021-04-02\n\nThis package now focuses only on object creation by adding easy-to-use casting and data validation functionality. All runtime type checks are gone in favour of the improved type system in PHP 8.\n\n- Require `php:^8.0`\n- Removed all runtime type checking functionality, you should use typed properties and a static analysis tool like Psalm or PhpStan\n- Removed `Spatie\\DataTransferObject\\DataTransferObjectCollection`\n- Removed `Spatie\\DataTransferObject\\FlexibleDataTransferObject`, all DTOs are now considered flexible\n- Removed runtime immutable DTOs, you should use static analysis instead\n- Added `Spatie\\DataTransferObject\\Validator`\n- Added `Spatie\\DataTransferObject\\Validation\\ValidationResult`\n- Added `#[DefaultCast]`\n- Added `#[CastWith]`\n- Added `Spatie\\DataTransferObject\\Caster`\n- Added `#[Strict]`\n\n## 2.8.3 - 2021-02-12\n\n- Add support for using `collection` internally\n\n## 2.8.2 - 2021-02-11\n\nThis might be a breaking change, but it was required for a bugfix\n\n- Prevent DataTransferObjectCollection from iterating over array copy (#166)\n\n## 2.8.1 - 2021-02-10\n\n- Fix for incorrect return type (#164)\n\n## 2.8.0 - 2021-01-27\n\n- Allow the traversal of collections with string keys\n\n## 2.7.0 - 2021-01-21\n\n- Cast nested collections (#117)\n\n## 2.6.0 - 2020-11-26\n\n- Support PHP 8\n\n## 2.5.0 - 2020-08-28\n\n- Group type errors (#130)\n\n## 2.4.0 - 2020-08-28\n\n- Support for `array<int, string>` syntax (#136)\n\n## 2.3.0 - 2020-08-19\n\n- Add PHPStan extension to support `checkUninitializedProperties: true` (#135)\n\n## 2.2.1 - 2020-05-13\n\n- Validator for typed 7.4 properties (#109)\n\n## 2.2.0 - 2020-05-08\n\n- Add support for typed properties to DTO casting in PHP 7.4\n\n## 2.0.0 - 2020-04-28\n\n- Bump minimum required PHP version to 7.4\n- Support for nested immutable DTOs (#86)\n\n## 1.13.3 - 2020-01-29\n\n- Ignore static properties when serializing (#88)\n\n## 1.13.2 - 2020-01-08\n\n- DataTransferObjectError::invalidType : get actual type before mutating $value for the error message (#81)\n\n## 1.13.1 - 2020-01-08\n\n- Improve extendability of DTOs (#80)\n\n## 1.13.0 - 2020-01-08\n\n- Ignore static properties (#82)\n- Add `DataTransferObject::arrayOf` (#83)\n\n## 1.12.0 - 2019-12-19\n\n- Improved performance by adding a cache (#79)\n- Add `FlexibleDataTransferObject` which allows for unknown properties to be ignored\n\n## 1.11.0 - 2019-11-28 (#71)\n\n- Add `iterable` and `iterable<\\Type>` support\n\n## 1.10.0 - 2019-10-16\n\n- Allow a DTO to be constructed without an array (#68)\n\n## 1.9.1 - 2019-10-03\n\n- Improve type error message\n\n## 1.9.0 - 2019-08-30\n\n- Add DataTransferObjectCollection::items()\n\n## 1.8.0 - 2019-03-18\n\n- Support immutability\n\n## 1.7.1 - 2019-02-11\n\n- Fixes #47, allowing empty dto's to be cast to using an empty array.\n\n## 1.7.0 - 2019-02-04\n\n- Nested array DTO casting supported.\n\n## 1.6.6 - 2018-12-04\n\n- Properly support `float`.\n\n## 1.6.5 - 2018-11-20\n\n- Fix uninitialised error with default value.\n\n## 1.6.4 - 2018-11-15\n\n- Don't use `allValues` anymore.\n\n## 1.6.3 - 2018-11-14\n\n- Support nested collections in collections\n- Cleanup code\n\n## 1.6.2 - 2018-11-14\n\n- Remove too much magic in nested array casting\n\n## 1.6.1 - 2018-11-14\n\n- Support nested `toArray` in collections.\n\n## 1.6.0 - 2018-11-14\n\n- Support nested `toArray`.\n\n## 1.5.1 - 2018-11-07\n\n- Add strict type declarations\n\n## 1.5.0 - 2018-11-07\n\n- Add auto casting of nested DTOs\n\n## 1.4.0 - 2018-11-05\n\n- Rename to data-transfer-object\n\n## 1.2.0 - 2018-10-30\n\n- Add uninitialized errors.\n\n## 1.1.1 - 2018-10-25\n\n- Support instanceof on interfaces when type checking\n\n## 1.1.0 - 2018-10-24\n\n- proper support for collections of value objects\n\n## 1.0.0 - 2018-10-24\n\n- initial release\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.064453125,
          "content": "The MIT License (MIT)\n\nCopyright (c) Spatie bvba <info@spatie.be>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.4638671875,
          "content": "> **Warning**\n> We [have decided](https://stitcher.io/blog/deprecating-spatie-dto) to stop maintaining this package.\n> \n> Consider migrating to [spatie/laravel-data](https://spatie.be/docs/laravel-data) or [cuyz/valinor](https://github.com/cuyz/valinor).\n>\n> Feel free to fork our code and adapt it to your needs.\n\n# Data transfer objects with batteries included\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/spatie/data-transfer-object.svg?style=flat-square)](https://packagist.org/packages/spatie/data-transfer-object)\n![Test](https://github.com/spatie/data-transfer-object/workflows/Test/badge.svg)\n[![Total Downloads](https://img.shields.io/packagist/dt/spatie/data-transfer-object.svg?style=flat-square)](https://packagist.org/packages/spatie/data-transfer-object)\n\n## Installation\n\nYou can install the package via composer:\n\n```bash\ncomposer require spatie/data-transfer-object\n```\n\n* **Note**: v3 of this package only supports `php:^8.0`. If you're looking for the older version, check out [v2](https://github.com/spatie/data-transfer-object/tree/v2).\n\n## Support us\n\n[<img src=\"https://github-ads.s3.eu-central-1.amazonaws.com/data-transfer-object.jpg?t=1\" width=\"419px\" />](https://spatie.be/github-ad-click/data-transfer-object)\n\nWe invest a lot of resources into creating [best in class open source packages](https://spatie.be/open-source). You can support us by [buying one of our paid products](https://spatie.be/open-source/support-us).\n\nWe highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You'll find our address on [our contact page](https://spatie.be/about-us). We publish all received postcards on [our virtual postcard wall](https://spatie.be/open-source/postcards).\n\n## Usage\n\nThe goal of this package is to make constructing objects from arrays of (serialized) data as easy as possible. Here's what a DTO looks like:\n\n```php\nuse Spatie\\DataTransferObject\\Attributes\\MapFrom;\nuse Spatie\\DataTransferObject\\DataTransferObject;\n\nclass MyDTO extends DataTransferObject\n{\n    public OtherDTO $otherDTO;\n    \n    public OtherDTOCollection $collection;\n    \n    #[CastWith(ComplexObjectCaster::class)]\n    public ComplexObject $complexObject;\n    \n    public ComplexObjectWithCast $complexObjectWithCast;\n    \n    #[NumberBetween(1, 100)]\n    public int $a;\n    \n    #[MapFrom('address.city')]\n    public string $city;\n}\n```\n\nYou could construct this DTO like so:\n\n```php\n$dto = new MyDTO(\n    a: 5,\n    collection: [\n        ['id' => 1],\n        ['id' => 2],\n        ['id' => 3],\n    ],\n    complexObject: [\n        'name' => 'test',\n    ],\n    complexObjectWithCast: [\n        'name' => 'test',\n    ],\n    otherDTO: ['id' => 5],\n);\n```\n\nLet's discuss all possibilities one by one.\n\n## Named arguments\n\nConstructing a DTO can be done with named arguments. It's also possible to still use the old array notation. This example is equivalent to the one above.\n\n```php\n$dto = new MyDTO([\n    'a' => 5,\n    'collection' => [\n        ['id' => 1],\n        ['id' => 2],\n        ['id' => 3],\n    ],\n    'complexObject' => [\n        'name' => 'test',\n    ],\n    'complexObjectWithCast' => [\n        'name' => 'test',\n    ],\n    'otherDTO' => ['id' => 5],\n]);\n```\n\n## Value casts\n\nIf a DTO has a property that is another DTO or a DTO collection, the package will take care of automatically casting arrays of data to those DTOs:\n\n```php\n$dto = new MyDTO(\n    collection: [ // This will become an object of class OtherDTOCollection\n        ['id' => 1],\n        ['id' => 2], // Each item will be an instance of OtherDTO\n        ['id' => 3],\n    ],\n    otherDTO: ['id' => 5], // This data will be cast to OtherDTO\n);\n```\n\n### Custom casters\n\nYou can build your own caster classes, which will take whatever input they are given, and will cast that input to the desired result.\n\nTake a look at the `ComplexObject`:\n\n```php\nclass ComplexObject\n{\n    public string $name;\n}\n```\n\nAnd its caster `ComplexObjectCaster`:\n\n```php\nuse Spatie\\DataTransferObject\\Caster;\n\nclass ComplexObjectCaster implements Caster\n{\n    /**\n     * @param array|mixed $value\n     *\n     * @return mixed\n     */\n    public function cast(mixed $value): ComplexObject\n    {\n        return new ComplexObject(\n            name: $value['name']\n        );\n    }\n}\n```\n\n### Class-specific casters\n\nInstead of specifying which caster should be used for each property, you can also define that caster on the target class itself:\n\n```php\nclass MyDTO extends DataTransferObject\n{\n    public ComplexObjectWithCast $complexObjectWithCast;\n}\n```\n\n```php\n#[CastWith(ComplexObjectWithCastCaster::class)]\nclass ComplexObjectWithCast\n{\n    public string $name;\n}\n```\n\n### Default casters\n\nIt's possible to define default casters on a DTO class itself. These casters will be used whenever a property with a given type is encountered within the DTO class.\n\n```php\n#[\n    DefaultCast(DateTimeImmutable::class, DateTimeImmutableCaster::class),\n    DefaultCast(MyEnum::class, EnumCaster::class),\n]\nabstract class BaseDataTransferObject extends DataTransferObject\n{\n    public MyEnum $status; // EnumCaster will be used\n    \n    public DateTimeImmutable $date; // DateTimeImmutableCaster will be used\n}\n```\n\n### Using custom caster arguments\n\nAny caster can be passed custom arguments, the built-in [`ArrayCaster` implementation](https://github.com/spatie/data-transfer-object/blob/master/src/Casters/ArrayCaster.php) is a good example of how this may be used.\n\nUsing named arguments when passing input to your caster will help make your code more clear, but they are not required.\n\nFor example:\n\n```php\n    /** @var \\Spatie\\DataTransferObject\\Tests\\Foo[] */\n    #[CastWith(ArrayCaster::class, itemType: Foo::class)]\n    public array $collectionWithNamedArguments;\n    \n    /** @var \\Spatie\\DataTransferObject\\Tests\\Foo[] */\n    #[CastWith(ArrayCaster::class, Foo::class)]\n    public array $collectionWithoutNamedArguments;\n```\n\nNote that the first argument passed to the caster constructor is always the array with type(s) of the value being casted.\nAll other arguments will be the ones passed as extra arguments in the `CastWith` attribute.\n\n## Validation\n\nThis package doesn't offer any specific validation functionality, but it does give you a way to build your own validation attributes. For example, `NumberBetween` is a user-implemented validation attribute:\n\n```php\nclass MyDTO extends DataTransferObject\n{\n    #[NumberBetween(1, 100)]\n    public int $a;\n}\n```\n\nIt works like this under the hood:\n\n```php\n#[Attribute(Attribute::TARGET_PROPERTY | Attribute::IS_REPEATABLE)]\nclass NumberBetween implements Validator\n{\n    public function __construct(\n        private int $min,\n        private int $max\n    ) {\n    }\n\n    public function validate(mixed $value): ValidationResult\n    {\n        if ($value < $this->min) {\n            return ValidationResult::invalid(\"Value should be greater than or equal to {$this->min}\");\n        }\n\n        if ($value > $this->max) {\n            return ValidationResult::invalid(\"Value should be less than or equal to {$this->max}\");\n        }\n\n        return ValidationResult::valid();\n    }\n}\n```\n\n## Mapping\n\nYou can map a DTO property from a source property with a different name using the `#[MapFrom]` attribute.\n\nIt works with a \"dot\" notation property name or an index.\n\n```php\nclass PostDTO extends DataTransferObject\n{\n    #[MapFrom('postTitle')]\n    public string $title;\n    \n    #[MapFrom('user.name')]\n    public string $author;\n}\n\n$dto = new PostDTO([\n    'postTitle' => 'Hello world',\n    'user' => [\n        'name' => 'John Doe'\n    ]\n]);\n```\n\n```php\nclass UserDTO extends DataTransferObject\n{\n\n    #[MapFrom(0)]\n    public string $firstName;\n    \n    #[MapFrom(1)]\n    public string $lastName;\n}\n\n$dto = new UserDTO(['John', 'Doe']);\n```\n\nSometimes you also want to map them during the transformation to Array. \nA typical usecase would be transformation from camel case to snake case. \nFor that you can use the `#[MapTo]` attribute.\n\n```php\nclass UserDTO extends DataTransferObject\n{\n\n    #[MapFrom(0)]\n    #[MapTo('first_name')]\n    public string $firstName;\n    \n    #[MapFrom(1)]\n    #[MapTo('last_name')]\n    public string $lastName;\n}\n\n$dto = new UserDTO(['John', 'Doe']);\n$dto->toArray() // ['first_name' => 'John', 'last_name'=> 'Doe'];\n$dto->only('first_name')->toArray() // ['first_name' => 'John'];\n```\n\n## Strict DTOs\n\nThe previous version of this package added the `FlexibleDataTransferObject` class which allowed you to ignore properties that didn't exist on the DTO. This behaviour has been changed, all DTOs are flexible now by default, but you can make them strict by using the `#[Strict]` attribute:\n\n\n```php\nclass NonStrictDto extends DataTransferObject\n{\n    public string $name;\n}\n\n// This works\nnew NonStrictDto(\n    name: 'name',\n    unknown: 'unknown'\n);\n```\n\n```php\nuse \\Spatie\\DataTransferObject\\Attributes\\Strict;\n\n#[Strict]\nclass StrictDto extends DataTransferObject\n{\n    public string $name;\n}\n\n// This throws a \\Spatie\\DataTransferObject\\Exceptions\\UnknownProperties exception\nnew StrictDto(\n    name: 'name',\n    unknown: 'unknown'\n);\n```\n\n## Helper functions\n\nThere are also some helper functions provided for working with multiple properties at once.\n\n```php\n$postData->all();\n\n$postData\n    ->only('title', 'body')\n    ->toArray();\n    \n$postData\n    ->except('author')\n    ->toArray();\n```\n\nNote that `all()` will simply return all properties, while `toArray()` will cast nested DTOs to arrays as well. \n\nYou can chain the `except()` and `only()` methods:\n\n```php\n$postData\n    ->except('title')\n    ->except('body')\n    ->toArray();\n```\n\nIt's important to note that `except()` and `only()` are immutable, they won't change the original data transfer object.\n\n## Immutable DTOs and cloning\n\nThis package doesn't force immutable objects since PHP doesn't support them, but you're always encouraged to keep your DTOs immutable. To help you, there's a `clone` method on every DTO which accepts data to override:\n\n```php\n$clone = $original->clone(other: ['name' => 'a']);\n```\n\nNote that no data in `$original` is changed.\n\n## Collections of DTOs\n\nThis version removes the `DataTransferObjectCollection` class. Instead you can use simple casters and your own collection classes.\n\nHere's an example of casting a collection of DTOs to an array of DTOs:\n\n```php\nclass Bar extends DataTransferObject\n{\n    /** @var \\Spatie\\DataTransferObject\\Tests\\Foo[] */\n    #[CastWith(FooArrayCaster::class)]\n    public array $collectionOfFoo;\n}\n\nclass Foo extends DataTransferObject\n{\n    public string $name;\n}\n```\n\n```php\nclass FooArrayCaster implements Caster\n{\n    public function cast(mixed $value): array\n    {\n        if (! is_array($value)) {\n            throw new Exception(\"Can only cast arrays to Foo\");\n        }\n\n        return array_map(\n            fn (array $data) => new Foo(...$data),\n            $value\n        );\n    }\n}\n```\n\nIf you don't want the redundant typehint, or want extended collection functionality; you could create your own collection classes using any collection implementation. In this example, we use Laravel's:\n\n```php\nclass Bar extends DataTransferObject\n{\n    #[CastWith(FooCollectionCaster::class)]\n    public CollectionOfFoo $collectionOfFoo;\n}\n\nclass Foo extends DataTransferObject\n{\n    public string $name;\n}\n```\n\n```php\nuse Illuminate\\Support\\Collection;\n\nclass CollectionOfFoo extends Collection\n{\n    // Add the correct return type here for static analyzers to know which type of array this is \n    public function offsetGet($key): Foo\n    {\n        return parent::offsetGet($key);\n    }\n}\n```\n\n```php\nclass FooCollectionCaster implements Caster\n{\n    public function cast(mixed $value): CollectionOfFoo\n    {\n        return new CollectionOfFoo(array_map(\n            fn (array $data) => new Foo(...$data),\n            $value\n        ));\n    }\n}\n```\n\n## Simple arrays of DTOs\n\nFor a simple array of DTOs, or an object that implements PHP's built-in `ArrayAccess`, consider using the `ArrayCaster` which requires an item type to be provided:\n\n```php\nclass Bar extends DataTransferObject\n{\n    /** @var \\Spatie\\DataTransferObject\\Tests\\Foo[] */\n    #[CastWith(ArrayCaster::class, itemType: Foo::class)]\n    public array $collectionOfFoo;\n}\n```\n\n## Testing\n\n``` bash\ncomposer test\n```\n\n### Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information on what has changed recently.\n\n## Contributing\n\nPlease see [CONTRIBUTING](https://github.com/spatie/.github/blob/main/CONTRIBUTING.md) for details.\n\n### Security\n\nIf you've found a bug regarding security please mail [security@spatie.be](mailto:security@spatie.be) instead of using the issue tracker.\n\n## Postcardware\n\nYou're free to use this package, but if it makes it to your production environment we highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using.\n\nOur address is: Spatie, Kruikstraat 22, 2018 Antwerp, Belgium.\n\nWe publish all received postcards [on our company website](https://spatie.be/en/opensource/postcards).\n\n## External tools\n\n- [json2dto](https://json2dto.atymic.dev): a GUI to convert JSON objects to DTO classes (with nesting support). Also provides a [CLI tool](https://github.com/atymic/json2dto#cli-tool) for local usage.\n- [Data Transfer Object Factory](https://github.com/anteris-dev/data-transfer-object-factory): Intelligently generates a DTO instance using the correct content for your properties based on its name and type.\n\n## Credits\n\n- [Brent Roose](https://github.com/brendt)\n- [All Contributors](../../contributors)\n\nOur `Arr` class contains functions copied from Laravels `Arr` helper.\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.0859375,
          "content": "{\n    \"name\": \"spatie/data-transfer-object\",\n    \"description\": \"Data transfer objects with batteries included\",\n    \"keywords\": [\n        \"spatie\",\n        \"data-transfer-object\"\n    ],\n    \"homepage\": \"https://github.com/spatie/data-transfer-object\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Brent Roose\",\n            \"email\": \"brent@spatie.be\",\n            \"homepage\": \"https://spatie.be\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.0\"\n    },\n    \"require-dev\": {\n        \"illuminate/collections\": \"^8.36\",\n        \"larapack/dd\": \"^1.1\",\n        \"phpunit/phpunit\": \"^9.5.5\",\n        \"jetbrains/phpstorm-attributes\": \"^1.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Spatie\\\\DataTransferObject\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Spatie\\\\DataTransferObject\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"scripts\": {\n        \"test\": \"vendor/bin/phpunit\",\n        \"test-coverage\": \"vendor/bin/phpunit --coverage-html coverage\"\n    },\n    \"config\": {\n        \"sort-packages\": true\n    }\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.9990234375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         bootstrap=\"vendor/autoload.php\"\n         backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         verbose=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\">\n  <coverage>\n    <include>\n      <directory suffix=\".php\">src/</directory>\n    </include>\n    <report>\n      <clover outputFile=\"build/logs/clover.xml\"/>\n      <html outputDirectory=\"build/coverage\"/>\n      <text outputFile=\"build/coverage.txt\"/>\n    </report>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"Spatie Test Suite\">\n      <directory>tests</directory>\n    </testsuite>\n  </testsuites>\n  <logging>\n    <junit outputFile=\"build/report.junit.xml\"/>\n  </logging>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}