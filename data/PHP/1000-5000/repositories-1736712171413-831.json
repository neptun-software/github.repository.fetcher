{
  "metadata": {
    "timestamp": 1736712171413,
    "page": 831,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cakephp/chronos",
      "stars": 1354,
      "defaultBranch": "3.x",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.208984375,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.yml]\nindent_size = 2\n\n[phars.xml]\nindent_size = 2\n\n[*.neon]\nindent_style = tab\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.6552734375,
          "content": "# Define the line ending behavior of the different file extensions\n# Set default behaviour, in case users don't have core.autocrlf set.\n* text=auto\n* text eol=lf\n\n# Explicitly declare text files we want to always be normalized and converted\n# to native line endings on checkout.\n*.php text\n*.txt text\n*.xml text\n\n# Remove files for archives generated using `git archive`\n.editorconfig export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\n.stickler.yml export-ignore\nphpbench.json export-ignore\nphpcs.xml export-ignore\nphpstan.neon export-ignore\nphpstan-baseline.neon export-ignore\nphpunit.xml.dist export-ignore\n/.github export-ignore\n/tests export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.095703125,
          "content": ".idea\n*.iml\n.hhconfig\n.phpunit.result.cache\nvendor\ncomposer.phar\ncomposer.lock\nphpunit.xml\n/tools\n"
        },
        {
          "name": ".phive",
          "type": "tree",
          "content": null
        },
        {
          "name": ".stickler.yml",
          "type": "blob",
          "size": 0.0390625,
          "content": "linters:\n  phpcs:\n    standard: CakePHP\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.1943359375,
          "content": "# Basic docker based environment\n# Necessary to trick dokku into building the documentation\n# using dockerfile instead of herokuish\nFROM php:8.1\n\nWORKDIR /code\n\nVOLUME [\"/code\"]\n\nCMD [ '/bin/bash' ]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.099609375,
          "content": "Copyright (C) Brian Nesbitt\nCopyright (C) Cake Software Foundation, Inc. (https://cakefoundation.org)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.650390625,
          "content": "# CakePHP Chronos\n\n![Build Status](https://github.com/cakephp/chronos/actions/workflows/ci.yml/badge.svg?branch=master)\n[![Latest Stable Version](https://img.shields.io/github/v/release/cakephp/chronos?sort=semver&style=flat-square)](https://packagist.org/packages/cakephp/chronos)\n[![Total Downloads](https://img.shields.io/packagist/dt/cakephp/chronos?style=flat-square)](https://packagist.org/packages/cakephp/chronos/stats)\n[![Code Coverage](https://img.shields.io/coveralls/cakephp/chronos/master.svg?style=flat-square)](https://coveralls.io/r/cakephp/chronos?branch=master)\n[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE)\n\nChronos focuses on providing immutable date/datetime objects.\nImmutable objects help ensure that datetime objects aren't accidentally\nmodified keeping data more predictable.\n\n# Installation\n\nInstalling with composer:\n\n```\n$ composer require cakephp/chronos\n```\n\nYou can then use Chronos:\n\n```php\n<?php\nrequire 'vendor/autoload.php';\n\nuse Cake\\Chronos\\Chronos;\n\nprintf(\"Now: %s\", Chronos::now());\n```\n\n# Differences with nesbot/carbon\n\nChronos was originally compatible with Carbon but has diverged and no longer\nextends the PHP DateTime and DateTimeImmutable classes.\n\n# Immutable Object Changes\n\nImmutable objects have a number of advantages:\n\n1. Using immutable objects is always free of side-effects.\n2. Dates and times don't accidentally change underneath other parts of your code.\n\nWith those benefits in mind, there are a few things you need to keep in mind\nwhen modifying immutable objects:\n\n```php\n// This will lose modifications\n$date = new Chronos('2015-10-21 16:29:00');\n$date->modify('+2 hours');\n\n// This will keep modifications\n$date = new Chronos('2015-10-21 16:29:00');\n$date = $date->modify('+2 hours');\n```\n\n# Calendar Dates\n\nPHP only offers datetime objects as part of the native extensions. Chronos adds\na number of conveniences to the traditional DateTime object and introduces\na `ChronosDate` object. `ChronosDate` instances their time frozen to `00:00:00` and the timezone\nset to the server default timezone. This makes them ideal when working with\ncalendar dates as the time components will always match.\n\n```php\nuse Cake\\Chronos\\ChronosDate;\n\n$today = new ChronosDate();\necho $today;\n// Outputs '2015-10-21'\n\necho $today->modify('+3 hours');\n// Outputs '2015-10-21'\n```\n\nLike instances of `Chronos`, `ChronosDate` objects are also *immutable*.\n\n# Documentation\n\nA more descriptive documentation can be found at [book.cakephp.org/chronos/3/en/](https://book.cakephp.org/chronos/3/en/).\n\n# API Documentation\n\nAPI documentation can be found on [api.cakephp.org/chronos](https://api.cakephp.org/chronos).\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.8125,
          "content": "{\n    \"name\": \"cakephp/chronos\",\n    \"description\": \"A simple API extension for DateTime.\",\n    \"license\": \"MIT\",\n    \"type\": \"library\",\n    \"keywords\": [\n        \"date\",\n        \"time\",\n        \"DateTime\"\n    ],\n    \"authors\": [\n        {\n            \"name\": \"Brian Nesbitt\",\n            \"email\": \"brian@nesbot.com\",\n            \"homepage\": \"http://nesbot.com\"\n        },\n        {\n            \"name\": \"The CakePHP Team\",\n            \"homepage\": \"https://cakephp.org\"\n        }\n    ],\n    \"homepage\": \"https://cakephp.org\",\n    \"support\": {\n        \"issues\": \"https://github.com/cakephp/chronos/issues\",\n        \"source\": \"https://github.com/cakephp/chronos\"\n    },\n    \"require\": {\n        \"php\": \">=8.1\",\n        \"psr/clock\": \"^1.0\"\n    },\n    \"require-dev\": {\n        \"cakephp/cakephp-codesniffer\": \"^5.0\",\n        \"phpunit/phpunit\": \"^10.1.0 || ^11.1.3\"\n    },\n    \"provide\": {\n        \"psr/clock-implementation\": \"1.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Cake\\\\Chronos\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Cake\\\\Chronos\\\\Test\\\\\": \"tests/\"\n        }\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"dealerdirect/phpcodesniffer-composer-installer\": true\n        }\n    },\n    \"scripts\": {\n        \"check\": [\n            \"@test\",\n            \"@cs-check\",\n            \"@stan\"\n        ],\n        \"cs-check\": \"phpcs --colors --parallel=16 -p\",\n        \"cs-fix\": \"phpcbf --colors --parallel=16 -p\",\n        \"phpstan\": \"tools/phpstan analyse\",\n        \"psalm\": \"tools/psalm --show-info=false\",\n        \"psalm-baseline\": \"tools/psalm  --set-baseline=psalm-baseline.xml\",\n        \"stan\": [\n            \"@phpstan\",\n            \"@psalm\"\n        ],\n        \"stan-baseline\": \"tools/phpstan --generate-baseline\",\n        \"stan-setup\": \"phive install\",\n        \"test\": \"phpunit\"\n    }\n}\n"
        },
        {
          "name": "docs.Dockerfile",
          "type": "blob",
          "size": 0.794921875,
          "content": "# Generate the HTML output.\nFROM ghcr.io/cakephp/docs-builder as builder\n\nRUN pip install git+https://github.com/sphinx-contrib/video.git@master\n\nCOPY docs /data/docs\nENV LANGS=\"en fr ja pt\"\n\n# build docs with sphinx\nRUN cd /data/docs-builder && \\\n  make website LANGS=\"$LANGS\" SOURCE=/data/docs DEST=/data/website\n\n# Build a small nginx container with just the static site in it.\nFROM ghcr.io/cakephp/docs-builder:runtime as runtime\n\nENV LANGS=\"en fr ja pt\"\nENV SEARCH_SOURCE=\"/usr/share/nginx/html\"\nENV SEARCH_URL_PREFIX=\"/chronos/3\"\n\nCOPY --from=builder /data/docs /data/docs\nCOPY --from=builder /data/website /data/website\nCOPY --from=builder /data/docs-builder/nginx.conf /etc/nginx/conf.d/default.conf\n\n# Move docs into place.\nRUN cp -R /data/website/html/* /usr/share/nginx/html \\\n  && rm -rf /data/website\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpbench.json",
          "type": "blob",
          "size": 0.2451171875,
          "content": "{\n    \"bootstrap\": \"vendor/autoload.php\",\n    \"path\": \"tests/Benchmark\",\n    \"reports\": {\n        \"chronos\": {\n            \"generator\": \"table\",\n            \"cols\": [\"benchmark\", \"subject\", \"set\", \"best\", \"mean\", \"worst\", \"mem_peak\"]\n        }\n    }\n}"
        },
        {
          "name": "phpcs.xml",
          "type": "blob",
          "size": 0.4208984375,
          "content": "<?xml version=\"1.0\"?>\n<ruleset name=\"PHP_CodeSniffer\">\n    <config name=\"installed_paths\" value=\"../../cakephp/cakephp-codesniffer\" />\n\n    <rule ref=\"CakePHP\" />\n\n    <!-- Necessary for class aliases used for backwards compat -->\n    <rule ref=\"PSR1.Files.SideEffects.FoundWithSymbols\">\n        <severity>0</severity>\n    </rule>\n\n    <file>src/</file>\n    <file>tests/</file>\n\n    <arg name=\"extensions\" value=\"php\"/>\n</ruleset>\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.4248046875,
          "content": "parameters:\n\tlevel: 8\n\ttreatPhpDocTypesAsCertain: false\n\tbootstrapFiles:\n\t\t- tests/bootstrap.php\n\tpaths:\n\t\t- src/\n\tignoreErrors:\n\t\t- identifier: missingType.iterableValue\n\t\t- identifier: property.readOnlyByPhpDocDefaultValue\n\t\t- identifier: property.readOnlyByPhpDocAssignNotInConstructor\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined static method DateTimeImmutable\\\\:\\\\:createFromTimestamp\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Chronos.php\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.5107421875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.1/phpunit.xsd\"\n         bootstrap=\"tests/bootstrap.php\"\n         colors=\"true\">\n    <testsuites>\n        <testsuite name=\"Chronos Test Suite\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n    <source>\n        <include>\n            <directory suffix=\".php\">src/</directory>\n        </include>\n    </source>\n</phpunit>\n"
        },
        {
          "name": "psalm-baseline.xml",
          "type": "blob",
          "size": 4.3896484375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<files psalm-version=\"5.13.1@086b94371304750d1c673315321a55d15fc59015\">\n  <file src=\"src/Chronos.php\">\n    <ImpureFunctionCall>\n      <code>array_filter</code>\n      <code>date_default_timezone_get</code>\n      <code>date_default_timezone_get</code>\n      <code>iterator_to_array</code>\n    </ImpureFunctionCall>\n    <ImpureMethodCall>\n      <code>diffForHumans</code>\n      <code>diffFormatter</code>\n      <code>format</code>\n      <code>format</code>\n      <code>format</code>\n      <code>format</code>\n      <code>format</code>\n      <code>format</code>\n      <code>getTimestamp</code>\n      <code>getTimezone</code>\n      <code>getWeekendDays</code>\n      <code>hasTestNow</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>safeCreateDateTimeZone</code>\n      <code>toDateString</code>\n      <code>toDateString</code>\n      <code>toDateString</code>\n      <code>toDateString</code>\n      <code>toDateString</code>\n      <code>toDateString</code>\n      <code>toDateString</code>\n      <code>tomorrow</code>\n      <code>yesterday</code>\n    </ImpureMethodCall>\n    <ImpureStaticProperty>\n      <code>static::$days</code>\n      <code>static::$days</code>\n      <code>static::$days</code>\n      <code>static::$days</code>\n      <code>static::$days</code>\n      <code>static::$days</code>\n      <code>static::$days</code>\n      <code>static::$days</code>\n      <code>static::$days</code>\n      <code>static::$weekEndsAt</code>\n      <code>static::$weekEndsAt</code>\n      <code>static::$weekStartsAt</code>\n      <code>static::$weekStartsAt</code>\n    </ImpureStaticProperty>\n    <ImpureStaticVariable>\n      <code><![CDATA[static $formats = [\n            'year' => 'Y',\n            'yearIso' => 'o',\n            'month' => 'n',\n            'day' => 'j',\n            'hour' => 'G',\n            'minute' => 'i',\n            'second' => 's',\n            'micro' => 'u',\n            'microsecond' => 'u',\n            'dayOfWeek' => 'N',\n            'dayOfYear' => 'z',\n            'weekOfYear' => 'W',\n            'daysInMonth' => 't',\n            'timestamp' => 'U',\n        ];]]></code>\n    </ImpureStaticVariable>\n    <InaccessibleProperty>\n      <code><![CDATA[$instance->f]]></code>\n    </InaccessibleProperty>\n    <MissingImmutableAnnotation>\n      <code>public static function createFromFormat(</code>\n    </MissingImmutableAnnotation>\n  </file>\n  <file src=\"src/ChronosDate.php\">\n    <ImpureFunctionCall>\n      <code>array_filter</code>\n      <code>date_default_timezone_get</code>\n      <code>iterator_to_array</code>\n    </ImpureFunctionCall>\n    <ImpureMethodCall>\n      <code>diffForHumans</code>\n      <code>diffFormatter</code>\n      <code>format</code>\n      <code>getTestNow</code>\n      <code>getWeekEndsAt</code>\n      <code>getWeekEndsAt</code>\n      <code>getWeekStartsAt</code>\n      <code>getWeekStartsAt</code>\n      <code>getWeekendDays</code>\n      <code>hasTestNow</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>now</code>\n      <code>tomorrow</code>\n      <code>yesterday</code>\n    </ImpureMethodCall>\n    <ImpureStaticProperty>\n      <code>static::$days</code>\n      <code>static::$days</code>\n      <code>static::$days</code>\n      <code>static::$days</code>\n      <code>static::$days</code>\n      <code>static::$days</code>\n      <code>static::$days</code>\n      <code>static::$days</code>\n      <code>static::$days</code>\n    </ImpureStaticProperty>\n    <ImpureStaticVariable>\n      <code><![CDATA[static $formats = [\n            'year' => 'Y',\n            'yearIso' => 'o',\n            'month' => 'n',\n            'day' => 'j',\n            'dayOfWeek' => 'N',\n            'dayOfYear' => 'z',\n            'weekOfYear' => 'W',\n            'daysInMonth' => 't',\n        ];]]></code>\n    </ImpureStaticVariable>\n  </file>\n</files>\n"
        },
        {
          "name": "psalm.xml",
          "type": "blob",
          "size": 0.56640625,
          "content": "<?xml version=\"1.0\"?>\n<psalm\n    errorLevel=\"8\"\n    resolveFromConfigFile=\"true\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"https://getpsalm.org/schema/config\"\n    xsi:schemaLocation=\"https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd\"\n    errorBaseline=\"psalm-baseline.xml\"\n    findUnusedPsalmSuppress=\"true\"\n    findUnusedBaselineEntry=\"true\"\n    findUnusedCode=\"false\"\n>\n    <projectFiles>\n        <directory name=\"src\" />\n        <ignoreFiles>\n            <directory name=\"vendor\" />\n        </ignoreFiles>\n    </projectFiles>\n</psalm>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}