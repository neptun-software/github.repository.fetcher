{
  "metadata": {
    "timestamp": 1736711763044,
    "page": 10,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "PHP-FFMpeg/PHP-FFMpeg",
      "stars": 4879,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.16796875,
          "content": ".gitattributes export-ignore\n.gitignore export-ignore\n.github export-ignore\ndocs export-ignore\ntests export-ignore\nphpunit.xml.dist export-ignore\n.travis.yml export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.212890625,
          "content": "#/nbproject/\n/vendor/\n/docs/build\ncomposer.phar\ncomposer.lock\nphpunit.xml\n.phpunit.result.cache\n.php-cs-fixer.cache\n/tests/Functional/output/output-*\n/docs/doctum.phar\n/docs/source/API/API/cache/twig/*\n.idea/\n/phpunit\n"
        },
        {
          "name": "CHANGELOG-0.x.md",
          "type": "blob",
          "size": 5.0224609375,
          "content": "CHANGELOG\n=========\n\nAll notable changes to this project will be documented in this file.\nThis project adheres to [Semantic Versioning](http://semver.org/).\n\n[Unreleased]\n------------\n\n### Added\n\n- Add pull request and issue templates.\n- Usage of new codec \"aac\" of ffmpeg 3\n\n### Changed\n\n- Updated changelog to follow [keepachangelog.com](http://keepachangelog.com/)\n  style you see now here.\n\n[0.7.0] - 2016-12-15\n--------------------\n\n- Add support for FFMpeg 3 aac codec (@Nek-)\n- Add a waveform filter to extract audio waveform images (@Romain)\n\n[0.6.1] - 2016-03-08\n--------------------\n\n- Support PHP 7 and test against\n- Unused code cleanup (@haphan)\n- Composer and tests cleanup (PSR-4 autoloading)\n- Allow usage of evenement v2.0\n\n[0.6.0] - 2016-01-30\n--------------------\n\n- AbstractData::get no longer throws exceptions (@sujayjaju).\n- Add crop filter (@cangelis).\n- Fix watermark (@sujayjaju).\n\n[0.5.1] - 2016-08-26\n--------------------\n\n- Fix video aspect ratio calculation (@nlegoff).\n\n[0.5.0] - 2014-08-12\n--------------------\n\n- Add support for Wav and AAC audio formats (@MrHash).\n- Add watermark filter (@sylvainv).\n- Add configuration for audio channels (@SimonSimCity).\n\n[0.4.4] - 2016-12-17\n--------------------\n\n- Fix width / height dimensions extraction.\n\n[0.4.3] - 2013-02-12\n--------------------\n\n- Fix using rotate and resize filters at the same time (#78)\n\n[0.4.2] - 2013-11-29\n--------------------\n\n- Add Rotate filter.\n- Remove time_start metadata when using synchronize filter\n- Remove restriction on filesystem resources.\n\n[0.4.1] - 2013-11-26\n--------------------\n\n- Add Clip filter (@guimeira)\n\n[0.4.0] - 2013-10-21\n--------------------\n\n- Add support for video to audio transcoding\n- BC Break : Add FormatInterface::getPasses and FormatInterface::getExtraParams\n\n[0.3.5] - 2013-10-21\n--------------------\n\n- Add vorbis audio format (@jacobbudin).\n- Fix #66 : Allow single pass encodings.\n\n[0.3.4] - 2013-09-05\n--------------------\n\n- Fix Invalid ratio computing.\n\n[0.3.3] - 2013-09-05\n--------------------\n\n- Add convenient Stream::getDimensions method to extract video dimension.\n- Add DisplayRatioFixer Frame filter.\n\n[0.3.2] - 2013-08-08\n--------------------\n\n- Fix A/V synchronization over flash and HTML5 players.\n\n[0.3.1] - 2013-08-06\n--------------------\n\n- Allow use of FFProbe on remote URIs.\n- Fix #47 : MediaTypeInterface::save adds filters depending on the codec.\n- Save frame to target file without prompt.\n\n[0.3.0] - 2013-07-04\n--------------------\n\n- Complete rewrite of the library, lots of BC breaks, check the doc.\n\n[0.2.4] - 2013-05-10\n--------------------\n\n- Add Video\\ResizableInterface::getModulus method for better output scaling (@retrojunk)\n- Fix timeout setting on audio/video encoding (@xammep-ua)\n\n[0.2.3] - 2013-04-21\n--------------------\n\n- Add timeout getter and setter on FFMpeg and FFProbe\n- Add timeout setting via second argument on FFMpeg::load and FFProbe::load\n\n[0.2.2] - 2013-02-11\n--------------------\n\n- Add compatibility with FFMpeg 1.1\n- Upgrade deprecated options (`-ab`, `-qscale` and `-b`)\n- Use of a custom stat file for each multi-pass encoding (fix #20)\n- Use larger version range for dependencies\n\n[0.2.1] - 2013-02-04\n--------------------\n\n- Parse the output of FFProbe using correct EOL sequences (@ak76)\n- Add process timeout customization (@pulse00)\n- Fix `accurate` option (`FFMpeg::extractImage`)\n\n[0.2.0] - 2012-12-13\n--------------------\n\n- Add HelperInterface and support for realtime progress ( @pulse00 ).\n- Add `accurate` option to `FFMpeg::extractImage` method.\n\n0.1.0 - 2012-10-30\n--------------------\n\n- First stable version.\n\n[Unreleased]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.6.1...HEAD\n[0.6.1]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.6.0...0.6.1\n[0.6.0]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.5.1...0.6.0\n[0.5.1]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.5.0...0.5.1\n[0.5.0]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.4.4...0.5.0\n[0.4.4]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.4.3...0.4.4\n[0.4.3]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.4.2...0.4.3\n[0.4.2]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.4.1...0.4.2\n[0.4.1]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.4.0...0.4.1\n[0.4.0]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.3.5...0.4.0\n[0.3.5]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.3.4...0.3.5\n[0.3.4]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.3.3...0.3.4\n[0.3.3]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.3.2...0.3.3\n[0.3.2]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.3.1...0.3.2\n[0.3.1]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.3.0...0.3.1\n[0.3.0]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.2.4...0.3.0\n[0.2.4]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.2.3...0.2.4\n[0.2.3]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.2.2...0.2.3\n[0.2.2]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.2.1...0.2.2\n[0.2.1]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.2.0...0.2.1\n[0.2.0]: https://github.com/PHP-FFMpeg/PHP-FFMpeg/compare/0.1.0...0.2.0\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.7197265625,
          "content": "# Changelog\n\nAll Notable changes to the library will be documented in this file\n\n## 1.0.1 - 2022-02-22\n\n- Added configuration key to customize the temporary directory used for passes.\n- Fix for the path of the default `ffmpeg-passes*` temporary directory.\n\n## 1.0.0 - 2022-02-09\n\nUpgraded dependencies, integrated the Alchemy Binary library, and dropped support for anything below PHP 8.0\n\n- Support for Symfony 5.4 and 6.0\n- Support for `psr/log` v3\n- GitHub actions against FFmpeg 4.4 and 5.0\n- Integrated the Alchemy Binary library\n- Replaced `neutron/temporary-filesystem` with `spatie/temporary-directory`\n- PHPUnit 9.5\n- Removed Silex Service Provider\n- Removed the auto-generated docs\n- Removed support for anything below PHP 8.0\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2012-2021 Alchemy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "ORIGINAL_ALCHEMY_CHANGELOG.md",
          "type": "blob",
          "size": 1.5498046875,
          "content": "CHANGELOG\n---------\n* 1.6.0 (2015-03-02)\n  * BC Break: bump minimum PHP versions \n  * Allow use of evenement v2.0 (thanks @patkar for the P/R)\n\n* 1.5.0 (2013-06-21)\n\n  * BC Break : ConfigurationInterface::get does not throw exceptions anymore\n    in case the key does not exist. Second argument is a default value to return\n    in case the key does not exist.\n\n* 1.4.1 (2013-05-23)\n\n  * Add third parameter to BinaryInterface::command method to pass a listener or\n    an array of listener that will be registered just the time of the command.\n\n* 1.4.0 (2013-05-11)\n\n  * Extract process run management to ProcessRunner.\n  * Add support for process listeners.\n  * Provides bundled DebugListener.\n  * Add BinaryInterface::command method.\n  * BC break : ProcessRunnerInterface::run now takes an SplObjectStorage containing\n    listeners as second argument.\n  * BC break : BinaryInterface no longer implements LoggerAwareInterface\n    as it is now supported by ProcessRunner.\n\n* 1.3.4 (2013-04-26)\n\n  * Add BinaryDriver::run method.\n\n* 1.3.3 (2013-04-26)\n\n  * Add BinaryDriver::createProcessMock method.\n\n* 1.3.2 (2013-04-26)\n\n  * Add BinaryDriverTestCase for testing BinaryDriver implementations.\n\n* 1.3.1 (2013-04-24)\n\n  * Add timeouts handling\n\n* 1.3.0 (2013-04-24)\n\n  * Add BinaryInterface and AbstractBinary\n\n* 1.2.1 (2013-04-24)\n\n  * Add ConfigurationAwareInterface\n  * Add ProcessBuilderAwareInterface\n\n* 1.2.0 (2013-04-24)\n\n  * Add BinaryDriver\\Configuration\n\n* 1.1.0 (2013-04-24)\n\n  * Add support for timeouts via `setTimeout` method\n\n* 1.0.0 (2013-04-23)\n\n  * First stable version.\n"
        },
        {
          "name": "ORIGINAL_ALCHEMY_LICENSE",
          "type": "blob",
          "size": 1.0703125,
          "content": "BinaryDriver is released with MIT License :\n\nCopyright (c) 2013 Alchemy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n"
        },
        {
          "name": "ORIGINAL_ALCHEMY_README.md",
          "type": "blob",
          "size": 4.6337890625,
          "content": "# Binary Driver\n\nBinary-Driver is a set of PHP tools to build binary drivers.\n\n[![Build Status](https://travis-ci.org/alchemy-fr/BinaryDriver.png?branch=master)](https://travis-ci.org/alchemy-fr/BinaryDriver)\n\n## Why ?\n\nYou may wonder *Why building a library while I can use `exec` or\n[symfony/process](https://github.com/symfony/Process) ?*.\n\nHere is a simple answer :\n\n - If you use `exec`, `passthru`, `system`, `proc_open` or any low level process\n   handling in PHP, you should have a look to [symfony/process](https://github.com/symfony/Process)\n   component that will provide an OO portable, testable and secure interface to\n   deal with this. It seems easy at first approach, but if you look at this\n   component [unit tests](https://github.com/symfony/Process/tree/master/Tests),\n   you will see that handling process in a simple interface can easily become a\n   nightmare.\n\n - If you already use symfony/process, and want to build binary drivers, you\n   will always have the same common set of methods and objects to configure, log,\n   debug, and generate processes.\n   This library is a base to implement any binary driver with this common set of\n   needs.\n\n## AbstractBinary\n\n`AbstractBinary` provides an abstract class to build a binary driver. It implements\n`BinaryInterface`.\n\nImplementation example :\n\n```php\nuse Alchemy\\BinaryDriver\\AbstractBinary;\n\nclass LsDriver extends AbstractBinary\n{\n    public function getName()\n    {\n        return 'ls driver';\n    }\n}\n\n$parser = new LsParser();\n\n$driver = Driver::load('ls');\n// will return the output of `ls -a -l`\n$parser->parse($driver->command(array('-a', '-l')));\n```\n\n### Binary detection troubleshooting\n\nIf you are using Nginx with PHP-fpm, executable detection may not work because of an empty `$_ENV['path']`. \nTo avoid having an empty `PATH` environment variable, add the following line to your `fastcgi_params` \nconfig file (replace `/your/current/path/` with the output of `printenv PATH`) :\n\n```\nfastcgi_param    PATH    /your/current/path\n```\n\n## Logging\n\nYou can log events with a `Psr\\Log\\LoggerInterface` by passing it in the load\nmethod as second argument :\n\n```php\n$logger = new Monolog\\Logger('driver');\n$driver = Driver::load('ls', $logger);\n```\n\n## Listeners\n\nYou can add custom listeners on processes.\nListeners are built on top of [Evenement](https://github.com/igorw/evenement)\nand must implement `Alchemy\\BinaryDriver\\ListenerInterface`.\n\n```php\nuse Symfony\\Component\\Process\\Process;\n\nclass DebugListener extends EventEmitter implements ListenerInterface\n{\n    public function handle($type, $data)\n    {\n        foreach (explode(PHP_EOL, $data) as $line) {\n            $this->emit($type === Process::ERR ? 'error' : 'out', array($line));\n        }\n    }\n\n    public function forwardedEvents()\n    {\n        // forward 'error' events to the BinaryInterface\n        return array('error');\n    }\n}\n\n$listener = new DebugListener();\n\n$driver = CustomImplementation::load('php');\n\n// adds listener\n$driver->listen($listener);\n\n$driver->on('error', function ($line) {\n    echo '[ERROR] ' . $line . PHP_EOL;\n});\n\n// removes listener\n$driver->unlisten($listener);\n```\n\n### Bundled listeners\n\nThe debug listener is a simple listener to catch `stderr` and `stdout` outputs ;\nread the implementation for customization.\n\n```php\nuse Alchemy\\BinaryDriver\\Listeners\\DebugListener;\n\n$driver = CustomImplementation::load('php');\n$driver->listen(new DebugListener());\n\n$driver->on('debug', function ($line) {\n    echo $line;\n});\n```\n\n## ProcessBuilderFactory\n\nProcessBuilderFactory ease spawning processes by generating Symfony [Process]\n(http://symfony.com/doc/master/components/process.html) objects.\n\n```php\nuse Alchemy\\BinaryDriver\\ProcessBuilderFactory;\n\n$factory = new ProcessBuilderFactory('/usr/bin/php');\n\n// return a Symfony\\Component\\Process\\Process\n$process = $factory->create('-v');\n\n// echoes '/usr/bin/php' '-v'\necho $process->getCommandLine();\n\n$process = $factory->create(array('-r', 'echo \"Hello !\";'));\n\n// echoes '/usr/bin/php' '-r' 'echo \"Hello !\";'\necho $process->getCommandLine();\n```\n\n## Configuration\n\nA simple configuration object, providing an `ArrayAccess` and `IteratorAggregate`\ninterface.\n\n```php\nuse Alchemy\\BinaryDriver\\Configuration;\n\n$conf = new Configuration(array('timeout' => 0));\n\necho $conf->get('timeout');\n\nif ($conf->has('param')) {\n    $conf->remove('param');\n}\n\n$conf->set('timeout', 20);\n\n$conf->all();\n```\n\nSame example using the `ArrayAccess` interface :\n\n```php\nuse Alchemy\\BinaryDriver\\Configuration;\n\n$conf = new Configuration(array('timeout' => 0));\n\necho $conf['timeout'];\n\nif (isset($conf['param'])) {\n    unset($conf['param']);\n}\n\n$conf['timeout'] = 20;\n```\n\n## License\n\nThis project is released under the MIT license.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.61328125,
          "content": "# PHP-FFMPEG\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/PHP-FFMpeg/PHP-FFMpeg.svg?style=flat-square)](https://packagist.org/packages/PHP-FFMpeg/PHP-FFMpeg)\n[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE.md)\n![run-tests](https://github.com/PHP-FFMpeg/PHP-FFMpeg/workflows/run-tests/badge.svg)\n[![Total Downloads](https://img.shields.io/packagist/dt/PHP-FFMpeg/PHP-FFMpeg.svg?style=flat-square)](https://packagist.org/packages/PHP-FFMpeg/PHP-FFMpeg)\n\nAn Object-Oriented library to convert video/audio files with FFmpeg / AVConv.\n\n## Your attention please\n\n### How this library works:\n\nThis library requires a working [FFMpeg install](https://ffmpeg.org/download.html). You will need both FFMpeg and FFProbe binaries to use it.\nBe sure that these binaries can be located with system PATH to get the benefit of the binary detection,\notherwise you should have to explicitly give the binaries path on load.\n\n### Known issues:\n\n- Using rotate and resize will produce a corrupted output when using\n[libav](http://libav.org/) 0.8. The bug is fixed in version 9. This bug does not\nappear in latest ffmpeg version.\n\n## Installation\n\nThis library requires PHP 8.0 or higher. For older versions of PHP, check out the [0.x-branch](https://github.com/PHP-FFMpeg/PHP-FFMpeg/tree/0.x).\n\nThe recommended way to install PHP-FFMpeg is through [Composer](https://getcomposer.org).\n\n```bash\n$ composer require php-ffmpeg/php-ffmpeg\n```\n\n## Basic Usage\n\n```php\n\nrequire 'vendor/autoload.php';\n\n$ffmpeg = FFMpeg\\FFMpeg::create();\n$video = $ffmpeg->open('video.mpg');\n$video\n    ->filters()\n    ->resize(new FFMpeg\\Coordinate\\Dimension(320, 240))\n    ->synchronize();\n$video\n    ->frame(FFMpeg\\Coordinate\\TimeCode::fromSeconds(10))\n    ->save('frame.jpg');\n$video\n    ->save(new FFMpeg\\Format\\Video\\X264(), 'export-x264.mp4')\n    ->save(new FFMpeg\\Format\\Video\\WMV(), 'export-wmv.wmv')\n    ->save(new FFMpeg\\Format\\Video\\WebM(), 'export-webm.webm');\n```\n\n## Documentation\n\nThis documentation is an introduction to discover the API. It's recommended\nto browse the source code as it is self-documented.\n\n### FFMpeg\n\n`FFMpeg\\FFMpeg` is the main object to use to manipulate medias. To build it,\nuse the static `FFMpeg\\FFMpeg::create`:\n\n```php\n$ffmpeg = FFMpeg\\FFMpeg::create();\n```\n\nFFMpeg will autodetect ffmpeg and ffprobe binaries. If you want to give binary\npaths explicitly, you can pass an array as configuration. A `Psr\\Logger\\LoggerInterface`\ncan also be passed to log binary executions.\n\n```php\n$ffmpeg = FFMpeg\\FFMpeg::create(array(\n    'ffmpeg.binaries'  => '/opt/local/ffmpeg/bin/ffmpeg',\n    'ffprobe.binaries' => '/opt/local/ffmpeg/bin/ffprobe',\n    'timeout'          => 3600, // The timeout for the underlying process\n    'ffmpeg.threads'   => 12,   // The number of threads that FFMpeg should use\n), $logger);\n```\n\nYou may pass a `temporary_directory` key to specify a path for temporary files.\n\n```php\n$ffmpeg = FFMpeg\\FFMpeg::create(array(\n    'temporary_directory' => '/var/ffmpeg-tmp'\n), $logger);\n```\n\n### Manipulate media\n\n`FFMpeg\\FFMpeg` creates media based on URIs. URIs could be either a pointer to a\nlocal filesystem resource, an HTTP resource or any resource supported by FFmpeg.\n\n**Note**: To list all supported resource type of your FFmpeg build, use the\n`-protocols` command:\n\n```\nffmpeg -protocols\n```\n\nTo open a resource, use the `FFMpeg\\FFMpeg::open` method.\n\n```php\n$ffmpeg->open('video.mpeg');\n```\n\nTwo types of media can be resolved: `FFMpeg\\Media\\Audio` and `FFMpeg\\Media\\Video`.\nA third type, `FFMpeg\\Media\\Frame`, is available through videos.\n\n### Video\n\n`FFMpeg\\Media\\Video` can be transcoded, ie: change codec, isolate audio or\nvideo. Frames can be extracted.\n\n##### Transcoding\n\nYou can transcode videos using the `FFMpeg\\Media\\Video:save` method. You will\npass a `FFMpeg\\Format\\FormatInterface` for that.\n\nPlease note that audio and video bitrate are set on the format. You can disable the `-b:v` option by setting the kilo bitrate to 0.\n\n```php\n$format = new FFMpeg\\Format\\Video\\X264();\n$format->on('progress', function ($video, $format, $percentage) {\n    echo \"$percentage % transcoded\";\n});\n\n$format\n    ->setKiloBitrate(1000)\n    ->setAudioChannels(2)\n    ->setAudioKiloBitrate(256);\n\n$video->save($format, 'video.avi');\n```\n\nTranscoding progress can be monitored in realtime, see Format documentation\nbelow for more information.\n\n##### Extracting image\n\nYou can extract a frame at any timecode using the `FFMpeg\\Media\\Video::frame`\nmethod.\n\nThis code returns a `FFMpeg\\Media\\Frame` instance corresponding to the second 42.\nYou can pass any `FFMpeg\\Coordinate\\TimeCode` as argument, see dedicated\ndocumentation below for more information.\n\n```php\n$frame = $video->frame(FFMpeg\\Coordinate\\TimeCode::fromSeconds(42));\n$frame->save('image.jpg');\n```\n\nIf you want to extract multiple images from the video, you can use the following filter:\n\n```php\n$video\n    ->filters()\n    ->extractMultipleFrames(FFMpeg\\Filters\\Video\\ExtractMultipleFramesFilter::FRAMERATE_EVERY_10SEC, '/path/to/destination/folder/')\n    ->synchronize();\n\n$video\n    ->save(new FFMpeg\\Format\\Video\\X264(), '/path/to/new/file');\n```\nBy default, this will save the frames as `jpg` images.\n\nYou are able to override this using `setFrameFileType` to save the frames in another format:\n```php\n$frameFileType = 'jpg'; // either 'jpg', 'jpeg' or 'png'\n$filter = new ExtractMultipleFramesFilter($frameRate, $destinationFolder);\n$filter->setFrameFileType($frameFileType);\n\n$video->addFilter($filter);\n```\n\n##### Clip\n\nCuts the video at a desired point. Use input seeking method. It is faster option than use filter clip.\n\n```php\n$clip = $video->clip(FFMpeg\\Coordinate\\TimeCode::fromSeconds(30), FFMpeg\\Coordinate\\TimeCode::fromSeconds(15));\n$clip->save(new FFMpeg\\Format\\Video\\X264(), 'video.avi');\n```\n\nThe clip filter takes two parameters:\n\n- `$start`, an instance of `FFMpeg\\Coordinate\\TimeCode`, specifies the start point of the clip\n- `$duration`, optional, an instance of `FFMpeg\\Coordinate\\TimeCode`, specifies the duration of the clip\n\nOn clip you can apply same filters as on video. For example resizing filter.\n\n```php\n$clip = $video->clip(FFMpeg\\Coordinate\\TimeCode::fromSeconds(30), FFMpeg\\Coordinate\\TimeCode::fromSeconds(15));\n$clip->filters()->resize(new FFMpeg\\Coordinate\\Dimension(320, 240), FFMpeg\\Filters\\Video\\ResizeFilter::RESIZEMODE_INSET, true);\n$clip->save(new FFMpeg\\Format\\Video\\X264(), 'video.avi');\n```\n\n##### Generate a waveform\n\nYou can generate a waveform of an audio file using the `FFMpeg\\Media\\Audio::waveform`\nmethod.\n\nThis code returns a `FFMpeg\\Media\\Waveform` instance.\nYou can optionally pass dimensions as the first two arguments and an array of hex string colors for ffmpeg to use for the waveform, see dedicated\ndocumentation below for more information.\n\nThe output file MUST use the PNG extension.\n\n```php\n$waveform = $audio->waveform(640, 120, array('#00FF00'));\n$waveform->save('waveform.png');\n```\n\nIf you want to get a waveform from a video, convert it in an audio file first.\n\n```php\n// Open your video file\n$video = $ffmpeg->open( 'video.mp4' );\n\n// Set an audio format\n$audio_format = new FFMpeg\\Format\\Audio\\Mp3();\n\n// Extract the audio into a new file as mp3\n$video->save($audio_format, 'audio.mp3');\n\n// Set the audio file\n$audio = $ffmpeg->open( 'audio.mp3' );\n\n// Create the waveform\n$waveform = $audio->waveform();\n$waveform->save( 'waveform.png' );\n```\n\n##### Filters\n\nYou can apply filters on `FFMpeg\\Media\\Video` with the `FFMpeg\\Media\\Video::addFilter`\nmethod. Video accepts Audio and Video filters.\n\nYou can build your own filters and some are bundled in PHP-FFMpeg - they are\naccessible through the `FFMpeg\\Media\\Video::filters` method.\n\nFilters are chainable\n\n```php\n$video\n    ->filters()\n    ->resize($dimension, $mode, $useStandards)\n    ->framerate($framerate, $gop)\n    ->synchronize();\n```\n\n###### Rotate\n\nRotates a video to a given angle.\n\n```php\n$video->filters()->rotate($angle);\n```\n\nThe `$angle` parameter must be one of the following constants :\n\n- `FFMpeg\\Filters\\Video\\RotateFilter::ROTATE_90`: 90° clockwise\n- `FFMpeg\\Filters\\Video\\RotateFilter::ROTATE_180`: 180°\n- `FFMpeg\\Filters\\Video\\RotateFilter::ROTATE_270`: 90° counterclockwise\n\n###### Resize\n\nResizes a video to a given size.\n\n```php\n$video->filters()->resize($dimension, $mode, $useStandards);\n```\n\nThe resize filter takes three parameters:\n\n- `$dimension`, an instance of `FFMpeg\\Coordinate\\Dimension`\n- `$mode`, one of the constants `FFMpeg\\Filters\\Video\\ResizeFilter::RESIZEMODE_*` constants\n- `$useStandards`, a boolean to force the use of the nearest aspect ratio standard.\n\nIf you want a video in a non-standard ratio, you can use the padding filter to resize your video in the desired size, and wrap it into black bars.\n\n```php\n$video->filters()->pad($dimension);\n```\n\nThe pad filter takes one parameter:\n\n- `$dimension`, an instance of `FFMpeg\\Coordinate\\Dimension`\n\nDon't forget to save it afterwards.\n\n```php\n$video->save(new FFMpeg\\Format\\Video\\X264(), $new_file);\n```\n\n###### Watermark\n\nWatermark a video with a given image.\n\n```php\n$video\n    ->filters()\n    ->watermark($watermarkPath, array(\n        'position' => 'relative',\n        'bottom' => 50,\n        'right' => 50,\n    ));\n```\n\nThe watermark filter takes two parameters:\n\n`$watermarkPath`, the path to your watermark file.\n`$coordinates`, an array defining how you want your watermark positioned. You can use relative positioning as demonstrated above or absolute as such:\n\n```php\n$video\n    ->filters()\n    ->watermark($watermarkPath, array(\n        'position' => 'absolute',\n        'x' => 1180,\n        'y' => 620,\n    ));\n```\n\n###### Framerate\n\nChanges the frame rate of the video.\n\n```php\n$video->filters()->framerate($framerate, $gop);\n```\n\nThe framerate filter takes two parameters:\n\n- `$framerate`, an instance of `FFMpeg\\Coordinate\\FrameRate`\n- `$gop`, a [GOP](https://wikipedia.org/wiki/Group_of_pictures) value (integer)\n\n###### Synchronize\n\nSynchronizes audio and video.\n\nSome containers may use a delay that results in desynchronized outputs. This\nfilter solves this issue.\n\n```php\n$video->filters()->synchronize();\n```\n\n###### Clip\n\nCuts the video at a desired point.\n\n```php\n$video->filters()->clip(FFMpeg\\Coordinate\\TimeCode::fromSeconds(30), FFMpeg\\Coordinate\\TimeCode::fromSeconds(15));\n```\n\nThe clip filter takes two parameters:\n\n- `$start`, an instance of `FFMpeg\\Coordinate\\TimeCode`, specifies the start point of the clip\n- `$duration`, optional, an instance of `FFMpeg\\Coordinate\\TimeCode`, specifies the duration of the clip\n\n###### Crop\n\nCrops the video based on a width and height(a `Point`)\n\n```php\n$video->filters()->crop(new FFMpeg\\Coordinate\\Point(\"t*100\", 0, true), new FFMpeg\\Coordinate\\Dimension(200, 600));\n```\n\nIt takes two parameters:\n- `$point`, an instance of `FFMpeg\\Coordinate\\Point`, specifies the point to crop\n- `$dimension`, an instance of `FFMpeg\\Coordinate\\Dimension`, specifies the dimension of the output video\n\n### Audio\n\n`FFMpeg\\Media\\Audio` can be transcoded too, ie: change codec, isolate audio or\nvideo. Frames can be extracted.\n\n##### Transcoding\n\nYou can transcode audios using the `FFMpeg\\Media\\Audio:save` method. You will\npass a `FFMpeg\\Format\\FormatInterface` for that.\n\nPlease note that audio kilobitrate is set on the audio format.\n\n```php\n$ffmpeg = FFMpeg\\FFMpeg::create();\n$audio = $ffmpeg->open('track.mp3');\n\n$format = new FFMpeg\\Format\\Audio\\Flac();\n$format->on('progress', function ($audio, $format, $percentage) {\n    echo \"$percentage % transcoded\";\n});\n\n$format\n    ->setAudioChannels(2)\n    ->setAudioKiloBitrate(256);\n\n$audio->save($format, 'track.flac');\n```\n\nTranscoding progress can be monitored in realtime, see Format documentation\nbelow for more information.\n\n##### Filters\n\nYou can apply filters on `FFMpeg\\Media\\Audio` with the `FFMpeg\\Media\\Audio::addFilter`\nmethod. It only accepts audio filters.\n\nYou can build your own filters and some are bundled in PHP-FFMpeg - they are\naccessible through the `FFMpeg\\Media\\Audio::filters` method.\n\n##### Clipping\nCuts the audio at a desired point.\n\n```php\n$audio->filters()->clip(FFMpeg\\Coordinate\\TimeCode::fromSeconds(30), FFMpeg\\Coordinate\\TimeCode::fromSeconds(15));\n```\n\n\n###### Metadata\n\nAdd metadata to audio files. Just pass an array of key=value pairs of all\nmetadata you would like to add. If no arguments are passed into the filter\nall metadata will be removed from input file. Currently supported data is\ntitle, artist, album, artist, composer, track, year, description, artwork\n\n```php\n$audio->filters()->addMetadata([\"title\" => \"Some Title\", \"track\" => 1]);\n\n//remove all metadata and video streams from audio file\n$audio->filters()->addMetadata();\n```\n\nAdd artwork to the audio file\n```php\n$audio->filters()->addMetadata([\"artwork\" => \"/path/to/image/file.jpg\"]);\n```\nNOTE: at present ffmpeg (version 3.2.2) only supports artwork output for .mp3\nfiles\n\n###### Resample\n\nResamples an audio file.\n\n```php\n$audio->filters()->resample($rate);\n```\n\nThe resample filter takes two parameters :\n\n- `$rate`, a valid audio sample rate value (integer)\n\n#### Frame\n\nA frame is an image at a timecode of a video; see documentation above about\nframe extraction.\n\nYou can save frames using the `FFMpeg\\Media\\Frame::save` method.\n\n```php\n$frame->save('target.jpg');\n```\n\nThis method has a second optional boolean parameter. Set it to true to get\naccurate images; it takes more time to execute.\n\n#### Gif\n\nA gif is an animated image extracted from a sequence of the video.\n\nYou can save gif files using the `FFMpeg\\Media\\Gif::save` method.\n\n```php\n$video = $ffmpeg->open( '/path/to/video' );\n$video\n    ->gif(FFMpeg\\Coordinate\\TimeCode::fromSeconds(2), new FFMpeg\\Coordinate\\Dimension(640, 480), 3)\n    ->save($new_file);\n```\n\nThis method has a third optional boolean parameter, which is the duration of the animation.\nIf you don't set it, you will get a fixed gif image.\n\n#### Concatenation\n\nThis feature allows you to generate one audio or video file, based on multiple sources.\n\nThere are two ways to concatenate videos, depending on the codecs of the sources.\nIf your sources have all been encoded with the same codec, you will want to use the `FFMpeg\\Media\\Concatenate::saveFromSameCodecs` which has way better performances.\nIf your sources have been encoded with different codecs, you will want to use the `FFMpeg\\Media\\Concatenate::saveFromDifferentCodecs`.\n\nThe first function will use the initial codec as the one for the generated file.\nWith the second function, you will be able to choose which codec you want for the generated file.\n\nYou also need to pay attention to the fact that, when using the saveFromDifferentCodecs method,\nyour files MUST have video and audio streams.\n\nIn both cases, you will have to provide an array of files.\n\nTo concatenate videos encoded with the same codec, do as follow:\n\n```php\n// In order to instantiate the video object, you HAVE TO pass a path to a valid video file.\n// We recommend that you put there the path of any of the video you want to use in this concatenation.\n$video = $ffmpeg->open( '/path/to/video' );\n$video\n    ->concat(array('/path/to/video1', '/path/to/video2'))\n    ->saveFromSameCodecs('/path/to/new_file', TRUE);\n```\n\nThe boolean parameter of the save function allows you to use the copy parameter which accelerates drastically the generation of the encoded file.\n\nTo concatenate videos encoded with the different codec, do as follow:\n\n```php\n// In order to instantiate the video object, you HAVE TO pass a path to a valid video file.\n// We recommend that you put there the path of any of the video you want to use in this concatenation.\n$video = $ffmpeg->open( '/path/to/video' );\n\n$format = new FFMpeg\\Format\\Video\\X264();\n$format->setAudioCodec(\"libmp3lame\");\n\n$video\n    ->concat(array('/path/to/video1', '/path/to/video2'))\n    ->saveFromDifferentCodecs($format, '/path/to/new_file');\n```\n\nMore details about concatenation in FFMPEG can be found [here](https://trac.ffmpeg.org/wiki/Concatenate), [here](https://ffmpeg.org/ffmpeg-formats.html#concat-1) and [here](https://ffmpeg.org/ffmpeg.html#Stream-copy).\n\n### AdvancedMedia\nAdvancedMedia may have multiple inputs and multiple outputs.\n\nThis class has been developed primarily to use with `-filter_complex`.\n\nSo, its `filters()` method accepts only filters that can be used inside `-filter_complex` command.\nAdvancedMedia already contains some built-in filters.\n\n#### Base usage\nFor example:\n\n```php\n$advancedMedia = $ffmpeg->openAdvanced(array('video_1.mp4', 'video_2.mp4'));\n$advancedMedia->filters()\n    ->custom('[0:v][1:v]', 'hstack', '[v]');\n$advancedMedia\n    ->map(array('0:a', '[v]'), new X264('aac', 'libx264'), 'output.mp4')\n    ->save();\n```\n\nThis code takes 2 input videos, stacks they horizontally in 1 output video and adds to this new video the audio from the first video.\n(It is impossible with simple filtergraph that has only 1 input and only 1 output).\n\n\n#### Complicated example\nA more difficult example of possibilities of the AdvancedMedia. Consider all input videos already have the same resolution and duration. (\"xstack\" filter has been added in the 4.1 version of the ffmpeg).\n\n```php\n$inputs = array(\n    'video_1.mp4',\n    'video_2.mp4',\n    'video_3.mp4',\n    'video_4.mp4',\n);\n\n$advancedMedia = $ffmpeg->openAdvanced($inputs);\n$advancedMedia->filters()\n    ->custom('[0:v]', 'negate', '[v0negate]')\n    ->custom('[1:v]', 'edgedetect', '[v1edgedetect]')\n    ->custom('[2:v]', 'hflip', '[v2hflip]')\n    ->custom('[3:v]', 'vflip', '[v3vflip]')\n    ->xStack('[v0negate][v1edgedetect][v2hflip][v3vflip]', XStackFilter::LAYOUT_2X2, 4, '[resultv]');\n$advancedMedia\n    ->map(array('0:a'), new Mp3(), 'video_1.mp3')\n    ->map(array('1:a'), new Flac(), 'video_2.flac')\n    ->map(array('2:a'), new Wav(), 'video_3.wav')\n    ->map(array('3:a'), new Aac(), 'video_4.aac')\n    ->map(array('[resultv]'), new X264('aac', 'libx264'), 'output.mp4')\n    ->save();\n```\n\nThis code takes 4 input videos, then the negates the first video, stores result in `[v0negate]` stream, detects edges in the second video, stores result in `[v1edgedetect]` stream, horizontally flips the third video, stores result in `[v2hflip]` stream, vertically flips the fourth video, stores result in `[v3vflip]` stream, then takes this 4 generated streams ans combine them in one 2x2 collage video.\nThen saves audios from the original videos into the 4 different formats and saves the generated collage video into the separate file.\n\nAs you can see, you can take multiple input sources, perform the complicated processing for them and produce multiple output files in the same time, in the one ffmpeg command.\n\n#### Just give me a map!\nYou do not have to use `-filter_complex`. You can use only `-map` options. For example, just extract the audio from the video:\n\n```php\n$advancedMedia = $ffmpeg->openAdvanced(array('video.mp4'));\n$advancedMedia\n    ->map(array('0:a'), new Mp3(), 'output.mp3')\n    ->save();\n```\n\n#### Customisation\nIf you need you can extra customize the result ffmpeg command of the AdvancedMedia:\n\n```php\n$advancedMedia = $ffmpeg->openAdvanced($inputs);\n$advancedMedia\n    ->setInitialParameters(array('the', 'params', 'that', 'will', 'be', 'added', 'before', '-i', 'part', 'of', 'the', 'command'))\n    ->setAdditionalParameters(array('the', 'params', 'that', 'will', 'be', 'added', 'at', 'the', 'end', 'of', 'the', 'command'));\n```\n\n#### Formats\n\nA format implements `FFMpeg\\Format\\FormatInterface`. To save to a video file,\nuse `FFMpeg\\Format\\VideoInterface`, and `FFMpeg\\Format\\AudioInterface` for\naudio files.\n\nA format can also extend `FFMpeg\\Format\\ProgressableInterface` to get realtime\ninformation about the transcoding.\n\nPredefined formats already provide progress information as events.\n\n```php\n$format = new FFMpeg\\Format\\Video\\X264();\n$format->on('progress', function ($video, $format, $percentage) {\n    echo \"$percentage % transcoded\";\n});\n\n$video->save($format, 'video.avi');\n```\n\nThe callback provided for the event can be any callable.\n\n##### Add additional parameters\n\nYou can add additional parameters to your encoding requests based on your video format.\n\nThe argument of the setAdditionalParameters method is an array.\n\n```php\n$format = new FFMpeg\\Format\\Video\\X264();\n$format->setAdditionalParameters(array('foo', 'bar'));\n$video->save($format, 'video.avi');\n```\n\n##### Add initial parameters\n\nYou can also add initial parameters to your encoding requests based on your video format. This can be expecially handy in overriding a default input codec in FFMpeg.\n\nThe argument of the setInitialParameters method is an array.\n\n```php\n$format = new FFMpeg\\Format\\Video\\X264();\n$format->setInitialParameters(array('-acodec', 'libopus'));\n$video->save($format, 'video.avi');\n```\n\n##### Create your own format\n\nThe easiest way to create a format is to extend the abstract\n`FFMpeg\\Format\\Video\\DefaultVideo` and `FFMpeg\\Format\\Audio\\DefaultAudio`.\nand implement the following methods.\n\n```php\nclass CustomWMVFormat extends FFMpeg\\Format\\Video\\DefaultVideo\n{\n    public function __construct($audioCodec = 'wmav2', $videoCodec = 'wmv2')\n    {\n        $this\n            ->setAudioCodec($audioCodec)\n            ->setVideoCodec($videoCodec);\n    }\n\n    public function supportBFrames()\n    {\n        return false;\n    }\n\n    public function getAvailableAudioCodecs()\n    {\n        return array('wmav2');\n    }\n\n    public function getAvailableVideoCodecs()\n    {\n        return array('wmv2');\n    }\n}\n```\n\n#### Coordinates\n\nFFMpeg uses many units for time and space coordinates.\n\n- `FFMpeg\\Coordinate\\AspectRatio` represents an aspect ratio.\n- `FFMpeg\\Coordinate\\Dimension` represent a dimension.\n- `FFMpeg\\Coordinate\\FrameRate` represent a framerate.\n- `FFMpeg\\Coordinate\\Point` represent a point. (Supports dynamic points since v0.10.0)\n- `FFMpeg\\Coordinate\\TimeCode` represent a timecode.\n\n### FFProbe\n\n`FFMpeg\\FFProbe` is used internally by `FFMpeg\\FFMpeg` to probe medias. You can\nalso use it to extract media metadata.\n\n```php\n$ffprobe = FFMpeg\\FFProbe::create();\n$ffprobe\n    ->streams('/path/to/video/mp4') // extracts streams informations\n    ->videos()                      // filters video streams\n    ->first()                       // returns the first video stream\n    ->get('codec_name');            // returns the codec_name property\n```\n\n```php\n$ffprobe = FFMpeg\\FFProbe::create();\n$ffprobe\n    ->format('/path/to/video/mp4') // extracts file informations\n    ->get('duration');             // returns the duration property\n```\n\n### Validating media files\n\n(since 0.10.0)\nYou can validate media files using PHP-FFMpeg's FFProbe wrapper.\n\n```php\n$ffprobe = FFMpeg\\FFProbe::create();\n$ffprobe->isValid('/path/to/file/to/check'); // returns bool\n```\n\n## License\n\nThis project is licensed under the [MIT license](http://opensource.org/licenses/MIT).\n\nMusic: \"Favorite Secrets\" by Waylon Thornton\nFrom the Free Music Archive\n[CC BY NC SA](http://creativecommons.org/licenses/by-nc-sa/3.0/us/)\n\nMusic: \"Siesta\" by Jahzzar\nFrom the Free Music Archive\n[CC BY SA](https://creativecommons.org/licenses/by-sa/3.0/)\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.12890625,
          "content": "{\n    \"name\": \"php-ffmpeg/php-ffmpeg\",\n    \"type\": \"library\",\n    \"description\": \"FFMpeg PHP, an Object Oriented library to communicate with AVconv / ffmpeg\",\n    \"keywords\": [\n        \"video processing\",\n        \"video\",\n        \"audio processing\",\n        \"audio\",\n        \"avconv\",\n        \"ffmpeg\",\n        \"avprobe\",\n        \"ffprobe\"\n    ],\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Romain Neutron\",\n            \"email\": \"imprec@gmail.com\",\n            \"homepage\": \"http://www.lickmychip.com/\"\n        },\n        {\n            \"name\": \"Phraseanet Team\",\n            \"email\": \"info@alchemy.fr\",\n            \"homepage\": \"http://www.phraseanet.com/\"\n        },\n        {\n            \"name\": \"Patrik Karisch\",\n            \"email\": \"patrik@karisch.guru\",\n            \"homepage\": \"http://www.karisch.guru\"\n        },\n        {\n            \"name\": \"Romain Biard\",\n            \"email\": \"romain.biard@gmail.com\",\n            \"homepage\": \"https://www.strime.io/\"\n        },\n        {\n            \"name\": \"Jens Hausdorf\",\n            \"email\": \"hello@jens-hausdorf.de\",\n            \"homepage\": \"https://jens-hausdorf.de\"\n        },\n        {\n            \"name\": \"Pascal Baljet\",\n            \"email\": \"pascal@protone.media\",\n            \"homepage\": \"https://protone.media\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.0 || ^8.1 || ^8.2 || ^8.3 || ^8.4\",\n        \"evenement/evenement\": \"^3.0\",\n        \"psr/log\": \"^1.0 || ^2.0 || ^3.0\",\n        \"spatie/temporary-directory\": \"^2.0\",\n        \"symfony/process\": \"^5.4 || ^6.0 || ^7.0\",\n        \"symfony/cache\": \"^5.4 || ^6.0 || ^7.0\"\n    },\n    \"suggest\": {\n        \"php-ffmpeg/extras\": \"A compilation of common audio & video drivers for PHP-FFMpeg\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^9.5.10 || ^10.0\",\n        \"mockery/mockery\": \"^1.5\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"FFMpeg\\\\\": \"src/FFMpeg\",\n            \"Alchemy\\\\BinaryDriver\\\\\": \"src/Alchemy/BinaryDriver\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Alchemy\\\\Tests\\\\BinaryDriver\\\\\": \"tests/Alchemy/BinaryDriver\",\n            \"Tests\\\\FFMpeg\\\\\": \"tests/FFMpeg\"\n        }\n    }\n}"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 1.0185546875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\" backupStaticAttributes=\"false\" colors=\"true\" convertErrorsToExceptions=\"true\" convertNoticesToExceptions=\"true\" convertWarningsToExceptions=\"true\" processIsolation=\"false\" stopOnFailure=\"false\" verbose=\"false\" bootstrap=\"tests/bootstrap.php\">\n    <php>\n        <env name=\"SYMFONY_PHPUNIT_REMOVE_RETURN_TYPEHINT\" value=\"true\"/>\n        <env name=\"SYMFONY_DEPRECATIONS_HELPER\" value=\"disabled\" />\n    </php>\n    <testsuites>\n        <testsuite name=\"Alchemy\">\n            <directory>tests/Alchemy/BinaryDriver</directory>\n        </testsuite>\n        <testsuite name=\"FFMpeg Unit\">\n            <directory>tests/FFMpeg/Unit</directory>\n        </testsuite>\n        <testsuite name=\"FFMpeg Functional\">\n            <directory>tests/FFMpeg/Functional</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist processUncoveredFilesFromWhitelist=\"true\">\n            <directory suffix=\".php\">src/</directory>\n        </whitelist>\n    </filter>\n</phpunit>\n\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}