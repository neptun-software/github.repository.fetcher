{
  "metadata": {
    "timestamp": 1736711921756,
    "page": 324,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nelmio/alice",
      "stars": 2509,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3046875,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1220703125,
          "content": "# Not archived\ndoc export-ignore\nfixtures export-ignore\nprofiling export-ignore\ntests export-ignore\nvendor-bin export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.380859375,
          "content": "!/fixtures/Bridge/Symfony/Application/var/.gitkeep\n!/fixtures/Bridge/Symfony/Application/var/cache/.gitkeep\n/.php-cs-fixer.cache\n/.php_cs.cache\n/.phpunit.result.cache\n/bin/\n/composer.lock\n/dist/\n/fixtures/Bridge/Symfony/Application/cache/\n/fixtures/Bridge/Symfony/Application/var/\n/humbuglog.json\n/humbuglog.txt\n/vendor-bin/*/bin/\n/vendor-bin/*/composer.lock\n/vendor-bin/*/vendor/\n/vendor/\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 1.2470703125,
          "content": "<?php\n\n/*\n * This file is part of the Alice package.\n *\n * (c) Nelmio <hello@nelm.io>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nuse Fidry\\PhpCsFixerConfig\\FidryConfig;\nuse PhpCsFixer\\Finder;\n\n$finder = Finder::create()\n    ->in([\n        __DIR__.'/fixtures',\n        __DIR__.'/profiling',\n        __DIR__.'/src',\n        __DIR__.'/tests',\n    ])\n    ->append([\n        __DIR__.'/.php-cs-fixer.dist.php',\n    ])\n    ->exclude([\n        'fixtures/Parser/files/php',\n        'Bridge/Symfony/Application/var',\n        'fixtures/Bridge/Symfony/Application/cache',\n    ]);\n\n$config = new FidryConfig(\n    <<<'EOF'\n        This file is part of the Alice package.\n\n        (c) Nelmio <hello@nelm.io>\n\n        For the full copyright and license information, please view the LICENSE\n        file that was distributed with this source code.\n        EOF,\n    74_000,\n);\n\n$config->addRules([\n    'php_unit_method_casing' => ['case' => 'camel_case'],\n    'php_unit_test_annotation' => false,\n    'phpdoc_no_empty_return' => false,\n    'static_lambda' => false,\n]);\n\n$config->setFinder($finder);\n$config->setCacheFile(__DIR__.'/dist/.php-cs-fixer.cache');\n\nreturn $config;\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 12.5400390625,
          "content": "### 3.1.0 (2017-10-22)\n\n### Features\n\n* Add new multifile loader (#821)\n\n### Bugfixes\n\n* Make loaders aliases public (#813)\n* Fix PHPUnit Bridge deprecation (#818)\n* Update unclonable trait (#820)\n\n### Other changes highlight\n\n* Add Project name in trigger error deprecation notices (#810)\n* Makefile tweaks & Update deps (#804)\n* Fix PHPUnit Bridge deprecation (#818)\n* Mention about `addXxx()` methods in upgrade path (#791)\n\n\n### 3.0.1 (2017-09-14)\n\n### Bugfixes\n\n* Combine string token followed by reference (#783)\n\n### Other changes highlight\n\n* Fix the MakeFile (#790)\n\n\n### 3.0.0 (2017-09-12)\n\n### Features\n\n* Add support for Doctrine Inflector (#548)\n* Add support of embedded couchdb document (couchdb-odm) (#683)\n* Add range named builder (#693)\n\n### Deprecations\n\n* Deprecate the usage of the local flag (#557)\n* Deprecate the usage of date strings (#559)\n* Deprecate optional values with floats (#564)\n* Deprecate references in quotes (#566)\n* Deprecate setting private or protected props directly (#607)\n* Deprecate usage of non PSR-1 compliant setters (#608)\n* Deprecate usage of inaccessible constructors (#609)\n* Deprecate calling methods (#610)\n* Deprecate array hash uniqueness (#611)\n\n### Bugfixes\n\n* Allow a fixture specs to be null (#767)\n\n\n#### Bugfixes\n\n* [DX] Properly handle missing specs (#774)\n* Fixed array function arguments (#775)\n* Fixed string arguments for function calls (#787)\n\n\n### 3.0.0-rc.1 (2017-06-29)\n\n#### Bugfixes\n* Attempts to resolved objects completely whenever possible (#756)\n\n\n### 3.0.0-rc.0 (2017-05-21)\n\n#### Features\n* Add a ReflectionPropertyAccessor to access to private and protected properties (#716)\n* Make Faker seed configurable (#726)\n* Add the factory keyword (#729)\n* Add support for immutable functions (#731)\n\n#### Bugfixes\n* Fix error on static factory with associative array (#714)\n* Fix a TypeError thrown when objected needed complete generation (#715)\n* Fix array value behaviour (#728)\n\n#### Other changes highlight\n* Move `deep_clone` in Alice namespace (#727)\n* Rework callers (#734)\n* Add Makefile script (#737)\n\n\n### 3.0.0-beta.5 (2017-04-11)\n\n#### Features\n* Prepare for PHPUnit 6 (#705)\n* Provide compatibility with PHP 7.2 (#706)\n\n\n#### Bugfixes\n* Create FixtureNotFoundException for resolver context (#713)\n\n\n### 3.0.0-beta.4 (2017-03-19)\n\n#### Features\n- Implements method callers (#666)\n- Add method call reference resolver (#669)\n- Make NativeLoader non-final and changed its API (#681)\n- Make parameters accessible in identity (#698)\n\n### Bugfixes\n- Fix edge case on OptionalValueResolver (#671)\n- Fix escaping of the percent sign (#687)\n- Fix usage of underscore in the function name (#702)\n\n\n### 3.0.0-beta.3 (2016-12-16)\n\n#### Features\n- Add a context cache (#656)\n\n#### Bugfixes\n- Fix wildcard resolver cache (#657)\n- Fix usage of dynamic array with functions (#655)\n\n\n### 3.0.0-beta.2 (2016-12-02)\n\n#### Features\n- Add a Faker provider to cast values (#622)\n- Allow to whitelist some PHP native functions (#640)\n\n#### Bugfixes\n- Fix optional flag boundaries (allow extremums `0` and `100`) (#623)\n- Lowered dynamic array quantifier minimal value (allow `0` and `1`) (#624)\n- Fix unique scope for arrays (#634)\n- Fix function which contains numerical characters tokenization (#649)\n\n#### Other changes highlight\n- Rework blackfire scripts (#633) \n- Replace the exception thrown for unclonable tests (#637)\n- Symfony Bundle configuration tweaks (#641)\n\n\n### 3.0.0-beta.1\n\n### Features\n- Better handling of references to inexistent fixtures (#592)\n- Automatically escape the `@` character in words (#593)\n\n#### Bugfix\n- Move PhpUnitBridge dependency to dev dependencies (#576)\n- Fix support for stdClass classes (#595)\n- Fix complete generation process (#596)\n- Fix FlagBag immutability (#614)\n- Fix UniqueValuesPool cached value check (#615)\n- Make ObjectBag more performant (#617)\n- Fix performance issues with Wildcard resolver (#618)\n- Fix usage of `$current` with identity (#619)\n\n#### Changes highlight\n- Harden tests (higher coverage and make them more robust thanks to Humbug) (#571, #590)\n- Simplify mutli-dep management with (#582)\n- Make testing easier (#583, #603)\n- Enforce strict types everywhere (#587)\n- Tag the Expression Language as internal (#600)\n- Add scenarios for profiling (#613, #616)\n\n\n### 3.0.0-beta.0 (2016-09-14)\n\nMain differences between 2.x and 3.x:\n\nThe persistence layer has been removed\nRewrite of the API to make it more extensible and more robust\nChange in the architecture to address some limitations found in 2.x\nMore details on the architectural changes can be found\n[here](https://github.com/nelmio/alice/blob/master/CONTRIBUTING.md#architecture).\n\n\n### 2.3.2 (2017-10-20)\n\n### Misc\n\n* Add tests to pin the behaviour in case of duplicate fixtures (#766)\n* Add vendor name in trigger error deprecation notices (#807)\n* Remove useless extra option (#817)\n* Make invalid scenarios as passing tests instead of skipped ones (#814)\n* Added tests to ensure setting a private/protected property is deprecated (#816)\n\n\n### 2.3.1 (2017-04-14)\n\n### Bugfixes\n\n* Prepare for PHPUnit 6 (#707)\n* Prepare for PHP 7.2 (#708)\n* Fixed required dependencies (#707)\n\n\n### 2.3.0 (2017-03-18)\n\n#### Features\n\n* Add support for Doctrine Inflector (#548)\n* Add support of embedded couchdb document (couchdb-odm) (#683)\n* Add range named builder (#693)\n\n#### Deprecations\n\n* Deprecate the usage of the local flag (#557)\n* Deprecate the usage of date strings (#559)\n* Deprecate optional values with floats (#564)\n* Deprecate references in quotes (#566)\n* Deprecate setting private or protected props directly (#607)\n* Deprecate usage of non PSR-1 compliant setters (#608)\n* Deprecate usage of inaccessible constructors (#609)\n* Deprecate calling methods (#610)\n* Deprecate array hash uniqueness (#611)\n\n#### Bugfixes\n\n* Remove usage of the deprecated method getMock (#558)\n* Document the change of behaviour of the identity function (#560)\n* Avoid using the GLOB_BRACE flag when it is not supported (#573)\n\n\n### 2.2.2 (2016-07-15)\n\n#### Bugfixes\n\n* Fix support for hyphens (#431)\n\n\n### 2.2.1 (2016-07-14)\n\n#### Bugfixes\n\n* Fix a BC break on how parameters were captured (#423)\n* Fix the usage of empty values with Faker provider (#426)\n\n#### Miscellaneous\n\n* Add tests for the usage of typehint in setters (#427)\n* Add tests for the usage of templates declared in an included file (#424)\n\n\n### 2.2.0 (2016-07-11)\n\n#### Features\n\n* Add support for snake_case properties (#323)\n* Add support for dots in reference names (#312)\n* Add support for Fixture parameters in PHP File (#341)\n* Don't persist ORM entities (embeddable support) (#272)\n* Enable quoting references to reflect on the changes in Symfony YAML Parser (#305)\n\n#### Deprecations\n\n* Drop support for PHP 5.4 and 5.5 (#414)\n* Deprecate usage of the the range operator with more than two dots (#329)\n* Deprecate usage of custom context in Parsers (#342)\n\n#### Bugfixes\n\n* Fix singularify deprecation warnings and optimize method detection (#407)\n* Fix various bugs in #355:\n  - `user_{alice, bob,}` previously was building a reference named `user_{alice, bob,}`. Now builds that as a list, i.e. result in `user_alice` and `user_bob`. A deprecation warning is also thrown to warn the user that the list is poorly formatted and an exception will be thrown in v3.\n  - `user_{, alice, bob}`: same as previous case.\n  - `user_{0..2}`: value for `<current()>` were respectively `'0'`, `1`, `2`; Now are all strings as states the phpdoc. Changed in #339.\n  - `user_{0....2}`: was generating only one fixture named `user_{0....2}`; Now is equivalent to `user_{0...2}`\n  - `user_{2...0}`: as reported in #358 was generating 4 fixtures... Now is equivalent to `0...2` which result in `user_0`, `user_1` and `user_2`\n  - `user_{2...2}`: was generating two fixtures `user_1` and `user_3`; Now doesn't build any (the segment is `[2;2[` so contains no element)\n  - `user_{0.2}`: was generating a fixture named `user_{0.2}`; Now doesn't generate any.\n  - `user_{2..}`: was generating a fixture named `user_{2..}`; Now doesn't generate any.\n  - `user_{-1..2}`: was generating a fixture named `user_-1..2`; Now doesn't generate any. Same goes for all ranges containing a negative number\n  - Deprecate the silent failing occurring when a fixture could not be built by the builder: current returns `null`, will throw an exception in the future.\n* Fix unique flag usage with templates (#359)\n* Fix some phpdoc (#264)\n* Fix the order in which the files were included (#314)\n\n\n### 2.1.4 (2016-01-07)\n\n#### Bugfixes\n\n* Ensure named static constructors are preferred over reflection (#303)\n\n\n### 2.1.3 (2015-12-28)\n\n#### Features\n\n* Add support for static constructors (#301)\n\n\n### 2.1.2 (2015-12-10)\n\n#### Features\n\n  * Add support for Symfony3 (#290, #287, #296)\n\n#### Bugfixes\n\n  * Allow the Populator to set private properties of a parent class (#282)\n\n\n### 2.1.1 (2015-10-01)\n\n  * Bug fixes / cleanup in `Fixtures` static class\n  * Bug fix in `Reference` processor to enable parsing zero references\n  * Bug fix to handle default instance with no properties\n  * Performance improvements\n\n\n### 2.1.0 (2015-09-06)\n\n  * Added support for array parameters\n  * Fixed bug handling addXXX setters\n  * Fixed bug handling functions without signature that use func_get_args() to retrieve parameters\n\n\n### 2.0.0 (2015-03-17)\n\n  * Expanded public interface of the `Loader` class to support:\n    - Trivial parsing of new document types\n    - Custom instantiation methods\n    - Custom setting of properties\n    - Custom processing and fixture building\n  * Added support for using parameters with the following\n    ```\n    parameters:\n        foo: value\n\n    Acme\\ClassName:\n        property: <{foo}>\n    ```\n\n\n### 1.7.2 (2014-10-10)\n\n  * Fixed support for custom providers, using addProvider instead of setProviders lets you add single providers\n\n\n### 1.7.1 (2014-09-29)\n\n  * Fixed handling of non-existing files\n  * Fixed support for fixture inheritance combined with fixture ranges\n\n\n### 1.7.0 (2014-04-24)\n\n  * Added fixture inheritance with `(template)` and `(extends NAME)` flags\n  * Added support for including other yaml fixtures files using a top-level `include` array\n  * Added an `<identity()>` (aliased as `<()>` faker provider to just evaluate PHP expressions with variables\n  * Added `@self` reference which is the equivalent to `$this`\n  * Added support for passing references to faker providers\n  * Added support for HHVM and PHP 5.6\n\n\n### 1.6.0 (2014-02-05)\n\n  * The array of instances returned by load() now has the fixture name as key\n  * Added support for static factory methods to replace __construct\n  * Added a special __set property to define a custom setter for all properties\n  * Added support for @-references within faker provider calls e.g. `<foo(@obj)>`\n  * Added support for escaping @-signs to create literal strings starting with `@`, e.g. `\\@foo`\n  * Fixed support for null variable references\n  * Fixed invalid invocation of private setters\n\n\n### 1.5.2 (2013-08-07)\n\n  * Fixed typo in the handling of processors\n  * Fixed regression in handling of <current()> in constructors\n\n\n### 1.5.1 (2013-08-01)\n\n  * Fixed persist_once issue, it is now disabled by default again\n  * Fixed regression in handling of suppressed constructors\n\n\n### 1.5.0 (2013-07-29)\n\n  * Added extensibility features to allow the creation of a Symfony2 AliceBundle (hautelook/alice-bundle)\n  * Added possibility to fetch objects by id with non-numeric ids\n  * Added `(local)` flag for classes and objects to create value objects that should not be persisted\n  * Added enums to create multiple objects (like fixture ranges but with names)\n  * Added ProcessorInterface to be able to modify objects before they get persisted\n  * Fixed cross-file references, everything is now persisted at once\n  * Fixed self-referencing of objects\n  * glob patterns now accept braces (http://php.net/manual/en/function.glob.php)\n\n\n### 1.4.0 (2013-04-15)\n\n  * Added possibility to mark fields as unique, so that random values are generated uniquely\n  * Added a logger option which can be a callable or PSR-3 logger and will receive basic progress information\n  * Added support for symfony 2.3\n  * Fixed caching of loader objects in the factory method to handle different options given for each loader\n\n\n### 1.3.0 (2013-01-22)\n\n  * Added support for multi and random references together with properties: `5x @user*->property`\n\n\n### 1.2.0 (2013-01-06)\n\n  * Added support for calling methods: `methodName: [arg, arg2, ..]`\n  * Added support for passing constructor arguments: `__construct: [arg, arg2]`\n  * Added possibility to bypass constructors by setting: `__construct: false`\n\n\n### 1.1.0 (2012-12-05)\n\n  * Added possibility to reference an object's properties via `@reference->property`\n\n\n### 1.0.0 (2012-11-22)\n\n  * Initial release\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.3955078125,
          "content": "# Contribution Guide\n\nThis guide is for those who want to have a better understanding of the library internals and how to contribute.\nThe code and the tests are the best documentation you will find, so the guide only aims at introducing the higher\npicture of the library mechanisms.\n\n1. [Differences between 2.x and 3.x](#differences-between-2x-and-3x)\n1. [Architecture](#architecture)\n    1. [FixtureBuilder](#fixturebuilder)\n    1. [Generator](#generator)\n1. [Expression Language](#expression-language)\n1. [Contributing](#contributing)\n    1. [Testing](#testing)\n    1. [Profiling](#profiling)\n\n\n## Differences between 2.x and 3.x\n\nMain differences between 2.x and 3.x:\n\n- The persistence layer has been removed\n- Rewrite of the API to make it more extensible and more robust\n- Change in the architecture to address some limitations found in 2.x\n\n\n## Architecture\n\nThe two entry points of the library are the `DataLoader` and `FileLoader`:\n\n<p align=\"center\">\n    <img src=\"doc/img/FileLoader.png\" width=500 />\n    <img src=\"doc/img/DataLoader.png\" width=500 />\n</p>\n\nAlice's goal is to render a PHP array containing a description of objects and parameters (with support for injected external objects\nand parameters) into a set of objects called `ObjectSet`.\n\nIn `DataLoader`, the main components are:\n\n- `FixtureBuilder`: denormalizes the given PHP array into a comprehensible set of data called `FixtureSet`\n- `Generator`: generates the objects and resolve the parameters described in `FixtureSet` to generate an `ObjectSet`\n\n\n### FixtureBuilder\n\n`FixtureBuilder` is composed of two components: `Denormalizer` and `ExpressionLanguage`.\n\n`Denormalizer` transforms the input data array with the injected values into a collection of `Fixture`, which describes an object to\ngenerate with a set of parameters.\n\n`ExpressionLanguage` is the component used by the `Denormalizer` to parse the values such as `@user<current()>`, i.e.\nthe Alice DSL interpreter.\n\nThe result `FixtureSet` is always invariant: reloading the same set of data will always result in the same result, hence\nis cacheable.\n\n\n### Generator\n\nThe `Generator` transforms a `FixtureSet` (composed of `Fixture`, parameters, injected objects, and\ninjected parameters) into an `ObjectSet`, which is a collection of PHP objects and parameters. Because some data are\ngenerated \"randomly\" thanks to [Faker][1], a `FixtureSet` will always give a different\n`ObjectSet`. If there is no dynamic data, the result will always be the same. If [Faker][1] is seeded\nwith `null`, the data will be generated more or less randomly. For a given seed, though,\nthe data generated will always be the same.\n\nThe data is generated in the following order:\n\n1. Fixture Resolution (`FixtureSet`):\n    1. Resolve the parameters: it is assumed the injected parameters are already resolved. Existing parameters are\n    overriden by the local ones if they conflict.\n    2. Resolve the fixtures: a fixture may have *flags* (for example, to support\n    [templates](https://github.com/nelmio/alice/blob/master/doc/fixtures-refactoring.md#fixture-inheritance)).\n    This resolution step is where it is possible to alter the collection of fixtures depending on the flags. In the\n    templates example, this is the step where a `dummy` fixture inheriting from a `base_dummy` will\n    inherit the properties of `base_dummy`, and `base_dummy` will be removed of the list of fixtures\n    (templates should not be generated).\n1. Instantiation: This when *all* fixtures will be instantiated. The\ninstantiation attempts to account for the order. For example, if `second_dummy` is being instantiated but\nrequires `first_dummy` to exist, the\ninstantiator will instantiate `first_dummy` before resuming the instantiation of `second_dummy`.\n1. Hydration: This is when all the property values will be set.\n1. Calling: Additional function calls can be made on the PHP objects after instantiation and hydration.\n\nDuring the instantiation, hydration or calling process, values may be passed. Those values may be a reference to another\nfixture, a parameter, a static value, but or a value that must be generated via faker. For example,\n`<name()>` will result in a random name. Those values are always resolved on the fly by a `ValueResolver`.\n\nTo see more about the fixture lifecycle, please check [#388](https://github.com/nelmio/alice/issues/388).\n\nFor more details regarding a class, the easiest way is to check the code itself and the tests.\n\n## Expression Language\n\nAs already mentioned, Alice ships with an Expression Language, which interprets values such as `@user*` or\n`<current()>`. The complete list of supported features can be found in [ParserIntegrationTest](tests/FixtureBuilder/ExpressionLanguage/Parser/ParserIntegrationTest.php)\nwith the [original RFC](https://github.com/nelmio/alice/issues/377).\n\n\n\n## Contributing\n\n### Testing\n\nThe project uses [PHPUnit][2] for tests. The library also includes framework bridges (like\n[for Symfony](https://github.com/nelmio/alice/tree/master/src/Bridge/Symfony)), which amounts to registering the right\nservices with the right properties (like tags and configuration) to the framework Dependency Injection Container. Any\nother framework special features should be handled in another library, bundle, module etc.\n\nTo avoid any conflicts, the framework dependencies used by the bridges are installed in dedicated folders thanks to\n[bamarni bin composer plugin][3] and [theofidry inheritance composer plugin][4]. As a result, if you want to run the\ntests for Symfony, you must run the tests with `phpunit_symfony.xml.dist` instead of `phpunit.xml.dist`.\n\nTo run the tests use `make test`.\n\nThe tests should be descriptive and are \"testdox friendly\" i.e. if you are using the testdox\noption, you will get something like:\n\n\n<p align=\"center\">\n    <img src=\"doc/img/testdox.png\" width=500 />\n</p>\n\n\n### Profiling\n\nA Profiling of different scenarii is done with [Blackfire][5]. The scenario can be found under `profiling`. If you wish\nto run them, you can try to simply run `make tp` (for \"test performances\"). You may however have to touch some elements\nof the blackfire configuration (see the `profiling/scenarioX/blackfire.php` files).\n\n\n<br />\n<hr />\n\n« [Advanced Guide](doc/advanced-guide.md) • [Table of Contents](README.md#table-of-contents) »\n\n\n[1]: https://github.com/fzaninotto/Faker\n[2]: https://github.com/sebastianbergmann/phpunit\n[3]: https://github.com/bamarni/composer-bin-plugin\n[4]: https://github.com/theofidry/composer-inheritance-plugin\n[5]: https://blackfire.io/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.025390625,
          "content": "Copyright (c) 2012 Nelmio\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 5.4619140625,
          "content": "# See https://tech.davis-hansson.com/p/make/\nMAKEFLAGS += --warn-undefined-variables\nMAKEFLAGS += --no-builtin-rules\n\nCOVERAGE_DIR = dist/coverage\nCOVERAGE_DIR_XML = $(COVERAGE_DIR)/xml\nCOVERAGE_DIR_HTML = $(COVERAGE_DIR)/html\nCLOVER_COVERAGE = $(COVERAGE_DIR)/clover.xml\n\nPHP_NO_GC = php -d zend.enable_gc=0\nPHP_DBG=phpdbg -qrr -d zend.enable_gc=0 bin/phpunit\n\nCOVERS_VALIDATOR_BIN = vendor-bin/covers-validator/bin/covers-validator\nCOVERS_VALIDATOR = $(PHP_NO_GC) $(COVERS_VALIDATOR_BIN)\nINFECTION_BIN = vendor-bin/infection/bin/infection\nINFECTION = $(INFECTION_BIN) --test-framework-options=\"--exclude-group=integration\"\nPHP_CS_FIXER_BIN = vendor-bin/php-cs-fixer/bin/php-cs-fixer\nPHP_CS_FIXER = $(PHP_NO_GC) $(PHP_CS_FIXER_BIN)\nPHPSTAN_BIN = vendor-bin/phpstan/bin/phpstan\nPHPSTAN = $(PHP_NO_GC) -dmemory_limit=1G $(PHPSTAN_BIN)\nPHPUNIT_BIN = bin/phpunit\nPHPUNIT = $(PHP_NO_GC) $(PHPUNIT_BIN)\nPHPUNIT_SYMFONY_BIN = vendor-bin/symfony/bin/phpunit\nPHPUNIT_SYMFONY = $(PHP_NO_GC) $(PHPUNIT_SYMFONY_BIN)\n\n\n.DEFAULT_GOAL := help\n\n\n.PHONY: help\n.PHONY: help\nhelp:\n\t@echo \"\\033[33mUsage:\\033[0m\\n  make TARGET\\n\\n\\033[32m#\\n# Commands\\n#---------------------------------------------------------------------------\\033[0m\\n\"\n\t@fgrep -h \"##\" $(MAKEFILE_LIST) | fgrep -v fgrep | sed -e 's/\\\\$$//' | sed -e 's/##//' | awk 'BEGIN {FS = \":\"}; {printf \"\\033[33m%s:\\033[0m%s\\n\", $$1, $$2}'\n\n\n.PHONY: all\nall:\t\t  ## Runs everything\nall: cs phpstan test\n\n\n#\n# Code Style\n#---------------------------------------------------------------------------\n\n.PHONY: cs\ncs: \t \t  ## Fixes CS\ncs: php_cs_fixer gitignore_sort\n\n.PHONY: php_cs_fixer\nphp_cs_fixer: \t  ## Runs PHP-CS-Fixer\nphp_cs_fixer: $(PHP_CS_FIXER_BIN)\n\t$(PHP_CS_FIXER) fix\n\n.PHONY: gitignore_sort\ngitignore_sort:\t  ## Sorts the .gitignore entries\ngitignore_sort:\n\tLC_ALL=C sort -u .gitignore -o .gitignore\n\n\n#\n# Code Analysis\n#---------------------------------------------------------------------------\n\n.PHONY: phpstan\nphpstan: \t  ## Runs PHPStan\nphpstan: $(PHPSTAN_BIN)\n\t$(PHPSTAN) analyze\n\n\n#\n# Commands\n#---------------------------------------------------------------------------\n\n.PHONY: test\ntest:             ## Runs all the tests\ntest: test_core test_symfony\n\n.PHONY: test_core\ntest_core:        ## Runs all the tests for the core library\ntest_core: validate-package covers_validate phpunit\n\n.PHONY: validate-package\nvalidate-package: ## Validates the Composer package\nvalidate-package: vendor\n\tcomposer validate --strict\n\n.PHONY: covers_validate\ncovers_validate:  ## Runs CoverValidator for the library core\ncovers_validate: $(COVERS_VALIDATOR_BIN)\n#\t$(COVERS_VALIDATOR)\n\n.PHONY: phpunit\nphpunit:          ## Runs PHPUnit fot the library core\nphpunit: $(PHPUNIT_BIN)\n\t$(PHPUNIT)\n\n.PHONY: test_symfony\ntest_symfony:     ## Runs all the tests for the Symfony bridge\ntest_symfony: covers_validate_symfony phpunit_symfony\n\n.PHONY: covers_validate_symfony\ncovers_validate_symfony: ## Runs CoverValidator for the Symfony bridge\ncovers_validate_symfony: $(COVERS_VALIDATOR_BIN)\n#\t$(COVERS_VALIDATOR) -c phpunit_symfony.xml.dist\n\n.PHONY: phpunit_symfony\nphpunit_symfony:  ## Runs the tests for the Symfony Bridge\nphpunit_symfony: $(PHPUNIT_SYMFONY_BIN)\n\t$(PHPUNIT_SYMFONY) --configuration=phpunit_symfony.xml.dist\n\n.PHONY: phpunit_coverage\nphpunit_coverage: ## Runs PHPUnit with coverage\nphpunit_coverage: $(PHPUNIT_BIN)\n\tXDEBUG_MODE=coverage $(PHP_NO_GC) $(PHPUNIT) --exclude-group=integration --coverage-text --coverage-html=$(COVERAGE_DIR_HTML) --coverage-clover=$(CLOVER_COVERAGE)\n\n.PHONY: infection\ninfection: \t  ## Runs Infection\ninfection: $(INFECTION_BIN)\n\t$(INFECTION)\n\n.PHONY: blackfire\nblackfire: \t  ## Runs Blackfire performance tests\nblackfire: vendor vendor-bin/profiling/vendor\n\tphp profiling/scenario0/blackfire.php\n\tphp profiling/scenario1/blackfire.php\n\tphp profiling/scenario2/blackfire.php\n\tphp profiling/scenario3/blackfire.php\n\n\n#\n# Rules from files\n#---------------------------------------------------------------------------\n\ncomposer.lock: composer.json\n\t@echo compose.lock is not up to date.\n\nvendor: composer.lock\n\tcomposer install\n\ttouch -c $@\n\n$(PHPUNIT_BIN): vendor\n\tcomposer install\n\ttouch -c $@\n\n$(PHPUNIT_SYMFONY_BIN): vendor-bin/symfony/composer.lock\n\tcomposer bin symfony install\n\ttouch -c $@\n\nvendor-bin/symfony/composer.lock: vendor-bin/symfony/composer.json\n\t@echo symfony compose.lock is not up to date.\n\n$(PHP_CS_FIXER_BIN): vendor-bin/php-cs-fixer/composer.lock\n\tcomposer bin php-cs-fixer install\n\ttouch -c $@\n\nvendor-bin/php-cs-fixer/composer.lock: vendor-bin/php-cs-fixer/composer.json\n\t@echo php-cs-fixer composer.lock is not up to date.\n\n$(PHPSTAN_BIN): vendor-bin/phpstan/composer.lock\n\tcomposer bin phpstan install\n\ttouch -c $@\n\nvendor-bin/phpstan/composer.lock: vendor-bin/phpstan/composer.json\n\t@echo phpstan composer.lock is not up to date\n\nvendor-bin/profiling/vendor: vendor-bin/profiling/composer.lock\n\tcomposer bin profiling install\n\nvendor-bin/profiling/composer.lock: vendor-bin/profiling/composer.json\n\t@echo profiling composer.lock is not up to date\n\n$(INFECTION_BIN): vendor-bin/infection/composer.lock\n\tcomposer bin infection install\n\ttouch -c $@\n\nvendor-bin/infection/composer.lock: vendor-bin/infection/composer.json\n\t@echo infection composer.lock is not up to date\n\n$(COVERS_VALIDATOR_BIN): vendor-bin/covers-validator/composer.lock\n\tcomposer bin covers-validator install\n\ttouch -c $@\n\nvendor-bin/covers-validator/composer.lock: vendor-bin/covers-validator/composer.json\n\t@echo covers-validator composer.lock is not up to date\n\n$(CLOVER_COVERAGE):\n\t$(MAKE) phpunit_coverage\n\ttouch -c $@\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.1103515625,
          "content": "<p align=\"center\">\n    <img src=\"doc/img/nelmio.png\" width=300 />\n</p>\n\n<h1 align=center>Alice - Expressive fixtures generator</h1>\n\n[![Package version](https://img.shields.io/packagist/v/nelmio/alice.svg?style=flat-square)](https://packagist.org/packages/nelmio/alice)\n[![Build Status](https://github.com/nelmio/alice/workflows/CI/badge.svg?branch=master)](https://github.com/nelmio/alice/actions)\n[![Slack](https://img.shields.io/badge/slack-%23alice--fixtures-red.svg?style=flat-square)](https://symfony.com/slack-invite)\n[![License](https://img.shields.io/badge/license-MIT-red.svg?style=flat-square)](LICENSE)\n\n\nRelying on [FakerPHP/Faker](https://github.com/FakerPHP/Faker), Alice\nallows you to create a ton of fixtures/fake data for use while developing\nor testing your project. It gives you a few essential tools to make it\nvery easy to generate complex data with constraints in a readable and easy\nto edit way, so that everyone on your team can tweak the fixtures if needed.\n\n**Warning: this doc is for alice 3.0. If you want to check the documentation\nfor 2.x, follow [this link](https://github.com/nelmio/alice/tree/2.x)**.\n\n**2.x is in maintenance mode: PRs are accepted, but no active development is done on it by the maintainers any longer.**\n\n\n## Table of Contents\n\n1. [Installation](#installation)\n1. [Example](#example)\n1. [Getting Started](doc/getting-started.md)\n    1. [Basic Usage](doc/getting-started.md#basic-usage)\n    1. [Framework integration](doc/getting-started.md#framework-integration)\n        1. [Symfony](doc/getting-started.md#symfony)\n1. [Complete Reference](doc/complete-reference.md)\n    1. [Creating Fixtures](doc/complete-reference.md#creating-fixtures)\n        1. [YAML](doc/complete-reference.md#yaml)\n        1. [PHP](doc/complete-reference.md#php)\n        1. [JSON](doc/complete-reference.md#json)\n    1. [Fixture Ranges](doc/complete-reference.md#fixture-ranges)\n    1. [Fixture Lists](doc/complete-reference.md#fixture-lists)\n    1. [Fixture Reference](doc/complete-reference.md#fixture-reference)\n    1. [Calling Methods](doc/complete-reference.md#calling-methods)\n        1. [Method arguments with flags](doc/complete-reference.md#method-arguments-with-flags)\n        1. [Method arguments with parameters](doc/complete-reference.md#method-arguments-with-parameters)\n    1. [Specifying Constructor Arguments](doc/complete-reference.md#specifying-constructor-arguments)\n    1. [Using a factory / a named constructor](doc/complete-reference.md#using-a-factory--a-named-constructor)\n    1. [Optional Data](doc/complete-reference.md#optional-data)\n    1. [Handling Unique Constraints](doc/complete-reference.md#handling-unique-constraints)\n1. [Handling Relations](doc/relations-handling.md)\n    1. [References](doc/relations-handling.md#references)\n    1. [Multiple References](doc/relations-handling.md#multiple-references)\n    1. [Self reference](doc/relations-handling.md#self-reference)\n    1. [Passing references to providers](doc/relations-handling.md#passing-references-to-providers)\n1. [Keep Your Fixtures Dry](doc/fixtures-refactoring.md)\n    1. [Fixture Inheritance](doc/fixtures-refactoring.md#fixture-inheritance)\n    1. [Including files](doc/fixtures-refactoring.md#including-files)\n    1. [Variables](doc/fixtures-refactoring.md#variables)\n    1. [Parameters](doc/fixtures-refactoring.md#parameters)\n        1. [Static parameters](doc/fixtures-refactoring.md#static-parameters)\n        1. [Dynamic parameters](doc/fixtures-refactoring.md#dynamic-parameters)\n        1. [Composite parameters](doc/fixtures-refactoring.md#composite-parameters)\n        1. [Usage with functions (constructor included)](doc/fixtures-refactoring.md#usage-with-functions-constructor-included)\n        1. [Inject external parameters](doc/fixtures-refactoring.md#inject-external-parameters)\n1. [Customize Data Generation](doc/customizing-data-generation.md)\n    1. [Faker Data](doc/customizing-data-generation.md#faker-data)\n        1. [Localized Fake Data](doc/customizing-data-generation.md#localized-fake-data)\n        1. [Random data](doc/customizing-data-generation.md#random-data)\n        1. [Default Providers](doc/customizing-data-generation.md#default-providers)\n            1. [Identity](doc/customizing-data-generation.md#identity)\n            1. [Current](doc/customizing-data-generation.md#current)\n            1. [Cast](doc/customizing-data-generation.md#cast)\n    1. [Custom Faker Data Providers](doc/customizing-data-generation.md#custom-faker-data-providers)\n1. [Advanced Guide](doc/advanced-guide.md#advanced-guide)\n    1. [Performance](doc/advanced-guide.md#performance)\n    1. [Expression Language (DSL)](doc/advanced-guide.md#expression-language-dsl)\n        1. [Parameters](doc/advanced-guide.md#parameters)\n        1. [Functions](doc/advanced-guide.md#functions)\n        1. [Identity](doc/advanced-guide.md#identity)\n        1. [Arrays](doc/advanced-guide.md#arrays)\n        1. [Optional](doc/advanced-guide.md#optional)\n        1. [References](doc/advanced-guide.md#references)\n        1. [Property Reference](doc/advanced-guide.md#property-reference)\n    1. [Extending Alice](doc/advanced-guide.md#extending-alice)\n        1. [Custom Flag](doc/advanced-guide.md#custom-flag)\n        1. [Custom Instantiation](doc/advanced-guide.md#custom-instantiator)\n        1. [Custom Accessor](doc/advanced-guide.md#custom-accessor)\n1. [Third-party libraries](#third-party-libraries)\n    1. [Symfony](#symfony)\n    1. [Nette](#nette)\n    1. [Zend Framework 2](#zend-framework-2)\n    1. [Framework Agnostic](#framework-agnostic)\n1. [Contribute](CONTRIBUTING.md#contribute)\n    1. [Differences between 2.x and 3.x](CONTRIBUTING.md#differences-between-2x-and-3x)\n    1. [Architecture](CONTRIBUTING.md#architecture)\n        1. [FixtureBuilder](CONTRIBUTING.md#fixturebuilder)\n        1. [Generator](CONTRIBUTING.md#generator)\n    1. [Expression Language](CONTRIBUTING.md#expression-language)\n    1. [Contributing](CONTRIBUTING.md#contributing)\n        1. [Testing](CONTRIBUTING.md#testing)\n        1. [Profiling](CONTRIBUTING.md#profiling)\n1. [Backward Compatibility Promise (BCP)](#backward-compatibility-promise-bcp)\n1. [Upgrade](#upgrade)\n    1. [Breaking changes between Alice 2.x and 3.0](UPGRADE.md#breaking-changes-between-alice-2x-and-30)\n\n\n## Installation\n\nThis is installable via [Composer](https://getcomposer.org/) as\n[nelmio/alice](https://packagist.org/packages/nelmio/alice):\n\n    composer require --dev nelmio/alice\n\n\n## Example\n\nHere is a complete example of entity declaration:\n\n```yaml\nNelmio\\Entity\\User:\n    user{1..10}:\n        username: '<username()>'\n        fullname: '<firstName()> <lastName()>'\n        birthDate: '<date_create()>'\n        email: '<email()>'\n        favoriteNumber: '50%? <numberBetween(1, 200)>'\n\nNelmio\\Entity\\Group:\n    group1:\n        name: Admins\n        owner: '@user1'\n        members: '<numberBetween(1, 10)>x @user*'\n        created: '<dateTimeBetween(\"-200 days\", \"now\")>'\n        updated: '<dateTimeBetween($created, \"now\")>'\n```\n\nYou can then load them easily with:\n\n```php\n$loader = new Nelmio\\Alice\\Loader\\NativeLoader();\n$objectSet = $loader->loadFile(__DIR__.'/fixtures.yml');\n```\n\nOr load an array right away:\n\n```php\n$loader = new Nelmio\\Alice\\Loader\\NativeLoader();\n$objectSet = $loader->loadData([\n    \\Nelmio\\Entity\\User::class => [\n        'user{1..10}' => [\n            'username' => '<username()>',\n            'fullname' => '<firstName()> <lastName()>',\n            'birthDate' => '<date_create()>',\n            'email' => '<email()>',\n            'favoriteNumber' => '50%? <numberBetween(1, 200)>',\n        ],\n    ],\n    \\Nelmio\\Entity\\Group::class => [\n        'group1' => [\n            'name' => 'Admins',\n            'owner' => '@user1',\n            'members' => '<numberBetween(1, 10)>x @user*',\n            'created' => '<dateTimeBetween(\"-200 days\", \"now\")>',\n            'updated' => '<dateTimeBetween($created, \"now\")>',\n        ],\n    ],\n]);\n```\n\nFor more information, refer to [the documentation](#table-of-contents).\n\n\n## Third-party libraries\n\n### Framework Agnostic\n\n- [theofidry/AliceDataFixtures](https://github.com/theofidry/AliceDataFixtures)\n- [trappar/AliceGenerator](https://github.com/trappar/AliceGenerator)\n\n### Symfony\n\n- [hautelook/AliceBundle](https://github.com/theofidry/AliceBundle)\n\n### Nette\n\n-  [Zenify/DoctrineFixtures](https://github.com/Zenify/DoctrineFixtures)\n\n### WordPress\n\n- [rmp-up/wp-fixtures](https://github.com/rmp-up/wp-fixtures)\n\n### Zend Framework 2:\n\n- [ma-si/aist-alice-fixtures](https://github.com/ma-si/aist-alice-fixtures)\n\n\n## Contribute\n\nCheck the [contribution guide](CONTRIBUTING.md).\n\n\n## Backward Compatibility Promise (BCP)\n\nThe policy is for the major part following the same as [Symfony's one][symfony-bc-policy] with a few changes or\nhighlights:\n\n- Code marked with `@private` or `@internal` are excluded from the BCP\n- `Nelmio\\Alice\\Loader\\NativeLoader` is excluded from the BCP: as it is the no DIC solution, registring a new service\n  may require a new method, in which case your code may break if you have already declared that method. To avoid that,\n  please beware of the naming of your methods to avoid any conflicts.\n\n\n## Upgrade\n\nCheck the [upgrade guide](UPGRADE.md).\n\n\n[symfony-bc-policy]: https://symfony.com/doc/current/contributing/code/bc.html\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 4.12109375,
          "content": "# Breaking changes between Alice 2.x and 3.0\n\nAlice 3.0 comes as a complete rewrite which shares nothing in common with 2.x\nAPI wise, but only a few changes user-land. The reasons for those changes are:\n\n- Removing the persistence layer. This work should be handled in Alice extensions\n  such as [AliceDataFixtures](https://github.com/theofidry/AliceDataFixtures)\n- Introduce a proper fixture lifecycle (building, instantiation,\n  hydration and configuration step)\n- Introduce a proper Lexer\n- Make it easier to extend the library\n\nThe aim of those changes are to make Alice more robust, performant and\nextensible. The technical debt and a lot of weird edge cases were extremely hard\nto fix in 2.x due to its design.\n\nIf you are maintaining an extension, bundle or module for Alice, chances are\nhigh that you have to redo a big chunk of work. However if you are just a\nsimple consumer, very little changed:\n\n- The loading is now done via the new loader `Nelmio\\Alice\\Loader\\NativeLoader`\n- You can easily inject parameters and objects into this loader\n- The loader now returns a set containing both the parameters resolved and the\n  objects created (in 2.x, only the objects were returned)\n- Framework bridges are integrated into Alice. If you are using Symfony for\n  example the loader is accessible via the `nelmio_alice.data_loader` or\n  `nelmio_alice.file_loader` service\n\nThe amount of BC breaks user-land (i.e. in the file declaration syntax) have\nbeen reduced to the bare minimum. Those introduced are either edge cases\nwhere the result could not be guaranteed, or syntax errors. Whenever possible,\na deprecation message about those changes will land in the patch versions of\nAlice 2.x.\n\nAlice 2.x is no longer supported. Some bug fixes or improvements may still be\ndone depending on the case, but no Alice maintainer will actively work on it\n(PR may still be welcomed though).\n\n## User-land changes\n\n- `addX()` methods are no longer supported unless you have the corresponding\n  `removeX()` method. You will need to define a setter for the collection if\n  you do not want to have the `removeX()` method.\n\n  ```php\n  class Recipe\n  \n      // no longer supported\n      public function addServing(Serving $serving)\n      {\n          // …\n      }\n      \n      // the setter must be defined\n      public function setServings(iterable $servings)\n      {\n          // …\n      }\n  }\n  ```\n  \n  Also note that previously if an `addX($object)` method existed but the\n  argument in alice was an array, then `addX($object)` was called for\n  each elements of the array. This is no longer the case in 3.x. \n  \n  Those changes are mostly the result of moving from a custom property accessor to the\n  [Symfony Property Access Component](https://symfony.com/doc/current/components/property_access.html).\n  \n  [See the original discussion](https://github.com/nelmio/alice/issues/654)\n\n- Calls to custom methods (not setters) must not go under the special `__calls` key:\n\n```yaml\nUser:\n    user_{A, B}:\n        __calls:\n            - markAsInvited: []\n```\n\n- The fixture extended notations have been hardened and are now less flexible. The correct syntax expected are:\n    - `user{1..10}`\n    - `user_{alice, bob}`\n    - `admin (template)`\n    - `user {extends admin}`\n\n- The DSL rules are now detailed in [Expression Language (DSL)](doc/advanced-guide.md#expression-language-dsl).\n  Despite hard efforts to keep a maximum of compatibility, due to the too little testing in 2.x and the difference of\n  implementation between 2.x and 3.x for this part of alice, a few differences are bound to happen. Please report those\n  whenever you encounter one.\n\n- It is no longer possible to \"extend\" from a non template fixture:\n\n```yaml\nstdClass:\n    dummy_{A, B}:\n        var1: 'foo'\n        var2: 'bar'\n\n    dummy_A:    # This fixture definition will completely override the 'dummy_A' derived from 'dummy_{A, B}'\n        var: 'A'\n```\n\nIn other words, the result will be:\n\n```\ndummy_A: #stdClass {\n    +var: 'A'\n}\ndummy_B: #stdClass {\n    +var1: 'foo'\n    +var2: 'bar'\n}\n```\n\nAs opposed to in 2.x:\n\n```\ndummy_A: #stdClass {\n    +var1: 'foo'\n    +var2: 'bar'\n    +var: 'A'\n}\ndummy_B: #stdClass {\n    +var1: 'foo'\n    +var2: 'bar'\n}\n```\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.0146484375,
          "content": "comment: false\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.099609375,
          "content": "{\n    \"name\": \"nelmio/alice\",\n    \"description\": \"Expressive fixtures generator\",\n    \"keywords\": [\"fixture\", \"data\", \"test\", \"faker\"],\n    \"type\": \"library\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Jordi Boggiano\",\n            \"email\": \"j.boggiano@seld.be\"\n        },\n        {\n            \"name\": \"Tim Shelburne\",\n            \"email\": \"shelburt02@gmail.com\"\n        },\n        {\n            \"name\": \"Théo FIDRY\",\n            \"email\": \"theo.fidry@gmail.com\"\n        }\n    ],\n\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"fakerphp/faker\": \"^1.10\",\n        \"myclabs/deep-copy\": \"^1.10\",\n        \"sebastian/comparator\": \"^3.0 || ^4.0 || ^5.0 || ^6.0\",\n        \"symfony/property-access\": \"^6.4 || ^7.0\",\n        \"symfony/yaml\": \"^6.0 || ^7.0\"\n    },\n    \"require-dev\": {\n        \"bamarni/composer-bin-plugin\": \"^1.8.1\",\n        \"phpspec/prophecy\": \"^1.6\",\n        \"phpspec/prophecy-phpunit\": \"^2.0\",\n        \"phpunit/phpunit\": \"^9.3\",\n        \"symfony/config\": \"^6.4 || ^7.0\",\n        \"symfony/dependency-injection\": \"^6.4 || ^7.0\",\n        \"symfony/finder\": \"^6.4 || ^7.0\",\n        \"symfony/http-kernel\": \"^6.4 || ^7.0\",\n        \"symfony/phpunit-bridge\": \"^6.4 || ^7.0\",\n        \"symfony/var-dumper\": \"^6.4 || ^7.0\"\n    },\n    \"conflict\": {\n        \"symfony/framework-bundle\": \"<6.4.0\"\n    },\n\n    \"autoload\": {\n        \"files\": [\n            \"src/deep_clone.php\"\n        ],\n        \"psr-4\": {\n            \"Nelmio\\\\Alice\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Nelmio\\\\Alice\\\\\": [\n                \"fixtures\",\n                \"profiling\",\n                \"tests\"\n            ]\n        }\n    },\n    \"suggest\": {\n        \"theofidry/alice-data-fixtures\": \"Wrapper for Alice to provide a persistence layer.\"\n    },\n\n    \"extra\": {\n        \"bamarni-bin\": {\n            \"bin-links\": false,\n            \"forward-command\": false\n        },\n        \"branch-alias\": {\n            \"dev-master\": \"3.x-dev\"\n        }\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"bamarni/composer-bin-plugin\": true\n        },\n        \"bin-dir\": \"bin\",\n        \"sort-packages\": true\n    }\n}\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "fixtures",
          "type": "tree",
          "content": null
        },
        {
          "name": "infection.json.dist",
          "type": "blob",
          "size": 0.6845703125,
          "content": "{\n    \"$schema\": \"./vendor-bin/infection/vendor/infection/infection/resources/schema.json\",\n    \"source\": {\n        \"directories\": [\n            \"src\"\n        ],\n        \"excludes\": [\n            \"fixtures\",\n            \"src/deep_clone.php\",\n            \"src/Bridge\",\n            \"src/FileLocator/DefaultFileLocator.php\",\n            \"src/FixtureBuilder/Denormalizer/Fixture/Chainable/RangeNameDenormalizer.php\",\n            \"src/Generator/Resolver/Parameter/Chainable/RecursiveParameterResolver.php\",\n            \"tests\",\n            \"vendor\"\n        ]\n    },\n    \"phpUnit\": {\n        \"customPath\": \"./bin/phpunit\"\n    },\n    \"timeout\": 10,\n    \"logs\": {\n        \"text\": \"dist/infection.txt\"\n    }\n}\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 1.962890625,
          "content": "parameters:\n    paths:\n        - src\n        - tests\n    excludePaths:\n        - fixtures/Bridge\n        - src/Bridge\n        - tests/Bridge\n        - src/Generator/Resolver/FixtureSet/FakeFixtureSetResolver.php\n    level: 3\n    ignoreErrors:\n        # To fix at some point\n        - path: src/Throwable/Exception/FileLocator/FileNotFoundException.php\n          message: '#Unsafe usage of new static#'\n\n        - path: src/Generator/Resolver/Parameter/Chainable/ArrayParameterResolver.php\n          message: '#ParameterResolverInterface::resolve\\(\\) invoked with 4 parameters, 3 required#'\n\n        - path: src/Generator/Resolver/Parameter/Chainable/RecursiveParameterResolver.php\n          message: '#ParameterResolverInterface::resolve\\(\\) invoked with 4 parameters, 3 required#'\n\n        - path: src/Generator/Resolver/Parameter/Chainable/StringParameterResolver.php\n          message: '#ParameterResolverInterface::resolve\\(\\) invoked with 4 parameters, 3 required#'\n\n        - path: src/Generator/Resolver/Parameter/ParameterResolverRegistry.php\n          message: '#ParameterResolverInterface::resolve\\(\\) invoked with 4 parameters, 3 required#'\n\n        - path: src/Generator/Resolver/Parameter/SimpleParameterBagResolver.php\n          message: '#ParameterResolverInterface::resolve\\(\\) invoked with 4 parameters, 3 required#'\n\n        - path: src/FixtureBuilder/ExpressionLanguage/Parser/TokenParser/Chainable/AbstractChainableParserAwareParser.php\n          message: '#Unsafe usage of new static#'\n        - path: src/FixtureBuilder/ExpressionLanguage/Parser/TokenParser/Chainable/AbstractChainableParserAwareParser.php\n          message: '#::parse\\(\\)#'\n\n\n        # False positives\n        - path: tests/Loader/LoaderIntegrationTest.php\n          message: '#MagicCallDummy::setMagicProperty#'\n        - path: tests/Loader/LoaderIntegrationTest.php\n          message: '#Undefined variable: \\$s\\d+#'\n        - path: tests/*Test.php\n          message: '#Call to an undefined method Prophecy\\\\Prophecy#'\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 3.4248046875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n  ~ This file is part of the Alice package.\n  ~\n  ~ (c) Nelmio <hello@nelm.io>\n  ~\n  ~ For the full copyright and license information, please view the LICENSE\n  ~ file that was distributed with this source code.\n  -->\n\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"./vendor/phpunit/phpunit/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\"\n         enforceTimeLimit=\"true\"\n         beStrictAboutTestsThatDoNotTestAnything=\"false\"\n         executionOrder=\"random\">\n\n    <php>\n        <env name=\"SYMFONY_DEPRECATIONS_HELPER\" value=\"max[self]=0\"/>\n    </php>\n\n    <listeners>\n        <listener class=\"Symfony\\Bridge\\PhpUnit\\SymfonyTestsListener\"/>\n    </listeners>\n\n    <coverage>\n        <include>\n            <directory>src</directory>\n        </include>\n        <exclude>\n            <directory>src/Bridge</directory>\n            <file>src/deep_clone.php</file>\n        </exclude>\n\n        <report>\n            <clover outputFile=\"dist/clover.xml\"/>\n        </report>\n    </coverage>\n\n    <testsuites>\n        <testsuite name=\"Dependent tests\">\n            <file>tests/Definition/PropertyTest.php</file>\n            <file>tests/Definition/PropertyBagTest.php</file>\n            <file>tests/Definition/MethodCallBagTest.php</file>\n            <file>tests/Definition/SpecificationBagTest.php</file>\n            <file>tests/Definition/FlagBagTest.php</file>\n            <file>tests/Definition/Fixture/SimpleFixtureTest.php</file>\n            <file>tests/Definition/Fixture/SimpleFixtureWithFlagsTest.php</file>\n            <file>tests/Definition/Fixture/TemplatingFixtureTest.php</file>\n            <file>tests/Definition/ServiceReference/FixtureReferenceTest.php</file>\n            <file>tests/Definition/Fixture/TemplatingTest.php</file>\n            <file>tests/Definition/MethodCall/OptionalMethodCallTest.php</file>\n            <file>tests/Definition/Value/FunctionCallValueTest.php</file>\n            <file>tests/Definition/Value/FixtureMethodCallValueTest.php</file>\n            <file>tests/Definition/Value/FixtureReferenceValueTest.php</file>\n            <file>tests/Definition/Value/FixturePropertyValueTest.php</file>\n            <file>tests/Definition/Value/FixturePropertyValueTest.php</file>\n            <file>tests/Definition/Value/UniqueValueTest.php</file>\n            <file>tests/ParameterTest.php</file>\n            <file>tests/ParameterBagTest.php</file>\n            <file>tests/FixtureBagTest.php</file>\n            <file>tests/Definition/Object/SimpleObjectTest.php</file>\n            <file>tests/ObjectBagTest.php</file>\n            <file>tests/ObjectSetTest.php</file>\n            <file>tests/FixtureSetTest.php</file>\n            <file>tests/FixtureBuilder/BareFixtureSetTest.php</file>\n            <file>tests/Generator/ResolvedFixtureSetTest.php</file>\n            <file>tests/Generator/ResolvedValueWithFixtureSetTest.php</file>\n            <file>tests/Generator/Resolver/Fixture/TemplatingFixtureBagTest.php</file>\n            <file>tests/Generator/Resolver/UniqueValuesPoolTest.php</file>\n            <file>tests/FixtureBuilder/ExpressionLanguage/TokenTypeTest.php</file>\n            <file>tests/FixtureBuilder/ExpressionLanguage/TokenTest.php</file>\n        </testsuite>\n        <testsuite name=\"Independent tests\">\n            <directory>tests</directory>\n            <exclude>tests/Bridge</exclude>\n        </testsuite>\n    </testsuites>\n</phpunit>\n"
        },
        {
          "name": "phpunit_symfony.xml.dist",
          "type": "blob",
          "size": 1.09765625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n  ~ This file is part of the Alice package.\n  ~\n  ~ (c) Nelmio <hello@nelm.io>\n  ~\n  ~ For the full copyright and license information, please view the LICENSE\n  ~ file that was distributed with this source code.\n  -->\n\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"./vendor-bin/symfony/vendor/phpunit/phpunit/phpunit.xsd\"\n         bootstrap=\"vendor-bin/symfony/vendor/autoload.php\"\n         colors=\"true\"\n         beStrictAboutTestsThatDoNotTestAnything=\"false\"\n         enforceTimeLimit=\"true\"\n         executionOrder=\"random\"\n>\n\n    <php>\n        <env name=\"SYMFONY_DEPRECATIONS_HELPER\" value=\"max[self]=0\" />\n    </php>\n\n    <listeners>\n        <listener class=\"Symfony\\Bridge\\PhpUnit\\SymfonyTestsListener\" />\n    </listeners>\n\n    <testsuites>\n        <testsuite name=\"Independent tests\">\n            <directory>tests/Bridge/Symfony</directory>\n        </testsuite>\n    </testsuites>\n\n    <coverage>\n        <include>\n            <directory>src/Bridge/Symfony</directory>\n        </include>\n    </coverage>\n</phpunit>\n"
        },
        {
          "name": "profiling",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor-bin",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}