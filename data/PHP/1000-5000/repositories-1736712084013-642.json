{
  "metadata": {
    "timestamp": 1736712084013,
    "page": 642,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spatie/opening-hours",
      "stars": 1657,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3046875,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3525390625,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n# Ignore all test and documentation with \"export-ignore\".\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/.travis.yml        export-ignore\n/phpunit.xml.dist   export-ignore\n/.scrutinizer.yml   export-ignore\n/tests              export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0537109375,
          "content": ".idea\nbuild\ncomposer.lock\ncoverage\ndocs\nvendor\n*.cache\n"
        },
        {
          "name": ".multi-tester.yml",
          "type": "blob",
          "size": 0.0576171875,
          "content": "cmixin/business-time:\n  install: default\n  script: default\n"
        },
        {
          "name": ".scrutinizer.yml",
          "type": "blob",
          "size": 0.6552734375,
          "content": "filter:\n  excluded_paths: [tests/*]\n\nchecks:\n  php:\n    remove_extra_empty_lines: true\n    remove_php_closing_tag: true\n    remove_trailing_whitespace: true\n    fix_use_statements:\n      remove_unused: true\n      preserve_multiple: false\n      preserve_blanklines: true\n      order_alphabetically: true\n    fix_php_opening_tag: true\n    fix_linefeed: true\n    fix_line_ending: true\n    fix_identation_4spaces: true\n    fix_doc_comments: true\n\nbuild:\n  nodes:\n    coverage:\n      tests:\n        override:\n          - command: vendor/bin/phpunit --coverage-text --coverage-clover=clover.xml\n            coverage:\n              file: clover.xml\n              format: clover\n"
        },
        {
          "name": ".styleci.yml",
          "type": "blob",
          "size": 0.015625,
          "content": "preset: laravel\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 5.552734375,
          "content": "# Changelog\n\nAll notable changes to `opening-hours` will be documented in this file\n\n## 4.0.0 - upcoming\n\n- Replace `getData()` with readonly property `->data`\n\n## 3.0.0 - 2023-11-12\n\n- Add `Time::date()` method\n- Add `DateTimeRange` class\n- Add ranges support via `to` or `-` separator\n- Deprecate `fill()` and `setData()`\n- Remove `setFilters()`\n\n## 2.41.0 - 2023-06-02\n\n- Cap holidays check to end date when calculating diff\n\n## 2.13.0 - 2022-08-07\n\n- Make comparison microsecond-precise\n\n## 2.12.0 - 2022-07-24\n\n- Apply timezone for all methods and both input/output\n\n## 2.11.3 - 2022-07-23\n\n- Copy non immutable dates to apply timezone\n\n## 2.11.2 - 2021-12-09\n\n- Add array-shape create() PHPDoc\n\n## 2.11.1 - 2021-12-04\n\n- Fix compatibility with PHP 8.1\n\n## 2.11.0 - 2021-10-16\n\n- Add dateTimeClass option to use other class for date objects\n\n## 2.10.1 - 2020-12-10\n\n- Fix \"hours\" merge in mergeOverlappingRanges\n\n## 2.10.0 - 2020-11-06\n\n- Add \"hours\" key support in mergeOverlappingRanges\n\n## 2.9.1 - 2020-10-15\n\n- Use OpeningHours timezone for isOpenOn()\n\n## 2.9.0 - 2020-09-03\n\n- Allow `isOpenOn()` to take date string as parameter\n\n## 2.8.0 - 2020-06-19\n\n- Add `Time::diff()` methods\n\n## 2.7.2 - 2020-06-19\n\n- Fix support of data/filters/overflow with\n  `OpeningHours::createAndMergeOverlappingRanges()` and\n  `OpeningHours::mergeOverlappingRanges()`\n\n## 2.7.1 - 2020-05-30\n\n- Added `InvalidTimezone` exception\n\n## 2.7.0 - 2019-08-27\n\n- Added `forWeekConsecutiveDays()` method\n\n## 2.6.0 - 2019-07-18\n\n- Allowed to retrieve current and previous opening hours\n- Added `previousOpen()`\n- Added `previousClose()`\n- Added `currentOpenRange()`\n- Added `currentOpenRangeStart()`\n- Added `currentOpenRangeEnd()`\n\n## 2.5.0 - 2019-06-19\n\n- Allowed [#128](https://github.com/spatie/opening-hours/issues/128) un-ordered ranges\n\n## 2.4.1 - 2019-06-19\n\n- Added [#121](https://github.com/spatie/opening-hours/issues/121) timezone supporrt in `TimeRange::format()`\n\n## 2.4.0 - 2019-06-19\n\n- Added [#121](https://github.com/spatie/opening-hours/issues/121) custom format and timezone support in `asStructuredData()`\n\n## 2.3.3 - 2019-06-15\n\n- Fixed merge when last range of day ends with `24:00`\n\n## 2.3.2 - 2019-06-10\n\n- Fixed [#115](https://github.com/spatie/opening-hours/issues/115) return `24:00` when `Time::fromString('24:00')` is casted to string\n\n## 2.3.1 - 2019-06-07\n\n- Added a `MaximumLimitExceeded` exception to prevent infinite loop\n\n## 2.3.0 - 2019-06-05\n\n⚠ TimeRange no longer return true on containsTime for times overflowing next day.\nOverflow is now calculated at the day level (OpeningHoursForDay).\n\n- Added `OpeningHoursForDay::isOpenAtNight()`\n- Added `TimeRange::overflowsNextDay()`\n\n## 2.2.1 - 2019-06-04\n\n- Fixed [#111](https://github.com/spatie/opening-hours/issues/111) overflow with simple ranges and add tests\n\n## 2.2.0 - 2019-05-07\n\n- Allowed opening hours overflowing on the next day by passing `'overflow' => true` option in array definition\n\n## 2.1.2 - 2019-03-14\n\n- Fixed [#98](https://github.com/spatie/opening-hours/issues/98) Set precise time bounds\n\n## 2.1.1 - 2019-02-22\n\n- Fixed [#95](https://github.com/spatie/opening-hours/issues/95) Handle hours/data in any order\n\n## 2.1.0 - 2019-02-18\n\n- Fixed [#88](https://github.com/spatie/opening-hours/issues/88) Opening hours across Midnight\n- Fixed [#89](https://github.com/spatie/opening-hours/issues/89) Data support for next open hours\n- Implemented [#93](https://github.com/spatie/opening-hours/issues/93) Enable PHP 8\n\n## 2.0.0 - 2018-12-13\n\n- Added support for immutable dates\n- Allowed to add meta-data to global/exceptions config, days config, ranges settings via `setData()` and `getData()`\n- Allowed dynamic opening hours settings\n- Added `TimeRange::fromArray()` and `TimeRange::fromDefinition()` (to support array of hours+data or string[] or string)\n- Added `setFilters()` and `getFilters()`\n\n⚠ Breaking changes:\n- `nextOpen()` and `nextClose()` return type changed for `DateTimeInterface` as it can now return `DateTimeImmutable` too\n- `toDateTime()` changed both input type and return type for `DateTimeInterface` as it can now take and return `DateTimeImmutable` too\n\n## 1.9.0 - 2018-12-07\n\n- Allowed to merge overlapping hours [#43](https://github.com/spatie/opening-hours/issues/43)\n- Fixed `nextOpen()` and `nextClose()` consecutive calls [#73](https://github.com/spatie/opening-hours/issues/73)\n\n## 1.8.1 - 2018-10-18\n\n- Added start time to overspilling timeranges\n\n## 1.8.0 - 2018-09-17\n- Added `nextClose`\n\n## 1.7.0 - 2018-08-02\n- Added additional helpers on `Time`\n\n## 1.6.0 - 2018-03-26\n- Added the ability to pass a `DateTime` instance to mutate to `Time::toDateTime`\n\n## 1.5.0 - 2018-02-26\n- Added `OpeningHours::forWeekCombined()`\n\n## 1.4.0 - 2017-09-15\n- Added the ability to add recurring exceptions\n\n## 1.3.1 - 2017-09-13\n- Fixed bug where checking on times starting at midnight would cause an infinite loop\n\n## 1.3.0 - 2017-06-01\n- Added `regularClosingDays`, `regularClosingDaysISO` and `exceptionalClosingDates` methods\n\n## 1.2.0 - 2017-01-03\n- Added `asStructuredData` to retrieve the opening hours as a Schema.org structured data array\n- Added `nextOpen` method to determine the next time the business will be open\n- Added utility methods: `OpeningHours::map`, `OpeningHours::flatMap`, `OpeningHours::mapExceptions`, `OpeningHours::flatMapExceptions`,`OpeningHoursForDay::map` and `OpeningHoursForDay::empty`\n\n## 1.1.0 - 2016-11-09\n- Added timezone support\n\n## 1.0.3 - 2016-10-18\n- `isClosedOn` fix\n\n## 1.0.2 - 2016-10-13\n\n- Fixed missing import in `Time` class\n\n## 1.0.1 - 2016-10-13\n\n- Replaced `DateTime` by `DateTimeInterface`\n\n## 1.0.0 - 2016-10-07\n\n- First release\n\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.09765625,
          "content": "# The MIT License (MIT)\n\nCopyright (c) Spatie bvba <info@spatie.be>\n\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> of this software and associated documentation files (the \"Software\"), to deal\n> in the Software without restriction, including without limitation the rights\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> copies of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in\n> all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n> THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 25.7939453125,
          "content": "\n[<img src=\"https://github-ads.s3.eu-central-1.amazonaws.com/support-ukraine.svg?t=1\" />](https://supportukrainenow.org)\n\n# A helper to query and format a set of opening hours\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/spatie/opening-hours.svg?style=flat-square)](https://packagist.org/packages/spatie/opening-hours)\n[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE.md)\n[![Tests](https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fspatie%2Fopening-hours%2Fbadge&style=flat-square&label=Build&logo=none)](https://actions-badge.atrox.dev/spatie/opening-hours/goto)\n[![Coverage](https://img.shields.io/codecov/c/github/spatie/opening-hours.svg?style=flat-square)](https://codecov.io/github/spatie/opening-hours?branch=master)\n[![Quality Score](https://img.shields.io/scrutinizer/g/spatie/opening-hours.svg?style=flat-square)](https://scrutinizer-ci.com/g/spatie/opening-hours)\n[![StyleCI](https://styleci.io/repos/69368104/shield?branch=master)](https://styleci.io/repos/69368104)\n[![Total Downloads](https://img.shields.io/packagist/dt/spatie/opening-hours.svg?style=flat-square)](https://packagist.org/packages/spatie/opening-hours)\n\nWith `spatie/opening-hours` you create an object that describes a business' opening hours, which you can query for `open` or `closed` on days or specific dates, or use to present the times per day.\n\n`spatie/opening-hours` can be used directly on [Carbon](https://carbon.nesbot.com/) thanks\nto [cmixin/business-time](https://github.com/kylekatarnls/business-time) so you can benefit\nopening hours features directly on your enhanced date objects.\n\nA set of opening hours is created by passing in a regular schedule, and a list of exceptions.\n\n```php\n// Add the use at the top of each file where you want to use the OpeningHours class:\nuse Spatie\\OpeningHours\\OpeningHours;\n\n$openingHours = OpeningHours::create([\n    'monday'     => ['09:00-12:00', '13:00-18:00'],\n    'tuesday'    => ['09:00-12:00', '13:00-18:00'],\n    'wednesday'  => ['09:00-12:00'],\n    'thursday'   => ['09:00-12:00', '13:00-18:00'],\n    'friday'     => ['09:00-12:00', '13:00-20:00'],\n    'saturday'   => ['09:00-12:00', '13:00-16:00'],\n    'sunday'     => [],\n    'exceptions' => [\n        '2016-11-11' => ['09:00-12:00'],\n        '2016-12-25' => [],\n        '01-01'      => [],                // Recurring on each 1st of January\n        '12-25'      => ['09:00-12:00'],   // Recurring on each 25th of December\n    ],\n]);\n\n// This will allow you to display things like:\n\n$now = new DateTime('now');\n$range = $openingHours->currentOpenRange($now);\n\nif ($range) {\n    echo \"It's open since \".$range->start().\"\\n\";\n    echo \"It will close at \".$range->end().\"\\n\";\n} else {\n    echo \"It's closed since \".$openingHours->previousClose($now)->format('l H:i').\"\\n\";\n    echo \"It will re-open at \".$openingHours->nextOpen($now)->format('l H:i').\"\\n\";\n}\n```\n\nThe object can be queried for a day in the week, which will return a result based on the regular schedule:\n\n```php\n// Open on Mondays:\n$openingHours->isOpenOn('monday'); // true\n\n// Closed on Sundays:\n$openingHours->isOpenOn('sunday'); // false\n```\n\nIt can also be queried for a specific date and time:\n\n```php\n// Closed because it's after hours:\n$openingHours->isOpenAt(new DateTime('2016-09-26 19:00:00')); // false\n\n// Closed because Christmas was set as an exception\n$openingHours->isOpenOn('2016-12-25'); // false\n```\n\nIt can also return arrays of opening hours for a week or a day:\n\n```php\n// OpeningHoursForDay object for the regular schedule\n$openingHours->forDay('monday');\n\n// OpeningHoursForDay[] for the regular schedule, keyed by day name\n$openingHours->forWeek();\n\n// Array of day with same schedule for the regular schedule, keyed by day name, days combined by working hours\n$openingHours->forWeekCombined();\n\n// OpeningHoursForDay object for a specific day\n$openingHours->forDate(new DateTime('2016-12-25'));\n\n// OpeningHoursForDay[] of all exceptions, keyed by date\n$openingHours->exceptions();\n```\n\nOn construction, you can set a flag for overflowing times across days. For example, for a nightclub opens until 3am on Friday and Saturday:\n\n```php\n$openingHours = \\Spatie\\OpeningHours\\OpeningHours::create([\n    'overflow' => true,\n    'friday'   => ['20:00-03:00'],\n    'saturday' => ['20:00-03:00'],\n], null);\n```\n\nThis allows the API to further at previous day's data to check if the opening hours are open from its time range. \n\nYou can add data in definitions then retrieve them:\n\n```php\n$openingHours = OpeningHours::create([\n    'monday' => [\n        'data' => 'Typical Monday',\n        '09:00-12:00',\n        '13:00-18:00',\n    ],\n    'tuesday' => [\n        '09:00-12:00',\n        '13:00-18:00',\n        [\n            '19:00-21:00',\n            'data' => 'Extra on Tuesday evening',\n        ],\n    ],\n    'exceptions' => [\n        '2016-12-25' => [\n            'data' => 'Closed for Christmas',\n        ],\n    ],\n]);\n\necho $openingHours->forDay('monday')->data; // Typical Monday\necho $openingHours->forDate(new DateTime('2016-12-25'))->data; // Closed for Christmas\necho $openingHours->forDay('tuesday')[2]->data; // Extra on Tuesday evening\n```\n\nIn the example above, data are strings but it can be any kind of value. So you can embed multiple properties in an array.\n\nFor structure convenience, the data-hours couple can be a fully-associative array, so the example above is strictly equivalent to the following:\n\n```php\n$openingHours = OpeningHours::create([\n    'monday' => [\n        'hours' => [\n            '09:00-12:00',\n            '13:00-18:00',\n        ],\n        'data' => 'Typical Monday',\n    ],\n    'tuesday' => [\n        ['hours' => '09:00-12:00'],\n        ['hours' => '13:00-18:00'],\n        ['hours' => '19:00-21:00', 'data' => 'Extra on Tuesday evening'],\n    ],\n    // Open by night from Wednesday 22h to Thursday 7h:\n    'wednesday' => ['22:00-24:00'], // use the special \"24:00\" to reach midnight included\n    'thursday' => ['00:00-07:00'],\n    'exceptions' => [\n        '2016-12-25' => [\n            'hours' => [],\n            'data'  => 'Closed for Christmas',\n        ],\n    ],\n]);\n```\n\nYou can use the separator `to` to specify multiple days at once, for the week or for exceptions:\n\n```php\n$openingHours = OpeningHours::create([\n    'monday to friday' => ['09:00-19:00'],\n    'saturday to sunday' => [],\n    'exceptions' => [\n        // Every year\n        '12-24 to 12-26' => [\n            'hours' => [],\n            'data'  => 'Holidays',\n        ],\n        // Only happening in 2024\n        '2024-06-25 to 2024-07-01' => [\n            'hours' => [],\n            'data'  => 'Closed for works',\n        ],\n    ],\n]);\n```\n\nThe last structure tool is the filter, it allows you to pass closures (or callable function/method reference) that take a date as a parameter and returns the settings for the given date.\n\n```php\n$openingHours = OpeningHours::create([\n    'monday' => [\n       '09:00-12:00',\n    ],\n    'filters' => [\n        function ($date) {\n            $year         = intval($date->format('Y'));\n            $easterMonday = new DateTimeImmutable('2018-03-21 +'.(easter_days($year) + 1).'days');\n            if ($date->format('m-d') === $easterMonday->format('m-d')) {\n                return []; // Closed on Easter Monday\n                // Any valid exception-array can be returned here (range of hours, with or without data)\n            }\n            // Else the filter does not apply to the given date\n        },\n    ],\n]);\n```\n\nIf a callable is found in the `\"exceptions\"` property, it will be added automatically to filters so you can mix filters and exceptions both in the **exceptions** array. The first filter that returns a non-null value will have precedence over the next filters and the **filters** array has precedence over the filters inside the **exceptions** array.\n\nWarning: We will loop on all filters for each date from which we need to retrieve opening hours and can neither predicate nor cache the result (can be a random function) so you must be careful with filters, too many filters or long process inside filters can have a significant impact on the performance.\n\nIt can also return the next open or close `DateTime` from a given `DateTime`.\n\n```php\n// The next open datetime is tomorrow morning, because we’re closed on 25th of December.\n$nextOpen = $openingHours->nextOpen(new DateTime('2016-12-25 10:00:00')); // 2016-12-26 09:00:00\n\n// The next open datetime is this afternoon, after the lunch break.\n$nextOpen = $openingHours->nextOpen(new DateTime('2016-12-24 11:00:00')); // 2016-12-24 13:00:00\n\n\n// The next close datetime is at noon.\n$nextClose = $openingHours->nextClose(new DateTime('2016-12-24 10:00:00')); // 2016-12-24 12:00:00\n\n// The next close datetime is tomorrow at noon, because we’re closed on 25th of December.\n$nextClose = $openingHours->nextClose(new DateTime('2016-12-25 15:00:00')); // 2016-12-26 12:00:00\n```\n\nRead the usage section for the full api.\n\nSpatie is a webdesign agency based in Antwerp, Belgium. You'll find an overview of all our open source projects [on our website](https://spatie.be/opensource).\n\n## Support us\n\n[<img src=\"https://github-ads.s3.eu-central-1.amazonaws.com/opening-hours.jpg?t=1\" width=\"419px\" />](https://spatie.be/github-ad-click/opening-hours)\n\nWe invest a lot of resources into creating [best in class open source packages](https://spatie.be/open-source). You can support us by [buying one of our paid products](https://spatie.be/open-source/support-us).\n\nWe highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You'll find our address on [our contact page](https://spatie.be/about-us). We publish all received postcards on [our virtual postcard wall](https://spatie.be/open-source/postcards).\n\n## Installation\n\nYou can install the package via composer:\n\n``` bash\ncomposer require spatie/opening-hours\n```\n\n## Usage\n\nThe package should only be used through the `OpeningHours` class. There are also three value object classes used throughout, `Time`, which represents a single time, `TimeRange`, which represents a period with a start and an end, and `openingHoursForDay`, which represents a set of `TimeRange`s which can't overlap.\n\n### `Spatie\\OpeningHours\\OpeningHours`\n\n#### `OpeningHours::create(array $data, $timezone = null, $toutputTimezone = null): Spatie\\OpeningHours\\OpeningHours`\n\nStatic factory method to fill the set of opening hours.\n\n```php\n$openingHours = OpeningHours::create([\n    'monday' => ['09:00-12:00', '13:00-18:00'],\n    // ...\n]);\n```\n\nIf no timezone is specified, `OpeningHours` will just assume you always\npass `DateTime` objects that have already the timezone matching your schedule.\n\nIf you pass a `$timezone` as a second argument or via the array-key `'timezone'`\n(it can be either a `DateTimeZone` object or a `string`), then passed dates will\nbe converted to this timezone at the beginning of each method, then if the method\nreturn a date object (such as `nextOpen`, `nextClose`, `previousOpen`,\n`previousClose`, `currentOpenRangeStart` or `currentOpenRangeEnd`), then it's\nconverted back to original timezone before output so the object can reflect\na moment in user local time while `OpeningHours` can stick in its own business\ntimezone.\n\nAlternatively you can also specify both input and output timezone (using second\nand third argument) or using an array:\n```php\n$openingHours = OpeningHours::create([\n    'monday' => ['09:00-12:00', '13:00-18:00'],\n    'timezone' => [\n        'input' => 'America/New_York',\n        'output' => 'Europe/Oslo',\n    ],\n]);\n```\n\n#### `OpeningHours::mergeOverlappingRanges(array $schedule) : array`\n\nFor safety sake, creating `OpeningHours` object with overlapping ranges will throw an exception unless you pass explicitly `'overflow' => true,` in the opening hours array definition. You can also explicitly merge them.\n\n```php\n$ranges = [\n  'monday' => ['08:00-11:00', '10:00-12:00'],\n];\n$mergedRanges = OpeningHours::mergeOverlappingRanges($ranges); // Monday becomes ['08:00-12:00']\n\nOpeningHours::create($mergedRanges);\n// Or use the following shortcut to create from ranges that possibly overlap:\nOpeningHours::createAndMergeOverlappingRanges($ranges);\n```\n\nNot all days are mandatory, if a day is missing, it will be set as closed.\n\n#### `OpeningHours::fill(array $data): Spatie\\OpeningHours\\OpeningHours`\n\nThe same as `create`, but non-static.\n\n```php\n$openingHours = (new OpeningHours)->fill([\n    'monday' => ['09:00-12:00', '13:00-18:00'],\n    // ...\n]);\n```\n\n#### `OpeningHours::forWeek(): Spatie\\OpeningHours\\OpeningHoursForDay[]`\n\nReturns an array of `OpeningHoursForDay` objects for a regular week.\n\n```php\n$openingHours->forWeek();\n```\n\n#### `OpeningHours::forWeekCombined(): array`\n\nReturns an array of days. Array key is first day with same hours, array values are days that have the same working hours and `OpeningHoursForDay` object.\n\n```php\n$openingHours->forWeekCombined();\n```\n\n#### `OpeningHours::forWeekConsecutiveDays(): array`\n\nReturns an array of concatenated days, adjacent days with the same hours. Array key is first day with same hours, array values are days that have the same working hours and `OpeningHoursForDay` object.\n\n*Warning*: consecutive days are considered from Monday to Sunday without looping (Monday is not consecutive to Sunday) no matter the days order in initial data.\n\n```php\n$openingHours->forWeekConsecutiveDays();\n```\n\n#### `OpeningHours::forDay(string $day): Spatie\\OpeningHours\\OpeningHoursForDay`\n\nReturns an `OpeningHoursForDay` object for a regular day. A day is lowercase string of the english day name.\n\n```php\n$openingHours->forDay('monday');\n```\n\n#### `OpeningHours::forDate(DateTimeInterface $dateTime): Spatie\\OpeningHours\\OpeningHoursForDay`\n\nReturns an `OpeningHoursForDay` object for a specific date. It looks for an exception on that day, and otherwise it returns the opening hours based on the regular schedule.\n\n```php\n$openingHours->forDate(new DateTime('2016-12-25'));\n```\n\n#### `OpeningHours::exceptions(): Spatie\\OpeningHours\\OpeningHoursForDay[]`\n\nReturns an array of all `OpeningHoursForDay` objects for exceptions, keyed by a `Y-m-d` date string.\n\n```php\n$openingHours->exceptions();\n```\n\n#### `OpeningHours::isOpenOn(string $day): bool`\n\nChecks if the business is open (contains at least 1 range of open hours) on a day in the regular schedule.\n\n```php\n$openingHours->isOpenOn('saturday');\n```\n\nIf the given string is a date, it will check if it's open (contains at least 1 range of open hours) considering\nboth regular day schedule and possible exceptions.\n\n```php\n$openingHours->isOpenOn('2020-09-03');\n$openingHours->isOpenOn('09-03'); // If year is omitted, current year is used instead\n```\n\n#### `OpeningHours::isClosedOn(string $day): bool`\n\nChecks if the business is closed on a day in the regular schedule.\n\n```php\n$openingHours->isClosedOn('sunday');\n```\n\n#### `OpeningHours::isOpenAt(DateTimeInterface $dateTime): bool`\n\nChecks if the business is open on a specific day, at a specific time.\n\n```php\n$openingHours->isOpenAt(new DateTime('2016-26-09 20:00'));\n```\n\n#### `OpeningHours::isClosedAt(DateTimeInterface $dateTime): bool`\n\nChecks if the business is closed on a specific day, at a specific time.\n\n```php\n$openingHours->isClosedAt(new DateTime('2016-26-09 20:00'));\n```\n\n#### `OpeningHours::isOpen(): bool`\n\nChecks if the business is open right now.\n\n```php\n$openingHours->isOpen();\n```\n\n#### `OpeningHours::isClosed(): bool`\n\nChecks if the business is closed right now.\n\n```php\n$openingHours->isClosed();\n```\n\n#### `OpeningHours::isAlwaysOpen(): bool`\n\nChecks if the business is open 24/7, has no exceptions and no filters.\n\n```php\nif ($openingHours->isAlwaysOpen()) {\n    echo 'This business is open all day long every day.';\n}\n```\n\n#### `OpeningHours::isAlwaysClosed(): bool`\n\nChecks if the business is never open, has no exceptions and no filters.\n\n`OpeningHours` accept empty array or list with every week day empty with no prejudices.\n\nIf it's not a valid state in your domain, you should use this method to throw an exception\nor show an error.\n\n```php\nif ($openingHours->isAlwaysClosed()) {\n    throw new RuntimeException('Opening hours missing');\n}\n```\n\n#### `OpeningHours::nextOpen`\n\n```php\nOpeningHours::nextOpen(\n    ?DateTimeInterface $dateTime = null,\n    ?DateTimeInterface $searchUntil = null,\n    ?DateTimeInterface $cap = null,\n) : DateTimeInterface`\n```\n\nReturns next open `DateTime` from the given `DateTime` (`$dateTime` or from now if this parameter is null or omitted).\n\nIf a `DateTimeImmutable` object is passed, a `DateTimeImmutable` object is returned.\n\nSet `$searchUntil` to a date to throw an exception if no open time can be found before this moment.\n\nSet `$cap` to a date so if no open time can be found before this moment, `$cap` is returned.\n\n```php\n$openingHours->nextOpen(new DateTime('2016-12-24 11:00:00'));\n```\n\n#### `OpeningHours::nextClose`\n\n```php\nOpeningHours::nextClose(\n    ?DateTimeInterface $dateTime = null,\n    ?DateTimeInterface $searchUntil = null,\n    ?DateTimeInterface $cap = null,\n) : DateTimeInterface`\n```\n\nReturns next close `DateTime` from the given `DateTime` (`$dateTime` or from now if this parameter is null or omitted).\n\nIf a `DateTimeImmutable` object is passed, a `DateTimeImmutable` object is returned.\n\nSet `$searchUntil` to a date to throw an exception if no closed time can be found before this moment.\n\nSet `$cap` to a date so if no closed time can be found before this moment, `$cap` is returned.\n\nIf the schedule is always open or always closed, there is no state change to found and therefore\n`nextOpen` (but also `previousOpen`, `nextClose` and `previousClose`) will throw a `MaximumLimitExceeded`\nYou can catch it and react accordingly or you can use `isAlwaysOpen` / `isAlwaysClosed` methods\nto anticipate such case.\n\n```php\n$openingHours->nextClose(new DateTime('2016-12-24 11:00:00'));\n```\n\n#### `OpeningHours::previousOpen`\n\n```php\nOpeningHours::previousOpen(\n    ?DateTimeInterface $dateTime = null,\n    ?DateTimeInterface $searchUntil = null,\n    ?DateTimeInterface $cap = null,\n) : DateTimeInterface`\n```\n\nReturns previous open `DateTime` from the given `DateTime` (`$dateTime` or from now if this parameter is null or omitted).\n\nIf a `DateTimeImmutable` object is passed, a `DateTimeImmutable` object is returned.\n\nSet `$searchUntil` to a date to throw an exception if no open time can be found after this moment.\n\nSet `$cap` to a date so if no open time can be found after this moment, `$cap` is returned.\n\n```php\n$openingHours->previousOpen(new DateTime('2016-12-24 11:00:00'));\n```\n\n#### `OpeningHours::previousClose`\n\n```php\nOpeningHours::previousClose(\n    ?DateTimeInterface $dateTime = null,\n    ?DateTimeInterface $searchUntil = null,\n    ?DateTimeInterface $cap = null,\n) : DateTimeInterface`\n```\n\nReturns previous close `DateTime` from the given `DateTime` (`$dateTime` or from now if this parameter is null or omitted).\n\nIf a `DateTimeImmutable` object is passed, a `DateTimeImmutable` object is returned.\n\nSet `$searchUntil` to a date to throw an exception if no closed time can be found after this moment.\n\nSet `$cap` to a date so if no closed time can be found after this moment, `$cap` is returned.\n\n```php\n$openingHours->nextClose(new DateTime('2016-12-24 11:00:00'));\n```\n\n#### `OpeningHours::diffInOpenHours(DateTimeInterface $startDate, DateTimeInterface $endDate) : float`\n\nReturn the amount of open time (number of hours as a floating number) between 2 dates/times.\n\n```php\n$openingHours->diffInOpenHours(new DateTime('2016-12-24 11:00:00'), new DateTime('2016-12-24 16:34:25'));\n```\n\n#### `OpeningHours::diffInOpenMinutes(DateTimeInterface $startDate, DateTimeInterface $endDate) : float`\n\nReturn the amount of open time (number of minutes as a floating number) between 2 dates/times.\n\n#### `OpeningHours::diffInOpenSeconds(DateTimeInterface $startDate, DateTimeInterface $endDate) : float`\n\nReturn the amount of open time (number of seconds as a floating number) between 2 dates/times.\n\n#### `OpeningHours::diffInClosedHours(DateTimeInterface $startDate, DateTimeInterface $endDate) : float`\n\nReturn the amount of closed time (number of hours as a floating number) between 2 dates/times.\n\n```php\n$openingHours->diffInClosedHours(new DateTime('2016-12-24 11:00:00'), new DateTime('2016-12-24 16:34:25'));\n```\n\n#### `OpeningHours::diffInClosedMinutes(DateTimeInterface $startDate, DateTimeInterface $endDate) : float`\n\nReturn the amount of closed time (number of minutes as a floating number) between 2 dates/times.\n\n#### `OpeningHours::diffInClosedSeconds(DateTimeInterface $startDate, DateTimeInterface $endDate) : float`\n\nReturn the amount of closed time (number of seconds as a floating number) between 2 dates/times.\n\n#### `OpeningHours::currentOpenRange(DateTimeInterface $dateTime) : false | TimeRange`\n\nReturns a `Spatie\\OpeningHours\\TimeRange` instance of the current open range if the\nbusiness is open, false if the business is closed.\n\n```php\n$range = $openingHours->currentOpenRange(new DateTime('2016-12-24 11:00:00'));\n\nif ($range) {\n    echo \"It's open since \".$range->start().\"\\n\";\n    echo \"It will close at \".$range->end().\"\\n\";\n} else {\n    echo \"It's closed\";\n}\n```\n\n`start()` and `end()` methods return `Spatie\\OpeningHours\\Time` instances. `Time`\ninstances created from a date can be formatted with date information. This is useful\nfor ranges overflowing midnight:\n\n```php\n$period = $openingHours->currentOpenRange(new DateTime('2016-12-24 11:00:00'));\n\nif ($period) {\n    echo \"It's open since \".$period->start()->format('D G\\h').\"\\n\";\n    echo \"It will close at \".$period->end()->format('D G\\h').\"\\n\";\n} else {\n    echo \"It's closed\";\n}\n```\n\n#### `OpeningHours::currentOpenRangeStart(DateTimeInterface $dateTime) : false | DateTime`\n\nReturns a `DateTime` instance of the date and time since when the business is open if\nthe business is open, false if the business is closed.\n\nNote: date can be the previous day if you use night ranges.\n\n```php\n$date = $openingHours->currentOpenRangeStart(new DateTime('2016-12-24 11:00:00'));\n\nif ($date) {\n    echo \"It's open since \".$date->format('H:i');\n} else {\n    echo \"It's closed\";\n}\n```\n\n#### `OpeningHours::currentOpenRangeEnd(DateTimeInterface $dateTime) : false | DateTime`\n\nReturns a `DateTime` instance of the date and time until when the business will be open\nif the business is open, false if the business is closed.\n\nNote: date can be the next day if you use night ranges.\n\n```php\n$date = $openingHours->currentOpenRangeEnd(new DateTime('2016-12-24 11:00:00'));\n\nif ($date) {\n    echo \"It will close at \".$date->format('H:i');\n} else {\n    echo \"It's closed\";\n}\n```\n\n#### `OpeningHours::createFromStructuredData(array|string $data, $timezone = null, $outputTimezone = null): Spatie\\OpeningHours\\OpeningHours`\n\nStatic factory method to fill the set with a https://schema.org/OpeningHoursSpecification array or JSON string.\n\n`dayOfWeek` supports array of day names (Google-flavored) or array of day URLs (official schema.org specification).\n\n```php\n$openingHours = OpeningHours::createFromStructuredData('[\n    {\n        \"@type\": \"OpeningHoursSpecification\",\n        \"opens\": \"08:00\",\n        \"closes\": \"12:00\",\n        \"dayOfWeek\": [\n            \"https://schema.org/Monday\",\n            \"https://schema.org/Tuesday\",\n            \"https://schema.org/Wednesday\",\n            \"https://schema.org/Thursday\",\n            \"https://schema.org/Friday\"\n        ]\n    },\n    {\n        \"@type\": \"OpeningHoursSpecification\",\n        \"opens\": \"14:00\",\n        \"closes\": \"18:00\",\n        \"dayOfWeek\": [\n            \"Monday\",\n            \"Tuesday\",\n            \"Wednesday\",\n            \"Thursday\",\n            \"Friday\"\n        ]\n    },\n    {\n        \"@type\": \"OpeningHoursSpecification\",\n        \"opens\": \"00:00\",\n        \"closes\": \"00:00\",\n        \"validFrom\": \"2023-12-25\",\n        \"validThrough\": \"2023-12-25\"\n    }\n]');\n```\n\n#### `OpeningHours::asStructuredData(strinf $format = 'H:i', string|DateTimeZone $timezone) : array`\n\nReturns a [OpeningHoursSpecification](https://schema.org/openingHoursSpecification) as an array.\n\n```php\n$openingHours->asStructuredData();\n$openingHours->asStructuredData('H:i:s'); // Customize time format, could be 'h:i a', 'G:i', etc.\n$openingHours->asStructuredData('H:iP', '-05:00'); // Add a timezone\n// Timezone can be numeric or string like \"America/Toronto\" or a DateTimeZone instance\n// But be careful, the time is arbitrary applied on 1970-01-01, so it does not handle daylight\n// saving time, meaning Europe/Paris is always +01:00 even in summer time.\n```\n\n### `Spatie\\OpeningHours\\OpeningHoursForDay`\n\nThis class is meant as read-only. It implements `ArrayAccess`, `Countable` and `IteratorAggregate` so you can process the list of `TimeRange`s in an array-like way.\n\n### `Spatie\\OpeningHours\\TimeRange`\n\nValue object describing a period with a start and an end time. Can be cast to a string in a `H:i-H:i` format.\n\n### `Spatie\\OpeningHours\\Time`\n\nValue object describing a single time. Can be cast to a string in a `H:i` format.\n\n## Adapters\n\n### OpenStreetMap\n\nYou can convert OpenStreetMap format to `OpeningHours` object using [osm-opening-hours](https://github.com/ujamii/osm-opening-hours) (thanks to [mgrundkoetter](https://github.com/mgrundkoetter))\n\n## Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information about what has changed recently.\n\n## Testing\n\n``` bash\ncomposer test\n```\n\n## Contributing\n\nPlease see [CONTRIBUTING](https://github.com/spatie/.github/blob/main/CONTRIBUTING.md) for details.\n\n## Security\n\nIf you've found a bug regarding security please mail [security@spatie.be](mailto:security@spatie.be) instead of using the issue tracker.\n\n## Postcardware\n\nYou're free to use this package, but if it makes it to your production environment we highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using.\n\nOur address is: Spatie, Kruikstraat 22, 2018 Antwerp, Belgium.\n\nWe publish all received postcards [on our company website](https://spatie.be/en/opensource/postcards).\n\n## Credits\n\n- [Sebastian De Deyne](https://github.com/sebastiandedeyne)\n- [All Contributors](../../contributors)\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.279296875,
          "content": "{\n    \"name\": \"spatie/opening-hours\",\n    \"description\": \"A helper to query and format a set of opening hours\",\n    \"keywords\": [\n        \"spatie\",\n        \"opening-hours\",\n        \"schedule\",\n        \"opening\",\n        \"hours\"\n    ],\n    \"homepage\": \"https://github.com/spatie/opening-hours\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Sebastian De Deyne\",\n            \"email\": \"sebastian@spatie.be\",\n            \"homepage\": \"https://spatie.be\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"kylekatarnls\",\n            \"homepage\": \"https://github.com/kylekatarnls\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.2\"\n    },\n    \"require-dev\": {\n        \"kylekatarnls/multi-tester\": \"^2.5\",\n        \"phpunit/phpunit\": \"^11.2\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Spatie\\\\OpeningHours\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Spatie\\\\OpeningHours\\\\Test\\\\\": \"tests\"\n        }\n    },\n    \"scripts\": {\n        \"test\": \"vendor/bin/phpunit\"\n    },\n    \"config\": {\n        \"sort-packages\": true\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"4.x-dev\",\n            \"dev-3.x\": \"3.x-dev\",\n            \"dev-2.x\": \"2.x-dev\"\n        }\n    }\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.7021484375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.4/phpunit.xsd\"\n    bootstrap=\"vendor/autoload.php\"\n    colors=\"true\"\n    cacheDirectory=\".phpunit.cache\"\n>\n  <testsuites>\n    <testsuite name=\"Spatie Test Suite\">\n      <directory>tests</directory>\n    </testsuite>\n  </testsuites>\n  <coverage ignoreDeprecatedCodeUnits=\"true\" disableCodeCoverageIgnore=\"true\">\n    <report>\n      <html outputDirectory=\"coverage\"/>\n    </report>\n  </coverage>\n  <php>\n    <ini name=\"date.timezone\" value=\"UTC\"/>\n  </php>\n  <source>\n    <include>\n      <directory>src</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}