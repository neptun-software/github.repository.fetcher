{
  "metadata": {
    "timestamp": 1736711915290,
    "page": 313,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lorisleiva/laravel-actions",
      "stars": 2560,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.21484375,
          "content": "root = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.{yml,yaml}]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.5185546875,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n# Ignore all test and documentation with \"export-ignore\".\n/.github            export-ignore\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/.travis.yml        export-ignore\n/phpunit.xml.dist   export-ignore\n/tests              export-ignore\n/.editorconfig      export-ignore\n/.php_cs.dist       export-ignore\n/.github            export-ignore\n/psalm.xml          export-ignore\n/psalm.xml.dist     export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1181640625,
          "content": ".idea\n.php_cs\n.php_cs.cache\n.phpunit*\nbuild\ncomposer.lock\ncoverage\ndocs\nphpunit.xml\npsalm.xml\nvendor\n.php-cs-fixer.cache\n"
        },
        {
          "name": ".php_cs.dist.php",
          "type": "blob",
          "size": 1.1220703125,
          "content": "<?php\n\n$finder = Symfony\\Component\\Finder\\Finder::create()\n    ->in([\n        __DIR__ . '/src',\n        __DIR__ . '/tests',\n    ])\n    ->name('*.php')\n    ->notName('*.blade.php')\n    ->ignoreDotFiles(true)\n    ->ignoreVCS(true);\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules([\n        '@PSR2' => true,\n        'array_syntax' => ['syntax' => 'short'],\n        'ordered_imports' => ['sort_algorithm' => 'alpha'],\n        'no_unused_imports' => true,\n        'not_operator_with_successor_space' => true,\n        'trailing_comma_in_multiline' => true,\n        'phpdoc_scalar' => true,\n        'unary_operator_spaces' => true,\n        'binary_operator_spaces' => true,\n        'blank_line_before_statement' => [\n            'statements' => ['break', 'continue', 'declare', 'return', 'throw', 'try'],\n        ],\n        'phpdoc_single_line_var_spacing' => true,\n        'phpdoc_var_without_name' => true,\n        'method_argument_space' => [\n            'on_multiline' => 'ensure_fully_multiline',\n            'keep_multiple_spaces_after_comma' => true,\n        ],\n        'single_trait_insert_per_statement' => true,\n    ])\n    ->setFinder($finder);\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0712890625,
          "content": "The MIT License (MIT)\n\nCopyright (c) Loris Leiva <loris.leiva@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.423828125,
          "content": "# ⚡️ Laravel Actions\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/lorisleiva/laravel-actions.svg)](https://packagist.org/packages/lorisleiva/laravel-actions)\n[![GitHub Tests Action Status](https://img.shields.io/github/actions/workflow/status/lorisleiva/laravel-actions/run-tests.yml?branch=main)](https://github.com/lorisleiva/laravel-actions/actions?query=workflow%3ATests+branch%3Amain)\n[![Total Downloads](https://img.shields.io/packagist/dt/lorisleiva/laravel-actions.svg)](https://packagist.org/packages/lorisleiva/laravel-actions)\n\n![hero](https://user-images.githubusercontent.com/3642397/104024620-4e572400-51bb-11eb-97fc-c2692b16eaa7.png)\n\n⚡ **Classes that take care of one specific task.**\n\nThis package introduces a new way of organising the logic of your Laravel applications by focusing on the actions your applications provide.\n\nInstead of creating controllers, jobs, listeners and so on, it allows you to create a PHP class that handles a specific task and run that class as anything you want.\n\nTherefore it encourages you to switch your focus from:\n\n> \"What controllers do I need?\", \"should I make a FormRequest for this?\", \"should this run asynchronously in a job instead?\", etc.\n\nto:\n\n> \"What does my application actually do?\"\n\n## Installation\n\n```bash\ncomposer require lorisleiva/laravel-actions\n```\n\n## Documentation\n\n:books: Read the full documentation at [laravelactions.com](https://laravelactions.com/)\n\n## Basic usage\n\nCreate your first action using `php artisan make:action PublishANewArticle` and define the `asX` methods when you want your action to be running as `X`. E.g. `asController`, `asJob`, `asListener` and/or `asCommand`.\n\n``` php\nclass PublishANewArticle\n{\n    use AsAction;\n\n    public function handle(User $author, string $title, string $body): Article\n    {\n        return $author->articles()->create([\n            'title' => $title,\n            'body' => $body,\n        ]);\n    }\n\n    public function asController(Request $request): ArticleResource\n    {\n        $article = $this->handle(\n            $request->user(),\n            $request->get('title'),\n            $request->get('body'),\n        );\n\n        return new ArticleResource($article);\n    }\n\n    public function asListener(NewProductReleased $event): void\n    {\n        $this->handle(\n            $event->product->manager,\n            $event->product->name . ' Released!',\n            $event->product->description,\n        );\n    }\n}\n```\n\n### As an object\n\nNow, you can run your action as an object by using the `run` method like so:\n\n```php\nPublishANewArticle::run($author, 'My title', 'My content');\n```\n\n### As a controller\n\nSimply register your action as an invokable controller in a routes file.\n\n```php\nRoute::post('articles', PublishANewArticle::class)->middleware('auth');\n```\n\n### As a listener\n\nSimply register your action as a listener of the `NewProductReleased` event.\n\n```php\nEvent::listen(NewProductReleased::class, PublishANewArticle::class);\n```\n\nThen, the `asListener` method of your action will be called whenever the `NewProductReleased` event is dispatched.\n\n```php\nevent(new NewProductReleased($manager, 'Product title', 'Product description'));\n```\n\n### And more...\n\nOn top of running your actions as objects, controllers and listeners, Laravel Actions also supports jobs, commands and even mocking your actions in tests.\n\n📚 [Check out the full documentation to learn everything that Laravel Actions has to offer](https://laravelactions.com/).\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.763671875,
          "content": "{\n    \"name\": \"lorisleiva/laravel-actions\",\n    \"description\": \"Laravel components that take care of one specific task\",\n    \"keywords\": [\n        \"laravel\",\n        \"component\",\n        \"action\",\n        \"controller\",\n        \"job\",\n        \"object\",\n        \"command\",\n        \"listener\"\n    ],\n    \"homepage\": \"https://github.com/lorisleiva/laravel-actions\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Loris Leiva\",\n            \"email\": \"loris.leiva@gmail.com\",\n            \"homepage\": \"https://lorisleiva.com\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"illuminate/contracts\": \"^10.0|^11.0\",\n        \"lorisleiva/lody\": \"^0.5\"\n    },\n    \"require-dev\": {\n        \"orchestra/testbench\": \"^8.0|^9.0\",\n        \"pestphp/pest\": \"^1.23|^2.34\",\n        \"phpunit/phpunit\": \"^9.6|^10.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Lorisleiva\\\\Actions\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Lorisleiva\\\\Actions\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"scripts\": {\n        \"test\": \"vendor/bin/pest --colors=always\",\n        \"test-coverage\": \"vendor/bin/pest --coverage-html coverage\"\n    },\n    \"config\": {\n        \"sort-packages\": true,\n        \"allow-plugins\": {\n            \"pestphp/pest-plugin\": true\n        }\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"Lorisleiva\\\\Actions\\\\ActionServiceProvider\"\n            ],\n            \"aliases\": {\n                \"Action\": \"Lorisleiva\\\\Actions\\\\Facades\\\\Actions\"\n            }\n        }\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"funding\": [\n        {\n            \"type\": \"github\",\n            \"url\": \"https://github.com/sponsors/lorisleiva\"\n        }\n    ]\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.986328125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" backupGlobals=\"false\" bootstrap=\"vendor/autoload.php\" colors=\"true\" processIsolation=\"false\" stopOnFailure=\"false\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.5/phpunit.xsd\" cacheDirectory=\".phpunit.cache\" backupStaticProperties=\"false\">\n  <testsuites>\n    <testsuite name=\"Test Suite\">\n      <directory>tests</directory>\n    </testsuite>\n  </testsuites>\n  <coverage>\n    <report>\n      <html outputDirectory=\"build/coverage\"/>\n      <text outputFile=\"build/coverage.txt\"/>\n      <clover outputFile=\"build/logs/clover.xml\"/>\n    </report>\n  </coverage>\n  <logging>\n    <junit outputFile=\"build/report.junit.xml\"/>\n  </logging>\n  <php>\n    <env name=\"APP_ENV\" value=\"testing\"/>\n    <env name=\"DB_CONNECTION\" value=\"sqlite\"/>\n    <env name=\"DB_DATABASE\" value=\":memory:\"/>\n  </php>\n  <source>\n    <include>\n      <directory suffix=\".php\">./src</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}