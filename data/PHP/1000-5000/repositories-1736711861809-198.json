{
  "metadata": {
    "timestamp": 1736711861809,
    "page": 198,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "erikdubbelboer/phpRedisAdmin",
      "stars": 3134,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.056640625,
          "content": "config.inc.php\n*.phar\nvendor\n\n# IDEs metadata\n/nbproject/\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.263671875,
          "content": "FROM composer:2.2\n\nRUN apk add --no-cache tini tzdata\n\nWORKDIR /src/app\n\nCOPY . .\n\nRUN set -xe; \\\n    composer install; \\\n    cp includes/config.environment.inc.php includes/config.inc.php\n\nENV PORT 80\nEXPOSE 80\nENTRYPOINT [ \"sh\", \"-c\", \"tini -- php -S 0.0.0.0:$PORT\" ]\n"
        },
        {
          "name": "README.markdown",
          "type": "blob",
          "size": 3.19921875,
          "content": "phpRedisAdmin\n=============\n\nphpRedisAdmin is a simple web interface to manage [Redis](http://redis.io/)\ndatabases. It is released under the\n[Creative Commons Attribution 3.0 license](http://creativecommons.org/licenses/by/3.0/).\nThis code is being developed and maintained by [Erik Dubbelboer](https://github.com/ErikDubbelboer/).\n\nYou can send comments, patches, questions\n[here on github](https://github.com/ErikDubbelboer/phpRedisAdmin/issues)\nor to erik@dubbelboer.com.\n\n\nExample\n=======\n\nYou can find an example database at\n[http://dubbelboer.com/phpRedisAdmin/](http://dubbelboer.com/phpRedisAdmin/)\n\n\nInstalling/Configuring\n======================\n\nTo install [phpRedisAdmin](https://packagist.org/packages/erik-dubbelboer/php-redis-admin) through [composer](http://getcomposer.org/) you need to execute the following commands:\n\n```\ncurl -s http://getcomposer.org/installer | php\nphp composer.phar create-project -s dev erik-dubbelboer/php-redis-admin path/to/install\n```\n\nYou may also want to copy includes/config.sample.inc.php to includes/config.inc.php\nand edit it with your specific redis configuration.\n\nInstead of using composer, you can also do a manual install using:\n\n```\ngit clone https://github.com/ErikDubbelboer/phpRedisAdmin.git\ncd phpRedisAdmin\ngit clone https://github.com/nrk/predis.git vendor\n```\n\nDocker Image\n============\nA public [phpRedisAdmin Docker image](https://hub.docker.com/r/erikdubbelboer/phpredisadmin/) is available on Docker Hub built from the latest tag.\nThe file ```includes/config.environment.inc.php``` is used as the configuration file to allow environment variables to be used as configuration values.\nExample:\n```\ndocker run --rm -it -e REDIS_1_HOST=myredis.host -e REDIS_1_NAME=MyRedis -p 80:80 erikdubbelboer/phpredisadmin\n```\nAlso, a Docker Compose manifest with a stack for testing and development is provided. Just issue ```docker-compose up --build``` to start it and browse to http://localhost. See ```docker-compose.yml``` file for configuration details.\n\nEnvironment variables summary\n====\n\n* ``REDIS_1_HOST`` - define host of the Redis server\n* ``REDIS_1_NAME`` - define name of the Redis server\n* ``REDIS_1_PORT`` - define port of the Redis server\n* ``REDIS_1_SCHEME`` - define scheme of the Redis server (tcp or tls)\n* ``REDIS_1_AUTH`` - define password of the Redis server\n* ``REDIS_1_AUTH_FILE`` - define file containing the password of the Redis server\n* ``REDIS_1_DATABASES`` - You can modify you config to prevent phpRedisAdmin from using CONFIG command \n* ``ADMIN_USER`` - define username for user-facing Basic Auth\n* ``ADMIN_PASS`` - define password for user-facing Basic Auth\n\nTODO\n====\n\n* Encoding support for editing\n* Javascript sorting of tables\n* Better error handling\n* Move or Copy key to different server\n* Importing JSON\n* JSON export with seperate objects based on your seperator\n\n\nCredits\n=======\n\nIcons by [http://p.yusukekamiyamane.com/](http://p.yusukekamiyamane.com/) ([https://github.com/yusukekamiyamane/fugue-icons/tree/master/icons-shadowless](https://github.com/yusukekamiyamane/fugue-icons/tree/master/icons-shadowless))\n\nFavicon from [https://github.com/antirez/redis-io/blob/master/public/images/favicon.png](https://github.com/antirez/redis-io/blob/master/public/images/favicon.png)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.28515625,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 1.13.x  | :white_check_mark: |\n| 1.12.x  | :white_check_mark: |\n| < 1.12  | :x:                |\n\n## Reporting a Vulnerability\n\nVulnerabilities can be emailed to erik@dubbelboer.com\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.67578125,
          "content": "{\n    \"name\": \"erik-dubbelboer/php-redis-admin\",\n    \"description\": \"Simple web interface to manage Redis databases.\",\n    \"version\": \"1.23.0\",\n    \"license\": \"CC-BY-3.0\",\n    \"homepage\": \"https://github.com/ErikDubbelboer/phpRedisAdmin\",\n    \"authors\": [\n        {\n            \"name\": \"Erik Dubbelboer\",\n            \"email\": \"erik@dubbelboer.com\",\n            \"homepage\": \"http://blog.dubbelboer.com\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"ext-mbstring\": \"*\",\n        \"ext-json\": \"*\",\n        \"predis/predis\": \"v2.3.0\",\n        \"paragonie/random_compat\": \">=2\"\n    },\n    \"minimum-stability\": \"stable\",\n    \"target-dir\": \"ErikDubbelboer/phpRedisAdmin\"\n}\n"
        },
        {
          "name": "composer.lock",
          "type": "blob",
          "size": 4.5654296875,
          "content": "{\n    \"_readme\": [\n        \"This file locks the dependencies of your project to a known state\",\n        \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies\",\n        \"This file is @generated automatically\"\n    ],\n    \"content-hash\": \"401ff61cebe5223d003a47192d7c3d6a\",\n    \"packages\": [\n        {\n            \"name\": \"paragonie/random_compat\",\n            \"version\": \"v9.99.100\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/paragonie/random_compat.git\",\n                \"reference\": \"996434e5492cb4c3edcb9168db6fbb1359ef965a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/paragonie/random_compat/zipball/996434e5492cb4c3edcb9168db6fbb1359ef965a\",\n                \"reference\": \"996434e5492cb4c3edcb9168db6fbb1359ef965a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">= 7\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"4.*|5.*\",\n                \"vimeo/psalm\": \"^1\"\n            },\n            \"suggest\": {\n                \"ext-libsodium\": \"Provides a modern crypto API that can be used to generate random bytes.\"\n            },\n            \"type\": \"library\",\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Paragon Initiative Enterprises\",\n                    \"email\": \"security@paragonie.com\",\n                    \"homepage\": \"https://paragonie.com\"\n                }\n            ],\n            \"description\": \"PHP 5.x polyfill for random_bytes() and random_int() from PHP 7\",\n            \"keywords\": [\n                \"csprng\",\n                \"polyfill\",\n                \"pseudorandom\",\n                \"random\"\n            ],\n            \"support\": {\n                \"email\": \"info@paragonie.com\",\n                \"issues\": \"https://github.com/paragonie/random_compat/issues\",\n                \"source\": \"https://github.com/paragonie/random_compat\"\n            },\n            \"time\": \"2020-10-15T08:29:30+00:00\"\n        },\n        {\n            \"name\": \"predis/predis\",\n            \"version\": \"v2.3.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/predis/predis.git\",\n                \"reference\": \"bac46bfdb78cd6e9c7926c697012aae740cb9ec9\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/predis/predis/zipball/bac46bfdb78cd6e9c7926c697012aae740cb9ec9\",\n                \"reference\": \"bac46bfdb78cd6e9c7926c697012aae740cb9ec9\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"friendsofphp/php-cs-fixer\": \"^3.3\",\n                \"phpstan/phpstan\": \"^1.9\",\n                \"phpunit/phpunit\": \"^8.0 || ^9.4\"\n            },\n            \"suggest\": {\n                \"ext-relay\": \"Faster connection with in-memory caching (>=0.6.2)\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Predis\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Till Kr√ºss\",\n                    \"homepage\": \"https://till.im\",\n                    \"role\": \"Maintainer\"\n                }\n            ],\n            \"description\": \"A flexible and feature-complete Redis client for PHP.\",\n            \"homepage\": \"http://github.com/predis/predis\",\n            \"keywords\": [\n                \"nosql\",\n                \"predis\",\n                \"redis\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/predis/predis/issues\",\n                \"source\": \"https://github.com/predis/predis/tree/v2.3.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sponsors/tillkruss\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-11-21T20:00:02+00:00\"\n        }\n    ],\n    \"packages-dev\": [],\n    \"aliases\": [],\n    \"minimum-stability\": \"stable\",\n    \"stability-flags\": {},\n    \"prefer-stable\": false,\n    \"prefer-lowest\": false,\n    \"platform\": {\n        \"ext-mbstring\": \"*\",\n        \"ext-json\": \"*\"\n    },\n    \"platform-dev\": {},\n    \"plugin-api-version\": \"2.6.0\"\n}\n"
        },
        {
          "name": "css",
          "type": "tree",
          "content": null
        },
        {
          "name": "delete.php",
          "type": "blob",
          "size": 2.052734375,
          "content": "<?php\n\nif (!isset($_POST['post'])) {\n  die('Javascript needs to be enabled for you to delete keys.');\n}\n\nrequire_once 'includes/common.inc.php';\n\nglobal $redis;\nglobal $server;\n\nif (isset($_GET['key'])) {\n  // String\n  if (!isset($_GET['type']) || ($_GET['type'] == 'string')) {\n    // Delete the whole key.\n    $redis->del($_GET['key']);\n  }\n\n  // Hash\n  else if (($_GET['type'] == 'hash') && isset($_GET['hkey'])) {\n    // Delete only the field in the hash.\n    $redis->hDel($_GET['key'], $_GET['hkey']);\n  }\n\n  // List\n  else if (($_GET['type'] == 'list') && isset($_GET['index'])) {\n    // Lists don't have simple delete operations.\n    // You can only remove something based on a value so we set the value at the index to some random value we hope doesn't occur elsewhere in the list.\n    $value = str_rand(69);\n\n    // This code assumes $value is not present in the list. To make sure of this we would need to check the whole list and place a Watch on it to make sure the list isn't modified in between.\n    $redis->lSet($_GET['key'], $_GET['index'], $value);\n    $redis->lRem($_GET['key'], 1, $value);\n  }\n\n  // Set\n  else if (($_GET['type'] == 'set') && isset($_GET['value'])) {\n    // Removing members from a set can only be done by supplying the member.\n    $redis->sRem($_GET['key'], $_GET['value']);\n  }\n\n  // ZSet\n  else if (($_GET['type'] == 'zset') && isset($_GET['value'])) {\n    // Removing members from a zset can only be done by supplying the value.\n    $redis->zRem($_GET['key'], $_GET['value']);\n  }\n\n\n  die('?view&s='.$server['id'].'&d='.$server['db'].'&key='.urlencode($_GET['key']));\n}\n\n\nif (isset($_GET['tree'])) {\n  $keys = $redis->keys($_GET['tree'].'*');\n\n  foreach ($keys as $key) {\n    $redis->del($key);\n  }\n\n  die('?view&s='.$server['id'].'&d='.$server['db']);\n}\n\nif (isset($_GET['batch_del'])) {\n  if (empty($_POST['selected_keys'])) {\n    die('No keys to delete');\n  }\n  $keys = json_decode($_POST['selected_keys']);\n\n  foreach ($keys as $key) {\n    $redis->del($key);\n  }\n\n  die('?view&s=' . $server['id'] . '&d=' . $server['db'] . '&key=' . urlencode($keys[0]));\n}\n\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.2646484375,
          "content": "services:\n  phpredisadmin:\n    build: .\n    environment:\n      - ADMIN_USER=admin\n      - ADMIN_PASS=admin\n      - REDIS_1_HOST=redis\n      - REDIS_1_PORT=6379\n    links:\n      - redis\n    ports:\n      - \"80:80\"\n\n  redis:\n    image: redis\n    command: --loglevel verbose\n"
        },
        {
          "name": "edit.php",
          "type": "blob",
          "size": 5.82421875,
          "content": "<?php\n\nrequire_once 'includes/common.inc.php';\n\nglobal $redis, $config, $csrfToken, $server;\n\n// Are we editing or creating a new key?\n$edit = false;\n\nif (isset($_GET['key'], $_GET['type'])) {\n  if (($_GET['type'] == 'string') ||\n      (($_GET['type'] == 'hash') && isset($_GET['hkey']))  ||\n      (($_GET['type'] == 'list') && isset($_GET['index'])) ||\n      (($_GET['type'] == 'set' ) && isset($_GET['value'])) ||\n      (($_GET['type'] == 'zset') && isset($_GET['value']))) {\n    $edit = true;\n  }\n}\n\n\n\n\nif (isset($_POST['type'], $_POST['key'], $_POST['value'])) {\n  // Don't allow keys that are to long (Redis supports keys that can be way to long to put in an url).\n  if (strlen($_POST['key']) > $config['maxkeylen']) {\n    die('ERROR: Your key is to long (max length is '.$config['maxkeylen'].')');\n  }\n\n  $key   = input_convert($_POST['key']);\n  $value = input_convert($_POST['value']);\n  $value = encodeOrDecode('save', $key, $value);\n\n  if ($value === false || is_null($value)) {\n    die('ERROR: could not encode value');\n  }\n\n  // String\n  if ($_POST['type'] == 'string') {\n    $redis->set($key, $value);\n  }\n\n  // Hash\n  else if (($_POST['type'] == 'hash') && isset($_POST['hkey'])) {\n    if (strlen($_POST['hkey']) > $config['maxkeylen']) {\n      die('ERROR: Your hash key is to long (max length is '.$config['maxkeylen'].')');\n    }\n\n    if ($edit && !$redis->hExists($key, input_convert($_POST['hkey']))) {\n      $redis->hDel($key, input_convert($_GET['hkey']));\n    }\n\n    $redis->hSet($key, input_convert($_POST['hkey']), $value);\n  }\n\n  // List\n  else if (($_POST['type'] == 'list') && isset($_POST['index'])) {\n    $size = $redis->lLen($key);\n\n    if (($_POST['index'] == '') ||\n        ($_POST['index'] == $size)) {\n      // Push it at the end\n      $redis->rPush($key, $value);\n    } else if ($_POST['index'] == -1) {\n      // Push it at the start\n      $redis->lPush($key, $value);\n    } else if (($_POST['index'] >= 0) &&\n               ($_POST['index'] < $size)) {\n      // Overwrite an index\n      $redis->lSet($key, input_convert($_POST['index']), $value);\n    } else {\n      die('ERROR: Out of bounds index');\n    }\n  }\n\n  // Set\n  else if ($_POST['type'] == 'set') {\n    if ($_POST['value'] != $_POST['oldvalue']) {\n      // The only way to edit a Set value is to add it and remove the old value.\n      $redis->sRem($key, encodeOrDecode('save', $key, input_convert($_POST['oldvalue'])));\n      $redis->sAdd($key, $value);\n    }\n  }\n\n  // ZSet\n  else if (($_POST['type'] == 'zset') && isset($_POST['score']) && is_numeric($_POST['score'])) {\n    // The only way to edit a ZSet value is to add it and remove the old value.\n    $redis->zRem($key, encodeOrDecode('save', $key, input_convert($_POST['oldvalue'])));\n    $redis->zAdd($key, input_convert($_POST['score']), $value);\n  }\n\n\n\n  // Refresh the top so the key tree is updated.\n  require 'includes/header.inc.php';\n\n  ?>\n  <script>\n  top.location.href = top.location.pathname+'?view&s=<?php echo $server['id']?>&d=<?php echo $server['db']?>&key=<?php echo urlencode($_POST['key'])?>';\n  </script>\n  <?php\n\n  require 'includes/footer.inc.php';\n  die;\n}\n\n\n\n\n// Get the current value.\n$value = '';\n\nif ($edit) {\n  // String\n  if ($_GET['type'] == 'string') {\n    $value = $redis->get($_GET['key']);\n  }\n\n  // Hash\n  else if (($_GET['type'] == 'hash') && isset($_GET['hkey'])) {\n    $value = $redis->hGet($_GET['key'], $_GET['hkey']);\n  }\n\n  // List\n  else if (($_GET['type'] == 'list') && isset($_GET['index'])) {\n    $value = $redis->lIndex($_GET['key'], $_GET['index']);\n  }\n\n  // Set, ZSet\n  else if ((($_GET['type'] == 'set') || ($_GET['type'] == 'zset')) && isset($_GET['value'])) {\n    $value = $_GET['value'];\n  }\n\n  $value = encodeOrDecode('load', $_GET['key'], $value);\n}\n\n\n\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\n?>\n<h2><?php echo $edit ? 'Edit' : 'Add'?></h2>\n<form action=\"<?php echo format_html(getRelativePath('edit.php'))?>\" method=\"post\">\n<input type=\"hidden\" name=\"csrf\" value=\"<?php echo $csrfToken; ?>\" />\n\n<p>\n<label for=\"type\">Type:</label>\n<select name=\"type\" id=\"type\">\n<option value=\"string\" <?php echo (isset($_GET['type']) && ($_GET['type'] == 'string')) ? 'selected=\"selected\"' : ''?>>String</option>\n<option value=\"hash\"   <?php echo (isset($_GET['type']) && ($_GET['type'] == 'hash'  )) ? 'selected=\"selected\"' : ''?>>Hash</option>\n<option value=\"list\"   <?php echo (isset($_GET['type']) && ($_GET['type'] == 'list'  )) ? 'selected=\"selected\"' : ''?>>List</option>\n<option value=\"set\"    <?php echo (isset($_GET['type']) && ($_GET['type'] == 'set'   )) ? 'selected=\"selected\"' : ''?>>Set</option>\n<option value=\"zset\"   <?php echo (isset($_GET['type']) && ($_GET['type'] == 'zset'  )) ? 'selected=\"selected\"' : ''?>>ZSet</option>\n</select>\n</p>\n\n<p>\n<label for=\"key\">Key:</label>\n<input type=\"text\" name=\"key\" id=\"key\" size=\"30\" <?php echo isset($_GET['key']) ? 'value=\"'.format_html($_GET['key']).'\"' : ''?>>\n</p>\n\n<p id=\"hkeyp\">\n<label for=\"khey\">Hash key:</label>\n<input type=\"text\" name=\"hkey\" id=\"hkey\" size=\"30\" <?php echo isset($_GET['hkey']) ? 'value=\"'.format_html($_GET['hkey']).'\"' : ''?>>\n</p>\n\n<p id=\"indexp\">\n<label for=\"index\">Index:</label>\n<input type=\"text\" name=\"index\" id=\"index\" size=\"30\" <?php echo isset($_GET['index']) ? 'value=\"'.format_html($_GET['index']).'\"' : ''?>> <span class=\"info\">empty to append, -1 to prepend</span>\n</p>\n\n<p id=\"scorep\">\n<label for=\"score\">Score:</label>\n<input type=\"text\" name=\"score\" id=\"score\" size=\"30\" <?php echo isset($_GET['score']) ? 'value=\"'.format_html($_GET['score']).'\"' : ''?>>\n</p>\n\n<p>\n<label for=\"value\">Value:</label>\n<textarea name=\"value\" id=\"value\" cols=\"80\" rows=\"20\"><?php echo format_html($value)?></textarea>\n</p>\n\n<input type=\"hidden\" name=\"oldvalue\" value=\"<?php echo format_html($value)?>\">\n\n<input type=\"submit\" class=\"button\" value=\"<?php echo $edit ? 'Edit' : 'Add'?>\">\n\n</form>\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>"
        },
        {
          "name": "export.php",
          "type": "blob",
          "size": 4.587890625,
          "content": "<?php\n\nrequire_once 'includes/common.inc.php';\n\nglobal $redis, $config, $csrfToken, $server;\n\n// Export to redis-cli commands\nfunction export_redis($key, $filter = false, $transform = false) {\n\n  global $redis;\n\n  $type = $redis->type($key);\n\n  // we rename the keys as necessary\n  if($filter !== false && $transform !== false)\n    $outputKey = str_replace($filter, $transform, $key);\n  else\n    $outputKey = $key;\n\n  // String\n  if ($type == 'string') {\n    echo 'SET \"',addslashes($outputKey),'\" \"',addslashes($redis->get($key)),'\"',PHP_EOL;\n  }\n\n  // Hash\n  else if ($type == 'hash') {\n    $values = $redis->hGetAll($key);\n\n    foreach ($values as $k => $v) {\n      echo 'HSET \"',addslashes($outputKey),'\" \"',addslashes($k),'\" \"',addslashes($v),'\"',PHP_EOL;\n    }\n  }\n\n  // List\n  else if ($type == 'list') {\n    $size = $redis->lLen($key);\n\n    for ($i = 0; $i < $size; ++$i) {\n      echo 'RPUSH \"',addslashes($outputKey),'\" \"',addslashes($redis->lIndex($key, $i)),'\"',PHP_EOL;\n    }\n  }\n\n  // Set\n  else if ($type == 'set') {\n    $values = $redis->sMembers($key);\n\n    foreach ($values as $v) {\n      echo 'SADD \"',addslashes($outputKey),'\" \"',addslashes($v),'\"',PHP_EOL;\n    }\n  }\n\n  // ZSet\n  else if ($type == 'zset') {\n    $values = $redis->zRange($key, 0, -1);\n\n    foreach ($values as $v) {\n      $s = $redis->zScore($key, $v);\n\n      echo 'ZADD \"',addslashes($outputKey),'\" ',$s,' \"',addslashes($v),'\"',PHP_EOL;\n    }\n  }\n}\n\n\n\n// Return the JSON for this key\nfunction export_json($key) {\n  global $redis;\n\n  $type = $redis->type($key);\n\n  // String\n  if ($type == 'string') {\n    $value = $redis->get($key);\n  }\n\n  // Hash\n  else if ($type == 'hash') {\n    $value = $redis->hGetAll($key);\n  }\n\n  // List\n  else if ($type == 'list') {\n    $size  = $redis->lLen($key);\n    $value = array();\n\n    for ($i = 0; $i < $size; ++$i) {\n      $value[] = $redis->lIndex($key, $i);\n    }\n  }\n\n  // Set\n  else if ($type == 'set') {\n    $value = $redis->sMembers($key);\n  }\n\n  // ZSet\n  else if ($type == 'zset') {\n    $value = $redis->zRange($key, 0, -1);\n  }\n\n\n  return $value;\n}\n\n\n\n\n// Export\nif (isset($_POST['type'])) {\n  if ($_POST['type'] == 'json') {\n    $ext = 'js';\n    $ct  = 'application/json';\n  } else {\n    $ext = 'redis';\n    $ct  = 'text/plain';\n  }\n\n\n  header('Content-type: '.$ct.'; charset=utf-8');\n  header('Content-Disposition: inline; filename=\"export.'.$ext.'\"');\n\n  $filter = !empty($_POST['filter']) ? trim($_POST['filter']) : false;\n  $transform = !empty($_POST['transform']) ? trim($_POST['transform']) : false;\n\n  // JSON\n  if ($_POST['type'] == 'json') {\n\n    // Single key\n    if (isset($_GET['key'])) {\n      echo json_encode(export_json($_GET['key']));\n    } else { // All keys\n      $keys = $redis->keys('*');\n      $vals = array();\n\n      foreach ($keys as $key) {\n\n        // if we have a filter and no match, nothing to do\n        if($filter !== false && stripos($key, $filter) === false)\n          continue;\n\n        // we rename the keys as necessary\n        if($filter !== false && $transform !== false)\n          $outputKey = str_replace($filter, $transform, $key);\n        else\n          $outputKey = $key;\n\n        $vals[$outputKey] = export_json($key);\n      }\n\n      echo json_encode($vals);\n    }\n  }\n\n  // Redis Commands\n  else {\n\n    // Single key\n    if (isset($_GET['key'])) {\n      export_redis($_GET['key']);\n    } else { // All keys\n      $keys = $redis->keys('*');\n\n      foreach ($keys as $key) {\n\n        // if we have a filter and no match, we skip\n        if($filter !== false && stripos($key, $filter) === false)\n          continue;\n\n        export_redis($key, $filter, $transform);\n      }\n    }\n  }\n\n\n  die;\n}\n\n\n\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\n?>\n<h2>Export <?php echo isset($_GET['key']) ? format_html($_GET['key']) : ''?></h2>\n\n<form action=\"<?php echo format_html(getRelativePath('export.php'))?>\" method=\"post\">\n<input type=\"hidden\" name=\"csrf\" value=\"<?php echo $csrfToken; ?>\" />\n\n<p>\n<label for=\"type\">Type:</label>\n<select name=\"type\" id=\"type\">\n<option value=\"redis\" <?php echo (isset($_GET['type']) && ($_GET['type'] == 'redis')) ? 'selected=\"selected\"' : ''?>>Redis</option>\n<option value=\"json\"  <?php echo (isset($_GET['type']) && ($_GET['type'] == 'json' )) ? 'selected=\"selected\"' : ''?>>JSON</option>\n</select>\n</p>\n\n<?php if (!isset($_GET['key'])): ?>\n  <p>\n  <label for=\"filter\">Filter:</label>\n  <input type=\"text\" name=\"filter\" />\n  </p>\n\n  <p>\n  <label for=\"transform\">Tranform:</label>\n  <input type=\"text\" name=\"transform\" />\n  </p>\n<?php endif; ?>\n\n<input type=\"submit\" class=\"button\" value=\"Export\">\n\n</form>\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n"
        },
        {
          "name": "flush.php",
          "type": "blob",
          "size": 0.2109375,
          "content": "<?php\n\nif (!isset($_POST['post'])) {\n  die('Javascript needs to be enabled for you to flush a database.');\n}\n\nrequire_once 'includes/common.inc.php';\nglobal $redis, $config, $csrfToken, $server;\n\n$redis->flushdb();\n\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "import.php",
          "type": "blob",
          "size": 2.380859375,
          "content": "<?php\n\nrequire_once 'includes/common.inc.php';\nglobal $redis, $config, $csrfToken, $server;\n\n// This mess could need some cleanup!\nif (isset($_POST['commands'])) {\n  // Append some spaces at the end to make sure we always have enough arguments for the last function.\n  $commands = str_getcsv(str_replace(array(\"\\r\", \"\\n\"), array('', ' '), $_POST['commands']).'    ', ' ');\n\n  foreach ($commands as &$command) {\n    $command = stripslashes($command);\n  }\n  unset($command);\n\n  for ($i = 0; $i < count($commands); ++$i) {\n    if (empty($commands[$i])) {\n      continue;\n    }\n\n    $commands[$i] = strtoupper($commands[$i]);\n\n    switch ($commands[$i]) {\n      case 'SET': {\n        $redis->set($commands[$i+1], $commands[$i+2]);\n        $i += 2;\n        break;\n      }\n\n      case 'HSET': {\n        $redis->hSet($commands[$i+1], $commands[$i+2], $commands[$i+3]);\n        $i += 3;\n        break;\n      }\n\n      case 'LPUSH': {\n        $redis->lPush($commands[$i+1], $commands[$i+2]);\n        $i += 2;\n        break;\n      }\n\n      case 'RPUSH': {\n        $redis->rPush($commands[$i+1], $commands[$i+2]);\n        $i += 2;\n        break;\n      }\n\n      case 'LSET': {\n        $redis->lSet($commands[$i+1], $commands[$i+2], $commands[$i+3]);\n        $i += 3;\n        break;\n      }\n\n      case 'SADD': {\n        $redis->sAdd($commands[$i+1], $commands[$i+2]);\n        $i += 2;\n        break;\n      }\n\n      case 'ZADD': {\n        $redis->zAdd($commands[$i+1], $commands[$i+2], $commands[$i+3]);\n        $i += 3;\n        break;\n      }\n    }\n  }\n\n\n  // Refresh the top so the key tree is updated.\n  require 'includes/header.inc.php';\n\n  ?>\n  <script>\n  top.location.href = top.location.pathname+'?overview&s=<?php echo $server['id']?>&d=<?php echo $server['db']?>';\n  </script>\n  <?php\n\n  require 'includes/footer.inc.php';\n  die;\n}\n\n\n\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\n?>\n<h2>Import</h2>\n<form action=\"<?php echo format_html(getRelativePath('import.php'))?>\" method=\"post\">\n<input type=\"hidden\" name=\"csrf\" value=\"<?php echo $csrfToken; ?>\" />\n\n<p>\n<label for=\"commands\">Commands:<br>\n<br>\n<span class=\"info\">\nValid are:<br>\nSET<br>\nHSET<br>\nLPUSH<br>\nRPUSH<br>\nLSET<br>\nSADD<br>\nZADD\n</span>\n</label>\n<textarea name=\"commands\" id=\"commands\" cols=\"80\" rows=\"20\"></textarea>\n</p>\n\n<input type=\"submit\" class=\"button\" value=\"Import\">\n\n</form>\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n"
        },
        {
          "name": "includes",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.php",
          "type": "blob",
          "size": 9.6064453125,
          "content": "<?php\n\nrequire_once 'includes/common.inc.php';\nglobal $redis, $config, $csrfToken, $server;\n\nif($redis) {\n\n    if (!empty($server['keys'])) {\n        $keys = $redis->keys($server['filter']);\n    } else {\n        $next = 0;\n        $keys = array();\n        while (true) {\n            $r = $redis->scan($next, 'MATCH', $server['filter'], 'COUNT', $server['scansize']);\n            $next = $r[0];\n            $keys = array_merge($keys, $r[1]);\n            if ($next == 0) {\n                break;\n            }\n            if ($server['scanmax'] > 0 && count($keys) >= $server['scanmax']) {\n                break;\n            }\n        }\n    }\n\n    sort($keys);\n\n    $namespaces = array(); // Array to hold our top namespaces.\n\n    // Build an array of nested arrays containing all our namespaces and containing keys.\n    foreach ($keys as $key) {\n      // Ignore keys that are to long (Redis supports keys that can be way to long to put in an url).\n      if (strlen($key) > $config['maxkeylen']) {\n        continue;\n      }\n\n      $key = explode($server['seperator'], $key); //@todo: may be separator ?\n      if ($config['showEmptyNamespaceAsKey'] && $key[count($key) - 1] == '') {\n        array_pop($key);\n        $key[count($key) - 1] .= ':';\n      }\n\n      // $d will be a reference to the current namespace.\n      $d = &$namespaces;\n\n      // We loop though all the namespaces for this key creating the array for each.\n      // Each time updating $d to be a reference to the last namespace so we can create the next one in it.\n      for ($i = 0; $i < (count($key) - 1); ++$i) {\n        if (!isset($d[$key[$i]])) {\n          $d[$key[$i]] = array();\n        }\n\n        $d = &$d[$key[$i]];\n      }\n\n      // Nodes containing an item named __phpredisadmin__ are also a key, not just a directory.\n      // This means that creating an actual key named __phpredisadmin__ will make this bug.\n      $d[$key[count($key) - 1]] = array('__phpredisadmin__' => true);\n\n      // Unset $d so we don't accidentally overwrite it somewhere else.\n      unset($d);\n    }\n\n    // Recursive function used to print the namespaces.\n    function print_namespace($item, $name, $fullkey, $islast) {\n      global $config, $server, $redis;\n\n      // Is this also a key and not just a namespace?\n      if (isset($item['__phpredisadmin__'])) {\n        // Unset it so we won't loop over it when printing this namespace.\n        unset($item['__phpredisadmin__']);\n\n        $class = array();\n        $len   = false;\n\n        if (isset($_GET['key']) && ($fullkey == $_GET['key'])) {\n          $class[] = 'current';\n        }\n        if ($islast) {\n          $class[] = 'last';\n        }\n\n        // Get the number of items in the key.\n        if (!isset($config['faster']) || !$config['faster']) {\n          switch ($redis->type($fullkey)) {\n            case 'hash':\n              $len = $redis->hLen($fullkey);\n              break;\n\n            case 'list':\n              $len = $redis->lLen($fullkey);\n              break;\n\n            case 'set':\n              $len = $redis->sCard($fullkey);\n              break;\n\n            case 'zset':\n              $len = $redis->zCard($fullkey);\n              break;\n          }\n        }\n\n        if (empty($name) && $name != '0') {\n          $name = '<empty>';\n          $class[] = 'empty';\n        }\n\n        ?>\n        <li<?php echo empty($class) ? '' : ' class=\"'.implode(' ', $class).'\"'?>>\n        <input type=\"checkbox\" name=\"checked_keys\" value=\"<?php echo format_html($fullkey)?>\"/>\n        <a href=\"?view&amp;s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>&amp;key=<?php echo urlencode($fullkey)?>\" title=\"<?php echo format_html($name)?>\"><?php echo format_html($name)?><?php if ($len !== false) { ?><span class=\"info\">(<?php echo $len?>)</span><?php } ?></a>\n        </li>\n        <?php\n      }\n\n      // Does this namespace also contain subkeys?\n      if (count($item) > 0) {\n        ?>\n        <li class=\"folder<?php echo ($fullkey === '') ? '' : ' collapsed'?><?php echo $islast ? ' last' : ''?>\">\n        <div class=\"icon\"><?php echo format_html($name)?>&nbsp;<span class=\"info\">(<?php echo count($item)?>)</span>\n        <?php if ($fullkey !== '') { ?><a href=\"delete.php?s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>&amp;tree=<?php echo urlencode($fullkey).$server['seperator']?>\" class=\"deltree\"><img src=\"images/delete.png\" width=\"10\" height=\"10\" title=\"Delete tree\" alt=\"[X]\"></a><?php } ?>\n        </div><ul>\n        <?php\n\n        $l = count($item);\n\n        foreach ($item as $childname => $childitem) {\n          // $fullkey will be empty on the first call.\n          if ($fullkey === '') {\n            $childfullkey = $childname;\n          } else {\n            $childfullkey = $fullkey.$server['seperator'].$childname;\n          }\n\n          print_namespace($childitem, $childname, $childfullkey, (--$l == 0));\n        }\n\n        ?>\n        </ul>\n        </li>\n        <?php\n      }\n    }\n\n    function getDbInfo($d, $info, $padding = '') {\n      global $config, $server;\n      $prefix = \"database \";\n      $db = \"db$d\";\n\n      $dbHasData = array_key_exists(\"db$d\", $info['Keyspace']);\n\n      if (!$dbHasData && ((isset($server['hide']) && $server['hide']) || (!isset($server['hide']) && $config['hideEmptyDBs']))) {\n        return false; // we don't show empty dbs, so return false to tell the caller to continue the loop\n      }\n\n      $dbinfo = sprintf(\"$prefix%'.-{$padding}d\", $d);\n      if ($dbHasData) {\n        $dbinfo = sprintf(\"%s (%d)\", $dbinfo, $info['Keyspace'][$db]['keys']);\n      }\n      $dbinfo = str_replace('.', '&nbsp;&nbsp;', $dbinfo); // 2 spaces per character are needed to get the alignment right\n\n      return $dbinfo;\n    }\n\n}  // if redis\n\n\n\n// This is basically the same as the click code in index.js.\n// Just build the url for the frame based on our own url.\nif (count($_GET) == 0) {\n  $iframe = 'overview.php';\n} else {\n  $iframe = substr($_SERVER['REQUEST_URI'], strpos($_SERVER['REQUEST_URI'], '?') + 1);\n\n  if (strpos($iframe, '//') === 0 || strpos($iframe, 'http') === 0) {\n    $iframe = 'overview.php';\n  } else if (strpos($iframe, '&') !== false) {\n    $iframe = substr_replace($iframe, '.php?', strpos($iframe, '&'), 1);\n  } else {\n    $iframe .= '.php';\n  }\n}\n\n\n\n$page['css'][] = 'index';\n$page['js'][]  = 'index';\n$page['js'][]  = 'jquery-cookie';\n\nrequire 'includes/header.inc.php';\n\n?>\n<div id=\"sidebar\">\n<div id=\"header\">\n<h1 class=\"logo\"><a href=\"?overview&amp;s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>\">phpRedisAdmin</a></h1>\n\n<p>\n<select id=\"server\">\n<?php foreach ($config['servers'] as $i => $srv) { ?>\n<option value=\"<?php echo $i?>\" <?php echo ($server['id'] == $i) ? 'selected=\"selected\"' : ''?>><?php echo isset($srv['name']) ? format_html($srv['name']) : $srv['host'].':'.$srv['port']?></option>\n<?php } ?>\n</select>\n\n<?php if($redis) { ?>\n\n<?php\nif (isset($server['databases'])) {\n  $databases = $server['databases'];\n} else {\n  $databases = $redis->config('GET', 'databases');\n  $databases = $databases['databases'];\n}\n$info = $redis->info(); $len = strlen((string)($databases-1));\nif ($databases > 1) { ?>\n  <select id=\"database\">\n  <?php for ($d = 0; $d < $databases; ++$d) { if (($dbinfo=getDbInfo($d, $info, $len)) === false) continue; ?>\n  <option value=\"<?php echo $d?>\" <?php echo ($server['db'] == $d) ? 'selected=\"selected\"' : ''?>><?php echo \"$dbinfo\"; ?></option>\n  <?php } ?>\n  </select>\n<?php } ?>\n</p>\n\n<p>\n<?php if (isset($login)) { ?>\n<a href=\"logout.php\"><img src=\"images/logout.png\" width=\"16\" height=\"16\" title=\"Logout\" alt=\"[L]\"></a>\n<?php } ?>\n<a href=\"?info&amp;s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>\"><img src=\"images/info.png\" width=\"16\" height=\"16\" title=\"Info\" alt=\"[I]\"></a>\n<a href=\"?export&amp;s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>\"><img src=\"images/export.png\" width=\"16\" height=\"16\" title=\"Export\" alt=\"[E]\"></a>\n<a href=\"?import&amp;s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>\"><img src=\"images/import.png\" width=\"16\" height=\"16\" title=\"Import\" alt=\"[I]\"></a>\n<?php if (isset($server['flush']) && $server['flush']) { ?>\n<a href=\"?flush&amp;s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>\" id=\"flush\"><img src=\"images/flush.png\" width=\"16\" height=\"16\" title=\"Flush\" alt=\"[F]\"></a>\n<?php } ?>\n</p>\n\n<p>\n<a href=\"?edit&amp;s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>\" class=\"add\">Add another key</a>\n</p>\n\n<p>\n<input type=\"text\" id=\"server_filter\" size=\"14\" value=\"<?php echo format_html($server['filter']); ?>\" placeholder=\"type here to server filter\" class=\"info\">\n<button id=\"btn_server_filter\">Filter!</button>\n</p>\n\n<p>\n<input type=\"text\" id=\"filter\" size=\"24\" value=\"type here to filter\" placeholder=\"type here to filter\" class=\"info\">\n</p>\n<button id=\"selected_all_keys\">Select all</button>\n<button id=\"operations\">\n<a href=\"delete.php?s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>&batch_del=1&csrf=<?php echo $csrfToken; ?>\" class=\"batch_del\">Delete selected<img src=\"images/delete.png\" style=\"width: 1em;height: 1em;vertical-align: middle;\" title=\"Delete selected\" alt=\"[X]\"></a>\n</button>\n</div>\n<div id=\"keys\">\n<div class=\"info\">\n  scanned <?php echo count($keys) ?> keys<?php echo ($server['scanmax'] > 0 && count($keys) >= $server['scanmax']) ? ', reached scanmax' : '' ?>\n</div>\n<ul>\n<?php print_namespace($namespaces, 'Keys', '', empty($namespaces))?>\n</ul>\n</div><!-- #keys -->\n\n<?php } else { ?>\n</p>\n<div style=\"color:red\">Can't connect to this server</div>\n<?php } ?>\n\n</div><!-- #sidebar -->\n\n<div id=\"resize\"></div>\n<div id=\"resize-layover\"></div>\n\n<div id=\"frame\">\n<iframe src=\"<?php echo format_html($iframe)?>\" id=\"iframe\" frameborder=\"0\" scrolling=\"0\"></iframe>\n</div><!-- #frame -->\n\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n"
        },
        {
          "name": "info.php",
          "type": "blob",
          "size": 1.0126953125,
          "content": "<?php\n\nrequire_once 'includes/common.inc.php';\nglobal $redis, $config, $csrfToken, $server;\n\nif (isset($_GET['reset'])) {\n  $redis->config('resetstat');\n\n  header('Location: info.php');\n  die;\n}\n\n// Fetch the info\n$info = $redis->info();\n$alt  = false;\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\n?>\n<h2>Info</h2>\n\n<p>\n<a href=\"?reset=1&amp;s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>\" class=\"reset\">Reset usage statistics</a>\n</p>\n\n<table>\n<tr><th><div>Key</div></th><th><div>Value</div></th></tr>\n<?php\n\nforeach ($info as $key => $value) {\n  if ($key == 'allocation_stats') { // This key is very long to split it into multiple lines\n    $value = str_replace(',', \",\\n\", $value);\n  }\n\n  ?>\n  <tr <?php echo $alt ? 'class=\"alt\"' : ''?>><td><div><?php echo format_html($key)?></div></td><td><pre><?php echo format_html(is_array($value) ? print_r($value, true) : $value)?></pre></td></tr>\n  <?php\n\n  $alt = !$alt;\n}\n\n?>\n</table>\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n"
        },
        {
          "name": "js",
          "type": "tree",
          "content": null
        },
        {
          "name": "login.php",
          "type": "blob",
          "size": 1.4853515625,
          "content": "<?php\ndefine('LOGIN_PAGE', true);\n\nrequire_once 'includes/common.inc.php';\nglobal $redis, $config, $csrfToken, $server;\n\n$page['css'][] = 'login';\n\nrequire 'includes/header.inc.php';\n\n// Layout borrowed from http://getbootstrap.com/examples/signin/\n?>\n\n<h1 class=\"logo\">phpRedisAdmin</h1>\n\n<form class=\"form-signin\" method=\"post\" action=\"login.php\">\n<input type=\"hidden\" name=\"csrf\" value=\"<?php echo $csrfToken; ?>\" />\n    <h2 class=\"form-signin-heading\">Please log in</h2>\n\n    <?php if (isset($_POST['username']) || isset($_POST['password'])): ?>\n        <div class=\"invalid-credentials\">\n            <h3>Invalid username/password</h3>\n            <p>Please try again.</p>\n        </div>\n    <?php endif; ?>\n\n    <label for=\"inputUser\" class=\"sr-only\">Username</label>\n    <input type=\"text\" name=\"username\" id=\"inputUser\" class=\"form-control\"\n           placeholder=\"Username\"\n           value=\"<?= isset($_POST['username']) ? htmlentities($_POST['username'], defined('ENT_SUBSTITUTE') ? (ENT_QUOTES | ENT_SUBSTITUTE) : ENT_QUOTES, 'utf-8') : '' ?>\"\n           required <?= isset($_POST['username']) ? '' : 'autofocus' ?>>\n\n    <label for=\"inputPassword\" class=\"sr-only\">Password</label>\n    <input type=\"password\" name=\"password\" id=\"inputPassword\" class=\"form-control\"\n           placeholder=\"Password\"\n           required <?= isset($_POST['username']) ? 'autofocus' : '' ?>>\n\n    <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Log in</button>\n</form>\n\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n"
        },
        {
          "name": "logout.php",
          "type": "blob",
          "size": 1.1494140625,
          "content": "<?php\n\nrequire_once 'includes/common.inc.php';\nglobal $redis, $config, $csrfToken, $server;\n\nif (!empty($config['cookie_auth'])) {\n    // Cookie-based auth\n    setcookie('phpRedisAdminLogin', '', 1);\n    header(\"Location: login.php\");\n    die();\n} else {\n    // HTTP Digest auth\n    $needed_parts = array(\n      'nonce'    => 1,\n      'nc'       => 1,\n      'cnonce'   => 1,\n      'qop'      => 1,\n      'username' => 1,\n      'uri'      => 1,\n      'response' => 1\n     );\n\n    $data = array();\n    $keys = implode('|', array_keys($needed_parts));\n\n    preg_match_all('/('.$keys.')=(?:([\\'\"])([^\\2]+?)\\2|([^\\s,]+))/', $_SERVER['PHP_AUTH_DIGEST'], $matches, PREG_SET_ORDER);\n\n    foreach ($matches as $m) {\n      $data[$m[1]] = $m[3] ? $m[3] : $m[4];\n      unset($needed_parts[$m[1]]);\n    }\n\n\n    if (!isset($_GET['nonce'])) {\n      header('Location: logout.php?nonce='.$data['nonce']);\n      die;\n    }\n\n\n    if ($data['nonce'] == $_GET['nonce']) {\n      unset($_SERVER['PHP_AUTH_DIGEST']);\n\n      if (!empty($config['cookie_auth'])) {\n          $login = authCookie();\n      } else {\n          $login = authHttpDigest();\n      }\n    }\n\n\n    header('Location: logout.php');\n}\n"
        },
        {
          "name": "overview.php",
          "type": "blob",
          "size": 3.357421875,
          "content": "<?php\n\nrequire_once 'includes/common.inc.php';\nglobal $redis, $config, $csrfToken, $server;\n\n$info = array();\n\nforeach ($config['servers'] as $i => $server) {\n  if (!isset($server['db'])) {\n      $server['db'] = 0;\n  }\n\n  // Setup a connection to Redis.\n  if(isset($server['scheme']) && $server['scheme'] === 'unix' && $server['path']) {\n    $redis = new Predis\\Client(array('scheme' => 'unix', 'path' => $server['path']));\n  } else {\n    $redis = !$server['port'] ? new Predis\\Client($server['host']) : new Predis\\Client('tcp://'.$server['host'].':'.$server['port']);\n  }\n  try {\n    $redis->connect();\n  } catch (Predis\\CommunicationException $exception) {\n    $redis = false;\n  }\n\n  if(!$redis) {\n      $info[$i] = false;\n  } else {\n      if (isset($server['auth'])) {\n        if (!$redis->auth($server['auth'])) {\n          die('ERROR: Authentication failed ('.$server['host'].':'.$server['port'].')');\n        }\n      }\n      if ($server['db'] != 0) {\n        if (!$redis->select($server['db'])) {\n          die('ERROR: Selecting database failed ('.$server['host'].':'.$server['port'].','.$server['db'].')');\n        }\n      }\n\n      $info[$i]         = $redis->info();\n      $info[$i]['size'] = $redis->dbSize();\n\n      if (!isset($info[$i]['Server'])) {\n        $info[$i]['Server'] = array(\n          'redis_version'     => $info[$i]['redis_version'],\n          'uptime_in_seconds' => $info[$i]['uptime_in_seconds']\n        );\n      }\n      if (!isset($info[$i]['Memory'])) {\n        $info[$i]['Memory'] = array(\n          'used_memory' => $info[$i]['used_memory']\n        );\n      }\n  }\n\n\n}\n\n\n\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\n?>\n\n<?php foreach ($config['servers'] as $i => $server) { ?>\n  <div class=\"server\">\n  <h2><?php echo isset($server['name']) ? format_html($server['name']) : format_html($server['host'])?></h2>\n\n  <?php if(!$info[$i]): ?>\n  <div style=\"text-align:center;color:red\">Server Down</div>\n  <?php else: ?>\n\n  <table>\n\n  <tr><td><div>Redis version:</div></td><td><div><?php echo $info[$i]['Server']['redis_version']?></div></td></tr>\n\n  <tr><td><div>Keys:</div></td><td><div><?php echo $info[$i]['size']?></div></td></tr>\n\n  <tr><td><div>Memory used:</div></td><td><div><?php echo format_size($info[$i]['Memory']['used_memory'])?></div></td></tr>\n\n  <tr><td><div>Uptime:</div></td><td><div><?php echo format_time($info[$i]['Server']['uptime_in_seconds'])?></div></td></tr>\n\n  <tr><td><div>Last save:</div></td><td><div>\n    <?php \n        if (isset($info[$i]['Persistence']['rdb_last_save_time'])) {\n           if((time() - $info[$i]['Persistence']['rdb_last_save_time'] ) >= 0) {\n              echo format_time(time() - $info[$i]['Persistence']['rdb_last_save_time']) . \" ago\";\n           } else { \n              echo format_time(-(time() - $info[$i]['Persistence']['rdb_last_save_time'])) . \"in the future\"; \n           } \n        } else { \n           echo 'never';\n        } \n    ?> \n    <a href=\"save.php?s=<?php echo $i?>\"><img src=\"images/save.png\" width=\"16\" height=\"16\" title=\"Save Now\" alt=\"[S]\" class=\"imgbut\"></a></div></td></tr>\n\n  </table>\n  <?php endif; ?>\n  </div>\n<?php } ?>\n\n<p class=\"clear\">\n<a href=\"https://github.com/ErikDubbelboer/phpRedisAdmin\" target=\"_blank\">phpRedisAdmin on GitHub</a>\n</p>\n\n<p>\n<a href=\"https://redis.io/documentation\" target=\"_blank\">Redis Documentation</a>\n</p>\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n"
        },
        {
          "name": "rename.php",
          "type": "blob",
          "size": 1.2880859375,
          "content": "<?php\n\nrequire_once 'includes/common.inc.php';\nglobal $redis, $config, $csrfToken, $server;\n\nif (isset($_POST['old'], $_POST['key'])) {\n  if (strlen($_POST['key']) > $config['maxkeylen']) {\n    die('ERROR: Your key is to long (max length is '.$config['maxkeylen'].')');\n  }\n\n  $redis->rename($_POST['old'], $_POST['key']);\n\n\n  // Refresh the top so the key tree is updated.\n  require 'includes/header.inc.php';\n\n  ?>\n  <script>\n  top.location.href = top.location.pathname+'?view&s=<?php echo $server['id']?>&d=<?php echo $server['db']?>&key=<?php echo urlencode($_POST['key'])?>';\n  </script>\n  <?php\n\n  require 'includes/footer.inc.php';\n  die;\n}\n\n\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\n?>\n<h2>Edit Name of <?php echo format_html($_GET['key'])?></h2>\n<form action=\"<?php echo format_html(getRelativePath('rename.php'))?>\" method=\"post\">\n<input type=\"hidden\" name=\"csrf\" value=\"<?php echo $csrfToken; ?>\" />\n\n<input type=\"hidden\" name=\"old\" value=\"<?php echo format_html($_GET['key'])?>\">\n\n<p>\n<label for=\"key\">Key:</label>\n<input type=\"text\" name=\"key\" id=\"key\" size=\"30\" <?php echo isset($_GET['key']) ? 'value=\"'.format_html($_GET['key']).'\"' : ''?>>\n</p>\n\n<input type=\"submit\" class=\"button\" value=\"Rename\">\n\n</form>\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n"
        },
        {
          "name": "save.php",
          "type": "blob",
          "size": 0.3583984375,
          "content": "<?php\n\nrequire_once 'includes/common.inc.php';\nglobal $redis, $config, $csrfToken, $server;\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\n?>\n<h2>Saving</h2>\n\n...\n<?php\n\n// Flush everything so far cause the next command could take some time.\nflush();\n\n$redis->save();\n\n?>\n done.\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>"
        },
        {
          "name": "ttl.php",
          "type": "blob",
          "size": 1.1083984375,
          "content": "<?php\n\nrequire_once 'includes/common.inc.php';\nglobal $redis, $config, $csrfToken, $server;\n\nif (isset($_POST['key'], $_POST['ttl'])) {\n  if ($_POST['ttl'] == -1) {\n    $redis->persist($_POST['key']);\n  } else {\n    $redis->expire($_POST['key'], $_POST['ttl']);\n  }\n\n  header('Location: view.php?key='.urlencode($_POST['key']));\n  die;\n}\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\n?>\n<h2>Edit TTL</h2>\n<form action=\"<?php echo format_html(getRelativePath('ttl.php'))?>\" method=\"post\">\n<input type=\"hidden\" name=\"csrf\" value=\"<?php echo $csrfToken; ?>\" />\n\n<p>\n<label for=\"key\">Key:</label>\n<input type=\"text\" name=\"key\" id=\"key\" size=\"30\" <?php echo isset($_GET['key']) ? 'value=\"'.format_html($_GET['key']).'\"' : ''?>>\n</p>\n\n<p>\n<label for=\"ttl\"><abbr title=\"Time To Live\">TTL</abbr>:</label>\n<input type=\"text\" name=\"ttl\" id=\"ttl\" size=\"30\" <?php echo isset($_GET['ttl']) ? 'value=\"'.format_html($_GET['ttl']).'\"' : ''?>> <span class=\"info\">(-1 to remove the TTL)</span>\n</p>\n\n<input type=\"submit\" class=\"button\" value=\"Edit TTL\">\n\n</form>\n<?php\n\nrequire 'includes/footer.inc.php';\n\n?>\n"
        },
        {
          "name": "view.php",
          "type": "blob",
          "size": 12.2138671875,
          "content": "<?php\n\nrequire_once 'includes/common.inc.php';\nglobal $redis, $config, $csrfToken, $server;\n\n$page['css'][] = 'frame';\n$page['js'][]  = 'frame';\n\nrequire 'includes/header.inc.php';\n\nif (!isset($_GET['key'])) {\n  ?>\n  Invalid key\n  <?php\n\n  require 'includes/footer.inc.php';\n  die;\n}\n\n$type   = $redis->type($_GET['key']);\n$exists = $redis->exists($_GET['key']);\n\n$count_elements_page = isset($config['count_elements_page']) ? $config['count_elements_page'] : false;\n$page_num_request    = isset($_GET['page']) ? (int)$_GET['page'] : 1;\n$page_num_request    = $page_num_request === 0 ? 1 : $page_num_request;\n\n?>\n<h2><?php echo format_html($_GET['key'])?>\n<?php if ($exists) { ?>\n  <a href=\"rename.php?s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>&amp;key=<?php echo urlencode($_GET['key'])?>\"><img src=\"images/edit.png\" width=\"16\" height=\"16\" title=\"Rename\" alt=\"[R]\"></a>\n  <a href=\"delete.php?s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>&amp;key=<?php echo urlencode($_GET['key'])?>\" class=\"delkey\"><img src=\"images/delete.png\" width=\"16\" height=\"16\" title=\"Delete\" alt=\"[X]\"></a>\n  <a href=\"export.php?s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>&amp;key=<?php echo urlencode($_GET['key'])?>\"><img src=\"images/export.png\" width=\"16\" height=\"16\" title=\"Export\" alt=\"[E]\"></a>\n<?php } ?>\n</h2>\n<?php\n\nif (!$exists) {\n  ?>\n  This key does not exist.\n  <?php\n\n  require 'includes/footer.inc.php';\n  die;\n}\n\n$alt      = false;\n$ttl      = $redis->ttl($_GET['key']);\n\ntry {\n  $encoding = $redis->object('encoding', $_GET['key']);\n} catch (Exception $e) {\n  $encoding = null;\n}\n\nswitch ($type) {\n  case 'string':\n    $value = $redis->get($_GET['key']);\n    $value = encodeOrDecode('load', $_GET['key'], $value);\n    $size  = strlen($value);\n    break;\n\n  case 'hash':\n    $values = $redis->hGetAll($_GET['key']);\n    foreach ($values as $k => $value) {\n      $values[$k] = encodeOrDecode('load', $_GET['key'], $value);\n    }\n    $size = count($values);\n    ksort($values);\n    break;\n\n  case 'list':\n    $size = $redis->lLen($_GET['key']);\n    break;\n\n  case 'set':\n    $values = $redis->sMembers($_GET['key']);\n    foreach ($values as $k => $value) {\n      $values[$k] = encodeOrDecode('load', $_GET['key'], $value);\n    }\n    $size = count($values);\n    sort($values);\n    break;\n\n  case 'zset':\n    $values = $redis->zRange($_GET['key'], 0, -1);\n    foreach ($values as $k => $value) {\n      $values[$k] = encodeOrDecode('load', $_GET['key'], $value);\n    }\n    $size = count($values);\n    break;\n    \n  default:\n    $size = -1;\n}\n  \nif (isset($values) && ($count_elements_page !== false)) {\n  $values = array_slice($values, $count_elements_page * ($page_num_request - 1), $count_elements_page,true);\n}\n\n?>\n<table>\n\n<tr><td><div>Type:</div></td><td><div><?php echo format_html($type)?></div></td></tr>\n\n<tr><td><div><abbr title=\"Time To Live\">TTL</abbr>:</div></td><td><div><?php echo ($ttl == -1) ? 'does not expire' : format_ttl($ttl) ?> <a href=\"ttl.php?s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>&amp;key=<?php echo urlencode($_GET['key'])?>&amp;ttl=<?php echo $ttl?>\"><img src=\"images/edit.png\" width=\"16\" height=\"16\" title=\"Edit TTL\" alt=\"[E]\" class=\"imgbut\"></a></div></td></tr>\n\n<?php if (!is_null($encoding)) { ?>\n<tr><td><div>Encoding:</div></td><td><div><?php echo format_html($encoding)?></div></td></tr>\n<?php } ?>\n\n<tr><td><div>Size:</div></td><td><div>\n<?php \necho $size;\n\nif ($type === 'string') {\n    echo \" characters\";\n} else if ($size < 0) {\n    echo \" (Type Unsupported)\";\n} else {\n    echo \" items\";\n}\n?>\n</div></td></tr>\n\n</table>\n\n<p>\n<?php\n\n\n// Build pagination div.\nif (($count_elements_page !== false) && in_array($type, array('hash', 'list', 'set', 'zset')) && ($size > $count_elements_page)) {\n    $prev       = $page_num_request - 1;\n    $next       = $page_num_request + 1;\n    $lastpage   = ceil($size / $count_elements_page);\n    $lpm1       = $lastpage - 1;\n    $adjacents  = 3;\n    $pagination = '<div style=\"width: inherit; word-wrap: break-word;\">';\n    $url        = preg_replace('/&page=(\\d+)/i', '', $_SERVER['REQUEST_URI']);\n\n    if ($page_num_request > 1) $pagination .= \"<a href=\\\"$url&page=$prev\\\">&#8592;</a>&nbsp;\"; else\n        $pagination .= \"&#8592;&nbsp;\";\n\n    if ($lastpage < 7 + ($adjacents * 2)) { //not enough pages to bother breaking it up\n        for ($counter = 1; $counter <= $lastpage; $counter++) {\n            if ($counter == $page_num_request) $pagination .= $page_num_request . '&nbsp;'; else\n                $pagination .= \"<a href=\\\"$url&page=$counter\\\">$counter</a>&nbsp;\";\n        }\n    } elseif ($lastpage > 5 + ($adjacents * 2)) { //enough pages to hide some\n\n        if ($page_num_request < 1 + ($adjacents * 2)) { //close to beginning; only hide later pages\n            for ($counter = 1; $counter < 4 + ($adjacents * 2); $counter++) {\n                if ($counter == $page_num_request) $pagination .= $page_num_request . '&nbsp;'; else\n                    $pagination .= \"<a href=\\\"$url&page=$counter\\\">$counter</a>&nbsp;\";\n            }\n            $pagination .= \"...&nbsp;\";\n            $pagination .= \"<a href=\\\"$url&page=$lpm1\\\">$lpm1</a>&nbsp;\";\n            $pagination .= \"<a href=\\\"$url&page=$lastpage\\\">$lastpage</a>&nbsp;\";\n        } elseif ($lastpage - ($adjacents * 2) > $page_num_request && $page_num_request > ($adjacents * 2)) { //in middle; hide some front and some back\n            $pagination .= \"<a href=\\\"$url&page=1\\\">1</a>&nbsp;\";\n            $pagination .= \"<a href=\\\"$url&page=2\\\">2</a>&nbsp;\";\n            $pagination .= \"...&nbsp;\";\n            for ($counter = $page_num_request - $adjacents; $counter <= $page_num_request + $adjacents; $counter++) {\n                if ($counter == $page_num_request) $pagination .= $page_num_request . '&nbsp;'; else\n                    $pagination .= \"<a href=\\\"$url&page=$counter\\\">$counter</a>&nbsp;\";\n            }\n            $pagination .= \"...&nbsp;\";\n            $pagination .= \"<a href=\\\"$url&page=$lpm1\\\">$lpm1</a>&nbsp;\";\n            $pagination .= \"<a href=\\\"$url&page=$lastpage\\\">$lastpage</a>&nbsp;\";\n        } else { //close to end; only hide early pages\n            $pagination .= \"<a href=\\\"$url&page=1\\\">1</a>&nbsp;\";\n            $pagination .= \"<a href=\\\"$url&page=2\\\">2</a>&nbsp;\";\n            $pagination .= \"...&nbsp;\";\n            for ($counter = $lastpage - (2 + ($adjacents * 2)); $counter <= $lastpage; $counter++) {\n                if ($counter == $page_num_request) $pagination .= $page_num_request . '&nbsp;'; else\n                    $pagination .= \"<a href=\\\"$url&page=$counter\\\">$counter</a>&nbsp;\";\n            }\n        }\n    }\n    if ($page_num_request < $counter - 1) $pagination .= \"<a href=\\\"$url&page=$next\\\">&#8594;</a>&nbsp;\"; else\n        $pagination .= \"&#8594;&nbsp;\";\n    $pagination .= \"</div>\";\n}\n\nif (isset($pagination)) {\n    echo $pagination;\n}\n\n\n// String\nif ($type == 'string') { ?>\n\n<table>\n<tr><td><div class=data><?php echo format_html($value)?></div></td><td><div>\n  <a href=\"edit.php?s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>&amp;type=string&amp;key=<?php echo urlencode($_GET['key'])?>\"><img src=\"images/edit.png\" width=\"16\" height=\"16\" title=\"Edit\" alt=\"[E]\"></a>\n</div></td><td><div>\n  <a href=\"delete.php?s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>&amp;type=string&amp;key=<?php echo urlencode($_GET['key'])?>\" class=\"delval\"><img src=\"images/delete.png\" width=\"16\" height=\"16\" title=\"Delete\" alt=\"[X]\"></a>\n</div></td></tr>\n</table>\n\n<?php }\n\n\n\n// Hash\nelse if ($type == 'hash') { ?>\n\n<table>\n<tr><th><div>Key</div></th><th><div>Value</div></th><th><div>&nbsp;</div></th><th><div>&nbsp;</div></th></tr>\n\n<?php foreach ($values as $hkey => $value) { ?>\n  <tr <?php echo $alt ? 'class=\"alt\"' : ''?>><td><div><?php echo format_html($hkey)?></div></td><td><div class=data><?php echo format_html($value)?></div></td><td><div>\n    <a href=\"edit.php?s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>&amp;type=hash&amp;key=<?php echo urlencode($_GET['key'])?>&amp;hkey=<?php echo urlencode($hkey)?>\"><img src=\"images/edit.png\" width=\"16\" height=\"16\" title=\"Edit\" alt=\"[E]\"></a>\n  </div></td><td><div>\n    <a href=\"delete.php?s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>&amp;type=hash&amp;key=<?php echo urlencode($_GET['key'])?>&amp;hkey=<?php echo urlencode($hkey)?>\" class=\"delval\"><img src=\"images/delete.png\" width=\"16\" height=\"16\" title=\"Delete\" alt=\"[X]\"></a>\n  </div></td></tr>\n<?php $alt = !$alt; } ?>\n\n<?php }\n\n\n// List\nelse if ($type == 'list') { ?>\n\n<table>\n<tr><th><div>Index</div></th><th><div>Value</div></th><th><div>&nbsp;</div></th><th><div>&nbsp;</div></th></tr>\n\n<?php \n  if (($count_elements_page === false) && ($size > $count_elements_page)) {\n    $start = 0;\n    $end   = $size;\n  } else {\n    $start = $count_elements_page * ($page_num_request - 1);\n    $end   = min($start + $count_elements_page, $size);\n  }\n\n  for ($i = $start; $i < $end; ++$i) {\n    $value = $redis->lIndex($_GET['key'], $i);\n    $value = encodeOrDecode('load', $_GET['key'], $value);\n?>\n  <tr <?php echo $alt ? 'class=\"alt\"' : ''?>><td><div><?php echo $i?></div></td><td><div class=data><?php echo format_html($value)?></div></td><td><div>\n    <a href=\"edit.php?s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>&amp;type=list&amp;key=<?php echo urlencode($_GET['key'])?>&amp;index=<?php echo $i?>\"><img src=\"images/edit.png\" width=\"16\" height=\"16\" title=\"Edit\" alt=\"[E]\"></a>\n  </div></td><td><div>\n    <a href=\"delete.php?s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>&amp;type=list&amp;key=<?php echo urlencode($_GET['key'])?>&amp;index=<?php echo $i?>\" class=\"delval\"><img src=\"images/delete.png\" width=\"16\" height=\"16\" title=\"Delete\" alt=\"[X]\"></a>\n  </div></td></tr>\n<?php $alt = !$alt; } ?>\n\n<?php }\n\n\n\n// Set\nelse if ($type == 'set') {\n\n?>\n<table>\n<tr><th><div>Value</div></th><th><div>&nbsp;</div></th><th><div>&nbsp;</div></th></tr>\n\n<?php foreach ($values as $value) {\n  $display_value = $redis->exists($value) ? '<a href=\"view.php?s='.$server['id'].'&d='.$server['db'].'&key='.urlencode($value).'\">'.format_html($value).'</a>' : format_html($value);\n?>\n  <tr <?php echo $alt ? 'class=\"alt\"' : ''?>><td><div class=data><?php echo $display_value ?></div></td><td><div>\n    <a href=\"edit.php?s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>&amp;type=set&amp;key=<?php echo urlencode($_GET['key'])?>&amp;value=<?php echo urlencode($value)?>\"><img src=\"images/edit.png\" width=\"16\" height=\"16\" title=\"Edit\" alt=\"[E]\"></a>\n  </div></td><td><div>\n    <a href=\"delete.php?s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>&amp;type=set&amp;key=<?php echo urlencode($_GET['key'])?>&amp;value=<?php echo urlencode($value)?>\" class=\"delval\"><img src=\"images/delete.png\" width=\"16\" height=\"16\" title=\"Delete\" alt=\"[X]\"></a>\n  </div></td></tr>\n<?php $alt = !$alt; } ?>\n\n<?php }\n\n\n\n// ZSet\nelse if ($type == 'zset') { ?>\n\n<table>\n<tr><th><div>Score</div></th><th><div>Value</div></th><th><div>&nbsp;</div></th><th><div>&nbsp;</div></th></tr>\n\n<?php foreach ($values as $value) {\n  $score         = $redis->zScore($_GET['key'], $value);\n  $display_value = $redis->exists($value) ? '<a href=\"view.php?s='.$server['id'].'&d='.$server['db'].'&key='.urlencode($value).'\">'.format_html($value).'</a>' : format_html($value);\n?>\n  <tr <?php echo $alt ? 'class=\"alt\"' : ''?>><td><div><?php echo $score?></div></td><td><div class=data><?php echo $display_value ?></div></td><td><div>\n    <a href=\"edit.php?s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>&amp;type=zset&amp;key=<?php echo urlencode($_GET['key'])?>&amp;score=<?php echo $score?>&amp;value=<?php echo urlencode($value)?>\"><img src=\"images/edit.png\" width=\"16\" height=\"16\" title=\"Edit\" alt=\"[E]\"></a>\n    <a href=\"delete.php?s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>&amp;type=zset&amp;key=<?php echo urlencode($_GET['key'])?>&amp;value=<?php echo urlencode($value)?>\" class=\"delval\"><img src=\"images/delete.png\" width=\"16\" height=\"16\" title=\"Delete\" alt=\"[X]\"></a>\n  </div></td></tr>\n<?php $alt = !$alt; } ?>\n\n<?php }\n\nif ($type != 'string') { ?>\n  </table>\n\n  <p>\n  <a href=\"edit.php?s=<?php echo $server['id']?>&amp;d=<?php echo $server['db']?>&amp;type=<?php echo $type?>&amp;key=<?php echo urlencode($_GET['key'])?>\" class=\"add\">Add another value</a>\n  </p>\n<?php }\n\nif (isset($pagination)) {\n  echo $pagination;\n}\n\nrequire 'includes/footer.inc.php';\n\n"
        }
      ]
    }
  ]
}