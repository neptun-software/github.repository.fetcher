{
  "metadata": {
    "timestamp": 1736712174194,
    "page": 838,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "barbushin/php-console",
      "stars": 1342,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.177734375,
          "content": "* text=auto\n* eol=lf\n\n/tests export-ignore\n/.gitattributes export-ignore\n/.gitignore export-ignore\n/.travis.yml export-ignore\n/phpunit.xml.dist export-ignore\n/README.md export-ignore"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "vendor\nbuild\ncomposer.lock"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.69140625,
          "content": "language: php\n\nsudo: false\n\nmatrix:\n  include:\n    - php: 5.4\n      env: COLLECT_COVERAGE=true\n    - php: 5.5\n      env: COLLECT_COVERAGE=true\n    - php: 5.6\n      env: COLLECT_COVERAGE=true\n    - php: 7.0\n      env: COLLECT_COVERAGE=true\n    - php: 7.1\n      env: COLLECT_COVERAGE=true\n  fast_finish: true\n\ncache:\n  directories:\n    - $HOME/.composer/cache\n\nbefore_install:\n  - travis_retry composer self-update\n\ninstall:\n  - travis_retry composer update --no-interaction --prefer-source\n\nscript:\n  - composer test-cover\n\nafter_script:\n - if [ \"$COLLECT_COVERAGE\" == \"true\" ]; then wget https://scrutinizer-ci.com/ocular.phar && php ocular.phar code-coverage:upload --format=php-clover build/clover.xml; fi\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2011 Sergey Barbushin <barbushin@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.5625,
          "content": "# PHP Console server library\n\n[![Author](http://img.shields.io/badge/author-@barbushin-blue.svg?style=flat-square)](https://www.linkedin.com/in/barbushin)\n[![GitHub release](https://img.shields.io/github/release/barbushin/php-console.svg?maxAge=2592000&style=flat-square)](https://packagist.org/packages/php-console/php-console)\n[![Coverage Status](https://img.shields.io/scrutinizer/coverage/g/barbushin/php-console.svg?style=flat-square)](https://scrutinizer-ci.com/g/barbushin/php-console/code-structure)\n[![Build Status](https://img.shields.io/travis/barbushin/php-console/master.svg?style=flat-square)](https://travis-ci.org/barbushin/php-console)\n[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE)\n[![Packagist](https://img.shields.io/packagist/dt/php-console/php-console.svg?maxAge=86400&style=flat-square)](https://packagist.org/packages/php-console/php-console)\n\nPHP Console allows you to handle PHP errors & exceptions, dump variables, execute PHP code remotely and many other things using [Google Chrome extension PHP Console](https://chrome.google.com/webstore/detail/php-console/nfhmhhlpfleoednkpnnnkolmclajemef) and [PhpConsole server library](https://github.com/barbushin/php-console).\n\n### Overview\n\n* See [presentation video](http://www.youtube.com/watch?v=_4kG-Zrs2Io).\n* Install Google Chrome extension [PHP Console](https://chrome.google.com/webstore/detail/php-console/nfhmhhlpfleoednkpnnnkolmclajemef).\n* See how it works on [live demo](http://consle.com/instance/examples) page.\n* PHP Console extension [features list and screenshots](https://github.com/barbushin/php-console/wiki/PHP-Console-extension-features).\n* PHP Console server library [features list](https://github.com/barbushin/php-console/wiki/PHP-Console-server-features).\n* Chrome extension source code https://github.com/barbushin/php-console-extension \n\n### Requirements\n\n* [PHP Console extension](https://chrome.google.com/webstore/detail/php-console/nfhmhhlpfleoednkpnnnkolmclajemef) must be installed on Google Chrome ([extension source code](https://github.com/barbushin/php-console-extension) is also on GitHub)\n* PHP 5.3 (or later) on server.\n\n*For projects with PHP < 5.3 you can try to use old [deprecated version](https://groups.google.com/forum/?hl=ru#!forum/php-console-deprecated-version) of PHP Console. But mention that actual last version is much more functional.*\n\n# Installation\n\n### Composer\n\n\t{\n\t\t\"require\": {\n\t\t\t\"php-console/php-console\": \"^3.1\"\n\t\t}\n\t}\n\nOr\n\n\t$ composer require php-console/php-console\n\n### Monolog handler\nhttps://github.com/Seldaek/monolog/blob/master/src/Monolog/Handler/PHPConsoleHandler.php\n\n### Symfony framework bundle\nhttps://github.com/Vitre/php-console-bundle\n\n### Yii framework extension\nhttp://www.yiiframework.com/extension/php-console\n\n### Slim framework\nhttps://github.com/amenadiel/SlimPHPConsole (thanks to [@amenadiel](https://github.com/amenadiel))\n\n### Silex framework service provider\nhttps://github.com/barbushin/php-console-silex (thanks to [@Chi-teck](https://github.com/Chi-teck))\n\n### Laravel 4.* & 5.* framework service provider\nhttps://github.com/barbushin/php-console-laravel\n\n### Drupal CMS module\nhttps://drupal.org/project/pc (thanks to [@Chi-teck](https://github.com/Chi-teck))\n\n### WordPress plugin\nhttps://github.com/unfulvio/wp-php-console (thanks to [@nekojira](https://github.com/unfulvio))\n\n# Usage\n\nYou can try most of PHP Console features on [live demo](http://consle.com/instance/examples) server.\n\n## Connector\n\nThere is a [PhpConsole\\Connector](src/PhpConsole/Connector.php) class that initializes connection between PHP server and Google Chrome extension. Connection is initialized when [PhpConsole\\Connector](src/PhpConsole/Connector.php) instance is initialized:\n\n\t$connector = PhpConsole\\Connector::getInstance();\n\nAlso it will be initialized when you call `PhpConsole\\Handler::getInstance()` or `PhpConsole\\Helper::register()`.\n\n### Communication protocol\n\nPHP Console uses headers to communicate with client, so `PhpConsole\\Connector::getInstance()` or `PhpConsole\\Handler::getInstance()` must be called before any output. If headers are sent before script shut down or PHP Console response package size is out of web-server headers size limit, then PHP Console will store response data in [PhpConsole\\Storage](src/PhpConsole/Storage.php) implementation and send it to client in STDOUT, in additional HTTP request. So there is no limit in PHP Console response package size.\n\n### Troubleshooting with $_SESSION handler overridden in some frameworks\n\nBy default PHP Console uses [PhpConsole\\Storage\\Session](src/PhpConsole/Storage/Session.php) for postponed responses, so all temporary data will be stored in `$_SESSION`. But there is some problem with frameworks like [Symfony](http://symfony.com) and [Laravel](http://laravel.com) that overrides PHP session handler. In this case you should use any other [PhpConsole\\Storage](src/PhpConsole/Storage.php) implementation like:\n\n\t// Can be called only before PhpConsole\\Connector::getInstance() and PhpConsole\\Handler::getInstance()\n\tPhpConsole\\Connector::setPostponeStorage(new PhpConsole\\Storage\\File('/tmp/pc.data'));\n\nSee all available [PhpConsole\\Storage](src/PhpConsole/Storage.php) implementations in [/src/PhpConsole/Storage](src/PhpConsole/Storage).\n\n### Strip sources base path\n\nIf you want to see errors sources and traces paths more short, call:\n\n\t$connector->setSourcesBasePath('/path/to/project');\n\nSo paths like `/path/to/project/module/file.php` will be displayed on client as `/module/file.php`.\n\n### Works with different server encodings\n\nIf your internal server encoding is not UTF-8, so you need to call:\n\n\t$connector->setServerEncoding('CP1251');\n\n### Initialization performance\n\nPhpConsole server library is optimized for lazy initialization only for clients that have Google Chrome extension PHP Console installed. There is [example](examples/features/highload_optimization.php) of correct initialization PhpConsole on your production server.\n\n## Protect connection\n\n### Protect by password\n\n[![ScreenShot](http://consle.com/res/screenshot/auth_420.png)](http://consle.com/instance/examples/#protect_by_password)\n\n\t$connector->setPassword('yohoho123', true);\n\nClients will need to enter a password to get access to PHP Console server data. All passwords are stored on client as SHA-256 hashes. Second argument says that the PHP Console authorization token will depend on the client IP.\n\n### SSL only connection mode\n\n\t$connector->enableSslOnlyMode();\n\nSo all PHP Console clients will be automatically redirected to HTTPS.\n\n### Protect connection by list of allowed IP masks\n\n\t$connector->setAllowedIpMasks(array('192.168.*.*', '2001:0:5ef5:79fb:*:*:*:*'));\n\n## Handle errors\n\n[![ScreenShot](http://consle.com/res/screenshot/errors_420.png)](http://consle.com/instance/examples/#handle_errors)\n\nThere is a [PhpConsole\\Handler](src/PhpConsole/Handler.php) class that initializes PHP errors & exceptions handlers and provides the next features:\n\n* Handle PHP errors (+fatal & memory limit errors) and exceptions.\n* Ignore repeated errors.\n* Call previously defined errors and exceptions handlers.\n* Handle caught exceptions using `$handler->handleException($exception)`.\n* Debug vars using `$handler->debug($var, 'some.tags')`.\n\nInitialize `PhpConsole\\Handler` in the top of your main project script:\n\n\t$handler = PhpConsole\\Handler::getInstance();\n\t/* You can override default Handler behavior:\n\t\t$handler->setHandleErrors(false);  // disable errors handling\n\t\t$handler->setHandleExceptions(false); // disable exceptions handling\n\t\t$handler->setCallOldHandlers(false); // disable passing errors & exceptions to prviously defined handlers\n\t*/\n\t$handler->start(); // initialize handlers\n\n\n## Debug vars\n\n[![ScreenShot](http://consle.com/res/screenshot/debug_420.png)](http://consle.com/instance/examples/#debug_vars)\n\nPHP Console has multifunctional and smart vars dumper that allows to\n\n* Dump any type variable.\n* Dump protected and private objects properties.\n* Limit dump by level, items count, item size and total size(see `$connector->getDumper()`).\n* Dump objects class name.\n* Smart dump of callbacks and Closure.\n* Detect dump call source & trace(call `$connector->getDebugDispatcher()->detectTraceAndSource = true`).\n\n\n### How to call\n\n**Longest** native debug method call:\n\n\tPhpConsole\\Connector::getInstance()->getDebugDispatcher()->dispatchDebug($var, 'some.tags');\n\n**Shorter** call debug from Handler:\n\n\tPhpConsole\\Handler::getInstance()->debug($var, 'some.tags');\n\n**Shortest** call debug using global `PC` class\n\n\tPhpConsole\\Helper::register(); // it will register global PC class\n\t// ...\n\tPC::debug($var, 'tag');\n\tPC::tag($var);\n\n**Custom** call debug by user defined function\n\n\tfunction d($var, $tags = null) {\n\t\tPhpConsole\\Connector::getInstance()->getDebugDispatcher()->dispatchDebug($var, $tags, 1);\n\t}\n\td($var, 'some.tags');\n\n### Tags\n\n* Debug tags argument is optional.\n* Tags is a string with tags separated by dot(e.g. \"low.db\").\n* Tags can be used to identify what exactly var was dumped.\n* You can configure client to ignore displaying some tags.\n\n## Remote PHP code execution\n\n[![ScreenShot](http://consle.com/res/screenshot/eval_terminal_420.png)](http://consle.com/instance/examples/#eval_terminal)\n\nPHP Console provide a way to execute PHP code on your server remotely, from Google Chrome extension terminal.\n\n* Remote PHP code execution allowed only in password protected mode\n* Every eval request is signed with unique SHA-256 token\n* Result contains: `output`, `return` and `time` data\n* Errors & exception occurred during PHP code execution will be handled\n\n\n### Configuration\n\n\t$connector = PhpConsole\\Connector::getInstance();\n\t$connector->setPassword($password);\n\n\t// Configure eval provider\n\t$evalProvider = $connector->getEvalDispatcher()->getEvalProvider();\n\t$evalProvider->addSharedVar('post', $_POST); // so \"return $post\" code will return $_POST\n\t$evalProvider->setOpenBaseDirs(array(__DIR__)); // see http://php.net/open-basedir\n\n\t$connector->startEvalRequestsListener(); // must be called in the end of all configurations\n\n\n## PSR-3 logger implementation\n\nThere is PHP Console implementation of [PSR-3](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md) interface. to integrate PHP Console with PSR-3 compitable loggers(e.g. [Monolog](https://github.com/Seldaek/monolog)). See [PhpConsole\\PsrLogger](src/PhpConsole/PsrLogger.php).\n\n## Jump to file\n\nRead [this article](https://github.com/barbushin/php-console/wiki/Jump-to-file) if you want to configure PHP Console extension to open errors/exceptions source file:line right in your IDE, just by click on the button in Notification popup.\n\n## Easy migrate from PhpConsole `v1.x` to `v3.x`\n\nIf you have used PhpConsole `v1.x` and want to migrate to `v3.x`  without any code changes, so just use [PhpConsole\\OldVersionAdapter](src/PhpConsole/OldVersionAdapter.php):\n\n\tPhpConsole\\OldVersionAdapter::register(); // register PhpConsole v1.x class emulator\n\n\t// Call old PhpConsole v1 methods as is\n\tPhpConsole::start(true, true, $_SERVER['DOCUMENT_ROOT']);\n\tPhpConsole::debug('Debug using old method PhpConsole::debug()', 'some,tags');\n\tdebug('Debug using old function debug()', 'some,tags');\n\techo $undefinedVar;\n\tPhpConsole::getInstance()->handleException(new Exception('test'));\n\n\t// Call new PhpConsole methods, if you want :)\n\tPhpConsole\\Connector::getInstance()->setServerEncoding('cp1251');\n\tPhpConsole\\Helper::register();\n\tPC::debug('Debug using new methods');\n\nBut, anyway, if you can't migrate to new version of PHP Console because of using PHP < 5.3 on your servers, then you can use old [deprecated version](https://groups.google.com/forum/?hl=ru#!forum/php-console-deprecated-version) of PHP Console.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.8623046875,
          "content": "{\n\t\"name\": \"php-console/php-console\",\n\t\"description\": \"PHP library for Google Chrome extension \\\"PHP Console\\\".\",\n\t\"keywords\": [\n\t\t\"PHP\",\n\t\t\"errors\",\n\t\t\"debug\",\n\t\t\"chrome\",\n\t\t\"error handler\",\n\t\t\"google chrome\"\n\t],\n\t\"homepage\": \"https://github.com/barbushin/php-console\",\n\t\"license\": \"MIT\",\n\t\"type\": \"library\",\n\t\"authors\": [\n\t\t{\n\t\t\t\"name\": \"Sergey Barbushin\",\n\t\t\t\"homepage\": \"http://linkedin.com/in/barbushin\",\n\t\t\t\"email\": \"barbushin@gmail.com\"\n\t\t}\n\t],\n\t\"support\": {\n\t\t\"issues\": \"https://github.com/barbushin/php-console/issues\"\n\t},\n\t\"require\": {\n\t\t\"php\": \">=5.3.0\"\n\t},\n\t\"require-dev\": {\n\t\t\"phpunit/phpunit\": \"^4.8\",\n\t\t\"ext-mbstring\": \"*\",\n\t\t\"psr/log\": \"^1.0\"\n\t},\n\t\"autoload\": {\n\t\t\"psr-4\": {\n\t\t\t\"PhpConsole\\\\\": \"src/PhpConsole\"\n\t\t}\n\t},\n\t\"autoload-dev\": {\n\t\t\"psr-4\": {\n\t\t\t\"PhpConsole\\\\\": \"test\"\n\t\t}\n\t},\n\t\"scripts\": {\n\t\t\"test\": \"phpunit\",\n\t\t\"test-cover\": \"phpunit --coverage-text\"\n\t}\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 1.2421875,
          "content": "<phpunit backupGlobals=\"true\"\n         backupStaticAttributes=\"true\"\n         cacheTokens=\"true\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         forceCoversAnnotation=\"false\"\n         mapTestClassNameToCoveredClassName=\"false\"\n         processIsolation=\"false\"\n         stopOnError=\"true\"\n         stopOnFailure=\"true\"\n         stopOnIncomplete=\"true\"\n         stopOnSkipped=\"false\"\n         bootstrap=\"test/bootstrap.php\"\n         verbose=\"true\"\n>\n\n\t<php>\n\t\t<env name=\"PC_TEST_SERVER\" value=\"http://localhost/php-console/test/server.php\"/>\n\t</php>\n\n\t<testsuites>\n\t\t<testsuite name=\"PHP Console Test Suite\">\n\t\t\t<directory>test/Test</directory>\n\t\t\t<exclude>test/Test/Remote/</exclude>\n\t\t</testsuite>\n\t</testsuites>\n\n\t<filter>\n\t\t<whitelist>\n\t\t\t<directory suffix=\".php\">src</directory>\n\t\t</whitelist>\n\t</filter>\n\n\t<logging>\n\t\t<log type=\"tap\" target=\"build/report.tap\"/>\n\t\t<log type=\"junit\" target=\"build/report.junit.xml\"/>\n\t\t<log type=\"coverage-html\" target=\"build/coverage\" charset=\"UTF-8\" yui=\"true\" highlight=\"true\"/>\n\t\t<log type=\"coverage-text\" target=\"build/coverage.txt\"/>\n\t\t<log type=\"coverage-clover\" target=\"build/clover.xml\"/>\n\t</logging>\n\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}