{
  "metadata": {
    "timestamp": 1736712082842,
    "page": 640,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spatie/period",
      "stars": 1660,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3056640625,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at https://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3857421875,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n# Ignore all test and documentation with \"export-ignore\".\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/.travis.yml        export-ignore\n/phpunit.xml.dist   export-ignore\n/.scrutinizer.yml   export-ignore\n/tests              export-ignore\n/.editorconfig      export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.09375,
          "content": "build\ncomposer.lock\nphpunit.xml\nvendor\ncoverage\n.php-cs-fixer.cache\n.phpunit.result.cache\n.idea\n"
        },
        {
          "name": ".php-cs-fixer.php",
          "type": "blob",
          "size": 1.2978515625,
          "content": "<?php\n\n$finder = Symfony\\Component\\Finder\\Finder::create()\n    ->notPath('bootstrap/*')\n    ->notPath('storage/*')\n    ->notPath('vendor')\n    ->in([\n        __DIR__ . '/src',\n        __DIR__ . '/tests',\n    ])\n    ->name('*.php')\n    ->notName('*.blade.php')\n    ->ignoreDotFiles(true)\n    ->ignoreVCS(true);\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules([\n        '@PSR12' => true,\n        'array_syntax' => ['syntax' => 'short'],\n        'ordered_imports' => ['sort_algorithm' => 'alpha'],\n        'no_unused_imports' => true,\n        'not_operator_with_successor_space' => true,\n        'trailing_comma_in_multiline' => true,\n        'phpdoc_scalar' => true,\n        'unary_operator_spaces' => true,\n        'binary_operator_spaces' => true,\n        'blank_line_before_statement' => [\n            'statements' => ['break', 'continue', 'declare', 'return', 'throw', 'try'],\n        ],\n        'phpdoc_single_line_var_spacing' => true,\n        'phpdoc_var_without_name' => true,\n        'class_attributes_separation' => [\n            'elements' => [\n                'method' => 'one', 'property' => 'one',\n            ],\n        ],\n        'method_argument_space' => [\n            'on_multiline' => 'ensure_fully_multiline',\n            'keep_multiple_spaces_after_comma' => true,\n        ]\n    ])\n    ->setFinder($finder);\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 5.4267578125,
          "content": "# Changelog\n\nAll notable changes to `period` will be documented in this file\n\n## 2.4.0 - 2023-02-20\n\n### What's Changed\n\n- Refactor tests to pest by @AyoobMH in https://github.com/spatie/period/pull/115\n- Add PHP 8.2 support by @patinthehat in https://github.com/spatie/period/pull/118\n- Add Dependabot Automation by @patinthehat in https://github.com/spatie/period/pull/117\n- Bump dependabot/fetch-metadata from 1.3.5 to 1.3.6 by @dependabot in https://github.com/spatie/period/pull/119\n- Implement PeriodCollection Union by @EriBloo in https://github.com/spatie/period/pull/116\n\n### New Contributors\n\n- @AyoobMH made their first contribution in https://github.com/spatie/period/pull/115\n- @dependabot made their first contribution in https://github.com/spatie/period/pull/119\n- @EriBloo made their first contribution in https://github.com/spatie/period/pull/116\n\n**Full Changelog**: https://github.com/spatie/period/compare/2.3.5...2.4.0\n\n## 2.3.5 - 2022-10-03\n\nRevert previous release\n\n## Make Precision consts public - 2022-10-03\n\n**Full Changelog**: https://github.com/spatie/period/compare/2.3.3...2.3.4\n\n## 2.3.3 - 2022-03-03\n\n**Full Changelog**: https://github.com/spatie/period/compare/2.3.2...2.3.3\n\n## 2.3.2 - 2021-12-23\n\n## What's Changed\n\n- Error \"Undefined array key 0\" fix by @aliowacom in https://github.com/spatie/period/pull/105\n\n## New Contributors\n\n- @aliowacom made their first contribution in https://github.com/spatie/period/pull/105\n\n**Full Changelog**: https://github.com/spatie/period/compare/2.3.1...2.3.2\n\n## 2.3.1 - 2021-12-01\n\n## What's Changed\n\n- Add PHP 8.1 Support by @patinthehat in https://github.com/spatie/period/pull/102\n- Improve PHP 8.1.0 support by @kyryl-bogach in https://github.com/spatie/period/pull/103\n\n## New Contributors\n\n- @patinthehat made their first contribution in https://github.com/spatie/period/pull/102\n- @kyryl-bogach made their first contribution in https://github.com/spatie/period/pull/103\n\n**Full Changelog**: https://github.com/spatie/period/compare/2.3.0...2.3.1\n\n## 2.3.0 - 2021-10-14\n\n- Add `PeriodCollection::sort()` (#97)\n\n## 2.2.0 - 2021-10-13\n\n- Add `PeriodCollection::unique()` (#96)\n\n## 2.1.3 - 2021-10-07\n\n- Don't initialize Period::asString in constructor\n\n## 2.1.2 - 2021-10-07\n\n- Fix subtraction of empty PeriodCollection\n\n## 2.1.1 - 2021-06-11\n\n- Reindex collection array after filtering values (#87)\n\n## 2.1.0 - 2021-03-24\n\n- Add `PeriodCollection::subtract(PeriodCollection|Period $others)` (#84)\n- Rename parameter `PeriodCollection::overlap(PeriodCollection $others)`\n- Rename parameter `PeriodCollection::overlapAll(PeriodCollection ...$others)`\n\n## 2.0.0 - 2021-03-17\n\n- Bump required PHP version to `^8.0`\n- Fix bug with `overlapAll` when no overlap\n- All period properties are now typed, this affects you if you extend from `Period` or `PeriodCollection`\n- Return types of several methods have been changed from `Period` to `static`\n- `Period::duration()` returns an instance of `PeriodDuration`\n- `Period::length()` now uses the Period's precision instead of always returning days\n- `Period::overlap()` renamed to `Period::overlapAny()`\n- `Period::overlapSingle()` renamed to `Period::overlap()`\n- `Period::diff()` renamed to `Period::subtract()`\n- `Period::subtract()` (previously `diff`) no longer returns the gap when there's no overlap\n- `Period::diffSingle()` renamed to `Period::diffSymmetric()`\n- `Period::contains()` now accepts both `DateTimeInterface` and `Period`\n- `PeriodCollection::overlap()` now accepts one or several periods\n- Renamed all getters like `getIncludedEnd()` and `getStart()` to `includedEnd()` and `start()`, etc.\n- Add `Period::fromString()`\n- Add `Period::asString()`\n\n## 1.6.0 - 2021-02-24\n\n- Add `Period::renew` (#74)\n\n## 1.5.3 - 2020-12-03\n\n- PHP8 compatibility\n\n## 1.5.2 - 2020-11-19\n\n- Keep timezone when boundaries are timezoned (#71)\n\n## 1.5.1 - 2020-10-21\n\n- Support multiple precisions when checking touchesWith (#68)\n\n## 1.5.0 - 2020-03-31\n\n- Add `filter` to `PeriodCollection`\n\n## 1.4.5 - 2020-02-05\n\n- Fix for PeriodCollection::gaps() with excluded boundaries (#58)\n\n## 1.4.4 - 2019-08-05\n\n- ~Performance improvement in `Period::contains()` (#46)~ edit: this change wasn't merged and targeted at 2.0\n\n## 1.4.3 - 2019-07-09\n\n- ~Improve iterator performance (#42)~ edit: this change wasn't merged and targeted at 2.0\n\n## 1.4.2 - 2019-05-27\n\n- Allow extension of Period that forces extension of DateTimeImmutable (#38)\n\n## 1.4.1 - 2019-04-23\n\n- Support PeriodCollection::make()\n- Improved PeriodCollection doc blocks\n\n## 1.4.0 - 2019-04-23\n\n- Add `map` and `reduce` to `PeriodCollection`\n\n## 1.3.1 - 2019-04-19\n\n- Remove unused code\n\n## 1.3.0 - 2019-04-19\n\n- Add period collection add\n\n## 1.2.0 - 2019-04-19\n\n- Add period collection intersect\n\n## 1.1.3 - 2019-04-05\n\n- Even better docblock support for static return types\n\n## 1.1.2 - 2019-04-05\n\n- Better docblock support for static return types\n\n## 1.1.1 - 2019-02-01\n\n- Fix bug with null element in diff\n\n## 1.1.0 - 2019-01-26\n\n- Make Period iterable\n\n## 1.0.0 - 2019-01-17\n\n- First stable release\n\n## 0.5.1 - 2019-01-14\n\n- Fix bug with precision not being correctly copied\n\n## 0.5.0 - 2019-01-09\n\n- Add boundary and precision support\n\n## 0.4.1 - 2019-01-08\n\n- No overlap returns empty collection\n\n## 0.4.0 - 2018-12-19\n\n- Add visualizer\n\n## 0.3.3 - 2018-12-18\n\n- Support edge case for two period diffs\n\n## 0.3.2 - 2018-12-11\n\n- Add better return types to support inherited periods\n\n## 0.3.0 - 2018-11-30\n\n- Add `Period::contains`\n\n## 0.2.0 - 2018-11-27\n\n- Initial dev release\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.064453125,
          "content": "The MIT License (MIT)\n\nCopyright (c) Spatie bvba <info@spatie.be>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.7197265625,
          "content": "\n[<img src=\"https://github-ads.s3.eu-central-1.amazonaws.com/support-ukraine.svg?t=1\" />](https://supportukrainenow.org)\n\n# Complex period comparisons\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/spatie/period.svg?style=flat-square)](https://packagist.org/packages/spatie/period)\n[![Quality Score](https://img.shields.io/scrutinizer/g/spatie/period.svg?style=flat-square)](https://scrutinizer-ci.com/g/spatie/period)\n[![Total Downloads](https://img.shields.io/packagist/dt/spatie/period.svg?style=flat-square)](https://packagist.org/packages/spatie/period)\n\nThis package adds support for comparing multiple dates with each other.\nYou can calculate the overlaps and differences between n-amount of periods,\nas well as some more basic comparisons between two periods.\n\nPeriods can be constructed from any type of `DateTime` implementation, \nmaking this package compatible with custom `DateTime` implementations like\n[Carbon](https://carbon.nesbot.com)\n(see [cmixin/enhanced-period](https://github.com/kylekatarnls/enhanced-period) to\nconvert directly from and to CarbonPeriod).\n\nPeriods are always immutable, there's never the worry about your input dates being changed. \n\n## Support us\n\n[<img src=\"https://github-ads.s3.eu-central-1.amazonaws.com/period.jpg?t=1\" width=\"419px\" />](https://spatie.be/github-ad-click/period)\n\nWe invest a lot of resources into creating [best in class open source packages](https://spatie.be/open-source). You can support us by [buying one of our paid products](https://spatie.be/open-source/support-us).\n\nWe highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You'll find our address on [our contact page](https://spatie.be/about-us). We publish all received postcards on [our virtual postcard wall](https://spatie.be/open-source/postcards).\n\n## Installation\n\nYou can install the package via composer:\n\n```bash\ncomposer require spatie/period\n```\n\n## Usage\n\n### Creating periods\n\nYou're encouraged to create periods using their static constructor:\n\n```php\n$period = Period::make('2021-01-01', '2021-01-31');\n```\n\nYou can manually construct a period, but you'll need to manually provide its **precision** and **boundaries**. Using `Period::make`, the default precision (`Precision::DAY()`) and default boundaries (`Boundaries::EXCLUDE_NONE()`) are used. \n\nBefore discussing the API provided by this package, it's important to understand both how precision and boundaries are used.\n\n#### Precision\n\nDate precision is of utmost importance if you want to reliably compare two periods.\nThe following example:\n\n> Given two periods: `[2021-01-01, 2021-01-15]` and `[2021-01-15, 2021-01-31]`; do they overlap?\n\nAt first glance the answer is \"yes\": they overlap on `2021-01-15`. \nBut what if the first period ends at `2021-01-15 10:00:00`, \nwhile the second starts at `2021-01-15 15:00:00`? \nNow they don't anymore!\n\nThis is why this package requires you to specify a precision with each period. \nOnly periods with the same precision can be compared.\n\nA more in-depth explanation on why precision is so important can be found [here](https://stitcher.io/blog/comparing-dates).\nA period's precision can be specified when constructing that period:\n\n```php\nPeriod::make('2021-01-01', '2021-02-01', Precision::DAY());\n```\n\nThe default precision is set on days. These are the available precision options:\n\n```php\nPrecision::YEAR()\nPrecision::MONTH()\nPrecision::DAY()\nPrecision::HOUR()\nPrecision::MINUTE()\nPrecision::SECOND()\n```\n\n#### Boundaries\n\nBy default, period comparisons are done with included boundaries. \nThis means that these two periods overlap:\n\n```php\n$a = Period::make('2021-01-01', '2021-02-01');\n$b = Period::make('2021-02-01', '2021-02-28');\n\n$a->overlapsWith($b); // true\n```\n\nThe length of a period will also include both boundaries:\n\n```php\n$a = Period::make('2021-01-01', '2021-01-31');\n\n$a->length(); // 31\n```\n\nIt's possible to override the boundary behaviour:\n\n```php\n$a = Period::make('2021-01-01', '2021-02-01', boundaries: Boundaries::EXCLUDE_END());\n$b = Period::make('2021-02-01', '2021-02-28', boundaries: Boundaries::EXCLUDE_END());\n\n$a->overlapsWith($b); // false\n```\n\nThere are four types of boundary exclusion:\n\n```php\nBoundaries::EXCLUDE_NONE();\nBoundaries::EXCLUDE_START();\nBoundaries::EXCLUDE_END();\nBoundaries::EXCLUDE_ALL();\n```\n\n### Reference\n\nThe `Period` class offers a rich API to interact and compare with other periods and collections of periods. Take into account that only periods with the same precision can be compared:\n\n- `startsBefore(DateTimeInterface $date): bool`: whether a period starts before a given date.\n- `startsBeforeOrAt(DateTimeInterface $date): bool`: whether a period starts before or at a given date.\n- `startsAfter(DateTimeInterface $date): bool`: whether a period starts after a given date.\n- `startsAfterOrAt(DateTimeInterface $date): bool`: whether a period starts after or at a given date.\n- `startsAt(DateTimeInterface $date): bool`: whether a period starts at a given date.\n- `endsBefore(DateTimeInterface $date): bool`: whether a period ends before a given date.\n- `endsBeforeOrAt(DateTimeInterface $date): bool`: whether a period end before or at a given date.\n- `endsAfter(DateTimeInterface $date): bool`: whether a period ends after a given date.\n- `endsAfterOrAt(DateTimeInterface $date): bool`: whether a period end after or at a given date.\n- `endsAt(DateTimeInterface $date): bool`: whether a period starts ends at a given date.\n- `overlapsWith(Period $period): bool`: whether a period overlaps with another period.\n- `touchesWith(Period $other): bool`: whether a period touches with another period.\n- `contains(DateTimeInterface|Period $other): bool`: whether a period contains another period _or_ a single date.\n- `equals(Period $period): bool`: whether a period equals another period.\n\n---\n\nOn top of comparisons, the `Period` class also offers a bunch of operations:\n\n### `overlap(Period ...$others): ?static`\n\nOverlaps two or more periods on each other. The resulting period will be the union of all other periods combined.\n\n![](./docs/img/period-overlap.png)\n\n### `overlapAny(Period ...$others): PeriodCollection`\n\nOverlaps two or more periods on each other. Whenever two or more periods overlap, that overlapping period is added to a collection which will be returned as the final result.\n\n![](./docs/img/period-overlap-any.png)\n\n### `subtract(Period ...$others): PeriodCollection`\n\nSubtracts one or more periods from the main period. This is the inverse operation of overlap.\n\n![](./docs/img/period-subtract.png)\n\n### `gap(Period $period): ?static`\n\nGets the gap between two periods, or 0 if the periods overlap.\n\n![](./docs/img/period-gap.png)\n\n### `diffSymmetric(Period $other): PeriodCollection`\n\nPerforms a [symmetric diff](https://www.math-only-math.com/symmetric-difference-using-Venn-diagram.html) between two periods.\n\n![](./docs/img/period-diff-symmetric.png)\n\n### `renew(): static`\n\nRenew the current period, creating a new period with the same length that happens _after_ the current period.\n\n![](./docs/img/period-renew.png)\n\n---\n\nNext, the `Period` class also has some getters:\n\n- `isStartIncluded(): bool`\n- `isStartExcluded(): bool`\n- `isEndIncluded(): bool`\n- `isEndExcluded(): bool`\n- `start(): DateTimeImmutable`\n- `includedStart(): DateTimeImmutable`\n- `end(): DateTimeImmutable`\n- `includedEnd(): DateTimeImmutable`\n- `ceilingEnd(Precision::SECOND): DateTimeImmutable`\n- `length(): int`\n- `duration(): PeriodDuration`\n- `precision(): Precision`\n- `boundaries(): Boundaries`\n\n---\n\nThe `PeriodCollection` class represents a collection of periods and has some useful methods on its own:\n\n### `overlapAll(PeriodCollection ...$others): PeriodCollection`\n\nOverlaps all collection periods on each other.\n\n![](./docs/img/collection-overlap-all.png)\n\n### `subtract(PeriodCollection|Period ...$others): PeriodCollection`\n\nSubtracts a period or a collection of periods from a period collection.\n\n![](./docs/img/collection-subtract.png)\n\n### `boundaries(): ?Period` \n\nCreates a new period representing the outer boundaries of the collection.\n\n![](./docs/img/collection-boundaries.png)\n\n### `gaps(): static`\n\nGives the gaps for all periods within this collection.\n\n![](./docs/img/collection-gaps.png)\n\n### `intersect(Period $intersection): static`\n\nIntersects given period with every period within a collection. The result is a new collection of overlapping periods between given period and every period in the collection. When there's no overlap, the original period is discarded.\n\n![](./docs/img/collection-intersect.png)\n\n### `union(): static`\n\nMerges all periods in collection with overlapping ranges.\n\n![](./docs/img/collection-union.png)\n\n---\n\nFinally, there are a few utility methods available on `PeriodCollection` as well:\n\n- `add(Period ...$periods): static`\n- `map(Closure $closure): static`:\n- `reduce(Closure $closure, $initial = null): mixed`: \n- `filter(Closure $closure): static`: \n- `isEmpty(): bool`:\n\n### Compatibility\n\nYou can construct a `Period` from any type of `DateTime` object such as Carbon:\n\n```php\nPeriod::make(Carbon::make('2021-01-01'), Carbon::make('2021-01-02'));\n```\n\nNote that as soon as a period is constructed, all further operations on it are immutable.\nThere's never the danger of changing the input dates.\n\nYou can iterate a `Period` like a regular `DatePeriod` with the precision specified on creation:\n\n```php\n$datePeriod = Period::make(Carbon::make('2021-01-01'), Carbon::make('2021-01-31'));\n\nforeach ($datePeriod as $date) {\n    /** @var DateTimeImmutable $date */\n    // 2021-01-01\n    // 2021-01-02\n    // ...\n    // (31 iterations)\n}\n\n$timePeriod = Period::make(Carbon::make('2021-01-01 00:00:00'), Carbon::make('2021-01-01 23:59:59'), Precision::HOUR());\n\nforeach ($timePeriod as $time) {\n    /** @var DateTimeImmutable $time */\n    // 2021-01-01 00:00:00\n    // 2021-01-01 01:00:00\n    // ...\n    // (24 iterations)\n}\n```\n\n### Visualizing periods\n\nYou can visualize one or more `Period` objects as well as `PeriodCollection`\nobjects to see how they related to one another:\n\n```php\n$visualizer = new Visualizer([\"width\" => 27]);\n\n$visualizer->visualize([\n    \"A\" => Period::make('2021-01-01', '2021-01-31'),\n    \"B\" => Period::make('2021-02-10', '2021-02-20'),\n    \"C\" => Period::make('2021-03-01', '2021-03-31'),\n    \"D\" => Period::make('2021-01-20', '2021-03-10'),\n    \"OVERLAP\" => new PeriodCollection(\n        Period::make('2021-01-20', '2021-01-31'),\n        Period::make('2021-02-10', '2021-02-20'),\n        Period::make('2021-03-01', '2021-03-10')\n    ),\n]);\n```\n\nAnd visualize will return the following string:\n\n```\nA          [========]\nB                      [==]\nC                           [========]\nD               [==============]\nOVERLAP         [===]  [==] [==]\n```\n\nThe visualizer has a configurable width provided upon creation\nwhich will control the bounds of the displayed periods:\n\n```php\n$visualizer = new Visualizer([\"width\" => 10]);\n```\n\n### Testing\n\n``` bash\ncomposer test\n```\n\n### Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information on what has changed recently.\n\n## Contributing\n\nPlease see [CONTRIBUTING](https://github.com/spatie/.github/blob/main/CONTRIBUTING.md) for details.\n\n### Security\n\nIf you've found a bug regarding security please mail [security@spatie.be](mailto:security@spatie.be) instead of using the issue tracker.\n\n## Postcardware\n\nYou're free to use this package, but if it makes it to your production environment we highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using.\n\nOur address is: Spatie, Kruikstraat 22, 2021 Antwerp, Belgium.\n\nWe publish all received postcards [on our company website](https://spatie.be/en/opensource/postcards).\n\n## Credits\n\n- [Brent Roose](https://github.com/brendt)\n- [All Contributors](../../contributors)\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.0634765625,
          "content": "{\n    \"name\": \"spatie/period\",\n    \"description\": \"Complex period comparisons\",\n    \"keywords\": [\n        \"spatie\",\n        \"period\"\n    ],\n    \"homepage\": \"https://github.com/spatie/period\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Brent Roose\",\n            \"email\": \"brent@spatie.be\",\n            \"homepage\": \"https://spatie.be\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.0\"\n    },\n    \"require-dev\": {\n        \"larapack/dd\": \"^1.1\",\n        \"nesbot/carbon\": \"^2.63\",\n        \"pestphp/pest\": \"^1.22\",\n        \"phpunit/phpunit\": \"^9.5\",\n        \"spatie/ray\": \"^1.31\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Spatie\\\\Period\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Spatie\\\\Period\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"scripts\": {\n        \"test\": \"vendor/bin/pest\",\n        \"test-coverage\": \"vendor/bin/pest --coverage\"\n    },\n    \"config\": {\n        \"sort-packages\": true,\n        \"allow-plugins\": {\n            \"pestphp/pest-plugin\": true\n        }\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.978515625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit bootstrap=\"vendor/autoload.php\"\n         backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         verbose=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n    <testsuites>\n        <testsuite name=\"Spatie Test Suite\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist>\n            <directory suffix=\".php\">src/</directory>\n        </whitelist>\n    </filter>\n    <logging>\n        <log type=\"tap\" target=\"build/report.tap\"/>\n        <log type=\"junit\" target=\"build/report.junit.xml\"/>\n        <log type=\"coverage-html\" target=\"build/coverage\"/>\n        <log type=\"coverage-text\" target=\"build/coverage.txt\"/>\n        <log type=\"coverage-clover\" target=\"build/logs/clover.xml\"/>\n    </logging>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}