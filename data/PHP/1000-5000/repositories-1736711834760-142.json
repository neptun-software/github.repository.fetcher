{
  "metadata": {
    "timestamp": 1736711834760,
    "page": 142,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chrisboulton/php-resque",
      "stars": 3427,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "vendor/\n*.swp\nphpunit.xml\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.333984375,
          "content": "language: php\nphp:\n  - 5.6\n  - 7.0\n  - 7.1\n  - hhvm\nmatrix:\n  exclude:\n    - php: hhvm\n      env: ENABLE_REDIS_EXT=1\nenv:\n  - ENABLE_REDIS_EXT=0\n  - ENABLE_REDIS_EXT=1\nbefore_script:\n  - sh -c \"if [ $ENABLE_REDIS_EXT -eq 1 ]; then echo \\\"extension=redis.so\\\" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini; fi\"\n  - composer install\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 5.5078125,
          "content": "## 1.3 (2013-??-??) - Current Master ##\n\n**Note:** This release introduces backwards incompatible changes with all previous versions of php-resque. Please see below for details.\n\n### Redisent (Redis Library) Replaced with Credis\n\nRedisent has always been the Redis backend for php-resque because of its lightweight nature. Unfortunately, Redisent is largely unmaintained.\n\n[Credis](https://github.com/colinmollenhour/credis) is a fork of Redisent, which among other improvements will automatically use the [phpredis](https://github.com/nicolasff/phpredis) native PHP extension if it is available. (you want this for speed, trust me)\n\nphp-resque now utilizes Credis for all Redis based operations. Credis automatically required and installed as a Composer dependency.\n\n### Composer Support\n\nComposer support has been improved and is now the recommended method for including php-resque in your project. Details on Composer support can be found in the Getting Started section of the readme.\n\n### Improved DSN Support\n\nChanges by iskandar introduce improved support for using DSNs to connect to Redis. You can now utilize the following formatted strings for the REDIS_BACKEND environment variable to connect:\n\n* `host`\n* `host:port`\n* `redis://host:port`\n* `redis://host:port/db`\n* `redis://user:pass@host:port/` (username is required but will be ignored)\n* `tcp://user:pass@host:port/` (username is required but will be ignored)\n\n### Other Improvements/Changes\n\n* **COMPATIBILITY BREAKING**: The bundled worker manager `resque.php` has been moved to `bin/resque`, and is available as `vendor/bin/resque` when php-resque is installed as a Composer package.\n* Restructure tests and test bootstrapping. Autoload tests via Composer (install test dependencies with `composer install --dev`)\n* Add `SETEX` to list of commands which supply a key as the first argument in Redisent (danhunsaker)\n* Fix an issue where a lost connection to Redis could cause an infinite loop (atorres757)\n* Add a helper method to `Resque_Redis` to remove the namespace applied to Redis keys (tonypiper)\n* Call beforePerform hook before retrieivng an instance of the job class (allows beforePerform to cancel a job with DontPerform before initialising your application)\n* Add `beforeEnqueue` hook, called before a job is placed on a queue\n\n## 1.2 (2012-10-13) ##\n\n**Note:** This release is largely backwards compatible with php-resque 1.1. The next release will introduce backwards incompatible changes (moving from Redisent to Credis), and will drop compatibility with PHP 5.2.\n\n* Allow alternate redis database to be selected when calling setBackend by supplying a second argument (patrickbajao)\n* Use `require_once` when including php-resque after the app has been included in the sample resque.php to prevent include conflicts (andrewjshults)\n* Wrap job arguments in an array to improve compatibility with ruby resque (warezthebeef)\n* Fix a bug where the worker would spin out of control taking the server with it, if the redis connection was interrupted even briefly. Use SIGPIPE to trap this scenario cleanly. (d11wtq)\n* Added support of Redis prefix (namespaces) (hlegius)\n* When reserving jobs, check if the payload received from popping a queue is a valid object (fix bug whereby jobs are reserved based on an erroneous payload) (salimane)\n* Re-enable autoload for class_exists in Job.php (humancopy)\n* Fix lost jobs when there is more than one worker process started by the same parent process (salimane)\n* Move include for resque before APP_INCLUDE is loaded in, so that way resque is available for the app\n* Avoid working with dirty worker IDs (salimane)\n* Allow UNIX socket to be passed to Resque when connecting to Redis (pedroarnal)\n* Fix typographical errors in PHP docblocks (chaitanyakuber)\n* Set the queue name on job instances when jobs are executed (chaitanyakuber)\n* Fix and add tests for Resque_Event::stopListening (ebernhardson)\n* Documentation cleanup (maetl)\n* Pass queue name to afterEvent callback\n* Only declare RedisException if it doesn't already exist (Matt Heath)\n* Add support for Composer\n* Fix missing and incorrect paths for Resque and Resque_Job_Status classes in demo (jjfrey)\n* Disable autoload for the RedisException class_exists call (scragg0x)\n* General tidy up of comments and files/folders\n\n## 1.1 (2011-03-27) ##\n\n* Update Redisent library for Redis 2.2 compatibility. Redis 2.2 is now required. (thedotedge)\n* Trim output of `ps` to remove any prepended whitespace (KevBurnsJr)\n* Use `getenv` instead of `$_ENV` for better portability across PHP configurations (hobodave)\n* Add support for sub-second queue check intervals (KevBurnsJr)\n* Ability to specify a cluster/multiple redis servers and consistent hash between them (dceballos)\n* Change arguments for jobs to be an array as they're easier to work with in PHP.\n* Implement ability to have setUp and tearDown methods for jobs, called before and after every single run.\n* Fix `APP_INCLUDE` environment variable not loading correctly.\n* Jobs are no longer defined as static methods, and classes are instantiated first. This change is NOT backwards compatible and requires job classes are updated.\n* Job arguments are passed to the job class when it is instantiated, and are accessible by $this->args. This change will break existing job classes that rely on arguments that have not been updated.\n* Bundle sample script for managing php-resque instances using monit\n* Fix undefined variable `$child` when exiting on non-forking operating systems\n* Add `PIDFILE` environment variable to write out a PID for single running workers\n\n## 1.0 (2010-04-18) ##\n\n* Initial release\n"
        },
        {
          "name": "HOWITWORKS.md",
          "type": "blob",
          "size": 9.05859375,
          "content": "*For an overview of how to __use__ php-resque, see `README.md`.*\n\nThe following is a step-by-step breakdown of how php-resque operates.\n\n## Enqueue Job ##\n\nWhat happens when you call `Resque::enqueue()`?\n\n1. `Resque::enqueue()` calls `Resque_Job::create()` with the same arguments it\n   received.\n2. `Resque_Job::create()` checks that your `$args` (the third argument) are\n   either `null` or in an array\n3. `Resque_Job::create()` generates a job ID (a \"token\" in most of the docs)\n4. `Resque_Job::create()` pushes the job to the requested queue (first\n   argument)\n5. `Resque_Job::create()`, if status monitoring is enabled for the job (fourth\n   argument), calls `Resque_Job_Status::create()` with the job ID as its only\n   argument\n6. `Resque_Job_Status::create()` creates a key in Redis with the job ID in its\n   name, and the current status (as well as a couple of timestamps) as its\n   value, then returns control to `Resque_Job::create()`\n7. `Resque_Job::create()` returns control to `Resque::enqueue()`, with the job\n   ID as a return value\n8. `Resque::enqueue()` triggers the `afterEnqueue` event, then returns control\n   to your application, again with the job ID as its return value\n\n## Workers At Work ##\n\nHow do the workers process the queues?\n\n1. `Resque_Worker::work()`, the main loop of the worker process, calls\n   `Resque_Worker->reserve()` to check for a job\n2. `Resque_Worker->reserve()` checks whether to use blocking pops or not (from\n   `BLOCKING`), then acts accordingly:\n  * Blocking Pop\n    1. `Resque_Worker->reserve()` calls `Resque_Job::reserveBlocking()` with\n       the entire queue list and the timeout (from `INTERVAL`) as arguments\n    2. `Resque_Job::reserveBlocking()` calls `Resque::blpop()` (which in turn\n       calls Redis' `blpop`, after prepping the queue list for the call, then\n       processes the response for consistency with other aspects of the\n       library, before finally returning control [and the queue/content of the\n       retrieved job, if any] to `Resque_Job::reserveBlocking()`)\n    3. `Resque_Job::reserveBlocking()` checks whether the job content is an\n       array (it should contain the job's type [class], payload [args], and\n       ID), and aborts processing if not\n    4. `Resque_Job::reserveBlocking()` creates a new `Resque_Job` object with\n       the queue and content as constructor arguments to initialize the job\n       itself, and returns it, along with control of the process, to\n       `Resque_Worker->reserve()`\n  * Queue Polling\n    1. `Resque_Worker->reserve()` iterates through the queue list, calling\n       `Resque_Job::reserve()` with the current queue's name as the sole\n       argument on each pass\n    2. `Resque_Job::reserve()` passes the queue name on to `Resque::pop()`,\n       which in turn calls Redis' `lpop` with the same argument, then returns\n       control (and the job content, if any) to `Resque_Job::reserve()`\n    3. `Resque_Job::reserve()` checks whether the job content is an array (as\n       before, it should contain the job's type [class], payload [args], and\n       ID), and aborts processing if not\n    4. `Resque_Job::reserve()` creates a new `Resque_Job` object in the same\n       manner as above, and also returns this object (along with control of\n       the process) to `Resque_Worker->reserve()`\n3. In either case, `Resque_Worker->reserve()` returns the new `Resque_Job`\n   object, along with control, up to `Resque_Worker::work()`; if no job is\n   found, it simply returns `FALSE`\n  * No Jobs\n    1. If blocking mode is not enabled, `Resque_Worker::work()` sleeps for\n       `INTERVAL` seconds; it calls `usleep()` for this, so fractional seconds\n       *are* supported\n  * Job Reserved\n    1. `Resque_Worker::work()` triggers a `beforeFork` event\n    2. `Resque_Worker::work()` calls `Resque_Worker->workingOn()` with the new\n       `Resque_Job` object as its argument\n    3. `Resque_Worker->workingOn()` does some reference assignments to help keep\n       track of the worker/job relationship, then updates the job status from\n       `WAITING` to `RUNNING`\n    4. `Resque_Worker->workingOn()` stores the new `Resque_Job` object's payload\n       in a Redis key associated to the worker itself (this is to prevent the job\n       from being lost indefinitely, but does rely on that PID never being\n       allocated on that host to a different worker process), then returns control\n       to `Resque_Worker::work()`\n    5. `Resque_Worker::work()` forks a child process to run the actual `perform()`\n    6. The next steps differ between the worker and the child, now running in\n       separate processes:\n      * Worker\n        1. The worker waits for the job process to complete\n        2. If the exit status is not 0, the worker calls `Resque_Job->fail()` with\n           a `Resque_Job_DirtyExitException` as its only argument.\n        3. `Resque_Job->fail()` triggers an `onFailure` event\n        4. `Resque_Job->fail()` updates the job status from `RUNNING` to `FAILED`\n        5. `Resque_Job->fail()` calls `Resque_Failure::create()` with the job\n           payload, the `Resque_Job_DirtyExitException`, the internal ID of the\n           worker, and the queue name as arguments\n        6. `Resque_Failure::create()` creates a new object of whatever type has\n           been set as the `Resque_Failure` \"backend\" handler; by default, this is\n           a `Resque_Failure_Redis` object, whose constructor simply collects the\n           data passed into `Resque_Failure::create()` and pushes it into Redis\n           in the `failed` queue\n        7. `Resque_Job->fail()` increments two failure counters in Redis: one for\n           a total count, and one for the worker\n        8. `Resque_Job->fail()` returns control to the worker (still in\n           `Resque_Worker::work()`) without a value\n      * Job\n        1. The job calls `Resque_Worker->perform()` with the `Resque_Job` as its\n           only argument.\n        2. `Resque_Worker->perform()` sets up a `try...catch` block so it can\n           properly handle exceptions by marking jobs as failed (by calling\n           `Resque_Job->fail()`, as above)\n        3. Inside the `try...catch`, `Resque_Worker->perform()` triggers an\n           `afterFork` event\n        4. Still inside the `try...catch`, `Resque_Worker->perform()` calls\n           `Resque_Job->perform()` with no arguments\n        5. `Resque_Job->perform()` calls `Resque_Job->getInstance()` with no\n           arguments\n        6. If `Resque_Job->getInstance()` has already been called, it returns the\n           existing instance; otherwise:\n        7. `Resque_Job->getInstance()` checks that the job's class (type) exists\n           and has a `perform()` method; if not, in either case, it throws an\n           exception which will be caught by `Resque_Worker->perform()`\n        8. `Resque_Job->getInstance()` creates an instance of the job's class, and\n           initializes it with a reference to the `Resque_Job` itself, the job's\n           arguments (which it gets by calling `Resque_Job->getArguments()`, which\n           in turn simply returns the value of `args[0]`, or an empty array if no\n           arguments were passed), and the queue name\n        9. `Resque_Job->getInstance()` returns control, along with the job class\n           instance, to `Resque_Job->perform()`\n        10. `Resque_Job->perform()` sets up its own `try...catch` block to handle\n            `Resque_Job_DontPerform` exceptions; any other exceptions are passed\n            up to `Resque_Worker->perform()`\n        11. `Resque_Job->perform()` triggers a `beforePerform` event\n        12. `Resque_Job->perform()` calls `setUp()` on the instance, if it exists\n        13. `Resque_Job->perform()` calls `perform()` on the instance\n        14. `Resque_Job->perform()` calls `tearDown()` on the instance, if it\n            exists\n        15. `Resque_Job->perform()` triggers an `afterPerform` event\n        16. The `try...catch` block ends, suppressing `Resque_Job_DontPerform`\n            exceptions by returning control, and the value `FALSE`, to\n            `Resque_Worker->perform()`; any other situation returns the value\n            `TRUE` along with control, instead\n        17. The `try...catch` block in `Resque_Worker->perform()` ends\n        18. `Resque_Worker->perform()` updates the job status from `RUNNING` to\n            `COMPLETE`, then returns control, with no value, to the worker (again\n            still in `Resque_Worker::work()`)\n        19. `Resque_Worker::work()` calls `exit(0)` to terminate the job process\n            cleanly\n      * SPECIAL CASE: Non-forking OS (Windows)\n        1. Same as the job above, except it doesn't call `exit(0)` when done\n    7. `Resque_Worker::work()` calls `Resque_Worker->doneWorking()` with no\n       arguments\n    8. `Resque_Worker->doneWorking()` increments two processed counters in Redis:\n       one for a total count, and one for the worker\n    9. `Resque_Worker->doneWorking()` deletes the Redis key set in\n       `Resque_Worker->workingOn()`, then returns control, with no value, to\n       `Resque_Worker::work()`\n4. `Resque_Worker::work()` returns control to the beginning of the main loop,\n   where it will wait for the next job to become available, and start this\n   process all over again"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "(c) Chris Boulton <chris@bigcommerce.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\t"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.8671875,
          "content": "php-resque: PHP Resque Worker (and Enqueue) [![Build Status](https://secure.travis-ci.org/chrisboulton/php-resque.png)](http://travis-ci.org/chrisboulton/php-resque)\n===========================================\n\nResque is a Redis-backed library for creating background jobs, placing\nthose jobs on one or more queues, and processing them later.\n\n## Background ##\n\nResque was pioneered and is developed by the fine folks at GitHub (yes,\nI am a kiss-ass), and written in Ruby. What you're seeing here is an\nalmost direct port of the Resque worker and enqueue system to PHP.\n\nFor more information on Resque, visit the official GitHub project:\n <https://github.com/resque/resque>\n\nFor further information, see the launch post on the GitHub blog:\n <http://github.com/blog/542-introducing-resque>\n\nThe PHP port does NOT include its own web interface for viewing queue\nstats, as the data is stored in the exact same expected format as the\nRuby version of Resque.\n\nThe PHP port provides much the same features as the Ruby version:\n\n* Workers can be distributed between multiple machines\n* Includes support for priorities (queues)\n* Resilient to memory leaks (forking)\n* Expects failure\n\nIt also supports the following additional features:\n\n* Has the ability to track the status of jobs\n* Will mark a job as failed, if a forked child running a job does\nnot exit with a status code as 0\n* Has built in support for `setUp` and `tearDown` methods, called\npre and post jobs\n\n## Requirements ##\n\n* PHP 5.3+\n* Redis 2.2+\n* Optional but Recommended: Composer\n\n## Getting Started ##\n\nThe easiest way to work with php-resque is when it's installed as a\nComposer package inside your project. Composer isn't strictly\nrequired, but makes life a lot easier.\n\nIf you're not familiar with Composer, please see <http://getcomposer.org/>.\n\n1. Add php-resque to your application's composer.json.\n\n```json\n{\n    \"require\": {\n        \"chrisboulton/php-resque\": \"1.2.x\"\n    }\n}\n```\n\n2. Run `composer install`.\n\n3. If you haven't already, add the Composer autoload to your project's\n   initialization file. (example)\n\n```sh\nrequire 'vendor/autoload.php';\n```\n\n## Jobs ##\n\n### Queueing Jobs ###\n\nJobs are queued as follows:\n\n```php\n// Required if redis is located elsewhere\nResque::setBackend('localhost:6379');\n\n$args = array(\n        'name' => 'Chris'\n        );\nResque::enqueue('default', 'My_Job', $args);\n```\n\n### Defining Jobs ###\n\nEach job should be in its own class, and include a `perform` method.\n\n```php\nclass My_Job\n{\n    public function perform()\n    {\n        // Work work work\n        echo $this->args['name'];\n    }\n}\n```\n\nWhen the job is run, the class will be instantiated and any arguments\nwill be set as an array on the instantiated object, and are accessible\nvia `$this->args`.\n\nAny exception thrown by a job will result in the job failing - be\ncareful here and make sure you handle the exceptions that shouldn't\nresult in a job failing.\n\nJobs can also have `setUp` and `tearDown` methods. If a `setUp` method\nis defined, it will be called before the `perform` method is run.\nThe `tearDown` method, if defined, will be called after the job finishes.\n\n\n```php\nclass My_Job\n{\n    public function setUp()\n    {\n        // ... Set up environment for this job\n    }\n\n    public function perform()\n    {\n        // .. Run job\n    }\n\n    public function tearDown()\n    {\n        // ... Remove environment for this job\n    }\n}\n```\n\n### Dequeueing Jobs ###\n\nThis method can be used to conveniently remove a job from a queue.\n\n```php\n// Removes job class 'My_Job' of queue 'default'\nResque::dequeue('default', ['My_Job']);\n\n// Removes job class 'My_Job' with Job ID '087df5819a790ac666c9608e2234b21e' of queue 'default'\nResque::dequeue('default', ['My_Job' => '087df5819a790ac666c9608e2234b21e']);\n\n// Removes job class 'My_Job' with arguments of queue 'default'\nResque::dequeue('default', ['My_Job' => array('foo' => 1, 'bar' => 2)]);\n\n// Removes multiple jobs\nResque::dequeue('default', ['My_Job', 'My_Job2']);\n```\n\nIf no jobs are given, this method will dequeue all jobs matching the provided queue.\n\n```php\n// Removes all jobs of queue 'default'\nResque::dequeue('default');\n```\n\n### Tracking Job Statuses ###\n\nphp-resque has the ability to perform basic status tracking of a queued\njob. The status information will allow you to check if a job is in the\nqueue, is currently being run, has finished, or has failed.\n\nTo track the status of a job, pass `true` as the fourth argument to\n`Resque::enqueue`. A token used for tracking the job status will be\nreturned:\n\n```php\n$token = Resque::enqueue('default', 'My_Job', $args, true);\necho $token;\n```\n\nTo fetch the status of a job:\n\n```php\n$status = new Resque_Job_Status($token);\necho $status->get(); // Outputs the status\n```\n\nJob statuses are defined as constants in the `Resque_Job_Status` class.\nValid statuses include:\n\n* `Resque_Job_Status::STATUS_WAITING` - Job is still queued\n* `Resque_Job_Status::STATUS_RUNNING` - Job is currently running\n* `Resque_Job_Status::STATUS_FAILED` - Job has failed\n* `Resque_Job_Status::STATUS_COMPLETE` - Job is complete\n* `false` - Failed to fetch the status - is the token valid?\n\nStatuses are available for up to 24 hours after a job has completed\nor failed, and are then automatically expired. A status can also\nforcefully be expired by calling the `stop()` method on a status\nclass.\n\n## Workers ##\n\nWorkers work in the exact same way as the Ruby workers. For complete\ndocumentation on workers, see the original documentation.\n\nA basic \"up-and-running\" `bin/resque` file is included that sets up a\nrunning worker environment. (`vendor/bin/resque` when installed\nvia Composer)\n\nThe exception to the similarities with the Ruby version of resque is\nhow a worker is initially setup. To work under all environments,\nnot having a single environment such as with Ruby, the PHP port makes\n*no* assumptions about your setup.\n\nTo start a worker, it's very similar to the Ruby version:\n\n```sh\n$ QUEUE=file_serve php bin/resque\n```\n\nIt's your responsibility to tell the worker which file to include to get\nyour application underway. You do so by setting the `APP_INCLUDE` environment\nvariable:\n\n```sh\n$ QUEUE=file_serve APP_INCLUDE=../application/init.php php bin/resque\n```\n\n*Pro tip: Using Composer? More than likely, you don't need to worry about\n`APP_INCLUDE`, because hopefully Composer is responsible for autoloading\nyour application too!*\n\nGetting your application underway also includes telling the worker your job\nclasses, by means of either an autoloader or including them.\n\nAlternately, you can always `include('bin/resque')` from your application and\nskip setting `APP_INCLUDE` altogether.  Just be sure the various environment\nvariables are set (`setenv`) before you do.\n\n### Logging ###\n\nThe port supports the same environment variables for logging to STDOUT.\nSetting `VERBOSE` will print basic debugging information and `VVERBOSE`\nwill print detailed information.\n\n```sh\n$ VERBOSE=1 QUEUE=file_serve bin/resque\n$ VVERBOSE=1 QUEUE=file_serve bin/resque\n```\n\n### Priorities and Queue Lists ###\n\nSimilarly, priority and queue list functionality works exactly\nthe same as the Ruby workers. Multiple queues should be separated with\na comma, and the order that they're supplied in is the order that they're\nchecked in.\n\nAs per the original example:\n\n```sh\n$ QUEUE=file_serve,warm_cache bin/resque\n```\n\nThe `file_serve` queue will always be checked for new jobs on each\niteration before the `warm_cache` queue is checked.\n\n### Running All Queues ###\n\nAll queues are supported in the same manner and processed in alphabetical\norder:\n\n```sh\n$ QUEUE='*' bin/resque\n```\n\n### Running Multiple Workers ###\n\nMultiple workers can be launched simultaneously by supplying the `COUNT`\nenvironment variable:\n\n```sh\n$ COUNT=5 bin/resque\n```\n\nBe aware, however, that each worker is its own fork, and the original process\nwill shut down as soon as it has spawned `COUNT` forks.  If you need to keep\ntrack of your workers using an external application such as `monit`, you'll\nneed to work around this limitation.\n\n### Custom prefix ###\n\nWhen you have multiple apps using the same Redis database it is better to\nuse a custom prefix to separate the Resque data:\n\n```sh\n$ PREFIX=my-app-name bin/resque\n```\n\n### Forking ###\n\nSimilarly to the Ruby versions, supported platforms will immediately\nfork after picking up a job. The forked child will exit as soon as\nthe job finishes.\n\nThe difference with php-resque is that if a forked child does not\nexit nicely (PHP error or such), php-resque will automatically fail\nthe job.\n\n### Signals ###\n\nSignals also work on supported platforms exactly as in the Ruby\nversion of Resque:\n\n* `QUIT` - Wait for job to finish processing then exit\n* `TERM` / `INT` - Immediately kill job then exit\n* `USR1` - Immediately kill job but don't exit\n* `USR2` - Pause worker, no new jobs will be processed\n* `CONT` - Resume worker.\n\n### Process Titles/Statuses ###\n\nThe Ruby version of Resque has a nifty feature whereby the process\ntitle of the worker is updated to indicate what the worker is doing,\nand any forked children also set their process title with the job\nbeing run. This helps identify running processes on the server and\ntheir resque status.\n\n**PHP does not have this functionality by default until 5.5.**\n\nA PECL module (<http://pecl.php.net/package/proctitle>) exists that\nadds this functionality to PHP before 5.5, so if you'd like process\ntitles updated, install the PECL module as well. php-resque will\nautomatically detect and use it.\n\n## Event/Hook System ##\n\nphp-resque has a basic event system that can be used by your application\nto customize how some of the php-resque internals behave.\n\nYou listen in on events (as listed below) by registering with `Resque_Event`\nand supplying a callback that you would like triggered when the event is\nraised:\n\n```sh\nResque_Event::listen('eventName', [callback]);\n```\n\n`[callback]` may be anything in PHP that is callable by `call_user_func_array`:\n\n* A string with the name of a function\n* An array containing an object and method to call\n* An array containing an object and a static method to call\n* A closure (PHP 5.3+)\n\nEvents may pass arguments (documented below), so your callback should accept\nthese arguments.\n\nYou can stop listening to an event by calling `Resque_Event::stopListening`\nwith the same arguments supplied to `Resque_Event::listen`.\n\nIt is up to your application to register event listeners. When enqueuing events\nin your application, it should be as easy as making sure php-resque is loaded\nand calling `Resque_Event::listen`.\n\nWhen running workers, if you run workers via the default `bin/resque` script,\nyour `APP_INCLUDE` script should initialize and register any listeners required\nfor operation. If you have rolled your own worker manager, then it is again your\nresponsibility to register listeners.\n\nA sample plugin is included in the `extras` directory.\n\n### Events ###\n\n#### beforeFirstFork ####\n\nCalled once, as a worker initializes. Argument passed is the instance of `Resque_Worker`\nthat was just initialized.\n\n#### beforeFork ####\n\nCalled before php-resque forks to run a job. Argument passed contains the instance of\n`Resque_Job` for the job about to be run.\n\n`beforeFork` is triggered in the **parent** process. Any changes made will be permanent\nfor as long as the **worker** lives.\n\n#### afterFork ####\n\nCalled after php-resque forks to run a job (but before the job is run). Argument\npassed contains the instance of `Resque_Job` for the job about to be run.\n\n`afterFork` is triggered in the **child** process after forking out to complete a job. Any\nchanges made will only live as long as the **job** is being processed.\n\n#### beforePerform ####\n\nCalled before the `setUp` and `perform` methods on a job are run. Argument passed\ncontains the instance of `Resque_Job` for the job about to be run.\n\nYou can prevent execution of the job by throwing an exception of `Resque_Job_DontPerform`.\nAny other exceptions thrown will be treated as if they were thrown in a job, causing the\njob to fail.\n\n#### afterPerform ####\n\nCalled after the `perform` and `tearDown` methods on a job are run. Argument passed\ncontains the instance of `Resque_Job` that was just run.\n\nAny exceptions thrown will be treated as if they were thrown in a job, causing the job\nto be marked as having failed.\n\n#### onFailure ####\n\nCalled whenever a job fails. Arguments passed (in this order) include:\n\n* Exception - The exception that was thrown when the job failed\n* Resque_Job - The job that failed\n\n#### beforeEnqueue ####\n\nCalled immediately before a job is enqueued using the `Resque::enqueue` method.\nArguments passed (in this order) include:\n\n* Class - string containing the name of the job to be enqueued\n* Arguments - array of arguments for the job\n* Queue - string containing the name of the queue the job is to be enqueued in\n* ID - string containing the token of the job to be enqueued\n\nYou can prevent enqueing of the job by throwing an exception of `Resque_Job_DontCreate`.\n\n#### afterEnqueue ####\n\nCalled after a job has been queued using the `Resque::enqueue` method. Arguments passed\n(in this order) include:\n\n* Class - string containing the name of scheduled job\n* Arguments - array of arguments supplied to the job\n* Queue - string containing the name of the queue the job was added to\n* ID - string containing the new token of the enqueued job\n\n## Step-By-Step ##\n\nFor a more in-depth look at what php-resque does under the hood (without \nneeding to directly examine the code), have a look at `HOWITWORKS.md`.\n\n## Contributors ##\n\n### Project Lead ###\n\n* @chrisboulton\n\n### Others ###\n\n* @acinader\n* @ajbonner\n* @andrewjshults\n* @atorres757\n* @benjisg\n* @cballou\n* @chaitanyakuber\n* @charly22\n* @CyrilMazur\n* @d11wtq\n* @danhunsaker\n* @dceballos\n* @ebernhardson\n* @hlegius\n* @hobodave\n* @humancopy\n* @iskandar\n* @JesseObrien\n* @jjfrey\n* @jmathai\n* @joshhawthorne\n* @KevBurnsJr\n* @lboynton\n* @maetl\n* @matteosister\n* @MattHeath\n* @mickhrmweb\n* @Olden\n* @patrickbajao\n* @pedroarnal\n* @ptrofimov\n* @rajibahmed\n* @richardkmiller\n* @Rockstar04\n* @ruudk\n* @salimane\n* @scragg0x\n* @scraton\n* @thedotedge\n* @tonypiper\n* @trimbletodd\n* @warezthebeef\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.xml",
          "type": "blob",
          "size": 0.5654296875,
          "content": "<project name=\"php-resque\" default=\"build\">\n\t<target name=\"clean\">\n\t\t<delete dir=\"${basedir}/build\" />\n\t</target>\n\t<target name=\"prepare\">\n\t\t<mkdir dir=\"${basedir}/build\" />\n\t\t<mkdir dir=\"${basedir}/build/logs\" />\n\t</target>\n\t<target name=\"phpunit\">\n\t\t<exec dir=\"${basedir}\" executable=\"phpunit\" failonerror=\"true\">\n\t\t\t<arg line=\"--log-junit         ${basedir}/build/logs/phpunit.xml\n\t\t\t\t--coverage-clover ${basedir}/build/logs/clover.xml\n\t\t\t\t--coverage-html   ${basedir}/build/coverage\" />\n\t\t</exec>\n\t</target>\n\t<target name=\"build\" depends=\"clean,prepare,phpunit\" />\n</project>"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.9736328125,
          "content": "{\n\t\"name\": \"chrisboulton/php-resque\",\n\t\"type\": \"library\",\n\t\"description\": \"Redis backed library for creating background jobs and processing them later. Based on resque for Ruby.\",\n\t\"keywords\": [\"job\", \"background\", \"redis\", \"resque\"],\n\t\"homepage\": \"http://www.github.com/chrisboulton/php-resque/\",\n\t\"license\": \"MIT\",\n\t\"authors\": [\n\t\t{\n\t\t\t\"name\": \"Chris Boulton\",\n\t\t\t\"email\": \"chris@bigcommerce.com\"\n\t\t}\n\t],\n\t\"repositories\": [\n\t\t{\n\t\t\t\"type\": \"vcs\",\n\t\t\t\"url\": \"https://github.com/chrisboulton/credis\"\n\t\t}\n\t],\n\t\"require\": {\n\t\t\"php\": \">=5.3.0\",\n\t\t\"ext-pcntl\": \"*\",\n\t\t\"colinmollenhour/credis\": \"~1.7\",\n\t\t\"psr/log\": \"~1.0\"\n\t},\n\t\"suggest\": {\n\t\t\"ext-proctitle\": \"Allows php-resque to rename the title of UNIX processes to show the status of a worker.\",\n\t\t\"ext-redis\": \"Native PHP extension for Redis connectivity. Credis will automatically utilize when available.\"\n\t},\n\t\"require-dev\": {\n\t\t\"phpunit/phpunit\": \"3.7.*\"\n\t},\n\t\"bin\": [\n\t\t\"bin/resque\"\n\t],\n\t\"autoload\": {\n\t\t\"psr-0\": {\n\t\t\t\"Resque\": \"lib\"\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "composer.lock",
          "type": "blob",
          "size": 17.3515625,
          "content": "{\n    \"_readme\": [\n        \"This file locks the dependencies of your project to a known state\",\n        \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file\",\n        \"This file is @generated automatically\"\n    ],\n    \"hash\": \"41124ffd15a15b52947e430b92b8f10f\",\n    \"content-hash\": \"11906622d4e017ff6807c6dff51f208d\",\n    \"packages\": [\n        {\n            \"name\": \"colinmollenhour/credis\",\n            \"version\": \"1.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/colinmollenhour/credis.git\",\n                \"reference\": \"74b2b703da5c58dc07fb97e8954bc63280b469bf\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/colinmollenhour/credis/zipball/74b2b703da5c58dc07fb97e8954bc63280b469bf\",\n                \"reference\": \"74b2b703da5c58dc07fb97e8954bc63280b469bf\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.4.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"Client.php\",\n                    \"Cluster.php\",\n                    \"Sentinel.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Colin Mollenhour\",\n                    \"email\": \"colin@mollenhour.com\"\n                }\n            ],\n            \"description\": \"Credis is a lightweight interface to the Redis key-value store which wraps the phpredis library when available for better performance.\",\n            \"homepage\": \"https://github.com/colinmollenhour/credis\",\n            \"time\": \"2016-03-24 15:50:52\"\n        },\n        {\n            \"name\": \"psr/log\",\n            \"version\": \"1.0.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/log.git\",\n                \"reference\": \"fe0936ee26643249e916849d48e3a51d5f5e278b\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/log/zipball/fe0936ee26643249e916849d48e3a51d5f5e278b\",\n                \"reference\": \"fe0936ee26643249e916849d48e3a51d5f5e278b\",\n                \"shasum\": \"\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-0\": {\n                    \"Psr\\\\Log\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"http://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"Common interface for logging libraries\",\n            \"keywords\": [\n                \"log\",\n                \"psr\",\n                \"psr-3\"\n            ],\n            \"time\": \"2012-12-21 11:40:51\"\n        }\n    ],\n    \"packages-dev\": [\n        {\n            \"name\": \"phpunit/php-code-coverage\",\n            \"version\": \"1.2.18\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-code-coverage.git\",\n                \"reference\": \"fe2466802556d3fe4e4d1d58ffd3ccfd0a19be0b\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/fe2466802556d3fe4e4d1d58ffd3ccfd0a19be0b\",\n                \"reference\": \"fe2466802556d3fe4e4d1d58ffd3ccfd0a19be0b\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\",\n                \"phpunit/php-file-iterator\": \">=1.3.0@stable\",\n                \"phpunit/php-text-template\": \">=1.2.0@stable\",\n                \"phpunit/php-token-stream\": \">=1.1.3,<1.3.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"3.7.*@dev\"\n            },\n            \"suggest\": {\n                \"ext-dom\": \"*\",\n                \"ext-xdebug\": \">=2.0.5\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.2.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"PHP/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"include-path\": [\n                \"\"\n            ],\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sb@sebastian-bergmann.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library that provides collection, processing, and rendering functionality for PHP code coverage information.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-code-coverage\",\n            \"keywords\": [\n                \"coverage\",\n                \"testing\",\n                \"xunit\"\n            ],\n            \"time\": \"2014-09-02 10:13:14\"\n        },\n        {\n            \"name\": \"phpunit/php-file-iterator\",\n            \"version\": \"1.4.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-file-iterator.git\",\n                \"reference\": \"6150bf2c35d3fc379e50c7602b75caceaa39dbf0\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/6150bf2c35d3fc379e50c7602b75caceaa39dbf0\",\n                \"reference\": \"6150bf2c35d3fc379e50c7602b75caceaa39dbf0\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.4.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sb@sebastian-bergmann.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"FilterIterator implementation that filters files based on a list of suffixes.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-file-iterator/\",\n            \"keywords\": [\n                \"filesystem\",\n                \"iterator\"\n            ],\n            \"time\": \"2015-06-21 13:08:43\"\n        },\n        {\n            \"name\": \"phpunit/php-text-template\",\n            \"version\": \"1.2.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-text-template.git\",\n                \"reference\": \"31f8b717e51d9a2afca6c9f046f5d69fc27c8686\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/31f8b717e51d9a2afca6c9f046f5d69fc27c8686\",\n                \"reference\": \"31f8b717e51d9a2afca6c9f046f5d69fc27c8686\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Simple template engine.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-text-template/\",\n            \"keywords\": [\n                \"template\"\n            ],\n            \"time\": \"2015-06-21 13:50:34\"\n        },\n        {\n            \"name\": \"phpunit/php-timer\",\n            \"version\": \"1.0.8\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-timer.git\",\n                \"reference\": \"38e9124049cf1a164f1e4537caf19c99bf1eb260\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-timer/zipball/38e9124049cf1a164f1e4537caf19c99bf1eb260\",\n                \"reference\": \"38e9124049cf1a164f1e4537caf19c99bf1eb260\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"~4|~5\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sb@sebastian-bergmann.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Utility class for timing\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-timer/\",\n            \"keywords\": [\n                \"timer\"\n            ],\n            \"time\": \"2016-05-12 18:03:57\"\n        },\n        {\n            \"name\": \"phpunit/php-token-stream\",\n            \"version\": \"1.2.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-token-stream.git\",\n                \"reference\": \"ad4e1e23ae01b483c16f600ff1bebec184588e32\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-token-stream/zipball/ad4e1e23ae01b483c16f600ff1bebec184588e32\",\n                \"reference\": \"ad4e1e23ae01b483c16f600ff1bebec184588e32\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-tokenizer\": \"*\",\n                \"php\": \">=5.3.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.2-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"PHP/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"include-path\": [\n                \"\"\n            ],\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sb@sebastian-bergmann.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Wrapper around PHP's tokenizer extension.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-token-stream/\",\n            \"keywords\": [\n                \"tokenizer\"\n            ],\n            \"time\": \"2014-03-03 05:10:30\"\n        },\n        {\n            \"name\": \"phpunit/phpunit\",\n            \"version\": \"3.7.38\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/phpunit.git\",\n                \"reference\": \"38709dc22d519a3d1be46849868aa2ddf822bcf6\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/phpunit/zipball/38709dc22d519a3d1be46849868aa2ddf822bcf6\",\n                \"reference\": \"38709dc22d519a3d1be46849868aa2ddf822bcf6\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-ctype\": \"*\",\n                \"ext-dom\": \"*\",\n                \"ext-json\": \"*\",\n                \"ext-pcre\": \"*\",\n                \"ext-reflection\": \"*\",\n                \"ext-spl\": \"*\",\n                \"php\": \">=5.3.3\",\n                \"phpunit/php-code-coverage\": \"~1.2\",\n                \"phpunit/php-file-iterator\": \"~1.3\",\n                \"phpunit/php-text-template\": \"~1.1\",\n                \"phpunit/php-timer\": \"~1.0\",\n                \"phpunit/phpunit-mock-objects\": \"~1.2\",\n                \"symfony/yaml\": \"~2.0\"\n            },\n            \"require-dev\": {\n                \"pear-pear.php.net/pear\": \"1.9.4\"\n            },\n            \"suggest\": {\n                \"phpunit/php-invoker\": \"~1.1\"\n            },\n            \"bin\": [\n                \"composer/bin/phpunit\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.7.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"PHPUnit/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"include-path\": [\n                \"\",\n                \"../../symfony/yaml/\"\n            ],\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"The PHP Unit Testing framework.\",\n            \"homepage\": \"http://www.phpunit.de/\",\n            \"keywords\": [\n                \"phpunit\",\n                \"testing\",\n                \"xunit\"\n            ],\n            \"time\": \"2014-10-17 09:04:17\"\n        },\n        {\n            \"name\": \"phpunit/phpunit-mock-objects\",\n            \"version\": \"1.2.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/phpunit-mock-objects.git\",\n                \"reference\": \"5794e3c5c5ba0fb037b11d8151add2a07fa82875\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/phpunit-mock-objects/zipball/5794e3c5c5ba0fb037b11d8151add2a07fa82875\",\n                \"reference\": \"5794e3c5c5ba0fb037b11d8151add2a07fa82875\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.3\",\n                \"phpunit/php-text-template\": \">=1.1.1@stable\"\n            },\n            \"suggest\": {\n                \"ext-soap\": \"*\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"PHPUnit/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"include-path\": [\n                \"\"\n            ],\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sb@sebastian-bergmann.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Mock Object library for PHPUnit\",\n            \"homepage\": \"https://github.com/sebastianbergmann/phpunit-mock-objects/\",\n            \"keywords\": [\n                \"mock\",\n                \"xunit\"\n            ],\n            \"time\": \"2013-01-13 10:24:48\"\n        },\n        {\n            \"name\": \"symfony/yaml\",\n            \"version\": \"v2.8.12\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/yaml.git\",\n                \"reference\": \"e7540734bad981fe59f8ef14b6fc194ae9df8d9c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/yaml/zipball/e7540734bad981fe59f8ef14b6fc194ae9df8d9c\",\n                \"reference\": \"e7540734bad981fe59f8ef14b6fc194ae9df8d9c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.9\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.8-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Yaml\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony Yaml Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2016-09-02 01:57:56\"\n        }\n    ],\n    \"aliases\": [],\n    \"minimum-stability\": \"stable\",\n    \"stability-flags\": [],\n    \"prefer-stable\": false,\n    \"prefer-lowest\": false,\n    \"platform\": {\n        \"php\": \">=5.3.0\",\n        \"ext-pcntl\": \"*\"\n    },\n    \"platform-dev\": []\n}\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.5517578125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n\tbootstrap=\"test/bootstrap.php\"\n\tbackupStaticAttributes=\"false\"\n\tcolors=\"true\"\n\tconvertErrorsToExceptions=\"true\"\n\tconvertNoticesToExceptions=\"true\"\n\tconvertWarningsToExceptions=\"true\"\n\tprocessIsolation=\"false\"\n\tstopOnFailure=\"false\"\n\tsyntaxCheck=\"false\"\n>\n\t<testsuites>\n\t\t<testsuite name=\"Resque Test Suite\">\n\t\t\t<directory>./test/Resque/</directory>\n\t\t</testsuite>\n\t</testsuites>\n\n\t<filter>\n\t\t<whitelist>\n\t\t\t<directory suffix=\".php\">./lib/Resque/</directory>\n\t\t</whitelist>\n\t</filter>\n</phpunit>"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}