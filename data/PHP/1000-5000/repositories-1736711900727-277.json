{
  "metadata": {
    "timestamp": 1736711900727,
    "page": 277,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jae-jae/QueryList",
      "stars": 2673,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1240234375,
          "content": "/.gitattributes export-ignore\n/.github export-ignore\n/.gitignore export-ignore\n/phpunit.xml export-ignore\n/tests export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0458984375,
          "content": "/vendor/\n.idea/\ncomposer.lock\n.DS_Store\n*.cache"
        },
        {
          "name": "README-ZH.md",
          "type": "blob",
          "size": 9.4267578125,
          "content": "<p align=\"center\">\n  <img width=\"150\" src=\"logo.png\" alt=\"QueryList\">\n  <br>\n  <br>\n</p>\n\n# QueryList  简介\n`QueryList`是一套简洁、优雅、可扩展的PHP采集工具(爬虫)，基于phpQuery。\n\n## 特性\n- 拥有与jQuery完全相同的CSS3 DOM选择器\n- 拥有与jQuery完全相同的DOM操作API\n- 拥有通用的列表采集方案\n- 拥有强大的HTTP请求套件，轻松实现如：模拟登陆、伪造浏览器、HTTP代理等意复杂的网络请求\n- 拥有乱码解决方案\n- 拥有强大的内容过滤功能，可使用jQuey选择器来过滤内容\n- 拥有高度的模块化设计，扩展性强\n- 拥有富有表现力的API\n- 拥有高质量文档\n- 拥有丰富的插件\n- 拥有专业的问答社区和交流群\n\n通过插件可以轻松实现诸如：\n- 多线程采集\n- 采集JavaScript动态渲染的页面 (PhantomJS/headless WebKit)\n- 图片本地化\n- 模拟浏览器行为，如：提交Form表单\n- 网络爬虫\n- .....\n\n## 环境要求\n- PHP >= 8.1\n\n> 如果你的PHP版本还停留在PHP5，或者不会使用Composer,你可以选择使用QueryList3,QueryList3支持php5.3以及手动安装。\nQueryList3 文档:http://v3.querylist.cc\n\n## 安装\n通过Composer安装:\n```\ncomposer require jaeger/querylist\n```\n\n## 使用\n\n#### 元素操作\n-  采集「昵图网」所有图片地址\n\n```php\nQueryList::get('http://www.nipic.com')->find('img')->attrs('src');\n```\n- 采集百度搜索结果\n\n```php\n$ql = QueryList::get('http://www.baidu.com/s?wd=QueryList');\n\n$ql->find('title')->text(); // 获取网站标题\n$ql->find('meta[name=keywords]')->content; // 获取网站头部关键词\n\n$ql->find('h3>a')->texts(); //获取搜索结果标题列表\n$ql->find('h3>a')->attrs('href'); //获取搜索结果链接列表\n\n$ql->find('img')->src; //获取第一张图片的链接地址\n$ql->find('img:eq(1)')->src; //获取第二张图片的链接地址\n$ql->find('img')->eq(2)->src; //获取第三张图片的链接地址\n// 遍历所有图片\n$ql->find('img')->map(function($img){\n\techo $img->alt;  //打印图片的alt属性\n});\n```\n- 更多用法\n\n```php\n$ql->find('#head')->append('<div>追加内容</div>')->find('div')->htmls();\n$ql->find('.two')->children('img')->attrs('alt'); //获取class为two元素下的所有img孩子节点\n//遍历class为two元素下的所有孩子节点\n$data = $ql->find('.two')->children()->map(function ($item){\n    //用is判断节点类型\n    if($item->is('a')){\n        return $item->text();\n    }elseif($item->is('img'))\n    {\n        return $item->alt;\n    }\n});\n\n$ql->find('a')->attr('href', 'newVal')->removeClass('className')->html('newHtml')->...\n$ql->find('div > p')->add('div > ul')->filter(':has(a)')->find('p:first')->nextAll()->andSelf()->...\n$ql->find('div.old')->replaceWith( $ql->find('div.new')->clone())->appendTo('.trash')->prepend('Deleted')->...\n```\n#### 列表采集\n采集百度搜索结果列表的标题和链接:\n```php\n$data = QueryList::get('http://www.baidu.com/s?wd=QueryList')\n\t// 设置采集规则\n    ->rules([ \n\t    'title'=>array('h3','text'),\n\t    'link'=>array('h3>a','href')\n\t])\n\t->query()->getData();\n\nprint_r($data->all());\n```\n采集结果:\n```\nArray\n(\n    [0] => Array\n        (\n            [title] => QueryList|基于phpQuery的无比强大的PHP采集工具\n            [link] => http://www.baidu.com/link?url=GU_YbDT2IHk4ns1tjG2I8_vjmH0SCJEAPuuZN\n        )\n    [1] => Array\n        (\n            [title] => PHP 用QueryList抓取网页内容 - wb145230 - 博客园\n            [link] => http://www.baidu.com/link?url=zn0DXBnrvIF2ibRVW34KcRVFG1_bCdZvqvwIhUqiXaS\n        )\n    [2] => Array\n        (\n            [title] => 介绍- QueryList指导文档\n            [link] => http://www.baidu.com/link?url=pSypvMovqS4v2sWeQo5fDBJ4EoYhXYi0Lxx\n        )\n        //...\n)\n```\n#### 编码转换\n```php\n// 输出编码:UTF-8,输入编码:GB2312\nQueryList::get('https://top.etao.com')->encoding('UTF-8','GB2312')->find('a')->texts();\n\n// 输出编码:UTF-8,输入编码:自动识别\nQueryList::get('https://top.etao.com')->encoding('UTF-8')->find('a')->texts();\n```\n\n#### HTTP网络操作（GuzzleHttp）\n- 携带cookie登录新浪微博\n```php\n//采集新浪微博需要登录才能访问的页面\n$ql = QueryList::get('http://weibo.com','param1=testvalue & params2=somevalue',[\n    'headers' => [\n        //填写从浏览器获取到的cookie\n        'Cookie' => 'SINAGLOBAL=546064; wb_cmtLike_2112031=1; wvr=6;....'\n    ]\n]);\n//echo $ql->getHtml();\necho $ql->find('title')->text();\n//输出: 我的首页 微博-随时随地发现新鲜事\n```\n- 使用Http代理\n```php\n$urlParams = ['param1' => 'testvalue','params2' => 'somevalue'];\n$opts = [\n\t// 设置http代理\n    'proxy' => 'http://222.141.11.17:8118',\n    //设置超时时间，单位：秒\n    'timeout' => 30,\n     // 伪造http头\n    'headers' => [\n        'Referer' => 'https://querylist.cc/',\n        'User-Agent' => 'testing/1.0',\n        'Accept'     => 'application/json',\n        'X-Foo'      => ['Bar', 'Baz'],\n        'Cookie'    => 'abc=111;xxx=222'\n    ]\n];\n$ql->get('http://httpbin.org/get',$urlParams,$opts);\n// echo $ql->getHtml();\n```\n\n- 模拟登录\n```php\n// 用post登录\n$ql = QueryList::post('http://xxxx.com/login',[\n    'username' => 'admin',\n    'password' => '123456'\n])->get('http://xxx.com/admin');\n//采集需要登录才能访问的页面\n$ql->get('http://xxx.com/admin/page');\n//echo $ql->getHtml();\n```\n\n#### Form表单操作\n模拟登陆GitHub\n```php\n// 获取QueryList实例\n$ql = QueryList::getInstance();\n//获取到登录表单\n$form = $ql->get('https://github.com/login')->find('form');\n\n//填写GitHub用户名和密码\n$form->find('input[name=login]')->val('your github username or email');\n$form->find('input[name=password]')->val('your github password');\n\n//序列化表单数据\n$fromData = $form->serializeArray();\n$postData = [];\nforeach ($fromData as $item) {\n    $postData[$item['name']] = $item['value'];\n}\n\n//提交登录表单\n$actionUrl = 'https://github.com'.$form->attr('action');\n$ql->post($actionUrl,$postData);\n//判断登录是否成功\n// echo $ql->getHtml();\n$userName = $ql->find('.header-nav-current-user>.css-truncate-target')->text();\nif($userName)\n{\n    echo '登录成功!欢迎你:'.$userName;\n}else{\n    echo '登录失败!';\n}\n```\n#### Bind功能扩展\n自定义扩展一个`myHttp`方法:\n```php\n$ql = QueryList::getInstance();\n\n//绑定一个myHttp方法到QueryList对象\n$ql->bind('myHttp',function ($url){\n    // $this 为当前的QueryList对象\n    $html = file_get_contents($url);\n    $this->setHtml($html);\n    return $this;\n});\n\n//然后就可以通过注册的名字来调用\n$data = $ql->myHttp('https://toutiao.io')->find('h3 a')->texts();\nprint_r($data->all());\n```\n或者把实现体封装到class，然后这样绑定:\n```php\n$ql->bind('myHttp',function ($url){\n    return new MyHttp($this,$url);\n});\n```\n\n#### 插件使用\n- 使用PhantomJS插件采集JavaScript动态渲染的页面:\n\n```php\n// 安装时设置PhantomJS二进制文件路径 \n$ql = QueryList::use(PhantomJs::class,'/usr/local/bin/phantomjs');\n\n// 采集今日头条手机版\n$data = $ql->browser('https://m.toutiao.com')->find('p')->texts();\nprint_r($data->all());\n\n// 使用HTTP代理\n$ql->browser('https://m.toutiao.com',false,[\n\t'--proxy' => '192.168.1.42:8080',\n    '--proxy-type' => 'http'\n])\n```\n\n- 使用CURL多线程插件,多线程采集GitHub排行榜:\n\n```php\n$ql = QueryList::use(CurlMulti::class);\n$ql->curlMulti([\n    'https://github.com/trending/php',\n    'https://github.com/trending/go',\n    //.....more urls\n])\n // 每个任务成功完成调用此回调\n ->success(function (QueryList $ql,CurlMulti $curl,$r){\n    echo \"Current url:{$r['info']['url']} \\r\\n\";\n    $data = $ql->find('h3 a')->texts();\n    print_r($data->all());\n})\n // 每个任务失败回调\n->error(function ($errorInfo,CurlMulti $curl){\n    echo \"Current url:{$errorInfo['info']['url']} \\r\\n\";\n    print_r($errorInfo['error']);\n})\n->start([\n\t// 最大并发数\n    'maxThread' => 10,\n    // 错误重试次数\n    'maxTry' => 3,\n]);\n\n```\n\n## 插件\n- [jae-jae/QueryList-PhantomJS](https://github.com/jae-jae/QueryList-PhantomJS): 使用PhantomJS采集JavaScript动态渲染的页面\n- [jae-jae/QueryList-CurlMulti](https://github.com/jae-jae/QueryList-CurlMulti) : Curl多线程采集\n- [jae-jae/QueryList-AbsoluteUrl](https://github.com/jae-jae/QueryList-AbsoluteUrl) : 转换URL相对路径到绝对路径\n- [jae-jae/QueryList-Rule-Google](https://github.com/jae-jae/QueryList-Rule-Google) : 谷歌搜索引擎\n- [jae-jae/QueryList-Rule-Baidu](https://github.com/jae-jae/QueryList-Rule-Baidu) : 百度搜索引擎\n\n\n查看更多的QueryList插件和基于QueryList的产品:[QueryList社区力量](https://github.com/jae-jae/QueryList-Community)\n\n## 贡献\n欢迎为QueryList贡献代码。关于贡献插件可以查看:[QueryList插件贡献说明](https://github.com/jae-jae/QueryList-Community/blob/master/CONTRIBUTING.md)\n\n## 寻求帮助?\n- QueryList主页: [http://querylist.cc](http://querylist.cc/)\n- QueryList文档: [http://doc.querylist.cc](http://doc.querylist.cc/)\n- QueryList问答:[http://wenda.querylist.cc](http://wenda.querylist.cc/)\n- QueryList交流QQ群:123266961 <a target=\"_blank\" href=\"http://shang.qq.com/wpa/qunwpa?idkey=a1b248ae30b3f711bdab4f799df839300dc7fed54331177035efa0513da027f6\"><img border=\"0\" src=\"http://pub.idqqimg.com/wpa/images/group.png\" alt=\"cafeEX\" title=\"cafeEX\"></a>\n- GitHub:https://github.com/jae-jae/QueryList\n- Git@OSC:http://git.oschina.net/jae/QueryList\n\n## Author\nJaeger <JaegerCode@gmail.com>\n\n## Lisence\nQueryList is licensed under the license of MIT. See the LICENSE for more details.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.083984375,
          "content": "<p align=\"center\">\n  <img width=\"150\" src=\"logo.png\" alt=\"QueryList\">\n  <br>\n  <br>\n</p>\n\n# QueryList \n`QueryList` is a simple, elegant, extensible PHP  Web Scraper (crawler/spider) ,based on phpQuery.\n\n[API Documentation](https://github.com/jae-jae/QueryList/wiki) \n\n[中文文档](README-ZH.md)\n\n## Features\n- Have the same CSS3 DOM selector as jQuery\n- Have the same DOM manipulation API as jQuery\n- Have a generic list crawling program\n- Have a strong HTTP request suite, easy to achieve such as: simulated landing, forged browser, HTTP proxy and other complex network requests\n- Have a messy code solution\n- Have powerful content filtering, you can use the jQuey selector to filter content\n- Has a high degree of modular design, scalability and strong\n- Have an expressive API\n- Has a wealth of plug-ins\n\nThrough plug-ins you can easily implement things like:\n- Multithreaded crawl\n- Crawl JavaScript dynamic rendering page (PhantomJS/headless WebKit)\n- Image downloads to local\n- Simulate browser behavior such as submitting Form forms\n- Web crawler\n- .....\n\n## Requirements\n- PHP >= 8.1\n\n## Installation\nBy Composer installation:\n```\ncomposer require jaeger/querylist\n```\n\n## Usage\n\n#### DOM Traversal and Manipulation\n-  Crawl「GitHub」all picture links\n\n```php\nQueryList::get('https://github.com')->find('img')->attrs('src');\n```\n- Crawl Google search results\n\n```php\n$ql = QueryList::get('https://www.google.co.jp/search?q=QueryList');\n\n$ql->find('title')->text(); //The page title\n$ql->find('meta[name=keywords]')->content; //The page keywords\n\n$ql->find('h3>a')->texts(); //Get a list of search results titles\n$ql->find('h3>a')->attrs('href'); //Get a list of search results links\n\n$ql->find('img')->src; //Gets the link address of the first image\n$ql->find('img:eq(1)')->src; //Gets the link address of the second image\n$ql->find('img')->eq(2)->src; //Gets the link address of the third image\n// Loop all the images\n$ql->find('img')->map(function($img){\n\techo $img->alt;  //Print the alt attribute of the image\n});\n```\n- More usage\n\n```php\n$ql->find('#head')->append('<div>Append content</div>')->find('div')->htmls();\n$ql->find('.two')->children('img')->attrs('alt'); // Get the class is the \"two\" element under all img child nodes\n// Loop class is the \"two\" element under all child nodes\n$data = $ql->find('.two')->children()->map(function ($item){\n    // Use \"is\" to determine the node type\n    if($item->is('a')){\n        return $item->text();\n    }elseif($item->is('img'))\n    {\n        return $item->alt;\n    }\n});\n\n$ql->find('a')->attr('href', 'newVal')->removeClass('className')->html('newHtml')->...\n$ql->find('div > p')->add('div > ul')->filter(':has(a)')->find('p:first')->nextAll()->andSelf()->...\n$ql->find('div.old')->replaceWith( $ql->find('div.new')->clone())->appendTo('.trash')->prepend('Deleted')->...\n```\n#### List crawl\nCrawl the title and link of the Google search results list:\n```php\n$data = QueryList::get('https://www.google.co.jp/search?q=QueryList')\n\t// Set the crawl rules\n    ->rules([ \n\t    'title'=>array('h3','text'),\n\t    'link'=>array('h3>a','href')\n\t])\n\t->query()->getData();\n\nprint_r($data->all());\n```\n Results:\n```\nArray\n(\n    [0] => Array\n        (\n            [title] => Angular - QueryList\n            [link] => https://angular.io/api/core/QueryList\n        )\n    [1] => Array\n        (\n            [title] => QueryList | @angular/core - Angularリファレンス - Web Creative Park\n            [link] => http://www.webcreativepark.net/angular/querylist/\n        )\n    [2] => Array\n        (\n            [title] => QueryListにQueryを追加したり、追加されたことを感知する | TIPS ...\n            [link] => http://www.webcreativepark.net/angular/querylist_query_add_subscribe/\n        )\n        //...\n)\n```\n#### Encode convert\n```php\n// Out charset :UTF-8\n// In charset :GB2312\nQueryList::get('https://top.etao.com')->encoding('UTF-8','GB2312')->find('a')->texts();\n\n// Out charset:UTF-8\n// In charset:Automatic Identification\nQueryList::get('https://top.etao.com')->encoding('UTF-8')->find('a')->texts();\n```\n\n#### HTTP Client (GuzzleHttp)\n- Carry cookie login GitHub\n```php\n//Crawl GitHub content\n$ql = QueryList::get('https://github.com','param1=testvalue & params2=somevalue',[\n  'headers' => [\n      // Fill in the cookie from the browser\n      'Cookie' => 'SINAGLOBAL=546064; wb_cmtLike_2112031=1; wvr=6;....'\n  ]\n]);\n//echo $ql->getHtml();\n$userName = $ql->find('.header-nav-current-user>.css-truncate-target')->text();\necho $userName;\n```\n- Use the Http proxy\n```php\n$urlParams = ['param1' => 'testvalue','params2' => 'somevalue'];\n$opts = [\n\t// Set the http proxy\n    'proxy' => 'http://222.141.11.17:8118',\n    //Set the timeout time in seconds\n    'timeout' => 30,\n     // Fake HTTP headers\n    'headers' => [\n        'Referer' => 'https://querylist.cc/',\n        'User-Agent' => 'testing/1.0',\n        'Accept'     => 'application/json',\n        'X-Foo'      => ['Bar', 'Baz'],\n        'Cookie'    => 'abc=111;xxx=222'\n    ]\n];\n$ql->get('http://httpbin.org/get',$urlParams,$opts);\n// echo $ql->getHtml();\n```\n\n- Analog login\n```php\n// Post login\n$ql = QueryList::post('http://xxxx.com/login',[\n    'username' => 'admin',\n    'password' => '123456'\n])->get('http://xxx.com/admin');\n// Crawl pages that need to be logged in to access\n$ql->get('http://xxx.com/admin/page');\n//echo $ql->getHtml();\n```\n\n#### Submit forms\nLogin GitHub\n```php\n// Get the QueryList instance\n$ql = QueryList::getInstance();\n// Get the login form\n$form = $ql->get('https://github.com/login')->find('form');\n\n// Fill in the GitHub username and password\n$form->find('input[name=login]')->val('your github username or email');\n$form->find('input[name=password]')->val('your github password');\n\n// Serialize the form data\n$fromData = $form->serializeArray();\n$postData = [];\nforeach ($fromData as $item) {\n    $postData[$item['name']] = $item['value'];\n}\n\n// Submit the login form\n$actionUrl = 'https://github.com'.$form->attr('action');\n$ql->post($actionUrl,$postData);\n// To determine whether the login is successful\n// echo $ql->getHtml();\n$userName = $ql->find('.header-nav-current-user>.css-truncate-target')->text();\nif($userName)\n{\n    echo 'Login successful ! Welcome:'.$userName;\n}else{\n    echo 'Login failed !';\n}\n```\n#### Bind function extension\nCustomize the extension of a `myHttp` method:\n```php\n$ql = QueryList::getInstance();\n\n//Bind a `myHttp` method to the QueryList object\n$ql->bind('myHttp',function ($url){\n\t// $this is the current QueryList object\n    $html = file_get_contents($url);\n    $this->setHtml($html);\n    return $this;\n});\n\n// And then you can call by the name of the binding\n$data = $ql->myHttp('https://toutiao.io')->find('h3 a')->texts();\nprint_r($data->all());\n```\nOr package to class, and then bind:\n```php\n$ql->bind('myHttp',function ($url){\n    return new MyHttp($this,$url);\n});\n```\n\n#### Plugin used\n- Use the PhantomJS plugin to crawl JavaScript dynamically rendered pages:\n\n```php\n// Set the PhantomJS binary file path during installation\n$ql = QueryList::use(PhantomJs::class,'/usr/local/bin/phantomjs');\n\n// Crawl「500px」all picture links\n$data = $ql->browser('https://500px.com/editors')->find('img')->attrs('src');\nprint_r($data->all());\n\n// Use the HTTP proxy\n$ql->browser('https://500px.com/editors',false,[\n\t'--proxy' => '192.168.1.42:8080',\n    '--proxy-type' => 'http'\n])\n```\n\n- Using the CURL multithreading plug-in, multi-threaded crawling GitHub trending :\n\n```php\n$ql = QueryList::use(CurlMulti::class);\n$ql->curlMulti([\n    'https://github.com/trending/php',\n    'https://github.com/trending/go',\n    //.....more urls\n])\n // Called if task is success\n ->success(function (QueryList $ql,CurlMulti $curl,$r){\n    echo \"Current url:{$r['info']['url']} \\r\\n\";\n    $data = $ql->find('h3 a')->texts();\n    print_r($data->all());\n})\n // Task fail callback\n->error(function ($errorInfo,CurlMulti $curl){\n    echo \"Current url:{$errorInfo['info']['url']} \\r\\n\";\n    print_r($errorInfo['error']);\n})\n->start([\n\t// Maximum number of threads\n    'maxThread' => 10,\n    // Number of error retries\n    'maxTry' => 3,\n]);\n\n```\n\n## Plugins\n- [jae-jae/QueryList-PhantomJS](https://github.com/jae-jae/QueryList-PhantomJS):Use PhantomJS to crawl Javascript dynamically rendered page.\n- [jae-jae/QueryList-CurlMulti](https://github.com/jae-jae/QueryList-CurlMulti) : Curl multi threading.\n- [jae-jae/QueryList-AbsoluteUrl](https://github.com/jae-jae/QueryList-AbsoluteUrl) : Converting relative urls to absolute.\n- [jae-jae/QueryList-Rule-Google](https://github.com/jae-jae/QueryList-Rule-Google) : Google searcher.\n- [jae-jae/QueryList-Rule-Baidu](https://github.com/jae-jae/QueryList-Rule-Baidu) : Baidu searcher.\n\n\nView more QueryList plugins and QueryList-based products: [QueryList Community](https://github.com/jae-jae/QueryList-Community)\n\n## Contributing\nWelcome to contribute code for the QueryList。About Contributing Plugins can be viewed:[QueryList Plugin Contributing Guide](https://github.com/jae-jae/QueryList-Community/blob/master/CONTRIBUTING.md)\n\n## Author\nJaeger <JaegerCode@gmail.com>\n\nIf this library is useful for you, say thanks [buying me a beer :beer:](https://www.paypal.me/jaepay)!\n\n## Lisence\nQueryList is licensed under the license of MIT. See the LICENSE for more details.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.1767578125,
          "content": "{\n    \"name\": \"jaeger/querylist\",\n    \"description\": \"Simple, elegant, extensible PHP Web Scraper (crawler/spider),Use the css3 dom selector,Based on phpQuery! 简洁、优雅、可扩展的PHP采集工具(爬虫)，基于phpQuery。\",\n    \"keywords\":[\"QueryList\",\"phpQuery\",\"spider\"],\n    \"homepage\": \"http://querylist.cc\",\n    \"require\": {\n        \"PHP\":\">=8.1\",\n        \"jaeger/phpquery-single\": \"^1\",\n        \"ext-dom\": \"*\",\n        \"symfony/var-dumper\": \">3.4\",\n        \"jaeger/g-http\": \"^2.0\"\n    },\n    \"suggest\":{\n\n    },\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Jaeger\",\n            \"email\": \"JaegerCode@gmail.com\"\n        }\n    ],\n    \"autoload\":{\n        \"psr-4\":{\n            \"QL\\\\\":\"src\"\n        },\n        \"files\": [\n            \"src/Collect/Support/helpers.php\",\n            \"src/Collect/Support/alias.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"files\": [\n            \"src/Collect/Support/helpers.php\",\n            \"src/Collect/Support/alias.php\"\n        ],\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests/\"\n        }\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^8.5\"\n    },\n    \"scripts\": {\n        \"test\": \"./vendor/bin/phpunit\"\n    }\n}\n"
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 15.2431640625,
          "content": null
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.435546875,
          "content": "<phpunit\n        bootstrap=\"vendor/autoload.php\"\n        convertErrorsToExceptions=\"true\"\n        convertNoticesToExceptions=\"true\"\n        convertWarningsToExceptions=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"querylist\">\n            <directory>./tests</directory>\n        </testsuite>\n    </testsuites>\n\n    <filter>\n        <whitelist>\n            <directory suffix=\".php\">src</directory>\n        </whitelist>\n    </filter>\n\n</phpunit>"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}