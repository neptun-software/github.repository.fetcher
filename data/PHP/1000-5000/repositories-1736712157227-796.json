{
  "metadata": {
    "timestamp": 1736712157227,
    "page": 796,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jolicode/JoliNotif",
      "stars": 1406,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1416015625,
          "content": "# Dependencies\n/vendor/\n\n# Composer\n/composer.lock\n\n# Tools\n/build/\n/.php-cs-fixer.cache\n/.phpunit.result.cache\n/var/\n\n# Castor\n.castor.stub.php\n"
        },
        {
          "name": ".php-cs-fixer.php",
          "type": "blob",
          "size": 1.4462890625,
          "content": "<?php\n\n/*\n * This file is part of the JoliNotif project.\n *\n * (c) Loïck Piera <pyrech@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n$fileHeaderComment = <<<'EOF'\n    This file is part of the JoliNotif project.\n\n    (c) Loïck Piera <pyrech@gmail.com>\n\n    For the full copyright and license information, please view the LICENSE\n    file that was distributed with this source code.\n    EOF;\n\n$finder = PhpCsFixer\\Finder::create()\n    ->in(__DIR__)\n    ->append([\n        __FILE__,\n        'castor.php',\n    ])\n    ->notPath('var')\n;\n\nreturn (new PhpCsFixer\\Config())\n    ->setRiskyAllowed(true)\n    ->setRules([\n        '@PHP74Migration' => true,\n        '@PhpCsFixer' => true,\n        '@Symfony' => true,\n        '@Symfony:risky' => true,\n        'php_unit_internal_class' => false, // From @PhpCsFixer but we don't want it\n        'php_unit_test_class_requires_covers' => false, // From @PhpCsFixer but we don't want it\n        'phpdoc_add_missing_param_annotation' => false, // From @PhpCsFixer but we don't want it\n        'header_comment' => ['header' => $fileHeaderComment],\n        'concat_space' => ['spacing' => 'one'],\n        'ordered_class_elements' => true, // Symfony(PSR12) override the default value, but we don't want\n        'blank_line_before_statement' => true, // Symfony(PSR12) override the default value, but we don't want\n    ])\n    ->setFinder($finder)\n;\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.6435546875,
          "content": "# Changes between versions\n\n## Not released yet\n\n* Added support for sound option on TerminalNotifier notifier\n\n## 3.0.0 (2024-10-02)\n\n* Remove deprecated code:\n  * Joli\\JoliNotif\\NotifierFactory\n  * Joli\\JoliNotif\\Notifier interface and all implementations\n  * Toaster notifier and binary\n  * Joli\\JoliNotif\\Util\\OsHelper class\n\n## 2.7.3 (2024-09-30)\n\n* Fixed SnoreToast and Notifu Windows drivers to be non blocking\n\n## 2.7.2 (2024-06-01)\n\n* Changed requirement on psr/log to allow all versions from 1.0 to 3.0\n\n## 2.7.1 (2024-05-03)\n\n* Fixed phar for Windows drivers\n* Fixed executable in verbose mode when no driver is available\n* Fixed executable to better handle option passed several times\n\n## 2.7.0 (2024-05-03)\n\n* Added a new NotifierInterface and DefaultNotifier as the main public API of this package\n* Added wsl-notify-send notifier for Windows Subsystem for Linux\n* Added libnotify based notifier for Linux through FFI\n* Changed TerminalNotifier to use contentImage option for icon instead of appIcon\n* Fixed phar missing some dependencies\n* Marked most of the classes as internal\n* Deprecated all the notifiers classes in favor of the new internal DriverInterface implementations\n* Deprecated the NotifierFactory in favor of the new DefaultNotifier class that hide driver implementation details\n\n## 2.6.0 (2023-12-03)\n\n* Deprecated Joli\\JoliNotif\\Util\\OsHelper in favor of jolicode/php-os-helper package\n* Added support for Symfony 7.x\n* Added support for PHP 8.3\n* Dropped support for PHP 8.0\n\n## 2.5.2 (2023-05-24)\n\n* Added PHAR to GitHub releases\n\n## 2.5.1 (2023-05-24)\n\n* Fixed permissions on Windows notifiers binaries\n\n## 2.5.0 (2022-12-24)\n\n* Dropped support for PHP 7.4\n* Dropped support for Symfony 4.x\n* Added support for PHP 8.2\n\n## 2.4.0 (2021-12-01)\n\n* Dropped support for PHP < 7.4\n* Dropped support for Symfony 3.x\n* Added support for Symfony 6.x\n\n## 2.3.0 (2021-03-07)\n\n* Added SnoreToastNotifier to fix notification on Windows 8+\n* Deprecated ToasterNotifier in favour of SnoreToastNotifier\n* Added support for PHP 8\n\n## 2.2.0 (2020-06-17)\n\n* Added support for kdialog - the native notifier on KDE Desktop\n\n## 2.1.0 (2020-01-10)\n\n* Added support for Symfony > 5.0\n* Dropped support for PHP < 7.2\n\n## 2.0.2 (2019-02-26)\n\n* Fixed compatibility with Windows Subsystem for Linux\n* Fixed compatibility with Symfony 4.2\n\n## 2.0.1 (2018-04-04)\n\n* Fixed autoloader in CLI script\n\n## 2.0.0 (2018-02-12)\n\n* Dropped support for Symfony < 3.3\n* Dropped support for PHP < 7 & HHVM\n* Fixed compatibility with Symfony 4\n* Added better CI configuration\n* Added typehints everywhere\n\n## 1.3.0 (2018-01-25)\n\n* Added binary script to run jolinotif in CLI\n\n## 1.2.0 (2017-07-17)\n\n* Added support for sound and subtitle option on AppleScript notifier\n* Added support for url option on TerminalNotifier notifier\n\n## 1.1.2 (2017-07-13)\n\n* Fixed compatibility with symfony/process 3.3\n\n## 1.1.1 (2017-06-03)\n\n* Fixed Notification icon to always use a canonical absolute path\n\n## 1.1.0 (2017-04-04)\n\n* Added NotifierFactory::createOrThrowException() method\n* Added NullNotifier to get ride of null value\n* Updated php-cs-fixer to v2.0 and fixed CS\n\n## 1.0.5 (2016-03-22)\n\n* Allowed Symfony 3\n* Fixed quote escaping in AppleScriptNotifier\n\n## 1.0.4 (2015-06-20)\n\n* Fixed Mac OSX version detection\n* Removed allowed failure for PHP 7 in Travis\n* Added documentation for usage inside cronjobs\n\n## 1.0.3 (2015-06-03)\n\n* Fixed documentation typo\n* Added easy example debugging\n\n## 1.0.2 (2015-04-13)\n\n* Fixed NotifierFactory phpdoc\n* Added precision about factory returning null\n\n## 1.0.1 (2015-04-01)\n\n* Fixed Symfony version to 2.3\n* Fixed Notifier phpdoc\n* Added brand new documentation\n\n## 1.0 (2015-03-20)\n\n* Initial release\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.8154296875,
          "content": "# Contributing\n\nFirst of all, **thank you** for contributing, **you are awesome**!\n\nEverybody should be able to help. Here's how you can do it:\n\n1. [Fork it](https://github.com/jolicode/JoliNotif/fork_select)\n2. improve it\n3. submit a [pull request](https://help.github.com/articles/creating-a-pull-request)\n\nHere's some tips to make you the best contributor ever:\n\n* [Rules](#rules)\n* [Green tests](#green-tests)\n* [Standard code](#standard-code)\n* [Keeping your fork up-to-date](#keeping-your-fork-up-to-date)\n\nAlso, you will need to install Castor to run the tests and fix CS violations.\nSee [Castor's documentation](https://castor.jolicode.com/getting-started/installation/)\nfor more information.\n\nTo install all the dependencies and tools, run the following command:\n\n```shell\ncastor install\n```\n\n## Rules\n\nHere are a few rules to follow in order to ease code reviews, and discussions\nbefore maintainers accept and merge your work.\n\n* You MUST follow the [PSR-1](http://www.php-fig.org/psr/1/) and\n[PSR-2](http://www.php-fig.org/psr/2/) (see [Rules](#rules)).\n* You MUST run the test suite (see [Green tests](#green-tests)).\n* You MUST write (or update) unit tests.\n* You SHOULD write documentation.\n\nPlease, write [commit messages that make\nsense](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html),\nand [rebase your branch](http://git-scm.com/book/en/Git-Branching-Rebasing)\nbefore submitting your Pull Request (see also how to [keep your\nfork up-to-date](#keeping-your-fork-up-to-date)).\n\nOne may ask you to [squash your\ncommits](http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html)\ntoo. This is used to \"clean\" your Pull Request before merging it (we don't want\ncommits such as `fix tests`, `fix 2`, `fix 3`, etc.).\n\nAlso, while creating your Pull Request on GitHub, you MUST write a description\nwhich gives the context and/or explains why you are creating it.\n\nYour work will then be reviewed as soon as possible (suggestions about some\nchanges, improvements or alternatives may be given).\n\n## Green tests\n\nRun the tests using the following script:\n\n```shell\ncastor phpunit\n```\n\n## Standard code\n\nUse PHP-CS-Fixer to make your code compliant with JoliNotif's coding standards:\n\n```shell\ncastor cs\n```\n\n## Static analysis\n\nUse PHPStan to ensure the code is free of errors:\n\n```shell\ncastor phpstan\n```\n\n## Keeping your fork up-to-date\n\nTo keep your fork up-to-date, you should track the upstream (original) one\nusing the following command:\n\n\n```shell\ngit remote add upstream https://github.com/jolicode/JoliNotif.git\n```\n\nThen get the upstream changes:\n\n```shell\ngit checkout main\ngit pull --rebase origin main\ngit pull --rebase upstream main\ngit checkout <your-branch>\ngit rebase main\n```\n\nFinally, publish your changes:\n\n```shell\ngit push -f origin <your-branch>\n```\n\nYour pull request will be automatically updated.\n\n\nThank you!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03125,
          "content": "Copyright (c) 2015 Loïck Piera\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.83203125,
          "content": "<p align=\"center\">\n    <img src=doc/images/demo.gif alt=\"JoliNotif demo\" />\n</p>\n\n<p align=\"center\">\n    <a href=\"https://packagist.org/packages/jolicode/jolinotif\"><img src=\"https://poser.pugx.org/jolicode/jolinotif/downloads\" alt=\"Total Downloads\"></img></a>\n    <a href=\"https://packagist.org/packages/jolicode/jolinotif\"><img src=\"https://poser.pugx.org/jolicode/jolinotif/v/stable\" alt=\"Latest Stable Version\"></img></a>\n    <a href=\"https://packagist.org/packages/jolicode/jolinotif\"><img src=\"https://poser.pugx.org/jolicode/jolinotif/v/unstable\" alt=\"Latest Unstable Version\"></img></a>\n</p>\n\n# About JoliNotif\n\nJoliNotif is a cross-platform PHP library to display desktop notifications.\nIt works on Linux, Windows or macOS.\n\nRequires PHP >= 8.1 (support for PHP 5 was available in version 1.x, for PHP 7.0\nand 7.1 in version < 2.1.0, for PHP 7.2 and 7.3 in version < 2.4.0, for PHP < 8.0 in version 2.6.0).\n\n> [!NOTE]\n> This library can not be used in a web context (FPM or equivalent). Use\n> it in your CLI scripts or in a [CRON](doc/04-cron-usage.md)\n\n## Installation\n\nUse [Composer](http://getcomposer.org/) to install JoliNotif in your project:\n\n```shell\ncomposer require \"jolicode/jolinotif\"\n```\n\n## Usage\n\n```php\ninclude __DIR__.'/vendor/autoload.php';\n\nuse Joli\\JoliNotif\\Notification;\nuse Joli\\JoliNotif\\DefaultNotifier;\n\n$notifier = new DefaultNotifier();\n\n// Create your notification\n$notification =\n    (new Notification())\n    ->setTitle('Notification title')\n    ->setBody('This is the body of your notification')\n    ->setIcon(__DIR__.'/path/to/your/icon.png')\n    ->addOption('subtitle', 'This is a subtitle') // Only works on macOS (AppleScriptDriver)\n    ->addOption('sound', 'Frog') // Only works on macOS (AppleScriptDriver & TerminalNotifierDriver)\n;\n\n// Send it\n$notifier->send($notification);\n```\n\nA [shell executable](doc/05-cli-usage.md) is also provided to use JoliNotif from CLI:\n\n```shell\njolinotif --title \"Hello\" --body \"World\"\n```\n\n## Further documentation\n\nDiscover more by reading the docs:\n\n* [Basic usage](doc/01-basic-usage.md)\n* [Notification](doc/02-notification.md)\n* [Drivers](doc/03-drivers.md)\n* [CRON usage](doc/04-cron-usage.md)\n* [CLI usage](doc/05-cli-usage.md)\n\nYou can see the current and past versions using one of the following:\n\n* the `git tag` command\n* the [releases page on Github](https://github.com/jolicode/JoliNotif/releases)\n* the file listing the [changes between versions](CHANGELOG.md)\n\nAnd finally some meta documentation:\n\n* [versioning and branching models](VERSIONING.md)\n* [contribution instructions](CONTRIBUTING.md)\n\n## Credits\n\n* [All contributors](https://github.com/jolicode/JoliNotif/graphs/contributors)\n* This project was originally inspired by [mikaelbr/node-notifier](https://github.com/mikaelbr/node-notifier)\n\n## License\n\nJoliNotif is licensed under the MIT License - see the [LICENSE](LICENSE) file\nfor details.\n"
        },
        {
          "name": "VERSIONING.md",
          "type": "blob",
          "size": 0.787109375,
          "content": "# Versioning and branching models\n\nThis file explains the versioning and branching models of this project.\n\n## Versioning\n\nThe versioning is inspired by [Semantic Versioning](http://semver.org/):\n\n> Given a version number MAJOR.MINOR.PATCH, increment the:\n>\n> 1. MAJOR version when you make incompatible API changes\n> 2. MINOR version when you add functionality in a backwards-compatible manner\n> 3. PATCH version when you make backwards-compatible bug fixes\n\n## Branching Model\n\nThe branching is inspired by [@jbenet](https://github.com/jbenet)\n[simple git branching model](https://gist.github.com/jbenet/ee6c9ac48068889b0912):\n\n> 1. `main` must always be deployable.\n> 2. **all changes** are made through feature branches (pull-request + merge)\n> 3. rebase to avoid/resolve conflicts; merge in to `main`\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "castor.php",
          "type": "blob",
          "size": 0.859375,
          "content": "<?php\n\n/*\n * This file is part of the JoliNotif project.\n *\n * (c) Loïck Piera <pyrech@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nuse Castor\\Attribute\\AsRawTokens;\nuse Castor\\Attribute\\AsTask;\n\nuse function Castor\\import;\nuse function Castor\\mount;\nuse function Castor\\run;\n\nimport(__DIR__ . '/tools/php-cs-fixer/castor.php');\nimport(__DIR__ . '/tools/phpstan/castor.php');\n\nmount(__DIR__ . '/tools/phar');\n\n#[AsTask(description: 'Install dependencies')]\nfunction install(): void\n{\n    run(['composer', 'install'], workingDirectory: __DIR__);\n    qa\\cs\\install();\n    qa\\phpstan\\install();\n}\n\n#[AsTask(description: 'Run PHPUnit', ignoreValidationErrors: true)]\nfunction phpunit(#[AsRawTokens] array $rawTokens): void\n{\n    run(['vendor/bin/simple-phpunit', ...$rawTokens]);\n}\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.0791015625,
          "content": "{\n    \"name\": \"jolicode/jolinotif\",\n    \"description\": \"Send desktop notifications on Windows, Linux, MacOS.\",\n    \"keywords\": [\"notification\", \"windows\", \"linux\", \"mac\", \"growl\"],\n    \"license\": \"MIT\",\n    \"type\": \"library\",\n    \"authors\": [\n        {\n            \"name\": \"Loïck Piera\",\n            \"email\": \"pyrech@gmail.com\"\n        }\n    ],\n    \"autoload\": {\n        \"psr-4\": {\n            \"Joli\\\\JoliNotif\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Joli\\\\JoliNotif\\\\tests\\\\\": \"tests/\"\n        }\n    },\n    \"require\": {\n        \"php\": \">=8.1\",\n        \"jolicode/php-os-helper\": \"^0.1.0\",\n        \"psr/log\": \"^1.0 || ^2.0 || ^3.0\",\n        \"symfony/process\": \"^5.4 || ^6.0 || ^7.0\",\n        \"symfony/deprecation-contracts\": \"^3\"\n    },\n    \"require-dev\": {\n        \"symfony/finder\": \"^5.4 || ^6.0 || ^7.0\",\n        \"symfony/phpunit-bridge\": \"^5.4 || ^6.0 || ^7.0\"\n    },\n    \"suggest\": {\n        \"ext-ffi\": \"Needed to send notifications via libnotify on Linux\"\n    },\n    \"bin\": [\n        \"jolinotif\"\n    ],\n    \"config\": {\n        \"sort-packages\": true\n    }\n}\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "jolinotif",
          "type": "blob",
          "size": 6.4130859375,
          "content": "#!/usr/bin/env php\n<?php\n\nuse Joli\\JoliNotif\\DefaultNotifier;\nuse Joli\\JoliNotif\\Notification;\n\nif (file_exists(__DIR__ . '/vendor/autoload.php')) {\n    $loader = require(__DIR__ . '/vendor/autoload.php');\n} elseif (file_exists(__DIR__ . '/../../../vendor/autoload.php')) {\n    $loader = require(__DIR__ . '/../../../vendor/autoload.php');\n} else {\n    throw new \\RuntimeException('Unable to load autoloader.');\n}\n\nfinal class Cli\n{\n    const DESCRIPTION = 'Send notifications to your desktop directly from your terminal.';\n\n    const RULES = [\n        'title'    => [\n            'name'     => 'title',\n            'info'     => 'Notification title.',\n            'required' => true,\n        ],\n        'body'     => [\n            'name'     => 'body',\n            'info'     => 'Notification body.',\n            'required' => true,\n        ],\n        'icon'     => [\n            'name'     => 'icon',\n            'info'     => 'Notification icon.',\n            'required' => false,\n        ],\n        'subtitle' => [\n            'name'     => 'subtitle',\n            'info'     => 'Notification subtitle. Only works on macOS (AppleScriptNotifier).',\n            'required' => false,\n        ],\n        'sound'    => [\n            'name'     => 'sound',\n            'info'     => 'Notification sound. Only works on macOS (AppleScriptNotifier).',\n            'required' => false,\n        ],\n        'url'      => [\n            'name'     => 'url',\n            'info'     => 'Notification url. Only works on macOS (TerminalNotifierNotifier).',\n            'required' => false,\n        ],\n        'help'     => [\n            'name' => 'help',\n            'info' => 'Show this help.',\n            'required' => false,\n            'flag' => true,\n        ],\n        'verbose'     => [\n            'name' => 'verbose',\n            'info' => 'Output debug information.',\n            'required' => false,\n            'flag' => true,\n        ],\n    ];\n\n    /** @var array<string, mixed> */\n    private array $arguments = [];\n\n    private readonly string $command;\n\n    public function __construct()\n    {\n        $this->command = $_SERVER['argv'][0];\n    }\n\n    public function parse(): void\n    {\n        $options = '';\n        $longOptions = array_map(function ($rule) {\n            $flag = $rule['required'] ? ':' : '::';\n\n            return $rule['name'] . $flag;\n        }, self::RULES);\n\n        $this->arguments = getopt($options, $longOptions) ?: [];\n    }\n\n    public function getOption(string $name): mixed\n    {\n        return $this->arguments[$name] ?: false;\n    }\n\n    public function getStringOption(string $name): string\n    {\n        $option = $this->getOption($name);\n\n        if (is_array($option)) {\n            throw new Exception(\"Option --{$name} can be specified only once.\");\n        }\n\n        if (!is_string($option) && !is_numeric($option)) {\n            // Probably not possible to reach this point\n            throw new Exception(\"Invalid type given for option --{$name}.\");\n        }\n\n        return (string) $option;\n    }\n\n    public function hasOption(string $name): bool\n    {\n        return isset($this->arguments[$name]);\n    }\n\n    public function validate(): bool\n    {\n        $valid = true;\n\n        foreach (self::RULES as $rule) {\n            if ($rule['required'] && !$this->hasOption($rule['name'])) {\n                $this->log(\"Please specify notification {$rule['name']} with the option --{$rule['name']}\");\n                $valid = false;\n            }\n\n            if ($this->hasOption($rule['name']) && is_array($this->getOption($rule['name']))) {\n                $this->log(\"Option --{$rule['name']} can be specified only once.\");\n                $valid = false;\n            }\n        }\n\n        return $valid;\n    }\n\n    public function showUsage(): void\n    {\n        $required = [];\n        $optional = [];\n        $usage = $this->command;\n\n        foreach (self::RULES as $name => $rule) {\n            $prefix = $postfix = '';\n            if ($rule['required']) {\n                $required[$name] = $rule;\n            } else {\n                $optional[$name] = $rule;\n                $prefix = '[';\n                $postfix = ']';\n            }\n            $usage .= ' ' . $prefix . $this->formatUsage($name, $rule) . $postfix;\n        }\n\n        $this->log(self::DESCRIPTION);\n        $this->log(PHP_EOL . 'Usage: ' . trim($usage));\n\n        $this->log(PHP_EOL . 'Required Arguments:');\n        foreach ($required as $name => $info) {\n            $value = $this->formatUsage($name, $info);\n            $this->log(\"\\t{$value}\");\n            $this->log(\"\\t\\t{$info['info']}\");\n        }\n\n        $this->log(PHP_EOL . 'Optional Arguments:');\n        foreach ($optional as $name => $info) {\n            $value = $this->formatUsage($name, $info);\n            $this->log(\"\\t{$value}\");\n            $this->log(\"\\t\\t{$info['info']}\");\n        }\n    }\n\n    public function log(string $message): void\n    {\n        echo $message . PHP_EOL;\n    }\n\n    /** @param array{name: string, info: string, required: bool, flag?: bool} $rule */\n    private function formatUsage(string $name, array $rule): string\n    {\n        $example = $rule['required'] ? \" {$name}\" : \"=\\\"{$name}\\\"\";\n        $value = isset($rule['flag']) && $rule['flag'] ? '' : $example;\n\n        return '--' . $name . $value;\n    }\n}\n\n$cli = new Cli();\n\ntry {\n    $cli->parse();\n} catch (Exception $e) {\n    $cli->log($e->getMessage());\n    exit(1);\n}\n\nif ($cli->hasOption('help')) {\n    $cli->showUsage();\n    exit(0);\n}\n\nif (!$cli->validate()) {\n    exit(1);\n}\n\n$notifier = new DefaultNotifier();\n\n$notification = (new Notification())\n    ->setTitle($cli->getStringOption('title'))\n    ->setBody($cli->getStringOption('body'));\n\nif ($cli->hasOption('icon')) {\n    $notification->setIcon($cli->getStringOption('icon'));\n}\n\nif ($cli->hasOption('subtitle')) {\n    $notification->addOption('subtitle', $cli->getStringOption('subtitle'));\n}\n\nif ($cli->hasOption('sound')) {\n    $notification->addOption('sound', $cli->getStringOption('sound'));\n}\n\nif ($cli->hasOption('url')) {\n    $notification->addOption('url', $cli->getStringOption('url'));\n}\n\n$result = $notifier->send($notification);\n$driver = $notifier->getDriver();\n\nif ($cli->hasOption('verbose')) {\n    if (!$driver) {\n        $cli->log('No driver available to display a notification on your system.');\n    } else {\n        $cli->log(sprintf('Notification %s with %s. ', $result ? 'successfully sent' : 'failed', str_replace('Joli\\\\JoliNotif\\\\Driver\\\\', '', $driver::class)));\n    }\n}\n\nexit($result ? 0 : 1);\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.3388671875,
          "content": "includes:\n    #- phpstan-baseline.neon\n\nparameters:\n    level: 9\n    paths:\n        - src\n        - jolinotif\n    tmpDir: 'var/phpstan/tmp'\n    inferPrivatePropertyTypeFromConstructor: true\n    checkGenericClassInNonGenericObjectType: false\n    excludePaths:\n        analyse: []\n    ignoreErrors:\n        - '#Call to an undefined method FFI::.+#'\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.654296875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\" backupGlobals=\"false\" colors=\"true\" bootstrap=\"vendor/autoload.php\">\n  <php>\n    <ini name=\"error_reporting\" value=\"-1\"/>\n    <env name=\"SYMFONY_DEPRECATIONS_HELPER\" value=\"max[self]=13\"/>\n  </php>\n  <testsuites>\n    <testsuite name=\"JoliNotif Test Suite\">\n      <directory>./tests/</directory>\n    </testsuite>\n  </testsuites>\n  <coverage>\n    <include>\n      <directory>./</directory>\n    </include>\n    <exclude>\n      <directory>./vendor</directory>\n    </exclude>\n  </coverage>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}