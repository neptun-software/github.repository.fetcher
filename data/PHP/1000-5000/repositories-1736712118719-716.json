{
  "metadata": {
    "timestamp": 1736712118719,
    "page": 716,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "symfony/mailer",
      "stars": 1512,
      "defaultBranch": "7.2",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.072265625,
          "content": "/Tests export-ignore\n/phpunit.xml.dist export-ignore\n/.git* export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "vendor/\ncomposer.lock\nphpunit.xml\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.0830078125,
          "content": "CHANGELOG\n=========\n\n7.2\n---\n\n * Deprecate `TransportFactoryTestCase`, extend `AbstractTransportFactoryTestCase` instead\n\n   The `testIncompleteDsnException()` test is no longer provided by default. If you make use of it by implementing the `incompleteDsnProvider()` data providers,\n   you now need to use the `IncompleteDsnTestTrait`.\n\n * Make `TransportFactoryTestCase` compatible with PHPUnit 10+\n * Support unicode email addresses such as \"dømi@dømi.example\"\n\n7.1\n---\n\n * Dispatch Postmark's \"406 - Inactive recipient\" API error code as a `PostmarkDeliveryEvent` instead of throwing an exception\n * Add DSN param `auto_tls` to disable automatic STARTTLS\n * Add support for allowing some users even if `recipients` is defined in `EnvelopeListener`\n\n7.0\n---\n\n * Remove the OhMySmtp bridge in favor of the MailPace bridge\n\n6.4\n---\n\n * Add DSN parameter `peer_fingerprint` to verify TLS certificate fingerprint\n * Change the default port for the `mailjet+smtp` transport from 465 to 587\n\n6.3\n---\n\n * Add `MessageEvent::reject()` to allow rejecting an email before sending it\n * Change the default port for the `mailgun+smtp` transport from 465 to 587\n * Add `$authenticators` parameter in `EsmtpTransport` constructor and `EsmtpTransport::setAuthenticators()`\n  to allow overriding of default eSMTP authenticators\n\n6.2.7\n-----\n\n * [BC BREAK] The following data providers for `TransportFactoryTestCase` are now static:\n  `supportsProvider()`, `createProvider()`, `unsupportedSchemeProvider()`and `incompleteDsnProvider()`\n\n6.2\n---\n\n * Add a `mailer:test` command\n * Add `SentMessageEvent` and `FailedMessageEvent` events\n\n6.1\n---\n\n * Make `start()` and `stop()` methods public on `SmtpTransport`\n * Improve extensibility of `EsmtpTransport`\n\n6.0\n---\n\n * The `HttpTransportException` class takes a string at first argument\n\n5.4\n---\n\n * Enable the mailer to operate on any PSR-14-compatible event dispatcher\n\n5.3\n---\n\n * added the `mailer` monolog channel and set it on all transport definitions\n\n5.2.0\n-----\n\n * added `NativeTransportFactory` to configure a transport based on php.ini settings\n * added `local_domain`, `restart_threshold`, `restart_threshold_sleep` and `ping_threshold` options for `smtp`\n * added `command` option for `sendmail`\n\n4.4.0\n-----\n\n * [BC BREAK] changed the `NullTransport` DSN from `smtp://null` to `null://null`\n * [BC BREAK] renamed `SmtpEnvelope` to `Envelope`, renamed `DelayedSmtpEnvelope` to\n   `DelayedEnvelope`\n * [BC BREAK] changed the syntax for failover and roundrobin DSNs\n\n   Before:\n\n   dummy://a || dummy://b (for failover)\n   dummy://a && dummy://b (for roundrobin)\n\n   After:\n\n   failover(dummy://a dummy://b)\n   roundrobin(dummy://a dummy://b)\n\n * added support for multiple transports on a `Mailer` instance\n * [BC BREAK] removed the `auth_mode` DSN option (it is now always determined automatically)\n * STARTTLS cannot be enabled anymore (it is used automatically if TLS is disabled and the server supports STARTTLS)\n * [BC BREAK] Removed the `encryption` DSN option (use `smtps` instead)\n * Added support for the `smtps` protocol (does the same as using `smtp` and port `465`)\n * Added PHPUnit constraints\n * Added `MessageDataCollector`\n * Added `MessageEvents` and `MessageLoggerListener` to allow collecting sent emails\n * [BC BREAK] `TransportInterface` has a new `__toString()` method\n * [BC BREAK] Classes `AbstractApiTransport` and `AbstractHttpTransport` moved under `Transport` sub-namespace.\n * [BC BREAK] Transports depend on `Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface`\n   instead of `Symfony\\Component\\EventDispatcher\\EventDispatcherInterface`.\n * Added possibility to register custom transport for dsn by implementing\n   `Symfony\\Component\\Mailer\\Transport\\TransportFactoryInterface` and tagging with `mailer.transport_factory` tag in DI.\n * Added `Symfony\\Component\\Mailer\\Test\\TransportFactoryTestCase` to ease testing custom transport factories.\n * Added `SentMessage::getDebug()` and `TransportExceptionInterface::getDebug` to help debugging\n * Made `MessageEvent` final\n * add DSN parameter `verify_peer` to disable TLS peer verification for SMTP transport\n\n4.3.0\n-----\n\n * Added the component.\n"
        },
        {
          "name": "Command",
          "type": "tree",
          "content": null
        },
        {
          "name": "DataCollector",
          "type": "tree",
          "content": null
        },
        {
          "name": "DelayedEnvelope.php",
          "type": "blob",
          "size": 2.359375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Mailer;\n\nuse Symfony\\Component\\Mailer\\Exception\\LogicException;\nuse Symfony\\Component\\Mime\\Address;\nuse Symfony\\Component\\Mime\\Header\\Headers;\nuse Symfony\\Component\\Mime\\Message;\n\n/**\n * @author Fabien Potencier <fabien@symfony.com>\n *\n * @internal\n */\nfinal class DelayedEnvelope extends Envelope\n{\n    private bool $senderSet = false;\n    private bool $recipientsSet = false;\n\n    public function __construct(\n        private Message $message,\n    ) {\n    }\n\n    public function setSender(Address $sender): void\n    {\n        parent::setSender($sender);\n\n        $this->senderSet = true;\n    }\n\n    public function getSender(): Address\n    {\n        if (!$this->senderSet) {\n            parent::setSender(self::getSenderFromHeaders($this->message->getHeaders()));\n        }\n\n        return parent::getSender();\n    }\n\n    public function setRecipients(array $recipients): void\n    {\n        parent::setRecipients($recipients);\n\n        $this->recipientsSet = (bool) parent::getRecipients();\n    }\n\n    /**\n     * @return Address[]\n     */\n    public function getRecipients(): array\n    {\n        if ($this->recipientsSet) {\n            return parent::getRecipients();\n        }\n\n        return self::getRecipientsFromHeaders($this->message->getHeaders());\n    }\n\n    private static function getRecipientsFromHeaders(Headers $headers): array\n    {\n        $recipients = [];\n        foreach (['to', 'cc', 'bcc'] as $name) {\n            foreach ($headers->all($name) as $header) {\n                foreach ($header->getAddresses() as $address) {\n                    $recipients[] = $address;\n                }\n            }\n        }\n\n        return $recipients;\n    }\n\n    private static function getSenderFromHeaders(Headers $headers): Address\n    {\n        if ($sender = $headers->get('Sender')) {\n            return $sender->getAddress();\n        }\n        if ($return = $headers->get('Return-Path')) {\n            return $return->getAddress();\n        }\n        if ($from = $headers->get('From')) {\n            return $from->getAddresses()[0];\n        }\n\n        throw new LogicException('Unable to determine the sender of the message.');\n    }\n}\n"
        },
        {
          "name": "Envelope.php",
          "type": "blob",
          "size": 3.548828125,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Mailer;\n\nuse Symfony\\Component\\Mailer\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Mailer\\Exception\\LogicException;\nuse Symfony\\Component\\Mime\\Address;\nuse Symfony\\Component\\Mime\\RawMessage;\n\n/**\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass Envelope\n{\n    private Address $sender;\n    private array $recipients = [];\n\n    /**\n     * @param Address[] $recipients\n     */\n    public function __construct(Address $sender, array $recipients)\n    {\n        $this->setSender($sender);\n        $this->setRecipients($recipients);\n    }\n\n    public static function create(RawMessage $message): self\n    {\n        if (RawMessage::class === $message::class) {\n            throw new LogicException('Cannot send a RawMessage instance without an explicit Envelope.');\n        }\n\n        return new DelayedEnvelope($message);\n    }\n\n    public function setSender(Address $sender): void\n    {\n        // to ensure deliverability of bounce emails independent of UTF-8 capabilities of SMTP servers\n        if (!preg_match('/^[^@\\x80-\\xFF]++@/', $sender->getAddress())) {\n            throw new InvalidArgumentException(\\sprintf('Invalid sender \"%s\": non-ASCII characters not supported in local-part of email.', $sender->getAddress()));\n        }\n        $this->sender = $sender;\n    }\n\n    /**\n     * @return Address Returns a \"mailbox\" as specified by RFC 2822\n     *                 Must be converted to an \"addr-spec\" when used as a \"MAIL FROM\" value in SMTP (use getAddress())\n     */\n    public function getSender(): Address\n    {\n        return $this->sender;\n    }\n\n    /**\n     * @param Address[] $recipients\n     */\n    public function setRecipients(array $recipients): void\n    {\n        if (!$recipients) {\n            throw new InvalidArgumentException('An envelope must have at least one recipient.');\n        }\n\n        $this->recipients = [];\n        foreach ($recipients as $recipient) {\n            if (!$recipient instanceof Address) {\n                throw new InvalidArgumentException(\\sprintf('A recipient must be an instance of \"%s\" (got \"%s\").', Address::class, get_debug_type($recipient)));\n            }\n            $this->recipients[] = new Address($recipient->getAddress());\n        }\n    }\n\n    /**\n     * @return Address[]\n     */\n    public function getRecipients(): array\n    {\n        return $this->recipients;\n    }\n\n    /**\n     * Returns true if any address' localpart contains at least one\n     * non-ASCII character, and false if all addresses have all-ASCII\n     * localparts.\n     *\n     * This helps to decide whether to the SMTPUTF8 extensions (RFC\n     * 6530 and following) for any given message.\n     *\n     * The SMTPUTF8 extension is strictly required if any address\n     * contains a non-ASCII character in its localpart. If non-ASCII\n     * is only used in domains (e.g. horst@freiherr-von-mühlhausen.de)\n     * then it is possible to send the message using IDN encoding\n     * instead of SMTPUTF8. The most common software will display the\n     * message as intended.\n     */\n    public function anyAddressHasUnicodeLocalpart(): bool\n    {\n        if ($this->getSender()->hasUnicodeLocalpart()) {\n            return true;\n        }\n        foreach ($this->getRecipients() as $r) {\n            if ($r->hasUnicodeLocalpart()) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"
        },
        {
          "name": "Event",
          "type": "tree",
          "content": null
        },
        {
          "name": "EventListener",
          "type": "tree",
          "content": null
        },
        {
          "name": "Exception",
          "type": "tree",
          "content": null
        },
        {
          "name": "Header",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (c) 2019-present Fabien Potencier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Mailer.php",
          "type": "blob",
          "size": 2.634765625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Mailer;\n\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Component\\Mailer\\Event\\MessageEvent;\nuse Symfony\\Component\\Mailer\\Exception\\TransportExceptionInterface;\nuse Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage;\nuse Symfony\\Component\\Mailer\\Transport\\TransportInterface;\nuse Symfony\\Component\\Messenger\\Exception\\HandlerFailedException;\nuse Symfony\\Component\\Messenger\\MessageBusInterface;\nuse Symfony\\Component\\Mime\\RawMessage;\n\n/**\n * @author Fabien Potencier <fabien@symfony.com>\n */\nfinal class Mailer implements MailerInterface\n{\n    public function __construct(\n        private TransportInterface $transport,\n        private ?MessageBusInterface $bus = null,\n        private ?EventDispatcherInterface $dispatcher = null,\n    ) {\n    }\n\n    public function send(RawMessage $message, ?Envelope $envelope = null): void\n    {\n        if (null === $this->bus) {\n            $this->transport->send($message, $envelope);\n\n            return;\n        }\n\n        $stamps = [];\n        if (null !== $this->dispatcher) {\n            // The dispatched event here has `queued` set to `true`; the goal is NOT to render the message, but to let\n            // listeners do something before a message is sent to the queue.\n            // We are using a cloned message as we still want to dispatch the **original** message, not the one modified by listeners.\n            // That's because the listeners will run again when the email is sent via Messenger by the transport (see `AbstractTransport`).\n            // Listeners should act depending on the `$queued` argument of the `MessageEvent` instance.\n            $clonedMessage = clone $message;\n            $clonedEnvelope = null !== $envelope ? clone $envelope : Envelope::create($clonedMessage);\n            $event = new MessageEvent($clonedMessage, $clonedEnvelope, (string) $this->transport, true);\n            $this->dispatcher->dispatch($event);\n            $stamps = $event->getStamps();\n\n            if ($event->isRejected()) {\n                return;\n            }\n        }\n\n        try {\n            $this->bus->dispatch(new SendEmailMessage($message, $envelope), $stamps);\n        } catch (HandlerFailedException $e) {\n            foreach ($e->getWrappedExceptions() as $nested) {\n                if ($nested instanceof TransportExceptionInterface) {\n                    throw $nested;\n                }\n            }\n            throw $e;\n        }\n    }\n}\n"
        },
        {
          "name": "MailerInterface.php",
          "type": "blob",
          "size": 0.75,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Mailer;\n\nuse Symfony\\Component\\Mailer\\Exception\\TransportExceptionInterface;\nuse Symfony\\Component\\Mime\\RawMessage;\n\n/**\n * Interface for mailers able to send emails synchronously and/or asynchronously.\n *\n * Implementations must support synchronous and asynchronous sending.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\ninterface MailerInterface\n{\n    /**\n     * @throws TransportExceptionInterface\n     */\n    public function send(RawMessage $message, ?Envelope $envelope = null): void;\n}\n"
        },
        {
          "name": "Messenger",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.458984375,
          "content": "Mailer Component\n================\n\nThe Mailer component helps sending emails.\n\nGetting Started\n---------------\n\n```bash\ncomposer require symfony/mailer\n```\n\n```php\nuse Symfony\\Component\\Mailer\\Transport;\nuse Symfony\\Component\\Mailer\\Mailer;\nuse Symfony\\Component\\Mime\\Email;\n\n$transport = Transport::fromDsn('smtp://localhost');\n$mailer = new Mailer($transport);\n\n$email = (new Email())\n    ->from('hello@example.com')\n    ->to('you@example.com')\n    //->cc('cc@example.com')\n    //->bcc('bcc@example.com')\n    //->replyTo('fabien@example.com')\n    //->priority(Email::PRIORITY_HIGH)\n    ->subject('Time for Symfony Mailer!')\n    ->text('Sending emails is fun again!')\n    ->html('<p>See Twig integration for better HTML integration!</p>');\n\n$mailer->send($email);\n```\n\nTo enable the Twig integration of the Mailer, require `symfony/twig-bridge` and\nset up the `BodyRenderer`:\n\n```php\nuse Symfony\\Bridge\\Twig\\Mime\\BodyRenderer;\nuse Symfony\\Bridge\\Twig\\Mime\\TemplatedEmail;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcher;\nuse Symfony\\Component\\Mailer\\EventListener\\MessageListener;\nuse Symfony\\Component\\Mailer\\Mailer;\nuse Symfony\\Component\\Mailer\\Transport;\nuse Twig\\Environment as TwigEnvironment;\n\n$twig = new TwigEnvironment(...);\n$messageListener = new MessageListener(null, new BodyRenderer($twig));\n\n$eventDispatcher = new EventDispatcher();\n$eventDispatcher->addSubscriber($messageListener);\n\n$transport = Transport::fromDsn('smtp://localhost', $eventDispatcher);\n$mailer = new Mailer($transport, null, $eventDispatcher);\n\n$email = (new TemplatedEmail())\n    // ...\n    ->htmlTemplate('emails/signup.html.twig')\n    ->context([\n        'expiration_date' => new \\DateTimeImmutable('+7 days'),\n        'username' => 'foo',\n    ])\n;\n$mailer->send($email);\n```\n\nSponsor\n-------\n\nThe Mailer component for Symfony 7.2 is [backed][1] by:\n\n * [Sweego][2], a European email and SMS sending platform for developers and product builders. Easily create, deliver, and monitor your emails and notifications.\n\nHelp Symfony by [sponsoring][3] its development!\n\nResources\n---------\n\n * [Documentation](https://symfony.com/doc/current/mailer.html)\n * [Contributing](https://symfony.com/doc/current/contributing/index.html)\n * [Report issues](https://github.com/symfony/symfony/issues) and\n   [send Pull Requests](https://github.com/symfony/symfony/pulls)\n   in the [main Symfony repository](https://github.com/symfony/symfony)\n\n[1]: https://symfony.com/backers\n[2]: https://www.sweego.io/\n[3]: https://symfony.com/sponsor\n"
        },
        {
          "name": "SentMessage.php",
          "type": "blob",
          "size": 2.0224609375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Mailer;\n\nuse Symfony\\Component\\Mime\\Message;\nuse Symfony\\Component\\Mime\\RawMessage;\n\n/**\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass SentMessage\n{\n    private RawMessage $original;\n    private RawMessage $raw;\n    private string $messageId;\n    private string $debug = '';\n\n    /**\n     * @internal\n     */\n    public function __construct(\n        RawMessage $message,\n        private Envelope $envelope,\n    ) {\n        $message->ensureValidity();\n\n        $this->original = $message;\n\n        if ($message instanceof Message) {\n            $message = clone $message;\n            $headers = $message->getHeaders();\n            if (!$headers->has('Message-ID')) {\n                $headers->addIdHeader('Message-ID', $message->generateMessageId());\n            }\n            $this->messageId = $headers->get('Message-ID')->getId();\n            $this->raw = new RawMessage($message->toIterable());\n        } else {\n            $this->raw = $message;\n        }\n    }\n\n    public function getMessage(): RawMessage\n    {\n        return $this->raw;\n    }\n\n    public function getOriginalMessage(): RawMessage\n    {\n        return $this->original;\n    }\n\n    public function getEnvelope(): Envelope\n    {\n        return $this->envelope;\n    }\n\n    public function setMessageId(string $id): void\n    {\n        $this->messageId = $id;\n    }\n\n    public function getMessageId(): string\n    {\n        return $this->messageId;\n    }\n\n    public function getDebug(): string\n    {\n        return $this->debug;\n    }\n\n    public function appendDebug(string $debug): void\n    {\n        $this->debug .= $debug;\n    }\n\n    public function toString(): string\n    {\n        return $this->raw->toString();\n    }\n\n    public function toIterable(): iterable\n    {\n        return $this->raw->toIterable();\n    }\n}\n"
        },
        {
          "name": "Test",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "Transport.php",
          "type": "blob",
          "size": 7.6396484375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Mailer;\n\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\Mailer\\Bridge\\Amazon\\Transport\\SesTransportFactory;\nuse Symfony\\Component\\Mailer\\Bridge\\Azure\\Transport\\AzureTransportFactory;\nuse Symfony\\Component\\Mailer\\Bridge\\Brevo\\Transport\\BrevoTransportFactory;\nuse Symfony\\Component\\Mailer\\Bridge\\Google\\Transport\\GmailTransportFactory;\nuse Symfony\\Component\\Mailer\\Bridge\\Infobip\\Transport\\InfobipTransportFactory;\nuse Symfony\\Component\\Mailer\\Bridge\\Mailchimp\\Transport\\MandrillTransportFactory;\nuse Symfony\\Component\\Mailer\\Bridge\\MailerSend\\Transport\\MailerSendTransportFactory;\nuse Symfony\\Component\\Mailer\\Bridge\\Mailgun\\Transport\\MailgunTransportFactory;\nuse Symfony\\Component\\Mailer\\Bridge\\Mailjet\\Transport\\MailjetTransportFactory;\nuse Symfony\\Component\\Mailer\\Bridge\\Mailomat\\Transport\\MailomatTransportFactory;\nuse Symfony\\Component\\Mailer\\Bridge\\MailPace\\Transport\\MailPaceTransportFactory;\nuse Symfony\\Component\\Mailer\\Bridge\\Mailtrap\\Transport\\MailtrapTransportFactory;\nuse Symfony\\Component\\Mailer\\Bridge\\Postal\\Transport\\PostalTransportFactory;\nuse Symfony\\Component\\Mailer\\Bridge\\Postmark\\Transport\\PostmarkTransportFactory;\nuse Symfony\\Component\\Mailer\\Bridge\\Resend\\Transport\\ResendTransportFactory;\nuse Symfony\\Component\\Mailer\\Bridge\\Scaleway\\Transport\\ScalewayTransportFactory;\nuse Symfony\\Component\\Mailer\\Bridge\\Sendgrid\\Transport\\SendgridTransportFactory;\nuse Symfony\\Component\\Mailer\\Bridge\\Sweego\\Transport\\SweegoTransportFactory;\nuse Symfony\\Component\\Mailer\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Mailer\\Exception\\UnsupportedSchemeException;\nuse Symfony\\Component\\Mailer\\Transport\\Dsn;\nuse Symfony\\Component\\Mailer\\Transport\\FailoverTransport;\nuse Symfony\\Component\\Mailer\\Transport\\NativeTransportFactory;\nuse Symfony\\Component\\Mailer\\Transport\\NullTransportFactory;\nuse Symfony\\Component\\Mailer\\Transport\\RoundRobinTransport;\nuse Symfony\\Component\\Mailer\\Transport\\SendmailTransportFactory;\nuse Symfony\\Component\\Mailer\\Transport\\Smtp\\EsmtpTransportFactory;\nuse Symfony\\Component\\Mailer\\Transport\\TransportFactoryInterface;\nuse Symfony\\Component\\Mailer\\Transport\\TransportInterface;\nuse Symfony\\Component\\Mailer\\Transport\\Transports;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\n\n/**\n * @author Fabien Potencier <fabien@symfony.com>\n * @author Konstantin Myakshin <molodchick@gmail.com>\n */\nfinal class Transport\n{\n    private const FACTORY_CLASSES = [\n        AzureTransportFactory::class,\n        BrevoTransportFactory::class,\n        GmailTransportFactory::class,\n        InfobipTransportFactory::class,\n        MailerSendTransportFactory::class,\n        MailgunTransportFactory::class,\n        MailjetTransportFactory::class,\n        MailomatTransportFactory::class,\n        MailPaceTransportFactory::class,\n        MandrillTransportFactory::class,\n        PostalTransportFactory::class,\n        PostmarkTransportFactory::class,\n        MailtrapTransportFactory::class,\n        ResendTransportFactory::class,\n        ScalewayTransportFactory::class,\n        SendgridTransportFactory::class,\n        SesTransportFactory::class,\n        SweegoTransportFactory::class,\n    ];\n\n    public static function fromDsn(#[\\SensitiveParameter] string $dsn, ?EventDispatcherInterface $dispatcher = null, ?HttpClientInterface $client = null, ?LoggerInterface $logger = null): TransportInterface\n    {\n        $factory = new self(iterator_to_array(self::getDefaultFactories($dispatcher, $client, $logger)));\n\n        return $factory->fromString($dsn);\n    }\n\n    public static function fromDsns(#[\\SensitiveParameter] array $dsns, ?EventDispatcherInterface $dispatcher = null, ?HttpClientInterface $client = null, ?LoggerInterface $logger = null): TransportInterface\n    {\n        $factory = new self(iterator_to_array(self::getDefaultFactories($dispatcher, $client, $logger)));\n\n        return $factory->fromStrings($dsns);\n    }\n\n    /**\n     * @param TransportFactoryInterface[] $factories\n     */\n    public function __construct(\n        private iterable $factories,\n    ) {\n    }\n\n    public function fromStrings(#[\\SensitiveParameter] array $dsns): Transports\n    {\n        $transports = [];\n        foreach ($dsns as $name => $dsn) {\n            $transports[$name] = $this->fromString($dsn);\n        }\n\n        return new Transports($transports);\n    }\n\n    public function fromString(#[\\SensitiveParameter] string $dsn): TransportInterface\n    {\n        [$transport, $offset] = $this->parseDsn($dsn);\n        if ($offset !== \\strlen($dsn)) {\n            throw new InvalidArgumentException('The mailer DSN has some garbage at the end.');\n        }\n\n        return $transport;\n    }\n\n    private function parseDsn(#[\\SensitiveParameter] string $dsn, int $offset = 0): array\n    {\n        static $keywords = [\n            'failover' => FailoverTransport::class,\n            'roundrobin' => RoundRobinTransport::class,\n        ];\n\n        while (true) {\n            foreach ($keywords as $name => $class) {\n                $name .= '(';\n                if ($name === substr($dsn, $offset, \\strlen($name))) {\n                    $offset += \\strlen($name) - 1;\n                    preg_match('{\\(([^()]|(?R))*\\)}A', $dsn, $matches, 0, $offset);\n                    if (!isset($matches[0])) {\n                        continue;\n                    }\n\n                    ++$offset;\n                    $args = [];\n                    while (true) {\n                        [$arg, $offset] = $this->parseDsn($dsn, $offset);\n                        $args[] = $arg;\n                        if (\\strlen($dsn) === $offset) {\n                            break;\n                        }\n                        ++$offset;\n                        if (')' === $dsn[$offset - 1]) {\n                            break;\n                        }\n                    }\n\n                    return [new $class($args), $offset];\n                }\n            }\n\n            if (preg_match('{(\\w+)\\(}A', $dsn, $matches, 0, $offset)) {\n                throw new InvalidArgumentException(\\sprintf('The \"%s\" keyword is not valid (valid ones are \"%s\"), ', $matches[1], implode('\", \"', array_keys($keywords))));\n            }\n\n            if ($pos = strcspn($dsn, ' )', $offset)) {\n                return [$this->fromDsnObject(Dsn::fromString(substr($dsn, $offset, $pos))), $offset + $pos];\n            }\n\n            return [$this->fromDsnObject(Dsn::fromString(substr($dsn, $offset))), \\strlen($dsn)];\n        }\n    }\n\n    public function fromDsnObject(Dsn $dsn): TransportInterface\n    {\n        foreach ($this->factories as $factory) {\n            if ($factory->supports($dsn)) {\n                return $factory->create($dsn);\n            }\n        }\n\n        throw new UnsupportedSchemeException($dsn);\n    }\n\n    /**\n     * @return \\Traversable<int, TransportFactoryInterface>\n     */\n    public static function getDefaultFactories(?EventDispatcherInterface $dispatcher = null, ?HttpClientInterface $client = null, ?LoggerInterface $logger = null): \\Traversable\n    {\n        foreach (self::FACTORY_CLASSES as $factoryClass) {\n            if (class_exists($factoryClass)) {\n                yield new $factoryClass($dispatcher, $client, $logger);\n            }\n        }\n\n        yield new NullTransportFactory($dispatcher, $client, $logger);\n\n        yield new SendmailTransportFactory($dispatcher, $client, $logger);\n\n        yield new EsmtpTransportFactory($dispatcher, $client, $logger);\n\n        yield new NativeTransportFactory($dispatcher, $client, $logger);\n    }\n}\n"
        },
        {
          "name": "Transport",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.291015625,
          "content": "{\n    \"name\": \"symfony/mailer\",\n    \"type\": \"library\",\n    \"description\": \"Helps sending emails\",\n    \"keywords\": [],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Fabien Potencier\",\n            \"email\": \"fabien@symfony.com\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=8.2\",\n        \"egulias/email-validator\": \"^2.1.10|^3|^4\",\n        \"psr/event-dispatcher\": \"^1\",\n        \"psr/log\": \"^1|^2|^3\",\n        \"symfony/event-dispatcher\": \"^6.4|^7.0\",\n        \"symfony/mime\": \"^7.2\",\n        \"symfony/service-contracts\": \"^2.5|^3\"\n    },\n    \"require-dev\": {\n        \"symfony/console\": \"^6.4|^7.0\",\n        \"symfony/http-client\": \"^6.4|^7.0\",\n        \"symfony/messenger\": \"^6.4|^7.0\",\n        \"symfony/twig-bridge\": \"^6.4|^7.0\"\n    },\n    \"conflict\": {\n        \"symfony/http-client-contracts\": \"<2.5\",\n        \"symfony/http-kernel\": \"<6.4\",\n        \"symfony/messenger\": \"<6.4\",\n        \"symfony/mime\": \"<6.4\",\n        \"symfony/twig-bridge\": \"<6.4\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Symfony\\\\Component\\\\Mailer\\\\\": \"\" },\n        \"exclude-from-classmap\": [\n            \"/Tests/\"\n        ]\n    },\n    \"minimum-stability\": \"dev\"\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.7978515625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"http://schema.phpunit.de/9.3/phpunit.xsd\"\n         backupGlobals=\"false\"\n         colors=\"true\"\n         bootstrap=\"vendor/autoload.php\"\n         failOnRisky=\"true\"\n         failOnWarning=\"true\"\n>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\" />\n    </php>\n\n    <testsuites>\n        <testsuite name=\"Symfony Mailer Component Test Suite\">\n            <directory>./Tests/</directory>\n        </testsuite>\n    </testsuites>\n\n    <coverage>\n        <include>\n            <directory>./</directory>\n        </include>\n        <exclude>\n            <directory>./Tests</directory>\n            <directory>./vendor</directory>\n        </exclude>\n    </coverage>\n</phpunit>\n"
        }
      ]
    }
  ]
}