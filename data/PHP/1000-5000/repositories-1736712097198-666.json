{
  "metadata": {
    "timestamp": 1736712097198,
    "page": 666,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mikehaertl/phpwkhtmltopdf",
      "stars": 1600,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.12890625,
          "content": "/tests export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\n.travis.yml export-ignore\nphpunit.xml.dist export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0615234375,
          "content": "composer.lock\nphpunit.xml\n/vendor/\n*.swp\n.phpunit.result.cache\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.091796875,
          "content": "# CHANGELOG\n\n## 2.5.0\n\n * Enhancement: Issue #366 Allow to pass additional HTTP headers to the `send()` method\n\n## 2.4.2\n\n * This release only contains fixes for the test setup.\n\n## 2.4.1\n\n * Fix: Pushed version constraints for php-shellcommand and php-tmpfile which should fix hanging issues.\n\n## 2.4.0\n\n * Enhancement: Issue #307 Improved and unified detection of URL, File, HTML and XML content\n\n## 2.3.1\n\n * Fix: Issue #264 Problem with tmpDir passed in constructor\n\n## 2.3.0\n\n * Issue #258 Add toString() method to Image class\n\n## 2.2.2\n\n * Also create tmp file for xsl-style-sheet and user-style-sheet if required\n\n## 2.2.1\n\n * Issue #219: Make `header-html` and `footer-html` also work for Toc and cover page\n\n## 2.2.0\n\n * Add a `$type` parameter to `addPage()` and `addToc()` (#169)\n\n## 2.1.1\n\n * Add `-a` to default `xvfb-run` options\n\n## 2.1.0\n\n * We now follow [semver](http://semver.org/)!\n * Issue #112: Add toString() to get raw PDF content as string\n\n## 2.0.4\n\n * Issue #100: Fix issue with header-/footer-html\n\n## 2.0.3\n\n * Make dependencies in `composer.json` less restrictive\n * Remove `composer.lock` to allow for independent updates of dependencies\n\n## 2.0.2\n\n * Issue #56: Fix issue with `proc_open()` on windows\n * Add detection for XML strings\n\n## 2.0.1\n\n * Issue #61: Fix ignored `tmpDir`\n\n## 2.0.0\n\nIn this major release we have added a wrapper for wkhtmltoimage and cleaned\nup the code and interface. We also introduced namespaces and Travis testing.\nPlease have a look at the README.md for the new API.\n\n## 1.2.6\n\n * Issue #54: Add binary autodetection for windows\n * Issue #47: Add escaping to temp files to improve behavior on windows\n\n## 1.2.5\n\n * Issue #46: Add 'ignoreWarnings' option\n * Issue #45: Fix for missing sys_get_temp_dir() on older PHP 5 versions\n * Issue #41: Fix escaping of some parameters\n\n## 1.2.4\n\n * Add support for HTML strings in html-footer and html-header\n\n## 1.2.3\n\n * Issue #36: Bugfix in send()\n\n## 1.2.2\n\n * Issue #34: Allow to set filename even when PDF is streamed inline\n * Issue #35: Support repeatable wkhtmltopdf options\n\n## 1.2.1\n\n * Issue #29: Add Xvfb support\n\n## 1.2.0\n\nA minor change in the options was introduced in this release. If you used the `bin`\noption before you have to rename it to `binPath` now. Please check the docs for\nfull documentation.\n\n * Issue #27: Add autodetection of wkhtmltopdf binary on Unix based systems (thanks eusonlito)\n * Issue #28: Implement optional passing of environment variables to proc_open (thanks eusonlito)\n * Issue #30: Bug with options without an argument\n\n## 1.1.6\n\n * Issue #21: Add support for wkhtmltopdf 0.9 versions\n\n## 1.1.5\n\n * Add composer autoloading (thanks igorw)\n * Issue #10: Improve error reporting\n\n## 1.1.4\n\n * Add composer.jsone\n\n## 1.1.3\n\n * Made getCommand() public to ease debugging\n * Issue #6: Fix typo that prevented shell escaping on windows\n * Issue #5: Updated docs: wkhtmltopdf can not process PDF files\n\n## 1.1.2\n\n * Issue #4: Fix issue with longer PDFs\n\n## 1.1.1\n\n * Issue #2: Fix escaping of arguments\n * Issue #3: Fix HTML detection regex\n\n\n## 1.1.0\n\n * Issue #1: Allow to add HTML as string\n\n\n## 1.0.0\n\n * Initial release\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Michael HÃ¤rtl\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.2080078125,
          "content": "PHP WkHtmlToPdf\n===============\n\n[![GitHub Tests](https://github.com/mikehaertl/phpwkhtmltopdf/workflows/Tests/badge.svg)](https://github.com/mikehaertl/phpwkhtmltopdf/actions)\n[![Packagist Version](https://img.shields.io/packagist/v/mikehaertl/phpwkhtmltopdf?label=version)](https://packagist.org/packages/mikehaertl/phpwkhtmltopdf)\n[![Packagist Downloads](https://img.shields.io/packagist/dt/mikehaertl/phpwkhtmltopdf)](https://packagist.org/packages/mikehaertl/phpwkhtmltopdf)\n[![GitHub license](https://img.shields.io/github/license/mikehaertl/phpwkhtmltopdf)](https://github.com/mikehaertl/phpwkhtmltopdf/blob/master/LICENSE)\n[![Packagist PHP Version Support](https://img.shields.io/packagist/php-v/mikehaertl/phpwkhtmltopdf)](https://packagist.org/packages/mikehaertl/phpwkhtmltopdf)\n\nPHP WkHtmlToPdf provides a simple and clean interface to ease PDF and image creation with\n[wkhtmltopdf](http://wkhtmltopdf.org). **The `wkhtmltopdf` and - optionally - `wkhtmltoimage`\ncommand must be installed and working on your system.** See the section below for details.\n\nFor Windows systems make sure to set the path to wkhtmltopdf.exe in the binary option. Alternatively you can add the wkhtmltopdf \"bin\" directory to the system PATH variable to allow wkhtmltopdf command available to Windows CMD.\n\n## Installation\n\nInstall the package through [composer](http://getcomposer.org):\n\n```\ncomposer require mikehaertl/phpwkhtmltopdf\n```\n\nMake sure, that you include the composer [autoloader](https://getcomposer.org/doc/01-basic-usage.md#autoloading)\nsomewhere in your codebase.\n\n## Examples\n\n### Single page PDF\n\n```php\n<?php\nuse mikehaertl\\wkhtmlto\\Pdf;\n\n// You can pass a filename, a HTML string, an URL or an options array to the constructor\n$pdf = new Pdf('/path/to/page.html');\n\n// On some systems you may have to set the path to the wkhtmltopdf executable\n// $pdf->binary = 'C:\\...';\n\nif (!$pdf->saveAs('/path/to/page.pdf')) {\n    $error = $pdf->getError();\n    // ... handle error here\n}\n```\n\n### Multi page PDF with Toc and Cover page\n\n\n```php\n<?php\nuse mikehaertl\\wkhtmlto\\Pdf;\n\n$pdf = new Pdf;\n$pdf->addPage('/path/to/page.html');\n$pdf->addPage('<html>....</html>');\n$pdf->addPage('http://www.example.com');\n\n// Add a cover (same sources as above are possible)\n$pdf->addCover('/path/to/mycover.html');\n\n// Add a Table of contents\n$pdf->addToc();\n\n// Save the PDF\nif (!$pdf->saveAs('/path/to/report.pdf')) {\n    $error = $pdf->getError();\n    // ... handle error here\n}\n\n// ... or send to client for inline display\nif (!$pdf->send()) {\n    $error = $pdf->getError();\n    // ... handle error here\n}\n\n// ... or send to client as file download\nif (!$pdf->send('report.pdf')) {\n    $error = $pdf->getError();\n    // ... handle error here\n}\n\n// ... or you can get the raw pdf as a string\n$content = $pdf->toString();\n```\n\n### Creating an image\n\n```php\n<?php\nuse mikehaertl\\wkhtmlto\\Image;\n\n// You can pass a filename, a HTML string, an URL or an options array to the constructor\n$image = new Image('/path/to/page.html');\n$image->saveAs('/path/to/page.png');\n\n// ... or send to client for inline display\nif (!$image->send()) {\n    $error = $image->getError();\n    // ... handle error here\n}\n\n// ... or send to client as file download\nif (!$image->send('page.png')) {\n    $error = $image->getError();\n    // ... handle error here\n}\n```\n\n## Setting options\n\nThe `wkhtmltopdf` shell command accepts different types of options:\n\n * global options (e.g. to set the document's DPI or the default page options)\n * page options (e.g. to supply a custom CSS file for a page)\n * toc options (e.g. to set a TOC header)\n\nPlease see `wkhtmltopdf -H` for a full explanation. All options are passed as array, for example:\n\n```php\n<?php\n$options = array(\n    'no-outline',           // option without argument\n    'encoding' => 'UTF-8',  // option with argument\n\n    // Option with 2 arguments\n    'cookie' => array('name'=>'value'),\n\n    // Repeatable options with single argument\n    'run-script' => array(\n        '/path/to/local1.js',\n        '/path/to/local2.js',\n    ),\n\n    // Repeatable options with 2 arguments\n    'replace' => array(\n        'number' => $page++,      // Replace '[number]'\n        'title' => $pageTitle,    // Replace '[title]'\n    ),\n);\n```\n\nOptions can be passed to several methods for PDFs:\n\n```php\n<?php\n$pdf = new Pdf($globalOptions);         // Set global PDF options\n$pdf->setOptions($globalOptions);       // Set global PDF options (alternative)\n$pdf->addPage($page, $pageOptions);     // Add page with options\n$pdf->addCover($page, $pageOptions);    // Add cover with options\n$pdf->addToc($tocOptions);              // Add TOC with options\n```\n\n> Note, that you can also use page options in the global PDF options. `wkhtmltopdf`\n> will apply them to all pages unless you override them when you add a page.\n\nFor `wkhtmltoimage` there's only one set of options:\n\n```php\n<?php\n$image = new Image($options);   // Set image options\n$image->setOptions($options);   // Set image options (alternative)\n```\n\n### Wrapper options\n\nThe wrapper itself is configured by the following special options that can be passed\nto the constructor, set as object properties or via `setOptions()`:\n\n * `binary`: Full path to the `wkhtmltopdf` command. Default is `wkhtmltopdf` which assumes that the\n   command is in your shell's search path.\n * `commandOptions`: Options to pass to https://github.com/mikehaertl/php-shellcommand.\n * `tmpDir`: Path to tmp directory. Defaults to the PHP temp dir.\n * `ignoreWarnings`: Whether to ignore any errors if a PDF file was still created. Default is `false`.\n * `version9`: Whether to use command line syntax for older wkhtmltopdf versions.\n\nIn addition to the `binary`, `commandOptions`, `tmpDir` and `ignoreWarnings` options above,\nthe `Image` class also has a `type` option:\n\n * `type`: The image type. Default is `png`. You can also use `jpg` or `bmp`.\n\n`commandOptions` can be used to set environment variables for `wkhtmltopdf`. For example, if you\nwant to pass UTF-8 encoded arguments, you may have to set the `LANG` environment variable.\n\n```php\n<?php\n$pdf = new Pdf(array(\n    'binary' => '/obscure/path/to/wkhtmltopdf',\n    'ignoreWarnings' => true,\n    'commandOptions' => array(\n        'useExec' => true,      // Can help on Windows systems\n        'procEnv' => array(\n            // Check the output of 'locale -a' on your system to find supported languages\n            'LANG' => 'en_US.utf-8',\n        ),\n    ),\n));\n```\n\n### Passing strings\n\nSome options like `header-html` usually expect a URL or a filename. With our\nlibrary you can also pass a string. The class will try to detect if the\nargument is a URL, a filename or some HTML or XML content.  To make detection\neasier you can surround your content in `<html>` tag.\n\nIf this doesn't work correctly you can also pass an instance of our `File`\nhelper as a last resort:\n\n```php\n<?php\nuse mikehaertl\\tmp\\File;\n$options = [\n    'header-html' => new File('Complex content', '.html'),\n];\n```\n\n## Error handling\n\n`send()`, `saveAs()` and `toString()` will return `false` on error. In this case the detailed error message is\navailable from `getError()`:\n\n```php\n<?php\nif (!$pdf->send()) {\n    throw new Exception('Could not create PDF: '.$pdf->getError());\n}\n\n$content = $pdf->toString();\nif ($content === false) {\n    throw new Exception('Could not create PDF: '.$pdf->getError());\n}\n```\n\n## Known Issues\n\n### Use under Windows\n\nIf you use double quotes (`\"`) or percent signs (`%`) as option values, they may get converted to spaces.\nIn this case you can disable argument escaping in the [command](https://github.com/mikehaertl/php-shellcommand).\nThere are also two interesting options to `proc_open()` that you may want to use on Windows:\n\n```php\n<?php\n$pdf = new Pdf(array(\n    'commandOptions' => array(\n        'escapeArgs' => false,\n        'procOptions' => array(\n            // This will bypass the cmd.exe which seems to be recommended on Windows\n            'bypass_shell' => true,\n            // Also worth a try if you get unexplainable errors\n            'suppress_errors' => true,\n        ),\n    ),\n    ...\n));\n```\n\nBut then you have to take care of proper argument escaping yourself. In some cases it may be neccessary to\nsurround your argument values with extra double quotes.\n\nI also found that some options don't work on Windows (tested with wkhtmltopdf 0.11 rc2), like the\n`user-style-sheet` option used in the example below.\n\n### Download Problems\n\nThere have been many reports about corrupted PDFs or images when using `send()`.\nThey are often caused by the webserver (Apache, Nginx, ...) performing additional\ncompression. This will mess up the `Content-Length` header which is added by this\nlibrary. It's useful to let the browser show a progress bar.\n\nTo fix this there are two options:\n\n 1. Exclude the download URL from compression in your Webserver. For example if your\n    script is called `pdf.php` then for [mod_deflate](https://httpd.apache.org/docs/2.4/mod/mod_deflate.html) in Apache\n    you could try to add this to your configuration:\n    ```\n    SetEnvIfNoCase REQUEST_URI ^/pdf.php$ no-gzip dont-vary\n    ```\n\n    For Nginx there are [similar solutions](https://serverfault.com/questions/438237/turn-off-gzip-for-a-location-in-nginx)\n    to disable `gzip` for a specific location.\n\n 2. Suppress the `Content-Length` header when you send a file (available since 2.5.0):\n\n    ```php\n    <?php\n    $pdf->send('name.pdf', false, array(\n        'Content-Length' => false,\n    ));\n    $image->send('name.png', false, array(\n        'Content-Length' => false,\n    ));\n    ```\n\n\n## Installation of wkhtmltopdf\n\nIt's recommended that you download the latest wkhtmltopdf from their website:\n\n http://wkhtmltopdf.org/downloads.html\n\nThese versions should run out of the box.\n\nIf for some reason you can't do so, you may run into an issue with the dynamically linked version of\n`wkhtmltopdf`. This is what you get for example on Ubuntu 12.04 LTS if you install the wkhtmltopdf package.\nIt will work, but to use all features it requires an X server which is usually not available on headless\nwebservers.\n\nWe therefore provide two Xvfb based workarounds. You can either use\n\n * the built in Xvfb support or\n * a standalone Xvfb server.\n\nBoth require the Xvfb package to be installed on the system and both also have some drawbacks.\n\n#### Built in Xvfb support\n\nThis wraps each call to `wkhtmltopdf` with [xvfb-run](http://manpages.ubuntu.com/manpages/lucid/man1/xvfb-run.1.html).\n`xvfb-run` will run any given command in a X environment without all the overhead of a full X session.\nThe drawback with this solution is, that there's still a new session fired up for each an every PDF you create,\nwhich will create quite some extra load on your CPU. So this setup is only recommended for low frequency sites.\n\nTo use the built in support you have to set `enableXvfb` in the `commandOptions`. There are also some options you can set.\n\n```php\n<?php\n$pdf = new Pdf(array(\n    // Explicitly tell wkhtmltopdf that we're using an X environment\n    'use-xserver',\n\n    // Enable built in Xvfb support in the command\n    'commandOptions' => array(\n        'enableXvfb' => true,\n\n        // Optional: Set your path to xvfb-run. Default is just 'xvfb-run'.\n        // 'xvfbRunBinary' => '/usr/bin/xvfb-run',\n\n        // Optional: Set options for xfvb-run. The following defaults are used.\n        // 'xvfbRunOptions' =>  '--server-args=\"-screen 0, 1024x768x24\"',\n    ),\n));\n```\n\n#### Standalone Xvfb\n\nIt's better to start a Xvfb process once and reuse it for all your PHP requests\n(thanks to Larry Williamson for [the original idea](https://coderwall.com/p/tog9eq)).\nThis requires that you have root access to your machine as you have to add a startup script\nfor that process. We have provided an example [init script](https://gist.github.com/eusonlito/7889622)\nfor Ubuntu (thanks eusonlito). You can put it to `/etc/init.d/xvfb` and add it to your startup files with\n`update-rc.d xvfb defaults 10`.\n\nIf your system is based on systemd [this config](https://gist.github.com/nkm/91006178753df6f503c1)\nshould help (thanks nkm).\n\nIf your `Xvfb` process is running, you just have to tell the class to use this X display for\nrendering. This is done via an environment variable.\n\n```php\n<?php\n$pdf = new Pdf(array(\n    'use-xserver',\n    'commandOptions' => array(\n        // You can change ':0' to whatever display you pick in your daemon script\n        'procEnv' => array( 'DISPLAY' => ':0' ),\n    ),\n));\n```\n\n## Full example\n\nFor me `wkhtmltopdf` seems to create best results with smart shrinking turned off.\nBut then I had scaling issues which went away after I set all margins to zero and instead\nadded the margins through CSS. You can also use `cm` or `in` in CSS as this is more apropriate for print styles.\n\n```php\n<?php\nuse mikehaertl\\wkhtmlto\\Pdf;\n\n// Create a new Pdf object with some global PDF options\n$pdf = new Pdf(array(\n    'no-outline',         // Make Chrome not complain\n    'margin-top'    => 0,\n    'margin-right'  => 0,\n    'margin-bottom' => 0,\n    'margin-left'   => 0,\n\n    // Default page options\n    'disable-smart-shrinking',\n    'user-style-sheet' => '/path/to/pdf.css',\n));\n\n// Add a page. To override above page defaults, you could add\n// another $options array as second argument.\n$pdf->addPage('/path/to/demo.html');\n\nif (!$pdf->send()) {\n    $error = $pdf->getError();\n    // ... handle error here\n}\n```\n\n**demo.html**\n```html\n<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n\n    <div id=\"print-area\">\n        <div id=\"header\">\n            This is an example header.\n        </div>\n        <div id=\"content\">\n            <h1>Demo</h1>\n            <p>This is example content</p>\n        </div>\n        <div id=\"footer\">\n            This is an example footer.\n        </div>\n    </div>\n\n</body>\n</html>\n```\n\n**pdf.css**\n```css\n/* Define page size. Requires print-area adjustment! */\nbody {\n    margin:     0;\n    padding:    0;\n    width:      21cm;\n    height:     29.7cm;\n}\n\n/* Printable area */\n#print-area {\n    position:   relative;\n    top:        1cm;\n    left:       1cm;\n    width:      19cm;\n    height:     27.6cm;\n\n    font-size:      10px;\n    font-family:    Arial;\n}\n\n#header {\n    height:     3cm;\n\n    background: #ccc;\n}\n#footer {\n    position:   absolute;\n    bottom:     0;\n    width:      100%;\n    height:     3cm;\n\n    background: #ccc;\n}\n```\n\n## Links\n\nAlso check out my [php-pdftk](https://github.com/mikehaertl/php-pdftk) wrapper around `pdftk`\nwhich brings the full power of `pdftk` to PHP.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.818359375,
          "content": "{\n    \"name\": \"mikehaertl/phpwkhtmltopdf\",\n    \"description\": \"A slim PHP wrapper around wkhtmltopdf with an easy to use and clean OOP interface\",\n    \"keywords\": [\"pdf\", \"wkhtmltopdf\", \"wkhtmltoimage\" ],\n    \"homepage\": \"http://mikehaertl.github.com/phpwkhtmltopdf/\",\n    \"type\": \"library\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Michael Haertl\",\n            \"email\": \"haertl.mike@gmail.com\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=5.0.0\",\n        \"mikehaertl/php-tmpfile\": \"^1.2.1\",\n        \"mikehaertl/php-shellcommand\": \"^1.5.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"mikehaertl\\\\wkhtmlto\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"tests\\\\\": \"tests\"\n        }\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \">4.0 <9.4\"\n    }\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.5244140625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         bootstrap=\"./tests/bootstrap.php\"\n>\n    <testsuites>\n        <testsuite name=\"phpwkhtmltopdf Test Suite\">\n            <directory>./tests/</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}