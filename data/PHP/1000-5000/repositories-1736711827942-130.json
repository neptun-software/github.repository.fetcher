{
  "metadata": {
    "timestamp": 1736711827942,
    "page": 130,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/recaptcha",
      "stars": 3489,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2607421875,
          "content": "/.github export-ignore\n/examples export-ignore\n/tests export-ignore\n/.gitattributes export-ignore\n/.gitignore export-ignore\n/.travis.yml export-ignore\n/app.yml export-ignore\n/ARCHITECTURE.md export-ignore\n/CONTRIBUTING.md export-ignore\n/phpunit.xml.dist export-ignore"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.123046875,
          "content": "/.php_cs.cache\n/.phpunit.result.cache\n.phpunit.cache/\n/build\n/composer.lock\n/examples/config.php\n/nbproject/private/\n/vendor/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.658203125,
          "content": "dist: xenial\n\nlanguage: php\n\nphp:\n  - '5.6'\n  - '7.0'\n  - '7.1'\n  - '7.2'\n  - '7.3'\n  - '7.4'\n\nmatrix:\n  include:\n    - php: 5.5\n      dist: trusty\n\nbefore_script:\n  - composer install\n  - phpenv version-name | grep ^5.[34] && echo \"extension=apc.so\" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini ; true\n  - phpenv version-name | grep ^5.[34] && echo \"apc.enable_cli=1\" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini ; true\n\nscript:\n  - mkdir -p build/logs\n  - composer run-script lint\n  - composer run-script test\n\nafter_success:\n  - travis_retry php vendor/bin/php-coveralls\n\ncache:\n  directories:\n    - \"$HOME/.composer/cache/files\"\n\ngit:\n  depth: 5\n"
        },
        {
          "name": "ARCHITECTURE.md",
          "type": "blob",
          "size": 2.4736328125,
          "content": "# Architecture\n\nThe general pattern of usage is to instantiate the `ReCaptcha` class with your\nsecret key, specify any additional validation rules, and then call `verify()`\nwith the reCAPTCHA response and user's IP address. For example:\n\n```php\n<?php\n$recaptcha = new \\ReCaptcha\\ReCaptcha($secret);\n$resp = $recaptcha->setExpectedHostname('recaptcha-demo.appspot.com')\n                  ->verify($gRecaptchaResponse, $remoteIp);\nif ($resp->isSuccess()) {\n    // Verified!\n} else {\n    $errors = $resp->getErrorCodes();\n}\n```\n\nBy default, this will use the\n[`stream_context_create()`](https://secure.php.net/stream_context_create) and\n[`file_get_contents()`](https://secure.php.net/file_get_contents) to make a POST\nrequest to the reCAPTCHA service. This is handled by the\n[`RequestMethod\\Post`](./src/ReCaptcha/RequestMethod/Post.php) class.\n\n## Alternate request methods\n\nYou may need to use other methods for making requests in your environment. The\n[`ReCaptcha`](./src/ReCaptcha/ReCaptcha.php) class allows an optional\n[`RequestMethod`](./src/ReCaptcha/RequestMethod.php) instance to configure this.\nFor example, if you want to use [cURL](https://secure.php.net/curl) instead you\ncan do this:\n\n```php\n<?php\n$recaptcha = new \\ReCaptcha\\ReCaptcha($secret, new \\ReCaptcha\\RequestMethod\\CurlPost());\n```\n\nAlternatively, you can also use a [socket](https://secure.php.net/fsockopen):\n\n```php\n<?php\n$recaptcha = new \\ReCaptcha\\ReCaptcha($secret, new \\ReCaptcha\\RequestMethod\\SocketPost());\n```\n\n## Adding new request methods\n\nCreate a class that implements the\n[`RequestMethod`](./src/ReCaptcha/RequestMethod.php) interface. The convention\nis to name this class `RequestMethod\\`_MethodType_`Post` and create a separate\n`RequestMethod\\`_MethodType_ class that wraps just the calls to the network\ncalls themselves. This means that the `RequestMethod\\`_MethodType_`Post` can be\nunit tested by passing in a mock. Take a look at\n[`RequestMethod\\CurlPost`](./src/ReCaptcha/RequestMethod/CurlPost.php) and\n[`RequestMethod\\Curl`](./src/ReCaptcha/RequestMethod/Curl.php) with the matching\n[`RequestMethod/CurlPostTest`](./tests/ReCaptcha/RequestMethod/CurlPostTest.php)\nto see this pattern in action.\n\n### Error conventions\n\nThe client returns the response as provided by the reCAPTCHA services augmented\nwith additional error codes based on the client's checks. When adding a new\n[`RequestMethod`](./src/ReCaptcha/RequestMethod.php) ensure that it returns the\n`ReCaptcha::E_CONNECTION_FAILED` and `ReCaptcha::E_BAD_RESPONSE` where\nappropriate.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.1630859375,
          "content": "# Contributing\n\nWant to contribute? Great! First, read this page (including the small print at\nthe end).\n\n## Contributor License Agreement\n\nBefore we can use your code, you must sign the [Google Individual Contributor\nLicense\nAgreement](https://developers.google.com/open-source/cla/individual?csw=1)\n(CLA), which you can do online. The CLA is necessary mainly because you own the\ncopyright to your changes, even after your contribution becomes part of our\ncodebase, so we need your permission to use and distribute your code. We also\nneed to be sure of various other thingsâ€”for instance that you'll tell us if you\nknow that your code infringes on other people's patents. You don't have to sign\nthe CLA until after you've submitted your code for review (a link will be\nautomatically added to your Pull Request) and a member has approved it, but you\nmust do it before we can put your code into our codebase. Before you start\nworking on a larger contribution, you should get in touch with us first through\nthe issue tracker with your idea so that we can help out and possibly guide you.\nCoordinating up front makes it much easier to avoid frustration later on.\n\n## Linting and testing\n\nWe use PHP Coding Standards Fixer to maintain coding standards and PHPUnit to\nrun our tests. For convenience, there are Composer scripts to run each of these:\n\n```sh\ncomposer run-script lint\ncomposer run-script test\n```\n\nThese are run automatically by [Travis\nCI](https://travis-ci.org/google/recaptcha) against your Pull Request, but it's\na good idea to run them locally before submission to avoid getting things\nbounced back. That said, tests can be a little daunting so feel free to submit\nyour PR and ask for help.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review.\nReviews are conducted on the Pull Requests. The reviews are there to ensure and\nimprove code quality, so treat them like a discussion and opportunity to learn.\nDon't get disheartened if your Pull Request isn't just automatically approved.\n\n### The small print\n\nContributions made by corporations are covered by a different agreement than the\none above, the Software Grant and Corporate Contributor License Agreement.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4833984375,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2019, Google Inc.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.2685546875,
          "content": "# reCAPTCHA PHP client library\n\n[![Build Status](https://travis-ci.org/google/recaptcha.svg)](https://travis-ci.org/google/recaptcha)\n[![Coverage Status](https://coveralls.io/repos/github/google/recaptcha/badge.svg)](https://coveralls.io/github/google/recaptcha)\n[![Latest Stable Version](https://poser.pugx.org/google/recaptcha/v/stable.svg)](https://packagist.org/packages/google/recaptcha)\n[![Total Downloads](https://poser.pugx.org/google/recaptcha/downloads.svg)](https://packagist.org/packages/google/recaptcha)\n\nreCAPTCHA is a free CAPTCHA service that protects websites from spam and abuse.\nThis is a PHP library that wraps up the server-side verification step required\nto process responses from the reCAPTCHA service. This client supports both v2\nand v3.\n\n- reCAPTCHA: https://www.google.com/recaptcha\n- This repo: https://github.com/google/recaptcha\n- Hosted demo: https://recaptcha-demo.appspot.com/\n- Version: 1.3.0\n- License: BSD, see [LICENSE](LICENSE)\n\n## Installation\n\n### Composer (recommended)\n\nUse [Composer](https://getcomposer.org) to install this library from Packagist:\n[`google/recaptcha`](https://packagist.org/packages/google/recaptcha)\n\nRun the following command from your project directory to add the dependency:\n\n```sh\ncomposer require google/recaptcha \"^1.3\"\n```\n\nAlternatively, add the dependency directly to your `composer.json` file:\n\n```json\n\"require\": {\n    \"google/recaptcha\": \"^1.3\"\n}\n```\n\n### Support for earlier versions of PHP\n\nThe 1.3 release moves to PHP 8 and up. For earlier versions, you will need to\nstay with the 1.2 releases.\n\n### Direct download\n\nDownload the [ZIP file](https://github.com/google/recaptcha/archive/master.zip)\nand extract into your project. An autoloader script is provided in\n`src/autoload.php` which you can require into your script. For example:\n\n```php\nrequire_once '/path/to/recaptcha/src/autoload.php';\n$recaptcha = new \\ReCaptcha\\ReCaptcha($secret);\n```\n\nThe classes in the project are structured according to the\n[PSR-4](https://www.php-fig.org/psr/psr-4/) standard, so you can also use your\nown autoloader or require the needed files directly in your code.\n\n## Usage\n\nFirst obtain the appropriate keys for the type of reCAPTCHA you wish to\nintegrate for v2 at https://www.google.com/recaptcha/admin or v3 at\nhttps://g.co/recaptcha/v3.\n\nThen follow the [integration guide on the developer\nsite](https://developers.google.com/recaptcha/intro) to add the reCAPTCHA\nfunctionality into your frontend.\n\nThis library comes in when you need to verify the user's response. On the PHP\nside you need the response from the reCAPTCHA service and secret key from your\ncredentials. Instantiate the `ReCaptcha` class with your secret key, specify any\nadditional validation rules, and then call `verify()` with the reCAPTCHA\nresponse (usually in `$_POST['g-recaptcha-response']` or the response from\n`grecaptcha.execute()` in JS which is in `$gRecaptchaResponse` in the example)\nand user's IP address. For example:\n\n```php\n<?php\n$recaptcha = new \\ReCaptcha\\ReCaptcha($secret);\n$resp = $recaptcha->setExpectedHostname('recaptcha-demo.appspot.com')\n                  ->verify($gRecaptchaResponse, $remoteIp);\nif ($resp->isSuccess()) {\n    // Verified!\n} else {\n    $errors = $resp->getErrorCodes();\n}\n```\n\nThe following methods are available:\n\n- `setExpectedHostname($hostname)`: ensures the hostname matches. You must do\n  this if you have disabled \"Domain/Package Name Validation\" for your\n  credentials.\n- `setExpectedApkPackageName($apkPackageName)`: if you're verifying a response\n  from an Android app. Again, you must do this if you have disabled\n  \"Domain/Package Name Validation\" for your credentials.\n- `setExpectedAction($action)`: ensures the action matches for the v3 API.\n- `setScoreThreshold($threshold)`: set a score threshold for responses from the\n  v3 API\n- `setChallengeTimeout($timeoutSeconds)`: set a timeout between the user passing\n  the reCAPTCHA and your server processing it.\n\nEach of the `set`\\*`()` methods return the `ReCaptcha` instance so you can chain\nthem together. For example:\n\n```php\n<?php\n$recaptcha = new \\ReCaptcha\\ReCaptcha($secret);\n$resp = $recaptcha->setExpectedHostname('recaptcha-demo.appspot.com')\n                  ->setExpectedAction('homepage')\n                  ->setScoreThreshold(0.5)\n                  ->verify($gRecaptchaResponse, $remoteIp);\n\nif ($resp->isSuccess()) {\n    // Verified!\n} else {\n    $errors = $resp->getErrorCodes();\n}\n```\n\nYou can find the constants for the libraries error codes in the `ReCaptcha`\nclass constants, e.g. `ReCaptcha::E_HOSTNAME_MISMATCH`\n\nFor more details on usage and structure, see [ARCHITECTURE](ARCHITECTURE.md).\n\n### Examples\n\nYou can see examples of each reCAPTCHA type in [examples/](examples/). You can\nrun the examples locally by using the Composer script:\n\n```sh\ncomposer run-script serve-examples\n```\n\nThis makes use of the in-built PHP dev server to host the examples at\nhttp://localhost:8080/\n\nThese are also hosted on Google AppEngine Flexible environment at\nhttps://recaptcha-demo.appspot.com/. This is configured by\n[`app.yaml`](./app.yaml) which you can also use to [deploy to your own AppEngine\nproject](https://cloud.google.com/appengine/docs/flexible/php/download).\n\n## Contributing\n\nNo one ever has enough engineers, so we're very happy to accept contributions\nvia Pull Requests. For details, see [CONTRIBUTING](CONTRIBUTING.md)\n"
        },
        {
          "name": "app.yaml",
          "type": "blob",
          "size": 0.0849609375,
          "content": "runtime: php\nenv: flex\n\nskip_files:\n- tests\n\nruntime_config:\n  document_root: examples\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.23046875,
          "content": "{\n    \"name\": \"google/recaptcha\",\n    \"description\": \"Client library for reCAPTCHA, a free service that protects websites from spam and abuse.\",\n    \"type\": \"library\",\n    \"keywords\": [\"recaptcha\", \"captcha\", \"spam\", \"abuse\"],\n    \"homepage\": \"https://www.google.com/recaptcha/\",\n    \"license\": \"BSD-3-Clause\",\n    \"support\": {\n        \"forum\": \"https://groups.google.com/forum/#!forum/recaptcha\",\n        \"source\": \"https://github.com/google/recaptcha\"\n    },\n    \"require\": {\n        \"php\": \">=8\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^10\",\n        \"friendsofphp/php-cs-fixer\": \"^3.14\",\n        \"php-coveralls/php-coveralls\": \"^2.5\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"ReCaptcha\\\\\": \"src/ReCaptcha\"\n        }\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"1.3.x-dev\"\n        }\n    },\n    \"scripts\": {\n        \"lint\": \"PHP_CS_FIXER_IGNORE_ENV=1 vendor/bin/php-cs-fixer -vvv fix --using-cache=no --dry-run .\",\n        \"lint-fix\": \"PHP_CS_FIXER_IGNORE_ENV=1 vendor/bin/php-cs-fixer -vvv fix --using-cache=no .\",\n        \"test\": \"XDEBUG_MODE=coverage vendor/bin/phpunit\",\n        \"serve-examples\": \"@php -S localhost:8080 -t examples\"\n    },\n    \"config\": {\n        \"process-timeout\": 0\n    }\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.5927734375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.0/phpunit.xsd\" colors=\"true\" bootstrap=\"src/autoload.php\" cacheDirectory=\".phpunit.cache\">\n  <coverage>\n    <include>\n      <directory suffix=\".php\">src/ReCaptcha/</directory>\n    </include>\n    <report>\n      <clover outputFile=\"build/logs/clover.xml\"/>\n    </report>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"reCAPTCHA Test Suite\">\n      <directory>tests/ReCaptcha/</directory>\n    </testsuite>\n  </testsuites>\n  <logging/>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}