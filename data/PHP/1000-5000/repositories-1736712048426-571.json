{
  "metadata": {
    "timestamp": 1736712048426,
    "page": 571,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MyIntervals/PHP-CSS-Parser",
      "stars": 1774,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4189453125,
          "content": "# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file, and with sane defaults\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nindent_style = space\nindent_size = 4\nmax_line_length = 120\n\n[*.md]\nmax_line_length = 80\n# GitHub-flavored markdown uses two spaces and the end of a line to indicate a linebreak.\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.302734375,
          "content": "/.editorconfig export-ignore\n/.gitattributes export-ignore\n/.github/ export-ignore\n/.gitignore export-ignore\n/.phive/ export-ignore\n/CODE_OF_CONDUCT.md export-ignore\n/CONTRIBUTING.md export-ignore\n/bin/ export-ignore\n/config/ export-ignore\n/docs/ export-ignore\n/phpunit.xml export-ignore\n/tests/ export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.13671875,
          "content": "/.phive/*\n/.php-cs-fixer.cache\n/.php_cs.cache\n/.phpunit.result.cache\n/composer.lock\n/coverage.xml\n/phpstan.neon\n/vendor/\n!/.phive/phars.xml\n"
        },
        {
          "name": ".phive",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 10.7451171875,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\nThis project adheres to [Semantic Versioning](https://semver.org/).\n\nPlease also have a look at our\n[API and deprecation policy](docs/API-and-deprecation-policy.md). \n\n## x.y.z\n\n### Added\n\n- Add official support for PHP 8.4 (#657)\n- Support arithmetic operators in CSS function arguments (#607)\n- Add support for inserting an item in a CSS list (#545)\n- Add a class diagram to the README (#482)\n- Add support for the `dvh`, `lvh` and `svh` length units (#415)\n- Add more tests (#449)\n\n### Changed\n\n- Mark parsing-internal classes and methods as `@internal` (#674)\n- Block installations on unsupported higher PHP versions (#691)\n- Improve performance of `Value::parseValue` with many delimiters by refactoring\n  to remove `array_search()` (#413)\n- Add visibility to all class/interface constants (#469)\n\n### Deprecated\n\n- Deprecate `Parser::setCharset()` and `Parser::getCharset()` (#688)\n- Deprecate the expansion of shorthand properties (#578, #580, #579, #577, #576,\n  #575, #574, #573, #572, #571, #570, #569, #566, #567, #558)\n\n### Removed\n\n- Remove `Rule::getValues()` (#582)\n- Remove `Rule::setValues()` (#562)\n- Remove `Document::getAllSelectors()` (#561)\n- Remove `DeclarationBlock::getSelector()` (#559)\n- Remove `DeclarationBlock::setSelector()` (#560)\n- Drop support for PHP < 7.2 (#420)\n\n### Fixed\n\n- Fix type errors in PHP strict mode (#664)\n- Fix undefined local variable in `CalcFunction::parse()` (#593)\n- Fix PHP notice caused by parsing invalid color values having less than 6\n  characters (#485)\n- Fix (regression) failure to parse at-rules with strict parsing (#456)\n\n### Documentation\n\n- Add an API and deprecation policy (#720)\n\n@ziegenberg is a new contributor to this release and did a lot of the heavy\nlifting. Thanks! :heart:\n\n## 8.5.0\n\n### Added\n\n- Add a method to get an import's media queries (#384)\n- Add more unit tests (#381, #382)\n\n### Fixed\n\n- Retain CSSList and Rule comments when rendering CSS (#351)\n- Replace invalid `turns` unit with `turn` (#350)\n- Also allow string values for rules (#348)\n- Fix invalid calc parsing (#169)\n- Handle scientific notation when parsing sizes (#179)\n- Fix PHP 8.1 compatibility in `ParserState::strsplit()` (#344)\n\n## 8.4.0\n\n### Features\n\n* Support for PHP 8.x\n* PHPDoc annotations\n* Allow usage of CSS variables inside color functions (by parsing them as\n  regular functions)\n* Use PSR-12 code style\n* *No deprecations*\n\n### Bugfixes\n\n* Improved handling of whitespace in `calc()`\n* Fix parsing units whose prefix is also a valid unit, like `vmin`\n* Allow passing an object to `CSSList#replace`\n* Fix PHP 7.3 warnings\n* Correctly parse keyframes with `%`\n* Don’t convert large numbers to scientific notation\n* Allow a file to end after an `@import`\n* Preserve case of CSS variables as specced\n* Allow identifiers to use escapes the same way as strings\n* No longer use `eval` for the comparison in `getSelectorsBySpecificity`, in\n  case it gets passed untrusted input (CVE-2020-13756). Also fixed in 8.3.1,\n  8.2.1, 8.1.1, 8.0.1, 7.0.4, 6.0.2, 5.2.1, 5.1.3, 5.0.9, 4.0.1, 3.0.1, 2.0.1,\n  1.0.1.\n* Prevent an infinite loop when parsing invalid grid line names\n* Remove invalid unit `vm`\n* Retain rule order after expanding shorthands\n\n### Backwards-incompatible changes\n\n* PHP ≥ 5.6 is now required\n* HHVM compatibility target dropped\n\n## 8.3.0 (2019-02-22)\n\n* Refactor parsing logic to mostly reside in the class files whose data\n  structure is to be parsed (this should eventually allow us to unit-test\n  specific parts of the parsing logic individually).\n* Fix error in parsing `calc` expessions when the first operand is a negative\n  number, thanks to @raxbg.\n* Support parsing CSS4 colors in hex notation with alpha values, thanks to\n  @raxbg.\n* Swallow more errors in lenient mode, thanks to @raxbg.\n* Allow specifying arbitrary strings to output before and after declaration\n  blocks, thanks to @westonruter.\n* *No backwards-incompatible changes*\n* *No deprecations*\n\n## 8.2.0 (2018-07-13)\n\n* Support parsing `calc()`, thanks to @raxbg.\n* Support parsing grid-lines, again thanks to @raxbg.\n* Support parsing legacy IE filters (`progid:`) in lenient mode, thanks to\n  @FMCorz\n* Performance improvements parsing large files, again thanks to @FMCorz\n* *No backwards-incompatible changes*\n* *No deprecations*\n\n## 8.1.0 (2016-07-19)\n\n* Comments are no longer silently ignored but stored with the object with which\n  they appear (no render support, though). Thanks to @FMCorz.\n* The IE hacks using `\\0` and `\\9` can now be parsed (and rendered) in lenient\n  mode. Thanks (again) to @FMCorz.\n* Media queries with or without spaces before the query are parsed. Still no\n  *real* parsing support, though. Sorry…\n* PHPUnit is now listed as a dev-dependency in composer.json.\n* *No backwards-incompatible changes*\n* *No deprecations*\n\n## 8.0.0 (2016-06-30)\n\n* Store source CSS line numbers in tokens and parsing exceptions.\n* *No deprecations*\n\n### Backwards-incompatible changes\n\n* Unrecoverable parser errors throw an exception of type\n  `Sabberworm\\CSS\\Parsing\\SourceException` instead of `\\Exception`.\n\n## 7.0.3 (2016-04-27)\n\n* Fixed parsing empty CSS when multibyte is off\n* *No backwards-incompatible changes*\n* *No deprecations*\n\n## 7.0.2 (2016-02-11)\n\n* 150 time performance boost thanks\n  to @[ossinkine](https://github.com/ossinkine)\n* *No backwards-incompatible changes*\n* *No deprecations*\n\n## 7.0.1 (2015-12-25)\n\n* No more suppressed `E_NOTICE`\n* *No backwards-incompatible changes*\n* *No deprecations*\n\n## 7.0.0 (2015-08-24)\n\n* Compatibility with PHP 7. Well timed, eh?\n* *No deprecations*\n\n### Backwards-incompatible changes\n\n* The `Sabberworm\\CSS\\Value\\String` class has been renamed to\n  `Sabberworm\\CSS\\Value\\CSSString`.\n\n## 6.0.1 (2015-08-24)\n\n* Remove some declarations in interfaces incompatible with PHP 5.3 (< 5.3.9)\n* *No deprecations*\n\n## 6.0.0 (2014-07-03)\n\n* Format output using Sabberworm\\CSS\\OutputFormat\n* *No backwards-incompatible changes*\n\n### Deprecations\n\n* The parse() method replaces __toString with an optional argument (instance of\n  the OutputFormat class)\n\n## 5.2.0 (2014-06-30)\n\n* Support removing a selector from a declaration block using\n  `$oBlock->removeSelector($mSelector)`\n* Introduce a specialized exception (Sabberworm\\CSS\\Parsing\\OuputException) for\n  exceptions during output rendering\n\n* *No deprecations*\n\n#### Backwards-incompatible changes\n\n* Outputting a declaration block that has no selectors throws an OuputException\n  instead of outputting an invalid ` {…}` into the CSS document.\n\n## 5.1.2 (2013-10-30)\n\n* Remove the use of consumeUntil in comment parsing. This makes it possible to\n  parse comments such as `/** Perfectly valid **/`\n* Add fr relative size unit\n* Fix some issues with HHVM\n* *No backwards-incompatible changes*\n* *No deprecations*\n\n## 5.1.1 (2013-10-28)\n\n* Updated CHANGELOG.md to reflect changes since 5.0.4\n* *No backwards-incompatible changes*\n* *No deprecations*\n\n## 5.1.0 (2013-10-24)\n\n* Performance enhancements by Michael M Slusarz\n* More rescue entry points for lenient parsing (unexpected tokens between\n  declaration blocks and unclosed comments)\n* *No backwards-incompatible changes*\n* *No deprecations*\n\n## 5.0.8 (2013-08-15)\n\n* Make default settings’ multibyte parsing option dependent on whether or not\n  the mbstring extension is actually installed.\n* *No backwards-incompatible changes*\n* *No deprecations*\n\n## 5.0.7 (2013-08-04)\n\n* Fix broken decimal point output optimization\n* *No backwards-incompatible changes*\n* *No deprecations*\n\n## 5.0.6 (2013-05-31)\n\n* Fix broken unit test\n* *No backwards-incompatible changes*\n* *No deprecations*\n\n## 5.0.5 (2013-04-17)\n\n* Initial support for lenient parsing (setting this parser option will catch\n  some exceptions internally and recover the parser’s state as neatly as\n  possible).\n* *No backwards-incompatible changes*\n* *No deprecations*\n\n## 5.0.4 (2013-03-21)\n\n* Don’t output floats with locale-aware separator chars\n* *No backwards-incompatible changes*\n* *No deprecations*\n\n## 5.0.3 (2013-03-21)\n\n* More size units recognized\n* *No backwards-incompatible changes*\n* *No deprecations*\n\n## 5.0.2 (2013-03-21)\n\n* CHANGELOG.md file added to distribution\n* *No backwards-incompatible changes*\n* *No deprecations*\n\n## 5.0.1 (2013-03-20)\n\n* Internal cleanup\n* *No backwards-incompatible changes*\n* *No deprecations*\n\n## 5.0.0 (2013-03-20)\n\n* Correctly parse all known CSS 3 units (including Hz and kHz).\n* Output RGB colors in short (#aaa or #ababab) notation\n* Be case-insensitive when parsing identifiers.\n* *No deprecations*\n\n### Backwards-incompatible changes\n\n* `Sabberworm\\CSS\\Value\\Color`’s `__toString` method overrides `CSSList`’s to\n  maybe return something other than `type(value, …)` (see above).\n\n## 4.0.0 (2013-03-19)\n\n* Support for more @-rules\n* Generic interface `Sabberworm\\CSS\\Property\\AtRule`, implemented by all @-rule\n  classes\n* *No deprecations*\n\n### Backwards-incompatible changes\n\n* `Sabberworm\\CSS\\RuleSet\\AtRule` renamed to `Sabberworm\\CSS\\RuleSet\\AtRuleSet`\n* `Sabberworm\\CSS\\CSSList\\MediaQuery` renamed to\n  `Sabberworm\\CSS\\RuleSet\\CSSList\\AtRuleBlockList` with differing semantics and\n  API (which also works for other block-list-based @-rules like `@supports`).\n\n## 3.0.0 (2013-03-06)\n\n* Support for lenient parsing (on by default)\n* *No deprecations*\n\n### Backwards-incompatible changes\n\n* All properties (like whether or not to use `mb_`-functions, which default\n  charset to use and – new – whether or not to be forgiving when parsing) are\n  now encapsulated in an instance of `Sabberworm\\CSS\\Settings` which can be\n  passed as the second argument to `Sabberworm\\CSS\\Parser->__construct()`.\n* Specifying a charset as the second argument to\n  `Sabberworm\\CSS\\Parser->__construct()` is no longer supported. Use\n  `Sabberworm\\CSS\\Settings::create()->withDefaultCharset('some-charset')`\n  instead.\n* Setting `Sabberworm\\CSS\\Parser->bUseMbFunctions` has no effect. Use\n  `Sabberworm\\CSS\\Settings::create()->withMultibyteSupport(true/false)` instead.\n* `Sabberworm\\CSS\\Parser->parse()` may throw a\n  `Sabberworm\\CSS\\Parsing\\UnexpectedTokenException` when in strict parsing mode.\n\n## 2.0.0 (2013-01-29)\n\n* Allow multiple rules of the same type per rule set\n\n### Backwards-incompatible changes\n\n* `Sabberworm\\CSS\\RuleSet->getRules()` returns an index-based array instead of\n  an associative array. Use `Sabberworm\\CSS\\RuleSet->getRulesAssoc()` (which\n  eliminates duplicate rules and lets the later rule of the same name win).\n* `Sabberworm\\CSS\\RuleSet->removeRule()` works as it did before except when\n  passed an instance of `Sabberworm\\CSS\\Rule\\Rule`, in which case it would only\n  remove the exact rule given instead of all the rules of the same type. To get\n  the old behaviour, use `Sabberworm\\CSS\\RuleSet->removeRule($oRule->getRule()`;\n\n## 1.0\n\nInitial release of a stable public API.\n\n## 0.9\n\nLast version not to use PSR-0 project organization semantics.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 4.7822265625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official email address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n(coc-github at myintervals dot com).\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org/),\nversion 2.1, available at\nhttps://www.contributor-covenant.org/version/2/1/code_of_conduct.html.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.3681640625,
          "content": "# Contributing to PHP-CSS-Parser\n\nThose that wish to contribute bug fixes, new features, refactorings and\nclean-up to PHP-CSS-Parser are more than welcome.\n\nWhen you contribute, please take the following things into account:\n\n## Contributor Code of Conduct\n\nPlease note that this project is released with a\n[Contributor Code of Conduct](../CODE_OF_CONDUCT.md). By participating in this\nproject, you agree to abide by its terms.\n\n## General workflow\n\nThis is the workflow for contributing changes to this project::\n\n1. [Fork the Git repository](https://docs.github.com/en/get-started/exploring-projects-on-github/contributing-to-a-project).\n1. Clone your forked repository locally and install the development\n   dependencies.\n1. Create a local branch for your changes.\n1. Add unit tests for your changes.\n   These tests should fail without your changes.\n1. Add your changes. Your added unit tests now should pass, and no other tests\n   should be broken. Check that your changes follow the same coding style as the\n   rest of the project.\n1. Add a changelog entry, newest on top.\n1. Commit and push your changes.\n1. [Create a pull request](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)\n   for your changes.\n1. Check that the CI build is green. (If it is not, fix the problems listed.)\n   Please note that for first-time contributors, you will need to wait for a\n   maintainer to allow your CI build to run.\n1. Wait for a review by the maintainers.\n1. Polish your changes as needed until they are ready to be merged.\n\n## About code reviews\n\nAfter you have submitted a pull request, the maintainers will review your\nchanges. This will probably result in quite a few comments on ways to improve\nyour pull request. This project receives contributions from developers around\nthe world, so we need the code to be the most consistent, readable, and\nmaintainable that it can be.\n\nPlease do not feel frustrated by this - instead please view this both as our\ncontribution to your pull request as well as a way to learn more about\nimproving code quality.\n\nIf you would like to know whether an idea would fit in the general strategy of\nthis project or would like to get feedback on the best architecture for your\nideas, we propose you open a ticket first and discuss your ideas there\nfirst before investing a lot of time in writing code.\n\n## Install the development dependencies\n\nTo install the most important development dependencies, please run the following\ncommand:\n\n```bash\ncomposer install\n```\n\nWe also have some optional development dependencies that require higher PHP\nversions than the lowest PHP version this project supports. Hence they are not\ninstalled by default.\n\nTo install these, you will need to have [PHIVE](https://phar.io/) installed.\nYou can then run the following command:\n\n```bash\nphive install\n```\n\n## Unit-test your changes\n\nPlease cover all changes with unit tests and make sure that your code does not\nbreak any existing tests. We will only merge pull requests that include full\ncode coverage of the fixed bugs and the new features.\n\nTo run the existing PHPUnit tests, run this command:\n\n```bash\ncomposer ci:tests:unit\n```\n\n## Coding Style\n\nPlease use the same coding style\n([PER 2.0](https://www.php-fig.org/per/coding-style/)) as the rest of the code.\nIndentation is four spaces.\n\nWe will only merge pull requests that follow the project's coding style.\n\nPlease check your code with the provided static code analysis tools:\n\n```bash\ncomposer ci:static\n```\n\nPlease make your code clean, well-readable and easy to understand.\n\nIf you add new methods or fields, please add proper PHPDoc for the new\nmethods/fields. Please use grammatically correct, complete sentences in the\ncode documentation.\n\nYou can autoformat your code using the following command:\n\n```bash\ncomposer fix\n```\n\n## Git commits\n\nCommit message should have a <= 50-character summary, optionally followed by a\nblank line and a more in depth description of 79 characters per line.\n\nPlease use grammatically correct, complete sentences in the commit messages.\n\nAlso, please prefix the subject line of the commit message with either\n`[FEATURE]`, `[TASK]`, `[BUGFIX]` OR `[CLEANUP]`. This makes it faster to see\nwhat a commit is about.\n\n## Creating pull requests (PRs)\n\nWhen you create a pull request, please\n[make your PR editable](https://github.com/blog/2247-improving-collaboration-with-forks).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.078125,
          "content": "MIT License\n\nCopyright (c) 2011 Raphael Schweikert, https://www.sabberworm.com/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 25.373046875,
          "content": "# PHP CSS Parser\n\n[![Build Status](https://github.com/MyIntervals/PHP-CSS-Parser/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/MyIntervals/PHP-CSS-Parser/actions/)\n[![Coverage Status](https://coveralls.io/repos/github/MyIntervals/PHP-CSS-Parser/badge.svg?branch=main)](https://coveralls.io/github/MyIntervals/PHP-CSS-Parser?branch=main)\n\nA Parser for CSS Files written in PHP. Allows extraction of CSS files into a data structure, manipulation of said structure and output as (optimized) CSS.\n\n## Usage\n\n### Installation using Composer\n\n```bash\ncomposer require sabberworm/php-css-parser\n```\n\n### Extraction\n\nTo use the CSS Parser, create a new instance. The constructor takes the following form:\n\n```php\nnew \\Sabberworm\\CSS\\Parser($css);\n```\n\nTo read a file, for example, you’d do the following:\n\n```php\n$parser = new \\Sabberworm\\CSS\\Parser(file_get_contents('somefile.css'));\n$cssDocument = $parser->parse();\n```\n\nThe resulting CSS document structure can be manipulated prior to being output.\n\n### Options\n\n#### Charset\n\nThe charset option will only be used if the CSS file does not contain an `@charset` declaration. UTF-8 is the default, so you won’t have to create a settings object at all if you don’t intend to change that.\n\n```php\n$settings = \\Sabberworm\\CSS\\Settings::create()\n    ->withDefaultCharset('windows-1252');\n$parser = new \\Sabberworm\\CSS\\Parser($css, $settings);\n```\n\n#### Strict parsing\n\nTo have the parser throw an exception when encountering invalid/unknown constructs (as opposed to trying to ignore them and carry on parsing), supply a thusly configured `\\Sabberworm\\CSS\\Settings` object:\n\n```php\n$parser = new \\Sabberworm\\CSS\\Parser(\n    file_get_contents('somefile.css'),\n    \\Sabberworm\\CSS\\Settings::create()->beStrict()\n);\n```\n\nNote that this will also disable a workaround for parsing the unquoted variant of the legacy IE-specific `filter` rule.\n\n#### Disable multibyte functions\n\nTo achieve faster parsing, you can choose to have PHP-CSS-Parser use regular string functions instead of `mb_*` functions. This should work fine in most cases, even for UTF-8 files, as all the multibyte characters are in string literals. Still it’s not recommended using this with input you have no control over as it’s not thoroughly covered by test cases.\n\n```php\n$settings = \\Sabberworm\\CSS\\Settings::create()->withMultibyteSupport(false);\n$parser = new \\Sabberworm\\CSS\\Parser($css, $settings);\n```\n\n### Manipulation\n\nThe resulting data structure consists mainly of five basic types: `CSSList`, `RuleSet`, `Rule`, `Selector` and `Value`. There are two additional types used: `Import` and `Charset`, which you won’t use often.\n\n#### CSSList\n\n`CSSList` represents a generic CSS container, most likely containing declaration blocks (rule sets with a selector), but it may also contain at-rules, charset declarations, etc.\n\nTo access the items stored in a `CSSList` – like the document you got back when calling `$parser->parse()` –, use `getContents()`, then iterate over that collection and use `instanceof` to check whether you’re dealing with another `CSSList`, a `RuleSet`, a `Import` or a `Charset`.\n\nTo append a new item (selector, media query, etc.) to an existing `CSSList`, construct it using the constructor for this class and use the `append($oItem)` method.\n\n#### RuleSet\n\n`RuleSet` is a container for individual rules. The most common form of a rule set is one constrained by a selector. The following concrete subtypes exist:\n\n* `AtRuleSet` – for generic at-rules for generic at-rules which are not covered by specific classes, i.e., not `@import`, `@charset` or `@media`. A common example for this is `@font-face`.\n* `DeclarationBlock` – a `RuleSet` constrained by a `Selector`; contains an array of selector objects (comma-separated in the CSS) as well as the rules to be applied to the matching elements.\n\nNote: A `CSSList` can contain other `CSSList`s (and `Import`s as well as a `Charset`), while a `RuleSet` can only contain `Rule`s.\n\nIf you want to manipulate a `RuleSet`, use the methods `addRule(Rule $rule)`, `getRules()` and `removeRule($rule)` (which accepts either a `Rule` or a rule name; optionally suffixed by a dash to remove all related rules).\n\n#### Rule\n\n`Rule`s just have a string key (the rule) and a `Value`.\n\n#### Value\n\n`Value` is an abstract class that only defines the `render` method. The concrete subclasses for atomic value types are:\n\n* `Size` – consists of a numeric `size` value and a unit.\n* `Color` – colors can be input in the form #rrggbb, #rgb or schema(val1, val2, …) but are always stored as an array of ('s' => val1, 'c' => val2, 'h' => val3, …) and output in the second form.\n* `CSSString` – this is just a wrapper for quoted strings to distinguish them from keywords; always output with double quotes.\n* `URL` – URLs in CSS; always output in `URL(\"\")` notation.\n\nThere is another abstract subclass of `Value`, `ValueList`: A `ValueList` represents a lists of `Value`s, separated by some separation character (mostly `,`, whitespace, or `/`).\n\nThere are two types of `ValueList`s:\n\n* `RuleValueList` – The default type, used to represent all multivalued rules like `font: bold 12px/3 Helvetica, Verdana, sans-serif;` (where the value would be a whitespace-separated list of the primitive value `bold`, a slash-separated list and a comma-separated list).\n* `CSSFunction` – A special kind of value that also contains a function name and where the values are the function’s arguments. Also handles equals-sign-separated argument lists like `filter: alpha(opacity=90);`.\n\n#### Convenience methods\n\nThere are a few convenience methods on `Document` to ease finding, manipulating and deleting rules:\n\n* `getAllDeclarationBlocks()` – does what it says; no matter how deeply nested the selectors are. Aliased as `getAllSelectors()`.\n* `getAllRuleSets()` – does what it says; no matter how deeply nested the rule sets are.\n* `getAllValues()` – finds all `Value` objects inside `Rule`s.\n\n## To-Do\n\n* More convenience methods (like `selectorsWithElement($sId/Class/TagName)`, `attributesOfType($type)`, `removeAttributesOfType($type)`)\n* Real multibyte support. Currently, only multibyte charsets whose first 255 code points take up only one byte and are identical with ASCII are supported (yes, UTF-8 fits this description).\n* Named color support (using `Color` instead of an anonymous string literal)\n\n## Use cases\n\n### Use `Parser` to prepend an ID to all selectors\n\n```php\n$myId = \"#my_id\";\n$parser = new \\Sabberworm\\CSS\\Parser($css);\n$cssDocument = $parser->parse();\nforeach ($cssDocument->getAllDeclarationBlocks() as $block) {\n    foreach ($block->getSelectors() as $selector) {\n        // Loop over all selector parts (the comma-separated strings in a\n        // selector) and prepend the ID.\n        $selector->setSelector($myId.' '.$selector->getSelector());\n    }\n}\n```\n\n### Shrink all absolute sizes to half\n\n```php\n$parser = new \\Sabberworm\\CSS\\Parser($css);\n$cssDocument = $parser->parse();\nforeach ($cssDocument->getAllValues() as $value) {\n    if ($value instanceof CSSSize && !$value->isRelative()) {\n        $value->setSize($value->getSize() / 2);\n    }\n}\n```\n\n### Remove unwanted rules\n\n```php\n$parser = new \\Sabberworm\\CSS\\Parser($css);\n$cssDocument = $parser->parse();\nforeach($cssDocument->getAllRuleSets() as $oRuleSet) {\n    // Note that the added dash will make this remove all rules starting with\n    // `font-` (like `font-size`, `font-weight`, etc.) as well as a potential\n    // `font` rule.\n    $oRuleSet->removeRule('font-');\n    $oRuleSet->removeRule('cursor');\n}\n```\n\n### Output\n\nTo output the entire CSS document into a variable, just use `->render()`:\n\n```php\n$parser = new \\Sabberworm\\CSS\\Parser(file_get_contents('somefile.css'));\n$cssDocument = $parser->parse();\nprint $cssDocument->render();\n```\n\nIf you want to format the output, pass an instance of type `\\Sabberworm\\CSS\\OutputFormat`:\n\n```php\n$format = \\Sabberworm\\CSS\\OutputFormat::create()\n    ->indentWithSpaces(4)->setSpaceBetweenRules(\"\\n\");\nprint $cssDocument->render($format);\n```\n\nOr use one of the predefined formats:\n\n```php\nprint $cssDocument->render(Sabberworm\\CSS\\OutputFormat::createPretty());\nprint $cssDocument->render(Sabberworm\\CSS\\OutputFormat::createCompact());\n```\n\nTo see what you can do with output formatting, look at the tests in `tests/OutputFormatTest.php`.\n\n## Examples\n\n### Example 1 (At-Rules)\n\n#### Input\n\n```css\n@charset \"utf-8\";\n\n@font-face {\n  font-family: \"CrassRoots\";\n  src: url(\"../media/cr.ttf\");\n}\n\nhtml, body {\n    font-size: 1.6em;\n}\n\n@keyframes mymove {\n    from { top: 0px; }\n    to { top: 200px; }\n}\n\n```\n\n<details>\n  <summary><b>Structure (<code>var_dump()</code>)</b></summary>\n\n```php\nclass Sabberworm\\CSS\\CSSList\\Document#4 (2) {\n  protected $aContents =>\n  array(4) {\n    [0] =>\n    class Sabberworm\\CSS\\Property\\Charset#6 (2) {\n      private $sCharset =>\n      class Sabberworm\\CSS\\Value\\CSSString#5 (2) {\n        private $sString =>\n        string(5) \"utf-8\"\n        protected $iLineNo =>\n        int(1)\n      }\n      protected $iLineNo =>\n      int(1)\n    }\n    [1] =>\n    class Sabberworm\\CSS\\RuleSet\\AtRuleSet#7 (4) {\n      private $sType =>\n      string(9) \"font-face\"\n      private $sArgs =>\n      string(0) \"\"\n      private $aRules =>\n      array(2) {\n        'font-family' =>\n        array(1) {\n          [0] =>\n          class Sabberworm\\CSS\\Rule\\Rule#8 (4) {\n            private $sRule =>\n            string(11) \"font-family\"\n            private $mValue =>\n            class Sabberworm\\CSS\\Value\\CSSString#9 (2) {\n              private $sString =>\n              string(10) \"CrassRoots\"\n              protected $iLineNo =>\n              int(4)\n            }\n            private $bIsImportant =>\n            bool(false)\n            protected $iLineNo =>\n            int(4)\n          }\n        }\n        'src' =>\n        array(1) {\n          [0] =>\n          class Sabberworm\\CSS\\Rule\\Rule#10 (4) {\n            private $sRule =>\n            string(3) \"src\"\n            private $mValue =>\n            class Sabberworm\\CSS\\Value\\URL#11 (2) {\n              private $oURL =>\n              class Sabberworm\\CSS\\Value\\CSSString#12 (2) {\n                private $sString =>\n                string(15) \"../media/cr.ttf\"\n                protected $iLineNo =>\n                int(5)\n              }\n              protected $iLineNo =>\n              int(5)\n            }\n            private $bIsImportant =>\n            bool(false)\n            protected $iLineNo =>\n            int(5)\n          }\n        }\n      }\n      protected $iLineNo =>\n      int(3)\n    }\n    [2] =>\n    class Sabberworm\\CSS\\RuleSet\\DeclarationBlock#13 (3) {\n      private $aSelectors =>\n      array(2) {\n        [0] =>\n        class Sabberworm\\CSS\\Property\\Selector#14 (2) {\n          private $sSelector =>\n          string(4) \"html\"\n          private $iSpecificity =>\n          NULL\n        }\n        [1] =>\n        class Sabberworm\\CSS\\Property\\Selector#15 (2) {\n          private $sSelector =>\n          string(4) \"body\"\n          private $iSpecificity =>\n          NULL\n        }\n      }\n      private $aRules =>\n      array(1) {\n        'font-size' =>\n        array(1) {\n          [0] =>\n          class Sabberworm\\CSS\\Rule\\Rule#16 (4) {\n            private $sRule =>\n            string(9) \"font-size\"\n            private $mValue =>\n            class Sabberworm\\CSS\\Value\\Size#17 (4) {\n              private $fSize =>\n              double(1.6)\n              private $sUnit =>\n              string(2) \"em\"\n              private $bIsColorComponent =>\n              bool(false)\n              protected $iLineNo =>\n              int(9)\n            }\n            private $bIsImportant =>\n            bool(false)\n            protected $iLineNo =>\n            int(9)\n          }\n        }\n      }\n      protected $iLineNo =>\n      int(8)\n    }\n    [3] =>\n    class Sabberworm\\CSS\\CSSList\\KeyFrame#18 (4) {\n      private $vendorKeyFrame =>\n      string(9) \"keyframes\"\n      private $animationName =>\n      string(6) \"mymove\"\n      protected $aContents =>\n      array(2) {\n        [0] =>\n        class Sabberworm\\CSS\\RuleSet\\DeclarationBlock#19 (3) {\n          private $aSelectors =>\n          array(1) {\n            [0] =>\n            class Sabberworm\\CSS\\Property\\Selector#20 (2) {\n              private $sSelector =>\n              string(4) \"from\"\n              private $iSpecificity =>\n              NULL\n            }\n          }\n          private $aRules =>\n          array(1) {\n            'top' =>\n            array(1) {\n              [0] =>\n              class Sabberworm\\CSS\\Rule\\Rule#21 (4) {\n                private $sRule =>\n                string(3) \"top\"\n                private $mValue =>\n                class Sabberworm\\CSS\\Value\\Size#22 (4) {\n                  private $fSize =>\n                  double(0)\n                  private $sUnit =>\n                  string(2) \"px\"\n                  private $bIsColorComponent =>\n                  bool(false)\n                  protected $iLineNo =>\n                  int(13)\n                }\n                private $bIsImportant =>\n                bool(false)\n                protected $iLineNo =>\n                int(13)\n              }\n            }\n          }\n          protected $iLineNo =>\n          int(13)\n        }\n        [1] =>\n        class Sabberworm\\CSS\\RuleSet\\DeclarationBlock#23 (3) {\n          private $aSelectors =>\n          array(1) {\n            [0] =>\n            class Sabberworm\\CSS\\Property\\Selector#24 (2) {\n              private $sSelector =>\n              string(2) \"to\"\n              private $iSpecificity =>\n              NULL\n            }\n          }\n          private $aRules =>\n          array(1) {\n            'top' =>\n            array(1) {\n              [0] =>\n              class Sabberworm\\CSS\\Rule\\Rule#25 (4) {\n                private $sRule =>\n                string(3) \"top\"\n                private $mValue =>\n                class Sabberworm\\CSS\\Value\\Size#26 (4) {\n                  private $fSize =>\n                  double(200)\n                  private $sUnit =>\n                  string(2) \"px\"\n                  private $bIsColorComponent =>\n                  bool(false)\n                  protected $iLineNo =>\n                  int(14)\n                }\n                private $bIsImportant =>\n                bool(false)\n                protected $iLineNo =>\n                int(14)\n              }\n            }\n          }\n          protected $iLineNo =>\n          int(14)\n        }\n      }\n      protected $iLineNo =>\n      int(12)\n    }\n  }\n  protected $iLineNo =>\n  int(1)\n}\n\n```\n</details>\n\n#### Output (`render()`)\n\n```css\n@charset \"utf-8\";\n@font-face {font-family: \"CrassRoots\";src: url(\"../media/cr.ttf\");}\nhtml, body {font-size: 1.6em;}\n@keyframes mymove {from {top: 0px;} to {top: 200px;}}\n```\n\n### Example 2 (Values)\n\n#### Input\n\n```css\n#header {\n    margin: 10px 2em 1cm 2%;\n    font-family: Verdana, Helvetica, \"Gill Sans\", sans-serif;\n    color: red !important;\n}\n\n```\n\n<details>\n  <summary><b>Structure (<code>var_dump()</code>)</b></summary>\n\n```php\nclass Sabberworm\\CSS\\CSSList\\Document#4 (2) {\n  protected $aContents =>\n  array(1) {\n    [0] =>\n    class Sabberworm\\CSS\\RuleSet\\DeclarationBlock#5 (3) {\n      private $aSelectors =>\n      array(1) {\n        [0] =>\n        class Sabberworm\\CSS\\Property\\Selector#6 (2) {\n          private $sSelector =>\n          string(7) \"#header\"\n          private $iSpecificity =>\n          NULL\n        }\n      }\n      private $aRules =>\n      array(3) {\n        'margin' =>\n        array(1) {\n          [0] =>\n          class Sabberworm\\CSS\\Rule\\Rule#7 (4) {\n            private $sRule =>\n            string(6) \"margin\"\n            private $mValue =>\n            class Sabberworm\\CSS\\Value\\RuleValueList#12 (3) {\n              protected $aComponents =>\n              array(4) {\n                [0] =>\n                class Sabberworm\\CSS\\Value\\Size#8 (4) {\n                  private $fSize =>\n                  double(10)\n                  private $sUnit =>\n                  string(2) \"px\"\n                  private $bIsColorComponent =>\n                  bool(false)\n                  protected $iLineNo =>\n                  int(2)\n                }\n                [1] =>\n                class Sabberworm\\CSS\\Value\\Size#9 (4) {\n                  private $fSize =>\n                  double(2)\n                  private $sUnit =>\n                  string(2) \"em\"\n                  private $bIsColorComponent =>\n                  bool(false)\n                  protected $iLineNo =>\n                  int(2)\n                }\n                [2] =>\n                class Sabberworm\\CSS\\Value\\Size#10 (4) {\n                  private $fSize =>\n                  double(1)\n                  private $sUnit =>\n                  string(2) \"cm\"\n                  private $bIsColorComponent =>\n                  bool(false)\n                  protected $iLineNo =>\n                  int(2)\n                }\n                [3] =>\n                class Sabberworm\\CSS\\Value\\Size#11 (4) {\n                  private $fSize =>\n                  double(2)\n                  private $sUnit =>\n                  string(1) \"%\"\n                  private $bIsColorComponent =>\n                  bool(false)\n                  protected $iLineNo =>\n                  int(2)\n                }\n              }\n              protected $sSeparator =>\n              string(1) \" \"\n              protected $iLineNo =>\n              int(2)\n            }\n            private $bIsImportant =>\n            bool(false)\n            protected $iLineNo =>\n            int(2)\n          }\n        }\n        'font-family' =>\n        array(1) {\n          [0] =>\n          class Sabberworm\\CSS\\Rule\\Rule#13 (4) {\n            private $sRule =>\n            string(11) \"font-family\"\n            private $mValue =>\n            class Sabberworm\\CSS\\Value\\RuleValueList#15 (3) {\n              protected $aComponents =>\n              array(4) {\n                [0] =>\n                string(7) \"Verdana\"\n                [1] =>\n                string(9) \"Helvetica\"\n                [2] =>\n                class Sabberworm\\CSS\\Value\\CSSString#14 (2) {\n                  private $sString =>\n                  string(9) \"Gill Sans\"\n                  protected $iLineNo =>\n                  int(3)\n                }\n                [3] =>\n                string(10) \"sans-serif\"\n              }\n              protected $sSeparator =>\n              string(1) \",\"\n              protected $iLineNo =>\n              int(3)\n            }\n            private $bIsImportant =>\n            bool(false)\n            protected $iLineNo =>\n            int(3)\n          }\n        }\n        'color' =>\n        array(1) {\n          [0] =>\n          class Sabberworm\\CSS\\Rule\\Rule#16 (4) {\n            private $sRule =>\n            string(5) \"color\"\n            private $mValue =>\n            string(3) \"red\"\n            private $bIsImportant =>\n            bool(true)\n            protected $iLineNo =>\n            int(4)\n          }\n        }\n      }\n      protected $iLineNo =>\n      int(1)\n    }\n  }\n  protected $iLineNo =>\n  int(1)\n}\n\n```\n</details>\n\n#### Output (`render()`)\n\n```css\n#header {margin: 10px 2em 1cm 2%;font-family: Verdana,Helvetica,\"Gill Sans\",sans-serif;color: red !important;}\n```\n\n## Class diagram\n\n```mermaid\nclassDiagram\n    direction LR\n\n    %% Start of the part generated from the PHP code using tasuku43/mermaid-class-diagram\n\n    class Renderable {\n        <<interface>>\n    }\n    class DeclarationBlock {\n    }\n    class RuleSet {\n        <<abstract>>\n    }\n    class AtRuleSet {\n    }\n    class KeyframeSelector {\n    }\n    class AtRule {\n        <<interface>>\n    }\n    class Charset {\n    }\n    class Import {\n    }\n    class Selector {\n    }\n    class CSSNamespace {\n    }\n    class Settings {\n    }\n    class Rule {\n    }\n    class Parser {\n    }\n    class OutputFormatter {\n    }\n    class OutputFormat {\n    }\n    class OutputException {\n    }\n    class UnexpectedEOFException {\n    }\n    class SourceException {\n    }\n    class UnexpectedTokenException {\n    }\n    class ParserState {\n    }\n    class Anchor {\n    }\n    class CSSBlockList {\n        <<abstract>>\n    }\n    class Document {\n    }\n    class CSSList {\n        <<abstract>>\n    }\n    class KeyFrame {\n    }\n    class AtRuleBlockList {\n    }\n    class Color {\n    }\n    class URL {\n    }\n    class CalcRuleValueList {\n    }\n    class ValueList {\n        <<abstract>>\n    }\n    class CalcFunction {\n    }\n    class LineName {\n    }\n    class Value {\n        <<abstract>>\n    }\n    class Size {\n    }\n    class CSSString {\n    }\n    class PrimitiveValue {\n        <<abstract>>\n    }\n    class CSSFunction {\n    }\n    class RuleValueList {\n    }\n    class Commentable {\n        <<interface>>\n    }\n    class Comment {\n    }\n\n    RuleSet <|-- DeclarationBlock: inheritance\n    Renderable <|.. RuleSet: realization\n    Commentable <|.. RuleSet: realization\n    RuleSet <|-- AtRuleSet: inheritance\n    AtRule <|.. AtRuleSet: realization\n    Selector <|-- KeyframeSelector: inheritance\n    Renderable <|-- AtRule: inheritance\n    Commentable <|-- AtRule: inheritance\n    AtRule <|.. Charset: realization\n    AtRule <|.. Import: realization\n    AtRule <|.. CSSNamespace: realization\n    Renderable <|.. Rule: realization\n    Commentable <|.. Rule: realization\n    SourceException <|-- OutputException: inheritance\n    UnexpectedTokenException <|-- UnexpectedEOFException: inheritance\n    Exception <|-- SourceException: inheritance\n    SourceException <|-- UnexpectedTokenException: inheritance\n    CSSList <|-- CSSBlockList: inheritance\n    CSSBlockList <|-- Document: inheritance\n    Renderable <|.. CSSList: realization\n    Commentable <|.. CSSList: realization\n    CSSList <|-- KeyFrame: inheritance\n    AtRule <|.. KeyFrame: realization\n    CSSBlockList <|-- AtRuleBlockList: inheritance\n    AtRule <|.. AtRuleBlockList: realization\n    CSSFunction <|-- Color: inheritance\n    PrimitiveValue <|-- URL: inheritance\n    RuleValueList <|-- CalcRuleValueList: inheritance\n    Value <|-- ValueList: inheritance\n    CSSFunction <|-- CalcFunction: inheritance\n    ValueList <|-- LineName: inheritance\n    Renderable <|.. Value: realization\n    PrimitiveValue <|-- Size: inheritance\n    PrimitiveValue <|-- CSSString: inheritance\n    Value <|-- PrimitiveValue: inheritance\n    ValueList <|-- CSSFunction: inheritance\n    ValueList <|-- RuleValueList: inheritance\n    Renderable <|.. Comment: realization\n\n    %% end of the generated part\n\n\n    Anchor --> \"1\" ParserState : oParserState\n    CSSList --> \"*\" CSSList : aContents\n    CSSList --> \"*\" Charset : aContents\n    CSSList --> \"*\" Comment : aComments\n    CSSList --> \"*\" Import : aContents\n    CSSList --> \"*\" RuleSet : aContents\n    CSSNamespace --> \"*\" Comment : aComments\n    Charset --> \"*\" Comment : aComments\n    Charset --> \"1\" CSSString : oCharset\n    DeclarationBlock --> \"*\" Selector : aSelectors\n    Import --> \"*\" Comment : aComments\n    OutputFormat --> \"1\" OutputFormat : oNextLevelFormat\n    OutputFormat --> \"1\" OutputFormatter : oFormatter\n    OutputFormatter --> \"1\" OutputFormat : oFormat\n    Parser --> \"1\" ParserState : oParserState\n    ParserState --> \"1\" Settings : oParserSettings\n    Rule --> \"*\" Comment : aComments\n    Rule --> \"1\" RuleValueList : mValue\n    RuleSet --> \"*\" Comment : aComments\n    RuleSet --> \"*\" Rule : aRules\n    URL --> \"1\" CSSString : oURL\n    ValueList --> \"*\" Value : aComponents\n```\n\n## API and deprecation policy\n\nPlease have a look at our\n[API and deprecation policy](docs/API-and-deprecation-policy.md).\n\n## Contributing\n\nContributions in the form of bug reports, feature requests, or pull requests are\nmore than welcome. :pray: Please have a look at our\n[contribution guidelines](CONTRIBUTING.md) to learn more about how to\ncontribute to PHP-CSS-Parser.\n\n## Contributors/Thanks to\n\n* [oliverklee](https://github.com/oliverklee) for lots of refactorings, code modernizations and CI integrations\n* [raxbg](https://github.com/raxbg) for contributions to parse `calc`, grid lines, and various bugfixes.\n* [westonruter](https://github.com/westonruter) for bugfixes and improvements.\n* [FMCorz](https://github.com/FMCorz) for many patches and suggestions, for being able to parse comments and IE hacks (in lenient mode).\n* [Lullabot](https://github.com/Lullabot) for a patch that allows to know the line number for each parsed token.\n* [ju1ius](https://github.com/ju1ius) for the specificity parsing code and the ability to expand/compact shorthand properties.\n* [ossinkine](https://github.com/ossinkine) for a 150 time performance boost.\n* [GaryJones](https://github.com/GaryJones) for lots of input and [https://css-specificity.info/](https://css-specificity.info/).\n* [docteurklein](https://github.com/docteurklein) for output formatting and `CSSList->remove()` inspiration.\n* [nicolopignatelli](https://github.com/nicolopignatelli) for PSR-0 compatibility.\n* [diegoembarcadero](https://github.com/diegoembarcadero) for keyframe at-rule parsing.\n* [goetas](https://github.com/goetas) for `@namespace` at-rule support.\n* [ziegenberg](https://github.com/ziegenberg) for general housekeeping and cleanup.\n* [View full list](https://github.com/sabberworm/PHP-CSS-Parser/contributors)\n\n## Misc\n\n### Legacy Support\n\nThe latest pre-PSR-0 version of this project can be checked with the `0.9.0` tag.\n\n### Running Tests\n\nTo run all continuous integration (CI) checks for this project (including unit tests),\n* run `composer install` to install the development dependencies managed with Composer;\n* run `phive install` to install the development dependencies managed with PHIVE;\n  * [Installation of PHIVE](https://github.com/phar-io/phive?tab=readme-ov-file#getting-phive)\n* run `composer ci` to run all static and dynamic CI checks.\n\nDetails of other Composer scripts available (e.g. to run one specific CI check) are provided with `composer list`.\n\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 4.4990234375,
          "content": "{\n    \"name\": \"sabberworm/php-css-parser\",\n    \"description\": \"Parser for CSS Files written in PHP\",\n    \"license\": \"MIT\",\n    \"type\": \"library\",\n    \"keywords\": [\n        \"parser\",\n        \"css\",\n        \"stylesheet\"\n    ],\n    \"authors\": [\n        {\n            \"name\": \"Raphael Schweikert\"\n        },\n        {\n            \"name\": \"Oliver Klee\",\n            \"email\": \"github@oliverklee.de\"\n        },\n        {\n            \"name\": \"Jake Hotson\",\n            \"email\": \"jake.github@qzdesign.co.uk\"\n        }\n    ],\n    \"homepage\": \"https://www.sabberworm.com/blog/2010/6/10/php-css-parser\",\n    \"require\": {\n        \"php\": \"^7.2.0 || ~8.0.0 || ~8.1.0 || ~8.2.0 || ~8.3.0 || ~8.4.0\",\n        \"ext-iconv\": \"*\"\n    },\n    \"require-dev\": {\n        \"php-parallel-lint/php-parallel-lint\": \"1.4.0\",\n        \"phpstan/extension-installer\": \"1.4.3\",\n        \"phpstan/phpstan\": \"1.12.13 || 2.0.4\",\n        \"phpstan/phpstan-phpunit\": \"1.4.2 || 2.0.2\",\n        \"phpunit/phpunit\": \"8.5.41\",\n        \"rector/rector\": \"1.2.10 || 2.0.3\"\n    },\n    \"suggest\": {\n        \"ext-mbstring\": \"for parsing UTF-8 CSS\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Sabberworm\\\\CSS\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Sabberworm\\\\CSS\\\\Tests\\\\\": \"tests/\"\n        }\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"phpstan/extension-installer\": true\n        },\n        \"preferred-install\": {\n            \"*\": \"dist\"\n        },\n        \"sort-packages\": true\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-main\": \"9.0.x-dev\"\n        }\n    },\n    \"scripts\": {\n        \"ci\": [\n            \"@ci:static\",\n            \"@ci:dynamic\"\n        ],\n        \"ci:composer:normalize\": \"\\\"./.phive/composer-normalize\\\" --dry-run\",\n        \"ci:dynamic\": [\n            \"@ci:tests\"\n        ],\n        \"ci:php:fixer\": \"\\\"./.phive/php-cs-fixer\\\" --config=config/php-cs-fixer.php fix --dry-run -v --show-progress=dots --diff bin src tests config\",\n        \"ci:php:lint\": \"parallel-lint src tests config bin\",\n        \"ci:php:rector\": \"rector --no-progress-bar --dry-run --config=config/rector.php\",\n        \"ci:php:stan\": \"phpstan --no-progress --configuration=config/phpstan.neon\",\n        \"ci:static\": [\n            \"@ci:composer:normalize\",\n            \"@ci:php:fixer\",\n            \"@ci:php:lint\",\n            \"@ci:php:rector\",\n            \"@ci:php:stan\"\n        ],\n        \"ci:tests\": [\n            \"@ci:tests:unit\"\n        ],\n        \"ci:tests:coverage\": \"phpunit --do-not-cache-result --coverage-clover=coverage.xml\",\n        \"ci:tests:sof\": \"phpunit --stop-on-failure --do-not-cache-result\",\n        \"ci:tests:unit\": \"phpunit --do-not-cache-result\",\n        \"fix\": [\n            \"@fix:php\"\n        ],\n        \"fix:composer:normalize\": \"\\\"./.phive/composer-normalize\\\" --no-check-lock\",\n        \"fix:php\": [\n            \"@fix:composer:normalize\",\n            \"@fix:php:rector\",\n            \"@fix:php:fixer\"\n        ],\n        \"fix:php:fixer\": \"\\\"./.phive/php-cs-fixer\\\" --config=config/php-cs-fixer.php fix bin src tests\",\n        \"fix:php:rector\": \"rector --config=config/rector.php\",\n        \"phpstan:baseline\": \"phpstan --configuration=config/phpstan.neon --generate-baseline=config/phpstan-baseline.neon --allow-empty-baseline\"\n    },\n    \"scripts-descriptions\": {\n        \"ci\": \"Runs all dynamic and static code checks.\",\n        \"ci:composer:normalize\": \"Checks the formatting and structure of the composer.json.\",\n        \"ci:dynamic\": \"Runs all dynamic code checks (i.e., currently, the unit tests).\",\n        \"ci:php:fixer\": \"Checks the code style with PHP CS Fixer.\",\n        \"ci:php:lint\": \"Checks the syntax of the PHP code.\",\n        \"ci:php:rector\": \"Checks the code for possible code updates and refactoring.\",\n        \"ci:php:stan\": \"Checks the types with PHPStan.\",\n        \"ci:static\": \"Runs all static code analysis checks for the code.\",\n        \"ci:tests\": \"Runs all dynamic tests (i.e., currently, the unit tests).\",\n        \"ci:tests:coverage\": \"Runs the unit tests with code coverage.\",\n        \"ci:tests:sof\": \"Runs the unit tests and stops at the first failure.\",\n        \"ci:tests:unit\": \"Runs all unit tests.\",\n        \"fix\": \"Runs all fixers\",\n        \"fix:composer:normalize\": \"Reformats and sorts the composer.json file.\",\n        \"fix:php\": \"Autofixes all autofixable issues in the PHP code.\",\n        \"fix:php:fixer\": \"Fixes autofixable issues found by PHP CS Fixer.\",\n        \"fix:php:rector\": \"Fixes autofixable issues found by Rector.\",\n        \"phpstan:baseline\": \"Updates the PHPStan baseline file to match the code.\"\n    }\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.673828125,
          "content": "<phpunit\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/8.5/phpunit.xsd\"\n    beStrictAboutChangesToGlobalState=\"true\"\n    beStrictAboutOutputDuringTests=\"true\"\n    beStrictAboutTodoAnnotatedTests=\"true\"\n    cacheResult=\"false\"\n    colors=\"true\"\n    convertDeprecationsToExceptions=\"true\"\n    forceCoversAnnotation=\"true\"\n    verbose=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"Project Test Suite\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n\n    <filter>\n        <whitelist>\n            <directory suffix=\".php\">src</directory>\n        </whitelist>\n    </filter>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}