{
  "metadata": {
    "timestamp": 1736712037936,
    "page": 554,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "webpatser/laravel-uuid",
      "stars": 1806,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0830078125,
          "content": "/vendor\ncomposer.phar\ncomposer.lock\n.DS_Store\nclover.xml\n.idea\n.phpunit.result.cache\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.365234375,
          "content": "language: php\n\nmatrix:\n  fast_finish: true\n  include:\n    - php: 7.3\n    - php: 7.4\n    - php: 8.0\n\nsudo: false\n\nbefore_install:\n  - travis_retry composer self-update\n\ninstall:\n  - travis_retry composer update --prefer-dist --no-interaction --prefer-stable --no-suggest\n\nscript: vendor/bin/phpunit --coverage-text\n\nafter_success:\n  - bash <(curl -s https://codecov.io/bash)\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.048828125,
          "content": "{\n\t\"name\" : \"webpatser/laravel-uuid\",\n\t\"description\" : \"Laravel package to generate and to validate a universally unique identifier (UUID) according to the RFC 4122 standard. Support for version 1, 3, 4 and 5 UUIDs are built-in.\",\n\t\"authors\" : [{\n\t\t\t\"name\" : \"Christoph Kempen\",\n\t\t\t\"email\" : \"christoph@downsized.nl\"\n\t\t}\n\t],\n\t\"keywords\" : [\n\t\t\"UUID RFC4122\"\n\t],\n\t\"homepage\" : \"https://github.com/webpatser/laravel-uuid\",\n\t\"license\" : [\n\t\t\"MIT\"\n\t],\n\t\"require\" : {\n\t\t\"php\" : \"^7.0|^8.0\"\n\t},\n    \"require-dev\" : {\n\t\t\"fakerphp/faker\": \"^1.9.1\",\n\t\t\"phpunit/phpunit\": \"^9.3.3\"\n    },\n\t\"autoload\" : {\n\t\t\"psr-4\" : {\n\t\t\t\"Webpatser\\\\Uuid\\\\\": \"src/Webpatser/Uuid/\"\n\t\t}\n\t},\n\t\"autoload-dev\": {\n\t\t\"psr-4\": {\n\t\t\t\"Tests\\\\\": \"tests/\"\n\t\t}\n\t},\n\t\"support\" : {\n\t\t\"source\" : \"https://github.com/webpatser/laravel-uuid\",\n\t\t\"issues\" : \"https://github.com/webpatser/laravel-uuid/issues\"\n\t},\n    \"extra\": {\n        \"laravel\": {\n\t\t\t\"providers\": [\n\t\t\t\t\"Webpatser\\\\Uuid\\\\UuidServiceProvider\"\n\t\t\t],\n            \"aliases\": {\n                \"Uuid\": \"Webpatser\\\\Uuid\\\\Uuid\"\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.7333984375,
          "content": "<?xml version=\"1.0\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" backupGlobals=\"false\" backupStaticAttributes=\"false\" bootstrap=\"vendor/autoload.php\" colors=\"true\" convertErrorsToExceptions=\"true\" convertNoticesToExceptions=\"true\" convertWarningsToExceptions=\"true\" processIsolation=\"false\" stopOnFailure=\"false\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\">\n  <coverage includeUncoveredFiles=\"false\">\n    <include>\n      <directory suffix=\".php\">./src</directory>\n    </include>\n    <report>\n      <clover outputFile=\"clover.xml\"/>\n    </report>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"default\">\n      <directory>./tests/</directory>\n    </testsuite>\n  </testsuites>\n  <logging/>\n</phpunit>\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 4.5224609375,
          "content": "# Laravel Uuid\n\n[![Total Downloads](https://poser.pugx.org/webpatser/laravel-uuid/downloads.svg)](https://packagist.org/packages/webpatser/laravel-uuid)\n[![Build Status](https://secure.travis-ci.org/webpatser/laravel-uuid.png?branch=master)](http://travis-ci.org/webpatser/laravel-uuid)\n[![codecov.io](http://codecov.io/github/webpatser/laravel-uuid/coverage.svg?branch=master)](http://codecov.io/github/webpatser/laravel-uuid?branch=master)\n[![Latest Stable Version](https://poser.pugx.org/webpatser/laravel-uuid/v/stable.svg)](https://packagist.org/packages/webpatser/laravel-uuid)\n[![Licence](https://poser.pugx.org/webpatser/laravel-uuid/license.svg)](https://packagist.org/packages/webpatser/laravel-uuid)\n\nLaravel package to generate and to validate a universally unique identifier (UUID) according to the RFC 4122 standard. Support for version 1, 3, 4 and 5 UUIDs are built-in.\n\n## What's new in 4.*\nLaravel-uuid is now ready for Laravel 8. It has the same requirements so that means PHP 7.3 or PHP 8. Laravel package auto-discovery is enabled, and you can now use the UUID validation. Validation examples are below and in the tests.\n\nFor older Laravel or PHP versions use older versions; see below...\n\n## What's new in 3.*\nLaravel-uuid is now refactored for Laravel 5.5. It has the same requirements so that means PHP 7. Laravel package auto-discovery is enabled, and you can now use the UUID validation. Validation examples are below and in the tests. \n\nLaravel 5.0, 5.1, 5.2, 5.3 and 5.4? use  [version 2](https://github.com/webpatser/laravel-uuid/tree/2.1.1)\n\nLaravel 4.*? use [version 1](https://github.com/webpatser/laravel-uuid/tree/1.5)\n\n## Installation\n\nIn Laravel 5.5 laravel-uuid will install via the new package discovery feature so you only need to add the package to your composer.json file\n\n```shell\ncomposer require \"webpatser/laravel-uuid:^3.0\"\n```\n\nafter installation you should see\n\n```shell\nDiscovered Package: webpatser/laravel-uuid\n```\n\nand you are ready to go\n\n## Basic Usage\n\nTo quickly generate a UUID just do\n\n```php\nUuid::generate()\n```\n\t\nThis will generate a version 1 Uuid `object` with a random generated MAC address.\n\nTo echo out the generated UUID, cast it to a string\n\n```php\n(string) Uuid::generate()\n```\n\nor\n\n```php\nUuid::generate()->string\n```\n\n## Advanced Usage\n\n### UUID creation\n\nGenerate a version 1, time-based, UUID. You can set the optional node to the MAC address. If not supplied it will generate a random MAC address.\n\n```php\nUuid::generate(1,'00:11:22:33:44:55');\n```\n\t\nGenerate a version 3, name-based using MD5 hashing, UUID\n\n```php\nUuid::generate(3,'test', Uuid::NS_DNS);\n```\t\n\nGenerate a version 4, truly random, UUID\n\n```php\nUuid::generate(4);\n```\n\nGenerate a version 5, name-based using SHA-1 hashing, UUID\n\n```php\nUuid::generate(5,'test', Uuid::NS_DNS);\n```\n\t\n### Some magic features\n\nTo import a UUID\n\n```php\n$uuid = Uuid::import('d3d29d70-1d25-11e3-8591-034165a3a613');\n```\t\n\nExtract the time for a time-based UUID (version 1)\n\n```php\n$uuid = Uuid::generate(1);\ndd($uuid->time);\n```\n\nExtract the version of an UUID\n\n```php\n$uuid = Uuid::generate(4);\ndd($uuid->version);\n```\n\n## Eloquent UUID generation\n\nIf you want an UUID magically be generated in your Laravel models, just add this boot method to your Model.\n\n```php\n/**\n *  Setup model event hooks\n */\npublic static function boot()\n{\n    parent::boot();\n    self::creating(function ($model) {\n        $model->uuid = (string) Uuid::generate(4);\n    });\n}\n```\nThis will generate a version 4 UUID when creating a new record.\n\n## Model binding to UUID instead of primary key\n\nIf  you want to use the UUID in URLs instead of the primary key, you can add this to your model (where 'uuid' is the column name to store the UUID)\n\n```php\n/**\n * Get the route key for the model.\n *\n * @return string\n */\npublic function getRouteKeyName()\n{\n    return 'uuid';\n}\n```\n\nWhen you inject the model on your resource controller methods you get the correct record\n\n```php\npublic function edit(Model $model)\n{\n   return view('someview.edit')->with([\n        'model' => $model,\n    ]);\n}\n```\n\n## Validation\n\nJust use like any other Laravel validator.\n\n``'uuid-field' => 'uuid'``\n\nOr create a validator from scratch. In the example an Uuid object in validated. You can also validate strings `$uuid->string`, the URN `$uuid->urn` or the binary value `$uuid->bytes`\n\n```php\n$uuid = Uuid::generate();\n$validator = Validator::make(['uuid' => $uuid], ['uuid' => 'uuid']);\ndd($validator->passes());\n```\n\n## Notes\n\nFull details on the UUID specification can be found on [http://tools.ietf.org/html/rfc4122](http://tools.ietf.org/html/rfc4122).\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}