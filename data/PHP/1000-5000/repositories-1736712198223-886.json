{
  "metadata": {
    "timestamp": 1736712198223,
    "page": 886,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spatie/laravel-google-calendar",
      "stars": 1288,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3046875,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3857421875,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n# Ignore all test and documentation with \"export-ignore\".\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/.travis.yml        export-ignore\n/phpunit.xml.dist   export-ignore\n/.scrutinizer.yml   export-ignore\n/tests              export-ignore\n/docs               export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.06640625,
          "content": "build\ncomposer.lock\nvendor\n.idea\n.php-cs-fixer.cache\n.phpunit.cache\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 1.1630859375,
          "content": "<?php\n\n$finder = Symfony\\Component\\Finder\\Finder::create()\n    ->notPath('bootstrap/*')\n    ->notPath('storage/*')\n    ->notPath('resources/view/mail/*')\n    ->in([\n        __DIR__ . '/src',\n        __DIR__ . '/tests',\n    ])\n    ->name('*.php')\n    ->notName('*.blade.php')\n    ->ignoreDotFiles(true)\n    ->ignoreVCS(true);\n\nreturn (new \\PhpCsFixer\\Config())\n    ->setRules([\n        '@PSR2' => true,\n        'array_syntax' => ['syntax' => 'short'],\n        'ordered_imports' => ['sort_algorithm' => 'alpha'],\n        'no_unused_imports' => true,\n        'not_operator_with_successor_space' => true,\n        'trailing_comma_in_multiline' => true,\n        'phpdoc_scalar' => true,\n        'unary_operator_spaces' => true,\n        'binary_operator_spaces' => true,\n        'blank_line_before_statement' => [\n            'statements' => ['break', 'continue', 'declare', 'return', 'throw', 'try'],\n        ],\n        'phpdoc_single_line_var_spacing' => true,\n        'phpdoc_var_without_name' => true,\n        'method_argument_space' => [\n            'on_multiline' => 'ensure_fully_multiline',\n            'keep_multiple_spaces_after_comma' => true,\n        ]\n    ])\n    ->setFinder($finder);\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.642578125,
          "content": "# Changelog\n\nAll notable changes to `laravel-google-calendar` will be documented in this file\n\n## 3.8.0 - 2024-03-14\n\n### What's Changed\n\n* [fix] typo by @AIC-BV in https://github.com/spatie/laravel-google-calendar/pull/281\n* Laravel 11.x Compatibility by @laravel-shift in https://github.com/spatie/laravel-google-calendar/pull/295\n\n**Full Changelog**: https://github.com/spatie/laravel-google-calendar/compare/3.7.1...3.8.0\n\n## 3.7.1 - 2023-10-09\n\n### What's Changed\n\n- Remove readonly properties by @AIC-BV in https://github.com/spatie/laravel-google-calendar/pull/278\n- Add responseStatus documentation by @AIC-BV in https://github.com/spatie/laravel-google-calendar/pull/279\n\n**Full Changelog**: https://github.com/spatie/laravel-google-calendar/compare/3.7.0...3.7.1\n\n## 3.4.0 - 2021-09-27\n\n- Domain-wide delegation support (#230)\n\n## 3.3.1 - 2021-04-13\n\n- allow optional parameters on delete (#200)\n\n## 3.3.0 - 2021-04-13\n\n- allow user to pass in optional parameters to `updateEvent` (#199)\n\n## 3.2.1 - 2020-12-07\n\n- add support PHP 8\n\n## 3.2.0 - 2020-11-19\n\n- add support for adding attendees to events (#178)\n\n## 3.1.0 - 2020-09-08\n\n- add support for Laravel 8\n\n## 3.0.0 - 2020-08-24\n\n- add support for OAuth2 authentication, source property on events (#163)\n\n## 2.6.2 - 2020-07-19\n\n- allow `CarbonImmutable` date (#160)\n\n## 2.6.1 - 2020-04-17\n\n- revert changes of previous release\n\n## 2.6.0 - 2020-04-17\n\n- make factory more flexible\n\n## 2.5.3 - 2020-04-17\n\n- make factory more flexible\n\n## 2.5.2 - 2020-04-14\n\n- add quick save (#147)\n\n## 2.5.1 - 2020-04-01\n\n- allow usage of Carbon immutable (#141)\n\n## 2.5.0 - 2020-03-03\n\n- add support for Laravel 7\n\n## 2.4.0 - 2020-02-20\n\n- allow passing array of credentials (#139)\n\n## 2.3.2 - 2019-12-16\n\n- Fixed fetching more than 250 results of calendar events (#133)\n\n## 2.3.1 - 2019-12-15\n\n- Add getter for calendar ID per event (#131)\n\n## 2.3.0 - 2019-09-04\n\n- Laravel 6 compatibility; dropped support for older versions\n\n## 2.2.2 - 2019-02-27\n\n- allow carbon v2\n\n## 2.2.1 - 2018-09-27\n\n- `listEvents` now returns events sorted chronologically\n\n## 2.2.0 - 2018-01-10\n\n- add ability to add query params\n\n## 2.1.1 - 2017-10-16\n\n- improve sorting\n\n## 2.1.0 - 2017-10-15\n\n- add `update` method\n\n### 2.0.0 - 2017-07-20\n\n- use Google API v2\n- rename config file\n\n### 1.1.0 - 2017-04-26\n\n- Added: `addAttendee` method to `Event`\n\n### 1.0.3 - 2016-11-26\n\n- Fixed: Bug regarding creation of events with custom ids\n\n### 1.0.2 - 2016-08-06\n\n- Fixed: The timezone of a passed Carbon object will be used when creating events\n\n### 1.0.1 - 2016-07-29\n\n- Fixed: Creating an event on an alternative calendar wont fail anymore\n\n### 1.0.0 - 2016-05-24\n\n- Initial release\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.09765625,
          "content": "# The MIT License (MIT)\n\nCopyright (c) Spatie bvba <info@spatie.be>\n\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> of this software and associated documentation files (the \"Software\"), to deal\n> in the Software without restriction, including without limitation the rights\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> copies of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in\n> all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n> THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.623046875,
          "content": "\n# Manage events on a Google Calendar\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/spatie/laravel-google-calendar.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-google-calendar)\n[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE.md)\n[![Total Downloads](https://img.shields.io/packagist/dt/spatie/laravel-google-calendar.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-google-calendar)\n\nThis package makes working with a Google Calendar a breeze. Once it has been set up you can do these things:\n\n```php\nuse Spatie\\GoogleCalendar\\Event;\n\n// create a new event\n$event = new Event;\n\n$event->name = 'A new event';\n$event->description = 'Event description';\n$event->startDateTime = Carbon\\Carbon::now();\n$event->endDateTime = Carbon\\Carbon::now()->addHour();\n$event->addAttendee([\n    'email' => 'john@example.com',\n    'name' => 'John Doe',\n    'comment' => 'Lorum ipsum',\n    'responseStatus' => 'needsAction',\n]);\n$event->addAttendee(['email' => 'anotherEmail@gmail.com']);\n$event->addMeetLink(); // optionally add a google meet link to the event\n\n$event->save();\n\n// get all future events on a calendar\n$events = Event::get();\n\n// update existing event\n$firstEvent = $events->first();\n$firstEvent->name = 'updated name';\n$firstEvent->save();\n\n$firstEvent->update(['name' => 'updated again']);\n\n// create a new event\nEvent::create([\n   'name' => 'A new event',\n   'startDateTime' => Carbon\\Carbon::now(),\n   'endDateTime' => Carbon\\Carbon::now()->addHour(),\n]);\n\n// delete an event\n$event->delete();\n```\n\nSpatie is a webdesign agency based in Antwerp, Belgium. You'll find an overview of all our open source projects [on our website](https://spatie.be/opensource).\n\n## Support us\n\n[<img src=\"https://github-ads.s3.eu-central-1.amazonaws.com/laravel-google-calendar.jpg?t=1\" width=\"419px\" />](https://spatie.be/github-ad-click/laravel-google-calendar)\n\nWe invest a lot of resources into creating [best in class open source packages](https://spatie.be/open-source). You can support us by [buying one of our paid products](https://spatie.be/open-source/support-us).\n\nWe highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You'll find our address on [our contact page](https://spatie.be/about-us). We publish all received postcards on [our virtual postcard wall](https://spatie.be/open-source/postcards).\n\n## Installation\n\nYou can install the package via composer:\n\n```bash\ncomposer require spatie/laravel-google-calendar\n```\n\nYou must publish the configuration with this command:\n\n```bash\nphp artisan vendor:publish --provider=\"Spatie\\GoogleCalendar\\GoogleCalendarServiceProvider\"\n```\n\nThis will publish a file called `google-calendar.php` in your config-directory with these contents:\n```php\nreturn [\n\n    'default_auth_profile' => env('GOOGLE_CALENDAR_AUTH_PROFILE', 'service_account'),\n\n    'auth_profiles' => [\n\n        /*\n         * Authenticate using a service account.\n         */\n        'service_account' => [\n            /*\n             * Path to the json file containing the credentials.\n             */\n            'credentials_json' => storage_path('app/google-calendar/service-account-credentials.json'),\n        ],\n\n        /*\n         * Authenticate with actual google user account.\n         */\n        'oauth' => [\n            /*\n             * Path to the json file containing the oauth2 credentials.\n             */\n            'credentials_json' => storage_path('app/google-calendar/oauth-credentials.json'),\n\n            /*\n             * Path to the json file containing the oauth2 token.\n             */\n            'token_json' => storage_path('app/google-calendar/oauth-token.json'),\n        ],\n    ],\n\n    /*\n     * The id of the Google Calendar that will be used by default.\n     */\n    'calendar_id' => env('GOOGLE_CALENDAR_ID'),\n];\n\n```\n\n## How to obtain the credentials to communicate with Google Calendar\n\nThe first thing you’ll need to do is get credentials to use Google's API. I’m assuming that you’ve already created a Google account and are signed in. Head over to [Google API console](https://console.developers.google.com/apis) and click \"Select a project\" in the header.\n\n![1](./docs/v2/1.png)\n\nNext up we must specify which APIs the project may consume. From the header, select \"Enable APIs and Services\".\n\n![2](./docs/v2/2.png)\n\nOn the next page, search for \"Calendar\" and select \"Google Calendar API\" from the list.\n\n![3](./docs/v2/3.png)\n\nFrom here, press \"Enable\" to enable the Google Calendar API for this project.\n\n![4](./docs/v2/4.png)\n\nNow that you've created a project that has access to the Calendar API it's time to download a file with these credentials. Click \"Credentials\" in the sidebar and then press the \"Credentials in APIs & Services\" link.\n\n![5](./docs/v2/5.png)\n\nFrom this page, open the \"Create credentials\" drop-down and select \"Service account key\".\n\n![6](./docs/v2/6.png)\n\nOn the next screen, you can give the service account a name. You can name it anything you’d like. In the service account id you’ll see an email address. We’ll use this email address later on in this guide. Select \"JSON\" as the key type and click \"Create\" to download the JSON file. You will get a warning that the service account does not have a role, you can safely ignore this and create the service account without assigning a role.\n\nIf you have delegated domain-wide access to the service account and you want to impersonate a user account, specify the email address of the user account in the config file.\n\n![7](./docs/v2/7.png)\n\nSave the json inside your Laravel project at the location specified in the `service_account_credentials_json` key of the config file of this package. Because the json file contains potentially sensitive information, I don't recommend committing it to your git repository.\n\nNow that everything is set up on the API site, we’ll need to configure some things on the Google Calendar site. Head over to Google Calendar and view the settings of the calendar you want to work with via PHP.  On the \"Share with specific people\" tab press the \"Add people\" button and add the service account id that was displayed when creating credentials on the API site.\n\n![8](./docs/v2/8.png)\n\n![9](./docs/v2/9.png)\n\nScroll down to the \"Integrate calendar\" section to see the id of the calendar. You need to specify that id in the config file.\n\n![10](./docs/v2/10.png)\n\n### Authentication with OAuth2\n\nThis package supports OAuth2 authentication. This allows you to authenticate with an actual Google account, and to create and manage events with your own Google account.\n\nOAuth2 authentication requires a token file, in addition to the credentials file. The easiest way to generate both of these files is by using the [php quickstart tool](https://developers.google.com/calendar/quickstart/php). Following this guide will generate two files, `credentials.json` and `token.json`. They must be saved to your project as `oauth-credentials.json` and `oauth-token.json`, respectively. Check the config file in this package for exact details on where to save these files.\n\nTo use OAuth2, you must also set a new environment variable in your .env file:\n\n```php\nGOOGLE_CALENDAR_AUTH_PROFILE=oauth\n```\n\nIf you are upgrading from an older version of this package, you will need to force a publish of the configuration:\n\n```bash\nphp artisan vendor:publish --provider=\"Spatie\\GoogleCalendar\\GoogleCalendarServiceProvider\" --force\n```\n\nFinally, for a more seamless experience in your application, instead of using the quickstart tool you can set up a consent screen in the [Google API console](https://console.developers.google.com/apis). This would allow non-technical users of your application to easily generate their own tokens. This is completely optional.\n\n## Usage\n\n### Getting events\n\nYou can fetch all events by simply calling `Event::get();` this will return all events of the coming year. An event comes in the form of a `Spatie\\GoogleCalendar\\Event` object.\n\nThe full signature of the function is:\n\n```php\npublic static function get(Carbon $startDateTime = null, Carbon $endDateTime = null, array $queryParameters = [], string $calendarId = null): Collection\n```\n\nThe parameters you can pass in `$queryParameters` are listed [on the documentation on `list` at the Google Calendar API docs](https://developers.google.com/google-apps/calendar/v3/reference/events/list#request).\n\n### Accessing start and end dates of an event\n\nYou can use these getters to retrieve start and end date as [Carbon](https://github.com/briannesbitt/Carbon) instances:\n\n```php\n$events = Event::get();\n\n$events[0]->startDate;\n$events[0]->startDateTime;\n$events[0]->endDate;\n$events[0]->endDateTime;\n```\n\n### Creating an event\n\nYou can just new up a `Spatie\\GoogleCalendar\\Event`-object\n\n```php\n$event = new Event;\n\n$event->name = 'A new event';\n$event->startDateTime = Carbon\\Carbon::now();\n$event->endDateTime = Carbon\\Carbon::now()->addHour();\n\n$event->save();\n```\n\nYou can also call `create` statically:\n\n```php\nEvent::create([\n   'name' => 'A new event',\n   'startDateTime' => Carbon\\Carbon::now(),\n   'endDateTime' => Carbon\\Carbon::now()->addHour(),\n]);\n```\n\nThis will create an event with a specific start and end time. If you want to create a full-day event you must use `startDate` and `endDate` instead of `startDateTime` and `endDateTime`.\n\n```php\n$event = new Event;\n\n$event->name = 'A new full day event';\n$event->startDate = Carbon\\Carbon::now();\n$event->endDate = Carbon\\Carbon::now()->addDay();\n\n$event->save();\n```\n\nYou can create an event based on a simple text string like this:\n\n```php\n$event = new Event();\n\n$event->quickSave('Appointment at Somewhere on April 25 10am-10:25am');\n\n// statically\nEvent::quickCreate('Appointment at Somewhere on April 25 10am-10:25am');\n```\n\n### Getting a single event\n\nGoogle assigns a unique id to every single event. You can get this id by getting events using the `get` method and getting the `id` property on a `Spatie\\GoogleCalendar\\Event`-object:\n```php\n// get the id of the first upcoming event in the calendar.\n$eventId = Event::get()->first()->id;\n\n// you can also get the id after creating the event, then you can save it to database.\n$event = new Event;\n$newEvent = $event->save();\necho $newEvent->id; // display the event id\n```\n\nYou can use this id to fetch a single event from Google:\n```php\nEvent::find($eventId);\n```\n\n### Updating an event\n\nEasy, just change some properties and call `save()`:\n\n```php\n$event = Event::find($eventId);\n\n$event->name = 'My updated title';\n$event->save();\n```\n\nAlternatively, you can use the update method:\n\n```php\n$event = Event::find($eventId);\n\n$event->update(['name' => 'My updated title']);\n```\n\n### Deleting an event\n\nNothing to it!\n\n```php\n$event = Event::find($eventId);\n\n$event->delete();\n```\n\n## Setting a source\n\nYou can set source urls in your events, which are only visible to the creator of the event (see [docs](https://developers.google.com/calendar/v3/reference/events) for more on the source property). This function only works when authenticated via OAuth.\n\n```php\n$yourEvent->source = [\n   'title' => 'Test Source Title',\n   'url' => 'http://testsource.url',\n];\n```\n\n## Setting a color\n\nYou can set certain colors for your events (colorId 1 to 11). The possibilities are limited to the color definitions of the Google Calendar API. You can find them [here](https://developers.google.com/calendar/api/v3/reference/colors/get).\n\n```php\n$yourevent->setColorId(11);\n```\n\n### Limitations\n\nThe Google Calendar API provides many options. This package doesn't support all of them. For instance, recurring events cannot be managed properly with this package. If you stick to creating events with a name and a date you should be fine.\n\n## Upgrading from v1 to v2\n\nThe only major difference between `v1` and `v2` is that under the hood Google API v2 is used instead of v1. Here are the steps required to upgrade:\n - rename the config file from `laravel-google-calendar` to `google-calendar`\n - in the config file rename the `client_secret_json` key to `service_account_credentials_json`\n\n## Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information about what has changed recently.\n\n## Testing\n\n``` bash\ncomposer test\n```\n\n## Contributing\n\nPlease see [CONTRIBUTING](https://github.com/spatie/.github/blob/main/CONTRIBUTING.md) for details.\n\n## Security\n\nIf you discover any security-related issues, please email freek@spatie.be instead of using the issue tracker.\n\n## Credits\n\n- [Freek Van der Herten](https://github.com/freekmurze)\n- [All Contributors](../../contributors)\n\nA big thank you to [Sebastiaan Luca](https://github.com/sebastiaanluca) for his big help creating v2 of this package.\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.5595703125,
          "content": "{\n    \"name\": \"spatie/laravel-google-calendar\",\n    \"description\": \"Manage events on a Google Calendar\",\n    \"keywords\": [\n        \"spatie\",\n        \"calendar\",\n        \"google\",\n        \"event\",\n        \"schedule\",\n        \"laravel-google-calendar\"\n    ],\n    \"homepage\": \"https://github.com/spatie/laravel-google-calendar\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Freek Van der Herten\",\n            \"email\": \"freek@spatie.be\",\n            \"homepage\": \"https://spatie.be\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^7.2|^8.0\",\n        \"google/apiclient\": \"^2.2\",\n        \"illuminate/support\": \"^6.0|^7.0|^8.0|^9.0|^10.0|^11.0\",\n        \"nesbot/carbon\": \"^2.63|^3.0\"\n    },\n    \"require-dev\": {\n        \"mockery/mockery\": \"^1.3.3|^1.4\",\n        \"orchestra/testbench\": \"^4.0|^5.0|^6.0|^7.0|^8.0|^9.0\",\n        \"phpunit/phpunit\": \"^8.4|^9.0|^10.5\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Spatie\\\\GoogleCalendar\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Spatie\\\\GoogleCalendar\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"scripts\": {\n        \"test\": \"vendor/bin/phpunit\"\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"Spatie\\\\GoogleCalendar\\\\GoogleCalendarServiceProvider\"\n            ],\n            \"aliases\": {\n                \"GoogleCalendar\": \"Spatie\\\\GoogleCalendar\\\\GoogleCalendarFacade\"\n            }\n        }\n    },\n    \"config\": {\n        \"sort-packages\": true\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.646484375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         bootstrap=\"vendor/autoload.php\"\n         backupGlobals=\"false\"\n         colors=\"true\"\n         processIsolation=\"true\"\n         stopOnFailure=\"false\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.5/phpunit.xsd\"\n         cacheDirectory=\".phpunit.cache\"\n         backupStaticProperties=\"false\">\n  <testsuites>\n    <testsuite name=\"Spatie Test Suite\">\n      <directory>tests</directory>\n    </testsuite>\n  </testsuites>\n  <source>\n    <include>\n      <directory suffix=\".php\">src/</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}