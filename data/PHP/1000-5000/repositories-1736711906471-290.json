{
  "metadata": {
    "timestamp": 1736711906471,
    "page": 290,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "symfony/intl",
      "stars": 2625,
      "defaultBranch": "7.2",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.29296875,
          "content": "/Resources/bin/autoload.php export-ignore\n/Resources/bin/common.php export-ignore\n/Resources/bin/compile export-ignore\n/Resources/bin/update-data.php export-ignore\n/Resources/emoji export-ignore\n/Tests export-ignore\n/phpunit.xml.dist export-ignore\n/Resources/emoji export-ignore\n/.git* export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "vendor/\ncomposer.lock\nphpunit.xml\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.8486328125,
          "content": "CHANGELOG\n=========\n\n7.1\n---\n\n * Move all emoji code & data to a new `symfony/emoji` component\n * Deprecate `EmojiTransliterator` in favor of `Symfony\\Component\\Emoji\\EmojiTransliterator`\n\n6.4\n---\n\n * Add support for ISO-3166-1 numeric codes with `Countries::getNumericCode()`, `Countries::getNumericCodes()`,\n   `Countries::numericCodeExists()` and `Countries::getAlpha2FromNumeric()`\n\n6.3\n---\n\n * Add the special `strip` locale to `EmojiTransliterator` to strip all emojis from a string\n * Add `compress` script to compress the `Resources/data` directory when disk space matters\n\n6.2\n---\n\n * Add `EmojiTransliterator` to translate emoji to many locales\n\n6.0\n---\n\n * Remove `DateFormatter\\*`, `Collator`, `NumberFormatter`, `Locale`, `IntlGlobals`, `MethodArgumentNotImplementedException`, `MethodArgumentValueNotImplementedException`, `MethodNotImplementedException`and `NotImplementedException` classes, use symfony/polyfill-intl-icu ^1.21 instead\n\n5.3\n---\n\n * Add `Currencies::getCashFractionDigits()` and `Currencies::getCashRoundingIncrement()`\n\n5.0.0\n-----\n\n * removed `ResourceBundle` namespace\n\n4.4.0\n-----\n\n * excluded language code `root`\n * added to both `Countries` and `Languages` the methods `getAlpha3Codes`, `getAlpha3Code`, `getAlpha2Code`, `alpha3CodeExists`, `getAlpha3Name` and `getAlpha3Names`\n * excluded localized languages (e.g. `en_US`) from `Languages` in `getLanguageCodes()` and `getNames()`\n\n4.3.0\n-----\n\n * deprecated `ResourceBundle` namespace\n * added `Currencies` in favor of `Intl::getCurrencyBundle()`\n * added `Languages` and `Scripts` in favor of `Intl::getLanguageBundle()`\n * added `Locales` in favor of `Intl::getLocaleBundle()`\n * added `Countries` in favor of `Intl::getRegionBundle()`\n * added `Timezones`\n * made country codes ISO 3166 compliant\n * excluded script code `Zzzz`\n\n4.2.0\n-----\n\n * excluded language codes `mis`, `mul`, `und` and `zxx`\n"
        },
        {
          "name": "Countries.php",
          "type": "blob",
          "size": 5.0341796875,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Intl;\n\nuse Symfony\\Component\\Intl\\Exception\\MissingResourceException;\n\n/**\n * Gives access to region-related ICU data.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n * @author Roland Franssen <franssen.roland@gmail.com>\n */\nfinal class Countries extends ResourceBundle\n{\n    /**\n     * Returns all available countries.\n     *\n     * Countries are returned as uppercase ISO 3166 two-letter country codes.\n     *\n     * A full table of ISO 3166 country codes can be found here:\n     * https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes\n     *\n     * This list only contains \"officially assigned ISO 3166-1 alpha-2\" country codes.\n     *\n     * @return string[]\n     */\n    public static function getCountryCodes(): array\n    {\n        return self::readEntry(['Regions'], 'meta');\n    }\n\n    /**\n     * Returns all available countries (3 letters).\n     *\n     * Countries are returned as uppercase ISO 3166 three-letter country codes.\n     *\n     * This list only contains \"officially assigned ISO 3166-1 alpha-3\" country codes.\n     *\n     * @return string[]\n     */\n    public static function getAlpha3Codes(): array\n    {\n        return self::readEntry(['Alpha2ToAlpha3'], 'meta');\n    }\n\n    /**\n     * Returns all available numeric country codes (3 digits).\n     *\n     * Countries are returned as ISO 3166 numeric three-digit country codes.\n     *\n     * This list only contains \"officially assigned ISO 3166-1 numeric\" country codes.\n     *\n     * Returns an array with Alpha2 country codes as keys, and numeric codes as values.\n     *\n     * @return array<string, string>\n     */\n    public static function getNumericCodes(): array\n    {\n        return self::readEntry(['Alpha2ToNumeric'], 'meta');\n    }\n\n    public static function getAlpha3Code(string $alpha2Code): string\n    {\n        return self::readEntry(['Alpha2ToAlpha3', $alpha2Code], 'meta');\n    }\n\n    public static function getAlpha2Code(string $alpha3Code): string\n    {\n        return self::readEntry(['Alpha3ToAlpha2', $alpha3Code], 'meta');\n    }\n\n    public static function getNumericCode(string $alpha2Code): string\n    {\n        return self::readEntry(['Alpha2ToNumeric', $alpha2Code], 'meta');\n    }\n\n    public static function getAlpha2FromNumeric(string $numericCode): string\n    {\n        // Use an underscore prefix to force numeric strings with leading zeros to remain as strings\n        return self::readEntry(['NumericToAlpha2', '_'.$numericCode], 'meta');\n    }\n\n    public static function exists(string $alpha2Code): bool\n    {\n        try {\n            self::readEntry(['Names', $alpha2Code]);\n\n            return true;\n        } catch (MissingResourceException) {\n            return false;\n        }\n    }\n\n    public static function alpha3CodeExists(string $alpha3Code): bool\n    {\n        try {\n            self::getAlpha2Code($alpha3Code);\n\n            return true;\n        } catch (MissingResourceException) {\n            return false;\n        }\n    }\n\n    public static function numericCodeExists(string $numericCode): bool\n    {\n        try {\n            self::getAlpha2FromNumeric($numericCode);\n\n            return true;\n        } catch (MissingResourceException $e) {\n            return false;\n        }\n    }\n\n    /**\n     * Gets the country name from its alpha2 code.\n     *\n     * @throws MissingResourceException if the country code does not exist\n     */\n    public static function getName(string $country, ?string $displayLocale = null): string\n    {\n        return self::readEntry(['Names', $country], $displayLocale);\n    }\n\n    /**\n     * Gets the country name from its alpha3 code.\n     *\n     * @throws MissingResourceException if the country code does not exist\n     */\n    public static function getAlpha3Name(string $alpha3Code, ?string $displayLocale = null): string\n    {\n        return self::getName(self::getAlpha2Code($alpha3Code), $displayLocale);\n    }\n\n    /**\n     * Gets the list of country names indexed with alpha2 codes as keys.\n     *\n     * @return array<string, string>\n     */\n    public static function getNames(?string $displayLocale = null): array\n    {\n        return self::asort(self::readEntry(['Names'], $displayLocale), $displayLocale);\n    }\n\n    /**\n     * Gets the list of country names indexed with alpha3 codes as keys.\n     *\n     * Same as method getNames, but with alpha3 codes instead of alpha2 codes as keys.\n     *\n     * @return array<string, string>\n     */\n    public static function getAlpha3Names(?string $displayLocale = null): array\n    {\n        $alpha2Names = self::getNames($displayLocale);\n        $alpha3Names = [];\n        foreach ($alpha2Names as $alpha2Code => $name) {\n            $alpha3Names[self::getAlpha3Code($alpha2Code)] = $name;\n        }\n\n        return $alpha3Names;\n    }\n\n    protected static function getPath(): string\n    {\n        return Intl::getDataDirectory().'/'.Intl::REGION_DIR;\n    }\n}\n"
        },
        {
          "name": "Currencies.php",
          "type": "blob",
          "size": 4.5478515625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Intl;\n\nuse Symfony\\Component\\Intl\\Exception\\MissingResourceException;\n\n/**\n * Gives access to currency-related ICU data.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n * @author Roland Franssen <franssen.roland@gmail.com>\n */\nfinal class Currencies extends ResourceBundle\n{\n    private const INDEX_SYMBOL = 0;\n    private const INDEX_NAME = 1;\n    private const INDEX_FRACTION_DIGITS = 0;\n    private const INDEX_ROUNDING_INCREMENT = 1;\n    private const INDEX_CASH_FRACTION_DIGITS = 2;\n    private const INDEX_CASH_ROUNDING_INCREMENT = 3;\n\n    /**\n     * @return string[]\n     */\n    public static function getCurrencyCodes(): array\n    {\n        return self::readEntry(['Currencies'], 'meta');\n    }\n\n    public static function exists(string $currency): bool\n    {\n        try {\n            self::readEntry(['Names', $currency, self::INDEX_NAME]);\n\n            return true;\n        } catch (MissingResourceException) {\n            return false;\n        }\n    }\n\n    /**\n     * @throws MissingResourceException if the currency code does not exist\n     */\n    public static function getName(string $currency, ?string $displayLocale = null): string\n    {\n        return self::readEntry(['Names', $currency, self::INDEX_NAME], $displayLocale);\n    }\n\n    /**\n     * @return string[]\n     */\n    public static function getNames(?string $displayLocale = null): array\n    {\n        // ====================================================================\n        // For reference: It is NOT possible to return names indexed by\n        // numeric code here, because some numeric codes map to multiple\n        // 3-letter codes (e.g. 32 => \"ARA\", \"ARP\", \"ARS\")\n        // ====================================================================\n\n        $names = self::readEntry(['Names'], $displayLocale);\n\n        if ($names instanceof \\Traversable) {\n            $names = iterator_to_array($names);\n        }\n\n        array_walk($names, function (&$value) {\n            $value = $value[self::INDEX_NAME];\n        });\n\n        return self::asort($names, $displayLocale);\n    }\n\n    /**\n     * @throws MissingResourceException if the currency code does not exist\n     */\n    public static function getSymbol(string $currency, ?string $displayLocale = null): string\n    {\n        return self::readEntry(['Names', $currency, self::INDEX_SYMBOL], $displayLocale);\n    }\n\n    public static function getFractionDigits(string $currency): int\n    {\n        try {\n            return self::readEntry(['Meta', $currency, self::INDEX_FRACTION_DIGITS], 'meta');\n        } catch (MissingResourceException) {\n            return self::readEntry(['Meta', 'DEFAULT', self::INDEX_FRACTION_DIGITS], 'meta');\n        }\n    }\n\n    public static function getRoundingIncrement(string $currency): int\n    {\n        try {\n            return self::readEntry(['Meta', $currency, self::INDEX_ROUNDING_INCREMENT], 'meta');\n        } catch (MissingResourceException) {\n            return self::readEntry(['Meta', 'DEFAULT', self::INDEX_ROUNDING_INCREMENT], 'meta');\n        }\n    }\n\n    public static function getCashFractionDigits(string $currency): int\n    {\n        try {\n            return self::readEntry(['Meta', $currency, self::INDEX_CASH_FRACTION_DIGITS], 'meta');\n        } catch (MissingResourceException) {\n            return self::readEntry(['Meta', 'DEFAULT', self::INDEX_CASH_FRACTION_DIGITS], 'meta');\n        }\n    }\n\n    public static function getCashRoundingIncrement(string $currency): int\n    {\n        try {\n            return self::readEntry(['Meta', $currency, self::INDEX_CASH_ROUNDING_INCREMENT], 'meta');\n        } catch (MissingResourceException) {\n            return self::readEntry(['Meta', 'DEFAULT', self::INDEX_CASH_ROUNDING_INCREMENT], 'meta');\n        }\n    }\n\n    /**\n     * @throws MissingResourceException if the currency code has no numeric code\n     */\n    public static function getNumericCode(string $currency): int\n    {\n        return self::readEntry(['Alpha3ToNumeric', $currency], 'meta');\n    }\n\n    /**\n     * @throws MissingResourceException if the numeric code does not exist\n     */\n    public static function forNumericCode(int $numericCode): array\n    {\n        return self::readEntry(['NumericToAlpha3', (string) $numericCode], 'meta');\n    }\n\n    protected static function getPath(): string\n    {\n        return Intl::getDataDirectory().'/'.Intl::CURRENCY_DIR;\n    }\n}\n"
        },
        {
          "name": "Data",
          "type": "tree",
          "content": null
        },
        {
          "name": "Exception",
          "type": "tree",
          "content": null
        },
        {
          "name": "Intl.php",
          "type": "blob",
          "size": 3.1005859375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Intl;\n\n/**\n * Gives access to internationalization data.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n */\nfinal class Intl\n{\n    /**\n     * The number of resource bundles to buffer. Loading the same resource\n     * bundle for n locales takes up n spots in the buffer.\n     */\n    public const BUFFER_SIZE = 10;\n\n    /**\n     * The directory name of the currency data.\n     */\n    public const CURRENCY_DIR = 'currencies';\n\n    /**\n     * The directory name of the language data.\n     */\n    public const LANGUAGE_DIR = 'languages';\n\n    /**\n     * The directory name of the script data.\n     */\n    public const SCRIPT_DIR = 'scripts';\n\n    /**\n     * The directory name of the locale data.\n     */\n    public const LOCALE_DIR = 'locales';\n\n    /**\n     * The directory name of the region data.\n     */\n    public const REGION_DIR = 'regions';\n\n    /**\n     * The directory name of the zone data.\n     */\n    public const TIMEZONE_DIR = 'timezones';\n\n    private static string|false|null $icuVersion = false;\n    private static string $icuDataVersion;\n\n    /**\n     * Returns whether the intl extension is installed.\n     */\n    public static function isExtensionLoaded(): bool\n    {\n        return class_exists(\\ResourceBundle::class);\n    }\n\n    /**\n     * Returns the version of the installed ICU library.\n     */\n    public static function getIcuVersion(): ?string\n    {\n        if (false === self::$icuVersion) {\n            if (!self::isExtensionLoaded()) {\n                self::$icuVersion = self::getIcuStubVersion();\n            } elseif (\\defined('INTL_ICU_VERSION')) {\n                self::$icuVersion = \\INTL_ICU_VERSION;\n            } else {\n                try {\n                    $reflector = new \\ReflectionExtension('intl');\n                    ob_start();\n                    $reflector->info();\n                    $output = strip_tags(ob_get_clean());\n                    preg_match('/^ICU version (?:=>)?(.*)$/m', $output, $matches);\n\n                    self::$icuVersion = trim($matches[1]);\n                } catch (\\ReflectionException) {\n                    self::$icuVersion = null;\n                }\n            }\n        }\n\n        return self::$icuVersion;\n    }\n\n    /**\n     * Returns the version of the installed ICU data.\n     */\n    public static function getIcuDataVersion(): string\n    {\n        return self::$icuDataVersion ??= trim(file_get_contents(self::getDataDirectory().'/version.txt'));\n    }\n\n    /**\n     * Returns the ICU version that the stub classes mimic.\n     */\n    public static function getIcuStubVersion(): string\n    {\n        return '76.1';\n    }\n\n    /**\n     * Returns the absolute path to the data directory.\n     */\n    public static function getDataDirectory(): string\n    {\n        return __DIR__.'/Resources/data';\n    }\n\n    /**\n     * This class must not be instantiated.\n     */\n    private function __construct()\n    {\n    }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (c) 2004-present Fabien Potencier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Languages.php",
          "type": "blob",
          "size": 5.490234375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Intl;\n\nuse Symfony\\Component\\Intl\\Exception\\MissingResourceException;\n\n/**\n * Gives access to language-related ICU data.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n * @author Roland Franssen <franssen.roland@gmail.com>\n */\nfinal class Languages extends ResourceBundle\n{\n    /**\n     * Returns all available languages as two-letter codes.\n     *\n     * Languages are returned as lowercase ISO 639-1 two-letter language codes.\n     * For languages that don't have a two-letter code, the ISO 639-2\n     * three-letter code is used instead.\n     *\n     * A full table of ISO 639 language codes can be found here:\n     * http://www-01.sil.org/iso639-3/codes.asp\n     *\n     * @return string[] an array of canonical ISO 639-1 language codes\n     */\n    public static function getLanguageCodes(): array\n    {\n        return self::readEntry(['Languages'], 'meta');\n    }\n\n    public static function exists(string $language): bool\n    {\n        try {\n            self::readEntry(['Names', $language]);\n\n            return true;\n        } catch (MissingResourceException) {\n            return false;\n        }\n    }\n\n    /**\n     * Gets the language name from its alpha2 code.\n     *\n     * A full locale may be passed to obtain a more localized language name, e.g. \"American English\" for \"en_US\".\n     *\n     * @throws MissingResourceException if the language code does not exist\n     */\n    public static function getName(string $language, ?string $displayLocale = null): string\n    {\n        try {\n            return self::readEntry(['Names', $language], $displayLocale);\n        } catch (MissingResourceException) {\n            try {\n                return self::readEntry(['LocalizedNames', $language], $displayLocale);\n            } catch (MissingResourceException $e) {\n                if (false !== $i = strrpos($language, '_')) {\n                    return self::getName(substr($language, 0, $i), $displayLocale);\n                }\n\n                throw $e;\n            }\n        }\n    }\n\n    /**\n     * Gets the list of language names indexed with alpha2 codes as keys.\n     *\n     * @return array<string, string>\n     */\n    public static function getNames(?string $displayLocale = null): array\n    {\n        return self::asort(self::readEntry(['Names'], $displayLocale), $displayLocale);\n    }\n\n    /**\n     * Returns the ISO 639-2 three-letter code of a language, given a two-letter code.\n     *\n     * @throws MissingResourceException if the language has no corresponding three-letter code\n     */\n    public static function getAlpha3Code(string $language): string\n    {\n        return self::readEntry(['Alpha2ToAlpha3', $language], 'meta');\n    }\n\n    /**\n     * Returns the ISO 639-1 two-letter code of a language, given a three letter code.\n     *\n     * @throws MissingResourceException if the language has no corresponding three-letter code\n     */\n    public static function getAlpha2Code(string $language): string\n    {\n        return self::readEntry(['Alpha3ToAlpha2', $language], 'meta');\n    }\n\n    /**\n     * Returns all available languages as three-letter codes.\n     *\n     * Languages are returned as lowercase ISO 639-2 three-letter language codes.\n     *\n     * @return string[] an array of canonical ISO 639-2 language codes\n     */\n    public static function getAlpha3Codes(): array\n    {\n        return self::readEntry(['Alpha3Languages'], 'meta');\n    }\n\n    /**\n     * @param string $language ISO 639-2 three-letter language code\n     */\n    public static function alpha3CodeExists(string $language): bool\n    {\n        try {\n            self::getAlpha2Code($language);\n\n            return true;\n        } catch (MissingResourceException) {\n            static $cache;\n            $cache ??= array_flip(self::getAlpha3Codes());\n\n            return isset($cache[$language]);\n        }\n    }\n\n    /**\n     * Gets the language name from its ISO 639-2 three-letter code.\n     *\n     * @throws MissingResourceException if the country code does not exists\n     */\n    public static function getAlpha3Name(string $language, ?string $displayLocale = null): string\n    {\n        try {\n            return self::getName(self::getAlpha2Code($language), $displayLocale);\n        } catch (MissingResourceException $e) {\n            if (3 === \\strlen($language)) {\n                return self::getName($language, $displayLocale);\n            }\n\n            throw $e;\n        }\n    }\n\n    /**\n     * Gets the list of language names indexed with ISO 639-2 three-letter codes as keys.\n     *\n     * Same as method getNames, but with ISO 639-2 three-letter codes instead of ISO 639-1 codes as keys.\n     *\n     * @return array<string, string>\n     */\n    public static function getAlpha3Names(?string $displayLocale = null): array\n    {\n        $alpha2Names = self::getNames($displayLocale);\n        $alpha3Names = [];\n        foreach ($alpha2Names as $alpha2Code => $name) {\n            if (3 === \\strlen($alpha2Code)) {\n                $alpha3Names[$alpha2Code] = $name;\n                continue;\n            }\n            try {\n                $alpha3Names[self::getAlpha3Code($alpha2Code)] = $name;\n            } catch (MissingResourceException) {\n            }\n        }\n\n        return $alpha3Names;\n    }\n\n    protected static function getPath(): string\n    {\n        return Intl::getDataDirectory().'/'.Intl::LANGUAGE_DIR;\n    }\n}\n"
        },
        {
          "name": "Locale.php",
          "type": "blob",
          "size": 3.1279296875,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Intl;\n\nif (!class_exists(\\Locale::class)) {\n    throw new \\LogicException(\\sprintf('You cannot use the \"%s\\Locale\" class as the \"intl\" extension is not installed. See https://php.net/intl.', __NAMESPACE__));\n}\n\n/**\n * Provides access to locale-related data.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n *\n * @internal\n */\nfinal class Locale extends \\Locale\n{\n    private static ?string $defaultFallback = 'en';\n\n    /**\n     * Sets the default fallback locale.\n     *\n     * The default fallback locale is used as fallback for locales that have no\n     * fallback otherwise.\n     *\n     * @see getFallback()\n     */\n    public static function setDefaultFallback(?string $locale): void\n    {\n        self::$defaultFallback = $locale;\n    }\n\n    /**\n     * Returns the default fallback locale.\n     *\n     * @see setDefaultFallback()\n     * @see getFallback()\n     */\n    public static function getDefaultFallback(): ?string\n    {\n        return self::$defaultFallback;\n    }\n\n    /**\n     * Returns the fallback locale for a given locale.\n     *\n     * For example, the fallback of \"fr_FR\" is \"fr\". The fallback of \"fr\" is\n     * the default fallback locale configured with {@link setDefaultFallback()}.\n     * The default fallback locale has no fallback.\n     *\n     * @return string|null The ICU locale code of the fallback locale, or null\n     *                     if no fallback exists\n     */\n    public static function getFallback(string $locale): ?string\n    {\n        if (\\function_exists('locale_parse')) {\n            $localeSubTags = locale_parse($locale) ?? ['language' => $locale];\n\n            if (1 === \\count($localeSubTags)) {\n                if ('root' !== self::$defaultFallback && self::$defaultFallback === $localeSubTags['language']) {\n                    return 'root';\n                }\n\n                // Don't return default fallback for \"root\", \"meta\" or others\n                // Normal locales have two or three letters\n                if (\\strlen($locale) < 4) {\n                    return self::$defaultFallback;\n                }\n\n                return null;\n            }\n\n            array_pop($localeSubTags);\n\n            $fallback = locale_compose($localeSubTags);\n\n            return false !== $fallback ? $fallback : null;\n        }\n\n        if (false !== $pos = strrpos($locale, '_')) {\n            return substr($locale, 0, $pos);\n        }\n\n        if (false !== $pos = strrpos($locale, '-')) {\n            return substr($locale, 0, $pos);\n        }\n\n        if ('root' !== self::$defaultFallback && self::$defaultFallback === $locale) {\n            return 'root';\n        }\n\n        // Don't return default fallback for \"root\", \"meta\" or others\n        // Normal locales have two or three letters\n        return \\strlen($locale) < 4 ? self::$defaultFallback : null;\n    }\n\n    /**\n     * This class must not be instantiated.\n     */\n    private function __construct()\n    {\n    }\n}\n"
        },
        {
          "name": "Locales.php",
          "type": "blob",
          "size": 1.953125,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Intl;\n\nuse Symfony\\Component\\Intl\\Exception\\MissingResourceException;\n\n/**\n * Gives access to locale-related ICU data.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n * @author Roland Franssen <franssen.roland@gmail.com>\n */\nfinal class Locales extends ResourceBundle\n{\n    /**\n     * @return string[]\n     */\n    public static function getLocales(): array\n    {\n        return self::readEntry(['Locales'], 'meta');\n    }\n\n    /**\n     * @return string[]\n     */\n    public static function getAliases(): array\n    {\n        return self::readEntry(['Aliases'], 'meta');\n    }\n\n    public static function exists(string $locale): bool\n    {\n        try {\n            self::readEntry(['Names', $locale]);\n\n            return true;\n        } catch (MissingResourceException) {\n            return \\in_array($locale, self::getAliases(), true);\n        }\n    }\n\n    /**\n     * @throws MissingResourceException if the locale does not exist\n     */\n    public static function getName(string $locale, ?string $displayLocale = null): string\n    {\n        try {\n            return self::readEntry(['Names', $locale], $displayLocale);\n        } catch (MissingResourceException $e) {\n            if (false === $aliased = array_search($locale, self::getAliases(), true)) {\n                throw $e;\n            }\n\n            return self::readEntry(['Names', $aliased], $displayLocale);\n        }\n    }\n\n    /**\n     * @return string[]\n     */\n    public static function getNames(?string $displayLocale = null): array\n    {\n        return self::asort(self::readEntry(['Names'], $displayLocale), $displayLocale);\n    }\n\n    protected static function getPath(): string\n    {\n        return Intl::getDataDirectory().'/'.Intl::LOCALE_DIR;\n    }\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.6005859375,
          "content": "Intl Component\n=============\n\nThe Intl component provides access to the localization data of the ICU library.\n\nIf you have the zlib extension enabled, you can compress the data by running:\n\n    php vendor/symfony/intl/Resources/bin/compress\n\nResources\n---------\n\n * [Documentation](https://symfony.com/doc/current/components/intl.html)\n * [Contributing](https://symfony.com/doc/current/contributing/index.html)\n * [Report issues](https://github.com/symfony/symfony/issues) and\n   [send Pull Requests](https://github.com/symfony/symfony/pulls)\n   in the [main Symfony repository](https://github.com/symfony/symfony)\n"
        },
        {
          "name": "ResourceBundle.php",
          "type": "blob",
          "size": 2.62109375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Intl;\n\nuse Symfony\\Component\\Intl\\Data\\Bundle\\Reader\\BufferedBundleReader;\nuse Symfony\\Component\\Intl\\Data\\Bundle\\Reader\\BundleEntryReader;\nuse Symfony\\Component\\Intl\\Data\\Bundle\\Reader\\BundleEntryReaderInterface;\nuse Symfony\\Component\\Intl\\Data\\Bundle\\Reader\\PhpBundleReader;\n\n/**\n * @author Roland Franssen <franssen.roland@gmail.com>\n *\n * @internal\n */\nabstract class ResourceBundle\n{\n    private static BundleEntryReader $entryReader;\n\n    abstract protected static function getPath(): string;\n\n    /**\n     * Reads an entry from a resource bundle.\n     *\n     * @see BundleEntryReaderInterface::readEntry()\n     *\n     * @param string[]    $indices  The indices to read from the bundle\n     * @param string|null $locale   The locale to read\n     * @param bool        $fallback Whether to merge the value with the value from\n     *                              the fallback locale (e.g. \"en\" for \"en_GB\").\n     *                              Only applicable if the result is multivalued\n     *                              (i.e. array or \\ArrayAccess) or cannot be found\n     *                              in the requested locale.\n     *\n     * @return mixed returns an array or {@link \\ArrayAccess} instance for\n     *               complex data and a scalar value for simple data\n     */\n    final protected static function readEntry(array $indices, ?string $locale = null, bool $fallback = true): mixed\n    {\n        if (!isset(self::$entryReader)) {\n            self::$entryReader = new BundleEntryReader(new BufferedBundleReader(\n                new PhpBundleReader(),\n                Intl::BUFFER_SIZE\n            ));\n\n            $localeAliases = self::$entryReader->readEntry(Intl::getDataDirectory().'/'.Intl::LOCALE_DIR, 'meta', ['Aliases']);\n            self::$entryReader->setLocaleAliases($localeAliases instanceof \\Traversable ? iterator_to_array($localeAliases) : $localeAliases);\n        }\n\n        return self::$entryReader->readEntry(static::getPath(), $locale ?? \\Locale::getDefault(), $indices, $fallback);\n    }\n\n    final protected static function asort(iterable $list, ?string $locale = null): array\n    {\n        if ($list instanceof \\Traversable) {\n            $list = iterator_to_array($list);\n        }\n\n        $collator = new \\Collator($locale ?? \\Locale::getDefault());\n        $collator->asort($list);\n\n        return $list;\n    }\n\n    private function __construct()\n    {\n    }\n}\n"
        },
        {
          "name": "Resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "Scripts.php",
          "type": "blob",
          "size": 1.5029296875,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Intl;\n\nuse Symfony\\Component\\Intl\\Exception\\MissingResourceException;\n\n/**\n * Gives access to script-related ICU data.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n * @author Roland Franssen <franssen.roland@gmail.com>\n */\nfinal class Scripts extends ResourceBundle\n{\n    /**\n     * @return string[]\n     */\n    public static function getScriptCodes(): array\n    {\n        return self::readEntry(['Scripts'], 'meta');\n    }\n\n    public static function exists(string $script): bool\n    {\n        try {\n            self::readEntry(['Names', $script]);\n\n            return true;\n        } catch (MissingResourceException) {\n            return false;\n        }\n    }\n\n    /**\n     * @throws MissingResourceException if the script code does not exist\n     */\n    public static function getName(string $script, ?string $displayLocale = null): string\n    {\n        return self::readEntry(['Names', $script], $displayLocale);\n    }\n\n    /**\n     * @return string[]\n     */\n    public static function getNames(?string $displayLocale = null): array\n    {\n        return self::asort(self::readEntry(['Names'], $displayLocale), $displayLocale);\n    }\n\n    protected static function getPath(): string\n    {\n        return Intl::getDataDirectory().'/'.Intl::SCRIPT_DIR;\n    }\n}\n"
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "Timezones.php",
          "type": "blob",
          "size": 3.478515625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Intl;\n\nuse Symfony\\Component\\Intl\\Exception\\MissingResourceException;\nuse Symfony\\Component\\Intl\\Exception\\RuntimeException;\n\n/**\n * Gives access to timezone-related ICU data.\n *\n * @author Roland Franssen <franssen.roland@gmail.com>\n */\nfinal class Timezones extends ResourceBundle\n{\n    /**\n     * @return string[]\n     */\n    public static function getIds(): array\n    {\n        return self::readEntry(['Zones'], 'meta');\n    }\n\n    public static function exists(string $timezone): bool\n    {\n        try {\n            self::readEntry(['Names', $timezone]);\n\n            return true;\n        } catch (MissingResourceException) {\n            try {\n                new \\DateTimeZone($timezone);\n\n                return true;\n            } catch (\\Exception) {\n                return false;\n            }\n        }\n    }\n\n    /**\n     * @throws MissingResourceException if the timezone identifier does not exist or is an alias\n     */\n    public static function getName(string $timezone, ?string $displayLocale = null): string\n    {\n        return self::readEntry(['Names', $timezone], $displayLocale);\n    }\n\n    /**\n     * @return string[]\n     */\n    public static function getNames(?string $displayLocale = null): array\n    {\n        return self::asort(self::readEntry(['Names'], $displayLocale), $displayLocale);\n    }\n\n    /**\n     * @throws \\Exception       if the timezone identifier does not exist\n     * @throws RuntimeException if there's no timezone DST transition information available\n     */\n    public static function getRawOffset(string $timezone, ?int $timestamp = null): int\n    {\n        $dateTimeImmutable = new \\DateTimeImmutable(date('Y-m-d H:i:s', $timestamp ?? time()), new \\DateTimeZone($timezone));\n\n        return $dateTimeImmutable->getOffset();\n    }\n\n    public static function getGmtOffset(string $timezone, ?int $timestamp = null, ?string $displayLocale = null): string\n    {\n        $offset = self::getRawOffset($timezone, $timestamp);\n        $abs = abs($offset);\n\n        return \\sprintf(self::readEntry(['Meta', 'GmtFormat'], $displayLocale), \\sprintf(self::readEntry(['Meta', 'HourFormat'.(0 <= $offset ? 'Pos' : 'Neg')], $displayLocale), $abs / 3600, $abs / 60 % 60));\n    }\n\n    /**\n     * @throws MissingResourceException if the timezone identifier has no associated country code\n     */\n    public static function getCountryCode(string $timezone): string\n    {\n        return self::readEntry(['ZoneToCountry', $timezone], 'meta');\n    }\n\n    /**\n     * @throws MissingResourceException if the country code does not exist\n     */\n    public static function forCountryCode(string $country): array\n    {\n        try {\n            return self::readEntry(['CountryToZone', $country], 'meta');\n        } catch (MissingResourceException $e) {\n            if (Countries::exists($country)) {\n                return [];\n            }\n\n            if (Countries::exists(strtoupper($country))) {\n                throw new MissingResourceException(\\sprintf('Country codes must be in uppercase, but \"%s\" was passed. Try with \"%s\" country code instead.', $country, strtoupper($country)));\n            }\n\n            throw $e;\n        }\n    }\n\n    protected static function getPath(): string\n    {\n        return Intl::getDataDirectory().'/'.Intl::TIMEZONE_DIR;\n    }\n}\n"
        },
        {
          "name": "Transliterator",
          "type": "tree",
          "content": null
        },
        {
          "name": "Util",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.19921875,
          "content": "{\n    \"name\": \"symfony/intl\",\n    \"type\": \"library\",\n    \"description\": \"Provides access to the localization data of the ICU library\",\n    \"keywords\": [\"intl\", \"icu\", \"internationalization\", \"localization\", \"i18n\", \"l10n\"],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Bernhard Schussek\",\n            \"email\": \"bschussek@gmail.com\"\n        },\n        {\n            \"name\": \"Eriksen Costa\",\n            \"email\": \"eriksen.costa@infranology.com.br\"\n        },\n        {\n            \"name\": \"Igor Wiedler\",\n            \"email\": \"igor@wiedler.ch\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=8.2\",\n        \"symfony/deprecation-contracts\": \"^2.5|^3\"\n    },\n    \"require-dev\": {\n        \"symfony/filesystem\": \"^6.4|^7.0\",\n        \"symfony/var-exporter\": \"^6.4|^7.0\"\n    },\n    \"conflict\": {\n        \"symfony/string\": \"<7.1\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Symfony\\\\Component\\\\Intl\\\\\": \"\" },\n        \"exclude-from-classmap\": [\n            \"/Tests/\",\n            \"/Resources/data/\"\n        ]\n    },\n    \"minimum-stability\": \"dev\"\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.94140625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"http://schema.phpunit.de/9.3/phpunit.xsd\"\n         backupGlobals=\"false\"\n         colors=\"true\"\n         bootstrap=\"vendor/autoload.php\"\n         failOnRisky=\"true\"\n         failOnWarning=\"true\"\n>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\" />\n    </php>\n\n    <testsuites>\n        <testsuite name=\"Symfony Intl Component Test Suite\">\n            <directory>./Tests/</directory>\n        </testsuite>\n    </testsuites>\n\n    <groups>\n        <exclude>\n            <group>intl-data</group>\n        </exclude>\n    </groups>\n\n    <coverage>\n        <include>\n            <directory>./</directory>\n        </include>\n        <exclude>\n            <directory>./Resources</directory>\n            <directory>./Tests</directory>\n            <directory>./vendor</directory>\n        </exclude>\n    </coverage>\n</phpunit>\n"
        }
      ]
    }
  ]
}