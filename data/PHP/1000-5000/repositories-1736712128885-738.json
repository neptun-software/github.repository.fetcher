{
  "metadata": {
    "timestamp": 1736712128885,
    "page": 738,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "imanghafoori1/laravel-microscope",
      "stars": 1485,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".deepsource.toml",
          "type": "blob",
          "size": 0.052734375,
          "content": "version = 1\n\n[[analyzers]]\nname = \"php\"\nenabled = true"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4189453125,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n# Ignore all test and documentation with \"export-ignore\".\n/tests              export-ignore\n/.github            export-ignore\n/.deepsource.toml   export-ignore\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/.scrutinizer.yml   export-ignore\n/.styleci.yml       export-ignore\n/phpunit.xml.dist   export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.10546875,
          "content": "build\ncomposer.lock\ndocs\nvendor\ncoverage\n.idea\nphpunit\ntest.bat\ntest8.bat\n.phpunit.result.cache\nphpunit.xml\n"
        },
        {
          "name": ".scrutinizer.yml",
          "type": "blob",
          "size": 0.5341796875,
          "content": "filter:\n    excluded_paths: [tests/*, src/Analyzers/ClassReferenceFinder.php]\n\nchecks:\n    php:\n        remove_extra_empty_lines: true\n        remove_php_closing_tag: true\n        remove_trailing_whitespace: true\n        fix_use_statements:\n            remove_unused: true\n            preserve_multiple: false\n            preserve_blanklines: true\n            order_alphabetically: true\n        fix_php_opening_tag: true\n        fix_linefeed: true\n        fix_line_ending: true\n        fix_identation_4spaces: true\n        fix_doc_comments: true\n\n"
        },
        {
          "name": ".styleci.yml",
          "type": "blob",
          "size": 0.015625,
          "content": "preset: laravel\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0302734375,
          "content": "MIT License\n\nCopyright (c) Iman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 32.37109375,
          "content": "<h2 align=\"center\">\n     Find Bugs Before They Bite\n</h2>\n\n\n<p align=\"center\">\n    <img width=\"300px\" src=\"https://user-images.githubusercontent.com/6961695/78522127-920e9e80-77e1-11ea-869a-05a29466e6b0.png\" alt=\"microscope_header\"></img>\n</p>\n\n<h4 align=\"center\">\nBuilt with :heart: for lazy Laravel developers ;)\n</h4>\n\n<h3 align=\"center\">\nWhy repeat the old errors, if there are so many new errors to commit?\n</h3>\n<h3 align=\"center\">\n(Bertrand Russel)\n</h3>\n<h5 align=\"center\">\nGive your eyes a rest, we will detect and fix them for you.\n</h5>\n\n![Packagist Stars](https://img.shields.io/packagist/stars/imanghafoori/laravel-microscope)\n[![Required Laravel Version][ico-laravel]][link-packagist]\n[![Required PHP Version][ico-php]][link-packagist]\n[![Latest Version on Packagist][ico-version]][link-packagist]\n[![Quality Score][ico-code-quality]][link-code-quality]\n[![Total Downloads][ico-downloads]][link-downloads]\n[![Today Downloads][ico-today-downloads]][link-downloads]\n[![tests](https://github.com/imanghafoori1/laravel-microscope/actions/workflows/run-tests.yml/badge.svg?branch=master)](https://github.com/imanghafoori1/laravel-microscope/actions/workflows/run-tests.yml)\n[![Imports](https://github.com/imanghafoori1/laravel-microscope/actions/workflows/imports.yml/badge.svg?branch=master)](https://github.com/imanghafoori1/laravel-microscope/actions/workflows/imports.yml)\n\n<!--\n<p align=\"center\">\n<a href=\"https://packagist.org/packages/imanghafoori/laravel-microscope\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/8d75e05f4b67de65b51e10772b054f506aa8cfab/68747470733a2f2f696d672e736869656c64732e696f2f7061636b61676973742f762f696d616e676861666f6f72692f6c61726176656c2d6d6963726f73636f70652e7376673f7374796c653d666c61742d737175617265\" alt=\"Latest Version on Packagist\" data-canonical-src=\"https://img.shields.io/packagist/v/imanghafoori/laravel-microscope.svg?style=round-square\" style=\"max-width:100%;\"></a>\n<a href=\"https://travis-ci.org/imanghafoori1/laravel-self-test\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/63b18ae839896de4604ede21595326389fed0b1f/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f696d616e676861666f6f7269312f6c61726176656c2d73656c662d746573742f6d61737465722e7376673f7374796c653d666c61742d737175617265\" alt=\"Build Status\" data-canonical-src=\"https://img.shields.io/travis/imanghafoori1/laravel-self-test/master.svg?style=round-square\" style=\"max-width:100%;\"></a>\n<a href=\"https://scrutinizer-ci.com/g/imanghafoori1/laravel-microscope\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/ee6d1b9eee22268201b7e253867c6bb64838651e/68747470733a2f2f696d672e736869656c64732e696f2f7363727574696e697a65722f672f696d616e676861666f6f7269312f6c61726176656c2d6d6963726f73636f70652e7376673f7374796c653d666c61742d737175617265\" alt=\"Quality Score\" data-canonical-src=\"https://img.shields.io/scrutinizer/g/imanghafoori1/laravel-microscope.svg?style=round-square\" style=\"max-width:100%;\"></a>\n<a href=\"https://packagist.org/packages/imanghafoori/laravel-microscope\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/5441e915afbdb81de92b808965f294b0c7d18c52/68747470733a2f2f706f7365722e707567782e6f72672f696d616e676861666f6f72692f6c61726176656c2d6d6963726f73636f70652f642f6461696c79\" alt=\"Daily Downloads\" data-canonical-src=\"https://poser.pugx.org/imanghafoori/laravel-microscope/d/daily\" style=\"max-width:100%;\"></a>\n<a href=\"https://packagist.org/packages/imanghafoori/laravel-microscope\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/7f10826df8cf3fb52525fd2494554c0e587b8bb7/68747470733a2f2f696d672e736869656c64732e696f2f7061636b61676973742f64742f696d616e676861666f6f72692f6c61726176656c2d6d6963726f73636f70652e7376673f7374796c653d666c61742d737175617265\" alt=\"Total Downloads\" data-canonical-src=\"https://img.shields.io/packagist/dt/imanghafoori/laravel-microscope.svg?style=round-square\" style=\"max-width:100%;\"></a>\n<a href=\"/imanghafoori1/laravel-microscope/blob/master/LICENSE.md\"><img src=\"https://camo.githubusercontent.com/d885b3999bb863974fb67118174bb0402d089a89/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e7376673f7374796c653d726f756e642d737175617265\" alt=\"Software License\" data-canonical-src=\"https://img.shields.io/badge/license-MIT-blue.svg?style=round-square\" style=\"max-width:100%;\"></a></p>\n-->\n\n- Table Of Contents\n    - [Key Things To Know](#key-things-to-know)\n    - [Installation](#installation)\n    - [Usage](#usage)\n        - [Useful Commands](#useful-commands)\n        - [Fewer Use Commands](#less-use-commands)\n        - [Global Helper Functions](#global-helper-functions)\n    - [What The Commands Do?](#what-the-commands-do)\n\n      <details>\n\n        <summary>show commands</summary>\n\n        1. [`php artisan search_replace`](#search_replace)\n            - [Defining Patterns](#defining-patterns)\n            - [Placeholders](#placeholders)\n            - [Mutator](#mutator)\n            - [Filters](#filters)\n            - [Capturing Php \"statements\"](#capturing-php-statements)\n            - [Capturing Global Function Calls](#capturing-global)\n            - [Repeating Patterns](#repeating-patterns)\n\n        1. [`php artisan check:early_returns`](#early_returns)\n        1. [`php artisan check:psr4`](#psr4)\n        1. [`php artisan check:generate`](#generate)\n        1. [`php artisan check:imports`](#imports)\n        1. [`php artisan check:bad_practices`](#bad_practices)\n        1. [`php artisan check:routes`](#routes)\n        1. [`php artisan check:compact`](#compact)\n        1. [`php artisan check:blade_queries`](#blade_queries)\n        1. [`php artisan check:extract_blades`](#extract_blades)\n        1. [`php artisan check:action_comments`](#action_comments)\n        1. [`php artisan pp:route`](#route)\n        1. [`php artisan check:views`](#views)\n        1. [`php artisan check:events`](#events)\n        1. [`php artisan check:gates`](#gates)\n        1. [`php artisan check:aliases`](#aliases)\n        1. [`php artisan check:dead_controllers`](#dead_controllers)\n        1. [`php artisan check:generic_docblocks`](#generic_docblocks)\n        1. [`php artisan check:migrations`](#migrations)\n        1. [`php artisan check:empty_comment`](#empty_comment)\n        1. [`php artisan enforce:helper_functions`](#helper_functions)\n        1. [`php artisan list:models`](#models)\n    \n     </details>\n\n    - [Credits](#credits)\n    - [License](#license)\n    - [Contributing](#contributing)\n    - [More From The Author](#more-from-author)\n    - [Contributors](#contributors)\n\n<a name=\"key-things-to-know\"></a>\n## Key things to know:\n\n- It is created to be **smarter than phpstorm** and other IDEs in finding errors.\n- It is created to **understand laravel run-time** and magic.\n- It does **not show you stupid false errors**, all the reported cases are really errors.\n- Even If you have written a lot of tests for your app, **you may still need this**.\n- **It can refactor your code**, by applying `early returns` automatically.\n- It is written from scratch to yield the **maximum performance** possible.\n\n### :film_strip: Video tutorial [here](https://youtu.be/aEkiE30wNKk)\n\n### :star: Your Stars Make Us Do More\n>If you found this package useful, and you want to encourage the maintainer to work on it, just press the star button to declare your willingness.\n\n<a href=\"https://github.com/imanghafoori1/microscope/stargazers\">Stargazers</a>\n\n<a name=\"installation\"></a>\n## <g-emoji class=\"g-emoji\" alias=\"arrow_down\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/2b07.png\">⬇️</g-emoji> Installation\n\nYou can **install** the package via Composer:\n\n```bash\ncomposer require imanghafoori/laravel-microscope --dev\n```\n\nYou may also **publish** config file:\n```\nphp artisan vendor:publish --provider=\"Imanghafoori\\LaravelMicroscope\\LaravelMicroscopeServiceProvider\"\n```\n\n<a name=\"usage\"></a>\n## <g-emoji class=\"g-emoji\" alias=\"gem\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f48e.png\">💎</g-emoji> Usage:\n\n### Useful Commands:\n\n\n>You can run :point_down:\n\n|#|Artisan Command|\n|---|---|\n|1|`php artisan search_replace`|\n|2|`php artisan check:early_returns`|\n|3|`php artisan check:all`|\n\n\n<a name=\"less-use-commands\"></a>\n### Less Used Commands:\n\n|#|Artisan Command|\n|---|---|\n|1|`php artisan check:views`|\n|2|`php artisan check:routes`|\n|3|`php artisan check:psr4 {-s\\|--nofix} `|\n|4|`php artisan check:imports {-s\\|--nofix} {--wrong} {--extra}`|\n|5|`php artisan check:stringy_classes`|\n|6|`php artisan check:dd`|\n|7|`php artisan check:bad_practices`|\n|8|`php artisan check:compact`|\n|9|`php artisan check:blade_queries`|\n|10|`php artisan check:action_comments`|\n|11|`php artisan check:extract_blades`|\n|12|`php artisan pp:route`|\n|13|`php artisan check:generate`|\n|14|`php artisan check:endif`|\n|15|`php artisan check:events`|\n|16|`php artisan check:gates`|\n|17|`php artisan check:dynamic_where`|\n|18|`php artisan check:aliases`|\n|19|`php artisan check:dead_controllers`|\n|20|`php artisan check:generic_docblocks`|\n|21|`php artisan enforce:helper_functions`|\n|22|`php artisan list:models`|\n\n<a name=\"global-helper-functions\"></a>\n## Global Helper Functions:\n>Also, You will have access to some global helper functions\n\n```php \nmicroscope_dd_listeners($event);\n ```\nIn case you wonder what the listeners are and where they are,\nyou can call `microscope_dd_listeners(MyEvent::class);` within either the `boot` or `register` methods.\nIt works like a normal `dd(...);` meaning that the program stops running at that point.\n\n<a name=\"what-the-commands-do\"></a>\n## <g-emoji class=\"g-emoji\" alias=\"book\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png\">📖</g-emoji> What do the Commands do?\n\nLet's start with the:\n\n<a name=\"search_replace\"></a>\n### `php artisan search_replace {--name=pattern_name} {--tag=some_tag} {--file=partial_file_name} {--folder=partial_folder_name}`\n\nThis is a smart and very powerful search/replace functionality that can be a real \"time saver\" for you.\n\n<a name=\"defining-patterns\" ></a>\n#### :one:\t\tDefining patterns:\n\n>If you run the command `artisan search_replace` for the first time, it will create a `search_replace.php` file in the project's root.\nThen, you can define your patterns, within that file.\n\n\n**Examples:**\n\nLet's define a pattern to replace the `optional()` global helper with the `?->` php 8 null safe operator:\n\n```php\nreturn [\n    'optional_to_nullsafe' => [\n        'search' => '\"<global_func_call:optional>\"(\"<in_between>\")->',\n        'replace' => '\"<2>\"?->',\n        // 'tag' => 'php8,refactor',\n        // 'predicate' => function($matches, $tokens) {...},\n        // 'mutator' => function($matches) {...},\n        // 'post_replace' => [...],\n        // 'avoid_result_in' => [...],\n        // 'avoid_syntax_errors' => false,\n        // 'filters' => [...],\n    ]\n];\n```\n- Here the key `optional_to_nullsafe` is the \"unique name\" of your pattern. (You can target your pattern by running ```php artisan search_replace --name=optional_to_nullsafe```)\n- The search pattern has a `\"<in_between>\"` placeholder which captures everything in between the pair of parenthesis.\n- In the `replace` block we substitute what we have captured by the first placeholder with the `\"<1>\"`.\n  If we have more placeholders, we could have had `\"<2>\"` etc.\n- In the tag block we can mention some tags as an array of strings or a string separated by commas\n  and target them by `--tag` flag: ```php artisan search_replace --tag=php8```\n\n<a name=\"placeholders\" ></a>\n:two: **Placeholders:**\n\nHere is a comprehensive list of placeholders you can use:\n\n|#|Placeholders|Description|\n|---|---|---|\n|1|`<var>` or `<variable>`|for variables like: `$user`|\n|2|`<str>` or `<string>`|for hard coded strings: `'hello'` or \"hello\"|\n|3|`<class_ref>`|for class references:  `\\App\\User::where(...` , `User::where`|\n|4|`<full_class_ref>`|only for full references:  `\\App\\User::`|\n|5|`<until>`|to capture all the code until you reach a certain character.|\n|6|`<comment>`|for comments (it does not capture doc-blocks beginning with: /** )|\n|7|`<doc_block>`|for php doc-blocks|\n|8|`<statement>`|to capture a whole php statement.|\n|9|`<name:nam1,nam2>` or `<name>`|for method or function names. `->where` or `::where`|\n|10|`<white_space>`|for whitespace blocks|\n|11|`<bool>` or `<boolean>`|for true or false (acts case-insensitive)|\n|12|`<number>`|for numeric values|\n|13|`<cast>`|for type-casts like: `(array) $a;`|\n|14|`<int>` or `\"<integer>\"`|for integer values|\n|15|`<visibility>`|for public, protected, private|\n|16|`<float>`|for floating point number|\n|17|`\"<global_func_call:func1,func2>\"`|to detect global function calls|\n|18|`<in_between>`|to capture code within a pair of  `{...}` or `(...)` or `[...]`|\n|19|`<any>`|captures any token.|\n\n>You can also define your own keywords if needed!\n>\n>You just define a class for your new keyword and append the classpath to the end of the `Finder::$keywords[] = MyKeyword::class` property.\nJust like the default keywords.\n\n**Example:**\n\n:one:  Let's say you want to find only the \"comments\" that contain the word \"todo:\" in them.\n```php\n 'todo_comments' => [\n        'search' => '<comment>',\n        'predicate' => function($matches) {    //   <====  here we check comment has \"todo:\"\n            $comment = $matches[0]; // first placeholder value\n            $content = $comment[1]; // get its content\n            \n            return Str::contains($content, 'todo:') ? true : false;\n        },\n]\n\n```\n\n_Note_ If you do not mention the `'replace'` key it only searches and reports them to you.\n\n:two: Ok, now let's say you want to remove the \"todo:\" word from your comments:\n\n```php\n 'remove_todo_comments' => [\n    'search' => '<comment>',      //   <=== we capture any comment\n    'replace' => '<1>',\n\n    'predicate' => function($matches) {\n        $comment = $matches[0]; // first matched placeholder\n        $content = $comment[1];\n\n        return Str::contains($content, 'todo:') ? true : false;\n    },\n\n    'mutator' => function ($matches) {       //  <=== here we remove \"todo:\"\n        $matches[0][1] = str_replace('todo:', '', $matches[0][1]);\n\n        return $matches;\n    }\n]\n\n```\nConverts: ``` // todo: refactor code```\nInto: ``` // refactor code```\n\n<a name=\"mutator\" ></a>\n:three: **Mutator:**\nIn mutators, you are free to manipulate the `$matched` values as much as you need to before replacing them in the results.\nYou can also mention a static method instead of a function, like this: `[MyClass::class, 'myStaticMethod']`\n\n\n:three: Let's say you want to put the optional comma for the Lets  elements in the arrays if they are missing.\n```php\n    'enforce_optional_comma' => [\n        'search' => '<white_space>?]',\n        'replace' => ',\"<1>\"]',\n        'avoid_syntax_errors' => true,\n        'avoid_result_in' => [\n           ',,]',\n           '[,]',\n           '<var>[,]'\n       ],\n    ]\n```\nIn this case, our pattern is not very accurate and in some cases, it may result in syntax errors.\nBecause of  that, we turn on the php syntax validator to check the result, but that costs us a performance penalty!!!\nTo exclude the usage of PHP, to validate the results we have mentioned the `avoid_result_in` so that if they happen in the result it skips.\n\n- **Note**: The `?` in the \"<white_space>?\" notes this is an `optional` placeholder.\n\nIf you are curious to see a better pattern that does not need any syntax checking, try this:\n\n```\n'enforce_optional_comma' => [\n       'search' => '<1:any><2:white_space>?[<3:until_match>]',\n       'replace' => '<1><2>[<3>,]',\n       'avoid_result_in' => [\n           ',,]',\n           '[,]'\n       ],\n       'predicate' => function ($matches) {\n           $type = $matches['values'][0][0];\n\n           return $type !== T_VARIABLE && $type !== ']';\n       },\n       'post_replace' => [\n           '<1:white_space>,]' => ',<1>]'\n       ]\n],\n\n```\nThis is more complex but works much faster. (since it does not need the php syntax validator)\n\n- Here `'post_replace'` is a pattern that is applied only and only on the resulting code to refine it, and NOT on the entire file.\n\n- You can optionally comment your placeholders (as above `<1:any>`) with numbers so that you know which one corresponds to which when replaced.\n\n<a name=\"filters\" ></a>\n:four: **Filters:**\n\nCurrently, the microscope offers only two built-in filters: `is_sub_class_of` and `in_array`\n\nCan you guess what the heck this pattern is doing?!\n```php\n 'mention_query' => [\n      'search' => '<1:class_ref>::<2:name>'\n      'replace' => '<1>::query()-><2>',\n      'filters' => [\n          1 => [\n              'is_sub_class_of' => \\Illuminate\\Database\\Eloquent\\Model::class\n          ],\n          2 => [\n              'in_array' => 'where,count,find,findOrFail,findOrNew'\n          ]\n      ]\n  ]\n```\n\n\nIt converts these:\n```php\nUser::where(...)->get();\n\n\\App\\Models\\User::find(...);\n```\n\nInto these:\n```php\nUser::query()->where(...)->get();\n\n\\App\\Models\\User::query()->find(...);\n```\n\n- The filters here ensure that the captured class reference is a Laravel Model and the method name is one of the names mentioned in the list.\n\nSo it does not tamper with something like this:\n```php\nUser::all();            // The `all` method can not be preceded by `query`\n\nUserRepo::where(...);   /// UserRepo is not a model\n```\n\n- This is something that you can never do by regex.\n\n<a name=\"capturing-php-statements\" ></a>\n:five: **Capturing php \"statements\":**\n\nLet's say we want to opt into PHP v7.4 arrow functions:\n\n```php\n'fn' => [\n    'search' => 'function (<in_between>)<until>{ return <statement>; }',\n    'replace' => 'fn (<1>) => <3>',\n    'tags' => 'php74,refactor',\n]\n\n```\n\nIn this example, we have mentioned one single \"statement\" in the body of the function.\nSo if it encounters a function with two or more statements it will ignore that.\n\n```php\n$closure = function ($a) use ($b) {\n    return $a + $b;\n};\n\n// will become:\n$closure = fn($a) => $a + $hello;\n```\n\nBut this is not captured:\n```php\n$closure = function ($a) {\n    $a++;\n    return $a + $b;\n};\n```\n\n:six: **Difference between `<statement>` and `<until>;`**\n\nThey seem to be very similar but there is an important case in which you can not use `<until>;` to cover it properly!\n\n```php\n$first = $a + $b;\n\n$second = function ($a) {\n    $a++;\n\n    return $a;\n};\n```\n\nIf we define our pattern like this:\n\n```php\nreturn [\n    'pattern_name' => [\n        'search' => '<var> = <until>;',   \n    ]\n];\n```\nFor `$c = $a + $b;` they act the same way, but for the second one `\"<until>\";` will not capture the whole closure and will stop as soon as it reaches `$a++;` and that is a problem.\n\nBut if you define your pattern as: `'<var> = <statement>'` it would be smart enough to capture the correct semicolon at the end of the closure definition and the whole close would be captured.\n\n<a name=\"capturing-global\" ></a>\n:seven: **Capturing global function calls:**\n\nLet's say you want to eliminate all the `dd(...)` or `dump(...)` before pushing to production.\n```php\nreturn [\n    'remove_dd' => [\n        'search' =>  \"'<global_func_call:dd,dump>'('<in_between>');\", \n        'replace' => ''\n    ]\n];\n```\n\nThis will NOT capture cases like below:\n```php\n$this->  dd('hello');          // is technically a method call\nUser::   dd('I am static');    // is technically a static method call\nnew      dd('I am a class');  // here \"dd\" is the name of a class.\n   \n```\n\nBut will detect and remove real global `dd()` calls with whatever parameters they have received.\n\n```\ndd(                // <=== will be detected, even if the pattern above is written all in one line.\n   auth('admin')\n        ->user()->id   \n);\n    \n    \n\\dd(1);\ndd(1);\ndump(1);\n    \n```\n<a name=\"repeating-patterns\" ></a>\n:eight: **Repeating patterns:**\n\nLet's say we want to refactor:\n```php\nUser:where('name', 'John')->where('family', 'Dou')->where('age', 20)->get();\n```\n\ninto:\n```php\nUser:where([\n    'name' => 'John',\n    'family' => 'Dou',\n    'age'=> 20,\n])->get();\n```\n\nOk, how the pattern would look like then?!\n\n```php\n\"group_wheres\" => [\n       \n       'search' => '<1:class_ref>::where('<2:str>', '<3:str>')'<repeating:wheres>'->get();'\n       \n       'replace' => '<1>::where([\n           <2> => <3>,\n           \"<repeating:1:key_values>\"])->get();',\n\n       'named_patterns' => [\n           'wheres' => '->where(<str>, <str>)<white_space>?',\n           'key_values' => '<1> => <2>,<3>',\n       ]\n   ]\n```\n\nNice yeah??!\n\n>Possibilities are endless and the sky is the limit...\n\n\n\n\n<a name=\"early_returns\"></a>\n### `php artisan check:early_returns`\n\n\nThis will scan all your Psr-4 loaded classes and flattens your functions and loops by applying the early return rule.\nFor example:\n\n```php\n<?php\n\nforeach ($products as $product) {\n    if ($someCond) {\n        // A lot of code 1\n        // A lot of code 1\n        // A lot of code 1\n        // A lot of code 1\n        // A lot of code 1\n        if ($someOtherCond) {\n            // A lot more code 2\n            // A lot more code 2\n            // A lot more code 2\n            // A lot more code 2 \n            // A lot more code 2\n            //\n        } // <--- closes second if\n    } // <--- closes first if\n}\n\n```\n\nWill be discovered and converted into:\n\n```php\n<?php\n\nforeach ($products as $product) {\n    if (! $someCond) {\n        continue;\n    }\n    \n    // A lot of code 1\n    // A lot of code 1\n    // A lot of code 1\n    // A lot of code 1\n    // A lot of code 1\n\n    if (! $someOtherCond) {\n        continue;\n    }\n \n    // A lot more code 2\n    // A lot more code 2\n    // A lot more code 2\n    // A lot more code 2 \n    // A lot more code 2\n}\n\n```\n\nThe same thing will apply for functions and methods, but with `return`\n\n```php\n<?php\n\nif ($cond1) {\n    if ($cond2) {\n        ....       \n    }\n}\n\n// we get merged into:\n\nif ($cond1 && $cond2) { \n    ...  \n}\n\n```\n\n- It also supports the ruby-like if():/endif; syntax;\n\n```php\n<?php\n\nif ($var1 > 1):\n    if ($var2 > 2):\n        echo 'Hey Man';\n    endif;\nendif;\n\n// Or if you avoid putting curly braces...\nif ($var1 > 1)\n    if ($var2 > 2)\n        echo 'Hey Man';\n\n```\n\n**Although this type of refactoring is safe and is guaranteed to do the same thing as before, be careful to commit everything before trying this feature, in case of a weird bug or something.**\n\n\n<a name=\"psr4\"></a>\n### `php artisan check:psr4`\n\n- It checks for all the psr4 autoload defined in the composer.json file and goes through all the classes to have the right namespace, according to PSR-4 standard.\n- It automatically corrects namespaces (according to PSR-4 rules)\n- It also checks for references to the old namespace with the system and replaces them with the new one.\n\n\n<a name=\"generate\"></a>\n\n### `php artisan check:generate`\n\nYou make an empty file, and we fill it, based on naming conventions.\n\nIf you create an empty `.php` file which ends with `ServiceProvider.php` after running this command:\n1 - It will be filled with a boilerplate and correct Psr-4 namespace.\n2 - It will be appended to the `providers` array in the `config/app.php`\n\n\n<a name=\"imports\"></a>\n\n### `php artisan check:imports`\n\n\n- It checks all the imports (`use` statements) to be valid and reports invalid ones.\n- It autocorrects some references, no ambiguity is around the class name.\n- It can understand the laravel aliased classes so `use Request;` would be valid.\n\n\n<a name=\"bad_practices\"></a>\n\n### `php artisan check:bad_practices`\n\n\n- It detects bad practices like `env()` calls outside the config files.\n\n<a name=\"routes\"></a>\n\n### `php artisan check:routes`\n\n\n- It checks that your routes refer to valid controller classes and methods.\n- It checks all the controller methods to have valid type-hints.\n- It scans for `route()`, `redirect()->route()`, `\\Redirect::route()` to refer to valid routes.\n- It will report the public methods of controllers, which have no routes pointing to them. In other words `dead controllers` are detected.\n\n<a name=\"compact\"></a>\n\n### `php artisan check:compact`\n\n\n- In php 7.3 if you \"compact\" a non-existent variable you will get an error, so this command checks the entire project for wrong `compact()` calls and reports to you, which parameters should be removed.\n\n<a name=\"blade_queries\"></a>\n\n### `php artisan check:blade_queries`\n\n- Blade files should not contain DB queries. We should move them back into controllers and pass variables.\nThis command searches all the blade files for the `Eloquent models` and `DB` query builder and shows them if any.\n\n<a name=\"extract_blades\"></a>\n### `php artisan check:extract_blades`\n\n\n- If you want to extract a blade partial out and make it included like: `@include('myPartials.someFile')`\n\nYou can use `{!! extractBlade('myPartials.someFile') !!}` in your blade files to indicate `start/end line` and the `path/name` of the partial you intend to be made.\n\n```html\n <html>\n      \n      {!! extractBlade('myPartials.head') !!}\n          <head>...</head>\n      {!! extractBlade() !!}\n\n      \n      {!! extractBlade('myPartials.body') !!}\n          <body>...</body>\n      {!! extractBlade() !!}\n      \n </html>\n```\n\nAfter you execute `php artisan check:extract_blades` it will become:\n\n```html\n<html>\n    @include('myPartials.head')\n    @include('myPartials.body')\n</html>\n```\nAlso, it will create:\n- `resources/views/myPartials/head.blade.php`\n- `resources/views/myPartials/body.blade.php`\n\nAnd put the corresponding content in them.\n\n- It is also compatible with namespaced views in modular Laravel applications.\nSo this syntax will work: `'MyMod::myPartials.body'`\n\n<a name=\"action_comments\"></a>\n### `php artisan check:action_comments {--file=SomeFile.php}`\n\n\n- This adds annotations in the controller actions so that you know which route is pointing to the current controller action.\n- You can use the `--file=` option to narrow down the scanned files.\n\n<a name=\"route\"></a>\n### `php artisan pp:route`\n\n\n- First, you have to put this in your route file: `microscope_pretty_print_route('my.route.name');` \n- You can also pass the Controller@method syntax to the function.\n- You can call it multiple times to pretty-print multiple routes.\n\n<a name=\"views\"></a>\n### `php artisan check:views`\n\n\n- It scans your code and finds the `view()` and `View::make()` and reports if they refer to the wrong files.\n- It scans your blade files for `@include()` and `@extends()` and reports if they refer to the wrong files.\n\n\nAlso, it can detect `unused variables` which are passed into your view from the controller like this: `view('hello', [...]);`\nFor that you must open up the page in the browser and then visit the log file to see a message like this:\n```\nlocal.INFO: Laravel Microscope: The view file: welcome.index-1 at App\\Http\\Controllers\\HomeController@index has some unused variables passed to it:   \nlocal.INFO: array ('$var1' , '$var2');\n```\n\nRemember some variables are passed into your view from a `view composer` and not the controller.\nThose variables are also taken into consideration when detecting unused variables.\n\n<a name=\"events\"></a>\n### `php artisan check:events`\n\n\nFor example, consider:\n\n```php\nEvent::listen(MyEvent::class, '\\App\\Listeners\\MyListener@myMethod');\n```\n\n1 - It checks the `\\App\\Listeners\\MyListener` classpath to be valid.\n\n2 - It checks the `myMethod` method to exist on the `MyListener` class\n\n3 - It checks the `myMethod` method to have the right type-hint (if any) in its signature, for example:\n```php\npublic function myMethod(OtherEvent $e) // <---- notice type-hint here\n{\n    //\n}\n```\nThis is a valid but wrong type-hint, and will be reported to you. Very cool, isn't it ??!\n\n\n- Note that it does not matter how you are setting your event listener, \n\n1- in the `EventServiceProvider`, \n\n2- By `Event::listen` facade, \n\n3- By Subscriber class... or any other way. The error would be found. :)\n\n\n<a name=\"gates\"></a>\n### `php artisan check:gates`\n\n\nIt checks the validity of all the gates you have defined, making sure that they refer to a valid class and method.\n\nIt also checks for the policy definitions to be valid.\n\n```php\nGate::policy(User::class, 'UserPolicy@someMethod');\nGate::define('someAbility', 'UserGate@someMethod');\n```\n\n1 - It checks the `User` classpath to be valid.\n\n2 - It checks the `UserPolicy` classpath to be valid.\n\n3 - It checks the `someMethod` method to exist.\n\n<a name=\"dynamic_where\"></a>\n\n### `php artisan check:dynamic_where`\n\n\n- It looks for \"dynamic where\" methods like `whereFamilyName('...')` with `where('family_name', '...')`.\n\n<a name=\"enforce:query\"></a>\n\n### `php artisan enforce:query`\n\n\n- It calls the static `query` method on your eloquent query chains so that IDEs can understand eloquent.\n\n- For example, converts: `User::where(...` to `User::query()->where(...`\n\n<a name=\"dead_controllers\"></a>\n\n### `php artisan check:dead_controllers`\n\n\n- We can find the controllers that don't have any routes.\n\n<a name=\"generic_docblocks\"></a>\n\n### `php artisan check:generic_docblocks {--folder=app/Models} {--file=SomeFile.php}`\n\n\n- Removes Laravel's DocBlocks.\n- You can use `--folder=` or `--file=` option to narrow down the scanned folders.\n\n<a name=\"helper_functions\"></a>\n\n### `php artisan enforce:helper_functions {--folder=app/Models} {--file=SomeFile.php}`               \n\n\n- Converting Laravel facade into helper functions.\n- You can use `--folder=` or `--file=` option to narrow down the scanned folders.\n\n<a name=\"models\"></a>\n\n### `php artisan list:models {--folder=app/Models}`               \n\n\n- It searches the project and lists the model classes.\n- You can use `--folder=` option to narrow down the scanned folders.\n\n\nAnd more features will be added soon. ;)\n\n<a name=\"credits\"></a>\n## Credits\n\n- [Iman](https://github.com/imanghafoori1)\n- [All Contributors](../../contributors)\n\n<a name=\"license\"></a>\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n\n\n<a name=\"contributing\"></a>\n\n### :raising_hand: Contributing\nIf you find an issue or have a better way to do something, feel free to open an issue or a pull request.\nIf you use laravel-microscope in your open source project, create a pull request to provide its URL as a sample application in the README.md file.\n\n<a name=\"security\"></a>\n### :exclamation: Security\nIf you discover any security-related issues, please email `imanghafoori1@gmail.com` instead of using the issue tracker.\n\n<a name=\"more-from-author\"></a>\n## More from the author:\n\n### Laravel HeyMan\n\n:gem: It allows us to write expressive code to authorize, validate, and authenticate.\n\n- https://github.com/imanghafoori1/laravel-heyman\n\n\n--------------\n\n### Laravel Terminator\n\n\n :gem: A minimal yet powerful package which allows you to refactor your controllers.\n\n- https://github.com/imanghafoori1/laravel-terminator\n\n\n\n### Laravel AnyPass\n\n:gem: It allows you to login with any password in the local environment only.\n\n- https://github.com/imanghafoori1/laravel-anypass\n\n\n\n```\nA man will never fail unless he stops trying.\n\nAlbert Einstein\n```\n\n[ico-laravel]: https://img.shields.io/badge/Laravel-%E2%89%A5%205.6-ff2d20?style=flat-square&logo=laravel\n[ico-php]: https://img.shields.io/packagist/php-v/imanghafoori/laravel-microscope?color=%238892BF&style=flat-square&logo=php\n[ico-version]: https://img.shields.io/packagist/v/imanghafoori/laravel-microscope.svg?style=flat-square\n[ico-license]: https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square\n[ico-travis]: https://img.shields.io/travis/imanghafoori1/laravel-self-test/master.svg?style=flat-square&logo=travis\n[ico-scrutinizer]: https://img.shields.io/scrutinizer/coverage/g/imanghafoori1/laravel-microscope.svg?style=flat-square&logo=scrutinizer\n[ico-code-quality]: https://img.shields.io/scrutinizer/g/imanghafoori1/laravel-microscope.svg?style=flat-square&logo=scrutinizer\n[ico-downloads]: https://img.shields.io/packagist/dt/imanghafoori/laravel-microscope.svg?style=flat-square\n[ico-today-downloads]: https://img.shields.io/packagist/dd/imanghafoori/laravel-microscope.svg?style=flat-square\n\n[link-packagist]: https://packagist.org/packages/imanghafoori/laravel-microscope\n[link-travis]: https://travis-ci.org/imanghafoori1/laravel-self-test\n[link-scrutinizer]: https://scrutinizer-ci.com/g/imanghafoori1/laravel-microscope/code-structure\n[link-code-quality]: https://scrutinizer-ci.com/g/imanghafoori1/laravel-microscope\n[link-downloads]: https://packagist.org/packages/imanghafoori/laravel-microscope/stats\n[link-author]: https://github.com/imanghafoori1\n[link-contributors]: ../../contributors\n\n\n<a name=\"contributors\"></a>\n## ❤️ Contributors\n\nThis project exists thanks to all the people who contribute. [[Contributors](https://github.com/imanghafoori1/laravel-microscope/graphs/contributors)].\n<a href=\"https://github.com/imanghafoori1/laravel-microscope/graphs/contributors\"><img src=\"https://opencollective.com/laravel-microscope/contributors.svg?width=890&button=false\" /></a>\n\n## ⭐ Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=imanghafoori1/laravel-microscope&type=Date)](https://star-history.com/#imanghafoori1/laravel-microscope&Date)\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.7646484375,
          "content": "{\n    \"name\": \"imanghafoori/laravel-microscope\",\n    \"description\": \"Automatically test your laravel application\",\n    \"keywords\": [\n        \"laravel-testing\",\n        \"laravel-microscope\"\n    ],\n    \"homepage\": \"https://github.com/imanghafoori1/laravel-microscope\",\n    \"license\": \"MIT\",\n    \"type\": \"library\",\n    \"authors\": [\n        {\n            \"name\": \"Iman\",\n            \"email\": \"imanghafoori1@gmail.com\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^7.2|8.0.*|8.1.*|8.2.*|8.3.*\",\n        \"imanghafoori/composer-json\": \"^1.0.17\",\n        \"composer/class-map-generator\": \"^1.0.0\",\n        \"imanghafoori/php-abstract-filesystem\": \"^0.1.5\",\n        \"imanghafoori/php-search-replace\": \"^1.1.13\",\n        \"imanghafoori/php-token-analyzer\": \"^0.1.83\",\n        \"imanghafoori/php-imports-analyzer\": \"^1.0.6\",\n        \"imanghafoori/smart-realtime-facades\": \"^1.1.8\",\n        \"jetbrains/phpstorm-attributes\": \"1.*\",\n        \"laravel/framework\": \"5.*|6.*|7.*|8.*|9.*|10.*|11.*\"\n    },\n    \"require-dev\": {\n      \"orchestra/testbench\": \">=3.0.0\",\n      \"phpunit/phpunit\": \">=6.0.0\"\n    },\n    \"autoload\": {\n        \"files\": [\n            \"src/helpers.php\"\n        ],\n        \"psr-4\": {\n            \"Imanghafoori\\\\LaravelMicroscope\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Imanghafoori\\\\LaravelMicroscope\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"scripts\": {\n        \"test\": \"vendor/bin/phpunit\",\n        \"test-coverage\": \"vendor/bin/phpunit --coverage-html coverage\"\n    },\n    \"config\": {\n        \"sort-packages\": true\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"Imanghafoori\\\\LaravelMicroscope\\\\LaravelMicroscopeServiceProvider\"\n            ]\n        }\n    },\n    \"bin\": [\"microscope\"]\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "microscope",
          "type": "blob",
          "size": 2.1005859375,
          "content": "<?php\n\nuse Imanghafoori\\LaravelMicroscope\\ErrorReporters\\ErrorPrinter;\nuse Imanghafoori\\LaravelMicroscope\\Features\\CheckImports\\Checks\\CheckClassReferencesAreValid;\nuse Imanghafoori\\LaravelMicroscope\\Features\\CheckImports\\Handlers\\PrintWrongClassRefs;\nuse Imanghafoori\\LaravelMicroscope\\Features\\CheckImports\\Reporters\\CheckImportReporter;\nuse Imanghafoori\\LaravelMicroscope\\Features\\CheckImports\\Reporters\\Psr4Report;\nuse Imanghafoori\\LaravelMicroscope\\FileReaders\\FilePath;\nuse Imanghafoori\\LaravelMicroscope\\ForPsr4LoadedClasses;\nuse Imanghafoori\\TokenAnalyzer\\ParseUseStatement;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutput;\n\n\nif (isset($GLOBALS['_composer_autoload_path'])) {\n    define('COMPOSER_INSTALL', $GLOBALS['_composer_autoload_path']);\n\n    unset($GLOBALS['_composer_autoload_path']);\n} else {\n    foreach ([__DIR__.'/../../autoload.php', __DIR__.'/../vendor/autoload.php', __DIR__.'/vendor/autoload.php'] as $file) {\n        if (file_exists($file)) {\n            define('COMPOSER_INSTALL', $file);\n\n            break;\n        }\n    }\n\n    unset($file);\n}\n\nrequire_once base_path().'\\vendor\\autoload.php';\nrequire_once COMPOSER_INSTALL;\n\n\\Imanghafoori\\LaravelMicroscope\\Analyzers\\ComposerJson::$composer = function () {\n    $comp = FilePath::$basePath = base_path();\n\n    return \\ImanGhafoori\\ComposerJson\\ComposerJson::make($comp);\n};\nfunction base_path() {\n    if (file_exists(getcwd().'/../../../composer.json')) {\n        $comp = getcwd().'/../../..';\n    } elseif (file_exists(getcwd().'/composer.json')) {\n        // for dev\n        $comp = getcwd();\n    }\n\n    return $comp;\n}\n\nCheckClassReferencesAreValid::$wrongClassRefsHandler = PrintWrongClassRefs::class;\n$psr4Stats = ForPsr4LoadedClasses::check([CheckClassReferencesAreValid::class], function ($tokens) {\n    $imports = ParseUseStatement::parseUseStatements($tokens);\n\n    return $imports[0] ?: [$imports[1]];\n});\n\n$output = new ConsoleOutput();\nErrorPrinter::singleton($output)->logErrors();\n\n$output->writeln(CheckImportReporter::totalImportsMsg(1));\n$output->writeln(Psr4Report::printPsr4($psr4Stats));\n//$output->writeln(CheckImportReporter::printErrorsCount());\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.583984375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bootstrap=\"vendor/autoload.php\" backupGlobals=\"false\" colors=\"true\" processIsolation=\"false\" stopOnFailure=\"false\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.5/phpunit.xsd\" cacheDirectory=\".phpunit.cache\" backupStaticProperties=\"false\">\n  <testsuites>\n    <testsuite name=\"Test Suite\">\n      <directory>tests</directory>\n    </testsuite>\n  </testsuites>\n  <coverage/>\n  <source>\n    <include>\n      <directory suffix=\".php\">src/</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}