{
  "metadata": {
    "timestamp": 1736712080287,
    "page": 635,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hightman/scws",
      "stars": 1663,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.33984375,
          "content": "# Package files\n*.tar.bz2\n*.zip\n*.xdb\n*.tgz\n*.dll\n\n# Others\n\n# Files generated by autoconf/automake\nREADME\nINSTALL\nMakefile\nMakefile.in\naclocal.m4\nconfig.*\nconfigure\ndepcomp\ncompile\ninstall-sh\nmissing\nstamp-h1\nautom4te.cache\nlibtool\nltmain.sh\n*.o\n*.lo\n.libs\n.deps\n*.la\ncli/scws\ncli/scws-gen-dict\nlibscws/version.h\nweb/demo/a.php\nweb/demo/autocat/\n\n"
        },
        {
          "name": "API.md",
          "type": "blob",
          "size": 10.4189453125,
          "content": "API of LIBSCWS\n===============\n$Id$\n\n\n概述\n-----\n\nlibscws 是 SCWS 中使用 C 语言编写的函数库，没有任何外部库依赖，代码力争简洁高效，\n针对分词词典上做了一些优化。除分词外，也可以用于自行设计的 XDB 文件和 XTree 存取。\n所有的操作必须先包含以下头文件：\n\n```c\n#include <scws/scws.h>\n```\n\n\n数据类型\n---------\n\n1. **scws_t** scws 操作句柄（指针），大多数 API 的第一参数类型，通过 `scws_new()` 返回，\n   不要尝试拷贝 `struct scws_st` 数据，拷贝结果不保证可以正确工作。\n\n   ```c\n   typedef struct scws_st {\n     struct scws_st *p;\n     xdict_t d; // 词典指针，可检测是否为 NULL 来判断是否加载成功\n     rule_t r; // 规则集指针，可检测是否为 NULL 来判断是否加载成功\n     unsigned char *mblen;\n     unsigned int mode;\n     unsigned char *txt;\n     int len;\n     int off;\n     int wend;\n     scws_res_t res0; // scws_res_t 解释见后面\n     scws_res_t res1;\n     word_t **wmap;\n     struct scws_zchar *zmap;\n   } scws_st, *scws_t;\n   ```\n\n2. **scws_res_t** scws 分词结果集，单链表结构，通过 `scws_get_result()` 返回，\n   每次分词返回的结果集次数是不定的，须循环调用直到返回 `NULL`。\n\n   ```c\n   typedef struct scws_result *scws_res_t;\n   struct scws_result {\n     int off;  // 该词在原文本中的偏移\n     float idf; // 该词的 idf 值\n     unsigned char len; // 该词的长度\n     char attr[3]; // 词性\n     scws_res_t next; // 下一个词\n   };\n   ```\n\n3. **scws_top_t** 高频关键词统计集，简称“词表集”，这是 scws 中统计调用时返回的结构，也是一个单链表结构。\n\n   ```c\n   typedef struct scws_topword *scws_top_t;\n   struct scws_topword\n   {\n     char *word; // 词的字符串指针\n     float weight; // 统计权重\n     short times; // 出现次数\n     char attr[2]; // 词性，注意只有2字节，不保证 ’\\0‘ 结尾\n     scws_top_t next;　// 下一个\n   };\n   ```\n\n函数详解\n---------\n\n1. `scws_t scws_new()` 分配或初始化与 scws 系列操作的 `scws_st` 对象。该函数将自动分配、初始化、并返回新对象的指针。\n   只能通过调用 `scws_free()` 来释放该对象。\n\n   > **返回值** 初始化的 scws_st * （即 scws_t） 句柄。  \n   > **错误** 在内存不足的情况下，返回NULL。\n\n2. `scws_t scws_fork(scws_t p)` 在已有 scws 对象上产生一个分支，可以独立用于某个线程分词，但它继承并共享父对象词典、\n   规则集资源。同样需要调用 `scws_free()` 来释放对象。在该分支对象上重设词典、规则集不会影响父对象及其它分支。\n \n   > **参数 p** 现有的 scws 对象（也可以是分支）  \n   > **返回值** 克隆出来的分支 scws_st * (scws_t) 句柄。  \n   > **错误** 在内存不足的情况下，返回NULL。  \n   > **注意** 主要用于多线程环境，以便共享内存词典、规则集。在 v1.2.0 及以前，分支对象设置词典规则集会影响到原对象及其它兄弟分支。\n\n3. `void scws_free(scws_t s)` 释放 scws 操作句柄及对象内容，同时也会释放已经加载的词典和规则。\n\n4. `void scws_set_charset(scws_t s, const char *cs)` 设定当前 scws 所使用的字符集。\n\n   > **参数 cs** 新指定的字符集。若无此调用则系统缺省使用 gbk，还支持 utf8，指定字符集时参数的大小写不敏感。  \n   > **错误** 若指定的字符集不存在，则会自动使用 gbk 字符集替代。\n\n5. `int scws_add_dict(scws_t s, const char *fpath, int mode)` 添加词典文件到当前 scws 对象。\n\n   > **参数 fpath** 词典的文件路径，词典格式是 XDB或TXT 格式。  \n   > **参数 mode** 有3种值，分别为预定义的：\n   >\n   >   - SCWS_XDICT_TXT  表示要读取的词典文件是文本格式，可以和后2项结合用\n   >   - SCWS_XDICT_XDB  表示直接读取 xdb 文件\n   >   - SCWS_XDICT_MEM  表示将 xdb 文件全部加载到内存中，以 XTree 结构存放，可用异或结合另外2个使用。\n   >\n   >   具体用哪种方式需要根据自己的实际应用来决定。当使用本库做为守护进程时推荐使用 mem 方式，\n   >   当只是嵌入调用时应该使用 xdb 方式，将 xdb 文件加载进内存不仅占用了比较多的内存，\n   >   而且也需要一定的时间（35万条数据约需要0.3~0.5秒左右）。\n   >\n   > **返回值** 成功返回 0，失败返回 -1。  \n   > **注意** 若此前 scws 句柄已经加载过词典，则新加入的词典具有更高的优先权。\n\n6. `int scws_set_dict(scws_t s, const char *fpath, int mode)` 清除并设定当前 scws 操作所有的词典文件。\n\n   > **参数 fpath** 词典的文件路径，词典格式是 XDB或TXT 格式。  \n   > **参数 mode** 有3种值，参见 `scws_add_dict`。  \n   > **返回值** 成功返回 0，失败返回 -1。  \n   > **注意** 若此前 scws 句柄已经加载过词典，则此调用会先释放已经加载的全部词典。和 `scws_add_dict` 的区别在于会覆盖已有词典。\n\n7. `void scws_set_rule(scws_t s, const char *fpath)` 设定规则集文件。\n\n   > **参数 fpath** 规则集文件的路径。若此前 scws 句柄已经加载过规则集，则此调用会先释放已经加载的规则集。  \n   > **错误** 加载失败，scws_t 结构中的 r 元素为 NULL，即通过 s->r == NULL 与否来判断加载的失败与成功。  \n   > **注意** 规则集定义了一些新词自动识别规则，包括常见的人名、地区、数字年代等。规则编写方法另行参考其它部分。  \n\n8. `void scws_set_ignore(scws_t s, int yes)` 设定分词结果是否忽略所有的标点等特殊符号（不会忽略\\r和\\n）。\n\n   > **参数 yes** 1 表示忽略，0 表示不忽略，缺省情况为不忽略。\n\n9. `void scws_set_multi(scws_t s, int mode)` 设定分词执行时是否执行针对长词复合切分。（例：“中国人”分为“中国”、“人”、“中国人”）。\n\n   > **参数 mode** 复合分词法的级别，缺省不复合分词。取值由下面几个常量异或组合：\n   >\n   >   - SCWS_MULTI_SHORT   短词\n   >   - SCWS_MULTI_DUALITY 二元（将相邻的2个单字组合成一个词）\n   >   - SCWS_MULTI_ZMAIN   重要单字\n   >   - SCWS_MULTI_ZALL    全部单字\n\n10. `void scws_set_duality(scws_t s, int yes)` 设定是否将闲散文字自动以二字分词法聚合。\n\n   > **参数 yes** 如果为 1 表示执行二分聚合，0 表示不处理，缺省为 0。  \n\n11. `void scws_set_debug(scws_t s, int yes)` 设定分词时对于疑难多路径综合分词时，是否打印出各条路径的情况。\n\n   > **注意** 打印使用的是 `fprintf(stderr, ...)` 故不要随便用，并且只有编译时加入 --enable-debug 选项才有效。\n\n12. `void scws_send_text(scws_t s, const char *text, int len)` 设定要切分的文本数据。\n\n   > **参数 text** 文本字符串指针。  \n   > **参数 len** 文本的长度。  \n   > **注意** 该函数可安全用于二进制数据，不会因为字符串中包括 \\0 而停止切分。\n   > 这个函数应在 `scws_get_result()` 和 `scws_get_tops()` 之前调用。\n   >\n   > scws 结构内部维护着该字符串的指针和相应的偏移及长度，连续调用后会覆盖之前的设定；故不应在多次的 scws_get_result \n   > 循环中再调用 scws_send_text() 以免出错。\n\n13. `scws_res_t scws_get_result(scws_t s)` 取回一系列分词结果集。\n\n   > **返回值** 结果集链表的头部指针，该函数必须循环调用，当返回值为 NULL 时才表示分词结束。  \n   > **注意** 该分词结果必须调用 `scws_free_result()` 释放，参数为返回的链表头指针。\n\n14. `void scws_free_result(scws_res_t result)` 根据结果集的链表头释放结果集。\n\n15. `scws_top_t scws_get_tops(scws_t s, int limit, char *xattr)` 返回指定的关键词表统计集，系统会自动根据词语出现的次数及其 idf 值计算排名。\n\n   > **参数 limit** 指定取回数据的最大条数，若传入值为0或负数，则自动重设为10。  \n   > **参数 xattr** 用来描述要排除或参与的统计词汇词性，多个词性之间用逗号隔开。\n   > 当以~开头时表示统计结果中不包含这些词性，否则表示必须包含，传入 NULL 表示统计全部词性。  \n   > **返回值** 词表集链表的头指针，该词表集必须调用 `scws_free_tops()` 释放。\n\n16. `void scws_free_tops(scws_top_t tops)` 根据词表集的链表头释放词表集。\n\n\n17. `int scws_has_word(scws_t s, char *xattr)` 判断text中是包括指定的词性的词汇。\n\n   > **参数 xattr** 用来描述要排除或参与的统计词汇词性，多个词性之间用逗号隔开。\n   > 当以~开头时表示统计结果中不包含这些词性，否则表示必须包含，传入 NULL 表示统计全部词性。  \n   > **返回值** 如果有返回 1 没有则返回 0。\n\n18. `scws_top_t scws_get_words(scws_t s, char *xattr)` 返回指定词性的关键词表，系统会根据词语出现的先后插入列表。\n\n   > **参数 xattr** 用来描述要排除或参与的统计词汇词性，多个词性之间用逗号隔开。\n   > 当以~开头时表示统计结果中不包含这些词性，否则表示必须包含，传入 NULL 表示统计全部词性。  \n   > **返回值** 返回词表集链表的头指针，该词表集必须调用 `scws_free_tops()` 释放。\n\n\n\n实例代码\n----------\n\n下面是一个简单的分词实例代码，假设您的 scws 已安装至 `/usr/local` 目录，下面是源码：\n\n```c\n#include <stdio.h>\n#include <scws/scws.h>\n#define SCWS_PREFIX     \"/usr/local\"\n\nmain()\n{\n  scws_t s;\n  scws_res_t res, cur;\n  char *text = \"Hello, 我名字叫李那曲是一个中国人, 我有时买Q币来玩, 我还听说过C#语言\";\n\n  if (!(s = scws_new())) {\n    printf(\"ERROR: cann't init the scws!\\n\");\n    exit(-1);\n  }\n  scws_set_charset(s, \"utf8\");\n  scws_set_dict(s, \"/usr/local/scws/etc/dict.utf8.xdb\", SCWS_XDICT_XDB);\n  scws_set_rule(s, \"/usr/local/scws/etc/rules.utf8.ini\");\n\n  scws_send_text(s, text, strlen(text));\n  while (res = cur = scws_get_result(s))\n  {\n    while (cur != NULL)\n    {\n      printf(\"WORD: %.*s/%s (IDF = %4.2f)\\n\", cur->len, text+cur->off, cur->attr, cur->idf);\n      cur = cur->next;\n    }\n    scws_free_result(res);\n  }\n  scws_free(s);\n}\n```\n\n将以上代码复制保存为 test.c 然后执行下面指令编译并测试运行：\n\n```\ngcc -o test -I/usr/local/include -L/usr/local/lib test.c -lscws\n./test\n```\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.0751953125,
          "content": "Authors of SCWS\n================\n$Id$\n\n1. hightman <hightman2@yahoo.com.cn>\n\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.6884765625,
          "content": "SCWS LICENSE\n============\n$Id$\n\nSCWS 是一个免费开源的中文分词组件，在以下描述的 BSD 许可证的条款下发布。\nCopyright (C) 2007-2013，著作权由 hightman 所有，著作权人保留一切相关权利。\n\nCopyright (C) 2010-2013 by hightman\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n * Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in\n   the documentation and/or other materials provided with the \n   distribution.\n * Neither the name of hightman nor the names of its contributors \n   may be used to endorse or promote products derived from this \n   software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE \nCOPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\nANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \nPOSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 7.115234375,
          "content": "ChangeLog.old\n================\n$Id$\n\n======================================================================\n======== 自 1.2.1 起本文件不再更新, 更新日志见 git 提交日志 ==========\n======================================================================\n\n2012-3-29\n--------------\n* 版本号升级为 1.2.0，同时提供包含 5.4.x 在内的更多的 win32 扩展 dll\n* 修正 PHP 扩展代码在 php-5.4.x WIN32 平台编译通不过的问题\n\n2012-3-20\n--------------\n* libscws 增加 scws_fork() 接口用于产生分支实例用于多线程目的，但和父\n* 实例保持共享同一个词典、规则集。注意：对 fork 实例调用词典规则集加载\n* 将直接作用于父实例，如果提前销毁父实例再调用 fork 实例分词则会导致内存错误。\n\n2012-3-5\n--------------\n* 修改 phpext/ 代码以兼容 PHP5.4 编译\n* 修正 phpext 中 scws_get_tops 的 limit 参数少于 10 自动为 10 的问题\n\n2011-12-26\n--------------\n* 明确使用 BSD 协议发布新版本\n\n2011-12-24\n--------------\n* 版本号升级为 1.1.9 择日编译好 win32 的 dll 正式释出\n\n2011-12-23\n--------------\n* 深度优化复合分词中的 SCWS_MULTI_SHORT 选项使之更为合理符合全文检索的需求\n* 测试脚本中自动加载当前目录的 dict_user.txt 作为自定义词典方便调试\n\n2011-10-26\n--------------\n* 修正 scws.c 中 __PARSE_XATTR__ 的 bug 导致 scws_get_tops 和 scws_get_words中 xattr 参数表现不正确的问题\n\n2011-08-04\n--------------\n* 在 scws.c 中移除关于 jabberd2s10 的注释, 仅仅是早期的 pool.c 参考\n\n2011-07-31\n--------------\n* 给一些可独立使用的 .h 文件添加 c++ 的 extern \"C\" 标记 xdb.h,xdict.h,xtree.h,pool.h,darry.h\n\n2011-07-30\n--------------\n* 修改英语专有名词的识别方式, 原先 X.Y.Z 必须字母全大写，现也允许小写\n* 开始提供 VC9 编译的 thread-safe 版本的 php_scws.dll\n* 版本号升为 1.1.8\t\t\t\t\n\n2011-06-30\n--------------\n* 修改 congiure.in 在 ---enable-developer 选项的处理方式，不覆盖预设的 CFLAGS\n\n2011-06-03\n--------------\n* 改变数字字母单独成词时的规则，当其中同时包含2个连续字母以及2个连续数字时强制拆分。\n  例：原先单独的  iso9001 是整词，新规则切为 iso+9001 而 i9001 则保持不变仍为。这样做更有利于全文检索。\n\n2011-05-21\n--------------\n* 删除 __PARSE_XATTR__ 宏中企图修改 xattr 的内容的作法, 当 xattr 为常量字符串时会出错\n* 版本号升为 1.1.7\n\n2011-05-16\n--------------\n* 增加一些 scws_test 的案例，调整 config.h 的包含方式移入 .c 文件而非 .h 文件.\n\n2011-05-07\n--------------\n* 修正 scws_has_word() 的一处内存汇露,(感谢lauxinz)\n\n2011-04-21\n--------------\n* 修改调试模式的编译选项，去除-O2避免源码和代码无法对应。 (感谢lauxinz)\n\n2011-04-19\n--------------\n* 修改带小数点数字的识别规则，避免将IP地址切分成2个浮点数;\n* 修改 - 的切分规则, 当减号出现在字母之间时视为连字符不切开(当开启复合二分时能再细分);\n* 修改 _ 作为密切的连字符, 出现在字母数字之间时均不切开(当开启复合二分时能再细分);\n* 版本号升级为 1.1.6\n\n2011-01-17\n--------------\n* 修改 scws.c 使得夹在中文中间的 1~2 英文字符词性能识别为 en 而不是 un\n* 修改数字分词后能自动把最后的 % 合入词汇，而不是单留 %, 如 33% 会当作一个词而不是 33 + %\n\n2010-12-31\n--------------\n* 版本号升为 1.1.5 \n* 修正 xdb.c 270 行 + rec.value.len 误写成 + len 引发的重大问题。\n\n2010-12-30\n--------------\n* 版本号升为 1.1.4\n* 修正 xdb.c 中存在的一处缓冲区溢出, 感谢论坛网友 hovea.\n\n2010-10-25\n--------------\n* 修正 phpext/ 中 scws_get_result() 参数解析里多了一个z 的问题，感谢\n* 网友（阿男）告知\n\n2010-10-23\n--------------\n* 修正 scws.c 中某些字符在ignore symbol设置下无效的问题\n\n2010-09-07\n--------------\n* removed bad word term from tool/dict/w.txt (民医院)\n\n2010-07-10\n--------------\n* 版本升为 1.1.3, 把 cli/ 的词典程序改为 gen-scws-dict; 重写 phpext/ 中的部分\n* zend API, 统一采用 zend_parse_parameters()  [win32的DLL同步更新]\n\n2010-05-23\n--------------\n* 修正切分 \"完美的东西\" 的错误，在 rules[.??].ini 中加入 a + u(1) = 5 即可\n\n2010-05-09\n--------------\n* 修正一个小错误, 当词典不加载到内存时返回的 (word_st)->flag 带有的 MALLOCED 标志和 SCWS_ZFLAG_SYMBOL 冲突\n* 导致后方面 SCWS_NO_RULE1() 判断时发生不一致的错误. 版本号升为: 1.1.2\n\n2010-03-04\n--------------\n* 修正内存泄露的重大bug, 版本号升级为 1.1.1, 增加 for php5.3 的win32(dll,threadsafe,x86) \n  bug 位于 xdict.h 中的\n  #define SCWS_WORD_MALLOCED 0x100\n  只要将 0x100 改变 0x80 即可，因为 struct scws_word 中定义的 flag 为 unsigned char 即 8bit, \n  容不下 0x100 导致，所有的 ->flag |= SCWS_WORD_MALLOCED 失效，以至于在 scws.c \n  中无法正确的释放这些内存。\n\n2010-01-29\n--------------\n* 完成下列部分, 版本: 1.1.0\n* 修正 win32 编译环境(vc6) 将 scws-1.1.x/ 放到与 php-4.4.9 或 php-5.2.12 源码目录同级目录中编译\n\n2010-01-28\n--------------\n* 这里暂列一些 TODO for scws 1.1.0\n  +1) 开启用户动态词汇添加与修改功能, 指定 txt 文件, 增加词性'!'表示删除该词, '*'表示非法词汇\n      临时文件在 scws 层读入并处理，转换成 .xdb 文件暂存于 system_Temp/ 目录中\n      增加 scws_add_dict() 允许多次调用于 set_dict后, set_dict则为清除之前的所有词典.\n      add_dict, set_dict 返回值改为 int (0:成功,-1失败), add_dict越后面的越优先用\n  -2) 调整 rules 算法，允许组合词做 multi 切分（比如: 三百五十六 也可以细分）<未实现>\n  -3) 增加允许半角/全角数词和量词的合成规则 (24吨) <未实现>\n  +4) 增加 api: scws_has_word(char *attr); scws_get_words(char *attr); attr参数同get_top_words\n  +5) 这些改动完成后 scws 版本号升级为 1.1.0\n  +6) 调整 gen_dict.c 允许定义词典时和txt字典格式兼容\n\n2009-07-31\n--------------\n* 修正一个隐藏的小BUG，当紧贴在中文字符后的1~2个字母字符返回时长度多1\n* 增加phpext对 php5.3 的支持, 版本号升级为 1.0.4\n\n2009-05-26\n--------------\n* 整合yanbin提供的win32编译移值及工程文件放入 phpext 发布包, 方便同步最新的 win32 版本\n* 同时将版本号升级为 1.0.3\n\n2009-05-23\n--------------\n* 加入支持数字字母混合长词自动按字母数字再拆分并保护单字字符, \n* 为数码产品型号做准备! (需开启 scws_multi_duality)\n\n2009-05-14\n--------------\n* 加入结合语义词性的分词功能（超简单的，很粗），初步解决已发现的分词bug\n* 修正和完善 词典更新工具，方便加入新词条。\n* 版本号升为 1.0.2,\n\n2008-12-20\n--------------\n* 移植纯 php 实现的 pscws4, 找回并修订 pscws23 位于 tools/php4\n  将 dict_cht_gbk.txt 改名为 dict_cht_utf8.txt\n* 修正 libscws/scws.c 中的 2处小错误(无重要影响)\n* 版本号升为 1.0.1\n\n[2008-3-8]\n--------------\n* scws-1.0.0.tar.gz 发布\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 0.5361328125,
          "content": "# Automake file on top directory\n# $Id$\n\nAUTOMAKE_OPTIONS = 1.5 subdir-objects\n\nSUBDIRS = . libscws cli etc\n\nDIST_SUBDIRS = libscws cli etc\n\nEXTRA_DIST = API.md phpext win32\n\nUNISON_OPT = -auto -batch -prefer newer -terse -times -logfile /dev/null\n\t\ndict:\n\tcd etc && make dict\n\ndist-dict:\n\tcd etc && make dist-dict\n\ndist-hook:\n#\t-rm -f $(distdir)/libscws/version.h\n\nsync-web:\n\tunison ./web ssh://xunsearch/web/scws $(UNISON_OPT)\n\ndist-web: dist-bzip2\n\tmv -f $(distdir).tar.bz2 web/down\n\tcd etc && tar czf ../web/down/rules.tgz *.ini\n\tmake sync-web\n\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 0.07421875,
          "content": "NEWS of SCWS\n=============\n\n将代码管理迁移到 git/github (2013-1-7)\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.3828125,
          "content": "README of SCWS\n===============\n$Id$\n\nSCWS 简介\n---------\n\n[SCWS][1] 是 Simple Chinese Word Segmentation 的首字母缩写（即：简易中文分词系统）。\n这是一套基于词频词典的机械式中文分词引擎，它能将一整段的中文文本基本正确地切分成词。词是\n中文的最小语素单位，但在书写时并不像英语会在词之间用空格分开，所以如何准确并快速分词一直\n是中文分词的攻关难点。\n\nSCWS 采用纯 C 语言开发，不依赖任何外部库函数，可直接使用动态链接库嵌入应用程序，支持的\n中文编码包括 `GBK`、`UTF-8` 等。此外还提供了 [PHP][2] 扩展模块，可在 PHP 中快速\n而方便地使用分词功能。\n\n分词算法上并无太多创新成分，采用的是自己采集的词频词典，并辅以一定的专有名称，人名，地名，\n数字年代等规则识别来达到基本分词，经小范围测试准确率在 90% ~ 95% 之间，基本上能满足一些\n小型搜索引擎、关键字提取等场合运用。首次雏形版本发布于 2005 年底。\n\nSCWS 由 [hightman][8] 开发，并以 BSD 许可协议开源发布 ，参见 [COPYING][7]。\n\n\nPHP 分词演示\n------------\n\n* _GBK_ <http://www.xunsearch.com/scws/demo/v4.php>\n* _UTF-8_ <http://www.xunsearch.com/scws/demo/v48.php>\n* _繁体中文_ <http://www.xunsearch.com/scws/demo/v48.cht.php>\n\n\n安装\n-----\n\n目前 scws 只提供源码包，和大多数 GNU 软件的编译安装步骤一样。下面我们以 `Linux` 系统为例，\n要求装有 `gcc` 编译器。`Windows` 上则建议用 [cygwin][3] 或 [mingw][4] 环境编译。\n\n1. 取得 scws 源码并解压到当前目录\n   ```\n   wget -q -O - http://www.xunsearch.com/scws/down/scws-1.2.1.tar.bz2 | tar xjf -\n   ```\n\n2. 进入源码目录配置和编译\n   ```\n   cd scws-1.2.1 ; ./configure ; make install\n   ```\n   > 注意：这是以默认方式安装到 `/usr/local` 目录。详细配置参数执行 `./configure --help` 查看。\n\n\nPHP 扩展\n---------\n\n在 UNIX 类的系统上，请直接从源码方式编译安装 PHP 扩展；对于 windows 系统，请直接下载我们编译好的\n`php_scws.dll` 即可。\n\n假定您已经将 scws 安装到 `$prefix` 目录，还要求系统环境装有 autoconf automake 及 phpize 工具。\n\n1. 进入源码目录的 phpext/ 并执行 `phpize` (位于 php 安装目录下的 bin 目录里)\n\n2. 执行 `configure` 进行配置和基础检测，假定您的 php 安装在 `$php_prefix` 目录\n   ```\n   ./configure --with-scws=/usr/local --with-php-config=$php_prefix/bin/php-config\n   ```\n\n3. 先编译然后以 `root` 身份安装\n   ```\n   make\n   sudo make install\n   ```\n\n4. 在 php.ini 中加入以下内容\n   ```\n   [scws]\n   ; 注意请检查 php.ini 中的 extension_dir 的设定值是否正确, 否则请将 extension_dir 设为空，\n   ; 再把 extension = scws.so 或 php_scws.dll 指定绝对路径。\n   extension = scws.so\n   scws.default.charset = gbk\n   scws.default.fpath = $prefix/etc\n   ```\n\n5. 命令行下执行 `php -m` 就能看到 scws 了，phpinfo() 也会包含关于 scws 的信息。\n\n6. windows 下的 php 扩展是采用 dll 库文件。我们已预编译若干个版本，采用 zip 压缩位于\n   `phpext/win32/php_scws-1.2.1-win32.zip`，请直接解压后选择相应版本的 `php_scws.dll`。\n   将它复制到 PHP 的扩展目录中（通常是 extensions 或 ext 目录），然后参考上面的方式修改 `php.ini`。\n\n7. 关于 PHP 扩展的示例用法及开发参考，请参见 [phpext/README.md][6]。\n\n\n配套工具用法\n------------\n\n1. **$prefix/bin/scws** 这是分词的命令行工具，执行 scws -h 可以看到详细帮助说明。\n   ```\n   Usage: scws [options] [[-i] input] [[-o] output]\n   ```\n   * _-i string|file_ 要切分的字符串或文件，如不指定则程序自动读取标准输入，每输入一行执行一次分词\n   * _-o file_ 切分结果输出保存的文件路径，若不指定直接输出到屏幕\n   * _-c charset_ 指定分词的字符集，默认是 gbk，可选 utf8\n   * _-r file_ 指定规则集文件（规则集用于数词、数字、专有名字、人名的识别）\n   * _-d file[:file2[:...]]_ 指定词典文件路径（XDB格式，请在 -c 之后使用）\n     ```\n     自 1.1.0 起，支持多词典同时载入，也支持纯文本词典（必须是.txt结尾），多词典路径之间用冒号(:)隔开，\n     排在越后面的词典优先级越高。\n     \n     文本词典的数据格式参见 scws-gen-dict 所用的格式，但更宽松一些，允许用不定量的空格分开，只有<词>是必备项目，\n     其它数据可有可无，当词性标注为“!”（叹号）时表示该词作废，即使在较低优先级的词库中存在该词也将作废。\n     ```\n   * _-M level_ 复合分词的级别：1~15，按位异或的 1|2|4|8 依次表示 短词|二元|主要字|全部字，缺省不复合分词。\n   * _-I_ 输出结果忽略跳过所有的标点符号\n   * _-A_ 显示词性\n   * _-E_ 将 xdb 词典读入内存 xtree 结构 (如果切分的文件很大才需要)\n   * _-N_ 不显示切分时间和提示\n   * _-D_ debug 模式 (很少用，需要编译时打开 --enable-debug)\n   * _-U_ 将闲散单字自动调用二分法结合\n   * _-t num_ 取得前 num 个高频词\n   * _-a [~]attr1[,attr2[,...]]_ 只显示某些词性的词，加~表示过滤该词性的词，多个词性之间用逗号分隔\n   * _-v_ 查看版本\n\n2. **$prefix/bin/scws-gen-dict** 词典转换工具\n   ```\n   Usage: scws-gen-dict [options] [-i] dict.txt [-o] dict.xdb\n   ```\n   * _-c charset_ 指定字符集，默认为 gbk，可选 utf8\n   * _-i file_ 文本文件(txt)，默认为 dict.txt\n   * _-o file_ 输出 xdb 文件的路径，默认为 dict.xdb\n   * _-p num_ 指定 XDB 结构 HASH 质数（通常不需要）\n   * _-U_ 反向解压，将输入的 xdb 文件转换为 txt 格式输出 （TODO）\n\n   > 文本词典格式为每行一个词，各行由 4 个字段组成，字段之间用若干个空格或制表符(\\t)分隔。\n   > 含义（其中只有 <词> 是必须提供的），`#` 开头的行视为注释忽略不计：\n   > ```\n   > #<词>  <词频(TF)>  <词重(IDF)>  <词性(北大标注)>\n   > 新词条 12.0        2.2          n\n   > ```\n\nlibscws API\n-------------\n\n这是整合 scws 到其它应和程序的接口说明，详见 [API][5]。\n\n\nrules.ini 规则集\n-----------------\n\n（暂缺）\n\n\n关于 XDB 词典\n--------------\n\n我们的词典使用的是自行开发的专用 XDB 格式，免费提供的词典是通用的互联网信息词汇集，\n收录了大约 28 万个词。\n\n如果您需要定制词典以作特殊用途，请与我们联系，可能会视情况进行收费。\n\n\n性能指标\n---------\n\n在 FreeBSD 6.2 系统，单核单 CPU 至强 3.0G 的服务器上，测试长度为 80,535 的文本。\n用附带的命令行工具耗时将约 0.17 秒，若改用 php 扩展方式调用，则耗时约为 0.65 秒。\n\n分词精度 95.60%，召回率 90.51% (F-1: 0.93)\n\n\n其它\n-------\n\n该文档由 hightman 于 2007/06/08 首次编写，同时在不断修订中！\n\n项目主页：<http://www.xunsearch.com/scws> 我的邮箱：hightman2@yahoo.com.cn\n\n\n[1]: http://www.xunsearch.com/scws\n[2]: http://www.php.net\n[3]: http://www.cygwin.com\n[4]: http://www.mingw.org\n[5]: https://github.com/hightman/scws/blob/master/API.md\n[6]: https://github.com/hightman/scws/blob/master/phpext/README.md\n[7]: https://github.com/hightman/scws/blob/master/COPYING\n[8]: http://www.hightman.cn\n\n"
        },
        {
          "name": "acprep",
          "type": "blob",
          "size": 1.1279296875,
          "content": "#!/bin/sh\n# $Id: $\n# This file is intended for developers only and is not included into dist\n# Please RUN this AFTER cvs checkout/update\n# This will re-create all needed stuff\n# (aclocal.m4, config.h.in, Makefile.in, configure)\n# or you may end up with old versions of that.\n#\n\n# libtoolize\nLIBTOOLIZE=libtoolize\nSYSNAME=`uname`\nif [ \"x$SYSNAME\" = \"xDarwin\" ] ; then\n\tLIBTOOLIZE=glibtoolize\nfi\n\n# clean\nif test \"x-$1\" = \"x---clean\" ; then\n\techo \"Cleaning ...\"\n\tif test -f Makefile ; then\n\t  make clean\n    fi\n\tfind . -name Makefile -exec rm -f {} \\;\n\tfind . -name Makefile.in -exec rm -f {} \\;\n\trm -f aclocal.m4 config.* configure depcomp install-sh missing stamp-h1\n\trm -rf ltmain.sh libtool autom4te.cache\n\trm -f README INSTALL libscws/version.h\n\techo \"OK, done!\"\n\texit\nfi\n\n# init\nln -sf README.md README\nfor cmd in aclocal autoheader \\\n\t\t\"$LIBTOOLIZE --copy --force\" \\\n\t\t\"automake --add-missing --copy --force\" autoconf ; do\n\techo \"Running command: $cmd ...\"\n\t$cmd 2>&1 | grep -i -v warning\ndone\necho\necho \"--==*** You can run ./configure now ***==--\";\necho -n \"               Happy hacking\";\nif test -n $USER; then\n\techo -n \", $USER\";\nfi\necho !\necho\n\n"
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 2.6015625,
          "content": "#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n# scws-1.x.x configure - modified by hightman\n\nAC_PREREQ([2.68])\nAC_INIT([scws], [1.2.3], [http://www.xunsearch.com/scws])\n\n# init automake\nAM_INIT_AUTOMAKE\n\n# copy right\nAC_COPYRIGHT([Copyright (C)2007-2016, hightman\nThis package maybe copied, distributed and modified under\nthe terms of my License; see COPYING for more details])\n\n# sorce code tree\n#AC_CONFIG_SUBDIRS([libscws cli])\nAC_CONFIG_SRCDIR([cli/gen_dict.c])\nAC_CONFIG_HEADERS([config.h])\n\n# Checks for programs.\n#AC_PROG_AWK\nAC_PROG_CC\nAC_PROG_SED\nAC_PROG_INSTALL\nAC_PROG_LN_S\nAC_PROG_MAKE_SET\nAC_DISABLE_STATIC\nAC_PROG_LIBTOOL\n\n# libtool\nLIBTOOL=\"$LIBTOOL --preserve-dup-deps\"\nAC_SUBST(LIBTOOL)\n\n# libtool compile\nSHARED_LIB_VERSION=2:0:1\nAC_SUBST(SHARED_LIB_VERSION)\n\n# debug mode\nAC_ARG_ENABLE(debug, \n\tAC_HELP_STRING([--enable-debug], [Compile with more warnings and debugging symbols]),\n\t[\n\t\tenable_debug=yes\n\t\tAC_DEFINE(DEBUG,,[enable debug mode])\n\t], [ \n\t\tenable_debug=no \n\t]\n)\n\nif test \"$enable_debug\" = \"no\" ; then\n  tmp_cflags=`echo $CFLAGS | sed 's/-O//g'`\t\n  if test \"$tmp_cflags\" = \"$CFLAGS\"; then  CFLAGS=\"$CFLAGS -O2\"; fi\nelse\n  tmp_cflags=`echo $CFLAGS | sed 's/-g//g'`\t\n  if test \"$tmp_cflags\" = \"$CFLAGS\"; then  CFLAGS=\"$CFLAGS -g\"; fi\nfi\n\n# name rule\nAC_ARG_ENABLE(namerule,\n\tAC_HELP_STRING([--enable-namerule], [Compile with pepole and road name recognition]),\n\t[ AC_DEFINE(HAVE_NAME_RULE, 1,[enable people and road name recognition]) ]\n)\n\n# Checks for libraries.\nAC_CHECK_LIB(m, logf, [], [ AC_MSG_ERROR([math lib not found]) ])\n\n# Checks for header files.\nAC_CHECK_HEADERS([fcntl.h netinet/in.h math.h stdlib.h string.h sys/file.h sys/param.h sys/time.h unistd.h])\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_C_CONST\nAC_C_INLINE\nAC_HEADER_TIME\nAC_CHECK_SIZEOF(int, 4, [], [ AC_MSG_ERROR(sizeof(int) != 4) ])\n#AC_CHECK_SIZEOF(char *, 4, [], [ AC_MSG_ERROR(sizeof(char *) != 4) ])\nAC_CHECK_SIZEOF(float, 4, [], [ AC_MSG_ERROR(sizeof(float) != 4) ])\n\n# check for struct_flock\nAC_CACHE_CHECK(for struct flock, ac_cv_struct_flock,\n\tAC_TRY_COMPILE([\n#include <unistd.h>\n#include <fcntl.h>\n\t], [\n\t\tstruct flock x; \n\t], [\n\t\tAC_DEFINE(HAVE_STRUCT_FLOCK, 1, [whether you have struct flock])\n\t], [])\n)\n\n# Checks for library functions.\nAC_FUNC_LSTAT\nAC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK\nAC_FUNC_MMAP\nAC_FUNC_MEMCMP\nAC_CHECK_FUNCS([flock gettimeofday malloc memset munmap pow realpath strcasecmp strchr strdup strrchr strndup strtok_r])\n\nAC_CONFIG_FILES([Makefile cli/Makefile etc/Makefile libscws/Makefile libscws/version.h])\nAC_OUTPUT\n"
        },
        {
          "name": "dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "libscws",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpext",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        },
        {
          "name": "win32",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}