{
  "metadata": {
    "timestamp": 1736712220076,
    "page": 934,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "reactphp/socket",
      "stars": 1228,
      "defaultBranch": "3.x",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1884765625,
          "content": "/.gitattributes export-ignore\n/.github/ export-ignore\n/.gitignore export-ignore\n/examples/ export-ignore\n/phpunit.xml.dist export-ignore\n/phpunit.xml.legacy export-ignore\n/tests/ export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0234375,
          "content": "/composer.lock\n/vendor/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 24.607421875,
          "content": "# Changelog\n\n## 1.15.0 (2023-12-15)\n\n*   Feature: Full PHP 8.3 compatibility.\n    (#310 by @clue)\n\n*   Fix: Fix cancelling during the 50ms resolution delay when DNS is still pending.\n    (#311 by @clue)\n\n## 1.14.0 (2023-08-25)\n\n*   Feature: Improve Promise v3 support and use template types.\n    (#307 and #309 by @clue)\n\n*   Improve test suite and update to collect all garbage cycles.\n    (#308 by @clue)\n\n## 1.13.0 (2023-06-07)\n\n*   Feature: Include timeout logic to avoid dependency on reactphp/promise-timer.\n    (#305 by @clue)\n\n*   Feature: Improve errno detection for failed connections without `ext-sockets`.\n    (#304 by @clue)\n\n*   Improve test suite, clean up leftover `.sock` files and report failed assertions.\n    (#299, #300, #301 and #306 by @clue)\n\n## 1.12.0 (2022-08-25)\n\n*   Feature: Forward compatibility with react/promise 3.\n    (#214 by @WyriHaximus and @clue)\n\n*   Feature: Full support for PHP 8.2 release.\n    (#298 by @WyriHaximus)\n\n*   Feature: Avoid unneeded syscall on socket close.\n    (#292 by @clue)\n\n*   Feature / Fix: Improve error reporting when custom error handler is used.\n    (#290 by @clue)\n\n*   Fix: Fix invalid references in exception stack trace.\n    (#284 by @clue)\n\n*   Minor documentation improvements, update to use new reactphp/async package instead of clue/reactphp-block.\n    (#296 by @clue, #285 by @SimonFrings and #295 by @nhedger)\n\n*   Improve test suite, update macOS and HHVM environment, fix optional tests for `ENETUNREACH`.\n    (#288, #289 and #297 by @clue)\n\n## 1.11.0 (2022-01-14)\n\n*   Feature: Full support for PHP 8.1 release.\n    (#277 by @clue)\n\n*   Feature: Avoid dependency on `ext-filter`.\n    (#279 by @clue)\n\n*   Improve test suite to skip FD test when hitting memory limit\n    and skip legacy TLS 1.0 tests if disabled by system.\n    (#278 and #281 by @clue and #283 by @SimonFrings)\n\n## 1.10.0 (2021-11-29)\n\n*   Feature: Support listening on existing file descriptors (FDs) with `SocketServer`.\n    (#269 by @clue)\n\n    ```php\n    $socket = new React\\Socket\\SocketSever('php://fd/3');\n    ```\n\n    This is particularly useful when using [systemd socket activation](https://www.freedesktop.org/software/systemd/man/systemd.socket.html) like this:\n\n    ```bash\n    $ systemd-socket-activate -l 8000 php examples/03-http-server.php php://fd/3\n    ```\n\n*   Feature: Improve error messages for failed connection attempts with `errno` and `errstr`.\n    (#265, #266, #267, #270 and #271 by @clue and #268 by @SimonFrings)\n\n    All error messages now always include the appropriate `errno` and `errstr` to\n    give more details about the error reason when available. Along with these\n    error details exposed by the underlying system functions, it will also\n    include the appropriate error constant name (such as `ECONNREFUSED`) when\n    available. Accordingly, failed TCP/IP connections will now report the actual\n    underlying error condition instead of a generic \"Connection refused\" error.\n    Higher-level error messages will now consistently report the connection URI\n    scheme and hostname used in all error messages.\n\n    For most common use cases this means that simply reporting the `Exception`\n    message should give the most relevant details for any connection issues:\n\n    ```php\n    $connector = new React\\Socket\\Connector();\n    $connector->connect($uri)->then(function (React\\Socket\\ConnectionInterface $conn) {\n        // â€¦\n    }, function (Exception $e) {\n        echo 'Error:' . $e->getMessage() . PHP_EOL;\n    });\n    ```\n\n*   Improve test suite, test against PHP 8.1 release.\n    (#274 by @SimonFrings)\n\n## 1.9.0 (2021-08-03)\n\n*   Feature: Add new `SocketServer` and deprecate `Server` to avoid class name collisions.\n    (#263 by @clue)\n\n    The new `SocketServer` class has been added with an improved constructor signature\n    as a replacement for the previous `Server` class in order to avoid any ambiguities.\n    The previous name has been deprecated and should not be used anymore.\n    In its most basic form, the deprecated `Server` can now be considered an alias for new `SocketServer`.\n\n    ```php\n    // deprecated\n    $socket = new React\\Socket\\Server(0);\n    $socket = new React\\Socket\\Server('127.0.0.1:8000');\n    $socket = new React\\Socket\\Server('127.0.0.1:8000', null, $context);\n    $socket = new React\\Socket\\Server('127.0.0.1:8000', $loop, $context);\n\n    // new\n    $socket = new React\\Socket\\SocketServer('127.0.0.1:0');\n    $socket = new React\\Socket\\SocketServer('127.0.0.1:8000');\n    $socket = new React\\Socket\\SocketServer('127.0.0.1:8000', $context);\n    $socket = new React\\Socket\\SocketServer('127.0.0.1:8000', $context, $loop);\n    ```\n\n*   Feature: Update `Connector` signature to take optional `$context` as first argument.\n    (#264 by @clue)\n\n    The new signature has been added to match the new `SocketServer` and\n    consistently move the now commonly unneeded loop argument to the last argument.\n    The previous signature has been deprecated and should not be used anymore.\n    In its most basic form, both signatures are compatible.\n\n    ```php\n     // deprecated\n    $connector = new React\\Socket\\Connector(null, $context);\n    $connector = new React\\Socket\\Connector($loop, $context);\n\n    // new\n    $connector = new React\\Socket\\Connector($context);\n    $connector = new React\\Socket\\Connector($context, $loop);\n    ```\n\n## 1.8.0 (2021-07-11)\n\nA major new feature release, see [**release announcement**](https://clue.engineering/2021/announcing-reactphp-default-loop).\n\n*   Feature: Simplify usage by supporting new [default loop](https://reactphp.org/event-loop/#loop).\n    (#260 by @clue)\n\n    ```php\n    // old (still supported)\n    $socket = new React\\Socket\\Server('127.0.0.1:8080', $loop);\n    $connector = new React\\Socket\\Connector($loop);\n\n    // new (using default loop)\n    $socket = new React\\Socket\\Server('127.0.0.1:8080');\n    $connector = new React\\Socket\\Connector();\n    ```\n\n## 1.7.0 (2021-06-25)\n\n*   Feature: Support falling back to multiple DNS servers from DNS config.\n    (#257 by @clue)\n\n    If you're using the default `Connector`, it will now use all DNS servers\n    configured on your system. If you have multiple DNS servers configured and\n    connectivity to the primary DNS server is broken, it will now fall back to\n    your other DNS servers, thus providing improved connectivity and redundancy\n    for broken DNS configurations.\n\n*   Feature: Use round robin for happy eyeballs DNS responses (load balancing).\n    (#247 by @clue)\n\n    If you're using the default `Connector`, it will now randomize the order of\n    the IP addresses resolved via DNS when connecting. This allows the load to\n    be distributed more evenly across all returned IP addresses. This can be\n    used as a very basic DNS load balancing mechanism.\n\n*   Internal improvement to avoid unhandled rejection for future Promise API.\n    (#258 by @clue)\n\n*   Improve test suite, use GitHub actions for continuous integration (CI).\n    (#254 by @SimonFrings)\n\n## 1.6.0 (2020-08-28)\n\n*   Feature: Support upcoming PHP 8 release.\n    (#246 by @clue)\n\n*   Feature: Change default socket backlog size to 511.\n    (#242 by @clue)\n\n*   Fix: Fix closing connection when cancelling during TLS handshake.\n    (#241 by @clue)\n\n*   Fix: Fix blocking during possible `accept()` race condition\n    when multiple socket servers listen on same socket address.\n    (#244 by @clue)\n\n*   Improve test suite, update PHPUnit config and add full core team to the license.\n    (#243 by @SimonFrings and #245 by @WyriHaximus)\n\n## 1.5.0 (2020-07-01)\n\n*   Feature / Fix: Improve error handling and reporting for happy eyeballs and\n    immediately try next connection when one connection attempt fails.\n    (#230, #231, #232 and #233 by @clue)\n\n    Error messages for failed connection attempts now include more details to\n    ease debugging. Additionally, the happy eyeballs algorithm has been improved\n    to avoid having to wait for some timers to expire which significantly\n    improves connection setup times (in particular when IPv6 isn't available).\n\n*   Improve test suite, minor code cleanup and improve code coverage to 100%.\n    Update to PHPUnit 9 and skip legacy TLS 1.0 / TLS 1.1 tests if disabled by\n    system. Run tests on Windows and simplify Travis CI test matrix for Mac OS X\n    setup and skip all TLS tests on legacy HHVM.\n    (#229, #235, #236 and #238 by @clue and #239 by @SimonFrings)\n\n## 1.4.0 (2020-03-12)\n\nA major new feature release, see [**release announcement**](https://clue.engineering/2020/introducing-ipv6-for-reactphp).\n\n*   Feature: Add IPv6 support to `Connector` (implement \"Happy Eyeballs\" algorithm to support IPv6 probing).\n    IPv6 support is turned on by default, use new `happy_eyeballs` option in `Connector` to toggle behavior.\n    (#196, #224 and #225 by @WyriHaximus and @clue)\n\n*   Feature: Default to using DNS cache (with max 256 entries) for `Connector`.\n    (#226 by @clue)\n\n*   Add `.gitattributes` to exclude dev files from exports and some minor code style fixes.\n    (#219 by @reedy and #218 by @mmoreram)\n\n*   Improve test suite to fix failing test cases when using new DNS component,\n    significantly improve test performance by awaiting events instead of sleeping,\n    exclude TLS 1.3 test on PHP 7.3, run tests on PHP 7.4 and simplify test matrix.\n    (#208, #209, #210, #217 and #223 by @clue)\n\n## 1.3.0 (2019-07-10)\n\n*   Feature: Forward compatibility with upcoming stable DNS component.\n    (#206 by @clue)\n\n## 1.2.1 (2019-06-03)\n\n*   Avoid uneeded fragmented TLS work around for PHP 7.3.3+ and \n    work around failing test case detecting EOF on TLS 1.3 socket streams.\n    (#201 and #202 by @clue)\n\n*   Improve TLS certificate/passphrase example.\n    (#190 by @jsor)\n\n## 1.2.0 (2019-01-07)\n\n*   Feature / Fix: Improve TLS 1.3 support.\n    (#186 by @clue)\n\n    TLS 1.3 is now an official standard as of August 2018! :tada:\n    The protocol has major improvements in the areas of security, performance, and privacy.\n    TLS 1.3 is supported by default as of [OpenSSL 1.1.1](https://www.openssl.org/blog/blog/2018/09/11/release111/).\n    For example, this version ships with Ubuntu 18.10 (and newer) by default, meaning that recent installations support TLS 1.3 out of the box :shipit:\n\n*   Fix: Avoid possibility of missing remote address when TLS handshake fails.\n    (#188 by @clue)\n\n*   Improve performance by prefixing all global functions calls with `\\` to skip the look up and resolve process and go straight to the global function.\n    (#183 by @WyriHaximus)\n\n*   Update documentation to use full class names with namespaces.\n    (#187 by @clue)\n\n*   Improve test suite to avoid some possible race conditions,\n    test against PHP 7.3 on Travis and\n    use dedicated `assertInstanceOf()` assertions.\n    (#185 by @clue, #178 by @WyriHaximus and #181 by @carusogabriel)\n\n## 1.1.0 (2018-10-01)\n\n*   Feature: Improve error reporting for failed connection attempts and improve\n    cancellation forwarding during DNS lookup, TCP/IP connection or TLS handshake.\n    (#168, #169, #170, #171, #176 and #177 by @clue)\n\n    All error messages now always contain a reference to the remote URI to give\n    more details which connection actually failed and the reason for this error.\n    Accordingly, failures during DNS lookup will now mention both the remote URI\n    as well as the DNS error reason. TCP/IP connection issues and errors during\n    a secure TLS handshake will both mention the remote URI as well as the\n    underlying socket error. Similarly, lost/dropped connections during a TLS\n    handshake will now report a lost connection instead of an empty error reason.\n\n    For most common use cases this means that simply reporting the `Exception`\n    message should give the most relevant details for any connection issues:\n\n    ```php\n    $promise = $connector->connect('tls://example.com:443');\n    $promise->then(function (ConnectionInterface $conn) use ($loop) {\n        // â€¦\n    }, function (Exception $e) {\n        echo $e->getMessage();\n    });\n    ```\n\n## 1.0.0 (2018-07-11)\n\n*   First stable LTS release, now following [SemVer](https://semver.org/).\n    We'd like to emphasize that this component is production ready and battle-tested.\n    We plan to support all long-term support (LTS) releases for at least 24 months,\n    so you have a rock-solid foundation to build on top of.\n\n>   Contains no other changes, so it's actually fully compatible with the v0.8.12 release.\n\n## 0.8.12 (2018-06-11)\n\n*   Feature: Improve memory consumption for failed and cancelled connection attempts.\n    (#161 by @clue)\n\n*   Improve test suite to fix Travis config to test against legacy PHP 5.3 again.\n    (#162 by @clue)\n\n## 0.8.11 (2018-04-24)\n\n*   Feature: Improve memory consumption for cancelled connection attempts and\n    simplify skipping DNS lookup when connecting to IP addresses.\n    (#159 and #160 by @clue)\n\n## 0.8.10 (2018-02-28)\n\n*   Feature: Update DNS dependency to support loading system default DNS\n    nameserver config on all supported platforms\n    (`/etc/resolv.conf` on Unix/Linux/Mac/Docker/WSL and WMIC on Windows)\n    (#152 by @clue)\n\n    This means that connecting to hosts that are managed by a local DNS server,\n    such as a corporate DNS server or when using Docker containers, will now\n    work as expected across all platforms with no changes required:\n\n    ```php\n    $connector = new Connector($loop);\n    $connector->connect('intranet.example:80')->then(function ($connection) {\n        // â€¦\n    });\n    ```\n\n## 0.8.9 (2018-01-18)\n\n*   Feature: Support explicitly choosing TLS version to negotiate with remote side\n    by respecting `crypto_method` context parameter for all classes.\n    (#149 by @clue)\n\n    By default, all connector and server classes support TLSv1.0+ and exclude\n    support for legacy SSLv2/SSLv3. As of PHP 5.6+ you can also explicitly\n    choose the TLS version you want to negotiate with the remote side:\n\n    ```php\n    // new: now supports 'crypto_method` context parameter for all classes\n    $connector = new Connector($loop, array(\n        'tls' => array(\n            'crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT\n        )\n    ));\n    ```\n\n*   Minor internal clean up to unify class imports\n    (#148 by @clue)\n\n## 0.8.8 (2018-01-06)\n\n*   Improve test suite by adding test group to skip integration tests relying on\n    internet connection and fix minor documentation typo.\n    (#146 by @clue and #145 by @cn007b)\n\n## 0.8.7 (2017-12-24)\n\n*   Fix: Fix closing socket resource before removing from loop\n    (#141 by @clue)\n\n    This fixes the root cause of an uncaught `Exception` that only manifested\n    itself after the recent Stream v0.7.4 component update and only if you're\n    using `ext-event` (`ExtEventLoop`).\n\n*   Improve test suite by testing against PHP 7.2\n    (#140 by @carusogabriel)\n\n## 0.8.6 (2017-11-18)\n\n*   Feature: Add Unix domain socket (UDS) support to `Server` with `unix://` URI scheme\n    and add advanced `UnixServer` class.\n    (#120 by @andig)\n\n    ```php\n    // new: Server now supports \"unix://\" scheme\n    $server = new Server('unix:///tmp/server.sock', $loop);\n\n    // new: advanced usage\n    $server = new UnixServer('/tmp/server.sock', $loop);\n    ```\n\n*   Restructure examples to ease getting started\n    (#136 by @clue)\n\n*   Improve test suite by adding forward compatibility with PHPUnit 6 and\n    ignore Mac OS X test failures for now until Travis tests work again\n    (#133 by @gabriel-caruso and #134 by @clue)\n\n## 0.8.5 (2017-10-23)\n\n*   Fix: Work around PHP bug with Unix domain socket (UDS) paths for Mac OS X\n    (#123 by @andig)\n\n*   Fix: Fix `SecureServer` to return `null` URI if server socket is already closed\n    (#129 by @clue)\n\n*   Improve test suite by adding forward compatibility with PHPUnit v5 and\n    forward compatibility with upcoming EventLoop releases in tests and\n    test Mac OS X on Travis\n    (#122 by @andig and #125, #127 and #130 by @clue)\n\n*   Readme improvements\n    (#118 by @jsor)\n\n## 0.8.4 (2017-09-16)\n\n*   Feature: Add `FixedUriConnector` decorator to use fixed, preconfigured URI instead\n    (#117 by @clue)\n\n    This can be useful for consumers that do not support certain URIs, such as\n    when you want to explicitly connect to a Unix domain socket (UDS) path\n    instead of connecting to a default address assumed by an higher-level API:\n\n    ```php\n    $connector = new FixedUriConnector(\n        'unix:///var/run/docker.sock',\n        new UnixConnector($loop)\n    );\n\n    // destination will be ignored, actually connects to Unix domain socket\n    $promise = $connector->connect('localhost:80');\n    ```\n\n## 0.8.3 (2017-09-08)\n\n*   Feature: Reduce memory consumption for failed connections\n    (#113 by @valga)\n\n*   Fix: Work around write chunk size for TLS streams for PHP < 7.1.14\n    (#114 by @clue)\n\n## 0.8.2 (2017-08-25)\n\n*   Feature: Update DNS dependency to support hosts file on all platforms\n    (#112 by @clue)\n\n    This means that connecting to hosts such as `localhost` will now work as\n    expected across all platforms with no changes required:\n\n    ```php\n    $connector = new Connector($loop);\n    $connector->connect('localhost:8080')->then(function ($connection) {\n        // â€¦\n    });\n    ```\n\n## 0.8.1 (2017-08-15)\n\n* Feature: Forward compatibility with upcoming EventLoop v1.0 and v0.5 and\n  target evenement 3.0 a long side 2.0 and 1.0\n  (#104 by @clue and #111 by @WyriHaximus)\n\n* Improve test suite by locking Travis distro so new defaults will not break the build and\n  fix HHVM build for now again and ignore future HHVM build errors\n  (#109 and #110 by @clue)\n\n* Minor documentation fixes\n  (#103 by @christiaan and #108 by @hansott)\n\n## 0.8.0 (2017-05-09)\n\n* Feature: New `Server` class now acts as a facade for existing server classes\n  and renamed old `Server` to `TcpServer` for advanced usage.\n  (#96 and #97 by @clue)\n\n  The `Server` class is now the main class in this package that implements the\n  `ServerInterface` and allows you to accept incoming streaming connections,\n  such as plaintext TCP/IP or secure TLS connection streams.\n\n  > This is not a BC break and consumer code does not have to be updated.\n\n* Feature / BC break: All addresses are now URIs that include the URI scheme\n  (#98 by @clue)\n\n  ```diff\n  - $parts = parse_url('tcp://' . $conn->getRemoteAddress());\n  + $parts = parse_url($conn->getRemoteAddress());\n  ```\n\n* Fix: Fix `unix://` addresses for Unix domain socket (UDS) paths\n  (#100 by @clue)\n\n* Feature: Forward compatibility with Stream v1.0 and v0.7\n  (#99 by @clue)\n\n## 0.7.2 (2017-04-24)\n\n* Fix: Work around latest PHP 7.0.18 and 7.1.4 no longer accepting full URIs\n  (#94 by @clue)\n\n## 0.7.1 (2017-04-10)\n\n* Fix: Ignore HHVM errors when closing connection that is already closing\n  (#91 by @clue)\n\n## 0.7.0 (2017-04-10)\n\n* Feature: Merge SocketClient component into this component\n  (#87 by @clue)\n\n  This means that this package now provides async, streaming plaintext TCP/IP\n  and secure TLS socket server and client connections for ReactPHP.\n\n  ```\n  $connector = new React\\Socket\\Connector($loop);\n  $connector->connect('google.com:80')->then(function (ConnectionInterface $conn) {\n      $connection->write('â€¦');\n  });\n  ```\n\n  Accordingly, the `ConnectionInterface` is now used to represent both incoming\n  server side connections as well as outgoing client side connections.\n\n  If you've previously used the SocketClient component to establish outgoing\n  client connections, upgrading should take no longer than a few minutes.\n  All classes have been merged as-is from the latest `v0.7.0` release with no\n  other changes, so you can simply update your code to use the updated namespace\n  like this:\n\n  ```php\n  // old from SocketClient component and namespace\n  $connector = new React\\SocketClient\\Connector($loop);\n  $connector->connect('google.com:80')->then(function (ConnectionInterface $conn) {\n      $connection->write('â€¦');\n  });\n\n  // new\n  $connector = new React\\Socket\\Connector($loop);\n  $connector->connect('google.com:80')->then(function (ConnectionInterface $conn) {\n      $connection->write('â€¦');\n  });\n  ```\n\n## 0.6.0 (2017-04-04)\n\n* Feature: Add `LimitingServer` to limit and keep track of open connections\n  (#86 by @clue)\n\n  ```php\n  $server = new Server(0, $loop);\n  $server = new LimitingServer($server, 100);\n\n  $server->on('connection', function (ConnectionInterface $connection) {\n      $connection->write('hello there!' . PHP_EOL);\n      â€¦\n  });\n  ```\n\n* Feature / BC break: Add `pause()` and `resume()` methods to limit active\n  connections\n  (#84 by @clue)\n\n  ```php\n  $server = new Server(0, $loop);\n  $server->pause();\n\n  $loop->addTimer(1.0, function() use ($server) {\n      $server->resume();\n  });\n  ```\n\n## 0.5.1 (2017-03-09)\n\n* Feature: Forward compatibility with Stream v0.5 and upcoming v0.6\n  (#79 by @clue)\n\n## 0.5.0 (2017-02-14)\n\n* Feature / BC break: Replace `listen()` call with URIs passed to constructor\n  and reject listening on hostnames with `InvalidArgumentException`\n  and replace `ConnectionException` with `RuntimeException` for consistency\n  (#61, #66 and #72 by @clue)\n\n  ```php\n  // old\n  $server = new Server($loop);\n  $server->listen(8080);\n\n  // new\n  $server = new Server(8080, $loop);\n  ```\n\n  Similarly, you can now pass a full listening URI to the constructor to change\n  the listening host:\n\n  ```php\n  // old\n  $server = new Server($loop);\n  $server->listen(8080, '127.0.0.1');\n\n  // new\n  $server = new Server('127.0.0.1:8080', $loop);\n  ```\n\n  Trying to start listening on (DNS) host names will now throw an\n  `InvalidArgumentException`, use IP addresses instead:\n\n  ```php\n  // old\n  $server = new Server($loop);\n  $server->listen(8080, 'localhost');\n\n  // new\n  $server = new Server('127.0.0.1:8080', $loop);\n  ```\n\n  If trying to listen fails (such as if port is already in use or port below\n  1024 may require root access etc.), it will now throw a `RuntimeException`,\n  the `ConnectionException` class has been removed:\n\n  ```php\n  // old: throws React\\Socket\\ConnectionException\n  $server = new Server($loop);\n  $server->listen(80);\n\n  // new: throws RuntimeException\n  $server = new Server(80, $loop);\n  ```\n\n* Feature / BC break: Rename `shutdown()` to `close()` for consistency throughout React\n  (#62 by @clue)\n\n  ```php\n  // old\n  $server->shutdown();\n\n  // new\n  $server->close();\n  ```\n\n* Feature / BC break: Replace `getPort()` with `getAddress()`\n  (#67 by @clue)\n\n  ```php\n  // old\n  echo $server->getPort(); // 8080\n\n  // new\n  echo $server->getAddress(); // 127.0.0.1:8080\n  ```\n\n* Feature / BC break: `getRemoteAddress()` returns full address instead of only IP\n  (#65 by @clue)\n\n  ```php\n  // old\n  echo $connection->getRemoteAddress(); // 192.168.0.1\n\n  // new\n  echo $connection->getRemoteAddress(); // 192.168.0.1:51743\n  ```\n  \n* Feature / BC break: Add `getLocalAddress()` method\n  (#68 by @clue)\n\n  ```php\n  echo $connection->getLocalAddress(); // 127.0.0.1:8080\n  ```\n\n* BC break: The `Server` and `SecureServer` class are now marked `final`\n  and you can no longer `extend` them\n  (which was never documented or recommended anyway).\n  Public properties and event handlers are now internal only.\n  Please use composition instead of extension.\n  (#71, #70 and #69 by @clue)\n\n## 0.4.6 (2017-01-26)\n\n* Feature: Support socket context options passed to `Server`\n  (#64 by @clue)\n\n* Fix: Properly return `null` for unknown addresses\n  (#63 by @clue)\n\n* Improve documentation for `ServerInterface` and lock test suite requirements\n  (#60 by @clue, #57 by @shaunbramley)\n\n## 0.4.5 (2017-01-08)\n\n* Feature: Add `SecureServer` for secure TLS connections\n  (#55 by @clue)\n\n* Add functional integration tests\n  (#54 by @clue)\n\n## 0.4.4 (2016-12-19)\n\n* Feature / Fix: `ConnectionInterface` should extend `DuplexStreamInterface` + documentation\n  (#50 by @clue)\n\n* Feature / Fix: Improve test suite and switch to normal stream handler\n  (#51 by @clue)\n\n* Feature: Add examples\n  (#49 by @clue)\n\n## 0.4.3 (2016-03-01)\n\n* Bug fix: Suppress errors on stream_socket_accept to prevent PHP from crashing\n* Support for PHP7 and HHVM\n* Support PHP 5.3 again\n\n## 0.4.2 (2014-05-25)\n\n* Verify stream is a valid resource in Connection\n\n## 0.4.1 (2014-04-13)\n\n* Bug fix: Check read buffer for data before shutdown signal and end emit (@ArtyDev)\n* Bug fix: v0.3.4 changes merged for v0.4.1\n\n## 0.3.4 (2014-03-30)\n\n* Bug fix: Reset socket to non-blocking after shutting down (PHP bug)\n\n## 0.4.0 (2014-02-02)\n\n* BC break: Bump minimum PHP version to PHP 5.4, remove 5.3 specific hacks\n* BC break: Update to React/Promise 2.0\n* BC break: Update to Evenement 2.0\n* Dependency: Autoloading and filesystem structure now PSR-4 instead of PSR-0\n* Bump React dependencies to v0.4\n\n## 0.3.3 (2013-07-08)\n\n* Version bump\n\n## 0.3.2 (2013-05-10)\n\n* Version bump\n\n## 0.3.1 (2013-04-21)\n\n* Feature: Support binding to IPv6 addresses (@clue)\n\n## 0.3.0 (2013-04-14)\n\n* Bump React dependencies to v0.3\n\n## 0.2.6 (2012-12-26)\n\n* Version bump\n\n## 0.2.3 (2012-11-14)\n\n* Version bump\n\n## 0.2.0 (2012-09-10)\n\n* Bump React dependencies to v0.2\n\n## 0.1.1 (2012-07-12)\n\n* Version bump\n\n## 0.1.0 (2012-07-11)\n\n* First tagged release\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1142578125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2012 Christian LÃ¼ck, Cees-Jan Kiewiet, Jan Sorgalla, Chris Boden, Igor Wiedler\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 54.0556640625,
          "content": "# Socket\n\n[![CI status](https://github.com/reactphp/socket/workflows/CI/badge.svg)](https://github.com/reactphp/socket/actions)\n[![installs on Packagist](https://img.shields.io/packagist/dt/react/socket?color=blue&label=installs%20on%20Packagist)](https://packagist.org/packages/react/socket)\n\nAsync, streaming plaintext TCP/IP and secure TLS socket server and client\nconnections for [ReactPHP](https://reactphp.org/).\n\n> **Development version:** This branch contains the code for the upcoming v3\n> release. For the code of the current stable v1 release, check out the\n> [`1.x` branch](https://github.com/reactphp/socket/tree/1.x).\n>\n> The upcoming v3 release will be the way forward for this package. However,\n> we will still actively support v1 for those not yet on the latest version.\n> See also [installation instructions](#install) for more details.\n\nThe socket library provides re-usable interfaces for a socket-layer\nserver and client based on the [`EventLoop`](https://github.com/reactphp/event-loop)\nand [`Stream`](https://github.com/reactphp/stream) components.\nIts server component allows you to build networking servers that accept incoming\nconnections from networking clients (such as an HTTP server).\nIts client component allows you to build networking clients that establish\noutgoing connections to networking servers (such as an HTTP or database client).\nThis library provides async, streaming means for all of this, so you can\nhandle multiple concurrent connections without blocking.\n\n**Table of Contents**\n\n* [Quickstart example](#quickstart-example)\n* [Connection usage](#connection-usage)\n  * [ConnectionInterface](#connectioninterface)\n    * [getRemoteAddress()](#getremoteaddress)\n    * [getLocalAddress()](#getlocaladdress)\n* [Server usage](#server-usage)\n  * [ServerInterface](#serverinterface)\n    * [connection event](#connection-event)\n    * [error event](#error-event)\n    * [getAddress()](#getaddress)\n    * [pause()](#pause)\n    * [resume()](#resume)\n    * [close()](#close)\n  * [SocketServer](#socketserver)\n  * [Advanced server usage](#advanced-server-usage)\n    * [TcpServer](#tcpserver)\n    * [SecureServer](#secureserver)\n    * [UnixServer](#unixserver)\n    * [LimitingServer](#limitingserver)\n      * [getConnections()](#getconnections)\n* [Client usage](#client-usage)\n  * [ConnectorInterface](#connectorinterface)\n    * [connect()](#connect)\n  * [Connector](#connector)\n  * [Advanced client usage](#advanced-client-usage)\n    * [TcpConnector](#tcpconnector)\n    * [HappyEyeBallsConnector](#happyeyeballsconnector)\n    * [DnsConnector](#dnsconnector)\n    * [SecureConnector](#secureconnector)\n    * [TimeoutConnector](#timeoutconnector)\n    * [UnixConnector](#unixconnector)\n    * [FixUriConnector](#fixeduriconnector)\n* [Install](#install)\n* [Tests](#tests)\n* [License](#license)\n\n## Quickstart example\n\nHere is a server that closes the connection if you send it anything:\n\n```php\n$socket = new React\\Socket\\SocketServer('127.0.0.1:8080');\n\n$socket->on('connection', function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write(\"Hello \" . $connection->getRemoteAddress() . \"!\\n\");\n    $connection->write(\"Welcome to this amazing server!\\n\");\n    $connection->write(\"Here's a tip: don't say anything.\\n\");\n\n    $connection->on('data', function ($data) use ($connection) {\n        $connection->close();\n    });\n});\n```\n\nSee also the [examples](examples).\n\nHere's a client that outputs the output of said server and then attempts to\nsend it a string:\n\n```php\n$connector = new React\\Socket\\Connector();\n\n$connector->connect('127.0.0.1:8080')->then(function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->pipe(new React\\Stream\\WritableResourceStream(STDOUT));\n    $connection->write(\"Hello World!\\n\");\n}, function (Exception $e) {\n    echo 'Error: ' . $e->getMessage() . PHP_EOL;\n});\n```\n\n## Connection usage\n\n### ConnectionInterface\n\nThe `ConnectionInterface` is used to represent any incoming and outgoing\nconnection, such as a normal TCP/IP connection.\n\nAn incoming or outgoing connection is a duplex stream (both readable and\nwritable) that implements React's\n[`DuplexStreamInterface`](https://github.com/reactphp/stream#duplexstreaminterface).\nIt contains additional properties for the local and remote address (client IP)\nwhere this connection has been established to/from.\n\nMost commonly, instances implementing this `ConnectionInterface` are emitted\nby all classes implementing the [`ServerInterface`](#serverinterface) and\nused by all classes implementing the [`ConnectorInterface`](#connectorinterface).\n\nBecause the `ConnectionInterface` implements the underlying\n[`DuplexStreamInterface`](https://github.com/reactphp/stream#duplexstreaminterface)\nyou can use any of its events and methods as usual:\n\n```php\n$connection->on('data', function ($chunk) {\n    echo $chunk;\n});\n\n$connection->on('end', function () {\n    echo 'ended';\n});\n\n$connection->on('error', function (Exception $e) {\n    echo 'error: ' . $e->getMessage();\n});\n\n$connection->on('close', function () {\n    echo 'closed';\n});\n\n$connection->write($data);\n$connection->end($data = null);\n$connection->close();\n// â€¦\n```\n\nFor more details, see the\n[`DuplexStreamInterface`](https://github.com/reactphp/stream#duplexstreaminterface).\n\n#### getRemoteAddress()\n\nThe `getRemoteAddress(): ?string` method returns the full remote address\n(URI) where this connection has been established with.\n\n```php\n$address = $connection->getRemoteAddress();\necho 'Connection with ' . $address . PHP_EOL;\n```\n\nIf the remote address can not be determined or is unknown at this time (such as\nafter the connection has been closed), it MAY return a `NULL` value instead.\n\nOtherwise, it will return the full address (URI) as a string value, such\nas `tcp://127.0.0.1:8080`, `tcp://[::1]:80`, `tls://127.0.0.1:443`,\n`unix://example.sock` or `unix:///path/to/example.sock`.\nNote that individual URI components are application specific and depend\non the underlying transport protocol.\n\nIf this is a TCP/IP based connection and you only want the remote IP, you may\nuse something like this:\n\n```php\n$address = $connection->getRemoteAddress();\n$ip = trim(parse_url($address, PHP_URL_HOST), '[]');\necho 'Connection with ' . $ip . PHP_EOL;\n```\n\n#### getLocalAddress()\n\nThe `getLocalAddress(): ?string` method returns the full local address\n(URI) where this connection has been established with.\n\n```php\n$address = $connection->getLocalAddress();\necho 'Connection with ' . $address . PHP_EOL;\n```\n\nIf the local address can not be determined or is unknown at this time (such as\nafter the connection has been closed), it MAY return a `NULL` value instead.\n\nOtherwise, it will return the full address (URI) as a string value, such\nas `tcp://127.0.0.1:8080`, `tcp://[::1]:80`, `tls://127.0.0.1:443`,\n`unix://example.sock` or `unix:///path/to/example.sock`.\nNote that individual URI components are application specific and depend\non the underlying transport protocol.\n\nThis method complements the [`getRemoteAddress()`](#getremoteaddress) method,\nso they should not be confused.\n\nIf your `TcpServer` instance is listening on multiple interfaces (e.g. using\nthe address `0.0.0.0`), you can use this method to find out which interface\nactually accepted this connection (such as a public or local interface).\n\nIf your system has multiple interfaces (e.g. a WAN and a LAN interface),\nyou can use this method to find out which interface was actually\nused for this connection.\n\n## Server usage\n\n### ServerInterface\n\nThe `ServerInterface` is responsible for providing an interface for accepting\nincoming streaming connections, such as a normal TCP/IP connection.\n\nMost higher-level components (such as a HTTP server) accept an instance\nimplementing this interface to accept incoming streaming connections.\nThis is usually done via dependency injection, so it's fairly simple to actually\nswap this implementation against any other implementation of this interface.\nThis means that you SHOULD typehint against this interface instead of a concrete\nimplementation of this interface.\n\nBesides defining a few methods, this interface also implements the\n[`EventEmitterInterface`](https://github.com/igorw/evenement)\nwhich allows you to react to certain events.\n\n#### connection event\n\nThe `connection` event will be emitted whenever a new connection has been\nestablished, i.e. a new client connects to this server socket:\n\n```php\n$socket->on('connection', function (React\\Socket\\ConnectionInterface $connection) {\n    echo 'new connection' . PHP_EOL;\n});\n```\n\nSee also the [`ConnectionInterface`](#connectioninterface) for more details\nabout handling the incoming connection.\n\n#### error event\n\nThe `error` event will be emitted whenever there's an error accepting a new\nconnection from a client.\n\n```php\n$socket->on('error', function (Exception $e) {\n    echo 'error: ' . $e->getMessage() . PHP_EOL;\n});\n```\n\nNote that this is not a fatal error event, i.e. the server keeps listening for\nnew connections even after this event.\n\n#### getAddress()\n\nThe `getAddress(): ?string` method can be used to\nreturn the full address (URI) this server is currently listening on.\n\n```php\n$address = $socket->getAddress();\necho 'Server listening on ' . $address . PHP_EOL;\n```\n\nIf the address can not be determined or is unknown at this time (such as\nafter the socket has been closed), it MAY return a `NULL` value instead.\n\nOtherwise, it will return the full address (URI) as a string value, such\nas `tcp://127.0.0.1:8080`, `tcp://[::1]:80`, `tls://127.0.0.1:443`\n`unix://example.sock` or `unix:///path/to/example.sock`.\nNote that individual URI components are application specific and depend\non the underlying transport protocol.\n\nIf this is a TCP/IP based server and you only want the local port, you may\nuse something like this:\n\n```php\n$address = $socket->getAddress();\n$port = parse_url($address, PHP_URL_PORT);\necho 'Server listening on port ' . $port . PHP_EOL;\n```\n\n#### pause()\n\nThe `pause(): void` method can be used to\npause accepting new incoming connections.\n\nRemoves the socket resource from the EventLoop and thus stop accepting\nnew connections. Note that the listening socket stays active and is not\nclosed.\n\nThis means that new incoming connections will stay pending in the\noperating system backlog until its configurable backlog is filled.\nOnce the backlog is filled, the operating system may reject further\nincoming connections until the backlog is drained again by resuming\nto accept new connections.\n\nOnce the server is paused, no futher `connection` events SHOULD\nbe emitted.\n\n```php\n$socket->pause();\n\n$socket->on('connection', assertShouldNeverCalled());\n```\n\nThis method is advisory-only, though generally not recommended, the\nserver MAY continue emitting `connection` events.\n\nUnless otherwise noted, a successfully opened server SHOULD NOT start\nin paused state.\n\nYou can continue processing events by calling `resume()` again.\n\nNote that both methods can be called any number of times, in particular\ncalling `pause()` more than once SHOULD NOT have any effect.\nSimilarly, calling this after `close()` is a NO-OP.\n\n#### resume()\n\nThe `resume(): void` method can be used to\nresume accepting new incoming connections.\n\nRe-attach the socket resource to the EventLoop after a previous `pause()`.\n\n```php\n$socket->pause();\n\nLoop::addTimer(1.0, function () use ($socket) {\n    $socket->resume();\n});\n```\n\nNote that both methods can be called any number of times, in particular\ncalling `resume()` without a prior `pause()` SHOULD NOT have any effect.\nSimilarly, calling this after `close()` is a NO-OP.\n\n#### close()\n\nThe `close(): void` method can be used to\nshut down this listening socket.\n\nThis will stop listening for new incoming connections on this socket.\n\n```php\necho 'Shutting down server socket' . PHP_EOL;\n$socket->close();\n```\n\nCalling this method more than once on the same instance is a NO-OP.\n\n### SocketServer\n\nThe `SocketServer` class is the main class in this package that implements the\n[`ServerInterface`](#serverinterface) and allows you to accept incoming\nstreaming connections, such as plaintext TCP/IP or secure TLS connection streams.\n\nIn order to accept plaintext TCP/IP connections, you can simply pass a host\nand port combination like this:\n\n```php\n$socket = new React\\Socket\\SocketServer('127.0.0.1:8080');\n```\n\nListening on the localhost address `127.0.0.1` means it will not be reachable from\noutside of this system.\nIn order to change the host the socket is listening on, you can provide an IP\naddress of an interface or use the special `0.0.0.0` address to listen on all\ninterfaces:\n\n```php\n$socket = new React\\Socket\\SocketServer('0.0.0.0:8080');\n```\n\nIf you want to listen on an IPv6 address, you MUST enclose the host in square\nbrackets:\n\n```php\n$socket = new React\\Socket\\SocketServer('[::1]:8080');\n```\n\nIn order to use a random port assignment, you can use the port `0`:\n\n```php\n$socket = new React\\Socket\\SocketServer('127.0.0.1:0');\n$address = $socket->getAddress();\n```\n\nTo listen on a Unix domain socket (UDS) path, you MUST prefix the URI with the\n`unix://` scheme:\n\n```php\n$socket = new React\\Socket\\SocketServer('unix:///tmp/server.sock');\n```\n\nIn order to listen on an existing file descriptor (FD) number, you MUST prefix\nthe URI with `php://fd/` like this:\n\n```php\n$socket = new React\\Socket\\SocketServer('php://fd/3');\n```\n\nIf the given URI is invalid, does not contain a port, any other scheme or if it\ncontains a hostname, it will throw an `InvalidArgumentException`:\n\n```php\n// throws InvalidArgumentException due to missing port\n$socket = new React\\Socket\\SocketServer('127.0.0.1');\n```\n\nIf the given URI appears to be valid, but listening on it fails (such as if port\nis already in use or port below 1024 may require root access etc.), it will\nthrow a `RuntimeException`:\n\n```php\n$first = new React\\Socket\\SocketServer('127.0.0.1:8080');\n\n// throws RuntimeException because port is already in use\n$second = new React\\Socket\\SocketServer('127.0.0.1:8080');\n```\n\n> Note that these error conditions may vary depending on your system and/or\n  configuration.\n  See the exception message and code for more details about the actual error\n  condition.\n\nOptionally, you can specify [TCP socket context options](https://www.php.net/manual/en/context.socket.php)\nfor the underlying stream socket resource like this:\n\n```php\n$socket = new React\\Socket\\SocketServer('[::1]:8080', [\n    'tcp' => [\n        'backlog' => 200,\n        'so_reuseport' => true,\n        'ipv6_v6only' => true\n    ]\n]);\n```\n\n> Note that available [socket context options](https://www.php.net/manual/en/context.socket.php),\n  their defaults and effects of changing these may vary depending on your system\n  and/or PHP version.\n  Passing unknown context options has no effect.\n  The `backlog` context option defaults to `511` unless given explicitly.\n\nYou can start a secure TLS (formerly known as SSL) server by simply prepending\nthe `tls://` URI scheme.\nInternally, it will wait for plaintext TCP/IP connections and then performs a\nTLS handshake for each connection.\nIt thus requires valid [TLS context options](https://www.php.net/manual/en/context.ssl.php),\nwhich in its most basic form may look something like this if you're using a\nPEM encoded certificate file:\n\n```php\n$socket = new React\\Socket\\SocketServer('tls://127.0.0.1:8080', [\n    'tls' => [\n        'local_cert' => 'server.pem'\n    ]\n]);\n```\n\n> Note that the certificate file will not be loaded on instantiation but when an\n  incoming connection initializes its TLS context.\n  This implies that any invalid certificate file paths or contents will only cause\n  an `error` event at a later time.\n\nIf your private key is encrypted with a passphrase, you have to specify it\nlike this:\n\n```php\n$socket = new React\\Socket\\SocketServer('tls://127.0.0.1:8000', [\n    'tls' => [\n        'local_cert' => 'server.pem',\n        'passphrase' => 'secret'\n    ]\n]);\n```\n\nBy default, this server supports TLSv1.0+ and excludes support for legacy\nSSLv2/SSLv3. You can also explicitly choose the TLS version you\nwant to negotiate with the remote side:\n\n```php\n$socket = new React\\Socket\\SocketServer('tls://127.0.0.1:8000', [\n    'tls' => [\n        'local_cert' => 'server.pem',\n        'crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_2_SERVER\n    ]\n]);\n```\n\n> Note that available [TLS context options](https://www.php.net/manual/en/context.ssl.php),\n  their defaults and effects of changing these may vary depending on your system\n  and/or PHP version.\n  The outer context array allows you to also use `tcp` (and possibly more)\n  context options at the same time.\n  Passing unknown context options has no effect.\n  If you do not use the `tls://` scheme, then passing `tls` context options\n  has no effect.\n\nWhenever a client connects, it will emit a `connection` event with a connection\ninstance implementing [`ConnectionInterface`](#connectioninterface):\n\n```php\n$socket->on('connection', function (React\\Socket\\ConnectionInterface $connection) {\n    echo 'Plaintext connection from ' . $connection->getRemoteAddress() . PHP_EOL;\n    \n    $connection->write('hello there!' . PHP_EOL);\n    â€¦\n});\n```\n\nSee also the [`ServerInterface`](#serverinterface) for more details.\n\nThis class takes an optional `LoopInterface|null $loop` parameter that can be used to\npass the event loop instance to use for this object. You can use a `null` value\nhere in order to use the [default loop](https://github.com/reactphp/event-loop#loop).\nThis value SHOULD NOT be given unless you're sure you want to explicitly use a\ngiven event loop instance.\n\n> Note that the `SocketServer` class is a concrete implementation for TCP/IP sockets.\n  If you want to typehint in your higher-level protocol implementation, you SHOULD\n  use the generic [`ServerInterface`](#serverinterface) instead.\n\n### Advanced server usage\n\n#### TcpServer\n\nThe `TcpServer` class implements the [`ServerInterface`](#serverinterface) and\nis responsible for accepting plaintext TCP/IP connections.\n\n```php\n$server = new React\\Socket\\TcpServer(8080);\n```\n\nAs above, the `$uri` parameter can consist of only a port, in which case the\nserver will default to listening on the localhost address `127.0.0.1`,\nwhich means it will not be reachable from outside of this system.\n\nIn order to use a random port assignment, you can use the port `0`:\n\n```php\n$server = new React\\Socket\\TcpServer(0);\n$address = $server->getAddress();\n```\n\nIn order to change the host the socket is listening on, you can provide an IP\naddress through the first parameter provided to the constructor, optionally\npreceded by the `tcp://` scheme:\n\n```php\n$server = new React\\Socket\\TcpServer('192.168.0.1:8080');\n```\n\nIf you want to listen on an IPv6 address, you MUST enclose the host in square\nbrackets:\n\n```php\n$server = new React\\Socket\\TcpServer('[::1]:8080');\n```\n\nIf the given URI is invalid, does not contain a port, any other scheme or if it\ncontains a hostname, it will throw an `InvalidArgumentException`:\n\n```php\n// throws InvalidArgumentException due to missing port\n$server = new React\\Socket\\TcpServer('127.0.0.1');\n```\n\nIf the given URI appears to be valid, but listening on it fails (such as if port\nis already in use or port below 1024 may require root access etc.), it will\nthrow a `RuntimeException`:\n\n```php\n$first = new React\\Socket\\TcpServer(8080);\n\n// throws RuntimeException because port is already in use\n$second = new React\\Socket\\TcpServer(8080);\n```\n\n> Note that these error conditions may vary depending on your system and/or\nconfiguration.\nSee the exception message and code for more details about the actual error\ncondition.\n\nThis class takes an optional `LoopInterface|null $loop` parameter that can be used to\npass the event loop instance to use for this object. You can use a `null` value\nhere in order to use the [default loop](https://github.com/reactphp/event-loop#loop).\nThis value SHOULD NOT be given unless you're sure you want to explicitly use a\ngiven event loop instance.\n\nOptionally, you can specify [socket context options](https://www.php.net/manual/en/context.socket.php)\nfor the underlying stream socket resource like this:\n\n```php\n$server = new React\\Socket\\TcpServer('[::1]:8080', null, [\n    'backlog' => 200,\n    'so_reuseport' => true,\n    'ipv6_v6only' => true\n]);\n```\n\n> Note that available [socket context options](https://www.php.net/manual/en/context.socket.php),\ntheir defaults and effects of changing these may vary depending on your system\nand/or PHP version.\nPassing unknown context options has no effect.\nThe `backlog` context option defaults to `511` unless given explicitly.\n\nWhenever a client connects, it will emit a `connection` event with a connection\ninstance implementing [`ConnectionInterface`](#connectioninterface):\n\n```php\n$server->on('connection', function (React\\Socket\\ConnectionInterface $connection) {\n    echo 'Plaintext connection from ' . $connection->getRemoteAddress() . PHP_EOL;\n    \n    $connection->write('hello there!' . PHP_EOL);\n    â€¦\n});\n```\n\nSee also the [`ServerInterface`](#serverinterface) for more details.\n\n#### SecureServer\n\nThe `SecureServer` class implements the [`ServerInterface`](#serverinterface)\nand is responsible for providing a secure TLS (formerly known as SSL) server.\n\nIt does so by wrapping a [`TcpServer`](#tcpserver) instance which waits for plaintext\nTCP/IP connections and then performs a TLS handshake for each connection.\nIt thus requires valid [TLS context options](https://www.php.net/manual/en/context.ssl.php),\nwhich in its most basic form may look something like this if you're using a\nPEM encoded certificate file:\n\n```php\n$server = new React\\Socket\\TcpServer(8000);\n$server = new React\\Socket\\SecureServer($server, null, [\n    'local_cert' => 'server.pem'\n]);\n```\n\n> Note that the certificate file will not be loaded on instantiation but when an\nincoming connection initializes its TLS context.\nThis implies that any invalid certificate file paths or contents will only cause\nan `error` event at a later time.\n\nIf your private key is encrypted with a passphrase, you have to specify it\nlike this:\n\n```php\n$server = new React\\Socket\\TcpServer(8000);\n$server = new React\\Socket\\SecureServer($server, null, [\n    'local_cert' => 'server.pem',\n    'passphrase' => 'secret'\n]);\n```\n\nBy default, this server supports TLSv1.0+ and excludes support for legacy\nSSLv2/SSLv3. You can also explicitly choose the TLS version you\nwant to negotiate with the remote side:\n\n```php\n$server = new React\\Socket\\TcpServer(8000);\n$server = new React\\Socket\\SecureServer($server, null, [\n    'local_cert' => 'server.pem',\n    'crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_2_SERVER\n]);\n```\n\n> Note that available [TLS context options](https://www.php.net/manual/en/context.ssl.php),\ntheir defaults and effects of changing these may vary depending on your system\nand/or PHP version.\nPassing unknown context options has no effect.\n\nWhenever a client completes the TLS handshake, it will emit a `connection` event\nwith a connection instance implementing [`ConnectionInterface`](#connectioninterface):\n\n```php\n$server->on('connection', function (React\\Socket\\ConnectionInterface $connection) {\n    echo 'Secure connection from' . $connection->getRemoteAddress() . PHP_EOL;\n    \n    $connection->write('hello there!' . PHP_EOL);\n    â€¦\n});\n```\n\nWhenever a client fails to perform a successful TLS handshake, it will emit an\n`error` event and then close the underlying TCP/IP connection:\n\n```php\n$server->on('error', function (Exception $e) {\n    echo 'Error' . $e->getMessage() . PHP_EOL;\n});\n```\n\nSee also the [`ServerInterface`](#serverinterface) for more details.\n\nNote that the `SecureServer` class is a concrete implementation for TLS sockets.\nIf you want to typehint in your higher-level protocol implementation, you SHOULD\nuse the generic [`ServerInterface`](#serverinterface) instead.\n\nThis class takes an optional `LoopInterface|null $loop` parameter that can be used to\npass the event loop instance to use for this object. You can use a `null` value\nhere in order to use the [default loop](https://github.com/reactphp/event-loop#loop).\nThis value SHOULD NOT be given unless you're sure you want to explicitly use a\ngiven event loop instance.\n\n> Advanced usage: Despite allowing any `ServerInterface` as first parameter,\nyou SHOULD pass a `TcpServer` instance as first parameter, unless you\nknow what you're doing.\nInternally, the `SecureServer` has to set the required TLS context options on\nthe underlying stream resources.\nThese resources are not exposed through any of the interfaces defined in this\npackage, but only through the internal `Connection` class.\nThe `TcpServer` class is guaranteed to emit connections that implement\nthe `ConnectionInterface` and uses the internal `Connection` class in order to\nexpose these underlying resources.\nIf you use a custom `ServerInterface` and its `connection` event does not\nmeet this requirement, the `SecureServer` will emit an `error` event and\nthen close the underlying connection.\n\n#### UnixServer\n\nThe `UnixServer` class implements the [`ServerInterface`](#serverinterface) and\nis responsible for accepting connections on Unix domain sockets (UDS).\n\n```php\n$server = new React\\Socket\\UnixServer('/tmp/server.sock');\n```\n\nAs above, the `$uri` parameter can consist of only a socket path or socket path\nprefixed by the `unix://` scheme.\n\nIf the given URI appears to be valid, but listening on it fails (such as if the\nsocket is already in use or the file not accessible etc.), it will throw a\n`RuntimeException`:\n\n```php\n$first = new React\\Socket\\UnixServer('/tmp/same.sock');\n\n// throws RuntimeException because socket is already in use\n$second = new React\\Socket\\UnixServer('/tmp/same.sock');\n```\n\n> Note that these error conditions may vary depending on your system and/or\n  configuration.\n  In particular, Zend PHP does only report \"Unknown error\" when the UDS path\n  already exists and can not be bound. You may want to check `is_file()` on the\n  given UDS path to report a more user-friendly error message in this case.\n  See the exception message and code for more details about the actual error\n  condition.\n\nThis class takes an optional `LoopInterface|null $loop` parameter that can be used to\npass the event loop instance to use for this object. You can use a `null` value\nhere in order to use the [default loop](https://github.com/reactphp/event-loop#loop).\nThis value SHOULD NOT be given unless you're sure you want to explicitly use a\ngiven event loop instance.\n\nWhenever a client connects, it will emit a `connection` event with a connection\ninstance implementing [`ConnectionInterface`](#connectioninterface):\n\n```php\n$server->on('connection', function (React\\Socket\\ConnectionInterface $connection) {\n    echo 'New connection' . PHP_EOL;\n\n    $connection->write('hello there!' . PHP_EOL);\n    â€¦\n});\n```\n\nSee also the [`ServerInterface`](#serverinterface) for more details.\n\n#### LimitingServer\n\nThe `LimitingServer` decorator wraps a given `ServerInterface` and is responsible\nfor limiting and keeping track of open connections to this server instance.\n\nWhenever the underlying server emits a `connection` event, it will check its\nlimits and then either\n - keep track of this connection by adding it to the list of\n   open connections and then forward the `connection` event\n - or reject (close) the connection when its limits are exceeded and will\n   forward an `error` event instead.\n\nWhenever a connection closes, it will remove this connection from the list of\nopen connections.\n\n```php\n$server = new React\\Socket\\LimitingServer($server, 100);\n$server->on('connection', function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write('hello there!' . PHP_EOL);\n    â€¦\n});\n```\n\nSee also the [second example](examples) for more details.\n\nYou have to pass a maximum number of open connections to ensure\nthe server will automatically reject (close) connections once this limit\nis exceeded. In this case, it will emit an `error` event to inform about\nthis and no `connection` event will be emitted.\n\n```php\n$server = new React\\Socket\\LimitingServer($server, 100);\n$server->on('connection', function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write('hello there!' . PHP_EOL);\n    â€¦\n});\n```\n\nYou MAY pass a `null` limit in order to put no limit on the number of\nopen connections and keep accepting new connection until you run out of\noperating system resources (such as open file handles). This may be\nuseful if you do not want to take care of applying a limit but still want\nto use the `getConnections()` method.\n\nYou can optionally configure the server to pause accepting new\nconnections once the connection limit is reached. In this case, it will\npause the underlying server and no longer process any new connections at\nall, thus also no longer closing any excessive connections.\nThe underlying operating system is responsible for keeping a backlog of\npending connections until its limit is reached, at which point it will\nstart rejecting further connections.\nOnce the server is below the connection limit, it will continue consuming\nconnections from the backlog and will process any outstanding data on\neach connection.\nThis mode may be useful for some protocols that are designed to wait for\na response message (such as HTTP), but may be less useful for other\nprotocols that demand immediate responses (such as a \"welcome\" message in\nan interactive chat).\n\n```php\n$server = new React\\Socket\\LimitingServer($server, 100, true);\n$server->on('connection', function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write('hello there!' . PHP_EOL);\n    â€¦\n});\n```\n\n##### getConnections()\n\nThe `getConnections(): ConnectionInterface[]` method can be used to\nreturn an array with all currently active connections.\n\n```php\nforeach ($server->getConnection() as $connection) {\n    $connection->write('Hi!');\n}\n```\n\n## Client usage\n\n### ConnectorInterface\n\nThe `ConnectorInterface` is responsible for providing an interface for\nestablishing streaming connections, such as a normal TCP/IP connection.\n\nThis is the main interface defined in this package and it is used throughout\nReact's vast ecosystem.\n\nMost higher-level components (such as HTTP, database or other networking\nservice clients) accept an instance implementing this interface to create their\nTCP/IP connection to the underlying networking service.\nThis is usually done via dependency injection, so it's fairly simple to actually\nswap this implementation against any other implementation of this interface.\n\nThe interface only offers a single method:\n\n#### connect()\n\nThe `connect(string $uri): PromiseInterface<ConnectionInterface>` method can be used to\ncreate a streaming connection to the given remote address.\n\nIt returns a [Promise](https://github.com/reactphp/promise) which either\nfulfills with a stream implementing [`ConnectionInterface`](#connectioninterface)\non success or rejects with an `Exception` if the connection is not successful:\n\n```php\n$connector->connect('google.com:443')->then(\n    function (React\\Socket\\ConnectionInterface $connection) {\n        // connection successfully established\n    },\n    function (Exception $error) {\n        // failed to connect due to $error\n    }\n);\n```\n\nSee also [`ConnectionInterface`](#connectioninterface) for more details.\n\nThe returned Promise MUST be implemented in such a way that it can be\ncancelled when it is still pending. Cancelling a pending promise MUST\nreject its value with an `Exception`. It SHOULD clean up any underlying\nresources and references as applicable:\n\n```php\n$promise = $connector->connect($uri);\n\n$promise->cancel();\n```\n\n### Connector\n\nThe `Connector` class is the main class in this package that implements the\n[`ConnectorInterface`](#connectorinterface) and allows you to create streaming connections.\n\nYou can use this connector to create any kind of streaming connections, such\nas plaintext TCP/IP, secure TLS or local Unix connection streams.\n\nIt binds to the main event loop and can be used like this:\n\n```php\n$connector = new React\\Socket\\Connector();\n\n$connector->connect($uri)->then(function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write('...');\n    $connection->end();\n}, function (Exception $e) {\n    echo 'Error: ' . $e->getMessage() . PHP_EOL;\n});\n```\n\nIn order to create a plaintext TCP/IP connection, you can simply pass a host\nand port combination like this:\n\n```php\n$connector->connect('www.google.com:80')->then(function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write('...');\n    $connection->end();\n});\n```\n\n> If you do no specify a URI scheme in the destination URI, it will assume\n  `tcp://` as a default and establish a plaintext TCP/IP connection.\n  Note that TCP/IP connections require a host and port part in the destination\n  URI like above, all other URI components are optional.\n\nIn order to create a secure TLS connection, you can use the `tls://` URI scheme\nlike this:\n\n```php\n$connector->connect('tls://www.google.com:443')->then(function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write('...');\n    $connection->end();\n});\n```\n\nIn order to create a local Unix domain socket connection, you can use the\n`unix://` URI scheme like this:\n\n```php\n$connector->connect('unix:///tmp/demo.sock')->then(function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write('...');\n    $connection->end();\n});\n```\n\n> The [`getRemoteAddress()`](#getremoteaddress) method will return the target\n  Unix domain socket (UDS) path as given to the `connect()` method, including\n  the `unix://` scheme, for example `unix:///tmp/demo.sock`.\n  The [`getLocalAddress()`](#getlocaladdress) method will most likely return a\n  `null` value as this value is not applicable to UDS connections here.\n\nUnder the hood, the `Connector` is implemented as a *higher-level facade*\nfor the lower-level connectors implemented in this package. This means it\nalso shares all of their features and implementation details.\nIf you want to typehint in your higher-level protocol implementation, you SHOULD\nuse the generic [`ConnectorInterface`](#connectorinterface) instead.\n\nAs of `v1.4.0`, the `Connector` class defaults to using the\n[happy eyeballs algorithm](https://en.wikipedia.org/wiki/Happy_Eyeballs) to\nautomatically connect over IPv4 or IPv6 when a hostname is given.\nThis automatically attempts to connect using both IPv4 and IPv6 at the same time\n(preferring IPv6), thus avoiding the usual problems faced by users with imperfect\nIPv6 connections or setups.\nIf you want to revert to the old behavior of only doing an IPv4 lookup and\nonly attempt a single IPv4 connection, you can set up the `Connector` like this:\n\n```php\n$connector = new React\\Socket\\Connector([\n    'happy_eyeballs' => false\n]);\n```\n\nSimilarly, you can also affect the default DNS behavior as follows.\nThe `Connector` class will try to detect your system DNS settings (and uses\nGoogle's public DNS server `8.8.8.8` as a fallback if unable to determine your\nsystem settings) to resolve all public hostnames into underlying IP addresses by\ndefault.\nIf you explicitly want to use a custom DNS server (such as a local DNS relay or\na company wide DNS server), you can set up the `Connector` like this:\n\n```php\n$connector = new React\\Socket\\Connector([\n    'dns' => '127.0.1.1'\n]);\n\n$connector->connect('localhost:80')->then(function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write('...');\n    $connection->end();\n});\n```\n\nIf you do not want to use a DNS resolver at all and want to connect to IP\naddresses only, you can also set up your `Connector` like this:\n\n```php\n$connector = new React\\Socket\\Connector([\n    'dns' => false\n]);\n\n$connector->connect('127.0.0.1:80')->then(function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write('...');\n    $connection->end();\n});\n```\n\nAdvanced: If you need a custom DNS `React\\Dns\\Resolver\\ResolverInterface` instance, you\ncan also set up your `Connector` like this:\n\n```php\n$dnsResolverFactory = new React\\Dns\\Resolver\\Factory();\n$resolver = $dnsResolverFactory->createCached('127.0.1.1');\n\n$connector = new React\\Socket\\Connector([\n    'dns' => $resolver\n]);\n\n$connector->connect('localhost:80')->then(function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write('...');\n    $connection->end();\n});\n```\n\nBy default, the `tcp://` and `tls://` URI schemes will use timeout value that\nrespects your `default_socket_timeout` ini setting (which defaults to 60s).\nIf you want a custom timeout value, you can simply pass this like this:\n\n```php\n$connector = new React\\Socket\\Connector([\n    'timeout' => 10.0\n]);\n```\n\nSimilarly, if you do not want to apply a timeout at all and let the operating\nsystem handle this, you can pass a boolean flag like this:\n\n```php\n$connector = new React\\Socket\\Connector([\n    'timeout' => false\n]);\n```\n\nBy default, the `Connector` supports the `tcp://`, `tls://` and `unix://`\nURI schemes. If you want to explicitly prohibit any of these, you can simply\npass boolean flags like this:\n\n```php\n// only allow secure TLS connections\n$connector = new React\\Socket\\Connector([\n    'tcp' => false,\n    'tls' => true,\n    'unix' => false,\n));\n\n$connector->connect('tls://google.com:443')->then(function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write('...');\n    $connection->end();\n});\n```\n\nThe `tcp://` and `tls://` also accept additional context options passed to\nthe underlying connectors.\nIf you want to explicitly pass additional context options, you can simply\npass arrays of context options like this:\n\n```php\n// allow insecure TLS connections\n$connector = new React\\Socket\\Connector([\n    'tcp' => [\n        'bindto' => '192.168.0.1:0'\n    ],\n    'tls' => [\n        'verify_peer' => false,\n        'verify_peer_name' => false\n    ],\n]);\n\n$connector->connect('tls://localhost:443')->then(function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write('...');\n    $connection->end();\n});\n```\n\nBy default, this connector supports TLSv1.0+ and excludes support for legacy\nSSLv2/SSLv3. You can also explicitly choose the TLS version you\nwant to negotiate with the remote side:\n\n```php\n$connector = new React\\Socket\\Connector([\n    'tls' => [\n        'crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT\n    ]\n]);\n```\n\n> For more details about context options, please refer to the PHP documentation\n  about [socket context options](https://www.php.net/manual/en/context.socket.php)\n  and [SSL context options](https://www.php.net/manual/en/context.ssl.php).\n\nAdvanced: By default, the `Connector` supports the `tcp://`, `tls://` and\n`unix://` URI schemes.\nFor this, it sets up the required connector classes automatically.\nIf you want to explicitly pass custom connectors for any of these, you can simply\npass an instance implementing the `ConnectorInterface` like this:\n\n```php\n$dnsResolverFactory = new React\\Dns\\Resolver\\Factory();\n$resolver = $dnsResolverFactory->createCached('127.0.1.1');\n$tcp = new React\\Socket\\HappyEyeBallsConnector(null, new React\\Socket\\TcpConnector(), $resolver);\n\n$tls = new React\\Socket\\SecureConnector($tcp);\n\n$unix = new React\\Socket\\UnixConnector();\n\n$connector = new React\\Socket\\Connector([\n    'tcp' => $tcp,\n    'tls' => $tls,\n    'unix' => $unix,\n\n    'dns' => false,\n    'timeout' => false,\n]);\n\n$connector->connect('google.com:80')->then(function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write('...');\n    $connection->end();\n});\n```\n\n> Internally, the `tcp://` connector will always be wrapped by the DNS resolver,\n  unless you disable DNS like in the above example. In this case, the `tcp://`\n  connector receives the actual hostname instead of only the resolved IP address\n  and is thus responsible for performing the lookup.\n  Internally, the automatically created `tls://` connector will always wrap the\n  underlying `tcp://` connector for establishing the underlying plaintext\n  TCP/IP connection before enabling secure TLS mode. If you want to use a custom\n  underlying `tcp://` connector for secure TLS connections only, you may\n  explicitly pass a `tls://` connector like above instead.\n  Internally, the `tcp://` and `tls://` connectors will always be wrapped by\n  `TimeoutConnector`, unless you disable timeouts like in the above example.\n\nThis class takes an optional `LoopInterface|null $loop` parameter that can be used to\npass the event loop instance to use for this object. You can use a `null` value\nhere in order to use the [default loop](https://github.com/reactphp/event-loop#loop).\nThis value SHOULD NOT be given unless you're sure you want to explicitly use a\ngiven event loop instance.\n\n### Advanced client usage\n\n#### TcpConnector\n\nThe `TcpConnector` class implements the\n[`ConnectorInterface`](#connectorinterface) and allows you to create plaintext\nTCP/IP connections to any IP-port-combination:\n\n```php\n$tcpConnector = new React\\Socket\\TcpConnector();\n\n$tcpConnector->connect('127.0.0.1:80')->then(function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write('...');\n    $connection->end();\n});\n```\n\nSee also the [examples](examples).\n\nPending connection attempts can be cancelled by cancelling its pending promise like so:\n\n```php\n$promise = $tcpConnector->connect('127.0.0.1:80');\n\n$promise->cancel();\n```\n\nCalling `cancel()` on a pending promise will close the underlying socket\nresource, thus cancelling the pending TCP/IP connection, and reject the\nresulting promise.\n\nThis class takes an optional `LoopInterface|null $loop` parameter that can be used to\npass the event loop instance to use for this object. You can use a `null` value\nhere in order to use the [default loop](https://github.com/reactphp/event-loop#loop).\nThis value SHOULD NOT be given unless you're sure you want to explicitly use a\ngiven event loop instance.\n\nYou can optionally pass additional\n[socket context options](https://www.php.net/manual/en/context.socket.php)\nto the constructor like this:\n\n```php\n$tcpConnector = new React\\Socket\\TcpConnector(null, [\n    'bindto' => '192.168.0.1:0'\n]);\n```\n\nNote that this class only allows you to connect to IP-port-combinations.\nIf the given URI is invalid, does not contain a valid IP address and port\nor contains any other scheme, it will reject with an\n`InvalidArgumentException`:\n\nIf the given URI appears to be valid, but connecting to it fails (such as if\nthe remote host rejects the connection etc.), it will reject with a\n`RuntimeException`.\n\nIf you want to connect to hostname-port-combinations, see also the following chapter.\n\n> Advanced usage: Internally, the `TcpConnector` allocates an empty *context*\nresource for each stream resource.\nIf the destination URI contains a `hostname` query parameter, its value will\nbe used to set up the TLS peer name.\nThis is used by the `SecureConnector` and `DnsConnector` to verify the peer\nname and can also be used if you want a custom TLS peer name.\n\n#### HappyEyeBallsConnector\n\nThe `HappyEyeBallsConnector` class implements the\n[`ConnectorInterface`](#connectorinterface) and allows you to create plaintext\nTCP/IP connections to any hostname-port-combination. Internally it implements the \nhappy eyeballs algorithm from [`RFC6555`](https://tools.ietf.org/html/rfc6555) and \n[`RFC8305`](https://tools.ietf.org/html/rfc8305) to support IPv6 and IPv4 hostnames.\n\nIt does so by decorating a given `TcpConnector` instance so that it first\nlooks up the given domain name via DNS (if applicable) and then establishes the\nunderlying TCP/IP connection to the resolved target IP address.\n\nMake sure to set up your DNS resolver and underlying TCP connector like this:\n\n```php\n$dnsResolverFactory = new React\\Dns\\Resolver\\Factory();\n$dns = $dnsResolverFactory->createCached('8.8.8.8');\n\n$dnsConnector = new React\\Socket\\HappyEyeBallsConnector(null, $tcpConnector, $dns);\n\n$dnsConnector->connect('www.google.com:80')->then(function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write('...');\n    $connection->end();\n});\n```\n\nSee also the [examples](examples).\n\nPending connection attempts can be cancelled by cancelling its pending promise like so:\n\n```php\n$promise = $dnsConnector->connect('www.google.com:80');\n\n$promise->cancel();\n```\n\nCalling `cancel()` on a pending promise will cancel the underlying DNS lookups\nand/or the underlying TCP/IP connection(s) and reject the resulting promise.\n\nThis class takes an optional `LoopInterface|null $loop` parameter that can be used to\npass the event loop instance to use for this object. You can use a `null` value\nhere in order to use the [default loop](https://github.com/reactphp/event-loop#loop).\nThis value SHOULD NOT be given unless you're sure you want to explicitly use a\ngiven event loop instance.\n\n> Advanced usage: Internally, the `HappyEyeBallsConnector` relies on a `Resolver` to\nlook up the IP addresses for the given hostname.\nIt will then replace the hostname in the destination URI with this IP's and\nappend a `hostname` query parameter and pass this updated URI to the underlying\nconnector. \nThe Happy Eye Balls algorithm describes looking the IPv6 and IPv4 address for \nthe given hostname so this connector sends out two DNS lookups for the A and \nAAAA records. It then uses all IP addresses (both v6 and v4) and tries to \nconnect to all of them with a 50ms interval in between. Alterating between IPv6 \nand IPv4 addresses. When a connection is established all the other DNS lookups \nand connection attempts are cancelled.\n\n#### DnsConnector\n\nThe `DnsConnector` class implements the\n[`ConnectorInterface`](#connectorinterface) and allows you to create plaintext\nTCP/IP connections to any hostname-port-combination.\n\nIt does so by decorating a given `TcpConnector` instance so that it first\nlooks up the given domain name via DNS (if applicable) and then establishes the\nunderlying TCP/IP connection to the resolved target IP address.\n\nMake sure to set up your DNS resolver and underlying TCP connector like this:\n\n```php\n$dnsResolverFactory = new React\\Dns\\Resolver\\Factory();\n$dns = $dnsResolverFactory->createCached('8.8.8.8');\n\n$dnsConnector = new React\\Socket\\DnsConnector($tcpConnector, $dns);\n\n$dnsConnector->connect('www.google.com:80')->then(function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write('...');\n    $connection->end();\n});\n```\n\nSee also the [examples](examples).\n\nPending connection attempts can be cancelled by cancelling its pending promise like so:\n\n```php\n$promise = $dnsConnector->connect('www.google.com:80');\n\n$promise->cancel();\n```\n\nCalling `cancel()` on a pending promise will cancel the underlying DNS lookup\nand/or the underlying TCP/IP connection and reject the resulting promise.\n\n> Advanced usage: Internally, the `DnsConnector` relies on a `React\\Dns\\Resolver\\ResolverInterface`\nto look up the IP address for the given hostname.\nIt will then replace the hostname in the destination URI with this IP and\nappend a `hostname` query parameter and pass this updated URI to the underlying\nconnector.\nThe underlying connector is thus responsible for creating a connection to the\ntarget IP address, while this query parameter can be used to check the original\nhostname and is used by the `TcpConnector` to set up the TLS peer name.\nIf a `hostname` is given explicitly, this query parameter will not be modified,\nwhich can be useful if you want a custom TLS peer name.\n\n#### SecureConnector\n\nThe `SecureConnector` class implements the\n[`ConnectorInterface`](#connectorinterface) and allows you to create secure\nTLS (formerly known as SSL) connections to any hostname-port-combination.\n\nIt does so by decorating a given `DnsConnector` instance so that it first\ncreates a plaintext TCP/IP connection and then enables TLS encryption on this\nstream.\n\n```php\n$secureConnector = new React\\Socket\\SecureConnector($dnsConnector);\n\n$secureConnector->connect('www.google.com:443')->then(function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write(\"GET / HTTP/1.0\\r\\nHost: www.google.com\\r\\n\\r\\n\");\n    ...\n});\n```\n\nSee also the [examples](examples).\n\nPending connection attempts can be cancelled by cancelling its pending promise like so:\n\n```php\n$promise = $secureConnector->connect('www.google.com:443');\n\n$promise->cancel();\n```\n\nCalling `cancel()` on a pending promise will cancel the underlying TCP/IP\nconnection and/or the SSL/TLS negotiation and reject the resulting promise.\n\nThis class takes an optional `LoopInterface|null $loop` parameter that can be used to\npass the event loop instance to use for this object. You can use a `null` value\nhere in order to use the [default loop](https://github.com/reactphp/event-loop#loop).\nThis value SHOULD NOT be given unless you're sure you want to explicitly use a\ngiven event loop instance.\n\nYou can optionally pass additional\n[SSL context options](https://www.php.net/manual/en/context.ssl.php)\nto the constructor like this:\n\n```php\n$secureConnector = new React\\Socket\\SecureConnector($dnsConnector, null, [\n    'verify_peer' => false,\n    'verify_peer_name' => false\n]);\n```\n\nBy default, this connector supports TLSv1.0+ and excludes support for legacy\nSSLv2/SSLv3. You can also explicitly choose the TLS version you\nwant to negotiate with the remote side:\n\n```php\n$secureConnector = new React\\Socket\\SecureConnector($dnsConnector, null, [\n    'crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT\n]);\n```\n\n> Advanced usage: Internally, the `SecureConnector` relies on setting up the\nrequired *context options* on the underlying stream resource.\nIt should therefor be used with a `TcpConnector` somewhere in the connector\nstack so that it can allocate an empty *context* resource for each stream\nresource and verify the peer name.\nFailing to do so may result in a TLS peer name mismatch error or some hard to\ntrace race conditions, because all stream resources will use a single, shared\n*default context* resource otherwise.\n\n#### TimeoutConnector\n\nThe `TimeoutConnector` class implements the\n[`ConnectorInterface`](#connectorinterface) and allows you to add timeout\nhandling to any existing connector instance.\n\nIt does so by decorating any given [`ConnectorInterface`](#connectorinterface)\ninstance and starting a timer that will automatically reject and abort any\nunderlying connection attempt if it takes too long.\n\n```php\n$timeoutConnector = new React\\Socket\\TimeoutConnector($connector, 3.0);\n\n$timeoutConnector->connect('google.com:80')->then(function (React\\Socket\\ConnectionInterface $connection) {\n    // connection succeeded within 3.0 seconds\n});\n```\n\nSee also any of the [examples](examples).\n\nThis class takes an optional `LoopInterface|null $loop` parameter that can be used to\npass the event loop instance to use for this object. You can use a `null` value\nhere in order to use the [default loop](https://github.com/reactphp/event-loop#loop).\nThis value SHOULD NOT be given unless you're sure you want to explicitly use a\ngiven event loop instance.\n\nPending connection attempts can be cancelled by cancelling its pending promise like so:\n\n```php\n$promise = $timeoutConnector->connect('google.com:80');\n\n$promise->cancel();\n```\n\nCalling `cancel()` on a pending promise will cancel the underlying connection\nattempt, abort the timer and reject the resulting promise.\n\n#### UnixConnector\n\nThe `UnixConnector` class implements the\n[`ConnectorInterface`](#connectorinterface) and allows you to connect to\nUnix domain socket (UDS) paths like this:\n\n```php\n$connector = new React\\Socket\\UnixConnector();\n\n$connector->connect('/tmp/demo.sock')->then(function (React\\Socket\\ConnectionInterface $connection) {\n    $connection->write(\"HELLO\\n\");\n});\n```\n\nConnecting to Unix domain sockets is an atomic operation, i.e. its promise will\nsettle (either resolve or reject) immediately.\nAs such, calling `cancel()` on the resulting promise has no effect.\n\n> The [`getRemoteAddress()`](#getremoteaddress) method will return the target\n  Unix domain socket (UDS) path as given to the `connect()` method, prepended\n  with the `unix://` scheme, for example `unix:///tmp/demo.sock`.\n  The [`getLocalAddress()`](#getlocaladdress) method will most likely return a\n  `null` value as this value is not applicable to UDS connections here.\n\nThis class takes an optional `LoopInterface|null $loop` parameter that can be used to\npass the event loop instance to use for this object. You can use a `null` value\nhere in order to use the [default loop](https://github.com/reactphp/event-loop#loop).\nThis value SHOULD NOT be given unless you're sure you want to explicitly use a\ngiven event loop instance.\n\n#### FixedUriConnector\n\nThe `FixedUriConnector` class implements the\n[`ConnectorInterface`](#connectorinterface) and decorates an existing Connector\nto always use a fixed, preconfigured URI.\n\nThis can be useful for consumers that do not support certain URIs, such as\nwhen you want to explicitly connect to a Unix domain socket (UDS) path\ninstead of connecting to a default address assumed by an higher-level API:\n\n```php\n$connector = new React\\Socket\\FixedUriConnector(\n    'unix:///var/run/docker.sock',\n    new React\\Socket\\UnixConnector()\n);\n\n// destination will be ignored, actually connects to Unix domain socket\n$promise = $connector->connect('localhost:80');\n```\n\n## Install\n\nThe recommended way to install this library is [through Composer](https://getcomposer.org/).\n[New to Composer?](https://getcomposer.org/doc/00-intro.md)\n\nOnce released, this project will follow [SemVer](https://semver.org/).\nAt the moment, this will install the latest development version:\n\n```bash\ncomposer require react/socket:^3@dev\n```\n\nSee also the [CHANGELOG](CHANGELOG.md) for details about version upgrades.\n\nThis project aims to run on any platform and thus does not require any PHP\nextensions and supports running on PHP 7.1 through current PHP 8+.\nIt's *highly recommended to use the latest supported PHP version* for this project.\n\nLegacy PHP < 7.3.3 (and PHP < 7.2.15) suffers from a bug where feof() might\nblock with 100% CPU usage on fragmented TLS records.\nWe try to work around this by always consuming the complete receive\nbuffer at once to avoid stale data in TLS buffers. This is known to\nwork around high CPU usage for well-behaving peers, but this may\ncause very large data chunks for high throughput scenarios. The buggy\nbehavior can still be triggered due to network I/O buffers or\nmalicious peers on affected versions, upgrading is highly recommended.\n\nLegacy PHP < 7.1.4 suffers from a bug when writing big\nchunks of data over TLS streams at once.\nWe try to work around this by limiting the write chunk size to 8192\nbytes for older PHP versions only.\nThis is only a work-around and has a noticable performance penalty on\naffected versions.\n\n## Tests\n\nTo run the test suite, you first need to clone this repo and then install all\ndependencies [through Composer](https://getcomposer.org/):\n\n```bash\ncomposer install\n```\n\nTo run the test suite, go to the project root and run:\n\n```bash\nvendor/bin/phpunit\n```\n\nThe test suite also contains a number of functional integration tests that rely\non a stable internet connection.\nIf you do not want to run these, they can simply be skipped like this:\n\n```bash\nvendor/bin/phpunit --exclude-group internet\n```\n\n## License\n\nMIT, see [LICENSE file](LICENSE).\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.4873046875,
          "content": "{\n    \"name\": \"react/socket\",\n    \"description\": \"Async, streaming plaintext TCP/IP and secure TLS socket server and client connections for ReactPHP\",\n    \"keywords\": [\"async\", \"socket\", \"stream\", \"connection\", \"ReactPHP\"],\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Christian LÃ¼ck\",\n            \"homepage\": \"https://clue.engineering/\",\n            \"email\": \"christian@clue.engineering\"\n        },\n        {\n            \"name\": \"Cees-Jan Kiewiet\",\n            \"homepage\": \"https://wyrihaximus.net/\",\n            \"email\": \"reactphp@ceesjankiewiet.nl\"\n        },\n        {\n            \"name\": \"Jan Sorgalla\",\n            \"homepage\": \"https://sorgalla.com/\",\n            \"email\": \"jsorgalla@gmail.com\"\n        },\n        {\n            \"name\": \"Chris Boden\",\n            \"homepage\": \"https://cboden.dev/\",\n            \"email\": \"cboden@gmail.com\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=7.1\",\n        \"evenement/evenement\": \"^3.0 || ^2.0 || ^1.0\",\n        \"react/dns\": \"^1.13\",\n        \"react/event-loop\": \"^1.2\",\n        \"react/promise\": \"^3.2 || ^2.6 || ^1.2.1\",\n        \"react/stream\": \"^1.4\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^9.6 || ^7.5\",\n        \"react/async\": \"^4.3 || ^3\",\n        \"react/promise-stream\": \"^1.4\",\n        \"react/promise-timer\": \"^1.11\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"React\\\\Socket\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"React\\\\Tests\\\\Socket\\\\\": \"tests/\"\n        }\n    }\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 1.0146484375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!-- PHPUnit configuration file with new format for PHPUnit 9.6+ -->\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.6/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         cacheResult=\"false\"\n         colors=\"true\"\n         convertDeprecationsToExceptions=\"true\">\n    <testsuites>\n        <testsuite name=\"React Test Suite\">\n            <directory>./tests/</directory>\n        </testsuite>\n    </testsuites>\n    <coverage>\n        <include>\n            <directory>./src/</directory>\n        </include>\n    </coverage>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\" />\n        <!-- Evaluate assertions, requires running with \"php -d zend.assertions=1 vendor/bin/phpunit\" -->\n        <!-- <ini name=\"zend.assertions\" value=\"1\" /> -->\n        <ini name=\"assert.active\" value=\"1\" />\n        <ini name=\"assert.exception\" value=\"1\" />\n        <ini name=\"assert.bail\" value=\"0\" />\n    </php>\n</phpunit>\n"
        },
        {
          "name": "phpunit.xml.legacy",
          "type": "blob",
          "size": 0.94140625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!-- PHPUnit configuration file with old format for legacy PHPUnit -->\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/7.5/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\">\n    <testsuites>\n        <testsuite name=\"React Test Suite\">\n            <directory>./tests/</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist>\n            <directory>./src/</directory>\n        </whitelist>\n    </filter>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\" />\n        <!-- Evaluate assertions, requires running with \"php -d zend.assertions=1 vendor/bin/phpunit\" -->\n        <!-- <ini name=\"zend.assertions\" value=\"1\" /> -->\n        <ini name=\"assert.active\" value=\"1\" />\n        <ini name=\"assert.exception\" value=\"1\" />\n        <ini name=\"assert.bail\" value=\"0\" />\n    </php>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}