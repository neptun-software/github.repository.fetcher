{
  "metadata": {
    "timestamp": 1736712052831,
    "page": 582,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "TGMPA/TGM-Plugin-Activation",
      "stars": 1761,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4658203125,
          "content": "# This file is for unifying the coding style for different editors and IDEs\n# editorconfig.org\n\n# WordPress Coding Standards\n# http://make.wordpress.org/core/handbook/coding-standards/\n\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nindent_style = tab\n\n[{.*rc,*.json,*.yml}]\nindent_style = space\nindent_size = 2\n\n[composer.json]\nindent_size = 4\n\n[*.txt]\nend_of_line = crlf\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.8349609375,
          "content": "#\n# Exclude these files from release archives.\n# This will also make them unavailable when using Composer with `--prefer-dist`.\n# If you develop for TGMPA using Composer, use `--prefer-source`.\n# https://www.reddit.com/r/PHP/comments/2jzp6k/i_dont_need_your_tests_in_my_production\n# https://blog.madewithlove.be/post/gitattributes/\n#\n/.editorconfig export-ignore\n/.gitattributes export-ignore\n/.gitignore export-ignore\n/.phpcs.xml export-ignore\n/.phpcs.xml.dist export-ignore\n/.scrutinizer.yml export-ignore\n/.travis.yml export-ignore\n/CONTRIBUTING.md export-ignore\n/phpcs.xml export-ignore\n/phpcs.xml.dist export-ignore\n\n#\n# Auto detect text files and perform LF normalization\n# http://davidlaing.com/2012/09/19/customise-your-gitattributes-to-become-a-git-ninja/\n#\n* text=auto\n\n#\n# The above will handle all files NOT found below\n#\n*.md text\n*.php text\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0458984375,
          "content": "/vendor/\n/composer.lock\n/phpcs.xml\n/.phpcs.xml\n"
        },
        {
          "name": ".scrutinizer.yml",
          "type": "blob",
          "size": 7.8076171875,
          "content": "tools:\n    php_sim: true\n    php_pdepend: true\n    php_analyzer: true\n    sensiolabs_security_checker: true\n\nchecks:\n    php:\n        useless_calls: true\n        unused_variables: true\n        unused_properties: true\n        unused_parameters: true\n        unused_methods: true\n        unreachable_code: true\n        too_many_arguments: true\n        no_unnecessary_if: true\n        no_unnecessary_final_modifier: true\n        no_empty_statements: true\n        fix_use_statements:\n            remove_unused: true\n            preserve_multiple: false\n            preserve_blanklines: false\n            order_alphabetically: true\n        avoid_useless_overridden_methods: true\n        use_self_instead_of_fqcn: true\n        uppercase_constants: true\n        single_namespace_per_use: false\n        simplify_boolean_return: true\n        require_scope_for_properties: true\n        require_scope_for_methods: true\n        remove_extra_empty_lines: true\n        psr2_switch_declaration: true\n        psr2_class_declaration: true\n        properties_in_camelcaps: false\n        prefer_while_loop_over_for_loop: true\n        parameters_in_camelcaps: false\n        optional_parameters_at_the_end: true\n        no_underscore_prefix_in_properties: true\n        no_underscore_prefix_in_methods: true\n        no_trailing_whitespace: true\n        no_new_line_at_end_of_file: false\n        no_error_suppression: false\n        no_commented_out_code: true\n        newline_at_end_of_file: true\n        naming_conventions:\n            local_variable: '^[a-z][a-z_0-9]*$'\n            abstract_class_name: ^Abstract|Factory$\n            utility_class_name: 'Utils?$'\n            constant_name: '^[A-Z][A-Z0-9]*(?:_[A-Z0-9]+)*$'\n            property_name: '^[a-z][a-z_0-9]*$'\n            method_name: '^(?:[a-z]|__)[a-z_0-9]*$'\n            parameter_name: '^[a-z][a-z_0-9]*$'\n            interface_name: '^[A-Z][a-zA-Z0-9_]*Interface$'\n            type_name: '^[A-Z][a-zA-Z0-9_]*$'\n            exception_name: '^[A-Z][a-zA-Z0-9_]*Exception$'\n            isser_method_name: '^(?:is|has|should|may|supports)'\n        function_in_camel_caps: false\n        fix_line_ending: true\n        encourage_single_quotes: true\n        encourage_postdec_operator: true\n        classes_in_camel_caps: false\n        blank_line_after_namespace_declaration: true\n        avoid_todo_comments: true\n        avoid_perl_style_comments: true\n        avoid_multiple_statements_on_same_line: true\n        avoid_length_functions_in_loops: true\n        avoid_fixme_comments: true\n        avoid_closing_tag: true\n        avoid_aliased_php_functions: true\n        align_assignments: true\n        duplication: true\n        sql_injection_vulnerabilities: true\n        security_vulnerabilities: true\n        no_eval: true\n        switch_fallthrough_commented: true\n        phpunit_assertions: false\n        overriding_private_members: true\n        non_commented_empty_catch_block: true\n        no_short_variable_names:\n            minimum: '3'\n        no_short_method_names:\n            minimum: '3'\n        no_long_variable_names:\n            maximum: '30'\n        no_goto: true\n        avoid_usage_of_logical_operators: true\n        return_doc_comments: true\n        return_doc_comment_if_not_inferrable: true\n        parameter_doc_comments: true\n        param_doc_comment_if_not_inferrable: true\n        more_specific_types_in_doc_comments: false\n        fix_doc_comments: true\n        verify_property_names: true\n        verify_argument_usable_as_reference: true\n        verify_access_scope_valid: true\n        variable_existence: true\n        use_statement_alias_conflict: true\n        symfony_request_injection: true\n        precedence_mistakes: true\n        precedence_in_conditions: true\n        parameter_non_unique: true\n        no_property_on_interface: true\n        no_non_implemented_abstract_methods: true\n        no_duplicate_arguments: true\n        missing_arguments: true\n        method_calls_on_non_object: true\n        instanceof_class_exists: true\n        foreach_usable_as_reference: true\n        foreach_traversable: true\n        encourage_shallow_comparison: true\n        closure_use_not_conflicting: true\n        closure_use_modifiable: true\n        catch_class_exists: true\n        avoid_entity_manager_injection: true\n        avoid_conflicting_incrementers: true\n        assignment_of_null_return: true\n        argument_type_checks: true\n        avoid_unnecessary_concatenation: true\n        deprecated_code_usage: true\n        side_effects_or_types: false\n        require_php_tag_first: true\n        php5_style_constructor: true\n        one_class_per_file: false\n        no_short_open_tag: true\n        no_global_keyword: true\n        no_exit: false\n        avoid_superglobals: false\n        avoid_duplicate_types: true\n        avoid_corrupting_byteorder_marks: true\n        no_debug_code: true\n        code_rating: true\n\ncoding_style:\n    php:\n        indentation:\n            general:\n                use_tabs: true\n                size: 4\n            switch:\n                indent_case: true\n        spaces:\n            before_parentheses:\n                function_declaration: false\n                closure_definition: false\n                function_call: false\n                if: true\n                for: true\n                while: true\n                switch: true\n                catch: true\n                array_initializer: false\n            around_operators:\n                assignment: true\n                logical: true\n                equality: true\n                relational: true\n                bitwise: true\n                additive: true\n                multiplicative: true\n                shift: true\n                unary_additive: false\n                concatenation: true\n                negation: true\n            before_left_brace:\n                class: true\n                function: true\n                if: true\n                else: true\n                for: true\n                while: true\n                do: true\n                switch: true\n                try: true\n                catch: true\n                finally: true\n            before_keywords:\n                else: true\n                while: true\n                catch: true\n                finally: true\n            within:\n                brackets: false\n                array_initializer: true\n                grouping: true\n                function_call: true\n                function_declaration: true\n                if: true\n                for: true\n                while: true\n                switch: true\n                catch: true\n                type_cast: false\n            ternary_operator:\n                before_condition: true\n                after_condition: true\n                before_alternative: true\n                after_alternative: true\n                in_short_version: true\n            other:\n                before_comma: false\n                after_comma: true\n                before_semicolon: false\n                after_semicolon: true\n                after_type_cast: true\n        braces:\n            classes_functions:\n                class: end-of-line\n                function: end-of-line\n                closure: end-of-line\n            if:\n                opening: end-of-line\n                always: true\n                else_on_new_line: false\n            for:\n                opening: end-of-line\n                always: true\n            while:\n                opening: end-of-line\n                always: true\n            do_while:\n                opening: end-of-line\n                always: true\n                while_on_new_line: false\n            switch:\n                opening: end-of-line\n            try:\n                opening: end-of-line\n                catch_on_new_line: false\n                finally_on_new_line: false\n        upper_lower_casing:\n            keywords:\n                general: lower\n            constants:\n                true_false_null: lower\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.0849609375,
          "content": "# Travis CI (MIT License) configuration file\n# @link https://travis-ci.org/\n\n# Use new container based environment\nsudo: false\n\ndist: trusty\n\ncache:\n  directories:\n    # Cache directory for older Composer versions.\n    - $HOME/.composer/cache/files\n    # Cache directory for more recent Composer versions.\n    - $HOME/.cache/composer/files\n\n# Declare project language.\n# @link http://about.travis-ci.org/docs/user/languages/php/\nlanguage: php\n\n# Declare versions of PHP to use. Use one decimal max.\n# @link http://docs.travis-ci.com/user/build-configuration/\nmatrix:\n    fast_finish: true\n\n    include:\n        # Current $required_php_version for WordPress: 5.2.4\n        # aliased to 5.2.17\n        - php: '5.2'\n          dist: precise\n        # aliased to a recent 5.4.x version\n        - php: '5.4'\n        # aliased to a recent 5.6.x version\n        - php: '5.6'\n        # aliased to a recent 7.0.x version\n        - php: '7.0'\n        # aliased to a recent 7.3.x version\n        - php: '7.3'\n          env: SNIFF=1\n        # 7.4.x/develop version\n        - php: \"7.4snapshot\"\n\nbefore_script:\n  # Speed up build time by disabling Xdebug when its not needed.\n  - phpenv config-rm xdebug.ini || echo 'No xdebug config.'\n  # Install CodeSniffer and external standards for the CS checks.\n  - if [[ \"$SNIFF\" == \"1\" ]]; then composer install --dev; fi\n\n# Run test script commands.\n# All commands must exit with code 0 on success. Anything else is considered failure.\nscript:\n  # Search for PHP syntax errors.\n  - find -L . -path ./vendor -prune -o -name '*.php' -print0 | xargs -0 -n 1 -P 4 php -l\n  # WordPress Coding Standards.\n  # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards\n  # @link https://github.com/squizlabs/PHP_CodeSniffer\n  # All of the usual config flags are held in phpcs.xml\n  - if [[ \"$SNIFF\" == \"1\" ]]; then $(pwd)/vendor/bin/phpcs --runtime-set ignore_warnings_on_exit 1; fi\n  # Validate the composer.json file.\n  # @link https://getcomposer.org/doc/03-cli.md#validate\n  - if [[ $TRAVIS_PHP_VERSION != \"5.2\" ]]; then composer validate --no-check-all; fi\n\nnotifications:\n  email: false\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 34.716796875,
          "content": "# Changelog for TGM Plugin Activation library\n\n## 2.6.1 (2016-05-19)\n\n* Fix a string replacement issue in the plugin action links. Thanks [Nilambar Sharma] for reporting. [#587], [#588]\n\n## 2.6.0 (2016-05-14)\n\nSince mid-February we offer a _\"Custom TGMPA Generator\"_. From now on, that is the preferred way for downloading your copy of TGMPA for use in a theme or plugin.\nIf you download TGMPA using the _Custom TGMPA Generator_ and indicate that it is for a theme which will be published on wordpress.org, you will receive a copy which will pass the Theme Check review.\n\nYou can find the _Custom TGMPA Generator_ on the [download] page of the website. For more information, read the [related blog post].\n\n* **Bug fixes**:\n  - Fixed minor/low-impact security vulnerability. Thanks [Mohamed A. Baset] for reporting. If *you* find a security vulnerability, please disclose responsibly! [#487], [#505]\n  - Fixed a bug where action links on the WP native plugins page would not be properly filtered. [#458], [#459]\n  - Fixed a bug where TGMPA when included within a plugin would be recognized as the plugin instead of the *real* plugin. Thanks [weavertheme] and [Mika Epstein] for reporting. [#499], [#500], [#558]\n  - Fixed an install error when trying to bulk-install an already installed plugin. Thanks [Ahmad Awais] for reporting. [#496], [#504]\n  - Fixed an update error when trying to bulk-update a plugin which is not installed. Thanks [Gary Jones] for reporting. [#442], [#508]\n  - Fixed admin notices display class. Props [Ninos Ego] and [Primoz Cigler]. [#478], [#495], [#509]\n  - Fixed an issue resulting in notices about installed/updated plugins on the bulk install/update pages being displayed at the top of the page instead of inline. [#510], [#511]\n\n* **Enhancements**:\n  - The full admin notice is now only displayed to users who can install/update/activate plugins. A limited _\"Contact the site admin.\"_ notice is shown to select users if it pertains to _required_ plugins. The selection of which users get to see this last message is based on the `publish_posts` (=Author) capability. This capability is however filterable using the new `tgmpa_show_admin_notice_capability` filter. Thanks [Stanislav Khromov], [Gary Jones], [Mickey Kay], [Ollie Treend] for suggesting. [#190], [#414], [#489], [#507]\n  - The example file now shows examples of different ways for including TGMPA based on the context in which you are using it. Props [Emil Uzelac] for the suggestion. [#469], [#503]\n  - Force deactivated plugins will now show in the 'recently active' plugins list. [#577]\n\n* **I18N improvements**:\n  - Improved some text strings and translator messages. Props [Rami]. [#516]\n  - Added translator messages for all strings with variable replacement.[#563]\n  - Added `load_textdomain()` calls. [#521]\n  - Added translations for Brazilian Portuguese, Croatian, Czech, Dutch, French, German, Russian and Swedish [#450], [#574], [#570], [#465], [#524], [#528], [#543], [#561] with grateful thanks to [Elvis Henrique Pereira], [Denis Žoljom], [Karolína Vyskočilová], [geoclaps], [Hedi Chaibi], [Marciel Bartzik], [Vladislav Burlak] and [Lewis Porter].\n    Additionally translations for Australian English, Canadian English, British English, Esperanto, Spanish, Hebrew, Italian, Romanian and Serbian were added based on existing translations available in GlotPress. [#564]\n\n    Altogether, this means that for the first version of TGMPA which ships with translation files, we're covering 17 locales, which is awesome!\n    More translations are of course welcome, so please send the .po file(s) in as a pull request.\n\n    _Please note: If you download TGMPA using the custom generator and indicate it's for a theme to be hosted on wordpress.org, you will receive a version without the `load_textdomain()` calls or the translation files.\n    Theme check rules dictate that you should only use one textdomain in your theme and the localization calls will be adjusted to use your theme's textdomain.\n\tAs most TGMPA strings have a lot of translations available in GlotPress already, this should not cause any real issues._\n\n* **Housekeeping**:\n  - Various other minor improvements and keeping things in line with WP core. [#512], [#513], [#514], [#532] - thanks [Utkarsh Patel], [#562], [#571]\n  - Updated the included example plugin to comply to the latest standards. [#557]\n  - Regenerated .pot file.\n\n\n## 2.5.2 (2015-07-15)\n* Hot Fix: fixes potential `Fatal error: Call to protected TGM_Plugin_Activation::__construct()` error and other compatibility issues when both TGMPA 2.5+ as well as TGMPA 2.3.6- would be loaded by different themes and plugins. [#449]\n\nTake note: We do **NOT** support 2.3.6 anymore and **_highly_** discourage its use. Any themes and plugins still using TGMPA 2.3.6 or less should upgrade as soon as possible. All the same, the end-user should not be confronted with white screens because of it, so this hot fix should prevent just that.\n\n## 2.5.1 (2015-07-13)\n\n* Hot Fix: fixes potential `Fatal error: Call to undefined method TGM_Utils::validate_bool()` errors caused by a conflict with the Soliloquy plugin. [#446]\n\n## 2.5.0 (2015-07-03)\n\nThis is a major update which brings some interesting new features and fixes tons of bugs. This version of TGMPA is brought to you by [Thomas Griffin] with graceful thanks to [Gary Jones] and our new core-team member [Juliette Reinders Folmer] for the majority of the changes.\n\nWith this release the TGMPA library has moved to its own organisation on GitHub. From now on you can find it at [TGMPA/TGM-Plugin-Activation].\n\nThe website has also been given some love. You can now find detailed information about the configuration options, FAQs and more at: http://tgmpluginactivation.com/\n\nTGMPA will start providing localized text strings soon. If you already have translations of our standard strings available, please help us make TGMPA even better by giving us access to these translations or by sending in a pull-request with .po file(s) with the translations. A [.pot file] to get you started is now available in the GitHub repository.\n\n* Enhancement: **Full support for update work-flow**.\n\t- Updating of the registered plugins can now be done from the TGMPA screen, both on individual plugins as well as in bulk - this will take into account WP repo updates as well as updates for plugins which are bundled or come from external sources where a minimum version is set which is higher than the current version.\n\t- Users will be notified of available updates via the admin notice.\n\t- The TGMPA admin page now has four views: _all_, _to install_, _update available_ and _to activate_.\n\t- The TGMPA admin page now has - on selected views - an extra column showing relevant plugin version information.\n\t- The TGMPA admin page _status_ column will show both install/activate as well as update status (cumulative).\n    - If a plugin requires a certain minimum version of a plugin and the currently installed version does not comply, activation will be blocked until the user has upgraded the plugin. If the plugin is already active, it will not be deactivated however.\n\t\t* If the required plugin version itself requires a higher WP version than the currently installed WP, upgrade to that version of the plugin will be blocked - this is of course provided TGMPA has access to that information -.\n\t- The plugin action links on the WP native plugins page will reflect this too - including disabling deactivation if _force_activation_ is `true` for a plugin.\n\n\t[#381], [#192], [#197] Props [Zauan/Hogash Studio], [Christian], [Franklin Gitonga], [Jason Xie], [swiderski] for their preliminary work on this which inspired this full-fledged implementation.\n\n* Enhancement: **Better support for GitHub hosted plugins**.\n\n  Previously using standard GitHub packaged zips as download source would not work as, even though the plugin would be installed, it would not be recognized as such by TGMPA because of the non-standard directory name which would be created for the plugin, i.e. `my-plugin-master` instead of `my-plugin`. A work-around for this has been implemented and you can now use GitHub-packaged `master` branch or release zips to install plugins. Have a look at the `example.php` file for a working example.\n\n  One caveat: this presumes that the plugin is based in the root of the GitHub repo and not in a `/src` or other subdirectory.\n\n  [#327], [#280], [#283] Thanks [Dan Fisher] and [Luis Martins] for reporting/requesting this enhancement.\n\n* Enhancement: **New optional plugin parameter `is_callable`**.\n\n  Some plugins may have a free and a premium version using different slugs. Using the `is_callable` plugin parameter allows for the premium version to be recognized, even though the slug is set to the free version slug. Have a look at the `example.php` file for a working example.\n\n  For more information on what is considered a `callable`, please refer to the [Codex on callbacks].\n\n  [#205] Props [Zack Katz].\n\n* **Admin Page improvements**:\n  - Plugins downloaded from an arbitrary external source are now labelled _\"External Source\"_. Previously they were labelled _\"Private Repository\"_ which could be confusing as the download URL did not have to point to a repository, let alone be private. [#372]\n  - Leverage the CSS styling of the Core standard `WP_List_Table` [#227]. Props [Shiva Poudel].\n  - Allow for moving the Admin Page to a different place in the menu. This is mainly to accommodate plugins using TGMPA as it is terribly illogical for the TGMPA page to be under the _\"Appearance\"_ menu in that case. This has been now been implemented in a way that Theme Check will not choke on it. [#310]\n\n* **Admin notices improvements**:\n  - For installs with both plugin(s) as well as theme(s) using TGMPA, notices will now be dismissable for each separately. This prevents a situation where a theme would have TGMPA included, the user has dismissed the notice about it, a plugin with TGMPA gets installed and the notice about it requiring certain other plugins is never shown. [#174] Thanks [Chris Howard] for reporting.\n  - Fixed: The reset of dismissed notices on `switch_theme` was only applied for the current user, not for all users. [#246]\n  - Fixed: Admin notices would show twice under certain circumstances. [#249], [#237] Thanks [manake] for reporting.\n\n* **Bulk Installer**:\n  - Fixed: If a bulk install was initiated using the bottom _\"Bulk Actions\"_ dropdown, the install page would display an outdated TGMPA plugin table at the bottom of the page after the bulk installation was finished. [#319]\n\n* **Theme Check compatibility**:\n  - Prevent _\"The theme appears to use include or require\"_ warning. [#262], [#258] Thanks [Tim Nicholson] for reporting.\n  - Preempt the disallowing of the use of the `add_theme_page()` function. See [the theme review meeting notes](https://make.wordpress.org/themes/2015/04/21/this-weeks-meeting-important-information-regarding-theme-options/) for further information on this decision. [#315]\n\n* **Miscellaneous fixes**:\n  - Leaner loading: TGMPA actions will now only be hooked in and run on the back-end (`is_admin() returns true`).  [#357] Also most TGMPA actions will now only be hooked in if there's actually something to do for TGMPA. [#381]\n  - Fixed: _\"Undefined index: skin_update_failed_error\"_ [#260], [#240] Thanks [Parhum Khoshbakht] and [Sandeep] for reporting.\n  - Fixed: Installation of bundled plugins with uppercase letters in the plugin slug would fail. [#401], [#403] Thanks [steveboj] for reporting.\n  - Made admin URLs environment aware by using `self_admin_url()` instead of `admin_url()` or `network_admin_url()`. [#255], [#171]\n  - Fixed: the Adminbar would be loaded twice causing conflicts (with other plugins). [#208] Props [John Blackbourn].\n  - All TGMPA generated pages will now show the version number on the page to assist in debugging. [#399], [#402]\n\n* **I18N improvements**:\n  - Make configurable message texts singular/plural context aware. [#173] Props [Yakir Sitbon].\n  - Language strings which are being overridden should use the including plugin/theme language domain. [#217] Props [Christian Foellmann].\n  - Language strings are loaded a bit later now to ensure that the translations are loaded beforehand. [#176], [#177] Props [Yakir Sitbon].\n\n* **New action and filter hooks for TGMPA**:\n  - `tgmpa_load` - _filter_ can be used to overrule whether TGMPA should load. Defaults to loading only when on the WP back-end when not `DOING_AJAX`. Typical use: `add_filter( 'tgmpa_load', '__return_true' );`.\n  - `tgmpa_admin_menu_args` - _filter_ can be used to filter the arguments passed to the function call adding the TGMPA (sub) menu page.\n  - `tgmpa_notice_rendered_action_links` - _filter_ can be used to filter the complete html output for the admin notice action links. This is in addition to the `tgmpa_notice_action_links` filter which already existed and allows for filtering of the individual action links.\n  - `tgmpa_table_data_item` - _filter_ can be used to modify plugin data for a single plugin which is ready for the TGMPA table output.\n  - `tgmpa_table_data_items` - _filter_ can be used to modify plugin data for all plugins which is ready for the TGMPA table output. Example use: changing the sort order of the plugins.\n  - `tgmpa_table_columns` - _filter_ can be used to add/remove table columns from the TGMPA table view.\n  - `tgmpa_{$prefix}plugin_action_links` - _filter_ mirrors the WP core [{$prefix}plugin_action_links] filter but for the TGMPA page.\n  - `tgmpa_update_bulk_plugins_complete_actions` - _filter_ mirrors the WP core [update_bulk_plugins_complete_actions] filter but for TGMPA bulk actions.\n  - `tgmpa_after_plugin_row_{$item['slug']}` - _action_ similar (but not the same) as the WP core [after_plugin_row_{$plugin_file}] action. Can be used to add information to a plugin row in the TGMPA table.\n\n  [#188], [#226], [#300], [#357], [#362], [#381], [#388], [#389], [#390] Props [Zack Katz] and the TGMPA team.\n\n* **Housekeeping**:\n  - Applied a number of best practices and code simplifications.\n     * [#284], [#281] - props [Ninos Ego],\n     * [#286] - props [krishna19],\n     * [#178], [#180], [#182], [#183] - thanks [Gregory Karpinsky] for reporting,\n     * [#324], [#325], [#331], [#346], [#356], [#357], [#358], [#359], [#360], [#361], [#362], [#363], [#368], [#371], [#373], [#374], [#375], [#376], [#381], [#385], [#387], [#395], [#397], [#425], [#426], [#427], [#435]\n  - Allow for extending of the TGMPA class and fixed issues with PHP 5.2 [#303] which were originally caused by this.\n  - Tighten the file permissions on our files. [#322]\n  - Cleaned up some of the documentation. [#179], [#384] Props [Gregory Karpinsky] and the TGMPA team.\n  - Comply with the [WordPress Coding Standards](https://make.wordpress.org/core/handbook/coding-standards/)\n  - Added Travis CI integration for coding standards and php-linting. [#304], [#329]\n  - Added Scrutinizer CI integration for code quality. [#330]\n  - Added editor config. [#339] Props [Shiva Poudel].\n  - Improved integration with Packagist.\n  - Added [Contributing guidelines](CONTRIBUTING.md).\n  - While the library has always been licensed under GPL 2.0+, we now include the [License](LICENSE.md).\n\n\n## 2.4.2 (2015-04-27)\n* Fixed: Bundled/pre-packaged plugins would no longer install when using the Bulk installer. This was a regression introduced in v2.4.1. [#321], [#316] Props [Juliette Reinders Folmer]. Thanks [tanshcreative] for reporting.\n* Fixed: Bulk installer did not honour a potentially set `default_path` for local prep-packaged plugins. [#203], [#332] Props [Juliette Reinders Folmer]. Thanks [pavot] and [djcowan] for reporting.\n* Removed call to `screen_icon()` function which was deprecated in WP 3.8. [#244], [#224], [#234]. Props [Nate Wright]. Thanks [hamdan-mahran] and [Sandeep] for reporting.\n* Fixed: _\"PHP Fatal error: Class 'TGM_Bulk_Installer' not found\"_ [#185] Thanks [Chris Talkington] for reporting.\n\n## 2.4.1 (2015-04-22)\n\n* Improve escaping for URLs and attributes.\n\n## 2.4.0 (2014-03-17)\n\n* All textdomain strings now made to `tgmpa` and remove all notices dealing with textdomain and translation issues.\n* The `_get_plugin_basename_from_slug()` method now checks for exact slug matches to prevent issues with plugins that start with the same slug.\n* Commenting style now adjusted so it is easier to comment large chunks of code if necessary.\n* Plugins from an external source now properly say _\"Private Repository\"_ in the list table output.\n* `add_submenu_page()` has been changed to `add_theme_page()` for better theme check compatibility.\n* Removed the use for `parent_menu_slug` and `parent_menu_url` for `$config` options (see above).\n* Nag messages can now be forced on via a new `dismissable` config property. When set to `false`, nag cannot be dismissed.\n* New config `dismiss_msg` used in conjunction with `dismissable`. If `dismissable` is false, then if `dismiss_msg` is not empty, it will be output at the top of the nag message.\n* Better contextual message for activating plugins - changed _\"Activate installed plugin(s)\"_ to _\"Begin activating plugin(s)\"_.\n* Added cache flushing on theme switch to prevent stale entries from remaining in the list table if coming back to a theme with TGMPA.\n* TGMPA is now a singleton to prevent extra settings overrides.\n* Fixed bug with duplicating plugins if multiple themes/plugins that used TGMPA were active at the same time.\n* Added contextual message updates depending on WordPress version.\n* Better nag message handling. If the nag has been dismissed, don't even attempt to build message (performance enhancement).\n* Ensure class can only be instantiated once (instantiation moved inside the `class_exists()` check for TGMPA).\n* Change instances of `admin_url()` to `network_admin_url()` to add better support for MultiSite (falls back gracefully for non-MultiSite installs).\n* Updated much of the code to match WP Coding Standards (braces, yoda conditionals, etc.).\n* Myriads of other bug fixes and enhancements\n\n## 2.3.6 (2012-04-23)\n\n* Fixed API error when clicking on the plugin install row action link for an externally hosted plugin\n\n## 2.3.5 (2012-04-16)\n\n* Fixed nag message not working when `nag_type` string was not set (props [Jeff Sebring])\n\n## 2.3.4 (2012-03-30)\n\n* Fixed _\"undefined index\"_ notice when checking for required plugins (props [Jeff Sebring])\n* Fixed bug where, during a bulk install, if the plugin was defined in the source as pre-packaged but also existed in the repo, it would erroneously pull the plugin from the repo instead (props [Travis Smith])\n* Added ability to set nag type for the admin notice via `nag_type` string (props [Travis Smith])\n\n## 2.3.3 (2012-02-03)\n\n* Changed license to reflect GPL v2 or later (to be compatible with the WordPress repo)\n\n## 2.3.2 (2012-02-03)\n\n* Fixed bug (100%) with not loading class properly\n\n## 2.3.1 (2012-02-03)\n\n* Fixed bug with not finding class (reverted back to `Plugin_Upgrader`)\n\n## 2.3.0 (2012-01-25)\n\n* Improved sorting of plugins by sorting them by required/recommended (while still maintaining alphabetical order within each group)\n* Improved output of strings in nag messages\n* Added 2 new strings: `install_link` and `activate_link` to customize the text for the nag action links\n* Added new class: `TGM_Plugin_Installer` to prepare for must-use plugin support\n\n## 2.2.2 (2012-01-08)\n\n* Fixed bug that allowed users to click on the Install Plugins page when all the plugin installations and activations were already complete\n\n## 2.2.1 (2012-01-05)\n\n* Fixed bug that caused WordPress core upgrades to fail (WordPress doesn't check for including `WP_Upgrader` on core upgrades)\n\n## 2.2.0 (2012-01-02)\n\n* Fixed erroneous links for plugins linked to the WordPress Repo\n* Improved UI of plugins by listing them in WordPress' default table layout\n* Improved support for installing plugins if security credentials require FTP information\n* Improved support for MultiSite\n* Added 3 new classes (all extensions of existing WordPress classes): `TGMPA_List_Table` for outputting required/recommended plugins in a familiar table format, `TGM_Bulk_Installer` for bulk installing plugins and `TGM_Bulk_Installer_Skin` for skinning the bulk install process\n* Added extra defensive measures to prevent duplication of classes\n* Added ability to bulk install and bulk activate plugins\n* Added new config options: `parent_menu_slug`, `parent_menu_url`, `is_automatic`, and `message`\n* Added new string: `complete` (displayed when all plugins have been successfully installed and activated)\n* Added support for singular/plural strings throughout the library\n* Added permission checks to action links\n* Added new filter `tgmpa_default_screen_icon` to set the default icon for the plugin table page\n* Added new optional plugin parameters: `version`, `force_activation`, `force_deactivation` and `external_url`\n* Removed `button` string (deprecated with use of plugins table)\n\n## 2.1.1 (2011-10-19)\n\n* Fixed nag not re-appearing if user switched themes and then re-activated the previous theme (UX improvement)\n\n## 2.1.0 (2011-10-18)\n\n* Fixed duplicate nag message on admin options pages\n* Fixed FTP nonce error when FTP credentials aren't defined in `wp-config.php`\n* Improved handling of failed FTP connections with `WP_Filesystem`\n* Improved string labeling for semantics\n* Improved nag messages so that they are now consolidated into one message\n* Improved plugin sorting by listing them alphabetically\n* Improved plugin messages after installation and activation\n* Added automatic activation of plugins after installation (users no longer need to click the _\"Activate this plugin\"_ link)\n* Added links to repo plugins for their plugin details and information (done via thickbox)\n* Added option to dismiss nag message\n* Added `tgmpa_notice_action_links` filter hook to filter nag message action links\n* Added new methods: `admin_init()`, `thickbox()`, `dismiss()`, `populate_file_path()`, `_get_plugin_data_from_name()` and `is_tgmpa_page()`\n\n## 2.0.0 (2011-10-03)\n\n* Improved nag messages by adding a strings argument to filter default messages\n* Improved nag message output by using the Settings API\n* Improved internals by adding API for developers to use (code in class no longer has to be touched)\n* Improved API function name (now tgmpa) for semantics\n* Improved `example.php` with instructions for setup\n* Added internal style sheet for styling\n* Added ability to define custom text domain for localization\n* Added new properties `$default_path` and `$strings`\n* Added new methods `register()`, `config()`, `_get_plugin_basename_from_slug()` and `actions()`\n* Removed unnecessary `is_wp_error()` check\n\n## 1.1.0 (2011-10-01)\n\n* Improved property `$args` to accept arrays of arguments for each plugin needed\n* Improved `add_submenu_page()` to `add_theme_page()`\n* Improved admin notices to display different messages based on status of plugin (not installed, installed but not activated)\n* Improved block-level documentation\n* Improved handling of plugin installation and activation with `plugins_api`, `Plugin_Upgrader` and `Plugin_Skin_Installer`\n* Added support for multiple plugins of each instance (pre-packaged and repo)\n* Added new property `$domain` to hold textdomain for internationalization\n* Added CSS for slight UI enhancements\n* Added extra conditional checks `current_user_can( 'install_plugins' )` and `current_user_can( 'activate_plugins' )` for security\n* Removed menu display if all included plugins were successfully installed and activated\n* Removed unnecessary conditional check before class is defined\n\n## 1.0.0 (2011-09-29)\n\n* Initial release into the wild\n\n\n\n[download]: http://tgmpluginactivation.com/download/\n[related blog post]: http://tgmpluginactivation.com/2016/01/15/custom-tgmpa-generator/\n[TGMPA/TGM-Plugin-Activation]: https://github.com/TGMPA/TGM-Plugin-Activation\n[.pot file]: https://github.com/TGMPA/TGM-Plugin-Activation/blob/develop/languages/\n\n\n[Ahmad Awais]: https://github.com/ahmadawais\n[Chris Howard]: https://github.com/qwertydude\n[Chris Talkington]: https://github.com/ctalkington\n[Christian Foellmann]: https://github.com/cfoellmann\n[Dan Fisher]: https://github.com/danfisher85\n[Denis Žoljom]: https://github.com/dingo-d\n[djcowan]: https://github.com/djcowan\n[Elvis Henrique Pereira]: https://github.com/elvishp2006\n[Emil Uzelac]: https://github.com/emiluzelac\n[Franklin Gitonga]: https://github.com/FrankM1\n[Gary Jones]: https://github.com/GaryJones\n[geoclaps]: https://github.com/geoclaps\n[Gregory Karpinsky]: https://github.com/tivnet\n[hamdan-mahran]: https://github.com/hamdan-mahran\n[Hedi Chaibi]: https://github.com/hedii\n[Jason Xie]: https://github.com/duckzland\n[Jeff Sebring]: https://github.com/jeffsebring\n[John Blackbourn]: https://github.com/johnbillion\n[Juliette Reinders Folmer]: https://github.com/jrfnl\n[Karolína Vyskočilová]: https://github.com/vyskoczilova\n[krishna19]: https://github.com/krishna19\n[Lewis Porter]: https://github.com/lewisporter\n[Luis Martins]: https://github.com/lmartins\n[manake]: https://github.com/manake\n[Mickey Kay]: https://github.com/MickeyKay\n[Mika Epstein]: https://github.com/Ipstenu\n[Mohamed A. Baset]: https://github.com/SymbianSyMoh\n[Nate Wright]: https://github.com/NateWr\n[Nilambar Sharma]: https://github.com/ernilambar\n[Ninos Ego]: https://github.com/Ninos\n[Ollie Treend]: https://github.com/ollietreend\n[Parhum Khoshbakht]: https://github.com/parhumm\n[pavot]: https://github.com/pavot\n[Primoz Cigler]: https://github.com/primozcigler\n[Rami]: https://github.com/ramiy\n[Sandeep]: https://github.com/InsertCart\n[Shiva Poudel]: https://github.com/shivapoudel\n[Stanislav Khromov]: https://github.com/khromov\n[steveboj]: https://github.com/steveboj\n[swiderski]: https://github.com/swiderski\n[tanshcreative]: https://github.com/tanshcreative\n[Tim Nicholson]: https://github.com/timnicholson\n[Travis Smith]: https://github.com/wpsmith\n[Thomas Griffin]: https://github.com/thomasgriffin\n[Utkarsh Patel]: https://github.com/PatelUtkarsh\n[Vladislav Burlak]: https://github.com/vburlak\n[weavertheme]: https://github.com/weavertheme\n[Yakir Sitbon]: https://github.com/KingYes\n[Zack Katz]: https://github.com/zackkatz\n\n[Christian]: http://themeforest.net/user/artless\n[Marciel Bartzik]: http://www.bartzik.net/\n[Zauan/Hogash Studio]: http://pastebin.com/u/Zauan\n\n[#588]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/588\n[#587]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/587\n[#577]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/577\n[#574]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/574\n[#571]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/571\n[#570]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/570\n[#564]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/564\n[#563]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/563\n[#562]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/562\n[#561]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/561\n[#558]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/558\n[#557]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/557\n[#543]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/543\n[#532]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/532\n[#528]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/528\n[#524]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/524\n[#521]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/521\n[#516]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/516\n[#514]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/514\n[#513]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/513\n[#512]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/512\n[#511]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/511\n[#510]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/510\n[#509]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/509\n[#508]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/508\n[#507]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/507\n[#505]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/505\n[#504]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/504\n[#503]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/503\n[#500]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/500\n[#499]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/499\n[#496]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/496\n[#495]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/495\n[#489]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/489\n[#487]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/487\n[#478]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/478\n[#469]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/469\n[#465]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/465\n[#460]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/460\n[#459]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/459\n[#458]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/458\n[#450]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/450\n[#449]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/449\n[#446]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/446\n[#442]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/442\n[#435]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/435\n[#427]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/427\n[#426]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/426\n[#425]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/425\n[#414]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/414\n[#403]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/403\n[#402]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/402\n[#401]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/401\n[#399]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/399\n[#397]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/397\n[#395]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/395\n[#390]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/390\n[#389]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/389\n[#388]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/388\n[#387]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/387\n[#386]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/386\n[#385]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/385\n[#384]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/384\n[#381]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/381\n[#376]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/376\n[#375]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/375\n[#374]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/374\n[#373]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/373\n[#372]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/372\n[#371]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/371\n[#368]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/368\n[#363]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/363\n[#362]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/362\n[#361]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/361\n[#360]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/360\n[#359]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/359\n[#358]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/358\n[#357]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/357\n[#356]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/356\n[#346]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/346\n[#339]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/339\n[#332]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/332\n[#331]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/331\n[#330]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/330\n[#329]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/329\n[#327]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/327\n[#326]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/326\n[#325]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/325\n[#324]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/324\n[#322]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/322\n[#321]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/321\n[#319]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/319\n[#316]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/316\n[#315]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/315\n[#310]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/310\n[#304]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/304\n[#303]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/303\n[#300]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/300\n[#286]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/286\n[#284]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/284\n[#283]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/283\n[#281]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/281\n[#280]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/280\n[#262]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/262\n[#260]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/260\n[#258]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/258\n[#255]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/255\n[#249]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/249\n[#246]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/246\n[#244]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/244\n[#240]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/240\n[#237]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/237\n[#234]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/234\n[#227]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/227\n[#226]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/226\n[#224]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/224\n[#217]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/217\n[#208]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/208\n[#205]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/205\n[#203]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/203\n[#197]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/197\n[#192]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/192\n[#190]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/190\n[#188]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/188\n[#185]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/185\n[#183]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/183\n[#182]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/182\n[#180]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/180\n[#179]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/179\n[#178]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/178\n[#177]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/177\n[#176]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/176\n[#174]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/174\n[#173]: https://github.com/TGMPA/TGM-Plugin-Activation/pull/173\n[#171]: https://github.com/TGMPA/TGM-Plugin-Activation/issues/171\n\n[Codex on callbacks]: https://codex.wordpress.org/How_to_Pass_Tag_Parameters#Callable\n\n[{$prefix}plugin_action_links]: https://developer.wordpress.org/reference/hooks/prefixplugin_action_links/\n[after_plugin_row_{$plugin_file}]: https://developer.wordpress.org/reference/hooks/after_plugin_row_plugin_file/\n[update_bulk_plugins_complete_actions]: https://developer.wordpress.org/reference/hooks/update_bulk_plugins_complete_actions/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.130859375,
          "content": "# How To Contribute\n\nThanks for reading our contribution guidelines.\n\nThe following guidelines for contribution should be followed if you want to submit a pull request.\n\n## How To Prepare\n\n* You need a [GitHub account](https://github.com/signup/free).\n* Before reporting a bug or suggesting an improvement, please check the `develop` branch to see if it has already been addressed.\n* Duplicate tickets will be closed without hesitation, so please check through existing tickets first to see if someone else has already discussed it.\n* Submit an [issue ticket] for your issue if there is not one yet.\n    * Describe the issue and include steps to reproduce if it's a bug.\n    * If the issue is a bug, add any relevant JavaScript or PHP error messages. For PHP error messages, a backtrace is preferred. If you don't know how to get one, please [follow these instructions](https://gist.github.com/jrfnl/5925642).\n    * Include relevant version numbers.\n    * Additional screenshots or videos are often helpful.\n* If you are able and want to fix this, fork the repository on GitHub.\n\n## Make Changes\n\nWe use the [git-flow](http://nvie.com/posts/a-successful-git-branching-model/) branching model. Before reporting a bug or new feature, please check the `develop` branch to see if it's already been addressed.\n\n* In your forked repository, create a topic branch for your upcoming patch. Usually this is based on the `develop` branch.\n    * For enhancements, name the branch according to the feature e.g. `feature/auto-activate`.\n    * For un-reported bug fixes, add a `fix-` prefix e.g. `feature/fix-admin-notices`.\n    * For code that addresses an existing Issue, add the Issue number as a prefix e.g. `feature/123-auto-activate` or `feature/321-fix-admin-notices`.\n    * Please avoid working directly on the `develop` branch.\n* Code should follow the [WordPress Coding Standards for PHP](https://make.wordpress.org/core/handbook/coding-standards/php/).\n    * Use [PHP_CodeSniffer](https://github.com/squizlabs/PHP_CodeSniffer) with the [WordPress Coding Standards](https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards) sniffs to check. Since we use `phpcs.xml`, you should be able to navigate on command line to the root of the repo and just run `phpcs` without any arguments.\n* Make commits of logical units and describe them properly.\n* Check for unnecessary whitespace with `git diff --check` before committing.\n\n## Commit Messages\nWe suggest you follow best practices for commit messages:\n\n* Separate subject (first line) from body with a blank line.\n* Limit the subject line to 50 characters.\n* Capitalize the subject line.\n* Do not end the subject line with a period.\n* Use the imperative mood in the subject line.\n* Wrap the body at 72 characters.\n* Use the body to explain _what_ and _why_ versus _how_.\n* Please [reference any existing issue](https://help.github.com/articles/closing-issues-via-commit-messages/) in the commit message.\n\nRead [this post](http://chris.beams.io/posts/git-commit/) for more detail.\n\n## Submit Changes\n\n* Push your changes to a topic branch in your fork of the repository.\n* Open a pull request to the original repository and choose the correct original branch (probably `develop`) you want to patch.\n* Do not close any issue you referenced in your commit message.\n* If you have write access to the repository, do not directly push or merge your own pull-requests. Add the `[reviewmerge]` label when your branch is considered complete and let another team member review your pull request and approve.\n\n## License\n\nAll submissions are agreed to be licensed under the same license as present in the repository.\n\n## Security\n\nThere is no need to sign-off or GPG sign your commits. Tags (from 2.4.1 onwards) will be GPG signed.\n\n# Additional Resources\n\n* [General GitHub documentation](http://help.github.com/)\n* [GitHub pull request documentation](http://help.github.com/send-pull-requests/).\n* [Read the Issue Guidelines by @necolas](https://github.com/necolas/issue-guidelines/blob/master/CONTRIBUTING.md) for more details,\n\n[issue ticket]: https://github.com/TGMPA/TGM-Plugin-Activation/issues\n[reviewmerge]: https://github.com/TGMPA/TGM-Plugin-Activation/labels/reviewmerge\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 17.623046875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc., <http://fsf.org/>\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {description}\n    Copyright (C) {year}  {fullname}\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  {signature of Ty Coon}, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.369140625,
          "content": "# TGM Plugin Activation\n[![GitHub license](https://img.shields.io/badge/license-GPLv2-blue.svg)](https://raw.githubusercontent.com/TGMPA/TGM-Plugin-Activation/develop/LICENSE.md)\n[![Build Status](https://travis-ci.org/TGMPA/TGM-Plugin-Activation.svg?branch=develop)](https://travis-ci.org/TGMPA/TGM-Plugin-Activation)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/TGMPA/TGM-Plugin-Activation/badges/quality-score.png?b=develop)](https://scrutinizer-ci.com/g/TGMPA/TGM-Plugin-Activation/?branch=develop)\n\n\n**Lead Developers:**\n[Thomas Griffin](https://github.com/thomasgriffin) ([@jthomasgriffin](https://twitter.com/jthomasgriffin)), [Gary Jones](https://github.com/GaryJones) ([@GaryJ](https://twitter.com/GaryJ)), [Juliette Reinders Folmer](https://github.com/jrfnl) ([@jrf_nl](https://twitter.com/jrf_nl))  \n**Version:** 2.6.1\n**Requires at least:** 3.7.0 \n**Tested up to:** 4.5.2 \n\n## Description\n\nTGM Plugin Activation is a PHP library that allows you to easily require or recommend plugins for your WordPress themes (and plugins). It allows your users to install, update and even automatically activate plugins in singular or bulk fashion using native WordPress classes, functions and interfaces. You can reference bundled plugins, plugins from the WordPress Plugin Repository or even plugins hosted elsewhere on the internet.\n\n## Installation\n\n1. Generate a customized version of the latest version of TGMPA based on your intended use-case using the [Custom TGMPA Generator](http://tgmpluginactivation.com/download/).\n2. Extract the class file and place it somewhere in your theme hierarchy.\n3. Add a `require_once` call within `functions.php` (or other file) referencing the class file.\n4. Create a function, hooked to `tgmpa_register`, that registers the plugin and configurations.\n\nFor steps 3 and 4, it is recommended you view, copy and paste the contents of `example.php`\nand amend to suit. The `example.php` file is a model for how you should include the class in your theme.\n\nDetailed documentation on [how to configure TGMPA](http://tgmpluginactivation.com/configuration/) is available on the website.\n\n__*We strongly recommend the use of the [Custom TGMPA Generator](http://tgmpluginactivation.com/download/) if you intend to use TGMPA in a theme which is to be published via WordPress.org or Themeforest.*__\n\nThe generated customized version of TGMPA will comply with the Theme Review guidelines and Theme Check.\n\n### Composer\n\nTGM Plugin Activation is also available as a [package](https://packagist.org/packages/tgmpa/tgm-plugin-activation) installable via Composer:\n\n~~~sh\ncomposer create-project tgmpa/tgm-plugin-activation --no-dev\n~~~\n\n## Frequently Asked Questions\n\nSee [the FAQ page](http://tgmpluginactivation.com/faq/).\n\n## Feedback\n\nSee https://github.com/TGMPA/TGM-Plugin-Activation/issues for current issues and the [guidelines for reporting bugs and enhancements](https://github.com/TGMPA/TGM-Plugin-Activation/wiki/Guidelines-for-reporting-bugs).\n\n__Note:__ TGM Plugin Activation library authors are not responsible for the *end-user support* for any plugin or theme which uses the library.\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md).\n\n## Contributing to TGM Plugin Activation\n\nIf you have a patch, or stumbled upon an issue with TGM Plugin Activation core, you can contribute this back to the code. Please read our [contributor guidelines](CONTRIBUTING.md) for more information how you can do this.\n\n"
        },
        {
          "name": "class-tgm-plugin-activation.php",
          "type": "blob",
          "size": 125.1162109375,
          "content": "<?php\n/**\n * Plugin installation and activation for WordPress themes.\n *\n * Please note that this is a drop-in library for a theme or plugin.\n * The authors of this library (Thomas, Gary and Juliette) are NOT responsible\n * for the support of your plugin or theme. Please contact the plugin\n * or theme author for support.\n *\n * @package   TGM-Plugin-Activation\n * @version   2.6.1\n * @link      http://tgmpluginactivation.com/\n * @author    Thomas Griffin, Gary Jones, Juliette Reinders Folmer\n * @copyright Copyright (c) 2011, Thomas Griffin\n * @license   GPL-2.0+\n */\n\n/*\n\tCopyright 2011 Thomas Griffin (thomasgriffinmedia.com)\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License, version 2, as\n\tpublished by the Free Software Foundation.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program; if not, write to the Free Software\n\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n// Exit if accessed directly.\nif ( ! defined( 'ABSPATH' ) ) {\n\treturn;\n}\n\nif ( ! class_exists( 'TGM_Plugin_Activation' ) ) {\n\n\t/**\n\t * Automatic plugin installation and activation library.\n\t *\n\t * Creates a way to automatically install and activate plugins from within themes.\n\t * The plugins can be either bundled, downloaded from the WordPress\n\t * Plugin Repository or downloaded from another external source.\n\t *\n\t * @since 1.0.0\n\t *\n\t * @package TGM-Plugin-Activation\n\t * @author  Thomas Griffin\n\t * @author  Gary Jones\n\t */\n\tclass TGM_Plugin_Activation {\n\t\t/**\n\t\t * TGMPA version number.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @const string Version number.\n\t\t */\n\t\tconst TGMPA_VERSION = '2.6.1';\n\n\t\t/**\n\t\t * Regular expression to test if a URL is a WP plugin repo URL.\n\t\t *\n\t\t * @const string Regex.\n\t\t *\n\t\t * @since 2.5.0\n\t\t */\n\t\tconst WP_REPO_REGEX = '|^http[s]?://wordpress\\.org/(?:extend/)?plugins/|';\n\n\t\t/**\n\t\t * Arbitrary regular expression to test if a string starts with a URL.\n\t\t *\n\t\t * @const string Regex.\n\t\t *\n\t\t * @since 2.5.0\n\t\t */\n\t\tconst IS_URL_REGEX = '|^http[s]?://|';\n\n\t\t/**\n\t\t * Holds a copy of itself, so it can be referenced by the class name.\n\t\t *\n\t\t * @since 1.0.0\n\t\t *\n\t\t * @var TGM_Plugin_Activation\n\t\t */\n\t\tpublic static $instance;\n\n\t\t/**\n\t\t * Holds arrays of plugin details.\n\t\t *\n\t\t * @since 1.0.0\n\t\t * @since 2.5.0 the array has the plugin slug as an associative key.\n\t\t *\n\t\t * @var array\n\t\t */\n\t\tpublic $plugins = array();\n\n\t\t/**\n\t\t * Holds arrays of plugin names to use to sort the plugins array.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @var array\n\t\t */\n\t\tprotected $sort_order = array();\n\n\t\t/**\n\t\t * Whether any plugins have the 'force_activation' setting set to true.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @var bool\n\t\t */\n\t\tprotected $has_forced_activation = false;\n\n\t\t/**\n\t\t * Whether any plugins have the 'force_deactivation' setting set to true.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @var bool\n\t\t */\n\t\tprotected $has_forced_deactivation = false;\n\n\t\t/**\n\t\t * Name of the unique ID to hash notices.\n\t\t *\n\t\t * @since 2.4.0\n\t\t *\n\t\t * @var string\n\t\t */\n\t\tpublic $id = 'tgmpa';\n\n\t\t/**\n\t\t * Name of the query-string argument for the admin page.\n\t\t *\n\t\t * @since 1.0.0\n\t\t *\n\t\t * @var string\n\t\t */\n\t\tprotected $menu = 'tgmpa-install-plugins';\n\n\t\t/**\n\t\t * Parent menu file slug.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @var string\n\t\t */\n\t\tpublic $parent_slug = 'themes.php';\n\n\t\t/**\n\t\t * Capability needed to view the plugin installation menu item.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @var string\n\t\t */\n\t\tpublic $capability = 'edit_theme_options';\n\n\t\t/**\n\t\t * Default absolute path to folder containing bundled plugin zip files.\n\t\t *\n\t\t * @since 2.0.0\n\t\t *\n\t\t * @var string Absolute path prefix to zip file location for bundled plugins. Default is empty string.\n\t\t */\n\t\tpublic $default_path = '';\n\n\t\t/**\n\t\t * Flag to show admin notices or not.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @var boolean\n\t\t */\n\t\tpublic $has_notices = true;\n\n\t\t/**\n\t\t * Flag to determine if the user can dismiss the notice nag.\n\t\t *\n\t\t * @since 2.4.0\n\t\t *\n\t\t * @var boolean\n\t\t */\n\t\tpublic $dismissable = true;\n\n\t\t/**\n\t\t * Message to be output above nag notice if dismissable is false.\n\t\t *\n\t\t * @since 2.4.0\n\t\t *\n\t\t * @var string\n\t\t */\n\t\tpublic $dismiss_msg = '';\n\n\t\t/**\n\t\t * Flag to set automatic activation of plugins. Off by default.\n\t\t *\n\t\t * @since 2.2.0\n\t\t *\n\t\t * @var boolean\n\t\t */\n\t\tpublic $is_automatic = false;\n\n\t\t/**\n\t\t * Optional message to display before the plugins table.\n\t\t *\n\t\t * @since 2.2.0\n\t\t *\n\t\t * @var string Message filtered by wp_kses_post(). Default is empty string.\n\t\t */\n\t\tpublic $message = '';\n\n\t\t/**\n\t\t * Holds configurable array of strings.\n\t\t *\n\t\t * Default values are added in the constructor.\n\t\t *\n\t\t * @since 2.0.0\n\t\t *\n\t\t * @var array\n\t\t */\n\t\tpublic $strings = array();\n\n\t\t/**\n\t\t * Holds the version of WordPress.\n\t\t *\n\t\t * @since 2.4.0\n\t\t *\n\t\t * @var int\n\t\t */\n\t\tpublic $wp_version;\n\n\t\t/**\n\t\t * Holds the hook name for the admin page.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @var string\n\t\t */\n\t\tpublic $page_hook;\n\n\t\t/**\n\t\t * Adds a reference of this object to $instance, populates default strings,\n\t\t * does the tgmpa_init action hook, and hooks in the interactions to init.\n\t\t *\n\t\t * {@internal This method should be `protected`, but as too many TGMPA implementations\n\t\t * haven't upgraded beyond v2.3.6 yet, this gives backward compatibility issues.\n\t\t * Reverted back to public for the time being.}}\n\t\t *\n\t\t * @since 1.0.0\n\t\t *\n\t\t * @see TGM_Plugin_Activation::init()\n\t\t */\n\t\tpublic function __construct() {\n\t\t\t// Set the current WordPress version.\n\t\t\t$this->wp_version = $GLOBALS['wp_version'];\n\n\t\t\t// Announce that the class is ready, and pass the object (for advanced use).\n\t\t\tdo_action_ref_array( 'tgmpa_init', array( $this ) );\n\n\t\t\t/*\n\t\t\t * Load our text domain and allow for overloading the fall-back file.\n\t\t\t *\n\t\t\t * {@internal IMPORTANT! If this code changes, review the regex in the custom TGMPA\n\t\t\t * generator on the website.}}\n\t\t\t */\n\t\t\tadd_action( 'init', array( $this, 'load_textdomain' ), 5 );\n\t\t\tadd_filter( 'load_textdomain_mofile', array( $this, 'overload_textdomain_mofile' ), 10, 2 );\n\n\t\t\t// When the rest of WP has loaded, kick-start the rest of the class.\n\t\t\tadd_action( 'init', array( $this, 'init' ) );\n\t\t}\n\n\t\t/**\n\t\t * Magic method to (not) set protected properties from outside of this class.\n\t\t *\n\t\t * {@internal hackedihack... There is a serious bug in v2.3.2 - 2.3.6  where the `menu` property\n\t\t * is being assigned rather than tested in a conditional, effectively rendering it useless.\n\t\t * This 'hack' prevents this from happening.}}\n\t\t *\n\t\t * @see https://github.com/TGMPA/TGM-Plugin-Activation/blob/2.3.6/tgm-plugin-activation/class-tgm-plugin-activation.php#L1593\n\t\t *\n\t\t * @since 2.5.2\n\t\t *\n\t\t * @param string $name  Name of an inaccessible property.\n\t\t * @param mixed  $value Value to assign to the property.\n\t\t * @return void  Silently fail to set the property when this is tried from outside of this class context.\n\t\t *               (Inside this class context, the __set() method if not used as there is direct access.)\n\t\t */\n\t\tpublic function __set( $name, $value ) {\n\t\t\t// phpcs:ignore Squiz.PHP.NonExecutableCode.ReturnNotRequired -- See explanation above.\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Magic method to get the value of a protected property outside of this class context.\n\t\t *\n\t\t * @since 2.5.2\n\t\t *\n\t\t * @param string $name Name of an inaccessible property.\n\t\t * @return mixed The property value.\n\t\t */\n\t\tpublic function __get( $name ) {\n\t\t\treturn $this->{$name};\n\t\t}\n\n\t\t/**\n\t\t * Initialise the interactions between this class and WordPress.\n\t\t *\n\t\t * Hooks in three new methods for the class: admin_menu, notices and styles.\n\t\t *\n\t\t * @since 2.0.0\n\t\t *\n\t\t * @see TGM_Plugin_Activation::admin_menu()\n\t\t * @see TGM_Plugin_Activation::notices()\n\t\t * @see TGM_Plugin_Activation::styles()\n\t\t */\n\t\tpublic function init() {\n\t\t\t/**\n\t\t\t * By default TGMPA only loads on the WP back-end and not in an Ajax call. Using this filter\n\t\t\t * you can overrule that behaviour.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t *\n\t\t\t * @param bool $load Whether or not TGMPA should load.\n\t\t\t *                   Defaults to the return of `is_admin() && ! defined( 'DOING_AJAX' )`.\n\t\t\t */\n\t\t\tif ( true !== apply_filters( 'tgmpa_load', ( is_admin() && ! defined( 'DOING_AJAX' ) ) ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Load class strings.\n\t\t\t$this->strings = array(\n\t\t\t\t'page_title'                      => __( 'Install Required Plugins', 'tgmpa' ),\n\t\t\t\t'menu_title'                      => __( 'Install Plugins', 'tgmpa' ),\n\t\t\t\t/* translators: %s: plugin name. */\n\t\t\t\t'installing'                      => __( 'Installing Plugin: %s', 'tgmpa' ),\n\t\t\t\t/* translators: %s: plugin name. */\n\t\t\t\t'updating'                        => __( 'Updating Plugin: %s', 'tgmpa' ),\n\t\t\t\t'oops'                            => __( 'Something went wrong with the plugin API.', 'tgmpa' ),\n\t\t\t\t/* translators: 1: plugin name(s). */\n\t\t\t\t'notice_can_install_required'     => _n_noop(\n\t\t\t\t\t'This theme requires the following plugin: %1$s.',\n\t\t\t\t\t'This theme requires the following plugins: %1$s.',\n\t\t\t\t\t'tgmpa'\n\t\t\t\t),\n\t\t\t\t/* translators: 1: plugin name(s). */\n\t\t\t\t'notice_can_install_recommended'  => _n_noop(\n\t\t\t\t\t'This theme recommends the following plugin: %1$s.',\n\t\t\t\t\t'This theme recommends the following plugins: %1$s.',\n\t\t\t\t\t'tgmpa'\n\t\t\t\t),\n\t\t\t\t/* translators: 1: plugin name(s). */\n\t\t\t\t'notice_ask_to_update'            => _n_noop(\n\t\t\t\t\t'The following plugin needs to be updated to its latest version to ensure maximum compatibility with this theme: %1$s.',\n\t\t\t\t\t'The following plugins need to be updated to their latest version to ensure maximum compatibility with this theme: %1$s.',\n\t\t\t\t\t'tgmpa'\n\t\t\t\t),\n\t\t\t\t/* translators: 1: plugin name(s). */\n\t\t\t\t'notice_ask_to_update_maybe'      => _n_noop(\n\t\t\t\t\t'There is an update available for: %1$s.',\n\t\t\t\t\t'There are updates available for the following plugins: %1$s.',\n\t\t\t\t\t'tgmpa'\n\t\t\t\t),\n\t\t\t\t/* translators: 1: plugin name(s). */\n\t\t\t\t'notice_can_activate_required'    => _n_noop(\n\t\t\t\t\t'The following required plugin is currently inactive: %1$s.',\n\t\t\t\t\t'The following required plugins are currently inactive: %1$s.',\n\t\t\t\t\t'tgmpa'\n\t\t\t\t),\n\t\t\t\t/* translators: 1: plugin name(s). */\n\t\t\t\t'notice_can_activate_recommended' => _n_noop(\n\t\t\t\t\t'The following recommended plugin is currently inactive: %1$s.',\n\t\t\t\t\t'The following recommended plugins are currently inactive: %1$s.',\n\t\t\t\t\t'tgmpa'\n\t\t\t\t),\n\t\t\t\t'install_link'                    => _n_noop(\n\t\t\t\t\t'Begin installing plugin',\n\t\t\t\t\t'Begin installing plugins',\n\t\t\t\t\t'tgmpa'\n\t\t\t\t),\n\t\t\t\t'update_link'                     => _n_noop(\n\t\t\t\t\t'Begin updating plugin',\n\t\t\t\t\t'Begin updating plugins',\n\t\t\t\t\t'tgmpa'\n\t\t\t\t),\n\t\t\t\t'activate_link'                   => _n_noop(\n\t\t\t\t\t'Begin activating plugin',\n\t\t\t\t\t'Begin activating plugins',\n\t\t\t\t\t'tgmpa'\n\t\t\t\t),\n\t\t\t\t'return'                          => __( 'Return to Required Plugins Installer', 'tgmpa' ),\n\t\t\t\t'dashboard'                       => __( 'Return to the Dashboard', 'tgmpa' ),\n\t\t\t\t'plugin_activated'                => __( 'Plugin activated successfully.', 'tgmpa' ),\n\t\t\t\t'activated_successfully'          => __( 'The following plugin was activated successfully:', 'tgmpa' ),\n\t\t\t\t/* translators: 1: plugin name. */\n\t\t\t\t'plugin_already_active'           => __( 'No action taken. Plugin %1$s was already active.', 'tgmpa' ),\n\t\t\t\t/* translators: 1: plugin name. */\n\t\t\t\t'plugin_needs_higher_version'     => __( 'Plugin not activated. A higher version of %s is needed for this theme. Please update the plugin.', 'tgmpa' ),\n\t\t\t\t/* translators: 1: dashboard link. */\n\t\t\t\t'complete'                        => __( 'All plugins installed and activated successfully. %1$s', 'tgmpa' ),\n\t\t\t\t'dismiss'                         => __( 'Dismiss this notice', 'tgmpa' ),\n\t\t\t\t'notice_cannot_install_activate'  => __( 'There are one or more required or recommended plugins to install, update or activate.', 'tgmpa' ),\n\t\t\t\t'contact_admin'                   => __( 'Please contact the administrator of this site for help.', 'tgmpa' ),\n\t\t\t);\n\n\t\t\tdo_action( 'tgmpa_register' );\n\n\t\t\t/* After this point, the plugins should be registered and the configuration set. */\n\n\t\t\t// Proceed only if we have plugins to handle.\n\t\t\tif ( empty( $this->plugins ) || ! is_array( $this->plugins ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set up the menu and notices if we still have outstanding actions.\n\t\t\tif ( true !== $this->is_tgmpa_complete() ) {\n\t\t\t\t// Sort the plugins.\n\t\t\t\tarray_multisort( $this->sort_order, SORT_ASC, $this->plugins );\n\n\t\t\t\tadd_action( 'admin_menu', array( $this, 'admin_menu' ) );\n\t\t\t\tadd_action( 'admin_head', array( $this, 'dismiss' ) );\n\n\t\t\t\t// Prevent the normal links from showing underneath a single install/update page.\n\t\t\t\tadd_filter( 'install_plugin_complete_actions', array( $this, 'actions' ) );\n\t\t\t\tadd_filter( 'update_plugin_complete_actions', array( $this, 'actions' ) );\n\n\t\t\t\tif ( $this->has_notices ) {\n\t\t\t\t\tadd_action( 'admin_notices', array( $this, 'notices' ) );\n\t\t\t\t\tadd_action( 'admin_init', array( $this, 'admin_init' ), 1 );\n\t\t\t\t\tadd_action( 'admin_enqueue_scripts', array( $this, 'thickbox' ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If needed, filter plugin action links.\n\t\t\tadd_action( 'load-plugins.php', array( $this, 'add_plugin_action_link_filters' ), 1 );\n\n\t\t\t// Make sure things get reset on switch theme.\n\t\t\tadd_action( 'switch_theme', array( $this, 'flush_plugins_cache' ) );\n\n\t\t\tif ( $this->has_notices ) {\n\t\t\t\tadd_action( 'switch_theme', array( $this, 'update_dismiss' ) );\n\t\t\t}\n\n\t\t\t// Setup the force activation hook.\n\t\t\tif ( true === $this->has_forced_activation ) {\n\t\t\t\tadd_action( 'admin_init', array( $this, 'force_activation' ) );\n\t\t\t}\n\n\t\t\t// Setup the force deactivation hook.\n\t\t\tif ( true === $this->has_forced_deactivation ) {\n\t\t\t\tadd_action( 'switch_theme', array( $this, 'force_deactivation' ) );\n\t\t\t}\n\n\t\t\t// Add CSS for the TGMPA admin page.\n\t\t\tadd_action( 'admin_head', array( $this, 'admin_css' ) );\n\t\t}\n\n\t\t/**\n\t\t * Load translations.\n\t\t *\n\t\t * @since 2.6.0\n\t\t *\n\t\t * (@internal Uses `load_theme_textdomain()` rather than `load_plugin_textdomain()` to\n\t\t * get round the different ways of handling the path and deprecated notices being thrown\n\t\t * and such. For plugins, the actual file name will be corrected by a filter.}}\n\t\t *\n\t\t * {@internal IMPORTANT! If this function changes, review the regex in the custom TGMPA\n\t\t * generator on the website.}}\n\t\t */\n\t\tpublic function load_textdomain() {\n\t\t\tif ( is_textdomain_loaded( 'tgmpa' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( false !== strpos( __FILE__, WP_PLUGIN_DIR ) || false !== strpos( __FILE__, WPMU_PLUGIN_DIR ) ) {\n\t\t\t\t// Plugin, we'll need to adjust the file name.\n\t\t\t\tadd_action( 'load_textdomain_mofile', array( $this, 'correct_plugin_mofile' ), 10, 2 );\n\t\t\t\tload_theme_textdomain( 'tgmpa', dirname( __FILE__ ) . '/languages' );\n\t\t\t\tremove_action( 'load_textdomain_mofile', array( $this, 'correct_plugin_mofile' ), 10 );\n\t\t\t} else {\n\t\t\t\tload_theme_textdomain( 'tgmpa', dirname( __FILE__ ) . '/languages' );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Correct the .mo file name for (must-use) plugins.\n\t\t *\n\t\t * Themese use `/path/{locale}.mo` while plugins use `/path/{text-domain}-{locale}.mo`.\n\t\t *\n\t\t * {@internal IMPORTANT! If this function changes, review the regex in the custom TGMPA\n\t\t * generator on the website.}}\n\t\t *\n\t\t * @since 2.6.0\n\t\t *\n\t\t * @param string $mofile Full path to the target mofile.\n\t\t * @param string $domain The domain for which a language file is being loaded.\n\t\t * @return string $mofile\n\t\t */\n\t\tpublic function correct_plugin_mofile( $mofile, $domain ) {\n\t\t\t// Exit early if not our domain (just in case).\n\t\t\tif ( 'tgmpa' !== $domain ) {\n\t\t\t\treturn $mofile;\n\t\t\t}\n\t\t\treturn preg_replace( '`/([a-z]{2}_[A-Z]{2}.mo)$`', '/tgmpa-$1', $mofile );\n\t\t}\n\n\t\t/**\n\t\t * Potentially overload the fall-back translation file for the current language.\n\t\t *\n\t\t * WP, by default since WP 3.7, will load a local translation first and if none\n\t\t * can be found, will try and find a translation in the /wp-content/languages/ directory.\n\t\t * As this library is theme/plugin agnostic, translation files for TGMPA can exist both\n\t\t * in the WP_LANG_DIR /plugins/ subdirectory as well as in the /themes/ subdirectory.\n\t\t *\n\t\t * This method makes sure both directories are checked.\n\t\t *\n\t\t * {@internal IMPORTANT! If this function changes, review the regex in the custom TGMPA\n\t\t * generator on the website.}}\n\t\t *\n\t\t * @since 2.6.0\n\t\t *\n\t\t * @param string $mofile Full path to the target mofile.\n\t\t * @param string $domain The domain for which a language file is being loaded.\n\t\t * @return string $mofile\n\t\t */\n\t\tpublic function overload_textdomain_mofile( $mofile, $domain ) {\n\t\t\t// Exit early if not our domain, not a WP_LANG_DIR load or if the file exists and is readable.\n\t\t\tif ( 'tgmpa' !== $domain || false === strpos( $mofile, WP_LANG_DIR ) || @is_readable( $mofile ) ) {\n\t\t\t\treturn $mofile;\n\t\t\t}\n\n\t\t\t// Current fallback file is not valid, let's try the alternative option.\n\t\t\tif ( false !== strpos( $mofile, '/themes/' ) ) {\n\t\t\t\treturn str_replace( '/themes/', '/plugins/', $mofile );\n\t\t\t} elseif ( false !== strpos( $mofile, '/plugins/' ) ) {\n\t\t\t\treturn str_replace( '/plugins/', '/themes/', $mofile );\n\t\t\t} else {\n\t\t\t\treturn $mofile;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Hook in plugin action link filters for the WP native plugins page.\n\t\t *\n\t\t * - Prevent activation of plugins which don't meet the minimum version requirements.\n\t\t * - Prevent deactivation of force-activated plugins.\n\t\t * - Add update notice if update available.\n\t\t *\n\t\t * @since 2.5.0\n\t\t */\n\t\tpublic function add_plugin_action_link_filters() {\n\t\t\tforeach ( $this->plugins as $slug => $plugin ) {\n\t\t\t\tif ( false === $this->can_plugin_activate( $slug ) ) {\n\t\t\t\t\tadd_filter( 'plugin_action_links_' . $plugin['file_path'], array( $this, 'filter_plugin_action_links_activate' ), 20 );\n\t\t\t\t}\n\n\t\t\t\tif ( true === $plugin['force_activation'] ) {\n\t\t\t\t\tadd_filter( 'plugin_action_links_' . $plugin['file_path'], array( $this, 'filter_plugin_action_links_deactivate' ), 20 );\n\t\t\t\t}\n\n\t\t\t\tif ( false !== $this->does_plugin_require_update( $slug ) ) {\n\t\t\t\t\tadd_filter( 'plugin_action_links_' . $plugin['file_path'], array( $this, 'filter_plugin_action_links_update' ), 20 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Remove the 'Activate' link on the WP native plugins page if the plugin does not meet the\n\t\t * minimum version requirements.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param array $actions Action links.\n\t\t * @return array\n\t\t */\n\t\tpublic function filter_plugin_action_links_activate( $actions ) {\n\t\t\tunset( $actions['activate'] );\n\n\t\t\treturn $actions;\n\t\t}\n\n\t\t/**\n\t\t * Remove the 'Deactivate' link on the WP native plugins page if the plugin has been set to force activate.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param array $actions Action links.\n\t\t * @return array\n\t\t */\n\t\tpublic function filter_plugin_action_links_deactivate( $actions ) {\n\t\t\tunset( $actions['deactivate'] );\n\n\t\t\treturn $actions;\n\t\t}\n\n\t\t/**\n\t\t * Add a 'Requires update' link on the WP native plugins page if the plugin does not meet the\n\t\t * minimum version requirements.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param array $actions Action links.\n\t\t * @return array\n\t\t */\n\t\tpublic function filter_plugin_action_links_update( $actions ) {\n\t\t\t$actions['update'] = sprintf(\n\t\t\t\t'<a href=\"%1$s\" title=\"%2$s\" class=\"edit\">%3$s</a>',\n\t\t\t\tesc_url( $this->get_tgmpa_status_url( 'update' ) ),\n\t\t\t\tesc_attr__( 'This plugin needs to be updated to be compatible with your theme.', 'tgmpa' ),\n\t\t\t\tesc_html__( 'Update Required', 'tgmpa' )\n\t\t\t);\n\n\t\t\treturn $actions;\n\t\t}\n\n\t\t/**\n\t\t * Handles calls to show plugin information via links in the notices.\n\t\t *\n\t\t * We get the links in the admin notices to point to the TGMPA page, rather\n\t\t * than the typical plugin-install.php file, so we can prepare everything\n\t\t * beforehand.\n\t\t *\n\t\t * WP does not make it easy to show the plugin information in the thickbox -\n\t\t * here we have to require a file that includes a function that does the\n\t\t * main work of displaying it, enqueue some styles, set up some globals and\n\t\t * finally call that function before exiting.\n\t\t *\n\t\t * Down right easy once you know how...\n\t\t *\n\t\t * Returns early if not the TGMPA page.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @global string $tab Used as iframe div class names, helps with styling\n\t\t * @global string $body_id Used as the iframe body ID, helps with styling\n\t\t *\n\t\t * @return null Returns early if not the TGMPA page.\n\t\t */\n\t\tpublic function admin_init() {\n\t\t\tif ( ! $this->is_tgmpa_page() ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isset( $_REQUEST['tab'] ) && 'plugin-information' === $_REQUEST['tab'] ) {\n\t\t\t\t// Needed for install_plugin_information().\n\t\t\t\trequire_once ABSPATH . 'wp-admin/includes/plugin-install.php';\n\n\t\t\t\twp_enqueue_style( 'plugin-install' );\n\n\t\t\t\tglobal $tab, $body_id;\n\t\t\t\t// phpcs:ignore WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedVariableFound -- WP requirement.\n\t\t\t\t$body_id = 'plugin-information';\n\n\t\t\t\t// phpcs:ignore WordPress.WP.GlobalVariablesOverride.Prohibited -- Overriding the WP global is the point.\n\t\t\t\t$tab = 'plugin-information';\n\n\t\t\t\tinstall_plugin_information();\n\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Enqueue thickbox scripts/styles for plugin info.\n\t\t *\n\t\t * Thickbox is not automatically included on all admin pages, so we must\n\t\t * manually enqueue it for those pages.\n\t\t *\n\t\t * Thickbox is only loaded if the user has not dismissed the admin\n\t\t * notice or if there are any plugins left to install and activate.\n\t\t *\n\t\t * @since 2.1.0\n\t\t */\n\t\tpublic function thickbox() {\n\t\t\tif ( ! get_user_meta( get_current_user_id(), 'tgmpa_dismissed_notice_' . $this->id, true ) ) {\n\t\t\t\tadd_thickbox();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Adds submenu page if there are plugin actions to take.\n\t\t *\n\t\t * This method adds the submenu page letting users know that a required\n\t\t * plugin needs to be installed.\n\t\t *\n\t\t * This page disappears once the plugin has been installed and activated.\n\t\t *\n\t\t * @since 1.0.0\n\t\t *\n\t\t * @see TGM_Plugin_Activation::init()\n\t\t * @see TGM_Plugin_Activation::install_plugins_page()\n\t\t *\n\t\t * @return null Return early if user lacks capability to install a plugin.\n\t\t */\n\t\tpublic function admin_menu() {\n\t\t\t// Make sure privileges are correct to see the page.\n\t\t\tif ( ! current_user_can( 'install_plugins' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$args = apply_filters(\n\t\t\t\t'tgmpa_admin_menu_args',\n\t\t\t\tarray(\n\t\t\t\t\t'parent_slug' => $this->parent_slug,                     // Parent Menu slug.\n\t\t\t\t\t'page_title'  => $this->strings['page_title'],           // Page title.\n\t\t\t\t\t'menu_title'  => $this->strings['menu_title'],           // Menu title.\n\t\t\t\t\t'capability'  => $this->capability,                      // Capability.\n\t\t\t\t\t'menu_slug'   => $this->menu,                            // Menu slug.\n\t\t\t\t\t'function'    => array( $this, 'install_plugins_page' ), // Callback.\n\t\t\t\t)\n\t\t\t);\n\n\t\t\t$this->add_admin_menu( $args );\n\t\t}\n\n\t\t/**\n\t\t * Add the menu item.\n\t\t *\n\t\t * {@internal IMPORTANT! If this function changes, review the regex in the custom TGMPA\n\t\t * generator on the website.}}\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param array $args Menu item configuration.\n\t\t */\n\t\tprotected function add_admin_menu( array $args ) {\n\t\t\tif ( has_filter( 'tgmpa_admin_menu_use_add_theme_page' ) ) {\n\t\t\t\t_deprecated_function( 'The \"tgmpa_admin_menu_use_add_theme_page\" filter', '2.5.0', esc_html__( 'Set the parent_slug config variable instead.', 'tgmpa' ) );\n\t\t\t}\n\n\t\t\tif ( 'themes.php' === $this->parent_slug ) {\n\t\t\t\t$this->page_hook = call_user_func( 'add_theme_page', $args['page_title'], $args['menu_title'], $args['capability'], $args['menu_slug'], $args['function'] );\n\t\t\t} else {\n\t\t\t\t$this->page_hook = call_user_func( 'add_submenu_page', $args['parent_slug'], $args['page_title'], $args['menu_title'], $args['capability'], $args['menu_slug'], $args['function'] );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Echoes plugin installation form.\n\t\t *\n\t\t * This method is the callback for the admin_menu method function.\n\t\t * This displays the admin page and form area where the user can select to install and activate the plugin.\n\t\t * Aborts early if we're processing a plugin installation action.\n\t\t *\n\t\t * @since 1.0.0\n\t\t *\n\t\t * @return null Aborts early if we're processing a plugin installation action.\n\t\t */\n\t\tpublic function install_plugins_page() {\n\t\t\t// Store new instance of plugin table in object.\n\t\t\t$plugin_table = new TGMPA_List_Table();\n\n\t\t\t// Return early if processing a plugin installation action.\n\t\t\tif ( ( ( 'tgmpa-bulk-install' === $plugin_table->current_action() || 'tgmpa-bulk-update' === $plugin_table->current_action() ) && $plugin_table->process_bulk_actions() ) || $this->do_plugin_install() ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Force refresh of available plugin information so we'll know about manual updates/deletes.\n\t\t\twp_clean_plugins_cache( false );\n\n\t\t\t?>\n\t\t\t<div class=\"tgmpa wrap\">\n\t\t\t\t<h1><?php echo esc_html( get_admin_page_title() ); ?></h1>\n\t\t\t\t<?php $plugin_table->prepare_items(); ?>\n\n\t\t\t\t<?php\n\t\t\t\tif ( ! empty( $this->message ) && is_string( $this->message ) ) {\n\t\t\t\t\techo wp_kses_post( $this->message );\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t\t<?php $plugin_table->views(); ?>\n\n\t\t\t\t<form id=\"tgmpa-plugins\" action=\"\" method=\"post\">\n\t\t\t\t\t<input type=\"hidden\" name=\"tgmpa-page\" value=\"<?php echo esc_attr( $this->menu ); ?>\" />\n\t\t\t\t\t<input type=\"hidden\" name=\"plugin_status\" value=\"<?php echo esc_attr( $plugin_table->view_context ); ?>\" />\n\t\t\t\t\t<?php $plugin_table->display(); ?>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t\t<?php\n\t\t}\n\n\t\t/**\n\t\t * Installs, updates or activates a plugin depending on the action link clicked by the user.\n\t\t *\n\t\t * Checks the $_GET variable to see which actions have been\n\t\t * passed and responds with the appropriate method.\n\t\t *\n\t\t * Uses WP_Filesystem to process and handle the plugin installation\n\t\t * method.\n\t\t *\n\t\t * @since 1.0.0\n\t\t *\n\t\t * @uses WP_Filesystem\n\t\t * @uses WP_Error\n\t\t * @uses WP_Upgrader\n\t\t * @uses Plugin_Upgrader\n\t\t * @uses Plugin_Installer_Skin\n\t\t * @uses Plugin_Upgrader_Skin\n\t\t *\n\t\t * @return boolean True on success, false on failure.\n\t\t */\n\t\tprotected function do_plugin_install() {\n\t\t\tif ( empty( $_GET['plugin'] ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// All plugin information will be stored in an array for processing.\n\t\t\t$slug = $this->sanitize_key( urldecode( $_GET['plugin'] ) );\n\n\t\t\tif ( ! isset( $this->plugins[ $slug ] ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Was an install or upgrade action link clicked?\n\t\t\tif ( ( isset( $_GET['tgmpa-install'] ) && 'install-plugin' === $_GET['tgmpa-install'] ) || ( isset( $_GET['tgmpa-update'] ) && 'update-plugin' === $_GET['tgmpa-update'] ) ) {\n\n\t\t\t\t$install_type = 'install';\n\t\t\t\tif ( isset( $_GET['tgmpa-update'] ) && 'update-plugin' === $_GET['tgmpa-update'] ) {\n\t\t\t\t\t$install_type = 'update';\n\t\t\t\t}\n\n\t\t\t\tcheck_admin_referer( 'tgmpa-' . $install_type, 'tgmpa-nonce' );\n\n\t\t\t\t// Pass necessary information via URL if WP_Filesystem is needed.\n\t\t\t\t$url = wp_nonce_url(\n\t\t\t\t\tadd_query_arg(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'plugin'                 => urlencode( $slug ),\n\t\t\t\t\t\t\t'tgmpa-' . $install_type => $install_type . '-plugin',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t$this->get_tgmpa_url()\n\t\t\t\t\t),\n\t\t\t\t\t'tgmpa-' . $install_type,\n\t\t\t\t\t'tgmpa-nonce'\n\t\t\t\t);\n\n\t\t\t\t$method = ''; // Leave blank so WP_Filesystem can populate it as necessary.\n\n\t\t\t\t$creds = request_filesystem_credentials( esc_url_raw( $url ), $method, false, false, array() );\n\t\t\t\tif ( false === $creds ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif ( ! WP_Filesystem( $creds ) ) {\n\t\t\t\t\trequest_filesystem_credentials( esc_url_raw( $url ), $method, true, false, array() ); // Setup WP_Filesystem.\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t/* If we arrive here, we have the filesystem. */\n\n\t\t\t\t// Prep variables for Plugin_Installer_Skin class.\n\t\t\t\t$extra         = array();\n\t\t\t\t$extra['slug'] = $slug; // Needed for potentially renaming of directory name.\n\t\t\t\t$source        = $this->get_download_url( $slug );\n\t\t\t\t$api           = ( 'repo' === $this->plugins[ $slug ]['source_type'] ) ? $this->get_plugins_api( $slug ) : null;\n\t\t\t\t$api           = ( false !== $api ) ? $api : null;\n\n\t\t\t\t$url = add_query_arg(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'action' => $install_type . '-plugin',\n\t\t\t\t\t\t'plugin' => urlencode( $slug ),\n\t\t\t\t\t),\n\t\t\t\t\t'update.php'\n\t\t\t\t);\n\n\t\t\t\tif ( ! class_exists( 'Plugin_Upgrader', false ) ) {\n\t\t\t\t\trequire_once ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';\n\t\t\t\t}\n\n\t\t\t\t$title     = ( 'update' === $install_type ) ? $this->strings['updating'] : $this->strings['installing'];\n\t\t\t\t$skin_args = array(\n\t\t\t\t\t'type'   => ( 'bundled' !== $this->plugins[ $slug ]['source_type'] ) ? 'web' : 'upload',\n\t\t\t\t\t'title'  => sprintf( $title, $this->plugins[ $slug ]['name'] ),\n\t\t\t\t\t'url'    => esc_url_raw( $url ),\n\t\t\t\t\t'nonce'  => $install_type . '-plugin_' . $slug,\n\t\t\t\t\t'plugin' => '',\n\t\t\t\t\t'api'    => $api,\n\t\t\t\t\t'extra'  => $extra,\n\t\t\t\t);\n\t\t\t\tunset( $title );\n\n\t\t\t\tif ( 'update' === $install_type ) {\n\t\t\t\t\t$skin_args['plugin'] = $this->plugins[ $slug ]['file_path'];\n\t\t\t\t\t$skin                = new Plugin_Upgrader_Skin( $skin_args );\n\t\t\t\t} else {\n\t\t\t\t\t$skin = new Plugin_Installer_Skin( $skin_args );\n\t\t\t\t}\n\n\t\t\t\t// Create a new instance of Plugin_Upgrader.\n\t\t\t\t$upgrader = new Plugin_Upgrader( $skin );\n\n\t\t\t\t// Perform the action and install the plugin from the $source urldecode().\n\t\t\t\tadd_filter( 'upgrader_source_selection', array( $this, 'maybe_adjust_source_dir' ), 1, 3 );\n\n\t\t\t\tif ( 'update' === $install_type ) {\n\t\t\t\t\t// Inject our info into the update transient.\n\t\t\t\t\t$to_inject                    = array(\n\t\t\t\t\t\t$slug => $this->plugins[ $slug ],\n\t\t\t\t\t);\n\t\t\t\t\t$to_inject[ $slug ]['source'] = $source;\n\t\t\t\t\t$this->inject_update_info( $to_inject );\n\n\t\t\t\t\t$upgrader->upgrade( $this->plugins[ $slug ]['file_path'] );\n\t\t\t\t} else {\n\t\t\t\t\t$upgrader->install( $source );\n\t\t\t\t}\n\n\t\t\t\tremove_filter( 'upgrader_source_selection', array( $this, 'maybe_adjust_source_dir' ), 1 );\n\n\t\t\t\t// Make sure we have the correct file path now the plugin is installed/updated.\n\t\t\t\t$this->populate_file_path( $slug );\n\n\t\t\t\t// Only activate plugins if the config option is set to true and the plugin isn't\n\t\t\t\t// already active (upgrade).\n\t\t\t\tif ( $this->is_automatic && ! $this->is_plugin_active( $slug ) ) {\n\t\t\t\t\t$plugin_activate = $upgrader->plugin_info(); // Grab the plugin info from the Plugin_Upgrader method.\n\t\t\t\t\tif ( false === $this->activate_single_plugin( $plugin_activate, $slug, true ) ) {\n\t\t\t\t\t\treturn true; // Finish execution of the function early as we encountered an error.\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$this->show_tgmpa_version();\n\n\t\t\t\t// Display message based on if all plugins are now active or not.\n\t\t\t\tif ( $this->is_tgmpa_complete() ) {\n\t\t\t\t\techo '<p>', sprintf( esc_html( $this->strings['complete'] ), '<a href=\"' . esc_url( self_admin_url() ) . '\">' . esc_html( $this->strings['dashboard'] ) . '</a>' ), '</p>';\n\t\t\t\t\techo '<style type=\"text/css\">#adminmenu .wp-submenu li.current { display: none !important; }</style>';\n\t\t\t\t} else {\n\t\t\t\t\techo '<p><a href=\"', esc_url( $this->get_tgmpa_url() ), '\" target=\"_parent\">', esc_html( $this->strings['return'] ), '</a></p>';\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t} elseif ( isset( $this->plugins[ $slug ]['file_path'], $_GET['tgmpa-activate'] ) && 'activate-plugin' === $_GET['tgmpa-activate'] ) {\n\t\t\t\t// Activate action link was clicked.\n\t\t\t\tcheck_admin_referer( 'tgmpa-activate', 'tgmpa-nonce' );\n\n\t\t\t\tif ( false === $this->activate_single_plugin( $this->plugins[ $slug ]['file_path'], $slug ) ) {\n\t\t\t\t\treturn true; // Finish execution of the function early as we encountered an error.\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * Inject information into the 'update_plugins' site transient as WP checks that before running an update.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param array $plugins The plugin information for the plugins which are to be updated.\n\t\t */\n\t\tpublic function inject_update_info( $plugins ) {\n\t\t\t$repo_updates = get_site_transient( 'update_plugins' );\n\n\t\t\tif ( ! is_object( $repo_updates ) ) {\n\t\t\t\t$repo_updates = new stdClass();\n\t\t\t}\n\n\t\t\tforeach ( $plugins as $slug => $plugin ) {\n\t\t\t\t$file_path = $plugin['file_path'];\n\n\t\t\t\tif ( empty( $repo_updates->response[ $file_path ] ) ) {\n\t\t\t\t\t$repo_updates->response[ $file_path ] = new stdClass();\n\t\t\t\t}\n\n\t\t\t\t// We only really need to set package, but let's do all we can in case WP changes something.\n\t\t\t\t$repo_updates->response[ $file_path ]->slug        = $slug;\n\t\t\t\t$repo_updates->response[ $file_path ]->plugin      = $file_path;\n\t\t\t\t$repo_updates->response[ $file_path ]->new_version = $plugin['version'];\n\t\t\t\t$repo_updates->response[ $file_path ]->package     = $plugin['source'];\n\t\t\t\tif ( empty( $repo_updates->response[ $file_path ]->url ) && ! empty( $plugin['external_url'] ) ) {\n\t\t\t\t\t$repo_updates->response[ $file_path ]->url = $plugin['external_url'];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tset_site_transient( 'update_plugins', $repo_updates );\n\t\t}\n\n\t\t/**\n\t\t * Adjust the plugin directory name if necessary.\n\t\t *\n\t\t * The final destination directory of a plugin is based on the subdirectory name found in the\n\t\t * (un)zipped source. In some cases - most notably GitHub repository plugin downloads -, this\n\t\t * subdirectory name is not the same as the expected slug and the plugin will not be recognized\n\t\t * as installed. This is fixed by adjusting the temporary unzipped source subdirectory name to\n\t\t * the expected plugin slug.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string       $source        Path to upgrade/zip-file-name.tmp/subdirectory/.\n\t\t * @param string       $remote_source Path to upgrade/zip-file-name.tmp.\n\t\t * @param \\WP_Upgrader $upgrader      Instance of the upgrader which installs the plugin.\n\t\t * @return string $source\n\t\t */\n\t\tpublic function maybe_adjust_source_dir( $source, $remote_source, $upgrader ) {\n\t\t\tif ( ! $this->is_tgmpa_page() || ! is_object( $GLOBALS['wp_filesystem'] ) ) {\n\t\t\t\treturn $source;\n\t\t\t}\n\n\t\t\t// Check for single file plugins.\n\t\t\t$source_files = array_keys( $GLOBALS['wp_filesystem']->dirlist( $remote_source ) );\n\t\t\tif ( 1 === count( $source_files ) && false === $GLOBALS['wp_filesystem']->is_dir( $source ) ) {\n\t\t\t\treturn $source;\n\t\t\t}\n\n\t\t\t// Multi-file plugin, let's see if the directory is correctly named.\n\t\t\t$desired_slug = '';\n\n\t\t\t// Figure out what the slug is supposed to be.\n\t\t\tif ( false === $upgrader->bulk && ! empty( $upgrader->skin->options['extra']['slug'] ) ) {\n\t\t\t\t$desired_slug = $upgrader->skin->options['extra']['slug'];\n\t\t\t} else {\n\t\t\t\t// Bulk installer contains less info, so fall back on the info registered here.\n\t\t\t\tforeach ( $this->plugins as $slug => $plugin ) {\n\t\t\t\t\tif ( ! empty( $upgrader->skin->plugin_names[ $upgrader->skin->i ] ) && $plugin['name'] === $upgrader->skin->plugin_names[ $upgrader->skin->i ] ) {\n\t\t\t\t\t\t$desired_slug = $slug;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tunset( $slug, $plugin );\n\t\t\t}\n\n\t\t\tif ( ! empty( $desired_slug ) ) {\n\t\t\t\t$subdir_name = untrailingslashit( str_replace( trailingslashit( $remote_source ), '', $source ) );\n\n\t\t\t\tif ( ! empty( $subdir_name ) && $subdir_name !== $desired_slug ) {\n\t\t\t\t\t$from_path = untrailingslashit( $source );\n\t\t\t\t\t$to_path   = trailingslashit( $remote_source ) . $desired_slug;\n\n\t\t\t\t\tif ( true === $GLOBALS['wp_filesystem']->move( $from_path, $to_path ) ) {\n\t\t\t\t\t\treturn trailingslashit( $to_path );\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn new WP_Error(\n\t\t\t\t\t\t\t'rename_failed',\n\t\t\t\t\t\t\tesc_html__( 'The remote plugin package does not contain a folder with the desired slug and renaming did not work.', 'tgmpa' ) . ' ' . esc_html__( 'Please contact the plugin provider and ask them to package their plugin according to the WordPress guidelines.', 'tgmpa' ),\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'found'    => $subdir_name,\n\t\t\t\t\t\t\t\t'expected' => $desired_slug,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} elseif ( empty( $subdir_name ) ) {\n\t\t\t\t\treturn new WP_Error(\n\t\t\t\t\t\t'packaged_wrong',\n\t\t\t\t\t\tesc_html__( 'The remote plugin package consists of more than one file, but the files are not packaged in a folder.', 'tgmpa' ) . ' ' . esc_html__( 'Please contact the plugin provider and ask them to package their plugin according to the WordPress guidelines.', 'tgmpa' ),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'found'    => $subdir_name,\n\t\t\t\t\t\t\t'expected' => $desired_slug,\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $source;\n\t\t}\n\n\t\t/**\n\t\t * Activate a single plugin and send feedback about the result to the screen.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $file_path Path within wp-plugins/ to main plugin file.\n\t\t * @param string $slug      Plugin slug.\n\t\t * @param bool   $automatic Whether this is an automatic activation after an install. Defaults to false.\n\t\t *                          This determines the styling of the output messages.\n\t\t * @return bool False if an error was encountered, true otherwise.\n\t\t */\n\t\tprotected function activate_single_plugin( $file_path, $slug, $automatic = false ) {\n\t\t\tif ( $this->can_plugin_activate( $slug ) ) {\n\t\t\t\t$activate = activate_plugin( $file_path );\n\n\t\t\t\tif ( is_wp_error( $activate ) ) {\n\t\t\t\t\techo '<div id=\"message\" class=\"error\"><p>', wp_kses_post( $activate->get_error_message() ), '</p></div>',\n\t\t\t\t\t\t'<p><a href=\"', esc_url( $this->get_tgmpa_url() ), '\" target=\"_parent\">', esc_html( $this->strings['return'] ), '</a></p>';\n\n\t\t\t\t\treturn false; // End it here if there is an error with activation.\n\t\t\t\t} else {\n\t\t\t\t\tif ( ! $automatic ) {\n\t\t\t\t\t\t// Make sure message doesn't display again if bulk activation is performed\n\t\t\t\t\t\t// immediately after a single activation.\n\t\t\t\t\t\t// phpcs:ignore WordPress.Security.NonceVerification.Missing -- Not using the superglobal.\n\t\t\t\t\t\tif ( ! isset( $_POST['action'] ) ) {\n\t\t\t\t\t\t\techo '<div id=\"message\" class=\"updated\"><p>', esc_html( $this->strings['activated_successfully'] ), ' <strong>', esc_html( $this->plugins[ $slug ]['name'] ), '.</strong></p></div>';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Simpler message layout for use on the plugin install page.\n\t\t\t\t\t\techo '<p>', esc_html( $this->strings['plugin_activated'] ), '</p>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} elseif ( $this->is_plugin_active( $slug ) ) {\n\t\t\t\t// No simpler message format provided as this message should never be encountered\n\t\t\t\t// on the plugin install page.\n\t\t\t\techo '<div id=\"message\" class=\"error\"><p>',\n\t\t\t\t\tsprintf(\n\t\t\t\t\t\tesc_html( $this->strings['plugin_already_active'] ),\n\t\t\t\t\t\t'<strong>' . esc_html( $this->plugins[ $slug ]['name'] ) . '</strong>'\n\t\t\t\t\t),\n\t\t\t\t\t'</p></div>';\n\t\t\t} elseif ( $this->does_plugin_require_update( $slug ) ) {\n\t\t\t\tif ( ! $automatic ) {\n\t\t\t\t\t// Make sure message doesn't display again if bulk activation is performed\n\t\t\t\t\t// immediately after a single activation.\n\t\t\t\t\t// phpcs:ignore WordPress.Security.NonceVerification.Missing -- Not using the superglobal.\n\t\t\t\t\tif ( ! isset( $_POST['action'] ) ) {\n\t\t\t\t\t\techo '<div id=\"message\" class=\"error\"><p>',\n\t\t\t\t\t\t\tsprintf(\n\t\t\t\t\t\t\t\tesc_html( $this->strings['plugin_needs_higher_version'] ),\n\t\t\t\t\t\t\t\t'<strong>' . esc_html( $this->plugins[ $slug ]['name'] ) . '</strong>'\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'</p></div>';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Simpler message layout for use on the plugin install page.\n\t\t\t\t\techo '<p>', sprintf( esc_html( $this->strings['plugin_needs_higher_version'] ), esc_html( $this->plugins[ $slug ]['name'] ) ), '</p>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t * Echoes required plugin notice.\n\t\t *\n\t\t * Outputs a message telling users that a specific plugin is required for\n\t\t * their theme. If appropriate, it includes a link to the form page where\n\t\t * users can install and activate the plugin.\n\t\t *\n\t\t * Returns early if we're on the Install page.\n\t\t *\n\t\t * @since 1.0.0\n\t\t *\n\t\t * @global object $current_screen\n\t\t *\n\t\t * @return null Returns early if we're on the Install page.\n\t\t */\n\t\tpublic function notices() {\n\t\t\t// Remove nag on the install page / Return early if the nag message has been dismissed or user < author.\n\t\t\tif ( ( $this->is_tgmpa_page() || $this->is_core_update_page() ) || get_user_meta( get_current_user_id(), 'tgmpa_dismissed_notice_' . $this->id, true ) || ! current_user_can( apply_filters( 'tgmpa_show_admin_notice_capability', 'publish_posts' ) ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Store for the plugin slugs by message type.\n\t\t\t$message = array();\n\n\t\t\t// Initialize counters used to determine plurality of action link texts.\n\t\t\t$install_link_count          = 0;\n\t\t\t$update_link_count           = 0;\n\t\t\t$activate_link_count         = 0;\n\t\t\t$total_required_action_count = 0;\n\n\t\t\tforeach ( $this->plugins as $slug => $plugin ) {\n\t\t\t\tif ( $this->is_plugin_active( $slug ) && false === $this->does_plugin_have_update( $slug ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( ! $this->is_plugin_installed( $slug ) ) {\n\t\t\t\t\tif ( current_user_can( 'install_plugins' ) ) {\n\t\t\t\t\t\t$install_link_count++;\n\n\t\t\t\t\t\tif ( true === $plugin['required'] ) {\n\t\t\t\t\t\t\t$message['notice_can_install_required'][] = $slug;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$message['notice_can_install_recommended'][] = $slug;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( true === $plugin['required'] ) {\n\t\t\t\t\t\t$total_required_action_count++;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif ( ! $this->is_plugin_active( $slug ) && $this->can_plugin_activate( $slug ) ) {\n\t\t\t\t\t\tif ( current_user_can( 'activate_plugins' ) ) {\n\t\t\t\t\t\t\t$activate_link_count++;\n\n\t\t\t\t\t\t\tif ( true === $plugin['required'] ) {\n\t\t\t\t\t\t\t\t$message['notice_can_activate_required'][] = $slug;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$message['notice_can_activate_recommended'][] = $slug;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( true === $plugin['required'] ) {\n\t\t\t\t\t\t\t$total_required_action_count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( $this->does_plugin_require_update( $slug ) || false !== $this->does_plugin_have_update( $slug ) ) {\n\n\t\t\t\t\t\tif ( current_user_can( 'update_plugins' ) ) {\n\t\t\t\t\t\t\t$update_link_count++;\n\n\t\t\t\t\t\t\tif ( $this->does_plugin_require_update( $slug ) ) {\n\t\t\t\t\t\t\t\t$message['notice_ask_to_update'][] = $slug;\n\t\t\t\t\t\t\t} elseif ( false !== $this->does_plugin_have_update( $slug ) ) {\n\t\t\t\t\t\t\t\t$message['notice_ask_to_update_maybe'][] = $slug;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( true === $plugin['required'] ) {\n\t\t\t\t\t\t\t$total_required_action_count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tunset( $slug, $plugin );\n\n\t\t\t// If we have notices to display, we move forward.\n\t\t\tif ( ! empty( $message ) || $total_required_action_count > 0 ) {\n\t\t\t\tkrsort( $message ); // Sort messages.\n\t\t\t\t$rendered = '';\n\n\t\t\t\t// As add_settings_error() wraps the final message in a <p> and as the final message can't be\n\t\t\t\t// filtered, using <p>'s in our html would render invalid html output.\n\t\t\t\t$line_template = '<span style=\"display: block; margin: 0.5em 0.5em 0 0; clear: both;\">%s</span>' . \"\\n\";\n\n\t\t\t\tif ( ! current_user_can( 'activate_plugins' ) && ! current_user_can( 'install_plugins' ) && ! current_user_can( 'update_plugins' ) ) {\n\t\t\t\t\t$rendered  = esc_html( $this->strings['notice_cannot_install_activate'] ) . ' ' . esc_html( $this->strings['contact_admin'] );\n\t\t\t\t\t$rendered .= $this->create_user_action_links_for_notice( 0, 0, 0, $line_template );\n\t\t\t\t} else {\n\n\t\t\t\t\t// If dismissable is false and a message is set, output it now.\n\t\t\t\t\tif ( ! $this->dismissable && ! empty( $this->dismiss_msg ) ) {\n\t\t\t\t\t\t$rendered .= sprintf( $line_template, wp_kses_post( $this->dismiss_msg ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Render the individual message lines for the notice.\n\t\t\t\t\tforeach ( $message as $type => $plugin_group ) {\n\t\t\t\t\t\t$linked_plugins = array();\n\n\t\t\t\t\t\t// Get the external info link for a plugin if one is available.\n\t\t\t\t\t\tforeach ( $plugin_group as $plugin_slug ) {\n\t\t\t\t\t\t\t$linked_plugins[] = $this->get_info_link( $plugin_slug );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tunset( $plugin_slug );\n\n\t\t\t\t\t\t$count          = count( $plugin_group );\n\t\t\t\t\t\t$linked_plugins = array_map( array( 'TGMPA_Utils', 'wrap_in_em' ), $linked_plugins );\n\t\t\t\t\t\t$last_plugin    = array_pop( $linked_plugins ); // Pop off last name to prep for readability.\n\t\t\t\t\t\t$imploded       = empty( $linked_plugins ) ? $last_plugin : ( implode( ', ', $linked_plugins ) . ' ' . esc_html_x( 'and', 'plugin A *and* plugin B', 'tgmpa' ) . ' ' . $last_plugin );\n\n\t\t\t\t\t\t$rendered .= sprintf(\n\t\t\t\t\t\t\t$line_template,\n\t\t\t\t\t\t\tsprintf(\n\t\t\t\t\t\t\t\ttranslate_nooped_plural( $this->strings[ $type ], $count, 'tgmpa' ),\n\t\t\t\t\t\t\t\t$imploded,\n\t\t\t\t\t\t\t\t$count\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\t\t\t\t\tunset( $type, $plugin_group, $linked_plugins, $count, $last_plugin, $imploded );\n\n\t\t\t\t\t$rendered .= $this->create_user_action_links_for_notice( $install_link_count, $update_link_count, $activate_link_count, $line_template );\n\t\t\t\t}\n\n\t\t\t\t// Register the nag messages and prepare them to be processed.\n\t\t\t\tadd_settings_error( 'tgmpa', 'tgmpa', $rendered, $this->get_admin_notice_class() );\n\t\t\t}\n\n\t\t\t// Admin options pages already output settings_errors, so this is to avoid duplication.\n\t\t\tif ( 'options-general' !== $GLOBALS['current_screen']->parent_base ) {\n\t\t\t\t$this->display_settings_errors();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Generate the user action links for the admin notice.\n\t\t *\n\t\t * @since 2.6.0\n\t\t *\n\t\t * @param int $install_count  Number of plugins to install.\n\t\t * @param int $update_count   Number of plugins to update.\n\t\t * @param int $activate_count Number of plugins to activate.\n\t\t * @param int $line_template  Template for the HTML tag to output a line.\n\t\t * @return string Action links.\n\t\t */\n\t\tprotected function create_user_action_links_for_notice( $install_count, $update_count, $activate_count, $line_template ) {\n\t\t\t// Setup action links.\n\t\t\t$action_links = array(\n\t\t\t\t'install'  => '',\n\t\t\t\t'update'   => '',\n\t\t\t\t'activate' => '',\n\t\t\t\t'dismiss'  => $this->dismissable ? '<a href=\"' . esc_url( wp_nonce_url( add_query_arg( 'tgmpa-dismiss', 'dismiss_admin_notices' ), 'tgmpa-dismiss-' . get_current_user_id() ) ) . '\" class=\"dismiss-notice\" target=\"_parent\">' . esc_html( $this->strings['dismiss'] ) . '</a>' : '',\n\t\t\t);\n\n\t\t\t$link_template = '<a href=\"%2$s\">%1$s</a>';\n\n\t\t\tif ( current_user_can( 'install_plugins' ) ) {\n\t\t\t\tif ( $install_count > 0 ) {\n\t\t\t\t\t$action_links['install'] = sprintf(\n\t\t\t\t\t\t$link_template,\n\t\t\t\t\t\ttranslate_nooped_plural( $this->strings['install_link'], $install_count, 'tgmpa' ),\n\t\t\t\t\t\tesc_url( $this->get_tgmpa_status_url( 'install' ) )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif ( $update_count > 0 ) {\n\t\t\t\t\t$action_links['update'] = sprintf(\n\t\t\t\t\t\t$link_template,\n\t\t\t\t\t\ttranslate_nooped_plural( $this->strings['update_link'], $update_count, 'tgmpa' ),\n\t\t\t\t\t\tesc_url( $this->get_tgmpa_status_url( 'update' ) )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( current_user_can( 'activate_plugins' ) && $activate_count > 0 ) {\n\t\t\t\t$action_links['activate'] = sprintf(\n\t\t\t\t\t$link_template,\n\t\t\t\t\ttranslate_nooped_plural( $this->strings['activate_link'], $activate_count, 'tgmpa' ),\n\t\t\t\t\tesc_url( $this->get_tgmpa_status_url( 'activate' ) )\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t$action_links = apply_filters( 'tgmpa_notice_action_links', $action_links );\n\n\t\t\t$action_links = array_filter( (array) $action_links ); // Remove any empty array items.\n\n\t\t\tif ( ! empty( $action_links ) ) {\n\t\t\t\t$action_links = sprintf( $line_template, implode( ' | ', $action_links ) );\n\t\t\t\treturn apply_filters( 'tgmpa_notice_rendered_action_links', $action_links );\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Get admin notice class.\n\t\t *\n\t\t * Work around all the changes to the various admin notice classes between WP 4.4 and 3.7\n\t\t * (lowest supported version by TGMPA).\n\t\t *\n\t\t * @since 2.6.0\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tprotected function get_admin_notice_class() {\n\t\t\tif ( ! empty( $this->strings['nag_type'] ) ) {\n\t\t\t\treturn sanitize_html_class( strtolower( $this->strings['nag_type'] ) );\n\t\t\t} else {\n\t\t\t\tif ( version_compare( $this->wp_version, '4.2', '>=' ) ) {\n\t\t\t\t\treturn 'notice-warning';\n\t\t\t\t} elseif ( version_compare( $this->wp_version, '4.1', '>=' ) ) {\n\t\t\t\t\treturn 'notice';\n\t\t\t\t} else {\n\t\t\t\t\treturn 'updated';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Display settings errors and remove those which have been displayed to avoid duplicate messages showing\n\t\t *\n\t\t * @since 2.5.0\n\t\t */\n\t\tprotected function display_settings_errors() {\n\t\t\tglobal $wp_settings_errors;\n\n\t\t\tsettings_errors( 'tgmpa' );\n\n\t\t\tforeach ( (array) $wp_settings_errors as $key => $details ) {\n\t\t\t\tif ( 'tgmpa' === $details['setting'] ) {\n\t\t\t\t\tunset( $wp_settings_errors[ $key ] );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Register dismissal of admin notices.\n\t\t *\n\t\t * Acts on the dismiss link in the admin nag messages.\n\t\t * If clicked, the admin notice disappears and will no longer be visible to this user.\n\t\t *\n\t\t * @since 2.1.0\n\t\t */\n\t\tpublic function dismiss() {\n\t\t\tif ( isset( $_GET['tgmpa-dismiss'] ) && check_admin_referer( 'tgmpa-dismiss-' . get_current_user_id() ) ) {\n\t\t\t\tupdate_user_meta( get_current_user_id(), 'tgmpa_dismissed_notice_' . $this->id, 1 );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Add individual plugin to our collection of plugins.\n\t\t *\n\t\t * If the required keys are not set or the plugin has already\n\t\t * been registered, the plugin is not added.\n\t\t *\n\t\t * @since 2.0.0\n\t\t *\n\t\t * @param array|null $plugin Array of plugin arguments or null if invalid argument.\n\t\t * @return null Return early if incorrect argument.\n\t\t */\n\t\tpublic function register( $plugin ) {\n\t\t\tif ( empty( $plugin['slug'] ) || empty( $plugin['name'] ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( empty( $plugin['slug'] ) || ! is_string( $plugin['slug'] ) || isset( $this->plugins[ $plugin['slug'] ] ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$defaults = array(\n\t\t\t\t'name'               => '',      // String.\n\t\t\t\t'slug'               => '',      // String.\n\t\t\t\t'source'             => 'repo',  // String.\n\t\t\t\t'required'           => false,   // Boolean.\n\t\t\t\t'version'            => '',      // String.\n\t\t\t\t'force_activation'   => false,   // Boolean.\n\t\t\t\t'force_deactivation' => false,   // Boolean.\n\t\t\t\t'external_url'       => '',      // String.\n\t\t\t\t'is_callable'        => '',      // String or array.\n\t\t\t);\n\n\t\t\t// Prepare the received data.\n\t\t\t$plugin = wp_parse_args( $plugin, $defaults );\n\n\t\t\t// Standardize the received slug.\n\t\t\t$plugin['slug'] = $this->sanitize_key( $plugin['slug'] );\n\n\t\t\t// Forgive users for using string versions of booleans or floats for version number.\n\t\t\t$plugin['version']            = (string) $plugin['version'];\n\t\t\t$plugin['source']             = empty( $plugin['source'] ) ? 'repo' : $plugin['source'];\n\t\t\t$plugin['required']           = TGMPA_Utils::validate_bool( $plugin['required'] );\n\t\t\t$plugin['force_activation']   = TGMPA_Utils::validate_bool( $plugin['force_activation'] );\n\t\t\t$plugin['force_deactivation'] = TGMPA_Utils::validate_bool( $plugin['force_deactivation'] );\n\n\t\t\t// Enrich the received data.\n\t\t\t$plugin['file_path']   = $this->_get_plugin_basename_from_slug( $plugin['slug'] );\n\t\t\t$plugin['source_type'] = $this->get_plugin_source_type( $plugin['source'] );\n\n\t\t\t// Set the class properties.\n\t\t\t$this->plugins[ $plugin['slug'] ]    = $plugin;\n\t\t\t$this->sort_order[ $plugin['slug'] ] = $plugin['name'];\n\n\t\t\t// Should we add the force activation hook ?\n\t\t\tif ( true === $plugin['force_activation'] ) {\n\t\t\t\t$this->has_forced_activation = true;\n\t\t\t}\n\n\t\t\t// Should we add the force deactivation hook ?\n\t\t\tif ( true === $plugin['force_deactivation'] ) {\n\t\t\t\t$this->has_forced_deactivation = true;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Determine what type of source the plugin comes from.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $source The source of the plugin as provided, either empty (= WP repo), a file path\n\t\t *                       (= bundled) or an external URL.\n\t\t * @return string 'repo', 'external', or 'bundled'\n\t\t */\n\t\tprotected function get_plugin_source_type( $source ) {\n\t\t\tif ( 'repo' === $source || preg_match( self::WP_REPO_REGEX, $source ) ) {\n\t\t\t\treturn 'repo';\n\t\t\t} elseif ( preg_match( self::IS_URL_REGEX, $source ) ) {\n\t\t\t\treturn 'external';\n\t\t\t} else {\n\t\t\t\treturn 'bundled';\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Sanitizes a string key.\n\t\t *\n\t\t * Near duplicate of WP Core `sanitize_key()`. The difference is that uppercase characters *are*\n\t\t * allowed, so as not to break upgrade paths from non-standard bundled plugins using uppercase\n\t\t * characters in the plugin directory path/slug. Silly them.\n\t\t *\n\t\t * @see https://developer.wordpress.org/reference/hooks/sanitize_key/\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $key String key.\n\t\t * @return string Sanitized key\n\t\t */\n\t\tpublic function sanitize_key( $key ) {\n\t\t\t$raw_key = $key;\n\t\t\t$key     = preg_replace( '`[^A-Za-z0-9_-]`', '', $key );\n\n\t\t\t/**\n\t\t\t * Filter a sanitized key string.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t *\n\t\t\t * @param string $key     Sanitized key.\n\t\t\t * @param string $raw_key The key prior to sanitization.\n\t\t\t */\n\t\t\treturn apply_filters( 'tgmpa_sanitize_key', $key, $raw_key );\n\t\t}\n\n\t\t/**\n\t\t * Amend default configuration settings.\n\t\t *\n\t\t * @since 2.0.0\n\t\t *\n\t\t * @param array $config Array of config options to pass as class properties.\n\t\t */\n\t\tpublic function config( $config ) {\n\t\t\t$keys = array(\n\t\t\t\t'id',\n\t\t\t\t'default_path',\n\t\t\t\t'has_notices',\n\t\t\t\t'dismissable',\n\t\t\t\t'dismiss_msg',\n\t\t\t\t'menu',\n\t\t\t\t'parent_slug',\n\t\t\t\t'capability',\n\t\t\t\t'is_automatic',\n\t\t\t\t'message',\n\t\t\t\t'strings',\n\t\t\t);\n\n\t\t\tforeach ( $keys as $key ) {\n\t\t\t\tif ( isset( $config[ $key ] ) ) {\n\t\t\t\t\tif ( is_array( $config[ $key ] ) ) {\n\t\t\t\t\t\t$this->$key = array_merge( $this->$key, $config[ $key ] );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->$key = $config[ $key ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Amend action link after plugin installation.\n\t\t *\n\t\t * @since 2.0.0\n\t\t *\n\t\t * @param array $install_actions Existing array of actions.\n\t\t * @return false|array Amended array of actions.\n\t\t */\n\t\tpublic function actions( $install_actions ) {\n\t\t\t// Remove action links on the TGMPA install page.\n\t\t\tif ( $this->is_tgmpa_page() ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn $install_actions;\n\t\t}\n\n\t\t/**\n\t\t * Flushes the plugins cache on theme switch to prevent stale entries\n\t\t * from remaining in the plugin table.\n\t\t *\n\t\t * @since 2.4.0\n\t\t *\n\t\t * @param bool $clear_update_cache Optional. Whether to clear the Plugin updates cache.\n\t\t *                                 Parameter added in v2.5.0.\n\t\t */\n\t\tpublic function flush_plugins_cache( $clear_update_cache = true ) {\n\t\t\twp_clean_plugins_cache( $clear_update_cache );\n\t\t}\n\n\t\t/**\n\t\t * Set file_path key for each installed plugin.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @param string $plugin_slug Optional. If set, only (re-)populates the file path for that specific plugin.\n\t\t *                            Parameter added in v2.5.0.\n\t\t */\n\t\tpublic function populate_file_path( $plugin_slug = '' ) {\n\t\t\tif ( ! empty( $plugin_slug ) && is_string( $plugin_slug ) && isset( $this->plugins[ $plugin_slug ] ) ) {\n\t\t\t\t$this->plugins[ $plugin_slug ]['file_path'] = $this->_get_plugin_basename_from_slug( $plugin_slug );\n\t\t\t} else {\n\t\t\t\t// Add file_path key for all plugins.\n\t\t\t\tforeach ( $this->plugins as $slug => $values ) {\n\t\t\t\t\t$this->plugins[ $slug ]['file_path'] = $this->_get_plugin_basename_from_slug( $slug );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Helper function to extract the file path of the plugin file from the\n\t\t * plugin slug, if the plugin is installed.\n\t\t *\n\t\t * @since 2.0.0\n\t\t *\n\t\t * @param string $slug Plugin slug (typically folder name) as provided by the developer.\n\t\t * @return string Either file path for plugin if installed, or just the plugin slug.\n\t\t */\n\t\tprotected function _get_plugin_basename_from_slug( $slug ) {\n\t\t\t$keys = array_keys( $this->get_plugins() );\n\n\t\t\tforeach ( $keys as $key ) {\n\t\t\t\tif ( preg_match( '|^' . $slug . '/|', $key ) ) {\n\t\t\t\t\treturn $key;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $slug;\n\t\t}\n\n\t\t/**\n\t\t * Retrieve plugin data, given the plugin name.\n\t\t *\n\t\t * Loops through the registered plugins looking for $name. If it finds it,\n\t\t * it returns the $data from that plugin. Otherwise, returns false.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @param string $name Name of the plugin, as it was registered.\n\t\t * @param string $data Optional. Array key of plugin data to return. Default is slug.\n\t\t * @return string|boolean Plugin slug if found, false otherwise.\n\t\t */\n\t\tpublic function _get_plugin_data_from_name( $name, $data = 'slug' ) {\n\t\t\tforeach ( $this->plugins as $values ) {\n\t\t\t\tif ( $name === $values['name'] && isset( $values[ $data ] ) ) {\n\t\t\t\t\treturn $values[ $data ];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * Retrieve the download URL for a package.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $slug Plugin slug.\n\t\t * @return string Plugin download URL or path to local file or empty string if undetermined.\n\t\t */\n\t\tpublic function get_download_url( $slug ) {\n\t\t\t$dl_source = '';\n\n\t\t\tswitch ( $this->plugins[ $slug ]['source_type'] ) {\n\t\t\t\tcase 'repo':\n\t\t\t\t\treturn $this->get_wp_repo_download_url( $slug );\n\t\t\t\tcase 'external':\n\t\t\t\t\treturn $this->plugins[ $slug ]['source'];\n\t\t\t\tcase 'bundled':\n\t\t\t\t\treturn $this->default_path . $this->plugins[ $slug ]['source'];\n\t\t\t}\n\n\t\t\treturn $dl_source; // Should never happen.\n\t\t}\n\n\t\t/**\n\t\t * Retrieve the download URL for a WP repo package.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $slug Plugin slug.\n\t\t * @return string Plugin download URL.\n\t\t */\n\t\tprotected function get_wp_repo_download_url( $slug ) {\n\t\t\t$source = '';\n\t\t\t$api    = $this->get_plugins_api( $slug );\n\n\t\t\tif ( false !== $api && isset( $api->download_link ) ) {\n\t\t\t\t$source = $api->download_link;\n\t\t\t}\n\n\t\t\treturn $source;\n\t\t}\n\n\t\t/**\n\t\t * Try to grab information from WordPress API.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $slug Plugin slug.\n\t\t * @return object Plugins_api response object on success, WP_Error on failure.\n\t\t */\n\t\tprotected function get_plugins_api( $slug ) {\n\t\t\tstatic $api = array(); // Cache received responses.\n\n\t\t\tif ( ! isset( $api[ $slug ] ) ) {\n\t\t\t\tif ( ! function_exists( 'plugins_api' ) ) {\n\t\t\t\t\trequire_once ABSPATH . 'wp-admin/includes/plugin-install.php';\n\t\t\t\t}\n\n\t\t\t\t$response = plugins_api(\n\t\t\t\t\t'plugin_information',\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'slug'   => $slug,\n\t\t\t\t\t\t'fields' => array(\n\t\t\t\t\t\t\t'sections' => false,\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\t$api[ $slug ] = false;\n\n\t\t\t\tif ( is_wp_error( $response ) ) {\n\t\t\t\t\twp_die( esc_html( $this->strings['oops'] ) );\n\t\t\t\t} else {\n\t\t\t\t\t$api[ $slug ] = $response;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $api[ $slug ];\n\t\t}\n\n\t\t/**\n\t\t * Retrieve a link to a plugin information page.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $slug Plugin slug.\n\t\t * @return string Fully formed html link to a plugin information page if available\n\t\t *                or the plugin name if not.\n\t\t */\n\t\tpublic function get_info_link( $slug ) {\n\t\t\tif ( ! empty( $this->plugins[ $slug ]['external_url'] ) && preg_match( self::IS_URL_REGEX, $this->plugins[ $slug ]['external_url'] ) ) {\n\t\t\t\t$link = sprintf(\n\t\t\t\t\t'<a href=\"%1$s\" target=\"_blank\">%2$s</a>',\n\t\t\t\t\tesc_url( $this->plugins[ $slug ]['external_url'] ),\n\t\t\t\t\tesc_html( $this->plugins[ $slug ]['name'] )\n\t\t\t\t);\n\t\t\t} elseif ( 'repo' === $this->plugins[ $slug ]['source_type'] ) {\n\t\t\t\t$url = add_query_arg(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'tab'       => 'plugin-information',\n\t\t\t\t\t\t'plugin'    => urlencode( $slug ),\n\t\t\t\t\t\t'TB_iframe' => 'true',\n\t\t\t\t\t\t'width'     => '640',\n\t\t\t\t\t\t'height'    => '500',\n\t\t\t\t\t),\n\t\t\t\t\tself_admin_url( 'plugin-install.php' )\n\t\t\t\t);\n\n\t\t\t\t$link = sprintf(\n\t\t\t\t\t'<a href=\"%1$s\" class=\"thickbox\">%2$s</a>',\n\t\t\t\t\tesc_url( $url ),\n\t\t\t\t\tesc_html( $this->plugins[ $slug ]['name'] )\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t$link = esc_html( $this->plugins[ $slug ]['name'] ); // No hyperlink.\n\t\t\t}\n\n\t\t\treturn $link;\n\t\t}\n\n\t\t/**\n\t\t * Determine if we're on the TGMPA Install page.\n\t\t *\n\t\t * @since 2.1.0\n\t\t *\n\t\t * @return boolean True when on the TGMPA page, false otherwise.\n\t\t */\n\t\tprotected function is_tgmpa_page() {\n\t\t\treturn isset( $_GET['page'] ) && $this->menu === $_GET['page'];\n\t\t}\n\n\t\t/**\n\t\t * Determine if we're on a WP Core installation/upgrade page.\n\t\t *\n\t\t * @since 2.6.0\n\t\t *\n\t\t * @return boolean True when on a WP Core installation/upgrade page, false otherwise.\n\t\t */\n\t\tprotected function is_core_update_page() {\n\t\t\t// Current screen is not always available, most notably on the customizer screen.\n\t\t\tif ( ! function_exists( 'get_current_screen' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$screen = get_current_screen();\n\n\t\t\tif ( 'update-core' === $screen->base ) {\n\t\t\t\t// Core update screen.\n\t\t\t\treturn true;\n\t\t\t} elseif ( 'plugins' === $screen->base && ! empty( $_POST['action'] ) ) { // phpcs:ignore WordPress.Security.NonceVerification.Missing\n\t\t\t\t// Plugins bulk update screen.\n\t\t\t\treturn true;\n\t\t\t} elseif ( 'update' === $screen->base && ! empty( $_POST['action'] ) ) { // phpcs:ignore WordPress.Security.NonceVerification.Missing\n\t\t\t\t// Individual updates (ajax call).\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * Retrieve the URL to the TGMPA Install page.\n\t\t *\n\t\t * I.e. depending on the config settings passed something along the lines of:\n\t\t * http://example.com/wp-admin/themes.php?page=tgmpa-install-plugins\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @return string Properly encoded URL (not escaped).\n\t\t */\n\t\tpublic function get_tgmpa_url() {\n\t\t\tstatic $url;\n\n\t\t\tif ( ! isset( $url ) ) {\n\t\t\t\t$parent = $this->parent_slug;\n\t\t\t\tif ( false === strpos( $parent, '.php' ) ) {\n\t\t\t\t\t$parent = 'admin.php';\n\t\t\t\t}\n\t\t\t\t$url = add_query_arg(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'page' => urlencode( $this->menu ),\n\t\t\t\t\t),\n\t\t\t\t\tself_admin_url( $parent )\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn $url;\n\t\t}\n\n\t\t/**\n\t\t * Retrieve the URL to the TGMPA Install page for a specific plugin status (view).\n\t\t *\n\t\t * I.e. depending on the config settings passed something along the lines of:\n\t\t * http://example.com/wp-admin/themes.php?page=tgmpa-install-plugins&plugin_status=install\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $status Plugin status - either 'install', 'update' or 'activate'.\n\t\t * @return string Properly encoded URL (not escaped).\n\t\t */\n\t\tpublic function get_tgmpa_status_url( $status ) {\n\t\t\treturn add_query_arg(\n\t\t\t\tarray(\n\t\t\t\t\t'plugin_status' => urlencode( $status ),\n\t\t\t\t),\n\t\t\t\t$this->get_tgmpa_url()\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Determine whether there are open actions for plugins registered with TGMPA.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @return bool True if complete, i.e. no outstanding actions. False otherwise.\n\t\t */\n\t\tpublic function is_tgmpa_complete() {\n\t\t\t$complete = true;\n\t\t\tforeach ( $this->plugins as $slug => $plugin ) {\n\t\t\t\tif ( ! $this->is_plugin_active( $slug ) || false !== $this->does_plugin_have_update( $slug ) ) {\n\t\t\t\t\t$complete = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $complete;\n\t\t}\n\n\t\t/**\n\t\t * Check if a plugin is installed. Does not take must-use plugins into account.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $slug Plugin slug.\n\t\t * @return bool True if installed, false otherwise.\n\t\t */\n\t\tpublic function is_plugin_installed( $slug ) {\n\t\t\t$installed_plugins = $this->get_plugins(); // Retrieve a list of all installed plugins (WP cached).\n\n\t\t\treturn ( ! empty( $installed_plugins[ $this->plugins[ $slug ]['file_path'] ] ) );\n\t\t}\n\n\t\t/**\n\t\t * Check if a plugin is active.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $slug Plugin slug.\n\t\t * @return bool True if active, false otherwise.\n\t\t */\n\t\tpublic function is_plugin_active( $slug ) {\n\t\t\treturn ( ( ! empty( $this->plugins[ $slug ]['is_callable'] ) && is_callable( $this->plugins[ $slug ]['is_callable'] ) ) || is_plugin_active( $this->plugins[ $slug ]['file_path'] ) );\n\t\t}\n\n\t\t/**\n\t\t * Check if a plugin can be updated, i.e. if we have information on the minimum WP version required\n\t\t * available, check whether the current install meets them.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $slug Plugin slug.\n\t\t * @return bool True if OK to update, false otherwise.\n\t\t */\n\t\tpublic function can_plugin_update( $slug ) {\n\t\t\t// We currently can't get reliable info on non-WP-repo plugins - issue #380.\n\t\t\tif ( 'repo' !== $this->plugins[ $slug ]['source_type'] ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t$api = $this->get_plugins_api( $slug );\n\n\t\t\tif ( false !== $api && isset( $api->requires ) ) {\n\t\t\t\treturn version_compare( $this->wp_version, $api->requires, '>=' );\n\t\t\t}\n\n\t\t\t// No usable info received from the plugins API, presume we can update.\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t * Check to see if the plugin is 'updatetable', i.e. installed, with an update available\n\t\t * and no WP version requirements blocking it.\n\t\t *\n\t\t * @since 2.6.0\n\t\t *\n\t\t * @param string $slug Plugin slug.\n\t\t * @return bool True if OK to proceed with update, false otherwise.\n\t\t */\n\t\tpublic function is_plugin_updatetable( $slug ) {\n\t\t\tif ( ! $this->is_plugin_installed( $slug ) ) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\treturn ( false !== $this->does_plugin_have_update( $slug ) && $this->can_plugin_update( $slug ) );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Check if a plugin can be activated, i.e. is not currently active and meets the minimum\n\t\t * plugin version requirements set in TGMPA (if any).\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $slug Plugin slug.\n\t\t * @return bool True if OK to activate, false otherwise.\n\t\t */\n\t\tpublic function can_plugin_activate( $slug ) {\n\t\t\treturn ( ! $this->is_plugin_active( $slug ) && ! $this->does_plugin_require_update( $slug ) );\n\t\t}\n\n\t\t/**\n\t\t * Retrieve the version number of an installed plugin.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $slug Plugin slug.\n\t\t * @return string Version number as string or an empty string if the plugin is not installed\n\t\t *                or version unknown (plugins which don't comply with the plugin header standard).\n\t\t */\n\t\tpublic function get_installed_version( $slug ) {\n\t\t\t$installed_plugins = $this->get_plugins(); // Retrieve a list of all installed plugins (WP cached).\n\n\t\t\tif ( ! empty( $installed_plugins[ $this->plugins[ $slug ]['file_path'] ]['Version'] ) ) {\n\t\t\t\treturn $installed_plugins[ $this->plugins[ $slug ]['file_path'] ]['Version'];\n\t\t\t}\n\n\t\t\treturn '';\n\t\t}\n\n\t\t/**\n\t\t * Check whether a plugin complies with the minimum version requirements.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $slug Plugin slug.\n\t\t * @return bool True when a plugin needs to be updated, otherwise false.\n\t\t */\n\t\tpublic function does_plugin_require_update( $slug ) {\n\t\t\t$installed_version = $this->get_installed_version( $slug );\n\t\t\t$minimum_version   = $this->plugins[ $slug ]['version'];\n\n\t\t\treturn version_compare( $minimum_version, $installed_version, '>' );\n\t\t}\n\n\t\t/**\n\t\t * Check whether there is an update available for a plugin.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $slug Plugin slug.\n\t\t * @return false|string Version number string of the available update or false if no update available.\n\t\t */\n\t\tpublic function does_plugin_have_update( $slug ) {\n\t\t\t// Presume bundled and external plugins will point to a package which meets the minimum required version.\n\t\t\tif ( 'repo' !== $this->plugins[ $slug ]['source_type'] ) {\n\t\t\t\tif ( $this->does_plugin_require_update( $slug ) ) {\n\t\t\t\t\treturn $this->plugins[ $slug ]['version'];\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$repo_updates = get_site_transient( 'update_plugins' );\n\n\t\t\tif ( isset( $repo_updates->response[ $this->plugins[ $slug ]['file_path'] ]->new_version ) ) {\n\t\t\t\treturn $repo_updates->response[ $this->plugins[ $slug ]['file_path'] ]->new_version;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * Retrieve potential upgrade notice for a plugin.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $slug Plugin slug.\n\t\t * @return string The upgrade notice or an empty string if no message was available or provided.\n\t\t */\n\t\tpublic function get_upgrade_notice( $slug ) {\n\t\t\t// We currently can't get reliable info on non-WP-repo plugins - issue #380.\n\t\t\tif ( 'repo' !== $this->plugins[ $slug ]['source_type'] ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t$repo_updates = get_site_transient( 'update_plugins' );\n\n\t\t\tif ( ! empty( $repo_updates->response[ $this->plugins[ $slug ]['file_path'] ]->upgrade_notice ) ) {\n\t\t\t\treturn $repo_updates->response[ $this->plugins[ $slug ]['file_path'] ]->upgrade_notice;\n\t\t\t}\n\n\t\t\treturn '';\n\t\t}\n\n\t\t/**\n\t\t * Wrapper around the core WP get_plugins function, making sure it's actually available.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $plugin_folder Optional. Relative path to single plugin folder.\n\t\t * @return array Array of installed plugins with plugin information.\n\t\t */\n\t\tpublic function get_plugins( $plugin_folder = '' ) {\n\t\t\tif ( ! function_exists( 'get_plugins' ) ) {\n\t\t\t\trequire_once ABSPATH . 'wp-admin/includes/plugin.php';\n\t\t\t}\n\n\t\t\treturn get_plugins( $plugin_folder );\n\t\t}\n\n\t\t/**\n\t\t * Delete dismissable nag option when theme is switched.\n\t\t *\n\t\t * This ensures that the user(s) is/are again reminded via nag of required\n\t\t * and/or recommended plugins if they re-activate the theme.\n\t\t *\n\t\t * @since 2.1.1\n\t\t */\n\t\tpublic function update_dismiss() {\n\t\t\tdelete_metadata( 'user', null, 'tgmpa_dismissed_notice_' . $this->id, null, true );\n\t\t}\n\n\t\t/**\n\t\t * Forces plugin activation if the parameter 'force_activation' is\n\t\t * set to true.\n\t\t *\n\t\t * This allows theme authors to specify certain plugins that must be\n\t\t * active at all times while using the current theme.\n\t\t *\n\t\t * Please take special care when using this parameter as it has the\n\t\t * potential to be harmful if not used correctly. Setting this parameter\n\t\t * to true will not allow the specified plugin to be deactivated unless\n\t\t * the user switches themes.\n\t\t *\n\t\t * @since 2.2.0\n\t\t */\n\t\tpublic function force_activation() {\n\t\t\tforeach ( $this->plugins as $slug => $plugin ) {\n\t\t\t\tif ( true === $plugin['force_activation'] ) {\n\t\t\t\t\tif ( ! $this->is_plugin_installed( $slug ) ) {\n\t\t\t\t\t\t// Oops, plugin isn't there so iterate to next condition.\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} elseif ( $this->can_plugin_activate( $slug ) ) {\n\t\t\t\t\t\t// There we go, activate the plugin.\n\t\t\t\t\t\tactivate_plugin( $plugin['file_path'] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Forces plugin deactivation if the parameter 'force_deactivation'\n\t\t * is set to true and adds the plugin to the 'recently active' plugins list.\n\t\t *\n\t\t * This allows theme authors to specify certain plugins that must be\n\t\t * deactivated upon switching from the current theme to another.\n\t\t *\n\t\t * Please take special care when using this parameter as it has the\n\t\t * potential to be harmful if not used correctly.\n\t\t *\n\t\t * @since 2.2.0\n\t\t */\n\t\tpublic function force_deactivation() {\n\t\t\t$deactivated = array();\n\n\t\t\tforeach ( $this->plugins as $slug => $plugin ) {\n\t\t\t\t/*\n\t\t\t\t * Only proceed forward if the parameter is set to true and plugin is active\n\t\t\t\t * as a 'normal' (not must-use) plugin.\n\t\t\t\t */\n\t\t\t\tif ( true === $plugin['force_deactivation'] && is_plugin_active( $plugin['file_path'] ) ) {\n\t\t\t\t\tdeactivate_plugins( $plugin['file_path'] );\n\t\t\t\t\t$deactivated[ $plugin['file_path'] ] = time();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! empty( $deactivated ) ) {\n\t\t\t\tupdate_option( 'recently_activated', $deactivated + (array) get_option( 'recently_activated' ) );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Echo the current TGMPA version number to the page.\n\t\t *\n\t\t * @since 2.5.0\n\t\t */\n\t\tpublic function show_tgmpa_version() {\n\t\t\techo '<p style=\"float: right; padding: 0em 1.5em 0.5em 0;\"><strong><small>',\n\t\t\t\tesc_html(\n\t\t\t\t\tsprintf(\n\t\t\t\t\t\t/* translators: %s: version number */\n\t\t\t\t\t\t__( 'TGMPA v%s', 'tgmpa' ),\n\t\t\t\t\t\tself::TGMPA_VERSION\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\t'</small></strong></p>';\n\t\t}\n\n\t\t/**\n\t\t * Adds CSS to admin head.\n\t\t *\n\t\t * @since 2.6.2\n\t\t */\n\t\tpublic function admin_css() {\n\t\t\tif ( ! $this->is_tgmpa_page() ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\techo '\n\t\t\t<style>\n\t\t\t#tgmpa-plugins .tgmpa-type-required > th {\n\t\t\t\tborder-left: 3px solid #dc3232;\n\t\t\t}\n\t\t\t</style>';\n\t\t}\n\n\t\t/**\n\t\t * Returns the singleton instance of the class.\n\t\t *\n\t\t * @since 2.4.0\n\t\t *\n\t\t * @return \\TGM_Plugin_Activation The TGM_Plugin_Activation object.\n\t\t */\n\t\tpublic static function get_instance() {\n\t\t\tif ( ! isset( self::$instance ) && ! ( self::$instance instanceof self ) ) {\n\t\t\t\tself::$instance = new self();\n\t\t\t}\n\n\t\t\treturn self::$instance;\n\t\t}\n\t}\n\n\tif ( ! function_exists( 'load_tgm_plugin_activation' ) ) {\n\t\t/**\n\t\t * Ensure only one instance of the class is ever invoked.\n\t\t *\n\t\t * @since 2.5.0\n\t\t */\n\t\tfunction load_tgm_plugin_activation() {\n\t\t\t$GLOBALS['tgmpa'] = TGM_Plugin_Activation::get_instance();\n\t\t}\n\t}\n\n\tif ( did_action( 'plugins_loaded' ) ) {\n\t\tload_tgm_plugin_activation();\n\t} else {\n\t\tadd_action( 'plugins_loaded', 'load_tgm_plugin_activation' );\n\t}\n}\n\nif ( ! function_exists( 'tgmpa' ) ) {\n\t/**\n\t * Helper function to register a collection of required plugins.\n\t *\n\t * @since 2.0.0\n\t * @api\n\t *\n\t * @param array $plugins An array of plugin arrays.\n\t * @param array $config  Optional. An array of configuration values.\n\t */\n\tfunction tgmpa( $plugins, $config = array() ) {\n\t\t$instance = call_user_func( array( get_class( $GLOBALS['tgmpa'] ), 'get_instance' ) );\n\n\t\tforeach ( $plugins as $plugin ) {\n\t\t\tcall_user_func( array( $instance, 'register' ), $plugin );\n\t\t}\n\n\t\tif ( ! empty( $config ) && is_array( $config ) ) {\n\t\t\t// Send out notices for deprecated arguments passed.\n\t\t\tif ( isset( $config['notices'] ) ) {\n\t\t\t\t_deprecated_argument( __FUNCTION__, '2.2.0', 'The `notices` config parameter was renamed to `has_notices` in TGMPA 2.2.0. Please adjust your configuration.' );\n\t\t\t\tif ( ! isset( $config['has_notices'] ) ) {\n\t\t\t\t\t$config['has_notices'] = $config['notices'];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( isset( $config['parent_menu_slug'] ) ) {\n\t\t\t\t_deprecated_argument( __FUNCTION__, '2.4.0', 'The `parent_menu_slug` config parameter was removed in TGMPA 2.4.0. In TGMPA 2.5.0 an alternative was (re-)introduced. Please adjust your configuration. For more information visit the website: http://tgmpluginactivation.com/configuration/#h-configuration-options.' );\n\t\t\t}\n\t\t\tif ( isset( $config['parent_url_slug'] ) ) {\n\t\t\t\t_deprecated_argument( __FUNCTION__, '2.4.0', 'The `parent_url_slug` config parameter was removed in TGMPA 2.4.0. In TGMPA 2.5.0 an alternative was (re-)introduced. Please adjust your configuration. For more information visit the website: http://tgmpluginactivation.com/configuration/#h-configuration-options.' );\n\t\t\t}\n\n\t\t\tcall_user_func( array( $instance, 'config' ), $config );\n\t\t}\n\t}\n}\n\n/**\n * WP_List_Table isn't always available. If it isn't available,\n * we load it here.\n *\n * @since 2.2.0\n */\nif ( ! class_exists( 'WP_List_Table' ) ) {\n\trequire_once ABSPATH . 'wp-admin/includes/class-wp-list-table.php';\n}\n\nif ( ! class_exists( 'TGMPA_List_Table' ) ) {\n\n\t/**\n\t * List table class for handling plugins.\n\t *\n\t * Extends the WP_List_Table class to provide a future-compatible\n\t * way of listing out all required/recommended plugins.\n\t *\n\t * Gives users an interface similar to the Plugin Administration\n\t * area with similar (albeit stripped down) capabilities.\n\t *\n\t * This class also allows for the bulk install of plugins.\n\t *\n\t * @since 2.2.0\n\t *\n\t * @package TGM-Plugin-Activation\n\t * @author  Thomas Griffin\n\t * @author  Gary Jones\n\t */\n\tclass TGMPA_List_Table extends WP_List_Table {\n\t\t/**\n\t\t * TGMPA instance.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @var object\n\t\t */\n\t\tprotected $tgmpa;\n\n\t\t/**\n\t\t * The currently chosen view.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @var string One of: 'all', 'install', 'update', 'activate'\n\t\t */\n\t\tpublic $view_context = 'all';\n\n\t\t/**\n\t\t * The plugin counts for the various views.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @var array\n\t\t */\n\t\tprotected $view_totals = array(\n\t\t\t'all'      => 0,\n\t\t\t'install'  => 0,\n\t\t\t'update'   => 0,\n\t\t\t'activate' => 0,\n\t\t);\n\n\t\t/**\n\t\t * References parent constructor and sets defaults for class.\n\t\t *\n\t\t * @since 2.2.0\n\t\t */\n\t\tpublic function __construct() {\n\t\t\t$this->tgmpa = call_user_func( array( get_class( $GLOBALS['tgmpa'] ), 'get_instance' ) );\n\n\t\t\tparent::__construct(\n\t\t\t\tarray(\n\t\t\t\t\t'singular' => 'plugin',\n\t\t\t\t\t'plural'   => 'plugins',\n\t\t\t\t\t'ajax'     => false,\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tif ( isset( $_REQUEST['plugin_status'] ) && in_array( $_REQUEST['plugin_status'], array( 'install', 'update', 'activate' ), true ) ) {\n\t\t\t\t$this->view_context = sanitize_key( $_REQUEST['plugin_status'] );\n\t\t\t}\n\n\t\t\tadd_filter( 'tgmpa_table_data_items', array( $this, 'sort_table_items' ) );\n\t\t}\n\n\t\t/**\n\t\t * Get a list of CSS classes for the <table> tag.\n\t\t *\n\t\t * Overruled to prevent the 'plural' argument from being added.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @return array CSS classnames.\n\t\t */\n\t\tpublic function get_table_classes() {\n\t\t\treturn array( 'widefat', 'fixed' );\n\t\t}\n\n\t\t/**\n\t\t * Gathers and renames all of our plugin information to be used by WP_List_Table to create our table.\n\t\t *\n\t\t * @since 2.2.0\n\t\t *\n\t\t * @return array $table_data Information for use in table.\n\t\t */\n\t\tprotected function _gather_plugin_data() {\n\t\t\t// Load thickbox for plugin links.\n\t\t\t$this->tgmpa->admin_init();\n\t\t\t$this->tgmpa->thickbox();\n\n\t\t\t// Categorize the plugins which have open actions.\n\t\t\t$plugins = $this->categorize_plugins_to_views();\n\n\t\t\t// Set the counts for the view links.\n\t\t\t$this->set_view_totals( $plugins );\n\n\t\t\t// Prep variables for use and grab list of all installed plugins.\n\t\t\t$table_data = array();\n\t\t\t$i          = 0;\n\n\t\t\t// Redirect to the 'all' view if no plugins were found for the selected view context.\n\t\t\tif ( empty( $plugins[ $this->view_context ] ) ) {\n\t\t\t\t$this->view_context = 'all';\n\t\t\t}\n\n\t\t\tforeach ( $plugins[ $this->view_context ] as $slug => $plugin ) {\n\t\t\t\t$table_data[ $i ]['sanitized_plugin']  = $plugin['name'];\n\t\t\t\t$table_data[ $i ]['slug']              = $slug;\n\t\t\t\t$table_data[ $i ]['plugin']            = '<strong>' . $this->tgmpa->get_info_link( $slug ) . '</strong>';\n\t\t\t\t$table_data[ $i ]['source']            = $this->get_plugin_source_type_text( $plugin['source_type'] );\n\t\t\t\t$table_data[ $i ]['type']              = $this->get_plugin_advise_type_text( $plugin['required'] );\n\t\t\t\t$table_data[ $i ]['status']            = $this->get_plugin_status_text( $slug );\n\t\t\t\t$table_data[ $i ]['installed_version'] = $this->tgmpa->get_installed_version( $slug );\n\t\t\t\t$table_data[ $i ]['minimum_version']   = $plugin['version'];\n\t\t\t\t$table_data[ $i ]['available_version'] = $this->tgmpa->does_plugin_have_update( $slug );\n\n\t\t\t\t// Prep the upgrade notice info.\n\t\t\t\t$upgrade_notice = $this->tgmpa->get_upgrade_notice( $slug );\n\t\t\t\tif ( ! empty( $upgrade_notice ) ) {\n\t\t\t\t\t$table_data[ $i ]['upgrade_notice'] = $upgrade_notice;\n\n\t\t\t\t\tadd_action( \"tgmpa_after_plugin_row_{$slug}\", array( $this, 'wp_plugin_update_row' ), 10, 2 );\n\t\t\t\t}\n\n\t\t\t\t$table_data[ $i ] = apply_filters( 'tgmpa_table_data_item', $table_data[ $i ], $plugin );\n\n\t\t\t\t$i++;\n\t\t\t}\n\n\t\t\treturn $table_data;\n\t\t}\n\n\t\t/**\n\t\t * Categorize the plugins which have open actions into views for the TGMPA page.\n\t\t *\n\t\t * @since 2.5.0\n\t\t */\n\t\tprotected function categorize_plugins_to_views() {\n\t\t\t$plugins = array(\n\t\t\t\t'all'      => array(), // Meaning: all plugins which still have open actions.\n\t\t\t\t'install'  => array(),\n\t\t\t\t'update'   => array(),\n\t\t\t\t'activate' => array(),\n\t\t\t);\n\n\t\t\tforeach ( $this->tgmpa->plugins as $slug => $plugin ) {\n\t\t\t\tif ( $this->tgmpa->is_plugin_active( $slug ) && false === $this->tgmpa->does_plugin_have_update( $slug ) ) {\n\t\t\t\t\t// No need to display plugins if they are installed, up-to-date and active.\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\t$plugins['all'][ $slug ] = $plugin;\n\n\t\t\t\t\tif ( ! $this->tgmpa->is_plugin_installed( $slug ) ) {\n\t\t\t\t\t\t$plugins['install'][ $slug ] = $plugin;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ( false !== $this->tgmpa->does_plugin_have_update( $slug ) ) {\n\t\t\t\t\t\t\t$plugins['update'][ $slug ] = $plugin;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( $this->tgmpa->can_plugin_activate( $slug ) ) {\n\t\t\t\t\t\t\t$plugins['activate'][ $slug ] = $plugin;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $plugins;\n\t\t}\n\n\t\t/**\n\t\t * Set the counts for the view links.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param array $plugins Plugins order by view.\n\t\t */\n\t\tprotected function set_view_totals( $plugins ) {\n\t\t\tforeach ( $plugins as $type => $list ) {\n\t\t\t\t$this->view_totals[ $type ] = count( $list );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Get the plugin required/recommended text string.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $required Plugin required setting.\n\t\t * @return string\n\t\t */\n\t\tprotected function get_plugin_advise_type_text( $required ) {\n\t\t\tif ( true === $required ) {\n\t\t\t\treturn __( 'Required', 'tgmpa' );\n\t\t\t}\n\n\t\t\treturn __( 'Recommended', 'tgmpa' );\n\t\t}\n\n\t\t/**\n\t\t * Get the plugin source type text string.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $type Plugin type.\n\t\t * @return string\n\t\t */\n\t\tprotected function get_plugin_source_type_text( $type ) {\n\t\t\t$string = '';\n\n\t\t\tswitch ( $type ) {\n\t\t\t\tcase 'repo':\n\t\t\t\t\t$string = __( 'WordPress Repository', 'tgmpa' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'external':\n\t\t\t\t\t$string = __( 'External Source', 'tgmpa' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'bundled':\n\t\t\t\t\t$string = __( 'Pre-Packaged', 'tgmpa' );\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn $string;\n\t\t}\n\n\t\t/**\n\t\t * Determine the plugin status message.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $slug Plugin slug.\n\t\t * @return string\n\t\t */\n\t\tprotected function get_plugin_status_text( $slug ) {\n\t\t\tif ( ! $this->tgmpa->is_plugin_installed( $slug ) ) {\n\t\t\t\treturn __( 'Not Installed', 'tgmpa' );\n\t\t\t}\n\n\t\t\tif ( ! $this->tgmpa->is_plugin_active( $slug ) ) {\n\t\t\t\t$install_status = __( 'Installed But Not Activated', 'tgmpa' );\n\t\t\t} else {\n\t\t\t\t$install_status = __( 'Active', 'tgmpa' );\n\t\t\t}\n\n\t\t\t$update_status = '';\n\n\t\t\tif ( $this->tgmpa->does_plugin_require_update( $slug ) && false === $this->tgmpa->does_plugin_have_update( $slug ) ) {\n\t\t\t\t$update_status = __( 'Required Update not Available', 'tgmpa' );\n\n\t\t\t} elseif ( $this->tgmpa->does_plugin_require_update( $slug ) ) {\n\t\t\t\t$update_status = __( 'Requires Update', 'tgmpa' );\n\n\t\t\t} elseif ( false !== $this->tgmpa->does_plugin_have_update( $slug ) ) {\n\t\t\t\t$update_status = __( 'Update recommended', 'tgmpa' );\n\t\t\t}\n\n\t\t\tif ( '' === $update_status ) {\n\t\t\t\treturn $install_status;\n\t\t\t}\n\n\t\t\treturn sprintf(\n\t\t\t\t/* translators: 1: install status, 2: update status */\n\t\t\t\t_x( '%1$s, %2$s', 'Install/Update Status', 'tgmpa' ),\n\t\t\t\t$install_status,\n\t\t\t\t$update_status\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Sort plugins by Required/Recommended type and by alphabetical plugin name within each type.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param array $items Prepared table items.\n\t\t * @return array Sorted table items.\n\t\t */\n\t\tpublic function sort_table_items( $items ) {\n\t\t\t$type = array();\n\t\t\t$name = array();\n\n\t\t\tforeach ( $items as $i => $plugin ) {\n\t\t\t\t$type[ $i ] = $plugin['type']; // Required / recommended.\n\t\t\t\t$name[ $i ] = $plugin['sanitized_plugin'];\n\t\t\t}\n\n\t\t\tarray_multisort( $type, SORT_DESC, $name, SORT_ASC, $items );\n\n\t\t\treturn $items;\n\t\t}\n\n\t\t/**\n\t\t * Get an associative array ( id => link ) of the views available on this table.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tpublic function get_views() {\n\t\t\t$status_links = array();\n\n\t\t\tforeach ( $this->view_totals as $type => $count ) {\n\t\t\t\tif ( $count < 1 ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tswitch ( $type ) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t/* translators: 1: number of plugins. */\n\t\t\t\t\t\t$text = _nx( 'All <span class=\"count\">(%s)</span>', 'All <span class=\"count\">(%s)</span>', $count, 'plugins', 'tgmpa' );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'install':\n\t\t\t\t\t\t/* translators: 1: number of plugins. */\n\t\t\t\t\t\t$text = _n( 'To Install <span class=\"count\">(%s)</span>', 'To Install <span class=\"count\">(%s)</span>', $count, 'tgmpa' );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'update':\n\t\t\t\t\t\t/* translators: 1: number of plugins. */\n\t\t\t\t\t\t$text = _n( 'Update Available <span class=\"count\">(%s)</span>', 'Update Available <span class=\"count\">(%s)</span>', $count, 'tgmpa' );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'activate':\n\t\t\t\t\t\t/* translators: 1: number of plugins. */\n\t\t\t\t\t\t$text = _n( 'To Activate <span class=\"count\">(%s)</span>', 'To Activate <span class=\"count\">(%s)</span>', $count, 'tgmpa' );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$text = '';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( ! empty( $text ) ) {\n\n\t\t\t\t\t$status_links[ $type ] = sprintf(\n\t\t\t\t\t\t'<a href=\"%s\"%s>%s</a>',\n\t\t\t\t\t\tesc_url( $this->tgmpa->get_tgmpa_status_url( $type ) ),\n\t\t\t\t\t\t( $type === $this->view_context ) ? ' class=\"current\"' : '',\n\t\t\t\t\t\tsprintf( $text, number_format_i18n( $count ) )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $status_links;\n\t\t}\n\n\t\t/**\n\t\t * Create default columns to display important plugin information\n\t\t * like type, action and status.\n\t\t *\n\t\t * @since 2.2.0\n\t\t *\n\t\t * @param array  $item        Array of item data.\n\t\t * @param string $column_name The name of the column.\n\t\t * @return string\n\t\t */\n\t\tpublic function column_default( $item, $column_name ) {\n\t\t\treturn $item[ $column_name ];\n\t\t}\n\n\t\t/**\n\t\t * Required for bulk installing.\n\t\t *\n\t\t * Adds a checkbox for each plugin.\n\t\t *\n\t\t * @since 2.2.0\n\t\t *\n\t\t * @param array $item Array of item data.\n\t\t * @return string The input checkbox with all necessary info.\n\t\t */\n\t\tpublic function column_cb( $item ) {\n\t\t\treturn sprintf(\n\t\t\t\t'<input type=\"checkbox\" name=\"%1$s[]\" value=\"%2$s\" id=\"%3$s\" />',\n\t\t\t\tesc_attr( $this->_args['singular'] ),\n\t\t\t\tesc_attr( $item['slug'] ),\n\t\t\t\tesc_attr( $item['sanitized_plugin'] )\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Create default title column along with the action links.\n\t\t *\n\t\t * @since 2.2.0\n\t\t *\n\t\t * @param array $item Array of item data.\n\t\t * @return string The plugin name and action links.\n\t\t */\n\t\tpublic function column_plugin( $item ) {\n\t\t\treturn sprintf(\n\t\t\t\t'%1$s %2$s',\n\t\t\t\t$item['plugin'],\n\t\t\t\t$this->row_actions( $this->get_row_actions( $item ), true )\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Create version information column.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param array $item Array of item data.\n\t\t * @return string HTML-formatted version information.\n\t\t */\n\t\tpublic function column_version( $item ) {\n\t\t\t$output = array();\n\n\t\t\tif ( $this->tgmpa->is_plugin_installed( $item['slug'] ) ) {\n\t\t\t\t$installed = ! empty( $item['installed_version'] ) ? $item['installed_version'] : _x( 'unknown', 'as in: \"version nr unknown\"', 'tgmpa' );\n\n\t\t\t\t$color = '';\n\t\t\t\tif ( ! empty( $item['minimum_version'] ) && $this->tgmpa->does_plugin_require_update( $item['slug'] ) ) {\n\t\t\t\t\t$color = ' color: #ff0000; font-weight: bold;';\n\t\t\t\t}\n\n\t\t\t\t$output[] = sprintf(\n\t\t\t\t\t'<p><span style=\"min-width: 32px; text-align: right; float: right;%1$s\">%2$s</span>' . __( 'Installed version:', 'tgmpa' ) . '</p>',\n\t\t\t\t\t$color,\n\t\t\t\t\t$installed\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( ! empty( $item['minimum_version'] ) ) {\n\t\t\t\t$output[] = sprintf(\n\t\t\t\t\t'<p><span style=\"min-width: 32px; text-align: right; float: right;\">%1$s</span>' . __( 'Minimum required version:', 'tgmpa' ) . '</p>',\n\t\t\t\t\t$item['minimum_version']\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( ! empty( $item['available_version'] ) ) {\n\t\t\t\t$color = '';\n\t\t\t\tif ( ! empty( $item['minimum_version'] ) && version_compare( $item['available_version'], $item['minimum_version'], '>=' ) ) {\n\t\t\t\t\t$color = ' color: #71C671; font-weight: bold;';\n\t\t\t\t}\n\n\t\t\t\t$output[] = sprintf(\n\t\t\t\t\t'<p><span style=\"min-width: 32px; text-align: right; float: right;%1$s\">%2$s</span>' . __( 'Available version:', 'tgmpa' ) . '</p>',\n\t\t\t\t\t$color,\n\t\t\t\t\t$item['available_version']\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ( empty( $output ) ) {\n\t\t\t\treturn '&nbsp;'; // Let's not break the table layout.\n\t\t\t} else {\n\t\t\t\treturn implode( \"\\n\", $output );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Sets default message within the plugins table if no plugins\n\t\t * are left for interaction.\n\t\t *\n\t\t * Hides the menu item to prevent the user from clicking and\n\t\t * getting a permissions error.\n\t\t *\n\t\t * @since 2.2.0\n\t\t */\n\t\tpublic function no_items() {\n\t\t\techo esc_html__( 'No plugins to install, update or activate.', 'tgmpa' ) . ' <a href=\"' . esc_url( self_admin_url() ) . '\"> ' . esc_html( $this->tgmpa->strings['dashboard'] ) . '</a>';\n\t\t\techo '<style type=\"text/css\">#adminmenu .wp-submenu li.current { display: none !important; }</style>';\n\t\t}\n\n\t\t/**\n\t\t * Output all the column information within the table.\n\t\t *\n\t\t * @since 2.2.0\n\t\t *\n\t\t * @return array $columns The column names.\n\t\t */\n\t\tpublic function get_columns() {\n\t\t\t$columns = array(\n\t\t\t\t'cb'     => '<input type=\"checkbox\" />',\n\t\t\t\t'plugin' => __( 'Plugin', 'tgmpa' ),\n\t\t\t\t'source' => __( 'Source', 'tgmpa' ),\n\t\t\t\t'type'   => __( 'Type', 'tgmpa' ),\n\t\t\t);\n\n\t\t\tif ( 'all' === $this->view_context || 'update' === $this->view_context ) {\n\t\t\t\t$columns['version'] = __( 'Version', 'tgmpa' );\n\t\t\t\t$columns['status']  = __( 'Status', 'tgmpa' );\n\t\t\t}\n\n\t\t\treturn apply_filters( 'tgmpa_table_columns', $columns );\n\t\t}\n\n\t\t/**\n\t\t * Get name of default primary column\n\t\t *\n\t\t * @since 2.5.0 / WP 4.3+ compatibility\n\t\t * @access protected\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tprotected function get_default_primary_column_name() {\n\t\t\treturn 'plugin';\n\t\t}\n\n\t\t/**\n\t\t * Get the name of the primary column.\n\t\t *\n\t\t * @since 2.5.0 / WP 4.3+ compatibility\n\t\t * @access protected\n\t\t *\n\t\t * @return string The name of the primary column.\n\t\t */\n\t\tprotected function get_primary_column_name() {\n\t\t\tif ( method_exists( 'WP_List_Table', 'get_primary_column_name' ) ) {\n\t\t\t\treturn parent::get_primary_column_name();\n\t\t\t} else {\n\t\t\t\treturn $this->get_default_primary_column_name();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Get the actions which are relevant for a specific plugin row.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param array $item Array of item data.\n\t\t * @return array Array with relevant action links.\n\t\t */\n\t\tprotected function get_row_actions( $item ) {\n\t\t\t$actions      = array();\n\t\t\t$action_links = array();\n\n\t\t\t// Display the 'Install' action link if the plugin is not yet available.\n\t\t\tif ( ! $this->tgmpa->is_plugin_installed( $item['slug'] ) ) {\n\t\t\t\t/* translators: %2$s: plugin name in screen reader markup */\n\t\t\t\t$actions['install'] = __( 'Install %2$s', 'tgmpa' );\n\t\t\t} else {\n\t\t\t\t// Display the 'Update' action link if an update is available and WP complies with plugin minimum.\n\t\t\t\tif ( false !== $this->tgmpa->does_plugin_have_update( $item['slug'] ) && $this->tgmpa->can_plugin_update( $item['slug'] ) ) {\n\t\t\t\t\t/* translators: %2$s: plugin name in screen reader markup */\n\t\t\t\t\t$actions['update'] = __( 'Update %2$s', 'tgmpa' );\n\t\t\t\t}\n\n\t\t\t\t// Display the 'Activate' action link, but only if the plugin meets the minimum version.\n\t\t\t\tif ( $this->tgmpa->can_plugin_activate( $item['slug'] ) ) {\n\t\t\t\t\t/* translators: %2$s: plugin name in screen reader markup */\n\t\t\t\t\t$actions['activate'] = __( 'Activate %2$s', 'tgmpa' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Create the actual links.\n\t\t\tforeach ( $actions as $action => $text ) {\n\t\t\t\t$nonce_url = wp_nonce_url(\n\t\t\t\t\tadd_query_arg(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'plugin'           => urlencode( $item['slug'] ),\n\t\t\t\t\t\t\t'tgmpa-' . $action => $action . '-plugin',\n\t\t\t\t\t\t),\n\t\t\t\t\t\t$this->tgmpa->get_tgmpa_url()\n\t\t\t\t\t),\n\t\t\t\t\t'tgmpa-' . $action,\n\t\t\t\t\t'tgmpa-nonce'\n\t\t\t\t);\n\n\t\t\t\t$action_links[ $action ] = sprintf(\n\t\t\t\t\t'<a href=\"%1$s\">' . esc_html( $text ) . '</a>', // $text contains the second placeholder.\n\t\t\t\t\tesc_url( $nonce_url ),\n\t\t\t\t\t'<span class=\"screen-reader-text\">' . esc_html( $item['sanitized_plugin'] ) . '</span>'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t$prefix = ( defined( 'WP_NETWORK_ADMIN' ) && WP_NETWORK_ADMIN ) ? 'network_admin_' : '';\n\t\t\treturn apply_filters( \"tgmpa_{$prefix}plugin_action_links\", array_filter( $action_links ), $item['slug'], $item, $this->view_context );\n\t\t}\n\n\t\t/**\n\t\t * Generates content for a single row of the table.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param object $item The current item.\n\t\t */\n\t\tpublic function single_row( $item ) {\n\t\t\techo '<tr class=\"' . esc_attr( 'tgmpa-type-' . strtolower( $item['type'] ) ) . '\">';\n\t\t\t$this->single_row_columns( $item );\n\t\t\techo '</tr>';\n\n\t\t\t/**\n\t\t\t * Fires after each specific row in the TGMPA Plugins list table.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook name, `$item['slug']`, refers to the slug\n\t\t\t * for the plugin.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t */\n\t\t\tdo_action( \"tgmpa_after_plugin_row_{$item['slug']}\", $item['slug'], $item, $this->view_context );\n\t\t}\n\n\t\t/**\n\t\t * Show the upgrade notice below a plugin row if there is one.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @see /wp-admin/includes/update.php\n\t\t *\n\t\t * @param string $slug Plugin slug.\n\t\t * @param array  $item The information available in this table row.\n\t\t * @return null Return early if upgrade notice is empty.\n\t\t */\n\t\tpublic function wp_plugin_update_row( $slug, $item ) {\n\t\t\tif ( empty( $item['upgrade_notice'] ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\techo '\n\t\t\t\t<tr class=\"plugin-update-tr\">\n\t\t\t\t\t<td colspan=\"', absint( $this->get_column_count() ), '\" class=\"plugin-update colspanchange\">\n\t\t\t\t\t\t<div class=\"update-message\">',\n\t\t\t\t\t\t\tesc_html__( 'Upgrade message from the plugin author:', 'tgmpa' ),\n\t\t\t\t\t\t\t' <strong>', wp_kses_data( $item['upgrade_notice'] ), '</strong>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>';\n\t\t}\n\n\t\t/**\n\t\t * Extra controls to be displayed between bulk actions and pagination.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $which Either 'top' or 'bottom' table navigation.\n\t\t */\n\t\tpublic function extra_tablenav( $which ) {\n\t\t\tif ( 'bottom' === $which ) {\n\t\t\t\t$this->tgmpa->show_tgmpa_version();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Defines the bulk actions for handling registered plugins.\n\t\t *\n\t\t * @since 2.2.0\n\t\t *\n\t\t * @return array $actions The bulk actions for the plugin install table.\n\t\t */\n\t\tpublic function get_bulk_actions() {\n\n\t\t\t$actions = array();\n\n\t\t\tif ( 'update' !== $this->view_context && 'activate' !== $this->view_context ) {\n\t\t\t\tif ( current_user_can( 'install_plugins' ) ) {\n\t\t\t\t\t$actions['tgmpa-bulk-install'] = __( 'Install', 'tgmpa' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( 'install' !== $this->view_context ) {\n\t\t\t\tif ( current_user_can( 'update_plugins' ) ) {\n\t\t\t\t\t$actions['tgmpa-bulk-update'] = __( 'Update', 'tgmpa' );\n\t\t\t\t}\n\t\t\t\tif ( current_user_can( 'activate_plugins' ) ) {\n\t\t\t\t\t$actions['tgmpa-bulk-activate'] = __( 'Activate', 'tgmpa' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $actions;\n\t\t}\n\n\t\t/**\n\t\t * Processes bulk installation and activation actions.\n\t\t *\n\t\t * The bulk installation process looks for the $_POST information and passes that\n\t\t * through if a user has to use WP_Filesystem to enter their credentials.\n\t\t *\n\t\t * @since 2.2.0\n\t\t */\n\t\tpublic function process_bulk_actions() {\n\t\t\t// Bulk installation process.\n\t\t\tif ( 'tgmpa-bulk-install' === $this->current_action() || 'tgmpa-bulk-update' === $this->current_action() ) {\n\n\t\t\t\tcheck_admin_referer( 'bulk-' . $this->_args['plural'] );\n\n\t\t\t\t$install_type = 'install';\n\t\t\t\tif ( 'tgmpa-bulk-update' === $this->current_action() ) {\n\t\t\t\t\t$install_type = 'update';\n\t\t\t\t}\n\n\t\t\t\t$plugins_to_install = array();\n\n\t\t\t\t// Did user actually select any plugins to install/update ?\n\t\t\t\tif ( empty( $_POST['plugin'] ) ) {\n\t\t\t\t\tif ( 'install' === $install_type ) {\n\t\t\t\t\t\t$message = __( 'No plugins were selected to be installed. No action taken.', 'tgmpa' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$message = __( 'No plugins were selected to be updated. No action taken.', 'tgmpa' );\n\t\t\t\t\t}\n\n\t\t\t\t\techo '<div id=\"message\" class=\"error\"><p>', esc_html( $message ), '</p></div>';\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif ( is_array( $_POST['plugin'] ) ) {\n\t\t\t\t\t$plugins_to_install = (array) $_POST['plugin'];\n\t\t\t\t} elseif ( is_string( $_POST['plugin'] ) ) {\n\t\t\t\t\t// Received via Filesystem page - un-flatten array (WP bug #19643).\n\t\t\t\t\t$plugins_to_install = explode( ',', $_POST['plugin'] );\n\t\t\t\t}\n\n\t\t\t\t// Sanitize the received input.\n\t\t\t\t$plugins_to_install = array_map( 'urldecode', $plugins_to_install );\n\t\t\t\t$plugins_to_install = array_map( array( $this->tgmpa, 'sanitize_key' ), $plugins_to_install );\n\n\t\t\t\t// Validate the received input.\n\t\t\t\tforeach ( $plugins_to_install as $key => $slug ) {\n\t\t\t\t\t// Check if the plugin was registered with TGMPA and remove if not.\n\t\t\t\t\tif ( ! isset( $this->tgmpa->plugins[ $slug ] ) ) {\n\t\t\t\t\t\tunset( $plugins_to_install[ $key ] );\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// For install: make sure this is a plugin we *can* install and not one already installed.\n\t\t\t\t\tif ( 'install' === $install_type && true === $this->tgmpa->is_plugin_installed( $slug ) ) {\n\t\t\t\t\t\tunset( $plugins_to_install[ $key ] );\n\t\t\t\t\t}\n\n\t\t\t\t\t// For updates: make sure this is a plugin we *can* update (update available and WP version ok).\n\t\t\t\t\tif ( 'update' === $install_type && false === $this->tgmpa->is_plugin_updatetable( $slug ) ) {\n\t\t\t\t\t\tunset( $plugins_to_install[ $key ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// No need to proceed further if we have no plugins to handle.\n\t\t\t\tif ( empty( $plugins_to_install ) ) {\n\t\t\t\t\tif ( 'install' === $install_type ) {\n\t\t\t\t\t\t$message = __( 'No plugins are available to be installed at this time.', 'tgmpa' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$message = __( 'No plugins are available to be updated at this time.', 'tgmpa' );\n\t\t\t\t\t}\n\n\t\t\t\t\techo '<div id=\"message\" class=\"error\"><p>', esc_html( $message ), '</p></div>';\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Pass all necessary information if WP_Filesystem is needed.\n\t\t\t\t$url = wp_nonce_url(\n\t\t\t\t\t$this->tgmpa->get_tgmpa_url(),\n\t\t\t\t\t'bulk-' . $this->_args['plural']\n\t\t\t\t);\n\n\t\t\t\t// Give validated data back to $_POST which is the only place the filesystem looks for extra fields.\n\t\t\t\t$_POST['plugin'] = implode( ',', $plugins_to_install ); // Work around for WP bug #19643.\n\n\t\t\t\t$method = ''; // Leave blank so WP_Filesystem can populate it as necessary.\n\t\t\t\t$fields = array_keys( $_POST ); // Extra fields to pass to WP_Filesystem.\n\n\t\t\t\t$creds = request_filesystem_credentials( esc_url_raw( $url ), $method, false, false, $fields );\n\t\t\t\tif ( false === $creds ) {\n\t\t\t\t\treturn true; // Stop the normal page form from displaying, credential request form will be shown.\n\t\t\t\t}\n\n\t\t\t\t// Now we have some credentials, setup WP_Filesystem.\n\t\t\t\tif ( ! WP_Filesystem( $creds ) ) {\n\t\t\t\t\t// Our credentials were no good, ask the user for them again.\n\t\t\t\t\trequest_filesystem_credentials( esc_url_raw( $url ), $method, true, false, $fields );\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t/* If we arrive here, we have the filesystem */\n\n\t\t\t\t// Store all information in arrays since we are processing a bulk installation.\n\t\t\t\t$names      = array();\n\t\t\t\t$sources    = array(); // Needed for installs.\n\t\t\t\t$file_paths = array(); // Needed for upgrades.\n\t\t\t\t$to_inject  = array(); // Information to inject into the update_plugins transient.\n\n\t\t\t\t// Prepare the data for validated plugins for the install/upgrade.\n\t\t\t\tforeach ( $plugins_to_install as $slug ) {\n\t\t\t\t\t$name   = $this->tgmpa->plugins[ $slug ]['name'];\n\t\t\t\t\t$source = $this->tgmpa->get_download_url( $slug );\n\n\t\t\t\t\tif ( ! empty( $name ) && ! empty( $source ) ) {\n\t\t\t\t\t\t$names[] = $name;\n\n\t\t\t\t\t\tswitch ( $install_type ) {\n\n\t\t\t\t\t\t\tcase 'install':\n\t\t\t\t\t\t\t\t$sources[] = $source;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'update':\n\t\t\t\t\t\t\t\t$file_paths[]                 = $this->tgmpa->plugins[ $slug ]['file_path'];\n\t\t\t\t\t\t\t\t$to_inject[ $slug ]           = $this->tgmpa->plugins[ $slug ];\n\t\t\t\t\t\t\t\t$to_inject[ $slug ]['source'] = $source;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tunset( $slug, $name, $source );\n\n\t\t\t\t// Create a new instance of TGMPA_Bulk_Installer.\n\t\t\t\t$installer = new TGMPA_Bulk_Installer(\n\t\t\t\t\tnew TGMPA_Bulk_Installer_Skin(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'url'          => esc_url_raw( $this->tgmpa->get_tgmpa_url() ),\n\t\t\t\t\t\t\t'nonce'        => 'bulk-' . $this->_args['plural'],\n\t\t\t\t\t\t\t'names'        => $names,\n\t\t\t\t\t\t\t'install_type' => $install_type,\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\t// Wrap the install process with the appropriate HTML.\n\t\t\t\techo '<div class=\"tgmpa\">',\n\t\t\t\t\t'<h2 style=\"font-size: 23px; font-weight: 400; line-height: 29px; margin: 0; padding: 9px 15px 4px 0;\">', esc_html( get_admin_page_title() ), '</h2>\n\t\t\t\t\t<div class=\"update-php\" style=\"width: 100%; height: 98%; min-height: 850px; padding-top: 1px;\">';\n\n\t\t\t\t// Process the bulk installation submissions.\n\t\t\t\tadd_filter( 'upgrader_source_selection', array( $this->tgmpa, 'maybe_adjust_source_dir' ), 1, 3 );\n\n\t\t\t\tif ( 'tgmpa-bulk-update' === $this->current_action() ) {\n\t\t\t\t\t// Inject our info into the update transient.\n\t\t\t\t\t$this->tgmpa->inject_update_info( $to_inject );\n\n\t\t\t\t\t$installer->bulk_upgrade( $file_paths );\n\t\t\t\t} else {\n\t\t\t\t\t$installer->bulk_install( $sources );\n\t\t\t\t}\n\n\t\t\t\tremove_filter( 'upgrader_source_selection', array( $this->tgmpa, 'maybe_adjust_source_dir' ), 1 );\n\n\t\t\t\techo '</div></div>';\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Bulk activation process.\n\t\t\tif ( 'tgmpa-bulk-activate' === $this->current_action() ) {\n\t\t\t\tcheck_admin_referer( 'bulk-' . $this->_args['plural'] );\n\n\t\t\t\t// Did user actually select any plugins to activate ?\n\t\t\t\tif ( empty( $_POST['plugin'] ) ) {\n\t\t\t\t\techo '<div id=\"message\" class=\"error\"><p>', esc_html__( 'No plugins were selected to be activated. No action taken.', 'tgmpa' ), '</p></div>';\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Grab plugin data from $_POST.\n\t\t\t\t$plugins = array();\n\t\t\t\tif ( isset( $_POST['plugin'] ) ) {\n\t\t\t\t\t$plugins = array_map( 'urldecode', (array) $_POST['plugin'] );\n\t\t\t\t\t$plugins = array_map( array( $this->tgmpa, 'sanitize_key' ), $plugins );\n\t\t\t\t}\n\n\t\t\t\t$plugins_to_activate = array();\n\t\t\t\t$plugin_names        = array();\n\n\t\t\t\t// Grab the file paths for the selected & inactive plugins from the registration array.\n\t\t\t\tforeach ( $plugins as $slug ) {\n\t\t\t\t\tif ( $this->tgmpa->can_plugin_activate( $slug ) ) {\n\t\t\t\t\t\t$plugins_to_activate[] = $this->tgmpa->plugins[ $slug ]['file_path'];\n\t\t\t\t\t\t$plugin_names[]        = $this->tgmpa->plugins[ $slug ]['name'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tunset( $slug );\n\n\t\t\t\t// Return early if there are no plugins to activate.\n\t\t\t\tif ( empty( $plugins_to_activate ) ) {\n\t\t\t\t\techo '<div id=\"message\" class=\"error\"><p>', esc_html__( 'No plugins are available to be activated at this time.', 'tgmpa' ), '</p></div>';\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Now we are good to go - let's start activating plugins.\n\t\t\t\t$activate = activate_plugins( $plugins_to_activate );\n\n\t\t\t\tif ( is_wp_error( $activate ) ) {\n\t\t\t\t\techo '<div id=\"message\" class=\"error\"><p>', wp_kses_post( $activate->get_error_message() ), '</p></div>';\n\t\t\t\t} else {\n\t\t\t\t\t$count        = count( $plugin_names ); // Count so we can use _n function.\n\t\t\t\t\t$plugin_names = array_map( array( 'TGMPA_Utils', 'wrap_in_strong' ), $plugin_names );\n\t\t\t\t\t$last_plugin  = array_pop( $plugin_names ); // Pop off last name to prep for readability.\n\t\t\t\t\t$imploded     = empty( $plugin_names ) ? $last_plugin : ( implode( ', ', $plugin_names ) . ' ' . esc_html_x( 'and', 'plugin A *and* plugin B', 'tgmpa' ) . ' ' . $last_plugin );\n\n\t\t\t\t\tprintf(\n\t\t\t\t\t\t'<div id=\"message\" class=\"updated\"><p>%1$s %2$s.</p></div>',\n\t\t\t\t\t\tesc_html( _n( 'The following plugin was activated successfully:', 'The following plugins were activated successfully:', $count, 'tgmpa' ) ),\n\t\t\t\t\t\t// phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped -- Pre-escaped via wrap_in_strong() method above.\n\t\t\t\t\t\t$imploded\n\t\t\t\t\t);\n\n\t\t\t\t\t// Update recently activated plugins option.\n\t\t\t\t\t$recent = (array) get_option( 'recently_activated' );\n\t\t\t\t\tforeach ( $plugins_to_activate as $plugin => $time ) {\n\t\t\t\t\t\tif ( isset( $recent[ $plugin ] ) ) {\n\t\t\t\t\t\t\tunset( $recent[ $plugin ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tupdate_option( 'recently_activated', $recent );\n\t\t\t\t}\n\n\t\t\t\tunset( $_POST ); // Reset the $_POST variable in case user wants to perform one action after another.\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * Prepares all of our information to be outputted into a usable table.\n\t\t *\n\t\t * @since 2.2.0\n\t\t */\n\t\tpublic function prepare_items() {\n\t\t\t$columns               = $this->get_columns(); // Get all necessary column information.\n\t\t\t$hidden                = array(); // No columns to hide, but we must set as an array.\n\t\t\t$sortable              = array(); // No reason to make sortable columns.\n\t\t\t$primary               = $this->get_primary_column_name(); // Column which has the row actions.\n\t\t\t$this->_column_headers = array( $columns, $hidden, $sortable, $primary ); // Get all necessary column headers.\n\n\t\t\t// Process our bulk activations here.\n\t\t\tif ( 'tgmpa-bulk-activate' === $this->current_action() ) {\n\t\t\t\t$this->process_bulk_actions();\n\t\t\t}\n\n\t\t\t// Store all of our plugin data into $items array so WP_List_Table can use it.\n\t\t\t$this->items = apply_filters( 'tgmpa_table_data_items', $this->_gather_plugin_data() );\n\t\t}\n\n\t\t/* *********** DEPRECATED METHODS *********** */\n\n\t\t/**\n\t\t * Retrieve plugin data, given the plugin name.\n\t\t *\n\t\t * @since      2.2.0\n\t\t * @deprecated 2.5.0 use {@see TGM_Plugin_Activation::_get_plugin_data_from_name()} instead.\n\t\t * @see        TGM_Plugin_Activation::_get_plugin_data_from_name()\n\t\t *\n\t\t * @param string $name Name of the plugin, as it was registered.\n\t\t * @param string $data Optional. Array key of plugin data to return. Default is slug.\n\t\t * @return string|boolean Plugin slug if found, false otherwise.\n\t\t */\n\t\tprotected function _get_plugin_data_from_name( $name, $data = 'slug' ) {\n\t\t\t_deprecated_function( __FUNCTION__, 'TGMPA 2.5.0', 'TGM_Plugin_Activation::_get_plugin_data_from_name()' );\n\n\t\t\treturn $this->tgmpa->_get_plugin_data_from_name( $name, $data );\n\t\t}\n\t}\n}\n\n\nif ( ! class_exists( 'TGM_Bulk_Installer' ) ) {\n\n\t/**\n\t * Hack: Prevent TGMPA v2.4.1- bulk installer class from being loaded if 2.4.1- is loaded after 2.5+.\n\t *\n\t * @since 2.5.2\n\t *\n\t * {@internal The TGMPA_Bulk_Installer class was originally called TGM_Bulk_Installer.\n\t *            For more information, see that class.}}\n\t */\n\tclass TGM_Bulk_Installer {\n\t}\n}\nif ( ! class_exists( 'TGM_Bulk_Installer_Skin' ) ) {\n\n\t/**\n\t * Hack: Prevent TGMPA v2.4.1- bulk installer skin class from being loaded if 2.4.1- is loaded after 2.5+.\n\t *\n\t * @since 2.5.2\n\t *\n\t * {@internal The TGMPA_Bulk_Installer_Skin class was originally called TGM_Bulk_Installer_Skin.\n\t *            For more information, see that class.}}\n\t */\n\tclass TGM_Bulk_Installer_Skin {\n\t}\n}\n\n/**\n * The WP_Upgrader file isn't always available. If it isn't available,\n * we load it here.\n *\n * We check to make sure no action or activation keys are set so that WordPress\n * does not try to re-include the class when processing upgrades or installs outside\n * of the class.\n *\n * @since 2.2.0\n */\nadd_action( 'admin_init', 'tgmpa_load_bulk_installer' );\nif ( ! function_exists( 'tgmpa_load_bulk_installer' ) ) {\n\t/**\n\t * Load bulk installer\n\t */\n\tfunction tgmpa_load_bulk_installer() {\n\t\t// Silently fail if 2.5+ is loaded *after* an older version.\n\t\tif ( ! isset( $GLOBALS['tgmpa'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get TGMPA class instance.\n\t\t$tgmpa_instance = call_user_func( array( get_class( $GLOBALS['tgmpa'] ), 'get_instance' ) );\n\n\t\tif ( isset( $_GET['page'] ) && $tgmpa_instance->menu === $_GET['page'] ) {\n\t\t\tif ( ! class_exists( 'Plugin_Upgrader', false ) ) {\n\t\t\t\trequire_once ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';\n\t\t\t}\n\n\t\t\tif ( ! class_exists( 'TGMPA_Bulk_Installer' ) ) {\n\n\t\t\t\t/**\n\t\t\t\t * Installer class to handle bulk plugin installations.\n\t\t\t\t *\n\t\t\t\t * Extends WP_Upgrader and customizes to suit the installation of multiple\n\t\t\t\t * plugins.\n\t\t\t\t *\n\t\t\t\t * @since 2.2.0\n\t\t\t\t *\n\t\t\t\t * {@internal Since 2.5.0 the class is an extension of Plugin_Upgrader rather than WP_Upgrader.}}\n\t\t\t\t * {@internal Since 2.5.2 the class has been renamed from TGM_Bulk_Installer to TGMPA_Bulk_Installer.\n\t\t\t\t *            This was done to prevent backward compatibility issues with v2.3.6.}}\n\t\t\t\t *\n\t\t\t\t * @package TGM-Plugin-Activation\n\t\t\t\t * @author  Thomas Griffin\n\t\t\t\t * @author  Gary Jones\n\t\t\t\t */\n\t\t\t\tclass TGMPA_Bulk_Installer extends Plugin_Upgrader {\n\t\t\t\t\t/**\n\t\t\t\t\t * Holds result of bulk plugin installation.\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.2.0\n\t\t\t\t\t *\n\t\t\t\t\t * @var string\n\t\t\t\t\t */\n\t\t\t\t\tpublic $result;\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Flag to check if bulk installation is occurring or not.\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.2.0\n\t\t\t\t\t *\n\t\t\t\t\t * @var boolean\n\t\t\t\t\t */\n\t\t\t\t\tpublic $bulk = false;\n\n\t\t\t\t\t/**\n\t\t\t\t\t * TGMPA instance\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.5.0\n\t\t\t\t\t *\n\t\t\t\t\t * @var object\n\t\t\t\t\t */\n\t\t\t\t\tprotected $tgmpa;\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Whether or not the destination directory needs to be cleared ( = on update).\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.5.0\n\t\t\t\t\t *\n\t\t\t\t\t * @var bool\n\t\t\t\t\t */\n\t\t\t\t\tprotected $clear_destination = false;\n\n\t\t\t\t\t/**\n\t\t\t\t\t * References parent constructor and sets defaults for class.\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.2.0\n\t\t\t\t\t *\n\t\t\t\t\t * @param \\Bulk_Upgrader_Skin|null $skin Installer skin.\n\t\t\t\t\t */\n\t\t\t\t\tpublic function __construct( $skin = null ) {\n\t\t\t\t\t\t// Get TGMPA class instance.\n\t\t\t\t\t\t$this->tgmpa = call_user_func( array( get_class( $GLOBALS['tgmpa'] ), 'get_instance' ) );\n\n\t\t\t\t\t\tparent::__construct( $skin );\n\n\t\t\t\t\t\tif ( isset( $this->skin->options['install_type'] ) && 'update' === $this->skin->options['install_type'] ) {\n\t\t\t\t\t\t\t$this->clear_destination = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( $this->tgmpa->is_automatic ) {\n\t\t\t\t\t\t\t$this->activate_strings();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tadd_action( 'upgrader_process_complete', array( $this->tgmpa, 'populate_file_path' ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Sets the correct activation strings for the installer skin to use.\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.2.0\n\t\t\t\t\t */\n\t\t\t\t\tpublic function activate_strings() {\n\t\t\t\t\t\t$this->strings['activation_failed']  = __( 'Plugin activation failed.', 'tgmpa' );\n\t\t\t\t\t\t$this->strings['activation_success'] = __( 'Plugin activated successfully.', 'tgmpa' );\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Performs the actual installation of each plugin.\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.2.0\n\t\t\t\t\t *\n\t\t\t\t\t * @see WP_Upgrader::run()\n\t\t\t\t\t *\n\t\t\t\t\t * @param array $options The installation config options.\n\t\t\t\t\t * @return null|array Return early if error, array of installation data on success.\n\t\t\t\t\t */\n\t\t\t\t\tpublic function run( $options ) {\n\t\t\t\t\t\t$result = parent::run( $options );\n\n\t\t\t\t\t\t// Reset the strings in case we changed one during automatic activation.\n\t\t\t\t\t\tif ( $this->tgmpa->is_automatic ) {\n\t\t\t\t\t\t\tif ( 'update' === $this->skin->options['install_type'] ) {\n\t\t\t\t\t\t\t\t$this->upgrade_strings();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$this->install_strings();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn $result;\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Processes the bulk installation of plugins.\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.2.0\n\t\t\t\t\t *\n\t\t\t\t\t * {@internal This is basically a near identical copy of the WP Core\n\t\t\t\t\t * Plugin_Upgrader::bulk_upgrade() method, with minor adjustments to deal with\n\t\t\t\t\t * new installs instead of upgrades.\n\t\t\t\t\t * For ease of future synchronizations, the adjustments are clearly commented, but no other\n\t\t\t\t\t * comments are added. Code style has been made to comply.}}\n\t\t\t\t\t *\n\t\t\t\t\t * @see Plugin_Upgrader::bulk_upgrade()\n\t\t\t\t\t * @see https://core.trac.wordpress.org/browser/tags/4.2.1/src/wp-admin/includes/class-wp-upgrader.php#L838\n\t\t\t\t\t * (@internal Last synced: Dec 31st 2015 against https://core.trac.wordpress.org/browser/trunk?rev=36134}}\n\t\t\t\t\t *\n\t\t\t\t\t * @param array $plugins The plugin sources needed for installation.\n\t\t\t\t\t * @param array $args    Arbitrary passed extra arguments.\n\t\t\t\t\t * @return array|false   Install confirmation messages on success, false on failure.\n\t\t\t\t\t */\n\t\t\t\t\tpublic function bulk_install( $plugins, $args = array() ) {\n\t\t\t\t\t\t// [TGMPA + ] Hook auto-activation in.\n\t\t\t\t\t\tadd_filter( 'upgrader_post_install', array( $this, 'auto_activate' ), 10 );\n\n\t\t\t\t\t\t$defaults    = array(\n\t\t\t\t\t\t\t'clear_update_cache' => true,\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$parsed_args = wp_parse_args( $args, $defaults );\n\n\t\t\t\t\t\t$this->init();\n\t\t\t\t\t\t$this->bulk = true;\n\n\t\t\t\t\t\t$this->install_strings(); // [TGMPA + ] adjusted.\n\n\t\t\t\t\t\t/* [TGMPA - ] $current = get_site_transient( 'update_plugins' ); */\n\n\t\t\t\t\t\t/* [TGMPA - ] add_filter('upgrader_clear_destination', array($this, 'delete_old_plugin'), 10, 4); */\n\n\t\t\t\t\t\t$this->skin->header();\n\n\t\t\t\t\t\t// Connect to the Filesystem first.\n\t\t\t\t\t\t$res = $this->fs_connect( array( WP_CONTENT_DIR, WP_PLUGIN_DIR ) );\n\t\t\t\t\t\tif ( ! $res ) {\n\t\t\t\t\t\t\t$this->skin->footer();\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$this->skin->bulk_header();\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Only start maintenance mode if:\n\t\t\t\t\t\t * - running Multisite and there are one or more plugins specified, OR\n\t\t\t\t\t\t * - a plugin with an update available is currently active.\n\t\t\t\t\t\t * @TODO: For multisite, maintenance mode should only kick in for individual sites if at all possible.\n\t\t\t\t\t\t */\n\t\t\t\t\t\t$maintenance = ( is_multisite() && ! empty( $plugins ) );\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t[TGMPA - ]\n\t\t\t\t\t\tforeach ( $plugins as $plugin )\n\t\t\t\t\t\t\t$maintenance = $maintenance || ( is_plugin_active( $plugin ) && isset( $current->response[ $plugin] ) );\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tif ( $maintenance ) {\n\t\t\t\t\t\t\t$this->maintenance_mode( true );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$results = array();\n\n\t\t\t\t\t\t$this->update_count   = count( $plugins );\n\t\t\t\t\t\t$this->update_current = 0;\n\t\t\t\t\t\tforeach ( $plugins as $plugin ) {\n\t\t\t\t\t\t\t$this->update_current++;\n\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t[TGMPA - ]\n\t\t\t\t\t\t\t$this->skin->plugin_info = get_plugin_data( WP_PLUGIN_DIR . '/' . $plugin, false, true);\n\n\t\t\t\t\t\t\tif ( !isset( $current->response[ $plugin ] ) ) {\n\t\t\t\t\t\t\t\t$this->skin->set_result('up_to_date');\n\t\t\t\t\t\t\t\t$this->skin->before();\n\t\t\t\t\t\t\t\t$this->skin->feedback('up_to_date');\n\t\t\t\t\t\t\t\t$this->skin->after();\n\t\t\t\t\t\t\t\t$results[$plugin] = true;\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Get the URL to the zip file.\n\t\t\t\t\t\t\t$r = $current->response[ $plugin ];\n\n\t\t\t\t\t\t\t$this->skin->plugin_active = is_plugin_active($plugin);\n\t\t\t\t\t\t\t*/\n\n\t\t\t\t\t\t\t$result = $this->run(\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'package'           => $plugin, // [TGMPA + ] adjusted.\n\t\t\t\t\t\t\t\t\t'destination'       => WP_PLUGIN_DIR,\n\t\t\t\t\t\t\t\t\t'clear_destination' => false, // [TGMPA + ] adjusted.\n\t\t\t\t\t\t\t\t\t'clear_working'     => true,\n\t\t\t\t\t\t\t\t\t'is_multi'          => true,\n\t\t\t\t\t\t\t\t\t'hook_extra'        => array(\n\t\t\t\t\t\t\t\t\t\t'plugin' => $plugin,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t$results[ $plugin ] = $this->result;\n\n\t\t\t\t\t\t\t// Prevent credentials auth screen from displaying multiple times.\n\t\t\t\t\t\t\tif ( false === $result ) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$this->maintenance_mode( false );\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Fires when the bulk upgrader process is complete.\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @since WP 3.6.0 / TGMPA 2.5.0\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @param Plugin_Upgrader $this Plugin_Upgrader instance. In other contexts, $this, might\n\t\t\t\t\t\t *                              be a Theme_Upgrader or Core_Upgrade instance.\n\t\t\t\t\t\t * @param array           $data {\n\t\t\t\t\t\t *     Array of bulk item update data.\n\t\t\t\t\t\t *\n\t\t\t\t\t\t *     @type string $action   Type of action. Default 'update'.\n\t\t\t\t\t\t *     @type string $type     Type of update process. Accepts 'plugin', 'theme', or 'core'.\n\t\t\t\t\t\t *     @type bool   $bulk     Whether the update process is a bulk update. Default true.\n\t\t\t\t\t\t *     @type array  $packages Array of plugin, theme, or core packages to update.\n\t\t\t\t\t\t * }\n\t\t\t\t\t\t */\n\t\t\t\t\t\tdo_action(\n\t\t\t\t\t\t\t// phpcs:ignore WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedHooknameFound -- Using WP core hook.\n\t\t\t\t\t\t\t'upgrader_process_complete',\n\t\t\t\t\t\t\t$this,\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'action'  => 'install', // [TGMPA + ] adjusted.\n\t\t\t\t\t\t\t\t'type'    => 'plugin',\n\t\t\t\t\t\t\t\t'bulk'    => true,\n\t\t\t\t\t\t\t\t'plugins' => $plugins,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t$this->skin->bulk_footer();\n\n\t\t\t\t\t\t$this->skin->footer();\n\n\t\t\t\t\t\t// Cleanup our hooks, in case something else does a upgrade on this connection.\n\t\t\t\t\t\t/* [TGMPA - ] remove_filter('upgrader_clear_destination', array($this, 'delete_old_plugin')); */\n\n\t\t\t\t\t\t// [TGMPA + ] Remove our auto-activation hook.\n\t\t\t\t\t\tremove_filter( 'upgrader_post_install', array( $this, 'auto_activate' ), 10 );\n\n\t\t\t\t\t\t// Force refresh of plugin update information.\n\t\t\t\t\t\twp_clean_plugins_cache( $parsed_args['clear_update_cache'] );\n\n\t\t\t\t\t\treturn $results;\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Handle a bulk upgrade request.\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.5.0\n\t\t\t\t\t *\n\t\t\t\t\t * @see Plugin_Upgrader::bulk_upgrade()\n\t\t\t\t\t *\n\t\t\t\t\t * @param array $plugins The local WP file_path's of the plugins which should be upgraded.\n\t\t\t\t\t * @param array $args    Arbitrary passed extra arguments.\n\t\t\t\t\t * @return string|bool Install confirmation messages on success, false on failure.\n\t\t\t\t\t */\n\t\t\t\t\tpublic function bulk_upgrade( $plugins, $args = array() ) {\n\n\t\t\t\t\t\tadd_filter( 'upgrader_post_install', array( $this, 'auto_activate' ), 10 );\n\n\t\t\t\t\t\t$result = parent::bulk_upgrade( $plugins, $args );\n\n\t\t\t\t\t\tremove_filter( 'upgrader_post_install', array( $this, 'auto_activate' ), 10 );\n\n\t\t\t\t\t\treturn $result;\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Abuse a filter to auto-activate plugins after installation.\n\t\t\t\t\t *\n\t\t\t\t\t * Hooked into the 'upgrader_post_install' filter hook.\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.5.0\n\t\t\t\t\t *\n\t\t\t\t\t * @param bool $bool The value we need to give back (true).\n\t\t\t\t\t * @return bool\n\t\t\t\t\t */\n\t\t\t\t\tpublic function auto_activate( $bool ) {\n\t\t\t\t\t\t// Only process the activation of installed plugins if the automatic flag is set to true.\n\t\t\t\t\t\tif ( $this->tgmpa->is_automatic ) {\n\t\t\t\t\t\t\t// Flush plugins cache so the headers of the newly installed plugins will be read correctly.\n\t\t\t\t\t\t\twp_clean_plugins_cache();\n\n\t\t\t\t\t\t\t// Get the installed plugin file.\n\t\t\t\t\t\t\t$plugin_info = $this->plugin_info();\n\n\t\t\t\t\t\t\t// Don't try to activate on upgrade of active plugin as WP will do this already.\n\t\t\t\t\t\t\tif ( ! is_plugin_active( $plugin_info ) ) {\n\t\t\t\t\t\t\t\t$activate = activate_plugin( $plugin_info );\n\n\t\t\t\t\t\t\t\t// Adjust the success string based on the activation result.\n\t\t\t\t\t\t\t\t$this->strings['process_success'] = $this->strings['process_success'] . \"<br />\\n\";\n\n\t\t\t\t\t\t\t\tif ( is_wp_error( $activate ) ) {\n\t\t\t\t\t\t\t\t\t$this->skin->error( $activate );\n\t\t\t\t\t\t\t\t\t$this->strings['process_success'] .= $this->strings['activation_failed'];\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$this->strings['process_success'] .= $this->strings['activation_success'];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn $bool;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! class_exists( 'TGMPA_Bulk_Installer_Skin' ) ) {\n\n\t\t\t\t/**\n\t\t\t\t * Installer skin to set strings for the bulk plugin installations..\n\t\t\t\t *\n\t\t\t\t * Extends Bulk_Upgrader_Skin and customizes to suit the installation of multiple\n\t\t\t\t * plugins.\n\t\t\t\t *\n\t\t\t\t * @since 2.2.0\n\t\t\t\t *\n\t\t\t\t * {@internal Since 2.5.2 the class has been renamed from TGM_Bulk_Installer_Skin to\n\t\t\t\t *            TGMPA_Bulk_Installer_Skin.\n\t\t\t\t *            This was done to prevent backward compatibility issues with v2.3.6.}}\n\t\t\t\t *\n\t\t\t\t * @see https://core.trac.wordpress.org/browser/trunk/src/wp-admin/includes/class-wp-upgrader-skins.php\n\t\t\t\t *\n\t\t\t\t * @package TGM-Plugin-Activation\n\t\t\t\t * @author  Thomas Griffin\n\t\t\t\t * @author  Gary Jones\n\t\t\t\t */\n\t\t\t\tclass TGMPA_Bulk_Installer_Skin extends Bulk_Upgrader_Skin {\n\t\t\t\t\t/**\n\t\t\t\t\t * Holds plugin info for each individual plugin installation.\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.2.0\n\t\t\t\t\t *\n\t\t\t\t\t * @var array\n\t\t\t\t\t */\n\t\t\t\t\tpublic $plugin_info = array();\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Holds names of plugins that are undergoing bulk installations.\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.2.0\n\t\t\t\t\t *\n\t\t\t\t\t * @var array\n\t\t\t\t\t */\n\t\t\t\t\tpublic $plugin_names = array();\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Integer to use for iteration through each plugin installation.\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.2.0\n\t\t\t\t\t *\n\t\t\t\t\t * @var integer\n\t\t\t\t\t */\n\t\t\t\t\tpublic $i = 0;\n\n\t\t\t\t\t/**\n\t\t\t\t\t * TGMPA instance\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.5.0\n\t\t\t\t\t *\n\t\t\t\t\t * @var object\n\t\t\t\t\t */\n\t\t\t\t\tprotected $tgmpa;\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Constructor. Parses default args with new ones and extracts them for use.\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.2.0\n\t\t\t\t\t *\n\t\t\t\t\t * @param array $args Arguments to pass for use within the class.\n\t\t\t\t\t */\n\t\t\t\t\tpublic function __construct( $args = array() ) {\n\t\t\t\t\t\t// Get TGMPA class instance.\n\t\t\t\t\t\t$this->tgmpa = call_user_func( array( get_class( $GLOBALS['tgmpa'] ), 'get_instance' ) );\n\n\t\t\t\t\t\t// Parse default and new args.\n\t\t\t\t\t\t$defaults = array(\n\t\t\t\t\t\t\t'url'          => '',\n\t\t\t\t\t\t\t'nonce'        => '',\n\t\t\t\t\t\t\t'names'        => array(),\n\t\t\t\t\t\t\t'install_type' => 'install',\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$args     = wp_parse_args( $args, $defaults );\n\n\t\t\t\t\t\t// Set plugin names to $this->plugin_names property.\n\t\t\t\t\t\t$this->plugin_names = $args['names'];\n\n\t\t\t\t\t\t// Extract the new args.\n\t\t\t\t\t\tparent::__construct( $args );\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Sets install skin strings for each individual plugin.\n\t\t\t\t\t *\n\t\t\t\t\t * Checks to see if the automatic activation flag is set and uses the\n\t\t\t\t\t * the proper strings accordingly.\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.2.0\n\t\t\t\t\t */\n\t\t\t\t\tpublic function add_strings() {\n\t\t\t\t\t\tif ( 'update' === $this->options['install_type'] ) {\n\t\t\t\t\t\t\tparent::add_strings();\n\t\t\t\t\t\t\t/* translators: 1: plugin name, 2: action number 3: total number of actions. */\n\t\t\t\t\t\t\t$this->upgrader->strings['skin_before_update_header'] = __( 'Updating Plugin %1$s (%2$d/%3$d)', 'tgmpa' );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t/* translators: 1: plugin name, 2: error message. */\n\t\t\t\t\t\t\t$this->upgrader->strings['skin_update_failed_error'] = __( 'An error occurred while installing %1$s: <strong>%2$s</strong>.', 'tgmpa' );\n\t\t\t\t\t\t\t/* translators: 1: plugin name. */\n\t\t\t\t\t\t\t$this->upgrader->strings['skin_update_failed'] = __( 'The installation of %1$s failed.', 'tgmpa' );\n\n\t\t\t\t\t\t\tif ( $this->tgmpa->is_automatic ) {\n\t\t\t\t\t\t\t\t// Automatic activation strings.\n\t\t\t\t\t\t\t\t$this->upgrader->strings['skin_upgrade_start'] = __( 'The installation and activation process is starting. This process may take a while on some hosts, so please be patient.', 'tgmpa' );\n\t\t\t\t\t\t\t\t/* translators: 1: plugin name. */\n\t\t\t\t\t\t\t\t$this->upgrader->strings['skin_update_successful'] = __( '%1$s installed and activated successfully.', 'tgmpa' );\n\t\t\t\t\t\t\t\t$this->upgrader->strings['skin_upgrade_end']       = __( 'All installations and activations have been completed.', 'tgmpa' );\n\t\t\t\t\t\t\t\t/* translators: 1: plugin name, 2: action number 3: total number of actions. */\n\t\t\t\t\t\t\t\t$this->upgrader->strings['skin_before_update_header'] = __( 'Installing and Activating Plugin %1$s (%2$d/%3$d)', 'tgmpa' );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Default installation strings.\n\t\t\t\t\t\t\t\t$this->upgrader->strings['skin_upgrade_start'] = __( 'The installation process is starting. This process may take a while on some hosts, so please be patient.', 'tgmpa' );\n\t\t\t\t\t\t\t\t/* translators: 1: plugin name. */\n\t\t\t\t\t\t\t\t$this->upgrader->strings['skin_update_successful'] = __( '%1$s installed successfully.', 'tgmpa' );\n\t\t\t\t\t\t\t\t$this->upgrader->strings['skin_upgrade_end']       = __( 'All installations have been completed.', 'tgmpa' );\n\t\t\t\t\t\t\t\t/* translators: 1: plugin name, 2: action number 3: total number of actions. */\n\t\t\t\t\t\t\t\t$this->upgrader->strings['skin_before_update_header'] = __( 'Installing Plugin %1$s (%2$d/%3$d)', 'tgmpa' );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Add \"read more\" link only for WP < 4.8.\n\t\t\t\t\t\t\tif ( version_compare( $this->tgmpa->wp_version, '4.8', '<' ) ) {\n\t\t\t\t\t\t\t\t$this->upgrader->strings['skin_update_successful'] .= ' <a href=\"#\" class=\"hide-if-no-js\" onclick=\"%2$s\"><span>' . esc_html__( 'Show Details', 'tgmpa' ) . '</span><span class=\"hidden\">' . esc_html__( 'Hide Details', 'tgmpa' ) . '</span>.</a>';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Outputs the header strings and necessary JS before each plugin installation.\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.2.0\n\t\t\t\t\t *\n\t\t\t\t\t * @param string $title Unused in this implementation.\n\t\t\t\t\t */\n\t\t\t\t\tpublic function before( $title = '' ) {\n\t\t\t\t\t\tif ( empty( $title ) ) {\n\t\t\t\t\t\t\t$title = esc_html( $this->plugin_names[ $this->i ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tparent::before( $title );\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Outputs the footer strings and necessary JS after each plugin installation.\n\t\t\t\t\t *\n\t\t\t\t\t * Checks for any errors and outputs them if they exist, else output\n\t\t\t\t\t * success strings.\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.2.0\n\t\t\t\t\t *\n\t\t\t\t\t * @param string $title Unused in this implementation.\n\t\t\t\t\t */\n\t\t\t\t\tpublic function after( $title = '' ) {\n\t\t\t\t\t\tif ( empty( $title ) ) {\n\t\t\t\t\t\t\t$title = esc_html( $this->plugin_names[ $this->i ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tparent::after( $title );\n\n\t\t\t\t\t\t$this->i++;\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Outputs links after bulk plugin installation is complete.\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.2.0\n\t\t\t\t\t */\n\t\t\t\t\tpublic function bulk_footer() {\n\t\t\t\t\t\t// Serve up the string to say installations (and possibly activations) are complete.\n\t\t\t\t\t\tparent::bulk_footer();\n\n\t\t\t\t\t\t// Flush plugins cache so we can make sure that the installed plugins list is always up to date.\n\t\t\t\t\t\twp_clean_plugins_cache();\n\n\t\t\t\t\t\t$this->tgmpa->show_tgmpa_version();\n\n\t\t\t\t\t\t// Display message based on if all plugins are now active or not.\n\t\t\t\t\t\t$update_actions = array();\n\n\t\t\t\t\t\tif ( $this->tgmpa->is_tgmpa_complete() ) {\n\t\t\t\t\t\t\t// All plugins are active, so we display the complete string and hide the menu to protect users.\n\t\t\t\t\t\t\techo '<style type=\"text/css\">#adminmenu .wp-submenu li.current { display: none !important; }</style>';\n\t\t\t\t\t\t\t$update_actions['dashboard'] = sprintf(\n\t\t\t\t\t\t\t\tesc_html( $this->tgmpa->strings['complete'] ),\n\t\t\t\t\t\t\t\t'<a href=\"' . esc_url( self_admin_url() ) . '\">' . esc_html( $this->tgmpa->strings['dashboard'] ) . '</a>'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$update_actions['tgmpa_page'] = '<a href=\"' . esc_url( $this->tgmpa->get_tgmpa_url() ) . '\" target=\"_parent\">' . esc_html( $this->tgmpa->strings['return'] ) . '</a>';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Filter the list of action links available following bulk plugin installs/updates.\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @since 2.5.0\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @param array $update_actions Array of plugin action links.\n\t\t\t\t\t\t * @param array $plugin_info    Array of information for the last-handled plugin.\n\t\t\t\t\t\t */\n\t\t\t\t\t\t$update_actions = apply_filters( 'tgmpa_update_bulk_plugins_complete_actions', $update_actions, $this->plugin_info );\n\n\t\t\t\t\t\tif ( ! empty( $update_actions ) ) {\n\t\t\t\t\t\t\t$this->feedback( implode( ' | ', (array) $update_actions ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t/* *********** DEPRECATED METHODS *********** */\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Flush header output buffer.\n\t\t\t\t\t *\n\t\t\t\t\t * @since      2.2.0\n\t\t\t\t\t * @deprecated 2.5.0 use {@see Bulk_Upgrader_Skin::flush_output()} instead\n\t\t\t\t\t * @see        Bulk_Upgrader_Skin::flush_output()\n\t\t\t\t\t */\n\t\t\t\t\tpublic function before_flush_output() {\n\t\t\t\t\t\t_deprecated_function( __FUNCTION__, 'TGMPA 2.5.0', 'Bulk_Upgrader_Skin::flush_output()' );\n\t\t\t\t\t\t$this->flush_output();\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Flush footer output buffer and iterate $this->i to make sure the\n\t\t\t\t\t * installation strings reference the correct plugin.\n\t\t\t\t\t *\n\t\t\t\t\t * @since      2.2.0\n\t\t\t\t\t * @deprecated 2.5.0 use {@see Bulk_Upgrader_Skin::flush_output()} instead\n\t\t\t\t\t * @see        Bulk_Upgrader_Skin::flush_output()\n\t\t\t\t\t */\n\t\t\t\t\tpublic function after_flush_output() {\n\t\t\t\t\t\t_deprecated_function( __FUNCTION__, 'TGMPA 2.5.0', 'Bulk_Upgrader_Skin::flush_output()' );\n\t\t\t\t\t\t$this->flush_output();\n\t\t\t\t\t\t$this->i++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nif ( ! class_exists( 'TGMPA_Utils' ) ) {\n\n\t/**\n\t * Generic utilities for TGMPA.\n\t *\n\t * All methods are static, poor-dev name-spacing class wrapper.\n\t *\n\t * Class was called TGM_Utils in 2.5.0 but renamed TGMPA_Utils in 2.5.1 as this was conflicting with Soliloquy.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @package TGM-Plugin-Activation\n\t * @author  Juliette Reinders Folmer\n\t */\n\tclass TGMPA_Utils {\n\t\t/**\n\t\t * Whether the PHP filter extension is enabled.\n\t\t *\n\t\t * @see http://php.net/book.filter\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @static\n\t\t *\n\t\t * @var bool $has_filters True is the extension is enabled.\n\t\t */\n\t\tpublic static $has_filters;\n\n\t\t/**\n\t\t * Wrap an arbitrary string in <em> tags. Meant to be used in combination with array_map().\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @static\n\t\t *\n\t\t * @param string $string Text to be wrapped.\n\t\t * @return string\n\t\t */\n\t\tpublic static function wrap_in_em( $string ) {\n\t\t\treturn '<em>' . wp_kses_post( $string ) . '</em>';\n\t\t}\n\n\t\t/**\n\t\t * Wrap an arbitrary string in <strong> tags. Meant to be used in combination with array_map().\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @static\n\t\t *\n\t\t * @param string $string Text to be wrapped.\n\t\t * @return string\n\t\t */\n\t\tpublic static function wrap_in_strong( $string ) {\n\t\t\treturn '<strong>' . wp_kses_post( $string ) . '</strong>';\n\t\t}\n\n\t\t/**\n\t\t * Helper function: Validate a value as boolean\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @static\n\t\t *\n\t\t * @param mixed $value Arbitrary value.\n\t\t * @return bool\n\t\t */\n\t\tpublic static function validate_bool( $value ) {\n\t\t\tif ( ! isset( self::$has_filters ) ) {\n\t\t\t\tself::$has_filters = extension_loaded( 'filter' );\n\t\t\t}\n\n\t\t\tif ( self::$has_filters ) {\n\t\t\t\treturn filter_var( $value, FILTER_VALIDATE_BOOLEAN );\n\t\t\t} else {\n\t\t\t\treturn self::emulate_filter_bool( $value );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Helper function: Cast a value to bool\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @static\n\t\t *\n\t\t * @param mixed $value Value to cast.\n\t\t * @return bool\n\t\t */\n\t\tprotected static function emulate_filter_bool( $value ) {\n\t\t\t// phpcs:disable WordPress.Arrays.ArrayDeclarationSpacing.ArrayItemNoNewLine\n\t\t\tstatic $true  = array(\n\t\t\t\t'1',\n\t\t\t\t'true', 'True', 'TRUE',\n\t\t\t\t'y', 'Y',\n\t\t\t\t'yes', 'Yes', 'YES',\n\t\t\t\t'on', 'On', 'ON',\n\t\t\t);\n\t\t\tstatic $false = array(\n\t\t\t\t'0',\n\t\t\t\t'false', 'False', 'FALSE',\n\t\t\t\t'n', 'N',\n\t\t\t\t'no', 'No', 'NO',\n\t\t\t\t'off', 'Off', 'OFF',\n\t\t\t);\n\t\t\t// phpcs:enable\n\n\t\t\tif ( is_bool( $value ) ) {\n\t\t\t\treturn $value;\n\t\t\t} elseif ( is_int( $value ) && ( 0 === $value || 1 === $value ) ) {\n\t\t\t\treturn (bool) $value;\n\t\t\t} elseif ( ( is_float( $value ) && ! is_nan( $value ) ) && ( (float) 0 === $value || (float) 1 === $value ) ) {\n\t\t\t\treturn (bool) $value;\n\t\t\t} elseif ( is_string( $value ) ) {\n\t\t\t\t$value = trim( $value );\n\t\t\t\tif ( in_array( $value, $true, true ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t} elseif ( in_array( $value, $false, true ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t} // End of class TGMPA_Utils\n}\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.150390625,
          "content": "{\n  \"name\": \"tgmpa/tgm-plugin-activation\",\n  \"description\": \"TGM Plugin Activation is a PHP library that allows you to easily require or recommend plugins for your WordPress themes (and plugins).\",\n  \"homepage\": \"http://tgmpluginactivation.com\",\n  \"keywords\": [\"wordpress\",\"plugins\", \"theme\", \"library\", \"activation\"],\n  \"license\": \"GPL-2.0-or-later\",\n  \"authors\": [\n    {\n      \"name\": \"Thomas Griffin\",\n      \"homepage\": \"http://thomasgriffinmedia.com\",\n      \"role\": \"Developer\"\n    },\n    {\n      \"name\": \"Gary Jones\",\n      \"homepage\": \"https://github.com/GaryJones\",\n      \"role\": \"Developer\"\n    },\n    {\n      \"name\": \"Juliette Reinders Folmer\",\n      \"homepage\": \"https://github.com/jrfnl\",\n      \"role\": \"Developer\"\n    }\n  ],\n  \"support\": {\n    \"issues\": \"https://github.com/TGMPA/TGM-Plugin-Activation/issues\",\n    \"source\": \"https://github.com/TGMPA/TGM-Plugin-Activation\"\n  },\n  \"require\": {\n    \"php\": \">=5.2\"\n  },\n  \"require-dev\": {\n    \"dealerdirect/phpcodesniffer-composer-installer\": \"^0.6\",\n    \"phpcompatibility/phpcompatibility-wp\": \"^2.0\",\n    \"wp-coding-standards/wpcs\": \"^2.0\"\n  },\n  \"autoload\": {\n    \"files\": [\"class-tgm-plugin-activation.php\"]\n  }\n}\n"
        },
        {
          "name": "example.php",
          "type": "blob",
          "size": 10.416015625,
          "content": "<?php\n/**\n * This file represents an example of the code that themes would use to register\n * the required plugins.\n *\n * It is expected that theme authors would copy and paste this code into their\n * functions.php file, and amend to suit.\n *\n * @see http://tgmpluginactivation.com/configuration/ for detailed documentation.\n *\n * @package    TGM-Plugin-Activation\n * @subpackage Example\n * @version    2.6.1\n * @author     Thomas Griffin, Gary Jones, Juliette Reinders Folmer\n * @copyright  Copyright (c) 2011, Thomas Griffin\n * @license    http://opensource.org/licenses/gpl-2.0.php GPL v2 or later\n * @link       https://github.com/TGMPA/TGM-Plugin-Activation\n */\n\n/**\n * Include the TGM_Plugin_Activation class.\n *\n * Depending on your implementation, you may want to change the include call:\n *\n * Parent Theme:\n * require_once get_template_directory() . '/path/to/class-tgm-plugin-activation.php';\n *\n * Child Theme:\n * require_once get_stylesheet_directory() . '/path/to/class-tgm-plugin-activation.php';\n *\n * Plugin:\n * require_once dirname( __FILE__ ) . '/path/to/class-tgm-plugin-activation.php';\n */\nrequire_once dirname( __FILE__ ) . '/class-tgm-plugin-activation.php';\n\nadd_action( 'tgmpa_register', 'my_theme_register_required_plugins' );\n\n/**\n * Register the required plugins for this theme.\n *\n * In this example, we register five plugins:\n * - one included with the TGMPA library\n * - two from an external source, one from an arbitrary source, one from a GitHub repository\n * - two from the .org repo, where one demonstrates the use of the `is_callable` argument\n *\n * The variables passed to the `tgmpa()` function should be:\n * - an array of plugin arrays;\n * - optionally a configuration array.\n * If you are not changing anything in the configuration array, you can remove the array and remove the\n * variable from the function call: `tgmpa( $plugins );`.\n * In that case, the TGMPA default settings will be used.\n *\n * This function is hooked into `tgmpa_register`, which is fired on the WP `init` action on priority 10.\n */\nfunction my_theme_register_required_plugins() {\n\t/*\n\t * Array of plugin arrays. Required keys are name and slug.\n\t * If the source is NOT from the .org repo, then source is also required.\n\t */\n\t$plugins = array(\n\n\t\t// This is an example of how to include a plugin bundled with a theme.\n\t\tarray(\n\t\t\t'name'               => 'TGM Example Plugin', // The plugin name.\n\t\t\t'slug'               => 'tgm-example-plugin', // The plugin slug (typically the folder name).\n\t\t\t'source'             => get_stylesheet_directory() . '/lib/plugins/tgm-example-plugin.zip', // The plugin source.\n\t\t\t'required'           => true, // If false, the plugin is only 'recommended' instead of required.\n\t\t\t'version'            => '', // E.g. 1.0.0. If set, the active plugin must be this version or higher. If the plugin version is higher than the plugin version installed, the user will be notified to update the plugin.\n\t\t\t'force_activation'   => false, // If true, plugin is activated upon theme activation and cannot be deactivated until theme switch.\n\t\t\t'force_deactivation' => false, // If true, plugin is deactivated upon theme switch, useful for theme-specific plugins.\n\t\t\t'external_url'       => '', // If set, overrides default API URL and points to an external URL.\n\t\t\t'is_callable'        => '', // If set, this callable will be be checked for availability to determine if a plugin is active.\n\t\t),\n\n\t\t// This is an example of how to include a plugin from an arbitrary external source in your theme.\n\t\tarray(\n\t\t\t'name'         => 'TGM New Media Plugin', // The plugin name.\n\t\t\t'slug'         => 'tgm-new-media-plugin', // The plugin slug (typically the folder name).\n\t\t\t'source'       => 'https://s3.amazonaws.com/tgm/tgm-new-media-plugin.zip', // The plugin source.\n\t\t\t'required'     => true, // If false, the plugin is only 'recommended' instead of required.\n\t\t\t'external_url' => 'https://github.com/thomasgriffin/New-Media-Image-Uploader', // If set, overrides default API URL and points to an external URL.\n\t\t),\n\n\t\t// This is an example of how to include a plugin from a GitHub repository in your theme.\n\t\t// This presumes that the plugin code is based in the root of the GitHub repository\n\t\t// and not in a subdirectory ('/src') of the repository.\n\t\tarray(\n\t\t\t'name'   => 'Adminbar Link Comments to Pending',\n\t\t\t'slug'   => 'adminbar-link-comments-to-pending',\n\t\t\t'source' => 'https://github.com/jrfnl/WP-adminbar-comments-to-pending/archive/master.zip',\n\t\t),\n\n\t\t// This is an example of how to include a plugin from the WordPress Plugin Repository.\n\t\tarray(\n\t\t\t'name'     => 'BuddyPress',\n\t\t\t'slug'     => 'buddypress',\n\t\t\t'required' => false,\n\t\t),\n\n\t\t// This is an example of the use of 'is_callable' functionality. A user could - for instance -\n\t\t// have Yoast SEO installed *or* Yoast SEO Premium. The slug would in that last case be different, i.e.\n\t\t// 'wordpress-seo-premium'.\n\t\t// By setting 'is_callable' to either a function from that plugin or a class method\n\t\t// `array( 'class', 'method' )` similar to how you hook in to actions and filters, TGMPA can still\n\t\t// recognize the plugin as being installed.\n\t\tarray(\n\t\t\t'name'        => 'Yoast SEO',\n\t\t\t'slug'        => 'wordpress-seo',\n\t\t\t'is_callable' => 'wpseo_init',\n\t\t),\n\n\t);\n\n\t/*\n\t * Array of configuration settings. Amend each line as needed.\n\t *\n\t * TGMPA will start providing localized text strings soon. If you already have translations of our standard\n\t * strings available, please help us make TGMPA even better by giving us access to these translations or by\n\t * sending in a pull-request with .po file(s) with the translations.\n\t *\n\t * Only uncomment the strings in the config array if you want to customize the strings.\n\t */\n\t$config = array(\n\t\t'id'           => 'tgmpa',                 // Unique ID for hashing notices for multiple instances of TGMPA.\n\t\t'default_path' => '',                      // Default absolute path to bundled plugins.\n\t\t'menu'         => 'tgmpa-install-plugins', // Menu slug.\n\t\t'parent_slug'  => 'themes.php',            // Parent menu slug.\n\t\t'capability'   => 'edit_theme_options',    // Capability needed to view plugin install page, should be a capability associated with the parent menu used.\n\t\t'has_notices'  => true,                    // Show admin notices or not.\n\t\t'dismissable'  => true,                    // If false, a user cannot dismiss the nag message.\n\t\t'dismiss_msg'  => '',                      // If 'dismissable' is false, this message will be output at top of nag.\n\t\t'is_automatic' => false,                   // Automatically activate plugins after installation or not.\n\t\t'message'      => '',                      // Message to output right before the plugins table.\n\n\t\t/*\n\t\t'strings'      => array(\n\t\t\t'page_title'                      => __( 'Install Required Plugins', 'theme-slug' ),\n\t\t\t'menu_title'                      => __( 'Install Plugins', 'theme-slug' ),\n\t\t\t// translators: %s: plugin name.\n\t\t\t'installing'                      => __( 'Installing Plugin: %s', 'theme-slug' ),\n\t\t\t// translators: %s: plugin name.\n\t\t\t'updating'                        => __( 'Updating Plugin: %s', 'theme-slug' ),\n\t\t\t'oops'                            => __( 'Something went wrong with the plugin API.', 'theme-slug' ),\n\t\t\t'notice_can_install_required'     => _n_noop(\n\t\t\t\t// translators: 1: plugin name(s).\n\t\t\t\t'This theme requires the following plugin: %1$s.',\n\t\t\t\t'This theme requires the following plugins: %1$s.',\n\t\t\t\t'theme-slug'\n\t\t\t),\n\t\t\t'notice_can_install_recommended'  => _n_noop(\n\t\t\t\t// translators: 1: plugin name(s).\n\t\t\t\t'This theme recommends the following plugin: %1$s.',\n\t\t\t\t'This theme recommends the following plugins: %1$s.',\n\t\t\t\t'theme-slug'\n\t\t\t),\n\t\t\t'notice_ask_to_update'            => _n_noop(\n\t\t\t\t// translators: 1: plugin name(s).\n\t\t\t\t'The following plugin needs to be updated to its latest version to ensure maximum compatibility with this theme: %1$s.',\n\t\t\t\t'The following plugins need to be updated to their latest version to ensure maximum compatibility with this theme: %1$s.',\n\t\t\t\t'theme-slug'\n\t\t\t),\n\t\t\t'notice_ask_to_update_maybe'      => _n_noop(\n\t\t\t\t// translators: 1: plugin name(s).\n\t\t\t\t'There is an update available for: %1$s.',\n\t\t\t\t'There are updates available for the following plugins: %1$s.',\n\t\t\t\t'theme-slug'\n\t\t\t),\n\t\t\t'notice_can_activate_required'    => _n_noop(\n\t\t\t\t// translators: 1: plugin name(s).\n\t\t\t\t'The following required plugin is currently inactive: %1$s.',\n\t\t\t\t'The following required plugins are currently inactive: %1$s.',\n\t\t\t\t'theme-slug'\n\t\t\t),\n\t\t\t'notice_can_activate_recommended' => _n_noop(\n\t\t\t\t// translators: 1: plugin name(s).\n\t\t\t\t'The following recommended plugin is currently inactive: %1$s.',\n\t\t\t\t'The following recommended plugins are currently inactive: %1$s.',\n\t\t\t\t'theme-slug'\n\t\t\t),\n\t\t\t'install_link'                    => _n_noop(\n\t\t\t\t'Begin installing plugin',\n\t\t\t\t'Begin installing plugins',\n\t\t\t\t'theme-slug'\n\t\t\t),\n\t\t\t'update_link' \t\t\t\t\t  => _n_noop(\n\t\t\t\t'Begin updating plugin',\n\t\t\t\t'Begin updating plugins',\n\t\t\t\t'theme-slug'\n\t\t\t),\n\t\t\t'activate_link'                   => _n_noop(\n\t\t\t\t'Begin activating plugin',\n\t\t\t\t'Begin activating plugins',\n\t\t\t\t'theme-slug'\n\t\t\t),\n\t\t\t'return'                          => __( 'Return to Required Plugins Installer', 'theme-slug' ),\n\t\t\t'plugin_activated'                => __( 'Plugin activated successfully.', 'theme-slug' ),\n\t\t\t'activated_successfully'          => __( 'The following plugin was activated successfully:', 'theme-slug' ),\n\t\t\t// translators: 1: plugin name.\n\t\t\t'plugin_already_active'           => __( 'No action taken. Plugin %1$s was already active.', 'theme-slug' ),\n\t\t\t// translators: 1: plugin name.\n\t\t\t'plugin_needs_higher_version'     => __( 'Plugin not activated. A higher version of %s is needed for this theme. Please update the plugin.', 'theme-slug' ),\n\t\t\t// translators: 1: dashboard link.\n\t\t\t'complete'                        => __( 'All plugins installed and activated successfully. %1$s', 'theme-slug' ),\n\t\t\t'dismiss'                         => __( 'Dismiss this notice', 'theme-slug' ),\n\t\t\t'notice_cannot_install_activate'  => __( 'There are one or more required or recommended plugins to install, update or activate.', 'theme-slug' ),\n\t\t\t'contact_admin'                   => __( 'Please contact the administrator of this site for help.', 'theme-slug' ),\n\n\t\t\t'nag_type'                        => '', // Determines admin notice type - can only be one of the typical WP notice classes, such as 'updated', 'update-nag', 'notice-warning', 'notice-info' or 'error'. Some of which may not work as expected in older WP versions.\n\t\t),\n\t\t*/\n\t);\n\n\ttgmpa( $plugins, $config );\n}\n"
        },
        {
          "name": "languages",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpcs.xml.dist",
          "type": "blob",
          "size": 1.6025390625,
          "content": "<?xml version=\"1.0\"?>\n<ruleset name=\"TGM Plugin Activation\">\n\t<description>The code standard for TGMPA is WordPress.</description>\n\n\t<file>class-tgm-plugin-activation.php</file>\n\t<file>example.php</file>\n\n\t<arg name=\"report\" value=\"full\"/>\n\t<arg value=\"sp\"/>\n\t<arg name=\"basepath\" value=\"./\"/>\n\n\t<!-- ##### Sniffs for PHP cross-version compatibility ##### -->\n\t<config name=\"testVersion\" value=\"5.2-\"/>\n\t<rule ref=\"PHPCompatibilityWP\"/>\n\n\t<!-- ##### Code style ##### -->\n\t<rule ref=\"WordPress-Extra\">\n\t\t<!-- This is a conscious choice & known issue and will not be fixed until v 3.0 (if ever). -->\n\t\t<exclude name=\"Generic.Files.OneObjectStructurePerFile\"/>\n\n\t\t<!-- Renaming these protected methods now would break BC. This needs to be left for a next major release. -->\n\t\t<exclude name=\"PSR2.Methods.MethodDeclaration.Underscore\"/>\n\t</rule>\n\n\t<rule ref=\"WordPress-Docs\"/>\n\n\t<!-- The value of the below config variable should be in-line with the\n\t\t \"requires at least\" version in the readme. -->\n\t<config name=\"minimum_supported_wp_version\" value=\"3.7\"/>\n\n\t<rule ref=\"WordPress.WP.I18n\">\n\t\t<properties>\n\t\t\t<!-- TGMPA itself uses `tgmpa`, the example file uses `theme-slug`. -->\n\t\t\t<property name=\"text_domain\" type=\"array\" value=\"tgmpa,theme-slug\"/>\n\t\t</properties>\n\t</rule>\n\n\t<rule ref=\"WordPress.NamingConventions.PrefixAllGlobals\">\n\t\t<properties>\n\t\t\t<!--\n\t\t\t\t* Classes are prefixed with `TGM`.\n\t\t\t\t* Everything else in the global namespace with `tgmpa`.\n\t\t\t\t* The example file uses the example prefix `my_theme`.\n\t\t\t-->\n\t\t\t<property name=\"prefixes\" type=\"array\" value=\"tgmpa,tgm,my_theme,load_tgm\" />\n\t\t</properties>\n\t</rule>\n\n</ruleset>\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}