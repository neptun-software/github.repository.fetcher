{
  "metadata": {
    "timestamp": 1736712102767,
    "page": 680,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mjaschen/phpgeo",
      "stars": 1570,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1279296875,
          "content": ".DS_Store\n*~\n/.idea/\n/composer.lock\n/vendor/\n/docs/phpgeo.html\n/docs/coverage/\n/docs/phpdox/\n/tools/\n/build/\n.phpunit.result.cache\n"
        },
        {
          "name": ".scrutinizer.yml",
          "type": "blob",
          "size": 0.169921875,
          "content": "filter:\n    paths: [\"src/*\"]\ntools:\n    php_code_coverage: true\n    php_sim: true\n    php_mess_detector: true\n    php_pdepend: true\n    php_analyzer: true\n    php_cpd: false\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.8173828125,
          "content": "os: linux\ndist: xenial\nlanguage: php\n\nphp:\n  - \"7.4\"\n  - \"7.3\"\n  - \"7.2\"\n\ncache:\n  directories:\n  - vendor\n  - $HOME/.composer/cache\n\nenv:\n  jobs:\n  - DEPENDENCIES=latest\n  - DEPENDENCIES=oldest\n\ninstall:\n- >\n  if [ \"$DEPENDENCIES\" = \"latest\" ]; then\n    echo \"Installing the latest dependencies\";\n    composer update --with-dependencies --prefer-stable --prefer-dist\n  else\n    echo \"Installing the lowest dependencies\";\n    composer update --with-dependencies --prefer-stable --prefer-dist --prefer-lowest\n  fi;\n  composer show;\n\nscript:\n- >\n  echo;\n  echo \"Validating the composer.json\";\n  composer ci:composer-validate;\n\n- >\n  echo;\n  echo \"Linting all PHP files\";\n  composer ci:lint;\n\n- >\n  echo;\n  echo \"Running the Psalm static analyzer\";\n  composer ci:psalm;\n\n- >\n  echo;\n  echo \"Running the PHPUnit tests\";\n  composer ci:tests;\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 8.861328125,
          "content": "# Change Log\n\nAll notable changes to `mjaschen/phpgeo` will be documented in this file.\nUpdates should follow the [Keep a CHANGELOG](http://keepachangelog.com/) principles.\n\n## [6.0.0]\n\n**Warning: Backwards-compatibility-breaking changes** (see README for upgrade details)\n\n### Added\n\n- Support for PHP 8.4\n- `GeometryLinesInterface` for geometries containing lines (`Line`, `Polyline`, `Polygon`)\n- `getBounds()` method to `GeometryInterface`\n\n### Removed\n\n- Support for PHP 8.1\n\n### Changed\n\n- Replaced Psalm with PHPStan for static code analysis\n\n## [5.0.0]\n\n**Warning: Backwards-compatibility-breaking changes**\n\n### Removed\n\n- Support for PHP 7.3, 7.4 and 8.0\n- deprecated methods `setPoint1()` and `setPoint2()` from `Line`\n\n### Changed\n\n- `master` is now renamed to `main`\n- `GeometryFactoryInterface::fromString()` now has `GeometryInterface` as return type\n\n### Deprecated\n\n- deprecated methods `getDestination()` and `getBearingFinal()` from `DirectVincentyBearing`\n- deprecated methods `getDistance()`, `getBearingInitial()` and `getBearingFinal()` from `InverseVincentyBearing`\n- deprecated methods `getX()`, `getY()` and `getZ()` from `Cartesian`\n- deprecated methods `getPoint1()` and `getPoint2()` from `Line`\n\n## [4.2.1] - 2023-12-03\n\n### Changed\n\n- use proper variable as index for array access\n\n## [4.2.0] - 2022-07-25\n\n### Changed\n\n- point-to-line distance is calculated iteratively now, fixes #92\n- improved intersection checking for polygon/polygon\n\n## [4.1.0] - 2022-06-03\n\nThis release has no breaking changes.\n\nThanks, @nilshoerrmann, for contributing!\n\n### Added\n\n- method `Bounds::getAsPolygon()` which returns a polygon containing the four nodes of the Bounds instance\n- methods `Bounds::getNorthEast()` and `Bounds::getSouthWest()`\n- new public methods: `CardinalDirection::isStrictlyNorth()`, `CardinalDirection::isStrictlyEast()`, `CardinalDirection::isStrictlySouth()` and `CardinalDirection::isStrictlyWest()`\n- new class `Direction` for checking if one point is north, eat, south or west from another point\n- new Class `Intersection` for checking if two geometries intersect each other\n\n## [4.0.0] - 2021-11-29\n\n### Changed\n\n- drop support for PHP 7.2 **breaking change**\n- add support for PHP 8.1\n- add deprecations for setter methods in `DMS` and `Line` classes\n\n## [3.2.1] - 2021-03-04\n\n### Fixed\n\n- Division by zero in `SimplifyBearing` if two consecutive points share the same location, fixes #79.\n\n## [3.2.0] - 2020-10-09\n\n### Added\n\n- Calculation of [Cardinal Distances](https://phpgeo.marcusjaschen.de/Calculations/Cardinal_Distance.html) between two points. Thanks @LeoVie!\n\n### Changed\n\n- change `static` to `self` to prevent accidentally calling the constructor with wrong arguments in child classes (`Ellipsoid`, `Line`, `Polygon`, `Polyline`)\n\n## [3.1.0] - 2020-07-24\n\n### Added\n\n- Simplifying polygons is now supported as well, see `simplifyGeometry()` methods in `SimplifyBearing` and `SimplifyDouglasPeucker` classes (fixes #69).\n\n## [3.0.1] - 2020-05-18\n\n### Fixed\n\n- \\#68 `CoordinateFactory` emitted a warning if a coordindates string without arc seconds was passed to the `fromString()` method\n\n## [3.0.0] - 2020-02-07\n\n### Changed\n\n- *phpgeo* requires PHP >= 7.2 now\n- **backwards compatibility breaking:** fix double space in Ellipsoid Name `World␣Geodetic␣System␣␣1984` → `World␣Geodetic␣System␣1984` (#49)\n- updated tests for PHPUnit 8\n\n### Added\n\n- class constant visibiliy modifiers\n\n### Removed\n\n- support for PHP 7.0 and PHP 7.1 from Travis CI config\n\n## [2.6.0] - 2020-02-05\n\n### Added\n\n- method `getIntermediatePoint()` to the `Line` class which calculates an intermediate point on a line by following the Great Circle between the two line ends and dividing the line by the given fraction (0.0 ... 1.0)\n\n## [2.5.0] - 2020-02-04\n\n### Added\n\n- method `getMidpoint()` to the `Line` class which calculates the midpoint of a line by following the Great Circle between the two line ends and dividing the line into two halves.\n- utility class `Cartesian` which abstracts three-dimensional cartesian coordinates *x*, *y*, and *z*\n\n## [2.4.1] - 2020-01-29\n\n### Changed\n\n- access modifier for the `tolerance` attribute is now protected (`SimplifyDouglasPeucker`)\n\n## [2.4.0] - 2020-01-27\n\n### Added\n\n- `BoundsFactory` to create a bounds instance for a center point and a given distance to the bounds' corners. Thanks @sdennler!\n\n## [2.3.1] - 2019-12-21\n\n### Fixed\n\n- improve precision in `PointToLineDistance`\n\n## [2.3.0] - 2019-12-19\n\n### Added\n\n- `PointToLineDistance` calculates the smallest distance between a point and a line\n\n## [2.2.0] - 2019-11-25\n\n### Added\n\n- `hasSameLocation()` checks if two points share the same location (optionally within a distance which defaults to 0.001 m = 1 mm)\n- `addUniquePoint` adds unique points to a polyline (i.e., points that doesn't already exist in that polyline)\n- `getAveragePoint()` returns the average value of latitude and longitude values for a polyline\n\n### Fixed\n\n- wrongly placed parenthesis in `Polygon::contains()`\n\n## [2.1.0] - 2019-03-22\n\n### Added\n\n- The bounds for a `Polyline` can now be retrieved in form of a `Bound` object.\n\n### Changed\n\n- The auto-loader is now PSR-4 compatible; directory structure was flattened by one level.\n\n## [2.0.5] - 2019-02-27\n\n### Changed\n\n- improvements to the Douglas-Peucker processor. Thanks @iamskey!\n\n## [2.0.3] - 2018-07-19\n\n### Fixed\n\n- Links to documentation in README. Thanks @JonathanMH\n\n### Changed\n\n- better floating point number comparisons in `Vincenty`\n- add exception message in `Vincenty`\n- type-cast regexp matches before doing calculations in `CoordinateFactory`\n\n## [2.0.2] - 2018-03-27\n\n### Added\n\n- Information on how to run checks and tests for developers in the README.\n\n### Changed\n\n- Updated internal stuff like type and return hints after running a static analysis.\n- Updated some PHPDoc blocks after running a static analysis.\n\n### Fixed\n\n- Wrongly typed return value in `BearingEllipsoidal::inverseVincenty()`.\n\n## [2.0.1] - 2018-02-16\n\n### Added\n\n- new supported format for coordinates parser. Thanks to @petrknap\n\n## [2.0.0] - 2017-09-27\n\n### Changed\n\n* License: *phpgeo* is now distributed under the MIT license\n* phpgeo requires at least PHP 7.0\n\n### Removed\n\n* deprecated class `Simplify` was removed; alternatives: `SimplifyBearing` or `SimplifyDouglasPeucker`\n* PHP versions 5.4, 5.5, and 5.6 are no longer supported\n\n## [1.3.8] - 2017-07-05\n\n### Fixed\n\n* Area calculation for polygons works now. Thanks to @felixveysseyre\n\n## [1.3.7] - 2017-07-01\n\n### Fixed\n\n* GeoJSON output for polygon is now compliant with RFC 7946. Thanks to @arsonik\n\n## [1.3.5] - 2016-08-19\n\n### Added\n\n* add method for calculating the final bearing for a `Line` object\n\n## [1.3.3] - 2016-08-16\n\n### Fixed\n\n* bugifx for a division-by-zero error which occurred when symplifying a polyline\n  with the Douglas-Peucker algorithm.\n\n## [1.3.2] - 2016-03-26\n\n### Added\n\n* add an utility class to calculate the perpendicular distance between a point\n  and a line; [documentation](https://phpgeo.marcusjaschen.de/#_perpendicular_distance)\n\n## [1.3.1] - 2016-03-26\n\n### Added\n\n* add method to calculate the bearing of a `Line` instance (point 1 -> point 2)\n\n## [1.3.0] - 2016-03-26\n\n### Added\n\n* A new `SimplifyInterface` was introduced and is implemented in two classes:\n  `SimplifyDouglasPeucker` and `SimplifyBearing`\n* Added documentation\n\n### Deprecated\n\n* The `Simplify` processor class is now deprecated and will be removed in the\n  2.0 release.\n\n## [1.2.1] - 2016-03-15\n\n### Added\n\n* Added functionality to change the direction of Polygon instances\n* Added documentation\n\n## [1.2.0] - 2016-03-14\n\n### Added\n\n* Added geofence check for arbitrary geometry objects\n* Extended and updated documentation\n\n## [1.1.1] - 2016-03-13\n\n### Added\n\n* Added formatter for \"Decimal Minutes\" format, e.g. `43° 37.386' N, 070° 12.472' W`\n* Added documentation for the new formatter\n\n## [1.1.0] - 2016-03-12\n\n### Added\n\n* Added calculation of the bearing angle between two points (initial and final bearing)\n* Added calculation of the destination point for a given starting point, the bearing angle, and the distance\n* Support for spherical and ellipsoidal algorithms for the described bearing calculations\n* Added documentation for the bearing calculations\n\n## [1.0.4] - 2016-03-11\n\n### Added\n\n* Added functionality to change the direction of Line/Polyline instances\n* Added documentation\n\n## [1.0.3] - 2016-03-10\n\n### Added\n\n* Added documentation sources in mkdocs format. Documentation is now available online at http://phpgeo.marcusjaschen.de/\n\n## [1.0.2] - 2016-03-04\n\n### Changed\n\n* several optimizations in control structures\n\n## [1.0.0] - 2016-02-11\n\n### Added\n\n* Added license information. *phpgeo* is now licensed under the GPL 3. (see issue [#8](https://github.com/mjaschen/phpgeo/issues/8))\n\n## [0.4.0] - 2015-10-29\n\n### Deprecated\n\n* removed support for PHP 5.3; introduced short array syntax\n\n## [0.3.0] - 2015-10-29\n\n### Added\n\n* added the new Polyline class (thanks [@paulvl](https://github.com/paulvl))\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1396484375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at mjaschen@gmail.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.7490234375,
          "content": "# Contributing to phpgeo\n\nNote: It's a good idea to [open an issue](https://github.com/mjaschen/phpgeo/issues)\nfor bugs or feature proposals first.\n\nThe contribution workflow is described as follows:\n\n1. Fork phpgeo, clone repository (`git clone git@github.com:yourname/phpgeo.git`)\n2. Checkout your feature or bug-fix branch (e. g. `git checkout -b fix-random-bug`)\n3. Install dependencies: `composer install`\n4. Add tests for your changes\n5. Make your changes\n6. Run the tests (`composer ci`)\n7. Iterate through steps 3 to 5 until all tests pass.\n8. Commit your changes (`git add -A -- . && git commit`)\n9. Push to your fork (`git push --set-upstream origin fix-random-bug`)\n10. Create a pull request from your feature or bug-fix branch to phpgeo's \"master\" branch\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1025390625,
          "content": "The MIT License (MIT)\n\nCopyright 2017 Marcus Jaschen, https://www.marcusjaschen.de/ <mjaschen@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.94921875,
          "content": "UPLOAD_HOST=phpgeo.marcusjaschen.de\nUPLOAD_PATH=phpgeo.marcusjaschen.de\n\nPHP ?= php\n\n.PHONY: docs\ndocs: daux\n\n.PHONY: daux\ndaux:\n\trm -Rf build/daux\n\tmkdir -p build/daux\n\tdocker run --rm -v \"$(PWD)\":/src -w /src daux/daux.io daux generate -d build/daux\n\n.PHONY: clean\nclean:\n\trm -Rf build\n\n.PHONY: upload_docs\nupload_docs: docs\n\trsync --recursive --delete build/daux/ $(UPLOAD_HOST):$(UPLOAD_PATH)/\n\n.PHONY: ci\nci: lint coding-standards composer-validate sniff static-analysis-psalm unit-tests\n\n.PHONY: coding-standards\ncoding-standards: sniff\n\n.PHONY: composer-validate\ncomposer-validate:\n\tcomposer validate --no-check-publish\n\n.PHONY: lint\nlint:\n\t$(PHP) ./vendor/bin/parallel-lint src\n\n.PHONY: sniff\nsniff:\n\t# the `-` prefix ignores the exit status of the command\n\t-$(PHP) ./vendor/bin/phpcs --standard=codesniffer_rules.xml src\n\n.PHONY: static-analysis-psalm\nstatic-analysis-psalm:\n\t$(PHP) ./vendor/bin/psalm\n\n.PHONY: unit-tests\nunit-tests:\n\t$(PHP) ./vendor/bin/phpunit\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.3369140625,
          "content": "# phpgeo - A Simple Geo Library for PHP\n\nphpgeo provides abstractions to geographical coordinates (including support for different ellipsoids) and allows you to\ncalculate geographical distances between coordinates with high precision.\n\n[![Latest Stable Version](https://poser.pugx.org/mjaschen/phpgeo/v)](//packagist.org/packages/mjaschen/phpgeo)\n[![Total Downloads](https://poser.pugx.org/mjaschen/phpgeo/downloads)](//packagist.org/packages/mjaschen/phpgeo)\n[![phpgeo Tests](https://github.com/mjaschen/phpgeo/actions/workflows/ci.yml/badge.svg)](https://github.com/mjaschen/phpgeo/actions/workflows/ci.yml)\n[![Documentation Status](https://github.com/mjaschen/phpgeo/actions/workflows/docs.yml/badge.svg)](https://github.com/mjaschen/phpgeo/actions/workflows/docs.yml)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/mjaschen/phpgeo/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/mjaschen/phpgeo/?branch=master)\n[![License](https://poser.pugx.org/mjaschen/phpgeo/license)](//packagist.org/packages/mjaschen/phpgeo)\n\n## Requirements\n\nMinimum required PHP version is 8.2. *phpgeo* is tested up to PHP 8.4.\n\nNew features will only go into the main branch and won't be backported.\n\nIt's possible to install older versions of *phpgeo* for older PHP versions.\nPlease refer to the following table for the compatibility matrix:\n\n| PHP Version | phpgeo Version |  Support Status  | Composer Install                        |\n|:-----------:|:--------------:|:----------------:|-----------------------------------------|\n|     8.4     |      6.x       |     ✅ active     | `composer require mjaschen/phpgeo`      |\n|     8.3     |      6.x       |     ✅ active     | `composer require mjaschen/phpgeo`      |\n|     8.2     |      6.x       |     ✅ active     | `composer require mjaschen/phpgeo`      |\n|     8.1     |      5.x       | ⚠️ security only | `composer require mjaschen/phpgeo:^5.0` |\n|     8.0     |      4.x       | ⚠️ security only | `composer require mjaschen/phpgeo:^4.0` |\n|     7.4     |      4.x       | ⚠️ security only | `composer require mjaschen/phpgeo:^4.0` |\n|     7.3     |      4.x       | ⚠️ security only | `composer require mjaschen/phpgeo:^4.0` |\n|     7.2     |      3.x       |  ❌ end of life   | `composer require mjaschen/phpgeo:^3.0` |\n|     7.1     |      2.x       |  ❌ end of life   | `composer require mjaschen/phpgeo:^2.0` |\n|     7.0     |      2.x       |  ❌ end of life   | `composer require mjaschen/phpgeo:^2.0` |\n|     5.6     |      1.x       |  ❌ end of life   | `composer require mjaschen/phpgeo:^1.0` |\n|     5.5     |      1.x       |  ❌ end of life   | `composer require mjaschen/phpgeo:^1.0` |\n|     5.4     |      1.x       |  ❌ end of life   | `composer require mjaschen/phpgeo:^1.0` |\n\n## Documentation\n\nThe documentation is available at [phpgeo.marcusjaschen.de](https://phpgeo.marcusjaschen.de/).\n\n## Installation\n\nUsing [Composer](https://getcomposer.org), just add it to your `composer.json` by running:\n\n```\ncomposer require mjaschen/phpgeo\n```\n\n## Upgrading\n\nUpdate the version constraint in the project's `composer.json` and\nrun `composer update` or require the new version by running:\n\n```shell\ncomposer require mjaschen/phpgeo:^6.0\n```\n\n### Upgrading to 6.x\n\n*phpgeo* has some breaking changes in the 6.x release line. Please refer to the following list to see what has changed\nand what you need to do to upgrade your code.\n\n| Change                                                                         | Description                                                   | Action                                                                            |\n|--------------------------------------------------------------------------------|---------------------------------------------------------------|-----------------------------------------------------------------------------------|\n| `Line`, `Polygon`, and `Polyline` classes are now implementing a new interface | `GeometryLinesInterface` provides the `getSegments()` method. | There's no need to change anything if you don't extend those classes.             |\n| `getBounds()` method was added to `GeometryInterface`                          |                                                               | Ensure your class has a `getBounds()` method if you implement `GeometryInterface` |\n| removed support for PHP 8.1                                                    | Older PHP versions are no longer supported.                   | Upgrade to at least PHP 8.2 or keep using phpgeo 5.x                              |\n\n### Upgrading to 5.x\n\n*phpgeo* has some breaking changes in the 5.x release line. Please refer to the following list to see what has changed\nand what you need to do to upgrade your code.\n\n| Change                                                      | Description                                 | Action                                                  |\n|-------------------------------------------------------------|---------------------------------------------|---------------------------------------------------------|\n| `setPoint1()` and `setPoint2()` methods removed from `Line` | The `Line` class now is immutable.          | Use the constructor to create a new instance of `Line`. |\n| removed support for PHP 7.3, 7.4 and 8.0                    | Older PHP versions are no longer supported. | Upgrade to at least PHP 8.1.                            |\n\n## License\n\nStarting with version 2.0.0 phpgeo is licensed under the MIT license. Older versions were GPL-licensed.\n\n## Features\n\n**Info:** Please visit the **[documentation site](https://phpgeo.marcusjaschen.de/)** for complete and up-to-date\ndocumentation with many examples!\n\nphpgeo provides the following features (follow the links for examples):\n\n- abstractions of several geometry\n  objects ([coordinate/point](https://phpgeo.marcusjaschen.de/Geometries/Coordinate.html),\n  [line](https://phpgeo.marcusjaschen.de/Geometries/Line.html),\n  [polyline/GPS track](https://phpgeo.marcusjaschen.de/Geometries/Polyline.html),\n  [polygon](https://phpgeo.marcusjaschen.de/Geometries/Polygon.html)\n- support for different [ellipsoids](https://phpgeo.marcusjaschen.de/Geometries/Ellipsoid.html), e.g. WGS-84\n- [length/distance/perimeter calculations](https://phpgeo.marcusjaschen.de/Calculations/Distance_and_Length.html)\n  with different implementations (Haversine, Vincenty)\n- [Geofence](https://phpgeo.marcusjaschen.de/Calculations/Geofence.html) calculation,\n  i.e. answering the question \"Is this point contained in that area/polygon?\" and\n  other [intersection](https://phpgeo.marcusjaschen.de/Comparisons/Intersections.html) checks between different\n  geometries\n- [formatting and output](https://phpgeo.marcusjaschen.de/Formatting_and_Output/index.html) of geometry objects\n  (GeoJSON, nice strings, e. g. `18° 54′ 41″ -155° 40′ 42″`)\n- calculation\n  of [bearing angle between two points](https://phpgeo.marcusjaschen.de/Calculations/Bearing_and_Destination.html#page_Bearing-between-two-points)\n  (spherical or with Vincenty's formula)\n- calculation of\n  a [destination point for a given starting point](https://phpgeo.marcusjaschen.de/Calculations/Bearing_and_Destination.html#page_Destination-point-for-given-bearing-and-distance),\n  bearing angle, and distance (spherical or with Vincenty's formula)\n- calculation of\n  the [perpendicular distance between a point and a line](https://phpgeo.marcusjaschen.de/Calculations/Perpendicular_Distance.html)\n- calculation of\n  the [Cardinal Distances between two points](https://phpgeo.marcusjaschen.de/Calculations/Cardinal_Distance.html)\n- getting segments of a [polyline](https://phpgeo.marcusjaschen.de/Geometries/Polyline.html#page_Segments)\n  /[polygon](https://phpgeo.marcusjaschen.de/Geometries/Polygon.html#page_Segments),\n- [reversing direction](https://phpgeo.marcusjaschen.de/Geometries/Polygon.html#page_Reverse-Direction)\n  of polyline/polygon\n\n## Examples/Usage\n\nThis list is incomplete, please visit the **[documentation site](https://phpgeo.marcusjaschen.de/)**\nfor the full monty of documentation and examples!\n\n### Distance between two coordinates (Vincenty's Formula)\n\nUse the calculator object directly:\n\n```php\n<?php\n\nuse Location\\Coordinate;\nuse Location\\Distance\\Vincenty;\n\n$coordinate1 = new Coordinate(19.820664, -155.468066); // Mauna Kea Summit\n$coordinate2 = new Coordinate(20.709722, -156.253333); // Haleakala Summit\n\n$calculator = new Vincenty();\n\necho $calculator->getDistance($coordinate1, $coordinate2); // returns 128130.850 (meters; ≈128 kilometers)\n```\n\nor call the `getDistance()` method of a Coordinate object by injecting a calculator object:\n\n```php\n<?php\n\nuse Location\\Coordinate;\nuse Location\\Distance\\Vincenty;\n\n$coordinate1 = new Coordinate(19.820664, -155.468066); // Mauna Kea Summit\n$coordinate2 = new Coordinate(20.709722, -156.253333); // Haleakala Summit\n\necho $coordinate1->getDistance($coordinate2, new Vincenty()); // returns 128130.850 (meters; ≈128 kilometers)\n```\n\n### Simplifying a polyline\n\nPolylines can be simplified to save storage space or bandwidth. Simplification is done with\nthe [Ramer–Douglas–Peucker algorithm](https://en.wikipedia.org/wiki/Ramer–Douglas–Peucker_algorithm) (AKA\nDouglas-Peucker algorithm).\n\n```php\n<?php\n\nuse Location\\Coordinate;\nuse Location\\Polyline;\nuse Location\\Distance\\Vincenty;\n\n$polyline = new Polyline();\n$polyline->addPoint(new Coordinate(10.0, 10.0));\n$polyline->addPoint(new Coordinate(20.0, 20.0));\n$polyline->addPoint(new Coordinate(30.0, 10.0));\n\n$processor = new Simplify($polyline);\n\n// remove all points which perpendicular distance is less\n// than 1500 km from the surrounding points.\n$simplified = $processor->simplify(1500000);\n\n// simplified is the polyline without the second point (which\n// perpendicular distance is ~1046 km and therefore below\n// the simplification threshold)\n```\n\n### Polygon contains a point (e.g. \"GPS geofence\")\n\nphpgeo has a polygon implementation which can be used to determinate if a point is contained in it or not.\nA polygon consists of at least three points. Points are instances of the `Coordinate` class.\n\n**Warning:** The calculation gives wrong results if the polygons has points on both sides of the 180/-180 degrees\nmeridian.\n\n```php\n<?php\n\nuse Location\\Coordinate;\nuse Location\\Polygon;\n\n$geofence = new Polygon();\n\n$geofence->addPoint(new Coordinate(-12.085870,-77.016261));\n$geofence->addPoint(new Coordinate(-12.086373,-77.033813));\n$geofence->addPoint(new Coordinate(-12.102823,-77.030938));\n$geofence->addPoint(new Coordinate(-12.098669,-77.006476));\n\n$outsidePoint = new Coordinate(-12.075452, -76.985079);\n$insidePoint = new Coordinate(-12.092542, -77.021540);\n\nvar_dump($geofence->contains($outsidePoint)); // returns bool(false) the point is outside the polygon\nvar_dump($geofence->contains($insidePoint)); // returns bool(true) the point is inside the polygon\n```\n\n### Formatted output of coordinates\n\nYou can format a coordinate in different styles.\n\n#### Decimal Degrees\n\n```php\n<?php\n\nuse Location\\Coordinate;\nuse Location\\Formatter\\Coordinate\\DecimalDegrees;\n\n$coordinate = new Coordinate(19.820664, -155.468066); // Mauna Kea Summit\n\necho $coordinate->format(new DecimalDegrees());\n```\n\n#### Degrees/Minutes/Seconds (DMS)\n\n```php\n<?php\n\nuse Location\\Coordinate;\nuse Location\\Formatter\\Coordinate\\DMS;\n\n$coordinate = new Coordinate(18.911306, -155.678268); // South Point, HI, USA\n\n$formatter = new DMS();\n\necho $coordinate->format($formatter); // 18° 54′ 41″ -155° 40′ 42″\n\n$formatter->setSeparator(\", \")\n    ->useCardinalLetters(true)\n    ->setUnits(DMS::UNITS_ASCII);\n\necho $coordinate->format($formatter); // 18° 54' 41\" N, 155° 40' 42\" W\n```\n\n#### GeoJSON\n\n```php\n<?php\n\nuse Location\\Coordinate;\nuse Location\\Formatter\\Coordinate\\GeoJSON;\n\n$coordinate = new Coordinate(18.911306, -155.678268); // South Point, HI, USA\n\necho $coordinate->format(new GeoJSON()); // { \"type\" : \"point\" , \"coordinates\" : [ -155.678268, 18.911306 ] }\n```\n\n## Development\n\n### Run Tests\n\nBefore submitting a pull request, please be sure to run all checks and tests and ensure everything is green.\n\n- lint PHP files for syntax errors: `composer ci:lint`\n- run static analysis with [Psalm][] and report errors: `composer ci:psalm`\n- run unit tests with PHPUnit: `composer ci:tests`\n\nTo run all checks and tests at once, just use `composer ci`.\n\nOf course, it's possible to use the test runners directly, e.g. for PHPUnit:\n\n```shell\n./vendor/bin/phpunit\n```\n\nPHPStan:\n\n```shell\n./vendor/bin/phpstan\n```\n\n### Running GitHub Actions locally\n\nIt's possible to run the whole CI test matrix locally with *[act](https://github.com/nektos/act)*:\n\n```shell\nact --rm -P ubuntu-latest=shivammathur/node:latest\n```\n\n## Credits\n\n* Marcus Jaschen <mail@marcusjaschen.de> and [all contributors](https://github.com/mjaschen/phpgeo/graphs/contributors)\n* [Chris Veness](http://www.movable-type.co.uk/scripts/latlong-vincenty.html) - JavaScript implementation of\n  the [Vincenty formula](http://en.wikipedia.org/wiki/Vincenty%27s_formulae) for distance calculation\n* Ersts,P.J., Horning, N., and M. Polin[Internet] Perpendicular Distance Calculator(version\n  1.2.2) [Documentation](http://biodiversityinformatics.amnh.org/open_source/pdc/documentation.php). American Museum of\n  Natural History, Center for Biodiversity and Conservation. Available\n  from http://biodiversityinformatics.amnh.org/open_source/pdc. Accessed on 2013-07-07.\n* W. Randolph Franklin, PNPOLY - Point Inclusion in Polygon\n  Test [Documentation](http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html)\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.900390625,
          "content": "{\n    \"name\": \"mjaschen/phpgeo\",\n    \"description\": \"Simple Yet Powerful Geo Library\",\n    \"keywords\": [\n        \"distance\",\n        \"area\",\n        \"coordinate\",\n        \"geo\",\n        \"gis\",\n        \"bounds\",\n        \"ellipsoid\",\n        \"calculation\",\n        \"polyline\",\n        \"polygon\",\n        \"geofence\",\n        \"simplify\",\n        \"length\",\n        \"vincenty\",\n        \"haversine\",\n        \"bearing\",\n        \"projection\",\n        \"gps\",\n        \"earth\",\n        \"track\",\n        \"point\",\n        \"perpendicular\"\n    ],\n    \"homepage\": \"https://phpgeo.marcusjaschen.de/\",\n    \"type\": \"library\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Marcus Jaschen\",\n            \"email\": \"mjaschen@gmail.com\",\n            \"homepage\": \"https://www.marcusjaschen.de/\"\n        }\n    ],\n    \"readme\": \"README.md\",\n    \"support\" : {\n        \"issues\" : \"https://github.com/mjaschen/phpgeo/issues\",\n        \"docs\": \"https://phpgeo.marcusjaschen.de/Installation.html\",\n        \"email\" : \"mjaschen@gmail.com\"\n    },\n    \"require\": {\n        \"php\": \"^8.2\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Location\\\\\": \"src/\"\n        }\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^11.0\",\n        \"phpstan/phpstan\": \"^2.0\",\n        \"squizlabs/php_codesniffer\": \"^3.7\"\n    },\n    \"scripts\": {\n        \"ci:composer-validate\": \"composer validate --no-check-all --no-check-lock --strict\",\n        \"ci:lint\": \"find src tests -name '*.php' -print0 | xargs -0 -n 1 -P 4 php -l\",\n        \"ci:phpstan\": \"./vendor/bin/phpstan\",\n        \"ci:sniff\": \"./vendor/bin/phpcs src tests\",\n        \"ci:tests\": \"./vendor/bin/phpunit tests/\",\n        \"ci:static\": [\n            \"@ci:composer-validate\",\n            \"@ci:lint\",\n            \"@ci:phpstan\",\n            \"@ci:sniff\"\n        ],\n        \"ci:dynamic\": [\n            \"@ci:tests\"\n        ],\n        \"ci\": [\n            \"@ci:static\",\n            \"@ci:dynamic\"\n        ]\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpcs.xml.dist",
          "type": "blob",
          "size": 4.33203125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ruleset name=\"Coding Standard\">\n    <description>\n        This standard requires PHP_CodeSniffer >= 3.4.\n    </description>\n\n    <arg name=\"colors\"/>\n    <arg name=\"extensions\" value=\"php\"/>\n\n    <!--The complete PSR-12 rule set-->\n    <rule ref=\"PSR12\"/>\n\n    <!-- Arrays -->\n    <rule ref=\"Generic.Arrays.DisallowLongArraySyntax\"/>\n    <rule ref=\"Squiz.Arrays.ArrayBracketSpacing\"/>\n\n    <!-- Classes -->\n    <rule ref=\"Generic.Classes.DuplicateClassName\"/>\n    <rule ref=\"Squiz.Classes.ClassFileName\"/>\n    <rule ref=\"Squiz.Classes.DuplicateProperty\"/>\n    <rule ref=\"Squiz.Classes.LowercaseClassKeywords\"/>\n    <rule ref=\"Squiz.Classes.SelfMemberReference\"/>\n\n    <!-- Code analysis -->\n    <rule ref=\"Generic.CodeAnalysis.AssignmentInCondition\"/>\n    <rule ref=\"Generic.CodeAnalysis.EmptyStatement\"/>\n    <rule ref=\"Generic.CodeAnalysis.ForLoopShouldBeWhileLoop\"/>\n    <rule ref=\"Generic.CodeAnalysis.ForLoopWithTestFunctionCall\"/>\n    <rule ref=\"Generic.CodeAnalysis.JumbledIncrementer\"/>\n    <rule ref=\"Generic.CodeAnalysis.UnconditionalIfStatement\"/>\n    <rule ref=\"Generic.CodeAnalysis.UnnecessaryFinalModifier\"/>\n    <rule ref=\"Generic.CodeAnalysis.UselessOverridingMethod\"/>\n\n    <!-- Commenting -->\n    <rule ref=\"Generic.Commenting.Fixme\"/>\n    <rule ref=\"Generic.Commenting.Todo\"/>\n    <rule ref=\"PEAR.Commenting.InlineComment\"/>\n    <rule ref=\"Squiz.Commenting.DocCommentAlignment\"/>\n    <rule ref=\"Squiz.Commenting.EmptyCatchComment\"/>\n    <rule ref=\"Squiz.Commenting.FunctionCommentThrowTag\"/>\n    <rule ref=\"Squiz.Commenting.PostStatementComment\"/>\n\n    <!-- Control structures -->\n    <rule ref=\"PEAR.ControlStructures.ControlSignature\"/>\n\n    <!-- Debug -->\n    <rule ref=\"Generic.Debug.ClosureLinter\"/>\n\n    <!-- Files -->\n    <rule ref=\"Generic.Files.OneClassPerFile\"/>\n    <rule ref=\"Generic.Files.OneInterfacePerFile\"/>\n    <rule ref=\"Generic.Files.OneObjectStructurePerFile\"/>\n    <rule ref=\"Zend.Files.ClosingTag\"/>\n\n    <!-- Formatting -->\n    <rule ref=\"PEAR.Formatting.MultiLineAssignment\"/>\n\n    <!-- Functions -->\n    <rule ref=\"Generic.Functions.CallTimePassByReference\"/>\n    <rule ref=\"PSR12.Functions.NullableTypeDeclaration\"/>\n    <rule ref=\"Squiz.Functions.FunctionDuplicateArgument\"/>\n    <rule ref=\"Squiz.Functions.GlobalFunction\"/>\n\n    <!-- Metrics -->\n    <rule ref=\"Generic.Metrics.CyclomaticComplexity\"/>\n    <rule ref=\"Generic.Metrics.NestingLevel\"/>\n\n    <!-- Naming conventions -->\n    <rule ref=\"Generic.NamingConventions.ConstructorName\"/>\n    <rule ref=\"PEAR.NamingConventions.ValidClassName\"/>\n\n    <!-- Objects -->\n    <rule ref=\"Squiz.Objects.ObjectMemberComma\"/>\n\n    <!-- Operators -->\n    <rule ref=\"Squiz.Operators.IncrementDecrementUsage\"/>\n    <rule ref=\"Squiz.Operators.ValidLogicalOperators\"/>\n\n    <!-- PHP -->\n    <rule ref=\"Generic.PHP.BacktickOperator\"/>\n    <rule ref=\"Generic.PHP.CharacterBeforePHPOpeningTag\"/>\n    <rule ref=\"Generic.PHP.DeprecatedFunctions\"/>\n    <rule ref=\"Generic.PHP.DisallowAlternativePHPTags\"/>\n    <rule ref=\"Generic.PHP.DiscourageGoto\"/>\n    <rule ref=\"Generic.PHP.ForbiddenFunctions\"/>\n    <rule ref=\"Generic.PHP.NoSilencedErrors\"/>\n    <rule ref=\"Squiz.PHP.CommentedOutCode\">\n        <properties>\n            <property name=\"maxPercentage\" value=\"70\"/>\n        </properties>\n    </rule>\n    <rule ref=\"Squiz.PHP.DisallowMultipleAssignments\"/>\n    <rule ref=\"Squiz.PHP.DisallowSizeFunctionsInLoops\"/>\n    <rule ref=\"Squiz.PHP.DiscouragedFunctions\"/>\n    <rule ref=\"Squiz.PHP.Eval\"/>\n    <rule ref=\"Squiz.PHP.GlobalKeyword\"/>\n    <rule ref=\"Squiz.PHP.Heredoc\"/>\n    <rule ref=\"Squiz.PHP.InnerFunctions\"/>\n    <rule ref=\"Squiz.PHP.LowercasePHPFunctions\"/>\n    <rule ref=\"Squiz.PHP.NonExecutableCode\"/>\n\n    <!-- Scope -->\n    <rule ref=\"Squiz.Scope.MemberVarScope\"/>\n    <rule ref=\"Squiz.Scope.StaticThisUsage\"/>\n\n    <!-- Strings -->\n    <rule ref=\"Squiz.Strings.DoubleQuoteUsage\"/>\n\n    <!-- Whitespace -->\n    <rule ref=\"PEAR.WhiteSpace.ObjectOperatorIndent\"/>\n    <rule ref=\"PEAR.WhiteSpace.ScopeClosingBrace\"/>\n    <rule ref=\"Squiz.WhiteSpace.CastSpacing\"/>\n    <rule ref=\"Squiz.WhiteSpace.LogicalOperatorSpacing\"/>\n    <rule ref=\"Squiz.WhiteSpace.OperatorSpacing\">\n        <properties>\n            <property name=\"ignoreNewlines\" value=\"true\"/>\n        </properties>\n    </rule>\n    <rule ref=\"Squiz.WhiteSpace.PropertyLabelSpacing\"/>\n    <rule ref=\"Squiz.WhiteSpace.SemicolonSpacing\"/>\n</ruleset>\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.109375,
          "content": "\nparameters:\n    editorUrl: 'phpstorm://open?file=%%file%%&line=%%line%%'\n    level: 7\n    paths:\n        - src\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.5048828125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bootstrap=\"tests/bootstrap.php\" colors=\"true\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.5/phpunit.xsd\">\n  <coverage/>\n  <testsuites>\n    <testsuite name=\"Location Test Suite\">\n      <directory>tests/Location/</directory>\n      <directory>tests/Regression/</directory>\n    </testsuite>\n  </testsuites>\n  <source>\n    <include>\n      <directory>src</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}