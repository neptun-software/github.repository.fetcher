{
  "metadata": {
    "timestamp": 1736712165052,
    "page": 816,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "claviska/SimpleImage",
      "stars": 1385,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1435546875,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1328125,
          "content": "/example            export-ignore\n/.github            export-ignore\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1767578125,
          "content": "# System files\n# ------------\n.DS_Store\n\n# Editors\n# (sensitive workspace files)\n# ---------------------------\n*.sublime-project\n*.sublime-workspace\n/.vscode\n/.idea\n/.nova\n\nvendor/\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0361328125,
          "content": "Copyright 2017 A Beautiful Site, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 26.2451171875,
          "content": "# SimpleImage\n\nA PHP class that makes working with images as simple as possible.\n\nDeveloped and maintained by [Cory LaViska](https://github.com/claviska).\n\n_If this project has you loving PHP image manipulation again, please consider [sponsoring me](https://github.com/sponsors/claviska) to support its development._\n\n---\n\n## Overview\n\n```php\n<?php\ntry {\n  // Create a new SimpleImage object\n  $image = new \\claviska\\SimpleImage();\n\n  // Magic! âœ¨\n  $image\n    ->fromFile('image.jpg')                     // load image.jpg\n    ->autoOrient()                              // adjust orientation based on exif data\n    ->resize(320, 200)                          // resize to 320x200 pixels\n    ->flip('x')                                 // flip horizontally\n    ->colorize('DarkBlue')                      // tint dark blue\n    ->border('black', 10)                       // add a 10 pixel black border\n    ->overlay('watermark.png', 'bottom right')  // add a watermark image\n    ->toFile('new-image.png', 'image/png')      // convert to PNG and save a copy to new-image.png\n    ->toScreen();                               // output to the screen\n\n  // And much more! ðŸ’ª\n} catch(Exception $err) {\n  // Handle errors\n  echo $err->getMessage();\n}\n```\n\n## Requirements\n\n- PHP 8.0+\n- [GD extension](http://php.net/manual/en/book.image.php)\n\n## Features\n\n- Supports reading, writing, and converting GIF, JPEG, PNG, WEBP, BMP, AVIF formats.\n- Reads and writes files, data URIs, and image strings.\n- Manipulation: crop, resize, overlay/watermark, adding TTF text\n- Drawing: arc, border, dot, ellipse, line, polygon, rectangle, rounded rectangle\n- Filters: blur, brighten, colorize, contrast, darken, desaturate, edge detect, emboss, invert, opacity, pixelate, sepia, sharpen, sketch\n- Utilities: color adjustment, darken/lighten color, extract colors\n- Properties: exif data, height/width, mime type, orientation\n- Color arguments can be passed in as any CSS color (e.g. `LightBlue`), a hex color, or an RGB(A) array.\n- Support for alpha-transparency (GIF, PNG, WEBP, AVIF)\n- Chainable methods\n- Uses exceptions\n- Load with Composer or manually (just one file)\n- [Semantic Versioning](http://semver.org/)\n\n## Installation\n\nInstall with Composer:\n\n```\ncomposer require claviska/simpleimage\n```\n\nOr include the library manually:\n\n```php\n<?php\nrequire 'src/claviska/SimpleImage.php';\n```\n\n## About\n\nSimpleImage is developed and maintained by [Cory LaViska](https://github.com/claviska). Copyright A Beautiful Site, LLC.\n\nIf you enjoy using SimpleImage, especially in commercial applications, please consider [sponsoring me](https://github.com/sponsors/claviska) to support its development.\n\nThanks! ðŸ™Œ\n\n## License\n\nLicensed under the [MIT license](http://opensource.org/licenses/MIT).\n\n## API\n\nOrder of awesomeness:\n\n1. Load an image\n2. Manipulate the image\n3. Save/output the image\n\nAPI tips:\n\n- An asterisk denotes a required argument.\n- Methods that return a SimpleImage object are chainable.\n- You can pass a file or data URI to the constructor to avoid calling `fromFile` or `fromDataUri`.\n- Static methods can be called with `$image::methodName()` or `\\claviska\\SimpleImage::methodName()`.\n- Colors can be a CSS color (e.g. `white`), a hex string (e.g. '#ffffff'), or an RGBA array.\n- You can pipe transparency to `normalizeColor` when you pass a CSS color or hex string: `white|0.25`\n\n### Loaders\n\n#### `fromDataUri($uri)`\n\nLoads an image from a data URI.\n\n- `$uri`* (string) - A data URI.\n\nReturns a SimpleImage object.\n\n#### `fromFile($file)`\n\nLoads an image from a file.\n\n- `$file`* (string) - The image file to load.\n\nReturns a SimpleImage object.\n\n#### `fromNew($width, $height, $color)`\n\nCreates a new image.\n\n- `$width`* (int) - The width of the image.\n- `$height`* (int) - The height of the image.\n- `$color` (string|array) - Optional fill color for the new image (default 'transparent').\n\nReturns a SimpleImage object.\n\n#### `fromString($string)`\n\nCreates a new image from a string.\n\n- `$string`* (string) - The raw image data as a string. Example:\n  ```\n  $string = file_get_contents('image.jpg');\n  ```\n\nReturns a SimpleImage object.\n\n### Savers\n\n#### `toDataUri($mimeType, $options)`\n\nGenerates a data URI.\n\n- `$mimeType` (string) - The image format to output as a mime type (defaults to the original mime type).\n- `$options` (array|int) - Array of options or Image quality as a percentage (default 100).\n\nReturns a string containing a data URI.\n\n#### `toDownload($filename, $mimeType, $options)`\n\nForces the image to be downloaded to the clients machine. Must be called before any output is sent to the screen.\n\n- `$filename`* (string) - The filename (without path) to send to the client (e.g. 'image.jpeg').\n- `$mimeType` (string) - The image format to output as a mime type (defaults to the original mime type).\n- `$options` (array|int) - Array of options or Image quality as a percentage (default 100).\n\nReturns a SimpleImage object.\n\n#### `toFile($file, $mimeType, $options)`\n\nWrites the image to a file.\n\n- `$mimeType` (string) - The image format to output as a mime type (defaults to the original mime type).\n- `$options` (array|int) - Array of options or Image quality as a percentage (default 100).\n\nReturns a SimpleImage object.\n\n#### `toScreen($mimeType, $options)`\n\nOutputs the image to the screen. Must be called before any output is sent to the screen.\n\n- `$mimeType` (string) - The image format to output as a mime type (defaults to the original mime type).\n- `$options` (array|int) - Array of options or Image quality as a percentage (default 100).\n\nReturns a SimpleImage object.\n\n#### `toString($mimeType, $options)`\n\nGenerates an image string.\n\n- `$mimeType` (string) - The image format to output as a mime type (defaults to the original mime type).\n- `$options` (array|int) - Array of options or Image quality as a percentage (default 100).\n\nReturns a SimpleImage object.\n\n#### `generate($mimeType, $options)`\n\nGenerates an image.\n\n- `$mimeType` (string) - The image format to output as a mime type (defaults to the original mime type).\n- `$options` (array|int) - Array of options or Image quality as a percentage (default 100).\n\nReturns an array: [mimeType, data]\n\n#### Options array\n\nInstead of providing the quality as an integer as the last function parameter you can also set various options depending on the targeted Mime type using an associative array.\n\n```php\n$image->toFile($file, 'image/avif', [\n    // JPG, WEBP, AVIF (default 100)\n    'quality' => 100,\n\n    // AVIF (default -1 which is 6)\n    // range of slow and small file 0 to 10 fast but big file\n    'speed' => -1,\n]);\n```\n\n```php\n$image->toFile($file, 'image/bmp', [\n    // BMP: boolean (default true)\n    'compression' => true,\n\n    // BMP, JPG (default null, keep the same)\n    'interlace' => null,\n]);\n```\n\n```php\n$image->toFile($file, 'image/gif', [\n    // GIF, PNG (default true)\n    'alpha' => true,\n]);\n```\n\n```php\n$image->toFile($file, 'image/jpeg', [\n    // BMP, JPG (default null, keep the same)\n    'interlace' => null,\n\n    // JPG, WEBP, AVIF (default 100)\n    'quality' => 100,\n]);\n```\n\n```php\n$image->toFile($file, 'image/png', [\n    // GIF, PNG (default true)\n    'alpha' => true,\n\n    // PNG: 0-10, defaults to zlib (default 6)\n    'compression' => -1,\n\n    // PNG (default -1)\n    'filters' => -1,\n\n    // has no effect on PNG images, since the format is lossless\n    // 'quality' => 100,\n]);\n```\n\n```php\n$image->toFile($file, 'image/webp', [\n    // JPG, WEBP, AVIF (default 100)\n    'quality' => 100,\n]);\n```\n\n### Utilities\n\n#### `getAspectRatio()`\n\nGets the image's current aspect ratio.\n\nReturns the aspect ratio as a float.\n\n#### `getExif()`\n\nGets the image's exif data.\n\nReturns an array of exif data or null if no data is available.\n\n#### `getHeight()`\n\nGets the image's current height.\n\nReturns the height as an integer.\n\n#### `getMimeType()`\n\nGets the mime type of the loaded image.\n\nReturns a mime type string.\n\n#### `getOrientation()`\n\nGets the image's current orientation.\n\nReturns a string: 'landscape', 'portrait', or 'square'\n\n#### `getResolution()`\n\nGets the image's current resolution in DPI.\n\nReturns an array of integers: [0 => 96, 1 => 96]\n\n#### `getWidth()`\n\nGets the image's current width.\n\nReturns the width as an integer.\n\n#### `hasImage()`\n\nChecks if the SimpleImage object has loaded an image.\n\nReturns a boolean.\n\n#### `reset()`\n\nDestroys the image resource.\n\nReturns a SimpleImage object.\n\n### Manipulation\n\n#### `autoOrient()`\n\nRotates an image so the orientation will be correct based on its exif data. It is safe to call this method on images that don't have exif data (no changes will be made).\nReturns a SimpleImage object.\n\n#### `bestFit($maxWidth, $maxHeight)`\n\nProportionally resize the image to fit inside a specific width and height.\n\n- `$maxWidth`* (int) - The maximum width the image can be.\n- `$maxHeight`* (int) - The maximum height the image can be.\n\nReturns a SimpleImage object.\n\n#### `crop($x1, $y1, $x2, $y2)`\n\nCrop the image.\n\n- $x1 - Top left x coordinate.\n- $y1 - Top left y coordinate.\n- $x2 - Bottom right x coordinate.\n- $y2 - Bottom right x coordinate.\n\nReturns a SimpleImage object.\n\n#### `fitToHeight($height)` (DEPRECATED)\n\nProportionally resize the image to a specific height.\n\n_This method was deprecated in version 3.2.2 and will be removed in version 4.0. Please use `resize(null, $height)` instead._\n\n- `$height`* (int) - The height to resize the image to.\n\nReturns a SimpleImage object.\n\n#### `fitToWidth($width)`  (DEPRECATED)\n\nProportionally resize the image to a specific width.\n\n_This method was deprecated in version 3.2.2 and will be removed in version 4.0. Please use `resize($width, null)` instead._\n\n- `$width`* (int) - The width to resize the image to.\n\nReturns a SimpleImage object.\n\n#### `flip($direction)`\n\nFlip the image horizontally or vertically.\n\n- `$direction`* (string) - The direction to flip: x|y|both\n\nReturns a SimpleImage object.\n\n#### `maxColors($max, $dither)`\n\nReduces the image to a maximum number of colors.\n\n- `$max`* (int) - The maximum number of colors to use.\n- `$dither` (bool) - Whether or not to use a dithering effect (default true).\n\nReturns a SimpleImage object.\n\n#### `overlay($overlay, $anchor, $opacity, $xOffset, $yOffset)`\n\nPlace an image on top of the current image.\n\n- `$overlay`* (string|SimpleImage) - The image to overlay. This can be a filename, a data URI, or a SimpleImage object.\n- `$anchor` (string) - The anchor point: 'center', 'top', 'bottom', 'left', 'right', 'top left', 'top right', 'bottom left', 'bottom right' (default 'center')\n- `$opacity` (float) - The opacity level of the overlay 0-1 (default 1).\n- `$xOffset` (int) - Horizontal offset in pixels (default 0).\n- `$yOffset` (int) - Vertical offset in pixels (default 0).\n- `$calculateOffsetFromEdge` (bool) - Calculate Offset referring to the edges of the image. $xOffset and $yOffset have no effect in center anchor. (default false).\n\nReturns a SimpleImage object.\n\n#### `resize($width, $height)`\n\nResize an image to the specified dimensions. If only one dimension is specified, the image will be resized proportionally.\n\n- `$width`* (int) - The new image width.\n- `$height`* (int) - The new image height.\n\nReturns a SimpleImage object.\n\n#### `resolution($res_x, $res_y)`\n\nChanges the resolution (DPI) of an image.\n\n- `$res_x`* (int) - The horizontal resolution, in DPI.\n- `$res_y` (int) - The vertical resolution, in DPI.\n\nReturns a SimpleImage object.\n\n#### `rotate($angle, $backgroundColor)`\n\nRotates the image.\n\n- `$angle`* (int) - The angle of rotation (-360 - 360).\n- `$backgroundColor` (string|array) - The background color to use for the uncovered zone area after rotation (default 'transparent').\n\nReturns a SimpleImage object.\n\n#### `text($text, $options, &$boundary)`\n\nAdds text to the image.\n\n- `$text*` (string) - The desired text.\n- `$options` (array) - An array of options.\n  - `fontFile`* (string) - The TrueType (or compatible) font file to use.\n  - `size` (int) - The size of the font in pixels (default 12).\n  - `color` (string|array) - The text color (default black).\n  - `anchor` (string) - The anchor point: 'center', 'top', 'bottom', 'left', 'right',\n    'top left', 'top right', 'bottom left', 'bottom right' (default 'center').\n  - `xOffset` (int) - The horizontal offset in pixels (default 0).\n  - `yOffset` (int) - The vertical offset in pixels (default 0).\n  - `shadow` (array) - Text shadow params.\n      - `x`* (int) - Horizontal offset in pixels.\n      - `y`* (int) - Vertical offset in pixels.\n      - `color`* (string|array) - The text shadow color.\n  - `calculateOffsetFromEdge` (bool) - Calculate Offset referring to the edges of the image (default false).\n  - `baselineAlign` (bool) - Align the text font with the baseline. (default true).\n- `$boundary` (array) - If passed, this variable will contain an array with coordinates that\n  surround the text: [x1, y1, x2, y2, width, height]. This can be used for calculating the\n  text's position after it gets added to the image.\n\nReturns a SimpleImage object.\n\n#### `thumbnail($width, $height, $anchor)`\n\nCreates a thumbnail image. This function attempts to get the image as close to the provided dimensions as possible, then crops the remaining overflow to force the desired size. Useful for generating thumbnail images.\n\n- `$width`* (int) - The thumbnail width.\n- `$height`* (int) - The thumbnail height.\n- `$anchor` (string) - The anchor point: 'center', 'top', 'bottom', 'left', 'right', 'top left', 'top right', 'bottom left', 'bottom right' (default 'center').\n\nReturns a SimpleImage object.\n\n###  Drawing\n\n#### `arc($x, $y, $width, $height, $start, $end, $color, $thickness)`\n\nDraws an arc.\n\n- `$x`* (int) - The x coordinate of the arc's center.\n- `$y`* (int) - The y coordinate of the arc's center.\n- `$width`* (int) - The width of the arc.\n- `$height`* (int) - The height of the arc.\n- `$start`* (int) - The start of the arc in degrees.\n- `$end`* (int) - The end of the arc in degrees.\n- `$color`* (string|array) - The arc color.\n- `$thickness` (int|string) - Line thickness in pixels or 'filled' (default 1).\n\nReturns a SimpleImage object.\n\n#### `border($color, $thickness)`\n\nDraws a border around the image.\n\n- `$color`* (string|array) - The border color.\n- `$thickness` (int) - The thickness of the border (default 1).\n\nReturns a SimpleImage object.\n\n#### `dot($x, $y, $color)`\n\nDraws a single pixel dot.\n\n- `$x`* (int) - The x coordinate of the dot.\n- `$y`* (int) - The y coordinate of the dot.\n- `$color`* (string|array) - The dot color.\n\nReturns a SimpleImage object.\n\n#### `ellipse($x, $y, $width, $height, $color, $thickness)`\n\nDraws an ellipse.\n\n- `$x`* (int) - The x coordinate of the center.\n- `$y`* (int) - The y coordinate of the center.\n- `$width`* (int) - The ellipse width.\n- `$height`* (int) - The ellipse height.\n- `$color`* (string|array) - The ellipse color.\n- `$thickness` (int|string) - Line thickness in pixels or 'filled' (default 1).\n\nReturns a SimpleImage object.\n\n#### `fill($color)`\n\nFills the image with a solid color.\n\n- `$color` (string|array) - The fill color.\n\nReturns a SimpleImage object.\n\n#### `line($x1, $y1, $x2, $y2, $color, $thickness)`\n\nDraws a line.\n\n- `$x1`* (int) - The x coordinate for the first point.\n- `$y1`* (int) - The y coordinate for the first point.\n- `$x2`* (int) - The x coordinate for the second point.\n- `$y2`* (int) - The y coordinate for the second point.\n- `$color` (string|array) - The line color.\n- `$thickness` (int) - The line thickness (default 1).\n\nReturns a SimpleImage object.\n\n#### `polygon($vertices, $color, $thickness)`\n\nDraws a polygon.\n\n- `$vertices`* (array) - The polygon's vertices in an array of x/y arrays. Example:\n  ```\n  [\n    ['x' => x1, 'y' => y1],\n    ['x' => x2, 'y' => y2],\n    ['x' => xN, 'y' => yN]\n  ]\n  ```\n- `$color`* (string|array) - The polygon color.\n- `$thickness` (int|string) - Line thickness in pixels or 'filled' (default 1).\n\nReturns a SimpleImage object.\n\n#### `rectangle($x1, $y1, $x2, $y2, $color, $thickness)`\n\nDraws a rectangle.\n\n- `$x1`* (int) - The upper left x coordinate.\n- `$y1`* (int) - The upper left y coordinate.\n- `$x2`* (int) - The bottom right x coordinate.\n- `$y2`* (int) - The bottom right y coordinate.\n- `$color`* (string|array) - The rectangle color.\n- `$thickness` (int|string) - Line thickness in pixels or 'filled' (default 1).\n\nReturns a SimpleImage object.\n\n#### `roundedRectangle($x1, $y1, $x2, $y2, $radius, $color, $thickness)`\n\nDraws a rounded rectangle.\n\n- `$x1`* (int) - The upper left x coordinate.\n- `$y1`* (int) - The upper left y coordinate.\n- `$x2`* (int) - The bottom right x coordinate.\n- `$y2`* (int) - The bottom right y coordinate.\n- `$radius`* (int) - The border radius in pixels.\n- `$color`* (string|array) - The rectangle color.\n- `$thickness` (int|string) - Line thickness in pixels or 'filled' (default 1).\n\nReturns a SimpleImage object.\n\n### Filters\n\n#### `blur($type, $passes)`\n\nApplies the blur filter.\n\n- `$type` (string) - The blur algorithm to use: 'selective', 'gaussian' (default 'gaussian').\n- `$passes` (int) - The number of time to apply the filter, enhancing the effect (default 1).\n\nReturns a SimpleImage object.\n\n#### `brighten($percentage)`\n\nApplies the brightness filter to brighten the image.\n\n- `$percentage`* (int) - Percentage to brighten the image (0 - 100).\n\nReturns a SimpleImage object.\n\n#### `colorize($color)`\n\nApplies the colorize filter.\n\n- `$color`* (string|array) - The filter color.\n\nReturns a SimpleImage object.\n\n#### `contrast($percentage)`\n\nApplies the contrast filter.\n\n- `$percentage`* (int) - Percentage to adjust (-100 - 100).\n\nReturns a SimpleImage object.\n\n#### `darken($percentage)`\n\nApplies the brightness filter to darken the image.\n\n- `$percentage`* (int) - Percentage to darken the image (0 - 100).\n\nReturns a SimpleImage object.\n\n#### `desaturate()`\n\nApplies the desaturate (grayscale) filter.\n\nReturns a SimpleImage object.\n\n#### `duotone($lightColor, $darkColor)`\n\nApplies the duotone filter to the image.\n\n- `$lightColor`* (string|array) - The lightest color in the duotone.\n- `$darkColor`* (string|array) - The darkest color in the duotone.\n\nReturns a SimpleImage object.\n\n#### `edgeDetect()`\n\nApplies the edge detect filter.\n\nReturns a SimpleImage object.\n\n#### `emboss()`\n\nApplies the emboss filter.\n\nReturns a SimpleImage object.\n\n#### `invert()`\n\nInverts the image's colors.\n\nReturns a SimpleImage object.\n\n#### `opacity()`\n\nChanges the image's opacity level.\n\n- `$opacity`* (float) - The desired opacity level (0 - 1).\n\nReturns a SimpleImage object.\n\n#### `pixelate($size)`\n\nApplies the pixelate filter.\n\n- `$size` (int) - The size of the blocks in pixels (default 10).\n\nReturns a SimpleImage object.\n\n#### `sepia()`\n\nSimulates a sepia effect by desaturating the image and applying a sepia tone.\n\nReturns a SimpleImage object.\n\n#### `sharpen($amount)`\n\nSharpens the image.\n\n- `$amount` (int) - Sharpening amount (1 - 100, default 50)\n\nReturns a SimpleImage object.\n\n#### `sketch()`\n\nApplies the mean remove filter to produce a sketch effect.\n\nReturns a SimpleImage object.\n\n### Color utilities\n\n#### `(static) adjustColor($color, $red, $green, $blue, $alpha)`\n\nAdjusts a color by increasing/decreasing red/green/blue/alpha values independently.\n\n- `$color`* (string|array) - The color to adjust.\n- `$red`* (int) - Red adjustment (-255 - 255).\n- `$green`* (int) - Green adjustment (-255 - 255).\n- `$blue`* (int) - Blue adjustment (-255 - 255).\n- `$alpha`* (float) - Alpha adjustment (-1 - 1).\n\nReturns an RGBA color array.\n\n#### `(static) darkenColor($color, $amount)`\n\nDarkens a color.\n\n- `$color`* (string|array) - The color to darken.\n- `$amount`* (int) - Amount to darken (0 - 255).\n\nReturns an RGBA color array.\n\n#### `extractColors($count = 10, $backgroundColor = null)`\n\nExtracts colors from an image like a human would do.â„¢ This method requires the third-party library \\League\\ColorExtractor. If you're using Composer, it will be installed for you automatically.\n\n- `$count` (int) - The max number of colors to extract (default 5).\n- `$backgroundColor` (string|array) - By default any pixel with alpha value greater than zero will be discarded. This is because transparent colors are not perceived as is. For example, fully transparent black would be seen white on a white background. So if you want to take transparency into account, you have to specify a default background color.\n\nReturns an array of RGBA colors arrays.\n\n#### `getColorAt($x, $y)`\n\nGets the RGBA value of a single pixel.\n\n- `$x`* (int) - The horizontal position of the pixel.\n- `$y`* (int) - The vertical position of the pixel.\n\nReturns an RGBA color array or false if the x/y position is off the canvas.\n\n#### `(static) lightenColor($color, $amount)`\n\nLightens a color.\n\n- `$color`* (string|array) - The color to lighten.\n- `$amount`* (int) - Amount to darken (0 - 255).\n\nReturns an RGBA color array.\n\n#### `(static) normalizeColor($color)`\n\nNormalizes a hex or array color value to a well-formatted RGBA array.\n\n- `$color`* (string|array) - A CSS color name, hex string, or an array [red, green, blue, alpha].\n\nYou can pipe alpha transparency through hex strings and color names. For example:\n\n  #fff|0.50 <-- 50% white\n  red|0.25 <-- 25% red\n\nReturns an array: [red, green, blue, alpha]\n\n### Exceptions\n\nSimpleImage throws standard exceptions when things go wrong. You should always use a try/catch block around your code to properly handle them.\n\n```php\n<?php\ntry {\n  $image = new \\claviska\\SimpleImage('image.jpeg')\n  // ...\n} catch(Exception $err) {\n  echo $err->getMessage();\n}\n```\n\nTo check for specific errors, compare `$err->getCode()` to the defined error constants.\n\n```php\n<?php\ntry {\n  $image = new \\claviska\\SimpleImage('image.jpeg')\n  // ...\n} catch(Exception $err) {\n  if($err->getCode() === $image::ERR_FILE_NOT_FOUND) {\n    echo 'File not found!';\n  } else {\n    echo $err->getMessage();\n  }\n}\n```\n\nAs a best practice, always use the defined constants instead of their integers values. The values will likely change in future versions, and WILL NOT be considered a breaking change.\n\n- `ERR_FILE_NOT_FOUND` - The specified file could not be found or loaded for some reason.\n- `ERR_FONT_FILE` - The specified font file could not be loaded.\n- `ERR_FREETYPE_NOT_ENABLED` - Freetype support is not enabled in your version of PHP.\n- `ERR_GD_NOT_ENABLED` - The GD extension is not enabled in your version of PHP.\n- `ERR_LIB_NOT_LOADED` - A required library has not been loaded.\n- `ERR_INVALID_COLOR` - An invalid color value was passed as an argument.\n- `ERR_INVALID_DATA_URI` - The specified data URI is not valid.\n- `ERR_INVALID_IMAGE` - The specified image is not valid.\n- `ERR_UNSUPPORTED_FORMAT` - The image format specified is not valid.\n- `ERR_WEBP_NOT_ENABLED` - WEBP support is not enabled in your version of PHP.\n- `ERR_WRITE` - Unable to write to the file system.\n- `ERR_INVALID_FLAG` - The specified flag key does not exist.\n\n### Useful Things To Know\n\n- Color arguments can be a CSS color name (e.g. `LightBlue`), a hex color string (e.g. `#0099dd`), or an RGB(A) array (e.g. `['red' => 255, 'green' => 0, 'blue' => 0, 'alpha' => 1]`).\n\n- When `$thickness` > 1, GD draws lines of the desired thickness from the center origin. For example, a rectangle drawn at [10, 10, 20, 20] with a thickness of 3 will actually be draw at [9, 9, 21, 21]. This is true for all shapes and is not a bug in the SimpleImage library.\n\n### Instance flags\n\nTweak the behavior of a SimpleImage instance by setting instance flag values with the `setFlag($key, $value)` method.\n\n```php\n$image = new \\claviska\\SimpleImage('image.jpeg')->setFlag(\"foo\", \"bar\");\n```\n\nYou can also pass an associative array to the SimpleImage constructor to set instance flags.\n\n```php\n$image = new \\claviska\\SimpleImage('image.jpeg', ['foo' => 'bar']);\n// .. or without an $image\n$image = new \\claviska\\SimpleImage(flags: ['foo' => 'bar']);\n```\n\n*Note: `setFlag()` throws an `ERR_INVALID_FLAG` exception if the key does not exist (no default value).*\n\n#### `sslVerify`\n\nSetting `sslVerify` to `false` (defaults to `true`) will make all images loaded over HTTPS forgo certificate peer validation. This is especially usefull for self-signed certificates.\n\n```php\n$image = new \\claviska\\SimpleImage('https://localhost/image.jpeg', ['sslVerify' => false]);\n// Would normally throw an OpenSSL exception, but is ignored with the sslVerify flag set to false.\n```\n\n## Differences from SimpleImage 2.x\n\n- Normalized color arguments (colors can be a CSS color name, hex color, or RGB(A) array).\n- Normalized alpha (opacity) arguments: 0 (transparent) - 1 (opaque)\n- Added text shadow to `text` method.\n- Added `fromString()` method to load images from strings.\n- Added `toString()` method to generate image strings.\n- Added `arc` method for drawing arcs.\n- Added `border` method for drawing borders.\n- Added `dot` method for drawing individual pixels.\n- Added `ellipse` method for drawing ellipses and circles.\n- Added `line` method for drawing lines.\n- Added `polygon` method for drawing polygons.\n- Added `rectangle` method for drawing rectangles.\n- Added `roundedRectangle` method for drawing rounded rectangles.\n- Added `adjustColor` method for modifying RGBA color channels to create relative color variations.\n- Added `darkenColor` method to darken a color.\n- Added `extractColors` method to get the most common colors from the image.\n- Added `getColorAt` method to get the RGBA values of a specific pixel.\n- Added `lightenColor` method to lighten a color.\n- Added `toDownload` method to force the image to download on the client's machine.\n- Added `duotone` filter to create duotone images.\n- Added `sharpen` method to sharpen the image.\n- Changed namespace from `abeautifulsite` to `claviska`.\n- Changed `create` method to `fromNew`.\n- Changed `load` method to `fromFile`.\n- Changed `load_base64` method to `fromDataUri`.\n- Changed `output` method to `toScreen`.x\n- Changed `output_base64` method to `toDataUri`.\n- Changed `save` method to `toFile`.\n- Changed `text` method to accept an array of options instead of tons of arguments.\n- Removed text stroke from `text` method because it produced dirty results and didn't support transparency.\n- Removed `smooth` method because its arguments in the PHP manual aren't documented well.\n- Removed deprecated method `adaptive_resize` (use `thumbnail` instead).\n- Removed `get_meta_data` (use `getExif`, `getHeight`, `getMime`, `getOrientation`, and `getWidth` instead).\n- Added [.editorconfig](http://editorconfig.org/) file. Please make sure your editor supports these settings before submitting contributions.\n- Switched from four spaces to two for indentations (sorry PHP-FIG!).\n- Switched from underscore_methods to camelCaseMethods.\n- Organized methods into groups based on function\n- Removed PHPDoc comments. At this time, I don't wish to incorporate them into the library.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.517578125,
          "content": "{\n  \"name\": \"claviska/simpleimage\",\n  \"description\": \"A PHP class that makes working with images as simple as possible.\",\n  \"license\": \"MIT\",\n  \"require\": {\n    \"php\": \">=8.0\",\n    \"ext-gd\": \"*\",\n    \"league/color-extractor\": \"0.4.*\"\n  },\n  \"authors\": [\n    {\n      \"name\": \"Cory LaViska\",\n      \"homepage\": \"http://www.abeautifulsite.net/\",\n      \"role\": \"Developer\"\n    }\n  ],\n  \"autoload\": {\n    \"psr-0\": {\n      \"claviska\": \"src/\"\n    }\n  },\n  \"require-dev\": {\n    \"laravel/pint\": \"^1.5\",\n    \"phpstan/phpstan\": \"^1.10\"\n  }\n}\n"
        },
        {
          "name": "composer.lock",
          "type": "blob",
          "size": 7.056640625,
          "content": "{\n    \"_readme\": [\n        \"This file locks the dependencies of your project to a known state\",\n        \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies\",\n        \"This file is @generated automatically\"\n    ],\n    \"content-hash\": \"eb94dc95686ec297093755af85d5e7dd\",\n    \"packages\": [\n        {\n            \"name\": \"league/color-extractor\",\n            \"version\": \"0.4.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/thephpleague/color-extractor.git\",\n                \"reference\": \"21fcac6249c5ef7d00eb83e128743ee6678fe505\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/thephpleague/color-extractor/zipball/21fcac6249c5ef7d00eb83e128743ee6678fe505\",\n                \"reference\": \"21fcac6249c5ef7d00eb83e128743ee6678fe505\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-gd\": \"*\",\n                \"php\": \"^7.3 || ^8.0\"\n            },\n            \"replace\": {\n                \"matthecat/colorextractor\": \"*\"\n            },\n            \"require-dev\": {\n                \"friendsofphp/php-cs-fixer\": \"~2\",\n                \"phpunit/phpunit\": \"^9.5\"\n            },\n            \"suggest\": {\n                \"ext-curl\": \"To download images from remote URLs if allow_url_fopen is disabled for security reasons\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"League\\\\ColorExtractor\\\\\": \"src\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Mathieu Lechat\",\n                    \"email\": \"math.lechat@gmail.com\",\n                    \"homepage\": \"http://matthecat.com\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"Extract colors from an image as a human would do.\",\n            \"homepage\": \"https://github.com/thephpleague/color-extractor\",\n            \"keywords\": [\n                \"color\",\n                \"extract\",\n                \"human\",\n                \"image\",\n                \"palette\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/thephpleague/color-extractor/issues\",\n                \"source\": \"https://github.com/thephpleague/color-extractor/tree/0.4.0\"\n            },\n            \"time\": \"2022-09-24T15:57:16+00:00\"\n        }\n    ],\n    \"packages-dev\": [\n        {\n            \"name\": \"laravel/pint\",\n            \"version\": \"v1.5.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/laravel/pint.git\",\n                \"reference\": \"e0a8cef58b74662f27355be9cdea0e726bbac362\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/laravel/pint/zipball/e0a8cef58b74662f27355be9cdea0e726bbac362\",\n                \"reference\": \"e0a8cef58b74662f27355be9cdea0e726bbac362\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-json\": \"*\",\n                \"ext-mbstring\": \"*\",\n                \"ext-tokenizer\": \"*\",\n                \"ext-xml\": \"*\",\n                \"php\": \"^8.0\"\n            },\n            \"require-dev\": {\n                \"friendsofphp/php-cs-fixer\": \"^3.14.4\",\n                \"illuminate/view\": \"^9.51.0\",\n                \"laravel-zero/framework\": \"^9.2.0\",\n                \"mockery/mockery\": \"^1.5.1\",\n                \"nunomaduro/larastan\": \"^2.4.0\",\n                \"nunomaduro/termwind\": \"^1.15.1\",\n                \"pestphp/pest\": \"^1.22.4\"\n            },\n            \"bin\": [\n                \"builds/pint\"\n            ],\n            \"type\": \"project\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"App\\\\\": \"app/\",\n                    \"Database\\\\Seeders\\\\\": \"database/seeders/\",\n                    \"Database\\\\Factories\\\\\": \"database/factories/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nuno Maduro\",\n                    \"email\": \"enunomaduro@gmail.com\"\n                }\n            ],\n            \"description\": \"An opinionated code formatter for PHP.\",\n            \"homepage\": \"https://laravel.com\",\n            \"keywords\": [\n                \"format\",\n                \"formatter\",\n                \"lint\",\n                \"linter\",\n                \"php\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/laravel/pint/issues\",\n                \"source\": \"https://github.com/laravel/pint\"\n            },\n            \"time\": \"2023-02-14T16:31:02+00:00\"\n        },\n        {\n            \"name\": \"phpstan/phpstan\",\n            \"version\": \"1.10.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phpstan/phpstan.git\",\n                \"reference\": \"a2ffec7db373d8da4973d1d62add872db5cd22dd\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phpstan/phpstan/zipball/a2ffec7db373d8da4973d1d62add872db5cd22dd\",\n                \"reference\": \"a2ffec7db373d8da4973d1d62add872db5cd22dd\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2|^8.0\"\n            },\n            \"conflict\": {\n                \"phpstan/phpstan-shim\": \"*\"\n            },\n            \"bin\": [\n                \"phpstan\",\n                \"phpstan.phar\"\n            ],\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"bootstrap.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"description\": \"PHPStan - PHP Static Analysis Tool\",\n            \"keywords\": [\n                \"dev\",\n                \"static analysis\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/phpstan/phpstan/issues\",\n                \"source\": \"https://github.com/phpstan/phpstan/tree/1.10.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/ondrejmirtes\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://github.com/phpstan\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/phpstan/phpstan\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2023-02-23T14:36:46+00:00\"\n        }\n    ],\n    \"aliases\": [],\n    \"minimum-stability\": \"stable\",\n    \"stability-flags\": [],\n    \"prefer-stable\": false,\n    \"prefer-lowest\": false,\n    \"platform\": {\n        \"php\": \">=8.0\",\n        \"ext-gd\": \"*\"\n    },\n    \"platform-dev\": [],\n    \"plugin-api-version\": \"2.3.0\"\n}\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}