{
  "metadata": {
    "timestamp": 1736711835889,
    "page": 145,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nuwave/lighthouse",
      "stars": 3390,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.0859375,
          "content": "coverage:\n  status:\n    project:\n      default:\n        only_pulls: true\ncomment: false\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2978515625,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\n\n[*.graphql]\nindent_size = 2\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.neon]\nindent_size = 2\n\n[{*.yml, *.yaml}]\nindent_size = 2\n\n[*.proto]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.60546875,
          "content": "* text=auto\n\n/.github export-ignore\n/benchmarks export-ignore\n/docs export-ignore\n/tests export-ignore\n/.codecov.yml export-ignore\n/.editorconfig export-ignore\n/.gitattributes export-ignore\n/.gitignore export-ignore\n/.php-cs-fixer.php export-ignore\n/CHANGELOG.md export-ignore\n/CONTRIBUTING.md export-ignore\n/docker-compose.yml export-ignore\n/logo.png export-ignore\n/Makefile export-ignore\n/netlify.toml export-ignore\n/node.dockerfile export-ignore\n/php.dockerfile export-ignore\n/phpbench.json export-ignore\n/phpstan.neon export-ignore\n/phpunit.xml.dist export-ignore\n/rector.php export-ignore\n/UPGRADE.md export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2353515625,
          "content": "# File system cruft\n.DS_Store\n\n# Individual per developer\n.env\n.idea\n.vscode\nphpunit.xml\n.gitpod.yml\n\n# Generated files\n.phpunit.result.cache\n.php-cs-fixer.cache\nbuild\nphpstan-tmp-dir\nproto-tmp\n\n# composer\ncomposer.phar\ncomposer.lock\nvendor\n"
        },
        {
          "name": ".php-cs-fixer.php",
          "type": "blob",
          "size": 0.77734375,
          "content": "<?php declare(strict_types=1);\n\nuse Tests\\LaravelPhpdocAlignmentFixer;\n\nuse function MLL\\PhpCsFixerConfig\\risky;\n\n$finder = PhpCsFixer\\Finder::create()\n    ->in(__DIR__)\n    ->name('*.php')\n    ->notPath('vendor')\n    ->notPath('phpstan-tmp-dir')\n    ->ignoreDotFiles(false)\n    ->ignoreVCS(true);\n\nreturn risky($finder, [\n    'general_phpdoc_annotation_remove' => [\n        'annotations' => [\n            'throws',\n        ],\n    ],\n    'trailing_comma_in_multiline' => [\n        'elements' => [\n            'arguments',\n            'arrays',\n            'match',\n            'parameters',\n        ],\n    ],\n    'fully_qualified_strict_types' => [\n        'phpdoc_tags' => [],\n    ],\n    'Laravel/laravel_phpdoc_alignment' => true,\n])->registerCustomFixers([new LaravelPhpdocAlignmentFixer()]);\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 93.4833984375,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\nYou can find and compare releases at the [GitHub release page](https://github.com/nuwave/lighthouse/releases).\n\n## Unreleased\n\n## v6.48.0\n\n### Added\n\n- Add `@bind` directive as a GraphQL analogue for Laravel's Route Model Binding https://github.com/nuwave/lighthouse/pull/2645\n\n## v6.47.1\n\n### Fixed\n\n- Cast model count to `int` in `CountModelsLoader` https://github.com/nuwave/lighthouse/pull/2646\n\n## v6.47.0\n\n### Added\n\n- Support Laravel Reverb as a subscriptions broadcasting driver https://github.com/nuwave/lighthouse/pull/2639\n\n## v6.46.0\n\n### Added\n\n- Allow `@show`, `@hide`, and `@feature` directives to be used on types, arguments and input types https://github.com/nuwave/lighthouse/pull/2638\n\n## v6.45.1\n\n### Fixed\n\n- Fix field middleware directive stub https://github.com/nuwave/lighthouse/commit/21edcfe4762b4b6f14134e8b5c636662f97443ff\n\n## v6.45.0\n\n### Added\n\n- Cache query validation results https://github.com/nuwave/lighthouse/pull/2603\n\n## v6.44.2\n\n### Fixed\n\n- Apply `@convertEmptyStringsToNull` to input fields when used upon fields https://github.com/nuwave/lighthouse/issues/2610\n\n## v6.44.1\n\n### Fixed\n\n- Ensure `deprecationReason` is set on arguments and input fields https://github.com/nuwave/lighthouse/pull/2609\n\n## v6.44.0\n\n### Added\n\n- Allow `@deprecated` directive on arguments and input fields https://github.com/nuwave/lighthouse/pull/2607\n\n## v6.43.1\n\n### Changed\n\n- Improve formatting of `_lighthouse_ide_helper.php` https://github.com/nuwave/lighthouse/pull/2604\n\n## v6.43.0\n\n### Added\n\n- Remove expired members from subscription topic stored in Redis set map https://github.com/nuwave/lighthouse/pull/2601\n\n## v6.42.2\n\n### Fixed\n\n- Restore correct function of nested `HasMany` and `MorphOne` mutations https://github.com/nuwave/lighthouse/pull/2591\n\n## v6.42.1\n\n### Changed\n\n- Improve validation message when using output types as inputs https://github.com/nuwave/lighthouse/pull/2594\n\n## v6.42.0\n\n### Added\n\n- Add `@hasOneThrough` directive https://github.com/nuwave/lighthouse/pull/2585\n\n## v6.41.1\n\n### Fixed\n\n- Handle errors thrown in lifecycle events per operation https://github.com/nuwave/lighthouse/pull/2584\n\n## v6.41.0\n\n### Added\n\n- Add `@withoutGlobalScopes` directive https://github.com/nuwave/lighthouse/pull/2577\n\n## v6.40.0\n\n### Added\n\n- Make `GraphQL::loadPersistedQuery` public https://github.com/nuwave/lighthouse/pull/2579\n\n## v6.39.0\n\n### Added\n\n- Add directives `@createMany`, `@updateMany` and `@upsertMany` to mutate multiple models at once https://github.com/nuwave/lighthouse/pull/2578\n\n### Changed\n\n- Split `MutationExecutorDirective` into `OneModelMutationDirective` and `ManyModelMutationDirective` https://github.com/nuwave/lighthouse/pull/2578\n\n## v6.38.1\n\n### Fixed\n\n- Correct decay value calculation in `@throttle` directive https://github.com/nuwave/lighthouse/pull/2573\n\n## v6.38.0\n\n### Added\n\n- Add option `builder` to `@limit` to apply an actual `LIMIT` clause https://github.com/nuwave/lighthouse/pull/2571\n\n## v6.37.1\n\n### Fixed\n\n- Eliminate redundant `Model::save()` calls in nested mutations https://github.com/nuwave/lighthouse/pull/2570\n\n## v6.37.0\n\n### Changed\n\n- Also report instances of `GraphQL\\Error\\Error` without previous exceptions in `ReportingErrorHandler` https://github.com/nuwave/lighthouse/pull/2567\n- Report all errors thrown during the execution of async mutations regardless of client-safety https://github.com/nuwave/lighthouse/pull/2567\n\n## v6.36.3\n\n### Fixed\n\n- Actually use raw attributes in comparison of paginated related models https://github.com/nuwave/lighthouse/pull/2550\n\n## v6.36.2\n\n### Changed\n\n- Compare raw attributes only when ensuring uniqueness of paginated related models https://github.com/nuwave/lighthouse/pull/2540\n\n## v6.36.1\n\n### Fixed\n\n- Native PHP Enums registered through the `TypeRegistry` may be used as morph type in nested `MorphTo` relations https://github.com/nuwave/lighthouse/pull/2544\n\n## v6.36.0\n\n### Added\n\n- Support Laravel 11 https://github.com/nuwave/lighthouse/pull/2508\n\n## v6.35.0\n\n### Added\n\n- Add `ClientSafeModelNotFoundException` to wrap original exception in `@can` and `@canFind` https://github.com/nuwave/lighthouse/pull/2522\n\n## v6.34.1\n\n### Fixed\n\n- Fix `Date` scalar trying to parse `Illuminate\\Support\\Carbon` as `string` https://github.com/nuwave/lighthouse/pull/2470\n\n## v6.34.0\n\n### Added\n\n- Merge directives from Scalar/Enum/Type/Input/Interface extension node into target node https://github.com/nuwave/lighthouse/pull/2512\n\n## v6.33.4\n\n### Fixed\n\n- Fix stub for type resolvers used in `lighthouse:union` and `lighthouse:interface` artisan commands https://github.com/nuwave/lighthouse/pull/2518\n\n## v6.33.3\n\n### Fixed\n\n- Allow custom model name in `@canFind` https://github.com/nuwave/lighthouse/pull/2515\n\n## v6.33.2\n\n### Fixed\n\n- Fix `ThrottleDirective` to not reuse the first `Request` it had encountered https://github.com/nuwave/lighthouse/pull/2511\n\n## v6.33.1\n\n### Fixed\n\n- Remove duplicate `CanArgs` from directive definition https://github.com/nuwave/lighthouse/pull/2510\n\n## v6.33.0\n\n### Added\n\n- Expose pivot field on pagination edge https://github.com/nuwave/lighthouse/pull/2464\n\n## v6.32.0\n\n### Added\n\n- Add `@async` directive https://github.com/nuwave/lighthouse/pull/2501\n\n### Changed\n\n- Move and rename `Nuwave\\Lighthouse\\Subscriptions\\Contracts\\ContextSerializer` to `Nuwave\\Lighthouse\\Support\\Contracts\\SerializesContext` https://github.com/nuwave/lighthouse/pull/2501\n- Do not bind `CreatesContext` and `CanStreamResponse` as singletons https://github.com/nuwave/lighthouse/pull/2501\n\n### Fixed\n\n- Fix parsing reserialized `LaravelEnumType` from `ResolveInfo::$variableValues` https://github.com/nuwave/lighthouse/pull/2501\n\n## v6.31.1\n\n### Fixed\n\n- Fix `@limit` directive definition\n\n## v6.31.0\n\n### Added\n\n- Add `InputFieldManipulator` directive interface https://github.com/nuwave/lighthouse/pull/2476\n\n## v6.30.0\n\n### Added\n\n- Add configuration option `parse_source_location` https://github.com/nuwave/lighthouse/pull/2499\n\n## v6.29.1\n\n### Fixed\n\n- Ensure `@rule` is never applied to argument lists themselves https://github.com/nuwave/lighthouse/pull/2489\n\n## v6.29.0\n\n### Fixed\n\n- Return empty results for pagination `first: 0` https://github.com/nuwave/lighthouse/pull/2480\n\n## v6.28.0\n\n### Added\n\n- Mark common pagination types as `@shareable` for Apollo Federation v2 https://github.com/nuwave/lighthouse/pull/2485\n\n## v6.27.0\n\n### Added\n\n- Split up `@can` directive into `@canFind`, `@canModel`, `@canQuery`, `@canResolved` and `@canRoot` https://github.com/nuwave/lighthouse/pull/2483\n- Added `action` and `returnValue` arguments to `@can*` family of directives https://github.com/nuwave/lighthouse/pull/2483\n- Allows using any objects in `@can*` family of directives https://github.com/nuwave/lighthouse/pull/2483\n\n## v6.26.1\n\n### Fixed\n\n- Add `scalar link__Import` and `enum link__Purpose` to `@link` definition https://github.com/nuwave/lighthouse/pull/2484\n\n## v6.26.0\n\n### Added\n\n- Support federated tracing https://github.com/nuwave/lighthouse/pull/2479\n\n## v6.25.0\n\n### Added\n\n- Add `@namespaced` directive for namespacing by separation of concerns https://github.com/nuwave/lighthouse/pull/2469\n\n## v6.24.0\n\n### Added\n\n- Add support for `extend union` syntax https://github.com/nuwave/lighthouse/pull/2468\n\n## v6.23.2\n\n### Fixed\n\n- Exclude unnecessary `extend schema` from federation schema printer https://github.com/nuwave/lighthouse/pull/2477\n\n## v6.23.1\n\n### Fixed\n\n- Fix `FieldResolver` directive stubs\n\n## v6.23.0\n\n### Added\n\n- Support Apollo Federation v2, except for federated tracing https://github.com/nuwave/lighthouse/pull/2460\n\n## v6.22.0\n\n### Added\n\n- Add option `root` to `@can` directive https://github.com/nuwave/lighthouse/pull/2452\n\n## v6.21.0\n\n### Added\n\n- Add option `ignoreNull` to `@where` directive https://github.com/nuwave/lighthouse/pull/2447\n\n## v6.20.0\n\n### Added\n\n- Allow `@cacheControl` directive on type level https://github.com/nuwave/lighthouse/pull/2451\n\n### Fixed\n\n- Inherit `@cacheControl` in pagination on fields https://github.com/nuwave/lighthouse/pull/2451\n\n## v6.19.0\n\n### Added\n\n- Allow customizing the definition of the root `Query` field `node` added by `@node` https://github.com/nuwave/lighthouse/pull/2449\n\n## v6.18.2\n\n### Fixed\n\n- Handle explicit `null` in `@notIn`, `@whereBetween` and `@whereNotBetween` directives https://github.com/nuwave/lighthouse/pull/2446\n\n## v6.18.1\n\n### Fixed\n\n- Handle explicit `null` in `@in` directive https://github.com/nuwave/lighthouse/pull/2445\n\n## v6.18.0\n\n### Added\n\n- Add directive `@feature` to conditionally add annotated elements based on the state of a feature using [Laravel Pennant](https://github.com/laravel/pennant) https://github.com/nuwave/lighthouse/pull/2442 \n\n## v6.17.0\n\n### Added\n\n- Improve stubs for PHP 8.2 and above https://github.com/nuwave/lighthouse/pull/2441\n\n## v6.16.2\n\n### Fixed\n\n- Fix `NOT_LIKE` operator in `@whereConditions` https://github.com/nuwave/lighthouse/pull/2432\n\n## v6.16.1\n\n### Fixed\n\n- Reset cached values of arguments in `BaseDirective::hydrate()` https://github.com/nuwave/lighthouse/pull/2430\n\n## v6.16.0\n\n### Changed\n\n- `ScoutEnhancer::enhanceBuilder()` will process not only the first but all `ScoutBuilderDirective` attached to argument https://github.com/nuwave/lighthouse/pull/2429\n- `ResolveInfo::enhanceBuilder()` will pass `$directiveFilter` into `ScoutEnhancer::enhanceBuilder()` https://github.com/nuwave/lighthouse/pull/2429\n\n## v6.15.0\n\n### Added\n\n- Ensure `@scope` supports custom query builders https://github.com/nuwave/lighthouse/pull/2423\n\n## v6.14.0\n\n### Added\n\n- Add support to generate tests when generating field classes https://github.com/nuwave/lighthouse/pull/2419\n\n## v6.13.0\n\n### Added\n\n- Validate arguments with list types do not use `@spread` https://github.com/nuwave/lighthouse/pull/2421\n\n## v6.12.0\n\n### Changed\n\n- Add `PaginatorInfo`, `SimplePaginatorInfo`, `PageInfo` only when required https://github.com/nuwave/lighthouse/pull/2413\n\n## v6.11.0\n\n### Added\n\n- Add option `findOrFail` to `@can` directive https://github.com/nuwave/lighthouse/pull/2416\n\n## v6.10.1\n\n### Fixed\n\n- Guess type names of programmatically registered types for models https://github.com/nuwave/lighthouse/pull/2415\n\n## v6.10.0\n\n### Added\n\n- Allow default model class resolution for `union` types https://github.com/nuwave/lighthouse/pull/2406\n\n## v6.9.2\n\n### Fixed\n\n- Fix `DirectiveLocator` assertion\n\n## v6.9.1\n\n### Fixed\n\n- Ensure built-in directives have the lowest priority in registration https://github.com/nuwave/lighthouse/pull/2403\n\n## v6.9.0\n\n### Added\n\n- Add feature toggles via `@hide` and `@show` directive https://github.com/nuwave/lighthouse/pull/2392\n\n## v6.8.1\n\n### Fixed\n\n- Fix `scalar.stub` return type\n\n## v6.8.0\n\n### Added\n\n- Add the ability to specify the disk the artisan command `lighthouse:print-schema` will write to via the `--disk` option https://github.com/nuwave/lighthouse/pull/2379\n\n## v6.7.0\n\n### Added\n\n- Simplify exposing root type `Query` in nested results https://github.com/nuwave/lighthouse/pull/2384\n\n## v6.6.1\n\n### Fixed\n\n- Add `Node` interface as soon as a type uses it with `@node` https://github.com/nuwave/lighthouse/pull/2387\n\n## v6.6.0\n\n### Fixed\n\n- Correctly exclude all built-in types when calling `lighthouse:ide-helper` with `--omit-built-in` flag https://github.com/nuwave/lighthouse/pull/2376\n\n## v6.5.0\n\n### Added\n\n- Add `Nuwave\\Lighthouse\\Schema\\AST\\ASTHelper::addDirectiveToNode()` to simplify dynamic addition of directives https://github.com/nuwave/lighthouse/pull/2369\n\n## v6.4.0\n\n### Added\n\n- Allow customizing query complexity calculation of `@paginate` with argument `complexityResolver` https://github.com/nuwave/lighthouse/pull/2372\n\n## v6.3.1\n\n### Fixed\n\n- Leverage relations for resolving composite object `@key` in default model entity resolver for federation\n\n## v6.3.0\n\n### Added\n\n- Hydrate external fields for models resolved from representations in federation https://github.com/nuwave/lighthouse/pull/2366\n\n## v6.2.1\n\n### Fixed\n\n- Fixed resolving composite object `@key` in default model entity resolver for federation https://github.com/nuwave/lighthouse/pull/2365\n\n## v6.2.0\n\n### Changed\n\n- Automatically set up test traits `RefreshSchemaCache` and `TestsSubscriptions`\n\n## v6.1.0\n\n### Added\n\n- Add option `--omit-built-in` to `lighthouse:ide-helper` to avoid duplicate built-in definitions https://github.com/nuwave/lighthouse/pull/2362\n\n## v6.0.0\n\n### Changed\n\n- Use the strongest possible native types over PHPDocs\n- Use `declare(strict_types=1)`\n- Add validation support to `Paginator` with `resolver` mode\n- Pass resolver arguments to `FieldBuilderDirective::handleFieldBuilder()` https://github.com/nuwave/lighthouse/pull/2234\n- Expected resolver arguments in `ResolveInfo::enhanceBuilder()`\n- Pass the path array to `CacheKeyAndTags::key()` https://github.com/nuwave/lighthouse/pull/2176\n- Require implementations of `BatchedEntityResolver` to maintain the keys given in `array $representations` https://github.com/nuwave/lighthouse/pull/2286\n- Require filter directives such as `@whereKey` in `@delete`, `@forceDelete` and `@restore` https://github.com/nuwave/lighthouse/pull/2289\n- Subscriptions can now be filtered via `$subscriber->socket_id` and `request()->header('X-Socket-ID')` https://github.com/nuwave/lighthouse/pull/2298\n- Make pagination argument `first` non-nullable\n- Calculate complexity for `@paginate` according to the number of items requested\n- Require argument `resolver` in directive `@complexity`\n- Move interface `Nuwave\\Lighthouse\\Support\\Contracts\\GlobalId` to `Nuwave\\Lighthouse\\GlobalId\\GlobalId`\n- Use union type for `$id` argument in `NodeDirective`\n- Replace `Arr::first(array_keys())` with `array_key_first()` in `OrderByDirective`\n- Limit constructor argument `$paginationType` in `PaginationType` to literal constant values\n- Change visibility of `BaseDirective::directiveHasArgument` from `public` to `protected`\n- Replace `Illuminate\\Database\\DatabaseManager` with `Illuminate\\Database\\ConnectionResolverInterface` in `RelationDirective`\n- Replace `DirectiveLocator::beforeLast` with `Str::beforeLast`\n- Default `subscriptions.exclude_empty` to `true`\n- Allow `FieldManipulator` and `ArgManipulator` directives on interfaces https://github.com/nuwave/lighthouse/pull/1955\n- Apply argument transformation only once per field https://github.com/nuwave/lighthouse/pull/1706\n- Expect `FieldResolver::resolveField()` to return resolver function directly https://github.com/nuwave/lighthouse/pull/1706\n- Simplify `FieldMiddleware` directive interface https://github.com/nuwave/lighthouse/pull/1706\n- Rename configuration option `schema.register` to `schema_path`\n- Restructure cache related configuration options\n- Register all non-user namespaces through `RegisterDirectiveNamespaces` event https://github.com/nuwave/lighthouse/pull/2337\n- Guard default configuration options in `lighthouse.php` allows multiple guards https://github.com/nuwave/lighthouse/pull/2345\n- Make `@auth` and `@whereAuth` support multiple guards https://github.com/nuwave/lighthouse/pull/2345\n- Make `Illuminate\\Http\\Request` optional in `Nuwave\\Lighthouse\\Support\\Contracts\\GraphQLContext` https://github.com/nuwave/lighthouse/pull/2353\n- Move namespace `Nuwave\\Lighthouse\\Support\\Http` to `Nuwave\\Lighthouse\\Http` https://github.com/nuwave/lighthouse/pull/2358\n\n### Fixed\n\n- Return proper error for unknown types in variable definitions\n- Ensure `_entities` maintains order of representations in result https://github.com/nuwave/lighthouse/pull/2286\n- Allow combining `@can` with non-default `@guard` https://github.com/nuwave/lighthouse/pull/2276\n- Fix error message when failing to find class in namespace https://github.com/nuwave/lighthouse/pull/2342\n- Prevent regression to simple paginator type on fields using `@cache` directive https://github.com/nuwave/lighthouse/issues/2354\n\n### Added\n\n- Add method `TypeRegistry::search()` that maybe finds a type with a given name\n- Decode fields with directive `@globalId` in federation model entity resolver\n- Add `GraphQLContext:: setUser(?Authenticatable $user): void`\n- Add directive `@whereKey` to filter Models by their primary key https://github.com/nuwave/lighthouse/pull/2289\n- Allow directive `@where` on fields https://github.com/nuwave/lighthouse/pull/2306\n- Allow passing route parameters in `MakeGraphQLRequests` test methods https://github.com/nuwave/lighthouse/pull/2333\n- Add subscription assertion methods in `MakesGraphQLRequests` and `TestResponseMixin` and docs in phpunit integration section https://github.com/nuwave/lighthouse/pull/2343\n- Allow `laragraph/utils:^2` https://github.com/nuwave/lighthouse/pull/2356\n- Add directives `@whereNull` and `@whereNotNull` https://github.com/nuwave/lighthouse/pull/2357\n- Add configurable namespace to allow custom non-root type field resolvers without FQN https://github.com/nuwave/lighthouse/pull/2351\n\n### Removed\n\n- Remove mixin `TestResponse::assertGraphQLErrorCategory()`\n- Remove class `Nuwave\\Lighthouse\\Exceptions\\GenericException`\n- Remove error extension field `category`\n- Remove interface `Nuwave\\Lighthouse\\Exceptions\\RendersErrorsExtensions`\n- Remove `Nuwave\\Lighthouse\\Execution\\ExtensionErrorHandler`\n- Remove support for PHP 7.2, 7.3, 7.4\n- Remove support for Laravel 5, 6, 7, 8\n- Remove `Serializable` implementation\n- Remove trait `ClearsSchemaCache`\n- Remove config option `lighthouse.unbox_bensampo_enum_enum_instances`\n- Remove `ArgumentSet::enhanceBuilder()`, use `ResolveInfo::enhanceBuilder()`\n- Remove the `globalId` argument from `@delete`, `@forceDelete` and `@restore` https://github.com/nuwave/lighthouse/pull/2289\n- Remove `MockResolver`\n- Remove deprecated `BatchLoader::forgetInstances()` in `GraphQL`\n- Remove method check for `Illuminate\\Foundation\\Exceptions\\Handler::renderable`\n- Remove setting `non_null_pagination_results` and always behave as if it were `true`\n- Remove `Nuwave\\Lighthouse\\Subscriptions\\Contracts\\StoresSubscriptions::subscriberByRequest()`\n- Remove deprecated methods from `FieldValue`\n- Remove deprecated `GraphQL::executeQuery()` and `GraphQL::prepSchema()`\n- Remove `@field` directive argument `args` https://github.com/nuwave/lighthouse/pull/1706\n- Remove schema caching v1 https://github.com/nuwave/lighthouse/pull/2321\n- Do not register `ScoutServiceProvider` by default\n- Remove alias/Facade `graphql`\n- Remove subscriptions version 1\n- Remove `MiddlewareAdapter` https://github.com/nuwave/lighthouse/pull/2358\n\n## v5.72.0\n\n### Added\n\n- Add configuration option `parse_source_location` https://github.com/nuwave/lighthouse/pull/2498\n\n## v5.71.0\n\n### Added\n\n- Support Laravel 10\n\n## v5.70.3\n\n### Fixed\n\n- Allow `\\Illuminate\\Http\\UploadedFile` in test helper `multipartGraphQL()` argument `array $files`\n\n## v5.70.2\n\n### Fixed\n\n- Fix batch loading relations of parents that were partially cached https://github.com/nuwave/lighthouse/issues/2269\n\n## v5.70.1\n\n### Fixed\n\n- Fix batch loading a paginated BelongsToMany relation with duplicates https://github.com/nuwave/lighthouse/pull/2277\n\n## v5.70.0\n\n### Added\n\n- Allow configuring regular expression constraints for the registered route with `lighthouse.route.where`\n\n## v5.69.1\n\n### Fixed\n\n- Wrap base `ResolveInfo` class and extend it with `public ArgumentSet $argumentSet` in response to PHP 8.2 deprecating dynamic properties\n\n## v5.69.0\n\n### Added\n\n- Add argument `builder` to directive `@aggregate` https://github.com/nuwave/lighthouse/pull/2255\n\n## v5.68.1\n\n### Fixed\n\n- Avoid duplicated data in relation directives with paginator with non-unique foreign keys https://github.com/nuwave/lighthouse/pull/2252\n\n## v5.68.0\n\n### Added\n\n- Allow interfaces to implement interfaces https://github.com/nuwave/lighthouse/pull/2248\n\n### Fixed\n\n- Mark `@clearCache` directive `repeatable` https://github.com/nuwave/lighthouse/pull/2243\n\n## v5.67.0\n\n### Added\n\n- Throw on unsafe usage of `@can` directive argument `resolved` on mutations https://github.com/nuwave/lighthouse/pull/2238\n\n## v5.66.0\n\n### Added\n\n- Support returning data in a `Paginator` from option `resolver` in `@paginator` directive https://github.com/nuwave/lighthouse/pull/2232\n\n## v5.65.0\n\n### Added\n\n- Validate only one of any mutually exclusive directive arguments is defined https://github.com/nuwave/lighthouse/pull/2233\n\n## v5.64.1\n\n### Fixed\n\n- Handle unset properties in `field_middleware` directives https://github.com/nuwave/lighthouse/pull/2224\n\n## v5.64.0\n\n### Changed\n\n- Allow requests with header `X-Requested-With: XMLHttpRequest` in `EnsureXHR` middleware https://github.com/nuwave/lighthouse/pull/2221\n\n## v5.63.1\n\n### Fixed\n\n- Fix GraphQL enum names generation from column names containing symbols https://github.com/nuwave/lighthouse/pull/2219\n\n## v5.63.0\n\n### Added\n\n- Allow easily overwriting enum description generation from `bensampo/laravel-enum` https://github.com/nuwave/lighthouse/pull/2218\n\n## v5.62.0\n\n### Changed\n\n- Extract uploaded file name calculation to method in `@upload` directive https://github.com/nuwave/lighthouse/pull/2215\n\n## v5.61.0\n\n### Added\n\n- Add `@upload` directive https://github.com/nuwave/lighthouse/pull/2121\n\n## v5.60.0\n\n### Added\n\n- Allow configuring `security.disable_introspection` through the env variable `LIGHTHOUSE_SECURITY_DISABLE_INTROSPECTION` https://github.com/nuwave/lighthouse/pull/2205\n\n## v5.59.0\n\n### Added\n\n- Open `EnsureXHR` middleware for extension https://github.com/nuwave/lighthouse/pull/2202\n\n## v5.58.2\n\n### Fixed\n\n- Clean duplicate `@param` in `field_full.stub` https://github.com/nuwave/lighthouse/pull/2198\n\n## v5.58.1\n\n### Fixed\n\n- Allow pagination amount to be 0 https://github.com/nuwave/lighthouse/pull/2105\n\n## v5.58.0\n\n### Added\n\n- Add description generation to `LaravelEnumType` based on `BenSampo\\Enum\\Enum::getClassDescription()` https://github.com/nuwave/lighthouse/pull/2177\n\n## v5.57.6\n\n### Fixed\n\n- Fix `@convertEmptyStringsToNull` on fields and matrices https://github.com/nuwave/lighthouse/pull/2142\n\n## v5.57.5\n\n### Fixed\n\n- Fix directive option `model` on schema elements using built-in types https://github.com/nuwave/lighthouse/pull/2196\n\n## v5.57.4\n\n### Fixed\n\n- Respect explicit `maxCount: null` or `defaultCount: null` in pagination directives over config `lighthouse.pagination` https://github.com/nuwave/lighthouse/pull/2193\n\n## v5.57.3\n\n### Fixed\n\n- Fix cursor pagination always returning the first page when no fields from the `pageInfo` are requested https://github.com/nuwave/lighthouse/pull/2190\n\n## v5.57.2\n\n### Fixed\n\n- Allow returning `Laravel\\Scout\\Builder` from custom `builder` in `@all` and `@paginate` https://github.com/nuwave/lighthouse/pull/2183\n\n## v5.57.1\n\n### Fixed\n\n- Handle missing models in `@can` with option `resolved` https://github.com/nuwave/lighthouse/pull/2187\n\n## v5.57.0\n\n### Added\n\n- Allow checking policies against resolved models in `@can` https://github.com/nuwave/lighthouse/pull/2159\n\n### Fixed\n\n- Fix static analysis error in testing traits https://github.com/nuwave/lighthouse/pull/2180\n\n## v5.56.0\n\n### Added\n\n- Implement `@hasManyThrough` directive https://github.com/nuwave/lighthouse/pull/2178\n\n## v5.55.1\n\n### Fixed\n\n- Always register `TestingServiceProvider` in order to ensure macros are recognized by Larastan https://github.com/nuwave/lighthouse/pull/2171\n\n## v5.55.0\n\n### Changed\n\n- `@paginate` directive will use a simple pagination strategy when the paginator info is not requested https://github.com/nuwave/lighthouse/pull/2170\n\n## v5.54.0\n\n### Changed\n\n- Cache related code moves to the cache namespace, add new contract `CacheKeyAndTags` https://github.com/nuwave/lighthouse/pull/2162\n\n## v5.53.0\n\n### Changed\n\n- Include field that produced a `RateLimitException` in its message https://github.com/nuwave/lighthouse/pull/2149\n\n## v5.52.1\n\n### Fixed\n\n- Show proper validation error when referencing standard types in `union` https://github.com/nuwave/lighthouse/pull/2157\n\n## v5.52.0\n\n### Added\n\n- Allow pagination types for `@morphToMany` https://github.com/nuwave/lighthouse/pull/2154\n\n## v5.51.1\n\n### Fixed\n\n- Consider `@rename` when picking the value of a key in `@cache` https://github.com/nuwave/lighthouse/pull/2155\n\n## v5.51.0\n\n### Added\n\n- Add `columns` and `distinct` args to `@count` directive https://github.com/nuwave/lighthouse/pull/2138\n\n## v5.50.0\n\n### Added\n\n- Add `@cacheControl` directive https://github.com/nuwave/lighthouse/pull/2136\n\n## v5.49.0\n\n### Added\n\n- Provide additional information about detected usages of deprecated elements https://github.com/nuwave/lighthouse/pull/2141\n\n## v5.48.2\n\n### Fixed\n\n- Allow `@cacheKey` on field definition https://github.com/nuwave/lighthouse/pull/2131\n\n## v5.48.1\n\n### Fixed\n\n- Omit non-nullable arguments in `@convertEmptyStringsToNull` https://github.com/nuwave/lighthouse/pull/2130\n\n## v5.48.0\n\n### Changed\n\n- Generate classes as `final` through artisan commands https://github.com/nuwave/lighthouse/pull/2127\n\n## v5.47.1\n\n### Fixed\n\n- `RelationDirective`/`batchload_relations` will consider `null` and default connection name the same connection https://github.com/nuwave/lighthouse/pull/2125\n\n## v5.47.0\n\n### Added\n\n- Add `@convertEmptyStringsToNull` directive https://github.com/nuwave/lighthouse/pull/2123\n\n### Fixed\n\n- Allow returning `Relation` from custom builder on `@all` and `@paginate` directive https://github.com/nuwave/lighthouse/pull/2120\n\n## v5.46.2\n\n### Fixed\n\n- Respect non-default primary key in nested one-to-many relations https://github.com/nuwave/lighthouse/pull/2119\n\n## v5.46.1\n\n### Fixed\n\n- Distinguish between client-safe and non-client-safe errors in `TestResponse::assertGraphQLError()` \n\n## v5.46.0\n\n### Added\n\n- Add method `TestResponse::assertGraphQLDebugMessage()` to test internal errors https://github.com/nuwave/lighthouse/pull/2117\n\n## v5.45.4\n\n### Fixed\n\n- Revert breaking schema change in generate pagination types https://github.com/nuwave/lighthouse/pull/2104\n\n## v5.45.3\n\n### Fixed\n\n- Annotate generated schema with correct model in paginated relations https://github.com/nuwave/lighthouse/pull/2093\n\n## v5.45.2\n\n### Fixed\n\n- Fix definition of `@clearCache` argument `idSource` https://github.com/nuwave/lighthouse/pull/2100\n\n## v5.45.1\n\n### Fixed\n\n- Fix `mget` returning false for entries https://github.com/nuwave/lighthouse/pull/2095\n\n## v5.45.0\n\n### Added\n\n- Add `@drop` directive to ignore incoming values https://github.com/nuwave/lighthouse/pull/2092\n\n## v5.44.1\n\n### Changed\n\n- Expire query cache after one day by default https://github.com/nuwave/lighthouse/pull/2089\n\n## v5.44.0\n\n### Changed\n\n- Register artisan commands not only when running in console https://github.com/nuwave/lighthouse/pull/2088\n\n## v5.43.0\n\n### Added\n\n- Allow lazy registration of types https://github.com/nuwave/lighthouse/pull/2086\n\n## v5.42.3\n\n### Fixed\n\n- Improve error message when passing non-existing class-string to `LaravelEnumType`\n\n## v5.42.2\n\n### Fixed\n\n- Handle invalid subscriber cache entries from redis https://github.com/nuwave/lighthouse/pull/2084\n\n## v5.42.1\n\n### Fixed\n\n- Normalize rules input to ensure Laravel 9 support https://github.com/nuwave/lighthouse/pull/2070\n\n## v5.42.0\n\n### Added\n\n- Batched federation entity resolvers https://github.com/nuwave/lighthouse/pull/2043\n\n## v5.41.0\n\n### Added\n\n- Add testing trait `RefreshesSchemaCache` https://github.com/nuwave/lighthouse/pull/2076\n\n### Fixed\n\n- Add proper error handling for invalid schema cache file contents https://github.com/nuwave/lighthouse/pull/2076\n\n### Deprecated\n\n- Deprecate testing trait `ClearsSchemaCache` https://github.com/nuwave/lighthouse/pull/2076\n\n## v5.40.1\n\n### Fixed\n\n- Properly handle any kind of deferred resolved value https://github.com/nuwave/lighthouse/pull/2064\n\n## v5.40.0\n\n### Added\n\n- Support Laravel 9\n\n## v5.39.2\n\n### Fixed\n\n- Handle expired subscriber keys in `RedisStorageManager::subscribersByTopic()` https://github.com/nuwave/lighthouse/issues/2035\n\n## v5.39.1\n\n### Fixed\n\n- Remove unused configuration option `batched_queries` https://github.com/nuwave/lighthouse/issues/2046\n\n## v5.39.0\n\n### Added\n\n- Add field `hasMorePages` for pagination type `SIMPLE` https://github.com/nuwave/lighthouse/pull/2051\n\n## v5.38.2\n\n### Fixed\n\n- Only shortcut foreign key selection if `shortcut_foreign_key_selection` is enabled in `lighthouse.php` https://github.com/nuwave/lighthouse/pull/2049\n\n## v5.38.1\n\n### Fixed\n\n- Consider `transactional_mutations` in `@delete`, `@forceDelete` and `@restore` https://github.com/nuwave/lighthouse/pull/2050\n\n## v5.38.0\n\n### Added\n\n- Detect usage of deprecated elements in queries https://github.com/nuwave/lighthouse/pull/2004\n\n## v5.37.2\n\n### Fixed\n\n- Fix `EnsureXHR` middleware to handle additional fields in the `Content-Type` header https://github.com/nuwave/lighthouse/pull/2036\n- Fix `EnsureXHR` middleware to handle method override via `_method` parameter https://github.com/nuwave/lighthouse/pull/2036\n\n## v5.37.1\n\n### Fixed\n\n- Separate eager loaded relations for fields with aliases https://github.com/nuwave/lighthouse/pull/2019\n\n## v5.37.0\n\n### Changed\n\n- Improve default schema https://github.com/nuwave/lighthouse/pull/2032\n\n## v5.36.0\n\n### Added\n\n- Allow caching parsed query strings https://github.com/nuwave/lighthouse/pull/2017\n- Support Automatic Persisted Queries https://github.com/nuwave/lighthouse/pull/2017\n\n### Deprecated\n\n- Deprecate `Nuwave\\Lighthouse\\GraphQL::executeQuery()` https://github.com/nuwave/lighthouse/pull/2017\n\n## v5.35.3\n\n### Fixed\n\n- Fix `thecodingmachine/safe` version constraint\n\n### Fixed\n\n## v5.35.2\n\n### Fixed\n\n- Ensure compatibility with `thecodingmachine/safe:2` https://github.com/nuwave/lighthouse/pull/2028\n\n## v5.35.1\n\n### Fixed\n\n- Fix partitioning of arguments where the model has a non-relation method returning primitive https://github.com/nuwave/lighthouse/pull/2026\n\n## v5.35.0\n\n### Added\n\n- Shortcut `@belongsTo` and `@morphTo` if the client only selects the ID of the relation\n\n## v5.34.0\n\n### Added\n\n- Allow marking `enum` values derived from `bensampo/laravel-enum` as `@deprecated` through PHPDoc https://github.com/nuwave/lighthouse/pull/2025\n\n## v5.33.1\n\n### Fixed\n\n- Fix ASTCache with `LIGHTHOUSE_CACHE_VERSION=1` in env https://github.com/nuwave/lighthouse/pull/2020\n\n## v5.33.0\n\n### Added\n\n- Add `@clearCache` directive that clears a resolver cache by tags https://github.com/nuwave/lighthouse/pull/1931\n\n### Fixed\n\n- Do not change capitalization of types and fields in cache keys https://github.com/nuwave/lighthouse/pull/1931\n- Add hidden config option `lighthouse.cache.tags` in `config/lighthouse.php` https://github.com/nuwave/lighthouse/pull/1931\n- Set up correct authentication context for subscriptions with `@guard` fields https://github.com/nuwave/lighthouse/pull/1769\n\n### Changed\n\n- Include empty placeholder for parent cache key in root fields to ensure predictable cache key https://github.com/nuwave/lighthouse/pull/1931\n- Prefix all generate cache keys or tags with `lighthouse` https://github.com/nuwave/lighthouse/pull/1931\n\n## v5.32.0\n\n### Added\n\n- Added middleware `Nuwave\\Lighthouse\\Support\\Http\\Middleware\\EnsureXHR` to mitigate CSRF attacks without Laravel Sanctum https://github.com/nuwave/lighthouse/pull/2013\n\n## v5.31.3\n\n### Fixed\n\n- Use `StartExecution` event to determine per-operation Tracing timestamps https://github.com/nuwave/lighthouse/pull/2009\n\n## v5.31.2\n\n### Fixed\n\n- Trigger model events on nested mutation disconnect of one to many relationships https://github.com/nuwave/lighthouse/pull/2008\n\n## v5.31.1\n\n### Fixed\n\n- Ensure `_ide_helper.php` works as PHPStan stub file https://github.com/nuwave/lighthouse/pull/2006\n\n## v5.31.0\n\n### Added\n\n- Add method `assertGraphQLError()` to `TestResponse` mixin https://github.com/nuwave/lighthouse/pull/2005\n\n## v5.30.0\n\n### Added\n\n- Mixin method `assertGraphQLErrorFree()` to `\\Illuminate\\Testing\\TestResponse`\n\n### Fixed\n\n- Add missing types to `programmatic-types.graphql` in artisan command `lighthouse:ide-helper`\n\n## v5.29.0\n\n### Added\n\n- Add ability to provide custom handler for `@whereConditions` and `@whereHasConditions` https://github.com/nuwave/lighthouse/pull/2001\n\n## v5.28.1\n\n### Added\n\n- Improve error message when calling `TestResponse::assertGraphQLErrorMessage()` on successful response\n\n## v5.28.0\n\n### Added\n\n- Allow clients to order a list of models by an aggregated value of their relations with `@orderBy` https://github.com/nuwave/lighthouse/pull/1848\n\n## v5.27.3\n\n### Fixed\n\n- Prevent possible `Undefined array key 0` error when there's an interface implemented by two renamed models https://github.com/nuwave/lighthouse/pull/1997\n\n## v5.27.2\n\n### Fixed\n\n- Prevent `Undefined array key` error when using cache version 2 and not having all version 1 configuration present https://github.com/nuwave/lighthouse/pull/1994\n\n## v5.27.1\n\n### Changed\n\n- Regenerate cache when calling `php artisan lighthouse:cache` https://github.com/nuwave/lighthouse/pull/1990\n\n## v5.27.0\n\n### Fixed\n\n- Avoid PHP 8.1 deprecation warning by implementing `__serialize()` and `__unserialize()` https://github.com/nuwave/lighthouse/pull/1987 \n\n### Deprecated\n\n- Deprecate `Serializable` implementation in favor of magic methods https://github.com/nuwave/lighthouse/pull/1987\n\n## v5.26.1\n\n### Changed\n\n- Improve error message when failing to find classes in namespaces https://github.com/nuwave/lighthouse/pull/1983\n\n## v5.26.0\n\n### Added\n\n- Allow specifying headers in `MakesGraphQLRequests` and `MakesGraphQLRequestsLumen` test helpers\n- Render `GraphQL\\Error\\ClientAware` exceptions outside GraphQL context with extensions content\n\n### Fixed\n\n- Do not batchload relations with different database connections\n\n## v5.25.1\n\n### Fixed\n\n- Consider renamed models in default type resolver https://github.com/nuwave/lighthouse/pull/1967\n\n## v5.25.0\n\n### Added\n\n- Add setting `unbox_bensampo_enum_enum_instances` to turn off `BenSampo\\Enum\\Enum` unboxing https://github.com/nuwave/lighthouse/pull/1971\n\n### Deprecated\n\n- Deprecate `BenSampo\\Enum\\Enum` unboxing https://github.com/nuwave/lighthouse/pull/1971\n\n## v5.24.0\n\n### Added\n\n- Add `Nuwave\\Lighthouse\\Support\\Contracts\\ComplexityResolverDirective` interface to allow\n  overwriting the default query complexity calculation https://github.com/nuwave/lighthouse/pull/1947\n- Allow omitting `name` in `@scope` by defaulting to the argument name https://github.com/nuwave/lighthouse/pull/1957\n\n### Changed\n\n- Lazily resolve field type https://github.com/nuwave/lighthouse/pull/1950\n\n### Fixed\n\n- Ensure non-pagination related arguments called `first` do not mistakenly increase `@complexity` https://github.com/nuwave/lighthouse/pull/1947\n\n### Deprecated\n\n- Deprecate methods to set a query complexity resolver through `Nuwave\\Lighthouse\\Schema\\Values\\FieldValue` https://github.com/nuwave/lighthouse/pull/1947\n- Deprecate smart methods in `Nuwave\\Lighthouse\\Schema\\Values\\FieldValue` https://github.com/nuwave/lighthouse/pull/1951\n\n## v5.23.1\n\n### Fixed\n\n- Apply `@spread` to inputs nested within lists https://github.com/nuwave/lighthouse/pull/1944\n\n## v5.23.0\n\n### Added\n\n- Add `--federation` option to `lighthouse:print-schema` command to print the schema\n  with federation directives and without federation spec additions, like `_service.sdl` https://github.com/nuwave/lighthouse/pull/1932\n\n## v5.22.5\n\n### Fixed\n\n- Allow Laravel default guard to be `null` for applications that do not use auth at all\n\n## v5.22.4\n\n### Fixed\n\n- Fall back to Laravel default guard if Lighthouse default is undefined https://github.com/nuwave/lighthouse/pull/1930\n\n### Changed\n\n- Move authentication and authorization functionality to `Nuwave\\Lighthouse\\Auth` and a dedicated `AuthServiceProvider` https://github.com/nuwave/lighthouse/pull/1930\n\n## v5.22.3\n\n### Fixed\n\n- Make `TestReponse::assertGraphQLValidationError()` work for fields with multiple messages https://github.com/nuwave/lighthouse/pull/1926\n\n## v5.22.2\n\n### Fixed\n\n- Support schema without `Query` type when using federation https://github.com/nuwave/lighthouse/pull/1925\n\n## v5.22.1\n\n### Fixed\n\n- Allow `\\Carbon\\CarbonImmutable` for date scalars https://github.com/nuwave/lighthouse/pull/1924\n\n## v5.22.0\n\n### Added\n\n- Add `AuthenticationException::fromLaravel()` and `AuthenticationErrorHandler` to handle laravel native `AuthenticationException` https://github.com/nuwave/lighthouse/pull/1922\n- Add `AuthorizationException::fromLaravel()` and `AuthorizationErrorHandler` to handle laravel native `AuthorizationException` https://github.com/nuwave/lighthouse/pull/1922\n\n## v5.21.0\n\n### Added\n\n- Add trait `ClearsSchemaCache` to clear the schema cache once before any tests are run https://github.com/nuwave/lighthouse/pull/1920\n\n## v5.20.0\n\n### Added\n\n- Include definition when generating directives via `artisan lighthouse:directive` https://github.com/nuwave/lighthouse/pull/1921\n\n## v5.19.0\n\n### Added\n\n- Add `query` and `scopes` arguments to the `@can` directive https://github.com/nuwave/lighthouse/issues/1916\n\n## v5.18.1\n\n### Fixed\n\n- Fix compatibility with Laravel Octane https://github.com/nuwave/lighthouse/pull/1911\n\n## v5.18.0\n\n### Changed\n\n- Mark `@guard` and `@namespace` directives as `repeatable` https://github.com/nuwave/lighthouse/issues/1907\n\n## v5.17.0\n\n### Added\n\n- Add support for custom rules that reference other arguments https://github.com/nuwave/lighthouse/pull/1903\n\n## v5.16.2\n\n### Fixed\n\n- Allow using date validation rules that reference other arguments https://github.com/nuwave/lighthouse/pull/1900\n\n## v5.16.1\n\n### Fixed\n\n- Fix `ValidationErrorHandler` returned error type https://github.com/nuwave/lighthouse/commit/e9f97c117a50aab3c61cb104628696a97b5bfa2b\n\n## v5.16.0\n\n### Added\n\n- Add `ValidationException::fromLaravel()` and `ValidationErrorHandler` to include validation messages in extensions https://github.com/nuwave/lighthouse/pull/1899\n\n## v5.15.3\n\n### Changed\n\n- Provide context for syntax errors thrown during schema parsing https://github.com/nuwave/lighthouse/pull/1892\n\n## v5.15.2\n\n### Fixed\n\n- Fix usage of validation rules with chained query builders with `@validator` https://github.com/nuwave/lighthouse/pull/1890\n\n## v5.15.1\n\n### Fixed\n\n- Call `lighthouse:clear-cache` in other commands to handle schema cache version 2 https://github.com/nuwave/lighthouse/pull/1894\n\n## v5.15.0\n\n### Added\n\n- Add method `rethrowGraphQLErrors()` to testing helper to leverage PHPUnit exception testing https://github.com/nuwave/lighthouse/pull/1885\n\n## v5.14.0\n\n### Added\n\n- Add config setting `cache.version` to use a PHP file for the schema cache and leverage OPcache https://github.com/nuwave/lighthouse/pull/1842\n\n## v5.13.1\n\n### Fixed\n\n- Fix model name determination when using interfaces https://github.com/nuwave/lighthouse/pull/1882\n\n## v5.13.0\n\n### Added\n\n- Add config setting `non_null_pagination_results` to mark the generated result type of paginated lists as non-nullable https://github.com/nuwave/lighthouse/pull/1878\n\n### Changed\n\n- Improve descriptions of generated pagination types https://github.com/nuwave/lighthouse/pull/1878\n\n## v5.12.7\n\n### Fixed\n\n- Fix incorrect config key for subscriptions redis storage connection https://github.com/nuwave/lighthouse/pull/1874\n\n## v5.12.6\n\n### Fixed\n\n- Avoid conflicting relation batch loader overlaps when using dot notation in `@with` https://github.com/nuwave/lighthouse/pull/1871\n\n## v5.12.5\n\n### Fixed\n\n- Allow integer zero, empty string and false as valid cached values with `@cache` https://github.com/nuwave/lighthouse/pull/1869\n\n## v5.12.4\n\n### Fixed\n\n- Fix combining `@lazyLoad` with paginated relations https://github.com/nuwave/lighthouse/pull/1867\n\n## v5.12.3\n\n### Fixed\n\n- Allow JSON notation `->` in column references for complex where conditions https://github.com/nuwave/lighthouse/pull/1864\n\n## v5.12.2\n\n### Fixed\n\n- Handle `null` when encoding or decoding with `@globalId` https://github.com/nuwave/lighthouse/pull/1862\n\n## v5.12.1\n\n### Fixed\n\n- Fix resolving relation items and count in one query https://github.com/nuwave/lighthouse/pull/1859\n\n## v5.12.0\n\n### Added\n\n- Add `ValidationException::withMessages()` https://github.com/nuwave/lighthouse/pull/1857\n\n## v5.11.0\n\n### Added\n\n- Add lifecycle events `StartOperationOrOperations` and `EndOperationOrOperations` https://github.com/nuwave/lighthouse/pull/1856\n\n## v5.10.0\n\n### Added\n\n- Support Laravel Octane https://github.com/nuwave/lighthouse/pull/1854\n\n### Changed\n\n- Improve performance through [`graphql-php` lazy field definitions](https://github.com/webonyx/graphql-php/pull/861) https://github.com/nuwave/lighthouse/pull/1851 \n- Load individual subscription fields lazily instead of loading them all eagerly https://github.com/nuwave/lighthouse/pull/1851\n- Require `webonyx/graphql-php:^14.7` https://github.com/nuwave/lighthouse/pull/1851\n\n## v5.9.1\n\n### Fixed\n\n- Pass plain values to `ScoutBuilderDirective::handleScoutBuilder()` https://github.com/nuwave/lighthouse/pull/1853\n\n## v5.9.0\n\n### Added\n\n- Add `@aggregate` directive https://github.com/nuwave/lighthouse/pull/1849\n\n### Changed\n\n- Split `DataLoader` functionality into `BatchLoader` and `ModelsLoader` https://github.com/nuwave/lighthouse/pull/1849\n- Combine eager loads that produce identical results https://github.com/nuwave/lighthouse/pull/1849\n\n## v5.8.2\n\n### Fixed\n\n- Allow `@builder` in combination with `@search` https://github.com/nuwave/lighthouse/pull/1850\n\n## v5.8.1\n\n### Fixed\n\n- Avoid setting multiple `@model` directives on generated paginator types https://github.com/nuwave/lighthouse/pull/1837\n\n## v5.8.0\n\n### Added\n\n- Add `SIMPLE` pagination type https://github.com/nuwave/lighthouse/pull/1816\n\n## v5.7.2\n\n### Fixed\n\n- Fix problem with table name on HAS condition with relationship on same table https://github.com/nuwave/lighthouse/pull/1795\n\n## v5.7.1\n\n### Fixed\n\n- Fix usage of closures in validation https://github.com/nuwave/lighthouse/pull/1831\n\n## v5.7.0\n\n### Added\n\n- Add `builder` option to `@all` directive https://github.com/nuwave/lighthouse/pull/1826\n\n## v5.6.2\n\n### Changed\n\n- Update behavior of `TestReponse::assertGraphQLErrorMessage` to work when multiple errors are present https://github.com/nuwave/lighthouse/pull/1827\n\n## v5.6.1\n\n### Fixed\n\n- Fix overly eager validation of repeatable directive usage by requiring `webonyx/graphql-php:^14.6.2` https://github.com/nuwave/lighthouse/pull/1824\n- Fix conversion of `repeatable` directive nodes into executable definitions https://github.com/nuwave/lighthouse/pull/1824\n\n## v5.6.0\n\n### Added\n\n- Support for Apollo Federation https://github.com/nuwave/lighthouse/pull/1728\n\n## v5.5.1\n\n### Fixed\n\n- Add placeholder type `_` to `schema-directives.graphql` https://github.com/nuwave/lighthouse/pull/1823\n\n## v5.5.0\n\n### Fixed\n\n- Allow `@limit` on `FIELD_DEFINITION` to fix validation errors https://github.com/nuwave/lighthouse/pull/1821\n\n### Added\n\n- Add method `assertGraphQLErrorMessage()` to `TestResponse` mixin https://github.com/nuwave/lighthouse/pull/1819\n\n## v5.4.0\n\n### Added\n\n- Add `GraphQLContext` to `StartExecution` event\n- Add `connect` and `disconnect` operations in nested mutations for HasMany and MorphMany relations https://github.com/nuwave/lighthouse/pull/1730\n- Add `ValidateSchema` event https://github.com/nuwave/lighthouse/pull/1764\n- Add config option `subscriptions.exclude_empty` https://github.com/nuwave/lighthouse/pull/1799\n\n### Changed\n\n- Optimize `@defer` by avoiding parsing the request multiple times\n- Move HTTP and Schema handling out of the GraphQL class https://github.com/nuwave/lighthouse/pull/1748\n- Move subscription related classes into Subscription namespace https://github.com/nuwave/lighthouse/pull/1803\n- Consolidate GlobalId namespace https://github.com/nuwave/lighthouse/pull/1804\n\n### Fixed\n\n- Apply error handling and debug settings consistently https://github.com/nuwave/lighthouse/pull/1749\n- Fix typo `comparision` to `comparison` in generated input types for `@whereHas`\n- Fix redis `mget` being called with an empty list of subscriber ids https://github.com/nuwave/lighthouse/pull/1759\n- Fix `lighthouse:clear-cache` not clearing cache when a custom cache store is used https://github.com/nuwave/lighthouse/pull/1788\n- Fix subscription storage in redis for predis users https://github.com/nuwave/lighthouse/pull/1814\n- Prepend rule arguments that refer to other arguments with the full path https://github.com/nuwave/lighthouse/pull/1739\n\n### Deprecated\n\n- Deprecate the `globalId` argument of the `@upsert` directive https://github.com/nuwave/lighthouse/pull/1804\n\n## v5.3.0\n\n### Added\n\n- Validate that `@with` and `@withCount` are not used on root fields https://github.com/nuwave/lighthouse/pull/1714\n- Add events to cover the lifecycle of a GraphQL request: `EndExecution`, `EndRequest` https://github.com/nuwave/lighthouse/pull/1726\n- Include the client given query, variables and operation name in the `StartExecution` event https://github.com/nuwave/lighthouse/pull/1726\n- Apply `log` option from the `broadcasting` config to the Pusher subscription driver https://github.com/nuwave/lighthouse/pull/1733\n- Support `pusher/pusher-php-server` version 5 https://github.com/nuwave/lighthouse/pull/1741\n\n### Changed\n\n- Prepend directives when transferring them from types to fields https://github.com/nuwave/lighthouse/pull/1734\n- For `echo` driver-based subscriptions, the event name will be `lighthouse-subscription` https://github.com/nuwave/lighthouse/pull/1733\n- Echo driver will always broadcast through the `private` channel https://github.com/nuwave/lighthouse/pull/1733\n\n### Fixed\n\n- Apply custom error handlers for syntax or request errors https://github.com/nuwave/lighthouse/pull/1726\n- Define scalars instead of `Mixed` type in directive definitions https://github.com/nuwave/lighthouse/pull/1742\n- Fix subscription extension version default value https://github.com/nuwave/lighthouse/pull/1744\n\n## v5.2.0\n\n### Added\n\n- Allow using the `@builder` directive on fields https://github.com/nuwave/lighthouse/pull/1687\n- Add dedicated `\\Nuwave\\Lighthouse\\Scout\\ScoutBuilderDirective` https://github.com/nuwave/lighthouse/pull/1691\n- Allow `@eq` directive on fields https://github.com/nuwave/lighthouse/pull/1681\n- Add `@throttle` directive to set field rate limit using Laravel rate limiting services https://github.com/nuwave/lighthouse/pull/1708\n- Add subscriptions v2 https://github.com/nuwave/lighthouse/pull/1716\n\n### Changed\n\n- Clarify semantics of combining `@search` with other directives https://github.com/nuwave/lighthouse/pull/1691\n- Move Scout related classes into `\\Nuwave\\Lighthouse\\Scout` https://github.com/nuwave/lighthouse/pull/1698\n- `BaseDirective` loads all arguments and caches them after the first `directiveHasArgument`/`directiveArgValue` call https://github.com/nuwave/lighthouse/pull/1707\n- Use gate response in authorization errors of `@can` directive https://github.com/nuwave/lighthouse/pull/1715\n\n### Fixed\n\n- Fix nested `OR` conditions in `HAS` relations https://github.com/nuwave/lighthouse/pull/1713\n\n### Deprecated\n\n- Specify `@guard(with: \"api\")` should be changed to `@guard(with: [\"api\"])`https://github.com/nuwave/lighthouse/pull/1705\n\n## v5.1.0\n\n### Added\n\n- Allow spec-compliant definition of the `messages` argument of `@rules` and `@rulesForArray` https://github.com/nuwave/lighthouse/pull/1662\n- Validate correct usage of `@rules` and `@rulesForArray` https://github.com/nuwave/lighthouse/pull/1662\n- Allow eager-loading multiple relations on a single field using `@with` https://github.com/nuwave/lighthouse/pull/1528\n- Add `\\Nuwave\\Lighthouse\\Execution\\DataLoader\\BatchLoaderRegistry` to instantiate arbitrary batch loaders https://github.com/nuwave/lighthouse/pull/1528\n- Add `@limit` directive to allow clients to specify the maximum number of results to return https://github.com/nuwave/lighthouse/pull/1674\n- Predefine default field ordering by using `@orderBy` on fields https://github.com/nuwave/lighthouse/pull/1678\n- Add `@like` directive to use a client given value to add a `LIKE` conditional to a database query https://github.com/nuwave/lighthouse/issues/1644\n\n### Changed\n\n- Improve batch loading performance https://github.com/nuwave/lighthouse/pull/1528\n- Require `webonyx/graphql-php` version `^14.5`\n\n### Deprecated\n\n- Deprecate the `globalId` argument of the `@delete`, `@forceDelete` and `@restore` directives https://github.com/nuwave/lighthouse/pull/1660\n- Deprecate passing the `messages` argument of `@rules` and `@rulesForArray` as a map with arbitrary keys https://github.com/nuwave/lighthouse/pull/1662\n- Deprecate `\\Nuwave\\Lighthouse\\Execution\\DataLoader\\BatchLoader` in favour of `\\Nuwave\\Lighthouse\\Execution\\DataLoader\\BatchLoaderRegistry` https://github.com/nuwave/lighthouse/pull/1528\n\n### Fixed\n\n- Remove non-functional `globalId` argument definition from `@update` https://github.com/nuwave/lighthouse/pull/1660\n- Resolve field middleware directives in lexical order https://github.com/nuwave/lighthouse/pull/1666\n- Ensure `Carbon\\Carbon` is cast to `Illuminate\\Support\\Carbon` in date scalars https://github.com/nuwave/lighthouse/pull/1672\n- Fix Laravel 5.6 compatibility for `@withCount` and paginated relationship directives https://github.com/nuwave/lighthouse/pull/1528\n- Fix issue where argument names where used instead of variable names in subscription queries https://github.com/nuwave/lighthouse/pull/1683\n- Fix issue with TTL breaking subscriptions https://github.com/nuwave/lighthouse/pull/1685\n\n## v5.0.2\n\n### Fixed\n\n- Make `@node` force load the type if it has not been loaded https://github.com/nuwave/lighthouse/pull/1659\n\n## v5.0.1\n\n### Fixed\n\n- Make `@model` not extend `@node` accidentally\n\n### Deprecated\n\n- Deprecate `\\Nuwave\\Lighthouse\\Subscriptions\\Subscriber::setRoot()` in favour of property access\n\n## v5.0.0\n\n### Added\n\n- Apply validation rules to input types by providing a validator class https://github.com/nuwave/lighthouse/pull/1185\n- Include schema directives when running `php artisan lighthouse:validate-schema` https://github.com/nuwave/lighthouse/pull/1494\n- Add ability to query for the existence of relations in where conditions https://github.com/nuwave/lighthouse/pull/1412\n- Handle content types `application/graphql` and `application/x-www-form-urlencoded` properly https://github.com/nuwave/lighthouse/pull/1424\n- Mark directives that can be used more than once per location as `repeatable` https://github.com/nuwave/lighthouse/pull/1529\n- Allow configuring global field middleware directives in `config/lighthouse.php` https://github.com/nuwave/lighthouse/pull/1533\n- Add custom attributes to validations https://github.com/nuwave/lighthouse/pull/1628\n- Add new directive interface `FieldBuilderDirective` https://github.com/nuwave/lighthouse/pull/1636\n- Add `@whereAuth` directive for filtering a field based on authenticated user https://github.com/nuwave/lighthouse/pull/1636\n- Use the `@trim` directive on fields to sanitize all input strings https://github.com/nuwave/lighthouse/pull/1641\n- Add Laravel Echo compatible subscription broadcaster https://github.com/nuwave/lighthouse/pull/1370\n- Allow auxiliary types in directive definitions https://github.com/nuwave/lighthouse/pull/1649\n\n### Changed\n\n- Use `Illuminate\\Support\\Carbon` instead of `Carbon\\Carbon`\n- `\\Nuwave\\Lighthouse\\Exceptions\\ValidationException` no longer extends `\\Illuminate\\Validation\\ValidationException` https://github.com/nuwave/lighthouse/pull/1185\n- Move validation related classes into namespace `Nuwave\\Lighthouse\\Validation` https://github.com/nuwave/lighthouse/pull/1185\n- Run `ArgDirectives` in distinct phases: Sanitize, Validate, Transform https://github.com/nuwave/lighthouse/pull/1185\n- The directive interfaces `ArgBuilderDirective`, `ArgTransformerDirective` and `ArgDirectiveForArray`\n  extend `Directive` instead of `ArgDirective` https://github.com/nuwave/lighthouse/pull/1185\n- Change the autogeneration of the `OrderByClause` input for `@orderBy`, the\n  argument `field` is now always called `column` https://github.com/nuwave/lighthouse/pull/1337\n- Names for autogenerated types are now prepended with the name of the fields parent type\n  This affects `@orderBy`, `@whereConditions` and `@whereHasConditions` https://github.com/nuwave/lighthouse/pull/1337\n- `__invoke` is now the only supported method name for convention based\n  field resolver classes  https://github.com/nuwave/lighthouse/pull/1422\n- Change `\\Nuwave\\Lighthouse\\Support\\Contracts\\Directive` to require all directives to have an SDL\n  definition by implementing `public static definition(): string` https://github.com/nuwave/lighthouse/pull/1386\n- Combine `Nuwave\\Lighthouse\\Schema\\Factories\\DirectiveNamespacer` and `Nuwave\\Lighthouse\\Schema\\Factories\\DirectiveFactory` into\n  `\\Lighthouse\\Schema\\DirectiveLocator` https://github.com/nuwave/lighthouse/pull/1494\n- Require `haydenpierce/class-finder` as a built-in dependency https://github.com/nuwave/lighthouse/pull/1494\n- Add method `defaultHasOperator` to `\\Nuwave\\Lighthouse\\WhereConditions\\Operator` https://github.com/nuwave/lighthouse/pull/1412\n- Change default configuration options in `lighthouse.php`:\n  - `'guard' => 'api'`\n  - `'forceFill' => true`\n- Use `laragraph/utils` for parsing HTTP requests https://github.com/nuwave/lighthouse/pull/1424\n- Replace the subscription broadcast queued event handler with a queued job to allow the queue name to be specified https://github.com/nuwave/lighthouse/pull/1507\n- Make `@method` call the underlying method with the arguments as ordered parameters instead\n  of the full resolver arguments https://github.com/nuwave/lighthouse/pull/1509\n- Change `ErrorHandler` method `handle()` to non-static `__invoke()` and allow discarding\n  errors by returning `null`\n- Allow subscriptions without named operations, base channels on the field name\n- Set `lighthouse.debug` config through env `LIGHTHOUSE_DEBUG` https://github.com/nuwave/lighthouse/pull/1592\n- Test helper `multipartGraphQL` now accepts arrays instead of JSON strings https://github.com/nuwave/lighthouse/pull/1615/\n- Use `DateTime::ATOM` for DateTimeTZ ISO 8601 compatibility https://github.com/nuwave/lighthouse/pull/1622\n- Split `ProvidesRules` interface into `ArgumentValidation` and `ArgumentSetValidation` https://github.com/nuwave/lighthouse/pull/1628\n- Update to PHP 8 compatible mll-lab/graphql-php-scalars 4 https://github.com/nuwave/lighthouse/pull/1639\n- Add `TrimDirective` to the default `field_middleware` config in `lighthouse.php` https://github.com/nuwave/lighthouse/pull/1641\n- Field keys in validation errors now match the client given input, ignoring transformations such as `@spread` https://github.com/nuwave/lighthouse/issues/1631\n\n### Removed\n\n- Remove support for PHP 7.1, Laravel 5.5 and PHPUnit 6 https://github.com/nuwave/lighthouse/pull/1192\n- Remove `TestResponse::jsonGet()` helper, use `->json()` instead https://github.com/nuwave/lighthouse/pull/1192/files\n- Remove `\\Nuwave\\Lighthouse\\Execution\\GraphQLValidator` as validation now uses Laravel's native validator https://github.com/nuwave/lighthouse/pull/1185\n- Remove interfaces `HasArgumentPath` and `HasErrorBuffer` and the parts of `FieldFactory` that calls them https://github.com/nuwave/lighthouse/pull/1185\n- Remove the `ValidationDirective` abstract class in favour of validator classes https://github.com/nuwave/lighthouse/pull/1185\n- Remove configuration option `lighthouse.orderBy`, always uses `column` now https://github.com/nuwave/lighthouse/pull/1337\n- Remove `\\Nuwave\\Lighthouse\\Support\\Contracts\\DefinedDirective` interface, moving its\n  functionality to `\\Nuwave\\Lighthouse\\Support\\Contracts\\Directive` https://github.com/nuwave/lighthouse/pull/1386\n- Remove fallback for `lighthouse.cache.ttl` setting https://github.com/nuwave/lighthouse/pull/1423\n- Remove `Nuwave\\Lighthouse\\Schema\\AST\\PartialParser` in favor of `GraphQL\\Language\\Parser` https://github.com/nuwave/lighthouse/pull/1457\n- Remove `Nuwave\\Lighthouse\\Execution\\GraphQLRequest` singleton https://github.com/nuwave/lighthouse/pull/1424\n- Remove `@bcrypt` in favor of `@hash` https://github.com/nuwave/lighthouse/pull/1200\n- Remove the `@middleware` directive, as it violates the boundary between HTTP and GraphQL\n  request handling. Use `@guard` or other field middleware directives instead https://github.com/nuwave/lighthouse/pull/1135\n- Remove configuration option `pagination_amount_argument`, it is always `first` now\n\n### Fixed\n\n- Prefix complex conditions with table name to avoid ambiguous SQL https://github.com/nuwave/lighthouse/pull/1530\n- Merge type interfaces when extending type https://github.com/nuwave/lighthouse/pull/1635\n\n### Deprecated\n\n- Deprecate values for the `type` argument of `@paginate` that are not `PAGINATOR` or `CONNECTION`\n\n## v4.18.0\n\n### Added\n\n- Add `@morphToMany` directive https://github.com/nuwave/lighthouse/pull/1604\n\n## v4.17.0\n\n### Added\n\n- Support Laravel 8 https://github.com/nuwave/lighthouse/pull/1549 and https://github.com/nuwave/lighthouse/pull/1578\n\n## v4.16.3\n\n### Fixed\n\n- Fix the type hint in `GraphQLContext::user()`\n\n## v4.16.2\n\n### Fixed\n\n- Provide the definition for `@nest`\n\n## v4.16.1\n\n### Fixed\n\n- Ensure the `@with` directive works properly with polymorphic relations https://github.com/nuwave/lighthouse/pull/1517\n\n## v4.16.0\n\n### Added\n\n- Add artisan command `lighthouse:cache` to compile GraphQL AST https://github.com/nuwave/lighthouse/pull/1451\n- Add middleware `\\Nuwave\\Lighthouse\\Support\\Http\\Middleware\\LogGraphQLQueries` that logs every incoming\n  GraphQL query https://github.com/nuwave/lighthouse/pull/1454\n- Allow custom query validation rules selection by rebinding the interface\n  `\\Nuwave\\Lighthouse\\Support\\Contracts\\ProvidesValidationRules` https://github.com/nuwave/lighthouse/pull/1487\n- Add `DateTimeUtc` scalar https://github.com/nuwave/lighthouse/pull/1320\n\n### Changed\n\n- Publish config file with tag `lighthouse-config` and default schema with tag `lighthouse-schema`\n  instead of the previously used tags `config` and `schema` https://github.com/nuwave/lighthouse/issues/1489\n- Throw partial errors when failing to delete, forceDelete or restore a model https://github.com/nuwave/lighthouse/pull/1420\n- Add `\\Nuwave\\Lighthouse\\Execution\\ErrorPool` to allow collection of partial errors https://github.com/nuwave/lighthouse/pull/1420\n\n### Fixed\n\n- Ensure the `@count` directive works properly with polymorphic relations https://github.com/nuwave/lighthouse/pull/1466\n- Take route prefix into account in `graphQLEnpointUrl()` test helper https://github.com/nuwave/lighthouse/pull/1439\n\n### Deprecated\n\n- Deprecate `\\Nuwave\\Lighthouse\\Execution\\ErrorBuffer` in favor of `\\Nuwave\\Lighthouse\\Execution\\ErrorPool` https://github.com/nuwave/lighthouse/pull/1420\n\n## v4.15.0\n\n### Added\n\n- Add `@withCount` directive to eager load relationship counts on field access https://github.com/nuwave/lighthouse/pull/1390\n- Extend `lighthouse:directive` artisan command to allow choosing interfaces https://github.com/nuwave/lighthouse/pull/1251\n- Add `lighthouse.cache.store` configuration option to set the cache store to use for schema caching https://github.com/nuwave/lighthouse/pull/1446\n\n### Changed\n\n- Eager load relationship count in `@count` directive https://github.com/nuwave/lighthouse/pull/1390\n- Simplify the default field resolver classes generated by the artisan commands `lighthouse:query` and `lighthouse:mutation`,\n  add option `--full` to include the seldom needed resolver arguments `$context` and `$resolveInfo`\n\n### Fixed\n\n- Restore application of global scopes in nested relation queries when batching pagination https://github.com/nuwave/lighthouse/pull/1447\n- Avoid unnecessarily reloading models with count in nested relation queries https://github.com/nuwave/lighthouse/pull/1447\n\n## v4.14.1\n\n### Fixed\n\n- Safeguard deletion of `programmatic-types.graphql` in `artisan lighthouse:ide-helper`\n\n## v4.14.0\n\n### Added\n\n- Write definitions for programmatically registered types to `programmatic-types.graphql`\n  when running the `lighthouse:ide-helper` artisan command https://github.com/nuwave/lighthouse/pull/1371\n\n### Fixed\n\n- Fix the error message when using multiple exclusive directives on a single node https://github.com/nuwave/lighthouse/pull/1387\n- Allow passing additional headers to `multipartGraphQL` Lumen test helper too https://github.com/nuwave/lighthouse/pull/1395\n- Rectify that `@orderBy`, `@whereConditions` and `@whereHasConditions` only work on field arguments https://github.com/nuwave/lighthouse/pull/1402\n- Make mass assignment behavior configurable through `force_fill` option in `lighthouse.php` https://github.com/nuwave/lighthouse/pull/1405\n\n### Deprecated\n\n- `\\Nuwave\\Lighthouse\\Support\\Contracts\\DefinedDirective::definition()` will be moved to `\\Nuwave\\Lighthouse\\Support\\Contracts\\Directive`\n  and replace its `name()` method. This requires all directives to have an SDL definition.\n\n## v4.13.1\n\n### Fixed\n\n- Pull primary key from arguments in `@update` before force filling them into the Model https://github.com/nuwave/lighthouse/pull/1377\n\n## v4.13.0\n\n### Added\n\n- Allow passing additional headers to `multipartGraphQL` test helper https://github.com/nuwave/lighthouse/pull/1342\n- Add empty root types automatically when extending them https://github.com/nuwave/lighthouse/pull/1347\n- Configure a default `guard` for all authentication functionality https://github.com/nuwave/lighthouse/pull/1343\n- Configure the default amount of items in paginated lists with `pagination.default_count` https://github.com/nuwave/lighthouse/pull/1352\n- Add new methods `has()`, `overwrite()` and `registerNew()` to `TypeRegistry` to control if types should\n  be overwritten when registering duplicates https://github.com/nuwave/lighthouse/pull/1361\n\n### Changed\n\n- Improve validation error when extending a type that is not defined https://github.com/nuwave/lighthouse/pull/1347\n- Use `forceFill()` when mutating models https://github.com/nuwave/lighthouse/pull/1348\n- Namespace pagination related configuration in `lighthouse.php` https://github.com/nuwave/lighthouse/pull/1352\n- Fix publishing the config when using Lumen https://github.com/nuwave/lighthouse/pull/1355\n\n### Deprecated\n\n- The setting `paginate_max_count` will change to `pagination.max_count` https://github.com/nuwave/lighthouse/pull/1352\n- The `registerNew()` method of `TypeRegistry` will be removed in favor of `register()`, which will change\n  its behavior to throw when registering duplicates https://github.com/nuwave/lighthouse/pull/1361\n\n## v4.12.4\n\n### Fixed\n\n- Fix nesting OR within AND condition when using `@whereConditions` https://github.com/nuwave/lighthouse/pull/1341\n\n## v4.12.3\n\n### Changed\n\n- Throw an exception if the return type declaration class for a relation does not exist https://github.com/nuwave/lighthouse/pull/1338\n\n## v4.12.2\n\n### Fixed\n\n- Fix converting lists of lists into ArgumentSet https://github.com/nuwave/lighthouse/pull/1335\n\n### Changed\n\n- Make test request helper PHPDocs more accurate for Laravel 7 https://github.com/nuwave/lighthouse/pull/1336\n\n## v4.12.1\n\n### Fixed\n\n- Fix creating multiple nested BelongsTo relationships on the same level when previous records\n  with matching attributes exist https://github.com/nuwave/lighthouse/pull/1321\n\n## v4.12.0\n\n### Added\n\n- Add flag `--json` to `print-schema` to output JSON instead of GraphQL SDL https://github.com/nuwave/lighthouse/pull/1268\n- Add TTL option for subscriptions storage https://github.com/nuwave/lighthouse/pull/1284\n- Provide assertion helpers through `TestResponseMixin` https://github.com/nuwave/lighthouse/pull/1308\n- Add scalar `DateTimeTz` https://github.com/nuwave/lighthouse/pull/1311\n- Publish `_lighthouse_ide_helper.php` with `php artisan lighthouse:ide-helper`\n\n### Fixed\n\n- Fix nested mutations with multiple `belongsTo` relations at the same level https://github.com/nuwave/lighthouse/pull/1285\n- Avoid race condition that occurs when using `Cache::has()` https://github.com/nuwave/lighthouse/pull/1290\n- Replace usage of `resolve()` helper with Lumen-compatible `app()` https://github.com/nuwave/lighthouse/pull/1305\n- Fix using `@create` and `@update` on nested input object fields that accept an array of input types\n  https://github.com/nuwave/lighthouse/pull/1316\n\n### Changed\n\n- Remove subscriber reference from topic when deleted https://github.com/nuwave/lighthouse/pull/1288\n- Improve subscription context serializer https://github.com/nuwave/lighthouse/pull/1283\n- Allow replacing the `SubscriptionRegistry` implementation using the container https://github.com/nuwave/lighthouse/pull/1286\n- Report errors that are not client-safe through Laravel's `ExceptionHandler` https://github.com/nuwave/lighthouse/pull/1303\n- Log in subscribers when broadcasting a subscription update, so that calls to `auth()->user()` return\n  the authenticated user instead of `null` https://github.com/nuwave/lighthouse/pull/1306\n- Replace the subscription broadcast queued event handler with a queued job to allow the queue name to be specified https://github.com/nuwave/lighthouse/pull/1301\n\n## v4.11.0\n\n### Added\n\n- Add `AttemptAuthentication` middleware to optionally log in users and delegate access guards\n  to the field level https://github.com/nuwave/lighthouse/pull/1197\n- Add artisan command `lighthouse:directive` to add directive class https://github.com/nuwave/lighthouse/pull/1240\n\n### Fixed\n\n- Eager load nested relations using the `@with` directive https://github.com/nuwave/lighthouse/pull/1068\n- Avoid infinite loop with empty namespace in generator commands https://github.com/nuwave/lighthouse/pull/1245\n- Automatically register `TestingServiceProvider` for `@mock` when running unit tests https://github.com/nuwave/lighthouse/pull/1244\n\n## v4.10.2\n\n### Fixed\n\n- Ensure subscription routes are named uniquely https://github.com/nuwave/lighthouse/pull/1231\n\n### Changed\n\n- Throw user readable `Error` instead of `ModelNotFoundException` when model is not found in `@can` https://github.com/nuwave/lighthouse/pull/1225\n\n## v4.10.1\n\n### Fixed\n\n- Fix Laravel version detection for Lumen https://github.com/nuwave/lighthouse/pull/1224\n\n## v4.10.0\n\n### Added\n\n- Access nested inputs with dot notation using the `find` option of `@can` https://github.com/nuwave/lighthouse/pull/1216\n- Add `@hash` directive which uses Laravel's hashing configuration https://github.com/nuwave/lighthouse/pull/1200\n- Add option `passOrdered` to `@method` to pass just the arguments as ordered parameters https://github.com/nuwave/lighthouse/pull/1208\n- Add support to extend `input`, `interface` and `enum` types https://github.com/nuwave/lighthouse/pull/1203\n- Implement `streamGraphQL()` helper in `\\Nuwave\\Lighthouse\\Testing\\MakesGraphQLRequestsLumen` https://github.com/nuwave/lighthouse/pull/1222\n- Support Laravel 7 https://github.com/nuwave/lighthouse/pull/1219\n\n### Deprecated\n\n- Remove `@bcrypt` in favor of `@hash` https://github.com/nuwave/lighthouse/pull/1200\n- `@method` will call the underlying method with the arguments as ordered parameters instead\n  of the full resolver arguments https://github.com/nuwave/lighthouse/pull/1208\n\n## v4.9.0\n\n### Added\n\n- Add optional `columnsEnum` argument to the `@whereConditions`, `@whereHasConditions`\n  and `@orderBy` directives https://github.com/nuwave/lighthouse/pull/1150\n- Exclude or include trashed models in `@can` when `@forceDelete` or `@restore` are used,\n  the client does not have to filter explicitly https://github.com/nuwave/lighthouse/pull/1157\n- Add test trait `\\Nuwave\\Lighthouse\\Testing\\MakesGraphQLRequestsLumen` for usage\n  with Lumen https://github.com/nuwave/lighthouse/pull/1100\n- Add test trait `\\Nuwave\\Lighthouse\\Testing\\UsesTestSchema` to enable using\n  a dummy schema for testing custom Lighthouse extensions https://github.com/nuwave/lighthouse/pull/1171\n- Simplify mocking resolvers that just return static data https://github.com/nuwave/lighthouse/pull/1177\n- Add utility `\\Nuwave\\Lighthouse\\ClientDirectives\\ClientDirective` to correctly\n  get the arguments passed through a client directive https://github.com/nuwave/lighthouse/pull/1184\n- Add `streamGraphQL()` helper method to `\\Nuwave\\Lighthouse\\Testing\\MakesGraphQLRequests` for\n  simple testing of streamed responses, such as `@defer` https://github.com/nuwave/lighthouse/pull/1184\n\n### Fixed\n\n- Fix eager-loading relations where the parent type is an `interface` or `union` and\n  may correspond to multiple different models https://github.com/nuwave/lighthouse/pull/1035\n- Fix renaming input fields that are nested within lists using `@rename` https://github.com/nuwave/lighthouse/pull/1166\n- Fix handling of nested mutation operations that receive `null` https://github.com/nuwave/lighthouse/pull/1174\n- Fix nested mutation `upsert` across two levels of BelongsTo relations https://github.com/nuwave/lighthouse/pull/1169\n- Apply query filters using an `ArgBuilderDirective` such as `@eq` when the argument\n  is nested deeply within the input https://github.com/nuwave/lighthouse/pull/1176\n- Fix `\\Nuwave\\Lighthouse\\Testing\\MakesGraphQLRequestsLumen` test helper https://github.com/nuwave/lighthouse/pull/1186\n- Handle multiple instances of client directives with `@defer` correctly https://github.com/nuwave/lighthouse/pull/1184\n\n### Deprecated\n\n- Deprecate `\\Nuwave\\Lighthouse\\Schema\\Source\\SchemaSourceProvider#setRootPath()`, this function\n  is never called or used anywhere within Lighthouse. It will be removed from the interface.\n\n## v4.8.1\n\n### Fixed\n\n- Avoid erasing the model information from the wrapping paginated results `type` when defining\n  a paginated `@hasMany` field after a field with `@paginate` https://github.com/nuwave/lighthouse/pull/1149\n\n## v4.8.0\n\n### Added\n\n- Compose complex input arguments through nested arg resolvers https://github.com/nuwave/lighthouse/pull/899\n- Add `\\Nuwave\\Lighthouse\\Support\\Contracts\\ArgResolver` directive interface https://github.com/nuwave/lighthouse/pull/899\n- Allow existing mutation directives `@create`, `@update`, `@upsert` and `@delete` to function\n  as nested arg resolvers https://github.com/nuwave/lighthouse/pull/899\n- Validate at schema build time that the `apply` argument `@rules` is an array https://github.com/nuwave/lighthouse/pull/1092\n- Add support in `@whereConditions` for IN, IS NULL and BETWEEN operators https://github.com/nuwave/lighthouse/pull/1099\n- Add ability to define pivot data on nested mutations within `sync`, `syncWithoutDetaching`\n  and `connect` https://github.com/nuwave/lighthouse/pull/1110\n- Allow restricting the columns for `@orderBy` to a given whitelist and generate\n  an `enum` definition for it https://github.com/nuwave/lighthouse/pull/1118\n- Allow passing variables in `->graphQL()` test helper https://github.com/nuwave/lighthouse/pull/1127\n- Add missing schema descriptions to some inputs, types, and enums https://github.com/nuwave/lighthouse/pull/1131\n- Add `@guard` directive to handle authentication https://github.com/nuwave/lighthouse/pull/1135\n- Add `@whereHasConditions` directive to filter query results based on the existence\n  of a relationship https://github.com/nuwave/lighthouse/pull/1140\n\n### Changed\n\n- Remove `\\Nuwave\\Lighthouse\\Execution\\MutationExecutor` in favor of modular\n  nested arg resolvers https://github.com/nuwave/lighthouse/pull/899\n- Register the operator enum for `@whereConditions` programmatically and allow\n  overwriting it through a service provider https://github.com/nuwave/lighthouse/pull/1099\n- Always automatically set the correct argument type when using `@whereConditions` or `@orderBy`\n  directives https://github.com/nuwave/lighthouse/pull/1118\n- Implement the `name()` function generically in the BaseDirective class https://github.com/nuwave/lighthouse/pull/1098\n- Renamed the `@whereConstraints` directive to `@whereConditions` https://github.com/nuwave/lighthouse/pull/1140\n\n### Fixed\n\n- Enable chained rule provider directives (`ProvidesRules`) to merge the rules\n  before validating https://github.com/nuwave/lighthouse/pull/1082\n- Apply nested `OR` conditions in `@whereConditions` correctly https://github.com/nuwave/lighthouse/pull/1099\n- Allow passing `null` or simply no `id` when using `@upsert` https://github.com/nuwave/lighthouse/pull/1114\n\n### Deprecated\n\n- The argument `field` within the `OrderByClause` used for `@orderBy` will be renamed to `column`\n  in v5 https://github.com/nuwave/lighthouse/pull/1118\n- Deprecated the `@middleware` directive, as it violates the boundary between HTTP and GraphQL\n  request handling. Use `@guard` or other field middleware directives instead https://github.com/nuwave/lighthouse/pull/1135\n\n### Removed\n\n- Remove broken `NOT` conditional when using `@whereConditions` https://github.com/nuwave/lighthouse/pull/1125\n\n## v4.7.2\n\n### Fixed\n\n- Enable multiple queries in a single request by clearing `BatchLoader` instances\n  after executing each query https://github.com/nuwave/lighthouse/pull/1030\n- Keep the query and pagination capabilities of relation directives when disabling batch loading https://github.com/nuwave/lighthouse/pull/1083\n\n## v4.7.1\n\n### Changed\n\n- Add `INPUT_FIELD_DEFINITION` to allowed locations for the `@builder` directive https://github.com/nuwave/lighthouse/pull/1074\n\n### Fixed\n\n- Define `@enum` as a directive class so it shows up in `schema-directives.graphql`\n  and can potentially be overwritten https://github.com/nuwave/lighthouse/pull/1078\n\n## v4.7.0\n\n### Added\n\n- Add `syncWithoutDetaching` option for BelongsToMany and MorphToMany relationships https://github.com/nuwave/lighthouse/pull/1031\n- Add `injectArgs` option to `@can` directive to pass along client defined\n  arguments to the policy check https://github.com/nuwave/lighthouse/pull/1043\n- Allow globally turning off relation batch loading through the\n  config option `batchload_relations` https://github.com/nuwave/lighthouse/pull/1059\n- Add `\\Nuwave\\Lighthouse\\Execution\\DataLoader\\BatchLoader#loadMany()` function https://github.com/nuwave/lighthouse/pull/973\n- Extend `@rename` directive to work with arguments and input fields https://github.com/nuwave/lighthouse/issues/521\n\n### Changed\n\n- Add ability to fetch soft deleted model within `@can` directive to validate permissions\n  using `@softDeletes` directive. https://github.com/nuwave/lighthouse/pull/1042\n- Improve the error message for missing field resolvers by offering a solution https://github.com/nuwave/lighthouse/pull/1045\n- Throw `DefinitionException` when missing a type in the type registry https://github.com/nuwave/lighthouse/pull/1066\n- Add `INPUT_FIELD_DEFINITION` to `orderBy` directive location https://github.com/nuwave/lighthouse/pull/1069\n\n## v4.6.0\n\n### Added\n\n- Add `@scope` directive for adding a scope to the query builder https://github.com/nuwave/lighthouse/pull/998\n\n### Changed\n\n- Use detailed `$description` property when generating `enum` values from a `BenSampo\\Enum\\Enum` class https://github.com/nuwave/lighthouse/pull/1027\n\n### Fixed\n\n- Handle arrays of namespaces in generator commands https://github.com/nuwave/lighthouse/pull/1033\n\n## v4.5.3\n\n### Fixed\n\n- Handle `null` being passed to a nullable argument that is an input object type https://github.com/nuwave/lighthouse/pull/1021\n\n## v4.5.2\n\n### Fixed\n\n- Fix conversion of client directives after the schema was cached https://github.com/nuwave/lighthouse/pull/1019\n\n## v4.5.1\n\n### Fixed\n\n- Handle `null` being passed to a nullable argument that is a list of type https://github.com/nuwave/lighthouse/pull/1016\n\n## v4.5.0\n\n### Added\n\n- Add `@upsert` directive and nested mutation operations to create or update a model\n  regardless whether it exists https://github.com/nuwave/lighthouse/pull/1005\n\n### Fixed\n\n- Fix broken behaviour when using union types with schema caching https://github.com/nuwave/lighthouse/pull/1015\n\n## v4.4.2\n\n### Added\n\n- Validate the correctness of the `builder` given to `@paginate` at schema\n  build time\n\n### Fixed\n\n- Do not require the type of a field matching a model class when using the\n  `builder` argument of `@paginate` https://github.com/nuwave/lighthouse/pull/1011\n\n## v4.4.1\n\n### Fixed\n\n- Fix regression in 4.4.0 that required matching the type returned from paginated relationship\n  fields with the class name of the model https://github.com/nuwave/lighthouse/pull/1011\n\n## v4.4.0\n\n### Added\n\n- Add `@count` directive for counting a relationship https://github.com/nuwave/lighthouse/pull/984\n- Allow overwriting the name of Enum types created through `LaravelEnumType` https://github.com/nuwave/lighthouse/pull/968\n- Resolve models through Relay's global identification using `@node` https://github.com/nuwave/lighthouse/pull/974\n- Add experimental `@modelClass` directive to map types to models. It will be renamed\n  to `@model` in v5 https://github.com/nuwave/lighthouse/pull/974\n\n### Fixed\n\n- Remove the extra new line from the returned value when using `@globalId(decode: \"ID\")` https://github.com/nuwave/lighthouse/pull/982\n- Throw a syntax error instead of an exception when performing an\n  empty request or a request with an empty query https://github.com/nuwave/lighthouse/pull/989\n- Properly apply `@spread` when used within a nested input object https://github.com/nuwave/lighthouse/pull/992\n\n### Changed\n\n- Allow additional route configurations `prefix` and `domain` https://github.com/nuwave/lighthouse/pull/951\n- Enable schema cache only when `APP_ENV` != 'local' https://github.com/nuwave/lighthouse/pull/957\n\n### Fixed\n\n- Fix default model detection when using other directives combination with `@paginate` https://github.com/nuwave/lighthouse/pull/974\n\n### Deprecated\n\n- Use the `RegisterDirectiveNamespaces` event instead of `DirectiveFactory#addResolved()` https://github.com/nuwave/lighthouse/pull/950\n- Use `@node` instead of `@model` to resolve models through Relay's global identification https://github.com/nuwave/lighthouse/pull/974\n\n## v4.3.0\n\n### Added\n\n- Add `@restore` and `@forceDelete` directives, similar to `@delete` https://github.com/nuwave/lighthouse/pull/941\n- Add `@softDeletes` and `@trashed` directives to enable\n  filtering soft deleted models https://github.com/nuwave/lighthouse/pull/937\n\n### Fixed\n\n- Prevent throwing in `lighthouse:ide-helper` when no custom directives are defined https://github.com/nuwave/lighthouse/pull/948\n\n### Changed\n\n- Validate requirements for argument definitions of `@delete`, `@forceDelete` and `@restore`\n  during schema build time https://github.com/nuwave/lighthouse/pull/941\n\n## v4.2.1\n\n### Fixed\n\n- Actually use the specified `edgeType` in Relay style connections https://github.com/nuwave/lighthouse/pull/939\n\n## v4.2.0\n\n### Added\n\n- Add `@morphOne` directive for polymorphic one-to-one relationships https://github.com/nuwave/lighthouse/pull/944\n- Add `@morphTo` directive for polymorphic one-to-one relationships https://github.com/nuwave/lighthouse/pull/921\n- Add `@morphMany` directive for polymorphic one-to-many relationships https://github.com/nuwave/lighthouse/pull/944\n- Support Laravel `^6.0` https://github.com/nuwave/lighthouse/pull/926\n- Add command `lighthouse:ide-helper` for generating a definition file with all schema directives https://github.com/nuwave/lighthouse/pull/933\n\n## v4.1.1\n\n### Fixed\n\n- Unbox laravel-enum inputs when using the builder directives https://github.com/nuwave/lighthouse/pull/927\n\n## v4.1.0\n\n### Added\n\n- Add the `@whereJsonContains` directive to an input value as\n  a [whereJsonContains filter\n- Allow using callable classes with `__invoke` when referencing methods in directives\n  and when looking for default resolvers or type resolvers https://github.com/nuwave/lighthouse/issues/882\n- Allow to restrict column names to a well-defined list in `@whereContraints`\n  and generate definitions for an `Enum` type and an `Input` type\n  that are restricted to the defined columns https://github.com/nuwave/lighthouse/pull/916\n- Add test helpers for introspection queries to `MakesGraphQLRequests` https://github.com/nuwave/lighthouse/pull/916\n\n### Deprecated\n\n- The default name of resolver and type resolver methods will be `__invoke` in v5 https://github.com/nuwave/lighthouse/issues/882\n\n### Fixed\n\n- Fixed the `ValidationDirective` not setting the mutation or query arguments to itself https://github.com/nuwave/lighthouse/pull/915\n\n## v4.0.0\n\n### Added\n\n- Add the `@namespace` directive as a replacement for the removed `@group` directive https://github.com/nuwave/lighthouse/pull/768\n- The `@defer` extension now supports deferring nested fields of mutations https://github.com/nuwave/lighthouse/pull/855\n- Add a simple way to define complex validation directives by\n  extending `\\Nuwave\\Lighthouse\\Schema\\Directives\\ValidationDirective` https://github.com/nuwave/lighthouse/pull/846\n- Extend the `@belongsToMany` directive to support pivot data on a custom Relay style Edge type https://github.com/nuwave/lighthouse/pull/871\n- Implement `connect`, `disconnect` and `delete` operations for nested mutations upon MorphTo relationships https://github.com/nuwave/lighthouse/pull/879\n\n### Fixed\n\n- Avoid growing the memory extensively when doing complex AST manipulation https://github.com/nuwave/lighthouse/pull/768\n- Make nested mutations work with subclassed relationship types https://github.com/nuwave/lighthouse/pull/825\n- Allow empty arrays and other falsy values as input for nested mutation operations like \"sync\" https://github.com/nuwave/lighthouse/pull/830\n- Use `Illuminate\\Contracts\\Config\\Repository` instead of `Illuminate\\Config\\Repository` https://github.com/nuwave/lighthouse/issues/832\n- Allow checking the abilities with `@can` when issuing mass updates on multiple models https://github.com/nuwave/lighthouse/pull/838\n- Allow use of `private` in `@cache` directive even when the user is not authenticated https://github.com/nuwave/lighthouse/pull/843\n- Fix Lumen route registration https://github.com/nuwave/lighthouse/pull/853\n- Fix handling of `@include` directive, it is semantically opposite to `@skip`, when using it with `@defer` https://github.com/nuwave/lighthouse/pull/855\n- Allow querying for null values using `@whereConstraints` https://github.com/nuwave/lighthouse/pull/872\n- Fix issue when using the `@model` directive in a type that has a list field https://github.com/nuwave/lighthouse/pull/883\n- Make the `@include` and `@skip` directives that are part of the GraphQL spec show up in introspection\n  and fix handling of default values in custom client directives https://github.com/nuwave/lighthouse/pull/892\n\n### Changed\n\n- Bumped the requirement on `webonyx/graphql-php` to `^0.13.2` https://github.com/nuwave/lighthouse/pull/768\n- Rename directive interfaces dealing with types from `Node*` to `Type*` https://github.com/nuwave/lighthouse/pull/768\n- Change the signature of the AST manipulating directive interfaces:\n  `TypeManipulator`, `FieldManipulator` and `ArgManipulator` https://github.com/nuwave/lighthouse/pull/768\n- Change the API of the `DocumentAST` class to enable a more performant implementation https://github.com/nuwave/lighthouse/pull/768\n- Enable the schema caching option `lighthouse.cache.enable` by default https://github.com/nuwave/lighthouse/pull/768\n- Lazily load types from the schema. Directives defined on parts of the schema that are not used within the current\n  query are no longer run on every request https://github.com/nuwave/lighthouse/pull/768\n- Simplify the default route configuration.\n  Make sure to review your `config/lighthouse.php` and bring it up to date\n  with the latest changes in the base configuration file https://github.com/nuwave/lighthouse/pull/820\n- Move `SubscriptionExceptionHandler` into namespace `Nuwave\\Lighthouse\\Subscriptions\\Contracts` https://github.com/nuwave/lighthouse/pull/819\n- The pagination field argument that controls the amount of results\n  now defaults to `first` instead of `count`. The config `pagination_amount_argument`\n  can be used to change the argument name https://github.com/nuwave/lighthouse/pull/852\n- Rename `ArgValidationDirective` to `ProvidesRules` and drop `get` prefix from the methods within https://github.com/nuwave/lighthouse/pull/846\n- Make the argument used for finding a model to check `@can` against configurable.\n  The previous behaviour of implicitly using the `id` argument for finding a specific\n  model to authorize against now no longer works. https://github.com/nuwave/lighthouse/pull/856\n- Change the `Nuwave\\Lighthouse\\Schema\\Types\\LaravelEnumType` wrapper to map\n  to Enum instances internally https://github.com/nuwave/lighthouse/pull/908\n\n### Removed\n\n- Remove `@group` directive in favor of `@middleware` and `@namespace` https://github.com/nuwave/lighthouse/pull/768\n- Remove the `ArgFilterDirective` interface in favor of the `ArgBuilderDirective` interface https://github.com/nuwave/lighthouse/pull/821\n- Remove the old style `@whereBetween` and `@whereNotBetween` directives https://github.com/nuwave/lighthouse/pull/821\n- Use the `@spread` directive instead of the `flatten` argument of `@create`/`@update` https://github.com/nuwave/lighthouse/pull/822\n- Remove `dispatch` aliases `fire` and `class` for dispatching through `@event` https://github.com/nuwave/lighthouse/pull/823\n- Remove the `GraphQL` facade and the container alias `graphql` https://github.com/nuwave/lighthouse/pull/824\n- Remove the alias `if` for specifying the `ability` that has to be met in `@can` https://github.com/nuwave/lighthouse/pull/838\n\n### Deprecated\n\n- The configuration option `pagination_amount_argument` will be removed in v5\n\n## v3.7.0\n\n### Added\n\n- Add compatibility layer to allow `@middleware` to support Lumen https://github.com/nuwave/lighthouse/pull/786\n- Add option `decode` to `@globaldId` to control the result of decoding https://github.com/nuwave/lighthouse/pull/796\n- Add config option `cache.ttl` for customizing expiration time of schema cache https://github.com/nuwave/lighthouse/pull/801\n- Extract test helpers into a reusable trait `\\Nuwave\\Lighthouse\\Testing\\MakesGraphQLRequests` https://github.com/nuwave/lighthouse/pull/802\n- Support custom rule classes in `@rules` and `@rulesForArray` https://github.com/nuwave/lighthouse/pull/812\n\n### Fixed\n\n- Fix querying for falsy values through `@whereConstraints` https://github.com/nuwave/lighthouse/pull/800\n- Use `Illuminate\\Contracts\\Events\\Dispatcher` instead of concrete implementation\n  in SubscriptionBroadcaster https://github.com/nuwave/lighthouse/pull/805\n\n### Deprecated\n\n- The `GraphQL` facade and the container alias `graphql` will be removed in v4\n\n## v3.6.1\n\n### Fixed\n\n- Use the spec-compliant default deprecation reason for `@deprecate` directive https://github.com/nuwave/lighthouse/pull/787\n\n## v3.6.0\n\n### Added\n\n- Add `@whereConstraints` directive that offers flexible query capabilities to the client https://github.com/nuwave/lighthouse/pull/753\n- Add convenience wrapper for registering Enum types based on [BenSampo/laravel-enum\n  https://github.com/nuwave/lighthouse/pull/779\n\n### Deprecated\n\n- The `controller` config option will be removed in v4 https://github.com/nuwave/lighthouse/pull/781\n\n## v3.5.3\n\n### Fixed\n\n- Respect the model's connection for database transaction during `@create` and `@update` https://github.com/nuwave/lighthouse/pull/777\n\n## v3.5.2\n\n### Fixed\n\n- You can now omit an `input` argument from a query that uses\n  the `@spread` directive without getting an error https://github.com/nuwave/lighthouse/pull/774\n\n### Deprecated\n\n- The class `SubscriptionExceptionHandler` will be moved to the namespace Nuwave\\Lighthouse\\Subscriptions\\Contracts\n\n## v3.5.1\n\n### Fixed\n\n- Throw error if pagination amount `<= 0` is requested https://github.com/nuwave/lighthouse/pull/765\n\n## v3.5.0\n\n### Changed\n\n- Default the config to always set the `Accept: application/json` header https://github.com/nuwave/lighthouse/pull/743\n- Declare a single named route which handles POST/GET instead of 2 separate routes https://github.com/nuwave/lighthouse/pull/738\n- Apply the nested operations within a nested mutation in a consistent order\n  that makes sense https://github.com/nuwave/lighthouse/pull/754\n\n### Deprecated\n\n- The pagination field argument that controls the amount of results\n  will default to `first` instead of `count` in v4. The config `pagination_amount_argument`\n  can be used to change the argument name now https://github.com/nuwave/lighthouse/pull/752\n\n### Fixed\n\n- Instantiate the `ErrorBuffer` directly, its dependencies\n  can not be resolved through the container https://github.com/nuwave/lighthouse/pull/756\n- Refresh `GraphQLRequest` singleton between multiple requests to prevent\n  a common error in test execution https://github.com/nuwave/lighthouse/pull/761\n\n## v3.4.0\n\n### Added\n\n- Allow rebinding a custom GlobalId resolver https://github.com/nuwave/lighthouse/pull/739\n\n## v3.3.0\n\n### Added\n\n- Sync existing models in belongsToMany relations using nested mutations when creating https://github.com/nuwave/lighthouse/pull/707\n- Add `@spread` directive to reshape nested input arguments https://github.com/nuwave/lighthouse/pull/680\n- Add flexible `@builder` directive to quickly specify a single method to apply constraints\n  to the query builder https://github.com/nuwave/lighthouse/pull/680\n- Add `new_between_directives` config to use the new between directives now https://github.com/nuwave/lighthouse/pull/680\n\n### Deprecated\n\n- Use the `@spread` instead of the `flatten` argument of `@create`/`@update` https://github.com/nuwave/lighthouse/pull/680\n- Prefer usage of the `ArgBuilderDirective` instead of the `ArgFilterDirective` https://github.com/nuwave/lighthouse/pull/680\n- `@whereBetween` and `@whereNotBetween` will take a single input object\n  instead of being spread across two args https://github.com/nuwave/lighthouse/pull/680\n\n## v3.2.1\n\n### Changed\n\n- Flatten the namespace for the built-in directives https://github.com/nuwave/lighthouse/pull/700\n\n## v3.2.0\n\n### Added\n\n- Sync and connect existing models in morphToMany relations using nested mutations https://github.com/nuwave/lighthouse/pull/707\n\n## v3.1.0\n\n### Added\n\n- Adapt to the new Laravel way and add an alias `dispatch` for the `@event` directive https://github.com/nuwave/lighthouse/pull/719\n\n### Deprecated\n\n- Aliases `fire` and `class` for dispatching through `@event` https://github.com/nuwave/lighthouse/pull/719\n\n## v3.0.0\n\n### Added\n\n- Support Subscriptions https://github.com/nuwave/lighthouse/pull/337\n- Support `@defer` client directive https://github.com/nuwave/lighthouse/pull/422\n- Define validation for list arguments themselves through `@rulesForArray` https://github.com/nuwave/lighthouse/pull/427\n- The `@hasMany` and `@paginator` directives now support an additional argument `defaultCount`\n  that sets a default value for the generated field argument `count` https://github.com/nuwave/lighthouse/pull/428\n- Allow user to be guest when using the `@can` directive https://github.com/nuwave/lighthouse/pull/431\n- Add shortcut to get NodeValue type definition fields https://github.com/nuwave/lighthouse/pull/432\n- Use `@inject` with dot notation to set nested value https://github.com/nuwave/lighthouse/pull/511\n- Populate more relationship types through nested mutations https://github.com/nuwave/lighthouse/pull/514 https://github.com/nuwave/lighthouse/pull/549\n- Support the `@deprecated` directive https://github.com/nuwave/lighthouse/pull/522\n- Allow defining default namespaces as an array https://github.com/nuwave/lighthouse/pull/525\n- Add config & directive argument for `@paginate` to limit the maximum requested count https://github.com/nuwave/lighthouse/pull/569\n- Add `guard` argument to `@auth` directive https://github.com/nuwave/lighthouse/pull/584\n- Support Laravel 5.8 https://github.com/nuwave/lighthouse/pull/626\n- Support File Uploads https://github.com/nuwave/lighthouse/pull/628\n- Add lifecycle events to hook into the execution https://github.com/nuwave/lighthouse/pull/645\n- Add `@orderBy` argument directive for client-side dynamic ordering https://github.com/nuwave/lighthouse/pull/659\n- Enable passing in model instance to `@can` directive https://github.com/nuwave/lighthouse/pull/684\n- Allow swapping out the default resolver https://github.com/nuwave/lighthouse/pull/690\n\n### Changed\n\n- Change the default schema location, model and GraphQL namespaces https://github.com/nuwave/lighthouse/pull/423\n- Construction and methods of the Field|Node|Arg-Value objects https://github.com/nuwave/lighthouse/pull/425\n- The methods called with `@method` now receive the same 4 resolver arguments that all\n  other resolvers do https://github.com/nuwave/lighthouse/pull/486\n- Handle mutating directives transactional by default https://github.com/nuwave/lighthouse/pull/512\n- Nested mutations for BelongsTo require wrapping the ID in a\n  `connect` argument https://github.com/nuwave/lighthouse/pull/514 https://github.com/nuwave/lighthouse/pull/549\n- Make the error messages returned by `@can` more friendly https://github.com/nuwave/lighthouse/pull/515\n- Bump requirements for `webonyx/graphql-php` to `^0.13` and PHP to `>= 7.1` https://github.com/nuwave/lighthouse/pull/517\n- Replace `DirectiveRegistry` with `DirectiveFactory` to lazy load directives https://github.com/nuwave/lighthouse/pull/520\n- Extensions must be registered through ServiceProviders instead of the config file https://github.com/nuwave/lighthouse/pull/645\n- Increase tracing precision when nanoseconds are available https://github.com/nuwave/lighthouse/pull/674\n\n### Fixed\n\n- Diverging paths of nested input objects can now have distinct validation rules https://github.com/nuwave/lighthouse/pull/427\n- Distinguish between FieldDefinitions and InputObjectValues in AST handling https://github.com/nuwave/lighthouse/pull/425\n- Set the date in the `Date` scalar to startOfDay, fixes equality checks https://github.com/nuwave/lighthouse/pull/452\n- Use primary key defined in model to execute update https://github.com/nuwave/lighthouse/pull/469\n- Consider batched queries when using BatchLoader https://github.com/nuwave/lighthouse/pull/508\n- Refresh newly created models before returning them https://github.com/nuwave/lighthouse/pull/509\n- Prevent name conflict between argument names and non-relation methods when executing nested mutations https://github.com/nuwave/lighthouse/pull/519\n- Prevent crash when invalid JSON variables are given https://github.com/nuwave/lighthouse/pull/581\n- Handle pagination with Laravel Scout correctly https://github.com/nuwave/lighthouse/pull/661\n- Handle schema defined default values for enum types correctly https://github.com/nuwave/lighthouse/pull/689\n\n### Removed\n\n- Remove the previously broken `@validate` directive in favor of `@rules` https://github.com/nuwave/lighthouse/pull/427\n- Remove broken user mutations from the default schema https://github.com/nuwave/lighthouse/pull/435\n- Remove deprecated methods https://github.com/nuwave/lighthouse/pull/435\n- Limit the `@field` directive to using the `resolver` argument https://github.com/nuwave/lighthouse/pull/435\n- Remove the `@security` directive in favor of defining security options through the config https://github.com/nuwave/lighthouse/pull/435\n- Rename the `resolver` argument of `@interface` and `@union` to `resolveType` https://github.com/nuwave/lighthouse/pull/435\n- Remove deprecated Traits https://github.com/nuwave/lighthouse/pull/435\n\n## Pre-v3\n\nWe just started maintaining a changelog starting from v3.\n\nIf someone wants to make one for previous versions, pull requests are welcome.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.0859375,
          "content": "# How to contribute to Lighthouse\n\nThank you for contributing to Lighthouse. Here are some tips to make this easy for you.\n\n## The process\n\nIf this is your first time contributing to any project on GitHub, see [First Contributions](https://github.com/firstcontributions/first-contributions/blob/master/README.md).\nFor this project specifically, follow these steps:\n\n1. Fork the project\n1. Clone the repository\n1. [Set up the project](#setup)\n1. Create a branch\n1. Code according to the [guidelines](#code-guidelines) and [style](#code-style)\n1. [Test your changes](#testing)\n1. Commit and push\n1. Open a pull request, following the [template](.github/PULL_REQUEST_TEMPLATE.md)\n\n## Setup\n\nThis section describes the setup of  a local development environment to run tests\nand other quality tools.\n\n### Docker + Make\n\nA reproducible environment with minimal dependencies:\n\n- [docker-compose](https://docs.docker.com/compose/install)\n- [GNU Make](https://www.gnu.org/software/make) (optional)\n\nFor convenience, common tasks during development are wrapped up in the [Makefile](Makefile).\nTo see the available commands, run:\n\n    make help\n\nClone the project and run the following in the project root:\n\n    make setup\n\nBefore you commit changes, run all validation steps with:\n\n    make\n\n### Native Tools\n\nYou can use native tools instead of Docker + Make, with the following requirements:\n\n- PHP (see [composer.json](composer.json) for the minimal required version)\n- Composer (version 2 is recommended)\n- MySQL (any Laravel supported version should work)\n- Redis 6\n\nClone the project and run the following in the project root:\n\n    composer install\n\nCopy the PHPUnit configuration:\n\n    cp phpunit.xml.dist phpunit.xml\n\nChange the `env` parameters to connect to MySQL and Redis test instances.\n\nCommon tasks during development are listed in the `scripts` section of [composer.json](composer.json).\n\n## Testing\n\nWe use **PHPUnit** for unit tests and integration tests.\n\nHave a new feature? You can start off by writing some tests that detail\nthe behaviour you want to achieve and go from there.\n\nFixing a bug? The best way to ensure it is fixed for good and never comes\nback is to write a failing test for it and then make it pass. If you cannot\nfigure out how to fix it yourself, feel free to submit a PR with a failing test.\n\nHere is how to set up Xdebug in PhpStorm https://www.jetbrains.com/help/phpstorm/configuring-xdebug.html\n\n> Enabling Xdebug slows down tests by an order of magnitude.\n> Stop listening for Debug Connection to speed it back up.\n\nSet the environment variable `XDEBUG_REMOTE_HOST` to the IP of your host machine as\nseen from the Docker container. This may differ based on your setup: When running\nDocker for Desktop, it is usually `10.0.2.2`, when running from a VM it is something else.\n\n### Test Data Setup\n\nUse relations over direct access to foreign keys.\n\n```php\n$user = factory(User::class)->create();\n\n// Right\n$post = factory(Post::class)->make();\n$user->post()->save();\n\n// Wrong\n$user = factory(Post::class)->create([\n    'user_id' => $post->id,\n]);\n```\n\nUse properties over arrays to fill fields.\n\n```php\n// Right\n$user = new User();\n$user->name = 'Sepp';\n$user->save();\n\n// Wrong\n$user = User::create([\n    'name' => 'Sepp',\n]);\n```\n\n## Working with proto files\n\nLighthouse uses [protobuf](https://developers.google.com/protocol-buffers) files for [federated tracing](src/Tracing/FederatedTracing/reports.proto).\nWhen updating the proto files, the PHP classes need to be regenerated.\nThe generation is done with [buf](https://buf.build/docs/generate/overview).\nThe `make proto` command generates the new PHP classes and replace the old ones.\n\n## Documentation\n\n### External\n\nThe documentation for Lighthouse is located in [`/docs`](/docs).\nSee [/docs/.github/README.md](/docs/.github/README.md) for more information on how to contribute to the docs.\n\n### Internal\n\nMark classes or methods that are meant to be used by end-users with the `@api` PHPDoc tag.\nThose elements are guaranteed to not change until the next major release.\n\n## Changelog\n\nWe keep a [changelog](/CHANGELOG.md) to inform users about changes in our releases.\n\nWhen you change something notable, add it to the top of the file in the `Unreleased` section.\n\nChoose the appropriate type for your change:\n\n- `Added` for new features.\n- `Changed` for changes in existing functionality.\n- `Deprecated` for soon-to-be removed features.\n- `Removed` for now removed features.\n- `Fixed` for any bug fixes.\n- `Security` in case of vulnerabilities.\n\nThen, add a short description of your change and close it off with a link to your PR.\n\n## Code guidelines\n\n### Extensibility\n\nWe cannot foresee every possible use case in advance, extending the code should remain possible.\n\n#### `protected` over `private`\n\nAlways use class member visibility `protected` over `private`.\n\n#### `final` classes\n\nPrefer `final` classes in [tests](tests), but never use them in [src](src).\n\n### Laravel feature usage\n\nWe strive to be compatible with both Lumen and Laravel.\n\nDo not use Facades and utilize dependency injection instead.\nNot every application has them enabled - Lumen does not use Facades by default.\n\nPrefer direct usage of Illuminate classes instead of helpers.\n\n```diff\n-array_get($foo, 'bar');\n+use \\Illuminate\\Support\\Arr;\n+Arr::get($foo, 'bar');\n```\n\nA notable exception is the `response()` helper - using DI for injecting a\n`ResponseFactory` does not work in Lumen, while `response()` works for both.\n\n### Type definitions\n\nPrefer the strictest possible type annotations wherever possible.\nIf known, add additional type information in the PHPDoc.\n\n```php\n/**\n * We know we get an array of strings here.\n *\n * @param  array<string>  $bar\n * @return string\n */\nfunction foo(array $bar): string\n```\n\nFor aggregate types such as the commonly used `Collection` class, use\nthe generic type hint style. While not officially part of PHPDoc, it is understood\nby PhpStorm and most other editors.\n\n```php\n/**\n * Hint at the contents of the Collection.\n *\n * @return \\Illuminate\\Support\\Collection<string>\n */\nfunction foo(): Collection\n```\n\nUse `self` to annotate that a class returns an instance of itself (or its child).\nUse [PHPDoc type hints](https://docs.phpdoc.org/guides/types.html#keywords) to\ndifferentiate between cases where you return the original object instance and\nother cases where you instantiate a new class.\n\n```php\nclass Foo\n{\n    /**\n     * Some attribute.\n     */\n    protected string $bar;\n\n    /**\n     * Use $this for fluent setters when we expect the exact same object back.\n     *\n     * @return $this\n     */\n    public function setBar(string $bar): self\n    {\n        $this->bar = $bar;\n\n        return $this;\n    }\n\n    /**\n     * Use static when you return a new instance.\n     *\n     * @return static\n     */\n    public function duplicate(): self\n    {\n        $instance = new static;\n        $instance->bar = $this->bar;\n\n        return $instance;\n    }\n}\n```\n\n## Code style\n\nWe format the code automatically with [php-cs-fixer](https://github.com/friendsofphp/php-cs-fixer).\n\n    make fix\n\nPrefer explicit naming and short, focused functions over excessive comments.\n\n### Alignment\n\nDo not align stuff horizontally, it leads to ugly diffs.\n\n```php\n// Right\n[\n    'foo' => 1,\n    'barbaz' => 2,\n]\n\n// Wrong\n[\n    'foo'    => 1,\n    'barbaz' => 2,\n]\n```\n\n### Multiline Ternary Expressions\n\nTernary expressions must be spread across multiple lines.\n\n```php\n$foo = $cond\n    ? 1\n    : 2;\n```\n\n### Class References\n\nWhen used in the actual source code, classes must always be imported at the top.\nClass references in PHPDoc must use the full namespace.\n\n```php\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Foo\n{\n    /**\n     * @var \\Illuminate\\Database\\Eloquent\\Model\n     */\n    protected $model;\n\n    public function bar(): Model\n    {\n        return $this->model;\n    }\n}\n```\n\nYou can use the following two case-sensitive regexes to search for violations:\n\n```regexp\n@(var|param|return|throws).*\\|[A-Z]\n@(var|param|return|throws)\\s*[A-Z]\n```\n\n## Benchmarks\n\nWe use [phpbench](https://github.com/phpbench/phpbench) for running benchmarks\non performance critical pieces of code.\n\nRun the reports that are defined in `phpbench.json` via the command line:\n\n    make bench\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "MIT License\n\nCopyright (c) 2018 Christopher Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.2998046875,
          "content": "dcphp=$$(echo \"docker-compose exec php\")\ndcnode=$$(echo \"docker-compose exec node\")\n\n.PHONY: it\nit: vendor fix stan test ## Run useful checks before commits\n\n.PHONY: help\nhelp: ## Display this list of targets with descriptions\n\t@grep --extended-regexp '^[a-zA-Z0-9_-]+:.*?## .*$$' $(firstword $(MAKEFILE_LIST)) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[32m%-30s\\033[0m %s\\n\", $$1, $$2}'\n\n.PHONY: setup\nsetup: build docs/node_modules vendor ## Prepare the local environment\n\n.PHONY: build\nbuild: ## Build the local Docker containers\n\t# Using short options of `id` to ensure compatibility with macOS, see https://github.com/nuwave/lighthouse/pull/2504\n\tdocker-compose build --pull --build-arg USER_ID=$(shell id -u) --build-arg GROUP_ID=$(shell id -g)\n\n.PHONY: up\nup: ## Bring up the docker-compose stack\n\tdocker-compose up --detach\n\n.PHONY: fix\nfix: rector php-cs-fixer prettier ## Automatically refactor and format code\n\n.PHONY: rector\nrector: up ## Refactor code with Rector\n\t${dcphp} vendor/bin/rector process\n\n.PHONY: php-cs-fixer\nphp-cs-fixer: up ## Format code with php-cs-fixer\n\t${dcphp} vendor/bin/php-cs-fixer fix\n\n.PHONY: prettier\nprettier: up ## Format code with prettier\n\t${dcnode} yarn run prettify\n\n.PHONY: stan\nstan: up ## Run static analysis with PHPStan\n\t${dcphp} vendor/bin/phpstan --verbose\n\n.PHONY: test\ntest: up ## Run tests with PHPUnit\n\t${dcphp} vendor/bin/phpunit\n\n.PHONY: bench\nbench: up ## Run benchmarks with PHPBench\n\t${dcphp} vendor/bin/phpbench run --report=aggregate\n\nvendor: up composer.json ## Install composer dependencies\n\t${dcphp} composer update\n\t${dcphp} composer validate --strict\n\t${dcphp} composer normalize\n\n.PHONY: php\nphp: up ## Open an interactive shell into the PHP container\n\t${dcphp} bash\n\n.PHONY: node\nnode: up ## Open an interactive shell into the Node container\n\t${dcnode} bash\n\n.PHONY: release\nrelease: ## Prepare the docs for a new release\n\trm -rf docs/6 && cp -r docs/master docs/6\n\n.PHONY: docs\ndocs: up ## Render the docs in a development server\n\t${dcnode} yarn run start\n\ndocs/node_modules: up docs/package.json docs/yarn.lock ## Install yarn dependencies\n\t${dcnode} yarn\n\n.PHONY: proto/update-reports\nproto/update-reports:\n\t${dcphp} curl --silent --show-error --fail --output src/Tracing/FederatedTracing/reports.proto https://usage-reporting.api.apollographql.com/proto/reports.proto\n\t${dcphp} sed --in-place 's/ \\[(js_use_toArray) = true]//g' src/Tracing/FederatedTracing/reports.proto\n\t${dcphp} sed --in-place 's/ \\[(js_preEncoded) = true]//g' src/Tracing/FederatedTracing/reports.proto\n\t${dcphp} sed --in-place '3 i option php_namespace = \"Nuwave\\\\\\\\Lighthouse\\\\\\\\Tracing\\\\\\\\FederatedTracing\\\\\\\\Proto\";' src/Tracing/FederatedTracing/reports.proto\n\t${dcphp} sed --in-place '4 i option php_metadata_namespace = \"Nuwave\\\\\\\\Lighthouse\\\\\\\\Tracing\\\\\\\\FederatedTracing\\\\\\\\Proto\\\\\\\\Metadata\";' src/Tracing/FederatedTracing/reports.proto\n\n.PHONY: proto\nproto:\n\tdocker run --rm --volume=.:/workdir --workdir=/workdir --pull=always bufbuild/buf generate\n\trm -rf src/Tracing/FederatedTracing/Proto\n\t# Using short options of `id` to ensure compatibility with macOS, see https://github.com/nuwave/lighthouse/pull/2504\n\tsudo chown --recursive \"$(shell id -u):$(shell id -g)\" proto-tmp\n\tmv proto-tmp/Nuwave/Lighthouse/Tracing/FederatedTracing/Proto src/Tracing/FederatedTracing/Proto\n\trm -rf proto-tmp\n\t$(MAKE) php-cs-fixer\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.337890625,
          "content": "<div align=\"center\">\n  <a href=\"https://lighthouse-php.com\">\n    <img src=\"logo.png\" alt=lighthouse-logo\" width=\"150\" height=\"150\">\n  </a>\n</div>\n\n<div align=\"center\">\n\n# Lighthouse\n\n[![Validate](https://github.com/nuwave/lighthouse/workflows/Validate/badge.svg)](https://github.com/nuwave/lighthouse/actions)\n[![Code Coverage](https://codecov.io/gh/nuwave/lighthouse/branch/master/graph/badge.svg)](https://codecov.io/gh/nuwave/lighthouse)\n[![PHPStan](https://img.shields.io/badge/PHPStan-enabled-brightgreen.svg?style=flat)](https://github.com/phpstan/phpstan)\n\n[![Packagist](https://img.shields.io/packagist/dt/nuwave/lighthouse.svg)](https://packagist.org/packages/nuwave/lighthouse)\n[![Latest Stable Version](https://poser.pugx.org/nuwave/lighthouse/v/stable)](https://packagist.org/packages/nuwave/lighthouse)\n[![GitHub license](https://img.shields.io/github/license/nuwave/lighthouse.svg)](https://github.com/nuwave/lighthouse/blob/master/LICENSE)\n\n**A framework for serving GraphQL from Laravel**\n\n</div>\n\nLighthouse is a GraphQL framework that integrates with your Laravel application.\nIt takes the best ideas of both and combines them to solve common tasks with ease\nand offer flexibility when you need it.\n\n## Documentation\n\nThe documentation lives at [lighthouse-php.com](https://lighthouse-php.com).\n\nThe site includes the latest docs for each major version of Lighthouse.\nYou can find docs for specific versions by looking at the contents of [/docs/master](/docs/master)\nat that point in the git history: `https://github.com/nuwave/lighthouse/tree/<SPECIFIC-TAG>/docs/master`.\n\n## Get involved\n\n- Have a question? [Get your answer using GitHub discussions](https://github.com/nuwave/lighthouse/discussions/new?category=q-a)\n- Talk to other users? [Start a discussion](https://github.com/nuwave/lighthouse/discussions/new?category=general)\n- Found a bug? [Report a bug](https://github.com/nuwave/lighthouse/issues/new?template=bug_report.md)\n- Have an idea? [Propose a feature](https://github.com/nuwave/lighthouse/issues/new?template=feature_proposal.md)\n- Want to improve Lighthouse? [Read our contribution guidelines](https://github.com/nuwave/lighthouse/blob/master/CONTRIBUTING.md)\n\n## Versioning\n\nLighthouse follows [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\nOnly the current major version receives new features and bugfixes.\n\nUpdating between minor versions will not require changes to PHP code or the GraphQL schema\nand cause no breaking behavioural changes for consumers of the GraphQL API.\nHowever, only code elements marked with `@api` will remain compatible - all other code in\nLighthouse is considered internal and is thus subject to change.\n\n## Changelog\n\nAll notable changes to this project are documented in [`CHANGELOG.md`](CHANGELOG.md).\n\n## Upgrade Guide\n\nWhen upgrading between major versions of Lighthouse, consider [`UPGRADE.md`](UPGRADE.md).\n\n## Contributing\n\nWe welcome contributions of any kind, see how in [`CONTRIBUTING.md`](CONTRIBUTING.md).\n\n## Security Vulnerabilities\n\nIf you discover a security vulnerability within Lighthouse,\nplease email Benedikt Franke via [benedikt@franke.tech](mailto:benedikt@franke.tech).\n\n## Sponsors\n\nLighthouse is supported by [its awesome sponsors](https://lighthouse-php.com/sponsors).\n\nIf you want to support the development of Lighthouse and see your logo there, consider [sponsoring](https://github.com/sponsors/spawnia).\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 26.1435546875,
          "content": "# Upgrade guide\n\nThis document provides guidance for upgrading between major versions of Lighthouse.\n\n## General tips\n\nThe configuration options often change between major versions.\nCompare your `lighthouse.php` against the latest [default configuration](src/lighthouse.php).\n\n## v6 to v7\n\n### Leverage automatic test trait setup\n\nMethods you need to explicitly call to set up test traits were removed in favor of automatically set up test traits.\nKeep in mind they only work when your test class extends `Illuminate\\Foundation\\Testing\\TestCase`.\n\n- Just remove calls to `Nuwave\\Lighthouse\\Testing\\RefreshesSchemaCache::bootRefreshesSchemaCache()`.\n- Replace calls to `Nuwave\\Lighthouse\\Testing\\MakesGraphQLRequests::setUpSubscriptionEnvironment()` with ` use Nuwave\\Lighthouse\\Testing\\TestsSubscriptions`.\n\n### `EnsureXHR` is enabled in the default configuration\n\nThe middleware `Nuwave\\Lighthouse\\Http\\Middleware\\EnsureXHR` is enabled in the default configuration.\nIt will prevent the following type of HTTP requests:\n- `GET` requests\n- `POST` requests that can be created using HTML forms\n\n### `@can` directive is replaced with `@can*` directives\n\nThe `@can` directive was removed in favor of more specialized directives:\n- with `find` field set: `@canFind`\n- with `query` field set: `@canQuery`\n- with `root` field set: `@canRoot`\n- with `resolved` field set: `@canResolved`\n- if none of the above are set: `@canModel`\n\n```diff\ntype Mutation {\n-   createPost(input: PostInput! @spread): Post! @can(ability: \"create\") @create\n+   createPost(input: PostInput! @spread): Post! @canModel(ability: \"create\") @create\n-   updatePost(input: PostInput! @spread): Post! @can(find: \"input.id\", ability: \"edit\") @update\n+   updatePost(input: PostInput! @spread): Post! @canFind(find: \"input.id\", ability: \"edit\") @update\n-   deletePosts(ids: [ID!]! @whereKey): [Post!]! @can(query: true, ability: \"delete\") @delete\n+   deletePosts(ids: [ID!]! @whereKey): [Post!]! @canQuery(ability: \"delete\") @delete\n}\n\ntype Query {\n-   posts: [Post!]! @can(resolved: true, ability: \"view\") @paginate\n+   posts: [Post!]! @canResolved(ability: \"view\") @paginate\n}\n\ntype Post {\n-   sensitiveInformation: String @can(root: true, ability: \"admin\")\n+   sensitiveInformation: String @canRoot(ability: \"admin\")\n}\n```\n\n## v5 to v6\n\n### `messages` on `@rules` and `@rulesForArray`\n\nLighthouse previously allowed passing a map with arbitrary keys as the `messages`\nargument of `@rules` and `@rulesForArray`. Such a construct is impossible to define\nwithin the directive definition and leads to static validation errors.\n\n```diff\n@rules(\n    apply: [\"max:280\"],\n-   messages: {\n-       max: \"Tweets have a limit of 280 characters\"\n-   }\n+   messages: [\n+       {\n+           rule: \"max\"\n+           message: \"Tweets have a limit of 280 characters\"\n+       }\n+   ]\n)\n```\n\n### Use filters in `@delete`, `@forceDelete` and `@restore`\n\nWhereas previously, those directives enforced the usage of a single argument and assumed that\nto be the ID or list of IDs of the models to modify, they now leverage argument filter directives.\nThis brings them in line with other directives such as `@find` and `@all`.\n\nYou will need to explicitly add `@whereKey` to the argument that contained the ID or IDs.\n\n```diff\ntype Mutation {\n-   deleteUser(id: ID!): User! @delete\n+   deleteUser(id: ID! @whereKey): User! @delete\n-   restoreUsers(userIDs: [ID!]!): [User!]! @restore\n+   restoreUsers(userIDs: [ID!]! @whereKey): [User!]! @restore\n}\n```\n\n### Use `@globalId` over `@delete(globalId: true)`\n\nThe `@delete`, `@forceDelete`, `@restore` and `@upsert` directives no longer offer the\n`globalId` argument. Use `@globalId` on the argument instead.\n\n```diff\ntype Mutation {\n-   deleteUser(id: ID!): User! @delete(globalId: true)\n+   deleteUser(id: ID! @globalId @whereKey): User! @delete\n}\n```\n\n### Specify `@guard(with: \"api\")` as `@guard(with: [\"api\"])`\n\nDue to Lighthouse's ongoing effort to provide static schema validation,\nthe `with` argument of `@guard` must now be provided as a list of strings.\n\n```diff\ntype Mutation {\n-   somethingSensitive: Boolean @guard(with: \"api\")\n+   somethingSensitive: Boolean @guard(with: [\"api\"])\n}\n```\n\n### Use subscriptions response format version 2\n\nThe previous version 1 contained a redundant key `channels` and is no longer supported.\n\n```diff\n{\n  \"data\": {...},\n  \"extensions\": {\n    \"lighthouse_subscriptions\": {\n-     \"version\": 1,\n+     \"version\": 2,\n      \"channel\": \"channel-name\"\n-     \"channels\": {\n-       \"subscriptionName\": \"channel-name\"\n-     },\n    }\n  }\n}\n```\n\nIt is recommended to switch to version 2 before upgrading Lighthouse to give clients\na smooth transition period.\n\n### Nullability of pagination results\n\nGenerated result types of paginated lists are now always marked as non-nullable.\nThe setting `non_null_pagination_results` was removed and now always behaves as if it were `true`.\n\nThis is generally more convenient for clients, but will\ncause validation errors to bubble further up in the result.\n\n### Nullability of pagination `first`\n\nPreviously, the pagination argument `first` was either marked as non-nullable,\nor non-nullable with a default value.\n\nNow, it will always be marked as non-nullable, regardless if it has a default or not.\nThis prevents clients from passing an invalid explicit `null`.\n\n### Complexity calculation\n\nPrior to `v6`, overwriting the default query complexity calculation on paginated fields\nrequired the usage of `@complexity` without any arguments. Now, `@paginate` performs that\ncalculation by default - with the additional change that it also includes the cost of the\nfield itself, adding a value of `1` to represent the complexity more accurately.\n\nUsing `@complexity` without the `resolver` argument is now no longer supported.\n\n### Passing of `BenSampo\\Enum\\Enum` instances to `ArgBuilderDirective::handleBuilder()`\n\nPrior to `v6`, Lighthouse would extract the internal `$value` from instances of\n`BenSampo\\Enum\\Enum` before passing it to `ArgBuilderDirective::handleBuilder()`\nif the setting `unbox_bensampo_enum_enum_instances` was `true`.\n\nThis is generally unnecessary, because Laravel automagically calls the Enum's `__toString()`\nmethod when using it in a query. This might affect users who use an `ArgBuilderDirective`\nthat delegates to a method that relies on an internal value being passed.\n\n```graphql\ntype Query {\n    withEnum(byType: AOrB @scope): WithEnum @find\n}\n```\n\n```php\n// WithEnum.php\npublic function scopeByType(Builder $builder, int $aOrB): Builder\n{\n    return $builder->where('type', $aOrB);\n}\n```\n\nIn the future, Lighthouse will pass the actual Enum instance along. You can opt in to\nthe new behaviour before upgrading by setting `unbox_bensampo_enum_enum_instances` to `false`. \n\n```php\npublic function scopeByType(Builder $builder, AOrB $aOrB): Builder\n```\n\n### Return resolver from `FieldResolver::resolveField()`\n\nInstead of calling `FieldValue::setResolver()`, directly return the resolver function.\n\n```diff\nuse Nuwave\\Lighthouse\\Execution\\ResolveInfo;\nuse Nuwave\\Lighthouse\\Schema\\Values\\FieldValue;\nuse Nuwave\\Lighthouse\\Support\\Contracts\\FieldResolver;\nuse Nuwave\\Lighthouse\\Support\\Contracts\\GraphQLContext;\n\nfinal class MyDirective extends BaseDirective implements FieldResolver\n{\n-   public function resolveField(FieldValue $fieldValue): FieldValue\n-   {\n-       $fieldValue->setResolver(function (mixed $root, array $args, GraphQLContext $context, ResolveInfo $resolveInfo): int {\n-           return 42;\n-       });\n-       return $fieldValue;\n+   public function resolveField(FieldValue $fieldValue): callable\n+   {\n+       return function (mixed $root, array $args, GraphQLContext $context, ResolveInfo $resolveInfo): int {\n+           return 42;\n+       };\n    }\n}\n```\n\n### Simplify wrapping resolvers in `FieldMiddleware` directives\n\nWrapping resolvers is very common in `FieldMiddleware` directives and is now simplified.\n\n```diff\nuse Nuwave\\Lighthouse\\Execution\\ResolveInfo;\nuse Nuwave\\Lighthouse\\Schema\\Values\\FieldValue;\nuse Nuwave\\Lighthouse\\Support\\Contracts\\FieldMiddleware;\nuse Nuwave\\Lighthouse\\Support\\Contracts\\GraphQLContext;\n\nfinal class MyDirective extends BaseDirective implements FieldMiddleware\n{\n-   public function handleField(FieldValue $fieldValue, \\Closure $next): FieldValue\n-   {\n-       $previousResolver = $fieldValue->getResolver();\n-       $fieldValue->setResolver(function (mixed $root, array $args, GraphQLContext $context, ResolveInfo $resolveInfo) use ($previousResolver) {\n-           return $previousResolver($root, $args, $context, $resolveInfo);\n-       });\n-       return $next($fieldValue);\n+   public function handleField(FieldValue $fieldValue): void\n+   {\n+       $fieldValue->wrapResolver(fn (callable $previousResolver) => function (mixed $root, array $args, GraphQLContext $context, ResolveInfo $resolveInfo) use ($previousResolver) {\n+           return $previousResolver($root, $args, $context, $resolveInfo);\n+       });\n    }\n}\n```\n\n### Adopt `FieldBuilderDirective::handleFieldBuilder()` signature\n\nLighthouse now passes the typical 4 resolver arguments to `FieldBuilderDirective::handleFieldBuilder()`.\nCustom directives the implement `FieldBuilderDirective` now have to accept those extra arguments.\n\n```diff\n+ use Nuwave\\Lighthouse\\Execution\\ResolveInfo\n+ use Nuwave\\Lighthouse\\Support\\Contracts\\GraphQLContext;\n\nfinal class MyDirective extends BaseDirective implements FieldBuilderDirective\n{\n-    public function handleFieldBuilder(object $builder): object;\n+    public function handleFieldBuilder(object $builder, mixed $root, array $args, GraphQLContext $context, ResolveInfo $resolveInfo): object;\n}\n```\n\n### Use `ResolveInfo::enhanceBuilder()`\n\n`ArgumentSet::enhanceBuilder()` was removed.\nYou must now call `ResolveInfo::enhanceBuilder()` and pass the resolver arguments.\n\n```diff\nuse Nuwave\\Lighthouse\\Execution\\ResolveInfo;\nuse Nuwave\\Lighthouse\\Support\\Contracts\\GraphQLContext;\n\n// Some resolver function or directive middleware\nfunction (mixed $root, array $args, GraphQLContext $context, ResolveInfo $resolveInfo) {\n-   $resolveInfo->argumentSet->enhanceBuilder($builder, $scopes, $directiveFilter);\n+   $resolveInfo->enhanceBuilder($builder, $scopes, $root, $args, $context, $resolveInfo, $directiveFilter);\n```\n\n### Replace `Nuwave\\Lighthouse\\GraphQL::executeQuery()` usage\n\nUse `executeQueryString()` for executing a string query or `executeParsedQuery()` for \nexecuting an already parsed `DocumentNode` instance.\n\n### Removed error extension field `category`\n\nSee https://github.com/webonyx/graphql-php/blob/master/UPGRADE.md#breaking-removed-error-extension-field-category.\n\nYou can [leverage `GraphQL\\Error\\ProvidesExtensions`](https://lighthouse-php.com/master/digging-deeper/error-handling.html#additional-error-information)\nto restore `category` in your custom exceptions. Additionally, you may [implement a custom error handler](https://lighthouse-php.com/master/digging-deeper/error-handling.html#registering-error-handlers)\nthat wraps well-known third-party exceptions with your own exception that adds an appropriate `category`.\n\n### Use native interface for errors with extensions\n\nUse `GraphQL\\Error\\ProvidesExtensions::getExtensions()` over `Nuwave\\Lighthouse\\Exceptions\\RendersErrorsExtensions::extensionsContent()`\nto return extra information from exceptions:\n\n```diff\nuse Exception;\n-use Nuwave\\Lighthouse\\Exceptions\\RendersErrorsExtensions;\n+use GraphQL\\Error\\ClientAware;\n+use GraphQL\\Error\\ProvidesExtensions;\n\n-class CustomException extends Exception implements RendersErrorsExtensions\n+class CustomException extends Exception implements ClientAware, ProvidesExtensions\n{\n-   public function extensionsContent(): array\n+   public function getExtensions(): array\n```\n\n### Use `RefreshesSchemaCache` over `ClearsSchemaCache`\n\nThe `ClearsSchemaCache` testing trait was prone to race conditions when running tests in parallel.\n\n```diff\n-use Nuwave\\Lighthouse\\Testing\\ClearsSchemaCache;\n+use Nuwave\\Lighthouse\\Testing\\RefreshesSchemaCache;\nuse Illuminate\\Foundation\\Testing\\TestCase as BaseTestCase;\n\nabstract class TestCase extends BaseTestCase\n{\n    use CreatesApplication;\n-   use ClearsSchemaCache;\n+   use RefreshesSchemaCache;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n-       $this->bootClearsSchemaCache();\n+       $this->bootRefreshesSchemaCache();\n     }\n}\n```\n\n### Schema caching v1 removal\n\nSchema caching now uses v2 only. That means, the schema cache will be\nwritten to a php file that OPCache will pick up instead of being written\nto the configured cache driver. This significantly reduces memory usage.\n\nIf you had previously depended on the presence of the schema in your\ncache, then you will need to change your code.\n\n### Register `ScoutServiceProvider` if you use `@search`\n\nIf you use the `@search` directive in your schema,\nyou will now need to register the service provider `Nuwave\\Lighthouse\\Scout\\ScoutServiceProvider`,\nit is no longer registered by default.\nSee [registering providers in Laravel](https://laravel.com/docs/providers#registering-providers).\n\n### Update `lighthouse.guard` configuration\n\nThe `lighthouse.guard` configuration key was renamed to `lighthouse.guards` and expects an array.\n\n```diff\n- 'guard' => 'api',\n+ 'guards' => ['api'],\n```\n\nIf `lighthouse.guards` configuration is missing,\nthe default Laravel authentication guard will be used (`auth.defaults.guard`).\n\n### Update `@auth` and `@whereAuth` directives\n\nThe `guard` argument of `@auth` and `@whereAuth` directives has been renamed to `guards` and now expects a list instead of a single string.\n\n```diff\n- @auth(guard: \"api\")\n+ @auth(guards: [\"api\"])\n- @whereAuth(guard: \"api\")\n+ @whereAuth(guards: [\"api\"])\n```\n\n## v4 to v5\n\n### Update PHP, Laravel and PHPUnit\n\nThe following versions are now the minimal required versions:\n\n- PHP 7.2\n- Laravel 5.6\n- PHPUnit 7\n\n### Final schema may change\n\nParts of the final schema are automatically generated by Lighthouse. Clients that depend on\nspecific fields or type names may have to adapt. The recommended process for finding breaking\nchanges is:\n\n1. Print your schema before upgrading: `php artisan lighthouse:print-schema > old.graphql`\n1. Upgrade, then re-print your schema: `php artisan lighthouse:print-schema > new.graphql`\n1. Use [graphql-inspector](https://github.com/kamilkisiela/graphql-inspector) to compare your\n   changes: `graphql-inspector diff old.graphql new.graphql`\n\n### Rename `resolve` to `__invoke`\n\nField resolver classes now only support the method name `__invoke`, using\nthe name `resolve` no longer works.\n\n```diff\nnamespace App\\GraphQL\\Queries;\n\nclass SomeField\n{\n-   public function resolve(...\n+   public function __invoke(...\n```\n\n### Replace `@middleware` with `@guard` and specialized FieldMiddleware\n\nThe `@middleware` directive has been removed, as it violates the boundary between HTTP and GraphQL request handling.\nLaravel middleware acts upon the HTTP request as a whole, whereas field middleware must only apply to a part of it. \n\nIf you used `@middleware` for authentication, replace it with [@guard](docs/master/api-reference/directives.md#guard):\n\n```diff\ntype Query {\n-   profile: User! @middleware(checks: [\"auth\"])\n+   profile: User! @guard\n}\n```\n\nNote that [@guard](docs/master/api-reference/directives.md#guard) does not log in users.\nTo ensure the user is logged in, add the `AttemptAuthenticate` middleware to your `lighthouse.php`\nmiddleware config, see the [default config](src/lighthouse.php) for an example.\n\nIf you used `@middleware` for authorization, replace it with [@can](docs/master/api-reference/directives.md#can).\n\nOther functionality can be replaced by a custom [`FieldMiddleware`](docs/master/custom-directives/field-directives.md#fieldmiddleware)\ndirective. Just like Laravel Middleware, it can wrap around individual field resolvers.\n\n### Directives must have an SDL definition\n\nThe interface `\\Nuwave\\Lighthouse\\Support\\Contracts\\Directive` now has the same functionality\nas the removed `\\Nuwave\\Lighthouse\\Support\\Contracts\\DefinedDirective`. If you previously\nimplemented `DefinedDirective`, remove it from your directives:\n\n```diff\n-use Nuwave\\Lighthouse\\Support\\Contracts\\DefinedDirective;\n\n-class TrimDirective extends BaseDirective implements ArgTransformerDirective, DefinedDirective\n+class TrimDirective extends BaseDirective implements ArgTransformerDirective\n```\n\nInstead of just providing the name of the directive, all directives must now return an SDL\ndefinition that formally describes them.\n\n```diff\n-    public function name()\n-    {\n-        return 'trim';\n-    }\n\n+    /**\n+     * Formal directive specification in schema definition language (SDL).\n+     *\n+     * @return string\n+     */\n+    public static function definition(): string\n+    {\n+        return /** @lang GraphQL */ <<<'GRAPHQL'\n+\"\"\"\n+A description of what this directive does.\n+\"\"\"\n+directive @trim(\n+    \"\"\"\n+    Directives can have arguments to parameterize them.\n+    \"\"\"\n+    someArg: String\n+) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION\n+GRAPHQL;\n+    }\n```\n\n### `@orderBy` argument renamed to `column`\n\nThe argument to specify the column to order by when using `@orderBy` was renamed\nto `column` to match the `@whereConditions` directive.\n\nClient queries will have to be changed like this:\n\n```diff\n{\n    posts (\n        orderBy: [\n            {\n-               field: POSTED_AT\n+               column: POSTED_AT\n                order: ASC\n            }\n        ]\n    ) {\n        title\n    }\n}\n```\n\nIf you absolutely cannot break your clients, you can re-implement `@orderBy` in your\nproject - it is a relatively simple `ArgManipulator` directive.\n\n### `@modelClass` and `@model` changed\n\nThe `@model` directive was repurposed to take the place of `@modelClass`. As a replacement\nfor the current functionality of `@model`, the new `@node` directive was added,\nsee https://github.com/nuwave/lighthouse/pull/974 for details.\n\nYou can adapt to this change in two refactoring steps that must be done in order:\n\n1. Rename all usages of `@model` to `@node`, e.g.:\n\n   ```diff\n   -type User @model {\n   +type User @node {\n       id: ID! @globalId\n   }\n   ```\n\n2. Rename all usages of `@modelClass` to `@model`, e.g.\n\n   ```diff\n   -type PaginatedPost @modelClass(class: \"\\\\App\\\\Post\") {\n   +type PaginatedPost @model(class: \"\\\\App\\\\Post\") {\n       id: ID!\n   }\n   ```\n\n### Replace `@bcrypt` with `@hash`\n\nThe new `@hash` directive is also used for password hashing, but respects the\nconfiguration settings of your Laravel project.\n\n```diff\ntype Mutation {\n    createUser(\n        name: String!\n-       password: String! @bcrypt\n+       password: String! @hash\n    ): User!\n}\n```\n\n### `@method` passes down just ordered arguments\n\nInstead of passing down the usual resolver arguments, the `@method` directive will\nnow pass just the arguments given to a field. This behaviour could previously be\nenabled through the `passOrdered` option, which is now removed.\n\n```graphql\ntype User {\n  purchasedItemsCount(year: Int!, includeReturns: Boolean): Int @method\n}\n```\n\nThe method will have to change like this:\n\n```diff\n-public function purchasedItemsCount(mixed $root, array $args)\n+public function purchasedItemsCount(int $year, ?bool $includeReturns)\n```\n\n### Implement `ArgDirective` or `ArgDirectiveForArray` explicitly\n\nThis affects custom directives that implemented one of the following interfaces:\n\n- `\\Nuwave\\Lighthouse\\Support\\Contracts\\ArgDirectiveForArray`\n- `\\Nuwave\\Lighthouse\\Support\\Contracts\\ArgTransformerDirective`\n- `\\Nuwave\\Lighthouse\\Support\\Contracts\\ArgBuilderDirective`\n\nWhereas those interfaces previously extended `\\Nuwave\\Lighthouse\\Support\\Contracts\\ArgDirective`, you now\nhave to choose if you want them to apply to entire lists of arguments, elements within that list, or both.\nChange them as follows to make them behave like in v4:\n\n```diff\n+use Nuwave\\Lighthouse\\Support\\Contracts\\ArgDirective;\nuse Nuwave\\Lighthouse\\Support\\Contracts\\ArgTransformerDirective;\nuse Nuwave\\Lighthouse\\Support\\Contracts\\DefinedDirective;\n\n-class MyCustomArgDirective extends BaseDirective implements ArgTransformerDirective, DefinedDirective\n+class MyCustomArgDirective extends BaseDirective implements ArgTransformerDirective, DefinedDirective, ArgDirective\n```\n\n### `ArgDirective` run in distinct phases\n\nThe application of directives that implement the `ArgDirective` interface is\nsplit into three distinct phases:\n\n- Sanitize: Clean the input, e.g. trim whitespace.\n  Directives can hook into this phase by implementing `ArgSanitizerDirective`.\n- Validate: Ensure the input conforms to the expectations, e.g. check a valid email is given\n- Transform: Change the input before processing it further, e.g. hashing passwords.\n  Directives can hook into this phase by implementing `ArgTransformerDirective`\n\n### Replace custom validation directives with validator classes\n\nThe `ValidationDirective` abstract class was removed in favour of validator classes.\nThey represent a more lightweight way and flexible way to reuse complex validation rules,\nnot only on fields but also on input objects.\n\nTo convert an existing custom validation directive to a validator class, change it as follows:\n\n```diff\n<?php\n\n-namespace App\\GraphQL\\Directives;\n+namespace App\\GraphQL\\Validators;\n\nuse Illuminate\\Validation\\Rule;\n-use Nuwave\\Lighthouse\\Schema\\Directives\\ValidationDirective;\n+use Nuwave\\Lighthouse\\Validation\\Validator;\n\n-class UpdateUserValidationDirective extends ValidationDirective\n+class UpdateUserValidator extends Validator\n{\n    /**\n     * @return array<string, array<mixed>>\n     */\n    public function rules(): array\n    {\n        return [\n            'id' => ['required'],\n-            'name' => ['sometimes', Rule::unique('users', 'name')->ignore($this->args['id'], 'id')],\n+            'name' => ['sometimes', Rule::unique('users', 'name')->ignore($this->arg('id'), 'id')],\n        ];\n    }\n}\n```\n\nInstead of directly using this class as a directive, place the `@validator` directive on your field.\n\n```graphql\ntype Mutation {\n- updateUser(id: ID, name: String): User @update @updateUserValidation\n+ updateUser(id: ID, name: String): User @update @validator\n}\n```\n\n### `Nuwave\\Lighthouse\\Subscriptions\\Events\\BroadcastSubscriptionEvent` is no longer fired\n\nThe event is no longer fired, and the event class was removed. Lighthouse now uses a queued job instead.\n\nIf you manually fired the event, replace it by queuing a `Nuwave\\Lighthouse\\Subscriptions\\BroadcastSubscriptionJob`\nor a call to `Nuwave\\Lighthouse\\Subscriptions\\Contracts\\BroadcastsSubscriptions::queueBroadcast()`.\n\nIn case you depend on an event being fired whenever a subscription is queued, you can bind your\nown implementation of `Nuwave\\Lighthouse\\Subscriptions\\Contracts\\BroadcastsSubscriptions`.\n\n### `TypeRegistry` does not register duplicates by default\n\nCalling `register()` on the `\\Nuwave\\Lighthouse\\Schema\\TypeRegistry` now throws when passing\na type that was already registered, as this most likely is an error.\n\nIf you want to previous behaviour of overwriting existing types, use `overwrite()` instead.\n\n```diff\n$typeRegistry = app(\\Nuwave\\Lighthouse\\Schema\\TypeRegistry::class);\n-$typeRegistry->register($someType);\n+$typeRegistry->overwrite($someType);\n```\n\n### Mass assignment protection is disabled by default\n\nSince GraphQL constrains allowed inputs by design, mass assignment protection is not needed.\nBy default, Lighthouse will use `forceFill()` when populating a model with arguments in mutation directives.\nThis allows you to use mass assignment protection for other cases where it is actually useful.\n\nIf you need to revert to the old behavior of using `fill()`, you can change your `lighthouse.php`:\n\n```diff\n-   'force_fill' => true,\n+   'force_fill' => false,\n```\n\n### Replace `ErrorBuffer` with `ErrorPool`\n\nCollecting partial errors is now done through the singleton `\\Nuwave\\Lighthouse\\Execution\\ErrorPool`\ninstead of `\\Nuwave\\Lighthouse\\Execution\\ErrorBuffer`:\n\n```php\ntry {\n    // Something that might fail but still allows for a partial result\n} catch (\\Throwable $error) {\n    $errorPool = app(\\Nuwave\\Lighthouse\\Execution\\ErrorPool::class);\n    $errorPool->record($error);\n}\n\nreturn $result;\n```\n\n### Use native `TestResponse::json()`\n\nThe `TestResponse::jsonGet()` mixin was removed in favor of the `->json()` method,\nnatively supported by Laravel starting from version 5.6.\n\n```diff\n$response = $this->graphQL(...);\n-$response->jsonGet(...);\n+$response->json(...);\n```\n\n### Use `GraphQL\\Language\\Parser` instead of `Nuwave\\Lighthouse\\Schema\\AST\\PartialParser`\n\nThe native parser from [webonyx/graphql-php](https://github.com/webonyx/graphql-php) now supports partial parsing.\n\n```diff\n-use Nuwave\\Lighthouse\\Schema\\AST\\PartialParser;\n+use GraphQL\\Language\\Parser;\n```\n\nMost methods work the same:\n\n```diff\n-PartialParser::directive(/** @lang GraphQL */ '@deferrable')\n+Parser::constDirective(/** @lang GraphQL */ '@deferrable')\n```\n\nA few are different:\n\n```diff\n-PartialParser::listType(\"[$restrictedOrderByName!]\");\n+Parser::typeReference(\"[$restrictedOrderByName!]\");\n\n-PartialParser::inputValueDefinitions([$foo, $bar]);\n+Parser::inputValueDefinition($foo);\n+Parser::inputValueDefinition($bar);\n```\n\n### Add method `defaultHasOperator` to `\\Nuwave\\Lighthouse\\WhereConditions\\Operator`\n\nSince the addition of the `HAS` input in `whereCondition` mechanics,\nthere has to be a default operator for the `HAS` input.\n\nIf you implement your own custom operator, implement `defaultHasOperator`.\nFor example, this is the implementation of the default `\\Nuwave\\Lighthouse\\WhereConditions\\SQLOperator`:\n\n```php\npublic function defaultHasOperator(): string\n{\n    return 'GTE';\n}\n```\n\n### Change `ErrorHandler` method `handle()`\n\nIf you implemented your own error handler, change it like this:\n\n```diff\nuse Nuwave\\Lighthouse\\Execution\\ErrorHandler;\n\nclass ExtensionErrorHandler implements ErrorHandler\n{\n-   public static function handle(Error $error, Closure $next): array\n+   public function __invoke(?Error $error, Closure $next): ?array\n    {\n        ...\n    }\n}\n```\n\nYou can now discard errors by returning `null` from the handler.\n\n### Upgrade to `mll-lab/graphql-php-scalars` v4\n\nIf you use complex where condition directives, such as `@whereConditions`,\nupgrade `mll-lab/graphql-php-scalars` to v4:\n\n    composer require mll-lab/graphql-php-scalars:^4\n\n### Subscriptions version 1 removal \n\nSubscriptions only use version 2 now. That means, the extensions content\nwill not contain the `channels` and `version` key anymore.\n\n```diff\n{\n  \"data\": {...},\n  \"extensions\": {\n    \"lighthouse_subscriptions\": {\n-      \"version\": 1,\n      \"channel\": \"channel-name\",\n-      \"channels\": {\n-        \"subscriptionName\": \"channel-name\"\n-      }\n    }\n  }\n}\n```\n"
        },
        {
          "name": "_ide_helper.php",
          "type": "blob",
          "size": 4.103515625,
          "content": "<?php declare(strict_types=1);\n\nnamespace Illuminate\\Testing;\n\nuse Mockery\\MockInterface;\nuse Nuwave\\Lighthouse\\Subscriptions\\Contracts\\Broadcaster;\nuse PHPUnit\\Framework\\TestCase;\n\nclass TestResponse\n{\n    /**\n     * Assert the response contains an error with a matching message.\n     *\n     * @param  \\Throwable  $error  the expected error\n     *\n     * @return $this\n     */\n    public function assertGraphQLError(\\Throwable $error): self\n    {\n        return $this;\n    }\n\n    /**\n     * Assert the response contains an error with the given message.\n     *\n     * @param  string  $message  the expected error message\n     *\n     * @return $this\n     */\n    public function assertGraphQLErrorMessage(string $message): self\n    {\n        return $this;\n    }\n\n    /**\n     * Assert the response contains an error with the given debug message.\n     *\n     * Requires the config `lighthouse.debug` to include the option \\GraphQL\\Error\\DebugFlag::INCLUDE_DEBUG_MESSAGE.\n     *\n     * @param  string  $message  the expected debug message\n     *\n     * @return $this\n     */\n    public function assertGraphQLDebugMessage(string $message): self\n    {\n        return $this;\n    }\n\n    /**\n     * Assert the response contains no errors.\n     *\n     * @return $this\n     */\n    public function assertGraphQLErrorFree(): self\n    {\n        return $this;\n    }\n\n    /**\n     * Assert the returned result contains exactly the given validation keys.\n     *\n     * @param  array<string>  $keys  the validation keys the result should have\n     *\n     * @return $this\n     */\n    public function assertGraphQLValidationKeys(array $keys): self\n    {\n        return $this;\n    }\n\n    /**\n     * Assert a given validation error is present in the response.\n     *\n     * @param  string  $key  the validation key that should be present\n     * @param  string  $message  the expected validation message\n     *\n     * @return $this\n     */\n    public function assertGraphQLValidationError(string $key, string $message): self\n    {\n        return $this;\n    }\n\n    /**\n     * Assert no validation errors are present in the response.\n     *\n     * @return $this\n     */\n    public function assertGraphQLValidationPasses(): self\n    {\n        return $this;\n    }\n\n    /**\n     * Assert current user is authorized to join a subscription.\n     *\n     * @param  TestCase  $testClassInstance  usually $this when calling this from a test class\n     *\n     * @return $this\n     */\n    public function assertGraphQLSubscriptionAuthorized(TestCase $testClassInstance): self\n    {\n        return $this;\n    }\n\n    /**\n     * Assert current user is NOT authorized to join a subscription.\n     *\n     * @param  TestCase  $testClassInstance  usually $this when calling this from a test class\n     *\n     * @return $this\n     */\n    public function assertGraphQLSubscriptionNotAuthorized(TestCase $testClassInstance): self\n    {\n        return $this;\n    }\n\n    /**\n     * For cases where you need more control over your broadcast assertions.\n     *\n     * @see \\Nuwave\\Lighthouse\\Testing\\TestResponseMixin::assertGraphQLBroadcasted\n     * @see \\Nuwave\\Lighthouse\\Testing\\TestResponseMixin::assertGraphQLNotBroadcasted\n     *\n     * @return \\Mockery\\MockInterface&\\Nuwave\\Lighthouse\\Subscriptions\\Contracts\\Broadcaster\n     */\n    public function graphQLSubscriptionMock() // @phpstan-ignore-line invalid return type?\n    {\n        $mock = \\Mockery::mock(Broadcaster::class);\n        assert($mock instanceof Broadcaster && $mock instanceof MockInterface);\n\n        return $mock;\n    }\n\n    /** Get the channel name from a subscription query. */\n    public function graphQLSubscriptionChannelName(): string\n    {\n        return '';\n    }\n\n    /**\n     * Assert the subscription received the given broadcasts.\n     *\n     * @param  array<int, array<string, mixed>>  $data  the broadcast pattern that you are expecting\n     *\n     * @return $this\n     */\n    public function assertGraphQLBroadcasted(array $data): self\n    {\n        return $this;\n    }\n\n    /**\n     * Assert the subscription received no broadcast.\n     *\n     * @return $this\n     */\n    public function assertGraphQLNotBroadcasted(): self\n    {\n        return $this;\n    }\n}\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "buf.gen.yaml",
          "type": "blob",
          "size": 0.228515625,
          "content": "version: v1\nmanaged:\n  enabled: true\nplugins:\n  # For new releases, see https://github.com/protocolbuffers/protobuf/releases and https://buf.build/protocolbuffers/php\n  - plugin: buf.build/protocolbuffers/php:v25.1\n    out: proto-tmp\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 4.931640625,
          "content": "{\n    \"name\": \"nuwave/lighthouse\",\n    \"description\": \"A framework for serving GraphQL from Laravel\",\n    \"license\": \"MIT\",\n    \"type\": \"library\",\n    \"keywords\": [\n        \"graphql\",\n        \"laravel\",\n        \"laravel-graphql\"\n    ],\n    \"authors\": [\n        {\n            \"name\": \"Christopher Moore\",\n            \"email\": \"chris@nuwavecommerce.com\",\n            \"homepage\": \"https://www.nuwavecommerce.com\"\n        },\n        {\n            \"name\": \"Benedikt Franke\",\n            \"email\": \"benedikt@franke.tech\",\n            \"homepage\": \"https://franke.tech\"\n        }\n    ],\n    \"homepage\": \"https://lighthouse-php.com\",\n    \"support\": {\n        \"issues\": \"https://github.com/nuwave/lighthouse/issues\",\n        \"source\": \"https://github.com/nuwave/lighthouse\"\n    },\n    \"require\": {\n        \"php\": \"^8\",\n        \"ext-json\": \"*\",\n        \"haydenpierce/class-finder\": \"^0.4 || ^0.5\",\n        \"illuminate/auth\": \"^9 || ^10 || ^11\",\n        \"illuminate/bus\": \"^9 || ^10 || ^11\",\n        \"illuminate/contracts\": \"^9 || ^10 || ^11\",\n        \"illuminate/http\": \"^9 || ^10 || ^11\",\n        \"illuminate/pagination\": \"^9 || ^10 || ^11\",\n        \"illuminate/queue\": \"^9 || ^10 || ^11\",\n        \"illuminate/routing\": \"^9 || ^10 || ^11\",\n        \"illuminate/support\": \"^9 || ^10 || ^11\",\n        \"illuminate/validation\": \"^9 || ^10 || ^11\",\n        \"laragraph/utils\": \"^1.5 || ^2\",\n        \"thecodingmachine/safe\": \"^1 || ^2\",\n        \"webonyx/graphql-php\": \"^15\"\n    },\n    \"require-dev\": {\n        \"algolia/algoliasearch-client-php\": \"^3\",\n        \"bensampo/laravel-enum\": \"^5 || ^6\",\n        \"dms/phpunit-arraysubset-asserts\": \"^0.4 || ^0.5\",\n        \"ergebnis/composer-normalize\": \"^2.2.2\",\n        \"fakerphp/faker\": \"^1.21\",\n        \"google/protobuf\": \"^3.21\",\n        \"larastan/larastan\": \"^2.6.1\",\n        \"laravel/framework\": \"^9 || ^10 || ^11\",\n        \"laravel/legacy-factories\": \"^1.1.1\",\n        \"laravel/pennant\": \"^1\",\n        \"laravel/scout\": \"^8 || ^9 || ^10 || ^11\",\n        \"mattiasgeniar/phpunit-query-count-assertions\": \"^1.1\",\n        \"mll-lab/graphql-php-scalars\": \"^6\",\n        \"mll-lab/php-cs-fixer-config\": \"^5\",\n        \"mockery/mockery\": \"^1.5\",\n        \"nesbot/carbon\": \"^2.62.1\",\n        \"orchestra/testbench\": \"^7.11 || ^8.8 || ^9\",\n        \"phpbench/phpbench\": \"^1.2.6\",\n        \"phpstan/extension-installer\": \"^1\",\n        \"phpstan/phpstan\": \"^1.10.3\",\n        \"phpstan/phpstan-mockery\": \"^1.1\",\n        \"phpstan/phpstan-phpunit\": \"^1.1.1\",\n        \"phpunit/phpunit\": \"^9.6.4 || ^10 || ^11\",\n        \"predis/predis\": \"^1.1 || ^2.1\",\n        \"pusher/pusher-php-server\": \"^5 || ^6 || ^7.0.2\",\n        \"rector/rector\": \"^1\",\n        \"thecodingmachine/phpstan-safe-rule\": \"^1.2\"\n    },\n    \"suggest\": {\n        \"ext-protobuf\": \"Improve protobuf serialization performance (used for tracing)\",\n        \"google/protobuf\": \"Required when using the tracing driver federated-tracing\",\n        \"laravel/pennant\": \"Required for the @feature directive\",\n        \"laravel/scout\": \"Required for the @search directive\",\n        \"mll-lab/graphql-php-scalars\": \"Useful scalar types, required for @whereConditions\",\n        \"mll-lab/laravel-graphiql\": \"A graphical interactive in-browser GraphQL IDE - integrated with Laravel\",\n        \"pusher/pusher-php-server\": \"Required when using the Pusher Subscriptions driver\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"autoload\": {\n        \"psr-4\": {\n            \"Nuwave\\\\Lighthouse\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Benchmarks\\\\\": \"benchmarks/\",\n            \"Tests\\\\\": \"tests/\"\n        },\n        \"files\": [\n            \"vendor/dms/phpunit-arraysubset-asserts/src/ArraySubsetAsserts.php\"\n        ]\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"composer/package-versions-deprecated\": true,\n            \"ergebnis/composer-normalize\": true,\n            \"kylekatarnls/update-helper\": true,\n            \"phpstan/extension-installer\": true\n        },\n        \"sort-packages\": true\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"Nuwave\\\\Lighthouse\\\\LighthouseServiceProvider\",\n                \"Nuwave\\\\Lighthouse\\\\Async\\\\AsyncServiceProvider\",\n                \"Nuwave\\\\Lighthouse\\\\Auth\\\\AuthServiceProvider\",\n                \"Nuwave\\\\Lighthouse\\\\Bind\\\\BindServiceProvider\",\n                \"Nuwave\\\\Lighthouse\\\\Cache\\\\CacheServiceProvider\",\n                \"Nuwave\\\\Lighthouse\\\\GlobalId\\\\GlobalIdServiceProvider\",\n                \"Nuwave\\\\Lighthouse\\\\OrderBy\\\\OrderByServiceProvider\",\n                \"Nuwave\\\\Lighthouse\\\\Pagination\\\\PaginationServiceProvider\",\n                \"Nuwave\\\\Lighthouse\\\\SoftDeletes\\\\SoftDeletesServiceProvider\",\n                \"Nuwave\\\\Lighthouse\\\\Testing\\\\TestingServiceProvider\",\n                \"Nuwave\\\\Lighthouse\\\\Validation\\\\ValidationServiceProvider\"\n            ]\n        }\n    },\n    \"scripts\": {\n        \"post-autoload-dump\": [\n            \"[ -f vendor/bin/testbench ] && vendor/bin/testbench package:discover || true\"\n        ]\n    }\n}\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.798828125,
          "content": "services:\n  php:\n    build:\n      context: .\n      dockerfile: php.dockerfile\n      args:\n        USER: $USER\n    volumes:\n      - ./:/workdir\n    security_opt:\n      - label:disable\n    depends_on:\n      - mysql\n    tty: true\n\n  mysql:\n    # TODO switch to MySQL 8 https://github.com/nuwave/lighthouse/issues/1784\n    image: mysql:5.7\n    # Ensures compatibility with Apple M1\n    platform: linux/amd64\n    tmpfs: /var/lib/mysql\n    environment:\n      MYSQL_DATABASE: test\n      MYSQL_ALLOW_EMPTY_PASSWORD: \"yes\"\n\n  redis:\n    image: redis:6\n\n  node:\n    build:\n      context: .\n      dockerfile: node.dockerfile\n    volumes:\n      - ./docs:/app\n    security_opt:\n      - label:disable\n    working_dir: /app\n    environment:\n      - NODE_OPTIONS=\"--max-old-space-size=8192\"\n    ports:\n      - 8081:8080\n    tty: true\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 29.2060546875,
          "content": null
        },
        {
          "name": "netlify.toml",
          "type": "blob",
          "size": 0.0810546875,
          "content": "[build]\n  base = \"docs\"\n  publish = \"docs/.vuepress/dist\"\n  command = \"yarn build\"\n"
        },
        {
          "name": "node.dockerfile",
          "type": "blob",
          "size": 0.2294921875,
          "content": "FROM node:18-slim\n\nARG USER_ID\nARG GROUP_ID\n\nRUN if [ ${USER_ID:-0} -ne 0 ] && [ ${GROUP_ID:-0} -ne 0 ]; then \\\n    groupmod --gid ${GROUP_ID} --non-unique node && \\\n    usermod --uid ${USER_ID} --gid ${GROUP_ID} node \\\n;fi\n\nUSER node\n"
        },
        {
          "name": "php.dockerfile",
          "type": "blob",
          "size": 0.798828125,
          "content": "FROM php:8.3-cli\n\nWORKDIR /workdir\n\nCOPY --from=composer /usr/bin/composer /usr/bin/composer\n\nRUN apt-get update && \\\n    apt-get install --yes \\\n        git \\\n        libzip-dev \\\n        zip \\\n        libicu-dev \\\n    && docker-php-ext-install \\\n        zip \\\n        mysqli \\\n        pdo_mysql \\\n        intl \\\n        bcmath \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && pecl install \\\n        xdebug \\\n        redis \\\n    && docker-php-ext-enable \\\n        xdebug \\\n        redis \\\n    && echo 'memory_limit=-1' > /usr/local/etc/php/conf.d/lighthouse.ini\n\nARG USER\nARG USER_ID\nARG GROUP_ID\n\nRUN if [ ${USER_ID:-0} -ne 0 ] && [ ${GROUP_ID:-0} -ne 0 ]; then \\\n    groupadd --force --gid ${GROUP_ID} ${USER} &&\\\n    useradd --no-log-init  --create-home --uid ${USER_ID} --gid ${GROUP_ID} ${USER} \\\n;fi\n\nUSER ${USER}\n"
        },
        {
          "name": "phpbench.json",
          "type": "blob",
          "size": 0.1435546875,
          "content": "{\n    \"$schema\": \"vendor/phpbench/phpbench/phpbench.schema.json\",\n    \"runner.bootstrap\": \"vendor/autoload.php\",\n    \"runner.path\": \"benchmarks\"\n}\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 7.2919921875,
          "content": "parameters:\n  level: 8 # TODO level up to max\n  stubFiles:\n  - _ide_helper.php\n  paths:\n  - benchmarks\n  - src\n  - tests\n  # Does not work with rector, comment in to diagnose potential issues with Octane\n  #checkOctaneCompatibility: true\n  reportUnmatchedIgnoredErrors: false # As long as we support multiple Laravel versions at once, there will be some dead spots\n  # Install https://plugins.jetbrains.com/plugin/7677-awesome-console to make those links clickable\n  editorUrl: '%%relFile%%:%%line%%'\n  editorUrlTitle: '%%relFile%%:%%line%%'\n  tmpDir: phpstan-tmp-dir\n  excludePaths:\n  - tests/Utils/Models/WithoutRelationClassImport.php # Intentionally wrong\n  - tests/LaravelPhpdocAlignmentFixer.php # Copied from laravel/pint\n  # laravel/pennant requires Laravel 10\n  - src/Pennant\n  - tests/Integration/Pennant\n  - src/Tracing/FederatedTracing/Proto # Generated classes from protobuf\n  # Ignore errors caused by the absence of Lumen in the dev dependencies\n  - tests/Unit/Testing/TestingTraitDummyLumen.php\n  # Native enums\n  - tests/Utils/Enums/ImageableType.php\n  - tests/Utils/Enums/ImageableType.php\n  ignoreErrors:\n  # PHPStan does not get it\n  - '#Parameter \\#1 \\$callback of static method Closure::fromCallable\\(\\) expects callable\\(\\): mixed, array{object, .*} given\\.#'\n\n  # Some parts of Laravel are just really magical\n  - '#Parameter \\#1 \\$response of static method Nuwave\\\\Lighthouse\\\\Testing\\\\TestResponseUtils::extractValidationErrors\\(\\) expects Illuminate\\\\Testing\\\\TestResponse<Symfony\\\\Component\\\\HttpFoundation\\\\Response>, \\$this\\(Nuwave\\\\Lighthouse\\\\Testing\\\\TestResponseMixin\\) given\\.#'\n  - path: tests/database/factories\n    message: '#Variable \\$factory might not be defined#'\n\n  # Mixins are magical\n  - path: src/Testing/TestResponseMixin.php\n    message: '#Method Nuwave\\\\Lighthouse\\\\Testing\\\\TestResponseMixin::assertGraphQLErrorMessage\\(\\) invoked with 1 parameter, 0 required\\.#'\n  - path: src/Testing/TestResponseMixin.php\n    message: '#Method Nuwave\\\\Lighthouse\\\\Testing\\\\TestResponseMixin::assertGraphQLDebugMessage\\(\\) invoked with 1 parameter, 0 required\\.#'\n  - path: src/Testing/TestResponseMixin.php\n    message: '#Anonymous function should return Illuminate\\\\Testing\\\\TestResponse but returns .*#'\n\n  # Relation forwards calls to Builder\n  - '#Call to an undefined method Illuminate\\\\Database\\\\Eloquent\\\\Builder<Illuminate\\\\Database\\\\Eloquent\\\\Model>|Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\Relation<Illuminate\\\\Database\\\\Eloquent\\\\Model>|Illuminate\\\\Database\\\\Query\\\\Builder::(orderBy|where|whereIn|whereNotIn|whereBetween|whereJsonContains|whereNotBetween)\\(\\)\\.#'\n\n  # Laravel 11 changes a lot of generics\n  - '#generic class (Illuminate\\\\Database\\\\Eloquent\\\\Builder|Laravel\\\\Scout\\\\Builder)( but)? does not specify its types#'\n  - '#contains generic type Illuminate\\\\Testing\\\\TestResponse<.+> but class Illuminate\\\\Testing\\\\TestResponse is not generic\\.#'\n  - '#Generic type Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\(HasOne|HasMany|BelongsToMany|MorphOne|MorphMany|MorphToMany)<.+, .+> in PHPDoc tag @return specifies 2 template types, but class Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\\\1 supports only 1: TRelatedModel#'\n  - '#Method .+ should return Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\(HasOne|HasMany|BelongsToMany|MorphOne|MorphMany|MorphToMany)<(.+), .+> but returns Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\\\1<\\2>.#'\n  - '#Method .+ should return Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\(BelongsTo|MorphTo)<(.+), \\$this\\((.+)\\)> but returns Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\\\1<\\2, \\3>.#'\n  - '#Generic type Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\(HasOneThrough|HasManyThrough)<.+, .+, .+> in PHPDoc tag @return specifies 3 template types, but class Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\\\1 supports only 1: TRelatedModel#'\n  - '#Method .+ should return Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\(HasOneThrough|HasManyThrough)<(.+), .+> but returns Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\\\1<\\2>.#'\n\n  # This test cheats and uses reflection to make assertions\n  - path: tests/Unit/Schema/Directives/BaseDirectiveTest.php\n    message: '#Call to protected method getModelClass\\(\\) of class Nuwave\\\\Lighthouse\\\\Schema\\\\Directives\\\\BaseDirective\\.#'\n\n  # This is a library, so it should be extendable\n  - '#Unsafe usage of new static.*#'\n\n  # Ease transition for non-nullable properties towards native types https://github.com/phpstan/phpstan/issues/5150\n  - '#Property .* in isset\\(\\) is not nullable\\.#'\n\n  # Unavailable in thecodingmachine/safe:1\n  - '#Function (hrtime) is unsafe to use\\. It can return FALSE instead of throwing an exception\\.#'\n\n  # Unavailable in thecodingmachine/safe:2\n  - '#Function (sort|substr|ksort) is unsafe to use\\. It can return FALSE instead of throwing an exception\\.#'\n\n  # Lumen type hints are just wrong\n  - '#Parameter \\#1 \\$content of function response expects string, .* given\\.#'\n\n  # Seems like a bug in PHPStan\n  - '#Parameter \\#2 \\$type of method Nuwave\\\\Lighthouse\\\\Schema\\\\TypeRegistry::.+Lazy\\(\\) expects callable\\(\\): GraphQL\\\\Type\\\\Definition\\\\Type&GraphQL\\\\Type\\\\Definition\\\\NamedType, Closure\\(\\): GraphQL\\\\Type\\\\Definition\\\\ObjectType given\\.#'\n\n  # Older versions of bensampo/laravel-enum are not generic yet\n  - '#contains generic type BenSampo\\\\Enum\\\\Enum<.+> but class BenSampo\\\\Enum\\\\Enum is not generic\\.#'\n\n  # Ignore errors caused by the absence of Lumen in the dev dependencies\n  - path: src/Support/AppVersion.php\n    message: '#PHPDoc tag @var for variable \\$container contains unknown class Laravel\\\\Lumen\\\\Application.#'\n  - path: src/Support/AppVersion.php\n    message: '#Call to method version\\(\\) on an unknown class Laravel\\\\Lumen\\\\Application.#'\n  - path: src/Subscriptions/SubscriptionRouter.php\n    messages:\n      - '#Parameter \\$router of method Nuwave\\\\Lighthouse\\\\Subscriptions\\\\SubscriptionRouter::.+\\(\\) has invalid type Laravel\\\\Lumen\\\\Routing\\\\Router\\.#'\n      - '#Call to method post\\(\\) on an unknown class Laravel\\\\Lumen\\\\Routing\\\\Router\\.#'\n  - path: src/Http/routes.php\n    messages:\n      - '#PHPDoc tag @var for variable \\$router contains unknown class Laravel\\\\Lumen\\\\Routing\\\\Router\\.#'\n      - '#Call to method addRoute\\(\\) on an unknown class Laravel\\\\Lumen\\\\Routing\\\\Router\\.#'\n\n  # Recent Mockery versions do not account for the last arg possibly being a closure\n  - path: tests/Unit/Subscriptions/Iterators/AuthenticatingSyncIteratorTest.php\n    message: '#Parameter \\#2 \\.\\.\\.\\$args of static method Mockery::mock\\(\\) expects array\\|class-string<Nuwave\\\\Lighthouse\\\\Subscriptions\\\\SubscriptionGuard>\\|Nuwave\\\\Lighthouse\\\\Subscriptions\\\\SubscriptionGuard, Closure given\\.#'\n\n  - path: tests/Integration/Schema/Directives/BuilderDirectiveTest.php\n    message: '#Return type of call to static method Mockery::mock\\(\\) contains unresolvable type\\.#'\n\n  # Laravel added generics to Arr::first in 11.x, not sure how to handle them for now.\n  - path: src/OrderBy/OrderByDirective.php\n    message: '#Unable to resolve the template type TValue in call to method static method Illuminate\\\\Support\\\\Arr::first\\(\\)#'\n  - path: src/Testing/TestResponseMixin.php\n    message: '#Unable to resolve the template type TValue in call to method static method Illuminate\\\\Support\\\\Arr::first\\(\\)#'\n\n  # Lots of work to specify the generics, little gain\n  - path: tests\n    message: '#Method .+ return type with generic class Illuminate\\\\Testing\\\\TestResponse does not specify its types: TResponse#'\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 1.150390625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\">\n  <source>\n    <include>\n      <directory>src</directory>\n    </include>\n  </source>\n  <testsuites>\n    <testsuite name=\"Unit\">\n      <directory>tests/Unit</directory>\n    </testsuite>\n    <testsuite name=\"Integration\">\n      <directory>tests/Integration</directory>\n    </testsuite>\n    <testsuite name=\"Console\">\n      <directory>tests/Console</directory>\n    </testsuite>\n  </testsuites>\n  <php>\n    <env name=\"LIGHTHOUSE_TEST_DB_DATABASE\" value=\"test\"/>\n    <env name=\"LIGHTHOUSE_TEST_DB_HOST\" value=\"mysql\"/>\n    <env name=\"LIGHTHOUSE_TEST_DB_PORT\" value=\"3306\"/>\n    <env name=\"LIGHTHOUSE_TEST_DB_USERNAME\" value=\"root\"/>\n    <env name=\"LIGHTHOUSE_TEST_DB_PASSWORD\" value=\"\"/>\n    <env name=\"LIGHTHOUSE_TEST_REDIS_HOST\" value=\"redis\"/>\n    <env name=\"LIGHTHOUSE_TEST_REDIS_PASSWORD\" value=\"null\"/>\n    <env name=\"LIGHTHOUSE_TEST_REDIS_PORT\" value=\"6379\"/>\n    <env name=\"LIGHTHOUSE_TEST_REDIS_DB\" value=\"0\"/>\n  </php>\n</phpunit>\n"
        },
        {
          "name": "rector.php",
          "type": "blob",
          "size": 3.400390625,
          "content": "<?php declare(strict_types=1);\n\nuse Rector\\Config\\RectorConfig;\nuse Rector\\PHPUnit\\Set\\PHPUnitSetList;\nuse Rector\\Set\\ValueObject\\SetList;\n\nreturn static function (RectorConfig $rectorConfig): void {\n    $rectorConfig->sets([\n        SetList::CODE_QUALITY,\n        SetList::CODING_STYLE,\n        SetList::TYPE_DECLARATION,\n        SetList::RECTOR_PRESET,\n        SetList::PHP_72,\n        SetList::PHP_73,\n        SetList::PHP_74,\n        SetList::PHP_80,\n        PHPUnitSetList::PHPUNIT_60,\n        PHPUnitSetList::PHPUNIT_70,\n        PHPUnitSetList::PHPUNIT_80,\n        PHPUnitSetList::PHPUNIT_90,\n        PHPUnitSetList::PHPUNIT_CODE_QUALITY,\n        PHPUnitSetList::ANNOTATIONS_TO_ATTRIBUTES,\n    ]);\n    $rectorConfig->rule(Rector\\CodingStyle\\Rector\\Closure\\StaticClosureRector::class);\n    $rectorConfig->skip([\n        __DIR__ . '/src/Tracing/FederatedTracing/Proto', // Generated code\n        __DIR__ . '/tests/database/migrations', // Does not fit autoloader standards\n        __DIR__ . '/tests/LaravelPhpdocAlignmentFixer.php', // Copied from Laravel\n        Rector\\CodeQuality\\Rector\\Isset_\\IssetOnPropertyObjectToPropertyExistsRector::class, // isset() is nice when moving towards typed properties\n        Rector\\CodeQuality\\Rector\\Identical\\FlipTypeControlToUseExclusiveTypeRector::class, // Unnecessarily complex with PHPStan\n        Rector\\CodeQuality\\Rector\\Concat\\JoinStringConcatRector::class => [\n            __DIR__ . '/tests/Integration/OrderBy/OrderByDirectiveTest.php', // Improves clarity\n        ],\n        Rector\\Php71\\Rector\\FuncCall\\RemoveExtraParametersRector::class => [\n            __DIR__ . '/src/Testing/TestResponseMixin.php', // mixins are weird\n        ],\n        Rector\\CodingStyle\\Rector\\Closure\\StaticClosureRector::class => [\n            __DIR__ . '/src/Testing/TestResponseMixin.php', // Cannot bind an instance to a static closure\n        ],\n        Rector\\CodingStyle\\Rector\\ClassMethod\\MakeInheritedMethodVisibilitySameAsParentRector::class => [\n            __DIR__ . '/tests/Unit/Execution/ResolveInfoTest.php', // Makes method public on purpose\n            __DIR__ . '/benchmarks/QueryBench.php', // setUp serves a double purpose here\n        ],\n        Rector\\CodeQuality\\Rector\\If_\\ExplicitBoolCompareRector::class, // if($truthy) is fine and very readable\n        Rector\\CodingStyle\\Rector\\Encapsed\\EncapsedStringsToSprintfRector::class, // unreadable, slow, error prone\n        Rector\\TypeDeclaration\\Rector\\FunctionLike\\AddReturnTypeDeclarationFromYieldsRector::class, // iterable is fine\n        Rector\\CodeQuality\\Rector\\Foreach_\\UnusedForeachValueToArrayKeysRector::class, // inefficient\n        Rector\\PHPUnit\\CodeQuality\\Rector\\Class_\\NarrowUnusedSetUpDefinedPropertyRector::class, // falsely removes $this->schema assignments in some tests\n        Rector\\PHPUnit\\PHPUnit100\\Rector\\StmtsAwareInterface\\WithConsecutiveRector::class, // messes up our custom withConsecutive replacement\n        Rector\\PHPUnit\\PHPUnit60\\Rector\\ClassMethod\\AddDoesNotPerformAssertionToNonAssertingTestRector::class, // does not recognize mockResolver\n        Rector\\Php80\\Rector\\FunctionLike\\MixedTypeRector::class, // removes useful comments\n    ]);\n    $rectorConfig->paths([\n        __DIR__ . '/benchmarks',\n        __DIR__ . '/src',\n        __DIR__ . '/tests',\n        __DIR__ . '/.php-cs-fixer.php',\n        __DIR__ . '/_ide_helper.php',\n        __DIR__ . '/rector.php',\n    ]);\n    $rectorConfig->phpstanConfig(__DIR__ . '/phpstan.neon');\n};\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}