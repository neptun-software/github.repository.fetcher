{
  "metadata": {
    "timestamp": 1736712002438,
    "page": 499,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jmespath/jmespath.php",
      "stars": 1938,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1650390625,
          "content": "* text=auto\n\n/.gitignore export-ignore\n/.gitattributes export-ignore\n/.github export-ignore\n/Makefile export-ignore\n/phpunit.xml.dist export-ignore\n/tests export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0732421875,
          "content": ".phpunit.result.cache\nvendor\ncomposer.lock\nphpunit.xml\ncompiled\nartifacts/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.400390625,
          "content": "# CHANGELOG\n\n## 2.8.0 - 2024-09-04\n\n* Add support for PHP 8.4.\n\n## 2.7.0 - 2023-08-15\n\n* Fixed flattening in arrays starting with null.\n* Drop support for HHVM and PHP earlier than 7.2.5.\n* Add support for PHP 8.1, 8.2, and 8.3.\n\n## 2.6.0 - 2020-07-31\n\n* Support for PHP 8.0.\n\n## 2.5.0 - 2019-12-30\n\n* Full support for PHP 7.0-7.4.\n* Fixed autoloading when run from within vendor folder.\n* Full multibyte (UTF-8) string support.\n\n## 2.4.0 - 2016-12-03\n\n* Added support for floats when interpreting data.\n* Added a function_exists check to work around redeclaration issues.\n\n## 2.3.0 - 2016-01-05\n\n* Added support for [JEP-9](https://github.com/jmespath/jmespath.site/blob/master/docs/proposals/improved-filters.rst),\n  including unary filter expressions, and `&&` filter expressions.\n* Fixed various parsing issues, including not removing escaped single quotes\n  from raw string literals.\n* Added support for the `map` function.\n* Fixed several issues with code generation.\n\n## 2.2.0 - 2015-05-27\n\n* Added support for [JEP-12](https://github.com/jmespath/jmespath.site/blob/master/docs/proposals/raw-string-literals.rst)\n  and raw string literals (e.g., `'foo'`).\n\n## 2.1.0 - 2014-01-13\n\n* Added `JmesPath\\Env::cleanCompileDir()` to delete any previously compiled\n  JMESPath expressions.\n\n## 2.0.0 - 2014-01-11\n\n* Moving to a flattened namespace structure.\n* Runtimes are now only PHP callables.\n* Fixed an error in the way empty JSON literals are parsed so that they now\n  return an empty string to match the Python and JavaScript implementations.\n* Removed functions from runtimes. Instead there is now a function dispatcher\n  class, FnDispatcher, that provides function implementations behind a single\n  dispatch function.\n* Removed ExprNode in lieu of just using a PHP callable with bound variables.\n* Removed debug methods from runtimes and instead into a new Debugger class.\n* Heavily cleaned up function argument validation.\n* Slice syntax is now properly validated (i.e., colons are followed by the\n  appropriate value).\n* Lots of code cleanup and performance improvements.\n* Added a convenient `JmesPath\\search()` function.\n* **IMPORTANT**: Relocating the project to https://github.com/jmespath/jmespath.php\n\n## 1.1.1 - 2014-10-08\n\n* Added support for using ArrayAccess and Countable as arrays and objects.\n\n## 1.1.0 - 2014-08-06\n\n* Added the ability to search data returned from json_decode() where JSON\n  objects are returned as stdClass objects.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0634765625,
          "content": "Copyright (c) 2014 Michael Dowling, https://github.com/mtdowling\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.2587890625,
          "content": "all: clean coverage\n\ntest:\n\tvendor/bin/phpunit\n\ncoverage:\n\tvendor/bin/phpunit --coverage-html=artifacts/coverage\n\nview-coverage:\n\topen artifacts/coverage/index.html\n\nclean:\n\trm -rf artifacts/*\n\trm -rf compiled/*\n\nperf:\n\tphp bin/perf.php\n\n.PHONY: test coverage perf\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 3.9404296875,
          "content": "============\njmespath.php\n============\n\nJMESPath (pronounced \"jaymz path\") allows you to declaratively specify how to\nextract elements from a JSON document. *jmespath.php* allows you to use\nJMESPath in PHP applications with PHP data structures. It requires PHP 7.2.5 or\ngreater and can be installed through `Composer <http://getcomposer.org/doc/00-intro.md>`_\nusing the ``mtdowling/jmespath.php`` package.\n\n.. code-block:: php\n\n    require 'vendor/autoload.php';\n\n    $expression = 'foo.*.baz';\n\n    $data = [\n        'foo' => [\n            'bar' => ['baz' => 1],\n            'bam' => ['baz' => 2],\n            'boo' => ['baz' => 3]\n        ]\n    ];\n\n    JmesPath\\search($expression, $data);\n    // Returns: [1, 2, 3]\n\n- `JMESPath Tutorial <http://jmespath.org/tutorial.html>`_\n- `JMESPath Grammar <http://jmespath.org/specification.html#grammar>`_\n- `JMESPath Python library <https://github.com/jmespath/jmespath.py>`_\n\nPHP Usage\n=========\n\nThe ``JmesPath\\search`` function can be used in most cases when using the\nlibrary. This function utilizes a JMESPath runtime based on your environment.\nThe runtime utilized can be configured using environment variables and may at\nsome point in the future automatically utilize a C extension if available.\n\n.. code-block:: php\n\n    $result = JmesPath\\search($expression, $data);\n\n    // or, if you require PSR-4 compliance.\n    $result = JmesPath\\Env::search($expression, $data);\n\nRuntimes\n--------\n\njmespath.php utilizes *runtimes*. There are currently two runtimes:\nAstRuntime and CompilerRuntime.\n\nAstRuntime is utilized by ``JmesPath\\search()`` and ``JmesPath\\Env::search()``\nby default.\n\nAstRuntime\n~~~~~~~~~~\n\nThe AstRuntime will parse an expression, cache the resulting AST in memory,\nand interpret the AST using an external tree visitor. AstRuntime provides a\ngood general approach for interpreting JMESPath expressions that have a low to\nmoderate level of reuse.\n\n.. code-block:: php\n\n    $runtime = new JmesPath\\AstRuntime();\n    $runtime('foo.bar', ['foo' => ['bar' => 'baz']]);\n    // > 'baz'\n\nCompilerRuntime\n~~~~~~~~~~~~~~~\n\n``JmesPath\\CompilerRuntime`` provides the most performance for\napplications that have a moderate to high level of reuse of JMESPath\nexpressions. The CompilerRuntime will walk a JMESPath AST and emit PHP source\ncode, resulting in anywhere from 7x to 60x speed improvements.\n\nCompiling JMESPath expressions to source code is a slower process than just\nwalking and interpreting a JMESPath AST (via the AstRuntime). However,\nrunning the compiled JMESPath code results in much better performance than\nwalking an AST. This essentially means that there is a warm-up period when\nusing the ``CompilerRuntime``, but after the warm-up period, it will provide\nmuch better performance.\n\nUse the CompilerRuntime if you know that you will be executing JMESPath\nexpressions more than once or if you can pre-compile JMESPath expressions\nbefore executing them (for example, server-side applications).\n\n.. code-block:: php\n\n    // Note: The cache directory argument is optional.\n    $runtime = new JmesPath\\CompilerRuntime('/path/to/compile/folder');\n    $runtime('foo.bar', ['foo' => ['bar' => 'baz']]);\n    // > 'baz'\n\nEnvironment Variables\n^^^^^^^^^^^^^^^^^^^^^\n\nYou can utilize the CompilerRuntime in ``JmesPath\\search()`` by setting\nthe ``JP_PHP_COMPILE`` environment variable to \"on\" or to a directory\non disk used to store cached expressions.\n\nTesting\n=======\n\nA comprehensive list of test cases can be found at\nhttps://github.com/jmespath/jmespath.php/tree/master/tests/compliance.\nThese compliance tests are utilized by jmespath.php to ensure consistency with\nother implementations, and can serve as examples of the language.\n\njmespath.php is tested using PHPUnit. In order to run the tests, you need to\nfirst install the dependencies using Composer as described in the *Installation*\nsection. Next you just need to run the tests via make:\n\n.. code-block:: bash\n\n    make test\n\nYou can run a suite of performance tests as well:\n\n.. code-block:: bash\n\n    make perf\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.974609375,
          "content": "{\n    \"name\": \"mtdowling/jmespath.php\",\n    \"description\": \"Declaratively specify how to extract elements from a JSON document\",\n    \"keywords\": [\"json\", \"jsonpath\"],\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Graham Campbell\",\n            \"email\": \"hello@gjcampbell.co.uk\",\n            \"homepage\": \"https://github.com/GrahamCampbell\"\n        },\n        {\n            \"name\": \"Michael Dowling\",\n            \"email\": \"mtdowling@gmail.com\",\n            \"homepage\": \"https://github.com/mtdowling\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^7.2.5 || ^8.0\",\n        \"symfony/polyfill-mbstring\": \"^1.17\"\n    },\n    \"require-dev\": {\n        \"composer/xdebug-handler\": \"^3.0.3\",\n        \"phpunit/phpunit\": \"^8.5.33\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"JmesPath\\\\\": \"src/\"\n        },\n        \"files\": [\"src/JmesPath.php\"]\n    },\n    \"bin\": [\"bin/jp.php\"],\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"2.8-dev\"\n        }\n    }\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.5927734375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n             colors=\"true\"\n             failOnRisky=\"true\"\n             failOnWarning=\"true\"\n             convertDeprecationsToExceptions=\"true\"\n    >\n\n    <testsuites>\n        <testsuite name=\"Unit Tests\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n\n    <filter>\n        <whitelist>\n            <directory suffix=\".php\">src</directory>\n        </whitelist>\n    </filter>\n\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}