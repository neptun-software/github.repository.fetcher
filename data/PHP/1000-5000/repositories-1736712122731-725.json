{
  "metadata": {
    "timestamp": 1736712122731,
    "page": 725,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "broadway/broadway",
      "stars": 1499,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".docheader",
          "type": "blob",
          "size": 0.21875,
          "content": "/*\n * This file is part of the broadway/broadway package.\n *\n * (c) 2020 Broadway project\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0625,
          "content": "/vendor/\ncomposer.lock\n.php-cs-fixer.cache\n.phpunit.result.cache"
        },
        {
          "name": ".php-cs-fixer.php",
          "type": "blob",
          "size": 0.2724609375,
          "content": "<?php\n\n$config = require 'vendor/broadway/coding-standard/.php-cs-fixer.dist.php';\n\n$config->setFinder(\n    \\PhpCsFixer\\Finder::create()\n        ->in([\n            __DIR__ . '/src',\n            __DIR__ . '/test',\n            __DIR__ . '/examples',\n        ])\n);\n\nreturn $config;\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 5.556640625,
          "content": "# Changelog\n\n## v2.0.x\n\n#### BC breaks\n\n* [4e6fe27](http://github.com/broadway/broadway/commit/4e6fe27eb4c35d67fc5a2cffccfca62000f9f929) Finalized concrete classes (Nikita Konstantinov)\n* [5c3cc30](http://github.com/broadway/broadway/commit/5c3cc30a03ef92358745cb9bdfcae46c554195b4) required PHP 7 (othillo)\n* [8ee2fd2](http://github.com/broadway/broadway/commit/8ee2fd2ebb2adcb144f9f8160e106f3b18498036) required PHPUnit 6 (Alexander Bachmann)\n\n#### Other changes\n\n* [f74c855](http://github.com/broadway/broadway/commit/f74c85589b9ad096a2e8bbab917fca773898cd13) Added a closure command handler (Francesco Trucchia)\n* [b21c245](http://github.com/broadway/broadway/commit/b21c245f4788c62df4fa5200e2f313481521a589) Provide access to Metadata values (Reen Lokum)\n* [05e88ce](http://github.com/broadway/broadway/commit/05e88ce83837bea224b65df70f9ebceebd39ed90) Moved to Symfony coding standards (Reen Lokum)\n* [df69c8d](http://github.com/broadway/broadway/commit/df69c8d1996fcb9786635ef7bfadb4873c9be3cd) Added reflection serializer (Alexander Bachmann)\n* [8486286](http://github.com/broadway/broadway/commit/848628664e61faaced00bc41926989c63c76e8e7) moved RepositoryTestCase, EventStoreTest, EventStoreManagementTest to Testing namespace (Robin van der Vleuten)\n\n## v1.0.x\n\n#### BC breaks\n\n- The EventStore interface added a `loadFromPlayhead` method\n- The ReadModelTestCase is renamed to SerializableReadModelTestCase\n- We moved the Doctrine DBAL event store implementation to a [separate repository](https://github.com/broadway/event-store-dbal)\n- We moved the Elasticsearch read model implementation to a [separate repository](https://github.com/broadway/read-model-elasticsearch) \n- We moved the Symfony bundle to a [separate repository](https://github.com/broadway/broadway-bundle)\n- We moved the Saga component to a [separate repository](https://github.com/broadway/broadway-saga)\n- DBALEventStore and InMemoryEventStore can now throw DuplicatePlayheadException.\n  Ensure you are catching EventStoreException instead of specific driver exceptions.\n\n## v0.10.x\n\n#### Other changes\n\n- allow specifying the DateTime used in the ReadModel Scenario\n- added the ReflectionAggregateFactory as an alternative to the NamedConstructorAggregateFactory\n- specify ReadModel type searching Elasticsearch read model repository\n- added PHPUnit as a development dependency\n- adopted new PHP 5.4 and PHP 5.5 language features (DateTimeImmutable, ::class, short array syntax)\n\n## v0.9.x\n\n#### BC breaks\n\n- We raised the minimum required version of symfony/dependency-injection from 2.3 to 2.6.\n\n#### Other changes\n\n- The Symfony Bundle is now Symfony 3 compatible\n- The DBALEventStore can now be disabled in configuration\n- elasticsearch/elasticsearch-php 2.0 is now also supported\n- Serializers are now configurable in the Symfony Bundle\n\n## v0.8.x\n\n#### BC breaks\n\n- We raised the minimum required PHP version from 5.3 to 5.5.\n\n#### Other changes\n\n- Support for [querying the event store](https://github.com/qandidate-labs/broadway/commit/e81d4ea167ce97383a9a4b7d85542e8b5e11900a) using criteria\n- The `COMMAND_FAILURE` event now receives [an associative array](https://github.com/qandidate-labs/broadway/blob/140d23f90259bace9601b17ebf749317cd859180/src/Broadway/CommandHandling/EventDispatchingCommandBus.php#L48) when it gets dispatched.\n- Fixed a locale issue with creating DateTime objects.\n\n## v0.7.x\n\n#### Symfony Bundle\n\n- You can now configure which Doctrine DBAL connection should be used for the event store\n- The auditing command logger service now only gets registered when it's explicitly enabled\n- You can now register Sagas with the tag `broadway.saga`\n- The `broadway:event-store:schema:drop` command no longer errors when there is no schema\n\n##### Other changes\n\n- There are now [Saga examples](https://github.com/qandidate-labs/broadway/tree/df7445befdb68c9f8b1795d1c454e0dff06ff7a6/examples/saga)\n- The DBALEventStore now also works with mysqli\n\n## v0.6.x\n\n#### BC breaks\n\n- The Scenario for CommandHandling now clears the recorded events after each `then`. So for each then you only need to supply the **newly** recorded events.\n\n## v0.5.x\n\n#### BC breaks\n\n- DomainMessageInterface has been removed, and DomainMessage has been made final.\n- Renamed `add` method to `save` for [aggregate root repositories](https://github.com/mbadolato/broadway/commit/9b07dfc4998d70b4c6d25dcacf114a60ea7f1450).\n\n##### Symfony Bundle\n\n- The global `storage_suffix` parameter has been removed and has been replaced with a configuration value: `saga.mongodb.storage_suffix`.\n\n#### Summary of other changes\n\n- New example on how to use child entities.\n- The EventSourcing Scenario has been updated to support all the latest changes.\n- An AggregateRootScenarioTestCase has been added with an example on how to use it.\n- The command bus and event bus have been made more resilient.\n- We now publish the decorated event stream on the event bus.\n- Added possibility to use binary as UUID column. See README in the Bundle for configuration details.\n- The CLI Command in the Bundle doesn't throw errors anymore if the schema already exists.\n\n## v0.4.x\n\n#### BC breaks\n\n- Updated `beberlei/assert` requirement to 2.0.\n\n## v0.3.0\n\n#### BC breaks\n\n- The AggregateFactory is a new required constructor argument for a EventSourcingRepository and the order of the arguments changed.\n\n#### Summary of changes\n\n- Added Aggregate Factories for instantiating aggregates. Now we are not bound to a public constructor.\n- A bugfix that caused an infinite loop when supplying a string to the CommandHandler.\n- Saga base class is now abstract.\n- More typehints to interfaces instead of concrete classes.\n- Multiple CS fixes.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.064453125,
          "content": "Copyright (c) 2020 Broadway project - https://github.com/broadway\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.083984375,
          "content": ".DEFAULT_GOAL:=help\n\n.PHONY: dependencies\ndependencies:\n\tcomposer install --no-interaction --no-suggest --no-scripts --ansi\n\n.PHONY: test\ntest:\n\tvendor/bin/phpunit --testdox --exclude-group=none --colors=always\n\n.PHONY: qa\nqa: php-cs-fixer-ci phpstan\n\n.PHONY: php-cs-fixer\nphp-cs-fixer:\n\tvendor/bin/php-cs-fixer fix --no-interaction --allow-risky=yes --diff --verbose\n\n.PHONY: php-cs-fixer-ci\nphp-cs-fixer-ci:\n\tvendor/bin/php-cs-fixer fix --no-interaction --allow-risky=yes --diff --verbose\n\nPHONY: phpstan\nphpstan:\n\tvendor/bin/phpstan analyse --level=5 src/\n\n.PHONY: changelog\nchangelog:\n\tgit log $$(git describe --abbrev=0 --tags)...HEAD --no-merges --pretty=format:\"* [%h](http://github.com/${TRAVIS_REPO_SLUG}/commit/%H) %s (%cN)\"\n\n.PHONY: license\nlicense:\n\tvendor/bin/docheader check --no-interaction --ansi -vvv {src,test,examples}\n\n# Based on https://suva.sh/posts/well-documented-makefiles/\nhelp:  ## Display this help\n\t@awk 'BEGIN {FS = \":.*##\"; printf \"\\nUsage:\\n  make \\033[36m<target>\\033[0m\\n\\nTargets:\\n\"} /^[a-zA-Z_-]+:.*?##/ { printf \"  \\033[36m%-20s\\033[0m %s\\n\", $$1, $$2 }' $(MAKEFILE_LIST)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.47265625,
          "content": "Broadway\n========\n\nBroadway is a project providing infrastructure and testing helpers for creating\nCQRS and event sourced applications. Broadway tries hard to not get in your\nway. The project contains several loosely coupled components that can be used\ntogether to provide a full CQRS\\ES experience.\n\n![build status](https://github.com/broadway/broadway/actions/workflows/ci.yml/badge.svg)\n\n## About\n\nRead the blog post about this repository at:\n- http://labs.qandidate.com/blog/2014/08/26/broadway-our-cqrs-es-framework-open-sourced/\n\n## Installation\n\n```\n$ composer require broadway/broadway\n```\n\n## Documentation\nYou can find detailed documentation of the Broadway bundle on [broadway.github.io/broadway](https://broadway.github.io/broadway/).\n\nFeel free to join #qandidate on freenode with questions and remarks!\n\n## Acknowledgements\n\nThe broadway project is heavily inspired by other open source project such as\n[AggregateSource], [Axon Framework] and [Ncqrs].\n\n[Axon Framework]: http://www.axonframework.org/\n[Ncqrs]: https://github.com/ncqrs/ncqrs\n[AggregateSource]: https://github.com/yreynhout/AggregateSource\n\nWe also like to thank [Benjamin], [Marijn] and [Mathias] for the conversations\nwe had along the way that helped us shape the broadway project. In particular\nMarijn for giving us access to his in-house developed CQRS framework.\n\n[Benjamin]: https://twitter.com/beberlei\n[Marijn]: https://twitter.com/huizendveld\n[Mathias]: https://twitter.com/mathiasverraes\n\n## License\n\nMIT, see LICENSE.\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 3.7353515625,
          "content": "# Upgrade to 2.0\n\n## Concrete classes are made final\n\nAs it is no longer possible to extend these classes it is necessary to use composition for code reuse.\n\n## PHP 7\n\nMany interfaces have updated method signatures because of added (return) type hints. When implementing\nthese interfaces the method signatures must adhere to the parent's signatures.\n\n## PHPUnit 6\nPHPUnit is required when you use Broadway's test helpers like Scenarios and base test cases in\nthe `src/*/Testing/*` directories. In this case you will need to update your projects to PHPUnit 6.\n\n## Test helpers\nThe RepositoryTestCase, EventStoreTest, EventStoreManagementTest are moved from `test` to `src` and into\nthe `Testing` namespace. It's now easier to use them without autoloading magic but you need to reimport\nthe classes with the updated namespace in your project.\n\n# Upgrade to 1.0\n\n## Symfony bundle, DBAL event store, Elasticsearch read models and saga are moved to separate repositories.\n\nTo retain these functionalities you need to install the following packages:\n\n```\ncomposer require broadway/broadway-bundle\ncomposer require broadway/event-store-dbal\ncomposer require broadway/read-model-elasticsearch\ncomposer require broadway/broadway-saga\n```\n\nYou can also check the [Broadway demo project](https://github.com/broadway/broadway-demo). \n\n## New bundle configuration\n\nThe bundle allows you to configure your own event store or read model \nimplementation using service ids. \n\nIt no longer configures the DBAL event store and Elasticsearch read models \nby default. For more information check the bundle's [README.md](https://github.com/broadway/broadway-bundle/blob/master/README.md).  \n\n## Renamed interfaces and simple implementations\n\nMost interfaces were changed to remove the `Interface` suffix. This meant\nalso some simple implementations provided by Broadway were changed.\n\nThis is the complete list of changes:\n\n### Renamed interfaces\n\n* Broadway/Auditing/CommandSerializerInterface -> CommandSerializer\n* Broadway/CommandHandling/CommandBusInterface -> CommandBus\n* Broadway/CommandHandling/CommandHandlerInterface -> CommandHandler\n* Broadway/EventDispatcher/EventDispatcherInterface -> EventDispatcher\n* Broadway/EventHandling/EventBusInterface -> EventBus\n* Broadway/EventHandling/EventListenerInterface -> EventListener\n* Broadway/EventSourcing/AggregateFactory/AggregateFactoryInterface -> AggregateFactory\n* Broadway/EventSourcing/EventSourcedEntityInterface -> EventSourcedEntity\n* Broadway/EventSourcing/EventStreamDecoratorInterface -> EventStreamDecorator\n* Broadway/EventSourcing/MetadataEnrichment/MetadataEnricherInterface -> MetadataEnricher\n* Broadway/EventStore/EventStoreInterface -> EventStore\n* Broadway/EventStore/EventVisitorInterface -> EventVisitor\n* Broadway/EventStore/Management/EventStoreManagementInterface -> EventStoreManagement\n* Broadway/ReadModel/ReadModelInterface -> Identifiable\n* Broadway/ReadModel/RepositoryFactoryInterface -> RepositoryFactory\n* Broadway/ReadModel/RepositoryInterface -> Repository\n* Broadway/ReadModel/SerializableReadModelInterface -> SerializableReadModel\n* Broadway/ReadModel/TransferableInterface -> Transferable\n* Broadway/Repository/RepositoryInterface -> Repository\n* Broadway/Serializer/SerializableInterface -> Serializable\n* Broadway/Serializer/SerializerInterface -> Serializer\n\n### Renamed implementations\n\n* Broadway/Auditing/CommandSerializer -> NullByteCommandSerializer\n* Broadway/CommandHandling/CommandHandler -> SimpleCommandHandler\n* Broadway/EventDispatcher/EventDispatcher -> CallableEventDispatcher\n* Broadway/EventSourcing/EventSourcedEntity -> SimpleEventSourcedEntity\n* Broadway/ReadModel/ReadModelTestCase -> SerializableReadModelTestCase\n\n### Dropped interfaces\n* Broadway/Domain/DomainEventStreamInterface\n* Broadway/ReadModel/ProjectorInterface\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.849609375,
          "content": "{\n    \"name\": \"broadway/broadway\",\n    \"description\": \"Infrastructure and testing helpers for creating CQRS and event sourced applications.\",\n    \"keywords\": [\"cqrs\", \"event sourcing\", \"domain-driven design\", \"ddd\"],\n    \"license\": \"MIT\",\n    \"require\": {\n        \"beberlei/assert\": \"^3.0\",\n        \"broadway/uuid-generator\": \"^1.0\",\n        \"php\": \">=7.2\"\n    },\n    \"authors\": [\n      {\n        \"name\": \"Alexander\",\n        \"email\": \"iam.asm89@gmail.com\"\n      },\n      {\n        \"name\": \"Emil\",\n        \"email\": \"emil@broekmeulen.com\"\n      },\n      {\n        \"name\": \"Fritsjan\",\n        \"email\": \"fritsjan@qandidate.com\"\n      },\n      {\n        \"name\": \"othillo\",\n        \"email\": \"othillo@othillo.nl\"\n      },\n      {\n        \"name\": \"Willem-Jan\",\n        \"email\": \"wjzijderveld@gmail.com\"\n      },\n      {\n        \"name\": \"Qandidate.com\",\n        \"homepage\": \"http://labs.qandidate.com/\"\n      }\n    ],\n    \"require-dev\": {\n        \"monolog/monolog\": \"~2.0\",\n        \"phpunit/phpunit\": \"^9.5\",\n        \"ramsey/uuid\": \"^4.0\",\n        \"broadway/coding-standard\": \"^1.2\",\n        \"phpstan/phpstan\": \"^1.0\",\n        \"psr/log\": \"^1.1.4\",\n        \"phpspec/prophecy\": \"^1.15\"\n    },\n    \"suggest\": {\n        \"psr/log-implementation\": \"Implementation for PSR3, LoggerInterface\",\n        \"broadway/event-store-dbal\": \"Event store implementation using doctrine/dbal\",\n        \"broadway/read-model-elasticsearch\": \"Elasticsearch read model implementation\",\n        \"broadway/broadway-saga\": \"Saga component for Broadway\",\n        \"broadway/broadway-bundle\": \"Symfony bundle for broadway/broadway\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Broadway\\\\\": \"src/Broadway/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Broadway\\\\\": \"test/Broadway/\"\n        }\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"3.0.x-dev\"\n        }\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpstan-baseline.neon",
          "type": "blob",
          "size": 0.400390625,
          "content": "parameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: \"#^Property Broadway\\\\\\\\CommandHandling\\\\\\\\Testing\\\\\\\\TraceableCommandBus\\\\:\\\\:\\\\$commandHandlers is never read, only written\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Broadway/CommandHandling/Testing/TraceableCommandBus.php\n\n\t\t-\n\t\t\tmessage: \"#^Unsafe usage of new static\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: src/Broadway/EventStore/Management/Testing/EventStoreManagementTest.php\n\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.037109375,
          "content": "includes:\n    - phpstan-baseline.neon\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.7900390625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         bootstrap=\"vendor/autoload.php\"\n>\n  <testsuites>\n    <testsuite name=\"Broadway Test Suite\">\n      <directory>./test/</directory>\n    </testsuite>\n    <testsuite name=\"Broadway Example Test Suite\">\n      <directory>./examples/</directory>\n    </testsuite>\n  </testsuites>\n  <filter>\n    <whitelist>\n      <directory suffix=\".php\">./src/</directory>\n    </whitelist>\n  </filter>\n  <groups>\n    <exclude>\n      <group>functional</group>\n    </exclude>\n  </groups>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}