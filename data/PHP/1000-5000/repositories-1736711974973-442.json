{
  "metadata": {
    "timestamp": 1736711974973,
    "page": 442,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spatie/package-skeleton-laravel",
      "stars": 2126,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.21484375,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 4\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.{yml,yaml}]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.6884765625,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n# Ignore all test and documentation with \"export-ignore\".\n/.github            export-ignore\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/phpunit.xml.dist   export-ignore\n/art                export-ignore\n/docs               export-ignore\n/tests              export-ignore\n/workbench          export-ignore\n/.editorconfig      export-ignore\n/.php_cs.dist.php   export-ignore\n/psalm.xml          export-ignore\n/psalm.xml.dist     export-ignore\n/testbench.yaml     export-ignore\n/UPGRADING.md       export-ignore\n/phpstan.neon.dist  export-ignore\n/phpstan-baseline.neon  export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.328125,
          "content": "# Composer Related\ncomposer.lock\n/vendor\n\n# Frontend Assets\n/node_modules\n\n# Logs\nnpm-debug.log\nyarn-error.log\n\n# Caches\n.phpunit.cache\n.phpunit.result.cache\n/build\n\n# IDE Helper\n_ide_helper.php\n_ide_helper_models.php\n.phpstorm.meta.php\n\n# Editors\n/.idea\n/.fleet\n/.vscode\n\n# Misc\nphpunit.xml\nphpstan.neon\ntestbench.yaml\n/docs\n/coverage\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.0830078125,
          "content": "# Changelog\n\nAll notable changes to `:package_name` will be documented in this file.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.068359375,
          "content": "The MIT License (MIT)\n\nCopyright (c) :vendor_name <author@domain.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.4013671875,
          "content": "# :package_description\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/:vendor_slug/:package_slug.svg?style=flat-square)](https://packagist.org/packages/:vendor_slug/:package_slug)\n[![GitHub Tests Action Status](https://img.shields.io/github/actions/workflow/status/:vendor_slug/:package_slug/run-tests.yml?branch=main&label=tests&style=flat-square)](https://github.com/:vendor_slug/:package_slug/actions?query=workflow%3Arun-tests+branch%3Amain)\n[![GitHub Code Style Action Status](https://img.shields.io/github/actions/workflow/status/:vendor_slug/:package_slug/fix-php-code-style-issues.yml?branch=main&label=code%20style&style=flat-square)](https://github.com/:vendor_slug/:package_slug/actions?query=workflow%3A\"Fix+PHP+code+style+issues\"+branch%3Amain)\n[![Total Downloads](https://img.shields.io/packagist/dt/:vendor_slug/:package_slug.svg?style=flat-square)](https://packagist.org/packages/:vendor_slug/:package_slug)\n<!--delete-->\n---\nThis repo can be used to scaffold a Laravel package. Follow these steps to get started:\n\n1. Press the \"Use this template\" button at the top of this repo to create a new repo with the contents of this skeleton.\n2. Run \"php ./configure.php\" to run a script that will replace all placeholders throughout all the files.\n3. Have fun creating your package.\n4. If you need help creating a package, consider picking up our <a href=\"https://laravelpackage.training\">Laravel Package Training</a> video course.\n---\n<!--/delete-->\nThis is where your description should go. Limit it to a paragraph or two. Consider adding a small example.\n\n## Support us\n\n[<img src=\"https://github-ads.s3.eu-central-1.amazonaws.com/:package_name.jpg?t=1\" width=\"419px\" />](https://spatie.be/github-ad-click/:package_name)\n\nWe invest a lot of resources into creating [best in class open source packages](https://spatie.be/open-source). You can support us by [buying one of our paid products](https://spatie.be/open-source/support-us).\n\nWe highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You'll find our address on [our contact page](https://spatie.be/about-us). We publish all received postcards on [our virtual postcard wall](https://spatie.be/open-source/postcards).\n\n## Installation\n\nYou can install the package via composer:\n\n```bash\ncomposer require :vendor_slug/:package_slug\n```\n\nYou can publish and run the migrations with:\n\n```bash\nphp artisan vendor:publish --tag=\":package_slug-migrations\"\nphp artisan migrate\n```\n\nYou can publish the config file with:\n\n```bash\nphp artisan vendor:publish --tag=\":package_slug-config\"\n```\n\nThis is the contents of the published config file:\n\n```php\nreturn [\n];\n```\n\nOptionally, you can publish the views using\n\n```bash\nphp artisan vendor:publish --tag=\":package_slug-views\"\n```\n\n## Usage\n\n```php\n$variable = new VendorName\\Skeleton();\necho $variable->echoPhrase('Hello, VendorName!');\n```\n\n## Testing\n\n```bash\ncomposer test\n```\n\n## Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information on what has changed recently.\n\n## Contributing\n\nPlease see [CONTRIBUTING](CONTRIBUTING.md) for details.\n\n## Security Vulnerabilities\n\nPlease review [our security policy](../../security/policy) on how to report security vulnerabilities.\n\n## Credits\n\n- [:author_name](https://github.com/:author_username)\n- [All Contributors](../../contributors)\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.1904296875,
          "content": "{\n    \"name\": \":vendor_slug/:package_slug\",\n    \"description\": \":package_description\",\n    \"keywords\": [\n        \":vendor_name\",\n        \"laravel\",\n        \":package_slug\"\n    ],\n    \"homepage\": \"https://github.com/:vendor_slug/:package_slug\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \":author_name\",\n            \"email\": \"author@domain.com\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.4\",\n        \"spatie/laravel-package-tools\": \"^1.16\",\n        \"illuminate/contracts\": \"^10.0||^11.0\"\n    },\n    \"require-dev\": {\n        \"laravel/pint\": \"^1.14\",\n        \"nunomaduro/collision\": \"^8.1.1||^7.10.0\",\n        \"larastan/larastan\": \"^2.9\",\n        \"orchestra/testbench\": \"^9.0.0||^8.22.0\",\n        \"pestphp/pest\": \"^3.0\",\n        \"pestphp/pest-plugin-arch\": \"^3.0\",\n        \"pestphp/pest-plugin-laravel\": \"^3.0\",\n        \"phpstan/extension-installer\": \"^1.3\",\n        \"phpstan/phpstan-deprecation-rules\": \"^1.1\",\n        \"phpstan/phpstan-phpunit\": \"^1.3\",\n        \"spatie/laravel-ray\": \"^1.35\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"VendorName\\\\Skeleton\\\\\": \"src/\",\n            \"VendorName\\\\Skeleton\\\\Database\\\\Factories\\\\\": \"database/factories/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"VendorName\\\\Skeleton\\\\Tests\\\\\": \"tests/\",\n            \"Workbench\\\\App\\\\\": \"workbench/app/\"\n        }\n    },\n    \"scripts\": {\n        \"post-autoload-dump\": \"@composer run prepare\",\n        \"prepare\": \"@php vendor/bin/testbench package:discover --ansi\",\n        \"analyse\": \"vendor/bin/phpstan analyse\",\n        \"test\": \"vendor/bin/pest\",\n        \"test-coverage\": \"vendor/bin/pest --coverage\",\n        \"format\": \"vendor/bin/pint\"\n    },\n    \"config\": {\n        \"sort-packages\": true,\n        \"allow-plugins\": {\n            \"pestphp/pest-plugin\": true,\n            \"phpstan/extension-installer\": true\n        }\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"VendorName\\\\Skeleton\\\\SkeletonServiceProvider\"\n            ],\n            \"aliases\": {\n                \"Skeleton\": \"VendorName\\\\Skeleton\\\\Facades\\\\Skeleton\"\n            }\n        }\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.php",
          "type": "blob",
          "size": 11.5185546875,
          "content": "#!/usr/bin/env php\n<?php\n\nfunction ask(string $question, string $default = ''): string\n{\n    $answer = readline($question.($default ? \" ({$default})\" : null).': ');\n\n    if (! $answer) {\n        return $default;\n    }\n\n    return $answer;\n}\n\nfunction confirm(string $question, bool $default = false): bool\n{\n    $answer = ask($question.' ('.($default ? 'Y/n' : 'y/N').')');\n\n    if (! $answer) {\n        return $default;\n    }\n\n    return strtolower($answer) === 'y';\n}\n\nfunction writeln(string $line): void\n{\n    echo $line.PHP_EOL;\n}\n\nfunction run(string $command): string\n{\n    return trim((string) shell_exec($command));\n}\n\nfunction str_after(string $subject, string $search): string\n{\n    $pos = strrpos($subject, $search);\n\n    if ($pos === false) {\n        return $subject;\n    }\n\n    return substr($subject, $pos + strlen($search));\n}\n\nfunction slugify(string $subject): string\n{\n    return strtolower(trim(preg_replace('/[^A-Za-z0-9-]+/', '-', $subject), '-'));\n}\n\nfunction title_case(string $subject): string\n{\n    return str_replace(' ', '', ucwords(str_replace(['-', '_'], ' ', $subject)));\n}\n\nfunction title_snake(string $subject, string $replace = '_'): string\n{\n    return str_replace(['-', '_'], $replace, $subject);\n}\n\nfunction replace_in_file(string $file, array $replacements): void\n{\n    $contents = file_get_contents($file);\n\n    file_put_contents(\n        $file,\n        str_replace(\n            array_keys($replacements),\n            array_values($replacements),\n            $contents\n        )\n    );\n}\n\nfunction remove_prefix(string $prefix, string $content): string\n{\n    if (str_starts_with($content, $prefix)) {\n        return substr($content, strlen($prefix));\n    }\n\n    return $content;\n}\n\nfunction remove_composer_deps(array $names)\n{\n    $data = json_decode(file_get_contents(__DIR__.'/composer.json'), true);\n\n    foreach ($data['require-dev'] as $name => $version) {\n        if (in_array($name, $names, true)) {\n            unset($data['require-dev'][$name]);\n        }\n    }\n\n    file_put_contents(__DIR__.'/composer.json', json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE));\n}\n\nfunction remove_composer_script($scriptName)\n{\n    $data = json_decode(file_get_contents(__DIR__.'/composer.json'), true);\n\n    foreach ($data['scripts'] as $name => $script) {\n        if ($scriptName === $name) {\n            unset($data['scripts'][$name]);\n            break;\n        }\n    }\n\n    file_put_contents(__DIR__.'/composer.json', json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE));\n}\n\nfunction remove_readme_paragraphs(string $file): void\n{\n    $contents = file_get_contents($file);\n\n    file_put_contents(\n        $file,\n        preg_replace('/<!--delete-->.*<!--\\/delete-->/s', '', $contents) ?: $contents\n    );\n}\n\nfunction safeUnlink(string $filename)\n{\n    if (file_exists($filename) && is_file($filename)) {\n        unlink($filename);\n    }\n}\n\nfunction determineSeparator(string $path): string\n{\n    return str_replace('/', DIRECTORY_SEPARATOR, $path);\n}\n\nfunction replaceForWindows(): array\n{\n    return preg_split('/\\\\r\\\\n|\\\\r|\\\\n/', run('dir /S /B * | findstr /v /i .git\\ | findstr /v /i vendor | findstr /v /i '.basename(__FILE__).' | findstr /r /i /M /F:/ \":author :vendor :package VendorName skeleton migration_table_name vendor_name vendor_slug author@domain.com\"'));\n}\n\nfunction replaceForAllOtherOSes(): array\n{\n    return explode(PHP_EOL, run('grep -E -r -l -i \":author|:vendor|:package|VendorName|skeleton|migration_table_name|vendor_name|vendor_slug|author@domain.com\" --exclude-dir=vendor ./* ./.github/* | grep -v '.basename(__FILE__)));\n}\n\nfunction getGitHubApiEndpoint(string $endpoint): ?stdClass\n{\n    try {\n        $curl = curl_init(\"https://api.github.com/{$endpoint}\");\n        curl_setopt_array($curl, [\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_HTTPGET => true,\n            CURLOPT_HTTPHEADER => [\n                'User-Agent: spatie-configure-script/1.0',\n            ],\n        ]);\n\n        $response = curl_exec($curl);\n        $statusCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);\n\n        curl_close($curl);\n\n        if ($statusCode === 200) {\n            return json_decode($response);\n        }\n    } catch (Exception $e) {\n        // ignore\n    }\n\n    return null;\n}\n\nfunction searchCommitsForGitHubUsername(): string\n{\n    $authorName = strtolower(trim(shell_exec('git config user.name')));\n\n    $committersRaw = shell_exec(\"git log --author='@users.noreply.github.com' --pretty='%an:%ae' --reverse\");\n    $committersLines = explode(\"\\n\", $committersRaw ?? '');\n    $committers = array_filter(array_map(function ($line) use ($authorName) {\n        $line = trim($line);\n        [$name, $email] = explode(':', $line) + [null, null];\n\n        return [\n            'name' => $name,\n            'email' => $email,\n            'isMatch' => strtolower($name) === $authorName && ! str_contains($name, '[bot]'),\n        ];\n    }, $committersLines), fn ($item) => $item['isMatch']);\n\n    if (empty($committers)) {\n        return '';\n    }\n\n    $firstCommitter = reset($committers);\n\n    return explode('@', $firstCommitter['email'])[0] ?? '';\n}\n\nfunction guessGitHubUsernameUsingCli()\n{\n    try {\n        if (preg_match('/ogged in to github\\.com as ([a-zA-Z-_]+).+/', shell_exec('gh auth status -h github.com 2>&1'), $matches)) {\n            return $matches[1];\n        }\n    } catch (Exception $e) {\n        // ignore\n    }\n\n    return '';\n}\n\nfunction guessGitHubUsername(): string\n{\n    $username = searchCommitsForGitHubUsername();\n    if (! empty($username)) {\n        return $username;\n    }\n\n    $username = guessGitHubUsernameUsingCli();\n    if (! empty($username)) {\n        return $username;\n    }\n\n    // fall back to using the username from the git remote\n    $remoteUrl = shell_exec('git config remote.origin.url') ?? '';\n    $remoteUrlParts = explode('/', str_replace(':', '/', trim($remoteUrl)));\n\n    return $remoteUrlParts[1] ?? '';\n}\n\nfunction guessGitHubVendorInfo($authorName, $username): array\n{\n    $remoteUrl = shell_exec('git config remote.origin.url') ?? '';\n    $remoteUrlParts = explode('/', str_replace(':', '/', trim($remoteUrl)));\n\n    if (! isset($remoteUrlParts[1])) {\n        return [$authorName, $username];\n    }\n\n    $response = getGitHubApiEndpoint(\"orgs/{$remoteUrlParts[1]}\");\n\n    if ($response === null) {\n        return [$authorName, $username];\n    }\n\n    return [$response->name ?? $authorName, $response->login ?? $username];\n}\n\n$gitName = run('git config user.name');\n$authorName = ask('Author name', $gitName);\n\n$gitEmail = run('git config user.email');\n$authorEmail = ask('Author email', $gitEmail);\n$authorUsername = ask('Author username', guessGitHubUsername());\n\n$guessGitHubVendorInfo = guessGitHubVendorInfo($authorName, $authorUsername);\n\n$vendorName = ask('Vendor name', $guessGitHubVendorInfo[0]);\n$vendorUsername = ask('Vendor username', $guessGitHubVendorInfo[1] ?? slugify($vendorName));\n$vendorSlug = slugify($vendorUsername);\n\n$vendorNamespace = str_replace('-', '', ucwords($vendorName));\n$vendorNamespace = ask('Vendor namespace', $vendorNamespace);\n\n$currentDirectory = getcwd();\n$folderName = basename($currentDirectory);\n\n$packageName = ask('Package name', $folderName);\n$packageSlug = slugify($packageName);\n$packageSlugWithoutPrefix = remove_prefix('laravel-', $packageSlug);\n\n$className = title_case($packageName);\n$className = ask('Class name', $className);\n$variableName = lcfirst($className);\n$description = ask('Package description', \"This is my package {$packageSlug}\");\n\n$usePhpStan = confirm('Enable PhpStan?', true);\n$useLaravelPint = confirm('Enable Laravel Pint?', true);\n$useDependabot = confirm('Enable Dependabot?', true);\n$useLaravelRay = confirm('Use Ray for debugging?', true);\n$useUpdateChangelogWorkflow = confirm('Use automatic changelog updater workflow?', true);\n\nwriteln('------');\nwriteln(\"Author     : {$authorName} ({$authorUsername}, {$authorEmail})\");\nwriteln(\"Vendor     : {$vendorName} ({$vendorSlug})\");\nwriteln(\"Package    : {$packageSlug} <{$description}>\");\nwriteln(\"Namespace  : {$vendorNamespace}\\\\{$className}\");\nwriteln(\"Class name : {$className}\");\nwriteln('---');\nwriteln('Packages & Utilities');\nwriteln('Use Laravel/Pint     : '.($useLaravelPint ? 'yes' : 'no'));\nwriteln('Use Larastan/PhpStan : '.($usePhpStan ? 'yes' : 'no'));\nwriteln('Use Dependabot       : '.($useDependabot ? 'yes' : 'no'));\nwriteln('Use Ray App          : '.($useLaravelRay ? 'yes' : 'no'));\nwriteln('Use Auto-Changelog   : '.($useUpdateChangelogWorkflow ? 'yes' : 'no'));\nwriteln('------');\n\nwriteln('This script will replace the above values in all relevant files in the project directory.');\n\nif (! confirm('Modify files?', true)) {\n    exit(1);\n}\n\n$files = (str_starts_with(strtoupper(PHP_OS), 'WIN') ? replaceForWindows() : replaceForAllOtherOSes());\n\nforeach ($files as $file) {\n    replace_in_file($file, [\n        ':author_name' => $authorName,\n        ':author_username' => $authorUsername,\n        'author@domain.com' => $authorEmail,\n        ':vendor_name' => $vendorName,\n        ':vendor_slug' => $vendorSlug,\n        'VendorName' => $vendorNamespace,\n        ':package_name' => $packageName,\n        ':package_slug' => $packageSlug,\n        ':package_slug_without_prefix' => $packageSlugWithoutPrefix,\n        'Skeleton' => $className,\n        'skeleton' => $packageSlug,\n        'migration_table_name' => title_snake($packageSlug),\n        'variable' => $variableName,\n        ':package_description' => $description,\n    ]);\n\n    match (true) {\n        str_contains($file, determineSeparator('src/Skeleton.php')) => rename($file, determineSeparator('./src/'.$className.'.php')),\n        str_contains($file, determineSeparator('src/SkeletonServiceProvider.php')) => rename($file, determineSeparator('./src/'.$className.'ServiceProvider.php')),\n        str_contains($file, determineSeparator('src/Facades/Skeleton.php')) => rename($file, determineSeparator('./src/Facades/'.$className.'.php')),\n        str_contains($file, determineSeparator('src/Commands/SkeletonCommand.php')) => rename($file, determineSeparator('./src/Commands/'.$className.'Command.php')),\n        str_contains($file, determineSeparator('database/migrations/create_skeleton_table.php.stub')) => rename($file, determineSeparator('./database/migrations/create_'.title_snake($packageSlugWithoutPrefix).'_table.php.stub')),\n        str_contains($file, determineSeparator('config/skeleton.php')) => rename($file, determineSeparator('./config/'.$packageSlugWithoutPrefix.'.php')),\n        str_contains($file, 'README.md') => remove_readme_paragraphs($file),\n        default => [],\n    };\n}\n\nif (! $useLaravelPint) {\n    safeUnlink(__DIR__.'/.github/workflows/fix-php-code-style-issues.yml');\n    safeUnlink(__DIR__.'/pint.json');\n}\n\nif (! $usePhpStan) {\n    safeUnlink(__DIR__.'/phpstan.neon.dist');\n    safeUnlink(__DIR__.'/phpstan-baseline.neon');\n    safeUnlink(__DIR__.'/.github/workflows/phpstan.yml');\n\n    remove_composer_deps([\n        'phpstan/extension-installer',\n        'phpstan/phpstan-deprecation-rules',\n        'phpstan/phpstan-phpunit',\n        'larastan/larastan',\n    ]);\n\n    remove_composer_script('phpstan');\n}\n\nif (! $useDependabot) {\n    safeUnlink(__DIR__.'/.github/dependabot.yml');\n    safeUnlink(__DIR__.'/.github/workflows/dependabot-auto-merge.yml');\n}\n\nif (! $useLaravelRay) {\n    remove_composer_deps(['spatie/laravel-ray']);\n}\n\nif (! $useUpdateChangelogWorkflow) {\n    safeUnlink(__DIR__.'/.github/workflows/update-changelog.yml');\n}\n\nconfirm('Execute `composer install` and run tests?') && run('composer install && composer test');\n\nconfirm('Let this script delete itself?', true) && unlink(__FILE__);\n"
        },
        {
          "name": "database",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpstan-baseline.neon",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 0.2119140625,
          "content": "includes:\n    - phpstan-baseline.neon\n\nparameters:\n    level: 5\n    paths:\n        - src\n        - config\n        - database\n    tmpDir: build/phpstan\n    checkOctaneCompatibility: true\n    checkModelProperties: true\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.8798828125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.3/phpunit.xsd\"\n    backupGlobals=\"false\"\n    bootstrap=\"vendor/autoload.php\"\n    colors=\"true\"\n    processIsolation=\"false\"\n    stopOnFailure=\"false\"\n    executionOrder=\"random\"\n    failOnWarning=\"true\"\n    failOnRisky=\"true\"\n    failOnEmptyTestSuite=\"true\"\n    beStrictAboutOutputDuringTests=\"true\"\n    cacheDirectory=\".phpunit.cache\"\n    backupStaticProperties=\"false\"\n>\n    <testsuites>\n        <testsuite name=\"VendorName Test Suite\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n    <logging>\n        <junit outputFile=\"build/report.junit.xml\"/>\n    </logging>\n    <source>\n        <include>\n            <directory suffix=\".php\">./src</directory>\n        </include>\n    </source>\n</phpunit>\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}