{
  "metadata": {
    "timestamp": 1736711846772,
    "page": 170,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "php-curl-class/php-curl-class",
      "stars": 3265,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1201171875,
          "content": "root = true\n\n[*.php]\ncharset = utf-8\nend_of_line = lf\nindent_size = 4\nindent_style = space\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3125,
          "content": "/.github/ export-ignore\n/docs/ export-ignore\n/examples/ export-ignore\n/scripts/ export-ignore\n/tests/ export-ignore\n/www/ export-ignore\n/.editorconfig export-ignore\n/.gitattributes export-ignore\n/.gitignore export-ignore\n/.pre-commit-config.yaml export-ignore\n/TESTING.md export-ignore\n/TROUBLESHOOTING.md export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.029296875,
          "content": "vendor/\ncomposer.lock\n\n.idea/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.109375,
          "content": "# Pre-commit git hooks.\n#\n# Usage:\n#   1. Run one of:\n#     $ pip install pre-commit\n#     $ brew install pre-commit\n#\n#   2. Install hooks\n#     $ pre-commit install\n#\n#   3. Optionally, enable automatic updates\n#     $ pre-commit autoupdate\nrepos:\n- repo: https://github.com/psf/black\n  rev: 24.10.0\n  hooks:\n  - id: black\n    name: black\n    entry: black\n- repo: https://github.com/pycqa/flake8\n  rev: 7.1.1\n  hooks:\n  - id: flake8\n    args: [\"--config\", \"tests/setup.cfg\"]\n- repo: https://github.com/pycqa/isort\n  rev: 5.13.2\n  hooks:\n  - id: isort\n    name: isort\n    args: [\"--force-single-line-imports\", \"--profile\", \"black\"]\n- repo: local\n  hooks:\n  - id: composer-validate\n    name: composer-validate\n    language: script\n    entry: scripts/pre-commit.sh\n    files: 'composer\\.json'\n    pass_filenames: true\n- repo: https://github.com/jazzband/pip-tools\n  rev: 7.4.1\n  hooks:\n  - id: pip-compile\n    name: pip-compile make_release_requirements.in\n    files: ^(.*/)?make_release_requirements\\.(in|txt)$\n    entry: bash -c 'cd scripts/ && pip-compile --output-file=\"make_release_requirements.txt\" \"make_release_requirements.in\"'\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 11.5205078125,
          "content": "# Change Log\n\nPHP Curl Class uses semantic versioning with version numbers written as `MAJOR.MINOR.PATCH`. You may safely update\n`MINOR` and `PATCH` version changes. It is recommended to review `MAJOR` changes prior to upgrade as there may be\nbackwards-incompatible changes that will affect existing usage.\n\n<!-- CHANGELOG_PLACEHOLDER -->\n\n## 11.0.0 - 2024-08-22\n\n- Drop support for PHP 7.3 ([#889](https://github.com/php-curl-class/php-curl-class/pull/889))\n- Drop support for PHP 7.2 ([#888](https://github.com/php-curl-class/php-curl-class/pull/888))\n- Drop support for PHP 7.1 ([#887](https://github.com/php-curl-class/php-curl-class/pull/887))\n\n## 10.0.1 - 2024-08-21\n\n- Use nullable type declaration ([#882](https://github.com/php-curl-class/php-curl-class/pull/882))\n\n## 10.0.0 - 2024-08-20\n\n- Drop support for PHP 7.0 ([#880](https://github.com/php-curl-class/php-curl-class/pull/880))\n- Add public method getActiveCurls ([#871](https://github.com/php-curl-class/php-curl-class/pull/871))\n\n## 9.19.2 - 2024-04-09\n\n- Fix CI: Use nullable type declaration ([#859](https://github.com/php-curl-class/php-curl-class/pull/859))\n\n## 9.19.1 - 2024-02-27\n\n- Fix afterSend not being called ([#848](https://github.com/php-curl-class/php-curl-class/pull/848))\n\n## 9.19.0 - 2024-01-18\n\n- Allow displaying curl option value without specifying value ([#837](https://github.com/php-curl-class/php-curl-class/pull/837))\n\n## 9.18.2 - 2023-09-11\n\n- Fix use of mb_strpos() causing error when polyfill is used ([#813](https://github.com/php-curl-class/php-curl-class/pull/813))\n\n## 9.18.1 - 2023-08-29\n\n- Add additional check for decoding gzip-encoded responses ([#808](https://github.com/php-curl-class/php-curl-class/pull/808))\n\n## 9.18.0 - 2023-08-28\n\n- Implement Curl::setError() and MultiCurl::setError() ([#805](https://github.com/php-curl-class/php-curl-class/pull/805))\n- Rename ::setError() to ::afterSend() ([#807](https://github.com/php-curl-class/php-curl-class/pull/807))\n\n## 9.17.4 - 2023-07-10\n\n- Add coding standards rule to use the null coalescing operator ?? where possible ([#801](https://github.com/php-curl-class/php-curl-class/pull/801))\n- Replace isset with null coalescing operator ([#800](https://github.com/php-curl-class/php-curl-class/pull/800))\n\n## 9.17.3 - 2023-07-04\n\n- Update PHP_CodeSniffer ruleset: PSR2 → PSR12 ([#797](https://github.com/php-curl-class/php-curl-class/pull/797))\n- Add additional coding standard checks ([#796](https://github.com/php-curl-class/php-curl-class/pull/796))\n\n## 9.17.2 - 2023-06-27\n\n- Use short array syntax ([#793](https://github.com/php-curl-class/php-curl-class/pull/793))\n- Add PHP-CS-Fixer to check for unused imports ([#794](https://github.com/php-curl-class/php-curl-class/pull/794))\n- Replace `uniqid` by `random_bytes` ([#792](https://github.com/php-curl-class/php-curl-class/pull/792))\n\n## 9.17.1 - 2023-06-14\n\n- Improve and add tests for Curl::fastDownload() ([#791](https://github.com/php-curl-class/php-curl-class/pull/791))\n\n## 9.17.0 - 2023-06-13\n\n- Make method to display curl option value public ([#790](https://github.com/php-curl-class/php-curl-class/pull/790))\n\n## 9.16.1 - 2023-06-12\n\n- Differentiate between internal options and user-set options ([#788](https://github.com/php-curl-class/php-curl-class/pull/788))\n- Create method to display a curl option value ([#785](https://github.com/php-curl-class/php-curl-class/pull/785))\n- Fix existing header overwritten after using MultiCurl::addCurl() ([#787](https://github.com/php-curl-class/php-curl-class/pull/787))\n\n## 9.16.0 - 2023-05-25\n\n- Graduate Curl::fastDownload() ([#783](https://github.com/php-curl-class/php-curl-class/pull/783))\n\n## 9.15.1 - 2023-05-24\n\n- Fix PHP CodeSniffer errors ([#782](https://github.com/php-curl-class/php-curl-class/pull/782))\n\n## 9.15.0 - 2023-05-22\n\n- Update Curl::diagnose() to detect bit flags with negative values ([#781](https://github.com/php-curl-class/php-curl-class/pull/781))\n- Display bit flags in use when calling Curl::diagnose() ([#779](https://github.com/php-curl-class/php-curl-class/pull/779))\n\n## 9.14.5 - 2023-05-16\n\n- Handle missing content-type response header in Curl::diagnose() ([#778](https://github.com/php-curl-class/php-curl-class/pull/778))\n\n## 9.14.4 - 2023-05-08\n\n- Update article in Curl::diagnose() Allow header warning ([#776](https://github.com/php-curl-class/php-curl-class/pull/776))\n\n## 9.14.3 - 2023-03-13\n\n- Remove use of array_merge() inside loop ([#774](https://github.com/php-curl-class/php-curl-class/pull/774))\n\n## 9.14.2 - 2023-03-09\n\n- Clean up: Reduce nesting ([#771](https://github.com/php-curl-class/php-curl-class/pull/771))\n\n## 9.14.1 - 2023-02-27\n\n- Remove coding standard ruleset exclusion ([#768](https://github.com/php-curl-class/php-curl-class/pull/768))\n\n## 9.14.0 - 2023-02-26\n\n- Make https:// and http:// the allowed request protocols by default ([#767](https://github.com/php-curl-class/php-curl-class/pull/767))\n\n## 9.13.1 - 2023-01-16\n\n- Allow uploads with CURLStringFile type  ([#762](https://github.com/php-curl-class/php-curl-class/pull/762))\n\n## 9.13.0 - 2023-01-13\n\n- Implement abstract class BaseCurl for Curl and MultiCurl ([#759](https://github.com/php-curl-class/php-curl-class/pull/759))\n- Display error messages found in Curl::diagnose() ([#758](https://github.com/php-curl-class/php-curl-class/pull/758))\n- Fix Curl::diagnose() request type output for POST requests ([#757](https://github.com/php-curl-class/php-curl-class/pull/757))\n\n## 9.12.6 - 2023-01-11\n\n- Replace use of #[\\AllowDynamicProperties] ([#756](https://github.com/php-curl-class/php-curl-class/pull/756))\n- silence PHP 8.2 deprecation notices ([#754](https://github.com/php-curl-class/php-curl-class/pull/754))\n\n## 9.12.5 - 2022-12-20\n\n- Fix static analysis error ([#752](https://github.com/php-curl-class/php-curl-class/pull/752))\n\n## 9.12.4 - 2022-12-17\n\n- Exclude additional files from git archive ([#751](https://github.com/php-curl-class/php-curl-class/pull/751))\n\n## 9.12.3 - 2022-12-13\n\n- Ensure string response before gzip decode ([#749](https://github.com/php-curl-class/php-curl-class/pull/749))\n\n## 9.12.2 - 2022-12-11\n\n- Disable warning when gzip-decoding response errors ([#748](https://github.com/php-curl-class/php-curl-class/pull/748))\n\n## 9.12.1 - 2022-12-08\n\n- Include option constant that uses the CURLINFO_ prefix ([#745](https://github.com/php-curl-class/php-curl-class/pull/745))\n\n## 9.12.0 - 2022-12-07\n\n- Add automatic gzip decoding of response ([#744](https://github.com/php-curl-class/php-curl-class/pull/744))\n\n## 9.11.1 - 2022-12-06\n\n- change: remove unused namespace import ([#743](https://github.com/php-curl-class/php-curl-class/pull/743))\n\n## 9.11.0 - 2022-12-05\n\n- Add Curl::diagnose() HTTP method check matches methods allowed ([#741](https://github.com/php-curl-class/php-curl-class/pull/741))\n- Add temporary fix missing template params ([#742](https://github.com/php-curl-class/php-curl-class/pull/742))\n\n## 9.10.0 - 2022-11-07\n\n- Display request options in Curl::diagnose() output ([#739](https://github.com/php-curl-class/php-curl-class/pull/739))\n\n## 9.9.0 - 2022-11-06\n\n- Fix MultiCurl::setCookieString() ([#738](https://github.com/php-curl-class/php-curl-class/pull/738))\n- Pass MultiCurl options to new Curl instances earlier ([#737](https://github.com/php-curl-class/php-curl-class/pull/737))\n- Add deferred constant curlErrorCodeConstants ([#736](https://github.com/php-curl-class/php-curl-class/pull/736))\n\n## 9.8.0 - 2022-10-01\n\n- Include curl error code constant in curl error message ([#733](https://github.com/php-curl-class/php-curl-class/pull/733))\n\n## 9.7.0 - 2022-09-29\n\n- Implement ArrayUtil::arrayRandomIndex() ([#732](https://github.com/php-curl-class/php-curl-class/pull/732))\n\n## 9.6.3 - 2022-09-24\n\n- Remove filter flag constants deprecated as of PHP 7.3 ([#730](https://github.com/php-curl-class/php-curl-class/pull/730))\n\n## 9.6.2 - 2022-09-24\n\n- Call MultiCurl::beforeSend() before each request is made ([#723](https://github.com/php-curl-class/php-curl-class/pull/723))\n- Encode keys for post data with numeric keys ([#726](https://github.com/php-curl-class/php-curl-class/pull/726))\n- Fix building post data with object ([#728](https://github.com/php-curl-class/php-curl-class/pull/728))\n\n## 9.6.1 - 2022-06-30\n\n### Fixed\n\n- Attempt to stop active requests when `MultiCurl::stop()` is called\n  [#714](https://github.com/php-curl-class/php-curl-class/issues/714)\n  [#718](https://github.com/php-curl-class/php-curl-class/issues/718)\n- Retain keys for arrays with null values when building post data\n  [#712](https://github.com/php-curl-class/php-curl-class/issues/712)\n\n## 9.6.0 - 2022-03-17\n\n### Added\n\n- Method `MultiCurl::stop()` for stopping subsequent requests\n  [#708](https://github.com/php-curl-class/php-curl-class/issues/708)\n\n## 9.5.1 - 2021-12-14\n\n### Fixed\n\n- Silence PHP 8.1 deprecations [#691](https://github.com/php-curl-class/php-curl-class/issues/691)\n- Remove data parameter from additional request types\n  [#689](https://github.com/php-curl-class/php-curl-class/issues/689)\n\n## 9.5.0 - 2021-11-21\n\n### Added\n\n- Method `Curl::setStop()` for stopping requests early without downloading the full response body\n  [#681](https://github.com/php-curl-class/php-curl-class/issues/681)\n\n### Fixed\n\n- Fixed constructing request url when using `MultiCurl::addPost()`\n  [#686](https://github.com/php-curl-class/php-curl-class/issues/686)\n\n## 9.4.0 - 2021-09-04\n\n### Changed\n\n- Method `Url::parseUrl()` is now public\n\n### Fixed\n\n- Fix parsing schemeless urls [#679](https://github.com/php-curl-class/php-curl-class/issues/679)\n\n## 9.3.1 - 2021-08-05\n\n### Changed\n\n- Enabled strict types (`declare(strict_types=1);`)\n\n### Fixed\n\n- Fixed `Curl::downloadFileName` not being set correctly\n\n## 9.3.0 - 2021-07-23\n\n### Added\n\n- Method `Curl::diagnose()` for troubleshooting requests\n\n## 9.2.0 - 2021-06-23\n\n### Added\n\n- Additional Curl::set\\* and MultiCurl::set\\* helper methods\n\n    ```\n    Curl::setAutoReferer()\n    Curl::setAutoReferrer()\n    Curl::setFollowLocation()\n    Curl::setForbidReuse()\n    Curl::setMaximumRedirects()\n    MultiCurl::setAutoReferer()\n    MultiCurl::setAutoReferrer()\n    MultiCurl::setFollowLocation()\n    MultiCurl::setForbidReuse()\n    MultiCurl::setMaximumRedirects()\n    ```\n\n### Fixed\n\n- Closing curl handles [#670](https://github.com/php-curl-class/php-curl-class/issues/670)\n- Use of \"$this\" in non-object context [#671](https://github.com/php-curl-class/php-curl-class/pull/671)\n\n## 9.1.0 - 2021-03-24\n\n### Added\n\n- Support for using relative urls with MultiCurl::add\\*() methods [#628](https://github.com/php-curl-class/php-curl-class/issues/628)\n\n## 9.0.0 - 2021-03-19\n\n### Changed\n\n- Use short array syntax\n\n### Removed\n\n- Support for PHP 5.3, 5.4, 5.5, and 5.6 [#380](https://github.com/php-curl-class/php-curl-class/issues/380)\n\n## Manual Review\n\nA manual review of changes is possible using the\n[comparison page](https://github.com/php-curl-class/php-curl-class/compare/). For example, visit\n[7.4.0...8.0.0](https://github.com/php-curl-class/php-curl-class/compare/7.4.0...8.0.0) to compare the changes for\nthe `MAJOR` upgrade from 7.4.0 to 8.0.0. Comparing against `HEAD` is also possible using the `tag...HEAD` syntax\n([8.3.0...HEAD](https://github.com/php-curl-class/php-curl-class/compare/8.3.0...HEAD)).\n\nView the log between releases:\n\n    $ git fetch --tags\n    $ git log 7.4.0...8.0.0\n\nView the code changes between releases:\n\n    $ git fetch --tags\n    $ git diff 7.4.0...8.0.0\n\nView only the source log and code changes between releases:\n\n    $ git log 7.4.0...8.0.0 \"src/\"\n    $ git diff 7.4.0...8.0.0 \"src/\"\n\nView only the source log and code changes between a release and the current checked-out commit:\n\n    $ git log 8.0.0...head \"src/\"\n    $ git diff 8.0.0...head \"src/\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1826171875,
          "content": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.912109375,
          "content": "# PHP Curl Class: HTTP requests made easy\n\n[![](https://img.shields.io/github/release/php-curl-class/php-curl-class.svg?style=for-the-badge&sort=semver)](https://github.com/php-curl-class/php-curl-class/releases/)\n[![](https://img.shields.io/github/license/php-curl-class/php-curl-class.svg?style=for-the-badge)](https://github.com/php-curl-class/php-curl-class/blob/master/LICENSE)\n[![](https://img.shields.io/github/actions/workflow/status/php-curl-class/php-curl-class/ci.yml?style=for-the-badge&label=build&branch=master)](https://github.com/php-curl-class/php-curl-class/actions/workflows/ci.yml)\n[![](https://img.shields.io/github/actions/workflow/status/php-curl-class/php-curl-class/release.yml?style=for-the-badge&label=release&branch=master)](https://github.com/php-curl-class/php-curl-class/releases/)\n[![](https://img.shields.io/packagist/dt/php-curl-class/php-curl-class.svg?style=for-the-badge)](https://github.com/php-curl-class/php-curl-class/releases/)\n\nPHP Curl Class makes it easy to send HTTP requests and integrate with web APIs.\n\n![PHP Curl Class screencast](www/img/screencast.gif)\n\n---\n\n- [⚙️ Installation](#%EF%B8%8F-installation)\n- [📋 Requirements](#-requirements)\n- [🚀 Quick Start and Examples](#-quick-start-and-examples)\n- [📖 Available Methods](#-available-methods)\n- [🔒 Security](#-security)\n- [🛠️ Troubleshooting](#%EF%B8%8F-troubleshooting)\n- [🧪 Testing](#-testing)\n- [🤝 Contributing](#-contributing)\n\n---\n\n### ⚙️ Installation\n\nTo install PHP Curl Class, run the following command:\n\n    composer require php-curl-class/php-curl-class\n\nTo install the latest commit version:\n\n    composer require php-curl-class/php-curl-class @dev\n\nInstallation instructions to use the `composer` command can be found on https://github.com/composer/composer.\n\n### 📋 Requirements\n\nPHP Curl Class works with PHP 8.4, 8.3, 8.2, 8.1, 8.0, and 7.4.\n\n### 🚀 Quick Start and Examples\n\nMore examples are available under [/examples](https://github.com/php-curl-class/php-curl-class/tree/master/examples).\n\n```php\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Curl\\Curl;\n\n$curl = new Curl();\n$curl->get('https://www.example.com/');\n\nif ($curl->error) {\n    echo 'Error: ' . $curl->errorMessage . \"\\n\";\n    $curl->diagnose();\n} else {\n    echo 'Response:' . \"\\n\";\n    var_dump($curl->response);\n}\n```\n\n```php\n// https://www.example.com/search?q=keyword\n$curl = new Curl();\n$curl->get('https://www.example.com/search', [\n    'q' => 'keyword',\n]);\n```\n\n```php\n$curl = new Curl();\n$curl->post('https://www.example.com/login/', [\n    'username' => 'myusername',\n    'password' => 'mypassword',\n]);\n```\n\n```php\n$curl = new Curl();\n$curl->setBasicAuthentication('username', 'password');\n$curl->setUserAgent('MyUserAgent/0.0.1 (+https://www.example.com/bot.html)');\n$curl->setReferrer('https://www.example.com/url?url=https%3A%2F%2Fwww.example.com%2F');\n$curl->setHeader('X-Requested-With', 'XMLHttpRequest');\n$curl->setCookie('key', 'value');\n$curl->get('https://www.example.com/');\n\nif ($curl->error) {\n    echo 'Error: ' . $curl->errorMessage . \"\\n\";\n} else {\n    echo 'Response:' . \"\\n\";\n    var_dump($curl->response);\n}\n\nvar_dump($curl->requestHeaders);\nvar_dump($curl->responseHeaders);\n```\n\n```php\n$curl = new Curl();\n$curl->setFollowLocation();\n$curl->get('https://shortn.example.com/bHbVsP');\n```\n\n```php\n$curl = new Curl();\n$curl->put('https://api.example.com/user/', [\n    'first_name' => 'Zach',\n    'last_name' => 'Borboa',\n]);\n```\n\n```php\n$curl = new Curl();\n$curl->patch('https://api.example.com/profile/', [\n    'image' => '@path/to/file.jpg',\n]);\n```\n\n```php\n$curl = new Curl();\n$curl->patch('https://api.example.com/profile/', [\n    'image' => new CURLFile('path/to/file.jpg'),\n]);\n```\n\n```php\n$curl = new Curl();\n$curl->delete('https://api.example.com/user/', [\n    'id' => '1234',\n]);\n```\n\n```php\n// Enable all supported encoding types and download a file.\n$curl = new Curl();\n$curl->setOpt(CURLOPT_ENCODING , '');\n$curl->download('https://www.example.com/file.bin', '/tmp/myfile.bin');\n```\n\n```php\n// Case-insensitive access to headers.\n$curl = new Curl();\n$curl->download('https://www.example.com/image.png', '/tmp/myimage.png');\necho $curl->responseHeaders['Content-Type'] . \"\\n\"; // image/png\necho $curl->responseHeaders['CoNTeNT-TyPE'] . \"\\n\"; // image/png\n```\n\n```php\n// Manual clean up.\n$curl->close();\n```\n\n```php\n// Example access to curl object.\ncurl_set_opt($curl->curl, CURLOPT_USERAGENT, 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1');\ncurl_close($curl->curl);\n```\n\n```php\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Curl\\MultiCurl;\n\n// Requests in parallel with callback functions.\n$multi_curl = new MultiCurl();\n\n$multi_curl->success(function($instance) {\n    echo 'call to \"' . $instance->url . '\" was successful.' . \"\\n\";\n    echo 'response:' . \"\\n\";\n    var_dump($instance->response);\n});\n$multi_curl->error(function($instance) {\n    echo 'call to \"' . $instance->url . '\" was unsuccessful.' . \"\\n\";\n    echo 'error code: ' . $instance->errorCode . \"\\n\";\n    echo 'error message: ' . $instance->errorMessage . \"\\n\";\n});\n$multi_curl->complete(function($instance) {\n    echo 'call completed' . \"\\n\";\n});\n\n$multi_curl->addGet('https://www.google.com/search', [\n    'q' => 'hello world',\n]);\n$multi_curl->addGet('https://duckduckgo.com/', [\n    'q' => 'hello world',\n]);\n$multi_curl->addGet('https://www.bing.com/search', [\n    'q' => 'hello world',\n]);\n\n$multi_curl->start(); // Blocks until all items in the queue have been processed.\n```\n\nMore examples are available under [/examples](https://github.com/php-curl-class/php-curl-class/tree/master/examples).\n\n### 📖 Available Methods\n```php\nCurl::__construct($base_url = null, $options = [])\nCurl::__destruct()\nCurl::__get($name)\nCurl::afterSend($callback)\nCurl::attemptRetry()\nCurl::beforeSend($callback)\nCurl::buildPostData($data)\nCurl::call()\nCurl::close()\nCurl::complete($callback)\nCurl::delete($url, $query_parameters = [], $data = [])\nCurl::diagnose($return = false)\nCurl::disableTimeout()\nCurl::displayCurlOptionValue($option, $value = null)\nCurl::download($url, $mixed_filename)\nCurl::error($callback)\nCurl::exec($ch = null)\nCurl::execDone()\nCurl::fastDownload($url, $filename, $connections = 4)\nCurl::get($url, $data = [])\nCurl::getAttempts()\nCurl::getBeforeSendCallback()\nCurl::getCompleteCallback()\nCurl::getCookie($key)\nCurl::getCurl()\nCurl::getCurlErrorCode()\nCurl::getCurlErrorMessage()\nCurl::getDownloadCompleteCallback()\nCurl::getDownloadFileName()\nCurl::getErrorCallback()\nCurl::getErrorCode()\nCurl::getErrorMessage()\nCurl::getFileHandle()\nCurl::getHttpErrorMessage()\nCurl::getHttpStatusCode()\nCurl::getId()\nCurl::getInfo($opt = null)\nCurl::getJsonDecoder()\nCurl::getOpt($option)\nCurl::getOptions()\nCurl::getRawResponse()\nCurl::getRawResponseHeaders()\nCurl::getRemainingRetries()\nCurl::getRequestHeaders()\nCurl::getResponse()\nCurl::getResponseCookie($key)\nCurl::getResponseCookies()\nCurl::getResponseHeaders()\nCurl::getRetries()\nCurl::getRetryDecider()\nCurl::getSuccessCallback()\nCurl::getUrl()\nCurl::getUserSetOptions()\nCurl::getXmlDecoder()\nCurl::head($url, $data = [])\nCurl::isChildOfMultiCurl()\nCurl::isCurlError()\nCurl::isError()\nCurl::isHttpError()\nCurl::options($url, $data = [])\nCurl::patch($url, $data = [])\nCurl::post($url, $data = '', $follow_303_with_post = false)\nCurl::progress($callback)\nCurl::put($url, $data = [])\nCurl::removeHeader($key)\nCurl::reset()\nCurl::search($url, $data = [])\nCurl::setAutoReferer($auto_referer = true)\nCurl::setAutoReferrer($auto_referrer = true)\nCurl::setBasicAuthentication($username, $password = '')\nCurl::setConnectTimeout($seconds)\nCurl::setCookie($key, $value)\nCurl::setCookieFile($cookie_file)\nCurl::setCookieJar($cookie_jar)\nCurl::setCookieString($string)\nCurl::setCookies($cookies)\nCurl::setDefaultDecoder($mixed = 'json')\nCurl::setDefaultHeaderOut()\nCurl::setDefaultJsonDecoder()\nCurl::setDefaultTimeout()\nCurl::setDefaultUserAgent()\nCurl::setDefaultXmlDecoder()\nCurl::setDigestAuthentication($username, $password = '')\nCurl::setFile($file)\nCurl::setFollowLocation($follow_location = true)\nCurl::setForbidReuse($forbid_reuse = true)\nCurl::setHeader($key, $value)\nCurl::setHeaders($headers)\nCurl::setInterface($interface)\nCurl::setJsonDecoder($mixed)\nCurl::setMaxFilesize($bytes)\nCurl::setMaximumRedirects($maximum_redirects)\nCurl::setOpt($option, $value)\nCurl::setOpts($options)\nCurl::setPort($port)\nCurl::setProtocols($protocols)\nCurl::setProxy($proxy, $port = null, $username = null, $password = null)\nCurl::setProxyAuth($auth)\nCurl::setProxyTunnel($tunnel = true)\nCurl::setProxyType($type)\nCurl::setRange($range)\nCurl::setRedirectProtocols($redirect_protocols)\nCurl::setReferer($referer)\nCurl::setReferrer($referrer)\nCurl::setRetry($mixed)\nCurl::setStop($callback = null)\nCurl::setTimeout($seconds)\nCurl::setUrl($url, $mixed_data = '')\nCurl::setUserAgent($user_agent)\nCurl::setXmlDecoder($mixed)\nCurl::stop()\nCurl::success($callback)\nCurl::unsetHeader($key)\nCurl::unsetProxy()\nCurl::verbose($on = true, $output = 'STDERR')\nMultiCurl::__construct($base_url = null)\nMultiCurl::__destruct()\nMultiCurl::addCurl(Curl $curl)\nMultiCurl::addDelete($url, $query_parameters = [], $data = [])\nMultiCurl::addDownload($url, $mixed_filename)\nMultiCurl::addGet($url, $data = [])\nMultiCurl::addHead($url, $data = [])\nMultiCurl::addOptions($url, $data = [])\nMultiCurl::addPatch($url, $data = [])\nMultiCurl::addPost($url, $data = '', $follow_303_with_post = false)\nMultiCurl::addPut($url, $data = [])\nMultiCurl::addSearch($url, $data = [])\nMultiCurl::afterSend($callback)\nMultiCurl::beforeSend($callback)\nMultiCurl::close()\nMultiCurl::complete($callback)\nMultiCurl::disableTimeout()\nMultiCurl::error($callback)\nMultiCurl::getActiveCurls()\nMultiCurl::getOpt($option)\nMultiCurl::removeHeader($key)\nMultiCurl::setAutoReferer($auto_referer = true)\nMultiCurl::setAutoReferrer($auto_referrer = true)\nMultiCurl::setBasicAuthentication($username, $password = '')\nMultiCurl::setConcurrency($concurrency)\nMultiCurl::setConnectTimeout($seconds)\nMultiCurl::setCookie($key, $value)\nMultiCurl::setCookieFile($cookie_file)\nMultiCurl::setCookieJar($cookie_jar)\nMultiCurl::setCookieString($string)\nMultiCurl::setCookies($cookies)\nMultiCurl::setDigestAuthentication($username, $password = '')\nMultiCurl::setFile($file)\nMultiCurl::setFollowLocation($follow_location = true)\nMultiCurl::setForbidReuse($forbid_reuse = true)\nMultiCurl::setHeader($key, $value)\nMultiCurl::setHeaders($headers)\nMultiCurl::setInterface($interface)\nMultiCurl::setJsonDecoder($mixed)\nMultiCurl::setMaximumRedirects($maximum_redirects)\nMultiCurl::setOpt($option, $value)\nMultiCurl::setOpts($options)\nMultiCurl::setPort($port)\nMultiCurl::setProxies($proxies)\nMultiCurl::setProxy($proxy, $port = null, $username = null, $password = null)\nMultiCurl::setProxyAuth($auth)\nMultiCurl::setProxyTunnel($tunnel = true)\nMultiCurl::setProxyType($type)\nMultiCurl::setRange($range)\nMultiCurl::setRateLimit($rate_limit)\nMultiCurl::setReferer($referer)\nMultiCurl::setReferrer($referrer)\nMultiCurl::setRequestTimeAccuracy()\nMultiCurl::setRetry($mixed)\nMultiCurl::setTimeout($seconds)\nMultiCurl::setUrl($url, $mixed_data = '')\nMultiCurl::setUserAgent($user_agent)\nMultiCurl::setXmlDecoder($mixed)\nMultiCurl::start()\nMultiCurl::stop()\nMultiCurl::success($callback)\nMultiCurl::unsetHeader($key)\nMultiCurl::unsetProxy()\nMultiCurl::verbose($on = true, $output = 'STDERR')\n```\n\n### 🔒 Security\n\nSee [SECURITY](https://github.com/php-curl-class/php-curl-class/blob/master/SECURITY.md) for security considerations.\n\n### 🛠️ Troubleshooting\n\nSee [TROUBLESHOOTING](https://github.com/php-curl-class/php-curl-class/blob/master/TROUBLESHOOTING.md) for help troubleshooting.\n\n### 🧪 Testing\n\nSee [TESTING](https://github.com/php-curl-class/php-curl-class/blob/master/TESTING.md) for testing information.\n\n### 🤝 Contributing\n\n1. Check for open issues or open a new issue to start a discussion around a bug or feature.\n1. Fork the repository on GitHub to start making your changes.\n1. Write one or more tests for the new feature or that expose the bug.\n1. Make code changes to implement the feature or fix the bug.\n1. Send a pull request to get your changes merged and published.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 4.0654296875,
          "content": "# Security Considerations\n\n### Url may point to system files\n\n* Don't blindly accept urls from users as they may point to system files. Curl supports many protocols including `FILE`.\n  The following would show the contents of `file:///etc/passwd`.\n\n```bash\n# Attacker.\n$ curl https://www.example.com/display_webpage.php?url=file%3A%2F%2F%2Fetc%2Fpasswd\n```\n\n```php\n// display_webpage.php\n$url = $_GET['url']; // DANGER!\n$curl = new Curl();\n$curl->get($url);\necho $curl->response;\n```\n\nSafer:\n\n```php\nfunction is_allowed_url($url, $allowed_url_schemes = ['http', 'https']) {\n    $valid_url = filter_var($url, FILTER_VALIDATE_URL) !== false;\n    if ($valid_url) {\n        $scheme = parse_url($url, PHP_URL_SCHEME);\n        return in_array($scheme, $allowed_url_schemes, true);\n    }\n    $valid_ip = filter_var($url, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE) !== false;\n    return $valid_ip;\n}\n\n$url = $_GET['url'];\nif (!is_allowed_url($url)) {\n    die('Unsafe url detected.');\n}\n\n$curl = new Curl();\n$curl->setProtocols(CURLPROTO_HTTPS);\n$curl->setRedirectProtocols(CURLPROTO_HTTPS);\n$curl->get($url);\n```\n\n### Url may point to internal urls\n\n* Url may point to internal urls including those behind a firewall (e.g. http://192.168.0.1/ or ftp://192.168.0.1/). Use\n  a whitelist to allow certain urls rather than a blacklist.\n\n* Use `Curl::setProtocols()` and `Curl::setRedirectProtocols()` to restrict allowed protocols.\n\n```php\n// Allow only HTTPS protocols.\n$curl->setProtocols(CURLPROTO_HTTPS);\n$curl->setRedirectProtocols(CURLPROTO_HTTPS);\n```\n\n```php\n// Allow HTTPS and HTTP protocols.\n$curl->setProtocols(CURLPROTO_HTTPS | CURLPROTO_HTTP);\n$curl->setRedirectProtocols(CURLPROTO_HTTPS | CURLPROTO_HTTP);\n```\n\n### Request data may refer to system files\n\n* Request data prefixed with the `@` character may have special interpretation and read from system files.\n\n```bash\n# Attacker.\n$ curl https://www.example.com/upload_photo.php --data \"photo=@/etc/passwd\"\n```\n\n```php\n// upload_photo.php\n$curl = new Curl();\n$curl->post('http://www.anotherwebsite.com/', [\n    'photo' => $_POST['photo'], // DANGER!\n]);\n```\n\n### Unsafe response with redirection enabled\n\n* Requests with redirection enabled may return responses from unexpected sources.\n  Downloading https://www.example.com/image.png may redirect and download https://www.evil.com/virus.exe\n\n```php\n$curl = new Curl();\n$curl->setOpt(CURLOPT_FOLLOWLOCATION, true); // DANGER!\n$curl->download('https://www.example.com/image.png', 'my_image.png');\n```\n\n```php\n$curl = new Curl();\n$curl->setOpt(CURLOPT_FOLLOWLOCATION, true); // DANGER!\n$curl->get('https://www.example.com/image.png');\n```\n\n### Keep SSL protections enabled\n\n* Do not disable SSL protections.\n\n```php\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); // DANGER!\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // DANGER!\n```\n\n### Prevent XML External Entity injection\n\n* Set the following when using the default PHP XML parser to prevent XML external entity injection.\n\n```php\nlibxml_disable_entity_loader(true);\n```\n\n### Prevent PHP execution of library files\n\nPHP files in this library are not intended to be accessible by users browsing websites. Prevent direct access to library files by moving the library folder at least one level higher than the web root directory. Alternatively, configure the server to disable php file execution for all library files.\n\n#### For WordPress plugin developers\n\nWordPress plugin developers that wish to incorporate the PHP Curl Class library into their plugin, should take special care to include only the \"core\" library files.\n\nDo one of the following:\n\nOption 1. Download an official release from the [releases page](https://github.com/php-curl-class/php-curl-class/releases) and incorporate the files contained in the compressed file into the plugin. The releases include only the necessary php files for the library to function.\n\nOption 2. Manually copy only the [src/](https://github.com/php-curl-class/php-curl-class/tree/master/src) directory into your plugin. Be sure not to copy any other php files as they may be executable by users visiting the php files directly.\n"
        },
        {
          "name": "TESTING.md",
          "type": "blob",
          "size": 0.79296875,
          "content": "# Testing\n\n### Run Tests Locally\n\nTo run tests:\n\n```bash\ngit clone https://github.com/php-curl-class/php-curl-class.git\ncd php-curl-class/\ncomposer update\n./tests/run.sh\n```\n\nTo run select tests:\n\n```bash\ngit clone https://github.com/php-curl-class/php-curl-class.git\ncd php-curl-class/\ncomposer update\n./tests/run.sh --filter=keyword\n```\n\nTo test all PHP versions in containers:\n\n```bash\ngit clone https://github.com/php-curl-class/php-curl-class.git\ncd php-curl-class/\n./tests/test_all.sh\n```\n\n### Continuous Integration Tests\n\nContinuous integration runs [tests/run.sh](https://github.com/php-curl-class/php-curl-class/blob/master/tests/run.sh) on supported PHP versions and is configured with [.github/workflows/ci.yml](https://github.com/php-curl-class/php-curl-class/blob/master/.github/workflows/ci.yml).\n"
        },
        {
          "name": "TROUBLESHOOTING.md",
          "type": "blob",
          "size": 3.18359375,
          "content": "# Troubleshooting\n\n### Debug using the diagnose method\n\n```php\n$curl = new Curl();\n$curl->get('https://www.example.com/');\n$curl->diagnose(); // ← HERE\n```\n\n### Debug the entire curl instance\n\n```php\n$curl = new Curl();\n$curl->get('https://www.example.com/');\nvar_dump($curl); // ← HERE\n```\n\n### Ensure you have the latest version of the library installed\n\n```bash\n$ cd php-curl-class/\n$ composer update\n$ composer info\n```\nCompare your version with latest release ![](https://img.shields.io/github/release/php-curl-class/php-curl-class.svg?style=flat-square&sort=semver&color=rgba(0,0,0,0)&label=) which is also listed on the [releases page](https://github.com/php-curl-class/php-curl-class/releases).\n\n### Ensure php is using the latest version of curl\n\n```bash\n$ php -r 'var_dump(curl_version());'\n```\n\nCompare your version of curl with latest release ![](https://img.shields.io/github/v/release/curl/curl.svg?style=flat-square&color=rgba(0,0,0,0)&label=) which is also listed on [curl's releases page](https://github.com/curl/curl/releases).\n\n### Turn on error reporting\n\n```php\nerror_reporting(E_ALL);\n```\n\n### Print some information that may hint at the cause of failure\n\n```php\nerror_reporting(E_ALL);\n$curl = new Curl();\n$curl->get('https://www.example.com/');\necho 'error: ' . $curl->error . \"\\n\";\necho 'errorCode: ' . $curl->errorCode . \"\\n\";\necho 'errorMessage: ' . $curl->errorMessage . \"\\n\";\necho 'curlError: ' . $curl->error . \"\\n\";\necho 'curlErrorCode: ' . $curl->errorCode . \"\\n\";\necho 'curlErrorMessage: ' . $curl->errorMessage . \"\\n\";\necho 'httpError: ' . $curl->httpError . \"\\n\";\necho 'httpStatusCode: ' . $curl->httpStatusCode . \"\\n\";\necho 'httpErrorMessage: ' . $curl->httpErrorMessage . \"\\n\";\necho 'requestHeaders:' . \"\\n\";\nvar_dump($curl->requestHeaders);\necho 'responseHeaders:' . \"\\n\";\nvar_dump($curl->responseHeaders);\n```\n\n### Turn on verbose mode\n\n```php\nerror_reporting(E_ALL);\n$curl = new Curl();\n$curl->verbose();\n$curl->get('https://www.example.com/');\nvar_dump($curl);\n```\n\n### Compare request with and without the library\n\n```php\nerror_reporting(E_ALL);\n$curl = new Curl();\n$curl->get('https://www.example.com/');\nvar_dump($curl);\n```\n\n```php\nerror_reporting(E_ALL);\n$ch = curl_init();\ncurl_setopt($ch, CURLINFO_HEADER_OUT, true);\ncurl_setopt($ch, CURLOPT_HEADER, false);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_URL, 'https://www.example.com/');\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');\ncurl_setopt($ch, CURLOPT_HTTPGET, true);\n$raw_response = curl_exec($ch);\n$curl_error_code = curl_errno($ch);\n$curl_error_message = curl_error($ch);\n$http_status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n$request_headers = curl_getinfo($ch, CURLINFO_HEADER_OUT);\nvar_dump($http_status_code);\nvar_dump($curl_error_code);\nvar_dump($curl_error_message);\nvar_dump($request_headers);\nvar_dump($raw_response);\n```\n\n### Ensure you have the latest version of composer installed\n\n```bash\n$ composer self-update\n$ composer --version\n```\n\nCompare your version of composer with latest release ![](https://img.shields.io/github/v/release/composer/composer.svg?style=flat-square&color=rgba(0,0,0,0)&label=) which is also listed on [composer's releases page](https://github.com/composer/composer/releases).\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.5478515625,
          "content": "{\n    \"name\": \"php-curl-class/php-curl-class\",\n    \"description\": \"PHP Curl Class makes it easy to send HTTP requests and integrate with web APIs.\",\n    \"homepage\": \"https://github.com/php-curl-class/php-curl-class\",\n    \"license\": \"Unlicense\",\n    \"keywords\": [\n        \"php\", \"curl\", \"class\", \"api\", \"api-client\", \"client\", \"framework\", \"http\", \"http-client\", \"http-proxy\", \"json\",\n        \"php-curl\", \"php-curl-library\", \"proxy\", \"requests\", \"restful\", \"web-scraper\", \"web-scraping\", \"web-service\",\n        \"xml\"\n    ],\n    \"authors\": [\n        {\n            \"name\": \"Zach Borboa\"\n        },\n        {\n            \"name\": \"Contributors\",\n            \"homepage\": \"https://github.com/php-curl-class/php-curl-class/graphs/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=7.4\",\n        \"ext-curl\": \"*\"\n    },\n    \"require-dev\": {\n        \"dealerdirect/phpcodesniffer-composer-installer\": \"*\",\n        \"ext-gd\": \"*\",\n        \"friendsofphp/php-cs-fixer\": \"*\",\n        \"phpcompatibility/php-compatibility\": \"dev-develop\",\n        \"phpcsstandards/phpcsutils\": \"@alpha\",\n        \"phpstan/phpstan\": \"*\",\n        \"phpunit/phpunit\": \"*\",\n        \"squizlabs/php_codesniffer\": \"*\"\n    },\n    \"suggest\": {\n        \"ext-mbstring\": \"*\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Curl\\\\\": \"src/Curl/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"files\": [\n            \"./tests/Helper.php\",\n            \"./tests/User.php\"\n        ]\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"dealerdirect/phpcodesniffer-composer-installer\": true\n        }\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "www",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}