{
  "metadata": {
    "timestamp": 1736712136529,
    "page": 752,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ZainCheung/netease-cloud-api",
      "stars": 1458,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0361328125,
          "content": "MIT License\n\nCopyright (c) 2020 Zain\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.1533203125,
          "content": "## 网易云音乐升级API\r\n\r\n<p align=\"center\">\r\n    <a href=\"https://github.com/ZainCheung\"><img alt=\"Author\" src=\"https://img.shields.io/badge/author-ZainCheung-blueviolet\"/></a>\r\n    <img alt=\"PHP\" src=\"https://img.shields.io/badge/code-PHP-success\"/>\r\n    <img src=\"https://github-visitor-badge.glitch.me/badge?page_id=ZainCheung.netease-cloud-api\"/>\r\n</p>\r\n这是一个通过调用官方接口，能够提供网易云音乐每日听满300首歌曲的基于PHP语言的API项目。\r\n\r\n强烈建议配合python全自动脚本项目使用更佳：https://github.com/ZainCheung/netease-cloud\r\n\r\n## 灵感来自\r\n\r\n[Binaryify/NeteaseCloudMusicApi](https://github.com/Binaryify/NeteaseCloudMusicApi)\r\n\r\n## 功能特性\r\n\r\n1. 登录\r\n2. 签到\r\n3. 查询用户信息\r\n4. 听完300首歌曲\r\n5. 刷单曲播放次数\r\n\r\n## 安装部署\r\n\r\nhttps://zaincheung.gitee.io/netease-cloud/#/api/\r\n\r\n## 接口文档\r\n\r\nhttps://zaincheung.gitee.io/netease-cloud/#/document/\r\n\r\n## 声明\r\n\r\n本项目的所有脚本以及软件仅用于个人学习开发测试，所有`网易云`相关字样版权属于网易公司，勿用于商业及非法用途，如产生法律纠纷与本人无关。\r\n"
        },
        {
          "name": "glitch.json",
          "type": "blob",
          "size": 0.044921875,
          "content": "{\r\n    \"start\": \"php -S 0.0.0.0:8080\"\r\n  }\r\n  "
        },
        {
          "name": "help.html",
          "type": "blob",
          "size": 0.962890625,
          "content": "<html>\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n  <title>网易云音乐升级 API</title>\r\n</head>\r\n<body>\r\n  <h1>网易云音乐升级 API</h1>\r\n  当你看到这个页面时,这个服务已经成功跑起来了~\r\n  <a href=\"https://zaincheung.gitee.io/netease-cloud/#/document/\">查看文档</a>\r\n  <h2>例子:</h2>\r\n  <ul>\r\n    <li>1. <a href=\"?do=check\">检查</a></li>\r\n  </ul>\r\n  <style>\r\n    html,body{\r\n      height: 100vh;\r\n      width: 100vw;\r\n      margin: 0;\r\n      padding: 0;\r\n      background: #ffffff;\r\n      text-align: center;\r\n      margin-top:30px;\r\n      overflow: hidden;\r\n    }\r\n    *{\r\n      color:rgb(100,100,100);\r\n    }\r\n    a{\r\n      color:#42b983;\r\n    }\r\n    ul,li{\r\n      margin: 0;\r\n    }\r\n    ul{\r\n      margin-left: -40px;\r\n      line-height: 30px;\r\n    }\r\n    li{\r\n      list-style: none;\r\n    }\r\n  </style>\r\n</body>\r\n</html>"
        },
        {
          "name": "index.php",
          "type": "blob",
          "size": 10.19140625,
          "content": "<?php\nerror_reporting(0);\nclass API{\n\n    // General\n    protected $_MINI_MODE=false;\n    protected $_MODULUS='00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7';\n    protected $_NONCE='0CoJUm6Qyw8W8jud';\n    protected $_PUBKEY='010001';\n    protected $_VI='0102030405060708';\n    protected $_USERAGENT='Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.157 Safari/537.36';\n    protected $_COOKIE='os=ios; osver=Microsoft-Windows-10-Professional-build-10586-64bit; appver=8.7.01; channel=netease; __remember_me=true;';\n    protected $_REFERER='http://music.163.com/';\n    // use static secretKey, without RSA algorithm\n    protected $_secretKey='TA3YiYCfY2dDJQgg';\n    protected $_encSecKey='84ca47bca10bad09a6b04c5c927ef077d9b9f1e37098aa3eac6ea70eb59df0aa28b691b7e75e4f1f9831754919ea784c8f74fbfadf2898b0be17849fd656060162857830e241aba44991601f137624094c114ea8d17bce815b0cd4e5b8e2fbaba978c6d1d14dc3d1faf852bdd28818031ccdaaa13a6018e1024e2aae98844210';\n\n    // encrypt mod\n    protected function prepare($raw){\n        $data['params']=$this->aes_encode(json_encode($raw),$this->_NONCE);\n        $data['params']=$this->aes_encode($data['params'],$this->_secretKey);\n        $data['encSecKey']=$this->_encSecKey;\n        return $data;\n    }\n    protected function aes_encode($secretData,$secret){\n        return openssl_encrypt($secretData,'aes-128-cbc',$secret,false,$this->_VI);\n    }\n\n    // CURL\n    protected function curl($url,$data=null,$cookie=false){\n        $curl=curl_init();\n        curl_setopt($curl,CURLOPT_URL,$url);\n        if($data){\n            if(is_array($data))$data=http_build_query($data);\n            curl_setopt($curl,CURLOPT_POSTFIELDS,$data);\n            curl_setopt($curl,CURLOPT_POST,1);\n        }\n        curl_setopt($curl,CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($curl,CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($curl,CURLOPT_CONNECTTIMEOUT, 10);\n        curl_setopt($curl,CURLOPT_REFERER,$this->_REFERER);\n        curl_setopt($curl,CURLOPT_COOKIE,$this->_COOKIE.\"__csrf=\".$_COOKIE[\"__csrf\"].\"; MUSIC_U=\".$_COOKIE[\"MUSIC_U\"]);\n        curl_setopt($curl,CURLOPT_USERAGENT,$this->_USERAGENT);\n        if($cookie==true){\n        curl_setopt($curl,CURLOPT_HEADER,1);\n        $result=curl_exec($curl);\n        preg_match_all('/\\{(.*)\\}/', $result, $json);\n        if(json_decode($json[0][0],1)[\"code\"]==200){\n            preg_match_all('/Set-Cookie: MUSIC_U=(.*?)\\;/', $result, $musicu);\n            preg_match_all('/Set-Cookie: __csrf=(.*?)\\;/', $result, $csrf);\n            setcookie(\"MUSIC_U\",$musicu[1][0]);\n            setcookie(\"__csrf\",$csrf[1][0]);\n        }\n        $result = $json[0][0];\n        }else{\n        $result=curl_exec($curl);}\n        curl_close($curl);\n        return $result;\n    }\n\n    // main function\n    public function index(){\n        $string = file_get_contents(\"help.html\");\n        // echo $string;\n        return $string;\n    }\n    // login by phone\n    public function login($cell,$pwd,$countrycode){\n        $url=\"https://music.163.com/weapi/login/cellphone\";\n        $data=array(\n        \"phone\"=>$cell,\n        \"countrycode\"=>\"86\",\n        \"countrycode\"=>$countrycode,\n        \"password\"=>$pwd,\n        \"rememberLogin\"=>\"true\");\n        return $this->curl($url,$this->prepare($data),true);\n    }\n    // login by email\n    public function loginByEmail($cell,$pwd){\n        $url=\"https://music.163.com/weapi/login\";\n        $data=array(\n        \"username\"=>$cell,\n        \"password\"=>$pwd,\n        \"rememberLogin\"=>\"true\");\n        return $this->curl($url,$this->prepare($data),true);\n    }\n    // get user detail\n    public function detail($uid){\n        $url=\"https://music.163.com/weapi/v1/user/detail/${uid}\";\n        return $this->curl($url,$this->prepare($data),true);\n    }\n    public function follow(){\n        $url=\"https://music.163.com/weapi/user/follow/0\";\n        return '{\"code\":'.json_decode($this->curl($url,$this->prepare(array('csrf_token'=>$_COOKIE[\"__csrf\"]))),1)[\"code\"].'}';\n    }\n    public function recommend(){\n        $url=\"https://music.163.com/weapi/v1/discovery/recommend/resource\";\n        $json = json_decode($this->curl($url,$this->prepare(array('csrf_token'=>$_COOKIE[\"__csrf\"]))), 1);\n\t\tforeach ($json[\"recommend\"] as $i => $k) {\n\t\t\t$id[$i] = $k[\"id\"];\n\t\t}\n\t\treturn $id;\n        \n    }\n    // 获取推荐歌单\n    public function personalized($limit){\n        $url=\"https://music.163.com/weapi/personalized/playlist\";\n        $data=array(\n            \"limit\"=>$limit,\n            \"total\"=>\"true\",\n            \"n\"=>1000,);\n        $json = json_decode($this->curl($url,$this->prepare($data),true),1);\n\t\tforeach ($json[\"result\"] as $i => $k) {\n\t\t\t$id[$i] = $k[\"id\"];\n\t\t}\n\t\treturn $id;\n    }\n    public function daka_new(){\n        //$playlist = $this->recommend();\n        $playlist = $this->personalized(100);\n        $ids = array();\n        $count=0;\n        for ($i = 0; sizeof($ids) < 1000; $i++) {\n        \t$songid = $this->getsongid($playlist[rand(0,sizeof($playlist)-1)]);\n        \tfor ($k=0;sizeof($ids) < 1000&&$k<sizeof($songid);$k++) {\n        \t\n        \t$ids[$count][\"action\"]=\"play\";\n        \t$ids[$count][\"json\"][\"download\"] =0 ;\n        \t$ids[$count][\"json\"][\"end\"] =\"playend\"; \n     \t\t$ids[$count][\"json\"][\"id\"] = $songid[$k][\"id\"];\n     \t\t$ids[$count][\"json\"][\"sourceId\"] =\"\";\n     \t\t$ids[$count][\"json\"][\"time\"] = 240;\n     \t\t$ids[$count][\"json\"][\"type\"] =\"song\";\n     \t\t$ids[$count][\"json\"][\"wifi\"] =0;\n     \t\t$count++;\n    \t    }\n        }\n        $data =json_encode($ids);\n        $url = \"http://music.163.com/weapi/feedback/weblog\";\n        $this->curl($url,$this->prepare(array(\"logs\"=>$data)));\n        return '{\"code\":200,\"count\":'.$count.'}';\n    }\n    public function listen($id,$time){\n        $ids = array();\n        $count=0;\n        $t=1;\n    \t$songid = $this->getsongid($id);\n    \twhile($t <= $time){\n    \t    foreach ($songid as $index => $trackId) {\n    \t\t\t$ids[$count][\"action\"]=\"play\";\n            \t$ids[$count][\"json\"][\"download\"] =0 ;\n            \t$ids[$count][\"json\"][\"end\"] =\"playend\"; \n         \t\t$ids[$count][\"json\"][\"id\"] = $trackId[\"id\"];\n         \t\t$ids[$count][\"json\"][\"sourceId\"] =\"\";\n         \t\t$ids[$count][\"json\"][\"time\"] = 240;\n         \t\t$ids[$count][\"json\"][\"type\"] =\"song\";\n         \t\t$ids[$count][\"json\"][\"wifi\"] =0;\n         \t\t$count++;\n    \t\t}\n    \t\t$t++;\n    \t}\n        $data =json_encode($ids);\n        $url = \"http://music.163.com/weapi/feedback/weblog\";\n        $this->curl($url,$this->prepare(array(\"logs\"=>$data)));\n        return '{\"code\":200,\"count\":'.$count.'}';\n    }\n    public function getsongid($playlist_id){\n        $url='https://music.163.com/weapi/v6/playlist/detail?csrf_token=';\n        $data=array(\n            'id'=>$playlist_id,\n            'n'=>1000,\n            'csrf_token'=>'',\n        );\n        $raw=$this->curl($url,$this->prepare($data));\n        $json=json_decode($raw,1);\n      \t\n\t\treturn $json[\"playlist\"][\"trackIds\"];\n        //return json_decode($raw,1)[];\n    }\n    \n    \n    \n    \n    public function daka(){\n        $playlist = $this->recommend();\n        $ids = array();\n        for ($i = 0; sizeof($ids) < 300; $i++) {\n        \t$songid = $this->playlist($playlist[rand(0,sizeof($playlist))]);\n        \tforeach ($songid as $id) {\n     \t\t$ids[] = $id;\n    \t    }\n        }\n        return '{\"code\":200,\"count\":'.$this->scrobble($ids).'}';\n    }\n    public function sign(){\n        $url=\"https://music.163.com/weapi/point/dailyTask\";\n        $data=array(\"type\"=>0);\n        return $this->curl($url,$this->prepare($data),true);\n    }\n    public function scrobble($songid){\n        $url=\"http://music.163.com/weapi/feedback/weblog\";\n        $res = array();\n        $count=0;\n        $cookies=$this->_COOKIE.\"__csrf=\".$_COOKIE[\"__csrf\"].\"; MUSIC_U=\".$_COOKIE[\"MUSIC_U\"];\n\t\t$mh = curl_multi_init();\n\t\tforeach ($songid as $k => $id) {\n   \t        $data[$k]=$this->prepare(array(\"logs\"=>'[{\"action\":\"play\",\"json\":{\"download\":0,\"end\":\"playend\",\"id\":\"'.$id.'\",\"sourceId\":\"\",\"time\":240,\"type\":\"song\",\"wifi\":0}}]'));\n            $data[$k]=http_build_query($data[$k]);\n\t\t\t$conn[$k] = curl_init($k);\n\t\t\tcurl_setopt($conn[$k], CURLOPT_URL, $url);\n\t\t\tcurl_setopt($conn[$k],CURLOPT_POST,1);\n\t\t\tcurl_setopt($conn[$k],CURLOPT_POSTFIELDS,$data[$k]);\n\t\t\t//curl_setopt($conn[$k], CURLOPT_TIMEOUT, $timeout);\n\t\t\tcurl_setopt($conn[$k], CURLOPT_COOKIE, $cookies);\n\t\t\tcurl_setopt($conn[$k], CURLOPT_RETURNTRANSFER, 1);\n\t\t\tcurl_multi_add_handle($mh, $conn[$k]);\n\t\t\t$count++;\n\t\t}\n\t\tdo {\n\t\t\t$mrc = curl_multi_exec($mh, $active);\n\t\t}\n\t\twhile ($mrc == CURLM_CALL_MULTI_PERFORM);\n\t\twhile ($active and $mrc == CURLM_OK) {\n\t\t\tif (curl_multi_select($mh) != -1) {\n\t\t\t\tdo {\n\t\t\t\t\t$mrc = curl_multi_exec($mh, $active);\n\t\t\t\t}\n\t\t\t\twhile ($mrc == CURLM_CALL_MULTI_PERFORM);\n\t\t\t}\n\t\t}\n\t\tforeach ($array as $k => $value) {\n\t\t\tcurl_error($conn[$k]);\n\t\t\t$res[$k] = curl_multi_getcontent($conn[$k]);\n\t\t\t//$header[$k] = curl_getinfo($conn[$k]);\n\t\t\tcurl_close($conn[$k]);\n\t\t\tcurl_multi_remove_handle($mh, $conn[$k]);\n\t\t}\n\t\tcurl_multi_close($mh);\n\t\t//return array('return' => $res, 'header' => $header);\n        //return \"233\";\n        return $count;\n    }\n\n    public function playlist($playlist_id){\n        $url='https://music.163.com/weapi/v3/playlist/detail?csrf_token=';\n        $data=array(\n            'id'=>$playlist_id,\n            'n'=>1000,\n            'csrf_token'=>'',\n        );\n        $raw=$this->curl($url,$this->prepare($data));\n        $json=json_decode($raw,1);\n      \tforeach ($json[\"playlist\"][\"trackIds\"] as $i => $k) {\n\t\t\t$ids[$i] = $k[\"id\"];\n\t\t}\n\t\treturn $ids;\n        //return json_decode($raw,1)[];\n    }\n}\n$api= new API();\n$api->follow();\n//test();\nif($_REQUEST[\"do\"]==\"login\"){\necho $api->login($_REQUEST[\"uin\"],$_REQUEST[\"pwd\"],$_REQUEST[\"countrycode\"]);}\nelseif($_REQUEST[\"do\"]==\"email\"){echo $api->loginByEmail($_REQUEST[\"uin\"],$_REQUEST[\"pwd\"]);}\nelseif($_REQUEST[\"do\"]==\"sign\"){echo $api->sign();}\nelseif($_REQUEST[\"do\"]==\"daka\"){echo $api->daka_new();}\nelseif($_REQUEST[\"do\"]==\"check\"){echo $api->follow();}\nelseif($_REQUEST[\"do\"]==\"detail\"){echo $api->detail($_REQUEST[\"uid\"]);}\nelseif($_REQUEST[\"do\"]==\"listen\"){echo $api->listen($_REQUEST[\"id\"],$_REQUEST[\"time\"]);}\nelse{echo $api->index();}\n?>\n"
        }
      ]
    }
  ]
}