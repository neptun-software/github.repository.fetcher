{
  "metadata": {
    "timestamp": 1736712199887,
    "page": 890,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Kong/unirest-php",
      "stars": 1281,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.25,
          "content": "# http://editorconfig.org\nroot = true\n\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.{json,xml,yml}]\nindent_size = 2\n\n[*.{md,yml}]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.064453125,
          "content": ".DS_Store\n.idea\nbuild\ncomposer.lock\ncomposer.phar\ncoverage\nvendor\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.75390625,
          "content": "sudo: false\n\nlanguage: php\n\nphp:\n  - '5.4'\n  - '5.5'\n  - '5.6'\n  - '7.0'\n  - hhvm\n\nbefore_script:\n  - composer selfupdate\n  - composer install\n\nafter_script:\n  - vendor/bin/test-reporter --stdout > codeclimate.json\n  - \"curl -X POST -d @codeclimate.json -H 'Content-Type: application/json' -H 'User-Agent: Code Climate (PHP Test Reporter v0.1.1)' https://codeclimate.com/test_reports\"\n\nnotifications:\n  webhooks:\n    urls:\n      - https://webhooks.gitter.im/e/802f417bb6e3e1e8b20d\n    on_success: always\n    on_failure: always\n    on_start: false\n\nmatrix:\n  fast_finish: true\n  allow_failures:\n    - php: hhvm\n\nnotifications:\n  webhooks:\n    urls:\n      - https://webhooks.gitter.im/e/d4319553d0aecfd5b9ac\n    on_success: always\n    on_failure: always\n    on_start: false\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0732421875,
          "content": "The MIT License\n\nCopyright (c) 2013-2015 Mashape (https://www.mashape.com)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.154296875,
          "content": "# Unirest for PHP [![Build Status][travis-image]][travis-url] [![version][packagist-version]][packagist-url]\n\n[![Downloads][packagist-downloads]][packagist-url]\n[![Code Climate][codeclimate-quality]][codeclimate-url]\n[![Coverage Status][codeclimate-coverage]][codeclimate-url]\n[![Dependencies][versioneye-image]][versioneye-url]\n[![Gitter][gitter-image]][gitter-url]\n[![License][packagist-license]][license-url]\n\n![][unirest-logo]\n\n\n[Unirest](http://unirest.io) is a set of lightweight HTTP libraries available in multiple languages, built and maintained by [Mashape](https://github.com/Mashape), who also maintain the open-source API Gateway [Kong](https://github.com/Mashape/kong). \n\n\n## Features\n\n* Utility methods to call `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH` requests\n* Supports form parameters, file uploads and custom body entities\n* Supports gzip\n* Supports Basic, Digest, Negotiate, NTLM Authentication natively\n* Customizable timeout\n* Customizable default headers for every request (DRY)\n* Automatic JSON parsing into a native object for JSON responses\n\n## Requirements\n\n- [cURL](http://php.net/manual/en/book.curl.php)\n- PHP 5.4+\n\n## Installation\n\n### Using [Composer](https://getcomposer.org)\n\nTo install unirest-php with Composer, just add the following to your `composer.json` file:\n\n```json\n{\n    \"require-dev\": {\n        \"mashape/unirest-php\": \"3.*\"\n    }\n}\n```\n\nor by running the following command:\n\n```shell\ncomposer require mashape/unirest-php\n```\n\nThis will get you the latest version of the reporter and install it. If you do want the master, untagged, version you may use the command below:\n\n```shell\ncomposer require mashape/php-test-reporter dev-master\n```\n\nComposer installs autoloader at `./vendor/autoloader.php`. to include the library in your script, add:\n\n```php\nrequire_once 'vendor/autoload.php';\n```\n\nIf you use Symfony2, autoloader has to be detected automatically.\n\n*You can see this library on [Packagist](https://packagist.org/packages/mashape/unirest-php).*\n\n### Install from source\n\nDownload the PHP library from Github, then include `Unirest.php` in your script:\n\n```shell\ngit clone git@github.com:Mashape/unirest-php.git \n```\n\n```php\nrequire_once '/path/to/unirest-php/src/Unirest.php';\n```\n\n## Usage\n\n### Creating a Request\n\nSo you're probably wondering how using Unirest makes creating requests in PHP easier, let's look at a working example:\n\n```php\n$headers = array('Accept' => 'application/json');\n$query = array('foo' => 'hello', 'bar' => 'world');\n\n$response = Unirest\\Request::post('http://mockbin.com/request', $headers, $query);\n\n$response->code;        // HTTP Status code\n$response->headers;     // Headers\n$response->body;        // Parsed body\n$response->raw_body;    // Unparsed body\n```\n\n### JSON Requests *(`application/json`)*\n\nA JSON Request can be constructed using the `Unirest\\Request\\Body::Json` helper:\n\n```php\n$headers = array('Accept' => 'application/json');\n$data = array('name' => 'ahmad', 'company' => 'mashape');\n\n$body = Unirest\\Request\\Body::json($data);\n\n$response = Unirest\\Request::post('http://mockbin.com/request', $headers, $body);\n```\n\n**Notes:**\n- `Content-Type` headers will be automatically set to `application/json` \n- the data variable will be processed through [`json_encode`](http://php.net/manual/en/function.json-encode.php) with default values for arguments.\n- an error will be thrown if the [JSON Extension](http://php.net/manual/en/book.json.php) is not available.\n\n### Form Requests *(`application/x-www-form-urlencoded`)*\n\nA typical Form Request can be constructed using the `Unirest\\Request\\Body::Form` helper:\n\n```php\n$headers = array('Accept' => 'application/json');\n$data = array('name' => 'ahmad', 'company' => 'mashape');\n\n$body = Unirest\\Request\\Body::form($data);\n\n$response = Unirest\\Request::post('http://mockbin.com/request', $headers, $body);\n```\n\n**Notes:** \n- `Content-Type` headers will be automatically set to `application/x-www-form-urlencoded`\n- the final data array will be processed through [`http_build_query`](http://php.net/manual/en/function.http-build-query.php) with default values for arguments.\n\n### Multipart Requests *(`multipart/form-data`)*\n\nA Multipart Request can be constructed using the `Unirest\\Request\\Body::Multipart` helper:\n\n```php\n$headers = array('Accept' => 'application/json');\n$data = array('name' => 'ahmad', 'company' => 'mashape');\n\n$body = Unirest\\Request\\Body::multipart($data);\n\n$response = Unirest\\Request::post('http://mockbin.com/request', $headers, $body);\n```\n\n**Notes:** \n\n- `Content-Type` headers will be automatically set to `multipart/form-data`.\n- an auto-generated `--boundary` will be set.\n\n### Multipart File Upload\n\nsimply add an array of files as the second argument to to the `Multipart` helper:\n\n```php\n$headers = array('Accept' => 'application/json');\n$data = array('name' => 'ahmad', 'company' => 'mashape');\n$files = array('bio' => '/path/to/bio.txt', 'avatar' => '/path/to/avatar.jpg');\n\n$body = Unirest\\Request\\Body::multipart($data, $files);\n\n$response = Unirest\\Request::post('http://mockbin.com/request', $headers, $body);\n ```\n\nIf you wish to further customize the properties of files uploaded you can do so with the `Unirest\\Request\\Body::File` helper:\n\n```php\n$headers = array('Accept' => 'application/json');\n$body = array(\n    'name' => 'ahmad', \n    'company' => 'mashape'\n    'bio' => Unirest\\Request\\Body::file('/path/to/bio.txt', 'text/plain'),\n    'avatar' => Unirest\\Request\\Body::file('/path/to/my_avatar.jpg', 'text/plain', 'avatar.jpg')\n);\n\n$response = Unirest\\Request::post('http://mockbin.com/request', $headers, $body);\n ```\n\n**Note**: we did not use the `Unirest\\Request\\Body::multipart` helper in this example, it is not needed when manually adding files.\n \n### Custom Body\n\nSending a custom body such rather than using the `Unirest\\Request\\Body` helpers is also possible, for example, using a [`serialize`](http://php.net/manual/en/function.serialize.php) body string with a custom `Content-Type`:\n\n```php\n$headers = array('Accept' => 'application/json', 'Content-Type' => 'application/x-php-serialized');\n$body = serialize((array('foo' => 'hello', 'bar' => 'world'));\n\n$response = Unirest\\Request::post('http://mockbin.com/request', $headers, $body);\n```\n\n### Authentication\n\nFirst, if you are using [Mashape][mashape-url]:\n```php\n// Mashape auth\nUnirest\\Request::setMashapeKey('<mashape_key>');\n```\n\nOtherwise, passing a username, password *(optional)*, defaults to Basic Authentication:\n\n```php\n// basic auth\nUnirest\\Request::auth('username', 'password');\n```\n\nThe third parameter, which is a bitmask, will Unirest which HTTP authentication method(s) you want it to use for your proxy authentication.\n\nIf more than one bit is set, Unirest *(at PHP's libcurl level)* will first query the site to see what authentication methods it supports and then pick the best one you allow it to use. *For some methods, this will induce an extra network round-trip.*\n\n**Supported Methods**\n\n| Method               | Description                                                                                                                                                                                                     |\n| -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `CURLAUTH_BASIC`     | HTTP Basic authentication. This is the default choice                                                                                                                                                           | \n| `CURLAUTH_DIGEST`    | HTTP Digest authentication. as defined in [RFC 2617](http://www.ietf.org/rfc/rfc2617.txt)                                                                                                                       | \n| `CURLAUTH_DIGEST_IE` | HTTP Digest authentication with an IE flavor. *The IE flavor is simply that libcurl will use a special \"quirk\" that IE is known to have used before version 7 and that some servers require the client to use.* | \n| `CURLAUTH_NEGOTIATE` | HTTP Negotiate (SPNEGO) authentication. as defined in [RFC 4559](http://www.ietf.org/rfc/rfc4559.txt)                                                                                                           |\n| `CURLAUTH_NTLM`      | HTTP NTLM authentication. A proprietary protocol invented and used by Microsoft.                                                                                                                                |\n| `CURLAUTH_NTLM_WB`   | NTLM delegating to winbind helper. Authentication is performed by a separate binary application. *see [libcurl docs](http://curl.haxx.se/libcurl/c/CURLOPT_HTTPAUTH.html) for more info*                        | \n| `CURLAUTH_ANY`       | This is a convenience macro that sets all bits and thus makes libcurl pick any it finds suitable. libcurl will automatically select the one it finds most secure.                                               |\n| `CURLAUTH_ANYSAFE`   | This is a convenience macro that sets all bits except Basic and thus makes libcurl pick any it finds suitable. libcurl will automatically select the one it finds most secure.                                  |\n| `CURLAUTH_ONLY`      | This is a meta symbol. OR this value together with a single specific auth value to force libcurl to probe for un-restricted auth and if not, only that single auth algorithm is acceptable.                     |\n\n```php\n// custom auth method\nUnirest\\Request::proxyAuth('username', 'password', CURLAUTH_DIGEST);\n```\n\nPrevious versions of **Unirest** support *Basic Authentication* by providing the `username` and `password` arguments:\n\n```php\n$response = Unirest\\Request::get('http://mockbin.com/request', null, null, 'username', 'password');\n```\n\n**This has been deprecated, and will be completely removed in `v.3.0.0` please use the `Unirest\\Request::auth()` method instead**\n\n### Cookies\n\nSet a cookie string to specify the contents of a cookie header. Multiple cookies are separated with a semicolon followed by a space (e.g., \"fruit=apple; colour=red\")\n\n```php\nUnirest\\Request::cookie($cookie)\n```\n\nSet a cookie file path for enabling cookie reading and storing cookies across multiple sequence of requests.\n\n```php\nUnirest\\Request::cookieFile($cookieFile)\n```\n\n`$cookieFile` must be a correct path with write permission.\n\n### Request Object\n\n```php\nUnirest\\Request::get($url, $headers = array(), $parameters = null)\nUnirest\\Request::post($url, $headers = array(), $body = null)\nUnirest\\Request::put($url, $headers = array(), $body = null)\nUnirest\\Request::patch($url, $headers = array(), $body = null)\nUnirest\\Request::delete($url, $headers = array(), $body = null)\n```\n  \n- `url` - Endpoint, address, or uri to be acted upon and requested information from.\n- `headers` - Request Headers as associative array or object\n- `body` - Request Body as associative array or object\n\nYou can send a request with any [standard](http://www.iana.org/assignments/http-methods/http-methods.xhtml) or custom HTTP Method:\n\n```php\nUnirest\\Request::send(Unirest\\Method::LINK, $url, $headers = array(), $body);\n\nUnirest\\Request::send('CHECKOUT', $url, $headers = array(), $body);\n```\n\n### Response Object\n\nUpon recieving a response Unirest returns the result in the form of an Object, this object should always have the same keys for each language regarding to the response details.\n\n- `code` - HTTP Response Status Code (Example `200`)\n- `headers` - HTTP Response Headers\n- `body` - Parsed response body where applicable, for example JSON responses are parsed to Objects / Associative Arrays.\n- `raw_body` - Un-parsed response body\n\n### Advanced Configuration\n\nYou can set some advanced configuration to tune Unirest-PHP:\n\n#### Custom JSON Decode Flags\n\nUnirest uses PHP's [JSON Extension](http://php.net/manual/en/book.json.php) for automatically decoding JSON responses.\nsometime you may want to return associative arrays, limit the depth of recursion, or use any of the [customization flags](http://php.net/manual/en/json.constants.php).\n\nTo do so, simply set the desired options using the `jsonOpts` request method:\n\n```php\nUnirest\\Request::jsonOpts(true, 512, JSON_NUMERIC_CHECK & JSON_FORCE_OBJECT & JSON_UNESCAPED_SLASHES);\n```\n\n#### Timeout\n\nYou can set a custom timeout value (in **seconds**):\n\n```php\nUnirest\\Request::timeout(5); // 5s timeout\n```\n\n#### Proxy\n\nSet the proxy to use for the upcoming request.\n\nyou can also set the proxy type to be one of `CURLPROXY_HTTP`, `CURLPROXY_HTTP_1_0`, `CURLPROXY_SOCKS4`, `CURLPROXY_SOCKS5`, `CURLPROXY_SOCKS4A`, and `CURLPROXY_SOCKS5_HOSTNAME`.\n\n*check the [cURL docs](http://curl.haxx.se/libcurl/c/CURLOPT_PROXYTYPE.html) for more info*.\n\n```php\n// quick setup with default port: 1080\nUnirest\\Request::proxy('10.10.10.1');\n\n// custom port and proxy type\nUnirest\\Request::proxy('10.10.10.1', 8080, CURLPROXY_HTTP);\n\n// enable tunneling\nUnirest\\Request::proxy('10.10.10.1', 8080, CURLPROXY_HTTP, true);\n```\n\n##### Proxy Authenticaton\n\nPassing a username, password *(optional)*, defaults to Basic Authentication:\n\n```php\n// basic auth\nUnirest\\Request::proxyAuth('username', 'password');\n```\n\nThe third parameter, which is a bitmask, will Unirest which HTTP authentication method(s) you want it to use for your proxy authentication. \n\nIf more than one bit is set, Unirest *(at PHP's libcurl level)* will first query the site to see what authentication methods it supports and then pick the best one you allow it to use. *For some methods, this will induce an extra network round-trip.*\n\nSee [Authentication](#authentication) for more details on methods supported.\n\n```php\n// basic auth\nUnirest\\Request::proxyAuth('username', 'password', CURLAUTH_DIGEST);\n```\n\n#### Default Request Headers\n\nYou can set default headers that will be sent on every request:\n\n```php\nUnirest\\Request::defaultHeader('Header1', 'Value1');\nUnirest\\Request::defaultHeader('Header2', 'Value2');\n```\n\nYou can set default headers in bulk by passing an array:\n\n```php\nUnirest\\Request::defaultHeaders(array(\n    'Header1' => 'Value1',\n    'Header2' => 'Value2'\n));\n```\n\nYou can clear the default headers anytime with:\n\n```php\nUnirest\\Request::clearDefaultHeaders();\n```\n\n#### Default cURL Options\n\nYou can set default [cURL options](http://php.net/manual/en/function.curl-setopt.php) that will be sent on every request:\n\n```php\nUnirest\\Request::curlOpt(CURLOPT_COOKIE, 'foo=bar');\n```\n\nYou can set options bulk by passing an array:\n\n```php\nUnirest\\Request::curlOpts(array(\n    CURLOPT_COOKIE => 'foo=bar'\n));\n```\n\nYou can clear the default options anytime with:\n\n```php\nUnirest\\Request::clearCurlOpts();\n```\n\n#### SSL validation\n\nYou can explicitly enable or disable SSL certificate validation when consuming an SSL protected endpoint:\n\n```php\nUnirest\\Request::verifyPeer(false); // Disables SSL cert validation\n```\n\nBy default is `true`.\n\n#### Utility Methods\n\n```php\n// alias for `curl_getinfo`\nUnirest\\Request::getInfo()\n\n// returns internal cURL handle\nUnirest\\Request::getCurlHandle()\n```\n\n----\n\nMade with &#9829; from the [Mashape][mashape-url] team\n\n[unirest-logo]: http://cl.ly/image/2P373Y090s2O/Image%202015-10-12%20at%209.48.06%20PM.png\n\n\n[mashape-url]: https://www.mashape.com/\n\n[license-url]: https://github.com/Mashape/unirest-php/blob/master/LICENSE\n\n[gitter-url]: https://gitter.im/Mashape/unirest-php\n[gitter-image]: https://img.shields.io/badge/Gitter-Join%20Chat-blue.svg?style=flat\n\n[travis-url]: https://travis-ci.org/Mashape/unirest-php\n[travis-image]: https://img.shields.io/travis/Mashape/unirest-php.svg?style=flat\n\n[packagist-url]: https://packagist.org/packages/Mashape/unirest-php\n[packagist-license]: https://img.shields.io/packagist/l/Mashape/unirest-php.svg?style=flat\n[packagist-version]: https://img.shields.io/packagist/v/Mashape/unirest-php.svg?style=flat\n[packagist-downloads]: https://img.shields.io/packagist/dm/Mashape/unirest-php.svg?style=flat\n\n[codeclimate-url]: https://codeclimate.com/github/Mashape/unirest-php\n[codeclimate-quality]: https://img.shields.io/codeclimate/github/Mashape/unirest-php.svg?style=flat\n[codeclimate-coverage]: https://img.shields.io/codeclimate/coverage/github/Mashape/unirest-php.svg?style=flat\n\n[versioneye-url]: https://www.versioneye.com/user/projects/54b82450050646ca5c0001f3\n[versioneye-image]: https://img.shields.io/versioneye/d/php/mashape:unirest-php.svg?style=flat\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.666015625,
          "content": "{\n  \"name\": \"mashape/unirest-php\",\n  \"description\": \"Unirest PHP\",\n  \"keywords\": [\"rest\", \"curl\", \"http\", \"https\", \"client\"],\n  \"type\": \"library\",\n  \"homepage\": \"https://github.com/Mashape/unirest-php\",\n  \"license\": \"MIT\",\n  \"author\": \"Mashape <opensource@mashape.com> (https://www.mashape.com)\",\n  \"require\": {\n    \"php\": \">=5.4.0\",\n    \"ext-curl\": \"*\"\n  },\n  \"suggest\": {\n    \"ext-json\": \"Allows using JSON Bodies for sending and parsing requests\"\n  },\n  \"require-dev\": {\n    \"phpunit/phpunit\": \"~4.4\",\n    \"codeclimate/php-test-reporter\": \"0.1.*\"\n  },\n  \"autoload\": {\n    \"psr-0\": {\n      \"Unirest\\\\\": \"src/\"\n    }\n  },\n  \"support\": {\n    \"email\": \"opensource@mashape.com\"\n  }\n}\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.376953125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit bootstrap=\"tests/bootstrap.php\" colors=\"true\">\n  <logging>\n    <log type=\"coverage-clover\" target=\"build/logs/clover.xml\"/>\n  </logging>\n\n  <testsuites>\n    <testsuite name=\"Unirest Test Suite\">\n      <directory>./tests</directory>\n    </testsuite>\n  </testsuites>\n\n  <php>\n    <ini name=\"date.timezone\" value=\"UTC\"/>\n  </php>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}