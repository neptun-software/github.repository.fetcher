{
  "metadata": {
    "timestamp": 1736711935275,
    "page": 354,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "PHPSocialNetwork/phpfastcache",
      "stars": 2383,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codeclimate.yml",
          "type": "blob",
          "size": 0.9072265625,
          "content": "#\n# This file is part of phpFastCache.\n#\n# @license MIT License (MIT)\n#\n# For full copyright and license information, please see the docs/CREDITS.txt file.\n#\n# @author Georges.L (Geolim4)  <contact@geolim4.com>\n# @author Contributors  https://github.com/PHPSocialNetwork/phpfastcache/graphs/contributors\n#\n\nengines:\n  duplication:\n    enabled: false\n    checks:\n      Similar code:\n        enabled: false\n      UnusedFormalParameter:\n        enabled: false\n      Controversial/CamelCaseClassName:\n        enabled: false\n    config:\n      languages:\n      - ruby\n      - javascript\n      - python\n      - php\n  fixme:\n    enabled: true\n  phpmd:\n    enabled: true\n    config:\n      file_extensions:\n        - php\n        - inc\n      rulesets: \"phpmd.xml\"\nratings:\n  paths:\n  - \"**.inc\"\n  - \"**.js\"\n  - \"**.jsx\"\n  - \"**.module\"\n  - \"**.php\"\n  - \"**.py\"\n  - \"**.rb\"\nexclude_paths:\n- \"bin/**\"\n- \"examples/**\"\n- \"docs/**\"\n- \"tests/**\"\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.583984375,
          "content": "/tests export-ignore\n/docs/examples export-ignore\n/bin export-ignore\n/.github export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\n.gitmodules export-ignore\n.travis.yml export-ignore\n.scrutinizer.yml export-ignore\n.codeclimate.yml export-ignore\nCONTRIBUTING.md export-ignore\nCODE_OF_CONDUCT.md export-ignore\nCODING_GUIDELINE.md export-ignore\nphpunit.xml.dist export-ignore\nphpcs.xml.dist export-ignore\ncomposer.lock export-ignore\nquality.bat export-ignore\nphpstan.neon export-ignore\nphpstan_lite.neon export-ignore\nphpcs.xml export-ignore\nphpmd.xml export-ignore\nCNAME export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.87109375,
          "content": "#################\n## Eclipse\n#################\n\n*.pydevproject\n.project\n.metadata\ntmp/\n*.tmp\n*.bak\n*.swp\n*~.nib\nlocal.properties\n.classpath\n.settings/\n.loadpath\n\n.idea\n.gitignore\n.idea/\n.run/\n\n# External tool builders\n.externalToolBuilders/\n\n# Locally stored \"Eclipse launch configurations\"\n*.launch\n\n# CDT-specific\n.cproject\n\n# PDT-specific\n.buildpath\n\n\n#################\n## Visual Studio\n#################\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n\n[Dd]ebug/\n[Rr]elease/\nx64/\nbuild/\n[Oo]bj/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.scc\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.Publish.xml\n*.pubxml\n*.publishproj\n\n# NuGet Packages Directory\n## TODO: If you have NuGet Package Restore enabled, uncomment the next line\n#packages/\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.[Pp]ublish.xml\n*.pfx\n*.publishsettings\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n\n#############\n## Windows detritus\n#############\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Mac crap\n.DS_Store\n\n\n#############\n## Python\n#############\n\n*.py[cod]\n\n# Packages\n*.egg\n*.egg-info\ndist/\neggs/\nparts/\n# var/\nsdist/\ndevelop-eggs/\n.installed.cfg\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\n\n#Translations\n*.mo\n\n#Mr Developer\n.mr.developer.cfg\n*.name\n.idea/encodings.xml\n.idea/misc.xml\n.idea/modules.xml\n.idea/phpFastCache.iml\n.idea/scopes/scope_settings.xml\n.idea/vcs.xml\n.idea/workspace.xml\n\n#################\n## NetBeans\n#################\nnbproject/\n\n#Composer\nvendor/\n# composer.lock\ncomposer.phar\n/cache/\n/composer.lock\n"
        },
        {
          "name": ".scrutinizer.yml",
          "type": "blob",
          "size": 1.2119140625,
          "content": "#\n# This file is part of phpFastCache.\n#\n# @license MIT License (MIT)\n#\n# For full copyright and license information, please see the docs/CREDITS.txt file.\n#\n# @author Georges.L (Geolim4)  <contact@geolim4.com>\n# @author Contributors  https://github.com/PHPSocialNetwork/phpfastcache/graphs/contributors\n#\n\nbuild:\n  dependencies:\n    override:\n      - \"composer require -W --ignore-platform-reqs phpfastcache/phpssdb:^1.2 predis/predis:^2.0\"\n  nodes:\n    analysis:\n      project_setup:\n        override: true\n      tests:\n        override: [php-scrutinizer-run]\n  environment:\n    php:\n      version: 8.0.0\n      ini:\n        date.timezone: 'Europe/Paris'\n      pecl_extensions:\n        # - couchbase\n        # - grpc\n        - redis\n        - memcache\nchecks:\n  php: true\ncoding_style:\n  php:\n    spaces:\n      around_operators:\n        concatenation: true\nfilter:\n  excluded_paths:\n    - .github/*\n    - bin/*\n    - docs/*\n    - examples/*\n    - var/*\n    - vendor/*\n    - tests/*\ntools:\n  external_code_coverage: false\n  php_code_coverage: true\n  php_code_sniffer:\n    config:\n      standard: PSR12\n    enabled: true\n    filter:\n      paths:\n        - lib/*\n  php_mess_detector:\n    enabled: true\n    filter:\n      paths:\n        - lib/*\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.486328125,
          "content": "#\n# This file is part of phpFastCache.\n#\n# @license MIT License (MIT)\n#\n# For full copyright and license information, please see the docs/CREDITS.txt file.\n#\n# @author Georges.L (Geolim4)  <contact@geolim4.com>\n# @author Contributors  https://github.com/PHPSocialNetwork/phpfastcache/graphs/contributors\n#\nos: linux\ndist: bionic\nlanguage: php\n\nservices:\n  - memcached\n  - redis\ncache:\n  directories:\n    - $HOME/pecl_cache\nphp:\n  - 8.0\n  - 8.1\n  - 8.2\njobs:\n  fast_finish: true\n  allow_failures:\n    - php: nightly\n\nbefore_install:\n  - sudo apt remove cmake\n  - pip install cmake --upgrade\n  - phpenv config-add bin/ci/php_common.ini\n  - phpenv config-rm xdebug.ini\n  - composer install\n  - composer require phwoolcon/ci-pecl-cacher -n\n  - \"./bin/ci/scripts/install_ssdb.sh || echo \\\"SSDB install failed\\\"\"\n  - \"./bin/ci/scripts/install_couchbase.sh || echo \\\"Couchbase install failed\\\"\"\n  - \"./bin/ci/scripts/setup_gcp.sh || echo \\\"GCP setup failed\\\"\"\n  - \"pecl channel-update pecl.php.net || echo \\\"PECL Channel update failed\\\"\"\n  - \"yes | ./vendor/bin/ci-pecl-install memcache || echo \\\"PECL Memcache install failed\\\"\"\n  - \"yes | ./vendor/bin/ci-pecl-install memcached || echo \\\"PECL Memcached install failed\\\"\"\n  - \"yes | ./vendor/bin/ci-pecl-install couchbase-3.2.2 couchbase || echo \\\"PECL Couchbase install failed\\\"\" # @todo UPGRADE TO COUCHBASE 4.x.x once we upgraded from Bionic to Focal\ninstall:\n  - ./bin/ci/scripts/install_dependencies.sh\n\nscript:\n  - composer run-script quality\n  - composer run-script tests\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 11.87109375,
          "content": "## 9.2.3\n##### 11 january 2024\n- __Drivers__\n  - **Added support of `Ravendb` as an extension with its own [sub-repository](https://github.com/PHPSocialNetwork/ravendb-extension).**\n  - Deprecated `\\Phpfastcache\\Entities\\DriverStatistic::getData()`. Will be removed as of v10.\n  - Deprecated `\\Phpfastcache\\Entities\\DriverStatistic::setData()`. Will be removed as of v10.\n  - Added `\\Phpfastcache\\Entities\\DriverStatistic::getCount(): int|null`. If applicable will return the count of cache objects stored in driver database/collection. Null otherwise.\n  - Added `\\Phpfastcache\\Entities\\DriverStatistic::setCount()`\n\n## 9.2.2\n##### 11 january 2024\n- __Core__\n  - Added optional prefix to `\\Phpfastcache\\Core\\Pool\\CacheItemPoolTrait::getKeys()`\n\n## 9.2.1\n##### 07 january 2024\n- __Misc__\n  - Added additional check in cache manager for extensions\n\n## 9.2.0\n##### 07 january 2024\n- __API__\n  - Upgraded Phpfastcache API to `4.3.0` ([see changes](CHANGELOG_API.md))\n- __Extensions__ (ðŸ’¡ New in 9.2)\n  - Created an extension mechanism to allow some drivers to be loaded independently, see [README.md](README.md)\n  - Added support of `Couchbasev4` as an extension with its own [sub-repository](https://github.com/PHPSocialNetwork/couchbasev4-extension).\n  - **IMPORTANT**: *AS OF v9.2* the following drivers has been **MOVED** to their own sub-repositories as a standalone extension: `Arangodb`, `Couchdb`, `Dynamodb`, `Firestore`, `Mongodb`, `Solr`. However `Couchbasev3` will stay in the core for compatibility reasons but will be deprecated. \n  - **IMPORTANT**: *AS OF v10* extensions will have their namespaces permanently moved from `Phpfastcache\\Drivers\\EXT_NAME\\{Config, Driver, Event, Item}` to `Phpfastcache\\Extensions\\Drivers\\EXT_NAME\\{Config, Driver, Event, Item}`. For now an alias is ensuring compatibility.\n- __Events__\n  - EventManager is now scoped to its own poll if retrieved through `ExtendedCacheItemPoolTrait::->getEventManager()`. Global EventManager `EventManager::getInstance()` remains unchanged, see [EVENTS.md](./docs/EVENTS.md).\n  - `EventManagerInterface::on()` now also accepts a single `string $events`.\n  - Alias `\\Phpfastcache\\PhpfastcacheEventManager` of `\\Phpfastcache\\EventManager` has been added to improve your code import readability.\n  - Deprecated `\\Phpfastcache\\Event\\EventManagerDispatcherInterface::hasEventManager` to be removed for v10.\n- __Drivers__\n  - Implemented #906 // **Added `RedisCluster` driver support**\n  - Driver `Memstatic` has changed its name to `Memory` for more consistency.\n  - Driver `Wincache` is now deprecated and will be removed as of v10 due to the lack of updates to PHP 8 [as officially stated by PHP](https://www.php.net/manual/en/install.windows.recommended.php).\n- __Pool__\n  - Added `ExtendedCacheItemPoolTrait::getAllItems` to allow you to retrieve all items in the cache. This method have some limitations, ([see more in the Wiki](https://github.com/PHPSocialNetwork/phpfastcache/wiki/%5BV5%CB%96%5D-Fetching-all-keys)).\n- __Core__\n  - Configuration methods`ConfigurationOption::isPreventCacheSlams()`, `ConfigurationOption::setPreventCacheSlams()`, `ConfigurationOption::getCacheSlamsTimeout()`, `ConfigurationOption::setCacheSlamsTimeout()` are deprecated. ([See changes](CHANGELOG_API.md)).\n  - Fixed #907 // Internal \"driver decode()\" method will now throw an if the string data looks corrupted.\n  - Internal: Implemented multiple keys fetch (*if supported by the backend*) to improve the performances behind all `getItems()` calls. Currently only supported in some backends, but it may evolve in the future.\n  - Internal: Implemented multiple keys delete (*if supported by the backend*) to improve the performances behind all `deleteItems()` calls. Currently only supported in some backends, but it may evolve in the future.\n  - `\\Phpfastcache\\CacheContract::get()` now accepts a `\\Stringable $cacheKey` argument.\n- __Tags__\n  - Added `\\Phpfastcache\\Core\\Item\\TaggableCacheItemInterface::isTagged(): bool`\n- __Misc__\n  - Fixed multiple code typo & updated README.md\n\n## 9.1.3\n##### 12 february 2023\n- __Core__\n  - Fixed #893 // getItemsByTag() - empty after one item has expired\n- __Misc__\n  - Fixed multiple code typo & updated README.md\n\n## 9.1.2\n##### 09 june 2022\n- __API__\n  - Upgraded Phpfastcache API to `4.2.0` ([see changes](CHANGELOG_API.md))\n- __Core__\n  - Rewrote some core code to improve code maintainability & readability following Scrutinizer and Phpstan recommendations\n  - Fixed an issue with tags not properly reinitialized when a backend driver returns an expired cache item\n- __Drivers__\n  - Fixed #866 // Deprecated Method Cassandra\\ExecutionOptions starting of Cassandra 1.3\n- __Misc__\n  - Increased PHPSTAN level to 6\n  - Fixed multiple fails of Travis CI\n  - Migrated Github issue templates from Markdown to YAML configurations\n\n## 9.1.1\n##### 15 april 2022\n- __Core__\n  - Fixed #860 // Cache item throw an error on reading with DateTimeImmutable date objects\n  - Fixed an issue with tags not properly reinitialized when a backend driver returns an expired cache item\n- __Drivers__\n  - Fixed #862 // Multiple driver errors caused by invalid return type of `driverRead()` (reported by @ShockedPlot7560 and @aemla)\n\n## 9.1.0\n##### 04 april 2022\n- __API__\n  - Upgraded Phpfastcache API to `4.1.0` ([see changes](CHANGELOG_API.md))\n- __Core__\n  - Added `\\Phpfastcache\\Helper\\UninstanciableObjectTrait` trait which will contains base locked constructor for any classes that are nor meant to be instanciated.\n  - Deprecated `\\Phpfastcache\\Config\\Config::class` \n  - Removed/reworked/improved dead/unreachable/redundant/obsolete code, thanks to `Phpstan`\n- __Drivers__\n  - **Added `Solr` driver support**\n- __Events__\n  - Added `\\Phpfastcache\\Event\\EventInterface` for `\\Phpfastcache\\Event\\Event` and subclasses below\n  - Added `\\Phpfastcache\\Drivers\\Arangodb\\Event` for Arangodb events\n  - Added `\\Phpfastcache\\Drivers\\Dynamodb\\Event` for Dynamodb events\n  - Added `\\Phpfastcache\\Drivers\\Solr\\Event` for Solr events\n  - Moved the following constant from `\\Phpfastcache\\Event\\Event` to their respective drivers: `ARANGODB_CONNECTION`, `ARANGODB_COLLECTION_PARAMS`, `DYNAMODB_CREATE_TABLE`\n- __Cluster__\n  - Fixed #855 // ClusterReplication drivers are saving erroneous expiration date in low-level backends\n- __Misc__\n  - Full PSR-12 compliance is now enforced by PHPCS\n  - Multiple typo fixes (@mbiebl)\n  - Updated composer suggestions and CI builder dependencies\n\n## 9.0.2\n##### 04 march 2022\n- __Core__\n  - Updated CacheContract::__invoke() signature\n  - Added new option to allow EventManager override + improved EventManager tests (EventManager::setInstance())\n- __Drivers__\n  - Fixed #853 // Configuration validation issue with Memcached socket (path)\n- __Misc__\n  - Fixed typo and some types hint\n\n## 9.0.1\n##### 14 november 2021\n- __Core__\n  - Added `\\Phpfastcache\\Event\\Event` class for centralizing event name with reusable constants.\n- __Item__\n  - `\\Psr\\Cache\\CacheItemInterface::set` will also no longer accepts resource object anymore as method unique parameter\n- __Misc__\n  - Fixed typos in [README.md](./README.md)\n\n## 9.0.0\n##### 31 october 2021\n- __Migration guide__\n  - Read the [migration guide](./docs/migration/MigratingFromV8ToV9.md) to upgrade from V8 to V9\n- __PSR-6__\n  - Upgraded `psr/cache` dependency to `^2.0||^3.0` (for PHP-8 types)\n  - `\\Psr\\Cache\\CacheItemInterface::get()` slightly changed to fully comply with missing PSR-6 specification: If the cache item is **NOT** hit, this method will return `NULL`.\n- __PSR-16__\n  - Upgraded `psr/simple-cache` dependency to `^2.0||^3.0` (for PHP-8 types)\n- __API__\n  - Upgraded Phpfastcache API to `4.0.0` ([see changes](CHANGELOG_API.md))\n  - Renamed `Api::getPhpFastCacheVersion()` to `Api::getPhpfastcacheVersion()`\n  - Renamed `Api::getPhpFastCacheChangelog()` to `Api::getPhpfastcacheChangelog()`\n  - Renamed `Api::getPhpFastCacheGitHeadHash()` to `Api::getPhpfastcacheGitHeadHash()`\n- __Cluster__\n  - Renamed `\\Phpfastcache\\Cluster\\AggregatorInterface::aggregateNewDriver()` to `\\Phpfastcache\\Cluster\\AggregatorInterface::aggregateDriverByName()` \n- __Exceptions__\n  - Added `PhpfastcacheEventManagerException` for EventManager-related exceptions\n- __Global__\n  - Removed magics methods from CacheManager `CacheManager::DriverName()`, use `CacheManager::getInstance('DriverName')` instead\n  - `\\Phpfastcache\\Proxy\\PhpfastcacheAbstractProxy` now implements `\\Phpfastcache\\Proxy\\PhpfastcacheAbstractProxyInterface`\n  - Slightly increased performances on some critical points of the library\n  - Removed \"BadPracticeOMeter\" notice in CacheManager\n  - Removed many code duplicate (like in `\\Phpfastcache\\Driver\\[DRIVER_NAME]\\Item` classes)\n  - Reworked traits inter-dependencies for better logic and less polymorphic calls in pool/item traits\n  - Upgrading library to use benefits of PHP 8 new features (see below)\n  - Typed every class properties of the library\n  - Migrated many Closure to arrow functions\n  - Updated parameters & return type hint to use benefit of covariance and contravariance\n  - Removed embedded Autoload, Phpfastcache is now only Composer-compatible.\n  - Removed embedded dependencies (`psr/cache`, `psr/simple-cache`)\n- __Helpers__\n  - Deprecated `\\Phpfastcache\\Helper\\CacheConditionalHelper`, use `\\Phpfastcache\\CacheContract` instead\n  - The `\\Phpfastcache\\CacheContract` class is now also callable directly without calling `get()` method\n- __Config/Options__\n  - Configuration object will now be locked once the cache pool instance is running. \n  - Updated `ConfigurationOption` which is no longer an `ArrayObject` class, therefore array-syntax is no longer available.\n  - Removed configuration entry `htaccess` for files-based drivers.\n  - Removed `IOConfigurationOptionTrait::getHtaccess()`\n  - Removed `IOConfigurationOptionTrait::setHtaccess()`\n- __Tests__\n  - Added PHPMD, PHPCS and PHPSTAN coverages to increase quality of the project\n  - Updated tests to work with new core/drivers changes\n  - Removed Autoload test since its support has been removed and now only managed by Composer\n  - Increased tests reliability and code coverage for better catching any eventual regression \n- __Item__\n  - `\\Psr\\Cache\\CacheItemInterface::set` will not accept `\\Closure` object anymore as method unique parameter\n- __Drivers__\n  - Added `Arangodb` driver support\n  - Added `Dynamodb` (AWS) driver support\n  - Added `Firestore` (GCP) driver support\n  - Removed `Cookie` driver because of its potential dangerosity\n  - Removed `Couchbase` (SDK 2 support dropped) driver which is now replaced by `Couchbasev3` (SDK 3)\n  - Removed `Devtrue` and `Devfalse` drivers\n  - Added `Devrandom` with configurable factor chance and data length\n  - Renamed classes `\\Phpfastcache\\Cluster\\Drivers\\[STATEGY]\\[CLUSTER_NAME]Cluster` to `\\Phpfastcache\\Cluster\\Drivers\\[STATEGY]\\Driver` for better driver naming across the project\n- __Events__\n  - Added `\\Phpfastcache\\Event\\EventReferenceParameter` class and more events such as driver-specific events, see [EVENTS.md](./docs/EVENTS.md) file for more information\n  - Event callbacks will now receive the `eventName` as an extra _last_ callback parameter (except for `onEveryEvents` callbacks)\n  - Added `EventManagerInterface::on(array $eventNames, $callback)` method, to subscribe to multiple events in once with the same callback\n  - Added method named `unbindAllEventCallbacks(): bool` to `EventManagerInterface` to allow you to unbind/clear all event from an event instance\n  - Updated argument type #2 (`$items`) of `onCacheSaveMultipleItems()` event from `ExtendedCacheItemInterface[]` to `EventReferenceParameter($items)`\n  - Updated argument type #2 (`$items`) of `onCacheCommitItem()` event from `ExtendedCacheItemInterface[]` to `EventReferenceParameter($items)`\n  - Updated argument type #2 (`$value`) of `onCacheItemSet()` event from `mixed` to `EventReferenceParameter(mixed $value)`\n- __Misc__\n  - Increased minimum PHP compatibility in composer to `^8.0`\n  - Updated copyright headers on every file to include the many project contributors\n  - Globally renamed every occurrence of `PhpFastCache` to `Phpcastcache`\n"
        },
        {
          "name": "CHANGELOG_API.md",
          "type": "blob",
          "size": 9.8232421875,
          "content": "## 4.3.0\n- Created method `ExtendedCacheItemPoolTrait::getAllItems(string $pattern = ''): iterable` which will return all the items stored in the cache. This method have some limitations, ([see more in the Wiki](https://github.com/PHPSocialNetwork/phpfastcache/wiki/%5BV5%CB%96%5D-Fetching-all-keys)).\n- Deprecated `ConfigurationOption::isPreventCacheSlams()` for future removal, use `IOConfigurationOption::isPreventCacheSlams()` instead.\n- Deprecated `ConfigurationOption::setPreventCacheSlams()` for future removal, use `IOConfigurationOption::setPreventCacheSlams()` instead.\n- Deprecated `ConfigurationOption::getCacheSlamsTimeout()` for future removal, use `IOConfigurationOption::getCacheSlamsTimeout()` instead.\n- Deprecated `ConfigurationOption::setCacheSlamsTimeout()` for future removal, use `IOConfigurationOption::setCacheSlamsTimeout()` instead.\n- Deprecated `\\Phpfastcache\\Event\\EventManagerDispatcherInterface::hasEventManager` to be removed for v10.\n- Created `IOConfigurationOption::isPreventCacheSlams()`. This method will **only be available** for `Files, Sqlite, Leveldb` drivers.\n- Created `IOConfigurationOption::setPreventCacheSlams()`. This method will **only be available** for `Files, Sqlite, Leveldb` drivers.\n- Created `IOConfigurationOption::getCacheSlamsTimeout()`. This method will **only be available** for `Files, Sqlite, Leveldb` drivers.\n- Created `IOConfigurationOption::setCacheSlamsTimeout()`. This method will **only be available** for `Files, Sqlite, Leveldb` drivers.\n- Method `EventManagerInterface::on(array|string $events, callable $callback)` now also accepts a single `string $events`.\n- Added `\\Phpfastcache\\Core\\Item\\TaggableCacheItemInterface::isTagged`.\n\n\n## 4.2.0\n- Created method `\\Phpfastcache\\Cluster\\AggregatablePoolInterface::isAggregatedBy(): ?ClusterPoolInterface` which will return the aggregator object for Cluster aggregators\n- Created method `\\Phpfastcache\\Cluster\\AggregatablePoolInterface::setAggregatedBy(ClusterPoolInterface $clusterPool): static` which will allow to set the aggregator object\n\n## 4.1.0\n- Created `\\Phpfastcache\\Event\\EventInterface` which will be used for `Phpfastcache\\Event\\Event` and any `Phpfastcache\\Drivers\\xxxxxxx\\Event` classes\n- Extended `CacheItemPoolInterface::save()` with `ExtendedCacheItemPoolInterface::save()` for re-typing\n- Method `ExtendedCacheItemPoolInterface::getConfig()` now returns `ConfigurationOptionInterface` instead of `ConfigurationOption`\n- Method `ExtendedCacheItemPoolInterface::getDefaultConfig()` now returns `ConfigurationOptionInterface` instead of `ConfigurationOption`\n- Method `EventManagerInterface::getInstance()` now returns `EventManagerInterface` instead of `static`\n\n## 4.0.0\n- **[BC Break]** Upgraded `psr/cache` dependency to `^3.0` which required `ExtendedCacheItemPoolInterface` and `ExtendedCacheItemInterface` updates\n- **[BC Break]** Increased minimum PHP compatibility to `^8.0` which also required `TaggableCacheItemPoolInterface` and `TaggableCacheItemInterface` updates\n- **[BC Break]** Updated `ExtendedCacheItemPoolInterface::saveMultiple(ExtendedCacheItemInterface...$items)` which no longer accept argument #0 to be itself an array of `ExtendedCacheItemInterface` objects\n- **[BC Break]** Updated `ExtendedCacheItemPoolInterface::getConfigClass()` signature: it is now a **static** method\n- Added `ExtendedCacheItemPoolInterface::getItemClass()`\n- Added `ExtendedCacheItemInterface::hasTag(string $tag)` to test if a cache item is tagged with the provided tag\n- Added `ExtendedCacheItemInterface::hasTag(string $tag)` to test if a cache item is tagged with the provided tag\n- Added `ExtendedCacheItemInterface::cloneInto(ExtendedCacheItemInterface $itemTarget, ?ExtendedCacheItemPoolInterface $itemPoolTarget = null)` to clone a cache item into another with an optional pool object\n- Referenced `TaggableCacheItemPoolInterface::TAG_STRATEGY_*` constants to `TaggableCacheItemInterface::TAG_STRATEGY_*` for more code usability\n\n## 3.0.0\n- **[BC Break]** Removed `ExtendedCacheItemPoolInterface::appendItemsByTagsAll()` (replaced by strategy `TaggableCacheItemPoolInterface::TAG_STRATEGY_ALL`)\n- **[BC Break]** Removed `ExtendedCacheItemPoolInterface::decrementItemsByTagsAll()` (replaced by strategy `TaggableCacheItemPoolInterface::TAG_STRATEGY_ALL`)\n- **[BC Break]** Removed `ExtendedCacheItemPoolInterface::deleteItemsByTagsAll()` (replaced by strategy `TaggableCacheItemPoolInterface::TAG_STRATEGY_ALL`)\n- **[BC Break]** Removed `ExtendedCacheItemPoolInterface::getItemsByTagsAll()` (replaced by strategy `TaggableCacheItemPoolInterface::TAG_STRATEGY_ALL`)\n- **[BC Break]** Removed `ExtendedCacheItemPoolInterface::incrementItemsByTagsAll()` (replaced by strategy `TaggableCacheItemPoolInterface::TAG_STRATEGY_ALL`)\n- **[BC Break]** Removed `ExtendedCacheItemPoolInterface::prependItemsByTagsAll()` (replaced by strategy `TaggableCacheItemPoolInterface::TAG_STRATEGY_ALL`)\n- **[BC Break]** Removed deprecated method `ExtendedCacheItemPoolInterface::getConfigOption()` (Use getConfig()->getOptionName() instead)\n- **[BC Break]** Removed deprecated method `ExtendedCacheItemPoolInterface::isUsableInAutoContext()` (Since \"Auto\" driver has been removed)\n- Added strategy`TaggableCacheItemPoolInterface::TAG_STRATEGY_ONE` usable in every `**byTags**` methods.\n- Added strategy`TaggableCacheItemPoolInterface::TAG_STRATEGY_ALL` usable in every `**byTags**` methods.\n- Added strategy`TaggableCacheItemPoolInterface::TAG_STRATEGY_ONLY` usable in every `**byTags**` methods.\n\n## 3.0.0-rc\n- **[BC Break]** Moved `\\Phpfastcache\\Event\\EventInterface` to`\\Phpfastcache\\Event\\EventManagerInterface`\n- Moved (by extends) ExtendedCacheItemPoolInterface::setEventManager() in `\\Phpfastcache\\Event\\EventManagerDispatcherInterface:setEventManager()`\n- Moved (by extends) ExtendedCacheItemInterface::doesItemBelongToThatDriverBackend() in `\\Phpfastcache\\Event\\EventManagerDispatcherInterface::setEventManager()`\n- Added `\\Phpfastcache\\Event\\EventManagerDispatcherInterface`\n- Added `ExtendedCacheItemInterface::doesItemBelongToThatDriverBackend()`\n- Added `\\Phpfastcache\\Event\\EventManagerInterface:onEveryEvents()`\n\n## 2.0.4\n- Added ExtendedCacheItemPoolInterface::getConfigClass() that returns the config class name\n\n## 2.0.3\n- Updated ExtendedCacheItemPoolInterface::setEventManager() first argument that now MUST implement `\\Phpfastcache\\Event\\EventInterface`\n- Updated ExtendedCacheItemInterface::setEventManager() first argument that now MUST implement `\\Phpfastcache\\Event\\EventInterface`\n\n## 2.0.2\n- Added ExtendedCacheItemPoolInterface::isUsableInAutoContext() to check if the driver is allowed to be used in 'Auto' context.\n\n## 2.0.1\n- Implemented additional atomic methods:\n- Added ExtendedCacheItemInterface::isNull() to test if the data is null or not despite the hit/miss status.\n- Added ExtendedCacheItemInterface::isEmpty() to test if the data is empty or not despite the hit/miss status.\n- Added ExtendedCacheItemInterface::getLength() get the data length if the data is a string, array, or objects that implement \\Countable interface.\n\n## 2.0.0\n- Introduced BC breaks:\n- Updated ExtendedCacheItemPoolInterface to be compliant with the new \\$config object introduced in V7.\n- ExtendedCacheItemPoolInterface::getConfig() no longer returns an array but a ConfigurationOption object\n- ExtendedCacheItemPoolInterface::getDefaultConfig() no longer returns an array but a ConfigurationOption object\n- Removed ExtendedCacheItemInterface::getUncommittedData() that is no longer used in the V7\n\n## 1.3.0\n- Implemented full PHP7 type hint support for ExtendedCacheItemPoolInterface and ExtendedCacheItemInterface\n- Added instance ID getter (introduced in V7):\n  - ExtendedCacheItemPoolInterface::getInstanceId()\n- The method ExtendedCacheItemPoolInterface::getDefaultConfig() will now returns a \\phpFastCache\\Util\\ArrayObject\n\n## 1.2.5\n- Implemented additional simple helper method to direct access to a config option:\n  - ExtendedCacheItemPoolInterface::getConfigOption()\n\n## 1.2.4\n- Implemented additional simple helper method to provide basic information about the driver:\n  - ExtendedCacheItemPoolInterface::getHelp()\n\n## 1.2.3\n- Implemented additional saving method form multiple items:\n   ExtendedCacheItemPoolInterface::saveMultiple()\n\n## 1.2.2\n- Implemented additional tags methods such as:\n  - ExtendedCacheItemPoolInterface::getItemsByTagsAll()\n  - ExtendedCacheItemPoolInterface::incrementItemsByTagsAll()\n  - ExtendedCacheItemPoolInterface::decrementItemsByTagsAll()\n  - ExtendedCacheItemPoolInterface::deleteItemsByTagsAll()\n  - ExtendedCacheItemPoolInterface::appendItemsByTagsAll()\n  - ExtendedCacheItemPoolInterface::prependItemsByTagsAll()\n\n## 1.2.1\n- Implemented Event manager methods such as:\n  - ExtendedCacheItemInterface::setEventManager()\n  - ExtendedCacheItemPoolInterface::setEventManager()\n\n## 1.2.0\n- Implemented Item advanced time methods such as:\n  - ExtendedCacheItemInterface::setExpirationDate() (Alias of CacheItemInterface::ExpireAt() for more code logic)\n  - ExtendedCacheItemInterface::getCreationDate() * \n  - ExtendedCacheItemInterface::getModificationDate() *\n  - ExtendedCacheItemInterface::setCreationDate(\\DateTimeInterface) *\n  - ExtendedCacheItemInterface::setModificationDate() *\n    - \\* Require configuration directive \"itemDetailedDate\" to be enabled\n\n## 1.1.3\n- Added an additional CacheItemInterface method:\n  - ExtendedCacheItemInterface::getEncodedKey()\n\n## 1.1.2\n- Implemented [de|a]ttaching methods to improve memory management\n  - ExtendedCacheItemPoolInterface::detachItem()\n  - ExtendedCacheItemPoolInterface::detachAllItems()\n  - ExtendedCacheItemPoolInterface::attachItem()\n  - ExtendedCacheItemPoolInterface::isAttached()\n\n## 1.1.1\n- Implemented JsonSerializable interface to ExtendedCacheItemInterface\n\n## 1.1.0\n- Implemented JSON methods such as:\n  - ExtendedCacheItemPoolInterface::getItemsAsJsonString()\n  - ExtendedCacheItemPoolInterface::getItemsByTagsAsJsonString()\n  - ExtendedCacheItemInterface::getDataAsJsonString()\n\n## 1.0.0\n- First initial version\n"
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.01953125,
          "content": "www.phpfastcache.com"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.142578125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at team@phpfastcache.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CODING_GUIDELINE.md",
          "type": "blob",
          "size": 1.8828125,
          "content": "CODING GUIDELINE\n-------------------\n\nFork the project, create a feature branch, and send us a pull request.\nPreferably on a distinct branch.\n\nTo ensure a consistent code base, you should make sure the code follows\nthe [PSR-12: Extended Coding Style](https://www.php-fig.org/psr/psr-12/). You can also\nrun [php-cs-fixer](https://github.com/FriendsOfPHP/PHP-CS-Fixer) with the\nconfiguration file that can be found in the project root directory.\n\nIf you would like to help, take a look at the [list of open issues](https://github.com/PHPSocialNetwork/phpfastcache/issues).\n\nPHPFASTCACHE's specialties \n-------------------\nAs of the V7 your contributions MUST comply the following standards:\n\n### PHP CORE FUNCTIONS\n- To improve Opcode efficiency, you MUST prefix core function by a '\\\\'\n  - E.g: `$var = \\str_replace('value', '', $var);`\n  \n### PHP CORE CONSTANTS\n- To improve Opcode efficiency, you MUST prefix core constants by a '\\\\'\n  - E.g: `$dateFormat = \\DATE_ISO8601`\n\n### PHP CORE CLASSES\n- Do not import non-namespaced classes, use an absolute path instead:  \n  - E.g: `$date = new \\DateTime();`\n\n### CODE STYLE\n- Unneeded/inconsistent `else` statements have to be shortened.\n  - E.g: \n ```php \n <?php\nfunction setAcme($acme)\n{\n    if ($acme instanceof Acme) {\n        $this->acme = $acme;\n        return $this;\n    } else {\n        throw new phpFastCacheInvalidArgumentException('Invalid acme instance');\n    }\n}\n ```\n  - This example can be safely replaced by this one:\n```php \n <?php\nfunction setAcme($acme)\n{\n    if ($acme instanceof Acme) {\n        $this->acme = $acme;\n        return $this;\n    } \n\n    throw new phpFastCacheInvalidArgumentException('Invalid acme instance');\n}\n ```\n[Read this thread on StackExchange for more information](https://softwareengineering.stackexchange.com/questions/122485/elegant-ways-to-handle-ifif-else-else)\nThis list is non-exhaustive and will may subject to evolve at any time.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.6630859375,
          "content": "Contributing to PhpFastCache\n========================\n\nPlease note that this project is released with a\n[Contributor Code of Conduct](https://www.contributor-covenant.org/version/1/4/code-of-conduct/).\nBy participating in this project you agree to abide by its terms.\n\nReporting Issues\n----------------\n\nWhen reporting issues, please try to be as descriptive as possible, and include\nas much relevant information as you can. A step by step guide on how to\nreproduce the issue will greatly increase the chances of your issue being\nresolved in a timely manner.\n\nContributing policy\n-------------------\n\nOur contributing policy is described in our [Coding Guideline](https://github.com/PHPSocialNetwork/phpfastcache/blob/master/CODING_GUIDELINE.md)\n\nDeveloper notes\n-------------------\nIf you want to contribute to the repository you will need to install/configure some things first.\n\nTo run tests follow the steps:\n1) Run `./bin/ci/scripts/install_dependencies.sh`\n2) Run `./vendor/bin/phpcs lib/  --report=summary`\n3) Run `./vendor/bin/phpmd lib/ ansi phpmd.xml`\n4) Run `./vendor/bin/phpstan analyse lib/ -c phpstan_lite.neon 2>&1`\n5) Run `php -f ./bin/ci/run_tests.php`\n\nIf you are on Windows environment simply run the file `quality.bat` located at the root of the project to run the step 2, 3 and 4 in once.\n\nThe last command will run all the unit tests of the project.\nIf an error appears, fix it then you can submit your pull request.\n\nSome tests will be skipped if you don't have special dependencies installed (Arangodb, Couchbase, Couchdb, Firestore credential and SDK, Dynamodb credential, etc.).\\\nSo don't worry if those tests are skipped as long as they **pass** on the GitHub and Travis CIs.\n"
        },
        {
          "name": "EXTENSIONS.MD",
          "type": "blob",
          "size": 0.5908203125,
          "content": "## As of the 9.2 an extension concept has been introduced.\n\nIt's pretty new but allow Phpfastcache to split up its drivers into sub-repository with a simple additional call to make.\n\nThe 9.2 make the beginning of a new external extensions: \n\n- `Arangodb`\n- `Couchbasev4`\n- `Couchdb`\n- `Dynamodb`\n- `Firestore`\n- `Mongodb`\n- `Solr`\n\nThere's only 2 steps:\n\n1) Add it to your composer: `composer install phpfastcache/couchbasev4-extension`\n2) Call the CacheManager: `CacheManager::getInstance('Couchbasev4')`\n\nHowever `Couchbasev3` will stay in the core for compatibility reason but will be **deprecated**. \n"
        },
        {
          "name": "LICENCE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "Copyright (c) 2023 Phpfastcache & its Extensions\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\nSoftware), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 33.58203125,
          "content": "[![Total Downloads](https://img.shields.io/packagist/dt/phpfastcache/phpfastcache.svg?maxAge=86400)](https://packagist.org/packages/phpfastcache/phpfastcache) [![Latest Stable Version](https://img.shields.io/packagist/v/phpfastcache/phpfastcache.svg?maxAge=86400)](https://packagist.org/packages/phpfastcache/phpfastcache) [![PHPSTAN](https://img.shields.io/badge/PHPSTAN-L6-blue.svg?maxAge=86400)](https://github.com/PHPSocialNetwork/phpfastcache/blob/master/.travis.yml) [![Cache Interface](https://img.shields.io/badge/CI-PSR6-orange.svg?maxAge=86400)](https://github.com/php-fig/cache) [![Extended Coding Style](https://img.shields.io/badge/ECS-PSR12-orange.svg?maxAge=86400)](https://www.php-fig.org/psr/psr-12/)  [![Simple Cache](https://img.shields.io/badge/SC-PSR16-orange.svg?maxAge=86400)](https://github.com/php-fig/simple-cache) \n[![Code Climate](https://codeclimate.com/github/PHPSocialNetwork/phpfastcache/badges/gpa.svg)](https://codeclimate.com/github/PHPSocialNetwork/phpfastcache) [![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/PHPSocialNetwork/phpfastcache/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/PHPSocialNetwork/phpfastcache/?branch=master) [![Build Status](https://travis-ci.com/PHPSocialNetwork/phpfastcache.svg?branch=master)](https://app.travis-ci.com/github/PHPSocialNetwork/phpfastcache) [![Semver compliant](https://img.shields.io/badge/Semver-2.0.0-yellow.svg?maxAge=86400)](https://semver.org/spec/v2.0.0.html) [![License](https://img.shields.io/packagist/l/phpfastcache/phpfastcache.svg?maxAge=86400)](https://packagist.org/packages/phpfastcache/phpfastcache) [![Patreon](https://img.shields.io/badge/Support%20us%20on-Patreon-f96854.svg?maxAge=86400)](https://www.patreon.com/geolim4)\n\n#### :warning: Please note that the V9 is mostly a PHP 8 type aware update of Phpfastcache with some significant changes !\n> As the V9 is **relatively** not compatible with previous versions, please read carefully the [migration guide](./docs/migration/MigratingFromV8ToV9.md) to ensure you the smoothest migration possible.\nOne of the biggest changes is the configuration system which is now an object that replace the primitive array that we used to implement back then. \nAlso, please note that the V9 requires at least PHP 8 or higher to works properly.\n\n---------------------------\nSimple Yet Powerful PHP Caching Class\n---------------------------\nMore information in [Wiki](https://github.com/PHPSocialNetwork/phpfastcache/wiki)\nThe simplicity of abstraction: One class for many backend cache. You don't need to rewrite your code many times again.\n\n### Supported drivers at this day *\n:bulb: Feel free to propose a driver by making a new **[Pull Request](https://github.com/PHPSocialNetwork/phpfastcache/compare)**, they are welcome !\n\n| Regular drivers                                                                      | High performances drivers                                                                        | Development drivers  _(Core)_              | Cluster-Aggregated drivers _(Core)_   |\n|--------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------|--------------------------------------------|---------------------------------------|\n| `Apcu` _(Core)_  <br>_(APC support removed)_                                         | `Arangodb` _([Extension](https://github.com/PHPSocialNetwork/arangodb-extension))_               | `Devnull`                                  | `FullReplicationCluster`              |\n| `Dynamodb` _([Extension](https://github.com/PHPSocialNetwork/dynamodb-extension))_   | `Cassandra` <br> _(PHP extension is no more maintained by Datastax, might be deprecated in v10)_ | `Devrandom`                                | `SemiReplicationCluster`              |\n| `Files` _(Core)_                                                                     | `CouchBasev3` _(Core)_<br>_(Will be deprecated as of v10)_                                       | `Memory`<br>(Previously named `Memstatic`) | `MasterSlaveReplicationCluster`       |\n| `Firestore` _([Extension](https://github.com/PHPSocialNetwork/firestore-extension))_ | `CouchBasev4` _([Extension](https://github.com/PHPSocialNetwork/couchbasev4-extension))_         |                                            | `RandomReplicationCluster`            |\n| `Leveldb` _(Core)_                                                                   | `Couchdb` _([Extension](https://github.com/PHPSocialNetwork/couchdb-extension))_                 |                                            |                                       |\n| `Memcache(d)` _(Core)_                                                               | `Mongodb` _([Extension](https://github.com/PHPSocialNetwork/mongodb-extension))_                 |                                            |                                       |\n| `Solr` _([Extension](https://github.com/PHPSocialNetwork/solr-extension))_           | `Predis` _(Core)_                                                                                |                                            |                                       |\n| `Sqlite` _(Core)_                                                                    | `Ravendb` _([Extension](https://github.com/PHPSocialNetwork/ravendb-extension))                  |                                            |                                       |\n| ` Wincache` _(Core)_  <br>(**Deprecated** as of v9.2, will be removed as of v10)     | `Relay` ([By end of 2024](https://relay.so/))                                                                         |\n| `Zend Disk Cache` _(Core)_                                                           | `Redis`/`RedisCluster` _(Core)_                                                                  |                                            |                                       |\n|                                                                                      | `Ssdb` _(Core)_                                                                                  |                                            |                                       |\n|                                                                                      | `Zend Memory Cache` _(Core)_                                                                     |                                            |                                       |\n\n\\* Driver descriptions available in [DOCS/DRIVERS.md](./docs/DRIVERS.md)\n\n:new: As of v9.2 a new Couchbase extension has been released: [Couchbasev4](https://github.com/PHPSocialNetwork/couchbasev4-extension)\nAlso a new driver extension has been added: `Ravendb`. The driver will be **actively developed** in the feature to allow better fine-grained configuration.\nThis new extension **is the beginning of a new era** for Phpfastcache along with some others:\\\nMany drivers has been moved from the core to their own sub-repository as a standalone extension: `Arangodb`, `Couchdb`, `Dynamodb`, `Firestore`, `Mongodb`, `Solr`.\\\nThey can be easily added through composer, ex: `composer install phpfastcache/couchbasev4-extension`\nHowever `Couchbasev3` **will stay in the core** for compatibility reasons but will be deprecated.\n\n---------------------------\nBecause caching does not mean weaken your code\n---------------------------\nPhpfastcache has been developed over the years with 3 main goals:\n\n- Performance: We optimized and still optimize the code to provide you the lightest library as possible\n- Security: Because caching strategies can sometimes comes with unwanted vulnerabilities, we do our best to provide you a sage & strong library as possible \n- Portability: No matter what operating system you're working on, we did our best to provide you the most cross-platform code as possible\n\n---------------------------\nRich Development API\n---------------------------\n\nPhpfastcache provides you a lot of useful APIs:\n\n### Item API (ExtendedCacheItemInterface)\n\n| Method                                          | Return                       | Description                                                                                                                           | \n|-------------------------------------------------|------------------------------|---------------------------------------------------------------------------------------------------------------------------------------| \n| `addTag($tagName)`                              | `ExtendedCacheItemInterface` | Adds a tag                                                                                                                            | \n| `addTags(array $tagNames)`                      | `ExtendedCacheItemInterface` | Adds multiple tags                                                                                                                    | \n| `append($data)`                                 | `ExtendedCacheItemInterface` | Appends data to a string or an array (push)                                                                                           | \n| `decrement($step = 1)`                          | `ExtendedCacheItemInterface` | Redundant joke...                                                                                                                     | \n| `expiresAfter($ttl)`                            | `ExtendedCacheItemInterface` | Allows you to extends the lifetime of an entry without altering its value (formerly known as touch())                                 | \n| `expiresAt($expiration)`                        | `ExtendedCacheItemInterface` | Sets the expiration time for this cache item (as a DateTimeInterface object)                                                          | \n| `get()`                                         | `mixed`                      | The getter, obviously, returns your cache object                                                                                      |\n| `getCreationDate()`                             | `\\DatetimeInterface`         | Gets the creation date for this cache item (as a DateTimeInterface object)  *                                                         | \n| `getDataAsJsonString()`                         | `string`                     | Return the data as a well-formatted json string                                                                                       | \n| `getEncodedKey()`                               | `string`                     | Returns the final and internal item identifier (key), generally used for debug purposes                                               | \n| `getExpirationDate()`                           | `ExtendedCacheItemInterface` | Gets the expiration date as a Datetime object                                                                                         | \n| `getKey()`                                      | `string`                     | Returns the item identifier (key)                                                                                                     | \n| `getLength()`                                   | `int`                        | Gets the data length if the data is a string, array, or objects that implement `\\Countable` interface.                                | \n| `getModificationDate()`                         | `\\DatetimeInterface`         | Gets the modification date for this cache item (as a DateTimeInterface object) *                                                      | \n| `getTags()`                                     | `string[]`                   | Gets the tags                                                                                                                         | \n| `hasTag(string $tagName)`                       | `bool`                       | Check if the cache item contain one specific tag                                                                                      | \n| `hasTags(array $tagNames, int $strategy): bool` | `bool`                       | Check if the cache item contain one or more specific tag with optional strategy (default to TAG_STRATEGY_ONE)                         | \n| `isTagged(): bool`                              | `bool`                       | Check if the cache item has at least one tag (v9.2)                                                                                   | \n| `getTagsAsString($separator = ', ')`            | `string`                     | Gets the data as a string separated by $separator                                                                                     | \n| `getTtl()`                                      | `int`                        | Gets the remaining Time To Live as an integer                                                                                         | \n| `increment($step = 1)`                          | `ExtendedCacheItemInterface` | To allow us to count on an integer item                                                                                               | \n| `isEmpty()`                                     | `bool`                       | Checks if the data is empty or not despite the hit/miss status.                                                                       | \n| `isExpired()`                                   | `bool`                       | Checks if your cache entry is expired                                                                                                 | \n| `isHit()`                                       | `bool`                       | Checks if your cache entry exists and is still valid, it's the equivalent of isset()                                                  | \n| `isNull()`                                      | `bool`                       | Checks if the data is null or not despite the hit/miss status.                                                                        | \n| `prepend($data)`                                | `ExtendedCacheItemInterface` | Prepends data to a string or an array (unshift)                                                                                       | \n| `removeTag($tagName)`                           | `ExtendedCacheItemInterface` | Removes a tag                                                                                                                         | \n| `removeTags(array $tagNames)`                   | `ExtendedCacheItemInterface` | Removes multiple tags                                                                                                                 | \n| `set($value)`                                   | `ExtendedCacheItemInterface` | The setter, for those who missed it, can be anything except resources or non-serializer object (ex: PDO objects, file pointers, etc). | \n| `setCreationDate($expiration)`                  | `\\DatetimeInterface`         | Sets the creation date for this cache item (as a DateTimeInterface object) *                                                          | \n| `setEventManager($evtMngr)`                     | `ExtendedCacheItemInterface` | Sets the event manager                                                                                                                | \n| `setExpirationDate()`                           | `ExtendedCacheItemInterface` | Alias of expireAt() (for more code logic)                                                                                             | \n| `setModificationDate($expiration)`              | `\\DatetimeInterface`         | Sets the modification date for this cache item (as a DateTimeInterface object) *                                                      | \n| `setTags(array $tags)`                          | `ExtendedCacheItemInterface` | Sets multiple tags                                                                                                                    |\n\\* Require configuration directive \"itemDetailedDate\" to be enabled, else a \\LogicException will be thrown\n\n### ItemPool API (ExtendedCacheItemPoolInterface)\n| Methods (By Alphabetic Order)                                 | Return                           | Description                                                                                                                                                                                   | \n|---------------------------------------------------------------|----------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| \n| `appendItemsByTag($tagName, $data)`                           | `bool`                           | Appends items by a tag                                                                                                                                                                        | \n| `appendItemsByTags(array $tagNames, $data)`                   | `bool`                           | Appends items by one of multiple tag names                                                                                                                                                    | \n| `attachItem($item)`                                           | `void`                           | (Re-)attaches an item to the pool                                                                                                                                                             | \n| `clear()`                                                     | `bool`                           | Allows you to completely empty the cache and restart from the beginning                                                                                                                       | \n| `commit()`                                                    | `bool`                           | Persists any deferred cache items                                                                                                                                                             | \n| `decrementItemsByTag($tagName, $step = 1)`                    | `bool`                           | Decrements items by a tag                                                                                                                                                                     | \n| `decrementItemsByTags(array $tagNames, $step = 1)`            | `bool`                           | Decrements items by one of multiple tag names                                                                                                                                                 | \n| `deleteItem($key)`                                            | `bool`                           | Deletes an item                                                                                                                                                                               | \n| `deleteItems(array $keys)`                                    | `bool`                           | Deletes one or more items                                                                                                                                                                     | \n| `deleteItemsByTag($tagName)`                                  | `bool`                           | Deletes items by a tag                                                                                                                                                                        | \n| `deleteItemsByTags(array $tagNames, int $strategy)`           | `bool`                           | Deletes items  by one of multiple tag names                                                                                                                                                   | \n| `detachItem($item)`                                           | `void`                           | Detaches an item from the pool                                                                                                                                                                | \n| `getConfig()`                                                 | `ConfigurationOption`            | Returns the configuration object                                                                                                                                                              | \n| `getConfigOption($optionName);`                               | `mixed`                          | Returns a configuration value by its key `$optionName`                                                                                                                                        | \n| `getDefaultConfig()`                                          | `ConfigurationOption`            | Returns the default configuration object (not altered by the object instance)                                                                                                                 | \n| `getDriverName()`                                             | `string`                         | Returns the current driver name (without the namespace)                                                                                                                                       | \n| `getEventManager()`                                           | `EventManagerInterface`          | Gets the event manager                                                                                                                                                                        |\n| `getHelp()`                                                   | `string`                         | Provides a very basic help for a specific driver                                                                                                                                              | \n| `getInstanceId()`                                             | `string`                         | Returns the instance ID                                                                                                                                                                       | \n| `getItem($key)`                                               | `ExtendedCacheItemInterface`     | Retrieves an item and returns an empty item if not found                                                                                                                                      | \n| `getItems(array $keys)`                                       | `ExtendedCacheItemInterface[]`   | Retrieves one or more item and returns an array of items. As of v9.2 an internal improvement has been made to this method.                                                                    | \n| `getAllItems(string $pattern = '')`                           | `ExtendedCacheItemInterface[]`   | *(v9.2)* Retrieves all cache items with a hard limit of 9999 items. Support [limited to some drivers](https://github.com/PHPSocialNetwork/phpfastcache/wiki/%5BV5%CB%96%5D-Fetching-all-keys) | \n| `getItemsAsJsonString(array $keys)`                           | `string`                         | Returns A json string that represents an array of items                                                                                                                                       | \n| `getItemsByTag($tagName, $strategy)`                          | `ExtendedCacheItemInterface[]`   | Returns items by a tag                                                                                                                                                                        | \n| `getItemsByTags(array $tagNames, $strategy)`                  | `ExtendedCacheItemInterface[]`   | Returns items by one of multiple tag names                                                                                                                                                    | \n| `getItemsByTagsAsJsonString(array $tagNames, $strategy)`      | `string`                         | Returns A json string that represents an array of items corresponding                                                                                                                         | \n| `getStats()`                                                  | `DriverStatistic`                | Returns the cache statistics as an object, useful for checking disk space used by the cache etc.                                                                                              | \n| `hasEventManager()`                                           | `bool`                           | Check the event manager                                                                                                                                                                       |\n| `hasItem($key)`                                               | `bool`                           | Tests if an item exists                                                                                                                                                                       | \n| `incrementItemsByTag($tagName, $step = 1, $strategy)`         | `bool`                           | Increments items by a tag                                                                                                                                                                     | \n| `incrementItemsByTags(array $tagNames, $step = 1, $strategy)` | `bool`                           | Increments items by one of multiple tag names                                                                                                                                                 | \n| `isAttached($item)`                                           | `bool`                           | Verify if an item is (still) attached                                                                                                                                                         | \n| `prependItemsByTag($tagName, $data, $strategy)`               | `bool`                           | Prepends items by a tag                                                                                                                                                                       | \n| `prependItemsByTags(array $tagNames, $data, $strategy)`       | `bool`                           | Prepends items by one of multiple tag names                                                                                                                                                   | \n| `save(CacheItemInterface $item)`                              | `bool`                           | Persists a cache item immediately                                                                                                                                                             | \n| `saveDeferred(CacheItemInterface $item)`                      | `bool`                           | Sets a cache item to be persisted later                                                                                                                                                       | \n| `saveMultiple(...$items)`                                     | `bool`                           | Persists multiple cache items immediately                                                                                                                                                     | \n| `setEventManager(EventManagerInterface $evtMngr)`             | `ExtendedCacheItemPoolInterface` | Sets the event manager                                                                                                                                                                        |\n\n:new: in **V8**: Multiple strategies (`$strategy`) are now supported for tagging:\n- `TaggableCacheItemPoolInterface::TAG_STRATEGY_ONE` allows you to get cache item(s) by at least **ONE** of the specified matching tag(s). **Default behavior.**\n- `TaggableCacheItemPoolInterface::TAG_STRATEGY_ALL` allows you to get cache item(s) by **ALL** of the specified matching tag(s) (the cache item *can* have additional tag(s))\n- `TaggableCacheItemPoolInterface::TAG_STRATEGY_ONLY` allows you to get cache item(s) by **ONLY** the specified matching tag(s) (the cache item *cannot* have additional tag(s))\n \nIt also supports multiple calls, Tagging, Setup Folder for caching. Look at our examples folders for more information.\n\n### Phpfastcache versioning API\nPhpfastcache provides a class that gives you basic information about your Phpfastcache installation\n- Get the API version (Item+Pool interface) with `Phpfastcache\\Api::GetVersion();`\n- Get the API changelog (Item+Pool interface) `Phpfastcache\\Api::getChangelog();`\n- Get the Phpfastcache version with `Phpfastcache\\Api::getPhpfastcacheVersion();`\n- Get the Phpfastcache changelog `Phpfastcache\\Api::getPhpfastcacheChangelog();`\n\n---------------------------\nWant to keep it simple ?\n---------------------------\n:sweat_smile: Good news, as of the V6, a Psr16 adapter is provided to keep the cache simplest using very basic getters/setters:\n\n- `get($key, $default = null);`\n- `set($key, $value, $ttl = null);`\n- `delete($key);`\n- `clear();`\n- `getMultiple($keys, $default = null);`\n- `setMultiple($values, $ttl = null);`\n- `deleteMultiple($keys);`\n- `has($key);`\n\nBasic usage:\n```php\n<?php\n\nuse Phpfastcache\\Helper\\Psr16Adapter;\n\n$defaultDriver = 'Files';\n$Psr16Adapter = new Psr16Adapter($defaultDriver);\n\nif(!$Psr16Adapter->has('test-key')){\n    // Setter action\n    $data = 'lorem ipsum';\n    $Psr16Adapter->set('test-key', 'lorem ipsum', 300);// 5 minutes\n}else{\n    // Getter action\n    $data = $Psr16Adapter->get('test-key');\n}\n\n\n/**\n* Do your stuff with $data\n*/\n```\n\nInternally, the Psr16 adapter calls the Phpfastcache Api via the cache manager. \n\n---------------------------\nIntroducing to events\n---------------------------\n\n:mega: As of the V6, Phpfastcache provides an event mechanism.\nYou can subscribe to an event by passing a Closure to an active event:\n\n```php\n<?php\n\nuse Phpfastcache\\EventManager;\n\n/**\n* Bind the event callback\n*/\nEventManager::getInstance()->onCacheGetItem(function(ExtendedCacheItemPoolInterface $itemPool, ExtendedCacheItemInterface $item){\n    $item->set('[HACKED BY EVENT] ' . $item->get());\n});\n\n```\n\nAn event callback can get unbind but you MUST provide a name to the callback previously:\n\n```php\n<?php\nuse Phpfastcache\\EventManager;\n\n/**\n* Bind the event callback\n*/\nEventManager::getInstance()->onCacheGetItem(function(ExtendedCacheItemPoolInterface $itemPool, ExtendedCacheItemInterface $item){\n    $item->set('[HACKED BY EVENT] ' . $item->get());\n}, 'myCallbackName');\n\n\n/**\n* Unbind the event callback\n*/\nEventManager::getInstance()->unbindEventCallback('onCacheGetItem', 'myCallbackName');\n\n```\n:new: As of the **V8** you can simply subscribe to **every** event of Phpfastcache.\n\nMore information about the implementation and the events are available on the [Wiki](https://github.com/PHPSocialNetwork/phpfastcache/wiki/%5BV6%CB%96%5D-Introducing-to-events)\n\n---------------------------\nIntroducing new helpers\n---------------------------\n:books: As of the V6, Phpfastcache provides some helpers to make your code easier.\n\n- (:warning: Removed in v8, [why ?](https://github.com/PHPSocialNetwork/phpfastcache/wiki/%5BV6%CB%96%5D-Act-on-all-instances)) ~~The [ActOnAll Helper](https://github.com/PHPSocialNetwork/phpfastcache/wiki/%5BV6%CB%96%5D-Act-on-all-instances) to help you to act on multiple instance at once.~~\n- The [CacheConditional Helper](https://github.com/PHPSocialNetwork/phpfastcache/wiki/%5BV6%CB%96%5D-Cache-Conditional) to help you to make the basic conditional statement more easier.\n- The [Psr16 adapter](https://github.com/PHPSocialNetwork/phpfastcache/wiki/%5BV6%CB%96%5D-Psr16-adapter) \n\nMay more will come in the future, feel free to contribute !\n\n---------------------------\nIntroducing aggregated cluster support\n---------------------------\nCheck out the [WIKI](https://github.com/PHPSocialNetwork/phpfastcache/wiki/%5BV8%CB%96%5D-Aggregated-cache-cluster) to learn how to implement aggregated cache clustering feature.\n\n---------------------------\nAs Fast To Implement As Opening a Beer\n---------------------------\n\n\n#### :thumbsup: Step 1: Include phpFastCache in your project with composer:\n\n\n```bash\ncomposer require phpfastcache/phpfastcache\n```\n\n#### :construction: Step 2: Setup your website code to implement the phpFastCache calls (with Composer)\n```php\n<?php\nuse Phpfastcache\\CacheManager;\nuse Phpfastcache\\Config\\ConfigurationOption;\n\n// Setup File Path on your config files\n// Please note that as of the V6.1 the \"path\" config \n// can also be used for Unix sockets (Redis, Memcache, etc)\nCacheManager::setDefaultConfig(new ConfigurationOption([\n    'path' => '/var/www/phpfastcache.com/dev/tmp', // or in windows \"C:/tmp/\"\n]));\n\n// In your class, function, you can call the Cache\n$InstanceCache = CacheManager::getInstance('files');\n\n/**\n * Try to get $products from Caching First\n * product_page is \"identity keyword\";\n */\n$key = \"product_page\";\n$CachedString = $InstanceCache->getItem($key);\n\n$your_product_data = [\n    'First product',\n    'Second product',\n    'Third product'\n     /* ... */\n];\n\nif (!$CachedString->isHit()) {\n    $CachedString->set($your_product_data)->expiresAfter(5);//in seconds, also accepts Datetime\n\t$InstanceCache->save($CachedString); // Save the cache item just like you do with doctrine and entities\n\n    echo 'FIRST LOAD // WROTE OBJECT TO CACHE // RELOAD THE PAGE AND SEE // ';\n    echo $CachedString->get();\n\n} else {\n    echo 'READ FROM CACHE // ';\n    echo $CachedString->get()[0];// Will print 'First product'\n}\n\n/**\n * use your products here or return them;\n */\necho implode('<br />', $CachedString->get());// Will echo your product list\n\n```\n\n#### :zap: Step 3: Enjoy ! Your website is now faster than lightning !\nFor curious developers, there is a lot of other examples available [here](./docs/examples).\n\n#### :boom: Phpfastcache support\nFound an issue or have an idea ? Come **[here](https://github.com/PHPSocialNetwork/phpfastcache/issues)** and let us know !\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.248046875,
          "content": "# Security Policy\nIf you discover any vulnerability please be aware of the following table of supported versions below.\nThen feel free to contact me at the email address provided in the bottom of that page.\n\n## Supported Versions\n| Version | End of support   | End of life      |\n|---------|------------------|------------------|\n| 10.0    | *In development* | *In development* |\n| 9.2     | December 2025    | December 2026    |\n| 9.1     | December 2024    | December 2025    |\n| 9.0     | December 2023    | December 2024    |\n| 8.x     | July 2023        | July 2024        |\n| 7.1     | July 2021        | July 2022        |\n| 7.0     | July 2019        | July 2020        |\n| 6.0     | July 2020        | July 2021        |\n| 5.0     | July 2018        | July 2019        |\n| 4.0     | July 2017        | January  2018    |\n| < 4.0   | N/A              | N/A              |\n\nMore details on the [Wiki](https://github.com/PHPSocialNetwork/phpfastcache/wiki/%5BV4%CB%96%5D-Global-support-timeline)\n\n## Reporting a Vulnerability\nIf you discover any security vulnerability contact me at contact#at#geolim4.com with a subject formatted like that:\\\n`[PHPFASTCACHE][VULNERABILITY] Your mail subject goes here`\n\nThanks in advance for taking the time to report me that in private.\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 3.732421875,
          "content": "{\n    \"name\": \"phpfastcache/phpfastcache\",\n    \"type\" : \"library\",\n    \"description\": \"PHP Abstract Cache Class - Reduce your database call using cache system. Phpfastcache handles a lot of drivers such as Apc(u), Cassandra, CouchBase, Couchdb, Dynamodb, Firestore, Mongodb, Files, (P)redis, Leveldb, Memcache(d), Ravendb, Ssdb, Sqlite, Wincache, Xcache, Zend Data Cache.\",\n    \"keywords\": [\"abstract\", \"cache\",\"caching\",\"php cache\",\"mysql cache\",\"apc\",\"apcu\",\"arangodb\",\"dynamodb\",\"firestore\",\"memcache\",\"memcached\",\"wincache\",\"files cache\",\"pdo cache\",\"cache class\",\"redis\",\"redis cluster\",\"predis\",\"cookie\", \"mongodb\", \"cassandra\", \"couchdb\", \"couchbase\", \"LevelDb\", \"ravendb\", \"Solr\", \"Ssdb\", \"Wincache\", \"xcache\",\"zend\",\"zend disk cache\",\"zend memory cache\",\"zend data cache\",\"zend server\"],\n    \"homepage\": \"https://www.phpfastcache.com\",\n    \"license\": \"MIT\",\n    \"readme\": \"README.md\",\n    \"minimum-stability\": \"stable\",\n    \"authors\": [\n            {\n                \"name\": \"Georges.L\",\n                \"email\": \"contact@geolim4.com\",\n                \"homepage\": \"https://github.com/Geolim4\",\n                \"role\": \"Actual Project Manager/Developer\"\n            },\n            {\n                \"name\": \"Contributors\",\n                \"homepage\": \"https://github.com/PHPSocialNetwork/phpfastcache/graphs/contributors\"\n            }\n    ],\n    \"provide\": {\n        \"psr/cache-implementation\": \"2.0|3.0\",\n        \"psr/simple-cache-implementation\": \"2.0|3.0\"\n    },\n    \"require\": {\n        \"php\": \">=8.0\",\n        \"psr/cache\": \"^2.0||^3.0\",\n        \"psr/simple-cache\": \"^2.0||^3.0\",\n        \"ext-mbstring\": \"*\",\n        \"ext-json\": \"*\"\n    },\n    \"require-dev\": {\n        \"league/climate\": \"^3.8\",\n        \"ext-gettext\": \"*\",\n        \"phpmd/phpmd\": \"@stable\",\n        \"squizlabs/php_codesniffer\": \"@stable\",\n        \"phpstan/phpstan\": \"@stable\",\n        \"jetbrains/phpstorm-stubs\": \"dev-master\",\n        \"phpfastcache/phpfastcache-devtools\": \"dev-master\"\n    },\n    \"suggest\": {\n        \"ext-apcu\": \"*\",\n        \"ext-curl\": \"*\",\n        \"ext-intl\": \"*\",\n        \"ext-memcached\": \"*\",\n        \"ext-cassandra\": \"*\",\n        \"ext-memcache\": \"*\",\n        \"ext-redis\": \"*\",\n        \"ext-sqlite\": \"*\",\n        \"ext-wincache\": \"*\",\n        \"ext-leveldb\": \"*\",\n        \"ext-couchbase\": \"^3.0\",\n        \"predis/predis\": \"^2.0\",\n        \"phpfastcache/phpssdb\": \"~1.1.0\",\n        \"phpfastcache/arangodb-extension\": \"^9.2\",\n        \"phpfastcache/couchbasev4-extension\": \"^9.2\",\n        \"phpfastcache/couchdb-extension\": \"^9.2\",\n        \"phpfastcache/dynamodb-extension\": \"^9.2\",\n        \"phpfastcache/firestore-extension\": \"^9.2\",\n        \"phpfastcache/mongodb-extension\": \"^9.2\",\n        \"phpfastcache/ravendb-extension\": \"^9.2\",\n        \"phpfastcache/solr-extension\": \"^9.2\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Phpfastcache\\\\\": \"lib/Phpfastcache/\"\n        }\n    },\n    \"scripts\": {\n        \"phpcs\": \"vendor/bin/phpcs lib/ --report=summary\",\n        \"phpcbf\": \"vendor/bin/phpcbf lib/ --report=summary\",\n        \"phpmd\": \"vendor/bin/phpmd lib/ ansi phpmd.xml\",\n        \"phpstan\": \"vendor/bin/phpstan analyse lib/ -l 6 -c phpstan.neon\",\n        \"quality\": [\"@phpcs\", \"@phpmd\", \"@phpstan\"],\n        \"tests\": [\n            \"php tests/RunTests.php\"\n        ]\n    },\n    \"support\": {\n        \"issues\": \"https://github.com/PHPSocialNetwork/phpfastcache/issues\",\n        \"wiki\": \"https://github.com/PHPSocialNetwork/phpfastcache/wiki\",\n        \"docs\": \"https://github.com/PHPSocialNetwork/phpfastcache/wiki\",\n        \"source\": \"https://github.com/PHPSocialNetwork/phpfastcache\",\n        \"security\": \"https://github.com/PHPSocialNetwork/phpfastcache/blob/master/SECURITY.md\"\n    },\n    \"funding\": [\n        {\n            \"type\": \"patreon\",\n            \"url\": \"https://www.patreon.com/geolim4\"\n        }\n    ]\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpcs.xml",
          "type": "blob",
          "size": 0.63671875,
          "content": "<?xml version=\"1.0\"?>\n<ruleset name=\"Phpfastcache Standards\">\n    <description>The Phpfastcache Coding Standards</description>\n\n    <arg name=\"colors\"/>\n    <arg value=\"p\"/>\n    <ini name=\"memory_limit\" value=\"256M\"/>\n    <rule ref=\"PSR12\"/>\n\n    <exclude-pattern>tests/*</exclude-pattern>\n    <exclude-pattern>bin/*</exclude-pattern>\n    <exclude-pattern>docs/*</exclude-pattern>\n    <exclude-pattern>vendor/*</exclude-pattern>\n\n    <rule ref=\"Generic.Files.LineLength\">\n        <properties>\n            <property name=\"lineLimit\" value=\"170\"/>\n            <property name=\"absoluteLineLimit\" value=\"170\"/>\n        </properties>\n    </rule>\n</ruleset>\n"
        },
        {
          "name": "phpmd.xml",
          "type": "blob",
          "size": 3.2861328125,
          "content": "<ruleset\n        name=\"PHPMD rules\"\n        xmlns=\"https://pmd.sf.net/ruleset/1.0.0\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://pmd.sf.net/ruleset/1.0.0 https://pmd.sf.net/ruleset_xml_schema.xsd\"\n        xsi:noNamespaceSchemaLocation=\"https://pmd.sf.net/ruleset_xml_schema.xsd\"\n>\n    <rule ref=\"rulesets/codesize.xml\">\n        <exclude name=\"CyclomaticComplexity\" />\n        <exclude name=\"NPathComplexity\" />\n        <exclude name=\"ExcessiveMethodLength\" />\n    </rule>\n    <rule ref=\"rulesets/controversial.xml\" />\n    <rule ref=\"rulesets/design.xml\">\n        <exclude name=\"DevelopmentCodeFragment\" />\n        <exclude name=\"CouplingBetweenObjects\" />\n        <exclude name=\"NumberOfChildren\" />\n    </rule>\n    <rule ref=\"rulesets/unusedcode.xml\">\n        <!-- Too many unfixable issues with PSR Interfaces and PHP 8 properties constructors -->\n        <exclude name=\"UnusedFormalParameter\" />\n    </rule>\n    <rule ref=\"rulesets/naming.xml\">\n        <exclude name=\"LongVariable\" />\n        <exclude name=\"ShortVariable\" />\n        <exclude name=\"ShortMethodName\" />\n        <exclude name=\"ShortClassName\" />\n        <exclude name=\"LongClassName\" />\n    </rule>\n\n    <!-- Unusedcode -->\n    <rule ref=\"rulesets/unusedcode.xml/UnusedLocalVariable\">\n        <properties>\n            <property name=\"exceptions\" value=\"\"/>\n        </properties>\n    </rule>\n\n    <!-- Naming -->\n    <rule ref=\"rulesets/naming.xml/LongVariable\">\n        <properties>\n            <property name=\"maximum\" value=\"30\" />\n        </properties>\n    </rule>\n    <rule ref=\"rulesets/naming.xml/ShortMethodName\">\n        <properties>\n            <property name=\"minimum\" value=\"3\" />\n            <property name=\"exceptions\" value=\"on\" />\n        </properties>\n    </rule>\n    <rule ref=\"rulesets/naming.xml/ShortClassName\">\n        <properties>\n            <property name=\"minimum\" value=\"3\" />\n        </properties>\n    </rule>\n    <rule ref=\"rulesets/naming.xml/LongClassName\">\n        <properties>\n            <property name=\"maximum\" value=\"40\" />\n            <property name=\"subtract-suffixes\" value=\"Exception\" />\n        </properties>\n    </rule>\n\n    <!-- Design -->\n    <rule ref=\"rulesets/design.xml/DevelopmentCodeFragment\">\n        <properties>\n            <property name=\"unwanted-functions\" value=\"var_dump,print_r,debug_zval_dump,debug_print_backtrace,dd,dump\" />\n            <property name=\"ignore-namespaces\" value=\"true\" />\n        </properties>\n    </rule>\n    <rule ref=\"rulesets/design.xml/CouplingBetweenObjects\">\n        <properties>\n            <property name=\"maximum\" value=\"20\" />\n        </properties>\n    </rule>\n    <rule ref=\"rulesets/design.xml/NumberOfChildren\">\n        <properties>\n            <property name=\"minimum\" value=\"25\" />\n        </properties>\n    </rule>\n\n    <!-- Codesize -->\n    <rule ref=\"rulesets/codesize.xml/CyclomaticComplexity\">\n        <properties>\n            <property name=\"reportLevel\" value=\"18\" />\n        </properties>\n    </rule>\n    <rule ref=\"rulesets/codesize.xml/ExcessiveMethodLength\">\n        <properties>\n            <property name=\"minimum\" value=\"150\" />\n        </properties>\n    </rule>\n    <rule ref=\"rulesets/codesize.xml/NPathComplexity\">\n        <properties>\n            <property name=\"minimum\" value=\"500\" />\n        </properties>\n    </rule>\n</ruleset>\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 1.09765625,
          "content": "###################################################\n# Complete PHPSTAN configuration for Travis CI\n###################################################\nparameters:\n    treatPhpDocTypesAsCertain: false\n    ignoreErrors:\n        # (Really) Annoying PHPDoc tag issues...\n        - '#PHPDoc tag @(.*)#'\n        # Phpstan is not able to know the magic of Ssdb __call() implementation\n        - '#Call to an undefined method phpssdb(.*)#'\n\n        # Phpstan not differencing couchbase and couchbase_v3 stubs from jetbrains/phpstorm-stubs\n        -\n            message: '#(Method|Class) Couchbase(.*)#'\n            path: lib/Phpfastcache/Drivers/Couchbasev3/Driver.php\n\n        # See https://github.com/phpstan/phpstan/issues/10315\n        -\n            message: '#Dead catch - Phpfastcache\\\\Exceptions\\\\PhpfastcacheUnsupportedMethodException is never thrown in the try block.#'\n            path: lib/Phpfastcache/Core/Pool/CacheItemPoolTrait.php\n        # See https://github.com/phpstan/phpstan/issues/10316\n        -\n            message: '#(.*)RedisCluster(.*)#'\n            path: lib/Phpfastcache/Drivers/Rediscluster/Driver.php\n"
        },
        {
          "name": "phpstan_lite.neon",
          "type": "blob",
          "size": 0.4296875,
          "content": "###################################################\n# Lite PHPSTAN configuration for Github CI\n# or any Phpfastcache contributing user\n###################################################\nparameters:\n    treatPhpDocTypesAsCertain: false\n    excludePaths:\n        - lib/Phpfastcache/Drivers/*/Driver.php\n        - lib/Phpfastcache/Drivers/*/Config.php\n    ignoreErrors:\n        - '#PHPDoc tag @(.*)#' # (Really) Annoying PHPDoc tag issues...\n"
        },
        {
          "name": "quality.bat",
          "type": "blob",
          "size": 0.21875,
          "content": "@echo off\nsetlocal\n\ncall vendor\\bin\\phpcbf lib/ --report=summary\ncall vendor\\bin\\phpcs lib/ --report=summary\ncall vendor\\bin\\phpmd lib/ ansi phpmd.xml\ncall vendor\\bin\\phpstan analyse lib/ -l 6 -c phpstan.neon 2>&1\n\nendlocal\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}