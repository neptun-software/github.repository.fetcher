{
  "metadata": {
    "timestamp": 1736712063412,
    "page": 609,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "brick/money",
      "stars": 1700,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.26171875,
          "content": ".gitattributes        export-ignore\n.gitignore            export-ignore\nimport-currencies.php export-ignore\nphpunit.xml           export-ignore\npsalm.xml             export-ignore\n.github/              export-ignore\ntests/                export-ignore\n\n*.php diff=php\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0380859375,
          "content": "/vendor\n/composer.lock\n/.phpunit.cache\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 8.6328125,
          "content": "# Changelog\n\n## [0.10.0](https://github.com/brick/money/releases/tag/0.10.0) - 2024-10-12\n\n💥 **ISO currency changes**\n\n- `ZWG` (Zimbabwe Gold) has been added\n- `ZWL` (Zimbabwean Dollar) has been removed\n- `SLL` (Sierra Leonean Leone) has been removed\n- The currency of Zimbabwe (`ZW`) has been changed to `ZWG` (Zimbabwe Gold)\n- The `SLL` currency has been removed from Sierra Leone (`SL`), which only has `SLE` now\n\n## [0.9.0](https://github.com/brick/money/releases/tag/0.9.0) - 2023-11-26\n\n💥 **Breaking changes**\n\n- Minimum PHP version is now 8.1\n- `PDOProviderConfiguration` no longer has getters, its properties are `public readonly`\n- `RoundingMode` from `brick/math` is now an enum, so:\n  - all methods accepting an `int` rounding mode now accept a `RoundingMode` instance instead\n  - this should be transparent to your application, as you'll be using the same constants such as `RoundingMode::UP`\n\n## [0.8.1](https://github.com/brick/money/releases/tag/0.8.1) - 2023-09-23\n\n👌 **Improvement**\n\n`Currency` now implements `JsonSerializable` ([#79](https://github.com/brick/money/pull/79)).\n\nThanks [@joelvh](https://github.com/joelvh)!\n\n## [0.8.0](https://github.com/brick/money/releases/tag/0.8.0) - 2023-01-16\n\n💥 **Breaking changes**\n\n- Minimum PHP version is now 8.0\n- Due to Croatia's adoption of the Euro on January 1st, 2023:\n  - the `HRK` currency (Kuna) has been removed from the ISO currency provider\n  - the `HR` country (Croatia) is now mapped to `EUR` (Euro)\n- `PDOProviderConfiguration` now has a proper constructor, and its properties are no longer public\n- `PDOProviderConfiguration` now throws exceptions in the constructor when configuration is invalid\n- All documented union types are now strongly typed:\n  - If you have a custom `ExchangeRateProvider` implementation, you will need to update your `getExchangeRate()` method signature\n  - If you were passing `Stringable` objects to `of()` or any of the methods internally calling `of()`, and have `strict_types` enabled, you will need to explicitly cast these objects to `string` first\n\n## [0.7.1](https://github.com/brick/money/releases/tag/0.7.1) - 2023-01-16\n\n👌 **Improvements**\n\n- Compatibility with `brick/math` version `0.11`\n\n## [0.7.0](https://github.com/brick/money/releases/tag/0.7.0) - 2022-10-06\n\n💥 **Breaking changes**\n\n- JSON extension is now required for PHP 7.4 (always available with PHP >= 8.0)\n- `AbstractMoney` is now officially sealed, extending it yourself is not supported\n\n✨ **New features**\n\n- `Money` and `RationalMoney` now implement `JsonSerializable`\n\n## [0.6.0](https://github.com/brick/money/releases/tag/0.6.0) - 2022-08-02\n\n💥 **Breaking changes**\n\n- Minimum PHP version is now 7.4\n- `AbstractMoney::getAmount()` now has a return type\n- `CurrencyConverter`'s constructor does not accept a default `$context` anymore\n- `CurrencyConverter::convert()` now requires the `$context` previously accepted by the constructor as third parameter\n- `Money::allocateWithRemainder()` now refuses to allocate a portion of the amount that cannot be spread over all ratios, and instead adds that amount to the remainder (#55)\n- `Money::splitWithRemainder()` now behaves like `allocateWithRemainder()`\n\n✨ **New ISO currencies**\n\n- `SLE` (Leone) in Sierra Leone (`SL`)\n\n👌 **Improvements**\n\n- Compatibility with `brick/math` version `0.10`\n\n## [0.5.2](https://github.com/brick/money/releases/tag/0.5.2) - 2021-04-03\n\n✨ **New methods**\n\n- `Money::allocateWithRemainder()`\n- `Money::splitWithRemainder()`\n\nThese methods perform like their `allocate()` and `split()` counterparts, but append the remainder at the end of the returned array instead of spreading it over the first monies.\n\nThanks @NCatalani!\n\n## [0.5.1](https://github.com/brick/money/releases/tag/0.5.1) - 2021-02-10\n\n👌 **Improvement**\n\n`BaseCurrencyProvider` now always returns a `BigNumber` for convenience (#37).\nThis is useful if you're using `BaseCurrencyProvider` on its own, not just in `CurrencyConverter`.\n\nThanks @rdarcy1!\n\n## [0.5.0](https://github.com/brick/money/releases/tag/0.5.0) - 2020-08-19\n\n👌 **Improvements**\n\n- compatibility with `brick/math` version `0.9`\n\n⚠️ **Caution**\n\nWhen using `brick/math` version `0.9`, the `Money` factory methods such as `of()` and `ofMinor()` now accept decimal numbers in the form `.123` and `123.`,  and do not throw an exception anymore in this case.\n\n## [0.4.5](https://github.com/brick/money/releases/tag/0.4.5) - 2020-05-31\n\n🐛 **Bug fix**\n\n`MoneyBag::getAmount()`, `add()` and `subtract()` would throw an exception when using a custom currency (#25).\n\n## [0.4.4](https://github.com/brick/money/releases/tag/0.4.4) - 2020-01-23\n\n✨ **New method**\n\n`AbstractMoney::isAmountAndCurrencyEqualTo()` compares a money to another. (#17)\n\nThis method is different from `isEqualTo()` in 2 aspects:\n\n- it only accepts another money, not a raw number;\n- **it returns `false` if the money is in another currency**, instead of throwing an exception.\n\n## [0.4.3](https://github.com/brick/money/releases/tag/0.4.3) - 2020-01-09\n\n🛠 **Improvements**\n\n- `MoneyBag::getAmount()` now accepts an ISO numeric currency code as well\n\n✨ **New methods**\n\n- `CurrencyConverter::convertToRational()` converts to a `RationalMoney` (#22)\n\n## [0.4.2](https://github.com/brick/money/releases/tag/0.4.2) - 2019-07-04\n\nPerformance improvement when calling `Money::formatTo()` many times for the same locale.\n\n## [0.4.1](https://github.com/brick/money/releases/tag/0.4.1) - 2018-10-17\n\nAdded support for `brick/math` version `0.8`.\n\n## [0.4.0](https://github.com/brick/money/releases/tag/0.4.0) - 2018-10-09\n\n**Breaking Changes**\n\n- Deprecated method `BigRational::toMoney()` has been removed, use `BigRational::to()` instead;\n- `BigRational::__toString()` now always outputs the amount in non-simplified rational form.\n\n**New methods**\n\n- `BigRational::simplified()` returns a copy of the money with the amount simplified.\n\n## [0.3.4](https://github.com/brick/money/releases/tag/0.3.4) - 2018-09-12\n\nISO currency list update.\n\n## [0.3.3](https://github.com/brick/money/releases/tag/0.3.3) - 2018-08-22\n\nISO currency list update.\n\n## [0.3.2](https://github.com/brick/money/releases/tag/0.3.2) - 2018-08-20\n\n`Money::formatTo()` can now format the amount as a whole number:\n\n```php\nformatTo(string $locale, bool $allowWholeNumber = false) : string\n```\n\nBy default, `formatTo()` always outputs all the fraction digits:\n\n```php\nMoney::of('23.5', 'USD')->formatTo('en_US'); // $23.50\nMoney::of(23, 'USD')->formatTo('en_US'); // $23.00\n```\n\nBut can now be allowed to return the whole number by passing `true` as a second argument:\n\n```php\nMoney::of('23.5', 'USD')->formatTo('en_US', true); // $23.50\nMoney::of(23, 'USD')->formatTo('en_US', true); // $23\n```\n\n*Note that this version now requires `brick/math` version `0.7.3`. This is not a BC break. If you've locked your composer.json to an earlier version, you will just not be able to install `brick/money` version `0.3.2`.*\n\n## [0.3.1](https://github.com/brick/money/releases/tag/0.3.1) - 2018-08-04\n\nISO currency list update.\n\n## [0.3.0](https://github.com/brick/money/releases/tag/0.3.0) - 2018-07-26\n\n**New methods:**\n\n- `CurrencyConversionException::getSourceCurrencyCode()`\n- `CurrencyConversionException::getTargetCurrencyCode()`\n\nThis allows to programmatically get the failing currency pair when an exchange rate is not available.\n\n**Breaking change:**\n\n- `CurrencyConversionException` constructor signature changed\n\nAlthough this is technically a breaking change and requires a version bump, your code is unlikely to be affected, unless you're creating `CurrencyConversionException` instances manually (you shouldn't).\n\n## [0.2.4](https://github.com/brick/money/releases/tag/0.2.4) - 2018-01-10\n\nISO currency list update.\n\n## [0.2.3](https://github.com/brick/money/releases/tag/0.2.3) - 2017-12-01\n\nBug fix: `Money::allocate()` incorrectly allocated negative monies.\n\n## [0.2.2](https://github.com/brick/money/releases/tag/0.2.2) - 2017-11-20\n\n`Money::formatTo()` now always respects the scale of the Money.\n\n## [0.2.1](https://github.com/brick/money/releases/tag/0.2.1) - 2017-11-05\n\nNew method: `CustomContext::getScale()`\n\n## [0.2.0](https://github.com/brick/money/releases/tag/0.2.0) - 2017-10-02\n\n- Minimum requirement is now PHP 7.1\n- `BigRational::toMoney()` has been deprecated; use `to()` instead. This is the result of a factorization of a common feature in Money and RationalMoney.\n\n## [0.1.1](https://github.com/brick/money/releases/tag/0.1.1) - 2017-12-08\n\nBackports from 0.2.x:\n\n- New method: `CustomContext::getScale()`\n- `Money::formatTo()` now always respects the scale of the Money\n- Bug fix: `Money::allocate()` incorrectly allocated negative monies\n\n## [0.1.0](https://github.com/brick/money/releases/tag/0.1.0) - 2017-10-02\n\nFirst beta release!\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0634765625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013-present Benjamin Morel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.1318359375,
          "content": "# Brick\\Money\n\n<img src=\"https://raw.githubusercontent.com/brick/brick/master/logo.png\" alt=\"\" align=\"left\" height=\"64\">\n\nA money and currency library for PHP.\n\n[![Build Status](https://github.com/brick/money/workflows/CI/badge.svg)](https://github.com/brick/money/actions)\n[![Coverage Status](https://coveralls.io/repos/github/brick/money/badge.svg?branch=master)](https://coveralls.io/github/brick/money?branch=master)\n[![Latest Stable Version](https://poser.pugx.org/brick/money/v/stable)](https://packagist.org/packages/brick/money)\n[![Total Downloads](https://poser.pugx.org/brick/money/downloads)](https://packagist.org/packages/brick/money)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](http://opensource.org/licenses/MIT)\n\n## Introduction\n\nWorking with financial data is a serious matter, and small rounding mistakes in an application may lead to serious consequences in real life. That's why floating-point arithmetic is not suited for monetary calculations.\n\nThis library is based on [brick/math](https://github.com/brick/math) and handles exact calculations on monies of any size.\n\n### Installation\n\nThis library is installable via [Composer](https://getcomposer.org/):\n\n```bash\ncomposer require brick/money\n```\n\n### Requirements\n\nThis library requires PHP 8.1 or later.\n\nFor PHP 8.0 compatibility, you can use version `0.8`. For PHP 7.4, you can use version `0.7`. For PHP 7.1, 7.2 & 7.3, you can use version `0.5`. Note that [these PHP versions are EOL](http://php.net/supported-versions.php) and not supported anymore. If you're still using one of these PHP versions, you should consider upgrading as soon as possible.\n\nAlthough not required, it is recommended that you **install the [GMP](http://php.net/manual/en/book.gmp.php) or [BCMath](http://php.net/manual/en/book.bc.php) extension** to speed up calculations.\n\n### Project status & release process\n\nWhile this library is still under development, it is well tested and should be stable enough to use in production environments.\n\nThe current releases are numbered `0.x.y`. When a non-breaking change is introduced (adding new methods, optimizing existing code, etc.), `y` is incremented.\n\n**When a breaking change is introduced, a new `0.x` version cycle is always started.**\n\nIt is therefore safe to lock your project to a given release cycle, such as `0.10.*`.\n\nIf you need to upgrade to a newer release cycle, check the [release history](https://github.com/brick/money/releases) for a list of changes introduced by each further `0.x.0` version.\n\n## Creating a Money\n\n### From a regular currency value\n\nTo create a Money, call the `of()` factory method:\n\n```php\nuse Brick\\Money\\Money;\n\n$money = Money::of(50, 'USD'); // USD 50.00\n$money = Money::of('19.9', 'USD'); // USD 19.90\n```\n\nIf the given amount does not fit in the currency's default number of decimal places (2 for `USD`), you can pass a `RoundingMode`:\n\n```php\n$money = Money::of('123.456', 'USD'); // RoundingNecessaryException\n$money = Money::of('123.456', 'USD', roundingMode: RoundingMode::UP); // USD 123.46\n```\n\n**Note that the rounding mode is only used once**, for the value provided in `of()`; it is not stored in the `Money` object, and any subsequent operation will still need to be passed a `RoundingMode` when necessary.\n\n### From minor units (cents)\n\nAlternatively, you can create a Money from a number of \"minor units\" (cents), using the `ofMinor()` method:\n\n```php\nuse Brick\\Money\\Money;\n\n$money = Money::ofMinor(1234, 'USD'); // USD 12.34\n```\n\n## Basic operations\n\nMoney is an immutable class: its value never changes, so it can be safely passed around. All operations on a Money therefore return a new instance:\n\n```php\nuse Brick\\Money\\Money;\n\n$money = Money::of(50, 'USD');\n\necho $money->plus('4.99'); // USD 54.99\necho $money->minus(1); // USD 49.00\necho $money->multipliedBy('1.999'); // USD 99.95\necho $money->dividedBy(4); // USD 12.50\n```\n\nYou can add and subtract Money instances as well:\n\n```php\nuse Brick\\Money\\Money;\n\n$cost = Money::of(25, 'USD');\n$shipping = Money::of('4.99', 'USD');\n$discount = Money::of('2.50', 'USD');\n\necho $cost->plus($shipping)->minus($discount); // USD 27.49\n```\n\nIf the two Money instances are not of the same currency, an exception is thrown:\n\n```php\nuse Brick\\Money\\Money;\n\n$a = Money::of(1, 'USD');\n$b = Money::of(1, 'EUR');\n\n$a->plus($b); // MoneyMismatchException\n```\n\nIf the result needs rounding, a [rounding mode](https://github.com/brick/math/blob/0.12.0/src/RoundingMode.php) must be passed as second parameter, or an exception is thrown:\n\n```php\nuse Brick\\Money\\Money;\nuse Brick\\Math\\RoundingMode;\n\n$money = Money::of(50, 'USD');\n\n$money->plus('0.999'); // RoundingNecessaryException\n$money->plus('0.999', RoundingMode::DOWN); // USD 50.99\n\n$money->minus('0.999'); // RoundingNecessaryException\n$money->minus('0.999', RoundingMode::UP); // USD 49.01\n\n$money->multipliedBy('1.2345'); // RoundingNecessaryException\n$money->multipliedBy('1.2345', RoundingMode::DOWN); // USD 61.72\n\n$money->dividedBy(3); // RoundingNecessaryException\n$money->dividedBy(3, RoundingMode::UP); // USD 16.67\n```\n\n## Money contexts\n\nBy default, monies have the official scale for the currency, as defined by the [ISO 4217 standard](https://www.currency-iso.org/) (for example, EUR and USD have 2 decimal places, while JPY has 0) and increment by steps of 1 minor unit (cent); they internally use what is called the `DefaultContext`. You can change this behaviour by providing a `Context` instance. All operations on Money return another Money with the same context. Each context targets a particular use case:\n\n### Cash rounding\n\nSome currencies do not allow the same increments for cash and cashless payments. For example, `CHF` (Swiss Franc) has 2 fraction digits and allows increments of 0.01 CHF, but Switzerland does not have coins of less than 5 cents, or 0.05 CHF.\n\nYou can deal with such monies using `CashContext`:\n\n```php\nuse Brick\\Money\\Money;\nuse Brick\\Money\\Context\\CashContext;\nuse Brick\\Math\\RoundingMode;\n\n$money = Money::of(10, 'CHF', new CashContext(step: 5)); // CHF 10.00\n$money->dividedBy(3, RoundingMode::DOWN); // CHF 3.30\n$money->dividedBy(3, RoundingMode::UP); // CHF 3.35\n```\n\n### Custom scale\n\nYou can use custom scale monies by providing a `CustomContext`:\n\n```php\nuse Brick\\Money\\Money;\nuse Brick\\Money\\Context\\CustomContext;\nuse Brick\\Math\\RoundingMode;\n\n$money = Money::of(10, 'USD', new CustomContext(scale: 4)); // USD 10.0000\n$money->dividedBy(7, RoundingMode::UP); // USD 1.4286\n```\n\n### Auto scale\n\nIf you need monies that adjust their scale to fit the operation result, then `AutoContext` is for you:\n\n```php\nuse Brick\\Money\\Money;\nuse Brick\\Money\\Context\\AutoContext;\n\n$money = Money::of('1.10', 'USD', new AutoContext()); // USD 1.1\n$money->multipliedBy('2.5'); // USD 2.75\n$money->dividedBy(8); // USD 0.1375\n```\n\nNote that it is not advised to use `AutoContext` to represent an intermediate calculation result: in particular, it cannot represent the result of all divisions, as some of them may lead to an infinite repeating decimal, which would throw an exception. For these use cases, `RationalMoney` is what you need. Head on to the next section!\n\n## Advanced calculations\n\nYou may occasionally need to chain several operations on a Money, and only apply a rounding mode on the very last step; if you applied a rounding mode on every single operation, you might end up with a different result. This is where `RationalMoney` comes into play. This class internally stores the amount as a rational number (a fraction). You can create a `RationalMoney` from a `Money`, and conversely:\n\n```php\nuse Brick\\Money\\Money;\nuse Brick\\Math\\RoundingMode;\n\n$money = Money::of('9.5', 'EUR') // EUR 9.50\n  ->toRational() // EUR 950/100\n  ->dividedBy(3) // EUR 950/300\n  ->plus('17.795') // EUR 6288500/300000\n  ->multipliedBy('1.196') // EUR 7521046000/300000000\n  ->to($money->getContext(), RoundingMode::DOWN) // EUR 25.07\n```\n\nAs you can see, the intermediate results are represented as fractions, and no rounding is ever performed. The final `to()` method converts it to a `Money`, applying a context and a rounding mode if necessary. Most of the time you want the result in the same context as the original Money, which is what the example above does. But you can really apply any context:\n\n```php\n...\n  ->to(new CustomContext(scale: 8), RoundingMode::UP); // EUR 25.07015334\n```\n\nNote: as you can see in the example above, the numbers in the fractions can quickly get very large.\nThis is usually not a problem—there is no hard limit on the number of digits involved in the calculations—but if necessary,\nyou can simplify the fraction at any time, without affecting the actual monetary value:\n\n```php\n...\n  ->multipliedBy('1.196') // EUR 7521046000/300000000\n  ->simplified() // EUR 3760523/150000\n```\n\n## Money allocation\n\nYou can easily split a Money into a number of parts:\n\n```php\nuse Brick\\Money\\Money;\n\n$money = Money::of(100, 'USD');\n[$a, $b, $c] = $money->split(3); // USD 33.34, USD 33.33, USD 33.33\n```\n\nYou can also allocate a Money according to a list of ratios. Say you want to distribute a profit of 987.65 CHF to 3 shareholders, having shares of `48%`, `41%` and `11%` of a company:\n\n```php\nuse Brick\\Money\\Money;\n\n$profit = Money::of('987.65', 'CHF');\n[$a, $b, $c] = $profit->allocate(48, 41, 11); // CHF 474.08, CHF 404.93, CHF 108.64\n```\n\nIt plays well with cash roundings, too:\n\n```php\nuse Brick\\Money\\Money;\nuse Brick\\Money\\Context\\CashContext;\n\n$profit = Money::of('987.65', 'CHF', new CashContext(step: 5));\n[$a, $b, $c] = $profit->allocate(48, 41, 11); // CHF 474.10, CHF 404.95, CHF 108.60\n```\n\nNote that the ratios can be any (non-negative) integer values and *do not need to add up to 100*.\n\nWhen the allocation yields a remainder, both `split()` and `allocate()` spread it on the first monies in the list, until the total adds up to the original Money. This is the algorithm suggested by Martin Fowler in his book [Patterns of Enterprise Application Architecture](https://martinfowler.com/books/eaa.html). You can see that in the first example, where the first money gets `33.34` dollars while the others get `33.33` dollars.\n\n## Money bags (mixed currencies)\n\nYou may sometimes need to add monies in different currencies together. `MoneyBag` comes in handy for this:\n\n```php\nuse Brick\\Money\\Money;\nuse Brick\\Money\\MoneyBag;\n\n$eur = Money::of('12.34', 'EUR');\n$jpy = Money::of(123, 'JPY');\n\n$moneyBag = new MoneyBag();\n$moneyBag->add($eur);\n$moneyBag->add($jpy);\n```\n\nYou can add any kind of money to a MoneyBag: a `Money`, a `RationalMoney`, or even another `MoneyBag`.\n\nNote that unlike other classes, **`MoneyBag` is mutable**: its value changes when you call `add()` or `subtract()`.\n\nWhat can you do with a MoneyBag? Well, you can convert it to a Money in the currency of your choice, using a `CurrencyConverter`. Keep reading!\n\n## Currency conversion\n\nThis library ships with a `CurrencyConverter` that can convert any kind of money (`Money`, `RationalMoney` or `MoneyBag`) to a Money in another currency:\n\n```php\nuse Brick\\Money\\CurrencyConverter;\n\n$exchangeRateProvider = ...;\n$converter = new CurrencyConverter($exchangeRateProvider); // optionally provide a Context here\n\n$money = Money::of('50', 'USD');\n$converter->convert($money, 'EUR', roundingMode: RoundingMode::DOWN);\n```\n\nThe converter performs the most precise calculation possible, internally representing the result as a rational number until the very last step.\n\nTo use the currency converter, you need an `ExchangeRateProvider`. Several implementations are provided, among which:\n\n### ConfigurableProvider \n\nThis provider starts with a blank state, and allows you to add exchange rates manually:\n\n```php\nuse Brick\\Money\\ExchangeRateProvider\\ConfigurableProvider;\n\n$provider = new ConfigurableProvider();\n$provider->setExchangeRate('EUR', 'USD', '1.0987');\n$provider->setExchangeRate('USD', 'EUR', '0.9123');\n```\n\n### PDOProvider\n\nThis provider reads exchange rates from a database table:\n\n```php\nuse Brick\\Money\\ExchangeRateProvider\\PDOProvider;\nuse Brick\\Money\\ExchangeRateProvider\\PDOProviderConfiguration;\n\n$pdo = new \\PDO(...);\n\n$configuration = new PDOProviderConfiguration(\n    tableName: 'exchange_rates',\n    exchangeRateColumnName: 'exchange_rate',\n    sourceCurrencyColumnName: 'source_currency_code',\n    targetCurrencyColumnName: 'target_currency_code',\n);\n\n$provider = new PDOProvider($pdo, $configuration);\n```\n\nPDOProvider also supports fixed source or target currency, and dynamic `WHERE` conditions. Check the [PDOProviderConfiguration](https://github.com/brick/money/blob/0.10.0/src/ExchangeRateProvider/PDOProviderConfiguration.php) class for more information.\n\n### BaseCurrencyProvider\n\nThis provider builds on top of another exchange rate provider, for the quite common case where all your available exchange rates are relative to a single currency. For example, the [exchange rates](https://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml) provided by the European Central Bank are all relative to EUR. You can use them directly to convert EUR to USD, but not USD to EUR, let alone USD to GBP.\n\nThis provider will combine exchange rates to get the expected result:\n\n```php\nuse Brick\\Money\\ExchangeRateProvider\\ConfigurableProvider;\nuse Brick\\Money\\ExchangeRateProvider\\BaseCurrencyProvider;\n\n$provider = new ConfigurableProvider();\n$provider->setExchangeRate('EUR', 'USD', '1.1');\n$provider->setExchangeRate('EUR', 'GBP', '0.9');\n\n$provider = new BaseCurrencyProvider($provider, 'EUR');\n$provider->getExchangeRate('EUR', 'USD'); // 1.1\n$provider->getExchangeRate('USD', 'EUR'); // 10/11\n$provider->getExchangeRate('GBP', 'USD'); // 11/9\n```\n\nNotice that exchange rate providers can return rational numbers!\n\n### Write your own provider\n\nWriting your own provider is easy: the `ExchangeRateProvider` interface has just one method, `getExchangeRate()`, that takes the currency codes and returns a number.\n\n## Custom currencies\n\nMoney supports ISO 4217 currencies by default. You can also use custom currencies by creating a `Currency` instance. Let's create a Bitcoin currency:\n\n```php\nuse Brick\\Money\\Currency;\nuse Brick\\Money\\Money;\n\n$bitcoin = new Currency(\n    'XBT',     // currency code\n    0,         // numeric currency code, useful when storing monies in a database; set to 0 if unused\n    'Bitcoin', // currency name\n    8          // default scale\n);\n```\n\nYou can now use this Currency instead of a currency code:\n\n```php\n$money = Money::of('0.123', $bitcoin); // XBT 0.12300000\n```\n\n## Formatting\n\n**Formatting requires the [intl extension](http://php.net/manual/en/book.intl.php).**\n\nMoney objects can be formatted according to a given locale:\n\n```php\n$money = Money::of(5000, 'USD');\necho $money->formatTo('en_US'); // $5,000.00\necho $money->formatTo('fr_FR'); // 5 000,00 $US\n```\n\nAlternatively, you can format Money objects with your own instance of [NumberFormatter](http://php.net/manual/en/class.numberformatter.php), which gives you room for customization:\n\n```php\n$formatter = new \\NumberFormatter('en_US', \\NumberFormatter::CURRENCY);\n$formatter->setSymbol(\\NumberFormatter::CURRENCY_SYMBOL, 'US$');\n$formatter->setSymbol(\\NumberFormatter::MONETARY_GROUPING_SEPARATOR_SYMBOL, '·');\n$formatter->setAttribute(\\NumberFormatter::MIN_FRACTION_DIGITS, 2);\n\n$money = Money::of(5000, 'USD');\necho $money->formatWith($formatter); // US$5·000.00\n```\n\n*Important note: because formatting is performed using `NumberFormatter`, the amount is converted to floating point in the process; so discrepancies can appear when formatting very large monetary values.*\n\n## Storing Money objects in the database\n\n### Persisting the amount\n\n- **As an integer**: in many applications, monies are only ever used with their default scale (e.g. 2 decimal places for `USD`, 0 for `JPY`). In this case, the best practice is to store minor units (cents) as an integer field:\n  \n  ```php\n  $integerAmount = $money->getMinorAmount()->toInt();\n  ```\n  \n  And later retrieve it as:\n  \n  ```php\n  Money::ofMinor($integerAmount, $currencyCode);\n  ```\n  \n  This approach works well with all currencies, without having to worry about the scale. You only have to worry about not overflowing an integer (which would throw an exception), but this is unlikely to happen unless you're dealing with huge amounts of money.\n  \n- **As a decimal**: for most other cases, storing the amount string as a decimal type is advised:\n  \n  ```php\n  $decimalAmount = (string) $money->getAmount();\n  ```\n  \n  And later retrieve it as:\n  \n  ```php\n  Money::of($decimalAmount, $currencyCode);\n  ```\n\n### Persisting the currency\n\n- **As a string**: if you only deal with ISO currencies, or custom currencies having a 3-letter currency code, you can store the currency in a `CHAR(3)`. Otherwise, you'll most likely need a `VARCHAR`. You may also use an `ENUM` if your application uses a fixed list of currencies.\n  \n  ```php\n  $currencyCode = $money->getCurrency()->getCurrencyCode();\n  ```\n  \n  When retrieving the currency: you can use ISO currency codes directly in `Money::of()` and `Money::ofMinor()`. For custom currencies, you'll need to convert them to `Currency` instances first.\n  \n- **As an integer**: if you only deal with ISO currencies, or custom currencies with a numeric code, you may store the currency code as an integer:\n  \n  ```php\n  $numericCode = $money->getCurrency()->getNumericCode();\n  ```\n\n  When retrieving the currency: you can use numeric codes of ISO currencies directly in `Money::of()` and `Money::ofMinor()`. For custom currencies, you'll need to convert them to `Currency` instances first.\n  \n- **Hardcoded**: if your application only ever deals with one currency, you may very well hardcode the currency code and not store it in your database at all.\n\n### Using an ORM\n\nIf you're using an ORM such as Doctrine, it is advised to store the amount and currency separately, and perform conversion in the getters/setters:\n\n  ```php\n  class Entity\n  {\n      private int $price;\n      private string $currencyCode;\n\n      public function getPrice() : Money\n      {\n          return Money::ofMinor($this->price, $this->currencyCode);\n      }\n\n      public function setPrice(Money $price) : void\n      {\n          $this->price = $price->getMinorAmount()->toInt();\n          $this->currencyCode = $price->getCurrency()->getCurrencyCode();\n      }\n  }\n  ```\n\n## FAQ\n\n> How does this project compare with [moneyphp/money](https://github.com/moneyphp/money)?\n\nPlease see [this discussion](https://github.com/brick/money/issues/28).\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.818359375,
          "content": "{\n    \"name\": \"brick/money\",\n    \"description\": \"Money and currency library\",\n    \"type\": \"library\",\n    \"keywords\": [\n        \"Brick\",\n        \"Money\",\n        \"Currency\"\n    ],\n    \"license\": \"MIT\",\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"brick/math\": \"~0.12.0\"\n    },\n    \"require-dev\": {\n        \"ext-dom\": \"*\",\n        \"ext-pdo\": \"*\",\n        \"brick/varexporter\": \"~0.4.0\",\n        \"php-coveralls/php-coveralls\": \"^2.2\",\n        \"phpunit/phpunit\": \"^10.1\",\n        \"vimeo/psalm\": \"5.26.1\"\n    },\n    \"suggest\": {\n        \"ext-intl\": \"Required to format Money objects\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Brick\\\\Money\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Brick\\\\Money\\\\Tests\\\\\": \"tests/\"\n        }\n    },\n    \"config\": {\n        \"sort-packages\": true\n    }\n}\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "import-currencies.php",
          "type": "blob",
          "size": 12.240234375,
          "content": "<?php\n\n/**\n * This script creates an array of currencies from a trusted source.\n * The result of the script is exported in PHP format to be used by the library at runtime.\n *\n * This script is meant to be run by project maintainers, on a regular basis.\n */\n\ndeclare(strict_types=1);\n\nuse Brick\\VarExporter\\VarExporter;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n/**\n * Country names are present in the ISO 4217 currency file, but not country codes.\n * This list maps country names to ISO 3166 country codes. It must be up to date or this script will error.\n * If country names present in the ISO currency file do not map to an actual country as defined by ISO 3166,\n * for example \"EUROPEAN UNION\", the corresponding value must be NULL.\n */\n$countryCodes= [\n    'AFGHANISTAN' => 'AF',\n    'ÅLAND ISLANDS' => 'AX',\n    'ALBANIA' => 'AL',\n    'ALGERIA' => 'DZ',\n    'AMERICAN SAMOA' => 'AS',\n    'ANDORRA' => 'AD',\n    'ANGOLA' => 'AO',\n    'ANGUILLA' => 'AI',\n    'ANTARCTICA' => 'AQ',\n    'ANTIGUA AND BARBUDA' => 'AG',\n    'ARGENTINA' => 'AR',\n    'ARMENIA' => 'AM',\n    'ARUBA' => 'AW',\n    'AUSTRALIA' => 'AU',\n    'AUSTRIA' => 'AT',\n    'AZERBAIJAN' => 'AZ',\n    'BAHAMAS (THE)' => 'BS',\n    'BAHRAIN' => 'BH',\n    'BANGLADESH' => 'BD',\n    'BARBADOS' => 'BB',\n    'BELARUS' => 'BY',\n    'BELGIUM' => 'BE',\n    'BELIZE' => 'BZ',\n    'BENIN' => 'BJ',\n    'BERMUDA' => 'BM',\n    'BHUTAN' => 'BT',\n    'BOLIVIA (PLURINATIONAL STATE OF)' => 'BO',\n    'BONAIRE, SINT EUSTATIUS AND SABA' => 'BQ',\n    'BOSNIA AND HERZEGOVINA' => 'BA',\n    'BOTSWANA' => 'BW',\n    'BOUVET ISLAND' => 'BV',\n    'BRAZIL' => 'BR',\n    'BRITISH INDIAN OCEAN TERRITORY (THE)' => 'IO',\n    'BRUNEI DARUSSALAM' => 'BN',\n    'BULGARIA' => 'BG',\n    'BURKINA FASO' => 'BF',\n    'BURUNDI' => 'BI',\n    'CABO VERDE' => 'CV',\n    'CAMBODIA' => 'KH',\n    'CAMEROON' => 'CM',\n    'CANADA' => 'CA',\n    'CAYMAN ISLANDS (THE)' => 'KY',\n    'CENTRAL AFRICAN REPUBLIC (THE)' => 'CF',\n    'CHAD' => 'TD',\n    'CHILE' => 'CL',\n    'CHINA' => 'CN',\n    'CHRISTMAS ISLAND' => 'CX',\n    'COCOS (KEELING) ISLANDS (THE)' => 'CC',\n    'COLOMBIA' => 'CO',\n    'COMOROS (THE)' => 'KM',\n    'CONGO (THE DEMOCRATIC REPUBLIC OF THE)' => 'CD',\n    'CONGO (THE)' => 'CG',\n    'COOK ISLANDS (THE)' => 'CK',\n    'COSTA RICA' => 'CR',\n    'CÔTE D\\'IVOIRE' => 'CI',\n    'CROATIA' => 'HR',\n    'CUBA' => 'CU',\n    'CURAÇAO' => 'CW',\n    'CYPRUS' => 'CY',\n    'CZECHIA' => 'CZ',\n    'DENMARK' => 'DK',\n    'DJIBOUTI' => 'DJ',\n    'DOMINICA' => 'DM',\n    'DOMINICAN REPUBLIC (THE)' => 'DO',\n    'ECUADOR' => 'EC',\n    'EGYPT' => 'EG',\n    'EL SALVADOR' => 'SV',\n    'EQUATORIAL GUINEA' => 'GQ',\n    'ERITREA' => 'ER',\n    'ESTONIA' => 'EE',\n    'ESWATINI' => 'SZ',\n    'ETHIOPIA' => 'ET',\n    'EUROPEAN UNION' => null,\n    'FALKLAND ISLANDS (THE) [MALVINAS]' => 'FK',\n    'FAROE ISLANDS (THE)' => 'FO',\n    'FIJI' => 'FJ',\n    'FINLAND' => 'FI',\n    'FRANCE' => 'FR',\n    'FRENCH GUIANA' => 'GF',\n    'FRENCH POLYNESIA' => 'PF',\n    'FRENCH SOUTHERN TERRITORIES (THE)' => 'TF',\n    'GABON' => 'GA',\n    'GAMBIA (THE)' => 'GM',\n    'GEORGIA' => 'GE',\n    'GERMANY' => 'DE',\n    'GHANA' => 'GH',\n    'GIBRALTAR' => 'GI',\n    'GREECE' => 'GR',\n    'GREENLAND' => 'GL',\n    'GRENADA' => 'GD',\n    'GUADELOUPE' => 'GP',\n    'GUAM' => 'GU',\n    'GUATEMALA' => 'GT',\n    'GUERNSEY' => 'GG',\n    'GUINEA' => 'GN',\n    'GUINEA-BISSAU' => 'GW',\n    'GUYANA' => 'GY',\n    'HAITI' => 'HT',\n    'HEARD ISLAND AND McDONALD ISLANDS' => 'HM',\n    'HOLY SEE (THE)' => 'VA',\n    'HONDURAS' => 'HN',\n    'HONG KONG' => 'HK',\n    'HUNGARY' => 'HU',\n    'ICELAND' => 'IS',\n    'INDIA' => 'IN',\n    'INDONESIA' => 'ID',\n    'IRAN (ISLAMIC REPUBLIC OF)' => 'IR',\n    'IRAQ' => 'IQ',\n    'IRELAND' => 'IE',\n    'ISLE OF MAN' => 'IM',\n    'ISRAEL' => 'IL',\n    'ITALY' => 'IT',\n    'JAMAICA' => 'JM',\n    'JAPAN' => 'JP',\n    'JERSEY' => 'JE',\n    'JORDAN' => 'JO',\n    'KAZAKHSTAN' => 'KZ',\n    'KENYA' => 'KE',\n    'KIRIBATI' => 'KI',\n    'KOREA (THE DEMOCRATIC PEOPLE’S REPUBLIC OF)' => 'KP',\n    'KOREA (THE REPUBLIC OF)' => 'KR',\n    'KUWAIT' => 'KW',\n    'KYRGYZSTAN' => 'KG',\n    'LAO PEOPLE’S DEMOCRATIC REPUBLIC (THE)' => 'LA',\n    'LATVIA' => 'LV',\n    'LEBANON' => 'LB',\n    'LESOTHO' => 'LS',\n    'LIBERIA' => 'LR',\n    'LIBYA' => 'LY',\n    'LIECHTENSTEIN' => 'LI',\n    'LITHUANIA' => 'LT',\n    'LUXEMBOURG' => 'LU',\n    'MACAO' => 'MO',\n    'MADAGASCAR' => 'MG',\n    'MALAWI' => 'MW',\n    'MALAYSIA' => 'MY',\n    'MALDIVES' => 'MV',\n    'MALI' => 'ML',\n    'MALTA' => 'MT',\n    'MARSHALL ISLANDS (THE)' => 'MH',\n    'MARTINIQUE' => 'MQ',\n    'MAURITANIA' => 'MR',\n    'MAURITIUS' => 'MU',\n    'MAYOTTE' => 'YT',\n    'MEXICO' => 'MX',\n    'MICRONESIA (FEDERATED STATES OF)' => 'FM',\n    'MOLDOVA (THE REPUBLIC OF)' => 'MD',\n    'MONACO' => 'MC',\n    'MONGOLIA' => 'MN',\n    'MONTENEGRO' => 'ME',\n    'MONTSERRAT' => 'MS',\n    'MOROCCO' => 'MA',\n    'MOZAMBIQUE' => 'MZ',\n    'MYANMAR' => 'MM',\n    'NAMIBIA' => 'NA',\n    'NAURU' => 'NR',\n    'NEPAL' => 'NP',\n    'NETHERLANDS (THE)' => 'NL',\n    'NEW CALEDONIA' => 'NC',\n    'NEW ZEALAND' => 'NZ',\n    'NICARAGUA' => 'NI',\n    'NIGER (THE)' => 'NE',\n    'NIGERIA' => 'NG',\n    'NIUE' => 'NU',\n    'NORFOLK ISLAND' => 'NF',\n    'NORTH MACEDONIA' => 'MK',\n    'NORTHERN MARIANA ISLANDS (THE)' => 'MP',\n    'NORWAY' => 'NO',\n    'OMAN' => 'OM',\n    'PAKISTAN' => 'PK',\n    'PALAU' => 'PW',\n    'PALESTINE, STATE OF' => 'PS',\n    'PANAMA' => 'PA',\n    'PAPUA NEW GUINEA' => 'PG',\n    'PARAGUAY' => 'PY',\n    'PERU' => 'PE',\n    'PHILIPPINES (THE)' => 'PH',\n    'PITCAIRN' => 'PN',\n    'POLAND' => 'PL',\n    'PORTUGAL' => 'PT',\n    'PUERTO RICO' => 'PR',\n    'QATAR' => 'QA',\n    'RÉUNION' => 'RE',\n    'ROMANIA' => 'RO',\n    'RUSSIAN FEDERATION (THE)' => 'RU',\n    'RWANDA' => 'RW',\n    'SAINT BARTHÉLEMY' => 'BL',\n    'SAINT HELENA, ASCENSION AND TRISTAN DA CUNHA' => 'SH',\n    'SAINT KITTS AND NEVIS' => 'KN',\n    'SAINT LUCIA' => 'LC',\n    'SAINT MARTIN (FRENCH PART)' => 'MF',\n    'SAINT PIERRE AND MIQUELON' => 'PM',\n    'SAINT VINCENT AND THE GRENADINES' => 'VC',\n    'SAMOA' => 'WS',\n    'SAN MARINO' => 'SM',\n    'SAO TOME AND PRINCIPE' => 'ST',\n    'SAUDI ARABIA' => 'SA',\n    'SENEGAL' => 'SN',\n    'SERBIA' => 'RS',\n    'SEYCHELLES' => 'SC',\n    'SIERRA LEONE' => 'SL',\n    'SINGAPORE' => 'SG',\n    'SINT MAARTEN (DUTCH PART)' => 'SX',\n    'SLOVAKIA' => 'SK',\n    'SLOVENIA' => 'SI',\n    'SOLOMON ISLANDS' => 'SB',\n    'SOMALIA' => 'SO',\n    'SOUTH AFRICA' => 'ZA',\n    'SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS' => 'GS',\n    'SOUTH SUDAN' => 'SS',\n    'SPAIN' => 'ES',\n    'SRI LANKA' => 'LK',\n    'SUDAN (THE)' => 'SD',\n    'SURINAME' => 'SR',\n    'SVALBARD AND JAN MAYEN' => 'SJ',\n    'SWEDEN' => 'SE',\n    'SWITZERLAND' => 'CH',\n    'SYRIAN ARAB REPUBLIC' => 'SY',\n    'TAIWAN (PROVINCE OF CHINA)' => 'TW',\n    'TAJIKISTAN' => 'TJ',\n    'TANZANIA, UNITED REPUBLIC OF' => 'TZ',\n    'THAILAND' => 'TH',\n    'TIMOR-LESTE' => 'TL',\n    'TOGO' => 'TG',\n    'TOKELAU' => 'TK',\n    'TONGA' => 'TO',\n    'TRINIDAD AND TOBAGO' => 'TT',\n    'TUNISIA' => 'TN',\n    'TÜRKİYE' => 'TR',\n    'TURKMENISTAN' => 'TM',\n    'TURKS AND CAICOS ISLANDS (THE)' => 'TC',\n    'TUVALU' => 'TV',\n    'UGANDA' => 'UG',\n    'UKRAINE' => 'UA',\n    'UNITED ARAB EMIRATES (THE)' => 'AE',\n    'UNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND (THE)' => 'GB',\n    'UNITED STATES MINOR OUTLYING ISLANDS (THE)' => 'UM',\n    'UNITED STATES OF AMERICA (THE)' => 'US',\n    'URUGUAY' => 'UY',\n    'UZBEKISTAN' => 'UZ',\n    'VANUATU' => 'VU',\n    'VENEZUELA (BOLIVARIAN REPUBLIC OF)' => 'VE',\n    'VIET NAM' => 'VN',\n    'VIRGIN ISLANDS (BRITISH)' => 'VG',\n    'VIRGIN ISLANDS (U.S.)' => 'VI',\n    'WALLIS AND FUTUNA' => 'WF',\n    'WESTERN SAHARA' => 'EH',\n    'YEMEN' => 'YE',\n    'ZAMBIA' => 'ZM',\n    'ZIMBABWE' => 'ZW',\n];\n\n$data = file_get_contents('https://www.six-group.com/dam/download/financial-information/data-center/iso-currrency/lists/list-one.xml');\n\n$document = new DOMDocument();\n$success = $document->loadXML($data);\n\nif (! $success) {\n    echo \"Failed to load XML file.\\n\";\n    exit(1);\n}\n\n$countries = $document->getElementsByTagName('CcyNtry');\n$currencies = [];\n\n$numericToCurrency = [];\n$countryToCurrency = [];\n$countryNamesFound = [];\n\nforeach ($countries as $country) {\n    /** @var DOMElement $country */\n    $countryName = getDomElementString($country, 'CtryNm');\n    $currencyName = getDomElementString($country, 'CcyNm');\n    $currencyCode = getDomElementString($country, 'Ccy');\n    $numericCode = getDomElementString($country, 'CcyNbr');\n    $minorUnits = getDomElementString($country, 'CcyMnrUnts');\n\n    $countryNamesFound[$countryName] = true;\n\n    $isFund = $country->getElementsByTagName('CcyNm')->item(0)->getAttribute('IsFund') === 'true';\n\n    if ($currencyName === null || $currencyCode === null && $numericCode === null && $minorUnits == null) {\n        continue;\n    }\n\n    if ($minorUnits === 'N.A.') {\n        continue;\n    }\n\n    if (! array_key_exists($countryName, $countryCodes)) {\n        throw new \\RuntimeException('No country code found for ' . $countryName);\n    }\n\n    $countryCode = $countryCodes[$countryName];\n\n    if ($countryCode !== null) {\n        if (! $isFund) {\n            $countryToCurrency[$countryCode][] = $currencyCode;\n        }\n    }\n\n    $currencyName = checkCurrencyName($currencyName);\n    $currencyCode = checkCurrencyCode($currencyCode);\n    $numericCode = checkNumericCode($numericCode);\n    $minorUnits = checkMinorUnits($minorUnits);\n\n    $value = [$currencyCode, $numericCode, $currencyName, $minorUnits];\n\n    if (isset($currencies[$currencyCode])) {\n        if ($currencies[$currencyCode] !== $value) {\n            throw new \\RuntimeException('Inconsistent values found for currency code ' . $currencyCode);\n        }\n    } else {\n        $currencies[$currencyCode] = $value;\n        $numericToCurrency[$numericCode] = $currencyCode;\n    }\n}\n\nforeach ($countryCodes as $countryName => $countryCode) {\n    if (! isset($countryNamesFound[$countryName])) {\n        echo 'Warning: ' . $countryName . ' not found in ISO file.', PHP_EOL;\n    }\n}\n\nksort($currencies);\nksort($numericToCurrency);\nksort($countryToCurrency);\n\nexportToFile(__DIR__ . '/data/iso-currencies.php', $currencies);\nexportToFile(__DIR__ . '/data/numeric-to-currency.php', $numericToCurrency);\nexportToFile(__DIR__ . '/data/country-to-currency.php', $countryToCurrency);\n\nprintf('Exported %d currencies in %d countries.' . PHP_EOL, count($currencies), count($countryToCurrency));\n\n/**\n * @param string $file\n * @param array  $data\n *\n * @return void\n */\nfunction exportToFile(string $file, array $data) : void\n{\n    $data = '<?php ' . VarExporter::export($data, VarExporter::ADD_RETURN | VarExporter::INLINE_NUMERIC_SCALAR_ARRAY);\n\n    if (file_get_contents($file) === $data) {\n        printf(\"%s: no change\\n\", $file);\n    } else {\n        file_put_contents($file, $data);\n        printf(\"%s: UPDATED\\n\", $file);\n    }\n}\n\n/**\n * @param DOMElement $element\n * @param string     $name\n *\n * @return string|null\n */\nfunction getDomElementString(DOMElement $element, string $name) : ?string\n{\n    foreach ($element->getElementsByTagName($name) as $child) {\n        /** @var $child DOMElement */\n        return $child->textContent;\n    }\n\n    return null;\n}\n\n/**\n * @param string $name\n *\n * @return string\n *\n * @throws RuntimeException\n */\nfunction checkCurrencyName(string $name) : string\n{\n    if ($name === '' || ! mb_check_encoding($name, 'UTF-8')) {\n        throw new \\RuntimeException('Invalid currency name: ' . $name);\n    }\n\n    return $name;\n}\n\n/**\n * @param string $currencyCode\n *\n * @return string\n *\n * @throws RuntimeException\n */\nfunction checkCurrencyCode(string $currencyCode) : string\n{\n    if (preg_match('/^[A-Z]{3}$/', $currencyCode) !== 1) {\n        throw new \\RuntimeException('Invalid currency code: ' . $currencyCode);\n    }\n\n    return $currencyCode;\n}\n\n/**\n * @param string $numericCode\n *\n * @return int\n *\n * @throws RuntimeException\n */\nfunction checkNumericCode(string $numericCode) : int\n{\n    if (preg_match('/^[0-9]{3}$/', $numericCode) !== 1) {\n        throw new \\RuntimeException('Invalid numeric code: ' . $numericCode);\n    }\n\n    return (int) ltrim($numericCode, '0');\n}\n\n/**\n * @param string $minorUnits\n *\n * @return int\n *\n * @throws RuntimeException\n */\nfunction checkMinorUnits(string $minorUnits) : int\n{\n    if (preg_match('/^[0-9]{1}$/', $minorUnits) !== 1) {\n        throw new \\RuntimeException('Invalid minor unit: ' . $minorUnits);\n    }\n\n    return (int) $minorUnits;\n}\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.486328125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" colors=\"true\" bootstrap=\"vendor/autoload.php\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.3/phpunit.xsd\" cacheDirectory=\".phpunit.cache\">\n  <testsuites>\n    <testsuite name=\"Money tests\">\n      <directory>tests</directory>\n    </testsuite>\n  </testsuites>\n  <coverage/>\n  <source>\n    <include>\n      <directory suffix=\".php\">src</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "psalm.xml",
          "type": "blob",
          "size": 0.5283203125,
          "content": "<?xml version=\"1.0\"?>\n<psalm\n    errorLevel=\"1\"\n    resolveFromConfigFile=\"true\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"https://getpsalm.org/schema/config\"\n    xsi:schemaLocation=\"https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd\"\n    findUnusedBaselineEntry=\"true\"\n    findUnusedPsalmSuppress=\"true\"\n    findUnusedCode=\"false\"\n>\n    <projectFiles>\n        <directory name=\"src\" />\n        <ignoreFiles>\n            <directory name=\"vendor\" />\n        </ignoreFiles>\n    </projectFiles>\n</psalm>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}