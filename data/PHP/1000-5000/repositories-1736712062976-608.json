{
  "metadata": {
    "timestamp": 1736712062976,
    "page": 608,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kristijanhusak/laravel-form-builder",
      "stars": 1705,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1474609375,
          "content": "root = true\n\n[*.php]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.16015625,
          "content": "/vendor\ncomposer.phar\ncomposer.lock\n.DS_Store\n.idea\n.vscode\ncoverage\n*.taskpaper\nNOTES.md\n/.phpunit.result.cache\n/.phpunit.cache/\n/phpunit.xml.bak\n/coverage.clover\n"
        },
        {
          "name": ".scrutinizer.yml",
          "type": "blob",
          "size": 0.919921875,
          "content": "checks:\n    php:\n        code_rating: true\n        remove_extra_empty_lines: true\n        remove_php_closing_tag: true\n        remove_trailing_whitespace: true\n        fix_use_statements:\n            remove_unused: true\n            preserve_multiple: false\n            preserve_blanklines: true\n            order_alphabetically: true\n        fix_php_opening_tag: true\n        fix_linefeed: true\n        fix_line_ending: true\n        fix_identation_4spaces: true\n        fix_doc_comments: true\nfilter:\n    excluded_paths: [tests/*, vendor/*, src/Kris/LaravelFormBuilder/FormBuilderServiceProvider.php]\ntools:\n    external_code_coverage:\n        timeout: 600\n    php_code_coverage: false\n    php_code_sniffer:\n        config:\n            standard: PSR2\n        filter:\n            paths: ['src']\n    php_loc:\n        enabled: true\n        excluded_dirs: [vendor, tests]\n    php_cpd:\n        enabled: true\n        excluded_dirs: [vendor, tests]\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.5361328125,
          "content": "language: php\n\nphp:\n  - 7.1\n  - 7.2\n  - 7.3\n  - 7.4\n\nenv:\n  - COMPOSER_MEMORY_LIMIT=-1\n\nbefore_script:\n  - travis_retry composer self-update\n  - travis_retry composer install --prefer-source --no-interaction\n\nscript:\n  - vendor/bin/phpunit --coverage-text --coverage-clover=coverage.clover\n\nafter_script:\n  - wget https://scrutinizer-ci.com/ocular.phar\n  - php ocular.phar code-coverage:upload --format=php-clover coverage.clover\n\nnotifications:\n  email:\n    recipients:\n      - husakkristijan@gmail.com\n    on_success: never\n    on_failure: always\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 17.6015625,
          "content": "## 1.20.0\n- Add field rules event [#491](https://github.com/kristijanhusak/laravel-form-builder/pull/491)(Thanks to [@rudiedirkx](https://github.com/rudiedirkx))\n- Escape html with `e()` to respect Htmlable [#473](https://github.com/kristijanhusak/laravel-form-builder/pull/473)(Thanks to [@rudiedirkx](https://github.com/rudiedirkx))\n- Fix `datetime_local` to `datetime-local` field constant [#483](https://github.com/kristijanhusak/laravel-form-builder/pull/483)(Thanks to [@nea](https://github.com/nea))\n- Add missing `entity` field to constants [#484](https://github.com/kristijanhusak/laravel-form-builder/pull/484)(Thanks to [@nea](https://github.com/nea))\n- Fix compatibility with Laravel 5.8 by using EventDispatcher `dispatch` method instead of `fire`\n## 1.16.0\n- Add option for form specific config. [#406](https://github.com/kristijanhusak/laravel-form-builder/pull/406) (Thanks to [@beghelli](https://github.com/beghelli))\n- Add class enum that contains all field types [#455](https://github.com/kristijanhusak/laravel-form-builder/pull/455) (Thanks to [@tresa02](https://github.com/tresa02))\n## 1.15.1\n- Fix issue [#441](https://github.com/kristijanhusak/laravel-form-builder/issues/441)\n- Fix issue [#442](https://github.com/kristijanhusak/laravel-form-builder/issues/442)\n## 1.15.0\n- Add translation template [#399](https://github.com/kristijanhusak/laravel-form-builder/pull/399) (Thanks to [@koenvu](https://github.com/koenvu))\n- Add field error class [#411](https://github.com/kristijanhusak/laravel-form-builder/pull/411) (Thanks to [@n7olkachev](https://github.com/n7olkachev))\n- Allow using different error bag per form [#414](https://github.com/kristijanhusak/laravel-form-builder/pull/414) (Thanks to [@Fellner96](https://github.com/Fellner96))\n- Get PSR-4 namespace from composer [#424](https://github.com/kristijanhusak/laravel-form-builder/pull/424) (Thanks to [@icfr](https://github.com/icfr))\n- Escape static field value [#407](https://github.com/kristijanhusak/laravel-form-builder/pull/407) (Thanks to [@beghelli](https://github.com/beghelli))\n- Fix missing field name for rule closure [#403](https://github.com/kristijanhusak/laravel-form-builder/pull/403) (Thanks to [@yemenifree](https://github.com/yemenifree))\n- Fix checking trueness of empty array in collection type [#412](https://github.com/kristijanhusak/laravel-form-builder/pull/412) (Thanks to [@kiperz](https://github.com/kiperz))\n- Fix parent type not pushing options to children [#356](https://github.com/kristijanhusak/laravel-form-builder/pull/356) (Thanks to [@pimlie](https://github.com/pimlie))\n- Use request as model when validating to properly validate collection types\n- Setup named model after attaching model to form\n- Fix custom closure interpreted as string when using html5 validation rules [#435](https://github.com/kristijanhusak/laravel-form-builder/pull/435) (Thanks to [@yarbsemaj](https://github.com/yarbsemaj))\n- Fix radio and checkbox help block position [#440](https://github.com/kristijanhusak/laravel-form-builder/pull/440) (Thanks to [@sagarnasit](https://github.com/sagarnasit))\n## 1.14.0\n- Fix php7.2 compatibility\n## 1.13.0\n- Add Laravel 5.5 support [#377](https://github.com/kristijanhusak/laravel-form-builder/pull/377) (Thanks to [@wuwx](https://github.com/wuwx))\n- Add field filters [#376](https://github.com/kristijanhusak/laravel-form-builder/pull/376) (Thanks to [@unckleg](https://github.com/unckleg))\n- Add `data_override` closure for choice type fields [#383](https://github.com/kristijanhusak/laravel-form-builder/pull/383) (Thanks to [@yemenifree](https://github.com/yemenifree))\n- Fix adding client validation attributes to non required fields [#379](https://github.com/kristijanhusak/laravel-form-builder/pull/379) (Thanks to [@koichirose](https://github.com/koichirose))\n\n## 1.12.1\n- Fix issue #354\n\n## 1.12.0\n- Add `createByArray` to Form builder form building forms with simple array - #316 (Thanks to [@saeidraei](https://github.com/saeidraei))\n- Add ability to automatically validate form classes when they are instantiated by adding ValidatesWhenResolved trait - #345 (Thanks to [@mpociot](https://github.com/mpociot))\n- Allow configuring plain form class - #319 (Thanks to [@rudiedirkx](https://github.com/rudiedirkx))\n- Allow creating custom validation rules parser - #345 (Thanks to [@rudiedirkx](https://github.com/rudiedirkx))\n- Use primary key as default property_key for EntityType field - #334 (Thanks to Thanks to [@pimlie](https://github.com/pimlie))\n- Check if custom field already defined on rebuild form - #348 (Thanks to [@alamcordeiro](https://github.com/alamcordeiro))\n- Fix child models not being bound correctly in collection forms - #325 (Thanks to [@njbarrett](https://github.com/njbarrett))\n- Fix passing `choice_options` from view - #336 - (Thanks to Thanks to [@schursin](https://github.com/schursin))\n- Fix ButtonGroupType having wrong template - #344 (Thanks to [@jayjfletcher](https://github.com/jayjfletcher))\n- Fix CollectionType using request's `get()` instead of `input()` method - #346 (Thanks to [@unfalln](https://github.com/unfalln))\n\n## 1.10.0\n- Add `buttongroup` field type - #298 (Thanks to [@noxify](https://github.com/noxify))\n- Allow custom `id` and `for` attributes for a field - #285\n- Fix accessing fields from twig by adding `__isset` magic method - #301\n- Use custom Form macro for labels in views\n\n## 1.9.0\n- Bump minimum php version to 5.6 - #276 (Thanks to [@max-kovpak](https://github.com/max-kovpak))\n- Add support for Laravel 5.3 and fix EntityType lists method - #276 (Thanks to [@max-kovpak](https://github.com/max-kovpak))\n- Add `alterFieldValues` and `alterValid` methods to Form class - #272 (Thanks to [@rudiedirkx](https://github.com/rudiedirkx))\n- Fix collection type to use current request data if old input is not available - issue #268\n- Fix automatic class append functionality that was added in PR #220 - use `class_append` option instead.\n\n\n## 1.8.0\n- Add default classes per field - #220 (Thanks to @jvdlaar)\n- Set up ServiceProvider to be compatible with Laravel 5.3 - #236 (Thanks to @marcoraddatz)\n- Added `getFieldValues` method to form which returns all field values from request - #248 (Thanks to @rudiedirkx)\n- Added events after form and field creation/validation - #254 (Thanks to @rudiedirkx)\n- Allow nested field names without usage of any child fields - #251 (Thanks to @rudiedirkx)\n- Add `redirectIfNotValid` method to Form - #258 (Thanks to @koenvu)\n- Add `class_append` option for `label_attr`, `attr` and `wrapper` options which appends classes to the default ones - #257 (Thanks to @koenvu)\n- Add `form_rows` helper method, and pass `child_form` to view in ChildFormType, which contains internal Form instance - #262 (Thanks to @rudiedirkx)\n- Fix adding `required` class to label even without client validation enabled - #261 (Thanks to @koenvu)\n\n## 1.7.10\n- Fix bug where `error_messages` were not namespaced properly in child forms ([#225](https://github.com/kristijanhusak/laravel-form-builder/issues/225))\n- Add check for field name and forbid reserved words ([#232](https://github.com/kristijanhusak/laravel-form-builder/issues/232))\n- Use Symfony's `TranslatorInterface` instead of Laravel's Translator implementation([#231](https://github.com/kristijanhusak/laravel-form-builder/issues/231))\n\n## 1.7.0\n- Add check for nested translations (Thanks to [@paultela](https://github.com/paultela))\n- Add `label_show` property for field to allow hiding the label without setting it to false (Fixes issue with validation where error message requires label)\n- Add `error_messages` property for field to allow defining error messages in `buildForm`.\n\n## 1.6.50\n- Translate form field labels if translation exist, and add `language_name` option to Form class in order to allow translating fields from specifing file (Thanks to [@koenvu](https://github.com/koenvu))\n- Add required attribute if validation rules contains `required` option (Thanks to [@koenvu](https://github.com/koenvu))\n- Fix issue #211 - Multiple select name wrong in subform\n- Fix issue #212 - ChoiceType ignoring own validation rules\n- Fix issue #213 - required attribute applied even if client validation is disabled\n\n## 1.6.42\n- Fix issue #191 - clientValidationEnabled for child forms not working\n- Fix issue #202 - 'Field already exists' exception when using `compose()` method\n- Fix issue #204 - 'default_value' not handled properly for CheckableType\n- Fix issue #205 - Data not being passed properly to child form\n\n## 1.6.41\n- Fix LaravelCollective compatibility with older versions of Laravel (Thanks to [@marcoraddatz](https://github.com/marcoraddatz))\n- Do not throw exception when trying to remove non existing field - [#149](https://github.com/kristijanhusak/laravel-form-builder/issues/149) (Thanks to [@marcoraddatz](https://github.com/marcoraddatz))\n- Fix README to match php 5.5+ syntax (Thanks to [@marcoraddatz](https://github.com/marcoraddatz))\n\n## 1.6.40\n- Setup compatibility with Laravel 5.2 and LaravelCollective\n- Bump php requirement to version 5.5\n- Fix bug where different request was used in tests\n- Fix `setModel` method\n- Add some deprecation warnings\n\n## 1.6.31\n- Add `template_prefix` option form form and fields (Thanks to [@koenvu](https://github.com/koenvu))\n- Add `empty_row` option for Collection type to remove initial empty row when there is no data for it\n- Add `removeChild` option for ParentType fields to allow removing child\n- Fix child form value binding when parent form has a name.\n- Fix `renderUntil` to throw exception when field does not exist (Thanks to [@pnoonan](https://github.com/pnoonan))\n- Fix form stub to satisfy PSR-2 standard (Thanks to [@koenvu](https://github.com/koenvu))\n\n\n## 1.6.30\n- Add client side validation (Thanks to [@barryvdh](https://github.com/barryvdh))\n- Extract some part of html in views to own partial\n- Fix select with `multiple` option naming ([#150](https://github.com/kristijanhusak/laravel-form-builder/issues/150))\n- Fix model binding on existing instances of child form([#157](https://github.com/kristijanhusak/laravel-form-builder/issues/157))\n- Fix duplicate `help_block` on select/choice ([#153](https://github.com/kristijanhusak/laravel-form-builder/issues/153))\n\n## 1.6.20\n- Add Validation to the Form class ([#135](https://github.com/kristijanhusak/laravel-form-builder/issues/135))\n- Add getters for value and default_value (getValue() and getDefaultValue())\n- Add option to pass template to form class through options\n- Make setValue method public\n- Make unspecified labels to use ucfirst instead of ucwords\n\n## 1.6.12\n- Add `path` and `namespace` options to the form class generator command.\n\n## 1.6.11\n- Fix checkables checked state not working with model\n- Fix adding `for` attribute twice to label\n- Add some tests\n\n## 1.6.10\n- Replace [Illuminate/Html](https://github.com/illuminate/html) with [LaravelCollective/Html](https://github.com/LaravelCollective/html)\n- add `disableFields` and `enableFields` functions to Form class to allow disabling all fields in the form\n- Fix collection type model value binding\n\n## 1.6.0\n- **Minor BC Break** - Rename `default_value` to `value`, and use `default_value` as fallback value if no `value` or model data available\n\n    If You published views update all templates and set `$options['default_value']` to `$options['value']`\n\n- Add form composition (Add fields from another form with `compose()` method) - Thanks to [@theshaunwalker](https://github.com/theshaunwalker)\n- Add trait for controller that allows shorter sintax (`$this->form()` and `$this->plain()`)\n- Fix `renderUntil` to check the name by real name instead of namespaced name\n- Fix collection of child forms not rendering when there is no data\n- Fix collection prototype to return proper `prototype_name` for nested collections\n- Return `$this` from `rebuildForm()` method to allow regenerating form in loops\n\n\n## 1.5.10\n- Fix collection of forms not rendering when there is no model or any data passed to collection.\n\n## 1.5.1\n- Add `entity` field type that allows fetching specific Model data\n\n## 1.5.0\n- Bind all fields values manually without Laravel's form builder `Form::model` (Check note below for possible BC break)\n- Add possibility to use Closure as default value for fields which solves issues like in [#98](https://github.com/kristijanhusak/laravel-form-builder/issues/98#issuecomment-103893235)\n- Fix passing model to child forms\n- Set FormBuilder class properties to protected to allow extending\n- Optmization and other minor fixes\ngg\n**Note**: If You published views before, they need to be updated to prevent possible breaking.\nSince value binding is now done in package, and `Form::model` is removed, views needs to be republished (or updated) to remove `Form::model` from [form.php](https://github.com/kristijanhusak/laravel-form-builder/blob/master/src/views/form.php). Also [choice.php](https://github.com/kristijanhusak/laravel-form-builder/blob/master/src/views/choice.php) needs to be updated to pass `selected` value.\n\n## 1.4.26\n- Fix expanded/multiple choice fields id by prefixing it with properly formatted name\n\n## 1.4.25\n- Add `addBefore` and `addAfter` methods to Form class to allow adding fields at specific location\n- Add `required` option for all field types, that adds class `required` (configurable in config) to label, and `required` attribute to field.\n\n## 1.4.22\n- Fix choice field type not adding `[]` on regular forms\n\n## 1.4.21\n- Add `wrapper` option for button type, defaults to false\n- Fix `help_block` rendering twice on repeated field type\n- Fix choice field type adding additional `[]` to the name in child forms/collections\n\n## 1.4.20\n- Add `help_block` option for fields which renders note under the field (http://getbootstrap.com/css/#forms)\n- Fix repeated type not closing tags properly\n\n## 1.4.13\n- Fix default_value for child forms ([#77](https://github.com/kristijanhusak/laravel-form-builder/issues/80))\n- Pass form data to child forms.\n\n## 1.4.12\n- Fix issue with showing validation errors for nested forms ([#78](https://github.com/kristijanhusak/laravel-form-builder/issues/78). Thanks to [@theshaunwalker](https://github.com/theshaunwalker))\n\n## 1.4.11\n- Add ability to exclude some fields from rendering ([PR-77](https://github.com/kristijanhusak/laravel-form-builder/pull/77). Thanks to [@theshaunwalker](https://github.com/theshaunwalker))\n\n## 1.4.10\n- Use old input for collection field type. (Example: after failed validation, redirect back withInput).\n- Add `static` type field.\n- Add `form_until` function that renders fields until specified field(Thanks to [@hackel](https://github.com/hackel))\n- using `getData` without param returns all data\n\n## 1.4.06\n- Bind data to child form every time to allow setting null.\n\n## 1.4.05\n- Fix id and name collision.\n\n## 1.4.04\n- Fix collection type form model binding.\n\n## 1.4.03\n- Fix custom template per field.\n\n## 1.4.02\n- Fix adding enctype multipart/form-data to form when field is of type file.\n\n## 1.4.01\n- Fix setting field id on child forms.\n\n## 1.4.0\n- Allow calling form methods directly from child form\n- Update views to print all errors for single field\n- Fix custom field template for child forms\n- Fix disabling errors for fields in form class\n\n## 1.3.8\n- Fix form model binding for named forms\n- Collection type now pulls data from model if data not passed in `data` option\n\n## 1.3.71\n- Fix choices to show only one error message\n\n## 1.3.7\n- Update `repeated` type to work with child forms\n- Add possibility to create named forms (fields get name[fieldname])\n\n## 1.3.6\n- Add support for some HTML5 input types(By @bishopb)\n\n## 1.3.5\n- Add `choice_options` property to `choice` field type that handles each radio/checkbox options when `expanded` is true.\n- Allow disabling wrapper for fields by setting it to `false`\n\n## 1.3.4\n- Fix child form rebuild bug.\n\n## 1.3.3\n- Don't override existing aliases for Form and Html (Fixed by @squigg)\n\n## 1.3.2\n- Allow passing any type of model to form class (array, object, eloquent model, Collection).\n\n## 1.3.1\n- Fix bug where wrapper was not showing if label was false.\n\n## 1.3.0\n- Add [Collection](https://github.com/kristijanhusak/laravel-form-builder#collection) type\n- Minor fixes\n\n## 1.2.0\n- Allow adding child forms with full class name which will be instantiated automatically\n- Add FormBuilder class instance to the Form class\n- Setting label explicitly to false in the field options disables printing label for that field\n- Minor fixes\n\n## 1.1.11\n- Add `default_namespace` configuration to allow typing only class name when creating form (Same functionality like for routes)\n\n## 1.1.10\n- Fix `loadViewsFrom` in the service provider and add publishes paths.\n\n## 1.1.9\n- Fix service provider.\n\n## 1.1.8\n- Dynamically access children in parent form types.\n\n## 1.1.7\n- Fix empty select value to be empty string instead of `0`\n\n## 1.1.6\n- Append `[]` to field name automatically if multiple attribute is set to true.\n\n## 1.1.5\n- Fix `child form validation errors not showing` bug.\n\n## 1.1.4\n- Added `repeated` type field (https://github.com/kristijanhusak/laravel-form-builder#field-customization)\n- Minor fixes\n\n## 1.1.3\n- Added [Child form](https://github.com/kristijanhusak/laravel-form-builder#child-form) type\n- Added `rebuildForm` method\n- Added `getRequest` method\n- Added `setData` and `getData` options to form\n- Minor fixes\n\n## 1.1.2\n- `form_end()` function now also renders rest of the form fields - can be changed with 2nd parameter as false(`form_end($form, false)`)\n- Minor fixes\n\n## 1.1.1\n- Added `remove()` and `modify()` methods to Form class\n- Added 'empty_value' option for select\n- `choice` and `select` types now needs `selected` option to pass key instead of value of choice\n\n## 1.1\n- Added [Laravel 4](https://github.com/kristijanhusak/laravel-form-builder/tree/laravel-4) support (Tags 0.*)\n- Config loaded outside of class and injected as array\n- Changed command from `laravel-form-builder:make` to `form:make`\n\n## 1.0\n- Initial version\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0576171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Kristijan Husak\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "NOTES.md",
          "type": "blob",
          "size": 0.1572265625,
          "content": "# laravel-form-builder\n\n#501 Refactor to use Arr class for deprecated array helpers\n- array_get\n- array_pull\n- array_set\n- array_forget\n\n- str_is\n- str_contains\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.388671875,
          "content": "[![Build Status](https://travis-ci.org/kristijanhusak/laravel-form-builder.svg)](https://travis-ci.org/kristijanhusak/laravel-form-builder)\n[![Coverage Status](http://img.shields.io/scrutinizer/coverage/g/kristijanhusak/laravel-form-builder.svg?style=flat)](https://scrutinizer-ci.com/g/kristijanhusak/laravel-form-builder/?branch=master)\n[![Total Downloads](https://img.shields.io/packagist/dt/kris/laravel-form-builder.svg?style=flat)](https://packagist.org/packages/kris/laravel-form-builder)\n[![Latest Stable Version](https://img.shields.io/packagist/v/kris/laravel-form-builder.svg?style=flat)](https://packagist.org/packages/kris/laravel-form-builder)\n[![License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat)](LICENSE)\n\n# Laravel 5 form builder\n\n[![Join the chat at https://gitter.im/kristijanhusak/laravel-form-builder](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/kristijanhusak/laravel-form-builder?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nForm builder for Laravel 5 inspired by Symfony's form builder. With help of Laravels FormBuilder class creates forms that can be easy modified and reused.\nBy default it supports Bootstrap 3.\n\n## Laravel 4\nFor Laravel 4 version check [laravel4-form-builder](https://github.com/kristijanhusak/laravel4-form-builder).\n\n## Bootstrap 4 support\nTo use bootstrap 4 instead of bootstrap 3, install [laravel-form-builder-bs4](https://github.com/ycs77/laravel-form-builder-bs4).\n\n## Upgrade to 1.6\nIf you upgraded to `>1.6.*` from `1.5.*` or earlier, and having problems with form value binding, rename `default_value` to `value`.\n\nMore info in [changelog](https://github.com/kristijanhusak/laravel-form-builder/blob/master/CHANGELOG.md).\n\n## Documentation\nFor detailed documentation refer to https://kristijanhusak.github.io/laravel-form-builder/.\n\n## Changelog\nChangelog can be found [here](https://github.com/kristijanhusak/laravel-form-builder/blob/master/CHANGELOG.md).\n\n## Installation\n\n### Using Composer\n\n```sh\ncomposer require kris/laravel-form-builder\n```\n\nOr manually by modifying `composer.json` file:\n\n``` json\n{\n    \"require\": {\n        \"kris/laravel-form-builder\": \"1.*\"\n    }\n}\n```\n\nAnd run `composer install`\n\nThen add Service provider to `config/app.php`\n\n``` php\n    'providers' => [\n        // ...\n        Kris\\LaravelFormBuilder\\FormBuilderServiceProvider::class\n    ]\n```\n\nAnd Facade (also in `config/app.php`)\n\n``` php\n    'aliases' => [\n        // ...\n        'FormBuilder' => Kris\\LaravelFormBuilder\\Facades\\FormBuilder::class\n    ]\n\n```\n\n**Notice**: This package will add `laravelcollective/html` package and load aliases (Form, Html) if they do not exist in the IoC container.\n\n\n## Quick start\n\nCreating form classes is easy. With a simple artisan command:\n\n```sh\nphp artisan make:form Forms/SongForm --fields=\"name:text, lyrics:textarea, publish:checkbox\"\n```\n\nForm is created in path `app/Forms/SongForm.php` with content:\n\n```php\n<?php\n\nnamespace App\\Forms;\n\nuse Kris\\LaravelFormBuilder\\Form;\nuse Kris\\LaravelFormBuilder\\Field;\n\nclass SongForm extends Form\n{\n    public function buildForm()\n    {\n        $this\n            ->add('name', Field::TEXT, [\n                'rules' => 'required|min:5'\n            ])\n            ->add('lyrics', Field::TEXTAREA, [\n                'rules' => 'max:5000'\n            ])\n            ->add('publish', Field::CHECKBOX);\n    }\n}\n```\n\nIf you want to instantiate empty form without any fields, just skip passing `--fields` parameter:\n\n```sh\nphp artisan make:form Forms/PostForm\n```\n\nGives:\n\n```php\n<?php\n\nnamespace App\\Forms;\n\nuse Kris\\LaravelFormBuilder\\Form;\n\nclass PostForm extends Form\n{\n    public function buildForm()\n    {\n        // Add fields here...\n    }\n}\n```\n\nAfter that instantiate the class in the controller and pass it to view:\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Routing\\Controller as BaseController;\nuse Kris\\LaravelFormBuilder\\FormBuilder;\n\nclass SongsController extends BaseController {\n\n    public function create(FormBuilder $formBuilder)\n    {\n        $form = $formBuilder->create(\\App\\Forms\\SongForm::class, [\n            'method' => 'POST',\n            'url' => route('song.store')\n        ]);\n\n        return view('song.create', compact('form'));\n    }\n\n    public function store(FormBuilder $formBuilder)\n    {\n        $form = $formBuilder->create(\\App\\Forms\\SongForm::class);\n\n        if (!$form->isValid()) {\n            return redirect()->back()->withErrors($form->getErrors())->withInput();\n        }\n\n        // Do saving and other things...\n    }\n}\n```\n\nAlternative example:\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Routing\\Controller as BaseController;\nuse Kris\\LaravelFormBuilder\\FormBuilder;\nuse App\\Forms\\SongForm;\n\nclass SongsController extends BaseController {\n\n    public function create(FormBuilder $formBuilder)\n    {\n        $form = $formBuilder->create(SongForm::class, [\n            'method' => 'POST',\n            'url' => route('song.store')\n        ]);\n\n        return view('song.create', compact('form'));\n    }\n\n    public function store(FormBuilder $formBuilder)\n    {\n        $form = $formBuilder->create(SongForm::class);\n\n        if (!$form->isValid()) {\n            return redirect()->back()->withErrors($form->getErrors())->withInput();\n        }\n\n        // Do saving and other things...\n    }\n}\n```\n\n\nIf you want to store a model after a form submit considerating all fields are model properties:\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Controllers\\Controller;\nuse Kris\\LaravelFormBuilder\\FormBuilder;\nuse App\\SongForm;\n\nclass SongFormController extends Controller\n{\n    public function store(FormBuilder $formBuilder)\n    {\n        $form = $formBuilder->create(\\App\\Forms\\SongForm::class);\n        $form->redirectIfNotValid();\n        \n        SongForm::create($form->getFieldValues());\n\n        // Do redirecting...\n    }\n```\n\nYou can only save properties you need:\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Controllers\\Controller;\nuse Kris\\LaravelFormBuilder\\FormBuilder;\nuse App\\SongForm;\n\nclass SongFormController extends Controller\n{\n    public function store(FormBuilder $formBuilder, Request $request)\n    {\n        $form = $formBuilder->create(\\App\\Forms\\SongForm::class);\n        $form->redirectIfNotValid();\n        \n        $songForm = new SongForm();\n        $songForm->fill($request->only(['name', 'artist'])->save();\n\n        // Do redirecting...\n    }\n```\n\nOr you can update any model after form submit:\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Controllers\\Controller;\nuse Kris\\LaravelFormBuilder\\FormBuilder;\nuse App\\SongForm;\n\nclass SongFormController extends Controller\n{\n    public function update(int $id, Request $request)\n    {\n        $songForm = SongForm::findOrFail($id);\n\n        $form = $this->getForm($songForm);\n        $form->redirectIfNotValid();\n\n        $songForm->update($form->getFieldValues());\n\n        // Do redirecting...\n    }\n```\n\nCreate the routes\n\n```php\n// app/Http/routes.php\nRoute::get('songs/create', [\n    'uses' => 'SongsController@create',\n    'as' => 'song.create'\n]);\n\nRoute::post('songs', [\n    'uses' => 'SongsController@store',\n    'as' => 'song.store'\n]);\n```\n\nPrint the form in view with `form()` helper function:\n\n```html\n<!-- resources/views/song/create.blade.php -->\n\n@extends('app')\n\n@section('content')\n    {!! form($form) !!}\n@endsection\n```\n\nGo to `/songs/create`; above code will generate this html:\n\n```html\n<form method=\"POST\" action=\"http://example.dev/songs\">\n    <input name=\"_token\" type=\"hidden\" value=\"FaHZmwcnaOeaJzVdyp4Ml8B6l1N1DLUDsZmsjRFL\">\n    <div class=\"form-group\">\n        <label for=\"name\" class=\"control-label\">Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"name\">\n    </div>\n    <div class=\"form-group\">\n        <label for=\"lyrics\" class=\"control-label\">Lyrics</label>\n        <textarea name=\"lyrics\" class=\"form-control\" id=\"lyrics\"></textarea>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"publish\" class=\"control-label\">Publish</label>\n        <input type=\"checkbox\" name=\"publish\" id=\"publish\">\n    </div>\n</form>\n```\n\nOr you can generate forms easier by using simple array\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Routing\\Controller as BaseController;\nuse Kris\\LaravelFormBuilder\\FormBuilder;\nuse Kris\\LaravelFormBuilder\\Field;\nuse App\\Forms\\SongForm;\n\nclass SongsController extends BaseController {\n\n    public function create(FormBuilder $formBuilder)\n    {\n        $form = $formBuilder->createByArray([\n                        [\n                            'name' => 'name',\n                            'type' => Field::TEXT,\n                        ],\n                        [\n                            'name' => 'lyrics',\n                            'type' => Field::TEXTAREA,\n                        ],\n                        [\n                            'name' => 'publish',\n                            'type' => Field::CHECKBOX\n                        ],\n                    ]\n            ,[\n            'method' => 'POST',\n            'url' => route('song.store')\n        ]);\n\n        return view('song.create', compact('form'));\n    }\n}\n```\n\n\n## Contributing\n\nProject follows [PSR-2](http://www.php-fig.org/psr/psr-2/) standard and it's covered with PHPUnit tests.\nPull requests should include tests and pass [Travis CI](https://travis-ci.org/kristijanhusak/laravel-form-builder) build.\n\nTo run tests first install dependencies with `composer install`.\n\nAfter that tests can be run with `vendor/bin/phpunit`\n"
        },
        {
          "name": "README_OLD.md",
          "type": "blob",
          "size": 31.6376953125,
          "content": "[![Build Status](https://img.shields.io/travis/kristijanhusak/laravel-form-builder/master.svg?style=flat)](https://travis-ci.org/kristijanhusak/laravel-form-builder)\n[![Coverage Status](http://img.shields.io/scrutinizer/coverage/g/kristijanhusak/laravel-form-builder.svg?style=flat)](https://scrutinizer-ci.com/g/kristijanhusak/laravel-form-builder/?branch=master)\n[![Total Downloads](https://img.shields.io/packagist/dt/kris/laravel-form-builder.svg?style=flat)](https://packagist.org/packages/kris/laravel-form-builder)\n[![Latest Stable Version](https://img.shields.io/packagist/v/kris/laravel-form-builder.svg?style=flat)](https://packagist.org/packages/kris/laravel-form-builder)\n[![License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat)](LICENSE)\n\n# Laravel 5 form builder\n\nForm builder for Laravel 5 inspired by Symfony's form builder. With help of Laravels FormBuilder class creates forms that can be easy modified and reused.\nBy default it supports Bootstrap 3.\n\n## Laravel 4\nFor laravel 4 version check [laravel4-form-builder](https://github.com/kristijanhusak/laravel4-form-builder)\n\n\n## Changelog\nChangelog can be found [here](https://github.com/kristijanhusak/laravel-form-builder/blob/master/CHANGELOG.md)\n\n## Table of contents\n1. [Installation](#installation)\n2. [Basic usage](#usage)\n  1. [Usage in controllers](#usage-in-controllers)\n  2. [Usage in views](#usage-in-views)\n3. [Plain form](#plain-form)\n4. [Child form](#child-form)\n5. [Named form](#named-form)\n6. [Collection](#collection)\n  1. [Collection of child forms](#collection-of-child-forms)\n  2. [Prototype](#prototype)\n7. [Field customization](#field-customization)\n8. [Changing configuration and templates](#changing-configuration-and-templates)\n9. [Custom fields](#custom-fields)\n10. [Contributing](#contributing)\n11. [Issues and bug reporting](#issues-and-bug-reporting)\n\n###Installation\n\n``` json\n{\n    \"require\": {\n        \"kris/laravel-form-builder\": \"1.5.*\"\n    }\n}\n```\n\nrun `composer update`\n\nThen add Service provider to `config/app.php`\n\n``` php\n    'providers' => [\n        // ...\n        'Kris\\LaravelFormBuilder\\FormBuilderServiceProvider'\n    ]\n```\n\nAnd Facade (also in `config/app.php`)\n\n``` php\n    'aliases' => [\n        // ...\n        'FormBuilder' => 'Kris\\LaravelFormBuilder\\Facades\\FormBuilder'\n    ]\n\n```\n\n**Notice**: This package will add `illuminate/html` package and load Aliases (Form, Html) if they do not exist in the IoC container\n\n### Basic usage\n\nCreating form classes is easy. With a simple artisan command:\n\n``` sh\n    php artisan make:form Forms/PostForm\n```\n\nyou create form class in path `app/Forms/PostForm.php` that looks like this:\n\n``` php\n<?php namespace App\\Forms;\n\nuse Kris\\LaravelFormBuilder\\Form;\n\nclass PostForm extends Form\n{\n    public function buildForm()\n    {\n        // Add fields here...\n    }\n}\n```\n\nYou can add fields which you want when creating command like this:\n\n``` sh\nphp artisan make:form Forms/SongForm --fields=\"name:text, lyrics:textarea, publish:checkbox\"\n```\n\nAnd that will create form in path `app/Forms/SongForm.php` with content:\n\n``` php\n<?php namespace App\\Forms;\n\nuse Kris\\LaravelFormBuilder\\Form;\n\nclass SongForm extends Form\n{\n    public function buildForm()\n    {\n        $this\n            ->add('name', 'text')\n            ->add('lyrics', 'textarea')\n            ->add('publish', 'checkbox');\n    }\n}\n```\n\n#### Usage in controllers\n\nForms can be used in controller like this:\n\n``` php\n<?php namespace App/Http/Controllers;\n\nuse Illuminate\\Routing\\Controller;\nuse Kris\\LaravelFormBuilder\\FormBuilder;\n\nclass SongsController extends BaseController {\n\n    public function create(FormBuilder $formBuilder)\n    {\n        $form = $formBuilder->create('App\\Forms\\SongForm', [\n            'method' => 'POST',\n            'url' => route('song.store')\n        ]);\n\n        return view('song.create', compact('form'));\n    }\n\n    public function store()\n    {\n    }\n}\n```\n\n#### Usage in views\n\nFrom controller they can be used in views like this:\n\n``` html\n<!-- resources/views/song/create.blade.php -->\n\n@extend('layouts.master')\n\n@section('content')\n    {!! form($form) !!}\n@endsection\n```\n\n`{!! form($form) !!}` Will generate this html:\n\n``` html\n<form method=\"POST\" action=\"http://example.dev/songs\">\n    <input name=\"_token\" type=\"hidden\" value=\"FaHZmwcnaOeaJzVdyp4Ml8B6l1N1DLUDsZmsjRFL\">\n    <div class=\"form-group\">\n        <label for=\"name\" class=\"control-label\">name</label>\n        <input type=\"text\" class=\"form-control\" id=\"name\">\n    </div>\n    <div class=\"form-group\">\n        <label for=\"lyrics\" class=\"control-label\">lyrics</label>\n        <textarea name=\"lyrics\" class=\"form-control\"></textarea>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"publish\" class=\"control-label\">publish</label>\n        <input type=\"checkbox\" name=\"publish\" id=\"publish\">\n    </div>\n</form>\n```\n\nThere are several helper methods that can help you customize your rendering:\n\n\n``` html\n<!-- This function: -->\n\n{!! form_row($form->lyrics, ['attr' => ['class' => 'big-textarea']]) !!}\n\n<!-- Renders this: -->\n\n<div class=\"form-group\">\n    <label for=\"lyrics\" class=\"control-label\">lyrics</label>\n    <textarea name=\"lyrics\" id=\"lyrics\" class=\"big-textarea\"></textarea>\n</div>\n```\n\nYou can also split it even more:\n``` html\n{!! form_start($form) !!}\n<form method=\"POST\" action=\"http://example.dev/songs\">\n\n{!! form_label($form->publish) !!}\n<label for=\"publish\" class=\"control-label\">publish</label>\n\n{!! form_widget($form->publish, ['checked' => true]) !!}\n<input type=\"checkbox\" name=\"publish\" checked=\"checked\">\n\n{!! form_errors($form->publish) !!}\n<div class=\"text-danger\">This field is required.</div> <!-- Rendered only if validation errors occur. -->\n\n{!! form_rest($form) !!}\n<!--\nRenders the rest of the form WITHOUT closing tag.\nIf you want to render a closing tag also, use\nform_end($form)\n-->\n<div class=\"form-group\">\n    <label for=\"name\" class=\"control-label\">name</label>\n    <input type=\"text\" class=\"form-control\" id=\"name\">\n</div>\n<div class=\"form-group\">\n    <label for=\"publish\" class=\"control-label\">publish</label>\n    <input type=\"text\" name=\"publish\" id=\"publish\">\n</div>\n\n<!--\nIf form_rest($form) is not called before this,\nit will render the rest of the form and add\nform close tag (</form>). If form_rest($form) IS\ncalled, it will render only closing tag (</form>)\n\nIf you want to render only the closing tag, even\nif form_rest($form) is not called, pass false as\nsecond param (form_end($form, false))\n-->\n{!! form_end($form) !!}\n</form>\n\n```\n### Plain form\n\nIf you need to quick create a small form that does not to be reused, you can use `plain` method:\n\n``` php\n<?php namespace App/Http/Controllers;\n\nuse Illuminate\\Routing\\Controller;\n\nclass AuthController extends BaseController {\n\n    public function login()\n    {\n        $form = \\FormBuilder::plain([\n            'method' => 'POST',\n            'url' => route('login')\n        ])->add('username', 'text')->add('password', 'password')->add('login', 'submit');\n\n        return view('auth.login', compact('form'));\n    }\n\n    public function postLogin()\n    {\n    }\n}\n```\n\n### Child form\nYou can add one form as a child in another form. This will render all fields from that child form and wrap them in name provided:\n\n``` php\n\nclass PostForm\n{\n    public function buildForm()\n    {\n        $this\n            ->add('title', 'text')\n            ->add('body', 'textarea');\n    }\n}\n\nclass GenderForm\n{\n    public function buildForm()\n    {\n        $this\n            ->add('gender', 'select', [\n                'choices' => $this->getData('genders')\n            ]);\n    }\n}\n\nclass SongForm extends Form\n{\n    public function buildForm()\n    {\n        $this\n            ->add('name', 'text')\n            ->add('gender', 'form', [\n                'class' => 'App\\Forms\\GenderForm',\n                // Passed to gender form as data (same as calling addData($data) method),\n                // works only if class is passed as string\n                'data' => ['genders' => ['m' => 'Male', 'f' => 'Female']]\n            ])\n            ->add('song', 'form', [\n                'class' => $this->formBuilder->create('App\\Forms\\PostForm')\n            ])\n            ->add('lyrics', 'textarea');\n    }\n}\n```\nSo now song form will render this:\n```html\n    <div class=\"form-group\">\n        <label for=\"name\" class=\"control-label\">name</label>\n        <input type=\"text\" name=\"name\" id=\"name\">\n    </div>\n    <div class=\"form-group\">\n        <label for=\"song[title]\" class=\"control-label\">title</label>\n        <input type=\"text\" name=\"song[title]\" id=\"song[title]\">\n    </div>\n    <div class=\"form-group\">\n        <label for=\"song[body]\" class=\"control-label\">body</label>\n        <textarea name=\"song[body]\" id=\"song[body]\"></textarea>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"lyrics\" class=\"control-label\">textarea</label>\n        <textarea name=\"lyrics\" id=\"lyrics\"></textarea>\n    </div>\n```\n\n### Named form\nNamed forms are very similar to child forms, only difference is that they are used as standalone forms.\n\n```php\nclass PostForm\n{\n    // Can be changed when creating a form\n    protected $name = 'post';\n\n    public function buildForm()\n    {\n        $this\n            ->add('title', 'text', [\n                'label' => 'Post title'\n            ])\n            ->add('body', 'textarea', [\n                'label' => 'Post body'\n            ]);\n    }\n}\n\nclass PostController {\n    public function createAction()\n    {\n        $form = \\FormBuilder::create('App\\Forms\\PostForm');\n\n        // Can be set from here in 2 ways:\n        // This allows flexibility to use only when needed\n        // 1. way:\n        $form = \\FormBuilder::create('App\\Forms\\PostForm', [\n            'name' => 'post'\n        ]);\n\n        // 2. way;\n        $form = \\FormBuilder::create('App\\Forms\\PostForm')->setName('post');\n    }\n}\n\n// View\n<div class=\"form-group\">\n    <label for=\"title\" class=\"control-label\">Post title</label>\n    <textarea name=\"post[title]\" id=\"title\"></textarea>\n</div>\n<div class=\"form-group\">\n    <label for=\"body\" class=\"control-label\">Post body</label>\n    <textarea name=\"post[body]\" id=\"body\"></textarea>\n</div>\n```\n\n### Collection\nCollections are used for working with array of data, mostly used for relationships (OneToMany, ManyToMany).\n\nIt can be any type that is available in the package. Here are some examples:\n\n``` php\n<?php\nuse Kris\\LaravelFormBuilder\\Form;\n\nclass PostForm extends Form\n{\n    public function buildForm()\n    {\n        $this\n            ->add('title', 'text')\n            ->add('body', 'textarea')\n            ->add('tags', 'collection', [\n                'type' => 'text',\n                'property' => 'name',    // Which property to use on the tags model for value, defualts to id\n                'data' => [],            // Data is automatically bound from model, here we can override it\n                'options' => [    // these are options for a single type\n                    'label' => false,\n                    'attr' => ['class' => 'tag']\n                ]\n            ]);\n    }\n}\n```\nAnd in controller:\n```php\n<?php\n\nclass MainController extends Controller\n{\n    public function edit($id, FormBuilder $formBuilder)\n    {\n        $post = Post::findOrFail($id);\n        // Post model contains this data\n        // $post = [\n        //     'id' => 1,\n        //     'title' => 'lorem ipsum',\n        //     'body' => 'dolor sit'\n        //     'tags' => [\n        //         ['id' => 1, 'name' => 'work', 'desc' => 'For work'],\n        //         ['id' => 2, 'name' => 'personal', 'desc' => 'For personal usage']\n        //     ]\n        // ]\n\n        // Collection field type will automatically pull tags data from the model,\n        // If we want to override the data, we can pass `data` option to the field\n\n        $form = $formBuilder->create('App\\Forms\\PostForm', [\n            'model' => $post\n        ]);\n\n        return view('posts.edit', compact('form'));\n    }\n}\n```\n\nThen the view will contain:\n```html\n<form method=\"POST\" action=\"/post/1\">\n    <div class=\"form-group\">\n        <label for=\"title\" class=\"control-label\">Title</label>\n        <input type=\"text\" id=\"title\" class=\"form-control\" name=\"title\" value=\"lorem ipsum\">\n    </div>\n    <div class=\"form-group\">\n        <label for=\"body\" class=\"control-label\">Body</label>\n        <textarea id=\"body\" name=\"body\">dolor sit</textarea>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"tags\" class=\"control-label\">Tags</label>\n        <div class=\"form-group\">\n            <input type=\"text\" id=\"tags[0]\" class=\"tag\" name=\"tags[0]\" value=\"work\">\n        </div>\n        <div class=\"form-group\">\n            <input type=\"text\" id=\"tags[1]\" class=\"tag\" name=\"tags[1]\" value=\"personal\">\n        </div>\n    </div>\n</form>\n```\n\n#### Collection of child forms\n\n[Child form](#child-form) also can be used as a collection.\n\n```php\n\n<?php\nuse Kris\\LaravelFormBuilder\\Form;\n\nclass TagsForm extends Form\n{\n    public function buildForm()\n    {\n        $this\n            ->add('name', 'text')\n            ->add('desc', 'textarea');\n    }\n}\n\nclass PostForm extends Form\n{\n    public function buildForm()\n    {\n        $this\n            ->add('title', 'text')\n            ->add('body', 'textarea')\n            ->add('tags', 'collection', [\n                'type' => 'form',\n                'options' => [    // these are options for a single type\n                    'class' => 'App\\Forms\\TagsForm'\n                    'label' => false,\n                ]\n            ]);\n    }\n}\n```\nAnd with same controller setup as above, we get this:\n```html\n<form method=\"POST\" action=\"/post/1\">\n    <div class=\"form-group\">\n        <label for=\"title\" class=\"control-label\">Title</label>\n        <input type=\"text\" id=\"title\" class=\"form-control\" name=\"title\" value=\"lorem ipsum\">\n    </div>\n    <div class=\"form-group\">\n        <label for=\"body\" class=\"control-label\">Body</label>\n        <textarea id=\"body\" name=\"body\" class=\"form-control\">dolor sit</textarea>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"tags\" class=\"control-label\">Tags</label>\n        <div class=\"form-group\">\n            <div class=\"form-group\">\n                <label for=\"tags[0][name]\">Name</label>\n                <input type=\"text\" id=\"tags[0][name]\" class=\"form-control\" name=\"tags[0][name]\" value=\"work\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"tags[0][desc]\">Desc</label>\n                <textarea id=\"tags[0][desc]\" name=\"tags[0][desc]\" class=\"form-control\">For work</textarea>\n            </div>\n        </div>\n        <div class=\"form-group\">\n            <div class=\"form-group\">\n                <label for=\"tags[1][name]\">Name</label>\n                <input type=\"text\" id=\"tags[1][name]\" class=\"form-control\" name=\"tags[1][name]\" value=\"personal\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"tags[1][desc]\">Desc</label>\n                <textarea id=\"tags[1][desc]\" name=\"tags[1][desc]\" class=\"form-control\">For personal usage</textarea>\n            </div>\n        </div>\n    </div>\n```\n\n#### Prototype\n\nIf you need to dynamically generate HTML for additional elements in the collection, you can use `prototype()` method on the form field. Let's use example above:\n```html\n@extends('app')\n\n@section('content')\n    {!! form_start($form) !!}\n    <div class=\"collection-container\" data-prototype=\"{{ form_row($form->tags->prototype()) }}\"> // Use {{ }} here to escape html\n        {!! form_row($form->tags) !!}\n    </div>\n    {!! form_end($form) !!}\n    <button type=\"button\" class=\"add-to-collection\">Add to collection</button>\n    <script src=\"https://code.jquery.com/jquery-2.1.3.min.js\"></script>\n    <script>\n        $(document).ready(function() {\n            $('.add-to-collection').on('click', function(e) {\n                e.preventDefault();\n                var container = $('.collection-container');\n                var count = container.children().length;\n                var proto = container.data('prototype').replace(/__NAME__/g, count);\n                container.append(proto);\n            });\n        });\n    </script>\n@endsection\n```\n\n`data-prototype` will contain:\n```html\n    <div class=\"form-group\">\n        <div class=\"form-group\">\n            <label for=\"tags[__NAME__][name]\">Name</label>\n            <input type=\"text\" id=\"tags[__NAME__][name]\" class=\"form-control\" name=\"tags[__NAME__][name]\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"tags[__NAME__][desc]\">Desc</label>\n            <textarea id=\"tags[__NAME__][desc]\" class=\"form-control\" name=\"tags[__NAME__][desc]\"></textarea>\n        </div>\n    </div>\n```\n\nAnd clicking on the button `.add-to-collection` will automatically generate proper html from the prototype.\n\nPrototype can be configured in the form class:\n```php\nuse Kris\\LaravelFormBuilder\\Form;\n\nclass PostForm extends Form\n{\n    public function buildForm()\n    {\n        $this\n            ->add('title', 'text')\n            ->add('body', 'textarea')\n            ->add('tags', 'collection', [\n                'type' => 'text',\n                'property' => 'name',\n                'prototype' => true,            // Should prototype be generated. Default: true\n                'prototype_name' => '__NAME__' // Value used for replacing when generating new elements from prototype, default: __NAME__\n                'options' => [\n                    'label' => false,\n                    'attr' => ['class' => 'tag']\n                ]\n            ]);\n    }\n}\n```\n\n### Field Customization\nFields can be easily customized within the class or view:\n\n``` php\n<?php namespace App\\Forms;\n\nuse Kris\\LaravelFormBuilder\\Form;\n\nclass PostForm extends Form\n{\n    /**\n     * By default validation error for each field is\n     * shown under it. If you want to totally disable\n     * showing those errors, set this to false\n     */\n    protected $showFieldErrors = true;\n\n    public function buildForm()\n    {\n        $this\n            ->add('name', 'text', [\n                'wrapper' => [\n                  'class' => 'name-input-container'\n                ],\n                'required' => true, // Adds `required` class to label, and required attribute to field\n                'help_block' => [\n                    'text' => 'I am help text',  // If text is set, automatically adds help text under the field. Default: null\n                    'tag' => 'p'    // this is default,\n                    'attr' => ['class' => 'help-block']    // Default, class pulled from config file\n                ]\n                'attr' => ['class' => 'input-name', 'placeholder' => 'Enter name here...'],\n                'label' => 'Full name'\n            ])\n            ->add('bio', 'textarea', [\n                'wrapper' => false      // This disables the wrapper for this field\n            ])\n            // This creates a select field\n            ->add('subscription', 'choice', [\n                'choices' => ['monthly' => 'Monthly', 'yearly' => 'Yearly'],\n                'empty_value' => '==== Select subscription ===',\n                'multiple' => false // This is default. If set to true, it creates select with multiple select posibility\n            ])\n            ->add('categories', 'entity', [\n                'class' => 'App\\Category', // Entity that holds data\n                'property' => 'name', // Value that will be used as a label for each choice option, default: name\n                'property_key' => 'id', // Value that will be used as a value for each choice option, default: id\n                'query_builder' => function(App\\Category $category) {   // If provided, gets data from this closure and lists it\n                    return $category->where('active', 1);\n                }\n            ])\n            // This creates radio buttons\n            ->add('gender', 'choice', [\n                'label' => false,    // This forces hiding label, even when calling form_row\n                'choices' => ['m' => 'Male', 'f' => 'Female'],\n                'selected' => 'm',\n                'expanded' => true,\n                'choice_options' => [ // Handles options when expanded is true and/or multiple is true\n                    'wrapper' => ['class' => 'choice-wrapper'] // Shows the wrapper for each radio or checkbox, default is false\n                ]\n            ])\n            // Static text, holds only text, no input\n            ->add('address', 'static', [\n                'tag' => 'div' // Tag to be used for holding static data,\n                'attr' => ['class' => 'form-control-static'], // This is the default\n                'default_value' => null // If nothing is passed, data is pulled from model if any\n            ])\n            // Automatically adds enctype=\"multipart/form-data\" to form\n            ->add('image', 'file', [\n                'label' => 'Upload your image'\n            ])\n            // This creates a checkbox list\n            ->add('languages', 'choice', [\n                'choices' => [['id' => 1, 'en' => 'English'], ['id' => 2, 'de' => 'German'], ['id' => 3, 'fr' => 'France']],\n                'selected' => function ($data) { // Allows handling data before passed to view for setting default values. Useful for related models\n                    return array_pluck($data, 'id');\n                }\n                'expanded' => true,\n                'multiple' => true\n            ])\n            // Renders all fieds from song form and wraps names for better handling\n            // <input type=\"text\" name=\"song-title\"> becomes <input type=\"text\" name=\"song[song-title]\">\n            ->add('song', 'form', [\n                'class' => $this->formBuilder->create('App\\Forms\\SongForm')\n            ])\n            ->add('policy-agree', 'checkbox', [\n                'default_value' => 1,    //  <input type=\"checkbox\" value=\"1\">\n                'label' => 'I agree to policy',\n                'checked' => false    // This is the default.\n            ])\n            // Creates 2 inputs. These are the defaults\n            ->add('password', 'repeated', [\n                'type' => 'password'    // can be anything that fits <input type=\"type-here\">\n                'second_name' => 'password_confirmation', // defaults to name_confirmation\n                'first_options' => [],   // Same options available as for text type\n                'second_options' => [],   // Same options available as for text type\n            ])\n            ->add('save', 'submit', [\n                'attr' => ['class' => 'btn btn-primary']\n            ])\n            ->add('clear', 'reset', [\n                'label' => 'Clear the form',\n                'attr' => ['class' => 'btn btn-danger']\n            ]);\n    }\n}\n```\n\nYou can also remove fields from the form when neccessary. For example you don't want to show `clear` button and `subscription` fields on the example above on edit page:\n\n``` php\n<?php namespace App/Http/Controllers;\n\nuse App\\Forms\\PostForm;\n\nclass PostsController extends BaseController {\n\n    public function edit($id)\n    {\n        $post = Post::findOrFail($id);\n        $form = \\FormBuilder::create(PostForm::class, [\n            'method' => 'PUT',\n            'url' => route('posts.update', $id),\n            'model' => $post\n        ])\n        ->remove('clear')\n        ->remove('subscription');\n\n        return view('posts.edit', compact('form'));\n    }\n\n    public function update($id)\n    {\n    }\n}\n```\n\nOr you can modify it in the similar way (options passed will be merged with options from old field,\nif you want to overwrite it pass 4th parameter as `true`)\n\n``` php\n    // ...\n    public function edit($id)\n    {\n        $post = Post::findOrFail($id);\n        $form = \\FormBuilder::create(PostForm::class, [\n            'method' => 'PUT',\n            'url' => route('posts.update', $id),\n            'model' => $post,\n        ])\n        // If passed name does not exist, add() method will be called with provided params\n        ->modify('gender', 'select', [\n            'attr' => ['class' => 'form-select']\n        ], false)   // If this is set to true, options will be overwritten - default: false\n\n        return view('posts.edit', compact('form'));\n    }\n```\n\nIn a case when `choice` type has `expanded` set to `true` and/or `multiple` also set to true, you get a list of\nradios/checkboxes:\n\n``` html\n<div class=\"form-group\">\n    <label for=\"languages\" class=\"control-label\">languages</label>\n\n    <label for=\"France_fr\">France</label>\n    <input id=\"France_fr\" name=\"languages[]\" type=\"checkbox\" value=\"fr\">\n\n    <label for=\"English_en\">English</label>\n    <input id=\"English_en\" name=\"languages[]\" type=\"checkbox\" value=\"en\">\n\n    <label for=\"German_de\">German</label>\n    <input id=\"German_de\" name=\"languages[]\" type=\"checkbox\" value=\"de\">\n</div>\n```\n\nIf you maybe want to customize how each radio/checkbox is rendered, maybe wrap it in some container, you can loop over children on `languages` choice field:\n\n``` php\n    // ...\n\n    <?php foreach($form->languages->getChildren() as $child): ?>\n        <div class=\"checkbox-wrapper\">\n            <?= form_row($child, ['checked' => true]) ?>\n        </div>\n    <?php endforeach; ?>\n    // ...\n```\n\nHere is a categorized list of all available field types:\n* Simple\n  * text\n  * textarea\n  * select\n  * choice\n  * checkbox\n  * radio\n  * password\n  * hidden\n  * file\n  * static\n* Date and Time\n  * date\n  * datetime-local\n  * month\n  * time\n  * week\n* Special Purpose\n  * color\n  * search\n  * image\n  * email\n  * url\n  * tel\n  * number\n  * range\n* Buttons\n  * submit\n  * reset\n  * button\n* Form Builder Extensions\n  * repeated\n  * [form](#child-form)\n  * [collection](#collection)\n\nYou can also bind the model to the class and add other options with setters\n\n``` php\n<?php namespace App/Http/Controllers;\n\nuse Illuminate\\Routing\\Controller;\n\nclass PostsController extends BaseController {\n\n    public function edit($id)\n    {\n        $model = Post::findOrFail($id);\n\n        $form = \\FormBuilder::create('App\\Forms\\PostForm')\n            ->setMethod('PUT')\n            ->setUrl(route('post.update'))\n            ->setModel($model)   // This will automatically do Form::model($model) in the form\n            ->setData('post_choices', [ 'y' => 'yes', 'n' => 'no']) // This can be used in form like $this->getData('post_choices')\n            ->addData([   // Add multiple data values at once\n                'name' => 'some_name',\n                'some_other_data' => 'some other data'\n            ]);\n\n        // Code above is similar to this:\n\n        $form = \\FormBuilder::create('App\\Forms\\PostForm', [\n            'method' => 'PUT',\n            'url' => route('post.update'),\n            'model' => $model,\n            'data' => [ 'post_choices' => [ 'y' => 'yes', 'n' => 'no'] ]\n        ]);\n\n        or this:\n\n        $form = \\FormBuilder::create('App\\Forms\\PostForm')->setFormOptions([\n            'method' => 'PUT',\n            'url' => route('post.update'),\n            'model' => $model,\n            'data' => [ 'post_choices' => [ 'y' => 'yes', 'n' => 'no'] ]\n        ]);\n\n        // Any options passed like this except 'model' and 'data' will be passed to the view for form options\n        // So if you need to pass any data to form class, and use it only there, use setData() method or 'data' key\n        // and pass what you need\n\n        return view('posts.edit', compact('form'));\n    }\n\n    public function update()\n    {\n    }\n}\n```\n\nAnd in form, you can use that model to populate some fields like this\n\n``` php\n<?php namespace App\\Forms;\n\nuse Kris\\LaravelFormBuilder\\Form;\n\nclass PostForm extends Form\n{\n    public function buildForm()\n    {\n        // Request can be acessed if needed\n        $someRequestData = $this->getRequest()->all();\n\n        $this\n            ->add('title', 'text')\n            ->add('body', 'textearea')\n            ->add('some_choices', 'choices', [\n                'choices' => $this->getData('post_choices')     // When form is created passed as ->setData('post_choices', ['some' => 'array'])\n            ])\n            ->add('category', 'select', [\n                'choices' => $this->model->categories()->lists('id', 'name')\n            ]);\n    }\n}\n```\n\n### Changing configuration and templates\n\nAs mentioned above, bootstrap 3 form classes are used. If you want to change the defaults you can override it by running\n\n```sh\nphp artisan vendor:publish\n```\n\nThis will create config file `config/laravel-form-builder.php` and folder with views in `resources/views/vendor/laravel-form-builder`.\n\nStructure of the config needs to be like this:\n[config.php](https://github.com/kristijanhusak/laravel-form-builder/blob/master/src/config/config.php) file.\n\nchange values in `defaults` key as you wish.\n\nIf you would like to avoid typing in full namespace of the form class when creating, you can add default namespace to the config that was just published, and it will prepend it every time you want to create form:\n\n``` php\n<?php\n\n// config/app/laravel-form-builder.php\n\nreturn [\n    'default_namespace' => 'App\\Forms'\n]\n\n// app/Http/Controllers/HomeController\n\npublic function indexAction()\n{\n    \\FormBuilder::create('SongForm');\n}\n```\n\nIt is empty by default.\n\nAll views for fields and forms needs to be similar to this: [views](https://github.com/kristijanhusak/laravel-form-builder/tree/master/src/views)\n\nOther way is to change path to the templates in the\n[config.php](https://github.com/kristijanhusak/laravel-form-builder/blob/master/src/config/config.php) file.\n\n``` php\nreturn [\n    // ...\n    'checkbox' => 'posts.my-custom-checkbox'    // resources/views/posts/my-custom-checkbox.blade.php\n];\n```\n\n\nOne more way to change template is directly from Form class:\n\n``` php\n<?php namespace App\\Forms;\n\nuse Kris\\LaravelFormBuilder\\Form;\n\nclass PostForm extends Form\n{\n    public function buildForm()\n    {\n        $this\n            ->add('title', 'text')\n            ->add('body', 'textearea', [\n                'template' => 'posts.textarea'    // resources/views/posts/textarea.blade.php\n            ]);\n    }\n}\n```\n\n**When you are adding custom templates make sure they inherit functionality from defaults to prevent breaking.**\n\n### Custom fields\n\nIf you want to create your own custom field, you can do it like this:\n\n``` php\n<?php namespace App\\Forms\\Fields;\n\nuse Kris\\LaravelFormBuilder\\Fields\\FormField;\n\nclass DatetimeType extends FormField {\n\n    protected function getTemplate()\n    {\n        // At first it tries to load config variable,\n        // and if fails falls back to loading view\n        // resources/views/fields/datetime.blade.php\n        return 'fields.datetime';\n    }\n\n    public function render(array $options = [], $showLabel = true, $showField = true, $showError = true)\n    {\n        $options['somedata'] = 'This is some data for view';\n\n        return parent::render($options, $showLabel, $showField, $showError);\n    }\n}\n```\n\nAnd then in view you can use what you need:\n\n``` php\n// ...\n\n<?= $options['somedata'] ?>\n\n// ...\n```\n\n**Notice:** Package templates uses plain PHP for printing because of plans for supporting version 4 (prevent conflict with tags), but you can use blade for custom fields, just make sure to use tags that are not escaping html (`{!! !!}`)\n\nAnd then add it to published config file(`config/packages/kris/laravel-form-builder/config.php`) in key `custom-fields` key this:\n\n``` php\n// ...\n    'custom_fields' => [\n        'datetime' => 'App\\Forms\\Fields\\DatetimeType'\n    ]\n// ...\n```\n\nOr if you want to load it only for a single form, you can do it directly in BuildForm method:\n\n``` php\n<?php namespace App\\Forms;\n\nuse Kris\\LaravelFormBuilder\\Form;\n\nclass PostForm extends Form\n{\n    public function buildForm()\n    {\n        $this->addCustomField('datetime', 'App\\Forms\\Fields\\DatetimeType');\n\n        $this\n            ->add('title', 'text')\n            ->add('created_at', 'datetime')\n    }\n}\n```\n\n### Contributing\nProject follows [PSR-2](http://www.php-fig.org/psr/psr-2/) standard and it's covered with PHPUnit tests.\nPull requests should include tests and pass [Travis CI](https://travis-ci.org/kristijanhusak/laravel-form-builder) build.\n\nTo run tests first install dependencies with `composer install`.\n\nAfter that tests can be run with `vendor/bin/phpunit`\n\n### Todo\n* Add possibility to disable showing validation errors under fields - **DONE**\n* Add event dispatcher ?\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.2939453125,
          "content": "{\n    \"name\": \"kris/laravel-form-builder\",\n    \"description\": \"Laravel form builder - symfony like\",\n    \"keywords\": [\"laravel\", \"form\", \"builder\", \"symfony\"],\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Kristijan Husak\",\n            \"email\": \"husakkristijan@gmail.com\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.0\",\n        \"rdx/laravelcollective-html\": \"^6\",\n        \"illuminate/database\": \"^6 || ^7 || ^8 || ^9 || ^10 || ^11\",\n        \"illuminate/validation\": \"^6 || ^7 || ^8 || ^9 || ^10 || ^11\"\n    },\n    \"require-dev\": {\n        \"orchestra/testbench\": \"^6.13 || ^7 || ^8 || ^9\",\n        \"phpunit/phpunit\": \"^10.0\"\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"1.x-dev\"\n        },\n        \"laravel\": {\n            \"providers\": [\n                \"Kris\\\\LaravelFormBuilder\\\\FormBuilderServiceProvider\"\n            ],\n            \"aliases\": {\n                \"FormBuilder\": \"Kris\\\\LaravelFormBuilder\\\\Facades\\\\FormBuilder\"\n            }\n        }\n    },\n    \"autoload\": {\n        \"psr-0\": {\n            \"Kris\\\\LaravelFormBuilder\": \"src/\"\n        },\n        \"files\": [\n            \"src/helpers.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"classmap\": [\n            \"tests/\"\n        ]\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n"
        },
        {
          "name": "phpstan-extension.neon",
          "type": "blob",
          "size": 0.1572265625,
          "content": "services:\n    -\n        class: Kris\\LaravelFormBuilder\\PhpStan\\FormGetFieldExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n"
        },
        {
          "name": "phpunit-printer.yml",
          "type": "blob",
          "size": 0.318359375,
          "content": "options:\n  cd-printer-hide-class: false\n  cd-printer-simple-output: false\n  cd-printer-show-config: true\n  cd-printer-hide-namespace: true\n  cd-printer-anybar: false\n  cd-printer-anybar-port: 1738\nmarkers:\n  cd-pass: \"✔︎ \"\n  cd-fail: \"✖ \"\n  cd-error: \"⚈ \"\n  cd-skipped: \"=> \"\n  cd-incomplete: \"∅ \"\n  cd-risky: \"⌽ \""
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 1.232421875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit\n    backupGlobals=\"false\"\n    backupStaticProperties=\"false\"\n    bootstrap=\"vendor/autoload.php\"\n    cacheDirectory=\".phpunit.cache\"\n    colors=\"true\"\n    processIsolation=\"false\"\n    stopOnFailure=\"false\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.0/phpunit.xsd\"\n>\n    <testsuites>\n        <testsuite name=\"Package Test Suite\">\n            <directory suffix=\".php\">./tests/</directory>\n            <exclude>./tests/resources/views/</exclude>\n            <exclude>./tests/resources/lang/</exclude>\n            <exclude>./tests/Fixtures/</exclude>\n            <exclude>./tests/FormBuilderTestCase.php</exclude>\n        </testsuite>\n    </testsuites>\n    <coverage>\n        <include>\n            <directory>./src/Kris</directory>\n        </include>\n        <exclude>\n            <file>./src/Kris/LaravelFormBuilder/FormBuilderServiceProvider.php</file>\n            <file>./src/Kris/LaravelFormBuilder/Facades/FormBuilder.php</file>\n            <file>./src/Kris/LaravelFormBuilder/Console/FormMakeCommand.php</file>\n            <file>./src/Kris/LaravelFormBuilder/FormBuilderTrait.php</file>\n        </exclude>\n    </coverage>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}