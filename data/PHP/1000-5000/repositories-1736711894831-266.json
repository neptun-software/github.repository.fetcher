{
  "metadata": {
    "timestamp": 1736711894831,
    "page": 266,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "staudenmeir/eloquent-has-many-deep",
      "stars": 2709,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".docker",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.408203125,
          "content": "/.docker                export-ignore\n/.github                export-ignore\n/tests                  export-ignore\n/types                  export-ignore\n.gitattributes          export-ignore\n.gitignore              export-ignore\ndocker-compose.ci.yml   export-ignore\ndocker-compose.yml      export-ignore\nphpstan.neon.dist       export-ignore\nphpstan.types.neon.dist export-ignore\nphpunit.xml.dist        export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0634765625,
          "content": "/.idea\n/.phpunit.cache\n/vendor\n.php-cs-fixer.cache\ncomposer.lock\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "MIT License\n\nCopyright (c) 2018 Jonas Staudenmeir\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 23.03125,
          "content": "# Eloquent HasManyDeep\n\n[![CI](https://github.com/staudenmeir/eloquent-has-many-deep/actions/workflows/ci.yml/badge.svg)](https://github.com/staudenmeir/eloquent-has-many-deep/actions/workflows/ci.yml?query=branch%3Amain)\n[![Code Coverage](https://codecov.io/gh/staudenmeir/eloquent-has-many-deep/graph/badge.svg?token=H59fIf4mG6)](https://codecov.io/gh/staudenmeir/eloquent-has-many-deep)\n[![PHPStan](https://img.shields.io/badge/PHPStan-level%2010-brightgreen.svg?style=flat)](https://github.com/staudenmeir/eloquent-has-many-deep/actions/workflows/static-analysis.yml?query=branch%3Amain)\n[![Latest Stable Version](https://poser.pugx.org/staudenmeir/eloquent-has-many-deep/v/stable)](https://packagist.org/packages/staudenmeir/eloquent-has-many-deep)\n[![Total Downloads](https://poser.pugx.org/staudenmeir/eloquent-has-many-deep/downloads)](https://packagist.org/packages/staudenmeir/eloquent-has-many-deep/stats)\n[![License](https://poser.pugx.org/staudenmeir/eloquent-has-many-deep/license)](https://github.com/staudenmeir/eloquent-has-many-deep/blob/main/LICENSE)\n\nThis extended version of `HasManyThrough` allows relationships with unlimited intermediate models.  \nIt supports [many-to-many](#manytomany) and [polymorphic](#morphmany) relationships and all their possible combinations.\nIt also supports some [third-party packages](#third-party-packages).\n\nSupports Laravel 5.5+.\n\n## Installation\n\n    composer require staudenmeir/eloquent-has-many-deep:\"^1.7\"\n\nUse this command if you are in PowerShell on Windows (e.g. in VS Code):\n\n    composer require staudenmeir/eloquent-has-many-deep:\"^^^^1.7\"\n\n## Versions\n\n| Laravel | Package |\n|:--------|:--------|\n| 11.x    | 1.20    |\n| 10.x    | 1.18    |\n| 9.x     | 1.17    |\n| 8.x     | 1.14    |\n| 7.x     | 1.12    |\n| 6.x     | 1.11    |\n| 5.8     | 1.8     |\n| 5.5–5.7 | 1.7     |\n\n## Usage\n\nThe package offers two ways of defining deep relationships:  \nYou can concatenate [existing relationships](#concatenating-existing-relationships) or specify the intermediate models,\nforeign and local keys [manually](#defining-relationships-manually).\n\n- [Concatenating Existing Relationships](#concatenating-existing-relationships)\n    - [Constraints](#constraints)\n    - [Third-Party Packages](#third-party-packages)\n- [Defining Relationships Manually](#defining-relationships-manually)\n    - [HasMany](#hasmany)\n    - [ManyToMany](#manytomany)\n    - [MorphMany](#morphmany)\n    - [MorphToMany](#morphtomany)\n    - [MorphedByMany](#morphedbymany)\n    - [BelongsTo](#belongsto)\n    - [HasOneDeep](#hasonedeep)\n    - [Composite Keys](#composite-keys)\n- [Intermediate and Pivot Data](#intermediate-and-pivot-data)\n- [Intermediate and Pivot Constraints](#intermediate-and-pivot-constraints)\n- [Table Aliases](#table-aliases)\n- [Soft Deleting](#soft-deleting)\n- [Getting Unique Results](#getting-unique-results)\n- [Reversing Relationships](#reversing-relationships)\n- [IDE Helper](#ide-helper)\n\n### Concatenating Existing Relationships\n\nConsider this [example](https://laravel.com/docs/eloquent-relationships#has-many-through) from the Laravel documentation\nwith an additional level:  \n`Country` → has many → `User` → has many → `Post` → has many → `Comment`\n\nYou can define a `HasManyDeep` relationship by concatenating existing relationships:\n\n```php\nclass Country extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function comments(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeepFromRelations($this->posts(), (new Post())->comments());\n    }\n\n    public function posts()\n    {\n        return $this->hasManyThrough(Post::class, User::class);\n    }\n}\n\nclass Post extends Model\n{\n    public function comments()\n    {\n        return $this->hasMany(Comment::class);\n    }\n}\n```\n\nDefine a `HasOneDeep` relationship with `hasOneDeepFromRelations()` if you only want to retrieve a single related\ninstance.\n\n#### Constraints\n\nBy default, constraints from the concatenated relationships are not transferred to the new deep relationship.\nUse `hasManyDeepFromRelationsWithConstraints()` with the relationships as callable arrays to apply these constraints:\n\n```php\nclass Country extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function comments(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeepFromRelationsWithConstraints([$this, 'posts'], [new Post(), 'comments']);\n    }\n\n    public function posts()\n    {\n        return $this->hasManyThrough(Post::class, User::class)->where('posts.published', true);\n    }\n}\n\nclass Post extends Model\n{\n    public function comments()\n    {\n        return $this->hasMany(Comment::class)->withTrashed();\n    }\n}\n```\n\nMake sure to qualify the constraints' column names if they appear in multiple tables:  \n`->where('posts.published', true)` instead of `->where('published', true)`\n\n#### Third-Party Packages\n\nBesides native Laravel relationships, you can also concatenate relationships from these third-party packages:\n\n- https://github.com/korridor/laravel-has-many-merged: `HasManyMerged`\n- https://github.com/staudenmeir/eloquent-json-relations: `BelongsToJson`, `HasManyJson`, `HasManyThroughJson`\n- https://github.com/staudenmeir/laravel-adjacency-list: [Tree](https://github.com/staudenmeir/laravel-adjacency-list?tab=readme-ov-file#deep-relationship-concatenation)\n  & [Graph](https://github.com/staudenmeir/laravel-adjacency-list?tab=readme-ov-file#graphs-deep-relationship-concatenation)\n  relationships\n- https://github.com/topclaudy/compoships: `BelongsTo`, `HasMany`, `HasOne`\n\n### Defining Relationships Manually\n\nIf you don't have all the necessary existing relationships to concatenate them, you can also define a deep relationship\nmanually by specifying the intermediate models, foreign and local keys.\n\n#### HasMany\n\nConsider this [example](https://laravel.com/docs/eloquent-relationships#has-many-through) from the Laravel documentation\nwith an additional level:  \n`Country` → has many → `User` → has many → `Post` → has many → `Comment`\n\n```php\nclass Country extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function comments(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeep(Comment::class, [User::class, Post::class]);\n    }\n}\n```\n\nJust like with `hasManyThrough()`, the first argument of `hasManyDeep()` is the related model. The second argument is an\narray of intermediate models, from the far parent (the model where the relationship is defined) to the related model.\n\nBy default, `hasManyDeep()` uses the Eloquent conventions for foreign and local keys. You can also specify custom\nforeign keys as the third argument and custom local keys as the fourth argument:\n\n```php\nclass Country extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function comments(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeep(\n            Comment::class,\n            [User::class, Post::class], // Intermediate models, beginning at the far parent (Country).\n            [\n               'country_id', // Foreign key on the \"users\" table.\n               'user_id',    // Foreign key on the \"posts\" table.\n               'post_id'     // Foreign key on the \"comments\" table.\n            ],\n            [\n              'id', // Local key on the \"countries\" table.\n              'id', // Local key on the \"users\" table.\n              'id'  // Local key on the \"posts\" table.\n            ]\n        );\n    }\n}\n```\n\nYou can use `null` placeholders for default keys:\n\n```php\nclass Country extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function comments(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeep(Comment::class, [User::class, Post::class], [null, 'custom_user_id']);\n    }\n}\n```\n\n#### ManyToMany\n\nYou can include `ManyToMany` relationships in the intermediate path.\n\n##### ManyToMany → HasMany\n\nConsider this [example](https://laravel.com/docs/eloquent-relationships#many-to-many) from the Laravel documentation\nwith an additional `HasMany` level:  \n`User` → many to many → `Role` → has many → `Permission`\n\nAdd the pivot tables to the intermediate models:\n\n```php\nclass User extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function permissions(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeep(Permission::class, ['role_user', Role::class]);\n    }\n}\n```\n\nIf you specify custom keys, remember to swap the foreign and local key on the \"right\" side of the pivot table:\n\n```php\nclass User extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function permissions(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeep(\n            Permission::class,\n            ['role_user', Role::class], // Intermediate models and tables, beginning at the far parent (User).\n            [           \n               'user_id', // Foreign key on the \"role_user\" table.\n               'id',      // Foreign key on the \"roles\" table (local key).\n               'role_id'  // Foreign key on the \"permissions\" table.\n            ],\n            [          \n              'id',      // Local key on the \"users\" table.\n              'role_id', // Local key on the \"role_user\" table (foreign key).\n              'id'       // Local key on the \"roles\" table.\n            ]\n        );\n    }\n}\n```\n\n##### ManyToMany → ManyToMany\n\nConsider this [example](https://laravel.com/docs/eloquent-relationships#many-to-many) from the Laravel documentation\nwith an additional `ManyToMany` level:  \n`User` → many to many → `Role` → many to many → `Permission`\n\nAdd the pivot table to the intermediate models:\n\n```php\nclass User extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function permissions(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeep(Permission::class, ['role_user', Role::class, 'permission_role']);\n    }\n}\n```\n\n#### MorphMany\n\nYou can include `MorphMany` relationships in the intermediate path.\n\nConsider this [example](https://laravel.com/docs/eloquent-relationships#polymorphic-relations) from the Laravel\ndocumentation with an additional level:  \n`User` → has many → `Post` → morph many → `Comment`\n\nSpecify the polymorphic foreign keys as an array, starting with the `*_type` column:\n\n```php\nclass User extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function postComments(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeep(\n            Comment::class,\n            [Post::class],\n            [null, ['commentable_type', 'commentable_id']]\n        );\n    }\n}\n```\n\n#### MorphToMany\n\nYou can include `MorphToMany` relationships in the intermediate path.\n\nConsider this [example](https://laravel.com/docs/eloquent-relationships#many-to-many-polymorphic-relations) from the\nLaravel documentation with an additional level:    \n`User` → has many → `Post` → morph to many → `Tag`\n\nAdd the pivot table to the intermediate models and specify the polymorphic foreign keys as an array, starting with\nthe `*_type` column:\n\n```php\nclass User extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function postTags(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeep(\n            Tag::class,\n            [Post::class, 'taggables'],\n            [null, ['taggable_type', 'taggable_id'], 'id'],\n            [null, null, 'tag_id']\n        );\n    }\n}\n```\n\nRemember to swap the foreign and local key on the \"right\" side of the pivot table:\n\n#### MorphedByMany\n\nYou can include `MorphedByMany` relationships in the intermediate path.\n\nConsider this [example](https://laravel.com/docs/eloquent-relationships#many-to-many-polymorphic-relations) from the\nLaravel documentation with an additional level:  \n`Tag` → morphed by many → `Post` → has many → `Comment`\n\nAdd the pivot table to the intermediate models and specify the polymorphic local keys as an array, starting with\nthe `*_type` column:\n\n```php\nclass Tag extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function postComments(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeep(\n            Comment::class,\n            ['taggables', Post::class],\n            [null, 'id'],\n            [null, ['taggable_type', 'taggable_id']]\n        );\n    }\n}\n```\n\n#### BelongsTo\n\nYou can include `BelongsTo` relationships in the intermediate path:  \n`Tag` → morphed by many → `Post` → belongs to → `User`\n\nSwap the foreign and local key:\n\n```php\nclass Tag extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function postAuthors(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeep(\n            User::class,\n            ['taggables', Post::class],\n            [null, 'id', 'id'],\n            [null, ['taggable_type', 'taggable_id'], 'user_id']\n        );\n    }\n}\n```\n\n#### HasOneDeep\n\nDefine a `HasOneDeep` relationship if you only want to retrieve a single related instance:\n\n```php\nclass Country extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function latestComment(): \\Staudenmeir\\EloquentHasManyDeep\\HasOneDeep\n    {\n        return $this->hasOneDeep(Comment::class, [User::class, Post::class])\n            ->latest('comments.created_at');\n    }\n}\n```\n\n#### Composite Keys\n\nIf multiple columns need to match between two tables, you can define a composite key with the `CompositeKey` class.\n\nConsider this [example](https://github.com/topclaudy/compoships#example) from the `compoships` documentation with an\nadditional level:  \n`User` → has many (matching `team_id` & `category_id`) → `Task` → belongs to → `Project`\n\n```php\nuse Staudenmeir\\EloquentHasManyDeep\\Eloquent\\CompositeKey;\n\nclass User extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function projects(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeep(\n            Project::class,\n            [Task::class],\n            [new CompositeKey('team_id', 'category_id'), 'id'],\n            [new CompositeKey('team_id', 'category_id'), 'project_id']\n        );\n    }\n}\n```\n\n### Intermediate and Pivot Data\n\nUse `withIntermediate()` to retrieve attributes from intermediate tables:\n\n```php\npublic function comments(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n{\n    return $this->hasManyDeep(Comment::class, [User::class, Post::class])\n        ->withIntermediate(Post::class);\n}\n\nforeach ($country->comments as $comment) {\n    // $comment->post->title\n}\n```\n\nBy default, this will retrieve all the table's columns. Be aware that this executes a separate query to get the list of\ncolumns.\n\nYou can specify the selected columns as the second argument:\n\n```php\npublic function comments(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n{\n    return $this->hasManyDeep(Comment::class, [User::class, Post::class])\n        ->withIntermediate(Post::class, ['id', 'title']);\n}\n```\n\nAs the third argument, you can specify a custom accessor:\n\n```php\npublic function comments(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n{\n    return $this->hasManyDeep(Comment::class, [User::class, Post::class])\n        ->withIntermediate(Post::class, ['id', 'title'], 'accessor');\n}\n\nforeach ($country->comments as $comment) {\n    // $comment->accessor->title\n}\n```\n\nIf you retrieve data from multiple tables, you can use nested accessors:\n\n```php\npublic function comments(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n{\n    return $this->hasManyDeep(Comment::class, [User::class, Post::class])\n        ->withIntermediate(Post::class)\n        ->withIntermediate(User::class, ['*'], 'post.user');\n}\n\nforeach ($country->comments as $comment) {\n    // $comment->post->title\n    // $comment->post->user->name\n}\n```\n\nUse `withPivot()` for the pivot tables of `BelongsToMany` and `MorphToMany`/`MorphedByMany` relationships:\n\n```php\npublic function permissions(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n{\n    return $this->hasManyDeep(Permission::class, ['role_user', Role::class])\n        ->withPivot('role_user', ['expires_at']);\n}\n\nforeach ($user->permissions as $permission) {\n    // $permission->role_user->expires_at\n}\n```\n\nYou can specify a custom pivot model as the third argument and a custom accessor as the fourth:\n\n```php\npublic function permissions(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n{\n    return $this->hasManyDeep(Permission::class, ['role_user', Role::class])\n        ->withPivot('role_user', ['expires_at'], RoleUser::class, 'pivot');\n}\n\nforeach ($user->permissions as $permission) {\n    // $permission->pivot->expires_at\n}\n```\n\n### Intermediate and Pivot Constraints\n\nYou can apply constraints on intermediate and pivot tables:\n\n```php\nclass Country extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function comments(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeep(Comment::class, [User::class, Post::class]);\n    }\n}\n\n$commentsFromActiveUsers = $country->comments()->where('users.active', true)->get();\n```\n\n### Table Aliases\n\nIf your relationship path contains the same model multiple times, you can specify a table alias:\n\n```php\nclass Post extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function commentReplies(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeep(Comment::class, [Comment::class . ' as alias'], [null, 'parent_id']);\n    }\n}\n```\n\nUse the `HasTableAlias` trait in the models you are aliasing:\n\n```php\nclass Comment extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasTableAlias;\n}\n```\n\nFor pivot tables, this requires custom models:\n\n```php\nclass User extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function permissions(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeep(Permission::class, [RoleUser::class . ' as alias', Role::class]);\n    }\n}\n\nclass RoleUser extends Pivot\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasTableAlias;\n}\n```\n\nUse `setAlias()` to specify a table alias when concatenating existing relationships:\n\n```php\nclass Post extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function commentReplies(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeepFromRelations(\n            $this->comments(),\n            (new Comment())->setAlias('alias')->replies()\n        );\n    }\n\n    public function comments()\n    {\n        return $this->hasMany(Comment::class);\n    }\n}\n\nclass Comment extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasTableAlias;\n\n    public function replies()\n    {\n        return $this->hasMany(self::class, 'parent_id');\n    }\n}\n```\n\n### Soft Deleting\n\nBy default, soft-deleted intermediate models will be excluded from the result. Use `withTrashed()` to include them:\n\n```php\nclass Country extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function comments(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeep(Comment::class, [User::class, Post::class])\n            ->withTrashed('users.deleted_at');\n    }\n}\n\nclass User extends Model\n{\n    use SoftDeletes;\n}\n```\n\n### Getting Unique Results\n\nDeep relationships with many-to-many segments can contain duplicate models in their results. If you want to get unique\nresults, you can remove duplicates from the result collection:\n\n```php\n$uniqueComments = Country::find($id)->comments()->get()->unique();\n```\n\nIf you need to remove duplicates in the query (e.g. for pagination), try adding `distinct()`:\n\n```php\n$uniqueComments = Country::find($id)->comments()->distinct()->get();\n```\n\n`distinct()` doesn't work for all cases. If it doesn't work for you, use `groupBy()` instead:\n\n```php\n$uniqueComments = Country::find($id)->comments()\n    ->getQuery()             // Get the underlying query builder\n    ->select('comments.*')   // Select only columns from the related table\n    ->groupBy('comments.id') // Group by the related table's primary key \n    ->get();\n```\n\n### Reversing Relationships\n\nYou can define a `HasManyDeep`/`HasOneDeep` relationship by reversing an existing deep relationship\nusing `hasManyDeepFromReverse()`/`hasOneDeepFromReverse()`:\n\n```php\nclass Country extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function comments(): \\Staudenmeir\\EloquentHasManyDeep\\HasManyDeep\n    {\n        return $this->hasManyDeep(Comment::class, [User::class, Post::class]);\n    }\n}\n\nclass Comment extends Model\n{\n    use \\Staudenmeir\\EloquentHasManyDeep\\HasRelationships;\n\n    public function country(): \\Staudenmeir\\EloquentHasManyDeep\\HasOneDeep\n    {\n        return $this->hasOneDeepFromReverse(\n            (new Country())->comments()\n        );\n    }\n}\n```\n\n### IDE Helper\n\nIf you are using [barryvdh/laravel-ide-helper](https://github.com/barryvdh/laravel-ide-helper), this package provides a model hook that will correctly add relations when generating the type hints. \nThe model hook is **enabled by default** using [Package Discovery](https://laravel.com/docs/packages#package-discovery).\n\nTo enable it manually, add [model hook](https://github.com/barryvdh/laravel-ide-helper#model-hooks) to the model_hooks array.\n\n```php\n    // File: config/ide-helper.php\n\n    /*\n    |--------------------------------------------------------------------------\n    | Models hooks\n    |--------------------------------------------------------------------------\n    |\n    | Define which hook classes you want to run for models to add custom information\n    |\n    | Hooks should implement Barryvdh\\LaravelIdeHelper\\Contracts\\ModelHookInterface.\n    |\n    */\n\n    'model_hooks' => [\n        \\Staudenmeir\\EloquentHasManyDeep\\IdeHelper\\DeepRelationsHook::class,\n    ],\n```\n\nTo disable the model hook you have 3 options:\n\n - [Disable using .env](#disable-using-env)\n - [Disable using config](#disable-using-config)\n - [Disable by option out of Package Discovery](#disable-by-opting-out-of-package-discovery)\n\n#### Disable using .env\n\nUpdate your `.env` file to include:\n\n```dotenv\nELOQUENT_HAS_MANY_DEEP_IDE_HELPER_ENABLED=false\n```\n\n#### Disable using config\n\nPublish the config and disable the setting directly:\n\n```\nphp artisan vendor:publish --tag=eloquent-has-many-deep\n```\n\n```php\n    // File: config/eloquent-has-many-deep.php\n    \n    /*\n    |--------------------------------------------------------------------------\n    | IDE Helper\n    |--------------------------------------------------------------------------\n    |\n    | Automatically register the model hook to receive correct type hints\n    |\n    */\n    'ide_helper_enabled' => false,\n```\n\n#### Disable by opting out of Package Discovery\n\nUpdate your `composer.json` with the following:\n\n```json\n\"extra\": {\n    \"laravel\": {\n        \"dont-discover\": [\n            \"staudenmeir/eloquent-has-many-deep\"\n        ]\n    }\n},\n```\n\n## Contributing\n\nPlease see [CONTRIBUTING](.github/CONTRIBUTING.md) and [CODE OF CONDUCT](.github/CODE_OF_CONDUCT.md) for details.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.3642578125,
          "content": "{\n    \"name\": \"staudenmeir/eloquent-has-many-deep\",\n    \"description\": \"Laravel Eloquent HasManyThrough relationships with unlimited levels\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Jonas Staudenmeir\",\n            \"email\": \"mail@jonas-staudenmeir.de\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.2\",\n        \"illuminate/database\": \"^11.0\",\n        \"staudenmeir/eloquent-has-many-deep-contracts\": \"^1.2\"\n    },\n    \"require-dev\": {\n        \"awobaz/compoships\": \"^2.3\",\n        \"barryvdh/laravel-ide-helper\": \"^3.0\",\n        \"korridor/laravel-has-many-merged\": \"^1.1\",\n        \"larastan/larastan\": \"^3.0\",\n        \"laravel/framework\": \"^11.0\",\n        \"mockery/mockery\": \"^1.6\",\n        \"orchestra/testbench-core\": \"^9.5\",\n        \"phpunit/phpunit\": \"^11.0\",\n        \"staudenmeir/eloquent-json-relations\": \"^1.11\",\n        \"staudenmeir/laravel-adjacency-list\": \"^1.21\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Staudenmeir\\\\EloquentHasManyDeep\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests/\"\n        }\n    },\n    \"config\": {\n        \"sort-packages\": true\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"Staudenmeir\\\\EloquentHasManyDeep\\\\IdeHelperServiceProvider\"\n            ]\n        }\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.ci.yml",
          "type": "blob",
          "size": 0.9326171875,
          "content": "services:\n  php8.2:\n    image: ghcr.io/staudenmeir/php:8.2\n    working_dir: /var/www/html\n    networks:\n      - test\n    volumes:\n      - .:/var/www/html:delegated\n      - ~/.cache/composer/files:/root/.composer/cache/files\n  php8.3:\n    image: ghcr.io/staudenmeir/php:8.3\n    working_dir: /var/www/html\n    networks:\n      - test\n    volumes:\n      - .:/var/www/html:delegated\n      - ~/.cache/composer/files:/root/.composer/cache/files\n  php8.4:\n    image: ghcr.io/staudenmeir/php:8.4\n    working_dir: /var/www/html\n    networks:\n      - test\n    volumes:\n      - .:/var/www/html:delegated\n      - ~/.cache/composer/files:/root/.composer/cache/files\n  php8.4-xdebug:\n    image: ghcr.io/staudenmeir/php:8.4\n    working_dir: /var/www/html\n    networks:\n      - test\n    volumes:\n      - .:/var/www/html:delegated\n      - .docker/xdebug.ci.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n      - ~/.cache/composer/files:/root/.composer/cache/files\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.9716796875,
          "content": "services:\n  php8.2:\n    image: ghcr.io/staudenmeir/php:8.2\n    working_dir: /var/www/html\n    networks:\n      - test\n    volumes:\n      - .:/var/www/html:delegated\n      - .docker/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n  php8.3:\n    image: ghcr.io/staudenmeir/php:8.3\n    working_dir: /var/www/html\n    networks:\n      - test\n    volumes:\n      - .:/var/www/html:delegated\n      - .docker/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n  php8.4:\n    image: ghcr.io/staudenmeir/php:8.4\n    working_dir: /var/www/html\n    networks:\n      - test\n    volumes:\n      - .:/var/www/html:delegated\n      - .docker/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n  mysql:\n    image: 'mysql:5.7'\n    environment:\n      MYSQL_ROOT_PASSWORD: password\n      MYSQL_DATABASE: test\n    healthcheck:\n      test: mysqladmin ping --silent\n      interval: 5s\n      timeout: 3s\n      retries: 10\n    networks:\n      - test\n\nnetworks:\n  test:\n    driver: bridge\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 0.1484375,
          "content": "parameters:\n    level: 10\n    paths:\n        - src\n    treatPhpDocTypesAsCertain: false\n    ignoreErrors:\n        - '#Unsafe usage of new static\\(\\).#'\n"
        },
        {
          "name": "phpstan.types.neon.dist",
          "type": "blob",
          "size": 0.1083984375,
          "content": "includes:\n    - ./vendor/larastan/larastan/extension.neon\nparameters:\n    level: 10\n    paths:\n        - types\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" backupGlobals=\"false\" colors=\"true\" failOnWarning=\"true\" processIsolation=\"false\" stopOnError=\"false\" stopOnFailure=\"false\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.1/phpunit.xsd\" cacheDirectory=\".phpunit.cache\" backupStaticProperties=\"false\">\n  <testsuites>\n    <testsuite name=\"HasManyDeep Test Suite\">\n      <directory suffix=\"Test.php\">./tests</directory>\n    </testsuite>\n  </testsuites>\n  <coverage/>\n  <source>\n    <include>\n      <directory suffix=\".php\">./src</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "types",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}