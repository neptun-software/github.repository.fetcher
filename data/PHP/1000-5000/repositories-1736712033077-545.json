{
  "metadata": {
    "timestamp": 1736712033077,
    "page": 545,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "J7mbo/twitter-api-php",
      "stars": 1818,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.02734375,
          "content": ".idea/\nvendor/\ncomposer.lock"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.15234375,
          "content": "language: php\nphp:\n  - \"5.3\"\n\nbefore_install:\n  - composer self-update\n\nbefore_script:\n  - composer install\n\nscript:\n  - phpunit --configuration phpunit.xml"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0771484375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 James Mallison (j7mbo.co.uk)\n\nPermission is hereby granted, free of charge, to any person obtaining a \ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the \nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included \nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.2060546875,
          "content": "twitter-api-php\n===============\n\nSimple PHP Wrapper for Twitter API v1.1 calls\n\n[![Total Downloads](https://img.shields.io/packagist/dt/j7mbo/twitter-api-php.svg)](https://packagist.org/packages/j7mbo/twitter-api-php)\n[![Build Status](https://travis-ci.org/J7mbo/twitter-api-php.svg?branch=master)](https://travis-ci.org/J7mbo/twitter-api-php)\n[![Version](https://badge.fury.io/gh/j7mbo%2Ftwitter-api-php.svg)](https://packagist.org/packages/j7mbo/twitter-api-php)\n\n**[Changelog](https://github.com/J7mbo/twitter-api-php/wiki/Changelog)** ||\n**[Examples](https://github.com/J7mbo/twitter-api-php/wiki/Twitter-API-PHP-Wiki)** ||\n**[Wiki](https://github.com/J7mbo/twitter-api-php/wiki)**\n\n[Instructions in StackOverflow post here](http://stackoverflow.com/questions/12916539/simplest-php-example-retrieving-user-timeline-with-twitter-api-version-1-1/15314662#15314662) with examples. This post shows you how to get your tokens and more. \nIf you found it useful, please upvote / leave a comment! :)\n\nThe aim of this class is simple. You need to:\n\n- Include the class in your PHP code\n- [Create a twitter app on the twitter developer site](https://dev.twitter.com/apps/)\n- Enable read/write access for your twitter app\n- Grab your access tokens from the twitter developer site\n- [Choose a twitter API URL to make the request to](https://dev.twitter.com/docs/api/1.1/)\n- Choose either GET / POST (depending on the request) \n- Choose the fields you want to send with the request (example: `array('screen_name' => 'usernameToBlock')`)\n\nYou really can't get much simpler than that. The above bullet points are an example of how to use the class for a POST request to block a user, and at the bottom is an example of a GET request.\n\nInstallation\n------------\n\n**Normally:** If you *don't* use composer, don't worry - just include TwitterAPIExchange.php in your application.\n\n```php\nrequire_once('TwitterAPIExchange.php');\n```\n\n**Via Composer:**\n\n```bash\ncomposer require j7mbo/twitter-api-php\n```\n\nHow To Use\n----------\n\n#### Set access tokens ####\n\n```php\n$settings = array(\n    'oauth_access_token' => \"YOUR_OAUTH_ACCESS_TOKEN\",\n    'oauth_access_token_secret' => \"YOUR_OAUTH_ACCESS_TOKEN_SECRET\",\n    'consumer_key' => \"YOUR_CONSUMER_KEY\",\n    'consumer_secret' => \"YOUR_CONSUMER_SECRET\"\n);\n```\n\n#### Choose URL and Request Method ####\n\n```php\n$url = 'https://api.twitter.com/1.1/blocks/create.json';\n$requestMethod = 'POST';\n```\n\n#### Choose POST fields (or PUT fields if you're using PUT) ####\n\n```php\n$postfields = array(\n    'screen_name' => 'usernameToBlock', \n    'skip_status' => '1'\n);\n```\n\n#### Perform the request! ####\n\n```php\n$twitter = new TwitterAPIExchange($settings);\necho $twitter->buildOauth($url, $requestMethod)\n    ->setPostfields($postfields)\n    ->performRequest();\n```\n\nGET Request Example\n-------------------\n\nSet the GET field BEFORE calling buildOauth(); and everything else is the same:\n\n```php\n$url = 'https://api.twitter.com/1.1/followers/ids.json';\n$getfield = '?screen_name=J7mbo';\n$requestMethod = 'GET';\n\n$twitter = new TwitterAPIExchange($settings);\necho $twitter->setGetfield($getfield)\n    ->buildOauth($url, $requestMethod)\n    ->performRequest();\n```\n\nThat is it! Really simple, works great with the 1.1 API. Thanks to @lackovic10 and @rivers on SO!\n"
        },
        {
          "name": "TwitterAPIExchange.php",
          "type": "blob",
          "size": 10.97265625,
          "content": "<?php\n\n/**\n * Twitter-API-PHP : Simple PHP wrapper for the v1.1 API\n *\n * PHP version 5.3.10\n *\n * @category Awesomeness\n * @package  Twitter-API-PHP\n * @author   James Mallison <me@j7mbo.co.uk>\n * @license  MIT License\n * @version  1.0.4\n * @link     http://github.com/j7mbo/twitter-api-php\n */\nclass TwitterAPIExchange\n{\n    /**\n     * @var string\n     */\n    private $oauth_access_token;\n\n    /**\n     * @var string\n     */\n    private $oauth_access_token_secret;\n\n    /**\n     * @var string\n     */\n    private $consumer_key;\n\n    /**\n     * @var string\n     */\n    private $consumer_secret;\n\n    /**\n     * @var array\n     */\n    private $postfields;\n\n    /**\n     * @var string\n     */\n    private $getfield;\n\n    /**\n     * @var mixed\n     */\n    protected $oauth;\n\n    /**\n     * @var string\n     */\n    public $url;\n\n    /**\n     * @var string\n     */\n    public $requestMethod;\n\n    /**\n     * The HTTP status code from the previous request\n     *\n     * @var int\n     */\n    protected $httpStatusCode;\n\n    /**\n     * Create the API access object. Requires an array of settings::\n     * oauth access token, oauth access token secret, consumer key, consumer secret\n     * These are all available by creating your own application on dev.twitter.com\n     * Requires the cURL library\n     *\n     * @throws \\RuntimeException When cURL isn't loaded\n     * @throws \\InvalidArgumentException When incomplete settings parameters are provided\n     *\n     * @param array $settings\n     */\n    public function __construct(array $settings)\n    {\n        if (!function_exists('curl_init'))\n        {\n            throw new RuntimeException('TwitterAPIExchange requires cURL extension to be loaded, see: http://curl.haxx.se/docs/install.html');\n        }\n\n        if (!isset($settings['oauth_access_token'])\n            || !isset($settings['oauth_access_token_secret'])\n            || !isset($settings['consumer_key'])\n            || !isset($settings['consumer_secret']))\n        {\n            throw new InvalidArgumentException('Incomplete settings passed to TwitterAPIExchange');\n        }\n\n        $this->oauth_access_token = $settings['oauth_access_token'];\n        $this->oauth_access_token_secret = $settings['oauth_access_token_secret'];\n        $this->consumer_key = $settings['consumer_key'];\n        $this->consumer_secret = $settings['consumer_secret'];\n    }\n\n    /**\n     * Set postfields array, example: array('screen_name' => 'J7mbo')\n     *\n     * @param array $array Array of parameters to send to API\n     *\n     * @throws \\Exception When you are trying to set both get and post fields\n     *\n     * @return TwitterAPIExchange Instance of self for method chaining\n     */\n    public function setPostfields(array $array)\n    {\n        if (!is_null($this->getGetfield()))\n        {\n            throw new Exception('You can only choose get OR post fields (post fields include put).');\n        }\n\n        if (isset($array['status']) && substr($array['status'], 0, 1) === '@')\n        {\n            $array['status'] = sprintf(\"\\0%s\", $array['status']);\n        }\n\n        foreach ($array as $key => &$value)\n        {\n            if (is_bool($value))\n            {\n                $value = ($value === true) ? 'true' : 'false';\n            }\n        }\n\n        $this->postfields = $array;\n\n        // rebuild oAuth\n        if (isset($this->oauth['oauth_signature']))\n        {\n            $this->buildOauth($this->url, $this->requestMethod);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Set getfield string, example: '?screen_name=J7mbo'\n     *\n     * @param string $string Get key and value pairs as string\n     *\n     * @throws \\Exception\n     *\n     * @return \\TwitterAPIExchange Instance of self for method chaining\n     */\n    public function setGetfield($string)\n    {\n        if (!is_null($this->getPostfields()))\n        {\n            throw new Exception('You can only choose get OR post / post fields.');\n        }\n\n        $getfields = preg_replace('/^\\?/', '', explode('&', $string));\n        $params = array();\n\n        foreach ($getfields as $field)\n        {\n            if ($field !== '')\n            {\n                list($key, $value) = explode('=', $field);\n                $params[$key] = $value;\n            }\n        }\n\n        $this->getfield = '?' . http_build_query($params, '', '&');\n\n        return $this;\n    }\n\n    /**\n     * Get getfield string (simple getter)\n     *\n     * @return string $this->getfields\n     */\n    public function getGetfield()\n    {\n        return $this->getfield;\n    }\n\n    /**\n     * Get postfields array (simple getter)\n     *\n     * @return array $this->postfields\n     */\n    public function getPostfields()\n    {\n        return $this->postfields;\n    }\n\n    /**\n     * Build the Oauth object using params set in construct and additionals\n     * passed to this method. For v1.1, see: https://dev.twitter.com/docs/api/1.1\n     *\n     * @param string $url           The API url to use. Example: https://api.twitter.com/1.1/search/tweets.json\n     * @param string $requestMethod Either POST or GET\n     *\n     * @throws \\Exception\n     *\n     * @return \\TwitterAPIExchange Instance of self for method chaining\n     */\n    public function buildOauth($url, $requestMethod)\n    {\n        if (!in_array(strtolower($requestMethod), array('post', 'get', 'put', 'delete')))\n        {\n            throw new Exception('Request method must be either POST, GET or PUT or DELETE');\n        }\n\n        $consumer_key              = $this->consumer_key;\n        $consumer_secret           = $this->consumer_secret;\n        $oauth_access_token        = $this->oauth_access_token;\n        $oauth_access_token_secret = $this->oauth_access_token_secret;\n\n        $oauth = array(\n            'oauth_consumer_key' => $consumer_key,\n            'oauth_nonce' => time(),\n            'oauth_signature_method' => 'HMAC-SHA1',\n            'oauth_token' => $oauth_access_token,\n            'oauth_timestamp' => time(),\n            'oauth_version' => '1.0'\n        );\n\n        $getfield = $this->getGetfield();\n\n        if (!is_null($getfield))\n        {\n            $getfields = str_replace('?', '', explode('&', $getfield));\n\n            foreach ($getfields as $g)\n            {\n                $split = explode('=', $g);\n\n                /** In case a null is passed through **/\n                if (isset($split[1]))\n                {\n                    $oauth[$split[0]] = urldecode($split[1]);\n                }\n            }\n        }\n\n        $postfields = $this->getPostfields();\n\n        if (!is_null($postfields)) {\n            foreach ($postfields as $key => $value) {\n                $oauth[$key] = $value;\n            }\n        }\n\n        $base_info = $this->buildBaseString($url, $requestMethod, $oauth);\n        $composite_key = rawurlencode($consumer_secret) . '&' . rawurlencode($oauth_access_token_secret);\n        $oauth_signature = base64_encode(hash_hmac('sha1', $base_info, $composite_key, true));\n        $oauth['oauth_signature'] = $oauth_signature;\n\n        $this->url           = $url;\n        $this->requestMethod = $requestMethod;\n        $this->oauth         = $oauth;\n\n        return $this;\n    }\n\n    /**\n     * Perform the actual data retrieval from the API\n     *\n     * @param boolean $return      If true, returns data. This is left in for backward compatibility reasons\n     * @param array   $curlOptions Additional Curl options for this request\n     *\n     * @throws \\Exception\n     *\n     * @return string json If $return param is true, returns json data.\n     */\n    public function performRequest($return = true, $curlOptions = array())\n    {\n        if (!is_bool($return))\n        {\n            throw new Exception('performRequest parameter must be true or false');\n        }\n\n        $header =  array($this->buildAuthorizationHeader($this->oauth), 'Expect:');\n\n        $getfield = $this->getGetfield();\n        $postfields = $this->getPostfields();\n\n        if (in_array(strtolower($this->requestMethod), array('put', 'delete')))\n        {\n            $curlOptions[CURLOPT_CUSTOMREQUEST] = $this->requestMethod;\n        }\n\n        $options = $curlOptions + array(\n            CURLOPT_HTTPHEADER => $header,\n            CURLOPT_HEADER => false,\n            CURLOPT_URL => $this->url,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_TIMEOUT => 10,\n        );\n\n        if (!is_null($postfields))\n        {\n            $options[CURLOPT_POSTFIELDS] = http_build_query($postfields, '', '&');\n        }\n        else\n        {\n            if ($getfield !== '')\n            {\n                $options[CURLOPT_URL] .= $getfield;\n            }\n        }\n\n        $feed = curl_init();\n        curl_setopt_array($feed, $options);\n        $json = curl_exec($feed);\n\n        $this->httpStatusCode = curl_getinfo($feed, CURLINFO_HTTP_CODE);\n\n        if (($error = curl_error($feed)) !== '')\n        {\n            curl_close($feed);\n\n            throw new \\Exception($error);\n        }\n\n        curl_close($feed);\n\n        return $json;\n    }\n\n    /**\n     * Private method to generate the base string used by cURL\n     *\n     * @param string $baseURI\n     * @param string $method\n     * @param array  $params\n     *\n     * @return string Built base string\n     */\n    private function buildBaseString($baseURI, $method, $params)\n    {\n        $return = array();\n        ksort($params);\n\n        foreach($params as $key => $value)\n        {\n            $return[] = rawurlencode($key) . '=' . rawurlencode($value);\n        }\n\n        return $method . \"&\" . rawurlencode($baseURI) . '&' . rawurlencode(implode('&', $return));\n    }\n\n    /**\n     * Private method to generate authorization header used by cURL\n     *\n     * @param array $oauth Array of oauth data generated by buildOauth()\n     *\n     * @return string $return Header used by cURL for request\n     */\n    private function buildAuthorizationHeader(array $oauth)\n    {\n        $return = 'Authorization: OAuth ';\n        $values = array();\n\n        foreach($oauth as $key => $value)\n        {\n            if (in_array($key, array('oauth_consumer_key', 'oauth_nonce', 'oauth_signature',\n                'oauth_signature_method', 'oauth_timestamp', 'oauth_token', 'oauth_version'))) {\n                $values[] = \"$key=\\\"\" . rawurlencode($value) . \"\\\"\";\n            }\n        }\n\n        $return .= implode(', ', $values);\n        return $return;\n    }\n\n    /**\n     * Helper method to perform our request\n     *\n     * @param string $url\n     * @param string $method\n     * @param string $data\n     * @param array  $curlOptions\n     *\n     * @throws \\Exception\n     *\n     * @return string The json response from the server\n     */\n    public function request($url, $method = 'get', $data = null, $curlOptions = array())\n    {\n        if (strtolower($method) === 'get')\n        {\n            $this->setGetfield($data);\n        }\n        else\n        {\n            $this->setPostfields($data);\n        }\n\n        return $this->buildOauth($url, $method)->performRequest(true, $curlOptions);\n    }\n\n    /**\n     * Get the HTTP status code for the previous request\n     *\n     * @return integer\n     */\n    public function getHttpStatusCode()\n    {\n        return $this->httpStatusCode;\n    }\n}\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.716796875,
          "content": "{\n    \"require\": {\n        \"ext-curl\": \"*\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"~4.5,>=4.5.1\"\n    },\n    \"name\": \"j7mbo/twitter-api-php\",\n    \"description\": \"Simple PHP Wrapper for Twitter API v1.1 calls\",\n    \"type\": \"library\",\n    \"keywords\": [\n        \"twitter\",\n        \"PHP\",\n        \"API\"\n    ],\n    \"homepage\": \"https://github.com/j7mbo/twitter-api-php\",\n    \"license\": \"GNU Public License\",\n    \"authors\": [\n        {\n            \"name\": \"James Mallison\",\n            \"homepage\": \"https://github.com/j7mbo/twitter-api-php\"\n        }\n    ],\n    \"autoload\": {\n        \"classmap\": [\"TwitterAPIExchange.php\"]\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"1.0-dev\"\n        }\n    }\n}\n"
        },
        {
          "name": "index.php",
          "type": "blob",
          "size": 1.201171875,
          "content": "<?php\nini_set('display_errors', 1);\nrequire_once('TwitterAPIExchange.php');\n\n/** Set access tokens here - see: https://dev.twitter.com/apps/ **/\n$settings = array(\n    'oauth_access_token' => \"\",\n    'oauth_access_token_secret' => \"\",\n    'consumer_key' => \"\",\n    'consumer_secret' => \"\"\n);\n\n/** URL for REST request, see: https://dev.twitter.com/docs/api/1.1/ **/\n$url = 'https://api.twitter.com/1.1/blocks/create.json';\n$requestMethod = 'POST';\n\n/** POST fields required by the URL above. See relevant docs as above **/\n$postfields = array(\n    'screen_name' => 'usernameToBlock', \n    'skip_status' => '1'\n);\n\n/** Perform a POST request and echo the response **/\n$twitter = new TwitterAPIExchange($settings);\necho $twitter->buildOauth($url, $requestMethod)\n             ->setPostfields($postfields)\n             ->performRequest();\n\n/** Perform a GET request and echo the response **/\n/** Note: Set the GET field BEFORE calling buildOauth(); **/\n$url = 'https://api.twitter.com/1.1/followers/ids.json';\n$getfield = '?screen_name=J7mbo';\n$requestMethod = 'GET';\n$twitter = new TwitterAPIExchange($settings);\necho $twitter->setGetfield($getfield)\n             ->buildOauth($url, $requestMethod)\n             ->performRequest();\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.55078125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         syntaxCheck=\"false\"\n         bootstrap=\"./vendor/autoload.php\"\n>\n    <testsuites>\n        <testsuite name=\"Twitter-Api-PHP Test Suite\">\n            <directory>./test/</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}