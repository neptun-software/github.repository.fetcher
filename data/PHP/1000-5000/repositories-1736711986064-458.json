{
  "metadata": {
    "timestamp": 1736711986064,
    "page": 458,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "404labfr/laravel-impersonate",
      "stars": 2054,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2646484375,
          "content": "/.gitattributes     export-ignore\n/.github            export-ignore\n/.gitignore         export-ignore\n/tests              export-ignore\n/phpunit.xml        export-ignore\n/composer.lock      export-ignore\n/.scrutinizer.yml   export-ignore\n/.travis.yml        export-ignore"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0517578125,
          "content": "/vendor/\n*.phpunit.result.cache\ncomposer.lock\n/.idea\n"
        },
        {
          "name": ".scrutinizer.yml",
          "type": "blob",
          "size": 0.154296875,
          "content": "checks:\n    php:\n        code_rating: true\nfilter:\n    paths: [\"src/*.php\"]\n    excluded_paths:\n        - \"tests/\"\n        - \"config/\"\n        - \"migrations/\""
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.4140625,
          "content": "language: php\n\ncache:\n  directories:\n    - $HOME/.composer/cache\n\nmatrix:\n  include:\n    - php: 7.2\n      env: LARAVEL='6.*' TESTBENCH='4.*' COMPOSER_FLAGS='--prefer-lowest'\n    - php: 7.2\n      env: LARAVEL='6.*' TESTBENCH='4.*' COMPOSER_FLAGS='--prefer-stable'\n    - php: 7.3\n      env: LARAVEL='6.*' TESTBENCH='4.*' COMPOSER_FLAGS='--prefer-lowest'\n    - php: 7.3\n      env: LARAVEL='6.*' TESTBENCH='4.*' COMPOSER_FLAGS='--prefer-stable'\n    - php: 7.4\n      env: LARAVEL='6.*' TESTBENCH='4.*' COMPOSER_FLAGS='--prefer-lowest'\n    - php: 7.4\n      env: LARAVEL='6.*' TESTBENCH='4.*' COMPOSER_FLAGS='--prefer-stable'\n    - php: 8.0snapshot\n      env: LARAVEL='6.*' TESTBENCH='4.*' COMPOSER_FLAGS='--prefer-lowest'\n    - php: 8.0snapshot\n      env: LARAVEL='6.*' TESTBENCH='4.*' COMPOSER_FLAGS='--prefer-stable'\n    - php: 7.2\n      env: LARAVEL='7.*' TESTBENCH='5.*' COMPOSER_FLAGS='--prefer-lowest'\n    - php: 7.2\n      env: LARAVEL='7.*' TESTBENCH='5.*' COMPOSER_FLAGS='--prefer-stable'\n    - php: 7.3\n      env: LARAVEL='7.*' TESTBENCH='5.*' COMPOSER_FLAGS='--prefer-lowest'\n    - php: 7.3\n      env: LARAVEL='7.*' TESTBENCH='5.*' COMPOSER_FLAGS='--prefer-stable'\n    - php: 7.4\n      env: LARAVEL='7.*' TESTBENCH='5.*' COMPOSER_FLAGS='--prefer-lowest'\n    - php: 7.4\n      env: LARAVEL='7.*' TESTBENCH='5.*' COMPOSER_FLAGS='--prefer-stable'\n    - php: 8.0snapshot\n      env: LARAVEL='7.*' TESTBENCH='5.*' COMPOSER_FLAGS='--prefer-lowest'\n    - php: 8.0snapshot\n      env: LARAVEL='7.*' TESTBENCH='5.*' COMPOSER_FLAGS='--prefer-stable'\n    - php: 7.3\n      env: LARAVEL='8.*' TESTBENCH='6.*' COMPOSER_FLAGS='--prefer-lowest'\n    - php: 7.3\n      env: LARAVEL='8.*' TESTBENCH='6.*' COMPOSER_FLAGS='--prefer-stable'\n    - php: 7.4\n      env: LARAVEL='8.*' TESTBENCH='6.*' COMPOSER_FLAGS='--prefer-lowest'\n    - php: 7.4\n      env: LARAVEL='8.*' TESTBENCH='6.*' COMPOSER_FLAGS='--prefer-stable'\n    - php: 8.0snapshot\n      env: LARAVEL='8.*' TESTBENCH='6.*' COMPOSER_FLAGS='--prefer-lowest'\n    - php: 8.0snapshot\n      env: LARAVEL='8.*' TESTBENCH='6.*' COMPOSER_FLAGS='--prefer-stable'\n  fast_finish: true\n\nbefore_install:\n  - composer config discard-changes true\n  - travis_retry composer self-update\n  - travis_retry composer require \"laravel/framework:${LARAVEL}\" \"orchestra/testbench:${TESTBENCH}\" --no-interaction --no-update\n\ninstall:\n  - travis_retry composer update ${COMPOSER_FLAGS} --prefer-dist --no-interaction --no-suggest\n\nscript:\n  - vendor/bin/phpunit"
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 4.95703125,
          "content": "# Laravel Impersonate Changelog\n\n## 1.7.6\n\n- Supports for PHP 8.4 (thanks to [MarioGattolla](https://github.com/MarioGattolla), [#211](https://github.com/404labfr/laravel-impersonate/pull/211))\n- Dynamic redirection after leaving impersonation (thanks to [adamjsturge](https://github.com/adamjsturge), [#210](https://github.com/404labfr/laravel-impersonate/pull/210))\n\n## 1.7.5\n\n- Laravel 11.x support (thanks to [erikn69](https://github.com/erikn69), [#195](https://github.\n  com/404labfr/laravel-impersonate/pull/195))\n\n## 1.7.4\n\n- Laravel 10.x support (thanks to [freekmurze](https://github.com/freekmurze), [#175](https://github.\n  com/404labfr/laravel-impersonate/pull/175))\n\n## 1.7.3\n\n- Laravel 9.x support (thanks to [freekmurze](https://github.com/freekmurze), [#149](https://github.com/404labfr/laravel-impersonate/pull/149))\n\n## 1.7.2\n\n### Added\n\n- Supports for PHP 8.0 (thanks to [pascalbaljet](https://github.com/pascalbaljet), [#121](https://github.com/404labfr/laravel-impersonate/pull/121))\n\n### Fixed\n\n- getImpersonator() when working with multiple guards (thanks to [carsso](https://github.com/carsso)), [#120](https://github.com/404labfr/laravel-impersonate/pull/120))\n- Can't leave impersonation when multi-guard is used (thanks to [ctf0](https://github.com/ctf0), [#116](https://github.com/404labfr/laravel-impersonate/pull/117))\n\n### Changed\n\n- Allow guard name in blade directives (thanks to [ctf0](https://github.com/ctf0), [#115](https://github.com/404labfr/laravel-impersonate/pull/117))\n- Documentation about multi-guard usage (thanks to [ctf0](https://github.com/ctf0), [#117](https://github.com/404labfr/laravel-impersonate/pull/117))\n\n### Removed\n\n- composer.lock\n\n## 1.7.1\n\n### Added\n\n- Laravel 8.x support\n\n## 1.7.0\n\n### Added\n\n- `ImpersonateManager@findUserById` will now throw a `MissingUserProvider` exception when guard has no user provider [baa722b](https://github.com/404labfr/laravel-impersonate/commit/baa722b1bde0aefd9efbd9454c699b7894ddc49b)\n- `ImpersonateManager@findUserById` will now throw a `InvalidUserProvider` exception when guard has an invalid user provider [baa722b](https://github.com/404labfr/laravel-impersonate/commit/baa722b1bde0aefd9efbd9454c699b7894ddc49b)\n\n### Changed\n\n- Helper `can_be_impersonated` now use model `getAuthIdentifier()` instead of hardcoded `id` column [#105](https://github.com/404labfr/laravel-impersonate/pull/105)\n- Git attributes [#108](https://github.com/404labfr/laravel-impersonate/pull/108)\n\n## 1.6.0\n\n### Added\n\n- Laravel 7.x support\n\n### Removed\n\n- Laravel 5.x support\n\n## 1.5.1\n\n### Changed\n\n- Use `Illuminate\\Contracts\\Auth\\Authenticatable@getAuthIdentifier` instead of `Illuminate\\Database\\Eloquent\\Model@getKey` [#96](https://github.com/404labfr/laravel-impersonate/pull/96)\n- PHPDoc updated\n\n## 1.5.0\n\n### Changed\n\n- Events uses `Illuminate\\Contracts\\Auth\\Authenticatable` instead of `Illuminate\\Database\\Eloquent\\Model` [#92](https://github.com/404labfr/laravel-impersonate/pull/92)\n- PHPDoc and return values for `ImpersonateManager`\n\n### Fixed\n\n- Security issue for `symfony/http-foundation` ([CVE-2019-18888](https://github.com/advisories/GHSA-xhh6-956q-4q69)) \n\n## 1.4.3\n\n### Fixed\n\n- `can_impersonate()` helper\n- Tests for Blade directives\n\n## 1.4.2\n\n### Added\n\n- `is_impersonating()`, `can_impersonate()` and `can_be_impersonated()` helpers\n\n### Changed\n\n- Blade directives now use helpers\n\n## 1.4.1\n\n### Fixed\n\n- Laravel 6.0 dependencies compatibility\n- dump() in ImpersonateManager.php\n\n## 1.4.0\n\n### Added\n\n- Allows impersonation through multiple guards ([Pull 58](https://github.com/404labfr/laravel-impersonate/pull/58))\n- Added the public method `getImpersonator` to `ImpersonateManager` ([Pull 69](https://github.com/404labfr/laravel-impersonate/pull/69))\n\n### Changed\n\n- Laravel 6.0 compatibility (min version is 5.8) \n\n### Fixed\n\n- The user `remember_token` is now preserved ([Pull 71](https://github.com/404labfr/laravel-impersonate/pull/71))\n\n## 1.3.0 (2019-02-28)\n\n### Changed\n\n- Laravel 5.8 compatibility (min version)\n\n## 1.2.3 (2018-09-03)\n\n### Changed\n\n- Documentation\n- Use `getSessionKey()` in `take()` method\n\n## 1.2.2 (2018-01-19)\n\n### Changed\n\n- Register Blade directives after resolving\n\n### Fixed\n\n- Blade directives documentation\n\n## 1.2.1 (2017-09-03)\n\n### Changed\n\n- PHP version requirement\n- Laravel version requirement\n\n## 1.2.0 (2017-07-28)\n\n### Added\n\n- Laravel 5.5 compatibility\n- Package auto-discovery\n\n## 1.1.0 (2017-03-05)\n\n### Added\n\n- Custom Session guard driver based on the original Session Guard ([c76bb96](https://github.com/404labfr/laravel-impersonate/commit/c76bb96da9ca53b70fd3ce5d063722076ffcbcb4))\n\n### Changed\n\n- The Auth events `login`, `authenticated` and `logout` are not fired anymore when taking or leaving impersonation\n\n### Fixed\n\n- The user remember token is not touched when taking and leaving impersonation ([#11](https://github.com/404labfr/laravel-impersonate/issues/11))\n\n## 1.0.11 (2017-03-05)\n\n### Added\n\n- New blade directive `canBeImpersonated` ([#12](https://github.com/404labfr/laravel-impersonate/issues/12))\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.1142578125,
          "content": "{\n  \"name\": \"lab404/laravel-impersonate\",\n  \"description\": \"Laravel Impersonate is a plugin that allows to you to authenticate as your users.\",\n  \"type\": \"library\",\n  \"keywords\": [\n    \"laravel\",\n    \"package\",\n    \"plugin\",\n    \"impersonate\",\n    \"impersonation\",\n    \"user\",\n    \"auth\",\n    \"laravel-package\",\n    \"laravel-plugin\"\n  ],\n  \"require\": {\n    \"php\": \"^7.2 | ^8.0\",\n    \"laravel/framework\": \"^6.0 | ^7.0 | ^8.0 | ^9.0 | ^10.0 | ^11.0\"\n  },\n  \"require-dev\": {\n    \"phpunit/phpunit\": \"^7.5 | ^8.0 | ^9.0 | ^10.0\",\n    \"mockery/mockery\": \"^1.3.3\",\n    \"orchestra/testbench\": \"^4.0 | ^5.0 | ^6.0 | ^7.0 | ^8.0 | ^9.0\"\n  },\n  \"license\": \"MIT\",\n  \"authors\": [\n    {\n      \"name\": \"Marceau Casals\",\n      \"email\": \"marceau@casals.fr\"\n    }\n  ],\n  \"autoload\": {\n    \"psr-4\": {\n      \"Lab404\\\\Impersonate\\\\\": \"src/\"\n    },\n    \"files\": [\n      \"src/helpers.php\"\n    ]\n  },\n  \"autoload-dev\": {\n    \"psr-4\": {\n      \"Lab404\\\\Tests\\\\\": \"tests/\"\n    }\n  },\n  \"extra\": {\n    \"laravel\": {\n      \"providers\": [\n        \"Lab404\\\\Impersonate\\\\ImpersonateServiceProvider\"\n      ]\n    }\n  },\n  \"minimum-stability\": \"dev\",\n  \"prefer-stable\": true\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "migrations",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 1.138671875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit bootstrap=\"vendor/autoload.php\"\n         backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         verbose=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n    <testsuites>\n        <testsuite name=\"Laravel Impersonate Test Suite\">\n            <file>tests/ImpersonateManagerTest.php</file>\n            <file>tests/ModelImpersonateTest.php</file>\n            <file>tests/EventsTest.php</file>\n            <file>tests/BladeDirectivesTest.php</file>\n            <file>tests/RoutesTest.php</file>\n            <file>tests/MiddlewareProtectFromImpersonationTest.php</file>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist>\n            <directory suffix=\".php\">src/</directory>\n        </whitelist>\n    </filter>\n    <php>\n        <env name=\"SESSION_DRIVER\" value=\"array\"/>\n        <env name=\"CACHE_DRIVER\" value=\"array\"/>\n        <env name=\"APP_KEY\" value=\"AckfSECXIvnK5r28GVIWUAxmbBSjTsmF\"/>\n    </php>\n</phpunit>"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 6.9150390625,
          "content": "# Laravel Impersonate\n\n[![Build Status](https://travis-ci.org/404labfr/laravel-impersonate.svg?branch=master)](https://travis-ci.org/404labfr/laravel-impersonate) [![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/404labfr/laravel-impersonate/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/404labfr/laravel-impersonate/?branch=master)\n\n**Laravel Impersonate** makes it easy to **authenticate as your users**. Add a simple **trait** to your **user model** and impersonate as one of your users in one click.\n \n- [Requirements](#requirements)\n- [Installation](#installation)\n- [Simple usage](#simple-usage)\n    - [Using the built-in controller](#using-the-built-in-controller)\n- [Advanced Usage](#advanced-usage)\n    - [Defining impersonation authorization](#defining-impersonation-authorization)\n    - [Using your own strategy](#using-your-own-strategy)\n    - [Middleware](#middleware)\n    - [Events](#events)\n- [Configuration](#configuration)\n- [Blade](#blade)\n- [Tests](#tests)\n- [Contributors](#contributors)\n- [Why Not Just Use loginAsId()?](#rationale)\n\n## Requirements\n\n- Laravel 6.x to 11.x\n- PHP >= 7.2 or >= 8.0\n\n### Laravel support\n\n| Version       | Release       |\n|:-------------:|:-------------:|\n| 6.x to 11.x   | 1.7           |\n| 6.x, 7.x      | 1.6           |\n| 5.8           | 1.5           |\n| 5.7, 5.6      | 1.2           |\n| 5.5, 5.4      | 1.1           |\n\n## Installation\n\n- Require it with Composer:\n```bash\ncomposer require lab404/laravel-impersonate\n```\n\n- Add the service provider at the end of your `config/app.php`:\n```php\n'providers' => [\n    // ...\n    Lab404\\Impersonate\\ImpersonateServiceProvider::class,\n],\n```\n\n- Add the trait `Lab404\\Impersonate\\Models\\Impersonate` to your **User** model.\n\n## Simple usage\n\nImpersonate a user:\n```php\nAuth::user()->impersonate($other_user);\n// You're now logged as the $other_user\n```\n\nLeave impersonation:\n```php\nAuth::user()->leaveImpersonation();\n// You're now logged as your original user.\n```\n\n### Using the built-in controller\n\nIn your routes file, under web middleware, you must call the `impersonate` route macro. \n\n```php\nRoute::impersonate();\n```\n\nAlternatively, you can execute this macro with your `RouteServiceProvider`.\n\n```php\nnamespace App\\Providers;\n\nclass RouteServiceProvider extends ServiceProvider\n{\n    public function map() {\n        Route::middleware('web')->group(function (Router $router) {\n            $router->impersonate();\n        });\n    }\n}\n```\n\n```php\n// Where $id is the ID of the user you want impersonate\nroute('impersonate', $id)\n\n// Or in case of multi guards, you should also add `guardName` (defaults to `web`)\nroute('impersonate', ['id' => $id, 'guardName' => 'admin'])\n\n// Generate an URL to leave current impersonation\nroute('impersonate.leave')\n```\n\n## Advanced Usage\n\n### Defining impersonation authorization\n\nBy default all users can **impersonate** an user.  \nYou need to add the method `canImpersonate()` to your user model:\n\n```php\n    /**\n     * @return bool\n     */\n    public function canImpersonate()\n    {\n        // For example\n        return $this->is_admin == 1;\n    }\n```\n\nBy default all users can **be impersonated**.  \nYou need to add the method `canBeImpersonated()` to your user model to extend this behavior:\n\n```php\n    /**\n     * @return bool\n     */\n    public function canBeImpersonated()\n    {\n        // For example\n        return $this->can_be_impersonated == 1;\n    }\n```\n\n### Using your own strategy\n\n- Getting the manager:\n```php\n// With the app helper\napp('impersonate')\n// Dependency Injection\npublic function impersonate(ImpersonateManager $manager, $user_id) { /* ... */ }\n```\n\n- Working with the manager:\n```php\n$manager = app('impersonate');\n\n// Find an user by its ID\n$manager->findUserById($id);\n\n// TRUE if your are impersonating an user.\n$manager->isImpersonating();\n\n// Impersonate an user. Pass the original user and the user you want to impersonate\n$manager->take($from, $to);\n\n// Leave current impersonation\n$manager->leave();\n\n// Get the impersonator ID\n$manager->getImpersonatorId();\n```\n\n### Middleware\n\n**Protect From Impersonation**\n\nYou can use the middleware `impersonate.protect` to protect your routes against user impersonation.  \nThis middleware can be useful when you want to protect specific pages like users subscriptions, users credit cards, ... \n\n```php\nRouter::get('/my-credit-card', function() {\n    echo \"Can't be accessed by an impersonator\";\n})->middleware('impersonate.protect');\n```\n\n### Events\n\nThere are two events available that can be used to improve your workflow:\n- `TakeImpersonation` is fired when an impersonation is taken.\n- `LeaveImpersonation` is fired when an impersonation is leaved.\n\nEach events returns two properties `$event->impersonator` and `$event->impersonated` containing User model instance.\n\n## Configuration\n\nThe package comes with a configuration file.  \n\nPublish it with the following command:\n```bash\nphp artisan vendor:publish --tag=impersonate\n```\n\nAvailable options:\n```php\n    // The session key used to store the original user id.\n    'session_key' => 'impersonated_by',\n    // Where to redirect after taking an impersonation.\n    // Only used in the built-in controller.\n    // You can use: an URI, the keyword back (to redirect back) or a route name\n    'take_redirect_to' => '/',\n    // Where to redirect after leaving an impersonation.\n    // Only used in the built-in controller.\n    // You can use: an URI, the keyword back (to redirect back) or a route name\n    'leave_redirect_to' => '/'\n```\n\n## Blade\n\nThere are three Blade directives available.\n\n### When the user can impersonate\n\n```blade\n@canImpersonate($guard = null)\n    <a href=\"{{ route('impersonate', $user->id) }}\">Impersonate this user</a>\n@endCanImpersonate\n```\n\n### When the user can be impersonated\n\nThis comes in handy when you have a user list and want to show an \"Impersonate\" button next to all the users.\nBut you don\\'t want that button next to the current authenticated user neither to that users which should not be able to impersonated according your implementation of `canBeImpersonated()` . \n\n```blade\n@canBeImpersonated($user, $guard = null)\n    <a href=\"{{ route('impersonate', $user->id) }}\">Impersonate this user</a>\n@endCanBeImpersonated\n```\n\n### When the user is impersonated\n\n```blade\n@impersonating($guard = null)\n    <a href=\"{{ route('impersonate.leave') }}\">Leave impersonation</a>\n@endImpersonating\n```\n\n## Tests\n\n```bash\nvendor/bin/phpunit\n```\n\n## Contributors\n\n- This package was created by [MarceauKa](https://github.com/MarceauKa) and [tghpow](https://github.com/tghpow). Many thanks to all of our [contributors](https://github.com/404labfr/laravel-impersonate/graphs/contributors).\n\n## Rationale\n\n### Why not just use `loginAsId()`?\n\nThis package adds broader functionality, including Blade directives to allow you to override analytics and other tracking events when impersonating, fire events based on impersonation status, and more. Brief discussion at [issues/5](https://github.com/404labfr/laravel-impersonate/issues/5)\n\n## Licence\n\nMIT\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}