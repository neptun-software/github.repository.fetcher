{
  "metadata": {
    "timestamp": 1736712014930,
    "page": 520,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "antonioribeiro/google2fa",
      "stars": 1878,
      "defaultBranch": "8.x",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2353515625,
          "content": "/tests export-ignore\n/docs export-ignore\n/.gitattributes export-ignore\n/.gitignore export-ignore\n/.scrutinizer.yml export-ignore\n/phpunit.xml export-ignore\n/RELICENSED.md export-ignore\n/upgrading.md export-ignore\n/phpstan.neon export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.064453125,
          "content": ".phpunit.result.cache\ncoverage\ncomposer.lock\ncomposer.phar\nvendor\n"
        },
        {
          "name": ".scrutinizer.yml",
          "type": "blob",
          "size": 0.923828125,
          "content": "checks:\n    php:\n        remove_extra_empty_lines: true\n        remove_php_closing_tag: true\n        remove_trailing_whitespace: true\n        fix_use_statements:\n            remove_unused: true\n            preserve_multiple: false\n            preserve_blanklines: true\n            order_alphabetically: true\n        fix_php_opening_tag: true\n        fix_linefeed: true\n        fix_line_ending: true\n        fix_identation_4spaces: true\n        fix_doc_comments: true\n\nfilter:\n     paths: [src/*]\n     excluded_paths: [tests/*]\n\ncoding_style:\n     php: {  }\n\nbuild:\n    tests:\n        override:\n        -\n            command: 'vendor/bin/phpunit -c phpunit.xml'\n            coverage:\n                file: 'coverage/coverage-clover.xml'\n                format: 'clover'\n    nodes:\n        analysis:\n            tests:\n                override:\n                    - php-scrutinizer-run\n        tests: true\n\ntools:\n    external_code_coverage: true\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.8955078125,
          "content": "## Change Log\n\n## [8.0.1] - 2020-05-05\n### Added\n- Test using GitHub Actions\n### Fixed\n- Improve PHP 8.1 compatibility\n\n## [8.0.0] - 2020-05-05\n### Added\n- PHP 8 Support\n- Tests\n- Extract som test helpers\n- PHPStan checks\n### Changed\n- PHP required version bumped to >= 7.1\n- Exception interfaces extending Throwable\n\n## [7.0.0] - 2019-09-21\n### Added\n- PHPStan checks\n### Removed\n- Constants::ARGUMENT_NOT_SET - This is a BC break\n\n## [6.1.3] - 2019-09-21\n### Drafted\n- To fix inserted BC break\n\n## [6.1.2] - 2019-09-21\n### DELETED\n- To fix inserted BC break\n\n## [6.1.1] - 2019-09-21\n### DELETED\n- To fix inserted BC break\n\n## [6.0.0] - 2019-09-11\n### Added\n- Base exception class and interfaces\n### Removed\n- Support for PHP 5.4 to 7.0, will keep supporting PHP 7.1, 7.2, 7.3 & 7.4\n\n## [5.0.0] - 2019-05-19\n### Changed\n- Remove dead Google Charts API\n\n## [4.0.0] - 2018-10-06\n### Changed\n- Bacon QRCode package removed\n\n## [3.0.1] - 2018-03-15\n### Changed\n- Relicensed to MIT\n\n## [3.0.0] - 2018-03-07\n### Changed\n- It's now mandatory to enable Google Api secret key access by executing `setAllowInsecureCallToGoogleApis(true);`\n\n## [2.0.4] - 2017-06-22\n### Fixed\n- Fix Base32 to keep supporting PHP 5.4 && 5.5.\n\n## [2.0.3] - 2017-06-22\n## [2.0.2] - 2017-06-21\n## [2.0.1] - 2017-06-20\n### Fixed\n- Minor bugs\n\n## [2.0.0] - 2017-06-20\n### Changed\n- Drop the Laravel support in favor of a bridge package (https://github.com/antonioribeiro/google2fa-laravel).\n- Using a more secure Base 32 algorithm, to prevent cache-timing attacks.\n- Added verifyKeyNewer() method to prevent reuse of keys.\n- Refactored to remove complexity, by extracting support methods.\n- Created a package playground page (https://pragmarx.com/google2fa)\n\n## [2.0.0] - 2017-06-20\n### Changed\n- Drop the Laravel support in favor of a bridge package (https://github.com/antonioribeiro/google2fa-laravel).\n- Using a more secure Base 32 algorithm, to prevent cache-timing attacks.\n- Added verifyKeyNewer() method to prevent reuse of keys.\n- Refactored to remove complexity, by extracting support methods.\n- Created a package playground page (https://pragmarx.com/google2fa)\n\n## [1.0.1] - 2016-07-18\n### Changed\n- Drop support for PHP 5.3.7, require PHP 5.4+.\n- Coding style is now PSR-2 automatically enforced by StyleCI.\n\n## [1.0.0] - 2016-07-17\n### Changed\n- Package bacon/bacon-qr-code was moved to \"suggest\".\n\n## [0.8.1] - 2016-07-17\n### Fixed\n- Allow paragonie/random_compat ~1.4|~2.0.\n\n## [0.8.0] - 2016-07-17\n### Changed\n- Bumped christian-riesen/base32 to ~1.3\n- Use paragonie/random_compat to generate cryptographically secure random secret keys\n- Readme improvements\n- Drop simple-qrcode in favor of bacon/bacon-qr-code\n- Fix tavis setup for phpspec, PHP 7, hhvm and improve cache\n\n## [0.7.0] - 2015-11-07\n### Changed\n- Fixed URL generation for QRCodes\n- Avoid time attacks\n\n## [0.2.0] - 2015-02-19\n### Changed\n- Laravel 5 compatibility.\n\n## [0.1.0] - 2014-07-06\n### Added\n- First version.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.068359375,
          "content": "Copyright 2014-2018 Phil, Antonio Carlos Ribeiro and All Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.466796875,
          "content": "# Google2FA\n## Google Two-Factor Authentication for PHP\n\nGoogle2FA is a PHP implementation of the Google Two-Factor Authentication Module, supporting the HMAC-Based One-time Password (HOTP) algorithm specified in [RFC 4226](https://tools.ietf.org/html/rfc4226) and the Time-based One-time Password (TOTP) algorithm specified in [RFC 6238](https://tools.ietf.org/html/rfc6238).\n\n---\n\n<p align=\"center\">\n    <a href=\"https://packagist.org/packages/pragmarx/google2fa\"><img alt=\"Latest Stable Version\" src=\"https://img.shields.io/packagist/v/pragmarx/google2fa.svg?style=flat-square\"></a>\n    <a href=\"LICENSE.md\"><img alt=\"License\" src=\"https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square\"></a>\n    <a href=\"https://scrutinizer-ci.com/g/antonioribeiro/google2fa/?branch=master\"><img alt=\"Code Quality\" src=\"https://img.shields.io/scrutinizer/g/antonioribeiro/google2fa.svg?style=flat-square\"></a>\n    <a href=\"https://github.com/antonioribeiro/google2fa/actions/workflows/run-tests.yml\"><img alt=\"Run tests\" src=\"https://github.com/antonioribeiro/google2fa/actions/workflows/run-tests.yml/badge.svg\"></a>\n    <a href=\"https://packagist.org/packages/pragmarx/google2fa\"><img alt=\"Downloads\" src=\"https://img.shields.io/packagist/dt/pragmarx/google2fa.svg?style=flat-square\"></a>\n</p>\n<p align=\"center\">\n    <a href=\"https://packagist.org/packages/pragmarx/google2fa\"><img alt=\"Monthly Downloads\" src=\"https://poser.pugx.org/pragmarx/google2fa/d/monthly?format=flat-square\"></a>\n    <a href=\"https://scrutinizer-ci.com/g/antonioribeiro/google2fa/?branch=master\"><img alt=\"Coverage\" src=\"https://img.shields.io/scrutinizer/coverage/g/antonioribeiro/google2fa.svg?style=flat-square\"></a>\n</p>\n\n---\n\n## Menu\n\n  - [Version Compatibility](#version-compatibility)\n  - [Google Two-Factor Authentication for PHP](#google-two-factor-authentication-for-php)\n  - [Laravel bridge](#laravel-bridge)\n  - [Demos, Example & Playground](#demos-example--playground)\n  - [Requirements](#requirements)\n  - [Installing](#installing)\n  - [Usage](#usage)\n  - [How To Generate And Use Two Factor Authentication](#how-to-generate-and-use-two-factor-authentication)\n  - [Generating QRCodes](#generating-qrcodes)\n  - [QR Code Packages](#qr-code-packages)\n  - [Examples of Usage](#examples-of-usage)\n  - [HMAC Algorithms](#hmac-algorithms)\n  - [Server Time](#server-time)\n  - [Validation Window](#validation-window)\n  - [Using a Bigger and Prefixing the Secret Key](#using-a-bigger-and-prefixing-the-secret-key)\n  - [Google Authenticator secret key compatibility](#google-authenticator-secret-key-compatibility)\n  - [Google Authenticator Apps](#google-authenticator-apps)\n  - [Deprecation Warning](#deprecation-warning)\n  - [Testing](#testing)\n  - [Authors](#authors)\n  - [License](#license)\n  - [Contributing](#contributing)\n\n## Version Compatibility\n\n PHP     | Google2FA\n:--------|:----------\n 5.4     | 7.x LTS\n 5.5     | 7.x LTS\n 5.6     | 7.x LTS\n 7.1     | 8.x\n 7.2     | 8.x\n 7.3     | 8.x\n 7.4     | 8.x\n 8.0 (Î²) | 8.x\n\n## Laravel bridge\n\nThis package is agnostic, but there's a [Laravel bridge](https://github.com/antonioribeiro/google2fa-laravel).\n\n## About QRCode generation\n\nThis package does not generate QRCodes for 2FA.\n\nIf you are looking for Google Two-Factor Authentication, but also need to generate QRCode for it, you can use the [Google2FA QRCode package](https://github.com/antonioribeiro/google2fa-qrcode), which integrates this package and also generates QRCodes using the BaconQRCode library, or check options on how to do it yourself [here in the docs](#qr-code-packages).\n\n## Demos, Example & Playground\n\nPlease check the [Google2FA Package Playground](http://pragmarx.com/playground/google2fa).\n\n![playground](docs/playground.jpg)\n\nHere's a demo app showing how to use Google2FA: [google2fa-example](https://github.com/antonioribeiro/google2fa-example).\n\nYou can scan the QR code on [this (old) demo page](https://antoniocarlosribeiro.com/technology/google2fa) with a Google Authenticator app and view the code changing (almost) in real time.\n\n## Requirements\n\n- PHP 7.1 or greater\n\n## Installing\n\nUse Composer to install it:\n\n    composer require pragmarx/google2fa\n\nTo generate inline QRCodes, you'll need to install a QR code generator, e.g. [BaconQrCode](https://github.com/Bacon/BaconQrCode):\n\n    composer require bacon/bacon-qr-code\n\n## Usage\n\n### Instantiate it directly\n\n```php\nuse PragmaRX\\Google2FA\\Google2FA;\n\n$google2fa = new Google2FA();\n\nreturn $google2fa->generateSecretKey();\n```\n\n## How To Generate And Use Two Factor Authentication\n\nGenerate a secret key for your user and save it:\n\n```php\n$user->google2fa_secret = $google2fa->generateSecretKey();\n```\n\n## Generating QRCodes\n\nThe more secure way of creating QRCode is to do it yourself or using a library. First you have to install a QR code generator e.g. BaconQrCode, as stated above, then you just have to generate the QR code url using:\n\n```php\n$qrCodeUrl = $google2fa->getQRCodeUrl(\n    $companyName,\n    $companyEmail,\n    $secretKey\n);\n```\n\nOnce you have the QR code url, you can feed it to your preferred QR code generator.\n\n```php\n// Use your own QR Code generator to generate a data URL:\n$google2fa_url = custom_generate_qrcode_url($qrCodeUrl);\n\n/// and in your view:\n\n<img src=\"{{ $google2fa_url }}\" alt=\"\">\n```\n\nAnd to verify, you just have to:\n\n```php\n$secret = $request->input('secret');\n\n$valid = $google2fa->verifyKey($user->google2fa_secret, $secret);\n```\n\n## QR Code Packages\n\nThis package suggests the use of [Bacon/QRCode](https://github.com/Bacon/BaconQrCode) because\nit is known as a good QR Code package, but you can use it with any other package, for\ninstance [Google2FA QRCode](https://github.com/antonioribeiro/google2fa-qrcode),\n[Simple QrCode](https://www.simplesoftware.io/docs/simple-qrcode)\nor [Endroid QR Code](https://github.com/endroid/qr-code), all of them use\n[Bacon/QRCode](https://github.com/Bacon/BaconQrCode) to produce QR Codes.\n\nUsually you'll need a 2FA URL, so you just have to use the URL generator:\n\n```php\n$google2fa->getQRCodeUrl($companyName, $companyEmail, $secretKey)\n```\n\n## Examples of Usage\n\n### [Google2FA QRCode](https://github.com/antonioribeiro/google2fa-qrcode)\n\nGet a QRCode to be used inline:\n\n```php\n$google2fa = (new \\PragmaRX\\Google2FAQRCode\\Google2FA());\n\n$inlineUrl = $google2fa->getQRCodeInline(\n    'Company Name',\n    'company@email.com',\n    $google2fa->generateSecretKey()\n);\n```\n\nAnd use in your template:\n\n```php\n<img src=\"{{ $inlineUrl }}\">\n```\n\n### [Simple QrCode](https://www.simplesoftware.io/docs/simple-qrcode)\n\n```php\n<div class=\"visible-print text-center\">\n    {!! QrCode::size(100)->generate($google2fa->getQRCodeUrl($companyName, $companyEmail, $secretKey)); !!}\n    <p>Scan me to return to the original page.</p>\n</div>\n```\n\n### [Endroid QR Code Generator](https://github.com/endroid/qr-code)\n\nGenerate the data URL\n\n```php\n\n$qrCode = new \\Endroid\\QrCode\\QrCode($value);\n$qrCode->setSize(100);\n$google2fa_url = $qrCode->writeDataUri();\n```\n\nAnd in your view\n\n```php\n<div class=\"visible-print text-center\">\n    {!! $google2fa_url !!}\n    <p>Scan me to return to the original page.</p>\n</div>\n```\n\n### [Bacon/QRCode](https://github.com/Bacon/BaconQrCode)\n\n```php\n<?php\n\nuse PragmaRX\\Google2FA\\Google2FA;\nuse BaconQrCode\\Renderer\\ImageRenderer;\nuse BaconQrCode\\Renderer\\Image\\ImagickImageBackEnd;\nuse BaconQrCode\\Renderer\\RendererStyle\\RendererStyle;\nuse BaconQrCode\\Writer;\n\n$google2fa = app(Google2FA::class);\n\n$g2faUrl = $google2fa->getQRCodeUrl(\n    'pragmarx',\n    'google2fa@pragmarx.com',\n    $google2fa->generateSecretKey()\n);\n\n$writer = new Writer(\n    new ImageRenderer(\n        new RendererStyle(400),\n        new ImagickImageBackEnd()\n    )\n);\n\n$qrcode_image = base64_encode($writer->writeString($g2faUrl));\n```\n\nAnd show it as an image:\n\n```php\n<img src=\"data:image/png;base64, <?php echo $qrcode_image; ?> \"/>\n```\n\n## HMAC Algorithms\n\nTo comply with [RFC6238](https://tools.ietf.org/html/rfc6238), this package supports SHA1, SHA256 and SHA512. It defaults to SHA1, so to use a different algorithm you just have to use the method `setAlgorithm()`:\n\n``` php\n\nuse PragmaRX\\Google2FA\\Support\\Constants;\n\n$google2fa->setAlgorithm(Constants::SHA512);\n```\n\n## Server Time\n\nIt's really important that you keep your server time in sync with some NTP server, on Ubuntu you can add this to the crontab:\n\n```bash\nsudo service ntp stop\nsudo ntpd -gq\nsudo service ntp start\n```\n\n## Validation Window\n\nTo avoid problems with clocks that are slightly out of sync, we do not check against the current key only but also consider `$window` keys each from the past and future. You can pass `$window` as optional third parameter to `verifyKey`, it defaults to `1`. When a new key is generated every 30 seconds, then with the default setting, keys from one previous, the current, and one next 30-seconds intervals will be considered. To the user with properly synchronized clock, it will look like the key is valid for 60 seconds instead of 30, as the system will accept it even when it is already expired for let's say 29 seconds.\n\n```php\n$secret = $request->input('secret');\n\n$window = 8; // 8 keys (respectively 4 minutes) past and future\n\n$valid = $google2fa->verifyKey($user->google2fa_secret, $secret, $window);\n```\n\nSetting the `$window` parameter to `0` may also mean that the system will not accept a key that was valid when the user has seen it in their generator as it usually takes some time for the user to input the key to the particular form field.\n\nAn attacker might be able to watch the user entering his credentials and one time key.\nWithout further precautions, the key remains valid until it is no longer within the window of the server time. In order to prevent usage of a one time key that has already been used, you can utilize the `verifyKeyNewer` function.\n\n```php\n$secret = $request->input('secret');\n\n$timestamp = $google2fa->verifyKeyNewer($user->google2fa_secret, $secret, $user->google2fa_ts);\n\nif ($timestamp !== false) {\n    $user->update(['google2fa_ts' => $timestamp]);\n    // successful\n} else {\n    // failed\n}\n```\n\nNote that `$timestamp` is either `false` (if the key is invalid or has been used before) or the provided key's unix timestamp divided by the key regeneration period of 30 seconds.\n\n## Using a Bigger and Prefixing the Secret Key\n\nAlthough the probability of collision of a 16 bytes (128 bits) random string is very low, you can harden it by:\n\n#### Use a bigger key\n\n```php\n$secretKey = $google2fa->generateSecretKey(32); // defaults to 16 bytes\n```\n\n#### You can prefix your secret keys\n\nYou may prefix your secret keys, but you have to understand that, as your secret key must have length in power of 2, your prefix will have to have a complementary size. So if your key is 16 bytes long, if you add a prefix it must also be 16 bytes long, but as your prefixes will be converted to base 32, the max length of your prefix is 10 bytes. So, those are the sizes you can use in your prefixes:\n\n```\n1, 2, 5, 10, 20, 40, 80...\n```\n\nAnd it can be used like so:\n\n```php\n$prefix = strpad($userId, 10, 'X');\n\n$secretKey = $google2fa->generateSecretKey(16, $prefix);\n```\n\n#### Window\n\nThe Window property defines how long a OTP will work, or how many cycles it will last. A key has a 30 seconds cycle, setting the window to 0 will make the key last for those 30 seconds, setting it to 2 will make it last for 120 seconds. This is how you set the window:\n\n```php\n$secretKey = $google2fa->setWindow(4);\n```\n\nBut you can also set the window while checking the key. If you need to set a window of 4 during key verification, this is how you do:\n\n```php\n$isValid = $google2fa->verifyKey($seed, $key, 4);\n```\n\n#### Key Regeneration Interval\n\nYou can change key regeneration interval, which defaults to 30 seconds, but remember that this is a default value on most authentication apps, like Google Authenticator, which will, basically, make your app out of sync with them.\n\n```php\n$google2fa->setKeyRegeneration(40);\n```\n\n## Google Authenticator secret key compatibility\n\nTo be compatible with Google Authenticator, your (converted to base 32) secret key length must be at least 8 chars and be a power of 2: 8, 16, 32, 64...\n\nSo, to prevent errors, you can do something like this while generating it:\n\n```php\n$secretKey = '123456789';\n\n$secretKey = str_pad($secretKey, pow(2,ceil(log(strlen($secretKey),2))), 'X');\n```\n\nAnd it will generate\n\n```\n123456789XXXXXXX\n```\n\nBy default, this package will enforce compatibility, but, if Google Authenticator is not a target, you can disable it by doing\n\n```php\n$google2fa->setEnforceGoogleAuthenticatorCompatibility(false);\n```\n\n## Google Authenticator Apps\n\nTo use the two factor authentication, your user will have to install a Google Authenticator compatible app, those are some of the currently available:\n\n* [Authy for iOS, Android, Chrome, OS X](https://www.authy.com/)\n* [FreeOTP for iOS, Android and Pebble](https://apps.getpebble.com/en_US/application/52f1a4c3c4117252f9000bb8)\n* [Google Authenticator for iOS](https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8)\n* [Google Authenticator for Android](https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2)\n* [Google Authenticator (port) on Windows Store](https://www.microsoft.com/en-us/store/p/google-authenticator/9wzdncrdnkrf)\n* [Microsoft Authenticator for Windows Phone](https://www.microsoft.com/en-us/store/apps/authenticator/9wzdncrfj3rj)\n* [LastPass Authenticator for iOS, Android, OS X, Windows](https://lastpass.com/auth/)\n* [1Password for iOS, Android, OS X, Windows](https://1password.com)\n\n## Deprecation Warning\n\nGoogle API for QR generator is turned off. All versions of that package prior to 5.0.0 are deprecated. Please upgrade and check documentation regarding [QRCode generation](https://github.com/antonioribeiro/google2fa#generating-qrcodes).\n\n## Testing\n\nThe package tests were written with [PHPUnit](https://phpunit.de/). There are some Composer scripts to help you run tests and analysis:\n\nPHPUnit:\n\n````\ncomposer test\n````\n\nPHPStan analysis:\n\n````\ncomposer analyse\n````\n\n## Authors\n\n- [Antonio Carlos Ribeiro](http://twitter.com/iantonioribeiro)\n- [Phil (Orginal author of this class)](https://www.idontplaydarts.com/static/ga.php_.txt)\n- [All Contributors](https://github.com/antonioribeiro/google2fa/graphs/contributors)\n\n## License\n\nGoogle2FA is licensed under the MIT License - see the [LICENSE](LICENSE.md) file for details.\n\n## Contributing\n\nPull requests and issues are more than welcome.\n\n## Sponsorships\n\n### Direct\n\nNone.\n\n### Indirect\n\n- JetBrains - [Open Source License](https://www.jetbrains.com/community/opensource/#support) (since 2020)\n- Blackfire - [Open Source License](https://www.blackfire.io/open-source/) (since 2022)\n"
        },
        {
          "name": "RELICENSED.md",
          "type": "blob",
          "size": 1.13671875,
          "content": "# Package Relicensed\n\nAs per [Issue #100](https://github.com/antonioribeiro/google2fa/issues/100) the relicensing of this package from GPLv3 to MIT was approved by the original developer of the Google2FA class (Phil) and the majority of the contributors, by contributions, of this package.\n\n# Original License\n\n``` php\n/**\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * PHP Google two-factor authentication module.\n *\n * See https://www.idontplaydarts.com/2011/07/google-totp-two-factor-authentication-for-php/\n * for more details\n *\n * @author Phil\n **/\n```\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.095703125,
          "content": "{\n    \"name\": \"pragmarx/google2fa\",\n    \"description\": \"A One Time Password Authentication package, compatible with Google Authenticator.\",\n    \"keywords\": [\n        \"authentication\",\n        \"two factor authentication\",\n        \"google2fa\",\n        \"2fa\"\n    ],\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Antonio Carlos Ribeiro\",\n            \"email\": \"acr@antoniocarlosribeiro.com\",\n            \"role\": \"Creator & Designer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^7.1|^8.0\",\n        \"paragonie/constant_time_encoding\": \"^1.0|^2.0|^3.0\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^7.5.15|^8.5|^9.0\",\n        \"phpstan/phpstan\": \"^1.9\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"PragmaRX\\\\Google2FA\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"PragmaRX\\\\Google2FA\\\\Tests\\\\\": \"tests/\"\n        },\n        \"files\": [\"tests/helpers.php\"]\n    },\n    \"scripts\": {\n        \"test\": \"bash ./tests/tools/test.sh\",\n        \"analyse\": \"bash ./tests/tools/analyse.sh\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.0537109375,
          "content": "parameters:\n  paths:\n    - src\n    - tests\n\n  level: 5\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 1.1298828125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         bootstrap=\"tests/bootstrap.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnError=\"false\"\n         stopOnFailure=\"false\"\n         verbose=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"Laravel Test Suite\">\n            <directory suffix=\"Test.php\">./tests</directory>\n        </testsuite>\n    </testsuites>\n\n    <logging>\n        <log type=\"coverage-html\" target=\"coverage/\" lowUpperBound=\"35\" highLowerBound=\"70\"/>\n        <log type=\"coverage-clover\" target=\"coverage/coverage-clover.xml\" lowUpperBound=\"35\" highLowerBound=\"70\"/>\n        <log type=\"coverage-text\" target=\"php://stdout\" showUncoveredFiles=\"true\"/>\n    </logging>\n\n    <filter>\n        <whitelist addUncoveredFilesFromWhitelist=\"true\" processUncoveredFilesFromWhitelist=\"true\">\n            <directory suffix=\".php\">./src</directory>\n            <exclude></exclude>\n        </whitelist>\n    </filter>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}