{
  "metadata": {
    "timestamp": 1736712190980,
    "page": 870,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "overtrue/socialite",
      "stars": 1312,
      "defaultBranch": "4.x",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.154296875,
          "content": "/vendor\ncomposer.phar\ncomposer.lock\n.DS_Store\n/.idea\nThumbs.db\n/*.php\nsftp-config.json\n*.cache.phpunit.result.cache\n.phpunit.result.cache\n.php-cs-fixer.cache\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0654296875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2021 overtrue <i@overtrue.me>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.185546875,
          "content": "# Socialite\n\nSocialite 是一个 [OAuth2](https://oauth.net/2/) 认证工具。 它的灵感来源于 [laravel/socialite](https://github.com/laravel/socialite) ， 你可以很轻易的在任何 PHP 项目中使用它。[英文文档](/README_EN.md)\n\n[![GitHub release (latest SemVer)](https://img.shields.io/github/v/release/overtrue/socialite?style=flat-square)](https://github.com/overtrue/socialite/releases)\n[![GitHub License](https://img.shields.io/github/license/overtrue/socialite?style=flat-square)](https://github.com/overtrue/socialite/blob/master/LICENSE)\n[![Packagist Downloads](https://img.shields.io/packagist/dt/overtrue/socialite?style=flat-square)](https://packagist.org/packages/overtrue/socialite)\n\n[![Sponsor me](https://github.com/overtrue/overtrue/blob/master/sponsor-me-button-s.svg?raw=true)](https://github.com/sponsors/overtrue)\n\n该工具现已支持平台有：Facebook，Github，Google，Linkedin，Outlook，QQ，TAPD，支付宝，淘宝，百度，钉钉，微博，微信，抖音，飞书，Lark，豆瓣，企业微信，腾讯云，Line，Gitee，Coding。\n\n如果你喜欢我的项目并想支持我，[点击这里 :heart:](https://github.com/sponsors/overtrue)\n\n## 版本要求\n\nPHP >= 8.0.2\n\n## 安装\n\n```shell\ncomposer require \"overtrue/socialite\" -vvv\n```\n\n## 使用指南\n\n用户只需要创建相应配置变量，然后通过工具为各个平台创建认证应用，并轻松获取该平台的 access_token 和用户相关信息。工具实现逻辑详见参照各大平台 OAuth2 文档。\n\n工具使用大致分为以下几步：\n\n1. 配置平台设置\n2. 创建对应平台应用\n3. 让用户跳转至平台认证\n4. 服务器收到平台回调 Code，使用 Code 换取平台处用户信息（包括 access_token）\n\n为 Laravel 用户创建的更方便的整合的包： [overtrue/laravel-socialite](https://github.com/overtrue/laravel-socialite)\n\n`authorize.php`: 让用户跳转至平台认证\n\n```php\n<?php\n\nuse Overtrue\\Socialite\\SocialiteManager;\n\n$config = [\n    'github' => [\n        'client_id'     => 'your-app-id',\n        'client_secret' => 'your-app-secret',\n        'redirect'      => 'http://localhost/socialite/callback.php',\n    ],\n];\n\n$socialite = new SocialiteManager($config);\n\n$url = $socialite->create('github')->redirect();\n\nreturn redirect($url);\n```\n\n`callback.php`:\n\n```php\n<?php\n\nuse Overtrue\\Socialite\\SocialiteManager;\n\n$config = [\n    'github' => [\n        'client_id' => 'your-app-id',\n        'client_secret' => 'your-app-secret',\n        'redirect' => 'http://localhost/socialite/callback.php',\n    ],\n];\n\n$socialite = new SocialiteManager($config);\n\n$code = request()->query('code');\n\n$user = $socialite->create('github')->userFromCode($code);\n\n$user->getId();        // 1472352\n$user->getNickname();  // \"overtrue\"\n$user->getUsername();  // \"overtrue\"\n$user->getName();      // \"安正超\"\n$user->getEmail();     // \"anzhengchao@gmail.com\"\n...\n```\n\n## 配置\n\n为每个平台设置相同的键值对后就能开箱即用：`client_id`, `client_secret`, `redirect`.\n\n示例：\n\n```php\n$config = [\n  'weibo' => [\n    'client_id'     => 'your-app-id',\n    'client_secret' => 'your-app-secret',\n    'redirect'      => 'http://localhost/socialite/callback.php',\n  ],\n  'facebook' => [\n    'client_id'     => 'your-app-id',\n    'client_secret' => 'your-app-secret',\n    'redirect'      => 'http://localhost/socialite/callback.php',\n  ],\n];\n```\n\n### 自定义应用名\n\n你可以使用任意你喜欢的名字对每个平台进行命名，比如说 `foo`， 采用别名的方法后需要在配置中多设置一个 `provider` 键，这样才能告诉工具包如何正确找到你想要的程序：\n\n```php\n$config = [\n  // 为 github 应用起别名为 foo\n    'foo' => [\n        'provider'    => 'github',  // <-- provider name\n        'client_id'   => 'your-app-id',\n        'client_secret' => 'your-app-secret',\n        'redirect'    => 'http://localhost/socialite/callback.php',\n    ],\n\n    // 另外一个名字叫做 bar 的 github 应用\n    'bar' => [\n        'provider'    => 'github',  // <-- provider name\n        'client_id'   => 'your-app-id',\n        'client_secret' => 'your-app-secret',\n        'redirect'    => 'http://localhost/socialite/callback.php',\n    ],\n\n    //...\n];\n\n$socialite = new SocialiteManager($config);\n\n$appFoo = $socialite->create('foo');\n$appBar = $socialite->create('bar');\n```\n\n### 扩展自定义服务提供程序\n\n你可以很容易的从自定义的服务提供中创建应用，只需要遵循如下两点：\n\n1. 使用自定义创建器\n\n   如下代码所示，为 foo 应用定义了服务提供名，但是工具本身还未支持，所以使用创建器 `extend()`，以闭包函数的形式为该服务提供创建一个实例。\n\n```php\n$config = [\n    'foo' => [\n        'provider' => 'myprovider',  // <-- 一个工具还未支持的服务提供程序\n        'client_id' => 'your-app-id',\n        'client_secret' => 'your-app-secret',\n        'redirect' => 'http://localhost/socialite/callback.php',\n    ],\n];\n\n$socialite = new SocialiteManager($config);\n\n$socialite->extend('myprovider', function(array $config) {\n    return new MyCustomProvider($config);\n});\n\n$app = $socialite->create('foo');\n```\n\n1. 使用服务提供类\n\n> [!IMPORTANT]  \n> \n> 👋🏻 你的自定义服务提供类必须实现 `Overtrue\\Socialite\\Contracts\\ProviderInterface` 接口\n\n```php\nclass MyCustomProvider implements \\Overtrue\\Socialite\\Contracts\\ProviderInterface\n{\n    //...\n}\n```\n\n接下来为 `provider` 设置该类名让工具可以找到该类并实例化：\n\n```php\n$config = [\n    'foo' => [\n        'provider'    => MyCustomProvider::class,  // <-- 类名\n        'client_id'   => 'your-app-id',\n        'client_secret' => 'your-app-secret',\n        'redirect'    => 'http://localhost/socialite/callback.php',\n    ],\n];\n\n$socialite = new SocialiteManager($config);\n$app = $socialite->create('foo');\n```\n\n## 平台\n\n不同的平台有不同的配置方法，为了确保工具的正常运行，所以请确保你所使用的平台的配置都是如期设置的。\n\n### [支付宝](https://opendocs.alipay.com/open/200/105310#s2)\n\n请按如下方式配置\n\n```php\n$config = [\n  'alipay' => [\n    // 这个键名还能像官方文档那样叫做 'app_id'\n    'client_id' => 'your-app-id',\n\n    // 请根据官方文档，在官方管理后台配置 RSA2\n    // 注意： 这是你自己的私钥\n    // 注意： 不允许私钥内容有其他字符\n    // 建议： 为了保证安全，你可以将文本信息从磁盘文件中读取，而不是在这里明文\n    'rsa_private_key' => 'your-rsa-private-key',\n\n    // 确保这里的值与你在服务后台绑定的地址值一致\n    // 这个键名还能像官方文档那样叫做 'redirect_url'\n    'redirect' => 'http://localhost/socialite/callback.php',\n\n    // 沙箱模式接入地址见 https://opendocs.alipay.com/open/220/105337#%E5%85%B3%E4%BA%8E%E6%B2%99%E7%AE%B1\n    'sandbox' => false,\n  ]\n  ...\n];\n\n$socialite = new SocialiteManager($config);\n\n$user = $socialite->create('alipay')->userFromCode('here is auth code');\n\n// 详见文档后面 \"User interface\"\n$user->getId();        // 1472352\n$user->getNickname();  // \"overtrue\"\n$user->getUsername();  // \"overtrue\"\n$user->getName();      // \"安正超\"\n...\n```\n\n本工具暂时只支持 RSA2 个人私钥认证方式。\n\n### [钉钉](https://ding-doc.dingtalk.com/doc#/serverapi3/mrugr3)\n\n如文档所示\n\n> 注意：该工具仅支持 QR code 连接到第三方网站，用来获取用户信息（opeid， unionid 和 nickname）\n\n```php\n$config = [\n  'dingtalk' => [\n      // or 'app_id'\n      'client_id' => 'your app id',\n\n      // or 'app_secret'\n      'client_secret' => 'your app secret',\n\n      // or 'redirect_url'\n      'redirect' => 'redirect URL'\n  ]\n];\n\n$socialite = new SocialiteManager($config);\n\n$user = $socialite->create('dingtalk')->userFromCode('here is auth code');\n\n// 详见文档后面 \"User interface\"\n$user->getId();        // 1472352\n$user->getNickname();  // \"overtrue\"\n$user->getUsername();  // \"overtrue\"\n$user->getName();      // \"安正超\"\n...\n```\n\n### [抖音](https://open.douyin.com/platform/doc/OpenAPI-oauth2)\n\n> 注意： 使用抖音服务提供的时候，如果你想直接使用 access_token 获取用户信息时，请先设置 openid。 先调用 `withOpenId()` 再调用 `userFromToken()`\n\n```php\n$config = [\n  'douyin' => [\n      'client_id' => 'your app id',\n\n      'client_secret' => 'your app secret',\n\n      'redirect' => 'redirect URL'\n  ]\n];\n\n$socialite = new SocialiteManager($config);\n\n$user = $socialite->create('douyin')->userFromCode('here is auth code');\n\n$user = $socialite->create('douyin')->withOpenId('openId')->userFromToken('here is the access token');\n```\n\n### [头条](https://open.douyin.com/platform/resource/docs/develop/permission/toutiao-or-xigua/OAuth2.0/)\n\n> 注意： 使用`头条`服务提供的时候，如果你想直接使用 access_token 获取用户信息时，请先设置 openid。 先调用 `withOpenId()` 再调用 `userFromToken()`\n\n```php\n$config = [\n  'toutiao' => [\n    'client_id' => 'your app id',\n    'client_secret' => 'your app secret',\n    'redirect' => 'redirect URL'\n  ]\n];\n\n$socialite = new SocialiteManager($config);\n\n$user = $socialite->create('toutiao')->userFromCode('here is auth code');\n$user = $socialite->create('toutiao')->withOpenId('openId')->userFromToken('here is the access token');\n```\n\n### [西瓜](https://open.douyin.com/platform/resource/docs/develop/permission/toutiao-or-xigua/OAuth2.0/)\n\n> 注意： 使用`西瓜`服务提供的时候，如果你想直接使用 access_token 获取用户信息时，请先设置 openid。 先调用 `withOpenId()` 再调用 `userFromToken()`\n\n```php\n$config = [\n  'xigua' => [\n    'client_id' => 'your app id',\n    'client_secret' => 'your app secret',\n    'redirect' => 'redirect URL'\n  ]\n];\n\n$socialite = new SocialiteManager($config);\n\n$user = $socialite->create('xigua')->userFromCode('here is auth code');\n$user = $socialite->create('xigua')->withOpenId('openId')->userFromToken('here is the access token');\n```\n\n### [百度](https://developer.baidu.com/wiki/index.php?title=docs/oauth)\n\n其他配置没啥区别，在用法上，可以很轻易的选择重定向登录页面的模式，通过 `withDisplay()`\n\n- **page：**全屏形式的授权页面 (默认)，适用于 web 应用。\n- **popup:** 弹框形式的授权页面，适用于桌面软件应用和 web 应用。\n- **dialog:** 浮层形式的授权页面，只能用于站内 web 应用。\n- **mobile:** Iphone/Android 等智能移动终端上用的授权页面，适用于 Iphone/Android 等智能移动终端上的应用。\n- **tv:** 电视等超大显示屏使用的授权页面。\n- **pad:** IPad/Android 等智能平板电脑使用的授权页面。\n\n```php\n$authUrl = $socialite->create('baidu')->withDisplay('mobile')->redirect();\n\n```\n\n`popup` 模式是工具内默认的使用模式。`basic` 是默认使用的 scopes 值。\n\n### [飞书](https://open.feishu.cn/document/ukTMukTMukTM/uITNz4iM1MjLyUzM)\n\n通过一些简单的方法配置  app_ticket 就能使用内部应用模式\n\n```php\n$config = [\n    'feishu' => [\n        // or 'app_id'\n        'client_id' => 'your app id',\n\n        // or 'app_secret'\n        'client_secret' => 'your app secret',\n\n        // or 'redirect_url'\n        'redirect' => 'redirect URL',\n\n        // 如果你想使用使用内部应用的方式获取 app_access_token\n        // 对这个键设置了 'internal' 值那么你已经开启了内部应用模式\n        'app_mode' => 'internal'\n    ]\n];\n\n$socialite = new SocialiteManager($config);\n\n$feishuDriver = $socialite->create('feishu');\n\n$feishuDriver->withInternalAppMode()->userFromCode('here is code');\n$feishuDriver->withDefaultMode()->withAppTicket('app_ticket')->userFromCode('here is code');\n```\n\n### [Lark](https://open.larksuite.com/document/ukTMukTMukTM/uITNz4iM1MjLyUzM)\n\n通过一些简单的方法配置  app_ticket 就能使用内部应用模式\n\n```php\n$config = [\n    'lark' => [\n        // or 'app_id'\n        'client_id' => 'your app id',\n\n        // or 'app_secret'\n        'client_secret' => 'your app secret',\n\n        // or 'redirect_url'\n        'redirect' => 'redirect URL',\n\n        // 如果你想使用使用内部应用的方式获取 app_access_token\n        // 对这个键设置了 'internal' 值那么你已经开启了内部应用模式\n        'app_mode' => 'internal'\n    ]\n];\n\n$socialite = new SocialiteManager($config);\n\n$larkDriver = $socialite->create('lark');\n\n$larkDriver->withInternalAppMode()->userFromCode('here is code');\n$larkDriver->withDefaultMode()->withAppTicket('app_ticket')->userFromCode('here is code');\n```\n\n### [淘宝](https://open.taobao.com/doc.htm?docId=102635&docType=1&source=search)\n\n其他配置与其他平台的一样，你能选择你想要展示的重定向页面类型通过使用 `withView()`\n\n```php\n$authUrl = $socialite->create('taobao')->withView('wap')->redirect();\n```\n\n`web` 模式是工具默认使用的展示方式， `user_info` 是默认使用的 scopes 范围值。\n\n### [微信](https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/Official_Accounts/official_account_website_authorization.html)\n\n我们支持开放平台代表公众号进行第三方平台网页授权。\n\n你只需要像下面这样输入你的配置。官方账号不需要授权。\n\n```php\n...\n[\n    'wechat' =>\n        [\n            'client_id'   => 'client_id',\n            'client_secret' => 'client_secret',\n            'redirect'    => 'redirect-url',\n\n            // 开放平台 - 第三方平台所需\n            'component' => [\n                // or 'app_id', 'component_app_id' as key\n                'id' => 'component-app-id',\n                // or 'app_token', 'access_token', 'component_access_token' as key\n                'token' => 'component-access-token',\n            ]\n        ]\n],\n...\n```\n\n### [Coding](https://coding.net/help/openapi#oauth)\n\n您需要额外配置 `team_url` 为您的团队域名，例如：\n\n```php\n$config = [\n    'coding' => [\n        'team_url' => 'https://{your-team}.coding.net',\n        'client_id' => 'your app id',\n        'client_secret' => 'your app secret',\n        'redirect' => 'redirect URL',\n    ]\n];\n```\n\n### [PayPal](https://developer.paypal.com/docs/log-in-with-paypal/)\n\n您可能需要设置responseType，可以使用`withResponseType`函数进行设置，默认是`code` 还可以设置为`id_token` 或`code` & `id_token`\n\n> <https://developer.paypal.com/docs/log-in-with-paypal/integrate/generate-button/>\n\n```php\n$config = [\n    'paypal' => [\n        'client_id'     => 'AT******************',\n        'client_secret' => 'EK**************',\n        'sandbox'      => false,\n        'redirect_url'=>\"nativexo://paypalpay\",\n    ],\n];\n```\n\n## 其他一些技巧\n\n### Scopes\n\n在重定向用户之前，您还可以使用 `scopes()` 方法在请求上设置 “范围”。此方法将覆盖所有现有的作用域：\n\n```php\n$response = $socialite->create('github')\n                ->scopes(['scope1', 'scope2'])->redirect();\n```\n\n### Redirect URL\n\n你也可以动态设置' redirect_uri '，你可以使用以下方法来改变 `redirect_uri` URL:\n\n```php\n$url = 'your callback url.';\n\n$socialite->redirect($url);\n// or\n$socialite->withRedirectUrl($url)->redirect();\n```\n\n### State\n\n你的应用程序可以使用一个状态参数来确保响应属于同一个用户发起的请求，从而防止跨站请求伪造 (CSFR) 攻击。当恶意攻击者欺骗用户执行不需要的操作 (只有用户有权在受信任的 web 应用程序上执行) 时，就会发生 CSFR 攻击，所有操作都将在不涉及或警告用户的情况下完成。\n\n这里有一个最简单的例子，说明了如何提供状态可以让你的应用程序更安全。在本例中，我们使用会话 ID 作为状态参数，但是您可以使用您想要为状态创建值的任何逻辑。\n\n### 带着 `state` 参数的重定向\n\n```php\n<?php\nsession_start();\n\n$config = [\n    //...\n];\n\n// Assign to state the hashing of the session ID\n$state = hash('sha256', session_id());\n\n$socialite = new SocialiteManager($config);\n\n$url = $socialite->create('github')->withState($state)->redirect();\n\nreturn redirect($url);\n```\n\n### 检验回调的 `state`\n\n一旦用户授权你的应用程序，用户将被重定向回你的应用程序的 redirect_uri。OAuth 服务器将不加修改地返回状态参数。检查 redirect_uri 中提供的状态是否与应用程序生成的状态相匹配：\n\n```php\n<?php\nsession_start();\n\n$state = request()->query('state');\n$code = request()->query('code');\n\n// Check the state received with current session id\nif ($state != hash('sha256', session_id())) {\n    exit('State does not match!');\n}\n$user = $socialite->create('github')->userFromCode($code);\n\n// authorized\n```\n\n[查看更多关于 `state` 参数的文档](https://auth0.com/docs/protocols/oauth2/oauth-state)\n\n### 其他的一些参数\n\n要在请求中包含任何可选参数，调用 `with()` 方法传入一个你想要设置的关联数组：\n\n```php\n$response = $socialite->create('google')\n                    ->with(['hd' => 'example.com'])->redirect();\n```\n\n## User interface\n\n### 标准的 user api\n\n```php\n$user = $socialite->create('github')->userFromCode($code);\n```\n\n```json\n{\n  \"id\": 1472352,\n  \"nickname\": \"overtrue\",\n  \"name\": \"安正超\",\n  \"email\": \"anzhengchao@gmail.com\",\n  \"avatar\": \"https://avatars.githubusercontent.com/u/1472352?v=3\",\n  \"raw\": {\n    \"login\": \"overtrue\",\n    \"id\": 1472352,\n    \"avatar_url\": \"https://avatars.githubusercontent.com/u/1472352?v=3\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/overtrue\",\n    \"html_url\": \"https://github.com/overtrue\",\n    ...\n  },\n  \"token_response\": {\n    \"access_token\": \"5b1dc56d64fffbd052359f032716cc4e0a1cb9a0\",\n    \"token_type\": \"bearer\",\n    \"scope\": \"user:email\"\n  }\n}\n```\n\n你可以像这样以数组键的形式获取 user 属性：\n\n```php\n$user['id'];        // 1472352\n$user['nickname'];  // \"overtrue\"\n$user['name'];      // \"安正超\"\n$user['email'];     // \"anzhengchao@gmail.com\"\n...\n```\n\n或者使用该 `User` 对象的方法：\n\n```php\nmixed   $user->getId();\n?string $user->getNickname();\n?string $user->getName();\n?string $user->getEmail();\n?string $user->getAvatar();\n?string $user->getRaw();\n?string $user->getAccessToken();\n?string $user->getRefreshToken();\n?int    $user->getExpiresIn();\n?array  $user->getTokenResponse();\n\n\n```\n\n### 从 OAuth API 响应中取得原始数据\n\n`$user->getRaw()` 方法会返回一个 **array**。\n\n### 当你使用 userFromCode() 想要获取 token 响应的原始数据\n\n`$user->getTokenResponse()` 方法会返回一个 **array** 里面是响应从获取 token 时候 API 返回的响应。\n\n> 注意：当你使用 `userFromCode()` 时，这个方法只返回一个 **有效的数组**，否则将返回 **null**，因为 `userFromToken()` 没有 token 的 HTTP 响应。\n\n### 通过 access token 获取用户信息\n\n```php\n$accessToken = 'xxxxxxxxxxx';\n$user = $socialite->userFromToken($accessToken);\n```\n\n## Enjoy it! :heart:\n\n## 参照\n\n- [Alipay - 用户信息授权](https://opendocs.alipay.com/open/289/105656)\n- [DingTalk - 扫码登录第三方网站](https://ding-doc.dingtalk.com/doc#/serverapi3/mrugr3)\n- [Google - OpenID Connect](https://developers.google.com/identity/protocols/OpenIDConnect)\n- [Github - Authorizing OAuth Apps](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/)\n- [Facebook - Graph API](https://developers.facebook.com/docs/graph-api)\n- [Linkedin - Authenticating with OAuth 2.0](https://developer.linkedin.com/docs/oauth2)\n- [微博 - OAuth 2.0 授权机制说明](http://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E)\n- [QQ - OAuth 2.0 登录 QQ](http://wiki.connect.qq.com/oauth2-0%E7%AE%80%E4%BB%8B)\n- [腾讯云 - OAuth2.0](https://cloud.tencent.com/document/product/306/37730#.E6.8E.A5.E5.85.A5.E8.85.BE.E8.AE.AF.E4.BA.91-oauth)\n- [微信公众平台 - OAuth 文档](http://mp.weixin.qq.com/wiki/9/01f711493b5a02f24b04365ac5d8fd95.html)\n- [微信开放平台 - 网站应用微信登录开发指南](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419316505&token=&lang=zh_CN)\n- [微信开放平台 - 代公众号发起网页授权](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419318590&token=&lang=zh_CN)\n- [企业微信 - OAuth 文档](https://open.work.weixin.qq.com/api/doc/90000/90135/91020)\n- [企业微信第三方应用 - OAuth 文档](https://open.work.weixin.qq.com/api/doc/90001/90143/91118)\n- [豆瓣 - OAuth 2.0 授权机制说明](http://developers.douban.com/wiki/?title=oauth2)\n- [抖音 - 网站应用开发指南](http://open.douyin.com/platform/doc)\n- [飞书 - 授权说明](https://open.feishu.cn/document/ukTMukTMukTM/uMTNz4yM1MjLzUzM)\n- [Lark - 授权说明](https://open.larksuite.com/document/ukTMukTMukTM/uMTNz4yM1MjLzUzM)\n- [Tapd - 用户授权说明](https://www.tapd.cn/help/show#1120003271001000093)\n- [Line - OAuth 2.0](https://developers.line.biz/en/docs/line-login/integrate-line-login/)\n- [Gitee - OAuth文档](https://gitee.com/api/v5/oauth_doc#/)\n- [PayPal - OAuth文档](https://developer.paypal.com/docs/log-in-with-paypal/)\n\n## PHP 扩展包开发\n\n> 想知道如何从零开始构建 PHP 扩展包？\n>\n> 请关注我的实战课程，我会在此课程中分享一些扩展开发经验 —— [《PHP 扩展包实战教程 - 从入门到发布》](https://learnku.com/courses/creating-package)\n\n## License\n\nMIT\n"
        },
        {
          "name": "README_EN.md",
          "type": "blob",
          "size": 21.265625,
          "content": "# Socialite\n\nSocialite is an [OAuth2](https://oauth.net/2/)  Authentication tool. It is inspired by [laravel/socialite](https://github.com/laravel/socialite), You can easily use it in any PHP project.  [中文文档](/README.md)\n\n[![GitHub release (latest SemVer)](https://img.shields.io/github/v/release/overtrue/socialite?style=flat-square)](https://github.com/overtrue/socialite/releases)\n[![GitHub License](https://img.shields.io/github/license/overtrue/socialite?style=flat-square)](https://github.com/overtrue/socialite/blob/master/LICENSE)\n[![Packagist Downloads](https://img.shields.io/packagist/dt/overtrue/socialite?style=flat-square)](https://packagist.org/packages/overtrue/socialite)\n\n[![Sponsor me](https://github.com/overtrue/overtrue/blob/master/sponsor-me-button-s.svg?raw=true)](https://github.com/sponsors/overtrue)\n\nThis tool now supports platforms such as Facebook, GitHub, Google, Figma, LinkedIn, Outlook, QQ, Tapd, Alipay, Taobao, Baidu, DingTalk, Weibo, WeChat, Douyin, Feishu, Lark, Douban, WeWork, Tencent Cloud, Line, Gitee and Coding.\n\n如果你喜欢我的项目并想支持我，[点击这里 :heart:](https://github.com/sponsors/overtrue)\n\n# Requirement\n\n```\nPHP >= 8.0.2\n```\n# Installation\n\n```shell\n$ composer require \"overtrue/socialite\" -vvv\n```\n\n# Usage\n\nUsers just need to create the corresponding configuration variables, then create the authentication application for each platform through the tool, and easily obtain the access_token and user  information for that platform. The implementation logic of the tool is referred to OAuth2 documents of major platforms for details.\n\nThe tool is used in the following steps:\n\n1. Configurate platform config\n2. Use this tool to create a platform application\n3. Let the user redirect to platform authentication\n4. The server receives a Code callback from the platform, and uses the Code to exchange the user information on the platform (including access_token).\n\nPackages created for Laravel users are easier to integrate:  [overtrue/laravel-socialite](https://github.com/overtrue/laravel-socialite)\n\n`authorize.php`:\n\n```php\n<?php\n\nuse Overtrue\\Socialite\\SocialiteManager;\n\n$config = [\n    'github' => [\n        'client_id'     => 'your-app-id',\n        'client_secret' => 'your-app-secret',\n        'redirect'      => 'http://localhost/socialite/callback.php',\n    ],\n];\n\n$socialite = new SocialiteManager($config);\n\n$url = $socialite->create('github')->redirect();\n\nreturn redirect($url); \n```\n\n`callback.php`:\n\n```php\n<?php\n\nuse Overtrue\\Socialite\\SocialiteManager;\n\n$config = [\n    'github' => [\n        'client_id' => 'your-app-id',\n        'client_secret' => 'your-app-secret',\n        'redirect' => 'http://localhost/socialite/callback.php',\n    ],\n];\n\n$socialite = new SocialiteManager($config);\n\n$code = request()->query('code');\n\n$user = $socialite->create('github')->userFromCode($code);\n\n$user->getId();        // 1472352\n$user->getNickname();  // \"overtrue\"\n$user->getUsername();  // \"overtrue\"\n$user->getName();      // \"安正超\"\n$user->getEmail();     // \"anzhengchao@gmail.com\"\n...\n```\n\n## Configuration\n\nEach create uses the same configuration keys: `client_id`, `client_secret`, `redirect`.\n\nExample:\n```php\n$config = [\n  'weibo' => [\n    'client_id'     => 'your-app-id',\n    'client_secret' => 'your-app-secret',\n    'redirect'      => 'http://localhost/socialite/callback.php',\n  ],\n  'facebook' => [\n    'client_id'     => 'your-app-id',\n    'client_secret' => 'your-app-secret',\n    'redirect'      => 'http://localhost/socialite/callback.php',\n  ],\n];\n```\n\n### Custom app name\n\nYou can use any name you like as the name of the application, such as `foo`, and set provider using `provider` key：\n\n```php\n$config = [\n    'foo' => [\n        'provider' => 'github',  // <-- provider name\n        'client_id' => 'your-app-id',\n        'client_secret' => 'your-app-secret',\n        'redirect' => 'http://localhost/socialite/callback.php',\n    ],\n       \n    // another github app\n    'bar' => [\n        'provider' => 'github',  // <-- provider name\n        'client_id' => 'your-app-id',\n        'client_secret' => 'your-app-secret',\n        'redirect' => 'http://localhost/socialite/callback.php',\n    ],\n    //...\n];\n```\n\n### Extends custom provider\n\nYou can create application from you custom provider easily，you have to ways to do this: \n\n1. Using custom creator:\n   As shown in the following code, the service provider name is defined for the Foo application, but the tool itself does not support it, so use the creator `extend()` to create an instance of the service provider as a closure function.\n\n```php\n$config = [\n    'foo' => [\n        'provider' => 'myprovider',  // <-- provider name\n        'client_id' => 'your-app-id',\n        'client_secret' => 'your-app-secret',\n        'redirect' => 'http://localhost/socialite/callback.php',\n    ],\n];\n\n$socialite = new SocialiteManager($config);\n   \n$socialite->extend('myprovider', function(array $config) {\n    return new MyCustomProvider($config);\n});\n\n$app = $socialite->create('foo');\n```\n\n2. Using provider:\n\n>👋🏻 Your custom provider class must be implements of `Overtrue\\Socialite\\Contracts\\ProviderInterface`.\n\n```php\nclass MyCustomProvider implements \\Overtrue\\Socialite\\Contracts\\ProviderInterface \n{\n    //...\n}\n```\n\nthen set `provider` with the class name:\n\n```php\n$config = [\n    'foo' => [\n        'provider' => MyCustomProvider::class,  // <-- class name\n        'client_id' => 'your-app-id',\n        'client_secret' => 'your-app-secret',\n        'redirect' => 'http://localhost/socialite/callback.php',\n    ],\n];\n\n$socialite = new SocialiteManager($config);\n$app = $socialite->create('foo');\n```\n\n\n\n## Platform\n\nDifferent platforms have different configuration methods, so please check the platform Settings you are using.\n\n### [Alipay](https://opendocs.alipay.com/open/200/105310#s2)\n\nYou must have the following configuration.\n```php\n$config = [\n  'alipay' => [\n    // This can also be named as 'app_id' like the official documentation.\n    'client_id' => 'your-app-id', \n \n    // Please refer to the official documentation, in the official management background configuration RSA2.\n    // Note: This is your own private key.\n    // Note: Do not allow the private key content to have extra characters.\n    // Recommendation: For security, you can read directly from the file. But here as long as the value, please remember to remove the head and tail of the decoration.\n    'rsa_private_key' => 'your-rsa-private-key',\n\n    // Be sure to set this value and make sure that it is the same address value as set in the official admin system.\n    // This can also be named as 'redirect_url' like the official documentation.\n    'redirect' => 'http://localhost/socialite/callback.php',\n  ]\n  ...\n];\n\n$socialite = new SocialiteManager($config);\n\n$user = $socialite->create('alipay')->userFromCode('here is auth code');\n\n// See this documents \"User interface\"\n$user->getId();        // 1472352\n$user->getNickname();  // \"overtrue\"\n$user->getUsername();  // \"overtrue\"\n$user->getName();      // \"安正超\"\n...\n```\nOnly RSA2 personal private keys are supported, so stay tuned if you want to log in with a certificate.\n\n### [DingTalk](https://ding-doc.dingtalk.com/doc#/serverapi3/mrugr3)\n\nFollow the documentation and configure it like following.\n\n> Note: It only supported QR code access to third-part websites. i.e exchange for user information(opendid, unionid and nickname)\n\n```php\n$config = [\n  'dingtalk' => [\n      // or 'app_id'\n      'client_id' => 'your app id',\n\n      // or 'app_secret' \n      'client_secret' => 'your app secret',\n\n      // or 'redirect_url'\n      'redirect' => 'redirect URL'\n  ]\n];\n\n$socialite = new SocialiteManager($config);\n\n$user = $socialite->create('dingtalk')->userFromCode('here is auth code');\n\n// See this documents \"User interface\"\n$user->getId();        // 1472352\n$user->getNickname();  // \"overtrue\"\n$user->getUsername();  // \"overtrue\"\n$user->getName();      // \"安正超\"\n...\n```\n\n### [Douyin](https://open.douyin.com/platform/doc/OpenAPI-oauth2)\n\n> Note： using the Douyin create that if you get user information directly using access token, set up the openid first. the openid can be obtained by code when access is obtained, so call `userFromCode()` automatically configured for you openid, if call `userFromToken()` first call `withOpenId()`\n\n```php\n$config = [\n  'douyin' => [\n      'client_id' => 'your app id',\n\n      'client_secret' => 'your app secret',\n\n      'redirect' => 'redirect URL'\n  ]\n];\n\n$socialite = new SocialiteManager($config);\n\n$user = $socialite->create('douyin')->userFromCode('here is auth code');\n\n$user = $socialite->create('douyin')->withOpenId('openId')->userFromToken('here is the access token');\n```\n\n### [TouTiao](https://open.douyin.com/platform/resource/docs/develop/permission/toutiao-or-xigua/OAuth2.0/)\n\n> Note： using the `toutiao` create that if you get user information directly using access token, set up the openid first. the openid can be obtained by code when access is obtained, so call `userFromCode()` automatically configured for you openid, if call `userFromToken()` first call `withOpenId()`\n\n```php\n$config = [\n  'toutiao' => [\n    'client_id' => 'your app id',\n    'client_secret' => 'your app secret',\n    'redirect' => 'redirect URL'\n  ]\n];\n\n$socialite = new SocialiteManager($config);\n\n$user = $socialite->create('toutiao')->userFromCode('here is auth code');\n$user = $socialite->create('toutiao')->withOpenId('openId')->userFromToken('here is the access token');\n```\n\n### [XiGua](https://open.douyin.com/platform/resource/docs/develop/permission/toutiao-or-xigua/OAuth2.0/)\n\n> Note： using the `xigua` create that if you get user information directly using access token, set up the openid first. the openid can be obtained by code when access is obtained, so call `userFromCode()` automatically configured for you openid, if call `userFromToken()` first call `withOpenId()`\n\n```php\n$config = [\n  'xigua' => [\n    'client_id' => 'your app id',\n    'client_secret' => 'your app secret',\n    'redirect' => 'redirect URL'\n  ]\n];\n\n$socialite = new SocialiteManager($config);\n\n$user = $socialite->create('xigua')->userFromCode('here is auth code');\n$user = $socialite->create('xigua')->withOpenId('openId')->userFromToken('here is the access token');\n```\n\n\n### [Baidu](https://developer.baidu.com/wiki/index.php?title=docs/oauth)\n\nYou can choose the form you want display by using `withDisplay()`.\n\n- **page**\n- **popup**\n- **dialog**\n- **mobile**\n- **tv**\n- **pad**\n\n```php\n$authUrl = $socialite->create('baidu')->withDisplay('mobile')->redirect();\n\n```\n`popup` mode is the default setting with display. `basic` is the default with scopes.\n\n### [Feishu](https://open.feishu.cn/document/ukTMukTMukTM/uITNz4iM1MjLyUzM)\n\nSome simple way to use by internal app mode and config app_ticket.\n\n```php\n$config = [\n    'feishu' => [\n        // or 'app_id'\n        'client_id' => 'your app id',\n\n        // or 'app_secret' \n        'client_secret' => 'your app secret',\n\n        // or 'redirect_url'\n        'redirect' => 'redirect URL',\n\n        // if you want to use internal way to get app_access_token\n        // set this key by 'internal' then you already turn on the internal app mode \n        'app_mode' => 'internal'\n    ]\n];\n\n$socialite = new SocialiteManager($config);\n\n$feishuDriver = $socialite->create('feishu');\n\n$feishuDriver->withInternalAppMode()->userFromCode('here is code');\n$feishuDriver->withDefaultMode()->withAppTicket('app_ticket')->userFromCode('here is code');\n```\n\n### [Lark](https://open.larksuite.com/document/ukTMukTMukTM/uITNz4iM1MjLyUzM)\n\nSome simple way to use by internal app mode and config app_ticket.\n\n```php\n$config = [\n    'lark' => [\n        // or 'app_id'\n        'client_id' => 'your app id',\n\n        // or 'app_secret' \n        'client_secret' => 'your app secret',\n\n        // or 'redirect_url'\n        'redirect' => 'redirect URL',\n\n        // if you want to use internal way to get app_access_token\n        // set this key by 'internal' then you already turn on the internal app mode \n        'app_mode' => 'internal'\n    ]\n];\n\n$socialite = new SocialiteManager($config);\n\n$larkDriver = $socialite->create('lark');\n\n$larkDriver->withInternalAppMode()->userFromCode('here is code');\n$larkDriver->withDefaultMode()->withAppTicket('app_ticket')->userFromCode('here is code');\n```\n\n### [Taobao](https://open.taobao.com/doc.htm?docId=102635&docType=1&source=search)\n\nYou can choose the form you want display by using `withView()`.\n\n```php\n$authUrl = $socialite->create('taobao')->withView('wap')->redirect();\n```\n`web` mode is the default setting with display. `user_info` is the default with scopes.\n\n### [WeChat](https://developers.weixin.qq.com/doc/oplatform/Third-party_Platforms/Official_Accounts/official_account_website_authorization.html)\n\nWe support Open Platform Third-party Platform webpage authorizations on behalf of Official Account.\n\nYou just need input your config like below config. Official Accounts authorizations only doesn't need.\n```php\n...\n[\n    'wechat' =>\n        [\n            'client_id' => 'client_id',\n            'client_secret' => 'client_secret',\n            'redirect' => 'redirect-url',\n\n            // Open Platform - Third-party Platform Need\n            'component' => [\n                'id' => 'component-app-id',\n                'token' => 'component-access-token', // or Using a callable as value.\n            ]\n        ]\n],\n...\n```\n\n### [Coding](https://coding.net/help/openapi#oauth)\n\nPlease add the `team_url` parameter to the configuration file to specify the team domain name as follows:\n\n```php\n$config = [\n    'coding' => [\n        'team_url' => 'https://{your-team}.coding.net',\n        'client_id' => 'your app id',\n        'client_secret' => 'your app secret',\n        'redirect' => 'redirect URL',\n    ]\n];\n```\n\n### [PayPal](https://developer.paypal.com/docs/log-in-with-paypal/)\n\nYou may need to set the responseType, which can be set using the `withResponseType` function. The default is `code` and can also be set to `id_token` or `code` & `id_token`\n\n> https://developer.paypal.com/docs/log-in-with-paypal/integrate/generate-button/\n\n\n```php\n$config = [\n    'paypal' => [\n        'client_id'     => 'AT******************',\n        'client_secret' => 'EK**************',\n        'sandbox'      => false,\n        'redirect_url'=>\"nativexo://paypalpay\",\n    ],\n];\n```\n\n\n\n## Some Skill\n\n### Scopes\n\nBefore redirecting the user, you may also set \"scopes\" on the request using the `scopes()` method. This method will overwrite all existing scopes:\n\n```php\n$response = $socialite->create('github')\n                ->scopes(['scope1', 'scope2'])->redirect();\n```\n\n### Redirect URL\n\nYou may also want to dynamically set `redirect_uri`，you can use the following methods to change the `redirect_uri` URL:\n\n```php\n$url = 'your callback url.';\n\n$socialite->redirect($url);\n// or\n$socialite->withRedirectUrl($url)->redirect();\n```\n\n### State\n\nYour app can use a state parameter for making sure the response belongs to a request initiated by the same user, therefore preventing cross-site request forgery (CSFR) attacks. A CSFR attack occurs when a malicious attacker tricks the user into performing unwanted actions that only the user is authorized to perform on a trusted web application, and all will be done without involving or alerting the user.\n\nHere's the simplest example of how providing the state can make your app more secure. in this example, we use the session ID as the state parameter, but you can use whatever logic you want to create value for the state.\n\n### Redirect with `state` parameter \n```php\n<?php\nsession_start();\n \n$config = [\n    //...\n];\n\n// Assign to state the hashing of the session ID\n$state = hash('sha256', session_id());\n\n$socialite = new SocialiteManager($config);\n\n$url = $socialite->create('github')->withState($state)->redirect();\n\nreturn redirect($url); \n```\n\n### Validate the callback `state`\n\nOnce the user has authorized your app, the user will be redirected back to your app's redirect_uri. The OAuth server will return the state parameter unchanged. Check if the state provided in the redirect_uri matches the state generated by your app:\n\n```php\n<?php\nsession_start();\n \n$state = request()->query('state');\n$code = request()->query('code');\n \n// Check the state received with current session id\nif ($state != hash('sha256', session_id())) {\n    exit('State does not match!');\n}\n$user = $socialite->create('github')->userFromCode($code);\n\n// authorized\n```\n\n[Read more about `state` parameter](https://auth0.com/docs/protocols/oauth2/oauth-state)\n\n### Additional parameters\n\nTo include any optional parameters in the request, call the `with()` method with an associative array:\n\n```php\n$response = $socialite->create('google')\n                    ->with(['hd' => 'example.com'])->redirect();\n```\n\n\n## User interface\n\n### Standard user api:\n\n```php\n$user = $socialite->create('github')->userFromCode($code);\n```\n\n```json\n{\n  \"id\": 1472352,\n  \"nickname\": \"overtrue\",\n  \"name\": \"安正超\",\n  \"email\": \"anzhengchao@gmail.com\",\n  \"avatar\": \"https://avatars.githubusercontent.com/u/1472352?v=3\",\n  \"raw\": {\n    \"login\": \"overtrue\",\n    \"id\": 1472352,\n    \"avatar_url\": \"https://avatars.githubusercontent.com/u/1472352?v=3\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/overtrue\",\n    \"html_url\": \"https://github.com/overtrue\",\n    ...\n  },\n  \"token_response\": {\n    \"access_token\": \"5b1dc56d64fffbd052359f032716cc4e0a1cb9a0\",\n    \"token_type\": \"bearer\",\n    \"scope\": \"user:email\"\n  }\n}\n```\n\nYou can fetch the user attribute as a array keys like these:\n\n```php\n$user['id'];        // 1472352\n$user['nickname'];  // \"overtrue\"\n$user['name'];      // \"安正超\"\n$user['email'];     // \"anzhengchao@gmail.com\"\n...\n```\n\nOr using the method:\n\n```php\nmixed   $user->getId();\n?string $user->getNickname();\n?string $user->getName();\n?string $user->getEmail();\n?string $user->getAvatar();\n?string $user->getRaw();\n?string $user->getAccessToken(); \n?string $user->getRefreshToken();\n?int    $user->getExpiresIn();\n?array  $user->getTokenResponse();\n\n\n```\n\n### Get raw response from OAuth API\n\nThe `$user->getRaw()` method will return an **array** of the API raw response.\n\n### Get the token response when you use userFromCode()\n\nThe `$user->getTokenResponse()` method will return an **array** of the get token(access token) API response.\n\n> Note: This method only return a **valid array** when you use `userFromCode()`, else will return **null** because use `userFromToken()` have no token response. \n\n### Get user with access token\n\n```php\n$accessToken = 'xxxxxxxxxxx';\n$user = $socialite->userFromToken($accessToken);\n```\n\n\n\n# Enjoy it! :heart:\n\n# Reference\n\n- [Alipay - 用户信息授权](https://opendocs.alipay.com/open/289/105656)\n- [DingTalk - 扫码登录第三方网站](https://ding-doc.dingtalk.com/doc#/serverapi3/mrugr3)\n- [Google - OpenID Connect](https://developers.google.com/identity/protocols/OpenIDConnect)\n- [GitHub - Authorizing OAuth Apps](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/)\n- [Figma - OAuth 2](https://www.figma.com/developers/api#auth-oauth2)\n- [Facebook - Graph API](https://developers.facebook.com/docs/graph-api)\n- [Linkedin - Authenticating with OAuth 2.0](https://developer.linkedin.com/docs/oauth2)\n- [微博 - OAuth 2.0 授权机制说明](http://open.weibo.com/wiki/%E6%8E%88%E6%9D%83%E6%9C%BA%E5%88%B6%E8%AF%B4%E6%98%8E)\n- [QQ - OAuth 2.0 登录 QQ](http://wiki.connect.qq.com/oauth2-0%E7%AE%80%E4%BB%8B)\n- [腾讯云 - OAuth2.0](https://cloud.tencent.com/document/product/306/37730#.E6.8E.A5.E5.85.A5.E8.85.BE.E8.AE.AF.E4.BA.91-oauth)\n- [微信公众平台 - OAuth 文档](http://mp.weixin.qq.com/wiki/9/01f711493b5a02f24b04365ac5d8fd95.html)\n- [微信开放平台 - 网站应用微信登录开发指南](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419316505&token=&lang=zh_CN)\n- [微信开放平台 - 代公众号发起网页授权](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419318590&token=&lang=zh_CN)\n- [企业微信 - OAuth 文档](https://open.work.weixin.qq.com/api/doc/90000/90135/91020)\n- [企业微信第三方应用 - OAuth 文档](https://open.work.weixin.qq.com/api/doc/90001/90143/91118)\n- [豆瓣 - OAuth 2.0 授权机制说明](http://developers.douban.com/wiki/?title=oauth2)\n- [抖音 - 网站应用开发指南](http://open.douyin.com/platform/doc)\n- [飞书 - 授权说明](https://open.feishu.cn/document/ukTMukTMukTM/uMTNz4yM1MjLzUzM)\n- [Lark - 授权说明](https://open.larksuite.com/document/ukTMukTMukTM/uMTNz4yM1MjLzUzM)\n- [Tapd - 用户授权说明](https://www.tapd.cn/help/show#1120003271001000093)\n- [Line - OAuth 2.0](https://developers.line.biz/en/docs/line-login/integrate-line-login/)\n- [Gitee - OAuth文档](https://gitee.com/api/v5/oauth_doc#/)\n- [PayPal - OAuth文档](https://developer.paypal.com/docs/log-in-with-paypal/)\n\n[![Sponsor me](https://github.com/overtrue/overtrue/blob/master/sponsor-me.svg?raw=true)](https://github.com/sponsors/overtrue)\n\n## Project supported by JetBrains\n\nMany thanks to Jetbrains for kindly providing a license for me to work on this and other open-source projects.\n\n[![](https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg)](https://www.jetbrains.com/?from=https://github.com/overtrue)\n\n\n# PHP 扩展包开发\n\n> 想知道如何从零开始构建 PHP 扩展包？\n>\n> 请关注我的实战课程，我会在此课程中分享一些扩展开发经验 —— [《PHP 扩展包实战教程 - 从入门到发布》](https://learnku.com/courses/creating-package)\n\n# License\n\nMIT\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.064453125,
          "content": "{\n  \"name\": \"overtrue/socialite\",\n  \"description\": \"A collection of OAuth 2 packages.\",\n  \"keywords\": [\n    \"oauth\",\n    \"social\",\n    \"login\",\n    \"weibo\",\n    \"wechat\",\n    \"qq\",\n    \"feishu\",\n    \"qcloud\"\n  ],\n  \"autoload\": {\n    \"files\": [\n      \"src/Contracts/FactoryInterface.php\",\n      \"src/Contracts/UserInterface.php\",\n      \"src/Contracts/ProviderInterface.php\"\n    ],\n    \"psr-4\": {\n      \"Overtrue\\\\Socialite\\\\\": \"src/\"\n    }\n  },\n  \"require\": {\n    \"php\": \">=8.0.2\",\n    \"ext-json\": \"*\",\n    \"ext-openssl\": \"*\",\n    \"guzzlehttp/guzzle\": \"^7.0\"\n  },\n  \"require-dev\": {\n    \"mockery/mockery\": \"^1.3\",\n    \"phpunit/phpunit\": \"^11.3\",\n    \"jetbrains/phpstorm-attributes\": \"^1.0\",\n    \"phpstan/phpstan\": \"^1.7\",\n    \"laravel/pint\": \"^1.2\"\n  },\n  \"license\": \"MIT\",\n  \"authors\": [\n    {\n      \"name\": \"overtrue\",\n      \"email\": \"anzhengchao@gmail.com\"\n    }\n  ],\n  \"scripts\": {\n    \"check-style\": \"@php vendor/bin/pint --test\",\n    \"fix-style\": \"@php vendor/bin/pint\",\n    \"test\": \"@php vendor/bin/phpunit --colors=always\",\n    \"phpstan\": \"@php vendor/bin/phpstan analyse src\"\n  }\n}\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 0.12109375,
          "content": "parameters:\n\tcheckMissingIterableValueType: false\n\tcheckGenericClassInNonGenericObjectType: false\n\tlevel: 8\n\tpaths:\n\t\t- src\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.5283203125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n>\n    <testsuites>\n        <testsuite name=\"Package Test Suite\">\n            <directory suffix=\".php\">./tests/</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}