{
  "metadata": {
    "timestamp": 1736711945665,
    "page": 377,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chrome-php/chrome",
      "stars": 2320,
      "defaultBranch": "1.12",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2890625,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.yml]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4375,
          "content": "/.github            export-ignore\n/tests              export-ignore\n/vendor-bin         export-ignore\n.editorconfig       export-ignore\n.gitattributes      export-ignore\n.gitignore          export-ignore\n.styleci.yml        export-ignore\nCHANGELOG.md        export-ignore\nMakefile            export-ignore\nphpstan.neon.dist   export-ignore\nphpunit.xml.dist    export-ignore\nREADME.md           export-ignore\n\n/tests/resources/*   linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.06640625,
          "content": ".phpunit.result.cache\ncomposer.lock\nphpstan.neon\nphpunit.xml\nvendor\n"
        },
        {
          "name": ".styleci.yml",
          "type": "blob",
          "size": 0.4111328125,
          "content": "preset: symfony\n\nversion: 7.4\n\nrisky: true\n\nenabled:\n  - align_phpdoc\n  - alpha_ordered_imports\n  - array_indentation\n  - const_visibility_required\n  - native_constant_invocation\n  - native_function_invocation\n  - phpdoc_order\n  - void_return\n\ndisabled:\n  - native_constant_invocation_symfony\n  - native_function_invocation_symfony\n  - no_superfluous_phpdoc_tags_symfony\n  - phpdoc_to_comment\n  - phpdoc_var_without_name\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.8681640625,
          "content": "# CHANGELOG\n\n\n## 1.12.0 (2024-12-09)\n\n* Add PHP 8.4 support\n* Add the ability to screenshot individual elements on the page\n* Add `AbstractBinaryInput::getRawBinary` method\n* Have `Cookie` implement `IteratorAggregate`\n\n\n## 1.11.0 (2024-03-17)\n\n* Add PHP 8.3 support\n* Auto-detect Chromium too\n\n\n## 1.10.1 (2024-03-17)\n\n* Fixed encoding bugs in `XPathSelector`\n\n\n## 1.10.0 (2023-12-10)\n\n* Add `Add Node::setHTML` method\n* Add `Page::setScriptExecution` method\n* Allow usage of XPath in `Page::waitForElement`\n* Enable removal of Chrome flags via `excludedSwitches` option\n* Add support for `webp` `format` and `optimizeForSpeed` option in `Page::screenshot`\n* Add support for using Symfony 7 components\n\n\n## 1.9.1 (2023-10-08)\n\n* Fix rare crash in `Page::getHtml`\n* Fix whitespace character handling in `Keyboard::typeText()`\n\n\n## 1.9.0 (2023-04-30)\n\n* Added some additional life-cycle event constants\n* Added support for disabling browser notifications\n\n\n## 1.8.1 (2023-03-11)\n\n* Fixed issue where Chrome 111 and later have different default allowed origins\n\n\n## 1.8.0 (2023-02-27)\n\n* Add helper function to find target\n* Add `--crash-dumps-dir` option\n* Allow passing the event name to wait for in `setHtml`\n* Dropped PHP 7.3 support\n\n\n## 1.7.2 (2023-02-27)\n\n* Fix case where the timeout in `setHtml()` isn't respected\n* Fix hard coded timeout in `Dom` class\n* Fix hard coded timeout in `ResponseReader` class\n* Stop process when an error occurs during startup\n* Stop process on `waitForStartup` if dev tools failed to start\n* Disconnect socket on `sendCloseMessage`\n\n\n## 1.7.1 (2022-09-04)\n\n* Fix command execution in `AutoDiscover`\n\n\n## 1.7.0 (2022-08-28)\n\n* Use `command` to guess the chrome executable in Linux\n* Officially support PHP 8.2\n* Fix extra HTTP headers\n\n\n## 1.6.2 (2022-08-28)\n\n* Fix intermittency in `Mouse::findElement()`\n* Fix scroll with values higher than possible\n\n\n## 1.6.1 (2022-05-17)\n\n* Support Monolog 3\n\n\n## 1.6.0 (2022-03-30)\n\n* Officially support PHP 8.1\n\n\n## 1.5.0 (2022-03-25)\n\n* Added `Browser::getPages` method\n* Added `Page::waitUntilContainsElement()` method\n* Added `Page::setHtml()` method\n* Added support for XPath by introducing `Selector`\n* Added `Mouse::findElement()` method\n* Switch to flatten mode\n\n\n## 1.4.1 (2022-03-25)\n\n* Added fallback to css layout metrics\n* Added missing destroyed setting\n* Prevent `Node::querySelector` from returning nodeId `0`\n* Fixed \"What's new\" page opening on startup\n* More fixes to enable eventual PHP 8.1 support\n\n\n## 1.4.0 (2022-01-23)\n\n* Added support for `--no-proxy-server` and `--proxy-bypass-list`\n* Added timeout option to `Page::getHtml`\n* Added `Node::sendFiles` method\n\n\n## 1.3.1 (2022-01-23)\n\n* Fixed issues with `Keyboard::typeText` with multibyte strings\n* Fixed issues with retina and scaled displays\n* Fixed issues with timeouts if system time changes\n* Fixed `Mouse::find()` after cursor has moved\n\n\n## 1.3.0 (2021-12-07)\n\n* Added support for setting HTTP headers\n* Added support for `psr/log` 2 and 3\n\n\n## 1.2.1 (2021-12-07)\n\n* Partial PHP 8.1 support\n\n\n## 1.2.0 (2021-11-20)\n\n* Dropped `--disable-default-apps` and `--disable-extensions` by default\n* Added API for interacting with the DOM\n* Added a way to set the timezone\n* Reworked `PagePdf` class to improve validation\n\n\n## 1.1.1 (2021-11-20)\n\n* Fix mouse element position\n\n\n## 1.1.0 (2021-09-26)\n\n* Add DOM element locator\n\n\n## 1.0.1 (2021-09-01)\n\n* Fix mouse scroll maximum distance\n\n\n## 1.0.0 (2021-08-15)\n\n* Switched over to `chrome-php/wrench`\n* Add support for keyboard key combinations\n\n\n## 0.11.1 (2021-08-15)\n\n* Fix scroll method returning prematurely\n\n\n## 0.11.0 (2021-07-18)\n\n* Added support for proxy servers as a direct option\n* Added support for passing environment variables\n* Added support for Symfony 6\n* Removed broken `getChromeVersion` function\n* Implemented more robust auto-discovery\n\n\n## 0.10.0 (2021-05-22)\n\n* Added `Page::getHtml`\n* Added keyboard API\n* Added mouse scrolling\n* Attempt to auto-detect chrome binary path\n* Added support for `setDownloadPath`\n* Added support for `captureBeyondViewport`\n\n\n## 0.9.0 (2020-12-09)\n\n* Support PHP 8.0\n* Increase default sync timeout to 5 seconds\n* Set `--font-render-hinting=none` in headless mode\n* Fixed keep alive option\n* Fixed various phpdoc issues\n* Fixed sending params to newer Chrome\n* Fixed `Wrench::connect()` return value\n* Avoid non-thread-safe getenv function\n\n\n## 0.8.1 (2020-02-20)\n\n* Fixed issues with `Browser::close`\n* Support PHP 7.3 and 7.4\n\n\n## 0.8.0 (2020-02-20)\n\n* Added `Page::pdf`\n* Added timeout for PageEvaluation methods\n* Added support for Symfony 5\n* Added `Browser::close`\n\n\n## 0.7.0 (2019-10-04)\n\n* Escaping custom flags for `BrowserFactory` is now automatic\n* Added timeout for `Page::getFullPageClip`\n* Added timeout for method `getBase64`\n* Added options `headerTemplate` and `footerTempalte` for `Page::pdf`\n* Added options `scale` for Page::pdf\n* Handle gracefully all pages failing to close\n* Fixed deprecation from Symfony\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2001953125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2017-2020 Soufiane Ghzal <sghzal@gmail.com>\nCopyright (c) 2020-2024 Graham Campbell <hello@gjcampbell.co.uk>\nCopyright (c) 2020-2024 Enrico Dias <enricodias@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.103515625,
          "content": "install:\n\tcomposer update\n\tcomposer bin all update\n\ntest:\n\tvendor/bin/phpunit\n\tvendor/bin/phpstan analyze\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 25.62890625,
          "content": "# Chrome PHP\n\n[![Latest Stable Version](https://poser.pugx.org/chrome-php/chrome/version)](https://packagist.org/packages/chrome-php/chrome)\n[![License](https://poser.pugx.org/chrome-php/chrome/license)](https://packagist.org/packages/chrome-php/chrome)\n\nThis library lets you start playing with chrome/chromium in headless mode from PHP.\n\nCan be used synchronously and asynchronously!\n\n\n## Features\n\n- Open Chrome or Chromium browser from php\n- Create pages and navigate to pages\n- Take screenshots\n- Evaluate javascript on the page\n- Make PDF\n- Emulate mouse\n- Emulate keyboard\n- Always IDE friendly\n\nHappy browsing!\n\n\n## Requirements\n\nRequires PHP 7.4-8.4 and a Chrome/Chromium 65+ executable.\n\nNote that the library is only tested on Linux but is compatible with macOS and Windows.\n\n\n## Installation\n\nThe library can be installed with Composer and is available on packagist under\n[chrome-php/chrome](https://packagist.org/packages/chrome-php/chrome):\n\n```bash\n$ composer require chrome-php/chrome\n```\n\n\n## Usage\n\nIt uses a simple and understandable API to start Chrome, to open pages, take screenshots, crawl websites... and almost everything that you can do with Chrome as a human.\n\n```php\nuse HeadlessChromium\\BrowserFactory;\n\n$browserFactory = new BrowserFactory();\n\n// starts headless Chrome\n$browser = $browserFactory->createBrowser();\n\ntry {\n    // creates a new page and navigate to an URL\n    $page = $browser->createPage();\n    $page->navigate('http://example.com')->waitForNavigation();\n\n    // get page title\n    $pageTitle = $page->evaluate('document.title')->getReturnValue();\n\n    // screenshot - Say \"Cheese\"! 😄\n    $page->screenshot()->saveToFile('/foo/bar.png');\n\n    // pdf\n    $page->pdf(['printBackground' => false])->saveToFile('/foo/bar.pdf');\n} finally {\n    // bye\n    $browser->close();\n}\n```\n\n### Using different Chrome executable\n\nWhen starting, the factory will look for the environment variable ``\"CHROME_PATH\"`` to use as the Chrome executable.\nIf the variable is not found, it will try to guess the correct executable path according to your OS or use ``\"chrome\"`` as the default.\n\nYou are also able to explicitly set up any executable of your choice when creating a new object. For instance ``\"chromium-browser\"``:\n\n```php\nuse HeadlessChromium\\BrowserFactory;\n\n// replace default 'chrome' with 'chromium-browser'\n$browserFactory = new BrowserFactory('chromium-browser');\n```\n\n### Debugging\n\nThe following example disables headless mode to ease debugging\n\n```php\nuse HeadlessChromium\\BrowserFactory;\n\n$browserFactory = new BrowserFactory();\n\n$browser = $browserFactory->createBrowser([\n    'headless' => false, // disable headless mode\n]);\n```\n\nOther debug options:\n\n```php\n[\n    'connectionDelay' => 0.8,            // add 0.8 second of delay between each instruction sent to Chrome,\n    'debugLogger'     => 'php://stdout', // will enable verbose mode\n]\n```\n\nAbout ``debugLogger``: this can be any of a resource string, a resource, or an object implementing\n``LoggerInterface`` from Psr\\Log (such as [monolog](https://github.com/Seldaek/monolog)\nor [apix/log](https://github.com/apix/log)).\n\n\n## API\n\n### Browser Factory\n\nOptions set directly in the `createBrowser` method will be used only for a single browser creation. The default options will be ignored.\n\n```php\nuse HeadlessChromium\\BrowserFactory;\n\n$browserFactory = new BrowserFactory();\n$browser = $browserFactory->createBrowser([\n    'windowSize'   => [1920, 1000],\n    'enableImages' => false,\n]);\n\n// this browser will be created without any options\n$browser2 = $browserFactory->createBrowser();\n```\n\nOptions set using the `setOptions` and `addOptions` methods will persist.\n\n```php\n$browserFactory->setOptions([\n    'windowSize' => [1920, 1000],\n]);\n\n// both browser will have the same 'windowSize' option\n$browser1 = $browserFactory->createBrowser();\n$browser2 = $browserFactory->createBrowser();\n\n$browserFactory->addOptions(['enableImages' => false]);\n\n// this browser will have both the 'windowSize' and 'enableImages' options\n$browser3 = $browserFactory->createBrowser();\n\n$browserFactory->addOptions(['enableImages' => true]);\n\n// this browser will have the previous 'windowSize', but 'enableImages' will be true\n$browser4 = $browserFactory->createBrowser();\n```\n\n#### Available options\n\nHere are the options available for the browser factory:\n\n| Option name               | Default | Description                                                                                        |\n|---------------------------|---------|----------------------------------------------------------------------------------------------------|\n| `connectionDelay`         | `0`     | Delay to apply between each operation for debugging purposes                                       |\n| `customFlags`             | none    | An array of flags to pass to the command line. Eg: `['--option1', '--option2=someValue']`          |\n| `debugLogger`             | `null`  | A string (e.g \"php://stdout\"), or resource, or PSR-3 logger instance to print debug messages       |\n| `disableNotifications`    | `false` | Disable browser notifications                                                                      |\n| `enableImages`            | `true`  | Toggles loading of images                                                                          |\n| `envVariables`            | none    | An array of environment variables to pass to the process (example DISPLAY variable)                |\n| `headers`                 | none    | An array of custom HTTP headers                                                                    |\n| `headless`                | `true`  | Enable or disable headless mode                                                                    |\n| `ignoreCertificateErrors` | `false` | Set Chrome to ignore SSL errors                                                                    |\n| `keepAlive`               | `false` | Set to `true` to keep alive the Chrome instance when the script terminates                         |\n| `noSandbox`               | `false` | Enable no sandbox mode, useful to run in a docker container                                        |\n| `noProxyServer`           | `false` | Don't use a proxy server, always make direct connections. Overrides other proxy settings.          |\n| `proxyBypassList`         | none    | Specifies a list of hosts for whom we bypass proxy settings and use direct connections             |\n| `proxyServer`             | none    | Proxy server to use. usage: `127.0.0.1:8080` (authorisation with credentials does not work)        |\n| `sendSyncDefaultTimeout`  | `5000`  | Default timeout (ms) for sending sync messages                                                     |\n| `startupTimeout`          | `30`    | Maximum time in seconds to wait for Chrome to start                                                |\n| `userAgent`               | none    | User agent to use for the whole browser (see page API for alternative)                             |\n| `userDataDir`             | none    | Chrome user data dir (default: a new empty dir is generated temporarily)                           |\n| `userCrashDumpsDir`       | none    | The directory crashpad should store dumps in (crash reporter will be enabled automatically)        |\n| `windowSize`              | none    | Size of the window. usage: `$width, $height` - see also Page::setViewport                          |\n| `excludedSwitches`        | none    | An array of Chrome flags that should be removed from the default set (example --enable-automation) |\n\n\n### Persistent Browser\n\nThis example shows how to share a single instance of Chrome for multiple scripts.\n\nThe first time the script is started we use the browser factory in order to start Chrome, afterwards we save the uri to connect to this browser in the file system.\n\nThe next calls to the script will read the uri from that file in order to connect to the Chrome instance instead of creating a new one. If Chrome was closed or crashed, a new instance is started again.\n\n```php\nuse \\HeadlessChromium\\BrowserFactory;\nuse \\HeadlessChromium\\Exception\\BrowserConnectionFailed;\n\n// path to the file to store websocket's uri\n$socket = \\file_get_contents('/tmp/chrome-php-demo-socket');\n\ntry {\n    $browser = BrowserFactory::connectToBrowser($socket);\n} catch (BrowserConnectionFailed $e) {\n    // The browser was probably closed, start it again\n    $factory = new BrowserFactory();\n    $browser = $factory->createBrowser([\n        'keepAlive' => true,\n    ]);\n\n    // save the uri to be able to connect again to browser\n    \\file_put_contents($socketFile, $browser->getSocketUri(), LOCK_EX);\n}\n```\n\n### Browser API\n\n#### Create a new page (tab)\n\n```php\n$page = $browser->createPage();\n```\n\n#### Get opened pages (tabs)\n\n```php\n$pages = $browser->getPages();\n```\n\n#### Close the browser\n\n```php\n$browser->close();\n```\n\n### Set a script to evaluate before every page created by this browser will navigate\n\n```php\n$browser->setPagePreScript('// Simulate navigator permissions;\nconst originalQuery = window.navigator.permissions.query;\nwindow.navigator.permissions.query = (parameters) => (\n    parameters.name === 'notifications' ?\n        Promise.resolve({ state: Notification.permission }) :\n        originalQuery(parameters)\n);');\n```\n\n### Page API\n\n#### Navigate to an URL\n\n```php\n// navigate\n$navigation = $page->navigate('http://example.com');\n\n// wait for the page to be loaded\n$navigation->waitForNavigation();\n```\n\nWhen using ``$navigation->waitForNavigation()`` you will wait for 30sec until the page event \"loaded\" is triggered.\nYou can change the timeout or the event to listen for:\n\n```php\nuse HeadlessChromium\\Page;\n\n// wait 10secs for the event \"DOMContentLoaded\" to be triggered\n$navigation->waitForNavigation(Page::DOM_CONTENT_LOADED, 10000);\n```\n\nAvailable events (in the order they trigger):\n\n- ``Page::DOM_CONTENT_LOADED``: dom has completely loaded\n- ``Page::FIRST_CONTENTFUL_PAINT``: triggered when the first non-white content element is painted on the screen\n- ``Page::FIRST_IMAGE_PAINT``: triggered when the first image is painted on the screen\n- ``Page::FIRST_MEANINGFUL_PAINT``: triggered when the primary content of a page is visible to the user\n- ``Page::FIRST_PAINT``: triggered when any pixel on the screen is painted, including the browser's default background color\n- ``Page::INIT``: connection to DevTools protocol is initialized\n- ``Page::INTERACTIVE_TIME``: scripts have finished loading and the main thread is no longer blocked by rendering or other tasks\n- ``Page::LOAD``: (default) page and all resources are loaded\n- ``Page::NETWORK_IDLE``: page has loaded, and no network activity has occurred for at least 500ms\n\nWhen you want to wait for the page to navigate 2 main issues may occur.\nFirst, the page is too long to load and second, the page you were waiting to be loaded has been replaced.\nThe good news is that you can handle those issues using a good old try-catch:\n\n```php\nuse HeadlessChromium\\Exception\\OperationTimedOut;\nuse HeadlessChromium\\Exception\\NavigationExpired;\n\ntry {\n    $navigation->waitForNavigation()\n} catch (OperationTimedOut $e) {\n    // too long to load\n} catch (NavigationExpired $e) {\n    // An other page was loaded\n}\n```\n\n#### Evaluate script on the page\n\nOnce the page has completed the navigation you can evaluate arbitrary script on this page:\n\n```php\n// navigate\n$navigation = $page->navigate('http://example.com');\n\n// wait for the page to be loaded\n$navigation->waitForNavigation();\n\n// evaluate script in the browser\n$evaluation = $page->evaluate('document.documentElement.innerHTML');\n\n// wait for the value to return and get it\n$value = $evaluation->getReturnValue();\n```\n\n\nSometimes the script you evaluate will click a link or submit a form, in this case, the page will reload and you\nwill want to wait for the new page to reload.\n\nYou can achieve this by using ``$page->evaluate('some js that will reload the page')->waitForPageReload()``.\nAn example is available in [form-submit.php](./examples/form-submit.php)\n\n#### Call a function\n\nThis is an alternative to ``evaluate`` that allows calling a given function with the given arguments in the page context:\n\n```php\n$evaluation = $page->callFunction(\n    \"function(a, b) {\\n    window.foo = a + b;\\n}\",\n    [1, 2]\n);\n\n$value = $evaluation->getReturnValue();\n```\n\n#### Add a script tag\n\nThat's useful if you want to add jQuery (or anything else) to the page:\n\n```php\n$page->addScriptTag([\n    'content' => file_get_contents('path/to/jquery.js')\n])->waitForResponse();\n\n$page->evaluate('$(\".my.element\").html()');\n```\n\nYou can also use an URL to feed the src attribute:\n\n```php\n$page->addScriptTag([\n    'url' => 'https://code.jquery.com/jquery-3.3.1.min.js'\n])->waitForResponse();\n\n$page->evaluate('$(\".my.element\").html()');\n```\n\n#### Set the page HTML\n\nYou can manually inject html to a page using the ```setHtml``` method.\n\n```php\n// Basic\n$page->setHtml('<p>text</p>');\n\n// Specific timeout & event\n$page->setHtml('<p>text</p>', 10000, Page::NETWORK_IDLE);\n```\n\nWhen a page's HTML is updated, we'll wait for the page to unload. You can specify how long to wait and which event to wait for through two optional parameters. This defaults to 3000ms and the \"load\" event.\n\nNote that this method will not append to the current page HTML, it will completely replace it.\n\n#### Get the page HTML\n\nYou can get the page HTML as a string using the ```getHtml``` method.\n\n```php\n$html = $page->getHtml();\n```\n\n### Add a script to evaluate upon page navigation\n\n```php\n$page->addPreScript('// Simulate navigator permissions;\nconst originalQuery = window.navigator.permissions.query;\nwindow.navigator.permissions.query = (parameters) => (\n    parameters.name === 'notifications' ?\n        Promise.resolve({ state: Notification.permission }) :\n        originalQuery(parameters)\n);');\n```\n\nIf your script needs the dom to be fully populated before it runs then you can use the option \"onLoad\":\n\n```php\n$page->addPreScript($script, ['onLoad' => true]);\n```\n\n#### Set viewport size\n\nThis feature allows changing the size of the viewport (emulation) for the current page without affecting the size of\nall the browser's pages (see also option ``\"windowSize\"`` of [BrowserFactory::createBrowser](#options)).\n\n```php\n$width = 600;\n$height = 300;\n$page->setViewport($width, $height)\n    ->await(); // wait for the operation to complete\n```\n\n#### Make a screenshot\n\n```php\n// navigate\n$navigation = $page->navigate('http://example.com');\n\n// wait for the page to be loaded\n$navigation->waitForNavigation();\n\n// take a screenshot\n$screenshot = $page->screenshot([\n    'format'  => 'jpeg',  // default to 'png' - possible values: 'png', 'jpeg', 'webp'\n    'quality' => 80,      // only when format is 'jpeg' or 'webp' - default 100\n    'optimizeForSpeed' => true // default to 'false' - Optimize image encoding for speed, not for resulting size\n]);\n\n// save the screenshot\n$screenshot->saveToFile('/some/place/file.jpg');\n```\n\n**Screenshot an area on a page**\n\nYou can use the option \"clip\" to choose an area on a page for the screenshot\n\n```php\nuse HeadlessChromium\\Clip;\n\n// navigate\n$navigation = $page->navigate('http://example.com');\n\n// wait for the page to be loaded\n$navigation->waitForNavigation();\n\n// create a rectangle by specifying to left corner coordinates + width and height\n$x = 10;\n$y = 10;\n$width = 100;\n$height = 100;\n$clip = new Clip($x, $y, $width, $height);\n\n// take the screenshot (in memory binaries)\n$screenshot = $page->screenshot([\n    'clip'  => $clip,\n]);\n\n// save the screenshot\n$screenshot->saveToFile('/some/place/file.jpg');\n```\n\n**Full-page screenshot**\n\nYou can also take a screenshot for the full-page layout (not only the viewport) using ``$page->getFullPageClip`` with attribute ``captureBeyondViewport = true``\n\n```php\n// navigate\n$navigation = $page->navigate('https://example.com');\n\n// wait for the page to be loaded\n$navigation->waitForNavigation();\n\n$screenshot = $page->screenshot([\n    'captureBeyondViewport' => true,\n    'clip' => $page->getFullPageClip(),\n    'format' => 'jpeg', // default to 'png' - possible values: 'png', 'jpeg', 'webp'\n]);\n\n// save the screenshot\n$screenshot->saveToFile('/some/place/file.jpg');\n```\n\n#### Print as PDF\n\n```php\n// navigate\n$navigation = $page->navigate('http://example.com');\n\n// wait for the page to be loaded\n$navigation->waitForNavigation();\n\n$options = [\n    'landscape'           => true,             // default to false\n    'printBackground'     => true,             // default to false\n    'displayHeaderFooter' => true,             // default to false\n    'preferCSSPageSize'   => true,             // default to false (reads parameters directly from @page)\n    'marginTop'           => 0.0,              // defaults to ~0.4 (must be a float, value in inches)\n    'marginBottom'        => 1.4,              // defaults to ~0.4 (must be a float, value in inches)\n    'marginLeft'          => 5.0,              // defaults to ~0.4 (must be a float, value in inches)\n    'marginRight'         => 1.0,              // defaults to ~0.4 (must be a float, value in inches)\n    'paperWidth'          => 6.0,              // defaults to 8.5 (must be a float, value in inches)\n    'paperHeight'         => 6.0,              // defaults to 11.0 (must be a float, value in inches)\n    'headerTemplate'      => '<div>foo</div>', // see details above\n    'footerTemplate'      => '<div>foo</div>', // see details above\n    'scale'               => 1.2,              // defaults to 1.0 (must be a float)\n];\n\n// print as pdf (in memory binaries)\n$pdf = $page->pdf($options);\n\n// save the pdf\n$pdf->saveToFile('/some/place/file.pdf');\n\n// or directly output pdf without saving\nheader('Content-Description: File Transfer');\nheader('Content-Type: application/pdf');\nheader('Content-Disposition: inline; filename=filename.pdf');\nheader('Content-Transfer-Encoding: binary');\nheader('Expires: 0');\nheader('Cache-Control: must-revalidate, post-check=0, pre-check=0');\nheader('Pragma: public');\n\necho base64_decode($pdf->getBase64());\n```\n\nOptions `headerTemplate` and `footerTemplate`:\n\nShould be valid HTML markup with the following classes used to inject printing values into them:\n- date: formatted print date\n- title: document title\n- url: document location\n- pageNumber: current page number\n- totalPages: total pages in the document\n\n### Save downloads\n\nYou can set the path to save downloaded files.\n\n```php\n// After creating a page.\n$page->setDownloadPath('/path/to/save/downloaded/files');\n```\n\n### Mouse API\n\nThe mouse API is dependent on the page instance and allows you to control the mouse's moves, clicks and scroll.\n\n```php\n$page->mouse()\n    ->move(10, 20)                             // Moves mouse to position x=10; y=20\n    ->click()                                  // left-click on position set above\n    ->move(100, 200, ['steps' => 5])           // move mouse to x=100; y=200 in 5 equal steps\n    ->click(['button' => Mouse::BUTTON_RIGHT]; // right-click on position set above\n\n// given the last click was on a link, the next step will wait\n// for the page to load after the link was clicked\n$page->waitForReload();\n```\n\nYou can emulate the mouse wheel to scroll up and down in a page, frame, or element.\n\n```php\n$page->mouse()\n    ->scrollDown(100) // scroll down 100px\n    ->scrollUp(50);   // scroll up 50px\n```\n\n#### Finding elements\n\nThe `find` method will search for elements using [querySelector](https://developer.mozilla.org/docs/Web/API/Document/querySelector) and move the cursor to a random position over it.\n\n```php\ntry {\n    $page->mouse()->find('#a')->click(); // find and click at an element with id \"a\"\n\n    $page->mouse()->find('.a', 10); // find the 10th or last element with class \"a\"\n} catch (ElementNotFoundException $exception) {\n    // element not found\n}\n```\n\nThis method will attempt to scroll right and down to bring the element to the visible screen. If the element is inside an internal scrollable section, try moving the mouse to inside that section first.\n\n### Keyboard API\n\nThe keyboard API is dependent on the page instance and allows you to type like a real user.\n\n```php\n$page->keyboard()\n    ->typeRawKey('Tab') // type a raw key, such as Tab\n    ->typeText('bar');  // type the text \"bar\"\n```\n\nTo impersonate a real user you may want to add a delay between each keystroke using the ```setKeyInterval``` method:\n\n```php\n$page->keyboard()->setKeyInterval(10); // sets a delay of 10 milliseconds between keystrokes\n```\n\n#### Key combinations\n\nThe methods `press`, `type`, and `release` can be used to send key combinations such as `ctrl + v`.\n\n```php\n// ctrl + a to select all text\n$page->keyboard()\n    ->press('control') // key names are case insensitive and trimmed\n        ->type('a')    // press and release\n    ->release('Control');\n\n// ctrl + c to copy and ctrl + v to paste it twice\n$page->keyboard()\n    ->press('Ctrl') // alias for Control\n        ->type('c')\n        ->type('V') // upper and lower cases should behave the same way\n    ->release();    // release all\n```\n\nYou can press the same key several times in sequence, this is the equivalent to a user pressing and holding the key. The release event, however, will be sent only once per key.\n\n#### Key aliases\n\n| Key     | Aliases                  |\n|---------|--------------------------|\n| Control | `Control`, `Ctrl`, `Ctr` |\n| Alt     | `Alt`, `AltGr`, `Alt Gr` |\n| Meta    | `Meta`, `Command`, `Cmd` |\n| Shift   | `Shift`                  |\n\n### Cookie API\n\nYou can set and get cookies for a page:\n\n#### Set Cookie\n\n```php\nuse HeadlessChromium\\Cookies\\Cookie;\n\n$page = $browser->createPage();\n\n// example 1: set cookies for a given domain\n\n$page->setCookies([\n    Cookie::create('name', 'value', [\n        'domain' => 'example.com',\n        'expires' => time() + 3600 // expires in 1 hour\n    ])\n])->await();\n\n\n// example 2: set cookies for the current page\n\n$page->navigate('http://example.com')->waitForNavigation();\n\n$page->setCookies([\n    Cookie::create('name', 'value', ['expires'])\n])->await();\n```\n\n#### Get Cookies\n\n```php\nuse HeadlessChromium\\Cookies\\Cookie;\n\n$page = $browser->createPage();\n\n// example 1: get all cookies for the browser\n\n$cookies = $page->getAllCookies();\n\n// example 2: get cookies for the current page\n\n$page->navigate('http://example.com')->waitForNavigation();\n$cookies = $page->getCookies();\n\n// filter cookies with name == 'foo'\n$cookiesFoo = $cookies->filterBy('name', 'foo');\n\n// find first cookie with name == 'bar'\n$cookieBar = $cookies->findOneBy('name', 'bar');\nif ($cookieBar) {\n    // do something\n}\n```\n\n### Set user agent\n\nYou can set up a user-agent per page:\n\n```php\n$page->setUserAgent('my user-agent');\n```\n\nSee also BrowserFactory option ``userAgent`` to set up it for the whole browser.\n\n\nAdvanced usage\n--------------\n\nThe library ships with tools that hide all the communication logic but you can use the tools used internally to\ncommunicate directly with Chrome debug protocol.\n\nExample:\n\n```php\nuse HeadlessChromium\\Communication\\Connection;\nuse HeadlessChromium\\Communication\\Message;\n\n// Chrome devtools URI\n$webSocketUri = 'ws://127.0.0.1:9222/devtools/browser/xxx';\n\n// create a connection\n$connection = new Connection($webSocketUri);\n$connection->connect();\n\n// send method \"Target.activateTarget\"\n$responseReader = $connection->sendMessage(new Message('Target.activateTarget', ['targetId' => 'xxx']));\n\n// wait up to 1000ms for a response\n$response = $responseReader->waitForResponse(1000);\n```\n\n### Create a session and send a message to the target\n\n```php\n// given a target id\n$targetId = 'yyy';\n\n// create a session for this target (attachToTarget)\n$session = $connection->createSession($targetId);\n\n// send message to this target (Target.sendMessageToTarget)\n$response = $session->sendMessageSync(new Message('Page.reload'));\n```\n\n### Debugging\n\nYou can ease the debugging by setting a delay before each operation is made:\n\n```php\n  $connection->setConnectionDelay(500); // wait for 500ms between each operation to ease debugging\n```\n\n### Browser (standalone)\n\n```php\nuse HeadlessChromium\\Communication\\Connection;\nuse HeadlessChromium\\Browser;\n\n// Chrome devtools URI\n$webSocketUri = 'ws://127.0.0.1:9222/devtools/browser/xxx';\n\n// create connection given a WebSocket URI\n$connection = new Connection($webSocketUri);\n$connection->connect();\n\n// create browser\n$browser = new Browser($connection);\n```\n\n### Interacting with DOM\n\nFind one element on a page by CSS selector:\n\n```php\n$page = $browser->createPage();\n$page->navigate('http://example.com')->waitForNavigation();\n\n$elem = $page->dom()->querySelector('#index_email');\n```\n\nFind all elements inside another element by CSS selector:\n\n```php\n$elem = $page->dom()->querySelector('#index_email');\n$elem->querySelectorAll('a.link');\n```\n\nFind all elements on a page by XPath selector:\n\n```php\n$page = $browser->createPage();\n$page->navigate('http://example.com')->waitForNavigation();\n\n$elem = $page->dom()->search('//div/*/a');\n```\n\nWait for an element by CSS selector:\n\n```php\n$page = $browser->createPage();\n$page->navigate('http://example.com')->waitForNavigation();\n\n$page->waitUntilContainsElement('div[data-name=\\\"el\\\"]');\n```\n\nIf a string is passed to `Page::waitUntilContainsElement`, an instance of\n`CSSSelector` is created for you by `Page::waitForElement`. To use other\nselectors, you can pass an instance of the required `Selector`.\n\nWait for element by XPath selector:\n\n```php\nuse HeadlessChromium\\Dom\\Selector\\XPathSelector;\n\n$page = $browser->createPage();\n$page->navigate('http://example.com')->waitForNavigation();\n\n$page->waitUntilContainsElement(new XPathSelector('//div[contains(text(), \"content\")]'));\n```\n\n\nYou can send out a text to an element or click on it:\n\n```php\n$elem->click();\n$elem->sendKeys('Sample text');\n```\n\nYou can upload file to file from the input:\n\n```php\n$elem->sendFile('/path/to/file');\n```\n\nYou can get element text or attribute:\n\n```php\n$text = $elem->getText();\n$attr = $elem->getAttribute('class');\n```\n\n\n## Contributing\n\nSee [CONTRIBUTING.md](.github/CONTRIBUTING.md) for contribution details.\n\n\n## License\n\nThis project is licensed under the [The MIT License (MIT)](LICENSE).\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.60546875,
          "content": "{\n    \"name\": \"chrome-php/chrome\",\n    \"description\": \"Instrument headless chrome/chromium instances from PHP\",\n    \"keywords\": [\"chrome\", \"chromium\", \"crawl\", \"browser\", \"headless\", \"screenshot\", \"pdf\", \"puppeteer\"],\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Graham Campbell\",\n            \"email\": \"hello@gjcampbell.co.uk\",\n            \"homepage\": \"https://github.com/GrahamCampbell\"\n        },\n        {\n            \"name\": \"Enrico Dias\",\n            \"email\": \"enrico@enricodias.com\",\n            \"homepage\": \"https://github.com/enricodias\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^7.4.15 || ^8.0.2\",\n        \"chrome-php/wrench\": \"^1.7\",\n        \"evenement/evenement\": \"^3.0.1\",\n        \"monolog/monolog\": \"^1.27.1 || ^2.8 || ^3.2\",\n        \"psr/log\": \"^1.1 || ^2.0 || ^3.0\",\n        \"symfony/filesystem\": \"^4.4 || ^5.0 || ^6.0 || ^7.0\",\n        \"symfony/polyfill-mbstring\": \"^1.26\",\n        \"symfony/process\": \"^4.4 || ^5.0 || ^6.0 || ^7.0\"\n    },\n    \"require-dev\":{\n        \"bamarni/composer-bin-plugin\": \"^1.8.2\",\n        \"phpunit/phpunit\": \"^9.6.3 || ^10.0.12\",\n        \"symfony/var-dumper\": \"^4.4 || ^5.0 || ^6.0 || ^7.0\"\n    },\n    \"autoload\":{\n        \"psr-4\" : {\n          \"HeadlessChromium\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\":{\n        \"psr-4\" : {\n          \"HeadlessChromium\\\\Test\\\\\": \"tests/\"\n        }\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"bamarni/composer-bin-plugin\": true\n        },\n        \"preferred-install\": \"dist\"\n    },\n    \"extra\": {\n        \"bamarni-bin\": {\n            \"bin-links\": true,\n            \"forward-command\": false\n        }\n    }\n}\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 0.0654296875,
          "content": "parameters:\n    level: 3\n\n    paths:\n        - src\n        - tests\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.5634765625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" backupGlobals=\"false\" bootstrap=\"vendor/autoload.php\" colors=\"true\" processIsolation=\"false\" stopOnFailure=\"false\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.0/phpunit.xsd\" requireCoverageMetadata=\"true\">\n  <testsuites>\n    <testsuite name=\"Test Suite\">\n      <directory suffix=\"Test.php\">./tests</directory>\n    </testsuite>\n  </testsuites>\n  <coverage>\n    <include>\n      <directory suffix=\".php\">./src</directory>\n    </include>\n  </coverage>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor-bin",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}