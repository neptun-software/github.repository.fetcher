{
  "metadata": {
    "timestamp": 1736712037461,
    "page": 552,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/msphpsql",
      "stars": 1813,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.068359375,
          "content": ".vs\n.vscode\n__pycache__\n*.diff\n*.exp\n*.log\n*.sh\n*.out\ntest/**/**/*.php"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.06640625,
          "content": "sudo: required\r\n\r\nos: linux\r\ndist: bionic\r\n\r\ngroup: edge\r\n\r\nservices:\r\n  - docker\r\n\r\nenv:\r\n  global:\r\n  - REPORT_EXIT_STATUS=1\r\n  - ACCEPT_EULA=Y\r\n  - PHPSQLDIR=/REPO/msphpsql-dev\r\n  - TEST_PHP_SQL_SERVER=sql\r\n  - SQLSRV_DBNAME=msphpsql_sqlsrv\r\n  - PDOSQLSRV_DBNAME=msphpsql_pdosqlsrv  \r\n  - TEST_PHP_SQL_UID=sa\r\n  - TEST_PHP_SQL_PWD=Password123\r\n\r\nbefore_install:\r\n  - docker pull mcr.microsoft.com/mssql/server:2017-latest\r\n \r\ninstall:\r\n  - docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=Password123' -p 1433:1433 --name=$TEST_PHP_SQL_SERVER -d mcr.microsoft.com/mssql/server:2017-latest\r\n  - docker build --build-arg PHPSQLDIR=$PHPSQLDIR -t msphpsql-dev -f Dockerfile-msphpsql .\r\n\r\nbefore_script:\r\n  - sleep 30\r\n  \r\nscript: \r\n  - travis_retry docker run -e TRAVIS_JOB_ID -t -d -w $PHPSQLDIR --name=client --link $TEST_PHP_SQL_SERVER msphpsql-dev\r\n  - docker ps -a\r\n  - docker logs client\r\n  - travis_retry docker exec client python ./test/functional/setup/setup_dbs.py -dbname $SQLSRV_DBNAME\r\n  - travis_retry docker exec client python ./test/functional/setup/setup_dbs.py -dbname $PDOSQLSRV_DBNAME\r\n  - travis_retry docker exec client php ./source/pdo_sqlsrv/run-tests.php ./test/functional/pdo_sqlsrv/*.phpt\r\n  - travis_retry docker exec client php ./source/sqlsrv/run-tests.php ./test/functional/sqlsrv/*.phpt\r\n  - docker exec client bash -c 'for f in ./test/functional/sqlsrv/*.diff; do ls $f 2>/dev/null; cat $f 2>/dev/null; done || true'\r\n  - docker exec client bash -c 'for f in ./test/functional/sqlsrv/*.out; do ls $f 2>/dev/null; cat $f 2>/dev/null; done || true'\r\n  - docker exec client bash -c 'for f in ./test/functional/pdo_sqlsrv/*.diff; do ls $f 2>/dev/null; cat $f 2>/dev/null; done || true' \r\n  - docker exec client bash -c 'for f in ./test/functional/pdo_sqlsrv/*.out; do ls $f 2>/dev/null; cat $f 2>/dev/null; done || true' \r\n  - docker exec client python ./test/functional/setup/cleanup_dbs.py -dbname $SQLSRV_DBNAME\r\n  - docker exec client python ./test/functional/setup/cleanup_dbs.py -dbname $PDOSQLSRV_DBNAME\r\n  - docker stop client\r\n  - docker ps -a \r\n\r\nnotifications:\r\n  email: false\r\n\r\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 110.6728515625,
          "content": "# Change Log\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/)\n\n## 5.12.0 - 2024-01-31\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Support for PHP 8.3\n- Support for Alpine 3.19\n\n### Removed\n- Support for PHP 8.0\n- Support for Ubuntu 18.04\n- Support for Alpine 3.15\n\n### Fixed\n- Update connection string keywords set function (#1484)\n- Fix error throw for multiple result sets (#1485)\n- Fix invalid precision error (#1497)\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - Issue [#1050](https://github.com/microsoft/msphpsql/issues/1050) - With Always Encrypted enabled, insertion requires the column list for any tables with identity columns\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- This release requires ODBC Driver 17.4.2 or above. Otherwise, a warning about failing to set an attribute may be suppressed when using an older ODBC driver.\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n\n\n## 5.12.0-beta1 - 2023-12-08\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Support for PHP 8.3\n\n### Removed\n- Support for PHP 8.0\n- Support for Ubuntu 18.04\n\n### Fixed\n- Update connection string keywords set function (#1484)\n- Fix error throw for multiple result sets (#1485)\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - Issue [#1050](https://github.com/microsoft/msphpsql/issues/1050) - With Always Encrypted enabled, insertion requires the column list for any tables with identity columns\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- This release requires ODBC Driver 17.4.2 or above. Otherwise, a warning about failing to set an attribute may be suppressed when using an older ODBC driver.\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n\n\n## 5.11.1 - 2023-08-31\nUpdated PECL release packages. Here is the list of updates:\n\n### Fixed\n- Reset type after bind param (#1452)\n- Fixed error when using PDO::ATTR_STRINGIFY_FETCHES (#1468) by SakiTakamachi\n- Change connection options to case insensitive (#1460)\n- Bugfix for 1465 Adding a NULL check (#1471)\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - Issue [#1050](https://github.com/microsoft/msphpsql/issues/1050) - With Always Encrypted enabled, insertion requires the column list for any tables with identity columns\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- This release requires ODBC Driver 17.4.2 or above. Otherwise, a warning about failing to set an attribute may be suppressed when using an older ODBC driver.\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n\n\n## 5.11.0 - 2023-02-28\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Support for PHP 8.2\n\n### Removed\n- Support for PHP 7.4\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - Issue [#1050](https://github.com/microsoft/msphpsql/issues/1050) - With Always Encrypted enabled, insertion requires the column list for any tables with identity columns\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- This release requires ODBC Driver 17.4.2 or above. Otherwise, a warning about failing to set an attribute may be suppressed when using an older ODBC driver.\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n\n\n## 5.11.0-beta1 - 2023-01-25\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Support for PHP 8.2\n\n### Fixed\n- Pull request [#1408](https://github.com/microsoft/msphpsql/pull/1408) - Fixed right truncation issue, unit test added by talkinnl\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - Issue [#1050](https://github.com/microsoft/msphpsql/issues/1050) - With Always Encrypted enabled, insertion requires the column list for any tables with identity columns\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- This release requires ODBC Driver 17.4.2 or above. Otherwise, a warning about failing to set an attribute may be suppressed when using an older ODBC driver.\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n\n\n## 5.10.1 - 2022-05-12\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Pull request [#1382](https://github.com/microsoft/msphpsql/pull/1382) - Support for ActiveDirectoryIntegrated authentication\n\n### Fixed\n- Pull request [#1374](https://github.com/microsoft/msphpsql/pull/1374) - Fixed ActiveDirectoryMsi Authentication behavior when specified UID by laclefyoshi\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - Issue [#1050](https://github.com/microsoft/msphpsql/issues/1050) - With Always Encrypted enabled, insertion requires the column list for any tables with identity columns\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- This release requires ODBC Driver 17.4.2 or above. Otherwise, a warning about failing to set an attribute may be suppressed when using an older ODBC driver.\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n\n\n## 5.10.0 - 2022-01-31\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Support for PHP 8.1\n- Support for macOS Monterey, Debian 11, Ubuntu 21.04 and 21.10, Alpine 3.13, 3.14 and 3.15\n- Support for Apple M1 ARM64 hardware -- requires [MS ODBC Driver 17.8+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/install-microsoft-odbc-driver-sql-server-macos?view=sql-server-ver15)\n- Adjusted connection keyword and value validation for more flexibility\n- Feature Request [#795](https://github.com/microsoft/msphpsql/issues/795) - adding support for [Table-valued parameters](https://github.com/Microsoft/msphpsql/wiki/Features#tvp)\n- Feature Request [#1320](https://github.com/microsoft/msphpsql/issues/1320) - allow PDO::ATTR_EMULATE_PREPARES to be set at the connection level\n\n### Removed\n- Support for PHP 7.3\n- Support for Ubuntu 16.04, Alpine 3.11 and Alpine 3.12\n\n### Fixed\n- Issue [#1244](https://github.com/microsoft/msphpsql/issues/1244) - use lower case for object names for PDO::lastInsertId() - pull request [#1245](https://github.com/microsoft/msphpsql/pull/1245) by morozov\n- Pull request [#1251](https://github.com/microsoft/msphpsql/pull/1251) - simplified implementations of last insert id and quote\n- Issue [#1258](https://github.com/microsoft/msphpsql/issues/1258) - updated pdo_sqlsrv_get_driver_methods as per documentation - pull request [#1259](https://github.com/microsoft/msphpsql/pull/1259)\n- Pull request [#1260](https://github.com/microsoft/msphpsql/pull/1260) - cleaned up redundant code\n- Issue [#1261](https://github.com/microsoft/msphpsql/issues/1261) - simplified get_field_as_string and made it more robust - pull request [#1265](https://github.com/microsoft/msphpsql/pull/1265)\n- Pull request [#1262](https://github.com/microsoft/msphpsql/pull/1262) - simplified parse_param_array in sqlsrv\n- Pull request [#1267](https://github.com/microsoft/msphpsql/pull/1267) - replaced the obsolete MACRO ZVAL_NEW_ARR with array_init\n- Pull request [#1275](https://github.com/microsoft/msphpsql/pull/1275) - fixed warning compiling core_stmt.cpp by mlocati\n- Pull request [#1288](https://github.com/microsoft/msphpsql/pull/1288) - applied mask to pdo quote for binary inputs\n- Pull request [#1290](https://github.com/microsoft/msphpsql/pull/1290) - updated list of supported processor architecture\n- Issue [#1307](https://github.com/microsoft/msphpsql/issues/1307) - added TVP support to non-procedure statements\n- Issue [#1310](https://github.com/microsoft/msphpsql/issues/1310) - adjusted sql_data_type and column size for NULL parameters - pull request [#1311](https://github.com/microsoft/msphpsql/pull/1311) by gjcarrette\n- Pull request [#1326](https://github.com/microsoft/msphpsql/pull/1326) - php drivers simply pass Azure AD Authentication to ODBC driver, which will verify the settings\n- Issue [#1329](https://github.com/microsoft/msphpsql/issues/1329) - reset sql type and column size for input params\n- Issue [#1331](https://github.com/microsoft/msphpsql/issues/1331) - restore PDO::ATTR_ERRMODE if calling PDO::lastInsertId() call fails - pull request [#1330](https://github.com/microsoft/msphpsql/pull/1330) by mpyw and pull request [#1332](https://github.com/microsoft/msphpsql/pull/1332)\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - Issue [#1050](https://github.com/microsoft/msphpsql/issues/1050) - With Always Encrypted enabled, insertion requires the column list for any tables with identity columns\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- This release requires ODBC Driver 17.4.2 or above. Otherwise, a warning about failing to set an attribute may be suppressed when using an older ODBC driver.\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n\n\n## 5.10.0-beta2 - 2021-12-02\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Support for PHP 8.1\n- Support for Ubuntu 21.10\n- Feature Request [#1320](https://github.com/microsoft/msphpsql/issues/1320) - allow PDO::ATTR_EMULATE_PREPARES to be set at the connection level\n\n### Fixed\n- Issue [#1307](https://github.com/microsoft/msphpsql/issues/1307) - added TVP support to non-procedure statements\n- Issue [#1310](https://github.com/microsoft/msphpsql/issues/1310) - adjusted sql_data_type and column size for NULL parameters - pull request [#1311](https://github.com/microsoft/msphpsql/pull/1311) by gjcarrette\n- Pull request [#1326](https://github.com/microsoft/msphpsql/pull/1326) - php drivers simply pass Azure AD Authentication to ODBC driver, which will verify the settings\n- Issue [#1329](https://github.com/microsoft/msphpsql/issues/1329) - reset sql type and column size for input params\n- Issue [#1331](https://github.com/microsoft/msphpsql/issues/1331) - restore PDO::ATTR_ERRMODE if calling PDO::lastInsertId() call fails - pull request [#1330](https://github.com/microsoft/msphpsql/pull/1330) by mpyw and pull request [#1332](https://github.com/microsoft/msphpsql/pull/1332)\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - Issue [#1050](https://github.com/microsoft/msphpsql/issues/1050) - With Always Encrypted enabled, insertion requires the column list for any tables with identity columns\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- This release requires ODBC Driver 17.4.2 or above. Otherwise, a warning about failing to set an attribute may be suppressed when using an older ODBC driver.\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n\n\n## 5.10.0-beta1 - 2021-09-08\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Support for PHP 8.1 RC 1\n- Support for Ubuntu 21.04 and Alpine 3.13\n- Support for Apple M1 ARM64 hardware (requires [MS ODBC Driver 17.8+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/install-microsoft-odbc-driver-sql-server-macos?view=sql-server-ver15)\n- Feature Request [#795](https://github.com/microsoft/msphpsql/issues/795) - adding support for [Table-valued parameters](https://github.com/Microsoft/msphpsql/wiki/Features#tvp)\n\n### Removed\n- Support for Ubuntu 16.04\n\n### Fixed\n- Issue [#1244](https://github.com/microsoft/msphpsql/issues/1244) - use lower case for object names for PDO::lastInsertId() - pull request [#1245](https://github.com/microsoft/msphpsql/pull/1245) by morozov\n- Pull request [#1251](https://github.com/microsoft/msphpsql/pull/1251) - simplified implementations of last insert id and quote\n- Issue [#1258](https://github.com/microsoft/msphpsql/issues/1258) - updated pdo_sqlsrv_get_driver_methods as per documentation - pull request [#1259](https://github.com/microsoft/msphpsql/pull/1259)\n- Pull request [#1260](https://github.com/microsoft/msphpsql/pull/1260) - cleaned up redundant code\n- Issue [#1261](https://github.com/microsoft/msphpsql/issues/1261) - simplified get_field_as_string and made it more robust - pull request [#1265](https://github.com/microsoft/msphpsql/pull/1265)\n- Pull request [#1262](https://github.com/microsoft/msphpsql/pull/1262) - simplified parse_param_array in sqlsrv\n- Pull request [#1267](https://github.com/microsoft/msphpsql/pull/1267) - replaced the obsolete MACRO ZVAL_NEW_ARR with array_init\n- Pull request [#1275](https://github.com/microsoft/msphpsql/pull/1275) - fixed warning compiling core_stmt.cpp by mlocati\n- Pull request [#1288](https://github.com/microsoft/msphpsql/pull/1288) - applied mask to pdo quote for binary inputs\n- Pull request [#1290](https://github.com/microsoft/msphpsql/pull/1290) - updated list of supported processor architecture\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - Issue [#1050](https://github.com/microsoft/msphpsql/issues/1050) - With Always Encrypted enabled, insertion requires the column list for any tables with identity columns\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- This release requires ODBC Driver 17.4.2 or above. Otherwise, a warning about failing to set an attribute may be suppressed when using an older ODBC driver.\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n\n\n## 5.9.0 - 2021-01-29\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Support for PHP 8.0\n- Support for macOS Big Sur, Ubuntu 20.04, Ubuntu 20.10 and Alpine 3.12\n- Support for GB18030 locale [#1115](\nhttps://github.com/microsoft/msphpsql/pull/1115)\n- Feature Request [#924](https://github.com/microsoft/msphpsql/issues/924) - extended PDO errorinfo to include [additional odbc messages if available](https://docs.microsoft.com/sql/connect/php/pdo-errorinfo) - pull request [#1133](\nhttps://github.com/microsoft/msphpsql/pull/1133)\n- [Data Classification with rank info](https://github.com/microsoft/msphpsql/wiki/Features#dataClass), which requires [MS ODBC Driver 17.4.2+](https://docs.microsoft.com/sql/connect/odbc/download-odbc-driver-for-sql-server) and [SQL Server 2019](https://www.microsoft.com/sql-server/sql-server-2019) or an Azure SQL instance that supports it\n- [Azure Active Directory Service Principal authentication support](https://docs.microsoft.com/sql/connect/php/azure-active-directory), which requires [MS ODBC Driver 17.7+](https://docs.microsoft.com/sql/connect/odbc/download-odbc-driver-for-sql-server)\n\n### Removed\n- Dropped support for PHP 7.2\n- Dropped support for macOS High Sierra, Ubuntu 19.10 and Debian 8\n\n### Fixed\n- Pull Request [#1127](https://github.com/microsoft/msphpsql/pull/1127) - removed TSRMLS macros in preparation for PHP 8 by remicollet\n- Pull Request [#1136](https://github.com/microsoft/msphpsql/pull/1136) - improved performance when handling decimal numbers as inputs or outputs and removed unncessary conversions for numeric values\n- Pull Request [#1143](https://github.com/microsoft/msphpsql/pull/1143) - if an exception occurs when executing a query, it will not change the output parameters\n- Pull Request [#1144](https://github.com/microsoft/msphpsql/pull/1144) - use the correct C types when binding output parameters with integer values\n- Pull Request [#1146](https://github.com/microsoft/msphpsql/pull/1146) - improved performance when fetching numbers using client buffers\n- Pull Request [#1165](https://github.com/microsoft/msphpsql/pull/1165) - set query timeout without using LOCK TIMEOUT, which saves an extra trip to the server\n- Issue [#1170](https://github.com/microsoft/msphpsql/issues/1170) - when fetching large data types such as ntext, check more than only the display size - pull request [#1172](https://github.com/microsoft/msphpsql/pull/1172)\n- Pull Request [#1205](https://github.com/microsoft/msphpsql/pull/1205) - minimized compilation warnings on Linux and macOS \n- Pull Request [#1209](https://github.com/microsoft/msphpsql/pull/1209) - fixed a bug when fetching varbinary max fields as char or wide chars\n- Issue [#1210](https://github.com/microsoft/msphpsql/issues/1210) - switched from preview to beta terminology to enable Pickle support\n- Issue [#1213](https://github.com/microsoft/msphpsql/issues/1213) - the MACOSX_DEPLOYMENT_TARGET in config files caused linker errors in macOS Big Sur - Pull Request [#1215](https://github.com/microsoft/msphpsql/pull/1215)\n- Pull Request [#1226](https://github.com/microsoft/msphpsql/pull/1226) - replaced the problematic strlen function \n- Pull Request [#1227](https://github.com/microsoft/msphpsql/pull/1227) - addressed static code analyis issues\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - Issue [#1050](https://github.com/microsoft/msphpsql/issues/1050) - With Always Encrypted enabled, insertion requires the column list for any tables with identity columns\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- This release requires ODBC Driver 17.4.2 or above. Otherwise, a warning about failing to set an attribute may be suppressed when using an older ODBC driver.\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n\n\n## 5.9.0-beta2 - 2020-12-02\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Support for PHP 8.0\n\n### Removed\n- Dropped support for PHP 7.2\n\n### Fixed\n- Pull Request [#1205](https://github.com/microsoft/msphpsql/pull/1205) - minimized compilation warnings on Linux and macOS \n- Pull Request [#1209](https://github.com/microsoft/msphpsql/pull/1209) - fixed a bug in fetching varbinary max fields as char or wide chars\n- Issue [#1210](https://github.com/microsoft/msphpsql/issues/1210) - switched from preview to beta terminology to enable Pickle support\n- Issue [#1213](https://github.com/microsoft/msphpsql/issues/1213) - the MACOSX_DEPLOYMENT_TARGET in config files caused linker errors in macOS Big Sur - Pull Request [#1215](https://github.com/microsoft/msphpsql/pull/1215)\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - Issue [#1050](https://github.com/microsoft/msphpsql/issues/1050) - With Always Encrypted enabled, insertion requires the column list for any tables with identity columns\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- This preview release requires ODBC Driver 17.4.2 or above. Otherwise, a warning about failing to set an attribute may be suppressed when using an older ODBC driver.\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n\n## 5.9.0-preview1 - 2020-10-02\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Support for PHP 8.0 RC 1\n- Support for Ubuntu 20.04 and Alpine 3.12\n- Support for GB18030 locale [#1115](\nhttps://github.com/microsoft/msphpsql/pull/1115)\n- Feature Request [#924](https://github.com/microsoft/msphpsql/issues/924) - extended PDO errorinfo to include [additional odbc messages if available](https://github.com/microsoft/msphpsql/wiki/Features#pdoErrorInfo) - pull request [#1133](\nhttps://github.com/microsoft/msphpsql/pull/1133)\n- [Data Classification with rank info](https://github.com/microsoft/msphpsql/wiki/Features#dataClass), which requires [MS ODBC Driver 17.4.2+](https://docs.microsoft.com/sql/connect/odbc/download-odbc-driver-for-sql-server?view=sql-server-ver15) and [SQL Server 2019](https://www.microsoft.com/sql-server/sql-server-2019) or an Azure SQL instance that supports it\n\n### Removed\n- Dropped support for Ubuntu 19.10 and Debian 8.\n\n### Fixed\n- Pull Request [#1127](https://github.com/microsoft/msphpsql/pull/1127) - removal of TSRMLS macros in preparation for PHP 8 by remicollet\n- Pull Request [#1136](https://github.com/microsoft/msphpsql/pull/1136) - improved performance when handling decimal numbers as inputs or outputs and removed unncessary conversions for numeric values\n- Pull Request [#1143](https://github.com/microsoft/msphpsql/pull/1143) - if an exception occurs when executing a query, will not change the output parameters\n- Pull Request [#1144](https://github.com/microsoft/msphpsql/pull/1144) - use the correct C types when binding output parameters with integer values\n- Pull Request [#1146](https://github.com/microsoft/msphpsql/pull/1146) - improved performance when fetching numbers using client buffers\n- Pull Request [#1165](https://github.com/microsoft/msphpsql/pull/1165) - setting query timeout without using LOCK TIMEOUT, which saves an extra trip to the server\n- Issue [#1170](https://github.com/microsoft/msphpsql/issues/1170) - when fetching large data types such as ntext will check more than only the display size - pull request [#1172](https://github.com/microsoft/msphpsql/pull/1172)\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - Issue [#1050](https://github.com/microsoft/msphpsql/issues/1050) - With Always Encrypted enabled, insertion requires the column list for any tables with identity columns\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- This preview release requires ODBC Driver 17.4.2 or above. Otherwise, a warning about failing to set an attribute may be suppressed when using an older ODBC driver.\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n\n## 5.8.1 - 2020-04-15\nUpdated PECL release packages. Here is the list of updates:\n\n### Fixed\n- Pull Request [#1094](https://github.com/microsoft/msphpsql/pull/1094) - Fixed default locale issues in Alpine Linux \n- Pull Request [#1095](https://github.com/microsoft/msphpsql/pull/1095) - Removed unnecessary data structure to support Client-Side Cursors feature in Alpine Linux\n- Pull Request [#1107](https://github.com/microsoft/msphpsql/pull/1107) - Fixed logging issues when both drivers are enabled in Alpine Linux\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - Issue [#1050](https://github.com/microsoft/msphpsql/issues/1050) - With Always Encrypted enabled, insertion requires the column list for any tables with identity columns\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n\n## 5.8.0 - 2020-01-31\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Support for PHP 7.4\n- Support for [Microsoft ODBC Driver 17.5](\nhttps://docs.microsoft.com/sql/connect/odbc/download-odbc-driver-for-sql-server?view=sql-server-ver15) on all platforms\n- Support for Debian 10 and Red Hat 8 - require MS ODBC Driver 17.4+\n- Support for macOS Catalina, Alpine Linux 3.11 (experimental), and Ubuntu 19.10 - require ODBC Driver 17.5+\n- Feature Request [#929](https://github.com/microsoft/msphpsql/issues/929) - new [Language option](https://github.com/microsoft/msphpsql/wiki/Features#language) - Pull Request [#930](https://github.com/microsoft/msphpsql/pull/930)\n- [Data Classification Sensitivity Metadata Retrieval](https://github.com/microsoft/msphpsql/wiki/Features#data-classification-sensitivity-metadata) - requires ODBC Driver 17.4.2+ and [SQL Server 2019](https://www.microsoft.com/sql-server/sql-server-2019)\n- Feature Request [#1018](https://github.com/microsoft/msphpsql/issues/1018) - support for [PHP extended string types](https://github.com/microsoft/msphpsql/wiki/Features#natlTypes) - Pull Request [#1043](https://github.com/microsoft/msphpsql/pull/1043)\n- [Always Encrypted with secure enclaves](https://github.com/microsoft/msphpsql/wiki/Features#alwaysencryptedV2) - requires ODBC Driver 17.4+ and [SQL Server 2019](https://www.microsoft.com/sql-server/sql-server-2019)\n- Feature Request [#1063](https://github.com/microsoft/msphpsql/issues/1063) - add configurable options for locale settings in Linux and macOS  - Pull Request [#1069](https://github.com/microsoft/msphpsql/pull/1069)\n\n### Removed\n- Dropped support for [PHP 7.1](https://www.php.net/supported-versions.php)\n- Dropped support for SQL Server 2008 R2, macOS Sierra, Ubuntu 18.10 and Ubuntu 19.04.\n\n### Fixed\n- Issue [#570](https://github.com/microsoft/msphpsql/issues/570) - Fixed fetching varbinary data using client buffer with sqlsrv\n- Pull Request [#972](https://github.com/microsoft/msphpsql/pull/972) - Removed redundant calls to retrieve the number of columns or rows in the current query result set\n- Pull Request [#978](https://github.com/microsoft/msphpsql/pull/978) - PDO_SQLSRV implementation of PDO::getColumnMeta now references cached metadata rather than making an ODBC call every time\n- Pull Request [#979](https://github.com/microsoft/msphpsql/pull/979) - Added support for Data Classification Sensitivity metadata retrieval\n- Pull Request [#985](https://github.com/microsoft/msphpsql/pull/985) - Fixed memory issues with Data Classification data structures\n- Issue [#432](https://github.com/microsoft/msphpsql/issues/432) - Having any invalid UTF-8 name in the connection string will no longer invoke misleading error messages\n- Issue [#909](https://github.com/microsoft/msphpsql/issues/909) - Fixed potential exception with locale issues in macOS \n- Pull Request [#992](https://github.com/microsoft/msphpsql/pull/992) - Produced the correct error when requesting Data Classification metadata with ODBC drivers prior to 17\n- Pull Request [#1001](https://github.com/microsoft/msphpsql/pull/1001) - Fixed compilation issue with PHP 7.4 alpha\n- Pull Request [#1004](https://github.com/microsoft/msphpsql/pull/1004) - Fixed another compilation issue with PHP 7.4 alpha\n- Pull Request [#1008](https://github.com/microsoft/msphpsql/pull/1008) - Improved data caching when fetching datetime objects\n- Pull Request [#1011](https://github.com/microsoft/msphpsql/pull/1011) - Fixed a potential buffer overflow when parsing for escaped braces in the connection string\n- Pull Request [#1015](https://github.com/microsoft/msphpsql/pull/1015) - Fixed compilation issues and addressed various memory leaks detected by PHP 7.4 beta 1 \n- Issue [#1027](https://github.com/microsoft/msphpsql/issues/1027) - Fixed how drivers handle query timeout settings\n- Pull Request [#1049](https://github.com/microsoft/msphpsql/pull/1049) - Performance improvement for fetching from tables with many columns - cached the derived php types with column metadata to streamline data retrieval\n- Pull Request [#1068](https://github.com/microsoft/msphpsql/pull/1068) - Some cosmetic changes to source code as per suggestions from a static analysis tool\n- Issue [#1079](https://github.com/microsoft/msphpsql/issues/1079) - Support sql_variant types when using client buffers\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - Issue [#1050](https://github.com/microsoft/msphpsql/issues/1050) - With Always Encrypted enabled, insertion requires the column list for any tables with identity columns\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n- Alpine Linux support is currently experimental. More robust support will be added in future releases\n\n### Known Issues\n- In Alpine Linux, the Client-Side Cursors feature may cause an access violation if both sqlsrv and pdo_sqlsrv are enabled. Either enable only sqlsrv or pdo_sqlsrv, or build PHP from source by compiling the drivers statically.\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n\n## 5.7.1-preview - 2019-12-03\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Support for PHP 7.4\n- Support for Red Hat 8 and macOS Catalina (10.15)\n- Feature Request [#1018](https://github.com/microsoft/msphpsql/issues/1018) - support for [PHP extended string types](https://github.com/microsoft/msphpsql/wiki/Features#natlTypes) - Pull Request [#1043](https://github.com/microsoft/msphpsql/pull/1043)\n- [Always Encrypted with secure enclaves](https://github.com/microsoft/msphpsql/wiki/Features#alwaysencryptedV2), which requires [MS ODBC Driver 17.4+](https://docs.microsoft.com/sql/connect/odbc/download-odbc-driver-for-sql-server?view=sql-server-ver15) and [SQL Server 2019](https://www.microsoft.com/sql-server/sql-server-2019)\n\n### Removed\n- Dropped support for [PHP 7.1](https://www.php.net/supported-versions.php)\n\n### Fixed\n- Issue [#1027](https://github.com/microsoft/msphpsql/issues/1027) - Fixed how drivers handle query timeout settings\n- Pull Request [#1049](https://github.com/microsoft/msphpsql/pull/1049) - performance improvement for fetching from tables with many columns - cached the derived php types with column metadata to streamline data retrieval\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - Issue [#1050](https://github.com/microsoft/msphpsql/issues/1050) - With Always Encrypted enabled, insertion requires the column list for any tables with identity columns\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- Data Classification metadata retrieval requires ODBC Driver 17.4.2.1+ and [SQL Server 2019](https://www.microsoft.com/sql-server/sql-server-2019)\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n\n## 5.7.0-preview - 2019-09-05\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Support for PHP 7.4 RC 1\n- Support for Linux Ubuntu 19.04 and Debian 10\n- Feature Request [#929](https://github.com/microsoft/msphpsql/issues/929) - new [Language option](https://github.com/microsoft/msphpsql/wiki/Features#language) - Pull Request [#930](https://github.com/microsoft/msphpsql/pull/930)\n- [Data Classification Sensitivity Metadata Retrieval](https://github.com/microsoft/msphpsql/wiki/Features#data-classification-sensitivity-metadata), which requires [MS ODBC Driver 17.2+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server) and [SQL Server 2019 release candidate](https://docs.microsoft.com/sql/sql-server/sql-server-ver15-release-notes?view=sqlallproducts-allversions#-release-candidate-rc)\n\n### Removed\n- Dropped support for Ubuntu 18.10\n\n### Fixed\n- Issue [#570](https://github.com/microsoft/msphpsql/issues/570) - Fixed fetching varbinary data using client buffer with sqlsrv\n- Pull Request [#972](https://github.com/microsoft/msphpsql/pull/972) - Removed redundant calls to retrieve the number of columns or rows in the current query result set\n- Pull Request [#978](https://github.com/microsoft/msphpsql/pull/978) - PDO_SQLSRV implementation of PDO::getColumnMeta now references cached metadata rather than making an ODBC call every time\n- Pull Request [#979](https://github.com/microsoft/msphpsql/pull/979) - Added support for data classification Sensitivity metadata retrieval\n- Pull Request [#985](https://github.com/microsoft/msphpsql/pull/985) - Fixed memory issues with data classification data structures\n- Issue [#432](https://github.com/microsoft/msphpsql/issues/432) - Having any invalid UTF-8 name in the connection string will no longer invoke misleading error messages\n- Issue [#909](https://github.com/microsoft/msphpsql/issues/909) - Fixed potential exception with locale issues in macOS \n- Pull Request [#992](https://github.com/microsoft/msphpsql/pull/992) - Produced the correct error when requesting Data Classification metadata with ODBC drivers prior to 17\n- Pull Request [#1001](https://github.com/microsoft/msphpsql/pull/1001) - Fixed compilation issue with PHP 7.4 alpha\n- Pull Request [#1004](https://github.com/microsoft/msphpsql/pull/1004) - Fixed another compilation issue with PHP 7.4 alpha\n- Pull Request [#1008](https://github.com/microsoft/msphpsql/pull/1008) - Improved data caching when fetching datetime objects\n- Pull Request [#1011](https://github.com/microsoft/msphpsql/pull/1011) - Fixed a potential buffer overflow when parsing for escaped braces in the connection string\n- Pull Request [#1015](https://github.com/microsoft/msphpsql/pull/1015) - Fixed compilation issues and addressed various memory leaks detected by PHP 7.4 beta 1 \n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- Data Classification metadata retrieval is not compatible with ODBC Driver 17.4.1\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n- With ColumnEncryption enabled, calling stored procedures with XML parameters does not work (Issue [#674](https://github.com/Microsoft/msphpsql/issues/674))\n\n## 5.6.1 - 2019-03-19\nUpdated PECL release packages. Here is the list of updates:\n\n### Fixed\n- Issue [#937](https://github.com/Microsoft/msphpsql/issues/937) - fixed assumptions made when calculating field or column metadata which may have resulted in application termination\n- Issue [#955](https://github.com/Microsoft/msphpsql/issues/955) - modified sqlsrv config file such that it can be compiled independently of pdo_sqlsrv\n- Pull Request [#946](https://github.com/Microsoft/msphpsql/pull/946) - fixed PDOStatement::getColumnMeta() to return false when something goes wrong\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n- With ColumnEncryption enabled, calling stored procedures with XML parameters does not work (Issue [#674](https://github.com/Microsoft/msphpsql/issues/674))\n- In SUSE 15, Azure Active Directory connections may fail if PHP is installed from packages (Issue [#934](https://github.com/Microsoft/msphpsql/issues/934))\n\n## 5.6.0 - 2019-02-15\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Added support for PHP 7.3\n- Added support for Linux SUSE 15, Ubuntu 18.10 and mac OS Mojave\n- Feature Request [#415](https://github.com/Microsoft/msphpsql/pull/886) - new options at connection and statement levels for both drivers for formatting decimal values in the fetched results\n- Added support for Azure AD Access Token (in Linux / macOS this requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server) and [unixODBC](http://www.unixodbc.org/) 2.3.6+)\n- Added support for Authentication with Azure Active Directory using Managed Identity for Azure Resources (requires [MS ODBC Driver 17.3+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server))\n- Feature Request [#842](https://github.com/Microsoft/msphpsql/pull/842) - new PDO_STMT_OPTION_FETCHES_DATETIME_TYPE flag for pdo_sqlsrv to return datetime as objects\n- Feature Request [#844](https://github.com/Microsoft/msphpsql/pull/844) - add ReturnDatesAsStrings option to statement level for sqlsrv\n\n### Removed\n- Dropped support for Ubuntu 17.10\n- Dropped support for PHP 7.0 - [Version 5.3](https://docs.microsoft.com/sql/connect/php/system-requirements-for-the-php-sql-driver?view=sql-server-2017) is the last to support PHP 7.0.\n\n### Fixed\n- Issue [#434](https://github.com/Microsoft/msphpsql/issues/434) - To avoid possible crashes, before freeing stmt in the destructor check if its dbh driver data is NULL\n- Pull Request [#833](https://github.com/Microsoft/msphpsql/pull/833) - Streamlined the error handling to remove a potential cause of crash\n- Pull Request [#836](https://github.com/Microsoft/msphpsql/pull/836) - Modified the config files to enable Spectre Mitigations (use /Qspectre switch) for PHP 7.2 (see related Request [#878](https://github.com/Microsoft/msphpsql/pull/878))\n- Pull Request [#854](https://github.com/Microsoft/msphpsql/pull/854) - Clear Azure Key Vault data after connection attributes are successfully set or when exception is thrown\n- Pull Request [#855](https://github.com/Microsoft/msphpsql/pull/855) - Improved performance by saving meta data before fetching and skipping unnecessary conversions for numeric data\n- Pull Request [#865](https://github.com/Microsoft/msphpsql/pull/865) - Corrected the way SQLPutData and SQLParamData are used when sending stream data to the server\n- Pull Request [#878](https://github.com/Microsoft/msphpsql/pull/878) - Modified the config files to enable Spectre Mitigations for PHP 7.1 (see related Request [#836](https://github.com/Microsoft/msphpsql/pull/836))\n- Pull Request [#891](https://github.com/Microsoft/msphpsql/pull/891) - Improved performance of Unicode conversions\n- Pull Request [#892](https://github.com/Microsoft/msphpsql/pull/892) - Removed warning messages while compiling extensions\n- Pull Request [#904](https://github.com/Microsoft/msphpsql/pull/904) - Enabled compiling extensions statically into PHP\n- Pull Request [#907](https://github.com/Microsoft/msphpsql/pull/907) - Initialized output param buffer when allocating extra space\n- Pull Request [#919](https://github.com/Microsoft/msphpsql/pull/919) - Initialized a boolean variable before passing it by reference into a function that will modify its value\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n- With ColumnEncryption enabled, calling stored procedures with XML parameters does not work (Issue [#674](https://github.com/Microsoft/msphpsql/issues/674))\n\n## 5.5.0-preview - 2018-12-07\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Added support for PHP 7.3.0\n- Added support for Linux Ubuntu 18.10 and mac OS Mojave\n- Feature Request [#415](https://github.com/Microsoft/msphpsql/pull/886) - new options at connection and statement levels for both drivers for formatting decimal values in the fetched results\n\n### Fixed\n- Pull Request [#854](https://github.com/Microsoft/msphpsql/pull/854) - Clear Azure Key Vault data after connection attributes are successfully set or when exception is thrown\n- Pull Request [#855](https://github.com/Microsoft/msphpsql/pull/855) - Improved performance by saving meta data before fetching and skipping unnecessary conversions for numeric data\n- Pull Request [#865](https://github.com/Microsoft/msphpsql/pull/865) - Corrected the way SQLPutData and SQLParamData are used when sending stream data to the server\n- Pull Request [#878](https://github.com/Microsoft/msphpsql/pull/878) - Modified the config files to enable Spectre Mitigations for PHP 7.1 (see related Request [#836](https://github.com/Microsoft/msphpsql/pull/836))\n- Pull Request [#891](https://github.com/Microsoft/msphpsql/pull/891) - Improved performance of Unicode conversions\n- Pull Request [#892](https://github.com/Microsoft/msphpsql/pull/892) - Removed warning messages while compiling extensions\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- No support for inout / output params when formatting decimal values\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n- With ColumnEncryption enabled, calling stored procedures with XML parameters does not work (Issue [#674](https://github.com/Microsoft/msphpsql/issues/674))\n- With ColumnEncryption enabled, fetching varbinary(max), varchar(max) or nvarchar(max) may fail with [ODBC Driver 17.3 CTP](https://blogs.msdn.microsoft.com/sqlnativeclient/2018/09/24/odbc-driver-17-3-preview-for-sql-server-released/)\n\n## 5.4.0-preview - 2018-09-24\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Added support for PHP 7.3.0 RC 1\n- Added support for Azure AD Access Token (in Linux / macOS this requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server) and [unixODBC](http://www.unixodbc.org/) 2.3.6+)\n- Feature Request [#842](https://github.com/Microsoft/msphpsql/pull/842) - new PDO_STMT_OPTION_FETCHES_DATETIME_TYPE flag for pdo_sqlsrv to return datetime as objects\n- Feature Request [#844](https://github.com/Microsoft/msphpsql/pull/844) - add ReturnDatesAsStrings option to statement level for sqlsrv\n- Compatible with [ODBC Driver 17.3 CTP](https://blogs.msdn.microsoft.com/sqlnativeclient/2018/09/24/odbc-driver-17-3-preview-for-sql-server-released/)\n\n### Removed\n- Dropped support for Ubuntu 17.10\n- Dropped support for PHP 7.0 - [Version 5.3](https://docs.microsoft.com/sql/connect/php/system-requirements-for-the-php-sql-driver?view=sql-server-2017) is the last to support PHP 7.0.\n\n### Fixed\n- Issue [#434](https://github.com/Microsoft/msphpsql/issues/434) - To avoid the pitfall that could result in a crash, before freeing stmt in the destructor check if its dbh driver data is NULL\n- Pull Request [#836](https://github.com/Microsoft/msphpsql/pull/836) - Modified the config files to enable Spectre Mitigations (use /Qspectre switch) for PHP 7.2\n- Pull Request [#833](https://github.com/Microsoft/msphpsql/pull/833) - Streamlined the error handling to remove a potential cause of crash\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - [Always Encrypted limitations](https://docs.microsoft.com/sql/connect/php/using-always-encrypted-php-drivers#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.7\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n- With ColumnEncryption enabled, calling stored procedures with XML parameters does not work (Issue [#674](https://github.com/Microsoft/msphpsql/issues/674))\n- With ColumnEncryption enabled, fetching varbinary(max), varchar(max) or nvarchar(max) may fail with [ODBC Driver 17.3 CTP](https://blogs.msdn.microsoft.com/sqlnativeclient/2018/09/24/odbc-driver-17-3-preview-for-sql-server-released/)\n\n## 5.3.0 - 2018-07-20\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Added support for Azure Key Vault for Always Encrypted functionality. Always Encrypted functionality is supported on Linux and macOS through Azure Key Vault\n- Added support for connection resiliency on Linux and macOS (requires version 17.2 or higher of the [ODBC driver](https://docs.microsoft.com/en-us/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-2017))\n- Added support for macOS High Sierra (requires version 17 or higher of the [ODBC driver](https://docs.microsoft.com/en-us/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-2017))\n- Added support for Ubuntu 18.04 (requires version 17.2 or higher of the [ODBC driver](https://docs.microsoft.com/en-us/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-2017))\n\n### Fixed\n- Issue [#577](https://github.com/Microsoft/msphpsql/issues/577) - Idle Connection Resiliency doesn't work with Column Encryption enabled connections (fixed in MS ODBC Driver 17.1)\n- Issue [#678](https://github.com/Microsoft/msphpsql/issues/678) - Idle Connection Resiliency doesn't work with Connection Pooling (fixed in MS ODBC Driver 17.1)\n- Issue [#699](https://github.com/Microsoft/msphpsql/issues/699) - Binding output parameters fails when the query in the stored procedure returns no data. The test case has been added to the test lab.\n- Issue [#705](https://github.com/Microsoft/msphpsql/issues/705) - Always Encrypted - Retrieving a negative decimal value (edge case) as output parameter causes truncation\n- Issue [#706](https://github.com/Microsoft/msphpsql/issues/706) - Always Encrypted - Cannot insert double with precision and scale (38, 38)\n- Issue [#707](https://github.com/Microsoft/msphpsql/issues/707) - Always Encrypted - Fetching decimals / numerics as output parameters bound to PDO::PARAM_BOOL or PDO::PARAM_INT returns floats, not integers\n- Issue [#735](https://github.com/Microsoft/msphpsql/issues/735) - Extended the buffer size for PDO::lastInsertId so that data types other than integers can be supported\n- Pull Request [#759](https://github.com/Microsoft/msphpsql/pull/759) - Removed the limitation of binding a binary as inout param as PDO::PARAM_STR with SQLSRV_ENCODING_BINARY\n- Pull Request [#775](https://github.com/Microsoft/msphpsql/pull/775) - Fixed the truncation problem for output params with SQL types specified as SQLSRV_SQLTYPE_DECIMAL or SQLSRV_SQLTYPE_NUMERIC\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connecting will not work\n- Always Encrypted requires [MS ODBC Driver 17+](https://docs.microsoft.com/en-us/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-2017)\n  - Only Windows Certificate Store and Azure Key Vault are supported. Custom Keystores are not yet supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted enabled, named parameters in subqueries are not supported\n  - [Always Encrypted limitations](https://docs.microsoft.com/en-us/sql/connect/php/using-always-encrypted-php-drivers?view=sql-server-2017#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- Connection pooling on Linux or macOS is not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.6\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostic information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n- With ColumnEncryption enabled, calling stored procedures with XML parameters does not work (Issue [#674](https://github.com/Microsoft/msphpsql/issues/674))\n\n## 5.2.1-preview - 2018-06-01\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Added support for Azure Key Vault for Always Encrypted for basic CRUD functionalities such that Always Encrypted feature is also available to Linux or macOS users\n- Added support for macOS High Sierra (requires [MS ODBC Driver 17+](https://docs.microsoft.com/en-us/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-2017))\n\n### Fixed\n- Issue [#577](https://github.com/Microsoft/msphpsql/issues/577) - Idle Connection Resiliency doesn't work with Column Encryption enabled connection\n- Issue [#678](https://github.com/Microsoft/msphpsql/issues/678) - Idle Connection Resiliency doesn't work with Connection Pooling bug\n- Issue [#699](https://github.com/Microsoft/msphpsql/issues/699) - Binding output parameter failed when the query in the stored procedure returned no data. The test case has been added to the test lab.\n- Issue [#705](https://github.com/Microsoft/msphpsql/issues/705) - AE - Retrieving a negative decimal value (edge case) as output parameter causes truncation\n- Issue [#706](https://github.com/Microsoft/msphpsql/issues/706) - AE - Cannot insert double with precision and scale (38, 38)\n- Issue [#707](https://github.com/Microsoft/msphpsql/issues/707) - AE - Fetching decimals / numerics as output parameters bound to PDO::PARAM_BOOL or PDO::PARAM_INT returns floats, not integers\n- Issue [#735](https://github.com/Microsoft/msphpsql/issues/735) - Extended the buffer size for PDO lastInsertId such that data types other than integers can be supported\n- Pull Request [#759](https://github.com/Microsoft/msphpsql/pull/759) - Removed the limitation of binding a binary as inout param as PDO::PARAM_STR with SQLSRV_ENCODING_BINARY\n- Pull Request [#775](https://github.com/Microsoft/msphpsql/pull/775) - Fixed the problem for output params with SQL types specified as SQLSRV_SQLTYPE_DECIMAL or SQLSRV_SQLTYPE_NUMERIC\n\n### Limitations\n- No support for inout / output params when using sql_variant type\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connection will not work\n- Always Encrypted feature, which requires [MS ODBC Driver 17+](https://docs.microsoft.com/en-us/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-2017)\n  - only Windows Certificate Store and Azure Key Vault are supported\n  - Issue [#716](https://github.com/Microsoft/msphpsql/issues/716) - With Always Encrypted feature enabled, Named Parameters in Sub Queries are not supported\n  - [Always Encrypted limitations](https://docs.microsoft.com/en-us/sql/connect/php/using-always-encrypted-php-drivers?view=sql-server-2017#limitations-of-the-php-drivers-when-using-always-encrypted)\n\n### Known Issues\n- Connection pooling on Linux or macOS not recommended with [unixODBC](http://www.unixodbc.org/) < 2.3.6\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostics information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Features#pooling)\n- With ColumnEncryption enabled, calling stored procedures with XML parameters does not work (Issue [#674](https://github.com/Microsoft/msphpsql/issues/674))\n\n\n## Windows/Linux/macOS 5.2.0 - 2018-03-23\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Added support for Always Encrypted with basic CRUD functionalities (see [here](https://github.com/Microsoft/msphpsql/wiki/Features#aebindparam))\n  - Support for Windows Certificate Store (use connection keyword ColumnEncryption)\n  - Support for inserting into and modifying an encrypted column\n  - Support for fetching from an encrypted column\n- Added support for PHP 7.2\n- Added support for MS ODBC Driver 17\n- Added support for Ubuntu 17 (requires MS ODBC Driver 17)\n- Added support for Debian 9 (requires MS ODBC Driver 17)\n- Added support for SUSE 12\n- Added Driver option to set the MS ODBC driver, Added \"Driver\" option, valid values are \"ODBC Driver 17 for SQL Server\", \"ODBC Driver 13 for SQL Server\", and \"ODBC Driver 11 for SQL Server\"\n  - The default driver is ODBC Driver 17 for SQL Server\n\n### Changed\n- Implementation of PDO::lastInsertId($name) to return the last inserted sequence number if the sequence name is supplied to the function ([lastInsertId](https://github.com/Microsoft/msphpsql/wiki/Features#lastinsertid))\n- Added immediate binding for security, making it necessary to load PDO before PDO_SQLSRV; full install instructions [here](https://github.com/Microsoft/msphpsql/blob/master/Linux-mac-install.md) and [here](https://docs.microsoft.com/sql/connect/php/loading-the-php-sql-driver)\n\n### Fixed\n- Issue [#555](https://github.com/Microsoft/msphpsql/issues/555) - Hebrew strings truncation (requires MS ODBC Driver 17)\n- Adjusted precisions for numeric/decimal inputs with Always Encrypted\n- Support for non-UTF8 locales in Linux and macOS\n- Fixed crash caused by executing an invalid query in a transaction (Issue [#434](https://github.com/Microsoft/msphpsql/issues/434))\n- Added error handling for using PDO::SQLSRV_ATTR_DIRECT_QUERY or PDO::ATTR_EMULATE_PREPARES in a Column Encryption enabled connection\n- Added error handling for binding TEXT, NTEXT or IMAGE as output parameter (Issue [#231](https://github.com/Microsoft/msphpsql/issues/231))\n- PDO::quote with string containing ASCII NUL character (Issue [#538]( https://github.com/Microsoft/msphpsql/issues/538))\n- Decimal types with no decimals are correctly handled when AE is enabled (PR [#544](https://github.com/Microsoft/msphpsql/pull/544))\n- BIGINT as an output param no longer results in value out of range exception when the returned value is larger than a maximum integer ([PR #567](https://github.com/Microsoft/msphpsql/pull/567))\n\n### Removed\n- Dropped support for Ubuntu 15\n- Supplying tablename into PDO::lastInsertId($name) no longer return the last inserted row ([lastInsertId](https://github.com/Microsoft/msphpsql/wiki/Features#lastinsertid))\n\n### Limitations\n- Always Encrypted is not supported in Linux and macOS\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. Attempting to set the locale after connection will not work\n- Always Encrypted functionalities are only supported using MS ODBC Driver 17\n- [Always Encrypted limitations](https://github.com/Microsoft/msphpsql/wiki/Features#aelimitation)\n- When using sqlsrv_query with Always Encrypted feature, SQL type has to be specified for each input (see [here](https://github.com/Microsoft/msphpsql/wiki/Features#aebindparam))\n- No support for inout / output params when using sql_variant type\n\n### Known Issues\n- Connection pooling on Linux doesn't work properly when using MS ODBC Driver 17\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostics information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Connection-Pooling-on-Linux-and-Mac)\n- Connection with Connection Resiliency enabled does not resume properly with Connection Pooling (Issue [#678](https://github.com/Microsoft/msphpsql/issues/678))\n- With ColumnEncryption enabled, calling stored procedure with XML parameter does not work (Issue [#674](https://github.com/Microsoft/msphpsql/issues/674))\n- Cannot connect with both Connection Resiliency enabled and ColumnEncryption enabled (Issue [#577](https://github.com/Microsoft/msphpsql/issues/577))\n- With ColumnEncryption enabled, retrieving a negative decimal value as output parameter causes truncation of the last digit (Issue [#705](https://github.com/Microsoft/msphpsql/issues/705))\n- With ColumnEncryption enabled, cannot insert a double into a decimal column with precision and scale of (38, 38) (Issue [#706](https://github.com/Microsoft/msphpsql/issues/706))\n- With ColumnEncryption enabled, when fetching decimals as output parameters bound to PDO::PARAM_BOOL or PDO::PARAM_INT, floats are returned, not integers (Issue [#707](https://github.com/Microsoft/msphpsql/issues/707))\n\n\n## Windows/Linux/macOS 5.2.0-RC - 2017-12-20\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Added support for Ubuntu 17 (requires [MSODBC 17 preview](https://github.com/Microsoft/msphpsql/tree/dev/ODBC%2017%20binaries%20preview))\n- Added support for Debian 9 (requires [MSODBC 17 preview](https://github.com/Microsoft/msphpsql/tree/dev/ODBC%2017%20binaries%20preview))\n\n### Fixed\n- Issue [#555](https://github.com/Microsoft/msphpsql/issues/555) - Hebrew strings truncation (requires [MSODBC 17 preview](https://github.com/Microsoft/msphpsql/tree/dev/ODBC%2017%20binaries%20preview))\n- Issue [#615](https://github.com/Microsoft/msphpsql/issues/615) - Added error handling when fetching varchar(max) as a stream with Always Encrypted\n- Adjusted precisions for numeric/decimal inputs with Always Encrypted\n- Fixed bugs when binding parameters with Always Encrypted\n- Fixed warnings as per Prefast code analysis\n\n### Limitations\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. The subsequent locale setting will not work\n- Always Encrypted functionalities are only supported using [MSODBC 17 preview](https://github.com/Microsoft/msphpsql/tree/dev/ODBC%2017%20binaries%20preview)\n  - ODBC binaries for macOS available upon request\n- MSODBC 17 preview msodbcsql.msi only works in Windows10\n- [Always Encrypted limitations](https://github.com/Microsoft/msphpsql/wiki/Features#aelimitation)\n- When using sqlsrv_query with Always Encrypted feature, SQL type has to be specified for each input (see [here](https://github.com/Microsoft/msphpsql/wiki/Features#aebindparam))\n- No support for inout / output params when using sql_variant type\n\n### Known Issues\n- Connection pooling on Linux doesn't work properly when using the MSODBC17 preview\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostics information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Connection-Pooling-on-Linux-and-Mac)\n\n## Windows/Linux/macOS 5.1.2-preview - 2017-11-21\nUpdated PECL release packages. Here is the list of updates:\n\n### Fixed\n- Support for non-UTF8 locales in Linux and macOS\n- Fixed crash caused by executing an invalid query in a transaction (Issue [#434](https://github.com/Microsoft/msphpsql/issues/434))\n- Fixed regression in sqlsrv_next_result returning a no fields error when the active result set is null (Issue [#581](https://github.com/Microsoft/msphpsql/issues/581))\n- Fixed incorrect active result set when sqlsrv_next_result or PDOStatement::nextRowset is called when Column Encryption is enabled (Issue [#574](https://github.com/Microsoft/msphpsql/issues/574))\n- Fixed data corruption in fetching from an encrypted max column after calling sqlsrv_next_result or PDOStatemet::nextRowset (Issue [#580](https://github.com/Microsoft/msphpsql/issues/580))\n- Added error handling for using PDO::SQLSRV_ATTR_DIRECT_QUERY or PDO::ATTR_EMULATE_PREPARES in a Column Encryption enabled connection\n- Added error handling for binding TEXT, NTEXT or IMAGE as output parameter (Issue [#231](https://github.com/Microsoft/msphpsql/issues/231))\n\n### Limitations\n- In Linux and macOS, setlocale() only takes effect if it is invoked before the first connection. The subsequent locale setting will not work\n- Always Encrypted functionalities are only supported using [MSODBC 17 preview](https://github.com/Microsoft/msphpsql/tree/dev/ODBC%2017%20binaries%20preview)\n  - ODBC binaries for macOS available upon request\n- MSODBC 17 preview msodbcsql.msi only works in Windows10\n- [Always Encrypted limitations](https://github.com/Microsoft/msphpsql/wiki/Features#aelimitation)\n- When using sqlsrv_query with Always Encrypted feature, SQL type has to be specified for each input (see [here](https://github.com/Microsoft/msphpsql/wiki/Features#aebindparam))\n- No support for inout / output params when using sql_variant type\n\n### Known Issues\n- Binding decimal input as a string when Column Encryption is enabled may change the precision of the input\n- Connection pooling on Linux doesn't work properly when using the MSODBC17 preview\n- When pooling is enabled in Linux or macOS\n  - unixODBC <= 2.3.4 (Linux and macOS) might not return proper diagnostics information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Connection-Pooling-on-Linux-and-Mac)\n\n## Windows/Linux 5.1.1-preview - 2017-10-20\nUpdated PECL release packages. Here is the list of updates:\n\n### Fixed\n- PDO::quote with string containing ASCII NUL character (Issue [#538]( https://github.com/Microsoft/msphpsql/issues/538))\n- Appropriate error message is returned when calling nextRowset() or sqlsrv_next_result() on an empty result set (issue [#507 ](https://github.com/Microsoft/msphpsql/issues/507))\n- Decimal types with no decimals are correctly handled when AE is enabled (PR [#544](https://github.com/Microsoft/msphpsql/pull/544))\n- Search for installed ODBC drivers in Linux/macOS first before attempting to connect using the default ODBC driver\n- BIGINT as an output param no longer results in value out of range exception when the returned value is larger than a maximum integer ([PR #567](https://github.com/Microsoft/msphpsql/pull/567))\n\n### Limitations\n- Always Encrypted functionalities are only supported using [MSODBC 17 preview](https://github.com/Microsoft/msphpsql/tree/dev/ODBC%2017%20binaries%20preview)\n  - ODBC binaries for macOS available upon request\n- MSODBC 17 preview msodbcsql.msi only works for Windows10\n- [Always Encrypted limitations](https://github.com/Microsoft/msphpsql/wiki/Features#aelimitation)\n- When using sqlsrv_query with Always Encrypted feature, SQL type has to be specified for each input (see [here](https://github.com/Microsoft/msphpsql/wiki/Features#aebindparam))\n- No support for inout / output params when using sql_variant type\n\n### Known Issues\n- Connection pooling on Linux doesn't work properly when using the MSODBC17 preview\n- When pooling is enabled in Linux or MAC\n  - unixODBC <= 2.3.4 (Linux and MAC) might not return proper diagnostics information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Connection-Pooling-on-Linux-and-Mac)\n\n## Windows/Linux 5.1.0-preview - 2017-09-15\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Added support for SUSE 12\n- Added support for Always Encrypted with basic CRUD functionalities (see [here](https://github.com/Microsoft/msphpsql/wiki/Features#aebindparam))\n  - Support for Windows Certificate Store (use connection keyword ColumnEncryption)\n  - Support for custom key store provider (use connection keywords ColumnEncryption, CEKeystoreProvider, CEKeystoreName, CEKeystoreEncryptKey)\n  - Support for inserting into an encrypted column\n  - Support for fetching from an encrypted column\n- Added support for MSODBC 17 preview\n- Added Driver option to set the ODBC driver, Added\"Driver\" option, valid values are ODBC Driver 13 for SQL Server,ODBC Driver 11 for SQL Server, and ODBC Driver 17 for SQL Server\n  - If the user intends to use the new Always Encrypted features, we recommend you to specify explicitly the 'Driver' option to 'ODBC Driver 17 for SQL Server' in the connection string\n\n### Limitations\n- Always Encrypted functionalities are only supported using [MSODBC 17 preview](https://github.com/Microsoft/msphpsql/tree/dev/ODBC%2017%20binaries%20preview)\n  - ODBC binaries for macOS available upon request\n- MSODBC 17 preview msodbcsql.msi only works for Windows10\n- [Always Encrypted limitations](https://github.com/Microsoft/msphpsql/wiki/Features#aelimitation)\n- when using sqlsrv_query with Always Encrypted feature, SQL type has to be specified for each input (see [here](https://github.com/Microsoft/msphpsql/wiki/Features#aebindparam))\n- No support for inout / output params when using sql_variant type\n\n### Known Issues\n- Connection pooling on Linux doesn't work properly if the user uses the MSODBC17 preview\n- PDO::quote returns truncated string with garbage characters appended if the string contains a ASCII NUL ('/0') character\n- Binding decimal type when using Always Encrypted in the SQLSRV x64 driver returns an error during insertion when the input does not have any decimal places\n- When pooling is enabled in Linux or MAC\n  - unixODBC <= 2.3.4 (Linux and MAC) might not return proper diagnostics information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Connection-Pooling-on-Linux-and-Mac)\n\n## Windows/Linux/MAC 5.0.0-preview - 2017-07-31\nUpdated PECL release packages. Here is the list of updates:\n\n### Added\n- Added support for PHP 7.2 Beta 1\n\n### Changed\n- Implementation of PDO::lastInsertId($name) to return the last inserted sequence number if the sequence name is supplied to the function ([lastInsertId](https://github.com/Microsoft/msphpsql/wiki/Features#lastinsertid))\n\n### Removed\n- No longer support Ubuntu 15\n- Supplying tablename into PDO::lastInsertId($name) no longer return the last inserted row ([lastInsertId](https://github.com/Microsoft/msphpsql/wiki/Features#lastinsertid))\n\n### Limitation\n- No support for inout / output params when using sql_variant type\n\n### Known Issues\n- When pooling is enabled in Linux or MAC\n  - unixODBC <= 2.3.4 (Linux and MAC) might not return proper diagnostics information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Connection-Pooling-on-Linux-and-Mac)\n\n## Windows/Linux/MAC 4.3.0 - 2017-07-06\nProduction Ready release for SQLSRV and PDO_SQLSRV drivers on Sierra, El Capitan, Debian 8, Ubuntu 15, Ubuntu 16, CentOS 7, and Windows. Here is the changlog since the last Production Ready release.\n\n### Added\n- Added Unicode Column name support ([issue #138](https://github.com/Microsoft/msphpsql/issues/138)).\n- Support for Always On Availability groups via Transparent Network IP Resolution ([TNIR](https://github.com/Microsoft/msphpsql/wiki/Features#TNIR))\n- Added support for sql_variant data type with limitation ([issue #51](https://github.com/Microsoft/msphpsql/issues/51) and [issue #127](https://github.com/Microsoft/msphpsql/issues/127))\n- Support drivers on Debian Jessie (tested on Debian 8.7)\n- Connection Resiliency support in Windows\n- Connection pooling support for Linux and macOS\n- Support for Mac (El Capitan and above)\n- Azure Active Directory Authentication with ActiveDirectoryPassword and SqlPassword\n\n### Fixed\n- Fixed PECL installation errors when PHP was installed from source ([issue #213](https://github.com/Microsoft/msphpsql/issues/213)).\n- Fixed the assertion error (Linux) when fetching data from a binary column using the binary encoding ([issue #226](https://github.com/Microsoft/msphpsql/issues/226)).\n- Fixed issue output parameters bound to empty string ([issue #182](https://github.com/Microsoft/msphpsql/issues/182)).\n- Fixed a memory leak in closing connection resources.\n- Fixed load ordering issue in MacOS ([issue #417](https://github.com/Microsoft/msphpsql/issues/417))\n- Added a workaround for a bug in unixODBC 2.3.4 when connection pooling is enabled.\n- Fixed the issue with driver loading order in macOS\n- Fixed null returned when an empty string is set to an output parameter ([issue #308](https://github.com/Microsoft/msphpsql/issues/308)).\n- #### Fixed in SQLSRV\n\t- Fixed sqlsrv client buffer size to only allow positive integers ([issue #228](https://github.com/Microsoft/msphpsql/issues/228)).\n\t- Fixed sqlsrv_num_rows() when the client buffered result is null ([issue #330](https://github.com/Microsoft/msphpsql/issues/330)).\n\t- Fixed issues with sqlsrv_has_rows() to prevent it from moving statement cursor ([issue #37](https://github.com/Microsoft/msphpsql/issues/37)).\n\t- Fixed conversion warnings because of some const chars ([issue #332](https://github.com/Microsoft/msphpsql/issues/332)).\n\t- Fixed debug abort error when building the driver in debug mode with PHP 7.1.\n\t- Fixed string truncation when binding varchar(max), nvarchar(max), varbinary(max), and xml types ([issue #231](https://github.com/Microsoft/msphpsql/issues/231)).\n\t- Fixed fatal error when fetching empty nvarchar ([issue #69](https://github.com/Microsoft/msphpsql/issues/69)).\n\t- Fixed fatal error when calling sqlsrv_fetch() with an out of bound offset for SQLSRV_SCROLL_ABSOLUTE ([issue #223](https://github.com/Microsoft/msphpsql/issues/223)).\n - #### Fixed in PDO_SQLSRV\n\t- Fixed issue with SQLSRV_ATTR_FETCHES_NUMERIC_TYPE when column return type is set on statement ([issue #173](https://github.com/Microsoft/msphpsql/issues/173)).\n\t- Improved performance by implementing a cache to store column SQL types and display sizes ([issue #189](https://github.com/Microsoft/msphpsql/issues/189)).\n\t- Fixed segmentation fault with PDOStatement::getColumnMeta() when the supplied column index is out of range ([issue #224](https://github.com/Microsoft/msphpsql/issues/224)).\n\t- Fixed issue with the unsupported attribute PDO::ATTR_PERSISTENT in connection ([issue #65](https://github.com/Microsoft/msphpsql/issues/65)).\n\t- Fixed the issue with executing DELETE operation on a non-existent value ([issue #336](https://github.com/Microsoft/msphpsql/issues/336)).\n\t- Fixed incorrectly binding of unicode parameter when emulate prepare is on and the encoding is set at the statement level ([issue #92](https://github.com/Microsoft/msphpsql/issues/92)).\n\t- Fixed binary column binding when emulate prepare is on ([issue #140](https://github.com/Microsoft/msphpsql/issues/140)).\n\t- Fixed wrong value returned when fetching varbinary value on Linux ([issue #270](https://github.com/Microsoft/msphpsql/issues/270)).\n\t- Fixed binary data not returned when the column is bound by name ([issue #35](https://github.com/Microsoft/msphpsql/issues/35)).\n\t- Fixed exception thrown on closeCursor() when the statement has not been executed ([issue #267](https://github.com/Microsoft/msphpsql/issues/267)).\n\n### Limitation\n- No support for inout / output params when using sql_variant type\n\n### Known Issues\n- When pooling is enabled in Linux or MAC\n  - unixODBC <= 2.3.4 (Linux and MAC) might not return proper diagnostics information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Connection-Pooling-on-Linux-and-Mac)\n\n## Windows/Linux/MAC 4.3.0-RC1 - 2017-06-21\nHere is the list of updates:\n\n### Added\n- Transparent Network IP Resolution ([TNIR](https://github.com/Microsoft/msphpsql/wiki/Features#TNIR)) feature.\n\n### Fixed\n- Fixed a memory leak in closing connection resources.\n- Fixed load ordering issue in MacOS ([issue #417](https://github.com/Microsoft/msphpsql/issues/417))\n\n### Limitation\n- No support for inout / output params when using sql_variant type\n\n### Known Issues\n- When pooling is enabled in Linux or MAC\n  - unixODBC <= 2.3.4 (Linux and MAC) might not return proper diagnostics information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Connection-Pooling-on-Linux-and-Mac)\n\n\n## Windows/Linux/MAC 4.2.0-preview - 2017-05-19\nHere is the list of updates:\n\n### Added\n- Added support for sql_variant data type with limitation ([issue #51](https://github.com/Microsoft/msphpsql/issues/51) and [issue #127](https://github.com/Microsoft/msphpsql/issues/127))\n- Support drivers on Debian Jessie (tested on Debian 8.7)\n\n### Fixed\n- Increased Test Coverage to 75%\n- Bug fixes after running static analysis\n\n### Limitation\n- No support for inout / output params when using sql_variant type\n\n### Known Issues\n- User defined data types\n- When pooling is enabled in Linux or MAC\n  - unixODBC <= 2.3.4 (Linux and MAC) might not return proper diagnostics information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Connection-Pooling-on-Linux-and-Mac)\n\n## Windows/Linux/MAC 4.1.9-preview - 2017-05-08\n- Updated documentation for Readme regarding instructions for Linux and MAC\n- Updated PECL release packages. Here is the list of updates:\n### Added\n- Azure Active Directory Authentication with ActiveDirectoryPassword and SqlPassword\n\n### Fixed\n- Fixed output parameter returning garbage when the parameter is initialized to a type that is different from the output type ([issue #378](https://github.com/Microsoft/msphpsql/issues/378)).\n\n#### PDO_SQLSRV only\n- Fixed incorrectly binding of unicode parameter when emulate prepare is on and the encoding is set at the statement level ([issue #92](https://github.com/Microsoft/msphpsql/issues/92)).\n- Fixed binary column binding when emulate prepare is on ([issue #140](https://github.com/Microsoft/msphpsql/issues/140)).\n\n### Known Issues\n- User defined data types and SQL_VARIANT ([issue #127](https://github.com/Microsoft/msphpsql/issues/127)).\n- When pooling is enabled in Linux or MAC\n  - unixODBC 2.3.1 (Linux) and unixODBC 2.3.4 (MAC) might not return proper diagnostics information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Connection-Pooling-on-Linux-and-Mac)\n\n## Windows/Linux/MAC 4.1.8-preview - 2017-04-10\nUpdated documentation for Readme regarding instructions for Linux and MAC\nUpdated PECL release packages. Here is the list of updates:\n### Added\n- [Connection Resiliency](https://github.com/Microsoft/msphpsql/wiki/Connection-Resiliency) now supported in Windows\n- [Connection pooling](https://github.com/Microsoft/msphpsql/wiki/Connection-Pooling-on-Linux-and-Mac) now works in MAC\n\n### Fixed\n#### SQLSRV and PDO_SQLSRV\n- Added a workaround for a bug in unixODBC 2.3.4 when connection pooling is enabled.\n- Fixed the issue in MAC such that which driver is loaded first no longer matters.\n\n#### SQLSRV only\n- Fixed sqlsrv_num_rows() when the client buffered result is null ([issue #330](https://github.com/Microsoft/msphpsql/issues/330)).\n- Fixed conversion warnings because of some const chars ([issue #332](https://github.com/Microsoft/msphpsql/issues/332)).\n\n#### PDO_SQLSRV only\n- Improved performance by implementing a cache to store column SQL types and display sizes ([issue #189](https://github.com/Microsoft/msphpsql/issues/189)).\n- Fixed issue with the unsupported attribute PDO::ATTR_PERSISTENT in connection ([issue #65](https://github.com/Microsoft/msphpsql/issues/65)).\n- Fixed the issue when deleting something that doesn't exist ([issue #336](https://github.com/Microsoft/msphpsql/issues/336)).\n\n### Known Issues\n- User defined data types and SQL_VARIANT ([issue #127](https://github.com/Microsoft/msphpsql/issues/127)).\n- Binary column binding with emulate prepare ([issue #140](https://github.com/Microsoft/msphpsql/issues/140)).\n- When pooling is enabled in Linux or MAC\n  - unixODBC 2.3.1 (Linux) and unixODBC 2.3.4 (MAC) might not return proper diagnostics information, such as error messages, warnings and informative messages\n  - due to this unixODBC bug, fetch large data (such as xml, binary) as streams as a workaround. See the examples [here](https://github.com/Microsoft/msphpsql/wiki/Connection-Pooling-on-Linux-and-Mac)\n\n## Windows/Linux/MAC 4.1.7-preview - 2017-03-07\nUpdated PECL release packages. Here is the list of updates:\n### Added\n- The early technical preview (ETP) for SQLSRV and PDO_SQLSRV drivers for MAC with basic functionalities is now available. Both drivers has been built and tested on MAC OS version El Capitan (OS X 10.11).\n\n### Fixed\n#### SQLSRV and PDO_SQLSRV\n- Fixed null returned when an empty string is set to an output parameter ([issue #308](https://github.com/Microsoft/msphpsql/issues/308)).\n- Fixed memory leaks in buffered result sets.\n- Fixed clang compile errors.\n\n#### SQLSRV only\n- Fixed debug abort error when building the driver in debug mode with PHP 7.1.\n- Fixed string truncation when binding varchar(max), nvarchar(max), varbinary(max), and xml types ([issue #231](https://github.com/Microsoft/msphpsql/issues/231)).\n- Fixed fatal error when fetching empty nvarchar ([issue #69](https://github.com/Microsoft/msphpsql/issues/69)).\n- Fixed fatal error when calling sqlsrv_fetch() with an out of bound offset for SQLSRV_SCROLL_ABSOLUTE ([issue #223](https://github.com/Microsoft/msphpsql/issues/223)).\n\n#### PDO_SQLSRV only\n- Fixed wrong value returned when fetching varbinary value on Linux ([issue #270](https://github.com/Microsoft/msphpsql/issues/270)).\n- Fixed binary data not returned when the column is bound by name ([issue #35](https://github.com/Microsoft/msphpsql/issues/35)).\n- Fixed exception thrown on closeCursor() when the statement has not been executed ([issue #267](https://github.com/Microsoft/msphpsql/issues/267)).\n\n### Known Issues\n- User defined data types and SQL_VARIANT ([issue #127](https://github.com/Microsoft/msphpsql/issues/127)).\n- Binary column binding with emulate prepare ([issue #140](https://github.com/Microsoft/msphpsql/issues/140)).\n- Segmentation fault may result when an unsupported attribute is used for connection.\n\n#### MAC only\n- If loading both sqlsrv and pdo_sqlsrv, the order matters (even when dynamically). For PDO_SQLSRV scripts, load pdo_sqlsrv.so first. For SQLSRV scripts, load sqlsrv.so first.\n- Connection pooling not working.\n\n## Windows/Linux 4.1.6 - 2017-02-03\nUpdated PECL release packages. Here is the list of updates:\n### Added\n- Merged Linux and Windows code.\n- Enabled connection pooling with unixODBC. To enable pooling:\n  - in odbcinst.ini, add `Pooling=Yes` to the `[ODBC]` section and a positive `CPTimeout` value to `[ODBC Driver 13 for SQL Server]` section. See http://www.unixodbc.org/doc/conn_pool.html for detailed instructions.\n\n###Fixed\n- Fixed issues with sqlsrv_has_rows() to prevent it from moving statement cursor ([issue #37](https://github.com/Microsoft/msphpsql/issues/37)).\n- Fixed sqlsrv client buffer size to only allow positive integers ([issue #228](https://github.com/Microsoft/msphpsql/issues/228)).\n- Fixed PECL installation errors when PHP was installed from source ([issue #213](https://github.com/Microsoft/msphpsql/issues/213)).\n- Fixed segmentation fault with PDOStatement::getColumnMeta() when the supplied column index is out of range ([issue #224](https://github.com/Microsoft/msphpsql/issues/224)).\n- Fixed the assertion error (Linux) when fetching data from a binary column using the binary encoding ([issue #226](https://github.com/Microsoft/msphpsql/issues/226)).\n\n## Windows 4.1.5 - 2017-01-19\nUpdated Windows drivers (4.1.5) compiled with PHP 7.0.14 and 7.1 are available. Here is the list of updates:\n\n### Added\n- Added Unicode Column name support([issue #138](https://github.com/Microsoft/msphpsql/issues/138)).\n\n###Fixed\n- Fixed issue output parameters bound to empty string ([issue #182](https://github.com/Microsoft/msphpsql/issues/182)).\n- Fixed issue with SQLSRV_ATTR_FETCHES_NUMERIC_TYPE when column return type is set on statement ([issue #173](https://github.com/Microsoft/msphpsql/issues/173)).\n\n\n### Changed\n- Code structure is updated to facilitate the development; shared codes between both drivers are moved to \"shared\" folder to avoid code duplication issues in development. To build the driver from source:\n    - if you are building the driver from source using PHP source, copy the \"shared\" folder as a subfolder to both the sqlsrv and pdo_sqlsrv folders.\n\n## Linux 4.0.8 - 2016-12-19\nProduction release of Linux drivers is available for Ubuntu 15.04, Ubuntu 16.04, and RedHat 7.2. Here is the list of updates:\n\n### Added\n- Added `SQLSRV_ATTR_FETCHES_NUMERIC_TYPE` attribute support in PDO_SQLSRV driver.`SQLSRV_ATTR_FETCHES_NUMERIC_TYPE` connection attribute flag handles numeric fetches from columns with numeric Sql types (only bit, integer, smallint, tinyint, float and real). This flag can be turned on by setting its value in  `PDO::setAttribute` to `true`, For example,\n               `$conn->setAttribute(PDO::SQLSRV_ATTR_FETCHES_NUMERIC_TYPE,true);`\n\t\t  If `SQLSRV_ATTR_FETCHES_NUMERIC_TYPE`  is set to `true` the results from an integer column will be represented as an `int`, likewise, Sql types float and real will be represented as `float`.\n\t\t  Note for exceptions:\n\t - When connection option flag `ATTR_STRINGIFY_FETCHES` is on, even when `SQLSRV_ATTR_FETCHES_NUMERIC_TYPE` is on, the return value will still be string.\n\t - \tWhen the returned PDO type in bind column is `PDO_PARAM_INT`, the return value from a integer column will be int even if `SQLSRV_ATTR_FETCHES_NUMERIC_TYPE` is off.\n- Added Unicode Column name support([issue #138](https://github.com/Microsoft/msphpsql/issues/138)).\n\n###Fixed\n- Fixed issue with SQLSRV_ATTR_FETCHES_NUMERIC_TYPE when column return type is set on statement ([issue #173](https://github.com/Microsoft/msphpsql/issues/173)).\n- Fixed precision issues when double data type returned as strings using buffered queries in PDO_SQLSRV driver.\n- Fixed issue with buffered cursor in PDO_SQLSRV driver when CharacterSet is UTF-8 ([issue #192](https://github.com/Microsoft/msphpsql/issues/192)).\n- Fixed segmentation fault in error cases when error message is returned with emulate prepare attribute is set to true in PDO_SQLSRV driver.\n- Fixed issue with empty output parameters on stored procedure([issue #182](https://github.com/Microsoft/msphpsql/issues/182)).\n- Fixed memory leaks in buffered queries.\n\n\n## Linux 4.0.7 - 2016-11-23\nLinux drivers compiled with PHP 7.0.13 are available for Ubuntu 15.04, Ubuntu 16.04, and RedHat 7.2.\n\n### Added\n- Ported buffered cursor to Linux.\n\n### Changed\n- Code structure is updated to facilitate the development; shared codes between both drivers are moved to \"shared\" folder to avoid code duplication issues in development. To build the driver from source, use \"packagize\" script as follows:\n\t - if you are using the phpize, clone or download the “source”, run the script within the “source” directory and then run phpize.\n\t - if you are building the driver from source using PHP source, give the path to the PHP source to the script.\n\n### Fixed\n - Fixed string truncation error when inserting long strings.\n - Fixed querying from large column name.\n - Fixed issue with trailing garbled characters in string retrieval.\n - Fixed issue with detecting invalid UTF-16 strings coming from server.\n - Fixed issues with binding input text, ntext, and image parameters.\n\n## Linux 4.0.6 - 2016-10-25\nLinux drivers compiled with PHP 7.0.12 are available for Ubuntu 15.04, Ubuntu 16.04, and RedHat 7.2.\n\n### Changed\n - Drivers versioning has been redesigned as Major#.Minor#.Release#.Build#. Build number is specific to binaries and it doesn't match with the number on the source.\n -  Compiler C++ 11 is enabled in config file.\n\n### Fixed\n - Fixed the issue with duplicate warning messages in PDO_SQLSRV drivers when error mode is set to PDO::ERRMODE_WARNING.\n - Fixed the issue with invalid UTF-8 strings, those are detected before executing any queries and proper error message is returned.\n - Fixed segmentation fault in sqlsrv_fetch_object and sqlsrv_fetch_array function.\n\n## Windows 4.1.4 - 2016-10-25\nWindows drivers compiled with PHP 7.0.12  and 7.1 are available. Here is the list of updates:\n\n### Changed\n - Drivers versioning has been redesigned as Major#.Minor#.Release#.Build#. Build number is specific to binaries and it doesn't match with the number on the source.\n\n### Fixed\n - Fixed the issue with duplicate warning messages in PDO_SQLSRV drivers when error mode is set to PDO::ERRMODE_WARNING.\n\n## Linux 4.0.5 - 2016-10-04\nLinux drivers compiled with PHP 7.0.11 are available for Ubuntu 15.04, Ubuntu 16.04, and RedHat 7.2.\n\n### Fixed\n - Fixed segmentation fault when calling PDOStatement::getColumnMeta on RedHat 7.2.\n - Fixed segmentation fault when fetch mode is set to ATTR_EMULATE_PREPARES on RedHat 7.2.\n - Fixed [issue #139](https://github.com/Microsoft/msphpsql/issues/139) : sqlsrv_fetch_object calls custom class constructor in static context and outputs an error.\n\n## Windows 4.1.3 - 2016-10-04\nUpdated Windows drivers (4.1.3) compiled with PHP 7.0.11  and 7.1.0RC3 are available. Here is the list of updates:\n\n### Fixed\n- Fixed [issue #139](https://github.com/Microsoft/msphpsql/issues/139) : sqlsrv_fetch_object calls custom class constructor in static context and outputs an error.\n\n##Linux 4.0.4 - 2016-09-09\nLinux drivers compiled with PHP 7.0.10 are available for Ubuntu 15.04, Ubuntu 16.04, and RedHat 7.2.\n\n### Added\n- Added Support for EMULATE_PREPARE feature.\n- Added following integer SQL Types constants for cases which function-like SQL types constants cannot be used e.g. type comparison:\n\n    SQLSRV constant | Typical SQL Server data type | SQL type identifier\n    ------------ | ----------------------- | ----------------------\n   SQLSRV_SQLTYPE_DECIMAL | decimal       | SQL_DECIMAL\n   SQLSRV_SQLTYPE_NUMERIC | numeric       | SQL_NUMERIC\n   SQLSRV_SQLTYPE_CHAR    | char          | SQL_CHAR\n   SQLSRV_SQLTYPE_NCHAR   | nchar         | SQL_WCHAR\n   SQLSRV_SQLTYPE_VARCHAR | varchar       | SQL_VARCHAR\n   SQLSRV_SQLTYPE_NVARCHAR | nvarchar     | SQL_WVARCHAR\n   SQLSRV_SQLTYPE_BINARY   | binary       | SQL_BINARY\n   SQLSRV_SQLTYPE_VARBINARY  | varbinary   | SQL_VARBINARY\n\n    Note: These constants should be used in type comparison operations (refer to issue [#87](https://github.com/Microsoft/msphpsql/issues/87) and [#99](https://github.com/Microsoft/msphpsql/issues/99) ), and don't replace the function like constants with similar syntax. For binding parameters you should use the function-like constants, otherwise you'll get an error.\n\n### Fixed\n - Fixed  undefined symbols at SQL* error when loading the drivers.\n - Fixed undefined symbol issues at LocalAlloc and LocalFree on RedHat7.2.\n - Fixed [issue #144](https://github.com/Microsoft/msphpsql/issues/144) (floating point exception).\n - Fixed [issue #119](https://github.com/Microsoft/msphpsql/issues/119) (modifying class name in sqlsrv_fetch_object).\n\n## Windows 4.1.2 - 2016-09-09\nUpdated Windows drivers (4.1.2) compiled with PHP 7.0.10 are available. Here is the list of updates:\n\n### Added\n- Added following integer SQL Types constants for cases which function-like SQL types constants cannot be used e.g. type comparison:\n\n    SQLSRV constant | Typical SQL Server data type | SQL type identifier\n    ------------ | ----------------------- | ----------------------\n   SQLSRV_SQLTYPE_DECIMAL | decimal       | SQL_DECIMAL\n   SQLSRV_SQLTYPE_NUMERIC | numeric       | SQL_NUMERIC\n   SQLSRV_SQLTYPE_CHAR    | char          | SQL_CHAR\n   SQLSRV_SQLTYPE_NCHAR   | nchar         | SQL_WCHAR\n   SQLSRV_SQLTYPE_VARCHAR | varchar       | SQL_VARCHAR\n   SQLSRV_SQLTYPE_NVARCHAR | nvarchar     | SQL_WVARCHAR\n   SQLSRV_SQLTYPE_BINARY   | binary       | SQL_BINARY\n   SQLSRV_SQLTYPE_VARBINARY  | varbinary   | SQL_VARBINARY\n\n    Note: These constants should be used in type comparison operations (refer to issue [#87](https://github.com/Microsoft/msphpsql/issues/87) and [#99](https://github.com/Microsoft/msphpsql/issues/99) ), and don't replace the function like constants with similar syntax. For binding parameters you should use the function-like constants, otherwise you'll get an error.\n\n### Fixed\n - Fixed [issue #119](https://github.com/Microsoft/msphpsql/issues/119) (modifying class name in sqlsrv_fetch_object).\n\n\n## Linux 4.0.3 - 2016-08-23\nLinux drivers compiled with PHP 7.0.9 are available for Ubuntu 15.04, Ubuntu 16.04, and RedHat 7.2.\n\n### Fixed\n - Fixed data corruption in binding integer parameters.\n - Fixed invalid sql_display_size error.\n - Fixed issue with invalid statement options.\n - Fixed binding bit parameters.\n\n## Windows 4.1.1 - 2016-08-22\nUpdated Windows drivers(4.1.1) compiled with PHP 7.0.9 are available and include a couple of bug fixes:\n\n### Fixed\n- Fixed issue with storing integers in varchar field.\n- Fixed issue with invalid connection handler if one connection fails.\n- Fixed crash when emulate prepare is on.\n\n\n## Linux 4.0.2 - 2016-07-29\n\n### Fixed\n - The PDO_SQLSRV driver no longer requires PDO to be built as a shared extension.\n - Fixed an issue with format specifiers in error messages.\n - Fixed a segmentation fault when using buffered cursors.\n - Fixed an issue whereby calling sqlsrv_rows_affected on an empty result set would return a null result instead of 0.\n - Fixed an issue with error messages when there is an error in sizes in SQLSRV_SQLTYPE_*.\n\n## Windows 4.1.0 - 2016-07-28\n\n### Fixed\n - `SQLSRV_ATTR_FETCHES_NUMERIC_TYPE`  connection attribute flag is added to PDO_SQLSRV driver to handle numeric fetches from columns with numeric Sql types (only bit, integer, smallint, tinyint, float and real). This flag can be turned on by setting its value in  `PDO::setAttribute` to `true`, For example,\n               `$conn->setAttribute(PDO::SQLSRV_ATTR_FETCHES_NUMERIC_TYPE,true);`\n\t\t  If `SQLSRV_ATTR_FETCHES_NUMERIC_TYPE`  is set to `true` the results from an integer column will be represented as an `int`, likewise, Sql types float and real will be represented as `float`.\n\t\t  Note for exceptions:\n\t - When connection option flag `ATTR_STRINGIFY_FETCHES` is on, even when `SQLSRV_ATTR_FETCHES_NUMERIC_TYPE` is on, the return value will still be string.\n\t - \tWhen the returned PDO type in bind column is `PDO_PARAM_INT`, the return value from a integer column will be int even if `SQLSRV_ATTR_FETCHES_NUMERIC_TYPE` is off.\n - Fixed float truncation when using buffered query.\n - Fixed handling of Unicode strings and binary when emulate prepare is on in `PDOStatement::bindParam`.  To bind a unicode string, `PDO::SQLSRV_ENCODING_UTF8` should be set using `$driverOption`, and to bind a string to column of Sql type binary, `PDO::SQLSRV_ENCODING_BINARY` should be set.\n - Fixed string truncation in bind output parameters when the size is not set and the length of initialized variable is less than the output.\n - Fixed bind string parameters as bidirectional parameters (`PDO::PARAM_INPUT_OUTPUT `) in PDO_SQLSRV driver. Note for output or bidirectional parameters, `PDOStatement::closeCursor` should be called to get the output value.\n\n\n## Linux 4.0.1 - 2016-07-09\n\n### Added\n- Added support for PDO_SQLSRV driver on RedHat 7.\n\n###Changed\n- Improved handling varchar(MAX).\n- Improved handling basic stream operations.\n\n## Linux 4.0.0 - 2016-06-11\n\n### Added\n- The early technical preview (ETP) for SQLSRV and PDO_SQLSRV drivers for Linux with basic functionalities is now available. The SQLSRV driver has been built and tested on Ubuntu 15.04, Ubuntu 16.04, and RedHat 7.2, and PDO_SQLSRV driver has been built and tested on Ubuntu 15.04, Ubuntu 16.04.\n"
        },
        {
          "name": "Dockerfile-msphpsql",
          "type": "blob",
          "size": 3.8046875,
          "content": "# Download base image ubuntu 18.04\n\nFROM ubuntu:18.04\n\n# Update Ubuntu Software repository\nRUN export DEBIAN_FRONTEND=noninteractive && apt-get update && \\\n    apt-get install -y software-properties-common && \\\n    add-apt-repository ppa:ondrej/php -y && \\\n    apt-get -y install \\\n    apt-transport-https \\\n    apt-utils \\\n    autoconf \\\n    curl \\\n    libcurl4 \\\n    g++ \\\n    gcc    \\\n    git \\\n    lcov \\\n    libxml2-dev \\\n    locales \\\n    make \\\n    php7.3 \\\n    php7.3-dev \\\n    php7.3-intl \\\n    python-pip \\\n    re2c \\\n    unixodbc-dev \\\n    unzip && apt-get clean && \\\n    curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - && \\\n    curl https://packages.microsoft.com/config/ubuntu/18.04/prod.list > /etc/apt/sources.list.d/mssql-release.list && \\\n    apt-get -y update && \\\n    export ACCEPT_EULA=Y && apt-get -y install msodbcsql17 mssql-tools && \\\n    update-alternatives --set php /usr/bin/php7.3\n\nARG PHPSQLDIR=/REPO/msphpsql-dev\nENV TEST_PHP_SQL_SERVER sql\nENV TEST_PHP_SQL_UID sa\nENV TEST_PHP_SQL_PWD Password123\n\n# update PATH after ODBC driver and tools are installed\nENV PATH=\"/opt/mssql-tools/bin:${PATH}\"\t\n\n# add locales for testing\nRUN sed -i 's/# en_US ISO-8859-1/en_US ISO-8859-1/g' /etc/locale.gen\nRUN sed -i 's/# fr_FR@euro ISO-8859-15/fr_FR@euro ISO-8859-15/g' /etc/locale.gen\nRUN sed -i 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen\nRUN sed -i 's/# de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/g' /etc/locale.gen\nRUN sed -i 's/# zh_CN GB2312/zh_CN GB2312/g' /etc/locale.gen\nRUN sed -i 's/# zh_CN.GB18030 GB18030/zh_CN.GB18030 GB18030/g' /etc/locale.gen\nRUN locale-gen\n\n# set locale to utf-8\n# RUN locale-gen en_US.UTF-8\nENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'\n\n# install coveralls (upgrade both pip and requests first)\nRUN python -m pip install --upgrade pip\nRUN python -m pip install --upgrade requests\nRUN python -m pip install cpp-coveralls\n\n# Either Install git / download zip (One can see other strategies : https://ryanfb.github.io/etc/2015/07/29/git_strategies_for_docker.html )\n#One option is to get source from zip file of repository.\n#another option is to copy source to build directory on image\nRUN mkdir -p $PHPSQLDIR\nCOPY . $PHPSQLDIR\nWORKDIR $PHPSQLDIR/source/ \n\nRUN chmod +x ./packagize.sh\nRUN /bin/bash -c \"./packagize.sh\"\n\nRUN echo \"; priority=20\\nextension=sqlsrv.so\\n\" > /etc/php/7.3/mods-available/sqlsrv.ini\nRUN echo \"; priority=30\\nextension=pdo_sqlsrv.so\\n\" > /etc/php/7.3/mods-available/pdo_sqlsrv.ini\n\n# create a writable ini file for testing locales\nRUN echo '' > `php --ini | grep \"Scan for additional .ini files\" | sed -e \"s|.*:\\s*||\"`/99-overrides.ini\nRUN chmod 666 `php --ini | grep \"Scan for additional .ini files\" | sed -e \"s|.*:\\s*||\"`/99-overrides.ini\n\nWORKDIR $PHPSQLDIR/source/sqlsrv\nRUN /usr/bin/phpize && ./configure LDFLAGS=\"-lgcov\" CXXFLAGS=\"-O0 --coverage\" && make && make install\n\nWORKDIR $PHPSQLDIR/source/pdo_sqlsrv\nRUN /usr/bin/phpize && ./configure LDFLAGS=\"-lgcov\" CXXFLAGS=\"-O0 --coverage\" && make && make install\n\nRUN phpenmod sqlsrv pdo_sqlsrv\nRUN php --ri sqlsrv && php --ri pdo_sqlsrv\n\n# set name of sql server host to use\nWORKDIR $PHPSQLDIR/test/functional/pdo_sqlsrv\nRUN sed -i -e 's/TARGET_SERVER/sql/g' MsSetup.inc\nRUN sed -i -e 's/TARGET_DATABASE/msphpsql_pdosqlsrv/g' MsSetup.inc\nRUN sed -i -e 's/TARGET_USERNAME/'\"$TEST_PHP_SQL_UID\"'/g' MsSetup.inc\nRUN sed -i -e 's/TARGET_PASSWORD/'\"$TEST_PHP_SQL_PWD\"'/g' MsSetup.inc\n\nWORKDIR $PHPSQLDIR/test/functional/sqlsrv\nRUN sed -i -e 's/TARGET_SERVER/sql/g' MsSetup.inc\nRUN sed -i -e 's/TARGET_DATABASE/msphpsql_sqlsrv/g' MsSetup.inc\nRUN sed -i -e 's/TARGET_USERNAME/'\"$TEST_PHP_SQL_UID\"'/g' MsSetup.inc\nRUN sed -i -e 's/TARGET_PASSWORD/'\"$TEST_PHP_SQL_PWD\"'/g' MsSetup.inc\n\nWORKDIR $PHPSQLDIR\nRUN chmod +x ./entrypoint.sh\nCMD /bin/bash ./entrypoint.sh\n\nENV REPORT_EXIT_STATUS 1\nENV TEST_PHP_EXECUTABLE /usr/bin/php\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0888671875,
          "content": "Copyright(c) 2023 Microsoft Corporation\r\nAll rights reserved.\r\n\r\nMIT License\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files(the \"Software\"), \r\nto deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, \r\nand / or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions :\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS \r\nIN THE SOFTWARE."
        },
        {
          "name": "Linux-mac-install.md",
          "type": "blob",
          "size": 20.974609375,
          "content": "# Linux and macOS Installation Tutorial for the Microsoft Drivers for PHP for SQL Server\nThe following instructions assume a clean environment and show how to install PHP 8.1, the Microsoft ODBC driver, the Apache web server, and the Microsoft Drivers for PHP for SQL Server on Ubuntu, RedHat, Debian, Suse, Alpine, and macOS. These instructions advise installing the drivers using PECL, but you can also download the prebuilt binaries from the [Microsoft Drivers for PHP for SQL Server](https://github.com/Microsoft/msphpsql/releases) Github project page and install them following the instructions in [Loading the Microsoft Drivers for PHP for SQL Server](https://docs.microsoft.com/sql/connect/php/loading-the-php-sql-driver). For an explanation of extension loading and why we do not add the extensions to php.ini, see the section on [loading the drivers](https://docs.microsoft.com/sql/connect/php/loading-the-php-sql-driver#loading-the-driver-at-php-startup).\n\nThe following instructions install PHP 8.1 by default using `pecl install`, if the PHP 8.1 packages are available. You may need to run `pecl channel-update pecl.php.net` first. Note that some supported Linux distros default to PHP 7.1 or earlier, which is not supported for the latest version of the PHP drivers for SQL Server -- please see the notes at the beginning of each section to install PHP 7.4 or 8.0 instead.\n\nAlso included are instructions for installing the PHP FastCGI Process Manager, PHP-FPM, on Ubuntu. This is needed if you are using the nginx web server instead of Apache.\n\nWhile these instructions contain commands to install both SQLSRV and PDO_SQLSRV drivers, the drivers can be installed and function independently. Users comfortable with customizing their configuration can adjust these instructions to be specific to SQLSRV or PDO_SQLSRV. Both drivers have the same dependencies except where noted below.\n\n## Contents of this page\n\n- [Installing the drivers on Ubuntu](#installing-the-drivers-on-ubuntu)\n- [Installing the drivers with PHP-FPM on Ubuntu](#installing-the-drivers-with-php-fpm-on-ubuntu)\n- [Installing the drivers on Red Hat](#installing-the-drivers-on-red-hat)\n- [Installing the drivers on Debian](#installing-the-drivers-on-debian)\n- [Installing the drivers on Suse](#installing-the-drivers-on-suse)\n- [Installing the drivers on Alpine](#installing-the-drivers-on-alpine)\n- [Installing the drivers on macOS](#installing-the-drivers-on-macos)\n\n## Installing the drivers on Ubuntu\n\n> [!NOTE]\n> To install PHP 7.4 or 8.0, replace 8.1 with 7.4 or 8.0 in the following commands.\n\n### Step 1. Install PHP\n```bash\nsudo su\nadd-apt-repository ppa:ondrej/php -y\napt-get update\napt-get install php8.1 php8.1-dev php8.1-xml -y --allow-unauthenticated\n```\n### Step 2. Install prerequisites\nInstall the ODBC driver for Ubuntu by following the instructions on the [Install the Microsoft ODBC driver for SQL Server (Linux)](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-ver15).\n\n### Step 3. Install the PHP drivers for Microsoft SQL Server\n```bash\nsudo pecl install sqlsrv\nsudo pecl install pdo_sqlsrv\nsudo su\nprintf \"; priority=20\\nextension=sqlsrv.so\\n\" > /etc/php/8.1/mods-available/sqlsrv.ini\nprintf \"; priority=30\\nextension=pdo_sqlsrv.so\\n\" > /etc/php/8.1/mods-available/pdo_sqlsrv.ini\nexit\nsudo phpenmod -v 8.1 sqlsrv pdo_sqlsrv\n```\n\nIf there is only one PHP version in the system, then the last step can be simplified to `phpenmod sqlsrv pdo_sqlsrv`.\n\n### Step 4. Install Apache and configure driver loading\n```bash\nsudo su\napt-get install libapache2-mod-php8.1 apache2\na2dismod mpm_event\na2enmod mpm_prefork\na2enmod php8.1\nexit\n```\n### Step 5. Restart Apache and test the sample script\n```bash\nsudo service apache2 restart\n```\nTo test your installation, see [Testing your installation](#testing-your-installation) at the end of this document.\n\n## Installing the drivers with PHP-FPM on Ubuntu\n\n> [!NOTE]\n> To install PHP 7.4 or 8.0, replace 8.1 with 7.4 or 8.0 in the following commands.\n\n### Step 1. Install PHP\n```bash\nsudo su\nadd-apt-repository ppa:ondrej/php -y\napt-get update\napt-get install php8.1 php8.1-dev php8.1-fpm php8.1-xml -y --allow-unauthenticated\n```\nVerify the status of the PHP-FPM service by running\n```bash\nsystemctl status php8.1-fpm\n```\n### Step 2. Install prerequisites\nInstall the ODBC driver for Ubuntu by following the instructions on the [Install the Microsoft ODBC driver for SQL Server (Linux)](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-ver15).\n\n### Step 3. Install the PHP drivers for Microsoft SQL Server\n```bash\nsudo pecl config-set php_ini /etc/php/8.1/fpm/php.ini\nsudo pecl install sqlsrv\nsudo pecl install pdo_sqlsrv\nsudo su\nprintf \"; priority=20\\nextension=sqlsrv.so\\n\" > /etc/php/8.1/mods-available/sqlsrv.ini\nprintf \"; priority=30\\nextension=pdo_sqlsrv.so\\n\" > /etc/php/8.1/mods-available/pdo_sqlsrv.ini\nexit\nsudo phpenmod -v 8.1 sqlsrv pdo_sqlsrv\n```\nIf there is only one PHP version in the system, then the last step can be simplified to `phpenmod sqlsrv pdo_sqlsrv`.\n\nVerify that `sqlsrv.ini` and `pdo_sqlsrv.ini` are located in `/etc/php/8.1/fpm/conf.d/`:\n```bash\nls /etc/php/8.1/fpm/conf.d/*sqlsrv.ini\n```\nRestart the PHP-FPM service:\n```bash\nsudo systemctl restart php8.1-fpm\n```\n\n### Step 4. Install and configure nginx\n```bash\nsudo apt-get update\nsudo apt-get install nginx\nsudo systemctl status nginx\n```\nTo configure nginx, you must edit the `/etc/nginx/sites-available/default` file. Add `index.php` to the list below the section that says `# Add index.php to the list if you are using PHP`:\n```\n# Add index.php to the list if you are using PHP\nindex index.html index.htm index.nginx-debian.html index.php;\n```\nNext, uncomment and modify the section following `# pass PHP scripts to FastCGI server` as follows:\n```\n# pass PHP scripts to FastCGI server\n#\nlocation ~ \\.php$ {\n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/run/php/php8.1-fpm.sock;\n}\n```\n### Step 5. Restart nginx and test the sample script\n```bash\nsudo systemctl restart nginx.service\n```\nTo test your installation, see [Testing your installation](#testing-your-installation) at the end of this document.\n\n## Installing the drivers on Red Hat\n\n### Step 1. Install PHP\n\nTo install PHP on Red Hat 7, run the following:\n> [!NOTE]\n> To install PHP 7.4 or 8.0, replace remi-php81 with remi-php74 or remi-php80 respectively in the following commands.\n```bash\nsudo su\nyum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\nyum install https://rpms.remirepo.net/enterprise/remi-release-7.rpm\nsubscription-manager repos --enable=rhel-7-server-optional-rpms\nyum install yum-utils\nyum-config-manager --enable remi-php81\nyum update\n# Note: The php-pdo package is required only for the PDO_SQLSRV driver\nyum install php php-pdo php-pear php-devel\n```\n\nTo install PHP on Red Hat 8, run the following:\n> [!NOTE]\n> To install PHP 7.4 or 8.0, replace remi-8.1 with remi-7.4 or remi-8.0 respectively in the following commands.\n```bash\nsudo su\ndnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm\ndnf install https://rpms.remirepo.net/enterprise/remi-release-8.rpm\ndnf install yum-utils\ndnf module reset php\ndnf module install php:remi-8.1\nsubscription-manager repos --enable codeready-builder-for-rhel-8-x86_64-rpms\ndnf update\n# Note: The php-pdo package is required only for the PDO_SQLSRV driver\ndnf install php-pdo php-pear php-devel\n```\n\n### Step 2. Install prerequisites\nInstall the ODBC driver for Red Hat 7 or 8 by following the instructions on the [Install the Microsoft ODBC driver for SQL Server (Linux)](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-ver15).\n\n### Step 3. Install the PHP drivers for Microsoft SQL Server\n```bash\nsudo pecl install sqlsrv\nsudo pecl install pdo_sqlsrv\nsudo su\necho extension=pdo_sqlsrv.so >> `php --ini | grep \"Scan for additional .ini files\" | sed -e \"s|.*:\\s*||\"`/30-pdo_sqlsrv.ini\necho extension=sqlsrv.so >> `php --ini | grep \"Scan for additional .ini files\" | sed -e \"s|.*:\\s*||\"`/20-sqlsrv.ini\nexit\n```\n\nYou can alternatively install from the Remi repo:\n```bash\nsudo yum install php-sqlsrv\n```\n### Step 4. Install Apache\n```bash\nsudo yum install httpd\n```\nSELinux is installed by default and runs in Enforcing mode. To allow Apache to connect to databases through SELinux, run the following command:\n```bash\nsudo setsebool -P httpd_can_network_connect_db 1\n```\n### Step 5. Restart Apache and test the sample script\n```bash\nsudo apachectl restart\n```\nTo test your installation, see [Testing your installation](#testing-your-installation) at the end of this document.\n\n## Installing the drivers on Debian\n\n> [!NOTE]\n> To install PHP 7.4 or 8.0, replace 8.1 in the following commands with 7.4 or 8.0.\n\n### Step 1. Install PHP\n```bash\nsudo su\napt-get install curl apt-transport-https\nwget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg\necho \"deb https://packages.sury.org/php/ $(lsb_release -sc) main\" > /etc/apt/sources.list.d/php.list\napt-get update\napt-get install -y php8.1 php8.1-dev php8.1-xml php8.1-intl\n```\n### Step 2. Install prerequisites\nInstall the ODBC driver for Debian by following the instructions on the [Install the Microsoft ODBC driver for SQL Server (Linux)](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-ver15). \n\nYou may also need to generate the correct locale to get PHP output to display correctly in a browser. For example, for the en_US UTF-8 locale, run the following commands:\n```bash\nsudo su\nsed -i 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen\nlocale-gen\n```\nYou may need to add `/usr/sbin` to your `$PATH`, as the `locale-gen` executable is located there.\n\n### Step 3. Install the PHP drivers for Microsoft SQL Server\n```bash\nsudo pecl install sqlsrv\nsudo pecl install pdo_sqlsrv\nsudo su\nprintf \"; priority=20\\nextension=sqlsrv.so\\n\" > /etc/php/8.1/mods-available/sqlsrv.ini\nprintf \"; priority=30\\nextension=pdo_sqlsrv.so\\n\" > /etc/php/8.1/mods-available/pdo_sqlsrv.ini\nexit\nsudo phpenmod -v 8.1 sqlsrv pdo_sqlsrv\n```\n\nIf there is only one PHP version in the system, then the last step can be simplified to `phpenmod sqlsrv pdo_sqlsrv`. As with `locale-gen`, `phpenmod` is located in `/usr/sbin` so you may need to add this directory to your `$PATH`.\n\n### Step 4. Install Apache and configure driver loading\n```bash\nsudo su\napt-get install libapache2-mod-php8.1 apache2\na2dismod mpm_event\na2enmod mpm_prefork\na2enmod php8.1\n```\n### Step 5. Restart Apache and test the sample script\n```bash\nsudo service apache2 restart\n```\nTo test your installation, see [Testing your installation](#testing-your-installation) at the end of this document.\n\n## Installing the drivers on Suse\n\n> [!NOTE]\n> In the following instructions, replace `<SuseVersion>` with your version of Suse - if you are using Suse Enterprise Linux 15, it will be SLE_15_SP3 or SLE_15_SP4 (or above). For Suse 12, use SLE_12_SP5 (or above). Not all versions of PHP are available for all versions of Suse Linux - please refer to `http://download.opensuse.org/repositories/devel:/languages:/php` to see which versions of Suse have the default version PHP available, or check `http://download.opensuse.org/repositories/devel:/languages:/php:/` to see which other versions of PHP are available for which versions of Suse.\n\n> [!NOTE]\n> Packages for PHP 7.4 or above are not available for Suse 12, as of today.\n\n### Step 1. Install PHP\n```bash\nsudo su\nzypper -n ar -f https://download.opensuse.org/repositories/devel:languages:php/<SuseVersion>/devel:languages:php.repo\nzypper --gpg-auto-import-keys refresh\nzypper -n install php8 php8-pdo php8-devel php8-openssl\n```\n### Step 2. Install prerequisites\nInstall the ODBC driver for Suse by following the instructions on the [Install the Microsoft ODBC driver for SQL Server (Linux)](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-ver15).\n\n### Step 3. Install the PHP drivers for Microsoft SQL Server\n```bash\nsudo pecl install sqlsrv\nsudo pecl install pdo_sqlsrv\nsudo su\necho extension=pdo_sqlsrv.so >> `php --ini | grep \"Scan for additional .ini files\" | sed -e \"s|.*:\\s*||\"`/pdo_sqlsrv.ini\necho extension=sqlsrv.so >> `php --ini | grep \"Scan for additional .ini files\" | sed -e \"s|.*:\\s*||\"`/sqlsrv.ini\nexit\n```\n### Step 4. Install Apache and configure driver loading\n```bash\nsudo su\nzypper install apache2 apache2-mod_php8\na2enmod php8\necho \"extension=sqlsrv.so\" >> /etc/php8/apache2/php.ini\necho \"extension=pdo_sqlsrv.so\" >> /etc/php8/apache2/php.ini\nexit\n```\n### Step 5. Restart Apache and test the sample script\n```bash\nsudo systemctl restart apache2\n```\nTo test your installation, see [Testing your installation](#testing-your-installation) at the end of this document.\n\n## Installing the drivers on Alpine\n\n> [!NOTE]\n> PHP 8.1 or above may be available from testing or edge repositories for Alpine. You can instead compile PHP from source.\n\n### Step 1. Install PHP\nPHP packages for Alpine can be found in the `edge/community` repository. Please check [Enable Community Repository](https://wiki.alpinelinux.org/wiki/Enable_Community_Repository) on their WIKI page. Add the following line to `/etc/apk/repositories`, replacing `<mirror>` with the URL of an Alpine repository mirror:\n```bash\nhttp://<mirror>/alpine/edge/community\n```\nThen run:\n```bash\nsudo su\napk update\n# Note: The php*-pdo package is required only for the PDO_SQLSRV driver\n# For PHP 7.*\napk add php7 php7-dev php7-pear php7-pdo php7-openssl autoconf make g++\n# For PHP 8.*\napk add php8 php8-dev php8-pear php8-pdo php8-openssl autoconf make g++\n# The following symbolic links are optional but useful\nln -s /usr/bin/php8 /usr/bin/php\nln -s /usr/bin/phpize8 /usr/bin/phpize\nln -s /usr/bin/pecl8 /usr/bin/pecl\nln -s /usr/bin/php-config8 /usr/bin/php-config\n```\n\n### Step 2. Install prerequisites\nInstall the ODBC driver for Alpine by following the instructions on the [Install the Microsoft ODBC driver for SQL Server (Linux)](https://docs.microsoft.com/sql/connect/odbc/linux-mac/installing-the-microsoft-odbc-driver-for-sql-server?view=sql-server-ver15). \n\n### Step 3. Install the PHP drivers for Microsoft SQL Server\n```bash\nsudo pecl install sqlsrv\nsudo pecl install pdo_sqlsrv\nsudo su\necho extension=pdo_sqlsrv.so >> `php --ini | grep \"Scan for additional .ini files\" | sed -e \"s|.*:\\s*||\"`/10_pdo_sqlsrv.ini\necho extension=sqlsrv.so >> `php --ini | grep \"Scan for additional .ini files\" | sed -e \"s|.*:\\s*||\"`/20_sqlsrv.ini\n```\n\n### Step 4. Install Apache and configure driver loading\n```bash\n# For PHP 7.*\nsudo apk add php7-apache2 apache2\n# For PHP 8.*\nsudo apk add php8-apache2 apache2\n```\n### Step 5. Restart Apache and test the sample script\n```bash\nsudo rc-service apache2 restart\n```\nTo test your installation, see [Testing your installation](#testing-your-installation) at the end of this document.\n\n\n## Installing the drivers on macOS\n\nIf you do not already have it, install Homebrew as follows:\n```bash\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n> [!NOTE]\n> If using Apple M1 ARM64 hardware, please install Homebrew and PHP directly without using the emulator Rosetta 2.\n\n> [!NOTE]\n> To install PHP 7.4 or 8.0, replace php@8.1 with php@7.4 or php@8.0 respectively in the following commands.\n\n### Step 1. Install PHP\n\n```bash\nbrew tap\nbrew tap homebrew/core\nbrew install php@8.1\n```\nPHP should now be in your path. Run `php -v` to verify that you are running the correct version of PHP. If PHP is not in your path or it is not the correct version, run the following:\n```bash\nbrew link --force --overwrite php@8.1\n```\n\nIf using Apple M1 ARM64, you might need to set the path:\n```bash\nexport PATH=\"/opt/homebrew/bin:$PATH\"\n```\n\n### Step 2. Install prerequisites\nInstall the ODBC driver for macOS by following the instructions on the [Install the Microsoft ODBC driver for SQL Server (macOS)](\nhttps://docs.microsoft.com/sql/connect/odbc/linux-mac/install-microsoft-odbc-driver-sql-server-macos?view=sql-server-ver15). \n\n> [!NOTE]\n> If using Apple M1 ARM64 hardware, please install Microsoft ODBC driver 17.8+ directly without using the emulator Rosetta 2.\n\nIn addition, you may need to install the GNU make tools:\n```bash\nbrew install autoconf automake libtool\n```\n\n### Step 3. Install the PHP drivers for Microsoft SQL Server\n```bash\nsudo pecl install sqlsrv\nsudo pecl install pdo_sqlsrv\n```\n\nIf using Apple M1 ARM64, do the following instead:\n```bash\nsudo CXXFLAGS=\"-I/opt/homebrew/opt/unixodbc/include/\" LDFLAGS=\"-L/opt/homebrew/lib/\" pecl install sqlsrv\nsudo CXXFLAGS=\"-I/opt/homebrew/opt/unixodbc/include/\" LDFLAGS=\"-L/opt/homebrew/lib/\" pecl install pdo_sqlsrv\n```\n\n### Step 4. Install Apache and configure driver loading\n\n> [!NOTE]\n> The latest macOS 11.0 Big Sur comes with Apache 2.4 pre-installed, but Apple has also removed some required scripts. The solution is to install Apache 2.4 via Homebrew and then configure it, but this is out of scope for this installation guide, so please check Apache or Homebrew for detailed instructions.\n\n```bash\nbrew install apache2\n```\nTo find the Apache configuration file, `httpd.conf`, for your Apache installation, run \n```bash\n/usr/local/bin/apachectl -V | grep SERVER_CONFIG_FILE\n``` \nThe following commands append the required configuration to `httpd.conf`. Be sure to substitute the path returned by the preceding command in place of `/usr/local/etc/httpd/httpd.conf`:\n```bash\necho \"LoadModule php7_module /usr/local/opt/php@8.1/lib/httpd/modules/libphp7.so\" >> /usr/local/etc/httpd/httpd.conf\n(echo \"<FilesMatch .php$>\"; echo \"SetHandler application/x-httpd-php\"; echo \"</FilesMatch>\";) >> /usr/local/etc/httpd/httpd.conf\n```\n\n### Step 5. Restart Apache and test the sample script\n```bash\nsudo apachectl restart\n```\n\nTo test your installation, see [Testing your installation](#testing-your-installation) at the end of this document.\n\n## Testing Your Installation\n\nTo test this sample script, create a file called testsql.php in your system's document root. This is `/var/www/html/` on Ubuntu, Debian, and Redhat, `/srv/www/htdocs` on SUSE, `/var/www/localhost/htdocs` on Alpine, or `/usr/local/var/www` on macOS. Copy the following script to it, replacing the server, database, username, and password as appropriate.\n\n### SQLSRV example\n\n```php\n<?php\n$serverName = \"yourServername\";\n$connectionOptions = array(\n    \"database\" => \"yourDatabase\",\n    \"uid\" => \"yourUsername\",\n    \"pwd\" => \"yourPassword\"\n);\n\nfunction exception_handler($exception) {\n    echo \"<h1>Failure</h1>\";\n    echo \"Uncaught exception: \" , $exception->getMessage();\n    echo \"<h1>PHP Info for troubleshooting</h1>\";\n    phpinfo();\n}\n\nset_exception_handler('exception_handler');\n\n// Establishes the connection\n$conn = sqlsrv_connect($serverName, $connectionOptions);\nif ($conn === false) {\n    die(formatErrors(sqlsrv_errors()));\n}\n\n// Select Query\n$tsql = \"SELECT @@Version AS SQL_VERSION\";\n\n// Executes the query\n$stmt = sqlsrv_query($conn, $tsql);\n\n// Error handling\nif ($stmt === false) {\n    die(formatErrors(sqlsrv_errors()));\n}\n?>\n\n<h1> Success Results : </h1>\n\n<?php\nwhile ($row = sqlsrv_fetch_array($stmt, SQLSRV_FETCH_ASSOC)) {\n    echo $row['SQL_VERSION'] . PHP_EOL;\n}\n\nsqlsrv_free_stmt($stmt);\nsqlsrv_close($conn);\n\nfunction formatErrors($errors)\n{\n    // Display errors\n    echo \"<h1>SQL Error:</h1>\";\n    echo \"Error information: <br/>\";\n    foreach ($errors as $error) {\n        echo \"SQLSTATE: \". $error['SQLSTATE'] . \"<br/>\";\n        echo \"Code: \". $error['code'] . \"<br/>\";\n        echo \"Message: \". $error['message'] . \"<br/>\";\n    }\n}\n?>\n```\n\n### PDO_SQLSRV example\n\n```php\n<?php\ntry {\n    $serverName = \"yourServername\";\n    $databaseName = \"yourDatabase\";\n    $uid = \"yourUsername\";\n    $pwd = \"yourPassword\";\n    \n    $conn = new PDO(\"sqlsrv:server = $serverName; Database = $databaseName;\", $uid, $pwd);\n\n    // Select Query\n    $tsql = \"SELECT @@Version AS SQL_VERSION\";\n\n    // Executes the query\n    $stmt = $conn->query($tsql);\n} catch (PDOException $exception1) {\n    echo \"<h1>Caught PDO exception:</h1>\";\n    echo $exception1->getMessage() . PHP_EOL;\n    echo \"<h1>PHP Info for troubleshooting</h1>\";\n    phpinfo();\n}\n\n?>\n\n<h1> Success Results : </h1>\n\n<?php\ntry {\n    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n        echo $row['SQL_VERSION'] . PHP_EOL;\n    }\n} catch (PDOException $exception2) {\n    // Display errors\n    echo \"<h1>Caught PDO exception:</h1>\";\n    echo $exception2->getMessage() . PHP_EOL;\n}\n\nunset($stmt);\nunset($conn);\n?>\n```\n\nPoint your browser to https://localhost/testsql.php (https://localhost:8080/testsql.php on macOS). You should now be able to connect to your SQL Server/Azure SQL database. If you don't see a success message showing SQL version information, you can do some basic troubleshooting by running the script from the command line:\n\n```bash\nphp testsql.php\n```\n\nIf running from the command line is successful but nothing shows in your browser, check the [Apache log files](https://linuxize.com/post/apache-log-files/#location-of-the-log-files). For additional help, see [Support resources](support-resources-for-the-php-sql-driver.md) for places to go.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.4521484375,
          "content": "# Microsoft Drivers for PHP for Microsoft SQL Server\n\n**Welcome to the Microsoft Drivers for PHP for Microsoft SQL Server**\n\nThe [Microsoft Drivers for PHP for Microsoft SQL Server][phpdoc] are PHP extensions that allow for the reading and writing of SQL Server data from within PHP scripts. The SQLSRV extension provides a procedural interface while the PDO_SQLSRV extension implements PHP Data Objects (PDO) for accessing data in all editions of SQL Server 2012 and later (including Azure SQL DB). These drivers rely on the [Microsoft ODBC Driver for SQL Server][odbcdoc] to handle the low-level communication with SQL Server.\n\nThis release contains the SQLSRV and PDO_SQLSRV drivers for PHP 8.0+ with improvements on both drivers and some limitations. Upcoming [releases][releases] will contain additional functionalities, bug fixes, and more.\n\n## Take our survey\n\nThank you for taking the time to participate in the [sentiment survey](https://github.com/microsoft/msphpsql/wiki/Survey-Results). You can continue to help us improve by letting us know how we are doing and how you use [PHP][phpweb]:\n\n[**Click here to start the PHP survey**](https://aka.ms/mssqlphpsurvey)\n\n### Status of Most Recent Builds\n| Azure Pipelines (Linux)  | AppVeyor (Windows)       | Coverage (Windows)                    |\n|--------------------------|--------------------------|---------------------------------------|\n| [![az-image][]][az-site] | [![av-image][]][av-site] | [![Coverage Codecov][]][codecov-site] |\n\n[av-image]: https://ci.appveyor.com/api/projects/status/vo4rfei6lxlamrnc?svg=true\n[av-site]: https://ci.appveyor.com/project/msphpsql/msphpsql/branch/dev\n[az-site]: https://sqlclientdrivers.visualstudio.com/public/_build/latest?definitionId=1230&branchName=refs%2Fpull%2F1492%2Fmerge\n[az-image]: https://sqlclientdrivers.visualstudio.com/public/_apis/build/status%2FPHP%2Fmicrosoft.msphpsql?branchName=refs%2Fpull%2F1492%2Fmerge\n[Coverage Codecov]: https://codecov.io/gh/microsoft/msphpsql/branch/dev/graph/badge.svg\n[codecov-site]: https://codecov.io/gh/microsoft/msphpsql\n\n## Get Started\n\nPlease follow the [Getting started](https://docs.microsoft.com/sql/connect/php/getting-started-with-the-php-sql-driver) page.\n\n## Announcements\n\n Please follow [SQL Server Drivers][sqldrivers] for announcements.\n\n## Prerequisites\n\nFor full details on the system requirements for the drivers, see the [system requirements](https://docs.microsoft.com/sql/connect/php/system-requirements-for-the-php-sql-driver) on Microsoft Docs.\n\nOn the client machine:\n- 8.1.x, 8.2.x, 8.3.x\n- [Microsoft ODBC Driver 18, 17 or 13][odbcdoc]\n- If using a Web server such as Internet Information Services (IIS) or Apache, it must be configured to run PHP\n\nOn the server side, Microsoft SQL Server 2012 and above on Windows are supported, as are Microsoft SQL Server 2016 and above on Linux.\n\n## Building and Installing the Drivers on Windows\n\nThe drivers are distributed as pre-compiled extensions for PHP found on the [releases page][releases]. They are available in thread-safe and non-thread-safe versions, and in 32-bit (Windows only) and 64-bit versions. The source code for the drivers is also available, and you can compile them as thread safe or non-thread-safe versions. The thread safety configuration of your web server will determine which version you need. \n \nIf you choose to build the drivers, you must be able to build PHP 8.* without including these extensions. For help building PHP on Windows, see the [official PHP website][phpbuild]. For details on compiling the drivers, see the [documentation](https://github.com/microsoft/msphpsql/blob/master/buildscripts/README.md) -- an example buildscript is provided, but you can also compile the drivers manually.\n\nTo load the drivers, make sure that the driver is in your PHP extension directory and enable it in your PHP installation's php.ini file by adding `extension=php_sqlsrv.dll` and/or `extension=php_pdo_sqlsrv.dll` to the ini file.  If necessary, specify the extension directory using `extension_dir`, for example: `extension_dir = \"C:\\PHP\\ext\"`. Note that the precompiled binaries have different names -- substitute accordingly in php.ini. For more details on loading the drivers, see [Loading the PHP SQL Driver](https://docs.microsoft.com/sql/connect/php/loading-the-php-sql-driver) on Microsoft Docs.\n\nFinally, if running PHP in a Web server, restart the Web server.\n\n## Install (UNIX)\n\nFor full instructions on installing the drivers on all supported Unix platforms, see [the installation instructions on Microsoft Docs][unixinstructions].\n\n## Sample Code\nFor PHP code samples, please see the [sample](https://github.com/Microsoft/msphpsql/tree/master/sample) folder or the [code samples on Microsoft Docs](https://docs.microsoft.com/sql/connect/php/code-samples-for-php-sql-driver). For information on how to use the driver, see [Microsoft Drivers for PHP for Microsoft SQL Server][phpdoc].\n\n## Limitations and Known Issues\nPlease refer to [Releases][releases] for the latest limitations and known issues.\n\n## Version number\nThe version numbers of the PHP drivers follow [semantic versioning](https://semver.org/):\n\nGiven a version number MAJOR.MINOR.PATCH, \n\n - MAJOR version is incremented when an incompatible API change is made, \n - MINOR version is incremented when functionality is added in a backwards-compatible manner, and\n - PATCH version is incremented when backwards-compatible bug fixes are made.\n \nThe version number may have trailing pre-release version identifiers to indicate the stability and/or build metadata.\n\n- Pre-release version is denoted by a hyphen followed by `beta` or `RC` followed by a number. Production quality releases do not contain the pre-release version. `beta` has lower precedence than `RC`. Note that the PECL package version numbers do not have the hyphen before the pre-release version, owing to restrictions in PECL. An example of a PECL package version is `5.9.0beta2`.\n- Build metadata may be denoted by a plus sign followed by a number of digits, such as `5.9.0-beta2+13930`. Build metadata does not affect the precedence order.\n\n## Future Plans\n- Expand SQL Server feature support (example: Azure Active Directory, Always Encrypted, etc.)\n- Add more verification/fundamental tests\n- Improve performance\n- Bug fixes\n\n## Guidelines for Reporting Issues\nWe appreciate you taking the time to test the driver, provide feedback and report any issues.  It would be extremely helpful if you:\n\n- First check the [FAQ](https://github.com/Microsoft/msphpsql/wiki/FAQ) for common problems\n- Report each issue as a new issue (but check first if it's already been reported)\n- Please address the questions in the new issue template and provide scripts, table schema, and/or any details that may help reproduce the problem(s)\n\nThank you!\n\n## Questions\n**Q:** Can we get dates for any of the Future Plans listed above?\n\n**A:** At this time, Microsoft is not able to announce dates. We are working hard to release future versions of the driver and will share future plans as appropriate. \n\n**Q:** What's next?\n\n**A:** We will continue working on our future plans and releasing previews of upcoming [releases][releases]\n\n**Q:** Is Microsoft taking pull requests for this project?\n\n**A:** Yes. Please submit pull requests to the **dev** branch, not the **master** branch.\n\n## License\n\nThe Microsoft Drivers for PHP for SQL Server are licensed under the MIT license. See the LICENSE file for more details.\n\n## Code of conduct\n\nThis project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.\n\n## Resources\n\n**Documentation**: [Microsoft Docs Online][phpdoc].\n\n**SQL Server Drivers**: Please browse the articles for announcements of various [SQL Server Drivers][sqldrivers].\n\n**Known Issues**: Please visit the [project on Github][project] to view outstanding [issues][issues] and report new ones.\n\n[sqldrivers]: https://techcommunity.microsoft.com/t5/SQL-Server/bg-p/SQLServer/label-name/SQLServerDrivers\n\n[project]: https://github.com/microsoft/msphpsql\n\n[issues]: https://github.com/microsoft/msphpsql/issues\n\n[releases]: https://github.com/microsoft/msphpsql/releases\n\n[phpweb]: https://php.net\n\n[phpbuild]: https://wiki.php.net/internals/windows/stepbystepbuild_sdk_2\n\n[phpdoc]: https://docs.microsoft.com/sql/connect/php/microsoft-php-driver-for-sql-server\n\n[odbcdoc]: https://docs.microsoft.com/sql/connect/odbc/microsoft-odbc-driver-for-sql-server\n\n[unixinstructions]: https://docs.microsoft.com/sql/connect/php/installation-tutorial-linux-mac\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.6923828125,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.7 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 9.384765625,
          "content": "version: '{branch}.{build}'\n\nbranches:\n  except:\n    - PHP-7.0-Linux\n    - PHP5\n\nenvironment:\n    # MSSQL credentials from https://www.appveyor.com/docs/services-databases/\n    TEST_PHP_SQL_PWD: Password12!\n    TEST_PHP_SQL_UID: sa\n    SQLSRV_DBNAME: msphpsql_sqlsrv\n    PDOSQLSRV_DBNAME: msphpsql_pdosqlsrv\n    PYTHON: c:\\Python36\n    APPVEYOR: true\n    # For details about Appveyor build worker images (VM template): https://www.appveyor.com/docs/build-environment/#build-worker-images\n    matrix:\n      - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019\n        BUILD_PLATFORM: x86\n        TEST_PHP_SQL_SERVER: (local)\\SQL2019\n        SQL_INSTANCE: SQL2019\n        PHP_VC: vs16\n        PHP_MAJOR_VER: 8.2\n        PHP_MINOR_VER: latest\n        PHP_EXE_PATH: Release\n        THREAD: nts\n        platform: x86\n      - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019\n        BUILD_PLATFORM: x86\n        TEST_PHP_SQL_SERVER: (local)\\SQL2019\n        SQL_INSTANCE: SQL2019\n        PHP_VC: vs16\n        PHP_MAJOR_VER: 8.1\n        PHP_MINOR_VER: latest\n        PHP_EXE_PATH: Release\n        THREAD: nts\n        platform: x86\n# PHP_MAJOR_VER is PHP major version to build (7.4, 7.3)\n# PHP_MINOR_VER is PHP point release number (or latest for latest release)\n# PHP_VC is the Visual C++ version\n# PHP_EXE_PATH is the relative path from php src folder to php executable\n# THREAD is either non-thread-safe (nts) or thread-safe (ts)\n\nmatrix:\n  fast_finish: true\n\n# clone directory (or %APPVEYOR_BUILD_FOLDER%)\nclone_folder: c:\\projects\\sqlphp\n\nbuild:\n    parallel: true                  # enable MSBuild parallel builds\n\ninstall:\n    - echo start SQL Server\n    # Based on http://www.appveyor.com/docs/services-databases\n    - ps: >-\n        [reflection.assembly]::LoadWithPartialName(\"Microsoft.SqlServer.Smo\") | Out-Null;\n        [reflection.assembly]::LoadWithPartialName(\"Microsoft.SqlServer.SqlWmiManagement\") | Out-Null;\n\n        $instanceName = $env:SQL_INSTANCE;\n        $uri = \"ManagedComputer[@Name='$env:COMPUTERNAME']/ServerInstance[@Name='$instanceName']/ServerProtocol[@Name='Tcp']\";\n        $wmi = New-Object ('Microsoft.SqlServer.Management.Smo.Wmi.ManagedComputer');\n        $tcp = $wmi.GetSmoObject($uri);\n        $tcp.IsEnabled = $true;\n        $tcp.Alter();\n        Start-Service \"MSSQL`$$instanceName\";\n\n        Set-Service SQLBrowser -StartupType Manual;\n        Start-Service SQLBrowser;\n    - echo Downloading prerequisites\n    - ps: | \n        $client = New-Object Net.WebClient;\n        $client.Headers.Add(\"user-agent\", \"appveyor-ci-build2\");\n        $client.DownloadFile(\"http://windows.php.net/downloads/releases/sha256sum.txt\", \"c:\\projects\\sha256sum.txt\");\n        If ($env:PHP_MINOR_VER -Match \"latest\") {\n            $env:PHP_VERSION=type c:\\projects\\sha256sum.txt | where { $_ -match \"php-($env:PHP_MAJOR_VER\\.\\d+)-src\" } | foreach { $matches[1] } | Select -First 1 ;\n        } Else {\n            $env:PHP_VERSION=$env:PHP_MAJOR_VER + '.' + $env:PHP_MINOR_VER;\n        }\n    - echo Downloading MSODBCSQL 17\n    # AppVeyor build works are x64 VMs and 32-bit ODBC driver cannot be installed on it\n    - ps: (new-object net.webclient).DownloadFile('https://download.microsoft.com/download/a/e/b/aeb7d4ff-ca20-45db-86b8-8a8f774ce97b/en-US/17.8.1.1/x64/msodbcsql.msi', 'c:\\projects\\msodbcsql.msi')\n    - cmd /c start /wait msiexec /i \"c:\\projects\\msodbcsql.msi\" /q IACCEPTMSODBCSQLLICENSETERMS=YES ADDLOCAL=ALL\n    - echo Checking the version of MSODBCSQL\n    - reg query \"HKLM\\SOFTWARE\\ODBC\\odbcinst.ini\\ODBC Driver 17 for SQL Server\"\n    - dir %WINDIR%\\System32\\msodbcsql*.dll\n    - cd c:\\projects\n    - echo update SQL connection string\n    - ps: (Get-Content ${env:APPVEYOR_BUILD_FOLDER}\\test\\functional\\pdo_sqlsrv\\MsSetup.inc) | ForEach-Object { $_ -replace \"TARGET_SERVER\", ${env:TEST_PHP_SQL_SERVER} -replace \"TARGET_DATABASE\", ${env:PDOSQLSRV_DBNAME} -replace \"TARGET_USERNAME\",  ${env:TEST_PHP_SQL_UID} -replace \"TARGET_PASSWORD\",  ${env:TEST_PHP_SQL_PWD} } | Set-Content ${env:APPVEYOR_BUILD_FOLDER}\\test\\functional\\pdo_sqlsrv\\MsSetup.inc\n    - ps: Select-String ${env:SQL_INSTANCE} ${env:APPVEYOR_BUILD_FOLDER}\\test\\functional\\pdo_sqlsrv\\MsSetup.inc\n    - ps: Select-String ${env:PDOSQLSRV_DBNAME} ${env:APPVEYOR_BUILD_FOLDER}\\test\\functional\\pdo_sqlsrv\\MsSetup.inc\n    - ps: (Get-Content ${env:APPVEYOR_BUILD_FOLDER}\\test\\functional\\sqlsrv\\MsSetup.inc) | ForEach-Object { $_ -replace \"TARGET_SERVER\", ${env:TEST_PHP_SQL_SERVER} -replace \"TARGET_DATABASE\", ${env:SQLSRV_DBNAME} -replace \"TARGET_USERNAME\",  ${env:TEST_PHP_SQL_UID} -replace \"TARGET_PASSWORD\",  ${env:TEST_PHP_SQL_PWD} } | Set-Content ${env:APPVEYOR_BUILD_FOLDER}\\test\\functional\\sqlsrv\\MsSetup.inc\n    - ps: Select-String ${env:SQL_INSTANCE} ${env:APPVEYOR_BUILD_FOLDER}\\test\\functional\\sqlsrv\\MsSetup.inc\n    - ps: Select-String ${env:SQLSRV_DBNAME} ${env:APPVEYOR_BUILD_FOLDER}\\test\\functional\\sqlsrv\\MsSetup.inc\n    - echo install opencppcoverage\n    - choco install opencppcoverage\n    - set path=C:\\Program Files\\OpenCppCoverage;%PYTHON%;%PYTHON%\\Scripts;%path%\n    - copy %APPVEYOR_BUILD_FOLDER%\\codecov.yml c:\\projects\n\nbuild_script:\n    - copy %APPVEYOR_BUILD_FOLDER%\\buildscripts\\*.py c:\\projects\n    - cd c:\\projects\n    - python -V\n    - python builddrivers.py --PHPVER=%PHP_VERSION% --ARCH=%BUILD_PLATFORM% --THREAD=%THREAD% --SOURCE=%APPVEYOR_BUILD_FOLDER%\\source --TESTING --NO_RENAME\n    - cd c:\\projects\\php-sdk\\phpdev\\%PHP_VC%\\%BUILD_PLATFORM%\\php-%PHP_VERSION%-src\\\n    - set PHP_SRC_DIR=%CD%\\ext\n    - cd %PHP_EXE_PATH%\n    - set PHP_EXE_PATH=%CD%\n    - echo Showing the last few lines of php.ini\n    - ps: Get-Content ${env:PHP_EXE_PATH}\\php.ini -Tail 5\n    - php --ini\n    - php -m\n\ntest_script:\n    - Echo setup test database for SQLSRV tests  - %SQLSRV_DBNAME%\n    - python %APPVEYOR_BUILD_FOLDER%\\test\\functional\\setup\\setup_dbs.py -dbname %SQLSRV_DBNAME%\n    - Echo setup test database for PDO_SQLSRV tests - %PDOSQLSRV_DBNAME%\n    - python %APPVEYOR_BUILD_FOLDER%\\test\\functional\\setup\\setup_dbs.py -dbname %PDOSQLSRV_DBNAME%\n    # for code coverage - exclude the following files:\n    #   core_init.cpp, which primarily consists module initialization and shutdown\n    #   core_stream.cpp for pdo_sqlsrv because it is only used by sqlsrv driver\n    - ps: >-\n        If ($env:BUILD_PLATFORM -Match \"x86\") {\n            Write-Host \"Running phpt tests via OpenCppCoverage...\"\n            OpenCppCoverage.exe --sources ${env:PHP_SRC_DIR}\\*sqlsrv --modules ${env:PHP_EXE_PATH}\\php*sqlsrv.dll --excluded_sources core_init.cpp --excluded_sources ${env:PHP_SRC_DIR}\\pdo_sqlsrv\\shared\\core_stream.cpp --export_type=cobertura:c:\\projects\\coverage.xml --quiet --cover_children --continue_after_cpp_exception --optimized_build -- .\\php.exe run-tests.php -P --no-color ${env:APPVEYOR_BUILD_FOLDER}\\test\\functional\\ | out-file -filePath ${env:APPVEYOR_BUILD_FOLDER}\\test\\functional\\tests.log -encoding UTF8;\n            Write-Host \"Showing the last 25 lines of the log file...\"\n            Get-Content ${env:APPVEYOR_BUILD_FOLDER}\\test\\functional\\tests.log -Tail 25;\n            ls *.xml\n        } Else {\n            Write-Host \"Running phpt tests the regular way...\"\n            .\\php.exe run-tests.php -P ${env:APPVEYOR_BUILD_FOLDER}\\test\\functional\\sqlsrv\\*.phpt | out-file -filePath ${env:APPVEYOR_BUILD_FOLDER}\\test\\functional\\sqlsrv.log -encoding UTF8;\n            Write-Host \"Showing the last 25 lines of the log file...\"\n            Get-Content ${env:APPVEYOR_BUILD_FOLDER}\\test\\functional\\sqlsrv.log -Tail 25;\n            .\\php.exe run-tests.php -P ${env:APPVEYOR_BUILD_FOLDER}\\test\\functional\\pdo_sqlsrv\\*.phpt | out-file -filePath ${env:APPVEYOR_BUILD_FOLDER}\\test\\functional\\pdo_sqlsrv.log -encoding UTF8;\n            Write-Host \"Showing the last 25 lines of the log file...\"\n            Get-Content ${env:APPVEYOR_BUILD_FOLDER}\\test\\functional\\pdo_sqlsrv.log -Tail 25;\n        }\n    - python %APPVEYOR_BUILD_FOLDER%\\test\\functional\\setup\\cleanup_dbs.py -dbname %SQLSRV_DBNAME%\n    - python %APPVEYOR_BUILD_FOLDER%\\test\\functional\\setup\\cleanup_dbs.py -dbname %PDOSQLSRV_DBNAME%\n    - cd %PHP_EXE_PATH%\n    - ps: $fileExists = Test-Path \"c:\\projects\\coverage.xml\"\n    - ps: >-\n        If ($fileExists -eq $true) {\n            cd c:\\projects\n            Write-Host \"Running coverage analysis...\";\n            Write-Host \"Showing the packages...\";\n            Select-String package .\\coverage.xml;\n            Invoke-WebRequest -Uri 'https://codecov.io/bash' -OutFile codecov.sh\n            bash codecov.sh -f \"coverage.xml\"\n            cd ${env:PHP_EXE_PATH}\n        }\n\nafter_test:\n    - cd %APPVEYOR_BUILD_FOLDER%\\test\\functional\\\n    - ps: ls *.log\n    - python output.py\n    - ps: $difffiles = Get-ChildItem sqlsrv\\*.diff\n    - ps: $outfiles = Get-ChildItem sqlsrv\\*.out\n    - ps: foreach($file in $difffiles){ls $file; more $file}\n    - ps: foreach($file in $outfiles){ls $file; more $file}\n    - ps: $diff2files = Get-ChildItem pdo_sqlsrv\\*.diff\n    - ps: $out2files = Get-ChildItem pdo_sqlsrv\\*.out\n    - ps: foreach($file in $diff2files){ls $file; more $file}\n    - ps: foreach($file in $out2files){ls $file; more $file}\n    - cd %APPVEYOR_BUILD_FOLDER%\\test\\functional\\\n    - ps: $xmlfiles = Get-ChildItem *.xml\n    - ps: foreach($file in $xmlfiles){(new-object net.webclient).UploadFile(\"https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)\", (Resolve-Path $file))}\n    - ps: >-\n        If ($difffiles -ne $null -Or $diff2files -ne $null) {\n            $host.SetShouldExit(1);\n            Write-Host \"Forcing build failure due to phpt unit test failure(s)\";\n        }\n\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 13.3505859375,
          "content": "# Add steps that build, run tests, deploy, and more:\r\n# https://aka.ms/yaml\r\n\r\nvariables:\r\n  server: 'localhost,1433'\r\n  host: 'sql1'\r\n  sqlsrv_db: 'sqlsrv_testdb'\r\n  pdo_sqlsrv_db: 'pdo_sqlsrv_testdb'\r\n  uid: 'sa'\r\n  pwd: 'Password456!'\r\n\r\ntrigger:\r\n- dev\r\n- fix/*\r\n\r\npr:\r\n- dev\r\n\r\njobs:\r\n- job: macOS\r\n  pool:\r\n    vmImage: 'macos-latest'\r\n  steps:\r\n  - checkout: self\r\n    clean: true\r\n    fetchDepth: 1\r\n\r\n  - task: UsePythonVersion@0\r\n    inputs:\r\n      versionSpec: '3.x'\r\n      architecture: 'x64'\r\n\r\n  - script: |\r\n      brew tap\r\n      brew tap homebrew/core\r\n      brew reinstall autoconf automake libtool\r\n      php -v\r\n    displayName: 'Install PHP prerequisites'\r\n\r\n  - script: |\r\n      echo ready to build extensions\r\n      cd $(Build.SourcesDirectory)/source\r\n      chmod a+x packagize.sh\r\n      ./packagize.sh\r\n\r\n      cd $(Build.SourcesDirectory)/source/sqlsrv\r\n      ls -al\r\n      phpize && ./configure && make && sudo make install\r\n      cp run-tests.php $(Build.SourcesDirectory)/test/functional/sqlsrv\r\n\r\n      cd $(Build.SourcesDirectory)/source/pdo_sqlsrv\r\n      ls -al\r\n      phpize && ./configure && make && sudo make install\r\n      cp run-tests.php $(Build.SourcesDirectory)/test/functional/pdo_sqlsrv\r\n\r\n      echo extension=pdo_sqlsrv.so >> `php --ini | grep \"Loaded Configuration File\" | sed -e \"s|.*:\\s*||\"`\r\n      echo extension=sqlsrv.so >> `php --ini | grep \"Loaded Configuration File\" | sed -e \"s|.*:\\s*||\"`\r\n\r\n      php --ri sqlsrv\r\n      php --ri pdo_sqlsrv\r\n    displayName: 'Build and install drivers'\r\n\r\n- job: Linux\r\n  variables:\r\n    phpver: 8.1\r\n  pool:\r\n    vmImage: 'ubuntu-20.04'\r\n  steps:\r\n  - checkout: self\r\n    clean: true\r\n    fetchDepth: 1\r\n\r\n  - task: UsePythonVersion@0\r\n    inputs:\r\n      versionSpec: '3.x'\r\n      architecture: 'x64'\r\n\r\n  - script: |\r\n      sudo update-alternatives --set php /usr/bin/php$(phpver)\r\n      sudo update-alternatives --set phpize /usr/bin/phpize$(phpver)\r\n      sudo update-alternatives --set phar /usr/bin/phar$(phpver)\r\n      sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpver)\r\n      sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpver)\r\n      sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpver)\r\n      sudo update-alternatives --set php-config /usr/bin/php-config$(phpver)\r\n      sudo phpdismod xdebug\r\n      php -version\r\n    displayName: 'Use PHP version $(phpver)'\r\n\r\n  - script: |\r\n      echo install ODBC and dependencies\r\n      sudo apt-get purge unixodbc\r\n      sudo apt autoremove\r\n      sudo curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -\r\n      curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list > mssql-release.list\r\n      sudo mv mssql-release.list /etc/apt/sources.list.d/\r\n      sudo apt-get update\r\n      sudo ACCEPT_EULA=Y apt-get install msodbcsql17 mssql-tools\r\n      echo 'export PATH=\"$PATH:/opt/mssql-tools/bin\"' >> ~/.bash_profile\r\n      echo 'export PATH=\"$PATH:/opt/mssql-tools/bin\"' >> ~/.bashrc\r\n      source ~/.bashrc\r\n      sudo apt-get install unixodbc-dev\r\n      odbcinst --j\r\n      odbcinst -q -d -n \"ODBC Driver 17 for SQL Server\"\r\n    displayName: 'Install prerequisites'\r\n\r\n  - script: |\r\n      python -m pip install --upgrade pip\r\n      python -m pip install --upgrade requests\r\n      python -m pip install PyYAML\r\n      python -m pip install cpp-coveralls\r\n    displayName: 'Install coveralls (upgrade both pip and requests first)'\r\n\r\n  - script: |\r\n      docker pull mcr.microsoft.com/mssql/server:2019-latest\r\n      docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=$(pwd)' -p 1433:1433 -h $(host) --name=$(host) -d mcr.microsoft.com/mssql/server:2019-latest\r\n      docker ps -a\r\n      sleep 10\r\n      docker exec -t $(host) /opt/mssql-tools/bin/sqlcmd -S $(server) -U $(uid) -P $(pwd) -Q 'select @@Version'\r\n    displayName: 'Run SQL Server for Linux'\r\n\r\n  - script: |\r\n      sudo sed -i 's/# en_US ISO-8859-1/en_US ISO-8859-1/g' /etc/locale.gen\r\n      sudo sed -i 's/# fr_FR@euro ISO-8859-15/fr_FR@euro ISO-8859-15/g' /etc/locale.gen\r\n      sudo sed -i 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen\r\n      sudo sed -i 's/# de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/g' /etc/locale.gen\r\n      sudo sed -i 's/# zh_CN GB2312/zh_CN GB2312/g' /etc/locale.gen\r\n      sudo sed -i 's/# zh_CN.GB18030 GB18030/zh_CN.GB18030 GB18030/g' /etc/locale.gen\r\n      sudo locale-gen\r\n      export LANG='en_US.UTF-8'\r\n      export LANGUAGE='en_US:en'\r\n      export LC_ALL='en_US.UTF-8'\r\n    displayName: 'Generate locales for testing'\r\n\r\n  - script: |\r\n      echo setting env variables\r\n      export TEST_PHP_SQL_SERVER='$(server)'\r\n      export TEST_PHP_SQL_UID='$(uid)'\r\n      export TEST_PHP_SQL_PWD='$(pwd)'\r\n\r\n      cd $(Build.SourcesDirectory)/test/functional/setup\r\n      python ./setup_dbs.py -dbname $(sqlsrv_db)\r\n      python ./setup_dbs.py -dbname $(pdo_sqlsrv_db)\r\n    displayName: 'Set up test databases'\r\n\r\n  - script: |\r\n      echo ready to build extensions\r\n      sudo apt-get install -y php$(phpver)-intl\r\n      cd $(Build.SourcesDirectory)/source\r\n      chmod a+x packagize.sh\r\n      ./packagize.sh\r\n\r\n      dest=`php --ini | grep \"Scan for additional .ini files\" | sudo sed -e \"s|.*:\\s*||\"`/\r\n\r\n      cd $(Build.SourcesDirectory)/source/sqlsrv\r\n      ls -al\r\n      phpize && ./configure LDFLAGS=\"-lgcov\" CXXFLAGS=\"-O0 --coverage\" && make && sudo make install\r\n      cp run-tests.php $(Build.SourcesDirectory)/test/functional/sqlsrv\r\n      echo extension=sqlsrv.so >> 20-sqlsrv.ini\r\n\r\n      echo copying sqlsrv to $dest\r\n      sudo cp 20-sqlsrv.ini $dest\r\n\r\n      cd $(Build.SourcesDirectory)/source/pdo_sqlsrv\r\n      ls -al\r\n      phpize && ./configure LDFLAGS=\"-lgcov\" CXXFLAGS=\"-O0 --coverage\" && make && sudo make install\r\n      cp run-tests.php $(Build.SourcesDirectory)/test/functional/pdo_sqlsrv\r\n      echo extension=pdo_sqlsrv.so >> 30-pdo_sqlsrv.ini\r\n\r\n      echo copying pdo_sqlsrv to $dest\r\n      sudo cp 30-pdo_sqlsrv.ini $dest\r\n\r\n      sudo touch $dest/99-overrides.ini\r\n      sudo chmod 666 $dest/99-overrides.ini\r\n\r\n      php --ri sqlsrv\r\n      php --ri pdo_sqlsrv\r\n    displayName: 'Build and install drivers'\r\n\r\n  - script: |\r\n      cd $(Build.SourcesDirectory)/test/functional/sqlsrv\r\n      sed -i -e 's/TARGET_SERVER/'\"$(server)\"'/g' MsSetup.inc\r\n      sed -i -e 's/TARGET_DATABASE/'\"$(sqlsrv_db)\"'/g' MsSetup.inc\r\n      sed -i -e 's/TARGET_USERNAME/'\"$(uid)\"'/g' MsSetup.inc\r\n      sed -i -e 's/TARGET_PASSWORD/'\"$(pwd)\"'/g' MsSetup.inc\r\n\r\n      export LC_ALL='en_US.UTF-8'\r\n      php run-tests.php -P ./*.phpt --no-color --show-diff 2>&1 | tee ../sqlsrv.log\r\n    displayName: 'Run sqlsrv functional tests'\r\n\r\n  - script: |\r\n      cd $(Build.SourcesDirectory)/test/functional/pdo_sqlsrv\r\n      sed -i -e 's/TARGET_SERVER/'\"$(server)\"'/g' MsSetup.inc\r\n      sed -i -e 's/TARGET_DATABASE/'\"$(pdo_sqlsrv_db)\"'/g' MsSetup.inc\r\n      sed -i -e 's/TARGET_USERNAME/'\"$(uid)\"'/g' MsSetup.inc\r\n      sed -i -e 's/TARGET_PASSWORD/'\"$(pwd)\"'/g' MsSetup.inc\r\n\r\n      export LC_ALL='en_US.UTF-8'\r\n      php run-tests.php -P ./*.phpt --no-color --show-diff 2>&1 | tee ../pdo_sqlsrv.log\r\n    displayName: 'Run pdo_sqlsrv functional tests'\r\n\r\n  - script: |\r\n      cd $(Build.SourcesDirectory)\r\n      echo -e \"service_name: Azure Pipelines\\n\" > .coveralls.yml\r\n      coveralls -i ./source/ -e ./source/shared/ -e ./test/ -e ./source/pdo_sqlsrv/shared/core_stream.cpp \\\r\n        -E r'.*localization*' -E r'.*globalization*' --gcov-options '\\-lp'\r\n    displayName: 'Invoke coveralls using repo token'\r\n    condition: false\r\n    env:\r\n      COVERALLS_REPO_TOKEN: $(repo_token)\r\n      TRAVIS_JOB_ID: $(Build.BuildId)\r\n      TRAVIS_BRANCH: $(Build.SourceBranchName)\r\n      PYTHONWARNINGS: ignore::yaml.YAMLLoadWarning\r\n     \r\n  - script: |\r\n      docker logs -t $(host)\r\n      cd $(Build.SourcesDirectory)/test/functional/\r\n      for f in sqlsrv/*.diff; do ls $f 2>/dev/null; cat $f 2>/dev/null; echo ''; done || true\r\n      for f in pdo_sqlsrv/*.diff; do ls $f 2>/dev/null; cat $f 2>/dev/null; echo ''; done || true\r\n      python output.py\r\n      ls -l *.xml\r\n    displayName: 'Processing test results'\r\n\r\n  - task: PublishTestResults@2\r\n    inputs:\r\n      testResultsFormat: 'JUnit'\r\n      testResultsFiles: '*.xml'\r\n      failTaskOnFailedTests: true\r\n      searchFolder: '$(Build.SourcesDirectory)/test/functional/'\r\n\r\n  - script: |\r\n      docker stop $(host)\r\n      docker rm $(host)\r\n    displayName: 'Stop SQL Server for Linux'\r\n    condition: always()\r\n\r\n- job: Windows\r\n  variables:\r\n    phpVersion: 8.1\r\n  pool:\r\n    vmImage: 'windows-2019'\r\n  steps:\r\n  - checkout: self\r\n    clean: true\r\n    fetchDepth: 1\r\n\r\n  - task: UsePythonVersion@0\r\n    inputs:\r\n      versionSpec: '3.x'\r\n      architecture: 'x64'\r\n\r\n  - script: |\r\n      dir C:\\tools\\php\\php*\r\n      dir C:\\tools\\php\\ext\\\r\n      echo extension_dir=C:\\tools\\php\\ext >> C:\\tools\\php\\php.ini\r\n      php --ini\r\n      php -v\r\n    displayName: 'Check PHP'\r\n\r\n  - powershell: |\r\n      cd $(Build.SourcesDirectory)\\test\\functional\\sqlsrv\r\n      (Get-Content .\\MsSetup.inc) | ForEach-Object { $_ -replace \"TARGET_SERVER\", \"$(host)\" -replace \"TARGET_DATABASE\", \"$(sqlsrv_db)\" -replace \"TARGET_USERNAME\", \"$(uid)\" -replace \"TARGET_PASSWORD\", \"$(pwd)\" } | Set-Content .\\MsSetup.inc\r\n      Select-String $(host) .\\MsSetup.inc\r\n      Select-String $(sqlsrv_db) .\\MsSetup.inc\r\n      cd $(Build.SourcesDirectory)\\test\\functional\\pdo_sqlsrv\r\n      (Get-Content .\\MsSetup.inc) | ForEach-Object { $_ -replace \"TARGET_SERVER\", \"$(host)\" -replace \"TARGET_DATABASE\", \"$(pdo_sqlsrv_db)\" -replace \"TARGET_USERNAME\", \"$(uid)\" -replace \"TARGET_PASSWORD\", \"$(pwd)\" } | Set-Content .\\MsSetup.inc\r\n      Select-String $(host) .\\MsSetup.inc\r\n      Select-String $(pdo_sqlsrv_db) .\\MsSetup.inc\r\n    displayName: 'Update connection credentials'\r\n    condition: false\r\n\r\n  - powershell: |\r\n      $client = New-Object Net.WebClient\r\n      $client.DownloadFile('https://download.microsoft.com/download/a/e/b/aeb7d4ff-ca20-45db-86b8-8a8f774ce97b/en-US/17.8.1.1/x64/msodbcsql.msi', 'c:\\projects\\msodbcsql.msi')\r\n      $client.DownloadFile('https://download.microsoft.com/download/0/e/6/0e63d835-3513-45a0-9cf0-0bc75fb4269e/EN/x64/MsSqlCmdLnUtils.msi', 'MsSqlCmdLnUtils.msi')\r\n      dir *.msi\r\n    displayName: 'Download ODBC msi and sql tools msi'\r\n    condition: false\r\n\r\n  - script: |\r\n      msiexec /i \"msodbcsql.msi\" /q IACCEPTMSODBCSQLLICENSETERMS=YES ADDLOCAL=ALL\r\n      reg query \"HKLM\\SOFTWARE\\ODBC\\odbcinst.ini\\ODBC Driver 17 for SQL Server\"\r\n      dir %WINDIR%\\System32\\msodbcsql*.dll\r\n    displayName: 'Install ODBC driver'\r\n    condition: false\r\n\r\n  # FOR SOME REASON the set up did not set the PATH\r\n  - script: |\r\n      msiexec /i \"MsSqlCmdLnUtils.msi\" /qn IACCEPTMSSQLCMDLNUTILSLICENSETERMS=YES\r\n    displayName: 'Install SQL command line utilities version 15'\r\n    condition: false\r\n\r\n  - powershell: |\r\n      $client = New-Object Net.WebClient\r\n      $client.Headers.Add(\"user-agent\", \"azure pipeline build\")\r\n      $client.DownloadFile(\"http://windows.php.net/downloads/releases/releases.json\", \"releases.json\");\r\n      $jsondata = Get-Content -Path .\\releases.json | ConvertFrom-Json\r\n      $env:VERSION = $jsondata.{$(phpVersion)}.version\r\n      Write-Host \"Latest PHP $(phpVersion) is ${env:VERSION}\"\r\n      cd $(Build.SourcesDirectory)\\buildscripts\\\r\n      python builddrivers.py --PHPVER=${env:VERSION} --DRIVER=sqlsrv --ARCH=x64 --THREAD=nts --SOURCE=$(Build.SourcesDirectory)\\source --TESTING --NO_RENAME\r\n      dir *sqlsrv*.dll\r\n      python builddrivers.py --PHPVER=${env:VERSION} --DRIVER=pdo_sqlsrv --ARCH=x64 --THREAD=nts --SOURCE=$(Build.SourcesDirectory)\\source --TESTING --NO_RENAME\r\n      cp $(Build.SourcesDirectory)\\buildscripts\\php-sdk\\phpdev\\vs16\\x64\\php-${env:VERSION}-src\\run-tests.php $(Build.SourcesDirectory)\\test\\functional\\sqlsrv\r\n      cp $(Build.SourcesDirectory)\\buildscripts\\php-sdk\\phpdev\\vs16\\x64\\php-${env:VERSION}-src\\run-tests.php $(Build.SourcesDirectory)\\test\\functional\\pdo_sqlsrv\r\n      dir *sqlsrv*.dll\r\n      cp *sqlsrv*.dll C:\\tools\\php\\ext\\\r\n    displayName: 'Build drivers (separately) for the latest version of PHP $(phpVersion)'\r\n\r\n  - script: |\r\n      echo extension=php_sqlsrv.dll >> C:\\tools\\php\\php.ini\r\n      echo extension=php_pdo_sqlsrv.dll >> C:\\tools\\php\\php.ini\r\n      php --ri sqlsrv\r\n      php --ri pdo_sqlsrv\r\n    displayName: 'Load drivers'\r\n    condition: false\r\n\r\n  - script: |\r\n      docker pull microsoft/mssql-server-windows-developer\r\n      docker run -d --name sqlcontainer -h $(host) -p 1433:1433 -e sa_password=$(pwd) -e ACCEPT_EULA=Y microsoft/mssql-server-windows-developer\r\n      docker ps -a\r\n    displayName: 'Run SQL Server for Windows Server'\r\n    condition: false\r\n\r\n  - script: |\r\n      set path=C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\170\\Tools\\Binn\\;%path%\r\n      sqlcmd -S $(host) -U $(uid) -P $(pwd) -Q \"SELECT @@Version\"\r\n      set TEST_PHP_SQL_SERVER=$(host)\r\n      set TEST_PHP_SQL_UID=$(uid)\r\n      set TEST_PHP_SQL_PWD=$(pwd)\r\n      cd $(Build.SourcesDirectory)\\test\\functional\\setup\r\n      python setup_dbs.py -dbname $(sqlsrv_db)\r\n      python setup_dbs.py -dbname $(pdo_sqlsrv_db)\r\n    displayName: 'Set up test databases'\r\n    condition: false\r\n\r\n  - script: |\r\n      cd $(Build.SourcesDirectory)\\test\\functional\\sqlsrv\r\n      php run-tests.php -P sqlsrv_client_info.phpt\r\n      cd $(Build.SourcesDirectory)\\test\\functional\\pdo_sqlsrv\r\n      php run-tests.php -P pdo_getAttribute_clientInfo.phpt\r\n    displayName: 'Smoke testing'\r\n    condition: false\r\n\r\n  - script: |\r\n      docker stop sqlcontainer\r\n      docker rm sqlcontainer\r\n    displayName: 'Stop SQL Server for Windows Server'\r\n    condition: false\r\n"
        },
        {
          "name": "buildscripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.328125,
          "content": "codecov:\r\n  require_ci_to_pass: yes\r\n  max_report_age: off\r\n\r\ncoverage:\r\n  precision: 2\r\n  round: down\r\n  range: \"70...100\"\r\n\r\nparsers:\r\n  gcov:\r\n    branch_detection:\r\n      conditional: yes\r\n      loop: yes\r\n      method: no\r\n      macro: no\r\n\r\ncomment:\r\n  layout: \"reach,diff,flags,tree\"\r\n  behavior: default\r\n  require_changes: no\r\n"
        },
        {
          "name": "entrypoint.sh",
          "type": "blob",
          "size": 0.2353515625,
          "content": "set -e\n\ntestConnection=\"/opt/mssql-tools/bin/sqlcmd -S sql -U sa -P Password123\"\n\nfor run in {1..10}; do\n\n>&2 echo \"SQL Server is starting up..\"\nif $testConnection; then\n    >&2 echo \"SQL Server is up!\"\n    break;\nelse\n    sleep 6\nfi\ndone\n\n\n"
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "source",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}