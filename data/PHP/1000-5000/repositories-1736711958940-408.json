{
  "metadata": {
    "timestamp": 1736711958940,
    "page": 408,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nelmio/NelmioApiDocBundle",
      "stars": 2235,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".doctor-rst.yaml",
          "type": "blob",
          "size": 2.298828125,
          "content": "rules:\n    american_english: ~\n    avoid_repetetive_words: ~\n    blank_line_after_anchor: ~\n    blank_line_after_directive: ~\n    blank_line_before_directive: ~\n    composer_dev_option_not_at_the_end: ~\n    correct_code_block_directive_based_on_the_content: ~\n    deprecated_directive_should_have_version: ~\n    ensure_exactly_one_space_between_link_definition_and_link: ~\n    ensure_link_definition_contains_valid_url: ~\n    ensure_order_of_code_blocks_in_configuration_block: ~\n    extend_abstract_controller: ~\n    extension_xlf_instead_of_xliff: ~\n    indention: ~\n    lowercase_as_in_use_statements: ~\n    max_blank_lines:\n        max: 2\n    max_colons: ~\n    no_app_console: ~\n    no_blank_line_after_filepath_in_php_code_block: ~\n    no_blank_line_after_filepath_in_twig_code_block: ~\n    no_blank_line_after_filepath_in_xml_code_block: ~\n    no_blank_line_after_filepath_in_yaml_code_block: ~\n    no_brackets_in_method_directive: ~\n    no_composer_req: ~\n    no_directive_after_shorthand: ~\n    no_explicit_use_of_code_block_php: ~\n    no_inheritdoc: ~\n    no_namespace_after_use_statements: ~\n    no_php_open_tag_in_code_block_php_directive: ~\n    no_space_before_self_xml_closing_tag: ~\n    only_backslashes_in_namespace_in_php_code_block: ~\n    only_backslashes_in_use_statements_in_php_code_block: ~\n    ordered_use_statements: ~\n    php_prefix_before_bin_console: ~\n    replace_code_block_types: ~\n    replacement: ~\n    short_array_syntax: ~\n    space_between_label_and_link_in_doc: ~\n    space_between_label_and_link_in_ref: ~\n    string_replacement: ~\n    typo: ~\n    unused_links: ~\n    use_deprecated_directive_instead_of_versionadded: ~\n    use_https_xsd_urls: ~\n    valid_inline_highlighted_namespaces: ~\n    valid_use_statements: ~\n    versionadded_directive_should_have_version: ~\n    yaml_instead_of_yml_suffix: ~\n    yarn_dev_option_at_the_end: ~\n#    no_app_bundle: ~\n\n    #   master\n    versionadded_directive_major_version:\n        major_version: 6\n\n    versionadded_directive_min_version:\n        min_version: '6.0'\n\n    deprecated_directive_major_version:\n        major_version: 5\n\n    deprecated_directive_min_version:\n        min_version: '5.0'\n\n# do not report as violation\nwhitelist:\n    regex:\n        - '/``.yml``/'\n    lines:\n        - '.. code-block:: twig'\n        - '// bin/console'\n        - '.. code-block:: php'\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1435546875,
          "content": ".* export-ignore\n*.md export-ignore\ntests export-ignore\ndocs export-ignore\nphpunit export-ignore\nphpunit.xml.dist export-ignore\nutils export-ignore"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2626953125,
          "content": "/var/\n/vendor/\n/composer.phar\n/composer.lock\n/phpunit.xml\n/.phpunit\n/.phpunit.result.cache\n/Tests/Functional/cache\n/Tests/Functional/logs\n.idea\n/phpstan.neon\n\n###> friendsofphp/php-cs-fixer ###\n/.php-cs-fixer.php\n/.php-cs-fixer.cache\n###< friendsofphp/php-cs-fixer ###\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 0.5986328125,
          "content": "<?php\n\ndeclare(strict_types=1);\n\n$finder = (new PhpCsFixer\\Finder())\n    ->in(__DIR__)\n    ->exclude('var')\n    ->exclude('tests/Functional/cache');\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules([\n        '@Symfony' => true,\n        '@PHP84Migration' => true,\n        'header_comment' => [\n            'header' => <<<HEADER\nThis file is part of the NelmioApiDocBundle package.\n\n(c) Nelmio\n\nFor the full copyright and license information, please view the LICENSE\nfile that was distributed with this source code.\nHEADER\n        ],\n        'trailing_comma_in_multiline' => false,\n    ])\n    ->setFinder($finder);\n"
        },
        {
          "name": ".symfony.bundle.yaml",
          "type": "blob",
          "size": 0.1953125,
          "content": "branches: [\"2.x\", \"3.x\", \"master\"]\nmaintained_branches: [\"3.x\", \"master\"]\ncurrent_branch: \"master\"\ndev_branch: \"master\"\ndev_branch_alias: \"4.x\"\ndoc_dir: { \"3.x\": \"Resources/doc/\", \"master\": \"docs/\" }\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 8.6162109375,
          "content": "# CHANGELOG\n\n## 4.34.0\n* Changed minimum Symfony version for 7.x from 7.0 to 7.1\n\n## 4.33.6\n* Fixed Symfony 7.2 deprecation of tagged arguments\n\n## 4.33.5\n* Added new optional parameter `$context` to` PropertyDescriberInterface::supports()`\n\n## 4.33.4\n* Deprecated `null` type from `$options` in `Nelmio\\ApiDocBundle\\Attribute\\Model::__construct()`. Pass an empty array (`[]`) instead.\n* Deprecated `null` type from `$options` in `NNelmio\\ApiDocBundle\\Attribute\\Model::__construct()`. Pass an empty array (`[]`) instead.\n\n## 4.33.3\n* Bumped swagger-ui files from `5.18.1` to `5.18.2`\n* Bumped redoc files to `2.2.0`\n\n## 4.33.2\n* Fixed incorrect directory updated for swagger-ui files from version `4.33.2`\n\n## 4.33.1\n* Bumped swagger-ui files to `5.18.1`\n* Fixed explicitly set default values defined in `#[OA\\Property]` being overwritten\n\n## 4.33.0\n* Fixed custom JMS enum type handling\n* Added support for name based serialisation of JMS enums\n\n## 4.32.3\n\n* Deprecated `Nelmio\\ApiDocBundle\\Annotation` namespace in favor of `Nelmio\\ApiDocBundle\\Attribute` namespace in preparation for 5.x. Consider upgrading to the new attribute syntax.\n```diff \n- use Nelmio\\ApiDocBundle\\Annotation\\Areas;\n- use Nelmio\\ApiDocBundle\\Annotation\\Model;\n- use Nelmio\\ApiDocBundle\\Annotation\\Operation;\n- use Nelmio\\ApiDocBundle\\Annotation\\Security;\n\n+ use Nelmio\\ApiDocBundle\\Attribute\\Areas;\n+ use Nelmio\\ApiDocBundle\\Attribute\\Model;\n+ use Nelmio\\ApiDocBundle\\Attribute\\Operation;\n+ use Nelmio\\ApiDocBundle\\Attribute\\Security;\n```\n\n\n## 4.32.0\n\n* Added support to configure `options` and `serializationContext` via `nelmio_api_doc.models.names`.\n* Fixed `serializationContext` not being applied to nested models.\n\n## 4.31.0\n\n* Added support to opt out of JMS serializer usage per endpoint by setting `useJms` in the serializationContext.\n  ```php\n  #[OA\\Response(response: 200, content: new Model(type: UserDto::class, serializationContext: [\"useJms\" => false]))]\n  ```\n\n## 4.30.0\n* Create top level OpenApi Tag from Tags top level annotations/attributes\n\n## 4.25.3\n\n* Calling `DocumentationExtension::getExtendedType()` has been deprecated in favor of `DocumentationExtension::getExtendedTypes()` to align with the deprecation introduced with `symfony/symfony` version `4.2`.\n\n\n## 4.26.0\n\n* Add ability to configure UI through configuration\n```yaml\nnelmio_api_doc:\n  html_config:\n    assets_mode: bundle\n    redocly_config:\n      expandResponses: '200,201'\n      hideDownloadButton: true\n    swagger_ui_config:\n      deepLinking: true\n```\n\n## 4.25.0\n\n* Added support for [JMS @Discriminator](https://jmsyst.com/libs/serializer/master/reference/annotations#discriminator) annotation/attribute\n  ```php\n  #[\\JMS\\Serializer\\Annotation\\Discriminator(field: 'type', map: ['car' => Car::class, 'plane' => Plane::class])]\n  abstract class Vehicle { }\n  class Car extends Vehicle { }\n  class Plane extends Vehicle { }\n  ```\n\n## 4.24.0\n\n* Added support for some integer ranges (https://phpstan.org/writing-php-code/phpdoc-types#integer-ranges).  \n  Annotations attached to integer properties like:\n  ```php\n    /**\n     * @var int<6, 11>\n     * @var int<min, 11>\n     * @var int<6, max>\n     * @var positive-int\n     * @var negative-int\n     */\n  ```\n  will be interpreted as appropriate `minimum` and `maximum` properties in the generated OpenAPI specification.\n\n### Minor breaking change\nDropped support for PHP 7.2 and PHP 7.3. PHP 7.4 is the minimum required version now.\n\n## 4.23.0\n\n* Cache configuration option `nelmio_api_doc.cache.item_id` now automatically gets the area appended.\n  ```yml\n  nelmio_api_doc:\n      cache:\n          pool: app.cache\n          item_id: nelmio_api_doc.docs\n      areas:\n          default: \n              ...\n          area1:   \n              ...\n  ```\n  Result in cache keys: `nelmio_api_doc.docs.default` & `nelmio_api_doc.docs.area1` to be used respectively.\n* Added cache configuration option per area.\n  ```yml\n  nelmio_api_doc:\n      areas:\n          default: # Manual cache configuration\n              cache:\n                  pool: app.cache\n                  item_id: nelmio_api_doc.docs.default\n              ...\n          area1:   \n              cache:\n                  pool: app.cache\n                  item_id: nelmio_api_doc.docs.area1\n              ...\n  ```\n  Non-configured options will be inherited from `nelmio_api_doc.cache`.\n* Fixed vendor extensions (`x-*`) from configuration not being outputted in the generated specification.\n  ```yml\n  nelmio_api_doc:\n      documentation:\n          info:\n              title: 'My API'\n              description: 'My API description'\n              x-foo: 'bar'\n  ```\n  Now results in JSON specification:\n  ```json\n  {\n    ...\n    \"info\": {\n      \"title\": \"API\",\n      \"version\": \"1.0\",\n      \"x-foo\": \"bar\"\n    },\n    ...\n  }\n  ```\n* Updated nullable enum handling to align with the behaviour of other object types. It now uses wraps nullable enums with `oneOf` instead of `allOf`.\n\n## 4.22.0\n\n* Updated bundle directory structure to recommended file structure as described in https://symfony.com/doc/7.0/bundles/best_practices.html.\n\n  It might be necessary to reinstall the assets:\n  ```bash\n    bin/console assets:install\n  ```\n\n### Breaking change\nIf your codebase mentions a file or directory by path then an update to this path is necessary. For example to following configuration:\n```yaml\ndoc-api:\n    resource: \"@NelmioApiDocBundle/Resources/config/routing/swaggerui.xml\"\n    prefix: /api/doc\n```\nBecomes:\n```yaml\ndoc-api:\n    resource: \"@NelmioApiDocBundle/config/routing/swaggerui.xml\"\n    prefix: /api/doc\n```\n\n## 4.21.0\n\n* Added bundle configuration options `nelmio_api_doc.cache.pool` and `nelmio_api_doc.cache.item_id`.\n  ```yml\n  nelmio_api_doc:\n      cache:\n          pool: app.cache\n          item_id: nelmio_api_doc.docs\n  ```\n  \n## 4.20.0\n\n* Added Redocly as an alternative to Swagger UI. https://github.com/Redocly/redoc.\n* Added support for describing dictionary types in OpenAPI 3.0.\n\n## 4.17.0\n\n* Passing groups to `PropertyDescriberInterface::describe()` via the `$groups` parameter is deprecated, the parameter will get removed in a future version. Pass groups via `$context['groups']` instead.\n\n\n## 4.0.0\n\n* Added support of OpenAPI 3.0. The internals were completely reworked and this version introduces BC breaks.\n\n## 3.7.0\n\n\n* Added `@SerializedName` annotation support and name converters when using Symfony >= 4.2.\n* Removed pattern added from the Expression Violation message.\n* Added FOSRestBundle 3.x support\n* Added `@SWG` annotations support at methods level in models\n\n## 3.3.0\n\n\n* Usage of Google Fonts was removed. System fonts `serif` / `sans` will be used instead.\n  This can lead to a different look on different operating systems.\n  You can [re-add Google Fonts again manually by overriding the template](https://symfony.com/doc/current/bundles/NelmioApiDocBundle/faq.html#re-add-google-fonts).\n\n* The Twig template for the Swagger UI now contains blocks to make it easier to overwrite certain parts.\n  See the [official documentation](https://symfony.com/doc/current/bundles/NelmioApiDocBundle/customization.html) how to do this.\n\n## 3.2.0 (2018-03-24)\n\n* Add a documentation form extension. Use the ``documentation`` option to define how a form field is documented.\n* Allow references to config definitions in controllers.\n* Using `@Model` implicitly in `@SWG\\Schema`, `@SWG\\Items` and `@SWG\\Property` is deprecated. Use `ref=@Model()` instead.\n\n  Before:\n  ```php\n  /**\n   * This was considered as an array of models.\n   *\n   * @SWG\\Property(@Model(type=FooClass::class))\n   */\n  ```\n\n  After:\n  ```php\n  /**\n   * For an individual object:\n   * @SWG\\Property(ref=@Model(type=FooClass::class))\n   *\n   * For an array:\n   * @SWG\\Property(type=\"array\", @SWG\\Items(ref=@Model(type=FooClass::class)))\n   */\n  ```\n\nConfig\n* `nelmio_api_doc.areas` added support to filter by host patterns.\n\n  ```yml\n  nelmio_api_doc:\n      areas: [ host_patterns: [ ^api\\. ] ]\n  ```\n\n* Added dependency for \"symfony/options-resolver:^3.4.4|^4.0\"\n\n## 3.1.0 (2018-01-28)\n\n* Added Symfony Validator constraints support\n\nSymfony Forms\n* Support for boolean checkbox\n* Support for integer\n\nJMS Serializer\n* Support JMS `int` (alias for `integer`)\n* Also process phpdoc annotations\n\nSwaggerPHP\n* Handle `enum` and `default` properties from SwaggerPHP annotation\n* Support `@Security` annotations\n\nConfig\n* `nelmio_api_doc.routes` has been replaced by `nelmio_api_doc.areas`. Please update your config accordingly.\n\n  Before:\n  ```yml\n  nelmio_api_doc:\n      routes: [ path_patterns: [ /api ] ]\n  ```\n\n  After:\n  ```yml\n  nelmio_api_doc:\n      areas: [ path_patterns: [ /api ] ]\n  ```\n\n## 3.0.0 (2017-12-10)\n\nLarge refactoring introducing `zircote/swagger-php` for swagger annotations.\n\nSee UPGRADE-3.0.md for upgrading instructions.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.4375,
          "content": "# Contributing\n\nFirst of all, **thank you** for contributing, **you are awesome**! With your contribution, you not only improve this\nbundle, but also become part of a [great community](https://github.com/nelmio/NelmioApiDocBundle/graphs/contributors)\nmaintaining it.\n\n## Guidelines\n\nHere are a few guidelines to follow in order to ease code reviews, and discussions before maintainers can accept and\nmerge your work. Thank you!\n\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\",\n\"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in\n[RFC 2119](https://datatracker.ietf.org/doc/html/rfc2119).\n\n### Code Style\n\nCode MUST adhere to all rules outlined in the\n[Symfony Coding Standards](https://symfony.com/doc/current/contributing/code/standards.html) as\ndefined by the [@Symfony](https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/blob/master/doc/ruleSets/Symfony.rst) rule set,\nutilized by the [PHP-CS-Fixer](https://cs.symfony.com) tool.\n\nYou SHOULD run `composer run phpcs-check` to check for any violations. You SHOULD run `composer run phpcs-fix` to\nfix any potential issues.\n\n### Code Quality\n\nYou MUST use the static analysis tool [PHPStan](https://phpstan.org/) to analyse any newly added or revised code within\nthis bundle.\n\nYou MUST run `composer run phpstan` to check for any violations. You MUST fix all violations related to any newly added\nor revised code.\n\n### Tests\n\nYou MUST write (or update) unit and/or functional tests for any newly added or revised functionality within this bundle.\n\nYou MUST validate newly added or revised tests by running `composer run phpunit`.\n\n### Documentation\n\nYou SHOULD write (or update) documentation.\n\nYou SHOULD write\n[commit messages that make sense](https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html).\n\n### Pull requests\n\nYou MUST [rebase your branch](https://git-scm.com/book/en/v2/Git-Branching-Rebasing) before submitting your pull request.\n\nYou MUST use a pull request title compliant with the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) specification.\n\nYou MUST write a meaningful description which gives the context and/or explains why you\nare creating the pull request.\n\nYou SHOULD resolve review comments instead of commenting.\n<sub>Once you've done the work, resolve the conversation by selecting the Resolve conversation button in the PR overview. Avoid posting comments like \"I've done the work\", or \"Done\".</sub>"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Nelmio\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.7568359375,
          "content": "NelmioApiDocBundle\n==================\n\n[![Build Status](https://img.shields.io/github/actions/workflow/status/nelmio/NelmioApiDocBundle/continuous-integration.yml?branch=master&style=flat-square)](https://github.com/nelmio/NelmioApiDocBundle/actions?query=workflow:CI) \n[![Total Downloads](https://poser.pugx.org/nelmio/api-doc-bundle/downloads)](https://packagist.org/packages/nelmio/api-doc-bundle)\n[![Latest Stable\nVersion](https://poser.pugx.org/nelmio/api-doc-bundle/v/stable)](https://packagist.org/packages/nelmio/api-doc-bundle)\n\nThe **NelmioApiDocBundle** bundle allows you to generate a decent documentation\nfor your APIs.\n\n## Migrate from 3.x to 4.0\n\n[To migrate from 3.x to 4.0, follow our guide.](https://github.com/nelmio/NelmioApiDocBundle/blob/master/UPGRADE-4.0.md)\n\nVersion 4.0 brings OpenAPI 3.0 support. If you want to stick to Swagger 2.0, you should use the version 3 of this bundle.\n\n## Migrate from 2.x to 3.0\n\n[To migrate from 2.x to 3.0, follow our guide.](https://github.com/nelmio/NelmioApiDocBundle/blob/master/UPGRADE-3.0.md)\n\n## Installation\n\nOpen a command console, enter your project directory and execute the following command to download the latest version of this bundle:\n\n```\ncomposer require nelmio/api-doc-bundle\n```\n\n## Documentation\n\n[Read the documentation on symfony.com](https://symfony.com/doc/current/bundles/NelmioApiDocBundle/index.html)\n\n## Contributing\n\nSee\n[CONTRIBUTING](https://github.com/nelmio/NelmioApiDocBundle/blob/master/CONTRIBUTING.md)\nfile.\n\n## Running the Tests\n\nInstall the [Composer](http://getcomposer.org/) dependencies:\n\n    git clone https://github.com/nelmio/NelmioApiDocBundle.git\n    cd NelmioApiDocBundle\n    composer update\n\nThen run the test suite:\n\n    ./phpunit\n\n## License\n\nThis bundle is released under the MIT license.\n"
        },
        {
          "name": "UPGRADE-3.0.md",
          "type": "blob",
          "size": 10.0341796875,
          "content": "Upgrading From 2.x To 3.0\n=========================\n\nIn 3.0 we did major changes. The biggest is the removal of the `@ApiDoc`\nannotation. To help you migrate to 3.0, we created this guide.\n\nThanks to a command created by @dbu, it should not take too long.\n\nStep 1: Migrate to Swagger-PHP commands\n---------------------------------------\n\nFirst, copy this command in ``src/AppBundle/Command/SwaggerDocblockConvertCommand.php``:\n\n```php\n<?php\n\n// src/AppBundle/Command/SwaggerDocblockConvertCommand.php\nnamespace AppBundle\\Command;\n\nuse Nelmio\\ApiDocBundle\\Annotation\\ApiDoc;\nuse Symfony\\Bundle\\FrameworkBundle\\Command\\ContainerAwareCommand;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Converts ApiDoc annotations to Swagger-PHP annotations.\n *\n * @author David Buchmann <david@liip.ch>\n * @author Guilhem Niot <guilhem.niot@gmail.com>\n */\nclass SwaggerDocblockConvertCommand extends ContainerAwareCommand\n{\n    protected function configure()\n    {\n        $this\n            ->setDescription('')\n            ->setName('api:doc:convert')\n            ->addOption('views', null, InputOption::VALUE_OPTIONAL, 'Comma separated list of views to convert the documentation for', 'default')\n        ;\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $views = explode(',', $input->getOption('views'));\n\n        if (!$this->getContainer()->has('nelmio_api_doc.extractor.api_doc_extractor')) {\n            if (!$this->getContainer()->has('nelmio_api_doc.controller.swagger_ui')) {\n                throw new \\RuntimeException('NelmioApiDocBundle is not installed. Please run `composer require nelmio/api-doc-bundle`.');\n            } else {\n                throw new \\RuntimeException('This command only works with NelmioApiDocBundle 2.x installed while version 3.x is currently installed. Please downgrade to 2.x to execute this command and bump your constraint only after its execution.');                      \n            }\n        }\n\n        $extractor = $this->getContainer()->get('nelmio_api_doc.extractor.api_doc_extractor');\n\n        $apiDocs = [];\n        foreach ($views as $view) {\n            $apiDocs = array_merge($apiDocs, $extractor->extractAnnotations($extractor->getRoutes(), $view));\n        }\n\n        foreach ($apiDocs as $annotation) {\n            /** @var ApiDoc $apiDoc */\n            $apiDoc = $annotation['annotation'];\n\n            $refl = $extractor->getReflectionMethod($apiDoc->getRoute()->getDefault('_controller'));\n\n            $this->rewriteClass($refl->getFileName(), $refl, $apiDoc);\n        }\n    }\n\n    /**\n     * Rewrite class with correct apidoc.\n     */\n    private function rewriteClass(string $path, \\ReflectionMethod $method, ApiDoc $apiDoc)\n    {\n        echo \"Processing $path::{$method->name}\\n\";\n        $code = file_get_contents($path);\n        $old = $this->locateNelmioAnnotation($code, $method->name);\n\n        $code = substr_replace($code, $this->renderSwaggerAnnotation($apiDoc, $method), $old['start'], $old['length']);\n        $code = str_replace('use Nelmio\\ApiDocBundle\\Annotation\\ApiDoc;', \"use Nelmio\\ApiDocBundle\\Annotation\\Operation;\\nuse Nelmio\\ApiDocBundle\\Annotation\\Model;\\nuse Swagger\\Annotations as SWG;\", $code);\n\n        file_put_contents($path, $code);\n    }\n\n    private function renderSwaggerAnnotation(ApiDoc $apiDoc, \\ReflectionMethod $method): string\n    {\n        $info = $apiDoc->toArray();\n        if ($apiDoc->getResource()) {\n            throw new \\RuntimeException('implement me');\n        }\n        $path = str_replace('.{_format}', '', $apiDoc->getRoute()->getPath());\n\n        $annotation = '@Operation(\n     *     tags={\"'.$apiDoc->getSection().'\"},\n     *     summary=\"'.$this->escapeQuotes($apiDoc->getDescription()).'\"';\n\n        foreach ($apiDoc->getFilters() as $name => $parameter) {\n            $description = array_key_exists('description', $parameter) && null !== $parameter['description']\n                ? $this->escapeQuotes($parameter['description'])\n                : 'todo';\n\n            $annotation .= ',\n     *     @SWG\\Parameter(\n     *         name=\"'.$name.'\",\n     *         in=\"query\",\n     *         description=\"'.$description.'\",\n     *         required='.(array_key_exists($name, $apiDoc->getRequirements()) ? 'true' : 'false').',\n     *         type=\"'.$this->determineDataType($parameter).'\"\n     *     )';\n        }\n\n        // Put parameters for POST requests into formData, as Swagger cannot handle more than one body parameter\n        $in = 'POST' === $apiDoc->getMethod()\n            ? 'formData'\n            : 'body';\n\n        foreach ($apiDoc->getParameters() as $name => $parameter) {\n            $description = array_key_exists('description', $parameter)\n                ? $this->escapeQuotes($parameter['description'])\n                : 'todo';\n\n            $annotation .= ',\n     *     @SWG\\Parameter(\n     *         name=\"'.$name.'\",\n     *         in=\"'.$in.'\",\n     *         description=\"'.$description.'\",\n     *         required='.(array_key_exists($name, $apiDoc->getRequirements()) ? 'true' : 'false');\n\n            if ('POST' !== $apiDoc->getMethod()) {\n                $annotation .= ',\n     *         @SWG\\Schema(type=\"'.$this->determineDataType($parameter).'\")';\n            } else {\n                $annotation .= ',\n     *         type=\"'.$this->determineDataType($parameter).'\"';\n            }\n\n            $annotation .= '\n     *     )';\n        }\n\n        if (array_key_exists('statusCodes', $info)) {\n            $responses = $info['statusCodes'];\n            foreach ($responses as $code => $description) {\n                $responses[$code] = reset($description);\n            }\n        } else {\n            $responses = [200 => 'Returned when successful'];\n        }\n\n        $responseMap = $apiDoc->getResponseMap();\n        foreach ($responses as $code => $description) {\n            $annotation .= \",\n     *     @SWG\\\\Response(\n     *         response=\\\"$code\\\",\n     *         description=\\\"{$this->escapeQuotes($description)}\\\"\";\n            if (200 === $code && isset($responseMap[$code]['class'])) {\n                $model = $responseMap[$code]['class'];\n                $annotation .= \",\n     *         @SWG\\\\Schema(ref=@Model(type=\\\"$model\\\"))\";\n            }\n            $annotation .= '\n     *     )';\n        }\n\n        $annotation .= '\n     * )\n     *';\n\n        return $annotation;\n    }\n\n    /**\n     * @return array with `start` position and `length`\n     */\n    private function locateNelmioAnnotation(string $code, string $methodName): array\n    {\n        $position = strpos($code, \"tion $methodName(\");\n        if (false === $position) {\n            throw new \\RuntimeException(\"Method $methodName not found in controller.\");\n        }\n\n        $docstart = strrpos(substr($code, 0, $position), '@ApiDoc');\n        if (false === $docstart) {\n            //If action is defined more than once. Should continue and don't throw exception\n            $docstart = strrpos(substr($code, 0, $position), '@Operation');\n            if (false === $docstart) {\n\n                throw new \\RuntimeException(\"Method $methodName has no @ApiDoc annotation around\\n\".substr($code, $position - 200, 150));\n            }\n        }\n        $docend = strpos($code, '* )', $docstart) + 3;\n\n        return [\n            'start' => $docstart,\n            'length' => $docend - $docstart,\n        ];\n    }\n\n    private function escapeQuotes(string $str = null): string\n    {\n        if ($str === null) {\n            return '';\n        }\n        $lines = [];\n        foreach (explode(\"\\n\", $str) as $line) {\n            $lines[] = trim($line, ' *');\n        }\n\n        return str_replace('\"', '\"\"', implode(' ', $lines));\n    }\n\n    private function determineDataType(array $parameter): string\n    {\n        $dataType = isset($parameter['dataType']) ? $parameter['dataType'] : 'string';\n        $transform = [\n            'float' => 'number',\n            'datetime' => 'string',\n        ];\n        if (array_key_exists($dataType, $transform)) {\n            $dataType = $transform[$dataType];\n        }\n\n        return $dataType;\n    }\n}\n```\n\nThen open a command console, enter your project directory and run:\n\n```\nphp bin/console api:doc:convert\n```\n\nYour annotations should all be converted.\n\nNote that this tool is here to help you but not all features are supported so\nmake sure the generated annotations still fit your needs.\n\nStep 2: Update your routing\n---------------------------\n\nWith NelmioApiDocBundle 2.x, you had to load the\n``@NelmioApiDocBundle/Resources/config/routing.yml`` file. In 3.0, it was renamed\nto ``@NelmioApiDocBundle/Resources/config/routing/swaggerui.xml``, so you have\nto update the ``NelmioApiDocBundle`` route to:\n\n```yml\n# app/config/routing.yml\nNelmioApiDocBundle:\n    resource: \"@NelmioApiDocBundle/Resources/config/routing/swaggerui.xml\"\n    prefix:   /api/doc\n```\n\nStep 3: Update your config\n--------------------------\n\n* ``nelmio_api_doc.name`` was replaced by ``nelmio_api_doc.documentation.info.title``.\n\n  Before:\n\n  ```yml\n  nelmio_api_doc:\n      name: My Awesome App!\n  ```\n\n  After:\n\n  ```yml\n  nelmio_api_doc:\n      documentation:\n          info:\n              title: My Awesome App!\n  ```\n\n* ``nelmio_api_doc.swagger.api_version`` was replaced by ``nelmio_api_doc.documentation.info.version``.\n\n* ``nelmio_api_doc.swagger.info.title`` was replaced by ``nelmio_api_doc.documentation.info.title``.\n\n* ``nelmio_api_doc.swagger.info.description`` was replaced by ``nelmio_api_doc.documentation.info.description``.\n\n* Other options were removed.\n\nStep 4: Update the bundle\n-------------------------\n\nChange the constraint of ``nelmio/api-doc-bundle`` in your ``composer.json`` file\nto ``^3.0``:\n\n```json\n{\n    \"require\": {\n        \"nelmio/api-doc-bundle\": \"^3.0\"\n    }\n}\n```\n\nThen update your dependencies:\n\n```\ncomposer update\n```\n\nStep 5: Review the changes\n--------------------------\n\nIt's almost finished!\n\nAs most of the changes were automated you should check that they did not break\nanything. Run your test suite, review, do whatever you think is useful before\npushing the changes.\n\nThen, commit the changes, push them, and enjoy!\n"
        },
        {
          "name": "UPGRADE-4.0.md",
          "type": "blob",
          "size": 2.4130859375,
          "content": "Upgrading From 3.x To 4.0\n=========================\n\nVersion 4 is a major change introducing OpenAPI 3.0 support, the rebranded swagger specification, which brings a set of new interesting features. Unfortunately this required a rework to a large part of the bundle, and introduces BC breaks.\n\nThe Visual guide to \"[What's new in 3.0 spec](https://blog.readme.com/an-example-filled-guide-to-swagger-3-2/)\" gives more information on OpenApi 3.0.\n\nVersion 4 does not support older versions of the specification. If you need to output swagger v2 documentation, you will need to use the latest 3.x release.\n\nThe Upgrade to Swagger 3.0\n--------------------------\n\nThe biggest part of the upgrade will most likely be the upgrade of the library `zircote/swagger-php` to `3.0` which introduces new annotations in order to support OpenAPI 3.0 but also changes\ntheir namespace from ``Swagger`` to ``OpenApi``.\n\nThey created a dedicated page to help you upgrade : https://github.com/zircote/swagger-php/blob/3.x/docs/Migrating-to-v3.md.\n\nHere are some additional advices that are more likely to apply to NelmioApiDocBundle users:\n\n- Upgrade all your ``use Swagger\\Annotations as SWG`` statements to ``use OpenApi\\Annotations as OA;`` (to simplify the upgrade you may also stick to the ``SWG`` aliasing).\n  In case you changed ``SWG`` to ``OA``, upgrade all your annotations from ``@SWG\\...`` to ``@OA\\...``.\n\n- Update your config in case you used inlined swagger documentation (the field ``nelmio_api_doc.documentation``). [A tool](https://openapi-converter.herokuapp.com/) is available to help you convert it.\n\n- In case you used ``@OA\\Response(..., @OA\\Schema(...))``, you should explicit your media type by using the annotation ``@OA\\JsonContent`` or ``@OA\\XmlContent`` instead of ``@OA\\Schema``:\n  ``@OA\\Response(..., @OA\\JsonContent(...))`` or ``@OA\\Response(..., @OA\\XmlContent(...))``.\n\n  When you use ``@Model`` directly (``@OA\\Response(..., @Model(...)))``), the media type is set by default to ``json``.\n\nBC Breaks\n---------\n\nThere are also BC breaks that were introduced in 4.0:\n\n- We migrated from `EXSyst\\Component\\Swagger\\Swagger` to `OpenApi\\Annotations\\OpenApi` to describe the api in all our describers signature (`DescriberInterface`, `RouteDescriberInterface`, `ModelDescriberInterface`, `PropertyDescriberInterface`).\n\n- `PropertyDescriberInterface` now takes several types as input to leverage compound types support in OpenApi 3.0 (`int|string` for instance).\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 4.662109375,
          "content": "{\n    \"name\": \"nelmio/api-doc-bundle\",\n    \"description\": \"Generates documentation for your REST API from annotations and attributes\",\n    \"keywords\": [\"api\", \"documentation\", \"doc\", \"rest\"],\n    \"type\": \"symfony-bundle\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://github.com/nelmio/NelmioApiDocBundle/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=7.4\",\n        \"ext-json\": \"*\",\n        \"phpdocumentor/reflection-docblock\": \"^4.3.4 || ^5.0\",\n        \"phpdocumentor/type-resolver\": \"^1.8.2\",\n        \"psr/cache\": \"^1.0 || ^2.0 || ^3.0\",\n        \"psr/container\": \"^1.0 || ^2.0\",\n        \"psr/log\": \"^1.0 || ^2.0 || ^3.0\",\n        \"symfony/config\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/console\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/dependency-injection\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/deprecation-contracts\": \"^2.1 || ^3\",\n        \"symfony/framework-bundle\": \"^5.4.24 || ^6.4 || ^7.1\",\n        \"symfony/http-foundation\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/http-kernel\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/options-resolver\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/property-info\": \"^5.4.10 || ^6.4 || ^7.1\",\n        \"symfony/routing\": \"^5.4 || ^6.4 || ^7.1\",\n        \"zircote/swagger-php\": \"^4.6.1\"\n    },\n    \"require-dev\": {\n        \"api-platform/core\": \"^2.7.0 || ^3\",\n        \"composer/package-versions-deprecated\": \"1.11.99.1\",\n        \"doctrine/annotations\": \"^2.0\",\n        \"friendsofphp/php-cs-fixer\": \"^3.52\",\n        \"friendsofsymfony/rest-bundle\": \"^2.8 || ^3.0\",\n        \"jms/serializer\": \"^1.14 || ^3.0\",\n        \"jms/serializer-bundle\": \"^2.3 || ^3.0 || ^4.0 || ^5.0\",\n        \"phpstan/phpstan\": \"^1.10\",\n        \"phpstan/phpstan-phpunit\": \"^1.3\",\n        \"phpstan/phpstan-strict-rules\": \"^1.5\",\n        \"phpstan/phpstan-symfony\": \"^1.3\",\n        \"phpunit/phpunit\": \"^9.6 || ^10.5\",\n        \"symfony/asset\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/browser-kit\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/cache\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/dom-crawler\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/expression-language\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/form\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/phpunit-bridge\": \"^6.4\",\n        \"symfony/property-access\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/security-csrf\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/serializer\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/stopwatch\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/templating\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/twig-bundle\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/uid\": \"^5.4 || ^6.4 || ^7.1\",\n        \"symfony/validator\": \"^5.4 || ^6.4 || ^7.1\",\n        \"willdurand/hateoas-bundle\": \"^1.0 || ^2.0\"\n    },\n    \"conflict\": {\n        \"zircote/swagger-php\": \"4.8.7\"\n    },\n    \"suggest\": {\n        \"api-platform/core\": \"For using an API oriented framework.\",\n        \"doctrine/annotations\": \"For using doctrine annotations\",\n        \"friendsofsymfony/rest-bundle\": \"For using the parameters annotations.\",\n        \"jms/serializer-bundle\": \"For describing your models.\",\n        \"symfony/asset\": \"For using the Swagger UI.\",\n        \"symfony/cache\": \"For using a PSR-6 compatible cache implementation with the API doc generator.\",\n        \"symfony/form\": \"For describing your form type models.\",\n        \"symfony/monolog-bundle\": \"For using a PSR-3 compatible logger implementation with the API PHP describer.\",\n        \"symfony/security-csrf\": \"For using csrf protection tokens in forms.\",\n        \"symfony/serializer\": \"For describing your models.\",\n        \"symfony/twig-bundle\": \"For using the Swagger UI.\",\n        \"symfony/validator\": \"For describing the validation constraints in your models.\",\n        \"willdurand/hateoas-bundle\": \"For extracting HATEOAS metadata.\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Nelmio\\\\ApiDocBundle\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Nelmio\\\\ApiDocBundle\\\\Tests\\\\\": \"tests/\"\n        }\n    },\n    \"config\": {\n        \"sort-packages\": true\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"4.x-dev\"\n        }\n    },\n    \"scripts-descriptions\": {\n        \"phpcs-check\": \"Run PHP-CS-Fixer in dry-run mode\",\n        \"phpcs-fix\": \"Run PHP-CS-Fixer\",\n        \"phpstan\": \"Run phpstan\",\n        \"phpstan-baseline\": \"Generate a baseline for phpstan\",\n        \"phpunit\": \"Run phpunit\"\n    },\n    \"scripts\": {\n        \"phpcs-check\": \"vendor/bin/php-cs-fixer check -v --diff\",\n        \"phpcs-fix\": \"vendor/bin/php-cs-fixer fix -v\",\n        \"phpstan\": \"phpstan --memory-limit=2G\",\n        \"phpstan-baseline\": \"phpstan --memory-limit=2G --generate-baseline\",\n        \"phpunit\": \"phpunit\"\n    }\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpstan-baseline.neon",
          "type": "blob",
          "size": 7.2587890625,
          "content": "parameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: \"#^Class Nelmio\\\\\\\\ApiDocBundle\\\\\\\\Annotation\\\\\\\\Areas extends @final class Nelmio\\\\\\\\ApiDocBundle\\\\\\\\Attribute\\\\\\\\Areas\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Annotation/Areas.php\n\n\t\t-\n\t\t\tmessage: \"#^Class Nelmio\\\\\\\\ApiDocBundle\\\\\\\\Annotation\\\\\\\\Model extends @final class Nelmio\\\\\\\\ApiDocBundle\\\\\\\\Attribute\\\\\\\\Model\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Annotation/Model.php\n\n\t\t-\n\t\t\tmessage: \"#^Class Nelmio\\\\\\\\ApiDocBundle\\\\\\\\Annotation\\\\\\\\Operation extends @final class Nelmio\\\\\\\\ApiDocBundle\\\\\\\\Attribute\\\\\\\\Operation\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Annotation/Operation.php\n\n\t\t-\n\t\t\tmessage: \"#^Class Nelmio\\\\\\\\ApiDocBundle\\\\\\\\Annotation\\\\\\\\Security extends @final class Nelmio\\\\\\\\ApiDocBundle\\\\\\\\Attribute\\\\\\\\Security\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Annotation/Security.php\n\n\t\t-\n\t\t\tmessage: \"#^Only booleans are allowed in an if condition, mixed given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Describer/ExternalDocDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\ArrayPropertyDescriber\\\\:\\\\:supports\\\\(\\\\) has parameter \\\\$context with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/ArrayPropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\PropertyDescriberInterface\\\\:\\\\:describe\\\\(\\\\) invoked with 5 parameters, 2\\\\-3 required\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/ArrayPropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\BooleanPropertyDescriber\\\\:\\\\:supports\\\\(\\\\) has parameter \\\\$context with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/BooleanPropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\CompoundPropertyDescriber\\\\:\\\\:supports\\\\(\\\\) has parameter \\\\$context with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/CompoundPropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\PropertyDescriberInterface\\\\:\\\\:describe\\\\(\\\\) invoked with 5 parameters, 2\\\\-3 required\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/CompoundPropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\DateTimePropertyDescriber\\\\:\\\\:supports\\\\(\\\\) has parameter \\\\$context with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/DateTimePropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\DictionaryPropertyDescriber\\\\:\\\\:supports\\\\(\\\\) has parameter \\\\$context with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/DictionaryPropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\PropertyDescriberInterface\\\\:\\\\:describe\\\\(\\\\) invoked with 5 parameters, 2\\\\-3 required\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/DictionaryPropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\FloatPropertyDescriber\\\\:\\\\:supports\\\\(\\\\) has parameter \\\\$context with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/FloatPropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\IntegerPropertyDescriber\\\\:\\\\:supports\\\\(\\\\) has parameter \\\\$context with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/IntegerPropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\NullablePropertyDescriber\\\\:\\\\:supports\\\\(\\\\) has parameter \\\\$context with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/NullablePropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\PropertyDescriberInterface\\\\:\\\\:describe\\\\(\\\\) invoked with 5 parameters, 2\\\\-3 required\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/NullablePropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\ObjectPropertyDescriber\\\\:\\\\:supports\\\\(\\\\) has parameter \\\\$context with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/ObjectPropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\PropertyDescriber\\\\:\\\\:supports\\\\(\\\\) has parameter \\\\$context with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/PropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\PropertyDescriberInterface\\\\:\\\\:describe\\\\(\\\\) invoked with 5 parameters, 2\\\\-3 required\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/PropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\PropertyDescriberInterface\\\\:\\\\:supports\\\\(\\\\) invoked with 2 parameters, 1 required\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/PropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^PHPDoc tag @param references unknown parameter\\\\: \\\\$context$#\"\n\t\t\tcount: 2\n\t\t\tpath: src/PropertyDescriber/PropertyDescriberInterface.php\n\n\t\t-\n\t\t\tmessage: \"#^PHPDoc tag @param references unknown parameter\\\\: \\\\$schema$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/PropertyDescriberInterface.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\PropertyDescriberInterface\\\\:\\\\:describe\\\\(\\\\) invoked with 5 parameters, 2\\\\-3 required\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/RequiredPropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\RequiredPropertyDescriber\\\\:\\\\:supports\\\\(\\\\) has parameter \\\\$context with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/RequiredPropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\StringPropertyDescriber\\\\:\\\\:supports\\\\(\\\\) has parameter \\\\$context with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/StringPropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\PropertyDescriber\\\\\\\\UuidPropertyDescriber\\\\:\\\\:supports\\\\(\\\\) has parameter \\\\$context with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/PropertyDescriber/UuidPropertyDescriber.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to method render\\\\(\\\\) on an unknown class Twig_Environment\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: src/Render/Html/HtmlOpenApiRenderer.php\n\n\t\t-\n\t\t\tmessage: \"#^Class Twig_Environment not found\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Render/Html/HtmlOpenApiRenderer.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\$twig of method Nelmio\\\\\\\\ApiDocBundle\\\\\\\\Render\\\\\\\\Html\\\\\\\\HtmlOpenApiRenderer\\\\:\\\\:__construct\\\\(\\\\) has invalid type Twig_Environment\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Render/Html/HtmlOpenApiRenderer.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Nelmio\\\\\\\\ApiDocBundle\\\\\\\\Render\\\\\\\\Html\\\\\\\\HtmlOpenApiRenderer\\\\:\\\\:\\\\$twig has unknown class Twig_Environment as its type\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Render/Html/HtmlOpenApiRenderer.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to function method_exists\\\\(\\\\) with 'Hateoas\\\\\\\\\\\\\\\\Configuration\\\\\\\\\\\\\\\\Embedded' and 'getType' will always evaluate to true\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Functional/BazingaFunctionalTest.php\n"
        },
        {
          "name": "phpstan.dist.neon",
          "type": "blob",
          "size": 1.251953125,
          "content": "includes:\n    - phpstan-baseline.neon\n    - vendor/phpstan/phpstan-phpunit/extension.neon\n    - vendor/phpstan/phpstan-phpunit/rules.neon\n    - vendor/phpstan/phpstan-symfony/extension.neon\n    - vendor/phpstan/phpstan-symfony/rules.neon\n    - vendor/phpstan/phpstan-strict-rules/rules.neon\n\nparameters:\n    level: 6\n    paths:\n        - src\n        - tests\n    excludePaths:\n        - tests/Functional/Entity/*\n        - tests/Functional/EntityExcluded/*\n        - tests/Functional/Controller/*\n        - tests/ModelDescriber/Annotations/Fixture/*\n    dynamicConstantNames:\n        - Symfony\\Component\\HttpKernel\\Kernel::VERSION\n        - Symfony\\Component\\HttpKernel\\Kernel::VERSION_ID\n        - Symfony\\Component\\HttpKernel\\Kernel::MAJOR_VERSION\n        - Symfony\\Component\\HttpKernel\\Kernel::MINOR_VERSION\n        - Symfony\\Component\\HttpKernel\\Kernel::RELEASE_VERSION\n    symfony:\n        consoleApplicationLoader: tests/console-application.php\n    strictRules:\n        noVariableVariables: false # Neccessary for swagger-php integration\n    universalObjectCratesClasses:\n        - OpenApi\\Context\n    treatPhpDocTypesAsCertain: false\n    checkGenericClassInNonGenericObjectType: false\n    ignoreErrors:\n        - '#^Property class@anonymous/tests/.* has no type specified.$#'\n"
        },
        {
          "name": "phpunit-ignore.txt",
          "type": "blob",
          "size": 1.0546875,
          "content": "# Ignoring deprecations from Nelmio\\ApiDocBundle 4.17.0\n/^Since nelmio\\/api-doc-bundle 4\\.17\\.0: Using the \\$groups parameter of \"Nelmio\\\\ApiDocBundle\\\\PropertyDescriber\\\\(PropertyDescriber|IntegerPropertyDescriber|NullablePropertyDescriber|StringPropertyDescriber|ObjectPropertyDescriber)::describe\\(\\)\" is deprecated/\n\n# Ignoring deprecations from Nelmio\\ApiDocBundle 4.32.3\n/^Since nelmio\\/api-doc-bundle 4\\.32\\.3: The \"Nelmio\\\\ApiDocBundle\\\\Annotation\\\\(Operation|Security|Areas|Model)\" class is deprecated and will be removed in 5\\.0\\. Use the \"\\\\Nelmio\\\\ApiDocBundle\\\\Attribute\\\\(Operation|Security|Areas|Model)\" attribute instead\\./\n\n# Ignoring deprecations from Nelmio\\ApiDocBundle 4.33.4\n/^Since nelmio\\/api-doc-bundle 4\\.33\\.4: Passing null to the \"\\$options\" argument of \"Nelmio\\\\ApiDocBundle\\\\Model\\\\Model\\:\\:\\_\\_construct\\(\\)\" is deprecated\\, pass an empty array instead\\./\n/^Since nelmio\\/api-doc-bundle 4\\.33\\.4: Passing null to the \"\\$options\" argument of \"Nelmio\\\\ApiDocBundle\\\\Attribute\\\\Model\\:\\:\\_\\_construct\\(\\)\" is deprecated\\, pass an empty array instead\\./"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 1.1513671875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!-- http://phpunit.de/manual/4.1/en/appendixes.configuration.html -->\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.6/phpunit.xsd\"\n         backupGlobals=\"false\"\n         colors=\"true\"\n         failOnWarning=\"true\"\n         failOnRisky=\"true\"\n         stopOnFailure=\"false\"\n         bootstrap=\"vendor/autoload.php\"\n         displayDetailsOnTestsThatTriggerWarnings=\"true\"\n>\n    <php>\n        <env name=\"SHELL_VERBOSITY\" value=\"-1\" />\n        <ini name=\"error_reporting\" value=\"-1\" />\n        <ini name=\"memory_limit\" value=\"512M\" />\n\n        <!-- add \"generateBaseline=true&amp;\" to the value to generate a new baseline. Keep in mind to clear the test cache before. -->\n        <env name=\"SYMFONY_DEPRECATIONS_HELPER\" value=\"ignoreFile=./phpunit-ignore.txt&amp;max[self]=0\" />\n    </php>\n\n    <testsuites>\n        <testsuite name=\"Project Test Suite\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n\n    <source>\n      <include>\n        <directory suffix=\".php\">src</directory>\n      </include>\n    </source>\n</phpunit>\n"
        },
        {
          "name": "public",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}