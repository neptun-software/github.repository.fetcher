{
  "metadata": {
    "timestamp": 1736712196101,
    "page": 881,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ash-jc-allen/short-url",
      "stars": 1294,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.04296875,
          "content": ".idea/\nvendor/\ncomposer.lock\n/.phpunit.cache"
        },
        {
          "name": ".styleci.yml",
          "type": "blob",
          "size": 0.0146484375,
          "content": "preset: laravel"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 12.353515625,
          "content": "# Changelog\n\n**v8.2.1 (released 2024-12-03):**\n\n- Removed `laravel/framework` dependency that was accidentally added. [7f3bc3b](https://github.com/ash-jc-allen/short-url/commit/7f3bc3b4beee87850f8172bd4ca3f86722910649)\n\n**v8.2.0 (released 2024-12-01):**\n\n- Added support for PHP 8.4. [#301](https://github.com/ash-jc-allen/short-url/pull/301)\n\n**v8.1.2 (released 2024-09-17):**\n\n- Fixed bug that threw an exception if the `short_url.id` column was returned as a string from the database. [#297](https://github.com/ash-jc-allen/short-url/pull/297)\n\n**v8.1.1 (released 2024-08-27):**\n\n- Fixed bug that threw an exception if the OS name could not be determined from the user agent. [#295](https://github.com/ash-jc-allen/short-url/pull/295)\n\n**v8.1.0 (released 2024-07-02):**\n\n- Added `allowable_url_schemes` config value to allow for custom URL schemes to be used when creating short URLs. [#287](https://github.com/ash-jc-allen/short-url/pull/287), [#288](https://github.com/ash-jc-allen/short-url/pull/288)\n\n**v8.0.1 (released 2024-06-14):**\n\n- Fixed bug that threw an exception when creating a new Short URL and Laravel is set to use `\\Carbon\\CarbonImmutable` dates. [#285](https://github.com/ash-jc-allen/short-url/pull/285)\n\n**v8.0.0 (released 2024-04-26):**\n\n- Switch from `jenssegers/agent` to `whichbrowser/parser` for user agent parsing. [#261](https://github.com/ash-jc-allen/short-url/pull/261), [#256](https://github.com/ash-jc-allen/short-url/pull/256)\n- Added property types and strict type-checking. [#265](https://github.com/ash-jc-allen/short-url/pull/265)\n- Added support for PHPUnit 11. [#268](https://github.com/ash-jc-allen/short-url/pull/268)\n- Added Pest architecture tests. [#274](https://github.com/ash-jc-allen/short-url/pull/274)\n- Switch to `ashallendesign/laravel-config-validator` to validate the package's config. [#278](https://github.com/ash-jc-allen/short-url/pull/278)\n- Dropped support for PHP 8.0. [#257](https://github.com/ash-jc-allen/short-url/pull/257)\n- Dropped support for Laravel 8 and 9. [#257](https://github.com/ash-jc-allen/short-url/pull/257)\n- Dropped support for PHPUnit 8 and 9. [#268](https://github.com/ash-jc-allen/short-url/pull/268)\n- Switched from \"nunomaduro/larastan\" to \"larastan/larastan\". [#267](https://github.com/ash-jc-allen/short-url/pull/267)\n- Removed the `date` property from the `ShortURL` and `ShortURLVisit` models. [#266](https://github.com/ash-jc-allen/short-url/pull/266)\n- Abstract the key generator out to use an interface. [#262](https://github.com/ash-jc-allen/short-url/pull/262)\n- Updated the facade to include all methods in the docblock. [#252](https://github.com/ash-jc-allen/short-url/pull/252)\n\nHuge thank you to [@stevebauman](https://github.com/stevebauman) and [@marzvrover](https://github.com/marzvrover) for their contributions in this release. I really appreciate it! ðŸš€\n\n**v7.10.0 (released 2024-03-19):**\n\n- Added support for nesbot/carbon 3.0. [#246](https://github.com/ash-jc-allen/short-url/pull/246)\n\n**v7.9.0 (released 2024-03-12):**\n\n- Added support for Laravel 11. [#239](https://github.com/ash-jc-allen/short-url/pull/239)\n- Only add the \"utf8mb4_bin\" collation if using MySQL. [#241](https://github.com/ash-jc-allen/short-url/pull/241)\n\n**v7.8.2 (released 2024-02-12):**\n- Fixed a bug in the `ShortURL` model that prevented a boolean field from being cast. [#234](https://github.com/ash-jc-allen/short-url/pull/234)\n- Added missing methods to the `ShortURL` facade's docblock. [#233](https://github.com/ash-jc-allen/short-url/pull/233)\n\n**v7.8.1 (released 2023-12-28):**\n- Fixed bug in a database migration that was using the wrong database connection. [#228](https://github.com/ash-jc-allen/short-url/pull/228)\n- Code style fixes. [#230](https://github.com/ash-jc-allen/short-url/pull/230)\n\n**v7.8.0 (released 2023-11-11):**\n- Added the ability to store custom database fields when creating short URLs. [#225](https://github.com/ash-jc-allen/short-url/pull/225)\n\n**v7.7.0 (released 2023-10-26):**\n- Added the ability to specify the database connection for the package's models. [#214](https://github.com/ash-jc-allen/short-url/pull/214)\n- Improve the query key generation performance. [#213](https://github.com/ash-jc-allen/short-url/pull/213)\n- Added PHP 8.3 CI tests. [#217](https://github.com/ash-jc-allen/short-url/pull/217)\n\n**v7.6.0 (released 2023-03-21):**\n- Added support for `hashids/hashids` v5.0. [#183](https://github.com/ash-jc-allen/short-url/pull/183)\n- Added the ability to pass a seed that can be used when generating the short URL key. [#185](https://github.com/ash-jc-allen/short-url/pull/185)\n\n**v7.5.1 (released 2023-02-01):**\n- Added missing date fields to the `casts` array on the models to support Laravel 10. [#181](https://github.com/ash-jc-allen/short-url/pull/181)\n\n**v7.5.0 (released 2023-01-28):**\n- Added the ability to override the domain of the default URL. [#173](https://github.com/ash-jc-allen/short-url/pull/173)\n\n**v7.4.0 (released 2023-01-11):**\n- Added support for Laravel 10. [3488417](https://github.com/ash-jc-allen/short-url/commit/348841713d87e8259fcddcc610c7d68e3c3caa42)\n- Added support for Larastan 2.0. [#169](https://github.com/ash-jc-allen/short-url/pull/169)\n\n**v7.3.0 (released 2022-10-17):**\n- Added model factories for the `ShortURL` and `ShortURLVisits` models. [#162](https://github.com/ash-jc-allen/short-url/pull/162)\n\n**v7.2.0 (released 2022-09-12):**\n- Added support for PHP 8.2. [#139](https://github.com/ash-jc-allen/short-url/pull/139)\n- Added support for using `when` when building short URLs. [#140](https://github.com/ash-jc-allen/short-url/pull/140)\n- Removed unused `URL` facade import. [#147](https://github.com/ash-jc-allen/short-url/pull/147)\n- Fixed bug that always resulted in a 404 if the `prefix` was set to `null`. [#149](https://github.com/ash-jc-allen/short-url/pull/149), [#158](https://github.com/ash-jc-allen/short-url/pull/158)\n\n**v7.1.0 (released 2022-08-03):**\n- Added `toArray` method to the `Builder` class. [#133](https://github.com/ash-jc-allen/short-url/pull/133)\n- Fixed `shortURL` relationship on the `ShortURLVisit` model. [#132](https://github.com/ash-jc-allen/short-url/pull/132)\n\n**v7.0.0 (released 2022-04-04):**\n- Added ability to remove the prefix from default short URLs. [#123](https://github.com/ash-jc-allen/short-url/pull/123)\n- Added ability to define middleware for the default short URL route. [#121](https://github.com/ash-jc-allen/short-url/pull/121)\n- Added ability to set the key generator on-the-fly. [#122](https://github.com/ash-jc-allen/short-url/pull/122)\n\n**v6.3.0 (released 2022-01-24):**\n- Added support for Laravel 9. [#116](https://github.com/ash-jc-allen/short-url/pull/116)\n\n**v6.2.0 (released 2021-11-26):**\n- Updated incorrectly set file permissions. [#104](https://github.com/ash-jc-allen/short-url/pull/104)\n- Updated GitHub Actions to run workflow with PHP 8.1. [#106](https://github.com/ash-jc-allen/short-url/pull/106)\n- Added support for PHPUnit ^9.0. [#101](https://github.com/ash-jc-allen/short-url/pull/101)\n- Added support for Larastan ^1.0. [#107](https://github.com/ash-jc-allen/short-url/pull/107)\n\n**v6.1.0 (released 2021-10-21):**\n- Added the ability to customise the default short URL prefix. [#100](https://github.com/ash-jc-allen/short-url/pull/100)\n\n**v6.0.0 (released 2021-10-21):**\n- Added the ability to forward query parameters to the destination URL. [#94](https://github.com/ash-jc-allen/short-url/pull/94)\n- Dropped support for Laravel 6, 7. [#96](https://github.com/ash-jc-allen/short-url/pull/96), [#98](https://github.com/ash-jc-allen/short-url/pull/98)\n- Dropped support for PHP 7.3, 7.4. [#85](https://github.com/ash-jc-allen/short-url/pull/85)\n\n**v5.2.0 (released 2021-09-21):**\n- Updated the migration for the `short_urls` table so that `url_key` is now unique and `destination_url` is now a TEXT field rather than varchar. [#80](https://github.com/ash-jc-allen/short-url/pull/80)\n- Added the ability to configure the alphabet used for generating keys with `hashids`. [#77](https://github.com/ash-jc-allen/short-url/pull/77)\n\n**v5.1.0 (released 2021-06-11):**\n- Migrated the CI tests to be run using GitHub Actions instead of Travis CI. [#67](https://github.com/ash-jc-allen/short-url/pull/67)\n\n**v5.0.0 (released 2021-04-18):**\n- Removed the automatic loading of the migrations and made it mandatory for them to be published. [#61](https://github.com/ash-jc-allen/short-url/pull/61)\n\n**v4.3.0 (released 2021-04-12):**\n- Updated the private fields in the ` Builder ` class to be protected. [#62](https://github.com/ash-jc-allen/short-url/pull/62)\n\n**v4.2.0 (released 2021-01-26):**\n- Added support for PHP 8. [#58](https://github.com/ash-jc-allen/short-url/pull/58)\n\n**v4.1.1 (released 2020-09-16):**\n- Updated the Travis CI config to run the tests on the correct Laravel versions. [#55](https://github.com/ash-jc-allen/short-url/pull/55)\n\n**4.1.0 (released 2020-09-08):**\n- Added support for Laravel 8. [#54](https://github.com/ash-jc-allen/short-url/pull/54)\n\n**4.0.0 (released 2020-07-07):**\n- Added a new config value that can be used to toggle the config validation. [#50](https://github.com/ash-jc-allen/short-url/pull/50)\n- Removed support for Laravel 5.8. [#51](https://github.com/ash-jc-allen/short-url/pull/51)\n- Removed the ``` ShortURLBuilder ``` facade that was deprecated in v3.0.0. [#52](https://github.com/ash-jc-allen/short-url/pull/52)\n- Documentation updates. [#48](https://github.com/ash-jc-allen/short-url/pull/48)\n\n**3.0.0 (released 2020-04-11):**\n- Added the functionality to set activation and deactivation times for the short URLs. [#46](https://github.com/ash-jc-allen/short-url/pull/46)\n- Deprecated the ``` ShortURLBuilder ``` facade in favour of a newer ``` ShortURL ``` facade. [#45](https://github.com/ash-jc-allen/short-url/pull/45)\n\n**2.3.1 (released 2020-03-11):**\n- Updated the documentation to mention that the BC Math or GMP PHP extensions are required. [#43](https://github.com/ash-jc-allen/short-url/pull/43)\n\n**2.3.0 (released 2020-03-05):**\n- Added support for Laravel 7. [#38](https://github.com/ash-jc-allen/short-url/pull/38)\n- Updated the asset publishing tags from ``` config ``` and ``` migrations ``` to ``` short-url-config ``` and \n``` short-url-migrations ```. [#39](https://github.com/ash-jc-allen/short-url/pull/39)\n\n**2.2.0 (released 2020-02-27):**\n- Added a default option to enforce HTTPS on destination URLs as a config option. [#36](https://github.com/ash-jc-allen/short-url/pull/36) \n\n**2.1.0 (released 2020-02-19):**\n- Added the key salt (used for generating random URL keys) as a config option. [#32](https://github.com/ash-jc-allen/short-url/pull/32)\n\n**2.0.0 (released 2020-02-14):**\n- Added the functionality to track a visitor's referer URL.\n- Added the functionality to track a user's device type.\n- Added the functionality to explicitly set the tracking options on for each specific short URL. Previously, the options\nwere set in the config and affected all new and existing short URLs.\n- Added the functionality to explicitly set the HTTP status code for the redirect.\n- Added a ``` ShortURLVisited``` event that is dispatched when the short URL is used.\n- Added the ``` trackingEnabled() ``` and ``` trackingFields() ``` helper methods to the ``` ShortURL ``` model.\n\n**1.2.1 (released 2020-01-13):**\n- Fixed a bug that allowed multiple visits to a single-use URL if the URL's visit tracking was disabled.\n[Pull Request #23](https://github.com/ash-jc-allen/short-url/pull/23)\n\n**1.2.0 (released 2020-01-03):**\n- Renamed the underlying facade class from ``` BuilderFacade ``` to ``` ShortURLBuilder ``` for consistency.\n\n    Note: This isn't\n    changing the name of the facade. It's just changing the underlying class name for if you want to use ``` use AshAllenDesign\\ShortURL\\Facades\\ShortURLBuilder; ```\n    rather than ``` use ShortURLBuilder; ```.\n\n- Added methods to the facade docblock. This will display the methods in the IDE's autocomplete.\n\n**1.1.0 (released 2020-01-03):**\n- Enforced a minimum length of 3 for the URL ``` key_length ``` that is specified in the config.\n- Included [hashids/hasids](https://github.com/vinkla/hashids) as a dependency. This is now used for generating the random, unique URL keys.\n- Updated documentation.\n\n**1.0.0 (released 2020-01-02):**\n- Release for production.\n- Added a ```ShortURLBuilder``` facade.\n- Refactored folder structure to meet standards.\n- Updated documentation (thanks [@NathanGiesbrecht](https://github.com/NathanGiesbrecht))\n- Updated tests and Travis CI configuration for PHP 7.4 testing.\n\n**0.0.1 (pre-release):**\n- Initial work and pre-release testing.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2019 Ashley Allen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 33.3583984375,
          "content": "<p align=\"center\">\n<img src=\"https://ashallendesign.co.uk/images/custom/short-url-logo.png\" width=\"400\">\n</p>\n\n<p align=\"center\">\n<a href=\"https://packagist.org/packages/ashallendesign/short-url\"><img src=\"https://img.shields.io/packagist/v/ashallendesign/short-url.svg?style=flat-square\" alt=\"Latest Version on Packagist\"></a>\n<a href=\"https://packagist.org/packages/ashallendesign/short-url\"><img src=\"https://img.shields.io/packagist/dt/ashallendesign/short-url.svg?style=flat-square\" alt=\"Total Downloads\"></a>\n<a href=\"https://packagist.org/packages/ashallendesign/short-url\"><img src=\"https://img.shields.io/packagist/php-v/ashallendesign/short-url?style=flat-square\" alt=\"PHP from Packagist\"></a>\n<a href=\"https://github.com/ash-jc-allen/short-url/blob/master/LICENSE\"><img src=\"https://img.shields.io/github/license/ash-jc-allen/short-url?style=flat-square\" alt=\"GitHub license\"></a>\n</p>\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Installation](#installation)\n    - [Requirements](#requirements)\n    - [Install the Package](#install-the-package)\n    - [Publish the Config and Migrations](#publish-the-config-and-migrations)\n    - [Migrate the Database](#migrate-the-database)\n- [Usage](#usage)\n    - [Building Shortened URLs](#building-shortened-urls)\n        - [Quick Start](#quick-start)\n        - [Custom Keys](#custom-keys)\n        - [Tracking Visitors](#tracking-visitors)\n            - [Enabling Tracking](#enabling-tracking)\n            - [Tracking IP Address](#tracking-ip-address)\n            - [Tracking Browser & Browser Version](#tracking-browser--browser-version)\n            - [Tracking Operating System & Operating System Version](#tracking-operating-system--operating-system-version)\n            - [Tracking Device Type](#tracking-device-type)\n            - [Tracking Referer URL](#tracking-referer-url)\n        - [Custom Short URL Fields](#custom-short-url-fields)\n        - [Single Use](#single-use)\n        - [Enforce HTTPS](#enforce-https)\n        - [Forwarding Query Parameters](#forwarding-query-parameters)\n        - [Redirect Status Code](#redirect-status-code)\n        - [Activation and Deactivation Times](#activation-and-deactivation-times)\n        - [Using a Custom Seed](#using-a-custom-seed)\n        - [Facade](#facade)\n        - [Conditionals](#conditionals)\n    - [Using the Shortened URLs](#using-the-shortened-urls)\n        - [Default Route and Controller](#default-route-and-controller)\n        - [Custom Route](#custom-route)\n    - [Tracking](#tracking)\n    - [Customisation](#customisation)\n        - [Disabling the Default Route](#disabling-the-default-route)\n        - [Default URL Key Length](#default-url-key-length)\n        - [Tracking Visits](#tracking-visits)\n            - [Default Tracking](#default-tracking)\n            - [Tracking Fields](#tracking-fields)\n        - [Config Validation](#config-validation)\n        - [Custom Database Connection](#custom-database-connection)\n        - [Specifying the Key Generator](#specifying-the-key-generator)\n        - [Specifying the User Agent Parser](#specifying-the-user-agent-parser)\n        - [Specifying the Allowed URL Schemes](#specifying-the-allowed-url-schemes)\n    - [Helper Methods](#helper-methods)\n        - [Visits](#visits)\n        - [Find by URL Key](#find-by-url-key)\n        - [Find by Destination URL](#find-by-destination-url)\n        - [Tracking Enabled](#tracking-enabled)\n        - [Tracked Fields](#tracked-fields)\n    - [Events](#events)\n        - [Short URL Visited](#short-url-visited)\n    - [Model Factories](#model-factories)\n- [Testing](#testing)\n- [Security](#security)\n- [Contribution](#contribution)\n- [Credits](#credits)\n- [Changelog](#changelog)\n- [Upgrading](#upgrading)\n- [License](#license)\n    \n## Overview\n\nA Laravel package that can be used for adding shortened URLs to your existing web app.\n\n## Installation\n\n### Requirements\nThe package has been developed and tested to work with the following minimum requirements:\n\n- PHP 8.0\n- Laravel 8.0\n\nShort URL requires either the [BC Math](https://secure.php.net/manual/en/book.bc.php) or [GMP](https://secure.php.net/manual/en/book.gmp.php) PHP extensions in order to work.\n\n### Install the Package\nYou can install the package via Composer:\n\n```bash\ncomposer require ashallendesign/short-url\n```\n\n### Publish the Config and Migrations\nYou can then publish the package's config file and database migrations by using the following command:\n```bash\nphp artisan vendor:publish --provider=\"AshAllenDesign\\ShortURL\\Providers\\ShortURLProvider\"\n```\n\n### Migrate the Database\nThis package contains two migrations that add two new tables to the database: ``` short_urls ``` and ``` short_url_visits ```. To run these migrations, simply run the following command:\n```bash\nphp artisan migrate\n```\n\n## Usage\n\n### Building Shortened URLs\n\n#### Quick Start\n\nThe quickest way to get started with creating a shortened URL is by using the snippet below. The `->make()` method\n returns a ShortURL model that you can grab the shortened URL from.\n\n```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n\n$shortURLObject = app(Builder::class)\n    ->destinationUrl('https://destination.com')\n    ->make();\n\n$shortURL = $shortURLObject->default_short_url;\n```\n\n#### Custom Keys\nBy default, the shortened URL that is generated will contain a random key. The key will be of the length that you define\nin the config files (defaults to 5 characters). Example: if a URL is ``` https://webapp.com/short/abc123 ```, the key is\n``` abc123 ```.\n\nYou may wish to define a custom key yourself for that URL that is more meaningful than a randomly generated one. You can\ndo this by using the ``` ->urlKey() ``` method. Example:\n\n```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n\n$shortURLObject = app(Builder::class)\n    ->destinationUrl('https://destination.com')\n    ->urlKey('custom-key')\n    ->make();\n\n$shortURL = $shortURLObject->default_short_url;\n\n// Short URL: https://webapp.com/short/custom-key\n```\n\nNote: All of the URL keys are unique, so you cannot use a key that already exists in the database for another shortened\nURL.\n\n#### Tracking Visitors\nYou may want to track some data about the visitors that have used the shortened URL. This can be useful for analytics.\nBy default, tracking is enabled and all of the available tracking fields are also enabled. You can toggle the default\noptions for the different parts of the tracking in the config file. Read further on in the [Customisation](#customisation)\nsection to see how to customise the default tracking behaviours.\n\nNote: Even if the tracking options (such as ``` track_ip_address ```) are enabled for a short URL, they won't be recorded\nunless the ``` track_visits ``` options is enabled. This can come in handy if you want to enable/disable tracking for a\nshort URL without needing to individually set each option.\n\n##### Enabling Tracking\n\nIf you want to override whether if tracking is enabled or not when creating a shortened URL, you can use the ``` ->trackVisits() ``` method.\nThis method accepts a boolean but defaults to ``` true ``` if a parameter is not passed.\n\nThe example below shows how to enable tracking for the URL and override the config variable:\n\n```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n\n$shortURLObject = app(Builder::class)\n    ->destinationUrl('https://destination.com')\n    ->trackVisits()\n    ->make();\n```\n\nThe example below shows how to disable tracking for the URL and override the default config variable:\n\n```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n\n$shortURLObject = app(Builder::class)\n    ->destinationUrl('https://destination.com')\n    ->trackVisits(false)\n    ->make();\n```\n\n##### Tracking IP Address\n\nIf you want to override whether if IP address tracking is enabled or not when creating a shortened URL, you can use the\n``` ->trackIPAddress() ``` method. This method accepts a boolean but defaults to ``` true ``` if a parameter is not passed.\n\nThe example below shows how to enable IP address tracking for the URL and override the default config variable:\n```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n\n$shortURLObject = app(Builder::class)\n    ->destinationUrl('https://destination.com')\n    ->trackVisits()\n    ->trackIPAddress()\n    ->make();\n```\n\n##### Tracking Browser & Browser Version\n\nIf you want to override whether if browser name and browser version tracking is enabled or not when creating a shortened\nURL, you can use the ``` ->trackBrowser() ``` and ``` ->trackBrowserVersion() ``` methods. This method accepts a boolean\nbut defaults to ``` true ``` if a parameter is not passed.\n\nThe example below shows how to enable browser name tracking for the URL and override the default config variable:\n```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n\n$shortURLObject = app(Builder::class)\n    ->destinationUrl('https://destination.com')\n    ->trackVisits()\n    ->trackBrowser()\n    ->make();\n```\n\nThe example below shows how to enable browser version tracking for the URL and override the default config variable:\n```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n\n$shortURLObject = app(Builder::class)\n    ->destinationUrl('https://destination.com')\n    ->trackVisits()\n    ->trackBrowserVersion()\n    ->make();\n```\n\n##### Tracking Operating System & Operating System Version\n\nIf you want to override whether if operating system name and operating system version tracking is enabled or not when\ncreating a shortened URL, you can use the ``` ->trackOperatingSystem() ``` and ``` ->trackOperatingSystemVersion() ```\nmethods. These methods accept a boolean but default to ``` true ``` if a parameter is not passed.\n\nThe example below shows how to enable operating system name tracking for the URL and override the default config variable:\n```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n\n$shortURLObject = app(Builder::class)\n    ->destinationUrl('https://destination.com')\n    ->trackVisits()\n    ->trackOperatingSystem()\n    ->make();\n```\n\nThe example below shows how to enable operating system version tracking for the URL and override the default config variable:\n```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n\n$shortURLObject = app(Builder::class)\n    ->destinationUrl('https://destination.com')\n    ->trackVisits()\n    ->trackOperatingSystemVersion()\n    ->make();\n```\n\n##### Tracking Device Type\n\nIf you want to override whether if device type tracking is enabled or not when creating a shortened URL, you can use the\n``` ->trackDeviceType() ``` method. This method accepts a boolean but defaults to ``` true ``` if a parameter is not passed.\n\nThe example below shows how to enable device type tracking for the URL and override the default config variable:\n```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n\n$shortURLObject = app(Builder::class)\n    ->destinationUrl('https://destination.com')\n    ->trackVisits()\n    ->trackDeviceType()\n    ->make();\n```\n\n##### Tracking Referer URL\n\nIf you want to override whether if referer URL tracking is enabled or not when creating a shortened URL, you can use the\n``` ->trackRefererURL() ``` method. This method accepts a boolean but defaults to ``` true ``` if a parameter is not passed.\n\nThe example below shows how to enable referer URL tracking for the URL and override the default config variable:\n```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n\n$shortURLObject = app(Builder::class)\n    ->destinationUrl('https://destination.com')\n    ->trackVisits()\n    ->trackRefererURL()\n    ->make();\n```\n\n#### Custom Short URL Fields\n\nThere may be times when you want to add your own custom fields to the ShortURL model and store them in the database. For example, you might want to associate the short URL with a tenant, organisation, user, etc.\n\nTo do this you can use the `beforeCreate` method when building your short URL. This method accepts a closure that receives the `AshAllenDesign\\ShortURL\\Models\\ShortURL` model instance before it's saved to your database.\n\nThe example below shows how to add a `tenant_id` field to the `AshAllenDesign\\ShortURL\\Models\\ShortURL` model:\n\n```php\nuse AshAllenDesign\\ShortURL\\Models\\ShortURL;\nuse AshAllenDesign\\ShortURL\\Facades\\ShortURL as ShortUrlBuilder;\n\n$tenantId = 123;\n\n$shortURL = ShortUrlBuilder::destinationUrl($url)\n    ->beforeCreate(function (ShortURL $model): void {\n        $model->tenant_id = $tenantId;\n    })\n    ->make();\n```\n\nPlease remember that to store custom fields in the database, you'll have to make sure those fields are added to the `short_urls` table. You can do this by creating a new migration that adds the fields to the table, or by updating the migrations that ship with this package.\n\n#### Single Use\nBy default, all of the shortened URLs can be visited for as long as you leave them available. However, you may want to\nonly allow access to a shortened URL once. Then any visitors who visit the URL after it has already been viewed will\nget a HTTP 404.\n\nTo create a single use shortened URL, you can use the ``` ->singleUse() ``` method.\n\nThe example below shows how to create a single use shortened URL:\n ```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n\n$shortURLObject = app(Builder::class)\n    ->destinationUrl('https://destination.com')\n    ->singleUse()\n    ->make();\n ```\n\n#### Enforce HTTPS\nWhen building a shortened URL, you might want to enforce that the visitor is redirected to the HTTPS version\nof the destination URL. This can be particularly useful if you're allowing your web app users to create their own shortened\nURLS.\n\nTo enforce HTTPS, you can use the ``` ->secure() ``` method when building the shortened URL.\n\nThe example below shows how to create a secure shortened URL:\n ```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n\n$shortURLObject = app(Builder::class)\n    ->destinationUrl('http://destination.com')\n    ->secure()\n    ->make();\n\n// Destination URL: https://destination.com\n ```\n\n#### Forwarding Query Parameters\nWhen building a short URL, you might want to forward the query parameters sent in the request to destination URL. By default, this functionality is disabled, but can be enabled by setting the `forward_query_params` config option to `true`.\n\nAlternatively, you can also use the `->forwardQueryParams()` method when building your shortened URL, as shown in the example below:\n\n ```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n\n$shortURLObject = app(Builder::class)\n    ->destinationUrl('http://destination.com?param1=test')\n    ->forwardQueryParams()\n    ->make();\n ```\n\nBased on the example above, assuming that the original short URL's `destination_url` was `https://destination.com`, making a request to `https://webapp.com/short/xxx?param1=abc&param2=def` would redirect to `https://destination.com?param1=test&param2=def`\n\n#### Redirect Status Code\n\nBy default, all short URLs are redirected with a ``` 301 ``` HTTP status code. But, this can be overridden when building\nthe shortened URL using the ``` ->redirectStatusCode() ``` method.\n\nThe example below shows how to create a shortened URL with a redirect HTTP status code of ``` 302 ```:\n\n```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n\n$shortURLObject = app(Builder::class)\n    ->destinationUrl('http://destination.com')\n    ->redirectStatusCode(302)\n    ->make();\n```\n\n#### Activation and Deactivation Times\n\nBy default, all short URLs that you create are active until you delete them. However, you may set activation and deactivation\ntimes for your URLs when you're creating them.\n\nDoing this can be useful for marketing campaigns. For example, you may want to launch a new URL for a marketing campaign on\na given date and then automatically deactivate that URL when the marketing campaign comes to an end.\n\nThe example below shows how to create a shortened URL that will be active from this time tomorrow onwards:\n\n ```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n\n$shortURLObject = app(Builder::class)\n    ->activateAt(\\Carbon\\Carbon::now()->addDay())\n    ->make();\n ```\n\nThe example below shows how to create a shortened URL that will be active from this time tomorrow onwards and then is\ndeactivated the day after:\n\n ```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n\n$shortURLObject = app(Builder::class)\n    ->activateAt(\\Carbon\\Carbon::now()->addDay())\n    ->deactivateAt(\\Carbon\\Carbon::now()->addDays(2))\n    ->make();\n ```\n\n#### Using a Custom Seed\n\nBy default, the package will use the ID of the last inserted short URL as the seed for generating a short URL's key. In some cases, you may want to use a custom seed instead. To do this, you can pass an integer to the `generateKeyUsing` method like so:\n\n ```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n\n$shortURLObject = app(Builder::class)\n    ->destinationUrl('https://destination.com')\n    ->generateKeyUsing(12345)\n    ->make();\n ```\n\n#### Facade\nIf you prefer to use facades in Laravel, you can choose to use the provided ``` ShortURL ``` facade instead of instantiating\nthe ``` Builder ``` class manually.\n\nThe example below shows an example of how you could use the facade to create a shortened URL:\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse ShortURL;\n\nclass Controller\n{\n    public function index()\n    {\n        $shortURLObject = ShortURL::destinationUrl('https://destination.com')->make();\n        ...\n    }\n}\n```\n\n#### Conditionals\n\nThe `Builder` class uses the `Illuminate\\Support\\Traits\\Conditionable` trait, so you can use the `when` and `unless` methods when building your short URLs.\n\nFor example, let's take this block of code that uses `if` when building the short URL:\n\n```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\n \n$builder = app(Builder::class)->destinationUrl('https://destination.com');\n\nif ($request->date('activation')) {\n    $builder = $builder->activateAt($request->date('activation'));\n};\n\n$shortURLObject = $builder->make();\n```\n\nThis could be rewritten using `when` like so:\n\n ```php\nuse AshAllenDesign\\ShortURL\\Classes\\Builder;\nuse Carbon\\Carbon;\n \n$shortURLObject = app(Builder::class)\n    ->destinationUrl('https://destination.com')\n    ->when(\n        $request->date('activation'),\n        function (Builder $builder, Carbon $activateDate): Builder  {\n            return $builder->activateAt($activateDate);\n        },\n    )\n    ->make();\n ```\n\n### Using the Shortened URLs\n#### Default Route and Controller\nBy default, the shortened URLs that are created use the package's route and controller. The routes use the following structure:\n``` https://webapp.com/short/{urlKey} ```. This route uses the single-use controller that is found at \n``` \\AshAllenDesign\\ShortURL\\Controllers\\ShortURLController ```.\n\n#### Custom Route\nYou may wish to use a different routing structure for your shortened URLs other than the default URLs that are created.\nFor example, you might want to use ``` https://webapp.com/s/{urlKey} ``` or ``` https://webapp.com/{urlKey} ```. You can\ncustomise this to suit the needs of your project.\n\nTo use the custom routing all you need to do is add a web route to your project that points to the ShortURLController and\nuses the ``` {shortURLKey} ``` field.\n\nThe example below shows how you could add a custom route to your ``` web.php ``` file to use the shortened URLs:\n```php\nRoute::get('/custom/{shortURLKey}', '\\AshAllenDesign\\ShortURL\\Controllers\\ShortURLController');\n```\n\nNote: If you use your own custom routing, you might want to disable the default route that the app provides. Details are\nprovided for this in the [Customisation](#customisation) section below.\n\n### Tracking\nIf tracking is enabled for a shortened URL, each time the link is visited, a new ShortURLVisit row in the database will\nbe created. By default, the package is set to record the following fields of a visitor:\n\n- IP Address\n- Browser Name\n- Browser Version\n- Operating System Name\n- Operating System Version\n- Referer URL (the URL that the visitor originally came from)\n- Device Type (can be: ```desktop```/```mobile```/```tablet```/```robot```)\n\nEach of these fields can be toggled in the config files so that you only record the fields you need. Details on how to \ndo this are provided for this in the [Customisation](#customisation) section below.\n\n### Customisation\n\n#### Customising the Default Route\n\n#### Customising the Default URL\n\nThe package comes with a route that you can use for your short URLs. By default, this route uses your Laravel app's `app.url` config field to build the URL.\n\nHowever, you might want to override this and use a different URL for your short URLs. For instance, you might want to use a different domain name for your short URLs.\n\nTo override the base URL, you can set the `default_url` config field. For example, to set the base URL to `https://example.com`, you can set the `default_url` in your `config/short-url.php` file like so:\n\n```php\n'default_url' => 'https://example.com',\n```\n\nTo use the your application's `app.url` config field, you can set the `short_url.default_url` field to `null`.\n\n##### Customising the Prefix\n\nThe package comes with a route that you can use for your short URLs. By default, this route is `/short/{shortURLKey}`.\n\nYou might want to keep using this default route but change the `/short/` prefix to something else. To do this, you can change the `prefix` field in the config.\n\nFor example, to change the default short URL to `/s`, you could change the config value like so:\n\n```\n'prefix' => 's',\n```\n\n##### Removing the Prefix\n\nYou may also remove the prefix from the default route completely. For example, if you want your short URL to be accessible via `/{shortUrlKey}`, then you can update the `prefix` config value to `null` like so:\n\n```\n'prefix' => null,\n```\n\n##### Defining Middleware\n\nYou may wish to run the default short URL through some middleware in your application. To do this, you can define the middleware that the route should use via the `middleware` config value.\n\nFor example, if you have a `MyAwesomeMiddleware` class, you could update your `short-url` config like so:\n\n```\n'middleware' => [\n    MyAwesomeMiddleware::class,\n],\n```\n\nYou can also use this same approach to define middleware groups rather than individual middleware classes. For example, if you want your default short URL route to use the `web` middleware group, you could update your config like so:\n\n```\n'middleware' => [\n    'web',\n],\n```\n\nIt's important to note that this middleware will only be automatically applied to the default short URL route that ships with the package. If you are defining your own route, you'll need to apply this middleware to your route yourself.\n\n#### Disabling the Default Route\nIf you have added your own custom route to your project, you may want to block the default route that the package provides.\nYou can do this by setting the following value in the config:\n\n```\n'disable_default_route' => true,\n```\nIf the default route is disabled, any visitors who go to the ```/short/{shortURLKey}``` route will receive a HTTP 404.\n\nYou may want to manually prevent the route from being automatically registered and manually register it yourself in your own routes file. To do this you can add the following code to your routes file (e.g. `web.php`):\n\n```php\n\\AshAllenDesign\\ShortURL\\Facades\\ShortURL::routes();\n```\n\n#### Default URL Key Length \nWhen building a shortened URL, you have the option to define your own URL key or to randomly generate one. If one is\nrandomly generated, the minimum length of it is determined from the config.\n\nA minimum key length of 3 has been enforced for performance reasons. \n\nFor example, to create a shortened URL with a key length of 10 characters, you could set the following in the config:\n\n```\n'key_length' => 10,\n``` \n\nBy default, the shortened URLs that are created have a key length of 5.\n\nPlease be aware that the key length that you specify in the config is only a desirable length. It acts as a minimum length\nrather than a fixed length. For example, if the ``` key_length ``` is set to 3 in the config and there is a unique 3 character\nlong key that hasn't been used yet, the key created will be 3 characters long. However, if all of the possible 3 character long\nkeys are taken, a 4 character key will be created.\n\nThe [Hashids](https://github.com/vinkla/hashids) library is used to assist with creating the URL keys.\n\n#### Tracking Visits\nBy default, the package enables tracking of all the available fields on each URL built. However, this can be toggled in\nthe config file.\n\n##### Default Tracking\nTo disable tracking by default on all future short URLs that are generated, set the following in the config:\n```\n'tracking'   => [\n        'default_enabled' => true,\n        ...\n]\n```\nNote: Disabling tracking by default won't disable tracking for any shortened URLs that already exist. It will only apply\nto all shortened URLs that are created after the config update.\n\n##### Tracking Fields\nYou can toggle the default options for each of fields that can be tracked by changing them in the config. These options\ncan then be overridden for each short URL at the point of creation, as shown in the [Tracking Visitors](#tracking-visitors) section.\n\nFor example, the snippet below shows how we could record all of the fields apart from the IP address of the visitor:\n\n```\n'tracking'   => [\n        ...\n        'fields' => [\n            'ip_address' => false,\n            'operating_system' => true,\n            'operating_system_version' => true,\n            'browser' => true,\n            'browser_version' => true,\n            'referer_url' => true,\n            'device_type' => true,\n        ],\n    ],\n```\n\n#### Config Validation\nBy default, the values defined in the ``` short-url.php ``` config file are not validated. However, the library contains\na validator that can be used to ensure that your values are safe to use. To enable the config validation, you can set the\nfollowing option in the config:\n\n```\n'validate_config' => true,\n``` \n\n#### Custom Database Connection\n\nBy default, Short URL will use your application's default database connection. But there may be times that you'd like to use a different connection. For example, you might be building a multi-tenant application that uses a separate connection for each tenant, and you may want to store the short URLs in a central database.\n\nTo do this, you can set the connection name using the `connection` config value in the `config/short-url.php` file like so:\n\n```\n'connection' => 'custom_database_connection_name',\n```\n\n#### Specifying the Key Generator\n\nBy default, Short URL uses the `AshAllenDesign\\ShortURL\\Classes\\KeyGenerator` class to generate the keys for the short URL. However, you may want to use your own custom key generator class.\n\nTo do this, you can define the class to be used in the `short-url.php` config file like so:\n\n```php\n'url_key_generator' => \\AshAllenDesign\\ShortURL\\Classes\\KeyGenerator::class,\n```\n\nYou'll just need to ensure that your custom key generator class implements the `AshAllenDesign\\ShortURL\\Interfaces\\KeyGenerator` interface.\n\n#### Specifying the User Agent Parser\n\nBy default, Short URL uses `whichbrowser/parser` package to parse the user agent header of the visitor when tracking visits. However, you may want to use your own custom user agent parser.\n\nTo do this, you can define the class to be used in the `short-url.php` config file like so:\n\n```php\n'user_agent_driver' => \\AshAllenDesign\\ShortURL\\Classes\\UserAgent\\ParserPhpDriver::class,\n```\n\nYou'll just need to ensure that your custom user agent parser class implements the `AshAllenDesign\\ShortURL\\Interfaces\\UserAgentDriver` interface.\n\n#### Specifying the Allowed URL Schemes\n\nBy default, Short URL will allow you to create a shortened URL for any URLs beginning with `http://` or `https://`.\n\nHowever, you may want to change this list of allowed URL schemes. For example, this may be to restrict the creation to only `https://` URLs. Or, it may be to allow URLs to be created using other schemes such as `mailto://` or even custom schemes for your own applications.\n\nTo change the list of allowed URL schemes, you can define the list using the `allowed_url_schemes` field in your `short-url.php` config file like so:\n\n```php\n'allowed_url_schemes' => [\n    'http://',\n    'https://',\n    'mailto://',\n    'myapp://',\n],\n```\n\n### Helper Methods\n#### Visits\nThe ShortURL model includes a relationship (that you can use just like any other Laravel model relation) for getting the\nvisits for a shortened URL.\n\nTo get the visits using the relationship, use ``` ->visits ``` or ``` ->visits() ```. The example snippet belows shows how:\n\n```php\n$shortURL = \\AshAllenDesign\\ShortURL\\Models\\ShortURL::find(1);\n$visits = $shortURL->visits;\n``` \n#### Find by URL Key\nTo find the ShortURL model that corresponds to a given shortened URL key, you can use the ``` ->findByKey() ``` method.\n\nFor example, to find the ShortURL model of a shortened URL that has the key ``` abc123 ```, you could use the following:\n```php\n$shortURL = \\AshAllenDesign\\ShortURL\\Models\\ShortURL::findByKey('abc123');\n``` \n\n#### Find by Destination URL\nTo find the ShortURL models that redirect to a given destination URL, you can use the ``` ->findByDestinationURL() ``` method.\n\nFor example, to find all of the ShortURL models of shortened URLs that redirect to ``` https://destination.com ```, you could use\nthe following:\n\n```php\n$shortURLs = \\AshAllenDesign\\ShortURL\\Models\\ShortURL::findByDestinationURL('https://destination.com');\n```\n\n#### Tracking Enabled\nTo check if tracking is enabled for a short URL, you can use the ``` ->trackingEnabled() ``` method. It will return ``` true ```\nif tracking is enabled, and ``` false ``` if not.\n\nThe following example shows how to check if a short URL has tracking enabled:\n\n```php\n$shortURL = \\AshAllenDesign\\ShortURL\\Models\\ShortURL::first();\n$shortURL->trackingEnabled();\n``` \n\n#### Tracked Fields\nTo check which fields are enabled for tracking for a short URL, you can use the ``` ->trackingFields() ``` method. It\nwill return an array with the names of each field that is currently enabled for tracking.\n\nNote: Even if the tracking options (such as ``` track_ip_address ```) are enabled for a short URL and returned, they\nwon't be recorded unless the ``` track_visits ``` options is enabled. This can come in handy if you want to enable/disable\ntracking for a short URL without needing to individually set each option.\n\nThe following example shows how to get an array of all tracking-enabled fields for a short URL:\n\n```php\n$shortURL = \\AshAllenDesign\\ShortURL\\Models\\ShortURL::first();\n$shortURL->trackingFields();\n```\n\n### Model Factories\n\nThe package comes with model factories included for testing purposes which come in handy when generating polymorphic relationships. The `ShortURL` model factory also comes with extra states that you may use when necessary, such as `deactivated` and `inactive`:\n\n```php\nuse AshAllenDesign\\ShortURL\\Models\\ShortURL;\n\n$shortUrl = ShortURL::factory()->create();\n\n// URL is deactivated\n$deactivatedShortUrl = ShortURL::factory()->deactivated()->create();\n\n// URL is neither activated nor deactivated\n$inactiveShortURL = ShortURL::factory()->inactive()->create();\n```\n\nIf you are using your own custom model factory, you can define the factories that the `ShortURL` and `ShortURLVisit` models should use by updating the `factories` config field:\n\n```php\n'factories' => [\n    \\AshAllenDesign\\ShortURL\\Models\\ShortURL::class => \\AshAllenDesign\\ShortURL\\Models\\Factories\\ShortURLFactory::class,\n    \\AshAllenDesign\\ShortURL\\Models\\ShortURLVisit::class => \\AshAllenDesign\\ShortURL\\Models\\Factories\\ShortURLVisitFactory::class\n],\n```\n\n### Events\n\n#### Short URL Visited\n \nEach time a short URL is visited, the following event is fired that can be listened on:\n\n```\nAshAllenDesign\\ShortURL\\Events\\ShortURLVisited\n```\n\nIf you are redirecting users with a `301` HTTP status code, it's possible that this event will NOT be fired\nif a visitor has already visited this short URL before. This is due to the fact that most browsers will cache the\nintended destination URL as a 'permanent redirect' and won't actually visit the short URL first.\n\nFor better results, use the `302` HTTP status code as most browsers will treat the short URL as a 'temporary redirect'.\nThis means that the short URL will be visited in the browser and the event will be dispatched as expected before redirecting\nto the destination URL.\n\n## Testing\n\nTo run the package's unit tests, run the following command:\n\n``` bash\nvendor/bin/phpunit\n```\n\n## Security\n\nIf you find any security related issues, please contact me directly at [mail@ashallendesign.co.uk](mailto:mail@ashallendesign.co.uk) to report it.\n\n## Contribution\n\nIf you wish to make any changes or improvements to the package, feel free to make a pull request.\n\nNote: A contribution guide will be added soon.\n\n## Credits\n\n- [Ash Allen](https://ashallendesign.co.uk)\n- [Jess Pickup](https://jesspickup.co.uk) (Logo)\n- [Nathan Giesbrecht](https://github.com/NathanGiesbrecht)\n- [Carlos A. Escobar](https://github.com/carlosjs23)\n- [Victor-Emil Rossil Andersen](https://github.com/Victor-emil)\n- [Julien Arcin](https://github.com/julienarcin)\n- [Ryan Chandler](https://github.com/ryangjchandler)\n- [All Contributors](https://github.com/ash-jc-allen/short-url/graphs/contributors)\n\n## Changelog\n\nCheck the [CHANGELOG](CHANGELOG.md) to get more information about the latest changes.\n\n## Upgrading\n\nCheck the [UPGRADE](UPGRADE.md) guide to get more information on how to update this library to newer versions.\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n\n## Support Me\n\nIf you've found this package useful, please consider buying a copy of [Battle Ready Laravel](https://battle-ready-laravel.com) to support me and my work.\n\nEvery sale makes a huge difference to me and allows me to spend more time working on open-source projects and tutorials.\n\nTo say a huge thanks, you can use the code **BATTLE20** to get a 20% discount on the book.\n\n[ðŸ‘‰ Get Your Copy!](https://battle-ready-laravel.com)\n\n[![Battle Ready Laravel](https://ashallendesign.co.uk/images/custom/sponsors/battle-ready-laravel-horizontal-banner.png)](https://battle-ready-laravel.com)\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 15.7421875,
          "content": "# Upgrade Guide\n\n## Contents\n\n- [Upgrading from 7.* to 8.0.0](#upgrading-from-7-to-800)\n- [Upgrading from 6.* to 7.0.0](#upgrading-from-6-to-700)\n- [Upgrading from 5.* to 6.0.0](#upgrading-from-5-to-600)\n- [Upgrading from 4.* to 5.0.0](#upgrading-from-4-to-500)\n- [Upgrading from 3.* to 4.0.0](#upgrading-from-3-to-400)\n- [Upgrading from 2.* to 3.0.0](#upgrading-from-2-to-300)\n- [Upgrading from 1.* to 2.0.0](#upgrading-from-1-to-200)\n\n## Upgrading from 7.* to 8.0.0\n\n### Laravel - Minimum Required Version\n\nAs of Short URL v8.0, support for Laravel 8 and 9 has been dropped. This means that you must be using a minimum of\nLaravel 10.0 to use this package.\n\n### PHP - Minimum Required Version\n\nAs of Short URL v8.0, support for PHP 8.0 has been dropped. This means that you must be using a minimum of PHP 8.1 to\nuse this package.\n\n### Storing Undetectable Tracking Fields as `null` instead of `false`\n\nPreviously, if the user agent parser was unable to detect the operating system, browser, or device type, the tracking fields would be stored as false. For example, if the user agent parser was unable to detect the browser version of the visitor, the `browser_version` field in the `short_url_visits` table would be stored as `false`.\n\nAs of Short URL v8.0, these fields will now be stored as `null` instead. This change has been made to better reflect the fact that the tracking field was unable to be detected, rather than storing a boolean value that could be misleading.\n\nIf you've been relying on the tracking fields being stored as `false` in your own code, you may need to update your code to reflect the new `null` values.\n\nPlease note: I won't be providing a required database migration as part of the package to update the existing `false` values to `null`. But you'll likely want to update your existing rows in the `short_url_visits` table to convert any `false` values to `null` so that they'll be consistent with your newer data.\n\nYou may want to use this migration provided by [@stevebauman](https://github.com/stevebauman) to update your existing data:\n\n```php\nclass UpdateShortUrlVisitsTableConvertFalseValuesToNull extends Migration\n{\n    public function up(): void\n    {\n        DB::transaction(static function (): void {\n            DB::connection(config('short-url.connection'))\n                ->table('short_url_visits')\n                ->update([\n                    'operating_system' => DB::raw(\"CASE WHEN operating_system = '0' THEN NULL ELSE operating_system END\"),\n                    'operating_system_version' => DB::raw(\"CASE WHEN operating_system_version = '0' THEN NULL ELSE operating_system_version END\"),\n                    'browser' => DB::raw(\"CASE WHEN browser = '0' THEN NULL ELSE browser END\"),\n                    'browser_version' => DB::raw(\"CASE WHEN browser_version = '0' THEN NULL ELSE browser_version END\"),\n                    'device_type' => DB::raw(\"CASE WHEN device_type = '0' THEN NULL ELSE device_type END\"),\n                ]);\n        });\n    }\n}\n```\n\n### Added Property Types\n\nIn a bid to benefit from PHP's type system, all class-level properties now explicitly have their types defined. So if\nyou're using any of the following properties in your own code (or overriding any of the classes), you may need to update\nyour code to reflect the new types:\n\nClass: `AshAllenDesign\\ShortURL\\Classes\\Builder`\n\n| Old property definition                  | New property definition                               |\n|------------------------------------------|-------------------------------------------------------|\n| `private $keyGenerator`                  | `protected UrlKeyGenerator $keyGenerator`             |\n| `protected $destinationUrl`              | `protected ?string $destinationUrl = null`            |\n| `protected $singleUse = false`           | `protected ?bool $singleUse = false`                  |\n| `protected $secure`                      | `protected ?bool $secure = null`                      |\n| `protected $forwardQueryParams`          | `protected ?bool $forwardQueryParams = null`          |\n| `protected $trackVisits`                 | `protected ?bool $trackVisits = null`                 |\n| `protected $urlKey`                      | `protected ?string $urlKey = null`                    |\n| `protected $redirectStatusCode = 301`    | `protected int $redirectStatusCode = 301`             |\n| `protected $trackIPAddress`              | `protected ?bool $trackIPAddress = null`              |\n| `protected $trackOperatingSystem`        | `protected ?bool $trackOperatingSystem = null`        |\n| `protected $trackOperatingSystemVersion` | `protected ?bool $trackOperatingSystemVersion = null` |\n| `protected $trackBrowser;`               | `protected ?bool $trackBrowser = null`                |\n| `protected $trackBrowserVersion`         | `protected ?bool $trackBrowserVersion = null`         |\n| `protected $trackRefererURL`             | `protected ?bool $trackRefererURL = null`             |\n| `protected $trackDeviceType = null`      | `protected ?bool $trackDeviceType = null`             |\n| `protected $activateAt = null`           | `protected ?Carbon $activateAt = null`                |\n| `protected $deactivateAt = null`         | `protected ?Carbon $deactivateAt = null`              |\n\nClass: `AshAllenDesign\\ShortURL\\Classes\\KeyGenerator`\n\n| Old property definition | New property definition    |\n|-------------------------|----------------------------|\n| `private $hashids`      | `private Hashids $hashids` |\n\nClass: `AshAllenDesign\\ShortURL\\Classes\\Resolver`\n\n| Old property definition | New property definition                    |\n|-------------------------|--------------------------------------------|\n| `private $agent`        | `private UserAgentDriver $userAgentDriver` |\n\nClass: `AshAllenDesign\\ShortURL\\Events\\ShortURLVisited`\n\n| Old property definition | New property definition               |\n|-------------------------|---------------------------------------|\n| `public $shortURL`      | `public ShortURL $shortURL`           |\n| `public $shortURLVisit` | `public ShortURLVisit $shortURLVisit` |\n\n### Method Signature Changes\n\nSome method signatures have changed as of Short URL v8.0. These changes are either due to the addition of some new interfaces (which should make future maintenance work easier) or to reduce any unnecessary complexity in the codebase.\n\nIf you are overriding any of the following methods, or interacting with them in your code, you may need to update your code to reflect the new method signatures.\n\n#### `AshAllenDesign\\ShortURL\\Classes\\Builder@__construct`\n\nThe constructor for the `AshAllenDesign\\ShortURL\\Classes\\Builder` class has changed from:\n\n```php\nuse AshAllenDesign\\ShortURL\\Classes\\KeyGenerator;\nuse AshAllenDesign\\ShortURL\\Classes\\Validation;\n\npublic function __construct(Validation $validation = null, KeyGenerator $keyGenerator = null)\n```\n\nto:\n\n```php\nuse AshAllenDesign\\ShortURL\\Classes\\Validation;\nuse AshAllenDesign\\ShortURL\\Interfaces\\UrlKeyGenerator;\n\npublic function __construct(Validation $validation, UrlKeyGenerator $urlKeyGenerator)\n```\n\nIf you were previously using `new Builder()` to create your `Builder` instance, you may want to consider switching to `app(Builder::class)` instead. This will allow the package to resolve the class from the container and inject the required dependencies for you.\n\n#### `AshAllenDesign\\ShortURL\\Classes\\Builder@keyGenerator`\n\nThe `keyGenerator` method in the `AshAllenDesign\\ShortURL\\Classes\\Builder` class has changed from:\n\n```php\nuse AshAllenDesign\\ShortURL\\Classes\\KeyGenerator;\n\npublic function keyGenerator(KeyGenerator $keyGenerator): self\n````\n\nto:\n\n```php\nuse AshAllenDesign\\ShortURL\\Interfaces\\UrlKeyGenerator;\n\npublic function keyGenerator(UrlKeyGenerator $keyGenerator): self\n```\n\nIf you're interacting with this method and passing in your own instance of the `KeyGenerator` class, you shouldn't need to make any changes since the `KeyGenerator` class now implements the `UrlKeyGenerator` interface. However, if you're overriding this method anywhere, you may need to update the method signature to reflect the new interface.\n\n#### `AshAllenDesign\\ShortURL\\Classes\\KeyGenerator@__construct`\n\nThe constructor for the `AshAllenDesign\\ShortURL\\Classes\\KeyGenerator` class has changed from:\n\n```php\nuse Hashids\\Hashids;\n\npublic function __construct(Hashids $hashids = null)\n```\n\nto:\n\n```php\nuse Hashids\\Hashids;\n\npublic function __construct(Hashids $hashids)\n```\n\nIf you were previously using `new Hashids()` to create your `Hashids` instance, you may want to consider switching to `app(Hashids::class)` instead. This will allow the package to resolve the class from the container and inject the required arguments that you've defined in your config file.\n\n#### `AshAllenDesign\\ShortURL\\Classes\\Resolver@__construct`\n\nThe constructor for the `AshAllenDesign\\ShortURL\\Classes\\Resolver` class has changed from:\n\n```php\nuse AshAllenDesign\\ShortURL\\Classes\\Validation;\nuse Jenssegers\\Agent\\Agent;\n\npublic function __construct(Agent $agent = null, Validation $validation = null)\n```\n\nto:\n\n```php\nuse AshAllenDesign\\ShortURL\\Classes\\Validation;\nuse AshAllenDesign\\ShortURL\\Interfaces\\UserAgentDriver;\n\npublic function __construct(UserAgentDriver $userAgentDriver, Validation $validation)\n```\n\n#### `AshAllenDesign\\ShortURL\\Classes\\Resolver@guessDeviceType`\n\nThe `guessDeviceType` method in the `AshAllenDesign\\ShortURL\\Classes\\Resolver` class has changed from:\n\n```php\nprotected function guessDeviceType(): string\n```\n\nto:\n\n```php\nprotected function guessDeviceType(UserAgentDriver $userAgentParser): ?string\n```\n\n## Upgrading from 6.* to 7.0.0\n\n### Method Signature Update\n\nAs of Short URL v7.0.0, one of the method's signatures have been updated in order to allow the default short URL prefix\nto be nullable.\n\nThe signature of the `prefix()` method in the `AshAllenDesign\\ShortURL\\Classes\\Builder` class has changed from:\n\n```\npublic function prefix(): string\n```\n\nto:\n\n```\npublic function prefix(): ?string\n```\n\nAlthough it's unlikely that you are overriding this method, if you are, you'll need to update the method signature to\nthe new format.\n\n## Upgrading from 5.* to 6.0.0\n\n### Laravel - Minimum Required Version\n\nAs of Short URL v6.0.0, Laravel 6.0 and 7.0 are no longer supported. Therefore, you must be using a minimum of Laravel\n8.0 to use this library.\n\n### PHP - Minimum Required Version\n\nAs of Short URL v6.0.0, PHP 7.3 and 7.4 are no longer supported. Therefore, you must be using a minimum of PHP 8.0 to\nuse this library.\n\n### New Config Variable and Migration\n\nAs of Short URL v6.0.0, you can now forward query parameters from your request onto the destination URL. This feature\nrequires that you run a new migration to add the `forward_query_params` field to your `short_urls` table.\n\nTo publish the migration to your own `database/migrations` folder, run the following command in your project root:\n\n```bash\nphp artisan vendor:publish --tag=\"short-url-migrations\"\n```\n\nThere is also a new `forward_query_params` config option (that defaults to `false`) for controlling the default\nbehaviour of this feature. If you wish to override this option, you can add the following to your own config:\n\n```php\n   /*\n    |--------------------------------------------------------------------------\n    | Forwards query parameters\n    |--------------------------------------------------------------------------\n    |\n    | Here you can specify if the newly created short URLs will forward\n    | the query parameters to the destination by default. This option\n    | can be overridden when creating the short URL with the\n    | ->forwardQueryParams() method.\n    |\n    | eg: https://yoursite.com/short/xxx?a=b => https://destination.com/page?a=b\n    |\n    */\n    'forward_query_params' => false,\n```\n\n## Upgrading from 4.* to 5.0.0\n\n### Publish Migrations\n\nPrior to v5.0.0 of Short URL, the database migrations would be automatically loaded via the package's service provider.\nAs of\nv5.0.0, it's now mandatory for the migrations to be published as they won't be automatically loaded anymore.\n\nTo publish the migrations to your own ` database/migrations ` folder, run the following command in your project root:\n\n```bash\nphp artisan vendor:publish --tag=\"short-url-migrations\"\n```\n\n## Upgrading from 3.* to 4.0.0\n\n### Laravel - Minimum Required Version\n\nAs of Short URL v4.0.0, Laravel 5.8 is no longer supported. Therefore, you must be using a minimum of Laravel 6.0 to use\nthis library.\n\n### New Config Variable\n\nUp until now, the values defined in the ``` short-url.php ``` config file were always validated. However, this sometimes\ncaused issues\nif the application's config was cached before running ``` composer require ```. A new config variable has been added\nwhich can\nnow be used to toggle whether if the validation should be run. By default, the validation is now disabled.\n\nTo enable the validation, you can add the following line to your ``` short-url.php ``` config file:\n\n```\n'validate_config' => true,\n``` \n\n### Deprecated Facade\n\nAs mentioned in [Upgrading from 2.* to 3.0.0](#upgrading-from-2-to-300), the ``` ShortURLBuilder ``` facade was\ndeprecated\nand set to be removed. As of Short URL v4.0.0, it has now been removed in favour of the newer ``` ShortURL ``` facade.\n\n## Upgrading from 2.* to 3.0.0\n\n### Migrations and Database Changes\n\nThere is now a new database migration that adds 2 additional columns (``` activated_at ```, ``` deactivated_at ```) to\nthe ``` short_urls ``` table. To use these migrations\nto add the columns to your tables, you can run the following command:\n\n```\nphp artisan migrate\n```\n\nIf you would prefer to publish the migrations so that you can make changes to them yourself, you can run the following\ncommand before migrating:\n\n```\nphp artisan vendor:publish --provider=\"AshAllenDesign\\ShortURL\\Providers\\ShortURLProvider\"\n```\n\nNote: When this migrations runs, it will auto-populate any of your existing short URLs to have today's date as the\n``` activated_at``` date. However, the ``` deactivated_at ``` column will remain as ``` null ```. This means that the\nshort URL will remain active indefinitely.\n\n### Deprecated Facade\n\nUp until now, you could use the ``` ShortURLBuilder ``` facade to create a new short URL. However, to make the package\nfit more with the Laravel naming conventions and consistency, this has now been deprecated.\n\nThere is now a newer ``` ShortURL ``` facade which you can use. It works exactly the same and is purely being changed\nfor syntactic sugar. Simply, replace anywhere in your application that uses the ``` ShortURLBuilder ```\nwith ``` ShortURL ```.\n\nNote: The ``` ShortURLBuilder ``` will remain in version 3.* of the library but will be removed in version 4.0.0.\n\n## Upgrading from 1.* to 2.0.0\n\n### Migrations and Database Changes\n\nThere are now 2 new database migrations that add additional columns to the ``` short_urls ```\nand ``` short_url_visits ```\ntables. To use these migrations to add the columns to your tables, you can run the following command:\n\n```\nphp artisan migrate\n```\n\nIf you would prefer to publish the migrations so that you can make changes to them yourself, you can run the following\ncommand before migrating:\n\n```\nphp artisan vendor:publish --provider=\"AshAllenDesign\\ShortURL\\Providers\\ShortURLProvider\"\n```\n\nNote: When this migration runs, it will auto-populate any of your existing short URLs to have the tracking values as\nspecified in your\nconfig. For example, if you have all tracking options except from ``` ip_address ``` enabled in your config, this means\nthat all of your existing short URLs in the database will explicitly have all tracking options enabled except from the\n``` ip_address ```.\n\n### Config Updates\n\nTwo new tracking fields have now been added to the config file. These fields can be used for tracking the referer URL\nand\ndevice type of visitors.\n\nYou can add these options to your config file like shown below:\n\n```\n'tracking'   => [\n        ...\n        'fields' => [\n            ...\n            'referer_url' => true,\n            'device_type' => true,\n        ],\n    ],\n```\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.728515625,
          "content": "{\n    \"name\": \"ashallendesign/short-url\",\n    \"description\": \"A Laravel package for creating shortened URLs for your web apps.\",\n    \"type\": \"library\",\n    \"homepage\": \"https://github.com/ash-jc-allen/short-url\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Ash Allen\",\n            \"email\": \"mail@ashallendesign.co.uk\"\n        }\n    ],\n    \"keywords\": [\n        \"ashallendesign\",\n        \"short-urls\",\n        \"url-shortener\",\n        \"laravel\",\n        \"laravel-package\"\n    ],\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"nesbot/carbon\": \"^2.0|^3.0\",\n        \"illuminate/container\": \"^10.0|^11.0\",\n        \"illuminate/database\": \"^10.0|^11.0\",\n        \"hashids/hashids\": \"^4.0|^5.0\",\n        \"whichbrowser/parser\": \"^2.1\",\n        \"ashallendesign/laravel-config-validator\": \"^2.6.1\"\n    },\n    \"require-dev\": {\n        \"mockery/mockery\": \"^1.0\",\n        \"orchestra/testbench\": \"^8.0|^9.0\",\n        \"phpunit/phpunit\": \"^10.0|^11.0\",\n        \"larastan/larastan\": \"^2.0\",\n        \"pestphp/pest-plugin-laravel\": \"^2.3\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"AshAllenDesign\\\\ShortURL\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"AshAllenDesign\\\\ShortURL\\\\Tests\\\\\": \"tests/\"\n        }\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"AshAllenDesign\\\\ShortURL\\\\Providers\\\\ShortURLProvider\"\n            ],\n            \"aliases\": {\n                \"ShortURL\": \"AshAllenDesign\\\\ShortURL\\\\Facades\\\\ShortURL\"\n            }\n        }\n    },\n    \"scripts\": {\n        \"test\": \"vendor/bin/pest\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"config\": {\n        \"allow-plugins\": {\n            \"pestphp/pest-plugin\": true\n        }\n    }\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "database",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpstan-laravel-10.neon",
          "type": "blob",
          "size": 1.7236328125,
          "content": "includes:\n    - ./vendor/larastan/larastan/extension.neon\n\nparameters:\n\n    paths:\n        - src\n\n    level: 6\n\n    ignoreErrors:\n        - '#PHPDoc tag @use contains generic type Illuminate\\\\Database\\\\Eloquent\\\\Factories\\\\HasFactory<AshAllenDesign\\\\ShortURL\\\\Models\\\\Factories\\\\ShortURLVisitFactory> but trait Illuminate\\\\Database\\\\Eloquent\\\\Factories\\\\HasFactory is not generic.#'\n        - '#Method AshAllenDesign\\\\ShortURL\\\\Models\\\\ShortURLVisit::shortURL\\(\\) should return Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\BelongsTo<AshAllenDesign\\\\ShortURL\\\\Models\\\\ShortURL, \\$this\\(AshAllenDesign\\\\ShortURL\\\\Models\\\\ShortURLVisit\\)> but returns Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\BelongsTo<AshAllenDesign\\\\ShortURL\\\\Models\\\\ShortURL, AshAllenDesign\\\\ShortURL\\\\Models\\\\ShortURLVisit>.#'\n        - '#Method AshAllenDesign\\\\ShortURL\\\\Models\\\\ShortURL::visits\\(\\) should return Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\HasMany<AshAllenDesign\\\\ShortURL\\\\Models\\\\ShortURLVisit, \\$this\\(AshAllenDesign\\\\ShortURL\\\\Models\\\\ShortURL\\)> but returns Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\HasMany<AshAllenDesign\\\\ShortURL\\\\Models\\\\ShortURLVisit>.#'\n        - '#Generic type Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\HasMany<AshAllenDesign\\\\ShortURL\\\\Models\\\\ShortURLVisit, \\$this\\(AshAllenDesign\\\\ShortURL\\\\Models\\\\ShortURL\\)> in PHPDoc tag @return specifies 2 template types, but class Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\HasMany supports only 1: TRelatedModel#'\n        - '#PHPDoc tag @use contains generic type Illuminate\\\\Database\\\\Eloquent\\\\Factories\\\\HasFactory<AshAllenDesign\\\\ShortURL\\\\Models\\\\Factories\\\\ShortURLFactory> but trait Illuminate\\\\Database\\\\Eloquent\\\\Factories\\\\HasFactory is not generic.#'\n\n    checkMissingIterableValueType: false\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.16796875,
          "content": "includes:\n    - ./vendor/larastan/larastan/extension.neon\n\nparameters:\n\n    paths:\n        - src\n\n    level: 6\n\n    ignoreErrors:\n\n    checkMissingIterableValueType: false\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.7294921875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bootstrap=\"vendor/autoload.php\" backupGlobals=\"false\" colors=\"true\" processIsolation=\"false\" stopOnFailure=\"false\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/11.1/phpunit.xsd\" cacheDirectory=\".phpunit.cache\" backupStaticProperties=\"false\">\n  <testsuites>\n    <testsuite name=\"Short URL Test Suite\">\n      <directory>tests</directory>\n    </testsuite>\n  </testsuites>\n  <php>\n    <env name=\"APP_ENV\" value=\"testing\"/>\n    <env name=\"DB_CONNECTION\" value=\"sqlite\"/>\n    <env name=\"DB_DATABASE\" value=\":memory:\"/>\n  </php>\n  <source>\n    <include>\n      <directory suffix=\".php\">src/</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "routes",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "testbench.yaml",
          "type": "blob",
          "size": 0.0634765625,
          "content": "migrations:\n  - database/migrations\n\nworkbench:\n  install: false\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}