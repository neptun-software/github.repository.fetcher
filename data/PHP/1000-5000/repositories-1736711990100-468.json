{
  "metadata": {
    "timestamp": 1736711990100,
    "page": 468,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "BenSampo/laravel-enum",
      "stars": 2010,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.353515625,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at http://editorconfig.org\n\nroot = true\n\n[*.php]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nindent_style = space\nindent_size = 4\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.yml]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.341796875,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n.github export-ignore\nbranding export-ignore\ntests export-ignore\n.editorconfig export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\n.php-cs-fixer.php\nCONTRIBUTING.md export-ignore\nenum-library.md export-ignore\nphpunit.xml export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1630859375,
          "content": "# Not commiting composer.lock as this is a library project\ncomposer.lock\n\n# Dependencies\nvendor\n\n# Cache\n.php-cs-fixer.cache\n.phpunit.result.cache\n\n# IDE stuff\n.idea/\n"
        },
        {
          "name": ".php-cs-fixer.php",
          "type": "blob",
          "size": 0.4951171875,
          "content": "<?php declare(strict_types=1);\n\nuse function MLL\\PhpCsFixerConfig\\risky;\n\n$finder = PhpCsFixer\\Finder::create()\n    ->in(__DIR__)\n    ->name('*.php')\n    ->notPath('vendor')\n    ->notPath('tests/Enums/Annotate') // Generated\n    ->notPath('tests/Enums/AnnotateFixtures') // Matches laminas/laminas-code\n    ->notPath('tests/Enums/ToNative') // Generated\n    ->notPath('tests/Enums/ToNativeFixtures') // Matches laminas/laminas-code\n    ->ignoreDotFiles(false)\n    ->ignoreVCS(true);\n\nreturn risky($finder);\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 12.2236328125,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## Unreleased\n\n## 6.11.1\n\n### Fixed\n\n- Fix conversion of `in()` and `notIn()` to native enums when called with non-arrays\n\n## 6.11.0\n\n### Added\n\n- Support Laravel 11\n\n## 6.10.0\n\n### Added\n\n- Allow Allow installation alongside PHPUnit 11\n\n## 6.9.1\n\n### Fixed\n\n- Check if value is `int` or `string` in conversion of `Enum::hasValue()` to native enum\n\n## 6.9.0\n\n### Added\n\n- Add conversion of `Enum::hasValue()` to native enum\n\n## 6.8.0\n\n### Changed\n\n- Make `php artisan enum:to-native` compatible with rector `0.19`\n\n## 6.7.0\n\n### Added\n\n- Add PHPStan rule to detect duplicate enum values\n\n## 6.6.4\n\n### Fixed\n\n- Fix conversion of `Enum::fromKey()` to native enum\n\n## 6.6.3\n\n### Fixed\n\n- Remove leading backslash in class names passed to `php artisan enum:to-native`\n\n## 6.6.2\n\n### Fixed\n\n- Convert single classes in one step with `php artisan enum:to-native`\n\n## 6.6.1\n\n### Fixed\n\n- Disable timeout of rector calls in `php artisan enum:to-native`\n\n## 6.6.0\n\n### Changed\n\n- Use command `enum:to-native` for simplified one-step conversion of classes that extend `BenSampo\\Enum\\Enum` to native PHP enums\n\n## 6.5.0\n\n### Added\n\n- Add Rector rules for conversion of classes that extend `BenSampo\\Enum\\Enum` to native PHP enums\n\n### Deprecated\n\n- Deprecate command `enum:to-native` in favor of Rector conversion\n\n## 6.4.1\n\n### Fixed\n\n- Ensure validation rules are always added https://github.com/BenSampo/laravel-enum/pull/327\n\n## 6.4.0\n\n### Added\n\n- Add command `enum:to-native` to convert a class that extends `BenSampo\\Enum\\Enum` to a native PHP enum\n\n### Fixed\n\n- Load pipe-string syntax validation translations lazily https://github.com/BenSampo/laravel-enum/pull/324\n\n## 6.3.3\n\n### Fixed\n\n- Allow `mixed` in `Enum::hasValue()`\n\n## 6.3.2\n\n### Fixed\n\n- Preserve whitespace in PHPDocs when running `enum:annotate` command\n\n## 6.3.1\n\n### Fixed\n\n- Mark `Enum::$key` and `Enum::$description` as non-nullable in `Enum` and document they are unset in `FlaggedEnum`\n\n## [6.3.0](https://github.com/BenSampo/laravel-enum/compare/v6.2.2...v6.3.0) - 2023-01-31\n\n### Added\n\n- Support Laravel 10 [298](https://github.com/BenSampo/laravel-enum/pull/298)\n\n## [6.2.2](https://github.com/BenSampo/laravel-enum/compare/v6.2.1...v6.2.2) - 2023-01-17\n\n### Fixed\n\n- Fix backtrack regexp error and add Windows EOL support to the annotate command [296](https://github.com/BenSampo/laravel-enum/pull/296)\n\n## [6.2.1](https://github.com/BenSampo/laravel-enum/compare/v6.2.0...v6.2.1) - 2023-01-12\n\n### Fixed\n\n- Fix running `php artisan enum:annotate` on long enum class [294](https://github.com/BenSampo/laravel-enum/pull/294)\n\n## [6.2.0](https://github.com/BenSampo/laravel-enum/compare/v6.1.0...v6.2.0) - 2022-12-07\n\n### Changed\n\n- Open `EnumServiceProvider` for customization [292](https://github.com/BenSampo/laravel-enum/pull/292)\n\n## [6.1.0](https://github.com/BenSampo/laravel-enum/compare/v6.0.0...v6.1.0) - 2022-10-26\n\n### Changed\n\n- Eliminate unnecessary abstract class `AbstractAnnotationCommand` [283](https://github.com/BenSampo/laravel-enum/pull/283)\n\n### Fixed\n\n- Provide more accurate type hints in `Enum` and `FlaggedEnum` [283](https://github.com/BenSampo/laravel-enum/pull/283)\n- Accept `FlaggedEnum` instances in `QueriesFlaggedEnums` scopes [283](https://github.com/BenSampo/laravel-enum/pull/283)\n\n## [6.0.0](https://github.com/BenSampo/laravel-enum/compare/v5.3.1...v6.0.0) - 2022-08-22\n\n### Added\n\n- Allow Description attribute usage on class [270](https://github.com/BenSampo/laravel-enum/pull/270)\n- Add generic type `TValue` to `Enum` class\n\n### Changed\n\n- Require composer/class-map-generator over composer/composer [268](https://github.com/BenSampo/laravel-enum/pull/268)\n- Use native types whenever possible\n- Throw when calling `Enum::getDescription()` with invalid values\n- Expect class-string in `InvalidEnumMemberException` constructor\n\n### Fixed\n\n- Leverage late static binding for instantiation methods in PHPStan extension\n\n### Removed\n\n- Remove `Enum::getInstance()` in favor or `Enum::fromValue()`\n\n## [5.3.1](https://github.com/BenSampo/laravel-enum/compare/v5.3.0...v5.3.1) - 2022-06-22\n\n### Fixed\n\n- Narrow property type hints [258](https://github.com/BenSampo/laravel-enum/pull/258)\n\n## [5.3.0](https://github.com/BenSampo/laravel-enum/compare/v5.2.0...v5.3.0) - 2022-04-08\n\n### Fixed\n\n- Return value for invalid enum case when using the `Description` attribute [264](https://github.com/BenSampo/laravel-enum/pull/264)\n\n### Fixed\n\n- Type-hint `Enum::$key` and `Enum::$description` as `string`\n- Type-hint `FlaggedEnum::$value` as `int`\n\n## [5.2.0](https://github.com/BenSampo/laravel-enum/compare/v5.1.0...v5.2.0) - 2022-03-11\n\n### Fixed\n\n- Publish language definitions to `lang` directory [254](https://github.com/BenSampo/laravel-enum/pull/254)\n\n### Added\n\n- Restore enum instance from `var_export()` [252](https://github.com/BenSampo/laravel-enum/pull/252)\n\n## [5.1.0](https://github.com/BenSampo/laravel-enum/compare/v5.0.0...v5.1.0) - 2022-02-09\n\n### Added\n\n- Ability to define enum case descriptions using `Description` attribute.\n\n## [5.0.0](https://github.com/BenSampo/laravel-enum/compare/v4.2.0...v5.0.0) - 2022-02-09\n\n### Added\n\n- Support for Laravel 9\n\n### Changed\n\n- The `annotate` command now uses composer to parse directories for instances of enums instead of `hanneskod/classtools`\n\n### Removed\n\n- Removed old `CastsEnums` trait. Laravel attribute casting should be used now instead. [247](https://github.com/BenSampo/laravel-enum/pull/247)\n\n## [4.2.0](https://github.com/BenSampo/laravel-enum/compare/v4.1.0...v4.2.0) - 2022-01-31\n\n### Fixed\n\n- Fix return type on FlaggedEnum flags method [241](https://github.com/BenSampo/laravel-enum/pull/241)\n- Suppress deprecated notice on PHP8.1 [236](https://github.com/BenSampo/laravel-enum/pull/236)\n\n## [4.1.0](https://github.com/BenSampo/laravel-enum/compare/v4.0.0...v4.1.0) - 2021-11-16\n\n### Added\n\n- Allow package to be installed with PHP 8.1 [#233](https://github.com/BenSampo/laravel-enum/pull/233)\n\n### Changed\n\n- Allow `laminas/laminas-code:^4.0` as a dependency [#233](https://github.com/BenSampo/laravel-enum/pull/233)\n\n## [4.0.0](https://github.com/BenSampo/laravel-enum/compare/v3.4.2...v4.0.0) - 2021-11-09\n\n### Fixed\n\n- Fixed validation error message localization when using string validation rules [#227](https://github.com/BenSampo/laravel-enum/pull/227)\n\n### Changed\n\n- Extend the functionality of the `getKeys()` and `getValues()` methods [#223](https://github.com/BenSampo/laravel-enum/pull/223)\n\n### Added\n\n- Added new method `notIn()` to check whether a value is not in an iterable set of values [#232](https://github.com/BenSampo/laravel-enum/pull/232)\n\n## [3.4.2](https://github.com/BenSampo/laravel-enum/compare/v3.4.1...v3.4.2) - 2021-09-09\n\n### Fixed\n\n- Fixed broken enums due to wrapping of long constant names in method annotations [#226](https://github.com/BenSampo/laravel-enum/pull/226)\n\n## [3.4.1](https://github.com/BenSampo/laravel-enum/compare/v3.4.0...v3.4.1) - 2021-06-17\n\n### Fixed\n\n- Fixed type issued in PHP 7.3\n\n## [3.4.0](https://github.com/BenSampo/laravel-enum/compare/v3.3.0...v3.4.0) - 2021-06-17\n\n### Added\n\n- `addAllFlags()` method to flagged enums\n- `removeAllFlags()` method to flagged enums\n\n### Fixed\n\n- Fixed coercion of flagged enums when the value represents multiple flags\n\n## [3.3.0](https://github.com/BenSampo/laravel-enum/compare/v3.2.0...v3.3.0) - 2021-02-16\n\n### Changed\n\n- Update doctrine/dbal requirement from ^2.9 to ^2.9|^3.0 [#208](https://github.com/BenSampo/laravel-enum/pull/208)\n- Allow passing iterables to Enum::in() [#212](https://github.com/BenSampo/laravel-enum/pull/212)\n\n### Fixed\n\n- fix: `$model->getChanges()` triggered due to strict comparison [#187](https://github.com/BenSampo/laravel-enum/pull/187)\n- Fixed issue in `getFriendlyKeyName`when uppercase key contains non-alpha characters [#210](https://github.com/BenSampo/laravel-enum/pull/210)\n\n## [3.2.0](https://github.com/BenSampo/laravel-enum/compare/v3.1.0...v3.2.0) - 2020-12-15\n\n### Added\n\n- PHP 8.0 support [#203](https://github.com/BenSampo/laravel-enum/pull/203)\n\n### Changed\n\n- Switched from Travis to GitHub Actions\n\n## [3.1.0](https://github.com/BenSampo/laravel-enum/compare/v3.0.0...v3.1.0) - 2020-10-22\n\n### Added\n\n- Added trait to query flagged enums using Eloquent [#180](https://github.com/BenSampo/laravel-enum/pull/180)\n- Add the option to publish enums stubs [#182](https://github.com/BenSampo/laravel-enum/pull/182)\n\n### Changed\n\n- Improved test equality strictness [#185](https://github.com/BenSampo/laravel-enum/pull/185)\n\n### Fixed\n\n- fix:`toSelectArray` breaking change + document `toArray` change [#184](https://github.com/BenSampo/laravel-enum/pull/184)\n\n## [3.0.0](https://github.com/BenSampo/laravel-enum/compare/v2.2.0...v3.0.0) - 2020-08-07\n\n### Added\n\n- Support for Laravel 8\n\n### Fixed\n\n- Model annotation has been removed in favour of `laravel-ide-helper` [#165](https://github.com/BenSampo/laravel-enum/pull/165)\n\n## [2.2.0](https://github.com/BenSampo/laravel-enum/compare/v2.1.0...v2.2.0) - 2020-08-30\n\n### Fixed\n\n- Model attributes which use Laravel 7 native casting now return the enum value when serialized. [#162](https://github.com/BenSampo/laravel-enum/issues/162) [#163](https://github.com/BenSampo/laravel-enum/issues/163)\n\n### Deprecated\n\n- `Enum::toArray()` should no longer be called statically, instead use `Enum::asArray()`.\n\n## [2.1.0](https://github.com/BenSampo/laravel-enum/compare/v2.0.0...v2.1.0) - 2020-07-24\n\n### Fixed\n\n- Allow returning `null` when using native casting [#152](https://github.com/BenSampo/laravel-enum/pull/152)\n\n## [2.0.0](https://github.com/BenSampo/laravel-enum/compare/v1.38.0...v2.0.0) - 2020-07-02\n\n### Added\n\n- Native attribute casting [#131](https://github.com/BenSampo/laravel-enum/pull/131)\n\n### Changed\n\n- Require Laravel 7.5 or higher\n- Require PHP 7.2.5 or higher\n\n### Deprecated\n\n- Deprecate legacy attribute casting in favor of native casting\n\n## [1.38.0](https://github.com/BenSampo/laravel-enum/compare/v1.37.0...v1.38.0) - 2020-06-07\n\n### Fixed\n\n- Handle calling magic instantiation methods from within instance methods of the Enum [#147](https://github.com/BenSampo/laravel-enum/pull/147)\n- Add new instantiation methods `Enum::fromKey()` and `Enum::fromValue()` [#142](https://github.com/BenSampo/laravel-enum/pull/142)\n- Fixed issue with localized validation messages [#141](https://github.com/BenSampo/laravel-enum/pull/141)\n\n### Deprecated\n\n- Deprecate `Enum::getInstance()` in favor of `Enum::fromValue()`\n\n## [1.37.0](https://github.com/BenSampo/laravel-enum/compare/v1.36.0...v1.37.0) - 2020-04-11\n\n### Changed\n\n- EnumValue validation rule allows multiple flags for FlaggedEnums\n\n## [1.36.0](https://github.com/BenSampo/laravel-enum/compare/v1.35...v1.36.0) - 2020-03-22\n\n### Changed\n\n- Validation messages are now pulled from translation files [#134](https://github.com/BenSampo/laravel-enum/pull/134)\n\n## [1.35.0](https://github.com/BenSampo/laravel-enum/compare/v1.34...v1.35) - 2020-03-16\n\n### Changed\n\n- Added missing pipe validation syntax for enum instance validation [#132](https://github.com/BenSampo/laravel-enum/pull/132)\n\n## [1.34.0](https://github.com/BenSampo/laravel-enum/compare/v1.33...v1.34) - 2020-03-13\n\n### Changed\n\n- Change order of attributes in `BenSampo\\Enum\\Enum`, to ensure relational comparison (with <,>) uses the $value attribute. (Ref: https://www.php.net/manual/en/language.oop5.object-comparison.php#98725) [#129](https://github.com/BenSampo/laravel-enum/pull/129)\n- Fix for Lumen when Facade not set [#123](https://github.com/BenSampo/laravel-enum/pull/123)\n\n## [1.33.0](https://github.com/BenSampo/laravel-enum/compare/v1.32...v1.33) - 2020-03-05\n\n### Added\n\n- Add Laravel 7.x compatibility\n\n## [1.32.0](https://github.com/BenSampo/laravel-enum/compare/v1.31...v1.32) - 2020-02-11\n\n### Added\n\n- Add tests and make `EnumMethodReflection` return generating constant values for `isInternal`, `isDeprecated`, and\n  `getDeprecatedDescription` [#121](https://github.com/BenSampo/laravel-enum/pull/121)\n\n## [1.31.0](https://github.com/BenSampo/laravel-enum/compare/v1.30...v1.31) - 2020-02-09\n\n### Added\n\n- Add compatibility with PHPStan `0.12.x` [#119](https://github.com/BenSampo/laravel-enum/pull/119)\n- Changelog started.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.271484375,
          "content": "# How to contribute to laravel-enum\n\nHey, thank you for contributing. Here are some tips to make it easy for you.\n\n## Committing code\n\n1. Fork the project\n1. `git clone` it and `composer install` the dependencies\n1. Create a new branch\n1. Think about how the changes you are about to make can be tested, write tests before coding \n1. Run tests, make sure they fail\n1. Write the actual code to make the tests pass\n1. Run checks with `make`\n1. Open a pull request detailing your changes. Make sure to follow the [template](.github/PULL_REQUEST_TEMPLATE.md)\n\n## Testing\n\nWe use [PHPUnit](https://phpunit.de) for automated tests.\n\nHave a new feature? You can start off by writing some tests that detail\nthe behaviour you want to achieve and go from there.\n\nFixing a bug? The best way to ensure it is fixed for good and never comes\nback is to write a failing test for it and then make it pass. If you can\nnot figure out how to fix it yourself, feel free to submit a PR with a\nfailing test.\n\nRun the testsuite:\n\n```sh\nmake test\n```\n\n## Codestyle\n\nFormatting is automated through [php-cs-fixer](https://github.com/friendsofphp/php-cs-fixer).\n\nApply automated fixes:\n\n```sh\nmake fix\n```\n\n## Static Analysis\n\nWe use [PHPStan](https://phpstan.org) for static analysis.\n\nRun static analysis:\n\n```sh\nmake stan\n```\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0576171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2017-2019 Ben Sampson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.7783203125,
          "content": ".PHONY: it\nit: fix stan test docs ## Run the commonly used targets\n\n.PHONY: help\nhelp: ## Displays this list of targets with descriptions\n\t@grep -E '^[a-zA-Z0-9_-]+:.*?## .*$$' $(firstword $(MAKEFILE_LIST)) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[32m%-30s\\033[0m %s\\n\", $$1, $$2}'\n\n.PHONY: fix\nfix: vendor ## Apply automatic code fixes\n\tvendor/bin/php-cs-fixer fix\n\n.PHONY: stan\nstan: vendor ## Runs a static analysis with phpstan\n\tvendor/bin/phpstan\n\n.PHONY: test\ntest: vendor ## Runs tests with phpunit\n\tvendor/bin/phpunit --testsuite=Tests\n\tvendor/bin/phpunit --testsuite=Rector\n\ndocs: ## Generate documentation\n\tvendor/bin/rule-doc-generator generate src/Rector --output-file=rector-rules.md\n\nvendor: composer.json\n\tcomposer validate --strict\n\tcomposer install\n\tcomposer normalize\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 33.6376953125,
          "content": "<p align=\"center\"><img src=\"https://github.com/BenSampo/laravel-enum/raw/master/branding/logo.svg?sanitize=true\" alt=\"Laravel Enum\" width=\"250\" style=\"margin-bottom: 20px\"></p>\n<p align=\"center\">\n<a href=\"https://packagist.org/packages/bensampo/laravel-enum\"><img src=\"https://img.shields.io/packagist/v/bensampo/laravel-enum.svg?style=flat-square&label=stable\" alt=\"Packagist Stable Version\"></a>\n<a href=\"https://packagist.org/packages/bensampo/laravel-enum\"><img src=\"https://img.shields.io/packagist/dt/bensampo/laravel-enum.svg?style=flat-square\" alt=\"Packagist downloads\"></a>\n<a href=\"LICENSE.txt\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\" alt=\"MIT Software License\"></a>\n</p>\n\n## Using this library is no longer recommended\n\nUsing this library is no longer recommended, especially for new projects.\nPHP 8.1 supports enums natively.\n\nSee https://github.com/BenSampo/laravel-enum/issues/332.\n\n## About Laravel Enum\n\nSimple, extensible and powerful enumeration implementation for Laravel.\n\n- Enum key value pairs as class constants\n- Full-featured suite of methods\n- Enum instantiation\n- Flagged/Bitwise enums\n- Type hinting\n- Attribute casting\n- Enum artisan generator\n- Validation rules for passing enum key or values as input parameters\n- Localization support\n- Extendable via Macros\n\nCreated by [Ben Sampson](https://sampo.co.uk)\n\n## Jump To\n\n- [Guide](#guide)\n- [Installation](#installation)\n- [Migrate to Native PHP Enums](#migrate-to-native-PHP-enums)\n- [Enum Library](enum-library.md)\n- [Basic Usage](#basic-usage)\n  - [Enum Definition](#enum-definition)\n  - [Instantiation](#instantiation)\n  - [Instance Properties](#instance-properties)\n  - [Instance Casting](#instance-casting)\n  - [Instance Equality](#instance-equality)\n  - [Type Hinting](#type-hinting)\n- [Flagged/Bitwise Enum](#flaggedbitwise-enum)\n- [Attribute Casting](#attribute-casting)\n- [Migrations](#migrations)\n- [Validation](#validation)\n- [Localization](#localization)\n- [Customizing Descriptions](#customizing-descriptions)\n  - [Customizing Class Description](#customizing-class-description)\n  - [Customizing Value Descriptions](#customizing-value-descriptions)\n- [Extending the Enum Base Class](#extending-the-enum-base-class)\n- [Laravel Nova Integration](#laravel-nova-integration)\n- [PHPStan Integration](#phpstan-integration)\n- [Artisan Command List](#artisan-command-list)\n- [Enum Class Reference](#enum-class-reference)\n- [Stubs](#stubs)\n\n## Documentation for older versions\n\nYou are reading the documentation for `6.x`.\n\n- If you're using **Laravel 8** please see the [docs for `4.x`](https://github.com/BenSampo/laravel-enum/blob/v4.2.0/README.md).\n- If you're using **Laravel 7** please see the [docs for `2.x`](https://github.com/BenSampo/laravel-enum/blob/v2.2.0/README.md).\n- If you're using **Laravel 6** or below, please see the [docs for `1.x`](https://github.com/BenSampo/laravel-enum/blob/v1.38.0/README.md).\n\nPlease see the [upgrade guide](UPGRADE.md) for information on how to upgrade to the latest version.\n\n## Guide\n\nI wrote a blog post about using laravel-enum: https://sampo.co.uk/blog/using-enums-in-laravel\n\n## Installation\n\nRequires PHP 8, and Laravel 9 or 10.\n\n```sh\ncomposer require bensampo/laravel-enum\n```\n\n## Migrate to Native PHP Enums\n\nPHP 8.1 supports enums natively.\nYou can migrate your usages of `BenSampo\\Enum\\Enum` to native PHP enums using the following steps.\n\nMake sure you meet the following requirements:\n- PHP 8.1 or higher\n- Laravel 10 or higher\n- Rector 0.17 or higher, your `rector.php` includes all relevant files\n- Latest version of this library\n\nDepending on the size of your project, you may choose to migrate all enums at once,\nor migrate just a couple or one enum at a time.\n- Convert all enums at once: `php artisan enum:to-native`\n- Pass the fully qualified class name of an enum to limit the conversion: `php artisan enum:to-native \"App\\Enums\\UserType\"`\n\n  This is necessary if any enums are used during the bootstrap phase of Laravel,\n  the conversion of their usages interferes with Larastan and prevents a second run of Rector from working.\n\nReview and validate the code changes for missed edge cases:\n- See [Unimplemented](tests/Rector/Unimplemented)\n- `Enum::coerce()`: If only values were passed, you can replace it with `tryFrom()`.\n   If keys or instances could also be passed, you might need additional logic to cover this.\n- `Enum::$description` and `Enum::getDescription()`: Implement an alternative.\n- try/catch-blocks that handle `BenSampo\\Enum\\Exceptions\\InvalidEnumKeyException` or `BenSampo\\Enum\\Exceptions\\InvalidEnumMemberException`.\n  Either catch the `ValueError` thrown by native enums, or switch to using `tryFrom()` and handle `null`.\n\nOnce all enums are converted, you can remove your dependency on this library.\n\n## Enum Library\n\nBrowse and download from a list of commonly used, community contributed enums.\n\n[Enum library →](enum-library.md)\n\n## Basic Usage\n\n### Enum Definition\n\nYou can use the following Artisan command to generate a new enum class:\n\n```php\nphp artisan make:enum UserType\n```\n\nNow, you just need to add the possible values your enum can have as constants.\n\n```php\n<?php declare(strict_types=1);\n\nnamespace App\\Enums;\n\nuse BenSampo\\Enum\\Enum;\n\nfinal class UserType extends Enum\n{\n    const Administrator = 0;\n    const Moderator = 1;\n    const Subscriber = 2;\n    const SuperAdministrator = 3;\n}\n```\n\nThat's it! Note that because the enum values are defined as plain constants,\nyou can simply access them like any other class constant.\n\n```php\nUserType::Administrator // Has a value of 0\n```\n\n### Instantiation\n\nIt can be useful to instantiate enums in order to pass them between functions\nwith the benefit of type hinting.\n\nAdditionally, it's impossible to instantiate an enum with an invalid value,\ntherefore you can be certain that the passed value is always valid.\n\nFor convenience, enums can be instantiated in multiple ways:\n\n```php\n// Standard new PHP class, passing the desired enum value as a parameter\n$enumInstance = new UserType(UserType::Administrator);\n\n// Same as the constructor, instantiate by value\n$enumInstance = UserType::fromValue(UserType::Administrator);\n\n// Use an enum key instead of its value\n$enumInstance = UserType::fromKey('Administrator');\n\n// Statically calling the key name as a method, utilizing __callStatic magic\n$enumInstance = UserType::Administrator();\n\n// Attempt to instantiate a new Enum using the given key or value. Returns null if the Enum cannot be instantiated.\n$enumInstance = UserType::coerce($someValue);\n```\n\nIf you want your IDE to autocomplete the static instantiation helpers, you can\ngenerate PHPDoc annotations through an artisan command.\n\nBy default, all Enums in `app/Enums` will be annotated (you can change the folder by passing a path to `--folder`).\n\n```sh\nphp artisan enum:annotate\n```\n\nYou can annotate a single class by specifying the class name.\n\n```sh\nphp artisan enum:annotate \"App\\Enums\\UserType\"\n```\n\n### Instance Properties\n\nOnce you have an enum instance, you can access the `key`, `value` and `description` as properties.\n\n```php\n$userType = UserType::fromValue(UserType::SuperAdministrator);\n\n$userType->key; // SuperAdministrator\n$userType->value; // 3\n$userType->description; // Super Administrator\n```\n\nThis is particularly useful if you're passing an enum instance to a blade view.\n\n### Instance Casting\n\nEnum instances can be cast to strings as they implement the `__toString()` magic method.  \nThis also means they can be echoed in blade views, for example.\n\n```php\n$userType = UserType::fromValue(UserType::SuperAdministrator);\n\n(string) $userType // '3'\n```\n\n### Instance Equality\n\nYou can check the equality of an instance against any value by passing it to the `is` method.\nFor convenience, there is also an `isNot` method which is the exact reverse of the `is` method.\n\n```php\n$admin = UserType::Administrator();\n\n$admin->is(UserType::Administrator);   // true\n$admin->is($admin);                    // true\n$admin->is(UserType::Administrator()); // true\n\n$admin->is(UserType::Moderator);       // false\n$admin->is(UserType::Moderator());     // false\n$admin->is('random-value');            // false\n```\n\nYou can also check to see if the instance's value matches against an array of possible values using the `in` method,\nand use `notIn` to check if instance value is not in an array of values.\nIterables can also be checked against.\n\n```php\n$admin = UserType::Administrator();\n\n$admin->in([UserType::Moderator, UserType::Administrator]);     // true\n$admin->in([UserType::Moderator(), UserType::Administrator()]); // true\n\n$admin->in([UserType::Moderator, UserType::Subscriber]);        // false\n$admin->in(['random-value']);                                   // false\n\n$admin->notIn([UserType::Moderator, UserType::Administrator]);     // false\n$admin->notIn([UserType::Moderator(), UserType::Administrator()]); // false\n\n$admin->notIn([UserType::Moderator, UserType::Subscriber]);        // true\n$admin->notIn(['random-value']);                                   // true\n```\n\nThe instantiated enums are not singletons, rather a new object is created every time.\nThus, strict comparison `===` of different enum instances will always return `false`, no matter the value.\nIn contrast, loose comparison `==` will depend on the value.\n\n```php\n$admin = UserType::Administrator();\n\n$admin === UserType::Administrator();                    // false\nUserType::Administrator() === UserType::Administrator(); // false\n$admin === UserType::Moderator();                        // false\n\n$admin === $admin;                                       // true\n\n$admin == UserType::Administrator(); // true\n$admin == UserType::Administrator;   // true\n\n$admin == UserType::Moderator();     // false\n$admin == UserType::Moderator;       // false\n```\n\n### Type Hinting\n\nOne of the benefits of enum instances is that it enables you to use type hinting, as shown below.\n\n```php\nfunction canPerformAction(UserType $userType)\n{\n    if ($userType->is(UserType::SuperAdministrator)) {\n        return true;\n    }\n\n    return false;\n}\n\n$userType1 = UserType::fromValue(UserType::SuperAdministrator);\n$userType2 = UserType::fromValue(UserType::Moderator);\n\ncanPerformAction($userType1); // Returns true\ncanPerformAction($userType2); // Returns false\n```\n\n## Flagged/Bitwise Enum\n\nStandard enums represent a single value at a time, but flagged or bitwise enums are capable of of representing multiple values simultaneously. This makes them perfect for when you want to express multiple selections of a limited set of options. A good example of this would be user permissions where there are a limited number of possible permissions but a user can have none, some or all of them.\n\nYou can create a flagged enum using the following artisan command:\n\n`php artisan make:enum UserPermissions --flagged`\n\n### Defining values\n\nWhen defining values you must use powers of 2, the easiest way to do this is by using the _shift left_ `<<` operator like so:\n\n```php\nfinal class UserPermissions extends FlaggedEnum\n{\n    const ReadComments      = 1 << 0;\n    const WriteComments     = 1 << 1;\n    const EditComments      = 1 << 2;\n    const DeleteComments    = 1 << 3;\n    // The next one would be `1 << 4` and so on...\n}\n```\n\n### Defining shortcuts\n\nYou can use the bitwise _or_ `|` to set a shortcut value which represents a given set of values.\n\n```php\nfinal class UserPermissions extends FlaggedEnum\n{\n    const ReadComments      = 1 << 0;\n    const WriteComments     = 1 << 1;\n    const EditComments      = 1 << 2;\n    const DeleteComments    = 1 << 3;\n\n    // Shortcuts\n    const Member = self::ReadComments | self::WriteComments; // Read and write.\n    const Moderator = self::Member | self::EditComments; // All the permissions a Member has, plus Edit.\n    const Admin = self::Moderator | self::DeleteComments; // All the permissions a Moderator has, plus Delete.\n}\n```\n\n### Instantiating a flagged enum\n\nThere are couple of ways to instantiate a flagged enum:\n\n```php\n// Standard new PHP class, passing the desired enum values as an array of values or array of enum instances\n$permissions = new UserPermissions([UserPermissions::ReadComments, UserPermissions::EditComments]);\n$permissions = new UserPermissions([UserPermissions::ReadComments(), UserPermissions::EditComments()]);\n\n// Static flags method, again passing the desired enum values as an array of values or array of enum instances\n$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::EditComments]);\n$permissions = UserPermissions::flags([UserPermissions::ReadComments(), UserPermissions::EditComments()]);\n```\n\n[Attribute casting](#attribute-casting) works in the same way as single value enums.\n\n### Empty flagged enums\n\nFlagged enums can contain no value at all. Every flagged enum has a pre-defined constant of `None` which is comparable to `0`.\n\n```php\nUserPermissions::flags([])->value === UserPermissions::None; // True\n```\n\n### Flagged enum methods\n\nIn addition to the standard enum methods, there are a suite of helpful methods available on flagged enums.\n\nNote: Anywhere where a static property is passed, you can also pass an enum instance.\n\n#### setFlags(array $flags): Enum\n\nSet the flags for the enum to the given array of flags.\n\n```php\n$permissions = UserPermissions::flags([UserPermissions::ReadComments]);\n$permissions->flags([UserPermissions::EditComments, UserPermissions::DeleteComments]); // Flags are now: EditComments, DeleteComments.\n```\n\n#### addFlag($flag): Enum\n\nAdd the given flag to the enum\n\n```php\n$permissions = UserPermissions::flags([UserPermissions::ReadComments]);\n$permissions->addFlag(UserPermissions::EditComments); // Flags are now: ReadComments, EditComments.\n```\n\n#### addFlags(array $flags): Enum\n\nAdd the given flags to the enum\n\n```php\n$permissions = UserPermissions::flags([UserPermissions::ReadComments]);\n$permissions->addFlags([UserPermissions::EditComments, UserPermissions::WriteComments]); // Flags are now: ReadComments, EditComments, WriteComments.\n```\n\n#### addAllFlags(): Enum\n\nAdd all flags to the enum\n\n```php\n$permissions = UserPermissions::flags([UserPermissions::ReadComments]);\n$permissions->addAllFlags(); // Enum now has all flags\n```\n\n#### removeFlag($flag): Enum\n\nRemove the given flag from the enum\n\n```php\n$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::WriteComments]);\n$permissions->removeFlag(UserPermissions::ReadComments); // Flags are now: WriteComments.\n```\n\n#### removeFlags(array $flags): Enum\n\nRemove the given flags from the enum\n\n```php\n$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::WriteComments, UserPermissions::EditComments]);\n$permissions->removeFlags([UserPermissions::ReadComments, UserPermissions::WriteComments]); // Flags are now: EditComments.\n```\n\n#### removeAllFlags(): Enum\n\nRemove all flags from the enum\n\n```php\n$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::WriteComments]);\n$permissions->removeAllFlags();\n```\n\n#### hasFlag($flag): bool\n\nCheck if the enum has the specified flag.\n\n```php\n$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::WriteComments]);\n$permissions->hasFlag(UserPermissions::ReadComments); // True\n$permissions->hasFlag(UserPermissions::EditComments); // False\n```\n\n#### hasFlags(array $flags): bool\n\nCheck if the enum has all of the specified flags.\n\n```php\n$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::WriteComments]);\n$permissions->hasFlags([UserPermissions::ReadComments, UserPermissions::WriteComments]); // True\n$permissions->hasFlags([UserPermissions::ReadComments, UserPermissions::EditComments]); // False\n```\n\n#### notHasFlag($flag): bool\n\nCheck if the enum does not have the specified flag.\n\n```php\n$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::WriteComments]);\n$permissions->notHasFlag(UserPermissions::EditComments); // True\n$permissions->notHasFlag(UserPermissions::ReadComments); // False\n```\n\n#### notHasFlags(array $flags): bool\n\nCheck if the enum doesn't have any of the specified flags.\n\n```php\n$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::WriteComments]);\n$permissions->notHasFlags([UserPermissions::ReadComments, UserPermissions::EditComments]); // True\n$permissions->notHasFlags([UserPermissions::ReadComments, UserPermissions::WriteComments]); // False\n```\n\n#### getFlags(): Enum[]\n\nReturn the flags as an array of instances.\n\n```php\n$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::WriteComments]);\n$permissions->getFlags(); // [UserPermissions::ReadComments(), UserPermissions::WriteComments()];\n```\n\n#### hasMultipleFlags(): bool\n\nCheck if there are multiple flags set on the enum.\n\n```php\n$permissions = UserPermissions::flags([UserPermissions::ReadComments, UserPermissions::WriteComments]);\n$permissions->hasMultipleFlags(); // True;\n$permissions->removeFlag(UserPermissions::ReadComments)->hasMultipleFlags(); // False\n```\n\n#### getBitmask(): int\n\nGet the bitmask for the enum.\n\n```php\nUserPermissions::Member()->getBitmask(); // 11;\nUserPermissions::Moderator()->getBitmask(); // 111;\nUserPermissions::Admin()->getBitmask(); // 1111;\nUserPermissions::DeleteComments()->getBitmask(); // 1000;\n```\n\n### Flagged enums in Eloquent queries\n\nTo use flagged enums directly in your Eloquent queries, you may use the `QueriesFlaggedEnums` trait on your model which provides you with the following methods:\n\n#### hasFlag($column, $flag): Builder\n\n```php\nUser::hasFlag('permissions', UserPermissions::DeleteComments())->get();\n```\n\n#### notHasFlag($column, $flag): Builder\n\n```php\nUser::notHasFlag('permissions', UserPermissions::DeleteComments())->get();\n```\n\n#### hasAllFlags($column, $flags): Builder\n\n```php\nUser::hasAllFlags('permissions', [UserPermissions::EditComment(), UserPermissions::ReadComment()])->get();\n```\n\n#### hasAnyFlags($column, $flags): Builder\n\n```php\nUser::hasAnyFlags('permissions', [UserPermissions::DeleteComments(), UserPermissions::EditComments()])->get();\n```\n\n## Attribute Casting\n\nYou may cast model attributes to enums using Laravel's built in custom casting. This will cast the attribute to an enum instance when getting and back to the enum value when setting.\nSince `Enum::class` implements the `Castable` contract, you just need to specify the classname of the enum:\n\n```php\nuse BenSampo\\Enum\\Tests\\Enums\\UserType;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Example extends Model\n{\n    protected $casts = [\n        'random_flag' => 'boolean',     // Example standard laravel cast\n        'user_type' => UserType::class, // Example enum cast\n    ];\n}\n```\n\nNow, when you access the `user_type` attribute of your `Example` model,\nthe underlying value will be returned as a `UserType` enum.\n\n```php\n$example = Example::first();\n$example->user_type // Instance of UserType\n```\n\nReview the [methods and properties available on enum instances](#instantiation) to get the most out of attribute casting.\n\nYou can set the value by either passing the enum value or another enum instance.\n\n```php\n$example = Example::first();\n\n// Set using enum value\n$example->user_type = UserType::Moderator;\n\n// Set using enum instance\n$example->user_type = UserType::Moderator();\n```\n\n### Customising `$model->toArray()` behaviour\n\nWhen using `toArray` (or returning model/models from your controller as a response) Laravel will call the `toArray` method on the enum instance.\n\nBy default, this will return only the value in its native type. You may want to also have access to the other properties (key, description), for example to return\nto javascript app.\n\nTo customise this behaviour, you can override the `toArray` method on the enum instance.\n\n```php\n// Example Enum\nfinal class UserType extends Enum\n{\n    const ADMINISTRATOR = 0;\n    const MODERATOR = 1;\n}\n\n$instance = UserType::Moderator();\n\n// Default\npublic function toArray()\n{\n    return $this->value;\n}\n// Returns int(1)\n\n// Return all properties\npublic function toArray()\n{\n    return $this;\n}\n// Returns an array of all the properties\n// array(3) {\n//  [\"value\"]=>\n//  int(1)\"\n//  [\"key\"]=>\n//  string(9) \"MODERATOR\"\n//  [\"description\"]=>\n//  string(9) \"Moderator\"\n// }\n\n```\n\n### Casting underlying native types\n\nMany databases return everything as strings (for example, an integer may be returned as the string `'1'`).\nTo reduce friction for users of the library, we use type coercion to figure out the intended value. If you'd prefer to control this, you can override the `parseDatabase` static method on your enum class:\n\n```php\nfinal class UserType extends Enum\n{\n    const Administrator = 0;\n    const Moderator = 1;\n\n    public static function parseDatabase($value)\n    {\n        return (int) $value;\n    }\n}\n```\n\nReturning `null` from the `parseDatabase` method will cause the attribute on the model to also be `null`. This can be useful if your database stores inconsistent blank values such as empty strings instead of `NULL`.\n\n### Model Annotation\n\nIf you're casting attributes on your model to enums, the [laravel-ide-helper](https://github.com/barryvdh/laravel-ide-helper) package can be used to automatically generate property docblocks for you.\n\n## Migrations\n\n### Recommended\n\nBecause enums enforce consistency at the code level it's not necessary to do so again at the database level, therefore the recommended type for database columns is `string` or `int` depending on your enum values. This means you can add/remove enum values in your code without worrying about your database layer.\n\n```php\nuse App\\Enums\\UserType;\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up(): void\n    {\n        Schema::table('users', function (Blueprint $table): void {\n            $table->bigIncrements('id');\n            $table->timestamps();\n            $table->string('type')\n                ->default(UserType::Moderator);\n        });\n    }\n}\n```\n\n### Using `enum` column type\n\nAlternatively you may use `Enum` classes in your migrations to define enum columns.\nThe enum values must be defined as strings.\n\n```php\nuse App\\Enums\\UserType;\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up(): void\n    {\n        Schema::table('users', function (Blueprint $table): void {\n            $table->bigIncrements('id');\n            $table->timestamps();\n            $table->enum('type', UserType::getValues())\n                ->default(UserType::Moderator);\n        });\n    }\n}\n```\n\n## Validation\n\n### Array Validation\n\n#### Enum value\n\nYou may validate that an enum value passed to a controller is a valid value for a given enum by using the `EnumValue` rule.\n\n```php\nuse BenSampo\\Enum\\Rules\\EnumValue;\n\npublic function store(Request $request)\n{\n    $this->validate($request, [\n        'user_type' => ['required', new EnumValue(UserType::class)],\n    ]);\n}\n```\n\nBy default, type checking is set to strict, but you can bypass this by passing `false` to the optional second parameter of the EnumValue class.\n\n```php\nnew EnumValue(UserType::class, false) // Turn off strict type checking.\n```\n\n#### Enum key\n\nYou can also validate on keys using the `EnumKey` rule. This is useful if you're taking the enum key as a URL parameter for sorting or filtering for example.\n\n```php\nuse BenSampo\\Enum\\Rules\\EnumKey;\n\npublic function store(Request $request)\n{\n    $this->validate($request, [\n        'user_type' => ['required', new EnumKey(UserType::class)],\n    ]);\n}\n```\n\n#### Enum instance\n\nAdditionally you can validate that a parameter is an instance of a given enum.\n\n```php\nuse BenSampo\\Enum\\Rules\\Enum;\n\npublic function store(Request $request)\n{\n    $this->validate($request, [\n        'user_type' => ['required', new Enum(UserType::class)],\n    ]);\n}\n```\n\n### Pipe Validation\n\nYou can also use the 'pipe' syntax for rules.\n\n**enum_value**_:enum_class,[strict]_  \n**enum_key**_:enum_class_  \n**enum**_:enum_class_\n\n```php\n'user_type' => 'required|enum_value:' . UserType::class,\n'user_type' => 'required|enum_key:' . UserType::class,\n'user_type' => 'required|enum:' . UserType::class,\n```\n\n## Localization\n\n### Validation messages\n\nRun the following command to publish the language files to your `lang` folder.\n\n```\nphp artisan vendor:publish --provider=\"BenSampo\\Enum\\EnumServiceProvider\" --tag=\"translations\"\n```\n\n### Enum descriptions\n\nYou can translate the strings returned by the `getDescription` method using Laravel's built-in [localization](https://laravel.com/docs/localization) features.\n\nAdd a new `enums.php` keys file for each of your supported languages. In this example there is one for English and one for Spanish.\n\n```php\n// lang/en/enums.php\n<?php declare(strict_types=1);\n\nuse App\\Enums\\UserType;\n\nreturn [\n\n    UserType::class => [\n        UserType::Administrator => 'Administrator',\n        UserType::SuperAdministrator => 'Super administrator',\n    ],\n\n];\n```\n\n```php\n// lang/es/enums.php\n<?php declare(strict_types=1);\n\nuse App\\Enums\\UserType;\n\nreturn [\n\n    UserType::class => [\n        UserType::Administrator => 'Administrador',\n        UserType::SuperAdministrator => 'Súper administrador',\n    ],\n\n];\n```\n\nNow, you just need to make sure that your enum implements the `LocalizedEnum` interface as demonstrated below:\n\n```php\nuse BenSampo\\Enum\\Enum;\nuse BenSampo\\Enum\\Contracts\\LocalizedEnum;\n\nfinal class UserType extends Enum implements LocalizedEnum\n{\n    // ...\n}\n```\n\nThe `getDescription` method will now look for the value in your localization files. If a value doesn't exist for a given key, the default description is returned instead.\n\n## Customizing descriptions\n\n### Customizing class description\n\nIf you'd like to return a custom description for your enum class, add a `Description` attribute to your Enum class:\n\n```php\nuse BenSampo\\Enum\\Enum;\nuse BenSampo\\Enum\\Attributes\\Description;\n\n#[Description('List of available User types')]\nfinal class UserType extends Enum\n{\n    ...\n}\n```\n\nCalling `UserType::getClassDescription()` now returns `List of available User types` instead of `User type`.\n\nYou may also override the `getClassDescription` method on the base Enum class if you wish to have more control of the description.\n\n### Customizing value descriptions\n\nIf you'd like to return a custom description for your enum values, add a `Description` attribute to your Enum constants:\n\n```php\nuse BenSampo\\Enum\\Enum;\nuse BenSampo\\Enum\\Attributes\\Description;\n\nfinal class UserType extends Enum\n{\n    const Administrator = 'Administrator';\n\n    #[Description('Super admin')]\n    const SuperAdministrator = 'SuperAdministrator';\n}\n```\n\nCalling `UserType::SuperAdministrator()->description` now returns `Super admin` instead of `Super administrator`.\n\nYou may also override the `getDescription` method on the base Enum class if you wish to have more control of the description.\n\n## Extending the Enum Base Class\n\nThe `Enum` base class implements the [Laravel `Macroable`](https://laravel.com/api/9.x/Illuminate/Support/Traits/Macroable.html) trait, meaning it's easy to extend it with your own functions. If you have a function that you often add to each of your enums, you can use a macro.\n\nLet's say we want to be able to get a flipped version of the enum `asArray` method, we can do this using:\n\n```php\nEnum::macro('asFlippedArray', function() {\n    return array_flip(self::asArray());\n});\n```\n\nNow, on each of my enums, I can call it using `UserType::asFlippedArray()`.\n\nIt's best to register the macro inside a service providers' boot method.\n\n## Laravel Nova Integration\n\nUse the [nova-enum-field](https://github.com/simplesquid/nova-enum-field) package by Simple Squid to easily create fields for your Enums in Nova. See their readme for usage.\n\n## PHPStan Integration\n\nIf you are using [PHPStan](https://github.com/phpstan/phpstan) for static analysis, enable the extension for:\n- proper recognition of the magic instantiation methods\n- detection of duplicate enum values\n\nUse [PHPStan Extension Installer](https://github.com/phpstan/extension-installer) or add the following to your projects `phpstan.neon` includes:\n\n```neon\nincludes:\n- vendor/bensampo/laravel-enum/extension.neon\n```\n\n## Artisan Command List\n\n### `php artisan make:enum`\n\nCreate a new enum class. Pass `--flagged` as an option to create a flagged enum.  \n[Find out more](#enum-definition)\n\n### `php artisan enum:annotate`\n\nGenerate DocBlock annotations for enum classes.  \n[Find out more](#instantiation)\n\n### `php artisan enum:to-native`\n\nSee [migrate to native PHP enums](#migrate-to-native-php-enums).\n\n## Enum Class Reference\n\n### static getKeys(mixed $values = null): array\n\nReturns an array of all or a custom set of the keys for an enum.\n\n```php\nUserType::getKeys(); // Returns ['Administrator', 'Moderator', 'Subscriber', 'SuperAdministrator']\nUserType::getKeys(UserType::Administrator); // Returns ['Administrator']\nUserType::getKeys(UserType::Administrator, UserType::Moderator); // Returns ['Administrator', 'Moderator']\nUserType::getKeys([UserType::Administrator, UserType::Moderator]); // Returns ['Administrator', 'Moderator']\n```\n\n### static getValues(mixed $keys = null): array\n\nReturns an array of all or a custom set of the values for an enum.\n\n```php\nUserType::getValues(); // Returns [0, 1, 2, 3]\nUserType::getValues('Administrator'); // Returns [0]\nUserType::getValues('Administrator', 'Moderator'); // Returns [0, 1]\nUserType::getValues(['Administrator', 'Moderator']); // Returns [0, 1]\n```\n\n### static getKey(mixed $value): string\n\nReturns the key for the given enum value.\n\n```php\nUserType::getKey(1); // Returns 'Moderator'\nUserType::getKey(UserType::Moderator); // Returns 'Moderator'\n```\n\n### static getValue(string $key): mixed\n\nReturns the value for the given enum key.\n\n```php\nUserType::getValue('Moderator'); // Returns 1\n```\n\n### static hasKey(string $key): bool\n\nCheck if the enum contains a given key.\n\n```php\nUserType::hasKey('Moderator'); // Returns 'True'\n```\n\n### static hasValue(mixed $value, bool $strict = true): bool\n\nCheck if the enum contains a given value.\n\n```php\nUserType::hasValue(1); // Returns 'True'\n\n// It's possible to disable the strict type checking:\nUserType::hasValue('1'); // Returns 'False'\nUserType::hasValue('1', false); // Returns 'True'\n```\n\n### static getClassDescription(): string\n\nReturns the class name in sentence case for the enum class. It's possible to [customize the description](#customizing-descriptions) if the guessed description is not appropriate.\n\n```php\nUserType::getClassDescription(); // Returns 'User type'\n```\n\n### static getDescription(mixed $value): string\n\nReturns the key in sentence case for the enum value. It's possible to [customize the description](#customizing-descriptions) if the guessed description is not appropriate.\n\n```php\nUserType::getDescription(3); // Returns 'Super administrator'\nUserType::getDescription(UserType::SuperAdministrator); // Returns 'Super administrator'\n```\n\n### static getRandomKey(): string\n\nReturns a random key from the enum. Useful for factories.\n\n```php\nUserType::getRandomKey(); // Returns 'Administrator', 'Moderator', 'Subscriber' or 'SuperAdministrator'\n```\n\n### static getRandomValue(): mixed\n\nReturns a random value from the enum. Useful for factories.\n\n```php\nUserType::getRandomValue(); // Returns 0, 1, 2 or 3\n```\n\n### static getRandomInstance(): mixed\n\nReturns a random instance of the enum. Useful for factories.\n\n```php\nUserType::getRandomInstance(); // Returns an instance of UserType with a random value\n```\n\n### static asArray(): array\n\nReturns the enum key value pairs as an associative array.\n\n```php\nUserType::asArray(); // Returns ['Administrator' => 0, 'Moderator' => 1, 'Subscriber' => 2, 'SuperAdministrator' => 3]\n```\n\n### static asSelectArray(): array\n\nReturns the enum for use in a select as value => description.\n\n```php\nUserType::asSelectArray(); // Returns [0 => 'Administrator', 1 => 'Moderator', 2 => 'Subscriber', 3 => 'Super administrator']\n```\n\n### static fromValue(mixed $enumValue): Enum\n\nReturns an instance of the called enum. Read more about [enum instantiation](#instantiation).\n\n```php\nUserType::fromValue(UserType::Administrator); // Returns instance of Enum with the value set to UserType::Administrator\n```\n\n### static getInstances(): array\n\nReturns an array of all possible instances of the called enum, keyed by the constant names.\n\n```php\nvar_dump(UserType::getInstances());\n\narray(4) {\n  'Administrator' =>\n  class BenSampo\\Enum\\Tests\\Enums\\UserType#415 (3) {\n    public $key =>\n    string(13) \"Administrator\"\n    public $value =>\n    int(0)\n    public $description =>\n    string(13) \"Administrator\"\n  }\n  'Moderator' =>\n  class BenSampo\\Enum\\Tests\\Enums\\UserType#396 (3) {\n    public $key =>\n    string(9) \"Moderator\"\n    public $value =>\n    int(1)\n    public $description =>\n    string(9) \"Moderator\"\n  }\n  'Subscriber' =>\n  class BenSampo\\Enum\\Tests\\Enums\\UserType#393 (3) {\n    public $key =>\n    string(10) \"Subscriber\"\n    public $value =>\n    int(2)\n    public $description =>\n    string(10) \"Subscriber\"\n  }\n  'SuperAdministrator' =>\n  class BenSampo\\Enum\\Tests\\Enums\\UserType#102 (3) {\n    public $key =>\n    string(18) \"SuperAdministrator\"\n    public $value =>\n    int(3)\n    public $description =>\n    string(19) \"Super administrator\"\n  }\n}\n```\n\n### static coerce(mixed $enumKeyOrValue): ?Enum\n\nAttempt to instantiate a new Enum using the given key or value. Returns null if the Enum cannot be instantiated.\n\n```php\nUserType::coerce(0); // Returns instance of UserType with the value set to UserType::Administrator\nUserType::coerce('Administrator'); // Returns instance of UserType with the value set to UserType::Administrator\nUserType::coerce(99); // Returns null (not a valid enum value)\n```\n\n## Stubs\n\nRun the following command to publish the stub files to the `stubs` folder in the root of your application.\n\n```shell\nphp artisan vendor:publish --provider=\"BenSampo\\Enum\\EnumServiceProvider\" --tag=\"stubs\"\n```\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 1.50390625,
          "content": "# Upgrade Guide\n\n## 6.x\n\n### Native types\n\nThe library now uses native types whenever possible.\nWhen you override methods or implement interfaces, you will need to add them.\n\n### `Enum::getDescription()` throws\n\nInstead of returning an empty string `''` on invalid values,\n`Enum::getDescription()` will throw an `InvalidEnumMemberException`.\n\n### Construct `InvalidEnumMemberException`\n\nThe constructor of `InvalidEnumMemberException` now expects the class name\nof an enum instead of an enum instance.\n\n## 5.x\n\n### Laravel 9 required\n\nLaravel `9` or higher is required.\n\n### PHP 8.0 required\n\nPHP `8.0` or higher is now required.\n\n## 4.x\n\n### Review use of Localization features\n\nYou should make sure that any enums using localization features are still translated as expected.\n\n## 3.x\n\n### Laravel 8 required\n\nLaravel `8` or higher is required.\n\n### PHP 7.3 required\n\nPHP `7.3` or higher is now required.\n\n## 2.x\n\n### Laravel 7.5 required\n\nLaravel `7.5` or higher is required for the new native attribute casting.\n\n### PHP 7.2 required\n\nPHP `7.2.5` or higher is now required.\n\n### Switch to native casting\n\nYou should update your models to use Laravel 7 native casting. Remove the trait and\nmove the casts from `$enumCasts` to `$casts`.\n\nTrait based casting is still present, but is now deprecated and will be removed in the next major version.\n\n```diff\n--use BenSampo\\Enum\\Traits\\CastsEnums;\n\nclass MyModel extends Model\n{\n-   use CastsEnums;\n\n-   protected $enumCasts = [\n+   protected $casts = [\n        'foo' => Foo::class,\n    ];\n```\n"
        },
        {
          "name": "branding",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.30078125,
          "content": "{\n    \"name\": \"bensampo/laravel-enum\",\n    \"description\": \"Simple, extensible and powerful enumeration implementation for Laravel.\",\n    \"license\": \"MIT\",\n    \"type\": \"library\",\n    \"keywords\": [\n        \"bensampo\",\n        \"enum\",\n        \"laravel\",\n        \"package\",\n        \"validation\"\n    ],\n    \"authors\": [\n        {\n            \"name\": \"Ben Sampson\",\n            \"homepage\": \"https://sampo.co.uk\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"Benedikt Franke\",\n            \"homepage\": \"https://franke.tech\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"homepage\": \"https://github.com/bensampo/laravel-enum\",\n    \"require\": {\n        \"php\": \"^8\",\n        \"composer/class-map-generator\": \"^1\",\n        \"illuminate/contracts\": \"^9 || ^10 || ^11\",\n        \"illuminate/support\": \"^9 || ^10 || ^11\",\n        \"laminas/laminas-code\": \"^3.4 || ^4\",\n        \"nikic/php-parser\": \"^4.13.2 || ^5\"\n    },\n    \"require-dev\": {\n        \"doctrine/dbal\": \"^3.4\",\n        \"ergebnis/composer-normalize\": \"^2.28.3\",\n        \"larastan/larastan\": \"^2.6.3\",\n        \"mll-lab/php-cs-fixer-config\": \"^5.4\",\n        \"mockery/mockery\": \"^1.5\",\n        \"orchestra/testbench\": \"^7.6.1 || ^8 || ^9\",\n        \"phpstan/extension-installer\": \"^1\",\n        \"phpstan/phpstan\": \"^1.8.2\",\n        \"phpstan/phpstan-mockery\": \"^1.1\",\n        \"phpstan/phpstan-phpunit\": \"^1.1.1\",\n        \"phpunit/phpunit\": \"^9.5.21 || ^10 || ^11\",\n        \"rector/rector\": \"^1\",\n        \"symplify/rule-doc-generator\": \"^11 || ^12 || ^13\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"autoload\": {\n        \"psr-4\": {\n            \"BenSampo\\\\Enum\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"BenSampo\\\\Enum\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"ergebnis/composer-normalize\": true,\n            \"phpstan/extension-installer\": true\n        },\n        \"sort-packages\": true\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"BenSampo\\\\Enum\\\\EnumServiceProvider\"\n            ]\n        },\n        \"phpstan\": {\n            \"includes\": [\n                \"extension.neon\"\n            ]\n        }\n    },\n    \"scripts\": {\n        \"post-autoload-dump\": [\n            \"@php vendor/bin/testbench package:discover\"\n        ]\n    }\n}\n"
        },
        {
          "name": "enum-library.md",
          "type": "blob",
          "size": 1.361328125,
          "content": "# Enum library\n\nA list of commonly used, community contributed enums.\n\nIf you wish to contribute an enum, please submit via a pull request.\n\n- [Countries](https://gist.github.com/sirthxalot/24507fb57964d1b7b660f08fdfebf9ce) - submitted by [Alexander Bösch](https://github.com/sirthxalot)\n- [Days of the week](https://gist.github.com/BenSampo/84ffa24efe2b1bc719aba8d1e666b7c3) - submitted by [Ben Sampson](https://github.com/bensampo)\n- [Flagged Days of the Week](https://gist.github.com/JoshuaDoshua/2815e101c0735ac9b833207ffce9ca8e) - submitted by [JoshuaDoshua](https://github.com/joshuadoshua)\n- [Months of the year](https://gist.github.com/BenSampo/46e620affe0e97e489e35e8bce914920) - submitted by [Ben Sampson](https://github.com/bensampo)\n- [Country calling codes](https://gist.github.com/MammutAlex/af182c622fc10991ce42f2397fb54e4a) - submitted by [Alex Kovalchuk](https://github.com/MammutAlex)\n- [RFC 5424 log levels](https://gist.github.com/othyn/fd2fb2e611de832398e42130f2f2143d) - submitted by [Ben Tindall](https://github.com/othyn), [RFC spec](https://tools.ietf.org/html/rfc5424).\n- [HTTP status codes](https://gist.github.com/MatteoGgl/16d28a0b908b2340a2f461fa3d95f807) - submitted by [Matteo Guglielmetti](https://github.com/MatteoGgl)\n- [MIME types](https://gist.github.com/Hodaifa98/4a470bcb0114e3dcde3f8337a27704f3) - submitted by [Hodaifa98](https://github.com/hodaifa98)\n"
        },
        {
          "name": "extension.neon",
          "type": "blob",
          "size": 0.2099609375,
          "content": "services:\n- class: BenSampo\\Enum\\PHPStan\\EnumMethodsClassReflectionExtension\n  tags:\n  - phpstan.broker.methodsClassReflectionExtension\n- class: BenSampo\\Enum\\PHPStan\\UniqueValuesRule\n  tags:\n  - phpstan.rules.rule\n"
        },
        {
          "name": "lang",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.98828125,
          "content": "includes:\n- extension.neon\nparameters:\n  level: 6 # TODO level up to max\n  paths:\n  - src\n  - tests\n  checkOctaneCompatibility: true\n  reportUnmatchedIgnoredErrors: false # As long as we support multiple Laravel versions at once, there will be some dead spots\n  treatPhpDocTypesAsCertain: false\n  ignoreErrors:\n  - '#Unsafe usage of new static.*#' # This is a library, so it should be extendable\n  # The Process API is only available in newer Laravel versions\n  - '#unknown class Illuminate\\\\Support\\\\Facades\\\\Process#'\n  - '#unknown class Illuminate\\\\Process#'\n  - '#invalid type Illuminate\\\\Process#'\n  - '#^Attribute class PHPUnit\\\\Framework\\\\Attributes\\\\DataProvider does not exist\\.$#' # Only available with newer PHPUnit versions\n  excludePaths:\n  - tests/Enums/ToNativeFixtures # Fails with PHP < 8.1\n  - tests/PHPStan/Fixtures\n  # Install https://plugins.jetbrains.com/plugin/7677-awesome-console to make those links clickable\n  editorUrl: '%%relFile%%:%%line%%'\n  editorUrlTitle: '%%relFile%%:%%line%%'\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.732421875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\">\n  <testsuites>\n    <!-- We have to separate those testsuites due to a conflict when requiring PhpParser, see https://github.com/rectorphp/rector/issues/6709 -->\n    <testsuite name=\"Tests\">\n      <directory>tests</directory>\n      <exclude>tests/Rector</exclude>\n    </testsuite>\n    <testsuite name=\"Rector\">\n      <directory>tests/Rector</directory>\n    </testsuite>\n  </testsuites>\n  <php>\n    <env name=\"DB_CONNECTION\" value=\"sqlite\"/>\n    <env name=\"DB_DATABASE\" value=\":memory:\"/>\n  </php>\n</phpunit>\n"
        },
        {
          "name": "rector-rules.md",
          "type": "blob",
          "size": 0.833984375,
          "content": "# 2 Rules Overview\n\n## ToNativeImplementationRector\n\nConvert usages of `BenSampo\\Enum\\Enum` to native PHP enums\n\n:wrench: **configure it!**\n\n- class: [`BenSampo\\Enum\\Rector\\ToNativeImplementationRector`](src/Rector/ToNativeImplementationRector.php)\n\n```diff\n-/**\n- * @method static static ADMIN()\n- * @method static static MEMBER()\n- *\n- * @extends Enum<int>\n- */\n-class UserType extends Enum\n+enum UserType : int\n {\n-    const ADMIN = 1;\n-    const MEMBER = 2;\n+    case ADMIN = 1;\n+    case MEMBER = 2;\n }\n```\n\n<br>\n\n## ToNativeUsagesRector\n\nConvert usages of `BenSampo\\Enum\\Enum` to native PHP enums\n\n:wrench: **configure it!**\n\n- class: [`BenSampo\\Enum\\Rector\\ToNativeUsagesRector`](src/Rector/ToNativeUsagesRector.php)\n\n```diff\n-$user = UserType::ADMIN();\n-$user->is(UserType::ADMIN);\n+$user = UserType::ADMIN;\n+$user === UserType::ADMIN;\n```\n\n<br>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}