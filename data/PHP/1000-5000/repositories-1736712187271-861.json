{
  "metadata": {
    "timestamp": 1736712187271,
    "page": 861,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "symfony/polyfill-util",
      "stars": 1324,
      "defaultBranch": "1.x",
      "files": [
        {
          "name": "Binary.php",
          "type": "blob",
          "size": 0.42578125,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Polyfill\\Util;\n\nif (\\extension_loaded('mbstring')) {\n    class Binary extends BinaryOnFuncOverload\n    {\n    }\n} else {\n    class Binary extends BinaryNoFuncOverload\n    {\n    }\n}\n"
        },
        {
          "name": "BinaryNoFuncOverload.php",
          "type": "blob",
          "size": 1.416015625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Polyfill\\Util;\n\n/**\n * @author Nicolas Grekas <p@tchwork.com>\n *\n * @internal\n */\nclass BinaryNoFuncOverload\n{\n    public static function strlen($s)\n    {\n        return \\strlen($s);\n    }\n\n    public static function strpos($haystack, $needle, $offset = 0)\n    {\n        return strpos($haystack, $needle, $offset);\n    }\n\n    public static function strrpos($haystack, $needle, $offset = 0)\n    {\n        return strrpos($haystack, $needle, $offset);\n    }\n\n    public static function substr($string, $start, $length = \\PHP_INT_MAX)\n    {\n        return substr($string, $start, $length);\n    }\n\n    public static function stripos($s, $needle, $offset = 0)\n    {\n        return stripos($s, $needle, $offset);\n    }\n\n    public static function stristr($s, $needle, $part = false)\n    {\n        return stristr($s, $needle, $part);\n    }\n\n    public static function strrchr($s, $needle, $part = false)\n    {\n        return strrchr($s, $needle, $part);\n    }\n\n    public static function strripos($s, $needle, $offset = 0)\n    {\n        return strripos($s, $needle, $offset);\n    }\n\n    public static function strstr($s, $needle, $part = false)\n    {\n        return strstr($s, $needle, $part);\n    }\n}\n"
        },
        {
          "name": "BinaryOnFuncOverload.php",
          "type": "blob",
          "size": 1.6005859375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Polyfill\\Util;\n\n/**\n * Binary safe version of string functions overloaded when MB_OVERLOAD_STRING is enabled.\n *\n * @author Nicolas Grekas <p@tchwork.com>\n *\n * @internal\n */\nclass BinaryOnFuncOverload\n{\n    public static function strlen($s)\n    {\n        return mb_strlen($s, '8bit');\n    }\n\n    public static function strpos($haystack, $needle, $offset = 0)\n    {\n        return mb_strpos($haystack, $needle, $offset, '8bit');\n    }\n\n    public static function strrpos($haystack, $needle, $offset = 0)\n    {\n        return mb_strrpos($haystack, $needle, $offset, '8bit');\n    }\n\n    public static function substr($string, $start, $length = 2147483647)\n    {\n        return mb_substr($string, $start, $length, '8bit');\n    }\n\n    public static function stripos($s, $needle, $offset = 0)\n    {\n        return mb_stripos($s, $needle, $offset, '8bit');\n    }\n\n    public static function stristr($s, $needle, $part = false)\n    {\n        return mb_stristr($s, $needle, $part, '8bit');\n    }\n\n    public static function strrchr($s, $needle, $part = false)\n    {\n        return mb_strrchr($s, $needle, $part, '8bit');\n    }\n\n    public static function strripos($s, $needle, $offset = 0)\n    {\n        return mb_strripos($s, $needle, $offset, '8bit');\n    }\n\n    public static function strstr($s, $needle, $part = false)\n    {\n        return mb_strstr($s, $needle, $part, '8bit');\n    }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (c) 2015-present Fabien Potencier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.23828125,
          "content": "Symfony Polyfill / Util\n=======================\n\nMore information can be found in the\n[main Polyfill README](https://github.com/symfony/polyfill/blob/main/README.md).\n\nLicense\n=======\n\nThis library is released under the [MIT license](LICENSE).\n"
        },
        {
          "name": "TestListener.php",
          "type": "blob",
          "size": 0.583984375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Polyfill\\Util;\n\nif (version_compare(\\PHPUnit\\Runner\\Version::id(), '9.1.0', '<')) {\n    class_alias('Symfony\\Polyfill\\Util\\TestListenerForV7', 'Symfony\\Polyfill\\Util\\TestListener');\n} else {\n    class_alias('Symfony\\Polyfill\\Util\\TestListenerForV9', 'Symfony\\Polyfill\\Util\\TestListener');\n}\n\nif (false) {\n    class TestListener\n    {\n    }\n}\n"
        },
        {
          "name": "TestListenerForV7.php",
          "type": "blob",
          "size": 2.27734375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Polyfill\\Util;\n\nuse PHPUnit\\Framework\\AssertionFailedError;\nuse PHPUnit\\Framework\\Test;\nuse PHPUnit\\Framework\\TestListener as TestListenerInterface;\nuse PHPUnit\\Framework\\TestSuite;\nuse PHPUnit\\Framework\\Warning;\nuse PHPUnit\\Framework\\WarningTestCase;\n\n/**\n * @author Ion Bazan <ion.bazan@gmail.com>\n */\nclass TestListenerForV7 extends TestSuite implements TestListenerInterface\n{\n    private $trait;\n\n    public function __construct(?TestSuite $suite = null)\n    {\n        if ($suite) {\n            $this->setName($suite->getName().' with polyfills enabled');\n            $this->addTest($suite);\n        }\n        $this->trait = new TestListenerTrait();\n    }\n\n    public function startTestSuite(TestSuite $suite): void\n    {\n        if (null === TestListenerTrait::$enabledPolyfills) {\n            TestListenerTrait::$enabledPolyfills = false;\n            $this->trait->startTestSuite($suite);\n        }\n        if ($suite instanceof TestListener) {\n            TestListenerTrait::$enabledPolyfills = $suite->getName();\n        }\n    }\n\n    public function addError(Test $test, \\Throwable $t, float $time): void\n    {\n        $this->trait->addError($test, $t, $time);\n    }\n\n    public function addWarning(Test $test, Warning $e, float $time): void\n    {\n    }\n\n    public function addFailure(Test $test, AssertionFailedError $e, float $time): void\n    {\n        $this->trait->addError($test, $e, $time);\n    }\n\n    public function addIncompleteTest(Test $test, \\Throwable $t, float $time): void\n    {\n    }\n\n    public function addRiskyTest(Test $test, \\Throwable $t, float $time): void\n    {\n    }\n\n    public function addSkippedTest(Test $test, \\Throwable $t, float $time): void\n    {\n    }\n\n    public function endTestSuite(TestSuite $suite): void\n    {\n        TestListenerTrait::$enabledPolyfills = false;\n    }\n\n    public function startTest(Test $test): void\n    {\n    }\n\n    public function endTest(Test $test, float $time): void\n    {\n    }\n\n    public static function warning($message): WarningTestCase\n    {\n        return new WarningTestCase($message);\n    }\n}\n"
        },
        {
          "name": "TestListenerForV9.php",
          "type": "blob",
          "size": 2.318359375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Polyfill\\Util;\n\nuse PHPUnit\\Framework\\AssertionFailedError;\nuse PHPUnit\\Framework\\Test;\nuse PHPUnit\\Framework\\TestListener as TestListenerInterface;\nuse PHPUnit\\Framework\\TestSuite;\nuse PHPUnit\\Framework\\Warning;\nuse PHPUnit\\Framework\\WarningTestCase;\n\nclass TestListenerForV9 extends TestSuite implements TestListenerInterface\n{\n    private $trait;\n\n    public function __construct(?TestSuite $suite = null)\n    {\n        if ($suite) {\n            $this->setName($suite->getName().' with polyfills enabled');\n            $this->addTest($suite);\n        }\n        $this->trait = new TestListenerTrait();\n    }\n\n    public function startTestSuite(TestSuite $suite): void\n    {\n        if (null === TestListenerTrait::$enabledPolyfills) {\n            TestListenerTrait::$enabledPolyfills = false;\n            $this->trait->startTestSuite($suite);\n        }\n        if ($suite instanceof TestListener) {\n            TestListenerTrait::$enabledPolyfills = $suite->getName();\n        }\n    }\n\n    public function addError(Test $test, \\Throwable $t, float $time): void\n    {\n        $this->trait->addError($test, $t, $time);\n    }\n\n    public function addWarning($test, ?Warning $e = null, ?float $time = null): void\n    {\n        if (\\is_string($test)) {\n            parent::addWarning($test);\n        }\n    }\n\n    public function addFailure(Test $test, AssertionFailedError $e, float $time): void\n    {\n        $this->trait->addError($test, $e, $time);\n    }\n\n    public function addIncompleteTest(Test $test, \\Throwable $t, float $time): void\n    {\n    }\n\n    public function addRiskyTest(Test $test, \\Throwable $t, float $time): void\n    {\n    }\n\n    public function addSkippedTest(Test $test, \\Throwable $t, float $time): void\n    {\n    }\n\n    public function endTestSuite(TestSuite $suite): void\n    {\n        TestListenerTrait::$enabledPolyfills = false;\n    }\n\n    public function startTest(Test $test): void\n    {\n    }\n\n    public function endTest(Test $test, float $time): void\n    {\n    }\n\n    public static function warning($message): WarningTestCase\n    {\n        return new WarningTestCase($message);\n    }\n}\n"
        },
        {
          "name": "TestListenerTrait.php",
          "type": "blob",
          "size": 6.978515625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Polyfill\\Util;\n\nuse PHPUnit\\Framework\\SkippedTestError;\nuse PHPUnit\\Util\\Test;\nuse Symfony\\Component\\VarDumper\\Caster\\ReflectionCaster;\nuse Symfony\\Component\\VarDumper\\Cloner\\Stub;\n\n/**\n * @author Nicolas Grekas <p@tchwork.com>\n */\nclass TestListenerTrait\n{\n    public static $enabledPolyfills;\n\n    public function startTestSuite($mainSuite)\n    {\n        $warnings = [];\n\n        foreach ($mainSuite->tests() as $suite) {\n            $testClass = $suite->getName();\n            if (!$tests = $suite->tests()) {\n                continue;\n            }\n            if (\\in_array('class-polyfill', Test::getGroups($testClass), true)) {\n                // TODO: check signatures for all polyfilled methods on PHP >= 8\n                continue;\n            }\n            $testedClass = new \\ReflectionClass($testClass);\n            if (preg_match('{^ \\* @requires PHP (.*)}mi', $testedClass->getDocComment(), $m) && version_compare($m[1], \\PHP_VERSION, '>')) {\n                continue;\n            }\n            if (!preg_match('/^(.+)\\\\\\\\Tests(\\\\\\\\.*)Test$/', $testClass, $m)) {\n                $mainSuite->addTest(TestListener::warning('Unknown naming convention for '.$testClass));\n                continue;\n            }\n            if (!class_exists($m[1].$m[2])) {\n                continue;\n            }\n            $testedClass = new \\ReflectionClass($m[1].$m[2]);\n            $bootstrap = \\dirname($testedClass->getFileName()).'/bootstrap';\n            $bootstrap = new \\SplFileObject($bootstrap.(\\PHP_VERSION_ID >= 80000 && file_exists($bootstrap.'80.php') ? '80' : '').'.php');\n            $newWarnings = 0;\n            $defLine = null;\n\n            foreach (new \\RegexIterator($bootstrap, '/define\\(\\'/') as $defLine) {\n                preg_match(\"/define\\('(?P<name>[^']++)'/\", $defLine, $matches);\n                if (\\defined($matches['name'])) {\n                    continue;\n                }\n\n                try {\n                    eval($defLine);\n                } catch (\\PHPUnit\\Framework\\Exception $ex) {\n                    $warnings[] = TestListener::warning($ex->getMessage());\n                    ++$newWarnings;\n                }\n            }\n\n            $bootstrap->rewind();\n\n            foreach (new \\RegexIterator($bootstrap, '/return p\\\\\\\\'.$testedClass->getShortName().'::/') as $defLine) {\n                if (!preg_match('/^\\s*function (?P<name>[^\\(]++)(?P<signature>\\(.*\\)(?: ?: [^ ]++)?) \\{ (?<return>return p\\\\\\\\'.$testedClass->getShortName().'::[^\\(]++)(?P<args>\\([^\\n]*?\\)); \\}$/', $defLine, $f)) {\n                    $warnings[] = TestListener::warning('Invalid line in '.$bootstrap->getPathname().': '.trim($defLine));\n                    ++$newWarnings;\n                    continue;\n                }\n                $testNamespace = substr($testClass, 0, strrpos($testClass, '\\\\'));\n                if (\\function_exists($testNamespace.'\\\\'.$f['name'])) {\n                    continue;\n                }\n\n                try {\n                    $r = new \\ReflectionFunction($f['name']);\n                    if ($r->isUserDefined()) {\n                        throw new \\ReflectionException();\n                    }\n                    if ('idn_to_ascii' === $f['name'] || 'idn_to_utf8' === $f['name']) {\n                        $defLine = sprintf('return PHP_VERSION_ID < 80000 && INTL_IDNA_VARIANT_2003 === $variant ? \\\\%s($domain, $options, $variant) : \\\\%1$s%s', $f['name'], $f['args']);\n                    } elseif (false !== strpos($f['signature'], '&') && 'idn_to_ascii' !== $f['name'] && 'idn_to_utf8' !== $f['name']) {\n                        $defLine = sprintf('return \\\\%s%s', $f['name'], $f['args']);\n                    } else {\n                        $defLine = sprintf(\"return \\\\call_user_func_array('%s', \\\\func_get_args())\", $f['name']);\n                    }\n                } catch (\\ReflectionException $e) {\n                    $r = null;\n                    $defLine = sprintf(\"throw new \\\\%s('Internal function not found: %s')\", SkippedTestError::class, $f['name']);\n                }\n\n                eval(<<<EOPHP\nnamespace {$testNamespace};\n\nuse Symfony\\Polyfill\\Util\\TestListenerTrait;\nuse {$testedClass->getNamespaceName()} as p;\n\nfunction {$f['name']}{$f['signature']}\n{\n    if ('{$testClass} with polyfills enabled' === TestListenerTrait::\\$enabledPolyfills) {\n        {$f['return']}{$f['args']};\n    }\n\n    {$defLine};\n}\nEOPHP\n                );\n\n                if (\\PHP_VERSION_ID >= 80000 && $r && false === strpos($bootstrap->getPath(), 'Php7') && false === strpos($bootstrap->getPath(), 'Php80')) {\n                    $originalSignature = ReflectionCaster::getSignature(ReflectionCaster::castFunctionAbstract($r, [], new Stub(), true));\n                    $polyfillSignature = ReflectionCaster::castFunctionAbstract(new \\ReflectionFunction($testNamespace.'\\\\'.$f['name']), [], new Stub(), true);\n                    $polyfillSignature = ReflectionCaster::getSignature($polyfillSignature);\n\n                    if ('mb_get_info' === $r->name && false === strpos($originalSignature, '|null') && false !== strpos($polyfillSignature, '|null')) {\n                        // Added to PHP 8.2.14/8.3.1\n                        $originalSignature .= '|null';\n                    }\n\n                    if (false === strpos($bootstrap->getPath(), '80.php')) {\n                        // mixed return type cannot be used before PHP 8\n                        $originalSignature = str_replace(': mixed', '', $originalSignature);\n                    }\n\n                    $map = [\n                        '?' => '',\n                        'array|string|null $string' => 'array|string $string',\n                        'array|string|null $from_encoding = null' => 'array|string|null $from_encoding = null',\n                        'array|string|null $from_encoding' => 'array|string $from_encoding',\n                    ];\n\n                    if (strtr($polyfillSignature, $map) !== str_replace('?', '', $originalSignature)) {\n                        $warnings[] = TestListener::warning(\"Incompatible signature for PHP >= 8:\\n- {$f['name']}$originalSignature\\n+ {$f['name']}$polyfillSignature\");\n                    }\n                }\n            }\n            if (!$newWarnings && null === $defLine) {\n                $warnings[] = TestListener::warning('No polyfills found in bootstrap.php for '.$testClass);\n            } else {\n                $mainSuite->addTest(new TestListener($suite));\n            }\n        }\n        foreach ($warnings as $w) {\n            $mainSuite->addTest($w);\n        }\n    }\n\n    public function addError($test, \\Exception $e, $time)\n    {\n        if (false !== self::$enabledPolyfills) {\n            $r = new \\ReflectionProperty('Exception', 'message');\n            $r->setAccessible(true);\n            $r->setValue($e, 'Polyfills enabled, '.$r->getValue($e));\n        }\n    }\n}\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.78515625,
          "content": "{\n    \"name\": \"symfony/polyfill-util\",\n    \"type\": \"library\",\n    \"description\": \"Symfony utilities for portability of PHP codes\",\n    \"keywords\": [\"polyfill\", \"shim\", \"compat\", \"compatibility\"],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Nicolas Grekas\",\n            \"email\": \"p@tchwork.com\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=7.2\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Symfony\\\\Polyfill\\\\Util\\\\\": \"\" }\n    },\n    \"minimum-stability\": \"dev\",\n    \"extra\": {\n        \"thanks\": {\n            \"name\": \"symfony/polyfill\",\n            \"url\": \"https://github.com/symfony/polyfill\"\n        }\n    }\n}\n"
        }
      ]
    }
  ]
}