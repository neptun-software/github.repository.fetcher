{
  "metadata": {
    "timestamp": 1736711886260,
    "page": 249,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "orangehill/iseed",
      "stars": 2791,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0615234375,
          "content": "/vendor\ncomposer.phar\ncomposer.lock\n.DS_Store\n.idea\n.phpunit.*\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1806640625,
          "content": "language: php\r\n\r\nphp:\r\n  - 7.2\r\n  - 7.3\r\n  - 7.4\r\n  - 8.0\r\n\r\nbefore_script:\r\n  - curl -s http://getcomposer.org/installer | php\r\n  - php composer.phar install --dev\r\n\r\nscript: phpunit\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.275390625,
          "content": "Copyright (c) 2013, Orange Hill Development\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n  Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n  Redistributions in binary form must reproduce the above copyright notice, this\n  list of conditions and the following disclaimer in the documentation and/or\n  other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.291015625,
          "content": "**Inverse seed generator (iSeed)** is a Laravel package that provides a method to generate a new seed file based on data from the existing database table.\n\n[![Build Status](https://travis-ci.org/orangehill/iseed.png)](http://travis-ci.org/orangehill/iseed)\n[![Latest Stable Version](https://poser.pugx.org/orangehill/iseed/v/stable.png)](https://packagist.org/packages/orangehill/iseed) [![Total Downloads](https://poser.pugx.org/orangehill/iseed/downloads.png)](https://packagist.org/packages/orangehill/iseed)\n[![Analytics](https://ga-beacon.appspot.com/UA-1936460-35/iseed?useReferrer&flat)](https://github.com/igrigorik/ga-beacon)\n\n## Installation\n\n### 1. Require with [Composer](https://getcomposer.org/)\n```sh\ncomposer require orangehill/iseed\n```\n\n**Laravel 5.3.7 and below** or **Laravel 4** need specific version\n\n```sh\ncomposer require orangehill/iseed:2.2 # Laravel 5.3.7 and below\ncomposer require orangehill/iseed:1.1 # Laravel 4\n```\n\n### 2. Add Service Provider (Laravel 5.4 and below)\n\nLatest Laravel versions have auto dicovery and automatically add service provider - if you're using 5.4.x and below, remember to add it to `providers` array at `/app/config/app.php`:\n\n```php\n// ...\nOrangehill\\Iseed\\IseedServiceProvider::class,\n```\n\n## Artisan command options\n\n### [table_name]\nMandatory parameter which defines which table/s will be used for seed creation.\nUse CSV notation for multiple tables. Seed file will be generated for each table.\n\nExamples:\n```\nphp artisan iseed my_table\n```\n```\nphp artisan iseed my_table,another_table\n```\n\n### classnameprefix & classnamesuffix\nOptionally specify a prefix or suffix for the Seeder class name and file name.\nThis is useful if you want to create an additional seed for a table that has an existing seed without overwriting the existing one.\n\nExamples:\n\n```\nphp artisan iseed my_table --classnameprefix=Customized\n```\noutputs CustomizedMyTableSeeder.php\n\n```\nphp artisan iseed my_table,another_table --classnameprefix=Customized\n```\noutputs CustomizedMyTableSeeder.php and CustomizedAnotherTableSeeder.php\n\n```\nphp artisan iseed my_table --classnamesuffix=Customizations\n```\noutputs MyTableCustomizationsSeeder.php\n\n```\nphp artisan iseed my_table,another_table --classnamesuffix=Customizations\n```\noutputs MyTableCustomizationsSeeder.php and AnotherTableCustomizationsSeeder.php\n\n### force\nOptional parameter which is used to automatically overwrite any existing seeds for desired tables\n\nExample:\nThe following command will overwrite `UsersTableSeeder.php` if it already exists in laravel's seeds directory.\n```\nphp artisan iseed users --force\n```\n\n### dumpauto\nOptional boolean parameter that controls the execution of `composer dump-autoload` command. Defaults to true.\n\nExample that will stop `composer dump-autoload` from execution:\n```\nphp artisan iseed users --dumpauto=false\n```\n\n### clean\nOptional parameter which will clean `app/database/seeds/DatabaseSeeder.php` before creating new seed class.\n\nExample:\n```\nphp artisan iseed users --clean\n```\n\n### database\nOptional parameter which specifies the DB connection name.\n\nExample:\n```\nphp artisan iseed users --database=mysql2\n```\n\n### max\nOptional parameter which defines the maximum number of entries seeded from a specified table. In case of multiple tables, limit will be applied to all of them.\n\nExample:\n```\nphp artisan iseed users --max=10\n```\n\n### chunksize\nOptional parameter which defines the size of data chunks for each insert query.\n\nExample:\n```\nphp artisan iseed users --chunksize=100\n```\n\n### orderby\nOptional parameter which defines the column which will be used to order the results by, when used in conjunction with the max parameter that allows you to set the desired number of exported database entries.\n\nExample:\n```\nartisan iseed users --max=10 --orderby=id\n```\n\n### direction\nOptional parameter which allows you to set the direction of the ordering of results; used in conjuction with orderby parameter.\n\nExample:\n```\nartisan iseed users --max=10 --orderby=id --direction=desc\n```\n\n### exclude\nOptional parameter which accepts comma separated list of columns that you'd like to exclude from tables that are being exported. In case of multiple tables, exclusion will be applied to all of them.\n\nExample:\n```\nphp artisan iseed users --exclude=id\nphp artisan iseed users --exclude=id,created_at,updated_at\n```\n\n### prerun\nOptional parameter which assigns a laravel event name to be fired before seeding takes place. If an event listener returns `false`, seed will fail automatically.\nYou can assign multiple preruns for multiple table names by passing an array of comma separated DB names and respectively passing a comma separated array of prerun event names.\n\nExample:\nThe following command will make a seed file which will fire an event named 'someEvent' before seeding takes place.\n```\nphp artisan iseed users --prerun=someEvent\n```\nThe following example will assign `someUserEvent` to `users` table seed, and `someGroupEvent` to `groups` table seed, to be executed before seeding.\n```\nphp artisan iseed users,groups --prerun=someUserEvent,someGroupEvent\n```\nThe following example will only assign a `someGroupEvent` to `groups` table seed, to be executed before seeding. Value for the users table prerun was omitted here, so `users` table seed will have no prerun event assigned.\n```\nphp artisan iseed users,groups --prerun=,someGroupEvent\n```\n\n### postrun\nOptional parameter which assigns a laravel event name to be fired after seeding takes place. If an event listener returns `false`, seed will be executed, but an exception will be thrown that the postrun failed.\nYou can assign multiple postruns for multiple table names by passing an array of comma separated DB names and respectively passing a comma separated array of postrun event names.\n\nExample:\nThe following command will make a seed file which will fire an event named 'someEvent' after seeding was completed.\n```\nphp artisan iseed users --postrun=someEvent\n```\nThe following example will assign `someUserEvent` to `users` table seed, and `someGroupEvent` to `groups` table seed, to be executed after seeding.\n```\nphp artisan iseed users,groups --postrun=someUserEvent,someGroupEvent\n```\nThe following example will only assign a `someGroupEvent` to `groups` table seed, to be executed after seeding. Value for the users table postrun was omitted here, so `users` table seed will have no postrun event assigned.\n```\nphp artisan iseed users,groups --postrun=,someGroupEvent\n```\n\n### noindex\nBy using --noindex the seed can be generated as a non-indexed array.\nThe use case for this feature is when you need to merge two seed files.\n\nExample:\n```\nphp artisan iseed users --noindex\n```\n\n## Usage\n\nTo generate a seed file for your users table simply call: `\\Iseed::generateSeed('users', 'connectionName', 'numOfRows');`. `connectionName` and `numOfRows` are not required arguments.\n\nThis will create a file inside a `/database/seeds` (`/app/database/seeds` for Laravel 4), with the contents similar to following example:\n\n```php\n<?php\n\n// File: /database/seeds/UsersTableSeeder.php\n\nclass UsersTableSeeder extends Seeder {\n\n    /**\n     * Auto generated seed file\n     *\n     * @return void\n        */\n    public function run()\n    {\n        \\DB::table('users')->truncate();\n        \\DB::table('users')->insert(array (\n            0 =>\n            array (\n                'id' => '1',\n                'email' => 'admin@admin.com',\n                'password' => '$2y$10$tUGCkQf/0NY3w1l9sobGsudt6UngnoVXx/lUoh9ElcSOD0ERRkK9C',\n                'permissions' => NULL,\n                'activated' => '1',\n                'activation_code' => NULL,\n                'activated_at' => NULL,\n                'last_login' => NULL,\n                'persist_code' => NULL,\n                'reset_password_code' => NULL,\n                'first_name' => NULL,\n                'last_name' => NULL,\n                'created_at' => '2013-06-11 07:47:40',\n                'updated_at' => '2013-06-11 07:47:40',\n            ),\n            1 =>\n            array (\n                'id' => '2',\n                'email' => 'user@user.com',\n                'password' => '$2y$10$ImNvsMzK/BOgNSYgpjs/3OjMKMHeA9BH/hjl43EiuBuLkZGPMuZ2W',\n                'permissions' => NULL,\n                'activated' => '1',\n                'activation_code' => NULL,\n                'activated_at' => NULL,\n                'last_login' => '2013-06-11 07:54:57',\n                'persist_code' => '$2y$10$C0la8WuyqC6AU2TpUwj0I.E3Mrva8A3tuVFWxXN5u7jswRKzsYYHK',\n                'reset_password_code' => NULL,\n                'first_name' => NULL,\n                'last_name' => NULL,\n                'created_at' => '2013-06-11 07:47:40',\n                'updated_at' => '2013-06-11 07:54:57',\n            ),\n        ));\n    }\n\n}\n```\n\nThis command will also update `/database/seeds/DatabaseSeeder.php` (`/app/database/seeds/DatabaseSeeder.php` for Laravel 4) to include a call to this newly generated seed class.\n\nIf you wish you can define custom iSeed template in which all the calls will be placed. You can do this by using `#iseed_start` and `#iseed_end` templates anywhere  within `/database/seeds/DatabaseSeeder.php` (`/app/database/seeds/DatabaseSeeder.php` for Laravel 4), for example:\n\n```php\n<?php\n\n// File: /database/seeds/DatabaseSeeder.php\nclass DatabaseSeeder extends Seeder {\n\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n        */\n    public function run()\n    {\n        Eloquent::unguard();\n\n        if(App::environment() == \"local\")\n        {\n            throw new \\Exception('Only run this from production');\n        }\n\n        #iseed_start\n\n        // here all the calls for newly generated seeds will be stored.\n\n        #iseed_end\n    }\n\n}\n```\n\nAlternatively you can run Iseed from the command line using Artisan, e.g. `php artisan iseed users`. For generation of multiple seed files comma separated list of table names should be send as an argument for command, e.g. `php artisan iseed users,posts,groups`.\n\nIn case you try to generate seed file that already exists command will ask you a question whether you want to overwrite it or not. If you wish to overwrite it by default use `--force` Artisan Command Option, e.g. `php artisan iseed users --force`.\n\nIf you wish to clear iSeed template you can use Artisan Command Option `--clean`, e.g. `php artisan iseed users --clean`. This will clean template from `app/database/seeds/DatabaseSeeder.php` before creating new seed class.\n\nYou can specify db connection that will be used for creation of new seed files by using Artisan Command Option `--database=connection_name`, e.g. `php artisan iseed users --database=mysql2`.\n\nTo limit number of rows that will be exported from table use Artisan Command Option `--max=number_of_rows`, e.g. `php artisan iseed users --max=10`. If you use this option while exporting multiple tables specified limit will be applied to all of them.\n\nTo (re)seed the database go to the Terminal and run Laravel's `db:seed command` (`php artisan db:seed`).\n\nPlease note that some users encountered a problem with large DB table exports ([error when seeding from table with many records](https://github.com/orangehill/iseed/issues/4)). The issue was solved by splitting input data into smaller chunks of elements per insert statement. As you may need to change the chunk size value in some extreme cases where DB table has a large number of columns, the chunk size is configurable in iSeed's `config.php` file:\n\n\t'chunk_size' => 500 // Maximum number of rows per insert statement\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.328125,
          "content": "{\n    \"name\": \"orangehill/iseed\",\n    \"description\": \"Generate a new Laravel database seed file based on data from the existing database table.\",\n    \"keywords\": [\"laravel\", \"generators\", \"seed\", \"artisan\"],\n    \"license\": \"BSD-2-Clause\",\n    \"authors\": [\n        {\n            \"name\": \"Tihomir Opacic\",\n            \"email\": \"tihomir.opacic@orangehilldev.com\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^7.2|^8.0.2\",\n        \"illuminate/support\": \"~5.5.0|~5.6.0|~5.7.0|~5.8.0|^6.0|^7.0|^8.0|^9.0|^10.0|^11.0\"\n    },\n    \"require-dev\": {\n        \"mockery/mockery\": \"^1.0.0\",\n        \"illuminate/filesystem\": \"~5.5.0|~5.6.0|~5.7.0|~5.8.0|^6.0|^7.0|^8.0|^9.0|^10.0|^11.0\",\n        \"laravel/framework\": \"~5.5.0|~5.6.0|~5.7.0|~5.8.0|^6.0|^7.0|^8.0|^9.0|^10.0|^11.0\",\n        \"phpunit/phpunit\": \"^8.0\"\n    },\n    \"autoload\": {\n        \"psr-0\": {\n            \"Orangehill\\\\Iseed\": \"src/\"\n        },\n        \"classmap\": [\n            \"src/Orangehill/Iseed/Exceptions.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Orangehill\\\\Iseed\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"Orangehill\\\\Iseed\\\\IseedServiceProvider\"\n            ]\n        }\n    },\n    \"config\": {\n        \"sort-packages\": true\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.6259765625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<phpunit backupGlobals=\"false\"\r\n         backupStaticAttributes=\"false\"\r\n         beStrictAboutTestsThatDoNotTestAnything=\"false\"\r\n         bootstrap=\"vendor/autoload.php\"\r\n         colors=\"true\"\r\n         convertErrorsToExceptions=\"true\"\r\n         convertNoticesToExceptions=\"true\"\r\n         convertWarningsToExceptions=\"true\"\r\n         processIsolation=\"false\"\r\n         stopOnFailure=\"false\"\r\n         verbose=\"true\"\r\n>\r\n    <testsuites>\r\n        <testsuite name=\"Package Test Suite\">\r\n            <directory suffix=\".php\">./tests/</directory>\r\n        </testsuite>\r\n    </testsuites>\r\n</phpunit>\r\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}