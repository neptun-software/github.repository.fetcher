{
  "metadata": {
    "timestamp": 1736712143087,
    "page": 766,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pusher/pusher-http-php",
      "stars": 1433,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2275390625,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.yml]\nindent_style = space\nindent_size = 2"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2333984375,
          "content": "* text=auto\n\n/tests export-ignore\n/.github export-ignore\n/.editorconfig export-ignore\n/.gitattributes export-ignore\n/.gitignore export-ignore\n/phpunit.xml.dist export-ignore\n/README.md export-ignore\n/pull_request_template.md export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0849609375,
          "content": "composer.lock\nphpunit.xml\ntests/config.php\nvendor\n.phpunit.result.cache\n.phplint-cache\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 7.447265625,
          "content": "# Changelog\n\n## 7.2.6\n\n* Bump supported versions to include PHP8.2, 8.3\n\n## 7.2.5\n\n* Bump supported versions to include PHP8.2, 8.3.\n\n## 7.2.4\n\n* [Fixed] Timeout option is propagated to guzzle client\n\n## 7.2.3\n\n* [Fixed] Include socket_id in batch trigger if included.\n\n## 7.2.2\n\n* [FIXED] composer.phar file removed from package\n\n## 7.2.1\n\n* [FIXED] authenticateUser returns correct auth value\n\n## 7.2.0\n\n* [CHANGED] explicit support for 8.1\n* [CHANGED] Ignore pull_request_template.md on vendor\n* [ADDED] has_mixed_channels method to allow triggering a single event on multiple channels\n* [FIXED] path option can be used for proxied servers under subdirectory.\n* [CHANGED] base_path's leading slash is trimmed on every call to Guzzle.\n\n## 7.1.0-beta\n\n* [ADDED] `authenticateUser`, `authorizeChannel` and `authorizePresenceChannel`\n* [ADDED] `sendToUser` and `sendToUserAsync`\n* [ADDED] `terminateUserConnections` and `terminateUserConnectionsAsync`\n* [FIXED] `get_object_vars()` error on `/src/Pusher.php`\n* [DEPRECATED] `socketAuth` and `presenceAuth` in favour of `authorizeChannel` and `authorizePresenceChannel`\n* [DEPRECATED] Internal functions `make_request` and `make_batch_request` that were exposed as public\n\n## 7.0.2\n\n* [CHANGED] Add psr/log v2.0 and v3.0 compatibility\n\n## 7.0.1\n\n* [FIXED] Infinite recursion in `presence_auth`.\n\n## 7.0.0\n\n* [DEPRECATED] `get_channel_info`, `get_channels`, `socket_auth`, `presence_auth` in favour of camelCased versions\n* [DEPRECATED] `get_users_info` in favour of `getPresenceUsers`\n* [DEPRECATED] `ensure_valid_signature` in favour of `verifySignature`\n* [CHANGED] Restrict `$app_id` parameter of the `Pusher()` object to `string` (`int` was possible).\n* [ADDED] Return types.\n* [ADDED] Namespacing, PSR-12 formatting.\n\n## 6.1.0\n\n* [ADDED] triggerAsync and triggerBatchAsync using the Guzzle async interface.\n\n## 6.0.1\n\n* [CHANGED] Use type hints where possible (mixed type not available in PHP7).\n* [CHANGED] Document that functions can throw GuzzleException.\n\n## 6.0.0\n\n* [CHANGED] internal HTTP client to Guzzle\n* [ADDED] optional client parameter to constructor\n* [CHANGED] useTLS is true by default\n* [REMOVED] `curl_options` from options\n* [REMOVED] customer logger\n* [REMOVED] host, port and timeout constructor parameters\n* [REMOVED] support for PHP 7.1\n* [CHANGED] lower severity level of logging to DEBUG level\n\n## 5.0.3\n\n* [CHANGED] Ensure version in Pusher.php is bumped on release.\n\n## 5.0.2\n\n* [CHANGED] Add release automation actions.\n\n## 5.0.1\n\n* [FIXED] Notice raised due to reference to potentially missing object property in `trigger` method\n\n## 5.0.0\n\n* [CHANGED] The methods that make HTTP requests now throw an `ApiErrorException` instead of returning `false` for non-2xx responses\n* [CHANGED] `trigger` now accepts a `$params` associative array instead of a `$socket_id` as the third parameter\n* [ADDED] Support for requesting channel attributes as part of a `trigger` and `triggerBatch` request via an `info` parameter\n* [REMOVED] `debug` parameter from methods that make HTTP requests and from the constructor options\n* [REMOVED] Support for legacy push notifications (this has been superseded by https://github.com/pusher/push-notifications-php)\n\n## 4.1.5\n\n* [ADDED] Support for PHP 8.\n\n## 4.1.4\n\n* [FIXED] Errors in the failure path of `get_...` methods revealed by stricter type checking in PHP7.4\n\n## 4.1.3\n\n* No functional change, previous release was only partially successful\n\n## 4.1.2\n\n* [ADDED] option `encryption_master_key_base64`\n* [DEPRECATED] option `encryption_master_key`\n\n## 4.1.1\n\n* [ADDED] Support for PHP 7.4.\n\n## 4.1.0\n\n* [ADDED] `path` configuration option.\n\n## 4.0.0\n\n* [REMOVED] Support for PHP 5.x, PHP 7.0 and HHVM.\n\n## 3.4.1\n\n* [ADDED] Support for PHP 7.3.\n\n## 3.4.0\n\n* [ADDED] `get_users_info` method.\n\n## 3.3.1\n\n* [FIXED] PHP Notice for Undefined `socket_id` in triggerBatch\n\n## 3.3.0\n\n* [ADDED] Support for End-to-end encrypted channels for triggerbatch\n* [FIXED] trigger behavior with mixtures of encrypted and non-encrypted channels\n\n## 3.2.0\n\n* [ADDED] This release adds support for end to end encrypted channels, a new feature for Channels. Read more [in our docs](https://pusher.com/docs/client_api_guide/client_encrypted_channels).\n* [DEPRECATED] Renamed `encrypted` option to `useTLS` - `encrypted` will still work!\n\n## 3.1.0\n\n* [ADDED] This release adds Webhook validation as well as a data structure to store Webhook payloads.\n\n## 3.0.4\n\n* [FIXED] Non zero indexed arrays of channels no longer get serialized as an object.\n\n## 3.0.3\n\n* [ADDED] PSR-3 logger compatibility.\n* [CHANGED] Improved PHP docs.\n\n## 3.0.2\n\n* [FIXED] Insufficient check for un-initialized curl resource.\n* [FIXED] Acceptance tests.\n\n## 3.0.1\n\n* [CHANGED] Info messages are now prefixed with INFO and errors are now prefixed with ERROR.\n\n## 3.0.0\n\n* [NEW] Added namespaces (thanks [@vinkla](https://github.com/vinkla)).\n\n## 2.6.4\n\n* [FIXED] Log the curl error in more circumstances\n\n## 2.6.1\n\n* [FIXED] Check for correct status code when POSTing to native push notifications API.\n\n## 2.6.0\n\n* [ADDED] support for publishing push notifications on up to 10 interests.\n\n## 2.5.0\n\n* [REMOVED] Native push notifications payload validation in the client.\n\n## 2.5.0-rc2\n\n* [FIXED] DDN and Native Push endpoints were not assembled correctly.\n\n## 2.5.0-rc1\n\n* [NEW] Native push notifications\n\n## 2.4.2\n\n* [CHANGED] One curl instance per Pusher instance\n\n## 2.4.1\n\n* [FIXED] Presence data could not be submitted after the style changes\n\n## 2.4.0\n\n* [ADDED] Support for batch events\n* [ADDED] Curl options\n* [FIXED] Applied fixes from StyleCI\n\n## 2.3.0\n\n* [ADDED] A new `cluster` option for the Pusher constructor.\n\n## 2.2.2\n\n* [FIXED] Fixed a PHP 5.2 incompatibility caused by referencing a private method in array_walk.\n\n## 2.2.1\n\n* [FIXED] Channel name and socket_id values are now validated.\n* [BROKE] Inadvertently broke PHP 5.2 compatibility by referencing a private method in array_walk.\n\n## 2.2.0\n\n* [CHANGED] `new Pusher($app_key, $app_secret, $app_id, $options)` - The `$options` parameter\n  has been added as the forth parameter to the constructor and other additional\n  parameters are now deprecated.\n\n## 2.1.3\n\n* [NEW] `$pusher->trigger` can now take an `array` of channel names as a first parameter to allow the same event to be published on multiple channels.\n* [NEW] `$pusher->get` generic function can be used to make `GET` calls to the REST API\n* [NEW] `$pusher->set_logger` to allow internal logging to be exposed and logged in your own logs.\n\n## 2.1.2\n\n* [CHANGED] Debug response from `$pusher->trigger` call is now an associative array in the form `array( 'body' => '{String} body text of response', 'status' => '{Number} http status of the response' )`\n\n## 2.1.1\n\n* [CHANGED] Added optional $options parameter to get_channel_info. get_channel_info($channel, $options = array() )\n\n## 2.1.0\n\n* [CHANGED] Renamed get_channel_stats to get_channel_info\n* [CHANGED] get_channels now takes and $options parameter. get_channels( $options = array() )\n* [REMOVED] get_presence_channels\n\n## 2.0.1\n\n* [FIXED] Overwritten socket_id parameter in trigger: https://github.com/pusher/pusher-php-server/pull/3\n\n## 2.0.0\n\n* [NEW] Versioning introduced at 2.0.0\n* [NEW] Added composer.json for submission to https://packagist.org/\n* [CHANGED] `get_channels()` now returns an object which has a `channels` property. This must be accessed to get the Array of channels in an application.\n* [CHANGED] `get_presence_channels()` now returns an object which has a `channels` property. This must be accessed to get the Array of channels in an application.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.34375,
          "content": "# Pusher Channels HTTP PHP Library\n\n[![Tests](https://github.com/pusher/pusher-http-php/actions/workflows/test.yml/badge.svg)](https://github.com/pusher/pusher-http-php/actions/workflows/test.yml) [![Packagist Version](https://img.shields.io/packagist/v/pusher/pusher-php-server)](https://packagist.org/packages/pusher/pusher-php-server) [![Packagist License](https://img.shields.io/packagist/l/pusher/pusher-php-server)](https://packagist.org/packages/pusher/pusher-php-server) [![Packagist Downloads](https://img.shields.io/packagist/dm/pusher/pusher-php-server)](https://packagist.org/packages/pusher/pusher-php-server)\n\nPHP library for interacting with the Pusher Channels HTTP API.\n\nRegister at <https://pusher.com> and use the application credentials within your app as shown below.\n\nFor reporting issues, bugs, and feature requests, please feel free to open a pull request or open an issue. If you do not receive a timely response, feel free to check our [support portal](https://docs.bird.com/pusher).\n\n## Installation\n\nYou can get the Pusher Channels PHP library via a composer package called `pusher-php-server`. See <https://packagist.org/packages/pusher/pusher-php-server>\n\n```bash\n$ composer require pusher/pusher-php-server\n```\n\nOr add to `composer.json`:\n\n```json\n\"require\": {\n    \"pusher/pusher-php-server\": \"^7.2\"\n}\n```\n\nthen run `composer update`.\n\n## Supported platforms\n\n* PHP - supports PHP versions 7.3, 7.4, 8.0, 8.1, 8.2, 8.3 and 8.4\n* Laravel - version 8.29 and above has built-in support for Pusher Channels as a [Broadcasting backend](https://laravel.com/docs/master/broadcasting).\n* Other PHP frameworks - supported provided you are using a supported version of PHP.\n\n## Pusher Channels constructor\n\nUse the credentials from your Pusher Channels application to create a new `Pusher\\Pusher` instance.\n\n```php\n$app_id = 'YOUR_APP_ID';\n$app_key = 'YOUR_APP_KEY';\n$app_secret = 'YOUR_APP_SECRET';\n$app_cluster = 'YOUR_APP_CLUSTER';\n\n$pusher = new Pusher\\Pusher($app_key, $app_secret, $app_id, ['cluster' => $app_cluster]);\n```\n\nThe fourth parameter is an `$options` array. The additional options are:\n\n* `scheme` - e.g. http or https\n* `host` - the host e.g. api.pusherapp.com. No trailing forward slash\n* `port` - the http port\n* `path` - a prefix to append to all request paths. This is only useful if you\n  are running the library against an endpoint you control yourself (e.g. a\n  proxy that routes based on the path prefix).\n* `timeout` - the HTTP timeout\n* `useTLS` - quick option to use scheme of https and port 443.\n* `cluster` - specify the cluster where the application is running from.\n* `encryption_master_key_base64` - a 32 char long key. This key, along with the\n  channel name, are used to derive per-channel encryption keys. Per-channel\n  keys are used encrypt event data on encrypted channels.\n\nFor example, by default calls will be made over HTTPS. To use plain\nHTTP you can set useTLS to false:\n\n```php\n$options = [\n  'cluster' => $app_cluster,\n  'useTLS' => false\n];\n\n$pusher = new Pusher\\Pusher($app_key, $app_secret, $app_id, $options);\n```\n\n## Logging configuration\n\nThe recommended approach of logging is to use a\n[PSR-3](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md)\ncompliant logger implementing `Psr\\Log\\LoggerInterface`. The `Pusher` object\nimplements `Psr\\Log\\LoggerAwareInterface`, meaning you call\n`setLogger(LoggerInterface $logger)` to set the logger instance.\n\n```php\n// where $logger implements `LoggerInterface`\n\n$pusher->setLogger($logger);\n```\n\n## Custom Guzzle client\n\nThis library uses Guzzle internally to make HTTP calls. You can pass\nyour own Guzzle instance to the Pusher constructor:\n\n```php\n$custom_client = new GuzzleHttp\\Client();\n\n$pusher = new Pusher\\Pusher(\n    $app_key,\n    $app_secret,\n    $app_id,\n    [],\n    $custom_client\n);\n```\n\nThis allows you to pass in your own middleware, see the tests for an\n[example](tests/acceptance/middlewareTest.php).\n\n## Publishing/Triggering events\n\nTo trigger an event on one or more channels use the `trigger` function.\n\n### A single channel\n\n```php\n$pusher->trigger('my-channel', 'my_event', 'hello world');\n```\n\n### Multiple channels\n\n```php\n$pusher->trigger([ 'channel-1', 'channel-2' ], 'my_event', 'hello world');\n```\n\n### Batches\n\nIt's also possible to send multiple events with a single API call (max 10\nevents per call on multi-tenant clusters):\n\n```php\n$batch = [];\n$batch[] = ['channel' => 'my-channel', 'name' => 'my_event', 'data' => ['hello' => 'world']];\n$batch[] = ['channel' => 'my-channel', 'name' => 'my_event', 'data' => ['myname' => 'bob']];\n$pusher->triggerBatch($batch);\n```\n\n### Asynchronous interface\n\nBoth `trigger` and `triggerBatch` have asynchronous counterparts in\n`triggerAsync` and `triggerBatchAsync`. These functions return [Guzzle\npromises](https://github.com/guzzle/promises) which can be chained\nwith `->then`:\n\n```php\n$promise = $pusher->triggerAsync(['channel-1', 'channel-2'], 'my_event', 'hello world');\n\n$promise->then(function($result) {\n  // do something with $result\n  return $result;\n});\n\n$final_result = $promise->wait();\n```\n\n### Arrays\n\nArrays are automatically converted to JSON format:\n\n```php\n$array['name'] = 'joe';\n$array['message_count'] = 23;\n\n$pusher->trigger('my_channel', 'my_event', $array);\n```\n\nThe output of this will be:\n\n```json\n\"{'name': 'joe', 'message_count': 23}\"\n```\n\n### Socket id\n\nIn order to avoid duplicates you can optionally [specify the sender's\nsocket id](https://pusher.com/docs/channels/server_api/excluding-event-recipients)\nwhile triggering an event:\n\n```php\n$pusher->trigger('my-channel', 'event', 'data', ['socket_id' => $socket_id]);\n```\n\n```php\n$batch = [];\n$batch[] = ['channel' => 'my-channel', 'name' => 'my_event', 'data' => ['hello' => 'world'], ['socket_id' => $socket_id]];\n$batch[] = ['channel' => 'my-channel', 'name' => 'my_event', 'data' => ['myname' => 'bob'], ['socket_id' => $socket_id]];\n$pusher->triggerBatch($batch);\n```\n\n### Fetch channel info on publish [[EXPERIMENTAL](https://pusher.com/docs/lab#experimental-program)]\n\nIt is possible to request for attributes about the channels that were\npublished to with the\n[`info` param](https://pusher.com/docs/channels/library_auth_reference/rest-api#request):\n\n```php\n$result = $pusher->trigger('my-channel', 'my_event', 'hello world', ['info' => 'subscription_count']);\n$subscription_count = $result->channels['my-channel']->subscription_count;\n```\n\n```php\n$batch = [];\n$batch[] = ['channel' => 'my-channel', 'name' => 'my_event', 'data' => ['hello' => 'world'], 'info' => 'subscription_count'];\n$batch[] = ['channel' => 'presence-my-channel', 'name' => 'my_event', 'data' => ['myname' => 'bob'], 'info' => 'user_count,subscription_count'];\n$result = $pusher->triggerBatch($batch);\n\nforeach ($result->batch as $i => $attributes) {\n  echo \"channel: {$batch[$i]['channel']}, name: {$batch[$i]['name']}\";\n  if (isset($attributes->subscription_count)) {\n    echo \", subscription_count: {$attributes->subscription_count}\";\n  }\n  if (isset($attributes->user_count)) {\n    echo \", user_count: {$attributes->user_count}\";\n  }\n  echo PHP_EOL;\n}\n```\n\n### JSON format\n\nIf your data is already encoded in JSON format, you can avoid a second encoding\nstep by setting the sixth argument true, like so:\n\n```php\n$pusher->trigger('my-channel', 'event', 'data', [], true);\n```\n\n## Authenticating users\n\nTo authenticate users on Pusher Channels on your application, you can use the `authenticateUser` function:\n\n```php\n$pusher->authenticateUser('socket_id', 'user-id');\n```\n\nFor  more information see [authenticating users](https://pusher.com/docs/channels/server_api/authenticating-users/).\n\n## Authorizing Private channels\n\nTo authorize your users to access private channels on Pusher, you can use the\n`authorizeChannel` function:\n\n```php\n$pusher->authorizeChannel('private-my-channel','socket_id');\n```\n\nFor more information see [authorizing users](https://pusher.com/docs/channels/server_api/authorizing-users/).\n\n## Authorizing Presence channels\n\nUsing presence channels is similar to private channels, but you can specify\nextra data to identify that particular user:\n\n```php\n$pusher->authorizePresenceChannel('presence-my-channel','socket_id', 'user_id', 'user_info');\n```\n\nFor more information see [authorizing users](https://pusher.com/docs/channels/server_api/authorizing-users/).\n\n## Webhooks\n\nThis library provides a way of verifying that webhooks you receive from Pusher\nare actually genuine webhooks from Pusher. It also provides a structure for\nstoring them. A helper method called `webhook` enables this. Pass in the\nheaders and body of the request, and it'll return a Webhook object with your\nverified events. If the library was unable to validate the signature, an\nexception is thrown instead.\n\n```php\n$webhook = $pusher->webhook($request_headers, $request_body);\n$number_of_events = count($webhook->get_events());\n$time_received = $webhook->get_time_ms();\n```\n\n## End to end encryption\n\nThis library supports end to end encryption of your private channels. This\nmeans that only you and your connected clients will be able to read your\nmessages. Pusher cannot decrypt them. You can enable this feature by following\nthese steps:\n\n1. You should first set up Private channels. This involves [creating an\n   authorization endpoint on your\n   server](https://pusher.com/docs/authorizing_users).\n\n2. Next, generate your 32 byte master encryption key, base64 encode it and\n   store it securely.  This is secret and you should never share this with\n   anyone. Not even Pusher.\n\n   To generate an appropriate key from a good random source, you can use the\n   `openssl` command:\n\n   ```sh\n   openssl rand -base64 32\n   ```\n\n3. Specify your master encryption key when creating your Pusher client:\n\n   ```php\n   $pusher = new Pusher\\Pusher(\n       $app_key,\n       $app_secret,\n       $app_id,\n       [\n           'cluster' => $app_cluster,\n           'encryption_master_key_base64' => \"<your base64 encoded master key>\"\n       ]\n    );\n   ```\n\n4. Channels where you wish to use end to end encryption should be prefixed with\n   `private-encrypted-`.\n\n5. Subscribe to these channels in your client, and you're done! You can verify\n   it is working by checking out the debug console on the\n   [https://dashboard.pusher.com/](dashboard) and seeing the scrambled\n   ciphertext.\n\n**Important note: This will __not__ encrypt messages on channels that are not\nprefixed by `private-encrypted-`.**\n\n**Limitation**: you cannot trigger a single event on a mixture of unencrypted\nand encrypted channels in a call to `trigger`, e.g.\n\n```php\n$data['name'] = 'joe';\n$data['message_count'] = 23;\n\n$pusher->trigger(['channel-1', 'private-encrypted-channel-2'], 'test_event', $data);\n```\n\nRationale: the methods in this library map directly to individual Channels HTTP\nAPI requests. If we allowed triggering a single event on multiple channels\n(some encrypted, some unencrypted), then it would require two API requests: one\nwhere the event is encrypted to the encrypted channels, and one where the event\nis unencrypted for unencrypted channels.\n\n### Presence example\n\nFirst set the channel authorization endpoint in your JS app when creating the Pusher object:\n\n```js\nvar pusher = new Pusher(\"app_key\",\n  // ...\n  channelAuthorization: {\n    endpoint: \"/presenceAuth.php\",\n  },\n);\n```\n\nNext, create the following in presenceAuth.php:\n\n```php\n<?php\n\nheader('Content-Type: application/json');\n\nif (isset($_SESSION['user_id'])) {\n  $stmt = $pdo->prepare(\"SELECT * FROM `users` WHERE id = :id\");\n  $stmt->bindValue(':id', $_SESSION['user_id'], PDO::PARAM_INT);\n  $stmt->execute();\n  $user = $stmt->fetch();\n} else {\n  die(json_encode('no-one is logged in'));\n}\n\n$pusher = new Pusher\\Pusher($key, $secret, $app_id);\n$presence_data = ['name' => $user['name']];\n\necho $pusher->authorizePresenceChannel($_POST['channel_name'], $_POST['socket_id'], $user['id'], $presence_data);\n```\n\nNote: this assumes that you store your users in a table called `users` and that\nthose users have a `name` column. It also assumes that you have a login\nmechanism that stores the `user_id` of the logged in user in the session.\n\n## Application State Queries\n\n### Get information about a channel\n\n```php\n$pusher->getChannelInfo($name);\n```\n\nIt's also possible to get information about a channel from the Channels HTTP API.\n\n```php\n$info = $pusher->getChannelInfo('channel-name');\n$channel_occupied = $info->occupied;\n```\n\nFor [presence channels](https://pusher.com/docs/presence_channels) you can also\nquery the number of distinct users currently subscribed to this channel (a\nsingle user may be subscribed many times, but will only count as one):\n\n```php\n$info = $pusher->getChannelInfo('presence-channel-name', ['info' => 'user_count']);\n$user_count = $info->user_count;\n```\n\nIf you have enabled the ability to query the `subscription_count` (the number\nof connections currently subscribed to this channel) then you can query this\nvalue as follows:\n\n```php\n$info = $pusher->getChannelInfo('presence-channel-name', ['info' => 'subscription_count']);\n$subscription_count = $info->subscription_count;\n```\n\n### Get a list of application channels\n\n```php\n$pusher->getChannels();\n```\n\nIt's also possible to get a list of channels for an application from the\nChannels HTTP API.\n\n```php\n$result = $pusher->getChannels();\n$channel_count = count($result->channels); // $channels is an Array\n```\n\n### Get a filtered list of application channels\n\n```php\n$pusher->getChannels(['filter_by_prefix' => 'some_filter']);\n```\n\nIt's also possible to get a list of channels based on their name prefix. To do\nthis you need to supply an `$options` parameter to the call. In the following\nexample the call will return a list of all channels with a `presence-` prefix.\nThis is idea for fetching a list of all presence channels.\n\n```php\n$results = $pusher->getChannels(['filter_by_prefix' => 'presence-']);\n$channel_count = count($result->channels); // $channels is an Array\n```\n\nThis can also be achieved using the generic `pusher->get` function:\n\n```php\n$pusher->get('/channels', ['filter_by_prefix' => 'presence-']);\n```\n\n### Get a list of application channels with subscription counts\n\nThe HTTP API returning the channel list does not support returning the\nsubscription count along with each channel. Instead, you can fetch this data by\niterating over each channel and making another request. Be warned: this\napproach consumes (number of channels + 1) messages!\n\n```php\n<?php\n$subscription_counts = [];\nforeach ($pusher->getChannels()->channels as $channel => $v) {\n  $subscription_counts[$channel] =\n    $pusher->getChannelInfo(\n      $channel, ['info' => 'subscription_count']\n    )->subscription_count;\n}\nvar_dump($subscription_counts);\n```\n\n### Get user information from a presence channel\n\n```php\n$results = $pusher->getPresenceUsers('presence-channel-name');\n$users_count = count($results->users); // $users is an Array\n```\n\nThis can also be achieved using the generic `pusher->get` function:\n\n```php\n$response = $pusher->get('/channels/presence-channel-name/users');\n```\n\nThe `$response` is in the format:\n\n```php\nArray (\n\t[body] => {\"users\":[{\"id\":\"a_user_id\"}]}\n\t[status] => 200\n\t[result] => Array (\n\t\t[users] => Array (\n\t\t\t[0] => Array (\n\t\t\t\t[id] => a_user_id\n\t\t\t),\n\t\t\t/* Additional users */\n\t\t)\n\t)\n)\n```\n\n### Generic get function\n\n```php\n$pusher->get($path, $params);\n```\n\nUsed to make `GET` queries against the Channels HTTP API. Handles authentication.\n\nResponse is an associative array with a `result` index. The contents of this\nindex is dependent on the HTTP method that was called. However, a `status`\nproperty to allow the HTTP status code is always present and a `result`\nproperty will be set if the status code indicates a successful call to the API.\n\n```php\n$response = $pusher->get('/channels');\n$http_status_code = $response['status'];\n$result = $response['result'];\n```\n\n## Running the tests\n\nRequires [phpunit](https://github.com/sebastianbergmann/phpunit).\n\n* Run `composer install`\n* Go to the `tests` directory\n* Rename `config.example.php` to `config.php` and replace the values with valid Channels\n  credentials **or** create environment variables.\n* Some tests require a client to be connected to the app you defined in the\n  config; you can do this by opening\n  https://dashboard.pusher.com/apps/<YOUR_TEST_APP_ID>/getting_started in the\n  browser\n* From the root directory of the project, execute `composer exec phpunit` to\n  run all the tests.\n\n## License\n\nCopyright 2014, Pusher. Licensed under the MIT license:\nhttps://www.opensource.org/licenses/mit-license.php\n\nCopyright 2010, Squeeks. Licensed under the MIT license:\nhttps://www.opensource.org/licenses/mit-license.php\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.943359375,
          "content": "{\n    \"name\": \"pusher/pusher-php-server\",\n    \"description\" : \"Library for interacting with the Pusher REST API\",\n    \"keywords\": [\"php-pusher-server\", \"pusher\", \"rest\", \"realtime\", \"real-time\", \"real time\", \"messaging\", \"push\", \"trigger\", \"publish\", \"events\"],\n    \"license\": \"MIT\",\n    \"require\": {\n        \"php\": \"^7.3|^8.0\",\n        \"ext-curl\": \"*\",\n        \"ext-json\": \"*\",\n        \"guzzlehttp/guzzle\": \"^7.2\",\n        \"psr/log\": \"^1.0|^2.0|^3.0\",\n        \"paragonie/sodium_compat\": \"^1.6|^2.0\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^9.3\",\n        \"overtrue/phplint\": \"^2.3\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Pusher\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": { \"\": \"tests/\" }\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\"\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"5.0-dev\"\n        }\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.89453125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         beStrictAboutTestsThatDoNotTestAnything=\"true\"\n         beStrictAboutOutputDuringTests=\"true\"\n         bootstrap=\"tests/bootstrap.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         failOnWarning=\"true\"\n         processIsolation=\"false\"\n         stopOnError=\"false\"\n         stopOnFailure=\"false\"\n         verbose=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"all\">\n            <directory>./tests/</directory>\n        </testsuite>\n\n        <testsuite name=\"unit\">\n            <directory>./tests/unit/</directory>\n        </testsuite>\n\n        <testsuite name=\"acceptance\">\n            <directory>./tests/acceptance/</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n"
        },
        {
          "name": "pull_request_template.md",
          "type": "blob",
          "size": 0.212890625,
          "content": "## Description\n\nAdd a short description of the change. If this is related to an issue, please add a reference to the issue.\n\n## CHANGELOG\n\n* [CHANGED] Describe your change here. Look at CHANGELOG.md to see the format.\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}