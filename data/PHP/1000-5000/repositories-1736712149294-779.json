{
  "metadata": {
    "timestamp": 1736712149294,
    "page": 779,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lavary/crunz",
      "stars": 1423,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1123046875,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ncharset = utf-8\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4794921875,
          "content": "* text=auto\n\n/tests export-ignore\n/vendor-bin export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\n.editorconfig export-ignore\nREADME.md export-ignore\nLICENSE.md export-ignore\nCHANGELOG.md export-ignore\n.travis.yml export-ignore\nappveyor.yml export-ignore\nphpunit.xml export-ignore\n.php_cs.dist export-ignore\n/.github export-ignore\n.php_cs.dist export-ignore\ndocker-compose.yml export-ignore\n/docker export-ignore\nphpstan.neon export-ignore\ncomposer-install.php export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.150390625,
          "content": "/vendor\n/vendor-bin/*/vendor/\n/tasks\ncomposer.phar\n/composer.lock\n.DS_Store\n*.log\n.idea/\nvar/\n.php_cs.cache\n/crunz.phar\n/crunz.yml\n/.phpunit.result.cache\n"
        },
        {
          "name": ".php_cs.dist",
          "type": "blob",
          "size": 1.9521484375,
          "content": "<?php\n\ndeclare(strict_types=1);\n\nreturn PhpCsFixer\\Config::create()\n    ->setRules([\n        '@Symfony' => true,\n        'array_syntax' => ['syntax' => 'short'],\n        'protected_to_private' => false,\n        'combine_consecutive_unsets' => true,\n        'combine_consecutive_issets' => true,\n        'compact_nullable_typehint' => true,\n        'declare_strict_types' => true,\n        'dir_constant' => true,\n        'ereg_to_preg' => true,\n        'explicit_indirect_variable' => true,\n        'explicit_string_variable' => true,\n        'function_to_constant' => true,\n        'is_null' => true,\n        'modernize_types_casting' => true,\n        'linebreak_after_opening_tag' => true,\n        'list_syntax' => ['syntax' => 'short'],\n        'mb_str_functions' => true,\n        'native_function_invocation' => true,\n        'no_alias_functions' => true,\n        'no_homoglyph_names' => true,\n        'no_php4_constructor' => true,\n        'no_useless_else' => true,\n        'no_useless_return' => true,\n        'ordered_class_elements' => true,\n        'ordered_imports' => true,\n        'php_unit_construct' => true,\n        'php_unit_dedicate_assert' => true,\n        'php_unit_expectation' => true,\n        'php_unit_mock' => true,\n        'php_unit_namespaced' => true,\n        'php_unit_method_casing' => ['case' => 'snake_case'],\n        'random_api_migration' => true,\n        'strict_comparison' => true,\n        'strict_param' => true,\n        'ternary_to_null_coalescing' => true,\n        'void_return' => true,\n        'concat_space' => [\n            'spacing' => 'one',\n        ],\n        'single_line_throw' => false,\n    ])\n    ->setRiskyAllowed(true)\n    ->setFinder(\n        PhpCsFixer\\Finder::create()\n            ->in(__DIR__ . '/src')\n            ->in(__DIR__ . '/tests')\n            ->in(__DIR__ . '/config')\n            ->append(\n                [\n                    __FILE__,\n                    __DIR__ . '/composer-install.php',\n                ]\n            )\n    )\n;\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 15.318359375,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n## Unreleased\n\n## [v3.1.0] - 2021-11-24\n\n### Changed\n\n- [#385] Replace `Swiftmailer` with `symfony/mailer`\n\n## [v3.0.1] - 2021-05-25\n\n### Fixed\n\n- [#361] Log to specific event log file, thanks to [@drjayvee]\n\n## [v2.3.1] - 2021-05-25\n\n### Fixed\n\n- [#361] Log to specific event log file, thanks to [@drjayvee]\n\n## [v3.0.0] - 2021-04-25\n\n### Changed\n\n- [#349] Require at least PHP v7.4\n- [#356] Require package \"dragonmantank/cron-expression\" at least \"v3.1\"\n\n### Removed\n\n- [#351] Drop Symfony v3.4 support\n- [#352] Drop Symfony v5.1 support\n- [#354] Remove most \"Crunz\\Event::every*\" methods\n\n## [v2.3.0] - 2021-03-14\n\n### Deprecated\n\n- [#344] Deprecate most \"Event::every*\" methods\n\n### Removed\n\n- [#323] Drop Symfony 4.3 support\n- [#324] Drop Symfony 5.0 support\n\n## [v2.2.4] - 2020-12-18\n\n### Fixed\n\n- [#333] Include symlinks in Finder, thanks to [@iluuu1994]\n\n## [v2.2.3] - 2020-11-29\n\n### Fixed\n\n- [#334] Fix disabling logger not working\n\n## [v2.2.2] - 2020-10-12\n\n### Fixed\n\n- [#326] Fix lock key on closures\n\n## [v2.2.1] - 2020-10-08\n\n### Fixed\n\n- [#321] Add PHP8 support\n\n## [v2.2.0] - 2020-06-18\n\n### Added\n\n- [#287] Add `task:debug` command\n- [#233] Add option to ignore empty context in monolog, thanks to [@rrushton]\n- [#298] Add `logger_factory` config option\n\n### Removed\n\n- [#292] Drop Symfony 4.2 support\n\n## [v2.1.0] - 2020-02-02\n\n### Added\n\n- [#274] Symfony 5 support\n\n### Changed\n\n- [#240] cron-expression package, thanks to [@mareksuscak]\n- [#280] Hide `closure:run` command\n\n## [v2.0.4] - 2019-12-08\n\n### Fixed\n\n- [#268] Fix Symfony 4.4 deprecations\n\n## [v1.12.4] - 2019-12-08\n\n### Fixed\n\n- [#268] Fix Symfony 4.4 deprecations\n\n## [v2.0.3] - 2019-11-17\n\n### Fixed\n\n- [#261] Release lock on error\n- [#264] Revert converting closure result to `int`\n\n## [v1.12.3] - 2019-11-17\n\n### Fixed\n\n- [#261] Release lock on error\n\n## [v2.0.2] - 2019-10-06\n\n### Fixed\n\n- [#251] Update PHPUnit to avoid PHP7.4 deprecations \n\n## [v1.12.2] - 2019-10-05\n\n### Fixed\n\n- [#243] Sandbox task loading\n- [#245] Fix PHP 7.4 compatibility\n\n## [v2.0.1] - 2019-05-10\n\n### Fixed\n\n- [#229] Fix recursive tasks scan\n\n## [v1.12.1] - 2019-05-01\n\n### Fixed\n\n- [#229] Fix recursive tasks scan\n\n## [v2.0.0] - 2019-04-24\n\n### Changed\n\n- [#101] Throw exception on empty timezone\n- [#204] More than five parts cron expressions will throw exception\n- [#221] Throw `Crunz\\Task\\WrongTaskInstanceException` when task is not `Schedule` instance\n- [#222] Make `\\Crunz\\Event::setProcess` private\n- [#225] Bump dependencies\n\n### Removed\n\n- [#103] Removed `Crunz\\Output\\VerbosityAwareOutput` class\n- [#206] Remove legacy paths recognition\n- [#224] Remove `mail` transport\n\n## [v1.12.0] - 2019-04-07\n\n### Added\n\n- [#178], [#217] `timezone_log` configuration option to decide whether\nconfigured `timezone` should be used for logs, thanks to [@SadeghPM]\n\n### Deprecated\n\n- Using `\\Crunz\\Event::setProcess` is deprecated, this method was intended to be `private`,\nbut for some reason is `public`.\nIn `v2.0` this method will became private and result in exception if you call it.\n- [#199] Not returning `\\Crunz\\Schedule` instance from your task is deprecated.\nIn `v2` this will result in exception.\n\n## [v1.11.2] - 2019-03-16\n\n### Fixed\n\n- [#209], [#210] Composer installs crunz executable to vendor/bin instead of symlink\n\n## [v1.11.1] - 2019-01-27\n\n### Fixed\n\n- [#190] Fix Crunz bin path when running closures\n\n## [v1.11.0] - 2019-01-24\n\n### Fixed\n\n- [#181] Fix missing tasks source\n- [#180] Fix deprecation messages not showing\n\n### Deprecated\n\n- Relying on tasks' source/config file recognition related to Crunz bin \n\n## [v1.11.0-rc.1] - 2018-12-22\n\n### Fixed\n\n- [#171] Fix lock storage bug\n- [#173] Remove Symfony 4.2 deprecations\n- [#166] Improve task collection debugging\n\n## [v1.11.0-beta.2] - 2018-11-10\n\n### Fixed\n\n- [#162] Fix command error output [closes [#161]]\n\n## [v1.11.0-beta.1] - 2018-10-23\n\n### Added\n\n- [#153] Add support for `symfony/lock`, Thanks to [@digilist]\n\n### Fixed\n\n- [#146] Make paths relative to current working directory - \"cwd\".\n- [#158] Accept only string task number.\n\n## [v1.10.1] - 2018-09-22\n\n### Fixed\n\n- [#139] Do not require `cURL` extension\n\n## [v1.10.0] - 2018-09-22\n\n### Fixed\n\n- [#137] Treat whole output of failed command as \"error output\".\n\n### Removed\n\n- [#136] Remove guzzle\n\n## [v1.9.0] - 2018-08-18\n\n### Changed\n\n- [#132] Improved container caching in shared servers\n\n### Fixed\n\n- [#131] Crunz can be used with `dragonmantank/cron-expression` package\n\n### Deprecated\n\n- Passing more than five parts (e.g `* * * * * *`) to `Crunz\\Event::cron()`\n\n## [v1.8.0] - 2018-08-15\n\n### Added\n\n- [#120] Added `--force` option to `schedule:run` command\n- [#129] Add `--task` option for `schedule:run` command\n\n### Fixed\n\n- [#123] Spellfix: `comand` -> `command`, Thanks to [@FallDi]\n\n## [v1.7.3] - 2018-06-15\n\n- [#118] Undefined index: year in `vendor/lavary/crunz/src/Event.php` on line 370, Thanks to [@mindcreations]\n\n## [v1.7.2] - 2018-06-13\n\n### Fixed\n\n- [#116] Do not replace Symfony's polyfills.\n\n## [v1.7.1] - 2018-06-01\n\n### Fixed\n\n- [#110] Fixed config file path guessing.\n\n## [v1.7.0] - 2018-05-27\n\n### Added\n\n- [#94] Added timezone option\n\n### Deprecated\n- `timezone` option in config file is now required, lack of it will result in Exception in version `2.0`\n\n### Removed\n\n- [#104] Remove splitCamel helper.\n\n## [v1.6.1] - 2018-05-13\n\n### Fixed\n\n- [#90] Send output by email only if it is not empty.\n\n## [v1.6.0] - 2018-04-22\n\n### Added\n\n- [#69] Option for allowing line breaks in logs, Thanks to [@TomasDuda]\n- [#79] Introduce DI container\n\n### Fixed\n\n- [#43] Typos stopping email transport of 'mail', Thanks to [@m-hume]\n- [#46] sendOutputTo and appendOutputTo fix, Thanks to [@m-hume]\n- [#80] Fixed prevent overlapping on windows\n- [#81] Fix Event::in on windows\n- [#84] Make comparing date segments strict.\n- [#86] Fix closure running on windows\n- [#85] Fix changing user\n- [#87] Remove error handler\n\n## [v1.5.1] - 2018-04-12\n\n### Added\n\n- [#76] Introduce editorconfig\n- [#75] Added changelog file.\n\n### Fixed\n\n- [#77] Fix high cpu usage\n\n[#385]: https://github.com/lavary/crunz/pull/385\n[#361]: https://github.com/lavary/crunz/pull/361\n[#356]: https://github.com/lavary/crunz/pull/356\n[#354]: https://github.com/lavary/crunz/pull/354\n[#352]: https://github.com/lavary/crunz/pull/352\n[#351]: https://github.com/lavary/crunz/pull/351\n[#349]: https://github.com/lavary/crunz/pull/349\n[#344]: https://github.com/lavary/crunz/pull/344\n[#334]: https://github.com/lavary/crunz/pull/334\n[#333]: https://github.com/lavary/crunz/pull/333\n[#326]: https://github.com/lavary/crunz/pull/326\n[#324]: https://github.com/lavary/crunz/pull/324\n[#323]: https://github.com/lavary/crunz/pull/323\n[#321]: https://github.com/lavary/crunz/pull/321\n[#298]: https://github.com/lavary/crunz/pull/298\n[#292]: https://github.com/lavary/crunz/pull/292\n[#287]: https://github.com/lavary/crunz/pull/287\n[#280]: https://github.com/lavary/crunz/pull/280\n[#274]: https://github.com/lavary/crunz/pull/274\n[#268]: https://github.com/lavary/crunz/pull/268\n[#264]: https://github.com/lavary/crunz/pull/264\n[#261]: https://github.com/lavary/crunz/pull/261\n[#251]: https://github.com/lavary/crunz/pull/251\n[#245]: https://github.com/lavary/crunz/pull/245\n[#243]: https://github.com/lavary/crunz/pull/243\n[#240]: https://github.com/lavary/crunz/pull/240\n[#233]: https://github.com/lavary/crunz/pull/233\n[#229]: https://github.com/lavary/crunz/pull/229\n[#225]: https://github.com/lavary/crunz/pull/225\n[#224]: https://github.com/lavary/crunz/pull/224\n[#222]: https://github.com/lavary/crunz/pull/222\n[#221]: https://github.com/lavary/crunz/pull/221\n[#217]: https://github.com/lavary/crunz/pull/217\n[#210]: https://github.com/lavary/crunz/pull/210\n[#209]: https://github.com/lavary/crunz/pull/209\n[#206]: https://github.com/lavary/crunz/pull/206\n[#204]: https://github.com/lavary/crunz/pull/204\n[#199]: https://github.com/lavary/crunz/pull/199\n[#190]: https://github.com/lavary/crunz/pull/190\n[#181]: https://github.com/lavary/crunz/pull/181\n[#180]: https://github.com/lavary/crunz/pull/180\n[#178]: https://github.com/lavary/crunz/pull/178\n[#173]: https://github.com/lavary/crunz/pull/173  \n[#171]: https://github.com/lavary/crunz/pull/171\n[#166]: https://github.com/lavary/crunz/pull/166\n[#164]: https://github.com/lavary/crunz/pull/164\n[#163]: https://github.com/lavary/crunz/pull/163\n[#162]: https://github.com/lavary/crunz/pull/162\n[#161]: https://github.com/lavary/crunz/pull/161\n[#159]: https://github.com/lavary/crunz/pull/159\n[#158]: https://github.com/lavary/crunz/pull/158\n[#157]: https://github.com/lavary/crunz/pull/157\n[#155]: https://github.com/lavary/crunz/pull/155\n[#154]: https://github.com/lavary/crunz/pull/154\n[#153]: https://github.com/lavary/crunz/pull/153\n[#151]: https://github.com/lavary/crunz/pull/151\n[#150]: https://github.com/lavary/crunz/pull/150\n[#149]: https://github.com/lavary/crunz/pull/149\n[#148]: https://github.com/lavary/crunz/pull/148\n[#147]: https://github.com/lavary/crunz/pull/147\n[#146]: https://github.com/lavary/crunz/pull/146\n[#142]: https://github.com/lavary/crunz/pull/142\n[#141]: https://github.com/lavary/crunz/pull/141\n[#140]: https://github.com/lavary/crunz/pull/140\n[#139]: https://github.com/lavary/crunz/pull/139\n[#138]: https://github.com/lavary/crunz/pull/138\n[#137]: https://github.com/lavary/crunz/pull/137\n[#136]: https://github.com/lavary/crunz/pull/136\n[#133]: https://github.com/lavary/crunz/pull/133\n[#132]: https://github.com/lavary/crunz/pull/132\n[#131]: https://github.com/lavary/crunz/pull/131\n[#130]: https://github.com/lavary/crunz/pull/130\n[#129]: https://github.com/lavary/crunz/pull/129\n[#123]: https://github.com/lavary/crunz/pull/123\n[#120]: https://github.com/lavary/crunz/pull/120\n[#119]: https://github.com/lavary/crunz/pull/119\n[#118]: https://github.com/lavary/crunz/pull/118\n[#117]: https://github.com/lavary/crunz/pull/117\n[#116]: https://github.com/lavary/crunz/pull/116\n[#113]: https://github.com/lavary/crunz/pull/113\n[#112]: https://github.com/lavary/crunz/pull/112\n[#111]: https://github.com/lavary/crunz/pull/111\n[#110]: https://github.com/lavary/crunz/pull/110\n[#109]: https://github.com/lavary/crunz/pull/109\n[#107]: https://github.com/lavary/crunz/pull/107\n[#105]: https://github.com/lavary/crunz/pull/105\n[#104]: https://github.com/lavary/crunz/pull/104\n[#103]: https://github.com/lavary/crunz/pull/103\n[#102]: https://github.com/lavary/crunz/pull/102\n[#101]: https://github.com/lavary/crunz/pull/101\n[#100]: https://github.com/lavary/crunz/pull/100\n[#98]: https://github.com/lavary/crunz/pull/98\n[#97]: https://github.com/lavary/crunz/pull/97\n[#96]: https://github.com/lavary/crunz/pull/96\n[#95]: https://github.com/lavary/crunz/pull/95\n[#94]: https://github.com/lavary/crunz/pull/94\n[#92]: https://github.com/lavary/crunz/pull/92\n[#90]: https://github.com/lavary/crunz/pull/90\n[#89]: https://github.com/lavary/crunz/pull/89\n[#88]: https://github.com/lavary/crunz/pull/88\n[#87]: https://github.com/lavary/crunz/pull/87\n[#86]: https://github.com/lavary/crunz/pull/86\n[#85]: https://github.com/lavary/crunz/pull/85\n[#84]: https://github.com/lavary/crunz/pull/84\n[#82]: https://github.com/lavary/crunz/pull/82\n[#81]: https://github.com/lavary/crunz/pull/81\n[#80]: https://github.com/lavary/crunz/pull/80\n[#79]: https://github.com/lavary/crunz/pull/79\n[#77]: https://github.com/lavary/crunz/pull/77\n[#76]: https://github.com/lavary/crunz/pull/76\n[#75]: https://github.com/lavary/crunz/pull/75\n[#74]: https://github.com/lavary/crunz/pull/74\n[#73]: https://github.com/lavary/crunz/pull/73\n[#72]: https://github.com/lavary/crunz/pull/72\n[#69]: https://github.com/lavary/crunz/pull/69\n[#50]: https://github.com/lavary/crunz/pull/50\n[#46]: https://github.com/lavary/crunz/pull/46\n[#43]: https://github.com/lavary/crunz/pull/43\n[#36]: https://github.com/lavary/crunz/pull/36\n[#25]: https://github.com/lavary/crunz/pull/25\n[#24]: https://github.com/lavary/crunz/pull/24\n[#23]: https://github.com/lavary/crunz/pull/23\n[#17]: https://github.com/lavary/crunz/pull/17\n[#16]: https://github.com/lavary/crunz/pull/16\n[v1.9.0]: https://github.com/lavary/crunz/compare/v1.8.0...v1.9.0\n[v1.8.0]: https://github.com/lavary/crunz/compare/v1.7.3...v1.8.0\n[v1.7.3]: https://github.com/lavary/crunz/compare/v1.7.2...v1.7.3\n[v1.7.2]: https://github.com/lavary/crunz/compare/v1.7.1...v1.7.2\n[v1.7.1]: https://github.com/lavary/crunz/compare/v1.7.0...v1.7.1\n[v1.7.0]: https://github.com/lavary/crunz/compare/v1.6.1...v1.7.0\n[v1.6.1]: https://github.com/lavary/crunz/compare/v1.6.0...v1.6.1\n[v1.6.0]: https://github.com/lavary/crunz/compare/v1.5.1...v1.6.0\n[v1.5.1]: https://github.com/lavary/crunz/compare/v1.5.0...v1.5.1\n[v1.11.2]: https://github.com/lavary/crunz/compare/v1.11.1...v1.11.2\n[v1.11.1]: https://github.com/lavary/crunz/compare/v1.11.0...v1.11.1\n[v1.11.0]: https://github.com/lavary/crunz/compare/v1.11.0-rc.1...v1.11.0\n[v1.11.0-rc.1]: https://github.com/lavary/crunz/compare/v1.11.0-beta.2...v1.11.0-rc.1\n[v1.11.0-beta.2]: https://github.com/lavary/crunz/compare/v1.11.0-beta.1...v1.11.0-beta.2\n[v1.11.0-beta.1]: https://github.com/lavary/crunz/compare/v1.10.1...v1.11.0-beta.1\n[v1.10.1]: https://github.com/lavary/crunz/compare/v1.10.0...v1.10.1\n[v1.10.0]: https://github.com/lavary/crunz/compare/v1.9.0...v1.10.0\n[v1.12.0]: https://github.com/lavary/crunz/compare/v1.11.2...v1.12.0\n[v1.12.1]: https://github.com/lavary/crunz/compare/v1.12.0...v1.12.1\n[v1.12.2]: https://github.com/lavary/crunz/compare/v1.12.1...v1.12.2\n[v1.12.3]: https://github.com/lavary/crunz/compare/v1.12.2...v1.12.3\n[v1.12.4]: https://github.com/lavary/crunz/compare/v1.12.3...v1.12.4\n[v2.0.0]: https://github.com/lavary/crunz/compare/v1.12.0...v2.0.0\n[v2.0.1]: https://github.com/lavary/crunz/compare/v2.0.0...v2.0.1\n[v2.0.2]: https://github.com/lavary/crunz/compare/v2.0.1...v2.0.2\n[v2.0.3]: https://github.com/lavary/crunz/compare/v2.0.2...v2.0.3\n[v2.0.4]: https://github.com/lavary/crunz/compare/v2.0.3...v2.0.4\n[v2.1.0]: https://github.com/lavary/crunz/compare/v2.0.4...v2.1.0\n[v2.2.0]: https://github.com/lavary/crunz/compare/v2.1.0...v2.2.0\n[v2.2.1]: https://github.com/lavary/crunz/compare/v2.2.0...v2.2.1\n[v2.2.2]: https://github.com/lavary/crunz/compare/v2.2.1...v2.2.2\n[v2.2.3]: https://github.com/lavary/crunz/compare/v2.2.2...v2.2.3\n[v2.2.4]: https://github.com/lavary/crunz/compare/v2.2.3...v2.2.4\n[v2.3.0]: https://github.com/lavary/crunz/compare/v2.2.4...v2.3.0\n[v2.3.1]: https://github.com/lavary/crunz/compare/v2.3.0...v2.3.1\n[v3.0.0]: https://github.com/lavary/crunz/compare/v2.3.1...v3.0.0\n[v3.0.1]: https://github.com/lavary/crunz/compare/v3.0.0...v3.0.1\n[@vinkla]: https://github.com/vinkla\n[@timurbakarov]: https://github.com/timurbakarov\n[@radarhere]: https://github.com/radarhere\n[@mindcreations]: https://github.com/mindcreations\n[@m-hume]: https://github.com/m-hume\n[@jhoughtelin]: https://github.com/jhoughtelin\n[@erfan723]: https://github.com/erfan723\n[@digilist]: https://github.com/digilist\n[@codermarcel]: https://github.com/codermarcel\n[@arthurbarros]: https://github.com/arthurbarros\n[@andrewmy]: https://github.com/andrewmy\n[@TomasDuda]: https://github.com/TomasDuda\n[@PhilETaylor]: https://github.com/PhilETaylor\n[@FallDi]: https://github.com/FallDi\n[@SadeghPM]: https://github.com/SadeghPM\n[@mareksuscak]: https://github.com/mareksuscak\n[@rrushton]: https://github.com/rrushton\n[@iluuu1994]: https://github.com/iluuu1994\n[@drjayvee]: https://github.com/drjayvee\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "MIT License\n\nCopyright (c) 2018 Moe Reza Lavarian\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 27.36328125,
          "content": "# Repo no longer maintained, please use Crunz from new repo: [https://github.com/crunzphp/crunz](https://github.com/crunzphp/crunz) - more info here: [https://github.com/lavary/crunz/issues/411](https://github.com/lavary/crunz/issues/411)\n\n# Crunz\n\nInstall a cron job once and for all, manage the rest from the code.\n\nCrunz is a framework-agnostic package to schedule periodic tasks (cron jobs) in PHP using a fluent API.\n\nCrunz is capable of executing any kind of executable command as well as PHP closures.\n\n[![Version](http://img.shields.io/packagist/v/lavary/crunz.svg?style=flat-square)](https://packagist.org/packages/lavary/crunz)\n[![Packagist](https://img.shields.io/packagist/dt/lavary/crunz.svg?style=flat-square)](https://packagist.org/packages/lavary/crunz/stats)\n[![Packagist](https://img.shields.io/packagist/dm/lavary/crunz.svg?style=flat-square)](https://packagist.org/packages/lavary/crunz/stats)\n\n|Version|Supported PHP versions\n|---|---|\n|dev v3 (v3.2-dev)|![7.4+](https://img.shields.io/badge/php-%3E=7.4-blue.svg?style=flat-square)\n|stable v3 (v3.1.0)|![7.4+](https://img.shields.io/badge/php-%3E=7.4-blue.svg?style=flat-square)\n|stable v2 (v2.3.1)|![7.2+](https://img.shields.io/badge/php-%3E=7.2-blue.svg?style=flat-square)\n|stable v1 (v1.12.4)|![5.6-7.0+](https://img.shields.io/badge/php-%5E5.6%20%7C%7C%20%5E7.0-blue.svg?style=flat-square)\n\n## Roadmap\n|Version|Release date|Active support until|Bug support until|Status \n|---|---|---|---|---|\n|v1.x|April 2016|April 2019|April 2020|End of life\n|v2.x|April 2019|April 2021|April 2022|Bug support \n|v3.x|April 2021|April 2023|April 2024|Active support\n\n## Installation\n\nTo install it:\n\n```bash\ncomposer require lavary/crunz\n```\nIf the installation is successful, a command-line utility named **crunz** is symlinked to the `vendor/bin` directory of your project.\n\n## How It Works?\n\nThe idea is very simple: instead of installing cron jobs in a crontab file, we define them in one or several PHP files, by using the Crunz interface. \n\nHere's a basic example:\n\n```php\n<?php\n// tasks/backupTasks.php\n\nuse Crunz\\Schedule;\n\n$schedule = new Schedule();\n$task = $schedule->run('cp project project-bk');       \n$task->daily();\n\nreturn $schedule;\n```\n\nTo run the tasks, you only need to install an ordinary cron job (a crontab entry) which runs **every minute**, and delegates the responsibility to Crunz' event runner:\n\n```bash\n* * * * * cd /project && vendor/bin/crunz schedule:run\n```\n\nThe command `schedule:run` is responsible for collecting all the PHP task files and run the tasks which are due.\n\n## Task Files\n\nTask files resemble crontab files. Just like crontab files they can contain one or more tasks.\n\nNormally we create our task files in the `tasks/` directory within the project's root directory. \n\n> By default, Crunz assumes all the task files reside in the `tasks/` directory within the project's root directory.\n\nThere are two ways to specify the source directory: 1) Configuration file  2) As a parameter to the event runner command.\n \nWe can explicitly set the source path by passing it to the event runner as a parameter:\n\n```bash\n* * * * * cd /project && vendor/bin/crunz schedule:run /path/to/tasks/directory\n```\n\n### Creating a Simple Task\n\nIn the terminal, change the directory to your project's root directory and run the following commands:\n\n```bash\nmkdir tasks && cd tasks\nnano GeneralTasks.php\n```\n\nThen, add a task as below:\n\n```php\n<?php\n// tasks/FirstTasks.php\n\nuse Crunz\\Schedule;\n\n$schedule = new Schedule();\n\n$task = $schedule->run('cp project project-bk'); \n$task\n    ->daily()\n    ->description('Create a backup of the project directory.');\n\n// ...\n\n// IMPORTANT: You must return the schedule object\nreturn $schedule; \n```\n\nThere are some conventions for creating a task file, which you need to follow. First of all, the filename should end with `Tasks.php` unless we change this via the configuration settings.  \n\nIn addition to that, we **must** return the instance of `Schedule` class at the end of each file, otherwise, all the tasks inside the file will be skipped by the event runner.\n\nSince Crunz scans the tasks directory recursively, we can either put all the tasks in one file or across different files (or directories) based on their usage. This behavior helps us have a well organized tasks directory.\n\n\n## The Command\n\nWe can run **any** command or script by using `run()`. This method accepts two arguments:  **the command to be executed**, and **the command options** (as an associative array) if there's any.\n\n### Normal Command or Script\n\n```php\n<?php\n\nuse Crunz\\Schedule;\n\n$schedule = new Schedule();\n$task = $schedule->run(PHP_BINARY . ' backup.php', ['--destination' => 'path/to/destination']);\n$task\n    ->everyMinute()\n    ->description('Copying the project directory');\n\nreturn $schedule;\n```\n\nIn the above example, `--destination` is an option supported by `backup.php` script.\n\n### Closures\n\nWe can also write to a closure instead of a command:\n\n```php\n<?php\n\nuse Crunz\\Schedule;\n\n$schedule = new Schedule();\n\n$x = 12;\n$task = $schedule->run(function() use ($x) { \n   // Do some cool stuff in here \n});\n\n$task\n    ->everyMinute()\n    ->description('Copying the project directory');\n\nreturn $schedule;\n```\n\n## Frequency of Execution\n\nThere are a variety of ways to specify **when** and **how often** a task should run. We can combine these methods together to get our desired frequencies. \n\n### Units of Time\n\nThere are a group of methods which specify a unit of time (bigger than minute) as frequency. They usually end with `ly` suffix, as in `hourly()`, `daily()`, `weekly`, `monthly()`, `quarterly()`, and  `yearly` .\n\nAll the events scheduled with this set of methods happen at the **beginning** of that time unit. For example `weekly()` will run the event on Sundays, and `monthly()` will run on the first day of each month.\n\nThe task below will run **daily at midnight** (start of the daily time period).\n\n```php\n<?php\n// ...\n$task = $schedule->run(PHP_BINARY . ' backup.php');    \n$task->daily();\n// ...\n```\n\nHere's another one, which runs on the **first day of each month**.\n\n```php\n<?php\n// ...\n$task = $schedule->run(PHP_BINARY . ' email.php');\n$task->monthly();\n// ...\n```\n\n### Running Events at Certain Times\n\nTo schedule a one-off tasks, you may use `on()` method like this:\n\n```php\n<?php\n// ...\n$task = $schedule->run(PHP_BINARY . ' email.php'); \n$task->on('13:30 2016-03-01');\n// ...\n```\n\nThe above task will run on the first of march 2016 at 01:30 pm. \n\n> `On()` accepts any date format parsed by PHP's [strtotime](http://php.net/manual/en/function.strtotime.php) function.\n\nTo specify the time of a task we use `at()` method:\n\n```php\n<?php\n// ...\n$task = $schedule->run(PHP_BINARY . ' email.php'); \n$task\n    ->daily()\n    ->at('13:30');\n// ...\n```\n\nIf we only pass a time to the `on()` method, it will have the same effect as using `at()`\n\n```php\n<?php\n// ...\n$task = $schedule->run(PHP_BINARY . ' email.php');   \n$task\n    ->daily()\n    ->on('13:30');\n         \n// is the sames as\n$task = $schedule->run(PHP_BINARY . ' email.php');       \n$task\n    ->daily()\n    ->at('13:30');\n// ...\n```\n\nWe can combine the \"Unit of Time\" methods eg. daily(), monthly() with the at() or on() constraint in a single statement if we wish.\n\nThe following task will be run every hour at the 15th minute\n\n```php\n<?php\n// ...\n$task = $schedule->run(PHP_BINARY . ' feedmecookie.php'); \n$task\n    ->hourlyAt('15');\n// ...\n```\n>hourlyOn('15') could have been used instead of hourlyAt('15') with the same result\n\nThe following task will be run Monday at 13:30\n```php\n<?php\n// ...\n$task = $schedule->run(PHP_BINARY . ' startofwork.php'); \n$task\n    ->weeklyOn(1,'13:30');\n// ...\n```\n>Sunday is considered day 0 of the week. \n\nIf we wished for the task to run on Tuesday (day 2 of the week) at 09:00 we would have used:\n```php\n<?php\n// ...\n$task = $schedule->run(PHP_BINARY . ' startofwork.php'); \n$task\n    ->weeklyOn(2,'09:00');\n// ...\n```\n\n## Task Life Time\n\nIn a crontab entry, we can not easily specify a task's lifetime (the period of time when the task is active). However, it's been made easy in Crunz:\n\n```php\n<?php\n//\n$task = $schedule->run(PHP_BINARY . ' email.php');\n$task\n    ->everyFiveMinutes()\n    ->from('12:30 2016-03-04')\n    ->to('04:55 2016-03-10');\n //       \n```\nOr alternatively we can use the `between()` method to accomplish the same result:\n\n```php\n<?php\n//\n$task = $schedule->run(PHP_BINARY . ' email.php');\n$task\n    ->everyFiveMinutes()\n    ->between('12:30 2016-03-04', '04:55 2016-03-10');\n\n //       \n```\n\nIf we don't specify the date portion, the task will be active **every** day but only within the specified duration:\n\n```php\n<?php\n//\n$task = $schedule->run(PHP_BINARY . ' email.php');\n$task\n     ->everyFiveMinutes()\n     ->between('12:30', '04:55');\n\n //       \n```\n\nThe above task runs **every five minutes** between **12:30 pm** and **4:55 pm** every day.\n\nAn example of restricting a task from running only during a certain range of minutes each hour can be achieved as follows:\n\n```php\n<?php\n//\n\n$hour = date('H');\n$startminute = $hour.':05';\n$endminute = $hour.':15';\n\n$task = $schedule->run(PHP_BINARY . ' email.php');\n$task\n     ->hourly()\n     ->between($startminute, $endminute);\n\n //       \n```\n\nThe above task runs **every hour** between **minutes 5 to 15**\n\n### Weekdays\n\nCrunz also provides a set of methods which specify a certain day in the week. \n* `mondays()`\n* `tuesdays()`\n* ...\n* `sundays()`\n* `weekedays()`\n* `weekends()`\n\nThese methods have been designed to be used as a constraint and should not be used alone. The reason is that weekday methods just modify the `Day of Week` field of a cron job expression.\n\nConsider the following example:\n\n```php\n<?php\n// Cron equivalent:  * * * * 1\n$task = $schedule->run(PHP_BINARY . ' startofwork.php');\n$task->mondays();\n```\n\nAt first glance, the task seems to run **every Monday**, but since it only modifies the \"day of week\" field of the cron job expression, the task  runs **every minute on Mondays**.\n\nThis is the correct way of using weekday methods:\n\n```php\n<?php\n// ...\n$task = $schedule->run(PHP_BINARY . ' startofwork.php');\n$task    \n    ->mondays()\n    ->at('13:30');\n\n// ...\n```\n>(An easier to read alternative with a similar result ->weeklyOn(0,'13:30') to that shown in a previously example above)\n\n\n### The Classic Way\n\nWe can also do the scheduling the old way, just like we do in a crontab file:\n\n```php\n<?php\n\n$task = $schedule->run(PHP_BINARY . ' email.php');\n$task->cron('30 12 * 5-6,9 Mon,Fri');\n```\n\n### Setting Individual Fields\n\nCrunz's methods are not limited to the ready-made methods explained. We can also set individual fields to compose custom frequencies similar to how a classic crontab would composed them. These methods either accept an array of values, or list arguments separated by commas:\n\n```php\n<?php\n// ...\n$task = $schedule->run(PHP_BINARY . ' email.php');\n$task       \n    ->minute(['1-30', 45, 55])\n    ->hour('1-5', 7, 8)\n    ->dayOfMonth(12, 15)\n    ->month(1);\n```\n\nOr:\n\n```php\n<?php\n// ...\n$task = $schedule->run(PHP_BINARY . ' email.php');\n$task\n    ->minute('30')\n    ->hour('13')\n    ->month([1,2])\n    ->dayofWeek('Mon', 'Fri', 'Sat');\n\n// ...\n```\n\nBased on our use cases, we can choose and combine the proper set of methods, which are easier to use.\n\n## Running Conditions\n\nAnother thing that we cannot do very easily in a traditional crontab file is to make conditions for running the tasks. This has been made easy by `when()` and `skip()` methods.\n\nConsider the following code:\n\n```php\n<?php\n//\n$task = $schedule->run(PHP_BINARY . ' email.php');\n$task\n    ->everyFiveMinutes()\n    ->between('12:30 2016-03-04', '04:55 2016-03-10')\n    ->when(function() {\n        if ((bool) (time() % 2)) {\n            return true;\n        }\n        \n        return false;\n    });\n```\n\nMethod `when()` accepts a callback,  which must return `TRUE` for the task to run. This is really useful when we need to check our resources before performing a resource-hungry task.\n\nWe can also skip a task under certain conditions, by using `skip()` method. If the passed callback returns `TRUE`, the task will be skipped.\n\n```php\n<?php\n//\n$task = $schedule->run(PHP_BINARY . ' email.php');\n$task\n    ->everyFiveMinutes()\n    ->between('12:30 2016-03-04', '04:55 2016-03-10')\n    ->skip(function() {\n        if ((bool) (time() % 2)) {\n            return true;\n        }\n        \n        return false;  \n    });\n\n //       \n```\n\nWe can use these methods **several** times for a single task. They are evaluated sequentially.\n\n## Changing Directories\n\nYou can use the `in()` method to change directory before running a command:\n\n```php\n<?php\n\n// ...\n\n$task = $schedule->run('./deploy.sh');\n$task\n    ->in('/home')\n    ->weekly()\n    ->sundays()\n    ->at('12:30')\n    ->appendOutputTo('/var/log/backup.log');\n\n// ...\n\nreturn $schedule;\n```\n\n## Parallelism and the Locking Mechanism\n\nCrunz runs the scheduled events in parallel (in separate processes), so all the events which have the same frequency of execution, will run at the same time asynchronously. To achieve this, Crunz utilizes the [symfony/Process](http://symfony.com/doc/current/components/process.html) library for running the tasks in sub-processes.\n\nIf the execution of a task lasts until the next interval or even beyond that, we say that the same instances of a task are overlapping. In some cases, this is a not a problem. But there are times, when these tasks are modifying database data or files, which might cause unexpected behaviors, or even data loss.\n\nTo prevent critical tasks from overlapping each other, Crunz provides a locking mechanism through `preventOverlapping()` method, which, ensures no task runs if the previous instance is already running. \n\n```php\n<?php\n//\n$task = $schedule->run(PHP_BINARY . ' email.php');\n$task\n    ->everyFiveMinutes()\n    ->preventOverlapping();\n //       \n```\n\nBy default, crunz uses file based locking (if no parameters are passed to `preventOverlapping`). For alternative lock mechanisms, crunz uses the [symfony/lock](https://symfony.com/doc/current/components/lock.html) component that provides lock mechanisms with various stores. To use this component, you can pass a store to the `preventOverlapping()` method. In the following example, the file based `FlockStore` is used to provide an alternative lock file path.\n\n```php\n<?php\n\nuse Symfony\\Component\\Lock\\Store\\FlockStore;\n\n$store = new FlockStore(__DIR__ . '/locks');\n$task = $schedule->run(PHP_BINARY . ' email.php');\n$task\n    ->everyFiveMinutes()\n    ->preventOverlapping($store);\n\n```\n\nAs of Symfony 5.0 the `StoreInterface` has been split into `BlockingStoreInterface` and `PersistingStoreInterface`. To use any of the persistent locks (Redis, PDO, etc) they need to be decorated by the `RetryTillSaveStore`.\n\n```php\n<?php\n\nuse Symfony\\Component\\Lock\\Store\\RedisStore;\nuse Symfony\\Component\\Lock\\Store\\RetryTillSaveStore;\n\n$redis = new Redis();\n$redis->connect('localhost');\n$persistingStore = new RedisStore($redis);\n$blockingStore = new RetryTillSaveStore($persistingStore);\n\n$task = $schedule->run(PHP_BINARY . ' email.php');\n$task\n    ->everyFiveMinutes()\n    ->preventOverlapping($blockingStore);\n\n```\n\n## Keeping the Output\n\nCron jobs usually have outputs, which is normally emailed to the owner of the crontab file, or the user(s) set by the `MAILTO` environment variable inside the crontab file.\n\nWe can also redirect the standard output to a physical file using `>` or `>>` operators:\n\n```bash\n* * * * * /command/to/run >> /var/log/crons/cron.log\n```\n\nThis kind of output logging has been automated in Crunz. To automatically send each event's output to a log file, we can set `log_output` and `output_log_file` options in the configuration file accordingly:\n\n```yaml\n# Configuration settings\n\n## ...\nlog_output:      true\noutput_log_file: /var/log/crunz.log\n## ...\n```\n\nThis will send the events' output (if executed successfully) to `/var/log/crunz.log` file. However, we need to make sure we are permitted to write to the respective file.\n\nIf we need to log the outputs on an event-basis, we can use `appendOutputTo()` or `sendOutputTo()` methods like this:\n\n```php\n<?php\n//\n$task = $schedule->run(PHP_BINARY . ' email.php');\n$task\n    ->everyFiveMinutes()\n    ->appendOutputTo('/var/log/crunz/emails.log');\n\n //       \n```\n\nMethod `appendOutputTo()` **appends** the output to the specified file. To override the log file with new data after each run, we use `saveOutputTo()` method.\n\nIt is also possible to send the errors as emails to a group of recipients by setting `email_output` and `mailer` settings in the configuration file.\n\n## Error Handling\n\nCrunz makes error handling easy by logging and also allowing you add a set of callbacks in case of an error.\n\n## Error Callbacks\n\nYou can set as many callbacks as needed to run in case of an error:\n\n```php\n<?php\n\nuse Crunz\\Schedule;\n\n$schedule = new Schedule();\n\n$task = $schedule->run('command/to/run');\n$task->everyFiveMinutes();\n\n$schedule\n->onError(function() {\n   // Send mail\n})\n->onError(function() {\n   // Do something else\n});\n\nreturn $schedule;\n```\n\nIf there's an error the two defined callbacks will be executed.\n\n## Error Logging\n\nTo log the possible errors during each run, we can set `log_error` and `error_log_file` settings in the configuration file as below:\n\n```yaml\n# Configuration settings\n\n# ...\nlog_errors:      true\nerrors_log_file: /var/log/error.log\n# ...\n```\n\nAs a result, if the execution of an event is unsuccessful for some reasons, the error message is appended to the specified error log file. Each entry provides useful information including the time it happened, the event description,  the executed command which caused the error, and the error message itself.\n\nIt is also possible to send the errors as emails to a group of recipients by setting `email_error` and `mailer` settings in the configuration file.\n\n## Custom logger\n\nTo use your own logger create class implementing `\\Crunz\\Application\\Service\\LoggerFactoryInterface`, for example:\n\n```php\n<?php\n\nnamespace Vendor\\Package;\n\nuse Crunz\\Application\\Service\\ConfigurationInterface;\nuse Crunz\\Application\\Service\\LoggerFactoryInterface;\nuse Psr\\Log\\AbstractLogger;\nuse Psr\\Log\\LoggerInterface;\n\nfinal class MyEchoLoggerFactory implements LoggerFactoryInterface\n{\n    public function create(ConfigurationInterface $configuration): LoggerInterface\n    {\n        return new class extends AbstractLogger {\n            /** @inheritDoc */\n            public function log(\n                $level,\n                $message,\n                array $context = array()\n            ) {\n                echo \"crunz.{$level}: {$message}\";   \n            }\n        };\n    }\n}\n```\n\nthen use this class name in config: \n\n```yaml\n# ./crunz.yml file\n \nlogger_factory: 'Vendor\\Package\\MyEchoLoggerFactory'\n```\n\nDone.\n\n## Pre-Process and Post-Process Hooks\n\nThere are times when we want to do some kind of operations before and after an event. This is possible by attaching pre-process and post-process callbacks to the respective event.\n\nTo do this, we use `before()` and `after()` on both `Event` and `Schedule` objects, meaning we can have pre and post hooks on an event-basis as well as schedule basis. The hooks bind to schedule will run before all events, and after all the events are finished.\n\n```php\n<?php\n\nuse Crunz\\Schedule;\n\n$schedule = new Schedule();\n\n$task = $schedule->run(PHP_BINARY . ' email.php');\n$task\n    ->everyFiveMinutes()\n    ->before(function() { \n        // Do something before the task runs\n    })\n    ->before(function() { \n        // Do something else\n    })\n    ->after(function() {\n        // After the task is run\n    });\n \n$schedule\n    ->before(function () {\n       // Do something before all events\n    })\n    ->after(function () {\n       // Do something after all events are finished\n    })\n    ->before(function () {\n       // Do something before all events\n    });\n```\n\n> We might need to use these methods as many times we need by chaining them.\n\nPost-execution callbacks are only called if the execution of the event has been successful.\n\n## Other Useful Commands\n\nWe've already used a few of `crunz` commands like `schedule:run` and `publish:config`. \n\nTo see all the valid options and arguments of `crunz`, we can run the following command:\n\n```bash\nvendor/bin/crunz --help\n```\n\n### Listing Tasks\n\nOne of these commands is `crunz schedule:list`, which lists the defined tasks (in collected `*.Tasks.php` files) in a tabular format.\n\n```text\nvendor/bin/crunz schedule:list\n\n+---+---------------+-------------+--------------------+\n| # | Task          | Expression  | Command to Run     |\n+---+---------------+-------------+--------------------+\n| 1 | Sample Task   | * * * * 1 * | command/to/execute |\n+---+---------------+-------------+--------------------+\n```\n\n### Force run\n\nWhile in development it may be useful to force run all tasks regardless of their actual run time,\nwhich can be achieved by adding `--force` to `schedule:run`:\n\n```bash\nvendor/bin/crunz schedule:run --force\n```\n\nTo force run a single task, use the schedule:list command above to determine the Task number and run as follows:\n\n```bash\nvendor/bin/crunz schedule:run --task 1 --force\n```\n\n### Generating Tasks\n\nThere is also a useful command named `make:task`, which generates a task file skeleton with all the defaults, so we won't have to write them from scratch. We can modify the output file later based on our requirements. \n\nFor example, to create a task, which runs `/var/www/script.php` every hour on Mondays, we run the following command:\n\n```text\nvendor/bin/crunz make:task exampleOne --run scripts.php --in /var/www --frequency everyHour --constraint mondays\nWhere do you want to save the file? (Press enter for the current directory)\n```\n\nWhen we run this command, Crunz will ask about the location we want to save the file. By default, it is our source tasks directory.\n\nAs a result, the event is defined in a file named `exampleOneTasks.php` within the specified tasks directory.\n\nTo see if the event has been created successfully, we list the events:\n\n```text\ncrunz schedule:list\n\n+---+------------------+-------------+----------------+\n| # | Task             | Expression  | Command to Run |\n+---+------------------+-------------+----------------+\n| 1 | Task description | 0 * * * 1 * | scripts.php    |\n+---+------------------+-------------+----------------+\n```\n\nTo see all the options of `make:task` command with all the defaults, we run this:\n\n```bash\nvendor/bin/crunz make:task --help\n```\n\n### Debugging tasks\n\nTo show basic information about task run:\n\n```bash\nvendor/bin/crunz task:debug 1\n```\n\nAbove command should output something like this:\n\n```text\n+----------------------+-----------------------------------+\n| Debug information for task '1'                           |\n+----------------------+-----------------------------------+\n| Command to run       | php -v                            |\n| Description          | Inner task                        |\n| Prevent overlapping  | No                                |\n+----------------------+-----------------------------------+\n| Cron expression      | * * * * *                         |\n| Comparisons timezone | Europe/Warsaw (from config)       |\n+----------------------+-----------------------------------+\n| Example run dates                                        |\n| #1                   | 2020-03-08 09:27:00 Europe/Warsaw |\n| #2                   | 2020-03-08 09:28:00 Europe/Warsaw |\n| #3                   | 2020-03-08 09:29:00 Europe/Warsaw |\n| #4                   | 2020-03-08 09:30:00 Europe/Warsaw |\n| #5                   | 2020-03-08 09:31:00 Europe/Warsaw |\n+----------------------+-----------------------------------+\n```\n\n## Configuration\n\nThere are a few configuration options provided by Crunz in YAML format. To modify the configuration settings, it is highly recommended to have your own copy of the configuration file, instead of modifying the original one. \n\nTo create a copy of the configuration file, first we need to publish the configuration file:\n\n```bash\n/project/vendor/bin/crunz publish:config\nThe configuration file was generated successfully\n```\n\nAs a result, a copy of the configuration file will be created within our project's root directory.\n\n The configuration file looks like this:\n\n```yaml\n# Crunz Configuration Settings\n\n# This option defines where the task files and\n# directories reside.\n# The path is relative to the project's root directory,\n# where the Crunz is installed (Trailing slashes will be ignored).\nsource: tasks\n\n# The suffix is meant to target the task files inside the \":source\" directory.\n# Please note if you change this value, you need\n# to make sure all the existing tasks files are renamed accordingly.\nsuffix: Tasks.php\n\n# Timezone is used to calculate task run time\n# This option is very important and not setting it is deprecated\n# and will result in exception in 2.0 version.\ntimezone: ~\n\n# This option define which timezone should be used for log files\n# If false, system default timezone will be used\n# If true, the timezone in config file that is used to calculate task run time will be used\ntimezone_log: false\n\n# By default the errors are not logged by Crunz\n# You may set the value to true for logging the errors\nlog_errors: false\n\n# This is the absolute path to the errors' log file\n# You need to make sure you have the required permission to write to this file though.\nerrors_log_file:\n\n# By default the output is not logged as they are redirected to the\n# null output.\n# Set this to true if you want to keep the outputs\nlog_output: false\n\n# This is the absolute path to the global output log file\n# The events which have dedicated log files (defined with them), won't be\n# logged to this file though.\noutput_log_file:\n\n# By default line breaks in logs aren't allowed.\n# Set the value to true to allow them.\nlog_allow_line_breaks: false\n\n# By default empty context arrays are shown in the log.\n# Set the value to true to remove them.\nlog_ignore_empty_context: false\n\n# This option determines whether the output should be emailed or not.\nemail_output: false\n\n# This option determines whether the error messages should be emailed or not.\nemail_errors: false\n\n# Global Swift Mailer settings\n#\nmailer:\n    # Possible values: smtp, mail, and sendmail\n    transport: smtp\n    recipients:\n    sender_name:\n    sender_email:\n\n\n# SMTP settings\n#\nsmtp:\n    host:\n    port:\n    username:\n    password:\n    encryption:\n```\n\nAs you can see there are a few options like `source` which is used to specify the source tasks directory. The other options are used for error/output logging/emailing purposes.\n\nEach time we run Crunz commands, it will look into the project's root directory to see if there's any user-modified configuration file. If the configuration file doesn't exists, it will use the one shipped with the package.\n\n\n## Development ENV flags\n\nThe following environment flags should be used only while in development.\nTypical end-users do not need to, and should not, change them.\n\n### `CRUNZ_CONTAINER_DEBUG`\n\nFlag used to enable/disable container debug mode, useful only for development.\nEnabled by default in `docker-compose`.\n\n### `CRUNZ_DEPRECATION_HANDLER`\n\nFlag used to enable/disable Crunz deprecation handler, useful only for integration tests.\nDisabled by default for tests.\n\n## Contributing\n\n### Which branch should I choose?\n\nIn most cases you should target branch `1.12.x`, as this is active development branch.\nBranch `master` is for future release, but all bugs/features should go to `1.11.x` anyway.\n\n## If You Need Help\n\nPlease submit all issues and questions using GitHub issues and I will try to help you.\n\n\n## Credits\n\n* [PabloKowalczyk](https://github.com/PabloKowalczyk)\n* [Reza Lavarian](https://github.com/lavary)\n* [All Contributors](https://github.com/lavary/crunz/graphs/contributors)\n\n## License\nCrunz is free software distributed under the terms of the MIT license.\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 1.89453125,
          "content": "# Upgrading from v1.12 to v2.0\n\n## Stop using `mail` transport for mailer\n\nAs of `v6.0` SwiftMailer dropped support for `mail` transport,\nso `Crunz` `v2.0` won't support it either,\nplease use `smtp` or `sendmail` transport.\n\n# Upgrading from v1.11 to v1.12\n\n## Always return `\\Crunz\\Schedule` from task files\n\nExample of wrong task file:\n\n```php\n<?php\n\nreturn [];\n```\n\nExample of correct task file:\n```php\n<?php\n\nuse Crunz\\Schedule;\n\n$scheduler = new Schedule();\n\n$scheduler\n    ->run('php -v')\n    ->description('PHP version')\n    ->everyMinute();\n\n// Crunz\\Schedule instance returned\nreturn $scheduler;\n```\n\n## Stop using `\\Crunz\\Event::setProcess`\n\nIf you, for some reason, use above method you should stop it.\nThis method was intended to be `private` and will be in `v2.0`,\nwhich will lead to exception if you call it.\n\nExample of wrong usage\n\n```php\n<?php\n\nuse Crunz\\Schedule;\n\n$process = new \\Symfony\\Component\\Process\\Process('php -i');\n$scheduler = new Schedule();\n$task = $scheduler->run('php -v');\n$task\n    // setProcess is deprecated\n    ->setProcess($process)\n    ->description('PHP version')\n    ->everyMinute()\n;\n\nreturn $scheduler;\n``` \n\n# Upgrading from v1.10 to v1.11\n\n## Run `Crunz` in directory with your `crunz.yml`\n\nSearching for Crunz's config is now related to `cwd`, not to `vendor/bin/crunz`.\n\nFor example, if your `crunz.yml` is in `/var/www/project/crunz.yml`, then run Crunz with `cd` first:\n```bash\ncd /var/www/project && vendor/bin/crunz schedule:list\n```\n\nCron job also should be changed:\n```bash\n* * * * * cd /var/www/project && vendor/bin/crunz schedule:run\n```\n\n# Upgrading from v1.9 to v1.10\n\n### Do not pass more than five parts to `Crunz\\Event::cron()`\n\nExample correct call:\n```yaml\n$event = new Crunz\\Event;\n$event->cron('0 * * * *');\n```\n\n# Upgrading from v1.7 to v1.8\n\n### Add `timezone` to your `crunz.yml`\n\nExample config file:\n```yaml\nsource: tasks\nsuffix: Tasks.php\ntimezone: Europe/Warsaw\n```\n"
        },
        {
          "name": "bootstrap.php",
          "type": "blob",
          "size": 0.439453125,
          "content": "<?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n// Disable deprecation helper\n$envFlags = new \\Crunz\\EnvFlags\\EnvFlags();\n$envFlags->disableDeprecationHandler();\n\n// Make sure current working directory is \"tests\"\n$filesystem = new \\Crunz\\Filesystem\\Filesystem();\nif (\\strpos($filesystem->getCwd(), 'tests') !== false) {\n    return;\n}\n\nif (!\\chdir('tests')) {\n    throw new RuntimeException(\"Unable to change current directory to 'tests'.\");\n}\n"
        },
        {
          "name": "composer-install.php",
          "type": "blob",
          "size": 1.68359375,
          "content": "#!/usr/bin/env php\n<?php\n\n$version = $_SERVER['argv'][1] ?? '';\nif ('' === $version) {\n    throw new RuntimeException('Version cannot be empty.');\n}\n\n$dependenciesEnv = $_SERVER['argv'][2] ?? '';\n$defaultComposerFlags = $_SERVER['argv'][3] ?? '';\n$phpunitBridgeVersion = $_SERVER['argv'][4] ?? $version;\n$composerFilePath = __DIR__ . DIRECTORY_SEPARATOR . 'composer.json';\n$ignoredPackages = ['symfony/error-handler'];\n$changeVersion = static function (\n    array $packages\n) use (\n    $version,\n    $phpunitBridgeVersion,\n    $ignoredPackages\n): array {\n    foreach ($packages as $packageName => &$packageVersion) {\n        $isIgnored = \\in_array(\n            $packageName,\n            $ignoredPackages,\n            true\n        );\n\n        if ($isIgnored) {\n            continue;\n        }\n\n        if (false === \\mb_strpos($packageName, 'symfony/')) {\n            continue;\n        }\n\n        if ('symfony/phpunit-bridge' === $packageName) {\n            $packageVersion = $phpunitBridgeVersion;\n\n            continue;\n        }\n\n        $packageVersion = $version;\n    }\n\n    return $packages;\n};\n\n$composerJson = \\json_decode(\n    \\file_get_contents($composerFilePath),\n    true\n);\n$packages = $composerJson['require'] ?? [];\n$packagesDev = $composerJson['require-dev'] ?? [];\n$composerJson['require'] = $changeVersion($packages);\n$composerJson['require-dev'] = $changeVersion($packagesDev);\n\n\\file_put_contents(\n    $composerFilePath,\n    \\json_encode($composerJson, JSON_PRETTY_PRINT)\n);\n\n$preferLowest = '';\nif ('high' !== $dependenciesEnv) {\n    $preferLowest = '--prefer-lowest';\n}\n\n$command = \\trim(\"composer update -o {$defaultComposerFlags} {$preferLowest}\");\necho $command, PHP_EOL;\necho \\shell_exec($command);\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.2734375,
          "content": "{\n    \"name\": \"lavary/crunz\",\n    \"description\": \"Schedule your tasks right from the code.\",\n    \"type\": \"library\",\n    \"keywords\": [\n        \"scheduler\",\n        \"cron jobs\",\n        \"cron\",\n        \"Task Scheduler\",\n        \"PHP Task Scheduler\",\n        \"Job Scheduler\",\n        \"Job Manager\",\n        \"Event Runner\"\n    ],\n    \"homepage\": \"https://github.com/lavary/crunz\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Reza M. Lavaryan\",\n            \"email\": \"mrl.8081@gmail.com\"\n        }\n    ],\n    \"support\": {\n        \"email\": \"mrl.8081@gmail.com\",\n        \"issues\": \"http://github.com/lavary/crunz/issues\"\n    },\n    \"require\": {\n        \"php\": \">=7.4\",\n        \"dragonmantank/cron-expression\": \"^3.1\",\n        \"opis/closure\": \"^3.5\",\n        \"symfony/config\": \"^4.4 || ^5.2\",\n        \"symfony/console\": \"^4.4 || ^5.2\",\n        \"symfony/dependency-injection\": \"^4.4 || ^5.2\",\n        \"symfony/filesystem\": \"^4.4 || ^5.2\",\n        \"symfony/lock\": \"^4.4 || ^5.2\",\n        \"symfony/mailer\": \"^5.3\",\n        \"symfony/process\": \"^4.4 || ^5.2\",\n        \"symfony/yaml\": \"^4.4 || ^5.2\"\n    },\n    \"require-dev\": {\n        \"ext-json\": \"*\",\n        \"ext-mbstring\": \"*\",\n        \"bamarni/composer-bin-plugin\": \"^1.2\",\n        \"phpunit/phpunit\": \"^9.5.2\",\n        \"symfony/error-handler\": \"^4.4 || ^5.2\",\n        \"symfony/phpunit-bridge\": \"^4.4.8 || ^5.2.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Crunz\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Crunz\\\\Tests\\\\\": \"tests/\"\n        }\n    },\n    \"bin\": [\n        \"crunz\"\n    ],\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"config\": {\n        \"sort-packages\": true\n    },\n    \"scripts\": {\n        \"crunz:cs-fix\": \"@php vendor/bin/php-cs-fixer fix --diff -v --ansi\",\n        \"crunz:analyze\": [\n            \"@php vendor/bin/php-cs-fixer fix --diff --dry-run -v\",\n            \"@phpstan:check\"\n        ],\n        \"crunz:link-changelog\": \"@php vendor/bin/changelog-linker dump-merges --dry-run --in-categories\",\n        \"crunz:link-changelog:since\": \"@php vendor/bin/changelog-linker dump-merges --dry-run --in-categories --since-id\",\n        \"phpstan:check\": \"@php vendor/bin/phpstan analyse -c phpstan.neon src tests crunz config bootstrap.php\"\n    },\n    \"abandoned\": \"crunzphp/crunz\"\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "crunz",
          "type": "blob",
          "size": 1.494140625,
          "content": "#!/usr/bin/env php\n<?php\n\n/*\n|--------------------------------------------------------------------------\n| Crunz\n|--------------------------------------------------------------------------\n|\n| This file is part of Crunz library.\n| (c) Reza M. Lavaryan <mrl.8081@gmail.com>\n| For the full copyright and license information, please view the LICENSE\n| file that was distributed with this source code.\n|\n*/\n\nif (!\\defined('CRUNZ_BIN')) {\n    \\define('CRUNZ_BIN', __FILE__);\n}\n\n$generatePath = function (array $parts) {\n    return \\implode(DIRECTORY_SEPARATOR, $parts);\n};\n$autoloadPaths = [\n    // Dependency\n    $generatePath(\n        [\n            __DIR__,\n            '..',\n            '..',\n            'autoload.php'\n        ]\n    ),\n    // Vendor/Bin\n    $generatePath(\n        [\n            __DIR__,\n            '..',\n            'autoload.php'\n        ]\n    ),\n    // Local dev\n    $generatePath(\n        [\n            __DIR__,\n            'vendor',\n            'autoload.php'\n        ]\n    ),\n];\n\n$autoloadFileFound = false;\n\nforeach ($autoloadPaths as $autoloadPath) {\n    if (\\file_exists($autoloadPath)) {\n        require_once $autoloadPath;\n        $autoloadFileFound = true;\n        break;\n    }\n}\n\nif ($autoloadFileFound === false) {\n    throw new RuntimeException(\n        \\sprintf(\n            'Unable to find \"vendor/autoload.php\" in \"%s\" paths.',\n            \\implode('\", \"', $autoloadPaths)\n        )\n    );\n}\n\n$application = new Crunz\\Application('Crunz Command Line Interface', 'v3.1-dev');\n$application->run();\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 1.1533203125,
          "content": "version: '3'\n\nservices:\n    php74:\n        build:\n            context: ./docker/php74\n        working_dir: /var/www/html\n        environment:\n            CRUNZ_CONTAINER_DEBUG: 1\n        command: >\n            sh -c \"\n                chown -R www-data:www-data /var/www/.composer \\\n                && echo 'Logs from /var/log/php/error.log:' \\\n                && touch /var/log/php/error.log \\\n                && tail -f /var/log/php/error.log\n            \"\n        volumes:\n            - .:/var/www/html\n            - ./docker/php74/php.ini:/usr/local/etc/php/php.ini:ro\n        stop_grace_period: 1s\n\n    php80:\n        build:\n            context: ./docker/php80\n        working_dir: /var/www/html\n        environment:\n            CRUNZ_CONTAINER_DEBUG: 1\n        command: >\n            sh -c \"\n                chown -R www-data:www-data /var/www/.composer \\\n                && echo 'Logs from /var/log/php/error.log:' \\\n                && touch /var/log/php/error.log \\\n                && tail -f /var/log/php/error.log\n            \"\n        volumes:\n            - .:/var/www/html\n            - ./docker/php80/php.ini:/usr/local/etc/php/php.ini:ro\n        stop_grace_period: 1s\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 1.5390625,
          "content": "parameters:\n    level: 8\n    reportUnmatchedIgnoredErrors: false\n    inferPrivatePropertyTypeFromConstructor: true\n    ignoreErrors:\n        -\n            message: '#Variable \\$container might not be defined#'\n            path: config/services.php\n        -\n            message: '#Call to an undefined method Symfony\\\\Component\\\\Config\\\\Definition\\\\Builder\\\\NodeDefinition::children\\(\\)#'\n            path: src/Configuration/Definition.php\n        -\n            message: '#Variable \\$configFile might not be defined#'\n            path: src/Configuration/ConfigurationParser.php\n        -\n            message: '#Call to an undefined method Crunz\\\\Event::DummyFrequency\\(\\)#'\n            path: src/Stubs/BasicTask.php\n        -\n            message: '#Parameter \\#1 \\$command of static method Symfony\\\\Component\\\\Process\\\\Process::fromShellCommandline\\(\\) expects string#'\n            path: src/Process/Process.php\n        -\n            message: '#Result of#'\n            path: src/Event.php\n        -\n            message: '#Parameter \\#1 \\$store of class#'\n            path: src/Event.php\n        -\n            message: '#CrunzContainer#'\n            path: src/Application.php\n        -\n            message: '#Parameter \\#2 \\$currentTime#'\n            path: src/Infrastructure/Dragonmantank/CronExpression/DragonmantankCronExpression.php\n\nincludes:\n    - vendor-bin/static-checks/vendor/phpstan/phpstan-phpunit/extension.neon\n    - vendor-bin/static-checks/vendor/phpstan/phpstan-phpunit/rules.neon\n#    - vendor-bin/static-checks/vendor/phpstan/phpstan-strict-rules/rules.neon\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 1.158203125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/5.4/phpunit.xsd\"\n         bootstrap=\"bootstrap.php\"\n         backupGlobals=\"false\"\n         beStrictAboutCoversAnnotation=\"true\"\n         beStrictAboutOutputDuringTests=\"true\"\n         beStrictAboutTestsThatDoNotTestAnything=\"true\"\n         beStrictAboutTodoAnnotatedTests=\"true\"\n         verbose=\"true\"\n         colors=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"EndToEnd\">\n            <directory suffix=\"Test.php\">tests/EndToEnd</directory>\n        </testsuite>\n        <testsuite name=\"Integration\">\n            <directory suffix=\"Test.php\">tests/Functional</directory>\n        </testsuite>\n        <testsuite name=\"Unit\">\n            <directory suffix=\"Test.php\">tests/Unit</directory>\n        </testsuite>\n    </testsuites>\n\n    <filter>\n        <whitelist processUncoveredFilesFromWhitelist=\"true\">\n            <directory suffix=\".php\">src</directory>\n        </whitelist>\n    </filter>\n\n    <listeners>\n        <listener class=\"Symfony\\Bridge\\PhpUnit\\SymfonyTestsListener\" />\n    </listeners>\n</phpunit>\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor-bin",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}