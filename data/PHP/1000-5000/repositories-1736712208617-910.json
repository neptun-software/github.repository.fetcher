{
  "metadata": {
    "timestamp": 1736712208617,
    "page": 910,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "container-interop/container-interop",
      "stars": 1259,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0361328125,
          "content": "composer.lock\ncomposer.phar\n/vendor/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 container-interop\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.5205078125,
          "content": "# Container Interoperability\n\n[![Latest Stable Version](https://poser.pugx.org/container-interop/container-interop/v/stable.png)](https://packagist.org/packages/container-interop/container-interop)\n[![Total Downloads](https://poser.pugx.org/container-interop/container-interop/downloads.svg)](https://packagist.org/packages/container-interop/container-interop)\n\n## Deprecation warning!\n\nStarting Feb. 13th 2017, container-interop is officially deprecated in favor of [PSR-11](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-11-container.md).\nContainer-interop has been the test-bed of PSR-11. From v1.2, container-interop directly extends PSR-11 interfaces.\nTherefore, all containers implementing container-interop are now *de-facto* compatible with PSR-11.\n\n- Projects implementing container-interop interfaces are encouraged to directly implement PSR-11 interfaces instead.\n- Projects consuming container-interop interfaces are very strongly encouraged to directly type-hint on PSR-11 interfaces, in order to be compatible with PSR-11 containers that are not compatible with container-interop.\n\nRegarding the delegate lookup feature, that is present in container-interop and not in PSR-11, the feature is actually a design pattern. It is therefore not deprecated. Documentation regarding this design pattern will be migrated from this repository into a separate website in the future.\n\n## About\n\n*container-interop* tries to identify and standardize features in *container* objects (service locators,\ndependency injection containers, etc.) to achieve interoperability.\n\nThrough discussions and trials, we try to create a standard, made of common interfaces but also recommendations.\n\nIf PHP projects that provide container implementations begin to adopt these common standards, then PHP\napplications and projects that use containers can depend on the common interfaces instead of specific\nimplementations. This facilitates a high-level of interoperability and flexibility that allows users to consume\n*any* container implementation that can be adapted to these interfaces.\n\nThe work done in this project is not officially endorsed by the [PHP-FIG](http://www.php-fig.org/), but it is being\nworked on by members of PHP-FIG and other good developers. We adhere to the spirit and ideals of PHP-FIG, and hope\nthis project will pave the way for one or more future PSRs.\n\n\n## Installation\n\nYou can install this package through Composer:\n\n```json\ncomposer require container-interop/container-interop\n```\n\nThe packages adheres to the [SemVer](http://semver.org/) specification, and there will be full backward compatibility\nbetween minor versions.\n\n## Standards\n\n### Available\n\n- [`ContainerInterface`](src/Interop/Container/ContainerInterface.php).\n[Description](docs/ContainerInterface.md) [Meta Document](docs/ContainerInterface-meta.md).\nDescribes the interface of a container that exposes methods to read its entries.\n- [*Delegate lookup feature*](docs/Delegate-lookup.md).\n[Meta Document](docs/Delegate-lookup-meta.md).\nDescribes the ability for a container to delegate the lookup of its dependencies to a third-party container. This\nfeature lets several containers work together in a single application.\n\n### Proposed\n\nView open [request for comments](https://github.com/container-interop/container-interop/labels/RFC)\n\n## Compatible projects\n\n### Projects implementing `ContainerInterface`\n\n- [Acclimate](https://github.com/jeremeamia/acclimate-container): Adapters for\n  Aura.Di, Laravel, Nette DI, Pimple, Symfony DI, ZF2 Service manager, ZF2\n  Dependency injection and any container using `ArrayAccess`\n- [Aura.Di](https://github.com/auraphp/Aura.Di)\n- [auryn-container-interop](https://github.com/elazar/auryn-container-interop)\n- [Burlap](https://github.com/codeeverything/burlap)\n- [Chernozem](https://github.com/pyrsmk/Chernozem)\n- [Data Manager](https://github.com/chrismichaels84/data-manager)\n- [Disco](https://github.com/bitexpert/disco)\n- [InDI](https://github.com/idealogica/indi)\n- [League/Container](http://container.thephpleague.com/)\n- [Mouf](http://mouf-php.com)\n- [Njasm Container](https://github.com/njasm/container)\n- [PHP-DI](http://php-di.org)\n- [Picotainer](https://github.com/thecodingmachine/picotainer)\n- [PimpleInterop](https://github.com/moufmouf/pimple-interop)\n- [Pimple3-ContainerInterop](https://github.com/Sam-Burns/pimple3-containerinterop) (using Pimple v3)\n- [SitePoint Container](https://github.com/sitepoint/Container)\n- [Thruster Container](https://github.com/ThrusterIO/container) (PHP7 only)\n- [Ultra-Lite Container](https://github.com/ultra-lite/container)\n- [Unbox](https://github.com/mindplay-dk/unbox)\n- [XStatic](https://github.com/jeremeamia/xstatic)\n- [Zend\\ServiceManager](https://github.com/zendframework/zend-servicemanager)\n- [Zit](https://github.com/inxilpro/Zit)\n\n### Projects implementing the *delegate lookup* feature\n\n- [Aura.Di](https://github.com/auraphp/Aura.Di)\n- [Burlap](https://github.com/codeeverything/burlap)\n- [Chernozem](https://github.com/pyrsmk/Chernozem)\n- [InDI](https://github.com/idealogica/indi)\n- [League/Container](http://container.thephpleague.com/)\n- [Mouf](http://mouf-php.com)\n- [Picotainer](https://github.com/thecodingmachine/picotainer)\n- [PHP-DI](http://php-di.org)\n- [PimpleInterop](https://github.com/moufmouf/pimple-interop)\n- [Ultra-Lite Container](https://github.com/ultra-lite/container)\n\n### Middlewares implementing `ContainerInterface`\n\n- [Alias-Container](https://github.com/thecodingmachine/alias-container): add\n  aliases support to any container\n- [Prefixer-Container](https://github.com/thecodingmachine/prefixer-container):\n  dynamically prefix identifiers\n- [Lazy-Container](https://github.com/snapshotpl/lazy-container): lazy services\n\n### Projects using `ContainerInterface`\n\nThe list below contains only a sample of all the projects consuming `ContainerInterface`. For a more complete list have a look [here](http://packanalyst.com/class?q=Interop%5CContainer%5CContainerInterface).\n\n| | Downloads |\n| --- | --- |\n| [Adroit](https://github.com/bitexpert/adroit) | ![](https://img.shields.io/packagist/dt/bitexpert/adroit.svg) |\n| [Behat](https://github.com/Behat/Behat/pull/974) | ![](https://img.shields.io/packagist/dt/behat/behat.svg) |\n| [blast-facades](https://github.com/phpthinktank/blast-facades): Minimize complexity and represent dependencies as facades. | ![](https://img.shields.io/packagist/dt/blast/facades.svg) |\n| [interop.silex.di](https://github.com/thecodingmachine/interop.silex.di): an extension to [Silex](http://silex.sensiolabs.org/) that adds support for any *container-interop* compatible container | ![](https://img.shields.io/packagist/dt/mouf/interop.silex.di.svg) |\n| [mindplay/walkway](https://github.com/mindplay-dk/walkway): a modular request router | ![](https://img.shields.io/packagist/dt/mindplay/walkway.svg) |\n| [mindplay/middleman](https://github.com/mindplay-dk/middleman): minimalist PSR-7 middleware dispatcher | ![](https://img.shields.io/packagist/dt/mindplay/middleman.svg) |\n| [PHP-DI/Invoker](https://github.com/PHP-DI/Invoker): extensible and configurable invoker/dispatcher | ![](https://img.shields.io/packagist/dt/php-di/invoker.svg) |\n| [Prophiler](https://github.com/fabfuel/prophiler) | ![](https://img.shields.io/packagist/dt/fabfuel/prophiler.svg) |\n| [Silly](https://github.com/mnapoli/silly): CLI micro-framework | ![](https://img.shields.io/packagist/dt/mnapoli/silly.svg) |\n| [Slim v3](https://github.com/slimphp/Slim) | ![](https://img.shields.io/packagist/dt/slim/slim.svg) |\n| [Splash](http://mouf-php.com/packages/mouf/mvc.splash-common/version/8.0-dev/README.md) | ![](https://img.shields.io/packagist/dt/mouf/mvc.splash-common.svg) |\n| [Woohoo Labs. Harmony](https://github.com/woohoolabs/harmony): a flexible micro-framework | ![](https://img.shields.io/packagist/dt/woohoolabs/harmony.svg) |\n| [zend-expressive](https://github.com/zendframework/zend-expressive) | ![](https://img.shields.io/packagist/dt/zendframework/zend-expressive.svg) |\n\n\n## Workflow\n\nEveryone is welcome to join and contribute.\n\nThe general workflow looks like this:\n\n1. Someone opens a discussion (GitHub issue) to suggest an interface\n1. Feedback is gathered\n1. The interface is added to a development branch\n1. We release alpha versions so that the interface can be experimented with\n1. Discussions and edits ensue until the interface is deemed stable by a general consensus\n1. A new minor version of the package is released\n\nWe try to not break BC by creating new interfaces instead of editing existing ones.\n\nWhile we currently work on interfaces, we are open to anything that might help towards interoperability, may that\nbe code, best practices, etc.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.423828125,
          "content": "{\n    \"name\": \"container-interop/container-interop\",\n    \"type\": \"library\",\n    \"description\": \"Promoting the interoperability of container objects (DIC, SL, etc.)\",\n    \"homepage\": \"https://github.com/container-interop/container-interop\",\n    \"license\": \"MIT\",\n    \"autoload\": {\n        \"psr-4\": {\n            \"Interop\\\\Container\\\\\": \"src/Interop/Container/\"\n        }\n    },\n    \"require\": {\n        \"psr/container\": \"^1.0\"\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}