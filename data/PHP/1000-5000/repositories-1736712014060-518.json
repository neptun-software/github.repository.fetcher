{
  "metadata": {
    "timestamp": 1736712014060,
    "page": 518,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "brick/math",
      "stars": 1881,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.21484375,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.{yml,yaml}]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3330078125,
          "content": ".editorconfig    export-ignore\n.gitattributes   export-ignore\n.gitignore       export-ignore\napigen.neon      export-ignore\nphpunit.php      export-ignore\nphpunit.xml      export-ignore\npsalm.xml        export-ignore\nrandom-tests.php export-ignore\nREADME.md        export-ignore\ntests/           export-ignore\n.github/         export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0380859375,
          "content": "/vendor\n/composer.lock\n/.phpunit.cache\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 18.7060546875,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\n## UNRELEASED (0.12.2)\n\nüëå **Improvements**\n\n- Add missing `RoundingNecessaryException` to the `@throws` annotation of `BigNumber::of()`\n\n## [0.12.1](https://github.com/brick/math/releases/tag/0.12.1) - 2023-11-29\n\n‚ö°Ô∏è **Performance improvements**\n\n- `BigNumber::of()` is now faster, thanks to [@SebastienDug](https://github.com/SebastienDug) in [#77](https://github.com/brick/math/pull/77).\n\n## [0.12.0](https://github.com/brick/math/releases/tag/0.12.0) - 2023-11-26\n\nüí• **Breaking changes**\n\n- Minimum PHP version is now 8.1\n- `RoundingMode` is now an `enum`; if you're type-hinting rounding modes, you need to type-hint against `RoundingMode` instead of `int` now\n- `BigNumber` classes do not implement the `Serializable` interface anymore (they use the [new custom object serialization mechanism](https://wiki.php.net/rfc/custom_object_serialization))\n- The following breaking changes only affect you if you're creating your own `BigNumber` subclasses:\n  - the return type of `BigNumber::of()` is now `static`\n  - `BigNumber` has a new abstract method `from()`\n  - all `public` and `protected` functions of `BigNumber` are now `final`\n\n## [0.11.0](https://github.com/brick/math/releases/tag/0.11.0) - 2023-01-16\n\nüí• **Breaking changes**\n\n- Minimum PHP version is now 8.0\n- Methods accepting a union of types are now strongly typed<sup>*</sup>\n- `MathException` now extends `Exception` instead of `RuntimeException`\n\n<sup>* You may now run into type errors if you were passing `Stringable` objects to `of()` or any of the methods\ninternally calling `of()`, with `strict_types` enabled. You can fix this by casting `Stringable` objects to `string`\nfirst.</sup>\n\n## [0.10.2](https://github.com/brick/math/releases/tag/0.10.2) - 2022-08-11\n\nüëå **Improvements**\n\n- `BigRational::toFloat()` now simplifies the fraction before performing division (#73) thanks to @olsavmic\n\n## [0.10.1](https://github.com/brick/math/releases/tag/0.10.1) - 2022-08-02\n\n‚ú® **New features**\n\n- `BigInteger::gcdMultiple()` returns the GCD of multiple `BigInteger` numbers\n\n## [0.10.0](https://github.com/brick/math/releases/tag/0.10.0) - 2022-06-18\n\nüí• **Breaking changes**\n\n- Minimum PHP version is now 7.4\n\n## [0.9.3](https://github.com/brick/math/releases/tag/0.9.3) - 2021-08-15\n\nüöÄ **Compatibility with PHP 8.1**\n\n- Support for custom object serialization; this removes a warning on PHP 8.1 due to the `Serializable` interface being deprecated (#60) thanks @TRowbotham\n\n## [0.9.2](https://github.com/brick/math/releases/tag/0.9.2) - 2021-01-20\n\nüêõ **Bug fix**\n\n- Incorrect results could be returned when using the BCMath calculator, with a default scale set with `bcscale()`, on PHP >= 7.2 (#55).\n\n## [0.9.1](https://github.com/brick/math/releases/tag/0.9.1) - 2020-08-19\n\n‚ú® **New features**\n\n- `BigInteger::not()` returns the bitwise `NOT` value\n\nüêõ **Bug fixes**\n\n- `BigInteger::toBytes()` could return an incorrect binary representation for some numbers\n- The bitwise operations `and()`, `or()`, `xor()` on `BigInteger` could return an incorrect result when the GMP extension is not available\n\n## [0.9.0](https://github.com/brick/math/releases/tag/0.9.0) - 2020-08-18\n\nüëå **Improvements**\n\n- `BigNumber::of()` now accepts `.123` and `123.` formats, both of which return a `BigDecimal`\n\nüí• **Breaking changes**\n\n- Deprecated method `BigInteger::powerMod()` has been removed - use `modPow()` instead\n- Deprecated method `BigInteger::parse()` has been removed - use `fromBase()` instead\n\n## [0.8.17](https://github.com/brick/math/releases/tag/0.8.17) - 2020-08-19\n\nüêõ **Bug fix**\n\n- `BigInteger::toBytes()` could return an incorrect binary representation for some numbers\n- The bitwise operations `and()`, `or()`, `xor()` on `BigInteger` could return an incorrect result when the GMP extension is not available\n\n## [0.8.16](https://github.com/brick/math/releases/tag/0.8.16) - 2020-08-18\n\nüöë **Critical fix**\n\n- This version reintroduces the deprecated `BigInteger::parse()` method, that has been removed by mistake in version `0.8.9` and should have lasted for the whole `0.8` release cycle.\n\n‚ú® **New features**\n\n- `BigInteger::modInverse()` calculates a modular multiplicative inverse\n- `BigInteger::fromBytes()` creates a `BigInteger` from a byte string\n- `BigInteger::toBytes()` converts a `BigInteger` to a byte string\n- `BigInteger::randomBits()` creates a pseudo-random `BigInteger` of a given bit length\n- `BigInteger::randomRange()` creates a pseudo-random `BigInteger` between two bounds\n\nüí© **Deprecations**\n\n- `BigInteger::powerMod()` is now deprecated in favour of `modPow()`\n\n## [0.8.15](https://github.com/brick/math/releases/tag/0.8.15) - 2020-04-15\n\nüêõ **Fixes**\n\n- added missing `ext-json` requirement, due to `BigNumber` implementing `JsonSerializable`\n\n‚ö°Ô∏è **Optimizations**\n\n- additional optimization in `BigInteger::remainder()`\n\n## [0.8.14](https://github.com/brick/math/releases/tag/0.8.14) - 2020-02-18\n\n‚ú® **New features**\n\n- `BigInteger::getLowestSetBit()` returns the index of the rightmost one bit\n\n## [0.8.13](https://github.com/brick/math/releases/tag/0.8.13) - 2020-02-16\n\n‚ú® **New features**\n\n- `BigInteger::isEven()` tests whether the number is even\n- `BigInteger::isOdd()` tests whether the number is odd\n- `BigInteger::testBit()` tests if a bit is set\n- `BigInteger::getBitLength()` returns the number of bits in the minimal representation of the number\n\n## [0.8.12](https://github.com/brick/math/releases/tag/0.8.12) - 2020-02-03\n\nüõ†Ô∏è **Maintenance release**\n\nClasses are now annotated for better static analysis with [psalm](https://psalm.dev/).\n\nThis is a maintenance release: no bug fixes, no new features, no breaking changes.\n\n## [0.8.11](https://github.com/brick/math/releases/tag/0.8.11) - 2020-01-23\n\n‚ú® **New feature**\n\n`BigInteger::powerMod()` performs a power-with-modulo operation. Useful for crypto.\n\n## [0.8.10](https://github.com/brick/math/releases/tag/0.8.10) - 2020-01-21\n\n‚ú® **New feature**\n\n`BigInteger::mod()` returns the **modulo** of two numbers. The *modulo* differs from the *remainder* when the signs of the operands are different.\n\n## [0.8.9](https://github.com/brick/math/releases/tag/0.8.9) - 2020-01-08\n\n‚ö°Ô∏è **Performance improvements**\n\nA few additional optimizations in `BigInteger` and `BigDecimal` when one of the operands can be returned as is. Thanks to @tomtomsen in #24.\n\n## [0.8.8](https://github.com/brick/math/releases/tag/0.8.8) - 2019-04-25\n\nüêõ **Bug fixes**\n\n- `BigInteger::toBase()` could return an empty string for zero values (BCMath & Native calculators only, GMP calculator unaffected)\n\n‚ú® **New features**\n\n- `BigInteger::toArbitraryBase()` converts a number to an arbitrary base, using a custom alphabet\n- `BigInteger::fromArbitraryBase()` converts a string in an arbitrary base, using a custom alphabet, back to a number\n\nThese methods can be used as the foundation to convert strings between different bases/alphabets, using BigInteger as an intermediate representation.\n\nüí© **Deprecations**\n\n- `BigInteger::parse()` is now deprecated in favour of `fromBase()`\n\n`BigInteger::fromBase()` works the same way as `parse()`, with 2 minor differences:\n\n- the `$base` parameter is required, it does not default to `10`\n- it throws a `NumberFormatException` instead of an `InvalidArgumentException` when the number is malformed\n\n## [0.8.7](https://github.com/brick/math/releases/tag/0.8.7) - 2019-04-20\n\n**Improvements**\n\n- Safer conversion from `float` when using custom locales\n- **Much faster** `NativeCalculator` implementation üöÄ\n\nYou can expect **at least a 3x performance improvement** for common arithmetic operations when using the library on systems without GMP or BCMath; it gets exponentially faster on multiplications with a high number of digits. This is due to calculations now being performed on whole blocks of digits (the block size depending on the platform, 32-bit or 64-bit) instead of digit-by-digit as before.\n\n## [0.8.6](https://github.com/brick/math/releases/tag/0.8.6) - 2019-04-11\n\n**New method**\n\n`BigNumber::sum()` returns the sum of one or more numbers.\n\n## [0.8.5](https://github.com/brick/math/releases/tag/0.8.5) - 2019-02-12\n\n**Bug fix**: `of()` factory methods could fail when passing a `float` in environments using a `LC_NUMERIC` locale with a decimal separator other than `'.'` (#20).\n\nThanks @manowark üëç\n\n## [0.8.4](https://github.com/brick/math/releases/tag/0.8.4) - 2018-12-07\n\n**New method**\n\n`BigDecimal::sqrt()` calculates the square root of a decimal number, to a given scale.\n\n## [0.8.3](https://github.com/brick/math/releases/tag/0.8.3) - 2018-12-06\n\n**New method**\n\n`BigInteger::sqrt()` calculates the square root of a number (thanks @peter279k).\n\n**New exception**\n\n`NegativeNumberException` is thrown when calling `sqrt()` on a negative number.\n\n## [0.8.2](https://github.com/brick/math/releases/tag/0.8.2) - 2018-11-08\n\n**Performance update**\n\n- Further improvement of `toInt()` performance\n- `NativeCalculator` can now perform some multiplications more efficiently\n\n## [0.8.1](https://github.com/brick/math/releases/tag/0.8.1) - 2018-11-07\n\nPerformance optimization of `toInt()` methods.\n\n## [0.8.0](https://github.com/brick/math/releases/tag/0.8.0) - 2018-10-13\n\n**Breaking changes**\n\nThe following deprecated methods have been removed. Use the new method name instead:\n\n| Method removed | Replacement method |\n| --- | --- |\n| `BigDecimal::getIntegral()` | `BigDecimal::getIntegralPart()` |\n| `BigDecimal::getFraction()` | `BigDecimal::getFractionalPart()` |\n\n---\n\n**New features**\n\n`BigInteger` has been augmented with 5 new methods for bitwise operations:\n\n| New method | Description |\n| --- | --- |\n| `and()` | performs a bitwise `AND` operation on two numbers |\n| `or()` | performs a bitwise `OR` operation on two numbers |\n| `xor()` | performs a bitwise `XOR` operation on two numbers |\n| `shiftedLeft()` | returns the number shifted left by a number of bits |\n| `shiftedRight()` | returns the number shifted right by a number of bits |\n\nThanks to @DASPRiD üëç\n\n## [0.7.3](https://github.com/brick/math/releases/tag/0.7.3) - 2018-08-20\n\n**New method:** `BigDecimal::hasNonZeroFractionalPart()`\n\n**Renamed/deprecated methods:**\n\n- `BigDecimal::getIntegral()` has been renamed to `getIntegralPart()` and is now deprecated\n- `BigDecimal::getFraction()` has been renamed to `getFractionalPart()` and is now deprecated\n\n## [0.7.2](https://github.com/brick/math/releases/tag/0.7.2) - 2018-07-21\n\n**Performance update**\n\n`BigInteger::parse()` and `toBase()` now use GMP's built-in base conversion features when available.\n\n## [0.7.1](https://github.com/brick/math/releases/tag/0.7.1) - 2018-03-01\n\nThis is a maintenance release, no code has been changed.\n\n- When installed with `--no-dev`, the autoloader does not autoload tests anymore\n- Tests and other files unnecessary for production are excluded from the dist package\n\nThis will help make installations more compact.\n\n## [0.7.0](https://github.com/brick/math/releases/tag/0.7.0) - 2017-10-02\n\nMethods renamed:\n\n- `BigNumber:sign()` has been renamed to `getSign()`\n- `BigDecimal::unscaledValue()` has been renamed to `getUnscaledValue()`\n- `BigDecimal::scale()` has been renamed to `getScale()`\n- `BigDecimal::integral()` has been renamed to `getIntegral()`\n- `BigDecimal::fraction()` has been renamed to `getFraction()`\n- `BigRational::numerator()` has been renamed to `getNumerator()`\n- `BigRational::denominator()` has been renamed to `getDenominator()`\n\nClasses renamed:\n\n- `ArithmeticException` has been renamed to `MathException`\n\n## [0.6.2](https://github.com/brick/math/releases/tag/0.6.2) - 2017-10-02\n\nThe base class for all exceptions is now `MathException`.\n`ArithmeticException` has been deprecated, and will be removed in 0.7.0.\n\n## [0.6.1](https://github.com/brick/math/releases/tag/0.6.1) - 2017-10-02\n\nA number of methods have been renamed:\n\n- `BigNumber:sign()` is deprecated; use `getSign()` instead\n- `BigDecimal::unscaledValue()` is deprecated; use `getUnscaledValue()` instead\n- `BigDecimal::scale()` is deprecated; use `getScale()` instead\n- `BigDecimal::integral()` is deprecated; use `getIntegral()` instead\n- `BigDecimal::fraction()` is deprecated; use `getFraction()` instead\n- `BigRational::numerator()` is deprecated; use `getNumerator()` instead\n- `BigRational::denominator()` is deprecated; use `getDenominator()` instead\n\nThe old methods will be removed in version 0.7.0.\n\n## [0.6.0](https://github.com/brick/math/releases/tag/0.6.0) - 2017-08-25\n\n- Minimum PHP version is now [7.1](https://gophp71.org/); for PHP 5.6 and PHP 7.0 support, use version `0.5`\n- Deprecated method `BigDecimal::withScale()` has been removed; use `toScale()` instead\n- Method `BigNumber::toInteger()` has been renamed to `toInt()`\n\n## [0.5.4](https://github.com/brick/math/releases/tag/0.5.4) - 2016-10-17\n\n`BigNumber` classes now implement [JsonSerializable](http://php.net/manual/en/class.jsonserializable.php).\nThe JSON output is always a string.\n\n## [0.5.3](https://github.com/brick/math/releases/tag/0.5.3) - 2016-03-31\n\nThis is a bugfix release. Dividing by a negative power of 1 with the same scale as the dividend could trigger an incorrect optimization which resulted in a wrong result. See #6.\n\n## [0.5.2](https://github.com/brick/math/releases/tag/0.5.2) - 2015-08-06\n\nThe `$scale` parameter of `BigDecimal::dividedBy()` is now optional again.\n\n## [0.5.1](https://github.com/brick/math/releases/tag/0.5.1) - 2015-07-05\n\n**New method: `BigNumber::toScale()`**\n\nThis allows to convert any `BigNumber` to a `BigDecimal` with a given scale, using rounding if necessary.\n\n## [0.5.0](https://github.com/brick/math/releases/tag/0.5.0) - 2015-07-04\n\n**New features**\n- Common `BigNumber` interface for all classes, with the following methods:\n  - `sign()` and derived methods (`isZero()`, `isPositive()`, ...)\n  - `compareTo()` and derived methods (`isEqualTo()`, `isGreaterThan()`, ...) that work across different `BigNumber` types\n  - `toBigInteger()`, `toBigDecimal()`, `toBigRational`() conversion methods\n  - `toInteger()` and `toFloat()` conversion methods to native types\n- Unified `of()` behaviour: every class now accepts any type of number, provided that it can be safely converted to the current type\n- New method: `BigDecimal::exactlyDividedBy()`; this method automatically computes the scale of the result, provided that the division yields a finite number of digits\n- New methods: `BigRational::quotient()` and `remainder()`\n- Fine-grained exceptions: `DivisionByZeroException`, `RoundingNecessaryException`, `NumberFormatException`\n- Factory methods `zero()`, `one()` and `ten()` available in all classes\n- Rounding mode reintroduced in `BigInteger::dividedBy()`\n\nThis release also comes with many performance improvements.\n\n---\n\n**Breaking changes**\n- `BigInteger`:\n  - `getSign()` is renamed to `sign()`\n  - `toString()` is renamed to `toBase()`\n  - `BigInteger::dividedBy()` now throws an exception by default if the remainder is not zero; use `quotient()` to get the previous behaviour\n- `BigDecimal`:\n  - `getSign()` is renamed to `sign()`\n  - `getUnscaledValue()` is renamed to `unscaledValue()`\n  - `getScale()` is renamed to `scale()`\n  - `getIntegral()` is renamed to `integral()`\n  - `getFraction()` is renamed to `fraction()`\n  - `divideAndRemainder()` is renamed to `quotientAndRemainder()`\n  - `dividedBy()` now takes a **mandatory** `$scale` parameter **before** the rounding mode\n  - `toBigInteger()` does not accept a `$roundingMode` parameter anymore\n  - `toBigRational()` does not simplify the fraction anymore; explicitly add `->simplified()` to get the previous behaviour\n- `BigRational`:\n  - `getSign()` is renamed to `sign()`\n  - `getNumerator()` is renamed to  `numerator()`\n  - `getDenominator()` is renamed to  `denominator()`\n  - `of()` is renamed to `nd()`, while `parse()` is renamed to `of()`\n- Miscellaneous:\n  - `ArithmeticException` is moved to an `Exception\\` sub-namespace\n  - `of()` factory methods now throw `NumberFormatException` instead of `InvalidArgumentException`\n\n## [0.4.3](https://github.com/brick/math/releases/tag/0.4.3) - 2016-03-31\n\nBackport of two bug fixes from the 0.5 branch:\n- `BigInteger::parse()` did not always throw `InvalidArgumentException` as expected\n- Dividing by a negative power of 1 with the same scale as the dividend could trigger an incorrect optimization which resulted in a wrong result. See #6.\n\n## [0.4.2](https://github.com/brick/math/releases/tag/0.4.2) - 2015-06-16\n\nNew method: `BigDecimal::stripTrailingZeros()`\n\n## [0.4.1](https://github.com/brick/math/releases/tag/0.4.1) - 2015-06-12\n\nIntroducing a `BigRational` class, to perform calculations on fractions of any size.\n\n## [0.4.0](https://github.com/brick/math/releases/tag/0.4.0) - 2015-06-12\n\nRounding modes have been removed from `BigInteger`, and are now a concept specific to `BigDecimal`.\n\n`BigInteger::dividedBy()` now always returns the quotient of the division.\n\n## [0.3.5](https://github.com/brick/math/releases/tag/0.3.5) - 2016-03-31\n\nBackport of two bug fixes from the 0.5 branch:\n\n- `BigInteger::parse()` did not always throw `InvalidArgumentException` as expected\n- Dividing by a negative power of 1 with the same scale as the dividend could trigger an incorrect optimization which resulted in a wrong result. See #6.\n\n## [0.3.4](https://github.com/brick/math/releases/tag/0.3.4) - 2015-06-11\n\nNew methods:\n- `BigInteger::remainder()` returns the remainder of a division only\n- `BigInteger::gcd()` returns the greatest common divisor of two numbers\n\n## [0.3.3](https://github.com/brick/math/releases/tag/0.3.3) - 2015-06-07\n\nFix `toString()` not handling negative numbers.\n\n## [0.3.2](https://github.com/brick/math/releases/tag/0.3.2) - 2015-06-07\n\n`BigInteger` and `BigDecimal` now have a `getSign()` method that returns:\n- `-1` if the number is negative\n- `0` if the number is zero\n- `1` if the number is positive\n\n## [0.3.1](https://github.com/brick/math/releases/tag/0.3.1) - 2015-06-05\n\nMinor performance improvements\n\n## [0.3.0](https://github.com/brick/math/releases/tag/0.3.0) - 2015-06-04\n\nThe `$roundingMode` and `$scale` parameters have been swapped in `BigDecimal::dividedBy()`.\n\n## [0.2.2](https://github.com/brick/math/releases/tag/0.2.2) - 2015-06-04\n\nStronger immutability guarantee for `BigInteger` and `BigDecimal`.\n\nSo far, it would have been possible to break immutability of these classes by calling the `unserialize()` internal function. This release fixes that.\n\n## [0.2.1](https://github.com/brick/math/releases/tag/0.2.1) - 2015-06-02\n\nAdded `BigDecimal::divideAndRemainder()`\n\n## [0.2.0](https://github.com/brick/math/releases/tag/0.2.0) - 2015-05-22\n\n- `min()` and `max()` do not accept an `array` anymore, but a variable number of parameters\n- **minimum PHP version is now 5.6**\n- continuous integration with PHP 7\n\n## [0.1.1](https://github.com/brick/math/releases/tag/0.1.1) - 2014-09-01\n\n- Added `BigInteger::power()`\n- Added HHVM support\n\n## [0.1.0](https://github.com/brick/math/releases/tag/0.1.0) - 2014-08-31\n\nFirst beta release.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0634765625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013-present Benjamin Morel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.65625,
          "content": "## Brick\\Math\n\n<img src=\"https://raw.githubusercontent.com/brick/brick/master/logo.png\" alt=\"\" align=\"left\" height=\"64\">\n\nA PHP library to work with arbitrary precision numbers.\n\n[![Build Status](https://github.com/brick/math/workflows/CI/badge.svg)](https://github.com/brick/math/actions)\n[![Coverage Status](https://coveralls.io/repos/github/brick/math/badge.svg?branch=master)](https://coveralls.io/github/brick/math?branch=master)\n[![Latest Stable Version](https://poser.pugx.org/brick/math/v/stable)](https://packagist.org/packages/brick/math)\n[![Total Downloads](https://poser.pugx.org/brick/math/downloads)](https://packagist.org/packages/brick/math)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](http://opensource.org/licenses/MIT)\n\n### Installation\n\nThis library is installable via [Composer](https://getcomposer.org/):\n\n```bash\ncomposer require brick/math\n```\n\n### Requirements\n\nThis library requires PHP 8.1 or later.\n\nFor PHP 8.0 compatibility, you can use version `0.11`. For PHP 7.4, you can use version `0.10`. For PHP 7.1, 7.2 & 7.3, you can use version `0.9`. Note that [these PHP versions are EOL](http://php.net/supported-versions.php) and not supported anymore. If you're still using one of these PHP versions, you should consider upgrading as soon as possible.\n\nAlthough the library can work seamlessly on any PHP installation, it is highly recommended that you install the\n[GMP](http://php.net/manual/en/book.gmp.php) or [BCMath](http://php.net/manual/en/book.bc.php) extension\nto speed up calculations. The fastest available calculator implementation will be automatically selected at runtime.\n\n### Project status & release process\n\nWhile this library is still under development, it is well tested and considered stable enough to use in production\nenvironments.\n\nThe current releases are numbered `0.x.y`. When a non-breaking change is introduced (adding new methods, optimizing\nexisting code, etc.), `y` is incremented.\n\n**When a breaking change is introduced, a new `0.x` version cycle is always started.**\n\nIt is therefore safe to lock your project to a given release cycle, such as `^0.12`.\n\nIf you need to upgrade to a newer release cycle, check the [release history](https://github.com/brick/math/releases)\nfor a list of changes introduced by each further `0.x.0` version.\n\n### Package contents\n\nThis library provides the following public classes in the `Brick\\Math` namespace:\n\n- [BigNumber](https://github.com/brick/math/blob/0.12.0/src/BigNumber.php): base class for `BigInteger`, `BigDecimal` and `BigRational`\n- [BigInteger](https://github.com/brick/math/blob/0.12.0/src/BigInteger.php): represents an arbitrary-precision integer number.\n- [BigDecimal](https://github.com/brick/math/blob/0.12.0/src/BigDecimal.php): represents an arbitrary-precision decimal number.\n- [BigRational](https://github.com/brick/math/blob/0.12.0/src/BigRational.php): represents an arbitrary-precision rational number (fraction).\n- [RoundingMode](https://github.com/brick/math/blob/0.12.0/src/RoundingMode.php): enum representing all available rounding modes.\n\nAnd the following exceptions in the `Brick\\Math\\Exception` namespace:\n\n- [MathException](https://github.com/brick/math/blob/0.12.0/src/Exception/MathException.php): base class for all exceptions\n- [DivisionByZeroException](https://github.com/brick/math/blob/0.12.0/src/Exception/DivisionByZeroException.php): thrown when a division by zero occurs\n- [IntegerOverflowException](https://github.com/brick/math/blob/0.12.0/src/Exception/IntegerOverflowException.php): thrown when attempting to convert a too large `BigInteger` to `int`\n- [NumberFormatException](https://github.com/brick/math/blob/0.12.0/src/Exception/NumberFormatException.php): thrown when parsing a number string in an invalid format\n- [RoundingNecessaryException](https://github.com/brick/math/blob/0.12.0/src/Exception/RoundingNecessaryException.php): thrown when the result of the operation cannot be represented without explicit rounding\n- [NegativeNumberException](https://github.com/brick/math/blob/0.12.0/src/Exception/NegativeNumberException.php): thrown when attempting to calculate the square root of a negative number\n\n### Overview\n\n#### Instantiation\n\nThe constructors of the classes are not public, you must use a factory method to obtain an instance.\n\nAll classes provide an `of()` factory method that accepts any of the following types:\n\n- `BigNumber` instances\n- `int` numbers\n- `float` numbers\n- `string` representations of integer, decimal and rational numbers\n\nExample:\n\n```php\nBigInteger::of(123546);\nBigInteger::of('9999999999999999999999999999999999999999999');\n\nBigDecimal::of(1.2);\nBigDecimal::of('9.99999999999999999999999999999999999999999999');\n\nBigRational::of('2/3');\nBigRational::of('1.1'); // 11/10\n```\n\nNote that all `of()` methods accept all the representations above, *as long as it can be safely converted to\nthe current type*:\n\n```php\nBigInteger::of('1.00'); // 1\nBigInteger::of('1.01'); // RoundingNecessaryException\n\nBigDecimal::of('1/8'); // 0.125\nBigDecimal::of('1/3'); // RoundingNecessaryException\n```\n\nNote about native integers: instantiating from an `int` is safe *as long as you don't exceed the maximum\nvalue for your platform* (`PHP_INT_MAX`), in which case it would be transparently converted to `float` by PHP without\nnotice, and could result in a loss of information. In doubt, prefer instantiating from a `string`, which supports\nan unlimited numbers of digits:\n\n```php\necho BigInteger::of(999999999999999999999); // 1000000000000000000000\necho BigInteger::of('999999999999999999999'); // 999999999999999999999\n```\n\nNote about floating-point values: instantiating from a `float` might be unsafe, as floating-point values are\nimprecise by design, and could result in a loss of information. Always prefer instantiating from a `string`, which\nsupports an unlimited number of digits:\n\n```php\necho BigDecimal::of(1.99999999999999999999); // 2\necho BigDecimal::of('1.99999999999999999999'); // 1.99999999999999999999\n```\n\n#### Immutability & chaining\n\nThe `BigInteger`, `BigDecimal` and `BigRational` classes are immutable: their value never changes,\nso that they can be safely passed around. All methods that return a `BigInteger`, `BigDecimal` or `BigRational`\nreturn a new object, leaving the original object unaffected:\n\n```php\n$ten = BigInteger::of(10);\n\necho $ten->plus(5); // 15\necho $ten->multipliedBy(3); // 30\n```\n\nThe methods can be chained for better readability:\n\n```php\necho BigInteger::of(10)->plus(5)->multipliedBy(3); // 45\n```\n\n#### Parameter types\n\nAll methods that accept a number: `plus()`, `minus()`, `multipliedBy()`, etc. accept the same types as `of()`.\nFor example, given the following number:\n\n```php\n$integer = BigInteger::of(123);\n```\n\nThe following lines are equivalent:\n\n```php\n$integer->multipliedBy(123);\n$integer->multipliedBy('123');\n$integer->multipliedBy($integer);\n```\n\nJust like `of()`, other types of `BigNumber` are acceptable, as long as they can be safely converted to the current type:\n\n```php\necho BigInteger::of(2)->multipliedBy(BigDecimal::of('2.0')); // 4\necho BigInteger::of(2)->multipliedBy(BigDecimal::of('2.5')); // RoundingNecessaryException\necho BigDecimal::of(2.5)->multipliedBy(BigInteger::of(2)); // 5.0\n```\n\n#### Division & rounding\n\n##### BigInteger\n\nBy default, dividing a `BigInteger` returns the exact result of the division, or throws an exception if the remainder\nof the division is not zero:\n\n```php\necho BigInteger::of(999)->dividedBy(3); // 333\necho BigInteger::of(1000)->dividedBy(3); // RoundingNecessaryException\n```\n\nYou can pass an optional [rounding mode](https://github.com/brick/math/blob/0.12.0/src/RoundingMode.php) to round the result, if necessary:\n\n```php\necho BigInteger::of(1000)->dividedBy(3, RoundingMode::DOWN); // 333\necho BigInteger::of(1000)->dividedBy(3, RoundingMode::UP); // 334\n```\n\nIf you're into quotients and remainders, there are methods for this, too:\n\n```php\necho BigInteger::of(1000)->quotient(3); // 333\necho BigInteger::of(1000)->remainder(3); // 1\n```\n\nYou can even get both at the same time:\n\n```php\n[$quotient, $remainder] = BigInteger::of(1000)->quotientAndRemainder(3);\n```\n\n##### BigDecimal\n\nDividing a `BigDecimal` always requires a scale to be specified. If the exact result of the division does not fit in\nthe given scale, a [rounding mode](https://github.com/brick/math/blob/0.12.0/src/RoundingMode.php) must be provided.\n\n```php\necho BigDecimal::of(1)->dividedBy('8', 3); // 0.125\necho BigDecimal::of(1)->dividedBy('8', 2); // RoundingNecessaryException\necho BigDecimal::of(1)->dividedBy('8', 2, RoundingMode::HALF_DOWN); // 0.12\necho BigDecimal::of(1)->dividedBy('8', 2, RoundingMode::HALF_UP); // 0.13\n```\n\nIf you know that the division yields a finite number of decimals places, you can use `exactlyDividedBy()`, which will\nautomatically compute the required scale to fit the result, or throw an exception if the division yields an infinite\nrepeating decimal:\n\n```php\necho BigDecimal::of(1)->exactlyDividedBy(256); // 0.00390625\necho BigDecimal::of(1)->exactlyDividedBy(11); // RoundingNecessaryException\n```\n\n##### BigRational\n\nThe result of the division of a `BigRational` can always be represented exactly:\n\n```php\necho BigRational::of('123/456')->dividedBy('7'); // 123/3192\necho BigRational::of('123/456')->dividedBy('9/8'); // 984/4104\n```\n\n#### Bitwise operations\n\n`BigInteger` supports bitwise operations:\n\n- `and()`\n- `or()`\n- `xor()`\n- `not()`\n\nand bit shifting:\n\n- `shiftedLeft()`\n- `shiftedRight()`\n\n#### Serialization\n\n`BigInteger`, `BigDecimal` and `BigRational` can be safely serialized on a machine and unserialized on another,\neven if these machines do not share the same set of PHP extensions.\n\nFor example, serializing on a machine with GMP support and unserializing on a machine that does not have this extension\ninstalled will still work as expected.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.794921875,
          "content": "{\n    \"name\": \"brick/math\",\n    \"description\": \"Arbitrary-precision arithmetic library\",\n    \"type\": \"library\",\n    \"keywords\": [\n        \"Brick\",\n        \"Math\",\n        \"Mathematics\",\n        \"Arbitrary-precision\",\n        \"Arithmetic\",\n        \"BigInteger\",\n        \"BigDecimal\",\n        \"BigRational\",\n        \"BigNumber\",\n        \"Bignum\",\n        \"Decimal\",\n        \"Rational\",\n        \"Integer\"\n    ],\n    \"license\": \"MIT\",\n    \"require\": {\n        \"php\": \"^8.1\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^10.1\",\n        \"php-coveralls/php-coveralls\": \"^2.2\",\n        \"vimeo/psalm\": \"5.25.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Brick\\\\Math\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Brick\\\\Math\\\\Tests\\\\\": \"tests/\"\n        }\n    }\n}\n"
        },
        {
          "name": "phpunit.php",
          "type": "blob",
          "size": 1.208984375,
          "content": "<?php\n\ndeclare(strict_types=1);\n\nuse Brick\\Math\\Internal\\Calculator;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n/**\n * @return Calculator\n */\nfunction getCalculatorImplementation()\n{\n    switch ($calculator = \\getenv('CALCULATOR')) {\n        case 'GMP':\n            $calculator = new Calculator\\GmpCalculator();\n            break;\n\n        case 'BCMath':\n            $calculator = new Calculator\\BcMathCalculator();\n            break;\n\n        case 'Native':\n            $calculator = new Calculator\\NativeCalculator();\n            break;\n\n        default:\n            if ($calculator === false) {\n                echo 'CALCULATOR environment variable not set!' . PHP_EOL;\n            } else {\n                echo 'Unknown calculator: ' . $calculator . PHP_EOL;\n            }\n\n            echo 'Example usage: CALCULATOR={calculator} vendor/bin/phpunit' . PHP_EOL;\n            echo 'Available calculators: GMP, BCMath, Native' . PHP_EOL;\n            exit(1);\n    }\n\n    echo 'Using ', \\get_class($calculator), PHP_EOL;\n\n    return $calculator;\n}\n\nCalculator::set(getCalculatorImplementation());\n\n$scale = \\getenv('BCMATH_DEFAULT_SCALE');\n\nif ($scale !== false) {\n    echo \"Using bcscale($scale)\", PHP_EOL;\n    \\bcscale((int) $scale);\n}\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.4853515625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" colors=\"true\" bootstrap=\"phpunit.php\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.2/phpunit.xsd\" cacheDirectory=\".phpunit.cache\">\n    <testsuites>\n        <testsuite name=\"Math tests\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n    <source>\n        <include>\n            <directory>src</directory>\n        </include>\n    </source>\n</phpunit>\n"
        },
        {
          "name": "psalm.xml",
          "type": "blob",
          "size": 0.7392578125,
          "content": "<?xml version=\"1.0\"?>\n<psalm\n    errorLevel=\"1\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"https://getpsalm.org/schema/config\"\n    xsi:schemaLocation=\"https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd\"\n    findUnusedBaselineEntry=\"true\"\n    findUnusedPsalmSuppress=\"true\"\n    findUnusedCode=\"false\"\n>\n    <projectFiles>\n        <directory name=\"src\" />\n        <ignoreFiles>\n            <directory name=\"vendor\" />\n        </ignoreFiles>\n    </projectFiles>\n\n    <issueHandlers>\n        <ArgumentTypeCoercion>\n            <errorLevel type=\"suppress\">\n                <file name=\"src/Internal/Calculator/BcMathCalculator.php\" />\n            </errorLevel>\n        </ArgumentTypeCoercion>\n    </issueHandlers>\n</psalm>\n"
        },
        {
          "name": "random-tests.php",
          "type": "blob",
          "size": 4.9033203125,
          "content": "<?php\n\n/**\n * This script stress tests calculators with random large numbers and ensures that all implementations return the same\n * results. It is designed to run in an infinite loop unless a bug is found.\n */\n\ndeclare(strict_types=1);\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Brick\\Math\\Internal\\Calculator;\n\n(new class(30) { // max digits\n    private readonly Calculator\\GmpCalculator $gmp;\n    private readonly Calculator\\BcMathCalculator $bcmath;\n    private readonly Calculator\\NativeCalculator $native;\n\n    private int $testCounter = 0;\n    private float $lastOutputTime = 0.0;\n    private int $currentSecond = 0;\n    private int $currentSecondTestCounter = 0;\n    private int $testsPerSecond = 0;\n\n    public function __construct(\n        private readonly int $maxDigits,\n    ) {\n        $this->gmp    = new Calculator\\GmpCalculator();\n        $this->bcmath = new Calculator\\BcMathCalculator();\n        $this->native = new Calculator\\NativeCalculator();\n    }\n\n    public function __invoke() : void\n    {\n        for (;;) {\n            $a = $this->generateRandomNumber();\n            $b = $this->generateRandomNumber();\n            $c = $this->generateRandomNumber();\n\n            $this->runTests($a, $b);\n            $this->runTests($b, $a);\n\n            if ($a !== '0') {\n                $this->runTests(\"-$a\", $b);\n                $this->runTests($b, \"-$a\");\n            }\n\n            if ($b !== '0') {\n                $this->runTests($a, \"-$b\");\n                $this->runTests(\"-$b\", $a);\n            }\n\n            if ($a !== '0' && $b !== '0') {\n                $this->runTests(\"-$a\", \"-$b\");\n                $this->runTests(\"-$b\", \"-$a\");\n            }\n\n            if ($c !== '0') {\n                $this->test(\"$a POW $b MOD $c\", fn (Calculator $calc) => $calc->modPow($a, $b, $c));\n            }\n        }\n    }\n\n    /**\n     * @param string $a The left operand.\n     * @param string $b The right operand.\n     */\n    private function runTests(string $a, string $b) : void\n    {\n        $this->test(\"$a + $b\", fn (Calculator $c) => $c->add($a, $b));\n        $this->test(\"$a - $b\", fn (Calculator $c) => $c->sub($a, $b));\n        $this->test(\"$a * $b\", fn (Calculator $c) => $c->mul($a, $b));\n\n        if ($b !== '0') {\n            $this->test(\"$a / $b\", fn (Calculator $c) => $c->divQR($a, $b));\n            $this->test(\"$a MOD $b\", fn (Calculator $c) => $c->mod($a, $b));\n        }\n\n        if ($b !== '0' && $b[0] !== '-') {\n            $this->test(\"INV $a MOD $b\", fn (Calculator $c) => $c->modInverse($a, $b));\n        }\n\n        $this->test(\"GCD $a, $b\", fn (Calculator $c) => $c->gcd($a, $b));\n\n        if ($a[0] !== '-') {\n            $this->test(\"SQRT $a\", fn (Calculator $c) => $c->sqrt($a));\n        }\n\n        $this->test(\"$a AND $b\", fn (Calculator $c) => $c->and($a, $b));\n        $this->test(\"$a OR $b\", fn (Calculator $c) => $c->or($a, $b));\n        $this->test(\"$a XOR $b\", fn (Calculator $c) => $c->xor($a, $b));\n    }\n\n    /**\n     * @param string $test A string representing the test being executed.\n     * @param Closure(Calculator): mixed $callback A callback function accepting a Calculator instance and returning a calculation result.\n     */\n    private function test(string $test, Closure $callback) : void\n    {\n        $gmpResult    = $callback($this->gmp);\n        $bcmathResult = $callback($this->bcmath);\n        $nativeResult = $callback($this->native);\n\n        if ($gmpResult !== $bcmathResult) {\n            $this->failure('GMP', 'BCMath', $test);\n        }\n\n        if ($gmpResult !== $nativeResult) {\n            $this->failure('GMP', 'Native', $test);\n        }\n\n        $this->testCounter++;\n        $this->currentSecondTestCounter++;\n\n        $time = microtime(true);\n        $second = (int) $time;\n\n        if ($second !== $this->currentSecond) {\n            $this->currentSecond = $second;\n            $this->testsPerSecond = $this->currentSecondTestCounter;\n            $this->currentSecondTestCounter = 0;\n        }\n\n        if ($time - $this->lastOutputTime >= 0.1) {\n            echo \"\\r\", number_format($this->testCounter), ' (', number_format($this->testsPerSecond) . ' / s)';\n            $this->lastOutputTime = $time;\n        }\n    }\n\n    /**\n     * @param string $c1   The name of the first calculator.\n     * @param string $c2   The name of the second calculator.\n     * @param string $test A string representing the test being executed.\n     */\n    private function failure(string $c1, string $c2, string $test) : never\n    {\n        echo PHP_EOL;\n        echo 'FAILURE!', PHP_EOL;\n        echo $c1, ' vs ', $c2, PHP_EOL;\n        echo $test, PHP_EOL;\n        die;\n    }\n\n    private function generateRandomNumber() : string\n    {\n        $length = random_int(1, $this->maxDigits);\n\n        $number = '';\n\n        for ($i = 0; $i < $length; $i++) {\n            $number .= random_int(0, 9);\n        }\n\n        $number = ltrim($number, '0');\n\n        if ($number === '') {\n            return '0';\n        }\n\n        return $number;\n    }\n})();\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}