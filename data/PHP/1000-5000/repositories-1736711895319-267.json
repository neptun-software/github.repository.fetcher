{
  "metadata": {
    "timestamp": 1736711895319,
    "page": 267,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "PHP-DI/PHP-DI",
      "stars": 2708,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.6142578125,
          "content": "# .gitattributes\n.github           export-ignore\ntests             export-ignore\nwebsite           export-ignore\ndoc               export-ignore\nnews              export-ignore\n.gitattributes    export-ignore\n.gitignore        export-ignore\n.gitstats.yml     export-ignore\n.php-cs-fixer.php export-ignore\n.phpstorm.meta.php export-ignore\n404.md            export-ignore\nCONTRIBUTING.md   export-ignore\ncouscous.yml      export-ignore\n*.neon            export-ignore\nphpunit.xml.dist  export-ignore\npsalm.xml         export-ignore\nSECURITY.md       export-ignore\n\n# Auto detect text files and perform LF normalization\n* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.166015625,
          "content": "/.idea/\n/vendor/\n/composer.phar\n/composer.lock\n/theme/\n/.couscous/\n/website/bower_components/\n/website/css/all.min.css\n/logo/\n/.php-cs-fixer.cache\n/.phpunit.result.cache\n"
        },
        {
          "name": ".gitstats.yml",
          "type": "blob",
          "size": 0.822265625,
          "content": "tasks:\n    'Commit message': \"git log -1 --pretty=%B | head -n 1\"\n    'Commit author': \"git log -1 --pretty=%an\"\n    'Number of files': \"find . -type f | wc -l\"\n    'Number of directories': \"find . -type d | wc -l\"\n    'Number of PHP files': \"find . -type f -name '*.php' | wc -l\"\n    'Number of documentation files': \"find . -type f -name '*.md' | wc -l\"\n    'Lines of documentation': \"find . -type f -name '*.md' | xargs wc -l | tail -n 1 | awk '{print $1}'\"\n    'Lines of code': \"phploc src | grep 'Lines of Code (LOC)' | awk '{print $5}'\"\n    'Lines of comments': \"phploc src | grep 'Comment Lines of Code (CLOC)' | awk '{print $6}'\"\n    'Average Complexity per LLOC': \"phploc src | grep 'Average Complexity per LLOC' | awk '{print $5}'\"\n    'Number of tests': \"phploc tests --count-tests | grep 'Methods' | tail -n 1 | awk '{print $2}'\"\n"
        },
        {
          "name": ".php-cs-fixer.php",
          "type": "blob",
          "size": 2.0439453125,
          "content": "<?php\n\n$finder = PhpCsFixer\\Finder::create()\n    ->in(__DIR__ . '/src')\n    ->notPath('Compiler/Template.php');\n$config = new PhpCsFixer\\Config;\n\nreturn $config->setRules([\n    '@PSR2' => true,\n    '@PHP70Migration' => true,\n    '@PHP71Migration' => true,\n    '@PHP73Migration' => true,\n    '@PHP74Migration' => true,\n    '@PHP80Migration' => true,\n    '@Symfony' => true,\n    '@Symfony:risky' => true,\n    'array_syntax' => ['syntax' => 'short'],\n    'single_space_around_construct' => true,\n    'control_structure_braces' => true,\n    'control_structure_continuation_position' => true,\n    'declare_parentheses' => true,\n    'no_multiple_statements_per_line' => true,\n    'braces_position' => true,\n    'statement_indentation' => true,\n    'no_extra_blank_lines' => true,\n    'concat_space' => [\n        'spacing' => 'one',\n    ],\n    'declare_strict_types' => true,\n    'heredoc_to_nowdoc' => true,\n    'linebreak_after_opening_tag' => true,\n    'new_with_parentheses' => false,\n    'multiline_whitespace_before_semicolons' => false,\n    'no_php4_constructor' => true,\n    'no_unreachable_default_argument_value' => true,\n    'no_useless_else' => true,\n    'no_useless_return' => true,\n    'ordered_imports' => true,\n    'php_unit_strict' => false,\n    'phpdoc_add_missing_param_annotation' => false,\n    'phpdoc_align' => false,\n    'phpdoc_annotation_without_dot' => false,\n    'phpdoc_separation' => false,\n    'phpdoc_to_comment' => false,\n    'phpdoc_var_without_name' => true,\n    'pow_to_exponentiation' => true,\n    'unary_operator_spaces' => false,\n    'return_type_declaration' => [\n        'space_before' => 'one',\n    ],\n    'semicolon_after_instruction' => true,\n    'strict_comparison' => true,\n    'strict_param' => true,\n    'yoda_style' => false,\n    'native_function_invocation' => false,\n    'single_line_throw' => false,\n    'php_unit_method_casing' => false,\n    'blank_line_between_import_groups' => false,\n    'global_namespace_import' => false,\n    'nullable_type_declaration_for_default_null_value' => true,\n])\n    ->setRiskyAllowed(true)\n    ->setFinder($finder);\n"
        },
        {
          "name": ".phpstorm.meta.php",
          "type": "blob",
          "size": 0.380859375,
          "content": "<?php\nnamespace PHPSTORM_META {\n\n    $STATIC_METHOD_TYPES = [\n        \\Psr\\Container\\ContainerInterface::get('') => [\n            \"\" == \"@\",\n        ],\n        \\DI\\Container::get('') => [\n            \"\" == \"@\",\n        ],\n        \\EasyMock\\EasyMock::easyMock('') => [\n            \"\" == \"@\",\n        ],\n        \\EasyMock\\EasyMock::easySpy('') => [\n            \"\" == \"@\",\n        ],\n    ];\n}\n"
        },
        {
          "name": "404.md",
          "type": "blob",
          "size": 0.01953125,
          "content": "---\nlayout: 404\n---\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.033203125,
          "content": "# Contributing\n\nPHP-DI is licensed under the MIT License.\n\n\n## Set up\n\n* Check out the sources using git or download them\n\n```bash\n$ git clone https://github.com/PHP-DI/PHP-DI.git\n```\n\n* Install the libraries using composer:\n\n```bash\n$ curl -s http://getcomposer.org/installer | php\n$ php composer.phar install\n```\n\nIf you are running Windows or are having trouble, read [the official documentation](http://getcomposer.org/doc/00-intro.md#installation).\n\n\n## Run the tests\n\nThe tests are run with [PHPUnit](http://www.phpunit.de/manual/current/en/installation.html):\n\n```bash\n$ phpunit\n```\n\n\n## Learning the internals\n\nRead the [How it works](doc/how-it-works.md) documentation.\n\n\n## What to do?\n\n- Resolve issues: [issue list](https://github.com/PHP-DI/PHP-DI/issues)\n- Improve the documentation\n- â€¦\n\n\n## Coding style\n\nThe code follows PSR0, PSR1 and [PSR2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md).\n\nAlso, do not hesitate to add your name to the author list of a class in the docblock if you improve it.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0517578125,
          "content": "The MIT License (MIT)\n\nCopyright (c) Matthieu Napoli\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and\nassociated documentation files (the \"Software\"), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial\nportions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.3994140625,
          "content": "---\nlayout: home\n---\n\n[![](doc/img.png)](https://php-di.org/)\n\n[![Downloads per months](https://img.shields.io/packagist/dm/PHP-DI/PHP-DI.svg?style=flat-square)](https://packagist.org/packages/PHP-DI/PHP-DI)\n[![Total downloads](https://img.shields.io/packagist/dt/PHP-DI/PHP-DI.svg?style=flat-square)](https://packagist.org/packages/PHP-DI/PHP-DI)\n\n[![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/PHP-DI/PHP-DI.svg)](http://isitmaintained.com/project/PHP-DI/PHP-DI \"Average time to resolve an issue\")\n[![Percentage of issues still open](http://isitmaintained.com/badge/open/PHP-DI/PHP-DI.svg)](http://isitmaintained.com/project/PHP-DI/PHP-DI \"Percentage of issues still open\")\n\nPHP-DI is a dependency injection container meant to be practical, powerful, and framework-agnostic.\n\nRead more on the website: **[php-di.org](https://php-di.org)**\n\n## For Enterprise\n\n*Available as part of the Tidelift Subscription*\n\nThe maintainers of php-di/php-di and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/packagist-php-di-php-di?utm_source=packagist-php-di-php-di&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.2724609375,
          "content": "# Security Policy\n\n## Supported Versions\n\nOnly the latest stable release is supported.\n\n## Reporting a Vulnerability\n\nTo report a security vulnerability, please use the [Tidelift security contact](https://tidelift.com/security).\n\nTidelift will coordinate the fix and disclosure.\n"
        },
        {
          "name": "change-log.md",
          "type": "blob",
          "size": 26.2724609375,
          "content": "# Change log\n\n## 6.1.0\n\n- [#791](https://github.com/PHP-DI/PHP-DI/issues/791) Support PHP 8.1, remove support for PHP 7.2\n\n## 6.0.2\n\n- Fix potential regression introduced when fixing [#582](https://github.com/PHP-DI/PHP-DI/issues/582)\n\n## 6.0.1\n\n- Fix [#526](https://github.com/PHP-DI/PHP-DI/issues/526): Support optional parameters in factories\n- [#585](https://github.com/PHP-DI/PHP-DI/issues/585) Add support for PHP-Parser 4.0\n- [#582](https://github.com/PHP-DI/PHP-DI/issues/582) Register `ContainerInterface` to point to the wrapper container if it was defined\n\n## 6.0\n\nThis is the complete change log. You can also read the [migration guide](doc/migration/6.0.md) for upgrading or the [blog article](news/22-php-di-6-0-released.md) to see what's new.\n\nImprovements:\n\n- [#494](https://github.com/PHP-DI/PHP-DI/pull/494) The container can now be compiled for optimum performances in production\n- [#294](https://github.com/PHP-DI/PHP-DI/issues/294), [#349](https://github.com/PHP-DI/PHP-DI/issues/349), [#449](https://github.com/PHP-DI/PHP-DI/pull/449): `DI\\object()` has been replaced by more specific and less ambiguous helpers:\n    - `DI\\create()` creates an object, overrides autowiring and previous definitions\n    - `DI\\autowire()` autowires an object and allows to override specific constructor and method parameters\n- The container can now be built without parameters: `new Container()`\n- Definitions can be nested:\n    - [#490](https://github.com/PHP-DI/PHP-DI/issues/490) Definitions can be nested in arrays (by [@yuloh](https://github.com/yuloh))\n    - [#501](https://github.com/PHP-DI/PHP-DI/issues/501) & [#540](https://github.com/PHP-DI/PHP-DI/issues/540) Autowire definitions can be nested in other definitions\n    - [#487](https://github.com/PHP-DI/PHP-DI/issues/487) & [#540](https://github.com/PHP-DI/PHP-DI/issues/540) Closures are now handled as factories when they are nested in other definitions\n- [#487](https://github.com/PHP-DI/PHP-DI/issues/487) Closures in the config are now always interpreted as factories, even when nested inside other definitions\n- [#242](https://github.com/PHP-DI/PHP-DI/issues/242) Error in case a definition is not indexed by a string\n- [#505](https://github.com/PHP-DI/PHP-DI/pull/505) Debug container entries\n- [#564](https://github.com/PHP-DI/PHP-DI/pull/564) Caching was made almost entirely obsolete by the container compilation, however there is still a caching system entirely rebuilt over APCu for covering the last cases that compilation could not address (see [php-di.org/doc/performances.html](https://php-di.org/doc/performances.html))\n\nFixes:\n\n- [#499](https://github.com/PHP-DI/PHP-DI/issues/499) & [#488](https://github.com/PHP-DI/PHP-DI/issues/488) Standardize resolution of nested definitions everywhere.\n    In PHP-DI 5, definitions could be nested in some places (e.g. use a get() in an object definition, etc.). However it did not behave everywhere the same, for example it didn't work for sub-definitions in arrays.\n    Now in PHP-DI 6 all nested definitions will all be recognized and resolved correctly everywhere. Since #494 (compiled container) performance will not be affected so we can implement a more robust behavior.\n- [#343](https://github.com/PHP-DI/PHP-DI/issues/343) Autowiring and Annotations do not work for `object()` inside arrays: it now works with the new `create()` and `autowire()` helpers\n\nBC breaks:\n\n- PHP 7 or greater is required and HHVM is no longer supported\n- `DI\\object()` has been removed, use `DI\\create()` or `DI\\autowire()` instead\n- [#409](https://github.com/PHP-DI/PHP-DI/issues/409): Scopes are removed, read more in the [scopes](doc/scopes.md) documentation.\n- Caching was replaced by compiling the container: `ContainerBuilder::setDefinitionCache()` was removed, use `ContainerBuilder::enableCompilation()` instead.\n- [#463](https://github.com/PHP-DI/PHP-DI/issues/463) & [#485](https://github.com/PHP-DI/PHP-DI/issues/485): Container-interop support was removed, PSR-11 is used instead (by [@juliangut](https://github.com/juliangut))\n- The deprecated `DI\\link()` helper was removed, used `DI\\get()` instead\n- [#484](https://github.com/PHP-DI/PHP-DI/pull/484) The deprecated `\\DI\\Debug` class has been removed. Definitions can be cast to string directly\n- The exception `DI\\Definition\\Exception\\DefinitionException` was renamed to `DI\\Definition\\Exception\\InvalidDefinition`\n- The exception `DI\\Definition\\Exception\\AnnotationException` was renamed to `DI\\Definition\\Exception\\InvalidAnnotation`\n- [#516](https://github.com/PHP-DI/PHP-DI/issues/516) `DI\\InvokerInterface` was removed in favor of `Invoker\\InvokerInterface`.\n\nBe also aware that internal classes or interfaces may have changed.\n\n## 5.4.6\n\n- Fix [#554](https://github.com/PHP-DI/PHP-DI/issues/554): `Container::make()` fails when combined with `decorate()`.\n\n## 5.4.5\n\nFixup of 5.4.4.\n\n- [#531](https://github.com/PHP-DI/PHP-DI/issues/531): performance improvement.\n\n## 5.4.4\n\nThis release was broken because it was tagged against the wrong branch.\n\n- [#531](https://github.com/PHP-DI/PHP-DI/issues/531): performance improvement.\n\n## 5.4.3\n\n- [#467](https://github.com/PHP-DI/PHP-DI/issues/467): register the container against the PSR ContainerInterface\n\n## 5.4.2\n\n- Minor patch to add the `provide: psr/container-implementation` to `composer.json`.\n\n## 5.4.1\n\n- [PSR-11](http://www.php-fig.org/psr/) compliance\n\nNote that PHP-DI was already compliant with PSR-11 because it was implementing container-interop, and container-interop 1.2 extends PSR-11. This new version just makes it more explicit and will allow to drop container-interop support in the next major versions.\n\n## 5.4\n\nRead the [news entry](news/20-php-di-5-4-released.md).\n\nNew features:\n\n- [#362](https://github.com/PHP-DI/PHP-DI/issues/362) implemented in [#428](https://github.com/PHP-DI/PHP-DI/pull/428), [#430](https://github.com/PHP-DI/PHP-DI/pull/430), [#431](https://github.com/PHP-DI/PHP-DI/pull/431) and [#432](https://github.com/PHP-DI/PHP-DI/pull/432): factory parameters can now be configured, for example:\n    ```php\n    return [\n        'Database' => DI\\factory(function ($host) {...})\n            ->parameter('host', DI\\get('db.host')),\n    ];\n    ```\n    Read the [factories documentation](https://php-di.org/doc/php-definitions.html#factories) to learn more. Feature implemented by [@predakanga](https://github.com/predakanga).\n\nImprovements:\n\n- [#429](https://github.com/PHP-DI/PHP-DI/pull/429): performance improvements in definition resolution (by [@mnapoli](https://github.com/mnapoli))\n- [#421](https://github.com/PHP-DI/PHP-DI/issues/421): once a `ContainerBuilder` has built a container, it is locked to prevent confusion when adding new definitions to it (by [@mnapoli](https://github.com/mnapoli))\n- [#423](https://github.com/PHP-DI/PHP-DI/pull/423): improved exception messages (by [@mnapoli](https://github.com/mnapoli))\n\n## 5.3\n\nRead the [news entry](news/19-php-di-5-3-released.md).\n\n- release of the [2.0 version](https://github.com/PHP-DI/Symfony-Bridge/releases/tag/2.0.0) of the Symfony bridge (by [@mnapoli](https://github.com/mnapoli))\n- PHP 5.5 or above is now required\n- a lot of documentation improvements by 9 different contributors\n- [#389](https://github.com/PHP-DI/PHP-DI/pull/389): exception message improvement by [@mopahle](https://github.com/mopahle)\n- [#359](https://github.com/PHP-DI/PHP-DI/issues/359), [#411](https://github.com/PHP-DI/PHP-DI/issues/411), [#414](https://github.com/PHP-DI/PHP-DI/pull/414), [#412](https://github.com/PHP-DI/PHP-DI/pull/412): compatibility with ProxyManager 1.* and 2.* (by [@holtkamp](https://github.com/holtkamp) and [@mnapoli](https://github.com/mnapoli))\n- [#416](https://github.com/PHP-DI/PHP-DI/pull/416): dumping definitions was refactored into a more lightweight and simple solution; definition \"dumpers\" have been removed (internal classes), definitions can now be cast to string directly (by [@mnapoli](https://github.com/mnapoli))\n\n## 5.2\n\nRead the [news entry](news/17-php-di-5-2-released.md).\n\nImprovements:\n\n- [#347](https://github.com/PHP-DI/PHP-DI/pull/347) (includes [#333](https://github.com/PHP-DI/PHP-DI/pull/333) and [#345](https://github.com/PHP-DI/PHP-DI/pull/345)): by [@jdreesen](https://github.com/jdreesen), [@quimcalpe](https://github.com/quimcalpe) and [@mnapoli](https://github.com/mnapoli)\n    - Allow injection of any container object as factory parameter via type hinting\n    - Allow injection of a `DI\\Factory\\RequestedEntry` object to get the requested entry name\n- [#272](https://github.com/PHP-DI/PHP-DI/issues/272): Support `\"Class::method\"\"` syntax for callables (by [@jdreesen](https://github.com/jdreesen))\n- [#332](https://github.com/PHP-DI/PHP-DI/issues/332): IDE support (plugin and documentation) (by [@pulyaevskiy](https://github.com/pulyaevskiy), [@avant1](https://github.com/avant1) and [@mnapoli](https://github.com/mnapoli))\n- [#326](https://github.com/PHP-DI/PHP-DI/pull/326): Exception messages are simpler and more consistent (by [@mnapoli](https://github.com/mnapoli))\n- [#325](https://github.com/PHP-DI/PHP-DI/pull/325): Add a \"Edit this page\" button in the website to encourage users to improve the documentation (by [@jdreesen](https://github.com/jdreesen))\n\nBugfixes:\n\n- [#321](https://github.com/PHP-DI/PHP-DI/pull/321): Allow factory definitions to reference arbitrary container entries as callables (by [@jdreesen](https://github.com/jdreesen))\n- [#335](https://github.com/PHP-DI/PHP-DI/issues/335): Class imports in traits are now considered when parsing annotations (by [@thebigb](https://github.com/thebigb))\n\n## 5.1\n\nRead the [news entry](news/16-php-di-5-1-released.md).\n\nImprovements:\n\n- [Zend Framework 2 integration](https://github.com/PHP-DI/ZF2-Bridge) (by @Rastusik)\n- [#308](https://github.com/PHP-DI/PHP-DI/pull/308): Instantiate factories using the container (`DI\\factory(['FooFactory', 'create'])`)\n- Many performances improvements - some benchmarks show up to 35% performance improvements, real results may vary of course\n- Many documentation improvements (@jdreesen, @mindplay-dk, @mnapoli, @holtkamp, @Rastusik)\n- [#296](https://github.com/PHP-DI/PHP-DI/issues/296): Provide a faster `ArrayCache` implementation, mostly useful in micro-benchmarks\n\nBugfixes:\n\n- [#257](https://github.com/PHP-DI/PHP-DI/issues/257) & [#274](https://github.com/PHP-DI/PHP-DI/issues/274): Private properties of parent classes are not injected when using annotations\n- [#300](https://github.com/PHP-DI/PHP-DI/pull/300): Exception if object definition extends an incompatible definition\n- [#306](https://github.com/PHP-DI/PHP-DI/issues/306): Errors when using parameters passed by reference (fixed by @bradynpoulsen)\n- [#318](https://github.com/PHP-DI/PHP-DI/issues/318): `Container::call()` ignores parameter's default value\n\nInternal changes:\n\n- [#276](https://github.com/PHP-DI/PHP-DI/pull/276): Tests now pass on Windows (@bgaillard)\n\n## 5.0\n\nThis is the complete change log. You can also read the [migration guide](doc/migration/5.0.md) for upgrading, or [the news article](news/15-php-di-5-0-released.md) for a nicer introduction to this new version.\n\nImprovements:\n\n- Moved to an organization on GitHub: [github.com/PHP-DI/PHP-DI](https://github.com/PHP-DI/PHP-DI)\n- The package has been renamed to: from `mnapoli/php-di` to [`php-di/php-di`](https://packagist.org/packages/php-di/php-di)\n- New [Silex integration](doc/frameworks/silex.md)\n- Lighter package: from 10 to 3 Composer dependencies!\n- [#235](https://github.com/PHP-DI/PHP-DI/issues/235): `DI\\link()` is now deprecated in favor of `DI\\get()`. There is no BC break as `DI\\link()` still works.\n- [#207](https://github.com/PHP-DI/PHP-DI/issues/207): Support for `DI\\link()` in arrays\n- [#203](https://github.com/PHP-DI/PHP-DI/issues/203): New `DI\\string()` helper ([documentation](doc/php-definitions.md))\n- [#208](https://github.com/PHP-DI/PHP-DI/issues/208): Support for nested definitions\n- [#226](https://github.com/PHP-DI/PHP-DI/pull/226): `DI\\factory()` can now be omitted with closures:\n\n    ```php\n    // before\n    'My\\Class' => DI\\factory(function () { ... })\n    // now (optional shortcut)\n    'My\\Class' => function () { ... }\n    ```\n- [#193](https://github.com/PHP-DI/PHP-DI/issues/193): `DI\\object()->method()` now supports calling the same method twice (or more).\n- [#248](https://github.com/PHP-DI/PHP-DI/issues/248): New `DI\\decorate()` helper to decorate a previously defined entry ([documentation](doc/definition-overriding.md))\n- [#215](https://github.com/PHP-DI/PHP-DI/pull/215): New `DI\\add()` helper to add entries to an existing array ([documentation](doc/definition-overriding.md))\n- [#218](https://github.com/PHP-DI/PHP-DI/issues/218): `ContainerBuilder::addDefinitions()` can now take an array of definitions\n- [#211](https://github.com/PHP-DI/PHP-DI/pull/211): `ContainerBuilder::addDefinitions()` is now fluent (return `$this`)\n- [#250](https://github.com/PHP-DI/PHP-DI/issues/250): `Container::call()` now also accepts parameters not indexed by name as well as embedded definitions ([documentation](doc/container.md))\n- Various performance improvements, e.g. lower the number of files loaded, simpler architecture, â€¦\n\nBC breaks:\n\n- PHP-DI now requires a version of PHP >= 5.4.0\n- The package is lighter by default:\n    - [#251](https://github.com/PHP-DI/PHP-DI/issues/251): Annotations are disabled by default, if you use annotations enable them with `$containerBuilder->useAnnotations(true)`. Additionally the `doctrine/annotations` package isn't required by default anymore, so you also need to run `composer require doctrine/annotations`.\n    - `doctrine/cache` is not installed by default anymore, you need to require it in `composer.json` (`~1.0`) if you want to configure a cache for PHP-DI\n    - [#198](https://github.com/PHP-DI/PHP-DI/issues/198): `ocramius/proxy-manager` is not installed by default anymore, you need to require it in `composer.json` (`~1.0`) if you want to use **lazy injection**\n- Closures are now converted into factory definitions automatically. If you ever defined a closure as a value (e.g. to have the closure injected in a class), you need to wrap the closure with the new `DI\\value()` helper.\n- [#223](https://github.com/PHP-DI/PHP-DI/issues/223): `DI\\ContainerInterface` was deprecated since v4.1 and has been removed\n\nInternal changes in case you were replacing/extending some parts:\n\n- the definition sources architecture has been refactored, if you defined custom definition sources you will need to update your code (it should be much easier now)\n- [#252](https://github.com/PHP-DI/PHP-DI/pull/252): `DI\\Scope` internal implementation has changed. You are encouraged to use the constants (`DI\\Scope::SINGLETON` and `DI\\Scope::PROTOTYPE`) instead of the static methods, but backward compatibility is kept (static methods still work).\n- [#241](https://github.com/PHP-DI/PHP-DI/issues/241): `Container::call()` now uses the *Invoker* external library\n\n## 4.4\n\nRead the [news entry](news/13-php-di-4-4-released.md).\n\n- [#185](https://github.com/PHP-DI/PHP-DI/issues/185) Support for invokable objects in `Container::call()`\n- [#192](https://github.com/PHP-DI/PHP-DI/pull/192) Support for invokable classes in `Container::call()` (will instantiate the class)\n- [#184](https://github.com/PHP-DI/PHP-DI/pull/184) Option to ignore phpdoc errors\n\n## 4.3\n\nRead the [news entry](news/11-php-di-4-3-released.md).\n\n- [#176](https://github.com/PHP-DI/PHP-DI/pull/176) New definition type for reading environment variables: `DI\\env()`\n- [#181](https://github.com/PHP-DI/PHP-DI/pull/181) `DI\\FactoryInterface` and `DI\\InvokerInterface` are now auto-registered inside the container so that you can inject them without any configuration needed\n- [#173](https://github.com/PHP-DI/PHP-DI/pull/173) `$container->call(['MyClass', 'method]);` will get `MyClass` from the container if `method()` is not a static method\n\n## 4.2.2\n\n- Fixed [#180](https://github.com/PHP-DI/PHP-DI/pull/180): `Container::call()` with object methods (`[$object, 'method']`) is now supported\n\n## 4.2.1\n\n- Support for PHP 5.3.3, which was previously incomplete because of a bug in the reflection (there is now a workaround for this bug)\n\nBut if you can, seriously avoid this (really old) PHP version and upgrade.\n\n## 4.2\n\nRead the [news entry](news/10-php-di-4-2-released.md).\n\n**Minor BC-break**: Optional parameters (that were not configured) were injected, they are now ignored, which is what naturally makes sense since they are optional.\nExample:\n\n```php\n    public function __construct(Bar $bar = null)\n    {\n        $this->bar = $bar ?: $this->createDefaultBar();\n    }\n```\n\nBefore 4.2, PHP-DI would try to inject a `Bar` instance. From 4.2 and onwards, it will inject `null`.\n\nOf course, you can still explicitly define an injection for the optional parameters and that will work.\n\nAll changes:\n\n* [#162](https://github.com/PHP-DI/PHP-DI/pull/162) Added `Container::call()` to call functions with dependency injection\n* [#156](https://github.com/PHP-DI/PHP-DI/issues/156) Wildcards (`*`) in definitions\n* [#164](https://github.com/PHP-DI/PHP-DI/issues/164) Prototype scope is now available for `factory()` definitions too\n* FIXED [#168](https://github.com/PHP-DI/PHP-DI/pull/168) `Container::has()` now returns false for interfaces and abstract classes that are not mapped in the definitions\n* FIXED [#171](https://github.com/PHP-DI/PHP-DI/issues/171) Optional parameters are now ignored (not injected) if not set in the definitions (see the BC-break warning above)\n\n## 4.1\n\nRead the [news entry](news/09-php-di-4-1-released.md).\n\nBC-breaks: None.\n\n* [#138](https://github.com/PHP-DI/PHP-DI/issues/138) [Container-interop](https://github.com/container-interop/container-interop) compliance\n* [#143](https://github.com/PHP-DI/PHP-DI/issues/143) Much more explicit exception messages\n* [#157](https://github.com/PHP-DI/PHP-DI/issues/157) HHVM support\n* [#158](https://github.com/PHP-DI/PHP-DI/issues/158) Improved the documentation for [Symfony 2 integration](https://php-di.org/doc/frameworks/symfony2.html)\n\n## 4.0\n\nMajor changes:\n\n* The configuration format has changed ([read more here to understand why](news/06-php-di-4-0-new-definitions.md))\n\nRead the migration guide if you are using 3.x: [Migration guide from 3.x to 4.0](doc/migration/4.0.md).\n\nBC-breaks:\n\n* YAML, XML and JSON definitions have been removed, and the PHP definition format has changed (see above)\n* `ContainerSingleton` has been removed\n* You cannot configure an injection as lazy anymore, you can only configure a container entry as lazy\n* The Container constructor now takes mandatory parameters. Use the ContainerBuilder to create a Container.\n* Removed `ContainerBuilder::setDefinitionsValidation()` (no definition validation anymore)\n* `ContainerBuilder::useReflection()` is now named: `ContainerBuilder::useAutowiring()`\n* `ContainerBuilder::addDefinitionsFromFile()` is now named: `ContainerBuilder::addDefinitions()`\n* The `$proxy` parameter in `Container::get($name, $proxy = true)` hase been removed. To get a proxy, you now need to define an entry as \"lazy\".\n\nOther changes:\n\n* Added `ContainerInterface` and `FactoryInterface`, both implemented by the container.\n* [#115](https://github.com/PHP-DI/PHP-DI/issues/115) Added `Container::has()`\n* [#142](https://github.com/PHP-DI/PHP-DI/issues/142) Added `Container::make()` to resolve an entry\n* [#127](https://github.com/PHP-DI/PHP-DI/issues/127) Added support for cases where PHP-DI is wrapped by another container (like Acclimate): PHP-DI can now use the wrapping container to perform injections\n* [#128](https://github.com/PHP-DI/PHP-DI/issues/128) Configure entry aliases\n* [#110](https://github.com/PHP-DI/PHP-DI/issues/110) XML definitions are not supported anymore\n* [#122](https://github.com/PHP-DI/PHP-DI/issues/122) JSON definitions are not supported anymore\n* `ContainerSingleton` has finally been removed\n* Added `ContainerBuilder::buildDevContainer()` to get started with a default container very easily.\n* [#99](https://github.com/PHP-DI/PHP-DI/issues/99) Fixed \"`@param` with PHP internal type throws exception\"\n\n## 3.5.1\n\n* FIXED [#126](https://github.com/PHP-DI/PHP-DI/issues/126): `Container::set` without effect if a value has already been set and retrieved\n\n## 3.5\n\nRead the [news entry](news/05-php-di-3-5.md).\n\n* Importing `@Inject` and `@Injectable` annotations is now optional! It means that you don't have to write `use DI\\Annotation\\Inject` anymore\n* FIXED [#124](https://github.com/PHP-DI/PHP-DI/issues/124): `@Injects` annotation conflicts with other annotations\n\n## 3.4\n\nRead the [news entry](news/04-php-di-3-4.md).\n\n* [#106](https://github.com/PHP-DI/PHP-DI/pull/106) You can now define arrays of values (in YAML, PHP, â€¦) thanks to [@unkind](https://github.com/unkind)\n* [#98](https://github.com/PHP-DI/PHP-DI/issues/98) `ContainerBuilder` is now fluent thanks to [@drdamour](https://github.com/drdamour)\n* [#101](https://github.com/PHP-DI/PHP-DI/pull/101) Optional parameters are now supported: if you don't define a value to inject, their default value will be used\n* XML definitions have been deprecated, there weren't even documented and were not maintained. They will be removed in 4.0.\n* FIXED [#100](https://github.com/PHP-DI/PHP-DI/issues/100): bug for lazy injection in constructors\n\n## 3.3\n\nRead the [news entry](news/03-php-di-3-3.md).\n\n* Inject dependencies on an existing instance with `Container::injectOn` (work from [Jeff Flitton](https://github.com/jflitton): [#89](https://github.com/PHP-DI/PHP-DI/pull/89)).\n* [#86](https://github.com/PHP-DI/PHP-DI/issues/86): Optimized definition lookup (faster)\n* FIXED [#87](https://github.com/PHP-DI/PHP-DI/issues/87): Rare bug in the `PhpDocParser`, fixed by [drdamour](https://github.com/drdamour)\n\n## 3.2\n\nRead the [news entry](news/02-php-di-3-2.md).\n\nSmall BC-break: PHP-DI 3.0 and 3.1 injected properties before calling the constructor. This was confusing and [not supported for internal classes](https://github.com/PHP-DI/PHP-DI/issues/74).\nFrom 3.2 and on, properties are injected after calling the constructor.\n\n* **[Lazy injection](doc/lazy-injection.md)**: it is now possible to use lazy injection on properties and methods (setters and constructors).\n* Lazy dependencies are now proxies that extend the class they proxy, so type-hinting works.\n* Addition of the **`ContainerBuilder`** object, that helps to [create and configure a `Container`](doc/container-configuration.md).\n* Some methods for configuring the Container have gone **deprecated** in favor of the `ContainerBuilder`. Fear not, these deprecated methods will remain until next major version (4.0).\n    * `Container::useReflection`, use ContainerBuilder::useReflection instead\n    * `Container::useAnnotations`, use ContainerBuilder::useAnnotations instead\n    * `Container::setDefinitionCache`, use ContainerBuilder::setDefinitionCache instead\n    * `Container::setDefinitionsValidation`, use ContainerBuilder::setDefinitionsValidation instead\n* The container is now auto-registered (as 'DI\\Container'). You can now inject the container without registering it.\n\n## 3.1.1\n\n* Value definitions (`$container->set('foo', 80)`) are not cached anymore\n* FIXED [#82](https://github.com/PHP-DI/PHP-DI/issues/82): Serialization error when using a cache\n\n## 3.1\n\nRead the [news entry](news/01-php-di-3-1.md).\n\n* Zend Framework 1 integration through the [PHP-DI-ZF1 project](https://github.com/PHP-DI/PHP-DI-ZF1)\n* Fixed the order of priorities when you mix different definition sources (reflection, annotations, files, â€¦). See [Definition overriding](doc/definition-overriding.md)\n* Now possible to define null values with  `$container->set('foo', null)` (see [#79](https://github.com/PHP-DI/PHP-DI/issues/79)).\n* Deprecated usage of `ContainerSingleton`, will be removed in next major version (4.0)\n\n## 3.0.6\n\n* FIXED [#76](https://github.com/PHP-DI/PHP-DI/issues/76): Definition conflict when setting a closure for a class name\n\n## 3.0.5\n\n* FIXED [#70](https://github.com/PHP-DI/PHP-DI/issues/70): Definition conflict when setting a value for a class name\n\n## 3.0.4\n\n* FIXED [#69](https://github.com/PHP-DI/PHP-DI/issues/69): YamlDefinitionFileLoader crashes if YAML file is empty\n\n## 3.0.3\n\n* Fixed over-restrictive dependencies in composer.json\n\n## 3.0.2\n\n* [#64](https://github.com/PHP-DI/PHP-DI/issues/64): Non PHP-DI exceptions are not captured-rethrown anymore when injecting dependencies (cleaner stack trace)\n\n## 3.0.1\n\n* [#62](https://github.com/PHP-DI/PHP-DI/issues/62): When using aliases, definitions are now merged\n\n## 3.0\n\nMajor compatibility breaks with 2.x.\n\n* The container is no longer a Singleton (but `ContainerSingleton::getInstance()` is available for fools who like it)\n* Setter injection\n* Constructor injection\n* Scopes: singleton (share the same instance of the class) or prototype (create a new instance each time it is fetched). Defined at class level.\n* Configuration is reworked from scratch. Now every configuration backend can do 100% of the job.\n* Provided configuration backends:\n    * Reflection\n    * Annotations: @Inject, @Injectable\n    * PHP code (`Container::set()`)\n    * PHP array\n    * YAML file\n* As a consequence, annotations are not mandatory anymore, all functionalities can be used with or without annotations.\n* Renamed `DI\\Annotations\\` to `DI\\Annotation\\`\n* `Container` no longer implements ArrayAccess, use only `$container->get($key)` now\n* ZF1 integration broken and removed (work in progress for next releases)\n* Code now follows PSR1 and PSR2 coding styles\n* FIXED: [#58](https://github.com/PHP-DI/PHP-DI/issues/58) Getting a proxy of an alias didn't work\n\n## 2.1\n\n* `use` statements to import classes from other namespaces are now taken into account with the `@var` annotation\n* Updated and lightened the dependencies : `doctrine/common` has been replaced with more specific `doctrine/annotations` and `doctrine/cache`\n\n## 2.0\n\nMajor compatibility breaks with 1.x.\n\n* `Container::resolveDependencies()` has been renamed to `Container::injectAll()`\n* Dependencies are now injected **before** the constructor is called, and thus are available in the constructor\n* Merged `@Value` annotation with `@Inject`: no difference between value and bean injection anymore\n* Container implements ArrayAccess for get() and set() (`$container['db.host'] = 'localhost';`)\n* Ini configuration files removed: configuration is done in PHP\n* Allow to define beans within closures for lazy-loading\n* Switched to MIT License\n\nWarning:\n\n* If you use PHP 5.3 and __wakeup() methods, they will be called when PHP-DI creates new instances of those classes.\n\n## 1.1\n\n* Caching of annotations based on Doctrine caches\n\n## 1.0\n\n* DependencyManager renamed to Container\n* Refactored basic Container usage with `get` and `set`\n* Allow named injection `@Inject(name=\"\")`\n* Zend Framework integration\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.291015625,
          "content": "{\n    \"name\": \"php-di/php-di\",\n    \"type\": \"library\",\n    \"description\": \"The dependency injection container for humans\",\n    \"keywords\": [\"di\", \"dependency injection\", \"container\", \"ioc\", \"psr-11\", \"psr11\", \"container-interop\"],\n    \"homepage\": \"https://php-di.org/\",\n    \"license\": \"MIT\",\n    \"autoload\": {\n        \"psr-4\": {\n            \"DI\\\\\": \"src/\"\n        },\n        \"files\": [\n            \"src/functions.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"DI\\\\Test\\\\IntegrationTest\\\\\": \"tests/IntegrationTest/\",\n            \"DI\\\\Test\\\\UnitTest\\\\\": \"tests/UnitTest/\"\n        }\n    },\n    \"scripts\": {\n        \"test\": \"phpunit\",\n        \"format-code\": \"php-cs-fixer fix --allow-risky=yes\"\n    },\n    \"require\": {\n        \"php\": \">=8.0\",\n        \"psr/container\": \"^1.1 || ^2.0\",\n        \"php-di/invoker\": \"^2.0\",\n        \"laravel/serializable-closure\": \"^1.0\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^9.5\",\n        \"mnapoli/phpunit-easymock\": \"^1.3\",\n        \"friendsofphp/proxy-manager-lts\": \"^1\",\n        \"friendsofphp/php-cs-fixer\": \"^3\",\n        \"vimeo/psalm\": \"^4.6\"\n    },\n    \"provide\": {\n        \"psr/container-implementation\": \"^1.0\"\n    },\n    \"suggest\": {\n        \"friendsofphp/proxy-manager-lts\": \"Install it if you want to use lazy injection (version ^1)\"\n    }\n}\n"
        },
        {
          "name": "couscous.yml",
          "type": "blob",
          "size": 5.126953125,
          "content": "baseUrl: https://php-di.org\n\nscripts:\n    before:\n        - lessc --clean-css website/less/main.less website/css/all.min.css\n\nexclude:\n    - vendor\n    - website\n    - src\n    - tests\n    - logo\n\nmenu:\n    items:\n        introduction:\n            section: Introduction\n            items:\n                getting-started:\n                    text: Getting started\n                    url: doc/getting-started.html\n                understanding-di:\n                    text: Understanding dependency injection\n                    url: doc/understanding-di.html\n                best-practices:\n                    text: \"\\\"Best practices\\\" guide\"\n                    url: doc/best-practices.html\n        usage:\n            section: Usage\n            items:\n                container-configuration:\n                    text: Configuring the container\n                    url: doc/container-configuration.html\n                container:\n                    text: Using the container\n                    url: doc/container.html\n        definition:\n            section: Definitions\n            items:\n                definition-introduction:\n                    text: Introduction\n                    url: doc/definition.html\n                autowiring:\n                    text: Autowiring\n                    url: doc/autowiring.html\n                php-definitions:\n                    text: PHP definitions\n                    url: doc/php-definitions.html\n                attributes:\n                    text: PHP attributes\n                    url: doc/attributes.html\n                annotations:\n                    text: Annotations\n                    url: doc/annotations.html\n                definition-overriding:\n                    text: Definition extensions and overriding\n                    url: doc/definition-overriding.html\n        frameworks:\n            section: Frameworks\n            items:\n                slim:\n                    text: Slim\n                    url: doc/frameworks/slim.html\n                symfony:\n                    text: Symfony\n                    url: doc/frameworks/symfony2.html\n                zf2:\n                    text: Zend Framework 2\n                    url: doc/frameworks/zf2.html\n                zf1:\n                    text: Zend Framework 1\n                    url: doc/frameworks/zf1.html\n                zend-expressive:\n                    text: Zend Expressive\n                    url: doc/frameworks/zend-expressive.html\n                silly:\n                    text: Silly\n                    url: doc/frameworks/silly.html\n                silex:\n                    text: Silex\n                    url: doc/frameworks/silex.html\n                demo:\n                    text: Demo application\n                    absoluteUrl: https://github.com/PHP-DI/demo\n        advanced:\n            section: Advanced topics\n            items:\n                performances:\n                    text: Performances\n                    url: doc/performances.html\n                lazy-injection:\n                    text: Lazy injection\n                    url: doc/lazy-injection.html\n                inject-on-instance:\n                    text: Inject on an existing instance\n                    url: doc/inject-on-instance.html\n                environments:\n                    text: Injections depending on the environment\n                    url: doc/environments.html\n                ide-integration:\n                    text: IDE integration\n                    url: doc/ide-integration.html\n        migration:\n            section: Migration guides\n            items:\n                v4:\n                    text: From PHP-DI 3.x to 4.0\n                    url: doc/migration/4.0.html\n                v5:\n                    text: From PHP-DI 4.x to 5.0\n                    url: doc/migration/5.0.html\n                v6:\n                    text: From PHP-DI 5.x to 6.0\n                    url: doc/migration/6.0.html\n                v7:\n                    text: From PHP-DI 6.x to 7.0\n                    url: doc/migration/7.0.html\n        support:\n            section: Support\n            items:\n                enterprise-support:\n                    text: Enterprise support\n                    url: support.html\n        internals:\n            section: Internals\n            items:\n                contributing:\n                    text: Contributing\n                    url: contributing.html\n                how-it-works:\n                    text: How PHP-DI works\n                    url: doc/how-it-works.html\n        versions:\n            section: Old documentation\n            items:\n                docv3:\n                    text: PHP-DI 3.x\n                    absoluteUrl: https://github.com/PHP-DI/PHP-DI/tree/3.x/doc\n                docv4:\n                    text: PHP-DI 4.x\n                    absoluteUrl: https://github.com/PHP-DI/PHP-DI/tree/4.x/doc\n                docv5:\n                    text: PHP-DI 5.x\n                    absoluteUrl: https://github.com/PHP-DI/PHP-DI/tree/5.4/doc\n\nframeworks:\n    zf1: Zend Framework 1\n    zf2: Zend Framework 2\n    zend-expressive: Zend Expressive\n    symfony2: Symfony\n    silex: Silex\n    slim: Slim\n    silly: Silly\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "news",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.478515625,
          "content": "includes:\n    - phpstan-baseline.neon\n\nparameters:\n    level: 5\n    paths:\n        - src\n    excludePaths:\n        - src/Compiler/Template.php\n    ignoreErrors:\n        - '#Access to undefined constant DI\\\\CompiledContainer::METHOD_MAPPING.#'\n        - '#Function apcu_.* not found.#'\n        - '#PHPDoc tag @throws with type Psr\\\\Container\\\\ContainerExceptionInterface is not subtype of Throwable#'\n    reportUnmatchedIgnoredErrors: false\n    inferPrivatePropertyTypeFromConstructor: true\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.990234375,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--\n    phpunit -c phpunit.xml\n-->\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         beStrictAboutTestsThatDoNotTestAnything=\"false\"\n         bootstrap=\"./vendor/autoload.php\">\n\n    <testsuites>\n        <testsuite name=\"unit\">\n            <directory>./tests/UnitTest/</directory>\n        </testsuite>\n        <testsuite name=\"integration\">\n            <directory>./tests/IntegrationTest/</directory>\n            <exclude>./tests/IntegrationTest/BaseContainerTest.php</exclude>\n        </testsuite>\n    </testsuites>\n\n    <filter>\n        <whitelist processUncoveredFilesFromWhitelist=\"true\">\n            <directory suffix=\".php\">src</directory>\n            <exclude>\n                <file>src/Compiler/Template.php</file>\n            </exclude>\n        </whitelist>\n    </filter>\n\n</phpunit>\n"
        },
        {
          "name": "psalm.xml",
          "type": "blob",
          "size": 0.4453125,
          "content": "<?xml version=\"1.0\"?>\n<psalm\n    errorLevel=\"7\"\n    resolveFromConfigFile=\"true\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"https://getpsalm.org/schema/config\"\n    xsi:schemaLocation=\"https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd\"\n>\n    <projectFiles>\n        <directory name=\"src\"/>\n        <ignoreFiles>\n            <file name=\"src/Compiler/Template.php\"/>\n        </ignoreFiles>\n    </projectFiles>\n</psalm>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "support.md",
          "type": "blob",
          "size": 3.0322265625,
          "content": "---\nlayout: documentation\ncurrent_menu: enterprise-support\ntitle: Enterprise support for PHP-DI\n---\n\n# PHP-DI for Enterprise\n\n> *Available as part of the Tidelift Subscription*\n\nTidelift is working with the maintainers of PHP-DI and thousands of other\nopen source projects to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use.\n\n#### [Learn more](https://tidelift.com/subscription/pkg/packagist-php-di-php-di?utm_source=packagist-php-di-php-di&utm_medium=referral&utm_campaign=enterprise) | [**Request a demo**](https://tidelift.com/subscription/request-a-demo?utm_source=packagist-php-di-php-di&utm_medium=referral&utm_campaign=enterprise)\n\n## Enterprise-ready open source softwareâ€”managed for you\n\nThe Tidelift Subscription is a managed open source subscription for application dependencies covering millions of open source projects across JavaScript, Python, Java, PHP, Ruby, .NET, and more.\n\nYour subscription includes:\n\n- **Security updates**\n    Tideliftâ€™s security response team coordinates patches for new breaking security vulnerabilities and alerts immediately through a private channel, so your software supply chain is always secure.\n\n- **Licensing verification and indemnification**\n    Tidelift verifies license information to enable easy policy enforcement and adds intellectual property indemnification to cover creators and users in case something goes wrong. You always have a 100% up-to-date bill of materials for your dependencies to share with your legal team, customers, or partners.\n\n- **Maintenance and code improvement**\n    Tidelift ensures the software you rely on keeps working as long as you need it to work. Your managed dependencies are actively maintained and we recruit additional maintainers where required.\n\n- **Package selection and version guidance**\n    We help you choose the best open source packages from the startâ€”and then guide you through updates to stay on the best releases as new issues arise.\n\n- **Roadmap input**\n    Take a seat at the table with the creators behind the software you use. Tideliftâ€™s participating maintainers earn more income as their software is used by more subscribers, so theyâ€™re interested in knowing what you need.\n\n- **Tooling and cloud integration**\n    Tidelift works with GitHub, GitLab, BitBucket, and more. We support every cloud platform (and other deployment targets, too).\n\nThe end result? All of the capabilities you expect from commercial-grade software, for the full breadth of open source you use. That means less time grappling with esoteric open source trivia, and more time building your own applicationsâ€”and your business.\n\n[Learn more](https://tidelift.com/subscription/pkg/packagist-php-di-php-di?utm_source=packagist-php-di-php-di&utm_medium=referral&utm_campaign=enterprise) | [**Request a demo**](https://tidelift.com/subscription/request-a-demo?utm_source=packagist-php-di-php-di&utm_medium=referral&utm_campaign=enterprise)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}