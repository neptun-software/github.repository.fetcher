{
  "metadata": {
    "timestamp": 1736711841137,
    "page": 157,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zephir-lang/zephir",
      "stars": 3315,
      "defaultBranch": "development",
      "files": [
        {
          "name": ".ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".codacy.yml",
          "type": "blob",
          "size": 0.2626953125,
          "content": "---\nengines:\n  phpmd:\n    enabled: true\n    config:\n      rulesets: \"phpmd.xml.dist\"\n  phpcs:\n    enabled: true\n    config:\n      ruleset: \"phpcs.xml.dist\"\n\nexclude_paths:\n  - 'ext/**'\n  - 'prototypes/**'\n  - 'templates/**'\n  - 'CHANGELOG.md'\n  - '**.md'\n  - '**.json'\n"
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.6357421875,
          "content": "codecov:\n  notify:\n    require_ci_to_pass: yes\n\ncoverage:\n  precision: 2\n  round: down\n  range: \"35...90\"\n\n  status:\n    project:\n      default:\n        # Allow the coverage to drop by threshold %, and posting a success status.\n        threshold: 0.5\n    patch:\n      default:\n        # trial operation\n        target: 0%\n    changes: no\n\ncomment:\n  layout: diff\n  behavior: default\n  require_changes: false\n\nignore:\n  - \".git\"\n  - \"*.yml\"\n  - \"*.json\"\n  - \"*.md\"\n  - \"*.mk\"\n  # ignore folders and all its contents\n  - \".ci/.*\"\n  - \".github/.*\"\n  - \".zephir/.*\"\n  - \"ide/.*\"\n  - \"php-zephir-parser/.*\"\n  - \".phpunit/.*\"\n  - \"tests/.*\"\n  - \"vendor/.*\"\n"
        },
        {
          "name": ".dir-locals.el",
          "type": "blob",
          "size": 0.541015625,
          "content": ";;; Directory Local Variables\n;; For more information see (info \"(emacs) Directory Variables\")\n\n((nil\n  (indent-tabs-mode . nil))\n (zephir-mode\n  (fill-column . 120))\n (c-mode\n  (fill-column . 80)\n  (c-file-style . \"k&r\")\n  (tab-width . 4)\n  (c-basic-offset . 4)\n  (indent-tabs-mode . t)\n  (flycheck-checker . c/c++-gcc)\n  (flycheck-disabled-checkers . (c/c++-clang))\n  (flycheck-gcc-language-standard . \"gnu99\"))\n (php-mode\n  (fill-column . 120)\n  (c-file-style . nil)\n  (indent-tabs-mode . nil)\n  (flycheck-disabled-checkers . (php-phpmd php-phpcs))))\n"
        },
        {
          "name": ".docker",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.5693359375,
          "content": "# EditorConfig is awesome: https://EditorConfig.org\n\n# top-most EditorConfig file\nroot                     = true\n\n[*]\nend_of_line              = lf\ninsert_final_newline     = true\nindent_style             = space\ncharset                  = utf-8\nindent_size              = 4\ntrim_trailing_whitespace = true\n\n[Makefile]\nindent_style             = tab\ntab_width                = 4\n\n[*.{mk,c,h,awk,bat,frag,lemon,re}]\nindent_style             = tab\ntab_width                = 4\n\n[*.{yml,m4,json,xml,sh}]\nindent_size              = 2\n\n[zephir-autocomplete]\nindent_size              = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.26953125,
          "content": "*.html                  ident\n\nprototypes/*            linguist-vendored\n\next/*                   linguist-vendored\nstub/*                  linguist-vendored\n\n*.xml.dist              text eol=lf linguist-language=XML\n*.json.dist             text eol=lf linguist-language=JSON\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8974609375,
          "content": "# Please do not use this ignore file to define platform specific files.\n#\n# For these purposes create a global .gitignore file, which is a list of rules\n# for ignoring files in every Git repository on your computer.\n#\n# https://help.github.com/articles/ignoring-files/#create-a-global-gitignore\n\n# Directories to ignore (do not add trailing '/'s, they skip symlinks).\n.zephir\n.libs\nide\ndoc\nvendor\n\n# Compilation artifacts.\n*.dep\n*.gch\n*.lo\n*.la\n*.loT\n*.dSYM\n\n# Compilation logs.\ncompile.log\ncompile-errors.log\n\n# Test and build configurations.\n.php_cs\n.php_cs.cache\n.phpunit\nbox.json\nphpcs.xml\nphpmd.xml\nphpunit.xml\n.phpunit.result.cache\n.php-cs-fixer.cache\n\n# Build artefact\nzephir.phar\nbox.phar\nphp-cs-fixer.phar\n\n# Ignore codecoverage stuff.\n*.profraw\n*.gcov\n*.gcno\n*.gcda\n\n# Ignore CI autogenerated release-notes.md\nrelease-notes.md\n\n# Use this as your own wish list or a temporary buffer\nLATER\nphp-zephir-parser/\n\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 2.3505859375,
          "content": "<?php\n\n/**\n * This file is part of the Zephir.\n *\n * (c) Phalcon Team <team@zephir-lang.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nif (!file_exists(__DIR__.'/src')) {\n    exit(0);\n}\n\n$header = <<<'EOF'\nThis file is part of the Zephir.\n\n(c) Phalcon Team <team@zephir-lang.com>\n\nFor the full copyright and license information, please view\nthe LICENSE file that was distributed with this source code.\nEOF;\n\n$finder = PhpCsFixer\\Finder::create()\n    ->in(__DIR__)\n    ->append([__FILE__])\n    ->exclude([\n        'ext',\n        'ide',\n        'config/class-entries',\n        'templates/engine',\n        'templates/Api',\n        'tests/ext-bootstrap',\n        'tests/fixtures',\n        'tests/sharness',\n    ])\n    ->notPath('#config/class-entries.php#')\n    ->notPath('#tests/fixtures/stubs/.*#')\n    ->notPath('#tests/ext-bootstrap.php#');\n\n$config = new PhpCsFixer\\Config();\n$config\n    ->setRiskyAllowed(true)\n    ->setFinder($finder)\n    ->setRules([\n        '@Symfony' => true,\n        '@Symfony:risky' => true,\n        '@PHPUnit48Migration:risky' => true,\n        '@PSR12' => true,\n        'php_unit_no_expectation_annotation' => false,\n        'array_syntax' => ['syntax' => 'short'],\n        'fopen_flags' => false,\n        'ordered_imports' => [\n            'sort_algorithm' => 'alpha',\n            'imports_order' => [\n                'class',\n                'function',\n                'const',\n            ],\n        ],\n        'protected_to_private' => false,\n        'phpdoc_summary' => false,\n        'phpdoc_to_comment' => false,\n        'phpdoc_var_annotation_correct_order' => true,\n        'no_superfluous_phpdoc_tags' => false,\n        'native_constant_invocation' => false,\n        'native_function_invocation' => false,\n        'no_extra_blank_lines' => [\n            'tokens' => [\n                'continue',\n                'curly_brace_block',\n                'default',\n                'extra',\n                'parenthesis_brace_block',\n                'square_brace_block',\n                'switch',\n                'throw',\n                'use_trait',\n            ],\n        ],\n        'single_line_throw' => false,\n        'psr_autoloading' => false,\n        'types_spaces' => ['space' => 'single'],\n        'yoda_style' => false,\n    ]);\n\nreturn $config;\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 28.6552734375,
          "content": "# Change Log\nAll notable changes to this project will be documented in this file.\n\nThe format based on [Keep a Changelog](https://keepachangelog.com)\nand this project adheres to [Semantic Versioning](https://semver.org).\n\n## [Unreleased]\n\n## [0.18.0] - 2024-09-29\n### Added\n- Added support of PHP `8.3` [#2407](https://github.com/zephir-lang/zephir/issues/2407)\n- Added support of multiple return types in stubs\n- Changed `PHP_DEBUG` const usage to `ZEND_DEBUG_BUILD`\n\n### Changed\n- Changed minimal PHP version to `8.0` [#2407](https://github.com/zephir-lang/zephir/issues/2407)\n\n## [0.17.0] - 2023-02-11\n### Added\n- Added support of PHP `8.2` [#2255](https://github.com/zephir-lang/zephir/issues/2370)\n\n### Fixed\n- Fixed backtrace on alpine [#2397](https://github.com/zephir-lang/zephir/issues/2397)\n\n## [0.16.3] - 2022-09-17\n### Fixed\n- Fixed segmentation fault on `mixed` return type and PHP 7.4 [#2387](https://github.com/zephir-lang/zephir/issues/2387)\n\n## [0.16.2] - 2022-08-22\n### Added\n- Added support for `object` return type [#2374](https://github.com/zephir-lang/zephir/issues/2374)\n\n## [0.16.1] - 2022-08-21\n### Changed\n- Changed usage of `utf8_decode()` function in favour of `mb_convert_encoding()` [#2376](https://github.com/zephir-lang/zephir/issues/2376)\n\n### Fixed\n- Fixed generation of `ARG_INFO` for nullable object (`?object`) [#2374](https://github.com/zephir-lang/zephir/issues/2374)\n\n## [0.16.0] - 2022-03-20\n### Added\n- Added custom list of arg info definition (Phalcon only) [#2341](https://github.com/zephir-lang/zephir/issues/2341)\n- Added support for `int|false` return type (PHP >= 8.0 only) [#2338](https://github.com/zephir-lang/zephir/issues/2338)\n- Added support of PHP `8.1` [#2255](https://github.com/zephir-lang/zephir/issues/2255)\n\n### Fixed\n- Fixed left `null` with `string` condition [#2299](https://github.com/zephir-lang/zephir/issues/2299)\n- Improved support of `mixed` type [#2330](https://github.com/zephir-lang/zephir/issues/2330)\n- Fixed Interfaces Breaking Child Projects Of Same Root Level Namespace [#2334](https://github.com/zephir-lang/zephir/issues/2334)\n\n## [0.15.2] - 2021-10-24\n### Fixed\n- Fixed output of `string` type INI in globals [#2312](https://github.com/zephir-lang/zephir/issues/2312)\n\n## [0.15.1] - 2021-10-08\n### Fixed\n- Fixed support of `string` type in struct globals [#2308](https://github.com/zephir-lang/zephir/issues/2308)\n\n## [0.15.0] - 2021-10-05\n### Added\n- Added support for `string` type in php.ini [#2280](https://github.com/zephir-lang/zephir/issues/2280)\n- Added support for `mixed` [#2276](https://github.com/zephir-lang/zephir/issues/2276)\n\n### Fixed\n- Fixed multiple return types in stubs [#2283](https://github.com/zephir-lang/zephir/issues/2283)\n- Fixed `bool` return type in stubs [#2272](https://github.com/zephir-lang/zephir/issues/2272)\n\n### Changed\n- Removed `.zep` from stubs filenames [#2273](https://github.com/zephir-lang/zephir/issues/2273)\n\n## [0.14.0] - 2021-09-18\n### Added\n- Added support for `require_once` [#2253](https://github.com/zephir-lang/zephir/issues/2253)\n\n### Changed\n- Bumped minimal version of Zephir Parser to `1.4.1`. [#2284](https://github.com/zephir-lang/zephir/issues/2284)\n\n## [0.14.0-beta.3] - 2021-08-06\n### Fixed\n- Fixed class entry generation of external class [#2261](https://github.com/zephir-lang/zephir/issues/2261)\n\n## [0.14.0-beta.2] - 2021-08-06\n### Fixed\n- Fixed missing `config/` directory in `zephir.phar` [#2259](https://github.com/zephir-lang/zephir/issues/2259)\n\n## [0.14.0-beta.1] - 2021-08-06\n### Fixed\n- Fixed nullable dynamic argument definition [#2245](https://github.com/zephir-lang/zephir/issues/2245)\n\n### Changed\n- Changed detection of external class entries [#2213](https://github.com/zephir-lang/zephir/issues/2213)\n\n## [0.13.5] - 2021-05-09\n### Fixed\n- Fixed `zephir build` command [#2240](https://github.com/zephir-lang/zephir/pull/2240)\n- Fixed `zephir generate` when processing Closure [#2241](https://github.com/zephir-lang/zephir/pull/2241)\n- Fixed stubs generation with variable-length argument [#2239](https://github.com/zephir-lang/zephir/issues/2239)\n\n\n## [0.13.4] - 2021-04-26\n### Fixed\n- Fixed cast string from null [#2232](https://github.com/zephir-lang/zephir/issues/2232)\n- Fixed strict nullable string type when `null` is passed [#2234](https://github.com/zephir-lang/zephir/issues/2234)\n\n\n## [0.13.3] - 2021-04-25\n### Fixed\n- Fixed nullable array [#1094](https://github.com/zephir-lang/zephir/issues/1094)\n- Fixed default value detection with Reflection (only PHP 8.0) [#1134](https://github.com/zephir-lang/zephir/issues/1134)\n- Updated supported list of class entries for PHP date extension [#2226](https://github.com/zephir-lang/zephir/issues/2226)\n- Fixed unset from class property [#1259](https://github.com/zephir-lang/zephir/issues/1259)\n\n### Added\n- Added support syntax assign-bitwise operators [#1103](https://github.com/zephir-lang/zephir/issues/1103)\n\n\n## [0.13.2] - 2021-04-10\n### Fixed\n- Fixed default value of nullable string parameter [#2180](https://github.com/zephir-lang/zephir/issues/2180)\n- Fixed cast of `string` to `int` and `float` [#828](https://github.com/zephir-lang/zephir/issues/828)\n- Fix `uint` cast to `unsigned int` in function params [#812](https://github.com/zephir-lang/zephir/issues/812)\n- Fixed `null` strict check when variable is `string` type [#2186](https://github.com/zephir-lang/zephir/issues/2186)\n\n\n## [0.13.1] - 2021-03-31\n### Added\n- Added jobs `-j, --jobs` option for `zephir compile` [#2174](https://github.com/zephir-lang/zephir/issues/2174)\n\n### Fixed\n- Fixed not used arginfo for interface static method without parameters (PHP `>= 8.0` only) [#2178](https://github.com/zephir-lang/zephir/pull/2178)\n- Fixed `zephir install` command [#2175](https://github.com/zephir-lang/zephir/issues/2175)\n\n\n## [0.13.0] - 2021-03-25\n### Added\n- Added support of PHP `8.0` [#2111](https://github.com/zephir-lang/zephir/pull/2111), [#2165](https://github.com/zephir-lang/zephir/pull/2165)\n\n### Changed\n- Dropped support of PHP `< 7.4` versions [#2111](https://github.com/zephir-lang/zephir/pull/2111)\n- Removed call of `generate` command inside `compile` call [#2150](https://github.com/zephir-lang/zephir/pull/2150)\n- Removed call of `compile` command inside `install` call [#2150](https://github.com/zephir-lang/zephir/pull/2150)\n\n### Fixed\n- Fixed parameters type detection in methods/functions (PHP `>= 8.0` only)\n- Fixed not adding all build directories [#2144](https://github.com/zephir-lang/zephir/pull/2144)\n\n\n## [0.12.21] - 2021-03-05\n### Fixed\n- Fixed path separators in generated `config.m4` file on Windows [#2153](https://github.com/zephir-lang/zephir/issues/2153)\n\n\n## [0.12.20] - 2020-12-16\n### Added\n- Added supports void type return value for stubs\n  [phalcon/ide-stubs#50](https://github.com/phalcon/ide-stubs/pull/50)\n  [#1977](https://github.com/zephir-lang/zephir/issues/1977)\n\n### Fixed\n- Fixed missing kernel directory at build time [ice/framework#271](https://github.com/ice/framework/issues/271)\n- Fixed stubs generation for case with array declaration with square brackets in params\n- Fixed parameters positioning for `implode()` php function [#2120](https://github.com/zephir-lang/zephir/issues/2120)\n\n\n## [0.12.19] - 2020-05-13\n### Fixed\n- Fixed duplicate definition with GCC 10\n  [ice/framework#266](https://github.com/ice/framework/pull/266)\n- Fixed initialization of object properties with default values when\n  the object is an instance of a child class\n  [#2089](https://github.com/zephir-lang/zephir/issues/2089)\n\n### Changed\n- Improved stubs generation for methods which may return object or null\n  [#2092](https://github.com/zephir-lang/zephir/issues/2092)\n\n\n## [0.12.18] - 2020-04-25\n### Fixed\n- In some cases for C \"control characters\" aren't properly escaped\n  [#2065](https://github.com/zephir-lang/zephir/issues/2065)\n- Zephir ignored property visibility and has not thrown error when setting\n  private/protected properties in scope that shouldn't intend for it\n  [#2078](https://github.com/zephir-lang/zephir/pull/2078),\n  [phalcon/cphalcon#14810](https://github.com/phalcon/cphalcon/issues/14810),\n  [phalcon/cphalcon#14766](https://github.com/phalcon/cphalcon/issues/14766)\n\n\n## [0.12.17] - 2020-02-14\n### Fixed\n- On some platforms special alpha characters aren't correctly escaped.\n  [#2058](https://github.com/zephir-lang/zephir/pull/2058)\n\n### Changed\n- Changed the internal DI environment mode when compile PHAR\n  [#2049](https://github.com/zephir-lang/zephir/pull/2049)\n\n\n## [0.12.16] - 2020-01-16\n### Fixed\n- Do not dump config file if config was changed.\n  Usually we need dump configuration exactly once - at project initialization.\n  There are no needs to dump it for every config change. Also, this patch\n  removes `Config::$changed` variable that is no longer needed\n  [#2035](https://github.com/zephir-lang/zephir/pull/2035)\n- Use a different path for the Kernel cache if possible.\n  This patch fixes a cache collision issue. The issue is after creating the\n  cache and filling it with a project-specific configuration, there is no\n  way to invalidate it. Any next project will use the same Kernel cache and\n  the same Kernel configuration (if any).\n  [#2036](https://github.com/zephir-lang/zephir/pull/2036)\n- Fixed `-V` CLI flag purpose. Initially it was designed to disable verbose mode\n  on the fly, e.g. to override project configuration for a single Zephir pass.\n  This behavior was returned back.\n- Fix increment array elements operation\n  [#2020](https://github.com/zephir-lang/zephir/issues/2020)\n- Fixed compound addition and subtraction assignment operators for static properties\n  [#2038](https://github.com/zephir-lang/zephir/issues/2038)\n\n### Changed\n- Improved type hint for arrays when generating stubs\n  [#2026](https://github.com/zephir-lang/zephir/issues/2026)\n\n\n## [0.12.15] - 2019-12-12\n### Removed\n- Removed `uint` typedef usage\n\n\n## [0.12.14] - 2019-12-11\n### Removed\n- Removed `zend_uint` typedef usage\n\n\n## [0.12.13] - 2019-12-08\n### Fixed\n- Fixed PHP 7.4 support for macOS [phalcon/cphalcon#14577](https://github.com/phalcon/cphalcon/issues/14577)\n\n### Removed\n- Removed `uint` and `ulong` typedefs usage\n\n\n## [0.12.12] - 2019-11-25\n### Added\n- Option to set banner for stubs generator\n  [#1987](https://github.com/zephir-lang/zephir/1987)\n\n### Fixed\n- Calling object methods from static context yields segmentation fault when\n  `internal-call-transformation` is set to `TRUE`\n  [#2000](https://github.com/zephir-lang/zephir/issues/2000)\n- Certain method calls fail when called from static context when\n  `internal-call-transformation` is set to `TRUE`\n  [#2005](https://github.com/zephir-lang/zephir/issues/2005)\n- Method context loses track of `this` after calling static method when\n  `internal-call-transformation` is set to `TRUE`\n  [#2007](https://github.com/zephir-lang/zephir/issues/2007)\n- Fixed incorrect stubs generation for return type hint\n  [#1990](https://github.com/zephir-lang/zephir/issues/1990)\n- Fixed incorrect stubs generation for classes in the same namespace\n  [#2016](https://github.com/zephir-lang/zephir/issues/2016)\n\n\n## [0.12.11] - 2019-11-02\n### Fixed\n- Fixed arithmetical operations with `zvals` which stores `double` numbers\n- Fixed updating static variables in the loop which represents  `double` and\n  `integer` data types [#1494](https://github.com/zephir-lang/zephir/issues/1494)\n- Fixed casting char into another of a different type\n  [#1988](https://github.com/zephir-lang/zephir/issues/1988)\n- Fixed `internal` methods definition when `internal-call-transformation` is enabled\n  [#1956](https://github.com/zephir-lang/zephir/issues/1956)\n- Fixed aliases using in the `use` statement when generating stubs\n  [#1986](https://github.com/zephir-lang/zephir/issues/1986)\n- Fixed incorrect namespace on type hinted return when generating API docs\n  [#1229](https://github.com/zephir-lang/zephir/issues/1229)\n\n\n## [0.12.10] - 2019-10-19\n### Fixed\n- Fixed incorrect behavior in `zephir_get_global` if `zval` reference count <= 1\n  [#1961](https://github.com/zephir-lang/zephir/issues/1961)\n\n### Removed\n- Removed `--vernum` option from the help for regular commands\n- Removed `void` from the return type hint in the generated stubs\n  [#1977](https://github.com/zephir-lang/zephir/issues/1977)\n- Remove no longer supported `TSRMLS_CC` usage\n  [#1865](https://github.com/zephir-lang/zephir/issues/1865)\n\n### Changed\n- Disabled PHP warnings for PHP >= 7.3.0 to be able correct work with lowest versions of dependencies\n  [zendframework/zend-code#160](https://github.com/zendframework/zend-code/issues/160)\n- Introduced support of multi line `@param` body for generated stubs\n  [#1968](https://github.com/zephir-lang/zephir/issues/1968)\n\n\n## [0.12.9] - 2019-10-14\n### Added\n- Added a single hyphen version of `dumpversion` option (just `-dumpversion`)\n- Added `--vernum` option to print compiler version as integer\n\n### Fixed\n- Create local `.zephir` only when necessary\n- Fixed IDE stubs generation [#1778](https://github.com/zephir-lang/zephir/issues/1778)\n- Fixed segfault on cast `IS_UNDEF` to array\n  [#1941](https://github.com/zephir-lang/zephir/issues/1941)\n- Disables some regression changes introduced in the version `0.12.5`\n  [#1941 (comment)](https://github.com/zephir-lang/zephir/issues/1941#issuecomment-538654340)\n- Fixed memory leak on update array [#1937](https://github.com/zephir-lang/zephir/issues/1937)\n- Fixed IDE stubs generation for classes that extends base classes\n  [#1907](https://github.com/zephir-lang/zephir/issues/1907)\n- Proper escape slashes in strings [#1495](https://github.com/zephir-lang/zephir/issues/1495)\n\n### Changed\n- Print warning during the code generation if the `timecop` extension was detected\n  [#1950](https://github.com/zephir-lang/zephir/issues/1950)\n- Improved error handling to not print PHP stack traces if `ZEPHIR_DEBUG` is not set\n\n### Removed\n- Removed no longer used `zephir_dtor` macro\n\n\n## [0.12.8] - 2019-10-03\n### Fixed\n- Fixed `zephir_preg_match` to use `ZVAL_NULL` instead of `ZEPHIR_NULL`\n  [#1946](https://github.com/zephir-lang/zephir/issues/1946)\n- Fixed `Extension\\InternalClassesTest` test to be able run full test suite\n  without Phalcon [#1949](https://github.com/zephir-lang/zephir/issues/1949)\n\n\n## [0.12.7] - 2019-10-03\n### Fixed\n- Fixed regression introduced in `0.12.5` for those users who doesn't use\n  bundled `ext/pcre/php_pcre.h`\n  [#1944](https://github.com/zephir-lang/zephir/issues/1944)\n  [#1940](https://github.com/zephir-lang/zephir/issues/1940)\n- Fixed sitemap API generator [#1940](https://github.com/zephir-lang/zephir/issues/1940)\n\n\n## [0.12.6] - 2019-10-03\n### Fixed\n- Fixed regression introduced in `0.12.5` for those users who doesn't use\n  bundled `ext/json/php_json.h` [#1940](https://github.com/zephir-lang/zephir/issues/1940)\n\n\n## [0.12.5] - 2019-10-02\n### Changed\n- Update `zend_update_static_property` to be compatible with PHP >= 7.3\n  [#1904](https://github.com/zephir-lang/zephir/issues/1904)\n- Improved error handling\n\n### Fixed\n- Fixed IDE stubs generation to properly generate return type hint for `var | null`\n  [#1922](https://github.com/zephir-lang/zephir/issues/1922)\n- Fixed updating Super Globals [#1917](https://github.com/zephir-lang/zephir/issues/1917)\n- Fixed casting variables to array [#1923](https://github.com/zephir-lang/zephir/issues/1923)\n- Fixed work with constant which are not present\n  [#1928](https://github.com/zephir-lang/zephir/issues/1928)\n- Fixed access to Super Globals\n  [#1934](https://github.com/zephir-lang/zephir/issues/1934),\n  [phalcon/cphalcon#14426](https://github.com/phalcon/cphalcon/issues/14426)\n\n\n## [0.12.4] - 2019-09-22\n### Fixed\n- Fixed install template\n\n\n## [0.12.3] - 2019-09-22\n### Fixed\n- Fixed concatenation support of strings with `double` numbers\n  [#1893](https://github.com/zephir-lang/zephir/issues/1893)\n- Fixed 'void' return type hint being ignored\n  [#1908](https://github.com/zephir-lang/zephir/issues/1908)\n- Fixed updating array properties\n  [#1915](https://github.com/zephir-lang/zephir/issues/1915)\n\n\n## [0.12.2] - 2019-08-05\n### Added\n- Introduced initial ability to generate `zend_module_deps`\n  [#1900](https://github.com/zephir-lang/zephir/pull/1900),\n  [phalcon/cphalcon#13702](https://github.com/phalcon/cphalcon/issues/13702),\n  [phalcon/cphalcon#13794](https://github.com/phalcon/cphalcon/pull/13794)\n\n### Changed\n- Write errors compiler to stderr if available\n\n\n## [0.12.1] - 2019-07-30\n### Added\n- Added initial bash completion support (see `zephir-autocomplete` file)\n\n### Changed\n- Use local memory management\n  [#1859](https://github.com/zephir-lang/zephir/pull/1859),\n  [#1880](https://github.com/zephir-lang/zephir/pull/1880)\n- Rephrase help strings for common compiler options\n\n### Removed\n- Remove HAVE_SPL usage\n  [phalcon/cphalcon#14215](https://github.com/phalcon/cphalcon/pull/14215)\n- Remove not used redundant command line options\n- Cleaning up redundant CLI options\n\n### Fixed\n- Fixed segfault when auto-loading class with syntax error\n  [#1885](https://github.com/zephir-lang/zephir/issues/1885)\n- Optimize memory usage [#1882](https://github.com/zephir-lang/zephir/pull/1882)\n- Fixed modifying array values in loops\n  [#1879](https://github.com/zephir-lang/zephir/issues/1879)\n\n\n## [0.12.0] - 2019-06-20\n### Added\n- Added initial support of \"use\" keyword in closures\n  [#888](https://github.com/zephir-lang/zephir/issues/888),\n  [#1848](https://github.com/zephir-lang/zephir/issues/1848)\n  [#1860](https://github.com/zephir-lang/zephir/issues/1860)\n\n### Removed\n- PHP 5.x is no longer supported\n\n### Changed\n- The minimal Zephir Parser version is 1.3.0\n\n### Fixed\n- Fixed CLI runner for Windows\n  [#1857](https://github.com/zephir-lang/zephir/pull/1857)\n- Fixed segfault with fetching and opcache\n  [#1855](https://github.com/zephir-lang/zephir/issues/1855)\n- Extended classes can't access their private variables\n  [#1851](https://github.com/zephir-lang/zephir/issues/1851)\n- Incorrect usage of `zend_declare_class_constant_ex`\n  [phalcon/cphalcon#14160](https://github.com/phalcon/cphalcon/issues/14160),\n  https://bugs.php.net/bug.php?id=78121\n- Incorrect implementation of ArrayAccess methods\n  [#1871](https://github.com/zephir-lang/zephir/pull/1871)\n- Fixed exception on call undefined method\n  [#1863](https://github.com/zephir-lang/zephir/issues/1863)\n\n\n## [0.11.12] - 2019-03-24\n### Fixed\n- Compilation error for instanceof [#1828](https://github.com/zephir-lang/zephir/issues/1828)\n- Fixed `array_shift` behavior to mimicry PHP's \"change by reference\"\n  [#1831](https://github.com/zephir-lang/zephir/issues/1831)\n- Fixed reference counting while changing object's properties that are arrays\n  [#1833](https://github.com/zephir-lang/zephir/pull/1833)\n\n\n## [0.11.11] - 2019-02-26\n### Fixed\n- Objects are not traversable with `foreach`\n  [#1818](https://github.com/zephir-lang/zephir/issues/1818)\n  [#1595](https://github.com/zephir-lang/zephir/issues/1595)\n- Recursion for array_push on PHP 7 [#1140](https://github.com/zephir-lang/zephir/issues/1140)\n- Invalid array initialization [#1159](https://github.com/zephir-lang/zephir/issues/1159)\n\n\n## [0.11.10] - 2019-02-23\n### Changed\n- Moved internal cache and logs to the user's home directory.\n  - On macOS Zephir will use `XDG` if it is possible, otherwise `$HOME/Library`\n  - On Windows Zephir will use `LOCALAPPDATA` if it is possible, otherwise home dir as a base path\n  - In any other cases, e.g. Linux, BSD and so on, Zephir will use `XDG`if it is possible,\n    otherwise `$HOME/.local` and `$HOME/.cache`\n- Per project cache used for temporary operations was moved to `%CWD%/.zephir/%VERSION%`\n  where `%CWD%` is the current working directory and `%VERSION%` is the current Zephir version e.g. `0.11.10-4a825b8`\n\n### Fixed\n- Array of object as return type is reported to PHP as type, not array\n  [#1779](https://github.com/zephir-lang/zephir/issues/1779)\n- Use namespace as a prefix for ini name [#1604](https://github.com/zephir-lang/zephir/issues/1604)\n- Fixed calling anonymous functions by resolving context [#1751](https://github.com/zephir-lang/zephir/issues/1751)\n- Fixed a bug when accessing super-global variables that do not exist (only for PHP >= 7.0 )\n  [#1775](https://github.com/zephir-lang/zephir/issues/1775)\n- Fixed incorrect behavior during work with ArrayAccess [#1061](https://github.com/zephir-lang/zephir/issues/1061),\n  [#1400](https://github.com/zephir-lang/zephir/issues/1400)\n\n\n## [0.11.9] - 2019-01-15\n- Fixed `zend_closure` declaration to reflect PHP 7.3 changes\n\n\n## [0.11.8] - 2018-12-01\n### Fixed\n- Fixed compilation error with inheritance of prototype interfaces\n  [#1758](https://github.com/zephir-lang/zephir/issues/1758)\n- Fixed compilation error when a new file is added or removed to the project\n  [#1776](https://github.com/zephir-lang/zephir/issues/1776)\n\n\n## [0.11.7] - 2018-11-27\n### Changed\n- The cache directory, formerly known as `.temp`, used for temporary operations was moved to\n  the new `.zephir` directory. The algorithm for calculating cache path is as follows:\n  `%CWD%/.zephir/%HASH%/cache/IR` where `%CWD%` is the current working directory and `%HASH%`\n  means a hash calculated from the current Zephir version, environment and configuration\n- The compiler's messages was divided into streams. Thus, now it is possible to redirect compiler's\n  output as follows: `zephir generate 2> errors.log 1> /dev/null`\n- Fixed type hints for scalar arguments for PHP < 7.2\n  [#1658](https://github.com/zephir-lang/zephir/pull/1658)\n- Coloring the compiler messages in the terminal is temporarily disabled\n\n### Fixed\n- Fixed incorrect behavior of `func_get_arg` and `func_get_args` functions for PHP 7.3\n\n\n## [0.11.6] - 2018-11-19\n### Fixed\n- Fixed incorrect behavior of `require` statement for ZendEngine3\n  [#1621](https://github.com/zephir-lang/zephir/issues/1621)\n  [#1403](https://github.com/zephir-lang/zephir/issues/1403)\n  [#1428](https://github.com/zephir-lang/zephir/pull/1428)\n\n\n## [0.11.4] - 2018-11-18\n### Added\n- Introduced a brand new CLI interface\n- The preferred method of installation is to use the Zephir PHAR\n  which can be downloaded from the most recent Github Release\n- Added `--no-dev` option to force building the extension in production mode\n  [#1520](https://github.com/zephir-lang/zephir/issues/1520)\n- Zephir development mode will be enabled silently if your PHP binary was compiled in\n  a debug configuration [#1520](https://github.com/zephir-lang/zephir/issues/1520)\n- Added missed CLI option `--export-classes` to flag whether classes must be exported.\n  If export-classes is enabled all headers are copied to `include/php/ext`.\n\n### Fixed\n- Fixed regression introduced in the 0.10.12 related to `require` file using protocols\n  [#1713](https://github.com/zephir-lang/zephir/issues/1713)\n\n\n## [0.11.3] - 2018-11-13\n### Changed\n- Remove legacy installers and provide a common way to install Zephir\n  [#1714](https://github.com/zephir-lang/zephir/issues/1714). Supported installation strategies are:\n  - Install as a global application (using `composer global require`)\n  - Install as a PHAR file. (this feature currently in the testing phase and not released officially)\n  - Install as a Git clone (using `git clone` and `composer install` inside cloned project)\n  - Install as a project's dependency (using `composer require`)\n\n\n## [0.11.2] - 2018-11-11\n### Added\n- Introduced an ability to pack project into one `zephir.phar` file (for PHP 7.1 and later)\n\n### Changed\n- Composer now is a mandatory dependency\n- Improved Zephir's Compiler error reporting\n\n### Removed\n- PHP 5.5 no longer supported\n\n### Fixed\n- Correct return types hint check\n\n\n## [0.11.1] - 2018-10-19\n### Added\n- Initial support of PHP 7.3 (ported from the 0.10.x branch)\n\n\n## [0.11.0] - 2018-08-05\n### Added\n- Add type hints for scalar arguments and return values in ZendEngine 3\n  [1656](https://github.com/zephir-lang/zephir/issues/1656)\n\n\n## [0.10.14] - 2018-11-20\n### Fixed\n- Fixed incorrect behavior of `func_get_arg` and `func_get_args` functions for PHP 7.3\n  (backported from the upstream)\n\n\n## [0.10.13] - 2018-11-18\n### Fixed\n- Fixed regression introduced in the 0.10.12 related to `require` file using protocols\n  [#1713](https://github.com/zephir-lang/zephir/issues/1713) (backported from the upstream)\n- Fixed incorrect behavior of `require` statement for ZendEngine3\n  [#1621](https://github.com/zephir-lang/zephir/issues/1621)\n  [#1403](https://github.com/zephir-lang/zephir/issues/1403)\n  [#1428](https://github.com/zephir-lang/zephir/pull/1428)\n  (backported from the upstream)\n\n\n## [0.10.12] - 2018-10-19\n### Added\n- Initial support of PHP 7.3\n\n\n## [0.10.11] - 2018-08-05\n### Added\n- Allow extension to be loaded prior to the tests\n\n### Fixed\n- Fixed [Copy-On-Write](https://en.wikipedia.org/wiki/Copy-on-write) violation for arrays zvals\n- Fixed some testing settings\n  [5deb64a](https://github.com/zephir-lang/zephir/commit/5deb64a8a1c7c18d45ce1a5a55667c499e2c284f)\n- Fixed casting resource to int (only ZendEngine 3)\n  [#1524](https://github.com/zephir-lang/zephir/issues/1524)\n\n\n[Unreleased]: https://github.com/zephir-lang/zephir/compare/0.17.0...HEAD\n[0.17.0]: https://github.com/zephir-lang/zephir/compare/0.16.3...0.17.0\n[0.16.3]: https://github.com/zephir-lang/zephir/compare/0.16.2...0.16.3\n[0.16.2]: https://github.com/zephir-lang/zephir/compare/0.16.1...0.16.2\n[0.16.1]: https://github.com/zephir-lang/zephir/compare/0.16.0...0.16.1\n[0.16.0]: https://github.com/zephir-lang/zephir/compare/0.15.2...0.16.0\n[0.15.2]: https://github.com/zephir-lang/zephir/compare/0.15.1...0.15.2\n[0.15.1]: https://github.com/zephir-lang/zephir/compare/0.15.0...0.15.1\n[0.15.0]: https://github.com/zephir-lang/zephir/compare/0.14.0...0.15.0\n[0.14.0]: https://github.com/zephir-lang/zephir/compare/0.14.0-beta.3...0.14.0\n[0.14.0-beta.3]: https://github.com/zephir-lang/zephir/compare/0.14.0-beta.2...0.14.0-beta.3\n[0.14.0-beta.2]: https://github.com/zephir-lang/zephir/compare/0.14.0-beta.1...0.14.0-beta.2\n[0.14.0-beta.1]: https://github.com/zephir-lang/zephir/compare/0.13.5...0.14.0-beta.1\n[0.13.5]: https://github.com/zephir-lang/zephir/compare/0.13.4...0.13.5\n[0.13.4]: https://github.com/zephir-lang/zephir/compare/0.13.3...0.13.4\n[0.13.3]: https://github.com/zephir-lang/zephir/compare/0.13.2...0.13.3\n[0.13.2]: https://github.com/zephir-lang/zephir/compare/0.13.1...0.13.2\n[0.13.1]: https://github.com/zephir-lang/zephir/compare/0.13.0...0.13.1\n[0.13.0]: https://github.com/zephir-lang/zephir/compare/0.12.21...0.13.0\n[0.12.21]: https://github.com/zephir-lang/zephir/compare/0.12.20...0.12.21\n[0.12.20]: https://github.com/zephir-lang/zephir/compare/0.12.19...0.12.20\n[0.12.19]: https://github.com/zephir-lang/zephir/compare/0.12.18...0.12.19\n[0.12.18]: https://github.com/zephir-lang/zephir/compare/0.12.17...0.12.18\n[0.12.17]: https://github.com/zephir-lang/zephir/compare/0.12.16...0.12.17\n[0.12.16]: https://github.com/zephir-lang/zephir/compare/0.12.15...0.12.16\n[0.12.15]: https://github.com/zephir-lang/zephir/compare/0.12.14...0.12.15\n[0.12.14]: https://github.com/zephir-lang/zephir/compare/0.12.13...0.12.14\n[0.12.13]: https://github.com/zephir-lang/zephir/compare/0.12.12...0.12.13\n[0.12.12]: https://github.com/zephir-lang/zephir/compare/0.12.11...0.12.12\n[0.12.11]: https://github.com/zephir-lang/zephir/compare/0.12.10...0.12.11\n[0.12.10]: https://github.com/zephir-lang/zephir/compare/0.12.9...0.12.10\n[0.12.9]: https://github.com/zephir-lang/zephir/compare/0.12.8...0.12.9\n[0.12.8]: https://github.com/zephir-lang/zephir/compare/0.12.7...0.12.8\n[0.12.7]: https://github.com/zephir-lang/zephir/compare/0.12.6...0.12.7\n[0.12.6]: https://github.com/zephir-lang/zephir/compare/0.12.5...0.12.6\n[0.12.5]: https://github.com/zephir-lang/zephir/compare/0.12.4...0.12.5\n[0.12.4]: https://github.com/zephir-lang/zephir/compare/0.12.3...0.12.4\n[0.12.3]: https://github.com/zephir-lang/zephir/compare/0.12.2...0.12.3\n[0.12.2]: https://github.com/zephir-lang/zephir/compare/0.12.1...0.12.2\n[0.12.1]: https://github.com/zephir-lang/zephir/compare/0.12.0...0.12.1\n[0.12.0]: https://github.com/zephir-lang/zephir/compare/0.11.12...0.12.0\n[0.11.12]: https://github.com/zephir-lang/zephir/compare/0.11.11...0.11.12\n[0.11.11]: https://github.com/zephir-lang/zephir/compare/0.11.10...0.11.11\n[0.11.10]: https://github.com/zephir-lang/zephir/compare/0.11.9...0.11.10\n[0.11.9]: https://github.com/zephir-lang/zephir/compare/0.11.8...0.11.9\n[0.11.8]: https://github.com/zephir-lang/zephir/compare/0.11.7...0.11.8\n[0.11.7]: https://github.com/zephir-lang/zephir/compare/0.11.6...0.11.7\n[0.11.6]: https://github.com/zephir-lang/zephir/compare/0.11.4...0.11.6\n[0.11.4]: https://github.com/zephir-lang/zephir/compare/0.11.3...0.11.4\n[0.11.3]: https://github.com/zephir-lang/zephir/compare/0.11.2...0.11.3\n[0.11.2]: https://github.com/zephir-lang/zephir/compare/0.11.1...0.11.2\n[0.11.1]: https://github.com/zephir-lang/zephir/compare/0.11.0...0.11.1\n[0.11.0]: https://github.com/zephir-lang/zephir/compare/0.10.14...0.11.0\n[0.10.14]: https://github.com/zephir-lang/zephir/compare/0.10.13...0.10.4\n[0.10.13]: https://github.com/zephir-lang/zephir/compare/0.10.12...0.10.13\n[0.10.12]: https://github.com/zephir-lang/zephir/compare/0.10.11...0.10.12\n[0.10.11]: https://github.com/zephir-lang/zephir/compare/0.10.10...0.10.11\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.828125,
          "content": "# Contributor Covenant Code of Conduct\n\n## TL;DR\n\nCommon sense rules. Treat people the same way you want to be treated. \n\n## Detail\n\nThis is an open source project. Everyone and anyone is welcome to contribute \nto it as much or as little as they want to.\n\nPersonal views of contributors have no effect on the project and should be \nkept in the personal realm not this project.\n\nIt is a requirement to treat other contributors as well as maintainers with \nrespect, when communicating in the realm of this project. It is OK to agree to \ndisagree.\n\n## Conflict\n\nIf ever conflict arises, please bring it to the attention of the maintainers \nprivately. You can always find us on our [Discord](https://phalcon.io/discord) \nserver or you can send us an email at team@phalcon.io \n\nThe core team maintains the final decision on any conflict that may arise.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.6640625,
          "content": "# Contributing to Zephir\n\nZephir is an open source project and a volunteer effort. Zephir welcomes\ncontribution from everyone. The following summarizes the process for\ncontributing changes. Please take a moment to review this document in order\nto make the contribution process easy and effective for everyone involved.\n\n## Community\n\nZephir is maintained and supported by [Phalcon Team][team] and developed in\ncollaboration with a productive community of contributors. Please use the\n[GitHub issues][issues] to raise discussion of development topics.\n\n## Answering Questions\n\nWe use the GitHub issues for tracking bugs and feature requests and have\nlimited bandwidth to address all of them. Thus we only accept bug reports,\nnew feature requests and pull requests in GitHub. Our great community and\ncontributors are happy to help you though! Please use these community\nresources for obtaining help.\n\n_Please use the [Documentation][docs] before anything else. You can also use\nthe search feature in our documents to find what you are looking for. If your\nquestion is still not answered, there are more options below._\n\n## Contributions\n\nContributions to Zephir should be made in the form of GitHub pull requests.\nEach pull request will be reviewed by a core contributor (someone with\npermission to merge patches). Feedback can be provided and potentially changes\nrequested or the pull request will be merged. All contributions should follow\nthis format, even those from core contributors.\n\n## Code style conventions\n\n- PHP: PSR-1/PSR-2\n- Bash/Sh: https://github.com/icy/bash-coding-style\n\n## Pull request procedure\n\nPull requests should be targeted at Zephir's `master` branch.\nBefore pushing to your Github repo and issuing the pull request,\nplease do two things:\n\n1. [Rebase][git rebase] your local changes against the `master` branch.\n   Resolve any conflicts that arise.\n2. Run the full Zephir test suite with the `./vendor/bin/phpunit` command.\n   You're not off the hook even if you just stick to documentation; code\n   examples in the docs are tested as well!\n3. If your pull request fix or add some functionality - you have to **add tests**.\n   That is very important. When you add tests, you are helping other developers,\n   and also yourself, do not make mistakes in the future.\n\nPull requests will be treated as \"review requests\", and we will give\nfeedback we expect to see corrected on [coding style][psr-2]\nand substance before pulling.  Changes contributed via pull request should\nfocus on a single issue at a time, like any other.  We will not accept\npull-requests that try to \"sneak\" unrelated changes in.\n\nNormally, all pull requests must include regression tests\nthat test your change.  Occasionally, a change will be very difficult\nto test for.  In those cases, please include a note in your commit\nmessage explaining why.\n\nIn the licensing header at the beginning of any files you change,\nplease make sure the listed date range includes the current year.\n\n## Bugs\n\nMany bugs are raised because users are not running the latest version.\nPlease visit the download page, download/clone the latest available version\n(or compile it) and confirm if the issue you are experiencing is indeed a bug.\nWhen submitting bugs to the issue tracker make sure your issue includes:\n\n - Code to reproduce the bug\n - Your environment: OS, compiler\n - Zephir version, if your version is outdated - try updating the latest version\n\nThanks! <br />\nPhalcon Team\n\n[team]: https://phalcon.io/en-us/team\n[issues]: https://github.com/zephir-lang/zephir/issues\n[docs]: https://docs.zephir-lang.com\n[git rebase]: https://git-scm.com/book/en/Git-Branching-Rebasing\n[psr-2]: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.052734375,
          "content": "\nMIT License\n\nCopyright (c) 2013-present Phalcon Team\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.8994140625,
          "content": "# [![Zephir][zephir logo]][web site]\n\n[![Discord][discord-badge]](https://phalcon.io/discord)\n[![Build on Linux|macOS|Windows][actions main]][actions link]\n[![Latest Stable Version][version badge]][packagist link]\n[![PHP from Packagist][packagist ver]][packagist link]\n[![Packagist][packagist dd]][packagist stats]\n[![MIT License][license badge]](./LICENSE)\n\n[Zephir][web site] - is a high level programming language that eases the creation and maintainability of extensions for PHP.\nZephir extensions are exported to C code that can be compiled and optimized by major C compilers such as gcc/clang/vc++.\nFunctionality is exposed to the PHP language.\n\n## Documentation\n\n* Official documentation is [located here][docs]\n\n## Community\n\n* Follow us on [GitHub][zephir] and [Facebook][facebook]\n* Get Zephir support on [Discord][discord] and [GitHub discussions][discussions]\n* Read our [Code of Conduct](./CODE_OF_CONDUCT.md)\n\n## Contributing\n\nZephir is an Open Source, community-driven project. See [CONTRIBUTING.md](./CONTRIBUTING.md)\nfor details about contributions to this repository.\n\n## Sponsors\n\nBecome a sponsor and get your logo on our README on GitHub with a link to your site.\n[[Become a sponsor](https://opencollective.com/phalcon#sponsor)]\n\n<a href=\"https://opencollective.com/phalcon/#contributors\">\n<img src=\"https://opencollective.com/phalcon/tiers/sponsors.svg?avatarHeight=48&width=800\" alt=\"\">\n</a>\n\n## Backers\n\nSupport us with a monthly donation and help us continue our activities.\n[[Become a backer](https://opencollective.com/phalcon#backer)]\n\n<a href=\"https://opencollective.com/phalcon/#contributors\">\n<img src=\"https://opencollective.com/phalcon/tiers/backers.svg?avatarHeight=48&width=800&height=200\" alt=\"\">\n</a>\n\n## License\n\nZephir licensed under the MIT License. See the [LICENSE](./LICENSE) file for more information.\n\n[docs]:             https://docs.zephir-lang.com\n[zephir]:           https://github.com/zephir-lang/zephir\n[facebook]:         https://www.facebook.com/groups/zephir.language\n[discord]:          https://phalcon.io/discord\n[discussions]:      https://github.com/zephir-lang/zephir/discussions\n[zephir logo]:      https://assets.phalconphp.com/zephir/zephir_logo-105x36.svg\n[web site]:         https://zephir-lang.com\n\n[actions link]:     https://github.com/zephir-lang/zephir/actions\n[actions main]:     https://github.com/zephir-lang/zephir/actions/workflows/main.yml/badge.svg\n\n[version badge]:    https://poser.pugx.org/phalcon/zephir/v/stable.svg\n[packagist link]:   https://packagist.org/packages/phalcon/zephir\n[packagist dd]:     https://img.shields.io/packagist/dd/phalcon/zephir\n[packagist stats]:  https://packagist.org/packages/phalcon/zephir/stats\n[packagist ver]:    https://img.shields.io/packagist/php-v/phalcon/migrations\n[license badge]:    https://poser.pugx.org/phalcon/zephir/license.svg\n[discord-badge]:    https://img.shields.io/discord/310910488152375297?label=Discord&logo=discord&style=flat-square\n"
        },
        {
          "name": "WINDOWS.md",
          "type": "blob",
          "size": 2.697265625,
          "content": "# Zephir Installation/Usage Guide (Windows)\n\nThis guide explains how to use zephir using a windows operating system.\nSome parts are optional, when you have a specific PHP version.\nParts which are only necessary for a specific PHP version, are marked as such.\nPHP-Version requirements are marked using `[ ]`\n\n## Software Requirements [PHP 5.5 or later]\n\n- [Install Visual Studio 2012 Express](https://www.microsoft.com/en-US/download/details.aspx?id=34673)\n(You should start it and activate it)\n\n## Software Requirements General\n\n- [Install PHP (NTS)](https://windows.php.net/download/)\n    - Download and extract it\n    - Make sure it is in the PATH, as for example below:\n    ```cmd\n    setx path \"%path%;c:\\path-to-php\\\"\n    ```\n- [Install PHP SDK for PHP 5.6](https://windows.php.net/downloads/php-sdk/)(Currently `php-sdk-binary-tools-20110915.zip` is the newest)\n- [Install PHP SDK for PHP 7.0+](https://github.com/Microsoft/php-sdk-binary-tools/releases)\n```cmd\nsetx php_sdk \"c:\\path-to-php-sdk\"\n```\n\n- [Download PHP Developer Pack(NTS!)：***php-devel-pack-?.?.?-Win??-VC??-x??.zip***](https://windows.php.net/downloads/releases/)\n(or build it yourself with `--enable-debug --disable-zts` and `nmake build-devel` or just `nmake snap` by using the PHP-SDK)\n```cmd\nsetx php_devpack \"c:\\path-to-extracted-devpack\"\n```\n\n## Installation of Zephir\n\n- Clone/Download the repository and set the path as below\n```cmd\nsetx path \"%path%;c:\\path-to-zephir\"\ncd c:\\path-to-zephir\ncomposer install\n```\n\n## Installation of Zephir Parser\n\n1. Download [Zephir Parser for Windows](https://github.com/zephir-lang/php-zephir-parser/releases/latest)\n2. Extract the DLL file and copy it to your PHP extensions directory\n3. Edit your `php.ini` file and add this line:\n   ```ini\n   [Zephir Parser]\n   ; You can use here absolute path to your custom modules dir\n   ; or relative to the PHP modules dir\n   extension=zephir_parser.dll\n   ```\n\n**NOTE**: Also you can [compile it yourself.](https://github.com/zephir-lang/php-zephir-parser/blob/master/README.WIN32-BUILD-SYSTEM)\n\n## Usage of Zephir\n\n- [**PHP7 or later**] Open the Visual Studio 2015 Command Prompt\n(Find it by searching for cmd or just open `\"%VS140COMNTOOLS%\\VsDevCmd\"`)\n- [**PHP5.5 or later**] Open the Visual Studio 2012 Command Prompt\n(Find it by searching for cmd or just open `\"%VS110COMNTOOLS%\\VsDevCmd\"`)\n- Execute `%PHP_SDK%\\bin\\phpsdk_setvars`\n- `CD` to your extension and `zephir build`\n- Take the built `.dll` from `your_ext/Release/php_extname.dll` (or `your_ext/Release_TS/php_extname.dll`)\n\n## Additional Links\n\n* Building PHP 5.5 - 7.1 under Windows: https://wiki.php.net/internals/windows/stepbystepbuild\n* Building PHP 7.2+ under Windows: https://wiki.php.net/internals/windows/stepbystepbuild_sdk_2\n"
        },
        {
          "name": "box.json.dist",
          "type": "blob",
          "size": 1.6328125,
          "content": "{\n    \"banner\": [\n        \"This file is part of the Zephir.\",\n        \"\",\n        \"(c) Phalcon Team <team@zephir-lang.com>\",\n        \"\",\n        \"For the full copyright and license information, please view\",\n        \"the LICENSE file that was distributed with this source code.\"\n    ],\n    \"directories\": [\n       \"kernel\",\n       \"src\",\n       \"prototypes\",\n       \"templates\",\n       \"vendor\"\n    ],\n    \"files\": [\n        \"LICENSE\"\n    ],\n    \"blacklist\": [\n        \"ext\",\n        \"tests\",\n        \"stub\"\n    ],\n    \"finder\": [\n        {\n            \"in\": \"config\",\n            \"name\": \"*.*\"\n        },\n        {\n            \"in\": \"kernel\",\n            \"name\": \"*.*\"\n        },\n        {\n            \"in\": \"src\",\n            \"name\": \"*.*\"\n        },\n        {\n            \"in\": \"prototypes\",\n            \"name\": \"*.*\"\n        },\n        {\n            \"in\": \"templates\",\n            \"name\": \"*.*\"\n        },\n        {\n            \"in\": \"vendor\",\n            \"name\": \"*.php\",\n            \"exclude\": [\n                \"CHANGELOG\",\n                \"CONTRIBUTING\",\n                \"README\",\n                \"Tests\",\n                \"behat\",\n                \"ext\",\n                \"bin\",\n                \"build\",\n                \"doc\",\n                \"docs\",\n                \"doc-template\",\n                \"fixtures\",\n                \"test\",\n                \"tests\",\n                \"test_old\",\n                \"vendor-bin\"\n            ]\n        }\n    ],\n    \"compression\": \"GZ\",\n    \"compactors\": [\n        \"KevinGH\\\\Box\\\\Compactor\\\\Php\"\n    ],\n    \"replacement-sigil\": \"$\",\n    \"replacements\": {\n        \"kernel-environment\": \"prod\"\n    },\n    \"git-commit-short\": \"Id\"\n}\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.076171875,
          "content": "ignore:\n  - \"/usr/.*\"\n  - \".*/.phpenv/.*\"\n  - \"/home/travis/build/include/.*\"\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.5830078125,
          "content": "{\n    \"name\": \"phalcon/zephir\",\n    \"description\": \"Zephir is a compiled high level language aimed to the creation of C-extensions for PHP\",\n    \"keywords\": [\n        \"extension\",\n        \"zephir\",\n        \"phalcon\",\n        \"internals\"\n    ],\n    \"homepage\": \"https://zephir-lang.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Phalcon Team\",\n            \"email\": \"team@zephir-lang.com\",\n            \"homepage\": \"https://zephir-lang.com\"\n        },\n        {\n            \"name\": \"Contributors\",\n            \"homepage\": \"https://github.com/zephir-lang/zephir/graphs/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=8.0\",\n        \"ext-ctype\": \"*\",\n        \"ext-hash\": \"*\",\n        \"ext-mbstring\": \"*\",\n        \"ext-pcre\": \"*\",\n        \"ext-xml\": \"*\",\n        \"ext-zlib\": \"*\",\n        \"monolog/monolog\": \"^2.3\",\n        \"symfony/console\": \"^5.2\",\n        \"symfony/event-dispatcher\": \"^5.3\"\n    },\n    \"require-dev\": {\n        \"ext-gmp\": \"*\",\n        \"ext-pdo\": \"*\",\n        \"ext-pdo_sqlite\": \"*\",\n        \"ext-zip\": \"*\",\n        \"phpunit/phpunit\": \"9.5.28\",\n        \"psr/log\": \"1.1.*\",\n        \"squizlabs/php_codesniffer\": \"^3.7\"\n    },\n    \"config\": {\n        \"optimize-autoloader\": true,\n        \"platform\": {},\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Zephir\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Zephir\\\\Test\\\\\": \"tests/Zephir/\",\n            \"Extension\\\\\": \"tests/Extension/\"\n        },\n        \"classmap\": [\n            \"tests/fixtures/mocks/\"\n        ]\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"bin\": [\n        \"zephir\"\n    ],\n    \"support\": {\n        \"issues\": \"https://github.com/zephir-lang/zephir/issues?state=open\",\n        \"source\": \"https://github.com/zephir-lang/zephir\",\n        \"irc\": \"irc://irc.freenode.net/zephir\",\n        \"docs\": \"https://docs.zephir-lang.com\"\n    },\n  \"scripts\": {\n    \"cs\": \"./vendor/bin/phpcs --standard=phpcs.xml.dist\",\n    \"cs-fix\": \"./vendor/bin/phpcbf --standard=phpcs.xml.dist\",\n    \"test\": \"./vendor/bin/phpunit --testsuite Zephir\",\n    \"test-coverage\": \"./vendor/bin/phpunit --testsuite Zephir --coverage-php ./tests/output/coverage/coverage.xml\",\n    \"test-coverage-html\": \"./vendor/bin/phpunit --testsuite Zephir --coverage-html ./tests/output/coverage\"\n  },\n  \"scripts-descriptions\": {\n    \"cs\": \"Run PHPCS\",\n    \"cs-fix\": \"Run PHPCBF\",\n    \"test\": \"Run all tests\",\n    \"test-coverage\": \"Run all tests with coverage (clover)\",\n    \"test-coverage-html\": \"Run all tests with coverage (HTML)\"\n  }\n}\n"
        },
        {
          "name": "composer.lock",
          "type": "blob",
          "size": 108.2236328125,
          "content": "{\n    \"_readme\": [\n        \"This file locks the dependencies of your project to a known state\",\n        \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies\",\n        \"This file is @generated automatically\"\n    ],\n    \"content-hash\": \"5aed9ef439169bbcb782874f47e36e51\",\n    \"packages\": [\n        {\n            \"name\": \"monolog/monolog\",\n            \"version\": \"2.9.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/Seldaek/monolog.git\",\n                \"reference\": \"a30bfe2e142720dfa990d0a7e573997f5d884215\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/Seldaek/monolog/zipball/a30bfe2e142720dfa990d0a7e573997f5d884215\",\n                \"reference\": \"a30bfe2e142720dfa990d0a7e573997f5d884215\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2\",\n                \"psr/log\": \"^1.0.1 || ^2.0 || ^3.0\"\n            },\n            \"provide\": {\n                \"psr/log-implementation\": \"1.0.0 || 2.0.0 || 3.0.0\"\n            },\n            \"require-dev\": {\n                \"aws/aws-sdk-php\": \"^2.4.9 || ^3.0\",\n                \"doctrine/couchdb\": \"~1.0@dev\",\n                \"elasticsearch/elasticsearch\": \"^7 || ^8\",\n                \"ext-json\": \"*\",\n                \"graylog2/gelf-php\": \"^1.4.2 || ^2@dev\",\n                \"guzzlehttp/guzzle\": \"^7.4\",\n                \"guzzlehttp/psr7\": \"^2.2\",\n                \"mongodb/mongodb\": \"^1.8\",\n                \"php-amqplib/php-amqplib\": \"~2.4 || ^3\",\n                \"phpspec/prophecy\": \"^1.15\",\n                \"phpstan/phpstan\": \"^1.10\",\n                \"phpunit/phpunit\": \"^8.5.38 || ^9.6.19\",\n                \"predis/predis\": \"^1.1 || ^2.0\",\n                \"rollbar/rollbar\": \"^1.3 || ^2 || ^3\",\n                \"ruflin/elastica\": \"^7\",\n                \"swiftmailer/swiftmailer\": \"^5.3|^6.0\",\n                \"symfony/mailer\": \"^5.4 || ^6\",\n                \"symfony/mime\": \"^5.4 || ^6\"\n            },\n            \"suggest\": {\n                \"aws/aws-sdk-php\": \"Allow sending log messages to AWS services like DynamoDB\",\n                \"doctrine/couchdb\": \"Allow sending log messages to a CouchDB server\",\n                \"elasticsearch/elasticsearch\": \"Allow sending log messages to an Elasticsearch server via official client\",\n                \"ext-amqp\": \"Allow sending log messages to an AMQP server (1.0+ required)\",\n                \"ext-curl\": \"Required to send log messages using the IFTTTHandler, the LogglyHandler, the SendGridHandler, the SlackWebhookHandler or the TelegramBotHandler\",\n                \"ext-mbstring\": \"Allow to work properly with unicode symbols\",\n                \"ext-mongodb\": \"Allow sending log messages to a MongoDB server (via driver)\",\n                \"ext-openssl\": \"Required to send log messages using SSL\",\n                \"ext-sockets\": \"Allow sending log messages to a Syslog server (via UDP driver)\",\n                \"graylog2/gelf-php\": \"Allow sending log messages to a GrayLog2 server\",\n                \"mongodb/mongodb\": \"Allow sending log messages to a MongoDB server (via library)\",\n                \"php-amqplib/php-amqplib\": \"Allow sending log messages to an AMQP server using php-amqplib\",\n                \"rollbar/rollbar\": \"Allow sending log messages to Rollbar\",\n                \"ruflin/elastica\": \"Allow sending log messages to an Elastic Search server\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"2.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Monolog\\\\\": \"src/Monolog\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Jordi Boggiano\",\n                    \"email\": \"j.boggiano@seld.be\",\n                    \"homepage\": \"https://seld.be\"\n                }\n            ],\n            \"description\": \"Sends your logs to files, sockets, inboxes, databases and various web services\",\n            \"homepage\": \"https://github.com/Seldaek/monolog\",\n            \"keywords\": [\n                \"log\",\n                \"logging\",\n                \"psr-3\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/Seldaek/monolog/issues\",\n                \"source\": \"https://github.com/Seldaek/monolog/tree/2.9.3\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/Seldaek\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/monolog/monolog\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-04-12T20:52:51+00:00\"\n        },\n        {\n            \"name\": \"psr/container\",\n            \"version\": \"2.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/container.git\",\n                \"reference\": \"c71ecc56dfe541dbd90c5360474fbc405f8d5963\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/container/zipball/c71ecc56dfe541dbd90c5360474fbc405f8d5963\",\n                \"reference\": \"c71ecc56dfe541dbd90c5360474fbc405f8d5963\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.4.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Psr\\\\Container\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"https://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"Common Container Interface (PHP FIG PSR-11)\",\n            \"homepage\": \"https://github.com/php-fig/container\",\n            \"keywords\": [\n                \"PSR-11\",\n                \"container\",\n                \"container-interface\",\n                \"container-interop\",\n                \"psr\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/php-fig/container/issues\",\n                \"source\": \"https://github.com/php-fig/container/tree/2.0.2\"\n            },\n            \"time\": \"2021-11-05T16:47:00+00:00\"\n        },\n        {\n            \"name\": \"psr/event-dispatcher\",\n            \"version\": \"1.0.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/event-dispatcher.git\",\n                \"reference\": \"dbefd12671e8a14ec7f180cab83036ed26714bb0\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/event-dispatcher/zipball/dbefd12671e8a14ec7f180cab83036ed26714bb0\",\n                \"reference\": \"dbefd12671e8a14ec7f180cab83036ed26714bb0\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Psr\\\\EventDispatcher\\\\\": \"src/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"http://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"Standard interfaces for event handling.\",\n            \"keywords\": [\n                \"events\",\n                \"psr\",\n                \"psr-14\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/php-fig/event-dispatcher/issues\",\n                \"source\": \"https://github.com/php-fig/event-dispatcher/tree/1.0.0\"\n            },\n            \"time\": \"2019-01-08T18:20:26+00:00\"\n        },\n        {\n            \"name\": \"psr/log\",\n            \"version\": \"1.1.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/php-fig/log.git\",\n                \"reference\": \"d49695b909c3b7628b6289db5479a1c204601f11\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/php-fig/log/zipball/d49695b909c3b7628b6289db5479a1c204601f11\",\n                \"reference\": \"d49695b909c3b7628b6289db5479a1c204601f11\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.3.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.1.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Psr\\\\Log\\\\\": \"Psr/Log/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"PHP-FIG\",\n                    \"homepage\": \"https://www.php-fig.org/\"\n                }\n            ],\n            \"description\": \"Common interface for logging libraries\",\n            \"homepage\": \"https://github.com/php-fig/log\",\n            \"keywords\": [\n                \"log\",\n                \"psr\",\n                \"psr-3\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/php-fig/log/tree/1.1.4\"\n            },\n            \"time\": \"2021-05-03T11:20:27+00:00\"\n        },\n        {\n            \"name\": \"symfony/console\",\n            \"version\": \"v5.4.44\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/console.git\",\n                \"reference\": \"5b5a0aa66e3296e303e22490f90f521551835a83\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/console/zipball/5b5a0aa66e3296e303e22490f90f521551835a83\",\n                \"reference\": \"5b5a0aa66e3296e303e22490f90f521551835a83\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2.5\",\n                \"symfony/deprecation-contracts\": \"^2.1|^3\",\n                \"symfony/polyfill-mbstring\": \"~1.0\",\n                \"symfony/polyfill-php73\": \"^1.9\",\n                \"symfony/polyfill-php80\": \"^1.16\",\n                \"symfony/service-contracts\": \"^1.1|^2|^3\",\n                \"symfony/string\": \"^5.1|^6.0\"\n            },\n            \"conflict\": {\n                \"psr/log\": \">=3\",\n                \"symfony/dependency-injection\": \"<4.4\",\n                \"symfony/dotenv\": \"<5.1\",\n                \"symfony/event-dispatcher\": \"<4.4\",\n                \"symfony/lock\": \"<4.4\",\n                \"symfony/process\": \"<4.4\"\n            },\n            \"provide\": {\n                \"psr/log-implementation\": \"1.0|2.0\"\n            },\n            \"require-dev\": {\n                \"psr/log\": \"^1|^2\",\n                \"symfony/config\": \"^4.4|^5.0|^6.0\",\n                \"symfony/dependency-injection\": \"^4.4|^5.0|^6.0\",\n                \"symfony/event-dispatcher\": \"^4.4|^5.0|^6.0\",\n                \"symfony/lock\": \"^4.4|^5.0|^6.0\",\n                \"symfony/process\": \"^4.4|^5.0|^6.0\",\n                \"symfony/var-dumper\": \"^4.4|^5.0|^6.0\"\n            },\n            \"suggest\": {\n                \"psr/log\": \"For using the console logger\",\n                \"symfony/event-dispatcher\": \"\",\n                \"symfony/lock\": \"\",\n                \"symfony/process\": \"\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Console\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Eases the creation of beautiful and testable command line interfaces\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"cli\",\n                \"command-line\",\n                \"console\",\n                \"terminal\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/console/tree/v5.4.44\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-20T07:56:40+00:00\"\n        },\n        {\n            \"name\": \"symfony/deprecation-contracts\",\n            \"version\": \"v3.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/deprecation-contracts.git\",\n                \"reference\": \"26954b3d62a6c5fd0ea8a2a00c0353a14978d05c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/deprecation-contracts/zipball/26954b3d62a6c5fd0ea8a2a00c0353a14978d05c\",\n                \"reference\": \"26954b3d62a6c5fd0ea8a2a00c0353a14978d05c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.0.2\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"3.0-dev\"\n                },\n                \"thanks\": {\n                    \"name\": \"symfony/contracts\",\n                    \"url\": \"https://github.com/symfony/contracts\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"function.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"A generic function and convention to trigger deprecation notices\",\n            \"homepage\": \"https://symfony.com\",\n            \"support\": {\n                \"source\": \"https://github.com/symfony/deprecation-contracts/tree/v3.0.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2022-01-02T09:55:41+00:00\"\n        },\n        {\n            \"name\": \"symfony/event-dispatcher\",\n            \"version\": \"v5.4.40\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/event-dispatcher.git\",\n                \"reference\": \"a54e2a8a114065f31020d6a89ede83e34c3b27a4\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/event-dispatcher/zipball/a54e2a8a114065f31020d6a89ede83e34c3b27a4\",\n                \"reference\": \"a54e2a8a114065f31020d6a89ede83e34c3b27a4\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2.5\",\n                \"symfony/deprecation-contracts\": \"^2.1|^3\",\n                \"symfony/event-dispatcher-contracts\": \"^2|^3\",\n                \"symfony/polyfill-php80\": \"^1.16\"\n            },\n            \"conflict\": {\n                \"symfony/dependency-injection\": \"<4.4\"\n            },\n            \"provide\": {\n                \"psr/event-dispatcher-implementation\": \"1.0\",\n                \"symfony/event-dispatcher-implementation\": \"2.0\"\n            },\n            \"require-dev\": {\n                \"psr/log\": \"^1|^2|^3\",\n                \"symfony/config\": \"^4.4|^5.0|^6.0\",\n                \"symfony/dependency-injection\": \"^4.4|^5.0|^6.0\",\n                \"symfony/error-handler\": \"^4.4|^5.0|^6.0\",\n                \"symfony/expression-language\": \"^4.4|^5.0|^6.0\",\n                \"symfony/http-foundation\": \"^4.4|^5.0|^6.0\",\n                \"symfony/service-contracts\": \"^1.1|^2|^3\",\n                \"symfony/stopwatch\": \"^4.4|^5.0|^6.0\"\n            },\n            \"suggest\": {\n                \"symfony/dependency-injection\": \"\",\n                \"symfony/http-kernel\": \"\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\EventDispatcher\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Provides tools that allow your application components to communicate with each other by dispatching events and listening to them\",\n            \"homepage\": \"https://symfony.com\",\n            \"support\": {\n                \"source\": \"https://github.com/symfony/event-dispatcher/tree/v5.4.40\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-05-31T14:33:22+00:00\"\n        },\n        {\n            \"name\": \"symfony/event-dispatcher-contracts\",\n            \"version\": \"v3.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/event-dispatcher-contracts.git\",\n                \"reference\": \"7bc61cc2db649b4637d331240c5346dcc7708051\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/event-dispatcher-contracts/zipball/7bc61cc2db649b4637d331240c5346dcc7708051\",\n                \"reference\": \"7bc61cc2db649b4637d331240c5346dcc7708051\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.0.2\",\n                \"psr/event-dispatcher\": \"^1\"\n            },\n            \"suggest\": {\n                \"symfony/event-dispatcher-implementation\": \"\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"3.0-dev\"\n                },\n                \"thanks\": {\n                    \"name\": \"symfony/contracts\",\n                    \"url\": \"https://github.com/symfony/contracts\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Contracts\\\\EventDispatcher\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Generic abstractions related to dispatching event\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"abstractions\",\n                \"contracts\",\n                \"decoupling\",\n                \"interfaces\",\n                \"interoperability\",\n                \"standards\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/event-dispatcher-contracts/tree/v3.0.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2022-01-02T09:55:41+00:00\"\n        },\n        {\n            \"name\": \"symfony/polyfill-ctype\",\n            \"version\": \"v1.31.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/polyfill-ctype.git\",\n                \"reference\": \"a3cc8b044a6ea513310cbd48ef7333b384945638\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-ctype/zipball/a3cc8b044a6ea513310cbd48ef7333b384945638\",\n                \"reference\": \"a3cc8b044a6ea513310cbd48ef7333b384945638\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2\"\n            },\n            \"provide\": {\n                \"ext-ctype\": \"*\"\n            },\n            \"suggest\": {\n                \"ext-ctype\": \"For best performance\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"thanks\": {\n                    \"name\": \"symfony/polyfill\",\n                    \"url\": \"https://github.com/symfony/polyfill\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"bootstrap.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Polyfill\\\\Ctype\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Gert de Pagter\",\n                    \"email\": \"BackEndTea@gmail.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony polyfill for ctype functions\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"compatibility\",\n                \"ctype\",\n                \"polyfill\",\n                \"portable\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/polyfill-ctype/tree/v1.31.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-09T11:45:10+00:00\"\n        },\n        {\n            \"name\": \"symfony/polyfill-intl-grapheme\",\n            \"version\": \"v1.31.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/polyfill-intl-grapheme.git\",\n                \"reference\": \"b9123926e3b7bc2f98c02ad54f6a4b02b91a8abe\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-intl-grapheme/zipball/b9123926e3b7bc2f98c02ad54f6a4b02b91a8abe\",\n                \"reference\": \"b9123926e3b7bc2f98c02ad54f6a4b02b91a8abe\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2\"\n            },\n            \"suggest\": {\n                \"ext-intl\": \"For best performance\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"thanks\": {\n                    \"name\": \"symfony/polyfill\",\n                    \"url\": \"https://github.com/symfony/polyfill\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"bootstrap.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Polyfill\\\\Intl\\\\Grapheme\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony polyfill for intl's grapheme_* functions\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"compatibility\",\n                \"grapheme\",\n                \"intl\",\n                \"polyfill\",\n                \"portable\",\n                \"shim\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/polyfill-intl-grapheme/tree/v1.31.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-09T11:45:10+00:00\"\n        },\n        {\n            \"name\": \"symfony/polyfill-intl-normalizer\",\n            \"version\": \"v1.31.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/polyfill-intl-normalizer.git\",\n                \"reference\": \"3833d7255cc303546435cb650316bff708a1c75c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-intl-normalizer/zipball/3833d7255cc303546435cb650316bff708a1c75c\",\n                \"reference\": \"3833d7255cc303546435cb650316bff708a1c75c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2\"\n            },\n            \"suggest\": {\n                \"ext-intl\": \"For best performance\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"thanks\": {\n                    \"name\": \"symfony/polyfill\",\n                    \"url\": \"https://github.com/symfony/polyfill\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"bootstrap.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Polyfill\\\\Intl\\\\Normalizer\\\\\": \"\"\n                },\n                \"classmap\": [\n                    \"Resources/stubs\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony polyfill for intl's Normalizer class and related functions\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"compatibility\",\n                \"intl\",\n                \"normalizer\",\n                \"polyfill\",\n                \"portable\",\n                \"shim\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/polyfill-intl-normalizer/tree/v1.31.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-09T11:45:10+00:00\"\n        },\n        {\n            \"name\": \"symfony/polyfill-mbstring\",\n            \"version\": \"v1.31.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/polyfill-mbstring.git\",\n                \"reference\": \"85181ba99b2345b0ef10ce42ecac37612d9fd341\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-mbstring/zipball/85181ba99b2345b0ef10ce42ecac37612d9fd341\",\n                \"reference\": \"85181ba99b2345b0ef10ce42ecac37612d9fd341\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2\"\n            },\n            \"provide\": {\n                \"ext-mbstring\": \"*\"\n            },\n            \"suggest\": {\n                \"ext-mbstring\": \"For best performance\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"thanks\": {\n                    \"name\": \"symfony/polyfill\",\n                    \"url\": \"https://github.com/symfony/polyfill\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"bootstrap.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Polyfill\\\\Mbstring\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony polyfill for the Mbstring extension\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"compatibility\",\n                \"mbstring\",\n                \"polyfill\",\n                \"portable\",\n                \"shim\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/polyfill-mbstring/tree/v1.31.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-09T11:45:10+00:00\"\n        },\n        {\n            \"name\": \"symfony/polyfill-php73\",\n            \"version\": \"v1.31.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/polyfill-php73.git\",\n                \"reference\": \"0f68c03565dcaaf25a890667542e8bd75fe7e5bb\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-php73/zipball/0f68c03565dcaaf25a890667542e8bd75fe7e5bb\",\n                \"reference\": \"0f68c03565dcaaf25a890667542e8bd75fe7e5bb\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"thanks\": {\n                    \"name\": \"symfony/polyfill\",\n                    \"url\": \"https://github.com/symfony/polyfill\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"bootstrap.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Polyfill\\\\Php73\\\\\": \"\"\n                },\n                \"classmap\": [\n                    \"Resources/stubs\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony polyfill backporting some PHP 7.3+ features to lower PHP versions\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"compatibility\",\n                \"polyfill\",\n                \"portable\",\n                \"shim\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/polyfill-php73/tree/v1.31.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-09T11:45:10+00:00\"\n        },\n        {\n            \"name\": \"symfony/polyfill-php80\",\n            \"version\": \"v1.31.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/polyfill-php80.git\",\n                \"reference\": \"60328e362d4c2c802a54fcbf04f9d3fb892b4cf8\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/polyfill-php80/zipball/60328e362d4c2c802a54fcbf04f9d3fb892b4cf8\",\n                \"reference\": \"60328e362d4c2c802a54fcbf04f9d3fb892b4cf8\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"thanks\": {\n                    \"name\": \"symfony/polyfill\",\n                    \"url\": \"https://github.com/symfony/polyfill\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"bootstrap.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Polyfill\\\\Php80\\\\\": \"\"\n                },\n                \"classmap\": [\n                    \"Resources/stubs\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Ion Bazan\",\n                    \"email\": \"ion.bazan@gmail.com\"\n                },\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony polyfill backporting some PHP 8.0+ features to lower PHP versions\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"compatibility\",\n                \"polyfill\",\n                \"portable\",\n                \"shim\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/polyfill-php80/tree/v1.31.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-09T11:45:10+00:00\"\n        },\n        {\n            \"name\": \"symfony/service-contracts\",\n            \"version\": \"v3.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/service-contracts.git\",\n                \"reference\": \"d78d39c1599bd1188b8e26bb341da52c3c6d8a66\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/service-contracts/zipball/d78d39c1599bd1188b8e26bb341da52c3c6d8a66\",\n                \"reference\": \"d78d39c1599bd1188b8e26bb341da52c3c6d8a66\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.0.2\",\n                \"psr/container\": \"^2.0\"\n            },\n            \"conflict\": {\n                \"ext-psr\": \"<1.1|>=2\"\n            },\n            \"suggest\": {\n                \"symfony/service-implementation\": \"\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"3.0-dev\"\n                },\n                \"thanks\": {\n                    \"name\": \"symfony/contracts\",\n                    \"url\": \"https://github.com/symfony/contracts\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Contracts\\\\Service\\\\\": \"\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Generic abstractions related to writing services\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"abstractions\",\n                \"contracts\",\n                \"decoupling\",\n                \"interfaces\",\n                \"interoperability\",\n                \"standards\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/service-contracts/tree/v3.0.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2022-05-30T19:17:58+00:00\"\n        },\n        {\n            \"name\": \"symfony/string\",\n            \"version\": \"v6.0.19\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/string.git\",\n                \"reference\": \"d9e72497367c23e08bf94176d2be45b00a9d232a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/string/zipball/d9e72497367c23e08bf94176d2be45b00a9d232a\",\n                \"reference\": \"d9e72497367c23e08bf94176d2be45b00a9d232a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=8.0.2\",\n                \"symfony/polyfill-ctype\": \"~1.8\",\n                \"symfony/polyfill-intl-grapheme\": \"~1.0\",\n                \"symfony/polyfill-intl-normalizer\": \"~1.0\",\n                \"symfony/polyfill-mbstring\": \"~1.0\"\n            },\n            \"conflict\": {\n                \"symfony/translation-contracts\": \"<2.0\"\n            },\n            \"require-dev\": {\n                \"symfony/error-handler\": \"^5.4|^6.0\",\n                \"symfony/http-client\": \"^5.4|^6.0\",\n                \"symfony/translation-contracts\": \"^2.0|^3.0\",\n                \"symfony/var-exporter\": \"^5.4|^6.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"Resources/functions.php\"\n                ],\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\String\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nicolas Grekas\",\n                    \"email\": \"p@tchwork.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Provides an object-oriented API to strings and deals with bytes, UTF-8 code points and grapheme clusters in a unified way\",\n            \"homepage\": \"https://symfony.com\",\n            \"keywords\": [\n                \"grapheme\",\n                \"i18n\",\n                \"string\",\n                \"unicode\",\n                \"utf-8\",\n                \"utf8\"\n            ],\n            \"support\": {\n                \"source\": \"https://github.com/symfony/string/tree/v6.0.19\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://symfony.com/sponsor\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/fabpot\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2023-01-01T08:36:10+00:00\"\n        }\n    ],\n    \"packages-dev\": [\n        {\n            \"name\": \"doctrine/instantiator\",\n            \"version\": \"1.5.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/doctrine/instantiator.git\",\n                \"reference\": \"0a0fa9780f5d4e507415a065172d26a98d02047b\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/doctrine/instantiator/zipball/0a0fa9780f5d4e507415a065172d26a98d02047b\",\n                \"reference\": \"0a0fa9780f5d4e507415a065172d26a98d02047b\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.1 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"doctrine/coding-standard\": \"^9 || ^11\",\n                \"ext-pdo\": \"*\",\n                \"ext-phar\": \"*\",\n                \"phpbench/phpbench\": \"^0.16 || ^1\",\n                \"phpstan/phpstan\": \"^1.4\",\n                \"phpstan/phpstan-phpunit\": \"^1\",\n                \"phpunit/phpunit\": \"^7.5 || ^8.5 || ^9.5\",\n                \"vimeo/psalm\": \"^4.30 || ^5.4\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Doctrine\\\\Instantiator\\\\\": \"src/Doctrine/Instantiator/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Marco Pivetta\",\n                    \"email\": \"ocramius@gmail.com\",\n                    \"homepage\": \"https://ocramius.github.io/\"\n                }\n            ],\n            \"description\": \"A small, lightweight utility to instantiate objects in PHP without invoking their constructors\",\n            \"homepage\": \"https://www.doctrine-project.org/projects/instantiator.html\",\n            \"keywords\": [\n                \"constructor\",\n                \"instantiate\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/doctrine/instantiator/issues\",\n                \"source\": \"https://github.com/doctrine/instantiator/tree/1.5.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://www.doctrine-project.org/sponsorship.html\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://www.patreon.com/phpdoctrine\",\n                    \"type\": \"patreon\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/doctrine%2Finstantiator\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2022-12-30T00:15:36+00:00\"\n        },\n        {\n            \"name\": \"myclabs/deep-copy\",\n            \"version\": \"1.12.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/myclabs/DeepCopy.git\",\n                \"reference\": \"3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/myclabs/DeepCopy/zipball/3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c\",\n                \"reference\": \"3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.1 || ^8.0\"\n            },\n            \"conflict\": {\n                \"doctrine/collections\": \"<1.6.8\",\n                \"doctrine/common\": \"<2.13.3 || >=3 <3.2.2\"\n            },\n            \"require-dev\": {\n                \"doctrine/collections\": \"^1.6.8\",\n                \"doctrine/common\": \"^2.13.3 || ^3.2.2\",\n                \"phpspec/prophecy\": \"^1.10\",\n                \"phpunit/phpunit\": \"^7.5.20 || ^8.5.23 || ^9.5.13\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"src/DeepCopy/deep_copy.php\"\n                ],\n                \"psr-4\": {\n                    \"DeepCopy\\\\\": \"src/DeepCopy/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"description\": \"Create deep copies (clones) of your objects\",\n            \"keywords\": [\n                \"clone\",\n                \"copy\",\n                \"duplicate\",\n                \"object\",\n                \"object graph\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/myclabs/DeepCopy/issues\",\n                \"source\": \"https://github.com/myclabs/DeepCopy/tree/1.12.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/myclabs/deep-copy\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-06-12T14:39:25+00:00\"\n        },\n        {\n            \"name\": \"nikic/php-parser\",\n            \"version\": \"v5.3.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/nikic/PHP-Parser.git\",\n                \"reference\": \"3abf7425cd284141dc5d8d14a9ee444de3345d1a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/nikic/PHP-Parser/zipball/3abf7425cd284141dc5d8d14a9ee444de3345d1a\",\n                \"reference\": \"3abf7425cd284141dc5d8d14a9ee444de3345d1a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-ctype\": \"*\",\n                \"ext-json\": \"*\",\n                \"ext-tokenizer\": \"*\",\n                \"php\": \">=7.4\"\n            },\n            \"require-dev\": {\n                \"ircmaxell/php-yacc\": \"^0.0.7\",\n                \"phpunit/phpunit\": \"^9.0\"\n            },\n            \"bin\": [\n                \"bin/php-parse\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"5.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"PhpParser\\\\\": \"lib/PhpParser\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nikita Popov\"\n                }\n            ],\n            \"description\": \"A PHP parser written in PHP\",\n            \"keywords\": [\n                \"parser\",\n                \"php\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/nikic/PHP-Parser/issues\",\n                \"source\": \"https://github.com/nikic/PHP-Parser/tree/v5.3.0\"\n            },\n            \"time\": \"2024-09-29T13:56:26+00:00\"\n        },\n        {\n            \"name\": \"phar-io/manifest\",\n            \"version\": \"2.0.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phar-io/manifest.git\",\n                \"reference\": \"54750ef60c58e43759730615a392c31c80e23176\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phar-io/manifest/zipball/54750ef60c58e43759730615a392c31c80e23176\",\n                \"reference\": \"54750ef60c58e43759730615a392c31c80e23176\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-libxml\": \"*\",\n                \"ext-phar\": \"*\",\n                \"ext-xmlwriter\": \"*\",\n                \"phar-io/version\": \"^3.0.1\",\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Arne Blankerts\",\n                    \"email\": \"arne@blankerts.de\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Sebastian Heuer\",\n                    \"email\": \"sebastian@phpeople.de\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"Component for reading phar.io manifest information from a PHP Archive (PHAR)\",\n            \"support\": {\n                \"issues\": \"https://github.com/phar-io/manifest/issues\",\n                \"source\": \"https://github.com/phar-io/manifest/tree/2.0.4\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/theseer\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-03-03T12:33:53+00:00\"\n        },\n        {\n            \"name\": \"phar-io/version\",\n            \"version\": \"3.2.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phar-io/version.git\",\n                \"reference\": \"4f7fd7836c6f332bb2933569e566a0d6c4cbed74\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phar-io/version/zipball/4f7fd7836c6f332bb2933569e566a0d6c4cbed74\",\n                \"reference\": \"4f7fd7836c6f332bb2933569e566a0d6c4cbed74\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Arne Blankerts\",\n                    \"email\": \"arne@blankerts.de\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Sebastian Heuer\",\n                    \"email\": \"sebastian@phpeople.de\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"Library for handling version information and constraints\",\n            \"support\": {\n                \"issues\": \"https://github.com/phar-io/version/issues\",\n                \"source\": \"https://github.com/phar-io/version/tree/3.2.1\"\n            },\n            \"time\": \"2022-02-21T01:04:05+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-code-coverage\",\n            \"version\": \"9.2.32\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-code-coverage.git\",\n                \"reference\": \"85402a822d1ecf1db1096959413d35e1c37cf1a5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/85402a822d1ecf1db1096959413d35e1c37cf1a5\",\n                \"reference\": \"85402a822d1ecf1db1096959413d35e1c37cf1a5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-libxml\": \"*\",\n                \"ext-xmlwriter\": \"*\",\n                \"nikic/php-parser\": \"^4.19.1 || ^5.1.0\",\n                \"php\": \">=7.3\",\n                \"phpunit/php-file-iterator\": \"^3.0.6\",\n                \"phpunit/php-text-template\": \"^2.0.4\",\n                \"sebastian/code-unit-reverse-lookup\": \"^2.0.3\",\n                \"sebastian/complexity\": \"^2.0.3\",\n                \"sebastian/environment\": \"^5.1.5\",\n                \"sebastian/lines-of-code\": \"^1.0.4\",\n                \"sebastian/version\": \"^3.0.2\",\n                \"theseer/tokenizer\": \"^1.2.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.6\"\n            },\n            \"suggest\": {\n                \"ext-pcov\": \"PHP extension that provides line coverage\",\n                \"ext-xdebug\": \"PHP extension that provides line coverage as well as branch and path coverage\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"9.2.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library that provides collection, processing, and rendering functionality for PHP code coverage information.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-code-coverage\",\n            \"keywords\": [\n                \"coverage\",\n                \"testing\",\n                \"xunit\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/php-code-coverage/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/php-code-coverage/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/php-code-coverage/tree/9.2.32\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-08-22T04:23:01+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-file-iterator\",\n            \"version\": \"3.0.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-file-iterator.git\",\n                \"reference\": \"cf1c2e7c203ac650e352f4cc675a7021e7d1b3cf\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/cf1c2e7c203ac650e352f4cc675a7021e7d1b3cf\",\n                \"reference\": \"cf1c2e7c203ac650e352f4cc675a7021e7d1b3cf\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"FilterIterator implementation that filters files based on a list of suffixes.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-file-iterator/\",\n            \"keywords\": [\n                \"filesystem\",\n                \"iterator\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/php-file-iterator/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/php-file-iterator/tree/3.0.6\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2021-12-02T12:48:52+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-invoker\",\n            \"version\": \"3.1.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-invoker.git\",\n                \"reference\": \"5a10147d0aaf65b58940a0b72f71c9ac0423cc67\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-invoker/zipball/5a10147d0aaf65b58940a0b72f71c9ac0423cc67\",\n                \"reference\": \"5a10147d0aaf65b58940a0b72f71c9ac0423cc67\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"ext-pcntl\": \"*\",\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"suggest\": {\n                \"ext-pcntl\": \"*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.1-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Invoke callables with a timeout\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-invoker/\",\n            \"keywords\": [\n                \"process\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/php-invoker/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/php-invoker/tree/3.1.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2020-09-28T05:58:55+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-text-template\",\n            \"version\": \"2.0.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-text-template.git\",\n                \"reference\": \"5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28\",\n                \"reference\": \"5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Simple template engine.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-text-template/\",\n            \"keywords\": [\n                \"template\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/php-text-template/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/php-text-template/tree/2.0.4\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2020-10-26T05:33:50+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-timer\",\n            \"version\": \"5.0.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-timer.git\",\n                \"reference\": \"5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-timer/zipball/5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2\",\n                \"reference\": \"5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"5.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Utility class for timing\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-timer/\",\n            \"keywords\": [\n                \"timer\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/php-timer/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/php-timer/tree/5.0.3\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2020-10-26T13:16:10+00:00\"\n        },\n        {\n            \"name\": \"phpunit/phpunit\",\n            \"version\": \"9.5.28\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/phpunit.git\",\n                \"reference\": \"954ca3113a03bf780d22f07bf055d883ee04b65e\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/phpunit/zipball/954ca3113a03bf780d22f07bf055d883ee04b65e\",\n                \"reference\": \"954ca3113a03bf780d22f07bf055d883ee04b65e\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"doctrine/instantiator\": \"^1.3.1 || ^2\",\n                \"ext-dom\": \"*\",\n                \"ext-json\": \"*\",\n                \"ext-libxml\": \"*\",\n                \"ext-mbstring\": \"*\",\n                \"ext-xml\": \"*\",\n                \"ext-xmlwriter\": \"*\",\n                \"myclabs/deep-copy\": \"^1.10.1\",\n                \"phar-io/manifest\": \"^2.0.3\",\n                \"phar-io/version\": \"^3.0.2\",\n                \"php\": \">=7.3\",\n                \"phpunit/php-code-coverage\": \"^9.2.13\",\n                \"phpunit/php-file-iterator\": \"^3.0.5\",\n                \"phpunit/php-invoker\": \"^3.1.1\",\n                \"phpunit/php-text-template\": \"^2.0.3\",\n                \"phpunit/php-timer\": \"^5.0.2\",\n                \"sebastian/cli-parser\": \"^1.0.1\",\n                \"sebastian/code-unit\": \"^1.0.6\",\n                \"sebastian/comparator\": \"^4.0.8\",\n                \"sebastian/diff\": \"^4.0.3\",\n                \"sebastian/environment\": \"^5.1.3\",\n                \"sebastian/exporter\": \"^4.0.5\",\n                \"sebastian/global-state\": \"^5.0.1\",\n                \"sebastian/object-enumerator\": \"^4.0.3\",\n                \"sebastian/resource-operations\": \"^3.0.3\",\n                \"sebastian/type\": \"^3.2\",\n                \"sebastian/version\": \"^3.0.2\"\n            },\n            \"suggest\": {\n                \"ext-soap\": \"*\",\n                \"ext-xdebug\": \"*\"\n            },\n            \"bin\": [\n                \"phpunit\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"9.5-dev\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"src/Framework/Assert/Functions.php\"\n                ],\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"The PHP Unit Testing framework.\",\n            \"homepage\": \"https://phpunit.de/\",\n            \"keywords\": [\n                \"phpunit\",\n                \"testing\",\n                \"xunit\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/phpunit/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/phpunit/tree/9.5.28\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://phpunit.de/sponsors.html\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/phpunit/phpunit\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2023-01-14T12:32:24+00:00\"\n        },\n        {\n            \"name\": \"sebastian/cli-parser\",\n            \"version\": \"1.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/cli-parser.git\",\n                \"reference\": \"2b56bea83a09de3ac06bb18b92f068e60cc6f50b\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/cli-parser/zipball/2b56bea83a09de3ac06bb18b92f068e60cc6f50b\",\n                \"reference\": \"2b56bea83a09de3ac06bb18b92f068e60cc6f50b\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library for parsing CLI options\",\n            \"homepage\": \"https://github.com/sebastianbergmann/cli-parser\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/cli-parser/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/cli-parser/tree/1.0.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-03-02T06:27:43+00:00\"\n        },\n        {\n            \"name\": \"sebastian/code-unit\",\n            \"version\": \"1.0.8\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/code-unit.git\",\n                \"reference\": \"1fc9f64c0927627ef78ba436c9b17d967e68e120\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/code-unit/zipball/1fc9f64c0927627ef78ba436c9b17d967e68e120\",\n                \"reference\": \"1fc9f64c0927627ef78ba436c9b17d967e68e120\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Collection of value objects that represent the PHP code units\",\n            \"homepage\": \"https://github.com/sebastianbergmann/code-unit\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/code-unit/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/code-unit/tree/1.0.8\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2020-10-26T13:08:54+00:00\"\n        },\n        {\n            \"name\": \"sebastian/code-unit-reverse-lookup\",\n            \"version\": \"2.0.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup.git\",\n                \"reference\": \"ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5\",\n                \"reference\": \"ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Looks up which function or method a line of code belongs to\",\n            \"homepage\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup/\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup/tree/2.0.3\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2020-09-28T05:30:19+00:00\"\n        },\n        {\n            \"name\": \"sebastian/comparator\",\n            \"version\": \"4.0.8\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/comparator.git\",\n                \"reference\": \"fa0f136dd2334583309d32b62544682ee972b51a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/comparator/zipball/fa0f136dd2334583309d32b62544682ee972b51a\",\n                \"reference\": \"fa0f136dd2334583309d32b62544682ee972b51a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\",\n                \"sebastian/diff\": \"^4.0\",\n                \"sebastian/exporter\": \"^4.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"4.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                },\n                {\n                    \"name\": \"Jeff Welch\",\n                    \"email\": \"whatthejeff@gmail.com\"\n                },\n                {\n                    \"name\": \"Volker Dusch\",\n                    \"email\": \"github@wallbash.com\"\n                },\n                {\n                    \"name\": \"Bernhard Schussek\",\n                    \"email\": \"bschussek@2bepublished.at\"\n                }\n            ],\n            \"description\": \"Provides the functionality to compare PHP values for equality\",\n            \"homepage\": \"https://github.com/sebastianbergmann/comparator\",\n            \"keywords\": [\n                \"comparator\",\n                \"compare\",\n                \"equality\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/comparator/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/comparator/tree/4.0.8\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2022-09-14T12:41:17+00:00\"\n        },\n        {\n            \"name\": \"sebastian/complexity\",\n            \"version\": \"2.0.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/complexity.git\",\n                \"reference\": \"25f207c40d62b8b7aa32f5ab026c53561964053a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/complexity/zipball/25f207c40d62b8b7aa32f5ab026c53561964053a\",\n                \"reference\": \"25f207c40d62b8b7aa32f5ab026c53561964053a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"nikic/php-parser\": \"^4.18 || ^5.0\",\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library for calculating the complexity of PHP code units\",\n            \"homepage\": \"https://github.com/sebastianbergmann/complexity\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/complexity/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/complexity/tree/2.0.3\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2023-12-22T06:19:30+00:00\"\n        },\n        {\n            \"name\": \"sebastian/diff\",\n            \"version\": \"4.0.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/diff.git\",\n                \"reference\": \"ba01945089c3a293b01ba9badc29ad55b106b0bc\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/diff/zipball/ba01945089c3a293b01ba9badc29ad55b106b0bc\",\n                \"reference\": \"ba01945089c3a293b01ba9badc29ad55b106b0bc\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\",\n                \"symfony/process\": \"^4.2 || ^5\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"4.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                },\n                {\n                    \"name\": \"Kore Nordmann\",\n                    \"email\": \"mail@kore-nordmann.de\"\n                }\n            ],\n            \"description\": \"Diff implementation\",\n            \"homepage\": \"https://github.com/sebastianbergmann/diff\",\n            \"keywords\": [\n                \"diff\",\n                \"udiff\",\n                \"unidiff\",\n                \"unified diff\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/diff/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/diff/tree/4.0.6\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-03-02T06:30:58+00:00\"\n        },\n        {\n            \"name\": \"sebastian/environment\",\n            \"version\": \"5.1.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/environment.git\",\n                \"reference\": \"830c43a844f1f8d5b7a1f6d6076b784454d8b7ed\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/environment/zipball/830c43a844f1f8d5b7a1f6d6076b784454d8b7ed\",\n                \"reference\": \"830c43a844f1f8d5b7a1f6d6076b784454d8b7ed\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"suggest\": {\n                \"ext-posix\": \"*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"5.1-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Provides functionality to handle HHVM/PHP environments\",\n            \"homepage\": \"http://www.github.com/sebastianbergmann/environment\",\n            \"keywords\": [\n                \"Xdebug\",\n                \"environment\",\n                \"hhvm\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/environment/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/environment/tree/5.1.5\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2023-02-03T06:03:51+00:00\"\n        },\n        {\n            \"name\": \"sebastian/exporter\",\n            \"version\": \"4.0.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/exporter.git\",\n                \"reference\": \"78c00df8f170e02473b682df15bfcdacc3d32d72\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/exporter/zipball/78c00df8f170e02473b682df15bfcdacc3d32d72\",\n                \"reference\": \"78c00df8f170e02473b682df15bfcdacc3d32d72\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\",\n                \"sebastian/recursion-context\": \"^4.0\"\n            },\n            \"require-dev\": {\n                \"ext-mbstring\": \"*\",\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"4.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                },\n                {\n                    \"name\": \"Jeff Welch\",\n                    \"email\": \"whatthejeff@gmail.com\"\n                },\n                {\n                    \"name\": \"Volker Dusch\",\n                    \"email\": \"github@wallbash.com\"\n                },\n                {\n                    \"name\": \"Adam Harvey\",\n                    \"email\": \"aharvey@php.net\"\n                },\n                {\n                    \"name\": \"Bernhard Schussek\",\n                    \"email\": \"bschussek@gmail.com\"\n                }\n            ],\n            \"description\": \"Provides the functionality to export PHP variables for visualization\",\n            \"homepage\": \"https://www.github.com/sebastianbergmann/exporter\",\n            \"keywords\": [\n                \"export\",\n                \"exporter\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/exporter/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/exporter/tree/4.0.6\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-03-02T06:33:00+00:00\"\n        },\n        {\n            \"name\": \"sebastian/global-state\",\n            \"version\": \"5.0.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/global-state.git\",\n                \"reference\": \"bca7df1f32ee6fe93b4d4a9abbf69e13a4ada2c9\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/global-state/zipball/bca7df1f32ee6fe93b4d4a9abbf69e13a4ada2c9\",\n                \"reference\": \"bca7df1f32ee6fe93b4d4a9abbf69e13a4ada2c9\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\",\n                \"sebastian/object-reflector\": \"^2.0\",\n                \"sebastian/recursion-context\": \"^4.0\"\n            },\n            \"require-dev\": {\n                \"ext-dom\": \"*\",\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"suggest\": {\n                \"ext-uopz\": \"*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"5.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Snapshotting of global state\",\n            \"homepage\": \"http://www.github.com/sebastianbergmann/global-state\",\n            \"keywords\": [\n                \"global state\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/global-state/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/global-state/tree/5.0.7\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-03-02T06:35:11+00:00\"\n        },\n        {\n            \"name\": \"sebastian/lines-of-code\",\n            \"version\": \"1.0.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/lines-of-code.git\",\n                \"reference\": \"e1e4a170560925c26d424b6a03aed157e7dcc5c5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/lines-of-code/zipball/e1e4a170560925c26d424b6a03aed157e7dcc5c5\",\n                \"reference\": \"e1e4a170560925c26d424b6a03aed157e7dcc5c5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"nikic/php-parser\": \"^4.18 || ^5.0\",\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library for counting the lines of code in PHP source code\",\n            \"homepage\": \"https://github.com/sebastianbergmann/lines-of-code\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/lines-of-code/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/lines-of-code/tree/1.0.4\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2023-12-22T06:20:34+00:00\"\n        },\n        {\n            \"name\": \"sebastian/object-enumerator\",\n            \"version\": \"4.0.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/object-enumerator.git\",\n                \"reference\": \"5c9eeac41b290a3712d88851518825ad78f45c71\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/5c9eeac41b290a3712d88851518825ad78f45c71\",\n                \"reference\": \"5c9eeac41b290a3712d88851518825ad78f45c71\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\",\n                \"sebastian/object-reflector\": \"^2.0\",\n                \"sebastian/recursion-context\": \"^4.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"4.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Traverses array structures and object graphs to enumerate all referenced objects\",\n            \"homepage\": \"https://github.com/sebastianbergmann/object-enumerator/\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/object-enumerator/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/object-enumerator/tree/4.0.4\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2020-10-26T13:12:34+00:00\"\n        },\n        {\n            \"name\": \"sebastian/object-reflector\",\n            \"version\": \"2.0.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/object-reflector.git\",\n                \"reference\": \"b4f479ebdbf63ac605d183ece17d8d7fe49c15c7\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/b4f479ebdbf63ac605d183ece17d8d7fe49c15c7\",\n                \"reference\": \"b4f479ebdbf63ac605d183ece17d8d7fe49c15c7\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Allows reflection of object attributes, including inherited and non-public ones\",\n            \"homepage\": \"https://github.com/sebastianbergmann/object-reflector/\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/object-reflector/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/object-reflector/tree/2.0.4\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2020-10-26T13:14:26+00:00\"\n        },\n        {\n            \"name\": \"sebastian/recursion-context\",\n            \"version\": \"4.0.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/recursion-context.git\",\n                \"reference\": \"e75bd0f07204fec2a0af9b0f3cfe97d05f92efc1\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/e75bd0f07204fec2a0af9b0f3cfe97d05f92efc1\",\n                \"reference\": \"e75bd0f07204fec2a0af9b0f3cfe97d05f92efc1\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"4.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                },\n                {\n                    \"name\": \"Jeff Welch\",\n                    \"email\": \"whatthejeff@gmail.com\"\n                },\n                {\n                    \"name\": \"Adam Harvey\",\n                    \"email\": \"aharvey@php.net\"\n                }\n            ],\n            \"description\": \"Provides functionality to recursively process PHP variables\",\n            \"homepage\": \"https://github.com/sebastianbergmann/recursion-context\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/recursion-context/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/recursion-context/tree/4.0.5\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2023-02-03T06:07:39+00:00\"\n        },\n        {\n            \"name\": \"sebastian/resource-operations\",\n            \"version\": \"3.0.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/resource-operations.git\",\n                \"reference\": \"05d5692a7993ecccd56a03e40cd7e5b09b1d404e\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/05d5692a7993ecccd56a03e40cd7e5b09b1d404e\",\n                \"reference\": \"05d5692a7993ecccd56a03e40cd7e5b09b1d404e\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Provides a list of PHP built-in functions that operate on resources\",\n            \"homepage\": \"https://www.github.com/sebastianbergmann/resource-operations\",\n            \"support\": {\n                \"source\": \"https://github.com/sebastianbergmann/resource-operations/tree/3.0.4\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-03-14T16:00:52+00:00\"\n        },\n        {\n            \"name\": \"sebastian/type\",\n            \"version\": \"3.2.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/type.git\",\n                \"reference\": \"75e2c2a32f5e0b3aef905b9ed0b179b953b3d7c7\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/type/zipball/75e2c2a32f5e0b3aef905b9ed0b179b953b3d7c7\",\n                \"reference\": \"75e2c2a32f5e0b3aef905b9ed0b179b953b3d7c7\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.5\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.2-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Collection of value objects that represent the types of the PHP type system\",\n            \"homepage\": \"https://github.com/sebastianbergmann/type\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/type/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/type/tree/3.2.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2023-02-03T06:13:03+00:00\"\n        },\n        {\n            \"name\": \"sebastian/version\",\n            \"version\": \"3.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/version.git\",\n                \"reference\": \"c6c1022351a901512170118436c764e473f6de8c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/version/zipball/c6c1022351a901512170118436c764e473f6de8c\",\n                \"reference\": \"c6c1022351a901512170118436c764e473f6de8c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library that helps with managing the version number of Git-hosted PHP projects\",\n            \"homepage\": \"https://github.com/sebastianbergmann/version\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/version/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/version/tree/3.0.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2020-09-28T06:39:44+00:00\"\n        },\n        {\n            \"name\": \"squizlabs/php_codesniffer\",\n            \"version\": \"3.10.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/PHPCSStandards/PHP_CodeSniffer.git\",\n                \"reference\": \"62d32998e820bddc40f99f8251958aed187a5c9c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/PHPCSStandards/PHP_CodeSniffer/zipball/62d32998e820bddc40f99f8251958aed187a5c9c\",\n                \"reference\": \"62d32998e820bddc40f99f8251958aed187a5c9c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-simplexml\": \"*\",\n                \"ext-tokenizer\": \"*\",\n                \"ext-xmlwriter\": \"*\",\n                \"php\": \">=5.4.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^4.0 || ^5.0 || ^6.0 || ^7.0 || ^8.0 || ^9.3.4\"\n            },\n            \"bin\": [\n                \"bin/phpcbf\",\n                \"bin/phpcs\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.x-dev\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Greg Sherwood\",\n                    \"role\": \"Former lead\"\n                },\n                {\n                    \"name\": \"Juliette Reinders Folmer\",\n                    \"role\": \"Current lead\"\n                },\n                {\n                    \"name\": \"Contributors\",\n                    \"homepage\": \"https://github.com/PHPCSStandards/PHP_CodeSniffer/graphs/contributors\"\n                }\n            ],\n            \"description\": \"PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards.\",\n            \"homepage\": \"https://github.com/PHPCSStandards/PHP_CodeSniffer\",\n            \"keywords\": [\n                \"phpcs\",\n                \"standards\",\n                \"static analysis\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/PHPCSStandards/PHP_CodeSniffer/issues\",\n                \"security\": \"https://github.com/PHPCSStandards/PHP_CodeSniffer/security/policy\",\n                \"source\": \"https://github.com/PHPCSStandards/PHP_CodeSniffer\",\n                \"wiki\": \"https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/PHPCSStandards\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://github.com/jrfnl\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://opencollective.com/php_codesniffer\",\n                    \"type\": \"open_collective\"\n                }\n            ],\n            \"time\": \"2024-09-18T10:38:58+00:00\"\n        },\n        {\n            \"name\": \"theseer/tokenizer\",\n            \"version\": \"1.2.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/theseer/tokenizer.git\",\n                \"reference\": \"737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/theseer/tokenizer/zipball/737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2\",\n                \"reference\": \"737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-tokenizer\": \"*\",\n                \"ext-xmlwriter\": \"*\",\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Arne Blankerts\",\n                    \"email\": \"arne@blankerts.de\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"A small library for converting tokenized PHP source code into XML and potentially other formats\",\n            \"support\": {\n                \"issues\": \"https://github.com/theseer/tokenizer/issues\",\n                \"source\": \"https://github.com/theseer/tokenizer/tree/1.2.3\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/theseer\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-03-03T12:36:25+00:00\"\n        }\n    ],\n    \"aliases\": [],\n    \"minimum-stability\": \"dev\",\n    \"stability-flags\": [],\n    \"prefer-stable\": true,\n    \"prefer-lowest\": false,\n    \"platform\": {\n        \"php\": \">=8.0\",\n        \"ext-ctype\": \"*\",\n        \"ext-hash\": \"*\",\n        \"ext-mbstring\": \"*\",\n        \"ext-pcre\": \"*\",\n        \"ext-xml\": \"*\",\n        \"ext-zlib\": \"*\"\n    },\n    \"platform-dev\": {\n        \"ext-gmp\": \"*\",\n        \"ext-pdo\": \"*\",\n        \"ext-pdo_sqlite\": \"*\",\n        \"ext-zip\": \"*\"\n    },\n    \"plugin-api-version\": \"2.6.0\"\n}\n"
        },
        {
          "name": "config.json",
          "type": "blob",
          "size": 4.021484375,
          "content": "{\n  \"namespace\": \"stub\",\n  \"name\": \"Test Extension\",\n  \"description\": \"Description <b>test</b> for<br\\/>Test Extension.\",\n  \"author\": \"Phalcon Team and contributors\",\n  \"version\": \"1.0.0\",\n  \"verbose\": true,\n  \"requires\": {\n    \"extensions\": [\n      \"PDO\",\n      \"SPL\",\n      \"standard\",\n      \"hash\",\n      \"json\"\n    ]\n  },\n  \"stubs\": {\n    \"path\": \"ide\\/%version%\\/%namespace%\\/\",\n    \"stubs-run-after-generate\": false,\n    \"banner\": \"/**\\n * This file is part of the Zephir.\\n *\\n * (c) Phalcon Team <team@zephir-lang.com>\\n *\\n * For the full copyright and license information, please view\\n * the LICENSE file that was distributed with this source code.\\n */\"\n  },\n  \"api\": {\n    \"path\": \"doc/%version%\",\n    \"theme\": {\n      \"name\": \"zephir\",\n      \"options\": {\n        \"github\": \"https://github.com/user/repo\",\n        \"analytics\": null,\n        \"main_color\": \"#3E6496\",\n        \"link_color\": \"#3E6496\",\n        \"link_hover_color\": \"#5F9AE7\"\n      }\n    }\n  },\n  \"warnings\": {\n    \"unused-variable\": true,\n    \"unused-variable-external\": false,\n    \"possible-wrong-parameter\": true,\n    \"possible-wrong-parameter-undefined\": false,\n    \"nonexistent-function\": true,\n    \"nonexistent-class\": true,\n    \"non-valid-isset\": true,\n    \"non-array-update\": true,\n    \"non-valid-objectupdate\": true,\n    \"non-valid-fetch\": true,\n    \"invalid-array-index\": true,\n    \"non-array-append\": true,\n    \"invalid-return-type\": true,\n    \"unreachable-code\": true,\n    \"nonexistent-constant\": true,\n    \"not-supported-magic-constant\": true,\n    \"non-valid-decrement\": true,\n    \"non-valid-increment\": true,\n    \"non-valid-clone\": true,\n    \"non-valid-new\": true,\n    \"non-array-access\": true,\n    \"invalid-reference\": true,\n    \"invalid-typeof-comparison\": true,\n    \"conditional-initialization\": true\n  },\n  \"optimizations\": {\n    \"static-type-inference\": true,\n    \"static-type-inference-second-pass\": true,\n    \"local-context-pass\": true,\n    \"constant-folding\": true,\n    \"static-constant-class-folding\": true,\n    \"call-gatherer-pass\": true,\n    \"check-invalid-reads\": false,\n    \"private-internal-methods\": false,\n    \"public-internal-methods\": false,\n    \"public-internal-functions\": true\n  },\n  \"globals\": {\n    \"my_setting_1\": {\n      \"type\": \"bool\",\n      \"default\": true,\n      \"ini-entry\": {\n        \"name\": \"ini-entry.my_setting_1\",\n        \"scope\": \"PHP_INI_ALL\"\n      }\n    },\n    \"test_setting_1\": {\n      \"type\": \"bool\",\n      \"default\": true\n    },\n    \"my_setting_2\": {\n      \"type\": \"int\",\n      \"default\": 10\n    },\n    \"my_setting_3\": {\n      \"type\": \"double\",\n      \"default\": 15.2\n    },\n    \"my_setting_4\": {\n      \"type\": \"char\",\n      \"default\": \"A\"\n    },\n    \"my_setting_5\": {\n      \"type\": \"string\",\n      \"default\": \"custom_value\"\n    },\n    \"db.my_setting_1\": {\n      \"type\": \"bool\",\n      \"default\": false\n    },\n    \"db.my_setting_2\": {\n      \"type\": \"int\",\n      \"default\": 100\n    },\n    \"db.my_setting_3\": {\n      \"type\": \"double\",\n      \"default\": 7.5\n    },\n    \"orm.cache_level\": {\n      \"type\": \"int\",\n      \"default\": 3\n    },\n    \"orm.cache_enable\": {\n      \"type\": \"bool\",\n      \"default\": true\n    },\n    \"orm.cache_prefix\": {\n      \"type\": \"string\",\n      \"default\": \"prefix-string-\"\n    },\n    \"extension.test_ini_variable\": {\n      \"type\": \"bool\",\n      \"default\": true,\n      \"ini-entry\": {\n        \"name\": \"extension.test_ini_variable\",\n        \"scope\": \"PHP_INI_ALL\"\n      }\n    }\n  },\n\n  \"info\": [\n    {\n      \"header\": [\n        \"Test Extension support\",\n        \"Value\"\n      ],\n      \"rows\": [\n        [\n          \"Lifecycle hooks\",\n          \"PHP provides several lifecycle events, which extensions can use to perform common initialization or shutdown tasks.\"\n        ],\n        [\n          \"Static Analysis\",\n          \"Test extensions' compiler provides static analysis of the compiled code.\"\n        ]\n      ]\n    },\n    {\n      \"header\": [\n        \"Test variable\",\n        \"Value\"\n      ],\n      \"rows\": [\n        [\n          \"Extension\",\n          \"Installed\"\n        ],\n        [\n          \"NFR\",\n          \"Contributions are welcome!\"\n        ]\n      ]\n    }\n  ]\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.75,
          "content": "# For local development only.\n\nservices:\n  zephir-8.0:\n    container_name: zephir-8.0\n    hostname: zephir-80\n    build: .docker/8.0\n    working_dir: /srv\n    environment:\n      - \"USER=Zephir\"\n    volumes:\n      - .:/srv\n\n  zephir-8.1:\n    container_name: zephir-8.1\n    hostname: zephir-81\n    build: .docker/8.1\n    working_dir: /srv\n    environment:\n      - \"USER=Zephir\"\n    volumes:\n      - .:/srv\n\n  zephir-8.2:\n    container_name: zephir-8.2\n    hostname: zephir-82\n    build: .docker/8.2\n    working_dir: /srv\n    environment:\n      - \"USER=Zephir\"\n    volumes:\n      - .:/srv\n\n  zephir-8.3:\n    container_name: zephir-8.3\n    hostname: zephir-83\n    build: .docker/8.3\n    working_dir: /srv\n    environment:\n      - \"USER=Zephir\"\n    volumes:\n      - .:/srv\n"
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "kernel",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpcs.xml.dist",
          "type": "blob",
          "size": 1.8193359375,
          "content": "<?xml version=\"1.0\"?>\n<ruleset\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd\"\n    name=\"PHPCS Coding Standards for Zephir\"\n>\n\n    <!--\n        The name attribute of the ruleset tag is displayed\n        when running PHP_CodeSniffer with the -v command line\n        argument. The description tag below is not displayed anywhere\n        except in this file, so it can contain information for\n        developers who may change this file in the future.\n    -->\n    <description>Check the code of the sniffs in Zephir.</description>\n\n    <!-- Show sniff codes in all reports -->\n    <arg value=\"s\"/>\n\n    <!-- Use PSR-12 as a base -->\n    <rule ref=\"PSR12\"/>\n\n    <!-- Uncomment to use colors in progress or report -->\n    <arg name=\"colors\" />\n\n    <!-- Show progress of the run -->\n    <arg value=\"p\"/>\n\n    <rule ref=\"PSR12\">\n        <exclude name=\"Generic.Files.LineLength.TooLong\"/>\n        <exclude name=\"PSR2.Methods.MethodDeclaration.Underscore\"/>\n        <exclude name=\"PSR2.Classes.PropertyDeclaration.SpacingAfterType\"/>\n    </rule>\n\n    <!--\n        If no files or directories are specified on the command line\n        your custom standard can specify what files should be checked\n        instead.\n        Note that specifying any file or directory path\n        on the command line will ignore all file tags.\n    -->\n    <file>src</file>\n\n    <!-- file>tests/Extension</file -->\n    <!-- file>tests/Zephir</file -->\n\n    <!--\n        Hard-code ignore patterns directly into custom standard\n        so we don't have to specify the patterns on the command line.\n    -->\n    <exclude-pattern>prototypes/*</exclude-pattern>\n    <exclude-pattern>stub/*</exclude-pattern>\n    <exclude-pattern>tests/fixtures/*</exclude-pattern>\n</ruleset>\n"
        },
        {
          "name": "phpmd.xml.dist",
          "type": "blob",
          "size": 4.1650390625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<ruleset\n    name=\"Zephir phpmd rules\"\n    xmlns=\"http://pmd.sf.net/ruleset/1.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd\"\n    xsi:noNamespaceSchemaLocation=\"http://pmd.sf.net/ruleset_xml_schema.xsd\"\n>\n    <!-- Exclude Dirs from analyzing -->\n    <exclude-pattern>.zephir/*</exclude-pattern>\n    <exclude-pattern>ide/*</exclude-pattern>\n    <exclude-pattern>ext/*</exclude-pattern>\n    <exclude-pattern>prototypes/*</exclude-pattern>\n    <exclude-pattern>stub/*</exclude-pattern>\n    <exclude-pattern>tests/*</exclude-pattern>\n    <exclude-pattern>vendor/*</exclude-pattern>\n\n    <!-- Code Size -->\n    <rule ref=\"rulesets/codesize.xml/CyclomaticComplexity\">\n      <priority>1</priority>\n      <properties>\n        <property name=\"reportLevel\" value=\"15\"/>\n      </properties>\n    </rule>\n    <rule ref=\"rulesets/codesize.xml/NPathComplexity\"/>\n    <rule ref=\"rulesets/codesize.xml/ExcessiveMethodLength\"/>\n    <rule ref=\"rulesets/codesize.xml/ExcessiveClassLength\"/>\n    <rule ref=\"rulesets/codesize.xml/ExcessiveClassComplexity\"/>\n    <rule ref=\"rulesets/codesize.xml/ExcessiveParameterList\"/>\n    <rule ref=\"rulesets/codesize.xml/ExcessivePublicCount\"/>\n    <rule ref=\"rulesets/codesize.xml/TooManyFields\"/>\n\n    <!--Clean Code rules-->\n    <rule ref=\"rulesets/cleancode.xml/BooleanArgumentFlag\"/>\n    <rule ref=\"rulesets/cleancode.xml/ElseExpression\"/>\n    <rule ref=\"rulesets/cleancode.xml/StaticAccess\">\n        <priority>1</priority>\n        <properties>\n            <property name=\"exceptions\">\n                <value>\n                    \\Zephir\\BaseBackend,\n                    \\Zephir\\Compiler,\n                    \\Zephir\\Cache\\SlotsCache,\n                    \\Zephir\\FunctionCall,\n                    \\Zephir\\Documentation,\n                    \\Zephir\\Expression\\Builder\\BuilderFactory,\n                    \\Zephir\\Exception\\CompilerException\n                </value>\n            </property>\n        </properties>\n    </rule>\n\n    <!--Naming Rules-->\n    <rule ref=\"rulesets/naming.xml/ConstructorWithNameAsEnclosingClass\" />\n    <rule ref=\"rulesets/naming.xml/ConstantNamingConventions\" />\n    <rule ref=\"rulesets/naming.xml/BooleanGetMethodName\" />\n    <rule ref=\"rulesets/naming.xml/ShortVariable\">\n        <description>\n            Detects when a field, local, or parameter has a very short name.\n        </description>\n        <priority>1</priority>\n        <properties>\n            <property name=\"minimum\"\n                      description=\"Minimum length for a variable, property or parameter name\"\n                      value=\"2\"/>\n        </properties>\n    </rule>\n    <rule ref=\"rulesets/naming.xml/ShortMethodName\">\n        <properties>\n            <property name=\"minimum\"\n                      description=\"Minimum length for a method or function name\"\n                      value=\"3\"/>\n            <property name=\"exceptions\"\n                      description=\"Comma-separated list of exceptions\"\n                      value=\"on,at,up\"/>\n        </properties>\n    </rule>\n    <rule ref=\"rulesets/naming.xml/LongVariable\">\n        <properties>\n            <property name=\"maximum\" value=\"35\"/>\n        </properties>\n    </rule>\n\n    <!--Controversial-->\n    <rule ref=\"rulesets/controversial.xml\"/>\n    <rule ref=\"rulesets/controversial.xml/Superglobals\" />\n    <rule ref=\"rulesets/controversial.xml/CamelCaseClassName\" />\n    <rule ref=\"rulesets/controversial.xml/CamelCasePropertyName\"/>\n    <rule ref=\"rulesets/controversial.xml/CamelCaseMethodName\"/>\n    <rule ref=\"rulesets/controversial.xml/CamelCaseParameterName\" />\n    <rule ref=\"rulesets/controversial.xml/CamelCaseVariableName\" />\n\n    <!--Design-->\n    <rule ref=\"rulesets/design.xml/ExitExpression\"/>\n    <rule ref=\"rulesets/design.xml/EvalExpression\"/>\n    <rule ref=\"rulesets/design.xml/GotoStatement\"/>\n    <rule ref=\"rulesets/design.xml/NumberOfChildren\"/>\n    <rule ref=\"rulesets/design.xml/DepthOfInheritance\"/>\n    <rule ref=\"rulesets/design.xml/CouplingBetweenObjects\"/>\n    <rule ref=\"rulesets/design.xml/DevelopmentCodeFragment\"/>\n\n    <!--Unused Code-->\n    <rule ref=\"rulesets/unusedcode.xml\"/>\n\n</ruleset>\n"
        },
        {
          "name": "phpunit.ext.xml",
          "type": "blob",
          "size": 0.5673828125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n         bootstrap=\"tests/ext-bootstrap.php\"\n         colors=\"true\"\n         verbose=\"true\"\n>\n  <testsuites>\n    <testsuite name=\"Stub\">\n      <directory suffix=\".php\">tests/Extension</directory>\n    </testsuite>\n  </testsuites>\n\n  <php>\n    <ini name=\"memory_limit\" value=\"4G\"/>\n\n    <const name=\"FIXTURES_PATH\" value=\"./tests/fixtures\"/>\n    <const name=\"ZEPHIRPATH\" value=\"./\"/>\n  </php>\n\n</phpunit>\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 1.5126953125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\"\n         verbose=\"true\"\n>\n    <coverage pathCoverage=\"true\">\n        <include>\n            <directory suffix=\".php\">src</directory>\n        </include>\n        <report>\n            <clover outputFile=\"tests/output/clover.xml\"/>\n<!--             Uncomment to generate HTML coverage report-->\n<!--            <html outputDirectory=\"tests/output/html-coverage\" lowUpperBound=\"50\" highLowerBound=\"90\"/>-->\n        </report>\n    </coverage>\n\n    <testsuites>\n        <testsuite name=\"Extension\">\n            <directory suffix=\".php\">tests/Extension</directory>\n        </testsuite>\n        <testsuite name=\"Zephir\">\n            <directory suffix=\".php\">tests/Zephir</directory>\n        </testsuite>\n    </testsuites>\n\n    <php>\n        <ini name=\"default_charset\" value=\"UTF-8\"/>\n        <ini name=\"date.timezone\" value=\"UTC\"/>\n        <ini name=\"display_errors\" value=\"on\"/>\n        <ini name=\"display_startup_errors\" value=\"on\"/>\n        <ini name=\"error_reporting\" value=\"-1\"/>\n        <ini name=\"memory_limit\" value=\"4G\"/>\n\n        <const name=\"FIXTURES_PATH\" value=\"./tests/fixtures\"/>\n        <const name=\"ZEPHIRPATH\" value=\"./\"/>\n    </php>\n\n    <logging>\n        <junit outputFile=\"tests/output/junit.xml\"/>\n        <!-- log type=\"coverage-html\" target=\"./tests/output/html\"/-->\n    </logging>\n</phpunit>\n"
        },
        {
          "name": "prototypes",
          "type": "tree",
          "content": null
        },
        {
          "name": "qodana.sarif.json",
          "type": "blob",
          "size": 4209.35546875,
          "content": "{\n  \"$schema\": \"https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json\",\n  \"version\": \"2.1.0\",\n  \"runs\": [\n    {\n      \"tool\": {\n        \"driver\": {\n          \"name\": \"QDPHP\",\n          \"fullName\": \"Qodana for PHP\",\n          \"version\": \"232.9881.131\",\n          \"rules\": [],\n          \"taxa\": [\n            {\n              \"id\": \"PHP\",\n              \"name\": \"PHP\"\n            },\n            {\n              \"id\": \"PHP/Code smell\",\n              \"name\": \"Code smell\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"PHP/PHPDoc\",\n              \"name\": \"PHPDoc\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"PHP/Code style\",\n              \"name\": \"Code style\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"PHP/Naming conventions\",\n              \"name\": \"Naming conventions\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"Shell script\",\n              \"name\": \"Shell script\"\n            },\n            {\n              \"id\": \"PHP/General\",\n              \"name\": \"General\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"JavaScript and TypeScript\",\n              \"name\": \"JavaScript and TypeScript\"\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Unit testing\",\n              \"name\": \"Unit testing\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"PHP/Probable bugs\",\n              \"name\": \"Probable bugs\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"MySQL\",\n              \"name\": \"MySQL\"\n            },\n            {\n              \"id\": \"PHP/PHPDoc/Code style\",\n              \"name\": \"Code style\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP/PHPDoc\",\n                    \"index\": 2,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"PHP/Control flow\",\n              \"name\": \"Control flow\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"Sass/SCSS\",\n              \"name\": \"Sass/SCSS\"\n            },\n            {\n              \"id\": \"HTML\",\n              \"name\": \"HTML\"\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Unused symbols\",\n              \"name\": \"Unused symbols\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"Cucumber\",\n              \"name\": \"Cucumber\"\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Flow type checker\",\n              \"name\": \"Flow type checker\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Data flow\",\n              \"name\": \"Data flow\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"EditorConfig\",\n              \"name\": \"EditorConfig\"\n            },\n            {\n              \"id\": \"PHP/PHPUnit\",\n              \"name\": \"PHPUnit\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"PostCSS\",\n              \"name\": \"PostCSS\"\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Bitwise operation issues\",\n              \"name\": \"Bitwise operation issues\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"PHP/Type compatibility\",\n              \"name\": \"Type compatibility\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/General\",\n              \"name\": \"General\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/ES2015 migration aids\",\n              \"name\": \"ES2015 migration aids\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"PHP/Undefined symbols\",\n              \"name\": \"Undefined symbols\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"General\",\n              \"name\": \"General\"\n            },\n            {\n              \"id\": \"HTML/Accessibility\",\n              \"name\": \"Accessibility\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"HTML\",\n                    \"index\": 14,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/React\",\n              \"name\": \"React\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Validity issues\",\n              \"name\": \"Validity issues\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Potentially confusing code constructs\",\n              \"name\": \"Potentially confusing code constructs\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"CSS\",\n              \"name\": \"CSS\"\n            },\n            {\n              \"id\": \"CSS/Invalid elements\",\n              \"name\": \"Invalid elements\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"CSS\",\n                    \"index\": 32,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"SQL\",\n              \"name\": \"SQL\"\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Try statement issues\",\n              \"name\": \"Try statement issues\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"YAML\",\n              \"name\": \"YAML\"\n            },\n            {\n              \"id\": \"PHP/Unused symbols\",\n              \"name\": \"Unused symbols\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"PHP/Composer\",\n              \"name\": \"Composer\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Control flow issues\",\n              \"name\": \"Control flow issues\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"XML\",\n              \"name\": \"XML\"\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Potentially undesirable code constructs\",\n              \"name\": \"Potentially undesirable code constructs\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"CSS/Code style issues\",\n              \"name\": \"Code style issues\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"CSS\",\n                    \"index\": 32,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"Less\",\n              \"name\": \"Less\"\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Probable bugs\",\n              \"name\": \"Probable bugs\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"PHP/Attributes\",\n              \"name\": \"Attributes\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"RegExp\",\n              \"name\": \"RegExp\"\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Code style issues\",\n              \"name\": \"Code style issues\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Assignment issues\",\n              \"name\": \"Assignment issues\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"Joomla!\",\n              \"name\": \"Joomla!\"\n            },\n            {\n              \"id\": \"PHP/Refactoring opportunities\",\n              \"name\": \"Refactoring opportunities\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/TypeScript\",\n              \"name\": \"TypeScript\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"CSS/Probable bugs\",\n              \"name\": \"Probable bugs\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"CSS\",\n                    \"index\": 32,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Switch statement issues\",\n              \"name\": \"Switch statement issues\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/DOM issues\",\n              \"name\": \"DOM issues\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Async code and promises\",\n              \"name\": \"Async code and promises\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"Code Coverage\",\n              \"name\": \"Code Coverage\"\n            },\n            {\n              \"id\": \"Proofreading\",\n              \"name\": \"Proofreading\"\n            },\n            {\n              \"id\": \"PHP/Behat\",\n              \"name\": \"Behat\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Imports and dependencies\",\n              \"name\": \"Imports and dependencies\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"Ini files\",\n              \"name\": \"Ini files\"\n            },\n            {\n              \"id\": \"PHP/Code style/PSR-12\",\n              \"name\": \"PSR-12\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP/Code style\",\n                    \"index\": 3,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"PHP/Psalm\",\n              \"name\": \"Psalm\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Naming conventions\",\n              \"name\": \"Naming conventions\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"PHP/Taint analysis\",\n              \"name\": \"Taint analysis\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Code quality tools\",\n              \"name\": \"Code quality tools\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"Blade files\",\n              \"name\": \"Blade files\"\n            },\n            {\n              \"id\": \"PHP/PHP strict standards\",\n              \"name\": \"PHP strict standards\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"PHP/Regular expressions\",\n              \"name\": \"Regular expressions\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Function metrics\",\n              \"name\": \"Function metrics\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"PHP/Quality tools\",\n              \"name\": \"Quality tools\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"JSON and JSON5\",\n              \"name\": \"JSON and JSON5\"\n            },\n            {\n              \"id\": \"PHP/Error handling\",\n              \"name\": \"Error handling\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"Oracle\",\n              \"name\": \"Oracle\"\n            },\n            {\n              \"id\": \"Internationalization\",\n              \"name\": \"Internationalization\"\n            },\n            {\n              \"id\": \"MongoJS\",\n              \"name\": \"MongoJS\"\n            },\n            {\n              \"id\": \"Vue\",\n              \"name\": \"Vue\"\n            },\n            {\n              \"id\": \"Version control\",\n              \"name\": \"Version control\"\n            },\n            {\n              \"id\": \"Structural search\",\n              \"name\": \"Structural search\"\n            },\n            {\n              \"id\": \"Dependency analysis\",\n              \"name\": \"Dependency analysis\"\n            },\n            {\n              \"id\": \"JavaScript and TypeScript/Node.js\",\n              \"name\": \"Node.js\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"JavaScript and TypeScript\",\n                    \"index\": 7,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"RELAX NG\",\n              \"name\": \"RELAX NG\"\n            },\n            {\n              \"id\": \"PHP/Replaceable assignments\",\n              \"name\": \"Replaceable assignments\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"PHP\",\n                    \"index\": 0,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"CSS/Code quality tools\",\n              \"name\": \"Code quality tools\",\n              \"relationships\": [\n                {\n                  \"target\": {\n                    \"id\": \"CSS\",\n                    \"index\": 32,\n                    \"toolComponent\": {\n                      \"name\": \"QDPHP\"\n                    }\n                  },\n                  \"kinds\": [\n                    \"superset\"\n                  ]\n                }\n              ]\n            },\n            {\n              \"id\": \"PostgreSQL\",\n              \"name\": \"PostgreSQL\"\n            },\n            {\n              \"id\": \"SQL server\",\n              \"name\": \"SQL server\"\n            },\n            {\n              \"id\": \"Qodana\",\n              \"name\": \"Qodana\"\n            }\n          ],\n          \"language\": \"en-US\",\n          \"contents\": [\n            \"localizedData\",\n            \"nonLocalizedData\"\n          ],\n          \"isComprehensive\": false\n        },\n        \"extensions\": [\n          {\n            \"name\": \"com.jetbrains.php\",\n            \"version\": \"232.9881\",\n            \"rules\": [\n              {\n                \"id\": \"PhpLoopCanBeReplacedWithStrRepeatInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Loop can be replaced with 'str_repeat'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'for' loops that can be safely replaced with 'str_repeat()' calls.\",\n                  \"markdown\": \"Reports the `for` loops that can be safely replaced with `str_repeat()` calls.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpLoopCanBeReplacedWithStrRepeatInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDocDuplicateTypeInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Type already exists in PHPDoc tag\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports duplicate types in PHPDoc comments.\",\n                  \"markdown\": \"Reports duplicate types in PHPDoc comments.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDocDuplicateTypeInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPDoc\",\n                      \"index\": 2,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnnecessaryCurlyVarSyntaxInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unnecessary curly braces syntax for variable\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports unnecessary '{' and '}' used for interpolating variables in string literals. See Variable parsing (php.net) for details.\",\n                  \"markdown\": \"Reports unnecessary `{` and `}` used for interpolating variables in string literals.\\n\\n\\nSee [Variable parsing (php.net)](https://www.php.net/manual/en/language.types.string.php#language.types.string.parsing) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnnecessaryCurlyVarSyntaxInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpFunctionNamingConventionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Function name is not following coding convention\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the functions' names that are either too short, too long, or do not follow the specified regular expression pattern. Some coding styles have a special naming convention for functions. Use the inspection options to specify minimum/maximum length and the regular expression expected for functions' names. To ignore the names' length, specify 0. To learn more about regular expressions, refer to the Quick Start guide (regular-expressions.info).\",\n                  \"markdown\": \"Reports the functions' names that are either too short, too long, or do not follow the specified regular expression pattern. Some coding styles have a special naming convention for functions.\\n\\n\\nUse the inspection options to specify minimum/maximum length and the regular expression expected for functions' names.\\nTo ignore the names' length, specify **0**.\\n\\n\\nTo learn more about regular expressions, refer to the [Quick Start guide (regular-expressions.info)](https://www.regular-expressions.info/quickstart.html).\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpFunctionNamingConventionInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Naming conventions\",\n                      \"index\": 4,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArrayFillCanBeConvertedToLoopInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'array_fill' can be converted to loop\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'array_fill()' calls that can be replaced with 'foreach' loops.\",\n                  \"markdown\": \"Reports the `array_fill()` calls that can be replaced with `foreach` loops.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArrayFillCanBeConvertedToLoopInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpIssetCanBeReplacedWithCoalesceInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'isset' can be replaced with coalesce\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the conditions using 'isset' that can be safely replaced with expressions using the '??' null coalesce operator. See Null coalesce operator (php.net) for details.\",\n                  \"markdown\": \"Reports the conditions using `isset` that can be safely replaced with expressions using the `??` null coalesce operator.\\n\\n\\nSee [Null coalesce operator (php.net)](https://wiki.php.net/rfc/isset_ternary) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpIssetCanBeReplacedWithCoalesceInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpNestedTernaryExpressionUsageInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Nested ternary operator usage\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports nested ternary expressions, which are deprecated starting from PHP 7.4.\",\n                  \"markdown\": \"Reports nested ternary expressions, which are deprecated starting from PHP 7.4.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpNestedTernaryExpressionUsageInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpVoidFunctionResultUsedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Invalid function result used\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of a 'void' or 'never' function's return value. Since 'void' functions do not have a return value and 'never' functions terminate execution or throw an exception, such usages are most likely a programming mistake.\",\n                  \"markdown\": \"Reports the usages of a `void` or `never` function's return value.\\n\\n\\nSince `void` functions do not have a return value and `never` functions terminate execution or throw an exception, such usages are most likely a programming mistake.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpVoidFunctionResultUsedInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpConstantNamingConventionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Constant name is not following coding convention\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the constants' names that are either too short, too long, or do not follow the specified regular expression pattern. Some coding styles have a special naming convention for constants. Use the inspection options to specify minimum/maximum length and the regular expression expected for constants' names. To ignore the names' length, specify 0. To learn more about regular expressions, refer to the Quick Start guide (regular-expressions.info).\",\n                  \"markdown\": \"Reports the constants' names that are either too short, too long, or do not follow the specified regular expression pattern. Some coding styles have a special naming convention for constants.\\n\\n\\nUse the inspection options to specify minimum/maximum length and the regular expression expected for constants' names.\\nTo ignore the names' length, specify **0**.\\n\\n\\nTo learn more about regular expressions, refer to the [Quick Start guide (regular-expressions.info)](https://www.regular-expressions.info/quickstart.html).\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpConstantNamingConventionInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Naming conventions\",\n                      \"index\": 4,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpTernaryExpressionCanBeReducedToShortVersionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Ternary expression can be replaced with short version\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the '?:' ternary expressions in which the condition and the 'true' statement are matching.\",\n                  \"markdown\": \"Reports the `?:` ternary expressions in which the condition and the `true` statement are matching.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpTernaryExpressionCanBeReducedToShortVersionInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpCatchWithInstanceOfCanBeReplacedWithSpecificCatchesInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'instanceof' checks in 'catch' block can be replaced with specific catches\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'instanceof' checks in single 'catch' blocks that could be replaced with multiple 'catch' blocks specific for each exception instance.\",\n                  \"markdown\": \"Reports the `instanceof` checks in single `catch` blocks that could be replaced with multiple `catch` blocks specific for each exception instance.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpCatchWithInstanceOfCanBeReplacedWithSpecificCatchesInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDuplicateMatchArmBodyInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Duplicate arm in 'match' expression\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports duplicate bodies in 'match' arms. See Match expression (php.net) for details.\",\n                  \"markdown\": \"Reports duplicate bodies in `match` arms.\\n\\n\\nSee [Match expression (php.net)](https://wiki.php.net/rfc/match_expression_v2) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDuplicateMatchArmBodyInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMissingDocCommentInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Missing PHPDoc comment\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports non-fully typed elements without a PHPDoc comment or with a PHPDoc comment only containing the '@noinspection' tag. You can use the Enforce PHPDoc Comment inspection to report fully typed elements.\",\n                  \"markdown\": \"Reports non-fully typed elements without a PHPDoc comment or with a PHPDoc comment only containing the `@noinspection` tag.\\n\\nYou can use the *Enforce PHPDoc Comment* inspection to report fully typed elements.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMissingDocCommentInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPDoc/Code style\",\n                      \"index\": 11,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpWriteAccessToReferencedArrayValueWithoutUnsetInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Write access to referenced array value without 'unset'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the write access expressions on variables that are still referencing the array value previously used in a 'foreach' statement. It is recommended to destroy such references by using 'unset'. See foreach (php.net) and unset (php.net) for details.\",\n                  \"markdown\": \"Reports the write access expressions on variables that are still referencing the array value previously used in a `foreach` statement.\\n\\n\\nIt is recommended to destroy such references by using `unset`.\\n\\n\\nSee [foreach (php.net)](https://www.php.net/manual/en/control-structures.foreach.php) and [unset (php.net)](https://www.php.net/manual/en/function.unset.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpWriteAccessToReferencedArrayValueWithoutUnsetInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Control flow\",\n                      \"index\": 12,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpSameParameterValueInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Parameter's value is always the same\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the parameters in private methods that have the same value across all method calls.\",\n                  \"markdown\": \"Reports the parameters in private methods that have the same value across all method calls.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpSameParameterValueInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnitCoversFunctionWithoutScopeResolutionOperatorInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Covered function reference is provided without ‘::’\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the references to functions/methods in the '@covers' PHPDoc tags that are not prepended with the scope resolution operator ('::').\",\n                  \"markdown\": \"Reports the references to functions/methods in the `@covers` PHPDoc tags that are not prepended with the scope resolution operator (`::`).\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnitCoversFunctionWithoutScopeResolutionOperatorInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPUnit\",\n                      \"index\": 20,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArrayAccessOnIllegalTypeInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Array offset access on illegal type\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the array offset access expressions that are used on illegal types.\",\n                  \"markdown\": \"Reports the array offset access expressions that are used on illegal types.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArrayAccessOnIllegalTypeInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Type compatibility\",\n                      \"index\": 23,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUndefinedGotoLabelInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Undefined goto label\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'goto' labels that are not found in the current scope. The target 'goto' label must reside in the same file and context: you cannot jump into or out of a function or method, and cannot jump into a loop or switch structure. See goto (php.net) for details.\",\n                  \"markdown\": \"Reports the `goto` labels that are not found in the current scope.\\n\\n\\nThe target `goto` label must reside in the same file and context: you cannot jump into or out of a function or method, and cannot jump into a loop or switch structure.\\n\\n\\nSee [goto (php.net)](https://www.php.net/manual/en/control-structures.goto.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUndefinedGotoLabelInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Undefined symbols\",\n                      \"index\": 26,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDeprecatedPartiallySupportedCallableInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Deprecated partially supported callables\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports deprecated usage of callables that are supported by 'call_user_func($callable)', but not by '$callable()'. Starting from PHP 8.2, the following callables are deprecated: '\\\"self::method\\\"'\\n'\\\"parent::method\\\"'\\n'\\\"static::method\\\"'\\n'[\\\"self\\\", \\\"method\\\"]'\\n'[\\\"parent\\\", \\\"method\\\"]'\\n'[\\\"static\\\", \\\"method\\\"]'\\n'[\\\"Foo\\\", \\\"Bar::method\\\"]'\\n'[new Foo, \\\"Bar::method\\\"]' See Deprecate partially supported callables (php.net) for details.\",\n                  \"markdown\": \"Reports deprecated usage of callables that are supported by `call_user_func($callable)`, but not by `$callable()`.\\n\\nStarting from PHP 8.2, the following callables are deprecated:\\n\\n    \\\"self::method\\\"\\n    \\\"parent::method\\\"\\n    \\\"static::method\\\"\\n    [\\\"self\\\", \\\"method\\\"]\\n    [\\\"parent\\\", \\\"method\\\"]\\n    [\\\"static\\\", \\\"method\\\"]\\n    [\\\"Foo\\\", \\\"Bar::method\\\"]\\n    [new Foo, \\\"Bar::method\\\"]\\n\\n\\nSee [Deprecate partially supported callables (php.net)](https://wiki.php.net/rfc/deprecate_partially_supported_callables) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDeprecatedPartiallySupportedCallableInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpLoopCanBeConvertedToArrayFillInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Loop can be converted to 'array_fill()' call\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'for' loops that can be replaced with 'array_fill()' calls.\",\n                  \"markdown\": \"Reports the `for` loops that can be replaced with `array_fill()` calls.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpLoopCanBeConvertedToArrayFillInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArrayToStringConversionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Array to string conversion\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports array to string conversions, that is, the arrays that are provided in the contexts where a string is expected. Prior to PHP 8.0, this would lead to a 'E_NOTICE' level error. In PHP 8.0, an 'E-WARNING' is emitted.\",\n                  \"markdown\": \"Reports array to string conversions, that is, the arrays that are provided in the contexts where a string is expected.\\n\\n\\nPrior to PHP 8.0, this would lead to a `E_NOTICE` level error. In PHP 8.0, an `E-WARNING` is emitted.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArrayToStringConversionInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpConstantReassignmentInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Constant reassignment\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports reassignments of constants. Since constants cannot be changed, such assignments will have no effect and will emit an 'E_NOTICE' (in PHP 7.4 and earlier) or 'E_WARNING' (in PHP 8.0 and later).\",\n                  \"markdown\": \"Reports reassignments of constants.\\n\\n\\nSince constants cannot be changed, such assignments will have no effect and will emit an `E_NOTICE` (in PHP 7.4 and earlier) or `E_WARNING` (in PHP 8.0 and later).\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpConstantReassignmentInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUndefinedFieldInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Undefined property\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the references to class properties that are not declared. The inspection skips the objects of the 'stdClass' or derived types.\",\n                  \"markdown\": \"Reports the references to class properties that are not declared.\\n\\n\\nThe inspection skips the objects of the `stdClass` or derived types.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUndefinedFieldInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Undefined symbols\",\n                      \"index\": 26,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUndefinedClassConstantInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Undefined class constant\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the references to class constants that are not declared.\",\n                  \"markdown\": \"Reports the references to class constants that are not declared.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUndefinedClassConstantInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Undefined symbols\",\n                      \"index\": 26,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpPregMatchWithoutEffectiveRegexpInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'preg_match' can be replaced with 'str_contains'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'preg_match()' calls with 'pattern' arguments that don't use any regexp facilities. Such calls can be replaced with 'str_starts_with()', 'str_ends_with()' or 'str_contains()' calls.\",\n                  \"markdown\": \"Reports the `preg_match()` calls with `pattern` arguments that don't use any regexp facilities. Such calls can be replaced with `str_starts_with()`, `str_ends_with()` or `str_contains()` calls.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpPregMatchWithoutEffectiveRegexpInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpToStringReturnInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Method '__toString' return type\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the '__toString' methods that do not return 'string'. Prior to PHP 7.4, this would lead to a fatal 'E_RECOVERABLE_ERROR' level error. In PHP 7.4, a fatal non-recoverable 'ERROR' is thrown. In PHP 8.0, the return value follows the standard PHP type semantics and will be coerced into a string if possible and if strict typing is disabled. See __toString (php.net) for details.\",\n                  \"markdown\": \"Reports the `__toString` methods that do not return `string`.\\n\\nPrior to PHP 7.4, this would lead to a fatal `E_RECOVERABLE_ERROR` level error. In PHP 7.4, a fatal non-recoverable `ERROR` is thrown. In PHP 8.0, the return value follows the standard PHP type semantics and will be coerced into a string if possible and if strict typing is disabled.\\n\\n\\nSee [__toString (php.net)](https://www.php.net/manual/en/language.oop5.magic.php#language.oop5.magic.tostring) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpToStringReturnInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpIfCanBeReplacedWithMatchExpressionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'if' can be replaced with 'match' expression\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'if' statements inside 'if-elseif-else' constructs that use strict comparisons ('===') and could be replaced with 'match' expressions.\",\n                  \"markdown\": \"Reports the `if` statements inside `if-elseif-else` constructs that use strict comparisons (`===`) and could be replaced with `match` expressions.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpIfCanBeReplacedWithMatchExpressionInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUselessTrailingCommaInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Useless trailing comma\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the trailing commas in parameters lists and closures' 'use' lists that do not bring any benefit. In a single-line list, a trailing comma is redundant and can be removed. In a multiline list, if no line break is provided after a trailing comma, it becomes impossible to easily add, remove, or move lines.\",\n                  \"markdown\": \"Reports the trailing commas in parameters lists and closures' `use` lists that do not bring any benefit.\\n\\n* In a single-line list, a trailing comma is redundant and can be removed.\\n* In a multiline list, if no line break is provided after a trailing comma, it becomes impossible to easily add, remove, or move lines.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUselessTrailingCommaInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpParamsInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Parameter type\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the parameters passed to a function call, whose types do not match the ones specified in the function definition via type declaration or the PHPDoc '@param' tag. See Type declarations (php.net) and @param (phpdoc.org) for details.\",\n                  \"markdown\": \"Reports the parameters passed to a function call, whose types do not match the ones specified in the function definition via type declaration or the PHPDoc `@param` tag.\\n\\nSee [Type declarations (php.net)](http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration) and\\n[@param (phpdoc.org)](https://docs.phpdoc.org/guide/references/phpdoc/tags/param.html#param) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpParamsInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Type compatibility\",\n                      \"index\": 23,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpClassCanBeReadonlyInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Class can be 'readonly'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports classes which contain only 'readonly' properties.\",\n                  \"markdown\": \"Reports classes which contain only `readonly` properties.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpClassCanBeReadonlyInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpCastIsUnnecessaryInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Type cast is unnecessary\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the type cast operators used on the values that are already of the corresponding type. Such operators are redundant and can be safely removed. See Type juggling (php.net) for details.\",\n                  \"markdown\": \"Reports the type cast operators used on the values that are already of the corresponding type. Such operators are redundant and can be safely removed.\\n\\n\\nSee [Type juggling (php.net)](https://www.php.net/manual/en/language.types.type-juggling.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpCastIsUnnecessaryInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDocMissingThrowsInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Missing @throws tag(s)\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports missing PHPDoc '@throws' tags for exceptions thrown by functions or methods. The exception classes added to the Unchecked Exceptions list under Settings | PHP | Analysis are excluded from the inspection scope.\",\n                  \"markdown\": \"Reports missing PHPDoc `@throws` tags for exceptions thrown by functions or methods.\\n\\nThe exception classes added to the **Unchecked Exceptions** list under\\n[Settings \\\\| PHP \\\\| Analysis](settings://reference.webide.settings.project.settings.php?Unchecked%20Exceptions)\\nare excluded from the inspection scope.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDocMissingThrowsInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPDoc/Code style\",\n                      \"index\": 11,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnusedAliasInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unused import\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the imports that are never used.\",\n                  \"markdown\": \"Reports the imports that are never used.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnusedAliasInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Unused symbols\",\n                      \"index\": 37,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"ComposerJsonFileReferencesInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unresolved file references\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports unresolved file references in composer.json.\",\n                  \"markdown\": \"Reports unresolved file references in composer.json.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"ComposerJsonFileReferencesInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Composer\",\n                      \"index\": 38,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpIssetCanCheckNestedAccessDirectlyInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'isset' can check nested array access and sub properties directly\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports constructions like 'isset($a['a']) && isset($a['a']['b']) && isset($b) && isset($b->b)' that can be replaced with 'isset($a['a']['b']) && isset($b->b)'.\",\n                  \"markdown\": \"Reports constructions like `isset($a['a']) && isset($a['a']['b']) && isset($b) && isset($b->b)` that can be replaced with `isset($a['a']['b']) && isset($b->b)`.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpIssetCanCheckNestedAccessDirectlyInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpRedundantDefaultBreakContinueArgumentInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant 'continue/break' argument\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the redundant '1' argument of 'continue' and 'break' statements. Since this argument is optional and its default value is '1', such usages can be omitted. See continue (php.net) and break (php.net) for details.\",\n                  \"markdown\": \"Reports the redundant `1` argument of `continue` and `break` statements. Since this argument is optional and its default value is `1`, such usages can be omitted.\\n\\n\\nSee [continue (php.net)](https://www.php.net/manual/en/control-structures.continue.php) and [break (php.net)](https://www.php.net/manual/en/control-structures.break.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpRedundantDefaultBreakContinueArgumentInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArrayUsedOnlyForWriteInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Array used only with write access\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports local arrays that are only updated, but never queried.\",\n                  \"markdown\": \"Reports local arrays that are only updated, but never queried.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArrayUsedOnlyForWriteInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpIllegalPsrClassPathInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Class path doesn't match project structure\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the classes with the filepath not following the PSR-0/PSR-4 project structure. You can configure the project vendor roots under Settings/Preferences | Directories. See PSR-0/PSR-4 standards (php-fig.org) for details.\",\n                  \"markdown\": \"Reports the classes with the filepath not following the PSR-0/PSR-4 project structure.\\n\\n\\nYou can configure the project vendor roots under **Settings/Preferences \\\\| Directories**.\\n\\n\\nSee [PSR-0/PSR-4 standards (php-fig.org)](https://www.php-fig.org/psr/psr-4/) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpIllegalPsrClassPathInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpRedundantMethodOverrideInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant method override\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the overriding methods that only consist of a single call to the parent method.\",\n                  \"markdown\": \"Reports the overriding methods that only consist of a single call to the parent method.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpRedundantMethodOverrideInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDefineCanBeReplacedWithConstInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Define constant name can be replaced with 'const' syntax\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'define()' calls that can be replaced with 'const' syntax.\",\n                  \"markdown\": \"Reports the `define()` calls that can be replaced with `const` syntax.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDefineCanBeReplacedWithConstInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArrayAppendUsingCountInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Using 'count()' as index for appending value to array\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'count($array)' calls that are used as an array index for appending an element to the array: '$array[count($array)] = 42'. In such cases, it is recommended to use square bracket syntax ('$array[] = 42') instead, which adds no overhead of calling a function.\",\n                  \"markdown\": \"Reports the `count($array)` calls that are used as an array index for appending an element to the array: `$array[count($array)] = 42`. In such cases, it is recommended to use square bracket syntax (`$array[] = 42`) instead, which adds no overhead of calling a function.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArrayAppendUsingCountInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpSwitchCanBeReplacedWithMatchExpressionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'switch' can be replaced with 'match' expression\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports 'switch' statements that could be replaced with 'match' expression\",\n                  \"markdown\": \"Reports 'switch' statements that could be replaced with 'match' expression\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpSwitchCanBeReplacedWithMatchExpressionInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpPowCallCanBeReplacedWithOperatorInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'pow()' call can be replaced with '**' operator\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'pow()' calls that can be replaced with the '**' operator, which adds no overhead of calling a function. See Power operator (php.net) for details.\",\n                  \"markdown\": \"Reports the `pow()` calls that can be replaced with the `**` operator, which adds no overhead of calling a function.\\n\\n\\nSee [Power operator (php.net)](https://wiki.php.net/rfc/pow-operator) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpPowCallCanBeReplacedWithOperatorInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpFormatFunctionParametersMismatchInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Format function parameters mismatch\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the arguments of a format function (such as 'printf' or 'sprintf') that are not mapped to any parameters or specification conversions. See printf (php.net) and sprintf (php.net) for details.\",\n                  \"markdown\": \"Reports the arguments of a format function (such as `printf` or `sprintf`) that are not mapped to any parameters or specification conversions.\\n\\n\\nSee [printf (php.net)](https://www.php.net/manual/en/function.printf.php) and [sprintf (php.net)](https://www.php.net/manual/en/function.sprintf.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpFormatFunctionParametersMismatchInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpForeachVariableOverwritesAlreadyDefinedVariableInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'foreach' variable overwrites already defined variable\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the keys and values in 'foreach' loops that are assigned a non-primitive value before the 'foreach' loop and are accessed after it. Such usages may unwillingly overwrite an already defined value and cause latent bugs.\",\n                  \"markdown\": \"Reports the keys and values in `foreach` loops that are assigned a non-primitive value before the `foreach` loop and are accessed after it. Such usages may unwillingly overwrite an already defined value and cause latent bugs.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpForeachVariableOverwritesAlreadyDefinedVariableInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Control flow\",\n                      \"index\": 12,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpLoopCanBeReplacedWithStdFunctionCallsInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Loop can be replaced with 'in_array()' or 'array_key_exists()' call\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'foreach' loops that can be safely replaced with 'in_array()' or 'array_key_exists()' calls. See in_array (php.net) and array_key_exists (php.net) for details.\",\n                  \"markdown\": \"Reports the `foreach` loops that can be safely replaced with `in_array()` or `array_key_exists()` calls.\\n\\n\\nSee [in_array (php.net)](https://www.php.net/manual/en/function.in-array) and [array_key_exists (php.net)](https://www.php.net/manual/en/function.array-key-exists) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpLoopCanBeReplacedWithStdFunctionCallsInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArrayKeyDoesNotMatchArrayShapeInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Array key does not match array shape \"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the array keys that do not match the keys specified via the '#[ArrayShape]' attribute.\",\n                  \"markdown\": \"Reports the array keys that do not match the keys specified via the `#[ArrayShape]` attribute.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArrayKeyDoesNotMatchArrayShapeInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Attributes\",\n                      \"index\": 45,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpComposerExtensionStubsInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Extension is missing in composer.json\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of classes, functions, and constants from the PHP extensions not specified in composer.json. If an extension is listed in the 'require-dev' section of composer.json, the inspection reports the corresponding symbols' usages located outside of the folders marked as test roots.\",\n                  \"markdown\": \"Reports the usages of classes, functions, and constants from the PHP extensions not specified in *composer.json* . If an extension is listed in the `require-dev` section of *composer.json*, the inspection reports the corresponding symbols' usages located outside of the folders marked as test roots.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpComposerExtensionStubsInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Composer\",\n                      \"index\": 38,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnusedParameterInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unused parameter\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the parameters that are considered unused in the following cases: The parameter is passed by value, and the value is not used anywhere or is overwritten immediately. The parameter is passed by reference, and the reference is not used anywhere or is overwritten immediately.\",\n                  \"markdown\": \"Reports the parameters that are considered unused in the following cases:\\n\\n* The parameter is passed by value, and the value is not used anywhere or is overwritten immediately.\\n* The parameter is passed by reference, and the reference is not used anywhere or is overwritten immediately.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnusedParameterInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Unused symbols\",\n                      \"index\": 37,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDisabledExtensionStubsInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Disabled extension stubs\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of classes, functions, and constants, for which the stubs for the corresponding PHP interpreter extensions are disabled. You can configure the set of stubs under Settings | PHP | PHP Runtime. See PhpStorm stubs (blog.jetbrains.com/phpstorm) for details.\",\n                  \"markdown\": \"Reports the usages of classes, functions, and constants, for which the stubs for the corresponding PHP interpreter extensions are disabled.\\n\\n\\nYou can configure the set of stubs under\\n[Settings \\\\| PHP \\\\| PHP Runtime](settings://reference.webide.settings.project.settings.php?PHP%20Runtime).\\n\\n\\nSee [PhpStorm stubs (blog.jetbrains.com/phpstorm)](https://blog.jetbrains.com/phpstorm/2018/03/how-to-provide-stubs-for-phpstorm/) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDisabledExtensionStubsInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpTernaryExpressionCanBeReplacedWithConditionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Ternary expression can be replaced with condition\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the ternary expressions specified as 'condition ? true : false' that can be safely replaced with just 'condition'.\",\n                  \"markdown\": \"Reports the ternary expressions specified as `condition ? true : false` that can be safely replaced with just `condition`.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpTernaryExpressionCanBeReplacedWithConditionInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpPregMatchReplaceWithComparisonInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'preg_match()' can be replaced with comparison\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'preg_match()' calls that are provided with a string argument starting with '^' (Start of String anchor) and ending with '$' (End of String anchor). Such calls can be replaced with a comparison operation.\",\n                  \"markdown\": \"Reports the `preg_match()` calls that are provided with a string argument starting with `^` (Start of String anchor) and ending with `$` (End of String anchor). Such calls can be replaced with a comparison operation.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpPregMatchReplaceWithComparisonInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMethodMayBeInaccessibleInLateStaticBindingInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Private method may be inaccessible during late static binding call\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the late static binding method calls (that is, performed via 'static::') that may be resolved to inaccessible private methods from child classes. See Late Static Bindings (php.net) for details.\",\n                  \"markdown\": \"Reports the late static binding method calls (that is, performed via `static::`) that may be resolved to inaccessible private methods from child classes.\\n\\n\\nSee [Late Static Bindings (php.net)](https://www.php.net/manual/en/language.oop5.late-static-bindings.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMethodMayBeInaccessibleInLateStaticBindingInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpClassConstantCanBeFinalInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Class constant can be 'final'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the non-'final' class constants that are not redefined in child classes. In PHP 8.1 and later, such constants can be made 'final'. See Final class constants (php.net) for details.\",\n                  \"markdown\": \"Reports the non-`final` class constants that are not redefined in child classes. In PHP 8.1 and later, such constants can be made `final`.\\n\\n\\nSee [Final class constants (php.net)](https://wiki.php.net/rfc/final_class_const) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpClassConstantCanBeFinalInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpClosureCanBeConvertedToFirstClassCallableInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'Closure::fromCallable()' can be converted to the first-class callable syntax\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'callable' creation expressions that use 'Closure::fromCallable' but can be replaced with first-class callable syntax 'f(...)' available since PHP 8.1. See First-class callable syntax (php.net) for details.\",\n                  \"markdown\": \"Reports the `callable` creation expressions that use `Closure::fromCallable` but can be replaced with first-class callable syntax `f(...)` available since PHP 8.1.\\n\\n\\nSee [First-class callable syntax (php.net)](https://wiki.php.net/rfc/first_class_callable_syntax) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpClosureCanBeConvertedToFirstClassCallableInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpRedundantArrayCallInForeachIteratedValueInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant 'array_values' call on a value iterated in 'foreach'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'array_values()' calls inside 'foreach' loops in which the iterated value is used without a key. Such calls are redundant and can be safely removed.\",\n                  \"markdown\": \"Reports the `array_values()` calls inside `foreach` loops in which the iterated value is used without a key. Such calls are redundant and can be safely removed.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpRedundantArrayCallInForeachIteratedValueInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpExpressionAlwaysNullInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Expression is always 'null'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the variables in 'return' statements that are always 'null'.\",\n                  \"markdown\": \"Reports the variables in `return` statements that are always `null`.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpExpressionAlwaysNullInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Control flow\",\n                      \"index\": 12,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnitAssertCountInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Usage 'assertCount/assertSameSize' methods instead of assertEquals\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports alternative usage of the 'assertEquals' and 'assertNotEquals' methods with 'count' function as a parameter See Usage of the assertCount for details. See Usage of the assertSameSize for details.\",\n                  \"markdown\": \"Reports alternative usage of the `assertEquals` and `assertNotEquals` methods with `count` function as a parameter\\n\\n\\nSee [Usage of the assertCount](https://phpunit.readthedocs.io/en/stable/assertions.html#assertcount) for details.\\n\\n\\nSee [Usage of the assertSameSize](https://hotexamples.com/examples/-/PHPUnit_Framework_Assert/assertSameSize/php-phpunit_framework_assert-assertsamesize-method-examples.html) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnitAssertCountInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPUnit\",\n                      \"index\": 20,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDefineConstantNameStartsWithLeadingSlashInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Constant name defined with a leading slash\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'define' constructs in which the constant's FQN starts with a leading slash. Such constants will not be correctly registered by PHP.\",\n                  \"markdown\": \"Reports the `define` constructs in which the constant's FQN starts with a leading slash. Such constants will not be correctly registered by PHP.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDefineConstantNameStartsWithLeadingSlashInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnnecessaryParenthesesInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unnecessary parentheses\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the expressions containing redundant parenthesis, which can be safely removed.\",\n                  \"markdown\": \"Reports the expressions containing redundant parenthesis, which can be safely removed.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnnecessaryParenthesesInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpIfCanBeMergedWithSequentialConditionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'if' can be merged with subsequent condition\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'if' statements that are followed by 'elseif' or other 'if' statements having the same bodies. Such statements can be merged together.\",\n                  \"markdown\": \"Reports the `if` statements that are followed by `elseif` or other `if` statements having the same bodies. Such statements can be merged together.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpIfCanBeMergedWithSequentialConditionInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArrayModificationWillNotHaveEffectInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Modification of the array returned from function by value won't have any effect\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports call to a function that returns array by value, which makes the assignment operation non-working. Return by reference shall be used instead. For example: '<?php\\nclass A {\\n    private $values = [];\\n    public function getValues() {\\n        return $this->values;\\n    }\\n}\\n$config = new A();\\n$config->getValues()['a'] = 'a';'\",\n                  \"markdown\": \"Reports call to a function that returns array by value, which makes the assignment operation non-working. Return by reference shall be used instead.\\n\\n**For example:**\\n\\n\\n    <?php\\n    class A {\\n        private $values = [];\\n        public function getValues() {\\n            return $this->values;\\n        }\\n    }\\n    $config = new A();\\n    $config->getValues()['a'] = 'a';\\n\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArrayModificationWillNotHaveEffectInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpConstructorStyleInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Old style constructor\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports old-style constructor declarations ('ClassName()') and suggests replacing them with new-style constructors ('__construct()'). Prior to PHP 8.0, old-style constructor syntax used in the classes in the global namespace is treated as deprecated and will result in an 'E_DEPRECATED' error. If both a '__construct()' and a 'ClassName()' method are defined, '__construct()' will be called. In namespaced classes, or any classes as of PHP 8.0, a 'ClassName()' method never has any special meaning and will never be called as a constructor. As a result, the inspection does not report such cases if the PHP language level is set to 8.0 or later. See Constructors and destructors (php.net) for details.\",\n                  \"markdown\": \"Reports old-style constructor declarations (`ClassName()`) and suggests replacing them with new-style constructors (`__construct()`).\\n\\n\\nPrior to PHP 8.0, old-style constructor syntax used in the classes in the global namespace is treated as deprecated and will result in an `E_DEPRECATED` error. If both a `__construct()` and a `ClassName()` method are defined, `__construct()` will be called.\\n\\nIn namespaced classes, or any classes as of PHP 8.0, a `ClassName()` method never has any special meaning and will never be called as a constructor. As a result, the inspection does not report such cases if the PHP language level is set to 8.0 or later.\\n\\n\\nSee [Constructors and destructors (php.net)](https://www.php.net/manual/en/language.oop5.decon.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpConstructorStyleInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpNonStrictObjectEqualityInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Non-strict object equality\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of the comparison operator ('==') for comparing object variables. Object variables are compared as follows: When using the comparison operator ('=='), two object instances are considered equal if they have the same attributes and values (values are compared with '=='), and are instances of the same class. When using the identity operator ('==='), object variables are considered identical if and only if they refer to the same instance of the same class. See Comparing Objects (php.net) for details.\",\n                  \"markdown\": \"Reports the usages of the comparison operator (`==`) for comparing object variables.\\n\\n\\nObject variables are compared as follows:\\n\\n* When using the comparison operator (`==`), two object instances are considered equal if they have the same attributes and values (values are compared with `==`), and are instances of the same class.\\n* When using the identity operator (`===`), object variables are considered identical if and only if they refer to the same instance of the same class.\\n\\n\\nSee [Comparing Objects (php.net)](http://www.php.net/manual/en/language.oop5.object-comparison.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpNonStrictObjectEqualityInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUndefinedVariableInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Undefined variable\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Produces two types of warnings: Undefined variable: the variable's definition is not found in the project files, configured include paths, or among the PHP predefined variables. Variable might have not been defined: there are one or more paths to reach the line with the variable usage without defining it. Use the options below to customize the inspection: Report that variable is probably undefined: clear the checkbox to disable the Variable might have not been defined warnings. Enable inspection in global space: by default, the inspection is enabled for global space. Clear the checkbox to only report undefined variables from functions' local scope. Search for variable's definition outside the current file: if selected, the IDE reports a global variable as undefined only in case there are no 'include' or 'require' statements in the current file and the variable's definition cannot be found in the project. Note that the IDE does not examine the actual content of included files but only checks the presence of 'include' or 'require' statements. Otherwise, if not selected, the IDE searches for the variable's definition only in the current file and ignores the 'include' or 'require' statements if any.\",\n                  \"markdown\": \"Produces two types of warnings:\\n\\n* *Undefined variable*: the variable's definition is not found in the project files, configured include paths, or among the PHP predefined variables.\\n* *Variable might have not been defined*: there are one or more paths to reach the line with the variable usage without defining it.\\n\\n\\nUse the options below to customize the inspection:\\n\\n* **Report that variable is probably undefined** : clear the checkbox to disable the *Variable might have not been defined* warnings.\\n* **Enable inspection in global space**: by default, the inspection is enabled for global space. Clear the checkbox to only report undefined variables from functions' local scope.\\n*\\n  **Search for variable's definition outside the current file** : if selected, the IDE reports a global variable as undefined only in case there are no `include` or `require` statements in the current file and the variable's definition cannot be found in the project. Note that the IDE does not examine the actual content of included files but only checks the presence of `include` or `require` statements.\\n\\n\\n  Otherwise, if not selected, the IDE searches for the variable's definition only in the current file and ignores the `include` or `require` statements if any.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUndefinedVariableInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Undefined symbols\",\n                      \"index\": 26,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUsageOfSilenceOperatorInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Usage of a silence operator\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of the silence operator ('@'), which is highly discouraged. See Error Control Operators (php.net) for details.\",\n                  \"markdown\": \"Reports the usages of the silence operator (`@`), which is highly discouraged.\\n\\nSee [Error Control Operators (php.net)](https://www.php.net/manual/en/language.operators.errorcontrol.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUsageOfSilenceOperatorInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpShortOpenTagInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Short open tag usage\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports short PHP opening tag '<?' usages. Since short tags can be disabled in the PHP interpreter configuration, using them may lead to code compatibility issues. See PHP tags (php.net) for details.\",\n                  \"markdown\": \"Reports short PHP opening tag `<?` usages. Since short tags can be disabled in the PHP interpreter configuration, using them may lead to code compatibility issues.\\n\\n\\nSee [PHP tags (php.net)](https://www.php.net/manual/en/language.basic-syntax.phptags.php#language.basic-syntax.phptags) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpShortOpenTagInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpIntRangesMismatchInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Number ranges mismatch\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the assignments and return statements whose arguments do not match the expected ranges specified via 'int<min, max>' PHPDoc syntax.\",\n                  \"markdown\": \"Reports the assignments and return statements whose arguments do not match the expected ranges specified via `int<min, max>` PHPDoc syntax.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpIntRangesMismatchInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPDoc\",\n                      \"index\": 2,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpReturnDocTypeMismatchInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Return type in PHPDoc comment does not match the actual return type\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the return types in PHPDoc comments that do not match the actual return type of a function.\",\n                  \"markdown\": \"Reports the return types in PHPDoc comments that do not match the actual return type of a function.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpReturnDocTypeMismatchInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPDoc\",\n                      \"index\": 2,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpElementIsNotAvailableInCurrentPhpVersionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Element is not available in configured PHP version\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of entities which were introduced in PHP version later than configured one.\",\n                  \"markdown\": \"Reports the usages of entities which were introduced in PHP version later than configured one.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpElementIsNotAvailableInCurrentPhpVersionInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpFieldCanBePromotedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Property can be promoted\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the properties that can be replaced with promoted versions. See Constructor Property Promotion (php.net) for details.\",\n                  \"markdown\": \"Reports the properties that can be replaced with promoted versions.\\n\\n\\nSee [Constructor Property Promotion (php.net)](https://wiki.php.net/rfc/constructor_promotion) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpFieldCanBePromotedInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpPrivateFieldCanBeLocalVariableInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Private property can be local\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the private properties that are used only in a single method. Such properties can be replaced with local variables.\",\n                  \"markdown\": \"Reports the private properties that are used only in a single method. Such properties can be replaced with local variables.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpPrivateFieldCanBeLocalVariableInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpTypedPropertyMightBeUninitializedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Typed property might be uninitialized\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the attempts to read from an uninitialized typed property. Such attempts will result in 'TypeError'. Typed properties should be initialized in any of the following ways: by a default value in the constructor by the '__get()' magic getter in-place, at the moment of usage See Uninitialized and Unset Properties (php.net) for details.\",\n                  \"markdown\": \"Reports the attempts to read from an uninitialized typed property. Such attempts will result in `TypeError`.\\n\\n\\nTyped properties should be initialized in any of the following ways:\\n\\n* by a default value\\n* in the constructor\\n* by the `__get()` magic getter\\n* in-place, at the moment of usage\\n\\n\\nSee [Uninitialized and Unset Properties (php.net)](https://wiki.php.net/rfc/typed_properties_v2#uninitialized_and_unset_properties) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpTypedPropertyMightBeUninitializedInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Control flow\",\n                      \"index\": 12,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMissingParamTypeInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Missing parameter's type declaration\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the parameters that have no type declaration specified.\",\n                  \"markdown\": \"Reports the parameters that have no type declaration specified.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMissingParamTypeInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Type compatibility\",\n                      \"index\": 23,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnnecessaryFullyQualifiedNameInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unnecessary fully qualified name\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of fully qualified class names, which can be shortened without adding the 'use' statement.\",\n                  \"markdown\": \"Reports the usages of fully qualified class names, which can be shortened without adding the `use` statement.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnnecessaryFullyQualifiedNameInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMissingParentCallCommonInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Missing parent call for method\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the methods that do not call their parent method.\",\n                  \"markdown\": \"Reports the methods that do not call their parent method.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMissingParentCallCommonInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMixedReturnTypeCanBeReducedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'mixed' return type can be narrowed\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports 'mixed' return types that can be narrowed down to more concrete types.\",\n                  \"markdown\": \"Reports 'mixed' return types that can be narrowed down to more concrete types.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMixedReturnTypeCanBeReducedInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpTraditionalSyntaxArrayLiteralInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Traditional syntax array literal detected\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports traditional array syntax ('array()') usages in array literals and suggests replacing them with short array syntax ('[]').\",\n                  \"markdown\": \"Reports traditional array syntax (`array()`) usages in array literals and suggests replacing them with short array syntax (`[]`).\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpTraditionalSyntaxArrayLiteralInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpConditionCheckedByNextConditionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Condition inside logical expression checked by subsequent condition\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the conditions inside logical binary expressions that are covered by subsequent conditions and are therefore redundant.\",\n                  \"markdown\": \"Reports the conditions inside logical binary expressions that are covered by subsequent conditions and are therefore redundant.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpConditionCheckedByNextConditionInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Control flow\",\n                      \"index\": 12,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpInconsistentReturnPointsInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Inconsistent return points\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports inconsistencies in function/method exit points. The following types of inconsistencies are reported: The function/method contains the 'return' statements both with and without arguments. The function/method may return a value or otherwise end its execution without returning anything. Technically these are not errors, but practically they usually indicate a programming mistake.\",\n                  \"markdown\": \"Reports inconsistencies in function/method exit points.\\n\\n\\nThe following types of inconsistencies are reported:\\n\\n* The function/method contains the `return` statements both with and without arguments.\\n* The function/method may return a value or otherwise end its execution without returning anything.\\n\\n\\nTechnically these are not errors, but practically they usually indicate a programming mistake.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpInconsistentReturnPointsInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpNoReturnAttributeCanBeAddedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"NoReturn attribute can be added\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports function without '#[NoReturn]' that are always halting their execution by calling other exitPoint functions attribute.\",\n                  \"markdown\": \"Reports function without `#[NoReturn]` that are always halting their execution by calling other exitPoint functions attribute.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpNoReturnAttributeCanBeAddedInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Attributes\",\n                      \"index\": 45,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpConditionCanBeReplacedWithMinMaxCallInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Condition can be replaced with 'min()'/'max()' call\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the conditions that perform manual min/max calculation instead of calling 'min'/'max' functions.\",\n                  \"markdown\": \"Reports the conditions that perform manual min/max calculation instead of calling `min`/`max` functions.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpConditionCanBeReplacedWithMinMaxCallInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpInapplicableAttributeTargetDeclarationInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Non-applicable attribute target declaration\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the attributes that do not have the appropriate 'Attribute::TARGET_*' flag in their arguments declaration. See Attributes (php.net) for details.\",\n                  \"markdown\": \"Reports the attributes that do not have the appropriate `Attribute::TARGET_*` flag in their arguments declaration.\\n\\n\\nSee [Attributes (php.net)](https://wiki.php.net/rfc/attributes_v2) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpInapplicableAttributeTargetDeclarationInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Attributes\",\n                      \"index\": 45,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMissingParentCallMagicInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Missing parent call for magic methods\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the magic methods that do not call their parent magic method.\",\n                  \"markdown\": \"Reports the magic methods that do not call their parent magic method.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMissingParentCallMagicInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpGotoIntoLoopInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Goto into loop statement\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'goto' labels that are located inside loops or 'switch' statements. See goto (php.net) for details.\",\n                  \"markdown\": \"Reports the `goto` labels that are located inside loops or `switch` statements.\\n\\n\\nSee [goto (php.net)](https://www.php.net/manual/en/control-structures.goto.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpGotoIntoLoopInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMatchExpressionCanBeReplacedWithTernaryInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'match' expression can be replace with ternary expression\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'match' expressions containing a default arm and a single non-default arm. Such 'match' expressions can be replaced with ternary expressions. See Match expression (php.net) for details.\",\n                  \"markdown\": \"Reports the `match` expressions containing a default arm and a single non-default arm. Such `match` expressions can be replaced with ternary expressions.\\n\\n\\nSee [Match expression (php.net)](https://wiki.php.net/rfc/match_expression_v2) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMatchExpressionCanBeReplacedWithTernaryInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDeprecatedStdLibCallInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Deprecated Standard Library call\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the calls to Standard PHP Library functions that are deprecated starting from PHP 8.1. The following calls are reported: 'key()', 'current()', 'next()', 'prev()', and 'reset()' calls with objects as arguments. 'mb_check_encoding()' calls without arguments. 'get_class()', 'get_parent_class()' and 'get_called_class()' calls without arguments. 'IntlCalendar::roll()' calls with a Boolean passed as the '$value' argument. 'ctype_*()' calls with non-string arguments. See PHP RFC: Deprecations for PHP 8.1 for details.\",\n                  \"markdown\": \"Reports the calls to Standard PHP Library functions that are deprecated starting from PHP 8.1.\\n\\n\\nThe following calls are reported:\\n\\n* `key()`, `current()`, `next()`, `prev()`, and `reset()` calls with objects as arguments.\\n* `mb_check_encoding()` calls without arguments.\\n* `get_class()`, `get_parent_class()` and `get_called_class()` calls without arguments.\\n* `IntlCalendar::roll()` calls with a Boolean passed as the `$value` argument.\\n* `ctype_*()` calls with non-string arguments.\\n\\n\\nSee [PHP RFC: Deprecations for PHP 8.1](https://wiki.php.net/rfc/deprecations_php_8_1) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDeprecatedStdLibCallInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMissingBreakStatementInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Missing 'break' statement\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'case' clauses in 'switch' statements that do not end with a 'break' or a 'return' statement. If a 'case' clause does not end with 'break' or 'return', its execution can unintentionally fall through the next case.\",\n                  \"markdown\": \"Reports the `case` clauses in `switch` statements that do not end with a `break` or a `return` statement.\\n\\n\\nIf a `case` clause does not end with `break` or `return`, its execution can unintentionally fall through the next case.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMissingBreakStatementInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMethodMayBeStaticInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Method can be made 'static'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the methods that don't use any instance references and thus may be converted to static methods.\",\n                  \"markdown\": \"Reports the methods that don't use any instance references and thus may be converted to static methods.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMethodMayBeStaticInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpForeachArrayIsUsedAsValueInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Foreach array is used as value\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the variables that are used in a 'foreach' loop as both an array expression and an array's key or value (for example, 'foreach ($items as $items) {}'). Commonly, this is the result of a typing error.\",\n                  \"markdown\": \"Reports the variables that are used in a `foreach` loop as both an array expression and an array's key or value (for example, `foreach ($items as $items) {}`).\\n\\n\\nCommonly, this is the result of a typing error.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpForeachArrayIsUsedAsValueInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpToStringMayProduceExceptionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'__toString' may throw an exception\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of '__toString' that may throw an exception, which is not allowed for PHP language level lower than 7.4.\",\n                  \"markdown\": \"Reports the usages of `__toString` that may throw an exception, which is not allowed for PHP language level lower than 7.4.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpToStringMayProduceExceptionInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDeprecatedDollarBraceStringInterpolationInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Deprecated '${' string interpolation\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports '${var}' and '${expr}' interpolations in strings. Such interpolations are deprecated starting from PHP 8.2. See Deprecate ${} string interpolation (php.net) for details.\",\n                  \"markdown\": \"Reports `${var}` and `${expr}` interpolations in strings. Such interpolations are deprecated starting from PHP 8.2.\\n\\n\\nSee [Deprecate ${} string interpolation (php.net)](https://wiki.php.net/rfc/deprecate_dollar_brace_string_interpolation) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDeprecatedDollarBraceStringInterpolationInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpSeparateElseIfInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Else if\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of the 'else if' constructs specified in two words. According to PSR-12, the keyword 'elseif' SHOULD be used instead of 'else if' so that all control keywords look like single words. See PSR-12: Extended Coding Style (php-fig.org) for details.\",\n                  \"markdown\": \"Reports the usages of the `else if` constructs specified in two words.\\n\\nAccording to PSR-12, the keyword `elseif` SHOULD be used instead of `else if` so that all control keywords look like single words.\\n\\n\\nSee [PSR-12: Extended Coding Style (php-fig.org)](https://www.php-fig.org/psr/psr-12/#51-if-elseif-else) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpSeparateElseIfInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style/PSR-12\",\n                      \"index\": 61,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUndefinedFunctionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Undefined function\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the references to functions that are not defined in the project files, configured include paths, or among the PHP predefined functions.\",\n                  \"markdown\": \"Reports the references to functions that are not defined in the project files, configured include paths, or among the PHP predefined functions.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUndefinedFunctionInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Undefined symbols\",\n                      \"index\": 26,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDuplicateArrayKeysInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Duplicate array keys\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports duplicate keys in array declarations. If multiple elements in the array declaration use the same key, only the last one will be used, and all others will be overwritten.\",\n                  \"markdown\": \"Reports duplicate keys in array declarations.\\n\\nIf multiple elements in the array declaration use the same key, only the last one will be used, and all others will be overwritten.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDuplicateArrayKeysInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnitDeprecatedExpectExceptionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Deprecated expectException usage\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports deprecated usages of 'expectException()'. Support for using the 'expectException()' method with '\\\\PHPUnit\\\\Framework\\\\Error\\\\Deprecated', '\\\\PHPUnit\\\\Framework\\\\Error\\\\Error', '\\\\PHPUnit\\\\Framework\\\\Error\\\\Notice', and '\\\\PHPUnit\\\\Framework\\\\Error\\\\Warning' is deprecated and will be removed in PHPUnit 10. Instead, the 'expectDeprecation()', 'expectError()', 'expectNotice()', and 'expectWarning()' methods should be used. See Testing PHP Errors, Warnings, and Notices (phpunit.readthedocs.io) for details.\",\n                  \"markdown\": \"Reports deprecated usages of `expectException()`.\\n\\n\\nSupport for using the `expectException()` method with\\n`\\\\PHPUnit\\\\Framework\\\\Error\\\\Deprecated`,\\n`\\\\PHPUnit\\\\Framework\\\\Error\\\\Error`,\\n`\\\\PHPUnit\\\\Framework\\\\Error\\\\Notice`, and\\n`\\\\PHPUnit\\\\Framework\\\\Error\\\\Warning` is deprecated and will be removed in PHPUnit 10.\\n\\n\\nInstead, the `expectDeprecation()`, `expectError()`, `expectNotice()`, and\\n`expectWarning()` methods should be used.\\n\\n\\nSee [Testing PHP Errors, Warnings, and Notices (phpunit.readthedocs.io)](https://phpunit.readthedocs.io/en/stable/writing-tests-for-phpunit.html#testing-php-errors-warnings-and-notices) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnitDeprecatedExpectExceptionInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPUnit\",\n                      \"index\": 20,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnitTestFailedLineInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Failed line in test\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports failed method calls or assertions in tests. It helps detect the failed line in code faster and start debugging it immediately. Example: 'function test() {\\n      $this->assertEquals(1,2); //highlighted\\n  }'\",\n                  \"markdown\": \"Reports failed method calls or assertions in tests. It helps detect the failed line in code faster and start debugging it immediately.\\n\\n**Example:**\\n\\n\\n      function test() {\\n          $this->assertEquals(1,2); //highlighted\\n      }\\n\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnitTestFailedLineInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPUnit\",\n                      \"index\": 20,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMatchCanBeReplacedWithSwitchStatementInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'match' can be replaced with 'switch' statement\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'match' expressions that can be replaced with 'switch' statements. Note that 'match' expressions use strict type comparison, while 'switch' statements rely on loose comparison. As a result, the expression semantics may change after replacement. See match (php.net) and switch (php.net) for details.\",\n                  \"markdown\": \"Reports the `match` expressions that can be replaced with `switch` statements.\\n\\n\\nNote that `match` expressions use strict type comparison, while `switch` statements rely on loose comparison. As a\\nresult, the expression semantics may change after replacement.\\n\\n\\nSee [match (php.net)](https://www.php.net/manual/en/control-structures.match.php) and [switch (php.net)](https://www.php.net/manual/en/control-structures.switch.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMatchCanBeReplacedWithSwitchStatementInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpSecondWriteToReadonlyPropertyInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Second write to 'readonly' property\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports reassignments of 'readonly' properties. Such properties cannot be modified after initialization. See Readonly properties (php.net) for details.\",\n                  \"markdown\": \"Reports reassignments of `readonly` properties. Such properties cannot be modified after initialization.\\n\\n\\nSee [Readonly properties (php.net)](https://wiki.php.net/rfc/readonly_properties_v2) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpSecondWriteToReadonlyPropertyInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpEnforceDocCommentInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Enforce PHPDoc comment\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the elements without a PHPDoc comment or with a PHPDoc comment only containing the '@noinspection' tag. You can use Missing PHPDoc Comment inspection to report only non-fully typed elements.\",\n                  \"markdown\": \"Reports the elements without a PHPDoc comment or with a PHPDoc comment only containing the `@noinspection` tag.\\n\\nYou can use *Missing PHPDoc Comment* inspection to report only non-fully typed elements.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpEnforceDocCommentInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPDoc/Code style\",\n                      \"index\": 11,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDocFinalChecksInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Overriding method/extending class marked as '@final'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports override of method or extending of class with '@final' in the PHPDoc.\",\n                  \"markdown\": \"Reports override of method or extending of class with `@final` in the PHPDoc.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDocFinalChecksInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpPureAttributeCanBeAddedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'#[Pure]' attribute can be added\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the functions that are non-trivially pure. Such functions have other functions calls in their body, but all such calls do not produce any side effects.\",\n                  \"markdown\": \"Reports the functions that are non-trivially pure. Such functions have other functions calls in their body, but all such calls do not produce any side effects.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpPureAttributeCanBeAddedInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Attributes\",\n                      \"index\": 45,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpVarTagWithoutVariableNameInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Type tag without variable name\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the PHPDoc type tags ('@var','@type','@param') that are provided without a specified variable/parameter name. Such tags do not provide any type information for expressions and should be either deleted or expanded to include a concrete variable name for which the type is provided.\",\n                  \"markdown\": \"Reports the PHPDoc type tags (`@var`,`@type`,`@param`) that are provided without a specified variable/parameter name. Such tags do not provide any type information for expressions and should be either deleted or expanded to include a concrete variable name for which the type is provided.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpVarTagWithoutVariableNameInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPDoc\",\n                      \"index\": 2,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpImmutablePropertyIsWrittenInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Immutable property written in invalid scope\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Highlights write access references to properties, for which the write access scope declared via '#[Immutable]' is stricter than the reference scope.\",\n                  \"markdown\": \"Highlights write access references to properties, for which the write access scope declared via `#[Immutable]` is stricter than the reference scope.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpImmutablePropertyIsWrittenInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Attributes\",\n                      \"index\": 45,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDeprecatedAssertDeclarationInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Deprecated 'assert()' function declaration\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'assert()' function declarations. Declaring the 'assert()' function is global namespace is forbidden. Starting from PHP 7.3, declaring the 'assert()' function in non-global namespace is deprecated. See assert (php.net) for details.\",\n                  \"markdown\": \"Reports the `assert()` function declarations.\\n\\n* Declaring the `assert()` function is global namespace is forbidden.\\n* Starting from PHP 7.3, declaring the `assert()` function in non-global namespace is deprecated.\\n\\n\\nSee [assert (php.net)](https://www.php.net/manual/en/function.assert.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDeprecatedAssertDeclarationInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDocSignatureIsNotCompleteInspection\",\n                \"shortDescription\": {\n                  \"text\": \"PHPDoc comment signature is not complete\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the PHPDoc comments that contain at least one '@param' or '@return' tag but are missing some of the '@param' or '@return' tags for parameters or return types specified in the function/method declaration.\",\n                  \"markdown\": \"Reports the PHPDoc comments that contain at least one `@param` or `@return` tag but are missing some of the `@param` or `@return` tags for parameters or return types specified in the function/method declaration.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDocSignatureIsNotCompleteInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPDoc/Code style\",\n                      \"index\": 11,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpAutovivificationOnFalseValuesInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Automatic conversion of 'false' to array is deprecated\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports automatic conversions of 'false' values to arrays. Such expressions are deprecated starting from PHP 8.1. See Deprecate autovivification on false for details.\",\n                  \"markdown\": \"Reports automatic conversions of `false` values to arrays. Such expressions are deprecated starting from PHP 8.1.\\n\\n\\nSee [Deprecate autovivification on false](https://wiki.php.net/rfc/autovivification_false) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpAutovivificationOnFalseValuesInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpSignatureMismatchDuringInheritanceInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Declaration of overridden method should be compatible with parent class\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the overridden methods declarations that are not compatible with the parent class. The inspection is enabled only for the PHP language level lower than 8.0.\",\n                  \"markdown\": \"Reports the overridden methods declarations that are not compatible with the parent class. The inspection is enabled only for the PHP language level lower than 8.0.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpSignatureMismatchDuringInheritanceInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHP strict standards\",\n                      \"index\": 67,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpTraitUsageOutsideUseInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Trait usage is not allowed\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the class references that are resolved to traits but are specified outside 'use' statements. Such usages are most probably the result of a programming mistake, since traits cannot be instantiated and any 'instanceof'-like behaviour is not supported for traits by design. See Traits (php.net) for details.\",\n                  \"markdown\": \"Reports the class references that are resolved to traits but are specified outside `use` statements. Such usages are most probably the result of a programming mistake, since traits cannot be instantiated and any `instanceof`-like behaviour is not supported for traits by design.\\n\\n\\nSee [Traits (php.net)](https://www.php.net/manual/en/language.oop5.traits.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpTraitUsageOutsideUseInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpStrictTypeCheckingInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Strict type checking rules violation\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports violations of the strict type checking rules. In strict mode, only the variables exactly matching the declaration types are accepted. Strict type-checking mode can be enabled: Per file, if the 'declare(strict_types=1)' directive is specified. The directive must be the first statement in a file, block mode is explicitly disallowed. For all files, if the Enable for all files inspection option is enabled. See Strict typing (php.net) for details.\",\n                  \"markdown\": \"Reports violations of the strict type checking rules.\\n\\n\\nIn strict mode, only the variables exactly matching the declaration types are accepted. Strict type-checking mode can be enabled:\\n\\n* Per file, if the `declare(strict_types=1)` directive is specified. The directive must be the first statement in a file, block mode is explicitly disallowed.\\n* For all files, if the **Enable for all files** inspection option is enabled.\\n\\n\\nSee [Strict typing (php.net)](https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpStrictTypeCheckingInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Type compatibility\",\n                      \"index\": 23,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpIfWithCommonPartsInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'if' with common parts\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'if' statements with duplicated common parts.\",\n                  \"markdown\": \"Reports the `if` statements with duplicated common parts.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpIfWithCommonPartsInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Control flow\",\n                      \"index\": 12,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpStaticAsDynamicMethodCallInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Static method called as dynamic\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports dynamic calls to static class methods. If the target has the magic method '__call', a separate inspection severity and highlighting level can be set.\",\n                  \"markdown\": \"Reports dynamic calls to static class methods.\\n\\nIf the target has the magic method `__call`, a separate inspection severity and highlighting level can be set.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpStaticAsDynamicMethodCallInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDeprecatedImplodeUsageInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Deprecated 'implode/join' usage\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports deprecated usage of the 'implode' and 'join' functions. Starting from PHP 7.4, using 'implode' and 'join' with an array as the first argument and a string as the second argument is deprecated. See Deprecations for PHP 7.4 (php.net) for details.\",\n                  \"markdown\": \"Reports deprecated usage of the `implode` and `join` functions.\\n\\nStarting from PHP 7.4, using `implode` and `join` with an array as the first argument and a string as the second argument is deprecated.\\n\\n\\nSee [Deprecations for PHP 7.4 (php.net)](https://wiki.php.net/rfc/deprecations_php_7_4#implode_parameter_order_mix) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDeprecatedImplodeUsageInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDangerousArrayInitializationInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Dangerous array initialization\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports dangerous array initializations (such as '$arr[] = value'). This practice is discouraged because if '$arr' already contains some value (for example, a string from a request variable), then this value will stay in place and '[]' may actually stand for string access operator. It is always preferable to initialize a variable by direct assignment. See Creating/modifying with square bracket syntax (php.net) for details.\",\n                  \"markdown\": \"Reports dangerous array initializations (such as `$arr[] = value`).\\n\\n\\nThis practice is discouraged because if `$arr` already contains some value (for example, a string from a request variable), then this value will stay in place and `[]` may actually stand for string access operator. It is always preferable to initialize a variable by direct assignment.\\n\\nSee [Creating/modifying with square bracket syntax (php.net)](https://www.php.net/manual/en/language.types.array.php#language.types.array.syntax.modifying) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDangerousArrayInitializationInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpOverridingMethodVisibilityInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Method visibility should not be overridden\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Checks that the methods don't override visibility. Overriding a 'protected' method with a 'public' method in a child class makes this method accessible from everywhere. This violates the encapsulation principle and is considered bad practice. See Method Visibility (php.net) for details.\",\n                  \"markdown\": \"Checks that the methods don't override visibility.\\n\\n\\nOverriding a `protected` method with a `public` method in a child class makes this method accessible from everywhere.\\nThis violates the encapsulation principle and is considered bad practice.\\n\\n\\nSee [Method Visibility (php.net)](https://www.php.net/manual/en/language.oop5.visibility.php#language.oop5.visiblity-methods) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpOverridingMethodVisibilityInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMockeryInvalidMockingMethodInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Invalid Mockery mocking target\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the methods and classes that are incorrectly mocked in Mockery tests. The following entities are reported: 'private' methods 'protected' methods without appropriate '\\\\Mockery\\\\Mock::shouldAllowMockingProtectedMethods' call\",\n                  \"markdown\": \"Reports the methods and classes that are incorrectly mocked in Mockery tests.\\n\\n\\nThe following entities are reported:\\n\\n* `private` methods\\n* `protected` methods without appropriate `\\\\Mockery\\\\Mock::shouldAllowMockingProtectedMethods` call\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMockeryInvalidMockingMethodInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPUnit\",\n                      \"index\": 20,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpForeachOverSingleElementArrayLiteralInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Foreach over array literal with single element\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'foreach' statements that iterate over an array literal containing a single element.\",\n                  \"markdown\": \"Reports the `foreach` statements that iterate over an array literal containing a single element.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpForeachOverSingleElementArrayLiteralInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpClassNamingConventionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Class name is not following coding convention\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the classes' names that are either too short, too long, or do not follow the specified regular expression pattern. Some coding styles have a special naming convention for classes. Use the inspection options to specify minimum/maximum length and the regular expression expected for classes' names. To ignore the names' length, specify 0. To learn more about regular expressions, refer to the Quick Start guide (regular-expressions.info).\",\n                  \"markdown\": \"Reports the classes' names that are either too short, too long, or do not follow the specified regular expression pattern. Some coding styles have a special naming convention for classes.\\n\\n\\nUse the inspection options to specify minimum/maximum length and the regular expression expected for classes' names.\\nTo ignore the names' length, specify **0**.\\n\\n\\nTo learn more about regular expressions, refer to the [Quick Start guide (regular-expressions.info)](https://www.regular-expressions.info/quickstart.html).\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpClassNamingConventionInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Naming conventions\",\n                      \"index\": 4,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpCoveredCharacterInClassInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Element in class is already covered\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the elements in regular expression character classes that are already covered by another element in the same class. Such elements are redundant and can be safely removed.\",\n                  \"markdown\": \"Reports the elements in regular expression character classes that are already covered by another element in the same class. Such elements are redundant and can be safely removed.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpCoveredCharacterInClassInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Regular expressions\",\n                      \"index\": 68,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpVariableIsUsedOnlyInClosureInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Variable is only used inside closure\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports variables in closures' 'use' list that are only used inside closure.\",\n                  \"markdown\": \"Reports variables in closures' `use` list that are only used inside closure.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpVariableIsUsedOnlyInClosureInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpLongTypeFormInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Short form of type keywords\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports usages of long form type keywords. According to PSR-12, short form of type keywords MUST be used, that is 'bool' instead of 'boolean', 'int' instead of 'integer', and so on. See Keywords and Types (php-fig.org) for details.\",\n                  \"markdown\": \"Reports usages of long form type keywords.\\n\\n\\nAccording to PSR-12, short form of type keywords MUST be used, that is `bool` instead of `boolean`, `int` instead of `integer`, and so on.\\n\\n\\nSee [Keywords and Types (php-fig.org)](https://www.php-fig.org/psr/psr-12/#25-keywords-and-types) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpLongTypeFormInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style/PSR-12\",\n                      \"index\": 61,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnreachableStatementInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unreachable statement\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the statements that cannot be reached.\",\n                  \"markdown\": \"Reports the statements that cannot be reached.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnreachableStatementInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Control flow\",\n                      \"index\": 12,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpClosureCanBeConvertedToShortArrowFunctionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Closure can be converted to arrow function\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the anonymous functions that can be transformed to short arrow functions. Support for short arrow functions is available since PHP 7.4. See PHP RFC: Arrow Functions 2.0 (php.net) for details.\",\n                  \"markdown\": \"Reports the anonymous functions that can be transformed to short arrow functions. Support for short arrow functions is available since PHP 7.4.\\n\\n\\nSee [PHP RFC: Arrow Functions 2.0 (php.net)](https://wiki.php.net/rfc/arrow_functions_v2) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpClosureCanBeConvertedToShortArrowFunctionInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpCSFixerValidationInspection\",\n                \"shortDescription\": {\n                  \"text\": \"PHP CS Fixer validation\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports coding style problems detected by PHP CS Fixer. The inspection requires PHP CS Fixer to be properly installed and set up in the IDE under Settings | PHP | Quality Tools | PHP CS Fixer. To learn more about installing PHP CS Fixer, see PHP-CS-Fixer installation (GitHub).\",\n                  \"markdown\": \"Reports coding style problems detected by PHP CS Fixer.\\n\\n\\nThe inspection requires PHP CS Fixer to be properly installed and set up in the IDE under\\n[Settings \\\\| PHP \\\\| Quality Tools \\\\| PHP CS Fixer](settings://settings.php.quality.tools?CS%20Fixer).\\n\\n\\nTo learn more about installing PHP CS Fixer, see [PHP-CS-Fixer installation (GitHub)](https://github.com/FriendsOfPHP/PHP-CS-Fixer#installation).\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpCSFixerValidationInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Quality tools\",\n                      \"index\": 70,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnitDeprecatedCallsIn10VersionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Method is deprecated in PHPUnit 10\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the calls to the PHPUnit assertion methods that are removed in PHPUnit 10.\",\n                  \"markdown\": \"Reports the calls to the PHPUnit assertion methods that are removed in PHPUnit 10.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnitDeprecatedCallsIn10VersionInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPUnit\",\n                      \"index\": 20,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnhandledExceptionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unhandled exception\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the exceptions that are neither enclosed in a 'try-catch' block nor documented via the '@throws' tag.\",\n                  \"markdown\": \"Reports the exceptions that are neither enclosed in a `try-catch` block nor documented via the `@throws` tag.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnhandledExceptionInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Error handling\",\n                      \"index\": 72,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpIncludeInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unresolved include\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports non-resolved 'include', 'include_once', 'require', and 'require_once' expressions.\",\n                  \"markdown\": \"Reports non-resolved `include`, `include_once`, `require`, and `require_once` expressions.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpIncludeInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnitUndefinedDataProviderInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Undefined PHPUnit data provider\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the references to functions/methods in the '@dataProvider' PHPDoc tag that are not resolved. Note that when resolving 'dataProvider', PHPUnit doesn't take 'use' statements into account.\",\n                  \"markdown\": \"Reports the references to functions/methods in the `@dataProvider` PHPDoc tag that are not resolved.\\n\\nNote that when resolving `dataProvider`, PHPUnit doesn't take `use` statements into account.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnitUndefinedDataProviderInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPUnit\",\n                      \"index\": 20,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpFieldAssignmentTypeMismatchInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Type mismatch in property assignment\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports type violations in properties assignments.\",\n                  \"markdown\": \"Reports type violations in properties assignments.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpFieldAssignmentTypeMismatchInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Type compatibility\",\n                      \"index\": 23,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMissingParentConstructorInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Missing parent call for constructor\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the constructors that do not call their parent constructor.\",\n                  \"markdown\": \"Reports the constructors that do not call their parent constructor.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMissingParentConstructorInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnitAssertEqualsCanBeReplacedWithAssertTrueOrFalseInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Assertion can be replaced with 'assertTrue/assertFalse'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'assertEquals()' calls with the 'true'/'false' arguments in PHPUnit tests. Such usages can be replaced with 'assertTrue()'/'assertFalse()' calls.\",\n                  \"markdown\": \"Reports the `assertEquals()` calls with the `true`/`false` arguments in PHPUnit tests. Such usages can be replaced with `assertTrue()`/`assertFalse()` calls.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnitAssertEqualsCanBeReplacedWithAssertTrueOrFalseInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPUnit\",\n                      \"index\": 20,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDynamicAsStaticMethodCallInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Dynamic method called as static\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports static calls to dynamic class methods. For classes having the magic method '__callStatic', a separate inspection severity and highlighting level can be set.\",\n                  \"markdown\": \"Reports static calls to dynamic class methods.\\n\\nFor classes having the magic method `__callStatic`, a separate inspection severity and highlighting level can be set.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDynamicAsStaticMethodCallInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpReadonlyPropertyWrittenOutsideDeclarationScopeInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Write access to 'readonly' property outside of declaration scope\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the write accesses to 'readonly' properties that are made outside the declaration scope. A declaration scope effectively means non-static methods of the class in which a property is declared. See Readonly properties (php.net) for details.\",\n                  \"markdown\": \"Reports the write accesses to `readonly` properties that are made outside the declaration scope. A declaration scope effectively means non-static methods of the class in which a property is declared.\\n\\n\\nSee [Readonly properties (php.net)](https://wiki.php.net/rfc/readonly_properties_v2) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpReadonlyPropertyWrittenOutsideDeclarationScopeInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpFormatCallWithSingleArgumentInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Format function call with single argument\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'sprintf()' and 'vsprintf()' calls with a single argument. Such calls produce no effect and can be safely unwrapped, that is, replaced with the argument itself.\",\n                  \"markdown\": \"Reports the `sprintf()` and `vsprintf()` calls with a single argument. Such calls produce no effect and can be safely unwrapped, that is, replaced with the argument itself.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpFormatCallWithSingleArgumentInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpIllegalArrayKeyTypeInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Illegal array key type\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the array keys that are of illegal type, such as objects or arrays. See Arrays (php.net) for details.\",\n                  \"markdown\": \"Reports the array keys that are of illegal type, such as objects or arrays.\\n\\n\\nSee [Arrays (php.net)](http://www.php.net/manual/en/language.types.array.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpIllegalArrayKeyTypeInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Type compatibility\",\n                      \"index\": 23,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArrayIsAlwaysEmptyInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Array is always empty at the point of access\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the iterated/accessed arrays that are known to be empty at the point of access.\",\n                  \"markdown\": \"Reports the iterated/accessed arrays that are known to be empty at the point of access.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArrayIsAlwaysEmptyInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpLoopNeverIteratesInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Loop does not iterate\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the loop statements whose bodies will execute at most once. The inspection does not report 'foreach' loops with a key or value used inside the loop body. Commonly, such loops are intended to perform an action only on their first iteration (for example, get the first element of an array).\",\n                  \"markdown\": \"Reports the loop statements whose bodies will execute at most once.\\n\\n\\nThe inspection does not report `foreach` loops with a key or value used inside the loop body. Commonly, such loops are intended to perform an action only on their first iteration (for example, get the first element of an array).\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpLoopNeverIteratesInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Control flow\",\n                      \"index\": 12,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpRegExpUnsupportedModifierInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unsupported modifier\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of the 'e' modifier in regular expression patterns. In PHP 7.0 and later, such usages are deprecated and will emit an 'E_WARNING'.\",\n                  \"markdown\": \"Reports the usages of the `e` modifier in regular expression patterns. In PHP 7.0 and later, such usages are deprecated and will emit an `E_WARNING`.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpRegExpUnsupportedModifierInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Regular expressions\",\n                      \"index\": 68,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpVariableNamingConventionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Variable name is not following coding convention\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the variables' names that are either too short, too long, or do not follow the specified regular expression pattern. Some coding styles have a special naming convention for variables. Use the inspection options to specify minimum/maximum length and the regular expression expected for variables' names. To ignore the names' length, specify 0. To learn more about regular expressions, refer to the Quick Start guide (regular-expressions.info).\",\n                  \"markdown\": \"Reports the variables' names that are either too short, too long, or do not follow the specified regular expression pattern. Some coding styles have a special naming convention for variables.\\n\\n\\nUse the inspection options to specify minimum/maximum length and the regular expression expected for variables' names.\\nTo ignore the names' length, specify **0**.\\n\\n\\nTo learn more about regular expressions, refer to the [Quick Start guide (regular-expressions.info)](https://www.regular-expressions.info/quickstart.html).\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpVariableNamingConventionInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Naming conventions\",\n                      \"index\": 4,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpPassByRefInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Pass parameter by reference\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the arguments in a function/method call that cannot be passed by reference. Only variables and references returned from functions can be passed by reference. See Passing by Reference (php.net) for details.\",\n                  \"markdown\": \"Reports the arguments in a function/method call that cannot be passed by reference.\\n\\n\\nOnly variables and references returned from functions can be passed by reference. See [Passing by Reference (php.net)](https://www.php.net/manual/en/language.references.pass.php#language.references.pass) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpPassByRefInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpWrongStringConcatenationInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Wrong string concatenation\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the attempts to concatenate strings by using the '+' operator instead of the dot ('.') concatenation operator. Such attempts are most likely a programming mistake.\",\n                  \"markdown\": \"Reports the attempts to concatenate strings by using the `+` operator instead of the dot (`.`) concatenation operator. Such attempts are most likely a programming mistake.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpWrongStringConcatenationInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpNonCanonicalElementsOrderInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Non-canonical order of elements\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the PHPDoc tags that have elements listed in non-canonical order. For example, for such tags as '@property', '@param', or '@var', the inspection will report the usages of '[name] [\\\"Type\\\"]' instead of '[\\\"Type\\\"] [name]'.\",\n                  \"markdown\": \"Reports the PHPDoc tags that have elements listed in non-canonical order.\\n\\nFor example, for such tags as `@property`, `@param`, or `@var`, the inspection will report the usages of `[name] [\\\"Type\\\"]` instead of `[\\\"Type\\\"] [name]`.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpNonCanonicalElementsOrderInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPDoc/Code style\",\n                      \"index\": 11,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnnecessaryLocalVariableInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unnecessary local variable\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the local variables that are used in exit statements, such as 'throw', 'return', or 'yield', immediately after assignment.\",\n                  \"markdown\": \"Reports the local variables that are used in exit statements, such as `throw`, `return`, or `yield`, immediately after assignment.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnnecessaryLocalVariableInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpAbstractStaticMethodInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Static function should not be abstract\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the static methods that are declared as abstract.\",\n                  \"markdown\": \"Reports the static methods that are declared as abstract.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpAbstractStaticMethodInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHP strict standards\",\n                      \"index\": 67,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpTooLongMemberReferenceChainInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Member reference chain is too long to analyze\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports method reference chains that are too long for IDE to analyze.\",\n                  \"markdown\": \"Reports method reference chains that are too long for IDE to analyze.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpTooLongMemberReferenceChainInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpInArrayCanBeReplacedWithComparisonInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'in_array' can be replaced with comparison\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'in_array()' calls that are provided with a single-element array as the '$haystack' argument. Such calls can be replaced with direct comparisons. See in_array (php.net) for details.\",\n                  \"markdown\": \"Reports the `in_array()` calls that are provided with a single-element array as the `$haystack` argument. Such calls can be replaced with direct comparisons.\\n\\n\\nSee [in_array (php.net)](https://www.php.net/manual/en/function.in-array.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpInArrayCanBeReplacedWithComparisonInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpRedundantTypeInUnionTypeInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Type declaration is redundant and could be simplified\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports union type declarations that contain redundant types, for example, a union type that contains both the class alias and the original class. See Union Types RFC: Duplicate and redundant types (php.net) for details.\",\n                  \"markdown\": \"Reports union type declarations that contain redundant types, for example, a union type that contains both the class alias and the original class.\\n\\n\\nSee [Union Types RFC: Duplicate and redundant types (php.net)](https://wiki.php.net/rfc/union_types_v2#duplicate_and_redundant_types) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpRedundantTypeInUnionTypeInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Type compatibility\",\n                      \"index\": 23,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpIllegalStringOffsetInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Illegal string offset\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of non-'integer' offsets in string access expressions such as '$str[42]'. Starting from PHP 5.4, string offsets have to be either integers or integer-like strings. Since it's considered bad practice to use strings as a string offset, the inspection reports them, as well. See String access and modification by character (php.net) for details.\",\n                  \"markdown\": \"Reports the usages of non-`integer` offsets in string access expressions such as `$str[42]`.\\n\\n\\nStarting from PHP 5.4, string offsets have to be either integers or integer-like strings.\\nSince it's considered bad practice to use strings as a string offset, the inspection reports them, as well.\\n\\nSee [String access and modification by character (php.net)](https://www.php.net/manual/en/language.types.string.php#language.types.string.substr) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpIllegalStringOffsetInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Type compatibility\",\n                      \"index\": 23,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpModuloByOneInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Modulo operation with '1' as operand\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the modulo expressions '%' that always evaluate to '0' or '1'.\",\n                  \"markdown\": \"Reports the modulo expressions `%` that always evaluate to `0` or `1`.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpModuloByOneInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpRedundantAssignmentToPromotedFieldInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant assignment to promoted property\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports redundant assignments to class properties that duplicate automatic assignments performed through promoted constructor parameters. See Constructor Property Promotion (php.net) for details.\",\n                  \"markdown\": \"Reports redundant assignments to class properties that duplicate automatic assignments performed through promoted constructor parameters.\\n\\n\\nSee [Constructor Property Promotion (php.net)](https://wiki.php.net/rfc/constructor_promotion) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpRedundantAssignmentToPromotedFieldInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArrayPushWithOneElementInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'array_push()' with single element\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'array_push()' calls that are used to add a single element to an array. In such cases, it is recommended to use '$array[] =' instead, which adds no overhead of calling a function. See array_push (php.net) for details.\",\n                  \"markdown\": \"Reports the `array_push()` calls that are used to add a single element to an array. In such cases, it is recommended to use `$array[] =` instead, which adds no overhead of calling a function.\\n\\n\\nSee [array_push (php.net)](https://www.php.net/manual/en/function.array-push.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArrayPushWithOneElementInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMatchExpressionWithOnlyDefaultArmInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'match' expression has only default arm and should be simplified\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'match' expressions only containing a 'default' arm. Such expressions are redundant and should be simplified. See Match expression (php.net) for details.\",\n                  \"markdown\": \"Reports the `match` expressions only containing a `default` arm. Such expressions are redundant and should be simplified.\\n\\n\\nSee [Match expression (php.net)](https://wiki.php.net/rfc/match_expression_v2) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMatchExpressionWithOnlyDefaultArmInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpNModifierCanBeReplacedWithNonCapturingGroupInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'n' modifier can be replaced with non-capturing groups\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports 'n' PCRE modifier, that can be replaced with usage of non-capturing groups instead of capturing in regexp pattern.\",\n                  \"markdown\": \"Reports `n` PCRE modifier, that can be replaced with usage of non-capturing groups instead of capturing in regexp pattern.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpNModifierCanBeReplacedWithNonCapturingGroupInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpRedundantOptionalArgumentInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant optional argument\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports redundant arguments that match the corresponding default values for optional parameters.\",\n                  \"markdown\": \"Reports redundant arguments that match the corresponding default values for optional parameters.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpRedundantOptionalArgumentInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpRedundantReadonlyModifierInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'readonly' modifier is redundant\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports 'readonly' modifiers applied to properties in read-only classes. Those modifiers are redundant since all properties in read-only classes are implicitly read-only. See Readonly classes RFC (php.net) for details.\",\n                  \"markdown\": \"Reports `readonly` modifiers applied to properties in read-only classes. Those modifiers are redundant since all properties in read-only classes are implicitly read-only.\\n\\n\\nSee [Readonly classes RFC (php.net)](https://wiki.php.net/rfc/readonly_classes#proposal) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpRedundantReadonlyModifierInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnnecessarySpreadOperatorForFunctionCallArgumentInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unnecessary spread operator for function call argument\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of the spread operator ('...') on array literals in function call arguments that may be safely unwrapped.\",\n                  \"markdown\": \"Reports the usages of the spread operator (`...`) on array literals in function call arguments that may be safely unwrapped.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnnecessarySpreadOperatorForFunctionCallArgumentInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpStrictComparisonWithOperandsOfDifferentTypesInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Strict comparison of operands with incompatible types\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the '===' or '!==' strict comparisons used on operands with incompatible types. See PHP type comparison tables (php.net) for details.\",\n                  \"markdown\": \"Reports the `===` or `!==` strict comparisons used on operands with incompatible types.\\n\\n\\nSee [PHP type comparison tables (php.net)](https://www.php.net/manual/en/types.comparisons.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpStrictComparisonWithOperandsOfDifferentTypesInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpExpectedValuesShouldBeUsedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Expected values should be used\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the values in assignment and comparison expressions that should be replaced with one of the expected values (that is, the values specified via the '#[ExpectedValues]' attribute). See Attributes (php.net) for details.\",\n                  \"markdown\": \"Reports the values in assignment and comparison expressions that should be replaced with one of the expected values (that is, the values specified via the `#[ExpectedValues]` attribute).\\n\\n\\nSee [Attributes (php.net)](https://wiki.php.net/rfc/attributes_v2) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpExpectedValuesShouldBeUsedInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Attributes\",\n                      \"index\": 45,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpNonCompoundUseInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unnecessary statement use\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'use' statements that contain non-fully qualified class names and thus have no effect. The inspection only reports classes imports; functions and constants imports are not considered. See Using namespaces: Aliasing/Importing (php.net) for details.\",\n                  \"markdown\": \"Reports the `use` statements that contain non-fully qualified class names and thus have no effect. The inspection only reports classes imports; functions and constants imports are not considered.\\n\\n\\nSee [Using namespaces: Aliasing/Importing (php.net)](http://www.php.net/manual/en/language.namespaces.importing.php#language.namespaces.importing) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpNonCompoundUseInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpInvalidInstanceofInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Argument of 'instanceof' should be only objects or strings\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports arguments of 'instanceof' that are not objects or strings\",\n                  \"markdown\": \"Reports arguments of 'instanceof' that are not objects or strings\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpInvalidInstanceofInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"MessDetectorValidationInspection\",\n                \"shortDescription\": {\n                  \"text\": \"PHP Mess Detector validation\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports coding style problems detected by PHP Mess Detector. The inspection requires PHP Mess Detector to be properly installed and set up in the IDE under Settings | PHP | Quality Tools | Mess Detector. To learn more about installing PHP Mess Detector, see PHP Mess Detector installation (phpmd.org) for details. You can use a predefined set of rules or add your own by specifying valid ruleset.xml files. See the rules index (phpmd.org) and How to create a custom rule set (phpmd.org) for details.\",\n                  \"markdown\": \"Reports coding style problems detected by PHP Mess Detector.\\n\\n\\nThe inspection requires PHP Mess Detector to be properly installed and set up in the IDE under\\n[Settings \\\\| PHP \\\\| Quality Tools \\\\| Mess Detector](settings://settings.php.quality.tools?Mess%20Detector).\\n\\n\\nTo learn more about installing PHP Mess Detector, see [PHP Mess Detector installation (phpmd.org)](https://phpmd.org/download/index.html) for details.\\n\\n\\nYou can use a predefined set of rules or add your own by specifying valid *ruleset.xml* files. See the [rules index (phpmd.org)](https://phpmd.org/rules/index.html) and [How to create a custom rule set (phpmd.org)](https://phpmd.org/documentation/creating-a-ruleset.html) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"MessDetectorValidationInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Quality tools\",\n                      \"index\": 70,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDeprecationInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Deprecated\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of deprecated entities. In most cases, such usages should be removed or replaced with other constructs.\",\n                  \"markdown\": \"Reports the usages of deprecated entities.\\n\\n\\nIn most cases, such usages should be removed or replaced with other constructs.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDeprecationInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDeprecatedCastInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Deprecated cast\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports deprecated cast expressions: '(unset)' cast expressions, which are deprecated in PHP 7.2 and later. '(real)' cast expressions, which are deprecated in PHP 7.4 and later. See Deprecated features in PHP 7.2.x (php.net) and Deprecations for PHP 7.4 (php.net) for details.\",\n                  \"markdown\": \"Reports deprecated cast expressions:\\n\\n* `(unset)` cast expressions, which are deprecated in PHP 7.2 and later.\\n* `(real)` cast expressions, which are deprecated in PHP 7.4 and later.\\n\\n\\nSee [Deprecated features in PHP 7.2.x (php.net)](https://www.php.net/manual/en/migration72.deprecated.php#migration72.deprecated.unset-cast) and [Deprecations for PHP 7.4 (php.net)](https://wiki.php.net/rfc/deprecations_php_7_4#the_real_type) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDeprecatedCastInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnitAssertEqualsInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Deprecated 'assertEquals/assertNotEquals' usage\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports deprecated usages of the 'assertEquals' and 'assertNotEquals' functions with '$delta', '$maxDepth', '$canonicalize', and '$ignoreCase' parameters. The optional '$delta', '$maxDepth', '$canonicalize', and '$ignoreCase' parameters of the 'assertEquals' and 'assertNotEquals' functions are deprecated and will be removed in PHPUnit 9. See Usage of the assertEquals function (phpunit.readthedocs.io) for details.\",\n                  \"markdown\": \"Reports deprecated usages of the `assertEquals` and `assertNotEquals` functions with `$delta`, `$maxDepth`, `$canonicalize`, and `$ignoreCase` parameters.\\n\\nThe optional `$delta`, `$maxDepth`, `$canonicalize`, and `$ignoreCase` parameters\\nof the `assertEquals` and `assertNotEquals` functions are deprecated and will be removed in PHPUnit 9.\\n\\n\\nSee [Usage of the assertEquals function (phpunit.readthedocs.io)](https://phpunit.readthedocs.io/en/stable/assertions.html#assertequals) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnitAssertEqualsInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPUnit\",\n                      \"index\": 20,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpNestedDirNameCallsCanBeReplacedWithLevelParameterInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Nested 'dirname()' call can be replaced with 'levels' parameter usage\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the nested 'dirname()' calls that can be omitted by using the 'levels' parameter instead.\",\n                  \"markdown\": \"Reports the nested `dirname()` calls that can be omitted by using the `levels` parameter instead.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpNestedDirNameCallsCanBeReplacedWithLevelParameterInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpFieldImmediatelyRewrittenInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Property is immediately rewritten \"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the write expressions on properties which are immediately overwritten before being accessed.\",\n                  \"markdown\": \"Reports the write expressions on properties which are immediately overwritten before being accessed.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpFieldImmediatelyRewrittenInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpExpressionWithoutClarifyingParenthesesInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Expression without clarifying parentheses\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports potentially ambiguous expressions and proposes enclosing them in clarifying parentheses.\",\n                  \"markdown\": \"Reports potentially ambiguous expressions and proposes enclosing them in clarifying parentheses.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpExpressionWithoutClarifyingParenthesesInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpRedundantAttributeParenthesisInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant parentheses in attribute\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports empty arguments lists in attributes. See Attributes (php.net) for details.\",\n                  \"markdown\": \"Reports empty arguments lists in attributes.\\n\\n\\nSee [Attributes (php.net)](https://wiki.php.net/rfc/attributes_v2) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpRedundantAttributeParenthesisInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Attributes\",\n                      \"index\": 45,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpParameterNameChangedDuringInheritanceInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Parameter's name changed during inheritance\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the methods' parameters whose names differ from the same parameters defined in parent methods. Starting with PHP 8.0, such code can cause runtime errors.\",\n                  \"markdown\": \"Reports the methods' parameters whose names differ from the same parameters defined in parent methods. Starting with PHP 8.0, such code can cause runtime errors.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpParameterNameChangedDuringInheritanceInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpTraitsUseListInspection\",\n                \"shortDescription\": {\n                  \"text\": \"One-per-line trait uses\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the cases of several traits being imported via a single 'use' statement. According to PSR-12, each individual trait imported into a class MUST be included one-per-line, and each inclusion MUST have its own 'use' import statement. See PSR-12: Extended Coding Style (php-fig.org) for details.\",\n                  \"markdown\": \"Reports the cases of several traits being imported via a single `use` statement.\\n\\n\\nAccording to PSR-12, each individual trait imported into a class MUST be included one-per-line, and each inclusion MUST have its own `use` import statement.\\n\\n\\nSee [PSR-12: Extended Coding Style (php-fig.org)](https://www.php-fig.org/psr/psr-12/#42-using-traits) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpTraitsUseListInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style/PSR-12\",\n                      \"index\": 61,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDisabledQualityToolComposerInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Quality tool inspection is disabled\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Highlights the quality tools' entries in composer.json in case the corresponding code inspections are disabled.\",\n                  \"markdown\": \"Highlights the quality tools' entries in *composer.json* in case the corresponding code inspections are disabled.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDisabledQualityToolComposerInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Composer\",\n                      \"index\": 38,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpConcatenationWithEmptyStringCanBeInlinedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Concatenation to empty string can be merged with assignment\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the '.=' concatenation assignments performed right after assignment to an empty string literal. Such assignments can be merged together.\",\n                  \"markdown\": \"Reports the `.=` concatenation assignments performed right after assignment to an empty string literal. Such assignments can be merged together.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpConcatenationWithEmptyStringCanBeInlinedInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArrayIndexResetIsUnnecessaryInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Array internal pointer reset is unnecessary\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'reset($array)' calls on arrays whose internal pointer is already set on the first element. Such calls are redundant and can be safely removed. See reset (php.net) for details.\",\n                  \"markdown\": \"Reports the `reset($array)` calls on arrays whose internal pointer is already set on the first element. Such calls are redundant and can be safely removed.\\n\\n\\nSee [reset (php.net)](https://www.php.net/manual/en/function.reset.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArrayIndexResetIsUnnecessaryInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpNamedArgumentUsageInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Argument with name identifier\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports arguments with name identifiers.\",\n                  \"markdown\": \"Reports arguments with name identifiers.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpNamedArgumentUsageInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnusedFieldDefaultValueInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant property initializer\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the fields with default initializers that are always overwritten in the class constructor.\",\n                  \"markdown\": \"Reports the fields with default initializers that are always overwritten in the class constructor.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnusedFieldDefaultValueInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Unused symbols\",\n                      \"index\": 37,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpApplyingEmptyIndexOperatorOnStringInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Empty index operator not supported for strings\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of empty index operator ('[]') on strings. Starting from PHP 7.1, applying the empty index operator on a string throws a fatal error. See Creating/modifying with square bracket syntax (php.net) for details.\",\n                  \"markdown\": \"Reports the usages of empty index operator (`[]`) on strings.\\n\\n\\nStarting from PHP 7.1, applying the empty index operator on a string throws a fatal error.\\n\\nSee [Creating/modifying with square bracket syntax (php.net)](https://www.php.net/manual/en/language.types.array.php#language.types.array.syntax.modifying) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpApplyingEmptyIndexOperatorOnStringInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpTraitUseRuleInsideDifferentClassUseListInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Trait use rule resolved to method with different containing class \"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the trait method 'use' rules that are resolved to methods from a different containing class rather than the one specified in the 'use' declaration.\",\n                  \"markdown\": \"Reports the trait method `use` rules that are resolved to methods from a different containing class rather than the one specified in the `use` declaration.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpTraitUseRuleInsideDifferentClassUseListInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnitAssertArrayHasKeyInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Method 'assertArrayHasKey/assertArrayNotHasKey' can be used instead\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'assertTrue()' and 'assertNotTrue()' methods calls that are provided with an 'array_key_exists()' call as an argument. Such calls can be replaced with calls to the dedicated 'assertArrayHasKey()' method. See assertArrayHasKey (phpunit.readthedocs.io) for details.\",\n                  \"markdown\": \"Reports the `assertTrue()` and `assertNotTrue()` methods calls that are provided with an `array_key_exists()` call as an argument. Such calls can be replaced with calls to the dedicated `assertArrayHasKey()` method.\\n\\n\\nSee [assertArrayHasKey (phpunit.readthedocs.io)](https://phpunit.readthedocs.io/en/stable/assertions.html#assertarrayhaskey) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnitAssertArrayHasKeyInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPUnit\",\n                      \"index\": 20,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpObjectFieldsAreOnlyWrittenInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Local object is used only for writing properties\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the variable assignments to new objects that are used only for writing the object's properties without observable side effects.\",\n                  \"markdown\": \"Reports the variable assignments to new objects that are used only for writing the object's properties without observable side effects.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpObjectFieldsAreOnlyWrittenInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnnecessaryStaticReferenceInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant 'static' in final class\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports 'static' usages inside final class\",\n                  \"markdown\": \"Reports `static` usages inside final class\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnnecessaryStaticReferenceInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDynamicFieldDeclarationInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Dynamic property declaration\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the references to dynamic class properties declarations. Such declaration are deprecated starting from PHP 8.2 The inspection skips the objects of the 'stdClass' or derived types.\",\n                  \"markdown\": \"Reports the references to dynamic class properties declarations. Such declaration are deprecated starting from PHP 8.2\\n\\n\\nThe inspection skips the objects of the `stdClass` or derived types.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDynamicFieldDeclarationInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Undefined symbols\",\n                      \"index\": 26,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDocSignatureInspection\",\n                \"shortDescription\": {\n                  \"text\": \"PHPDoc comment matches function/method signature\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the parameters' names and types in a PHPDoc comment that do not match the ones in the function/method declaration.\",\n                  \"markdown\": \"Reports the parameters' names and types in a PHPDoc comment that do not match the ones in the function/method declaration.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDocSignatureInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPDoc\",\n                      \"index\": 2,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMultipleClassesDeclarationsInOneFile\",\n                \"shortDescription\": {\n                  \"text\": \"Multiple classes declarations in one file\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports multiple class declarations in a single file, which violates the PSR-0/PSR-4 standards. See PSR-0/PSR-4 standards (php-fig.org) for details.\",\n                  \"markdown\": \"Reports multiple class declarations in a single file, which violates the PSR-0/PSR-4 standards.\\n\\n\\nSee [PSR-0/PSR-4 standards (php-fig.org)](https://www.php-fig.org/psr/psr-4/) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMultipleClassesDeclarationsInOneFile\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArrayWriteIsNotUsedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Array write access is not used\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the array write access expressions that are not used in code afterwards. The most common source of such problems is modifying an array passed via a parameter: if an array is passed by value, the change will not be visible outside the function.\",\n                  \"markdown\": \"Reports the array write access expressions that are not used in code afterwards. The most common source of such problems is modifying an array passed via a parameter: if an array is passed by value, the change will not be visible outside the function.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArrayWriteIsNotUsedInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Control flow\",\n                      \"index\": 12,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpReturnValueOfMethodIsNeverUsedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Method's return value is never used\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the private methods returning the values that are not used.\",\n                  \"markdown\": \"Reports the private methods returning the values that are not used.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpReturnValueOfMethodIsNeverUsedInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpClassCantBeUsedAsAttributeInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Class cannot be used as attribute\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the attributes that are resolved to a class not annotated with '#[Attribute]'. See Attributes (php.net) for details.\",\n                  \"markdown\": \"Reports the attributes that are resolved to a class not annotated with `#[Attribute]`.\\n\\n\\nSee [Attributes (php.net)](https://wiki.php.net/rfc/attributes_v2) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpClassCantBeUsedAsAttributeInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Attributes\",\n                      \"index\": 45,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnitAssertFileEqualsInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Deprecated 'assertFileEquals/assertStringEqualsFile' usage\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the deprecated usages of the 'assertFileEquals', 'assertFileNotEquals', 'assertStringEqualsFile', and 'assertStringNotEqualsFile' functions with the '$canonicalize' and '$ignoreCase' parameters. The optional '$canonicalize' and '$ignoreCase' parameters of the 'assertFileEquals' and 'assertFileNotEquals' functions are deprecated and will be removed in PHPUnit 9. See Usage of the assertFileEquals function (phpunit.readthedocs.io) or Usage of the assertFileEquals function (phpunit.readthedocs.io) for details.\",\n                  \"markdown\": \"Reports the deprecated usages of the `assertFileEquals`, `assertFileNotEquals`, `assertStringEqualsFile`, and `assertStringNotEqualsFile` functions with the `$canonicalize` and `$ignoreCase` parameters.\\n\\nThe optional `$canonicalize` and `$ignoreCase` parameters\\nof the `assertFileEquals` and `assertFileNotEquals` functions are deprecated and will be removed in PHPUnit 9.\\n\\n\\nSee [Usage of the assertFileEquals function (phpunit.readthedocs.io)](https://phpunit.readthedocs.io/en/stable/assertions.html#assertfileequals) or [Usage of the assertFileEquals function (phpunit.readthedocs.io)](https://phpunit.readthedocs.io/en/stable/assertions.html#assertstringequalsfile) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnitAssertFileEqualsInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPUnit\",\n                      \"index\": 20,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpVariableVariableInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Usage of a variable variable\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of variable variables (dynamic variable names such as '$$a').\",\n                  \"markdown\": \"Reports the usages of variable variables (dynamic variable names such as `$$a`).\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpVariableVariableInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDeprecatedSerializableUsageInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Deprecated 'Serializable' interface usage\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of deprecated 'Serializable' interface. Starting from PHP 8.1, classes that are non-abstract, implement 'Serializable', and do not implement '__serialize()' and '__unserialize()' will throw a deprecation warning. See Phasing out Serializable (php.net) for details.\",\n                  \"markdown\": \"Reports the usages of deprecated `Serializable` interface.\\n\\n\\nStarting from PHP 8.1, classes that are non-abstract, implement `Serializable`, and do not implement `__serialize()`\\nand `__unserialize()` will throw a deprecation warning.\\n\\n\\nSee [Phasing out Serializable (php.net)](https://wiki.php.net/rfc/custom_object_serialization) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDeprecatedSerializableUsageInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUndefinedCallbackInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Undefined callback\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the functions, methods, properties, or classes that are referenced from a callback but are not found. Use the options below to customize the inspection: Ignore callback from *_exists and is_callable functions: if selected, the inspection will skip callback references from the 'method_exists', 'function_exists', 'property_exists', 'class_exists' and 'is_callable' functions. Don't report in case of ambiguity: if selected, the inspection will skip the parameters with multiple possible types, for example marked as 'callable|string'.\",\n                  \"markdown\": \"Reports the functions, methods, properties, or classes that are referenced from a callback but are not found.\\n\\nUse the options below to customize the inspection:\\n\\n* **Ignore callback from \\\\*_exists and is_callable functions** : if selected, the inspection will skip callback references from the `method_exists`, `function_exists`, `property_exists`, `class_exists` and `is_callable` functions.\\n* **Don't report in case of ambiguity** : if selected, the inspection will skip the parameters with multiple possible types, for example marked as `callable|string`.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUndefinedCallbackInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Undefined symbols\",\n                      \"index\": 26,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpLoopCanBeConvertedToArrayMapInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Loop can be converted to 'array_map()' call\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'foreach' loops that can be replaced with 'array_map()' calls.\",\n                  \"markdown\": \"Reports the `foreach` loops that can be replaced with `array_map()` calls.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpLoopCanBeConvertedToArrayMapInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpOptionalBeforeRequiredParametersInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Optional before required parameter\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the optional parameters that appear before the required parameters in a function/method declaration. See Default argument values (php.net) for details.\",\n                  \"markdown\": \"Reports the optional parameters that appear before the required parameters in a function/method declaration.\\n\\n\\nSee [Default argument values (php.net)](http://www.php.net/manual/en/functions.arguments.php#functions.arguments.default) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpOptionalBeforeRequiredParametersInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDocRedundantThrowsInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant @throws tag(s)\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports '@throws' tags for exceptions that are not thrown by the function or method. The exception classes added to the Unchecked Exceptions list under Settings | PHP | Analysis are excluded from the inspection scope.\",\n                  \"markdown\": \"Reports `@throws` tags for exceptions that are not thrown by the function or method.\\n\\nThe exception classes added to the **Unchecked Exceptions** list under\\n[Settings \\\\| PHP \\\\| Analysis](settings://reference.webide.settings.project.settings.php?Unchecked%20Exceptions)\\nare excluded from the inspection scope.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDocRedundantThrowsInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPDoc\",\n                      \"index\": 2,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpStrFunctionsInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'str*()' calls can be replaced with PHP 8 'str_*()' calls\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'strpos' and 'substr' functions calls that can be replaced with the 'str_*' functions calls (introduced in PHP 8.0). See str_contains (php.net) and str_starts_with and str_ends_with functions (php.net) for details.\",\n                  \"markdown\": \"Reports the `strpos` and `substr` functions calls that can be replaced with the `str_*` functions calls (introduced in PHP 8.0).\\n\\n\\nSee [str_contains (php.net)](https://wiki.php.net/rfc/str_contains) and [str_starts_with and str_ends_with functions (php.net)](https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpStrFunctionsInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnnecessarySemicolonInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unnecessary semicolon\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports unnecessary semicolons.\",\n                  \"markdown\": \"Reports unnecessary semicolons.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnnecessarySemicolonInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArrayMapCanBeConvertedToLoopInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'array_map()' call can be converted to loop\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'array_map()' calls that can be replaced with 'foreach' loops.\",\n                  \"markdown\": \"Reports the `array_map()` calls that can be replaced with `foreach` loops.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArrayMapCanBeConvertedToLoopInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpCSValidationInspection\",\n                \"shortDescription\": {\n                  \"text\": \"PHP_CodeSniffer validation\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports coding style problems detected by PHP_CodeSniffer. The inspection requires PHP_CodeSniffer to be properly installed and set up in the IDE under Settings | PHP | Quality Tools | PHP_CodeSniffer. To learn more about installing PHP_CodeSniffer, see PHP_CodeSniffer installation (GitHub).\",\n                  \"markdown\": \"Reports coding style problems detected by PHP_CodeSniffer.\\n\\n\\nThe inspection requires PHP_CodeSniffer to be properly installed and set up in the IDE under\\n[Settings \\\\| PHP \\\\| Quality Tools \\\\| PHP_CodeSniffer](settings://settings.php.quality.tools?PHP_CodeSniffer).\\n\\n\\nTo learn more about installing PHP_CodeSniffer, see [PHP_CodeSniffer installation (GitHub)](https://github.com/squizlabs/PHP_CodeSniffer#installation).\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpCSValidationInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Quality tools\",\n                      \"index\": 70,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnnecessaryStringCastInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant cast to string\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the '(string)' casts and 'strval()' calls that are redundant since casting to string is performed implicitly.\",\n                  \"markdown\": \"Reports the `(string)` casts and `strval()` calls that are redundant since casting to string is performed implicitly.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnnecessaryStringCastInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpNullIsNotCompatibleWithParameterInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'null' is not compatible with parameter's declared type\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the variables that are initialised via passing them by reference to a parameter incompatible with 'null'.\",\n                  \"markdown\": \"Reports the variables that are initialised via passing them by reference to a parameter incompatible with `null`.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpNullIsNotCompatibleWithParameterInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Type compatibility\",\n                      \"index\": 23,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpPregReplaceWithEmptyReplacementInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'preg_replace()' can be replaced with '(l|r)trim' call\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'preg_replace()' calls with empty 'replacement'. Such calls can be replaced with '(l|r)trim' calls.\",\n                  \"markdown\": \"Reports the `preg_replace()` calls with empty `replacement`. Such calls can be replaced with `(l|r)trim` calls.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpPregReplaceWithEmptyReplacementInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpRedundantClosingTagInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant closing tag\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports PHP closing tag '?>' usages, which are redundant in files containing only PHP code.\",\n                  \"markdown\": \"Reports PHP closing tag `?>` usages, which are redundant in files containing only PHP code.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpRedundantClosingTagInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnnecessaryStopStatementInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unnecessary 'return/continue' statement\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports unnecessary 'return' and 'continue' statements that can be safely removed.\",\n                  \"markdown\": \"Reports unnecessary `return` and `continue` statements that can be safely removed.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnnecessaryStopStatementInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDeprecatedAutoloadDeclarationInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Deprecated '__autoload()' function declaration\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the '__autoload()' function declarations. Starting from PHP 7.4, declaring '__autoload()' functions is deprecated. Starting from PHP 8.0, declaring '__autoload()' functions is forbidden. See __autoload (php.net) for details.\",\n                  \"markdown\": \"Reports the `__autoload()` function declarations.\\n\\n* Starting from PHP 7.4, declaring `__autoload()` functions is deprecated.\\n* Starting from PHP 8.0, declaring `__autoload()` functions is forbidden.\\n\\n\\nSee [__autoload (php.net)](https://www.php.net/manual/en/function.autoload.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDeprecatedAutoloadDeclarationInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpExpressionWithSameOperandsInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Logical expression has same operands\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the expressions that use the same operands, but should rather use different operands (for example, '$var == $var'). These include comparison, logical, null-coalescing, subtraction, and division expressions.\",\n                  \"markdown\": \"Reports the expressions that use the same operands, but should rather use different operands (for example, `$var == $var`). These include comparison, logical, null-coalescing, subtraction, and division expressions.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpExpressionWithSameOperandsInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArithmeticTypeCheckInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Arithmetic operation with unsupported operands\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports arithmetic and bitwise expressions with unsupported operands. Starting with PHP 8.0, using the arithmetic and bitwise operators '+', '-', '*', '/', '**', '%', '<<', '>>', '&', '|', '^', '~', '++', '--' when one of the operands is an array, resource, or non-overloaded object will result in a 'TypeError'. The only exception is the 'array + array' merge operation, which remains supported. See PHP's internal test source for the complete list of operations.\",\n                  \"markdown\": \"Reports arithmetic and bitwise expressions with unsupported operands.\\n\\n\\nStarting with PHP 8.0, using the arithmetic and bitwise operators `+`, `-`, `*`, `/`, `**`, `%`, `<<`, `>>`, `&`, `|`, `^`, `~`, `++`, `--`\\nwhen one of the operands is an array, resource, or non-overloaded object will result in a `TypeError`. The only exception is the\\n`array + array` merge operation, which remains supported.\\n\\n\\nSee [PHP's internal test source](https://github.com/php/php-src/blob/master/Zend/tests/operator_unsupported_types.phpt) for the complete list of operations.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArithmeticTypeCheckInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Type compatibility\",\n                      \"index\": 23,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpConditionAlreadyCheckedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Condition always evaluates to 'true/false'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the conditions that are already covered by earlier conditions and thus have no effect as well as the variables that are always true (or always false) when reached.\",\n                  \"markdown\": \"Reports the conditions that are already covered by earlier conditions and thus have no effect as well as the variables that are always true (or always false) when reached.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpConditionAlreadyCheckedInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Control flow\",\n                      \"index\": 12,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpRedundantVariableDocTypeInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant @var tag\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the '@var' tags for variables whose type is already inferred from source code.\",\n                  \"markdown\": \"Reports the `@var` tags for variables whose type is already inferred from source code.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpRedundantVariableDocTypeInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPDoc\",\n                      \"index\": 2,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMethodNamingConventionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Method name is not following coding convention\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the methods' names that are either too short, too long, or do not follow the specified regular expression pattern. Some coding styles have a special naming convention for methods. Use the inspection options to specify minimum/maximum length and the regular expression expected for methods' names. To ignore the names' length, specify 0. To learn more about regular expressions, refer to the Quick Start guide (regular-expressions.info).\",\n                  \"markdown\": \"Reports the methods' names that are either too short, too long, or do not follow the specified regular expression pattern. Some coding styles have a special naming convention for methods.\\n\\n\\nUse the inspection options to specify minimum/maximum length and the regular expression expected for methods' names.\\nTo ignore the names' length, specify **0**.\\n\\n\\nTo learn more about regular expressions, refer to the [Quick Start guide (regular-expressions.info)](https://www.regular-expressions.info/quickstart.html).\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMethodNamingConventionInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Naming conventions\",\n                      \"index\": 4,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpBooleanCanBeSimplifiedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Boolean expression can be simplified\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the boolean expressions that contain the 'true' or 'false' literals and can be simplified.\",\n                  \"markdown\": \"Reports the boolean expressions that contain the `true` or `false` literals and can be simplified.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpBooleanCanBeSimplifiedInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpFuncGetArgCanBeReplacedWithParamInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'func_get_arg()' call can be replaced with parameter access\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'func_get_arg()' calls that can be replaced with direct parameter access.\",\n                  \"markdown\": \"Reports the `func_get_arg()` calls that can be replaced with direct parameter access.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpFuncGetArgCanBeReplacedWithParamInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnitCoversByAccessModifierIsDeprecatedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Deprecated @covers/@uses by access modifier annotation\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the '@covers' and '@uses' PHPUnit doc tags that are using 'ClassName::<*>'. Such annotations won't be supported in PHPUnit 10 and later.\",\n                  \"markdown\": \"Reports the `@covers` and `@uses` PHPUnit doc tags that are using `ClassName::<*>`. Such annotations won't be supported in PHPUnit 10 and later.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnitCoversByAccessModifierIsDeprecatedInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPUnit\",\n                      \"index\": 20,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnusedPrivateMethodInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unused private method\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the private methods that are never used.\",\n                  \"markdown\": \"Reports the private methods that are never used.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnusedPrivateMethodInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Unused symbols\",\n                      \"index\": 37,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpAssignmentReplaceableWithPrefixExpressionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Assignment can be replaced with increment or decrement\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the assignments that can be replaced with incrementing ('++') or decrementing ('--') operations.\",\n                  \"markdown\": \"Reports the assignments that can be replaced with incrementing (`++`) or decrementing (`--`) operations.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpAssignmentReplaceableWithPrefixExpressionInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Replaceable assignments\",\n                      \"index\": 82,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpRandArgumentsInReverseOrderInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Misordered 'rand' function arguments\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'rand($min, $max)' family function calls in which the 'max' argument is less than 'min'. For such functions as 'mt_rand' and 'random_int', this will result in a fatal error.\",\n                  \"markdown\": \"Reports the `rand($min, $max)` family function calls in which the `max` argument is less than `min`. For such functions as `mt_rand` and `random_int`, this will result in a fatal error.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpRandArgumentsInReverseOrderInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpAttributeIsNotRepeatableInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Non-repeatable attribute\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports repeated attributes without the 'Attribute::IS_REPEATABLE' flag in their arguments declaration. See Attributes (php.net) for details.\",\n                  \"markdown\": \"Reports repeated attributes without the `Attribute::IS_REPEATABLE` flag in their arguments declaration.\\n\\n\\nSee [Attributes (php.net)](https://wiki.php.net/rfc/attributes_v2) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpAttributeIsNotRepeatableInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Attributes\",\n                      \"index\": 45,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpObjectShapeCanBeAddedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"ObjectShape can be added\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports public properties of an object with specified types. Suggests specifying the shape of the returned object via the '#[ObjectShape]' attribute or an object shape in the PHPDoc comment. Example: '$a = new stdClass();\\n  $a->name = \\\"name\\\";\\n  $a->age = 2;' After the quick-fix is applied: '/** @var $a object{name: string, age: int} */\\n  $a = new stdClass();\\n  $a->name = \\\"name\\\";\\n  $a->age = 2;'\",\n                  \"markdown\": \"Reports public properties of an object with specified types. Suggests specifying the shape of the returned object via the `#[ObjectShape]` attribute or an object shape in the PHPDoc comment.\\n\\n**Example:**\\n\\n\\n      $a = new stdClass();\\n      $a->name = \\\"name\\\";\\n      $a->age = 2;\\n\\nAfter the quick-fix is applied:\\n\\n\\n      /** @var $a object{name: string, age: int} */\\n      $a = new stdClass();\\n      $a->name = \\\"name\\\";\\n      $a->age = 2;\\n\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpObjectShapeCanBeAddedInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPDoc\",\n                      \"index\": 2,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpInvalidMagicMethodModifiersInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Invalid magic method modifiers\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the magic methods that are not declared as public or are declared as static.\",\n                  \"markdown\": \"Reports the magic methods that are not declared as public or are declared as static.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpInvalidMagicMethodModifiersInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpWrongCatchClausesOrderInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Wrong catch clauses order\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the exceptions that are already caught by a preceding exception and the exceptions that are caught twice. The 'catch' clauses must be ordered from more specific to more generic ones. Otherwise, some exceptions may not be caught by the most specific handler. See Exceptions (php.net) for details.\",\n                  \"markdown\": \"Reports the exceptions that are already caught by a preceding exception and the exceptions that are caught twice.\\n\\n\\nThe `catch` clauses must be ordered from more specific to more generic ones. Otherwise, some exceptions may not be caught by the most specific handler.\\n\\n\\nSee [Exceptions (php.net)](http://www.php.net/manual/en/language.exceptions.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpWrongCatchClausesOrderInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Error handling\",\n                      \"index\": 72,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpVarUsageInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Usage of var\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of the 'var' keyword for declaring class properties. According to PSR-12, the 'var' keyword MUST NOT be used to declare a property. See PSR-12: Extended Coding Style (php-fig.org) for details.\",\n                  \"markdown\": \"Reports the usages of the `var` keyword for declaring class properties.\\n\\nAccording to PSR-12, the `var` keyword MUST NOT be used to declare a property.\\n\\n\\nSee [PSR-12: Extended Coding Style (php-fig.org)](https://www.php-fig.org/psr/psr-12/#43-properties-and-constants) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpVarUsageInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style/PSR-12\",\n                      \"index\": 61,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpPregSplitWithoutRegExpInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'preg_split' can be replaced with 'explode'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports 'preg_split()' calls that can be replaced with 'explode()'.\",\n                  \"markdown\": \"Reports `preg_split()` calls that can be replaced with `explode()`.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpPregSplitWithoutRegExpInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnpackingArraysWithStringKeysInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unpacking arrays with string keys is forbidden for PHP < 8.1\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports array unpacking with string keys in PHP < 8.1 See Array unpacking with string keys for details.\",\n                  \"markdown\": \"Reports array unpacking with string keys in PHP \\\\< 8.1\\n\\n\\nSee [Array unpacking with string keys](https://wiki.php.net/rfc/array_unpacking_string_keys) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnpackingArraysWithStringKeysInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpSillyAssignmentInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant assignment\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the assignment statements, in which both sides are equal. Such assignments have no effect and can be removed.\",\n                  \"markdown\": \"Reports the assignment statements, in which both sides are equal. Such assignments have no effect and can be removed.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpSillyAssignmentInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpFullyQualifiedNameUsageInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Fully qualified name usage\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the fully qualified class names that can be shortened by adding the 'use' statement.\",\n                  \"markdown\": \"Reports the fully qualified class names that can be shortened by adding the `use` statement.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpFullyQualifiedNameUsageInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpSuspiciousNameCombinationInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Suspicious names combination\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the assignments and function calls where the name of the variable or parameter probably doesn't match the name of the assigned or passed value. The following sets of names are supported: 'needle', 'haystack' 'x', 'y' 'top', 'bottom', 'left', 'right' 'year', 'month', 'week', 'day', 'hour', 'minute', 'second'\",\n                  \"markdown\": \"Reports the assignments and function calls where the name of the variable or parameter probably doesn't match the name of the assigned or passed value.\\n\\n\\nThe following sets of names are supported:\\n\\n* `needle`, `haystack`\\n* `x`, `y`\\n* `top`, `bottom`, `left`, `right`\\n* `year`, `month`, `week`, `day`, `hour`, `minute`, `second`\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpSuspiciousNameCombinationInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpRangesInClassCanBeMergedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Ranges in class can be merged\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the alphabetic ranges or characters in regular expression character classes that only adjust the already existing ranges. Such elements can be merged with the adjusted ranges.\",\n                  \"markdown\": \"Reports the alphabetic ranges or characters in regular expression character classes that only adjust the already existing ranges. Such elements can be merged with the adjusted ranges.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpRangesInClassCanBeMergedInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Regular expressions\",\n                      \"index\": 68,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpPossiblePolymorphicInvocationInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Possible polymorphic call\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports polymorphic code usages. Such usages are ambiguous and can be potentially inoperable depending on the class instance passed as the argument.\",\n                  \"markdown\": \"Reports polymorphic code usages. Such usages are ambiguous and can be potentially inoperable depending on the class instance passed as the argument.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpPossiblePolymorphicInvocationInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Undefined symbols\",\n                      \"index\": 26,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDuplicateMatchConditionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Duplicate condition\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports duplicate conditions in 'match' expressions. See Match expression (php.net) for details.\",\n                  \"markdown\": \"Reports duplicate conditions in `match` expressions.\\n\\n\\nSee [Match expression (php.net)](https://wiki.php.net/rfc/match_expression_v2) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDuplicateMatchConditionInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDuplicateSwitchCaseBodyInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Duplicate branch in switch statement\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'switch' statements containing the same code in different branches.\",\n                  \"markdown\": \"Reports the `switch` statements containing the same code in different branches.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDuplicateSwitchCaseBodyInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpPregMatchRedundantClosureInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant closure '.*'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports redundant leading and trailing '.*' in pattern for `preg_match` function.\",\n                  \"markdown\": \"Reports redundant leading and trailing '.\\\\*' in pattern for \\\\`preg_match\\\\` function.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpPregMatchRedundantClosureInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpStatementWithoutBracesInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Control statement body without braces\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the control structures (such as loops or conditionals) whose bodies are not enclosed in braces. See Control structures (php.net) for details.\",\n                  \"markdown\": \"Reports the control structures (such as loops or conditionals) whose bodies are not enclosed in braces.\\n\\n\\nSee [Control structures (php.net)](https://www.php.net/manual/en/language.control-structures.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpStatementWithoutBracesInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpShortOpenEchoTagInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Short open 'echo' tag usage\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports short PHP 'echo' tag '<?=' usages.\",\n                  \"markdown\": \"Reports short PHP `echo` tag `<?=` usages.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpShortOpenEchoTagInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpNewClassMissingParameterListInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Missing parameter list\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports missing parameter lists in a classes' instantiations. According to the PSR-12 specification, when instantiating a new class, parentheses MUST always be present even when there are no arguments passed to the constructor. See PSR-12: Extended Coding Style (php-fig.org) for details.\",\n                  \"markdown\": \"Reports missing parameter lists in a classes' instantiations.\\n\\nAccording to the PSR-12 specification, when instantiating a new class, parentheses MUST always be present even when there are no arguments passed to the constructor.\\n\\n\\nSee [PSR-12: Extended Coding Style (php-fig.org)](https://www.php-fig.org/psr/psr-12/#4-classes-properties-and-methods) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpNewClassMissingParameterListInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style/PSR-12\",\n                      \"index\": 61,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpCombineMultipleIssetCallsIntoOneInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Multiple 'isset' calls can be replaced with one\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports multiple 'isset()' checks that can be replaced with a single one.\",\n                  \"markdown\": \"Reports multiple `isset()` checks that can be replaced with a single one.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpCombineMultipleIssetCallsIntoOneInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpSuperClassIncompatibleWithInterfaceInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Method declaration in parent class is incompatible with implemented interface\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the methods declarations in parent classes that are incompatible with implemented interfaces.\",\n                  \"markdown\": \"Reports the methods declarations in parent classes that are incompatible with implemented interfaces.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpSuperClassIncompatibleWithInterfaceInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpAccessingStaticMembersOnTraitInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Accessing static trait members\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the static member access expressions used on traits. Such direct access is deprecated starting from PHP 8.1. Instead, static members should be accessed on the class that uses the trait. See Deprecations for PHP 8.1: Accessing static members on traits (php.net) for details.\",\n                  \"markdown\": \"Reports the static member access expressions used on traits. Such direct access is deprecated starting from PHP 8.1. Instead, static members should be accessed on the class that uses the trait.\\n\\n\\nSee [Deprecations for PHP 8.1: Accessing static members on traits (php.net)](https://wiki.php.net/rfc/deprecations_php_8_1#accessing_static_members_on_traits) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpAccessingStaticMembersOnTraitInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMissingReturnTypeInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Missing return type declaration\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the functions that have no return type declaration specified.\",\n                  \"markdown\": \"Reports the functions that have no return type declaration specified.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMissingReturnTypeInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Type compatibility\",\n                      \"index\": 23,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnused\",\n                \"shortDescription\": {\n                  \"text\": \"Unused declaration\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the classes, methods, functions, constants, or properties that are not used or not reachable from entry points. It also reports all method implementations/overriders. Some unused members might not be reported in the code editor on the fly. Due to performance reasons, a non-private member is checked only when its name rarely occurs in the project. To see all results, run the inspection in batch mode by using Code | Inspect Code... or Code | Run Inspection by Name....\",\n                  \"markdown\": \"Reports the classes, methods, functions, constants, or properties that are not used or not reachable from entry points. It also reports all method implementations/overriders.\\n\\nSome unused members might not be reported in the code editor on the fly. Due to performance reasons, a non-private member is checked only\\nwhen its name rarely occurs in the project.\\n\\nTo see all results, run the inspection in batch mode by using **Code \\\\| Inspect Code...** or **Code \\\\| Run Inspection by\\nName...**.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnused\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Unused symbols\",\n                      \"index\": 37,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnitMisorderedAssertEqualsArgumentsInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Misordered PHPUnit equality assertion method arguments\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the calls to PHPUnit equality assertion methods (such as 'assertEquals()', 'assertNotEquals()', 'assertSame()', and so on) that have a non-literal as the expected result argument and a literal as the actual result argument. Such calls will behave fine for assertions that pass, but may produce confusing error reports if their expected and actual arguments differ. See assertEquals for details.\",\n                  \"markdown\": \"Reports the calls to PHPUnit equality assertion methods (such as `assertEquals()`, `assertNotEquals()`, `assertSame()`, and so on) that have a non-literal as the expected result argument and a literal as the actual result argument. Such calls will behave fine for assertions that pass, but may produce confusing error reports if their expected and actual arguments differ.\\n\\n\\nSee [assertEquals](https://phpunit.readthedocs.io/en/stable/assertions.html#assertequals) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnitMisorderedAssertEqualsArgumentsInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPUnit\",\n                      \"index\": 20,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpCastIsEvaluableInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Type cast on a scalar value\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the type casts that can be evaluated in place and suggests replacing them with actual computed values. See Type juggling (php.net) for details.\",\n                  \"markdown\": \"Reports the type casts that can be evaluated in place and suggests replacing them with actual computed values.\\n\\n\\nSee [Type juggling (php.net)](https://www.php.net/manual/en/language.types.type-juggling.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpCastIsEvaluableInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArraySearchInBooleanContextInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'array_search()' can be replaced with 'in_array()' call\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'array_search()' calls that are only used for checking whether an element exists in array, that is, the expressions like 'if (array_search($a, $b) === false) {}'. Such calls can be safely replaced with 'in_array()' calls.\",\n                  \"markdown\": \"Reports the `array_search()` calls that are only used for checking whether an element exists in array, that is, the expressions like `if (array_search($a, $b) === false) {}`. Such calls can be safely replaced with `in_array()` calls.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArraySearchInBooleanContextInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMissingVisibilityInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Missing visibility\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the properties, constants, and methods that are declared without visibility definition. According to PSR-12, visibility MUST be defined on: All properties, All constants if your project's PHP minimum version supports constant visibilities (PHP 7.1 or later), All methods. See PSR-12: Extended Coding Style (php-fig.org) for details.\",\n                  \"markdown\": \"Reports the properties, constants, and methods that are declared without visibility definition.\\n\\nAccording to PSR-12, visibility MUST be defined on:\\n\\n* All properties,\\n* All constants if your project's PHP minimum version supports constant visibilities (PHP 7.1 or later),\\n* All methods.\\n\\n\\nSee [PSR-12: Extended Coding Style (php-fig.org)](https://www.php-fig.org/psr/psr-12/#43-properties-and-constants) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMissingVisibilityInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style/PSR-12\",\n                      \"index\": 61,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnitExpectedExceptionDocTagIsDeprecatedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Deprecated exception handling via doc tags\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of the following deprecated PHPUnit doc tags: '@expectedException' '@expectedExceptionMessage' '@expectedExceptionCode' '@expectedExceptionMessageRegExp'\",\n                  \"markdown\": \"Reports the usages of the following deprecated PHPUnit doc tags:\\n\\n* `@expectedException`\\n* `@expectedExceptionMessage`\\n* `@expectedExceptionCode`\\n* `@expectedExceptionMessageRegExp`\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnitExpectedExceptionDocTagIsDeprecatedInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPUnit\",\n                      \"index\": 20,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpNotInstalledPackagesInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Non-installed Composer packages\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the Composer packages that are required in composer.json but are not installed.\",\n                  \"markdown\": \"Reports the Composer packages that are required in *composer.json* but are not installed.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpNotInstalledPackagesInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Composer\",\n                      \"index\": 38,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpNeverTypedFunctionReturnViolationInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'never'-typed function returns a value\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the functions with the 'never' return type hint that may return some value. Functions with such a return type are not expected to return any value and must prevent the rest of the script execution by either calling 'die()', 'exit()', and so on, or throwing an exception. See noreturn type (php.net) for details.\",\n                  \"markdown\": \"Reports the functions with the `never` return type hint that may return some value. Functions with such a return type are not expected to return any value and must prevent the rest of the script execution by either calling `die()`, `exit()`, and so on, or throwing an exception.\\n\\n\\nSee [noreturn type (php.net)](https://wiki.php.net/rfc/noreturn_type) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpNeverTypedFunctionReturnViolationInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Control flow\",\n                      \"index\": 12,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDuplicateCaseInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Duplicate case in switch statement\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports duplicate 'case' expressions in 'switch' statements. If a 'switch' statement contains multiple duplicate 'case' expressions, only the first one is executed.\",\n                  \"markdown\": \"Reports duplicate `case` expressions in `switch` statements.\\n\\nIf a `switch` statement contains multiple duplicate `case` expressions, only the first one is executed.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDuplicateCaseInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpModifierOrderInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Order of modifiers\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports visibility modifiers that are specified in the incorrect order. According to PSR-12, the correct order is as follows: When present, the 'abstract' and 'final' declarations MUST precede the visibility declaration. When present, the 'static' declaration MUST come after the visibility declaration. See PSR-12: Extended Coding Style (php-fig.org) for details.\",\n                  \"markdown\": \"Reports visibility modifiers that are specified in the incorrect order.\\n\\nAccording to PSR-12, the correct order is as follows:\\n\\n* When present, the `abstract` and `final` declarations MUST precede the visibility declaration.\\n* When present, the `static` declaration MUST come after the visibility declaration.\\n\\n\\nSee [PSR-12: Extended Coding Style (php-fig.org)](https://www.php-fig.org/psr/psr-12/#46-abstract-final-and-static) for\\ndetails.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpModifierOrderInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style/PSR-12\",\n                      \"index\": 61,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpRedundantIntersectionTypeInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant intersection type\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the intersection type declarations that contain redundant types, for example, an intersection type that contains both the parent class and its subclass. See PHP RFC: Pure intersection types (php.net) for details.\",\n                  \"markdown\": \"Reports the intersection type declarations that contain redundant types, for example, an intersection type that contains both the parent class and its subclass.\\n\\n\\nSee [PHP RFC: Pure intersection types (php.net)](https://wiki.php.net/rfc/pure-intersection-types) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpRedundantIntersectionTypeInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Type compatibility\",\n                      \"index\": 23,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpInstanceofIsAlwaysTrueInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Result of 'instanceof' is always 'true'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'instanceof' expressions whose argument is within the hierarchy of the checked variable. Such expressions will always evaluate to 'true'.\",\n                  \"markdown\": \"Reports the `instanceof` expressions whose argument is within the hierarchy of the checked variable. Such expressions will always evaluate to `true`.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpInstanceofIsAlwaysTrueInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Control flow\",\n                      \"index\": 12,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpInappropriateInheritDocUsageInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Inappropriate @inheritDoc usage\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports inappropriate '@inheritDoc' usages: On non-class members On class members without any super members having a doc comment.\",\n                  \"markdown\": \"Reports inappropriate `@inheritDoc` usages:\\n\\n* On non-class members\\n* On class members without any super members having a doc comment.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpInappropriateInheritDocUsageInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPDoc\",\n                      \"index\": 2,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpClassConstantAccessedViaChildClassInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Class constant referenced via child class\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the class constant references that target the constant from the parent class of the referenced class.\",\n                  \"markdown\": \"Reports the class constant references that target the constant from the parent class of the referenced class.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpClassConstantAccessedViaChildClassInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpSwitchStatementWitSingleBranchInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'switch' with single 'case'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'switch' statements that only contain a single 'case' statement. Such 'switch' statements can be converted into 'if' statements.\",\n                  \"markdown\": \"Reports the `switch` statements that only contain a single `case` statement. Such `switch` statements can be converted into `if` statements.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpSwitchStatementWitSingleBranchInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpImplicitOctalLiteralUsageInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Implicit octal literal can be replaced with explicit one\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the implicit octal literals such as '071' that could be replaced with explicit ones such as 0o71. Explicit octal literals using the '0o/0O' prefix are supported in PHP 8.1 and later. See Explicit octal integer literal notation (php.net) for details.\",\n                  \"markdown\": \"Reports the implicit octal literals such as `071` that could be replaced with explicit ones such as 0o71.\\n\\n\\nExplicit octal literals using the `0o/0O` prefix are supported in PHP 8.1 and later.\\n\\n\\nSee [Explicit octal integer literal notation (php.net)](https://wiki.php.net/rfc/explicit_octal_notation) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpImplicitOctalLiteralUsageInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArrayIndexImmediatelyRewrittenInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Array index is immediately rewritten \"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the write expressions on array indexes which are immediately overwritten before being accessed.\",\n                  \"markdown\": \"Reports the write expressions on array indexes which are immediately overwritten before being accessed.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArrayIndexImmediatelyRewrittenInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpVarExportUsedWithoutReturnArgumentInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'var_export' or 'print_r' call is used without 'return' argument\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports 'var_export()' and 'print_r()' calls without the 'return' argument when their results are explicitly used. Such calls most probably are a mistake, because 'var_export'/'print_r' always returns 'null'/'true' if no 'argument' is specified.\",\n                  \"markdown\": \"Reports `var_export()` and `print_r()` calls without the `return` argument when their results are explicitly used. Such calls most probably are a mistake, because `var_export`/`print_r` always returns `null`/`true` if no `argument` is specified.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpVarExportUsedWithoutReturnArgumentInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnitMissingTargetForTestInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Missing target element for PHPUnit test\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the test classes and methods, for which no corresponding production classes or methods were found.\",\n                  \"markdown\": \"Reports the test classes and methods, for which no corresponding production classes or methods were found.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnitMissingTargetForTestInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPUnit\",\n                      \"index\": 20,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpIncorrectMagicMethodSignatureInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Incorrect magic method signature\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports incompatible magic methods signatures. See RFC: Ensure correct signatures of magic methods (php.net) for details.\",\n                  \"markdown\": \"Reports incompatible magic methods signatures.\\n\\n\\nSee [RFC: Ensure correct signatures of magic methods (php.net)](https://wiki.php.net/rfc/magic-methods-signature) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpIncorrectMagicMethodSignatureInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpGetClassCanBeReplacedWithClassNameLiteralInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'get_class()' call can be replaced with '::class'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'get_class()' calls and suggests replacing them with '::class' when PHP Language level is set to 8.0 or later. See Allow ::class on objects (php.net) for details.\",\n                  \"markdown\": \"Reports the `get_class()` calls and suggests replacing them with `::class` when PHP Language level is set to 8.0 or later.\\n\\n\\nSee [Allow ::class on objects (php.net)](https://wiki.php.net/rfc/class_name_literal_on_object) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpGetClassCanBeReplacedWithClassNameLiteralInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpContinueTargetingSwitchInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'continue' is targeting 'switch' statement\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'continue' statements that are targeting 'switch' statements. In PHP 7.3 and later, such usages are deprecated and will emit an 'E_WARNING', since they are most likely the result of a programming mistake. In PHP, such 'continue' statements are equivalent to 'break', that is, they end the execution of the current 'switch' structure. In other languages, such 'continue' statements behave as 'continue 2' in PHP, that is, they take the execution to a higher level control structure (for example, the next iteration of an outer loop). See continue (php.net), break (php.net), and switch (php.net) for details.\",\n                  \"markdown\": \"Reports the `continue` statements that are targeting `switch` statements. In PHP 7.3 and later, such usages are deprecated and will emit an `E_WARNING`, since they are most likely the result of a programming mistake.\\n\\n* In PHP, such `continue` statements are equivalent to `break`, that is, they end the execution of the current `switch` structure.\\n* In other languages, such `continue` statements behave as `continue 2` in PHP, that is, they take the execution to a higher level control structure (for example, the next iteration of an outer loop).\\n\\n\\nSee [continue (php.net)](https://www.php.net/manual/en/control-structures.continue.php), [break (php.net)](https://www.php.net/manual/en/control-structures.break.php), and [switch (php.net)](https://www.php.net/manual/en/control-structures.switch.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpContinueTargetingSwitchInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDuplicateCatchBodyInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Duplicate branch in 'catch' statement\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports 'catch' statements with duplicated bodies.\",\n                  \"markdown\": \"Reports `catch` statements with duplicated bodies.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDuplicateCatchBodyInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpCurlyBraceAccessSyntaxUsageInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Curly brace access syntax usage\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of curly brace syntax for accessing array elements and string offsets.\",\n                  \"markdown\": \"Reports the usages of curly brace syntax for accessing array elements and string offsets.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpCurlyBraceAccessSyntaxUsageInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpRegExpInvalidDelimiterInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Invalid delimiter\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports invalid delimiters in regular expressions in two cases: 1. If a delimiter is an alphanumeric or a backslash. 2. If a delimiter is used in a regular expression pattern.\",\n                  \"markdown\": \"Reports invalid delimiters in regular expressions in two cases: 1. If a delimiter is an alphanumeric or a backslash. 2. If a delimiter is used in a regular expression pattern.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpRegExpInvalidDelimiterInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Regular expressions\",\n                      \"index\": 68,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpPropertyCanBeReadonlyInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Property can be 'readonly'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the private promoted properties that are never written to. In PHP 8.1 and later, such properties can be declared 'readonly'. See Readonly properties (php.net) for details.\",\n                  \"markdown\": \"Reports the private promoted properties that are never written to. In PHP 8.1 and later, such properties can be declared `readonly`.\\n\\n\\nSee [Readonly properties (php.net)](https://wiki.php.net/rfc/readonly_properties_v2) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpPropertyCanBeReadonlyInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUndefinedNamespaceInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Undefined namespace\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the references to a namespace that is not found.\",\n                  \"markdown\": \"Reports the references to a namespace that is not found.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUndefinedNamespaceInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Undefined symbols\",\n                      \"index\": 26,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUndefinedMethodInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Undefined method\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the references to class methods that are not defined.\",\n                  \"markdown\": \"Reports the references to class methods that are not defined.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUndefinedMethodInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Undefined symbols\",\n                      \"index\": 26,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpPropertyNamingConventionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Property name is not following coding convention\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the properties' names that are either too short, too long, or do not follow the specified regular expression pattern. Some coding styles have a special naming convention for properties. Use the inspection options to specify minimum/maximum length and the regular expression expected for properties' names. To ignore the names' length, specify 0. To learn more about regular expressions, refer to the Quick Start guide (regular-expressions.info).\",\n                  \"markdown\": \"Reports the properties' names that are either too short, too long, or do not follow the specified regular expression pattern. Some coding styles have a special naming convention for properties.\\n\\n\\nUse the inspection options to specify minimum/maximum length and the regular expression expected for properties' names.\\nTo ignore the names' length, specify **0**.\\n\\n\\nTo learn more about regular expressions, refer to the [Quick Start guide (regular-expressions.info)](https://www.regular-expressions.info/quickstart.html).\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpPropertyNamingConventionInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Naming conventions\",\n                      \"index\": 4,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpIncompatibleReturnTypeInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Incompatible return type\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'return' statements whose return value type is not compatible with the one declared for a function/method.\",\n                  \"markdown\": \"Reports the `return` statements whose return value type is not compatible with the one declared for a function/method.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpIncompatibleReturnTypeInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Type compatibility\",\n                      \"index\": 23,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMissingStrictTypesDeclarationInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Missing strict types declaration\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Detects the missing 'declare(strict_types=1)' directive in the file. See Strict typing (php.net) to learn more about why you may need use this directive.\",\n                  \"markdown\": \"Detects the missing `declare(strict_types=1)` directive in the file.\\n\\n\\nSee [Strict typing (php.net)](https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict) to learn more about why you may need use this directive.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMissingStrictTypesDeclarationInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Type compatibility\",\n                      \"index\": 23,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpNamedArgumentMightBeUnresolvedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Named argument may be unresolved\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the named arguments in method calls that might be unresolved depending on a specific class instance within the hierarchy.\",\n                  \"markdown\": \"Reports the named arguments in method calls that might be unresolved depending on a specific class instance within the hierarchy.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpNamedArgumentMightBeUnresolvedInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArrayTraversableCanBeReplacedWithIterableInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Type hint 'array|Traversable' can be replaced with 'iterable'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'array|Traversable' type hints that can be replaced with 'iterable'.\",\n                  \"markdown\": \"Reports the `array|Traversable` type hints that can be replaced with `iterable`.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArrayTraversableCanBeReplacedWithIterableInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpEchoOpenTagInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Open 'echo' tag usage\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the '<?php echo' usages that can be replaced with a short tag '<?='.\",\n                  \"markdown\": \"Reports the `<?php echo` usages that can be replaced with a short tag `<?=`.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpEchoOpenTagInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpLanguageLevelInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Language level\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the language features used in source code that are not supported for the selected language level. For example, union types can be used only in PHP 8.0 and later.\",\n                  \"markdown\": \"Reports the language features used in source code that are not supported for the selected language level.\\n\\nFor example, union types can be used only in PHP 8.0 and later.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpLanguageLevelInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnitAssertContainsInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Deprecated 'assertContains/assertNotContains' usage\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the deprecated 'assertContains()' and 'assertNotContains()' calls with the string '$needle' and '$ignoreCase' arguments. The string '$needle' and optional boolean '$ignoreCase' parameters of the 'assertContains()' and 'assertNotContains()' functions are deprecated and removed in PHPUnit 9. For assertions that operate on strings, the specific 'assertStringContainsString()', 'assertStringContainsStringIgnoringCase()', 'assertStringNotContainsString()', and 'assertStringNotContainsStringIgnoringCase()' methods should be used. See Usage of the assertEquals function (phpunit.readthedocs.io) for details.\",\n                  \"markdown\": \"Reports the deprecated `assertContains()` and `assertNotContains()` calls with the string `$needle` and `$ignoreCase` arguments.\\n\\n\\nThe string `$needle` and optional boolean `$ignoreCase` parameters\\nof the `assertContains()` and `assertNotContains()` functions are deprecated and removed in PHPUnit 9. For assertions that operate on strings, the specific\\n`assertStringContainsString()`, `assertStringContainsStringIgnoringCase()`, `assertStringNotContainsString()`, and\\n`assertStringNotContainsStringIgnoringCase()` methods should be used.\\n\\n\\nSee [Usage of the assertEquals function (phpunit.readthedocs.io)](https://phpunit.readthedocs.io/en/stable/assertions.html) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnitAssertContainsInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPUnit\",\n                      \"index\": 20,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpAssignmentInConditionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Assignment in condition\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the assignments that are used in conditional expressions.\",\n                  \"markdown\": \"Reports the assignments that are used in conditional expressions.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpAssignmentInConditionInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnnecessaryDoubleQuotesInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unnecessary double quotes\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports double-quoted string literals that do not contain string interpolation, escape sequences, or single quotes.\",\n                  \"markdown\": \"Reports double-quoted string literals that do not contain string interpolation, escape sequences, or single quotes.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnnecessaryDoubleQuotesInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDivisionByZeroInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Division by zero\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports division by zero or modulo by zero.\",\n                  \"markdown\": \"Reports division by zero or modulo by zero.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDivisionByZeroInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpNullSafeOperatorCanBeUsedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Nullsafe operator '?->' can be used\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the null-checking conditional expressions that can be safely replaced with the '?->' nullsafe operator.\",\n                  \"markdown\": \"Reports the null-checking conditional expressions that can be safely replaced with the `?->` nullsafe operator.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpNullSafeOperatorCanBeUsedInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpCommentCanBeReplacedWithNamedArgumentInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Comment can be replaced with named argument\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the inline comments before arguments in function calls that only contain the name of the parameter and thus serve as hints. In PHP 8.0 and later, named arguments can be used instead. See Named arguments (php.net) for details.\",\n                  \"markdown\": \"Reports the inline comments before arguments in function calls that only contain the name of the parameter and thus serve as hints. In PHP 8.0 and later, named arguments can be used instead.\\n\\n\\nSee [Named arguments (php.net)](https://wiki.php.net/rfc/match_expression_v2) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpCommentCanBeReplacedWithNamedArgumentInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpLineCommentWillBeParsedAsAttributeInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Comment is parsed as attribute in PHP 8.0\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports line comments starting with '#['. In PHP 8.0 and later, such comments are parsed as attributes. See Attributes (php.net) for details.\",\n                  \"markdown\": \"Reports line comments starting with `#[`. In PHP 8.0 and later, such comments are parsed as attributes.\\n\\n\\nSee [Attributes (php.net)](https://wiki.php.net/rfc/attributes_v2) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpLineCommentWillBeParsedAsAttributeInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Attributes\",\n                      \"index\": 45,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArrayShapeCanBeAddedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'#[ArrayShape]' attribute can be added\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the methods and functions that are returning arrays with known non-trivial keys. Suggests specifying the shape of the returned array via the '#[ArrayShape]' attribute or an array shape in the PHPDoc comment.\",\n                  \"markdown\": \"Reports the methods and functions that are returning arrays with known non-trivial keys. Suggests specifying the shape of the returned array via the `#[ArrayShape]` attribute or an array shape in the PHPDoc comment.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArrayShapeCanBeAddedInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Attributes\",\n                      \"index\": 45,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpRedundantCatchClauseInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant catch clause\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'catch' clauses with exceptions that are never thrown from the corresponding 'try' block.\",\n                  \"markdown\": \"Reports the `catch` clauses with exceptions that are never thrown from the corresponding `try` block.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpRedundantCatchClauseInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Error handling\",\n                      \"index\": 72,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnpackedArgumentTypeMismatchInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Invalid type of unpacked argument\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports unpacked function arguments and array elements whose type is neither 'array' nor 'Traversable'. Starting with PHP 8.0, such usages will result in 'Fatal error'.\",\n                  \"markdown\": \"Reports unpacked function arguments and array elements whose type is neither `array` nor `Traversable`.\\n\\n\\nStarting with PHP 8.0, such usages will result in `Fatal error`.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnpackedArgumentTypeMismatchInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnnecessaryLeadingBackslashInUseStatementInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unnecessary leading '\\\\' in 'use' statement\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'use' statements with an unnecessary leading '\\\\'. For namespaced names (fully qualified namespace names containing a namespace separator, such as 'Foo\\\\Bar' as opposed to global names that do not, such as 'FooBar'), the leading backslash is unnecessary and not recommended, as import names must be fully qualified and are not processed relative to the current namespace. See Using namespaces: Aliasing/Importing (php.net) for details.\",\n                  \"markdown\": \"Reports the `use` statements with an unnecessary leading `\\\\`.\\n\\n\\nFor namespaced names (fully qualified namespace names containing a namespace separator, such as `Foo\\\\Bar` as opposed to global names that do not, such as `FooBar`), the leading backslash is unnecessary and not recommended, as import names must be fully qualified and are not processed relative to the current namespace.\\n\\n\\nSee [Using namespaces: Aliasing/Importing (php.net)](https://www.php.net/manual/en/language.namespaces.importing.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnnecessaryLeadingBackslashInUseStatementInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnitAssertTrueWithIncompatibleTypeArgumentInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'assertTrue()' with incompatible argument type\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the PHPUnit 'assertTrue()' calls whose arguments are of incompatible types. Since the 'assertTrue()' method relies on strict types comparison with 'true', such assertions will always fail.\",\n                  \"markdown\": \"Reports the PHPUnit `assertTrue()` calls whose arguments are of incompatible types. Since the `assertTrue()` method relies on strict types comparison with `true`, such assertions will always fail.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnitAssertTrueWithIncompatibleTypeArgumentInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPUnit\",\n                      \"index\": 20,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDuplicateOperandInComparisonInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Duplicate operand in comparison\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports duplicate operands in binary expressions ('+', '-', '*', '/', '&&', '||', and '.') that are in turn used inside comparison expressions. Such operands do not affect the comparison result and can be safely removed.\",\n                  \"markdown\": \"Reports duplicate operands in binary expressions (`+`, `-`, `*`, `/`, `&&`, `||`, and `.`) that are in turn used inside comparison expressions. Such operands do not affect the comparison result and can be safely removed.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDuplicateOperandInComparisonInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUndefinedClassInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Undefined class\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the references to classes whose declarations are not found in the project files, configured include paths, or among the PHP predefined classes. Use the options below to customize the inspection: Ignore PHPDoc: if selected, the inspection will not report the undefined classes referenced in PHPDoc blocks.\",\n                  \"markdown\": \"Reports the references to classes whose declarations are not found in the project files, configured include paths, or among the PHP predefined classes.\\n\\nUse the options below to customize the inspection:\\n\\n* **Ignore PHPDoc**: if selected, the inspection will not report the undefined classes referenced in PHPDoc blocks.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUndefinedClassInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Undefined symbols\",\n                      \"index\": 26,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpNestedMinMaxCallInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Nested 'min/max' call\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports nested 'min'/'max' calls. Since the 'min'/'max' functions accept any number of arguments, such nested calls are redundant.\",\n                  \"markdown\": \"Reports nested `min`/`max` calls. Since the `min`/`max` functions accept any number of arguments, such nested calls are redundant.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpNestedMinMaxCallInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpPluralMixedCanBeReplacedWithArrayInspection\",\n                \"shortDescription\": {\n                  \"text\": \"'mixed' type can be replaced with 'array'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'mixed[]' usages in PHPDoc blocks that can be safely replaced with 'array'.\",\n                  \"markdown\": \"Reports the `mixed[]` usages in PHPDoc blocks that can be safely replaced with `array`.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpPluralMixedCanBeReplacedWithArrayInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpCompoundNamespaceDepthInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Compound namespace depth is more than 2\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of compound namespaces whose depth exceeds two levels. According to PSR-12, compound namespaces with a depth of more than two MUST NOT be used. See PSR-12: Extended Coding Style (php-fig.org) for details.\",\n                  \"markdown\": \"Reports the usages of compound namespaces whose depth exceeds two levels.\\n\\nAccording to PSR-12, compound namespaces with a depth of more than two MUST NOT be used.\\n\\n\\nSee [PSR-12: Extended Coding Style (php-fig.org)](https://www.php-fig.org/psr/psr-12/#3-declare-statements-namespace-and-import-statements) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpCompoundNamespaceDepthInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style/PSR-12\",\n                      \"index\": 61,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArgumentWithoutNamedIdentifierInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Argument without name identifier\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports arguments without name identifiers.\",\n                  \"markdown\": \"Reports arguments without name identifiers.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArgumentWithoutNamedIdentifierInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpDuplicatedCharacterInStrFunctionCallInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Duplicate character in function call\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports duplicate characters provided in the 'characters' argument of functions like 'ltrim' or 'str_words_counts'. Such duplicates are most probably a mistake and can be safely removed.\",\n                  \"markdown\": \"Reports duplicate characters provided in the `characters` argument of functions like `ltrim` or `str_words_counts`. Such duplicates are most probably a mistake and can be safely removed.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpDuplicatedCharacterInStrFunctionCallInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUndefinedConstantInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Undefined constant\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the references to constants that are not found in the project files, configured include paths, or among the PHP predefined constants.\",\n                  \"markdown\": \"Reports the references to constants that are not found in the project files, configured include paths, or among the PHP predefined constants.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUndefinedConstantInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Undefined symbols\",\n                      \"index\": 26,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUncoveredEnumCasesInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Some enum cases are uncovered\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'match' expressions that don't cover all 'enum' cases in 'match' arm conditions.\",\n                  \"markdown\": \"Reports the `match` expressions that don't cover all `enum` cases in `match` arm conditions.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUncoveredEnumCasesInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpMethodOrClassCallIsNotCaseSensitiveInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Case mismatch in method call or class usage\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of functions, methods, classes, and namespaces that do not match the case used in their declarations.\",\n                  \"markdown\": \"Reports the usages of functions, methods, classes, and namespaces that do not match the case used in their declarations.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpMethodOrClassCallIsNotCaseSensitiveInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpAccessStaticViaInstanceInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Class static member accessed via instance\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports references to static methods and fields via a class instance rather than the class itself. Even though referring to static members via instance variables is allowed by PHP, this makes the code confusing, as the reader may think that the result of the method depends on the instance. The quick-fix replaces the instance variable with the class name. Example: 'class StaticClass {\\n    public static function someStaticFunction(): int\\n    {\\n        return 3;\\n    }\\n\\n  }\\n\\n  $var = new StaticClass\\n  $var::someStaticFunction();' After the quick-fix is applied: 'StaticClass::someStaticFunction()'\",\n                  \"markdown\": \"Reports references to static methods and fields via a class instance rather than the class itself.\\n\\nEven though referring to static members via instance variables is allowed by PHP,\\nthis makes the code confusing, as the reader may think that the result of the method depends on the instance.\\n\\nThe quick-fix replaces the instance variable with the class name.\\n\\nExample:\\n\\n\\n      class StaticClass {\\n        public static function someStaticFunction(): int\\n        {\\n            return 3;\\n        }\\n\\n      }\\n\\n      $var = new StaticClass\\n      $var::someStaticFunction();\\n\\nAfter the quick-fix is applied:\\n\\n\\n      StaticClass::someStaticFunction()\\n\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpAccessStaticViaInstanceInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpRegExpRedundantModifierInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant modifier\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'i' (case insensitivity) modifiers that are used in regular expression patterns containing no letters. Such modifiers are redundant and can be safely removed.\",\n                  \"markdown\": \"Reports the `i` (case insensitivity) modifiers that are used in regular expression patterns containing no letters. Such modifiers are redundant and can be safely removed.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpRegExpRedundantModifierInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Regular expressions\",\n                      \"index\": 68,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpAttributeCanBeAddedToOverriddenMemberInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Attribute can be added to overriding member \"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the methods' and parameters' attributes that can be propagated to overriding methods/parameters. See Attributes (php.net) for details.\",\n                  \"markdown\": \"Reports the methods' and parameters' attributes that can be propagated to overriding methods/parameters.\\n\\n\\nSee [Attributes (php.net)](https://wiki.php.net/rfc/attributes_v2) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpAttributeCanBeAddedToOverriddenMemberInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Attributes\",\n                      \"index\": 45,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpRedundantDocCommentInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant PHPDoc comment\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports PHPDoc comments or their parts that contain the information already provided in declarations.\",\n                  \"markdown\": \"Reports PHPDoc comments or their parts that contain the information already provided in declarations.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpRedundantDocCommentInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/PHPDoc\",\n                      \"index\": 2,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnusedPrivateFieldInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unused private property\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the private properties that are never used.\",\n                  \"markdown\": \"Reports the private properties that are never used.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnusedPrivateFieldInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Unused symbols\",\n                      \"index\": 37,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpSingleStatementWithBracesInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Single-statement body with braces\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the control structures (such as loops or conditionals) whose bodies are enclosed in braces but only contain a single child statement. Using braces in such cases is not necessary. See Control structures (php.net) for details.\",\n                  \"markdown\": \"Reports the control structures (such as loops or conditionals) whose bodies are enclosed in braces but only contain a single child statement. Using braces in such cases is not necessary.\\n\\n\\nSee [Control structures (php.net)](https://www.php.net/manual/en/language.control-structures.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpSingleStatementWithBracesInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnnecessaryBoolCastInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Redundant cast to boolean\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the '(bool)'/'(boolean)' casts and 'boolval()' calls that are redundant since casting to 'bool' is performed implicitly.\",\n                  \"markdown\": \"Reports the `(bool)`/`(boolean)` casts and `boolval()` calls that are redundant since casting to `bool` is performed implicitly.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnnecessaryBoolCastInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnnecessaryElseBranchInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unnecessary 'else' branch\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'else' branches in 'if' statements whose bodies always execute a terminating statement such as 'return' or 'throw'. Such branches are redundant and can be safely omitted.\",\n                  \"markdown\": \"Reports the `else` branches in `if` statements whose bodies always execute a terminating statement such as `return` or `throw`. Such branches are redundant and can be safely omitted.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": false,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnnecessaryElseBranchInspection\",\n                    \"ideaSeverity\": \"INFORMATION\",\n                    \"qodanaSeverity\": \"Info\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Control flow\",\n                      \"index\": 12,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnusedMatchConditionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Unused 'match' condition\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the conditions in 'match' expressions that will never be matched. Similarly to PHP Engine behavior, the inspection uses strict comparison ('===') to check the types in 'match' conditions against the 'match' argument type, regardless of the 'strict_types' directive. Since no type coercion occurs, some conditions may be non-matched due to non-matching types. See Match expression (php.net) for details.\",\n                  \"markdown\": \"Reports the conditions in `match` expressions that will never be matched.\\n\\n\\nSimilarly to PHP Engine behavior, the inspection uses strict comparison (`===`) to check the types in `match` conditions against the `match` argument type, regardless of the `strict_types` directive. Since no type coercion occurs, some conditions may be non-matched due to non-matching types.\\n\\n\\nSee [Match expression (php.net)](https://wiki.php.net/rfc/match_expression_v2) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpUnusedMatchConditionInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpComposerDuplicatedRequirementInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Duplicate package entries in composer.json\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports duplicate package entries in the 'require' and 'require-dev' sections of composer.json.\",\n                  \"markdown\": \"Reports duplicate package entries in the `require` and `require-dev` sections of *composer.json*.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpComposerDuplicatedRequirementInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Composer\",\n                      \"index\": 38,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpExpressionResultUnusedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Expression result unused\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the expressions that are calculated, but the calculation result is not used anywhere. Such errors can be caused, for example, by misspelling the '=' operator as '=='.\",\n                  \"markdown\": \"Reports the expressions that are calculated, but the calculation result is not used anywhere.\\n\\nSuch errors can be caused, for example, by misspelling the `=` operator as `==`.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpExpressionResultUnusedInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpInternalEntityUsedInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Usage of internal entity\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the usages of the entities that are marked as '@internal' and are located in different source roots. The usages located in the same source root are not reported. In most cases, the reported usages should be removed or replaced with other constructs.\",\n                  \"markdown\": \"Reports the usages of the entities that are marked as `@internal` and are located in different source roots. The usages located in the same source root are not reported.\\n\\n\\nIn most cases, the reported usages should be removed or replaced with other constructs.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpInternalEntityUsedInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/General\",\n                      \"index\": 6,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpPointlessBooleanExpressionInConditionInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Pointless boolean expression inside 'if' condition\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the boolean expressions inside 'if' conditions that contain '$expr == true' or '$expr == false'. Such expressions can be simplified to 'if($expr)' and 'if(!expr)'.\",\n                  \"markdown\": \"Reports the boolean expressions inside `if` conditions that contain `$expr == true` or `$expr == false`. Such expressions can be simplified to `if($expr)` and `if(!expr)`.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpPointlessBooleanExpressionInConditionInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpNamedArgumentsWithChangedOrderInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Named arguments order does not match parameters order\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports named argument with order that does not match parameter order\",\n                  \"markdown\": \"Reports named argument with order that does not match parameter order\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpNamedArgumentsWithChangedOrderInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code style\",\n                      \"index\": 3,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpCaseWithValueNotFoundInEnumInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Case with specified value not found in enum\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the arguments of enum's 'from' method calls that are not found in target enum classes. See Enumerations (php.net) for details.\",\n                  \"markdown\": \"Reports the arguments of enum's `from` method calls that are not found in target enum classes.\\n\\n\\nSee [Enumerations (php.net)](https://wiki.php.net/rfc/enumerations) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"error\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpCaseWithValueNotFoundInEnumInspection\",\n                    \"ideaSeverity\": \"ERROR\",\n                    \"qodanaSeverity\": \"Critical\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpIdempotentOperationInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Idempotent operation in binary expression\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the binary expression operands that do not change the expression result (such as '+ 0' or '. \\\"\\\"') and are therefore redundant.\",\n                  \"markdown\": \"Reports the binary expression operands that do not change the expression result (such as `+ 0` or `. \\\"\\\"`) and are therefore redundant.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpIdempotentOperationInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpLoopCanBeReplacedWithImplodeInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Loop can be replaced with 'implode()'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'foreach' loops that can be safely replaced with 'implode()' calls. See implode (php.net) for details.\",\n                  \"markdown\": \"Reports the `foreach` loops that can be safely replaced with `implode()` calls.\\n\\n\\nSee [implode (php.net)](https://www.php.net/manual/en/function.implode.php) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpLoopCanBeReplacedWithImplodeInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpConcatenationWithArithmeticInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Concatenation with arithmetic usage\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the string concatenation expressions that are used together with '+', '-', '<<', and '>>' operators. Starting with PHP 8, the concatenation operation has lower precedence and such expressions can thus produce unexpected results. See Concatenation precedence (php.net) for details.\",\n                  \"markdown\": \"Reports the string concatenation expressions that are used together with `+`, `-`, `<<`, and `>>` operators. Starting with PHP 8, the concatenation operation has lower precedence and such expressions can thus produce unexpected results.\\n\\n\\nSee [Concatenation precedence (php.net)](https://wiki.php.net/rfc/concatenation_precedence) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpConcatenationWithArithmeticInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpToStringImplementationInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Method '__toString' implementation\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the attempts to convert the objects having no '__toString' method implementation to 'string'. Prior to PHP 7.4, this would lead to a fatal 'E_RECOVERABLE_ERROR' level error. In PHP 7.4, a fatal non-recoverable 'ERROR' is thrown. In PHP 8.0, the return value follows the standard PHP type semantics and will be coerced into a string if possible and if strict typing is disabled. If the Check __toString exists for each expression type option is enabled, the inspection will check all possible types of the expression and report if at least one of them doesn't contain the '__toString' method implementation. See __toString (php.net) for details.\",\n                  \"markdown\": \"Reports the attempts to convert the objects having no `__toString` method implementation to `string`.\\n\\n\\nPrior to PHP 7.4, this would lead to a fatal `E_RECOVERABLE_ERROR` level error. In PHP 7.4, a fatal non-recoverable `ERROR` is thrown. In PHP 8.0, the return value follows the standard PHP type semantics and will be coerced into a string if possible and if strict typing is disabled.\\n\\n\\nIf the **Check __toString exists for each expression type** option is enabled, the inspection will check all possible types of the expression and\\nreport if at least one of them doesn't contain the `__toString` method implementation.\\n\\n\\nSee [__toString (php.net)](https://www.php.net/manual/en/language.oop5.magic.php#language.oop5.magic.tostring) for details.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"warning\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpToStringImplementationInspection\",\n                    \"ideaSeverity\": \"WARNING\",\n                    \"qodanaSeverity\": \"High\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Probable bugs\",\n                      \"index\": 9,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpArrayAccessCanBeReplacedWithForeachValueInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Array access can be replaced with 'foreach' value\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the array access expressions inside 'foreach' loops that can be replaced with a 'foreach' value.\",\n                  \"markdown\": \"Reports the array access expressions inside `foreach` loops that can be replaced with a `foreach` value.\"\n                },\n                \"defaultConfiguration\": {\n                  \"enabled\": true,\n                  \"level\": \"note\",\n                  \"parameters\": {\n                    \"suppressToolId\": \"PhpArrayAccessCanBeReplacedWithForeachValueInspection\",\n                    \"ideaSeverity\": \"WEAK WARNING\",\n                    \"qodanaSeverity\": \"Moderate\"\n                  }\n                },\n                \"relationships\": [\n                  {\n                    \"target\": {\n                      \"id\": \"PHP/Code smell\",\n                      \"index\": 1,\n                      \"toolComponent\": {\n                        \"name\": \"QDPHP\"\n                      }\n                    },\n                    \"kinds\": [\n                      \"superset\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"id\": \"PhpUnitAssertCanBeReplacedWithFailInspection\",\n                \"shortDescription\": {\n                  \"text\": \"Assertion can be replaced with 'fail'\"\n                },\n                \"fullDescription\": {\n                  \"text\": \"Reports the 'assertTrue()'/'assertFalse()' calls with the 'false'/'true' arguments in PHPUnit tests. Such usages can be replaced with 'fail()' calls to indicate that a test is expected to fail.\",\n                  \"markdown\": \"Reports the `assertTrue()`/`assertFalse()` calls with the `false`/`true` arguments in PHPUnit tests. Such usages can be replaced with `fail()` calls to indicate that a test is expected to fail.\"\n                "
        },
        {
          "name": "qodana.yaml",
          "type": "blob",
          "size": 1.287109375,
          "content": "#-------------------------------------------------------------------------------#\n#               Qodana analysis is configured by qodana.yaml file               #\n#             https://www.jetbrains.com/help/qodana/qodana-yaml.html            #\n#-------------------------------------------------------------------------------#\nversion: \"1.0\"\n\n#Specify inspection profile for code analysis\nprofile:\n  name: qodana.recommended\n#Enable inspections\n#include:\n#  - name: <SomeEnabledInspectionId>\n\n#Disable inspections\n#exclude:\n#  - name: <SomeDisabledInspectionId>\n#    paths:\n#      - <path/where/not/run/inspection>\n\nphp:\n  version: '8.0' #(Applied in CI/CD pipeline)\n\n#Execute shell command before Qodana execution (Applied in CI/CD pipeline)\n#bootstrap: sh ./prepare-qodana.sh\n\n#Install IDE plugins before Qodana execution (Applied in CI/CD pipeline)\n#plugins:\n#  - id: <plugin.id> #(plugin id can be found at https://plugins.jetbrains.com)\n\n#Specify Qodana linter for analysis (Applied in CI/CD pipeline)\nlinter: jetbrains/qodana-php:latest\nexclude:\n  - name: All\n    paths:\n      - config\n      - ext\n      - kernel\n      - prototypes\n      - stub\n      - templates\n      - tests\n      - vendor\n\ninclude:\n  - name: CheckDependencyLicenses\n  - name: PhpVulnerablePathsInspection\n  - name: VulnerableLibrariesGlobal\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "stub",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "zephir",
          "type": "blob",
          "size": 3.7900390625,
          "content": "#!/usr/bin/env php\n<?php\n\n/**\n * This file is part of the Zephir.\n *\n * (c) Phalcon Team <team@zephir-lang.com>\n *\n * For the full copyright and license information, please view\n * the LICENSE file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nuse Monolog\\Handler\\StreamHandler;\nuse Monolog\\Logger;\nuse Zephir\\Backend\\Backend;\nuse Zephir\\Compiler;\nuse Zephir\\Config;\nuse Zephir\\Console\\Application;\nuse Zephir\\Console\\Command\\ApiCommand;\nuse Zephir\\Console\\Command\\BuildCommand;\nuse Zephir\\Console\\Command\\CleanCommand;\nuse Zephir\\Console\\Command\\CompileCommand;\nuse Zephir\\Console\\Command\\FullCleanCommand;\nuse Zephir\\Console\\Command\\GenerateCommand;\nuse Zephir\\Console\\Command\\InitCommand;\nuse Zephir\\Console\\Command\\InstallCommand;\nuse Zephir\\Console\\Command\\ListCommand;\nuse Zephir\\Console\\Command\\StubsCommand;\nuse Zephir\\FileSystem\\HardDisk;\nuse Zephir\\Logger\\Formatter\\CompilerFormatter;\nuse Zephir\\Parser\\Manager;\nuse Zephir\\Parser\\Parser;\n\nif (version_compare('7.0.0', PHP_VERSION, '>')) {\n    fprintf(\n        STDERR,\n        'This Zephir version is supported on PHP >= 7.0.0.'.PHP_EOL.\n        'You are using PHP %s (%s).'.PHP_EOL,\n        PHP_VERSION,\n        PHP_BINARY\n    );\n\n    exit(1);\n}\n\nif (PHP_SAPI !== 'cli' && PHP_SAPI !== 'phpdbg') {\n    fprintf(\n        STDERR,\n        'Zephir should be invoked via the CLI version of PHP, not the %s SAPI.'.PHP_EOL,\n        PHP_SAPI\n    );\n\n    exit(1);\n}\n\nforeach ([__DIR__ . '/../../autoload.php', __DIR__ . '/../vendor/autoload.php', __DIR__ . '/vendor/autoload.php'] as $file) {\n    if (file_exists($file)) {\n        include_once $file;\n        break;\n    }\n}\n\nif (!class_exists('Composer\\Autoload\\ClassLoader', false)) {\n    fwrite(STDERR, 'Unable to find the Composer autoloader.'.PHP_EOL);\n\n    exit(1);\n}\n\nset_error_handler(static function ($code, $message, $file = '', $line = -1) {\n    if (error_reporting() & $code) {\n        throw new ErrorException($message, 0, $code, (string) $file, $line);\n    }\n});\n\nif (filter_var(getenv('ZEPHIR_DEBUG'), FILTER_VALIDATE_BOOLEAN)) {\n    set_exception_handler(static function (Throwable $t) {\n        fwrite(STDERR, \"[ERROR] {$t->getMessage()}\". PHP_EOL);\n\n        exit(1);\n    });\n}\n\n/**\n * When it is executed inside .phar, realpath() will return `false`.\n */\n$rootPath = Phar::running() ?: realpath(dirname(__FILE__));\n$config = Config::fromServer();\n\n/**\n * Logger\n */\n$formatter = new CompilerFormatter($config);\n\n$consoleStdErrorHandler = new StreamHandler('php://stderr', Logger::WARNING, false);\n$consoleStdErrorHandler->setFormatter($formatter);\n\n$consoleStdOutHandler = new StreamHandler('php://stdout', Logger::INFO, false);\n$consoleStdOutHandler->setFormatter($formatter);\n\n$disk = new HardDisk(getcwd().'/.zephir');\n\n$parser = new Parser();\n$logger = new Logger('zephir', [\n    $consoleStdErrorHandler,\n    $consoleStdOutHandler,\n]);\n$compilerFactory = new Compiler\\CompilerFileFactory($config, $disk, $logger);\n$backend = new Backend($config, $rootPath.'/kernel', $rootPath.'/templates');\n\n$compiler = new Compiler($config, $backend, new Manager($parser), $disk, $compilerFactory);\n$compiler->setPrototypesPath($rootPath.'/prototypes');\n$compiler->setOptimizersPath($rootPath.'/src/Optimizers');\n$compiler->setTemplatesPath($rootPath.'/templates');\n$compiler->setLogger($logger);\n\n$application = new Application();\n$application->add(new ApiCommand($compiler, $config));\n$application->add(new BuildCommand());\n$application->add(new CleanCommand($disk));\n$application->add(new CompileCommand($compiler));\n$application->add(new FullCleanCommand());\n$application->add(new GenerateCommand($compiler));\n$application->add(new InitCommand($backend, $config, $logger));\n$application->add(new InstallCommand($compiler, $config));\n$application->add(new ListCommand());\n$application->add(new StubsCommand($compiler));\n\n$application->run();\n"
        },
        {
          "name": "zephir-autocomplete",
          "type": "blob",
          "size": 1.703125,
          "content": "# Zephir Bash completion\n#\n# This file is part of the Zephir.\n#\n# (c) Phalcon Team <team@zephir-lang.com>\n#\n# For the full copyright and license information, please view\n# the LICENSE file that was distributed with this source code.\n#\n# Usage:\n#\n# 1. Copy this file to the common place:\n#\n#   ln -s zephir-autocomplete /etc/bash_completion.d/zephir-autocomplete\n#\n# 2. Load zephir-autocomplete from within your ~/.bash_profile:\n#\n#   if [ -f /etc/bash_completion.d/zephir-autocomplete ]; then\n#     source /etc/bash_completion.d/zephir-autocomplete\n#   fi\n#\n# 3. Restart your shell, or reload your ~/.bash_profile:\n#\n#   source ~/.bash_profile\n#\n\nfunction _zephir_completion() {\n  COMPREPLY=()\n\n  local cur=\"${COMP_WORDS[COMP_CWORD]}\"\n  local commands=\"api build clean compile fullclean generate help\"\n  commands+=\" init install list stubs\"\n\n  if [[ $COMP_CWORD -gt 1 ]]\n  then\n    local first=\"${COMP_WORDS[1]}\"\n\n    if [[ \"$cur\" == -* ]]\n    then\n      declare -a a_commands=( \"$( echo \"$commands\" | tr \" \" \"\\\\n\" )\" )\n\n      for i in \"${a_commands[@]}\"\n      do\n        if [ \"$i\" = \"$first\" ]\n        then\n          local opts\n          opts=$( zephir \"$first\" -h --no-ansi | \\\n            tr -cs '[=-=][:alpha:]_' '[\\n*]' | \\\n            grep '^-' )\n          COMPREPLY=( $( compgen -W \"${opts}\" -- \"${cur}\" ) )\n        fi\n      done\n    else\n      COMPREPLY+=( $( compgen -W \"namespace\" -- \"${cur}\" ) )\n    fi\n  elif [[ \"$cur\" == -* ]]\n  then\n    local opts\n    opts=\"--help --quiet --verbose --version --ansi --no-ansi\"\n    opts+=\" --dumpversion -dumpversion --vernum\"\n\n    COMPREPLY=( $( compgen -W \"${opts}\" -- \"${cur}\" ) )\n  else\n    COMPREPLY=( $( compgen -W \"${commands}\" -- \"${cur}\" ) )\n  fi\n}\n\ncomplete -F _zephir_completion zephir\n"
        },
        {
          "name": "zephir.bat",
          "type": "blob",
          "size": 0.3798828125,
          "content": "@echo off\nrem This file is part of the Zephir.\nrem\nrem (c) Phalcon Team <team@zephir-lang.com>\nrem\nrem For the full copyright and license information, please view\nrem the LICENSE file that was distributed with this source code.\ncls\n\nif \"%PHP_PEAR_PHP_BIN%\" neq \"\" (\n\tset PHPBIN=%PHP_PEAR_PHP_BIN%\n) else set PHPBIN=php\n\nSET mypath=%~dp0\necho %mypath:~0,-1%\n\"%PHPBIN%\" \"%mypath%\\zephir\" %*\n"
        }
      ]
    }
  ]
}