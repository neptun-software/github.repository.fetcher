{
  "metadata": {
    "timestamp": 1736712223294,
    "page": 942,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "driesvints/vat-calculator",
      "stars": 1211,
      "defaultBranch": "3.x",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2158203125,
          "content": "* text=auto\n\n/tests export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\n.travis.yml export-ignore\nCHANGELOG.md export-ignore\nphpunit.xml.dist export-ignore\nREADME.md export-ignore\nUPGRADE.md export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0537109375,
          "content": "composer.lock\nvendor\nphpunit.xml\n.phpunit.result.cache\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 9.458984375,
          "content": "# Changelog\n\n## [Unreleased](https://github.com/driesvints/vat-calculator/compare/3.18.0...3.x)\n\n## [3.18.0](https://github.com/driesvints/vat-calculator/compare/3.17.0...3.18.0) - 2025-01-06\n\n* Add missing French overseas by [@boutetnico](https://github.com/boutetnico) in https://github.com/driesvints/vat-calculator/pull/187\n\n## [3.17.0](https://github.com/driesvints/vat-calculator/compare/3.16.0...3.17.0) - 2025-01-01\n\n* slovakia-2025 by [@MartinMystikJonas](https://github.com/MartinMystikJonas) in https://github.com/driesvints/vat-calculator/pull/186\n\n## [3.16.0](https://github.com/driesvints/vat-calculator/compare/3.15.0...3.16.0) - 2024-12-05\n\n* Updated reduced vat rate for Poland by [@soukicz](https://github.com/soukicz) in https://github.com/driesvints/vat-calculator/pull/184\n\n## [3.15.0](https://github.com/driesvints/vat-calculator/compare/3.14.0...3.15.0) - 2024-12-05\n\n* Austria has only two reduced rates by [@soukicz](https://github.com/soukicz) in https://github.com/driesvints/vat-calculator/pull/183\n\n## [3.14.0](https://github.com/driesvints/vat-calculator/compare/3.13.0...3.14.0) - 2024-11-21\n\n* Update VatCalculator.php by [@DonCamillo11](https://github.com/DonCamillo11) in https://github.com/driesvints/vat-calculator/pull/182\n\n## [3.13.0](https://github.com/driesvints/vat-calculator/compare/3.12.0...3.13.0) - 2024-10-08\n\n* PHP 8.4 support by [@driesvints](https://github.com/driesvints) in https://github.com/driesvints/vat-calculator/pull/179\n\n## [3.12.0](https://github.com/driesvints/vat-calculator/compare/3.11.0...3.12.0) - 2024-09-02\n\n* Update Finland rates by [@jevgeni-sultanov](https://github.com/jevgeni-sultanov) in https://github.com/driesvints/vat-calculator/pull/177\n\n## [3.11.0](https://github.com/driesvints/vat-calculator/compare/3.10.1...3.11.0) - 2024-05-14\n\n* Update postal code exceptions for Portugal by [@toyi](https://github.com/toyi) in https://github.com/driesvints/vat-calculator/pull/174\n\n## [3.10.1](https://github.com/driesvints/vat-calculator/compare/3.10.0...3.10.1) - 2024-05-10\n\n* Reduced rate and parking rate corrected for Belgium by [@edwwaarrdd](https://github.com/edwwaarrdd) in https://github.com/driesvints/vat-calculator/pull/173\n\n## [3.10.0](https://github.com/driesvints/vat-calculator/compare/3.9.0...3.10.0) - 2024-02-12\n\n* Add support for laravel 11 by [@shuvroroy](https://github.com/shuvroroy) in https://github.com/driesvints/vat-calculator/pull/172\n\n## [3.9.0](https://github.com/driesvints/vat-calculator/compare/3.8.0...3.9.0) - 2024-01-04\n\n- Update Estonia VAT rate by [@driesvints](https://github.com/driesvints) in https://github.com/driesvints/vat-calculator/commit/86db9c8608c026b91ce914fa7aa0ec4231faeb05\n\n## [3.8.0](https://github.com/driesvints/vat-calculator/compare/3.7.0...3.8.0) - 2024-01-03\n\n* Update Swiss VAT rates for 2024 by [@spaze](https://github.com/spaze) in https://github.com/driesvints/vat-calculator/pull/169\n* Update VAT rate for Azores to 16% by [@spaze](https://github.com/spaze) in https://github.com/driesvints/vat-calculator/pull/170\n* Correct VAT and postal code for Campione d'Italia by [@spaze](https://github.com/spaze) in https://github.com/driesvints/vat-calculator/pull/168\n\n## [3.7.0](https://github.com/driesvints/vat-calculator/compare/3.6.0...3.7.0) - 2024-01-01\n\n* Starting 2024, CZ has just one low rate 12% by [@spaze](https://github.com/spaze) in https://github.com/driesvints/vat-calculator/pull/164\n* Adjust Luxemburg rates by [@driesvints](https://github.com/driesvints) in https://github.com/driesvints/vat-calculator/pull/167\n\n## [3.6.0](https://github.com/driesvints/vat-calculator/compare/3.5.0...3.6.0) - 2023-09-21\n\n- PHP 8.3 support by [@driesvints](https://github.com/driesvints) in https://github.com/driesvints/vat-calculator/pull/161\n\n## [3.5.0](https://github.com/driesvints/vat-calculator/compare/3.4.0...3.5.0) - 2023-08-30\n\n- Don't rely on Laravel config component by [@gregberger](https://github.com/gregberger) in https://github.com/driesvints/vat-calculator/pull/154\n\n## [3.4.0](https://github.com/driesvints/vat-calculator/compare/3.3.0...3.4.0) - 2023-06-09\n\n- Allow all tax rules to be overwritten by @Fossil01 & @driesvints in https://github.com/driesvints/vat-calculator/pull/156\n\n## [3.3.0](https://github.com/driesvints/vat-calculator/compare/3.2.0...3.3.0) - 2023-01-11\n\n### Added\n\n- Laravel v10 Support by @driesvints in https://github.com/driesvints/vat-calculator/pull/152\n\n## [3.2.0](https://github.com/driesvints/vat-calculator/compare/3.1.2...3.2.0) - 2023-01-05\n\n### Added\n\n- Added detailed VAT rates by @greenhof in https://github.com/driesvints/vat-calculator/pull/151\n\n## [3.1.2](https://github.com/driesvints/vat-calculator/compare/3.1.1...3.1.2) - 2022-11-09\n\n### Changed\n\n- Test on PHP 8.2 by @driesvints in https://github.com/driesvints/vat-calculator/pull/149\n\n## [3.1.1](https://github.com/driesvints/vat-calculator/compare/3.1.0...3.1.1) - 2022-09-19\n\n### Fixed\n\n- Fix rounding of values by @driesvints in https://github.com/driesvints/vat-calculator/pull/147\n\n## [3.1.0](https://github.com/driesvints/vat-calculator/compare/3.0.2...3.1.0) - 2022-07-06\n\n### Added\n\n- Added `isValidVatNumberFormat` by @pmochine in https://github.com/driesvints/vat-calculator/pull/143\n- Added connection timeout for the SOAP Client by @pmochine in https://github.com/driesvints/vat-calculator/pull/143\n\n## [3.0.2 (2022-01-11)](https://github.com/driesvints/vat-calculator/compare/3.0.1...3.0.2)\n\n### Fixed\n\n- Correct VAT and postal code for Campione d'Italia ([#138](https://github.com/driesvints/vat-calculator/pull/138))\n\n## [3.0.1 (2022-01-10)](https://github.com/driesvints/vat-calculator/compare/3.0.0...3.0.1)\n\n### Fixed\n\n- Fix some Italian postal codes ([#137](https://github.com/driesvints/vat-calculator/pull/137))\n\n## [3.0.0 (2021-10-20)](https://github.com/driesvints/vat-calculator/compare/2.5.2...3.0.0)\n\n### Changed\n\n- Drop support for PHP 7.2 and below ([#131](https://github.com/driesvints/vat-calculator/pull/131))\n- Drop support for Laravel 5.8 and below ([#131](https://github.com/driesvints/vat-calculator/pull/131))\n- Refactor validation rule ([#133](https://github.com/driesvints/vat-calculator/pull/133))\n\n### Fixed\n\n- Remove incorrect VAT rates ([#130](https://github.com/driesvints/vat-calculator/pull/130))\n\n### Removed\n\n- Remove front-end functionality ([#128](https://github.com/driesvints/vat-calculator/pull/128))\n- Remove translations ([5097c75](https://github.com/driesvints/vat-calculator/commit/5097c752dffa3ca823010816078805017fec2c75))\n- Remove IP lookup functionality ([#129](https://github.com/driesvints/vat-calculator/pull/129))\n\n## [2.5.2 (2021-05-26)](https://github.com/driesvints/vat-calculator/compare/2.5.1...2.5.2)\n\n### Changed\n\n- Using get_headers to avoid 404 status code with file_get_contents ([#119](https://github.com/driesvints/vat-calculator/pull/119))\n- Throw unavailable exception for UK VAT API ([3c937b4](https://github.com/driesvints/vat-calculator/commit/3c937b4cde8e3a8936eecf4ce56395f2daa6baa6))\n\n## [2.5.1 (2021-05-25)](https://github.com/driesvints/vat-calculator/compare/2.5.0...2.5.1)\n\n### Fixed\n\n- Fix invalid UK VAT number validation ([6e674e4](https://github.com/driesvints/vat-calculator/commit/6e674e41d413c219f5e66ba53946a8138f88e6bc))\n\n## [2.5.0 (2021-05-24)](https://github.com/driesvints/vat-calculator/compare/2.4.2...2.5.0)\n\n### Added\n\n- Validate UK VAT numbers ([#116](https://github.com/driesvints/vat-calculator/pull/116))\n\n## [2.4.2 (2021-01-24)](https://github.com/driesvints/vat-calculator/compare/2.4.1...2.4.2)\n\n### Fixed\n\n- Revert temporary german VAT change ([#102](https://github.com/driesvints/vat-calculator/pull/102))\n- Use HTTPS for links ([#105](https://github.com/driesvints/vat-calculator/pull/105))\n- Fix IPV6 resolving ([#83](https://github.com/driesvints/vat-calculator/pull/83), [3c6b16d](https://github.com/driesvints/vat-calculator/commit/3c6b16d819a1f2fff61fce16b625a184d1c2fac2))\n\n## 2.0.0 (2016-06-28)\n\n- VAT rate detection now supports ZIP codes, to take edge cases into consideration\n\n## 1.7.1 (2016-06-16)\n\n- Fixed bug when using multiple Validator extensions in Laravel\n\n## 1.7.0 (2016-05-11)\n\n- Added Cashier 6 support\n\n## 1.6.3 (2016-04-07)\n\n- Added \"shouldCollectVAT\" method\n\n## 1.6.2 (2016-02-10)\n\n- Added polish validation rule message\n\n## 1.6.1 (2016-01-14)\n\n- Added support for `vat-taxrate` as an extra field for the JS frontend integration. Thanks @orottier\n\n## 1.6.0 (2016-01-12)\n\n- Added support for setting your own \"business country code\" which will be used when selling to business customers inside your own country. Previous versions returned the wrong VAT rate (0%).\n\n## 1.5.5 (2016-01-11)\n\n- Romania reduces VAT to 20% in 2016\n\n## 1.5.4 (2015-09-18)\n\n- Fixed issue in vat_calculator.js\n\n## 1.5.3 (2015-09-18)\n\n- Added valid_vat_id and calculate JS success callback\n\n## 1.5.2 (2015-09-18)\n\n- Added greek tax rate\n\n## 1.5.1 (2015-09-16)\n\n- Added spark asset publishing\n\n## 1.5.0 (2015-09-08)\n\n- Added VAT Calculator JS\n\n## 1.4.4 (2015-09-07)\n\n- The package can now be used without Laravel\n\n## 1.4.3 (2015-09-07)\n\n- Updated standard VAT rate for Luxembourg\n\n## 1.4.2 (2015-09-06)\n\n- Added facade explanation to README and fixed a bug in the ServiceProvider\n\n## 1.4.1 (2015-09-03)\n\n- Fixed getClientIP tests\n\n## 1.4.0 (2015-09-02)\n\n- Added IP to country lookup.\n\n## 1.3.0 (2015-09-02)\n\n- Added Laravel Validator extension.\n\n## 1.2.1 (2015-09-01)\n\n- Added chainable methods for the Laravel Cashier integration, to allow a more readable command.\n\n## 1.2.0 (2015-09-01)\n\n- Added Laravel Cashier integration\n\n## 1.1.0 (2015-09-01)\n\n- Added VAT number validation.\n\n## 1.0.0 (2015-09-01)\n\n- First release.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0751953125,
          "content": "The MIT License (MIT)\n\nCopyright (c) Marcel Pociot\nCopyright (c) Dries Vints\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.728515625,
          "content": "# VatCalculator\n\n<a href=\"https://github.com/driesvints/vat-calculator/actions\">\n    <img src=\"https://github.com/driesvints/vat-calculator/workflows/tests/badge.svg\" alt=\"Tests\">\n</a>\n<a href=\"https://github.com/driesvints/vat-calculator/actions/workflows/coding-standards.yml\">\n    <img src=\"https://github.com/driesvints/vat-calculator/actions/workflows/coding-standards.yml/badge.svg\" alt=\"Coding Standards\" />\n</a>\n<a href=\"https://packagist.org/packages/mpociot/vat-calculator\">\n    <img src=\"https://img.shields.io/packagist/v/mpociot/vat-calculator\" alt=\"Latest Stable Version\">\n</a>\n<a href=\"https://packagist.org/packages/mpociot/vat-calculator\">\n    <img src=\"https://img.shields.io/packagist/dt/mpociot/vat-calculator\" alt=\"Total Downloads\">\n</a>\n\nHandle all the hard stuff related to EU MOSS tax/vat regulations, the way it should be. Integrates with **Laravel and Cashier** &mdash; or in a **standalone** PHP application. Originally created by [Marcel Pociot](https://pociot.dev).\n\n```php\n// Easy to use!\nVatCalculator::calculate(24.00, $countryCode = 'DE');\nVatCalculator::calculate(24.00, $countryCode, $postalCode);\nVatCalculator::calculate(71.00, 'DE', '41352', $isCompany = true);\nVatCalculator::getTaxRateForLocation('NL');\n\n// Check validity of a VAT number\nVatCalculator::isValidVATNumber('NL123456789B01');\n```\n\n> [!WARNING]  \n> This package does not provide any promises for correctly calculated taxes. You are still responsible to making sure that any calculated tax is correct for your use case. If you're uncertain if a certain tax is correct or not, it's best that you talk to an accountant.\n\n## Requirements\n\n- PHP 7.3 or higher\n- (optional) Laravel 6.0 or higher\n\n## Installation\n\nInstall the package with composer:\n\n```bash\ncomposer require mpociot/vat-calculator\n```\n\n### Standalone\n\nYou can also use this package without Laravel. Simply create a new instance of the VatCalculator and use it. All documentation examples use the Laravel Facade code, so make sure not to call the methods as if they were static methods.\n\n```php\nuse Mpociot\\VatCalculator\\VatCalculator;\n\n$vatCalculator = new VatCalculator();\n$vatCalculator->setBusinessCountryCode('DE');\n$grossPrice = $vatCalculator->calculate(49.99, $countryCode = 'LU');\n```\n\n## Upgrading\n\nPlease refer to [`the upgrade guide`](UPGRADE.md) when upgrading the library.\n\n## Usage\n\n### Calculate the gross price\n\nTo calculate the gross price use the `calculate` method with a net price and a country code as parameters.\n\n```php\n$grossPrice = VatCalculator::calculate(24.00, 'DE');\n```\n\nThe third parameter is the postal code of the customer.\n\nAs a fourth parameter, you can pass in a boolean indicating whether the customer is a company or a private person. If the customer is a company, which you should check by validating the VAT number, the net price gets returned.\n\n```php\n$grossPrice = VatCalculator::calculate(24.00, 'DE', '12345', $isCompany = true);\n```\n\n### Receive more information\n\nAfter calculating the gross price you can extract more information from the VatCalculator.\n\n```php\n$grossPrice = VatCalculator::calculate(24.00, 'DE'); // 28.56\n$taxRate = VatCalculator::getTaxRate(); // 0.19\n$netPrice = VatCalculator::getNetPrice(); // 24.00\n$taxValue = VatCalculator::getTaxValue(); // 4.56\n```\n\n### Receive all tax rates for a given country\n\nTo receive an array with all available tax rates for a given country, use the `getTaxRatesForCountry` method.\n\n```php\nVatCalculator::getTaxRatesForCountry('DE'); // [\"high\" => 0.19, \"low\" => 0.07]\n```\n\n### Validate EU VAT numbers\n\nPrior to validating your customers VAT numbers, you can use the `shouldCollectVAT` method to check if the country code requires you to collect VAT\nin the first place.\n\n```php\nif (VatCalculator::shouldCollectVAT('DE')) {\n    // This country code requires VAT collection...\n}\n```\n\nTo validate your customers VAT numbers, you can use the `isValidVATNumber` method. The VAT number should be in a format specified by the [VIES](http://ec.europa.eu/taxation_customs/vies/faqvies.do#item_11). The given VAT numbers will be truncated and non relevant characters / whitespace will automatically be removed.\n\nThis service relies on a third party SOAP API provided by the EU. If, for whatever reason, this API is unavailable a `VATCheckUnavailableException` will be thrown.\n\n```php\ntry {\n    $validVAT = VatCalculator::isValidVATNumber('NL 123456789 B01');\n} catch (VATCheckUnavailableException $e) {\n    // The VAT check API is unavailable...\n}\n```\n\nAlternatively, it is also possible to validate only the format of the VAT Number specified by [VIES](http://ec.europa.eu/taxation_customs/vies/faqvies.do#item_11). This is useful, if you do not want to wait for a response from the SOAP API.\n\n```php\n// This check will return false because no connection to VIES could be made...\n$validVAT = VatCalculator::isValidVATNumber('NL 123456789 B01');\n\n// This check will return true because only the format is checked...\n$validVAT = VatCalculator::isValidVatNumberFormat('NL 123456789 B01');\n```\n\n### Get EU VAT number details\n\nTo get the details of a VAT number, you can use the `getVATDetails` method. The VAT number should be in a format specified by the [VIES](http://ec.europa.eu/taxation_customs/vies/faqvies.do#item_11). The given VAT numbers will be truncated and non relevant characters / whitespace will automatically be removed.\n\nThis service relies on a third party SOAP API provided by the EU. If, for whatever reason, this API is unavailable a `VATCheckUnavailableException` will be thrown.\n\n```php\ntry {\n    $vat_details = VatCalculator::getVATDetails('NL 123456789 B01');\n    print_r($vat_details);\n    /* Outputs\n    stdClass Object\n    (\n        [countryCode] => NL\n        [vatNumber] => 123456789B01\n        [requestDate] => 2017-04-06+02:00\n        [valid] => false\n        [name] => Name of the company\n        [address] => Address of the company\n    )\n    */\n} catch (VATCheckUnavailableException $e) {\n    // The VAT check API is unavailable...\n}\n```\n\n#### UK VAT Numbers\n\nUK VAT numbers are formatted a little differently:\n\n```php\ntry {\n    $vat_details = VatCalculator::getVATDetails('GB 553557881');\n    print_r($vat_details);\n    /* Outputs\n    array(3) {\n        [\"name\"]=>\n            string(26) \"Credite Sberger Donal Inc.\"\n        [\"vatNumber\"]=>\n            string(9) \"553557881\"\n        [\"address\"]=>\n            array(3) {\n                [\"line1\"]=>\n                    string(18) \"131B Barton Hamlet\"\n                [\"postcode\"]=>\n                    string(8) \"SW97 5CK\"\n                [\"countryCode\"]=>\n                    string(2) \"GB\"\n            }\n    }\n    */\n} catch (VATCheckUnavailableException $e) {\n    // The VAT check API is unavailable...\n}\n```\n\n## Laravel\n\n### Configuration\n\nBy default, the VatCalculator has all EU VAT rules predefined, so that it can easily be updated, if it changes for a specific country.\n\nIf you need to define other VAT rates, you can do so by publishing the configuration and add more rules.\n\n> **Warning**  \n> Be sure to set your business country code in the configuration file, to get correct VAT calculation when selling to business customers in your own country.\n\nTo publish the configuration files, run the `vendor:publish` command\n\n```bash\nphp artisan vendor:publish --provider=\"Mpociot\\VatCalculator\\VatCalculatorServiceProvider\"\n```\n\nThis will create a `vat_calculator.php` in your config directory.\n\n#### Handling SOAP Faults\n\nIf for some reason, SOAP faults happen when the VIES API is faulty, these errors will be handled gracefully and `false` will be returned. However, if you explicitly want to be aware of any SOAP faults you may instruct VatCalculator to throw them as a `VATCheckUnavailableException`. The `VATCheckUnavailableException` will then contain the specific message of the SOAP fault.\n\nSet the option to `true` in your config file:\n\n```php\n<?php\n\nreturn [\n    'forward_soap_faults' => true,\n];\n```\n\nYou can also set a timeout for the SOAP client. By default, SOAP aborts the request to VIES after 30 seconds. If you do not want to wait that long, you can reduce the timeout, for example to 10 seconds:\n\n```php\n<?php\n\nreturn [\n    'soap_timeout' => 10,\n];\n```\n\n### ValidVatNumber Validation Rule\n\nVatCalculator also ships with a `ValidVatNumber` validation rule for VAT Numbers. You can use this when validation input from a form request or a standalone validator instance:\n\n```php\nuse Mpociot\\VatCalculator\\Rules\\ValidVatNumber;\n\n$validator = Validator::make(Input::all(), [\n    'first_name' => 'required',\n    'last_name' => 'required',\n    'company_vat' => ['required', new ValidVatNumber],\n]);\n\nif ($validator->passes()) {\n    // Input is correct...\n}\n```\n\n> [!WARNING]  \n> The validator extension returns `false` when the VAT ID Check SOAP API is unavailable.\n\n### Cashier Stripe Integration\n\n> [!NOTE]  \n> At the moment this package is not compatible with Cashier Stripe v13 or higher because it still relies on the old `taxPercentage` method which has been removed from Cashier v13. You can still use it on older Cashier Stripe versions in the meantime.\n\nIf you want to use this package in combination with [Laravel Cashier Stripe](https://github.com/laravel/cashier-stripe/) you can let your billable model use the `BillableWithinTheEU` trait. Because this trait overrides the `taxPercentage` method of the `Billable` trait, we have to explicitly tell our model to do so.\n\n```php\nuse Laravel\\Cashier\\Billable;\nuse Mpociot\\VatCalculator\\Traits\\BillableWithinTheEU;\nuse Laravel\\Cashier\\Contracts\\Billable as BillableContract;\n\nclass User extends Model implements BillableContract\n{\n    use Billable, BillableWithinTheEU {\n        BillableWithinTheEU::taxPercentage insteadof Billable;\n    }\n\n    protected $dates = ['trial_ends_at', 'subscription_ends_at'];\n}\n```\n\nBy using the `BillableWithinTheEU` trait, your billable model has new methods to set the tax rate for the billable model.\n\nSet everything in one command:\n\n- `setTaxForCountry($countryCode, $company = false)`\n\nOr use the more readable, chainable approach:\n\n- `useTaxFrom($countryCode)` &mdash; Use the given countries tax rate\n- `asIndividual()` &mdash; The billable model is not a company (default) \n- `asBusiness()` &mdash; The billable model is a valid company\n\nSo in order to set the correct tax percentage prior to subscribing your customer, consider the following workflow:\n\n```php\n$user = User::find(1);\n\n// For individuals use:\n$user->useTaxFrom('NL');\n\n// For business customers with a valid VAT ID, use:\n$user->useTaxFrom('NL')->asBusiness();\n\n$user->subscription('monthly')->create($creditCardToken);\n```\n\n## Changelog\n\nCheck out the [CHANGELOG](CHANGELOG.md) in this repository for all the recent changes.\n\n## Maintainers\n\nVatCalculator is maintained by [Dries Vints](https://driesvints.com). Originally created by [Marcel Pociot](https://pociot.dev).\n\n## License\n\nVatCalculator is open-sourced software licensed under [the MIT license](LICENSE.md).\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 2.28515625,
          "content": "# Upgrade Guide\n\n## Upgrading from v2 to v3\n\n### Minimum Versions\n\nPR: https://github.com/driesvints/vat-calculator/pull/131\n\nAll support for PHP 7.2 and below has been dropped as well as support for Laravel 5.8 and below.\n\n### Removed Countries\n\nPR: https://github.com/driesvints/vat-calculator/pull/130\n\nPreviously, VatCalculator calculated VAT taxes for GB, NO and TR. Since these countries do not belong to the EU, these have been removed. If you were relying on the previous behavior and want to keep it, you should re-add them to your `config.php` file:\n\n```php\nreturn [\n    'rules' => [\n         'GB' => [ // United Kingdom\n             'rate' => 0.20,\n             'exceptions' => [\n                 // UK RAF Bases in Cyprus are taxed at Cyprus rate\n                 'Akrotiri' => 0.19,\n                 'Dhekelia' => 0.19,\n             ],\n         ],\n         'TR' => [ // Turkey\n             'rate' => 0.18,\n         ],\n         'NO' => [ // Norway\n             'rate' => 0.25,\n         ],\n    ],\n],\n```\n\n### Refactored Validation Rule\n\nPR: https://github.com/driesvints/vat-calculator/pull/133\n\nThe internal validation rule for a VAT number has been refactored to a new rule object. You may use it as follows:\n\n```php\n// Before...\n$validator = Validator::make(\n    ['vat_number' => $vatNumber],\n    ['vat_number' => ['required', 'vat_number']]\n);\n\n// After...\nuse Mpociot\\VatCalculator\\Rules\\ValidVatNumber;\n\n$validator = Validator::make(\n    ['vat_number' => $vatNumber],\n    ['vat_number' => ['required', new ValidVatNumber]]\n);\n```\n\n### Removed Functionality\n\nAll functionality for the front-end capabilities, as well as the IP lookup functionality have been removed. Additionally, all shipped translations of the VatNumber validation rule have been removed. No migration path is offered for these so if you rely on these you can either remain on v2 of the package or you can recreate the functionality in your app. \n\n\n## Upgrading from v1 to v2\n\nVersion 2 of VatCalculator provides a new method to get a more precise VAT rate result. It's recommended to use the new `getTaxRateForLocation` method instead of `getTaxRateForCountry`.\n \nThis method expects 3 arguments:\n\n- country code - The country code of the customer\n- postal code - The postal code of the customer\n- company - Flag to indicate if the customer is a company\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.6943359375,
          "content": "{\n    \"name\": \"mpociot/vat-calculator\",\n    \"description\": \"EU VAT calculation, the way it should be.\",\n    \"keywords\": [\"VAT\", \"Tax\", \"EU MOSS\", \"VAT ID\", \"Tax calculation\", \"VAT calculation\", \"Cashier\"],\n    \"license\": \"MIT\",\n    \"funding\": [\n        {\n            \"type\": \"github\",\n            \"url\": \"https://github.com/sponsors/driesvints\"\n        },\n        {\n            \"type\": \"paypal\",\n            \"url\": \"https://www.paypal.com/paypalme/driesvints\"\n        }\n    ],\n    \"authors\": [\n        {\n            \"name\": \"Marcel Pociot\",\n            \"email\": \"m.pociot@gmail.com\"\n        },\n        {\n            \"name\": \"Dries Vints\",\n            \"homepage\": \"https://driesvints.com\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^7.3|~8.0.0|~8.1.0|~8.2.0|~8.3.0|~8.4.0\",\n        \"ext-json\": \"*\",\n        \"ext-soap\": \"*\"\n    },\n    \"require-dev\": {\n        \"illuminate/contracts\": \"^6.0|^7.0|^8.0|^9.0|^10.0|^11.0\",\n        \"mockery/mockery\": \"^1.3.3\",\n        \"orchestra/testbench\": \"^4.0|^5.0|^6.0|^7.0|^8.0|^9.0\",\n        \"phpunit/phpunit\": \"^9.5|^10.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Mpociot\\\\VatCalculator\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests\"\n        }\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"3.x-dev\"\n        },\n        \"laravel\": {\n            \"providers\": [\n                \"Mpociot\\\\VatCalculator\\\\VatCalculatorServiceProvider\"\n            ],\n            \"aliases\": {\n                \"VatCalculator\": \"Mpociot\\\\VatCalculator\\\\Facades\\\\VatCalculator\"\n            }\n        }\n    },\n    \"config\": {\n        \"sort-packages\": true\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.396484375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"./vendor/phpunit/phpunit/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"VatCalculator Test Suite\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}