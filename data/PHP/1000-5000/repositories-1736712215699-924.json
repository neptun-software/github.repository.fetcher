{
  "metadata": {
    "timestamp": 1736712215699,
    "page": 924,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cycle/orm",
      "stars": 1240,
      "defaultBranch": "2.x",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2451171875,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.{yml,yaml}]\nindent_size = 2\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.134765625,
          "content": "/.*      export-ignore\n/tests   export-ignore\n/*.xml   export-ignore\n/*.yml   export-ignore\n/*.lock  export-ignore\n/*.dist  export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0947265625,
          "content": "/.*\n!/.github/\n/runtime/\n/vendor/\n.env\ncomposer.lock\n*.db\nclover.xml\ndocker-compose.override.yml\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 0.279296875,
          "content": "<?php\n\ndeclare(strict_types=1);\n\nrequire_once 'vendor/autoload.php';\n\nreturn \\Spiral\\CodeStyle\\Builder::create()\n    ->include(__DIR__ . '/src')\n    ->include(__DIR__ . '/tests')\n    ->include(__FILE__)\n    ->cache('./runtime/php-cs-fixer.cache')\n    ->allowRisky(false)\n    ->build();\n"
        },
        {
          "name": ".scrutinizer.yml",
          "type": "blob",
          "size": 0.330078125,
          "content": "checks:\n  php: true\n\nfilter:\n  paths:\n    - \"src/*\"\n\ntools:\n  external_code_coverage:\n    timeout: 900    # Timeout in seconds.\n    runs: 2         # How many code coverage submissions Scrutinizer will wait\n\nbuild:\n  nodes:\n    analysis:\n      environment:\n        php: 8.0\n\n      tests:\n        override:\n          - php-scrutinizer-run\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 12.4111328125,
          "content": "# CHANGELOG\n\nv2.7.1 (13.02.2024)\n--------------------\n- Fix inserting order in regular cases by @roxblnfk and @gam6itko (#381)\n\nv2.7.0 (08.02.2024)\n--------------------\n- Add Generated Fields option into ORM Schema by @roxblnfk (#462)\n\nv2.6.1 (04.01.2024)\n--------------------\n- Fix compatibility with PHP 8.3 by @msmakouz (#454)\n\n- v2.6.0 (22.12.2023)\n--------------------\n- Add support for `loophp/collection` v7 by @msmakouz (#448)\n- Fix wrong adding table prefix on joins by @msmakouz (#447)\n\nv2.5.0 (27.11.2023)\n--------------------\n- Expose JSON methods in the Select query builder by @msmakouz (#445)\n- Add NullHeap by @roxblnfk (#441)\n\nv2.4.0 (05.10.2023)\n--------------------\n- Add support uninitialized collections in entities by @roxblnfk (#431)\n- Allow `doctrine/instantiator` 2.x by @msmakouz (#438)\n- Improve relations hydration for non-proxy entities. Now it more lazy. By @msmakouz (#429)\n\nv2.3.4 (31.07.2023)\n--------------------\n- Fix fields uncasting in the ManyToMany relation by @roxblnfk, thanks @gam6itko (#427, #428)\n- Fix resolving of a not loaded parent in the relation RefersTo by @roxblnfk, thanks @msmakouz and snafets (#414)\n- Fix belongs to relation when parent is changed using parent id by @roxblnfk, thanks @roquie (#346, #432)\n\nv2.3.3 (21.07.2023)\n--------------------\n- Fix loading for Embedded entities when parent is null by @gam6itko and @roxblnfk (#422, #423)\n- Fix: remove extra joins from JTI and eager relations when ManyToMany is resolved. By @msmakouz and @roxblnfk (#418)\n- Fix the Unit of Work persistState() method in a sequenced call. By @msmakouz and @roxblnfk (#424, #426)\n- Fix ManyToMany lazy loading when value object are used as keys. By @msmakouz and @roxblnfk (#318, #420)\n\nv2.3.2 (20.06.2023)\n--------------------\n- Fix proxy-mapper hydration mechanism: public relations in a non-proxy-entity are hydrated like private ones.\n  There is a special logic related to `ReferenceInterface` hydrating. By @roxblnfk (#417)\n- Add the method `forUpdate` in the `Select` phpdoc. By @msmakouz (#413)\n\nv2.3.1 (01.05.2023)\n--------------------\n- Fix typecasting in relations when JTI entities are loaded by @roxblnfk (#408, #409)\n\nv2.3.0 (03.04.2023)\n--------------------\n- Update `where()` and `orderBy()` behavior in the JTI case. It possible to pass parent field name. By @roxblnfk (#405)\n- `Select::wherePK()` is now more strict. Use entity field name instead of table columns.\n- Fix method naming: `AbstractLoader::loadIerarchy()` deprecated and renamed to `::loadHierarchy()`.\n- Class `\\Cycle\\ORM\\Parser\\Typecast` is now not internal by @thenotsoft (#395)\n- Update test case generator script. Now it possible to set case name like \"Issue777\" and a template folder that\n  different from the default `CaseTemplate` by @gam6itko (#389)\n\nv2.2.2 (08.02.2023)\n--------------------\n- Fix compatibility with PHP 8.2 (AllowDynamicProperties) by @roxblnfk (#394)\n- Add tests with using for microseconds in a datetime fields by @BelaRyc and @msmakouz (#383)\n\nv2.2.1 (01.12.2022)\n--------------------\n- Fix `EM::persistState()` that inserted the same entity twice by @roxblnfk (#368)\n- Fix bug on saving of replaced pivoted collection by @BelaRyc (#382)\n- Fix `cascade` mode in BelongsTo relation by @roxblnfk and @msmakouz (#347, #374)\n- Fix storing od embedded entities in a JTI by @butschster (#379)\n- Add tests case template by @roxblnfk and @kastahov (#372, #377)\n  - [How to make an issue with test case](https://cycle-orm.dev/docs/issue-test-case)\n- Add a previous exception in TransactionException on throwing by @Eugentis (#367)\n- Add annotation `@readonly` for `Repository::$select` by @roxblnfk (#369)\n\nv2.2.0 (05.07.2022)\n--------------------\n- Add supporting for [`loophp/collection`](https://github.com/loophp/collection) by @drupol (#344)\n- Add supporting for PHP 8.1 Enum in the default typecast handler `Cycle\\ORM\\Parser\\Typecast` by @roxblnfk (#352)\n- Improve `template` annotations in `Cycle\\ORM\\Select\\Repository` and `Cycle\\ORM\\Select` classes by @roxblnfk (#351)\n- Classes `Cycle\\ORM\\Transaction\\UnitOfWork` and `Cycle\\ORM\\Transaction\\Runner` are now not internal by @roxblnfk (#353)\n\nv2.1.1 (05.06.2022)\n--------------------\n- Remove `$config` property overriding in the `RelationConfig` by @msmakouz (#343)\n- Fix bug on ManyToMany resolving by @roxblnfk (#345)\n\nv2.1.0 (03.03.2022)\n--------------------\n- Remove `final` from the `Select` class by @msmakouz (#327)\n- Fix keys comparing in the BelongsTo relation by @msmakouz (#326)\n- Add Psalm `@template` annotations to RepositoryInterface by @roxblnfk\n\nv2.0.2 (27.01.2022)\n--------------------\n- Fix a Tuple updating in the Pool by @roxblnfk (#319)\n\nv2.0.1 (20.01.2022)\n--------------------\n-  Fix protected relation fields hydration on eager loading @roxblnfk (#314)\n\nv2.0.0 (22.12.2021)\n--------------------\n- Minimal PHP version is 8.0\n- Composited keys\n- 'Joined Table Inheritance' and 'Single Table Inheritance'\n- Added ProxyMapper (`Cycle\\Orm\\Mapper\\Mapper`)\n- Supporting for arrays/Doctrine/Laravel or custom collections in HasMany adn ManyToMany relations\n- Typecasting moved to Mappers\n- Added Typecast handlers with Castable/Uncastable interfaces\n- Added Entity Manager and Unit Of Work instead of `Cycle\\ORM\\Transaction`\n- A lot of Interfaces are changed\n\nv1.8.0 (04.11.2021)\n--------------------\n- Added `ORM::with`. Other `ORM::with*` methods marked as deprecated @msmakouz (#257)\n- Better compatibility between `ConstrainInterface` and `ScopeInterface` @roxblnfk (#271)\n\nv1.7.1 (04.11.2021)\n--------------------\n- Fixed `Node::getChanges()` when a key in `$current` argument is undefined @msmakouz (#238)\n\nv1.7.0 (02.11.2021)\n--------------------\n- Update the Node data comparison mechanism @msmakouz (#235)\n- Fix Entity data comparison with objects in fields @msmakouz (#234)\n- Add ability for relations to independently determine related value changing @hustlahusky (#227)\n\nv1.6.1 (13.10.2021)\n--------------------\n- Prevent repeating entity hydration in the 'has many' relation\n\nv1.6.0 (08.09.2021)\n--------------------\n- Added Scope classes and deprecations for Constrain classes @roxblnfk (#209)\n\nv1.5.1 (06.08.2021)\n--------------------\n- Hotfix: missing type casting to string for primary key @roquie (#204)\n\nv1.5.0 (01.07.2021)\n--------------------\n- Hotfix: fixed type assertions for mapped criteria keys @dimarkov-git (#187)\n- Hotfix: inner keys naming in morphed relations @hustlahusky (#192)\n- Refactor: prevent repeating entity hydration in the Many to Many relations @hustlahusky (#188)\n- Added deprecation for `SchemaInterface::CONSTRAIN`. Use `SchemaInterface::SCOPE` instead @roxblnfk (#194)\n\nv1.4.2 (12.05.2021)\n--------------------\n- Hotfix: PK changes not tracked (#179)\n- Better heap sync (#180)\n\nv1.4.1 (02.04.2021)\n--------------------\n- Fix inserting empty entities by @roxblnfk (#175)\n\nv1.4.0 (31.03.2021)\n--------------------\n- Added support of Doctrine/Annotations v2 by @roxblnfk\n- Bugfix: prevent merge nodes with same roles when initializing pivot entity by @hustlahusky\n- Bugfix: RefersTo and BelongTo relations innerKey naming error by @roxblnfk\n- Added 'orderBy' option for relations by @roxblnfk\n- Fixed ID mapping column is set and differs from the field name by @roxblnfk\n\nv1.3.3 (04.02.2021)\n--------------------\n- fixed issue with redundant UPDATE when updating entity state in cyclic relations (related to TimestampedMapper)\n- fixed issue causing typed (7.4+) entities to fail in cycling many to many relations\n- entity re-load refreshes the entity state and relations instead of keeping the original entity\n- minor optimizations in many to many relations\n- added PHP8 test pipelines\n\nv1.3.2 (04.02.2021)\n--------------------\n- fixes hydration of typed properties by bumping laminas hydrator to v4 by @roxblnfk\n\nv1.3.1 (24.12.2020)\n--------------------\n- bugfix: column mapping for embedded entities now excludes custom properties by @thenotsoft\n\nv1.3.0 (23.12.2020)\n--------------------\n- added PHP8 support\n\nv1.2.17 (04.12.2020)\n--------------------\n- allows LEFT JOIN for ManyToMany loader\n\nv1.2.16 (27.11.2020)\n--------------------\n- added the ability to use objects as Heap keys by @thenotsoft\n\nv1.2.15 (02.11.2020)\n--------------------\n- fixes loss of pivot context on pivoted collection clone\n\nv1.2.14 (30.10.2020)\n--------------------\n- improved UUID serialization in Heap by @thenotsoft\n\nv1.2.13 (23.10.2020)\n--------------------\n- [bugfix] fixes cascade POSTLOAD relations in pivoted chains of ManyToMany relation\n\nv1.2.12 (30.07.2020)\n--------------------\n- [bugfix] fixes typo in eager loading\n\nv1.2.11 (22.07.2020)\n--------------------\n- [bugfix] incorrect update sequence for nullable numeric values\n\nv1.2.10 (16.07.2020)\n--------------------\n- [bugfix] causing incorrect command order while updating transitive key for RefersTo relation\n\nv1.2.9 (24.06.2020)\n--------------------\n- fixed bug causing ORM to disable relation graph pointing to Promises in related entities\n- more promise related tests\n- adds getTarget to RelationInterface\n\nv1.2.8 (11.05.2020)\n--------------------\n- fixed compatibility issues with PHPUnit8 (no more warnings)\n- [bugfix] MtM relation did not load eager relations when selected via promise #94\n- added more MtM tests\n\nv1.2.7 (26.04.2020)\n--------------------\n- a number of performance optimizations by @pine3ree\n- laminas hydrators used directly by @pine3ree\n\nv1.2.6 (07.04.2020)\n--------------------\n- `zendframework/zend-hydrator` replaced with `laminas/laminas-hydrator`\n\nv1.2.5 (25.03.2020)\n--------------------\n- do not load embedded object when parent not loaded\n\nv1.2.4 (10.03.2020)\n--------------------\n- minor performance optimizations\n- all collection promises are Selectable\n- reverted notNull relation logic by @mishfish\n\nv1.2.3 (07.02.2020)\n--------------------\n- bumped PHPUnit version to 8\n- removed Travis tests\n- added GitHub Actions\n- suppressed PK introspection on Postgres insert queries\n\nv1.2.2 (29.01.2020)\n--------------------\n- added the support for custom default sources, repositories and mappers by @mrakolice\n\nv1.2.1 (16.01.2020)\n--------------------\n- [bugfix] embedded relations data was loaded with parent entity even when not required\n- simplified query builder creation within joinable loader\n- added support for callable `load` option (where alternative) for all relations\n- added support for where in all relations\n- code-style changes (optimizations)\n\nv1.2.0 (13.01.2020)\n--------------------\n- performance optimizations in Node parsers, Select builder, Typecast\n- 33% performance improvement (with updated DBAL)\n\nv1.1.18 (20.11.2019)\n--------------------\n- the limit exception is not thrown on joined singular relations\n- Select doc-block improvement (better IDE integration)\n\nv1.1.17 (07.11.2019)\n--------------------\n- bugfix: invalid target resolution in lazy-loaded many-to-many relations\n\nv1.1.16 (04.11.2019)\n--------------------\n- Select methods return typehinted as self instead of $this to improve compatibility with PHPStorm\n\nv1.1.15 (02.10.2019)\n--------------------\n- the minimum PHP version is set as 7.2 as stated in the documentation\n- fixed typo THOUGH => THROUGH, old constants marked as deprecated\n\nv1.1.14 (24.09.2019)\n--------------------\n- added shortcut to specify relation load constrains using `load` option\n\nv1.1.13 (24.09.2019)\n--------------------\n- cyclic relations initialization only applied to non-resolved entity references\n- bugfix: entity columns and relations are no longer altered if entity fetched from database multiple times #33\n\nv1.1.12 (19.09.2019)\n--------------------\n- joined filters are always called prior to joined loaders\n- ability to reference the column of joined relation in loaded relation where condition while using INLOAD\n- added constants for relation fetch methods `Select::SINGLE_QUERY` and `Select::OUTER_QUERY`\n\nv1.1.11 (15.09.2019)\n--------------------\n- added support for Zend/Hydrator 3.0\n\nv1.1.10 (14.09.2019)\n--------------------\n- Transaction object always empty after `run` method + docs\n\nv1.1.9 (28.08.2019)\n--------------------\n- added ability to easier query nested relations inside `with`->`where` conditions\n- added ability overwrite default loader method when no options are set\n\nv1.1.8 (13.08.2019)\n--------------------\n- CS: @invisible renamed to @internal\n\nv1.1.7 (16.07.2019)\n--------------------\n- DatabaseMapper will not generate new PK if value has been set by user\n\nv1.1.6 (02.07.2019)\n--------------------\n- minor CS (is_null => === null, !empty => === type)\n- ORM->get() and Heap->find() can now accept multiple kv pairs (search is still done using first pair) for future composite key support\n\nv1.1.5 (24.06.2019)\n--------------------\n- first public release with documentation\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2734375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at team@spiralscout.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.6630859375,
          "content": "# Contributing\nFeel free to contribute to the development of the Cycle ORM or its components.\nPlease make sure that the following requirements are satisfied before submitting your pull request:\n\n* KISS\n* PSR-12\n* `declare(strict_types=1);` is mandatory\n* Your code must include tests\n\n> Use our discord server to check for the advice or suggestion https://discord.gg/FZ9BCWg\n\n## Testing Cycle\nTo test ORM engine locally, download the `cycle/orm` repository and start docker containers inside the tests folder:\n\n```bash\ncd tests/\ndocker-compose up\n```\n\nTo run full test suite:\n\n```bash\n./vendor/bin/phpunit\n```\n\nTo run quick test suite:\n\n```bash\n./vendor/bin/phpunit tests/ORM/Functional/Driver/SQLite\n```\n\n## Help Needed In\nIf you want to help but don't know where to start:\n\n* TODOs\n* Updating to latest dev-dependencies (PHPUnit, Mockery, etc)\n* Quality recommendations and improvements\n* Check [Open Issues](https://github.com/cycle/orm/issues)\n* More tests are always welcome\n* Typos\n\nFeel free to propose any ideas related to architecture, docs (___docs are never complete___),  adaptation or community.\n\n> Original guide author is not a native English speaker, feel free to create PR for any text corrections.\n\n## Critical/Security Issues\nIf you found something which shouldn't be there or a bug which opens a security hole please let me know immediately by email\n[team@spiralscout.com](mailto:team@spiralscout.com)\n\n## Official Support\nCycle ORM and all related components are maintained by [Spiral Scout](https://spiralscout.com/).\n\nFor commercial support please contact team@spiralscout.com.\n\n## Licensing\nCycle ORM and its components will remain under [MIT license](/license.md) indefinitely.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2023 Spiral Scout\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.732421875,
          "content": "# Cycle ORM\n\n[![Latest Stable Version](https://poser.pugx.org/cycle/orm/version)](https://packagist.org/packages/cycle/orm)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/cycle/orm/badges/quality-score.png?b=2.x)](https://scrutinizer-ci.com/g/cycle/orm/?branch=2.x)\n[![Codecov](https://codecov.io/gh/cycle/orm/graph/badge.svg)](https://codecov.io/gh/cycle/orm)\n[![Discord](https://img.shields.io/static/v1?label=Discord&message=chat&logo=Discord&color=%235865F2)](https://discord.gg/qF3HpXhMEP)\n[![Meta Storm Plugin](https://img.shields.io/static/v1?&label=Powered+by&message=Meta+Storm+Plugin&logo=phpstorm&color=aa55ee)](https://github.com/xepozz/meta-storm-idea-plugin)\n\n<img src=\"https://cycle-orm.dev/cycle.png\" height=\"135px\" alt=\"Cycle ORM\" align=\"left\"/>\n\nCycle is PHP DataMapper, ORM and Data Modelling engine designed to safely work in classic and daemonized PHP\napplications (like [RoadRunner](https://github.com/spiral/roadrunner)). The ORM provides flexible configuration options\nto model datasets, powerful query builder and supports dynamic mapping schema. The engine can work with plain PHP\nobjects, support annotation declarations, and proxies via extensions.\n\n<p align=\"center\">\n\t<a href=\"https://cycle-orm.dev/docs\"><b>Website and Documentation</b></a> | <a href=\"https://github.com/cycle/docs/issues/3\">Comparison with Eloquent and Doctrine</a>\n</p>\n\n## Features\n\n- ORM with has-one, has-many, many-through-many and polymorphic relations\n- Plain Old PHP objects, [AR](https://github.com/https://github.com/cycle/active-record), Custom objects\n  or [same entity type for multiple repositories](https://github.com/cycle/orm/tree/2.x/tests/ORM/Functional/Driver/Common/Classless)\n- eager and lazy loading, query builder with multiple fetch strategies\n- embedded entities, lazy/eager loaded embedded partials\n- runtime configuration with/without code-generation\n- column-to-field mapping, single table inheritance, value objects support\n- hackable: persist strategies, mappers, relations, transactions\n- works with directed graphs and cyclic graphs using command chains\n- designed to work in long-running applications: immutable service core, disposable UoW\n- supports MySQL, MariaDB, PostgresSQL, SQLServer, SQLite\n- schema scaffolding, introspection, migrations and debugging\n- supports global query scopes, UUIDs as PK, soft deletes, auto timestamps and macros\n- custom column types, FKs to non-primary columns\n- use with or without annotations, proxy classes, and auto-migrations\n- compatible with Doctrine Collections, Illuminate Collections and custom collections\n- compatible with Doctrine Annotations, PHP8 attributes\n\n## Extensions\n\n| Component                                                                                 | Current Status|\n|-------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [cycle/active-record](https://github.com/cycle/active-record)                             | ![License](https://img.shields.io/packagist/l/cycle/active-record.svg?style=flat-square&label=) [![PHP](https://img.shields.io/packagist/php-v/cycle/active-record.svg?style=flat-square&logo=php)](https://packagist.org/packages/cycle/active-record) [![Stable Release](https://poser.pugx.org/cycle/active-record/version?style=flat-square)](https://packagist.org/packages/cycle/active-record) [![Total Downloads](https://img.shields.io/packagist/dt/cycle/active-record.svg?style=flat-square)](https://packagist.org/packages/cycle/active-record/stats)                                                                                                   |\n| [cycle/schema-builder](https://github.com/cycle/schema-builder)                           | ![License](https://img.shields.io/packagist/l/cycle/schema-builder.svg?style=flat-square&label=) [![PHP](https://img.shields.io/packagist/php-v/cycle/schema-builder.svg?style=flat-square&logo=php)](https://packagist.org/packages/cycle/schema-builder) [![Stable Release](https://poser.pugx.org/cycle/schema-builder/version?style=flat-square)](https://packagist.org/packages/cycle/schema-builder) [![Total Downloads](https://img.shields.io/packagist/dt/cycle/schema-builder.svg?style=flat-square)](https://packagist.org/packages/cycle/schema-builder/stats)                                                                                            |\n| [cycle/schema-renderer](https://github.com/cycle/schema-renderer)                         | ![License](https://img.shields.io/packagist/l/cycle/schema-renderer.svg?style=flat-square&label=) [![PHP](https://img.shields.io/packagist/php-v/cycle/schema-renderer.svg?style=flat-square&logo=php)](https://packagist.org/packages/cycle/schema-renderer) [![Stable Release](https://poser.pugx.org/cycle/schema-renderer/version?style=flat-square)](https://packagist.org/packages/cycle/schema-renderer) [![Total Downloads](https://img.shields.io/packagist/dt/cycle/schema-renderer.svg?style=flat-square)](https://packagist.org/packages/cycle/schema-renderer/stats)                                                                                     |\n| [cycle/schema-provider](https://github.com/cycle/schema-provider)                         | ![License](https://img.shields.io/packagist/l/cycle/schema-provider.svg?style=flat-square&label=) [![PHP](https://img.shields.io/packagist/php-v/cycle/schema-provider.svg?style=flat-square&logo=php)](https://packagist.org/packages/cycle/schema-provider) [![Stable Release](https://poser.pugx.org/cycle/schema-provider/version?style=flat-square)](https://packagist.org/packages/cycle/schema-provider) [![Total Downloads](https://img.shields.io/packagist/dt/cycle/schema-provider.svg?style=flat-square)](https://packagist.org/packages/cycle/schema-provider/stats)                                                                                     |\n| [cycle/annotated](https://github.com/cycle/annotated)                                     | ![License](https://img.shields.io/packagist/l/cycle/annotated.svg?style=flat-square&label=) [![PHP](https://img.shields.io/packagist/php-v/cycle/annotated.svg?style=flat-square&logo=php)](https://packagist.org/packages/cycle/annotated) [![Stable Release](https://poser.pugx.org/cycle/annotated/version?style=flat-square)](https://packagist.org/packages/cycle/annotated) [![Total Downloads](https://img.shields.io/packagist/dt/cycle/annotated.svg?style=flat-square)](https://packagist.org/packages/cycle/annotated/stats)                                                                                                                               |\n| [cycle/migrations](https://github.com/cycle/migrations)                                   | ![License](https://img.shields.io/packagist/l/cycle/migrations.svg?style=flat-square&label=) [![PHP](https://img.shields.io/packagist/php-v/cycle/migrations.svg?style=flat-square&logo=php)](https://packagist.org/packages/cycle/migrations) [![Stable Release](https://poser.pugx.org/cycle/migrations/version?style=flat-square)](https://packagist.org/packages/cycle/migrations) [![Total Downloads](https://img.shields.io/packagist/dt/cycle/migrations.svg?style=flat-square)](https://packagist.org/packages/cycle/migrations/stats)                                                                                                                        |\n| [cycle/entity-behavior](https://github.com/cycle/entity-behavior)                         | ![License](https://img.shields.io/packagist/l/cycle/entity-behavior.svg?style=flat-square&label=) [![PHP](https://img.shields.io/packagist/php-v/cycle/entity-behavior.svg?style=flat-square&logo=php)](https://packagist.org/packages/cycle/entity-behavior) [![Stable Release](https://poser.pugx.org/cycle/entity-behavior/version?style=flat-square)](https://packagist.org/packages/cycle/entity-behavior) [![Total Downloads](https://img.shields.io/packagist/dt/cycle/entity-behavior.svg?style=flat-square)](https://packagist.org/packages/cycle/entity-behavior/stats)                                                                                     |\n| [cycle/entity-behavior-uuid](https://github.com/cycle/entity-behavior-uuid)               | ![License](https://img.shields.io/packagist/l/cycle/entity-behavior-uuid.svg?style=flat-square&label=) [![PHP](https://img.shields.io/packagist/php-v/cycle/entity-behavior-uuid.svg?style=flat-square&logo=php)](https://packagist.org/packages/cycle/entity-behavior-uuid) [![Stable Release](https://poser.pugx.org/cycle/entity-behavior-uuid/version?style=flat-square)](https://packagist.org/packages/cycle/entity-behavior-uuid) [![Total Downloads](https://img.shields.io/packagist/dt/cycle/entity-behavior-uuid.svg?style=flat-square)](https://packagist.org/packages/cycle/entity-behavior-uuid/stats)                                                  |\n| [cycle/database](https://github.com/cycle/database)                                       | ![License](https://img.shields.io/packagist/l/cycle/database.svg?style=flat-square&label=) [![PHP](https://img.shields.io/packagist/php-v/cycle/database.svg?style=flat-square&logo=php)](https://packagist.org/packages/cycle/database) [![Stable Release](https://poser.pugx.org/cycle/database/version?style=flat-square)](https://packagist.org/packages/cycle/database) [![Total Downloads](https://img.shields.io/packagist/dt/cycle/database.svg?style=flat-square)](https://packagist.org/packages/cycle/database/stats)                                                                                                                                      |\n| [cycle/schema-migrations-generator](https://github.com/cycle/schema-migrations-generator) | ![License](https://img.shields.io/packagist/l/cycle/schema-migrations-generator.svg?style=flat-square&label=) [![PHP](https://img.shields.io/packagist/php-v/cycle/schema-migrations-generator.svg?style=flat-square&logo=php)](https://packagist.org/packages/cycle/schema-migrations-generator) [![Stable Release](https://poser.pugx.org/cycle/schema-migrations-generator/version?style=flat-square)](https://packagist.org/packages/cycle/schema-migrations-generator) [![Total Downloads](https://img.shields.io/packagist/dt/cycle/schema-migrations-generator.svg?style=flat-square)](https://packagist.org/packages/cycle/schema-migrations-generator/stats) |\n| [cycle/orm-promise-mapper](https://github.com/cycle/orm-promise-mapper)                   | ![License](https://img.shields.io/packagist/l/cycle/orm-promise-mapper.svg?style=flat-square&label=) [![PHP](https://img.shields.io/packagist/php-v/cycle/orm-promise-mapper.svg?style=flat-square&logo=php)](https://packagist.org/packages/cycle/orm-promise-mapper) [![Stable Release](https://poser.pugx.org/cycle/orm-promise-mapper/version?style=flat-square)](https://packagist.org/packages/cycle/orm-promise-mapper) [![Total Downloads](https://img.shields.io/packagist/dt/cycle/orm-promise-mapper.svg?style=flat-square)](https://packagist.org/packages/cycle/orm-promise-mapper/stats)                                                                |\n\n## Example:\n\n```php\n// load all active users and pre-load their paid orders sorted from newest to olders\n// the pre-load will be complete using LEFT JOIN\n$users = $orm->getRepository(User::class)\n    ->select()\n    ->where('active', true)\n    ->load('orders', [\n        'method' => Select::SINGLE_QUERY,\n        'load'   => function($q) {\n            $q->where('paid', true)->orderBy('timeCreated', 'DESC');\n        }\n    ])\n    ->fetchAll();\n\n$em = new EntityManager($orm);\n\nforeach($users as $user) {\n    $em->persist($user);\n}\n\n$em->run();\n```\n\n## License:\n\nCycle ORM is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).\nMaintained by [Spiral Scout](https://spiralscout.com).\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.431640625,
          "content": "{\n    \"name\": \"cycle/orm\",\n    \"type\": \"library\",\n    \"license\": \"MIT\",\n    \"description\": \"PHP DataMapper ORM and Data Modelling Engine\",\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"homepage\": \"https://cycle-orm.dev\",\n    \"support\": {\n        \"issues\": \"https://github.com/cycle/orm/issues\",\n        \"source\": \"https://github.com/cycle/orm\",\n        \"docs\": \"https://cycle-orm.dev/docs\",\n        \"chat\": \"https://discord.gg/spiralphp\"\n    },\n    \"keywords\": [\"mysql\", \"mssql\", \"sqlite\", \"postgresql\", \"orm\", \"sql\", \"query-builder\", \"data-mapper\"],\n    \"authors\": [\n        {\n            \"name\": \"Anton Titov (wolfy-j)\",\n            \"email\": \"wolfy-j@spiralscout.com\"\n        },\n        {\n            \"name\": \"Aleksei Gagarin (roxblnfk)\",\n            \"email\": \"alexey.gagarin@spiralscout.com\"\n        },\n        {\n            \"name\": \"Pavel Butchnev (butschster)\",\n            \"email\": \"pavel.buchnev@spiralscout.com\"\n        },\n        {\n            \"name\": \"Maksim Smakouz (msmakouz)\",\n            \"email\": \"maksim.smakouz@spiralscout.com\"\n        }\n    ],\n    \"funding\": [\n        {\n            \"type\": \"github\",\n            \"url\": \"https://github.com/sponsors/cycle\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=8.0\",\n        \"ext-pdo\": \"*\",\n        \"cycle/database\": \"^2.8.1\",\n        \"doctrine/instantiator\": \"^1.3.1 || ^2.0\",\n        \"spiral/core\": \"^2.8 || ^3.0\"\n    },\n    \"require-dev\": {\n        \"doctrine/collections\": \"^1.6 || ^2.0\",\n        \"illuminate/collections\": \"9 - 11\",\n        \"loophp/collection\": \"^6.0 || ^7.0\",\n        \"mockery/mockery\": \"^1.1\",\n        \"phpunit/phpunit\": \"^9.5\",\n        \"ramsey/uuid\": \"^4.0\",\n        \"spiral/tokenizer\": \"^2.8 || ^3.0\",\n        \"spiral/code-style\": \"~2.2.0\",\n        \"symfony/var-dumper\": \"^5.2 || ^6.0 || ^7.0\",\n        \"vimeo/psalm\": \"5.21\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Cycle\\\\ORM\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Cycle\\\\ORM\\\\Tests\\\\\": \"tests/ORM/\"\n        }\n    },\n    \"config\": {\n        \"sort-packages\": true\n    },\n    \"scripts\": {\n        \"cs:diff\": \"php-cs-fixer fix --dry-run -v --diff\",\n        \"cs:fix\": \"php-cs-fixer fix -v\",\n        \"psalm\": \"psalm\",\n        \"psalm:baseline\": \"psalm --set-baseline=psalm-baseline.xml\",\n        \"test\": \"phpunit --color=always\",\n        \"test:unit\": \"phpunit --exclude-group driver --colors=always\",\n        \"test:sqlite\": \"phpunit --group driver-sqlite --colors=always\"\n    }\n}\n"
        },
        {
          "name": "infection.json",
          "type": "blob",
          "size": 0.16015625,
          "content": "{\n  \"timeout\": 10,\n  \"source\": {\n    \"directories\": [\n      \"src\"\n    ]\n  },\n  \"logs\": {\n    \"text\": \"infection.log\"\n  },\n  \"mutators\": {\n    \"@default\": true\n  }\n}"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.9150390625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n         bootstrap=\"tests/bootstrap.php\"\n         cacheResultFile=\"runtime/phpunit/result.cache\"\n         backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         verbose=\"false\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         convertDeprecationsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"true\"\n         stopOnError=\"true\"\n>\n    <coverage>\n        <include>\n            <directory>src/</directory>\n        </include>\n    </coverage>\n    <testsuites>\n        <testsuite name=\"Cycle: DataMapper and ORM\">\n            <directory>./tests/</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n"
        },
        {
          "name": "psalm-baseline.xml",
          "type": "blob",
          "size": 84.1494140625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<files psalm-version=\"5.21.0@04ba9358e3f7d14a9dc3edd4e814a9d51d8c637f\">\n  <file src=\"src/Collection/ArrayCollectionFactory.php\">\n    <DocblockTypeContradiction>\n      <code><![CDATA[throw new CollectionFactoryException('Unsupported iterable type.')]]></code>\n    </DocblockTypeContradiction>\n    <InvalidReturnStatement>\n      <code><![CDATA[match (true) {\n            \\is_array($data) => $data,\n            $data instanceof \\Traversable => \\iterator_to_array($data),\n            default => throw new CollectionFactoryException('Unsupported iterable type.'),\n        }]]></code>\n    </InvalidReturnStatement>\n    <InvalidReturnType>\n      <code>array</code>\n    </InvalidReturnType>\n  </file>\n  <file src=\"src/Collection/DoctrineCollectionFactory.php\">\n    <DocblockTypeContradiction>\n      <code>$data instanceof PivotedStorage</code>\n      <code><![CDATA[\\is_a($this->class, PivotedCollection::class)]]></code>\n      <code><![CDATA[throw new CollectionFactoryException('Unsupported iterable type.')]]></code>\n    </DocblockTypeContradiction>\n    <InvalidReturnStatement>\n      <code><![CDATA[new PivotedCollection($data->getElements(), $data->getContext())]]></code>\n    </InvalidReturnStatement>\n    <InvalidReturnType>\n      <code>Collection</code>\n    </InvalidReturnType>\n    <MixedArgumentTypeCoercion>\n      <code><![CDATA[$data->getContext()]]></code>\n    </MixedArgumentTypeCoercion>\n    <PropertyTypeCoercion>\n      <code>$class === Collection::class ? ArrayCollection::class : $class</code>\n    </PropertyTypeCoercion>\n    <TypeDoesNotContainType>\n      <code><![CDATA[\\is_a($this->class, PivotedCollection::class)]]></code>\n    </TypeDoesNotContainType>\n  </file>\n  <file src=\"src/Collection/IlluminateCollectionFactory.php\">\n    <PropertyTypeCoercion>\n      <code>$class</code>\n    </PropertyTypeCoercion>\n    <UnsafeInstantiation>\n      <code><![CDATA[new $this->class($data)]]></code>\n    </UnsafeInstantiation>\n  </file>\n  <file src=\"src/Collection/LoophpCollectionFactory.php\">\n    <DocblockTypeContradiction>\n      <code>$data instanceof PivotedStorage</code>\n      <code><![CDATA[\\is_a($this->class, LoophpPivotedCollection::class)]]></code>\n    </DocblockTypeContradiction>\n    <InvalidReturnStatement>\n      <code><![CDATA[new LoophpPivotedCollection($data->getElements(), $data->getContext())]]></code>\n    </InvalidReturnStatement>\n    <InvalidReturnType>\n      <code>CollectionInterface</code>\n    </InvalidReturnType>\n    <MixedArgumentTypeCoercion>\n      <code><![CDATA[$data->getContext()]]></code>\n    </MixedArgumentTypeCoercion>\n    <PropertyTypeCoercion>\n      <code>$class === CollectionInterface::class ? Collection::class : $class</code>\n    </PropertyTypeCoercion>\n    <TypeDoesNotContainType>\n      <code><![CDATA[\\is_a($this->class, LoophpPivotedCollection::class)]]></code>\n    </TypeDoesNotContainType>\n  </file>\n  <file src=\"src/Collection/Pivoted/LoophpPivotedCollection.php\">\n    <ConstructorSignatureMismatch>\n      <code>$elements</code>\n    </ConstructorSignatureMismatch>\n    <ImplementedParamTypeMismatch>\n      <code>$elements</code>\n    </ImplementedParamTypeMismatch>\n    <InvalidPropertyAssignmentValue>\n      <code><![CDATA[$this->pivotContext]]></code>\n    </InvalidPropertyAssignmentValue>\n    <InvalidTemplateParam>\n      <code>LoophpPivotedCollection</code>\n      <code>LoophpPivotedCollection</code>\n    </InvalidTemplateParam>\n    <MissingTemplateParam>\n      <code>parent::fromIterable($elements)</code>\n    </MissingTemplateParam>\n    <MixedArgumentTypeCoercion>\n      <code>$iterable instanceof \\Traversable ? \\iterator_to_array($iterable) : $iterable</code>\n    </MixedArgumentTypeCoercion>\n    <TooManyTemplateParams>\n      <code>LoophpPivotedCollection</code>\n    </TooManyTemplateParams>\n    <UnsafeGenericInstantiation>\n      <code>new static($iterable instanceof \\Traversable ? \\iterator_to_array($iterable) : $iterable)</code>\n    </UnsafeGenericInstantiation>\n  </file>\n  <file src=\"src/Collection/Pivoted/PivotedCollection.php\">\n    <InvalidPropertyAssignmentValue>\n      <code><![CDATA[$this->pivotContext]]></code>\n    </InvalidPropertyAssignmentValue>\n    <MoreSpecificImplementedParamType>\n      <code>$elements</code>\n    </MoreSpecificImplementedParamType>\n  </file>\n  <file src=\"src/Collection/Pivoted/PivotedStorage.php\">\n    <MissingTemplateParam>\n      <code>\\IteratorAggregate</code>\n    </MissingTemplateParam>\n  </file>\n  <file src=\"src/Command/Database/Delete.php\">\n    <PossiblyNullArgument>\n      <code><![CDATA[$this->table]]></code>\n    </PossiblyNullArgument>\n  </file>\n  <file src=\"src/Command/Database/Insert.php\">\n    <EmptyArrayAccess>\n      <code><![CDATA[$returningFields[$this->primaryKeys[0]]]]></code>\n    </EmptyArrayAccess>\n    <MixedArgumentTypeCoercion>\n      <code>$field</code>\n      <code>$field</code>\n      <code>\\array_values($returning)</code>\n    </MixedArgumentTypeCoercion>\n    <MixedAssignment>\n      <code>$value</code>\n    </MixedAssignment>\n    <MixedReturnTypeCoercion>\n      <code><![CDATA[\\array_merge($this->columns, $this->mapper?->mapColumns($data) ?? $data)]]></code>\n      <code>array</code>\n    </MixedReturnTypeCoercion>\n    <PossiblyInvalidArgument>\n      <code>$insertID</code>\n    </PossiblyInvalidArgument>\n    <PossiblyNullArgument>\n      <code><![CDATA[$this->table]]></code>\n    </PossiblyNullArgument>\n    <PossiblyNullReference>\n      <code>mapColumns</code>\n    </PossiblyNullReference>\n    <RedundantCondition>\n      <code><![CDATA[$this->mapper->cast([$field => $insertID])[$field]]]></code>\n    </RedundantCondition>\n    <TypeDoesNotContainNull>\n      <code><![CDATA[$this->mapper === null]]></code>\n    </TypeDoesNotContainNull>\n  </file>\n  <file src=\"src/Command/Database/Update.php\">\n    <MixedArgument>\n      <code>$primaryKeys</code>\n    </MixedArgument>\n    <MixedReturnTypeCoercion>\n      <code><![CDATA[\\array_merge(\n            $this->columns,\n            $this->mapper?->mapColumns($data) ?? $data,\n        )]]></code>\n      <code>array</code>\n    </MixedReturnTypeCoercion>\n    <PossiblyNullArgument>\n      <code><![CDATA[$this->table]]></code>\n    </PossiblyNullArgument>\n  </file>\n  <file src=\"src/Command/Special/MergeCommand.php\">\n    <MissingTemplateParam>\n      <code>\\IteratorAggregate</code>\n    </MissingTemplateParam>\n    <MixedAssignment>\n      <code>$value</code>\n    </MixedAssignment>\n  </file>\n  <file src=\"src/Command/Special/Sequence.php\">\n    <MissingTemplateParam>\n      <code>\\IteratorAggregate</code>\n    </MissingTemplateParam>\n  </file>\n  <file src=\"src/Command/Special/WrappedCommand.php\">\n    <ArgumentTypeCoercion>\n      <code>$pkColumn</code>\n      <code>$table</code>\n    </ArgumentTypeCoercion>\n    <MixedArgumentTypeCoercion>\n      <code>$primaryKeys</code>\n    </MixedArgumentTypeCoercion>\n    <PossiblyNullArgument>\n      <code>$callable</code>\n      <code>$callable</code>\n    </PossiblyNullArgument>\n    <PossiblyNullFunctionCall>\n      <code><![CDATA[\\Closure::bind($this->afterExecute, null, static::class)($this->command)]]></code>\n      <code><![CDATA[\\Closure::bind($this->beforeExecute, null, static::class)($this->command)]]></code>\n    </PossiblyNullFunctionCall>\n    <UnsafeInstantiation>\n      <code>new static($command)</code>\n    </UnsafeInstantiation>\n  </file>\n  <file src=\"src/Command/Special/WrappedStoreCommand.php\">\n    <NonInvariantDocblockPropertyType>\n      <code>$command</code>\n    </NonInvariantDocblockPropertyType>\n    <PropertyNotSetInConstructor>\n      <code>$command</code>\n    </PropertyNotSetInConstructor>\n  </file>\n  <file src=\"src/Command/StoreCommand.php\">\n    <PossiblyNullPropertyAssignmentValue>\n      <code>$db</code>\n    </PossiblyNullPropertyAssignmentValue>\n  </file>\n  <file src=\"src/Command/Traits/ErrorTrait.php\">\n    <MixedAssignment>\n      <code>$n</code>\n      <code>$n</code>\n      <code>$name</code>\n      <code>$name</code>\n    </MixedAssignment>\n    <RedundantCondition>\n      <code><![CDATA[$this->waitScope]]></code>\n    </RedundantCondition>\n    <TypeDoesNotContainType>\n      <code>[]</code>\n    </TypeDoesNotContainType>\n    <UnusedForeachValue>\n      <code>$n</code>\n      <code>$n</code>\n    </UnusedForeachValue>\n  </file>\n  <file src=\"src/Command/Traits/ScopeTrait.php\">\n    <InvalidPropertyAssignmentValue>\n      <code><![CDATA[$this->waitScope]]></code>\n    </InvalidPropertyAssignmentValue>\n  </file>\n  <file src=\"src/Config/RelationConfig.php\">\n    <TooManyArguments>\n      <code>new Autowire($loader)</code>\n      <code>new Autowire($relation)</code>\n    </TooManyArguments>\n  </file>\n  <file src=\"src/EntityManager.php\">\n    <InvalidThrow>\n      <code><![CDATA[throw $state->getLastError();]]></code>\n    </InvalidThrow>\n    <PropertyNotSetInConstructor>\n      <code>$unitOfWork</code>\n    </PropertyNotSetInConstructor>\n  </file>\n  <file src=\"src/Exception/TransactionException.php\">\n    <MixedArgument>\n      <code>$role</code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$relationStatus</code>\n      <code>$role</code>\n      <code>$tuple</code>\n    </MixedAssignment>\n    <MixedMethodCall>\n      <code>getRelationStatus</code>\n      <code>getRole</code>\n      <code>getStatus</code>\n    </MixedMethodCall>\n    <MixedPropertyFetch>\n      <code><![CDATA[$tuple->node]]></code>\n      <code><![CDATA[$tuple->state]]></code>\n      <code><![CDATA[$tuple->task]]></code>\n    </MixedPropertyFetch>\n  </file>\n  <file src=\"src/Factory.php\">\n    <InvalidPropertyAssignmentValue>\n      <code><![CDATA[[\n        SchemaInterface::REPOSITORY => Repository::class,\n        SchemaInterface::SOURCE => Source::class,\n        SchemaInterface::MAPPER => Mapper::class,\n        SchemaInterface::SCOPE => null,\n        SchemaInterface::TYPECAST_HANDLER => null,\n    ]]]></code>\n    </InvalidPropertyAssignmentValue>\n    <LessSpecificReturnStatement>\n      <code><![CDATA[$this->config->getLoader($definition[Relation::TYPE])->resolve(\n            $this->factory,\n            [\n                'ormSchema' => $schema,\n                'sourceProvider' => $sourceProvider,\n                'factory' => $this,\n                'role' => $role,\n                'name' => $relation,\n                'target' => $definition[Relation::TARGET],\n                'schema' => $definition[Relation::SCHEMA],\n            ],\n        )]]></code>\n      <code><![CDATA[$this->config->getRelation($type)->resolve(\n            $this->factory,\n            [\n                'orm' => $orm,\n                'role' => $role,\n                'name' => $relation,\n                'target' => $relSchema[Relation::TARGET],\n                'schema' => $relSchema[Relation::SCHEMA]\n                    + [Relation::LOAD => $relSchema[Relation::LOAD] ?? null]\n                    + [Relation::COLLECTION_TYPE => $relSchema[Relation::COLLECTION_TYPE] ?? null],\n            ],\n        )]]></code>\n    </LessSpecificReturnStatement>\n    <MixedArgument>\n      <code>$class</code>\n      <code>$class</code>\n      <code>$class</code>\n      <code>$definition[Relation::TYPE]</code>\n      <code>$handler</code>\n      <code>$parent</code>\n      <code>$parent</code>\n      <code>$parent</code>\n      <code><![CDATA[$schema->define($role, SchemaInterface::DATABASE)]]></code>\n      <code>$table</code>\n      <code>$type</code>\n      <code>$type</code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$rules</code>\n      <code>$rules</code>\n    </MixedArgumentTypeCoercion>\n    <MixedAssignment>\n      <code>$handler</code>\n      <code>$parent</code>\n      <code>$parent</code>\n      <code>$parent</code>\n      <code>$table</code>\n      <code>$type</code>\n      <code>$type</code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code>CollectionFactoryInterface</code>\n      <code>TypecastInterface</code>\n    </MixedInferredReturnType>\n    <MixedOperand>\n      <code>$class</code>\n      <code>$relSchema[Relation::SCHEMA]</code>\n    </MixedOperand>\n    <MixedPropertyTypeCoercion>\n      <code><![CDATA[$defaults + $this->defaults]]></code>\n      <code><![CDATA[$this->collectionFactoryAlias]]></code>\n    </MixedPropertyTypeCoercion>\n    <MixedReturnStatement>\n      <code><![CDATA[$this->collectionFactoryAlias[$name] = $this->factory->make($name)]]></code>\n      <code><![CDATA[$this->factory->make($alias, $parameters)]]></code>\n      <code><![CDATA[$this->factory->make($handler, [\n            'database' => $database,\n            'schema' => $schema,\n            'role' => $role,\n        ])]]></code>\n    </MixedReturnStatement>\n    <MoreSpecificReturnType>\n      <code>LoaderInterface</code>\n      <code>RelationInterface</code>\n    </MoreSpecificReturnType>\n    <PossiblyInvalidArgument>\n      <code>$class</code>\n      <code>$class</code>\n      <code><![CDATA[$e->getCode()]]></code>\n    </PossiblyInvalidArgument>\n  </file>\n  <file src=\"src/Heap/Heap.php\">\n    <InvalidNullableReturnType>\n      <code>\\SplObjectStorage</code>\n    </InvalidNullableReturnType>\n    <MissingTemplateParam>\n      <code>\\IteratorAggregate</code>\n    </MissingTemplateParam>\n    <MixedArgument>\n      <code>$index</code>\n      <code>$indexName</code>\n      <code>$next[$value]</code>\n      <code><![CDATA[$this->paths[$role]]]></code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$indexName</code>\n      <code>$key</code>\n    </MixedArgumentTypeCoercion>\n    <MixedArrayAccess>\n      <code>$next[$value]</code>\n      <code>$next[$value]</code>\n      <code>$next[$value]</code>\n      <code>$next[$value]</code>\n      <code>$removeFrom[$removeKey ?? $value]</code>\n      <code>$result[$value]</code>\n      <code>$rolePath[$value]</code>\n      <code><![CDATA[$this->paths[$role][$indexName]]]></code>\n      <code><![CDATA[$this->paths[$role][$indexName]]]></code>\n      <code><![CDATA[$this->paths[$role][$indexName]]]></code>\n      <code><![CDATA[$this->paths[$role][$indexName]]]></code>\n      <code><![CDATA[$this->paths[$role][$indexName][$value]]]></code>\n    </MixedArrayAccess>\n    <MixedArrayAssignment>\n      <code>$rolePath[$value]</code>\n    </MixedArrayAssignment>\n    <MixedArrayOffset>\n      <code>$data[$indexName]</code>\n      <code>$data[$k]</code>\n      <code>$scope[$key]</code>\n      <code><![CDATA[$this->paths[$role][$indexName]]]></code>\n    </MixedArrayOffset>\n    <MixedArrayTypeCoercion>\n      <code>$data[$indexName]</code>\n    </MixedArrayTypeCoercion>\n    <MixedAssignment>\n      <code>$index</code>\n      <code>$indexKeys</code>\n      <code>$indexName</code>\n      <code>$indexName</code>\n      <code>$indexName</code>\n      <code>$k</code>\n      <code>$key</code>\n      <code>$key</code>\n      <code><![CDATA[$this->storage]]></code>\n      <code>$values</code>\n      <code>$values</code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code>?Node</code>\n      <code>?object</code>\n    </MixedInferredReturnType>\n    <MixedReturnStatement>\n      <code>$result</code>\n      <code><![CDATA[$this->paths[$role][$indexName][$value] ?? null]]></code>\n      <code><![CDATA[$this->paths[$role][$indexName][$value] ?? null]]></code>\n      <code><![CDATA[$this->storage->offsetGet($entity)]]></code>\n    </MixedReturnStatement>\n    <NullableReturnStatement>\n      <code><![CDATA[$this->storage]]></code>\n    </NullableReturnStatement>\n    <PossiblyInvalidClone>\n      <code><![CDATA[clone $this->storage]]></code>\n    </PossiblyInvalidClone>\n    <PossiblyNullArrayOffset>\n      <code>$next</code>\n      <code>$next</code>\n      <code>$next</code>\n      <code>$next</code>\n      <code>$removeFrom</code>\n    </PossiblyNullArrayOffset>\n    <PossiblyNullReference>\n      <code>getData</code>\n      <code>getData</code>\n      <code>offsetExists</code>\n      <code>offsetGet</code>\n      <code>offsetSet</code>\n      <code>offsetUnset</code>\n    </PossiblyNullReference>\n    <UnsupportedPropertyReferenceUsage>\n      <code><![CDATA[$result = &$this->paths[$role][$indexName]]]></code>\n      <code><![CDATA[$result = &$this->paths[$role][$indexName]]]></code>\n      <code><![CDATA[$rolePath = &$this->paths[$role][$indexName]]]></code>\n    </UnsupportedPropertyReferenceUsage>\n    <UnusedForeachValue>\n      <code>$values</code>\n    </UnusedForeachValue>\n  </file>\n  <file src=\"src/Heap/Node.php\">\n    <MixedArgumentTypeCoercion>\n      <code>$name</code>\n      <code><![CDATA[$this->rawData]]></code>\n    </MixedArgumentTypeCoercion>\n    <MixedAssignment>\n      <code>$changes[$name]</code>\n      <code>$value</code>\n    </MixedAssignment>\n    <MixedPropertyTypeCoercion>\n      <code><![CDATA[$state->getTransactionData()]]></code>\n    </MixedPropertyTypeCoercion>\n  </file>\n  <file src=\"src/Heap/State.php\">\n    <MixedArgumentTypeCoercion>\n      <code>$column</code>\n    </MixedArgumentTypeCoercion>\n    <MixedAssignment>\n      <code>$result[$field]</code>\n      <code>$result[$field]</code>\n      <code>$value</code>\n      <code>$value</code>\n      <code>$value</code>\n      <code>$value</code>\n    </MixedAssignment>\n  </file>\n  <file src=\"src/Heap/Traits/WaitFieldTrait.php\">\n    <RiskyTruthyFalsyComparison>\n      <code><![CDATA[$this->waitingFields[$key] ?? false]]></code>\n    </RiskyTruthyFalsyComparison>\n  </file>\n  <file src=\"src/Iterator.php\">\n    <ImplementedReturnTypeMismatch>\n      <code><![CDATA[\\Generator<array, array-key|TEntity, mixed, void>]]></code>\n    </ImplementedReturnTypeMismatch>\n    <InvalidReturnStatement>\n      <code><![CDATA[$e ?? $this->entityFactory->make($role, $data, Node::MANAGED, typecast: $this->typecast)]]></code>\n    </InvalidReturnStatement>\n    <MixedArgument>\n      <code>$data</code>\n      <code>$role</code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$data</code>\n    </MixedArgumentTypeCoercion>\n    <MixedArrayAccess>\n      <code><![CDATA[$data['@']]]></code>\n      <code>$data[LoaderInterface::ROLE_KEY]</code>\n      <code><![CDATA[$index['@']]]></code>\n    </MixedArrayAccess>\n    <MixedArrayOffset>\n      <code>$data[$pk]</code>\n      <code><![CDATA[[$pk => $id]]]></code>\n    </MixedArrayOffset>\n    <MixedAssignment>\n      <code>$data</code>\n      <code>$data</code>\n      <code>$id</code>\n      <code>$index</code>\n      <code>$index</code>\n      <code>$pk</code>\n      <code>$role</code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code>TEntity</code>\n    </MixedInferredReturnType>\n    <MixedReturnStatement>\n      <code><![CDATA[$e ?? $this->entityFactory->make($role, $data, Node::MANAGED, typecast: $this->typecast)]]></code>\n    </MixedReturnStatement>\n    <MixedReturnTypeCoercion>\n      <code><![CDATA[\\Generator<array, array-key|TEntity, mixed, void>]]></code>\n    </MixedReturnTypeCoercion>\n  </file>\n  <file src=\"src/Mapper/ClasslessMapper.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA[$this->role]]></code>\n    </ArgumentTypeCoercion>\n    <InvalidArgument>\n      <code><![CDATA[\\array_keys($this->columns + $this->parentColumns)]]></code>\n    </InvalidArgument>\n    <MissingParamType>\n      <code>$entity</code>\n      <code>$entity</code>\n    </MissingParamType>\n    <MixedArgument>\n      <code>$entity</code>\n      <code>$entity</code>\n    </MixedArgument>\n  </file>\n  <file src=\"src/Mapper/DatabaseMapper.php\">\n    <ArgumentTypeCoercion>\n      <code>$role</code>\n      <code><![CDATA[$this->source->getTable()]]></code>\n      <code><![CDATA[\\count($this->primaryColumns) === 1 ? $this->primaryColumns[0] : null]]></code>\n    </ArgumentTypeCoercion>\n    <MixedArgument>\n      <code>$parent</code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$pk</code>\n      <code>$value</code>\n    </MixedArgumentTypeCoercion>\n    <MixedArrayOffset>\n      <code><![CDATA[$result[$this->columns[$column]]]]></code>\n      <code><![CDATA[$this->columns[$PK]]]></code>\n      <code><![CDATA[$this->columns[\\is_int($property) ? $column : $property]]]></code>\n      <code><![CDATA[$this->parentColumns[\\is_int($property) ? $column : $property]]]></code>\n    </MixedArrayOffset>\n    <MixedAssignment>\n      <code>$PK</code>\n      <code>$column</code>\n      <code>$column</code>\n      <code>$parent</code>\n      <code>$parent</code>\n      <code>$property</code>\n      <code>$property</code>\n      <code><![CDATA[$result[$this->columns[$column]]]]></code>\n      <code><![CDATA[$this->generatedFields]]></code>\n      <code>$value</code>\n      <code>$value</code>\n    </MixedAssignment>\n    <MixedPropertyTypeCoercion>\n      <code><![CDATA[$this->primaryColumns]]></code>\n      <code><![CDATA[(array) $schema->define($role, SchemaInterface::PRIMARY_KEY)]]></code>\n    </MixedPropertyTypeCoercion>\n  </file>\n  <file src=\"src/Mapper/Mapper.php\">\n    <MixedAssignment>\n      <code><![CDATA[$this->children]]></code>\n      <code><![CDATA[$this->discriminator]]></code>\n      <code><![CDATA[$this->entity]]></code>\n    </MixedAssignment>\n  </file>\n  <file src=\"src/Mapper/Proxy/ClasslessProxyFactory.php\">\n    <InvalidArgument>\n      <code><![CDATA[$this->classMap]]></code>\n    </InvalidArgument>\n    <InvalidArrayAccess>\n      <code>$key[0]</code>\n    </InvalidArrayAccess>\n    <InvalidArrayOffset>\n      <code><![CDATA[$this->classMap[$role]]]></code>\n    </InvalidArrayOffset>\n    <InvalidPropertyAssignmentValue>\n      <code>[]</code>\n    </InvalidPropertyAssignmentValue>\n    <LessSpecificReturnStatement>\n      <code>$class</code>\n      <code><![CDATA[$this->classMap[$role]]]></code>\n    </LessSpecificReturnStatement>\n    <MismatchingDocblockPropertyType>\n      <code>array</code>\n    </MismatchingDocblockPropertyType>\n    <MixedArgument>\n      <code>$currentData</code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$key</code>\n      <code>$key</code>\n    </MixedArgumentTypeCoercion>\n    <MixedAssignment>\n      <code>$currentData</code>\n      <code>$currentData[$key]</code>\n      <code>$field</code>\n      <code>$relations</code>\n      <code><![CDATA[$result[$key[0] === \"\\0\" ? \\substr($key, \\strrpos($key, \"\\0\", 1) + 1) : $key]]]></code>\n      <code>$value</code>\n      <code>$value</code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code>array</code>\n      <code>array</code>\n    </MixedInferredReturnType>\n    <MixedMethodCall>\n      <code>new $class()</code>\n    </MixedMethodCall>\n    <MixedOperand>\n      <code>$relations</code>\n    </MixedOperand>\n    <MixedReturnStatement>\n      <code>$currentData</code>\n      <code>$currentData</code>\n      <code>$relations + $result</code>\n    </MixedReturnStatement>\n    <MoreSpecificReturnType>\n      <code>class-string</code>\n    </MoreSpecificReturnType>\n    <PossiblyFalseOperand>\n      <code><![CDATA[\\strrpos($key, \"\\0\", 1)]]></code>\n    </PossiblyFalseOperand>\n    <UnusedForeachValue>\n      <code>$relation</code>\n    </UnusedForeachValue>\n  </file>\n  <file src=\"src/Mapper/Proxy/Hydrator/ClassPropertiesExtractor.php\">\n    <ArgumentTypeCoercion>\n      <code>$objectOrClass</code>\n    </ArgumentTypeCoercion>\n  </file>\n  <file src=\"src/Mapper/Proxy/Hydrator/ClosureHydrator.php\">\n    <MixedArgument>\n      <code>$property</code>\n      <code>$property</code>\n      <code>$property</code>\n      <code>$props</code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$class</code>\n      <code>$class</code>\n    </MixedArgumentTypeCoercion>\n    <MixedArrayOffset>\n      <code><![CDATA[$relMap->getRelations()[$property]]]></code>\n    </MixedArrayOffset>\n    <MixedAssignment>\n      <code>$property</code>\n      <code>$property</code>\n      <code>$props</code>\n      <code>$props</code>\n      <code>$value</code>\n      <code>$value</code>\n    </MixedAssignment>\n    <PossiblyNullFunctionCall>\n      <code>\\Closure::bind($setter, null, $class)($object, $props, $data)</code>\n      <code><![CDATA[\\Closure::bind(static function (object $object, array $props, array &$data): void {\n                foreach ($props as $property) {\n                    if (!\\array_key_exists($property, $data)) {\n                        continue;\n                    }\n\n                    try {\n                        // Use @ to try to ignore deprecations\n                        @$object->{$property} = $data[$property];\n                        unset($data[$property]);\n                    } catch (\\Throwable $e) {\n                        if ($e::class === \\TypeError::class) {\n                            throw new MapperException(\n                                \"Can't hydrate an entity because property and value types are incompatible.\",\n                                previous: $e,\n                            );\n                        }\n                    }\n                }\n            }, null, $class)($object, $props, $data)]]></code>\n    </PossiblyNullFunctionCall>\n  </file>\n  <file src=\"src/Mapper/Proxy/Hydrator/PropertyMap.php\">\n    <MixedArgument>\n      <code>$properties</code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$properties</code>\n    </MixedAssignment>\n    <MixedReturnTypeCoercion>\n      <code>$class</code>\n      <code>?string</code>\n    </MixedReturnTypeCoercion>\n  </file>\n  <file src=\"src/Mapper/Proxy/ProxyEntityFactory.php\">\n    <ArgumentTypeCoercion>\n      <code>$class</code>\n    </ArgumentTypeCoercion>\n    <InvalidArrayAccess>\n      <code>$key[0]</code>\n    </InvalidArrayAccess>\n    <InvalidPropertyAssignmentValue>\n      <code><![CDATA[$this->classProperties]]></code>\n    </InvalidPropertyAssignmentValue>\n    <InvalidReturnStatement>\n      <code><![CDATA[$this->classProperties[$entity::class] ??= $this->propertiesExtractor\n            ->extract($entity, \\array_keys($relMap->getRelations()))]]></code>\n    </InvalidReturnStatement>\n    <InvalidReturnType>\n      <code>PropertyMap[]</code>\n    </InvalidReturnType>\n    <MixedArgument>\n      <code>$currentData</code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$key</code>\n      <code>$key</code>\n      <code>$properties</code>\n      <code><![CDATA[$scope === '' ? $class : $scope]]></code>\n      <code><![CDATA[\\array_keys($relMap->getRelations())]]></code>\n    </MixedArgumentTypeCoercion>\n    <MixedAssignment>\n      <code>$currentData</code>\n      <code>$currentData[$key]</code>\n      <code>$name</code>\n      <code>$properties</code>\n      <code><![CDATA[$result[$key[0] === \"\\0\" ? \\substr($key, \\strrpos($key, \"\\0\", 1) + 1) : $key]]]></code>\n      <code>$value</code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code>array</code>\n    </MixedInferredReturnType>\n    <MixedReturnStatement>\n      <code>$currentData</code>\n      <code>$currentData</code>\n    </MixedReturnStatement>\n    <MixedReturnTypeCoercion>\n      <code><![CDATA[\\array_diff_key($this->entityToArray($entity), $relMap->getRelations())]]></code>\n      <code><![CDATA[array<string, mixed>]]></code>\n    </MixedReturnTypeCoercion>\n    <PossiblyFalseArgument>\n      <code>$pos</code>\n    </PossiblyFalseArgument>\n    <PossiblyFalseOperand>\n      <code>$pos</code>\n      <code><![CDATA[\\strrpos($key, \"\\0\", 1)]]></code>\n    </PossiblyFalseOperand>\n    <PossiblyNullFunctionCall>\n      <code><![CDATA[\\Closure::bind($this->initializer, null, $scope === '' ? $class : $scope)($proxy, $properties)]]></code>\n    </PossiblyNullFunctionCall>\n    <PropertyTypeCoercion>\n      <code><![CDATA[$this->classMap]]></code>\n    </PropertyTypeCoercion>\n    <UnusedForeachValue>\n      <code>$relation</code>\n    </UnusedForeachValue>\n  </file>\n  <file src=\"src/Mapper/StdMapper.php\">\n    <MissingParamType>\n      <code>$entity</code>\n      <code>$entity</code>\n    </MissingParamType>\n    <MixedArgument>\n      <code>$entity</code>\n      <code><![CDATA[$v->getValue()]]></code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$v</code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code>object</code>\n    </MixedInferredReturnType>\n    <MixedReturnStatement>\n      <code>$entity</code>\n    </MixedReturnStatement>\n  </file>\n  <file src=\"src/Mapper/Traits/SingleTableTrait.php\">\n    <MixedArrayOffset>\n      <code><![CDATA[$this->children[$data[$this->discriminator]]]]></code>\n    </MixedArrayOffset>\n    <MixedAssignment>\n      <code>$childClass</code>\n      <code>$class</code>\n      <code>$class</code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code>string</code>\n      <code>string</code>\n    </MixedInferredReturnType>\n  </file>\n  <file src=\"src/MapperInterface.php\">\n    <InvalidDocblock>\n      <code><![CDATA[object<T>]]></code>\n    </InvalidDocblock>\n  </file>\n  <file src=\"src/ORM.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA[$this->resolveRole($entity)]]></code>\n      <code><![CDATA[$this->resolveRole($entity)]]></code>\n      <code><![CDATA[$this->resolveRole($entity)]]></code>\n    </ArgumentTypeCoercion>\n    <InvalidReturnStatement>\n      <code><![CDATA[match ($class) {\n            EntityFactoryInterface::class => $this->entityFactory,\n            EntityProviderInterface::class => $this->entityProvider,\n            SourceProviderInterface::class => $this->sourceProvider,\n            TypecastProviderInterface::class => $this->typecastProvider,\n            IndexProviderInterface::class => $this->indexProvider,\n            MapperProviderInterface::class => $this->mapperProvider,\n            RelationProviderInterface::class => $this->relationProvider,\n            RepositoryProviderInterface::class => $this->repositoryProvider,\n            default => throw new \\InvalidArgumentException(\"Undefined service `$class`.\"),\n        }]]></code>\n    </InvalidReturnStatement>\n    <InvalidReturnType>\n      <code>object</code>\n    </InvalidReturnType>\n  </file>\n  <file src=\"src/Parser/AbstractMergeNode.php\">\n    <MixedArgument>\n      <code>$item</code>\n      <code>static::OVERWRITE_DATA</code>\n    </MixedArgument>\n    <MixedArrayOffset>\n      <code>$data[$key]</code>\n    </MixedArrayOffset>\n    <MixedAssignment>\n      <code>$item</code>\n      <code>$key</code>\n    </MixedAssignment>\n    <PossiblyNullArgument>\n      <code><![CDATA[$this->indexName]]></code>\n    </PossiblyNullArgument>\n    <UnsupportedReferenceUsage>\n      <code><![CDATA[$this->results[] = &$data]]></code>\n    </UnsupportedReferenceUsage>\n  </file>\n  <file src=\"src/Parser/AbstractNode.php\">\n    <InvalidNullableReturnType>\n      <code>ParentMergeNode</code>\n    </InvalidNullableReturnType>\n    <MissingReturnType>\n      <code>push</code>\n    </MissingReturnType>\n    <MixedArgument>\n      <code>$criteria</code>\n      <code>$index</code>\n      <code>$subset</code>\n      <code>$subset</code>\n      <code>$subset[$container]</code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$criteria</code>\n      <code>$criteria</code>\n      <code>$data</code>\n    </MixedArgumentTypeCoercion>\n    <MixedArrayAccess>\n      <code>$subset[$container]</code>\n      <code>$subset[$container]</code>\n      <code>$subset[$container]</code>\n    </MixedArrayAccess>\n    <MixedArrayAssignment>\n      <code>$subset[$container]</code>\n    </MixedArrayAssignment>\n    <MixedArrayOffset>\n      <code>$data[$key]</code>\n      <code>$result[$key]</code>\n    </MixedArrayOffset>\n    <MixedAssignment>\n      <code>$index</code>\n      <code>$key</code>\n      <code>$result[$key]</code>\n      <code>$subset</code>\n      <code>$subset</code>\n      <code>$subset</code>\n    </MixedAssignment>\n    <NullableReturnStatement>\n      <code><![CDATA[$this->mergeParent]]></code>\n    </NullableReturnStatement>\n    <PossiblyInvalidArgument>\n      <code><![CDATA[$e->getCode()]]></code>\n    </PossiblyInvalidArgument>\n    <PossiblyNullArgument>\n      <code><![CDATA[$this->indexName]]></code>\n    </PossiblyNullArgument>\n    <PossiblyNullReference>\n      <code>getIndexes</code>\n      <code>getItemsCount</code>\n      <code>getItemsCount</code>\n      <code>getItemsSubset</code>\n      <code>getItemsSubset</code>\n      <code>hasIndex</code>\n      <code>hasIndex</code>\n      <code>hasIndex</code>\n      <code>hasIndex</code>\n      <code>hasIndex</code>\n    </PossiblyNullReference>\n    <RiskyTruthyFalsyComparison>\n      <code>empty($outerKeys)</code>\n    </RiskyTruthyFalsyComparison>\n    <UnsupportedReferenceUsage>\n      <code><![CDATA[$subset[$container][] = &$data]]></code>\n    </UnsupportedReferenceUsage>\n  </file>\n  <file src=\"src/Parser/ArrayNode.php\">\n    <PossiblyNullArgument>\n      <code><![CDATA[$this->container]]></code>\n      <code><![CDATA[$this->indexName]]></code>\n    </PossiblyNullArgument>\n  </file>\n  <file src=\"src/Parser/EmbeddedNode.php\">\n    <PossiblyNullArgument>\n      <code><![CDATA[$this->container]]></code>\n      <code><![CDATA[$this->indexName]]></code>\n    </PossiblyNullArgument>\n  </file>\n  <file src=\"src/Parser/MultiKeyCollection.php\">\n    <ArgumentTypeCoercion>\n      <code>$keyValue</code>\n    </ArgumentTypeCoercion>\n    <InvalidArrayOffset>\n      <code>$pool[$keyValue]</code>\n      <code>$pool[$keyValue]</code>\n    </InvalidArrayOffset>\n    <MissingClosureParamType>\n      <code>$deep</code>\n    </MissingClosureParamType>\n    <MissingClosureReturnType>\n      <code><![CDATA[static function (array $data, $deep) use (&$depth, &$iterator) {]]></code>\n    </MissingClosureReturnType>\n    <MixedArgument>\n      <code>$data</code>\n      <code>$key</code>\n      <code>$pool</code>\n      <code><![CDATA[$this->data[$indexName]]]></code>\n      <code><![CDATA[$this->data[$index]]]></code>\n      <code><![CDATA[$this->data[$index]]]></code>\n      <code>$value</code>\n      <code>$value</code>\n    </MixedArgument>\n    <MixedArrayAssignment>\n      <code>$pool[]</code>\n    </MixedArrayAssignment>\n    <MixedAssignment>\n      <code>$data</code>\n      <code>$deep</code>\n      <code>$key</code>\n      <code>$key</code>\n      <code>$subset</code>\n      <code>$value</code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code>array</code>\n      <code>array</code>\n    </MixedInferredReturnType>\n    <MixedOperand>\n      <code>$deep</code>\n    </MixedOperand>\n    <MixedPropertyTypeCoercion>\n      <code><![CDATA[$this->indexes]]></code>\n    </MixedPropertyTypeCoercion>\n    <MixedReturnStatement>\n      <code><![CDATA[$this->lastItemKeys[$index]]]></code>\n      <code>$value</code>\n    </MixedReturnStatement>\n    <UnsupportedPropertyReferenceUsage>\n      <code><![CDATA[$pool = &$this->data[$index]]]></code>\n    </UnsupportedPropertyReferenceUsage>\n    <UnsupportedReferenceUsage>\n      <code><![CDATA[$pool[] = &$data]]></code>\n    </UnsupportedReferenceUsage>\n  </file>\n  <file src=\"src/Parser/OutputNode.php\">\n    <UnsupportedReferenceUsage>\n      <code><![CDATA[$this->result[] = &$data]]></code>\n    </UnsupportedReferenceUsage>\n  </file>\n  <file src=\"src/Parser/SingularNode.php\">\n    <PossiblyNullArgument>\n      <code><![CDATA[$this->container]]></code>\n      <code><![CDATA[$this->indexName]]></code>\n    </PossiblyNullArgument>\n  </file>\n  <file src=\"src/Parser/SubclassMergeNode.php\">\n    <InvalidClassConstantType>\n      <code>OVERWRITE_DATA</code>\n    </InvalidClassConstantType>\n  </file>\n  <file src=\"src/Parser/Traits/DuplicateTrait.php\">\n    <MixedArgument>\n      <code>$zoom</code>\n    </MixedArgument>\n    <MixedArrayAccess>\n      <code>$zoom[$criteria]</code>\n    </MixedArrayAccess>\n    <MixedArrayAssignment>\n      <code>$zoom[$criteria]</code>\n    </MixedArrayAssignment>\n    <MixedArrayOffset>\n      <code>$data[$key]</code>\n    </MixedArrayOffset>\n    <MixedAssignment>\n      <code>$data</code>\n      <code>$data</code>\n      <code>$key</code>\n    </MixedAssignment>\n    <UnsupportedPropertyReferenceUsage>\n      <code><![CDATA[$zoom = &$this->duplicates]]></code>\n    </UnsupportedPropertyReferenceUsage>\n  </file>\n  <file src=\"src/Parser/Typecast.php\">\n    <DocblockTypeContradiction>\n      <code><![CDATA[$type === 'int']]></code>\n      <code><![CDATA[$type === 'int' && (\\is_int($value) || \\preg_match('/^\\\\d++$/', $value) === 1)\n                            => $rule::tryFrom((int) $value)]]></code>\n      <code><![CDATA[$type === 'string']]></code>\n      <code>null</code>\n    </DocblockTypeContradiction>\n    <MixedArgument>\n      <code>$key</code>\n      <code>$value</code>\n      <code>$value</code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$data[$column]</code>\n      <code>$data[$key]</code>\n      <code>$data[$key]</code>\n      <code>$data[$key]</code>\n      <code>$rule</code>\n      <code>$value</code>\n    </MixedAssignment>\n    <PossiblyInvalidArgument>\n      <code><![CDATA[$e->getCode()]]></code>\n      <code>$value</code>\n    </PossiblyInvalidArgument>\n    <PossiblyUndefinedVariable>\n      <code>$key</code>\n    </PossiblyUndefinedVariable>\n    <PropertyTypeCoercion>\n      <code><![CDATA[$this->enumClasses]]></code>\n    </PropertyTypeCoercion>\n  </file>\n  <file src=\"src/Reference/Promise.php\">\n    <MixedArgument>\n      <code><![CDATA[$this->origin->getValue()]]></code>\n    </MixedArgument>\n  </file>\n  <file src=\"src/Relation/AbstractRelation.php\">\n    <MixedArgument>\n      <code>$role</code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$parent</code>\n      <code>$role</code>\n      <code><![CDATA[$this->inversion]]></code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code>bool</code>\n    </MixedInferredReturnType>\n    <MixedPropertyTypeCoercion>\n      <code>(array) $schema[Relation::INNER_KEY]</code>\n      <code>(array) $schema[Relation::OUTER_KEY]</code>\n    </MixedPropertyTypeCoercion>\n    <MixedReturnStatement>\n      <code><![CDATA[$this->schema[Relation::CASCADE] ?? false]]></code>\n      <code><![CDATA[$this->schema[Relation::CASCADE] ?? false]]></code>\n    </MixedReturnStatement>\n    <PossiblyNullArgument>\n      <code>$role</code>\n    </PossiblyNullArgument>\n  </file>\n  <file src=\"src/Relation/BelongsTo.php\">\n    <MixedArgument>\n      <code>$related</code>\n      <code>$related</code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$nodeValue</code>\n      <code>$original</code>\n      <code>$prefill</code>\n      <code>$related</code>\n      <code>$related</code>\n      <code>$related</code>\n      <code>$related</code>\n      <code>$toReference[$outerKey]</code>\n      <code><![CDATA[$values[$this->outerKeys[$i]]]]></code>\n    </MixedAssignment>\n  </file>\n  <file src=\"src/Relation/Embedded.php\">\n    <ArgumentTypeCoercion>\n      <code>$target</code>\n      <code><![CDATA[$this->target]]></code>\n      <code><![CDATA[$this->target]]></code>\n    </ArgumentTypeCoercion>\n    <MixedArgument>\n      <code>$related</code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$data</code>\n      <code>$field</code>\n    </MixedArgumentTypeCoercion>\n    <MixedAssignment>\n      <code>$data[$key]</code>\n      <code>$original</code>\n      <code>$related</code>\n      <code>$related</code>\n      <code>$related</code>\n      <code>$scope[$key]</code>\n      <code><![CDATA[$this->columns]]></code>\n      <code>$value</code>\n      <code>$value</code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code>?object</code>\n    </MixedInferredReturnType>\n    <MixedPropertyTypeCoercion>\n      <code><![CDATA[(array) $orm->getSchema()->define($target, SchemaInterface::PRIMARY_KEY)]]></code>\n    </MixedPropertyTypeCoercion>\n    <MixedReturnStatement>\n      <code><![CDATA[$reference->getValue()]]></code>\n    </MixedReturnStatement>\n    <MixedReturnTypeCoercion>\n      <code><![CDATA[$data === null\n            ? null\n            : $this->mapperProvider->getMapper($this->target)->cast($data)]]></code>\n      <code>?array</code>\n    </MixedReturnTypeCoercion>\n    <PossiblyInvalidClone>\n      <code><![CDATA[clone $this->resolve($related, true)]]></code>\n    </PossiblyInvalidClone>\n    <RiskyTruthyFalsyComparison>\n      <code>empty($value)</code>\n    </RiskyTruthyFalsyComparison>\n  </file>\n  <file src=\"src/Relation/HasMany.php\">\n    <InvalidArgument>\n      <code>$related</code>\n    </InvalidArgument>\n    <MixedArgument>\n      <code>$item</code>\n      <code>$item</code>\n      <code>$item</code>\n      <code>$item</code>\n      <code>$item</code>\n      <code>$original ?? []</code>\n      <code>$role</code>\n      <code><![CDATA[$this->schema[Relation::COLLECTION_TYPE] ?? null]]></code>\n      <code><![CDATA[$this->schema[Relation::WHERE] ?? []]]></code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$data</code>\n    </MixedArgumentTypeCoercion>\n    <MixedArrayAccess>\n      <code>$item[LoaderInterface::ROLE_KEY]</code>\n    </MixedArrayAccess>\n    <MixedArrayOffset>\n      <code>$mappers[$role]</code>\n      <code>$mappers[$role]</code>\n    </MixedArrayOffset>\n    <MixedArrayTypeCoercion>\n      <code>$mappers[$role]</code>\n    </MixedArrayTypeCoercion>\n    <MixedAssignment>\n      <code>$item</code>\n      <code>$item</code>\n      <code>$item</code>\n      <code>$item</code>\n      <code>$item</code>\n      <code>$original</code>\n      <code>$related</code>\n      <code>$role</code>\n      <code><![CDATA[$scope[$this->outerKeys[$i]]]]></code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code>?iterable</code>\n      <code>iterable</code>\n    </MixedInferredReturnType>\n    <MixedReturnStatement>\n      <code><![CDATA[$reference->getValue()]]></code>\n      <code><![CDATA[$this->factory->collection(\n            $this->schema[Relation::COLLECTION_TYPE] ?? null,\n        )->collect($data)]]></code>\n    </MixedReturnStatement>\n    <PossiblyNullArgument>\n      <code>$related</code>\n    </PossiblyNullArgument>\n    <RedundantCondition>\n      <code>$original</code>\n    </RedundantCondition>\n    <RiskyTruthyFalsyComparison>\n      <code>!$data</code>\n    </RiskyTruthyFalsyComparison>\n    <TypeDoesNotContainNull>\n      <code>[]</code>\n    </TypeDoesNotContainNull>\n    <UnusedVariable>\n      <code>$node</code>\n    </UnusedVariable>\n  </file>\n  <file src=\"src/Relation/HasOne.php\">\n    <MixedArgument>\n      <code>$original</code>\n      <code>$original</code>\n      <code>$related</code>\n      <code>$related</code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$original</code>\n      <code>$original</code>\n      <code>$related</code>\n    </MixedAssignment>\n    <PossiblyNullArgument>\n      <code>$rTuple</code>\n    </PossiblyNullArgument>\n  </file>\n  <file src=\"src/Relation/ManyToMany.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA[$this->role]]></code>\n      <code><![CDATA[$this->target]]></code>\n      <code><![CDATA[$this->target]]></code>\n    </ArgumentTypeCoercion>\n    <DocblockTypeContradiction>\n      <code>\\is_array($pivot)</code>\n    </DocblockTypeContradiction>\n    <InvalidArgument>\n      <code><![CDATA[$factory->make($this->pivotRole, $pivot, Node::MANAGED)]]></code>\n      <code><![CDATA[$this->entityFactory->make(\n                $this->schema[Relation::THROUGH_ENTITY],\n                $pivot,\n                Node::MANAGED,\n                typecast: true,\n            )]]></code>\n    </InvalidArgument>\n    <InvalidReturnStatement>\n      <code><![CDATA[$relatedStorage->get($parent)]]></code>\n    </InvalidReturnStatement>\n    <MixedArgument>\n      <code>$d</code>\n      <code><![CDATA[$data->toArray()]]></code>\n      <code>$entity</code>\n      <code>$entity</code>\n      <code>$entity</code>\n      <code>$entity</code>\n      <code>$item</code>\n      <code>$item</code>\n      <code>$original</code>\n      <code><![CDATA[$original->getContext()->offsetGet($item)]]></code>\n      <code>$pivot</code>\n      <code>$pivot</code>\n      <code>$pivotRole</code>\n      <code>$related</code>\n      <code><![CDATA[$root->getResult()[0]['output']]]></code>\n      <code>$row</code>\n      <code>$targetRole</code>\n      <code><![CDATA[$this->schema[Relation::COLLECTION_TYPE] ?? null]]></code>\n      <code><![CDATA[$this->schema[Relation::THROUGH_ENTITY]]]></code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$data</code>\n      <code><![CDATA[$data->getPivotContext()]]></code>\n      <code><![CDATA[$data->toArray()]]></code>\n      <code>$pivot</code>\n      <code>$pivot</code>\n      <code>$pivot ?? []</code>\n      <code>(array) $data</code>\n      <code><![CDATA[(array) $this->schema[Relation::INNER_KEY]]]></code>\n      <code><![CDATA[(array) $this->schema[Relation::INNER_KEY]]]></code>\n      <code>\\iterator_to_array($data)</code>\n    </MixedArgumentTypeCoercion>\n    <MixedArrayAccess>\n      <code>$d[LoaderInterface::ROLE_KEY]</code>\n      <code><![CDATA[$pivot['@']]]></code>\n      <code><![CDATA[$pivot['@']]]></code>\n      <code>$pivot[LoaderInterface::ROLE_KEY]</code>\n      <code><![CDATA[$root->getResult()[0]['output']]]></code>\n    </MixedArrayAccess>\n    <MixedArrayAssignment>\n      <code><![CDATA[$pivot['@']]]></code>\n      <code>$pivots[]</code>\n    </MixedArrayAssignment>\n    <MixedArrayOffset>\n      <code>$pivotData[$entity]</code>\n      <code>$pivotData[$entity]</code>\n      <code>$pivotMappers[$pivotRole]</code>\n      <code>$pivotMappers[$pivotRole]</code>\n      <code>$targetMappers[$targetRole]</code>\n      <code>$targetMappers[$targetRole]</code>\n    </MixedArrayOffset>\n    <MixedArrayTypeCoercion>\n      <code>$pivotMappers[$pivotRole]</code>\n      <code>$targetMappers[$targetRole]</code>\n    </MixedArrayTypeCoercion>\n    <MixedAssignment>\n      <code>$d</code>\n      <code>$entity</code>\n      <code>$entity</code>\n      <code>$item</code>\n      <code>$item</code>\n      <code>$item</code>\n      <code>$original</code>\n      <code>$pivot</code>\n      <code>$pivot</code>\n      <code>$pivotRole</code>\n      <code>$pivots</code>\n      <code>$related</code>\n      <code>$related</code>\n      <code>$relatedStorage</code>\n      <code>$row</code>\n      <code>$scope[$key]</code>\n      <code>$targetRole</code>\n      <code><![CDATA[$this->pivotRole]]></code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code>?iterable</code>\n      <code>iterable</code>\n    </MixedInferredReturnType>\n    <MixedMethodCall>\n      <code>get</code>\n    </MixedMethodCall>\n    <MixedPropertyTypeCoercion>\n      <code><![CDATA[(array) $this->schema[Relation::THROUGH_INNER_KEY]]]></code>\n      <code><![CDATA[(array) $this->schema[Relation::THROUGH_OUTER_KEY]]]></code>\n    </MixedPropertyTypeCoercion>\n    <MixedReturnStatement>\n      <code><![CDATA[$reference->getValue()]]></code>\n      <code><![CDATA[$this->factory->collection(\n            $this->schema[Relation::COLLECTION_TYPE] ?? null,\n        )->collect($data)]]></code>\n    </MixedReturnStatement>\n    <PossiblyInvalidArgument>\n      <code>$data</code>\n      <code>$pivot</code>\n    </PossiblyInvalidArgument>\n    <PossiblyNullArgument>\n      <code>$data</code>\n      <code><![CDATA[$pTuple->state]]></code>\n      <code>$pivot</code>\n    </PossiblyNullArgument>\n    <PossiblyNullPropertyFetch>\n      <code><![CDATA[$pTuple->state]]></code>\n    </PossiblyNullPropertyFetch>\n    <RedundantCast>\n      <code>(array) $data</code>\n    </RedundantCast>\n    <RiskyTruthyFalsyComparison>\n      <code>!$data</code>\n    </RiskyTruthyFalsyComparison>\n    <UndefinedInterfaceMethod>\n      <code>toArray</code>\n    </UndefinedInterfaceMethod>\n    <UnevaluatedCode>\n      <code>$elements[] = $entity;</code>\n      <code>$elements[] = $entity;</code>\n    </UnevaluatedCode>\n    <UnusedParam>\n      <code>$relatedNode</code>\n    </UnusedParam>\n  </file>\n  <file src=\"src/Relation/Morphed/BelongsToMorphed.php\">\n    <MixedArgument>\n      <code>$related</code>\n      <code>$target</code>\n      <code>$target</code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$related</code>\n      <code>$target</code>\n      <code><![CDATA[$this->morphKey]]></code>\n    </MixedAssignment>\n  </file>\n  <file src=\"src/Relation/Morphed/MorphedHasMany.php\">\n    <MixedAssignment>\n      <code><![CDATA[$this->morphKey]]></code>\n    </MixedAssignment>\n  </file>\n  <file src=\"src/Relation/Morphed/MorphedHasOne.php\">\n    <MixedArgument>\n      <code>$related</code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$related</code>\n      <code><![CDATA[$this->morphKey]]></code>\n    </MixedAssignment>\n    <PossiblyNullOperand>\n      <code>parent::getReferenceScope($node)</code>\n    </PossiblyNullOperand>\n  </file>\n  <file src=\"src/Relation/RefersTo.php\">\n    <MixedArgument>\n      <code>$related</code>\n      <code>$related</code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$original</code>\n      <code>$related</code>\n      <code>$related</code>\n      <code>$related</code>\n    </MixedAssignment>\n  </file>\n  <file src=\"src/Relation/ShadowBelongsTo.php\">\n    <MixedArgument>\n      <code>$key</code>\n    </MixedArgument>\n    <MixedArrayOffset>\n      <code>$data[$key]</code>\n    </MixedArrayOffset>\n    <MixedAssignment>\n      <code>$key</code>\n      <code>$key</code>\n    </MixedAssignment>\n    <MixedOperand>\n      <code>$schema[Relation::TARGET]</code>\n    </MixedOperand>\n  </file>\n  <file src=\"src/Relation/ShadowHasMany.php\">\n    <MixedArgument>\n      <code>$item</code>\n      <code>$related</code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$item</code>\n      <code>$related</code>\n      <code>$value</code>\n    </MixedAssignment>\n  </file>\n  <file src=\"src/Relation/Traits/ToOneTrait.php\">\n    <LessSpecificImplementedReturnType>\n      <code>?array</code>\n    </LessSpecificImplementedReturnType>\n    <MixedArgument>\n      <code>$role</code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$data</code>\n    </MixedArgumentTypeCoercion>\n    <MixedAssignment>\n      <code>$role</code>\n      <code><![CDATA[$scope[$this->outerKeys[$i]]]]></code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code>?object</code>\n      <code>object|iterable|null</code>\n    </MixedInferredReturnType>\n    <RedundantCondition>\n      <code><![CDATA[$this->mapperProvider->getMapper($role)?->cast($data)]]></code>\n    </RedundantCondition>\n    <TypeDoesNotContainNull>\n      <code><![CDATA[$this->mapperProvider->getMapper($role)]]></code>\n    </TypeDoesNotContainNull>\n  </file>\n  <file src=\"src/RelationMap.php\">\n    <InvalidClass>\n      <code>OrmInterface</code>\n    </InvalidClass>\n    <MixedArgument>\n      <code>$container</code>\n      <code>$item</code>\n      <code>$outerRelations</code>\n      <code>$parent</code>\n      <code>$parent</code>\n      <code>$relName</code>\n      <code>$relName</code>\n      <code>$relationSchema</code>\n      <code>$relationSchema[Relation::SCHEMA][Relation::THROUGH_ENTITY]</code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$name</code>\n      <code>$name</code>\n      <code>$name</code>\n      <code>$outerRole</code>\n      <code>(array) $relationSchema[Relation::SCHEMA][Relation::OUTER_KEY]</code>\n      <code>(array) $relationSchema[Relation::SCHEMA][Relation::THROUGH_OUTER_KEY]</code>\n    </MixedArgumentTypeCoercion>\n    <MixedArrayAccess>\n      <code>$relationSchema[Relation::SCHEMA][Relation::OUTER_KEY]</code>\n      <code>$relationSchema[Relation::SCHEMA][Relation::THROUGH_ENTITY]</code>\n      <code>$relationSchema[Relation::SCHEMA][Relation::THROUGH_OUTER_KEY]</code>\n    </MixedArrayAccess>\n    <MixedArrayOffset>\n      <code>$relations[$relName]</code>\n    </MixedArrayOffset>\n    <MixedAssignment>\n      <code>$container</code>\n      <code>$innerRelations</code>\n      <code>$item</code>\n      <code>$outerRelations</code>\n      <code>$outerRelations</code>\n      <code>$parent</code>\n      <code>$parent</code>\n      <code>$relName</code>\n      <code>$relName</code>\n      <code>$relSchema</code>\n      <code>$relSchema</code>\n      <code>$relation</code>\n      <code>$relationSchema</code>\n      <code>$relationType</code>\n      <code>$relations</code>\n    </MixedAssignment>\n    <MixedOperand>\n      <code>$relationSchema[Relation::TARGET]</code>\n    </MixedOperand>\n    <MixedPropertyTypeCoercion>\n      <code>$innerRelations</code>\n      <code><![CDATA[$this->slaves]]></code>\n    </MixedPropertyTypeCoercion>\n    <MixedReturnTypeCoercion>\n      <code><![CDATA[$this->dependencies]]></code>\n      <code><![CDATA[array<string, DependencyInterface>]]></code>\n    </MixedReturnTypeCoercion>\n    <UndefinedInterfaceMethod>\n      <code>getInnerRelations</code>\n      <code>getInnerRelations</code>\n      <code>getOuterRelations</code>\n      <code>getOuterRelations</code>\n    </UndefinedInterfaceMethod>\n    <UnusedForeachValue>\n      <code>$relSchema</code>\n      <code>$relSchema</code>\n    </UnusedForeachValue>\n    <UnusedParam>\n      <code>$outerRelations</code>\n    </UnusedParam>\n  </file>\n  <file src=\"src/Schema.php\">\n    <DocblockTypeContradiction>\n      <code>$compareCallback === null</code>\n    </DocblockTypeContradiction>\n    <MixedArgument>\n      <code>$child</code>\n      <code>$container</code>\n      <code>$container</code>\n      <code>$container</code>\n      <code>$inversion</code>\n      <code>$inversion</code>\n      <code>$inversion</code>\n      <code>$item[Relation::SCHEMA][Relation::THROUGH_ENTITY]</code>\n      <code>$item[self::ENTITY]</code>\n      <code>$item[self::PARENT]</code>\n      <code>$item[self::RELATIONS]</code>\n      <code>$relation</code>\n      <code>$target</code>\n      <code>$target</code>\n      <code>$target</code>\n      <code>$targetRelations</code>\n      <code>$targetRelations</code>\n      <code><![CDATA[$this->define($role, self::RELATIONS)]]></code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$key</code>\n      <code>$role</code>\n    </MixedArgumentTypeCoercion>\n    <MixedArrayAccess>\n      <code>$entitySchema[SchemaInterface::RELATIONS]</code>\n      <code>$item[Relation::SCHEMA]</code>\n      <code>$item[Relation::SCHEMA]</code>\n      <code>$item[Relation::SCHEMA]</code>\n      <code>$item[Relation::SCHEMA]</code>\n      <code>$item[Relation::SCHEMA]</code>\n      <code>$item[Relation::SCHEMA]</code>\n      <code>$item[Relation::SCHEMA]</code>\n      <code>$item[Relation::SCHEMA]</code>\n      <code>$item[Relation::SCHEMA][Relation::CASCADE]</code>\n      <code>$item[Relation::SCHEMA][Relation::CASCADE]</code>\n      <code>$item[Relation::SCHEMA][Relation::INNER_KEY]</code>\n      <code>$item[Relation::SCHEMA][Relation::INVERSION]</code>\n      <code>$item[Relation::SCHEMA][Relation::OUTER_KEY]</code>\n      <code>$item[Relation::SCHEMA][Relation::THROUGH_ENTITY]</code>\n      <code>$item[Relation::SCHEMA][Relation::THROUGH_INNER_KEY]</code>\n      <code>$item[Relation::SCHEMA][Relation::THROUGH_OUTER_KEY]</code>\n      <code>$item[Relation::TARGET]</code>\n      <code>$item[Relation::TARGET]</code>\n      <code>$item[Relation::TYPE]</code>\n      <code>$item[self::CHILDREN]</code>\n      <code>$item[self::ENTITY]</code>\n      <code>$item[self::ENTITY]</code>\n      <code>$item[self::ENTITY]</code>\n      <code>$item[self::ENTITY]</code>\n      <code>$item[self::PARENT]</code>\n      <code>$item[self::PARENT]</code>\n      <code>$item[self::PARENT]</code>\n      <code>$item[self::RELATIONS]</code>\n      <code>$item[self::RELATIONS]</code>\n      <code>$item[self::ROLE]</code>\n      <code>$item[self::ROLE]</code>\n      <code>$rel[Relation::SCHEMA]</code>\n      <code>$rel[Relation::SCHEMA]</code>\n      <code>$rel[Relation::SCHEMA]</code>\n      <code>$rel[Relation::SCHEMA][Relation::NULLABLE]</code>\n      <code>$rel[Relation::SCHEMA][Relation::THROUGH_ENTITY]</code>\n      <code>$rel[Relation::TARGET]</code>\n      <code>$rel[Relation::TYPE]</code>\n      <code>$rel[Relation::TYPE]</code>\n      <code>$relation[Relation::SCHEMA]</code>\n      <code>$relation[Relation::SCHEMA][Relation::INVERSION]</code>\n      <code>$relation[Relation::TARGET]</code>\n      <code>$relations[$relation]</code>\n      <code>$schema[Relation::INNER_KEY]</code>\n      <code>$schema[Relation::INNER_KEY]</code>\n      <code>$schema[Relation::OUTER_KEY]</code>\n      <code>$schema[Relation::OUTER_KEY]</code>\n      <code>$schema[Relation::THROUGH_ENTITY]</code>\n      <code>$schema[Relation::THROUGH_WHERE]</code>\n      <code>$schema[Relation::WHERE]</code>\n      <code>$targetRelation[Relation::SCHEMA]</code>\n      <code>$targetRelation[Relation::TARGET]</code>\n      <code>$targetRelations[$inversion][Relation::SCHEMA]</code>\n      <code>$targetRelations[$inversion][Relation::SCHEMA][Relation::INVERSION]</code>\n      <code>$targetSchema[Relation::INNER_KEY]</code>\n      <code>$targetSchema[Relation::INNER_KEY]</code>\n      <code>$targetSchema[Relation::INVERSION]</code>\n      <code>$targetSchema[Relation::OUTER_KEY]</code>\n      <code>$targetSchema[Relation::OUTER_KEY]</code>\n      <code>$targetSchema[Relation::THROUGH_ENTITY]</code>\n      <code>$targetSchema[Relation::THROUGH_WHERE]</code>\n      <code>$targetSchema[Relation::WHERE]</code>\n      <code>$targetSchema[self::RELATIONS]</code>\n      <code><![CDATA[$this->schema[$role][$property]]]></code>\n    </MixedArrayAccess>\n    <MixedArrayAssignment>\n      <code>$item[self::ENTITY]</code>\n      <code>$item[self::PARENT]</code>\n      <code>$item[self::RELATIONS]</code>\n      <code>$rel[Relation::SCHEMA]</code>\n      <code>$rel[Relation::SCHEMA][Relation::THROUGH_ENTITY]</code>\n      <code>$rel[Relation::TARGET]</code>\n      <code>$rel[Relation::TYPE]</code>\n      <code>$result[$role][self::RELATIONS]</code>\n      <code>$result[$role][self::RELATIONS][$container]</code>\n      <code>$result[$role][self::RELATIONS][$container][Relation::SCHEMA]</code>\n      <code>$result[$role][self::RELATIONS][$container][Relation::SCHEMA][Relation::INVERSION]</code>\n      <code>$result[$target][self::RELATIONS]</code>\n      <code>$result[$target][self::RELATIONS]</code>\n      <code>$result[$target][self::RELATIONS][$inversion]</code>\n      <code>$result[$target][self::RELATIONS][$inversion]</code>\n      <code>$result[$target][self::RELATIONS][$inversion][Relation::SCHEMA]</code>\n      <code>$result[$target][self::RELATIONS][$inversion][Relation::SCHEMA]</code>\n      <code>$result[$target][self::RELATIONS][$inversion][Relation::SCHEMA][Relation::INVERSION]</code>\n      <code>$result[$target][self::RELATIONS][$inversion][Relation::SCHEMA][Relation::INVERSION]</code>\n    </MixedArrayAssignment>\n    <MixedArrayOffset>\n      <code>$aliases[$aliases[$child]]</code>\n      <code>$aliases[$child]</code>\n      <code>$aliases[$child]</code>\n      <code>$aliases[$item[self::ENTITY]]</code>\n      <code>$aliases[$parent]</code>\n      <code>$aliases[$target]</code>\n      <code>$aliases[$through]</code>\n      <code>$result[$roleName][$relName]</code>\n      <code>$result[$roleName][$relName]</code>\n      <code>$result[$role]</code>\n      <code>$result[$target]</code>\n      <code>$result[$target]</code>\n      <code>$result[$target]</code>\n      <code><![CDATA[$result[$target][$handshake ?? ($roleName . '.' . $relName . ':' . $target)]]]></code>\n      <code>$result[$target][self::RELATIONS][$inversion]</code>\n      <code><![CDATA[$this->aliases[$found]]]></code>\n      <code><![CDATA[$this->classes[$role]]]></code>\n      <code><![CDATA[$this->subclasses[$item[self::PARENT]]]]></code>\n      <code><![CDATA[$this->subclasses[$item[self::PARENT]][$role]]]></code>\n      <code><![CDATA[$this->subclasses[$role]]]></code>\n      <code><![CDATA[$this->subclasses[$role]]]></code>\n    </MixedArrayOffset>\n    <MixedArrayTypeCoercion>\n      <code>$aliases[$parent]</code>\n      <code><![CDATA[$this->subclasses[$role]]]></code>\n      <code><![CDATA[$this->subclasses[$role]]]></code>\n    </MixedArrayTypeCoercion>\n    <MixedAssignment>\n      <code>$aliases[$aliases[$child]]</code>\n      <code>$aliases[$child]</code>\n      <code>$aliases[$item[self::ENTITY]]</code>\n      <code>$aliases[$key]</code>\n      <code>$child</code>\n      <code>$container</code>\n      <code>$entitySchema</code>\n      <code>$found</code>\n      <code>$found</code>\n      <code>$handshake</code>\n      <code>$item</code>\n      <code>$item</code>\n      <code>$item</code>\n      <code>$item</code>\n      <code>$item</code>\n      <code>$item</code>\n      <code>$item[self::PARENT]</code>\n      <code>$nullable</code>\n      <code>$nullable</code>\n      <code>$parent</code>\n      <code>$parent</code>\n      <code>$rel</code>\n      <code>$relName</code>\n      <code>$rel[Relation::SCHEMA][Relation::THROUGH_ENTITY]</code>\n      <code>$rel[Relation::TARGET]</code>\n      <code>$relation</code>\n      <code>$relations</code>\n      <code>$result[$roleName][$relName]</code>\n      <code>$result[$role]</code>\n      <code>$result[$target][self::RELATIONS][$inversion][Relation::SCHEMA][Relation::INVERSION]</code>\n      <code>$role</code>\n      <code>$role</code>\n      <code>$role</code>\n      <code>$role</code>\n      <code>$schema</code>\n      <code>$schema</code>\n      <code><![CDATA[$schema->aliases]]></code>\n      <code><![CDATA[$schema->schema]]></code>\n      <code>$target</code>\n      <code>$target</code>\n      <code>$target</code>\n      <code>$target</code>\n      <code>$targetHandshake</code>\n      <code>$targetRelation</code>\n      <code>$targetRelations</code>\n      <code>$targetSchema</code>\n      <code>$targetSchema</code>\n      <code>$targetSchema</code>\n      <code>$targetSchema</code>\n      <code>$through</code>\n      <code>$through</code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code>?string</code>\n      <code>array</code>\n      <code>array</code>\n      <code>null|class-string</code>\n    </MixedInferredReturnType>\n    <MixedOperand>\n      <code>$relName</code>\n      <code>$target</code>\n    </MixedOperand>\n    <MixedPropertyTypeCoercion>\n      <code><![CDATA[$this->classes]]></code>\n      <code><![CDATA[$this->subclasses]]></code>\n      <code><![CDATA[$this->subclasses]]></code>\n      <code><![CDATA[$this->subclasses]]></code>\n      <code><![CDATA[$this->subclasses]]></code>\n    </MixedPropertyTypeCoercion>\n    <MixedReturnStatement>\n      <code>$relations[$relation]</code>\n      <code>$role</code>\n      <code><![CDATA[$this->classes[$rr]\n            ?? $this->schema[$rr][self::ENTITY]\n            ?? throw new SchemaException(\"Undefined schema `{$role}`, not found.\")]]></code>\n      <code><![CDATA[$this->classes[$rr]\n            ?? $this->schema[$rr][self::ENTITY]\n            ?? throw new SchemaException(\"Undefined schema `{$role}`, not found.\")]]></code>\n      <code><![CDATA[$this->schema[$role][SchemaInterface::RELATIONS] ?? []]]></code>\n      <code><![CDATA[$this->schema[$role][SchemaInterface::RELATIONS] ?? []]]></code>\n    </MixedReturnStatement>\n    <MixedReturnTypeCoercion>\n      <code>$targetContainer</code>\n      <code><![CDATA[$this->subclasses[$parent] ?? []]]></code>\n      <code>?string</code>\n      <code>array</code>\n    </MixedReturnTypeCoercion>\n    <UnsupportedReferenceUsage>\n      <code><![CDATA[$this->subclasses[$item[self::PARENT]][$role] = &$this->subclasses[$role]]]></code>\n    </UnsupportedReferenceUsage>\n    <UnusedParam>\n      <code>$aliases</code>\n    </UnusedParam>\n    <UnusedVariable>\n      <code>$nullable</code>\n    </UnusedVariable>\n  </file>\n  <file src=\"src/Select.php\">\n    <ArgumentTypeCoercion>\n      <code>$ids</code>\n      <code><![CDATA[$this->loader->getTarget()]]></code>\n      <code><![CDATA[$this->loader->getTarget()]]></code>\n    </ArgumentTypeCoercion>\n    <InvalidReturnStatement>\n      <code><![CDATA[$this->entityFactory->make($this->loader->getTarget(), $data[0], Node::MANAGED, typecast: true)]]></code>\n      <code><![CDATA[\\iterator_to_array($this->getIterator(), false)]]></code>\n    </InvalidReturnStatement>\n    <InvalidReturnType>\n      <code>TEntity|null</code>\n      <code><![CDATA[list<TEntity>]]></code>\n    </InvalidReturnType>\n    <InvalidTemplateParam>\n      <code><![CDATA[Iterator<TEntity>]]></code>\n    </InvalidTemplateParam>\n    <MissingTemplateParam>\n      <code>\\IteratorAggregate</code>\n    </MissingTemplateParam>\n    <MixedArgument>\n      <code>$data[0]</code>\n      <code><![CDATA[$node->getResult()]]></code>\n      <code>$subOption</code>\n      <code>$subOption + $options</code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$name</code>\n      <code>$name</code>\n    </MixedArgumentTypeCoercion>\n    <MixedArrayTypeCoercion>\n      <code>$pk[$key]</code>\n    </MixedArrayTypeCoercion>\n    <MixedAssignment>\n      <code>$prepared[$index][$key]</code>\n      <code>$result</code>\n      <code>$subOption</code>\n      <code>$subOption</code>\n      <code>$value</code>\n      <code>$values</code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code><![CDATA[static<TEntity>]]></code>\n    </MixedInferredReturnType>\n    <MixedOperand>\n      <code>$subOption</code>\n    </MixedOperand>\n    <MixedReturnStatement>\n      <code><![CDATA[\\count($ids) > 1\n            ? $this->__call('where', [$pk, new Parameter($ids)])\n            : $this->__call('where', [$pk, \\current($ids)])]]></code>\n    </MixedReturnStatement>\n    <MixedReturnTypeCoercion>\n      <code><![CDATA[$node->getResult()]]></code>\n      <code><![CDATA[Iterator::createWithServices(\n            $this->heap,\n            $this->schema,\n            $this->entityFactory,\n            $this->loader->getTarget(),\n            $node->getResult(),\n            $findInHeap,\n            typecast: true,\n        )]]></code>\n      <code><![CDATA[Iterator<TEntity>]]></code>\n      <code><![CDATA[\\array_map([$mapper, 'cast'], $node->getResult())]]></code>\n      <code><![CDATA[array<array-key, array<string, mixed>>]]></code>\n    </MixedReturnTypeCoercion>\n    <PossiblyInvalidArgument>\n      <code><![CDATA[$node->getResult()]]></code>\n    </PossiblyInvalidArgument>\n  </file>\n  <file src=\"src/Select/AbstractLoader.php\">\n    <MixedArgument>\n      <code>$alias</code>\n      <code><![CDATA[$options['as']]]></code>\n      <code>$query</code>\n      <code>$query</code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$relation</code>\n      <code>$relation</code>\n      <code>$relation</code>\n    </MixedArgumentTypeCoercion>\n    <MixedArrayAccess>\n      <code>$schema[Relation::LOAD]</code>\n    </MixedArrayAccess>\n    <MixedArrayOffset>\n      <code>$loaders[$alias]</code>\n      <code>$loaders[$alias]</code>\n      <code>$loaders[$alias]</code>\n    </MixedArrayOffset>\n    <MixedArrayTypeCoercion>\n      <code>$loaders[$alias]</code>\n    </MixedArrayTypeCoercion>\n    <MixedAssignment>\n      <code>$alias</code>\n      <code><![CDATA[$options['load']]]></code>\n      <code>$parent</code>\n      <code>$query</code>\n      <code>$relation</code>\n      <code>$relations</code>\n      <code>$schema</code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code>SelectQuery</code>\n    </MixedInferredReturnType>\n    <MixedReturnStatement>\n      <code>$query</code>\n      <code>$query</code>\n    </MixedReturnStatement>\n    <PossiblyInvalidArgument>\n      <code>$relation</code>\n    </PossiblyInvalidArgument>\n    <PossiblyInvalidCast>\n      <code>$relation</code>\n    </PossiblyInvalidCast>\n    <TooManyArguments>\n      <code>loadChain</code>\n      <code>loadRelation</code>\n    </TooManyArguments>\n    <UndefinedInterfaceMethod>\n      <code>configureSubQuery</code>\n    </UndefinedInterfaceMethod>\n    <UndefinedVariable>\n      <code>$alias</code>\n    </UndefinedVariable>\n    <UnsupportedPropertyReferenceUsage>\n      <code><![CDATA[$loaders = &$this->join]]></code>\n      <code><![CDATA[$loaders = &$this->load]]></code>\n    </UnsupportedPropertyReferenceUsage>\n    <UnusedForeachValue>\n      <code>$children</code>\n    </UnusedForeachValue>\n  </file>\n  <file src=\"src/Select/JoinableLoader.php\">\n    <LessSpecificReturnStatement>\n      <code>$loader</code>\n    </LessSpecificReturnStatement>\n    <MixedArgument>\n      <code>$relation</code>\n      <code>$row</code>\n      <code><![CDATA[$this->define(SchemaInterface::COLUMNS)]]></code>\n      <code><![CDATA[$this->factory->make($loader->options['scope'])]]></code>\n      <code><![CDATA[$this->options['minify']]]></code>\n      <code><![CDATA[$this->options['minify']]]></code>\n      <code><![CDATA[$this->schema[$key]]]></code>\n      <code><![CDATA[$this->schema[$key]]]></code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$relation</code>\n      <code>$row</code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code>int</code>\n      <code>string</code>\n      <code>string</code>\n    </MixedInferredReturnType>\n    <MixedReturnStatement>\n      <code><![CDATA[$this->options['as']]]></code>\n      <code><![CDATA[$this->options['as']]]></code>\n      <code><![CDATA[$this->options['method']]]></code>\n      <code><![CDATA[$this->options['using']]]></code>\n    </MixedReturnStatement>\n    <MoreSpecificReturnType>\n      <code>static</code>\n    </MoreSpecificReturnType>\n    <PossiblyNullOperand>\n      <code><![CDATA[$this->fieldAlias($this->schema[$key])]]></code>\n      <code><![CDATA[$this->parent->fieldAlias($this->schema[$key])]]></code>\n    </PossiblyNullOperand>\n    <PossiblyNullReference>\n      <code>getAlias</code>\n    </PossiblyNullReference>\n  </file>\n  <file src=\"src/Select/Loader/BelongsToLoader.php\">\n    <MixedArgument>\n      <code><![CDATA[$this->options['where'] ?? $this->schema[Relation::WHERE] ?? []]]></code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code><![CDATA[$this->columnNames()]]></code>\n      <code><![CDATA[(array) $this->define(SchemaInterface::PRIMARY_KEY)]]></code>\n      <code><![CDATA[(array) $this->schema[Relation::INNER_KEY]]]></code>\n      <code><![CDATA[(array) $this->schema[Relation::OUTER_KEY]]]></code>\n    </MixedArgumentTypeCoercion>\n  </file>\n  <file src=\"src/Select/Loader/EmbeddedLoader.php\">\n    <MixedArgument>\n      <code><![CDATA[$this->define(SchemaInterface::COLUMNS)]]></code>\n      <code><![CDATA[$this->options['minify'] ?? true]]></code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code><![CDATA[$this->columnNames()]]></code>\n      <code><![CDATA[(array) $this->ormSchema->define($this->parent->getTarget(), SchemaInterface::PRIMARY_KEY)]]></code>\n    </MixedArgumentTypeCoercion>\n    <MixedInferredReturnType>\n      <code>bool</code>\n    </MixedInferredReturnType>\n    <MixedReturnStatement>\n      <code><![CDATA[$this->options['load'] ?? false]]></code>\n      <code><![CDATA[$this->options['load'] ?? false]]></code>\n    </MixedReturnStatement>\n    <PossiblyNullReference>\n      <code>getAlias</code>\n      <code>getTarget</code>\n      <code>isLoaded</code>\n    </PossiblyNullReference>\n    <UndefinedInterfaceMethod>\n      <code>isLoaded</code>\n    </UndefinedInterfaceMethod>\n  </file>\n  <file src=\"src/Select/Loader/HasManyLoader.php\">\n    <MixedArgument>\n      <code><![CDATA[$this->options['orderBy'] ?? $this->schema[Relation::ORDER_BY] ?? []]]></code>\n      <code><![CDATA[$this->options['where'] ?? $this->schema[Relation::WHERE] ?? []]]></code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code><![CDATA[$this->columnNames()]]></code>\n      <code><![CDATA[(array) $this->define(SchemaInterface::PRIMARY_KEY)]]></code>\n      <code><![CDATA[(array) $this->schema[Relation::INNER_KEY]]]></code>\n      <code><![CDATA[(array) $this->schema[Relation::OUTER_KEY]]]></code>\n    </MixedArgumentTypeCoercion>\n  </file>\n  <file src=\"src/Select/Loader/HasOneLoader.php\">\n    <MixedArgument>\n      <code><![CDATA[$this->options['where'] ?? $this->schema[Relation::WHERE] ?? []]]></code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code><![CDATA[$this->columnNames()]]></code>\n      <code><![CDATA[(array) $this->define(SchemaInterface::PRIMARY_KEY)]]></code>\n      <code><![CDATA[(array) $this->schema[Relation::INNER_KEY]]]></code>\n      <code><![CDATA[(array) $this->schema[Relation::OUTER_KEY]]]></code>\n    </MixedArgumentTypeCoercion>\n  </file>\n  <file src=\"src/Select/Loader/ManyToManyLoader.php\">\n    <LessSpecificReturnStatement>\n      <code>$loader</code>\n    </LessSpecificReturnStatement>\n    <MixedArgument>\n      <code>$key</code>\n      <code>$key</code>\n      <code>$key</code>\n      <code>$key</code>\n      <code>$outerKeyList[$i]</code>\n      <code>$outerKeys[0]</code>\n      <code>$parentKeys[$i]</code>\n      <code>$schema[Relation::THROUGH_ENTITY]</code>\n      <code>$set</code>\n      <code><![CDATA[$this->options['orderBy'] ?? $this->schema[Relation::ORDER_BY] ?? []]]></code>\n      <code><![CDATA[$this->options['where'] ?? $this->schema[Relation::WHERE] ?? []]]></code>\n      <code>$throughOuterKeys[$i]</code>\n      <code><![CDATA[[\n                'load' => $loader->isLoaded(),\n                'method' => $options['method'] ?? self::JOIN,\n            ] + ($options['pivot'] ?? [])]]></code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$relation</code>\n      <code><![CDATA[$this->columnNames()]]></code>\n      <code><![CDATA[(array) $this->define(SchemaInterface::PRIMARY_KEY)]]></code>\n      <code><![CDATA[(array) $this->schema[Relation::OUTER_KEY]]]></code>\n      <code><![CDATA[(array) $this->schema[Relation::THROUGH_OUTER_KEY]]]></code>\n    </MixedArgumentTypeCoercion>\n    <MixedAssignment>\n      <code>$key</code>\n      <code>$key</code>\n      <code>$key</code>\n      <code>$key</code>\n      <code>$set</code>\n    </MixedAssignment>\n    <MixedOperand>\n      <code><![CDATA[$options['pivot'] ?? []]]></code>\n    </MixedOperand>\n    <MoreSpecificReturnType>\n      <code>static</code>\n    </MoreSpecificReturnType>\n    <PossiblyNullOperand>\n      <code><![CDATA[$this->fieldAlias($key)]]></code>\n      <code><![CDATA[$this->fieldAlias($outerKeyList[$i])]]></code>\n      <code><![CDATA[$this->parent->fieldAlias($parentKeys[$i])]]></code>\n      <code><![CDATA[$this->pivot->fieldAlias($key)]]></code>\n      <code><![CDATA[$this->pivot->fieldAlias($key)]]></code>\n      <code><![CDATA[$this->pivot->fieldAlias($key)]]></code>\n      <code><![CDATA[$this->pivot->fieldAlias($throughOuterKeys[$i])]]></code>\n    </PossiblyNullOperand>\n    <PossiblyNullReference>\n      <code>getAlias</code>\n    </PossiblyNullReference>\n  </file>\n  <file src=\"src/Select/Loader/Morphed/MorphedHasManyLoader.php\">\n    <InvalidArrayOffset>\n      <code><![CDATA[[$this->localKey(Relation::MORPH_KEY) => $this->parent->getTarget()]]]></code>\n    </InvalidArrayOffset>\n    <PossiblyNullReference>\n      <code>getTarget</code>\n    </PossiblyNullReference>\n  </file>\n  <file src=\"src/Select/Loader/Morphed/MorphedHasOneLoader.php\">\n    <InvalidArrayOffset>\n      <code><![CDATA[[$this->localKey(Relation::MORPH_KEY) => $this->parent->getTarget()]]]></code>\n    </InvalidArrayOffset>\n    <PossiblyNullReference>\n      <code>getTarget</code>\n    </PossiblyNullReference>\n  </file>\n  <file src=\"src/Select/Loader/ParentLoader.php\">\n    <MixedArgumentTypeCoercion>\n      <code><![CDATA[$this->columnNames()]]></code>\n      <code><![CDATA[(array) $this->define(SchemaInterface::PRIMARY_KEY)]]></code>\n      <code><![CDATA[(array) $this->schema[Relation::INNER_KEY]]]></code>\n      <code><![CDATA[(array) $this->schema[Relation::OUTER_KEY]]]></code>\n    </MixedArgumentTypeCoercion>\n  </file>\n  <file src=\"src/Select/Loader/PivotLoader.php\">\n    <MixedArgument>\n      <code><![CDATA[$this->options['where'] ?? $this->schema[Relation::THROUGH_WHERE] ?? []]]></code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code><![CDATA[$this->columnNames()]]></code>\n      <code><![CDATA[(array) $this->define(SchemaInterface::PRIMARY_KEY)]]></code>\n      <code><![CDATA[(array) $this->schema[Relation::INNER_KEY]]]></code>\n      <code><![CDATA[(array) $this->schema[Relation::THROUGH_INNER_KEY]]]></code>\n    </MixedArgumentTypeCoercion>\n    <MixedInferredReturnType>\n      <code>string</code>\n    </MixedInferredReturnType>\n    <MixedReturnStatement>\n      <code><![CDATA[$this->define(SchemaInterface::TABLE)]]></code>\n    </MixedReturnStatement>\n  </file>\n  <file src=\"src/Select/Loader/SubQueryLoader.php\">\n    <MixedArgument>\n      <code>$alias</code>\n      <code>$column</code>\n      <code>$key</code>\n      <code>$parentKeys[$i]</code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$alias</code>\n      <code>$column</code>\n      <code>$key</code>\n    </MixedAssignment>\n    <MixedOperand>\n      <code>$alias</code>\n      <code><![CDATA[$options['as']]]></code>\n    </MixedOperand>\n    <PossiblyNullArrayOffset>\n      <code>$aliases</code>\n    </PossiblyNullArrayOffset>\n    <PossiblyNullOperand>\n      <code><![CDATA[$this->parent->fieldAlias($parentKeys[$i])]]></code>\n    </PossiblyNullOperand>\n    <PossiblyNullReference>\n      <code>getAlias</code>\n    </PossiblyNullReference>\n  </file>\n  <file src=\"src/Select/Loader/SubclassLoader.php\">\n    <MixedArgumentTypeCoercion>\n      <code><![CDATA[$this->columnNames()]]></code>\n      <code><![CDATA[(array) $this->define(SchemaInterface::PRIMARY_KEY)]]></code>\n      <code><![CDATA[(array) $this->schema[Relation::INNER_KEY]]]></code>\n      <code><![CDATA[(array) $this->schema[Relation::OUTER_KEY]]]></code>\n    </MixedArgumentTypeCoercion>\n  </file>\n  <file src=\"src/Select/QueryBuilder.php\">\n    <MissingClosureParamType>\n      <code>$q</code>\n      <code>$q</code>\n    </MissingClosureParamType>\n    <MixedArgument>\n      <code>$q</code>\n      <code>$q</code>\n    </MixedArgument>\n    <MixedArrayOffset>\n      <code>$result[$k]</code>\n    </MixedArrayOffset>\n    <MixedAssignment>\n      <code>$current</code>\n      <code>$result</code>\n      <code>$result[$k]</code>\n      <code>$v</code>\n    </MixedAssignment>\n    <PossiblyFalseArgument>\n      <code>$split</code>\n    </PossiblyFalseArgument>\n    <PossiblyFalseOperand>\n      <code>$split</code>\n    </PossiblyFalseOperand>\n    <PossiblyUndefinedMethod>\n      <code>getParentLoader</code>\n    </PossiblyUndefinedMethod>\n    <RiskyTruthyFalsyComparison>\n      <code><![CDATA[\\strpos($name, '(')]]></code>\n    </RiskyTruthyFalsyComparison>\n  </file>\n  <file src=\"src/Select/Repository.php\">\n    <MissingParamType>\n      <code>$id</code>\n    </MissingParamType>\n    <MixedArgument>\n      <code>$id</code>\n    </MixedArgument>\n  </file>\n  <file src=\"src/Select/RootLoader.php\">\n    <ImpureMethodCall>\n      <code><![CDATA[foreach ($this->getEagerLoaders() as $relation) {\n                $this->loadRelation($relation, [], false, true);\n            }]]></code>\n    </ImpureMethodCall>\n    <LessSpecificReturnStatement>\n      <code><![CDATA[(array) $this->define(SchemaInterface::PRIMARY_KEY)]]></code>\n    </LessSpecificReturnStatement>\n    <MixedArgument>\n      <code>$key</code>\n      <code>$pk</code>\n      <code>$relation</code>\n      <code>$row</code>\n      <code><![CDATA[$this->define(SchemaInterface::COLUMNS)]]></code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$relation</code>\n      <code><![CDATA[$this->columnNames()]]></code>\n      <code><![CDATA[(array) $this->define(SchemaInterface::PRIMARY_KEY)]]></code>\n    </MixedArgumentTypeCoercion>\n    <MixedAssignment>\n      <code>$key</code>\n      <code>$pk</code>\n      <code>$relation</code>\n      <code>$row</code>\n    </MixedAssignment>\n    <MoreSpecificReturnType>\n      <code><![CDATA[list<non-empty-string>]]></code>\n    </MoreSpecificReturnType>\n    <PossiblyNullOperand>\n      <code><![CDATA[$this->fieldAlias($key)]]></code>\n      <code><![CDATA[$this->fieldAlias($pk)]]></code>\n    </PossiblyNullOperand>\n  </file>\n  <file src=\"src/Select/Traits/AliasTrait.php\">\n    <MixedInferredReturnType>\n      <code>string</code>\n    </MixedInferredReturnType>\n  </file>\n  <file src=\"src/Select/Traits/ChainTrait.php\">\n    <PossiblyFalseArgument>\n      <code>$position</code>\n    </PossiblyFalseArgument>\n    <PossiblyFalseOperand>\n      <code>$position</code>\n    </PossiblyFalseOperand>\n  </file>\n  <file src=\"src/Select/Traits/ColumnsTrait.php\">\n    <MoreSpecificReturnType>\n      <code><![CDATA[array<non-empty-string, non-empty-string>]]></code>\n    </MoreSpecificReturnType>\n    <PossiblyInvalidArrayOffset>\n      <code><![CDATA[$this->columns[$p[0]]]]></code>\n    </PossiblyInvalidArrayOffset>\n  </file>\n  <file src=\"src/Select/Traits/JoinOneTableTrait.php\">\n    <MixedArgument>\n      <code>$key</code>\n      <code>$key</code>\n      <code>$key</code>\n      <code>$key</code>\n      <code>$key</code>\n      <code>$key</code>\n      <code>$key</code>\n      <code>$key</code>\n      <code>$key</code>\n      <code>$key</code>\n      <code>$outerKeys[0]</code>\n      <code>$parentKeys[$i]</code>\n      <code>$set</code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$key</code>\n      <code>$key</code>\n      <code>$set</code>\n    </MixedAssignment>\n    <PossiblyNullOperand>\n      <code><![CDATA[$this->fieldAlias($key)]]></code>\n      <code><![CDATA[$this->fieldAlias($key)]]></code>\n      <code><![CDATA[$this->parent->fieldAlias($parentKeys[$i])]]></code>\n    </PossiblyNullOperand>\n    <PossiblyNullReference>\n      <code>getAlias</code>\n    </PossiblyNullReference>\n  </file>\n  <file src=\"src/Select/Traits/OrderByTrait.php\">\n    <InvalidNullableReturnType>\n      <code>SelectQuery</code>\n    </InvalidNullableReturnType>\n  </file>\n  <file src=\"src/Select/Traits/WhereTrait.php\">\n    <InvalidNullableReturnType>\n      <code>SelectQuery</code>\n    </InvalidNullableReturnType>\n  </file>\n  <file src=\"src/Service/Implementation/EntityFactory.php\">\n    <ArgumentTypeCoercion>\n      <code>$rRole</code>\n    </ArgumentTypeCoercion>\n    <MixedArgument>\n      <code>$role</code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$castedData</code>\n    </MixedArgumentTypeCoercion>\n    <MixedArrayOffset>\n      <code>$data[$key]</code>\n      <code>$data[$pk]</code>\n      <code>$ids[$key]</code>\n      <code><![CDATA[[$pk => $data[$pk]]]]></code>\n    </MixedArrayOffset>\n    <MixedAssignment>\n      <code>$ids[$key]</code>\n      <code>$key</code>\n      <code>$pk</code>\n      <code>$role</code>\n    </MixedAssignment>\n    <NoValue>\n      <code><![CDATA[return $mapper->hydrate($e, $relMap->init($this, $node, $castedData));]]></code>\n      <code><![CDATA[return $mapper->hydrate($e, $relMap->init($this, $node, $castedData));]]></code>\n    </NoValue>\n    <PossiblyInvalidArgument>\n      <code>$role</code>\n      <code>$role</code>\n    </PossiblyInvalidArgument>\n    <PossiblyInvalidCast>\n      <code>$role</code>\n    </PossiblyInvalidCast>\n  </file>\n  <file src=\"src/Service/Implementation/EntityProvider.php\">\n    <ArgumentTypeCoercion>\n      <code>$role</code>\n    </ArgumentTypeCoercion>\n  </file>\n  <file src=\"src/Service/Implementation/IndexProvider.php\">\n    <MixedArgument>\n      <code>$keys</code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$keys</code>\n      <code>$pk</code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code>array</code>\n    </MixedInferredReturnType>\n    <MixedReturnStatement>\n      <code><![CDATA[$this->indexes[$entity]]]></code>\n    </MixedReturnStatement>\n  </file>\n  <file src=\"src/Service/Implementation/MapperProvider.php\">\n    <MixedArgument>\n      <code>$role</code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$role</code>\n    </MixedAssignment>\n  </file>\n  <file src=\"src/Service/Implementation/RelationProvider.php\">\n    <MixedArgument>\n      <code>$role</code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$role</code>\n    </MixedAssignment>\n    <PropertyTypeCoercion>\n      <code><![CDATA[$this->relMaps]]></code>\n    </PropertyTypeCoercion>\n  </file>\n  <file src=\"src/Service/Implementation/RepositoryProvider.php\">\n    <MixedArgument>\n      <code>$role</code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code>$select</code>\n    </MixedArgumentTypeCoercion>\n    <MixedAssignment>\n      <code>$role</code>\n    </MixedAssignment>\n  </file>\n  <file src=\"src/Service/Implementation/SourceProvider.php\">\n    <MoreSpecificImplementedParamType>\n      <code>$entity</code>\n    </MoreSpecificImplementedParamType>\n  </file>\n  <file src=\"src/Transaction.php\">\n    <DeprecatedInterface>\n      <code>Transaction</code>\n    </DeprecatedInterface>\n    <InvalidThrow>\n      <code><![CDATA[throw $uow->getLastError();]]></code>\n    </InvalidThrow>\n  </file>\n  <file src=\"src/Transaction/CommandGenerator.php\">\n    <ArgumentTypeCoercion>\n      <code>$commands</code>\n      <code>$parent</code>\n    </ArgumentTypeCoercion>\n    <MixedArgument>\n      <code>$parentKey[$i]</code>\n      <code>$pk</code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$parent</code>\n      <code>$parent</code>\n      <code>$pk</code>\n    </MixedAssignment>\n  </file>\n  <file src=\"src/Transaction/Pool.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA[$node?->getRole() ?? $entity]]></code>\n    </ArgumentTypeCoercion>\n    <MixedArgument>\n      <code>$item</code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$item</code>\n    </MixedAssignment>\n    <PropertyNotSetInConstructor>\n      <code>$priorityStorage</code>\n      <code>$unprocessed</code>\n    </PropertyNotSetInConstructor>\n    <UnnecessaryVarAnnotation>\n      <code>Node|null</code>\n      <code>object</code>\n      <code>object</code>\n      <code>object</code>\n    </UnnecessaryVarAnnotation>\n  </file>\n  <file src=\"src/Transaction/Runner.php\">\n    <MixedArgument>\n      <code>$cmd</code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code>$cmd</code>\n    </MixedAssignment>\n    <PossiblyNullReference>\n      <code>getDriver</code>\n    </PossiblyNullReference>\n    <UnnecessaryVarAnnotation>\n      <code>DriverInterface</code>\n      <code>DriverInterface</code>\n    </UnnecessaryVarAnnotation>\n  </file>\n  <file src=\"src/Transaction/Tuple.php\">\n    <PropertyNotSetInConstructor>\n      <code>$mapper</code>\n      <code>$node</code>\n      <code>$state</code>\n    </PropertyNotSetInConstructor>\n  </file>\n  <file src=\"src/Transaction/TupleStorage.php\">\n    <MissingConstructor>\n      <code>$iterators</code>\n    </MissingConstructor>\n    <MixedArrayAccess>\n      <code>$collection[$id]</code>\n    </MixedArrayAccess>\n    <MixedArrayAssignment>\n      <code><![CDATA[$collection[\\spl_object_id($tuple->entity)]]]></code>\n    </MixedArrayAssignment>\n    <MixedAssignment>\n      <code>$collection</code>\n      <code>$collection</code>\n    </MixedAssignment>\n    <UnsupportedReferenceUsage>\n      <code><![CDATA[$this->iterators[\\spl_object_id($cleaner)] = &$iterator]]></code>\n    </UnsupportedReferenceUsage>\n  </file>\n  <file src=\"src/Transaction/UnitOfWork.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA[$command instanceof Sequence ? $command->getPrimaryCommand() : $command]]></code>\n    </ArgumentTypeCoercion>\n    <LessSpecificReturnStatement>\n      <code><![CDATA[$this->run()]]></code>\n    </LessSpecificReturnStatement>\n    <MixedArgumentTypeCoercion>\n      <code>$name</code>\n    </MixedArgumentTypeCoercion>\n    <MoreSpecificReturnType>\n      <code>static</code>\n    </MoreSpecificReturnType>\n    <PossiblyNullReference>\n      <code>run</code>\n    </PossiblyNullReference>\n    <UnnecessaryVarAnnotation>\n      <code>Tuple</code>\n    </UnnecessaryVarAnnotation>\n  </file>\n</files>\n"
        },
        {
          "name": "psalm.xml",
          "type": "blob",
          "size": 0.9921875,
          "content": "<?xml version=\"1.0\"?>\n<psalm\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"https://getpsalm.org/schema/config\"\n    xsi:schemaLocation=\"https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd\"\n    errorBaseline=\"psalm-baseline.xml\"\n    errorLevel=\"1\"\n>\n    <projectFiles>\n        <directory name=\"src\" />\n        <ignoreFiles>\n            <directory name=\"vendor\" />\n        </ignoreFiles>\n    </projectFiles>\n    <issueHandlers>\n        <UndefinedAttributeClass>\n            <errorLevel type=\"suppress\">\n                <referencedClass name=\"JetBrains\\PhpStorm\\ExpectedValues\" />\n                <referencedClass name=\"JetBrains\\PhpStorm\\Deprecated\" />\n                <referencedClass name=\"JetBrains\\PhpStorm\\Pure\" />\n            </errorLevel>\n        </UndefinedAttributeClass>\n        <UndefinedClass>\n            <errorLevel type=\"suppress\">\n                <referencedClass name=\"BackedEnum\" />\n            </errorLevel>\n        </UndefinedClass>\n    </issueHandlers>\n</psalm>\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}