{
  "metadata": {
    "timestamp": 1736711965289,
    "page": 420,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "leafo/lessphp",
      "stars": 2195,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0693359375,
          "content": "*.swp\n*~\n/*.less\n/*.css\ntests/bootstrap\ntests/tmp\nvendor\ncomposer.lock\n"
        },
        {
          "name": ".phpcs.xml",
          "type": "blob",
          "size": 2.4951171875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ruleset>\n\t<rule ref=\"PSR2\">\n\t\t<exclude name=\"Generic.ControlStructures.InlineControlStructure.NotAllowed\" />\n\t\t<exclude name=\"Generic.Files.LineLength.TooLong\" />\n\t\t<exclude name=\"Generic.WhiteSpace.ScopeIndent.Incorrect\" />\n\t\t<exclude name=\"Generic.WhiteSpace.ScopeIndent.IncorrectExact\" />\n\t\t<exclude name=\"PSR1.Classes.ClassDeclaration.MissingNamespace\" />\n\t\t<exclude name=\"PSR1.Classes.ClassDeclaration.MultipleClasses\" />\n\t\t<exclude name=\"PSR1.Files.SideEffects.FoundWithSymbols\" />\n\t\t<exclude name=\"PSR1.Methods.CamelCapsMethodName.NotCamelCaps\" />\n\t\t<exclude name=\"PSR2.Classes.ClassDeclaration.CloseBraceAfterBody\" />\n\t\t<exclude name=\"PSR2.Classes.ClassDeclaration.OpenBraceNewLine\" />\n\t\t<exclude name=\"PSR2.ControlStructures.ControlStructureSpacing.SpaceBeforeCloseBrace\" />\n\t\t<exclude name=\"PSR2.ControlStructures.ControlStructureSpacing.SpacingAfterOpenBrace\" />\n\t\t<exclude name=\"PSR2.ControlStructures.SwitchDeclaration.BodyOnNextLineCASE\" />\n\t\t<exclude name=\"PSR2.ControlStructures.SwitchDeclaration.BreakIndent\" />\n\t\t<exclude name=\"PSR2.ControlStructures.SwitchDeclaration.BreakNotNewLine\" />\n\t\t<exclude name=\"PSR2.ControlStructures.SwitchDeclaration.TerminatingComment\" />\n\t\t<exclude name=\"PSR2.Methods.FunctionCallSignature.CloseBracketLine\" />\n\t\t<exclude name=\"PSR2.Methods.FunctionCallSignature.ContentAfterOpenBracket\" />\n\t\t<exclude name=\"PSR2.Methods.FunctionCallSignature.Indent\" />\n\t\t<exclude name=\"PSR2.Methods.FunctionCallSignature.MultipleArguments\" />\n\t\t<exclude name=\"PSR2.Methods.FunctionCallSignature.SpaceBeforeCloseBracket\" />\n\t\t<exclude name=\"PSR2.Methods.FunctionClosingBrace.SpacingBeforeClose\" />\n\t\t<exclude name=\"Squiz.Classes.ValidClassName.NotCamelCaps\" />\n\t\t<exclude name=\"Squiz.ControlStructures.ControlSignature.SpaceAfterCloseBrace\" />\n\t\t<exclude name=\"Squiz.Functions.FunctionDeclarationArgumentSpacing.SpaceAfterDefault\" />\n\t\t<exclude name=\"Squiz.Functions.FunctionDeclarationArgumentSpacing.SpaceBeforeEquals\" />\n\t\t<exclude name=\"Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine\" />\n\t\t<exclude name=\"Squiz.Functions.MultiLineFunctionDeclaration.ContentAfterBrace\" />\n\t\t<exclude name=\"Squiz.Functions.MultiLineFunctionDeclaration.SpaceAfterFunction\" />\n\t\t<exclude name=\"Squiz.WhiteSpace.ControlStructureSpacing.SpacingBeforeClose\" />\n\t\t<exclude name=\"Squiz.WhiteSpace.ScopeClosingBrace.ContentBefore\" />\n\t</rule>\n\t<file>.</file>\n\t<arg name=\"encoding\" value=\"UTF-8\"/>\n\t<arg name=\"extensions\" value=\"php\"/>\n\t<exclude-pattern>vendor</exclude-pattern>\n</ruleset>\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.181640625,
          "content": "language: php\n\nphp:\n  - 5.6\n  - hhvm\n  - 7.0\n  - 7.1\n  - 7.2\n  - 7.3\n\nsudo: false\n\ninstall:\n  - travis_retry composer install --no-interaction --prefer-source\n\nscript:\n  - composer test\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 32.8525390625,
          "content": "For ease of distribution, lessphp is under a dual license.\nYou are free to pick which one suits your needs.\n\n\n\n\nMIT LICENSE\n\n\n\n\nCopyright (c) 2014 Leaf Corcoran, http://leafo.net/lessphp\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\nGPL VERSION 3\n\n\n\n\n\t\t\t\t\tGNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.0546875,
          "content": "\ntest:\n\tphpunit --colors tests\n\nrelease:\n\t./package.sh\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.7568359375,
          "content": "[![Build Status](https://travis-ci.org/leafo/lessphp.svg?branch=master)](https://travis-ci.org/leafo/lessphp)\n\n# lessphp v0.5.0\n### <http://leafo.net/lessphp>\n\n`lessphp` is a compiler for LESS written in PHP. The documentation is great,\nso check it out: <http://leafo.net/lessphp/docs/>.\n\nHere's a quick tutorial:\n\n### How to use in your PHP project\n\nThe only file required is `lessc.inc.php`, so copy that to your include directory.\n\nThe typical flow of **lessphp** is to create a new instance of `lessc`,\nconfigure it how you like, then tell it to compile something using one built in\ncompile methods.\n\nThe `compile` method compiles a string of LESS code to CSS.\n\n```php\n<?php\nrequire \"lessc.inc.php\";\n\n$less = new lessc;\necho $less->compile(\".block { padding: 3 + 4px }\");\n```\n\nThe `compileFile` method reads and compiles a file. It will either return the\nresult or write it to the path specified by an optional second argument.\n\n```php\n<?php\necho $less->compileFile(\"input.less\");\n```\n\nThe `checkedCompile` method is like `compileFile`, but it only compiles if the output\nfile doesn't exist or it's older than the input file:\n\n```php\n<?php\n$less->checkedCompile(\"input.less\", \"output.css\");\n```\n\nIf there any problem compiling your code, an exception is thrown with a helpful message:\n\n```php\n<?php\ntry {\n  $less->compile(\"invalid LESS } {\");\n} catch (exception $e) {\n  echo \"fatal error: \" . $e->getMessage();\n}\n```\n\nThe `lessc` object can be configured through an assortment of instance methods.\nSome possible configuration options include [changing the output format][1],\n[setting variables from PHP][2], and [controlling the preservation of\ncomments][3], writing [custom functions][4] and much more. It's all described\nin [the documentation][0].\n\n\n [0]: http://leafo.net/lessphp/docs/\n [1]: http://leafo.net/lessphp/docs/#output_formatting\n [2]: http://leafo.net/lessphp/docs/#setting_variables_from_php\n [3]: http://leafo.net/lessphp/docs/#preserving_comments\n [4]: http://leafo.net/lessphp/docs/#custom_functions\n\n\n### How to use from the command line\n\nAn additional script has been included to use the compiler from the command\nline. In the simplest invocation, you specify an input file and the compiled\ncss is written to standard out:\n\n    $ plessc input.less > output.css\n\nUsing the -r flag, you can specify LESS code directly as an argument or, if\nthe argument is left off, from standard in:\n\n    $ plessc -r \"my less code here\"\n\nFinally, by using the -w flag you can watch a specified input file and have it\ncompile as needed to the output file:\n\n    $ plessc -w input-file output-file\n\nErrors from watch mode are written to standard out.\n\nThe -f flag sets the [output formatter][1]. For example, to compress the\noutput run this:\n\n    $ plessc -f=compressed myfile.less\n\nFor more help, run `plessc --help`\n\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.7294921875,
          "content": "{\n    \"name\": \"leafo/lessphp\",\n    \"type\": \"library\",\n    \"description\": \"lessphp is a compiler for LESS written in PHP.\",\n    \"homepage\": \"http://leafo.net/lessphp/\",\n    \"license\": [\n        \"MIT\",\n        \"GPL-3.0\"\n    ],\n    \"authors\": [\n        {\n            \"name\": \"Leaf Corcoran\",\n            \"email\": \"leafot@gmail.com\",\n            \"homepage\": \"http://leafo.net\"\n        }\n    ],\n    \"bin\": [\n        \"plessc\",\n        \"lessify\"\n    ],\n    \"autoload\": {\n        \"classmap\": [\"lessc.inc.php\"]\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^5.7.27\",\n        \"squizlabs/php_codesniffer\": \"3.3.2\"\n    },\n    \"scripts\": {\n        \"test\": [\n            \"phpunit\",\n            \"phpcs -p -s\"\n        ],\n        \"fix\": \"phpcbf\"\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "lessc.inc.php",
          "type": "blob",
          "size": 118.69921875,
          "content": "<?php\n\n/**\n * lessphp v0.5.0\n * http://leafo.net/lessphp\n *\n * LESS CSS compiler, adapted from http://lesscss.org\n *\n * Copyright 2013, Leaf Corcoran <leafot@gmail.com>\n * Licensed under MIT or GPLv3, see LICENSE\n */\n\n\n/**\n * The LESS compiler and parser.\n *\n * Converting LESS to CSS is a three stage process. The incoming file is parsed\n * by `lessc_parser` into a syntax tree, then it is compiled into another tree\n * representing the CSS structure by `lessc`. The CSS tree is fed into a\n * formatter, like `lessc_formatter` which then outputs CSS as a string.\n *\n * During the first compile, all values are *reduced*, which means that their\n * types are brought to the lowest form before being dump as strings. This\n * handles math equations, variable dereferences, and the like.\n *\n * The `parse` function of `lessc` is the entry point.\n *\n * In summary:\n *\n * The `lessc` class creates an instance of the parser, feeds it LESS code,\n * then transforms the resulting tree to a CSS tree. This class also holds the\n * evaluation context, such as all available mixins and variables at any given\n * time.\n *\n * The `lessc_parser` class is only concerned with parsing its input.\n *\n * The `lessc_formatter` takes a CSS tree, and dumps it to a formatted string,\n * handling things like indentation.\n */\nclass lessc {\n    static public $VERSION = \"v0.5.0\";\n\n    static public $TRUE = array(\"keyword\", \"true\");\n    static public $FALSE = array(\"keyword\", \"false\");\n\n    protected $libFunctions = array();\n    protected $registeredVars = array();\n    protected $preserveComments = false;\n\n    public $vPrefix = '@'; // prefix of abstract properties\n    public $mPrefix = '$'; // prefix of abstract blocks\n    public $parentSelector = '&';\n\n    public $importDisabled = false;\n    public $importDir = '';\n\n    protected $numberPrecision = null;\n\n    protected $allParsedFiles = array();\n\n    // set to the parser that generated the current line when compiling\n    // so we know how to create error messages\n    protected $sourceParser = null;\n    protected $sourceLoc = null;\n\n    static protected $nextImportId = 0; // uniquely identify imports\n\n    // attempts to find the path of an import url, returns null for css files\n    protected function findImport($url) {\n        foreach ((array)$this->importDir as $dir) {\n            $full = $dir.(substr($dir, -1) != '/' ? '/' : '').$url;\n            if ($this->fileExists($file = $full.'.less') || $this->fileExists($file = $full)) {\n                return $file;\n            }\n        }\n\n        return null;\n    }\n\n    protected function fileExists($name) {\n        return is_file($name);\n    }\n\n    public static function compressList($items, $delim) {\n        if (!isset($items[1]) && isset($items[0])) return $items[0];\n        else return array('list', $delim, $items);\n    }\n\n    public static function preg_quote($what) {\n        return preg_quote($what, '/');\n    }\n\n    protected function tryImport($importPath, $parentBlock, $out) {\n        if ($importPath[0] == \"function\" && $importPath[1] == \"url\") {\n            $importPath = $this->flattenList($importPath[2]);\n        }\n\n        $str = $this->coerceString($importPath);\n        if ($str === null) return false;\n\n        $url = $this->compileValue($this->lib_e($str));\n\n        // don't import if it ends in css\n        if (substr_compare($url, '.css', -4, 4) === 0) return false;\n\n        $realPath = $this->findImport($url);\n\n        if ($realPath === null) return false;\n\n        if ($this->importDisabled) {\n            return array(false, \"/* import disabled */\");\n        }\n\n        if (isset($this->allParsedFiles[realpath($realPath)])) {\n            return array(false, null);\n        }\n\n        $this->addParsedFile($realPath);\n        $parser = $this->makeParser($realPath);\n        $root = $parser->parse(file_get_contents($realPath));\n\n        // set the parents of all the block props\n        foreach ($root->props as $prop) {\n            if ($prop[0] == \"block\") {\n                $prop[1]->parent = $parentBlock;\n            }\n        }\n\n        // copy mixins into scope, set their parents\n        // bring blocks from import into current block\n        // TODO: need to mark the source parser these came from this file\n        foreach ($root->children as $childName => $child) {\n            if (isset($parentBlock->children[$childName])) {\n                $parentBlock->children[$childName] = array_merge(\n                    $parentBlock->children[$childName],\n                    $child);\n            } else {\n                $parentBlock->children[$childName] = $child;\n            }\n        }\n\n        $pi = pathinfo($realPath);\n        $dir = $pi[\"dirname\"];\n\n        list($top, $bottom) = $this->sortProps($root->props, true);\n        $this->compileImportedProps($top, $parentBlock, $out, $parser, $dir);\n\n        return array(true, $bottom, $parser, $dir);\n    }\n\n    protected function compileImportedProps($props, $block, $out, $sourceParser, $importDir) {\n        $oldSourceParser = $this->sourceParser;\n\n        $oldImport = $this->importDir;\n\n        // TODO: this is because the importDir api is stupid\n        $this->importDir = (array)$this->importDir;\n        array_unshift($this->importDir, $importDir);\n\n        foreach ($props as $prop) {\n            $this->compileProp($prop, $block, $out);\n        }\n\n        $this->importDir = $oldImport;\n        $this->sourceParser = $oldSourceParser;\n    }\n\n    /**\n     * Recursively compiles a block.\n     *\n     * A block is analogous to a CSS block in most cases. A single LESS document\n     * is encapsulated in a block when parsed, but it does not have parent tags\n     * so all of it's children appear on the root level when compiled.\n     *\n     * Blocks are made up of props and children.\n     *\n     * Props are property instructions, array tuples which describe an action\n     * to be taken, eg. write a property, set a variable, mixin a block.\n     *\n     * The children of a block are just all the blocks that are defined within.\n     * This is used to look up mixins when performing a mixin.\n     *\n     * Compiling the block involves pushing a fresh environment on the stack,\n     * and iterating through the props, compiling each one.\n     *\n     * See lessc::compileProp()\n     *\n     */\n    protected function compileBlock($block) {\n        switch ($block->type) {\n        case \"root\":\n            $this->compileRoot($block);\n            break;\n        case null:\n            $this->compileCSSBlock($block);\n            break;\n        case \"media\":\n            $this->compileMedia($block);\n            break;\n        case \"directive\":\n            $name = \"@\" . $block->name;\n            if (!empty($block->value)) {\n                $name .= \" \" . $this->compileValue($this->reduce($block->value));\n            }\n\n            $this->compileNestedBlock($block, array($name));\n            break;\n        default:\n            $this->throwError(\"unknown block type: $block->type\\n\");\n        }\n    }\n\n    protected function compileCSSBlock($block) {\n        $env = $this->pushEnv();\n\n        $selectors = $this->compileSelectors($block->tags);\n        $env->selectors = $this->multiplySelectors($selectors);\n        $out = $this->makeOutputBlock(null, $env->selectors);\n\n        $this->scope->children[] = $out;\n        $this->compileProps($block, $out);\n\n        $block->scope = $env; // mixins carry scope with them!\n        $this->popEnv();\n    }\n\n    protected function compileMedia($media) {\n        $env = $this->pushEnv($media);\n        $parentScope = $this->mediaParent($this->scope);\n\n        $query = $this->compileMediaQuery($this->multiplyMedia($env));\n\n        $this->scope = $this->makeOutputBlock($media->type, array($query));\n        $parentScope->children[] = $this->scope;\n\n        $this->compileProps($media, $this->scope);\n\n        if (count($this->scope->lines) > 0) {\n            $orphanSelelectors = $this->findClosestSelectors();\n            if (!is_null($orphanSelelectors)) {\n                $orphan = $this->makeOutputBlock(null, $orphanSelelectors);\n                $orphan->lines = $this->scope->lines;\n                array_unshift($this->scope->children, $orphan);\n                $this->scope->lines = array();\n            }\n        }\n\n        $this->scope = $this->scope->parent;\n        $this->popEnv();\n    }\n\n    protected function mediaParent($scope) {\n        while (!empty($scope->parent)) {\n            if (!empty($scope->type) && $scope->type != \"media\") {\n                break;\n            }\n            $scope = $scope->parent;\n        }\n\n        return $scope;\n    }\n\n    protected function compileNestedBlock($block, $selectors) {\n        $this->pushEnv($block);\n        $this->scope = $this->makeOutputBlock($block->type, $selectors);\n        $this->scope->parent->children[] = $this->scope;\n\n        $this->compileProps($block, $this->scope);\n\n        $this->scope = $this->scope->parent;\n        $this->popEnv();\n    }\n\n    protected function compileRoot($root) {\n        $this->pushEnv();\n        $this->scope = $this->makeOutputBlock($root->type);\n        $this->compileProps($root, $this->scope);\n        $this->popEnv();\n    }\n\n    protected function compileProps($block, $out) {\n        foreach ($this->sortProps($block->props) as $prop) {\n            $this->compileProp($prop, $block, $out);\n        }\n        $out->lines = $this->deduplicate($out->lines);\n    }\n\n    /**\n     * Deduplicate lines in a block. Comments are not deduplicated. If a\n     * duplicate rule is detected, the comments immediately preceding each\n     * occurence are consolidated.\n     */\n    protected function deduplicate($lines) {\n        $unique = array();\n        $comments = array();\n\n        foreach ($lines as $line) {\n            if (strpos($line, '/*') === 0) {\n                $comments[] = $line;\n                continue;\n            }\n            if (!in_array($line, $unique)) {\n                $unique[] = $line;\n            }\n            array_splice($unique, array_search($line, $unique), 0, $comments);\n            $comments = array();\n        }\n        return array_merge($unique, $comments);\n    }\n\n    protected function sortProps($props, $split = false) {\n        $vars = array();\n        $imports = array();\n        $other = array();\n        $stack = array();\n\n        foreach ($props as $prop) {\n            switch ($prop[0]) {\n            case \"comment\":\n                $stack[] = $prop;\n                break;\n            case \"assign\":\n                $stack[] = $prop;\n                if (isset($prop[1][0]) && $prop[1][0] == $this->vPrefix) {\n                    $vars = array_merge($vars, $stack);\n                } else {\n                    $other = array_merge($other, $stack);\n                }\n                $stack = array();\n                break;\n            case \"import\":\n                $id = self::$nextImportId++;\n                $prop[] = $id;\n                $stack[] = $prop;\n                $imports = array_merge($imports, $stack);\n                $other[] = array(\"import_mixin\", $id);\n                $stack = array();\n                break;\n            default:\n                $stack[] = $prop;\n                $other = array_merge($other, $stack);\n                $stack = array();\n                break;\n            }\n        }\n        $other = array_merge($other, $stack);\n\n        if ($split) {\n            return array(array_merge($imports, $vars), $other);\n        } else {\n            return array_merge($imports, $vars, $other);\n        }\n    }\n\n    protected function compileMediaQuery($queries) {\n        $compiledQueries = array();\n        foreach ($queries as $query) {\n            $parts = array();\n            foreach ($query as $q) {\n                switch ($q[0]) {\n                case \"mediaType\":\n                    $parts[] = implode(\" \", array_slice($q, 1));\n                    break;\n                case \"mediaExp\":\n                    if (isset($q[2])) {\n                        $parts[] = \"($q[1]: \" .\n                            $this->compileValue($this->reduce($q[2])) . \")\";\n                    } else {\n                        $parts[] = \"($q[1])\";\n                    }\n                    break;\n                case \"variable\":\n                    $parts[] = $this->compileValue($this->reduce($q));\n                break;\n                }\n            }\n\n            if (count($parts) > 0) {\n                $compiledQueries[] =  implode(\" and \", $parts);\n            }\n        }\n\n        $out = \"@media\";\n        if (!empty($parts)) {\n            $out .= \" \" .\n                implode($this->formatter->selectorSeparator, $compiledQueries);\n        }\n        return $out;\n    }\n\n    protected function multiplyMedia($env, $childQueries = null) {\n        if (is_null($env) ||\n            !empty($env->block->type) && $env->block->type != \"media\"\n        ) {\n            return $childQueries;\n        }\n\n        // plain old block, skip\n        if (empty($env->block->type)) {\n            return $this->multiplyMedia($env->parent, $childQueries);\n        }\n\n        $out = array();\n        $queries = $env->block->queries;\n        if (is_null($childQueries)) {\n            $out = $queries;\n        } else {\n            foreach ($queries as $parent) {\n                foreach ($childQueries as $child) {\n                    $out[] = array_merge($parent, $child);\n                }\n            }\n        }\n\n        return $this->multiplyMedia($env->parent, $out);\n    }\n\n    protected function expandParentSelectors(&$tag, $replace) {\n        $parts = explode(\"$&$\", $tag);\n        $count = 0;\n        foreach ($parts as &$part) {\n            $part = str_replace($this->parentSelector, $replace, $part, $c);\n            $count += $c;\n        }\n        $tag = implode($this->parentSelector, $parts);\n        return $count;\n    }\n\n    protected function findClosestSelectors() {\n        $env = $this->env;\n        $selectors = null;\n        while ($env !== null) {\n            if (isset($env->selectors)) {\n                $selectors = $env->selectors;\n                break;\n            }\n            $env = $env->parent;\n        }\n\n        return $selectors;\n    }\n\n\n    // multiply $selectors against the nearest selectors in env\n    protected function multiplySelectors($selectors) {\n        // find parent selectors\n\n        $parentSelectors = $this->findClosestSelectors();\n        if (is_null($parentSelectors)) {\n            // kill parent reference in top level selector\n            foreach ($selectors as &$s) {\n                $this->expandParentSelectors($s, \"\");\n            }\n\n            return $selectors;\n        }\n\n        $out = array();\n        foreach ($parentSelectors as $parent) {\n            foreach ($selectors as $child) {\n                $count = $this->expandParentSelectors($child, $parent);\n\n                // don't prepend the parent tag if & was used\n                if ($count > 0) {\n                    $out[] = trim($child);\n                } else {\n                    $out[] = trim($parent . ' ' . $child);\n                }\n            }\n        }\n\n        return $out;\n    }\n\n    // reduces selector expressions\n    protected function compileSelectors($selectors) {\n        $out = array();\n\n        foreach ($selectors as $s) {\n            if (is_array($s)) {\n                list(, $value) = $s;\n                $out[] = trim($this->compileValue($this->reduce($value)));\n            } else {\n                $out[] = $s;\n            }\n        }\n\n        return $out;\n    }\n\n    protected function eq($left, $right) {\n        return $left == $right;\n    }\n\n    protected function patternMatch($block, $orderedArgs, $keywordArgs) {\n        // match the guards if it has them\n        // any one of the groups must have all its guards pass for a match\n        if (!empty($block->guards)) {\n            $groupPassed = false;\n            foreach ($block->guards as $guardGroup) {\n                foreach ($guardGroup as $guard) {\n                    $this->pushEnv();\n                    $this->zipSetArgs($block->args, $orderedArgs, $keywordArgs);\n\n                    $negate = false;\n                    if ($guard[0] == \"negate\") {\n                        $guard = $guard[1];\n                        $negate = true;\n                    }\n\n                    $passed = $this->reduce($guard) == self::$TRUE;\n                    if ($negate) $passed = !$passed;\n\n                    $this->popEnv();\n\n                    if ($passed) {\n                        $groupPassed = true;\n                    } else {\n                        $groupPassed = false;\n                        break;\n                    }\n                }\n\n                if ($groupPassed) break;\n            }\n\n            if (!$groupPassed) {\n                return false;\n            }\n        }\n\n        if (empty($block->args)) {\n            return $block->isVararg || empty($orderedArgs) && empty($keywordArgs);\n        }\n\n        $remainingArgs = $block->args;\n        if ($keywordArgs) {\n            $remainingArgs = array();\n            foreach ($block->args as $arg) {\n                if ($arg[0] == \"arg\" && isset($keywordArgs[$arg[1]])) {\n                    continue;\n                }\n\n                $remainingArgs[] = $arg;\n            }\n        }\n\n        $i = -1; // no args\n        // try to match by arity or by argument literal\n        foreach ($remainingArgs as $i => $arg) {\n            switch ($arg[0]) {\n            case \"lit\":\n                if (empty($orderedArgs[$i]) || !$this->eq($arg[1], $orderedArgs[$i])) {\n                    return false;\n                }\n                break;\n            case \"arg\":\n                // no arg and no default value\n                if (!isset($orderedArgs[$i]) && !isset($arg[2])) {\n                    return false;\n                }\n                break;\n            case \"rest\":\n                $i--; // rest can be empty\n                break 2;\n            }\n        }\n\n        if ($block->isVararg) {\n            return true; // not having enough is handled above\n        } else {\n            $numMatched = $i + 1;\n            // greater than because default values always match\n            return $numMatched >= count($orderedArgs);\n        }\n    }\n\n    protected function patternMatchAll($blocks, $orderedArgs, $keywordArgs, $skip=array()) {\n        $matches = null;\n        foreach ($blocks as $block) {\n            // skip seen blocks that don't have arguments\n            if (isset($skip[$block->id]) && !isset($block->args)) {\n                continue;\n            }\n\n            if ($this->patternMatch($block, $orderedArgs, $keywordArgs)) {\n                $matches[] = $block;\n            }\n        }\n\n        return $matches;\n    }\n\n    // attempt to find blocks matched by path and args\n    protected function findBlocks($searchIn, $path, $orderedArgs, $keywordArgs, $seen=array()) {\n        if ($searchIn == null) return null;\n        if (isset($seen[$searchIn->id])) return null;\n        $seen[$searchIn->id] = true;\n\n        $name = $path[0];\n\n        if (isset($searchIn->children[$name])) {\n            $blocks = $searchIn->children[$name];\n            if (count($path) == 1) {\n                $matches = $this->patternMatchAll($blocks, $orderedArgs, $keywordArgs, $seen);\n                if (!empty($matches)) {\n                    // This will return all blocks that match in the closest\n                    // scope that has any matching block, like lessjs\n                    return $matches;\n                }\n            } else {\n                $matches = array();\n                foreach ($blocks as $subBlock) {\n                    $subMatches = $this->findBlocks($subBlock,\n                        array_slice($path, 1), $orderedArgs, $keywordArgs, $seen);\n\n                    if (!is_null($subMatches)) {\n                        foreach ($subMatches as $sm) {\n                            $matches[] = $sm;\n                        }\n                    }\n                }\n\n                return count($matches) > 0 ? $matches : null;\n            }\n        }\n        if ($searchIn->parent === $searchIn) return null;\n        return $this->findBlocks($searchIn->parent, $path, $orderedArgs, $keywordArgs, $seen);\n    }\n\n    // sets all argument names in $args to either the default value\n    // or the one passed in through $values\n    protected function zipSetArgs($args, $orderedValues, $keywordValues) {\n        $assignedValues = array();\n\n        $i = 0;\n        foreach ($args as $a) {\n            if ($a[0] == \"arg\") {\n                if (isset($keywordValues[$a[1]])) {\n                    // has keyword arg\n                    $value = $keywordValues[$a[1]];\n                } elseif (isset($orderedValues[$i])) {\n                    // has ordered arg\n                    $value = $orderedValues[$i];\n                    $i++;\n                } elseif (isset($a[2])) {\n                    // has default value\n                    $value = $a[2];\n                } else {\n                    $this->throwError(\"Failed to assign arg \" . $a[1]);\n                    $value = null; // :(\n                }\n\n                $value = $this->reduce($value);\n                $this->set($a[1], $value);\n                $assignedValues[] = $value;\n            } else {\n                // a lit\n                $i++;\n            }\n        }\n\n        // check for a rest\n        $last = end($args);\n        if ($last[0] == \"rest\") {\n            $rest = array_slice($orderedValues, count($args) - 1);\n            $this->set($last[1], $this->reduce(array(\"list\", \" \", $rest)));\n        }\n\n        // wow is this the only true use of PHP's + operator for arrays?\n        $this->env->arguments = $assignedValues + $orderedValues;\n    }\n\n    // compile a prop and update $lines or $blocks appropriately\n    protected function compileProp($prop, $block, $out) {\n        // set error position context\n        $this->sourceLoc = isset($prop[-1]) ? $prop[-1] : -1;\n\n        switch ($prop[0]) {\n        case 'assign':\n            list(, $name, $value) = $prop;\n            if ($name[0] == $this->vPrefix) {\n                $this->set($name, $value);\n            } else {\n                $out->lines[] = $this->formatter->property($name,\n                        $this->compileValue($this->reduce($value)));\n            }\n            break;\n        case 'block':\n            list(, $child) = $prop;\n            $this->compileBlock($child);\n            break;\n        case 'mixin':\n            list(, $path, $args, $suffix) = $prop;\n\n            $orderedArgs = array();\n            $keywordArgs = array();\n            foreach ((array)$args as $arg) {\n                $argval = null;\n                switch ($arg[0]) {\n                case \"arg\":\n                    if (!isset($arg[2])) {\n                        $orderedArgs[] = $this->reduce(array(\"variable\", $arg[1]));\n                    } else {\n                        $keywordArgs[$arg[1]] = $this->reduce($arg[2]);\n                    }\n                    break;\n\n                case \"lit\":\n                    $orderedArgs[] = $this->reduce($arg[1]);\n                    break;\n                default:\n                    $this->throwError(\"Unknown arg type: \" . $arg[0]);\n                }\n            }\n\n            $mixins = $this->findBlocks($block, $path, $orderedArgs, $keywordArgs);\n\n            if ($mixins === null) {\n                $this->throwError(\"{$prop[1][0]} is undefined\");\n            }\n\n            foreach ($mixins as $mixin) {\n                if ($mixin === $block && !$orderedArgs) {\n                    continue;\n                }\n\n                $haveScope = false;\n                if (isset($mixin->parent->scope)) {\n                    $haveScope = true;\n                    $mixinParentEnv = $this->pushEnv();\n                    $mixinParentEnv->storeParent = $mixin->parent->scope;\n                }\n\n                $haveArgs = false;\n                if (isset($mixin->args)) {\n                    $haveArgs = true;\n                    $this->pushEnv();\n                    $this->zipSetArgs($mixin->args, $orderedArgs, $keywordArgs);\n                }\n\n                $oldParent = $mixin->parent;\n                if ($mixin != $block) $mixin->parent = $block;\n\n                foreach ($this->sortProps($mixin->props) as $subProp) {\n                    if ($suffix !== null &&\n                        $subProp[0] == \"assign\" &&\n                        is_string($subProp[1]) &&\n                        $subProp[1]{0} != $this->vPrefix\n                    ) {\n                        $subProp[2] = array(\n                            'list', ' ',\n                            array($subProp[2], array('keyword', $suffix))\n                        );\n                    }\n\n                    $this->compileProp($subProp, $mixin, $out);\n                }\n\n                $mixin->parent = $oldParent;\n\n                if ($haveArgs) $this->popEnv();\n                if ($haveScope) $this->popEnv();\n            }\n\n            break;\n        case 'raw':\n            $out->lines[] = $prop[1];\n            break;\n        case \"directive\":\n            list(, $name, $value) = $prop;\n            $out->lines[] = \"@$name \" . $this->compileValue($this->reduce($value)).';';\n            break;\n        case \"comment\":\n            $out->lines[] = $prop[1];\n            break;\n        case \"import\":\n            list(, $importPath, $importId) = $prop;\n            $importPath = $this->reduce($importPath);\n\n            if (!isset($this->env->imports)) {\n                $this->env->imports = array();\n            }\n\n            $result = $this->tryImport($importPath, $block, $out);\n\n            $this->env->imports[$importId] = $result === false ?\n                array(false, \"@import \" . $this->compileValue($importPath).\";\") :\n                $result;\n\n            break;\n        case \"import_mixin\":\n            list(,$importId) = $prop;\n            $import = $this->env->imports[$importId];\n            if ($import[0] === false) {\n                if (isset($import[1])) {\n                    $out->lines[] = $import[1];\n                }\n            } else {\n                list(, $bottom, $parser, $importDir) = $import;\n                $this->compileImportedProps($bottom, $block, $out, $parser, $importDir);\n            }\n\n            break;\n        default:\n            $this->throwError(\"unknown op: {$prop[0]}\\n\");\n        }\n    }\n\n\n    /**\n     * Compiles a primitive value into a CSS property value.\n     *\n     * Values in lessphp are typed by being wrapped in arrays, their format is\n     * typically:\n     *\n     *     array(type, contents [, additional_contents]*)\n     *\n     * The input is expected to be reduced. This function will not work on\n     * things like expressions and variables.\n     */\n    public function compileValue($value) {\n        switch ($value[0]) {\n        case 'list':\n            // [1] - delimiter\n            // [2] - array of values\n            return implode($value[1], array_map(array($this, 'compileValue'), $value[2]));\n        case 'raw_color':\n            if (!empty($this->formatter->compressColors)) {\n                return $this->compileValue($this->coerceColor($value));\n            }\n            return $value[1];\n        case 'keyword':\n            // [1] - the keyword\n            return $value[1];\n        case 'number':\n            list(, $num, $unit) = $value;\n            // [1] - the number\n            // [2] - the unit\n            if ($this->numberPrecision !== null) {\n                $num = round($num, $this->numberPrecision);\n            }\n            return $num . $unit;\n        case 'string':\n            // [1] - contents of string (includes quotes)\n            list(, $delim, $content) = $value;\n            foreach ($content as &$part) {\n                if (is_array($part)) {\n                    $part = $this->compileValue($part);\n                }\n            }\n            return $delim . implode($content) . $delim;\n        case 'color':\n            // [1] - red component (either number or a %)\n            // [2] - green component\n            // [3] - blue component\n            // [4] - optional alpha component\n            list(, $r, $g, $b) = $value;\n            $r = round($r);\n            $g = round($g);\n            $b = round($b);\n\n            if (count($value) == 5 && $value[4] != 1) { // rgba\n                return 'rgba('.$r.','.$g.','.$b.','.$value[4].')';\n            }\n\n            $h = sprintf(\"#%02x%02x%02x\", $r, $g, $b);\n\n            if (!empty($this->formatter->compressColors)) {\n                // Converting hex color to short notation (e.g. #003399 to #039)\n                if ($h[1] === $h[2] && $h[3] === $h[4] && $h[5] === $h[6]) {\n                    $h = '#' . $h[1] . $h[3] . $h[5];\n                }\n            }\n\n            return $h;\n\n        case 'function':\n            list(, $name, $args) = $value;\n            return $name.'('.$this->compileValue($args).')';\n        default: // assumed to be unit\n            $this->throwError(\"unknown value type: $value[0]\");\n        }\n    }\n\n    protected function lib_pow($args) {\n        list($base, $exp) = $this->assertArgs($args, 2, \"pow\");\n        return pow($this->assertNumber($base), $this->assertNumber($exp));\n    }\n\n    protected function lib_pi() {\n        return pi();\n    }\n\n    protected function lib_mod($args) {\n        list($a, $b) = $this->assertArgs($args, 2, \"mod\");\n        return $this->assertNumber($a) % $this->assertNumber($b);\n    }\n\n    protected function lib_tan($num) {\n        return tan($this->assertNumber($num));\n    }\n\n    protected function lib_sin($num) {\n        return sin($this->assertNumber($num));\n    }\n\n    protected function lib_cos($num) {\n        return cos($this->assertNumber($num));\n    }\n\n    protected function lib_atan($num) {\n        $num = atan($this->assertNumber($num));\n        return array(\"number\", $num, \"rad\");\n    }\n\n    protected function lib_asin($num) {\n        $num = asin($this->assertNumber($num));\n        return array(\"number\", $num, \"rad\");\n    }\n\n    protected function lib_acos($num) {\n        $num = acos($this->assertNumber($num));\n        return array(\"number\", $num, \"rad\");\n    }\n\n    protected function lib_sqrt($num) {\n        return sqrt($this->assertNumber($num));\n    }\n\n    protected function lib_extract($value) {\n        list($list, $idx) = $this->assertArgs($value, 2, \"extract\");\n        $idx = $this->assertNumber($idx);\n        // 1 indexed\n        if ($list[0] == \"list\" && isset($list[2][$idx - 1])) {\n            return $list[2][$idx - 1];\n        }\n    }\n\n    protected function lib_isnumber($value) {\n        return $this->toBool($value[0] == \"number\");\n    }\n\n    protected function lib_isstring($value) {\n        return $this->toBool($value[0] == \"string\");\n    }\n\n    protected function lib_iscolor($value) {\n        return $this->toBool($this->coerceColor($value));\n    }\n\n    protected function lib_iskeyword($value) {\n        return $this->toBool($value[0] == \"keyword\");\n    }\n\n    protected function lib_ispixel($value) {\n        return $this->toBool($value[0] == \"number\" && $value[2] == \"px\");\n    }\n\n    protected function lib_ispercentage($value) {\n        return $this->toBool($value[0] == \"number\" && $value[2] == \"%\");\n    }\n\n    protected function lib_isem($value) {\n        return $this->toBool($value[0] == \"number\" && $value[2] == \"em\");\n    }\n\n    protected function lib_isrem($value) {\n        return $this->toBool($value[0] == \"number\" && $value[2] == \"rem\");\n    }\n\n    protected function lib_rgbahex($color) {\n        $color = $this->coerceColor($color);\n        if (is_null($color)) {\n            $this->throwError(\"color expected for rgbahex\");\n        }\n\n        return sprintf(\"#%02x%02x%02x%02x\",\n            isset($color[4]) ? $color[4] * 255 : 255,\n            $color[1],\n            $color[2],\n            $color[3]\n        );\n    }\n\n    protected function lib_argb($color){\n        return $this->lib_rgbahex($color);\n    }\n\n    /**\n     * Given an url, decide whether to output a regular link or the base64-encoded contents of the file\n     *\n     * @param  array  $value either an argument list (two strings) or a single string\n     * @return string        formatted url(), either as a link or base64-encoded\n     */\n    protected function lib_data_uri($value) {\n        $mime = ($value[0] === 'list') ? $value[2][0][2] : null;\n        $url = ($value[0] === 'list') ? $value[2][1][2][0] : $value[2][0];\n\n        $fullpath = $this->findImport($url);\n\n        if ($fullpath && ($fsize = filesize($fullpath)) !== false) {\n            // IE8 can't handle data uris larger than 32KB\n            if ($fsize/1024 < 32) {\n                if (is_null($mime)) {\n                    if (class_exists('finfo')) { // php 5.3+\n                        $finfo = new finfo(FILEINFO_MIME);\n                        $mime = explode('; ', $finfo->file($fullpath));\n                        $mime = $mime[0];\n                    } elseif (function_exists('mime_content_type')) { // PHP 5.2\n                        $mime = mime_content_type($fullpath);\n                    }\n                }\n\n                if (!is_null($mime)) // fallback if the mime type is still unknown\n                    $url = sprintf('data:%s;base64,%s', $mime, base64_encode(file_get_contents($fullpath)));\n            }\n        }\n\n        return 'url(\"'.$url.'\")';\n    }\n\n    // utility func to unquote a string\n    protected function lib_e($arg) {\n        switch ($arg[0]) {\n            case \"list\":\n                $items = $arg[2];\n                if (isset($items[0])) {\n                    return $this->lib_e($items[0]);\n                }\n                $this->throwError(\"unrecognised input\");\n            case \"string\":\n                $arg[1] = \"\";\n                return $arg;\n            case \"keyword\":\n                return $arg;\n            default:\n                return array(\"keyword\", $this->compileValue($arg));\n        }\n    }\n\n    protected function lib__sprintf($args) {\n        if ($args[0] != \"list\") return $args;\n        $values = $args[2];\n        $string = array_shift($values);\n        $template = $this->compileValue($this->lib_e($string));\n\n        $i = 0;\n        if (preg_match_all('/%[dsa]/', $template, $m)) {\n            foreach ($m[0] as $match) {\n                $val = isset($values[$i]) ?\n                    $this->reduce($values[$i]) : array('keyword', '');\n\n                // lessjs compat, renders fully expanded color, not raw color\n                if ($color = $this->coerceColor($val)) {\n                    $val = $color;\n                }\n\n                $i++;\n                $rep = $this->compileValue($this->lib_e($val));\n                $template = preg_replace('/'.self::preg_quote($match).'/',\n                    $rep, $template, 1);\n            }\n        }\n\n        $d = $string[0] == \"string\" ? $string[1] : '\"';\n        return array(\"string\", $d, array($template));\n    }\n\n    protected function lib_floor($arg) {\n        $value = $this->assertNumber($arg);\n        return array(\"number\", floor($value), $arg[2]);\n    }\n\n    protected function lib_ceil($arg) {\n        $value = $this->assertNumber($arg);\n        return array(\"number\", ceil($value), $arg[2]);\n    }\n\n    protected function lib_round($arg) {\n        if ($arg[0] != \"list\") {\n            $value = $this->assertNumber($arg);\n            return array(\"number\", round($value), $arg[2]);\n        } else {\n            $value = $this->assertNumber($arg[2][0]);\n            $precision = $this->assertNumber($arg[2][1]);\n            return array(\"number\", round($value, $precision), $arg[2][0][2]);\n        }\n    }\n\n    protected function lib_unit($arg) {\n        if ($arg[0] == \"list\") {\n            list($number, $newUnit) = $arg[2];\n            return array(\"number\", $this->assertNumber($number),\n                $this->compileValue($this->lib_e($newUnit)));\n        } else {\n            return array(\"number\", $this->assertNumber($arg), \"\");\n        }\n    }\n\n    /**\n     * Helper function to get arguments for color manipulation functions.\n     * takes a list that contains a color like thing and a percentage\n     */\n    public function colorArgs($args) {\n        if ($args[0] != 'list' || count($args[2]) < 2) {\n            return array(array('color', 0, 0, 0), 0);\n        }\n        list($color, $delta) = $args[2];\n        $color = $this->assertColor($color);\n        $delta = floatval($delta[1]);\n\n        return array($color, $delta);\n    }\n\n    protected function lib_darken($args) {\n        list($color, $delta) = $this->colorArgs($args);\n\n        $hsl = $this->toHSL($color);\n        $hsl[3] = $this->clamp($hsl[3] - $delta, 100);\n        return $this->toRGB($hsl);\n    }\n\n    protected function lib_lighten($args) {\n        list($color, $delta) = $this->colorArgs($args);\n\n        $hsl = $this->toHSL($color);\n        $hsl[3] = $this->clamp($hsl[3] + $delta, 100);\n        return $this->toRGB($hsl);\n    }\n\n    protected function lib_saturate($args) {\n        list($color, $delta) = $this->colorArgs($args);\n\n        $hsl = $this->toHSL($color);\n        $hsl[2] = $this->clamp($hsl[2] + $delta, 100);\n        return $this->toRGB($hsl);\n    }\n\n    protected function lib_desaturate($args) {\n        list($color, $delta) = $this->colorArgs($args);\n\n        $hsl = $this->toHSL($color);\n        $hsl[2] = $this->clamp($hsl[2] - $delta, 100);\n        return $this->toRGB($hsl);\n    }\n\n    protected function lib_spin($args) {\n        list($color, $delta) = $this->colorArgs($args);\n\n        $hsl = $this->toHSL($color);\n\n        $hsl[1] = $hsl[1] + $delta % 360;\n        if ($hsl[1] < 0) {\n            $hsl[1] += 360;\n        }\n\n        return $this->toRGB($hsl);\n    }\n\n    protected function lib_fadeout($args) {\n        list($color, $delta) = $this->colorArgs($args);\n        $color[4] = $this->clamp((isset($color[4]) ? $color[4] : 1) - $delta/100);\n        return $color;\n    }\n\n    protected function lib_fadein($args) {\n        list($color, $delta) = $this->colorArgs($args);\n        $color[4] = $this->clamp((isset($color[4]) ? $color[4] : 1) + $delta/100);\n        return $color;\n    }\n\n    protected function lib_hue($color) {\n        $hsl = $this->toHSL($this->assertColor($color));\n        return round($hsl[1]);\n    }\n\n    protected function lib_saturation($color) {\n        $hsl = $this->toHSL($this->assertColor($color));\n        return round($hsl[2]);\n    }\n\n    protected function lib_lightness($color) {\n        $hsl = $this->toHSL($this->assertColor($color));\n        return round($hsl[3]);\n    }\n\n    // get the alpha of a color\n    // defaults to 1 for non-colors or colors without an alpha\n    protected function lib_alpha($value) {\n        if (!is_null($color = $this->coerceColor($value))) {\n            return isset($color[4]) ? $color[4] : 1;\n        }\n    }\n\n    // set the alpha of the color\n    protected function lib_fade($args) {\n        list($color, $alpha) = $this->colorArgs($args);\n        $color[4] = $this->clamp($alpha / 100.0);\n        return $color;\n    }\n\n    protected function lib_percentage($arg) {\n        $num = $this->assertNumber($arg);\n        return array(\"number\", $num*100, \"%\");\n    }\n\n    /**\n     * Mix color with white in variable proportion.\n     *\n     * It is the same as calling `mix(#ffffff, @color, @weight)`.\n     *\n     *     tint(@color, [@weight: 50%]);\n     *\n     * http://lesscss.org/functions/#color-operations-tint\n     *\n     * @return array Color\n     */\n    protected function lib_tint($args) {\n        $white = ['color', 255, 255, 255];\n        if ($args[0] == 'color') {\n            return $this->lib_mix([ 'list', ',', [$white, $args] ]);\n        } elseif ($args[0] == \"list\" && count($args[2]) == 2) {\n            return $this->lib_mix([ $args[0], $args[1], [$white, $args[2][0], $args[2][1]] ]);\n        } else {\n            $this->throwError(\"tint expects (color, weight)\");\n        }\n    }\n\n    /**\n     * Mix color with black in variable proportion.\n     *\n     * It is the same as calling `mix(#000000, @color, @weight)`\n     *\n     *     shade(@color, [@weight: 50%]);\n     *\n     * http://lesscss.org/functions/#color-operations-shade\n     *\n     * @return array Color\n     */\n    protected function lib_shade($args) {\n        $black = ['color', 0, 0, 0];\n        if ($args[0] == 'color') {\n            return $this->lib_mix([ 'list', ',', [$black, $args] ]);\n        } elseif ($args[0] == \"list\" && count($args[2]) == 2) {\n            return $this->lib_mix([ $args[0], $args[1], [$black, $args[2][0], $args[2][1]] ]);\n        } else {\n            $this->throwError(\"shade expects (color, weight)\");\n        }\n    }\n\n    // mixes two colors by weight\n    // mix(@color1, @color2, [@weight: 50%]);\n    // http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#mix-instance_method\n    protected function lib_mix($args) {\n        if ($args[0] != \"list\" || count($args[2]) < 2)\n            $this->throwError(\"mix expects (color1, color2, weight)\");\n\n        list($first, $second) = $args[2];\n        $first = $this->assertColor($first);\n        $second = $this->assertColor($second);\n\n        $first_a = $this->lib_alpha($first);\n        $second_a = $this->lib_alpha($second);\n\n        if (isset($args[2][2])) {\n            $weight = $args[2][2][1] / 100.0;\n        } else {\n            $weight = 0.5;\n        }\n\n        $w = $weight * 2 - 1;\n        $a = $first_a - $second_a;\n\n        $w1 = (($w * $a == -1 ? $w : ($w + $a)/(1 + $w * $a)) + 1) / 2.0;\n        $w2 = 1.0 - $w1;\n\n        $new = array('color',\n            $w1 * $first[1] + $w2 * $second[1],\n            $w1 * $first[2] + $w2 * $second[2],\n            $w1 * $first[3] + $w2 * $second[3],\n        );\n\n        if ($first_a != 1.0 || $second_a != 1.0) {\n            $new[] = $first_a * $weight + $second_a * ($weight - 1);\n        }\n\n        return $this->fixColor($new);\n    }\n\n    protected function lib_contrast($args) {\n        $darkColor  = array('color', 0, 0, 0);\n        $lightColor = array('color', 255, 255, 255);\n        $threshold  = 0.43;\n\n        if ( $args[0] == 'list' ) {\n            $inputColor = ( isset($args[2][0]) ) ? $this->assertColor($args[2][0])  : $lightColor;\n            $darkColor  = ( isset($args[2][1]) ) ? $this->assertColor($args[2][1])  : $darkColor;\n            $lightColor = ( isset($args[2][2]) ) ? $this->assertColor($args[2][2])  : $lightColor;\n            $threshold  = ( isset($args[2][3]) ) ? $this->assertNumber($args[2][3]) : $threshold;\n        }\n        else {\n            $inputColor  = $this->assertColor($args);\n        }\n\n        $inputColor = $this->coerceColor($inputColor);\n        $darkColor  = $this->coerceColor($darkColor);\n        $lightColor = $this->coerceColor($lightColor);\n\n        //Figure out which is actually light and dark!\n        if ( $this->toLuma($darkColor) > $this->toLuma($lightColor) ) {\n            $t  = $lightColor;\n            $lightColor = $darkColor;\n            $darkColor  = $t;\n        }\n\n        $inputColor_alpha = $this->lib_alpha($inputColor);\n        if ( ( $this->toLuma($inputColor) * $inputColor_alpha) < $threshold) {\n            return $lightColor;\n        }\n        return $darkColor;\n    }\n\n    private function toLuma($color) {\n        list(, $r, $g, $b) = $this->coerceColor($color);\n\n        $r = $r / 255;\n        $g = $g / 255;\n        $b = $b / 255;\n\n        $r = ($r <= 0.03928) ? $r / 12.92 : pow((($r + 0.055) / 1.055), 2.4);\n        $g = ($g <= 0.03928) ? $g / 12.92 : pow((($g + 0.055) / 1.055), 2.4);\n        $b = ($b <= 0.03928) ? $b / 12.92 : pow((($b + 0.055) / 1.055), 2.4);\n\n        return (0.2126 * $r) + (0.7152 * $g) + (0.0722 * $b);\n    }\n\n    protected function lib_luma($color) {\n        return array(\"number\", round($this->toLuma($color) * 100, 8), \"%\");\n    }\n\n\n    public function assertColor($value, $error = \"expected color value\") {\n        $color = $this->coerceColor($value);\n        if (is_null($color)) $this->throwError($error);\n        return $color;\n    }\n\n    public function assertNumber($value, $error = \"expecting number\") {\n        if ($value[0] == \"number\") return $value[1];\n        $this->throwError($error);\n    }\n\n    public function assertArgs($value, $expectedArgs, $name=\"\") {\n        if ($expectedArgs == 1) {\n            return $value;\n        } else {\n            if ($value[0] !== \"list\" || $value[1] != \",\") $this->throwError(\"expecting list\");\n            $values = $value[2];\n            $numValues = count($values);\n            if ($expectedArgs != $numValues) {\n                if ($name) {\n                    $name = $name . \": \";\n                }\n\n                $this->throwError(\"${name}expecting $expectedArgs arguments, got $numValues\");\n            }\n\n            return $values;\n        }\n    }\n\n    protected function toHSL($color) {\n        if ($color[0] === 'hsl') {\n            return $color;\n        }\n\n        $r = $color[1] / 255;\n        $g = $color[2] / 255;\n        $b = $color[3] / 255;\n\n        $min = min($r, $g, $b);\n        $max = max($r, $g, $b);\n\n        $L = ($min + $max) / 2;\n        if ($min == $max) {\n            $S = $H = 0;\n        } else {\n            if ($L < 0.5) {\n                $S = ($max - $min) / ($max + $min);\n            } else {\n                $S = ($max - $min) / (2.0 - $max - $min);\n            }\n            if ($r == $max) {\n                $H = ($g - $b) / ($max - $min);\n            } elseif ($g == $max) {\n                $H = 2.0 + ($b - $r) / ($max - $min);\n            } elseif ($b == $max) {\n                $H = 4.0 + ($r - $g) / ($max - $min);\n            }\n\n        }\n\n        $out = array('hsl',\n            ($H < 0 ? $H + 6 : $H)*60,\n            $S * 100,\n            $L * 100,\n        );\n\n        if (count($color) > 4) {\n            // copy alpha\n            $out[] = $color[4];\n        }\n        return $out;\n    }\n\n    protected function toRGB_helper($comp, $temp1, $temp2) {\n        if ($comp < 0) {\n            $comp += 1.0;\n        } elseif ($comp > 1) {\n            $comp -= 1.0;\n        }\n\n        if (6 * $comp < 1) {\n            return $temp1 + ($temp2 - $temp1) * 6 * $comp;\n        }\n        if (2 * $comp < 1) {\n            return $temp2;\n        }\n        if (3 * $comp < 2) {\n            return $temp1 + ($temp2 - $temp1)*((2/3) - $comp) * 6;\n        }\n\n        return $temp1;\n    }\n\n    /**\n     * Converts a hsl array into a color value in rgb.\n     * Expects H to be in range of 0 to 360, S and L in 0 to 100\n     */\n    protected function toRGB($color) {\n        if ($color[0] === 'color') {\n            return $color;\n        }\n\n        $H = $color[1] / 360;\n        $S = $color[2] / 100;\n        $L = $color[3] / 100;\n\n        if ($S == 0) {\n            $r = $g = $b = $L;\n        } else {\n            $temp2 = $L < 0.5 ?\n                $L * (1.0 + $S) :\n                $L + $S - $L * $S;\n\n            $temp1 = 2.0 * $L - $temp2;\n\n            $r = $this->toRGB_helper($H + 1/3, $temp1, $temp2);\n            $g = $this->toRGB_helper($H, $temp1, $temp2);\n            $b = $this->toRGB_helper($H - 1/3, $temp1, $temp2);\n        }\n\n        // $out = array('color', round($r*255), round($g*255), round($b*255));\n        $out = array('color', $r*255, $g*255, $b*255);\n        if (count($color) > 4) {\n            // copy alpha\n            $out[] = $color[4];\n        }\n        return $out;\n    }\n\n    protected function clamp($v, $max = 1, $min = 0) {\n        return min($max, max($min, $v));\n    }\n\n    /**\n     * Convert the rgb, rgba, hsl color literals of function type\n     * as returned by the parser into values of color type.\n     */\n    protected function funcToColor($func) {\n        $fname = $func[1];\n        if ($func[2][0] != 'list') {\n            // need a list of arguments\n            return false;\n        }\n        $rawComponents = $func[2][2];\n\n        if ($fname == 'hsl' || $fname == 'hsla') {\n            $hsl = array('hsl');\n            $i = 0;\n            foreach ($rawComponents as $c) {\n                $val = $this->reduce($c);\n                $val = isset($val[1]) ? floatval($val[1]) : 0;\n\n                if ($i == 0) {\n                    $clamp = 360;\n                } elseif ($i < 3) {\n                    $clamp = 100;\n                } else {\n                    $clamp = 1;\n                }\n\n                $hsl[] = $this->clamp($val, $clamp);\n                $i++;\n            }\n\n            while (count($hsl) < 4) {\n                $hsl[] = 0;\n            }\n            return $this->toRGB($hsl);\n\n        } elseif ($fname == 'rgb' || $fname == 'rgba') {\n            $components = array();\n            $i = 1;\n            foreach ($rawComponents as $c) {\n                $c = $this->reduce($c);\n                if ($i < 4) {\n                    if ($c[0] == \"number\" && $c[2] == \"%\") {\n                        $components[] = 255 * ($c[1] / 100);\n                    } else {\n                        $components[] = floatval($c[1]);\n                    }\n                } elseif ($i == 4) {\n                    if ($c[0] == \"number\" && $c[2] == \"%\") {\n                        $components[] = 1.0 * ($c[1] / 100);\n                    } else {\n                        $components[] = floatval($c[1]);\n                    }\n                } else break;\n\n                $i++;\n            }\n            while (count($components) < 3) {\n                $components[] = 0;\n            }\n            array_unshift($components, 'color');\n            return $this->fixColor($components);\n        }\n\n        return false;\n    }\n\n    protected function reduce($value, $forExpression = false) {\n        switch ($value[0]) {\n        case \"interpolate\":\n            $reduced = $this->reduce($value[1]);\n            $var = $this->compileValue($reduced);\n            $res = $this->reduce(array(\"variable\", $this->vPrefix . $var));\n\n            if ($res[0] == \"raw_color\") {\n                $res = $this->coerceColor($res);\n            }\n\n            if (empty($value[2])) $res = $this->lib_e($res);\n\n            return $res;\n        case \"variable\":\n            $key = $value[1];\n            if (is_array($key)) {\n                $key = $this->reduce($key);\n                $key = $this->vPrefix . $this->compileValue($this->lib_e($key));\n            }\n\n            $seen =& $this->env->seenNames;\n\n            if (!empty($seen[$key])) {\n                $this->throwError(\"infinite loop detected: $key\");\n            }\n\n            $seen[$key] = true;\n            $out = $this->reduce($this->get($key));\n            $seen[$key] = false;\n            return $out;\n        case \"list\":\n            foreach ($value[2] as &$item) {\n                $item = $this->reduce($item, $forExpression);\n            }\n            return $value;\n        case \"expression\":\n            return $this->evaluate($value);\n        case \"string\":\n            foreach ($value[2] as &$part) {\n                if (is_array($part)) {\n                    $strip = $part[0] == \"variable\";\n                    $part = $this->reduce($part);\n                    if ($strip) $part = $this->lib_e($part);\n                }\n            }\n            return $value;\n        case \"escape\":\n            list(,$inner) = $value;\n            return $this->lib_e($this->reduce($inner));\n        case \"function\":\n            $color = $this->funcToColor($value);\n            if ($color) return $color;\n\n            list(, $name, $args) = $value;\n            if ($name == \"%\") $name = \"_sprintf\";\n\n            $f = isset($this->libFunctions[$name]) ?\n                $this->libFunctions[$name] : array($this, 'lib_'.str_replace('-', '_', $name));\n\n            if (is_callable($f)) {\n                if ($args[0] == 'list')\n                    $args = self::compressList($args[2], $args[1]);\n\n                $ret = call_user_func($f, $this->reduce($args, true), $this);\n\n                if (is_null($ret)) {\n                    return array(\"string\", \"\", array(\n                        $name, \"(\", $args, \")\"\n                    ));\n                }\n\n                // convert to a typed value if the result is a php primitive\n                if (is_numeric($ret)) {\n                    $ret = array('number', $ret, \"\");\n                } elseif (!is_array($ret)) {\n                    $ret = array('keyword', $ret);\n                }\n\n                return $ret;\n            }\n\n            // plain function, reduce args\n            $value[2] = $this->reduce($value[2]);\n            return $value;\n        case \"unary\":\n            list(, $op, $exp) = $value;\n            $exp = $this->reduce($exp);\n\n            if ($exp[0] == \"number\") {\n                switch ($op) {\n                case \"+\":\n                    return $exp;\n                case \"-\":\n                    $exp[1] *= -1;\n                    return $exp;\n                }\n            }\n            return array(\"string\", \"\", array($op, $exp));\n        }\n\n        if ($forExpression) {\n            switch ($value[0]) {\n            case \"keyword\":\n                if ($color = $this->coerceColor($value)) {\n                    return $color;\n                }\n                break;\n            case \"raw_color\":\n                return $this->coerceColor($value);\n            }\n        }\n\n        return $value;\n    }\n\n\n    // coerce a value for use in color operation\n    protected function coerceColor($value) {\n        switch ($value[0]) {\n            case 'color': return $value;\n            case 'raw_color':\n                $c = array(\"color\", 0, 0, 0);\n                $colorStr = substr($value[1], 1);\n                $num = hexdec($colorStr);\n                $width = strlen($colorStr) == 3 ? 16 : 256;\n\n                for ($i = 3; $i > 0; $i--) { // 3 2 1\n                    $t = $num % $width;\n                    $num /= $width;\n\n                    $c[$i] = $t * (256/$width) + $t * floor(16/$width);\n                }\n\n                return $c;\n            case 'keyword':\n                $name = $value[1];\n                if (isset(self::$cssColors[$name])) {\n                    $rgba = explode(',', self::$cssColors[$name]);\n\n                    if (isset($rgba[3])) {\n                        return array('color', $rgba[0], $rgba[1], $rgba[2], $rgba[3]);\n                    }\n                    return array('color', $rgba[0], $rgba[1], $rgba[2]);\n                }\n                return null;\n        }\n    }\n\n    // make something string like into a string\n    protected function coerceString($value) {\n        switch ($value[0]) {\n        case \"string\":\n            return $value;\n        case \"keyword\":\n            return array(\"string\", \"\", array($value[1]));\n        }\n        return null;\n    }\n\n    // turn list of length 1 into value type\n    protected function flattenList($value) {\n        if ($value[0] == \"list\" && count($value[2]) == 1) {\n            return $this->flattenList($value[2][0]);\n        }\n        return $value;\n    }\n\n    public function toBool($a) {\n        return $a ? self::$TRUE : self::$FALSE;\n    }\n\n    // evaluate an expression\n    protected function evaluate($exp) {\n        list(, $op, $left, $right, $whiteBefore, $whiteAfter) = $exp;\n\n        $left = $this->reduce($left, true);\n        $right = $this->reduce($right, true);\n\n        if ($leftColor = $this->coerceColor($left)) {\n            $left = $leftColor;\n        }\n\n        if ($rightColor = $this->coerceColor($right)) {\n            $right = $rightColor;\n        }\n\n        $ltype = $left[0];\n        $rtype = $right[0];\n\n        // operators that work on all types\n        if ($op == \"and\") {\n            return $this->toBool($left == self::$TRUE && $right == self::$TRUE);\n        }\n\n        if ($op == \"=\") {\n            return $this->toBool($this->eq($left, $right) );\n        }\n\n        if ($op == \"+\" && !is_null($str = $this->stringConcatenate($left, $right))) {\n            return $str;\n        }\n\n        // type based operators\n        $fname = \"op_${ltype}_${rtype}\";\n        if (is_callable(array($this, $fname))) {\n            $out = $this->$fname($op, $left, $right);\n            if (!is_null($out)) return $out;\n        }\n\n        // make the expression look it did before being parsed\n        $paddedOp = $op;\n        if ($whiteBefore) {\n            $paddedOp = \" \" . $paddedOp;\n        }\n        if ($whiteAfter) {\n            $paddedOp .= \" \";\n        }\n\n        return array(\"string\", \"\", array($left, $paddedOp, $right));\n    }\n\n    protected function stringConcatenate($left, $right) {\n        if ($strLeft = $this->coerceString($left)) {\n            if ($right[0] == \"string\") {\n                $right[1] = \"\";\n            }\n            $strLeft[2][] = $right;\n            return $strLeft;\n        }\n\n        if ($strRight = $this->coerceString($right)) {\n            array_unshift($strRight[2], $left);\n            return $strRight;\n        }\n    }\n\n\n    // make sure a color's components don't go out of bounds\n    protected function fixColor($c) {\n        foreach (range(1, 3) as $i) {\n            if ($c[$i] < 0) $c[$i] = 0;\n            if ($c[$i] > 255) $c[$i] = 255;\n        }\n\n        return $c;\n    }\n\n    protected function op_number_color($op, $lft, $rgt) {\n        if ($op == '+' || $op == '*') {\n            return $this->op_color_number($op, $rgt, $lft);\n        }\n    }\n\n    protected function op_color_number($op, $lft, $rgt) {\n        if ($rgt[0] == '%') $rgt[1] /= 100;\n\n        return $this->op_color_color($op, $lft,\n            array_fill(1, count($lft) - 1, $rgt[1]));\n    }\n\n    protected function op_color_color($op, $left, $right) {\n        $out = array('color');\n        $max = count($left) > count($right) ? count($left) : count($right);\n        foreach (range(1, $max - 1) as $i) {\n            $lval = isset($left[$i]) ? $left[$i] : 0;\n            $rval = isset($right[$i]) ? $right[$i] : 0;\n            switch ($op) {\n            case '+':\n                $out[] = $lval + $rval;\n                break;\n            case '-':\n                $out[] = $lval - $rval;\n                break;\n            case '*':\n                $out[] = $lval * $rval;\n                break;\n            case '%':\n                $out[] = $lval % $rval;\n                break;\n            case '/':\n                if ($rval == 0) {\n                    $this->throwError(\"evaluate error: can't divide by zero\");\n                }\n                $out[] = $lval / $rval;\n                break;\n            default:\n                $this->throwError('evaluate error: color op number failed on op '.$op);\n            }\n        }\n        return $this->fixColor($out);\n    }\n\n    public function lib_red($color){\n        $color = $this->coerceColor($color);\n        if (is_null($color)) {\n            $this->throwError('color expected for red()');\n        }\n\n        return $color[1];\n    }\n\n    public function lib_green($color){\n        $color = $this->coerceColor($color);\n        if (is_null($color)) {\n            $this->throwError('color expected for green()');\n        }\n\n        return $color[2];\n    }\n\n    public function lib_blue($color){\n        $color = $this->coerceColor($color);\n        if (is_null($color)) {\n            $this->throwError('color expected for blue()');\n        }\n\n        return $color[3];\n    }\n\n\n    // operator on two numbers\n    protected function op_number_number($op, $left, $right) {\n        $unit = empty($left[2]) ? $right[2] : $left[2];\n\n        $value = 0;\n        switch ($op) {\n        case '+':\n            $value = $left[1] + $right[1];\n            break;\n        case '*':\n            $value = $left[1] * $right[1];\n            break;\n        case '-':\n            $value = $left[1] - $right[1];\n            break;\n        case '%':\n            $value = $left[1] % $right[1];\n            break;\n        case '/':\n            if ($right[1] == 0) $this->throwError('parse error: divide by zero');\n            $value = $left[1] / $right[1];\n            break;\n        case '<':\n            return $this->toBool($left[1] < $right[1]);\n        case '>':\n            return $this->toBool($left[1] > $right[1]);\n        case '>=':\n            return $this->toBool($left[1] >= $right[1]);\n        case '=<':\n            return $this->toBool($left[1] <= $right[1]);\n        default:\n            $this->throwError('parse error: unknown number operator: '.$op);\n        }\n\n        return array(\"number\", $value, $unit);\n    }\n\n\n    /* environment functions */\n\n    protected function makeOutputBlock($type, $selectors = null) {\n        $b = new stdclass;\n        $b->lines = array();\n        $b->children = array();\n        $b->selectors = $selectors;\n        $b->type = $type;\n        $b->parent = $this->scope;\n        return $b;\n    }\n\n    // the state of execution\n    protected function pushEnv($block = null) {\n        $e = new stdclass;\n        $e->parent = $this->env;\n        $e->store = array();\n        $e->block = $block;\n\n        $this->env = $e;\n        return $e;\n    }\n\n    // pop something off the stack\n    protected function popEnv() {\n        $old = $this->env;\n        $this->env = $this->env->parent;\n        return $old;\n    }\n\n    // set something in the current env\n    protected function set($name, $value) {\n        $this->env->store[$name] = $value;\n    }\n\n\n    // get the highest occurrence entry for a name\n    protected function get($name) {\n        $current = $this->env;\n\n        $isArguments = $name == $this->vPrefix . 'arguments';\n        while ($current) {\n            if ($isArguments && isset($current->arguments)) {\n                return array('list', ' ', $current->arguments);\n            }\n\n            if (isset($current->store[$name])) {\n                return $current->store[$name];\n            }\n\n            $current = isset($current->storeParent) ?\n                $current->storeParent :\n                $current->parent;\n        }\n\n        $this->throwError(\"variable $name is undefined\");\n    }\n\n    // inject array of unparsed strings into environment as variables\n    protected function injectVariables($args) {\n        $this->pushEnv();\n        $parser = new lessc_parser($this, __METHOD__);\n        foreach ($args as $name => $strValue) {\n            if ($name{0} !== '@') {\n                $name = '@' . $name;\n            }\n            $parser->count = 0;\n            $parser->buffer = (string)$strValue;\n            if (!$parser->propertyValue($value)) {\n                throw new Exception(\"failed to parse passed in variable $name: $strValue\");\n            }\n\n            $this->set($name, $value);\n        }\n    }\n\n    /**\n     * Initialize any static state, can initialize parser for a file\n     * $opts isn't used yet\n     */\n    public function __construct($fname = null) {\n        if ($fname !== null) {\n            // used for deprecated parse method\n            $this->_parseFile = $fname;\n        }\n    }\n\n    public function compile($string, $name = null) {\n        $locale = setlocale(LC_NUMERIC, 0);\n        setlocale(LC_NUMERIC, \"C\");\n\n        $this->parser = $this->makeParser($name);\n        $root = $this->parser->parse($string);\n\n        $this->env = null;\n        $this->scope = null;\n\n        $this->formatter = $this->newFormatter();\n\n        if (!empty($this->registeredVars)) {\n            $this->injectVariables($this->registeredVars);\n        }\n\n        $this->sourceParser = $this->parser; // used for error messages\n        $this->compileBlock($root);\n\n        ob_start();\n        $this->formatter->block($this->scope);\n        $out = ob_get_clean();\n        setlocale(LC_NUMERIC, $locale);\n        return $out;\n    }\n\n    public function compileFile($fname, $outFname = null) {\n        if (!is_readable($fname)) {\n            throw new Exception('load error: failed to find '.$fname);\n        }\n\n        $pi = pathinfo($fname);\n\n        $oldImport = $this->importDir;\n\n        $this->importDir = (array)$this->importDir;\n        $this->importDir[] = $pi['dirname'].'/';\n\n        $this->addParsedFile($fname);\n\n        $out = $this->compile(file_get_contents($fname), $fname);\n\n        $this->importDir = $oldImport;\n\n        if ($outFname !== null) {\n            return file_put_contents($outFname, $out);\n        }\n\n        return $out;\n    }\n\n    // compile only if changed input has changed or output doesn't exist\n    public function checkedCompile($in, $out) {\n        if (!is_file($out) || filemtime($in) > filemtime($out)) {\n            $this->compileFile($in, $out);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Execute lessphp on a .less file or a lessphp cache structure\n     *\n     * The lessphp cache structure contains information about a specific\n     * less file having been parsed. It can be used as a hint for future\n     * calls to determine whether or not a rebuild is required.\n     *\n     * The cache structure contains two important keys that may be used\n     * externally:\n     *\n     * compiled: The final compiled CSS\n     * updated: The time (in seconds) the CSS was last compiled\n     *\n     * The cache structure is a plain-ol' PHP associative array and can\n     * be serialized and unserialized without a hitch.\n     *\n     * @param mixed $in Input\n     * @param bool $force Force rebuild?\n     * @return array lessphp cache structure\n     */\n    public function cachedCompile($in, $force = false) {\n        // assume no root\n        $root = null;\n\n        if (is_string($in)) {\n            $root = $in;\n        } elseif (is_array($in) && isset($in['root'])) {\n            if ($force || !isset($in['files'])) {\n                // If we are forcing a recompile or if for some reason the\n                // structure does not contain any file information we should\n                // specify the root to trigger a rebuild.\n                $root = $in['root'];\n            } elseif (isset($in['files']) && is_array($in['files'])) {\n                foreach ($in['files'] as $fname => $ftime) {\n                    if (!file_exists($fname) || filemtime($fname) > $ftime) {\n                        // One of the files we knew about previously has changed\n                        // so we should look at our incoming root again.\n                        $root = $in['root'];\n                        break;\n                    }\n                }\n            }\n        } else {\n            // TODO: Throw an exception? We got neither a string nor something\n            // that looks like a compatible lessphp cache structure.\n            return null;\n        }\n\n        if ($root !== null) {\n            // If we have a root value which means we should rebuild.\n            $out = array();\n            $out['root'] = $root;\n            $out['compiled'] = $this->compileFile($root);\n            $out['files'] = $this->allParsedFiles();\n            $out['updated'] = time();\n            return $out;\n        } else {\n            // No changes, pass back the structure\n            // we were given initially.\n            return $in;\n        }\n\n    }\n\n    // parse and compile buffer\n    // This is deprecated\n    public function parse($str = null, $initialVariables = null) {\n        if (is_array($str)) {\n            $initialVariables = $str;\n            $str = null;\n        }\n\n        $oldVars = $this->registeredVars;\n        if ($initialVariables !== null) {\n            $this->setVariables($initialVariables);\n        }\n\n        if ($str == null) {\n            if (empty($this->_parseFile)) {\n                throw new exception(\"nothing to parse\");\n            }\n\n            $out = $this->compileFile($this->_parseFile);\n        } else {\n            $out = $this->compile($str);\n        }\n\n        $this->registeredVars = $oldVars;\n        return $out;\n    }\n\n    protected function makeParser($name) {\n        $parser = new lessc_parser($this, $name);\n        $parser->writeComments = $this->preserveComments;\n\n        return $parser;\n    }\n\n    public function setFormatter($name) {\n        $this->formatterName = $name;\n    }\n\n    protected function newFormatter() {\n        $className = \"lessc_formatter_lessjs\";\n        if (!empty($this->formatterName)) {\n            if (!is_string($this->formatterName))\n                return $this->formatterName;\n            $className = \"lessc_formatter_$this->formatterName\";\n        }\n\n        return new $className;\n    }\n\n    public function setPreserveComments($preserve) {\n        $this->preserveComments = $preserve;\n    }\n\n    public function registerFunction($name, $func) {\n        $this->libFunctions[$name] = $func;\n    }\n\n    public function unregisterFunction($name) {\n        unset($this->libFunctions[$name]);\n    }\n\n    public function setVariables($variables) {\n        $this->registeredVars = array_merge($this->registeredVars, $variables);\n    }\n\n    public function unsetVariable($name) {\n        unset($this->registeredVars[$name]);\n    }\n\n    public function setImportDir($dirs) {\n        $this->importDir = (array)$dirs;\n    }\n\n    public function addImportDir($dir) {\n        $this->importDir = (array)$this->importDir;\n        $this->importDir[] = $dir;\n    }\n\n    public function allParsedFiles() {\n        return $this->allParsedFiles;\n    }\n\n    public function addParsedFile($file) {\n        $this->allParsedFiles[realpath($file)] = filemtime($file);\n    }\n\n    /**\n     * Uses the current value of $this->count to show line and line number\n     */\n    public function throwError($msg = null) {\n        if ($this->sourceLoc >= 0) {\n            $this->sourceParser->throwError($msg, $this->sourceLoc);\n        }\n        throw new exception($msg);\n    }\n\n    // compile file $in to file $out if $in is newer than $out\n    // returns true when it compiles, false otherwise\n    public static function ccompile($in, $out, $less = null) {\n        if ($less === null) {\n            $less = new self;\n        }\n        return $less->checkedCompile($in, $out);\n    }\n\n    public static function cexecute($in, $force = false, $less = null) {\n        if ($less === null) {\n            $less = new self;\n        }\n        return $less->cachedCompile($in, $force);\n    }\n\n    static protected $cssColors = array(\n        'aliceblue' => '240,248,255',\n        'antiquewhite' => '250,235,215',\n        'aqua' => '0,255,255',\n        'aquamarine' => '127,255,212',\n        'azure' => '240,255,255',\n        'beige' => '245,245,220',\n        'bisque' => '255,228,196',\n        'black' => '0,0,0',\n        'blanchedalmond' => '255,235,205',\n        'blue' => '0,0,255',\n        'blueviolet' => '138,43,226',\n        'brown' => '165,42,42',\n        'burlywood' => '222,184,135',\n        'cadetblue' => '95,158,160',\n        'chartreuse' => '127,255,0',\n        'chocolate' => '210,105,30',\n        'coral' => '255,127,80',\n        'cornflowerblue' => '100,149,237',\n        'cornsilk' => '255,248,220',\n        'crimson' => '220,20,60',\n        'cyan' => '0,255,255',\n        'darkblue' => '0,0,139',\n        'darkcyan' => '0,139,139',\n        'darkgoldenrod' => '184,134,11',\n        'darkgray' => '169,169,169',\n        'darkgreen' => '0,100,0',\n        'darkgrey' => '169,169,169',\n        'darkkhaki' => '189,183,107',\n        'darkmagenta' => '139,0,139',\n        'darkolivegreen' => '85,107,47',\n        'darkorange' => '255,140,0',\n        'darkorchid' => '153,50,204',\n        'darkred' => '139,0,0',\n        'darksalmon' => '233,150,122',\n        'darkseagreen' => '143,188,143',\n        'darkslateblue' => '72,61,139',\n        'darkslategray' => '47,79,79',\n        'darkslategrey' => '47,79,79',\n        'darkturquoise' => '0,206,209',\n        'darkviolet' => '148,0,211',\n        'deeppink' => '255,20,147',\n        'deepskyblue' => '0,191,255',\n        'dimgray' => '105,105,105',\n        'dimgrey' => '105,105,105',\n        'dodgerblue' => '30,144,255',\n        'firebrick' => '178,34,34',\n        'floralwhite' => '255,250,240',\n        'forestgreen' => '34,139,34',\n        'fuchsia' => '255,0,255',\n        'gainsboro' => '220,220,220',\n        'ghostwhite' => '248,248,255',\n        'gold' => '255,215,0',\n        'goldenrod' => '218,165,32',\n        'gray' => '128,128,128',\n        'green' => '0,128,0',\n        'greenyellow' => '173,255,47',\n        'grey' => '128,128,128',\n        'honeydew' => '240,255,240',\n        'hotpink' => '255,105,180',\n        'indianred' => '205,92,92',\n        'indigo' => '75,0,130',\n        'ivory' => '255,255,240',\n        'khaki' => '240,230,140',\n        'lavender' => '230,230,250',\n        'lavenderblush' => '255,240,245',\n        'lawngreen' => '124,252,0',\n        'lemonchiffon' => '255,250,205',\n        'lightblue' => '173,216,230',\n        'lightcoral' => '240,128,128',\n        'lightcyan' => '224,255,255',\n        'lightgoldenrodyellow' => '250,250,210',\n        'lightgray' => '211,211,211',\n        'lightgreen' => '144,238,144',\n        'lightgrey' => '211,211,211',\n        'lightpink' => '255,182,193',\n        'lightsalmon' => '255,160,122',\n        'lightseagreen' => '32,178,170',\n        'lightskyblue' => '135,206,250',\n        'lightslategray' => '119,136,153',\n        'lightslategrey' => '119,136,153',\n        'lightsteelblue' => '176,196,222',\n        'lightyellow' => '255,255,224',\n        'lime' => '0,255,0',\n        'limegreen' => '50,205,50',\n        'linen' => '250,240,230',\n        'magenta' => '255,0,255',\n        'maroon' => '128,0,0',\n        'mediumaquamarine' => '102,205,170',\n        'mediumblue' => '0,0,205',\n        'mediumorchid' => '186,85,211',\n        'mediumpurple' => '147,112,219',\n        'mediumseagreen' => '60,179,113',\n        'mediumslateblue' => '123,104,238',\n        'mediumspringgreen' => '0,250,154',\n        'mediumturquoise' => '72,209,204',\n        'mediumvioletred' => '199,21,133',\n        'midnightblue' => '25,25,112',\n        'mintcream' => '245,255,250',\n        'mistyrose' => '255,228,225',\n        'moccasin' => '255,228,181',\n        'navajowhite' => '255,222,173',\n        'navy' => '0,0,128',\n        'oldlace' => '253,245,230',\n        'olive' => '128,128,0',\n        'olivedrab' => '107,142,35',\n        'orange' => '255,165,0',\n        'orangered' => '255,69,0',\n        'orchid' => '218,112,214',\n        'palegoldenrod' => '238,232,170',\n        'palegreen' => '152,251,152',\n        'paleturquoise' => '175,238,238',\n        'palevioletred' => '219,112,147',\n        'papayawhip' => '255,239,213',\n        'peachpuff' => '255,218,185',\n        'peru' => '205,133,63',\n        'pink' => '255,192,203',\n        'plum' => '221,160,221',\n        'powderblue' => '176,224,230',\n        'purple' => '128,0,128',\n        'red' => '255,0,0',\n        'rosybrown' => '188,143,143',\n        'royalblue' => '65,105,225',\n        'saddlebrown' => '139,69,19',\n        'salmon' => '250,128,114',\n        'sandybrown' => '244,164,96',\n        'seagreen' => '46,139,87',\n        'seashell' => '255,245,238',\n        'sienna' => '160,82,45',\n        'silver' => '192,192,192',\n        'skyblue' => '135,206,235',\n        'slateblue' => '106,90,205',\n        'slategray' => '112,128,144',\n        'slategrey' => '112,128,144',\n        'snow' => '255,250,250',\n        'springgreen' => '0,255,127',\n        'steelblue' => '70,130,180',\n        'tan' => '210,180,140',\n        'teal' => '0,128,128',\n        'thistle' => '216,191,216',\n        'tomato' => '255,99,71',\n        'transparent' => '0,0,0,0',\n        'turquoise' => '64,224,208',\n        'violet' => '238,130,238',\n        'wheat' => '245,222,179',\n        'white' => '255,255,255',\n        'whitesmoke' => '245,245,245',\n        'yellow' => '255,255,0',\n        'yellowgreen' => '154,205,50'\n    );\n}\n\n// responsible for taking a string of LESS code and converting it into a\n// syntax tree\nclass lessc_parser {\n    static protected $nextBlockId = 0; // used to uniquely identify blocks\n\n    static protected $precedence = array(\n        '=<' => 0,\n        '>=' => 0,\n        '=' => 0,\n        '<' => 0,\n        '>' => 0,\n\n        '+' => 1,\n        '-' => 1,\n        '*' => 2,\n        '/' => 2,\n        '%' => 2,\n    );\n\n    static protected $whitePattern;\n    static protected $commentMulti;\n\n    static protected $commentSingle = \"//\";\n    static protected $commentMultiLeft = \"/*\";\n    static protected $commentMultiRight = \"*/\";\n\n    // regex string to match any of the operators\n    static protected $operatorString;\n\n    // these properties will supress division unless it's inside parenthases\n    static protected $supressDivisionProps =\n        array('/border-radius$/i', '/^font$/i');\n\n    protected $blockDirectives = array(\"font-face\", \"keyframes\", \"page\", \"-moz-document\", \"viewport\", \"-moz-viewport\", \"-o-viewport\", \"-ms-viewport\");\n    protected $lineDirectives = array(\"charset\");\n\n    /**\n     * if we are in parens we can be more liberal with whitespace around\n     * operators because it must evaluate to a single value and thus is less\n     * ambiguous.\n     *\n     * Consider:\n     *     property1: 10 -5; // is two numbers, 10 and -5\n     *     property2: (10 -5); // should evaluate to 5\n     */\n    protected $inParens = false;\n\n    // caches preg escaped literals\n    static protected $literalCache = array();\n\n    public function __construct($lessc, $sourceName = null) {\n        $this->eatWhiteDefault = true;\n        // reference to less needed for vPrefix, mPrefix, and parentSelector\n        $this->lessc = $lessc;\n\n        $this->sourceName = $sourceName; // name used for error messages\n\n        $this->writeComments = false;\n\n        if (!self::$operatorString) {\n            self::$operatorString =\n                '('.implode('|', array_map(array('lessc', 'preg_quote'),\n                    array_keys(self::$precedence))).')';\n\n            $commentSingle = lessc::preg_quote(self::$commentSingle);\n            $commentMultiLeft = lessc::preg_quote(self::$commentMultiLeft);\n            $commentMultiRight = lessc::preg_quote(self::$commentMultiRight);\n\n            self::$commentMulti = $commentMultiLeft.'.*?'.$commentMultiRight;\n            self::$whitePattern = '/'.$commentSingle.'[^\\n]*\\s*|('.self::$commentMulti.')\\s*|\\s+/Ais';\n        }\n    }\n\n    public function parse($buffer) {\n        $this->count = 0;\n        $this->line = 1;\n\n        $this->env = null; // block stack\n        $this->buffer = $this->writeComments ? $buffer : $this->removeComments($buffer);\n        $this->pushSpecialBlock(\"root\");\n        $this->eatWhiteDefault = true;\n        $this->seenComments = array();\n\n        // trim whitespace on head\n        // if (preg_match('/^\\s+/', $this->buffer, $m)) {\n        //  $this->line += substr_count($m[0], \"\\n\");\n        //  $this->buffer = ltrim($this->buffer);\n        // }\n        $this->whitespace();\n\n        // parse the entire file\n        while (false !== $this->parseChunk());\n\n        if ($this->count != strlen($this->buffer))\n            $this->throwError();\n\n        // TODO report where the block was opened\n        if ( !property_exists($this->env, 'parent') || !is_null($this->env->parent) )\n            throw new exception('parse error: unclosed block');\n\n        return $this->env;\n    }\n\n    /**\n     * Parse a single chunk off the head of the buffer and append it to the\n     * current parse environment.\n     * Returns false when the buffer is empty, or when there is an error.\n     *\n     * This function is called repeatedly until the entire document is\n     * parsed.\n     *\n     * This parser is most similar to a recursive descent parser. Single\n     * functions represent discrete grammatical rules for the language, and\n     * they are able to capture the text that represents those rules.\n     *\n     * Consider the function lessc::keyword(). (all parse functions are\n     * structured the same)\n     *\n     * The function takes a single reference argument. When calling the\n     * function it will attempt to match a keyword on the head of the buffer.\n     * If it is successful, it will place the keyword in the referenced\n     * argument, advance the position in the buffer, and return true. If it\n     * fails then it won't advance the buffer and it will return false.\n     *\n     * All of these parse functions are powered by lessc::match(), which behaves\n     * the same way, but takes a literal regular expression. Sometimes it is\n     * more convenient to use match instead of creating a new function.\n     *\n     * Because of the format of the functions, to parse an entire string of\n     * grammatical rules, you can chain them together using &&.\n     *\n     * But, if some of the rules in the chain succeed before one fails, then\n     * the buffer position will be left at an invalid state. In order to\n     * avoid this, lessc::seek() is used to remember and set buffer positions.\n     *\n     * Before parsing a chain, use $s = $this->seek() to remember the current\n     * position into $s. Then if a chain fails, use $this->seek($s) to\n     * go back where we started.\n     */\n    protected function parseChunk() {\n        if (empty($this->buffer)) return false;\n        $s = $this->seek();\n\n        if ($this->whitespace()) {\n            return true;\n        }\n\n        // setting a property\n        if ($this->keyword($key) && $this->assign() &&\n            $this->propertyValue($value, $key) && $this->end()\n        ) {\n            $this->append(array('assign', $key, $value), $s);\n            return true;\n        } else {\n            $this->seek($s);\n        }\n\n\n        // look for special css blocks\n        if ($this->literal('@', false)) {\n            $this->count--;\n\n            // media\n            if ($this->literal('@media')) {\n                if (($this->mediaQueryList($mediaQueries) || true)\n                    && $this->literal('{')\n                ) {\n                    $media = $this->pushSpecialBlock(\"media\");\n                    $media->queries = is_null($mediaQueries) ? array() : $mediaQueries;\n                    return true;\n                } else {\n                    $this->seek($s);\n                    return false;\n                }\n            }\n\n            if ($this->literal(\"@\", false) && $this->keyword($dirName)) {\n                if ($this->isDirective($dirName, $this->blockDirectives)) {\n                    if (($this->openString(\"{\", $dirValue, null, array(\";\")) || true) &&\n                        $this->literal(\"{\")\n                    ) {\n                        $dir = $this->pushSpecialBlock(\"directive\");\n                        $dir->name = $dirName;\n                        if (isset($dirValue)) $dir->value = $dirValue;\n                        return true;\n                    }\n                } elseif ($this->isDirective($dirName, $this->lineDirectives)) {\n                    if ($this->propertyValue($dirValue) && $this->end()) {\n                        $this->append(array(\"directive\", $dirName, $dirValue));\n                        return true;\n                    }\n                }\n            }\n\n            $this->seek($s);\n        }\n\n        // setting a variable\n        if ($this->variable($var) && $this->assign() &&\n            $this->propertyValue($value) && $this->end()\n        ) {\n            $this->append(array('assign', $var, $value), $s);\n            return true;\n        } else {\n            $this->seek($s);\n        }\n\n        if ($this->import($importValue)) {\n            $this->append($importValue, $s);\n            return true;\n        }\n\n        // opening parametric mixin\n        if ($this->tag($tag, true) && $this->argumentDef($args, $isVararg) &&\n            ($this->guards($guards) || true) &&\n            $this->literal('{')\n        ) {\n            $block = $this->pushBlock($this->fixTags(array($tag)));\n            $block->args = $args;\n            $block->isVararg = $isVararg;\n            if (!empty($guards)) $block->guards = $guards;\n            return true;\n        } else {\n            $this->seek($s);\n        }\n\n        // opening a simple block\n        if ($this->tags($tags) && $this->literal('{', false)) {\n            $tags = $this->fixTags($tags);\n            $this->pushBlock($tags);\n            return true;\n        } else {\n            $this->seek($s);\n        }\n\n        // closing a block\n        if ($this->literal('}', false)) {\n            try {\n                $block = $this->pop();\n            } catch (exception $e) {\n                $this->seek($s);\n                $this->throwError($e->getMessage());\n            }\n\n            $hidden = false;\n            if (is_null($block->type)) {\n                $hidden = true;\n                if (!isset($block->args)) {\n                    foreach ($block->tags as $tag) {\n                        if (!is_string($tag) || $tag{0} != $this->lessc->mPrefix) {\n                            $hidden = false;\n                            break;\n                        }\n                    }\n                }\n\n                foreach ($block->tags as $tag) {\n                    if (is_string($tag)) {\n                        $this->env->children[$tag][] = $block;\n                    }\n                }\n            }\n\n            if (!$hidden) {\n                $this->append(array('block', $block), $s);\n            }\n\n            // this is done here so comments aren't bundled into he block that\n            // was just closed\n            $this->whitespace();\n            return true;\n        }\n\n        // mixin\n        if ($this->mixinTags($tags) &&\n            ($this->argumentDef($argv, $isVararg) || true) &&\n            ($this->keyword($suffix) || true) && $this->end()\n        ) {\n            $tags = $this->fixTags($tags);\n            $this->append(array('mixin', $tags, $argv, $suffix), $s);\n            return true;\n        } else {\n            $this->seek($s);\n        }\n\n        // spare ;\n        if ($this->literal(';')) return true;\n\n        return false; // got nothing, throw error\n    }\n\n    protected function isDirective($dirname, $directives) {\n        // TODO: cache pattern in parser\n        $pattern = implode(\"|\",\n            array_map(array(\"lessc\", \"preg_quote\"), $directives));\n        $pattern = '/^(-[a-z-]+-)?(' . $pattern . ')$/i';\n\n        return preg_match($pattern, $dirname);\n    }\n\n    protected function fixTags($tags) {\n        // move @ tags out of variable namespace\n        foreach ($tags as &$tag) {\n            if ($tag{0} == $this->lessc->vPrefix)\n                $tag[0] = $this->lessc->mPrefix;\n        }\n        return $tags;\n    }\n\n    // a list of expressions\n    protected function expressionList(&$exps) {\n        $values = array();\n\n        while ($this->expression($exp)) {\n            $values[] = $exp;\n        }\n\n        if (count($values) == 0) return false;\n\n        $exps = lessc::compressList($values, ' ');\n        return true;\n    }\n\n    /**\n     * Attempt to consume an expression.\n     * @link http://en.wikipedia.org/wiki/Operator-precedence_parser#Pseudo-code\n     */\n    protected function expression(&$out) {\n        if ($this->value($lhs)) {\n            $out = $this->expHelper($lhs, 0);\n\n            // look for / shorthand\n            if (!empty($this->env->supressedDivision)) {\n                unset($this->env->supressedDivision);\n                $s = $this->seek();\n                if ($this->literal(\"/\") && $this->value($rhs)) {\n                    $out = array(\"list\", \"\",\n                        array($out, array(\"keyword\", \"/\"), $rhs));\n                } else {\n                    $this->seek($s);\n                }\n            }\n\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * recursively parse infix equation with $lhs at precedence $minP\n     */\n    protected function expHelper($lhs, $minP) {\n        $this->inExp = true;\n        $ss = $this->seek();\n\n        while (true) {\n            $whiteBefore = isset($this->buffer[$this->count - 1]) &&\n                ctype_space($this->buffer[$this->count - 1]);\n\n            // If there is whitespace before the operator, then we require\n            // whitespace after the operator for it to be an expression\n            $needWhite = $whiteBefore && !$this->inParens;\n\n            if ($this->match(self::$operatorString.($needWhite ? '\\s' : ''), $m) && self::$precedence[$m[1]] >= $minP) {\n                if (!$this->inParens && isset($this->env->currentProperty) && $m[1] == \"/\" && empty($this->env->supressedDivision)) {\n                    foreach (self::$supressDivisionProps as $pattern) {\n                        if (preg_match($pattern, $this->env->currentProperty)) {\n                            $this->env->supressedDivision = true;\n                            break 2;\n                        }\n                    }\n                }\n\n\n                $whiteAfter = isset($this->buffer[$this->count - 1]) &&\n                    ctype_space($this->buffer[$this->count - 1]);\n\n                if (!$this->value($rhs)) break;\n\n                // peek for next operator to see what to do with rhs\n                if ($this->peek(self::$operatorString, $next) && self::$precedence[$next[1]] > self::$precedence[$m[1]]) {\n                    $rhs = $this->expHelper($rhs, self::$precedence[$next[1]]);\n                }\n\n                $lhs = array('expression', $m[1], $lhs, $rhs, $whiteBefore, $whiteAfter);\n                $ss = $this->seek();\n\n                continue;\n            }\n\n            break;\n        }\n\n        $this->seek($ss);\n\n        return $lhs;\n    }\n\n    // consume a list of values for a property\n    public function propertyValue(&$value, $keyName = null) {\n        $values = array();\n\n        if ($keyName !== null) $this->env->currentProperty = $keyName;\n\n        $s = null;\n        while ($this->expressionList($v)) {\n            $values[] = $v;\n            $s = $this->seek();\n            if (!$this->literal(',')) break;\n        }\n\n        if ($s) $this->seek($s);\n\n        if ($keyName !== null) unset($this->env->currentProperty);\n\n        if (count($values) == 0) return false;\n\n        $value = lessc::compressList($values, ', ');\n        return true;\n    }\n\n    protected function parenValue(&$out) {\n        $s = $this->seek();\n\n        // speed shortcut\n        if (isset($this->buffer[$this->count]) && $this->buffer[$this->count] != \"(\") {\n            return false;\n        }\n\n        $inParens = $this->inParens;\n        if ($this->literal(\"(\") &&\n            ($this->inParens = true) && $this->expression($exp) &&\n            $this->literal(\")\")\n        ) {\n            $out = $exp;\n            $this->inParens = $inParens;\n            return true;\n        } else {\n            $this->inParens = $inParens;\n            $this->seek($s);\n        }\n\n        return false;\n    }\n\n    // a single value\n    protected function value(&$value) {\n        $s = $this->seek();\n\n        // speed shortcut\n        if (isset($this->buffer[$this->count]) && $this->buffer[$this->count] == \"-\") {\n            // negation\n            if ($this->literal(\"-\", false) &&\n                (($this->variable($inner) && $inner = array(\"variable\", $inner)) ||\n                $this->unit($inner) ||\n                $this->parenValue($inner))\n            ) {\n                $value = array(\"unary\", \"-\", $inner);\n                return true;\n            } else {\n                $this->seek($s);\n            }\n        }\n\n        if ($this->parenValue($value)) return true;\n        if ($this->unit($value)) return true;\n        if ($this->color($value)) return true;\n        if ($this->func($value)) return true;\n        if ($this->string($value)) return true;\n\n        if ($this->keyword($word)) {\n            $value = array('keyword', $word);\n            return true;\n        }\n\n        // try a variable\n        if ($this->variable($var)) {\n            $value = array('variable', $var);\n            return true;\n        }\n\n        // unquote string (should this work on any type?\n        if ($this->literal(\"~\") && $this->string($str)) {\n            $value = array(\"escape\", $str);\n            return true;\n        } else {\n            $this->seek($s);\n        }\n\n        // css hack: \\0\n        if ($this->literal('\\\\') && $this->match('([0-9]+)', $m)) {\n            $value = array('keyword', '\\\\'.$m[1]);\n            return true;\n        } else {\n            $this->seek($s);\n        }\n\n        return false;\n    }\n\n    // an import statement\n    protected function import(&$out) {\n        if (!$this->literal('@import')) return false;\n\n        // @import \"something.css\" media;\n        // @import url(\"something.css\") media;\n        // @import url(something.css) media;\n\n        if ($this->propertyValue($value)) {\n            $out = array(\"import\", $value);\n            return true;\n        }\n    }\n\n    protected function mediaQueryList(&$out) {\n        if ($this->genericList($list, \"mediaQuery\", \",\", false)) {\n            $out = $list[2];\n            return true;\n        }\n        return false;\n    }\n\n    protected function mediaQuery(&$out) {\n        $s = $this->seek();\n\n        $expressions = null;\n        $parts = array();\n\n        if (($this->literal(\"only\") && ($only = true) || $this->literal(\"not\") && ($not = true) || true) && $this->keyword($mediaType)) {\n            $prop = array(\"mediaType\");\n            if (isset($only)) $prop[] = \"only\";\n            if (isset($not)) $prop[] = \"not\";\n            $prop[] = $mediaType;\n            $parts[] = $prop;\n        } else {\n            $this->seek($s);\n        }\n\n\n        if (!empty($mediaType) && !$this->literal(\"and\")) {\n            // ~\n        } else {\n            $this->genericList($expressions, \"mediaExpression\", \"and\", false);\n            if (is_array($expressions)) $parts = array_merge($parts, $expressions[2]);\n        }\n\n        if (count($parts) == 0) {\n            $this->seek($s);\n            return false;\n        }\n\n        $out = $parts;\n        return true;\n    }\n\n    protected function mediaExpression(&$out) {\n        $s = $this->seek();\n        $value = null;\n        if ($this->literal(\"(\") &&\n            $this->keyword($feature) &&\n            ($this->literal(\":\") && $this->expression($value) || true) &&\n            $this->literal(\")\")\n        ) {\n            $out = array(\"mediaExp\", $feature);\n            if ($value) $out[] = $value;\n            return true;\n        } elseif ($this->variable($variable)) {\n            $out = array('variable', $variable);\n            return true;\n        }\n\n        $this->seek($s);\n        return false;\n    }\n\n    // an unbounded string stopped by $end\n    protected function openString($end, &$out, $nestingOpen=null, $rejectStrs = null) {\n        $oldWhite = $this->eatWhiteDefault;\n        $this->eatWhiteDefault = false;\n\n        $stop = array(\"'\", '\"', \"@{\", $end);\n        $stop = array_map(array(\"lessc\", \"preg_quote\"), $stop);\n        // $stop[] = self::$commentMulti;\n\n        if (!is_null($rejectStrs)) {\n            $stop = array_merge($stop, $rejectStrs);\n        }\n\n        $patt = '(.*?)('.implode(\"|\", $stop).')';\n\n        $nestingLevel = 0;\n\n        $content = array();\n        while ($this->match($patt, $m, false)) {\n            if (!empty($m[1])) {\n                $content[] = $m[1];\n                if ($nestingOpen) {\n                    $nestingLevel += substr_count($m[1], $nestingOpen);\n                }\n            }\n\n            $tok = $m[2];\n\n            $this->count-= strlen($tok);\n            if ($tok == $end) {\n                if ($nestingLevel == 0) {\n                    break;\n                } else {\n                    $nestingLevel--;\n                }\n            }\n\n            if (($tok == \"'\" || $tok == '\"') && $this->string($str)) {\n                $content[] = $str;\n                continue;\n            }\n\n            if ($tok == \"@{\" && $this->interpolation($inter)) {\n                $content[] = $inter;\n                continue;\n            }\n\n            if (!empty($rejectStrs) && in_array($tok, $rejectStrs)) {\n                break;\n            }\n\n            $content[] = $tok;\n            $this->count+= strlen($tok);\n        }\n\n        $this->eatWhiteDefault = $oldWhite;\n\n        if (count($content) == 0) return false;\n\n        // trim the end\n        if (is_string(end($content))) {\n            $content[count($content) - 1] = rtrim(end($content));\n        }\n\n        $out = array(\"string\", \"\", $content);\n        return true;\n    }\n\n    protected function string(&$out) {\n        $s = $this->seek();\n        if ($this->literal('\"', false)) {\n            $delim = '\"';\n        } elseif ($this->literal(\"'\", false)) {\n            $delim = \"'\";\n        } else {\n            return false;\n        }\n\n        $content = array();\n\n        // look for either ending delim , escape, or string interpolation\n        $patt = '([^\\n]*?)(@\\{|\\\\\\\\|' .\n            lessc::preg_quote($delim).')';\n\n        $oldWhite = $this->eatWhiteDefault;\n        $this->eatWhiteDefault = false;\n\n        while ($this->match($patt, $m, false)) {\n            $content[] = $m[1];\n            if ($m[2] == \"@{\") {\n                $this->count -= strlen($m[2]);\n                if ($this->interpolation($inter, false)) {\n                    $content[] = $inter;\n                } else {\n                    $this->count += strlen($m[2]);\n                    $content[] = \"@{\"; // ignore it\n                }\n            } elseif ($m[2] == '\\\\') {\n                $content[] = $m[2];\n                if ($this->literal($delim, false)) {\n                    $content[] = $delim;\n                }\n            } else {\n                $this->count -= strlen($delim);\n                break; // delim\n            }\n        }\n\n        $this->eatWhiteDefault = $oldWhite;\n\n        if ($this->literal($delim)) {\n            $out = array(\"string\", $delim, $content);\n            return true;\n        }\n\n        $this->seek($s);\n        return false;\n    }\n\n    protected function interpolation(&$out) {\n        $oldWhite = $this->eatWhiteDefault;\n        $this->eatWhiteDefault = true;\n\n        $s = $this->seek();\n        if ($this->literal(\"@{\") &&\n            $this->openString(\"}\", $interp, null, array(\"'\", '\"', \";\")) &&\n            $this->literal(\"}\", false)\n        ) {\n            $out = array(\"interpolate\", $interp);\n            $this->eatWhiteDefault = $oldWhite;\n            if ($this->eatWhiteDefault) $this->whitespace();\n            return true;\n        }\n\n        $this->eatWhiteDefault = $oldWhite;\n        $this->seek($s);\n        return false;\n    }\n\n    protected function unit(&$unit) {\n        // speed shortcut\n        if (isset($this->buffer[$this->count])) {\n            $char = $this->buffer[$this->count];\n            if (!ctype_digit($char) && $char != \".\") return false;\n        }\n\n        if ($this->match('([0-9]+(?:\\.[0-9]*)?|\\.[0-9]+)([%a-zA-Z]+)?', $m)) {\n            $unit = array(\"number\", $m[1], empty($m[2]) ? \"\" : $m[2]);\n            return true;\n        }\n        return false;\n    }\n\n    // a # color\n    protected function color(&$out) {\n        if ($this->match('(#(?:[0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{3}))', $m)) {\n            if (strlen($m[1]) > 7) {\n                $out = array(\"string\", \"\", array($m[1]));\n            } else {\n                $out = array(\"raw_color\", $m[1]);\n            }\n            return true;\n        }\n\n        return false;\n    }\n\n    // consume an argument definition list surrounded by ()\n    // each argument is a variable name with optional value\n    // or at the end a ... or a variable named followed by ...\n    // arguments are separated by , unless a ; is in the list, then ; is the\n    // delimiter.\n    protected function argumentDef(&$args, &$isVararg) {\n        $s = $this->seek();\n        if (!$this->literal('(')) {\n            return false;\n        }\n\n        $values = array();\n        $delim = \",\";\n        $method = \"expressionList\";\n\n        $isVararg = false;\n        while (true) {\n            if ($this->literal(\"...\")) {\n                $isVararg = true;\n                break;\n            }\n\n            if ($this->$method($value)) {\n                if ($value[0] == \"variable\") {\n                    $arg = array(\"arg\", $value[1]);\n                    $ss = $this->seek();\n\n                    if ($this->assign() && $this->$method($rhs)) {\n                        $arg[] = $rhs;\n                    } else {\n                        $this->seek($ss);\n                        if ($this->literal(\"...\")) {\n                            $arg[0] = \"rest\";\n                            $isVararg = true;\n                        }\n                    }\n\n                    $values[] = $arg;\n                    if ($isVararg) {\n                        break;\n                    }\n                    continue;\n                } else {\n                    $values[] = array(\"lit\", $value);\n                }\n            }\n\n\n            if (!$this->literal($delim)) {\n                if ($delim == \",\" && $this->literal(\";\")) {\n                    // found new delim, convert existing args\n                    $delim = \";\";\n                    $method = \"propertyValue\";\n\n                    // transform arg list\n                    if (isset($values[1])) { // 2 items\n                        $newList = array();\n                        foreach ($values as $i => $arg) {\n                            switch ($arg[0]) {\n                            case \"arg\":\n                                if ($i) {\n                                    $this->throwError(\"Cannot mix ; and , as delimiter types\");\n                                }\n                                $newList[] = $arg[2];\n                                break;\n                            case \"lit\":\n                                $newList[] = $arg[1];\n                                break;\n                            case \"rest\":\n                                $this->throwError(\"Unexpected rest before semicolon\");\n                            }\n                        }\n\n                        $newList = array(\"list\", \", \", $newList);\n\n                        switch ($values[0][0]) {\n                        case \"arg\":\n                            $newArg = array(\"arg\", $values[0][1], $newList);\n                            break;\n                        case \"lit\":\n                            $newArg = array(\"lit\", $newList);\n                            break;\n                        }\n\n                    } elseif ($values) { // 1 item\n                        $newArg = $values[0];\n                    }\n\n                    if ($newArg) {\n                        $values = array($newArg);\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n\n        if (!$this->literal(')')) {\n            $this->seek($s);\n            return false;\n        }\n\n        $args = $values;\n\n        return true;\n    }\n\n    // consume a list of tags\n    // this accepts a hanging delimiter\n    protected function tags(&$tags, $simple = false, $delim = ',') {\n        $tags = array();\n        while ($this->tag($tt, $simple)) {\n            $tags[] = $tt;\n            if (!$this->literal($delim)) break;\n        }\n        if (count($tags) == 0) return false;\n\n        return true;\n    }\n\n    // list of tags of specifying mixin path\n    // optionally separated by > (lazy, accepts extra >)\n    protected function mixinTags(&$tags) {\n        $tags = array();\n        while ($this->tag($tt, true)) {\n            $tags[] = $tt;\n            $this->literal(\">\");\n        }\n\n        if (!$tags) {\n            return false;\n        }\n\n        return true;\n    }\n\n    // a bracketed value (contained within in a tag definition)\n    protected function tagBracket(&$parts, &$hasExpression) {\n        // speed shortcut\n        if (isset($this->buffer[$this->count]) && $this->buffer[$this->count] != \"[\") {\n            return false;\n        }\n\n        $s = $this->seek();\n\n        $hasInterpolation = false;\n\n        if ($this->literal(\"[\", false)) {\n            $attrParts = array(\"[\");\n            // keyword, string, operator\n            while (true) {\n                if ($this->literal(\"]\", false)) {\n                    $this->count--;\n                    break; // get out early\n                }\n\n                if ($this->match('\\s+', $m)) {\n                    $attrParts[] = \" \";\n                    continue;\n                }\n                if ($this->string($str)) {\n                    // escape parent selector, (yuck)\n                    foreach ($str[2] as &$chunk) {\n                        $chunk = str_replace($this->lessc->parentSelector, \"$&$\", $chunk);\n                    }\n\n                    $attrParts[] = $str;\n                    $hasInterpolation = true;\n                    continue;\n                }\n\n                if ($this->keyword($word)) {\n                    $attrParts[] = $word;\n                    continue;\n                }\n\n                if ($this->interpolation($inter, false)) {\n                    $attrParts[] = $inter;\n                    $hasInterpolation = true;\n                    continue;\n                }\n\n                // operator, handles attr namespace too\n                if ($this->match('[|-~\\$\\*\\^=]+', $m)) {\n                    $attrParts[] = $m[0];\n                    continue;\n                }\n\n                break;\n            }\n\n            if ($this->literal(\"]\", false)) {\n                $attrParts[] = \"]\";\n                foreach ($attrParts as $part) {\n                    $parts[] = $part;\n                }\n                $hasExpression = $hasExpression || $hasInterpolation;\n                return true;\n            }\n            $this->seek($s);\n        }\n\n        $this->seek($s);\n        return false;\n    }\n\n    // a space separated list of selectors\n    protected function tag(&$tag, $simple = false) {\n        if ($simple) {\n            $chars = '^@,:;{}\\][>\\(\\) \"\\'';\n        } else {\n            $chars = '^@,;{}[\"\\'';\n        }\n        $s = $this->seek();\n\n        $hasExpression = false;\n        $parts = array();\n        while ($this->tagBracket($parts, $hasExpression));\n\n        $oldWhite = $this->eatWhiteDefault;\n        $this->eatWhiteDefault = false;\n\n        while (true) {\n            if ($this->match('(['.$chars.'0-9]['.$chars.']*)', $m)) {\n                $parts[] = $m[1];\n                if ($simple) break;\n\n                while ($this->tagBracket($parts, $hasExpression));\n                continue;\n            }\n\n            if (isset($this->buffer[$this->count]) && $this->buffer[$this->count] == \"@\") {\n                if ($this->interpolation($interp)) {\n                    $hasExpression = true;\n                    $interp[2] = true; // don't unescape\n                    $parts[] = $interp;\n                    continue;\n                }\n\n                if ($this->literal(\"@\")) {\n                    $parts[] = \"@\";\n                    continue;\n                }\n            }\n\n            if ($this->unit($unit)) { // for keyframes\n                $parts[] = $unit[1];\n                $parts[] = $unit[2];\n                continue;\n            }\n\n            break;\n        }\n\n        $this->eatWhiteDefault = $oldWhite;\n        if (!$parts) {\n            $this->seek($s);\n            return false;\n        }\n\n        if ($hasExpression) {\n            $tag = array(\"exp\", array(\"string\", \"\", $parts));\n        } else {\n            $tag = trim(implode($parts));\n        }\n\n        $this->whitespace();\n        return true;\n    }\n\n    // a css function\n    protected function func(&$func) {\n        $s = $this->seek();\n\n        if ($this->match('(%|[\\w\\-_][\\w\\-_:\\.]+|[\\w_])', $m) && $this->literal('(')) {\n            $fname = $m[1];\n\n            $sPreArgs = $this->seek();\n\n            $args = array();\n            while (true) {\n                $ss = $this->seek();\n                // this ugly nonsense is for ie filter properties\n                if ($this->keyword($name) && $this->literal('=') && $this->expressionList($value)) {\n                    $args[] = array(\"string\", \"\", array($name, \"=\", $value));\n                } else {\n                    $this->seek($ss);\n                    if ($this->expressionList($value)) {\n                        $args[] = $value;\n                    }\n                }\n\n                if (!$this->literal(',')) break;\n            }\n            $args = array('list', ',', $args);\n\n            if ($this->literal(')')) {\n                $func = array('function', $fname, $args);\n                return true;\n            } elseif ($fname == 'url') {\n                // couldn't parse and in url? treat as string\n                $this->seek($sPreArgs);\n                if ($this->openString(\")\", $string) && $this->literal(\")\")) {\n                    $func = array('function', $fname, $string);\n                    return true;\n                }\n            }\n        }\n\n        $this->seek($s);\n        return false;\n    }\n\n    // consume a less variable\n    protected function variable(&$name) {\n        $s = $this->seek();\n        if ($this->literal($this->lessc->vPrefix, false) &&\n            ($this->variable($sub) || $this->keyword($name))\n        ) {\n            if (!empty($sub)) {\n                $name = array('variable', $sub);\n            } else {\n                $name = $this->lessc->vPrefix.$name;\n            }\n            return true;\n        }\n\n        $name = null;\n        $this->seek($s);\n        return false;\n    }\n\n    /**\n     * Consume an assignment operator\n     * Can optionally take a name that will be set to the current property name\n     */\n    protected function assign($name = null) {\n        if ($name) $this->currentProperty = $name;\n        return $this->literal(':') || $this->literal('=');\n    }\n\n    // consume a keyword\n    protected function keyword(&$word) {\n        if ($this->match('([\\w_\\-\\*!\"][\\w\\-_\"]*)', $m)) {\n            $word = $m[1];\n            return true;\n        }\n        return false;\n    }\n\n    // consume an end of statement delimiter\n    protected function end() {\n        if ($this->literal(';', false)) {\n            return true;\n        } elseif ($this->count == strlen($this->buffer) || $this->buffer[$this->count] == '}') {\n            // if there is end of file or a closing block next then we don't need a ;\n            return true;\n        }\n        return false;\n    }\n\n    protected function guards(&$guards) {\n        $s = $this->seek();\n\n        if (!$this->literal(\"when\")) {\n            $this->seek($s);\n            return false;\n        }\n\n        $guards = array();\n\n        while ($this->guardGroup($g)) {\n            $guards[] = $g;\n            if (!$this->literal(\",\")) break;\n        }\n\n        if (count($guards) == 0) {\n            $guards = null;\n            $this->seek($s);\n            return false;\n        }\n\n        return true;\n    }\n\n    // a bunch of guards that are and'd together\n    // TODO rename to guardGroup\n    protected function guardGroup(&$guardGroup) {\n        $s = $this->seek();\n        $guardGroup = array();\n        while ($this->guard($guard)) {\n            $guardGroup[] = $guard;\n            if (!$this->literal(\"and\")) break;\n        }\n\n        if (count($guardGroup) == 0) {\n            $guardGroup = null;\n            $this->seek($s);\n            return false;\n        }\n\n        return true;\n    }\n\n    protected function guard(&$guard) {\n        $s = $this->seek();\n        $negate = $this->literal(\"not\");\n\n        if ($this->literal(\"(\") && $this->expression($exp) && $this->literal(\")\")) {\n            $guard = $exp;\n            if ($negate) $guard = array(\"negate\", $guard);\n            return true;\n        }\n\n        $this->seek($s);\n        return false;\n    }\n\n    /* raw parsing functions */\n\n    protected function literal($what, $eatWhitespace = null) {\n        if ($eatWhitespace === null) $eatWhitespace = $this->eatWhiteDefault;\n\n        // shortcut on single letter\n        if (!isset($what[1]) && isset($this->buffer[$this->count])) {\n            if ($this->buffer[$this->count] == $what) {\n                if (!$eatWhitespace) {\n                    $this->count++;\n                    return true;\n                }\n                // goes below...\n            } else {\n                return false;\n            }\n        }\n\n        if (!isset(self::$literalCache[$what])) {\n            self::$literalCache[$what] = lessc::preg_quote($what);\n        }\n\n        return $this->match(self::$literalCache[$what], $m, $eatWhitespace);\n    }\n\n    protected function genericList(&$out, $parseItem, $delim=\"\", $flatten=true) {\n        $s = $this->seek();\n        $items = array();\n        while ($this->$parseItem($value)) {\n            $items[] = $value;\n            if ($delim) {\n                if (!$this->literal($delim)) break;\n            }\n        }\n\n        if (count($items) == 0) {\n            $this->seek($s);\n            return false;\n        }\n\n        if ($flatten && count($items) == 1) {\n            $out = $items[0];\n        } else {\n            $out = array(\"list\", $delim, $items);\n        }\n\n        return true;\n    }\n\n\n    // advance counter to next occurrence of $what\n    // $until - don't include $what in advance\n    // $allowNewline, if string, will be used as valid char set\n    protected function to($what, &$out, $until = false, $allowNewline = false) {\n        if (is_string($allowNewline)) {\n            $validChars = $allowNewline;\n        } else {\n            $validChars = $allowNewline ? \".\" : \"[^\\n]\";\n        }\n        if (!$this->match('('.$validChars.'*?)'.lessc::preg_quote($what), $m, !$until)) return false;\n        if ($until) $this->count -= strlen($what); // give back $what\n        $out = $m[1];\n        return true;\n    }\n\n    // try to match something on head of buffer\n    protected function match($regex, &$out, $eatWhitespace = null) {\n        if ($eatWhitespace === null) $eatWhitespace = $this->eatWhiteDefault;\n\n        $r = '/'.$regex.($eatWhitespace && !$this->writeComments ? '\\s*' : '').'/Ais';\n        if (preg_match($r, $this->buffer, $out, null, $this->count)) {\n            $this->count += strlen($out[0]);\n            if ($eatWhitespace && $this->writeComments) $this->whitespace();\n            return true;\n        }\n        return false;\n    }\n\n    // match some whitespace\n    protected function whitespace() {\n        if ($this->writeComments) {\n            $gotWhite = false;\n            while (preg_match(self::$whitePattern, $this->buffer, $m, null, $this->count)) {\n                if (isset($m[1]) && empty($this->seenComments[$this->count])) {\n                    $this->append(array(\"comment\", $m[1]));\n                    $this->seenComments[$this->count] = true;\n                }\n                $this->count += strlen($m[0]);\n                $gotWhite = true;\n            }\n            return $gotWhite;\n        } else {\n            $this->match(\"\", $m);\n            return strlen($m[0]) > 0;\n        }\n    }\n\n    // match something without consuming it\n    protected function peek($regex, &$out = null, $from=null) {\n        if (is_null($from)) $from = $this->count;\n        $r = '/'.$regex.'/Ais';\n        $result = preg_match($r, $this->buffer, $out, null, $from);\n\n        return $result;\n    }\n\n    // seek to a spot in the buffer or return where we are on no argument\n    protected function seek($where = null) {\n        if ($where === null) return $this->count;\n        else $this->count = $where;\n        return true;\n    }\n\n    /* misc functions */\n\n    public function throwError($msg = \"parse error\", $count = null) {\n        $count = is_null($count) ? $this->count : $count;\n\n        $line = $this->line +\n            substr_count(substr($this->buffer, 0, $count), \"\\n\");\n\n        if (!empty($this->sourceName)) {\n            $loc = \"$this->sourceName on line $line\";\n        } else {\n            $loc = \"line: $line\";\n        }\n\n        // TODO this depends on $this->count\n        if ($this->peek(\"(.*?)(\\n|$)\", $m, $count)) {\n            throw new exception(\"$msg: failed at `$m[1]` $loc\");\n        } else {\n            throw new exception(\"$msg: $loc\");\n        }\n    }\n\n    protected function pushBlock($selectors=null, $type=null) {\n        $b = new stdclass;\n        $b->parent = $this->env;\n\n        $b->type = $type;\n        $b->id = self::$nextBlockId++;\n\n        $b->isVararg = false; // TODO: kill me from here\n        $b->tags = $selectors;\n\n        $b->props = array();\n        $b->children = array();\n\n        $this->env = $b;\n        return $b;\n    }\n\n    // push a block that doesn't multiply tags\n    protected function pushSpecialBlock($type) {\n        return $this->pushBlock(null, $type);\n    }\n\n    // append a property to the current block\n    protected function append($prop, $pos = null) {\n        if ($pos !== null) $prop[-1] = $pos;\n        $this->env->props[] = $prop;\n    }\n\n    // pop something off the stack\n    protected function pop() {\n        $old = $this->env;\n        $this->env = $this->env->parent;\n        return $old;\n    }\n\n    // remove comments from $text\n    // todo: make it work for all functions, not just url\n    protected function removeComments($text) {\n        $look = array(\n            'url(', '//', '/*', '\"', \"'\"\n        );\n\n        $out = '';\n        $min = null;\n        while (true) {\n            // find the next item\n            foreach ($look as $token) {\n                $pos = strpos($text, $token);\n                if ($pos !== false) {\n                    if (!isset($min) || $pos < $min[1]) $min = array($token, $pos);\n                }\n            }\n\n            if (is_null($min)) break;\n\n            $count = $min[1];\n            $skip = 0;\n            $newlines = 0;\n            switch ($min[0]) {\n            case 'url(':\n                if (preg_match('/url\\(.*?\\)/', $text, $m, 0, $count))\n                    $count += strlen($m[0]) - strlen($min[0]);\n                break;\n            case '\"':\n            case \"'\":\n                if (preg_match('/'.$min[0].'.*?(?<!\\\\\\\\)'.$min[0].'/', $text, $m, 0, $count))\n                    $count += strlen($m[0]) - 1;\n                break;\n            case '//':\n                $skip = strpos($text, \"\\n\", $count);\n                if ($skip === false) $skip = strlen($text) - $count;\n                else $skip -= $count;\n                break;\n            case '/*':\n                if (preg_match('/\\/\\*.*?\\*\\//s', $text, $m, 0, $count)) {\n                    $skip = strlen($m[0]);\n                    $newlines = substr_count($m[0], \"\\n\");\n                }\n                break;\n            }\n\n            if ($skip == 0) $count += strlen($min[0]);\n\n            $out .= substr($text, 0, $count).str_repeat(\"\\n\", $newlines);\n            $text = substr($text, $count + $skip);\n\n            $min = null;\n        }\n\n        return $out.$text;\n    }\n\n}\n\nclass lessc_formatter_classic {\n    public $indentChar = \"  \";\n\n    public $break = \"\\n\";\n    public $open = \" {\";\n    public $close = \"}\";\n    public $selectorSeparator = \", \";\n    public $assignSeparator = \":\";\n\n    public $openSingle = \" { \";\n    public $closeSingle = \" }\";\n\n    public $disableSingle = false;\n    public $breakSelectors = false;\n\n    public $compressColors = false;\n\n    public function __construct() {\n        $this->indentLevel = 0;\n    }\n\n    public function indentStr($n = 0) {\n        return str_repeat($this->indentChar, max($this->indentLevel + $n, 0));\n    }\n\n    public function property($name, $value) {\n        return $name . $this->assignSeparator . $value . \";\";\n    }\n\n    protected function isEmpty($block) {\n        if (empty($block->lines)) {\n            foreach ($block->children as $child) {\n                if (!$this->isEmpty($child)) return false;\n            }\n\n            return true;\n        }\n        return false;\n    }\n\n    public function block($block) {\n        if ($this->isEmpty($block)) return;\n\n        $inner = $pre = $this->indentStr();\n\n        $isSingle = !$this->disableSingle &&\n            is_null($block->type) && count($block->lines) == 1;\n\n        if (!empty($block->selectors)) {\n            $this->indentLevel++;\n\n            if ($this->breakSelectors) {\n                $selectorSeparator = $this->selectorSeparator . $this->break . $pre;\n            } else {\n                $selectorSeparator = $this->selectorSeparator;\n            }\n\n            echo $pre .\n                implode($selectorSeparator, $block->selectors);\n            if ($isSingle) {\n                echo $this->openSingle;\n                $inner = \"\";\n            } else {\n                echo $this->open . $this->break;\n                $inner = $this->indentStr();\n            }\n\n        }\n\n        if (!empty($block->lines)) {\n            $glue = $this->break.$inner;\n            echo $inner . implode($glue, $block->lines);\n            if (!$isSingle && !empty($block->children)) {\n                echo $this->break;\n            }\n        }\n\n        foreach ($block->children as $child) {\n            $this->block($child);\n        }\n\n        if (!empty($block->selectors)) {\n            if (!$isSingle && empty($block->children)) echo $this->break;\n\n            if ($isSingle) {\n                echo $this->closeSingle . $this->break;\n            } else {\n                echo $pre . $this->close . $this->break;\n            }\n\n            $this->indentLevel--;\n        }\n    }\n}\n\nclass lessc_formatter_compressed extends lessc_formatter_classic {\n    public $disableSingle = true;\n    public $open = \"{\";\n    public $selectorSeparator = \",\";\n    public $assignSeparator = \":\";\n    public $break = \"\";\n    public $compressColors = true;\n\n    public function indentStr($n = 0) {\n        return \"\";\n    }\n}\n\nclass lessc_formatter_lessjs extends lessc_formatter_classic {\n    public $disableSingle = true;\n    public $breakSelectors = true;\n    public $assignSeparator = \": \";\n    public $selectorSeparator = \",\";\n}\n"
        },
        {
          "name": "lessify",
          "type": "blob",
          "size": 0.421875,
          "content": "#!/usr/bin/env php\n<?php\n\nif (php_sapi_name() != \"cli\") {\n    err($fa.$argv[0].\" must be run in the command line.\");\n    exit(1);\n}\n$exe = array_shift($argv); // remove filename\n\nif (!$fname = array_shift($argv)) {\n    exit(\"Usage: \".$exe.\" input-file\\n\");\n}\n\nrequire \"lessify.inc.php\";\n\ntry {\n    $parser = new lessify($fname);\n    echo $parser->parse();\n} catch (exception $e) {\n    exit(\"Fatal error: \".$e->getMessage().\"\\n\");\n}\n"
        },
        {
          "name": "lessify.inc.php",
          "type": "blob",
          "size": 12.59765625,
          "content": "<?php\n/**\n * lessify\n * Convert a css file into a less file\n * http://leafo.net/lessphp\n * Copyright 2010, leaf corcoran <leafot@gmail.com>\n *\n * WARNING: THIS DOES NOT WORK ANYMORE. NEEDS TO BE UPDATED FOR\n * LATEST VERSION OF LESSPHP.\n *\n */\n\nrequire \"lessc.inc.php\";\n\n//\n// check if the merge during mixin is overwriting values. should or should it not?\n//\n\n//\n// 1. split apart class tags\n//\n\nclass easyparse {\n    public $buffer;\n    public $count;\n\n    public function __construct($str) {\n        $this->count = 0;\n        $this->buffer = trim($str);\n    }\n\n    public function seek($where = null) {\n        if ($where === null) {\n            return $this->count;\n        }\n        $this->count = $where;\n        return true;\n    }\n\n    public function preg_quote($what) {\n        return preg_quote($what, '/');\n    }\n\n    public function match($regex, &$out, $eatWhitespace = true) {\n        $r = '/'.$regex.($eatWhitespace ? '\\s*' : '').'/Ais';\n        if (preg_match($r, $this->buffer, $out, null, $this->count)) {\n            $this->count += strlen($out[0]);\n            return true;\n        }\n        return false;\n    }\n\n    public function literal($what, $eatWhitespace = true) {\n        // this is here mainly prevent notice from { } string accessor\n        if ($this->count >= strlen($this->buffer)) return false;\n\n        // shortcut on single letter\n        if (!$eatWhitespace and strlen($what) === 1) {\n            if ($this->buffer{$this->count} == $what) {\n                $this->count++;\n                return true;\n            }\n            return false;\n        }\n\n        return $this->match($this->preg_quote($what), $m, $eatWhitespace);\n    }\n\n}\n\nclass tagparse extends easyparse {\n    static private $combinators = null;\n    static private $match_opts = null;\n\n    public function parse() {\n        if (empty(self::$combinators)) {\n            self::$combinators = '(' . implode('|', array_map(array($this, 'preg_quote'),\n                array('+', '>', '~'))).')';\n            self::$match_opts = '(' . implode('|', array_map(array($this, 'preg_quote'),\n                array('=', '~=', '|=', '$=', '*='))) . ')';\n        }\n\n        // crush whitespace\n        $this->buffer = preg_replace('/\\s+/', ' ', $this->buffer) . ' ';\n\n        $tags = array();\n        while ($this->tag($t)) {\n            $tags[] = $t;\n        }\n\n        return $tags;\n    }\n\n    public static function compileString($string) {\n        list(, $delim, $str) = $string;\n        $str = str_replace($delim, \"\\\\\" . $delim, $str);\n        $str = str_replace(\"\\n\", \"\\\\\\n\", $str);\n        return $delim . $str . $delim;\n    }\n\n    public static function compilePaths($paths) {\n        return implode(', ', array_map(array('self', 'compilePath'), $paths));\n    }\n\n    // array of tags\n    public static function compilePath($path) {\n        return implode(' ', array_map(array('self', 'compileTag'), $path));\n    }\n\n\n    public static function compileTag($tag) {\n        ob_start();\n        if (isset($tag['comb'])) echo $tag['comb'] . \" \";\n        if (isset($tag['front'])) echo $tag['front'];\n        if (isset($tag['attr'])) {\n            echo '[' . $tag['attr'];\n            if (isset($tag['op'])) {\n                echo $tag['op'] . $tag['op_value'];\n            }\n            echo ']';\n        }\n        return ob_get_clean();\n    }\n\n    public function string(&$out) {\n        $s = $this->seek();\n\n        if ($this->literal('\"')) {\n            $delim = '\"';\n        } elseif ($this->literal(\"'\")) {\n            $delim = \"'\";\n        } else {\n            return false;\n        }\n\n        while (true) {\n            // step through letters looking for either end or escape\n            $buff = \"\";\n            $escapeNext = false;\n            $finished = false;\n            for ($i = $this->count; $i < strlen($this->buffer); $i++) {\n                $char = $this->buffer[$i];\n                switch ($char) {\n                case $delim:\n                    if ($escapeNext) {\n                        $buff .= $char;\n                        $escapeNext = false;\n                        break;\n                    }\n                    $finished = true;\n                    break 2;\n                case \"\\\\\":\n                    if ($escapeNext) {\n                        $buff .= $char;\n                        $escapeNext = false;\n                    } else {\n                        $escapeNext = true;\n                    }\n                    break;\n                case \"\\n\":\n                    if (!$escapeNext) {\n                        break 3;\n                    }\n\n                    $buff .= $char;\n                    $escapeNext = false;\n                    break;\n                default:\n                    if ($escapeNext) {\n                        $buff .= \"\\\\\";\n                        $escapeNext = false;\n                    }\n                    $buff .= $char;\n                }\n            }\n            if (!$finished) break;\n            $out = array('string', $delim, $buff);\n            $this->seek($i+1);\n            return true;\n        }\n\n        $this->seek($s);\n        return false;\n    }\n\n    public function tag(&$out) {\n        $s = $this->seek();\n        $tag = array();\n        if ($this->combinator($op)) $tag['comb'] = $op;\n\n        if (!$this->match('(.*?)( |$|\\[|'.self::$combinators.')', $match)) {\n            $this->seek($s);\n            return false;\n        }\n\n        if (!empty($match[3])) {\n            // give back combinator\n            $this->count-=strlen($match[3]);\n        }\n\n        if (!empty($match[1])) $tag['front'] = $match[1];\n\n        if ($match[2] == '[') {\n            if ($this->ident($i)) {\n                $tag['attr'] = $i;\n\n                if ($this->match(self::$match_opts, $m) && $this->value($v)) {\n                    $tag['op'] = $m[1];\n                    $tag['op_value'] = $v;\n                }\n\n                if ($this->literal(']')) {\n                    $out = $tag;\n                    return true;\n                }\n            }\n        } elseif (isset($tag['front'])) {\n            $out = $tag;\n            return true;\n        }\n\n        $this->seek($s);\n        return false;\n    }\n\n    public function ident(&$out) {\n        // [-]?{nmstart}{nmchar}*\n        // nmstart: [_a-z]|{nonascii}|{escape}\n        // nmchar: [_a-z0-9-]|{nonascii}|{escape}\n        if ($this->match('(-?[_a-z][_\\w]*)', $m)) {\n            $out = $m[1];\n            return true;\n        }\n        return false;\n    }\n\n    public function value(&$out) {\n        if ($this->string($str)) {\n            $out = $this->compileString($str);\n            return true;\n        } elseif ($this->ident($id)) {\n            $out = $id;\n            return true;\n        }\n        return false;\n    }\n\n\n    public function combinator(&$op) {\n        if ($this->match(self::$combinators, $m)) {\n            $op = $m[1];\n            return true;\n        }\n        return false;\n    }\n}\n\nclass nodecounter {\n    public $count = 0;\n    public $children = array();\n\n    public $name;\n    public $child_blocks;\n    public $the_block;\n\n    public function __construct($name) {\n        $this->name = $name;\n    }\n\n    public function dump($stack = null) {\n        if (is_null($stack)) $stack = array();\n        $stack[] = $this->getName();\n        echo implode(' -> ', $stack) . \" ($this->count)\\n\";\n        foreach ($this->children as $child) {\n            $child->dump($stack);\n        }\n    }\n\n    public static function compileProperties($c, $block) {\n        foreach ($block as $name => $value) {\n            if ($c->isProperty($name, $value)) {\n                echo $c->compileProperty($name, $value) . \"\\n\";\n            }\n        }\n    }\n\n    public function compile($c, $path = null) {\n        if (is_null($path)) $path = array();\n        $path[] = $this->name;\n\n        $isVisible = !is_null($this->the_block) || !is_null($this->child_blocks);\n\n        if ($isVisible) {\n            echo $c->indent(implode(' ', $path) . ' {');\n            $c->indentLevel++;\n            $path = array();\n\n            if ($this->the_block) {\n                $this->compileProperties($c, $this->the_block);\n            }\n\n            if ($this->child_blocks) {\n                foreach ($this->child_blocks as $block) {\n                    echo $c->indent(tagparse::compilePaths($block['__tags']).' {');\n                    $c->indentLevel++;\n                    $this->compileProperties($c, $block);\n                    $c->indentLevel--;\n                    echo $c->indent('}');\n                }\n            }\n        }\n\n        // compile child nodes\n        foreach ($this->children as $node) {\n            $node->compile($c, $path);\n        }\n\n        if ($isVisible) {\n            $c->indentLevel--;\n            echo $c->indent('}');\n        }\n\n    }\n\n    public function getName() {\n        if (is_null($this->name)) return \"[root]\";\n        else return $this->name;\n    }\n\n    public function getNode($name) {\n        if (!isset($this->children[$name])) {\n            $this->children[$name] = new nodecounter($name);\n        }\n\n        return $this->children[$name];\n    }\n\n    public function findNode($path) {\n        $current = $this;\n        for ($i = 0; $i < count($path); $i++) {\n            $t = tagparse::compileTag($path[$i]);\n            $current = $current->getNode($t);\n        }\n\n        return $current;\n    }\n\n    public function addBlock($path, $block) {\n        $node = $this->findNode($path);\n        if (!is_null($node->the_block)) throw new exception(\"can this happen?\");\n\n        unset($block['__tags']);\n        $node->the_block = $block;\n    }\n\n    public function addToNode($path, $block) {\n        $node = $this->findNode($path);\n        $node->child_blocks[] = $block;\n    }\n}\n\n/**\n * create a less file from a css file by combining blocks where appropriate\n */\nclass lessify extends lessc {\n    public function dump() {\n        print_r($this->env);\n    }\n\n    public function parse($str = null) {\n        $this->prepareParser($str ? $str : $this->buffer);\n        while (false !== $this->parseChunk());\n\n        $root = new nodecounter(null);\n\n        // attempt to preserve some of the block order\n        $order = array();\n\n        $visitedTags = array();\n        foreach (end($this->env) as $name => $block) {\n            if (!$this->isBlock($name, $block)) continue;\n            if (isset($visitedTags[$name])) continue;\n\n            foreach ($block['__tags'] as $t) {\n                $visitedTags[$t] = true;\n            }\n\n            // skip those with more than 1\n            if (count($block['__tags']) == 1) {\n                $p = new tagparse(end($block['__tags']));\n                $path = $p->parse();\n                $root->addBlock($path, $block);\n                $order[] = array('compressed', $path, $block);\n                continue;\n            } else {\n                $common = null;\n                $paths = array();\n                foreach ($block['__tags'] as $rawtag) {\n                    $p = new tagparse($rawtag);\n                    $paths[] = $path = $p->parse();\n                    if (is_null($common)) $common = $path;\n                    else {\n                        $new_common = array();\n                        foreach ($path as $tag) {\n                            $head = array_shift($common);\n                            if ($tag == $head) {\n                                $new_common[] = $head;\n                            } else break;\n                        }\n                        $common = $new_common;\n                        if (empty($common)) {\n                            // nothing in common\n                            break;\n                        }\n                    }\n                }\n\n                if (!empty($common)) {\n                    $new_paths = array();\n                    foreach ($paths as $p) $new_paths[] = array_slice($p, count($common));\n                    $block['__tags'] = $new_paths;\n                    $root->addToNode($common, $block);\n                    $order[] = array('compressed', $common, $block);\n                    continue;\n                }\n\n            }\n\n            $order[] = array('none', $block['__tags'], $block);\n        }\n\n\n        $compressed = $root->children;\n        foreach ($order as $item) {\n            list($type, $tags, $block) = $item;\n            if ($type == 'compressed') {\n                $top = tagparse::compileTag(reset($tags));\n                if (isset($compressed[$top])) {\n                    $compressed[$top]->compile($this);\n                    unset($compressed[$top]);\n                }\n            } else {\n                echo $this->indent(implode(', ', $tags).' {');\n                $this->indentLevel++;\n                nodecounter::compileProperties($this, $block);\n                $this->indentLevel--;\n                echo $this->indent('}');\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "package.sh",
          "type": "blob",
          "size": 0.7783203125,
          "content": "#!/bin/sh\n\n# creates tar.gz for current version\n\nVERSION=`./plessc -v | sed -n 's/^v\\(.*\\)$/\\1/p'`\nOUT_DIR=\"tmp/lessphp\"\nTMP=`dirname $OUT_DIR`\n\nmkdir -p $OUT_DIR\ntar -c `git ls-files` | tar -C $OUT_DIR -x\n\nrm $OUT_DIR/.gitignore\nrm $OUT_DIR/package.sh\nrm $OUT_DIR/lessify\nrm $OUT_DIR/lessify.inc.php\n\nOUT_NAME=\"lessphp-$VERSION.tar.gz\"\ntar -czf $OUT_NAME -C $TMP lessphp/\necho \"Wrote $OUT_NAME\"\n\nrm -r $TMP\n\n\necho\necho \"Don't forget to\"\necho \"* Update the version in lessc.inc.php (two places)\"\necho \"* Update the version in the README.md\"\necho \"* Update the version in docs.md (two places)\"\necho \"* Update the version in LICENSE\"\necho \"* Update @current_version in site.moon\"\necho \"* Add entry to feed.moon for changelog\"\necho \"* Update the -New- area on homepage with date and features\"\necho\n\n\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.162109375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit colors=\"true\">\n\t<testsuites>\n\t\t<testsuite>\n\t\t\t<directory>./tests</directory>\n\t\t</testsuite>\n\t</testsuites>\n</phpunit>\n"
        },
        {
          "name": "plessc",
          "type": "blob",
          "size": 4.7919921875,
          "content": "#!/usr/bin/env php\n<?php\n// Command line utility to compile LESS to STDOUT\n// Leaf Corcoran <leafot@gmail.com>, 2013\n\n$exe = array_shift($argv); // remove filename\n\n$HELP = <<<EOT\nUsage: $exe [options] input-file [output-file]\n\nOptions include:\n\n    -h, --help  Show this message\n    -v          Print the version\n    -f=format   Set the output format, includes \"default\", \"compressed\"\n    -c          Keep /* */ comments in output\n    -r          Read from STDIN instead of input-file\n    -w          Watch input-file, and compile to output-file if it is changed\n    -T          Dump formatted parse tree\n    -X          Dump raw parse tree\n\n\nEOT;\n\n$opts = getopt('hvrwncXTf:', array('help'));\nwhile (count($argv) > 0 && preg_match('/^-([-hvrwncXT]$|[f]=)/', $argv[0])) {\n\tarray_shift($argv);\n}\n\nfunction has() {\n\tglobal $opts;\n\tforeach (func_get_args() as $arg) {\n\t\tif (isset($opts[$arg])) return true;\n\t}\n\treturn false;\n}\n\nif (has(\"h\", \"help\")) {\n\texit($HELP);\n}\n\nerror_reporting(E_ALL);\n$path  = realpath(dirname(__FILE__)).'/';\n\nrequire $path.\"lessc.inc.php\";\n\n$VERSION = lessc::$VERSION;\n\n$fa = \"Fatal Error: \";\nfunction err($msg) {\n\tfwrite(STDERR, $msg.\"\\n\");\n}\n\nif (php_sapi_name() != \"cli\") {\n\terr($fa.$argv[0].\" must be run in the command line.\");\n\texit(1);\n}\n\nfunction make_less($fname = null) {\n\tglobal $opts;\n\t$l = new lessc($fname);\n\n\tif (has(\"f\")) {\n\t\t$format = $opts[\"f\"];\n\t\tif ($format != \"default\") $l->setFormatter($format);\n\t}\n\n\tif (has(\"c\")) {\n\t\t$l->setPreserveComments(true);\n\t}\n\n\treturn $l;\n}\n\nfunction process($data, $import = null) {\n\tglobal $fa;\n\n\t$l = make_less();\n\tif ($import) $l->importDir = $import;\n\n\ttry {\n\t\techo $l->parse($data);\n\t\texit(0);\n\t} catch (exception $ex) {\n\t\terr($fa.\"\\n\".str_repeat('=', 20).\"\\n\".\n\t\t\t$ex->getMessage());\n\t\texit(1);\n\t}\n}\n\nif (has(\"v\")) {\n\texit($VERSION.\"\\n\");\n}\n\nif (has(\"r\")) {\n\tif (!empty($argv)) {\n\t\t$data = $argv[0];\n\t} else {\n\t\t$data = \"\";\n\t\twhile (!feof(STDIN)) {\n\t\t\t$data .= fread(STDIN, 8192);\n\t\t}\n\t}\n\texit(process($data));\n}\n\nif (has(\"w\")) {\n\t// need two files\n\tif (!is_file($in = array_shift($argv)) ||\n\t\tnull == $out = array_shift($argv))\n\t{\n\t\terr($fa.$exe.\" -w infile outfile\");\n\t\texit(1);\n\t}\n\n\techo \"Watching \".$in.\n\t\t(has(\"n\") ? ' with notifications' : '').\n\t\t\", press Ctrl + c to exit.\\n\";\n\n\t$cache = $in;\n\t$last_action = 0;\n\twhile (true) {\n\t\tclearstatcache();\n\n\t\t// check if anything has changed since last fail\n\t\t$updated = false;\n\t\tif (is_array($cache)) {\n\t\t\tforeach ($cache['files'] as $fname=>$_) {\n\t\t\t\tif (filemtime($fname) > $last_action) {\n\t\t\t\t\t$updated = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else $updated = true;\n\n\t\t// try to compile it\n\t\tif ($updated) {\n\t\t\t$last_action = time();\n\n\t\t\ttry {\n\t\t\t\t$cache = lessc::cexecute($cache);\n\t\t\t\techo \"Writing updated file: \".$out.\"\\n\";\n\t\t\t\tif (!file_put_contents($out, $cache['compiled'])) {\n\t\t\t\t\terr($fa.\"Could not write to file \".$out);\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t} catch (exception $ex) {\n\t\t\t\techo \"\\nFatal Error:\\n\".str_repeat('=', 20).\"\\n\".\n\t\t\t\t\t$ex->getMessage().\"\\n\\n\";\n\n\t\t\t\tif (has(\"n\")) {\n\t\t\t\t\t`notify-send -u critical \"compile failed\" \"{$ex->getMessage()}\"`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsleep(1);\n\t}\n\texit(0);\n}\n\nif (!$fname = array_shift($argv)) {\n\techo $HELP;\n\texit(1);\n}\n\nfunction dumpValue($node, $depth = 0) {\n\tif (is_object($node)) {\n\t\t$indent = str_repeat(\"  \", $depth);\n\t\t$out = array();\n\t\tforeach ($node->props as $prop) {\n\t\t\t$out[] = $indent . dumpValue($prop, $depth + 1);\n\t\t}\n\t\t$out = implode(\"\\n\", $out);\n\t\tif (!empty($node->tags)) {\n\t\t\t$out = \"+ \".implode(\", \", $node->tags).\"\\n\".$out;\n\t\t}\n\t\treturn $out;\n\t} elseif (is_array($node)) {\n\t\tif (empty($node)) return \"[]\";\n\t\t$type = $node[0];\n\t\tif ($type == \"block\")\n\t\t\treturn dumpValue($node[1], $depth);\n\n\t\t$out = array();\n\t\tforeach ($node as $value) {\n\t\t\t$out[] = dumpValue($value, $depth);\n\t\t}\n\t\treturn \"{ \".implode(\", \", $out).\" }\";\n\t} else {\n\t\tif (is_string($node) && preg_match(\"/[\\s,]/\", $node)) {\n\t\t\treturn '\"'.$node.'\"';\n\t\t}\n\t\treturn $node; // normal value\n\t}\n}\n\n\nfunction stripValue($o, $toStrip) {\n\tif (is_array($o) || is_object($o)) {\n\t\t$isObject = is_object($o);\n\t\t$o = (array)$o;\n\t\tforeach ($toStrip as $removeKey) {\n\t\t\tif (!empty($o[$removeKey])) {\n\t\t\t\t$o[$removeKey] = \"*stripped*\";\n\t\t\t}\n\t\t}\n\n\t\tforeach ($o as $k => $v) {\n\t\t\t$o[$k] = stripValue($v, $toStrip);\n\t\t}\n\n\t\tif ($isObject) {\n\t\t\t$o = (object)$o;\n\t\t}\n\t}\n\n\treturn $o;\n}\n\nfunction dumpWithoutParent($o, $alsoStrip=array()) {\n\t$toStrip = array_merge(array(\"parent\"), $alsoStrip);\n\tprint_r(stripValue($o, $toStrip));\n}\n\ntry {\n\t$less = make_less($fname);\n\tif (has(\"T\", \"X\")) {\n\t\t$parser = new lessc_parser($less, $fname);\n\t\t$tree = $parser->parse(file_get_contents($fname));\n\t\tif (has(\"X\"))\n\t\t\t$out = print_r($tree, 1);\n\t\telse\n\t\t\t$out = dumpValue($tree).\"\\n\";\n\t} else {\n\t\t$out = $less->parse();\n\t}\n\n\tif (!$fout = array_shift($argv)) {\n\t\techo $out;\n\t} else {\n\t\tfile_put_contents($fout, $out);\n\t}\n\n} catch (exception $ex) {\n\terr($fa.$ex->getMessage());\n\texit(1);\n}\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}