{
  "metadata": {
    "timestamp": 1736712078554,
    "page": 631,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yiisoft/yii2-app-advanced",
      "stars": 1669,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bowerrc",
          "type": "blob",
          "size": 0.0419921875,
          "content": "{\n    \"directory\" : \"vendor/bower-asset\"\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.212890625,
          "content": "# Ignore all test and documentation for archive\n/.github            export-ignore\n/.gitattributes     export-ignore\n/.scrutinizer.yml   export-ignore\n/.travis.yml        export-ignore\n/docs               export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6123046875,
          "content": "# yii console commands\n/yii\n/yii_test\n/yii_test.bat\n\n# phpstorm project files\n.idea\n\n# netbeans project files\nnbproject\n\n# zend studio for eclipse project files\n.buildpath\n.project\n.settings\n\n# windows thumbnail cache\nThumbs.db\n\n# composer vendor dir\n/vendor\n\n# composer itself is not needed\ncomposer.phar\n\n# Mac DS_Store Files\n.DS_Store\n\n# phpunit itself is not needed\nphpunit.phar\n# local phpunit config\n/phpunit.xml\n\n# vagrant runtime\n/.vagrant\n\n# ignore generated files\n/frontend/web/index.php\n/frontend/web/index-test.php\n/frontend/web/robots.txt\n/backend/web/index.php\n/backend/web/index-test.php\n/backend/web/robots.txt\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.48828125,
          "content": "Copyright Â© 2008 by Yii Software LLC (http://www.yiisoft.com)\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n * Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in\n   the documentation and/or other materials provided with the\n   distribution.\n * Neither the name of Yii Software LLC nor the names of its\n   contributors may be used to endorse or promote products derived\n   from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\nANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.990234375,
          "content": "<p align=\"center\">\n    <a href=\"https://github.com/yiisoft\" target=\"_blank\">\n        <img src=\"https://avatars0.githubusercontent.com/u/993323\" height=\"100px\">\n    </a>\n    <h1 align=\"center\">Yii 2 Advanced Project Template</h1>\n    <br>\n</p>\n\nYii 2 Advanced Project Template is a skeleton [Yii 2](https://www.yiiframework.com/) application best for\ndeveloping complex Web applications with multiple tiers.\n\nThe template includes three tiers: front end, back end, and console, each of which\nis a separate Yii application.\n\nThe template is designed to work in a team development environment. It supports\ndeploying the application in different environments.\n\nDocumentation is at [docs/guide/README.md](docs/guide/README.md).\n\n[![Latest Stable Version](https://img.shields.io/packagist/v/yiisoft/yii2-app-advanced.svg)](https://packagist.org/packages/yiisoft/yii2-app-advanced)\n[![Total Downloads](https://img.shields.io/packagist/dt/yiisoft/yii2-app-advanced.svg)](https://packagist.org/packages/yiisoft/yii2-app-advanced)\n[![build](https://github.com/yiisoft/yii2-app-advanced/workflows/build/badge.svg)](https://github.com/yiisoft/yii2-app-advanced/actions?query=workflow%3Abuild)\n\nDIRECTORY STRUCTURE\n-------------------\n\n```\ncommon\n    config/              contains shared configurations\n    mail/                contains view files for e-mails\n    models/              contains model classes used in both backend and frontend\n    tests/               contains tests for common classes    \nconsole\n    config/              contains console configurations\n    controllers/         contains console controllers (commands)\n    migrations/          contains database migrations\n    models/              contains console-specific model classes\n    runtime/             contains files generated during runtime\nbackend\n    assets/              contains application assets such as JavaScript and CSS\n    config/              contains backend configurations\n    controllers/         contains Web controller classes\n    models/              contains backend-specific model classes\n    runtime/             contains files generated during runtime\n    tests/               contains tests for backend application    \n    views/               contains view files for the Web application\n    web/                 contains the entry script and Web resources\nfrontend\n    assets/              contains application assets such as JavaScript and CSS\n    config/              contains frontend configurations\n    controllers/         contains Web controller classes\n    models/              contains frontend-specific model classes\n    runtime/             contains files generated during runtime\n    tests/               contains tests for frontend application\n    views/               contains view files for the Web application\n    web/                 contains the entry script and Web resources\n    widgets/             contains frontend widgets\nvendor/                  contains dependent 3rd-party packages\nenvironments/            contains environment-based overrides\n```\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 2.845703125,
          "content": "require 'yaml'\nrequire 'fileutils'\n\nrequired_plugins_installed = nil\nrequired_plugins = %w( vagrant-hostmanager vagrant-vbguest )\nrequired_plugins.each do |plugin|\n  unless Vagrant.has_plugin? plugin\n    system \"vagrant plugin install #{plugin}\"\n    required_plugins_installed = true\n  end\nend\n\n# IF plugin[s] was just installed - restart required\nif required_plugins_installed\n  # Get CLI command[s] and call again\n  system 'vagrant' + ARGV.to_s.gsub(/\\[\\\"|\\\", \\\"|\\\"\\]/, ' ')\n  exit\nend\n\ndomains = {\n  frontend: 'y2aa-frontend.test',\n  backend:  'y2aa-backend.test'\n}\n\nconfig = {\n  local: './vagrant/config/vagrant-local.yml',\n  example: './vagrant/config/vagrant-local.example.yml'\n}\n\n# copy config from example if local config not exists\nFileUtils.cp config[:example], config[:local] unless File.exist?(config[:local])\n# read config\noptions = YAML.load_file config[:local]\n\n# check github token\nif options['github_token'].nil? || options['github_token'].to_s.length != 40\n  puts \"You must place REAL GitHub token into configuration:\\n/yii2-app-advanced/vagrant/config/vagrant-local.yml\"\n  exit\nend\n\n# vagrant configurate\nVagrant.configure(2) do |config|\n  # select the box\n  config.vm.box = 'bento/ubuntu-18.04'\n\n  # should we ask about box updates?\n  config.vm.box_check_update = options['box_check_update']\n\n  config.vm.provider 'virtualbox' do |vb|\n    # machine cpus count\n    vb.cpus = options['cpus']\n    # machine memory size\n    vb.memory = options['memory']\n    # machine name (for VirtualBox UI)\n    vb.name = options['machine_name']\n  end\n\n  # machine name (for vagrant console)\n  config.vm.define options['machine_name']\n\n  # machine name (for guest machine console)\n  config.vm.hostname = options['machine_name']\n\n  # network settings\n  config.vm.network 'private_network', ip: options['ip']\n\n  # sync: folder 'yii2-app-advanced' (host machine) -> folder '/app' (guest machine)\n  config.vm.synced_folder './', '/app', owner: 'vagrant', group: 'vagrant'\n\n  # disable folder '/vagrant' (guest machine)\n  config.vm.synced_folder '.', '/vagrant', disabled: true\n\n  # hosts settings (host machine)\n  config.vm.provision :hostmanager\n  config.hostmanager.enabled            = true\n  config.hostmanager.manage_host        = true\n  config.hostmanager.ignore_private_ip  = false\n  config.hostmanager.include_offline    = true\n  config.hostmanager.aliases            = domains.values\n\n  # provisioners\n  config.vm.provision 'shell', path: './vagrant/provision/once-as-root.sh', args: [options['timezone'], options['ip']]\n  config.vm.provision 'shell', path: './vagrant/provision/once-as-vagrant.sh', args: [options['github_token']], privileged: false\n  config.vm.provision 'shell', path: './vagrant/provision/always-as-root.sh', run: 'always'\n\n  # post-install message (vagrant console)\n  config.vm.post_up_message = \"Frontend URL: http://#{domains[:frontend]}\\nBackend URL: http://#{domains[:backend]}\"\nend\n"
        },
        {
          "name": "backend",
          "type": "tree",
          "content": null
        },
        {
          "name": "codeception.yml",
          "type": "blob",
          "size": 0.16796875,
          "content": "# global codeception file to run tests from all apps\ninclude:\n    - common\n    - frontend\n    - backend\npaths:\n    output: console/runtime/output\nsettings:\n    colors: true"
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.8701171875,
          "content": "{\n    \"name\": \"yiisoft/yii2-app-advanced\",\n    \"description\": \"Yii 2 Advanced Project Template\",\n    \"keywords\": [\"yii2\", \"framework\", \"advanced\", \"project template\"],\n    \"homepage\": \"https://www.yiiframework.com/\",\n    \"type\": \"project\",\n    \"license\": \"BSD-3-Clause\",\n    \"support\": {\n        \"issues\": \"https://github.com/yiisoft/yii2/issues?state=open\",\n        \"forum\": \"https://www.yiiframework.com/forum/\",\n        \"wiki\": \"https://www.yiiframework.com/wiki/\",\n        \"irc\": \"ircs://irc.libera.chat:6697/yii\",\n        \"source\": \"https://github.com/yiisoft/yii2\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"require\": {\n        \"php\": \">=7.4.0\",\n        \"yiisoft/yii2\": \"~2.0.45\",\n        \"yiisoft/yii2-bootstrap5\": \"~2.0.2\",\n        \"yiisoft/yii2-symfonymailer\": \"~2.0.3\"\n    },\n    \"require-dev\": {\n        \"yiisoft/yii2-debug\": \"~2.1.0\",\n        \"yiisoft/yii2-gii\": \"~2.2.0\",\n        \"yiisoft/yii2-faker\": \"~2.0.0\",\n        \"phpunit/phpunit\": \"~9.5.0\",\n        \"codeception/codeception\": \"^5.0.0 || ^4.0\",\n        \"codeception/lib-innerbrowser\": \"^4.0 || ^3.0 || ^1.1\",\n        \"codeception/module-asserts\": \"^3.0 || ^1.1\",\n        \"codeception/module-yii2\": \"^1.1\",\n        \"codeception/module-filesystem\": \"^3.0 || ^2.0 || ^1.1\",\n        \"codeception/verify\": \"^3.0 || ^2.2\"\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"common\\\\tests\\\\\": [\"common/tests/\", \"common/tests/_support\"],\n            \"backend\\\\tests\\\\\": [\"backend/tests/\", \"backend/tests/_support\"],\n            \"frontend\\\\tests\\\\\": [\"frontend/tests/\", \"frontend/tests/_support\"]\n        }\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"yiisoft/yii2-composer\" : true\n        },\n        \"process-timeout\": 1800,\n        \"fxp-asset\": {\n            \"enabled\": false\n        }\n    },\n    \"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": \"https://asset-packagist.org\"\n        }\n    ]\n}\n"
        },
        {
          "name": "console",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.84375,
          "content": "version: '3.2'\n\nservices:\n\n  frontend:\n    build: frontend\n    ports:\n      - 20080:80\n    volumes:\n      # Re-use local composer cache via host-volume\n      - ~/.composer-docker/cache:/root/.composer/cache:delegated\n      # Mount source-code for development\n      - ./:/app\n\n  backend:\n    build: backend\n    ports:\n      - 21080:80\n    volumes:\n      # Re-use local composer cache via host-volume\n      - ~/.composer-docker/cache:/root/.composer/cache:delegated\n      # Mount source-code for development\n      - ./:/app\n\n  mysql:\n    image: mysql:5.7\n    environment:\n      - MYSQL_ROOT_PASSWORD=verysecret\n      - MYSQL_DATABASE=yii2advanced\n      - MYSQL_USER=yii2advanced\n      - MYSQL_PASSWORD=secret\n\n  #pgsql:\n  #  image: postgres:9.5\n  #  environment:\n  #    - POSTGRES_DB=yii2advanced\n  #    - POSTGRES_USER=yii2advanced\n  #    - POSTGRES_PASSWORD=secret"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "environments",
          "type": "tree",
          "content": null
        },
        {
          "name": "frontend",
          "type": "tree",
          "content": null
        },
        {
          "name": "init",
          "type": "blob",
          "size": 9.955078125,
          "content": "#!/usr/bin/env php\n<?php\n/**\n * Yii Application Initialization Tool\n *\n * In order to run in non-interactive mode:\n *\n * init --env=Development --overwrite=n\n */\n\nif (!extension_loaded('openssl')) {\n    die('The OpenSSL PHP extension is required by Yii2.');\n}\n\n$params = getParams();\n$root = str_replace('\\\\', '/', __DIR__);\n$envs = require \"$root/environments/index.php\";\n$envNames = array_keys($envs);\n\necho \"Yii Application Initialization Tool v1.0\\n\\n\";\n\n$envName = null;\nif (empty($params['env']) || $params['env'] === true) {\n    echo \"Which environment do you want the application to be initialized in?\\n\\n\";\n    foreach ($envNames as $i => $name) {\n        echo \"  [$i] $name\\n\";\n    }\n    echo \"\\n  Your choice [0-\" . (count($envs) - 1) . ', or \"q\" to quit] ';\n    $answer = trim(fgets(STDIN));\n\n    if (!ctype_digit($answer) || !in_array($answer, range(0, count($envs) - 1))) {\n        echo \"\\n  Quit initialization.\\n\";\n        exit(0);\n    }\n\n    if (isset($envNames[$answer])) {\n        $envName = $envNames[$answer];\n    }\n} else {\n    $envName = $params['env'];\n}\n\nif (!in_array($envName, $envNames, true)) {\n    $envsList = implode(', ', $envNames);\n    echo \"\\n  $envName is not a valid environment. Try one of the following: $envsList. \\n\";\n    exit(2);\n}\n\n$env = $envs[$envName];\n\nif (empty($params['env'])) {\n    echo \"\\n  Initialize the application under '{$envNames[$answer]}' environment? [yes|no] \";\n    $answer = trim(fgets(STDIN));\n    if (strncasecmp($answer, 'y', 1)) {\n        echo \"\\n  Quit initialization.\\n\";\n        exit(0);\n    }\n}\n\n$rootPath = \"$root/environments/{$env['path']}\";\nif (!is_dir($rootPath)) {\n    printError(\"$rootPath directory does not exist. Check path in $envName environment.\");\n    exit(3);\n}\n\necho \"\\n  Start initialization ...\\n\\n\";\n\n$files = getFileList($rootPath);\nif (isset($env['skipFiles'])) {\n    $skipFiles = $env['skipFiles'];\n    array_walk($skipFiles, function(&$value) use($env, $root) { $value = \"$root/$value\"; });\n    $files = array_diff($files, array_intersect_key($env['skipFiles'], array_filter($skipFiles, 'file_exists')));\n}\n$all = false;\nforeach ($files as $file) {\n    if (!copyFile($root, \"environments/{$env['path']}/$file\", $file, $all, $params)) {\n        break;\n    }\n}\n\n$filesToRemove = [];\n$skipFiles = !empty($env['skipFiles']) ? $env['skipFiles'] : [];\nforeach(array_column($envs, 'path') as $envPath) {\n    if ($env['path'] === $envPath) continue;\n\n\t$filesToRemove =\n        array_merge(\n            $filesToRemove,\n            array_diff(getFileList(\"$root/environments/{$envPath}\"), $files, $filesToRemove, $skipFiles)\n        );\n}\n$filesToRemove = array_filter($filesToRemove, 'file_exists');\nif ($filesToRemove) {\n\techo \"\\n  Remove files from other environments ...\\n\\n\";\n\n\t$all = false;\n\tforeach ($filesToRemove as $file) {\n\t\tif (!removeFile($root, $file, $all, $params)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\techo \"\\n\";\n}\n\n$callbacks = ['setCookieValidationKey', 'setWritable', 'setExecutable', 'createSymlink'];\nforeach ($callbacks as $callback) {\n    if (!empty($env[$callback])) {\n        $callback($root, $env[$callback]);\n    }\n}\n\necho \"\\n  ... initialization completed.\\n\\n\";\n\nfunction getFileList($root, $basePath = '')\n{\n    $files = [];\n    $handle = opendir($root);\n    while (($path = readdir($handle)) !== false) {\n        if ($path === '.git' || $path === '.svn' || $path === '.' || $path === '..') {\n            continue;\n        }\n        $fullPath = \"$root/$path\";\n        $relativePath = $basePath === '' ? $path : \"$basePath/$path\";\n        if (is_dir($fullPath)) {\n            $files = array_merge($files, getFileList($fullPath, $relativePath));\n        } else {\n            $files[] = $relativePath;\n        }\n    }\n    closedir($handle);\n    return $files;\n}\n\nfunction copyFile($root, $source, $target, &$all, $params)\n{\n    if (!is_file($root . '/' . $source)) {\n        echo \"       skip $target ($source not exist)\\n\";\n        return true;\n    }\n    if (is_file($root . '/' . $target)) {\n        if (file_get_contents($root . '/' . $source) === file_get_contents($root . '/' . $target)) {\n            echo \"  unchanged $target\\n\";\n            return true;\n        }\n        if ($all) {\n            echo \"  overwrite $target\\n\";\n        } else {\n            echo \"      exist $target\\n\";\n            echo \"            ...overwrite? [Yes|No|All|Quit] \";\n\n\n            $answer = !empty($params['overwrite']) ? $params['overwrite'] : trim(fgets(STDIN));\n            if (!strncasecmp($answer, 'q', 1)) {\n                return false;\n            } else {\n                if (!strncasecmp($answer, 'y', 1)) {\n                    echo \"  overwrite $target\\n\";\n                } else {\n                    if (!strncasecmp($answer, 'a', 1)) {\n                        echo \"  overwrite $target\\n\";\n                        $all = true;\n                    } else {\n                        echo \"       skip $target\\n\";\n                        return true;\n                    }\n                }\n            }\n        }\n        file_put_contents($root . '/' . $target, file_get_contents($root . '/' . $source));\n        return true;\n    }\n    echo \"   generate $target\\n\";\n    @mkdir(dirname($root . '/' . $target), 0777, true);\n    file_put_contents($root . '/' . $target, file_get_contents($root . '/' . $source));\n    return true;\n}\n\nfunction removeFile($root, $target, &$all, $params)\n{\n\tif (is_file($root . '/' . $target)) {\n\t\tif ($all) {\n\t\t\techo \"  delete $target\\n\";\n\t\t} else {\n\t\t\techo \"      delete $target\\n\";\n\t\t\techo \"            ...confirm? [Yes|No|All|Quit] \";\n\n\t\t\t$answer = !empty($params['delete']) ? $params['delete'] : trim(fgets(STDIN));\n\t\t\tif (!strncasecmp($answer, 'q', 1)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tif (!strncasecmp($answer, 'y', 1)) {\n\t\t\t\t\techo \"  delete $target\\n\";\n\t\t\t\t} else {\n\t\t\t\t\tif (!strncasecmp($answer, 'a', 1)) {\n\t\t\t\t\t\techo \"  delete $target\\n\";\n\t\t\t\t\t\t$all = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\techo \"       skip $target\\n\";\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn unlink($root . '/' . $target);\n\t}\n\n\treturn true;\n}\n\nfunction getParams()\n{\n    $rawParams = [];\n    if (isset($_SERVER['argv'])) {\n        $rawParams = $_SERVER['argv'];\n        array_shift($rawParams);\n    }\n\n    $params = [];\n    foreach ($rawParams as $param) {\n        if (preg_match('/^--([\\w-]*\\w)(=(.*))?$/', $param, $matches)) {\n            $name = $matches[1];\n            $params[$name] = isset($matches[3]) ? $matches[3] : true;\n        } else {\n            $params[] = $param;\n        }\n    }\n    return $params;\n}\n\nfunction setWritable($root, $paths)\n{\n    foreach ($paths as $writable) {\n        if (is_dir(\"$root/$writable\")) {\n            if (@chmod(\"$root/$writable\", 0777)) {\n                echo \"      chmod 0777 $writable\\n\";\n            } else {\n                printError(\"Operation chmod not permitted for directory $writable.\");\n            }\n        } else {\n            printError(\"Directory $writable does not exist.\");\n        }\n    }\n}\n\nfunction setExecutable($root, $paths)\n{\n    foreach ($paths as $executable) {\n        if (file_exists(\"$root/$executable\")) {\n            if (@chmod(\"$root/$executable\", 0755)) {\n                echo \"      chmod 0755 $executable\\n\";\n            } else {\n                printError(\"Operation chmod not permitted for $executable.\");\n            }\n        } else {\n            printError(\"$executable does not exist.\");\n        }\n    }\n}\n\nfunction setCookieValidationKey($root, $paths)\n{\n    foreach ($paths as $file) {\n        echo \"   generate cookie validation key in $file\\n\";\n        $file = $root . '/' . $file;\n        $length = 32;\n        $bytes = openssl_random_pseudo_bytes($length);\n        $key = strtr(substr(base64_encode($bytes), 0, $length), '+/=', '_-.');\n        $content = preg_replace('/((\"|\\')cookieValidationKey(\"|\\')\\s*=>\\s*)(\"\"|\\'\\')/', \"\\\\1'$key'\", file_get_contents($file));\n        file_put_contents($file, $content);\n    }\n}\n\nfunction createSymlink($root, $links)\n{\n    foreach ($links as $link => $target) {\n        //first removing folders to avoid errors if the folder already exists\n        @rmdir($root . \"/\" . $link);\n        //next removing existing symlink in order to update the target\n        if (is_link($root . \"/\" . $link)) {\n            @unlink($root . \"/\" . $link);\n        }\n        if (@symlink($root . \"/\" . $target, $root . \"/\" . $link)) {\n            echo \"      symlink $root/$target $root/$link\\n\";\n        } else {\n            printError(\"Cannot create symlink $root/$target $root/$link.\");\n        }\n    }\n}\n\n/**\n * Prints error message.\n * @param string $message message\n */\nfunction printError($message)\n{\n    echo \"\\n  \" . formatMessage(\"Error. $message\", ['fg-red']) . \" \\n\";\n}\n\n/**\n * Returns true if the stream supports colorization. ANSI colors are disabled if not supported by the stream.\n *\n * - windows without ansicon\n * - not tty consoles\n *\n * @return boolean true if the stream supports ANSI colors, otherwise false.\n */\nfunction ansiColorsSupported()\n{\n    return DIRECTORY_SEPARATOR === '\\\\'\n        ? getenv('ANSICON') !== false || getenv('ConEmuANSI') === 'ON'\n        : function_exists('posix_isatty') && @posix_isatty(STDOUT);\n}\n\n/**\n * Get ANSI code of style.\n * @param string $name style name\n * @return integer ANSI code of style.\n */\nfunction getStyleCode($name)\n{\n    $styles = [\n        'bold' => 1,\n        'fg-black' => 30,\n        'fg-red' => 31,\n        'fg-green' => 32,\n        'fg-yellow' => 33,\n        'fg-blue' => 34,\n        'fg-magenta' => 35,\n        'fg-cyan' => 36,\n        'fg-white' => 37,\n        'bg-black' => 40,\n        'bg-red' => 41,\n        'bg-green' => 42,\n        'bg-yellow' => 43,\n        'bg-blue' => 44,\n        'bg-magenta' => 45,\n        'bg-cyan' => 46,\n        'bg-white' => 47,\n    ];\n    return $styles[$name];\n}\n\n/**\n * Formats message using styles if STDOUT supports it.\n * @param string $message message\n * @param string[] $styles styles\n * @return string formatted message.\n */\nfunction formatMessage($message, $styles)\n{\n    if (empty($styles) || !ansiColorsSupported()) {\n        return $message;\n    }\n\n    return sprintf(\"\\x1b[%sm\", implode(';', array_map('getStyleCode', $styles))) . $message . \"\\x1b[0m\";\n}\n"
        },
        {
          "name": "init.bat",
          "type": "blob",
          "size": 0.3115234375,
          "content": "@echo off\n\nrem -------------------------------------------------------------\nrem  Yii command line init script for Windows.\nrem -------------------------------------------------------------\n\n@setlocal\n\nset YII_PATH=%~dp0\n\nif \"%PHP_COMMAND%\" == \"\" set PHP_COMMAND=php.exe\n\n\"%PHP_COMMAND%\" \"%YII_PATH%init\" %*\n\n@endlocal\n"
        },
        {
          "name": "requirements.php",
          "type": "blob",
          "size": 5.66015625,
          "content": "<?php\n/**\n * Application requirement checker script.\n *\n * In order to run this script use the following console command:\n * php requirements.php\n *\n * In order to run this script from the web, you should copy it to the web root.\n * If you are using Linux you can create a hard link instead, using the following command:\n * ln ../../requirements.php requirements.php\n */\n\n// you may need to adjust this path to the correct Yii framework path\n// uncomment and adjust the following line if Yii is not located at the default path\n//$frameworkPath = dirname(__FILE__) . '/vendor/yiisoft/yii2';\nif (!isset($frameworkPath)) {\n    $searchPaths = array(\n        dirname(__FILE__) . '/vendor/yiisoft/yii2',\n        dirname(__FILE__) . '/../../vendor/yiisoft/yii2',\n    );\n    foreach ($searchPaths as $path) {\n        if (is_dir($path)) {\n            $frameworkPath = $path;\n            break;\n        }\n    }\n}\nif (!isset($frameworkPath) || !is_dir($frameworkPath)) {\n    $message = \"<h1>Error</h1>\\n\\n\"\n        . \"<p><strong>The path to yii framework seems to be incorrect.</strong></p>\\n\"\n        . '<p>You need to install Yii framework via composer or adjust the framework path in file <abbr title=\"' . __FILE__ . '\">' . basename(__FILE__) . \"</abbr>.</p>\\n\"\n        . '<p>Please refer to the <abbr title=\"' . dirname(dirname(dirname(__FILE__))) . \"/README.md\\\">README</abbr> on how to install Yii.</p>\\n\";\n    if (!empty($_SERVER['argv'])) {\n        // do not print HTML when used in console mode\n        echo strip_tags($message);\n    } else {\n        echo $message;\n    }\n    exit(1);\n}\n\nrequire_once $frameworkPath . '/requirements/YiiRequirementChecker.php';\n$requirementsChecker = new YiiRequirementChecker();\n\n$gdMemo = $imagickMemo = 'Either GD PHP extension with FreeType support or ImageMagick PHP extension with PNG support is required for image CAPTCHA.';\n$gdOK = $imagickOK = false;\n\nif (extension_loaded('imagick')) {\n    $imagick = new Imagick();\n    $imagickFormats = $imagick->queryFormats('PNG');\n    if (in_array('PNG', $imagickFormats)) {\n        $imagickOK = true;\n    } else {\n        $imagickMemo = 'Imagick extension should be installed with PNG support in order to be used for image CAPTCHA.';\n    }\n}\n\nif (extension_loaded('gd')) {\n    $gdInfo = gd_info();\n    if (!empty($gdInfo['FreeType Support'])) {\n        $gdOK = true;\n    } else {\n        $gdMemo = 'GD extension should be installed with FreeType support in order to be used for image CAPTCHA.';\n    }\n}\n\n/**\n * Adjust requirements according to your application specifics.\n */\n$requirements = array(\n    // Database :\n    array(\n        'name' => 'PDO extension',\n        'mandatory' => true,\n        'condition' => extension_loaded('pdo'),\n        'by' => 'All DB-related classes',\n    ),\n    array(\n        'name' => 'PDO SQLite extension',\n        'mandatory' => false,\n        'condition' => extension_loaded('pdo_sqlite'),\n        'by' => 'All DB-related classes',\n        'memo' => 'Required for SQLite database.',\n    ),\n    array(\n        'name' => 'PDO MySQL extension',\n        'mandatory' => false,\n        'condition' => extension_loaded('pdo_mysql'),\n        'by' => 'All DB-related classes',\n        'memo' => 'Required for MySQL database.',\n    ),\n    array(\n        'name' => 'PDO PostgreSQL extension',\n        'mandatory' => false,\n        'condition' => extension_loaded('pdo_pgsql'),\n        'by' => 'All DB-related classes',\n        'memo' => 'Required for PostgreSQL database.',\n    ),\n    // Cache :\n    array(\n        'name' => 'Memcache extension',\n        'mandatory' => false,\n        'condition' => extension_loaded('memcache') || extension_loaded('memcached'),\n        'by' => '<a href=\"https://www.yiiframework.com/doc-2.0/yii-caching-memcache.html\">MemCache</a>',\n        'memo' => extension_loaded('memcached') ? 'To use memcached set <a href=\"https://www.yiiframework.com/doc-2.0/yii-caching-memcache.html#$useMemcached-detail\">MemCache::useMemcached</a> to <code>true</code>.' : ''\n    ),\n    array(\n        'name' => 'APC extension',\n        'mandatory' => false,\n        'condition' => extension_loaded('apc'),\n        'by' => '<a href=\"https://www.yiiframework.com/doc-2.0/yii-caching-apccache.html\">ApcCache</a>',\n    ),\n    // CAPTCHA:\n    array(\n        'name' => 'GD PHP extension with FreeType support',\n        'mandatory' => false,\n        'condition' => $gdOK,\n        'by' => '<a href=\"https://www.yiiframework.com/doc-2.0/yii-captcha-captcha.html\">Captcha</a>',\n        'memo' => $gdMemo,\n    ),\n    array(\n        'name' => 'ImageMagick PHP extension with PNG support',\n        'mandatory' => false,\n        'condition' => $imagickOK,\n        'by' => '<a href=\"https://www.yiiframework.com/doc-2.0/yii-captcha-captcha.html\">Captcha</a>',\n        'memo' => $imagickMemo,\n    ),\n    // PHP ini :\n    'phpExposePhp' => array(\n        'name' => 'Expose PHP',\n        'mandatory' => false,\n        'condition' => $requirementsChecker->checkPhpIniOff(\"expose_php\"),\n        'by' => 'Security reasons',\n        'memo' => '\"expose_php\" should be disabled at php.ini',\n    ),\n    'phpAllowUrlInclude' => array(\n        'name' => 'PHP allow url include',\n        'mandatory' => false,\n        'condition' => $requirementsChecker->checkPhpIniOff(\"allow_url_include\"),\n        'by' => 'Security reasons',\n        'memo' => '\"allow_url_include\" should be disabled at php.ini',\n    ),\n    'phpSmtp' => array(\n        'name' => 'PHP mail SMTP',\n        'mandatory' => false,\n        'condition' => strlen(ini_get('SMTP')) > 0,\n        'by' => 'Email sending',\n        'memo' => 'PHP mail SMTP server required',\n    ),\n);\n\n$result = $requirementsChecker->checkYii()->check($requirements)->getResult();\n$requirementsChecker->render();\n\nexit($result['summary']['errors'] === 0 ? 0 : 1);\n"
        },
        {
          "name": "vagrant",
          "type": "tree",
          "content": null
        },
        {
          "name": "yii.bat",
          "type": "blob",
          "size": 0.3154296875,
          "content": "@echo off\n\nrem -------------------------------------------------------------\nrem  Yii command line bootstrap script for Windows.\nrem -------------------------------------------------------------\n\n@setlocal\n\nset YII_PATH=%~dp0\n\nif \"%PHP_COMMAND%\" == \"\" set PHP_COMMAND=php.exe\n\n\"%PHP_COMMAND%\" \"%YII_PATH%yii\" %*\n\n@endlocal\n"
        }
      ]
    }
  ]
}