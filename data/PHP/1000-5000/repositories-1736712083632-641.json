{
  "metadata": {
    "timestamp": 1736712083632,
    "page": 641,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "barryvdh/laravel-translation-manager",
      "stars": 1657,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3037109375,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.125,
          "content": "/.github export-ignore\n/tests export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\nphpunit.xml.dist export-ignore"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0712890625,
          "content": "/vendor\ncomposer.phar\ncomposer.lock\n.DS_Store\n.idea\n.phpunit.result.cache"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03515625,
          "content": "Copyright (C) 2014 Barry vd. Heuvel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.0751953125,
          "content": "{\n  \"name\": \"barryvdh/laravel-translation-manager\",\n  \"description\": \"Manage Laravel Translations\",\n  \"keywords\": [\n    \"laravel\",\n    \"translations\",\n    \"translator\"\n  ],\n  \"license\": \"MIT\",\n  \"authors\": [\n    {\n      \"name\": \"Barry vd. Heuvel\",\n      \"email\": \"barryvdh@gmail.com\"\n    }\n  ],\n  \"require\": {\n    \"php\": \">=7.2\",\n    \"illuminate/support\": \"^9|^10|^11\",\n    \"illuminate/translation\": \"^9|^10|^11\",\n    \"symfony/finder\": \"^6|^7\"\n  },\n  \"require-dev\": {\n    \"orchestra/testbench\": \"^7|^8|^9\"\n  },\n  \"suggest\": {\n     \"tanmuhittin/laravel-google-translate\": \"If you want to translate using Google API\"\n  },\n  \"autoload\": {\n    \"psr-4\": {\n      \"Barryvdh\\\\TranslationManager\\\\\": \"src/\"\n    }\n  },\n  \"autoload-dev\": {\n    \"psr-4\": {\n      \"Barryvdh\\\\TranslationManager\\\\Tests\\\\\": \"tests/\"\n    }\n  },\n  \"extra\": {\n    \"branch-alias\": {\n      \"dev-master\": \"0.6-dev\"\n    },\n    \"laravel\": {\n      \"providers\": [\n        \"Barryvdh\\\\TranslationManager\\\\ManagerServiceProvider\"\n      ]\n    }\n  },\n  \"scripts\": {\n    \"test\": \"phpunit\"\n  },\n  \"minimum-stability\": \"dev\",\n  \"prefer-stable\": true\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "database",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.583984375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" backupGlobals=\"false\" bootstrap=\"vendor/autoload.php\" colors=\"true\" processIsolation=\"false\" stopOnError=\"false\" stopOnFailure=\"false\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.0/phpunit.xsd\" cacheDirectory=\".phpunit.cache\" backupStaticProperties=\"false\">\n  <coverage>\n    <include>\n      <directory>./src</directory>\n    </include>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"Test Suite\">\n      <directory>./tests/</directory>\n    </testsuite>\n  </testsuites>\n</phpunit>\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 7.529296875,
          "content": "## Laravel Translation Manager\n\n[![Tests](https://github.com/barryvdh/laravel-translation-manager/actions/workflows/run-tests.yml/badge.svg)](https://github.com/barryvdh/laravel-translation-manager/actions)\n[![Packagist License](https://poser.pugx.org/barryvdh/laravel-translation-manager/license.png)](http://choosealicense.com/licenses/mit/)\n[![Latest Stable Version](https://poser.pugx.org/barryvdh/laravel-translation-manager/version.png)](https://packagist.org/packages/barryvdh/laravel-translation-manager)\n[![Total Downloads](https://poser.pugx.org/barryvdh/laravel-translation-manager/d/total.png)](https://packagist.org/packages/barryvdh/laravel-translation-manager)\n[![Fruitcake](https://img.shields.io/badge/Powered%20By-Fruitcake-b2bc35.svg)](https://fruitcake.nl/)\n\nThis is a package to manage Laravel translation files.\nIt does not replace the Translation system, only import/export the php files to a database and make them editable through a webinterface.\nThe workflow would be:\n\n    - Import translations: Read all translation files and save them in the database\n    - Find all translations in php/twig sources\n    - Optionally: Listen to missing translation with the custom Translator\n    - Translate all keys through the webinterface\n    - Export: Write all translations back to the translation files.\n\nThis way, translations can be saved in git history and no overhead is introduced in production.\n\n![Screenshot](http://i.imgur.com/4th2krf.png)\n\n## Installation\n\nRequire this package in your composer.json and run composer update (or run `composer require barryvdh/laravel-translation-manager` directly):\n\n    composer require barryvdh/laravel-translation-manager\n\n\nYou need to run the migrations for this package.\n\n```\nphp artisan vendor:publish --provider=\"Barryvdh\\TranslationManager\\ManagerServiceProvider\" --tag=migrations\nphp artisan migrate\n```\n\nYou need to publish the config file for this package. This will add the file `config/translation-manager.php`, where you can configure this package.\n\n```\nphp artisan vendor:publish --provider=\"Barryvdh\\TranslationManager\\ManagerServiceProvider\" --tag=config\n```\n\nIn order to edit the default template, the views must be published as well. The views will then be placed in `resources/views/vendor/translation-manager`.\n\n```\nphp artisan vendor:publish --provider=\"Barryvdh\\TranslationManager\\ManagerServiceProvider\" --tag=views\n```\n\nRoutes are added in the ServiceProvider. You can set the group parameters for the routes in the configuration.\nYou can change the prefix or filter/middleware for the routes. If you want full customisation, you can extend the ServiceProvider and override the `map()` function.\n\nThis example will make the translation manager available at `http://yourdomain.com/translations`\n\nIf you would like to use auto translation using Google Translate API, install https://github.com/tanmuhittin/laravel-google-translate\n\n``` \ncomposer require tanmuhittin/laravel-google-translate\nphp artisan vendor:publish --provider=Tanmuhittin\\LaravelGoogleTranslate\\LaravelGoogleTranslateServiceProvider\n ```\n\n\n### Middleware / Auth\n\nThe configuration file by default only includes the `auth` middleware, but the latests changes in Laravel 5.2 makes it that session variables are only accessible when your route includes the `web` middleware. In order to make this package work on Laravel 5.2, you will have to change the route/middleware setting from the default \n\n```\n    'route' => [\n        'prefix' => 'translations',\n        'middleware' => 'auth',\n    ],\n```\n\nto\n\n```\n    'route' => [\n        'prefix' => 'translations',\n        'middleware' => [\n\t        'web',\n\t        'auth',\n\t\t],\n    ],\n```\n\n**NOTE:** *This is only needed in Laravel 5.2 (and up!)*\n\n## Usage\n\n### Web interface\n\nWhen you have imported your translation (via buttons or command), you can view them in the webinterface (on the url you defined with the controller).\nYou can click on a translation and an edit field will popup. Just click save and it is saved :)\nWhen a translation is not yet created in a different locale, you can also just edit it to create it.\n\nUsing the buttons on the webinterface, you can import/export the translations. For publishing translations, make sure your application can write to the language directory.\n\nYou can also use the commands below.\n\n### Import command\n\nThe import command will search through app/lang and load all strings in the database, so you can easily manage them.\n\n```\nphp artisan translations:import\n```\n\nTranslation strings from app/lang/locale.json files will be imported to the __json_ group.\n    \nNote: By default, only new strings are added. Translations already in the DB are kept the same. If you want to replace all values with the ones from the files, \nadd the `--replace` (or `-R`) option: `php artisan translations:import --replace`\n\n### Find translations in source\n\nThe Find command/button will look search for all php/twig files in the app directory, to see if they contain translation functions, and will try to extract the group/item names.\nThe found keys will be added to the database, so they can be easily translated.\nThis can be done through the webinterface, or via an Artisan command.\n\n```\nphp artisan translations:find\n```\n    \nIf your project uses translation strings as keys, these will be stored into then __json_ group. \n\n### Export command\n\nThe export command will write the contents of the database back to app/lang php files.\nThis will overwrite existing translations and remove all comments, so make sure to backup your data before using.\nSupply the group name to define which groups you want to publish.\n\n```\nphp artisan translations:export <group>\n```\n\nFor example, `php artisan translations:export reminders` when you have 2 locales (en/nl), will write to `app/lang/en/reminders.php` and `app/lang/nl/reminders.php`\n\nTo export translation strings as keys to JSON files , use the `--json` (or `-J`) option: `php artisan translations:export --json`. This will import every entries from the __json_ group.\n\n### Clean command\n\nThe clean command will search for all translation that are NULL and delete them, so your interface is a bit cleaner. Note: empty translations are never exported.\n\n```\nphp artisan translations:clean\n```\n\n### Reset command\n\nThe reset command simply clears all translation in the database, so you can start fresh (by a new import). Make sure to export your work if needed before doing this.\n\n```\nphp artisan translations:reset\n```\n\n\n### Detect missing translations\n\nMost translations can be found by using the Find command (see above), but in case you have dynamic keys (variables/automatic forms etc), it can be helpful to 'listen' to the missing translations.\nTo detect missing translations, we can swap the Laravel TranslationServiceProvider with a custom provider.\nIn your `config/app.php`, comment out the original TranslationServiceProvider and add the one from this package:\n\n    //'Illuminate\\Translation\\TranslationServiceProvider',\n    'Barryvdh\\TranslationManager\\TranslationServiceProvider',\n\nThis will extend the Translator and will create a new database entry, whenever a key is not found, so you have to visit the pages that use them.\nThis way it shows up in the webinterface and can be edited and later exported.\nYou shouldn't use this in production, just in development to translate your views, then just switch back.\n\n## TODO\n\nThis package is still very alpha. Few things that are on the todo-list:\n\n    - Add locales/groups via webinterface\n    - Improve webinterface (more selection/filtering, behavior of popup after save etc)\n    - Seed existing languages (https://github.com/caouecs/Laravel-lang)\n    - Suggestions are welcome :)\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}