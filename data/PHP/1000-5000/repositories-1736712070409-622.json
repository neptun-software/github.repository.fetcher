{
  "metadata": {
    "timestamp": 1736712070409,
    "page": 622,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "symfony/polyfill-intl-grapheme",
      "stars": 1680,
      "defaultBranch": "1.x",
      "files": [
        {
          "name": "Grapheme.php",
          "type": "blob",
          "size": 9.5546875,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Polyfill\\Intl\\Grapheme;\n\n\\define('SYMFONY_GRAPHEME_CLUSTER_RX', ((float) \\PCRE_VERSION < 10 ? (float) \\PCRE_VERSION >= 8.32 : (float) \\PCRE_VERSION >= 10.39) ? '\\X' : Grapheme::GRAPHEME_CLUSTER_RX);\n\n/**\n * Partial intl implementation in pure PHP.\n *\n * Implemented:\n * - grapheme_extract  - Extract a sequence of grapheme clusters from a text buffer, which must be encoded in UTF-8\n * - grapheme_stripos  - Find position (in grapheme units) of first occurrence of a case-insensitive string\n * - grapheme_stristr  - Returns part of haystack string from the first occurrence of case-insensitive needle to the end of haystack\n * - grapheme_strlen   - Get string length in grapheme units\n * - grapheme_strpos   - Find position (in grapheme units) of first occurrence of a string\n * - grapheme_strripos - Find position (in grapheme units) of last occurrence of a case-insensitive string\n * - grapheme_strrpos  - Find position (in grapheme units) of last occurrence of a string\n * - grapheme_strstr   - Returns part of haystack string from the first occurrence of needle to the end of haystack\n * - grapheme_substr   - Return part of a string\n *\n * @author Nicolas Grekas <p@tchwork.com>\n *\n * @internal\n */\nfinal class Grapheme\n{\n    // (CRLF|([ZWNJ-ZWJ]|T+|L*(LV?V+|LV|LVT)T*|L+|[^Control])[Extend]*|[Control])\n    // This regular expression is a work around for http://bugs.exim.org/1279\n    public const GRAPHEME_CLUSTER_RX = '(?:\\r\\n|(?:[ -~\\x{200C}\\x{200D}]|[ᆨ-ᇹ]+|[ᄀ-ᅟ]*(?:[가개갸걔거게겨계고과괘괴교구궈궤귀규그긔기까깨꺄꺠꺼께껴꼐꼬꽈꽤꾀꾜꾸꿔꿰뀌뀨끄끠끼나내냐냬너네녀녜노놔놰뇌뇨누눠눼뉘뉴느늬니다대댜댸더데뎌뎨도돠돼되됴두둬뒈뒤듀드듸디따때땨떄떠떼뗘뗴또똬뙈뙤뚀뚜뚸뛔뛰뜌뜨띄띠라래랴럐러레려례로롸뢔뢰료루뤄뤠뤼류르릐리마매먀먜머메며몌모뫄뫠뫼묘무뭐뭬뮈뮤므믜미바배뱌뱨버베벼볘보봐봬뵈뵤부붜붸뷔뷰브븨비빠빼뺘뺴뻐뻬뼈뼤뽀뽜뽸뾔뾰뿌뿨쀄쀠쀼쁘쁴삐사새샤섀서세셔셰소솨쇄쇠쇼수숴쉐쉬슈스싀시싸쌔쌰썌써쎄쎠쎼쏘쏴쐐쐬쑈쑤쒀쒜쒸쓔쓰씌씨아애야얘어에여예오와왜외요우워웨위유으의이자재쟈쟤저제져졔조좌좨죄죠주줘줴쥐쥬즈즤지짜째쨔쨰쩌쩨쪄쪠쪼쫘쫴쬐쬬쭈쭤쮀쮜쮸쯔쯰찌차채챠챼처체쳐쳬초촤쵀최쵸추춰췌취츄츠츼치카캐캬컈커케켜켸코콰쾌쾨쿄쿠쿼퀘퀴큐크킈키타태탸턔터테텨톄토톼퇘퇴툐투퉈퉤튀튜트틔티파패퍄퍠퍼페펴폐포퐈퐤푀표푸풔풰퓌퓨프픠피하해햐햬허헤혀혜호화홰회효후훠훼휘휴흐희히]?[ᅠ-ᆢ]+|[가-힣])[ᆨ-ᇹ]*|[ᄀ-ᅟ]+|[^\\p{Cc}\\p{Cf}\\p{Zl}\\p{Zp}])[\\p{Mn}\\p{Me}\\x{09BE}\\x{09D7}\\x{0B3E}\\x{0B57}\\x{0BBE}\\x{0BD7}\\x{0CC2}\\x{0CD5}\\x{0CD6}\\x{0D3E}\\x{0D57}\\x{0DCF}\\x{0DDF}\\x{200C}\\x{200D}\\x{1D165}\\x{1D16E}-\\x{1D172}]*|[\\p{Cc}\\p{Cf}\\p{Zl}\\p{Zp}])';\n\n    private const CASE_FOLD = [\n        ['µ', 'ſ', \"\\xCD\\x85\", 'ς', \"\\xCF\\x90\", \"\\xCF\\x91\", \"\\xCF\\x95\", \"\\xCF\\x96\", \"\\xCF\\xB0\", \"\\xCF\\xB1\", \"\\xCF\\xB5\", \"\\xE1\\xBA\\x9B\", \"\\xE1\\xBE\\xBE\"],\n        ['μ', 's', 'ι',        'σ', 'β',        'θ',        'φ',        'π',        'κ',        'ρ',        'ε',        \"\\xE1\\xB9\\xA1\", 'ι'],\n    ];\n\n    public static function grapheme_extract($s, $size, $type = \\GRAPHEME_EXTR_COUNT, $start = 0, &$next = 0)\n    {\n        if (0 > $start) {\n            $start = \\strlen($s) + $start;\n        }\n\n        if (!\\is_scalar($s)) {\n            $hasError = false;\n            set_error_handler(function () use (&$hasError) { $hasError = true; });\n            $next = substr($s, $start);\n            restore_error_handler();\n            if ($hasError) {\n                substr($s, $start);\n                $s = '';\n            } else {\n                $s = $next;\n            }\n        } else {\n            $s = substr($s, $start);\n        }\n        $size = (int) $size;\n        $type = (int) $type;\n        $start = (int) $start;\n\n        if (\\GRAPHEME_EXTR_COUNT !== $type && \\GRAPHEME_EXTR_MAXBYTES !== $type && \\GRAPHEME_EXTR_MAXCHARS !== $type) {\n            if (80000 > \\PHP_VERSION_ID) {\n                return false;\n            }\n\n            throw new \\ValueError('grapheme_extract(): Argument #3 ($type) must be one of GRAPHEME_EXTR_COUNT, GRAPHEME_EXTR_MAXBYTES, or GRAPHEME_EXTR_MAXCHARS');\n        }\n\n        if (!isset($s[0]) || 0 > $size || 0 > $start) {\n            return false;\n        }\n        if (0 === $size) {\n            return '';\n        }\n\n        $next = $start;\n\n        $s = preg_split('/('.SYMFONY_GRAPHEME_CLUSTER_RX.')/u', \"\\r\\n\".$s, $size + 1, \\PREG_SPLIT_NO_EMPTY | \\PREG_SPLIT_DELIM_CAPTURE);\n\n        if (!isset($s[1])) {\n            return false;\n        }\n\n        $i = 1;\n        $ret = '';\n\n        do {\n            if (\\GRAPHEME_EXTR_COUNT === $type) {\n                --$size;\n            } elseif (\\GRAPHEME_EXTR_MAXBYTES === $type) {\n                $size -= \\strlen($s[$i]);\n            } else {\n                $size -= iconv_strlen($s[$i], 'UTF-8//IGNORE');\n            }\n\n            if ($size >= 0) {\n                $ret .= $s[$i];\n            }\n        } while (isset($s[++$i]) && $size > 0);\n\n        $next += \\strlen($ret);\n\n        return $ret;\n    }\n\n    public static function grapheme_strlen($s)\n    {\n        preg_replace('/'.SYMFONY_GRAPHEME_CLUSTER_RX.'/u', '', $s, -1, $len);\n\n        return 0 === $len && '' !== $s ? null : $len;\n    }\n\n    public static function grapheme_substr($s, $start, $len = null)\n    {\n        if (null === $len) {\n            $len = 2147483647;\n        }\n\n        preg_match_all('/'.SYMFONY_GRAPHEME_CLUSTER_RX.'/u', $s, $s);\n\n        $slen = \\count($s[0]);\n        $start = (int) $start;\n\n        if (0 > $start) {\n            $start += $slen;\n        }\n        if (0 > $start) {\n            if (\\PHP_VERSION_ID < 80000) {\n                return false;\n            }\n\n            $start = 0;\n        }\n        if ($start >= $slen) {\n            return \\PHP_VERSION_ID >= 80000 ? '' : false;\n        }\n\n        $rem = $slen - $start;\n\n        if (0 > $len) {\n            $len += $rem;\n        }\n        if (0 === $len) {\n            return '';\n        }\n        if (0 > $len) {\n            return \\PHP_VERSION_ID >= 80000 ? '' : false;\n        }\n        if ($len > $rem) {\n            $len = $rem;\n        }\n\n        return implode('', \\array_slice($s[0], $start, $len));\n    }\n\n    public static function grapheme_strpos($s, $needle, $offset = 0)\n    {\n        return self::grapheme_position($s, $needle, $offset, 0);\n    }\n\n    public static function grapheme_stripos($s, $needle, $offset = 0)\n    {\n        return self::grapheme_position($s, $needle, $offset, 1);\n    }\n\n    public static function grapheme_strrpos($s, $needle, $offset = 0)\n    {\n        return self::grapheme_position($s, $needle, $offset, 2);\n    }\n\n    public static function grapheme_strripos($s, $needle, $offset = 0)\n    {\n        return self::grapheme_position($s, $needle, $offset, 3);\n    }\n\n    public static function grapheme_stristr($s, $needle, $beforeNeedle = false)\n    {\n        return mb_stristr($s, $needle, $beforeNeedle, 'UTF-8');\n    }\n\n    public static function grapheme_strstr($s, $needle, $beforeNeedle = false)\n    {\n        return mb_strstr($s, $needle, $beforeNeedle, 'UTF-8');\n    }\n\n    private static function grapheme_position($s, $needle, $offset, $mode)\n    {\n        $needle = (string) $needle;\n        if (80000 > \\PHP_VERSION_ID && !preg_match('/./us', $needle)) {\n            return false;\n        }\n        $s = (string) $s;\n        if (!preg_match('/./us', $s)) {\n            return false;\n        }\n        if ($offset > 0) {\n            $s = self::grapheme_substr($s, $offset);\n        } elseif ($offset < 0) {\n            if (2 > $mode) {\n                $offset += self::grapheme_strlen($s);\n                $s = self::grapheme_substr($s, $offset);\n                if (0 > $offset) {\n                    $offset = 0;\n                }\n            } elseif (0 > $offset += self::grapheme_strlen($needle)) {\n                $s = self::grapheme_substr($s, 0, $offset);\n                $offset = 0;\n            } else {\n                $offset = 0;\n            }\n        }\n\n        // As UTF-8 is self-synchronizing, and we have ensured the strings are valid UTF-8,\n        // we can use normal binary string functions here. For case-insensitive searches,\n        // case fold the strings first.\n        $caseInsensitive = $mode & 1;\n        $reverse = $mode & 2;\n        if ($caseInsensitive) {\n            // Use the same case folding mode as mbstring does for mb_stripos().\n            // Stick to SIMPLE case folding to avoid changing the length of the string, which\n            // might result in offsets being shifted.\n            $mode = \\defined('MB_CASE_FOLD_SIMPLE') ? \\MB_CASE_FOLD_SIMPLE : \\MB_CASE_LOWER;\n            $s = mb_convert_case($s, $mode, 'UTF-8');\n            $needle = mb_convert_case($needle, $mode, 'UTF-8');\n\n            if (!\\defined('MB_CASE_FOLD_SIMPLE')) {\n                $s = str_replace(self::CASE_FOLD[0], self::CASE_FOLD[1], $s);\n                $needle = str_replace(self::CASE_FOLD[0], self::CASE_FOLD[1], $needle);\n            }\n        }\n        if ($reverse) {\n            $needlePos = strrpos($s, $needle);\n        } else {\n            $needlePos = strpos($s, $needle);\n        }\n\n        return false !== $needlePos ? self::grapheme_strlen(substr($s, 0, $needlePos)) + $offset : false;\n    }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (c) 2015-present Fabien Potencier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.5732421875,
          "content": "Symfony Polyfill / Intl: Grapheme\n=================================\n\nThis component provides a partial, native PHP implementation of the\n[Grapheme functions](https://php.net/intl.grapheme) from the\n[Intl](https://php.net/intl) extension.\n\n- [`grapheme_extract`](https://php.net/grapheme_extract): Extract a sequence of grapheme\n  clusters from a text buffer, which must be encoded in UTF-8\n- [`grapheme_stripos`](https://php.net/grapheme_stripos): Find position (in grapheme units)\n  of first occurrence of a case-insensitive string\n- [`grapheme_stristr`](https://php.net/grapheme_stristr): Returns part of haystack string\n  from the first occurrence of case-insensitive needle to the end of haystack\n- [`grapheme_strlen`](https://php.net/grapheme_strlen): Get string length in grapheme units\n- [`grapheme_strpos`](https://php.net/grapheme_strpos): Find position (in grapheme units)\n  of first occurrence of a string\n- [`grapheme_strripos`](https://php.net/grapheme_strripos): Find position (in grapheme units)\n  of last occurrence of a case-insensitive string\n- [`grapheme_strrpos`](https://php.net/grapheme_strrpos): Find position (in grapheme units)\n  of last occurrence of a string\n- [`grapheme_strstr`](https://php.net/grapheme_strstr): Returns part of haystack string from\n  the first occurrence of needle to the end of haystack\n- [`grapheme_substr`](https://php.net/grapheme_substr): Return part of a string\n\nMore information can be found in the\n[main Polyfill README](https://github.com/symfony/polyfill/blob/main/README.md).\n\nLicense\n=======\n\nThis library is released under the [MIT license](LICENSE).\n"
        },
        {
          "name": "bootstrap.php",
          "type": "blob",
          "size": 2.2236328125,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nuse Symfony\\Polyfill\\Intl\\Grapheme as p;\n\nif (extension_loaded('intl')) {\n    return;\n}\n\nif (\\PHP_VERSION_ID >= 80000) {\n    return require __DIR__.'/bootstrap80.php';\n}\n\nif (!defined('GRAPHEME_EXTR_COUNT')) {\n    define('GRAPHEME_EXTR_COUNT', 0);\n}\nif (!defined('GRAPHEME_EXTR_MAXBYTES')) {\n    define('GRAPHEME_EXTR_MAXBYTES', 1);\n}\nif (!defined('GRAPHEME_EXTR_MAXCHARS')) {\n    define('GRAPHEME_EXTR_MAXCHARS', 2);\n}\n\nif (!function_exists('grapheme_extract')) {\n    function grapheme_extract($haystack, $size, $type = 0, $start = 0, &$next = 0) { return p\\Grapheme::grapheme_extract($haystack, $size, $type, $start, $next); }\n}\nif (!function_exists('grapheme_stripos')) {\n    function grapheme_stripos($haystack, $needle, $offset = 0) { return p\\Grapheme::grapheme_stripos($haystack, $needle, $offset); }\n}\nif (!function_exists('grapheme_stristr')) {\n    function grapheme_stristr($haystack, $needle, $beforeNeedle = false) { return p\\Grapheme::grapheme_stristr($haystack, $needle, $beforeNeedle); }\n}\nif (!function_exists('grapheme_strlen')) {\n    function grapheme_strlen($input) { return p\\Grapheme::grapheme_strlen($input); }\n}\nif (!function_exists('grapheme_strpos')) {\n    function grapheme_strpos($haystack, $needle, $offset = 0) { return p\\Grapheme::grapheme_strpos($haystack, $needle, $offset); }\n}\nif (!function_exists('grapheme_strripos')) {\n    function grapheme_strripos($haystack, $needle, $offset = 0) { return p\\Grapheme::grapheme_strripos($haystack, $needle, $offset); }\n}\nif (!function_exists('grapheme_strrpos')) {\n    function grapheme_strrpos($haystack, $needle, $offset = 0) { return p\\Grapheme::grapheme_strrpos($haystack, $needle, $offset); }\n}\nif (!function_exists('grapheme_strstr')) {\n    function grapheme_strstr($haystack, $needle, $beforeNeedle = false) { return p\\Grapheme::grapheme_strstr($haystack, $needle, $beforeNeedle); }\n}\nif (!function_exists('grapheme_substr')) {\n    function grapheme_substr($string, $offset, $length = null) { return p\\Grapheme::grapheme_substr($string, $offset, $length); }\n}\n"
        },
        {
          "name": "bootstrap80.php",
          "type": "blob",
          "size": 2.6005859375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nuse Symfony\\Polyfill\\Intl\\Grapheme as p;\n\nif (!defined('GRAPHEME_EXTR_COUNT')) {\n    define('GRAPHEME_EXTR_COUNT', 0);\n}\nif (!defined('GRAPHEME_EXTR_MAXBYTES')) {\n    define('GRAPHEME_EXTR_MAXBYTES', 1);\n}\nif (!defined('GRAPHEME_EXTR_MAXCHARS')) {\n    define('GRAPHEME_EXTR_MAXCHARS', 2);\n}\n\nif (!function_exists('grapheme_extract')) {\n    function grapheme_extract(?string $haystack, ?int $size, ?int $type = GRAPHEME_EXTR_COUNT, ?int $offset = 0, &$next = null): string|false { return p\\Grapheme::grapheme_extract((string) $haystack, (int) $size, (int) $type, (int) $offset, $next); }\n}\nif (!function_exists('grapheme_stripos')) {\n    function grapheme_stripos(?string $haystack, ?string $needle, ?int $offset = 0): int|false { return p\\Grapheme::grapheme_stripos((string) $haystack, (string) $needle, (int) $offset); }\n}\nif (!function_exists('grapheme_stristr')) {\n    function grapheme_stristr(?string $haystack, ?string $needle, ?bool $beforeNeedle = false): string|false { return p\\Grapheme::grapheme_stristr((string) $haystack, (string) $needle, (bool) $beforeNeedle); }\n}\nif (!function_exists('grapheme_strlen')) {\n    function grapheme_strlen(?string $string): int|false|null { return p\\Grapheme::grapheme_strlen((string) $string); }\n}\nif (!function_exists('grapheme_strpos')) {\n    function grapheme_strpos(?string $haystack, ?string $needle, ?int $offset = 0): int|false { return p\\Grapheme::grapheme_strpos((string) $haystack, (string) $needle, (int) $offset); }\n}\nif (!function_exists('grapheme_strripos')) {\n    function grapheme_strripos(?string $haystack, ?string $needle, ?int $offset = 0): int|false { return p\\Grapheme::grapheme_strripos((string) $haystack, (string) $needle, (int) $offset); }\n}\nif (!function_exists('grapheme_strrpos')) {\n    function grapheme_strrpos(?string $haystack, ?string $needle, ?int $offset = 0): int|false { return p\\Grapheme::grapheme_strrpos((string) $haystack, (string) $needle, (int) $offset); }\n}\nif (!function_exists('grapheme_strstr')) {\n    function grapheme_strstr(?string $haystack, ?string $needle, ?bool $beforeNeedle = false): string|false { return p\\Grapheme::grapheme_strstr((string) $haystack, (string) $needle, (bool) $beforeNeedle); }\n}\nif (!function_exists('grapheme_substr')) {\n    function grapheme_substr(?string $string, ?int $offset, ?int $length = null): string|false { return p\\Grapheme::grapheme_substr((string) $string, (int) $offset, $length); }\n}\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.9296875,
          "content": "{\n    \"name\": \"symfony/polyfill-intl-grapheme\",\n    \"type\": \"library\",\n    \"description\": \"Symfony polyfill for intl's grapheme_* functions\",\n    \"keywords\": [\"polyfill\", \"shim\", \"compatibility\", \"portable\", \"intl\", \"grapheme\"],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Nicolas Grekas\",\n            \"email\": \"p@tchwork.com\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=7.2\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Symfony\\\\Polyfill\\\\Intl\\\\Grapheme\\\\\": \"\" },\n        \"files\": [ \"bootstrap.php\" ]\n    },\n    \"suggest\": {\n        \"ext-intl\": \"For best performance\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"extra\": {\n        \"thanks\": {\n            \"name\": \"symfony/polyfill\",\n            \"url\": \"https://github.com/symfony/polyfill\"\n        }\n    }\n}\n"
        }
      ]
    }
  ]
}