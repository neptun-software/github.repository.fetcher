{
  "metadata": {
    "timestamp": 1736712251268,
    "page": 992,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjEwMDA=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lavary/laravel-menu",
      "stars": 1167,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.044921875,
          "content": "/vendor\ncomposer.phar\ncomposer.lock\n.DS_Store\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.173828125,
          "content": "language: php\n\nphp:\n  - 5.4\n  - 5.5\n  - 5.6\n  - 7.0\n  - 7.1\n\nbefore_script:\n  - composer self-update\n  - composer install --prefer-source --no-interaction --dev\n\nscript: phpunit\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "MIT License\n\nCopyright (c) 2017 Moe Reza Lavarian\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 50.2001953125,
          "content": "# Laravel Menu\n[![Latest Stable Version](https://poser.pugx.org/lavary/laravel-menu/v/stable.svg)](https://packagist.org/packages/lavary/laravel-menu)\n[![Latest Unstable Version](https://poser.pugx.org/lavary/laravel-menu/v/unstable.svg)](https://packagist.org/packages/lavary/laravel-menu)\n[![Total Downloads](https://poser.pugx.org/lavary/laravel-menu/downloads.svg)](https://packagist.org/packages/lavary/laravel-menu)\n[![License](https://poser.pugx.org/lavary/laravel-menu/license.svg)](https://packagist.org/packages/lavary/laravel-menu)\n\n\nA quick and easy way to create menus in [Laravel 6, 7 and 8](http://laravel.com/)\n\n__For Laravel 4.x, check [version 1.5.0](https://github.com/lavary/laravel-menu/tree/v1.5.0)__\n\n## Documentation\n\n* [Installation](#installation)\n* [Getting Started](#getting-started)\n* [Routing](#routing)\n    - [URLs](#urls)\n    - [Named Routes](#named-routes)\n    - [Controller Actions](#controller-actions)\n    - [HTTPS](#https)\n* [Sub-items](#sub-items)\n* [Set Item's ID Manualy](#set-items-id-manually)\n* [Set Item's Nicknames Manualy](#set-items-nickname-manually)\n* [Referring to Items](#referring-to-items)\n    - [Get Item by Title](#get-item-by-title)\n    - [Get Item by Id](#get-item-by-id)\n    - [Get All Items](#get-all-items)\n    - [Get the First Item](#get-the-first-item)\n    - [Get the Last Item](#get-the-last-item)\n    - [Get the Active Item](#get-the-active-item)\n    - [Get Sub-items of the Item](#get-sub-items-of-the-item)\n    - [Get the Parent of the Item](#get-the-parent-of-the-item)\n    - [Magic Where Methods](#magic-where-methods)\n* [Referring to Menu Objects](#referring-to-menu-instances)\n* [HTML Attributes](#html-attributes)\n* [Manipulating Links](#manipulating-links)\n    - [Link's Href Property](#links-href-property)\n* [Active Item](#active-item)\n    - [RESTful URLs](#restful-urls)\n    - [URL Wildcards](#url-wildcards)\n    - [Disable activation](#disable-activation)\n* [Inserting a Separator](#inserting-a-separator)\n* [Append and Prepend](#append-and-prepend)\n* [Before and After](#before-and-after)\n* [Raw Items](#raw-items)\n* [Menu Groups](#menu-groups)\n* [URL Prefixing](#url-prefixing)\n* [Nested Groups](#nested-groups)\n* [Meta Data](#meta-data)\n* [Filtering the Items](#filtering-the-items)\n* [Sorting the Items](#sorting-the-items)\n* [Rendering Methods](#rendering-methods)\n    - [Menu as Unordered List](#menu-as-unordered-list)\n    - [Menu as Ordered List](#menu-as-ordered-list)\n    - [Menu as Div](#menu-as-div)\n    - [Menu as Bootstrap 3 Navbar](#menu-as-bootstrap-3-navbar)\n    - [Adding class attributes to child items](#adding-class-attributes-to-child-items)\n* [Subset Menus](#subset-menus)\n    - [Top Menu](#top-menu)\n    - [Sub Menu](#sub-menu)\n    - [Sibling Menu](#sibling-menu)\n    - [Crumb Menu](#crumb-menu)\n* [Advanced Usage](#advanced-usage)\n    + [A Basic Example](#a-basic-example)\n    + [Control Structure for Blade](#control-structure-for-blade)\n        - [@lm_attrs](#lm_attrs)\n    + [Attributes and Callback function of item](#attributes-and-callback-function-of-item)\n* [Configuration](#configuration)\n* [If You Need Help](#if-you-need-help)\n* [Contributing](#contributing)\n* [License](#license)\n\n\n## Installation\n\n```bash\ncomposer require lavary/laravel-menu\n```\n\nIf you are in Laravel 5.5 you won't need to edit your `config/app.php`, if you are in a previous version of Laravel, please do the following:\n\nAppend Laravel Menu service provider to `providers` array in `config/app.php`.\n\n```php\n'providers' => [\n\n        /*\n         * Laravel Framework Service Providers...\n         */\n        Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::class,\n        Illuminate\\Auth\\AuthServiceProvider::class,\n        Illuminate\\Broadcasting\\BroadcastServiceProvider::class,\n\n    ...\n\n        Lavary\\Menu\\ServiceProvider::class,\n\n        ...\n\n],\n```\n\nAt the end of `config/app.php` add `'Menu'    => Lavary\\Menu\\Facade::class` to the `$aliases` array:\n\n```php\n'aliases' => [\n\n    'App'       => Illuminate\\Support\\Facades\\App::class,\n    'Artisan'   => Illuminate\\Support\\Facades\\Artisan::class,\n    ...\n    'Menu'      => Lavary\\Menu\\Facade::class,\n\n],\n```\n\nThis registers the package with Laravel and creates an alias called `Menu`.\n\n\nTo use your own settings, publish config.\n```bash\nphp artisan vendor:publish --provider=\"Lavary\\Menu\\ServiceProvider\"\n```\n\n\n## Getting Started\n\nYou can define the menu definitions inside a [laravel middleware](http://laravel.com/docs/master/middleware). As a result anytime a request hits your application, the menu objects will be available to all your views.\n```bash\nphp artisan make:middleware GenerateMenus\n```\n\nBe sure to also add the middleware to the `app\\Http\\Kernel.php`\n```php\n    protected $middlewareGroups = [\n        'web' => [\n            //...\n            \\App\\Http\\Middleware\\GenerateMenus::class,\n        ],\n        //...\n    ];\n```\n\nOpen the middleware you just created `app\\Http\\Middleware\\GenerateMenus.php`\n\nThen add a basic menu declaration. For example:\n\n```php\npublic function handle($request, Closure $next)\n{\n    \\Menu::make('MyNavBar', function ($menu) {\n        $menu->add('Home');\n        $menu->add('About', 'about');\n        $menu->add('Services', 'services');\n        $menu->add('Contact', 'contact');\n    });\n\n    return $next($request);\n}\n```\n\nFinally, open a view and add:\n```php\n{!! $MyNavBar->asUl() !!}\n```\nYour menu will be created and displayed on the page.\n\n**Note:** `$MyNavBar` is just a hypothetical name used in these examples; You may name your menus whatever you please.\n\nIn the above example `Menu::make()` creates a menu named `MyNavBar`, Adds the menu instance to the `Menu::collection` and ultimately makes `$myNavBar` object available across all application views.\n\nThis method accepts a callable inside which you can define your menu items. `add` method defines a new item. It receives two parameters, the first one is the item title and the second one is options.\n\nThe second parameter, `options`, can be a simple string representing a URL or an associative array of options and HTML attributes which we'll discuss shortly.\n\nYou can use `Menu::exists()` to check if the menu already exists.\n\n```php\nMenu::exists('primary'); // returns false\nMenu::make('primary', function(){});\nMenu::exists('primary'); // returns true\n```\n\nYou can use `Menu::makeOnce()` to ensure the make callback is only called if a menu by the given name does not yet exist. This can be useful if you are creating the same menu in multiple places conditionally, and are unsure whether other conditions have caused the menu to be created already.\n\n```php\nMenu::makeOnce('primary', function(){}); // Creates primary, and executes callback.\nMenu::makeOnce('primary', function(){}); // No operation.\n```\n\n**To render the menu in your view:**\n\n`Laravel-menu` provides three rendering methods out of the box. However you can create your own rendering method using the right methods and attributes.\n\nAs noted earlier, `laravel-menu` provides three rendering formats out of the box, `asUl()`, `asOl()` and `asDiv()`. You can read about the details [here](#rendering-methods).\n\n```php\n{!! $MyNavBar->asUl() !!}\n```\n\nYou can also access the menu object via the menu collection:\n\n```php\n{!! Menu::get('MyNavBar')->asUl() !!}\n```\n\nThis will render your menu like so:\n\n```html\n<ul>\n  <li><a href=\"http://yourdomain.com\">Home</a></li>\n  <li><a href=\"http://yourdomain.com/about\">About</a></li>\n  <li><a href=\"http://yourdomain.com/services\">Services</a></li>\n  <li><a href=\"http://yourdomain.com/contact\">Contact</a></li>\n</ul>\n```\nAnd that's all about it!\n\n\n## Routing\n\n#### URLs\n\nYou can simply assign a URL to your menu item by passing the URL as the second argument to `add` method:\n\n```php\n$menu->add('About Us', 'about-us');\n```\n\n#### Named Routes\n\n`laravel-menu` supports named routes as well:\n\nThis time instead of passing a simple string to `add()`, we pass an associative with key `route` and a named route as value:\n\n```php\n// Suppose we have these routes defined in our app/routes.php file\n\n//...\nRoute::get('/',        ['as' => 'home.page',  function(){...}]);\nRoute::get('about',    ['as' => 'page.about', function(){...}]);\n//...\n\n// Now we make the menu:\n\nMenu::make('MyNavBar', function($menu){\n\n  $menu->add('Home',     ['route'  => 'home.page']);\n  $menu->add('About',    ['route'  => 'page.about']);\n\n});\n```\n\n\n#### Controller Actions\n\nLaravel Menu supports controller actions as well.\n\nYou will just need to set `action` key of your options array to a controller action:\n\nSuppose we have these routes defined in our `routes/web.php` or the older `app/Http/routes.php` file:\n\n```php\nRoute::get('services', 'ServiceController@index');\n```\n\nThen to refer to this route, we can pass the action into the options array.\n\n```php\n$menu->add('services', ['action' => 'ServicesController@index']);\n```\n\n\n**Additionaly:** if you need to send some parameters to routes, URLs or controller actions as a query string, you can simply include them in an array along with the route, action or URL value:\n\n```php\nMenu::make('MyNavBar', function($menu){\n\n  $menu->add('Home',     ['route'  => 'home.page']);\n  $menu->add('About',    ['route'  => ['page.about', 'template' => 1]]);\n  $menu->add('services', ['action' => ['ServicesController@index', 'id' => 12]]);\n\n  $menu->add('Contact',  'contact');\n\n});\n```\n\n#### HTTPS\n\nBy default, the HTTP vs HTTPS will be determined by Laravel's UrlGenerator which matches the current schema of the page.\n\nIf you need to overwrite this behavior, call `secure()` on the item's `link` attribute to force https. Alternatively add key `secure` to the options array and set it to `true`:\n\n```php\n$menu->add('Members', 'members')->link->secure();\n\n\n// or alternatively use the following method\n\n$menu->add('Members', ['url' => 'members', 'secure' => true]);\n\n```\n\nThe output as `<ul>` would be:\n\n```html\n<ul>\n    ...\n    <li><a href=\"https://yourdomain.com/members\">Members</a></li>\n    ...\n</ul>\n```\n\n\n## Sub-items\n\nItems can have sub-items too:\n\n```php\nMenu::make('MyNavBar', function($menu){\n\n  //...\n\n  $menu->add('About',    ['route'  => 'page.about']);\n\n  // these items will go under Item 'About'\n\n  // refer to about as a property of $menu object then call `add()` on it\n  $menu->about->add('Who We are', 'who-we-are');\n\n  // or\n\n  $menu->get('about')->add('What We Do', 'what-we-do');\n\n  // or\n\n  $menu->item('about')->add('Our Goals', 'our-goals');\n\n  //...\n\n});\n```\n\nYou can also chain the item definitions and go as deep as you wish:\n\n```php\n  $menu->add('About', ['route'  => 'page.about'])\n       ->add('Level2', 'link address')\n       ->add('level3', 'Link address')\n       ->add('level4', 'Link address');\n```  \n\nIt is possible to add sub items directly using `parent` attribute:\n\n```php\n$menu->add('About',    ['route'  => 'page.about']);\n$menu->add('Level2', ['url' => 'Link address', 'parent' => $menu->about->id]);\n```  \n\n## Set Item's ID Manually\n\nWhen you add a new item, a unique ID is automatically assigned to the item. However, there are time when you're loading the menu items from the database and you have to set the ID manually. To handle this, you can call the `id()` method against the item's object and pass your desired ID:\n\n```php\n$menu->add('About', ['route' => 'page.about'])\n     ->id('74398247329487')\n```\n\nAlternatively, you can pass the ID as an element of the options array when adding the menu item:\n\n```php\n$menu->add('About', ['route' => 'page.about', 'id' => 74398247329487]);\n```\n\n## Set Item's Nickname Manually\n\nWhen you add a new item, a nickname is automatically assigned to the item for further reference. This nickname is the camel-cased form of the item's title. For instance, an item with the title: `About Us` would have the nickname: `aboutUs`.\nHowever there are times when you have to explicitly define your menu items owing to a special character set you're using. To do this, you may simply use the `nickname()` method against the item's object and pass your desired nickname to it:\n\n```php\n$menu->add('About', ['route' => 'page.about'])\n     ->nickname('about_menu_nickname');\n\n// And use it like you normally would\n$menu->item('about_menu_nickname');\n```\n\nAlternatively, you can pass the nickname as an element of the options array:\n\n```php\n$menu->add('About', ['route' => 'page.about', 'nickname' => 'about_menu_nickname']);\n\n// And use it like you normally would\n$menu->item('about_menu_nickname');    \n```\n\n## Referring to Items\n\nYou can access defined items throughout your code using the methods described below.\n\n#### Get Item by Title\n\nUse $menu followed by the item's title in *camel case*:\n\n```php\n$menu->itemTitleInCamelCase\n\n// or\n\n$menu->get('itemTitleInCamelCase')\n\n// or\n\n$menu->item('itemTitleInCamelCase')\n```\n\nAs an example, let's insert a divider after `About us` item after we've defined it:\n\n```php\n$menu->add('About us', 'about-us')\n\n$menu->aboutUs->divide();\n\n// or\n\n$menu->get('aboutUs')->divide();\n\n// or\n\n$menu->item('aboutUs')->divide();\n```\n\nIf you're not comfortable with the above method you can store the item's object reference in a variable for further reference:\n\n```php\n$about = $menu->add('About', 'about');\n$about->add('Who We Are', 'who-we-are');\n$about->add('What We Do', 'what-we-do');\n```\n\n\n#### Get Item By Id\n\nYou can also get an item by Id if needed:\n\n```php\n$menu->add('About', ['url' => 'about', 'id' => 12]);\n\n$about = $menu->find(12)\n```\n\n#### Get All Items\n\n```php\n$menu->all();\n\n// or outside of the builder context\n\nMenu::get('MyNavBar')->all();\n```\n\nThe `all()` method returns a *Laravel Collection*.\n\n#### Get the First Item\n\n```php\n$menu->first();\n\n// or outside of the builder context\n\nMenu::get('MyNavBar')->first();\n```\n\n#### Get the Last Item\n\n```php\n$menu->last();\n\n// or outside of the builder context\n\nMenu::get('MyNavBar')->last();\n```\n\n#### Get the Active Item\n\n```php\n$menu->active()\n\n// or outside of the builder content\n\nMenu::get('MyNavBar')->active();\n```\n\n#### Get Sub-Items of the Item\n\nFirst of all you need to get the item using the methods described above then call `children()` on it.\n\nTo get children of `About` item:\n\n```php\n$aboutSubs = $menu->about->children();\n\n// or outside of the builder context\n\n$aboutSubs = Menu::get('MyNavBar')->about->children();\n\n// or\n\n$aboutSubs = Menu::get('MyNavBar')->item('about')->children();\n```\n\n`children()` returns a *Laravel Collection*.\n\nTo check if an item has any children or not, you can use `hasChildren()`\n\n```php\nif( $menu->about->hasChildren() ) {\n    // Do something\n}\n\n// or outside of the builder context\n\nMenu::get('MyNavBar')->about->hasChildren();\n\n// Or\n\nMenu::get('MyNavBar')->item('about')->hasChildren();\n```\n\nTo get all descendants of an item you may use `all`:\n\n```php\n$aboutSubs = $menu->about->all();\n```\n\n#### Get the Parent of the Item\n\nFirst get the item using one of the methods above then call `parent()` on it.\n\nTo get the parent of `About` item\n\n```php\n$aboutParent = $menu->about->parent();\n\n// or outside of the builder context\n\n$aboutParent = Menu::get('MyNavBar')->about->parent();\n\n// Or\n\n$aboutParent = Menu::get('MyNavBar')->item('about')->parent();\n```\n\nTo check if an item has a parent or not, you can use `hasParent()`\n\n```php\nif( $menu->about->hasParent() ) {\n    // Do something\n}\n\n// or outside of the builder context\n\nMenu::get('MyNavBar')->about->hasParent();\n\n// Or\n\nMenu::get('MyNavBar')->item('about')->hasParent();\n```\n\n\n#### Magic Where Methods\n\nYou can also search the items collection by magic where methods.\nThese methods are consisted of a `where` concatenated with a property (object property or even meta data)\n\nFor example to get an item with parent equal to 12, you can use it like so:\n\n```php\n$subs = $menu->whereParent(12);\n```\n\nOr to get item's with a specific meta data:\n\n```php\n$menu->add('Home',     '#')->data('color', 'red');\n$menu->add('About',    '#')->data('color', 'blue');\n$menu->add('Services', '#')->data('color', 'red');\n$menu->add('Contact',  '#')->data('color', 'green');\n\n// Fetch all the items with color set to red:\n$reds = $menu->whereColor('red');\n```\n\nThis method returns a *Laravel collection*.\n\nIf you need to fetch descendants of the matched items as well, Just set the second argument as true.\n\n```php\n$reds = $menu->whereColor('red', true);\n```\n\nThis will give all items with color red and their decsendants.\n\n\n## Referring to Menu Instances\n\nYou might encounter situations when you need to refer to menu instances out of the builder context.\n\n\nTo get a specific menu by name:\n\n```php\n$menu = Menu::get('MyNavBar');\n```\n\nOr to get all menus instances:\n\n```php\n$menus = Menu::all();\n```\nYou can also call `getCollection()` to get the same result:\n\n```php\n$menus = Menu::getCollection();\n```\n\nBoth methods return a *Laravel Collection*\n\n## HTML Attributes\n\nSince all menu items would be rendered as HTML entities like list items or divs, you can define as many HTML attributes as you need for each item:\n\n\n```php\nMenu::make('MyNavBar', function($menu){\n\n  // As you see, you need to pass the second parameter as an associative array:\n  $menu->add('Home',     ['route'  => 'home.page',  'class' => 'navbar navbar-home', 'id' => 'home']);\n  $menu->add('About',    ['route'  => 'page.about', 'class' => 'navbar navbar-about dropdown']);\n  $menu->add('services', ['action' => 'ServicesController@index']);\n  $menu->add('Contact',  'contact');\n\n});\n```\n\nIf we choose HTML lists as our rendering format like `ul`, the result would be something similar to this:\n\n```html\n<ul>\n  <li class=\"navbar navbar-home\" id=\"home\"><a href=\"http://yourdomain.com\">Home</a></li>\n  <li class=\"navbar navbar-about dropdown\"><a href=\"http://yourdomain.com/about\">About</a></li>\n  <li><a href=\"http://yourdomain.com/services\">Services</a></li>\n  <li><a href=\"http://yourdomain.com/contact\">Contact</a></li>\n</ul>\n```\n\nIt is also possible to set or get HTML attributes after the item has been defined using `attr()` method.\n\n\nIf you call `attr()` with one argument, it will return the attribute value for you.\nIf you call it with two arguments, It will consider the first and second parameters as a key/value pair and sets the attribute.\nYou can also pass an associative array of attributes if you need to add a group of HTML attributes in one step; Lastly if you call it without any arguments it will return all the attributes as an array.\n\n```php\n//...\n$menu->add('About', ['url' => 'about', 'class' => 'about-item']);\n\necho $menu->about->attr('class');  // output:  about-item\n\n$menu->about->attr('class', 'another-class');\necho $menu->about->attr('class');  // output:  about-item another-class\n\n$menu->about->attr(['class' => 'yet-another', 'id' => 'about']);\n\necho $menu->about->attr('class');  // output:  about-item another-class yet-another\necho $menu->about->attr('id');  // output:  id\n\nprint_r($menu->about->attr());\n\n/* Output\nArray\n(\n    [class] => about-item another-class yet-another\n    [id] => id\n)\n*/\n\n//...\n```\n\nYou can use `attr` on a collection, if you need to target a group of items:\n\n```php\n$menu->add('About', 'about');\n\n$menu->about->add('Who we are', 'about/whoweare');\n$menu->about->add('What we do', 'about/whatwedo');\n\n// add a class to children of About\n$menu->about->children()->attr('class', 'about-item');\n\n```\n\n## Manipulating Links\n\nAll the HTML attributes will go to the wrapping tags(li, div, etc); You might encounter situations when you need to add some HTML attributes to `<a>` tags as well.\n\nEach `Item` instance has an attribute which stores an instance of `Link` object. This object is provided for you to manipulate `<a>` tags.\n\nJust like each item, `Link` also has an `attr()` method which functions exactly like item's:\n\n```php\nMenu::make('MyNavBar', function($menu){\n\n  $about = $menu->add('About',    ['route'  => 'page.about', 'class' => 'navbar navbar-about dropdown']);\n\n  $about->link->attr(['class' => 'dropdown-toggle', 'data-toggle' => 'dropdown']);\n\n});\n```\n\n#### Link's Href Property\n\nIf you don't want to use the routing feature of `laravel-menu` or you don't want the builder to prefix your URL with anything (your host address for example), you can explicitly set your link's href property:\n\n```\n$menu->add('About')->link->href('#');\n```\n\n## Active Item\n\nYou can mark an item as activated using `active()` on that item:\n\n```php\n$menu->add('Home', '#')->active();\n\n/* Output\n *\n * <li class=\"active\"><a href=\"#\">#</a></li>\n *\n */\n```\n\nYou can also add class `active` to the anchor element instead of the wrapping element (`div` or `li`):\n\n```php\n$menu->add('Home', '#')->link->active();\n\n/* Output\n *\n * <li><a class=\"active\" href=\"#\">#</a></li>\n *\n */\n```\n\nLaravel Menu does this for you automatically according to the current **URI** the time you register the item.\n\nYou can also choose the element to be activated (item or the link) in `settings.php` which resides in package's config directory:\n\n```php\n'active_element' => 'item',    // item|link\n```\n\n#### RESTful URLs\n\nRESTful URLs are also supported as long as `restful` option is set as `true` in `config/settings.php` file, E.g. menu item with url `resource` will be activated by `resource/slug` or `resource/slug/edit`.  \n\nYou might encounter situations where your app is in a sub directory instead of the root directory or your resources have a common prefix; In such case you need to set `rest_base` option to a proper prefix for a better restful activation support. `rest_base` can take a simple string, array of string or a function call as value.\n\n#### URL Wildcards\n\n`laravel-menu` makes you able to define a pattern for a certain item, if the automatic activation can't help:\n\n```php\n$menu->add('Articles', 'articles')->active('this-is-another-url/*');\n```\n\nSo `this-is-another-url`, `this-is-another-url/and-another` will both activate `Articles` item.\n\n#### Disable activation\nSometimes you may need to disable auto activation for single items.\nYou can pass **disableActivationByURL** in options like this:\n```php\n$menu->add('Anchor', ['disableActivationByURL' => true, 'url' => '#']);\n```\nThis prevents auto activation by matching URL.\nBut activation for items with active children keeps working.\n\n## Inserting a Separator\n\nYou can insert a separator after each item using `divide()` method:\n\n```php\n//...\n$menu->add('Separated Item', 'item-url')->divide()\n\n// You can also use it this way:\n\n$menu->('Another Separated Item', 'another-item-url');\n\n// This line will insert a divider after the last defined item\n$menu->divide()\n\n//...\n\n/*\n * Output as <ul>:\n *\n *    <ul>\n *        ...\n *        <li><a href=\"item-url\">Separated Item</a></li>\n *        <li class=\"divider\"></li>\n *\n *        <li><a href=\"another-item-url\">Another Separated Item</a></li>\n *        <li class=\"divider\"></li>\n *        ...\n *    </ul>\n *\n */\n```\n\n`divide()` also gets an associative array of attributes:\n\n```php\n//...\n$menu->add('Separated Item', 'item-url')->divide( ['class' => 'my-divider'] );\n//...\n\n/*\n * Output as <ul>:\n *\n *    <ul>\n *        ...\n *        <li><a href=\"item-url\">Separated Item</a></li>\n *        <li class=\"my-divider divider\"></li>\n *\n *        ...\n *    </ul>\n *\n */\n```\n\n\n## Append and Prepend\n\n\nYou can `append` or `prepend` HTML or plain-text to each item's title after it is defined:\n\n```php\nMenu::make('MyNavBar', function($menu){\n\n\n  $about = $menu->add('About',    ['route'  => 'page.about', 'class' => 'navbar navbar-about dropdown']);\n\n  $menu->about->attr(['class' => 'dropdown-toggle', 'data-toggle' => 'dropdown'])\n              ->append(' <b class=\"caret\"></b>')\n              ->prepend('<span class=\"glyphicon glyphicon-user\"></span> ');\n\n  // ...            \n\n});\n```\n\nThe above code will result:\n\n```html\n<ul>\n  ...\n\n  <li class=\"navbar navbar-about dropdown\">\n   <a href=\"about\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n     <span class=\"glyphicon glyphicon-user\"></span> About <b class=\"caret\"></b>\n   </a>\n  </li>\n</ul>\n\n```\n\nYou can call `prepend` and `append` on collections as well.\n\n\n## Before and After\n\nAllows you to add an arbitrary html block instead of a drop-down list. And many other possibilities.\nUnlike `append` and `prepend`, `before` and `after` adds an arbitrary html to the root of the tag li.\n\n```php\nMenu::make('MyNavBar', function($menu){\n\n\n  $menu->add('User', ['title' => Auth::user()->name, 'class' => 'nav-item'])\n      ->after(view('layouts.pattern.menu.user_info'))\n      ->link->attr([\n          'class'         => 'nav-link dropdown-toggle',\n          'data-toggle'   => 'dropdown',\n          'role'          => 'button',\n          'aria-expanded' => 'false',\n      ]);\n\n  // ...            \n\n});\n```\n\nResource of view, pattern: layouts.pattern.menu.user_info\n\n```html\n<div class=\"dropdown-menu\" role=\"menu\">    \n    <div class=\"user-info-header\">\n        <?php echo Auth::user()->name; ?><br>\n    </div>\n    <div class=\"pull-left\">\n        <a href=\"<?php echo url('tools/profile'); ?>\" class=\"btn btn-primary btn-flat\">Profile</a>\n    </div>\n    <div class=\"pull-right\">\n        <a onclick=\"event.preventDefault(); document.getElementById('logout-form').submit();\" class=\"btn btn-primary btn-flat\">\n            <i class=\"fa fa-power-off\"></i>&nbsp;Exit\n        </a>\n        <form id=\"logout-form\" action=\"<?php echo route('logout'); ?>\" method=\"POST\" style=\"display: none;\">\n            <?php echo csrf_field(); ?>\n        </form>\n    </div>\n</div>\n```\n\nThe above code will result:\n\n```html\n<li title=\"Username\" class=\"nav-item\">\n    <a class=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">\n        User\n    </a>\n    <div class=\"dropdown-menu\" role=\"menu\">    \n        <div class=\"user-info-header\">\n            <?php echo Auth::user()->name; ?>\n        </div>\n        <div class=\"pull-left\">\n            <a href=\"<?php echo url('tools/profile'); ?>\" class=\"btn btn-primary btn-flat\">Profile</a>\n        </div>\n        <div class=\"pull-right\">\n            <a onclick=\"event.preventDefault(); document.getElementById('logout-form').submit();\" class=\"btn btn-primary btn-flat\">\n                <i class=\"fa fa-power-off\"></i>&nbsp;Exit\n            </a>\n            <form id=\"logout-form\" action=\"<?php echo route('logout'); ?>\" method=\"POST\" style=\"display: none;\">\n                <?php echo csrf_field(); ?>\n            </form>\n        </div>\n    </div>\n</li>\n```\n\n## Raw Items\n\nTo insert items as plain text instead of hyper-links you can use `raw()`:\n\n```php\n$menu->raw('Item Title', ['class' => 'some-class']);  \n\n$menu->add('About', 'about');\n$menu->About->raw('Another Plain Text Item')\n\n/* Output as an unordered list:\n * <ul>\n *   ...\n *   <li class=\"some-class\">Item's Title</li>\n *   <li>\n *     About\n *     <ul>\n *       <li>Another Plain Text Item</li>\n *     </ul>\n *   </li>\n *   ...\n * </ul>\n */\n```\n\n\n## Menu Groups\n\nSometimes you may need to share attributes between a group of items. Instead of specifying the attributes and options for each item, you may use a menu group feature:\n\n**PS:** This feature works exactly like Laravel group routes.\n\n\n```php\nMenu::make('MyNavBar', function($menu){\n\n  $menu->add('Home',     ['route'  => 'home.page', 'class' => 'navbar navbar-home', 'id' => 'home']);\n\n  $menu->group(['style' => 'padding: 0', 'data-role' => 'navigation'], function($m){\n\n        $m->add('About',    ['route'  => 'page.about', 'class' => 'navbar navbar-about dropdown']);\n        $m->add('services', ['action' => 'ServicesController@index']);\n  }\n\n  $menu->add('Contact',  'contact');\n\n});\n```\n\nAttributes `style` and `data-role` would be applied to both `About` and `Services` items:\n\n```html\n<ul>\n    <li class=\"navbar navbar-home\" id=\"home\"><a href=\"http://yourdomain.com\">Home</a></li>\n    <li style=\"padding: 0\" data-role=\"navigation\" class=\"navbar navbar-about dropdown\"><a href=\"http://yourdomain.com/about\"About</a></li>\n    <li style=\"padding: 0\" data-role=\"navigation\"><a href=\"http://yourdomain.com/services\">Services</a></li>\n</ul>\n```\n\n\n## URL Prefixing\n\nJust like Laravel route prefixing feature, a group of menu items may be prefixed by using the `prefix` option in the  array being passed to the group.\n\n**Attention:** Prefixing only works on the menu items addressed with `url` but not `route` or `action`.\n\n```php\nMenu::make('MyNavBar', function($menu){\n\n  $menu->add('Home',     ['route'  => 'home.page', 'class' => 'navbar navbar-home', 'id' => 'home']);\n\n  $menu->add('About', ['url'  => 'about', 'class' => 'navbar navbar-about dropdown']);  // URL: /about\n\n  $menu->group(['prefix' => 'about'], function($m){\n\n    $about->add('Who we are?', 'who-we-are');   // URL: about/who-we-are\n    $about->add('What we do?', 'what-we-do');   // URL: about/what-we-do\n\n  });\n\n  $menu->add('Contact',  'contact');\n\n});\n```\n\nThis will generate:\n\n```html\n<ul>\n    <li class=\"navbar navbar-home\" id=\"home\"><a href=\"/\">Home</a></li>\n\n    <li data-role=\"navigation\" class=\"navbar navbar-about dropdown\"><a href=\"http://yourdomain.com/about/summary\"About</a>\n        <ul>\n           <li><a href=\"http://yourdomain.com/about/who-we-are\">Who we are?</a></li>\n           <li><a href=\"http://yourdomain.com/about/who-we-are\">What we do?</a></li>\n        </ul>\n    </li>\n\n    <li><a href=\"services\">Services</a></li>\n    <li><a href=\"contact\">Contact</a></li>\n</ul>\n```\n\n## Nested Groups\n\nLaravel Menu supports nested grouping feature as well. A menu group merges its own attribute with its parent group then shares them between its wrapped items:\n\n```php\nMenu::make('MyNavBar', function($menu){\n\n\n    $menu->group(['prefix' => 'pages', 'data-info' => 'test'], function($m){\n\n        $m->add('About', 'about');\n\n        $m->group(['prefix' => 'about', 'data-role' => 'navigation'], function($a){\n\n            $a->add('Who we are', 'who-we-are?');\n            $a->add('What we do?', 'what-we-do');\n            $a->add('Our Goals', 'our-goals');\n        });\n    });\n\n});\n```\n\nIf we render it as a ul:\n\n```html\n<ul>\n    ...\n    <li data-info=\"test\">\n        <a href=\"http://yourdomain.com/pages/about\">About</a>\n        <ul>\n            <li data-info=\"test\" data-role=\"navigation\"><a href=\"http://yourdomain.com/pages/about/who-we-are\"></a></li>\n            <li data-info=\"test\" data-role=\"navigation\"><a href=\"http://yourdomain.com/pages/about/what-we-do\"></a></li>\n            <li data-info=\"test\" data-role=\"navigation\"><a href=\"http://yourdomain.com/pages/about/our-goals\"></a></li>\n        </ul>\n    </li>\n</ul>\n```\n\n\n## Meta Data\n\nYou might encounter situations when you need to attach some meta data to each item; This data can be anything from item placement order to permissions required for accessing the item; You can do this by using `data()` method.\n\n`data()` method works exactly like `attr()` method:\n\nIf you call `data()` with one argument, it will return the data value for you.\nIf you call it with two arguments, It will consider the first and second parameters as a key/value pair and sets the data.\nYou can also pass an associative array of data if you need to add a group of key/value pairs in one step; Lastly if you call it without any arguments it will return all data as an array.\n\n```php\nMenu::make('MyNavBar', function($menu){\n\n\n$menu->add('Users', ['route'  => 'admin.users'])\n      ->data('permission', 'manage_users');\n\n});\n```\n\nYou can also access a data as if it's a property:\n\n```php\n//...\n\n$menu->add('Users', '#')->data('placement', 12);\n\n// you can refer to placement as if it's a public property of the item object\necho $menu->users->placement;    // Output : 12\n\n//...\n?>\n```\n\nMeta data don't do anything to the item and won't be rendered in HTML either. It is the developer who would decide what to do with them.\n\nYou can use `data` on a collection, if you need to target a group of items:\n\n```php\n$menu->add('Users', 'users');\n\n$menu->users->add('New User', 'users/new');\n$menu->users->add('Uses', 'users');\n\n// add a meta data to children of Users\n$menu->users->children()->data('anything', 'value');\n\n```\n\n## Filtering the Items\n\nWe can filter menu items by a using `filter()` method.\n`Filter()` receives a closure which is defined by you.It then iterates over the items and run your closure on each of them.\n\nYou must return false for items you want to exclude and true for those you want to keep.\n\n\nLet's proceed with a real world scenario:\n\nI suppose your `User` model can check whether the user has an specific permission or not:\n\n```php\nMenu::make('MyNavBar', function($menu){\n\n\n  $menu->add('Users', ['route'  => 'admin.users'])\n       ->data('permission', 'manage_users');\n\n})->filter(function($item){\n  if(User::get()->can( $item->data('permission'))) {\n      return true;\n  }\n  return false;\n});\n```\nAs you might have noticed we attached the required permission for each item using `data()`.\n\nAs result, `Users` item will be visible to those who has the `manage_users` permission.\n\n\n## Sorting the Items\n\n`laravel-menu` can sort the items based on either a user defined function or a key which can be item properties like id,parent,etc or meta data stored with each item.\n\n\nTo sort the items based on a property and or meta data:\n\n```php\nMenu::make('main', function($m){\n\n    $m->add('About', '#')     ->data('order', 2);\n    $m->add('Home', '#')      ->data('order', 1);\n    $m->add('Services', '#')  ->data('order', 3);\n    $m->add('Contact', '#')   ->data('order', 5);\n    $m->add('Portfolio', '#') ->data('order', 4);\n\n})->sortBy('order');\n```\n\n`sortBy()` also receives a second parameter which specifies the ordering direction: Ascending order(`asc`) and Descending Order(`dsc`).\n\nDefault value is `asc`.\n\n\nTo sort the items based on `Id` in descending order:\n\n```php\nMenu::make('main', function($m){\n\n    $m->add('About');\n    $m->add('Home');\n    $m->add('Services');\n    $m->add('Contact');\n    $m->add('Portfolio');\n\n})->sortBy('id', 'desc');\n```\n\n\nSorting the items by passing a closure:\n\n```php\nMenu::make('main', function($m){\n\n    $m->add('About')     ->data('order', 2);\n    $m->add('Home')      ->data('order', 1);\n    $m->add('Services')  ->data('order', 3);\n    $m->add('Contact')   ->data('order', 5);\n    $m->add('Portfolio') ->data('order', 4);\n\n})->sortBy(function($items) {\n    // Your sorting algorithm here...\n});\n```\n\nThe closure takes the items collection as argument.\n\n## Rendering Methods\n\nSeveral rendering formats are available out of the box:\n\n#### Menu as Unordered List\n\n```html\n  {!! $MenuName->asUl() !!}\n```\n\n`asUl()` will render your menu in an unordered list. it also takes an optional parameter to define attributes for the `<ul>` tag itself:\n\n```php\n{!! $MenuName->asUl( ['class' => 'awesome-ul'] ) !!}\n```\n\nResult:\n\n```html\n<ul class=\"awesome-ul\">\n  <li><a href=\"http://yourdomain.com\">Home</a></li>\n  <li><a href=\"http://yourdomain.com/about\">About</a></li>\n  <li><a href=\"http://yourdomain.com/services\">Services</a></li>\n  <li><a href=\"http://yourdomain.com/contact\">Contact</a></li>\n</ul>\n```\n\n#### Menu as Ordered List\n\n\n```php\n{!! $MenuName->asOl() !!}\n```\n\n`asOl()` method will render your menu in an ordered list. it also takes an optional parameter to define attributes for the `<ol>` tag itself:\n\n```php\n{!! $MenuName->asOl( ['class' => 'awesome-ol'] ) !!}\n```\n\nResult:\n\n```html\n<ol class=\"awesome-ol\">\n  <li><a href=\"http://yourdomain.com\">Home</a></li>\n  <li><a href=\"http://yourdomain.com/about\">About</a></li>\n  <li><a href=\"http://yourdomain.com/services\">Services</a></li>\n  <li><a href=\"http://yourdomain.com/contact\">Contact</a></li>\n</ol>\n```\n\n#### Menu as Div\n\n\n```php\n{!! $MenuName->asDiv() !!}\n```\n\n`asDiv()` method will render your menu as nested HTML divs. it also takes an optional parameter to define attributes for the parent `<div>` tag itself:\n\n```php\n{!! $MenuName->asDiv( ['class' => 'awesome-div'] ) !!}\n```\n\nResult:\n\n```html\n<div class=\"awesome-div\">\n  <div><a href=\"http://yourdomain.com\">Home</a></div>\n  <div><a href=\"http://yourdomain.com/about\">About</a></div>\n  <div><a href=\"http://yourdomain.com/services\">Services</a></div>\n  <div><a href=\"http://yourdomain.com/contact\">Contact</a></div>\n</div>\n```\n\n#### Menu as Bootstrap 3 Navbar\n\nLaravel Menu provides a parital view out of the box which generates menu items in a bootstrap friendly style which you can **include** in your Bootstrap based navigation bars:\n\nYou can access the partial view by `config('laravel-menu.views.bootstrap-items')`.\n\nAll you need to do is to include the partial view and pass the root level items to it:\n\n```html\n...\n\n@include(config('laravel-menu.views.bootstrap-items'), ['items' => $mainNav->roots()])\n\n...\n\n```\n\nThis is how your Bootstrap code is going to look like:\n\n```html\n<nav class=\"navbar navbar-default\" role=\"navigation\">\n  <div class=\"container-fluid\">\n    <!-- Brand and toggle get grouped for better mobile display -->\n    <div class=\"navbar-header\">\n      <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\">\n        <span class=\"sr-only\">Toggle navigation</span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n      </button>\n      <a class=\"navbar-brand\" href=\"#\">Brand</a>\n    </div>\n\n    <!-- Collect the nav links, forms, and other content for toggling -->\n    <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\n      <ul class=\"nav navbar-nav\">\n\n       @include(config('laravel-menu.views.bootstrap-items'), ['items' => $mainNav->roots()])\n\n      </ul>\n      <form class=\"navbar-form navbar-right\" role=\"search\">\n        <div class=\"form-group\">\n          <input type=\"text\" class=\"form-control\" placeholder=\"Search\">\n        </div>\n        <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n      </form>\n      <ul class=\"nav navbar-nav navbar-right\">\n\n        @include(config('laravel-menu.views.bootstrap-items'), ['items' => $loginNav->roots()])\n\n      </ul>\n    </div><!-- /.navbar-collapse -->\n  </div><!-- /.container-fluid -->\n</nav>\n```\n\nIn case you are using bootstrap 5 (currently in beta) you need to set the `data-toggle-attribute` option from `data-toggle` to `data-bs-toggle` in your `config/laravel-menu/settings.php`.\n\n#### Adding class attributes to child items\n\nLike adding a class to the menu `ul` and `ol`, classes can be added the submenu too. The three parameters to `asUl` are arrays as follows:\n\n- The first array is the attributes for the list: for example, `ul`\n- The second is the attributes for the child lists, for example, `ul>li>ul`\n- The third array is attributes that are added to the attributes of the `li` element\n\nWith this you can add a class to the child menu (submenu) like this:\n\n```php\n{!! $menu->asUl( ['class' => 'first-level-ul'], ['class' => 'second-level-ul'] ) !!}\n```\n\n## Subset Menus\n\nWith your menu constructed you can call any of our subset menu functions to get a new `Builder` to quick generate additional menus.\n\n#### Top Menu\n\nThis generates a `Builder` of the top level items, items without a parent.\n\n```php\n{!! Menu::get('primary')->topMenu()->asUl() !!}\n```\n\n#### Sub Menu\n\nThis generates a `Builder` of the immediate children of the active item.\n\n```php\n{!! Menu::get('primary')->subMenu()->asUl() !!}\n```\n\n#### Sibling Menu\n\nThis generates a `Builder` of the siblings of the active item.\n\n```php\n{!! Menu::get('primary')->siblingMenu()->asUl() !!}\n```\n\n#### Crumb Menu\n\nThis generates a `Builder` by recursively getting all of the parent items for the active item (including the active item).\n\n```php\n{!! Menu::get('primary')->crumbMenu()->asUl() !!}\n```\n\n## Advanced Usage\n\nAs noted earlier you can create your own rendering formats.\n\n#### A Basic Example\n\nIf you'd like to render your menu(s) according to your own design, you should create two views.\n\n* `View-1`  This view contains all the HTML codes like `nav` or `ul` or `div` tags wrapping your menu items.\n* `View-2`  This view is actually a partial view responsible for rendering menu items (it is going to be included in `View-1`.)\n\n\nThe reason we use two view files here is that `View-2` calls itself recursively to render the items to the deepest level required in multi-level menus.\n\nLet's make this easier with an example:\n\n```php\nMenu::make('MyNavBar', function($menu){\n\n  $menu->add('Home');\n\n  $menu->add('About',    ['route'  => 'page.about']);\n\n  $menu->about->add('Who are we?', 'who-we-are');\n  $menu->about->add('What we do?', 'what-we-do');\n\n  $menu->add('Services', 'services');\n  $menu->add('Contact',  'contact');\n\n});\n```\n\nIn this example we name View-1 `custom-menu.blade.php` and View-2 `custom-menu-items.blade.php`.\n\n**custom-menu.blade.php**\n```php\n<nav class=\"navbar\">\n  <ul class=\"horizontal-navbar\">\n    @include('custom-menu-items', ['items' => $MyNavBar->roots()])\n  </ul>\n</nav><!--/nav-->\n```\n\n**custom-menu-items.blade.php**\n```php\n@foreach($items as $item)\n  <li @if($item->hasChildren()) class=\"dropdown\" @endif>\n      <a href=\"{!! $item->url() !!}\">{!! $item->title !!} </a>\n      @if($item->hasChildren())\n        <ul class=\"dropdown-menu\">\n              @include('custom-menu-items', ['items' => $item->children()])\n        </ul>\n      @endif\n  </li>\n@endforeach\n```\n\nLet's describe what we did above, In `custom-menus.blade.php` we put whatever HTML boilerplate code we had according to our design, then we included `custom-menu-items.blade.php` and passed the menu items at *root level* to `custom-menu-items.blade.php`:\n\n```php\n...\n@include('custom-menu-items', ['items' => $menu->roots()])\n...\n```\n\nIn `custom-menu-items.blade.php` we ran a `foreach` loop and called the file recursively in case the current item had any children.\n\nTo put the rendered menu in your application template, you can simply include `custom-menu` view in your master layout.\n\n#### Control Structure For Blade\n\nLaravel menu extends Blade to handle special layouts.\n\n##### @lm_attrs\n\nYou might encounter situations when some of your HTML properties are explicitly written inside your view instead of dynamically being defined when adding the item; However you will need to merge these static attributes with your Item's attributes.\n\n```php\n@foreach($items as $item)\n  <li @if($item->hasChildren()) class=\"dropdown\" @endif data-test=\"test\">\n      <a href=\"{!! $item->url() !!}\">{!! $item->title !!} </a>\n      @if($item->hasChildren())\n        <ul class=\"dropdown-menu\">\n              @include('custom-menu-items', ['items' => $item->children()])\n        </ul>\n      @endif\n  </li>\n@endforeach\n```\n\nIn the above snippet the `li` tag has class `dropdown` and `data-test` property explicitly defined in the view; Laravel Menu provides a control structure which takes care of this.\n\nSuppose the item has also several attributes dynamically defined when being added:\n\n```php\n$menu->add('Dropdown', ['class' => 'item item-1', 'id' => 'my-item']);\n```\n\nThe view:\n\n```php\n@foreach($items as $item)\n  <li @lm_attrs($item) @if($item->hasChildren()) class=\"dropdown\" @endif data-test=\"test\" @lm_endattrs>\n      <a href=\"{!! $item->url !!}\">{!! $item->title !!} </a>\n      @if($item->hasChildren())\n        <ul class=\"dropdown-menu\">\n              @include('custom-menu-items', ['items' => $item->children()])\n        </ul>\n      @endif\n  </li>\n@endforeach\n```\n\nThis control structure automatically merges the static HTML properties with the dynamically defined properties.\n\nHere's the result:\n\n```\n...\n<li class=\"item item-1 dropdown\" id=\"my-item\" data-test=\"test\">...</li>\n...\n```\n\n#### Attributes and Callback function of item\n\nWhen printing a list, you can:\nSet the attributes for the list element;\nSet the callback function, to add a prefix to each link or by condition (\"?id={$id}\") and much more.\n\n* **Example of converting a menu into a drop-down list for mobile**\n\nController:\n```php\n$items=[\n    'copy'=>[\n        'icon'=>'fa-copy',\n        'title'=>'Copy',\n        'text'=>'Copy',\n        'link_attribute'=>[\n            'class'=>'nav-link',\n            'href'=> url(Request::capture()->path().\"/copy\"),\n        ]\n    ],\n];\n\n$controlItem = Menu::make('controlItem', function($menu) use ($items){\n    foreach ($items as $key => $item) if(!isset($item['visible']) || $item['visible']){\n        $menu->add($item['text'],['title'=>$item['title']])\n            ->append('</span>')\n            ->prepend('<i class=\"fa '.$item['icon'].'\"></i> <span>')\n            ->link->attr($item['link_attribute']);\n    }\n});\n\nreturn view('layouts.table.view',[\n    'controlItem' => $controlItem\n]);\n```\nView: layouts.table.view\n```php\n<ul class=\"control-items-min\">\n    <li title=\"Menu\">\n        <a data-toggle=\"dropdown\" aria-expanded=\"true\"><i class=\"fa fa-bars\"></i> <span></span></a>\n    <!-- The first array is the attributes for the list: for example, `ul`;\n         The second is the attributes for the child lists, for example, `ul>li>ul`;\n         The third array is attributes that are added to the attributes of the `li` element. -->\n        <?php echo $controlItem->asUl(['class'=>'dropdown-menu', 'role'=>'menu'],[],['class'=>'dropdown-item']); ?>\n    </li>\n</ul>\n<?php echo $controlItem->asUl(['class'=>'control-items'],[],['class'=>'nav-item']); ?>\n```\n\n* **Example of printing the recording management menu**\n\nController:\n```php\n$items=[\n    'copy'=>[\n        'icon'=>'fa-copy',\n        'title'=>'Copy',\n        'text'=>'Copy',\n        'link_attribute'=>[\n            'class'=>'nav-link',\n            'href'=> url(Request::capture()->path().\"/copy\"),\n        ]\n    ],\n];\n\n$controlItem = Menu::make('controlItem', function($menu) use ($items){\n    foreach ($items as $key => $item) if(!isset($item['visible']) || $item['visible']){\n        $menu->add($item['text'],['title'=>$item['title']])\n            ->append('</span>')\n            ->prepend('<i class=\"fa '.$item['icon'].'\"></i> <span>')\n            ->link->attr($item['link_attribute']);\n    }\n});\n\nreturn view('layouts.table.view',[\n    'controlItem' => $controlItem\n]);\n```\nView: layouts.table.view (use in a cycle with different IDs)\n```php\necho (isset($controlItem)) ? $controlItem->asUl(\n    ['class'=>'dropdown-menu control-item'],\n    [],\n    ['class'=>'nav-item'],\n    function($item, &$children_attributes, &$item_attributes, &$link_attr, &$id){\n        $link_attr['href'] .= \"/\".(int)$id;\n    },\n    $id):'';\n```\n\n\n## Configuration\n\nYou can adjust the behavior of the menu builder in `config/settings.php` file. Currently it provide a few options out of the box:\n\n* **auto_activate** Automatically activates menu items based on the current URI\n* **activate_parents** Activates the parents of an active item\n* **active_class** Default CSS class name for active items\n* **restful** Activates RESTful URLS. E.g `resource/slug` will activate item with `resource` url.\n* **cascade_data** If you need descendants of an item to inherit meta data from their parents, make sure this option is enabled.\n* **rest_base** The base URL that all restful resources might be prefixed with.\n* **active_element** You can choose the HTML element to which you want to add activation classes (anchor or the wrapping element).\n\nYou're also able to override the default settings for each menu. To override settings for menu, just add the lower-cased menu name as a key in the settings array and add the options you need to override:\n\n```php\nreturn [\n    'default' => [\n        'auto_activate'    => true,\n        'activate_parents' => true,\n        'active_class'     => 'active',\n        'active_element'   => 'item',    // item|link\n        'restful'          => true,\n    ],\n    'yourmenuname' => [\n        'auto_activate'    => false\n    ],\n];\n```\n\n**Alternatively**, you can override the default settings with the following methods. Or you can add new custom settings to the menu.\n\n```php\nreturn [\n    'default' => [\n        'auto_activate'    => true,\n        'activate_parents' => true,\n        'active_class'     => 'active',\n        'active_element'   => 'item',    // item|link\n        'restful'          => true,\n    ],\n    'mysidebar' => [\n        'active_class'     => 'active-class-mysidebar',\n    ],\n    'mynavbar' => [\n        'active_class'     => 'active-class-mynavbar',\n    ],\n];\n```\n\n**Example 1:**\n\nOverride default settings\n\n```php\nMenu::make('MySidebar', function ($menu) {\n\n    $menu->options([\n        'active_class' => 'new-active-class',\n    ]);\n\n    $menu->add('Home');\n    $menu->add('About', 'about');\n    \n});\n\n/**\n * Results:\n[\n    'auto_activate'    => true,\n    'activate_parents' => true,\n    'active_class'     => 'new-active-class'\n    'active_element'   => 'item',\n    'restful'          => true,\n]\n*/\n```\n\n**Example 2:**\n\nAdd new settings specific to the menu.\n\n```php\nMenu::make('MySidebar', function ($menu) {\n\n    $menu->options([\n        'inactive_class' => 'custom-inactive-class-mysidebar',\n    ]);\n\n    $menu->add('Home');\n    $menu->add('About', 'about');\n    \n});\n\n/**\n * Results:\n[\n    'auto_activate'    => true,\n    'activate_parents' => true,\n    'active_class'     => 'active-class-mysidebar'\n    'active_element'   => 'item',\n    'restful'          => true,\n    'inactive_class'   => 'custom-inactive-class-mysidebar',\n]\n*/\n```\n\n**Example 3:**\n\nAdd custom settings and get the rest of the settings from `MySidebar`.\n\n```php\nMenu::make('MyNavbar', function ($menu) {\n\n    $menu->options([\n        'inactive_class' => 'custom-inactive-class-mynavbar',\n    ], 'MySidebar'); // or mysidebar\n\n    $menu->add('Home');\n    $menu->add('About', 'about');\n    \n});\n\n/**\n * Results:\n[\n    'auto_activate'    => true,\n    'activate_parents' => true,\n    'active_class'     => 'active-class-mysidebar'\n    'active_element'   => 'item',\n    'restful'          => true,\n    'inactive_class'   => 'custom-inactive-class-mynavbar',\n]\n*/\n```\n\n**Example 4:**\n\nOverride all settings (including default settings) and add new ones.\n\n```php\nMenu::make('MyNavbar', function ($menu) {\n\n    $menu->options([\n        'active_class' => 'active',\n    ], null); \n\n    $menu->add('Home');\n    $menu->add('About', 'about');\n    \n});\n\n/**\n * Results:\n[\n    'active_class'     => 'active'\n]\n*/\n```\n\n**Example 5:**\n\nOr you can use it like this\n\n```php\nMenu::make('MyNavbar', function ($menu) {\n\n    $menu->add('Home');\n    $menu->add('About', 'about');\n    \n}, [\n    'inactive_class' => 'custom-inactive-class-mynavbar',\n]);\n\n/**\n * Results:\n[\n    'auto_activate'    => true,\n    'activate_parents' => true,\n    'active_class'     => 'active-class-mynavbar'\n    'active_element'   => 'item',\n    'restful'          => true,\n    'inactive_class'   => 'custom-inactive-class-mynavbar',\n]\n*/\n```\n\n## If You Need Help\n\nPlease submit all issues and questions using GitHub issues and I will try to help you.\n\n\n## Contributing\n\nPlease feel free to submit pull requests if you can improve or add any features.\n\nWe are currently using PSR-2+Symfony formatting. This is easy to implement and check with the [PHP Coding Standards Fixer](http://cs.sensiolabs.org/).\n\nOnce you have installed php-cs-fixer and added it to your path, simply run the following command in the laravel-menu folder prior to committing.\n\n```bash\n$ php-cs-fixer fix . --rules=@Symfony\n```\n\nWhile everyone has different opinions on formatting, this tool will help provide convenient consistency.\n\n## Credits\n\n* [Dustin Graham](https://github.com/dustingraham)\n* [Reza Lavarian](https://github.com/lavary)\n* [All Contributors](https://github.com/lavary/laravel-menu/graphs/contributors)\n\n## License\n\n*Laravel-Menu* is free software distributed under the terms of the MIT license.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.796875,
          "content": "{\n    \"name\": \"lavary/laravel-menu\",\n    \"description\": \"A quick way to create menus in Laravel 5\",\n    \"keywords\": [\n        \"laravel\"\n    ],\n    \"homepage\": \"https://github.com/lavary/laravel-menu\",\n    \"authors\": [\n        {\n            \"name\": \"Lavary\",\n            \"email\": \"mrl.8081@gmail.com\"\n        }\n    ],\n    \"license\": \"MIT\",\n    \"require\": {\n        \"php\": \">=5.4.0\",\n        \"illuminate/support\": \">=5.0\",\n        \"illuminate/view\": \">=5.0\"\n    },\n    \"autoload\": {\n        \"psr-0\": {\n            \"Lavary\\\\Menu\\\\\": \"src/\"\n        }\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"Lavary\\\\Menu\\\\ServiceProvider\"\n            ],\n            \"aliases\": {\n                \"Menu\": \"Lavary\\\\Menu\\\\Facade\"\n            }\n        }\n    },\n    \"minimum-stability\": \"dev\"\n}\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.556640625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         syntaxCheck=\"false\"\n>\n    <testsuites>\n        <testsuite name=\"Package Test Suite\">\n            <directory suffix=\".php\">./tests/</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}