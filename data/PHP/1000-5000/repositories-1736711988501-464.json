{
  "metadata": {
    "timestamp": 1736711988501,
    "page": 464,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "JayBizzle/Crawler-Detect",
      "stars": 2029,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveralls.yml",
          "type": "blob",
          "size": 0.103515625,
          "content": "coverage_clover: tests/logs/clover.xml\njson_path: tests/logs/coveralls-upload.json\nservice_name: travis-ci"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2197265625,
          "content": "* text=auto\n\n/tests export-ignore\n.coveralls.yml export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\n.styleci.yml export-ignore\n.travis.yml export-ignore\nCONTRIBUTING.md export-ignore\nphpunit.xml export-ignore"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.16015625,
          "content": "/vendor\ncomposer.phar\ncomposer.lock\n.DS_Store\n.phpunit.result.cache\n.php_cs.cache\n.coveralls.yml export-ignore\n.php_cs.dist export-ignore\nphpunit.xml export-ignore\n"
        },
        {
          "name": ".php_cs.dist",
          "type": "blob",
          "size": 1.04296875,
          "content": "<?php\n\n$finder = Symfony\\Component\\Finder\\Finder::create()\n    ->in([\n        __DIR__.'/src',\n        __DIR__.'/tests',\n    ])\n    ->name('*.php')\n    ->ignoreDotFiles(true)\n    ->ignoreVCS(true);\n\nreturn PhpCsFixer\\Config::create()\n    ->setRules([\n        '@PSR2' => true,\n        'array_syntax' => ['syntax' => 'long'],\n        'ordered_imports' => ['sortAlgorithm' => 'alpha'],\n        'no_unused_imports' => true,\n        'not_operator_with_successor_space' => true,\n        'trailing_comma_in_multiline_array' => true,\n        'phpdoc_scalar' => true,\n        'unary_operator_spaces' => true,\n        'binary_operator_spaces' => true,\n        'blank_line_before_statement' => [\n            'statements' => ['break', 'continue', 'declare', 'return', 'throw', 'try'],\n        ],\n        'phpdoc_single_line_var_spacing' => true,\n        'phpdoc_var_without_name' => true,\n        'method_argument_space' => [\n            'on_multiline' => 'ensure_fully_multiline',\n            'keep_multiple_spaces_after_comma' => true,\n        ],\n    ])\n    ->setFinder($finder);"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.2578125,
          "content": "### Contributing\nIf you find a bot/spider/crawler user agent that CrawlerDetect fails to detect, please submit a pull request with with the regex pattern added to the `$data` array in `Fixtures/Crawlers.php` and add the failing user agent to `tests/crawlers.txt`.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0576171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015-2020 Mark Beech\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.8642578125,
          "content": "<p align=\"center\"><a href=\"https://crawlerdetect.io/\" target=\"_blank\"><img src=\"https://cloud.githubusercontent.com/assets/340752/23082173/1bd1a396-f550-11e6-8aba-4d3c75edea2f.png\" width=\"321\" height=\"219\" /></a><br><br>\n<a href=\"https://crawlerdetect.io/\" target=\"_blank\">crawlerdetect.io</a>\n<br><br>\n</p>\n<p align=\"center\">\n<a href=\"https://github.com/JayBizzle/Crawler-Detect/actions\"><img alt=\"GitHub Workflow Status\" src=\"https://img.shields.io/github/actions/workflow/status/JayBizzle/Crawler-Detect/test.yml?branch=master&style=flat-square\"></a>\n<a href=\"https://packagist.org/packages/jaybizzle/crawler-detect\"><img src=\"https://img.shields.io/packagist/dm/JayBizzle/Crawler-Detect.svg?style=flat-square\" /></a>\n<a href=\"https://github.com/JayBizzle/Crawler-Detect\"><img src=\"https://img.shields.io/badge/license-MIT-ff69b4.svg?style=flat-square\" /></a>\n<a href=\"https://packagist.org/packages/jaybizzle/crawler-detect\"><img src=\"https://img.shields.io/packagist/v/jaybizzle/Crawler-Detect.svg?style=flat-square\" /></a>\n<a href=\"https://coveralls.io/github/JayBizzle/Crawler-Detect\"><img src=\"https://img.shields.io/coveralls/JayBizzle/Crawler-Detect/master.svg?style=flat-square\" /></a>\n</p>\n\n## About CrawlerDetect\n\nCrawlerDetect is a PHP class for detecting bots/crawlers/spiders via the `user agent` and `http_from` header. Currently able to detect 1,000's of bots/spiders/crawlers.\n\n### Installation\n```\ncomposer require jaybizzle/crawler-detect\n```\n\n### Usage\n```PHP\nuse Jaybizzle\\CrawlerDetect\\CrawlerDetect;\n\n$CrawlerDetect = new CrawlerDetect;\n\n// Check the user agent of the current 'visitor'\nif($CrawlerDetect->isCrawler()) {\n    // true if crawler user agent detected\n}\n\n// Pass a user agent as a string\nif($CrawlerDetect->isCrawler('Mozilla/5.0 (compatible; Sosospider/2.0; +http://help.soso.com/webspider.htm)')) {\n    // true if crawler user agent detected\n}\n\n// Output the name of the bot that matched (if any)\necho $CrawlerDetect->getMatches();\n```\n\n### Contributing\nIf you find a bot/spider/crawler user agent that CrawlerDetect fails to detect, please submit a pull request with the regex pattern added to the `$data` array in `Fixtures/Crawlers.php` and add the failing user agent to `tests/crawlers.txt`.\n\nFailing that, just create an issue with the user agent you have found, and we'll take it from there :)\n\n### Laravel Package\nIf you would like to use this with Laravel, please see [Laravel-Crawler-Detect](https://github.com/JayBizzle/Laravel-Crawler-Detect)\n\n### Symfony Bundle\nTo use this library with Symfony 2/3/4, check out the [CrawlerDetectBundle](https://github.com/nicolasmure/CrawlerDetectBundle).\n\n### YII2 Extension\nTo use this library with the YII2 framework, check out [yii2-crawler-detect](https://github.com/AlikDex/yii2-crawler-detect).\n\n### ES6 Library\nTo use this library with NodeJS or any ES6 application based, check out [es6-crawler-detect](https://github.com/JefferyHus/es6-crawler-detect).\n\n### Python Library\nTo use this library in a Python project, check out [crawlerdetect](https://github.com/moskrc/CrawlerDetect).\n\n### JVM Library (written in Java)\nTo use this library in a JVM project (including Java, Scala, Kotlin, etc.), check out [CrawlerDetect](https://github.com/nekosoftllc/crawler-detect).\n\n### .NET Library\nTo use this library in a .net standard (including .net core) based project, check out [NetCrawlerDetect](https://github.com/gplumb/NetCrawlerDetect).\n\n### Ruby Gem\nTo use this library with Ruby on Rails or any Ruby-based application, check out [crawler_detect](https://github.com/loadkpi/crawler_detect) gem.\n\n### Go Module\nTo use this library with Go, check out the [crawlerdetect](https://github.com/x-way/crawlerdetect) module.\n\n_Parts of this class are based on the brilliant [MobileDetect](https://github.com/serbanghita/Mobile-Detect)_\n\n[![Analytics](https://ga-beacon.appspot.com/UA-72430465-1/Crawler-Detect/readme?pixel)](https://github.com/JayBizzle/Crawler-Detect)\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.7802734375,
          "content": "{\n    \"name\": \"jaybizzle/crawler-detect\",\n    \"type\": \"library\",\n    \"description\": \"CrawlerDetect is a PHP class for detecting bots/crawlers/spiders via the user agent\",\n    \"keywords\": [\"crawler\", \"crawler detect\", \"crawler detector\", \"crawlerdetect\", \"php crawler detect\"],\n    \"homepage\": \"https://github.com/JayBizzle/Crawler-Detect/\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Mark Beech\",\n            \"email\": \"m@rkbee.ch\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=7.1.0\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^4.8|^5.5|^6.5|^9.4\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Jaybizzle\\\\CrawlerDetect\\\\\": \"src/\"\n        }\n    },\n    \"scripts\": {\n        \"test\": \"vendor/bin/phpunit\"\n    }\n}\n"
        },
        {
          "name": "export.php",
          "type": "blob",
          "size": 0.962890625,
          "content": "<?php\n\n/*\n * This file is part of Crawler Detect - the web crawler detection library.\n *\n * (c) Mark Beech <m@rkbee.ch>\n *\n * This source file is subject to the MIT license that is bundled\n * with this source code in the file LICENSE.\n */\n\nrequire 'src/Fixtures/AbstractProvider.php';\nrequire 'src/Fixtures/Crawlers.php';\nrequire 'src/Fixtures/Exclusions.php';\nrequire 'src/Fixtures/Headers.php';\n\n$src = array(\n    'Crawlers',\n    'Exclusions',\n    'Headers',\n);\n\nforeach ($src as $class) {\n    $class = \"Jaybizzle\\\\CrawlerDetect\\\\Fixtures\\\\$class\";\n    $object = new $class;\n\n    outputJson($object);\n    outputTxt($object);\n}\n\nfunction outputJson($object)\n{\n    $className = (new ReflectionClass($object))->getShortName();\n    file_put_contents(\"raw/$className.json\", json_encode($object->getAll()));\n}\n\nfunction outputTxt($object)\n{\n    $className = (new ReflectionClass($object))->getShortName();\n    file_put_contents(\"raw/$className.txt\", implode(PHP_EOL, $object->getAll()));\n}\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.7001953125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         verbose=\"true\"\n         beStrictAboutOutputDuringTests=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"Package Test Suite\">\n            <directory suffix=\".php\">tests</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist processUncoveredFilesFromWhitelist=\"true\">\n            <directory>src</directory>\n        </whitelist>\n    </filter>\n</phpunit>\n"
        },
        {
          "name": "raw",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}