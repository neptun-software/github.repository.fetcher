{
  "metadata": {
    "timestamp": 1736712007889,
    "page": 504,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "phpbench/phpbench",
      "stars": 1916,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.9384765625,
          "content": "# Handle line endings automatically for files detected as text and leave all\n# files detected as binary untouched.\n* text=auto\n\n# Files and directories with the attribute export-ignore wonâ€™t be added to\n# archive files. See http://git-scm.com/docs/gitattributes for details.\n.gitattributes          export-ignore\n.gitignore              export-ignore\n/*.neon                 export-ignore\n/*.neon.dist            export-ignore\n/.github                export-ignore\n/rector.php             export-ignore\n/.php-cs-fixer.dist.php export-ignore\n/.readthedocs.yml       export-ignore\n/Makefile               export-ignore\n/box.*                  export-ignore\n/doc/                   export-ignore\n/compose.yaml           export-ignore\n/docker/                export-ignore\n/flake.*                export-ignore\n/extensions/*tests/     export-ignore\n/phpbench.*             export-ignore\n/phpunit.xml.dist       export-ignore\n/tests/                 export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.19140625,
          "content": "/composer.lock\n/vendor\n/docs/build\n/build\n/.phpbench.sqlite\n/phpunit.xml\n/phpbench.json\n/.php-cs-fixer.cache\n/.phpunit.result.cache\n/tests/Workspace\n/coverage\n/.phpbench\n/.phpunit.cache\n/**/*.pyc\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 1.4599609375,
          "content": "<?php\n\nuse PhpCsFixer\\Finder;\nuse PhpCsFixer\\Config;\n\n$finder = Finder::create()\n    ->in([\n        __DIR__ . '/lib',\n        __DIR__ . '/tests',\n        __DIR__ . '/extensions',\n    ])\n    ->exclude([\n        'Attributes'\n    ])\n;\n\nreturn (new Config())\n    ->setRiskyAllowed(true)\n    ->setRules([\n        '@PSR12' => true,\n        'void_return' => false,\n        'binary_operator_spaces' => [\n            'operators' => [\n                '=>' => null\n            ],\n        ],\n        'blank_line_before_statement' => [\n            'statements' => [\n                'break',\n                'continue',\n                'declare',\n                'default',\n                'do',\n                'exit',\n                'for',\n                'foreach',\n                'goto',\n                'if',\n                'include',\n                'include_once',\n                'require',\n                'require_once',\n                'return',\n                'switch',\n                'throw',\n                'try',\n                'while',\n                'yield',\n            ],\n        ],\n        'concat_space' => false,\n        'no_unused_imports' => true,\n        'php_unit_set_up_tear_down_visibility' => true,\n        'phpdoc_align' => false,\n        'phpdoc_indent' => false,\n        'phpdoc_separation' => true,\n        'no_superfluous_phpdoc_tags' => [\n            'allow_mixed' => true\n        ],\n        'fully_qualified_strict_types' => false,\n    ])\n    ->setFinder($finder);\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.2421875,
          "content": "# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\nversion: 2\n\nsphinx:\n    configuration: docs/conf.py\n\npython:\n    version: 3.7\n    install:\n        - requirements: docs/requirements.txt\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 17.8583984375,
          "content": "CHANGELOG\n=========\n\nmaster\n------\n\n- Add support for 8.4 (explicit nullables)\n- Bring the `phpbench/dom` library into this repository.\n- Introduce `.gitattributes` to not publish tests files etc.\n\n1.3.1\n-----\n\n- Fix schema concat issue in PHAR\n\n1.3.0\n-----\n\nFeatures:\n\n- Add default `table_summary` report component @dantleech\n- Add command to initialize the configuration file (`config:init`) @dantleech\n- Add command to add a new service config based on a prototype (`config:extend`) @dantleech\n\nImprovements:\n\n- Use single quotes for expressions in the default reports @dantleech\n- Hide noisy log messages for missing fields #1095 @dantleech\n- Improved types etc @aivchen #1064 #1064 #1070 #1071 #1074 #1081...\n- Improved tests @aivchen\n- Improved code-style @aivchen #1057 #1076 #1070\n- Import Attribute symbol @gsteel #1075\n\nBug fixes:\n\n- Ignore `@template` and other generic annotations #1097 @dantleech\n- Defer character reader until command execution @jbboher #1092\n\n1.2.15\n------\n\n- Bump minimum PHP version to 8.1\n- Allow Symfony 7.0 @keulinho\n- Add documentation for adding env providers @GromNaN\n\n1.2.{11,12,13,14} (09/07/2023)\n------------------------------\n\nImprovements:\n\n- Use latest version of Box\n- Fixing build\n\n1.2.10 (24/04/2023)\n-------------------\n\nImprovements:\n\n- Fix deprecation warning when using blinken logger @tavaresmatheus\n\n1.2.9\n-----\n\nBug fixes:\n\n- Fix PHP 8.2 deprecation warning #1022\n\nImprovements:\n\n- Drop support for 7.3 and support for 8.1 and 8.2 in the pipeline.\n\n1.2.8\n-----\n\nImprovements:\n\n- Update documentation to point to reference new GPG key #1017\n- Support Doctrine Annotations 2.0 #1013 @greg0ire\n- Profiler: detect Xdebug `.gz` files when compression enabled #1011 @blackwolf12333\n\n1.2.7\n-----\n\nImprovements:\n\n- Remove dependency on `webmozart/path` (copied the class into PHPBench)\n- Update PHPStan to 1.0 and fix new errors #1006\n- Use `webmozart/glob` instead of `glob` for benchmark paths and config\n  include paths #1005\n\nBug fixes:\n\n- Fix bad exception call #1002 @TRowbotham\n- Fix comma formatting of numbers with no zero decimal precision #1008\n\n1.2.6\n-----\n\nBug fixes:\n\n- Allow multiple `Assert` annotations #996 @nyamsprod\n\n1.2.5\n-----\n\nBug fixes:\n\n- New \"CouldNotLoadMetadata\" exception was located in the `tests` folder and\n  was not available when phpbench was used as a dependency.\n\n1.2.4\n-----\n\nImprovements\n\n- Show [solidarity](https://github.com/vshymanskyy/StandWithUkraine) with Ukrainians\n- Show more concise error messages including script exit code #969\n- Configuration (`expression.strip_tailing_zeros`) to strip meaningless zeros after the decimal place #958\n\n1.2.3\n------\n\nImprovements:\n\n- Allow `psr/log` `2.x` and `3.x`\n\nBug fixes:\n\n- Parameters seem to be converted to strings when storing/retrieving #959\n\n1.2.2\n-----\n\nBug fixes:\n\n- Fix non-existing mappings in composer file #955 @Dgame\n\n1.2.1\n-----\n\nBug fixes:\n\n- Do not index variants by parameter set name (as they vary by number of\n  revs/iterations etc also) #947\n\nImprovements:\n\n- Symfony 6 support - @julien-boudry\n- Allow globs in benchmark path specification - @ricardoboss\n\n1.2.0\n-----\n\nFeatures:\n\n- [expression] Support binary memory units #934\n- [reporting] Ability to expand table columns dynamically #928\n- [reporting] Ability to group columns #928\n- [reporting] Added `benchmark_compare` default report #928\n- [cli] Ability to filter by variant #938\n- [cli] Ability to filter reports #940\n\nImprovements:\n\n- [storage] Allow `.` in tag names\n- [runner] Do not show warning when unable to load metadata for benchmark IF\n  the `runner.file_pattern` is specified #941\n\nBug fixes:\n\n- Fix property (`.`) access precedence, it is now the same as `[` array\n  access #928\n\n1.1.3 (2021-10-31)\n------------------\n\n- Fix bug with misassigned labels in bar chart #931\n- Safely removed non-functioning config option `report.html_output_dir` #930\n\n1.1.2 (2021-09-25)\n------------------\n\n- Removing PHP8.1 deprecations - @Crell\n- Removing PHP7.2 support\n\n1.1.1 (2021-09-08)\n------------------\n\nBug fixes:\n\n- Prevent registering #[ParamProviders(...)] multiple times when benchmark methods are inherited #918 - @ocramius\n\n1.1.0 (2021-08-15)\n------------------\n\nBug fixes:\n\n- Ensure all refs are passed to report in run mode #864\n- Memory formatting respects precision directive #892\n- Remove double title output when description used in console reports #848\n\nFeatures:\n\n- Allow env vars to be passed to the benchmark process.\n- Allow config files to include other config files via. `$include` and\n  `$include-glob` #989\n- Added `contains` function to see if a value exists in a list.\n- Added `frame` function to create a new data frame within an expression.\n- Added `sum` and `count` functions #865\n- New component based report generator #851\n- HTML Bar Chart component #853\n- Console Bar Chart component #858\n- Data Frame and Expression Filtering #831\n- Allow multiple benchmark paths to be specified from CLI #834\n- Functions which require at least one value return NULL when values are\n  empty #835\n- Add `--limit` option to `log` command #879\n- Add `bare-vertical` report configuration (same as `--report='extends: bare,{\"vertical\": true}`) #879\n\nImprovement:\n\n- Surpress reports if errors were encountered during the run #912\n- Support expressions in parttion specifications\n- Data can be accessed on any expression value (not just \"parameters\")\n- Use automatic time unit for expression report #838\n- Parameter handling refactored to be \"safe\": objects will not be unserialized\n  in the PHPBench process #845\n- Allow single quoted strings in expressions (better with JSON) #895\n\nOther changes:\n\n- \"0\" is not longer shown as the \"set name\" in reports, it is now an empty\n  string.\n- Lists and data frames can no longer be compared. Use the `frame` function to\n  convert a list to a data frame (in the unlikely event you compare a list\n  with a frame in a report).\n\n1.0.4 (2021-07-18)\n------------------\n\nBug fix:\n\n- `runner.executor` setting is ineffective and related bugs #880\n\n1.0.3 (2021-07-03)\n------------------\n\nBug fix:\n\n- Show warning if file is parsed but it is not a benchmark file. #883\n\n  Files that are not suffixed with `Bench.php` are are reflected and their\n  docblocks are parsed. Causing unexpected errors if unknown docblock tags are\n  present.\n\n  As changing this behavior (introduced by error in 2016) is a B/C break,\n  it will not be changed in a bug-fix release.\n\n  An option `runner.file_pattern` has been added however to enable the\n  warnings to be resolved.\n\nImprovement:\n\n- Show warning if metadata could not be loaded for benchmark instead of\n  an exception.\n\n1.0.2 (2021-05-28)\n------------------\n\nBug fix:\n\n- Fix incorrect benchmark column definition in report #840\n- Fix `--ansi` flag not be propagated to report output #844\n\n1.0.1 (2021-05-11)\n------------------\n\nBug fix:\n\n- Error with bare report when DateTime used as param #832\n\n1.0.0 (2021-05-09)\n------------------\n\nImprovements:\n\n- Optionaly support for binary data in param providers #532\n- Support serializable objects in param providers #823\n\nBug fix:\n\n- Fix regression which requires phpbench to be installed with composer 2 #822\n\n1.0.0-beta2\n-----------\n\nB/C breaks:\n\n- Progress logger: startSuite now additionally accepts `RunnerConfig`\n\nImprovements:\n\n- Use package versions to show PHPBench version if not PHAR\n\nBug fixes:\n\n- Unterminated XML reference #818 - @staabm\n- Parent directory for custom script path not created #739 - @alexandrajulius\n- Windows newline is not understood in expression language #817 - @dantleech\n\n1.0.0-beta1\n-----------\n\nB/C breaks:\n\n- Removed `self-update` functionality (suggest using `phive` instead(.\n- Most configuration option names have changed. All options are now prefixed\n  by their extension name, e.g. `bootstrap` => `runner.bootstrap`, `path` =>\n  `runner.path`, `extensions` => `core.extensions`. See the configuration\n  [documentation(https://phpbench.readthedocs.io/en/latest/configuration.html)\n  for a full reference.\n- Removed `time_unit` and `time_mode` configuration settings, as they are\n  replaced by `runner.time_unit` and `runner.time_mode`.\n- Environment provider `baseline` renamed to `sampler` to avoid\n  concept-conflict with the runner baselines.\n\nImprovements:\n\n- Removed \"summary\" line from default progress output.\n- Automatically detect time or memory units by default, added meta-units\n  `time` and `memory`\n- Unconditionally enable `xdebug` extension (previously the entire extension\n  was hidden if Xdebug wasn't installed)\n\n1.0.0-alpha9\n------------\n\nB/C Breaks:\n\n- Extensions grouping related functionalities have been extracted from the\n  ``CoreExtension``, this will change the location of some constants used\n  (e.g. ``CoreExtension::TAG_PROGRESS_LOGGER`` is now\n  ``RunnerExtension::PROGRESS_LOGGER``.\n- Renamed `travis` progress logger to `plain`\n- Removed awareness of `CONTINUOUS_INTEGRATION` environment variable\n\nFeatures:\n\n- Added `--working-dir` option\n- Option to include the baseline rows in the `expression` report.\n- Progress output is sent to STDERR, report output to STDOUT (enable you to\n  pipe the output)\n- Allow `--theme=` selection and configuration.\n- Allow benchmarks to be configued in the config (`runner.{iterations,revs,time_unit,mode,etc}`)\n- Include collected environmental information in the report data #789\n- Allow providers to be enabled/disabled via. `env.enabled_providers` #789\n- Support `@RetryThreshold` annotation, attribute, and\n  `runner.retry_threshold` configuration.\n\nImprovements:\n\n- \"local\" executor will include non-existing benchmark classes and bootstrap\n- Configuation options have generated documentation\n- Preserve types in env information\n- Make default true color theme compatible with light backgrounds.\n- Added `vertical` layout to `bare` report (`vertical: true`).\n- Removed `best` and `worst` columns by default from default report.\n- Default to showing all columns in expression report\n- Standard deviation in `default` report is shown as time\n- Relative SD is color gradiated\n- Trunacte long syntax error messages\n\nOther:\n\n- Automatically sign PHAR on release\n\n1.0.0-alpha8\n------------\n\nBC Breaks:\n\n- Removed `table` report generator, it is replaced by the `expression`\n  generator which is now used to produce the `default` and `aggregate`\n  reports. The output and configuration is largely the same, but some features\n  have been removed.\n- `html` and `markdown` output formats have been removed temporarily.\n\nFeatures:\n\n- Introduced `bare` report generator - provides all raw available report data\n- Introduced `display_as_time` function to handle formatting time with\n  throughput.\n- Null `coalesce` function introduced in expression language\n\nImprovements:\n\n- Dynamically resolve timeunit / precision from expression (progress/report) #775\n- Support specificaion of display-as precision in expression language\n- Allow the display unit to be evaluated (for dynamically determining the unit based on the subject's preference)\n- Make the display unit a node - allowing it to be pretty printed.\n- Improved memory formatting (thousands separator, use abbreviated suffix)\n\n1.0.0-alpha7\n------------\n\n- Support true color expression rendering #767\n- Added `expression` report generator - will eventually replace the `table `report used\n  for `aggregate` and `default `reports.\n- Added `--format` to customize the summary shown in progress loggers\n- String concatenation for expression language\n- Show debug details (process spawning) with `-vvv`\n- Support Xdebug 3\n\nBug fixes:\n\n- @OutputTimeUnit doesn't propagate to default expression time unit #766\n\n1.0.0-alpha6\n------------\n\n- Support for PHP 8 Attributes\n\n1.0.0-alpha5\n------------\n\nBackward compatiblity breaks:\n\n- `--uuid` renamed to `--ref` and `tag:` prefix removed #740\n- No warnings - if assertion fails within tolerance zone then it is OK\n- Assertion DSL has been\n  [replaced](https://phpbench.readthedocs.io/en/latest/assertions.html) (only applicable vs. previous alpha\n  versions)\n\nFeatures:\n\n- New [Expression Lanaugage](https://phpbench.readthedocs.io/en/latest/expression.html)\n\nImprovements:\n\n- Show difference to baseline in progress loggers.\n- Highlight assertion failures.\n\n1.0.0-alpha-4\n-------------\n\nBug fixes:\n\n- Numeric tags cause an error #717\n- Benchmark errors cause reports to error\n- Undefined console formatter `subtitle` #729\n- Missing formatters not defined in correct place #727\n\nImprovements:\n\n- Colourful indication of success/failure/warnings when assertions are used.\n- Allow multiple paths to be specified in config\n- Add type restrictions to config values\n\n1.0.0-alpha-3\n-------------\n\nBackward compatiblity breaks:\n\n- `BenchmarkExecutorInterface#execute()` must now return an `ExecutionResults`\n  object.\n- `TemplateExecutor`: expect an `array` for the time measurement result instead\n  of an `int`.\n- Extensions use the Symfony `OptionsResolver` instead of provding an array of\n  default values (which is in line with how other parts of PHPBench are\n  working).\n- Executors accept a single, immutable `ExecutionContext` instead of the\n  mutable `SubjectMetadata` and `Iteration`\n- Renamed the `microtime` executor to `remote`.\n- `OutputInterface` is injected from the DI conatiner, `OutputAwareInterface`\n  has been removed.\n\nFeatures:\n\n- Introduced `remote_script_remove` and `remote_script_path` options to assist\n  in debugging.\n- Added `local` executor - execute benchmarks with in the same process as\n  PHPBench.\n\nImprovements:\n\n- Decorator added to improve error reporting for method executors.\n- Benchmarks executed as they are found (no eager metadata loading)\n- Allow direct reference to services (e.g. `--executor=debug` without need for\n  a `debug` configuration).\n\n1.0.0-alpha-2\n-------------\n\n- PHP 8.0 compatibility\n\n1.0.0-alpha-1\n-------------\n\nBackward compatibility breaks:\n\n- DBAL extension removed.\n- PHPBench Reports extension removed.\n- Removed Xdebug Trace integration\n- Removed `--query` featre (only worked with DBAL, too complex).\n- Removed `--context` (depreacted in favor of `--tag`).\n- Removed `archive` and `delete` commands.\n- Assertions now accept a single expression rather than a set of\n  configuration options.\n- Type hints have been added in most places - possibly causing issues with\n  any extensions.\n- Assets (storage, xdebug profiles) are now placed in `.phpbench`\n- Services referenced via. fully qualified class names instead of strings.\n\nFeatures:\n\n- Configuration profiles\n- Xdebug extension is loaded by default if extension is loaded\n- Baseline: Specify baseline suite when running benchmarks and show differences in\n  reports #648\n- Assert against the baseline\n- Show PHP version and the status of Xdebug and Opcache in the runner output\n  #649\n- Add `@Timeout` to enable a timeout to be specified for any given benchmark -\n  @dantleech #614\n\nImprovements\n\n - All assets now placed in `.phpbench` directory in CWD (instead of\n   `./_storage` and `./xdebug`\n - `--tag` implicitly stores the benchmark (no need to additionally use\n   `--store`)\n - Decrease benchmark overhead by rendering parameters in-template -\n   @marc-mabe\n\nBugfixes:\n\n - Use `text` instead of `string` for envrionment key for DBAL storage - @flobee\n - Numeric tags are not found.\n\n0.17.0\n------\n\n- Support for Symfony 5\n- Dropped support for Symfony < 4.2\n- Minimum version of PHP is 7.2\n\n0.16.10\n-------\n\nBug fix:\n\n- Fix PHP 7.4 bug for baseline script (@julien-boudry)\n\n0.16.0\n------\n\nBC Break:\n\n- The ExecutorInterface has been\n  removed and replaced by the `BenchmarkExecutorInterface`,\n  `MethodExecutorInterface` and `HealthCheckInterface`.\n- The Executor namespace has been moved from `PhpBench\\Benchmark\\Executor` to\n  `PhpBench\\Executor`.\n\nFeatures:\n\n- Support for named parameters #574\n  - Replaces `params` column in reports with `set` (showing param set name) by\n    default\n  - Progress loggers show param name.\n  - Serialized XML documents have a new element `parameter-set` to contain\n    parameter elements.\n\nImprovements:\n\n- Various CI and code quality fixes, thanks @localheinz\n- `groups` column no longer shown by default in reports.\n- HTML report changed from XHTML to HTML5.\n- Changed PHPStan level from 1 to 4.\n\n0.15.0\n------\n\n- Minimumum supported PHP version is 7.1\n- Renamed Factory => MetadataFactory\n- Replace Style CI with PHP-CS-Fixer, fixes #537\n- Allow any callable as a parameter provider. Fixes #533\n- Remove benchmark dependency on JSON extension, use `serialize` instead.\n  Fixes #534\n- Allow Executor to be specified per benchmark/subject.\n- Allow `@ParamProviders` to return a `Generator`. Fixes #529.\n- Fix computation exception with `--stop-on-error` and multiple variants #563\n\n0.14.0 Munich\n-------------\n\n### Features\n\n- Assertions [docs](http://phpbench.readthedocs.io/en/latest/writing-benchmarks.html#assertions)\n- Added `--disable-php-ini` option\n- Report if opcode extension is enabled in env.\n- Show enabled PHP extensions in env.\n- PHP 7 only\n\n### Bugfixes\n\n- Fixed merging of PHP ini config\n- Fixed Blackfire integration (#480 @torinaki )\n\n### Improvements\n\n- Internal refactoring!\n- Aggregate report: `diff` column now shows multiplier (`x` times slower).\n- Various travis imporvements @localheinz \n- Various CS fixes @villfa @Nyholm \n- Microtimer optimization @marc-mabe \n- Symfony 4 support @lcobucci \n\n0.13.0 Mali Mrack\n-----------------\n\n- Bumped minimum requirement to PHP 5.6\n- Allow custom subject pattern #449\n- No exception for empty file.\n- Allow failure on HHVM due to https://github.com/lstrojny/functional-php/issues/114\n- Prevent division by zero #451 \n- Use non-logarithmic scale for diff column #445\n\n0.12.0 Split\n------------\n\n- Column labels\n- Non-strict JSON parser (e.g. `--report='extends: aggregate, cols: [ benchmark ]'`\n- Dropped JSON schema, introduced Symfony Options Resolver.\n- Show better exception message when beforeMethod is static\n- Stop on error `run --stop-on-error`\n- Allow additional extension autoloader to be configured\n- Allow configuration of launcher.\n- Refactored annotation reader (allow namespaced annotations, possibility to add benchmark annotations to PHPUnit tests).\n- Initial Xdebug function trace support\n- Container split into [independent library](https://github.com/phpbench/container)\n- Fix skipping benchmarks\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0322265625,
          "content": "Copyright (c) 2015 Daniel Leech\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.0576171875,
          "content": "[![SWUbanner](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner-direct.svg)](https://github.com/vshymanskyy/StandWithUkraine/blob/main/docs/README.md)\n\n<p  align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/530801/92305960-d2866a00-ef83-11ea-878a-10584e583da4.png\" title=\"PHPBench logo\"/>\n</p>\n\n[![StandWithUkraine](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/badges/StandWithUkraine.svg)](https://github.com/vshymanskyy/StandWithUkraine/blob/main/docs/README.md)\n[![CI](https://github.com/phpbench/phpbench/actions/workflows/ci.yaml/badge.svg)](https://github.com/phpbench/phpbench/actions/workflows/ci.yaml)\n[![Documentation](https://github.com/phpbench/phpbench/actions/workflows/documentation.yaml/badge.svg)](https://github.com/phpbench/phpbench/actions/workflows/documentation.yaml)\n[![Latest Stable Version](https://poser.pugx.org/phpbench/phpbench/v)](//packagist.org/packages/phpbench/phpbench) \n[![Total Downloads](https://poser.pugx.org/phpbench/phpbench/downloads)](//packagist.org/packages/phpbench/phpbench) \n[![License](https://poser.pugx.org/phpbench/phpbench/license)](//packagist.org/packages/phpbench/phpbench)\n\nPHPBench is a benchmark runner for PHP analogous to\n[PHPUnit](https://github.com/phpunit/phpunit) but for performance rather than\ncorrectness.\n\nFeatures include:\n\n- [Revolutions](https://phpbench.readthedocs.io/en/latest/annotributes.html#revolutions): Repeat your code many times to determine average execution\n  *time*.\n- [Iterations](https://phpbench.readthedocs.io/en/latest/annotributes.html#iterations): Sample your revolutions many times and review aggregated\n  statistical data.\n- **Process Isolation**: Each iteration is executed in a separate process.\n- [Reporting](https://phpbench.readthedocs.io/en/latest/guides/reports.html): Customizable reports and various output formats (e.g.\n  console, CSV, Markdown, HTML).\n- Report [storage](https://phpbench.readthedocs.io/en/latest/guides/storage.html) and [comparison](https://phpbench.readthedocs.io/en/latest/guides/regression-testing.html): Store benchmarks locally to be used as a\n  baseline reference, or to reference them later.\n- **Memory Usage**: Keep an eye on the amount of memory used by benchmarking\n  subjects.\n- [Assertions](https://phpbench.readthedocs.io/en/latest/annotributes.html#assertions): Assert that code is performing within acceptable limits, or\n  that it has not regressed from a previously recorded baseline.\n\nSee the [documentation](https://phpbench.readthedocs.io/en/latest/index.html)\nto find out more.\n\nInstallation\n------------\n\n```bash\ncomposer require phpbench/phpbench --dev\n```\n\nSee the [installation instructions](http://phpbench.readthedocs.io/en/latest/installing.html) for more options.\n\nDocumentation\n-------------\n\nDocumentation is hosted on [readthedocs](http://phpbench.readthedocs.io).\n\nCommunity\n---------\n\n- Follow [@phpbench](https://phpc.social/@phpbench) on Mastodon for the latest news.\n- Join the `#phpbench` channel on the Slack [Symfony\n  Devs](https://symfony-devs.slack.com/join/shared_invite/enQtMzM3NDA1NzEyMzg0LTgyNGYwYjFjMjY5YjllYWZkYTY2OWM4MDQzZTgzMmNjNGI3ZDJhYzE2Yjc4NmFmM2JiOTZjODg2MGJlM2RjMDU)\n  channel.\n\nScreenshots\n-----------\n\nRunning benchmarks and comparing against a baseline:\n\n![phpbench](https://user-images.githubusercontent.com/530801/117569074-b52e1080-b0bb-11eb-8c80-a89ce9cce1e2.png)\n\nAggregated report:\n\n![image](https://user-images.githubusercontent.com/530801/117569081-c8d97700-b0bb-11eb-91e5-fc9eaa1ac157.png)\n\nBlinken logger:\n\n![phpbench-blinken](https://user-images.githubusercontent.com/530801/92305786-4a539500-ef82-11ea-8a2c-db67968113b5.png)\n\nHTML Bar Chart:\n\n![Untitled](https://user-images.githubusercontent.com/530801/129060591-1dd984f1-8d03-4cf5-9601-7e677029e647.png)\n\nConsole Bar Chart:\n\n![Untitled](https://user-images.githubusercontent.com/530801/129060527-9cf6c0e0-15f8-4f38-a8e1-39b257ff62fd.png)\n\nContributing\n------------\n\nPHPBench is an open source project. If you find a problem or want to discuss\nnew features or improvements please create an issue, and/or if possible create\na pull request.\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "box.json.dist",
          "type": "blob",
          "size": 0.41796875,
          "content": "{\n  \"algorithm\": \"OPENSSL\",\n  \"chmod\": \"0755\",\n  \"compression\": \"GZ\",\n  \"directories\": [\n    \"lib\",\n    \"extensions\"\n  ],\n  \"files\": [\n    \"LICENSE\"\n  ],\n  \"finder\": [\n    {\n      \"name\": \"{\\\\.[php]}\",\n      \"exclude\": [\n        \"tests\",\n        \"test\"\n      ],\n      \"in\": \"vendor\"\n    }\n  ],\n  \"git-commit-short\": \"git_version\",\n  \"intercept\": true,\n  \"main\": \"bin/phpbench.php\",\n  \"output\": \"phpbench.phar\",\n  \"stub\": true\n}\n"
        },
        {
          "name": "box.json.gh-release",
          "type": "blob",
          "size": 0.3408203125,
          "content": "{\n  \"compression\": \"GZ\",\n  \"directories\": [\n    \"lib\",\n    \"extensions\",\n    \"templates\"\n  ],\n  \"files\": [\n    \"LICENSE\"\n  ],\n  \"finder\": [\n    {\n      \"exclude\": [\n        \"tests\",\n        \"test\"\n      ],\n      \"in\": \"vendor\"\n    }\n  ],\n  \"git-tag\": \"git_tag\",\n  \"intercept\": true,\n  \"main\": \"bin/phpbench.php\",\n  \"output\": \"build/phpbench.phar\"\n}\n"
        },
        {
          "name": "compose.yaml",
          "type": "blob",
          "size": 0.08203125,
          "content": "services:\n  php:\n    image: php:8.4.0RC2-zts-alpine3.20\n    volumes:\n      - .:/app\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 3.46484375,
          "content": "{\n    \"name\": \"phpbench/phpbench\",\n    \"description\": \"PHP Benchmarking Framework\",\n    \"license\": \"MIT\",\n    \"keywords\": [\n        \"benchmarking\",\n        \"optimization\",\n        \"performance\",\n        \"profiling\",\n        \"testing\"\n    ],\n    \"authors\": [\n        {\n            \"name\": \"Daniel Leech\",\n            \"email\": \"daniel@dantleech.com\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"ext-dom\": \"*\",\n        \"ext-json\": \"*\",\n        \"ext-pcre\": \"*\",\n        \"ext-reflection\": \"*\",\n        \"ext-spl\": \"*\",\n        \"ext-tokenizer\": \"*\",\n        \"doctrine/annotations\": \"^2.0\",\n        \"phpbench/container\": \"^2.2\",\n        \"psr/log\": \"^1.1 || ^2.0 || ^3.0\",\n        \"seld/jsonlint\": \"^1.1\",\n        \"symfony/console\": \"^6.1 || ^7.0\",\n        \"symfony/filesystem\": \"^6.1 || ^7.0\",\n        \"symfony/finder\": \"^6.1 || ^7.0\",\n        \"symfony/options-resolver\": \"^6.1 || ^7.0\",\n        \"symfony/process\": \"^6.1 || ^7.0\",\n        \"webmozart/glob\": \"^4.6\"\n    },\n    \"require-dev\": {\n        \"dantleech/invoke\": \"^2.0\",\n        \"ergebnis/composer-normalize\": \"^2.39\",\n        \"friendsofphp/php-cs-fixer\": \"^3.0\",\n        \"jangregor/phpstan-prophecy\": \"^1.0\",\n        \"phpspec/prophecy\": \"dev-master\",\n        \"phpstan/extension-installer\": \"^1.1\",\n        \"phpstan/phpstan\": \"^1.0\",\n        \"phpstan/phpstan-phpunit\": \"^1.0\",\n        \"phpunit/phpunit\": \"^10.4 || ^11.0\",\n        \"rector/rector\": \"^1.2\",\n        \"symfony/error-handler\": \"^6.1 || ^7.0\",\n        \"symfony/var-dumper\": \"^6.1 || ^7.0\"\n    },\n    \"suggest\": {\n        \"ext-xdebug\": \"For Xdebug profiling extension.\"\n    },\n    \"minimum-stability\": \"stable\",\n    \"prefer-stable\": true,\n    \"autoload\": {\n        \"psr-4\": {\n            \"PhpBench\\\\\": \"lib/\",\n            \"PhpBench\\\\Extensions\\\\XDebug\\\\\": \"extensions/xdebug/lib/\"\n        },\n        \"files\": [\n            \"lib/Report/Func/functions.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"PhpBench\\\\Examples\\\\\": \"examples/\",\n            \"PhpBench\\\\Extensions\\\\XDebug\\\\Tests\\\\\": \"extensions/xdebug/tests/\",\n            \"PhpBench\\\\Tests\\\\\": \"tests/\"\n        }\n    },\n    \"bin\": [\n        \"bin/phpbench\"\n    ],\n    \"config\": {\n        \"allow-plugins\": {\n            \"ergebnis/composer-normalize\": true,\n            \"phpstan/extension-installer\": true\n        },\n        \"sort-packages\": true\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"1.2-dev\"\n        }\n    },\n    \"scripts\": {\n        \"docs\": [\n            \"rm -Rf docs/build\",\n            \"bin/phpbench doc:config-reference > docs/configuration.rst\",\n            \"bin/phpbench doc:service-options docs/report-generators/options generator\",\n            \"bin/phpbench doc:service-options docs/report-renderers/options renderer\",\n            \"bin/phpbench doc:service-options docs/report-components/options component\",\n            \"bin/phpbench doc:service-options docs/executors/options executor\",\n            \"make -C docs html\"\n        ],\n        \"integrate\": [\n            \"@composer normalize --indent-size=4 --indent-style=space\",\n            \"vendor/bin/php-cs-fixer fix\",\n            \"vendor/bin/phpstan analyse -c phpstan.neon.dist --memory-limit=-1\",\n            \"vendor/bin/phpunit\",\n            \"bin/phpbench run --revs=1 --iterations=2\",\n            \"bin/phpbench run --profile=examples --revs=1 --iterations=1 --report=examples\",\n            \"@docs\",\n            \"@schema\"\n        ],\n        \"schema\": [\n            \"bin/phpbench doc:config-schema > phpbench.schema.json\"\n        ]\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 1.515625,
          "content": "{\n  \"nodes\": {\n    \"flake-parts\": {\n      \"inputs\": {\n        \"nixpkgs-lib\": \"nixpkgs-lib\"\n      },\n      \"locked\": {\n        \"lastModified\": 1698882062,\n        \"narHash\": \"sha256-HkhafUayIqxXyHH1X8d9RDl1M2CkFgZLjKD3MzabiEo=\",\n        \"owner\": \"hercules-ci\",\n        \"repo\": \"flake-parts\",\n        \"rev\": \"8c9fa2545007b49a5db5f650ae91f227672c3877\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"id\": \"flake-parts\",\n        \"type\": \"indirect\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1700538105,\n        \"narHash\": \"sha256-uZhOCmwv8VupEmPZm3erbr9XXmyg7K67Ul3+Rx2XMe0=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"51a01a7e5515b469886c120e38db325c96694c2f\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixpkgs-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs-lib\": {\n      \"locked\": {\n        \"dir\": \"lib\",\n        \"lastModified\": 1698611440,\n        \"narHash\": \"sha256-jPjHjrerhYDy3q9+s5EAsuhyhuknNfowY6yt6pjn9pc=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"0cbe9f69c234a7700596e943bfae7ef27a31b735\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"dir\": \"lib\",\n        \"owner\": \"NixOS\",\n        \"ref\": \"nixos-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-parts\": \"flake-parts\",\n        \"nixpkgs\": \"nixpkgs\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 1.435546875,
          "content": "# this is a WIP flake for development and experimentation only\n{\n  description = \"php-tui/php-tui\";\n\n  inputs = {\n    nixpkgs.url = \"github:NixOS/nixpkgs/nixpkgs-unstable\";\n  };\n\n  outputs = inputs @ {\n    self,\n    flake-parts,\n    ...\n  }:\n    flake-parts.lib.mkFlake {inherit inputs;} {\n      # This flake is for Linux (x86) and Apple (darwin) systems\n      # If you need more systems, inspect `nixpkgs.lib.systems.flakeExposed` and\n      # add them to this list.\n      #\n      # $ nix repl \"<nixpkgs>\"\n      # nix-repl> lib.systems.flakeExposed\n      systems = [\"x86_64-linux\" \"aarch64-linux\"];\n\n      perSystem = {\n        pkgs,\n        system,\n        ...\n      }: let \n        phpForPhpTui = (pkgs.php81.buildEnv {\n          extensions = ({ enabled, all }: enabled ++ (with all; [\n          ]));\n          extraConfig = ''\n          '';\n        });\n      in {\n        # Run `nix fmt` to reformat the nix files\n        formatter = pkgs.alejandra;\n\n        # Run `nix develop` to enter the development shell\n        devShells.default = pkgs.mkShellNoCC {\n          name = \"php-devshell\";\n\n          buildInputs = [\n            pkgs.bash\n            pkgs.php81.packages.composer\n            pkgs.sphinx\n            phpForPhpTui\n            pkgs.python311Packages.sphinx-tabs\n          ];\n          shellHook = ''\n          if [ ! -d \".venv\" ]; then\n            python3 -m venv .venv;\n          fi\n          source .venv/bin/activate;'';\n        };\n      };\n    };\n}\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpbench.json",
          "type": "blob",
          "size": 1.0185546875,
          "content": "{\n    \"$schema\": \"phpbench.schema.json\",\n    \"$include-glob\": \"examples/Benchmark/*/*.json\",\n    \"runner.file_pattern\": \"*Bench.php\",\n    \"core.extensions\": [\n        \"PhpBench\\\\Extension\\\\DevelopmentExtension\"\n    ],\n    \"runner.bootstrap\": \"vendor/autoload.php\",\n    \"runner.path\": \"tests/Benchmark\",\n    \"runner.php_config\": {\n        \"memory_limit\": \"1G\",\n        \"xdebug.mode\": \"none\"\n    },\n    \"runner.iterations\": 10,\n    \"runner.retry_threshold\": 5,\n    \"runner.revs\": 10,\n    \"runner.assert\": \"mode(variant.time.avg) as ms <= mode(baseline.time.avg) as ms +/- 5%\",\n    \"expression.strip_tailing_zeros\": true,\n    \"report.generators\": {\n        \"examples\": {\n            \"generator\": \"composite\",\n            \"reports\": [\n                \"hashing\",\n                \"config_linters\"\n            ]\n        }\n    },\n    \"core.profiles\": {\n        \"examples\": {\n            \"core.extensions\": [\n                \"PhpBench\\\\Examples\\\\Extension\\\\AcmeExtension\"\n            ],\n            \"runner.path\": \"examples/Benchmark\"\n        }\n    }\n}"
        },
        {
          "name": "phpbench.schema.json",
          "type": "blob",
          "size": 12.03515625,
          "content": "{\n    \"$schema\": \"https =>\\/\\/json-schema.org\\/draft\\/2020-12\\/schema\",\n    \"title\": \"PHPBench configuration\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"$include\": {\n            \"description\": \"Include another config file relative to this one\",\n            \"type\": [\n                \"string\",\n                \"array\"\n            ]\n        },\n        \"$include-glob\": {\n            \"description\": \"Include config files using a glob pattern. Paths are relative to the config file\",\n            \"type\": [\n                \"string\",\n                \"array\"\n            ]\n        },\n        \"$schema\": {\n            \"description\": \"JSON schema location, e.g. ``.\\/vendor\\/phpbench\\/phpbench\\/phpbench.schema.json``\",\n            \"type\": [\n                \"string\",\n                \"null\"\n            ]\n        },\n        \"core.debug\": {\n            \"description\": \"If enabled output debug messages (e.g. the commands being executed when running benchamrks). Same as ``-vvv``\",\n            \"type\": [\n                \"boolean\"\n            ]\n        },\n        \"core.extensions\": {\n            \"description\": \"List of additional extensions to enable\",\n            \"type\": [\n                \"array\"\n            ]\n        },\n        \"core.working_dir\": {\n            \"description\": \"Working directory to use\",\n            \"type\": [\n                \"string\"\n            ]\n        },\n        \"core.config_path\": {\n            \"description\": \"Alternative path to a PHPBench configuration file (default is ``phpbench.json``\",\n            \"type\": [\n                \"string\",\n                \"null\"\n            ]\n        },\n        \"core.profiles\": {\n            \"description\": \"Alternative configurations::\\n\\n    {\\n        \\\"core.profiles\\\": {\\n            \\\"php8\\\": {\\n                \\\"runner.php_bin\\\": \\\"\\/bin\\/php8\\\"\\n            }\\n        }\\n    }\\n\\nThe named configuration will be merged with the default configuration, and can be used via:\\n\\n.. code-block:: bash\\n\\n    $ phpbench run --profile=php8\",\n            \"type\": [\n                \"object\"\n            ]\n        },\n        \"runner.annotations\": {\n            \"description\": \"Read metadata from annotations\",\n            \"type\": [\n                \"boolean\"\n            ]\n        },\n        \"runner.annotation_import_use\": {\n            \"description\": \"Require that annotations be imported before use\",\n            \"type\": [\n                \"boolean\"\n            ]\n        },\n        \"runner.attributes\": {\n            \"description\": \"Read metadata from PHP 8 attributes\",\n            \"type\": [\n                \"boolean\"\n            ]\n        },\n        \"runner.bootstrap\": {\n            \"description\": \"Path to bootstrap (e.g. ``vendor\\/autoload.php``)\",\n            \"type\": [\n                \"string\",\n                \"null\"\n            ]\n        },\n        \"runner.env_enabled_providers\": {\n            \"description\": \"Select which environment samplers to use\",\n            \"type\": [\n                \"object\"\n            ]\n        },\n        \"runner.env_samplers\": {\n            \"description\": \"Environment baselines (not to be confused with baseline comparisons when running benchmarks) are small benchmarks which run to sample the speed of the system (e.g. file I\\/O, computation etc). This setting enables or disables these baselines\",\n            \"type\": [\n                \"object\"\n            ]\n        },\n        \"runner.env_sampler_callables\": {\n            \"description\": \"Map of baseline callables (adds you to register a new environemntal baseline)\",\n            \"type\": [\n                \"object\"\n            ]\n        },\n        \"runner.executors\": {\n            \"description\": \"Add new executor configurations\",\n            \"type\": [\n                \"object\"\n            ]\n        },\n        \"runner.path\": {\n            \"description\": \"Path or paths to the benchmarks\",\n            \"type\": [\n                \"string\",\n                \"object\",\n                \"null\"\n            ]\n        },\n        \"runner.php_binary\": {\n            \"description\": \"Specify a PHP binary to use when executing out-of-band benchmarks, e.g. ``\\/usr\\/bin\\/php6``, defaults to the version of PHP used to invoke PHPBench\",\n            \"type\": [\n                \"string\",\n                \"null\"\n            ]\n        },\n        \"runner.php_config\": {\n            \"description\": \"Map of PHP ini settings to use when executing out-of-band benchmarks\",\n            \"type\": [\n                \"object\"\n            ]\n        },\n        \"runner.php_disable_ini\": {\n            \"description\": \"Disable reading the default PHP configuration\",\n            \"type\": [\n                \"boolean\"\n            ]\n        },\n        \"runner.php_wrapper\": {\n            \"description\": \"Wrap the PHP binary with this command (e.g. ``blackfire run``)\",\n            \"type\": [\n                \"string\",\n                \"null\"\n            ]\n        },\n        \"runner.php_env\": {\n            \"description\": \"Key-value set of environment variables to pass to the PHP process\",\n            \"type\": [\n                \"object\",\n                \"null\"\n            ]\n        },\n        \"runner.progress\": {\n            \"description\": \"Default progress logger to use\",\n            \"type\": [\n                \"string\"\n            ]\n        },\n        \"runner.progress_summary_variant_format\": {\n            \"description\": \"Expression used to render the summary text default progress loggers\",\n            \"type\": [\n                \"string\"\n            ]\n        },\n        \"runner.progress_summary_baseline_format\": {\n            \"description\": \"When the a comparison benchmark is referenced, alternative expression used to render the summary text default progress loggers\",\n            \"type\": [\n                \"string\"\n            ]\n        },\n        \"runner.remote_script_path\": {\n            \"description\": \"PHPBench generates a PHP file for out-of-band benchmarks which is executed, this setting specifies the path to this file. When NULL a file in the systems temporary directory will be used\",\n            \"type\": [\n                \"string\",\n                \"null\"\n            ]\n        },\n        \"runner.remote_script_remove\": {\n            \"description\": \"If the generated file should be removed after it has been executed (useful for debugging)\",\n            \"type\": [\n                \"boolean\"\n            ]\n        },\n        \"runner.assert\": {\n            \"description\": \"Default :ref:`metadata_assertions`\",\n            \"type\": [\n                \"null\",\n                \"string\",\n                \"object\"\n            ]\n        },\n        \"runner.executor\": {\n            \"description\": \"Default executor\",\n            \"type\": [\n                \"null\",\n                \"string\"\n            ]\n        },\n        \"runner.format\": {\n            \"description\": \"Default :ref:`metadata_format`\",\n            \"type\": [\n                \"null\",\n                \"string\"\n            ]\n        },\n        \"runner.iterations\": {\n            \"description\": \"Default :ref:`metadata_iterations`\",\n            \"type\": [\n                \"null\",\n                \"integer\",\n                \"object\"\n            ]\n        },\n        \"runner.output_mode\": {\n            \"description\": \"Default :ref:`output mode <metadata_mode>`\",\n            \"type\": [\n                \"null\",\n                \"string\"\n            ]\n        },\n        \"runner.time_unit\": {\n            \"description\": \"Default :ref:`time unit <metadata_time_unit>`\",\n            \"type\": [\n                \"null\",\n                \"string\"\n            ]\n        },\n        \"runner.retry_threshold\": {\n            \"description\": \"Default :ref:`metadata_retry_threshold`\",\n            \"type\": [\n                \"null\",\n                \"integer\",\n                \"number\"\n            ]\n        },\n        \"runner.revs\": {\n            \"description\": \"Default number of :ref:`metadata_revolutions`\",\n            \"type\": [\n                \"null\",\n                \"integer\",\n                \"object\"\n            ]\n        },\n        \"runner.timeout\": {\n            \"description\": \"Default :ref:`metadata_timeout`\",\n            \"type\": [\n                \"null\",\n                \"number\",\n                \"integer\"\n            ]\n        },\n        \"runner.warmup\": {\n            \"description\": \"Default :ref:`metadata_warmup`\",\n            \"type\": [\n                \"null\",\n                \"integer\",\n                \"object\"\n            ]\n        },\n        \"runner.subject_pattern\": {\n            \"description\": \"Subject pattern (regex) to use when finding benchmarks\",\n            \"type\": [\n                \"string\"\n            ]\n        },\n        \"runner.file_pattern\": {\n            \"description\": \"Consider file names matching this pattern to be benchmarks. NOTE: In 2.0 this will be set to ``*Bench.php``\",\n            \"type\": [\n                \"string\",\n                \"null\"\n            ]\n        },\n        \"report.generators\": {\n            \"description\": \"Report generator configurations, see :doc:`report-generators`\",\n            \"type\": [\n                \"object\"\n            ]\n        },\n        \"report.outputs\": {\n            \"description\": \"Report renderer configurations, see :doc:`report-renderers`\",\n            \"type\": [\n                \"object\"\n            ]\n        },\n        \"report.components\": {\n            \"description\": \"Component configurations, see :doc:`report-components`\",\n            \"type\": [\n                \"object\"\n            ]\n        },\n        \"report.template_paths\": {\n            \"description\": \"List of paths to load templates from\",\n            \"type\": [\n                \"object\"\n            ]\n        },\n        \"report.template_map\": {\n            \"description\": \"Namespace prefix to template path map for object rendering\",\n            \"type\": [\n                \"object\"\n            ]\n        },\n        \"expression.syntax_highlighting\": {\n            \"description\": \"Enable syntax highlighting\",\n            \"type\": [\n                \"boolean\"\n            ]\n        },\n        \"expression.theme\": {\n            \"description\": \"Select a theme to use\",\n            \"type\": [\n                \"string\"\n            ]\n        },\n        \"expression.memory_unit_prefix\": {\n            \"description\": \"By default use ``decimal`` (1kb = 1000 bytes) or ``binary`` (1KiB = 1024 bytes) when displaying memory\",\n            \"type\": [\n                \"string\"\n            ],\n            \"enum\": [\n                \"binary\",\n                \"decimal\"\n            ]\n        },\n        \"expression.strip_tailing_zeros\": {\n            \"description\": \"Do not display meaningless zeros after the decimal place\",\n            \"type\": [\n                \"boolean\"\n            ]\n        },\n        \"storage.driver\": {\n            \"description\": \"Storage driver to use\",\n            \"type\": [\n                \"string\"\n            ]\n        },\n        \"storage.xml_storage_path\": {\n            \"description\": \"Path to store benchmark runs when they are stored with ``--store`` or ``--tag=foo``\",\n            \"type\": [\n                \"string\"\n            ]\n        },\n        \"storage.store_binary\": {\n            \"description\": \"If binary and serialized parameter values should be stored\",\n            \"type\": [\n                \"boolean\"\n            ]\n        },\n        \"xdebug.command_handler_output_dir\": {\n            \"description\": \"Output directory for generated XDebug profiles\",\n            \"type\": [\n                \"string\"\n            ]\n        },\n        \"console.ansi\": {\n            \"description\": \"Enable or disable ANSI control characters (e.g. console colors)\",\n            \"type\": [\n                \"boolean\",\n                \"null\"\n            ]\n        },\n        \"console.disable_output\": {\n            \"description\": \"Disable output from both STDOUT and STDERR\",\n            \"type\": [\n                \"boolean\"\n            ]\n        },\n        \"console.output_stream\": {\n            \"description\": \"Change the normal output stream - the output stream used for reports\",\n            \"type\": [\n                \"string\"\n            ]\n        },\n        \"console.error_stream\": {\n            \"description\": \"Change the error output stream - the output stream used for diagnostics (e.g. progress loggers use this stream)\",\n            \"type\": [\n                \"string\"\n            ]\n        }\n    }\n}"
        },
        {
          "name": "phpstan-baseline.neon",
          "type": "blob",
          "size": 4.1298828125,
          "content": "parameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: \"#^Method PhpBench\\\\\\\\Console\\\\\\\\Command\\\\\\\\Handler\\\\\\\\RunnerHandler\\\\:\\\\:getParameters\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: lib/Console/Command/Handler/RunnerHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Method PhpBench\\\\\\\\Console\\\\\\\\Command\\\\\\\\Handler\\\\\\\\RunnerHandler\\\\:\\\\:getParameters\\\\(\\\\) has parameter \\\\$parametersJson with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: lib/Console/Command/Handler/RunnerHandler.php\n\n\t\t-\n\t\t\tmessage: \"#^Property PhpBench\\\\\\\\Executor\\\\\\\\Benchmark\\\\\\\\DebugExecutor\\\\:\\\\:\\\\$variantTimes type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: lib/Executor/Benchmark/DebugExecutor.php\n\n\t\t-\n\t\t\tmessage: \"#^Method PhpBench\\\\\\\\Executor\\\\\\\\Benchmark\\\\\\\\TestExecutor\\\\:\\\\:executeMethods\\\\(\\\\) has parameter \\\\$methods with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: lib/Executor/Benchmark/TestExecutor.php\n\n\t\t-\n\t\t\tmessage: \"#^Property PhpBench\\\\\\\\Executor\\\\\\\\Benchmark\\\\\\\\TestExecutor\\\\:\\\\:\\\\$executedMethods type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: lib/Executor/Benchmark/TestExecutor.php\n\n\t\t-\n\t\t\tmessage: \"#^Method PhpBench\\\\\\\\Executor\\\\\\\\Method\\\\\\\\ErrorHandlingExecutorDecorator\\\\:\\\\:executeMethods\\\\(\\\\) has parameter \\\\$methods with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: lib/Executor/Method/ErrorHandlingExecutorDecorator.php\n\n\t\t-\n\t\t\tmessage: \"#^Method PhpBench\\\\\\\\Executor\\\\\\\\Method\\\\\\\\RemoteMethodExecutor\\\\:\\\\:executeMethods\\\\(\\\\) has parameter \\\\$methods with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: lib/Executor/Method/RemoteMethodExecutor.php\n\n\t\t-\n\t\t\tmessage: \"#^Method PhpBench\\\\\\\\Executor\\\\\\\\MethodExecutorInterface\\\\:\\\\:executeMethods\\\\(\\\\) has parameter \\\\$methods with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: lib/Executor/MethodExecutorInterface.php\n\n\t\t-\n\t\t\tmessage: \"#^Method PhpBench\\\\\\\\Json\\\\\\\\JsonDecoder\\\\:\\\\:decode\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: lib/Json/JsonDecoder.php\n\n\t\t-\n\t\t\tmessage: \"#^Method PhpBench\\\\\\\\Json\\\\\\\\JsonDecoder\\\\:\\\\:normalize\\\\(\\\\) has parameter \\\\$jsonString with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: lib/Json/JsonDecoder.php\n\n\t\t-\n\t\t\tmessage: \"#^Method PhpBench\\\\\\\\PhpBench\\\\:\\\\:mergeProfile\\\\(\\\\) has parameter \\\\$config with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpBench.php\n\n\t\t-\n\t\t\tmessage: \"#^Method PhpBench\\\\\\\\PhpBench\\\\:\\\\:mergeProfile\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpBench.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$callback of function array_map expects \\\\(callable\\\\(array\\\\<int, int\\\\>, array\\\\<array\\\\<bool\\\\|float\\\\|int\\\\|string\\\\>\\\\|bool\\\\|float\\\\|int\\\\|string\\\\>, int\\\\)\\\\: mixed\\\\)\\\\|null, Closure\\\\(array, array\\\\|null, string\\\\)\\\\: PhpBench\\\\\\\\Report\\\\\\\\Model\\\\\\\\BarChartDataSet given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: lib/Report/ComponentGenerator/BarChartAggregateComponentGenerator.php\n\n\t\t-\n\t\t\tmessage: \"#^Method PhpBench\\\\\\\\Serializer\\\\\\\\XmlDecoder\\\\:\\\\:getComputedStats\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: lib/Serializer/XmlDecoder.php\n\n\t\t-\n\t\t\tmessage: \"#^Method PhpBench\\\\\\\\Serializer\\\\\\\\XmlDecoder\\\\:\\\\:getParameters\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: lib/Serializer/XmlDecoder.php\n\n\t\t-\n\t\t\tmessage: \"#^Method PhpBench\\\\\\\\Serializer\\\\\\\\XmlDecoder\\\\:\\\\:processBenchmark\\\\(\\\\) has parameter \\\\$resultClasses with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: lib/Serializer/XmlDecoder.php\n\n\t\t-\n\t\t\tmessage: \"#^Method PhpBench\\\\\\\\Serializer\\\\\\\\XmlDecoder\\\\:\\\\:processSubject\\\\(\\\\) has parameter \\\\$resultClasses with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: lib/Serializer/XmlDecoder.php\n\n\t\t-\n\t\t\tmessage: \"#^Method PhpBench\\\\\\\\Serializer\\\\\\\\XmlDecoder\\\\:\\\\:processVariant\\\\(\\\\) has parameter \\\\$resultClasses with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: lib/Serializer/XmlDecoder.php\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 0.6103515625,
          "content": "parameters:\n    level: 6\n    paths:\n        - lib\n        - examples/Extension\n        - extensions/xdebug/lib\n        - tests\n    excludePaths:\n        - tests/Workspace\n        - tests/Unit/Reflection/reflector\n        - tests/Unit/Benchmark/findertest\n        - tests/System/benchmarks\n        - tests/Unit/Executor/benchmarks\n        - lib/Path/Path.php\n    typeAliases:\n        parameters: 'array<string,mixed>'\n        tableRowArray: 'array<string,\\PhpBench\\Expression\\Ast\\Node>'\n        tableColumnDefinition: 'array<string,mixed>'\n    stubFiles:\n        - phpstan/Container.stub\nincludes:\n    - phpstan-baseline.neon\n"
        },
        {
          "name": "phpstan",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.7275390625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- http://www.phpunit.de/manual/current/en/appendixes.configuration.html -->\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.4/phpunit.xsd\" colors=\"true\" bootstrap=\"tests/bootstrap.php\" failOnWarning=\"true\" cacheDirectory=\".phpunit.cache\">\n  <testsuites>\n    <testsuite name=\"PhpBench\">\n      <directory>./tests</directory>\n    </testsuite>\n    <testsuite name=\"PhpBench Xdebug Extension\">\n      <directory>./extensions/xdebug/tests</directory>\n    </testsuite>\n  </testsuites>\n  <source>\n    <include>\n      <directory>./lib</directory>\n      <directory>./extensions/xdebug/lib</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "rector.php",
          "type": "blob",
          "size": 0.734375,
          "content": "<?php\n\ndeclare(strict_types=1);\n\nuse Rector\\CodeQuality\\Rector\\FuncCall\\UnwrapSprintfOneArgumentRector;\nuse Rector\\CodingStyle\\Rector\\ArrowFunction\\StaticArrowFunctionRector;\nuse Rector\\CodingStyle\\Rector\\Encapsed\\EncapsedStringsToSprintfRector;\nuse Rector\\Config\\RectorConfig;\nuse Rector\\Php84\\Rector\\Param\\ExplicitNullableParamTypeRector;\n\nreturn RectorConfig::configure()\n    ->withImportNames()\n    ->withPaths([\n        __DIR__ . '/lib',\n        __DIR__ . '/extensions',\n        __DIR__ . '/tests',\n        __DIR__ . '/examples',\n    ])\n    ->withRules([\n        StaticArrowFunctionRector::class,\n        EncapsedStringsToSprintfRector::class,\n        UnwrapSprintfOneArgumentRector::class,\n        ExplicitNullableParamTypeRector::class,\n    ]);\n"
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}