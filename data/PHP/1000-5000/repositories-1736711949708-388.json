{
  "metadata": {
    "timestamp": 1736711949708,
    "page": 388,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "walkor/webman",
      "stars": 2285,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.08203125,
          "content": "/runtime\n/.idea\n/.vscode\n/vendor\n*.log\n.env\n/tests/tmp\n/tests/.phpunit.result.cache\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.126953125,
          "content": "MIT License\n\nCopyright (c) 2021 walkor<walkor@workerman.net> and contributors (see https://github.com/walkor/webman/contributors)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.9951171875,
          "content": "<div style=\"padding:18px;max-width: 1024px;margin:0 auto;background-color:#fff;color:#333\">\n<h1>webman</h1>\n\n基于<a href=\"https://www.workerman.net\" target=\"__blank\">workerman</a>开发的超高性能PHP框架\n\n\n<h1>学习</h1>\n\n<ul>\n  <li>\n    <a href=\"https://www.workerman.net/webman\" target=\"__blank\">主页 / Home page</a>\n  </li>\n  <li>\n    <a href=\"https://webman.workerman.net\" target=\"__blank\">文档 / Document</a>\n  </li>\n  <li>\n    <a href=\"https://www.workerman.net/doc/webman/install.html\" target=\"__blank\">安装 / Install</a>\n  </li>\n  <li>\n    <a href=\"https://www.workerman.net/questions\" target=\"__blank\">问答 / Questions</a>\n  </li>\n  <li>\n    <a href=\"https://www.workerman.net/apps\" target=\"__blank\">市场 / Apps</a>\n  </li>\n  <li>\n    <a href=\"https://www.workerman.net/sponsor\" target=\"__blank\">赞助 / Sponsors</a>\n  </li>\n  <li>\n    <a href=\"https://www.workerman.net/doc/webman/thanks.html\" target=\"__blank\">致谢 / Thanks</a>\n  </li>\n</ul>\n\n<div style=\"float:left;padding-bottom:30px;\">\n\n  <h1>赞助商</h1>\n\n  <h4>特别赞助</h4>\n  <a href=\"https://www.crmeb.com/?form=workerman\" target=\"__blank\">\n    <img src=\"https://www.workerman.net/img/sponsors/6429/20230719111500.svg\" width=\"200\">\n  </a>\n\n  <h4>铂金赞助</h4>\n  <a href=\"https://www.fadetask.com/?from=workerman\" target=\"__blank\"><img src=\"https://www.workerman.net/img/sponsors/1/20230719084316.png\" width=\"200\"></a>\n  <a href=\"https://www.yilianyun.net/?from=workerman\" target=\"__blank\" style=\"margin-left:20px;\"><img src=\"https://www.workerman.net/img/sponsors/6218/20230720114049.png\" width=\"200\"></a>\n\n\n</div>\n\n\n<div style=\"float:left;padding-bottom:30px;clear:both\">\n\n  <h1>请作者喝咖啡</h1>\n\n<img src=\"https://www.workerman.net/img/wx_donate.png\" width=\"200\">\n<img src=\"https://www.workerman.net/img/ali_donate.png\" width=\"200\">\n<br>\n<b>如果您觉得webman对您有所帮助，欢迎捐赠。</b>\n\n\n</div>\n\n\n<div style=\"clear: both\">\n<h1>LICENSE</h1>\nThe webman is open-sourced software licensed under the MIT.\n</div>\n\n</div>\n\n\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.2626953125,
          "content": "{\n  \"name\": \"workerman/webman\",\n  \"type\": \"project\",\n  \"keywords\": [\n    \"high performance\",\n    \"http service\"\n  ],\n  \"homepage\": \"https://www.workerman.net\",\n  \"license\": \"MIT\",\n  \"description\": \"High performance HTTP Service Framework.\",\n  \"authors\": [\n    {\n      \"name\": \"walkor\",\n      \"email\": \"walkor@workerman.net\",\n      \"homepage\": \"https://www.workerman.net\",\n      \"role\": \"Developer\"\n    }\n  ],\n  \"support\": {\n    \"email\": \"walkor@workerman.net\",\n    \"issues\": \"https://github.com/walkor/webman/issues\",\n    \"forum\": \"https://wenda.workerman.net/\",\n    \"wiki\": \"https://workerman.net/doc/webman\",\n    \"source\": \"https://github.com/walkor/webman\"\n  },\n  \"require\": {\n    \"php\": \">=8.0\",\n    \"workerman/webman-framework\": \"^1.6.8\",\n    \"monolog/monolog\": \"^2.0\"\n  },\n  \"suggest\": {\n    \"ext-event\": \"For better performance. \"\n  },\n  \"autoload\": {\n    \"psr-4\": {\n      \"\": \"./\",\n      \"app\\\\\": \"./app\",\n      \"App\\\\\": \"./app\",\n      \"app\\\\View\\\\Components\\\\\": \"./app/view/components\"\n    }\n  },\n  \"scripts\": {\n    \"post-package-install\": [\n      \"support\\\\Plugin::install\"\n    ],\n    \"post-package-update\": [\n      \"support\\\\Plugin::install\"\n    ],\n    \"pre-package-uninstall\": [\n      \"support\\\\Plugin::uninstall\"\n    ]\n  },\n  \"minimum-stability\": \"dev\",\n  \"prefer-stable\": true\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "public",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "start.php",
          "type": "blob",
          "size": 0.10546875,
          "content": "#!/usr/bin/env php\n<?php\nchdir(__DIR__);\nrequire_once __DIR__ . '/vendor/autoload.php';\nsupport\\App::run();\n"
        },
        {
          "name": "support",
          "type": "tree",
          "content": null
        },
        {
          "name": "windows.bat",
          "type": "blob",
          "size": 0.03125,
          "content": "CHCP 65001\nphp windows.php\npause"
        },
        {
          "name": "windows.php",
          "type": "blob",
          "size": 3.8193359375,
          "content": "<?php\n/**\n * Start file for windows\n */\nchdir(__DIR__);\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse Dotenv\\Dotenv;\nuse support\\App;\nuse Workerman\\Worker;\n\nini_set('display_errors', 'on');\nerror_reporting(E_ALL);\n\nif (class_exists('Dotenv\\Dotenv') && file_exists(base_path() . '/.env')) {\n    if (method_exists('Dotenv\\Dotenv', 'createUnsafeImmutable')) {\n        Dotenv::createUnsafeImmutable(base_path())->load();\n    } else {\n        Dotenv::createMutable(base_path())->load();\n    }\n}\n\nApp::loadAllConfig(['route']);\n\n$errorReporting = config('app.error_reporting');\nif (isset($errorReporting)) {\n    error_reporting($errorReporting);\n}\n\n$runtimeProcessPath = runtime_path() . DIRECTORY_SEPARATOR . '/windows';\n$paths = [\n    $runtimeProcessPath,\n    runtime_path('logs'),\n    runtime_path('views')\n];\nforeach ($paths as $path) {\n    if (!is_dir($path)) {\n        mkdir($path, 0777, true);\n    }\n}\n\n$processFiles = [];\nif (config('server.listen')) {\n    $processFiles[] = __DIR__ . DIRECTORY_SEPARATOR . 'start.php';\n}\nforeach (config('process', []) as $processName => $config) {\n    $processFiles[] = write_process_file($runtimeProcessPath, $processName, '');\n}\n\nforeach (config('plugin', []) as $firm => $projects) {\n    foreach ($projects as $name => $project) {\n        if (!is_array($project)) {\n            continue;\n        }\n        foreach ($project['process'] ?? [] as $processName => $config) {\n            $processFiles[] = write_process_file($runtimeProcessPath, $processName, \"$firm.$name\");\n        }\n    }\n    foreach ($projects['process'] ?? [] as $processName => $config) {\n        $processFiles[] = write_process_file($runtimeProcessPath, $processName, $firm);\n    }\n}\n\nfunction write_process_file($runtimeProcessPath, $processName, $firm): string\n{\n    $processParam = $firm ? \"plugin.$firm.$processName\" : $processName;\n    $configParam = $firm ? \"config('plugin.$firm.process')['$processName']\" : \"config('process')['$processName']\";\n    $fileContent = <<<EOF\n<?php\nrequire_once __DIR__ . '/../../vendor/autoload.php';\n\nuse Workerman\\Worker;\nuse Workerman\\Connection\\TcpConnection;\nuse Webman\\Config;\nuse support\\App;\n\nini_set('display_errors', 'on');\nerror_reporting(E_ALL);\n\nif (is_callable('opcache_reset')) {\n    opcache_reset();\n}\n\nif (!\\$appConfigFile = config_path('app.php')) {\n    throw new RuntimeException('Config file not found: app.php');\n}\n\\$appConfig = require \\$appConfigFile;\nif (\\$timezone = \\$appConfig['default_timezone'] ?? '') {\n    date_default_timezone_set(\\$timezone);\n}\n\nApp::loadAllConfig(['route']);\n\nworker_start('$processParam', $configParam);\n\nif (DIRECTORY_SEPARATOR != \"/\") {\n    Worker::\\$logFile = config('server')['log_file'] ?? Worker::\\$logFile;\n    TcpConnection::\\$defaultMaxPackageSize = config('server')['max_package_size'] ?? 10*1024*1024;\n}\n\nWorker::runAll();\n\nEOF;\n    $processFile = $runtimeProcessPath . DIRECTORY_SEPARATOR . \"start_$processParam.php\";\n    file_put_contents($processFile, $fileContent);\n    return $processFile;\n}\n\nif ($monitorConfig = config('process.monitor.constructor')) {\n    $monitorHandler = config('process.monitor.handler');\n    $monitor = new $monitorHandler(...array_values($monitorConfig));\n}\n\nfunction popen_processes($processFiles)\n{\n    $cmd = '\"' . PHP_BINARY . '\" ' . implode(' ', $processFiles);\n    $descriptorspec = [STDIN, STDOUT, STDOUT];\n    $resource = proc_open($cmd, $descriptorspec, $pipes, null, null, ['bypass_shell' => true]);\n    if (!$resource) {\n        exit(\"Can not execute $cmd\\r\\n\");\n    }\n    return $resource;\n}\n\n$resource = popen_processes($processFiles);\necho \"\\r\\n\";\nwhile (1) {\n    sleep(1);\n    if (!empty($monitor) && $monitor->checkAllFilesChange()) {\n        $status = proc_get_status($resource);\n        $pid = $status['pid'];\n        shell_exec(\"taskkill /F /T /PID $pid\");\n        proc_close($resource);\n        $resource = popen_processes($processFiles);\n    }\n}\n"
        }
      ]
    }
  ]
}