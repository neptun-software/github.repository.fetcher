{
  "metadata": {
    "timestamp": 1736712052440,
    "page": 581,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "folkloreinc/laravel-graphql",
      "stars": 1762,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".coveralls.yml",
          "type": "blob",
          "size": 0.1005859375,
          "content": "service_name: travis-ci\ncoverage_clover: coverage/clover.xml\njson_path: coverage/coveralls-upload.json\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0556640625,
          "content": "/vendor\n*.log\ncomposer.lock\n/*_backup/\n.idea/*\n/coverage\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.6943359375,
          "content": "language: php\n\ncache:\n  directories:\n    - $HOME/.cache/pip\n    - $HOME/.composer/cache/files\n    - ${TRAVIS_BUILD_DIR}/travis/extension-cache\n\nphp:\n    - 5.5\n    - 5.6\n    - 7.0\n    - 7.1\n\nenv:\n    - ILLUMINATE_VERSION=5.1.* PHPUNIT_VERSION=~4.0\n    - ILLUMINATE_VERSION=5.2.* PHPUNIT_VERSION=~4.0\n    - ILLUMINATE_VERSION=5.3.* PHPUNIT_VERSION=~5.0\n    - ILLUMINATE_VERSION=5.4.* PHPUNIT_VERSION=~5.7\n    - ILLUMINATE_VERSION=5.5.* PHPUNIT_VERSION=~6.0\n    - ILLUMINATE_VERSION=5.5.* PHPUNIT_VERSION=~6.0 COVERAGE=true\n    - ILLUMINATE_VERSION=5.6.* PHPUNIT_VERSION=~7.0\n\nmatrix:\n    # For each PHP version we exclude the coverage env, except for PHP 7.1\n    exclude:\n        # Test only Laravel 5.1 and 5.2 on PHP 5.5\n        - php: 5.5\n          env: ILLUMINATE_VERSION=5.3.* PHPUNIT_VERSION=~5.0\n        - php: 5.5\n          env: ILLUMINATE_VERSION=5.4.* PHPUNIT_VERSION=~5.7\n        - php: 5.5\n          env: ILLUMINATE_VERSION=5.5.* PHPUNIT_VERSION=~6.0\n        - php: 5.5\n          env: ILLUMINATE_VERSION=5.5.* PHPUNIT_VERSION=~6.0 COVERAGE=true\n        - php: 5.5\n          env: ILLUMINATE_VERSION=5.6.* PHPUNIT_VERSION=~7.0\n        # Don't test Laravel 5.5 on PHP 5.6\n        - php: 5.6\n          env: ILLUMINATE_VERSION=5.5.* PHPUNIT_VERSION=~6.0\n        - php: 5.6\n          env: ILLUMINATE_VERSION=5.5.* PHPUNIT_VERSION=~6.0 COVERAGE=true\n        - php: 5.6\n          env: ILLUMINATE_VERSION=5.6.* PHPUNIT_VERSION=~7.0\n        # Test everything on PHP 7.0\n        - php: 7.0\n          env: ILLUMINATE_VERSION=5.5.* PHPUNIT_VERSION=~6.0 COVERAGE=true\n        - php: 7.0\n          env: ILLUMINATE_VERSION=5.6.* PHPUNIT_VERSION=~7.0\n        # Test only Laravel 5.4 and 5.5 on PHP 7.1\n        - php: 7.1\n          env: ILLUMINATE_VERSION=5.1.* PHPUNIT_VERSION=~4.0\n        - php: 7.1\n          env: ILLUMINATE_VERSION=5.2.* PHPUNIT_VERSION=~4.0\n        - php: 7.1\n          env: ILLUMINATE_VERSION=5.3.* PHPUNIT_VERSION=~5.0\n        - php: 7.1\n          env: ILLUMINATE_VERSION=5.5.* PHPUNIT_VERSION=~6.0\n\nbefore_install:\n    - cp ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/xdebug.ini ~/xdebug.ini\n    - phpenv config-rm xdebug.ini\n    - composer global require hirak/prestissimo --update-no-dev\n    - composer require \"illuminate/support:${ILLUMINATE_VERSION}\" --no-update --prefer-dist\n    - composer require \"orchestra/testbench:${ILLUMINATE_VERSION/5\\./3\\.}\" --no-update --prefer-dist\n    - composer require \"phpunit/phpunit:${PHPUNIT_VERSION}\" --no-update --prefer-dist\n\ninstall: travis_retry composer install --no-interaction --prefer-dist\n\nbefore_script: phpenv config-add ~/xdebug.ini\n\nscript: vendor/bin/phpunit\n\nafter_success: sh -c \"if [ ! -z ${COVERAGE+x} ]; then php vendor/bin/coveralls; fi\"\n\nnotifications:\n    email: false\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 12.5888671875,
          "content": "# Laravel GraphQL\n\n----\n\n### This package is no longuer maintained. Please use [rebing/graphql-laravel](https://github.com/rebing/graphql-laravel) or [other Laravel GraphQL packages](https://github.com/search?q=laravel+graphql&type=Repositories)\n\n----\n\nUse Facebook GraphQL with Laravel 5 or Lumen. It is based on the PHP implementation [here](https://github.com/webonyx/graphql-php). You can find more information about GraphQL in the [GraphQL Introduction](http://facebook.github.io/react/blog/2015/05/01/graphql-introduction.html) on the [React](http://facebook.github.io/react) blog or you can read the [GraphQL specifications](https://facebook.github.io/graphql/). This is a work in progress.\n\nThis package is compatible with Eloquent model (or any other data source). See the example below.\n\n[![Latest Stable Version](https://poser.pugx.org/folklore/graphql/v/stable.svg)](https://packagist.org/packages/folklore/graphql)\n[![Build Status](https://travis-ci.org/Folkloreatelier/laravel-graphql.png?branch=master)](https://travis-ci.org/Folkloreatelier/laravel-graphql)\n[![Total Downloads](https://poser.pugx.org/folklore/graphql/downloads.svg)](https://packagist.org/packages/folklore/graphql)\n\n----\n### To use laravel-graphql with Relay, check the [feature/relay](https://github.com/Folkloreatelier/laravel-graphql/tree/feature/relay) branch.\n----\n\n## Installation\n\nVersion 1.0 is released. If you are upgrading from older version, you can check [Upgrade to 1.0](docs/upgrade.md).\n\n#### Dependencies:\n\n* [Laravel 5.x](https://github.com/laravel/laravel) or [Lumen](https://github.com/laravel/lumen)\n* [GraphQL PHP](https://github.com/webonyx/graphql-php)\n\n\n**1-** Require the package via Composer in your `composer.json`.\n```json\n{\n  \"require\": {\n    \"folklore/graphql\": \"~1.0.0\"\n  }\n}\n```\n\n**2-** Run Composer to install or update the new requirement.\n\n```bash\n$ composer install\n```\n\nor\n\n```bash\n$ composer update\n```\n\n### Laravel >= 5.5.x\n\n**1-** Publish the configuration file\n\n```bash\n$ php artisan vendor:publish --provider=\"Folklore\\GraphQL\\ServiceProvider\"\n```\n\n**2-** Review the configuration file\n\n```\nconfig/graphql.php\n```\n\n### Laravel <= 5.4.x\n\n**1-** Add the service provider to your `config/app.php` file\n```php\nFolklore\\GraphQL\\ServiceProvider::class,\n```\n\n**2-** Add the facade to your `config/app.php` file\n```php\n'GraphQL' => Folklore\\GraphQL\\Support\\Facades\\GraphQL::class,\n```\n\n**3-** Publish the configuration file\n\n```bash\n$ php artisan vendor:publish --provider=\"Folklore\\GraphQL\\ServiceProvider\"\n```\n\n**4-** Review the configuration file\n\n```\nconfig/graphql.php\n```\n\n### Lumen\n\n**1-** Load the service provider in `bootstrap/app.php`\n```php\n$app->register(Folklore\\GraphQL\\LumenServiceProvider::class);\n```\n\n**2-** For using the facade you have to uncomment the line `$app->withFacades();` in `bootstrap/app.php`\n\nAfter uncommenting this line you have the `GraphQL` facade enabled\n\n```php\n$app->withFacades();\n```\n\n**3-** Publish the configuration file\n\n```bash\n$ php artisan graphql:publish\n```\n\n**4-** Load configuration file in `bootstrap/app.php`\n\n*Important*: this command needs to be executed before the registration of the service provider\n\n```php\n$app->configure('graphql');\n...\n$app->register(Folklore\\GraphQL\\LumenServiceProvider::class)\n```\n\n**5-** Review the configuration file\n\n```\nconfig/graphql.php\n```\n\n## Documentation\n\n- [Upgrade to 1.0](docs/upgrade.md)\n\n## Usage\n\n- [Schemas](#schemas)\n- [Creating a query](#creating-a-query)\n- [Creating a mutation](#creating-a-mutation)\n- [Adding validation to mutation](#adding-validation-to-mutation)\n\n#### Advanced Usage\n- [Query variables](docs/advanced.md#query-variables)\n- [Query nested resource](docs/advanced.md#query-nested-resource)\n- [Enums](docs/advanced.md#enums)\n- [Interfaces](docs/advanced.md#interfaces)\n- [Custom field](docs/advanced.md#custom-field)\n- [Eager loading relationships](docs/advanced.md#eager-loading-relationships)\n\n### Schemas\nStarting from version 1.0, you can define multiple schemas. Having multiple schemas can be useful if, for example, you want an endpoint that is public and another one that needs authentication.\n\nYou can define multiple schemas in the config:\n\n```php\n'schema' => 'default',\n\n'schemas' => [\n    'default' => [\n        'query' => [\n            //'users' => 'App\\GraphQL\\Query\\UsersQuery'\n        ],\n        'mutation' => [\n            //'updateUserEmail' => 'App\\GraphQL\\Query\\UpdateUserEmailMutation'\n        ]\n    ],\n    'secret' => [\n        'query' => [\n            //'users' => 'App\\GraphQL\\Query\\UsersQuery'\n        ],\n        'mutation' => [\n            //'updateUserEmail' => 'App\\GraphQL\\Query\\UpdateUserEmailMutation'\n        ]\n    ]\n]\n```\n\nOr you can add schema using the facade:\n\n```php\nGraphQL::addSchema('secret', [\n    'query' => [\n        'users' => 'App\\GraphQL\\Query\\UsersQuery'\n    ],\n    'mutation' => [\n        'updateUserEmail' => 'App\\GraphQL\\Query\\UpdateUserEmailMutation'\n    ]\n]);\n```\n\nAfterwards, you can build the schema using the facade:\n\n```php\n// Will return the default schema defined by 'schema' in the config\n$schema = GraphQL::schema();\n\n// Will return the 'secret' schema\n$schema = GraphQL::schema('secret');\n\n// Will build a new schema\n$schema = GraphQL::schema([\n    'query' => [\n        //'users' => 'App\\GraphQL\\Query\\UsersQuery'\n    ],\n    'mutation' => [\n        //'updateUserEmail' => 'App\\GraphQL\\Query\\UpdateUserEmailMutation'\n    ]\n]);\n```\n\nOr you can request the endpoint for a specific schema\n\n```\n// Default schema\nhttp://homestead.app/graphql?query=query+FetchUsers{users{id,email}}\n\n// Secret schema\nhttp://homestead.app/graphql/secret?query=query+FetchUsers{users{id,email}}\n```\n\n### Creating a query\n\nFirst you need to create a type.\n\n```php\nnamespace App\\GraphQL\\Type;\n\nuse GraphQL\\Type\\Definition\\Type;\nuse Folklore\\GraphQL\\Support\\Type as GraphQLType;\n\nclass UserType extends GraphQLType\n{\n    protected $attributes = [\n        'name' => 'User',\n        'description' => 'A user'\n    ];\n\n    /*\n    * Uncomment following line to make the type input object.\n    * http://graphql.org/learn/schema/#input-types\n    */\n    // protected $inputObject = true;\n\n    public function fields()\n    {\n        return [\n            'id' => [\n                'type' => Type::nonNull(Type::string()),\n                'description' => 'The id of the user'\n            ],\n            'email' => [\n                'type' => Type::string(),\n                'description' => 'The email of user'\n            ]\n        ];\n    }\n\n    // If you want to resolve the field yourself, you can declare a method\n    // with the following format resolve[FIELD_NAME]Field()\n    protected function resolveEmailField($root, $args)\n    {\n        return strtolower($root->email);\n    }\n}\n```\n\nAdd the type to the `config/graphql.php` configuration file\n\n```php\n'types' => [\n    'User' => 'App\\GraphQL\\Type\\UserType'\n]\n```\n\nYou could also add the type with the `GraphQL` Facade, in a service provider for example.\n\n```php\nGraphQL::addType('App\\GraphQL\\Type\\UserType', 'User');\n```\n\nThen you need to define a query that returns this type (or a list). You can also specify arguments that you can use in the resolve method.\n```php\nnamespace App\\GraphQL\\Query;\n\nuse GraphQL;\nuse GraphQL\\Type\\Definition\\Type;\nuse Folklore\\GraphQL\\Support\\Query;\nuse App\\User;\n\nclass UsersQuery extends Query\n{\n    protected $attributes = [\n        'name' => 'users'\n    ];\n\n    public function type()\n    {\n        return Type::listOf(GraphQL::type('User'));\n    }\n\n    public function args()\n    {\n        return [\n            'id' => ['name' => 'id', 'type' => Type::string()],\n            'email' => ['name' => 'email', 'type' => Type::string()]\n        ];\n    }\n\n    public function resolve($root, $args)\n    {\n        if (isset($args['id'])) {\n            return User::where('id' , $args['id'])->get();\n        } else if(isset($args['email'])) {\n            return User::where('email', $args['email'])->get();\n        } else {\n            return User::all();\n        }\n    }\n}\n```\n\nAdd the query to the `config/graphql.php` configuration file\n\n```php\n'schemas' => [\n    'default' => [\n        'query' => [\n            'users' => 'App\\GraphQL\\Query\\UsersQuery'\n        ],\n        // ...\n    ]\n]\n```\n\nAnd that's it. You should be able to query GraphQL with a request to the url `/graphql` (or anything you choose in your config). Try a GET request with the following `query` input\n\n```\nquery FetchUsers {\n  users {\n    id\n    email\n  }\n}\n```\n\nFor example, if you use homestead:\n```\nhttp://homestead.app/graphql?query=query+FetchUsers{users{id,email}}\n```\n\n### Creating a mutation\n\nA mutation is like any other query, it accepts arguments (which will be used to do the mutation) and return an object of a certain type.\n\nFor example a mutation to update the password of a user. First you need to define the Mutation.\n\n```php\nnamespace App\\GraphQL\\Mutation;\n\nuse GraphQL;\nuse GraphQL\\Type\\Definition\\Type;\nuse Folklore\\GraphQL\\Support\\Mutation;\nuse App\\User;\n\nclass UpdateUserPasswordMutation extends Mutation\n{\n    protected $attributes = [\n        'name' => 'updateUserPassword'\n    ];\n\n    public function type()\n    {\n        return GraphQL::type('User');\n    }\n\n    public function args()\n    {\n        return [\n            'id' => ['name' => 'id', 'type' => Type::nonNull(Type::string())],\n            'password' => ['name' => 'password', 'type' => Type::nonNull(Type::string())]\n        ];\n    }\n\n    public function resolve($root, $args)\n    {\n        $user = User::find($args['id']);\n\n        if (!$user) {\n            return null;\n        }\n\n        $user->password = bcrypt($args['password']);\n        $user->save();\n\n        return $user;\n    }\n}\n```\n\nAs you can see in the `resolve` method, you use the arguments to update your model and return it.\n\nYou then add the mutation to the `config/graphql.php` configuration file\n\n```php\n'schema' => [\n    'default' => [\n        'mutation' => [\n            'updateUserPassword' => 'App\\GraphQL\\Mutation\\UpdateUserPasswordMutation'\n        ],\n        // ...\n    ]\n]\n```\n\nYou should then be able to use the following query on your endpoint to do the mutation.\n\n```\nmutation users {\n  updateUserPassword(id: \"1\", password: \"newpassword\") {\n    id\n    email\n  }\n}\n```\n\nif you use homestead:\n```\nhttp://homestead.app/graphql?query=mutation+users{updateUserPassword(id: \"1\", password: \"newpassword\"){id,email}}\n```\n\n#### Adding validation to mutation\n\nIt is possible to add validation rules to mutation. It uses the laravel `Validator` to performs validation against the `args`.\n\nWhen creating a mutation, you can add a method to define the validation rules that apply by doing the following:\n\n```php\nnamespace App\\GraphQL\\Mutation;\n\nuse GraphQL;\nuse GraphQL\\Type\\Definition\\Type;\nuse Folklore\\GraphQL\\Support\\Mutation;\nuse App\\User;\n\nclass UpdateUserEmailMutation extends Mutation\n{\n    protected $attributes = [\n        'name' => 'UpdateUserEmail'\n    ];\n\n    public function type()\n    {\n        return GraphQL::type('User');\n    }\n\n    public function args()\n    {\n        return [\n            'id' => ['name' => 'id', 'type' => Type::string()],\n            'email' => ['name' => 'email', 'type' => Type::string()]\n        ];\n    }\n\n    public function rules()\n    {\n        return [\n            'id' => ['required'],\n            'email' => ['required', 'email']\n        ];\n    }\n\n    public function resolve($root, $args)\n    {\n        $user = User::find($args['id']);\n\n        if (!$user) {\n            return null;\n        }\n\n        $user->email = $args['email'];\n        $user->save();\n\n        return $user;\n    }\n}\n```\n\nAlternatively you can define rules with each args\n\n```php\nclass UpdateUserEmailMutation extends Mutation\n{\n    //...\n\n    public function args()\n    {\n        return [\n            'id' => [\n                'name' => 'id',\n                'type' => Type::string(),\n                'rules' => ['required']\n            ],\n            'email' => [\n                'name' => 'email',\n                'type' => Type::string(),\n                'rules' => ['required', 'email']\n            ]\n        ];\n    }\n\n    //...\n}\n```\n\nWhen you execute a mutation, it will returns the validation errors. Since GraphQL specifications define a certain format for errors, the validation errors messages are added to the error object as a extra `validation` attribute. To find the validation error, you should check for the error with a `message` equals to `'validation'`, then the `validation` attribute will contain the normal errors messages returned by the Laravel Validator.\n\n```json\n{\n  \"data\": {\n    \"updateUserEmail\": null\n  },\n  \"errors\": [\n    {\n      \"message\": \"validation\",\n      \"locations\": [\n        {\n          \"line\": 1,\n          \"column\": 20\n        }\n      ],\n      \"validation\": {\n        \"email\": [\n          \"The email is invalid.\"\n        ]\n      }\n    }\n  ]\n}\n```\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.5185546875,
          "content": "{\n    \"name\": \"folklore/graphql\",\n    \"description\": \"Facebook GraphQL for Laravel\",\n    \"keywords\": [\"framework\", \"laravel\", \"graphql\", \"react\"],\n    \"authors\": [\n        {\n            \"name\": \"Folklore\",\n            \"email\": \"info@atelierfolklore.ca\",\n            \"homepage\": \"http://atelierfolklore.ca\"\n        },\n        {\n            \"name\": \"David Mongeau-Petitpas\",\n            \"email\": \"dmp@atelierfolklore.ca\",\n            \"homepage\": \"http://mongo.ca\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"license\": \"MIT\",\n    \"type\": \"library\",\n    \"require\": {\n        \"php\": \">=5.5.9\",\n        \"illuminate/support\": \"5.1.*|5.2.*|5.3.*|5.4.*|5.5.*|5.6.*|5.7.*\",\n        \"webonyx/graphql-php\": \"~0.10.2\"\n    },\n    \"require-dev\": {\n        \"orchestra/testbench\": \"3.1.*|3.2.*|3.3.*|3.4.*|3.5.*\",\n        \"fzaninotto/faker\": \"~1.4\",\n        \"mockery/mockery\": \"0.9.*\",\n        \"satooshi/php-coveralls\": \"^1.0\",\n        \"phpunit/phpunit\": \"~4.0|~5.0|~5.7|~6.0\"\n    },\n    \"autoload\": {\n        \"psr-0\": {\n            \"Folklore\\\\GraphQL\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"classmap\": [\n            \"tests/\"\n        ]\n    },\n    \"suggest\": {\n        \"rebing/graphql-laravel\": \"folklore/graphql is no longuer maintained. Please use rebing/graphql-laravel\"\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"Folklore\\\\GraphQL\\\\ServiceProvider\"\n            ],\n            \"aliases\": {\n                \"GraphQL\": \"Folklore\\\\GraphQL\\\\Support\\\\Facades\\\\GraphQL\"\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpcs.xml",
          "type": "blob",
          "size": 0.3984375,
          "content": "<?xml version=\"1.0\"?>\n<ruleset name=\"PHP_CodeSniffer\">\n    <description>The coding standard for laravel package</description>\n\n    <file>src</file>\n    \n    <exclude-pattern>*.json</exclude-pattern>\n    <exclude-pattern>*.xml</exclude-pattern>\n\n    <rule ref=\"PSR2\"/>\n    <rule ref=\"PSR1.Classes.ClassDeclaration.MissingNamespace\">\n        <exclude-pattern>*/tests/*</exclude-pattern>\n    </rule>\n</ruleset>\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.927734375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         syntaxCheck=\"false\"\n>\n    <testsuites>\n        <testsuite name=\"Folklore/GraphQL Test Suite\">\n            <directory>./tests</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist processUncoveredFilesFromWhitelist=\"true\">\n            <directory suffix=\".php\">./src/Folklore/GraphQL</directory>\n            <exclude>\n                <file>./src/Folklore/GraphQL/routes.php</file>\n            </exclude>\n        </whitelist>\n    </filter>\n    <logging>\n        <log type=\"coverage-clover\" target=\"coverage/clover.xml\"/>\n    </logging>\n</phpunit>\n"
        },
        {
          "name": "release.sh",
          "type": "blob",
          "size": 0.73046875,
          "content": "#!/bin/zsh\n\n#Fetch remote tags\ngit fetch origin 'refs/tags/*:refs/tags/*'\n\n#Variables\nLAST_VERSION=$(git tag -l | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n | tail -n 1)\nNEXT_VERSION=$(echo $LAST_VERSION | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf(\"%0*d\", length($NF), ($NF+1)%(10^length($NF))); print}')\nVERSION=${1-${NEXT_VERSION}}\nDEFAULT_MESSAGE=\"Release\"\nMESSAGE=${2-${DEFAULT_MESSAGE}}\nRELEASE_BRANCH=\"release/$VERSION\"\n\n# Commit uncommited changes\ngit add .\ngit commit -am $MESSAGE\ngit push origin develop\n\n# Merge develop branch in master\ngit checkout master\ngit merge develop\n\n# Tag and push master\ngit tag $VERSION\ngit push origin master --tags\n\n# Return to develop\ngit checkout develop\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}