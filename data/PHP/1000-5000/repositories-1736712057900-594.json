{
  "metadata": {
    "timestamp": 1736712057900,
    "page": 594,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "shuchkin/simplexlsx",
      "stars": 1739,
      "defaultBranch": "master",
      "files": [
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.69140625,
          "content": "# Changelog\n\n# 1.1.13 (2024-12-21)\n* fixed css colors vulnerability\n\n# 1.1.12 (2024-12-11)\n* fixed toHTMLEx css vulnerability \n\n# 1.1.11 (2024-07-06)\n* fixed [#157](https://github.com/shuchkin/simplexlsx/issues/157)\n\n## 1.1.10 (2023-04-27)\n* Cell comments returns in rowsEx\n* hyperlinks moved to rowsEx\n* all fields and methods public now\n* helper methods is static now\n\n## 1.0.21 (2023-04-09)\n* fixed activeSheet(Tab)\n\n## 1.0.20 (2023-04-05)\n* fixed activeSheet(Tab)\n\n## 1.0.18 (2023-02-04)\n* fixed regex to detect date/datetime in cell\n* added $this->sheetMeta($worksheetIndex = null) to get metadata from workbook.xml\n* added $this->isHiddenSheet($worksheetIndex)\n* deleted $this->sheetNemes (use $this-sheetMetadata)\n\n## 1.0.17 (2022-10-13)\n\n* fixed readRowsEx (Undefined index: fontId)\n\n## 1.0.16 (2022-03-18)\n\n* fixed rowsEx(), _format_ returns now\n\n## 1.0.15 (2022-03-11)\n\n* Added requirements PHP 5.5+ in composer.json and README.md\n\n## 1.0.14 (2022-03-01)\n\n* PHP 5 generators capability, thx [maxiben](https://github.com/maxiben)\n\n## 1.0.13 (2022-02-22)\n\n* fixed basic usage example\n\n## 1.0.12 (2022-02-21)\n\n* 1.0 VERSION: Memory and styles\n* PHP 5.5+, namespace `Shuchkin`, 4 spaces indents\n* memory: added readRows() and readRowsEx() returns Generator. Help to read huge files\n* memory: in my tests ~100k rowsEx() used 880 MB, readRowsEx() used 162 MB\n* memory: added SimpleXLSXEx companion class for extract styles, used in rowsEx & toHTMLEx() only\n* styles: alignment, fonts, fills, borders\n* styles: rowsEx() return style info, cell width & height, css to apply in TD tag \n* styles: added toHTMLEx() to export worksheet to HTML formatted table\n* fixed author in license.md\n* fixed examples\n\n## 0.9.11 (2022-02-05)\n\n* type \"str\" (formula and value)\n\n## 0.9.10 (2022-02-04)\n\n* class namespaced as Shuchkin\\SimpleXLSX\n* fixed reading from XML datetime as float and datetime as ISO  \n\n## 0.8.33 (2022-01-23)\n\n* getting xml error  \n\n## 0.8.32 (2022-01-22)\n\n* added LIBXML_COMPACT | LIBXML_PARSEHUGE\n\n## 0.8.31 (2021-12-01)\n\n* added $xlsx->activeSheet (thx reptile)\n\n## 0.8.30 (2021-12-01)\n\n* added $limit to $xlsx->rows( $sheetIndex = 0, $limit = 0 ) and to $xlsx->rowsEx( $seetIndex = 0, $limit = 0)\n* Anyway SimpleXML loaded all XML data, so memory economy is minimal\n\n## 0.8.29 (2021-10-28)\n* \n* prevent not exists `cols` notice\n* if cell type undefined, then parse it as number \n\n## 0.8.27 (2021-09-30)\n* [] to array() for PHP 5.2 backward compatibility. Tested from PHP 5.2.7 to 8.0.9\n\n## 0.8.26 (2021-08-24)\n\n* Fixed datetime type detection \n\n## 0.8.25 (2021-07-28)\n\n* ::rowsEx() - returns *hidden* flag, for hidden cells \n\n## 0.8.24 (2021-05-18)\n\n* Extract internal links\n\n## 0.8.23 (2021-04-20)\n\n* x10 fastest getCell, thx [Jonowa](https://github.com/shuchkin/simplexlsx/issues/102)\n* for xpath idea / all private methods protected now. \n\n## 0.8.22 (2021-04-20)\n\n* fixed lost hash of hyperlinks \n\n## 0.8.21 (2021-01-11)\n\n* libxml_disable_entity_loader and PHP 8, thx [iKlsR](https://github.com/shuchkin/simplexlsx/issues/96)\n\n## 0.8.19 (2020-07-28)\n\n* fixed empty shared strings xml\n\n## 0.8.18 (2020-07-21)\n\n* fixed hyperlinks\n\n## 0.8.17 (2020-06-15)\n\n* fixed version number, added relative pathes a/../b support in relations\n\n## 0.8.16 (2020-06-14)\n\n* fixed abs pathes in relations\n\n## 0.8.15 (2020-04-28)\n\n* fixed LibreOffice xml specificity, thx [stephengmatthews](https://github.com/shuchkin/simplexlsx/issues/77)\n\n## 0.8.14 (2020-04-03)\n\n* fixed Office for Mac relations\n\n## 0.8.13 (2020-02-19)\n\n* removed skipEmptyRows property (xml optimization always), added static parseFile & parseData\n\n## 0.8.12 (2020-01-22)\n\n* remove empty rows (opencalc)\n\n## 0.8.11 (2020-01-20)\n\n* changed formats source priority\n\n## 0.8.10 (2019-11-07)\n\n* skipEmptyRows improved\n\n## 0.8.9 (2019-08-15)\n\n* fixed release version\n\n## 0.8.8 (2019-06-19)\n\n* removed list( $x, $y ), added bool $xlsx->skipEmptyRows, $xlsx->parseFile( $filename ), $xlsx->parseData( $data ), release 0.8.8\n\n## 0.8.7 (2019-04-18)\n\n* empty rows fixed, release 0.8.7\n\n## 0.8.6 (2019-04-16)\n\n* 1900/1904 bug fixed\n\n## 0.8.5 (2019-03-07)\n\n* SimpleXLSX::ParseErrno(), $xlsx->errno() returns error code\n\n## 0.8.4 (2019-02-14)\n\n* detect datetime values, mb_string.func_overload=2 support .!. Bitrix\n\n## 0.8.3 (2018-11-14)\n\n* getCell - fixed empty cells and rows, safe now, but very slow\n\n## 0.8.2 (2018-11-09)\n\n* fix empty cells and rows in rows() and rowsEx(), added setDateTimeFormat( $see_php_date_func )\n\n## 0.8.1\n\n* rename simplexlsx.php to SimpleXLSX.php, rename parse_error to parseError fix _columnIndex, add ->toHTML(), GNU to MIT license\n\n## 0.7.13 (2018-06-18)\n\n* get sheet indexes bug fix\n\n## 0.7.12 (2018-06-17)\n\n* $worksheet_id to $worksheet_index, sheet numeration started 0\n\n## 0.7.11 (2018-04-25)\n\n* rowsEx(), added row index \"r\" to cell info\n\n## 0.7.10 (2018-04-21)\n\n* fixed getCell, returns NULL if not exits\n\n## 0.7.9 (2018-03-17)\n\n* fixed sheetNames() (namespaced or not namespaced attr)\n\n## 0.7.8 (2018-01-15)\n\n* remove namespace prefixes (hardcoded)\n\n## 0.7.7 (2017-10-02)\n\n* XML External Entity (XXE) Prevention (<!ENTITY xxe SYSTEM \"file: ///etc/passwd\" >]>)\n\n## 0.7.6 (2017-09-26)\n\n* if worksheet_id === 0 (default) then detect first sheet (for LibreOffice capabilities)\n\n## 0.7.5 (2017-09-10)\n\n* ->getCell() - fixed\n\n## 0.7.4 (2017-08-22)\n\n* ::parse_error() - to get last error in \"static style\"\n\n## 0.7.3 (2017-08-14)\n\n* ->_parse fixed relations reader, added ->getCell( sheet_id, address, format ) for direct cell reading\n\n## 0.7.2 (2017-05-13)\n\n* ::parse( $filename ) helper method\n\n## 0.7.1 (2017-03-29)\n\n* License added\n\n## 0.6.11 (2016-07-27)\n\n* fixed timestamp()\n\n## 0.6.10 (2016-06-10)\n\n* fixed search entries (UPPERCASE)\n\n## 0.6.9 (2015-04-12)\n\n* $xlsx->datetime_format to force dates out\n\n## 0.6.8 (2013-10-13)\n\n* fixed dimension() where 1 row only, fixed rowsEx() empty cells indexes (Daniel Stastka)\n\n## 0.6.7 (2013-08-10)\n\n* fixed unzip (mac), added $debug param to _constructor to display errors\n\n## 0.6.6 (2013-06-03)\n\n* +entryExists()\n\n## 0.6.5 (2013-03-18)\n\n* fixed sheetName()\n\n## 0.6.4 (2013-03-13)\n\n* rowsEx(), _parse(): fixed date column type & format detection\n\n## 0.6.3 (2013-03-13)\n\n* rowsEx(): fixed formulas, added date type 'd', added format 'format'\n\t\t\t\t\tdimension(): fixed empty sheet dimension\n                    + sheetNames() - returns array( sheet_id => sheet_name, sheet_id2 => sheet_name2 ...)\n\n## 0.6.2 (2012-10-04)\n\n* fixed empty cells, rowsEx() returns type and formulas now\n\n## 0.6.1 (2012-09-14)\n\n* removed \"raise exception\" and fixed _unzip\n\n## 0.6 (2012-09-13)\n\n* success(), error(), __constructor( $filename, $is_data = false )\n\n## 0.5.1 (2012-09-13)\n\n* sheetName() fixed\n\n## 0.5 (2012-09-12)\n\n* sheetName()\n\n## 0.4\n\n* sheets(), sheetsCount(), unixstamp( $excelDateTime )\n\n## 0.3\n\n* fixed empty cells (Gonzo patch)"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.16796875,
          "content": "# SimpleXLSX class (Official)\n[<img src=\"https://img.shields.io/packagist/dt/shuchkin/simplexlsx\" />](https://packagist.org/packages/shuchkin/simplexlsx)\n[<img src=\"https://img.shields.io/github/license/shuchkin/simplexlsx\" />](https://github.com/shuchkin/simplexlsx/blob/master/license.md) [<img src=\"https://img.shields.io/github/stars/shuchkin/simplexlsx\" />](https://github.com/shuchkin/simplexlsx/stargazers) [<img src=\"https://img.shields.io/github/forks/shuchkin/simplexlsx\" />](https://github.com/shuchkin/simplexlsx/network) [<img src=\"https://img.shields.io/github/issues/shuchkin/simplexlsx\" />](https://github.com/shuchkin/simplexlsx/issues)\n[<img src=\"https://img.shields.io/opencollective/all/simplexlsx\" />](https://opencollective.com/simplexlsx)\n[<img src=\"https://img.shields.io/badge/patreon-_-_\" />](https://www.patreon.com/shuchkin)\n\nParse and retrieve data from Excel XLSx files. MS Excel 2007 workbooks PHP reader.\nNo addiditional extensions need (internal unzip + standart SimpleXML parser).\n\nSee also:<br/>\n[SimpleXLS](https://github.com/shuchkin/simplexls) old format MS Excel 97 php reader.<br/>\n[SimpleXLSXGen](https://github.com/shuchkin/simplexlsxgen) xlsx php writer.  \n\n*Hey, bro, please â˜… the package for my motivation :) and [donate](https://opencollective.com/simplexlsx) for more motivation!*\n\n**Sergey Shuchkin** <sergey.shuchkin@gmail.com>\n\n## Basic Usage\n```php\nuse Shuchkin\\SimpleXLSX;\n\nif ( $xlsx = SimpleXLSX::parse('book.xlsx') ) {\n    print_r( $xlsx->rows() );\n} else {\n    echo SimpleXLSX::parseError();\n}\n```\n```\nArray\n(\n    [0] => Array\n        (\n            [0] => ISBN\n            [1] => title\n            [2] => author\n            [3] => publisher\n            [4] => ctry\n        )\n\n    [1] => Array\n        (\n            [0] => 618260307\n            [1] => The Hobbit\n            [2] => J. R. R. Tolkien\n            [3] => Houghton Mifflin\n            [4] => USA\n        )\n\n)\n```\n## Installation\nThe recommended way to install this library is [through Composer](https://getcomposer.org).\n[New to Composer?](https://getcomposer.org/doc/00-intro.md)\n\nThis will install the latest supported version:\n```bash\n$ composer require shuchkin/simplexlsx\n```\nor download PHP 5.5+ class [here](https://github.com/shuchkin/simplexlsx/blob/master/src/SimpleXLSX.php)\n\n## Basic methods\n```\n// open\nSimpleXLSX::parse( $filename, $is_data = false, $debug = false ): SimpleXLSX (or false)\nSimpleXLSX::parseFile( $filename, $debug = false ): SimpleXLSX (or false)\nSimpleXLSX::parseData( $data, $debug = false ): SimpleXLSX (or false)\n// simple\n$xlsx->rows($worksheetIndex = 0, $limit = 0): array\n$xlsx->readRows($worksheetIndex = 0, $limit = 0): Generator - helps read huge xlsx\n$xlsx->toHTML($worksheetIndex = 0, $limit = 0): string\n// extended\n$xlsx->rowsEx($worksheetIndex = 0, $limit = 0): array\n$xlsx->readRowsEx($worksheetIndex = 0, $limit = 0): Generator - helps read huge xlsx with styles\n$xlsx->toHTMLEx($worksheetIndex = 0, $limit = 0): string\n// meta\n$xlsx->dimension($worksheetIndex):array [num_cols, num_rows]\n$xlsx->sheetsCount():int\n$xlsx->sheetNames():array\n$xlsx->sheetName($worksheetIndex):string\n$xlsx->sheetMeta($worksheetIndex = null):array sheets metadata (null = all sheets)\n$xlsx->isHiddenSheet($worksheetIndex):bool\n$xlsx->getStyles():array\n```\n\n## Examples\n### XLSX to html table\n```php\necho SimpleXLSX::parse('book.xlsx')->toHTML();\n```\nor\n```php\nif ( $xlsx = SimpleXLSX::parse('book.xlsx') ) {\n\techo '<table border=\"1\" cellpadding=\"3\" style=\"border-collapse: collapse\">';\n\tforeach( $xlsx->rows() as $r ) {\n\t\techo '<tr><td>'.implode('</td><td>', $r ).'</td></tr>';\n\t}\n\techo '</table>';\n} else {\n\techo SimpleXLSX::parseError();\n}\n```\nor styled html table\n```php\nif ( $xlsx = SimpleXLSX::parse('book_styled.xlsx') ) {\n    echo $xlsx->toHTMLEx();\n}\n```\n### XLSX read huge file, xlsx to csv\n```php\nif ( $xlsx = SimpleXLSX::parse( 'xlsx/books.xlsx' ) ) {\n    $f = fopen('book.csv', 'wb');\n    // fwrite($f, chr(0xEF) . chr(0xBB) . chr(0xBF)); // UTF-8 BOM\n    foreach ( $xlsx->readRows() as $r ) {\n        fputcsv($f, $r); // fputcsv($f, $r, ';', '\"', \"\\\\\", \"\\r\\n\");\n    }\n    fclose($f);\n} else {\n    echo SimpleXLSX::parseError();\n}\n```\n### XLSX get sheet names and sheet indexes\n```php\n// Sheet numeration started 0\n\nif ( $xlsx = SimpleXLSX::parse( 'xlsx/books.xlsx' ) ) {\n    print_r( $xlsx->sheetNames() );\n    print_r( $xlsx->sheetName( $xlsx->activeSheet ) );\n}\n\n```\n```\nArray\n(\n    [0] => Sheet1\n    [1] => Sheet2\n    [2] => Sheet3\n)\nSheet2\n```\n### Using rowsEx() to extract cell info\n```php\n$xlsx = SimpleXLSX::parse('book.xlsx');\nprint_r( $xlsx->rowsEx() );\n\n```\n```\nArray\n(\n    [0] => Array\n        (\n            [0] => Array\n                (\n                    [type] => s\n                    [name] => A1\n                    [value] => ISBN\n                    [href] => \n                    [f] => \n                    [format] => \n                    [s] => 0\n                    [css] => color: #000000;font-family: Calibri;font-size: 17px;\n                    [r] => 1\n                    [hidden] =>\n                    [width] => 13.7109375\n                    [height] => 0\n                    [comment] =>\n                )\n        \n            [1] => Array\n                (\n                    [type] => \n                    [name] => B1\n                    [value] => 2016-04-12 13:41:00\n                    [href] => Sheet1!A1\n                    [f] => \n                    [format] => m/d/yy h:mm\n                    [s] => 0\n                    [css] => color: #000000;font-family: Calibri;font-size: 17px;            \n                    [r] => 2\n                    [hidden] => 1\n                    [width] => 16.5703125\n                    [height] => 0\n                    [comment] => Serg: See transaction history   \n                    \n                )\n```\n<!--suppress HttpUrlsUsage -->\n<table>\n<tr><td>type</td><td>cell <a href=\"http://c-rex.net/projects/samples/ooxml/e1/Part4/OOXML_P4_DOCX_ST_CellType_topic_ID0E6NEFB.html#topic_ID0E6NEFB\">type</a></td></tr>\n<tr><td>name</td><td>cell name (A1, B11)</td></tr>\n<tr><td>value</td><td>cell value (1233, 1233.34, 2022-02-21 00:00:00, String)</td></tr>\n<tr><td>href</td><td>internal and external links</td></tr>\n<tr><td>f</td><td>formula</td></tr>\n<tr><td>s</td><td>style index, use <code>$xlsx->cellFormats[ $index ]</code> to get style</td></tr>\n<tr><td>css</td><td>generated cell CSS</td></tr>\n<tr><td>r</td><td>row index</td></tr>\n<tr><td>hidden</td><td>hidden row or column</td></tr>\n<tr><td>width</td><td>width in <a href=\"http://c-rex.net/projects/samples/ooxml/e1/Part4/OOXML_P4_DOCX_col_topic_ID0ELFQ4.html\">custom units</a></td></tr>\n<tr><td>height</td><td>height in points (pt, 1/72 in)</td></tr>\n<tr><td>comment</td><td>Cell comment as plain text</td></tr>\n</table>\n\n### Select Sheet\n```php\n$xlsx = SimpleXLSX::parse('book.xlsx');\n// Sheet numeration started 0, we select second worksheet\nforeach( $xlsx->rows(1) as $r ) {\n// ...\n}\n```\n### Get sheet by index \n```php\n$xlsx = SimpleXLSX::parse('book.xlsx');\t\necho 'Sheet Name 2 = '.$xlsx->sheetName(1);\n```\n### XLSX::parse remote data\n```php\nif ( $xlsx = SimpleXLSX::parse('https://www.example.com/example.xlsx' ) ) {\n\t$dim = $xlsx->dimension(1); // don't trust dimension extracted from xml\n\t$num_cols = $dim[0];\n\t$num_rows = $dim[1];\n\techo $xlsx->sheetName(1).':'.$num_cols.'x'.$num_rows;\n} else {\n\techo SimpleXLSX::parseError();\n}\n```\n### XLSX::parse memory data\n```php\n// For instance $data is a data from database or cache    \nif ( $xlsx = SimpleXLSX::parseData( $data ) ) {\n\tprint_r( $xlsx->rows() );\n} else {\n\techo SimpleXLSX::parseError();\n}\n```\n### Get Cell (slow)\n```php\necho $xlsx->getCell(0, 'B2'); // The Hobbit\n``` \n### DateTime helpers\n```php\n// default SimpleXLSX datetime format is YYYY-MM-DD HH:MM:SS (ISO, MySQL)\necho $xlsx->getCell(0,'C2'); // 2016-04-12 13:41:00\n\n// custom datetime format\n$xlsx->setDateTimeFormat('d.m.Y H:i');\necho $xlsx->getCell(0,'C2'); // 12.04.2016 13:41\n\n// unixstamp\n$xlsx->setDateTimeFormat('U');\n$ts = $xlsx->getCell(0,'C2'); // 1460468460\necho gmdate('Y-m-d', $ts); // 2016-04-12\necho gmdate('H:i:s', $ts); // 13:41:00\n\n// raw excel value\n$xlsx->setDateTimeFormat( NULL ); // returns as excel datetime\n$xd = $xlsx->getCell(0,'C2'); // 42472.570138889\necho gmdate('m/d/Y', $xlsx->unixstamp( $xd )); // 04/12/2016\necho gmdate('H:i:s', $xlsx->unixstamp( $xd )); // 13:41:00 \n```\n### Rows with header values as keys\n```php\nif ( $xlsx = SimpleXLSX::parse('books.xlsx')) {\n    // Produce array keys from the array values of 1st array element\n    $header_values = $rows = [];\n    foreach ( $xlsx->rows() as $k => $r ) {\n        if ( $k === 0 ) {\n            $header_values = $r;\n            continue;\n        }\n        $rows[] = array_combine( $header_values, $r );\n    }\n    print_r( $rows );\n}\n```\n```\nArray\n(\n    [0] => Array\n        (\n            [ISBN] => 618260307\n            [title] => The Hobbit\n            [author] => J. R. R. Tolkien\n            [publisher] => Houghton Mifflin\n            [ctry] => USA\n        )\n    [1] => Array\n        (\n            [ISBN] => 908606664\n            [title] => Slinky Malinki\n            [author] => Lynley Dodd\n            [publisher] => Mallinson Rendel\n            [ctry] => NZ\n        )\n)\n```\n### Debug\n```php\nuse Shuchkin\\SimpleXLSX;\n\nini_set('error_reporting', E_ALL );\nini_set('display_errors', 1 );\n\nif ( $xlsx = SimpleXLSX::parseFile('books.xlsx', true ) ) {\n    echo $xlsx->toHTML();\n} else {\n    echo SimpleXLSX::parseError();\n}\n```\n### Classic OOP style \n```php\nuse SimpleXLSX;\n\n$xlsx = new SimpleXLSX('books.xlsx'); // try...catch\nif ( $xlsx->success() ) {\n    foreach( $xlsx->rows() as $r ) {\n        // ...\n    }\n} else {\n    echo 'xlsx error: '.$xlsx->error();\n}\n```\nMore examples [here](https://github.com/shuchkin/simplexlsx/tree/master/examples)\n\n### Error Codes\nSimpleXLSX::ParseErrno(), $xlsx->errno()<br/>\n<table>\n<tr><th>code</th><th>message</th><th>comment</th></tr>\n<tr><td>1</td><td>File not found</td><td>Where file? UFO?</td></tr>\n<tr><td>2</td><td>Unknown archive format</td><td>ZIP?</td></tr>\n<tr><td>3</td><td>XML-entry parser error</td><td>bad XML</td></tr>\n<tr><td>4</td><td>XML-entry not found</td><td>bad ZIP archive</td></tr>\n<tr><td>5</td><td>Entry not found</td><td>File not found in ZIP archive</td></tr>\n<tr><td>6</td><td>Worksheet not found</td><td>Not exists</td></tr>\n</table>"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.64453125,
          "content": "{\n  \"name\": \"shuchkin/simplexlsx\",\n  \"description\": \"Parse and retrieve data from Excel XLSx files. MS Excel 2007 workbooks PHP reader.\",\n  \"keywords\": [\"php\", \"excel\", \"xlsx\", \"parser\", \"reader\", \"backend\"],\n  \"homepage\": \"https://github.com/shuchkin/simplexlsx\",\n  \"license\": \"MIT\",\n  \"authors\": [\n    {\n      \"name\": \"Sergey Shuchkin (SMSPILOT)\",\n      \"email\": \"sergey.shuchkin@gmail.com\",\n      \"homepage\": \"https://github.com/shuchkin\"\n    }\n  ],\n  \"autoload\": {\n    \"classmap\": [\n      \"src/SimpleXLSX.php\"\n    ]\n  },\n  \"require\": {\n    \"php\": \">=5.5\",\n    \"ext-simplexml\": \"*\",\n    \"ext-zlib\": \"*\",\n    \"ext-libxml\": \"*\",\n    \"ext-mbstring\": \"*\"\n  }\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "license.md",
          "type": "blob",
          "size": 1.0859375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2012-2022 Sergey Shuchkin sergey.shuchkin@gmail.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}