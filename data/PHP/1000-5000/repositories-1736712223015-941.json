{
  "metadata": {
    "timestamp": 1736712223015,
    "page": 941,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bernardphp/bernard",
      "stars": 1212,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.16796875,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 4\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.nix]\nindent_size = 2\n"
        },
        {
          "name": ".envrc",
          "type": "blob",
          "size": 0.2734375,
          "content": "if ! has nix_direnv_version || ! nix_direnv_version 2.1.0; then\n  source_url \"https://raw.githubusercontent.com/nix-community/nix-direnv/2.1.0/direnvrc\" \"sha256-FAT2R9yYvVg516v3LiogjIc8YfsbWbMM/itqWsm5xTA=\"\nfi\nuse flake\n\nexport PATH=\"$PWD/$(composer config vendor-dir)/bin:$PATH\"\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4375,
          "content": ".editorconfig     export-ignore\n.gitattributes    export-ignore\n.gitignore        export-ignore\n/.flintci.yml     export-ignore\n/.github/         export-ignore\n/.php_cs.dist     export-ignore\n/.scrutinizer.yml export-ignore\n/.travis.yml      export-ignore\n/doc/             export-ignore\n/phpspec.ci.yml   export-ignore\n/phpspec.yml.dist export-ignore\n/phpunit.xml.dist export-ignore\n/spec/            export-ignore\n/tests/           export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1337890625,
          "content": "/.direnv/\n.php-cs-fixer.php\n.php-cs-fixer.cache\n.phpunit.result.cache\n/_build/\n/build/\n/composer.lock\n/phpspec.yml\n/phpunit.xml\n/vendor/\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 0.4990234375,
          "content": "<?php\n\n$config = (new PhpCsFixer\\Config())\n    ->setRiskyAllowed(true)\n    ->setRules([\n        '@PSR2' => true,\n        '@PHP80Migration' => true,\n        '@PHP80Migration:risky' => true,\n        '@PHPUnit84Migration:risky' => true,\n        '@Symfony' => true,\n        '@Symfony:risky' => true,\n        'yoda_style' => false,\n    ])\n    ->setFinder(\n        PhpCsFixer\\Finder::create()\n            ->in(__DIR__ . '/src')\n            ->in(__DIR__ . '/tests')\n            ->name('*.php')\n    );\n\nreturn $config;\n"
        },
        {
          "name": ".php_cs.dist",
          "type": "blob",
          "size": 0.275390625,
          "content": "<?php\n\n$finder = PhpCsFixer\\Finder::create()\n    ->exclude('spec')\n    ->in(__DIR__)\n;\n\nreturn PhpCsFixer\\Config::create()\n    ->setRules([\n        '@Symfony' => true,\n        'array_syntax' => ['syntax' => 'short'],\n        'yoda_style' => false,\n    ])\n    ->setFinder($finder)\n;\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.4091796875,
          "content": "Changelog\n=========\n\n0.13.0 / xxxx-xx-xx\n-------------------\n\n * Replace Middleware with Events. There is now `bernard.invoke`, `bernard.acknowledge`, `bernard.reject`, and `bernard.produce`\n events. This makes it easier to do custom integrations that often does something on the Producer and Consumer.\n\n0.11.0 / 2013-10-07\n-------------------\n\n* Rename `NaiveSerializer` to `SimpleSerializer`.\n\n0.10.0 / 2013-09-23\n-------------------\n\n * Remove `RetryMiddleware` and add `FailuresMiddleware` that just sends failed messages to failed queue.\n * Add `LoggerFactory` for `LoggerMiddleware`.\n * Rename internal `Bernard\\Message\\Envelope` to `Bernard\\Envelope`.\n * Service methods does not prepend `on` anymore. `onSendNewsletter` would be `sendNewsletter`.\n * Remove `Invoker` Object. Instead this functionality have been moved into the Consumer which implements Middleware.\n * Remove Middleware from Queue. Instead the Producer implements Middleware.\n * Producer takes a Queue name as the second parameter.\n * Replace `ServiceResolver` with `Router` and migrate the old Pimple and Container ServiceResolver's\n\n0.9.2 / 2013-09-18\n------------------\n\n * Fix memory leak in Queue where SplObjectStorage would keep references to envelopes.\n\n0.9.0 / 2013-08-10\n------------------\n\n * Support any callable in ObjectResolver\n * Implement Middleware. Middleware is used by the Consumer and Producer when a Message in queued or consumed.\n * Removed Spork support until it can be reimplemented as a Middleware.\n * Add `LoggerMiddleware` and `ErrorLogMiddleware` for basic logging when producing and consuming messages.\n\n0.8.0 / 2013-08-01\n------------------\n\n * Service resolvers now resolve to a callable. This allows for closures to do work.\n * Consumer is now responsible for creating Invoker object.\n * Spork return a Proxy object that allows calling the right method on service object.\n * New schema for `DoctrineDriver`. Queues are now kept in a seperate table.\n * `ObjectResolver` now supports object instances and class names. Laravel can then register \n facades.\n * ServiceResolvers now takes an optional array of `array('MessageName' => $service)`.\n\n0.7.1 / 2013-07-12\n------------------\n\n * Fix bug in `DoctrineDriver` with prepared statements and limit placeholders.\n\n0.7.0 / 2013-07-12\n------------------\n\n * Add `ProduceCommand` by @ukautz.\n * Refactor examples in `example` directory to remove ugly code.\n * BC Break. Rename `Invocator` to `Invoker` as the former is not a word.\n * New `NaiveSerializer` with no dependencies.\n * Fixed error in `DoctrineDriver` wheen peeking.\n\n0.6.1 / 2013-07-03\n------------------\n\n * Increment sleep in drivers that does not natively support internal to minimize CPU usage.\n * Fix error in `$queueUrls` for SQS Driver where aliased queue urls would show up.\n * Include documentation for the new drivers and options. @ukautz\n\n0.6.0 / 2013-07-03\n------------------\n\n * Add driver for Amazon SQS @ukautz\n * Add driver for Iron MQ @ukautz\n * Add driver for Doctrine DBAL which brings support for major SQL backends.\n * Implement acknowledge logic for messages and drivers that uses it. @ukautz\n * Add prefetching for drivers that use slow endpoints and supports getting more than one message.\n * Refactor `Consumer` and cover it with tests.\n * Drop using mocks where appropiate and instead use `InMemoryQueue` and `InMemoryFactory`\n * Remove `example/in_memory.php`.\n * Bring consistency by using `Envelope` internally and `Message` externally (end user).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03515625,
          "content": "Copyright (c) 2013 Henrik Bjornskov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.6728515625,
          "content": "<p align=\"center\">\n  <a href=\"http://bernard.rtfd.org\">\n    <img src=\"https://bernard.readthedocs.io/_static/img/logo_small@2x.png\" alt=\"Bernard\" />\n  </a>\n</p>\n\n[![Latest Version](https://img.shields.io/github/release/bernardphp/bernard.svg?style=flat-square)](https://github.com/bernardphp/bernard/releases)\n[![Minimum PHP Version](https://img.shields.io/badge/php-%3E%3D%207.4-8892BF.svg?style=flat-square)](https://php.net/)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/bernardphp/bernard/CI?style=flat-square)](https://github.com/bernardphp/bernard/actions?query=workflow%3ACI)\n[![Total Downloads](https://img.shields.io/packagist/dt/bernard/bernard.svg?style=flat-square)](https://packagist.org/packages/bernard/bernard)\n\nBernard makes it super easy and enjoyable to do background processing in PHP.\nIt does this by utilizing queues and long running processes.\nIt supports normal queueing drivers but also implements simple ones with Redis and Doctrine.\n\nCurrently these are the supported backends, with more coming with each release:\n\n- Predis / PhpRedis\n- Amazon SQS\n- Iron MQ\n- Doctrine DBAL\n- Pheanstalk\n- PhpAmqp / RabbitMQ\n- Queue interop\n\n\n## Install\n\nVia Composer\n\n```bash\n$ composer require bernard/bernard\n```\n\n\n## Documentation\n\nPlease see the [official documentation](https://bernard.readthedocs.org).\n\n\n## Testing\n\nWe try to follow BDD and TDD, as such we use both [phpspec](http://www.phpspec.net) and [phpunit](https://phpunit.de) to test this library.\n\n```bash\n$ composer test\n```\n\nYou can run the functional tests by executing:\n\n```bash\n$ composer test-functional\n```\n\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE) for more information.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.890625,
          "content": "{\n    \"name\": \"bernard/bernard\",\n    \"description\": \"Message queue abstraction layer\",\n    \"license\": \"MIT\",\n    \"keywords\": [\n        \"message queue\",\n        \"message\",\n        \"queue\",\n        \"bernard\"\n    ],\n    \"homepage\": \"https://github.com/bernardphp/bernard\",\n    \"type\": \"library\",\n    \"require\": {\n        \"php\": \">=8.0\",\n        \"beberlei/assert\": \"^2.1 || ^3.0\",\n        \"bernard/normalt\": \"^1.0\",\n        \"symfony/event-dispatcher\": \"^3.0 || ^4.0\"\n    },\n    \"require-dev\": {\n        \"doctrine/dbal\": \"^2.5\",\n        \"doctrine/instantiator\": \"^1.0.5\",\n        \"friends-of-phpspec/phpspec-code-coverage\": \"^6.0\",\n        \"phpspec/phpspec\": \"^7.0\",\n        \"phpspec/prophecy-phpunit\": \"^2.0\",\n        \"phpunit/phpunit\": \"^9.5\",\n        \"psr/container\": \"^1.0\",\n        \"psr/log\": \"^1.0\",\n        \"symfony/console\": \"^3.0 || ^4.0\"\n    },\n    \"suggest\": {\n        \"doctrine/dbal\": \"Allow sending messages to simulated message queue in a database via doctrine dbal\",\n        \"mongodb/mongodb\": \"Allow sending messages to a MongoDB server via PHP Driver\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Bernard\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Bernard\\\\Tests\\\\\": \"tests/\",\n            \"spec\\\\Bernard\\\\\": \"spec/\"\n        }\n    },\n    \"config\": {\n        \"sort-packages\": true\n    },\n    \"scripts\": {\n        \"clean\": \"rm -rf build/ vendor/\",\n        \"test\": [\n            \"vendor/bin/phpspec run\",\n            \"vendor/bin/phpunit -v\"\n        ],\n        \"test-coverage\": [\n            \"vendor/bin/phpspec run -c phpspec.ci.yml\",\n            \"vendor/bin/phpunit -v --coverage-text --coverage-clover=build/unit_coverage.xml\"\n        ],\n        \"test-functional\": \"php vendor/bin/phpunit -v --group functional\"\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"2.0.x-dev\"\n        }\n    },\n    \"prefer-stable\": true,\n    \"minimum-stability\": \"dev\"\n}\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 0.9755859375,
          "content": "{\n  \"nodes\": {\n    \"flake-utils\": {\n      \"locked\": {\n        \"lastModified\": 1649676176,\n        \"narHash\": \"sha256-OWKJratjt2RW151VUlJPRALb7OU2S5s+f0vLj4o1bHM=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"a4b154ebbdc88c8498a5c7b01589addc9e9cb678\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1651558728,\n        \"narHash\": \"sha256-8HzyRnWlgZluUrVFNOfZAOlA1fghpOSezXvxhalGMUo=\",\n        \"owner\": \"NixOS\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"cbe587c735b734405f56803e267820ee1559e6c1\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"id\": \"nixpkgs\",\n        \"ref\": \"nixos-unstable\",\n        \"type\": \"indirect\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": \"nixpkgs\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 0.701171875,
          "content": "{\n  description = \"Official Bernard drivers\";\n\n  inputs = {\n    nixpkgs.url = \"nixpkgs/nixos-unstable\";\n    flake-utils.url = \"github:numtide/flake-utils\";\n  };\n\n  outputs = { self, nixpkgs, flake-utils, ... }:\n    flake-utils.lib.eachDefaultSystem (\n      system:\n        let\n          pkgs = import nixpkgs { inherit system; };\n        in\n          {\n            devShells.default = pkgs.mkShell {\n              buildInputs = with pkgs;\n                [\n                  git\n                  php\n                  php.packages.composer\n                  php.packages.phpstan\n                  php.packages.php-cs-fixer\n                  # php.packages.psalm\n                ];\n            };\n          }\n    );\n}\n"
        },
        {
          "name": "phpspec.ci.yml",
          "type": "blob",
          "size": 0.2646484375,
          "content": "suites:\n    main:\n        namespace: Bernard\n        psr4_prefix: Bernard\nformatter.name: pretty\nextensions:\n    FriendsOfPhpSpec\\PhpSpec\\CodeCoverage\\CodeCoverageExtension:\n        format:\n            - clover\n        output:\n            clover: build/spec_coverage.xml\n"
        },
        {
          "name": "phpspec.yml.dist",
          "type": "blob",
          "size": 0.0947265625,
          "content": "suites:\n    main:\n        namespace: Bernard\n        psr4_prefix: Bernard\nformatter.name: pretty\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.59765625,
          "content": "<?xml version=\"1.0\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\" backupGlobals=\"false\" colors=\"true\" bootstrap=\"vendor/autoload.php\">\n    <coverage>\n        <include>\n            <directory suffix=\".php\">./src</directory>\n        </include>\n    </coverage>\n\n    <testsuites>\n        <testsuite name=\"Bernard Test Suite\">\n            <directory>./tests/</directory>\n        </testsuite>\n    </testsuites>\n\n    <groups>\n        <exclude>\n            <group>functional</group>\n        </exclude>\n    </groups>\n</phpunit>\n"
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}