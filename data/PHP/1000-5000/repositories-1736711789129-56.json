{
  "metadata": {
    "timestamp": 1736711789129,
    "page": 56,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "php-debugbar/php-debugbar",
      "stars": 4212,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bowerrc",
          "type": "blob",
          "size": 0.05078125,
          "content": "{\n  \"directory\" : \"src/DebugBar/Resources/vendor\"\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3583984375,
          "content": "* text=auto\n\n/.github export-ignore\n/docs export-ignore\n/demo export-ignore\n/tests export-ignore\n/build export-ignore\n/.bowerrc export-ignore\n/.gitattributes export-ignore\n/.gitignore export-ignore\n/.travis.yml export-ignore\n/bower.json export-ignore\n/phpunit.xml.dist export-ignore\n/CHANGELOG.md export-ignore\n/CONTRIBUTING.md export-ignore\n/README.md export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1640625,
          "content": "composer.lock\n/vendor\n/demo/bridge/*/vendor\n/demo/bridge/doctrine/db.sqlite\n/src/DebugBar/Resources/vendor\n.phpunit.result.cache\n/drivers\n/chromedriver\n.phpunit.cache/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.1064453125,
          "content": "# Changelog\n2023-09-08\n\n - Add SymfonyMailCollector (#554)\n\n2021-12-21\n\n - Add support for `symfony/var-dumper^6` package\n\n2019-05 (1.10.3)\n\n- New implementation for `dump()` in SwiftLogCollector (#265)\n\n2014-12 (1.10.2):\n\n - Use Symfony VarDumper instead of kintLite as DataFormatter (#179)\n - Better resize handling (#185)\n \n2014-11 (1.10.1):\n\n - Add disableVendor() option to JavascriptRenderer to remove a specific vendor (#182)\n - Fix macros in Twig Collector (#167, #177)\n - Update Font Awesome to 4.2.0 \n\n2014-10 (1.10.0):\n\n - Add bindToXHR() as alternative to jQuery ajax handling.\n - Extend TemplateWidget to show more information + parameters\n - Extend TimeDataCollector to show parameters + collector source\n \n2014-08:\n\n - Replace image files with inline data in css\n - Tweak OpenHandler display\n  \n2014-06-10:\n\n - Add LocalizationCollector\n  \n2014-03-29:\n\n - Add hasMeasure() method to TimeDataCollector\n \n2014-03-25:\n\n - Duplicate SQL detection\n \n2014-03-23:\n\n - Add syntax highlighting\n \n2014-03-22:\n\n - added AssetProvider interface\n - added JavascriptRenderer::addAssets()\n - added Memcached storage\n\n2014-01-04:\n\n - added DataFormatter\n\n2013-12-29:\n\n - display an error where the header is too large when sending data with an ajax request\n - close button instead of minimize\n\n2013-12-27:\n\n - responsiveness of the debugbar in the browser\n\n2013-12-19:\n\n - use Bower to manage assets\n\n2013-10-24:\n\n - added option to render sql with params in PDO collector\n\n2013-10-06:\n\n - prefixed all css classes\n - new PhpDebugBar.utils.csscls() function\n - changed datetime to time in datasets selector\n - close and open buttons now uses images instead of font-awesome\n\n2013-09-23:\n\n - send the request id in headers and use the open handler to retreive the dataset\n - !! modified sendDataAsHeaders() to add $useOpenHandler as the first argument\n - OpenHandler::handle() can now take any objects implementing ArrayAccess as request data\n\n2013-09-19:\n\n - added HttpDriver\n - added jQuery.noConflict() managment\n\n2013-09-15 (1.6):\n\n - added sending data through HTTP headers\n - added stacked data\n - bug fixes\n\n1.5:\n\n - added storage\n - added open handler\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.8994140625,
          "content": "# Contributing to PHP DebugBar\n\nFirst of all, thank you for contributing!\n\nAll contributions are welcome as long as they come through pull requests.\nEach PR will be reviewed and eventually accepted. Some changes may be required before integration.\n\nA contribution must follow the following guidelines:\n\n - PHP code convention must follow PSR-1\n - Javascript code convention described below\n - Unit tests must be added/updated and pass\n - Docs must be updated for new features\n - Changelog must be updated (bug fix are not required to be added to the changelog)\n - ensure that examples in demo/ folder are still working\n\nJavascript code convention:\n\n - based on: http://javascript.crockford.com/code.html\n - blank lines between attributes of a class declaration\n - jsdoc comments\n - all code in a file must be wrapped into an anonymous function\n - variables representing jquery objects must be prefixed with a dollar sign\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (C) 2013 Maxime Bouroumeau-Fuseau\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.6748046875,
          "content": "# PHP Debug Bar\n\n[![Latest Stable Version](https://img.shields.io/packagist/v/maximebf/debugbar?label=Stable)](https://packagist.org/packages/maximebf/debugbar) [![Total Downloads](https://img.shields.io/packagist/dt/maximebf/debugbar?label=Downloads)](https://packagist.org/packages/maximebf/debugbar) [![License](https://img.shields.io/badge/Licence-MIT-4d9283)](https://packagist.org/packages/maximebf/debugbar) [![Tests](https://github.com/maximebf/php-debugbar/actions/workflows/run-tests.yml/badge.svg)](https://github.com/maximebf/php-debugbar/actions/workflows/run-tests.yml)\n\nDisplays a debug bar in the browser with information from php.\nNo more `var_dump()` in your code!\n\n> **Note: Debug Bar is for development use only. Never install this on websites that are publicly accessible.**\n\n![Screenshot](https://raw.github.com/maximebf/php-debugbar/master/docs/screenshot.png)\n\n**Features:**\n\n - Generic debug bar\n - Easy to integrate with any project\n - Clean, fast and easy to use interface\n - Handles AJAX request\n - Includes generic data collectors and collectors for well known libraries\n - The client side bar is 100% coded in javascript\n - Easily create your own collectors and their associated view in the bar\n - Save and re-open previous requests\n - [Very well documented](http://phpdebugbar.com/docs)\n\nIncludes collectors for:\n\n  - [PDO](http://php.net/manual/en/book.pdo.php)\n  - [CacheCache](http://maximebf.github.io/CacheCache/)\n  - [Doctrine](http://doctrine-project.org)\n  - [Monolog](https://github.com/Seldaek/monolog)\n  - [Propel](http://propelorm.org/)\n  - [Slim](http://slimframework.com)\n  - [Symfony Mailer](https://symfony.com/doc/current/mailer.html)\n  - [Swift Mailer](http://swiftmailer.org/)\n  - [Twig](http://twig.symfony.com/)\n\nCheckout the [demo](https://github.com/maximebf/php-debugbar/tree/master/demo) for\nexamples and [phpdebugbar.com](http://phpdebugbar.com) for a live example.\n\nIntegrations with other frameworks:\n\n  - [Laravel](https://github.com/barryvdh/laravel-debugbar)\n  - [Atomik](http://atomikframework.com/docs/error-log-debug.html#debug-bar)\n  - [XOOPS](http://xoops.org/modules/news/article.php?storyid=6538)\n  - [Zend Framework 2](https://github.com/snapshotpl/ZfSnapPhpDebugBar)\n  - [Phalcon](https://github.com/snowair/phalcon-debugbar)\n  - [SilverStripe](https://github.com/lekoala/silverstripe-debugbar)\n  - [Grav CMS](https://getgrav.org)\n  - [TYPO3](https://github.com/Konafets/typo3_debugbar)\n  - [Joomla](https://github.com/joomla/joomla-cms/blob/4.0-dev/plugins/system/debug/debug.php)\n  - [Drupal](https://www.drupal.org/project/debugbar)\n  - [October CMS](https://github.com/rainlab/debugbar-plugin)\n  - Framework-agnostic middleware and PSR-7 with [php-middleware/phpdebugbar](https://github.com/php-middleware/phpdebugbar)\n  - [Dotkernel Frontend Application](https://github.com/dotkernel/dot-debugbar)\n\n*(drop me a message or submit a PR to add your DebugBar related project here)*\n\n## Installation\n\nThe best way to install DebugBar is using [Composer](http://getcomposer.org)\nwith the following command:\n\n```bash\ncomposer require maximebf/debugbar --dev\n```\n\n## Quick start\n\nDebugBar is very easy to use and you can add it to any of your projects in no time.\nThe easiest way is using the `render()` functions\n\n```PHP\n<?php\n\n// Require the Composer autoloader, if not already loaded\nrequire 'vendor/autoload.php';\n\nuse DebugBar\\StandardDebugBar;\n\n$debugbar = new StandardDebugBar();\n$debugbarRenderer = $debugbar->getJavascriptRenderer();\n\n$debugbar[\"messages\"]->addMessage(\"hello world!\");\n?>\n<html>\n    <head>\n        <?php echo $debugbarRenderer->renderHead() ?>\n    </head>\n    <body>\n        ...\n        <?php echo $debugbarRenderer->render() ?>\n    </body>\n</html>\n```\n\nThe DebugBar uses DataCollectors to collect data from your PHP code. Some of them are\nautomated but others are manual. Use the `DebugBar` like an array where keys are the\ncollector names. In our previous example, we add a message to the `MessagesCollector`:\n\n```PHP\n$debugbar[\"messages\"]->addMessage(\"hello world!\");\n```\n\n`StandardDebugBar` activates the following collectors:\n\n - `MemoryCollector` (*memory*)\n - `MessagesCollector` (*messages*)\n - `PhpInfoCollector` (*php*)\n - `RequestDataCollector` (*request*)\n - `TimeDataCollector` (*time*)\n - `ExceptionsCollector` (*exceptions*)\n\nLearn more about DebugBar in the [docs](http://phpdebugbar.com/docs).\n\n\n## Demo\n\nTo run the demo, clone this repository and start the Built-In PHP webserver from the root:\n\n```\nphp -S localhost:8000\n```\n\nThen visit http://localhost:8000/demo/\n\n## Testing\n\nTo test, run `php vendor/bin/phpunit`. \nTo debug Browser tests, you can run `PANTHER_NO_HEADLESS=1 vendor/bin/phpunit --debug`. Run `vendor/bin/bdi detect drivers` to download the latest drivers.\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.109375,
          "content": "{\n  \"name\": \"maximebf/php-debugbar\",\n  \"dependencies\": {\n    \"jquery\": \"^3.7\",\n    \"font-awesome\": \"^4.7\"\n  }\n}\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.72265625,
          "content": "{\n    \"name\": \"maximebf/debugbar\",\n    \"description\": \"Debug bar in the browser for php application\",\n    \"keywords\": [\"debug\", \"debugbar\", \"dev\"],\n    \"homepage\": \"https://github.com/php-debugbar/php-debugbar\",\n    \"type\": \"library\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Maxime Bouroumeau-Fuseau\",\n            \"email\": \"maxime.bouroumeau@gmail.com\",\n            \"homepage\": \"http://maximebf.com\"\n        },\n        {\n            \"name\": \"Barry vd. Heuvel\",\n            \"email\": \"barryvdh@gmail.com\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^7.2|^8\",\n        \"psr/log\": \"^1|^2|^3\",\n        \"symfony/var-dumper\": \"^4|^5|^6|^7\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^8|^9\",\n        \"twig/twig\": \"^1.38|^2.7|^3.0\",\n        \"symfony/panther\": \"^1|^2.1\",\n        \"dbrekelmans/bdi\": \"^1\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"DebugBar\\\\\": \"src/DebugBar/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"DebugBar\\\\Tests\\\\\": \"tests/DebugBar/Tests\"\n        }\n    },\n    \"scripts\": {\n        \"demo\": [\n            \"Composer\\\\Config::disableProcessTimeout\",\n            \"@php -S localhost:8000\"\n        ],\n        \"unit-test\": \"@php vendor/bin/phpunit --testsuite=Unit\",\n        \"browser-test\": \"@php vendor/bin/phpunit --testsuite=Browser\",\n        \"browser-debug\": [\n            \"@putenv PANTHER_NO_HEADLESS=1\",\n            \"@php vendor/bin/phpunit --testsuite=Browser --debug\"\n        ]\n    },\n    \"suggest\": {\n        \"kriswallsmith/assetic\": \"The best way to manage assets\",\n        \"monolog/monolog\": \"Log using Monolog\",\n        \"predis/predis\": \"Redis storage\"\n    },\n     \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"1.24-dev\"\n        }\n    }\n}\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.904296875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" backupGlobals=\"false\" bootstrap=\"tests/bootstrap.php\" colors=\"true\" processIsolation=\"false\" stopOnFailure=\"false\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.5/phpunit.xsd\" cacheDirectory=\".phpunit.cache\" backupStaticProperties=\"false\">\n  <testsuites>\n    <testsuite name=\"Unit\">\n      <directory>./tests/DebugBar/Tests</directory>\n      <exclude>./tests/DebugBar/Tests/Browser</exclude>\n    </testsuite>\n    <testsuite name=\"Browser\">\n      <directory>./tests/DebugBar/Tests/Browser</directory>\n    </testsuite>\n  </testsuites>\n  <extensions>\n    <extension class=\"Symfony\\Component\\Panther\\ServerExtension\"/>\n  </extensions>\n  <php>\n    <server name=\"PANTHER_WEB_SERVER_DIR\" value=\"./\"/>\n  </php>\n  <source>\n    <include>\n      <directory>./src/DebugBar/</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}