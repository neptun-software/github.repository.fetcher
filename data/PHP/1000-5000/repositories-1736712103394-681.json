{
  "metadata": {
    "timestamp": 1736712103394,
    "page": 681,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gabrielrcouto/php-terminal-gameboy-emulator",
      "stars": 1569,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1533203125,
          "content": "# root\ncache.properties\n\n# bin\nbin/*\n!bin/php-gameboy\n!bin/php-gameboy.phar\n\n# material\nmaterial/\n\n# vendor\nvendor/\n\n# roms\nroms/\n\n# global\n*.gb\n*.gbc\n*.rom\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2626953125,
          "content": "language: php\n\nphp:\n  - 5.6\n  - 7.0\n  - hhvm\n\nbefore_install:\n  - travis_retry composer self-update\n\ninstall:\n  - travis_retry composer install --no-interaction --prefer-source --dev\n\nscript:\n  - ant check\n\nmatrix:\n  allow_failures:\n    - php: hhvm\n  fast_finish: true\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.8212890625,
          "content": "<p align=\"center\"><img src=\"https://cloud.githubusercontent.com/assets/2197005/13260438/2f6e96ac-da3a-11e5-86cf-bbfa15083f74.gif\" width=\"560\" alt=\"PHP Terminal GameBoy Emulator\" /></p>\n\n[![Build Status](https://travis-ci.org/gabrielrcouto/php-terminal-gameboy-emulator.svg?branch=master)](https://travis-ci.org/gabrielrcouto/php-terminal-gameboy-emulator)\n[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat)](http://gabrielrcouto.mit-license.org/)\n[![Packagist](https://img.shields.io/badge/packagist-install-brightgreen.svg)](https://packagist.org/packages/gabrielrcouto/php-terminal-gameboy-emulator)\n\nWant to play Dr Mario or Pokémon on your server terminal? That's for you!\n\n## Table of Contents\n\n+ [Why](#why)\n+ [Requirements](#requirements)\n+ [Running](#running)\n+ [Controls](#controls)\n+ [Tests](#tests)\n+ [TO-DO](#to-do)\n+ [Credits](#credits)\n+ [Legal](#legal)\n\n## Why\n\nSome people will ask me: _\"Why you did that?\"_\n\nWell, a friend asked me _\"What PHP can do?\"_. I thought about that awhile and\nthe idea came up. With PHP7's performance improvement now it's possible to\nemulate some systems :smile: and, come on, that's funny! :dancers:\n\nIt's based on the [GameBoy JS Emulator](https://github.com/taisel/GameBoy-Online).\n\n## Requirements\n\nThe following PHP versions are supported:\n\n+ PHP 5.6\n+ PHP 7\n+ HHVM\n\nYou will need a good terminal! I've tested only on MacOSX and Linux. I'm sorry\nabout that Windows guys :disappointed:\n\n## Installation\n\nUsing composer:\n\n```bash\n$ composer g require gabrielrcouto/php-terminal-gameboy-emulator:dev-master\n```\n\nUsing PHAR:\n\n```bash\n$ wget https://raw.githubusercontent.com/gabrielrcouto/php-terminal-gameboy-emulator/master/bin/php-gameboy.phar\n$ chmod +x php-gameboy.phar\n$ mv php-gameboy.phar /usr/local/bin/php-gameboy\n```\n\n## Running\n\nYour roms are loaded from the directory you are running the `php-gameboy` command.\n\n```bash\n$ php-gameboy drmario.gb\n$ php-gameboy pokemon.gbc\n```\n\nIf you like to run this emulator locally, simple clone the repository:\n\n```bash\n$ git clone https://github.com/gabrielrcouto/php-terminal-gameboy-emulator.git\n$ cd php-terminal-gameboy-emulator\n$ composer install -o\n```\n\nFor running roms, pass the full path to your rom or put then in the `php-terminal-gameboy-emulator` folder:\n\n```bash\n$ bin/php-gameboy pokemon.gbc\n$ bin/php-gameboy /full/path/to/your/rom/drmario.gb\n```\n\n## Controls\n\n```bash\n_n_________________\n|_|_______________|_|\n|  ,-------------.  |\n| |  .---------.  | |\n| |  |         |  | |\n| |  |         |  | |\n| |  |         |  | |\n| |  |         |  | |\n| |  `---------'  | |\n| `---------------' |\n|   _               |\n| _|W|_         ,-. |\n||A   D|   ,-. \"._,\"|\n|  |S|    \"._,\" Dot |\n|    _  _ Comma     |\n|   // //           |\n|  // //    \\\\\\\\\\\\  |\n|  N  M      \\\\\\\\\\\\ ,\n|________...______,\"\n```\n\n+ Left = A\n+ Up = W\n+ Down = S\n+ Right = D\n+ A = Comma (,)\n+ B = Dot (.)\n+ Select = N\n+ Start = M\n\n## Tests\n\nYou can use the following command to run the most common checks, such as `php -l`, `phpcs`:\n\n    $ ant check\n\n\n## TO-DO\n\nConverting from the JS paradigm was a lot of work, and I still need to adapt somethings like:\n\n- [x] Code standard - PSRs, please!\n- [x] Array of functions - Maybe in PHP it's not the best approach\n- [x] Pixel auxiliary array - Very CPU intensive to convert RGBA every time\n- [ ] Classes - Core is too big!\n- [ ] Profiling and otimizing - XHProf to find the most intensive functions\n- [ ] Save/Restore - I need to save my Pokémon, please!\n\n## Credits\n\n[@gabrielrcouto](http://www.twitter.com/gabrielrcouto)\n\n## Legal\n\nThe purpose of this project was to study all the capabilities of PHP.\n\nIt does not have any commercial or profitable intentions.\n\nThe user is responsible to use this code and its content in the terms of the law.\n\nThe author is completely against piracy and respects all the copyrights, trademarks and patents of Nintendo.\n\n\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "boot.php",
          "type": "blob",
          "size": 1.66015625,
          "content": "<?php\n\n\nforeach (['../../autoload.php', '../vendor/autoload.php', 'vendor/autoload.php'] as $autoload) {\n    $autoload = __DIR__.'/'.$autoload;\n    if (file_exists($autoload)) {\n        require $autoload;\n        break;\n    }\n}\nunset($autoload);\n\nuse GameBoy\\Canvas\\TerminalCanvas;\nuse GameBoy\\Core;\nuse GameBoy\\Keyboard;\n\nif (PHP_VERSION_ID >= 70000) {\n    set_exception_handler(function (\\Throwable $exception) {\n        fwrite(STDERR, $exception->getMessage() . PHP_EOL);\n        exit(254);\n    });\n} else {\n    set_exception_handler(function (Exception $exception) {\n        fwrite(STDERR, $exception->getMessage() . PHP_EOL);\n        exit(254);\n    });\n}\n\nif (count($argv) < 2) {\n    throw new \\RuntimeException('You need to pass the ROM file name (Ex: drmario.rom)');\n}\n\n$filename = $argv[1];\n\nif (!file_exists($filename)) {\n    throw new \\RuntimeException(sprintf('\"%s\" does not exist', $filename));\n}\n\nif (extension_loaded('xdebug')) {\n    fwrite(STDERR, 'Running php-gameboy with Xdebug enabled reduces its speed considerably.'.PHP_EOL);\n    fwrite(STDERR, 'You should consider to disable it before execute php-gameboy.'.PHP_EOL);\n    sleep(1);\n}\n\n$rom = file_get_contents($filename);\n\n$canvas = new TerminalCanvas();\n$core = new Core($rom, $canvas);\n$keyboard = new Keyboard($core);\n\n$core->start();\n\nif (($core->stopEmulator & 2) == 0) {\n    throw new \\RuntimeException('The GameBoy core is already running.');\n}\n\nif ($core->stopEmulator & 2 != 2) {\n    throw new \\RuntimeException('GameBoy core cannot run while it has not been initialized.');\n}\n\n$core->stopEmulator &= 1;\n$core->lastIteration = (int) (microtime(true) * 1000);\n\nwhile (true) {\n    $core->run();\n    $keyboard->check();\n}\n"
        },
        {
          "name": "build.xml",
          "type": "blob",
          "size": 0.9580078125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project name=\"php-terminal-gameboy-emulator\" default=\"build\">\n    <property name=\"vendordir\" value=\"${basedir}/bin\" />\n    <target name=\"check\" depends=\"lint,phpcs\"/>\n\n    <target name=\"lint\" description=\"Perform syntax check of sourcecode files\">\n        <apply executable=\"php\" failonerror=\"true\">\n            <arg value=\"-l\" />\n\n            <fileset dir=\"${basedir}/src\">\n                <include name=\"**/*.php\" />\n                <modified />\n            </fileset>\n        </apply>\n    </target>\n\n    <target name=\"phpcs\" description=\"Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.\">\n        <exec executable=\"${vendordir}/phpcs\" failonerror=\"true\">\n            <arg value=\"--extensions=php\" />\n            <arg value=\"--standard=${basedir}/phpcs.xml\" />\n            <arg path=\"${basedir}/src\" />\n        </exec>\n    </target>\n</project>"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.716796875,
          "content": "{\n    \"name\": \"gabrielrcouto/php-terminal-gameboy-emulator\",\n    \"description\": \"Terminal Gameboy Emular\",\n    \"keywords\": [\"terminal\",\"console\",\"gameboy\",\"emulator\"],\n    \"homepage\": \"http://github.com/gabrielrcouto/php-terminal-gameboy-emulator\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Gabriel Rodrigues Couto\",\n            \"email\": \"gabrielrcouto@gmail.com\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=5.6.0\"\n    },\n    \"bin\": [\"bin/php-gameboy\"],\n    \"require-dev\": {\n        \"squizlabs/php_codesniffer\": \"2.0.*@dev\",\n        \"symfony/finder\" : \"*\"\n    },\n    \"config\": {\n        \"bin-dir\": \"bin\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"GameBoy\\\\\": \"src/\"\n        }\n    }\n}\n"
        },
        {
          "name": "composer.lock",
          "type": "blob",
          "size": 5.1845703125,
          "content": "{\n    \"_readme\": [\n        \"This file locks the dependencies of your project to a known state\",\n        \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file\",\n        \"This file is @generated automatically\"\n    ],\n    \"hash\": \"1d43205f748238a612e736313fb85ead\",\n    \"content-hash\": \"650da37ee06349860cc3ce6988504476\",\n    \"packages\": [],\n    \"packages-dev\": [\n        {\n            \"name\": \"squizlabs/php_codesniffer\",\n            \"version\": \"2.0.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/squizlabs/PHP_CodeSniffer.git\",\n                \"reference\": \"5b63fd3fe960e2020770c845e04254e5ca2b722a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/squizlabs/PHP_CodeSniffer/zipball/5b63fd3fe960e2020770c845e04254e5ca2b722a\",\n                \"reference\": \"5b63fd3fe960e2020770c845e04254e5ca2b722a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-tokenizer\": \"*\",\n                \"php\": \">=5.1.2\"\n            },\n            \"bin\": [\n                \"scripts/phpcs\",\n                \"scripts/phpcbf\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-phpcs-fixer\": \"2.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"CodeSniffer.php\",\n                    \"CodeSniffer/CLI.php\",\n                    \"CodeSniffer/Exception.php\",\n                    \"CodeSniffer/File.php\",\n                    \"CodeSniffer/Fixer.php\",\n                    \"CodeSniffer/Report.php\",\n                    \"CodeSniffer/Reporting.php\",\n                    \"CodeSniffer/Sniff.php\",\n                    \"CodeSniffer/Tokens.php\",\n                    \"CodeSniffer/Reports/\",\n                    \"CodeSniffer/Tokenizers/\",\n                    \"CodeSniffer/DocGenerators/\",\n                    \"CodeSniffer/Standards/AbstractPatternSniff.php\",\n                    \"CodeSniffer/Standards/AbstractScopeSniff.php\",\n                    \"CodeSniffer/Standards/AbstractVariableSniff.php\",\n                    \"CodeSniffer/Standards/IncorrectPatternException.php\",\n                    \"CodeSniffer/Standards/Generic/Sniffs/\",\n                    \"CodeSniffer/Standards/MySource/Sniffs/\",\n                    \"CodeSniffer/Standards/PEAR/Sniffs/\",\n                    \"CodeSniffer/Standards/PSR1/Sniffs/\",\n                    \"CodeSniffer/Standards/PSR2/Sniffs/\",\n                    \"CodeSniffer/Standards/Squiz/Sniffs/\",\n                    \"CodeSniffer/Standards/Zend/Sniffs/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Greg Sherwood\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"PHP_CodeSniffer tokenises PHP, JavaScript and CSS files and detects violations of a defined set of coding standards.\",\n            \"homepage\": \"http://www.squizlabs.com/php-codesniffer\",\n            \"keywords\": [\n                \"phpcs\",\n                \"standards\"\n            ],\n            \"time\": \"2014-12-05 00:14:12\"\n        },\n        {\n            \"name\": \"symfony/finder\",\n            \"version\": \"v3.1.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/symfony/finder.git\",\n                \"reference\": \"8201978de88a9fa0923e18601bb17f1df9c721e7\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/symfony/finder/zipball/8201978de88a9fa0923e18601bb17f1df9c721e7\",\n                \"reference\": \"8201978de88a9fa0923e18601bb17f1df9c721e7\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=5.5.9\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.1-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Symfony\\\\Component\\\\Finder\\\\\": \"\"\n                },\n                \"exclude-from-classmap\": [\n                    \"/Tests/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Fabien Potencier\",\n                    \"email\": \"fabien@symfony.com\"\n                },\n                {\n                    \"name\": \"Symfony Community\",\n                    \"homepage\": \"https://symfony.com/contributors\"\n                }\n            ],\n            \"description\": \"Symfony Finder Component\",\n            \"homepage\": \"https://symfony.com\",\n            \"time\": \"2016-06-29 05:41:56\"\n        }\n    ],\n    \"aliases\": [],\n    \"minimum-stability\": \"stable\",\n    \"stability-flags\": {\n        \"squizlabs/php_codesniffer\": 20\n    },\n    \"prefer-stable\": false,\n    \"prefer-lowest\": false,\n    \"platform\": {\n        \"php\": \">=5.6.0\"\n    },\n    \"platform-dev\": []\n}\n"
        },
        {
          "name": "docker-php-7",
          "type": "blob",
          "size": 0.064453125,
          "content": "#!/bin/bash\ndocker run -it -v $PWD:/app -w /app php:cli /bin/bash\n"
        },
        {
          "name": "phpcs.xml",
          "type": "blob",
          "size": 0.17578125,
          "content": "<?xml version=\"1.0\"?>\n<ruleset name=\"RSR\">\n    <description>Resolution</description>\n    <rule ref=\"PSR2\">\n        <exclude name=\"Generic.Files.LineLength\"/>\n    </rule>\n</ruleset>"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}