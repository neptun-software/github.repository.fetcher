{
  "metadata": {
    "timestamp": 1736711804511,
    "page": 85,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cviebrock/eloquent-sluggable",
      "stars": 3924,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.07421875,
          "content": "/.php-cs-fixer.cache\n/.phpunit.cache\n/.idea/\n/build/\n/vendor/\ncomposer.lock\n"
        },
        {
          "name": ".php-cs-fixer.php",
          "type": "blob",
          "size": 2.0380859375,
          "content": "<?php\n\nuse PhpCsFixer\\Config;\nuse PhpCsFixer\\Finder;\nuse PhpCsFixer\\Runner\\Parallel\\ParallelConfigFactory;\n\n$finder = (new Finder())\n    ->in(__DIR__);\n\nreturn (new Config())\n    ->setParallelConfig(ParallelConfigFactory::detect())\n    ->setRules([\n        '@PhpCsFixer'      => true,\n        '@PHP84Migration'  => true,\n        'indentation_type' => true,\n\n        // Overrides for (opinionated) @PhpCsFixer and @Symfony rules:\n\n        // Align \"=>\" in multi-line array definitions, unless a blank line exists between elements\n        'binary_operator_spaces' => ['operators' => ['=>' => 'align_single_space_minimal']],\n\n        // Subset of statements that should be proceeded with blank line\n        'blank_line_before_statement' => ['statements' => ['case', 'continue', 'default', 'return', 'throw', 'try', 'yield', 'yield_from']],\n\n        // Enforce space around concatenation operator\n        'concat_space' => ['spacing' => 'one'],\n\n        // Use {} for empty loop bodies\n        'empty_loop_body' => ['style' => 'braces'],\n\n        // Don't change any increment/decrement styles\n        'increment_style' => false,\n\n        // Forbid multi-line whitespace before the closing semicolon\n        'multiline_whitespace_before_semicolons' => ['strategy' => 'no_multi_line'],\n\n        // Clean up PHPDocs, but leave @inheritDoc entries alone\n        'no_superfluous_phpdoc_tags' => ['allow_mixed' => true, 'remove_inheritdoc' => false],\n\n        // Ensure that traits are listed first in classes\n        // (it would be nice to enforce more, but we'll start simple)\n        'ordered_class_elements' => ['order' => ['use_trait']],\n\n        // Ensure that param and return types are sorted consistently, with null at end\n        'phpdoc_types_order' => ['sort_algorithm' => 'alpha', 'null_adjustment' => 'always_last'],\n\n        // Don't add @coversNothing annotations to tests\n        'php_unit_test_class_requires_covers' => false,\n\n        // Yoda style is too weird\n        'yoda_style' => false,\n    ])\n    ->setIndent('    ')\n    ->setLineEnding(\"\\n\")\n    ->setFinder($finder);\n"
        },
        {
          "name": ".semver",
          "type": "blob",
          "size": 0.046875,
          "content": "---\n:major: 11\n:minor: 0\n:patch: 1\n:special: ''\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 11.857421875,
          "content": "# Change Log\n\n## 11.0.1 - 28-Nov-2024\n\n- Support PHP 8.4 (#616, thanks @SupianIDz)\n- Notice that Lumen will be deprecated in the next major release\n\n\n## 11.0.0 - 12-Mar-2024\n\n- Added Laravel 11 support (#608, thanks @fulopattila122)\n- Changed the minimum PHP version to 8.2 to line up with Laravel 11\n- fix for larastan issue (#596, thanks @WalrusSoup)\n\n\n## 10.0.0 - 16-Feb-2023\n\n- Laravel 10.0 support\n- switch to using Pest instead of PHPUnit for tests\n\n\n## 9.0.0 - 24-Jan-2022\n\n- Laravel 9 support (#577, #578, thanks @carbonvader and @tabcitu)\n\n\n## 8.0.8 - 11-Jun-2021\n\n- fix event tests and `registerModelEvent()` hook (#556, #561, thanks @standaniels)\n\n\n## 8.0.7 - 19-May-2021\n\n- fix issue with `SluggableObserver::SAVED` not always saving \n  the model (#558, #560, thanks @llewellyn-kevin)\n\n\n## 8.0.5 - 28-Feb-2021\n\n- started unique suffixes with \"-2\" instead of \"-1\" (#549, thanks @Tamim26061)\n  - this can be adjusted via the `firstUniqueSuffix` config setting\n\n \n## 8.0.4 - 20-Jan-2021\n\n- bug fix for #543#issuecomment-763391948 (thanks @dluague)\n\n\n## 8.0.3 - 19-Jan-2021\n\n- add ability to slug models on Eloquent's `saved` event, rather than\n  `saving`\n  - this adds a few more SQL queries per save, but allows for the use of\n    the primary key field in the `source` configuration (see #539 and #448)\n  - default configuration remains the same, but might change in a future release\n- added base `customizeSlugEngine` and `scopeWithUniqueSlugConstraints` methods\n  to the trait, to enforce type hinting and return values\n  - NOTE: if you were using these methods in your models, you may need to ensure\n    the method signatures match now\n  - see #544 for more information, including what to do if you had custom\n    methods in another trait\n- add `slugEngineOptions` configuration option (see #454, thanks @Adioz01)\n- move automated testing from travis-ci to Github actions (#534, thanks @cbl)\n- clean up some third-party tools and badges\n- clean up docblocks, return hints, and PHPUnit method calls\n\n\n## 8.0.2 - 29-Nov-2020\n\n- support PHP 8.0 (#533, thanks @cbl)\n\n\n## 8.0.1 - 28-Sep-2020\n\n- fix when manually setting a slug to a \"falsy\" value (#527, thanks @huiyang)\n\n\n## 8.0.0 - 10-Sep-2020\n\n- Laravel 8 support\n\n\n## 7.0.1 - 06-Apr-2020\n\n- fix to help support translatable slugs (using either spatie or Astrotomic package) (#506, thanks @GeoSot) \n\n\n## 7.0.0 - 04-Mar-2020\n\n- Laravel 7.0 support\n\n\n## 6.0.3 - 09-Feb-2020\n\n- bump [cocur/slugify](https://github.com/cocur/slugify) to `^4.0`\n\n\n## 6.0.2 - 09-Oct-2019\n\n- fix for PHP 7.4 beta (#486, thanks @KamaZzw)\n\n\n## 6.0.1 - 13-Sep-2019\n\n- fix for semantic versioning\n\n\n## 6.0.0 - 03-Sep-2019\n\n- Laravel 6.0 support (note the package version will now follow the Laravel version)\n\n\n## 4.8.0 - 28-Feb-2019\n\n- Laravel 5.8 support (#460, big thanks @tabuna)\n\n\n## 4.7.0 - 24-Feb-2019\n\n- Fix slug getting set to `null` if model is updated with no source column loaded (#450, thanks @mylgeorge)\n\n\n## 4.6.0 - 04-Sep-2018\n\n- Laravel 5.7 support\n\n\n## 4.5.1 - 21-May-2018\n\n- Bump versions of package dependencies\n\n\n## 4.5.0 - 10-Feb-2018\n\n- Laravel 5.6 support\n\n\n## 4.4.1 - 04-Jan-2018\n\n- Better exception message when calling `SlugService::createSlug` with an invalid attribute (#402, thanks @lptn)\n- Prettier unit test output\n\n\n## 4.4.0 - 12-Dec-2017\n\n- Make sure truncated slugs (due to maxLength) don't end in a separator (#398)\n- Add `maxLengthKeepWords` configuration option (#398)\n\n\n## 4.3.0 - 31-Aug-2017\n\n- Laravel 5.5 support, including auto-registration\n- Bumped `cocur/slugify` to `^3.0`\n\n\n## 4.2.5 - 31-Aug-2017\n\n- Fixing composer requirements to support Laravel 5.4 only\n\n\n## 4.2.4 - 04-Jul-2017\n\n- Documentation change (#374, thanks @fico7489)\n\n\n## 4.2.3 - 18-Apr-2017\n\n- Switch to allow extending the class (#356, thanks @haddowg)\n- Fix when adding suffixes to reserved slugs (#356, thanks @haddowg)\n\n\n## 4.2.2 - 23-Mar-2017\n\n- Better handling of numeric and boolean slug sources (#351, thanks @arturock)\n\n\n## 4.2.1 - 01-Feb-2017\n\n- Support Laravel 5.4 (#339, thanks @maddhatter)\n\n\n## 4.1.2 - 09-Nov-2016\n\n- Fix in `getExistingSlugs` when using global scopes (#327)\n- Update `Cocur\\Slugify` to `^2.3`.\n\n\n## 4.1.1 - 12-Oct-2016\n\n- Fix for slugs updating when they don't need to, when using `onUpdate` with `unique` (#317) \n\n\n## 4.1.0 - 14-Sep-2016\n\n- The goal of the 4.1.x releases will be to focus on support in Laravel 5.3, only providing support for 5.1/5.2\n  where it is easy and doesn't affect performance significantly.\n- Drop support for PHP <5.6 and HHVM (no longer supported by Laravel 5.3); fixes test build process\n\n\n## 4.0.4 - 13-Sep-2016\n\n- Fix `SluggableScopeHelpers` to work when using the short configuration syntax (#314).\n\n\n## 4.0.3 - 15-Jul-2016\n\n- Added `$config` argument to `SlugService::createSlug` method for optionally overriding \n  the configuration for a statically generated slug (#286).\n\n\n## 4.0.2 - 17-Jun-2016\n\n- Added  `SluggableScopeHelpers` trait which restores some of the scoping and query\n  functionality of the 3.x version of the package (#280, thanks @unstoppablecarl and @Keoghan).\n- Added the `onUpdate` configuration option back to the package.\n- Updated the documentation to show usage of the `SluggableScopeHelpers` trait, and\n  how to use route model binding with slugs.\n\n\n## 4.0.1 - 13-Jun-2016\n\n- Fixed several bugs related to Laravel 5.1 and collections (#263, #274).\n\n\n## 4.0.0 - 10-Jun-2016\n\n- Fix for Laravel 5.1 (#263 thanks @roshangautam and @andregaldino).\n- Update `Cocur\\Slugify` to `^2.1` (#269 thanks @shadoWalker89).\n\n\n## 4.0.0-beta - 01-Jun-2016\n\n- Major revision\n  - Model configuration is now handled in a `sluggable()` method.\n    on the model instead of a property, and configuration options are now camelCase\n  - Ability to generate more than one slug per model.\n  - Removed all `findBy...()` scope/methods (can't really be used when a model\n    has multiple slugs ... plus the code is easy enough to implement in the model).\n  - Removed `onUpdate` configuration option.  If you want to re-generate a slug\n    on update, then set the model's slug to `null` before saving.  Otherwise, existing\n    slugs will never be overwritten.\n  - `createSlug()` is no longer a static method on the model, but is a public method\n    on the _SlugService_ class, with a different method signature (see docs).\n  - Removed artisan command to add slug column to tables.  You will need to do this\n    (pretty simple) task yourself now. \n  - Several bug fixes.\n- See [UPGRADING.md](UPGRADING.md) for details.\n\n\n## 3.1.4 - 03-Jan-2016\n\n- Compatible with Laravel 5.2 (by removing calls to composer from migrate command)\n\n\n## 3.1.3 - 07-Dec-2015\n\n- Fix for PostgreSQL and `findBySlugOrId()` (#205 thanks @Jaspur)\n\n\n## 3.1.2 - 07-Nov-2015\n\n- Fix some namespacing issues in docblocks (#195)\n- Streamline artisan migrate call (#191 thanks @ntzm)\n- Fix bug when using magic getters (#188 thanks @ChrisReid)\n- Add a static slug generator (#185 thanks @phroggyy)\n- Lots of PSR-2 fixes\n\n\n## 3.1.1 - 26-Oct-2015\n\n- Fix missing class reference (#192)\n- Clean up migration code (#191 thanks @natzim)\n- Fix when using magic getters (#188 thanks @ChrisReid)\n\n\n## 3.1.0 - 14-Oct-2015\n\n- Convert code-base to PSR-2\n- If the source is empty, then set the slug to `null` (#162 thanks @PallMallShow)\n- Ability to use a model's relations in the `build_from` configuration (#171 thanks @blaxxi)\n- Added `getSlugEngine()` method so that the Cocur\\Slugify class can be configured\n- Updated the migration stub for Laravel 5.1's PSR-2 changes (#174 thanks @39digits)\n- Added `slugging` and `slugged` Eloquent model events\n- Fix for `findBySlugOrId()` methods when the slug is numeric (#161 thanks @canvural)\n- Add static method `Model::createSlug('some string')` (#185 thanks @phroggyy)\n\n\n## 3.0.0 - 06-Jul-2015\n\n- Don't increment unique suffix if slug is unchanged (#108 thanks @kkiernan)\n\n\n## 3.0.0-beta - 12-Jun-2015\n\n- Laravel 5.1 support (#141/#148 thanks @Keoghan, @Bouhnosaure)\n- Removed `use_cache` option and support\n- Use (Cocur\\Slugify)[https://github.com/cocur/slugify] as default slugging method\n- Fix for `include_trashed` option not working for models that inherit the SoftDeletes trait (#136 thanks @ramirezd42)\n- Added `generateSuffix()` method so you could use different strategies other than integers for making incremental slugs (#129 thanks @EspadaV8)\n- Various scope and lookup fixes (thanks @xire28)\n\n\n## 3.0.0-alpha - 11-Feb-2015\n\n- Laravel 5.0 support\n- Remove Ardent support and tests\n- Fix so that `max_length` option only applies to string slugs (#64 thanks @enzomaserati)\n\n\n## 2.0.5 - 13-Nov-2014\n\n- Fixed `findBySlug()` to return a model and `getBySlug()` to return a collection (#72 thanks @jaewun and @Jono20202)\n- Fixed testbench version requirements (#87 thanks @hannesvdvreken)\n- Fixed so that `max_length` option only applies to string slugs (#64 thanks @enzomaserati)\n- Cleaned up some redundant code and documentation (thanks @hannesvdvreken, @Anahkiasen, @nimbol)\n\n\n## 2.0.4 - 23-Sep-2014\n\n- Fixed softDelete behaviour and tests so Laravel 4.2 and earlier are supported (#56 thanks @hammat).\n- Fixed alias for `Illuminate\\Support\\Str` to prepare for Laravel 4.3/5.0 (#58 thanks @0xMatt).\n\n\n## 2.0.3 - 17-Jul-2014\n\n- Don't allow slugs to be empty (#44 thanks @lfbittencourt).\n\n\n## 2.0.2 - 19-Jun-2014\n\n- Add `getExistingSlugs()` method to trait (#36 thanks @neilcrookes).\n\n\n## 2.0.1 - 13-May-2014\n\n- Fix issue where manually setting the slug field would be overwritten when updating the sluggable fields (#32 thanks @D1kz).\n\n\n## 2.0.0 - 27-Apr-2014\n\n- See the [README](https://github.com/cviebrock/eloquent-sluggable/tree/master#upgrading) for all upgrading details.\n- Now uses traits, so PHP >= 5.4 is required.\n- Configuration and usage is _mostly_ backwards-compatible, although users of Ardent or anyone who force-builds slugs will need to make some changes.\n- Use Laravel's cache to speed up unique slug generation (and prevent duplicates in heavy-usage cases).\n\n\n## 1.0.8 - 20-Feb-2014\n\n- Fix issue where replicated models couldn't forcibly be re-slugged (#20 thanks @trideout).\n\n\n## 1.0.7 - 03-Dec-2013\n\n- Really fix issue #15 -- \"not in object context\" errors.  Previous fix didn't work for PHP 5.3.x (thanks again @mayoz).\n\n\n## 1.0.6 - 02-Dec-2013\n\n- Update composer requirements so that the package installs nicely with the upcoming Laravel 4.1.\n- Updated docs to show how to use package with [Ardent](http://github.com/laravelbook/ardent) models (thanks to @Flynsarmy for the pointers).\n\n\n## 1.0.5 - 15-Nov-2013\n\n- Fix issues where slugs would alternate between \"slug\" and \"slug-1\" when `on_update` and `unique` are set (#14, #16, thanks @mikembm, @JoeChilds).\n- Make `isIncremented` method static to solve possible \"not in object context\" error (#15, thanks @mayoz).\n\n\n## 1.0.4 - 05-Nov-2013\n\n- Unit testing ... woot!  Building this revealed three new bugs:\n\t- Fixed bug where using the default `method` didn't take into account a custom `separator`.\n\t- Proper fix for issue #5.\n\t- `include_trashed` wasn't working because you can't read the protected `softDelete` property of the model.\n\n\n## 1.0.3 - 04-Nov-2013\n\n- Fixed PHP warnings about uninitialized variable (#10, thanks @JoeChilds).\n\n\n## 1.0.2 - 03-Nov-2013\n\n- Allow reverting to a \"smaller\" version of a similar slug (#5, thanks @alkin).\n- Better collection filtering to prevent duplicate slugs on similar long slugs (#3, #6, thanks @torkiljohnsen, @brandonkboswell).\n- `include_trashed` option to include soft-deleted models when checking for uniqueness (#8, thanks @slovenianGooner).\n- Fixed \"undefined variable reserved\" error (#9, thanks @altrim).\n\n\n## 1.0.1 - 02-Jul-2013\n\n- `reserved` configuration option prevents generated slugs from being from a list of \"reserved\" names (e.g. colliding with routes, etc.) (#2, thanks @ceejayoz).\n\n\n## 1.0.0 - 18-Jun-2013\n\n- First non-beta release.\n- `$sluggable` property of model switched back to static, maintains L3 compatability (thanks @orkhan).\n- Updated type hinting in `Sluggable::make()` to better handle extended models (#1, thanks @altrim).\n\n\n## 1.0.0-beta - 11-Jun-2013\n\n- Initial beta release.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.3583984375,
          "content": "# Contributing\n\nContributions are **welcome** and will be fully **credited**.\n\nWe accept contributions via pull requests via \n[Github](https://github.com/cviebrock/eloquent-sluggable).\n\n1. Fork the project.\n2. Create your bugfix/feature branch and write your (well-commented) code.\n3. Ensure you follow our coding style:\n    - Run `composer run style:check` to check.\n    - Run `composer run style:fix` to automagically fix styling errors.\n4. Run basic static analysis on your code with `composer run analyze` and fix any errors.\n5. Create unit tests for your code:\n\t- Run `composer install --dev` in the root directory to install required testing packages.\n\t- Add your test classes/methods to the `/tests/` directory.\n\t- Run `composer run tests` and make sure everything passes (new and old tests).\n6. Updated any documentation (e.g. in `README.md`), if appropriate.\n7. Commit your changes (and your tests) and push to your branch.\n8. Create a new pull request against this package's `master` branch.\n\n\n## Pull Requests\n\n- **Use the [PHP-CS-Fixer Coding Standard](https://cs.symfony.com/doc/ruleSets/PhpCsFixer.html).**\n  The easiest way to apply the conventions is to run `composer run style:fix`.\n\n- **Run static analysis with [phpstan](https://phpstan.org).**\n  The easiest way to check is with `composer run analyze`.  Bonus points if you can bump up the\n  analysis level in `phpstan.dist.neon`!\n\n- **Add tests!**  Your pull request won't be accepted if it doesn't have tests.\n\n- **Document any change in behaviour.**  Make sure the `README.md` and any other relevant \n  documentation are kept up-to-date.\n\n- **Consider our release cycle.**  We try to follow [SemVer v2.0.0](http://semver.org/). \n  Randomly breaking public APIs is not an option.\n\n- **Create feature branches.**  Don't ask us to pull from your master branch.\n\n- **One pull request per feature.**  If you want to do more than one thing, send multiple pull requests.\n\n- **Send coherent history.** - Make sure each individual commit in your pull request is meaningful. \n  If you had to make multiple intermediate commits while developing, please \n  [squash them](http://www.git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Changing-Multiple-Commit-Messages)\n  before submitting.\n\n- Don't worry about updating `CHANGELOG.md` or `.semver`.  The package administrator\n  will handle updating those when new releases are created.\n  \n\n**Thank you!**\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.1103515625,
          "content": "# The MIT License (MIT)\n\nCopyright (c) 2013 Colin Viebrock <colin@viebrock.ca>\n\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> of this software and associated documentation files (the \"Software\"), to deal\n> in the Software without restriction, including without limitation the rights\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> copies of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n> \n> The above copyright notice and this permission notice shall be included in all\n> copies or substantial portions of the Software.\n> \n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n> SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 27.3212890625,
          "content": "# Eloquent-Sluggable\n\nEasy creation of slugs for your Eloquent models in Laravel.\n\n> [!NOTE]\n> These instructions are for the latest version of Laravel.  \n> If you are using an older version, please install a version of the package\n> that [correlates to your Laravel version](#installation).\n\n[![Build Status](https://github.com/cviebrock/eloquent-sluggable/workflows/tests/badge.svg?branch=master)](https://github.com/cviebrock/eloquent-sluggable/actions)\n[![Total Downloads](https://poser.pugx.org/cviebrock/eloquent-sluggable/downloads?format=flat)](https://packagist.org/packages/cviebrock/eloquent-sluggable)\n[![Latest Stable Version](https://poser.pugx.org/cviebrock/eloquent-sluggable/v/stable?format=flat)](https://packagist.org/packages/cviebrock/eloquent-sluggable)\n[![Latest Unstable Version](https://poser.pugx.org/cviebrock/eloquent-sluggable/v/unstable?format=flat)](https://packagist.org/packages/cviebrock/eloquent-sluggable)\n[![SensioLabsInsight](https://insight.sensiolabs.com/projects/0b966e13-6a6a-4d17-bcea-61037f04cfe7/mini.png)](https://insight.sensiolabs.com/projects/0b966e13-6a6a-4d17-bcea-61037f04cfe7)\n[![License](https://img.shields.io/packagist/l/cviebrock/eloquent-sluggable)](LICENSE.md)\n\n\n- [Eloquent-Sluggable](#eloquent-sluggable)\n  - [Background: What is a slug?](#background-what-is-a-slug)\n  - [Installation](#installation)\n  - [Updating your Eloquent Models](#updating-your-eloquent-models)\n  - [Usage](#usage)\n  - [The SlugService Class](#the-slugservice-class)\n  - [When Is A Model Slugged?](#when-is-a-model-slugged)\n  - [Events](#events)\n  - [Configuration](#configuration)\n    - [source](#source)\n    - [method](#method)\n    - [onUpdate](#onupdate)\n    - [separator](#separator)\n    - [unique](#unique)\n    - [uniqueSuffix](#uniquesuffix)\n    - [firstUniqueSuffix](#firstuniquesuffix)\n    - [includeTrashed](#includetrashed)\n    - [reserved](#reserved)\n    - [maxLength](#maxlength)\n    - [maxLengthKeepWords](#maxlengthkeepwords)\n    - [slugEngineOptions](#slugengineoptions)\n  - [Short Configuration](#short-configuration)\n  - [Extending Sluggable](#extending-sluggable)\n    - [customizeSlugEngine](#customizeslugengine)\n    - [scopeWithUniqueSlugConstraints](#scopewithuniqueslugconstraints)\n    - [scopeFindSimilarSlugs](#scopefindsimilarslugs)\n  - [SluggableScopeHelpers Trait](#sluggablescopehelpers-trait)\n  - [Route Model Binding](#route-model-binding)\n  - [Bugs, Suggestions, Contributions and Support](#bugs-suggestions-contributions-and-support)\n  - [Copyright and License](#copyright-and-license)\n\n\n## Background: What is a slug?\n\nA slug is a simplified version of a string, typically URL-friendly. The act of \"slugging\" \na string usually involves converting it to one case, and removing any non-URL-friendly \ncharacters (spaces, accented letters, ampersands, etc.). The resulting string can \nthen be used as an identifier for a particular resource.\n\nFor example, if you have a blog with posts, you could refer to each post via the ID:\n\n    http://example.com/post/1\n    http://example.com/post/2\n\n... but that's not particularly friendly (especially for \n[SEO](http://en.wikipedia.org/wiki/Search_engine_optimization)). You probably would \nprefer to use the post's title in the URL, but that becomes a problem if your post \nis titled \"My Dinner With André & François\", because this is pretty ugly too:\n\n    http://example.com/post/My+Dinner+With+Andr%C3%A9+%26+Fran%C3%A7ois\n\nThe solution is to create a slug for the title and use that instead. You might want \nto use Laravel's built-in `Str::slug()` method to convert that title into something \nfriendlier:\n\n    http://example.com/post/my-dinner-with-andre-francois\n\nA URL like that will make users happier (it's readable, easier to type, etc.).\n\nFor more information, you might want to read \n[this](http://en.wikipedia.org/wiki/Slug_(web_publishing)#Slug) description on Wikipedia.\n\nSlugs tend to be unique as well. So if you write another post with the same title, \nyou'd want to distinguish between them somehow, typically with an incremental counter \nadded to the end of the slug:\n\n    http://example.com/post/my-dinner-with-andre-francois\n    http://example.com/post/my-dinner-with-andre-francois-1\n    http://example.com/post/my-dinner-with-andre-francois-2\n\nThis keeps the URLs unique.\n\nThe **Eloquent-Sluggable** package for Laravel aims to handle all of this for you \nautomatically, with minimal configuration.\n\n\n## Installation\n\nDepending on your version of Laravel, you should install a different\nversion of the package.\n\n> [!NOTE]\n> As of version 6.0, the package's version should match the Laravel version.\n\n| Laravel Version | Package Version |\n|:---------------:|:---------------:|\n|      11.0       |      ^11.0      |\n|      10.0       |      ^10.0      |\n|       9.0       |      ^9.0       |\n|       8.0       |      ^8.0       |\n|       7.0       |      ^7.0       |\n|       6.0       |      ^6.0       |\n|       5.8       |      4.8.*      |\n|       5.7       |      4.7.*      |\n|       5.6       |      4.5.*      |\n|       5.5       |      4.4.*      |\n|       5.4       |      4.2.*      |\n\nOlder versions of Laravel can use older versions of the package, although they \nare no longer supported or maintained.  See [CHANGELOG.md](CHANGELOG.md) and\n[UPGRADING.md](UPGRADING.md) for specifics, and be sure that you are reading \nthe correct README.md for your version (GitHub displays the version in \nthe _master_ branch by default, which might not be what you want).\n\n> [!WARNING]\n> Support for Laravel [Lumen](https://lumen.laravel.com/) will be dropped \n> in the 12.0 version of this package.\n\n\n1. Install the package via Composer:\n\n    ```sh\n    composer require cviebrock/eloquent-sluggable\n    ```\n\n    The package will automatically register its service provider.\n\n2. Optionally, publish the configuration file if you want to change any defaults:\n\n    ```sh\n    php artisan vendor:publish --provider=\"Cviebrock\\EloquentSluggable\\ServiceProvider\"\n    ```\n\n\n## Updating your Eloquent Models\n\nYour models should use the Sluggable trait, which has an abstract method `sluggable()`\nthat you need to define.  This is where any model-specific configuration is set \n(see [Configuration](#configuration) below for details):\n\n```php\nuse Cviebrock\\EloquentSluggable\\Sluggable;\n\nclass Post extends Model\n{\n    use Sluggable;\n\n    /**\n     * Return the sluggable configuration array for this model.\n     *\n     * @return array\n     */\n    public function sluggable(): array\n    {\n        return [\n            'slug' => [\n                'source' => 'title'\n            ]\n        ];\n    }\n}\n```\n\nOf course, your model and database will need a column in which to store the slug. \nYou can use `slug` or any other appropriate name you want; your configuration array\nwill determine to which field the data will be stored.  You will need to add the \ncolumn (which should be `NULLABLE`) manually via your own migration.\n\nThat's it ... your model is now \"sluggable\"!\n\n\n\n## Usage\n\nSaving a model is easy:\n\n```php\n$post = Post::create([\n    'title' => 'My Awesome Blog Post',\n]);\n```\n\nSo is retrieving the slug:\n\n```php\necho $post->slug;\n```\n\n> [!NOTE]\n> If you are replicating your models using Eloquent's `replicate()` method, \n> the package will automatically re-slug the model afterwards to ensure uniqueness.\n\n```php\n$post = Post::create([\n    'title' => 'My Awesome Blog Post',\n]);\n// $post->slug is \"my-awesome-blog-post\"\n\n$newPost = $post->replicate();\n// $newPost->slug is \"my-awesome-blog-post-1\"\n```\n\n> [!NOTE]\n> Empty strings, non-strings or other \"odd\" source values will result in different slugs:\n>\n> | Source Value | Resulting Slug        |\n> |--------------|-----------------------|\n> | string       | string                |\n> | empty string | _no slug will be set_ |\n> | `null`       | _no slug will be set_ |\n> | `0`          | `\"0\"`                 |\n> | `1`          | `\"1\"`                 |\n> | `false`      | `\"0\"`                 |\n> | `true`       | `\"1\"`                 |\n>\n> The above values would be subject to any unique or other checks as well.\n\n## The SlugService Class \n\nAll the logic to generate slugs is handled\nby the `\\Cviebrock\\EloquentSluggable\\Services\\SlugService` class.\n\nGenerally, you don't need to access this class directly, although there is one \nstatic method that can be used to generate a slug for a given string without actually\ncreating or saving an associated model.\n\n```php\nuse \\Cviebrock\\EloquentSluggable\\Services\\SlugService;\n\n$slug = SlugService::createSlug(Post::class, 'slug', 'My First Post');\n```\n\nThis would be useful for Ajax-y controllers or the like, where you want to show a \nuser what the unique slug _would_ be for a given test input, before actually creating\na model.  The first two arguments to the method are the model and slug field being\ntested, and the third argument is the source string to use for testing the slug.\n\nYou can also pass an optional array of configuration values as the fourth argument.\nThese will take precedence over the normal configuration values for the slug field\nbeing tested.  For example, if your model is configured to use unique slugs, but you \nwant to generate the \"base\" version of a slug for some reason, you could do:\n\n```php\n$slug = SlugService::createSlug(Post::class, 'slug', 'My First Post', ['unique' => false]);\n```\n\n\n\n## When Is A Model Slugged?\n\nCurrently, the model is slugged on Eloquent's `saving` event.\nThis means that the slug is generated before any new data is\nwritten to the database.\n  \nFor new models, this means that the primary key has not yet been set, \nso it could not be used as part of the slug source, e.g.:\n\n```php\npublic function sluggable(): array\n{\n    return [\n        'slug' => [\n            'source' => ['title', 'id']\n        ]\n    ];\n}\n```\n\n`$model->id` is `null` before the model is saved.  The benefit of hooking into\nthe `saving` event, however, is that we only needed to make one database\nquery to save all the model's data, including the slug.\n\nOptional, the model can be slugged on Eloquent's `saved` event.  \nThis means that all the other model attributes will have already been\npersisted to the database and _are_ available for use as slug sources.\nSo the above configuration would work.  The only drawback is that \nsaving the model to the database requires one extra query: the first one \nto save all the non-slug fields, and then a second one to update just \nthe slug field.\n  \nThis behaviour is a breaking change, and likely won't affect most users\n(unless you are doing some pre-saving validation on a model's slug field).\nWe feel the benefits outweigh the drawbacks, and so this will likely become\nthe new default behaviour in a future major release of the package.\nAlthough, to make the transition easier, you can configure this behaviour \nvia the `sluggableEvent` method the trait provides:\n\n```php\n    public function sluggableEvent(): string\n    {\n        /**\n         * Default behaviour -- generate slug before model is saved.\n         */\n        return SluggableObserver::SAVING;\n\n        /**\n         * Optional behaviour -- generate slug after model is saved.\n         * This will likely become the new default in the next major release.\n         */\n        return SluggableObserver::SAVED;\n    }\n```\n\nKeep in mind that you will need to use `SluggableObserver::SAVED` if you want\nto use your model's primary key as part of the source fields for your slugs.\n\n\n\n## Events\n\nSluggable models will fire two Eloquent model events: \"slugging\" and \"slugged\".\n  \nThe \"slugging\" event is fired just before the slug is generated.  If the callback\nfrom this event returns `false`, then the slugging is not performed. If anything\nelse is returned, including `null`, then the slugging will be performed.\n\nThe \"slugged\" event is fired just after a slug is generated.  It won't be called\nin the case where the model doesn't need slugging (as determined by the `needsSlugging()`\nmethod).\n\nYou can hook into either of these events just like any other Eloquent model event:\n\n```php\nPost::registerModelEvent('slugging', static function($post) {\n    if ($post->someCondition()) {\n        // the model won't be slugged\n        return false;\n    }\n});\n\nPost::registerModelEvent('slugged', static function($post) {\n    Log::info('Post slugged: ' . $post->getSlug());\n});\n```\n\n\n\n## Configuration\n\nConfiguration was designed to be as flexible as possible. You can set up defaults \nfor all of your Eloquent models, and then override those settings for individual \nmodels.\n\nBy default, global configuration is set in the `config/sluggable.php` file. \nIf a configuration isn't set, then the package defaults are used. \nHere is an example configuration, with all the default settings shown:\n\n```php\nreturn [\n    'source'             => null,\n    'method'             => null,\n    'onUpdate'           => false,\n    'separator'          => '-',\n    'unique'             => true,\n    'uniqueSuffix'       => null,\n    'firstUniqueSuffix'  => 2,\n    'includeTrashed'     => false,\n    'reserved'           => null,\n    'maxLength'          => null,\n    'maxLengthKeepWords' => true,\n    'slugEngineOptions'  => [],\n];\n```\n\nFor individual models, configuration is handled in the `sluggable()` method that you\nneed to implement.  That method should return an indexed array where the keys represent\nthe fields where the slug value is stored and the values are the configuration for that\nfield.  This means you can create multiple slugs for the same model, based on different\nsource strings and with different configuration options.\n\n```php\npublic function sluggable(): array\n{\n    return [\n        'title-slug' => [\n            'source' => 'title'\n        ],\n        'author-slug' => [\n            'source' => ['author.lastname', 'author.firstname'],\n            'separator' => '_'\n        ],\n    ];\n}\n```\n  \n\n### source\n\nThis is the field or array of fields from which to build the slug. Each `$model->field` \nis concatenated (with space separation) to build the sluggable string. These can be \nmodel attributes (i.e. fields in the database), relationship attributes, or custom getters.\n \nTo reference fields from related models, use dot-notation. For example, the \nslug for the following book will be generated from its author's name and the book's title:\n\n```php\nclass Book extends Eloquent\n{\n    use Sluggable;\n\n    protected $fillable = ['title'];\n\n    public function sluggable(): array\n    {\n        return [\n            'slug' => [\n                'source' => ['author.name', 'title']\n            ]\n        ];\n    }\n    \n    public function author(): \\Illuminate\\Database\\Eloquent\\Relations\\BelongsTo\n    {\n        return $this->belongsTo(Author::class);\n    }\n}\n...\nclass Author extends Eloquent\n{\n    protected $fillable = ['name'];\n}\n```\n\nAn example using a custom getter:\n\n```php\nclass Person extends Eloquent\n{\n    use Sluggable;\n\n    public function sluggable(): array\n    {\n        return [\n            'slug' => [\n                'source' => 'fullname'\n            ]\n        ];\n    }\n\n    public function getFullnameAttribute(): string\n    {\n        return $this->firstname . ' ' . $this->lastname;\n    }\n}\n```\n\nIf `source` is empty, false or null, then the value of `$model->__toString()` is used\nas the source for slug generation.\n\n### method\n\nDefines the method used to turn the sluggable string into a slug. There are three \npossible options for this configuration:\n\n1. When `method` is null (the default setting), the package uses the default slugging\nengine -- [cocur/slugify](https://github.com/cocur/slugify) -- to create the slug.\n\n2. When `method` is a callable, then that function or class method is used. The function/method \nshould expect two parameters: the string to process, and a separator string. \nFor example, to use Laravel's `Str::slug`, you could do:\n\n```php\n'method' => ['Illuminate\\\\Support\\\\Str', 'slug'],\n```\n\n3. You can also define `method` as a closure (again, expecting two parameters):\n\n```php\n'method' => static function(string $string, string $separator): string {\n    return strtolower(preg_replace('/[^a-z]+/i', $separator, $string));\n},\n```\n\nAny other values for `method` will throw an exception.\n\nFor more complex slugging requirements, see [Extending Sluggable](#extending-sluggable) below.\n\n### onUpdate\n\nBy default, updating a model will not try and generate a new slug value.  It is assumed\nthat once your slug is generated, you won't want it to change (this may be especially\ntrue if you are using slugs for URLs and don't want to mess up your SEO mojo).\n\nIf you want to regenerate one or more of your model's slug fields, you can set those\nfields to null or an empty string before the update:\n\n```php\n$post->slug = null;\n$post->update(['title' => 'My New Title']);\n```\n\nIf this is the behaviour you want every time you update a model, then set the `onUpdate`\noption to true.\n\n### separator\n\nThis defines the separator used when building a slug, and is passed to the `method` \ndefined above. The default value is a hyphen.\n\n### unique\n\nThis is a boolean defining whether slugs should be unique among all models of the given type. \nFor example, if you have two blog posts and both are called \"My Blog Post\", then they \nwill both sluggify to \"my-blog-post\" if `unique` is false. This could be a problem, e.g. \nif you use the slug in URLs.\n\nBy setting `unique` to true, then the second Post model will sluggify to \"my-blog-post-1\". \nIf there is a third post with the same title, it will sluggify to \"my-blog-post-2\" \nand so on. Each subsequent model will get an incremental value appended to the end \nof the slug, ensuring uniqueness.\n\n### uniqueSuffix\n\nIf you want to use a different way of identifying uniqueness (other than auto-incrementing\nintegers), you can set the `uniqueSuffix` configuration to a function or callable that \ngenerates the \"unique\" values for you.\n \nThe function should take four parameters:\n1. the base slug (i.e. the non-unique slug)\n2. the separator string\n3. an `\\Illuminate\\Support\\Collection` of all the other slug strings that start with the same slug\n4. the first suffix to use (for the first slug that needs to be made unique)\nYou can then do whatever you want to create a new suffix that hasn't been used\nby any of the slugs in the collection.  For example, if you wanted\nto use letters instead of numbers as a suffix, this is one way to achieve that:\n\n```php\n'uniqueSuffix' => static function(string $slug, string $separator, Collection $list, $firstSuffix): string\n    {\n      $size = count($list);\n\n      return chr($size + 96);\n    }\n```\n\n### firstUniqueSuffix\n\nWhen adding a unique suffix, we start counting at \"2\", so that the list of\ngenerated slugs would look something like:\n- `my-unique-slug`\n- `my-unique-slug-2`\n- `my-unique-slug-3`\n- etc.\n\nIf you want to start counting at a different number (or pass a different value\ninto your custom `uniqueSuffix` function above), then you can define it here.\n\n> [!NOTE]\n> Prior versions of the package started with a unique suffix of `1`.  \n> This was switched to `2` in version 8.0.5, as it's a more\n> \"intuitive\" suffix value to attach to the second slug.\n\n### includeTrashed\n\nSetting this to `true` will also check deleted models when trying to enforce uniqueness. \nThis only affects Eloquent models that are using the \n[softDelete](http://laravel.com/docs/eloquent#soft-deleting) feature. Default is `false`, \nso soft-deleted models don't count when checking for uniqueness.\n\n### reserved\n\nAn array of values that will never be allowed as slugs, e.g. to prevent collisions \nwith existing routes or controller methods, etc.. This can be an array, or a closure \nthat returns an array. Defaults to `null`: no reserved slug names.\n\n### maxLength\n\nSetting this to a positive integer will ensure that your generated slugs are restricted \nto a maximum length (e.g. to ensure that they fit within your database fields). By default, \nthis value is null and no limit is enforced.\n\n> [!NOTE]\n> If `unique` is enabled (which it is by default), and you anticipate having \n> several models with the same slug, then you should set this value to a few characters \n> less than the length of your database field. The reason why is that the class will \n> append \"-2\", \"-3\", \"-4\", etc., to subsequent models in order to maintain uniqueness. \n> These incremental extensions aren't included in part of the `maxLength` calculation.\n\n### maxLengthKeepWords\n\nIf you are truncating your slugs with the `maxLength` setting, than you probably\nwant to ensure that your slugs don't get truncated in the middle of a word.  For\nexample, if your source string is \"My First Post\", and your `maxLength` is 10,\nthe generated slug would end up being \"my-first-p\", which isn't ideal.\n\nBy default, the `maxLengthKeepWords` value is set to true which would trim the\npartial words off the end of the slug, resulting in \"my-first\" instead of \"my-first-p\".\n\nIf you want to keep partial words, then set this configuration to false.\n\n### slugEngineOptions\n\nWhen `method` is null (the default setting), the package uses the default slugging\nengine -- [cocur/slugify](https://github.com/cocur/slugify) -- to create the slug.\nIf you want to pass a custom set of options to the Slugify constructor when the engine\nis instantiated, this is where you would define that. \nSee [the documentation](https://github.com/cocur/slugify#more-options)\nfor Slugify for what those options are.  Also, look at \n[customizeSlugEngine](#customizeslugengine) for other ways to customize Slugify\nfor slugging.\n\nA common use for this is to turn on a different ruleset for a specific language.\nFor example the string `Jyväskylä` will slug to `jyvaeskylae` using the default settings.\nIn Finnish, it really should slug to `jyvaskyla`, so for that to work, you need to enable \nthe Finnish ruleset for the attribute you are slugging:\n\n```php\npublic function sluggable(): array\n{\n    return [\n        'slug' => [\n            'source' => 'title',\n            'slugEngineOptions' => [\n                'ruleset' => 'finnish'\n            ]\n        ]\n    ];\n}\n```\n\nThis can also be accomplished with the [customizeSlugEngine](#customizeslugengine) method\n(which, unless you add custom logic, will apply to _all_ attributes on the model):\n\n```php\npublic function customizeSlugEngine(Slugify $engine, string $attribute): \\Cocur\\Slugify\\Slugify\n{\n    $engine->activateRuleSet('finnish');\n\n    return $engine;\n}\n```\n\n## Short Configuration\n\nThe package supports a really short configuration syntax, if you are truly lazy:\n\n```php\npublic function sluggable(): array\n{\n    return ['slug'];\n}\n```\n\nThis will use all the default options from `config/sluggable.php`, use the model's\n`__toString()` method as the source, and store the slug in the `slug` field.\n\n\n\n## Extending Sluggable\n\nSometimes the configuration options aren't sufficient for complex needs (e.g. maybe \nthe uniqueness test needs to take other attributes into account).\n\nIn instances like these, the package offers hooks into the slugging workflow where you\ncan use your own functions, either on a per-model basis, or in your own trait that extends \nthe package's trait.\n\n> [!NOTE]\n> If you are putting these methods into your own trait, you will \n> need to indicate in your models that PHP should use _your_ trait methods \n> instead of the packages (since a class can't use two traits with the\n> same methods), e.g.\n>\n> ```php\n> /**\n>  * Your trait where you collect your common Sluggable extension methods\n>  */\n> class MySluggableTrait {\n>     public function customizeSlugEngine(...) {}\n>     public function scopeWithUniqueSlugConstraints(...) {}\n>     // etc.\n> }\n> \n> /**\n>  * Your model\n>  */\n> class MyModel {\n>     // Tell PHP to use your methods instead of the packages:\n>     use Sluggable,\n>         MySluggableTrait  {\n>             MySluggableTrait::customizeSlugEngine insteadof Sluggable;\n>             MySluggableTrait::scopeWithUniqueSlugConstraints insteadof Sluggable;\n>         }\n> \n>     // ...\n> }\n> ```\n\n\n### customizeSlugEngine\n\n```php\n/**\n * @param \\Cocur\\Slugify\\Slugify $engine\n * @param string $attribute\n * @return \\Cocur\\Slugify\\Slugify\n */\npublic function customizeSlugEngine(Slugify $engine, string $attribute): \\Cocur\\Slugify\\Slugify\n{\n    // ...\n    return $engine;\n}\n```\n\nIf you extend this method, the Slugify engine can be customized before slugging occurs.\nThis might be where you change the character mappings that are used, or alter language files, etc..\n\nYou can customize the engine on a per-model and per-attribute basis (maybe your model has \ntwo slug fields, and one of them needs customization).\n\nTake a look at `tests/Models/PostWithCustomEngine.php` for an example.\n\nAlso, take a look at the [slugEngineOptions](#slugengineoptions)\nconfiguration for other ways to customize Slugify.\n\n### scopeWithUniqueSlugConstraints\n\n```php\n/**\n * @param \\Illuminate\\Database\\Eloquent\\Builder $query\n * @param \\Illuminate\\Database\\Eloquent\\Model $model\n * @param string $attribute\n * @param array $config\n * @param string $slug\n * @return \\Illuminate\\Database\\Eloquent\\Builder\n */\npublic function scopeWithUniqueSlugConstraints(\n    Builder $query,\n    Model $model,\n    string $attribute,\n    array $config,\n    string $slug\n): Builder\n{\n    // ...\n}\n```\n\nThis method is applied to the query that is used to determine \nif a given slug is unique.  The arguments passed to the scope are:\n\n* `$model` -- the object being slugged\n* `$attribute` -- the slug field being generated,\n* `$config` -- the configuration array for the given model and attribute\n* `$slug` -- the \"base\" slug (before any unique suffixes are applied)\n\nFeel free to use these values anyway you like in your query scope.  As an example, look at \n`tests/Models/PostWithUniqueSlugConstraints.php` where the slug is generated for a post from\nits title, but the slug is scoped to the author.  So Bob can have a post with the same title\nas Pam's post, but both will have the same slug.\n\n### scopeFindSimilarSlugs\n\n```php\n/**\n * Query scope for finding \"similar\" slugs, used to determine uniqueness.\n *\n * @param \\Illuminate\\Database\\Eloquent\\Builder $query\n * @param string $attribute\n * @param array $config\n * @param string $slug\n * @return \\Illuminate\\Database\\Eloquent\\Builder\n */\npublic function scopeFindSimilarSlugs(Builder $query, string $attribute, array $config, string $slug): Builder\n{\n    // ...\n}\n```\n\nThis is the default scope for finding \"similar\" slugs for a model.  Basically, the package looks for existing\nslugs that are the same as the `$slug` argument, or that start with `$slug` plus the separator string.\nThe resulting collection is what is passed to the `uniqueSuffix` handler.\n\nGenerally, this query scope (which is defined in the Sluggable trait) should be left alone.\nHowever, you are free to overload it in your models.\n\n\n\n## SluggableScopeHelpers Trait\n\nAdding the optional `SluggableScopeHelpers` trait to your model allows you to work with models\nand their slugs.  For example:\n\n```php\n$post = Post::whereSlug($slugString)->get();\n\n$post = Post::findBySlug($slugString);\n\n$post = Post::findBySlugOrFail($slugString);\n```\n\nBecause models can have more than one slug, this requires a bit more configuration.\nSee [SCOPE-HELPERS.md](SCOPE-HELPERS.md) for all the details.\n\n\n\n## Route Model Binding\n\nSee [ROUTE-MODEL-BINDING.md](ROUTE-MODEL-BINDING.md) for details.\n\n\n\n## Bugs, Suggestions, Contributions and Support\n\nThanks to [everyone](https://github.com/cviebrock/eloquent-taggable/graphs/contributors)\nwho has contributed to this project!\n\nPlease use [GitHub](https://github.com/cviebrock/eloquent-sluggable) for reporting bugs, \nand making comments or suggestions.\n \nSee [CONTRIBUTING.md](CONTRIBUTING.md) for how to contribute changes.\n\n\n\n## Copyright and License\n\n[eloquent-sluggable](https://github.com/cviebrock/eloquent-sluggable)\nwas written by [Colin Viebrock](http://viebrock.ca) and is released under the \n[MIT License](LICENSE.md).\n\nCopyright (c) 2013 Colin Viebrock\n"
        },
        {
          "name": "ROUTE-MODEL-BINDING.md",
          "type": "blob",
          "size": 1.736328125,
          "content": "# Route Model Binding and Eloquent-Sluggable\n\nRoute Model Binding is easy to implement with only minor configuration to your models.\n\n\n## Implicit Binding\n\nImplicit binding requires adding a `getRouteKeyName()` method to your model that returns the name\nof the slug field:\n\n```php\nuse Cviebrock\\EloquentSluggable\\Sluggable;\nuse Cviebrock\\EloquentSluggable\\SluggableScopeHelpers;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Post extends Model\n{\n    use Sluggable, SluggableScopeHelpers;\n    \n    public function sluggable(): array\n    {\n        return [\n            'slug' => [\n                'source' => 'title',\n            ]\n        ];\n    }\n    \n    /**\n     * Get the route key for the model.\n     *\n     * @return string\n     */\n    public function getRouteKeyName(): string\n    {\n        return 'slug';\n    }\n    \n}\n```\n\nFrom there, you can set up your routes as described in the Eloquent documentation:\n\n```php\nRoute::get('api/posts/{post}', function(App\\Post $post): string {\n    return $post->title;\n});\n```\n\nIn this example, since the Eloquent type-hinted `$post` variable defined on the route \nmatches the {post} segment in the route's URI, Laravel will automatically inject the \nmodel instance that has a slug matching the corresponding value from the request URI.\n\nFurther, if you are using the [SluggableScopeHelpers](SCOPE-HELPERS.md) trait, you can bind\nthe default slug to the route parameter with:\n \n```php\npublic function getRouteKeyName(): string\n{\n    return $this->getSlugKeyName();\n}\n```\n\n\n## Explicit Binding\n\nYou can also use the `RouteServiceProvider::boot` method as described in the \n[Laravel Documentation](https://laravel.com/docs/routing#route-model-binding) to \nhandle explicit route model binding.\n\n\n- - -\n\nCopyright (c) 2013 Colin Viebrock\n"
        },
        {
          "name": "SCOPE-HELPERS.md",
          "type": "blob",
          "size": 1.7119140625,
          "content": "# SluggableScopeHelpers Trait\n\nThe `SluggableScopeHelpers` trait adds a query scope and other methods to make finding models with a \nmatching slug as easy as:\n\n```php\n$post = Post::findBySlug($slugString);\n$post = Post::findBySlugOrFail($slugString);\n```\n\nThese two methods have the same signature and functionality as Eloquent's `find()` and `findOrFail()` methods\nexcept that they use the slug field instead of the primary key.\n\nThe helper trait also adds a query scope to help limit searches to a particular slug:\n\n```php\n$post = Post::where('author_id', '=', 3)\n            ->whereSlug($slug)\n            ->get();\n```\n\nBy default, the trait looks at your `sluggable()` method and uses the first slug that's defined in the configuration\narray for the helper scopes and methods.  If your model has more than one slugged field, you will either need to\nput the field to be used for scopes first, or define an additional property on your model which indicates which\nslug is the \"primary\" one:\n\n```php\nuse Cviebrock\\EloquentSluggable\\Sluggable;\nuse Cviebrock\\EloquentSluggable\\SluggableScopeHelpers;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Post extends Model\n{\n    use Sluggable;\n    use SluggableScopeHelpers;\n    \n    protected $slugKeyName = 'alternate';\n    \n    /**\n     * Sluggable configuration.\n     *\n     * @var array\n     */\n    public function sluggable(): array\n    {\n        return [\n            'slug' => [\n                'source' => 'title',\n            ],\n            'alternate' => [\n                'source' => 'subtitle',\n            ]\n        ];\n    }\n}\n```\n\nIn the above case, `Post::findBySlugOrFail($slug)` is the equivalent to `Post::where('alternate,'=',$slug)->firstOrFail()`.\n\n\n- - -\n\nCopyright (c) 2013 Colin Viebrock\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 1.0625,
          "content": "# Todos\n\n- [x] Write tests\n    - [ ] Test events\n- [x] Better docblock and inline-commenting\n- [x] Make code style consistent\n- [x] Drop `develop` branch and just have `master` and tagged releases\n- [x] Add check that model uses softDelete trait when using `with_trashed` (see issue #47)\n\n## Planned changes (possibly BC-breaking) for next major version - 4.0\n\n- [x] switch default slugging method from `Str::slug` to an external package/class that can handle transliteration of other languages (e.g. https://github.com/cocur/slugify)\n    - [x] provide interface into `cocur/slugify` to allow for custom rules, etc.\n- [X] convert `findBySlug` into a scope (as suggested by @unitedworks in #40)\n- [x] more configurable `unique` options (see issue #53)\n- [x] refactor, or remove, caching code (it wasn't really thought out well enough, IMO)\n- [x] add events, e.g. `eloquent.slug.created`, `eloquent.slug.changed`, etc. (as suggested in #96 and #101)\n\n## Planned changes (possibly BC-breaking) for next major version - 4.3\n\n- [x] remove unused `$model` argument from `scopeFindSimilarSlugs`\n"
        },
        {
          "name": "UPGRADING.md",
          "type": "blob",
          "size": 3.9990234375,
          "content": "# Upgrading\n\n## Upgrading from 4.2 to 4.3\n\n* The signature for `scopeFindSimilarSlugs()` dropped the unused `$model` parameter:\n  ```diff\n  - public function scopeFindSimilarSlugs(Builder $query, Model $model, $attribute, $config, $slug)\n  + public function scopeFindSimilarSlugs(Builder $query, $attribute, $config, $slug)\n  ```\n  If you use this scope in your application, then remove the first argument passed to the scope.\n\n\n- - -\n\n## Upgrading from 3.x to 4.x\n\n### Configuration Changes\n\nThe configuration array has changed slightly between versions:\n\n* In your `config/sluggable.php` configuration file, remove the `save_to`  \n  parameter as it is no longer used.  Rename `build_from` to `source`, and convert the other\n  parameters from snake_case to lower camelCase (e.g. `include_trashed` -> `includeTrashed`).\n* Your models no longer need to implement `Cviebrock\\EloquentSluggable\\SluggableInterface`.\n* Your models should now use the trait `Cviebrock\\EloquentSluggable\\Sluggable` instead of \n  `Cviebrock\\EloquentSluggable\\SluggableTrait`, which no longer exists.\n* Per-model configuration has been moved from a protect property into a protected method, and \n  the configuration array is now keyed with the attribute field where the slug is stored (i.e. the\n  previous value of the `save_to` configuration.\n* The service provider name has changed, so update the entry in your project's `config/app.php`\n  from `Cviebrock\\EloquentSluggable\\SluggableServiceProvider::class` to\n  `Cviebrock\\EloquentSluggable\\ServiceProvider::class`.\n  \n#### Version 3.x Configuration Example:\n  \n```php\nuse Cviebrock\\EloquentSluggable\\SluggableInterface;\nuse Cviebrock\\EloquentSluggable\\SluggableTrait;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Post extends Model implements SluggableInterface\n{\n    use SluggableTrait;\n\n    /**\n     * Sluggable configuration.\n     *\n     * @var array\n     */\n    protected $sluggable = [\n        'build_from'      => 'title',\n        'save_to'         => 'slug',\n        'separator'       => '-',\n        'include_trashed' => true,\n    ];\n}\n```\n\n#### Converted Version 4.x Example:\n\n```php\nuse Cviebrock\\EloquentSluggable\\Sluggable;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Post extends Model\n{\n    use Sluggable;\n\n    /**\n     * Sluggable configuration.\n     *\n     * @var array\n     */\n    public function sluggable() {\n        return [\n            'slug' => [\n                'source'         => 'title',\n                'separator'      => '-',\n                'includeTrashed' => true,\n            ]\n        ];\n    }\n}\n```\n\n### Other Changes\n\n#### Artisan Command\n\nThe `php artisan sluggable:table` command has been deprecated so you will need to make and run your own \nmigrations if you need to add columns to your database tables to store slug values.\n\n#### Route Model Binding\n\nRoute Model Binding has been removed from the package.  You are encouraged to handle this yourself\nin the model's `getRouteKeyName` method, or in a `RootServiceProvider::boot` method as described in \nthe [Laravel Documentation](https://laravel.com/docs/5.2/routing#route-model-binding).  \n\nSee [ROUTE-MODEL-BINDING.md](ROUTE-MODEL-BINDING.md) for details.\n\n#### Query Scopes\n\nBecause the package now supports multiple slugs per model, the `findBySlug()` and other `findBy*`\nmethods have been removed from the package by default, as has the `whereSlug()` query scope.  You should \njust update your code to use standard Eloquent methods to find your models, specifying which \nfields to search by:\n\n```php\n// OLD\n$posts = Post::whereSlug($input)->get();\n$post = Post::findBySlug($input);\n$post = Post::findBySlugOrFail($input);\n$post = Post::findBySlugOrIdOrFail($input);\n\n// NEW\n$posts = Post::where('slug',$input)->get();\n$post = Post::where('slug', $input)->first();\n$post = Post::where('slug', $input)->firstOrFail();\n$post = Post::where('slug', $input)->first() ?: Post::findOrFail((int)$input);\n```\n\nAlternatively, your model can use the `SluggableScopeHelpers` trait.  \nSee [SCOPE-HELPERS.md](SCOPE-HELPERS.md) for details.\n\n\n- - -\n\nCopyright (c) 2013 Colin Viebrock\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.0146484375,
          "content": "{\n    \"name\": \"cviebrock/eloquent-sluggable\",\n    \"description\": \"Easy creation of slugs for your Eloquent models in Laravel\",\n    \"keywords\": [\n        \"eloquent-sluggable\",\n        \"eloquent\",\n        \"sluggable\",\n        \"laravel\",\n        \"lumen\",\n        \"slug\"\n    ],\n    \"homepage\": \"https://github.com/cviebrock/eloquent-sluggable\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Colin Viebrock\",\n            \"email\": \"colin@viebrock.ca\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.2\",\n        \"cocur/slugify\": \"^4.3\",\n        \"illuminate/config\": \"^11.0\",\n        \"illuminate/database\": \"^11.0\",\n        \"illuminate/support\": \"^11.0\"\n    },\n    \"require-dev\": {\n        \"friendsofphp/php-cs-fixer\": \"^3.65\",\n        \"larastan/larastan\": \"^3.0\",\n        \"mockery/mockery\": \"^1.4.4\",\n        \"orchestra/testbench\": \"^9.0\",\n        \"pestphp/pest\": \"^2.28\",\n        \"phpstan/phpstan\": \"^2.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Cviebrock\\\\EloquentSluggable\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Cviebrock\\\\EloquentSluggable\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"scripts\": {\n        \"analyze\": \"vendor/bin/phpstan analyze\",\n        \"fresh\": [\n            \"rm -rf vendor composer.lock\",\n            \"composer install\"\n        ],\n        \"style:check\": \"vendor/bin/php-cs-fixer check -v\",\n        \"style:fix\": \"vendor/bin/php-cs-fixer fix -v\",\n        \"tests\": [\n            \"rm -rf build\",\n            \"XDEBUG_MODE=coverage php vendor/bin/pest\"\n        ],\n        \"tests:ci\": [\n            \"vendor/bin/pest --teamcity\"\n        ]\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"Cviebrock\\\\EloquentSluggable\\\\ServiceProvider\"\n            ]\n        },\n        \"branch-alias\": {\n            \"dev-master\": \"11.0.x-dev\"\n        }\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"config\": {\n        \"sort-packages\": true,\n        \"allow-plugins\": {\n            \"pestphp/pest-plugin\": true\n        }\n    }\n}\n"
        },
        {
          "name": "phpstan.dist.neon",
          "type": "blob",
          "size": 0.197265625,
          "content": "includes:\n  - vendor/larastan/larastan/extension.neon\n\nparameters:\n  level: 4\n  paths:\n    - resources\n    - src\n    - tests\n  editorUrl: '%%relFile%%:%%line%%'\n  editorUrlTitle: '%%relFile%%:%%line%%'\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.8125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit \n    backupGlobals=\"false\" \n    backupStaticProperties=\"false\"\n    bootstrap=\"vendor/autoload.php\" \n    cacheDirectory=\".phpunit.cache\" \n    colors=\"true\" \n    processIsolation=\"false\" \n    stopOnFailure=\"true\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.5/phpunit.xsd\"\n  >\n  <coverage>\n    <report>\n      <html outputDirectory=\"build/coverage\"/>\n    </report>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"Sluggable Test Suite\">\n      <directory suffix=\".php\">./tests/</directory>\n    </testsuite>\n  </testsuites>\n  <logging>\n    <junit outputFile=\"build/report.junit.xml\"/>\n  </logging>\n  <source>\n    <include>\n      <directory suffix=\".php\">src/</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}