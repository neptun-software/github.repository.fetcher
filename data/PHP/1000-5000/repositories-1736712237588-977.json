{
  "metadata": {
    "timestamp": 1736712237588,
    "page": 977,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "php-vcr/php-vcr",
      "stars": 1179,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".ecrc",
          "type": "blob",
          "size": 0.181640625,
          "content": "{\n  \"Verbose\": true,\n  \"IgnoreDefaults\": false,\n  \"Exclude\": [\n    \".phpunit.result.cache\",\n    \".php-cs-fixer.cache\",\n    \".idea\",\n    \".git\",\n    \"vendor/\",\n    \"tests/fixtures\"\n  ]\n}\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.236328125,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\ntrim_trailing_whitespace = true\n\n[*.php]\nindent_size = 4\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.neon]\nindent_style = tab\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4453125,
          "content": "/docs                   export-ignore\n/tests                  export-ignore\n/.gitattributes         export-ignore\n/.gitignore             export-ignore\n/.php-cs-fixer.dist.php export-ignore\n/.editorconfig          export-ignore\n/.ecrc                  export-ignore\n/docker-compose.yaml    export-ignore\n/phpstan.neon           export-ignore\n/phpstan-baseline.neon  export-ignore\n/phpunit.xml.dist       export-ignore\n/resources              export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.119140625,
          "content": "**/vendor/*\ncoverage/*\nnotes.md\ntests/fixtures/cassette*\n/.php_cs\ncomposer.lock\n.phpunit.result.cache\n.php-cs-fixer.cache\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 0.4384765625,
          "content": "<?php\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules([\n        '@PSR12' => true,\n        '@Symfony' => true,\n        '@Symfony:risky' => true,\n        '@PHP80Migration' => true,\n        '@PHP80Migration:risky' => true,\n        '@PHPUnit84Migration:risky' => true,\n    ])\n    ->setFinder(\n        PhpCsFixer\\Finder::create()\n            ->exclude('vendor')\n            ->exclude('docs')\n            ->in(__DIR__)\n    )\n    ->setRiskyAllowed(true);\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0830078125,
          "content": "Copyright (c) 2013 Adrian Philipp, https://github.com/adri <mail@adrian-philipp.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.9208984375,
          "content": "![PHP-VCR](https://user-images.githubusercontent.com/133832/27151811-0d95c6c4-514c-11e7-834e-eff1eec2ea16.png)\n\n[![Continuous Integration](https://github.com/php-vcr/php-vcr/actions/workflows/continuous%20integration.yml/badge.svg?branch=master)](https://github.com/php-vcr/php-vcr/actions/workflows/continuous%20integration.yml)\n[![Code Coverage](https://scrutinizer-ci.com/g/php-vcr/php-vcr/badges/coverage.png?s=15cf1644c8cf37a868e03cfba809a5e24c78f285)](https://scrutinizer-ci.com/g/php-vcr/php-vcr/)\n[![Scrutinizer Quality Score](https://scrutinizer-ci.com/g/php-vcr/php-vcr/badges/quality-score.png?s=4f638dbca5eb51fb9c87a1dd45c5df94687d85bd)](https://scrutinizer-ci.com/g/php-vcr/php-vcr/)\n\nThis is a port of the [VCR](http://github.com/vcr/vcr) Ruby library to PHP.\n\nRecord your test suite's HTTP interactions and replay them during future test runs for fast, deterministic, accurate tests. A bit of documentation can be found on the [php-vcr website](http://php-vcr.github.io).\n\nDisclaimer: Doing this in PHP is not as easy as in programming languages which support monkey patching (I'm looking at you, Ruby)\n\n## Features\n\n* Automatically records and replays your HTTP(s) interactions with minimal setup/configuration code.\n* Supports common http functions and extensions\n  * everything using [streamWrapper](http://php.net/manual/en/class.streamwrapper.php): fopen(), fread(), file_get_contents(), ... without any modification (except `$http_response_header` see [#96](https://github.com/php-vcr/php-vcr/issues/96))\n  * [SoapClient](http://www.php.net/manual/en/soapclient.soapclient.php) by adding `\\VCR\\VCR::turnOn();` in your `tests/bootstrap.php`\n  * curl(), by adding `\\VCR\\VCR::turnOn();` in your `tests/bootstrap.php`\n* The same request can receive different responses in different tests -- just use different cassettes.\n* Disables all HTTP requests that you don't explicitly allow by [setting the record mode](http://php-vcr.github.io/documentation/configuration/)\n* [Request matching](http://php-vcr.github.io/documentation/configuration/) is configurable based on HTTP method, URI, host, path, body and headers, or you can easily\n  implement a custom request matcher to handle any need.\n* The recorded requests and responses are stored on disk in a serialization format of your choice\n  (currently YAML and JSON are built in, and you can easily implement your own custom serializer)\n* Supports PHPUnit annotations.\n\n## Usage example\n\nUsing static method calls:\n\n``` php\nclass VCRTest extends TestCase\n{\n    public function testShouldInterceptStreamWrapper()\n    {\n        // After turning on the VCR will intercept all requests\n        \\VCR\\VCR::turnOn();\n\n        // Record requests and responses in cassette file 'example'\n        \\VCR\\VCR::insertCassette('example');\n\n        // Following request will be recorded once and replayed in future test runs\n        $result = file_get_contents('http://example.com');\n        $this->assertNotEmpty($result);\n\n        // To stop recording requests, eject the cassette\n        \\VCR\\VCR::eject();\n\n        // Turn off VCR to stop intercepting requests\n        \\VCR\\VCR::turnOff();\n    }\n\n    public function testShouldThrowExceptionIfNoCasettePresent()\n    {\n        $this->setExpectedException(\n            'BadMethodCallException',\n            \"Invalid http request. No cassette inserted. Please make sure to insert \"\n            . \"a cassette in your unit test using VCR::insertCassette('name');\"\n        );\n        \\VCR\\VCR::turnOn();\n        // If there is no cassette inserted, a request throws an exception\n        file_get_contents('http://example.com');\n    }\n}\n```\n\nYou can use annotations in PHPUnit by using [phpunit-testlistener-vcr](https://github.com/php-vcr/phpunit-testlistener-vcr):\n\n``` php\nclass VCRTest extends TestCase\n{\n    /**\n     * @vcr unittest_annotation_test\n     */\n    public function testInterceptsWithAnnotations()\n    {\n        // Requests are intercepted and stored into  tests/fixtures/unittest_annotation_test.\n        $result = file_get_contents('http://google.com');\n\n        $this->assertEquals('This is a annotation test dummy.', $result, 'Call was not intercepted (using annotations).');\n\n        // VCR is automatically turned on and off.\n    }\n}\n```\n\n## Installation\n\nSimply run the following command:\n\n``` bash\n$ composer require --dev php-vcr/php-vcr\n```\n\n## Dependencies\n\nPHP-VCR depends on:\n\n  * PHP 8\n  * Curl extension\n  * [symfony/event-dispatcher](https://github.com/symfony/event-dispatcher)\n  * [symfony/yaml](https://github.com/symfony/yaml)\n  * [beberlei/assert](https://github.com/beberlei/assert)\n\nComposer installs all dependencies except extensions like curl.\n\n## Run tests\n\nIn order to run all tests you need to get development dependencies using composer:\n\n``` php\ncomposer install\ncomposer test\n```\n\n## Changelog\n\n**The changelog has moved to the [PHP-VCR releases page](https://github.com/php-vcr/php-vcr/releases).**\n\n[Old changelog entries](docs/old-changelog.md)\n\n## Copyright\nCopyright (c) 2013-2023 Adrian Philipp. Released under the terms of the MIT license. See LICENSE for details.\n[Contributors](https://github.com/php-vcr/php-vcr/graphs/contributors)\n\n<!--\nname of the projects and all sub-modules and libraries (sometimes they are named different and very confusing to new users)\ndescriptions of all the project, and all sub-modules and libraries\n5-line code snippet on how its used (if it's a library)\ncopyright and licensing information (or \"Read LICENSE\")\ninstruction to grab the documentation\ninstructions to install, configure, and to run the programs\ninstruction to grab the latest code and detailed instructions to build it (or quick overview and \"Read INSTALL\")\nlist of authors or \"Read AUTHORS\"\ninstructions to submit bugs, feature requests, submit patches, join mailing list, get announcements, or join the user or dev community in other forms\nother contact info (email address, website, company name, address, etc)\na brief history if it's a replacement or a fork of something else\nlegal notices (crypto stuff)\n-->\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.6962890625,
          "content": "{\n    \"name\": \"php-vcr/php-vcr\",\n    \"description\": \"Record your test suite's HTTP interactions and replay them during future test runs for fast, deterministic, accurate tests.\",\n    \"license\": \"MIT\",\n    \"scripts\": {\n        \"test\": \"./vendor/bin/phpunit\",\n        \"cs\": \"./vendor/bin/php-cs-fixer fix --verbose --diff --dry-run\",\n        \"cs-fix\": \"./vendor/bin/php-cs-fixer fix --verbose --diff\",\n        \"phpstan\": \"php -d memory_limit=-1 vendor/bin/phpstan analyse -c phpstan.neon --no-progress -vvv\",\n        \"ec\": \"./vendor/bin/ec\"\n    },\n    \"authors\": [\n        {\n            \"name\": \"Adrian Philipp\",\n            \"email\": \"mail@adrian-philipp.com\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8,<8.2|>=8.2.9,<8.5\",\n        \"ext-curl\": \"*\",\n        \"beberlei/assert\": \"^3.2.5\",\n        \"symfony/yaml\": \"^3|^4|^5|^6|^7\",\n        \"symfony/event-dispatcher\": \"^4|^5|^6|^7\",\n        \"symfony/event-dispatcher-contracts\": \"^1|^2|^3\"\n    },\n    \"require-dev\": {\n        \"ext-soap\": \"*\",\n        \"guzzlehttp/guzzle\": \"^7\",\n        \"phpunit/phpunit\": \"^9.5.10\",\n        \"mikey179/vfsstream\": \"^1.6.10\",\n        \"phpstan/phpstan\": \"^1\",\n        \"phpstan/phpstan-beberlei-assert\": \"^1\",\n        \"thecodingmachine/phpstan-strict-rules\": \"^1\",\n        \"friendsofphp/php-cs-fixer\": \"^3.0\",\n        \"phpstan/phpstan-phpunit\": \"^1\",\n        \"phpstan/extension-installer\": \"^1.1\",\n        \"editorconfig-checker/editorconfig-checker\": \"^10.3\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"VCR\\\\\": \"src/VCR/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"VCR\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"phpstan/extension-installer\": true\n        }\n    }\n}\n"
        },
        {
          "name": "docker-compose.yaml",
          "type": "blob",
          "size": 1.1796875,
          "content": "version: \"3.8\"\nservices:\n  workspace80:\n    tty: true\n    build:\n      context: resources/docker/workspace/8.0\n      args:\n        PUID: \"${PUID:-1000}\"\n        PGID: \"${PGID:-1000}\"\n    volumes:\n      - .:/var/www/html\n      - ~/.composer:/home/user/.composer\n  workspace81:\n    tty: true\n    build:\n      context: resources/docker/workspace/8.1\n      args:\n        PUID: \"${PUID:-1000}\"\n        PGID: \"${PGID:-1000}\"\n    volumes:\n      - .:/var/www/html\n      - ~/.composer:/home/user/.composer\n  workspace82:\n    tty: true\n    build:\n      context: resources/docker/workspace/8.2\n      args:\n        PUID: \"${PUID:-1000}\"\n        PGID: \"${PGID:-1000}\"\n    volumes:\n      - .:/var/www/html\n      - ~/.composer:/home/user/.composer\n  workspace83:\n    tty: true\n    build:\n      context: resources/docker/workspace/8.3\n      args:\n        PUID: \"${PUID:-1000}\"\n        PGID: \"${PGID:-1000}\"\n    volumes:\n      - .:/var/www/html\n      - ~/.composer:/home/user/.composer\n  workspace84:\n    tty: true\n    build:\n      context: resources/docker/workspace/8.4\n      args:\n        PUID: \"${PUID:-1000}\"\n        PGID: \"${PGID:-1000}\"\n    volumes:\n      - .:/var/www/html\n      - ~/.composer:/home/user/.composer\n\n\n\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpstan-baseline.neon",
          "type": "blob",
          "size": 3.64453125,
          "content": "parameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: \"#^Expression on left side of \\\\?\\\\? is not nullable\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/VCR/Util/HttpUtil.php\n\n\t\t-\n\t\t\tmessage: \"#^Method VCR\\\\\\\\Util\\\\\\\\HttpUtil\\\\:\\\\:parseHeaders\\\\(\\\\) should return array\\\\<string, string\\\\> but returns array\\\\<array\\\\<int, string\\\\>\\\\|string\\\\>\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/VCR/Util/HttpUtil.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$string of function substr expects string, string\\\\|false given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/VCR/Util/HttpUtil.php\n\n\t\t-\n\t\t\tmessage: \"#^Method VCR\\\\\\\\Util\\\\\\\\SoapClient\\\\:\\\\:realDoRequest\\\\(\\\\) should return string but returns string\\\\|null\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/VCR/Util/SoapClient.php\n\n\t\t-\n\t\t\tmessage: \"#^Offset 'uri' does not exist on array\\\\{timed_out\\\\: bool, blocked\\\\: bool, eof\\\\: bool, unread_bytes\\\\: int, stream_type\\\\: string, wrapper_type\\\\: string, wrapper_data\\\\: mixed, mode\\\\: string, \\\\.\\\\.\\\\.\\\\}\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/VCR/Util/StreamProcessor.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#2 \\\\$length of function fread expects int\\\\<1, max\\\\>, int given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/VCR/Util/StreamProcessor.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#2 \\\\$size of function ftruncate expects int\\\\<0, max\\\\>, int given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/VCR/Util/StreamProcessor.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#3 \\\\$microseconds of function stream_set_timeout expects int, int\\\\|null given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/VCR/Util/StreamProcessor.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method record\\\\(\\\\) on VCR\\\\\\\\Cassette\\\\|null\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/VCR/Videorecorder.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#3 \\\\$cassette of class VCR\\\\\\\\Event\\\\\\\\BeforeRecordEvent constructor expects VCR\\\\\\\\Cassette, VCR\\\\\\\\Cassette\\\\|null given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/VCR/Videorecorder.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method toArray\\\\(\\\\) on VCR\\\\\\\\Response\\\\|null\\\\.$#\"\n\t\t\tcount: 5\n\t\t\tpath: tests/Unit/CassetteTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to method PHPUnit\\\\\\\\Framework\\\\\\\\Assert\\\\:\\\\:assertCount\\\\(\\\\) with arguments 22, array\\\\{url\\\\: string, content_type\\\\: string\\\\|null, http_code\\\\: int, header_size\\\\: int, request_size\\\\: int, filetime\\\\: int, ssl_verify_result\\\\: int, redirect_count\\\\: int, \\\\.\\\\.\\\\.\\\\} and 'curl_getinfo\\\\(\\\\)…' will always evaluate to false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/LibraryHooks/CurlHookTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#2 \\\\$requestMatchers of method VCR\\\\\\\\Request\\\\:\\\\:matches\\\\(\\\\) expects array\\\\<callable\\\\(\\\\)\\\\: mixed\\\\>, array\\\\{array\\\\{'some', 'method'\\\\}\\\\} given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/RequestTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$stream of function fclose expects resource, resource\\\\|false given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/Util/StreamProcessorTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$stream of function stream_set_blocking expects resource, resource\\\\|false given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/Util/StreamProcessorTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$stream of function stream_set_read_buffer expects resource, resource\\\\|false given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/Util/StreamProcessorTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$stream of function stream_set_timeout expects resource, resource\\\\|false given\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: tests/Unit/Util/StreamProcessorTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$stream of function stream_set_write_buffer expects resource, resource\\\\|false given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/Util/StreamProcessorTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method Symfony\\\\\\\\Contracts\\\\\\\\EventDispatcher\\\\\\\\EventDispatcherInterface\\\\:\\\\:addListener\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/VCRTest.php\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.08203125,
          "content": "includes:\n\t- phpstan-baseline.neon\n\nparameters:\n\tlevel: 8\n\tpaths:\n\t\t- src\n\t\t- tests\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.6923828125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\" backupGlobals=\"false\" convertErrorsToExceptions=\"true\" convertNoticesToExceptions=\"true\" convertWarningsToExceptions=\"true\" colors=\"true\" bootstrap=\"tests/bootstrap.php\">\n  <coverage processUncoveredFiles=\"true\">\n    <include>\n      <directory suffix=\".php\">src</directory>\n    </include>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"Unit\">\n      <directory>./tests/Unit</directory>\n    </testsuite>\n    <testsuite name=\"Integration\">\n      <directory>./tests/Integration</directory>\n    </testsuite>\n  </testsuites>\n</phpunit>\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}