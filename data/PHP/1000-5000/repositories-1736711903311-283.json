{
  "metadata": {
    "timestamp": 1736711903311,
    "page": 283,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "symfony/validator",
      "stars": 2652,
      "defaultBranch": "7.2",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1220703125,
          "content": "/Tests export-ignore\n/phpunit.xml.dist export-ignore\n/Resources/bin/sync-iban-formats.php export-ignore\n/.git* export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "vendor/\ncomposer.lock\nphpunit.xml\n"
        },
        {
          "name": "Attribute",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 23.06640625,
          "content": "CHANGELOG\n=========\n\n7.2\n---\n\n * `IbanValidator` accepts IBANs containing non-breaking and narrow non-breaking spaces\n * Make `PasswordStrengthValidator::estimateStrength()` public\n * Add the `Yaml` constraint for validating YAML content\n * Add `errorPath` to Unique constraint\n * Add the `format` option to the `Ulid` constraint to allow accepting different ULID formats\n * Add the `WordCount` constraint\n * Add the `Week` constraint\n * Add `CompoundConstraintTestCase` to ease testing Compound Constraints\n * Add context variable to `WhenValidator`\n\n7.1\n---\n\n * Deprecate not passing a value for the `requireTld` option to the `Url` constraint (the default value will become `true` in 8.0)\n * Add the calculated strength to violations in `PasswordStrengthValidator`\n * Add support for `Stringable` values when using the `Cidr`, `CssColor`, `ExpressionSyntax` and `PasswordStrength` constraints\n * Add `MacAddress` constraint\n * Add `*_NO_PUBLIC`, `*_ONLY_PRIVATE` and `*_ONLY_RESERVED` versions to `Ip` constraint\n * Possibility to use all `Ip` constraint versions for `Cidr` constraint\n * Add `list` and `associative_array` types to `Type` constraint\n * Add the `Charset` constraint\n * Add the `requireTld` option to the `Url` constraint\n * Deprecate `Bic::INVALID_BANK_CODE_ERROR`\n\n7.0\n---\n\n * Add methods `getConstraint()`, `getCause()` and `__toString()` to `ConstraintViolationInterface`\n * Add method `__toString()` to `ConstraintViolationListInterface`\n * Add method `disableTranslation()` to `ConstraintViolationBuilderInterface`\n * Remove static property `$errorNames` from all constraints, use const `ERROR_NAMES` instead\n * Remove static property `$versions` from the `Ip` constraint, use the `VERSIONS` constant instead\n * Remove `VALIDATION_MODE_LOOSE` from `Email` constraint, use `VALIDATION_MODE_HTML5` instead\n * Remove constraint `ExpressionLanguageSyntax`, use `ExpressionSyntax` instead\n * Remove Doctrine annotations support in favor of native attributes\n * Remove the annotation reader parameter from the constructor signature of `AnnotationLoader`\n * Remove `ValidatorBuilder::setDoctrineAnnotationReader()`\n * Remove `ValidatorBuilder::addDefaultDoctrineAnnotationReader()`\n * Remove `ValidatorBuilder::enableAnnotationMapping()`, use `ValidatorBuilder::enableAttributeMapping()` instead\n * Remove `ValidatorBuilder::disableAnnotationMapping()`, use `ValidatorBuilder::disableAttributeMapping()` instead\n * Remove `AnnotationLoader`, use `AttributeLoader` instead\n\n6.4\n---\n\n * Add `is_valid` function to the `Expression` constraint, its behavior is the same as `ValidatorInterface::validate`\n * Allow single integer for the `versions` option of the `Uuid` constraint\n * Allow single constraint to be passed to the `constraints` option of the `When` constraint\n * Deprecate Doctrine annotations support in favor of native attributes\n * Deprecate `ValidatorBuilder::setDoctrineAnnotationReader()`\n * Deprecate `ValidatorBuilder::addDefaultDoctrineAnnotationReader()`\n * Add `number`, `finite-number` and `finite-float` types to `Type` constraint\n * Add the `withSeconds` option to the `Time` constraint that allows to pass time without seconds\n * Deprecate `ValidatorBuilder::enableAnnotationMapping()`, use `ValidatorBuilder::enableAttributeMapping()` instead\n * Deprecate `ValidatorBuilder::disableAnnotationMapping()`, use `ValidatorBuilder::disableAttributeMapping()` instead\n * Deprecate `AnnotationLoader`, use `AttributeLoader` instead\n * Add `GroupProviderInterface` to implement validation group providers outside the underlying class\n\n6.3\n---\n\n * Add method `getConstraint()` to `ConstraintViolationInterface`\n * Add `Uuid::TIME_BASED_VERSIONS` to match that a UUID being validated embeds a timestamp\n * Add the `pattern` parameter in violations of the `Regex` constraint\n * Add a `NoSuspiciousCharacters` constraint to validate a string is not a spoofing attempt\n * Add a `PasswordStrength` constraint to check the strength of a password\n * Add the `countUnit` option to the `Length` constraint to allow counting the string length either by code points (like before, now the default setting `Length::COUNT_CODEPOINTS`), bytes (`Length::COUNT_BYTES`) or graphemes (`Length::COUNT_GRAPHEMES`)\n * Add the `filenameMaxLength` option to the `File` constraint\n * Add the `exclude` option to the `Cascade` constraint\n * Add the `value_length` parameter to `Length` constraint\n * Allow to disable the translation domain for `ConstraintViolationInterface` messages\n\n6.2\n---\n\n * Add option `Email::VALIDATION_MODE_HTML5_ALLOW_NO_TLD` with \"html5-allow-no-tld\" e-mail validation mode, to match with the W3C official specification\n * Add method `getCause()` to `ConstraintViolationInterface`\n * Add the `When` constraint and validator\n * Deprecate the \"loose\" e-mail validation mode, use \"html5\" instead\n * Add the `negate` option to the `Expression` constraint, to inverse the logic of the violation's creation\n * Add the `extensions` option to the `File` constraint as an alternative to `mimeTypes` which checks the mime type of the file, its extension, and the consistency between them\n * Add padding for enhanced privacy to the `NotCompromisedPasswordValidator`\n\n6.1\n---\n\n * Add the `fields` option to the `Unique` constraint, to define which collection keys should be checked for uniqueness\n * Deprecate `Constraint::$errorNames`, use `Constraint::ERROR_NAMES` instead\n * Deprecate constraint `ExpressionLanguageSyntax`, use `ExpressionSyntax` instead\n * Add method `__toString()` to `ConstraintViolationInterface` & `ConstraintViolationListInterface`\n * Allow creating constraints with required arguments\n * Add the `match` option to the `Choice` constraint\n\n6.0\n---\n\n * Remove the `allowEmptyString` option from the `Length` constraint\n * Remove the `NumberConstraintTrait` trait\n * `ValidatorBuilder::enableAnnotationMapping()` does not accept a Doctrine annotation reader anymore\n * `ValidatorBuilder::enableAnnotationMapping()` won't automatically setup a Doctrine annotation reader anymore\n\n5.4\n---\n\n * Add a `Cidr` constraint to validate CIDR notations\n * Add a `CssColor` constraint to validate CSS colors\n * Add support for `ConstraintViolationList::createFromMessage()`\n * Add error's uid to `Count` and `Length` constraints with \"exactly\" option enabled\n\n5.3\n---\n\n * Add the `normalizer` option to the `Unique` constraint\n * Add `Validation::createIsValidCallable()` that returns true/false instead of throwing exceptions\n\n5.2.0\n-----\n\n * added a `Cascade` constraint to ease validating nested typed object properties\n * deprecated the `allowEmptyString` option of the `Length` constraint\n\n   Before:\n\n   ```php\n   use Symfony\\Component\\Validator\\Constraints as Assert;\n\n   /**\n    * @Assert\\Length(min=5, allowEmptyString=true)\n    */\n   ```\n\n   After:\n\n   ```php\n   use Symfony\\Component\\Validator\\Constraints as Assert;\n\n   /**\n    * @Assert\\AtLeastOneOf({\n    *     @Assert\\Blank(),\n    *     @Assert\\Length(min=5)\n    * })\n    */\n   ```\n * added the `Isin` constraint and validator\n * added the `ULID` constraint and validator\n * added support for UUIDv6 in `Uuid` constraint\n * enabled the validator to load constraints from PHP attributes\n * deprecated the `NumberConstraintTrait` trait\n * deprecated setting or creating a Doctrine annotation reader via `ValidatorBuilder::enableAnnotationMapping()`, pass `true` as first parameter and additionally call `setDoctrineAnnotationReader()` or `addDefaultDoctrineAnnotationReader()` to set up the annotation reader\n\n5.1.0\n-----\n\n * Add `AtLeastOneOf` constraint that is considered to be valid if at least one of the nested constraints is valid\n * added the `Hostname` constraint and validator\n * added the `alpha3` option to the `Country` and `Language` constraints\n * allow to define a reusable set of constraints by extending the `Compound` constraint\n * added `Sequentially` constraint, to sequentially validate a set of constraints (any violation raised will prevent further validation of the nested constraints)\n * added the `divisibleBy` option to the `Count` constraint\n * added the `ExpressionLanguageSyntax` constraint\n\n5.0.0\n-----\n\n * an `ExpressionLanguage` instance or null must be passed as the first argument of `ExpressionValidator::__construct()`\n * removed the `checkDNS` and `dnsMessage` options of the `Url` constraint\n * removed the `checkMX`, `checkHost` and `strict` options of the `Email` constraint\n * removed support for validating instances of `\\DateTimeInterface` in `DateTimeValidator`, `DateValidator` and `TimeValidator`\n * removed support for using the `Bic`, `Country`, `Currency`, `Language` and `Locale` constraints without `symfony/intl`\n * removed support for using the `Email` constraint without `egulias/email-validator`\n * removed support for using the `Expression` constraint without `symfony/expression-language`\n * changed default value of `canonicalize` option of `Locale` constraint to `true`\n * removed `ValidatorBuilderInterface`\n * passing a null message when instantiating a `ConstraintViolation` is not allowed\n * changed the default value of `Length::$allowEmptyString` to `false` and made it optional\n * removed `Symfony\\Component\\Validator\\Mapping\\Cache\\CacheInterface` in favor of PSR-6.\n * removed `ValidatorBuilder::setMetadataCache`, use `ValidatorBuilder::setMappingCache` instead.\n\n4.4.0\n-----\n\n * [BC BREAK] using null as `$classValidatorRegexp` value in `PropertyInfoLoader::__construct` will not enable auto-mapping for all classes anymore, use `'{.*}'` instead.\n * added `EnableAutoMapping` and `DisableAutoMapping` constraints to enable or disable auto mapping for class or a property\n * using anything else than a `string` as the code of a `ConstraintViolation` is deprecated, a `string` type-hint will\n   be added to the constructor of the `ConstraintViolation` class and to the `ConstraintViolationBuilder::setCode()`\n   method in 5.0\n * deprecated passing an `ExpressionLanguage` instance as the second argument of `ExpressionValidator::__construct()`. Pass it as the first argument instead.\n * added the `compared_value_path` parameter in violations when using any\n   comparison constraint with the `propertyPath` option.\n * added support for checking an array of types in `TypeValidator`\n * added a new `allowEmptyString` option to the `Length` constraint to allow rejecting empty strings when `min` is set, by setting it to `false`.\n * Added new `minPropertyPath` and `maxPropertyPath` options\n   to `Range` constraint in order to get the value to compare\n   from an array or object\n * added the `min_limit_path` and `max_limit_path` parameters in violations when using\n   `Range` constraint with respectively the `minPropertyPath` and\n   `maxPropertyPath` options\n * added a new `notInRangeMessage` option to the `Range` constraint that will\n   be used in the violation builder when both `min` and `max` are not null\n * added ability to use stringable objects as violation messages\n * Overriding the methods `ConstraintValidatorTestCase::setUp()` and `ConstraintValidatorTestCase::tearDown()` without the `void` return-type is deprecated.\n * deprecated `Symfony\\Component\\Validator\\Mapping\\Cache\\CacheInterface` in favor of PSR-6.\n * deprecated `ValidatorBuilder::setMetadataCache`, use `ValidatorBuilder::setMappingCache` instead.\n * Marked the `ValidatorDataCollector` class as `@final`.\n\n4.3.0\n-----\n\n * added `Timezone` constraint\n * added `NotCompromisedPassword` constraint\n * added options `iban` and `ibanPropertyPath` to Bic constraint\n * added UATP cards support to `CardSchemeValidator`\n * added option `allowNull` to NotBlank constraint\n * added `Json` constraint\n * added `Unique` constraint\n * added a new `normalizer` option to the string constraints and to the `NotBlank` constraint\n * added `Positive` constraint\n * added `PositiveOrZero` constraint\n * added `Negative` constraint\n * added `NegativeOrZero` constraint\n\n4.2.0\n-----\n\n * added a new `UnexpectedValueException` that can be thrown by constraint validators, these exceptions are caught by\n   the validator and are converted into constraint violations\n * added `DivisibleBy` constraint\n * decoupled from `symfony/translation` by using `Symfony\\Contracts\\Translation\\TranslatorInterface`\n * deprecated `ValidatorBuilderInterface`\n * made `ValidatorBuilder::setTranslator()` final\n * marked `format` the default option in `DateTime` constraint\n * deprecated validating instances of `\\DateTimeInterface` in `DateTimeValidator`, `DateValidator` and `TimeValidator`.\n * deprecated using the `Bic`, `Country`, `Currency`, `Language` and `Locale` constraints without `symfony/intl`\n * deprecated using the `Email` constraint without `egulias/email-validator`\n * deprecated using the `Expression` constraint without `symfony/expression-language`\n\n4.1.0\n-----\n\n * Deprecated the `checkDNS` and `dnsMessage` options of the `Url` constraint.\n * added a `values` option to the `Expression` constraint\n * Deprecated use of `Locale` constraint without setting `true` at \"canonicalize\" option, which will be the default value in 5.0\n\n4.0.0\n-----\n\n * Setting the `strict` option of the `Choice` constraint to anything but `true`\n   is not supported anymore.\n * removed the `DateTimeValidator::PATTERN` constant\n * removed the `AbstractConstraintValidatorTest` class\n * removed support for setting the `checkDNS` option of the `Url` constraint to `true`\n\n3.4.0\n-----\n\n * added support for validation groups to the `Valid` constraint\n * not setting the `strict` option of the `Choice` constraint to `true` is\n   deprecated and will throw an exception in Symfony 4.0\n * setting the `checkDNS` option of the `Url` constraint to `true` is deprecated in favor of\n   the `Url::CHECK_DNS_TYPE_*` constants values and will throw an exception in Symfony 4.0\n * added min/max amount of pixels check to `Image` constraint via `minPixels` and `maxPixels`\n * added a new \"propertyPath\" option to comparison constraints in order to get the value to compare from an array or object\n\n3.3.0\n-----\n\n * added `AddValidatorInitializersPass`\n * added `AddConstraintValidatorsPass`\n * added `ContainerConstraintValidatorFactory`\n\n3.2.0\n-----\n\n * deprecated `Tests\\Constraints\\AbstractConstraintValidatorTest` in favor of `Test\\ConstraintValidatorTestCase`\n * added support for PHP constants in YAML configuration files\n\n3.1.0\n-----\n\n * deprecated `DateTimeValidator::PATTERN` constant\n * added a `format` option to the `DateTime` constraint\n\n2.8.0\n-----\n\n * added the BIC (SWIFT-Code) validator\n\n2.7.0\n-----\n\n * deprecated `DefaultTranslator` in favor of `Symfony\\Component\\Translation\\IdentityTranslator`\n * deprecated PHP7-incompatible constraints (Null, True, False) and related validators (NullValidator, TrueValidator, FalseValidator) in favor of their `Is`-prefixed equivalent\n\n2.6.0\n-----\n\n * [BC BREAK] `FileValidator` disallow empty files\n * [BC BREAK] `UserPasswordValidator` source message change\n * [BC BREAK] added internal `ExecutionContextInterface::setConstraint()`\n * added `ConstraintViolation::getConstraint()`\n * [BC BREAK] The `ExpressionValidator` will now evaluate the Expression even when the property value is null or an empty string\n * deprecated `ClassMetadata::hasMemberMetadatas()`\n * deprecated `ClassMetadata::getMemberMetadatas()`\n * deprecated `ClassMetadata::addMemberMetadata()`\n * [BC BREAK] added `Mapping\\MetadataInterface::getConstraints()`\n * added generic \"payload\" option to all constraints for attaching domain-specific data\n * [BC BREAK] added `ConstraintViolationBuilderInterface::setCause()`\n\n2.5.0\n-----\n\n * deprecated `ApcCache` in favor of `DoctrineCache`\n * added `DoctrineCache` to adapt any Doctrine cache\n * `GroupSequence` now implements `ArrayAccess`, `Countable` and `Traversable`\n * [BC BREAK] changed `ClassMetadata::getGroupSequence()` to return a `GroupSequence` instance instead of an array\n * `Callback` can now be put onto properties (useful when you pass a closure to the constraint)\n * deprecated `ClassBasedInterface`\n * deprecated `MetadataInterface`\n * deprecated `PropertyMetadataInterface`\n * deprecated `PropertyMetadataContainerInterface`\n * deprecated `Mapping\\ElementMetadata`\n * added `Mapping\\MetadataInterface`\n * added `Mapping\\ClassMetadataInterface`\n * added `Mapping\\PropertyMetadataInterface`\n * added `Mapping\\GenericMetadata`\n * added `Mapping\\CascadingStrategy`\n * added `Mapping\\TraversalStrategy`\n * deprecated `Mapping\\ClassMetadata::accept()`\n * deprecated `Mapping\\MemberMetadata::accept()`\n * removed array type hint of `Mapping\\ClassMetadata::setGroupSequence()`\n * deprecated `MetadataFactoryInterface`\n * deprecated `Mapping\\BlackholeMetadataFactory`\n * deprecated `Mapping\\ClassMetadataFactory`\n * added `Mapping\\Factory\\MetadataFactoryInterface`\n * added `Mapping\\Factory\\BlackHoleMetadataFactory`\n * added `Mapping\\Factory\\LazyLoadingMetadataFactory`\n * deprecated `ExecutionContextInterface`\n * deprecated `ExecutionContext`\n * deprecated `GlobalExecutionContextInterface`\n * added `Context\\ExecutionContextInterface`\n * added `Context\\ExecutionContext`\n * added `Context\\ExecutionContextFactoryInterface`\n * added `Context\\ExecutionContextFactory`\n * deprecated `ValidatorInterface`\n * deprecated `Validator`\n * deprecated `ValidationVisitorInterface`\n * deprecated `ValidationVisitor`\n * added `Validator\\ValidatorInterface`\n * added `Validator\\RecursiveValidator`\n * added `Validator\\ContextualValidatorInterface`\n * added `Validator\\RecursiveContextualValidator`\n * added `Violation\\ConstraintViolationBuilderInterface`\n * added `Violation\\ConstraintViolationBuilder`\n * added `ConstraintViolation::getParameters()`\n * added `ConstraintViolation::getPlural()`\n * added `Constraints\\Traverse`\n * deprecated `$deep` property in `Constraints\\Valid`\n * added `ValidatorBuilderInterface::setApiVersion()`\n * added `Validation::API_VERSION_2_4`\n * added `Validation::API_VERSION_2_5`\n * added `Exception\\OutOfBoundsException`\n * added `Exception\\UnsupportedMetadataException`\n * made `Exception\\ValidatorException` extend `Exception\\RuntimeException`\n * added `Util\\PropertyPath`\n * made the PropertyAccess component an optional dependency\n * deprecated `ValidatorBuilder::setPropertyAccessor()`\n * deprecated `validate` and `validateValue` on `Validator\\Context\\ExecutionContext` use `getValidator()` together with `inContext()` instead\n\n2.4.0\n-----\n\n * added a constraint the uses the expression language\n * added `minRatio`, `maxRatio`, `allowSquare`, `allowLandscape`, and `allowPortrait` to Image validator\n\n2.3.29\n------\n\n * fixed compatibility with PHP7 and up by introducing new constraints (IsNull, IsTrue, IsFalse) and related validators (IsNullValidator, IsTrueValidator, IsFalseValidator)\n\n2.3.0\n-----\n\n * added the ISBN, ISSN, and IBAN validators\n * copied the constraints `Optional` and `Required` to the\n   `Symfony\\Component\\Validator\\Constraints\\` namespace and deprecated the original\n   classes.\n * added comparison validators (EqualTo, NotEqualTo, LessThan, LessThanOrEqualTo, GreaterThan, GreaterThanOrEqualTo, IdenticalTo, NotIdenticalTo)\n\n2.2.0\n-----\n\n * added a CardScheme validator\n * added a Luhn validator\n * moved @api-tags from `Validator` to `ValidatorInterface`\n * moved @api-tags from `ConstraintViolation` to the new `ConstraintViolationInterface`\n * moved @api-tags from `ConstraintViolationList` to the new `ConstraintViolationListInterface`\n * moved @api-tags from `ExecutionContext` to the new `ExecutionContextInterface`\n * [BC BREAK] `ConstraintValidatorInterface::initialize` is now type hinted against `ExecutionContextInterface` instead of `ExecutionContext`\n * [BC BREAK] changed the visibility of the properties in `Validator` from protected to private\n * deprecated `ClassMetadataFactoryInterface` in favor of the new `MetadataFactoryInterface`\n * deprecated `ClassMetadataFactory::getClassMetadata` in favor of `getMetadataFor`\n * created `MetadataInterface`, `PropertyMetadataInterface`, `ClassBasedInterface` and `PropertyMetadataContainerInterface`\n * deprecated `GraphWalker` in favor of the new `ValidationVisitorInterface`\n * deprecated `ExecutionContext::addViolationAtPath`\n * deprecated `ExecutionContext::addViolationAtSubPath` in favor of `ExecutionContextInterface::addViolationAt`\n * deprecated `ExecutionContext::getCurrentClass` in favor of `ExecutionContextInterface::getClassName`\n * deprecated `ExecutionContext::getCurrentProperty` in favor of `ExecutionContextInterface::getPropertyName`\n * deprecated `ExecutionContext::getCurrentValue` in favor of `ExecutionContextInterface::getValue`\n * deprecated `ExecutionContext::getGraphWalker` in favor of `ExecutionContextInterface::validate` and `ExecutionContextInterface::validateValue`\n * improved `ValidatorInterface::validateValue` to accept arrays of constraints\n * changed `ValidatorInterface::getMetadataFactory` to return a `MetadataFactoryInterface` instead of a `ClassMetadataFactoryInterface`\n * removed `ClassMetadataFactoryInterface` type hint from `ValidatorBuilderInterface::setMetadataFactory`.\n   As of Symfony 2.3, this method will be typed against `MetadataFactoryInterface` instead.\n * [BC BREAK] the switches `traverse` and `deep` in the `Valid` constraint and in `GraphWalker::walkReference`\n   are ignored for arrays now. Arrays are always traversed recursively.\n * added dependency to Translation component\n * violation messages are now translated with a TranslatorInterface implementation\n * [BC BREAK] inserted argument `$message` in the constructor of `ConstraintViolation`\n * [BC BREAK] inserted arguments `$translator` and `$translationDomain` in the constructor of `ExecutionContext`\n * [BC BREAK] inserted arguments `$translator` and `$translationDomain` in the constructor of `GraphWalker`\n * [BC BREAK] inserted arguments `$translator` and `$translationDomain` in the constructor of `ValidationVisitor`\n * [BC BREAK] inserted arguments `$translator` and `$translationDomain` in the constructor of `Validator`\n * [BC BREAK] added `setTranslator()` and `setTranslationDomain()` to `ValidatorBuilderInterface`\n * improved the Validator to support pluralized messages by default\n * [BC BREAK] changed the source of all pluralized messages in the translation files to the pluralized version\n * added ExceptionInterface, BadMethodCallException and InvalidArgumentException\n\n2.1.0\n-----\n\n * added support for `ctype_*` assertions in `TypeValidator`\n * improved the ImageValidator with min width, max width, min height, and max height constraints\n * added support for MIME with wildcard in FileValidator\n * changed Collection validator to add \"missing\" and \"extra\" errors to\n   individual fields\n * changed default value for `extraFieldsMessage` and `missingFieldsMessage`\n   in Collection constraint\n * made ExecutionContext immutable\n * deprecated Constraint methods `setMessage`, `getMessageTemplate` and\n   `getMessageParameters`\n * added support for dynamic group sequences with the GroupSequenceProvider pattern\n * [BC BREAK] ConstraintValidatorInterface method `isValid` has been renamed to\n   `validate`, its return value was dropped. ConstraintValidator still contains\n   `isValid` for BC\n * [BC BREAK] collections in fields annotated with `Valid` are not traversed\n   recursively anymore by default. `Valid` contains a new property `deep`\n   which enables the BC behavior.\n * added Count constraint\n * added Length constraint\n * added Range constraint\n * deprecated the Min and Max constraints\n * deprecated the MinLength and MaxLength constraints\n * added Validation and ValidatorBuilderInterface\n * deprecated ValidatorContext, ValidatorContextInterface and ValidatorFactory\n"
        },
        {
          "name": "Command",
          "type": "tree",
          "content": null
        },
        {
          "name": "Constraint.php",
          "type": "blob",
          "size": 9.8154296875,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Validator;\n\nuse Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException;\nuse Symfony\\Component\\Validator\\Exception\\InvalidArgumentException;\nuse Symfony\\Component\\Validator\\Exception\\InvalidOptionsException;\nuse Symfony\\Component\\Validator\\Exception\\MissingOptionsException;\n\n/**\n * Contains the properties of a constraint definition.\n *\n * A constraint can be defined on a class, a property or a getter method.\n * The Constraint class encapsulates all the configuration required for\n * validating this class, property or getter result successfully.\n *\n * Constraint instances are immutable and serializable.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n */\nabstract class Constraint\n{\n    /**\n     * The name of the group given to all constraints with no explicit group.\n     */\n    public const DEFAULT_GROUP = 'Default';\n\n    /**\n     * Marks a constraint that can be put onto classes.\n     */\n    public const CLASS_CONSTRAINT = 'class';\n\n    /**\n     * Marks a constraint that can be put onto properties.\n     */\n    public const PROPERTY_CONSTRAINT = 'property';\n\n    /**\n     * Maps error codes to the names of their constants.\n     *\n     * @var array<string, string>\n     */\n    protected const ERROR_NAMES = [];\n\n    /**\n     * Domain-specific data attached to a constraint.\n     */\n    public mixed $payload;\n\n    /**\n     * The groups that the constraint belongs to.\n     *\n     * @var string[]\n     */\n    public ?array $groups = null;\n\n    /**\n     * Returns the name of the given error code.\n     *\n     * @throws InvalidArgumentException If the error code does not exist\n     */\n    public static function getErrorName(string $errorCode): string\n    {\n        if (isset(static::ERROR_NAMES[$errorCode])) {\n            return static::ERROR_NAMES[$errorCode];\n        }\n\n        throw new InvalidArgumentException(\\sprintf('The error code \"%s\" does not exist for constraint of type \"%s\".', $errorCode, static::class));\n    }\n\n    /**\n     * Initializes the constraint with options.\n     *\n     * You should pass an associative array. The keys should be the names of\n     * existing properties in this class. The values should be the value for these\n     * properties.\n     *\n     * Alternatively you can override the method getDefaultOption() to return the\n     * name of an existing property. If no associative array is passed, this\n     * property is set instead.\n     *\n     * You can force that certain options are set by overriding\n     * getRequiredOptions() to return the names of these options. If any\n     * option is not set here, an exception is thrown.\n     *\n     * @param mixed    $options The options (as associative array)\n     *                          or the value for the default\n     *                          option (any other type)\n     * @param string[] $groups  An array of validation groups\n     * @param mixed    $payload Domain-specific data attached to a constraint\n     *\n     * @throws InvalidOptionsException       When you pass the names of non-existing\n     *                                       options\n     * @throws MissingOptionsException       When you don't pass any of the options\n     *                                       returned by getRequiredOptions()\n     * @throws ConstraintDefinitionException When you don't pass an associative\n     *                                       array, but getDefaultOption() returns\n     *                                       null\n     */\n    public function __construct(mixed $options = null, ?array $groups = null, mixed $payload = null)\n    {\n        unset($this->groups); // enable lazy initialization\n\n        $options = $this->normalizeOptions($options);\n        if (null !== $groups) {\n            $options['groups'] = $groups;\n        }\n        $options['payload'] = $payload ?? $options['payload'] ?? null;\n\n        foreach ($options as $name => $value) {\n            $this->$name = $value;\n        }\n    }\n\n    /**\n     * @return array<string, mixed>\n     */\n    protected function normalizeOptions(mixed $options): array\n    {\n        $normalizedOptions = [];\n        $defaultOption = $this->getDefaultOption();\n        $invalidOptions = [];\n        $missingOptions = array_flip($this->getRequiredOptions());\n        $knownOptions = get_class_vars(static::class);\n\n        if (\\is_array($options) && isset($options['value']) && !property_exists($this, 'value')) {\n            if (null === $defaultOption) {\n                throw new ConstraintDefinitionException(\\sprintf('No default option is configured for constraint \"%s\".', static::class));\n            }\n\n            $options[$defaultOption] = $options['value'];\n            unset($options['value']);\n        }\n\n        if (\\is_array($options)) {\n            reset($options);\n        }\n        if ($options && \\is_array($options) && \\is_string(key($options))) {\n            foreach ($options as $option => $value) {\n                if (\\array_key_exists($option, $knownOptions)) {\n                    $normalizedOptions[$option] = $value;\n                    unset($missingOptions[$option]);\n                } else {\n                    $invalidOptions[] = $option;\n                }\n            }\n        } elseif (null !== $options && !(\\is_array($options) && 0 === \\count($options))) {\n            if (null === $defaultOption) {\n                throw new ConstraintDefinitionException(\\sprintf('No default option is configured for constraint \"%s\".', static::class));\n            }\n\n            if (\\array_key_exists($defaultOption, $knownOptions)) {\n                $normalizedOptions[$defaultOption] = $options;\n                unset($missingOptions[$defaultOption]);\n            } else {\n                $invalidOptions[] = $defaultOption;\n            }\n        }\n\n        if (\\count($invalidOptions) > 0) {\n            throw new InvalidOptionsException(\\sprintf('The options \"%s\" do not exist in constraint \"%s\".', implode('\", \"', $invalidOptions), static::class), $invalidOptions);\n        }\n\n        if (\\count($missingOptions) > 0) {\n            throw new MissingOptionsException(\\sprintf('The options \"%s\" must be set for constraint \"%s\".', implode('\", \"', array_keys($missingOptions)), static::class), array_keys($missingOptions));\n        }\n\n        return $normalizedOptions;\n    }\n\n    /**\n     * Sets the value of a lazily initialized option.\n     *\n     * Corresponding properties are added to the object on first access. Hence\n     * this method will be called at most once per constraint instance and\n     * option name.\n     *\n     * @throws InvalidOptionsException If an invalid option name is given\n     */\n    public function __set(string $option, mixed $value): void\n    {\n        if ('groups' === $option) {\n            $this->groups = (array) $value;\n\n            return;\n        }\n\n        throw new InvalidOptionsException(\\sprintf('The option \"%s\" does not exist in constraint \"%s\".', $option, static::class), [$option]);\n    }\n\n    /**\n     * Returns the value of a lazily initialized option.\n     *\n     * Corresponding properties are added to the object on first access. Hence\n     * this method will be called at most once per constraint instance and\n     * option name.\n     *\n     * @throws InvalidOptionsException If an invalid option name is given\n     */\n    public function __get(string $option): mixed\n    {\n        if ('groups' === $option) {\n            $this->groups = [self::DEFAULT_GROUP];\n\n            return $this->groups;\n        }\n\n        throw new InvalidOptionsException(\\sprintf('The option \"%s\" does not exist in constraint \"%s\".', $option, static::class), [$option]);\n    }\n\n    public function __isset(string $option): bool\n    {\n        return 'groups' === $option;\n    }\n\n    /**\n     * Adds the given group if this constraint is in the Default group.\n     */\n    public function addImplicitGroupName(string $group): void\n    {\n        if (null === $this->groups && \\array_key_exists('groups', (array) $this)) {\n            throw new \\LogicException(\\sprintf('\"%s::$groups\" is set to null. Did you forget to call \"%s::__construct()\"?', static::class, self::class));\n        }\n\n        if (\\in_array(self::DEFAULT_GROUP, $this->groups) && !\\in_array($group, $this->groups, true)) {\n            $this->groups[] = $group;\n        }\n    }\n\n    /**\n     * Returns the name of the default option.\n     *\n     * Override this method to define a default option.\n     *\n     * @see __construct()\n     */\n    public function getDefaultOption(): ?string\n    {\n        return null;\n    }\n\n    /**\n     * Returns the name of the required options.\n     *\n     * Override this method if you want to define required options.\n     *\n     * @return string[]\n     *\n     * @see __construct()\n     */\n    public function getRequiredOptions(): array\n    {\n        return [];\n    }\n\n    /**\n     * Returns the name of the class that validates this constraint.\n     *\n     * By default, this is the fully qualified name of the constraint class\n     * suffixed with \"Validator\". You can override this method to change that\n     * behavior.\n     */\n    public function validatedBy(): string\n    {\n        return static::class.'Validator';\n    }\n\n    /**\n     * Returns whether the constraint can be put onto classes, properties or\n     * both.\n     *\n     * @return self::CLASS_CONSTRAINT|self::PROPERTY_CONSTRAINT|array<self::CLASS_CONSTRAINT|self::PROPERTY_CONSTRAINT>\n     */\n    public function getTargets(): string|array\n    {\n        return self::PROPERTY_CONSTRAINT;\n    }\n\n    /**\n     * Optimizes the serialized value to minimize storage space.\n     *\n     * @internal\n     */\n    public function __sleep(): array\n    {\n        // Initialize \"groups\" option if it is not set\n        $this->groups;\n\n        return array_keys(get_object_vars($this));\n    }\n}\n"
        },
        {
          "name": "ConstraintValidator.php",
          "type": "blob",
          "size": 4.4638671875,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Validator;\n\nuse Symfony\\Component\\Validator\\Context\\ExecutionContextInterface;\n\n/**\n * Base class for constraint validators.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n */\nabstract class ConstraintValidator implements ConstraintValidatorInterface\n{\n    /**\n     * Whether to format {@link \\DateTime} objects, either with the {@link \\IntlDateFormatter}\n     * (if it is available) or as RFC-3339 dates (\"Y-m-d H:i:s\").\n     */\n    public const PRETTY_DATE = 1;\n\n    /**\n     * Whether to cast objects with a \"__toString()\" method to strings.\n     */\n    public const OBJECT_TO_STRING = 2;\n\n    protected ExecutionContextInterface $context;\n\n    public function initialize(ExecutionContextInterface $context): void\n    {\n        $this->context = $context;\n    }\n\n    /**\n     * Returns a string representation of the type of the value.\n     *\n     * This method should be used if you pass the type of a value as\n     * message parameter to a constraint violation. Note that such\n     * parameters should usually not be included in messages aimed at\n     * non-technical people.\n     */\n    protected function formatTypeOf(mixed $value): string\n    {\n        return get_debug_type($value);\n    }\n\n    /**\n     * Returns a string representation of the value.\n     *\n     * This method returns the equivalent PHP tokens for most scalar types\n     * (i.e. \"false\" for false, \"1\" for 1 etc.). Strings are always wrapped\n     * in double quotes (\"). Objects, arrays and resources are formatted as\n     * \"object\", \"array\" and \"resource\". If the $format bitmask contains\n     * the PRETTY_DATE bit, then {@link \\DateTime} objects will be formatted\n     * with the {@link \\IntlDateFormatter}. If it is not available, they will be\n     * formatted as RFC-3339 dates (\"Y-m-d H:i:s\").\n     *\n     * Be careful when passing message parameters to a constraint violation\n     * that (may) contain objects, arrays or resources. These parameters\n     * should only be displayed for technical users. Non-technical users\n     * won't know what an \"object\", \"array\" or \"resource\" is and will be\n     * confused by the violation message.\n     *\n     * @param int $format A bitwise combination of the format constants in this class\n     */\n    protected function formatValue(mixed $value, int $format = 0): string\n    {\n        if (($format & self::PRETTY_DATE) && $value instanceof \\DateTimeInterface) {\n            if (class_exists(\\IntlDateFormatter::class)) {\n                $formatter = new \\IntlDateFormatter(\\Locale::getDefault(), \\IntlDateFormatter::MEDIUM, \\IntlDateFormatter::SHORT, 'UTC');\n\n                return $formatter->format(new \\DateTimeImmutable(\n                    $value->format('Y-m-d H:i:s.u'),\n                    new \\DateTimeZone('UTC')\n                ));\n            }\n\n            return $value->format('Y-m-d H:i:s');\n        }\n\n        if ($value instanceof \\UnitEnum) {\n            return $value->name;\n        }\n\n        if (\\is_object($value)) {\n            if (($format & self::OBJECT_TO_STRING) && $value instanceof \\Stringable) {\n                return $value->__toString();\n            }\n\n            return 'object';\n        }\n\n        if (\\is_array($value)) {\n            return 'array';\n        }\n\n        if (\\is_string($value)) {\n            return '\"'.$value.'\"';\n        }\n\n        if (\\is_resource($value)) {\n            return 'resource';\n        }\n\n        if (null === $value) {\n            return 'null';\n        }\n\n        if (false === $value) {\n            return 'false';\n        }\n\n        if (true === $value) {\n            return 'true';\n        }\n\n        return (string) $value;\n    }\n\n    /**\n     * Returns a string representation of a list of values.\n     *\n     * Each of the values is converted to a string using\n     * {@link formatValue()}. The values are then concatenated with commas.\n     *\n     * @param array $values A list of values\n     * @param int   $format A bitwise combination of the format\n     *                      constants in this class\n     *\n     * @see formatValue()\n     */\n    protected function formatValues(array $values, int $format = 0): string\n    {\n        foreach ($values as $key => $value) {\n            $values[$key] = $this->formatValue($value, $format);\n        }\n\n        return implode(', ', $values);\n    }\n}\n"
        },
        {
          "name": "ConstraintValidatorFactory.php",
          "type": "blob",
          "size": 1.10546875,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Validator;\n\nuse Symfony\\Component\\Validator\\Constraints\\ExpressionValidator;\n\n/**\n * Default implementation of the ConstraintValidatorFactoryInterface.\n *\n * This enforces the convention that the validatedBy() method on any\n * Constraint will return the class name of the ConstraintValidator that\n * should validate the Constraint.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n */\nclass ConstraintValidatorFactory implements ConstraintValidatorFactoryInterface\n{\n    public function __construct(\n        protected array $validators = [],\n    ) {\n    }\n\n    public function getInstance(Constraint $constraint): ConstraintValidatorInterface\n    {\n        if ('validator.expression' === $name = $class = $constraint->validatedBy()) {\n            $class = ExpressionValidator::class;\n        }\n\n        return $this->validators[$name] ??= new $class();\n    }\n}\n"
        },
        {
          "name": "ConstraintValidatorFactoryInterface.php",
          "type": "blob",
          "size": 0.671875,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Validator;\n\n/**\n * Specifies an object able to return the correct ConstraintValidatorInterface\n * instance given a Constraint object.\n */\ninterface ConstraintValidatorFactoryInterface\n{\n    /**\n     * Given a Constraint, this returns the ConstraintValidatorInterface\n     * object that should be used to verify its validity.\n     */\n    public function getInstance(Constraint $constraint): ConstraintValidatorInterface;\n}\n"
        },
        {
          "name": "ConstraintValidatorInterface.php",
          "type": "blob",
          "size": 0.7421875,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Validator;\n\nuse Symfony\\Component\\Validator\\Context\\ExecutionContextInterface;\n\n/**\n * @author Bernhard Schussek <bschussek@gmail.com>\n */\ninterface ConstraintValidatorInterface\n{\n    /**\n     * Initializes the constraint validator.\n     *\n     * @return void\n     */\n    public function initialize(ExecutionContextInterface $context);\n\n    /**\n     * Checks if the passed value is valid.\n     *\n     * @return void\n     */\n    public function validate(mixed $value, Constraint $constraint);\n}\n"
        },
        {
          "name": "ConstraintViolation.php",
          "type": "blob",
          "size": 3.861328125,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Validator;\n\n/**\n * Default implementation of {@ConstraintViolationInterface}.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n */\nclass ConstraintViolation implements ConstraintViolationInterface\n{\n    /**\n     * Creates a new constraint violation.\n     *\n     * @param string|\\Stringable $message         The violation message as a string or a stringable object\n     * @param string|null        $messageTemplate The raw violation message\n     * @param array              $parameters      The parameters to substitute in the\n     *                                            raw violation message\n     * @param mixed              $root            The value originally passed to the\n     *                                            validator\n     * @param string|null        $propertyPath    The property path from the root\n     *                                            value to the invalid value\n     * @param mixed              $invalidValue    The invalid value that caused this\n     *                                            violation\n     * @param int|null           $plural          The number for determining the plural\n     *                                            form when translating the message\n     * @param string|null        $code            The error code of the violation\n     * @param Constraint|null    $constraint      The constraint whose validation\n     *                                            caused the violation\n     * @param mixed              $cause           The cause of the violation\n     */\n    public function __construct(\n        private string|\\Stringable $message,\n        private ?string $messageTemplate,\n        private array $parameters,\n        private mixed $root,\n        private ?string $propertyPath,\n        private mixed $invalidValue,\n        private ?int $plural = null,\n        private ?string $code = null,\n        private ?Constraint $constraint = null,\n        private mixed $cause = null,\n    ) {\n    }\n\n    public function __toString(): string\n    {\n        if (\\is_object($this->root)) {\n            $class = 'Object('.$this->root::class.')';\n        } elseif (\\is_array($this->root)) {\n            $class = 'Array';\n        } else {\n            $class = (string) $this->root;\n        }\n\n        $propertyPath = (string) $this->propertyPath;\n\n        if ('' !== $propertyPath && '[' !== $propertyPath[0] && '' !== $class) {\n            $class .= '.';\n        }\n\n        if (null !== ($code = $this->code) && '' !== $code) {\n            $code = ' (code '.$code.')';\n        }\n\n        return $class.$propertyPath.\":\\n    \".$this->getMessage().$code;\n    }\n\n    public function getMessageTemplate(): string\n    {\n        return (string) $this->messageTemplate;\n    }\n\n    public function getParameters(): array\n    {\n        return $this->parameters;\n    }\n\n    public function getPlural(): ?int\n    {\n        return $this->plural;\n    }\n\n    public function getMessage(): string|\\Stringable\n    {\n        return $this->message;\n    }\n\n    public function getRoot(): mixed\n    {\n        return $this->root;\n    }\n\n    public function getPropertyPath(): string\n    {\n        return (string) $this->propertyPath;\n    }\n\n    public function getInvalidValue(): mixed\n    {\n        return $this->invalidValue;\n    }\n\n    /**\n     * Returns the constraint whose validation caused the violation.\n     */\n    public function getConstraint(): ?Constraint\n    {\n        return $this->constraint;\n    }\n\n    /**\n     * Returns the cause of the violation.\n     */\n    public function getCause(): mixed\n    {\n        return $this->cause;\n    }\n\n    public function getCode(): ?string\n    {\n        return $this->code;\n    }\n}\n"
        },
        {
          "name": "ConstraintViolationInterface.php",
          "type": "blob",
          "size": 4.2900390625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Validator;\n\n/**\n * A violation of a constraint that happened during validation.\n *\n * For each constraint that fails during validation one or more violations are\n * created. The violations store the violation message, the path to the failing\n * element in the validation graph and the root element that was originally\n * passed to the validator. For example, take the following graph:\n *\n *     (Person)---(firstName: string)\n *          \\\n *       (address: Address)---(street: string)\n *\n * If the <tt>Person</tt> object is validated and validation fails for the\n * \"firstName\" property, the generated violation has the <tt>Person</tt>\n * instance as root and the property path \"firstName\". If validation fails\n * for the \"street\" property of the related <tt>Address</tt> instance, the root\n * element is still the person, but the property path is \"address.street\".\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n */\ninterface ConstraintViolationInterface\n{\n    /**\n     * Returns the violation message.\n     */\n    public function getMessage(): string|\\Stringable;\n\n    /**\n     * Returns the raw violation message.\n     *\n     * The raw violation message contains placeholders for the parameters\n     * returned by {@link getParameters}. Typically you'll pass the\n     * message template and parameters to a translation engine.\n     */\n    public function getMessageTemplate(): string;\n\n    /**\n     * Returns the parameters to be inserted into the raw violation message.\n     *\n     * @return array a possibly empty list of parameters indexed by the names\n     *               that appear in the message template\n     *\n     * @see getMessageTemplate()\n     */\n    public function getParameters(): array;\n\n    /**\n     * Returns a number for pluralizing the violation message.\n     *\n     * For example, the message template could have different translation based\n     * on a parameter \"choices\":\n     *\n     * <ul>\n     * <li>Please select exactly one entry. (choices=1)</li>\n     * <li>Please select two entries. (choices=2)</li>\n     * </ul>\n     *\n     * This method returns the value of the parameter for choosing the right\n     * pluralization form (in this case \"choices\").\n     */\n    public function getPlural(): ?int;\n\n    /**\n     * Returns the root element of the validation.\n     *\n     * @return mixed The value that was passed originally to the validator when\n     *               the validation was started. Because the validator traverses\n     *               the object graph, the value at which the violation occurs\n     *               is not necessarily the value that was originally validated.\n     */\n    public function getRoot(): mixed;\n\n    /**\n     * Returns the property path from the root element to the violation.\n     *\n     * @return string The property path indicates how the validator reached\n     *                the invalid value from the root element. If the root\n     *                element is a <tt>Person</tt> instance with a property\n     *                \"address\" that contains an <tt>Address</tt> instance\n     *                with an invalid property \"street\", the generated property\n     *                path is \"address.street\". Property access is denoted by\n     *                dots, while array access is denoted by square brackets,\n     *                for example \"addresses[1].street\".\n     */\n    public function getPropertyPath(): string;\n\n    /**\n     * Returns the value that caused the violation.\n     *\n     * @return mixed the invalid value that caused the validated constraint to\n     *               fail\n     */\n    public function getInvalidValue(): mixed;\n\n    /**\n     * Returns a machine-digestible error code for the violation.\n     */\n    public function getCode(): ?string;\n\n    /**\n     * Returns the constraint whose validation caused the violation.\n     */\n    public function getConstraint(): ?Constraint;\n\n    /**\n     * Returns the cause of the violation.\n     */\n    public function getCause(): mixed;\n\n    /**\n     * Converts the violation into a string for debugging purposes.\n     */\n    public function __toString(): string;\n}\n"
        },
        {
          "name": "ConstraintViolationList.php",
          "type": "blob",
          "size": 3.6875,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Validator;\n\nuse Symfony\\Component\\Validator\\Exception\\OutOfBoundsException;\n\n/**\n * Default implementation of {@ConstraintViolationListInterface}.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n *\n * @implements \\IteratorAggregate<int, ConstraintViolationInterface>\n */\nclass ConstraintViolationList implements \\IteratorAggregate, ConstraintViolationListInterface\n{\n    /**\n     * @var list<ConstraintViolationInterface>\n     */\n    private array $violations = [];\n\n    /**\n     * Creates a new constraint violation list.\n     *\n     * @param iterable<mixed, ConstraintViolationInterface> $violations The constraint violations to add to the list\n     */\n    public function __construct(iterable $violations = [])\n    {\n        foreach ($violations as $violation) {\n            $this->add($violation);\n        }\n    }\n\n    public static function createFromMessage(string $message): self\n    {\n        $self = new self();\n        $self->add(new ConstraintViolation($message, '', [], null, '', null));\n\n        return $self;\n    }\n\n    public function __toString(): string\n    {\n        $string = '';\n\n        foreach ($this->violations as $violation) {\n            $string .= $violation.\"\\n\";\n        }\n\n        return $string;\n    }\n\n    public function add(ConstraintViolationInterface $violation): void\n    {\n        $this->violations[] = $violation;\n    }\n\n    public function addAll(ConstraintViolationListInterface $otherList): void\n    {\n        foreach ($otherList as $violation) {\n            $this->violations[] = $violation;\n        }\n    }\n\n    public function get(int $offset): ConstraintViolationInterface\n    {\n        if (!isset($this->violations[$offset])) {\n            throw new OutOfBoundsException(\\sprintf('The offset \"%s\" does not exist.', $offset));\n        }\n\n        return $this->violations[$offset];\n    }\n\n    public function has(int $offset): bool\n    {\n        return isset($this->violations[$offset]);\n    }\n\n    public function set(int $offset, ConstraintViolationInterface $violation): void\n    {\n        $this->violations[$offset] = $violation;\n    }\n\n    public function remove(int $offset): void\n    {\n        unset($this->violations[$offset]);\n    }\n\n    /**\n     * @return \\ArrayIterator<int, ConstraintViolationInterface>\n     */\n    public function getIterator(): \\ArrayIterator\n    {\n        return new \\ArrayIterator($this->violations);\n    }\n\n    public function count(): int\n    {\n        return \\count($this->violations);\n    }\n\n    public function offsetExists(mixed $offset): bool\n    {\n        return $this->has($offset);\n    }\n\n    public function offsetGet(mixed $offset): ConstraintViolationInterface\n    {\n        return $this->get($offset);\n    }\n\n    public function offsetSet(mixed $offset, mixed $violation): void\n    {\n        if (null === $offset) {\n            $this->add($violation);\n        } else {\n            $this->set($offset, $violation);\n        }\n    }\n\n    public function offsetUnset(mixed $offset): void\n    {\n        $this->remove($offset);\n    }\n\n    /**\n     * Creates iterator for errors with specific codes.\n     *\n     * @param string|string[] $codes The codes to find\n     */\n    public function findByCodes(string|array $codes): static\n    {\n        $codes = (array) $codes;\n        $violations = [];\n        foreach ($this as $violation) {\n            if (\\in_array($violation->getCode(), $codes, true)) {\n                $violations[] = $violation;\n            }\n        }\n\n        return new static($violations);\n    }\n}\n"
        },
        {
          "name": "ConstraintViolationListInterface.php",
          "type": "blob",
          "size": 1.7958984375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Validator;\n\nuse Symfony\\Component\\Validator\\Exception\\OutOfBoundsException;\n\n/**\n * A list of constraint violations.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n *\n * @extends \\ArrayAccess<int, ConstraintViolationInterface>\n * @extends \\Traversable<int, ConstraintViolationInterface>\n */\ninterface ConstraintViolationListInterface extends \\Traversable, \\Countable, \\ArrayAccess\n{\n    /**\n     * Adds a constraint violation to this list.\n     */\n    public function add(ConstraintViolationInterface $violation): void;\n\n    /**\n     * Merges an existing violation list into this list.\n     */\n    public function addAll(self $otherList): void;\n\n    /**\n     * Returns the violation at a given offset.\n     *\n     * @param int $offset The offset of the violation\n     *\n     * @throws OutOfBoundsException if the offset does not exist\n     */\n    public function get(int $offset): ConstraintViolationInterface;\n\n    /**\n     * Returns whether the given offset exists.\n     *\n     * @param int $offset The violation offset\n     */\n    public function has(int $offset): bool;\n\n    /**\n     * Sets a violation at a given offset.\n     *\n     * @param int $offset The violation offset\n     */\n    public function set(int $offset, ConstraintViolationInterface $violation): void;\n\n    /**\n     * Removes a violation at a given offset.\n     *\n     * @param int $offset The offset to remove\n     */\n    public function remove(int $offset): void;\n\n    /**\n     * Converts the violation into a string for debugging purposes.\n     */\n    public function __toString(): string;\n}\n"
        },
        {
          "name": "Constraints",
          "type": "tree",
          "content": null
        },
        {
          "name": "ContainerConstraintValidatorFactory.php",
          "type": "blob",
          "size": 1.9140625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Validator;\n\nuse Psr\\Container\\ContainerInterface;\nuse Symfony\\Component\\Validator\\Exception\\UnexpectedTypeException;\nuse Symfony\\Component\\Validator\\Exception\\ValidatorException;\n\n/**\n * Uses a service container to create constraint validators.\n *\n * @author Kris Wallsmith <kris@symfony.com>\n */\nclass ContainerConstraintValidatorFactory implements ConstraintValidatorFactoryInterface\n{\n    private array $validators;\n\n    public function __construct(\n        private ContainerInterface $container,\n    ) {\n        $this->validators = [];\n    }\n\n    /**\n     * @throws ValidatorException      When the validator class does not exist\n     * @throws UnexpectedTypeException When the validator is not an instance of ConstraintValidatorInterface\n     */\n    public function getInstance(Constraint $constraint): ConstraintValidatorInterface\n    {\n        $name = $constraint->validatedBy();\n\n        if (!isset($this->validators[$name])) {\n            if ($this->container->has($name)) {\n                $this->validators[$name] = $this->container->get($name);\n            } else {\n                if (!class_exists($name)) {\n                    throw new ValidatorException(\\sprintf('Constraint validator \"%s\" does not exist or is not enabled. Check the \"validatedBy\" method in your constraint class \"%s\".', $name, get_debug_type($constraint)));\n                }\n\n                $this->validators[$name] = new $name();\n            }\n        }\n\n        if (!$this->validators[$name] instanceof ConstraintValidatorInterface) {\n            throw new UnexpectedTypeException($this->validators[$name], ConstraintValidatorInterface::class);\n        }\n\n        return $this->validators[$name];\n    }\n}\n"
        },
        {
          "name": "Context",
          "type": "tree",
          "content": null
        },
        {
          "name": "DataCollector",
          "type": "tree",
          "content": null
        },
        {
          "name": "DependencyInjection",
          "type": "tree",
          "content": null
        },
        {
          "name": "Exception",
          "type": "tree",
          "content": null
        },
        {
          "name": "GroupProviderInterface.php",
          "type": "blob",
          "size": 0.7109375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Validator;\n\nuse Symfony\\Component\\Validator\\Constraints\\GroupSequence;\n\n/**\n * Defines the interface for a validation group provider.\n *\n * @author Yonel Ceruto <yonelceruto@gmail.com>\n */\ninterface GroupProviderInterface\n{\n    /**\n     * Returns which validation groups should be used for a certain state\n     * of the object.\n     *\n     * @return string[]|string[][]|GroupSequence\n     */\n    public function getGroups(object $object): array|GroupSequence;\n}\n"
        },
        {
          "name": "GroupSequenceProviderInterface.php",
          "type": "blob",
          "size": 0.66015625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Validator;\n\nuse Symfony\\Component\\Validator\\Constraints\\GroupSequence;\n\n/**\n * Defines the interface for a group sequence provider.\n */\ninterface GroupSequenceProviderInterface\n{\n    /**\n     * Returns which validation groups should be used for a certain state\n     * of the object.\n     *\n     * @return string[]|string[][]|GroupSequence\n     */\n    public function getGroupSequence(): array|GroupSequence;\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (c) 2004-present Fabien Potencier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Mapping",
          "type": "tree",
          "content": null
        },
        {
          "name": "ObjectInitializerInterface.php",
          "type": "blob",
          "size": 0.66796875,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Validator;\n\n/**\n * Prepares an object for validation.\n *\n * Concrete implementations of this interface are used by {@link Validator\\ContextualValidatorInterface}\n * to initialize objects just before validating them.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n * @author Bernhard Schussek <bschussek@gmail.com>\n */\ninterface ObjectInitializerInterface\n{\n    public function initialize(object $object): void;\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.5654296875,
          "content": "Validator Component\n===================\n\nThe Validator component provides tools to validate values following the\n[JSR-303 Bean Validation specification][1].\n\nResources\n---------\n\n * [Documentation](https://symfony.com/doc/current/components/validator.html)\n * [Contributing](https://symfony.com/doc/current/contributing/index.html)\n * [Report issues](https://github.com/symfony/symfony/issues) and\n   [send Pull Requests](https://github.com/symfony/symfony/pulls)\n   in the [main Symfony repository](https://github.com/symfony/symfony)\n\n[1]: https://jcp.org/en/jsr/detail?id=303\n"
        },
        {
          "name": "Resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "Test",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "Util",
          "type": "tree",
          "content": null
        },
        {
          "name": "Validation.php",
          "type": "blob",
          "size": 2.52734375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Validator;\n\nuse Symfony\\Component\\Validator\\Exception\\ValidationFailedException;\nuse Symfony\\Component\\Validator\\Validator\\ValidatorInterface;\n\n/**\n * Entry point for the Validator component.\n *\n * @author Bernhard Schussek <bschussek@gmail.com>\n */\nfinal class Validation\n{\n    /**\n     * Creates a callable chain of constraints.\n     */\n    public static function createCallable(Constraint|ValidatorInterface|null $constraintOrValidator = null, Constraint ...$constraints): callable\n    {\n        $validator = self::createIsValidCallable($constraintOrValidator, ...$constraints);\n\n        return static function ($value) use ($validator) {\n            if (!$validator($value, $violations)) {\n                throw new ValidationFailedException($value, $violations);\n            }\n\n            return $value;\n        };\n    }\n\n    /**\n     * Creates a callable that returns true/false instead of throwing validation exceptions.\n     *\n     * @return callable(mixed $value, ?ConstraintViolationListInterface &$violations = null): bool\n     */\n    public static function createIsValidCallable(Constraint|ValidatorInterface|null $constraintOrValidator = null, Constraint ...$constraints): callable\n    {\n        $validator = $constraintOrValidator;\n\n        if ($constraintOrValidator instanceof Constraint) {\n            $constraints = \\func_get_args();\n            $validator = null;\n        }\n\n        $validator ??= self::createValidator();\n\n        return static function (mixed $value, ?ConstraintViolationListInterface &$violations = null) use ($constraints, $validator): bool {\n            $violations = $validator->validate($value, $constraints);\n\n            return 0 === $violations->count();\n        };\n    }\n\n    /**\n     * Creates a new validator.\n     *\n     * If you want to configure the validator, use\n     * {@link createValidatorBuilder()} instead.\n     */\n    public static function createValidator(): ValidatorInterface\n    {\n        return self::createValidatorBuilder()->getValidator();\n    }\n\n    /**\n     * Creates a configurable builder for validator objects.\n     */\n    public static function createValidatorBuilder(): ValidatorBuilder\n    {\n        return new ValidatorBuilder();\n    }\n\n    /**\n     * This class cannot be instantiated.\n     */\n    private function __construct()\n    {\n    }\n}\n"
        },
        {
          "name": "Validator",
          "type": "tree",
          "content": null
        },
        {
          "name": "ValidatorBuilder.php",
          "type": "blob",
          "size": 11.0625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Validator;\n\nuse Psr\\Cache\\CacheItemPoolInterface;\nuse Psr\\Container\\ContainerInterface;\nuse Symfony\\Component\\Validator\\Context\\ExecutionContextFactory;\nuse Symfony\\Component\\Validator\\Exception\\ValidatorException;\nuse Symfony\\Component\\Validator\\Mapping\\Factory\\LazyLoadingMetadataFactory;\nuse Symfony\\Component\\Validator\\Mapping\\Factory\\MetadataFactoryInterface;\nuse Symfony\\Component\\Validator\\Mapping\\Loader\\AttributeLoader;\nuse Symfony\\Component\\Validator\\Mapping\\Loader\\LoaderChain;\nuse Symfony\\Component\\Validator\\Mapping\\Loader\\LoaderInterface;\nuse Symfony\\Component\\Validator\\Mapping\\Loader\\StaticMethodLoader;\nuse Symfony\\Component\\Validator\\Mapping\\Loader\\XmlFileLoader;\nuse Symfony\\Component\\Validator\\Mapping\\Loader\\YamlFileLoader;\nuse Symfony\\Component\\Validator\\Validator\\RecursiveValidator;\nuse Symfony\\Component\\Validator\\Validator\\ValidatorInterface;\nuse Symfony\\Contracts\\Translation\\LocaleAwareInterface;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\nuse Symfony\\Contracts\\Translation\\TranslatorTrait;\n\n// Help opcache.preload discover always-needed symbols\nclass_exists(TranslatorInterface::class);\nclass_exists(LocaleAwareInterface::class);\nclass_exists(TranslatorTrait::class);\n\n/**\n * @author Bernhard Schussek <bschussek@gmail.com>\n */\nclass ValidatorBuilder\n{\n    private array $initializers = [];\n    private array $loaders = [];\n    private array $xmlMappings = [];\n    private array $yamlMappings = [];\n    private array $methodMappings = [];\n    private bool $enableAttributeMapping = false;\n    private ?MetadataFactoryInterface $metadataFactory = null;\n    private ConstraintValidatorFactoryInterface $validatorFactory;\n    private ?ContainerInterface $groupProviderLocator = null;\n    private ?CacheItemPoolInterface $mappingCache = null;\n    private ?TranslatorInterface $translator = null;\n    private ?string $translationDomain = null;\n\n    /**\n     * Adds an object initializer to the validator.\n     *\n     * @return $this\n     */\n    public function addObjectInitializer(ObjectInitializerInterface $initializer): static\n    {\n        $this->initializers[] = $initializer;\n\n        return $this;\n    }\n\n    /**\n     * Adds a list of object initializers to the validator.\n     *\n     * @param ObjectInitializerInterface[] $initializers\n     *\n     * @return $this\n     */\n    public function addObjectInitializers(array $initializers): static\n    {\n        $this->initializers = array_merge($this->initializers, $initializers);\n\n        return $this;\n    }\n\n    /**\n     * Adds an XML constraint mapping file to the validator.\n     *\n     * @return $this\n     */\n    public function addXmlMapping(string $path): static\n    {\n        if (null !== $this->metadataFactory) {\n            throw new ValidatorException('You cannot add custom mappings after setting a custom metadata factory. Configure your metadata factory instead.');\n        }\n\n        $this->xmlMappings[] = $path;\n\n        return $this;\n    }\n\n    /**\n     * Adds a list of XML constraint mapping files to the validator.\n     *\n     * @param string[] $paths The paths to the mapping files\n     *\n     * @return $this\n     */\n    public function addXmlMappings(array $paths): static\n    {\n        if (null !== $this->metadataFactory) {\n            throw new ValidatorException('You cannot add custom mappings after setting a custom metadata factory. Configure your metadata factory instead.');\n        }\n\n        $this->xmlMappings = array_merge($this->xmlMappings, $paths);\n\n        return $this;\n    }\n\n    /**\n     * Adds a YAML constraint mapping file to the validator.\n     *\n     * @param string $path The path to the mapping file\n     *\n     * @return $this\n     */\n    public function addYamlMapping(string $path): static\n    {\n        if (null !== $this->metadataFactory) {\n            throw new ValidatorException('You cannot add custom mappings after setting a custom metadata factory. Configure your metadata factory instead.');\n        }\n\n        $this->yamlMappings[] = $path;\n\n        return $this;\n    }\n\n    /**\n     * Adds a list of YAML constraint mappings file to the validator.\n     *\n     * @param string[] $paths The paths to the mapping files\n     *\n     * @return $this\n     */\n    public function addYamlMappings(array $paths): static\n    {\n        if (null !== $this->metadataFactory) {\n            throw new ValidatorException('You cannot add custom mappings after setting a custom metadata factory. Configure your metadata factory instead.');\n        }\n\n        $this->yamlMappings = array_merge($this->yamlMappings, $paths);\n\n        return $this;\n    }\n\n    /**\n     * Enables constraint mapping using the given static method.\n     *\n     * @return $this\n     */\n    public function addMethodMapping(string $methodName): static\n    {\n        if (null !== $this->metadataFactory) {\n            throw new ValidatorException('You cannot add custom mappings after setting a custom metadata factory. Configure your metadata factory instead.');\n        }\n\n        $this->methodMappings[] = $methodName;\n\n        return $this;\n    }\n\n    /**\n     * Enables constraint mapping using the given static methods.\n     *\n     * @param string[] $methodNames The names of the methods\n     *\n     * @return $this\n     */\n    public function addMethodMappings(array $methodNames): static\n    {\n        if (null !== $this->metadataFactory) {\n            throw new ValidatorException('You cannot add custom mappings after setting a custom metadata factory. Configure your metadata factory instead.');\n        }\n\n        $this->methodMappings = array_merge($this->methodMappings, $methodNames);\n\n        return $this;\n    }\n\n    /**\n     * Enables attribute-based constraint mapping.\n     *\n     * @return $this\n     */\n    public function enableAttributeMapping(): static\n    {\n        if (null !== $this->metadataFactory) {\n            throw new ValidatorException('You cannot enable attribute mapping after setting a custom metadata factory. Configure your metadata factory instead.');\n        }\n\n        $this->enableAttributeMapping = true;\n\n        return $this;\n    }\n\n    /**\n     * Disables attribute-based constraint mapping.\n     *\n     * @return $this\n     */\n    public function disableAttributeMapping(): static\n    {\n        $this->enableAttributeMapping = false;\n\n        return $this;\n    }\n\n    /**\n     * Sets the class metadata factory used by the validator.\n     *\n     * @return $this\n     */\n    public function setMetadataFactory(MetadataFactoryInterface $metadataFactory): static\n    {\n        if (\\count($this->xmlMappings) > 0 || \\count($this->yamlMappings) > 0 || \\count($this->methodMappings) > 0 || $this->enableAttributeMapping) {\n            throw new ValidatorException('You cannot set a custom metadata factory after adding custom mappings. You should do either of both.');\n        }\n\n        $this->metadataFactory = $metadataFactory;\n\n        return $this;\n    }\n\n    /**\n     * Sets the cache for caching class metadata.\n     *\n     * @return $this\n     */\n    public function setMappingCache(CacheItemPoolInterface $cache): static\n    {\n        if (null !== $this->metadataFactory) {\n            throw new ValidatorException('You cannot set a custom mapping cache after setting a custom metadata factory. Configure your metadata factory instead.');\n        }\n\n        $this->mappingCache = $cache;\n\n        return $this;\n    }\n\n    /**\n     * Sets the constraint validator factory used by the validator.\n     *\n     * @return $this\n     */\n    public function setConstraintValidatorFactory(ConstraintValidatorFactoryInterface $validatorFactory): static\n    {\n        $this->validatorFactory = $validatorFactory;\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function setGroupProviderLocator(ContainerInterface $groupProviderLocator): static\n    {\n        $this->groupProviderLocator = $groupProviderLocator;\n\n        return $this;\n    }\n\n    /**\n     * Sets the translator used for translating violation messages.\n     *\n     * @return $this\n     */\n    public function setTranslator(TranslatorInterface $translator): static\n    {\n        $this->translator = $translator;\n\n        return $this;\n    }\n\n    /**\n     * Sets the default translation domain of violation messages.\n     *\n     * The same message can have different translations in different domains.\n     * Pass the domain that is used for violation messages by default to this\n     * method.\n     *\n     * @return $this\n     */\n    public function setTranslationDomain(?string $translationDomain): static\n    {\n        $this->translationDomain = $translationDomain;\n\n        return $this;\n    }\n\n    /**\n     * @return $this\n     */\n    public function addLoader(LoaderInterface $loader): static\n    {\n        $this->loaders[] = $loader;\n\n        return $this;\n    }\n\n    /**\n     * @return LoaderInterface[]\n     */\n    public function getLoaders(): array\n    {\n        $loaders = [];\n\n        foreach ($this->xmlMappings as $xmlMapping) {\n            $loaders[] = new XmlFileLoader($xmlMapping);\n        }\n\n        foreach ($this->yamlMappings as $yamlMappings) {\n            $loaders[] = new YamlFileLoader($yamlMappings);\n        }\n\n        foreach ($this->methodMappings as $methodName) {\n            $loaders[] = new StaticMethodLoader($methodName);\n        }\n\n        if ($this->enableAttributeMapping) {\n            $loaders[] = new AttributeLoader();\n        }\n\n        return array_merge($loaders, $this->loaders);\n    }\n\n    /**\n     * Builds and returns a new validator object.\n     */\n    public function getValidator(): ValidatorInterface\n    {\n        $metadataFactory = $this->metadataFactory;\n\n        if (!$metadataFactory) {\n            $loaders = $this->getLoaders();\n            $loader = null;\n\n            if (\\count($loaders) > 1) {\n                $loader = new LoaderChain($loaders);\n            } elseif (1 === \\count($loaders)) {\n                $loader = $loaders[0];\n            }\n\n            $metadataFactory = new LazyLoadingMetadataFactory($loader, $this->mappingCache);\n        }\n\n        $validatorFactory = $this->validatorFactory ?? new ConstraintValidatorFactory();\n        $translator = $this->translator;\n\n        if (null === $translator) {\n            $translator = new class implements TranslatorInterface, LocaleAwareInterface {\n                use TranslatorTrait;\n            };\n            // Force the locale to be 'en' when no translator is provided rather than relying on the Intl default locale\n            // This avoids depending on Intl or the stub implementation being available. It also ensures that Symfony\n            // validation messages are pluralized properly even when the default locale gets changed because they are in\n            // English.\n            $translator->setLocale('en');\n        }\n\n        $contextFactory = new ExecutionContextFactory($translator, $this->translationDomain);\n\n        return new RecursiveValidator($contextFactory, $metadataFactory, $validatorFactory, $this->initializers, $this->groupProviderLocator);\n    }\n}\n"
        },
        {
          "name": "Violation",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.0498046875,
          "content": "{\n    \"name\": \"symfony/validator\",\n    \"type\": \"library\",\n    \"description\": \"Provides tools to validate values\",\n    \"keywords\": [],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Fabien Potencier\",\n            \"email\": \"fabien@symfony.com\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=8.2\",\n        \"symfony/polyfill-ctype\": \"~1.8\",\n        \"symfony/polyfill-mbstring\": \"~1.0\",\n        \"symfony/polyfill-php83\": \"^1.27\",\n        \"symfony/deprecation-contracts\": \"^2.5|^3\",\n        \"symfony/translation-contracts\": \"^2.5|^3\"\n    },\n    \"require-dev\": {\n        \"symfony/console\": \"^6.4|^7.0\",\n        \"symfony/finder\": \"^6.4|^7.0\",\n        \"symfony/http-client\": \"^6.4|^7.0\",\n        \"symfony/http-foundation\": \"^6.4|^7.0\",\n        \"symfony/http-kernel\": \"^6.4|^7.0\",\n        \"symfony/intl\": \"^6.4|^7.0\",\n        \"symfony/yaml\": \"^6.4|^7.0\",\n        \"symfony/config\": \"^6.4|^7.0\",\n        \"symfony/dependency-injection\": \"^6.4|^7.0\",\n        \"symfony/expression-language\": \"^6.4|^7.0\",\n        \"symfony/cache\": \"^6.4|^7.0\",\n        \"symfony/mime\": \"^6.4|^7.0\",\n        \"symfony/property-access\": \"^6.4|^7.0\",\n        \"symfony/property-info\": \"^6.4|^7.0\",\n        \"symfony/translation\": \"^6.4.3|^7.0.3\",\n        \"symfony/type-info\": \"^7.1\",\n        \"egulias/email-validator\": \"^2.1.10|^3|^4\"\n    },\n    \"conflict\": {\n        \"doctrine/lexer\": \"<1.1\",\n        \"symfony/dependency-injection\": \"<6.4\",\n        \"symfony/doctrine-bridge\": \"<7.0\",\n        \"symfony/expression-language\": \"<6.4\",\n        \"symfony/http-kernel\": \"<6.4\",\n        \"symfony/intl\": \"<6.4\",\n        \"symfony/property-info\": \"<6.4\",\n        \"symfony/translation\": \"<6.4.3|>=7.0,<7.0.3\",\n        \"symfony/yaml\": \"<6.4\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Symfony\\\\Component\\\\Validator\\\\\": \"\" },\n        \"exclude-from-classmap\": [\n            \"/Tests/\",\n            \"/Resources/bin/\"\n        ]\n    },\n    \"minimum-stability\": \"dev\"\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.8466796875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"http://schema.phpunit.de/9.3/phpunit.xsd\"\n         backupGlobals=\"false\"\n         colors=\"true\"\n         bootstrap=\"vendor/autoload.php\"\n         failOnRisky=\"true\"\n         failOnWarning=\"true\"\n>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\" />\n    </php>\n\n    <testsuites>\n        <testsuite name=\"Symfony Validator Component Test Suite\">\n            <directory>./Tests/</directory>\n        </testsuite>\n    </testsuites>\n\n    <coverage>\n        <include>\n            <directory>./</directory>\n        </include>\n        <exclude>\n            <directory>./Resources</directory>\n            <directory>./Tests</directory>\n            <directory>./vendor</directory>\n        </exclude>\n    </coverage>\n</phpunit>\n"
        }
      ]
    }
  ]
}