{
  "metadata": {
    "timestamp": 1736711835328,
    "page": 144,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mcamara/laravel-localization",
      "stars": 3396,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.103515625,
          "content": "/.buildpath\n/.project\n/.settings\n/vendor\ncomposer.lock\ncomposer.phar\nThumbs.db\nphpunit.xml\n.phpunit.cache\n"
        },
        {
          "name": ".scrutinizer.yml",
          "type": "blob",
          "size": 0.1337890625,
          "content": "checks:\n    php:\n        code_rating: true\n        duplication: true\nfilter:\n    excluded_paths:\n        - tests/*\n        - src/config/*"
        },
        {
          "name": "ADDITIONS.md",
          "type": "blob",
          "size": 1.8212890625,
          "content": "# Additional information\n\n## Installation\n\n### For Laravel 5.4 and below:\n\nFor older versions of the framework, follow the steps below:\n\nRegister the service provider in `config/app.php`\n\n```php\n        'providers' => [\n\t\t// [...]\n                Mcamara\\LaravelLocalization\\LaravelLocalizationServiceProvider::class,\n        ],\n```\n\nYou may also register the `LaravelLocalization` facade:\n\n```php\n        'aliases' => [\n\t\t// [...]\n                'LaravelLocalization' => Mcamara\\LaravelLocalization\\Facades\\LaravelLocalization::class,\n        ],\n```\n\n## Config\n\n### Service Providers\n\nOtherwise, you can use `ConfigServiceProviders` (check <a href=\"https://raw.githubusercontent.com/mcamara/laravel-localization/master/src/config/config.php\">this file</a> for more info).\n\nFor example, editing the default config service provider that Laravel loads when it's installed. This file is placed in `app/providers/ConfigServicePovider.php` and would look like this:\n\n```php\n<?php namespace App\\Providers;\n\nuse Illuminate\\Support\\ServiceProvider;\n\nclass ConfigServiceProvider extends ServiceProvider {\n\tpublic function register()\n\t{\n\t\tconfig([\n\t\t\t'laravellocalization.supportedLocales' => [\n\t\t\t\t'ace' => array( 'name' => 'Achinese', 'script' => 'Latn', 'native' => 'Aceh' ),\n\t\t\t\t'ca'  => array( 'name' => 'Catalan', 'script' => 'Latn', 'native' => 'catalÃ ' ),\n\t\t\t\t'en'  => array( 'name' => 'English', 'script' => 'Latn', 'native' => 'English' ),\n\t\t\t],\n\n\t\t\t'laravellocalization.useAcceptLanguageHeader' => true,\n\n\t\t\t'laravellocalization.hideDefaultLocaleInURL' => true\n\t\t]);\n\t}\n\n}\n```\n\nThis config would add Catalan and Achinese as languages and override any other previous supported locales and all the other options in the package.\n\nYou can create your own config providers and add them on your application config file (check the providers array in `config/app.php`).\n"
        },
        {
          "name": "CACHING.md",
          "type": "blob",
          "size": 1.8271484375,
          "content": "# Laravel Localization: Caching Routes\n\nIf you want to cache the routes in all languages, you will need to use special Artisan commands. **Using `artisan route:cache`** will not work correctly!\n\n## Setup\n\nFor the route caching solution to work, it is required to make a minor adjustment to your application route provision.\n\n\n**before laravel 11**\nIn your App's `RouteServiceProvider`, use the `LoadsTranslatedCachedRoutes` trait:\n\n```php\n<?php\nclass RouteServiceProvider extends ServiceProvider\n{\n    use \\Mcamara\\LaravelLocalization\\Traits\\LoadsTranslatedCachedRoutes;\n```\n**after laravel 11** \nIn your App's `AppServiceProvider`, use the `CachedTranslatedRouteLoader` class in register method:\n\n```php\n<?php\nclass AppServiceProvider extends ServiceProvider\n{  \n    use \\Mcamara\\LaravelLocalization\\Traits\\LoadsTranslatedCachedRoutes;\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        RouteServiceProvider::loadCachedRoutesUsing(fn() => $this->loadCachedRoutes());\n        ...\n    }   \n```\n\n## Usage\n\nTo cache your routes, use:\n\n``` bash\nphp artisan route:trans:cache\n```\n\n... instead of the normal `route:cache` command.\n\nTo list the routes for a given locale, use \n\n``` bash\nphp artisan route:trans:list {locale}\n\n# for instance:\nphp artisan route:trans:list en\n```\n\nTo clear cached routes for all locales, use\n\n``` bash\nphp artisan route:trans:clear\n```\n\n### Note\n\nUsing `route:clear` will also effectively unset the cache (at the minor cost of leaving some clutter in your bootstrap/cache directory).\n\n\n## History\n\nCaching routes, before version 1.3, was done using a separate package, \n [https://github.com/czim/laravel-localization-route-cache](https://github.com/czim/laravel-localization-route-cache).\n That separate package is no longer required, and should be removed when upgrading to 1.3 or newer. \n\n\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.287109375,
          "content": "### 2.0.0\n- Support [contextual binding](https://laravel.com/docs/container#contextual-binding) ([#879](https://github.com/mcamara/laravel-localization/pull/879))\n\nFor guidance on the upgrade process, please refer to the [UPGRADING.md](/UPGRADING.md) file.\n\n### 1.4.0\n- Added compatibility with Laravel 6\n\n### 1.3.20\n- Respect locales mapping ([#631](https://github.com/mcamara/laravel-localization/pull/631))\n\n### 1.3.11\n- Merged in solution for caching translated and localized routes (originally in separate package [czim/laravel-localization-route-cache](https://github.com/czim/laravel-localization-route-cache)) by [CZim](https://github.com/czim).\n    If you used this package, be sure to remove it when upgrading to this version.\n- Added `'utf8suffix' => env('LARAVELLOCALIZATION_UTF8SUFFIX', '.UTF-8')` to config file.\n\n### 1.2.3\n- Added `getLocalesOrder()` function to the package\n\n### 1.2\n- Added compatibility with Laravel 5.4\n\n### 1.1\n- Added compatibility with Laravel 5.2\n\n### 1.0.12\n- Added regional for date localization\n\n### 1.0.7\n- Added Session and Cookie Middleware\n- Deleted useSessionLocale and useCookieLocale from config file\n\n### 1.0\n- Laravel 5 supported\n- Added Middleware\n- Removed deprecated functions\n\n### 0.15.0\n- Added tests from scratch\n- Refactored multiple functions\n- getLocalizedURL now accepts attributes for the url (if needed)\n- $routeName is always a string, no need to be an array if it just have the translation key for the current url\n\n### 0.14.0\n- Laravel 4.2 compatibility\n- Removed Laravel 4.0 compatibility\n\n### 0.13.5\n- Fixes issue with grouped routes\n\n### 0.13.4\n- Fixes issue localizing a url when segment starts with a locale\n\n### 0.13.3\n- Allow no url to be passed in localizeURL\n\n### 0.13.2\n- Fixes issue with double slashes in localized urls\n- Strip trailing slashes from all localized urls\n\n### 0.13.1\n- Fixes URL localization issue when the base path is not / (a.k.a, Laravel is not installed in the web root).\n\n### 0.13.0\n- Deprecated \"getLanguageBar\"\n\n### 0.12.1\n- Throws exception if Larvel's default locale is not in the array of supported locales.\n\n### 0.12.0\n- Changes 302 redirect in to 307 to prevent POST values from being consumed.\n- Added localizeURL function\n\n### 0.11.0\n- Deprecated \"getCurrentLanguageDirection\", \"getCurrentLanguageScript\"\n- Added \"getCurrentLocaleDirection\", \"getCurrentLocaleScript\", \"getCurrentLocaleName\"\n\n### 0.10.1\n- Fixes to maintain compatibility with older config and languagebar.blade.php templates\n- Fixed backward compatibility of getLanguageBar\n- getLocalizedURL now returns URL paths in the same format as parameter inputted; trailing and leading slashes or lack of are respected.\n- getLocalizedURL now compatible with querystrings\n- merged getNonLocalizedURL and getLocalizedURL\n- getNonLocalizedURL($url = null) is now a wrapper for getLocalizedURL(false, $url = null)\n\n### 0.10\n- Standardizing function names and variables using locale\n- Deprecated getCleanRoute\n- Deprecated useBrowserLanguage\n- Changed config useBrowserLanguage to useAcceptLanguageHeader\n- Deprecated useSessionLanguage\n- Changed config useSessionLanguage to useSessionLocale\n- Deprecated useCookieLanguagee\n- Changed config useCookieLanguage to useCookieLocale\n\n### 0.9\n- Fixes issue #47\n- Fixes issue where getCleanRoute would only clean out the currently set locale.\n- getLocalizedURL now throws an UnsupportedLocaleException if the requested locale is not in the list of supported locales.\n\n### 0.8\n- Changed getLanguageBar to just return view.  All other code has been moved to languagebar view.\n- Deprecated getPrintCurrentLanguage\n- Deprecated getLanguageBarClassName\n\n### 0.7\n- Merged languagesAllowed & supportedLanguages\n- Added native for language names\n- Added new function getSupportedLocales\n- Deprecated getAllowedLanguages use getSupportedLocales instead\n- Deprecated getSupportedLanguages use getSupportedLocales instead\n\n### 0.6\n- Added support for language script and direction\n\n### 0.5\n- Added multi-language routes\n- Function `getCurrentLanguage` is not static\n\n### 0.4\n- Added the ability to edit the language bar code\n\n### 0.3\n- Added 'LaravelLocalizationRedirectFilter' filter\n\n### 0.2\n- Added `getURLLanguage` method.\n- Added `getLanguageBar` method.\n- Added `getURLLanguage` method.\n- Added config file\n- Added `useBrowserLanguage` config value\n- Added README\n\n### 0.1\n - Initial release.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 mcamara\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.580078125,
          "content": "# Laravel Localization\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/mcamara/laravel-localization.svg?style=flat-square)](https://packagist.org/packages/mcamara/laravel-localization)\n[![Total Downloads](https://img.shields.io/packagist/dt/mcamara/laravel-localization.svg?style=flat-square)](https://packagist.org/packages/mcamara/laravel-localization)\n![GitHub Actions](https://github.com/mcamara/laravel-localization/actions/workflows/run-tests.yml/badge.svg)\n[![Open Source Helpers](https://www.codetriage.com/mcamara/laravel-localization/badges/users.svg)](https://www.codetriage.com/mcamara/laravel-localization)\n[![Reviewed by Hound](https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg)](https://houndci.com)\n\nEasy i18n localization for Laravel, an useful tool to combine with Laravel localization classes.\n\nThe package offers the following:\n\n - Detect language from browser\n - Smart redirects (Save locale in session/cookie)\n - Smart routing (Define your routes only once, no matter how many languages you use)\n - Translatable Routes\n - Supports caching & testing\n - Option to hide default locale in url\n - Many snippets and helpers (like language selector)\n\n## Table of Contents\n\n- <a href=\"#installation\">Installation</a>\n- <a href=\"#usage\">Usage</a>\n- <a href=\"#redirect-middleware\">Redirect Middleware</a>\n- <a href=\"#helpers\">Helpers</a>\n- <a href=\"#translated-routes\">Translated Routes</a>\n- <a href=\"#caching-routes\">Caching routes</a>\n- <a href=\"#testing\">Testing</a>\n- <a href=\"#common-issues\">Common Issues</a>\n    - <a href=\"#post-is-not-working\">POST is not working</a>\n    - <a href=\"#methodnotallowedhttpexception\">MethodNotAllowedHttpException</a>\n    - <a href=\"#validation-message-is-only-in-default-locale\">Validation message is always in default locale</a>\n- <a href=\"#collaborators\">Collaborators</a>\n- <a href=\"#changelog\">Changelog</a>\n- <a href=\"#license\">License</a>\n\n## Laravel compatibility\n\n Laravel      | laravel-localization\n:-------------|:----------\n 4.0.x        | 0.13.x\n 4.1.x        | 0.13.x\n 4.2.x        | 0.15.x\n 5.0.x/5.1.x  | 1.0.x\n 5.2.x-5.4.x (PHP 7 not required)  | 1.2.\n 5.2.0-6.x (PHP version >= 7 required) | 1.4.x\n 6.x-10.x (PHP version >= 7 required) | 1.8.x\n 10.x-11.x (PHP version >= 8.2 required) | 2.0.x\n\n## Installation\n\nInstall the package via composer: `composer require mcamara/laravel-localization`\n\nFor Laravel 5.4 and below it necessary to [register the service provider](/ADDITIONS.md#for-laravel-5.4-and-below).\n\n### Config Files\n\nIn order to edit the default configuration you may execute:\n\n```\nphp artisan vendor:publish --provider=\"Mcamara\\LaravelLocalization\\LaravelLocalizationServiceProvider\"\n```\n\nAfter that, `config/laravellocalization.php` will be created.\n\nThe configuration options are:\n\n - **supportedLocales** Languages of your app (Default: English & Spanish).\n - **useAcceptLanguageHeader** If true, then automatically detect language from browser.\n - **hideDefaultLocaleInURL** If true, then do not show default locale in url.\n - **localesOrder** Sort languages in custom order.\n - **localesMapping** Rename url locales.\n - **utf8suffix** Allow changing utf8suffix for CentOS etc.\n - **urlsIgnored** Ignore specific urls.\n\n### Register Middleware\n\nYou may register the package middleware in the `app/Http/Kernel.php` file:\n\n```php\n<?php namespace App\\Http;\n\nuse Illuminate\\Foundation\\Http\\Kernel as HttpKernel;\n\nclass Kernel extends HttpKernel {\n    /**\n    * The application's route middleware.\n    *\n    * @var array\n    */\n    protected $middlewareAliases = [\n        /**** OTHER MIDDLEWARE ****/\n        'localize'                => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRoutes::class,\n        'localizationRedirect'    => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter::class,\n        'localeSessionRedirect'   => \\Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect::class,\n        'localeCookieRedirect'    => \\Mcamara\\LaravelLocalization\\Middleware\\LocaleCookieRedirect::class,\n        'localeViewPath'          => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationViewPath::class\n    ];\n}\n```\n\nIf you are using Laravel 11, you may register in `bootstrap/app.php` file in closure `withMiddleware`:\n\n```php\nreturn Application::configure(basePath: dirname(__DIR__))\n    // Other application configurations\n    ->withMiddleware(function (Middleware $middleware) {\n        $middleware->alias([\n            /**** OTHER MIDDLEWARE ALIASES ****/\n            'localize'                => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRoutes::class,\n            'localizationRedirect'    => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationRedirectFilter::class,\n            'localeSessionRedirect'   => \\Mcamara\\LaravelLocalization\\Middleware\\LocaleSessionRedirect::class,\n            'localeCookieRedirect'    => \\Mcamara\\LaravelLocalization\\Middleware\\LocaleCookieRedirect::class,\n            'localeViewPath'          => \\Mcamara\\LaravelLocalization\\Middleware\\LaravelLocalizationViewPath::class,\n        ]);\n    })\n```\n\n## Usage\n\nAdd the following to your routes file:\n\n```php\n// routes/web.php\n\nRoute::group(['prefix' => LaravelLocalization::setLocale()], function()\n{\n\t/** ADD ALL LOCALIZED ROUTES INSIDE THIS GROUP **/\n\tRoute::get('/', function()\n\t{\n\t\treturn View::make('hello');\n\t});\n\n\tRoute::get('test',function(){\n\t\treturn View::make('test');\n\t});\n});\n\n/** OTHER PAGES THAT SHOULD NOT BE LOCALIZED **/\n\n```\n\nOnce this route group is added to the routes file, a user can access all locales added into `supportedLocales` (`en` and `es` by default).\nFor example, the above route file creates the following addresses:\n\n```\n// Set application language to English\nhttp://url-to-laravel/en\nhttp://url-to-laravel/en/test\n\n// Set application language to Spanish\nhttp://url-to-laravel/es\nhttp://url-to-laravel/es/test\n\n// Set application language to English or Spanish (depending on browsers default locales)\n// if nothing found set to default locale\nhttp://url-to-laravel\nhttp://url-to-laravel/test\n```\nThe package sets your application locale `App::getLocale()` according to your url. The locale may then be used for [Laravel's localization features](http://laravel.com/docs/localization).\n\nYou may add middleware to your group like this:\n\n```php\nRoute::group(\n[\n\t'prefix' => LaravelLocalization::setLocale(),\n\t'middleware' => [ 'localeSessionRedirect', 'localizationRedirect', 'localeViewPath' ]\n], function(){ //...\n});\n```\n\n### Recommendations\n\n***1.***: It is **strongly** recommended to use a [redirecting middleware](#redirect-middleware).\nUrls without locale should only be used to determine browser/default locale and to redirect to the [localized url](#localized-urls).\nOtherwise, when search engine robots crawl for example `http://url-to-laravel/test` they may get different language content for each visit.\nAlso having multiple urls for the same content creates a SEO duplicate-content issue.\n\n***2.***: It is **strongly** recommended to [localize your links](#localized-urls), even if you use a redirect middleware.\nOtherwise, you will cause at least one redirect each time a user clicks on a link.\nAlso, any action url from a post form must be localized, to prevent that it gets redirected to a get request.\n\n\n## Redirect Middleware\n\nThe following redirection middleware depends on the settings of `hideDefaultLocaleInURL`\nand `useAcceptLanguageHeader` in `config/laravellocalization.php`:\n\n### LocaleSessionRedirect\n\nWhenever a locale is present in the url, it will be stored in the session by this middleware.\n\nIf there is no locale present in the url, then this middleware will check the following\n\n - If no locale is saved in session and `useAcceptLanguageHeader` is set to true, compute locale from browser and redirect to url with locale.\n - If a locale is saved in session redirect to url with locale, unless its the default locale and `hideDefaultLocaleInURL` is set to true.\n\nFor example, if a user navigates to http://url-to-laravel/test  and `en` is the current locale, it would redirect him automatically to http://url-to-laravel/en/test.\n\n### LocaleCookieRedirect\n\nSimilar to LocaleSessionRedirect, but it stores value in a cookie instead of a session.\n\nWhenever a locale is present in the url, it will be stored in the cookie by this middleware.\n\nIn there is no locale present in the url, then this middleware will check the following\n\n - If no locale is saved in cookie and `useAcceptLanguageHeader` is set to true, compute locale from browser and redirect to url with locale.\n - If a locale is saved in cookie redirect to url with locale, unless its the default locale and `hideDefaultLocaleInURL` is set to true.\n\nFor example, if a user navigates to http://url-to-laravel/test  and `de` is the current locale, it would redirect him automatically to http://url-to-laravel/de/test.\n\n\n### LaravelLocalizationRedirectFilter\n\nWhen the default locale is present in the url and `hideDefaultLocaleInURL` is set to true, then the middleware redirects to the url without locale.\n\nFor example, if `es` is the default locale, then http://url-to-laravel/es/test would be redirected to http://url-to-laravel/test and the`App::getLocale()` would be\nset to `es`.\n\n\n## Helpers\n\nThis package comes with a bunch of helpers.\n\n### Localized URLs\nLocalized URLS  taken into account [route model binding]([https://laravel.com/docs/master/routing#route-model-binding]) when generating the localized route,\naswell as the `hideDefaultLocaleInURL` and [Translated Routes](#translated-routes) settings.\n\n\n#### Get localized URL\n\n```php\n    // If current locale is Spanish, it returns `/es/test`\n    <a href=\"{{ LaravelLocalization::localizeUrl('/test') }}\">@lang('Follow this link')</a>\n```\n\n#### Get localized URL for an specific locale\nGet current URL in specific locale:\n\n```php\n// Returns current url with English locale.\n{{ LaravelLocalization::getLocalizedURL('en') }}\n```\n\n### Get Clean routes\n\nReturns a URL clean of any localization.\n\n```php\n// Returns /about\n{{ LaravelLocalization::getNonLocalizedURL('/es/about') }}\n```\n\n### Get URL for an specific translation key\n\nReturns a route, [localized](#translated-routes) to the desired locale. If the translation key does not exist in the locale given, this function will return false.\n\n\n```php\n// Returns /es/acerca\n{{ LaravelLocalization::getURLFromRouteNameTranslated('es', 'routes.about') }}\n```\n**Example of a localized link using routes with attributes**\n\n```php\n// An array of attributes can be provided.\n// Returns /en/archive/ghosts, /fr/archive/fantÃ´mes, /pt/arquivo/fantasmas, etc.\n<a href=\"{{ LaravelLocalization::getURLFromRouteNameTranslated( App::currentLocale(), 'routes.archive', array('category' => 'ghosts')) }}\">Ghost Stories</a>\n```\n\n\n### Get Supported Locales\n\nReturn all supported locales and their properties as an array.\n\n```php\n{{ LaravelLocalization::getSupportedLocales() }}\n```\n\n\n\n### Get Supported Locales Custom Order\n\nReturn all supported locales but in the order specified in the configuration file. You can use this function to print locales in the language selector.\n\n```php\n{{ LaravelLocalization::getLocalesOrder() }}\n```\n\n### Get Supported Locales Keys\n\nReturn an array with all the keys for the supported locales.\n\n```php\n{{ LaravelLocalization::getSupportedLanguagesKeys() }}\n```\n\n### Get Current Locale\n\nReturn the key of the current locale.\n\n```php\n{{ LaravelLocalization::getCurrentLocale() }}\n```\n\n### Get Current Locale Name\nReturn current locale's name as string (English/Spanish/Arabic/ ..etc).\n\n```php\n{{ LaravelLocalization::getCurrentLocaleName() }}\n```\n\n### Get Current Locale Native Name\nReturn current locale's native name as string (English/EspaÃ±ol/Ø¹Ø±Ø¨Ù/ ..etc).\n\n```php\n{{ LaravelLocalization::getCurrentLocaleNative() }}\n```\n\n### Get Current Locale Regional Name\nReturn current locale's regional name as string (en_GB/en_US/fr_FR/ ..etc).\n\n```php\n{{ LaravelLocalization::getCurrentLocaleRegional() }}\n```\n\n### Get Current Locale Direction\n\nReturn current locale's direction as string (ltr/rtl).\n\n\n```php\n{{ LaravelLocalization::getCurrentLocaleDirection() }}\n```\n\n\n\n### Get Current Locale Script\nReturn the [ISO 15924](http://www.unicode.org/iso15924) code for the current locale script as a string; \"Latn\", \"Cyrl\", \"Arab\", etc.\n\n```php\n{{ LaravelLocalization::getCurrentLocaleScript() }}\n```\n\n### Set view-base-path to current locale\n\nRegister the middleware `LaravelLocalizationViewPath` to set current locale as view-base-path.\n\nNow you can wrap your views in language-based folders like the translation files.\n\n`resources/views/en/`, `resources/views/fr`, ...\n\n\n### Map your own custom lang url segments\n\nAs you can modify the supportedLocales even by renaming their keys, it is possible to use the string ```uk``` instead of ```en-GB``` to provide custom lang url segments. Of course, you need to prevent any collisions with already existing keys and should stick to the convention as long as possible. But if you are using such a custom key, you have to store your mapping to the ```localesMapping``` array. This ```\nlocalesMapping``` is needed to enable the LanguageNegotiator to correctly assign the desired locales based on HTTP Accept Language Header. Here is a quick example how to map HTTP Accept Language Header 'en-GB' to url segment 'uk':\n\n```php\n// config/laravellocalization.php\n\n'localesMapping' => [\n\t'en-GB' => 'uk'\n],\n```\n\nAfter that ```http://url-to-laravel/en-GB/a/b/c``` becomes ```http://url-to-laravel/uk/a/b/c```.\n\n```php\nLaravelLocalization::getLocalizedURL('en-GB', 'a/b/c'); // http://url-to-laravel/uk/a/b/c\nLaravelLocalization::getLocalizedURL('uk', 'a/b/c'); // http://url-to-laravel/uk/a/b/c\n```\n\n## Creating a language selector\n\nIf you're supporting multiple locales in your project you will probably want to provide the users with a way to change language. Below is a simple example of blade template code you can use to create your own language selector.\n\n```blade\n<ul>\n    @foreach(LaravelLocalization::getSupportedLocales() as $localeCode => $properties)\n        <li>\n            <a rel=\"alternate\" hreflang=\"{{ $localeCode }}\" href=\"{{ LaravelLocalization::getLocalizedURL($localeCode, null, [], true) }}\">\n                {{ $properties['native'] }}\n            </a>\n        </li>\n    @endforeach\n</ul>\n```\nHere default language will be forced in getLocalizedURL() to be present in the URL even `hideDefaultLocaleInURL = true`.\n\nNote that Route Model Binding is supported.\n\n## Translated Routes\n\nYou may translate your routes. For example, http://url/en/about and http://url/es/acerca (acerca is about in spanish)\nor http://url/en/article/important-article and http://url/es/articulo/important-article (article is articulo in spanish) would be redirected to the same controller/view as follows:\n\nIt is necessary that at least the `localize` middleware in loaded in your `Route::group` middleware (See [installation instruction](#installation)).\n\nFor each language, add a `routes.php` into `resources/lang/**/routes.php` folder.\nThe file contains an array with all translatable routes. For example, like this:\n\n> Keep in mind: starting from [Laravel 9](https://laravel.com/docs/9.x/upgrade#the-lang-directory), the `resources/lang` folder is now located in the root project folder (`lang`).\n> If your project has `lang` folder in the root, you must add a `routes.php` into `lang/**/routes.php` folder.\n\n```php\n<?php\n// resources/lang/en/routes.php\nreturn [\n    \"about\"    =>  \"about\",\n    \"article\"  =>  \"article/{article}\",\n];\n```\n```php\n<?php\n// resources/lang/es/routes.php\nreturn [\n    \"about\"    =>  \"acerca\",\n    \"article\"  =>  \"articulo/{article}\",\n];\n```\n\nYou may add the routes in `routes/web.php` like this:\n\n```php\nRoute::group(['prefix' => LaravelLocalization::setLocale(),\n              'middleware' => [ 'localize' ]], function () {\n\n    Route::get(LaravelLocalization::transRoute('routes.about'), function () {\n        return view('about');\n    });\n\n    Route::get(LaravelLocalization::transRoute('routes.article'), function (\\App\\Article $article) {\n        return $article;\n    });\n\n    //,...\n});\n```\n\nOnce files are saved, you can access http://url/en/about , http://url/es/acerca , http://url/en/article/important-article and http://url/es/articulo/important-article without any problem.\n\n### Translatable route parameters\n\nMaybe you noticed in the previous example the English slug in the Spanish url:\n\n    http://url/es/articulo/important-article\n\nIt is possible to have translated slugs, for example like this:\n\n    http://url/en/article/important-change\n    http://url/es/articulo/cambio-importante\n\nHowever, in order to do this, each article must have many slugs (one for each locale).\nIts up to you how you want to implement this relation. The only requirement for translatable route parameters is, that the relevant model implements the interface `LocalizedUrlRoutable`.\n\n#### Implementing LocalizedUrlRoutable\n\nTo implement `\\Mcamara\\LaravelLocalization\\Interfaces\\LocalizedUrlRoutable`,\none has to create the function `getLocalizedRouteKey($locale)`, which must return for a given locale the translated slug. In the above example, inside the model article, `getLocalizedRouteKey('en')` should return `important-change` and `getLocalizedRouteKey('es')` should return `cambio-importante`.\n\n#### Route Model Binding\n\nTo use [route-model-binding](https://laravel.com/docs/routing#route-model-binding), one  should overwrite the function `resolveRouteBinding($slug)`\nin the model. The function should return the model that belongs to the translated slug `$slug`.\nFor example:\n\n```php\npublic function resolveRouteBinding($slug)\n{\n        return static::findByLocalizedSlug($slug)->first() ?? abort(404);\n}\n```\n\n#### Tutorial Video\n\nYou may want to checkout this [video](https://youtu.be/B1AUqCdizgc) which demonstrates how one may set up translatable route parameters.\n\n## Events\n\nYou can capture the URL parameters during translation if you wish to translate them too. To do so, just create an event listener for the `routes.translation` event like so:\n\n```php\nEvent::listen('routes.translation', function($locale, $attributes)\n{\n\t// Do your magic\n\n\treturn $attributes;\n});\n```\n\nBe sure to pass the locale and the attributes as parameters to the closure. You may also use Event Subscribers, see: [http://laravel.com/docs/events#event-subscribers](http://laravel.com/docs/events#event-subscribers)\n\n## Caching routes\n\nTo cache your routes, use:\n\n``` bash\nphp artisan route:trans:cache\n```\n\n... instead of the normal `route:cache` command. Using `artisan route:cache` will **not** work correctly!\n\nFor the route caching solution to work, it is required to make a minor adjustment to your application route provision.\n\n**before laravel 11** \n\nIn your App's `RouteServiceProvider`, use the `LoadsTranslatedCachedRoutes` trait:\n\n```php\n<?php\nclass RouteServiceProvider extends ServiceProvider\n{\n    use \\Mcamara\\LaravelLocalization\\Traits\\LoadsTranslatedCachedRoutes;\n```\n\n**after laravel 11** \n\nIn your App's `AppServiceProvider`, use the `CachedTranslatedRouteLoader` class in register method:\n\n```php\n<?php\nclass AppServiceProvider extends ServiceProvider\n{  \n    use \\Mcamara\\LaravelLocalization\\Traits\\LoadsTranslatedCachedRoutes;\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        RouteServiceProvider::loadCachedRoutesUsing(fn() => $this->loadCachedRoutes());\n        ...\n    }   \n```\n\n\n\nFor more details see [here](CACHING.md).\n\n## Common Issues\n\n### POST is not working\n\nThis may happen if you do not localize your action route that is inside your `Routes::group`.\nThis may cause a redirect, which then changes the post request into a get request.\nTo prevent that, simply use the [localize helper](#get-localized-url).\n\nFor example, if you use `Auth::routes()` and put them into your `Route::group` Then\n\n```\n<form action=\"/logout\" method=\"POST\">\n<button>Logout</button>\n</form>\n```\n\nwill not work. Instead, one has to use\n\n```php\n<form action=\"{{  \\LaravelLocalization::localizeURL('/logout') }} \" method=\"POST\">\n<button>Logout</button>\n</form>\n```\n\n\nAnother way to solve this is to put http method to config to 'laravellocalization.httpMethodsIgnored'\nto prevent of processing this type of requests\n\n### MethodNotAllowedHttpException\n\nIf you do not localize your post url and use a redirect middleware,\nthen the post request gets redirected as a get request.\nIf you have not defined such a get route, you will cause this exception.\n\nTo localize your post url see the example in [POST is not working](#post-is-not-working).\n\n### Validation message is only in default locale\n\nThis also happens if you did not localize your post url.\nIf you don't localize your post url, the default locale is set while validating,\nand when returning to `back()` it shows the validation message in default locale.\n\nTo localize your post url see the example in [POST is not working](#post-is-not-working).\n\n## Testing\n\nDuring the test setup, the called route is not yet known. This means no language can be set.\nWhen a request is made during a test, this results in a 404 - without the prefix set the localized route does not seem to exist.\n\nTo fix this, you can use this function to manually set the language prefix:\n```php\n// TestCase.php\nprotected function refreshApplicationWithLocale($locale)\n{\n    self::tearDown();\n    putenv(LaravelLocalization::ENV_ROUTE_KEY . '=' . $locale);\n    self::setUp();\n}\n\nprotected function tearDown(): void\n{\n    putenv(LaravelLocalization::ENV_ROUTE_KEY);\n    parent::tearDown();\n}\n\n// YourTest.php\npublic function testBasicTest()\n{\n    $this->refreshApplicationWithLocale('en');\n    // Testing code\n}\n```\n\n## Collaborators\n- [Adam Nielsen (iwasherefirst2)](https://github.com/iwasherefirst2)\n\nAsk [mcamara](https://github.com/mcamara) if you want to be one of them!\n\n## Changelog\n\nView changelog here -> [changelog](CHANGELOG.md)\n\n## License\n\nLaravel Localization is an open-sourced laravel package licensed under the MIT license\n"
        },
        {
          "name": "UPGRADING.md",
          "type": "blob",
          "size": 1.810546875,
          "content": "## From v1 to v2\nThis package now uses [dependency injection](https://laravel.com/docs/container#introduction) to retrieve dependencies from the container.\n\nThis modification is a breaking change, especially if you had made extensions to the `__construct` method within the `Mcamara\\LaravelLocalization\\LaravelLocalization` class.\nYou may now use depdency injection in your own implementation and forward the dependencies to the parent constructor.\n```php\nuse Mcamara\\LaravelLocalization\\LaravelLocalization;\nuse Illuminate\\Contracts\\Config\\Repository as ConfigRepository;\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse Illuminate\\Contracts\\Routing\\UrlGenerator;\nuse Illuminate\\Contracts\\Translation\\Translator;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Routing\\Router;\n\nclass MyLaravelLocalization extends LaravelLocalization\n{\n    public function __construct(\n        mixed $myCustomVariable,\n        Application $app,\n        ConfigRepository $configRepository,\n        Translator $translator,\n        Router $router,\n        Request $request,\n        UrlGenerator $url\n    ) {\n        parent::__construct($app, $configRepository, $translator, $router, $request, $url);\n    }\n}\n```\n\nIf your previous approach involved overriding the `LaravelLocalization` singleton in the container and generating a new instance of your custom implementation, there's now a more straightforward method for binding. This will automatically inject the correct dependencies for you.\n```diff\nuse Mcamara\\LaravelLocalization\\LaravelLocalization;\n\n-$this->app->singleton(LaravelLocalization::class, function () {\n-    return new MyLaravelLocalization();\n-});\n+$this->app->singleton(LaravelLocalization::class, MyLaravelLocalization::class);\n```\n\nFor more information, please see the following PR [#879](https://github.com/mcamara/laravel-localization/pull/879/files)"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.3359375,
          "content": "{\n    \"name\": \"mcamara/laravel-localization\",\n    \"description\": \"Easy localization for Laravel\",\n    \"keywords\": [\n        \"localization\",\n        \"laravel\",\n        \"php\"\n    ],\n    \"homepage\": \"https://github.com/mcamara/laravel-localization\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Marc CÃ¡mara\",\n            \"email\": \"mcamara88@gmail.com\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.2\",\n        \"laravel/framework\": \"^10.0|^11.0\"\n    },\n    \"require-dev\": {\n        \"orchestra/testbench-browser-kit\": \"^8.5|^9.0\",\n        \"phpunit/phpunit\": \"^10.1\"\n    },\n    \"suggest\": {\n        \"ext-intl\": \"*\"\n    },\n    \"scripts\": {\n        \"test\": \"vendor/bin/phpunit\"\n    },\n    \"autoload\": {\n        \"classmap\": [],\n        \"psr-0\": {\n            \"Mcamara\\\\LaravelLocalization\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Mcamara\\\\LaravelLocalization\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"Mcamara\\\\LaravelLocalization\\\\LaravelLocalizationServiceProvider\"\n            ],\n            \"aliases\": {\n                \"LaravelLocalization\": \"Mcamara\\\\LaravelLocalization\\\\Facades\\\\LaravelLocalization\"\n            }\n        }\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.650390625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    backupGlobals=\"false\"\n    bootstrap=\"vendor/autoload.php\"\n    colors=\"true\"\n    processIsolation=\"false\"\n    stopOnFailure=\"false\"\n    xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n    cacheDirectory=\".phpunit.cache\"\n    backupStaticProperties=\"false\"\n>\n    <testsuites>\n        <testsuite name=\"Package Test Suite\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n    <source>\n        <include>\n            <directory suffix=\".php\">./src/Mcamara</directory>\n        </include>\n    </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}