{
  "metadata": {
    "timestamp": 1736711802153,
    "page": 80,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "doctrine/persistence",
      "stars": 3961,
      "defaultBranch": "4.0.x",
      "files": [
        {
          "name": ".doctrine-project.json",
          "type": "blob",
          "size": 2.7646484375,
          "content": "{\n    \"active\": true,\n    \"name\": \"Persistence\",\n    \"slug\": \"persistence\",\n    \"docsSlug\": \"doctrine-persistence\",\n    \"versions\": [\n        {\n            \"name\": \"5.0\",\n            \"branchName\": \"5.0.x\",\n            \"slug\": \"latest\",\n            \"upcoming\": true\n        },\n        {\n            \"name\": \"4.1\",\n            \"branchName\": \"4.1.x\",\n            \"slug\": \"4.1\",\n            \"upcoming\": true\n        },\n        {\n            \"name\": \"4.0\",\n            \"branchName\": \"4.0.x\",\n            \"slug\": \"4.0\",\n            \"current\": true\n        },\n        {\n            \"name\": \"3.4\",\n            \"branchName\": \"3.4.x\",\n            \"slug\": \"3.4\",\n            \"maintained\": true\n        },\n        {\n            \"name\": \"3.3\",\n            \"branchName\": \"3.3.x\",\n            \"slug\": \"3.3\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"3.2\",\n            \"branchName\": \"3.2.x\",\n            \"slug\": \"3.2\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"3.1\",\n            \"branchName\": \"3.1.x\",\n            \"slug\": \"3.1\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"3.0\",\n            \"branchName\": \"3.0.x\",\n            \"slug\": \"3.0\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.5\",\n            \"branchName\": \"2.5.x\",\n            \"slug\": \"2.5\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.4\",\n            \"branchName\": \"2.4.x\",\n            \"slug\": \"2.4\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.3\",\n            \"branchName\": \"2.3.x\",\n            \"slug\": \"2.3\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.2\",\n            \"branchName\": \"2.2.x\",\n            \"slug\": \"2.2\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.1\",\n            \"branchName\": \"2.1.x\",\n            \"slug\": \"2.1\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.0\",\n            \"branchName\": \"2.0.x\",\n            \"slug\": \"2.0\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"1.4\",\n            \"branchName\": \"1.4.x\",\n            \"slug\": \"1.4\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"1.3\",\n            \"branchName\": \"1.3.x\",\n            \"slug\": \"1.3\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"1.2\",\n            \"branchName\": \"1.2.x\",\n            \"slug\": \"1.2\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"1.1\",\n            \"branchName\": \"1.1.x\",\n            \"slug\": \"1.1\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"1.0\",\n            \"branchName\": \"1.0.x\",\n            \"slug\": \"1.0\",\n            \"maintained\": false\n        }\n    ]\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4169921875,
          "content": "/docs export-ignore\n/tests export-ignore\n/tests_php74 export-ignore\n/tests_php81 export-ignore\n/.github export-ignore\n/.doctrine-project.json export-ignore\n/.gitattributes export-ignore\n/.gitignore export-ignore\n/.scrutinizer.yml export-ignore\n/.travis.yml export-ignore\n/phpunit.xml.dist export-ignore\n/phpcs.xml.dist export-ignore\n/phpstan.neon export-ignore\n/phpstan-baseline.neon export-ignore\n/composer.lock export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0830078125,
          "content": "/vendor/\n/phpunit.xml\n/phpcs.xml\n/.phpcs-cache\n/.phpunit.result.cache\n/composer.lock\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "Copyright (c) 2006-2015 Doctrine Project\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.8505859375,
          "content": "# Doctrine Persistence\n\n[![GitHub Actions][GA 4.0 image]][GA 4.0]\n[![Code Coverage][Coverage 4.0 image]][CodeCov 4.0]\n\nThe Doctrine Persistence project is a library that provides common abstractions for object mapper persistence.\n\n## More resources:\n\n* [Website](https://www.doctrine-project.org/)\n* [Documentation](https://www.doctrine-project.org/projects/doctrine-persistence/en/latest/index.html)\n* [Downloads](https://github.com/doctrine/persistence/releases)\n\n  [Coverage 4.0 image]: https://codecov.io/gh/doctrine/persistence/branch/4.0.x/graph/badge.svg\n  [CodeCov 4.0]: https://codecov.io/gh/doctrine/persistence/branch/4.0.x\n  [GA 4.0 image]: https://github.com/doctrine/persistence/actions/workflows/continuous-integration.yml/badge.svg?branch=4.0.x\n  [GA 4.0]: https://github.com/doctrine/persistence/actions/workflows/continuous-integration.yml?branch=4.0.x\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 6.263671875,
          "content": "Note about upgrading: Doctrine uses static and runtime mechanisms to raise\nawareness about deprecated code.\n\n- Use of `@deprecated` docblock that is detected by IDEs (like PHPStorm) or\n  Static Analysis tools (like Psalm, phpstan)\n- Use of our low-overhead runtime deprecation API, details:\n  https://github.com/doctrine/deprecations/\n\n# Upgrade to 4.0\n\n## BC Break: Removed `StaticReflectionService`\n\nThe class `Doctrine\\Persistence\\Mapping\\StaticReflectionService` is removed\nwithout replacement.\n\n## BC Break: Narrowed `ReflectionService::getClass()` return type\n\nThe return type of `ReflectionService::getClass()` has been narrowed so that\n`null` is no longer a valid return value.\n\n## BC Break: Added `ObjectManager::isUninitializedObject()`\n\nClasses implementing `Doctrine\\Persistence\\ObjectManager` must implement this\nnew method.\n\n## BC Break: Added type declarations\n\nThe code base is now fully typed, meaning properties, parameters and return\ntype declarations have been added to all types.\n\n## BC Break: Dropped support for Common proxies\n\nProxy objects implementing the `Doctrine\\Common\\Proxy\\Proxy` interface are not\nsupported anymore. Implement `Doctrine\\Persistence\\Proxy` instead.\n\n## BC Break: Removed deprecated ReflectionProperty overrides\n\nDeprecated classes have been removed:\n\n- `Doctrine\\Persistence\\Reflection\\RuntimePublicReflectionProperty`\n- `Doctrine\\Persistence\\Reflection\\TypedNoDefaultRuntimePublicReflectionProperty`\n\n# Upgrade to 3.4\n\n## Deprecated `StaticReflectionService`\n\nThe class `Doctrine\\Persistence\\Mapping\\StaticReflectionService` is deprecated\nwithout replacement.\n\n# Upgrade to 3.3\n\n## Added method `ObjectManager::isUninitializedObject()`\n\nClasses implementing `Doctrine\\Persistence\\ObjectManager` should implement the new\nmethod. This method will be added to the interface in 4.0.\n\n# Upgrade to 3.1\n\n## Deprecated `RuntimePublicReflectionProperty`\n\nUse `RuntimeReflectionProperty` instead.\n\n# Upgrade to 3.0\n\n## Removed `OnClearEventArgs::clearsAllEntities()` and `OnClearEventArgs::getEntityClass()`\n\nThese methods only make sense when partially clearing the object manager, which\nis no longer possible.\nThe second argument of the constructor of `OnClearEventArgs` is removed as well.\n\n## BC Break: removed `ObjectManagerAware`\n\nImplement active record style functionality directly in your application, by\nusing a `postLoad` event.\n\n## BC Break: removed `AnnotationDriver`\n\nUse `ColocatedMappingDriver` instead.\n\n## BC Break: Removed `MappingException::pathRequired()`\n\nUse `MappingException::pathRequiredForDriver()` instead.\n\n## BC Break: removed `LifecycleEventArgs::getEntity()`\n\nUse `LifecycleEventArgs::getObject()` instead.\n\n## BC Break: removed support for short namespace aliases\n\n- `AbstractClassMetadataFactory::getFqcnFromAlias()` is removed.\n- `ClassMetadataFactory` methods now require their `$className` argument to be an\nactual FQCN.\n\n## BC Break: removed `ObjectManager::merge()`\n\n`ObjectManagerDecorator::merge()` is removed without replacement.\n\n## BC Break: removed support for `doctrine/cache`\n\nRemoved support for using doctrine/cache for metadata caching. The\n`setCacheDriver` and `getCacheDriver` methods have been removed from\n`Doctrine\\Persistence\\Mapping\\AbstractMetadata`. Please use `getCache` and\n`setCache` with a PSR-6 implementation instead.\n\n## BC Break: changed signatures\n\n`$objectName` has been dropped from the signature of `ObjectManager::clear()`.\n\n```diff\n- public function clear($objectName = null)\n+ public function clear(): void\n```\n\nAlso, native parameter type declarations have been added on all public APIs.\nNative return type declarations have not been added so that it is possible to\nimplement types compatible with both 2.x and 3.x.\n\n## BC Break: Removed `PersistentObject`\n\nPlease implement this functionality directly in your application if you want\nActiveRecord style functionality.\n\n# Upgrade to 2.5\n\n## Deprecated `OnClearEventArgs::clearsAllEntities()` and `OnClearEventArgs::getEntityClass()`\n\nThese methods only make sense when partially clearing the object manager, which\nis deprecated.\nPassing a second argument to the constructor of `OnClearEventArgs` is\ndeprecated as well.\n\n## Deprecated `ObjectManagerAware`\n\nAlong with deprecating `PersistentObject`, deprecating `ObjectManagerAware`\nmeans deprecating support for active record, which already came with a word of\nwarning. Please implement this directly in your application with a `postLoad`\nevent if you need active record style functionality.\n\n## Deprecated `MappingException::pathRequired()`\n\n`MappingException::pathRequiredForDriver()` should be used instead.\n\n# Upgrade to 2.4\n\n## Deprecated `AnnotationDriver`\n\nSince attributes were introduced in PHP 8.0, annotations are deprecated.\n`AnnotationDriver` is an abstract class that is used when implementing concrete\nannotation drivers in dependent packages. It is deprecated in favor of using\n`ColocatedMappingDriver` to implement both annotation and attribute based\ndrivers. This will involve implementing `isTransient()` as well as\n`__construct()` and `getReader()` to retain backward compatibility.\n\n# Upgrade to 2.3\n\n## Deprecated using short namespace alias syntax in favor of `::class` syntax.\n\nBefore:\n\n```php\n$objectManager->find('MyPackage:MyClass', $id);\n$objectManager->createQuery('SELECT u FROM MyPackage:MyClass');\n```\n\nAfter:\n\n```php\n$objectManager->find(MyClass::class, $id);\n$objectManager->createQuery('SELECT u FROM '. MyClass::class);\n```\n\n# Upgrade to 2.2\n\n## Deprecated `doctrine/cache` usage for metadata caching\n\nThe `setCacheDriver` and `getCacheDriver` methods in\n`Doctrine\\Persistence\\Mapping\\AbstractMetadata` have been deprecated. Please\nuse `getCache` and `setCache` with a PSR-6 implementation instead. Note that\neven after switching to PSR-6, `getCacheDriver` will return a cache instance\nthat wraps the PSR-6 cache. Note that if you use a custom implementation of\ndoctrine/cache, the library may not be able to provide a forward compatibility\nlayer. The cache implementation MUST extend the\n`Doctrine\\Common\\Cache\\CacheProvider` class.\n\n# Upgrade to 1.2\n\n## Deprecated `ObjectManager::merge()` and `ObjectManager::detach()`\n\nPlease handle merge operations in your application, and use\n`ObjectManager::clear()` instead.\n\n## Deprecated `PersistentObject`\n\nPlease implement this functionality directly in your application if you want\nActiveRecord style functionality.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.650390625,
          "content": "{\n    \"name\": \"doctrine/persistence\",\n    \"type\": \"library\",\n    \"description\": \"The Doctrine Persistence project is a set of shared interfaces and functionality that the different Doctrine object mappers share.\",\n    \"keywords\": [\n        \"persistence\",\n        \"object\",\n        \"mapper\",\n        \"orm\",\n        \"odm\"\n    ],\n    \"homepage\": \"https://www.doctrine-project.org/projects/persistence.html\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\"name\": \"Guilherme Blanco\", \"email\": \"guilhermeblanco@gmail.com\"},\n        {\"name\": \"Roman Borschel\", \"email\": \"roman@code-factory.org\"},\n        {\"name\": \"Benjamin Eberlei\", \"email\": \"kontakt@beberlei.de\"},\n        {\"name\": \"Jonathan Wage\", \"email\": \"jonwage@gmail.com\"},\n        {\"name\": \"Johannes Schmitt\", \"email\": \"schmittjoh@gmail.com\"},\n        {\"name\": \"Marco Pivetta\", \"email\": \"ocramius@gmail.com\"}\n    ],\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"doctrine/event-manager\": \"^1 || ^2\",\n        \"psr/cache\": \"^1.0 || ^2.0 || ^3.0\"\n    },\n    \"require-dev\": {\n        \"phpstan/phpstan\": \"1.12.7\",\n        \"phpstan/phpstan-phpunit\": \"^1\",\n        \"phpstan/phpstan-strict-rules\": \"^1.1\",\n        \"doctrine/coding-standard\": \"^12\",\n        \"phpunit/phpunit\": \"^9.6\",\n        \"symfony/cache\": \"^4.4 || ^5.4 || ^6.0 || ^7.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Doctrine\\\\Persistence\\\\\": \"src/Persistence\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Doctrine\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"dealerdirect/phpcodesniffer-composer-installer\": true,\n            \"composer/package-versions-deprecated\": true\n        }\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpcs.xml.dist",
          "type": "blob",
          "size": 1.240234375,
          "content": "<?xml version=\"1.0\"?>\n<ruleset>\n    <arg name=\"basepath\" value=\".\"/>\n    <arg name=\"extensions\" value=\"php\"/>\n    <arg name=\"parallel\" value=\"80\"/>\n    <arg name=\"cache\" value=\".phpcs-cache\"/>\n    <arg name=\"colors\"/>\n\n    <!-- Ignore warnings and show progress of the run -->\n    <arg value=\"nps\"/>\n\n    <config name=\"php_version\" value=\"80100\"/>\n\n    <file>src</file>\n    <file>tests</file>\n\n    <rule ref=\"Doctrine\">\n        <exclude name=\"SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly.ReferencedGeneralException\"/>\n    </rule>\n\n    <rule ref=\"PSR1.Classes.ClassDeclaration.MultipleClasses\">\n        <exclude-pattern>tests/*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Squiz.Classes.ClassFileName.NoMatch\">\n        <exclude-pattern>tests/*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming\">\n        <exclude-pattern>src/Persistence/AbstractManagerRegistry.php</exclude-pattern>\n        <exclude-pattern>src/Persistence/Mapping/AbstractClassMetadataFactory.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.Classes.SuperfluousExceptionNaming.SuperfluousSuffix\">\n        <exclude-pattern>src/Persistence/Mapping/MappingException.php</exclude-pattern>\n    </rule>\n</ruleset>\n"
        },
        {
          "name": "phpstan-baseline.neon",
          "type": "blob",
          "size": 4.990234375,
          "content": "parameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined static method T of object\\\\:\\\\:loadMetadata\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Persistence/Mapping/Driver/StaticPHPDriver.php\n\n\t\t-\n\t\t\tmessage: \"#^Doctrine\\\\\\\\Persistence\\\\\\\\Reflection\\\\\\\\EnumReflectionProperty\\\\:\\\\:__construct\\\\(\\\\) does not call parent constructor from ReflectionProperty\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Persistence/Reflection/EnumReflectionProperty.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Doctrine\\\\\\\\Persistence\\\\\\\\Reflection\\\\\\\\EnumReflectionProperty\\\\:\\\\:getDeclaringClass\\\\(\\\\) return type with generic class ReflectionClass does not specify its types\\\\: T$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Persistence/Reflection/EnumReflectionProperty.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Doctrine\\\\\\\\Persistence\\\\\\\\Reflection\\\\\\\\EnumReflectionProperty\\\\:\\\\:toEnum\\\\(\\\\) should return array\\\\<BackedEnum\\\\>\\\\|BackedEnum but returns array\\\\<BackedEnum\\\\|int\\\\|string\\\\>\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Persistence/Reflection/EnumReflectionProperty.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$callback of function array_map expects \\\\(callable\\\\(BackedEnum\\\\|int\\\\|string\\\\)\\\\: mixed\\\\)\\\\|null, array\\\\{class\\\\-string\\\\<BackedEnum\\\\>, 'from'\\\\} given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Persistence/Reflection/EnumReflectionProperty.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to static method PHPUnit\\\\\\\\Framework\\\\\\\\Assert\\\\:\\\\:assertSame\\\\(\\\\) with array\\\\{'Doctrine\\\\\\\\\\\\\\\\Tests…', 'Doctrine\\\\\\\\\\\\\\\\Tests\\\\\\\\\\\\\\\\ORM…', 'Doctrine\\\\\\\\\\\\\\\\Tests\\\\\\\\\\\\\\\\ORM…'\\\\} and array\\\\<int, class\\\\-string\\\\> will always evaluate to false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Persistence/Mapping/DriverChainTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to static method PHPUnit\\\\\\\\Framework\\\\\\\\Assert\\\\:\\\\:assertSame\\\\(\\\\) with array\\\\{'Doctrine\\\\\\\\\\\\\\\\Tests…', 'Other\\\\\\\\\\\\\\\\Class'\\\\} and array\\\\<int, class\\\\-string\\\\> will always evaluate to false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Persistence/Mapping/DriverChainTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to static method PHPUnit\\\\\\\\Framework\\\\\\\\Assert\\\\:\\\\:assertInstanceOf\\\\(\\\\) with 'Doctrine\\\\\\\\\\\\\\\\Persistence\\\\\\\\\\\\\\\\Reflection\\\\\\\\\\\\\\\\RuntimeReflectionProperty' and Doctrine\\\\\\\\Persistence\\\\\\\\Reflection\\\\\\\\RuntimeReflectionProperty will always evaluate to true\\\\.$#\"\n\t\t\tcount: 3\n\t\t\tpath: tests/Persistence/Mapping/RuntimeReflectionServiceTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to static method PHPUnit\\\\\\\\Framework\\\\\\\\Assert\\\\:\\\\:assertInstanceOf\\\\(\\\\) with 'ReflectionProperty' and Doctrine\\\\\\\\Persistence\\\\\\\\Reflection\\\\\\\\RuntimeReflectionProperty will always evaluate to true\\\\.$#\"\n\t\t\tcount: 5\n\t\t\tpath: tests/Persistence/Mapping/RuntimeReflectionServiceTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Doctrine\\\\\\\\Tests\\\\\\\\Persistence\\\\\\\\Mapping\\\\\\\\RuntimeReflectionServiceTest\\\\:\\\\:\\\\$nonTypedDefaultProperty is never read, only written\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Persistence/Mapping/RuntimeReflectionServiceTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Doctrine\\\\\\\\Tests\\\\\\\\Persistence\\\\\\\\Mapping\\\\\\\\RuntimeReflectionServiceTest\\\\:\\\\:\\\\$nonTypedNoDefaultProperty is unused\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Persistence/Mapping/RuntimeReflectionServiceTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Doctrine\\\\\\\\Tests\\\\\\\\Persistence\\\\\\\\Mapping\\\\\\\\RuntimeReflectionServiceTest\\\\:\\\\:\\\\$typedDefaultProperty is never read, only written\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Persistence/Mapping/RuntimeReflectionServiceTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Doctrine\\\\\\\\Tests\\\\\\\\Persistence\\\\\\\\Mapping\\\\\\\\RuntimeReflectionServiceTest\\\\:\\\\:\\\\$typedNoDefaultProperty is unused\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Persistence/Mapping/RuntimeReflectionServiceTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to static method PHPUnit\\\\\\\\Framework\\\\\\\\Assert\\\\:\\\\:assertSame\\\\(\\\\) with array\\\\{'Foo\\\\\\\\\\\\\\\\stdClass', 'Foo\\\\\\\\\\\\\\\\sub\\\\\\\\\\\\\\\\subClass', 'Foo\\\\\\\\\\\\\\\\sub\\\\\\\\\\\\\\\\subsub…'\\\\} and array\\\\<int, class\\\\-string\\\\> will always evaluate to false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Persistence/Mapping/SymfonyFileLocatorTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to static method PHPUnit\\\\\\\\Framework\\\\\\\\Assert\\\\:\\\\:assertSame\\\\(\\\\) with non\\\\-empty\\\\-array\\\\<int, 'Foo\\\\\\\\\\\\\\\\Bar\\\\\\\\\\\\\\\\subDirClass'\\\\|'Foo\\\\\\\\\\\\\\\\global'\\\\|'Foo\\\\\\\\\\\\\\\\stdClass'\\\\> and array\\\\<int, class\\\\-string\\\\> will always evaluate to false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Persistence/Mapping/SymfonyFileLocatorTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to static method PHPUnit\\\\\\\\Framework\\\\\\\\Assert\\\\:\\\\:assertSame\\\\(\\\\) with non\\\\-empty\\\\-array\\\\<int, 'Foo\\\\\\\\\\\\\\\\Bar\\\\\\\\\\\\\\\\subDirClass'\\\\|'Foo\\\\\\\\\\\\\\\\stdClass'\\\\> and array\\\\<int, class\\\\-string\\\\> will always evaluate to false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Persistence/Mapping/SymfonyFileLocatorTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Doctrine\\\\\\\\Tests\\\\\\\\Persistence\\\\\\\\Reflection\\\\\\\\TypedFoo\\\\:\\\\:\\\\$id is never read, only written\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Persistence/Reflection/TypedNoDefaultReflectionPropertyTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Doctrine\\\\\\\\Tests\\\\\\\\Persistence\\\\\\\\RuntimeReflectionPropertyTestProxyMock\\\\:\\\\:__setInitialized\\\\(\\\\) has parameter \\\\$initialized with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Persistence/RuntimeReflectionPropertyTest.php\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 1.3369140625,
          "content": "includes:\n    - vendor/phpstan/phpstan-phpunit/extension.neon\n    - vendor/phpstan/phpstan-phpunit/rules.neon\n    - vendor/phpstan/phpstan-strict-rules/rules.neon\n    - phpstan-baseline.neon\n\nparameters:\n    level: 7\n    phpVersion: 80100\n\n    paths:\n        - src\n        - tests\n\n    excludePaths:\n        - tests/Persistence/Mapping/_files/Doctrine.Tests.Persistence.Mapping.PHPTestEntity.php\n\n    ignoreErrors:\n        - '#Variable property access on \\$this\\(Doctrine\\\\Persistence\\\\Reflection\\\\TypedNoDefaultReflectionProperty\\)\\.#'\n        -\n            message: '#Parameter \\#1 \\$class of method Doctrine\\\\Persistence\\\\Mapping\\\\RuntimeReflectionService\\:\\:getParentClasses\\(\\) expects class\\-string, string given\\.#'\n            path: 'tests/Persistence/Mapping/RuntimeReflectionServiceTest.php'\n\n        # https://github.com/phpstan/phpstan/issues/5009\n        -\n            message: '#Call to function assert\\(\\) with true will always evaluate to true\\.#'\n            path: 'src/Persistence/Reflection/TypedNoDefaultReflectionProperty.php'\n\n        -\n            message: '#Instanceof between Closure and Closure will always evaluate to true\\.#'\n            path: 'src/Persistence/Reflection/TypedNoDefaultReflectionProperty.php'\n\n        -\n            message: '#Class Foo not found#'\n            path: 'tests/Persistence/Mapping/ClassMetadataFactoryTest.php'\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.5595703125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n         colors=\"true\"\n         beStrictAboutOutputDuringTests=\"true\"\n         beStrictAboutTodoAnnotatedTests=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"Doctrine Persistence Test Suite\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n\n    <filter>\n        <whitelist>\n            <directory>src</directory>\n        </whitelist>\n    </filter>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}