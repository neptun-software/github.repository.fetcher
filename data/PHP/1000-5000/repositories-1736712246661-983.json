{
  "metadata": {
    "timestamp": 1736712246661,
    "page": 983,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jeremykendall/php-domain-parser",
      "stars": 1174,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.23828125,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.neon]\nindent_size = 2\n\n[*.xml.dist]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.45703125,
          "content": "* text=auto\n\n/.editorconfig       export-ignore\n/.gitattributes      export-ignore\n/.github             export-ignore\n/.gitignore          export-ignore\n/.php-cs-fixer.php   export-ignore\n/phpstan.neon        export-ignore\n/phpunit.xml.dist    export-ignore\n/psalm.xml           export-ignore\n/test_data/          export-ignore\n/CHANGELOG.md        export-ignore\n/UPGRADING.md        export-ignore\n/README.md           export-ignore\n/**/*Test.php        export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.09375,
          "content": "data\nvendor\ndocs\nbuild\npdp\n.idea\n.phpunit.cache\n.php_cs.cache\n.php-cs-fixer.cache\ncomposer.lock\n"
        },
        {
          "name": ".php-cs-fixer.php",
          "type": "blob",
          "size": 1.794921875,
          "content": "<?php\n\n$finder = PhpCsFixer\\Finder::create()\n    ->in(__DIR__.'/src')\n;\n\n$config = new PhpCsFixer\\Config();\n\nreturn $config\n    ->setRules([\n        '@PSR2' => true,\n        'array_syntax' => ['syntax' => 'short'],\n        'concat_space' => ['spacing' => 'none'],\n        'global_namespace_import' => [\n            'import_classes' => true,\n            'import_constants' => true,\n            'import_functions' => true,\n        ],\n        'list_syntax' => ['syntax' => 'short'],\n        'new_with_parentheses' => true,\n        'no_blank_lines_after_phpdoc' => true,\n        'no_empty_phpdoc' => true,\n        'no_empty_comment' => true,\n        'no_leading_import_slash' => true,\n        'no_superfluous_phpdoc_tags' => [\n            'allow_mixed' => true,\n            'remove_inheritdoc' => true,\n            'allow_unused_params' => false,\n        ],\n        'no_trailing_comma_in_singleline' => true,\n        'no_unused_imports' => true,\n        'nullable_type_declaration_for_default_null_value' => true,\n        'ordered_imports' => ['imports_order' => ['class', 'function', 'const'], 'sort_algorithm' => 'alpha'],\n        'phpdoc_add_missing_param_annotation' => ['only_untyped' => true],\n        'phpdoc_align' => true,\n        'phpdoc_no_empty_return' => true,\n        'phpdoc_order' => true,\n        'phpdoc_scalar' => true,\n        'phpdoc_to_comment' => true,\n        'phpdoc_summary' => true,\n        'psr_autoloading' => true,\n        'return_type_declaration' => ['space_before' => 'none'],\n        'blank_lines_before_namespace' => true,\n        'single_quote' => true,\n        'space_after_semicolon' => true,\n        'ternary_operator_spaces' => true,\n        'trailing_comma_in_multiline' => true,\n        'trim_array_spaces' => true,\n        'whitespace_after_comma_in_array' => true,\n    ])\n    ->setFinder($finder);\n"
        },
        {
          "name": "ASF-LICENSE-2.0",
          "type": "blob",
          "size": 1.083984375,
          "content": "This license is included in this distribution to satisfy the ASF License 2.0.\nCertain clearly marked portions of this project are derivative works of the\nregistered-domain-libs project, which can be found here:\nhttps://github.com/usrflo/registered-domain-libs\n\nLicense text begins below\n\nLicensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to you under the Apache License, Version 2.0\n(the \"License\"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at:\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied.\nSee the License for the specific language governing permissions\nand\nlimitations under the License.\n\nFlorian Sager, 25.07.2008, sager@agitos.de,\nhttp://www.agitos.de\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 12.443359375,
          "content": "# Changelog\n\nAll Notable changes to `PHP Domain Parser` starting from the **5.x** series will be documented in this file\n\n## [6.3.0] - 2023-02-25\n\n### Added\n\n- `RegisteredName` class to allow domain with IP4-like labels\n\n### Fixed\n\n- Using PHPUnit 10\n- `Domain` decorates the new `RegisteredName` class [#347](https://github.com/jeremykendall/php-domain-parser/issues/347)\n- `Host::withoutLabel` works without arguments.\n\n### Deprecated\n\n- None\n\n### Removed\n\n- None\n\n## [6.2.0] - 2022-10-30\n\n### Added\n\n- None\n\n### Fixed \n\n- None\n\n### Deprecated\n\n- None\n\n### Removed\n\n- PHP7 and PHP8.0 support\n\n## [6.1.2] - 2022-09-29\n\n### Added\n\n- None\n\n### Fixed\n\n- [#321](https://github.com/jeremykendall/php-domain-parser/issues/334) remove regression to resolving private domain suffix.\n\n### Deprecated\n\n- None\n\n### Removed\n\n- None\n\n## [6.1.1] - 2022-02-18\n\n### Added\n\n- None\n\n### Fixed\n\n- [#321](https://github.com/jeremykendall/php-domain-parser/issues/321) improve resolving private domain suffix. `Rules::getPrivateDomain` will now throw if the domain name does not contain a \"private\" TLD.\n\n### Deprecated\n\n- None\n\n### Removed\n\n- None\n\n## [6.1.0] - 2021-06-19\n\n### Added\n\n- `TimeToLive::until`\n- `TimeToLive::fromDurationString`\n\n### Fixed\n\n- `.gitattributes` files to be filter out.\n- `TimeToLive` marked as internal\n- `Host::toUnicode` method MUST never throw exceptions on conversion according to RFC3490.\n- `UnableToResolveDomain` typo in the exception message\n\n### Deprecated\n\n- `TimeToLive::fromDateTimeInterface` use `TimeToLive::fromNow`\n- `TimeToLive::fromScalar` use `TimeToLive::convert`\n\n### Removed\n\n- None\n\n## [6.0.0] - 2020-12-13\n\n### Added\n\n- Adding proper Interfaces\n- Added `Domain::clear` to easily initialize an empty domain object\n- Added `Domain::slice` to easily slice a domain object\n- Added `ResolvedDomain` object to normalize Resolver results.\n- Added `Suffix` object to replace the `PublicSuffix` object from v5.\n- Public Suffix List and IANA Top Level Domain List are fully decoupled\n- Added `Idna`, IDN support has been completely revamped\n- Added internal `Stream` class, to improve path/stream resolution\n- Resolver uses by default UTS#46 IDNA2008 algorithm to convert domain names\n- Storage capability is now optional and can be based on PHP-FIG related interfaces to improve interoperability\n- `Pdp\\TopLevelDomains::getIANADomain` which throws on syntax error and if no effective TLD is found (behave like `Pdp\\TopLevelDomains::resolve` in v5).\n\n### Fixed\n\n- The `Pdp\\Domain` class not longer directly exposes Effective TLD status.\n- Effective TLD resolver (`Pdp\\Rules::resolve` and `Pdp\\TopLevelDomains::resolve`) no longer accept IDNA options.\n- `Rules::getICANNDomain`, `Rules::getPrivateDomain` will throw even if a `PublicSuffix` is found but does not belong to the correct PSL section.\n- `Pdp\\TopLevelDomains::resolve` acts like `Pdp\\Rules::resolve` and only throw on `TypeError`\n\n### Deprecated\n\n- None\n\n### Removed\n\n- `__toString` and `__debugInfo` usage\n- Support for PHP7.4-\n- Composer script for automatic updates of the remote databases\n- CLI command `bin/update-psl`\n- `Pdp\\Cache`, `Pdp\\CacheException`: The package PSR-16 Cache implementation using the underlying filesystem.\n- `Pdp\\HttpClient`, `Pdp\\CurlHttpClient` and `Pdp\\HttpClientException`: The package Http Client.\n- `Pdp\\Installer`, `Pdp\\Manager`: The package source manager and installer\n- `Pdp\\Logger`, The package logger implementation\n- `Pdp\\Rules::ALL_DOMAINS` constant deprecated in version 5.3\n- `Pdp\\Domain::getDomain` deprecated in version 5.3\n- `Pdp\\Domain::resolve`\n- `Pdp\\Domain::getPublicSuffix` replaced by `Pdp\\ResolvedDomain::suffix`\n- `Pdp\\Domain::getRegistrableDomain` replaced by `Pdp\\ResolvedDomain::registrableDomain`\n- `Pdp\\Domain::getSubDomain` replaced by `Pdp\\ResolvedDomain::subDomain`\n- `Pdp\\Domain::withPublicSuffix` replaced by `Pdp\\ResolvedDomain::withSuffix`\n- `Pdp\\Domain::getLabel` replaced by `Pdp\\Domain::label`\n- `Pdp\\Domain::isTransitionalDifferent` replaced by `Pdp\\IdnaInfo::isTransitionalDifferent`\n- `Pdp\\PublicSuffix` replaced by `Pdp\\Suffix`\n- Accessing suffix information from the `Pdp\\Domain` object is no longer possible you need to do it from `Pdp\\Suffix`\n- `Pdp\\TopLevelDomains::contains` without replacement\n- Internal Converter classes (implementation details are no longer exposed).\n\n## [5.7.2] - 2020-10-25\n\n### Added\n\n- None\n\n### Fixed\n\n- Added support for PHP8 see [#289](https://github.com/jeremykendall/php-domain-parser/pull/289) based on works by [@szepeviktor](https://github.com/szepeviktor)\n\n### Deprecated\n\n- None\n\n### Remove\n\n- None\n\n## [5.7.1] - 2020-08-24\n\n### Added\n\n- None\n\n### Fixed\n\n- Cache throws when cache directory doesn't exist [#280](https://github.com/jeremykendall/php-domain-parser/issues/280)\n\n### Deprecated\n\n- None\n\n### Removed\n\n- None\n\n## [5.7.0] - 2020-08-02\n\n### Added\n\n- `Rules::getCookieDomain`\n- `Rules::getICANNDomain`\n- `Rules::getPrivateDomain`\n- `CouldNotResolvePublicSuffix::dueToUnresolvableDomain`\n\n### Fixed\n\n- Improve type hinting and return type by dropping EOL PHP versions support.\n- Improve development environment by dropping EOL PHP versions support.\n- Composer script\n\n### Deprecated\n\n- None\n\n### Removed\n\n- Support for PHP7.0 and PHP7.1\n- The external data from IANA and mozilla is no longer part of the package and will be downloaded only on demand on composer update/install.\n\n## [5.6.0] - 2019-12-29\n\n### Added\n\n- A simple `Psr3` compatible logger class which output the logs to you cli console.\n\n### Fixed\n\n- `composer.json` updated to be composer 2.0 ready\n- package bundle installer is rewritten to improve its usage see [#249](https://github.com/jeremykendall/php-domain-parser/issues/249) and [#250](https://github.com/jeremykendall/php-domain-parser/issues/250)\n\n### Deprecated\n\n- None\n\n### Removed\n\n- None\n\n## [5.5.0] - 2019-04-14\n\n### Added\n\n- Support for IDNA options see [#236](https://github.com/jeremykendall/php-domain-parser/pull/236) thanks to [Insolita](https://github.com/Insolita). \n\n- `PublicSuffix::labels` and `Domain::labels` to return the VO labels see [#241](https://github.com/jeremykendall/php-domain-parser/pull/241)\n\n- `IDNAConverterTrait::parse` (internal)\n\n### Fixed\n\n- Don't swallow cache errors [#232](https://github.com/jeremykendall/php-domain-parser/issues/232)\n- Update travis settings to allow testing against future version of PHP.\n\n### Deprecated\n\n- `IDNAConverterTrait::setLabels` replaced by `IDNAConverterTrait::parse` (internal)\n\n### Removed\n\n- None\n\n## [5.4.0] - 2018-11-22\n\n### Added\n\n- `Pdp\\TopLevelDomains` to allow resolving domain againts IANA Root zone database\n- `Pdp\\TLDConverter` converts the IANA Root Zones database into an associative array\n- `Pdp\\Manager::getTLDs` a service to return a cache version of the IANA Root zone database\n- `Pdp\\Manager::refreshTLDs` a service to refresh the cache version of the IANA Root zone database\n-  added a new `$ttl` parameter to improve PSR-16 supports to\n\t- `Pdp\\Manager::__construct`\n\t- `Pdp\\Manager::getRules`\n\t- `Pdp\\Manager::refreshRules`\n- `Pdp\\Exception\\CouldNotLoadTLDs` exception\n\n### Fixed\n\n- `Pdp\\IDNAConverterTrait::setLabels` improve IDN domain handling\n- `Pdp\\IDNAConverterTrait` throws a `UnexpectedValueException` if the Intl extension is misconfigured see [#230](https://github.com/jeremykendall/php-domain-parser/issues/230)\n\n### Deprecated\n\n- None\n\n### Removed\n\n- None\n\n## [5.3.0] - 2018-05-22\n\n### Added\n\n- `Pdp\\PublicSuffixListSection` interface implemented by `Pdp\\Rules` and `Pdp\\PublicSuffix`\n- `Pdp\\DomainInterface` interface implemented by `Pdp\\Domain` and `Pdp\\PublicSuffix`\n- `Pdp\\Domain::getContent` replaces `Pdp\\Domain::getDomain`\n- `Pdp\\Domain::withLabel` adds a new label to the `Pdp\\Domain`.\n- `Pdp\\Domain::withoutLabel` removes labels from the `Pdp\\Domain`.\n- `Pdp\\Domain::withPublicSuffix` updates the `Pdp\\Domain` public suffix part.\n- `Pdp\\Domain::withSubDomain` updates the `Pdp\\Domain` sub domain part.\n- `Pdp\\Domain::append` appends a label to `Pdp\\Domain`.\n- `Pdp\\Domain::prepend` prepends a label to `Pdp\\Domain`.\n- `Pdp\\Domain::resolve` attach a public suffix to the `Pdp\\Domain`.\n- `Pdp\\Domain::isResolvable` tells whether the current `Pdp\\Domain` can have a public suffix attached to it or not.\n- `Pdp\\PublicSuffix::createFromDomain` returns a new `Pdp\\PublicSuffix` object from a `Pdp\\Domain`object\n- `Pdp\\Exception` sub namespace to organize exception. All exception extends the `Pdp\\Exception` class to prevent BC break.\n\n### Fixed\n\n- `Pdp\\Domain` domain part computation (public suffix, registrable domain and sub domain)\n- `Pdp\\Domain` and `Pdp\\PublicSuffix` host validation compliance to RFC improved\n- Improve `Pdp\\Converter` and `Pdp\\Manager` class to better report error on IDN conversion.\n- Improve `Pdp\\Installer` vendor directory resolution see [PR #222](https://github.com/jeremykendall/php-domain-parser/pull/222)\n- `Pdp\\Exception` nows extends `InvalidArgumentException` instead of `RuntimeException`\n\n### Deprecated\n\n- `Pdp\\Domain::getDomain` use instead `Pdp\\Domain::getContent`\n- `Pdp\\Rules::ALL_DOMAINS` use the empty string instead\n\n### Removed\n\n- None\n\n## [5.2.0] - 2018-02-23\n\n### Added\n\n- `Pdp\\Rules::getPublicSuffix` returns a `Pdp\\PublicSuffix` value object\n- `Pdp\\Rules::__set_state` is implemented\n- `Pdp\\Domain::toUnicode` returns a `Pdp\\Domain` with its value converted to its Unicode form\n- `Pdp\\Domain::toAscii` returns a `Pdp\\Domain` with its value converted to its AScii form\n- `Pdp\\PublicSuffix::toUnicode` returns a `Pdp\\PublicSuffix` with its value converted to its Unicode form\n- `Pdp\\PublicSuffix::toAscii` returns a `Pdp\\PublicSuffix` with its value converted to its AScii form\n\n### Fixed\n\n- `Pdp\\Domain::getDomain` returns the normalized form of the domain name\n- `Pdp\\PublicSuffix` is no longer internal.\n- Normalizes IDN conversion using a internal `IDNConverterTrait`\n- Internal code improved by requiring PHPStan for development\n\n### Deprecated\n\n- None\n\n### Removed\n\n- None\n\n## [5.1.0] - 2017-12-18\n\n### Added\n\n- `Pdp\\Rules::createFromPath` named constructor to returns a new instance from a path\n- `Pdp\\Rules::createFromString` named constructor to returns a new instance from a string\n\n### Fixed\n\n- None\n\n### Deprecated\n\n- None\n\n### Removed\n\n- None\n\n## [5.0.0] - 2017-12-13\n\n### Added\n\n- `Pdp\\Exception` a base exception for the library\n- `Pdp\\Rules` a class to resolve domain name against the public suffix list\n- `Pdp\\Domain` an immutable value object to represents a parsed domain name\n- `Pdp\\Installer` a class to enable improve PSL maintenance\n- `Pdp\\Cache` a PSR-16 file cache implementation to cache a local copy of the PSL\n- `Pdp\\Manager` a class to enable managing PSL sources and `Rules` objects creation\n- `Pdp\\Converter` a class to convert the PSL into a PHP array\n\n### Fixed\n\n- invalid domain names improved supported\n- idn_* conversion error better handled\n- domain name with RFC3986 encoded string improved supported\n\n### Deprecated\n\n- None\n\n### Removed\n\n- PHP5 support\n- URL Parsing capabilities and domain name validation\n- `Pdp\\PublicSuffixList` class replaced by the `Pdp\\Rules` class\n- `Pdp\\PublicSuffixManager` class replaced by the `Pdp\\Manager` class\n- `Pdp\\HttpAdapter\\HttpAdapterInterface` interface replaced by the `Pdp\\HttpClient` interface\n- `Pdp\\HttpAdapter\\CurlHttpAdapter` class replaced by the `Pdp\\CurlHttpClient` class\n\n[6.3.0]: https://github.com/jeremykendall/php-domain-parser/compare/6.2.0...6.3.0\n[6.2.0]: https://github.com/jeremykendall/php-domain-parser/compare/6.1.2...6.2.0\n[6.1.2]: https://github.com/jeremykendall/php-domain-parser/compare/6.1.1...6.1.2\n[6.1.1]: https://github.com/jeremykendall/php-domain-parser/compare/6.1.0...6.1.1\n[6.1.0]: https://github.com/jeremykendall/php-domain-parser/compare/6.0.0...6.1.0\n[6.0.0]: https://github.com/jeremykendall/php-domain-parser/compare/5.7.2...6.0.0\n[6.0.0]: https://github.com/jeremykendall/php-domain-parser/compare/5.7.2...6.0.0\n[5.7.2]: https://github.com/jeremykendall/php-domain-parser/compare/5.7.1...5.7.2\n[5.7.1]: https://github.com/jeremykendall/php-domain-parser/compare/5.7.0...5.7.1\n[5.7.0]: https://github.com/jeremykendall/php-domain-parser/compare/5.6.0...5.7.0\n[5.6.0]: https://github.com/jeremykendall/php-domain-parser/compare/5.5.0...5.6.0\n[5.5.0]: https://github.com/jeremykendall/php-domain-parser/compare/5.4.0...5.5.0\n[5.4.0]: https://github.com/jeremykendall/php-domain-parser/compare/5.3.0...5.4.0\n[5.3.0]: https://github.com/jeremykendall/php-domain-parser/compare/5.2.0...5.3.0\n[5.2.0]: https://github.com/jeremykendall/php-domain-parser/compare/5.1.0...5.3.0\n[5.1.0]: https://github.com/jeremykendall/php-domain-parser/compare/5.0.0...5.1.0\n[5.0.0]: https://github.com/jeremykendall/php-domain-parser/compare/3.0.0...5.0.0\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0859375,
          "content": "The MIT License (MIT)\n\nCopyright (C) 2013 Jeremy Kendall, http://about.me/jeremykendall\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.98046875,
          "content": "# PHP Domain Parser\n\n**PHP Domain Parser** is a resource based domain parser implemented in PHP.\n\n[![Build Status][ico-github-actions-build]][link-github-actions-build]\n[![Total Downloads][ico-packagist]][link-packagist]\n[![Latest Stable Version][ico-release]][link-release]\n[![Software License][ico-license]][link-license]\n\n## Motivation\n\nWhile there are plenty of excellent URL parsers and builders available, there\nare very few projects that can accurately parse a domain into its component\nsubdomain, registrable domain, second level domain and public suffix parts.\n\nConsider the domain www.pref.okinawa.jp.  In this domain, the\n*public suffix* portion is **okinawa.jp**, the *registrable domain* is\n**pref.okinawa.jp**, the *subdomain* is **www** and \nthe *second level domain* is **pref**.  \nYou can't regex that.\n\nPHP Domain Parser is compliant around:\n\n- accurate Public Suffix List based parsing.\n- accurate IANA Top Level Domain List parsing.\n\n## Installation\n\n### Composer\n\n~~~\ncomposer require jeremykendall/php-domain-parser:^6.0\n~~~\n\n### System Requirements\n\nYou need:\n\n- **PHP >= 7.4** but the latest stable version of PHP is recommended\n- the `intl` extension\n- a copy of the [Public Suffix List](https://publicsuffix.org/) data and/or a copy of the [IANA Top Level Domain List](https://www.iana.org/domains/root/files). Please refer to the [Managing external data source section](#managing-the-package-external-resources) for more information when using this package in production.\n\n## Usage\n\n> [!WARNING]\n> If you are upgrading from version 5 please check the [upgrading guide](UPGRADING.md) for known issues.\n\n### Resolving Domains\n\nThis library can resolve a domain against:\n \n- The [Public Suffix List](https://publicsuffix.org/)\n- The [IANA Top Level Domain List](https://www.iana.org/domains/root/files)\n\nIn both cases this is done using the `resolve` method implemented on the resource \ninstance. The method returns a `Pdp\\ResolvedDomain` object which represents the \nresult of that process.\n\nFor the [Public Suffix List](http://publicsuffix.org/) you need to use the\n`Pdp\\Rules` class as shown below:\n\n~~~php\n<?php \nuse Pdp\\Rules;\nuse Pdp\\Domain;\n\n$publicSuffixList = Rules::fromPath('/path/to/cache/public-suffix-list.dat');\n$domain = Domain::fromIDNA2008('www.PreF.OkiNawA.jP');\n\n$result = $publicSuffixList->resolve($domain);\necho $result->domain()->toString();            //display 'www.pref.okinawa.jp';\necho $result->subDomain()->toString();         //display 'www';\necho $result->secondLevelDomain()->toString(); //display 'pref';\necho $result->registrableDomain()->toString(); //display 'pref.okinawa.jp';\necho $result->suffix()->toString();            //display 'okinawa.jp';\n$result->suffix()->isICANN();                  //return true;\n~~~\n\nFor the [IANA Top Level Domain List](https://www.iana.org/domains/root/files),\nthe `Pdp\\TopLevelDomains` class is use instead:\n\n~~~php\n<?php\n\nuse Pdp\\Domain;\nuse Pdp\\TopLevelDomains;\n\n$topLevelDomains = TopLevelDomains::fromPath('/path/to/cache/tlds-alpha-by-domain.txt');\n$domain = Domain::fromIDNA2008('www.PreF.OkiNawA.jP');\n\n$result = $topLevelDomains->resolve($domain);\necho $result->domain()->toString();            //display 'www.pref.okinawa.jp';\necho $result->suffix()->toString();            //display 'jp';\necho $result->secondLevelDomain()->toString(); //display 'okinawa';\necho $result->registrableDomain()->toString(); //display 'okinawa.jp';\necho $result->subDomain()->toString();         //display 'www.pref';\necho $result->suffix()->isIANA();              //return true\n~~~\n\nIn case of an error an exception which extends `Pdp\\CannotProcessHost` is thrown.\n\nThe `resolve` method will always return a `ResolvedDomain` even if the domain\nsyntax is invalid or if there is no match found in the resource data. \nTo work around this limitation, the library exposes more strict methods,\nnamely:\n\n- `Rules::getCookieDomain`\n- `Rules::getICANNDomain`\n- `Rules::getPrivateDomain`\n\nfor the Public Suffix List and the following method for the Top Level\nDomain List:\n\n- `TopLevelDomains::getIANADomain`\n\nThese methods resolve the domain against their respective data source using\nthe same rules as the `resolve` method but will instead throw an exception \nif no valid effective TLD is found or if the submitted domain is invalid.\n\n> [!CAUTION]\n> All these methods expect as their sole argument a `Pdp\\Host` implementing \nobject, but other types (ie: `string`, `null`  and stringable objects) are \nsupported with predefined conditions as explained in the remaining document.\n\n~~~php\n<?php\n\nuse Pdp\\Domain;\nuse Pdp\\Rules;\nuse Pdp\\TopLevelDomains;\n\n$publicSuffixList = Rules::fromPath('/path/to/cache/public-suffix-list.dat');\n$domain = Domain::fromIDNA2008('qfdsf.unknownTLD');\n\n$publicSuffixList->getICANNDomain($domain);\n// will throw because `.unknownTLD` is not part of the ICANN section\n\n$result = $publicSuffixList->getCookieDomain($domain);\n$result->suffix()->value();   // returns 'unknownTLD'\n$result->suffix()->isKnown(); // returns false\n// will not throw because the domain syntax is correct.\n\n$publicSuffixList->getCookieDomain(Domain::fromIDNA2008('com'));\n// will not throw because the domain syntax is invalid (ie: does not support public suffix)\n\n$result = $publicSuffixList->resolve(Domain::fromIDNA2008('com'));\n$result->suffix()->value();   // returns null\n$result->suffix()->isKnown(); // returns false\n// will not throw but its public suffix value equal to NULL\n\n$topLevelDomains = TopLevelDomains::fromPath('/path/to/cache/public-suffix-list.dat');\n$topLevelDomains->getIANADomain(Domain::fromIDNA2008('com'));\n// will not throw because the domain syntax is invalid (ie: does not support public suffix)\n~~~\n\nTo instantiate each domain resolver you can use the following named constructor:\n\n- `fromString`: instantiate the resolver from a inline string representing the data source;\n- `fromPath`: instantiate the resolver from a local path or online URL by relying on `fopen`;\n\n**If the instantiation does not work an exception will be thrown.**\n\n> [!WARNING]\n> You SHOULD never resolve domain name this way in production, without, at \nleast, a caching mechanism to reduce external resource downloads.\n> Using the Public Suffix List to determine what is a valid domain name and what \nisn't is dangerous, and MAY lead to errors because of new gTLDs being registered\non a regular basis.\n> If you are looking to know the validity of a Top Level Domain, you MUST use\nthe IANA Top Level Domain List as the proper source for this information or \nalternatively the DNS.\n> If you MUST use this library for any of the above purposes, you SHOULD consider \nintegrating an updating mechanism into your software.\n> For more information go to the [Managing external data source section](#managing-the-package-external-resources)** \n\n### Resolved domain information.\n\nWhichever methods chosen to resolve the domain on success, the package will\nreturn a `Pdp\\ResolvedDomain` instance.\n\nThe `Pdp\\ResolvedDomain` decorates the `Pdp\\Domain` class resolved but also \ngives access as separate methods to the domain different components.\n\n~~~php\nuse Pdp\\Domain;\nuse Pdp\\TopLevelDomains;\n\n$domain = Domain::fromIDNA2008('www.PreF.OkiNawA.jP');\n/** @var TopLevelDomains $topLevelDomains */\n$result = $topLevelDomains->resolve($domain);\necho $result->domain()->toString();            //display 'www.pref.okinawa.jp';\necho $result->suffix()->toString();            //display 'jp';\necho $result->secondLevelDomain()->toString(); //display 'okinawa';\necho $result->registrableDomain()->toString(); //display 'okinawa.jp';\necho $result->subDomain()->toString();         //display 'www.pref';\necho $result->suffix()->isIANA();              //return true\n~~~\n \nYou can modify the returned `Pdp\\ResolvedDomain` instance using the following methods:\n\n~~~php\n<?php \n\nuse Pdp\\Domain;\nuse Pdp\\Rules;\n\n/** @var Rules $publicSuffixList */\n$result = $publicSuffixList->resolve(Domain::fromIDNA2008('shop.example.com'));\n$altResult = $result\n    ->withSubDomain(Domain::fromIDNA2008('foo.bar'))\n    ->withSecondLevelDomain(Domain::fromIDNA2008('test'))\n    ->withSuffix(Domain::fromIDNA2008('example'));\n\necho $result->domain()->toString(); //display 'shop.example.com';\n$result->suffix()->isKnown();       //return true;\n\necho $altResult->domain()->toString(); //display 'foo.bar.test.example';\n$altResult->suffix()->isKnown();       //return false;\n~~~\n\n> [!TIP]\n> Always favor submitting a `Pdp\\Suffix` object rather that any other\nsupported type to avoid unexpected results. By default, if the input is not a\n`Pdp\\Suffix` instance, the resulting public suffix will be labelled as\nbeing unknown. For more information go to the [Public Suffix section](#public-suffix)\n\n### Domain Suffix\n\nThe domain effective TLD is represented using the `Pdp\\Suffix`. Depending on\nthe data source the object exposes different information regarding its\norigin.\n\n~~~php\n<?php \nuse Pdp\\Domain;\nuse Pdp\\Rules;\n\n/** @var Rules $publicSuffixList */\n$suffix = $publicSuffixList->resolve(Domain::fromIDNA2008('example.github.io'))->suffix();\n\necho $suffix->domain()->toString(); //display 'github.io';\n$suffix->isICANN();                 //will return false\n$suffix->isPrivate();               //will return true\n$suffix->isPublicSuffix();          //will return true\n$suffix->isIANA();                  //will return false\n$suffix->isKnown();                 //will return true\n~~~\n\nThe public suffix state depends on its origin:\n \n- `isKnown` returns `true` if the value is present in the data resource.\n- `isIANA` returns `true` if the value is present in the IANA Top Level Domain List.\n- `isPublicSuffix` returns `true` if the value is present in the Public Suffix List.\n- `isICANN` returns `true` if the value is present in the Public Suffix List ICANN section.\n- `isPrivate` returns `true` if the value is present in the Public Suffix List private section.\n \nThe same information is used when `Pdp\\Suffix` object is \ninstantiate via its named constructors:\n \n ~~~php\n <?php \n use Pdp\\Suffix;\n\n$iana = Suffix::fromIANA('ac.be');\n$icann = Suffix::fromICANN('ac.be');\n$private = Suffix::fromPrivate('ac.be');\n$unknown = Suffix::fromUnknown('ac.be');\n~~~\n\nUsing a `Suffix` object instead of a string or `null` with \n`ResolvedDomain::withSuffix` will ensure that the returned value will\nalways contain the correct information regarding the public suffix resolution.\n \nUsing a `Domain` object instead of a string or `null` with the named \nconstructor ensure a better instantiation of the Public Suffix object for\nmore information go to the [ASCII and Unicode format section](#ascii-and-unicode-formats) \n \n### Accessing and processing Domain labels\n\nIf you are interested into manipulating the domain labels without taking into \naccount the Effective TLD, the library provides a `Domain` object tailored for\nmanipulating domain labels. You can access the object using the following methods:\n \n- the `ResolvedDomain::domain` method \n- the `ResolvedDomain::subDomain` method\n- the `ResolvedDomain::registrableDomain` method\n- the `ResolvedDomain::secondLevelDomain` method\n- the `Suffix::domain` method\n\n`Domain` objects usage are explain in the next section.\n\n~~~php\n<?php\nuse Pdp\\Domain;\nuse Pdp\\Rules;\n\n/** @var Rules $publicSuffixList */\n$result = $publicSuffixList->resolve(Domain::from2008('www.bbc.co.uk'));\n$domain = $result->domain();\necho $domain->toString(); // display 'www.bbc.co.uk'\ncount($domain);           // returns 4\n$domain->labels();        // returns ['uk', 'co', 'bbc', 'www'];\n$domain->label(-1);       // returns 'www'\n$domain->label(0);        // returns 'uk'\nforeach ($domain as $label) {\n   echo $label, PHP_EOL;\n}\n// display \n// uk\n// co\n// bbc\n// www\n\n$publicSuffixDomain = $result->suffix()->domain();\n$publicSuffixDomain->labels(); // returns ['uk', 'co']\n~~~ \n\nYou can also add or remove labels according to their key index using the \nfollowing methods:\n\n~~~php\n<?php \nuse Pdp\\Domain;\nuse Pdp\\Rules;\n\n/** @var Rules $publicSuffixList */\n$domain = $publicSuffixList->resolve(Domain::from2008('www.ExAmpLE.cOM'))->domain();\n\n$newDomain = $domain\n    ->withLabel(1, 'com')  //replace 'example' by 'com'\n    ->withoutLabel(0, -1)  //remove the first and last labels\n    ->append('www')\n    ->prepend('docs.example');\n\necho $domain->toString();           //display 'www.example.com'\necho $newDomain->toString();        //display 'docs.example.com.www'\n$newDomain->clear()->labels();      //return []\necho $domain->slice(2)->toString(); //display 'www'\n~~~\n\n> [!WARNING]\n> Because of its definition, a domain name can be `null` or a string.\n\nTo distinguish this possibility the object exposes two (2) formatting methods \n`Domain::value` which can be `null` or a `string` and `Domain::toString` which \nwill always cast the domain value to a string.\n\n ~~~php\nuse Pdp\\Domain;\n \n$nullDomain = Domain::fromIDNA2008(null);\n$nullDomain->value();    // returns null;\n$nullDomain->toString(); // returns '';\n \n$emptyDomain = Domain::fromIDNA2008('');\n$emptyDomain->value();    // returns '';\n$emptyDomain->toString(); // returns '';\n ~~~ \n\n### ASCII and Unicode formats.\n\nDomain names originally only supported ASCII characters. Nowadays,\nthey can also be presented under a UNICODE representation. The conversion\nbetween both formats is done using the compliant implementation of \n[UTS#46](https://www.unicode.org/reports/tr46/), otherwise known as Unicode \nIDNA Compatibility Processing. Domain objects expose a `toAscii` and a \n`toUnicode` methods which returns a new instance in the converted format.\n\n~~~php\n<?php \nuse Pdp\\Rules;\n\n/** @var Rules $publicSuffixList */\n$unicodeDomain = $publicSuffixList->resolve('bébé.be')->domain();\necho $unicodeDomain->toString(); // returns 'bébé.be'\n\n$asciiDomain = $publicSuffixList->resolve('xn--bb-bjab.be')->domain();\necho $asciiDomain->toString();  // returns 'xn--bb-bjab.be'\n\n$asciiDomain->toUnicode()->toString() === $unicodeDomain->toString(); //returns true\n$unicodeDomain->toAscii()->toString() === $asciiDomain->toString();   //returns true\n~~~\n\nBy default, the library uses IDNA2008 algorithm to convert domain name between \nboth formats. It is still possible to use the legacy conversion algorithm known\nas IDNA2003.\n\nSince direct conversion between both algorithms is not possible you need \nto explicitly specific on construction which algorithm you will use\nwhen creating a new domain instance via the `Pdp\\Domain` object. This \nis done via two (2) named constructors:\n\n- `Pdp\\Domain::fromIDNA2008`\n- `Pdp\\Domain::fromIDNA2003`\n\nAt any given moment the `Pdp\\Domain` instance can tell you whether it is in \n`ASCII` mode or not.\n\n> [!WARNING]\n> Once instantiated there's no way to tell which algorithm is used to convert\nthe object from ascii to unicode and vice-versa\n\n~~~php\nuse Pdp\\Domain;\n\n$domain = Domain::fromIDNA2008('faß.de');\necho $domain->value(); // display 'faß.de'\n$domain->isAscii();    // return false\n\n$asciiDomain = $domain->toAscii(); \necho $asciiDomain->value(); // display 'xn--fa-hia.de'\n$asciiDomain->isAscii();    // returns true\n\n$domain = Domain::fromIDNA2003('faß.de');\necho $domain->value(); // display 'fass.de'\n$domain->isAscii();    // returns true\n\n$asciiDomain = $domain->toAscii();\necho $asciiDomain->value(); // display 'fass.de'\n$asciiDomain->isAscii();    // returns true\n~~~\n\n> [!TIP]\n> Always favor submitting a `Pdp\\Domain` object for resolution rather that a \nstring or an object that can be cast to a string to avoid unexpected format \nconversion errors/results. By default, and with lack of information conversion\nis done using IDNA 2008 rules.\n\n### Managing the package external resources\n\nDepending on your application, the mechanism to store your resources may differ, \nnevertheless, the library comes bundle with a **optional service** which \nenables resolving domain name without the constant network overhead of \ncontinuously downloading the remote databases.\n\nThe interfaces and classes defined under the `Pdp\\Storage` namespace enable \nintegrating a resource managing system and provide an implementation example \nusing PHP-FIG PSR interfaces.\n\n#### Using PHP-FIG interfaces\n\nThe `Pdp\\Storage\\PsrStorageFactory` enables returning storage instances that\nretrieve, convert and cache the Public Suffix List and the IANA Top Level \nDomain List using standard interfaces published by the PHP-FIG.\n\nTo work as intended, the `Pdp\\Storage\\PsrStorageFactory` constructor requires:\n\n- a [PSR-16](http://www.php-fig.org/psr/psr-16/) Simple Cache implementing library.\n- a [PSR-17](http://www.php-fig.org/psr/psr-17/) HTTP Factory implementing library.\n- a [PSR-18](http://www.php-fig.org/psr/psr-18/) HTTP Client implementing library.\n\nWhen creating a new storage instance you will require:\n\n- a `$cachePrefix` argument to optionally add a prefix to your cache index, \ndefault to the empty string;\n- a `$ttl` argument if you need to set the default `$ttl`, default to `null` \nto use the underlying caching default TTL;\n\nThe `$ttl` argument can be:\n\n- an `int` representing time in second (see PSR-16);\n- a `DateInterval` object (see PSR-16);\n- a `DateTimeInterface` object representing the date and time when the item \nwill expire;\n\nThe package does not provide any implementation of such interfaces as you can\nfind [robust](https://packagist.org/providers/psr/simple-cache-implementation) \nand [battle tested](https://packagist.org/providers/psr/http-client-implementation) \n[implementations](https://packagist.org/providers/psr/http-factory-implementation) \non packagist.\n\n#### Refreshing the resource using the provided factories\n\n> [!NOTE]\n> THIS IS THE RECOMMENDED WAY OF USING THE LIBRARY\n\nFor the purpose of this example we will use our PSR powered solution with:\n \n- *Guzzle HTTP Client* as our PSR-18 HTTP client;\n- *Guzzle PSR-7 package* which provide factories to create a PSR-7 objects using PSR-17 interfaces;\n- *Symfony Cache Component* as our PSR-16 cache implementation provider;\n\nWe will cache both external sources for 24 hours in a PostgreSQL database.\n\nYou are free to use other libraries/solutions/settings as long as they \nimplement the required PSR interfaces.\n\n~~~php\n<?php \n\nuse GuzzleHttp\\Psr7\\Request;\nuse Pdp\\Storage\\PsrStorageFactory;\nuse Psr\\Http\\Message\\RequestFactoryInterface;\nuse Psr\\Http\\Message\\RequestInterface;\nuse Symfony\\Component\\Cache\\Adapter\\PdoAdapter;\nuse Symfony\\Component\\Cache\\Psr16Cache;\n\n$pdo = new PDO(\n    'pgsql:host=localhost;port:5432;dbname=testdb', \n    'user', \n    'password', \n    [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]\n);\n$cache = new Psr16Cache(new PdoAdapter($pdo, 'pdp', 43200));\n$client = new GuzzleHttp\\Client();\n$requestFactory = new class implements RequestFactoryInterface {\n    public function createRequest(string $method, $uri): RequestInterface\n    {\n        return new Request($method, $uri);\n    }\n};\n\n$cachePrefix = 'pdp_';\n$cacheTtl = new DateInterval('P1D');\n$factory = new PsrStorageFactory($cache, $client, $requestFactory);\n$pslStorage = $factory->createPublicSuffixListStorage($cachePrefix, $cacheTtl);\n$rzdStorage = $factory->createTopLevelDomainListStorage($cachePrefix, $cacheTtl);\n\n// if you need to force refreshing the rules \n// before calling them (to use in a refresh script)\n// uncomment this part or adapt it to you script logic\n// $pslStorage->delete(PsrStorageFactory::PUBLIC_SUFFIX_LIST_URI);\n$publicSuffixList = $pslStorage->get(PsrStorageFactory::PUBLIC_SUFFIX_LIST_URI);\n\n// if you need to force refreshing the rules \n// before calling them (to use in a refresh script)\n// uncomment this part or adapt it to you script logic\n// $rzdStorage->delete(PsrStorageFactory::TOP_LEVEL_DOMAIN_LIST_URI);\n$topLevelDomains = $rzdStorage->get(PsrStorageFactory::TOP_LEVEL_DOMAIN_LIST_URI);\n~~~\n\n> [!NOTE]\n> Be sure to adapt the following code to your own application.\nThe following code is an example given without warranty of it working \nout of the box.\n\n> [!WARNING]\n> You should use your dependency injection container to avoid repeating this\ncode in your application.\n\n### Automatic Updates\n\nIt is important to always have an up to date Public Suffix List and Top Level\nDomain List.  \nThis library no longer provide an out of the box script to do so as implementing\nsuch a job heavily depends on your application setup.\nYou can use the above example script as a starting point to implement such a job.\n\nChangelog\n-------\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information about what has been\nchanged since version **5.0.0** was released.\n\nContributing\n-------\n\nContributions are welcome and will be fully credited. Please see \n[CONTRIBUTING](.github/CONTRIBUTING.md) for details.\n\nTesting\n-------\n\n`pdp-domain-parser` has:\n\n- a [PHPUnit](https://phpunit.de) test suite\n- a code analysis compliance test suite using [PHPStan](https://phpstan.org).\n- a coding style compliance test suite using [PHP CS Fixer](https://cs.symfony.com).\n\nTo run the tests, run the following command from the project folder.\n\n``` bash\n$ composer test\n```\n\nSecurity\n-------\n\nIf you discover any security related issues, please email nyamsprod@gmail.com\ninstead of using the issue tracker.\n\nCredits\n-------\n\n- [Jeremy Kendall](https://github.com/jeremykendall)\n- [Ignace Nyamagana Butera](https://github.com/nyamsprod)\n- [All Contributors](https://github.com/jeremykendall/php-domain-parser/contributors)\n\nLicense\n-------\n\nThe MIT License (MIT). Please see [License File](LICENSE) for more information.\n\nAttribution\n-------\n\nPortions of the `Pdp\\Rules` class are derivative works of the PHP\n[registered-domain-libs](https://github.com/usrflo/registered-domain-libs).\nI've included a copy of the Apache Software Foundation License 2.0 in this project.\n\n[ico-github-actions-build]: https://img.shields.io/github/actions/workflow/status/jeremykendall/php-domain-parser/build.yaml?branch=develop&style=flat-square\n[ico-packagist]: https://img.shields.io/packagist/dt/jeremykendall/php-domain-parser.svg?style=flat-square\n[ico-release]: https://img.shields.io/github/release/jeremykendall/php-domain-parser.svg?style=flat-square\n[ico-license]: https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square\n\n[link-github-actions-build]: https://github.com/jeremykendall/php-domain-parser/actions?query=workflow%3ABuild\n[link-packagist]: https://packagist.org/packages/jeremykendall/php-domain-parser\n[link-release]: https://github.com/jeremykendall/php-domain-parser/releases\n[link-license]: https://github.com/jeremykendall/php-domain-parser/blob/master/LICENSE\n"
        },
        {
          "name": "UPGRADING.md",
          "type": "blob",
          "size": 7.5947265625,
          "content": "# PHP Domain Parser Upgrade Guide\n\nThis guide will help you migrate from a 5.x version to 6.0.0. It will only \nexplain backward compatibility breaks, it will not present the new features\n([read the documentation](README.md) for that).\n\n## 5.0 to 6.0\n\nIn order to take advantage of PHP new features, the library dropped the \nsupport of **all versions before and including PHP 7.3**. The minimum supported\nPHP version is now **PHP 7.4**. \n\n**Version 6.0 no longer provides an out-of-the-box resource manager system.**\n\n### Backward Incompatibility Changes\n\nDomains resolution uses the `IDNA2008` algorithm by default, in v5, \nby default, it is done `IDNA2003` instead.\n\n```diff\n<?php\n/** @var Rules $rules */\n- echo $rules->resolve('faß.de')->__toString(); //returns 'fass.de'\n+ echo $rules->resolve('faß.de')->toString();   //returns 'faß.de'\n```\n\n#### Domain resolution\n\nThe `Pdp\\Rules::resolve` and `Pdp\\TopLevelDomains::resolve` returns a \n`ResolvedDomain` object instead of a `Pdp\\Domain` object, thus, the `Domain` \nobject no longer exposes the components from resolution, this is done by the \nnew `ResolvedDomain` object instead.\n\n```diff\n<?php\n/** @var Rules $rules */\n- $rules->resolve('faß.de')->labels();           //returns ['de', 'fass']\n+ $rules->resolve('faß.de')->domain()->labels(); //returns ['de', 'faß']\n```\n\nPublic suffix properties are not longer **directly** accessible on the\nreturned object.\n\n```diff\n<?php\n/** @var Rules $rules */\n- $rules->resolve('faß.de')->isICANN();           //returns true\n+ $rules->resolve('faß.de')->suffix()->isICANN(); //returns true\n```\n\nDomain components are objects and no longer nullable scalar type.\n\n```diff\n<?php\n/** @var Rules $rules */\n- $rules->resolve('www.example.org')->registrableDomain();             //returns 'example.org'\n+ $rules->resolve('www.example.org')->registrableDomain()->toString(); //returns 'example.org'\n```\n\nThe `Domain` **no longer has access** to component information. Updating\nthe resolved component is done on the `ResolvedDomain` and no longer on the\n`Domain` object.\n\n```diff\n<?php\n/** @var Rules $rules */\n- echo $rules->resolve('www.example.org')->withPublicSuffix('com');       //returns 'example.com'\n+ echo $rules->resolve('www.example.org')->withSuffix('com')->toString(); //returns 'example.com'\n```\n\nThe `Pdp\\PublicSuffix` object is replaced by the more generic `Pdp\\Suffix` object\n\n```diff\n<?php\n/** @var Rules $rules */\n- echo $rules->getPublicSuffix('www.example.org'); //returns 'Pdp\\PublicSuffix' instance\n+ echo $rules->resolve('www.example.org')->suffix(); //returns 'Pdp\\Suffix' instance\n```\n\nThe `Pdp\\Suffix` class **no longer has direct access** to the underlying domain properties.\n\n```diff\n<?php\n- $suffix = new PublicSuffix('co.uk', self::ICANN_DOMAINS);\n- $suffix->getLabel(-1); //returns 'co';\n+ $suffix = Suffix::fromICANN('co.uk');\n+ $suffix->domain()->label(-1); //returns 'co';\n```\n\n#### Normalizing domain resolution\n\nThe `Pdp\\Rules::resolve` and `Pdp\\TopLevelDomains::resolve` domain resolution\nrules are identical. They will always return a result even if the domain \ncontains a syntax error. \n\n```diff\n<?php\n/** @var TopLevelDomains $topLevelDomain */\n- $result = $topLevelDomain->resolve('####'); //throws an Exception\n+ $result = $topLevelDomain->resolve('####'); //returns a ResolvedDomain object \n```\n\n#### Strict domain resolution\n\nDomain resolution is stricter with getter methods in version 6. If no\nvalid resolution is possible, because of the domain syntax or because\nit is not possible in the given section. The method will throw instead \nof returning a response object.\n\n```diff\n<?php\n/** @var Pdp\\Rules $rules */\n- $rules->getICANNDomain('toto.foobar')->isICANN();   //returns false\n- $rules->getPrivateDomain('ulb.ac.be')->isPrivate(); //returns false\n+ $rules->getICANNDomain('toto.foobar'); //will throw an exception \n+ $rules->getPrivateDomain('ulb.ac.be'); //will throw an exception \n```\n\n#### Domain format\n\n- The `Domain::__toString` is removed use `Domain::toString` instead.\n- The `Domain::getContent` is removed use `Domain::value` instead.\n- The `Domain::getLabel` is removed use `Domain::label` instead.\n- The `Domain` constructor is private. To instantiate a domain object you\nneed to use on of the two (2) named constructor `Domain::fromIDNA2008` or \n`Domain::fromIDNA2008`.\n\n```diff\n<?php\n- $domain = new Domain('faß.de', null, IDNA_NONTRANSITIONAL_TO_ASCII, IDNA_NONTRANSITIONAL_TO_UNICODE);\n- $domain->getContent();    // can be a string or null\n- echo $domain;             // display 'faß.de'\n- $domain->getLabel(-1);    // returns 'faß'\n+ $domain = Domain::fromIDNA2008('faß.de');\n+ $domain->value();         // can be a string or null\n+ echo $domain->toString(); // display 'faß.de'\n+ $domain->label(-1);       // returns 'faß'\n```\n\n#### Methods renamed\n\n- The `create` prefix is removed from all named constructors.\n- The `get` prefix is removed from `TopLevelDomains` methods.\n\n```diff\n<?php\nuse Pdp\\Rules;\nuse Pdp\\TopLevelDomains;\n\n- $publicSuffixList = Rules::createFromPath('path/to/public-suffix-data.dat');\n- $topLevelDomains = TopLevelDomains::createFromString($rootZoneInlineContent);\n- $topLevelDomains->getVersion();      //returns 2018082200\n- $topLevelDomains->getModifiedDate(); //returns \\DateTimeImmutable object\n+ $publicSuffixList = Rules::fromPath('path/to/public-suffix-data.dat');\n+ $topLevelDomains = TopLevelDomains::fromString($rootZoneInlineContent);\n+ $topLevelDomains->version();     //returns 2018082200\n+ $topLevelDomains->lastUpdated(); //returns \\DateTimeImmutable object\n```\n\n#### Resource manager system\n\nThe resource manager system (containing caching and refreshing resource) is removed.\n\n- `HttpClient` is removed without replacement.\n- `Cache` is removed without replacement.\n- `Installer` is removed without replacement.\n- `Logger` is removed without replacement.\n- The CLI script to update the cache is removed without replacement. \n- `Manager` is removed and may be replace by the use of `Pdp\\Storage\\PsrStorageFactory`.\n\n*Please check the [README](README.md) documentation for more details*\n\n#### Methods removed\n\n- `__toString` is removed from all classes.\n- `__debugInfo` is removed from all classes.\n- `DomainInterface` is removed use `DomainName` or `ResolvedDomainName` instead. \n- `Domain::isResolvable` is removed without replacement.\n- `Domain::resolve` is removed without replacement.\n- `Rules::getPublicSuffix` is removed use `ResolvedDomain::suffix` instead. \n- All v5 IDNA related methods are removed, IDNA is fully handle within the `Domain` object.\n\n#### Methods return type changed\n\n- `Domain::jsonSerialize` no longer returns an array but returns the string\nrepresentation or `null` to allow better compatibility with URL components\nrepresentation in other languages.\n\n```diff\n<?php\n/** @var Rules $rules */\n- $result = $rules->resolve('www.example.com'); \n- json_encode($result); // returns {\n-     \"domain\":\"www.example.com\",\n-     \"registrableDomain\":\"example.com\",\n-     \"subDomain\":\"www\",\n-     \"publicSuffix\":\"com\",\n-     \"isKnown\":true,\n-     \"isICANN\":true,\n-     \"isPrivate\":false\n-     }\n+ json_encode($result); // returns '\"www.example.com\"'\n+ echo json_encode([\n+    'domain' => $result->value(),\n+    'registrableDomain' => $result->registrableDomain()->value(),\n+    'subDomain' => $result->subDomain()->value(),\n+    'publicSuffix' => $result->suffix()->value(),\n+    'isKnown' => $result->suffix()->isKnown(),\n+    'isICANN' => $result->suffix()->isICANN(),\n+    'isPrivate' => $result->suffix()->isPrivate(),\n+ ]); // to get the v5 result\n```\n\n#### Objects instantiation\n\n- `Rules::__construct` \n- `TopLevelDomains::__construct` \n- `Domain::__construct` \n\nmethods are now all private please use the provided named constructors instead.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 3.1357421875,
          "content": "{\n    \"name\": \"jeremykendall/php-domain-parser\",\n    \"description\": \"Public Suffix List and IANA Root Zone Database based Domain parsing implemented in PHP.\",\n    \"homepage\": \"https://github.com/jeremykendall/php-domain-parser\",\n    \"support\": {\n        \"issues\": \"https://github.com/jeremykendall/php-domain-parser/issues\",\n        \"source\": \"https://github.com/jeremykendall/php-domain-parser\"\n    },\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Jeremy Kendall\",\n            \"homepage\": \"https://about.me/jeremykendall\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"Ignace Nyamagana Butera\",\n            \"homepage\": \"https://nyamsprod.com\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"Contributors\",\n            \"homepage\": \"https://github.com/jeremykendall/php-domain-parser/graphs/contributors\"\n        }\n    ],\n    \"funding\": [\n        {\n            \"type\": \"github\",\n            \"url\": \"https://github.com/sponsors/nyamsprod\"\n        }\n    ],\n    \"keywords\": [\n        \"Public Suffix List\",\n        \"Top Level Domains\",\n        \"domain parsing\",\n        \"icann\",\n        \"iana\",\n        \"idn\",\n        \"tld\",\n        \"psl\"\n    ],\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"ext-filter\": \"*\",\n        \"ext-intl\": \"*\"\n    },\n    \"require-dev\": {\n        \"friendsofphp/php-cs-fixer\": \"^3.65.0\",\n        \"guzzlehttp/guzzle\": \"^7.9.2\",\n        \"guzzlehttp/psr7\": \"^1.6 || ^2.7.0\",\n        \"phpstan/phpstan\": \"^1.12.13\",\n        \"phpstan/phpstan-phpunit\": \"^1.4.2\",\n        \"phpstan/phpstan-strict-rules\": \"^1.6.1\",\n        \"phpunit/phpunit\": \"^10.5.15 || ^11.5.1\",\n        \"psr/http-factory\": \"^1.1.0\",\n        \"psr/simple-cache\": \"^1.0.1 || ^2.0.0\",\n        \"symfony/cache\": \"^v5.0.0 || ^6.4.16\"\n    },\n    \"suggest\": {\n        \"psr/http-client-implementation\": \"To use the storage functionality which depends on PSR-18\",\n        \"psr/http-factory-implementation\": \"To use the storage functionality which depends on PSR-17\",\n        \"psr/simple-cache-implementation\": \"To use the storage functionality which depends on PSR-16\",\n        \"league/uri\": \"To parse URL and validate host\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Pdp\\\\\": \"src/\"\n        }\n    },\n    \"scripts\": {\n        \"phpcs\": \"PHP_CS_FIXER_IGNORE_ENV=1 php-cs-fixer fix -vvv --diff --dry-run --allow-risky=yes --ansi\",\n        \"phpcs:fix\": \"php-cs-fixer fix -vvv --allow-risky=yes --ansi\",\n        \"phpstan\": \"phpstan analyse -c phpstan.neon --ansi --memory-limit=192M\",\n        \"phpunit\": \"XDEBUG_MODE=coverage phpunit --coverage-text\",\n        \"phpunit:min\": \"phpunit --no-coverage\",\n        \"test\": [\n            \"@phpunit\",\n            \"@phpstan\",\n            \"@phpcs\"\n        ]\n    },\n    \"scripts-descriptions\": {\n        \"phpcs\": \"Runs coding style test suite\",\n        \"phpcs:fix\": \"Fix the package coding style\",\n        \"phpstan\": \"Runs complete codebase static analysis\",\n        \"phpunit\": \"Runs unit and functional testing\",\n        \"test\": \"Runs the complete test suite\"\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"6.x-dev\"\n        }\n    },\n    \"config\": {\n        \"sort-packages\": true\n    }\n}\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.75,
          "content": "includes:\n  - vendor/phpstan/phpstan-strict-rules/rules.neon\n  - vendor/phpstan/phpstan-phpunit/extension.neon\n  - vendor/phpstan/phpstan-phpunit/rules.neon\nparameters:\n  level: max\n  paths:\n    - src\n  ignoreErrors:\n    - message: '#has no value type specified in iterable type array.#'\n      path: src/Rules.php\n    - message: '#has parameter \\$(properties|rules|list|tmpList) with no value type specified in iterable type array.#'\n      path: src/Rules.php\n    - message: \"#Cannot access offset '!' on mixed.#\"\n      path: src/Rules.php\n    - message: '#Variable \\$line on left side of \\?\\? always exists and is not nullable.#'\n      path: src/Rules.php\n    - '#^Parameter \\#1 \\$callback of function set_error_handler expects#'\n  reportUnmatchedIgnoredErrors: true\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.9326171875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.4/phpunit.xsd\" bootstrap=\"vendor/autoload.php\" backupGlobals=\"false\" colors=\"true\" processIsolation=\"false\" stopOnFailure=\"false\" cacheDirectory=\".phpunit.cache\" backupStaticProperties=\"false\">\n  <coverage>\n    <report>\n      <clover outputFile=\"build/clover.xml\"/>\n      <html outputDirectory=\"build/coverage\"/>\n      <xml outputDirectory=\"build/coverage-xml\"/>\n    </report>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"Dire Roller Test Suite\">\n      <directory suffix=\"Test.php\">src</directory>\n    </testsuite>\n  </testsuites>\n  <logging>\n    <junit outputFile=\"build/junit.xml\"/>\n  </logging>\n  <source>\n    <include>\n      <directory suffix=\".php\">src</directory>\n    </include>\n    <exclude>\n      <directory suffix=\"Test.php\">src</directory>\n    </exclude>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_data",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}