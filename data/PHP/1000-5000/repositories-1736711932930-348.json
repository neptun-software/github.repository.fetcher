{
  "metadata": {
    "timestamp": 1736711932930,
    "page": 348,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "beberlei/assert",
      "stars": 2413,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.421875,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at http://editorconfig.org\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\ninsert_final_newline = true\n\n[*.yml]\nindent_style = space\nindent_size = 2\n\n[*.json]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.5341796875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto eol=lf\n\n.editorconfig export-ignore\n.gitattributes export-ignore\n.github/ export-ignore\n.gitignore export-ignore\n.php_cs export-ignore\n.travis/ export-ignore\n.travis.yml export-ignore\n.scrutinizer.yml export-ignore\nbin/ export-ignore\nCHANGELOG.md export-ignore\nCONTRIBUTING.md export-ignore\nphpstan.neon export-ignore\nphpunit.xml.dist export-ignore\nREADME.md export-ignore\ntests/ export-ignore\nTODO.md export-ignore\nphpstan-code.neon export-ignore\nphpstan-tests.neon export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0400390625,
          "content": "vendor\ncomposer.lock\n.idea\n.php_cs.cache\n"
        },
        {
          "name": ".php_cs",
          "type": "blob",
          "size": 1.1708984375,
          "content": "<?php\n\n$finder = PhpCsFixer\\Finder::create()\n    ->in(__DIR__);\n\n$header = <<<TXT\nAssert\n\nLICENSE\n\nThis source file is subject to the MIT license that is bundled\nwith this package in the file LICENSE.txt.\nIf you did not receive a copy of the license and are unable to\nobtain it through the world-wide-web, please send an email\nto kontakt@beberlei.de so I can send you a copy immediately.\nTXT;\n\n$rules = [\n    '@PSR2' => true,\n    '@Symfony' => true,\n    'cast_spaces' => [\n        'space' => 'none',\n    ],\n    'concat_space' => [\n        'spacing' => 'none',\n    ],\n    'native_function_invocation' => [\n        'scope' => 'namespaced',\n    ],\n    'psr4' => true,\n    'phpdoc_align' => [\n        'align' => 'left',\n    ],\n    'array_syntax' => [\n        'syntax' => 'short',\n    ],\n    'header_comment' => [\n        'header' => $header,\n        'commentType' => PhpCsFixer\\Fixer\\Comment\\HeaderCommentFixer::HEADER_PHPDOC,\n    ],\n    'yoda_style' => false,\n];\n\n$cacheDir = getenv('TRAVIS') ? getenv('HOME') . '/.php-cs-fixer' : __DIR__;\n\nreturn PhpCsFixer\\Config::create()\n    ->setRiskyAllowed(true)\n    ->setRules($rules)\n    ->setFinder($finder)\n    ->setCacheFile($cacheDir . '/.php_cs.cache');\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 16.359375,
          "content": "# Change Log\nAll notable changes to this project will be documented in this file.\n\n## 3.2.7 - 2019-12-19\n\n### Fixes\n- Reinstated the `@method` return type for `Assert\\LazyAssertion` methods to show that the return type is `LazyAssertion`.\n\n## 3.2.6 - 2019-10-10\n\n### Fixes\n- Make `Assert\\Assertion::stringify()` UTF-8 safe (Thanks to [Pedram Azimaei](https://github.com/beberlei/assert/pull/290))\n\n## 3.2.5 - 2019-10-10 - Fix the broken things release.\n\n### Notice\n- Sigh!\n  - Richard Quadling\n\n### Fixes\n- REALLY Removed dependency of the intl extension.\n- Updated the Docblocks for `Assert\\Assertion::all()` helper to show that the value is expected to be an array.\n\n## 3.2.4 - 2019-10-10 - Fix the broken things release.\n\n### Notice\n- It seems I've been slightly lax in verifying the signature changes and expected extensions.\n  Hopefully, both of these have been fixed in this version.\n  Truly sorry for breaking the internet!\n  - Richard Quadling\n\n### Fixes\n- Restored `\\Assert\\Assertion::createException()` signature to 3.2.2.\n- Removed dependency of the intl extension. If the extension is available, then `Assert\\Assertion::count()`,\n  `Assert\\Assertion::isCountable()`, `Assert\\Assertion::minCount()`, and `Assert\\Assertion::maxCount()` will operate on\n  `ResourceBundles`.\n- Fixed the `@method` return type for `Assert\\LazyAssertion` methods to show that the return type is `static` for\n  extensions of `Assert\\LazyAssertion`.  \n  *NOTE :* Docblock does not have the ability to differentiate between a non static `@method` whose returns type is of\n  the subclass and a `@method` that is called statically ([PSR-5#899](https://github.com/php-fig/fig-standards/pull/899)).\n  So the use of `static static` is a fudge that sort of works for IDEs that need to know about the method that MAY be\n  overridden in a subclass.\n\n## 3.2.3 - 2019-08-23\n\n### Other changes\n- Added type hints and documentation consistency (Thanks to [Andru Cherny](https://github.com/beberlei/assert/pull/286))\n\n## 3.2.2 - 2019-08-23\n\n### Added assertions\n- `Assertion::eqArraySubset()` (Thanks to [Anna Filina](https://github.com/beberlei/assert/pull/283))\n\n## 3.2.1 - 2019-05-28\n\n### Fixes\n- Updated regex for `Assert\\Assertion::url()` (Thanks to [Christophe Histaesse](https://github.com/beberlei/assert/pull/281))\n- Fixed broken regex for `Assert\\Assertion::url()` (Thanks to [Menno Holtkamp](https://github.com/beberlei/assert/issues/275))\n\n### Other changes\n- Added PHP 7.3.0, PHP 7.3.1, and PHP 7.3.2 to Travis pipeline as there are differences in PCRE\n- Updated docblocks for `Assert\\Assertion::NullOrXxxx()` to show that the first parameter can be null.\n- Updated docblocks for `Assert\\LazyAssertion` to show that the return type is `$this` to aid IDE's static analysis.\n\n## 3.2.0 - 2018-12-24\n\n### Added assertions\n- `Assertion::isCountable()` (Thanks to [Baptiste Clavié](https://github.com/beberlei/assert/pull/268))\n- `Assertion::maxCount()` (Thanks to [Baptiste Clavié](https://github.com/beberlei/assert/pull/269))\n- `Assertion::minCount()` (Thanks to [Baptiste Clavié](https://github.com/beberlei/assert/pull/269))\n- `Assertion::nonContains()` (Thanks to [Baptiste Clavié](https://github.com/beberlei/assert/pull/270))\n\n### Other changes\n- Added PHP 7.3 to Travis pipeline\n- Added support for `\\ResourceBundle` and `\\SimpleXMLElement` to `Assertion::count()`.\n\n## 3.1.0 - 2018-10-29\n\n### Other changes\n- Refactor assertion messages for `Assert\\Assertion::notEq()`, `Assert\\Assertion::notSame()`, and `Assert\\Assertion::notInArray()` (Thanks to [Rick Kuipers](https://github.com/beberlei/assert/pull/259))\n\n## 3.0.1 - 2018-07-04\n\n### Added assertions\n- `Assertion::notRegex()` (Thanks to [Thomas Müller](https://github.com/beberlei/assert/pull/261))\n\n### Other changes\n- Upgraded regex and unit tests for `Assert\\Assertion::url()` to latest from Symfony/Validator\n\n## 3.0.0 - 2018-07-04\n\n### Changes\n- Deprecate support for PHP < 7.0\n\n### Fixes\n- An `AssertionFailedException` must be a `Throwable` (Thanks to [Marco Pivetta](https://github.com/beberlei/assert/pull/256))\n\n## 2.9.8 - 2019-05-28\n\n### Fixes\n- Updated regex for `Assert\\Assertion::url()` (Thanks to [Christophe Histaesse](https://github.com/beberlei/assert/pull/281))\n\n## 2.9.7 - 2019-02-19\n\n### Fixes\n- Fixed broken regex for `Assert\\Assertion::url()` (Thanks to [Menno Holtkamp](https://github.com/beberlei/assert/issues/275))\n\n## 2.9.6 - 2018-04-16\n\n### Fixes\n- Made constraints in exceptions consistent for all assertions (Thanks to [Peter Kruithof](https://github.com/beberlei/assert/pull/255))\n\n## 2.9.5 - 2018-04-16\n\n### Fixes\n- Remove DocBlock entry causing exception in third party DocBlock parser (Thanks to [Koutsoumpos Valantis](https://github.com/beberlei/assert/issues/251))\n\n## 2.9.4 - 2018-04-09\n\n### Fixes\n- Prevent date overflow in Assertion::date() by reset preset date value (Thanks to [Nobuhiro Nakamura](https://github.com/beberlei/assert/issues/250))\n\n## 2.9.3 - 2018-03-16\n\n### Changes\n- Expand error for `\\Assert\\Assertion::count()` to include the supplied count (Thanks to [Yoann Blot](https://github.com/beberlei/assert/issues/247))\n\n## 2.9.2 - 2018-01-25\n\n### Fixes\n- Usage of custom extended Assertion class in LazyAssertion (Thanks to [Marek Štípek](https://github.com/beberlei/assert/pull/245))\n\n## 2.9.1 - 2018-01-25\n\n### Deprecation notice\n- Support for PHP 5 will be dropped at the end of 2018, in line with PHP's [supported versions](http://php.net/supported-versions.php). \n\n### Fixes\n- `\\Assert\\Assertion::generateMessage()` will now receive the default message for an assertion if one is not supplied (Thanks to [Romans Malinovskis](https://github.com/beberlei/assert/issues/225))\n\n## 2.8.1 - 2017-11-30\n\n### Fixes\n- `Assertion::integerish()` has had several issues in the last couple of versions.  \n  Hopefully these are now fixed.\n  Thanks to [Erik Roelofs](https://github.com/beberlei/assert/issues/243) and [Michał Mleczko](https://github.com/beberlei/assert/issues/240)\n\n### Deprecation notice\n- The functions `\\Assert\\that()`, `\\Assert\\thatAll()`, `\\Assert\\thatNullOr()`, and `\\Assert\\lazy()` are no longer marked as deprecated.  \n  Both the functional and static constructors work together. Whichever you wish to use is a personal preference.  \n\n## 2.7.11 - 2017-11-13\n\n### Fixes\n- `Assertion::integerish(0)` and `Assertion::integerish('0')` now assert correctly.\n\n## 2.7.10 - 2017-11-13\n\n### Added assertions\n- `Assertion::base64()` (Thanks to [Pablo Kowalczyk](https://github.com/beberlei/assert/pull/232))\n\n## 2.7.9 - 2017-11-13\n\n### Fixes\n- `Assertion::integerish()` now correctly asserts integers with leading zeros in strings (Thanks to [Albert Casademont](https://github.com/beberlei/assert/pull/227#issuecomment-343961009))\n\n## 2.7.8 - 2017-10-20\n\n### Fixes\n- `Assertion::integerish()` now throws exception as expected (Thanks to [Thomas Flack](https://github.com/beberlei/assert/issues/235))\n\n## 2.7.7 - 2017-10-18\n\n### Fixes\n- Basic Auth usernames and passwords can contain '.' (Thanks to [Fede Isas](https://github.com/beberlei/assert/issues/234))\n\n## 2.7.6 - 2017-05-04\n\n### Fixes\n- Fixed stringification of booleans (Thanks to [Philipp Rieber](https://github.com/beberlei/assert/issues/226))\n\n## 2.7.5 - 2017-04-29\n### Added assertions\n- `Assert\\Assertion:isResource()` (Thanks to [Timothy Younger](https://github.com/beberlei/assert/pull/222))\n\n### Other changes\n- Corrected doc-block for `Assert\\Assertion::propertiesExist()`.\n\n## 2.7.4 - 2017-03-14\n### Added assertions\n- `Assert\\Assertion::objectOrClass()` (Thanks to [Timothy Younger](https://github.com/beberlei/assert/pull/218))\n- `Assert\\Assertion::propertyExists()` (Thanks to [Timothy Younger](https://github.com/beberlei/assert/pull/218))\n- `Assert\\Assertion::propertiesExist()` (Thanks to [Timothy Younger](https://github.com/beberlei/assert/pull/218))\n\n### Other changes\n- Unit tests no longer using deprecated exception methods (Thanks to [Richard Quadling](https://github.com/beberlei/assert/pull/217))\n- All global namespaced functions have been optimised (Thanks to [Andreas Möller](https://github.com/beberlei/assert/pull/211))\n\n## 2.7.3 - 2017-01-24\n\n### Fixes\n- Fix `Assert\\Assertion::integerish()` when used with a resource (Thanks to [manuxi](https://github.com/beberlei/assert/issues/206))\n\n## 2.7.2 - 2017-01-09\n\n### Fixes\n- Backward compatibility fixes for PHP 5.3\n\n## 2.7.1 - 2017-01-06\n### Added assertions\n- `Assert\\Assertion::extensionVersion()` (Thanks to [Timothy Younger](https://github.com/beberlei/assert/pull/205))\n- `Assert\\Assertion::phpVersion()` (Thanks to [Timothy Younger](https://github.com/beberlei/assert/pull/203))\n- `Assert\\Assertion::version()` (Thanks to [Timothy Younger](https://github.com/beberlei/assert/pull/203))\n\n### Other changes\n- Exception messages can now be constructed via a callback.\n- Documentation now includes types.\n\n## 2.6.9 - 2017-01-04\n### Added assertions\n- `Assert\\Assertion::defined()` (Thanks to [Timothy Younger](https://github.com/beberlei/assert/pull/193))\n- `Assert\\Assertion::extensionLoaded()` (Thanks to [Timothy Younger](https://github.com/beberlei/assert/pull/201))\n\n### Other changes\n- Added types to generated documentation.\n- Added PHPStan analysis for PHP 7+\n\n## 2.6.8 - 2016-12-05\n\n### Fixes\n- All exceptions thrown by this library extend `\\Assert\\InvalidArgumentException` (Thanks to [Richard Quadling](https://github.com/beberlei/assert/pull/187))\n\n### Other changes\n- Update to php-cs-fixer ^2.0 release (Thanks to [Raphael Stolt](https://github.com/beberlei/assert/pull/188))\n- Simplify XDebug disabling for Travis (Thanks to [Raphael Stolt](https://github.com/beberlei/assert/pull/189))\n- Use PSR-4 autoloading (Thanks to [Andreas Möller](https://github.com/beberlei/assert/pull/190))\n- Enable Composer package sorting (Thanks to [Raphael Stolt](https://github.com/beberlei/assert/pull/191))\n- Fix grammar in documentation (Thanks to [Adrian Föder](https://github.com/beberlei/assert/pull/192))\n\n## 2.6.7 - 2016-11-14\n\n### Fixes\n- [Fix the interfaceExists assertion](https://github.com/beberlei/assert/pull/182)\n- Fixed issue in document generator (Thanks to [Taco van den Broek](https://github.com/tacovandenbroek))\n\n### Other changes\n- [Added ability to capture multiple errors on a single value in a chain](https://github.com/beberlei/assert/pull/186) (Thanks to [Alec Carpenter](https://github.com/alecgunnar))\n- [Use static factory methods instead of functions in the Assert namespace](https://github.com/beberlei/assert/pull/184) (Thanks to [Taco van den Broek](https://github.com/tacovandenbroek))\n\n### Deprecation notice\n- The functions in the Assert namespace (`\\Assert\\that()`, `\\Assert\\thatAll()`, `\\Assert\\thatNullOr()` and `\\Assert\\lazy()`) are now marked as deprecated.\n  They will be removed in the next major release.\n  They have been replaced with the static methods `\\Assert\\Assert::that()`, `\\Assert\\Assert::thatAll()`, `\\Assert\\Assert::thatNullOr()` and `\\Assert\\Assert::lazy()`\n  \n## 2.6.6 - 2016-10-31\n\n### Other changes\n- [Make all assertions return true on success, so that it can be used inside PHP 7 assert()](https://github.com/beberlei/assert/issues/136)\n\n## 2.6.5 - 2016-10-11\n### Added assertions\n- `Assert\\Assertion::between()`\n- `Assert\\Assertion::betweenExclusive()`\n\n### Fixes\n- Allow `http://localhost` as a valid URL - fixes [Assertion::url('http://localhost') not a valid url?](https://github.com/beberlei/assert/issues/133)\n\n### Other changes\n- Upgraded regex and unit tests for `Assert\\Assertion::url()` to latest from Symfony/Validator\n- Added PHP-CS\n- Speed up of builds for Travis\n\n## 2.6.4 - 2016-10-03\n### Added assertions\n- `Assert\\Assertion::e164()` - The international public telecommunication numbering plan\n- `Assert\\Assertion::interfaceExists()`\n- `Assert\\Assertion::ip()` / `Assert\\Assertion::ipv4()` / `Assert\\Assertion::ipv6()`\n- `Assert\\Assertion::keyNotExists()`\n- `Assert\\Assertion::null()`\n- `Assert\\Assertion::satisfy()` - Allows for a bespoke assertion, rather than a predefined one\n\n### Fixes\n- Improved the reporting of the value for min and max assertions\n\n### Other changes\n- Removed `composer.lock` file from library\n- Improved travis build to detect incorrect documentation changes\n\n## 2.6.3 - 2016-07-28\n### Added assertions\n- `Assert\\Assertion::notInArray()`\n\n### Fixes\n- Made `Assert\\Assertion::INVALID_GREATER_OR_EQUAL` unique\n\n### Other changes\n- Introduced [CONTRIBUTING.md](https://github.com/beberlei/assert/blob/v2.6.3/CONTRIBUTING.md) to get contributors to generate the docblocks when a new assertion is added\n- Introduced [.editorconfig](https://github.com/beberlei/assert/blob/v2.6.3/.editorconfig) to allow IDEs that support EditorConfig to provide a consistent code style. \n  See [EditorConfig](http://editorconfig.org/) for further details\n- Additional tests and updated documentation.\n- Travis updates. \n\n## 2.6.2 - 2016-07-26\n### Fixes\n- Fixed unit test to work with PHP 5.3\n\n## 2.6.1 - 2016-07-26\n### Fixes\n- Fixed `Assertion::isCallable()` to with with PHP 5.3\n\n## 2.6 - 2016-07-26\n### Added assertions\n- `Assert\\Assertion::isCallable()`\n\n## 2.5.2 - 2016-07-26\n### Other changes\n- Updated tests\n- Updated `generate_method_docs.php` and regenerated all documentation\n- Added Richard Quadling as collaborator\n\n## 2.5.1 - 2016-05-20\n### Other changes\n- Updated missing assertions from documentation\n\n## 2.5 - 2016-03-22\n### Added assertions\n- `Assert\\Assertion::date()`\n\n### Other changes\n- Added appropriate guards to the additional assert functions to stop them from being defined twice\n\n## 2.4 - 2015-08-21\n### Added assertions\n- `Assert\\Assertion::lessThan()`\n- `Assert\\Assertion::lessOrEqualThan()`\n- `Assert\\Assertion::greaterThan()`\n- `Assert\\Assertion::greaterOrEqualThan()`\n\n### Other changes\n- Added support for PHP 5.6 and PHP 7.0 to Travis\n\n## 2.3 - 2015-12-18\n### Added assertions\n- `Assert\\Assertion::isTraversable()`\n- `Assert\\Assertion::isArrayAccessible()`\n- `Assert\\Assertion::keyIsset()` \n\n## 2.2 - 2015-12-18\n### Other changes\n- Used parameterised `sprintf()` for messages\n\n## 2.1 - 2015-11-06\n### Added assertions\n- `Assert\\Assertion::notEq()`\n- `Assert\\Assertion::notSame()`\n- `Assert\\Assertion::scalar()`\n- `Assert\\Assertion::choicesNotEmpty()`\n- `Assert\\Assertion::methodExists()`\n- `Assert\\Assertion::isObject()`\n\n## 2.0.1 - 2014-01-26\n### Other changes\n- Pass constraints and values to `Assert\\AssertionFailedException`\n\n## 2.0 - 2014-01-26\n### Other changes\n- Introduce AssertionChaining and LazyAssertions\n- Introduce `Assert\\Assertion::stringify()` to make a string version of a value\n\n## 1.7 - 2014-01-25\n### Added assertions\n- `Assert\\Assertion::float()`\n\n### Other changes\n- Added support for HHVM to Travis\n\n## 1.6 - 2013-11-05\n### Added assertions\n- `Assert\\Assertion::count()`\n\n### Other changes\n- Added support for PHP 5.5 to Travis\n\n## 1.5 - 2013-10-01\n### Added assertions\n- `Assert\\Assertion::notEmptyKey()`\n- `Assert\\Assertion::all....()`\n\n\n## 1.4 - 2013-07-07\n### Added assertions\n- `Assert\\Assertion::noContent()`\n- `Assert\\Assertion::endsWith()`\n- `Assert\\Assertion::notIsInstanceOf()`\n- `Assert\\Assertion::isJsonString()`\n- `Assert\\Assertion::uuid()`\n\n### Other changes\n- Added BSD-2 License\n\n## 1.3 - 2013-03-02\n### Added assertions\n- `Assert\\Assertion::length()`\n- `Assert\\Assertion::url()`\n- `Assert\\Assertion::false()`\n- `Assert\\Assertion::implementsInterface()`\n\n### Other changes\n- Travis now runs PHP Unit tests\n- Added `Assert\\InvalidArgumentException`\n- Added `$encoding = 'UTF-8'` parameter to appropriate assertions\n\n## 1.2 - 2012-07-23\n### Added assertions\n- `Assert\\Assertion::nullOr....()`\n\n## 1.1 - 2012-07-23\n### Added assertions\n- `Assert\\Assertion::eq()`\n- `Assert\\Assertion::same()`\n- `Assert\\Assertion::inArray()`\n- `Assert\\Assertion::min()`\n- `Assert\\Assertion::max()`\n- `Assert\\Assertion::true()`\n- `Assert\\Assertion::classExists()`\n\n### Other changes\n- Added `$propertyPath = null` parameter to assertions\n \n## 1.0 - 2012-05-20\n### Added assertions\n- `Assert\\Assertion::integer()`\n- `Assert\\Assertion::digit()`\n- `Assert\\Assertion::integerish()`\n- `Assert\\Assertion::boolean()`\n- `Assert\\Assertion::notEmpty()`\n- `Assert\\Assertion::string()`\n- `Assert\\Assertion::regex()`\n- `Assert\\Assertion::minLength()`\n- `Assert\\Assertion::maxLength()`\n- `Assert\\Assertion::betweenLength()`\n- `Assert\\Assertion::startsWith()`\n- `Assert\\Assertion::contains()`\n- `Assert\\Assertion::choice()`\n- `Assert\\Assertion::isArray()`\n- `Assert\\Assertion::keyExists()`\n- `Assert\\Assertion::notBlank()`\n- `Assert\\Assertion::isInstanceOf()`\n- `Assert\\Assertion::subclassOf()`\n- `Assert\\Assertion::range()`\n- `Assert\\Assertion::file()`\n- `Assert\\Assertion::readable()`\n- `Assert\\Assertion::writeable()`\n- `Assert\\Assertion::email()`\n- `Assert\\Assertion::alnum()`\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.703125,
          "content": "# How to contribute\n\nThanks for contributing to assert! Just follow these simple guidelines:\n\n- You must use [feature / topic branches](https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows) to ease the merge of contributions.\n- Coding standard compliance must be ensured before committing or opening pull requests by running `composer assert:cs-fix` or `composer assert:cs-lint` in the root directory of this repository.\n- After adding new assertions regenerate the [README.md](README.md) and the docblocks by running `composer assert:generate-docs` on the command line.\n- After adding new non release relevant artifacts you must ensure they are export ignored in the [.gitattributes](.gitattributes) file.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.533203125,
          "content": "Copyright (c) 2011-2013, Benjamin Eberlei\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n- Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n- Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.9052734375,
          "content": "# Assert\n\n[![Build Status](https://img.shields.io/travis/beberlei/assert.svg?style=for-the-badge&logo=travis)](https://travis-ci.org/beberlei/assert)\n[![Code Coverage](https://img.shields.io/scrutinizer/coverage/g/beberlei/assert.svg?style=for-the-badge&logo=scrutinizer)](https://scrutinizer-ci.com/g/beberlei/assert/)\n[![GitHub issues](https://img.shields.io/github/issues/beberlei/assert.svg?style=for-the-badge&logo=github)](https://github.com/beberlei/assert/issues)\n\n[![PHP Version](https://img.shields.io/packagist/php-v/beberlei/assert.svg?style=for-the-badge)](https://github.com/beberlei/assert)\n[![Stable Version](https://img.shields.io/packagist/v/beberlei/assert.svg?style=for-the-badge&label=Latest)](https://packagist.org/packages/beberlei/assert)\n\n[![Total Downloads](https://img.shields.io/packagist/dt/beberlei/assert.svg?style=for-the-badge&label=Total+downloads)](https://packagist.org/packages/beberlei/assert)\n[![Monthly Downloads](https://img.shields.io/packagist/dm/beberlei/assert.svg?style=for-the-badge&label=Monthly+downloads)](https://packagist.org/packages/beberlei/assert)\n[![Daily Downloads](https://img.shields.io/packagist/dd/beberlei/assert.svg?style=for-the-badge&label=Daily+downloads)](https://packagist.org/packages/beberlei/assert)\n\nA simple php library which contains assertions and guard methods for input validation (not filtering!) in business-model, libraries and application low-level code.\nThe library can be used to implement pre-/post-conditions on input data.\n\nIdea is to reduce the amount of code for implementing assertions in your model and also simplify the code paths to implement assertions. When assertions fail, an exception is thrown, removing the\nnecessity for if-clauses in your code.\n\nThe library is not using Symfony or Zend Validators for a reason: The checks have to be low-level, fast, non-object-oriented code to be used everywhere necessary. Using any of the two libraries\nrequires instantiation of several objects, using a locale component, translations, you name it. Its too much bloat.\n\n## Installation\n\nUsing Composer:\n\n```sh\ncomposer require beberlei/assert\n```\n\n## Example usages\n\n```php\n<?php\nuse Assert\\Assertion;\n\nfunction duplicateFile($file, $times)\n{\n    Assertion::file($file);\n    Assertion::digit($times);\n\n    for ($i = 0; $i < $times; $i++) {\n        copy($file, $file . $i);\n    }\n}\n```\n\nReal time usage with [Azure Blob Storage](https://github.com/beberlei/azure-blob-storage/blob/master/lib/Beberlei/AzureBlobStorage/BlobClient.php#L571):\n\n```php\n<?php\npublic function putBlob($containerName = '', $blobName = '', $localFileName = '', $metadata = array(), $leaseId = null, $additionalHeaders = array())\n{\n    Assertion::notEmpty($containerName, 'Container name is not specified');\n    self::assertValidContainerName($containerName);\n    Assertion::notEmpty($blobName, 'Blob name is not specified.');\n    Assertion::notEmpty($localFileName, 'Local file name is not specified.');\n    Assertion::file($localFileName, 'Local file name is not specified.');\n    self::assertValidRootContainerBlobName($containerName, $blobName);\n\n    // Check file size\n    if (filesize($localFileName) >= self::MAX_BLOB_SIZE) {\n        return $this->putLargeBlob($containerName, $blobName, $localFileName, $metadata, $leaseId, $additionalHeaders);\n    }\n\n    // Put the data to Windows Azure Storage\n    return $this->putBlobData($containerName, $blobName, file_get_contents($localFileName), $metadata, $leaseId, $additionalHeaders);\n}\n```\n\n### NullOr helper\n\nA helper method (`Assertion::nullOr*`) is provided to check if a value is null OR holds for the assertion:\n\n```php\n<?php\nAssertion::nullOrMax(null, 42); // success\nAssertion::nullOrMax(1, 42);    // success\nAssertion::nullOrMax(1337, 42); // exception\n```\n\n### All helper\n\nThe `Assertion::all*` method checks if all provided values hold for the\nassertion. It will throw an exception of the assertion does not hold for one of\nthe values:\n\n```php\n<?php\nAssertion::allIsInstanceOf(array(new \\stdClass, new \\stdClass), 'stdClass'); // success\nAssertion::allIsInstanceOf(array(new \\stdClass, new \\stdClass), 'PDO');      // exception\n```\n\n### Assert::that() Chaining\n\nUsing the static API on values is very verbose when checking values against multiple assertions.\nStarting with 2.6.7 of Assert the `Assert` class provides a much nicer fluent API for assertions, starting\nwith `Assert::that($value)` and then receiving the assertions you want to call\non the fluent interface. You only have to specify the `$value` once.\n\n```php\n<?php\nAssert::that($value)->notEmpty()->integer();\nAssert::that($value)->nullOr()->string()->startsWith(\"Foo\");\nAssert::that($values)->all()->float();\n```\n\nThere are also two shortcut function `Assert::thatNullOr()` and `Assert::thatAll()` enabling\nthe \"nullOr\" or \"all\" helper respectively.\n\n### Lazy Assertions\n\nThere are many cases in web development, especially when involving forms, you want to collect several errors\ninstead of aborting directly on the first error. This is what lazy assertions are for. Their API\nworks exactly like the fluent ``Assert::that()`` API, but instead of throwing an Exception directly,\nthey collect all errors and only trigger the exception when the method\n``verifyNow()`` is called on the ``Assert\\SoftAssertion`` object.\n\n```php\n<?php\nAssert::lazy()\n    ->that(10, 'foo')->string()\n    ->that(null, 'bar')->notEmpty()\n    ->that('string', 'baz')->isArray()\n    ->verifyNow();\n```\n\nThe method ``that($value, $propertyPath)`` requires a property path (name), so that you know how to differentiate\nthe errors afterwards.\n\nOn failure ``verifyNow()`` will throw an exception\n``Assert\\\\LazyAssertionException`` with a combined message:\n\n    The following 3 assertions failed:\n    1) foo: Value \"10\" expected to be string, type integer given.\n    2) bar: Value \"<NULL>\" is empty, but non empty value was expected.\n    3) baz: Value \"string\" is not an array.\n\nYou can also retrieve all the ``AssertionFailedException``s by calling ``getErrorExceptions()``.\nThis can be useful for example to build a failure response for the user.\n\nFor those looking to capture multiple errors on a single value when using a lazy assertion chain,\nyou may follow your call to ``that`` with ``tryAll`` to run all assertions against the value, and\ncapture all of the resulting failed assertion error messages. Here's an example:\n\n```php\nAssert::lazy()\n    ->that(10, 'foo')->tryAll()->integer()->between(5, 15)\n    ->that(null, 'foo')->tryAll()->notEmpty()->string()\n    ->verifyNow();\n```\n\nThe above shows how to use this functionality to finely tune the behavior of reporting failures, but to make\ncatching all failures even easier, you may also call ``tryAll`` before making any assertions like below. This\nhelps to reduce method calls, and has the same behavior as above.\n\n```php\nAssert::lazy()->tryAll()\n    ->that(10, 'foo')->integer()->between(5, 15)\n    ->that(null, 'foo')->notEmpty()->string()\n    ->verifyNow();\n```\n\n### Functional Constructors\n\nThe following functions exist as aliases to `Assert` static constructors:\n\n- `Assert\\that()`\n- `Assert\\thatAll()`\n- `Assert\\thatNullOr()`\n- `Assert\\lazy()`\n\nUsing the functional or static constructors is entirely personal preference.\n\n**Note:** The functional constructors will not work with an [`Assertion` extension](#your-own-assertion-class).\nHowever it is trivial to recreate these functions in a way that point to the extended class.\n\n## List of assertions\n\n```php\n<?php\nuse Assert\\Assertion;\n\nAssertion::alnum(mixed $value);\nAssertion::base64(string $value);\nAssertion::between(mixed $value, mixed $lowerLimit, mixed $upperLimit);\nAssertion::betweenExclusive(mixed $value, mixed $lowerLimit, mixed $upperLimit);\nAssertion::betweenLength(mixed $value, int $minLength, int $maxLength);\nAssertion::boolean(mixed $value);\nAssertion::choice(mixed $value, array $choices);\nAssertion::choicesNotEmpty(array $values, array $choices);\nAssertion::classExists(mixed $value);\nAssertion::contains(mixed $string, string $needle);\nAssertion::count(array|Countable|ResourceBundle|SimpleXMLElement $countable, int $count);\nAssertion::date(string $value, string $format);\nAssertion::defined(mixed $constant);\nAssertion::digit(mixed $value);\nAssertion::directory(string $value);\nAssertion::e164(string $value);\nAssertion::email(mixed $value);\nAssertion::endsWith(mixed $string, string $needle);\nAssertion::eq(mixed $value, mixed $value2);\nAssertion::eqArraySubset(mixed $value, mixed $value2);\nAssertion::extensionLoaded(mixed $value);\nAssertion::extensionVersion(string $extension, string $operator, mixed $version);\nAssertion::false(mixed $value);\nAssertion::file(string $value);\nAssertion::float(mixed $value);\nAssertion::greaterOrEqualThan(mixed $value, mixed $limit);\nAssertion::greaterThan(mixed $value, mixed $limit);\nAssertion::implementsInterface(mixed $class, string $interfaceName);\nAssertion::inArray(mixed $value, array $choices);\nAssertion::integer(mixed $value);\nAssertion::integerish(mixed $value);\nAssertion::interfaceExists(mixed $value);\nAssertion::ip(string $value, int $flag = null);\nAssertion::ipv4(string $value, int $flag = null);\nAssertion::ipv6(string $value, int $flag = null);\nAssertion::isArray(mixed $value);\nAssertion::isArrayAccessible(mixed $value);\nAssertion::isCallable(mixed $value);\nAssertion::isCountable(array|Countable|ResourceBundle|SimpleXMLElement $value);\nAssertion::isInstanceOf(mixed $value, string $className);\nAssertion::isJsonString(mixed $value);\nAssertion::isObject(mixed $value);\nAssertion::isResource(mixed $value);\nAssertion::isTraversable(mixed $value);\nAssertion::keyExists(mixed $value, string|int $key);\nAssertion::keyIsset(mixed $value, string|int $key);\nAssertion::keyNotExists(mixed $value, string|int $key);\nAssertion::length(mixed $value, int $length);\nAssertion::lessOrEqualThan(mixed $value, mixed $limit);\nAssertion::lessThan(mixed $value, mixed $limit);\nAssertion::max(mixed $value, mixed $maxValue);\nAssertion::maxCount(array|Countable|ResourceBundle|SimpleXMLElement $countable, int $count);\nAssertion::maxLength(mixed $value, int $maxLength);\nAssertion::methodExists(string $value, mixed $object);\nAssertion::min(mixed $value, mixed $minValue);\nAssertion::minCount(array|Countable|ResourceBundle|SimpleXMLElement $countable, int $count);\nAssertion::minLength(mixed $value, int $minLength);\nAssertion::noContent(mixed $value);\nAssertion::notBlank(mixed $value);\nAssertion::notContains(mixed $string, string $needle);\nAssertion::notEmpty(mixed $value);\nAssertion::notEmptyKey(mixed $value, string|int $key);\nAssertion::notEq(mixed $value1, mixed $value2);\nAssertion::notInArray(mixed $value, array $choices);\nAssertion::notIsInstanceOf(mixed $value, string $className);\nAssertion::notNull(mixed $value);\nAssertion::notRegex(mixed $value, string $pattern);\nAssertion::notSame(mixed $value1, mixed $value2);\nAssertion::null(mixed $value);\nAssertion::numeric(mixed $value);\nAssertion::objectOrClass(mixed $value);\nAssertion::phpVersion(string $operator, mixed $version);\nAssertion::propertiesExist(mixed $value, array $properties);\nAssertion::propertyExists(mixed $value, string $property);\nAssertion::range(mixed $value, mixed $minValue, mixed $maxValue);\nAssertion::readable(string $value);\nAssertion::regex(mixed $value, string $pattern);\nAssertion::same(mixed $value, mixed $value2);\nAssertion::satisfy(mixed $value, callable $callback);\nAssertion::scalar(mixed $value);\nAssertion::startsWith(mixed $string, string $needle);\nAssertion::string(mixed $value);\nAssertion::subclassOf(mixed $value, string $className);\nAssertion::true(mixed $value);\nAssertion::uniqueValues(array $values);\nAssertion::url(mixed $value);\nAssertion::uuid(string $value);\nAssertion::version(string $version1, string $operator, string $version2);\nAssertion::writeable(string $value);\n\n```\n\nRemember: When a configuration parameter is necessary, it is always passed AFTER the value. The value is always the first parameter.\n\n## Exception & Error Handling\n\nIf any of the assertions fails a `Assert\\AssertionFailedException` is thrown.\nYou can pass an argument called ```$message``` to any assertion to control the\nexception message. Every exception contains a default message and unique message code\nby default.\n\n```php\n<?php\nuse Assert\\Assertion;\nuse Assert\\AssertionFailedException;\n\ntry {\n    Assertion::integer($value, \"The pressure of gas is measured in integers.\");\n} catch(AssertionFailedException $e) {\n    // error handling\n    $e->getValue(); // the value that caused the failure\n    $e->getConstraints(); // the additional constraints of the assertion.\n}\n```\n\n``Assert\\AssertionFailedException`` is just an interface and the default\nimplementation is ``Assert\\InvalidArgumentException`` which extends the SPL\n``InvalidArgumentException``. You can change the exception being used on a\npackage based level.\n\n### Customised exception messages\n\nYou can pass a callback as the message parameter, allowing you to construct your own\nmessage only if an assertion fails, rather than every time you run the test.\n\nThe callback will be supplied with an array of parameters that are for the assertion.\n\nAs some assertions call other assertions, your callback will need to example the array\nto determine what assertion failed.\n\nThe array will contain a key called `::assertion` that indicates which assertion\nfailed.\n\nThe callback should return the string that will be used as the exception\nmessage.\n\n## Your own Assertion class\n\nTo shield your library from possible bugs, misinterpretations or BC breaks\ninside Assert you should introduce a library/project based assertion subclass,\nwhere you can override the exception thrown as well.\n\nIn addition, you can override the ``Assert\\Assertion::stringify()`` method to\nprovide your own interpretations of the types during error handling.\n\n```php\n<?php\nnamespace MyProject;\n\nuse Assert\\Assertion as BaseAssertion;\n\nclass Assertion extends BaseAssertion\n{\n    protected static $exceptionClass = 'MyProject\\AssertionFailedException';\n}\n```\n\nAs of V2.9.2, [Lazy Assertions](#lazy-assertions) now have access to any additional\nassertions present in your own assertion classes.\n\n## Contributing\nPlease see [CONTRIBUTING](CONTRIBUTING.md) for more details.\n\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 0.556640625,
          "content": "# TODO\n\n- Refactor unit tests into sets of related assertions.\n- Refactor all unit tests to use the new recommend exception testing pattern as the current `setExpectedException()` method is deprecated.\n- Separate assertions into sets that deal with related themes:\n  - Variable type (isInt, isString isBoolean, isArray, etc.)\n  - Variable content (min, max, between, etc.)\n  - Scalar structures (keyExists, keyIsSet etc),\n  - Class/interface definition (classExists, subClassOf, etc).\n  - Class/interface content (methodExists, propertyExists, propertyIsSettable, etc.)\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.685546875,
          "content": "{\n  \"name\": \"beberlei/assert\",\n  \"description\": \"Thin assertion library for input validation in business models.\",\n  \"authors\": [\n    {\n      \"name\": \"Benjamin Eberlei\",\n      \"email\": \"kontakt@beberlei.de\",\n      \"role\": \"Lead Developer\"\n    },\n    {\n      \"name\": \"Richard Quadling\",\n      \"email\": \"rquadling@gmail.com\",\n      \"role\": \"Collaborator\"\n    }\n  ],\n  \"license\": \"BSD-2-Clause\",\n  \"keywords\": [\n    \"assert\",\n    \"assertion\",\n    \"validation\"\n  ],\n  \"config\": {\n    \"sort-packages\": true\n  },\n  \"require\": {\n    \"php\": \"^7.1 || ^8.0\",\n    \"ext-simplexml\": \"*\",\n    \"ext-mbstring\": \"*\",\n    \"ext-ctype\": \"*\",\n    \"ext-json\": \"*\"\n  },\n  \"require-dev\": {\n    \"friendsofphp/php-cs-fixer\": \"*\",\n    \"phpstan/phpstan\": \"*\",\n    \"phpunit/phpunit\": \">=6.0.0\",\n    \"yoast/phpunit-polyfills\": \"^0.1.0\"\n  },\n  \"autoload\": {\n    \"psr-4\": {\n      \"Assert\\\\\": \"lib/Assert\"\n    },\n    \"files\": [\n      \"lib/Assert/functions.php\"\n    ]\n  },\n  \"autoload-dev\": {\n    \"psr-4\": {\n      \"Assert\\\\Tests\\\\\": \"tests/Assert/Tests\"\n    },\n    \"files\": [\n      \"tests/Assert/Tests/Fixtures/functions.php\"\n    ]\n  },\n  \"scripts\": {\n    \"assert:generate-docs\": \"php bin/generate_method_docs.php\",\n    \"assert:cs-lint\": \"php-cs-fixer fix --diff -vvv --dry-run\",\n    \"assert:cs-fix\": \"php-cs-fixer fix . -vvv || true\",\n    \"assert:sa-code\": \"vendor/bin/phpstan analyse --configuration=phpstan-code.neon --no-progress --ansi -l 7 bin lib\",\n    \"assert:sa-tests\": \"vendor/bin/phpstan analyse --configuration=phpstan-tests.neon --no-progress --ansi -l 7 tests\"\n  },\n  \"suggest\": {\n    \"ext-intl\": \"Needed to allow Assertion::count(), Assertion::isCountable(), Assertion::minCount(), and Assertion::maxCount() to operate on ResourceBundles\"\n  }\n}\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpstan-code.neon",
          "type": "blob",
          "size": 0.52734375,
          "content": "parameters:\n    autoload_files:\n        - bin/MethodDocGenerator.php\n    ignoreErrors:\n        # is_countable() is available only in PHP 7.3+\n        - '#Function is_countable not found#'\n\n        # Calling count() on ResourceBundle and SimpleXMLElement is valid from PHP 7.0+, but does not correctly advertise\n        # the fact, and so PHPStan has an issue with this. This will be fixed in PHP 7.4+\n        - '#Call to function count\\(\\) with argument type array|Countable|ResourceBundle|SimpleXMLElement will always result in number 1#'\n"
        },
        {
          "name": "phpstan-tests.neon",
          "type": "blob",
          "size": 0.845703125,
          "content": "parameters:\n    ignoreErrors:\n        # The following errors are ignored as they are testing for errors and exceptions that static analysis correctly identifies as problems.\n        - '#Call to an undefined method Assert\\\\AssertionChain::unknownAssertion\\(\\)#'\n        - '#Call to an undefined static method Assert\\\\Assertion::nullOrAssertionDoesNotExist\\(\\)#'\n        - '#Class Foo not found#'\n        - '#Parameter \\#1 $value of static method Assert\\\\Assertion::isCountable\\(\\) expects array|Countable|ResourceBundle|SimpleXMLElement, string given#'\n        - '#Parameter \\#2 \\$operator of static method Assert\\\\Assertion::version\\(\\) expects string, null given#'\n        - '#Static method Assert\\\\Assertion::allTrue\\(\\) invoked with 0 parameters, 1-3 required#'\n        - '#Static method Assert\\\\Assertion::nullOrMax\\(\\) invoked with 0 parameters, 2-4 required#'\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.9501953125,
          "content": "<?xml version=\"1.0\" ?>\n<phpunit\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"http://schema.phpunit.de/5.5/phpunit.xsd\"\n    backupGlobals=\"false\"\n    bootstrap=\"tests/bootstrap.php\"\n    beStrictAboutChangesToGlobalState=\"true\"\n    beStrictAboutOutputDuringTests=\"true\"\n    beStrictAboutTestsThatDoNotTestAnything=\"true\"\n    colors=\"true\"\n    columns=\"max\"\n    convertErrorsToExceptions=\"true\"\n    convertNoticesToExceptions=\"true\"\n    convertWarningsToExceptions=\"true\"\n    stopOnError=\"false\"\n    stopOnFailure=\"false\"\n    stopOnIncomplete=\"false\"\n    stopOnSkipped=\"false\"\n    verbose=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"Assertion\">\n            <directory suffix=\"Test.php\">./tests/</directory>\n        </testsuite>\n    </testsuites>\n\n    <filter>\n        <whitelist addUncoveredFilesFromWhitelist=\"true\">\n            <directory suffix=\".php\">./lib/</directory>\n        </whitelist>\n    </filter>\n\n</phpunit>\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}