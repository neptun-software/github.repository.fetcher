{
  "metadata": {
    "timestamp": 1736711966665,
    "page": 423,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "TheAlgorithms/PHP",
      "stars": 2185,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0888671875,
          "content": "/vendor/\n.idea\n.vscode\n.phan\ncomposer.lock\n\n/.phpcs-cache\n/phpcs.xml\n\n.phpunit.result.cache"
        },
        {
          "name": ".gitpod.Dockerfile",
          "type": "blob",
          "size": 0.0458984375,
          "content": "FROM gitpod/workspace-full:2022-05-08-14-31-53\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.095703125,
          "content": "image:\n    file: .gitpod.Dockerfile\n\ntasks:\n  - init: |\n      echo \"Welcome to TheAlgorithms/PHP\"\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.02734375,
          "content": "# Contributing guidelines\n\n## Before contributing\n\nWelcome to [TheAlgorithms/PHP](https://github.com/TheAlgorithms/PHP)! Before sending your pull requests, make sure that you **read the entire guide**. If you have any question about the contributing guide, please feel free to [state it clearly in an issue](https://github.com/TheAlgorithms/PHP/issues/new) or ask the community in [Gitter](https://gitter.im/TheAlgorithms).\n\n## Contributing\n\n### Contributor\n\nWe are very happy that you would consider contributing! As a contributor, you agree and confirm that:\n\n- You did your work - no plagiarism allowed\n  - Any plagiarized work will not be merged\n- Your work will be distributed under [MIT License](LICENSE) once your pull request is merged\n- Your submitted work follows (or mostly follows) the styles and standards already found in this repo\n\n**New implementations** are welcome! For example, new solutions for an existing problem, different representations for a graph data structure or an algorithm design with different complexity.\n\n**Improving comments** and **writing proper tests** are also highly welcome.\n\n### Contribution\n\nWe appreciate any contribution, from fixing a grammar mistake in a comment to implementing complex algorithms. Please read this section if you are contributing your work.\n\nPlease help us keep our issue list small by adding fixes: #{$ISSUE_NO} to the commit message of pull requests that resolve open issues. GitHub will use this tag to auto close the issue when the PR is merged.\n\n#### What is an Algorithm?\n\nAn Algorithm is one or more functions (or classes) that:\n* take one or more inputs,\n* perform some internal calculations or data manipulations,\n* return one or more outputs,\n* have minimal side effects (Ex. print(), plot(), read(), write()).\n\nAlgorithms should be packaged in a way that would make it easy for readers to put them into larger programs.\n\nAlgorithms should:\n* have intuitive class and function names that make their purpose clear to readers\n* use PHP naming conventions and intuitive variable names to ease comprehension\n* be flexible to take different input values\n* have PHP type hints for their input parameters and return values\n* raise PHP exceptions (UnexpectedValueException, etc.) on erroneous input values\n* have docstrings with clear explanations and/or URLs to source materials\n* contain doctests that test both valid and erroneous input values\n* return all calculation results instead of printing or plotting them\n\nAlgorithms in this repo should not be how-to examples for existing PHP packages.  Instead, they should perform internal calculations or manipulations to convert input values into different output values.  Those calculations or manipulations can use data types, classes, or functions of existing PHP packages but each algorithm in this repo should add unique value.\n\n#### Coding Style\n\nWe want your work to be readable by others; therefore, we encourage you to note the following:\n\n- Please write in PHP 7.1+\n- Please put thought into naming of functions, classes, and variables.  Help your reader by using __descriptive names__ that can help you to remove redundant comments\n  - Single letter variable names are _old school_ so please avoid them unless their life only spans a few lines\n  - Please follow the [PHP Basic Coding Standard](https://www.php-fig.org/psr/psr-12/) style guide.  So functionNames should be camelCase, CONSTANTS in UPPER_CASE, Name\\Spaces and ClassNames should follow an \"autoloading\" PSR, etc.\n\n- Original code submission require docstrings or comments to describe your work\n\n- More on docstrings and comments:\n\n  If you used a Wikipedia article or some other source material to create your algorithm, please add the URL in a docstring or comment to help your reader\n\n- Write proper unit tests (see examples in [tests](https://github.com/TheAlgorithms/PHP/tree/master/tests) and ensure all unit tests are passing (composer run-script test)\n\n- Avoid importing external libraries for basic algorithms. Only use them for complicated algorithms\n\n- Ensure code is linted with phpcs, and passing all linting checks (vendor/bin/phpcs -n)\n\n#### Other Standard While Submitting Your Work\n\n- File extension for code should be `.php` \n- After adding a new File/Directory, please make sure to update the [DIRECTORY.md](DIRECTORY.md) file with the details.\n- If possible, follow the standard *within* the folder you are submitting to\n- If you have modified/added code work, make sure the code compiles before submitting\n- If you have modified/added documentation work, ensure your language is concise and contains no grammar errors\n- Add a corresponding explanation to [Algorithms-Explanation](https://github.com/TheAlgorithms/Algorithms-Explanation) (Optional but recommended).\n\n- Most importantly,\n  - **Be consistent in the use of these guidelines when submitting.**\n  - **Join** [Gitter](https://gitter.im/TheAlgorithms) **now!**\n  - Happy coding!\n\nWriter [@darwinz](https://github.com/darwinz), Aug 2020 (based on [TheAlgorithms/Python](https://github.com/TheAlgorithms/Python/blob/master/CONTRIBUTING.md) by [@poyea](https://github.com/poyea))\n"
        },
        {
          "name": "Ciphers",
          "type": "tree",
          "content": null
        },
        {
          "name": "Conversions",
          "type": "tree",
          "content": null
        },
        {
          "name": "DIRECTORY.md",
          "type": "blob",
          "size": 8.5908203125,
          "content": "# List of all files\n\n## Ciphers\n  * [Atbashcipher](./Ciphers/AtbashCipher.php)\n  * [Caesarcipher](./Ciphers/CaesarCipher.php)\n  * [Monoalphabeticcipher](./Ciphers/MonoAlphabeticCipher.php)\n  * [Morsecode](./Ciphers/MorseCode.php)\n  * [Railfencecipher](./Ciphers/RailfenceCipher.php)\n  * [Vignerecipher](./Ciphers/VignereCipher.php)\n  * [Xorcipher](./Ciphers/XORCipher.php)\n\n## Conversions\n  * [Binarytodecimal](./Conversions/BinaryToDecimal.php)\n  * [Decimaltobinary](./Conversions/DecimalToBinary.php)\n  * [Hexadecimaltodecimal](./Conversions/HexadecimalToDecimal.php)\n  * [Octaltodecimal](./Conversions/OctalToDecimal.php)\n  * [Speedconversion](./Conversions/SpeedConversion.php)\n  * [Temperatureconversions](./Conversions/TemperatureConversions.php)\n\n## Datastructures\n  * Avltree\n    * [Avltree](./DataStructures/AVLTree/AVLTree.php)\n    * [Avltreenode](./DataStructures/AVLTree/AVLTreeNode.php)\n    * [Treetraversal](./DataStructures/AVLTree/TreeTraversal.php)\n  * Binarysearchtree\n    * [Binarytreetraversal](./DataStructures/BinarySearchTree/BinaryTreeTraversal.php)\n    * [Bstnode](./DataStructures/BinarySearchTree/BSTNode.php)\n    * [Bstree](./DataStructures/BinarySearchTree/BSTree.php)\n    * [Duplicatekeyexception](./DataStructures/BinarySearchTree/DuplicateKeyException.php)\n  * Comparebinarytree\n    * [Binarytreenode](./DataStructures/CompareBinaryTree/BinaryTreeNode.php)\n    * [Comparebinarytree](./DataStructures/CompareBinaryTree/CompareBinaryTree.php)\n  * Disjointsets\n    * [Disjointset](./DataStructures/DisjointSets/DisjointSet.php)\n    * [Disjointsetnode](./DataStructures/DisjointSets/DisjointSetNode.php)\n  * [Doublylinkedlist](./DataStructures/DoublyLinkedList.php)\n  * Invertbinarytree\n    * [Binarytree](./DataStructures/InvertBinaryTree/BinaryTree.php)\n    * [Invertbinarytree](./DataStructures/InvertBinaryTree/InvertBinaryTree.php)\n  * [Node](./DataStructures/Node.php)\n  * [Queue](./DataStructures/Queue.php)\n  * Reverselinkedlist\n    * [Linkedlistitem](./DataStructures/ReverseLinkedList/LinkedListItem.php)\n    * [Reverselinkedlist](./DataStructures/ReverseLinkedList/ReverseLinkedList.php)\n  * Segmenttree\n    * [Segmenttree](./DataStructures/SegmentTree/SegmentTree.php)\n    * [Segmenttreenode](./DataStructures/SegmentTree/SegmentTreeNode.php)\n  * [Singlylinkedlist](./DataStructures/SinglyLinkedList.php)\n  * Splaytree\n    * [Splaytree](./DataStructures/SplayTree/SplayTree.php)\n    * [Splaytreenode](./DataStructures/SplayTree/SplayTreeNode.php)\n    * [Splaytreerotations](./DataStructures/SplayTree/SplayTreeRotations.php)\n  * [Stack](./DataStructures/Stack.php)\n  * Trie\n    * [Trie](./DataStructures/Trie/Trie.php)\n    * [Trienode](./DataStructures/Trie/TrieNode.php)\n\n## Graphs\n  * [Bellmanford](./Graphs/BellmanFord.php)\n  * [Breadthfirstsearch](./Graphs/BreadthFirstSearch.php)\n  * [Depthfirstsearch](./Graphs/DepthFirstSearch.php)\n  * [Dijkstras](./Graphs/Dijkstras.php)\n  * [Graphedge](./Graphs/GraphEdge.php)\n\n## Maths\n  * [Absolutemax](./Maths/AbsoluteMax.php)\n  * [Absolutemin](./Maths/AbsoluteMin.php)\n  * [Armstrongnumber](./Maths/ArmstrongNumber.php)\n  * [Basex](./Maths/BaseX.php)\n  * [Checkeven](./Maths/CheckEven.php)\n  * [Checkodd](./Maths/CheckOdd.php)\n  * [Checkpalindrome](./Maths/CheckPalindrome.php)\n  * [Checkprime](./Maths/CheckPrime.php)\n  * [Eratosthenessieve](./Maths/EratosthenesSieve.php)\n  * [Factorial](./Maths/Factorial.php)\n  * [Fastexponentiation](./Maths/FastExponentiation.php)\n  * [Fastinversesquareroot](./Maths/FastInverseSquareRoot.php)\n  * [Fibonacci](./Maths/Fibonacci.php)\n  * [Fibonacci2](./Maths/Fibonacci2.php)\n  * [Greatestcommondivisor](./Maths/GreatestCommonDivisor.php)\n  * [Mean](./Maths/Mean.php)\n  * [Median](./Maths/Median.php)\n  * [Mode](./Maths/Mode.php)\n  * [Neonnumber](./Maths/NeonNumber.php)\n  * [Perfectnumber](./Maths/PerfectNumber.php)\n  * [Perfectsquare](./Maths/PerfectSquare.php)\n  * Projecteuler\n    * [Problem1](./Maths/ProjectEuler/Problem1.php)\n    * [Problem10](./Maths/ProjectEuler/Problem10.php)\n    * [Problem11](./Maths/ProjectEuler/Problem11.php)\n    * [Problem2](./Maths/ProjectEuler/Problem2.php)\n    * [Problem3](./Maths/ProjectEuler/Problem3.php)\n    * [Problem4](./Maths/ProjectEuler/Problem4.php)\n    * [Problem5](./Maths/ProjectEuler/Problem5.php)\n    * [Problem6](./Maths/ProjectEuler/Problem6.php)\n    * [Problem7](./Maths/ProjectEuler/Problem7.php)\n    * [Problem8](./Maths/ProjectEuler/Problem8.php)\n    * [Problem9](./Maths/ProjectEuler/Problem9.php)\n\n## Neuralnetworks\n  * Perceptronclassifier\n    * [Neuralnetworkperceptronclassifier](./NeuralNetworks/PerceptronClassifier/NeuralNetworkPerceptronClassifier.php)\n\n## Searches\n  * [Binarysearch](./Searches/BinarySearch.php)\n  * [Exponentialsearch](./Searches/ExponentialSearch.php)\n  * [Fibonaccisearch](./Searches/FibonacciSearch.php)\n  * [Interpolationsearch](./Searches/InterpolationSearch.php)\n  * [Jumpsearch](./Searches/JumpSearch.php)\n  * [Linearsearch](./Searches/LinearSearch.php)\n  * [Lowerbound](./Searches/LowerBound.php)\n  * [Sentinelsearch](./Searches/SentinelSearch.php)\n  * [Ternarysearch](./Searches/TernarySearch.php)\n  * [Twopointers](./Searches/TwoPointers.php)\n  * [Upperbound](./Searches/UpperBound.php)\n\n## Sorting\n  * [Arraykeyssort](./Sorting/ArrayKeysSort.php)\n  * [Bubblesort](./Sorting/BubbleSort.php)\n  * [Bubblesort2](./Sorting/BubbleSort2.php)\n  * [Countsort](./Sorting/CountSort.php)\n  * [Gnomesort](./Sorting/GnomeSort.php)\n  * [Heapsort](./Sorting/HeapSort.php)\n  * [Insertionsort](./Sorting/InsertionSort.php)\n  * [Mergesort](./Sorting/MergeSort.php)\n  * [Quicksort](./Sorting/QuickSort.php)\n  * [Radixsort](./Sorting/RadixSort.php)\n  * [Selectionsort](./Sorting/SelectionSort.php)\n  * [Shellsort](./Sorting/ShellSort.php)\n\n## Strings\n  * [Checkanagram](./Strings/CheckAnagram.php)\n  * [Checkpalindrome](./Strings/CheckPalindrome.php)\n  * [Checkpalindrome2](./Strings/CheckPalindrome2.php)\n  * [Countconsonants](./Strings/CountConsonants.php)\n  * [Counthomogenous](./Strings/CountHomogenous.php)\n  * [Countsentences](./Strings/CountSentences.php)\n  * [Countvowels](./Strings/CountVowels.php)\n  * [Distance](./Strings/Distance.php)\n  * [Maxcharacter](./Strings/MaxCharacter.php)\n  * [Reversestring](./Strings/ReverseString.php)\n  * [Reversewords](./Strings/ReverseWords.php)\n\n## Tests\n  * Ciphers\n    * [Atbashciphertest](./tests/Ciphers/AtbashCipherTest.php)\n    * [Cipherstest](./tests/Ciphers/CiphersTest.php)\n    * [Monoalphabeticciphertest](./tests/Ciphers/MonoAlphabeticCipherTest.php)\n    * [Morsecodetest](./tests/Ciphers/MorseCodeTest.php)\n    * [Railfenceciphertest](./tests/Ciphers/RailfenceCipherTest.php)\n    * [Vignereciphertest](./tests/Ciphers/VignereCipherTest.php)\n  * Conversions\n    * [Conversionstest](./tests/Conversions/ConversionsTest.php)\n  * Datastructures\n    * [Avltreetest](./tests/DataStructures/AVLTreeTest.php)\n    * [Bstreetest](./tests/DataStructures/BSTreeTest.php)\n    * [Comparebinarytreetest](./tests/DataStructures/CompareBinaryTreeTest.php)\n    * [Disjointsettest](./tests/DataStructures/DisjointSetTest.php)\n    * [Doublylinkedlisttest](./tests/DataStructures/DoublyLinkedListTest.php)\n    * [Invertbinarytreetest](./tests/DataStructures/InvertBinaryTreeTest.php)\n    * [Queuetest](./tests/DataStructures/QueueTest.php)\n    * [Reverselinkedlisttest](./tests/DataStructures/ReverseLinkedListTest.php)\n    * [Segmenttreetest](./tests/DataStructures/SegmentTreeTest.php)\n    * [Singlylinkedlisttest](./tests/DataStructures/SinglyLinkedListTest.php)\n    * [Splaytreetest](./tests/DataStructures/SplayTreeTest.php)\n    * [Stacktest](./tests/DataStructures/StackTest.php)\n    * [Trietest](./tests/DataStructures/TrieTest.php)\n  * Graphs\n    * [Bellmanfordtest](./tests/Graphs/BellmanFordTest.php)\n    * [Breadthfirstsearchtest](./tests/Graphs/BreadthFirstSearchTest.php)\n    * [Depthfirstsearchtest](./tests/Graphs/DepthFirstSearchTest.php)\n    * [Dijkstrastest](./tests/Graphs/DijkstrasTest.php)\n  * Maths\n    * [Eratosthenessievetest](./tests/Maths/EratosthenesSieveTest.php)\n    * [Mathstest](./tests/Maths/MathsTest.php)\n    * [Projecteulertest](./tests/Maths/ProjectEulerTest.php)\n  * Neuralnetworks\n    * Perceptronclassifier\n      * [Neuralnetworkperceptronclassifiertest](./tests/NeuralNetworks/PerceptronClassifier/NeuralNetworkPerceptronClassifierTest.php)\n  * Searches\n    * [Searchestest](./tests/Searches/SearchesTest.php)\n  * Sorting\n    * [Arraykeyssorttest](./tests/Sorting/ArrayKeysSortTest.php)\n    * [Gnomesorttest](./tests/Sorting/GnomeSortTest.php)\n    * [Shellsorttest](./tests/Sorting/ShellSortTest.php)\n    * [Sortingtest](./tests/Sorting/SortingTest.php)\n  * Strings\n    * [Stringstest](./tests/Strings/StringsTest.php)\n\n## Utils\n  * [Arrayhelpers](./Utils/ArrayHelpers.php)\n  * [Executiontime](./Utils/ExecutionTime.php)\n"
        },
        {
          "name": "DataStructures",
          "type": "tree",
          "content": null
        },
        {
          "name": "Graphs",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2020 The Algorithms\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Maths",
          "type": "tree",
          "content": null
        },
        {
          "name": "NeuralNetworks",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.1923828125,
          "content": "# The Algorithms - PHP\n\n[![Gitpod ready-to-code](https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/TheAlgorithms/PHP)\n\nThe Algorithms - PHP, is a library or framework written in the PHP programming language that provides a set of algorithms and data structures for various computational tasks. It aims to simplify the implementation of common algorithms and data structures in PHP, making it easier for developers to leverage these powerful tools in their projects.\n\n### All algorithms implemented in PHP - for education\n\nThe Implementations in this repo are examples and may be less efficient than the implementations in the PHP standard Library.\n\n\n## Contribution Guidelines:\n\nTo Contribute to this repo please take your time to read our\n[Contribution Guidelines](CONTRIBUTING.md) before you contribute.\n\n## Community Channels\n\nWe're on [Discord](https://discord.gg/c7MnfGFGa6) and [Gitter](https://gitter.im/TheAlgorithms)! Community channels are great for you to ask questions and get help. Please join us!\n\n## List of Algorithms\n\nSee the [directory](DIRECTORY.md) for easier navigation and to view the current list of algorithms.\n\nThanks for contributing!!\n"
        },
        {
          "name": "Searches",
          "type": "tree",
          "content": null
        },
        {
          "name": "Sorting",
          "type": "tree",
          "content": null
        },
        {
          "name": "Strings",
          "type": "tree",
          "content": null
        },
        {
          "name": "Utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.3984375,
          "content": "{\n  \"name\": \"thealgorithms/php\",\n  \"description\": \"All Algorithms implemented in PHP\",\n  \"config\": {\n    \"platform\": {\n      \"php\": \"7.4.0\"\n    }\n  },\n  \"license\": \"MIT\",\n  \"require\": {\n    \"php\": \"7.4\",\n    \"phan/phan\": \"^2.7\",\n    \"ext-json\": \"*\"\n  },\n  \"require-dev\": {\n    \"phpunit/phpunit\": \"^9\",\n    \"squizlabs/php_codesniffer\": \"^3.7\"\n  },\n  \"scripts\": {\n    \"test\": \"vendor/bin/phpunit tests\"\n  }\n}\n\n"
        },
        {
          "name": "phpcs.xml.dist",
          "type": "blob",
          "size": 0.4287109375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ruleset xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"vendor/squizlabs/php_codesniffer/phpcs.xsd\">\n\n    <arg name=\"extensions\" value=\"php\"/>\n    <rule ref=\"PSR12\"/>\n\n    <file>.</file>\n\n    <exclude-pattern>vendor</exclude-pattern>\n\n    <rule ref=\"PSR1.Classes.ClassDeclaration.MissingNamespace\">\n        <severity>0</severity>\n    </rule>\n</ruleset>\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}