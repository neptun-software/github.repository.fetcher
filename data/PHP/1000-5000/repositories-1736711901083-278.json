{
  "metadata": {
    "timestamp": 1736711901083,
    "page": 278,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "klein/klein.php",
      "stars": 2669,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.140625,
          "content": "# Composer\ncomposer.lock\nvendor/\n\n# Auto-generated documentation directory (phpDocumentor)\ndocs/\n\n# Auto-generated code coverage report\nreport/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.3447265625,
          "content": "sudo: false\n\nlanguage: php\nphp:\n  - 5.3\n  - 5.4\n  - 5.5\n  - 5.6\n  - 7.0\n  - nightly\n  - hhvm\n\nmatrix:\n  allow_failures:\n    - php: nightly\n    - php: hhvm\n  fast_finish: true\n\nbefore_script:\n  - composer install --prefer-dist\n\nscript:\n  - composer validate\n  - ./vendor/bin/phpunit\n  - ./vendor/bin/phpcs --standard=PSR2 --encoding=utf-8 -p src/ tests/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.689453125,
          "content": "# CHANGELOG\n\n\n## 2.1.2\n\n### Features\n\n- PHP 7 `Throwable`s will now properly be caught and sent up the exception handling chain.\n- Expanded compatibility with other exception types in some method signatures\n\n### Bug fixes\n\n- Broad exception catch statements will now properly handle PHP 7 `Throwable` types\n\n\n## 2.1.1\n\n### Features\n\n- Header keys are now normalized, by default, to their canonical MIME format for consistency\n- Header key normalization is now customizable\n- Internal callback data-structures were moved from arrays to more appropriate SplQueue and SplStack instances, providing performance and memory footprint improvements\n- The PHPUnit version used for tests has been updated for HHVM compatibility\n- PHP 7.0 and HHVM compatibility!\n\n### Bug fixes\n\n- A few internal property/attribute names have been updated for consistency\n- An iteration bug effecting tests run under certain HHVM runtime versions has been fixed\n- The README document has been updated to fix a few errors\n- The `file()` method in the `Response` class has been updated to fix an issue found when run under PHP-FPM\n- The `file()` method in the `Response` class will no longer send the `Content-Length` header when the response has been chunked, to comply with the HTTP requirements defined in RFC 2616\n- References to the old https://github.com/chriso/klein.php repository URL have been updated to the new repository URL home of Klein: https://github.com/klein/klein.php\n- Tests were updated to pass under an expanded number of PHP runtime versions and configurations\n- A potential output buffer stack miss-handling in the dispatch process has been fixed\n\n\n## 2.1.0\n\n### Features\n\n- New exception and helper methods to help control the dispatch flow\n- New `abort()` method to allow stopping the routing process and returning a response code\n- Routes are now instances of a new `Route` class, instead of just being a set of meta properties and a callback\n- Routes are now stored in a `RouteCollection` class, which extends the `DataCollection` class\n- New `keys()` and `clear()` methods for the `DataCollection` class\n- Added the capability of reverse routing!\n- Now allowing for route callbacks to change the response object by returning a new ApiResponse instance\n- New \"slug\" type for route param matching\n- New `isEmpty()` and `cloneEmpty()` methods for the `DataCollection` class\n- The `$matched` route callback parameter is now an instance of a `RouteCollection`, instead of just an integer\n- Route callbacks are now passed the Klein instance for easier closure/class-scope use\n- Regular expression routing is now more accurate and will match more special characters in a similar way to Sinatra\n- Routes are now built with a dependency injected `AbstractRouteFactory` instance, allowing the building of routes to be customized more easily\n- New `options()` and `head()` alias methods for matching OPTIONS and HEAD requests respectively\n- The `Response` class has been abstracted into an `AbstractResponse` and a separate `Response` class for cleaner 3rd-party extension\n- New \"after dispatch\" callbacks can be registered for firing a series of callbacks after the dispatch loop has completed\n- New `patch()` alias method for matching PATCH requests\n- New HTTP error handling via exceptions and callback registration for a more direct (and less magical) API for controlling HTTP errors\n- The `escape()` method in the `ServiceProvider` class now allows for the passing of entity escaping flags\n- Route regular expressions are now validated and provide helpful errors upon a validation failure\n- Routes can now contain an empty string path\n- The composer autoloader is now compatible with the PSR-4 standard.\n- Regular expression compilation performance has been improved\n- 100% Code Coverage\n\n### Bug fixes\n\n- The README document has been updated to fix a few typos and inconsistencies\n- Route params are now properly URL decoded\n- 404/405 routes now properly set the appropriate status code automatically\n- Silencing the locked response exceptions as the behavior is designed to be transparent/automatic\n- Allow route callables to be an array suitable for `call_user_func()` callable behavior\n- More proper handling for 404's that also call the 404 error handlers\n- The `file()` and `json()` methods in the `Response` class no longer override system-configured time processing limits\n- Now checking if the output buffer is open before attempting to close it\n- The methods matched counter (`$methods_matched`) is now much more accurate, not counting methods that shouldn't have been considered matches\n- Various PHPdoc inaccuracies and inconsistencies have been fixed\n- Regular expressions are now quoted during compilation in a much safer manner\n- The PHPdoc tags have been updated to use the more modern syntax\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.5986328125,
          "content": "# Contributing\n\nContributing is absolutely encouraged, but a few things should be taken into account:\n\n- Always test any bug-fixes or changes with [unit testing][unit-testing]\n- When adding or changing a feature, make sure to write a **new** [unit test][unit-testing]\n- This project adheres to the [PSR-2][psr-2] standards. Please make sure your contributions [comply][code-sniffer].\n- Code and comment styles should be made as consistent as possible with the rest of the project\n- Make sure to document your code with the [PHPDoc syntax][php-doc]\n- Pull Requests and Issues should contain no more than **1** bug-fix, feature, or documentation change\n- Keep the number of lines changed in a pull request to a minimum necessary to complete the PR's subject\n- Pull requests shouldn't contain commits from other pull requests. They should be separate, independent branches\n- When creating pull requests\n   - make sure to create useful/verbose PR messages\n   - don't be afraid to squash your commits\n   - rebase onto the parent's upstream branch before pushing your remote\n\nKlein is an open library designed for a specific purpose. You may find that a certain requested feature or change may not be accepted. Please don't take those actions personally, as the controlling contributors are simply just trying to keep the project's purpose clear and designated.\n\n [unit-testing]: README.md#unit-testing\n [psr-2]: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md\n [code-sniffer]: https://github.com/squizlabs/PHP_CodeSniffer\n [php-doc]: http://www.phpdoc.org/docs/latest/for-users/phpdoc-reference.html\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0517578125,
          "content": "Copyright (c) 2010 Chris O'Hara <cohara87@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.4521484375,
          "content": "# Klein.php\n\n[![Build Status](https://travis-ci.org/klein/klein.php.png?branch=master)](https://travis-ci.org/klein/klein.php)\n\n**klein.php** is a fast & flexible router for PHP 5.3+\n\n* Flexible regular expression routing (inspired by [Sinatra](http://www.sinatrarb.com/))\n* A set of [boilerplate methods](#api) for rapidly building web apps\n* Almost no overhead => [2500+ requests/second](https://gist.github.com/878833)\n\n## Getting started\n\n1. PHP 5.3.x is required\n2. Install Klein using [Composer](#composer-installation) (recommended) or manually\n3. Setup [URL rewriting](https://gist.github.com/874000) so that all requests are handled by **index.php**\n4. (Optional) Throw in some [APC](http://pecl.php.net/package/APC) for good measure\n\n## Composer Installation\n\n1. Get [Composer](http://getcomposer.org/)\n2. Require Klein with `php composer.phar require klein/klein`\n3. Add the following to your application's main PHP file: `require 'vendor/autoload.php';`\n\n## Example\n\n*Hello World* - Obligatory hello world example\n\n```php\n<?php\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$klein = new \\Klein\\Klein();\n\n$klein->respond('GET', '/hello-world', function () {\n    return 'Hello World!';\n});\n\n$klein->dispatch();\n```\n\n*Example 1* - Respond to all requests\n\n```php\n$klein->respond(function () {\n    return 'All the things';\n});\n```\n\n*Example 2* - Named parameters\n\n```php\n$klein->respond('/[:name]', function ($request) {\n    return 'Hello ' . $request->name;\n});\n```\n\n*Example 3* - [So RESTful](http://bit.ly/g93B1s)\n\n```php\n$klein->respond('GET', '/posts', $callback);\n$klein->respond('POST', '/posts', $callback);\n$klein->respond('PUT', '/posts/[i:id]', $callback);\n$klein->respond('DELETE', '/posts/[i:id]', $callback);\n$klein->respond('OPTIONS', null, $callback);\n\n// To match multiple request methods:\n$klein->respond(array('POST','GET'), $route, $callback);\n\n// Or you might want to handle the requests in the same place\n$klein->respond('/posts/[create|edit:action]?/[i:id]?', function ($request, $response) {\n    switch ($request->action) {\n        //\n    }\n});\n```\n\n*Example 4* - Sending objects / files\n\n```php\n$klein->respond(function ($request, $response, $service) {\n    $service->xml = function ($object) {\n        // Custom xml output function\n    }\n    $service->csv = function ($object) {\n        // Custom csv output function\n    }\n});\n\n$klein->respond('/report.[xml|csv|json:format]?', function ($request, $response, $service) {\n    // Get the format or fallback to JSON as the default\n    $send = $request->param('format', 'json');\n    $response->$send($report);\n});\n\n$klein->respond('/report/latest', function ($request, $response, $service) {\n    $response->file('/tmp/cached_report.zip');\n});\n```\n\n*Example 5* - All together\n\n```php\n$klein->respond(function ($request, $response, $service, $app) use ($klein) {\n    // Handle exceptions => flash the message and redirect to the referrer\n    $klein->onError(function ($klein, $err_msg) {\n        $klein->service()->flash($err_msg);\n        $klein->service()->back();\n    });\n\n    // The fourth parameter can be used to share scope and global objects\n    $app->db = new PDO(...);\n\n    // $app also can store lazy services, e.g. if you don't want to\n    // instantiate a database connection on every response\n    $app->register('db', function() {\n        return new PDO(...);\n    });\n});\n\n$klein->respond('POST', '/users/[i:id]/edit', function ($request, $response, $service, $app) {\n    // Quickly validate input parameters\n    $service->validateParam('username', 'Please enter a valid username')->isLen(5, 64)->isChars('a-zA-Z0-9-');\n    $service->validateParam('password')->notNull();\n\n    $app->db->query(...); // etc.\n\n    // Add view properties and helper methods\n    $service->title = 'foo';\n    $service->escape = function ($str) {\n        return htmlentities($str); // Assign view helpers\n    };\n\n    $service->render('myview.phtml');\n});\n\n// myview.phtml:\n<title><?php echo $this->escape($this->title) ?></title>\n```\n\n## Route namespaces\n\n```php\n$klein->with('/users', function () use ($klein) {\n\n    $klein->respond('GET', '/?', function ($request, $response) {\n        // Show all users\n    });\n\n    $klein->respond('GET', '/[:id]', function ($request, $response) {\n        // Show a single user\n    });\n\n});\n\nforeach(array('projects', 'posts') as $controller) {\n    // Include all routes defined in a file under a given namespace\n    $klein->with(\"/$controller\", \"controllers/$controller.php\");\n}\n```\n\nIncluded files are run in the scope of Klein (`$klein`) so all Klein\nmethods/properties can be accessed with `$this`\n\n_Example file for: \"controllers/projects.php\"_\n```php\n// Routes to \"/projects/?\"\n$this->respond('GET', '/?', function ($request, $response) {\n    // Show all projects\n});\n```\n\n## Lazy services\n\nServices can be stored **lazily**, meaning that they are only instantiated on\nfirst use.\n\n``` php\n<?php\n$klein->respond(function ($request, $response, $service, $app) {\n    $app->register('lazyDb', function() {\n        $db = new stdClass();\n        $db->name = 'foo';\n        return $db;\n    });\n});\n\n//Later\n\n$klein->respond('GET', '/posts', function ($request, $response, $service, $app) {\n    // $db is initialised on first request\n    // all subsequent calls will use the same instance\n    return $app->lazyDb->name;\n});\n```\n\n## Validators\n\nTo add a custom validator use `addValidator($method, $callback)`\n\n```php\n$service->addValidator('hex', function ($str) {\n    return preg_match('/^[0-9a-f]++$/i', $str);\n});\n```\n\nYou can validate parameters using `is<$method>()` or `not<$method>()`, e.g.\n\n```php\n$service->validateParam('key')->isHex();\n```\n\nOr you can validate any string using the same flow..\n\n```php\n$service->validate($username)->isLen(4,16);\n```\n\nValidation methods are chainable, and a custom exception message can be specified for if/when validation fails\n\n```php\n$service->validateParam('key', 'The key was invalid')->isHex()->isLen(32);\n```\n\n## Routing\n\n**[** *match_type* **:** *param_name* **]**\n\nSome examples\n\n    *                    // Match all request URIs\n    [i]                  // Match an integer\n    [i:id]               // Match an integer as 'id'\n    [a:action]           // Match alphanumeric characters as 'action'\n    [h:key]              // Match hexadecimal characters as 'key'\n    [:action]            // Match anything up to the next / or end of the URI as 'action'\n    [create|edit:action] // Match either 'create' or 'edit' as 'action'\n    [*]                  // Catch all (lazy)\n    [*:trailing]         // Catch all as 'trailing' (lazy)\n    [**:trailing]        // Catch all (possessive - will match the rest of the URI)\n    .[:format]?          // Match an optional parameter 'format' - a / or . before the block is also optional\n\nSome more complicated examples\n\n    /posts/[*:title][i:id]     // Matches \"/posts/this-is-a-title-123\"\n    /output.[xml|json:format]? // Matches \"/output\", \"output.xml\", \"output.json\"\n    /[:controller]?/[:action]? // Matches the typical /controller/action format\n\n**Note** - *all* routes that match the request URI are called - this\nallows you to incorporate complex conditional logic such as user\nauthentication or view layouts. e.g. as a basic example, the following\ncode will wrap other routes with a header and footer\n\n```php\n$klein->respond('*', function ($request, $response, $service) { $service->render('header.phtml'); });\n//other routes\n$klein->respond('*', function ($request, $response, $service) { $service->render('footer.phtml'); });\n```\n\nRoutes automatically match the entire request URI. If you need to match\nonly a part of the request URI or use a custom regular expression, use the `@` operator. If you need to\nnegate a route, use the `!` operator\n\n```php\n// Match all requests that end with '.json' or '.csv'\n$klein->respond('@\\.(json|csv)$', ...\n\n// Match all requests that _don't_ start with /admin\n$klein->respond('!@^/admin/', ...\n```\n\n## Views\n\nYou can send properties or helpers to the view by assigning them\nto the `$service` object, or by using the second arg of `$service->render()`\n\n```php\n$service->escape = function ($str) {\n    return htmlentities($str);\n};\n\n$service->render('myview.phtml', array('title' => 'My View'));\n\n// Or just: $service->title = 'My View';\n```\n\n*myview.phtml*\n\n```html\n<title><?php echo $this->escape($this->title) ?></title>\n```\n\nViews are compiled and run in the scope of `$service` so all service methods can be accessed with `$this`\n\n```php\n$this->render('partial.html')           // Render partials\n$this->sharedData()->get('myvar')       // Access stored service variables\necho $this->query(array('page' => 2))   // Modify the current query string\n```\n\n## API\n\nBelow is a list of the public methods in the common classes you will most likely use. For a more formal source\nof class/method documentation, please see the [PHPdoc generated documentation](http://klein.github.io/klein.php/docs/).\n\n```php\n$request->\n    id($hash = true)                    // Get a unique ID for the request\n    paramsGet()                         // Return the GET parameter collection\n    paramsPost()                        // Return the POST parameter collection\n    paramsNamed()                       // Return the named parameter collection\n    cookies()                           // Return the cookies collection\n    server()                            // Return the server collection\n    headers()                           // Return the headers collection\n    files()                             // Return the files collection\n    body()                              // Get the request body\n    params()                            // Return all parameters\n    params($mask = null)                // Return all parameters that match the mask array - extract() friendly\n    param($key, $default = null)        // Get a request parameter (get, post, named)\n    isSecure()                          // Was the request sent via HTTPS?\n    ip()                                // Get the request IP\n    userAgent()                         // Get the request user agent\n    uri()                               // Get the request URI\n    pathname()                          // Get the request pathname\n    method()                            // Get the request method\n    method($method)                     // Check if the request method is $method, i.e. method('post') => true\n    query($key, $value = null)          // Get, add to, or modify the current query string\n    <param>                             // Get / Set (if assigned a value) a request parameter\n\n$response->\n    protocolVersion($protocol_version = null)       // Get the protocol version, or set it to the passed value\n    body($body = null)                              // Get the response body's content, or set it to the passed value\n    status()                                        // Get the response's status object\n    headers()                                       // Return the headers collection\n    cookies()                                       // Return the cookies collection\n    code($code = null)                              // Return the HTTP response code, or set it to the passed value\n    prepend($content)                               // Prepend a string to the response body\n    append($content)                                // Append a string to the response body\n    isLocked()                                      // Check if the response is locked\n    requireUnlocked()                               // Require that a response is unlocked\n    lock()                                          // Lock the response from further modification\n    unlock()                                        // Unlock the response\n    sendHeaders($override = false)                  // Send the HTTP response headers\n    sendCookies($override = false)                  // Send the HTTP response cookies\n    sendBody()                                      // Send the response body's content\n    send()                                          // Send the response and lock it\n    isSent()                                        // Check if the response has been sent\n    chunk($str = null)                              // Enable response chunking (see the wiki)\n    header($key, $value = null)                     // Set a response header\n    cookie($key, $value = null, $expiry = null)     // Set a cookie\n    cookie($key, null)                              // Remove a cookie\n    noCache()                                       // Tell the browser not to cache the response\n    redirect($url, $code = 302)                     // Redirect to the specified URL\n    dump($obj)                                      // Dump an object\n    file($path, $filename = null)                   // Send a file\n    json($object, $jsonp_prefix = null)             // Send an object as JSON or JSONP by providing padding prefix\n\n$service->\n    sharedData()                                    // Return the shared data collection\n    startSession()                                  // Start a session and return its ID\n    flash($msg, $type = 'info', $params = array()   // Set a flash message\n    flashes($type = null)                           // Retrieve and clears all flashes of $type\n    markdown($str, $args, ...)                      // Return a string formatted with markdown\n    escape($str)                                    // Escape a string\n    refresh()                                       // Redirect to the current URL\n    back()                                          // Redirect to the referer\n    query($key, $value = null)                      // Modify the current query string\n    query($arr)\n    layout($layout)                                 // Set the view layout\n    yieldView()                                     // Call inside the layout to render the view content\n    render($view, $data = array())                  // Render a view or partial (in the scope of $response)\n    partial($view, $data = array())                 // Render a partial without a layout (in the scope of $response)\n    addValidator($method, $callback)                // Add a custom validator method\n    validate($string, $err = null)                  // Validate a string (with a custom error message)\n    validateParam($param, $err = null)                  // Validate a param\n    <callback>($arg1, ...)                          // Call a user-defined helper\n    <property>                                      // Get a user-defined property\n\n$app->\n    <callback>($arg1, ...)                          //Call a user-defined helper\n\n$validator->\n    notNull()                           // The string must not be null\n    isLen($length)                      // The string must be the exact length\n    isLen($min, $max)                   // The string must be between $min and $max length (inclusive)\n    isInt()                             // Check for a valid integer\n    isFloat()                           // Check for a valid float/decimal\n    isEmail()                           // Check for a valid email\n    isUrl()                             // Check for a valid URL\n    isIp()                              // Check for a valid IP\n    isAlpha()                           // Check for a-z (case insensitive)\n    isAlnum()                           // Check for alphanumeric characters\n    contains($needle)                   // Check if the string contains $needle\n    isChars($chars)                     // Validate against a character list\n    isRegex($pattern, $modifiers = '')  // Validate against a regular expression\n    notRegex($pattern, $modifiers ='')\n    is<Validator>()                     // Validate against a custom validator\n    not<Validator>()                    // The validator can't match\n    <Validator>()                       // Alias for is<Validator>()\n```\n\n## Unit Testing\n\nUnit tests are a crucial part of developing a routing engine such as Klein.\nAdded features or bug-fixes can have adverse effects that are hard to find\nwithout a lot of testing, hence the importance of unit testing.\n\nThis project uses [PHPUnit](https://github.com/sebastianbergmann/phpunit/) as\nits unit testing framework.\n\nThe tests all live in `/tests` and each test extends an abstract class\n`AbstractKleinTest`\n\nTo test the project, simply run `php composer.phar install --dev` to download\na common version of PHPUnit with composer and run the tests from the main\ndirectory with `./vendor/bin/phpunit`\n\n## Contributing\n\nSee the [contributing guide](CONTRIBUTING.md) for more info\n\n## More information\n\nSee the [wiki](https://github.com/klein/klein.php/wiki) for more information\n\n## Contributors\n\n- [Trevor N. Suarez](https://github.com/Rican7)\n\n## License\n\n(MIT License)\n\nCopyright (c) 2010 Chris O'Hara <cohara87@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "UPGRADING.md",
          "type": "blob",
          "size": 2.7587890625,
          "content": "# Klein Upgrade Guide\n\n\n## 2.1.1 to 2.1.2\n\n### Interface Changes\n\n- The `RoutePathCompilationException::createFromRoute()` method signature has changed to allow both `Exception` and `Throwable` types with dual support for PHP 5 and PHP 7\n- The 4th parameter to the callbacks supported by `Klein#onError` will now be able to receive `Throwable` types under PHP 7\n\n\n## 2.1.0 to 2.1.1\n\n### Deprecations\n\n- The `HeaderDataCollection::normalizeName()` method has been deprecated in favor of using new normalization options (via constant switches) and other more specific methods on the same class\n\n### Interface Changes\n\n- Three of the Klein internal callback attributes have changed both name and data structure. These attributes are protected, so the effect will only be felt by users that have extended and/or overwritten Klein's internal behaviors. The following changes were made:\n    - `Klein#errorCallbacks` was renamed to `Klein#error_callbacks` and it's array data-structure was changed to use an `SplStack`\n    - `Klein#httpErrorCallbacks` was renamed to `Klein#http_error_callbacks` and it's array data-structure was changed to use an `SplStack`\n    - `Klein#afterFilterCallbacks` was renamed to `Klein#after_filter_callbacks` and it's array data-structure was changed to use an `SplQueue`\n- `Validator#defaultAdded` was renamed to `Validator#default_added`\n\n\n## 2.0.x to 2.1.0\n\n### Deprecations\n\n- Handling 404 and 405 errors with a specially registered route callback is now deprecated. It's now suggested to use Klein's new `onHttpError()` method instead.\n- Autoloading the library with Composer no longer utilizes the PSR-0 spec. The composer autoloader now uses PSR-4.\n\n### Interface Changes\n\n- Some of the route callback params have changed. This will effect any route definitions with callbacks using the more advanced parameters.\n    - The old params were (in order):\n        - `Request $request`\n        - `Response $response`\n        - `Service $service`\n        - `App $app`\n        - `int $matched`\n        - `array $methods_matched`\n    - The new params are (in order):\n        - `Request $request`\n        - `Response $response`\n        - `Service $service`\n        - `App $app`\n        - `Klein $klein`\n        - `RouteCollection $matched`\n        - `array $methods_matched`\n- Non-match routes (routes that are wildcard and shouldn't consider as \"matches\") will no longer be considered as part of the \"methods matched\" array, since they aren't supposed to be matches in the first place\n    - This may have implications for users that have created \"match-all\" OPTIONS method routes, as the OPTIONS method will no longer be considered a match.\n    - If you'd like to conserve the old match behavior, you can simply mark the route as one that should be counted as a match with `$route->setCountMatch(true)`\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.939453125,
          "content": "{\n   \"name\": \"klein/klein\",\n   \"description\": \"A lightning fast router for PHP\",\n   \"keywords\": [\"router\", \"routing\", \"sinatra\", \"boilerplate\"],\n   \"homepage\": \"https://github.com/klein/klein.php\",\n   \"license\": \"MIT\",\n   \"authors\": [\n      {\n         \"name\": \"Chris O'Hara\",\n         \"email\": \"cohara87@gmail.com\",\n         \"homepage\": \"http://chris6f.com/\",\n         \"role\": \"Creator/Developer\"\n      },\n      {\n         \"name\": \"Trevor Suarez\",\n         \"email\": \"rican7@gmail.com\",\n         \"homepage\": \"https://trevorsuarez.com/\",\n         \"role\": \"Contributor/Developer\"\n      }\n   ],\n   \"require\": {\n      \"php\": \">=5.3.0\"\n   },\n   \"require-dev\": {\n      \"phpunit/phpunit\": \"^4.8\",\n      \"phpunit/php-code-coverage\": \"^2.2\",\n      \"squizlabs/php_codesniffer\": \"1.4.8\"\n   },\n   \"autoload\": {\n      \"psr-4\": {\n         \"Klein\\\\\": \"src/Klein/\"\n      }\n   },\n   \"autoload-dev\": {\n      \"psr-4\": {\n         \"Klein\\\\Tests\\\\\": \"tests/Klein/Tests\"\n      }\n   }\n}\n"
        },
        {
          "name": "phpdoc.dist.xml",
          "type": "blob",
          "size": 0.34375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpdoc>\n    <title>Klein</title>\n    <files>\n        <directory>src</directory>\n    </files>\n    <parser>\n        <target>docs</target>\n    </parser>\n    <transformer>\n        <target>docs</target>\n    </transformer>\n    <transformations>\n        <template name=\"responsive\" />\n    </transformations>\n</phpdoc>\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.6494140625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         syntaxCheck=\"false\"\n         bootstrap=\"tests/bootstrap.php\"\n>\n    <testsuites>\n        <testsuite name=\"Klein Test Suite\">\n            <directory>./tests/</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist>\n            <directory>./src/</directory>\n        </whitelist>\n    </filter>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}