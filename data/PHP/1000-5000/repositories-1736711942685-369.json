{
  "metadata": {
    "timestamp": 1736711942685,
    "page": 369,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "benedmunds/CodeIgniter-Ion-Auth",
      "stars": 2343,
      "defaultBranch": "4",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1103515625,
          "content": "\nroot = true\n\n[*]\ncharset = utf-8\nindent_style = tab\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.3388671875,
          "content": "#-------------------------\n# Operating Specific Junk Files\n#-------------------------\n\n# OS X\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# OS X Thumbnails\n._*\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n\n# Linux\n*~\n\n# KDE directory preferences\n.directory\n\n# Linux trash folder which might appear on any partition or disk\n.Trash-*\n\n#-------------------------\n# Environment Files\n#-------------------------\n# These should never be under version control,\n# as it poses a security risk.\n.env\n.vagrant\napplication/.env\nVagrantfile\n\n#-------------------------\n# Test Files\n#-------------------------\ntests/coverage*\n\n# Don't save phpunit under version control.\nphpunit\n\n#-------------------------\n# Composer\n#-------------------------\nvendor/\ncomposer.lock\n\n#-------------------------\n# IDE / Development Files\n#-------------------------\n\n# Modules Testing\n_modules/*\n\n# phpenv local config\n.php-version\n\n# Jetbrains editors (PHPStorm, etc)\n.idea/\n*.iml\n\n# Netbeans\nnbproject/\nbuild/\nnbbuild/\ndist/\nnbdist/\nnbactions.xml\nnb-configuration.xml\n.nb-gradle/\n\n# Sublime Text\n*.tmlanguage.cache\n*.tmPreferences.cache\n*.stTheme.cache\n*.sublime-workspace\n*.sublime-project\n.phpintel\n/api/\n\n# Visual Studio Code\n.vscode/\n\n/results/\n/phpunit*.xml\n\n"
        },
        {
          "name": ".prettyci.composer.json",
          "type": "blob",
          "size": 0.08203125,
          "content": "{\n    \"require-dev\": {\n        \"codeigniter4/codeigniter4-standard\": \"^1.0\"\n    }\n}\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.3056640625,
          "content": "Ion Auth Changelog\n===================================\n\n## xx Octobre 2018 - Ion Auth 4\n\n- **General:**\n\t- Migration from CodeIgniter 3 to CodeIgniter 4\n - **New server requirements:**\n    - Drop CodeIgniter 3 support\n    - Drop PHP < 7.1 support\n\n## xx March 2018 - Ion Auth 3\n\n - **General:**\n    - No longer work for empty password or password above 4096 bytes (DOS protection)\n - **New server requirements:**\n    - Drop CodeIgniter 2 support\n    - Drop PHP < 5.6 support\n - **Updated password hashing methods:**\n    - Drop SHA1 support (but support seamless migration from SHA1-based installation)\n    - Drop internal Bcrypt library (now uses built-in PHP functions)\n    - Add argon2 support (PHP > 7.2)\n    - Implements password automatic rehashing on login if needed (e.g. when hashing parameters changed)\n - **Updated config values:**\n    - Higher default hashing parameters (e.g. higher cost for bcrypt)\n    - Allows different hashing parameters for admins\n    - Remove `random_rounds` bcrypt feature\n    - Better default value for `forgotPasswordExpiration`\n - **Updated features:**\n     - Update _Remember me_ feature for more security\n     - Update _Password Reset_ feature for more security\n     - Update _User activation_ feature for more security\n - **Removed features:**\n    - Remove `forgotten_password_complete` feature\n"
        },
        {
          "name": "Config",
          "type": "tree",
          "content": null
        },
        {
          "name": "Controllers",
          "type": "tree",
          "content": null
        },
        {
          "name": "Database",
          "type": "tree",
          "content": null
        },
        {
          "name": "INSTALLING.md",
          "type": "blob",
          "size": 3.1982421875,
          "content": "Installing Ion Auth 4.x\n===================================\n\nBefore installing, please check that you are meeting the minimum server requirements.\nIon Auth 4 needs CodeIgniter 4.x, PHP 7.1 and Composer.\n\n> For using the library, you should install with Composer\n\nFor an existing composer project:\n```shell\n$ composer config minimum-stability dev\n$ composer config repositories.ionAuth vcs git@github.com:benedmunds/CodeIgniter-Ion-Auth.git\n$ composer require benedmunds/codeigniter-ion-auth:4.x-dev\n```\n\nFor a new project:\n```shell\n$ composer init\n$ composer config minimum-stability dev\n$ composer config repositories.ionAuth vcs git@github.com:benedmunds/CodeIgniter-Ion-Auth.git\n$ composer require benedmunds/codeigniter-ion-auth:4.x-dev\n```\n---\n\n> For developing against the library, you can use git directly\n```shell\nmy-project$ git clone https://github.com/benedmunds/CodeIgniter-Ion-Auth.git\nmy-project$ cd CodeIgniter-Ion-Auth\nCodeIgniter-Ion-Auth$ git checkout 4\n```\nThen in your Config/Autoload.php, add this :\n```php\npublic $psr4 = [\n\t...\n\t'IonAuth' => ROOTPATH . 'CodeIgniter-Ion-Auth',\n\t...\n];\n```\n\n---\n\n### Configuration\nOnce installed, maybe, you need to configure IonAuth library.\nIn your application, perform the following setup:\nCreate IonAuth.php in your Config directory :\n```php\n<?php namespace Config;\n\nclass IonAuth extends \\IonAuth\\Config\\IonAuth\n{\n    // set your specific config\n    // public $siteTitle                = 'Example.com';       // Site Title, example.com\n    // public $adminEmail               = 'admin@example.com'; // Admin Email, admin@example.com\n    // public $emailTemplates           = 'App\\\\Views\\\\auth\\\\email\\\\';\n    // ...\n}\n\n```\n\n### Relational DB Setup\nThen use the migration file (in Database/Migrations/).\n```\n$ php spark migrate -n IonAuth\n```\nDon't forget to set Config\\Migrations:enabled to true.\n\nYou can also use the seeds file to insert default datas:\nWindows :\n```\n$ php spark db:seed IonAuth\\Database\\Seeds\\IonAuthSeeder\n```\nLinux :\n```\n$ php spark db:seed IonAuth\\\\Database\\\\Seeds\\\\IonAuthSeeder\n```\n\n---\n\n### Use it\nThe most convenient way is to create a new controller like this :\n```php\n<?php namespace App\\Controllers;\n\nclass Auth extends \\IonAuth\\Controllers\\Auth\n{\n    /**\n     * If you want to customize the views,\n     *  - copy the ion-auth/Views/auth folder to your Views folder,\n     *  - remove comment\n     */\n    // protected $viewsFolder = 'auth';\n}\n```\nYou can also add routes configs in 'Config\\Routes.php':\n```php\n$routes->group('auth', ['namespace' => 'IonAuth\\Controllers'], function ($routes) {\n\t$routes->add('login', 'Auth::login');\n\t$routes->get('logout', 'Auth::logout');\n\t$routes->add('forgot_password', 'Auth::forgot_password');\n\t// $routes->get('/', 'Auth::index');\n\t// $routes->add('create_user', 'Auth::create_user');\n\t// $routes->add('edit_user/(:num)', 'Auth::edit_user/$1');\n\t// $routes->add('create_group', 'Auth::create_group');\n\t// $routes->get('activate/(:num)', 'Auth::activate/$1');\n\t// $routes->get('activate/(:num)/(:hash)', 'Auth::activate/$1/$2');\n\t// $routes->add('deactivate/(:num)', 'Auth::deactivate/$1');\n\t// $routes->get('reset_password/(:hash)', 'Auth::reset_password/$1');\n\t// $routes->post('reset_password/(:hash)', 'Auth::reset_password/$1');\n\t// ...\n});\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015, Ben Edmunds\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Language",
          "type": "tree",
          "content": null
        },
        {
          "name": "Libraries",
          "type": "tree",
          "content": null
        },
        {
          "name": "Models",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.86328125,
          "content": "# Ion Auth 4\n### The future of authentication\nby [Ben Edmunds](http://benedmunds.com)\n\nSimple and lightweight authentication for your CodeIgniter apps.\n\nNote, this version is meant to be used with CodeIgniter 4 and is not backwards compatible with previous versions.  The database is backwards compatible though for those migrating from previous versions.\n\n## Server requirements\nIon Auth 4 needs **CodeIgniter 4**.\n\n## Documentation\nSee [USERGUIDE.md](USERGUIDE.md) file.\n\n## Upgrading\nSee [UPGRADING.md](UPGRADING.md) file.\n\n## Installation\nSee [INSTALLING.md](INSTALLING.md) file.\n\n## Usage\nIn the package you will find example usage code in the controllers and views\nfolders.  The example code isn't the most beautiful code you'll ever see but\nit'll show you how to use the library and it's nice and generic so it doesn't\nrequire a MY_controller or anything else.\n\n### Default Login\nUsername: admin@admin.com\nPassword: password\n\n\n### Important\nIt is highly recommended that you use encrypted database sessions for security!\n\n\n\n## Support\nIf you think you've found a bug please [Create an Issue](https://github.com/benedmunds/CodeIgniter-Ion-Auth/issues).\n\nIf you need a customization or help implementing Ion Auth into your project please [Email Me for Consulting Information](mailto:ionauth_consulting@benedmunds.com).\n\nIf your company would like a support contract or service agreement please [Reach Out](mailto:ionauth_support_contract@benedmunds.com) to discuss available options.\n\n\n## For Help\nIf you're having an issue with CodeIgniter or for general help with development I recommend checking out the [CodeIgniter Forums](http://forum.codeigniter.com).\n\nIf you think you've found a bug please [Create an Issue](https://github.com/benedmunds/CodeIgniter-Ion-Auth/issues).\n\n\nThanks,    \n-Ben Edmunds       \n [benedmunds.com](http://benedmunds.com)  \n [@benedmunds](http://twitter.com/benedmunds)   \n"
        },
        {
          "name": "UPGRADING.md",
          "type": "blob",
          "size": 4.57421875,
          "content": "Upgrading Ion Auth.\n===================================\n\n# Upgrading from a former revision of Ion Auth 3\n\n 1. Download the [latest Ion Auth 3 revision](http://github.com/benedmunds/CodeIgniter-Ion-Auth/zipball/3)\n 2. Overwrite \"libraries/ion_auth.php\" and \"models/ion_auth_model.php\" with the new versions.\n 3. Overwrite \"language/*\" with the news versions.\n 4. Check \"config/ion_auth.php\" for evolution.\n\n# Upgrading from Ion Auth 2\n\nThis is a bit more complex, depending on your configuration.\n\n 1. Perform an upgrade as described above\n 2. Check `config/ion_auth.php`, some options were modified\n    (see list in relevant chapter below)\n 3. Run the SQL migration file according to your environment:\n    - MySQL: [sql/migrating_from_ionauth2/migrate.sql](sql/migrating_from_ionauth2/migrate.sql)\n    - postgreSQL: [sql/migrating_from_ionauth2/migrate.postgre.sql](sql/migrating_from_ionauth2/migrate.postgre.sql)\n    - SQL Server: [sql/migrating_from_ionauth2/migrate.mssql.sql](sql/migrating_from_ionauth2/migrate.mssql.sql)\n 4. If you were **not** using the SHA1 hash method, you may also drop the `salt` column\n    from the `users` table in your database\n 5. If you were **using** the SHA1 hash method, please check the relevant chapter below\n 6. Check your code for functions modification/removal\n    (see list in relevant chapter below)\n\n### Options evolution from Ion Auth 2\n\nThe config file has changed:\n\n- For the **Hash Method** part:\n    - `hashMethod` now only accepts `bcrypt` or the newer `argon2` (PHP 7.2)\n    (`sha1` is no longer supported for security considerations, see note below)\n    - `default_rounds` is modified to `bcryptDefaultCost`\n    - `random_rounds`, `min_rounds`, `max_rounds` and `salt_prefix` are removed\n    as they don't serve any purpose anymore\n    - `argon2DefaultParams` is added for the Argon2 hash method\n    - `bcryptAdminCost` and `argon2AdminParams` are added to tweak the hash\n    parameters for users in the admin group\n- For the **Authentication options** part:\n    - `max_password_length` is removed as it is not good practice to limit password's length\n- For the **Cookie options** part:\n    - `random_identity_cookie_name` is removed as it doesn't serve any purpose anymore\n- The **Forgot Password Complete Email Template** part is completely removed because\n  the feature doesn't exists anymore due to security issue.\n    - `emailForgotPassword_complete` is removed\n- The **Salt options** part is completely removed due to the removing of the\n  SHA1 hash method\n    - `salt_length` and `store_salt` are removed\n\n### Functions evolution from Ion Auth 2\n\nOnly public functions are listed.\n\n#### Functions modified\n\n```php\nIon_auth_model::hash_password_db($id, $password, $use_sha1_override = FALSE)\n/* ... is updated to... */\nIon_auth_model::verify_password($password, $hash_password_db, $identity = NULL)\n```\n\n```php\nIon_auth_model::clear_forgotten_password_code($code)\n/* ... is updated to... */\nIon_auth_model::clear_forgotten_password_code($identity)\n```\n\n```php\nIon_auth_model::hash_password($password, $salt = FALSE, $use_sha1_override = FALSE)\n/* ... is updated to... */\nIon_auth_model::hash_password($password, $identity = NULL)\n```\n\n```php\nIon_auth_model::remember_user($id)\n/* ... is updated to... */\nIon_auth_model::remember_user($identity)\n```\n\n\n#### Public functions removed\n\n```php\nIon_auth_model::forgotten_password_complete($code, $salt = FALSE) // old feature no longer available due to security issue\nIon_auth_model::hash_code($password) // No longer needed\nIon_auth_model::is_time_locked_out($identity, $ip_address = NULL) // Was deprecated, use is_max_login_attempts_exceeded()\nIon_auth_model::salt() // No longer needed\n```\n\n\n#### Public functions added\n\n```php\nIon_auth_model::db()\nIon_auth_model::clear_remember_code($identity)\nIon_auth_model::get_user_by_forgotten_password_code($user_code)\nIon_auth_model::get_user_id_from_identity($identity = '')\nIon_auth_model::rehash_password_if_needed($hash, $identity, $password)\n```\n\n\n### Migrating from SHA1\n\nIf you were using the `sha1` hash method in Ion Auth 2, this method is no longer supported.\nThe SHA1 is known to be insecure for password hashing, and should not be used.\n\nHowever, fear not! The transition should actually be pretty smooth for you and your users.\nAfter upgrading to Ion Auth 3, any user logging in your application will be migrated to the\nnew hashing method. This is completely transparent.\n\nYou can monitor it by looking in your database at the password field. Any field not starting\nwith the dollar '$' sign is an old SHA1-based password.\n\nAfter a while, you may want to invalidate any old user still having a SHA1-based hashed password.\n"
        },
        {
          "name": "USERGUIDE.md",
          "type": "blob",
          "size": 36.314453125,
          "content": "<details>\n\n| **Author Info** | **Class Functions** |\n|-----------------|-----------------|\n| -   [Ben Edmunds](http://benedmunds.com) | -   [login()](#login)\n| -   [GitHub](https://github.com/benedmunds) | -   [logout()](#logout)\n| **Basic Info** | -   [register()](#register)\n| -   [License](#license) | -   [createUser()](#createUser)\n| -   [GitHub Repo](https://github.com/benedmunds/CodeIgniter-Ion-Auth) | -   [update()](#update)\n| **Introduction** | -   [updateUser()](#updateUser)\n| -   [Server requirements](#requirements) | -   [deleteUser()](#deleteUser)\n| -   [Installation](#install) | -   [forgottenPassword()](#forgottenPassword)\n| -   [Upgrading](#upgrade) | -   [forgottenPasswordCheck()](#forgottenPasswordCheck)\n| -   [Loading the Library](#loading) | -   [loggedIn()](#loggedIn)\n| **Configuration** | -   [isAdmin()](#isAdmin)\n| -   [Config Options](#use_config) | -   [inGroup()](#inGroup)\n| **Miscellaneous** | -   [usernameCheck()](#usernameCheck)\n| -   [Cheatsheet](#cheatsheet) | -   [emailCheck()](#emailCheck)\n| | -   [identityCheck()](#identityCheck)\n| | -   [isMaxLoginAttemptsExceeded()](#isMaxLoginAttemptsExceeded)\n| | -   [getAttemptsNum()](#getAttemptsNum)\n| | -   [increaseLoginAttempts()](#increaseLoginAttempts)\n| | -   [clearLoginAttempts()](#clearLoginAttempts)\n| | -   [user()](#user)\n| | -   [users()](#users)\n| | -   [group()](#group)\n| | -   [groups()](#groups)\n| | -   [getUsersGroups()](#getUsersGroups)\n| | -   [addToGroup()](#addToGroup)\n| | -   [removeFromGroup()](#removeFromGroup)\n| | -   [createGroup()](#createGroup)\n| | -   [updateGroup()](#updateGroup)\n| | -   [deleteGroup()](#deleteGroup)\n| | -   [messages()](#messages)\n| | -   [messagesArray()](#messagesArray)\n| | -   [setMessageTemplate()](#setMessageTemplate)\n| | -   [errors()](#errors)\n| | -   [errorsArray()](#errorsArray)\n| | -   [triggerEvents()](#triggerEvents)\n| | -   [setHook()](#setHook)\n<summary>\nToggle Table of Contents\n</summary>\n</details>\n\nDocumentation > Author: [Ben Edmunds](http://benedmunds.com)\n\n------------------------------------------------------------\n[Ion Auth 4](http://benedmunds.com/ion_auth)  ›  Documentation\n------------------------------------------------------------\n\nIon Auth\n========\n\nIon Auth is a simple and lightweight authentication library for the CodeIgniter framework\n\nLicense\n-------\n\nIon Auth is released under the Apache License v2.0. You can read the license here: [http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\nServer requirements\n-------------------\n\nIon Auth 4 needs **CodeIgniter 4** and **PHP**≥**7.2**.\n\nInstallation\n------------\n\n1.  Download the latest version: [https://github.com/benedmunds/CodeIgniter-Ion-Auth/zipball/4](https://github.com/benedmunds/CodeIgniter-Ion-Auth/zipball/4)\n2.  Copy the files from this package to the correspoding folder in your application folder. For example, copy IonAuth/Config/IonAuth.php to app/Config/IonAuth.php.\n3.  You can also copy the entire directory structure into your ThirdParty/ folder. For example, copy everything to app/ThirdParty/IonAuth/\n4.  Use the migration file (in Database/Migrations/)\n\n    ```console\n    $ php spark migrate:latest -n IonAuth\n    ```\n\n5.  Insert default datas (Don't forget to set Config\\\\Migrations:enabled to true.) Windows :\n\n    ```console\n    $ php spark db:seed IonAuth\\Database\\Seeds\\IonAuthSeeder\n    ```\n\n    Linux :\n\n    ```console\n    $ php spark db:seed IonAuth\\\\Database\\\\Seeds\\\\IonAuthSeeder\n    ```\n\nThe default login is:\n\n-   Email: admin@admin.com\n-   Password: password\n\nUpgrading\n---------\n\n1.  Download the latest version: [https://github.com/benedmunds/CodeIgniter-Ion-Auth/zipball/4](https://github.com/benedmunds/CodeIgniter-Ion-Auth/zipball/4)\n2.  Overwrite Libraries/IonAuth.php and Models/IonAuthModel.php with the new versions.\n3.  Overwrite Languages/\\* with the news versions.\n4.  Check Config/IonAuth.php for evolution.\n\nUpgrading from Ion Auth 2? Check the UPGRADING.md file in the package.\n\nLoading Ion Auth\n----------------\n\nYou load Ion Auth just like any other library:\n\n```php\n$ionAuth = new \\IonAuth\\Libraries\\IonAuth();\n```\n\nYou can also autoload the library.\n\nConfiguration Options\n---------------------\n\nIon Auth is extremely configurable.\n\nTo change configuration options simply edit the Config/IonAuth.php file or pass an array when loading the library.\n\n### Tables\n\n-   **`tables['groups']`** Default is 'groups'  \n     The table name to use for the groups table.\n-   **`tables['users']`** Default is 'users'  \n     The table name to use for the users table.\n-   **`tables['users_groups']`** Default is 'users\\_groups'  \n     The table name to use for the users groups table.\n-   **`tables['login_attempts']`** Default is 'login\\_attempts'  \n     The table name to use for the login attempts table.\n-   **`join['users']`** Default is 'user\\_id'  \n     Users table column you want to join WITH.\n-   **`join['groups']`** Default is 'group\\_id'  \n     Group table column you want to join WITH.\n\n### Hash method\n\n-   **`hashMethod`** Default is 'bcrypt'  \n     The method to hash the password before storing in database. You can choose between bcrypt (from PHP 5.3) or argon2 (from PHP 7.2)  \n     Argon2 is recommended by expert (it is actually the [winner of the Password Hashing Competition](https://password-hashing.net)).  \n     Passwords are automatically salted before hashing (everything is stored in the same 'password' column).  \n     For more information, check the [password\\_hash function help](http://php.net/manual/en/function.password-hash.php).\n-   **Bcrypt-specific options:**\n    -   **`bcryptDefaultCost`** Default is 10  \n         This defines how strong the encryption will be.  \n         However, higher the cost, longer it will take to hash (CPU usage). So adjust this based on your server hardware.\n    -   **`bcryptAdminCost`** Default is 12  \n         Same as bcryptDefaultCost, but for users in the admin group.  \n         It is recommended to have a stronger hashing for administrators.\n\n    You should benchmark your server to find the best cost value. It is recommended to have a hash taking at least 100ms (500ms for administrators).  \n     This can be done easily with this [little script for bcrypt](https://gist.github.com/Indigo744/24062e07477e937a279bc97b378c3402).  \n     It is not recommended (in 2018) to use a value less than 10.\n-   **Argon2-specific options:**\n    -   **`argon2DefaultParams`** Default is **`['memory_cost' => 1 << 12, 'time_cost' => 2, 'threads' => 2]`**  \n         This is an array containing the options for the Argon2 algorithm. The following keys can be set:  \n         **`['memory_cost']`**: Maximum memory (in kBytes) that may be used to compute the Argon2 hash. The spec recommends setting the memory cost to a power of 2.  \n         **`['time_cost']`**: Number of iterations (used to tune the running time independently of the memory size). This defines how strong the encryption will be.  \n         **`['threads']`**: Number of threads to use for computing the Argon2 hash. The spec recommends setting the memory cost to a power of 2.\n    -   **`argon2AdminParams`** Default is **`['memory_cost' => 1 << 14, 'time_cost' => 4, 'threads' => 2]`**  \n         Same as argon2DefaultParams, but for users in the admin group.  \n         It is recommended to have a stronger hashing for administrators.\n\n    You should benchmark your server to find the best parameters. It is recommended to have a hash taking at least 100ms (500ms for administrators).  \n     This can be done easily with this [little script for argon2](https://gist.github.com/Indigo744/e92356282eb808b94d08d9cc6e37884c).  \n     The argon2 algorithm doesn't have *bad parameters* (even with time\\_cost at 1) but remember that longer the hashing, stronger the security.\n\n### Authentication options\n\n-   **`siteTitle`**  \n     The title of your site, used for email.\n-   **`adminEmail`** Default is 'admin@example.com'  \n     Your administrator email address.\n-   **`defaultGroup`** Default is 'members'  \n     Name of the default user group.\n-   **`adminGroup`** Default is 'admin'  \n     Name of the admin group.\n-   **`identity`** Default is 'email'  \n     Column to use for uniquely identifing user/logging in/etc. Usual choices are 'email' OR 'username', but any unique key from your table can be used as identity.  \n     IMPORTANT: If you are changing it from the default (email), update the UNIQUE constraint in your DB.\n-   **`minPasswordLength`** Default is '8'  \n     Minimum length of passwords.  \n     This minimum is not enforced directly by the library.  \n     The controller should define a validation rule to enforce it.  \n     See the Auth controller for an example implementation.  \n\n     Additional note: the library will fail for empty password or password size above 4096 bytes.  \n     This is an arbitrary (long) value to protect against DOS attack.\n-   **`emailActivation`** Default is 'false'  \n     TRUE or FALSE. Sets whether to require email activation or not.\n-   **`manualActivation`** Default is 'false'  \n     TRUE or FALSE. Sets whether to require manual activation (probably by an admin user) or not.\n-   **`rememberUsers`** Default is 'true'  \n     true or false. Sets whether to enable 'remember me' functionality or not.\n-   **`userExpire`** Default is '86500'  \n     Sets how long to remember the user for in seconds. Set to zero for no expiration.\n-   **`userExtendonLogin`** Default is 'false'  \n     TRUE or FALSE. Extend the users session expiration on login.\n-   **`trackLoginAttempts`** Default is 'false'  \n     Track the number of failed login attempts for each user or ip (see trackLoginIpAddress option).\n-   **`trackLoginIpAddress`** Default is 'true'  \n     Track login attempts by IP Address, if FALSE will track based on identity.\n-   **`maximumLoginAttempts`** Default is 3  \n     Set the maximum number of failed login attempts. This maximum is not enforced by the library, but is used by \\$this-\\>ionAuth-\\>isMaxLoginAttemptsExceeded(). The controller should check this function and act appropriately. If set to 0, there is no maximum.\n-   **`forgotPasswordExpiration`** Default is 1800  \n     Number of seconds before a forgot password request expires. If set to 0, requests will not expire.  \n     30 minutes to 1 hour are good values (enough for a user to receive the email and reset its password).  \n     You should not set a value too high (or 0), as it could lead to security issue!\n-   **`recheckTimer`** Default is 0  \n     The number of seconds after which the session is checked again against database to see if the user still exists and is active.  \n     Leave 0 if you don't want session recheck. if you really think you need to recheck the session against database, we would recommend a higher value, as this would affect performance.\n\n### Cookie options\n\n-   **`rememberCookieName`** Default is 'remember\\_code'  \n     Cookie name for the \"Remember me\" feature.\n\n### Email options\n\n-   **`emailType`** Default us 'html'  \n     Email content type.\n\n### Templates options\n\n-   **`emailTemplates`** Default is 'auth/email/'  \n     Folder where the email view templates are stored.\n-   **`emailActivate`** Default is 'activate.tpl.php'  \n     Filname of the email activation view template.\n-   **`emailForgotPassword`** Default is 'forgot\\_password.tpl.php'  \n     Filname of the forgot password email view template.\n\n### Errors and Messages Templates\n\n-   **`templates['errors']['list']`** Default is specified in 'Config/Validation.php'\n     Template for list errors.  \n     *Doc: [https://codeigniter4.github.io/CodeIgniter4/libraries/validation.html\\#customizing-error-display](https://codeigniter4.github.io/CodeIgniter4/libraries/validation.html#customizing-error-display)*\n-   **`templates['messages']['list']`** Default is 'IonAuth\\\\Views\\\\Messages\\\\list'  \n     Template for list messages.\n-   **`templates['messages']['single']`** Default is 'IonAuth\\\\Views\\\\Messages\\\\single'  \n     Template for single message.\n\nClass Function Reference\n========================\n\n**`NOTE:`** `Methods available in the model are called through the controller using PHP5 magic. You should never use IonAuthModel->method() in your applications.`\n\nlogin()\n-------\n\n``` {.f}\nlogin(string $identity, string $password, bool $remember=false): bool\n```\n\nLogs the user into the system.\n\n**Parameters**\n\n1.  **`identity`** - string REQUIRED. Username, email or any unique value in your users table, depending on your configuration.\n2.  **`password`** - string REQUIRED.\n3.  **`remember`** - boolean OPTIONAL. TRUE sets the user to be remembered if enabled in the configuration.\n\n**Return**\n\n-   boolean. TRUE if the user was successfully logged in FALSE if the user was not logged in.\n\n**Usage**\n\n```php\n$identity = 'ben.edmunds@gmail.com';\n$password = '12345678';\n$remember = TRUE; // remember the user\n$this->ionAuth->login($identity, $password, $remember);\n```\n\nlogout()\n--------\n\n``` {.f}\nlogout(): bool\n```\n\nLogs the user out of the system.\n\n**Usage**\n\n```php\n$this->ionAuth->logout();\n```\n\nregister()\n----------\n\n``` {.f}\nregister(string $identity, string $password, string $email, array $additionalData=[], array $groups=[])\n```\n\nRegister (create) a new user.\n\n**Parameters**\n\n1.  **`identity`** - string REQUIRED. This must be the value that uniquely identifies the user when he is registered. If you chose \"email\" as \\$config['identity'] in the configuration file, you must put the email of the new user.\n2.  **`password`** - string REQUIRED.\n3.  **`email`** - string REQUIRED.\n4.  **`additionalData`** - multidimensional array OPTIONAL.\n5.  **`groups`** - array OPTIONAL. If not passed the default group name set in the config will be used.\n\n**Return**\n\n-   mixed. The ID of the user if the user was successfully created, FALSE if the user was not created.\n\n**Usage**\n\n```php\n$username = 'benedmunds';\n$password = '12345678';\n$email = 'ben.edmunds@gmail.com';\n$additional_data = array(\n    'first_name' => 'Ben',\n    'last_name' => 'Edmunds',\n);\n$group = array('1'); // Sets user to admin.\n\n$this->ionAuth->register($username, $password, $email, $additional_data, $group);\n```   \n\ncreateUser()\n------------\n\n``` {.f}\ncreateUser()\n```\n\ncreateUser is an alternate method for [register()](#register) method.\n\nupdate()\n--------\n\n``` {.f}\nupdate(int $id, array $data): bool\n```\n\nUpdate a user.\n\n**Parameters**\n\n1.  **`id`** - integer REQUIRED.\n2.  **`data`** - multidimensional array REQUIRED.\n\n**Return**\n\n-   boolean. TRUE if the user was successfully updated FALSE if the user was not updated.\n\n**Usage**\n\n```php\n$id = 12;\n$data = array(\n    'first_name' => 'Ben',\n    'last_name' => 'Edmunds',\n    'password' => '123456789',\n    );\n\n$this->ionAuth->update($id, $data);\n```\n\nupdateUser()\n------------\n\n``` {.f}\nupdateUser(): bool\n```\n\nupdateUser() is an alternate method for [update()](#update) method.\n\ndeleteUser()\n------------\n\n``` {.f}\ndeleteUser(int $id): bool\n```\n\nDelete a user.\n\n**Parameters**\n\n1.  **`id`** - integer REQUIRED.\n\n**Return**\n\n-   boolean. TRUE if the user was successfully deleted FALSE if the user was not deleted.\n\n**Usage**\n\n```php\n$id = 12;\n$this->ionAuth->deleteUser($id);\n```\n\nforgottenPassword()\n-------------------\n\n``` {.f}\nforgottenPassword(string $identity)\n```\n\nResets a users password by emailing the user a reset code.\n\n**Parameters**\n\n1.  **`identity`** - string REQUIRED. (as defined in Config/IonAuth.php)\n\n**Return**\n\n-   boolean. TRUE if the users password was successfully reset FALSE if the users password was not reset.\n\n**Usage**\n\nThis example assumes you have 'email' selected as the identity in Config/IonAuth.php\n\n```php\n//Working code for this example is in the example Auth controller in the github repo\nfunction forgot_password()\n{\n    $this->validation->setRule('email', 'Email Address', 'required');\n\n    if ($this->validation->run() == false) {\n        //setup the input\n        $this->data['email'] = array(\n            'name'    => 'email',\n            'id'      => 'email',\n        );\n\n        //set any errors and display the form\n        $this->data['message'] = ($this->validation->listErrors()) ? $this->validation->listErrors() : $this->session->flashdata('message');\n        return view('auth/forgot_password', $this->data);\n    }\n    else {\n        //run the forgotten password method to email an activation code to the user\n        $forgotten = $this->ionAuth->forgottenPassword($this->request->getPost('email'));\n\n        if ($forgotten)\n        {\n            //if there were no errors\n            $this->session->setFlashdata('message', $this->ionAuth->messages());\n            return redirect()->to(\"auth/login\"); //we should display a confirmation page here instead of the login page\n        }\n        else\n        {\n            $this->session->setFlashdata('message', $this->ionAuth->errors());\n            return redirect()->to(\"auth/forgot_password\");\n        }\n    }\n}\n```\n\nforgottenPasswordCheck()\n------------------------\n\n``` {.f}\nforgottenPasswordCheck(string $code)\n```\n\nCheck to see if the forgotten password code is valid.\n\n**Parameters**\n\n1.  **`code`** - string REQUIRED.\n\n**Return**\n\n-   object / bool. Returns the user record if valid, return FALSE if invalid.\n\n**Usage**\n\n```php\n$user = $this->ionAuth->forgottenPasswordCheck($code);\nif ($user)\n{\n    //display the password reset form\n}\n```       \n\nloggedIn()\n----------\n\n``` {.f}\nloggedIn(): bool\n```\n\nCheck to see if a user is logged in.\n\n**Return**\n\n-   boolean. TRUE if the user is logged in FALSE if the user is not logged in.\n\n**Usage**\n\n```php\nif (!$this->ionAuth->loggedIn())\n{\n    return redirect()->to('auth/login');\n}\n```       \n\nisAdmin()\n---------\n\n``` {.f}\nisAdmin(int $id=0): bool\n```\n\nCheck to see if the currently logged in user is an admin.\n\n**Parameters**\n\n1.  **`id`** - integer OPTIONAL. If a user id is not passed the id of the currently logged in user will be used.\n\n**Return**\n\n-   boolean. TRUE if the user is an admin FALSE if the user is not an admin.\n\n**Usage**\n\n```php\nif (!$this->ionAuth->isAdmin())\n{\n    $this->session->markAsFlashdata('message', 'You must be an admin to view this page');\n    redirect()->to('welcome/index');\n}\n```\n        \n\ninGroup()\n---------\n\n``` {.f}\ninGroup($checkGroup, int $id=0, bool $checkAll=false): bool\n```\n\nCheck to see if a user is in a group(s).\n\n**Parameters**\n\n1.  **`checkGroup`** - string REQUIRED. Integer or array of strings and integers.\n2.  **`id`** - integer OPTIONAL. If a user id is not passed the id of the currently logged in user will be used.\n3.  **`checkAll`** - boolean OPTIONAL. Whether to check if user is in all groups, or in any group.\n\n**Return**\n\n-   boolean. TRUE if the user is in all or any (based on passed param), FALSE otherwise.\n\n**Usage**\n\n```php\n# single group (by name)\n$group = 'gangstas';\nif (!$this->ionAuth->inGroup($group))\n{\n    $this->session->markAsFlashdata('message', 'You must be a gangsta to view this page');\n    redirect()->to('welcome/index');\n}\n\n# single group (by id)\n$group = 1;\nif (!$this->ionAuth->inGroup($group))\n{\n    $this->session->markAsFlashdata('message', 'You must be part of the group 1 to view this page');\n    redirect()->to('welcome/index');\n}\n\n# multiple groups (by name)\n$group = array('gangstas', 'hoodrats');\nif (!$this->ionAuth->inGroup($group))\n{\n    $this->session->markAsFlashdata('message', 'You must be a gangsta OR a hoodrat to view this page');\n    redirect()->to('welcome/index');\n}\n\n# multiple groups (by id)\n$group = array(1, 2);\nif (!$this->ionAuth->inGroup($group))\n{\n    $this->session->markAsFlashdata('message', 'You must be a part of group 1 or 2 to view this page');\n    redirect()->to('welcome/index');\n}\n\n# multiple groups (by id and name)\n$group = array('gangstas', 2);\nif (!$this->ionAuth->inGroup($group))\n{\n    $this->session->markAsFlashdata('message', 'You must be a part of the gangstas or group 2');\n    redirect()->to('welcome/index');\n}\n\n# multiple groups (by id) and check if all exist\n$group = array(1, 2);\nif (!$this->ionAuth->inGroup($group, false, true))\n{\n    $this->session->markAsFlashdata('message', 'You must be a part of group 1 and 2 to view this page');\n    redirect()->to('welcome/index');\n}\n```\n        \n\nusernameCheck()\n---------------\n\n``` {.f}\nusernameCheck(string $username): bool\n```\n\nCheck to see if the username is already registered.\n\n**Parameters**\n\n1.  **`username`** - string REQUIRED.\n\n**Return**\n\n-   boolean. TRUE if the user is registered FALSE if the user is not registered.\n\n**Usage**\n\n```php\n//This is a lame example but it works.  Usually you would use this method with form_validation.\n$username = $this->input->post('username');\n$password = $this->input->post('password');\n$email = $this->input->post('email');\n$additional_data = array(\n    'first_name' => $this->input->post('first_name'),\n    'last_name' => $this->input->post('last_name'),\n);\n\nif (!$this->ionAuth->usernameCheck($username))\n{\n    $group_name = 'users';\n    $this->ionAuth->register($username, $password, $email, $additional_data, $group_name);\n}\n```\n\nemailCheck()\n------------\n\n``` {.f}\nemailCheck(string $email=''): bool\n```\n\nCheck to see if the email is already registered.\n\n**Parameters**\n\n1.  **`email`** - string REQUIRED.\n\n**Return**\n\n-   boolean. TRUE if the user is registered FALSE if the user is not registered.\n\n**Usage**\n\n```php\n//This is a lame example but it works.  Usually you would use this method with form_validation.\n$username = $this->input->post('username');\n$password = $this->input->post('password');\n$email = $this->input->post('email');\n$additional_data = array(\n    'first_name' => $this->input->post('first_name'),\n    'last_name' => $this->input->post('last_name'),\n);\n\nif (!$this->ionAuth->emailCheck($email))\n{\n    $group_name = 'users';\n    $this->ionAuth->register($username, $password, $email, $additional_data, $group_name);\n}\n```\n\nidentityCheck()\n---------------\n\n``` {.f}\nidentityCheck(string $identity=''): bool\n```\n\nCheck to see if the identity is already registered.\n\n**Parameters**\n\n1.  **`identity`** - string REQUIRED.\n\n**Return**\n\n-   boolean. TRUE if the user is registered FALSE if the user is not registered.\n\n**Usage**\n\n```php\n//This is a lame example but it works.\n$user = $this->ionAuth->user();\n$data = array(\n    'identity' => $this->input->post('identity'),\n    'first_name' => $this->input->post('first_name'),\n    'last_name' => $this->input->post('last_name'),\n);\n\nif ($data['identity'] === $user->username || $data['identity'] === $user->email || $this->ionAuth->identityCheck($data['identity']) === FALSE)\n{\n    $this->ionAuth->updateUser($user->id, $data)\n}\n```\n\nisMaxLoginAttemptsExceeded()\n----------------------------\n\n``` {.f}\nisMaxLoginAttemptsExceeded(string $identity, $ipAddress=null): bool\n```\n\nIf login attempt tracking is enabled, checks to see if the number of failed login attempts for this identity or ip address has been exceeded. The controller must call this method and take any necessary actions. Login attempt limits are not enforced in the library.\n\n**Parameters**\n\n1.  **`identity`** - string REQUIRED.\n2.  **`ipAddress`** - OPTIONAL.\n\n**Return**\n\n-   boolean. TRUE if maximumLoginAttempts is exceeded FALSE if not or if login attempts not tracked.\n\n**Usage**\n\n```php\n$identity = 'ben.edmunds@gmail.com';\nif ($this->ionAuth->isMaxLoginAttemptsExceeded($identity))\n{\n    $this->session->markAsFlashdata('message', 'You have too many login attempts');\n    redirect()->to('welcome/index');\n}\n```       \n\ngetAttemptsNum()\n----------------\n\n``` {.f}\ngetAttemptsNum(string $identity, $ipAddress=null): int\n```\n\nReturns the number of failed login attempts for this identity or ip address.\n\n**Parameters**\n\n1.  **`identity`** - string REQUIRED.\n\n**Return**\n\n-   integer. The number of failed login attempts for this identity or ip address.\n\n**Usage**\n\n```php\n$identity = 'ben.edmunds@gmail.com';\n$num_attempts = $this->ionAuth->getAttemptsNum($identity);\n```  \n\nincreaseLoginAttempts()\n-----------------------\n\n``` {.f}\nincreaseLoginAttempts(string $identity): bool\n```\n\nIf login attempt tracking is enabled, records another failed login attempt for this identity or ip address. This method is automatically called during the login() method if the login failed.\n\n**Parameters**\n\n1.  **`identity`** - string REQUIRED.\n\n**Return**\n\n-   boolean.\n\n**Usage**\n\n```php\n$identity = 'ben.edmunds@gmail.com';\n$password = '12345678';\nif ($this->ionAuth->login($identity, $password) == FALSE)\n{\n    $this->ionAuth->increaseLoginAttempts($identity);\n}\n```       \n\nclearLoginAttempts()\n--------------------\n\n``` {.f}\nclearLoginAttempts(string $identity, int $oldAttemptsAxpirePeriod=86400, $ipAddress = null): bool\n```\n\nClears all failed login attempt records for this identity or this ip address. This method is automatically called during the login() method if the login succeded.\n\n**Parameters**\n\n1.  **`identity`** - string REQUIRED.\n2.  **`oldAttemptsAxpirePeriod`** - integer. OPTIONAL.\n3.  **`ipAddress`** - OPTIONAL.\n\n**Usage**\n\n```php\n$identity = 'ben.edmunds@gmail.com';\n$password = '12345678';\n\nif ($this->ionAuth->login($identity, $password) == TRUE)\n{\n    $this->ionAuth->clearLoginAttempts($identity);\n}\n```       \n\nuser()\n------\n\n``` {.f}\nuser(int $id=0): self\n```\n\nGet a user.\n\n**Parameters**\n\n1.  **`id`** - integer OPTIONAL. If a user id is not passed the id of the currently logged in user will be used.\n\n**Return**\n\n-   model object\n\n**Usage**\n\n```php\n$user = $this->ionAuth->user()->row();\necho $user->email;\n```\n\n**Output**\n\n```php\nstdClass Object (\n    [id] => 1\n    [ip_address] => 127.0.0.1\n    [username] => administrator\n    [password] => 59beecdf7fc966e2f17fd8f65a4a9aeb09d4a3d4\n    [email] => admin@admin.com\n    [activation_code] => 19e181f2ccc2a7ea58a2c0aa2b69f4355e636ef4\n    [forgotten_password_code] => 81dce1d0bc2c10fbdec7a87f1ff299ed7e4c9e4a\n    [remember_code] => 9d029802e28cd9c768e8e62277c0df49ec65c48c\n    [created_on] => 1268889823\n    [last_login] => 1279464628\n    [active] => 0\n    [first_name] => Admin\n    [last_name] => Account\n    [company] => Some Corporation\n    [phone] => (123)456-7890\n)\n```    \n\nusers()\n-------\n\n``` {.f}\nusers($groups=null): self\n```\n\nGet the users.\n\n**Parameters**\n\n1.  **`groups`** - array OPTIONAL. Group names, or group IDs and names. If an array of group ids, of group names, or of group ids and names are passed (or a single group id or name) this will return the users in those groups.\n\n**Return**\n\n-   model object\n\n**Usage**\n\n```php\n// get all users\n$users = $this->ionAuth->users()->result();\n```\n\n```php\n// get users from group with id of '1'\n$users = $this->ionAuth->users(1)->result();\n```\n\n```php\n// get users from 'members' group\n$users = $this->ionAuth->users('members')->result();\n```\n\n```php\n// get users from 'admin' and 'members' group\n$users = $this->ionAuth->users(array('admin', 'members'))->result();\n```\n\n```php\n// get users from 'admin' group, 'members' group and group with id '4'\n$users = $this->ionAuth->users(array('admin', 4, 'members'))->result();\n```\n\n```php\n// get users from group with id of '1'\n$users = $this->ionAuth->users(1)->result();\n```\n\n```php\n// get users from 'members' group\n$users = $this->ionAuth->users('members')->result();\n```\n\n```php\n// get users from 'admin' and 'members' group\n$users = $this->ionAuth->users(array('admin', 'members'))->result();\n```\n\n```php\n// get users from 'admin' group, 'members' group and group with id '4'\n$users = $this->ionAuth->users(array('admin', 4 ,'members'))->result();\n```\n\ngroup()\n-------\n\n``` {.f}\ngroup(int $id=0)\n```\n\nGet a group.\n\n**Parameters**\n\n1.  **`id`** - integer REQUIRED.\n\n**Return**\n\n-   object\n\n**Usage**\n\n```php\n$groupId = 2;\n$group = $this->ionAuth->group($groupId)->result();\n```   \n\ngroups()\n--------\n\n``` {.f}\ngroups()\n```\n\nGet the groups.\n\n**Return**\n\n-   array of objects\n\n**Usage**\n\n```php\n$groups = $this->ionAuth->groups()->result();\n```   \n\nmessages()\n----------\n\n``` {.f}\nmessages(): string\n```\n\nGet messages.\n\n**Return**\n\n-   string\n\n**Usage**\n\n```php\n$id = 12;\n$data = array(\n    'first_name' => 'Ben',\n    'last_name' => 'Edmunds',\n);\n\nif ($this->ionAuth->updateUser($id, $data))\n{\n    $messages = $this->ionAuth->messages();\n    echo $messages;\n}\nelse\n{\n    $errors = $this->ionAuth->errors();\n    echo $errors;\n}\n```     \n\nmessagesArray()\n---------------\n\n``` {.f}\nmessagesArray(bool $langify=true): array\n```\n\nGet messages as an array.\n\n**Parameters**\n\n1.  **`langify`** - boolean OPTIONAL. TRUE means that the messages will be langified.\n\n**Return**\n\n-   array\n\n**Usage**\n\n```php\n$id = 12;\n$data = array(\n    'first_name' => 'Ben',\n    'last_name' => 'Edmunds',\n);\n\nif ($this->ionAuth->updateUser($id, $data))\n{\n    $messages = $this->ionAuth->messagesArray();\n    foreach ($messages as $message)\n    {\n        echo $message;\n    }\n}\nelse\n{\n    $errors = $this->ionAuth->errorsArray();\n    foreach ($errors as $error)\n    {\n        echo $error;\n    }\n}\n```       \n\ngetUsersGroups()\n----------------\n\n``` {.f}\ngetUsersGroups(int $id=0)\n```\n\nGet all groups a user is part of.\n\n**Parameters**\n\n1.  **`id`** - integer OPTIONAL. If a user id is not passed the id of the currently logged in user will be used.\n\n**Return**\n\n```php\nstdClass Object (\n    [id] => 1\n    [name] => admins\n    [description] => Administrator\n)\n```       \n\n**Usage**\n\n```php\n$user_groups = $this->ionAuth->getUsersGroups($user->id)->getResult();\n```\n        \n\naddToGroup()\n------------\n\n``` {.f}\naddToGroup($groupIds, int $userId=0): int\n```\n\nAdd user to group\n\n**Parameters**\n\n1.  **`groupIds`** - integer or array REQUIRED.\n2.  **`userId`** - integer REQUIRED.\n\n**Return**\n\n-   boolean. TRUE if the user was added to group(s) FALSE if the user is not added to group(s).\n\n**Usage**\n\n```php\n// pass an array of group ID's and user ID\n$this->ionAuth->addToGroup(array('1', '3', '6'), $userId);\n\n// pass a single ID and user ID\n$this->ionAuth->addToGroup(1, $userId);\n```\n\nremoveFromGroup()\n-----------------\n\n``` {.f}\nremoveFromGroup($groupIds=0, int $userId=0): bool\n```\n\nRemove user from group(s)\n\n**Parameters**\n\n1.  **`groupIds`** - NULL, integer or array REQUIRED. NULL will remove the user from all groups.\n2.  **`userId`** - integer REQUIRED.\n\n**Return**\n\n-   boolean. TRUE if the user was removed from group(s) FALSE if the user is not removed from group(s).\n\n**Usage**\n\n```php\n// pass an array of group ID's and user ID\n$groupIds = array('1', '3', '6');\n$this->ionAuth->removeFromGroup($groupIds, $userId);\n\n// pass a single ID and user ID\n$this->ionAuth->removeFromGroup(1, $userId);\n\n// pass NULL to remove user from all groups\n$this->ionAuth->removeFromGroup(NULL, $userId);\n```\n\ncreateGroup()\n-------------\n\n``` {.f}\ncreateGroup(string $groupName='', string $groupDescription='', array $additionalData=[])\n```\n\nCreate a group\n\n**Parameters**\n\n1.  **`groupName`** - string REQUIRED.\n2.  **`groupDescription`** - string.\n3.  **`additionalData`** - array.\n\n**Return**\n\n-   brand new group\\_id if the group was created, false if the group creation failed.\n\n**Usage**\n\n```php\n// pass the right arguments and it's done\n$group = $this->ionAuth->createGroup('new_test_group', 'This is a test description');\n\nif (! $group)\n{\n    $viewErrors = $this->ionAuth->messages();\n}\nelse\n{\n    $newGroupId = $group;\n    // do more cool stuff\n}\n```       \n\nupdateGroup()\n-------------\n\n``` {.f}\nupdateGroup(int $groupId, string $groupName='', array $additionalData=[]): bool\n```\n\nUpdate details of a group\n\n**Parameters**\n\n1.  **`groupId`** - integer REQUIRED.\n2.  **`groupName`** - string REQUIRED.\n3.  **`additionalData`** - array.\n\n**Return**\n\n-   boolean. TRUE if the group was updated, FALSE if the update failed.\n\n**Usage**\n\n```php\n// source these things from anywhere you like (eg., a form)\n$groupId = 2;\n$groupName = 'test_group_changed_name';\n$additionalData = array(\n    'description' => 'New Description'\n);\n\n// pass the right arguments and it's done\n$group_update = $this->ionAuth->updateGroup($groupId, $groupName, $additionalData);\n\nif(!$group_update)\n{\n    $view_errors = $this->ionAuth->messages();\n}\nelse\n{\n    // do more cool stuff\n}\n```        \n\ndeleteGroup()\n-------------\n\n``` {.f}\ndeleteGroup(int $groupId): bool\n```\n\nRemove a group. Removes the group details from the configured 'groups' table. Users belonging to the group are stripped of this status (references to this group are removed from users\\_groups), but user data itself remains untouched.\n\n**Parameters**\n\n1.  **`groupId`** - integer REQUIRED.\n\n**Return**\n\n-   boolean. TRUE if the group was deleted, FALSE if the delete failed.\n\n**Usage**\n\n```php\n// source this from anywhere you like (eg., a form)\n$groupId = 2;\n\n// pass the right arguments and it's done\n$groupDelete = $this->ionAuth->deleteGroup($groupId);\n\nif (! $groupDelete)\n{\n    $viewErrors = $this->ionAuth->messages();\n}\nelse\n{\n    // do more cool stuff\n}\n```       \n\nsetMessageTemplate()\n--------------------\n\n``` {.f}\nsetMessageTemplate(string $single='', string $list=''): bool\n```\n\nSet the message templates.\n\n**Parameters**\n\n1.  **`single`** - string OPTIONAL. Single template.\n2.  **`list`** - string OPTIONAL. List template.\n\n**Usage**\n\n```php\n$id = 12;\n$data = array(\n    'first_name' => 'Ben',\n    'last_name' => 'Edmunds',\n);\n\nif ($this->ionAuth->updateUser($id, $data))\n{\n    $this->ionAuth->setMessageTemplate('', 'list_message');\n    $messages = $this->ionAuth->messages();\n    echo $messages;\n}\nelse\n{\n    $errors = $this->ionAuth->errors();\n    echo $errors;\n}\n```\n\nerrors()\n--------\n\n``` {.f}\nerrors(string $template='list'): string\n```\n\nGet the errors.\n\n**Parameters**\n\n1.  **`list`** - string OPTIONAL. List template.\n\n**Return**\n\n-   string\n\n**Usage**\n\n```php\n$id = 12;\n$data = array(\n    'first_name' => 'Ben',\n    'last_name' => 'Edmunds',\n);\n\nif ($this->ionAuth->updateUser($id, $data))\n{\n    $messages = $this->ionAuth->messages();\n    echo $messages;\n}\nelse\n{\n    $errors = $this->ionAuth->errors();\n    echo $errors;\n}\n```       \n\nerrorsArray()\n-------------\n\n``` {.f}\nerrorsArray(bool $langify=true): array\n```\n\nGet error messages as an array.\n\n**Return**\n\n-   array\n\n**Parameters**\n\n1.  **`langify`** - boolean OPTIONAL. TRUE means that the error messages will be langified (default TRUE).\n\n**Usage**\n\n```php\n$id = 12;\n$data = array(\n    'first_name' => 'Ben',\n    'last_name' => 'Edmunds',\n    );\n\nif ($this->ionAuth->updateUser($id, $data))\n{\n    $messages = $this->ionAuth->messagesArray();\n    foreach ($messages as $message)\n    {\n        echo $message;\n    }\n}\nelse\n{\n    $errors = $this->ionAuth->errorsArray();\n    foreach ($errors as $error)\n    {\n        echo $error;\n    }\n}\n```\n        \n\nsetHook()\n---------\n\n``` {.f}\nsetHook(string $event, string $name, string $class, string $method, array $arguments=[]): self\n```\n\nSet a single or multiple functions to be called when trigged by triggerEvents(). See an example here: [https://gist.github.com/657de89b26decda2b2fa](https://gist.github.com/657de89b26decda2b2fa)\n\n**Parameters**\n\n1.  **`event`** - string REQUIRED.\n2.  **`name`** - string REQUIRED.\n3.  **`class`** - string REQUIRED.\n4.  **`method`** - string REQUIRED.\n5.  **`arguments`** - array OPTIONAL.\n\n**Usage**\n\n```php\n<?php\n\nuse CodeIgniter\\Controller;\nuse IonAuth\\Libraries\\IonAuth;\n\nclass Accounts extends Controller {\n\n    protected $ionAuth;\n\n    public function __construct()\n    {\n        $this->ionAuth = new IonAuth();\n        // ....\n\n        /**\n        *\n        * make sure we loaded IonAuth\n        * The following does not need to go in __construct() it just needs to be set before\n        * you triggerEvents().\n        */\n        $event = 'socialpush';\n        $class = 'Accounts';\n        $args = array('this is the content of the message', 'billy');\n\n        $name = 'activate_sendmail';\n        $method = 'email';\n        $this->ionAuth->setHook($event, $name, $class, $method, $args);\n\n        $name = 'call_Twitter';\n        $method = 'twitter';\n        $this->ionAuth->setHook($event, $name, $class, $method, $args);\n\n        $name = 'call_MailChimp_API';\n        $method = 'mailchimp';\n        $this->ionAuth->setHook($event, $name, $class, $method, $args);\n\n        $name = 'call_Facebook_API';\n        $method = 'facebook';\n        $this->ionAuth->setHook($event, $name, $class, $method, $args);\n\n        $name = 'call_gPlus_API';\n        $method = 'gplus';\n        $this->ionAuth->setHook($event, $name, $class, $method, $args);\n    }\n\n    public function postMessage($one)\n    {\n        $this->ionAuth->triggerEvents('socialpush');\n    }\n    public function email($content, $who)\n    {\n        return true;\n    }\n    public function twitter($content, $who)\n    {\n        return true;\n    }\n    public function mailchimp($content, $who)\n    {\n        return true;\n    }\n    public function facebook($content, $who)\n    {\n        return true;\n    }\n    public function gplus($content, $who)\n    {\n        return true;\n    }\n}\n```\n\ntriggerEvents()\n---------------\n\n``` {.f}\ntriggerEvents($events): void\n```\n\nCall Additional functions to run that were registered with [setHook()](#setHook).\n\n**Parameters**\n\n1.  **`events`** - string or array REQUIRED. Event(s) name.\n\n**Usage**\n\n```php\n$this->ionAuth->triggerEvents('socialpush');\n```\n"
        },
        {
          "name": "Views",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.0419921875,
          "content": "{\n    \"name\": \"benedmunds/codeigniter-ion-auth\",\n    \"description\": \"Simple and Lightweight Auth System for CodeIgniter\",\n    \"type\": \"library\",\n\t\"license\": \"MIT\",\n\t\"keywords\": [\n\t  \"codeigniter\", \"auth\"\n\t],\n\t\"homepage\": \"http://benedmunds.com/ion_auth\",\n    \"authors\": [\n        {\n            \"name\": \"Ben EDMUNDS\"\n        },\n        {\n            \"name\": \"Benoit VRIGNAUD\",\n            \"email\": \"benoit.vrignaud@tangue.fr\"\n        }\n    ],\n    \"require\": {\n\t\"codeigniter4/framework\" : \"^v4.3\"\n    },\n\t\"require-dev\": {\n        \"phpunit/phpunit\": \"^7.3\",\n        \"codeigniter4/codeigniter4-standard\": \"^1.0\",\n        \"squizlabs/php_codesniffer\": \"^3.3\"\n\t},\n\t\"autoload\": {\n\t\t\"psr-4\" : {\n\t\t  \"IonAuth\\\\\": \"/\"\n\t\t}\n\t},\n    \"repositories\": {\n        \"repo-name\": {\n            \"type\": \"vcs\",\n            \"url\": \"git@github.com:benedmunds/CodeIgniter-Ion-Auth.git\"\n        },\n        \"ionAuth\": {\n            \"type\": \"vcs\",\n            \"url\": \"git@github.com:benedmunds/CodeIgniter-Ion-Auth.git\"\n        }\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n"
        },
        {
          "name": "contributing.md",
          "type": "blob",
          "size": 0.822265625,
          "content": "Contributing to CodeIgniter Ion Auth.\n===================================\n\nFirst of all thanks for your interest. But contributing to this repo has some requirements.\nThose requirements are listed below.\n\n### Issue tracker. \nThe issue tracker is the preferred channel for bug reports, features requests and submitting pull requests, but please respect the following restrictions:\n\n- Please do not use the issue tracker for personal support requests.\n- Please do not derail or troll issues. Keep the discussion on topic and respect the opinions of others.\n\n### Requirements\n- Make sure your `PHP`Code is following the Codeigniter standards (https://github.com/bcit-ci/CodeIgniter4-Standard).\n- Add spacings between the php begin and end tag. \n- Comments should also have a space between `//` and the begin of the comment. like `// Example`.\n\n\n"
        },
        {
          "name": "sql",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "userguide",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}