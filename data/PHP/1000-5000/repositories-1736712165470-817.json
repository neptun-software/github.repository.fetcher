{
  "metadata": {
    "timestamp": 1736712165470,
    "page": 817,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "phpstan/phpdoc-parser",
      "stars": 1378,
      "defaultBranch": "2.0.x",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3466796875,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\ntrim_trailing_whitespace = true\n\n[*.{php,phpt}]\nindent_style = tab\nindent_size = 4\n\n[*.xml]\nindent_style = tab\nindent_size = 4\n\n[*.neon]\nindent_style = tab\nindent_size = 4\n\n[*.{yaml,yml}]\nindent_style = space\nindent_size = 2\n\n[composer.json]\nindent_style = tab\nindent_size = 4\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.419921875,
          "content": "*.abnf text eol=crlf\n*.php text eol=lf\n\n.github export-ignore\napigen export-ignore\nphpcs.xml export-ignore\ndoc/grammars export-ignore\ntests export-ignore\ntmp export-ignore\n.editorconfig export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\nbuild-abnfgen.sh export-ignore\nCODE_OF_CONDUCT.md export-ignore\nMakefile export-ignore\nphpstan-baseline.neon export-ignore\nphpstan.neon export-ignore\nphpunit.xml export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0830078125,
          "content": "/docs\n/temp\n/tools\n/tests/tmp\n/build-cs\n/vendor\n/composer.lock\n.phpunit.result.cache\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.146484375,
          "content": "# Contributor Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project maintainer at <ondrej@mirtes.cz>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2016 Ond≈ôej Mirtes\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.765625,
          "content": ".PHONY: check\ncheck: lint cs tests phpstan\n\n.PHONY: tests\ntests:\n\tphp vendor/bin/phpunit\n\n.PHONY: lint\nlint:\n\tphp vendor/bin/parallel-lint --colors \\\n\t\tsrc tests \\\n\t\t--exclude tests/PHPStan/Analyser/data \\\n\t\t--exclude tests/PHPStan/Rules/Methods/data \\\n\t\t--exclude tests/PHPStan/Rules/Functions/data\n\n.PHONY: cs-install\ncs-install:\n\tgit clone https://github.com/phpstan/build-cs.git || true\n\tgit -C build-cs fetch origin && git -C build-cs reset --hard origin/2.x\n\tcomposer install --working-dir build-cs\n\n.PHONY: cs\ncs:\n\tphp build-cs/vendor/bin/phpcs src tests\n\n.PHONY: cs-fix\ncs-fix:\n\tphp build-cs/vendor/bin/phpcbf src tests\n\n.PHONY: phpstan\nphpstan:\n\tphp vendor/bin/phpstan\n\n.PHONY: phpstan-generate-baseline\nphpstan-generate-baseline:\n\tphp vendor/bin/phpstan --generate-baseline\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.8876953125,
          "content": "<h1 align=\"center\">PHPDoc Parser for PHPStan</h1>\n\n<p align=\"center\">\n\t<a href=\"https://github.com/phpstan/phpdoc-parser/actions\"><img src=\"https://github.com/phpstan/phpdoc-parser/workflows/Build/badge.svg\" alt=\"Build Status\"></a>\n\t<a href=\"https://packagist.org/packages/phpstan/phpdoc-parser\"><img src=\"https://poser.pugx.org/phpstan/phpdoc-parser/v/stable\" alt=\"Latest Stable Version\"></a>\n\t<a href=\"https://choosealicense.com/licenses/mit/\"><img src=\"https://poser.pugx.org/phpstan/phpstan/license\" alt=\"License\"></a>\n\t<a href=\"https://phpstan.org/\"><img src=\"https://img.shields.io/badge/PHPStan-enabled-brightgreen.svg?style=flat\" alt=\"PHPStan Enabled\"></a>\n</p>\n\nThis library `phpstan/phpdoc-parser` represents PHPDocs with an AST (Abstract Syntax Tree). It supports parsing and modifying PHPDocs.\n\nFor the complete list of supported PHPDoc features check out PHPStan documentation. PHPStan is the main (but not the only) user of this library.\n\n* [PHPDoc Basics](https://phpstan.org/writing-php-code/phpdocs-basics) (list of PHPDoc tags)\n* [PHPDoc Types](https://phpstan.org/writing-php-code/phpdoc-types) (list of PHPDoc types)\n* [phpdoc-parser API Reference](https://phpstan.github.io/phpdoc-parser/2.0.x/namespace-PHPStan.PhpDocParser.html) with all the AST node types etc.\n\nThis parser also supports parsing [Doctrine Annotations](https://github.com/doctrine/annotations). The AST nodes live in the [PHPStan\\PhpDocParser\\Ast\\PhpDoc\\Doctrine namespace](https://phpstan.github.io/phpdoc-parser/2.0.x/namespace-PHPStan.PhpDocParser.Ast.PhpDoc.Doctrine.html).\n\n## Installation\n\n```\ncomposer require phpstan/phpdoc-parser\n```\n\n## Basic usage\n\n```php\n<?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PHPStan\\PhpDocParser\\Ast\\PhpDoc\\ParamTagValueNode;\nuse PHPStan\\PhpDocParser\\Ast\\PhpDoc\\PhpDocNode;\nuse PHPStan\\PhpDocParser\\Ast\\Type\\IdentifierTypeNode;\nuse PHPStan\\PhpDocParser\\Lexer\\Lexer;\nuse PHPStan\\PhpDocParser\\ParserConfig;\nuse PHPStan\\PhpDocParser\\Parser\\ConstExprParser;\nuse PHPStan\\PhpDocParser\\Parser\\PhpDocParser;\nuse PHPStan\\PhpDocParser\\Parser\\TokenIterator;\nuse PHPStan\\PhpDocParser\\Parser\\TypeParser;\n\n// basic setup\n\n$config = new ParserConfig(usedAttributes: []);\n$lexer = new Lexer($config);\n$constExprParser = new ConstExprParser($config);\n$typeParser = new TypeParser($config, $constExprParser);\n$phpDocParser = new PhpDocParser($config, $typeParser, $constExprParser);\n\n// parsing and reading a PHPDoc string\n\n$tokens = new TokenIterator($lexer->tokenize('/** @param Lorem $a */'));\n$phpDocNode = $phpDocParser->parse($tokens); // PhpDocNode\n$paramTags = $phpDocNode->getParamTagValues(); // ParamTagValueNode[]\necho $paramTags[0]->parameterName; // '$a'\necho $paramTags[0]->type; // IdentifierTypeNode - 'Lorem'\n```\n\n### Format-preserving printer\n\nThis component can be used to modify the AST\nand print it again as close as possible to the original.\n\nIt's heavily inspired by format-preserving printer component in [nikic/PHP-Parser](https://github.com/nikic/PHP-Parser).\n\n```php\n<?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\nuse PHPStan\\PhpDocParser\\Ast\\NodeTraverser;\nuse PHPStan\\PhpDocParser\\Ast\\NodeVisitor\\CloningVisitor;\nuse PHPStan\\PhpDocParser\\Ast\\PhpDoc\\PhpDocNode;\nuse PHPStan\\PhpDocParser\\Ast\\Type\\IdentifierTypeNode;\nuse PHPStan\\PhpDocParser\\Lexer\\Lexer;\nuse PHPStan\\PhpDocParser\\ParserConfig;\nuse PHPStan\\PhpDocParser\\Parser\\ConstExprParser;\nuse PHPStan\\PhpDocParser\\Parser\\PhpDocParser;\nuse PHPStan\\PhpDocParser\\Parser\\TokenIterator;\nuse PHPStan\\PhpDocParser\\Parser\\TypeParser;\nuse PHPStan\\PhpDocParser\\Printer\\Printer;\n\n// basic setup with enabled required lexer attributes\n\n$config = new ParserConfig(usedAttributes: ['lines' => true, 'indexes' => true]);\n$lexer = new Lexer($config);\n$constExprParser = new ConstExprParser($config);\n$typeParser = new TypeParser($config, $constExprParser);\n$phpDocParser = new PhpDocParser($config, $typeParser, $constExprParser);\n\n$tokens = new TokenIterator($lexer->tokenize('/** @param Lorem $a */'));\n$phpDocNode = $phpDocParser->parse($tokens); // PhpDocNode\n\n$cloningTraverser = new NodeTraverser([new CloningVisitor()]);\n\n/** @var PhpDocNode $newPhpDocNode */\n[$newPhpDocNode] = $cloningTraverser->traverse([$phpDocNode]);\n\n// change something in $newPhpDocNode\n$newPhpDocNode->getParamTagValues()[0]->type = new IdentifierTypeNode('Ipsum');\n\n// print changed PHPDoc\n$printer = new Printer();\n$newPhpDoc = $printer->printFormatPreserving($newPhpDocNode, $phpDocNode, $tokens);\necho $newPhpDoc; // '/** @param Ipsum $a */'\n```\n\n## Code of Conduct\n\nThis project adheres to a [Contributor Code of Conduct](CODE_OF_CONDUCT.md). By participating in this project and its community, you are expected to uphold this code.\n\n## Building\n\nInitially you need to run `composer install`, or `composer update` in case you aren't working in a folder which was built before.\n\nAfterwards you can either run the whole build including linting and coding standards using\n\n    make\n\nor run only tests using\n\n    make tests\n"
        },
        {
          "name": "UPGRADING.md",
          "type": "blob",
          "size": 5.7841796875,
          "content": "Upgrading from phpstan/phpdoc-parser 1.x to 2.0\n=================================\n\n### PHP version requirements\n\nphpstan/phpdoc-parser now requires PHP 7.4 or newer to run.\n\n### Changed constructors of parser classes\n\nInstead of different arrays and boolean values passed into class constructors during setup, parser classes now share a common ParserConfig object.\n\nBefore:\n\n```php\nuse PHPStan\\PhpDocParser\\Lexer\\Lexer;\nuse PHPStan\\PhpDocParser\\Parser\\ConstExprParser;\nuse PHPStan\\PhpDocParser\\Parser\\TypeParser;\nuse PHPStan\\PhpDocParser\\Parser\\PhpDocParser;\n\n$usedAttributes = ['lines' => true, 'indexes' => true];\n\n$lexer = new Lexer();\n$constExprParser = new ConstExprParser(true, true, $usedAttributes);\n$typeParser = new TypeParser($constExprParser, true, $usedAttributes);\n$phpDocParser = new PhpDocParser($typeParser, $constExprParser, true, true, $usedAttributes);\n```\n\nAfter:\n\n```php\nuse PHPStan\\PhpDocParser\\Lexer\\Lexer;\nuse PHPStan\\PhpDocParser\\ParserConfig;\nuse PHPStan\\PhpDocParser\\Parser\\ConstExprParser;\nuse PHPStan\\PhpDocParser\\Parser\\TypeParser;\nuse PHPStan\\PhpDocParser\\Parser\\PhpDocParser;\n\n$config = new ParserConfig(usedAttributes: ['lines' => true, 'indexes' => true]);\n$lexer = new Lexer($config);\n$constExprParser = new ConstExprParser($config);\n$typeParser = new TypeParser($config, $constExprParser);\n$phpDocParser = new PhpDocParser($config, $typeParser, $constExprParser);\n```\n\nThe point of ParserConfig is that over the course of phpstan/phpdoc-parser 2.x development series it's most likely going to gain new optional parameters akin to PHPStan's [bleeding edge](https://phpstan.org/blog/what-is-bleeding-edge). These parameters will allow opting in to new behaviour which will become the default in 3.0.\n\nWith ParserConfig object, it's now going to be impossible to configure parser classes inconsistently. Which [happened to users](https://github.com/phpstan/phpdoc-parser/issues/251#issuecomment-2333927959) when they were separate boolean values.\n\n### Support for parsing Doctrine annotations\n\nThis parser now supports parsing [Doctrine Annotations](https://github.com/doctrine/annotations). The AST nodes representing Doctrine Annotations live in the [PHPStan\\PhpDocParser\\Ast\\PhpDoc\\Doctrine namespace](https://phpstan.github.io/phpdoc-parser/2.0.x/namespace-PHPStan.PhpDocParser.Ast.PhpDoc.Doctrine.html).\n\n### Whitespace before description is required\n\nphpdoc-parser 1.x sometimes silently consumed invalid part of a PHPDoc type as description:\n\n```php\n/** @return \\Closure(...int, string): string */\n```\n\nThis became `IdentifierTypeNode` of `\\Closure` and with `(...int, string): string` as description. (Valid callable syntax is: `\\Closure(int ...$u, string): string`.)\n\nAnother example:\n\n```php\n/** @return array{foo: int}} */\n```\n\nThe extra `}` also became description.\n\nBoth of these examples are now InvalidTagValueNode.\n\nIf these parts are supposed to be PHPDoc descriptions, you need to put whitespace between the type and the description text:\n\n```php\n/** @return \\Closure (...int, string): string */\n/** @return array{foo: int} } */\n```\n\n### Type aliases with invalid types are preserved\n\nIn phpdoc-parser 1.x, invalid type alias syntax was represented as [`InvalidTagValueNode`](https://phpstan.github.io/phpdoc-parser/2.0.x/PHPStan.PhpDocParser.Ast.PhpDoc.InvalidTagValueNode.html), losing information about a type alias being present.\n\n```php\n/**\n * @phpstan-type TypeAlias\n */\n```\n\nThis `@phpstan-type` is missing the actual type to alias. In phpdoc-parser 2.0 this is now represented as [`TypeAliasTagValueNode`](https://phpstan.github.io/phpdoc-parser/2.0.x/PHPStan.PhpDocParser.Ast.PhpDoc.TypeAliasTagValueNode.html) (instead of `InvalidTagValueNode`) with [`InvalidTypeNode`](https://phpstan.github.io/phpdoc-parser/2.0.x/PHPStan.PhpDocParser.Ast.Type.InvalidTypeNode.html) in place of the type.\n\n### Removal of QuoteAwareConstExprStringNode\n\nThe class [QuoteAwareConstExprStringNode](https://phpstan.github.io/phpdoc-parser/1.23.x/PHPStan.PhpDocParser.Ast.ConstExpr.QuoteAwareConstExprStringNode.html) has been removed.\n\nInstead, [ConstExprStringNode](https://phpstan.github.io/phpdoc-parser/2.0.x/PHPStan.PhpDocParser.Ast.ConstExpr.ConstExprStringNode.html) gained information about the kind of quotes being used.\n\n### Removed 2nd parameter of `ConstExprParser::parse()` (`$trimStrings`)\n\n`ConstExprStringNode::$value` now contains unescaped values without surrounding `''` or `\"\"` quotes.\n\nUse `ConstExprStringNode::__toString()` or [`Printer`](https://phpstan.github.io/phpdoc-parser/2.0.x/PHPStan.PhpDocParser.Printer.Printer.html) to get the escaped value along with surrounding quotes.\n\n### Text between tags always belongs to description\n\nMulti-line descriptions between tags were previously represented as separate [PhpDocTextNode](https://phpstan.github.io/phpdoc-parser/2.0.x/PHPStan.PhpDocParser.Ast.PhpDoc.PhpDocTextNode.html):\n\n```php\n/**\n * @param Foo $foo 1st multi world description\n * some text in the middle\n * @param Bar $bar 2nd multi world description\n */\n```\n\nThe line with `some text in the middle` in phpdoc-parser 2.0 is now part of the description of the first `@param` tag.\n\n### `ArrayShapeNode` construction changes\n\n`ArrayShapeNode` constructor made private, added public static methods `createSealed()` and `createUnsealed()`.\n\n### Minor BC breaks\n\n* Constructor parameter `$isEquality` in `AssertTag*ValueNode` made required\n* Constructor parameter `$templateTypes` in `MethodTagValueNode` made required\n* Constructor parameter `$isReference` in `ParamTagValueNode` made required\n* Constructor parameter `$isReference` in `TypelessParamTagValueNode` made required\n* Constructor parameter `$templateTypes` in `CallableTypeNode` made required\n* Constructor parameters `$expectedTokenValue` and `$currentTokenLine` in `ParserException` made required\n* `ArrayShapeItemNode` and `ObjectShapeItemNode` are not standalone TypeNode, just Node\n"
        },
        {
          "name": "apigen",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-abnfgen.sh",
          "type": "blob",
          "size": 0.529296875,
          "content": "#!/usr/bin/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\nDIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\nROOT_DIR=\"$DIR\"\n\nif [[ ! -d \"$ROOT_DIR/tools/abnfgen\" ]]; then\n\trm -rf \"$ROOT_DIR/temp/abnfgen\"\n\tmkdir -p \"$ROOT_DIR/temp/abnfgen\"\n\n\ttar xf \"$ROOT_DIR/tests/abnfgen-0.20.tar.gz\" \\\n\t\t--directory \"$ROOT_DIR/temp/abnfgen\" \\\n\t\t--strip-components 1\n\n\tcd \"$ROOT_DIR/temp/abnfgen\"\n\t./configure\n\tmake\n\n\tmkdir -p \"$ROOT_DIR/tools/abnfgen\"\n\tmv abnfgen \"$ROOT_DIR/tools/abnfgen\"\n\trm -rf \"$ROOT_DIR/temp/abnfgen\" \"$ROOT_DIR/temp/abnfgen.tar.gz\"\nfi\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.8896484375,
          "content": "{\n\t\"name\": \"phpstan/phpdoc-parser\",\n\t\"description\": \"PHPDoc parser with support for nullable, intersection and generic types\",\n\t\"license\": \"MIT\",\n\t\"require\": {\n\t\t\"php\": \"^7.4 || ^8.0\"\n\t},\n\t\"require-dev\": {\n\t\t\"doctrine/annotations\": \"^2.0\",\n\t\t\"nikic/php-parser\": \"^5.3.0\",\n\t\t\"php-parallel-lint/php-parallel-lint\": \"^1.2\",\n\t\t\"phpstan/extension-installer\": \"^1.0\",\n\t\t\"phpstan/phpstan\": \"^2.0\",\n\t\t\"phpstan/phpstan-phpunit\": \"^2.0\",\n\t\t\"phpstan/phpstan-strict-rules\": \"^2.0\",\n\t\t\"phpunit/phpunit\": \"^9.6\",\n\t\t\"symfony/process\": \"^5.2\"\n\t},\n\t\"config\": {\n\t\t\"platform\": {\n\t\t\t\"php\": \"7.4.6\"\n\t\t},\n\t\t\"sort-packages\": true,\n\t\t\"allow-plugins\": {\n\t\t\t\"phpstan/extension-installer\": true\n\t\t}\n\t},\n\t\"autoload\": {\n\t\t\"psr-4\": {\n\t\t\t\"PHPStan\\\\PhpDocParser\\\\\": [\n\t\t\t\t\"src/\"\n\t\t\t]\n\t\t}\n\t},\n\t\"autoload-dev\": {\n\t\t\"psr-4\": {\n\t\t\t\"PHPStan\\\\PhpDocParser\\\\\": [\n\t\t\t\t\"tests/PHPStan\"\n\t\t\t]\n\t\t}\n\t},\n\t\"minimum-stability\": \"dev\",\n\t\"prefer-stable\": true\n}\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpcs.xml",
          "type": "blob",
          "size": 0.6982421875,
          "content": "<?xml version=\"1.0\"?>\n<ruleset name=\"PHPStan Extensions Coding Standard\">\n\t<config name=\"php_version\" value=\"70200\"/>\n\t<arg name=\"colors\"/>\n\t<arg name=\"extensions\" value=\"php\"/>\n\t<arg name=\"encoding\" value=\"utf-8\"/>\n\t<arg name=\"tab-width\" value=\"4\"/>\n\t<arg name=\"cache\" value=\"tmp/phpcs\"/>\n\t<arg value=\"sp\"/>\n\n\t<rule ref=\"build-cs/phpcs.xml\">\n\t\t<exclude name=\"Squiz.Strings.DoubleQuoteUsage.ContainsVar\"/>\n\t</rule>\n\t<rule ref=\"SlevomatCodingStandard.Files.TypeNameMatchesFileName\">\n\t\t<properties>\n\t\t\t<property name=\"rootNamespaces\" type=\"array\">\n\t\t\t\t<element key=\"src\" value=\"PHPStan\\PhpDocParser\"/>\n\t\t\t\t<element key=\"tests/PHPStan\" value=\"PHPStan\\PhpDocParser\"/>\n\t\t\t</property>\n\t\t</properties>\n\t</rule>\n</ruleset>\n"
        },
        {
          "name": "phpstan-baseline.neon",
          "type": "blob",
          "size": 1.0400390625,
          "content": "parameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: '#^Method PHPStan\\\\PhpDocParser\\\\Ast\\\\ConstExpr\\\\ConstExprStringNode\\:\\:escapeDoubleQuotedString\\(\\) should return string but returns string\\|null\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Ast/ConstExpr/ConstExprStringNode.php\n\n\t\t-\n\t\t\tmessage: '#^Cannot use array destructuring on list\\<array\\<PHPStan\\\\PhpDocParser\\\\Ast\\\\Node\\>\\|int\\|string\\>\\|null\\.$#'\n\t\t\tidentifier: offsetAccess.nonArray\n\t\t\tcount: 1\n\t\t\tpath: src/Ast/NodeTraverser.php\n\n\t\t-\n\t\t\tmessage: '#^Variable property access on PHPStan\\\\PhpDocParser\\\\Ast\\\\Node\\.$#'\n\t\t\tidentifier: property.dynamicName\n\t\t\tcount: 1\n\t\t\tpath: src/Ast/NodeTraverser.php\n\n\t\t-\n\t\t\tmessage: '#^Method PHPStan\\\\PhpDocParser\\\\Parser\\\\StringUnescaper\\:\\:parseEscapeSequences\\(\\) should return string but returns string\\|null\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Parser/StringUnescaper.php\n\n\t\t-\n\t\t\tmessage: '#^Variable property access on PHPStan\\\\PhpDocParser\\\\Ast\\\\Node\\.$#'\n\t\t\tidentifier: property.dynamicName\n\t\t\tcount: 2\n\t\t\tpath: src/Printer/Printer.php\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.3037109375,
          "content": "includes:\n\t- phpstan-baseline.neon\n\nparameters:\n\tpaths:\n\t\t- src\n\t\t- tests\n\texcludePaths:\n\t\t- tests/PHPStan/*/data/*\n\t\t- tests/PHPStan/Parser/Doctrine/ApiResource.php\n\tlevel: 8\n\tignoreErrors:\n\t\t- '#^Dynamic call to static method PHPUnit\\\\Framework\\\\Assert#'\n\t\t-\n\t\t\tidentifier: return.unusedType\n\t\t\tpath: tests/*\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 1.0927734375,
          "content": "<?xml version=\"1.0\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         bootstrap=\"tests/bootstrap.php\"\n         colors=\"true\"\n         backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         beStrictAboutChangesToGlobalState=\"true\"\n         beStrictAboutOutputDuringTests=\"true\"\n         beStrictAboutTestsThatDoNotTestAnything=\"true\"\n         beStrictAboutTodoAnnotatedTests=\"true\"\n         failOnRisky=\"true\"\n         failOnWarning=\"true\"\n         xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xml\"\n>\n    <coverage>\n        <include>\n            <directory suffix=\".php\">./src</directory>\n        </include>\n        <report>\n            <clover outputFile=\"tests/tmp/clover.xml\"/>\n            <text\n                outputFile=\"php://stdout\"\n                showUncoveredFiles=\"true\"\n                showOnlySummary=\"true\"\n            />\n        </report>\n    </coverage>\n\n    <testsuites>\n        <testsuite name=\"PHPStan PHPDoc Parser\">\n            <directory suffix=\"Test.php\">tests</directory>\n        </testsuite>\n    </testsuites>\n\n    <logging/>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tmp",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}