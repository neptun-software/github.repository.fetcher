{
  "metadata": {
    "timestamp": 1736712143915,
    "page": 769,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "immobiliare/ApnsPHP",
      "stars": 1432,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.33984375,
          "content": "# Xcode\nbuild/*\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\n*.xcworkspace\n!default.xcworkspace\nxcuserdata\nprofile\n*.moved-aside\n.DS_Store\nentrust_root_certification_authority.pem\nserver_certificates_bundle_sandbox.pem\n*~\nDoc/Reference/html\n# Composer\ncomposer.lock\nvendor\n"
        },
        {
          "name": "ApnsPHP",
          "type": "tree",
          "content": null
        },
        {
          "name": "Doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.4365234375,
          "content": "Copyright (c) 2010-2011, Aldo Armiento\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of Aldo Armiento nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Objective-C Demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.3818359375,
          "content": "<img src=\"http://immobiliare.github.io/ApnsPHP/images/logo.png\" width=\"48\"> ApnsPHP: Apple Push Notification & Feedback Provider\n==========================\n\n<p align=\"center\">\n\t<img src=\"https://poser.pugx.org/duccio/apns-php/downloads\">\n\t<img src=\"https://poser.pugx.org/duccio/apns-php/d/monthly\">\n\t<img src=\"https://poser.pugx.org/duccio/apns-php/d/daily\">\n\t<img src=\"https://poser.pugx.org/duccio/apns-php/license\">\n</p>\n\nA **full set** of *open source* PHP classes to interact with the **Apple Push Notification service** for the iPhone, iPad and the iPod Touch.\n\n- [Sample PHP Push code](sample_push.php)\n- [Sample PHP Feedback code](sample_feedback.php)\n- [Sample PHP Server code](sample_server.php)\n- [Sample Objective-C device code](Objective-C%20Demo/)\n- [Full APIs Documentation](http://immobiliare.github.io/ApnsPHP/html/index.html)\n- [How to generate a Push Notification certificate and download the Entrust Root Authority certificate](Doc/CertificateCreation.md)\n\nNews\n----\n- **June 1, 2016**, First implementation of the HTTP/2 Protocol, please download [this package](https://github.com/immobiliare/ApnsPHP/releases/tag/v2.0.0-alpha) (please check if you have CURL with HTTP2 support built in your PHP version and generate a new certificate, you cannot use the same as binary version: [Creating a Universal Push Notification Client SSL Certificate](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AddingCapabilities/AddingCapabilities.html#//apple_ref/doc/uid/TP40012582-CH26-SW11)).\n- **September 29, 2015**, Some stats on this README.md, thanks [Badge Poser](https://poser.pugx.org).\n- **May 12, 2015**, ApnsPHP has been moved to the [Immobiliare Labs](https://github.com/immobiliare) organization on github.\n- **May 07, 2015**, ApnsPHP has increased the default payload size to 2048 and is now using the TLS protocol by default instead of the old SSL. News from Apple: https://developer.apple.com/news/?id=10222014a\n- **October 26, 2012**, Project source code has moved to [github](https://github.com/immobiliare/ApnsPHP).\n- **June 18, 2011**, Please, use [ApnsPHP Google Group](https://groups.google.com/group/apns-php) for help requests or to discuss about this project. To report an issue use [Issues](https://github.com/immobiliare/ApnsPHP/issues). Thanks!\n- **December 18, 2010**, Full APNs message support: message body, localized action button, localized message with arguments substitution and custom launch images.\n- **December 15, 2010**, Committed the first version of the Objective-C Demo Project with not-running, running in foreground and running in background application state support.\n- **December 14, 2010**, Added the support for multiple Custom Property.\n- **August 28, 2010**, Added support for the new APNs enhanced format that addresses some of the issues with the simple format: *Notification expiry* and *Error response*.\n- **February 28, 2010**, ApnsPHP Source Code is now available.\n \nPackagist\n-------\n\nhttps://packagist.org/packages/duccio/apns-php\n\nThanks @jbender!\n\n\nArchitecture\n-------\n\n- **Autoload system**, explicitly include only Autoload.php and all classes are loaded on-demand.\n- **Message class**, to build a notification payload.\n- **Push class**, to push one or more messages to Apple Push Notification service.\n- **Feedback class**, to query the Apple Feedback service to get the list of broken device tokens.\n- **Push Server class**, to create a Push Server with one or more (forked) processes reading from a common message queue.\n- **Log class/interface**, to log to standard output or for custom logging purpose.\n- **Objective-C Demo Project** with not-running, running in foreground and running in background application state support.\n\nClasses hierarchy\n------------\n\n![](http://immobiliare.github.io/ApnsPHP/images/classes1.png)\n![](http://immobiliare.github.io/ApnsPHP/images/classes2.png)\n![](http://immobiliare.github.io/ApnsPHP/images/classes3.png)\n\n\nDetails\n---------\n\nIn the Apple Push Notification Binary protocol there isn't a real-time feedback about the correctness of notifications pushed to the server. So, after each write to the server, the Push class waits for the \"read stream\" to change its status (or at least N microseconds); if it happened and the client socket receives an \"end-of-file\" from the server, the notification pushed to the server was broken, the Apple server has closed the connection and the client needs to reconnect to send other notifications still on the message queue.\n\nTo speed-up the sending activities the Push Server class can be used to create a Push Notification Server with many processes that reads a common message queue and sends parallel Push Notifications.\n\nAll client-server activities are based on the \"on error, retry\" pattern with customizable timeouts, retry times and retry intervals.\n\nRequirements\n-------------\n\nPHP 5.3.0 or later with OpenSSL, PCNTL, System V shared memory and semaphore support.\n\n```\n./configure --with-openssl[=PATH] --enable-pcntl --enable-sysvshm --enable-sysvsem\n```\n\nIf you plan to use only Push and Feedback provider without the Server part you need only OpenSSL (no PCNTL, System V shared memory or semaphore):\n\n```\n./configure --with-openssl[=PATH]\n```\n\n*Usually OpenSSL is built-in in standard PHP Linux distributions packages. \nStandard PHP 5.3.0 shipped with Mac OS X Snow Leopard just works.*\n\nPlease...\n---------\n... drop a line if you use ApnsPHP for your published application on the App Store! Thanks :-)\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.3671875,
          "content": "{\n\t\"name\": \"duccio/apns-php\",\n\t\"type\": \"library\",\n\t\"description\": \"Apple Push Notification & Feedback Provider\",\n\t\"keywords\": [\"APNS\", \"apple\", \"push\", \"notification\"],\n\t\"homepage\": \"https://github.com/immobiliare/ApnsPHP\",\n\t\"license\": \"BSD-3-Clause\",\n\t\"require\": {\n\t\t\"php\": \">=5.3.0\",\n\t\t\"lib-openssl\": \"*\"\n\t},\n\t\"autoload\": {\n        \"files\": [\"ApnsPHP/Autoload.php\"]\n    }\n}\n"
        },
        {
          "name": "sample_feedback.php",
          "type": "blob",
          "size": 1.203125,
          "content": "<?php\n/**\n * @file\n * sample_feedback.php\n *\n * Feedback demo\n *\n * LICENSE\n *\n * This source file is subject to the new BSD license that is bundled\n * with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://code.google.com/p/apns-php/wiki/License\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to aldo.armiento@gmail.com so we can send you a copy immediately.\n *\n * @author (C) 2010 Aldo Armiento (aldo.armiento@gmail.com)\n * @version $Id$\n */\n\n// Adjust to your timezone\ndate_default_timezone_set('Europe/Rome');\n\n// Report all PHP errors\nerror_reporting(-1);\n\n// Using Autoload all classes are loaded on-demand\nrequire_once 'ApnsPHP/Autoload.php';\n\n// Instanciate a new ApnsPHP_Feedback object\n$feedback = new ApnsPHP_Feedback(\n\tApnsPHP_Abstract::ENVIRONMENT_SANDBOX,\n\t'server_certificates_bundle_sandbox.pem'\n);\n\n// Connect to the Apple Push Notification Feedback Service\n$feedback->connect();\n\n$aDeviceTokens = $feedback->receive();\nif (!empty($aDeviceTokens)) {\n\tvar_dump($aDeviceTokens);\n}\n\n// Disconnect from the Apple Push Notification Feedback Service\n$feedback->disconnect();\n"
        },
        {
          "name": "sample_push.php",
          "type": "blob",
          "size": 2.322265625,
          "content": "<?php\n/**\n * @file\n * sample_push.php\n *\n * Push demo\n *\n * LICENSE\n *\n * This source file is subject to the new BSD license that is bundled\n * with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://code.google.com/p/apns-php/wiki/License\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to aldo.armiento@gmail.com so we can send you a copy immediately.\n *\n * @author (C) 2010 Aldo Armiento (aldo.armiento@gmail.com)\n * @version $Id$\n */\n\n// Adjust to your timezone\ndate_default_timezone_set('Europe/Rome');\n\n// Report all PHP errors\nerror_reporting(-1);\n\n// Using Autoload all classes are loaded on-demand\nrequire_once 'ApnsPHP/Autoload.php';\n\n// Instantiate a new ApnsPHP_Push object\n$push = new ApnsPHP_Push(\n\tApnsPHP_Abstract::ENVIRONMENT_SANDBOX,\n\t'server_certificates_bundle_sandbox.pem'\n);\n\n// Set the Provider Certificate passphrase\n// $push->setProviderCertificatePassphrase('test');\n\n// Set the Root Certificate Autority to verify the Apple remote peer\n$push->setRootCertificationAuthority('entrust_root_certification_authority.pem');\n\n// Connect to the Apple Push Notification Service\n$push->connect();\n\n// Instantiate a new Message with a single recipient\n$message = new ApnsPHP_Message('1e82db91c7ceddd72bf33d74ae052ac9c84a065b35148ac401388843106a7485');\n\n// Set a custom identifier. To get back this identifier use the getCustomIdentifier() method\n// over a ApnsPHP_Message object retrieved with the getErrors() message.\n$message->setCustomIdentifier(\"Message-Badge-3\");\n\n// Set badge icon to \"3\"\n$message->setBadge(3);\n\n// Set a simple welcome text\n$message->setText('Hello APNs-enabled device!');\n\n// Play the default sound\n$message->setSound();\n\n// Set a custom property\n$message->setCustomProperty('acme2', array('bang', 'whiz'));\n\n// Set another custom property\n$message->setCustomProperty('acme3', array('bing', 'bong'));\n\n// Set the expiry value to 30 seconds\n$message->setExpiry(30);\n\n// Add the message to the message queue\n$push->add($message);\n\n// Send all messages in the message queue\n$push->send();\n\n// Disconnect from the Apple Push Notification Service\n$push->disconnect();\n\n// Examine the error message container\n$aErrorQueue = $push->getErrors();\nif (!empty($aErrorQueue)) {\n\tvar_dump($aErrorQueue);\n}\n"
        },
        {
          "name": "sample_push_custom.php",
          "type": "blob",
          "size": 2.60546875,
          "content": "<?php\n/**\n * @file\n * sample_push_custom.php\n *\n * Custom Push demo\n *\n * LICENSE\n *\n * This source file is subject to the new BSD license that is bundled\n * with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://code.google.com/p/apns-php/wiki/License\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to aldo.armiento@gmail.com so we can send you a copy immediately.\n *\n * @author (C) 2010 Aldo Armiento (aldo.armiento@gmail.com)\n * @version $Id$\n */\n\n// Adjust to your timezone\ndate_default_timezone_set('Europe/Rome');\n\n// Report all PHP errors\nerror_reporting(-1);\n\n// Using Autoload all classes are loaded on-demand\nrequire_once 'ApnsPHP/Autoload.php';\n\n// Instanciate a new ApnsPHP_Push object\n$push = new ApnsPHP_Push(\n\tApnsPHP_Abstract::ENVIRONMENT_SANDBOX,\n\t'server_certificates_bundle_sandbox.pem'\n);\n\n// Set the Root Certificate Autority to verify the Apple remote peer\n$push->setRootCertificationAuthority('entrust_root_certification_authority.pem');\n\n// Connect to the Apple Push Notification Service\n$push->connect();\n\n// Instantiate a new Message with a single recipient\n$message = new ApnsPHP_Message_Custom('1e82db91c7ceddd72bf33d74ae052ac9c84a065b35148ac401388843106a7485');\n\n// Set a custom identifier. To get back this identifier use the getCustomIdentifier() method\n// over a ApnsPHP_Message object retrieved with the getErrors() message.\n$message->setCustomIdentifier(\"Message-Badge-3\");\n\n// Set badge icon to \"3\"\n$message->setBadge(3);\n\n// Set a simple welcome text\n$message->setText('Hello APNs-enabled device!');\n\n// Play the default sound\n$message->setSound();\n\n// Set a custom property\n$message->setCustomProperty('acme2', array('bang', 'whiz'));\n\n// Set the expiry value to 30 seconds\n$message->setExpiry(30);\n\n// Set the \"View\" button title.\n$message->setActionLocKey('Show me!');\n\n// Set the alert-message string and variable string values to appear in place of the format specifiers.\n$message->setLocKey('Hello %1$@, you have %2$@ new messages!'); // This will overwrite the text specified with setText() method.\n$message->setLocArgs(array('Steve', 5));\n\n// Set the filename of an image file in the application bundle.\n$message->setLaunchImage('DefaultAlert.png');\n\n// Add the message to the message queue\n$push->add($message);\n\n// Send all messages in the message queue\n$push->send();\n\n// Disconnect from the Apple Push Notification Service\n$push->disconnect();\n\n// Examine the error message container\n$aErrorQueue = $push->getErrors();\nif (!empty($aErrorQueue)) {\n\tvar_dump($aErrorQueue);\n}\n"
        },
        {
          "name": "sample_push_many.php",
          "type": "blob",
          "size": 2.3388671875,
          "content": "<?php\n/**\n * @file\n * sample_push.php\n *\n * Push demo\n *\n * LICENSE\n *\n * This source file is subject to the new BSD license that is bundled\n * with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://code.google.com/p/apns-php/wiki/License\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to aldo.armiento@gmail.com so we can send you a copy immediately.\n *\n * @author (C) 2010 Aldo Armiento (aldo.armiento@gmail.com)\n * @version $Id$\n */\n\ndefine('VALID_TOKEN', '1e82db91c7ceddd72bf33d74ae052ac9c84a065b35148ac401388843106a7485');\ndefine('INVALID_TOKEN', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n\n// Adjust to your timezone\ndate_default_timezone_set('Europe/Rome');\n\n// Report all PHP errors\nerror_reporting(-1);\n\n// Using Autoload all classes are loaded on-demand\nrequire_once 'ApnsPHP/Autoload.php';\n\n// Instanciate a new ApnsPHP_Push object\n$push = new ApnsPHP_Push(\n\tApnsPHP_Abstract::ENVIRONMENT_SANDBOX,\n\t'server_certificates_bundle_sandbox.pem'\n);\n\n// Set the Root Certificate Autority to verify the Apple remote peer\n$push->setRootCertificationAuthority('entrust_root_certification_authority.pem');\n\n// Increase write interval to 100ms (default value is 10ms).\n// This is an example value, the 10ms default value is OK in most cases.\n// To speed up the sending operations, use Zero as parameter but\n// some messages may be lost.\n// $push->setWriteInterval(100 * 1000);\n\n// Connect to the Apple Push Notification Service\n$push->connect();\n\nfor ($i = 1; $i <= 10; $i++) {\n\t// Instantiate a new Message with a single recipient\n\t$message = new ApnsPHP_Message($i == 5 ? INVALID_TOKEN : VALID_TOKEN);\n\n\t// Set a custom identifier. To get back this identifier use the getCustomIdentifier() method\n\t// over a ApnsPHP_Message object retrieved with the getErrors() message.\n\t$message->setCustomIdentifier(sprintf(\"Message-Badge-%03d\", $i));\n\n\t// Set badge icon to \"3\"\n\t$message->setBadge($i);\n\n\t// Add the message to the message queue\n\t$push->add($message);\n}\n\n// Send all messages in the message queue\n$push->send();\n\n// Disconnect from the Apple Push Notification Service\n$push->disconnect();\n\n// Examine the error message container\n$aErrorQueue = $push->getErrors();\nif (!empty($aErrorQueue)) {\n\tvar_dump($aErrorQueue);\n}\n"
        },
        {
          "name": "sample_push_safari.php",
          "type": "blob",
          "size": 2.306640625,
          "content": "<?php\n/**\n * @file\n * sample_push_safari.php\n *\n * Safari push demo.\n *\n * LICENSE\n *\n * This source file is subject to the new BSD license that is bundled\n * with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://code.google.com/p/apns-php/wiki/License\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to aldo.armiento@gmail.com so we can send you a copy immediately.\n *\n * @author (C) 2017 Marco Rocca (marco.rocca@delitestudio.com)\n * @version $Id$\n */\n\n// Adjust to your timezone\ndate_default_timezone_set('Europe/Rome');\n\n// Report all PHP errors\nerror_reporting(-1);\n\n// Using Autoload all classes are loaded on-demand\nrequire_once 'ApnsPHP/Autoload.php';\n\n// Instantiate a new ApnsPHP_Push object\n$push = new ApnsPHP_Push(\n\tApnsPHP_Abstract::ENVIRONMENT_SANDBOX,\n\t'server_certificates_bundle_sandbox.pem'\n);\n\n// Set the Provider Certificate passphrase\n// $push->setProviderCertificatePassphrase('test');\n\n// Set the Root Certificate Autority to verify the Apple remote peer\n$push->setRootCertificationAuthority('entrust_root_certification_authority.pem');\n\n// Connect to the Apple Push Notification Service\n$push->connect();\n\n// Instantiate a new Safari message with a single recipient\n$message = new ApnsPHP_Message_Safari('1e82db91c7ceddd72bf33d74ae052ac9c84a065b35148ac401388843106a7485');\n\n// Set the title of the notification.\n$message->setTitle('Flight A998 Now Boarding');\n\n// Set the body of the notification.\n$message->setText('Boarding has begun for Flight A998.');\n\n// Set the label of the action button, if the user sets the notifications to appear as alerts.\n// This label should be succinct, such as \"Details\" or \"Read more\". If omitted, the default value is \"Show\".\n$message->setAction('View');\n\n// Set an array of values that are paired with the placeholders inside the urlFormatString value of your website.json file\n$message->setUrlArgs(array('boarding', 'A998'));\n\n// Add the message to the message queue\n$push->add($message);\n\n// Send all messages in the message queue\n$push->send();\n\n// Disconnect from the Apple Push Notification Service\n$push->disconnect();\n\n// Examine the error message container\n$aErrorQueue = $push->getErrors();\nif (!empty($aErrorQueue)) {\n\tvar_dump($aErrorQueue);\n}\n"
        },
        {
          "name": "sample_server.php",
          "type": "blob",
          "size": 1.7978515625,
          "content": "<?php\n/**\n * @file\n * sample_server.php\n *\n * Push server demo\n *\n * LICENSE\n *\n * This source file is subject to the new BSD license that is bundled\n * with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://code.google.com/p/apns-php/wiki/License\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to aldo.armiento@gmail.com so we can send you a copy immediately.\n *\n * @author (C) 2010 Aldo Armiento (aldo.armiento@gmail.com)\n * @version $Id$\n */\n\n// Adjust to your timezone\ndate_default_timezone_set('Europe/Rome');\n\n// Report all PHP errors\nerror_reporting(-1);\n\n// Using Autoload all classes are loaded on-demand\nrequire_once 'ApnsPHP/Autoload.php';\n\n// Instanciate a new ApnsPHP_Push object\n$server = new ApnsPHP_Push_Server(\n\tApnsPHP_Abstract::ENVIRONMENT_SANDBOX,\n\t'server_certificates_bundle_sandbox.pem'\n);\n\n// Set the Root Certificate Autority to verify the Apple remote peer\n$server->setRootCertificationAuthority('entrust_root_certification_authority.pem');\n\n// Set the number of concurrent processes\n$server->setProcesses(2);\n\n// Starts the server forking the new processes\n$server->start();\n\n// Main loop...\n$i = 1;\nwhile ($server->run()) {\n\n\t// Check the error queue\n\t$aErrorQueue = $server->getErrors();\n\tif (!empty($aErrorQueue)) {\n\t\t// Do somethings with this error messages...\n\t\tvar_dump($aErrorQueue);\n\t}\n\n\t// Send 10 messages\n\tif ($i <= 10) {\n\t\t// Instantiate a new Message with a single recipient\n\t\t$message = new ApnsPHP_Message('1e82db91c7ceddd72bf33d74ae052ac9c84a065b35148ac401388843106a7485');\n\n\t\t// Set badge icon to \"i\"\n\t\t$message->setBadge($i);\n\n\t\t// Add the message to the message queue\n\t\t$server->add($message);\n\n\t\t$i++;\n\t}\n\n\t// Sleep a little...\n\tusleep(200000);\n}\n"
        }
      ]
    }
  ]
}