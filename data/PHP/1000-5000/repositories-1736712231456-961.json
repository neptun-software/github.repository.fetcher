{
  "metadata": {
    "timestamp": 1736712231456,
    "page": 961,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gumlet/php-image-resize",
      "stars": 1191,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.02734375,
          "content": ".idea\r\nvendor\r\ncomposer.lock"
        },
        {
          "name": "Licence.md",
          "type": "blob",
          "size": 1.0517578125,
          "content": "MIT License\n\nCopyright (c) 2018 Turing Analytics LLP\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.5986328125,
          "content": "php-image-resize\n================\n\nPHP library to resize, scale and crop images.\n\n![Build Status](https://github.com/gumlet/php-image-resize/workflows/PHP%20CI/badge.svg) [![Latest Stable Version](https://poser.pugx.org/gumlet/php-image-resize/v/stable)](https://packagist.org/packages/gumlet/php-image-resize) [![Monthly Downloads](https://poser.pugx.org/gumlet/php-image-resize/d/monthly)](https://packagist.org/packages/gumlet/php-image-resize) [![Coverage Status](https://coveralls.io/repos/github/gumlet/php-image-resize/badge.svg?branch=master)](https://coveralls.io/github/gumlet/php-image-resize?branch=master)\n\nCloud Solution\n---------------\n\nIf you don't want to crop, resize and store images on your server, <a href=\"https://www.gumlet.com\" target=\"_blank\">Gumlet.com</a> is a **free** service which can process images in real-time and serve worldwide through CDN.\n\n------------------\n\nSetup\n-----\n\nThis package is available through Packagist with the vendor and package identifier the same as this repo.\n\nIf using [Composer](https://getcomposer.org/), in your `composer.json` file add:\n\n```json\n{\n    \"require\": {\n        \"gumlet/php-image-resize\": \"2.0.*\"\n    }\n}\n```\n\nIf you are still using PHP 5.3, please install version ```1.7.0``` and if you are using PHP 5.4, please install version ```1.8.0``` of this library.\n\nWebP support is added with PHP `5.6.0` and current version of library supports that. If you are facing issues, please use `1.9.2` version of this library.\n\nFor PHP versions >= 7.2, `2.0.1` or above version of this library should be used.\n\nOtherwise:\n\n```php\ninclude '/path/to/ImageResize.php';\n```\n\nBecause this class uses namespacing, when instantiating the object, you need to either use the fully qualified namespace:\n\n```php\n$image = new \\Gumlet\\ImageResize();\n```\n\nOr alias it:\n\n```php\n\nuse \\Gumlet\\ImageResize;\n\n$image = new ImageResize();\n```\n\n> Note: This library uses GD class which do not support resizing animated gif files\n\n------------------\n\nResize\n------\n\nTo scale an image, in this case to half it's size (scaling is percentage based):\n\n```php\n$image = new ImageResize('image.jpg');\n$image->scale(50);\n$image->save('image2.jpg');\n```\n\nTo resize an image according to one dimension (keeping aspect ratio):\n\n```php\n$image = new ImageResize('image.jpg');\n$image->resizeToHeight(500);\n$image->save('image2.jpg');\n\n$image = new ImageResize('image.jpg');\n$image->resizeToWidth(300);\n$image->save('image2.jpg');\n```\n\nTo resize an image according to a given measure regardingless its orientation (keeping aspect ratio):\n\n```php\n$image = new ImageResize('image.jpg');\n$image->resizeToLongSide(500);\n$image->save('image2.jpg');\n\n$image = new ImageResize('image.jpg');\n$image->resizeToShortSide(300);\n$image->save('image2.jpg');\n```\n\nTo resize an image to best fit a given set of dimensions (keeping aspet ratio):\n```php\n$image = new ImageResize('image.jpg');\n$image->resizeToBestFit(500, 300);\n$image->save('image2.jpg');\n```\n\nAll resize functions have ```$allow_enlarge``` option which is set to false by default.\nYou can enable by passing ```true``` to any resize function:\n```php\n$image = new ImageResize('image.jpg');\n$image->resize(500, 300, $allow_enlarge = True);\n$image->save('image2.jpg');\n```\n\nIf you are happy to handle aspect ratios yourself, you can resize directly:\n\n```php\n$image = new ImageResize('image.jpg');\n$image->resize(800, 600);\n$image->save('image2.jpg');\n```\n\nThis will cause your image to skew if you do not use the same width/height ratio as the source image.\n\nCrop\n----\n\nTo to crop an image:\n\n```php\n$image = new ImageResize('image.jpg');\n$image->crop(200, 200);\n$image->save('image2.jpg');\n```\n\nThis will scale the image to as close as it can to the passed dimensions, and then crop and center the rest.\n\nIn the case of the example above, an image of 400px &times; 600px will be resized down to 200px &times; 300px, and then 50px will be taken off the top and bottom, leaving you with 200px &times; 200px.\n\nCrop modes:\n\nFew crop mode options are available in order for you to choose how you want to handle the eventual exceeding width or height after resizing down your image.\nThe default crop mode used is the `CROPCENTER`.\nAs a result those pieces of code are equivalent:\n\n```php\n$image = new ImageResize('image.jpg');\n$image->crop(200, 200);\n$image->save('image2.jpg');\n```\n\n```php\n$image = new ImageResize('image.jpg');\n$image->crop(200, 200, true, ImageResize::CROPCENTER);\n$image->save('image2.jpg');\n```\n\nIn the case you have an image of 400px &times; 600px and you want to crop it to 200px &times; 200px the image will be resized down to 200px &times; 300px, then you can indicate how you want to handle those 100px exceeding passing the value of the crop mode you want to use.\n\nFor instance passing the crop mode `CROPTOP` will result as 100px taken off the bottom leaving you with 200px &times; 200px.\n\n\n```php\n$image = new ImageResize('image.jpg');\n$image->crop(200, 200, true, ImageResize::CROPTOP);\n$image->save('image2.jpg');\n```\n\nOn the contrary passing the crop mode `CROPBOTTOM` will result as 100px taken off the top leaving you with 200px &times; 200px.\n\n```php\n$image = new ImageResize('image.jpg');\n$image->crop(200, 200, true, ImageResize::CROPBOTTOM);\n$image->save('image2.jpg');\n```\n\nFreecrop:\n\nThere is also a way to define custom crop position.\nYou can define $x and $y in ```freecrop``` method:\n\n```php\n$image = new ImageResize('image.jpg');\n$image->freecrop(200, 200, $x =  20, $y = 20);\n$image->save('image2.jpg');\n```\n\nLoading and saving images from string\n-------------------------------------\n\nTo load an image from a string:\n\n```php\n$image = ImageResize::createFromString(base64_decode('R0lGODlhAQABAIAAAAQCBP///yH5BAEAAAEALAAAAAABAAEAAAICRAEAOw=='));\n$image->scale(50);\n$image->save('image.jpg');\n```\n\nYou can also return the result as a string:\n\n```php\n$image = ImageResize::createFromString(base64_decode('R0lGODlhAQABAIAAAAQCBP///yH5BAEAAAEALAAAAAABAAEAAAICRAEAOw=='));\n$image->scale(50);\necho $image->getImageAsString();\n```\n\nMagic `__toString()` is also supported:\n\n```php\n$image = ImageResize::createFromString(base64_decode('R0lGODlhAQABAIAAAAQCBP///yH5BAEAAAEALAAAAAABAAEAAAICRAEAOw=='));\n$image->resize(10, 10);\necho (string)$image;\n```\n\nDisplaying\n----------\n\nAs seen above, you can call `$image->save('image.jpg');`\n\nTo render the image directly into the browser, you can call `$image->output()`;\n\nImage Types\n-----------\n\nWhen saving to disk or outputting into the browser, the script assumes the same output type as input.\n\nIf you would like to save/output in a different image type, you need to pass a (supported) PHP [`IMAGETYPE_`* constant](http://www.php.net/manual/en/image.constants.php):\n\n- `IMAGETYPE_GIF`\n- `IMAGETYPE_JPEG`\n- `IMAGETYPE_PNG`\n\nThis allows you to save in a different type to the source:\n\n```php\n$image = new ImageResize('image.jpg');\n$image->resize(800, 600);\n$image->save('image.png', IMAGETYPE_PNG);\n```\n\nQuality\n-------\n\nThe properties `$quality_jpg`, `$quality_webp` and `$quality_png` are available for you to configure:\n\n```php\n$image = new ImageResize('image.jpg');\n$image->quality_jpg = 100;\n$image->resize(800, 600);\n$image->save('image2.jpg');\n```\n\nBy default they are set to 85 and 6 respectively. See the manual entries for [`imagejpeg()`](http://www.php.net/manual/en/function.imagejpeg.php) and [`imagepng()`](http://www.php.net/manual/en/function.imagepng.php) for more info.\n\nYou can also pass the quality directly to the `save()`, `output()` and `getImageAsString()` methods:\n\n```php\n$image = new ImageResize('image.jpg');\n$image->crop(200, 200);\n$image->save('image2.jpg', null, 100);\n\n$image = new ImageResize('image.jpg');\n$image->resizeToWidth(300);\n$image->output(IMAGETYPE_PNG, 4);\n\n$image = new ImageResize('image.jpg');\n$image->scale(50);\n$result = $image->getImageAsString(IMAGETYPE_PNG, 4);\n```\n\nWe're passing `null` for the image type in the example above to skip over it and provide the quality. In this case, the image type is assumed to be the same as the input.\n\nInterlacing\n-----------\n\nBy default, [image interlacing](http://php.net/manual/en/function.imageinterlace.php) is turned on. It can be disabled by setting `$interlace` to `0`:\n\n```php\n$image = new ImageResize('image.jpg');\n$image->scale(50);\n$image->interlace = 0;\n$image->save('image2.jpg');\n```\n\nChaining\n--------\n\nWhen performing operations, the original image is retained, so that you can chain operations without excessive destruction.\n\nThis is useful for creating multiple sizes:\n\n```php\n$image = new ImageResize('image.jpg');\n$image\n    ->scale(50)\n    ->save('image2.jpg')\n\n    ->resizeToWidth(300)\n    ->save('image3.jpg')\n\n    ->crop(100, 100)\n    ->save('image4.jpg')\n;\n```\n\nExceptions\n--------\n\nImageResize throws ImageResizeException for it's own for errors. You can catch that or catch the general \\Exception which it's extending.\n\nIt is not to be expected, but should anything go horribly wrong mid way then notice or warning Errors could be shown from the PHP GD and Image Functions (http://php.net/manual/en/ref.image.php)\n\n```php\ntry{\n    $image = new ImageResize(null);\n    echo \"This line will not be printed\";\n} catch (ImageResizeException $e) {\n    echo \"Something went wrong\" . $e->getMessage();\n}\n```\n\nFilters\n--------\n\nYou can apply special effects for new image like blur or add banner.\n\n```php\n$image = new ImageResize('image.jpg');\n\n// Add blure\n$image->addFilter(function ($imageDesc) {\n    imagefilter($imageDesc, IMG_FILTER_GAUSSIAN_BLUR);\n});\n\n// Add banner on bottom left corner\n$image18Plus = 'banner.png'\n$image->addFilter(function ($imageDesc) use ($image18Plus) {\n    $logo = imagecreatefrompng($image18Plus);\n    $logo_width = imagesx($logo);\n    $logo_height = imagesy($logo);\n    $image_width = imagesx($imageDesc);\n    $image_height = imagesy($imageDesc);\n    $image_x = $image_width - $logo_width - 10;\n    $image_y = $image_height - $logo_height - 10;\n    imagecopy($imageDesc, $logo, $image_x, $image_y, 0, 0, $logo_width, $logo_height);\n});\n\n```\n\nFlip\n--------\n\nFlips an image using a given mode and this method is only for PHP version 5.4.\n\n```php\n$flip = new ImageResize('image.png');\n$image = imagecreatetruecolor(200, 100);\n\n$image->addFilter(function ($image) {\n    imageflip($image, IMG_FLIP_HORIZONTAL);\n});\n\n```\n\nBoth functions will be used in the order in which they were added.\n\nGamma color correction\n--------\n\nYou can enable the gamma color correction which is disabled by default.\n\n```php\n$image = new ImageResize('image.png');\n$image->gamma(true);\n```\n\nAPI Doc\n-------\n\nhttps://gumlet.github.io/php-image-resize/index.html\n\n------------------\n\nMaintainer\n----------\n\nThis library is maintained by <a href=\"https://www.gumlet.com\" target=\"_blank\">Gumlet.com</a>\n\n[<img src=\"https://assets.gumlet.com/public/img/logo.png\" width=\"300px\">](https://www.gumlet.com)\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.9248046875,
          "content": "{\n    \"name\": \"gumlet/php-image-resize\",\n    \"description\": \"PHP class to re-size and scale images\",\n    \"keywords\": [\"php\", \"image\", \"resize\", \"scale\"],\n    \"type\": \"library\",\n    \"homepage\": \"https://github.com/gumlet/php-image-resize\",\n    \"license\": \"MIT\",\n    \"authors\": [\n    {\n        \"name\": \"Aditya Patadia\",\n        \"homepage\": \"http://aditya.patadia.org/\"\n    }],\n    \"require\":\n    {\n        \"php\": \">=5.6.0\",\n        \"ext-gd\": \"*\",\n        \"ext-fileinfo\": \"*\"\n    },\n    \"suggest\":\n    {\n        \"ext-exif\": \"Auto-rotate jpeg files\"\n    },\n    \"autoload\":\n    {\n        \"psr-4\":\n        {\n            \"Gumlet\\\\\": \"lib/\"\n        }\n    },\n    \"autoload-dev\":\n    {\n        \"psr-4\":\n        {\n            \"Gumlet\\\\\": \"test/\"\n        }\n    },\n    \"require-dev\":\n    {\n        \"phpunit/phpunit\": \"^8.5\",\n        \"apigen/apigen\": \"^4.1\",\n        \"php-coveralls/php-coveralls\": \"^2.1\",\n        \"ext-exif\": \"*\",\n        \"ext-gd\": \"*\"\n    }\n}\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.46875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit bootstrap=\"vendor/autoload.php\" colors=\"true\" backupGlobals=\"false\" \n         backupStaticAttributes=\"false\">\n    <testsuites>\n        <testsuite name=\"Tests\">\n            <directory suffix=\"Test.php\">test</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist processUncoveredFilesFromWhitelist=\"false\">\n            <directory suffix=\".php\">lib</directory>\n        </whitelist>\n    </filter>\n</phpunit>\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}