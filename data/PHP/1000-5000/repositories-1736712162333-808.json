{
  "metadata": {
    "timestamp": 1736712162333,
    "page": 808,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "m9rco/algorithm-php",
      "stars": 1390,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0361328125,
          "content": ".idea/\n.DS_Store\ncomposer.lock\nvendor"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1376953125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at 542684913@qq.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.9970703125,
          "content": "What does “open source” mean?\n\nWhen a project is open source, that means anybody can view, use, modify, and distribute your project for any purpose. These permissions are enforced through an open source license.\n\nOpen source is powerful because it lowers the barriers to adoption, allowing ideas to spread quickly.\n\nTo understand how it works, imagine your friend is having a potluck, and you bring a cherry pie.\n\nEverybody tries the pie (use)\nThe pie is a hit! They ask you for the recipe, which you provide (view)\nOne friend, Alex, who’s a pastry chef, suggests reducing the sugar (modify)\nAnother friend, Lisa, asks to use it for a dinner next week (distribute)\nBy comparison, a closed source process would be going to a restaurant and ordering a slice of cherry pie. You must pay a fee to eat the pie, and the restaurant probably won’t give you their recipe. If you copied their pie exactly and sold it under your own name, the restaurant could take action against you.\n\nWhy do people open source their work?\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2017 Shaowei pu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README-EN.md",
          "type": "blob",
          "size": 7.431640625,
          "content": "​<h1 align=\"center\">:whale:A collection of algorithms that are implemented in PHP:whale: </h1>\n\n<p align=\"center\">\n<a href=\"https://github.com/PuShaoWei/arithmetic-php#简易结构\">\n  <img src=\"https://img.shields.io/badge/php-done-brightgreen.svg\" alt=\"php\">\n</a>\n<a href=\"https://github.com/PuShaoWei/arithmetic-php\">\n    <img src=\"https://img.shields.io/github/issues-pr-raw/arithmetic-php/cdnjs.svg\">\n</a>\n<a href=\"https://github.com/PuShaoWei/arithmetic-php\">\n    <img src=\"https://img.shields.io/codacy/grade/e27821fb6289410b8f58338c7e0bc686.svg\">\n</a>\n<a href=\"https://github.com/PuShaoWei/arithmetic-php\">\n    <img src=\"https://img.shields.io/travis/rust-lang/rust.svg\">\n</a>\n<a href=\"https://github.com/PuShaoWei/arithmetic-php\">\n    <img src=\"https://img.shields.io/github/license/mashape/apistatus.svg\">\n</a>\n</p>\n\n<p align=\"center\"> <a href=\"./README.md\">中文版</a>　<p>\n\n## Simple structure,\n\n```\n├──Package\n│    ├── Sort  \n│    │    ├── BubbleSort.php          \n│    │    ├── QuickSort.php           \n│    │    ├── ShellSort.php           \n│    │    ├── MergeSort.php           \n│    │    ├── InsertSort.php          \n│    │    └── SelectSort.php          \n│    │ \n│    ├── Query 查找篇\n│    │    ├── BinaryQuery.php         \n│    │    ├── InseertQuery.php        \n│    │    ├── FibonacciQuery.php      \n│    │    ├── BFSQuery.php      \n│    │    ├── Kmp.php                 \n│    │    ├── DijkstraQuery.php      \n│    │    └── QulickQuery.php         \n│    │     \n│    └── Other 其他 \n│         ├──  MonkeyKing.php         \n│         ├──  DynamicProgramming.php \n│         ├──  Fibonacci.php          \n│         ├──  StealingApples.php     \n│         ├──  HanoiGames.php       \n│         ├──  BidirectionalQueue.php     \n│         ├──  ColorBricks.php        \n│         ├──  GetCattle.php          \n│         ├──  OnlyNumbers.php        \n│         ├──  Interval.php        \n│         ├──  Maze.php        \n│         ├──  AntsClimb.php        \n│         ├──  Encryption.php        \n│         ├──  ElevatorDispatch.php      \n│         ├──  kmp.php      \n│         ├──  TraversalOfBinary.php      \n│         ├──  PointInTriangle.php      \n│         └──  BigSmallReplace.php    \n│         └──  Knapsack.php    \n│         └──  Solution.php    \n│         └──  RotationSort.php    \n│         └──  Square.php    \n│         └──  Prim.php    \n│         └──  CartesianProduct.php \n│         └──  Square.php \n│         └──  Judge.php \n│         └──  Factorial.php \n|         └──  HashTable.php\n|         └──  RotateSort.php  \n│     \n├──LICENSE \n└──README.md\n```\n\n## What to do？\n\n```\nTo record their understanding algorithms, data structure, the process of simple comprehensive and detailed as possible, let the learning algorithm using flexible, refueling(ง •̀_•́)ง\n```\n\n## logarithmic\n\nlog<sub>10</sub>100 It's equivalent to saying, \"how many tens do you multiply?\" the answer is, of course, two\nso log<sub>10</sub>100=2，The logarithmic operation is the inverse of the power operation\n\n| left               | right                 |\n| ------------------ | --------------------- |\n| 2<sup>3</sup> = 8  | log<sub>2</sub>8 = 3  |\n| 2<sup>4</sup> = 16 | log<sub>2</sub>16 = 4 |\n| 2<sup>5</sup> = 32 | log<sub>2</sub>32 = 5 |\n\nIf you don't, we won't wait for you\n\n## The elapsed time\n\nTake binary search for example, how much time can you save by using it? Simply look for the Numbers and if the list contains 100 Numbers, you need to guess 100 times.\nIn other words, the number of guesses is the same as the length of the list, which is called linear time, while binary search is different if the list contains 100 elements\nIt takes up to seven times, and if the list contains four billion digits, it should be guessed 32 times, while the running time of the subsearch is logarithmic time `O(log)`\n\n## Big O notation\n\nThe big O notation is a special representation of how fast the algorithm can be. There's a diaosi. In fact, you often have to copy other people's code.\nIn this case, you know how fast these algorithms are\n\n- The running time of the algorithm increases at different speeds\n  - For example, the difference between a simple find and a binary search\n\n| element       | Easy to find | Binary search |\n| ------------- | ------------ | ------------- |\n| 100           | 100ms        | 7ms           |\n| 10000         | 10s          | 14ms          |\n| 1 000 000 000 | 11day        | 30ms          |\n\n- ` O ` said hair is pointed out that how fast algorithms, such as list contains ` n ` element, a simple search need to check each element, so you need to perform ` n ` time operations\n  Using large ` O ` said ` O (n) to make this operation `, binary search need to perform log<sub>n</sub> using large ` O ` said to`O(log n)`\n  - Some common big O runtime\n- O(log n) ,It's also called log time, and this algorithm includes binary algorithms\n- O(n),Also known as linear time, this algorithm includes simple lookups.\n- O(n * log n) Quick sort\n- O(n<sub>2</sub>),Selection sort\n- O(n!) Factorial time\n  - Here is the point\n- The speed of the algorithm is not the time, but the growth of operands\n- When we talk about the speed of the algorithm, what we're talking about is how fast will it run as the input increases\n- The running time of the algorithm is expressed in large O notation\n- O(log n) is faster than O (n), and the more elements that need to be searched, the more the former is faster than the latter\n\n## A simple comparison of recursion and loops：\n\n1. From a procedural point of view, the recursion manifests itself as calling itself, and the loop does not have this form.\n2. Recursive proceed from the ultimate goal of the problem, and gradually to a complex problem into a simple problem, and simple question solution and complicated problem, at the same time the presence of the benchmark, can eventually get a problem, is the reverse. And the circulation is from the simple question, step by step forward development, finally get the question, is positive.\n3. Any cycle can be represented by recursion, but it is necessary to use the loop to achieve recursion (except for one-way recursion and tail recursion), and the stack structure must be introduced to stack the stack.\n   4.In general, non-recursive efficiency is higher than recursion. And recursive function calls are expensive and recursive times are limited by stack size.\n\n## Progressive learning\n\n1. Fork 我的项目并提交你的 `idea`\n2. Pull Request \n3. Merge \n\n## 纠错\n\nIf you find something wrong, you can initiate a [issue](https://github.com/PuShaoWei/designPatterns-go/issues)or [pull request](https://github.com/PuShaoWei/designPatterns-go/pulls),I will correct it in time\n\n> 补充:发起pull request的commit message请参考文章[Commit message 和 Change log 编写指南](http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)\n\n## Contributors\n\nThanks for the issue or pull request of the following friends:\n\n- [hailwood ](https://github.com/hailwood)\n\n- [zhangxuanru](https://github.com/zhangxuanru)\n\n- [ifreesec](https://github.com/ifreesec)\n\n- [openset](https://github.com/openset)\n\n- [Neroxiezi](https://github.com/Neroxiezi)\n\n  ## License\n\nMIT \n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.2861328125,
          "content": "​<h1 align=\"center\">:whale: 用 PHP 的方式实现的各类算法合集 :whale: </h1>\n\n<p align=\"center\">\n<a href=\"https://github.com/PuShaoWei/arithmetic-php#简易结构\">\n  <img src=\"https://img.shields.io/badge/php-done-brightgreen.svg\" alt=\"php\">\n</a>\n<a href=\"https://github.com/PuShaoWei/arithmetic-php\">\n    <img src=\"https://img.shields.io/github/issues-pr-raw/arithmetic-php/cdnjs.svg\">\n</a>\n<a href=\"https://github.com/PuShaoWei/arithmetic-php\">\n    <img src=\"https://img.shields.io/codacy/grade/e27821fb6289410b8f58338c7e0bc686.svg\">\n</a>\n<a href=\"https://github.com/PuShaoWei/arithmetic-php\">\n    <img src=\"https://img.shields.io/travis/rust-lang/rust.svg\">\n</a>\n<a href=\"https://github.com/PuShaoWei/arithmetic-php\">\n    <img src=\"https://img.shields.io/github/license/mashape/apistatus.svg\">\n</a>\n</p>\n\n<p align=\"center\"> <a href=\"./README-EN.md\">English</a>　<p>\n\n> 每周最少一更，求出题，求虐待 At least once a week, ask for problems and abuse\n\n## 简易结构\n\n```\n├──Package\n│    ├── Sort  排序篇\n│    │    ├── BubbleSort.php          冒泡排序\n│    │    ├── HeapSort.php            堆排序   大根堆\n│    │    ├── MBaseSort.php           基数排序 MSD\n│    │    ├── LBaseSort.php           基数排序 LSD\n│    │    ├── QuickSort.php           快速排序\n│    │    ├── ShuttleSort.php         飞梭排序\n│    │    ├── ShellSort.php           希尔排序\n│    │    ├── MergeSort.php           归并排序\n│    │    ├── InsertSort.php          插入排序\n│    │    └── SelectSort.php          选择排序\n│    │\n│    ├── Query 查找篇\n│    │    ├── BinaryQuery.php         二分查找\n│    │    ├── InseertQuery.php        插入查找\n│    │    ├── FibonacciQuery.php      斐波那契查找\n│    │    ├── BFSQuery.php            广度优先查找\n│         ├── Kmp.php                 算法导论-KMP算法\n│         ├── DijkstraQuery.php       迪克斯特拉算法\n│    │    └── QulickQuery.php         快速查找\n│    │     \n│    ├── Structure 数据结构\n│    │    ├── StackExample.php         堆栈   先进后出 LIFO (Last In First Out)\n│    │    ├── LinearChain.php          线性表 单链存储\n│    │    └── LinearOrder.php          线性表 顺序存储\n│    │    └── BinarySearchTree.php     二叉搜索树  \n│    │     \n│    ├── Tools 小工具集\n│    │    └──  SystemSwitch.php       堆栈实现进制转换  \n│    │  \n│    └── Other 其他\n│         ├──  MonkeyKing.php         约瑟夫环\n│         ├──  DynamicProgramming.php 动态规划\n│         ├──  Fibonacci.php          斐波那契数列\n│         ├──  StealingApples.php     偷苹果求余\n│         ├──  HanoiGames.php         汉诺塔游戏\n│         ├──  BidirectionalQueue.php 双向队列\n│         ├──  ColorBricks.php        彩色砖块\n│         ├──  GetCattle.php          牛年求牛\n│         ├──  OnlyNumbers.php        求唯一数\n│         ├──  PokerGames.php         洗扑克牌\n│         ├──  Interval.php           抽奖区间算法\n│         ├──  Maze.php               迷宫寻址算法\n│         ├──  AntsClimb.php          蚂蚁爬杆算法\n│         ├──  Encryption.php         对称加密算法\n│         ├──  ElevatorDispatch.php   编程之美-电梯调度算法\n│         ├──  PointInTriangle.php    向量叉集计算点是否在三角形中\n│         ├──  TraversalOfBinary.php  二叉树非递归遍历算法实现\n│         ├──  Knapsack.php           贪心算法之背包问题实现\n│         └──  BigSmallReplace.php    Hello World 输出 Olleh Dlrow\n│         └──  Solution.php           Facebook面试题之岛屿周长算法\n│         └──  RotationSort.php       Facebook面试题之顺时针回旋算法\n│         └──  Square.php             Facebook面试题之判断四个点能否组成正方形算法\n│         └──  Prim.php               Prim算法(最小生成树算法)\n│         └──  CartesianProduct.php   笛卡尔积算法\n│         └──  Square.php             面试题之平面任意四点能否组成一个矩形\n│         └──  Judge.php              面试题之扑克牌中任选五张判断是不是顺子\n│         └──  Factorial.php          面试题之N的阶乘末尾有多少个0\n|         └──  HashTable.php          HashTable\n|         └──  RotateSort.php         面试题之风车旋转排序算法\n│     \n├──LICENSE\n└──README.md\n```\n\n## 要做什么？\n\n```\n记录自己理解算法，数据结构的过程，尽可能的简单全面以及详细，让算法学习运用灵活自如，加油(ง •̀_•́)ง\n```\n\n## 当然\n\n```\n用 PHP 实现算法并替代官方提供的函数是愚蠢的事情 .但这决不代表斟酌算法就是件无意义的事 , 每个算法都是一种思想的结晶 , 学习优秀的思想 , 开拓思维\n```\n\n## 什么是算法？\n\n直白地说，算法就是任何明确定义的计算过程，它接收一些值或集合作为输入，并产生一些值或集合作为输出。这样，算法就是将输入转换为输出的一系列计算过程。来源：Thomas H. Cormen, Chales E. Leiserson (2009), 《算法导论第三版》。\n\n简而言之，我们可以说算法就是用来解决一个特定任务的一系列步骤（是的，不止计算机在使用算法，人类也同样如此）。目前，一个有效的算法应该含有三个重要特性：\n\n- 它必须是有限的：如果你设计的算法永无休止地尝试解决问题，那么它是无用的。\n- 它必须具备明确定义的指令：算法的每一步都必须准确定义，在任何场景下指令都应当没有歧义。\n- 它必须是有效的：一个算法被设计用以解决某个问题，那么它就应当能解决这个问题，并且仅仅使用纸和笔就能证明该算法是收敛的。\n\n## 对数\n\nlog<sub>10</sub>100 相当于问\"将多少个10相乘的结果为100\"，答案当然是2个了\n因此log<sub>10</sub>100=2，即对数运算是幂运算的逆运算\n\n| left               | right                 |\n| ------------------ | --------------------- |\n| 2<sup>3</sup> = 8  | log<sub>2</sub>8 = 3  |\n| 2<sup>4</sup> = 16 | log<sub>2</sub>16 = 4 |\n| 2<sup>5</sup> = 32 | log<sub>2</sub>32 = 5 |\n\n## 运行时间\n\n以二分查找为例，使用它可节省多少时间呢？简单查找逐个地检查数字，如果列表包含100个数字，最多需要猜100次。\n换而言之最多需要猜测的次数与列表长度相同，这被称为线性时间(linear time)，而二分查找则不同，如果列表包含100个元素\n最多需要7次，如果列表包含40亿个数字，最多需猜32次，而分查找的运行时间为对数时间 `O(log)`\n\n## 大O表示法\n\n大O表示法是一种特殊的表示法 ，指出了算法的速度有多快。有个屌用啊，实际上，你经常要去复制别人的代码。\n在这种情况下，知道这些算法的速度有快有慢\n\n- 算法的运行时间以不同的速度增加\n  - 例如简单查找与二分查找的区别\n\n| 元素                | 简单查找  | 二分查找 |\n| ----------------- | ----- | ---- |\n| 100个元素            | 100ms | 7ms  |\n| 10000个元素          | 10s   | 14ms |\n| 1 000 000 000 个元素 | 11天   | 30ms |\n\n- 大`O`表示法指出了算法有多快，例如列表包含`n`个元素，简单查找需要检查每个元素，因此需要执行`n`次操作\n  使用大`O`表示法这个运行时间为`O(n)`,二分查找需要执行log<sub>n</sub>次操作，使用大`O`表示为`O(log n)`\n  - 一些常见的大O运行时间\n- O(log n) ,也叫对数时间，这样的算法包括二分算法\n- O(n),也叫线性时间，这样的算法包括简单查找。\n- O(n * log n) 快速排序\n- O(n<sub>2</sub>),选择排序\n- O(n!) 即阶乘时间\n  - 这里是重点\n- 算法的速度指的并非时间，而是操作数的增速\n- 谈论算法的速度时间时，我们说的是随着输入的增加，其运行时间将以什么样的速度增加\n- 算法的运行时间用大O表示法表示\n- O(log n)比O(n)快，当需要搜索的元素越多时，前者比后者快的越多\n\n## 编写解决实际问题的程序过程\n\n- 如何用数据形式描述问题，即将问题抽象为一个数学模型\n- 问题所涉及到的数据量的大小及数据之间的关系\n- 如何在计算机中储存数据及体现数据之间的关系\n- 处理数据时需要对数据执行的操作\n- 编写的程序的性能是否良好\n\n## 数据(Data)\n\n- 是客观事物的符号表示，在计算机科学中指的是所有能输入到计算机中并被计算机程序处理的符号的总称。\n- 数据元素(Data Element) :是数据的基本单位，在程序中通常作为一个整体来进行考虑和处理。一个数据元素可由若干个数据项(Data Item)组成。\n- 数据项(Data Item) : 是数据的不可分割的最小单位。数据项是对客观事物某一方面特性的数据描述。\n- 数据对象(Data Object) :是性质相同的数据元素的集合，是数据的一个子集。如字符集合C={‘A’,’B’,’C,…} 。\n- 数据结构 :相互之间具有一定联系的数据元素的集合。\n- 数据的逻辑结构 : 数据元素之间的相互关系称为逻辑结构。\n- 数据操作 : 对数据要进行的运算\n- 数据类型(Data Type):指的是一个值的集合和定义在该值集上的一组操作的总称。\n\n## 数据的逻辑结构有四种基本类型\n\n- 集合：结构中数据元素之间除了“属于同一个集合\"外,再也没有其他的关系\n- 线性结构：结构中的数据元素存在一对一的关系\n- 树形结构：结构中的数据元素存在一对多的关系\n- 网状或者图状结构：结构中的数据元素存在多对多的关系\n\n## 数据结构的储存方式\n\n由数据元素之间的关系在计算机中有两种不同的表示方法——顺序表示和非顺序表示，从则导出两种储存方式，顺序储存结构和链式储存结构\n\n- 顺序存储结构：用数据元素在存储器中的相对位置来表示数据元素之间的逻辑结构(关系)，数据元素存放的地址是连续的\n- 链式存储结构：在每一个数据元素中增加一个存放另一个元素地址的指针(pointer)，用该指针来表示数据元素之间的逻辑结构(关系)，数据元素存放的地址是否连续没有要求\n\n数据的逻辑结构和物理结构是密不可分的两个方面，一个算法的设计取决于所选定的逻辑结构，而算法的实现依赖于所采用的存储结构\n\n## 算法(Algorithm)\n\n是对特定问题求解方法(步骤)的一种描述，是指令的有限序列，其中每一条指令表示一个或多个操作。\n\n> 算法具有以下五个特性\n\n- 有穷性： 一个算法必须总是在执行有穷步之后结束，且每一步都在有穷时间内完成\n- 确定性：算法中每一条指令必须有确切的含义，不存在二义性，且算法只有一个入口和一个出口\n- 可行性： 一个算法是能行的，即算法描述的操作都可以通过已经实现的基本运算执行有限次来实现\n- 输入： 一个算法有零个或多个输入，这些输入取自于某个特定的对象集合\n- 输出： 一个算法有一个或多个输出，这些输出是同输入有着某些特定关系的量\n\n> 算法和程序是两个不同的概念\n\n一个计算机程序是对一个算法使用某种程序设计语言的具体实现。算法必须可终止意味着不是所有的计算机程序都是算法。\n\n> 评价一个好的算法有以下几个标准\n\n- 正确性(Correctness )： 算法应满足具体问题的需\n- 可读性(Readability)： 算法应容易供人阅读和交流，可读性好的算法有助于对算法的理解和修改\n- 健壮性(Robustness)： 算法应具有容错处理，当输入非法或错误数据时，算法应能适当地作出反应或进行处理，而不会产生莫名其妙的输出结果\n- 通用性(Generality)： 算法应具有一般性 ，即算法的处理结果对于一般的数据集合都成立\n\n> 效率与存储量需求： 效率指的是算法执行的时间；存储量需求指算法执行过程中所需要的最大存储空间，一般地，这两者与问题的规模有关\n\n## 算法的时间复杂度\n\n算法中基本操作重复执行的次数是问题规模n的某个函数，其时间量度记作T(n)=O(f(n))，称作算法的渐近时间复杂度(Asymptotic Time complexity)，简称时间复杂度\n\n## 算法的空间复杂度\n\n是指算法编写成程序后，在计算机中运行时所需存储空间大小的度量，记作：S(n)=O(f(n)),其中n为问题规模\n\n## 递归和循环的简单比较：\n\n1. 从程序上看，递归表现为自己调用自己，循环则没有这样的形式。\n2. 递归是从问题的最终目标出发，逐渐将复杂问题化为简单问题，并且简单的问题的解决思路和复杂问题一样，同时存在基准情况，就能最终求得问题，是逆向的。而循环是从简单问题出发，一步步的向前发展，最终求得问题，是正向的。\n3. 任意循环都是可以用递归来表示的，但是想用循环来实现递归（除了单向递归和尾递归），都必须引入栈结构进行压栈出栈。\n4. 一般来说，非递归的效率高于递归。而且递归函数调用是有开销的，递归的次数受堆栈大小的限制。\n\n## 一起进步学习\n\n1. Fork 我的项目并提交你的 `idea`\n2. Pull Request\n3. Merge\n\n## 纠错\n\n如果大家发现有什么不对的地方，可以发起一个[issue](https://github.com/PuShaoWei/arithmetic-php/issues)或者[pull request](https://github.com/PuShaoWei/arithmetic-php/pulls),我会及时纠正\n\n> 补充:发起pull request的commit message请参考文章[Commit message 和 Change log 编写指南](http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)\n\n## 致谢\n\n感谢以下朋友的issue或pull request：\n\n- [hailwood ](https://github.com/hailwood)\n\n- [zhangxuanru](https://github.com/zhangxuanru)\n\n- [ifreesec](https://github.com/ifreesec)\n\n- [openset](https://github.com/openset)\n\n- [Neroxiezi](https://github.com/Neroxiezi)\n\n  ## License\n\nMIT\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.4248046875,
          "content": "# Security Policy\n\n## Supported Versions\n\nUse this section to tell people about which versions of your project are\ncurrently being supported with security updates.\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 5.1.x   | :white_check_mark: |\n| 5.0.x   | :x:                |\n| 4.0.x   | :white_check_mark: |\n| < 4.0   | :x:                |\n\n## Reporting a Vulnerability\n\nPlease report security issues to <email>\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.025390625,
          "content": "theme: jekyll-theme-cayman"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.748046875,
          "content": "{\n  \"name\": \"algorithm-php\",\n  \"description\": \"algorithm-php\",\n  \"minimum-stability\": \"stable\",\n  \"license\": \"MIT\",\n  \"authors\": [\n    {\n      \"name\": \"pushaowei\"\n    }\n  ],\n  \"require-dev\": {\n    \"phpunit/phpunit\": \"~6.0\",\n    \"mockery/mockery\": \"~0.9\"\n  },\n  \"autoload\": {\n    \"classmap\": [\n      \"./src\"\n    ]\n  },\n  \"autoload-dev\": {\n    \"classmap\": [\n      \"tests/\"\n    ]\n  },\n  \"prefer-stable\": true,\n  \"config\": {\n    \"optimize-autoloader\": true\n  },\n  \"repositories\": {\n    \"packagist\": {\n      \"type\": \"composer\",\n      \"url\": \"https://packagist.phpcomposer.com\"\n    }\n  },\n  \"require\": {\n    \"ext-json\": \"*\",\n    \"ext-ctype\": \"*\",\n    \"ext-openssl\": \"*\",\n    \"php\": \">=5.6.4\",\n    \"ext-curl\": \"*\",\n    \"stojg/recommend\": \"^1.0\",\n    \"ext-iconv\": \"*\"\n  }\n}\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.1484375,
          "content": "version: '2.0'\nservices:\n  php71-dev:\n    image: \"m9rco/php:7.1-dev\"\n    ports:\n      - \"2222:22\"\n      - \"29000:9000\"\n    volumes:\n      - $PWD:/app:rw"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.5615234375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit\n        backupStaticAttributes=\"false\"\n        backupGlobals=\"false\"\n        colors=\"false\"\n        convertWarningsToExceptions=\"true\"\n        processIsolation=\"false\"\n        stopOnFailure=\"false\"\n        syntaxCheck=\"false\"\n>\n    <php>\n        <!--<ini name=\"error_reporting\" value=\"0\"/>-->\n        <!--<ini name=\"display_errors\" value=\"On\"/>-->\n    </php>\n    <testsuites>\n        <testsuite name=\"algorithm-php\">\n            <directory suffix=\"Test.php\">./tests</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}