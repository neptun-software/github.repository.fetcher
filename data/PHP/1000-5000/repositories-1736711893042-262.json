{
  "metadata": {
    "timestamp": 1736711893042,
    "page": 262,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "TIGERB/easy-tips",
      "stars": 2724,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0634765625,
          "content": ".idea\ngo/src/.DS_Store\nvendor\ngo/bin\ngo/pkg\ngo/go-learn/ssa.html\n"
        },
        {
          "name": ".varci.yml",
          "type": "blob",
          "size": 1.29296875,
          "content": "ruleset:\n\n  respond_to_me:\n  \n    name: Respond to me when I comment mentioning @VarCI-bot\n    events: [ issue_comment ]\n    when:\n      - action = \"created\"\n      - user.login = \"TIGERB\"\n      - body contains \"@VarCI-bot\"\n    comment: |\n      Perfect @{{ user.login }} - now replace the first two rules with your own!\n  \n      If you wish to keep the third rule, you can merge by starting a comment with \"LGTM\".\n  \n      Please see the following resources if you get stuck - best of luck!\n  \n      - [Documentation](https://var.ci/docs)\n      - [Support](https://var.ci/support)\n  \n  merge_for_me:\n  \n    name: Merge pull requests for me when I start a comment with \"LGTM\"\n    events: [ issue_comment ]\n    when:\n      - action = \"created\"\n      - user.login = \"TIGERB\"\n      - body matches \"/^LGTM/\"\n    merge: true\n  \n  welcome_me:\n  \n    name: Introduce me to VarCI when I open a pull request\n    events: [ pull_request ]\n    when:\n      - action = \"opened\"\n      - user.login = \"TIGERB\"\n    comment: |\n      Welcome to VarCI @{{ user.login }}!\n  \n      Continue pushing changes to the config in this branch and I'll validate the changes.\n  \n      You can also test out new rules in your pull requests before merging them.\n  \n      For example, try triggering the second rule by mentioning me (@VarCI-bot) right now!\n  \n"
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.0185546875,
          "content": "easy-tips.tigerb.cn"
        },
        {
          "name": "README-EN.md",
          "type": "blob",
          "size": 12.576171875,
          "content": "<h1 align=\"center\">Easy Tips</h1>\n<p align=\"center\">\n<a href=\"https://github.com/TIGERB/easy-tips#目录\">\n  <img src=\"https://img.shields.io/badge/php-done-brightgreen.svg\" alt=\"php\">\n</a>\n<a href=\"https://github.com/TIGERB/easy-tips/tree/master/mysql\">\n  <img src=\"https://img.shields.io/badge/mysql-doing-blue.svg\" alt=\"mysql\">\n</a>\n<a href=\"https://github.com/TIGERB/easy-tips/tree/master/redis\">\n  <img src=\"https://img.shields.io/badge/redis-doing-blue.svg\" alt=\"redis\">\n</a>\n<a href=\"https://github.com/TIGERB/easy-tips/tree/master/patterns\">\n  <img src=\"https://img.shields.io/badge/patterns-done-brightgreen.svg\" alt=\"patterns\">\n</a>\n<a href=\"https://github.com/TIGERB/easy-tips/tree/master/algorithm\">\n  <img src=\"https://img.shields.io/badge/algorithm-%CE%B1-yellowgreen.svg\" alt=\"algorithm\">\n</a>\n<a href=\"https://github.com/TIGERB/easy-tips/tree/master/data-structure\">\n  <img src=\"https://img.shields.io/badge/data--structure-doing-blue.svg\" alt=\"data-structure\">\n</a>\n<a href=\"https://github.com/TIGERB/easy-tips/tree/master/network\">\n  <img src=\"https://img.shields.io/badge/network-doing-blue.svg\" alt=\"network\">\n</a>\n<a href=\"https://github.com/TIGERB/easy-tips/tree/master/docker\">\n  <img src=\"https://img.shields.io/badge/docker-doing-blue.svg\" alt=\"docker\">\n</a>\n</p>\n\n<br>\n\n> A knowledge storage for the PHP developer\n\n## Remark\n\nflag      | meaning\n--------- | -------\nnot-start | not start\ndoing     | ing\nα         | for reference only\ndone      | complete\nfixing    | fix\n\n## 目录\n\n- PHP(doing)\n\n  - PHP code standard with PSR(Include personal suggestion)\n\n    - [example](https://github.com/TIGERB/easy-tips/blob/master/php/standard.php)\n    - [doc](https://github.com/TIGERB/easy-tips/blob/master/php/standard.md)\n    - [experience](https://github.com/TIGERB/easy-tips/blob/master/php/artisan.md)\n\n  - Base knowledge[RTFM]\n\n    - [datastruct](http://php.net/manual/zh/language.types.php)\n    - [operator level](http://php.net/manual/zh/language.operators.precedence.php)\n    - [string functions](http://php.net/ref.strings.php)\n    - [array functions](http://php.net/manual/zh/ref.array.php)\n    - [math functions](http://php.net/manual/zh/ref.math.php)\n    - [object oriented](http://php.net/manual/zh/language.oop5.php)\n    - Feature\n\n      - [7.1](http://php.net/manual/zh/migration71.new-features.php)\n      - [7.0](http://php.net/manual/zh/migration70.new-features.php)\n      - [5.6](http://php.net/manual/zh/migration56.new-features.php)\n      - [5.5](http://php.net/manual/zh/migration55.new-features.php)\n      - [5.4](http://php.net/manual/zh/migration54.new-features.php)\n      - [5.3](http://php.net/manual/zh/migration53.new-features.php)\n\n  - [Some pit in my code career](https://github.com/TIGERB/easy-tips/blob/master/pit.md#记一些坑)\n\n- Mysql(doing)\n\n  - [Some base sql](https://github.com/TIGERB/easy-tips/blob/master/mysql/sql.md)\n  - [Engine](https://github.com/TIGERB/easy-tips/blob/master/mysql/base.md#引擎)\n    - InnoDB\n    - MyISAM\n    - Memory\n    - Archive\n    - Blackhole\\CSV\\Federated\\merge\\NDB\n  - [Transaction](https://github.com/TIGERB/easy-tips/blob/master/mysql/base.md#事务)\n    + Atomicity\n    + Consistency\n    + [Isolation](https://github.com/TIGERB/easy-tips/blob/master/mysql/base.md#mysql数据库为我们提供的四种隔离级别)\n      * READ UNCOMMITTED\n      * READ COMMITTED\n      * REPEATABLE READ\n      * SERIALIZEABLE\n    + Durability\n  - [Index](https://github.com/TIGERB/easy-tips/blob/master/mysql/base.md#索引)\n    + Index\n      * Primary unique index\n      * Unique index\n      * Index\n      * Union index\n        - Left match principle\n    + Cluster\n      * \bCluster index\n      * Non-\bCluster index\n    + Datastruct\n      * hash index\n      * b-tree index\n      * b+tree index\n    \n  - [Lock](https://github.com/TIGERB/easy-tips/blob/master/mysql/base.md#锁)\n    - Pessimistic lock\n    - Optimistic lock\n  - Submeter\n    - Vertical\n    - Horizontal\n  - Sql optimize\n  - Master-Slave\n\n- Redis(doing)\n\n  - Command\n  - Diff with memcache \n  - Some Example\n    - [\bcache](https://github.com/TIGERB/easy-tips/blob/master/redis/cache.php)\n    - [queue](https://github.com/TIGERB/easy-tips/blob/master/redis/queue.php)\n    - [pessimistic lock](https://github.com/TIGERB/easy-tips/blob/master/redis/pessmistic-lock.php)\n    - [optimistic lock](https://github.com/TIGERB/easy-tips/blob/master/redis/optimistic-lock.php)\n    - [subscribe&publish](https://github.com/TIGERB/easy-tips/blob/master/redis/subscribe-publish)\n\n- Docker\n  - [The master and slave for redis](https://github.com/TIGERB/easy-tips/blob/master/docker/redis-master-slave/README.md)\n  - [The master and slave for mysql](https://github.com/TIGERB/easy-tips/blob/master/docker/mysql-master-slave/README.md)\n  - [codis](https://github.com/TIGERB/easy-tips/blob/master/docker/codis/README.md)\n\n- Design Pattern(done/fixing)\n\n  - [Concept](https://github.com/TIGERB/easy-tips/blob/master/patterns/thought.md#设计模式)\n\n  - Creational Pattern\n\n    - [singleton pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/singleton/test.php)\n    - [factory pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/factory/test.php)\n    - [abstract factory pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/factoryAbstract/test.php)\n    - [prototype pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/prototype/test.php)\n    - [produce pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/produce/test.php)\n\n  - Construction Pattern\n\n    - [bridge pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/bridge/test.php)\n    - [flyweight pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/flyweight/test.php)\n    - [facade pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/facade/test.php)\n    - [adapter pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/adapter/test.php)\n    - [decorator pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/decorator/test.php)\n    - [composite pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/composite/test.php)\n    - [proxy pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/proxy/test.php)\n    - [filter pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/filter/test.php)\n\n  - Behavior Pattern\n\n    - [template pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/template/test.php)\n    - [strategy pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/strategy/test.php)\n    - [state pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/state/test.php)\n    - [observer pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/observer/test.php)\n    - [chain of responsibility pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/chainOfResponsibility/test.php)\n    - [visitor pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/visitor/test.php)\n    - [interpreter pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/interpreter/test.php)\n    - [memento pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/memento/test.php)\n    - [command pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/command/test.php)\n    - [iterator pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/iterator/test.php)\n    - [mediator pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/mediator/test.php)\n    - [null object pattern](https://github.com/TIGERB/easy-tips/blob/master/patterns/nullObject/test.php)\n\n- [Data-structure(doing)](https://github.com/TIGERB/easy-tips/blob/master/data-structure.md)\n\n  - array\n  - heap/stack\n  - tree\n  - queue\n  - list\n  - graph\n  - hash\n\n- Algorithm(doing)\n\n  - analyze\n\n    - time complexity/space complexity/corectness/readability/robustness\n\n  - examples\n\n    - sort algorithm(α)\n\n      - [bubble sort](https://github.com/TIGERB/easy-tips/blob/master/algorithm/sort/bubble.php)\n      - [quick sort](https://github.com/TIGERB/easy-tips/blob/master/algorithm/sort/quick.php)\n      - [select sort](https://github.com/TIGERB/easy-tips/blob/master/algorithm/sort/select.php)\n      - [insert sort](https://github.com/TIGERB/easy-tips/blob/master/algorithm/sort/insert.php)\n      - [merge sort](https://github.com/TIGERB/easy-tips/blob/master/algorithm/sort/merge.php)\n      - [shell sort](https://github.com/TIGERB/easy-tips/blob/master/algorithm/sort/shell.php)\n      - [radix sort](https://github.com/TIGERB/easy-tips/blob/master/algorithm/sort/radix.php)\n\n- Netwok basis (doing)\n\n  - [Internet protocol](https://github.com/TIGERB/easy-tips/blob/master/network/internet-protocol.md#互联网协议)\n  - [client with nginx](https://github.com/TIGERB/easy-tips/blob/master/network/nginx.md#client和nginx简易交互过程)\n  - [nginx with php-fpm](https://github.com/TIGERB/easy-tips/blob/master/network/nginx.md#nginx和php简易交互过程)\n  - [http](https://github.com/TIGERB/easy-tips/blob/master/network/http.md)\n    - message\n      - message head\n      - message body\n    - http status\n    - http method\n    - https\n    - http2\n    - websocket\n\n- Computer basis (doing)\n\n  - [linux command](https://github.com/TIGERB/easy-tips/blob/master/linux/command.md)\n  - shell\n\n- High concurrency (not-start)\n\n## Test\n\n### Design Pattern\n\nrun: php patterns/[folder-name]/test.php\n\n```\nfor example,\n\nchain of responsibility: run, php patterns/chainOfResponsibility/test.php\n\nresult：\n\nrequest 5850c8354b298: token pass～\nrequest 5850c8354b298: request frequent pass～\nrequest 5850c8354b298: params pass～\nrequest 5850c8354b298: sign pass～\nrequest 5850c8354b298: auth pass～\n```\n\n### Algorithm\n\nrun: php algorithm/test.php [algorithm name｜help]\n\n```\nfor example,\n\nbubble sort: run, php algorithm/test.php　bubble\n\nresult：\n\n==========================bubble sort=========================\nArray\n(\n    [0] => 11\n    [1] => 67\n    [2] => 3\n    [3] => 121\n    [4] => 71\n    [5] => 6\n    [6] => 100\n    [7] => 45\n    [8] => 2\n)\n=========up is the origin data==================below is the sort result=============\nArray\n(\n    [0] => 2\n    [1] => 3\n    [2] => 6\n    [3] => 11\n    [4] => 45\n    [5] => 67\n    [6] => 71\n    [7] => 100\n    [8] => 121\n)\n```\n\n### Redis \n\nrun: php redis/test.php [name｜help]\n\n```\nfor example,\n\npessimistic-lock: run, php redis/test.php p-lock\n\nresult：\n\nexexute count increment 1～\n\ncount value: 1\n\n```\n\n## Error correction\n\nIf you find some where is not right, you can make a issue[issue](https://github.com/TIGERB/easy-tips/issues)or a [pull request](https://github.com/TIGERB/easy-tips),I will fix it，THX～\n\n## Contributors\n\nThis project exists thanks to all the people who contribute. \n<a href=\"graphs/contributors\"><img src=\"https://opencollective.com/easy-tips/contributors.svg?width=890&button=false\" /></a>\n\n\n## Backers\n\nThank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/easy-tips#backer)]\n\n<a href=\"https://opencollective.com/easy-tips#backers\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/backers.svg?width=890\"></a>\n\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/easy-tips#sponsor)]\n\n<a href=\"https://opencollective.com/easy-tips/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/easy-tips/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/easy-tips/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/easy-tips/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/easy-tips/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/easy-tips/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/easy-tips/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/easy-tips/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/easy-tips/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/easy-tips/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/9/avatar.svg\"></a>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.298828125,
          "content": "<h1 align=\"center\">《PHPer、Gopher成长之路》V1.10</h1>\n\n<p align=\"center\">「全原创系列」</p>\n\n> 记录我在成为一名PHPer、Gopher路上的学习过程\n\n<p align=\"center\">\n<a href=\"https://github.com/TIGERB/easy-tips#目录\">\n  <img src=\"https://img.shields.io/badge/PHP-✅-brightgreen.svg\" alt=\"php\">\n</a>\n<a href=\"https://github.com/TIGERB/easy-tips/tree/master/go\">\n  <img src=\"https://img.shields.io/badge/Go-🚗-blue.svg\" alt=\"go\">\n</a>\n<a href=\"https://github.com/TIGERB/easy-tips/tree/master/mysql\">\n  <img src=\"https://img.shields.io/badge/MySQL-🚗-blue.svg\" alt=\"mysql\">\n</a>\n<a href=\"https://github.com/TIGERB/easy-tips/tree/master/redis\">\n  <img src=\"https://img.shields.io/badge/Redis-🚗-blue.svg\" alt=\"redis\">\n</a>\n<a href=\"https://github.com/TIGERB/easy-tips/tree/master/patterns\">\n  <img src=\"https://img.shields.io/badge/patterns-✅-brightgreen.svg\" alt=\"patterns\">\n</a>\n<a href=\"https://github.com/TIGERB/easy-tips/tree/master/algorithm\">\n  <img src=\"https://img.shields.io/badge/algorithm-🧀️-yellowgreen.svg\" alt=\"algorithm\">\n</a>\n<a href=\"https://github.com/TIGERB/easy-tips/tree/master/data-structure\">\n  <img src=\"https://img.shields.io/badge/data--structure-🚗-blue.svg\" alt=\"data-structure\">\n</a>\n<a href=\"https://github.com/TIGERB/easy-tips/tree/master/network\">\n  <img src=\"https://img.shields.io/badge/network-🚗-blue.svg\" alt=\"network\">\n</a>\n<a href=\"https://github.com/TIGERB/easy-tips/tree/master/docker\">\n  <img src=\"https://img.shields.io/badge/docker-🚗-blue.svg\" alt=\"docker\">\n</a>\n</p>\n\n<p align=\"center\"><a href=\"README-EN.md\" >English Version</a></p>\n\n# 版权申明\n- 未经版权所有者明确授权，禁止发行本手册及其被实质上修改的版本。 \n- 未经版权所有者事先授权，禁止将此作品及其衍生作品以标准（纸质）书籍形式发行。  \n\n<p align=\"center\">\n  <img src=\"https://blog-1251019962.cos.ap-beijing.myqcloud.com/qiniu_img_2022/wechat-blog-qrcode.jpg\" width=\"200px\">\n</p>\n\n## 前言\n\n基础不牢，地动山摇，谨以此句提醒自己。\n\n## 备注\n\n状态        | 含义\n--------- | -------\n🈳️ | 当前未开始总结\n🚗 | 总结中\n🧀️ | 目前仅供参考未修正和发布\n✅ | 总结完毕\n🔧 | 查漏补缺修改中\n\n## 目录\n\n- [PHP到Go速转手册](http://tigerb.cn/php2go/#/)\n- PHP基础学习 ✅\n  + 符合PSR的PHP编程规范(含个人建议)\n    * [实例](https://github.com/TIGERB/easy-tips/blob/master/php/standard.php)\n    * [文档](https://github.com/TIGERB/easy-tips/blob/master/php/standard.md)\n    * [经验](https://github.com/TIGERB/easy-tips/blob/master/php/artisan.md)\n  + [记一些PHP的坑](https://github.com/TIGERB/easy-tips/blob/master/pit.md#记一些坑)\n- Go语言学习 🚗\n  + Go框架源码阅读&解析\n    * [Go框架解析-beego](http://tigerb.cn/2018/12/06/beego/)\n    * [Go框架解析-iris](http://tigerb.cn/2019/06/29/go-iris/)\n    * [Go框架解析-gin](http://tigerb.cn/2019/07/06/go-gin/)\n    * [Go框架解析-echo](http://tigerb.cn/2019/07/13/go-echo/)\n  + Go常用包解析\n    * go常用包解析-fasthttp\n  + [Go语言进阶学习](http://tigerb.cn/go/#/kernal/)\n    * [Map](http://tigerb.cn/go/#/kernal/map)\n    * [内存](http://tigerb.cn/go/#/kernal/memory)\n- 高并发相关 🚗\n  + [处理高并发的一般思路](http://tigerb.cn/2019/04/18/top-qps-experience/)\n  + [秒杀系统设计](http://tigerb.cn/2020/05/05/skrshop/seckill/)\n- 网络编程 🚗\n  + [php实现web服务器](http://tigerb.cn/2018/11/24/php-network-programming/)\n  + go实现web服务器\n  + c实现web服务器\n  + php扩展实现web服务器\n- 问题排查 🚗\n  + nginx/php/业务日志\n  + 问题排查实例分析\n- MySQL 🚗\n  + [常用sql语句](https://github.com/TIGERB/easy-tips/blob/master/mysql/sql.md)\n  + [引擎](https://github.com/TIGERB/easy-tips/blob/master/mysql/base.md#引擎)\n    * InnoDB\n    * MyISAM\n    * Memory\n    * Archive\n    * Blackhole\\CSV\\Federated\\merge\\NDB\n  + [事务](https://github.com/TIGERB/easy-tips/blob/master/mysql/base.md#事务)\n    * 原子性（Atomicity）\n    * 一致性（Consistency）\n    * [隔离性（Isolation）](https://github.com/TIGERB/easy-tips/blob/master/mysql/base.md#mysql数据库为我们提供的四种隔离级别)\n      - READ UNCOMMITTED:未提交读\n      - READ COMMITTED：提交读/不可重复读\n      - REPEATABLE READ：可重复读(MYSQL默认事务隔离级别)\n      - SERIALIZEABLE：可串行化\n    * 持久性（Durability）\n  + [索引](https://github.com/TIGERB/easy-tips/blob/master/mysql/base.md#索引)\n    * 建立表结构时添加的索引\n      - 主键唯一索引\n      - 唯一索引\n      - 普通索引\n      - 联合索引\n    * 最左匹配原则\n    * 依据是否聚簇区分\n      - 聚簇索引\n      - 非聚簇索引\n    * 索引底层数据结构\n      - hash索引\n      - b-tree索引\n      - b+tree索引\n  + [锁](https://github.com/TIGERB/easy-tips/blob/master/mysql/base.md#锁)\n    * 悲观锁\n    * 乐观锁\n  + 分表\n    * 垂直分表\n    * 水平分表\n  + sql优化\n  + 主从配置\n- Redis 🚗\n  + 常见用途\n    * [缓存](https://github.com/TIGERB/easy-tips/blob/master/redis/cache.php)\n    * [队列](https://github.com/TIGERB/easy-tips/blob/master/redis/queue.php)\n    * [悲观锁](https://github.com/TIGERB/easy-tips/blob/master/redis/pessmistic-lock.php)\n    * [乐观锁](https://github.com/TIGERB/easy-tips/blob/master/redis/optimistic-lock.php)\n    * [订阅/推送](https://github.com/TIGERB/easy-tips/blob/master/redis/subscribe-publish)\n  + Redis的基础数据结构\n- 设计模式\n  + [概念](https://github.com/TIGERB/easy-tips/blob/master/patterns/thought.md#设计模式)\n  + [面向对象的设计过程](http://tigerb.cn/2019/10/11/oop/)\n  + Go版本 🚗\n    * [Go设计模式实战系列](http://tigerb.cn/go/#/patterns/)\n      - [模板模式](https://github.com/TIGERB/easy-tips/tree/master/go/patterns/template)\n      - [责任链模式](https://github.com/TIGERB/easy-tips/tree/master/go/patterns/responsibility)\n      - [组合模式](https://github.com/TIGERB/easy-tips/tree/master/go/patterns/composite)\n      - [观察者模式](https://github.com/TIGERB/easy-tips/tree/master/go/patterns/observer)\n      - [策略模式](https://github.com/TIGERB/easy-tips/tree/master/go/patterns/strategy)\n      - [状态模式](https://github.com/TIGERB/easy-tips/tree/master/go/patterns/state)\n      - [并发组合模式](https://github.com/TIGERB/easy-tips/blob/master/go/patterns/composite/README-Concurrency.md)\n      - ...\n  + PHP版本 ✅\n    * 创建型模式实例\n      - [单例模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/singleton/test.php)\n      - [工厂模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/factory/test.php)\n      - [抽象工厂模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/factoryAbstract/test.php)\n      - [原型模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/prototype/test.php)\n      - [建造者模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/produce/test.php)\n    * 结构型模式实例\n      - [桥接模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/bridge/test.php)\n      - [享元模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/flyweight/test.php)\n      - [外观模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/facade/test.php)\n      - [适配器模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/adapter/test.php)\n      - [装饰器模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/decorator/test.php)\n      - [组合模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/composite/test.php)\n      - [代理模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/proxy/test.php)\n      - [过滤器模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/filter/test.php)\n    * 行为型模式实例\n      - [模板模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/template/test.php)\n      - [策略模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/strategy/test.php)\n      - [状态模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/state/test.php)\n      - [观察者模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/observer/test.php)\n      - [责任链模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/chainOfResponsibility/test.php)\n      - [访问者模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/visitor/test.php)\n      - [解释器模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/interpreter/test.php)\n      - [备忘录模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/memento/test.php)\n      - [命令模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/command/test.php)\n      - [迭代器模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/iterator/test.php)\n      - [中介者器模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/mediator/test.php)\n      - [空对象模式](https://github.com/TIGERB/easy-tips/blob/master/patterns/nullObject/test.php)\n- [数据结构 🚗](https://github.com/TIGERB/easy-tips/blob/master/data-structure.md)\n  + 数组\n  + 堆/栈\n  + 树\n  + 队列\n  + 链表\n  + 图\n  + 散列表\n- 算法 🚗\n  + 算法分析\n    * 时间复杂度/空间复杂度/正确性/可读性/健壮性\n  + 算法实战\n    * 排序算法 🧀️\n      - [冒泡排序](https://github.com/TIGERB/easy-tips/blob/master/algorithm/sort/bubble.php)\n      - [快速排序](https://github.com/TIGERB/easy-tips/blob/master/algorithm/sort/quick.php)\n      - [选择排序](https://github.com/TIGERB/easy-tips/blob/master/algorithm/sort/select.php)\n      - [插入排序](https://github.com/TIGERB/easy-tips/blob/master/algorithm/sort/insert.php)\n      - [归并排序](https://github.com/TIGERB/easy-tips/blob/master/algorithm/sort/merge.php)\n      - [希尔排序](https://github.com/TIGERB/easy-tips/blob/master/algorithm/sort/shell.php)\n      - [基数排序](https://github.com/TIGERB/easy-tips/blob/master/algorithm/sort/radix.php)\n- 网络基础 🚗\n  + [互联网协议概述](https://github.com/TIGERB/easy-tips/blob/master/network/internet-protocol.md#互联网协议)\n  + [client和nginx简易交互过程](https://github.com/TIGERB/easy-tips/blob/master/network/nginx.md#client和nginx简易交互过程)\n  + [nginx和php-fpm简易交互过程](https://github.com/TIGERB/easy-tips/blob/master/network/nginx.md#nginx和php简易交互过程)\n  + [http](https://github.com/TIGERB/easy-tips/blob/master/network/http.md)\n    * 报文\n      - 报文头部\n      - 报文体\n    * 常见13种状态码\n    * 方法method\n    * https\n    * http2\n    * websocket\n- 计算机基础 🚗\n  + [linux常用命令](https://github.com/TIGERB/easy-tips/blob/master/linux/command.md)\n  + shell\n- Docker\n  + [redis主从搭建](https://github.com/TIGERB/easy-tips/blob/master/docker/redis-master-slave/README.md)\n  + [mysql主从搭建](https://github.com/TIGERB/easy-tips/blob/master/docker/mysql-master-slave/README.md)\n  + [codis环境](https://github.com/TIGERB/easy-tips/blob/master/docker/codis/README.md)\n  + mysql多主环境\n  + kafka的环境搭建和使用\n  + rabbitMQ的环境搭建和使用\n  + zookeeper的环境搭建和使用\n  + etcd的环境搭建和使用\n  + ELK的环境搭建和使用\n  + 网关服务kong的环境搭建和使用\n  + 我所理想的架构\n\n\n## 测试用例\n\n### PHP设计模式\n\n运行脚本： php patterns/[文件夹名称]/test.php\n\n```\n例如,\n\n测试责任链模式： 运行 php patterns/chainOfResponsibility/test.php\n\n运行结果：\n\n请求5850c8354b298: 令牌校验通过～\n请求5850c8354b298: 请求频率校验通过～\n请求5850c8354b298: 参数校验通过～\n请求5850c8354b298: 签名校验通过～\n请求5850c8354b298: 权限校验通过～\n```\n\n### PHP算法\n\n运行脚本： php algorithm/test.php [算法名称｜空获取列表]\n\n```\n例如,\n\n测试冒泡排序： 运行 php algorithm/test.php　bubble\n\n运行结果：\n\n==========================冒泡排序=========================\nArray\n(\n    [0] => 11\n    [1] => 67\n    [2] => 3\n    [3] => 121\n    [4] => 71\n    [5] => 6\n    [6] => 100\n    [7] => 45\n    [8] => 2\n)\n=========上为初始值==================下为排序后值=============\nArray\n(\n    [0] => 2\n    [1] => 3\n    [2] => 6\n    [3] => 11\n    [4] => 45\n    [5] => 67\n    [6] => 71\n    [7] => 100\n    [8] => 121\n)\n```\n\n### 常见redis运用实现\n\n运行脚本： php redis/test.php [名称｜空获取列表]\n\n```\n例如,\n\n测试悲观锁： 运行 php redis/test.php p-lock\n\n运行结果：\n\n执行count加1操作～\n\ncount值为：1\n\n```\n\n## 纠错\n\n如果大家发现有什么不对的地方，可以发起一个[issue](https://github.com/TIGERB/easy-tips/issues)或者[pull request](https://github.com/TIGERB/easy-tips),我会及时纠正，THX～\n\n> 补充:发起pull request的commit message请参考文章[Commit message编写指南](http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)\n\n## 英文版\n\n因为国外开发者的要求和个人的时间有限，征集大家有兴趣的可以把本项目进行英文版翻译。希望国外的developer也可以受益于这个项目～\n\n翻译文件认领申请：<https://github.com/TIGERB/easy-tips/issues/36>\n\n## 赞赏\n\n<img src=\"money-qrcode.jpg\" width=\"300px\">\n\n## Contributors\n\nThis project exists thanks to all the people who contribute. \n<a href=\"graphs/contributors\"><img src=\"https://opencollective.com/easy-tips/contributors.svg?width=890&button=false\" /></a>\n\n\n## Backers\n\nThank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/easy-tips#backer)]\n\n<a href=\"https://opencollective.com/easy-tips#backers\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/backers.svg?width=890\"></a>\n\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/easy-tips#sponsor)]\n\n<a href=\"https://opencollective.com/easy-tips/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/easy-tips/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/easy-tips/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/easy-tips/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/easy-tips/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/easy-tips/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/easy-tips/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/easy-tips/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/easy-tips/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/easy-tips/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/easy-tips/sponsor/9/avatar.svg\"></a>\n\n\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0263671875,
          "content": "theme: jekyll-theme-minimal"
        },
        {
          "name": "algorithm",
          "type": "tree",
          "content": null
        },
        {
          "name": "c",
          "type": "tree",
          "content": null
        },
        {
          "name": "data-structure",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "faas",
          "type": "tree",
          "content": null
        },
        {
          "name": "git",
          "type": "tree",
          "content": null
        },
        {
          "name": "go",
          "type": "tree",
          "content": null
        },
        {
          "name": "k8s",
          "type": "tree",
          "content": null
        },
        {
          "name": "linux",
          "type": "tree",
          "content": null
        },
        {
          "name": "money-qrcode.jpg",
          "type": "blob",
          "size": 46.5869140625,
          "content": null
        },
        {
          "name": "mysql",
          "type": "tree",
          "content": null
        },
        {
          "name": "network",
          "type": "tree",
          "content": null
        },
        {
          "name": "patterns",
          "type": "tree",
          "content": null
        },
        {
          "name": "pay",
          "type": "tree",
          "content": null
        },
        {
          "name": "php",
          "type": "tree",
          "content": null
        },
        {
          "name": "pit.md",
          "type": "blob",
          "size": 5.6767578125,
          "content": "###### 记一些坑\n\n```\n//phpfpm配置\n# pm = static 时\npm.max_children = 最大并发数\n# pm = dynamic 时\npm.max_spare_servers = 最大并发数\n\n详细的答案：\npm.max_children 表示 php-fpm 在 static 模式下能启动的子进程的最大数量。\npm.max_spare_servers 表示 php-fpm 在 dynamic 模式下能启动的子进程的最大数量。\n因为 php-fpm 是多进程单线程同步模式，即一个子进程同时最多处理一个请求，所以子进程数等于最大并发数。\n\n但是实际使用中一般不用考虑，因为 php 默认配置为 dynamic 的子进程管理，默认的 pm.max_spare_servers 配置通常够用了，不用手动设置这些配置。\n```\n\n```\n//日志调试方法\n\n/**\n * 超级调试\n *\n * 调试非本地环境或分布式环境，通过Log查看变量传递\n * 写入变量值到\\var\\log\\php_super_debug.log\n * @param  mixed  $data     日志数据\n * @param  string $log_path 日志路径\n * @param  string $log_name 日志名称\n * @return void       \n */\nfunction super_debug($data, $log_path='\\var\\log\\', $log_name='debug')\n{\n  error_log(json_encode($data, JSON_UNESCAPED_UNICODE).\"\\n\", 3, $log_path.$log_name);\n}\n```\n\n```\n// php实现下载图片\n\nheader('Content-type: image/jpeg');\nheader('Content-Disposition: attachment; filename=download_name.jpg');\nreadfile($yourFilePath);\n```\n\n```\n// php5.6开始干掉了@语法，php上传图片兼容版本写法\n\nif (class_exists('\\CURLFile')) {\n    curl_setopt($curl, CURLOPT_SAFE_UPLOAD, true);\n    $data = array('file' => new \\CURLFile(realpath($destination)));//5.5+\n} else {\n    if (defined('CURLOPT_SAFE_UPLOAD')) {\n        curl_setopt($curl, CURLOPT_SAFE_UPLOAD, false);\n    }\n    $data = array('file' => '@' . realpath($destination));//<=5.5\n}\n```\n\n```\n// 序列化与反序列化\n\n概念:\n序列化：把变量(所有类型)转成能传输和储存的变量(不丢失原变量的属性和结构)\n反序列化：把字符串转成原变量\n\n函数：\n序列化：serialize, json_encode(不能序列化对象的方法，序列化对象时只能序列化对象的 public 属性)\n反序列化：unserialize, json_decode\n```\n\n```\n// 组合和聚合的区别\n组合：A类在实例化对象的过程中产生了对B类的引用\n聚合：A类在实例化对象的过程中，不会立即实例化B类，而是等待外界非A类的对象传递\n\n```\n\n```\n// 记一个坑\n\nip2long函数\n- 32位系统下会转成带符号的int，范围-2^31~2^31-1\n- 64位系统下会转成不带符号的int，范围0~2^32-1\n```\n\n```\n// static和self的区别\n\n第一种解释:\n- static: 代表当前所引用的类\n- self: 代表当前代码片断所在的类\n\n第二种解释：\n如果子类和父类都有一个“A”方法。那么\n- static: 会调用到子类的A方法\n- self: 会调用到当前类的A方法，如果在子类中self::A()，将会调用到子类的A方法，如果在父类中，将会调用父类的A方法。\n\n```\n\n```\n//json_encode 使用时的一个坑\n\njson_encode有中文时,需要加入JSON_UNESCAPED_UNICODE,json_encode($data, JSON_UNESCAPED_UNICODE); (PHP版本要求：必须PHP5.4+),否则中文会转义为Unicode编码。\n\n例如:\n$arr = array('a'=>'只有所有者有读和写的权' ,'b'=>'所有者有读和写的权限，组用户只有读的权限');\necho json_encode($arr);\n\n1. 不加JSON_UNESCAPED_UNICODE时,结果为:\n{\"a\":\"\\u53ea\\u6709\\u6240\\u6709\\u8005\\u6709\\u8bfb\\u548c\\u5199\\u7684\\u6743\",\"b\":\"\\u6240\\u6709\\u8005\\u6709\\u8bfb\\u548c\\u5199\\u7684\\u6743\\u9650\\uff0c\\u7ec4\\u7528\\u6237\\u53ea\\u6709\\u8bfb\\u7684\\u6743\\u9650\"}\n\n2. 加了JSON_UNESCAPED_UNICODE时,结果为:{\"a\":\"只有所有者有读和写的权\",\"b\":\"所有者有读和写的权限，组用户只有读的权限\"}\n```\n\n```\n// 记一个坑\n\nstrpos函数\n- 查找字符串首次出现的位置，判断函数的返回值是否是整数时，应该使用\"===\"，而不能使用\"==\",因为这个函数可能返回布尔值 FALSE，\n但也可能返回等同于 FALSE 的非布尔值。比如，字符出现在第一个位置时。\n\n- 类似的函数还有，stripos(), strrpos(),strripos()。\n```\n###### 技巧\n\n- linux\n    + df -h: 更易读的查看磁盘空间\n    + du -h --max-depth=1 file_path:查看文件夹占用的空间，--max-depth文件夹下显示层级\n    + sudo rm -rf \\*.log：清理日志\n    + socket\n        * http socket = ip:port\n        * unix domain socket: unix process communication 进程间通信\n    + ubuntu16.04安装php5源：sudo apt-add-repository ppa:ondrej/php\n    + ubuntu中文支持：sudo apt-get install language-pack-zh-hant language-pack-zh-hans\n    + debian使用lantern无法启动： 安装依赖apt-get install libappindicator3-1\n    + 查看端口占用：lsof -i:[端口号] / netstat -a（显示所有选项，默认不显示LISTEN）p(显示关联的程序)n（不显示别名显示数字） | grep [端口号]\n\n- php:\n    + json_encode($data, JSON_UNESCAPED_UNICODE)\n    + php的自定义头信息都可以使用$_SERVER['HTTP_*']来获取\n    + 如果你想知道脚本开始执行(译注：即服务器端收到客户端请求)的时刻，使用$_SERVER[‘REQUEST_TIME’]要好于time()\n    + error_log(json_encode($data, JSON_UNESCAPED_UNICODE), 1/3, 'tigerbcoder@gmail.com/log_path')\n    + sudo watch service php5.6-fpm status\n    + foreach后的好习惯reset指针位置，unset掉$key，$value\n    + curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    + laravel ['lærə,vɛl]\n    + php中的语言结构：echo,exit(),print,empty(),unset(),isset(),list(),eval(),array()\n- git:\n    + git commit --amend 重写最近commit message\n    + git cherry-pick 移花接木\n- composer:\n    + 修改包来源: sudo composer config repositories.包名 vcs 包地址\n\n\n###### PHP的不足\n- PHP还是有很多不足的地方，比如无法进行高效的运算\n"
        },
        {
          "name": "redis",
          "type": "tree",
          "content": null
        },
        {
          "name": "search",
          "type": "tree",
          "content": null
        },
        {
          "name": "structure",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}