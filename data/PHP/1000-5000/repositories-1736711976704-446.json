{
  "metadata": {
    "timestamp": 1736711976704,
    "page": 446,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "oscarotero/Embed",
      "stars": 2102,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.544921875,
          "content": "/demo             export-ignore\r\n/tests            export-ignore\r\n/scripts          export-ignore\r\n/.github          export-ignore\r\n.gitattributes    export-ignore\r\n.gitignore        export-ignore\r\n.php_cs.dist      export-ignore\r\n.travis.yml       export-ignore\r\nphpunit.xml.dist  export-ignore\r\n/tests/cache/4pda.to.2022-12-04-406834-sostoyalsya_reliz_clown_of_duty_parodii_na_call_of_duty.php working-tree-encoding=windows-1251 diff=windows-1251\r\n/tests/cache/www.itmedia.co.jp.news-articles-2410-28-news159.html.php working-tree-encoding=sjis diff=sjis\r\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.064453125,
          "content": "*.cache\n*.code-workspace\ncomposer.lock\nenv.php\nphpunit.xml\nvendor\n"
        },
        {
          "name": ".php_cs.dist",
          "type": "blob",
          "size": 0.3125,
          "content": "<?php\n\nreturn My\\PhpCsFixerConfig::create()\n    ->setFinder(\n        PhpCsFixer\\Finder::create()\n            ->files()\n            ->name('*.php')\n            ->in(__DIR__.'/src')\n            ->in(__DIR__.'/demo')\n            ->in(__DIR__.'/tests')\n            ->exclude('cache')\n            ->exclude('fixtures')\n    );"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 10.775390625,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/)\nand this project adheres to [Semantic Versioning](http://semver.org/).\n\n## [4.4.15] - 2025-01-02\n### Fixed\n- Type bug [#553].\n\n## [4.4.14] - 2024-12-04\n### Fixed\n- Php 8.4 support [#551].\n\n## [4.4.13] - 2024-11-21\n### Fixed\n- Php 8.4 support [#548].\n\n## [4.4.12] - 2024-07-24\n### Fixed\n- X.com (Twitter) [#540]\n- Updated oembed resources.\n\n## [4.4.11] - 2024-06-10\n### Fixed\n- Updated oEmbed entry points [#537]\n\n## [4.4.10] - 2023-12-10\n### Fixed\n- PHP 7.4 support\n- Use correct method for string length [#529]\n\n## [4.4.9] - 2023-12-01\n### Fixed\n- Performance and memory leak issues [#525], [#527].\n\n## [4.4.8] - 2023-05-22\n### Fixed\n- Support for `psr/http-message@2` [#514], [#515]\n\n## [4.4.7] - 2022-12-12\n### Fixed\n- Href attributes with `undefined` values [#501], [#502]\n- Deprecated warning for var interpolation in PHP 8.2 [#506]\n- Prevent unsupported operand types exception [#507]\n\n## [4.4.6] - 2022-10-02\n### Fixed\n- Some code issues detected by phpstan: [#495], [#496], [#497], [#498].\n- Fix for quotation marks in redirect URL [#499]\n\n## [4.4.5] - 2022-09-06\n### Fixed\n- Updated oembed endpoints [#494]\n\n## [4.4.4] - 2022-04-13\n### Fixed\n- Error getting data from Linked data [#481].\n\n## [4.4.3] - 2022-03-13\n### Fixed\n- PHP 8.1 deprecation notice [#480].\n\n## [4.4.2] - 2022-02-13\n### Added\n- Options to customize the CurlClient to perform http queries [#474].\n\n## [4.4.1] - 2022-02-06\n### Fixed\n- PHP 8.1 deprecation notice [#473].\n\n## [4.4.0] - 2022-01-08\n### Added\n- New settings option `twitter:token` to use Twitter API to get the data [#364] [#468].\n\n### Fixed\n- Headers not sent properly by curl [#466], [#467].\n\n## [4.3.5] - 2021-10-10\n### Fixed\n- Updated oEmbed endpoints\n- Fixed embed code for Instagram [#456], [#459]\n\n### Security\n- Fixed a possible XML Quadratic Blowup vulnerability.\n\n## [4.3.4] - 2021-06-22\n### Fixed\n- Urls of images should include the same url for the `$info->image` value. [#452]\n\n## [4.3.3] - 2021-06-22\n### Fixed\n- Facebook embed redirects to `/login`. [#450], [#451]\n\n## [4.3.2] - 2021-04-04\n### Fixed\n- Add configured oEmbed query parameters to all oEmbed endpoints [#437]\n- Updated oEmbed endpoints.\n- Replaced Travis with Github workflows for testing\n\n## [4.3.1] - 2021-03-21\n### Added\n- Support for binary files (video, audio, images, etc) [#412] [#413]\n\n### Fixed\n- Oembed for facebook photos [#405] [#406]\n- Oembed for facebook videos [#432] [#433]\n- Added more ways to detect data using meta tags [#427]\n- Bandcamp provider name [#429] [#430]\n\n## [4.3.0] - 2020-11-04\n### Added\n- New function `$embed->setSettings()` to pass the settings before get the site info\n\n### Fixed\n- PHP 8 compatibility [#394]\n- Facebook and Instagram adapted to the new API changes [#392] [#399]\n\n## [4.2.7] - 2020-09-23\n### Added\n- New option `twitch:parent` to fix Twitch embed with iframes [#384]\n\n### Fixed\n- Added `datePublished` check to `PublishedTime` extractor [#385] [#386]\n- Added `@property-read` for IDE suppport [#387] [#388]\n\n## [4.2.6] - 2020-08-28\n### Fixed\n- Code width and height when the provided value is not numeric (ex: 100%) [#380]\n\n## [4.2.5] - 2020-08-01\n### Fixed\n- Github TypeError exception with some urls [#375]\n\n## [4.2.4] - 2020-07-06\n### Fixed\n- Ignore invalid urls instead throw an exception\n- Updated oembed list of endpoints\n\n## [4.2.3] - 2020-06-12\n### Fixed\n- Suppport for other non-latin alphabets such Persian or Arabic [#366]\n\n## [4.2.2] - 2020-05-31\n### Fixed\n- Provided a fallback for oEmbed compatible sites like Instagram that redirects to login page [#357]\n\n## [4.2.1] - 2020-05-25\n### Fixed\n- Redirect urls like `t.co`.\n\n## [4.2.0] - 2020-05-23\n### Added\n- Added the `ignored_errors` settings to ignore some curls errors instead throw an exception [#355]\n- Support for Twitch embeds [#332]\n\n### Fixed\n- Ignored linkedData errors [#356]\n\n## [4.1.1] - 2020-04-24\n### Added\n- Updated oembed endpoints from `oembed.com`\n- Add support for tiktok.com\n\n## [4.1.0] - 2020-04-19\n### Added\n- Ability to send settings to `CurlClient`. Added the `cookies_path` setting to customize the file used for cookies. [#345]\n- `Document::selectCss()` function to select elements using css selectors instead xpath (it requires `symfony/css-selector`)\n- `Document::removeCss()` function to remove elements using css selectors instead xpath (it requires `symfony/css-selector`)\n- Ability to configure OEmbed parameters from the outside using the `oembed:query_parameters` setting [#346]\n\n## [4.0.0] - 2020-03-13\nFull library refactoring.\n\n### Added\n- Support for multiple parallel request with `curl_multi`\n- Support for PSR-7 Http Messages, PSR-17 Http Factories and PSR-18 Http Client\n- `cms` value\n- `language` to detect the page language\n- `languages` to detect urls to versions in different languages\n- `favicon` to detect small favicons (16 or 32px)\n- `icon` to detect big icons (from 48px)\n\n### Changed\n- Changed providers (oEmbed, Html, OpenGraph etc) by independent detectors (title, url, language etc).\n- The `tags` value is renamed to `keywords`\n- Use Psr standards instead custom interfaces.\n- Improved tests using cached responses.\n\n### Removed\n- Support for PHP<7.4\n- `type` value (is was very confusing)\n- `images` value\n- `providerImage` (use `favicon` or `icon` instead)\n- Support for files (pdf, jpg, video, etc).\n\n[#332]: https://github.com/oscarotero/Embed/issues/332\n[#345]: https://github.com/oscarotero/Embed/issues/345\n[#346]: https://github.com/oscarotero/Embed/issues/346\n[#355]: https://github.com/oscarotero/Embed/issues/355\n[#356]: https://github.com/oscarotero/Embed/issues/356\n[#357]: https://github.com/oscarotero/Embed/issues/357\n[#364]: https://github.com/oscarotero/Embed/issues/364\n[#366]: https://github.com/oscarotero/Embed/issues/366\n[#375]: https://github.com/oscarotero/Embed/issues/375\n[#380]: https://github.com/oscarotero/Embed/issues/380\n[#384]: https://github.com/oscarotero/Embed/issues/384\n[#385]: https://github.com/oscarotero/Embed/issues/385\n[#386]: https://github.com/oscarotero/Embed/issues/386\n[#387]: https://github.com/oscarotero/Embed/issues/387\n[#388]: https://github.com/oscarotero/Embed/issues/388\n[#392]: https://github.com/oscarotero/Embed/issues/392\n[#394]: https://github.com/oscarotero/Embed/issues/394\n[#399]: https://github.com/oscarotero/Embed/issues/399\n[#405]: https://github.com/oscarotero/Embed/issues/405\n[#406]: https://github.com/oscarotero/Embed/issues/406\n[#412]: https://github.com/oscarotero/Embed/issues/412\n[#413]: https://github.com/oscarotero/Embed/issues/413\n[#427]: https://github.com/oscarotero/Embed/issues/427\n[#429]: https://github.com/oscarotero/Embed/issues/429\n[#430]: https://github.com/oscarotero/Embed/issues/430\n[#432]: https://github.com/oscarotero/Embed/issues/432\n[#433]: https://github.com/oscarotero/Embed/issues/433\n[#437]: https://github.com/oscarotero/Embed/issues/437\n[#450]: https://github.com/oscarotero/Embed/issues/450\n[#451]: https://github.com/oscarotero/Embed/issues/451\n[#452]: https://github.com/oscarotero/Embed/issues/452\n[#456]: https://github.com/oscarotero/Embed/issues/456\n[#459]: https://github.com/oscarotero/Embed/issues/459\n[#466]: https://github.com/oscarotero/Embed/issues/466\n[#467]: https://github.com/oscarotero/Embed/issues/467\n[#468]: https://github.com/oscarotero/Embed/issues/468\n[#473]: https://github.com/oscarotero/Embed/issues/473\n[#474]: https://github.com/oscarotero/Embed/issues/474\n[#480]: https://github.com/oscarotero/Embed/issues/480\n[#481]: https://github.com/oscarotero/Embed/issues/481\n[#494]: https://github.com/oscarotero/Embed/issues/494\n[#495]: https://github.com/oscarotero/Embed/issues/495\n[#496]: https://github.com/oscarotero/Embed/issues/496\n[#497]: https://github.com/oscarotero/Embed/issues/497\n[#498]: https://github.com/oscarotero/Embed/issues/498\n[#499]: https://github.com/oscarotero/Embed/issues/499\n[#501]: https://github.com/oscarotero/Embed/issues/501\n[#502]: https://github.com/oscarotero/Embed/issues/502\n[#506]: https://github.com/oscarotero/Embed/issues/506\n[#507]: https://github.com/oscarotero/Embed/issues/507\n[#514]: https://github.com/oscarotero/Embed/issues/514\n[#515]: https://github.com/oscarotero/Embed/issues/515\n[#525]: https://github.com/oscarotero/Embed/issues/525\n[#527]: https://github.com/oscarotero/Embed/issues/527\n[#529]: https://github.com/oscarotero/Embed/issues/529\n[#537]: https://github.com/oscarotero/Embed/issues/537\n[#540]: https://github.com/oscarotero/Embed/issues/540\n[#548]: https://github.com/oscarotero/Embed/issues/548\n[#551]: https://github.com/oscarotero/Embed/issues/551\n[#553]: https://github.com/oscarotero/Embed/issues/553\n\n[4.4.15]: https://github.com/oscarotero/Embed/compare/v4.4.14...v4.4.15\n[4.4.14]: https://github.com/oscarotero/Embed/compare/v4.4.13...v4.4.14\n[4.4.13]: https://github.com/oscarotero/Embed/compare/v4.4.12...v4.4.13\n[4.4.12]: https://github.com/oscarotero/Embed/compare/v4.4.11...v4.4.12\n[4.4.11]: https://github.com/oscarotero/Embed/compare/v4.4.10...v4.4.11\n[4.4.10]: https://github.com/oscarotero/Embed/compare/v4.4.9...v4.4.10\n[4.4.9]: https://github.com/oscarotero/Embed/compare/v4.4.8...v4.4.9\n[4.4.8]: https://github.com/oscarotero/Embed/compare/v4.4.7...v4.4.8\n[4.4.7]: https://github.com/oscarotero/Embed/compare/v4.4.6...v4.4.7\n[4.4.6]: https://github.com/oscarotero/Embed/compare/v4.4.5...v4.4.6\n[4.4.5]: https://github.com/oscarotero/Embed/compare/v4.4.4...v4.4.5\n[4.4.4]: https://github.com/oscarotero/Embed/compare/v4.4.3...v4.4.4\n[4.4.3]: https://github.com/oscarotero/Embed/compare/v4.4.2...v4.4.3\n[4.4.2]: https://github.com/oscarotero/Embed/compare/v4.4.1...v4.4.2\n[4.4.1]: https://github.com/oscarotero/Embed/compare/v4.4.0...v4.4.1\n[4.4.0]: https://github.com/oscarotero/Embed/compare/v4.3.5...v4.4.0\n[4.3.5]: https://github.com/oscarotero/Embed/compare/v4.3.4...v4.3.5\n[4.3.4]: https://github.com/oscarotero/Embed/compare/v4.3.3...v4.3.4\n[4.3.3]: https://github.com/oscarotero/Embed/compare/v4.3.2...v4.3.3\n[4.3.2]: https://github.com/oscarotero/Embed/compare/v4.3.1...v4.3.2\n[4.3.1]: https://github.com/oscarotero/Embed/compare/v4.3.0...v4.3.1\n[4.3.0]: https://github.com/oscarotero/Embed/compare/v4.2.7...v4.3.0\n[4.2.7]: https://github.com/oscarotero/Embed/compare/v4.2.6...v4.2.7\n[4.2.6]: https://github.com/oscarotero/Embed/compare/v4.2.5...v4.2.6\n[4.2.5]: https://github.com/oscarotero/Embed/compare/v4.2.4...v4.2.5\n[4.2.4]: https://github.com/oscarotero/Embed/compare/v4.2.3...v4.2.4\n[4.2.3]: https://github.com/oscarotero/Embed/compare/v4.2.2...v4.2.3\n[4.2.2]: https://github.com/oscarotero/Embed/compare/v4.2.1...v4.2.2\n[4.2.1]: https://github.com/oscarotero/Embed/compare/v4.2.0...v4.2.1\n[4.2.0]: https://github.com/oscarotero/Embed/compare/v4.1.1...v4.2.0\n[4.1.1]: https://github.com/oscarotero/Embed/compare/v4.1.0...v4.1.1\n[4.1.0]: https://github.com/oscarotero/Embed/compare/v4.0.0...v4.1.0\n[4.0.0]: https://github.com/oscarotero/Embed/releases/tag/v4.0.0\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0595703125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2017 Oscar Otero Marzoa\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.001953125,
          "content": "# Searching MAINTAINER\n\nAfter 11 years since the first version of Embed was released, I don't have the time or motivation to continue maintaining this project. I rarely write PHP code and am not aware of the latest features of PHP. If anyone wants to continue maintaining and evolving this library, please open an issue or contact me.\n\nMeanwhile, I'll continue accepting PR from the community (I don't want this project to die), but won't be actively working on improving it. Thanks!\n\n# Embed\n\n\n[![Latest Version on Packagist][ico-version]][link-packagist]\n[![Total Downloads][ico-downloads]][link-packagist]\n[![Monthly Downloads][ico-m-downloads]][link-packagist]\n[![Software License][ico-license]](LICENSE)\n\nPHP library to get information from any web page (using oembed, opengraph, twitter-cards, scrapping the html, etc). It's compatible with any web service (youtube, vimeo, flickr, instagram, etc) and has adapters to some sites like (archive.org, github, facebook, etc).\n\nRequirements:\n\n* PHP 7.4+\n* Curl library installed\n* PSR-17 implementation. By default these libraries are detected automatically:\n  * [laminas/laminas-diactoros](https://github.com/laminas/laminas-diactoros)\n  * [guzzle/psr7](https://github.com/guzzle/psr7)\n  * [nyholm/psr7](https://github.com/Nyholm/psr7)\n  * [sunrise/http-message](https://github.com/sunrise-php/http-message)\n\n> If you need PHP 5.5-7.3 support, [use the 3.x version](https://github.com/oscarotero/Embed/tree/v3.x)\n\n## Online demo\n\nRun `php -S localhost:8888 demo/index.php`\n\n## Video Tutorial\n [<img src=\"https://img.youtube.com/vi/4YCLRpKY1cs/0.jpg\" width=\"250\">](https://youtu.be/4YCLRpKY1cs)\n \n\n## Installation\n\nThis package is installable and autoloadable via Composer as [embed/embed](https://packagist.org/packages/embed/embed).\n\n```\n$ composer require embed/embed\n```\n\n## Usage\n\n```php\nuse Embed\\Embed;\n\n$embed = new Embed();\n\n//Load any url:\n$info = $embed->get('https://www.youtube.com/watch?v=PP1xn5wHtxE');\n\n//Get content info\n\n$info->title; //The page title\n$info->description; //The page description\n$info->url; //The canonical url\n$info->keywords; //The page keywords\n\n$info->image; //The thumbnail or main image\n\n$info->code->html; //The code to embed the image, video, etc\n$info->code->width; //The exact width of the embed code (if exists)\n$info->code->height; //The exact height of the embed code (if exists)\n$info->code->ratio; //The percentage of height / width to emulate the aspect ratio using paddings.\n\n$info->authorName; //The resource author\n$info->authorUrl; //The author url\n\n$info->cms; //The cms used\n$info->language; //The language of the page\n$info->languages; //The alternative languages\n\n$info->providerName; //The provider name of the page (Youtube, Twitter, Instagram, etc)\n$info->providerUrl; //The provider url\n$info->icon; //The big icon of the site\n$info->favicon; //The favicon of the site (an .ico file or a png with up to 32x32px)\n\n$info->publishedTime; //The published time of the resource\n$info->license; //The license url of the resource\n$info->feeds; //The RSS/Atom feeds\n```\n\n## Parallel multiple requests\n\n```php\nuse Embed\\Embed;\n\n$embed = new Embed();\n\n//Load multiple urls asynchronously:\n$infos = $embed->getMulti(\n    'https://www.youtube.com/watch?v=PP1xn5wHtxE',\n    'https://twitter.com/carlosmeixidefl/status/1230894146220625933',\n    'https://en.wikipedia.org/wiki/Tordoia',\n);\n\nforeach ($infos as $info) {\n    echo $info->title;\n}\n```\n\n## Document\n\nThe document is the object that store the html code of the page. You can use it to extract extra info from the html code:\n\n```php\n//Get the document object\n$document = $info->getDocument();\n\n$document->link('image_src'); //Returns the href of a <link>\n$document->getDocument(); //Returns the DOMDocument instance\n$html = (string) $document; //Returns the html code\n\n$document->select('.//h1'); //Search\n```\n\nYou can perform xpath queries in order to select specific elements. A search always return an instance of a `Embed\\QueryResult`:\n\n```php\n//Search the A elements\n$result = $document->select('.//a');\n\n//Filter the results\n$result->filter(fn ($node) => $node->getAttribute('href'));\n\n$id = $result->str('id'); //Return the id of the first result as string\n$text = $result->str(); //Return the content of the first result\n\n$ids = $result->strAll('id'); //Return an array with the ids of all results as string\n$texts = $result->strAll(); //Return an array with the content of all results as string\n\n$tabindex = $result->int('tabindex'); //Return the tabindex attribute of the first result as integer\n$number = $result->int(); //Return the content of the first result as integer\n\n$href = $result->url('href'); //Return the href attribute of the first result as url (converts relative urls to absolutes)\n$url = $result->url(); //Return the content of the first result as url\n\n$node = $result->node(); //Return the first node found (DOMElement)\n$nodes = $result->nodes(); //Return all nodes found\n```\n\n## Metas\n\nFor convenience, the object `Metas` stores the value of all `<meta>` elements located in the html, so you can get the values easier. The key of every meta is get from the `name`, `property` or `itemprop` attributes and the value is get from `content`.\n\n```php\n//Get the Metas object\n$metas = $info->getMetas();\n\n$metas->all(); //Return all values\n$metas->get('og:title'); //Return a key value\n$metas->str('og:title'); //Return the value as string (remove html tags)\n$metas->html('og:description'); //Return the value as html\n$metas->int('og:video:width'); //Return the value as integer\n$metas->url('og:url'); //Return the value as full url (converts relative urls to absolutes)\n```\n\n## OEmbed\n\nIn addition to the html and metas, this library uses [oEmbed](https://oembed.com/) endpoints to get additional data. You can get this data as following:\n\n```php\n//Get the oEmbed object\n$oembed = $info->getOEmbed();\n\n$oembed->all(); //Return all raw data\n$oembed->get('title'); //Return a key value\n$oembed->str('title'); //Return the value as string (remove html tags)\n$oembed->html('html'); //Return the value as html\n$oembed->int('width'); //Return the value as integer\n$oembed->url('url'); //Return the value as full url (converts relative urls to absolutes)\n```\n\nAdditional oEmbed parameters (like instagrams `hidecaption`) can also be provided:\n```php\n$embed = new Embed();\n\n$result = $embed->get('https://www.instagram.com/p/B_C0wheCa4V/');\n$result->setSettings([\n    'oembed:query_parameters' => ['hidecaption' => true]\n]);\n$oembed = $info->getOEmbed();\n```\n\n## LinkedData\n\nAnother API available by default, used to extract info using the [JsonLD](https://www.w3.org/TR/json-ld/) schema.\n\n```php\n//Get the linkedData object\n$ld = $info->getLinkedData();\n\n$ld->all(); //Return all data\n$ld->get('name'); //Return a key value\n$ld->str('name'); //Return the value as string (remove html tags)\n$ld->html('description'); //Return the value as html\n$ld->int('width'); //Return the value as integer\n$ld->url('url'); //Return the value as full url (converts relative urls to absolutes)\n```\n\n## Other APIs\n\nSome sites like Wikipedia or Archive.org provide a custom API that is used to fetch more reliable data. You can get the API object with the method `getApi()` but note that not all results have this method. The Api object has the same methods than oEmbed:\n\n```php\n//Get the API object\n$api = $info->getApi();\n\n$api->all(); //Return all raw data\n$api->get('title'); //Return a key value\n$api->str('title'); //Return the value as string (remove html tags)\n$api->html('html'); //Return the value as html\n$api->int('width'); //Return the value as integer\n$api->url('url'); //Return the value as full url (converts relative urls to absolutes)\n```\n\n## Extending Embed\n\nDepending of your needs, you may want to extend this library with extra features or change the way it makes some operations.\n\n### PSR\n\nEmbed use some PSR standards to be the most interoperable possible:\n\n- [PSR-7](https://www.php-fig.org/psr/psr-7/) Standard interfaces to represent http requests, responses and uris\n- [PSR-17](https://www.php-fig.org/psr/psr-17/) Standard factories to create PSR-7 objects\n- [PSR-18](https://www.php-fig.org/psr/psr-18/) Standard interface to send a http request and return a response\n\nEmbed comes with a CURL client compatible with PSR-18 but you need to install a PSR-7 / PSR-17 library. [Here you can see a list of popular libraries](https://github.com/middlewares/awesome-psr15-middlewares#psr-7-implementations) and the library can detect automatically 'laminas\\diactoros', 'guzzleHttp\\psr7', 'slim\\psr7', 'nyholm\\psr7' and 'sunrise\\http' (in this order). If you want to use a different PSR implementation, you can do it in this way:\n\n```php\nuse Embed\\Embed;\nuse Embed\\Http\\Crawler;\n\n$client = new CustomHttpClient();\n$requestFactory = new CustomRequestFactory();\n$uriFactory = new CustomUriFactory();\n\n//The Crawler is responsible for perform http queries\n$crawler = new Crawler($client, $requestFactory, $uriFactory);\n\n//Create an embed instance passing the Crawler\n$embed = new Embed($crawler);\n```\n\n### Adapters\n\nThere are some sites with special needs: because they provide public APIs that allows to extract more info (like Wikipedia or Archive.org) or because we need to change how to extract the data in this particular site. For all that cases we have the adapters, that are classes extending the default classes to provide extra functionality.\n\nBefore creating an adapter, you need to understand how Embed work: when you execute this code, you get a `Extractor` class\n\n```php\n//Get the Extractor with all info\n$info = $embed->get($url);\n\n//The extractor have document and oembed:\n$document = $info->getDocument();\n$oembed = $info->getOEmbed();\n```\n\nThe `Extractor` class has many `Detectors`. Each detector is responsible to detect a specific piece of info. For example, there's a detector for the title, other for description, image, code, etc.\n\nSo, an adapter is basically an extractor created specifically for a site. It can contains also custom detectors or apis. If you see the `src/Adapters` folder you can see all adapters.\n\nIf you create an adapter, you need also register to Embed, so it knows in which website needs to use. To do that, there's the `ExtractorFactory` object, that is responsible for instantiate the right extractor for each site.\n\n```php\nuse Embed\\Embed;\n\n$embed = new Embed();\n\n$factory = $embed->getExtractorFactory();\n\n//Use this MySite adapter for mysite.com\n$factory->addAdapter('mysite.com', MySite::class);\n\n//Remove the adapter for pinterest.com, so it will use the default extractor\n$factory->removeAdapter('pinterest.com');\n\n//Change the default extractor\n$factory->setDefault(CustomExtractor::class);\n```\n\n### Detectors\n\nEmbed comes with several predefined detectors, but you may want to change or add more. Just create a class extending `Embed\\Detectors\\Detector` class and register it in the extractor factory. For example:\n\n```php\nuse Embed\\Embed;\nuse Embed\\Detectors\\Detector;\n\nclass Robots extends Detector\n{\n    public function detect(): ?string\n    {\n        $response = $this->extractor->getResponse();\n        $metas = $this->extractor->getMetas();\n\n        return $response->getHeaderLine('x-robots-tag'),\n            ?: $metas->str('robots');\n    }\n}\n\n//Register the detector\n$embed = new Embed();\n$embed->getExtractorFactory()->addDetector('robots', Robots::class);\n\n//Use it\n$info = $embed->get('http://example.com');\n$robots = $info->robots;\n```\n\n### Settings\n\nIf you need to pass settings to the CurlClient to perform http queries:\n\n```php\nuse Embed\\Embed;\nuse Embed\\Http\\Crawler;\nuse Embed\\Http\\CurlClient;\n\n$client = new CurlClient();\n$client->setSettings([\n    'cookies_path' => $cookies_path,\n    'ignored_errors' => [18],\n    'max_redirs' => 3,               // see CURLOPT_MAXREDIRS\n    'connect_timeout' => 2,          // see CURLOPT_CONNECTTIMEOUT\n    'timeout' => 2,                  // see CURLOPT_TIMEOUT\n    'ssl_verify_host' => 2,          // see CURLOPT_SSL_VERIFYHOST\n    'ssl_verify_peer' => 1,          // see CURLOPT_SSL_VERIFYPEER\n    'follow_location' => true,       // see CURLOPT_FOLLOWLOCATION\n    'user_agent' => 'Mozilla',       // see CURLOPT_USERAGENT\n]);\n\n$embed = new Embed(new Crawler($client));\n```\n\nIf you need to pass settings to your detectors, you can add settings to the `ExtractorFactory`:\n\n```php\nuse Embed\\Embed;\n\n$embed = new Embed();\n$embed->setSettings([\n    'oembed:query_parameters' => [],  //Extra parameters send to oembed\n    'twitch:parent' => 'example.com', //Required to embed twitch videos as iframe\n    'facebook:token' => '1234|5678',  //Required to embed content from Facebook\n    'instagram:token' => '1234|5678', //Required to embed content from Instagram\n    'twitter:token' => 'asdf',        //Improve the data from twitter\n]);\n$info = $embed->get($url);\n```\n\nNote: The built-in detectors does not require settings. This feature is only for convenience if you create a specific detector that requires settings.\n\n---\n\n[ico-version]: https://poser.pugx.org/embed/embed/v/stable\n[ico-license]: https://poser.pugx.org/embed/embed/license\n[ico-downloads]: https://poser.pugx.org/embed/embed/downloads\n[ico-m-downloads]: https://poser.pugx.org/embed/embed/d/monthly\n\n[link-packagist]: https://packagist.org/packages/embed/embed\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.8876953125,
          "content": "{\n    \"name\": \"embed/embed\",\n    \"type\": \"library\",\n    \"description\": \"PHP library to retrieve page info using oembed, opengraph, etc\",\n    \"keywords\": [\n        \"oembed\",\n        \"opengraph\",\n        \"twitter cards\",\n        \"embed\",\n        \"embedly\"\n    ],\n    \"homepage\": \"https://github.com/oscarotero/Embed\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Oscar Otero\",\n            \"email\": \"oom@oscarotero.com\",\n            \"homepage\": \"http://oscarotero.com\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"support\": {\n        \"email\": \"oom@oscarotero.com\",\n        \"issues\": \"https://github.com/oscarotero/Embed/issues\"\n    },\n    \"require\": {\n        \"php\": \"^7.4|^8\",\n        \"ext-curl\": \"*\",\n        \"ext-dom\": \"*\",\n        \"ext-json\": \"*\",\n        \"ext-mbstring\": \"*\",\n        \"composer/ca-bundle\": \"^1.0\",\n        \"oscarotero/html-parser\": \"^0.1.4\",\n        \"psr/http-message\": \"^1.0|^2.0\",\n        \"psr/http-client\": \"^1.0\",\n        \"psr/http-factory\": \"^1.0\",\n        \"ml/json-ld\": \"^1.1\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^9.0\",\n        \"friendsofphp/php-cs-fixer\": \"^2.0\",\n        \"nyholm/psr7\": \"^1.2\",\n        \"oscarotero/php-cs-fixer-config\": \"^1.0\",\n        \"brick/varexporter\": \"^0.3.1\",\n        \"symfony/css-selector\": \"^5.0\"\n    },\n    \"suggest\": {\n        \"symfony/css-selector\": \"If you want to get elements using css selectors\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Embed\\\\\": \"src\"\n        },\n        \"files\": [\n            \"src/functions.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Embed\\\\Tests\\\\\": \"tests/\"\n        }\n    },\n    \"scripts\": {\n        \"demo\": \"php -S localhost:8888 demo/index.php\",\n        \"test\": \"phpunit\",\n        \"cs-fix\": \"php-cs-fixer fix\",\n        \"update-resources\": [\n            \"php scripts/update-oembed.php\",\n            \"php scripts/update-suffix.php\"\n        ]\n    }\n}\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.6875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.4/phpunit.xsd\"\n    bootstrap=\"vendor/autoload.php\"\n    backupGlobals=\"false\"\n    backupStaticAttributes=\"false\"\n    colors=\"true\"\n    verbose=\"true\"\n    convertErrorsToExceptions=\"true\"\n    convertNoticesToExceptions=\"true\"\n    convertWarningsToExceptions=\"true\"\n    processIsolation=\"false\"\n    stopOnFailure=\"false\">\n\t<testsuites>\n\t\t<testsuite name=\"All tests\">\n\t\t\t<directory>tests</directory>\n\t\t</testsuite>\n\t</testsuites>\n    <groups>\n        <exclude>\n            <group>ignore</group>\n        </exclude>\n    </groups>\n</phpunit>\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}